{
  final PsiElement element=descriptor.getPsiElement();
  final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)element.getParent();
  final PsiExpression parentExpression=(PsiExpression)prefixExpression.getParent();
  @NonNls final StringBuilder newExpression=new StringBuilder();
  if (parentExpression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parentExpression;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    newExpression.append(lhs.getText());
    final IElementType tokenType=assignmentExpression.getOperationTokenType();
    if (tokenType.equals(JavaTokenType.PLUSEQ)) {
      newExpression.append("-=");
    }
 else {
      newExpression.append("+=");
    }
  }
 else   if (parentExpression instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parentExpression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    newExpression.append(lhs.getText());
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (tokenType.equals(JavaTokenType.PLUS)) {
      newExpression.append('-');
    }
 else {
      newExpression.append('+');
    }
  }
  final PsiExpression operand=prefixExpression.getOperand();
  if (operand == null) {
    return;
  }
  newExpression.append(operand.getText());
  replaceExpression(parentExpression,newExpression.toString());
}
