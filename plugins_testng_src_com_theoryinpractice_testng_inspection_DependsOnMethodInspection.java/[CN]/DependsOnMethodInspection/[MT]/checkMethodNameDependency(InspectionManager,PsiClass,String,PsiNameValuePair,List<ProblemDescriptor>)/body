{
  LOGGER.debug("Found dependsOnMethods with text: " + methodName);
  if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') {
    LOGGER.debug("dependsOnMethods contains ()" + psiClass.getName());
    ProblemDescriptor descriptor=manager.createProblemDescriptor(dep,"Method '" + methodName + "' should not include () characters.",(LocalQuickFix)null,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
    problemDescriptors.add(descriptor);
  }
 else {
    PsiMethod[] foundMethods=psiClass.findMethodsByName(methodName,true);
    if (foundMethods.length == 0) {
      LOGGER.debug("dependsOnMethods method doesn't exist:" + methodName);
      ProblemDescriptor descriptor=manager.createProblemDescriptor(dep,"Method '" + methodName + "' unknown.",(LocalQuickFix)null,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      problemDescriptors.add(descriptor);
    }
 else {
      boolean hasTestsOrConfigs=false;
      for (      PsiMethod foundMethod : foundMethods) {
        hasTestsOrConfigs|=TestNGUtil.hasTest(foundMethod) || TestNGUtil.hasConfig(foundMethod);
      }
      if (!hasTestsOrConfigs) {
        ProblemDescriptor descriptor=manager.createProblemDescriptor(dep,"Method '" + methodName + "' is not a test or configuration method.",(LocalQuickFix)null,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        problemDescriptors.add(descriptor);
      }
    }
  }
}
