{
  Set flags=new HashSet();
  Set opts=new HashSet();
  flags.add("h");
  flags.add("help");
  flags.add("usage");
  flags.add("license");
  flags.add("version");
  flags.add("dl");
  flags.add("noupa");
  flags.add("nopvr");
  flags.add("partial");
  opts.add("name");
  CommandLine cl=new CommandLine(args,flags,opts);
  String[] badOpts=cl.getBadOpts();
  if (badOpts.length > 0) {
    throw new IllegalArgumentException("Unrecognized option: " + badOpts[0]);
  }
  boolean dl=(cl.getOpt("dl") != null);
  boolean nopvr=(cl.getOpt("nopvr") != null);
  boolean noupa=(cl.getOpt("noupa") != null);
  File[] schemaFiles=cl.filesEndingWith(".xsd");
  String rootName=cl.getOpt("name");
  if (rootName == null) {
    throw new IllegalArgumentException("Required option \"-name\" must be present");
  }
  List sdocs=new ArrayList();
  for (int i=0; i < schemaFiles.length; i++) {
    try {
      sdocs.add(XmlObject.Factory.parse(schemaFiles[i],(new XmlOptions()).setLoadLineNumbers().setLoadMessageDigest()));
    }
 catch (    Exception e) {
      throw new IllegalArgumentException("Can not load schema file: " + schemaFiles[i] + ": "+ e.getLocalizedMessage());
    }
  }
  XmlObject[] schemas=(XmlObject[])sdocs.toArray(new XmlObject[sdocs.size()]);
  SchemaTypeSystem sts=null;
  if (schemas.length > 0) {
    Collection errors=new ArrayList();
    XmlOptions compileOptions=new XmlOptions();
    if (dl)     compileOptions.setCompileDownloadUrls();
    if (nopvr)     compileOptions.setCompileNoPvrRule();
    if (noupa)     compileOptions.setCompileNoUpaRule();
    try {
      sts=XmlBeans.compileXsd(schemas,XmlBeans.getBuiltinTypeSystem(),compileOptions);
    }
 catch (    XmlException e) {
      String out="Schema compilation errors: ";
      for (      Object error : errors)       out+="\n" + error;
      throw new IllegalArgumentException(out);
    }
  }
  if (sts == null) {
    throw new IllegalArgumentException("No Schemas to process.");
  }
  SchemaType[] globalElems=sts.documentTypes();
  SchemaType elem=null;
  for (int i=0; i < globalElems.length; i++) {
    if (rootName.equals(globalElems[i].getDocumentElementName().getLocalPart())) {
      elem=globalElems[i];
      break;
    }
  }
  if (elem == null) {
    throw new IllegalArgumentException("Could not find a global element with name \"" + rootName + "\"");
  }
  return SampleXmlUtil.createSampleForType(elem);
}
