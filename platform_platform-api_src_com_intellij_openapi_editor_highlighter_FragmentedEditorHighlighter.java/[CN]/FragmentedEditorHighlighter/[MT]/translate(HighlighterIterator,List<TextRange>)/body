{
  if (iterator.atEnd())   return;
  int offset=0;
  for (  TextRange range : ranges) {
    while (range.getStartOffset() > iterator.getStart()) {
      iterator.advance();
      if (iterator.atEnd())       return;
    }
    while (range.getEndOffset() >= iterator.getEnd()) {
      int relativeStart=iterator.getStart() - range.getStartOffset();
      boolean merged=false;
      if (myMergeByTextAttributes && !myPieces.isEmpty()) {
        final Integer first=myPieces.descendingKeySet().first();
        final Element element=myPieces.get(first);
        if (element.getEnd() >= offset + relativeStart && myPieces.get(first).getAttributes().equals(iterator.getTextAttributes())) {
          merged=true;
          myPieces.put(element.getStart(),new Element(element.getStart(),offset + (iterator.getEnd() - range.getStartOffset()),iterator.getTokenType(),iterator.getTextAttributes()));
        }
      }
      if (!merged) {
        myPieces.put(offset + relativeStart,new Element(offset + relativeStart,offset + (iterator.getEnd() - range.getStartOffset()),iterator.getTokenType(),iterator.getTextAttributes()));
      }
      iterator.advance();
      if (iterator.atEnd())       return;
    }
    offset+=range.getLength() + 1 + myAdditionalOffset;
  }
}
