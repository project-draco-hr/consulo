{
  List<IdeaPluginDescriptor> installedPlugins=new ArrayList<IdeaPluginDescriptor>(Arrays.asList(PluginManager.getPlugins()));
  if (installedPlugins.size() == 0) {
    addListItemToPlugins(installedPluginsPanel,italic(UIBundle.message("welcome.screen.plugins.panel.no.plugins.currently.installed.message.text")));
    addListItemToPlugins(bundledPluginsPanel,italic(UIBundle.message("welcome.screen.plugins.panel.all.bundled.plugins.were.uninstalled.message.text")));
  }
 else {
    final Comparator<IdeaPluginDescriptor> pluginsComparator=new Comparator<IdeaPluginDescriptor>(){
      public int compare(      final IdeaPluginDescriptor o1,      final IdeaPluginDescriptor o2){
        final boolean e1=((IdeaPluginDescriptorImpl)o1).isEnabled();
        final boolean e2=((IdeaPluginDescriptorImpl)o2).isEnabled();
        if (e1 && !e2)         return -1;
        if (!e1 && e2)         return 1;
        return o1.getName().toLowerCase().compareTo(o2.getName().toLowerCase());
      }
    }
;
    Collections.sort(installedPlugins,pluginsComparator);
    int embeddedPlugins=0;
    int installedPluginsCount=0;
    for (    IdeaPluginDescriptor plugin : installedPlugins) {
      if (plugin.getName().equals("IDEA CORE") || ((IdeaPluginDescriptorImpl)plugin).isUseCoreClassLoader()) {
        continue;
      }
      if (plugin.isBundled()) {
        embeddedPlugins++;
        addListItemToPlugins(bundledPluginsPanel,(IdeaPluginDescriptorImpl)plugin);
      }
 else {
        installedPluginsCount++;
        addListItemToPlugins(installedPluginsPanel,(IdeaPluginDescriptorImpl)plugin);
      }
    }
    if (embeddedPlugins == 0) {
      addListItemToPlugins(bundledPluginsPanel,italic(UIBundle.message("welcome.screen.plugins.panel.all.bundled.plugins.were.uninstalled.message.text")));
    }
    if (installedPluginsCount == 0) {
      addListItemToPlugins(installedPluginsPanel,italic(UIBundle.message("welcome.screen.plugins.panel.no.plugins.currently.installed.message.text")));
    }
  }
}
