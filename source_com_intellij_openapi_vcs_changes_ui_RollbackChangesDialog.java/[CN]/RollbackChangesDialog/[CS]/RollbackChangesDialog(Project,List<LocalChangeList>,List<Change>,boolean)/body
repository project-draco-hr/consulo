{
  super(project,true);
  myProject=project;
  myRefreshSynchronously=refreshSynchronously;
  myBrowser=new MultipleChangeListBrowser(project,changeLists,changes,null,true,true);
  setOKButtonText(VcsBundle.message("changes.action.rollback.text"));
  setTitle(VcsBundle.message("changes.action.rollback.title"));
  Set<AbstractVcs> affectedVcs=new HashSet<AbstractVcs>();
  for (  Change c : changes) {
    affectedVcs.add(ChangesUtil.getVcsForChange(c,project));
  }
  if (affectedVcs.size() == 1) {
    AbstractVcs vcs=(AbstractVcs)affectedVcs.toArray()[0];
    if (vcs.getCheckinEnvironment() != null) {
      final String rollbackOperationName=vcs.getCheckinEnvironment().getRollbackOperationName();
      setTitle(VcsBundle.message("changes.action.rollback.custom.title",rollbackOperationName).replace("_",""));
      setOKButtonText(rollbackOperationName);
    }
  }
  for (  Change c : changes) {
    if (c.getType() == Change.Type.NEW) {
      myDeleteLocallyAddedFiles=new JCheckBox(VcsBundle.message("changes.checkbox.delete.locally.added.files"));
      break;
    }
  }
  init();
}
