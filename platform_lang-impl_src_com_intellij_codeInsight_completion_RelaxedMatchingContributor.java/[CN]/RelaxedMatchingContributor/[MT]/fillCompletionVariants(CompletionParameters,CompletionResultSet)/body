{
  final Set<LookupElement> elements=new HashSet<LookupElement>();
  result.runRemainingContributors(parameters,new Consumer<LookupElement>(){
    @Override public void consume(    LookupElement element){
      elements.add(element);
      result.addElement(element);
    }
  }
);
  if (!elements.isEmpty() && parameters.getInvocationCount() == 0) {
    Set<String> prefixes=new HashSet<String>();
    for (    LookupElement element : elements) {
      prefixes.add(element.getPrefixMatcher().getPrefix());
    }
    for (    String prefix : prefixes) {
      result.withPrefixMatcher(prefix).restartCompletionOnPrefixChange(StandardPatterns.string().with(new PatternCondition<String>("noneMatch"){
        @Override public boolean accepts(        @NotNull String s,        ProcessingContext context){
          for (          LookupElement element : elements) {
            if (element.getPrefixMatcher().cloneWithPrefix(s).prefixMatches(element)) {
              return false;
            }
          }
          return true;
        }
      }
));
    }
  }
  CompletionParameters relaxed;
  if (elements.isEmpty() && parameters.getInvocationCount() == 0) {
    relaxed=parameters.withRelaxedMatching();
  }
 else   if (parameters.getInvocationCount() >= 2) {
    relaxed=parameters.withRelaxedMatching().withInvocationCount(parameters.getInvocationCount() - 1);
  }
 else {
    return;
  }
  result.runRemainingContributors(relaxed,new Consumer<LookupElement>(){
    @Override public void consume(    LookupElement element){
      result.addElement(element);
    }
  }
);
}
