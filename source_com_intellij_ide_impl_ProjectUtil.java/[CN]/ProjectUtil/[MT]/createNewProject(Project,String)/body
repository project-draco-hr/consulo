{
  AddModuleWizard dialog=new AddModuleWizard(null,ModulesProvider.EMPTY_MODULES_PROVIDER,defaultPath);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  final String projectFilePath=dialog.getNewProjectFilePath();
  final ProjectBuilder projectBuilder=dialog.getProjectBuilder();
  try {
    final Project newProject=projectBuilder == null || !projectBuilder.isUpdate() ? projectManager.newProject(projectFilePath,true,false) : projectToClose;
    final ProjectJdk jdk=dialog.getNewProjectJdk();
    if (jdk != null) {
      final String versionString=jdk.getVersionString();
      if (versionString != null) {
        CommandProcessor.getInstance().executeCommand(newProject,new Runnable(){
          public void run(){
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              public void run(){
                final ProjectRootManagerEx projectRootManager=(ProjectRootManagerEx)ProjectRootManager.getInstance(newProject);
                projectRootManager.setProjectJdk(jdk);
                final LanguageLevel languageLevel=getDefaultLanguageLevel(versionString);
                if (projectRootManager.getLanguageLevel().compareTo(languageLevel) > 0) {
                  projectRootManager.setLanguageLevel(languageLevel);
                }
              }
            }
);
          }
        }
,null,null);
      }
    }
    final String compileOutput=dialog.getNewCompileOutput();
    CommandProcessor.getInstance().executeCommand(newProject,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            final ProjectRootManagerEx projectRootManager=(ProjectRootManagerEx)ProjectRootManager.getInstance(newProject);
            String canonicalPath=compileOutput;
            try {
              canonicalPath=FileUtil.resolveShortWindowsName(compileOutput);
            }
 catch (            IOException e) {
            }
            canonicalPath=FileUtil.toSystemIndependentName(canonicalPath);
            projectRootManager.setCompilerOutputUrl(VfsUtil.pathToUrl(canonicalPath));
          }
        }
);
      }
    }
,null,null);
    newProject.save();
    if (projectBuilder != null && !projectBuilder.validate(projectToClose,newProject)) {
      return;
    }
    if (newProject != projectToClose) {
      closePreviousProject(projectToClose);
    }
    if (projectBuilder != null) {
      projectBuilder.commit(newProject);
    }
    StartupManager.getInstance(newProject).registerPostStartupActivity(new Runnable(){
      public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            final ToolWindow toolWindow=ToolWindowManager.getInstance(newProject).getToolWindow(ToolWindowId.PROJECT_VIEW);
            if (toolWindow != null) {
              toolWindow.activate(null);
            }
            if (projectBuilder == null || projectBuilder.isOpenProjectSettingsAfter()) {
              ModulesConfigurator.showDialog(newProject,null,null,true);
            }
          }
        }
);
      }
    }
);
    if (newProject != projectToClose) {
      updateLastProjectLocation(projectFilePath);
      projectManager.openProject(newProject);
    }
  }
  finally {
    if (projectBuilder != null) {
      projectBuilder.cleanup();
    }
  }
}
