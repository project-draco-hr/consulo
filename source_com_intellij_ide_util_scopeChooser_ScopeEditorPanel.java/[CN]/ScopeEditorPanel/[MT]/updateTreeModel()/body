{
  PanelProgressIndicator progress=new PanelProgressIndicator(new Consumer<JComponent>(){
    public void consume(    final JComponent component){
      setToComponent(component);
    }
  }
){
    public boolean isCanceled(){
      return super.isCanceled() || myCanceled;
    }
    public void stop(){
      super.stop();
      setToComponent(myMatchingCountLabel);
    }
    public String getText(){
      return null;
    }
    public String getText2(){
      return null;
    }
  }
;
  progress.setBordersVisible(false);
  myCurrentProgress=progress;
  Runnable updateModel=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          try {
            myTreeExpansionMonitor.freeze();
            UIUtil.setEnabled(myPanel,false,true);
            final TreeModelBuilder.TreeModel model=TreeModelBuilder.createTreeModel(myProject,false,false,myTreeMarker);
            if (myErrorMessage == null) {
              myMatchingCountLabel.setText(IdeBundle.message("label.scope.contains.files",model.getMarkedFileCount(),model.getTotalFileCount()));
              myMatchingCountLabel.setForeground(new JLabel().getForeground());
            }
 else {
              showErrorMessage();
            }
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                myPackageTree.setModel(model);
                myTreeExpansionMonitor.restore();
              }
            }
);
          }
  finally {
            myCanceled=false;
            myCurrentProgress=null;
            setToComponent(myMatchingCountLabel);
            UIUtil.setEnabled(myPanel,true,true);
            UIUtil.setEnabled(myLegendPanel,!DependencyUISettings.getInstance().UI_FILTER_LEGALS,true);
          }
        }
      }
);
    }
  }
;
  ProgressManager.getInstance().runProcess(updateModel,progress);
}
