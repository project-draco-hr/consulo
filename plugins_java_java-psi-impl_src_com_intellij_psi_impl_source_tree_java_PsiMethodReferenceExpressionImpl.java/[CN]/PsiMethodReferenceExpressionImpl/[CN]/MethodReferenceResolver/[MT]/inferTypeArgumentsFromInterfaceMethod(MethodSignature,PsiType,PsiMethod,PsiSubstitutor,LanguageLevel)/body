{
  if (signature == null)   return PsiSubstitutor.EMPTY;
  PsiType[] types=method.getSignature(PsiUtil.isRawSubstitutor(method,substitutor) ? PsiSubstitutor.EMPTY : substitutor).getParameterTypes();
  PsiType[] rightTypes=signature.getParameterTypes();
  if (!method.isVarArgs() || types.length == 0) {
    if (types.length < rightTypes.length) {
      return getSubstitutor(rightTypes[0]);
    }
 else     if (types.length > rightTypes.length) {
      return getSubstitutor(types[0]);
    }
  }
 else {
    if (rightTypes.length != types.length || rightTypes[rightTypes.length - 1].getArrayDimensions() != types[types.length - 1].getArrayDimensions()) {
      types[types.length - 1]=((PsiArrayType)types[types.length - 1]).getComponentType();
      int min=Math.min(types.length,rightTypes.length);
      types=Arrays.copyOf(types,min);
      rightTypes=Arrays.copyOf(rightTypes,min);
    }
  }
  for (int i=0; i < rightTypes.length; i++) {
    rightTypes[i]=GenericsUtil.eliminateWildcards(rightTypes[i]);
  }
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(getProject()).getResolveHelper();
  PsiSubstitutor psiSubstitutor=resolveHelper.inferTypeArguments(method.getTypeParameters(),types,rightTypes,languageLevel);
  if (method.isConstructor()) {
    psiSubstitutor=psiSubstitutor.putAll(resolveHelper.inferTypeArguments(method.getContainingClass().getTypeParameters(),types,rightTypes,languageLevel));
  }
  if (!PsiUtil.isRawSubstitutor(method,substitutor)) {
    psiSubstitutor=psiSubstitutor.putAll(substitutor);
  }
  return LambdaUtil.inferFromReturnType(method.getTypeParameters(),psiSubstitutor.substitute(method.getReturnType()),interfaceMethodReturnType,psiSubstitutor,languageLevel,getProject());
}
