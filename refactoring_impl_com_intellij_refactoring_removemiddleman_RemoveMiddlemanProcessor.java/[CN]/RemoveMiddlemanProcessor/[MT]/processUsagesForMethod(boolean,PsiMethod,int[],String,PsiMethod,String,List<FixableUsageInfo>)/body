{
  for (  PsiReference reference : ReferencesSearch.search(method)) {
    final PsiElement referenceElement=reference.getElement();
    final PsiMethodCallExpression call=(PsiMethodCallExpression)referenceElement.getParent();
    visibility=VisibilityUtil.getHighestVisibility(visibility,VisibilityUtil.getPossibleVisibility(delegatedMethod,referenceElement));
    final String access;
    if (PsiTreeUtil.getParentOfType(call,PsiClass.class) == containingClass) {
      access=field.getName();
    }
 else {
      access=getterName + "()";
      if (getter == null) {
        getter=PropertyUtil.generateGetterPrototype(field);
      }
    }
    usages.add(new InlineDelegatingCall(call,paramPermutation,access,delegatedMethod.getName()));
  }
  if (deleteMethodHierarchy) {
    usages.add(new DeleteMethod(method));
  }
  return visibility;
}
