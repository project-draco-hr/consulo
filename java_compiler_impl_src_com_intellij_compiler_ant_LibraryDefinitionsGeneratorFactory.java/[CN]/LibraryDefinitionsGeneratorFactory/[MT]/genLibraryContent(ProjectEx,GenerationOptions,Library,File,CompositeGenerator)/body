{
  if (genOptions.expandJarDirectories) {
    final VirtualFile[] files=library.getFiles(OrderRootType.COMPILATION_CLASSES);
    TreeSet<String> visitedPaths=new TreeSet<String>();
    for (    final VirtualFile file : files) {
      final String path=GenerationUtils.toRelativePath(file,baseDir,BuildProperties.getProjectBaseDirProperty(),genOptions);
      visitedPaths.add(path);
    }
    for (    final String path : visitedPaths) {
      libraryPath.add(new PathElement(path));
    }
  }
 else {
    TreeSet<String> urls=new TreeSet<String>(Arrays.asList(library.getUrls(OrderRootType.COMPILATION_CLASSES)));
    for (    String url : urls) {
      File file=fileFromUrl(url);
      final String path=GenerationUtils.toRelativePath(file.getPath(),baseDir,BuildProperties.getProjectBaseDirProperty(),genOptions);
      if (url.startsWith(JarFileSystem.PROTOCOL_PREFIX)) {
        libraryPath.add(new PathElement(path));
      }
 else       if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) {
        if (library.isJarDirectory(url)) {
          final FileSet fileSet=new FileSet(path);
          fileSet.add(new PatternSetRef(BuildProperties.PROPERTY_LIBRARIES_PATTERNS));
          libraryPath.add(fileSet);
        }
 else {
          libraryPath.add(new PathElement(path));
        }
      }
 else {
        throw new IllegalStateException("Unknown url type: " + url);
      }
    }
  }
}
