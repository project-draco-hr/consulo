{
  for (  FilePatch filePatch : patches) {
    if (!(filePatch instanceof TextFilePatch))     continue;
    TextFilePatch patch=(TextFilePatch)filePatch;
    final String path=patch.getBeforeName() == null ? patch.getAfterName() : patch.getBeforeName();
    final Map<String,CharSequence> additionalMap=new HashMap<String,CharSequence>();
    for (    PatchEP extension : extensions) {
      final CharSequence charSequence=extension.provideContent(project,path);
      if (!StringUtil.isEmpty(charSequence)) {
        additionalMap.put(extension.getName(),charSequence);
      }
    }
    writeFileHeading(patch,writer,lineSeparator,additionalMap);
    for (    PatchHunk hunk : patch.getHunks()) {
      writeHunkStart(writer,hunk.getStartLineBefore(),hunk.getEndLineBefore(),hunk.getStartLineAfter(),hunk.getEndLineAfter(),lineSeparator);
      for (      PatchLine line : hunk.getLines()) {
        char prefixChar=' ';
switch (line.getType()) {
case ADD:
          prefixChar='+';
        break;
case REMOVE:
      prefixChar='-';
    break;
case CONTEXT:
  prefixChar=' ';
break;
}
String text=line.getText();
if (text.endsWith("\n")) {
text=text.substring(0,text.length() - 1);
}
writeLine(writer,text,prefixChar);
if (line.isSuppressNewLine()) {
writer.write(lineSeparator + PatchReader.NO_NEWLINE_SIGNATURE + lineSeparator);
}
 else {
writer.write(lineSeparator);
}
}
}
}
}
