{
  final ArrayList formsToInstrument=myFormFiles;
  if (formsToInstrument.size() == 0) {
    log("No forms to instrument found",Project.MSG_VERBOSE);
    return;
  }
  final HashMap class2form=new HashMap();
  for (int i=0; i < formsToInstrument.size(); i++) {
    final File formFile=(File)formsToInstrument.get(i);
    log("compiling form " + formFile.getAbsolutePath(),Project.MSG_VERBOSE);
    final byte[] bytes=new byte[(int)formFile.length()];
    try {
      final FileInputStream fileReader=new FileInputStream(formFile);
      fileReader.read(bytes);
      fileReader.close();
    }
 catch (    IOException e) {
      fireError(e.getMessage());
      continue;
    }
    final String formFileContent;
    try {
      formFileContent=new String(bytes,"utf8");
    }
 catch (    UnsupportedEncodingException e) {
      fireError(e.getMessage());
      continue;
    }
    final LwRootContainer rootContainer;
    try {
      rootContainer=Utils.getRootContainer(formFileContent,new CompiledClassPropertiesProvider(loader));
    }
 catch (    AlienFormFileException e) {
      continue;
    }
catch (    Exception e) {
      fireError("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: "+ e);
      continue;
    }
    final String classToBind=rootContainer.getClassToBind();
    if (classToBind == null) {
      continue;
    }
    String name=classToBind.replace('.','/');
    File classFile=getClassFile(name);
    if (classFile == null) {
      log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind,Project.MSG_WARN);
      continue;
    }
    final File alreadyProcessedForm=(File)class2form.get(classToBind);
    if (alreadyProcessedForm != null) {
      fireError(formFile.getAbsolutePath() + ": " + "The form is bound to the class "+ classToBind+ ".\n"+ "Another form "+ alreadyProcessedForm.getAbsolutePath()+ " is also bound to this class.");
      continue;
    }
    class2form.put(classToBind,formFile);
    final AsmCodeGenerator codeGenerator=new AsmCodeGenerator(rootContainer,loader,new AntNestedFormLoader(loader),false,new AntClassWriter(ClassWriter.COMPUTE_FRAMES,loader));
    codeGenerator.patchFile(classFile);
    final FormErrorInfo[] warnings=codeGenerator.getWarnings();
    for (int j=0; j < warnings.length; j++) {
      log(formFile.getAbsolutePath() + ": " + warnings[j].getErrorMessage(),Project.MSG_WARN);
    }
    final FormErrorInfo[] errors=codeGenerator.getErrors();
    if (errors.length > 0) {
      StringBuffer message=new StringBuffer();
      for (int j=0; j < errors.length; j++) {
        if (message.length() > 0) {
          message.append("\n");
        }
        message.append(formFile.getAbsolutePath()).append(": ").append(errors[j].getErrorMessage());
      }
      fireError(message.toString());
    }
  }
}
