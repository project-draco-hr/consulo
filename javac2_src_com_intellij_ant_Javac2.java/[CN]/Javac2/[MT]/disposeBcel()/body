{
  Repository.clearCache();
  try {
    final java.lang.reflect.Field field=SyntheticRepository.class.getDeclaredField("_instances");
    field.setAccessible(true);
    Map cpToRepositoryMap=(Map)field.get(null);
    for (Iterator it=cpToRepositoryMap.values().iterator(); it.hasNext(); ) {
      SyntheticRepository repository=(SyntheticRepository)it.next();
      if (repository != null) {
        repository.clear();
      }
    }
    cpToRepositoryMap.clear();
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage());
  }
  try {
    final java.lang.reflect.Field field=Repository.class.getDeclaredField("_repository");
    field.setAccessible(true);
    field.set(null,SyntheticRepository.getInstance());
  }
 catch (  Exception e) {
    throw new RuntimeException("Error while disposing BCEL: " + e.getClass() + " : "+ e.getMessage());
  }
}
