{
  super.compile();
  final ArrayList formsToInstrument=myFormFiles;
  if (formsToInstrument.size() == 0) {
    log("No forms to instrument found",Project.MSG_VERBOSE);
    return;
  }
  final StringBuffer classPathBuffer=new StringBuffer();
  classPathBuffer.append(getDestdir().getAbsolutePath());
  final Path classpath=getClasspath();
  final String[] pathElements=classpath.list();
  for (int i=0; i < pathElements.length; i++) {
    final String pathElement=pathElements[i];
    classPathBuffer.append(File.pathSeparator);
    classPathBuffer.append(pathElement);
  }
  classPathBuffer.append(File.pathSeparator);
  classPathBuffer.append(getInternalClassPath());
  final String classPath=classPathBuffer.toString();
  log("classpath=" + classPath,Project.MSG_INFO);
  final ClassLoader loader;
  try {
    loader=createClassLoader(classPath);
  }
 catch (  MalformedURLException e) {
    fireError(e.getMessage());
    return;
  }
  final HashMap class2form=new HashMap();
  for (int i=0; i < formsToInstrument.size(); i++) {
    final File formFile=(File)formsToInstrument.get(i);
    log("compiling form " + formFile.getAbsolutePath(),Project.MSG_VERBOSE);
    final byte[] bytes=new byte[(int)formFile.length()];
    try {
      final FileInputStream fileReader=new FileInputStream(formFile);
      fileReader.read(bytes);
      fileReader.close();
    }
 catch (    IOException e) {
      fireError(e.getMessage());
      continue;
    }
    final String formFileContent;
    try {
      formFileContent=new String(bytes,"utf8");
    }
 catch (    UnsupportedEncodingException e) {
      fireError(e.getMessage());
      continue;
    }
    final LwRootContainer rootContainer;
    try {
      rootContainer=Utils.getRootContainer(formFileContent,new CompiledClassPropertiesProvider(loader));
    }
 catch (    AlienFormFileException e) {
      continue;
    }
catch (    Exception e) {
      fireError("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: "+ e);
      continue;
    }
    final String classToBind=rootContainer.getClassToBind();
    if (classToBind == null) {
      continue;
    }
    String name=classToBind.replace('.','/');
    File classFile=getClassFile(name);
    if (classFile == null) {
      log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind,Project.MSG_WARN);
      continue;
    }
    final File alreadyProcessedForm=(File)class2form.get(classToBind);
    if (alreadyProcessedForm != null) {
      fireError(formFile.getAbsolutePath() + ": " + "The form is bound to the class "+ classToBind+ ".\n"+ "Another form "+ alreadyProcessedForm.getAbsolutePath()+ " is also bound to this class.");
      continue;
    }
    class2form.put(classToBind,formFile);
    final AsmCodeGenerator codeGenerator=new AsmCodeGenerator(rootContainer,loader,new GridLayoutCodeGenerator());
    codeGenerator.patchFile(classFile);
    final String[] warnings=codeGenerator.getWarnings();
    for (int j=0; j < warnings.length; j++) {
      log(formFile.getAbsolutePath() + ": " + warnings[j],Project.MSG_WARN);
    }
    final String[] errors=codeGenerator.getErrors();
    if (errors.length > 0) {
      StringBuffer message=new StringBuffer();
      for (int j=0; j < errors.length; j++) {
        if (message.length() > 0) {
          message.append("\n");
        }
        message.append(formFile.getAbsolutePath()).append(": ").append(errors[j]);
      }
      fireError(message.toString());
    }
  }
  final File destdir=getDestdir();
  final File[] files=destdir.listFiles();
  for (int i=0; i < files.length; i++) {
    File file=files[i];
    final String name=file.getName();
    if (name.endsWith(".class")) {
      final String path=file.getPath();
      log("Adding @NotNull assertions to " + path);
      try {
        final FileInputStream inputStream=new FileInputStream(file);
        ClassReader reader=new ClassReader(inputStream);
        ClassWriter writer=new ClassWriter(true);
        final NotNullVerifyingInstrumenter instrumenter=new NotNullVerifyingInstrumenter(writer);
        reader.accept(instrumenter,false);
        if (instrumenter.isModification()) {
          new FileOutputStream(path).write(writer.toByteArray());
        }
      }
 catch (      IOException e) {
        log("Failed to instrument @NotNull assertion: " + e.getMessage());
      }
    }
  }
}
