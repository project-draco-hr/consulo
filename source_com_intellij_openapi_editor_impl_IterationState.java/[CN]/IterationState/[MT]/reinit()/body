{
  if (myHighlighterIterator.atEnd()) {
    return;
  }
  boolean isInSelection=hasSelection && myStartOffset >= mySelectionStart && myStartOffset < mySelectionEnd;
  boolean isInCaretRow=myStartOffset >= myCaretRowStart && myStartOffset < myCaretRowEnd;
  boolean isInGuardedBlock=myDocument.getOffsetGuard(myStartOffset) != null;
  TextAttributes syntax=myHighlighterIterator.getTextAttributes();
  TextAttributes selection=isInSelection ? mySelectionAttributes : null;
  TextAttributes caret=isInCaretRow ? myCaretRowAttributes : null;
  TextAttributes fold=myCurrentFold != null ? myFoldTextAttributes : null;
  TextAttributes guard=isInGuardedBlock ? new TextAttributes(null,myReadOnlyColor,null,EffectType.BOXED,Font.PLAIN) : null;
  final int size=myCurrentHighlighters.size();
  if (size > 1) {
    Collections.sort(myCurrentHighlighters,LayerComparator.INSTANCE);
  }
  int start=0;
  for (int i=0; i < size; i++) {
    RangeHighlighterImpl highlighter=myCurrentHighlighters.get(i);
    if (highlighter.getTextAttributes() == TextAttributes.ERASE_MARKER) {
      syntax=null;
    }
  }
  myCachedAttributesList.clear();
  for (int i=start; i < size; i++) {
    RangeHighlighterImpl highlighter=myCurrentHighlighters.get(i);
    if (selection != null && highlighter.getLayer() < HighlighterLayer.SELECTION) {
      myCachedAttributesList.add(selection);
      selection=null;
    }
    if (syntax != null && highlighter.getLayer() < HighlighterLayer.SYNTAX) {
      if (fold != null) {
        myCachedAttributesList.add(fold);
        fold=null;
      }
      myCachedAttributesList.add(syntax);
      syntax=null;
    }
    if (guard != null && highlighter.getLayer() < HighlighterLayer.GUARDED_BLOCKS) {
      myCachedAttributesList.add(guard);
      guard=null;
    }
    if (caret != null && highlighter.getLayer() < HighlighterLayer.CARET_ROW) {
      myCachedAttributesList.add(caret);
      caret=null;
    }
    TextAttributes textAttributes=highlighter.getTextAttributes();
    if (textAttributes != null) {
      myCachedAttributesList.add(textAttributes);
    }
  }
  if (selection != null)   myCachedAttributesList.add(selection);
  if (fold != null)   myCachedAttributesList.add(fold);
  if (guard != null)   myCachedAttributesList.add(guard);
  if (syntax != null)   myCachedAttributesList.add(syntax);
  if (caret != null)   myCachedAttributesList.add(caret);
  Color fore=null;
  Color back=isInGuardedBlock ? myReadOnlyColor : null;
  Color effect=null;
  EffectType effectType=null;
  int fontType=0;
  for (int i=0; i < myCachedAttributesList.size(); i++) {
    TextAttributes attrs=myCachedAttributesList.get(i);
    if (fore == null) {
      fore=ifDiffers(attrs.getForegroundColor(),myDefaultForeground);
    }
    if (back == null) {
      back=ifDiffers(attrs.getBackgroundColor(),myDefaultBackground);
    }
    if (fontType == Font.PLAIN) {
      fontType=attrs.getFontType();
    }
    if (effect == null) {
      effect=attrs.getEffectColor();
      effectType=attrs.getEffectType();
    }
  }
  if (fore == null)   fore=myDefaultForeground;
  if (back == null)   back=myDefaultBackground;
  if (fontType == Font.PLAIN)   fontType=Font.PLAIN;
  if (effectType == null)   effectType=EffectType.BOXED;
  myMergedAttributes.setForegroundColor(fore);
  myMergedAttributes.setBackgroundColor(back);
  myMergedAttributes.setFontType(fontType);
  myMergedAttributes.setEffectColor(effect);
  myMergedAttributes.setEffectType(effectType);
}
