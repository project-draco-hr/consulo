{
  if (!(file instanceof GroovyFile)) {
    return false;
  }
  boolean available=super.checkAvailable(editor,file);
  if (!available)   return false;
  LineRange oldRange=toMove;
  final Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,oldRange);
  if (psiRange == null)   return false;
  PsiElement first=psiRange.getFirst();
  first=PsiUtil.isNewLine(first) ? first.getNextSibling() : first;
  PsiElement firstMember=PsiTreeUtil.getParentOfType(first,GrMember.class,false);
  if (firstMember == null)   firstMember=PsiTreeUtil.getParentOfType(first,GrTypeDefinition.class,false);
  PsiElement second=psiRange.getSecond();
  second=PsiUtil.isNewLine(second) ? second.getPrevSibling() : second;
  PsiElement lastMember=PsiTreeUtil.getParentOfType(second,GrMember.class,false);
  if (lastMember == null)   lastMember=PsiTreeUtil.getParentOfType(first,GrTypeDefinition.class,false);
  if (firstMember == null || lastMember == null)   return false;
  LineRange range;
  if (firstMember == lastMember) {
    range=memberRange(firstMember,editor,oldRange);
    if (range == null)     return false;
    range.firstElement=range.lastElement=firstMember;
  }
 else {
    final PsiElement parent=PsiTreeUtil.findCommonParent(firstMember,lastMember);
    if (parent == null)     return false;
    final Pair<PsiElement,PsiElement> combinedRange=getElementRange(parent,firstMember,lastMember);
    if (combinedRange == null)     return false;
    final LineRange lineRange1=memberRange(combinedRange.getFirst(),editor,oldRange);
    if (lineRange1 == null)     return false;
    final LineRange lineRange2=memberRange(combinedRange.getSecond(),editor,oldRange);
    if (lineRange2 == null)     return false;
    range=new LineRange(lineRange1.startLine,lineRange2.endLine);
    range.firstElement=combinedRange.getFirst();
    range.lastElement=combinedRange.getSecond();
  }
  Document document=editor.getDocument();
  PsiElement sibling=isDown ? range.lastElement.getNextSibling() : range.firstElement.getPrevSibling();
  try {
    if (sibling == null)     throw new IllegalMoveException();
    sibling=firstNonWhiteElement(sibling,isDown);
    final boolean areWeMovingClass=range.firstElement instanceof GrTypeDefinition;
    toMove=range;
    LineRange intraClassRange=moveInsideOutsideClassPosition(editor,sibling,isDown,areWeMovingClass);
    if (intraClassRange == null) {
      toMove2=new LineRange(sibling,sibling,document);
    }
 else {
      toMove2=intraClassRange;
    }
  }
 catch (  IllegalMoveException e) {
    toMove2=null;
  }
  return true;
}
