{
  if (startLine == lineRange.startLine || startLine == lineRange.endLine || endLine == lineRange.startLine || endLine == lineRange.endLine) {
    return true;
  }
  List<PsiElement> memberSuspects=new ArrayList<PsiElement>();
  GrModifierList modifierList=member instanceof GrMember ? ((GrMember)member).getModifierList() : null;
  if (modifierList != null)   memberSuspects.add(modifierList);
  if (member instanceof GrMethod) {
    final GrMethod method=(GrMethod)member;
    PsiElement nameIdentifier=method.getNameIdentifierGroovy();
    memberSuspects.add(nameIdentifier);
    GrTypeElement returnTypeElement=method.getReturnTypeElementGroovy();
    if (returnTypeElement != null)     memberSuspects.add(returnTypeElement);
  }
  if (member instanceof GrField) {
    final GrField field=(GrField)member;
    PsiElement nameIdentifier=field.getNameIdentifierGroovy();
    memberSuspects.add(nameIdentifier);
    GrTypeElement typeElement=field.getTypeElementGroovy();
    if (typeElement != null)     memberSuspects.add(typeElement);
  }
  TextRange lineTextRange=new TextRange(editor.getDocument().getLineStartOffset(lineRange.startLine),editor.getDocument().getLineEndOffset(lineRange.endLine));
  for (  PsiElement suspect : memberSuspects) {
    TextRange textRange=suspect.getTextRange();
    if (textRange != null && lineTextRange.intersects(textRange))     return true;
  }
  return false;
}
