{
  PsiElement outerClassParent=innerClass.getParent().getParent();
  while (outerClassParent != null) {
    if (outerClassParent instanceof PsiClass && !(outerClassParent instanceof PsiAnonymousClass)) {
      return outerClassParent;
    }
 else     if (outerClassParent instanceof PsiFile) {
      final PsiDirectory directory=innerClass.getContainingFile().getContainingDirectory();
      final PsiPackage aPackage=directory.getPackage();
      if (aPackage == null) {
        if (chooseIfNotUnderSource) {
          PackageChooserDialog chooser=new PackageChooserDialog("Select Target Package",innerClass.getProject());
          chooser.show();
          if (!chooser.isOK())           return null;
          final PsiPackage chosenPackage=chooser.getSelectedPackage();
          if (chosenPackage == null)           return null;
          return chosenPackage.getDirectories()[0];
        }
        return null;
      }
      return directory;
    }
    outerClassParent=outerClassParent.getParent();
  }
  LOG.assertTrue(false);
  return null;
}
