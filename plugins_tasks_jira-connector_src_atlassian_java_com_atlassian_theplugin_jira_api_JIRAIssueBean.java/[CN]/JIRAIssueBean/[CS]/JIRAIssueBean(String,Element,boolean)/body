{
  this.serverUrl=serverUrl;
  this.summary=getTextSafely(e,"summary");
  this.key=getTextSafely(e,"key");
  this.id=new Long(getAttributeSafely(e,"key","id"));
  updateProjectKey();
  this.status=getTextSafely(e,"status");
  this.statusUrl=getAttributeSafely(e,"status","iconUrl");
  try {
    this.statusId=Long.parseLong(getAttributeSafely(e,"status","id"));
  }
 catch (  NumberFormatException ex) {
    this.statusId=0;
  }
  this.priority=getTextSafely(e,"priority");
  this.priorityUrl=getAttributeSafely(e,"priority","iconUrl");
  try {
    this.priorityId=Long.parseLong(getAttributeSafely(e,"priority","id"));
  }
 catch (  NumberFormatException ex) {
    this.priorityId=0;
  }
  this.description=getTextSafely(e,"description");
  this.type=getTextSafely(e,"type");
  this.typeUrl=getAttributeSafely(e,"type","iconUrl");
  try {
    this.typeId=Long.parseLong(getAttributeSafely(e,"type","id"));
  }
 catch (  NumberFormatException ex) {
    this.typeId=0;
  }
  this.assignee=getTextSafely(e,"assignee");
  this.assigneeId=getAttributeSafely(e,"assignee","username");
  this.reporter=getTextSafely(e,"reporter");
  this.reporterId=getAttributeSafely(e,"reporter","username");
  this.created=getTextSafely(e,"created");
  this.updated=getTextSafely(e,"updated");
  this.resolution=getTextSafely(e,"resolution");
  this.parentIssueKey=getTextSafely(e,"parent");
  this.thisIsASubTask=parentIssueKey != null;
  subTaskList=new ArrayList<String>();
  Element subtasks=e.getChild("subtasks");
  if (subtasks != null) {
    for (    Object subtask : subtasks.getChildren("subtask")) {
      String subTaskKey=((Element)subtask).getText();
      if (subTaskKey != null) {
        subTaskList.add(subTaskKey);
      }
    }
  }
  this.originalEstimate=getTextSafely(e,"timeoriginalestimate");
  this.remainingEstimate=getTextSafely(e,"timeestimate");
  this.timeSpent=getTextSafely(e,"timespent");
  Element comments=e.getChild("comments");
  if (comments != null && getComments) {
    commentsList=new ArrayList<JIRAComment>();
    for (    Object comment : comments.getChildren("comment")) {
      Element el=(Element)comment;
      String commentId=el.getAttributeValue("id","-1");
      String author=el.getAttributeValue("author","Unknown");
      String text=el.getText();
      String creationDate=el.getAttributeValue("created","Unknown");
      Calendar cal=Calendar.getInstance();
      DateFormat df=new SimpleDateFormat("EEE MMM d HH:mm:ss Z yyyy",Locale.US);
      try {
        cal.setTime(df.parse(creationDate));
      }
 catch (      java.text.ParseException ex) {
      }
      commentsList.add(new JIRACommentBean(commentId,author,text,cal));
    }
  }
}
