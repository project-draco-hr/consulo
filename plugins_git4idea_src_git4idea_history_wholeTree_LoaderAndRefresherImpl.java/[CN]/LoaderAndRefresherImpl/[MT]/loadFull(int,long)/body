{
  try {
    final Collection<ChangesFilter.Filter> filters=addContinuation(continuation);
    myLowLevelAccess.loadCommits(myStartingPoints,Collections.<String>emptyList(),filters,new AsynchConsumer<GitCommit>(){
      @Override public void consume(      GitCommit gitCommit){
        if (gitCommit.getParentsHashes().size() <= 1) {
          myDetailsCache.acceptAnswer(Collections.singleton(gitCommit),myRootHolder.getRoot());
        }
        myRepeatingLoadConsumer.consume(GitCommitToCommitConvertor.getInstance().convert(gitCommit));
      }
      @Override public void finished(){
      }
    }
,count,myProgressAnalog,mySymbolicRefs);
  }
 catch (  VcsException e) {
    myMediator.acceptException(e);
  }
}
