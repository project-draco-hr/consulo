{
  if (myInterrupted)   return new LoadAlgorithm.Result(true,0);
  initSymbRefs();
  myRepeatingLoadConsumer.reset();
  if (!myStartingPoints.isEmpty()) {
    boolean foundSomething=false;
    for (    String point : myStartingPoints) {
      if (point.startsWith(GitBranch.REFS_REMOTES_PREFIX)) {
        if (mySymbolicRefs.getRemoteBranches().contains(point.substring(GitBranch.REFS_REMOTES_PREFIX.length()))) {
          foundSomething=true;
          break;
        }
      }
 else {
        point=point.startsWith(GitBranch.REFS_HEADS_PREFIX) ? point.substring(GitBranch.REFS_HEADS_PREFIX.length()) : point;
        if (mySymbolicRefs.getLocalBranches().contains(point) || mySymbolicRefs.getTags().contains(point)) {
          foundSomething=true;
          break;
        }
      }
    }
    if (!foundSomething)     return new LoadAlgorithm.Result(true,0);
  }
  final long start=System.currentTimeMillis();
  if (LoadAlgorithm.LoadType.TEST.equals(loadType)) {
    loadFull(ourTestCount);
  }
 else   if (LoadAlgorithm.LoadType.SHORT.equals(loadType)) {
    loadShort();
  }
 else   if (LoadAlgorithm.LoadType.FULL_PREVIEW.equals(loadType)) {
    loadFull(ourSlowPreloadCount);
  }
 else {
    loadFull(-1);
  }
  final long end=System.currentTimeMillis();
  final List<AbstractHash> lastParents=myRepeatingLoadConsumer.myLastT == null ? null : myRepeatingLoadConsumer.myLastT.getParents();
  return new LoadAlgorithm.Result(lastParents == null || lastParents.isEmpty(),end - start);
}
