{
  final List<CommitI> result=new ArrayList<CommitI>();
  final List<List<AbstractHash>> parents=myLoadParents ? new ArrayList<List<AbstractHash>>() : null;
  for (  String hash : hashes) {
    try {
      final List<GitCommit> commits=myLowLevelAccess.getCommitDetails(Collections.singletonList(hash),mySymbolicRefs);
      myDetailsCache.acceptAnswer(commits,myRootHolder.getRoot());
      for (      GitCommit commit : commits) {
        final Commit commitObj=new Commit(commit.getShortHash().getString(),commit.getDate().getTime(),myUsersIndex.put(commit.getAuthor()));
        if (parents != null) {
          final Set<String> parentsHashes=commit.getParentsHashes();
          parents.add(ObjectsConvertor.convert(parentsHashes,new Convertor<String,AbstractHash>(){
            @Override public AbstractHash convert(            String o){
              return AbstractHash.create(o);
            }
          }
));
        }
        result.add(myRootHolder.decorateByRoot(commitObj));
      }
    }
 catch (    VcsException e1) {
      continue;
    }
  }
  if (!result.isEmpty()) {
    myMediator.appendResult(myTicket,result,parents);
  }
}
