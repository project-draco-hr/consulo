{
  myRootHolder=rootHolder;
  myUsersIndex=usersIndex;
  myId=id;
  myHaveStructureFilter=haveStructureFilter;
  myLoadParents=filters == null || filters.isEmpty();
  myTicket=ticket;
  myFilters=filters;
  myMediator=mediator;
  myStartingPoints=startingPoints;
  myDetailsCache=detailsCache;
  myStepType=StepType.CONTINUE;
  myProject=project;
  myProgressAnalog=new Getter<Boolean>(){
    @Override public Boolean get(){
      return isInterrupted();
    }
  }
;
  myLowLevelAccess=new LowLevelAccessImpl(myProject,myRootHolder.getRoot());
  myRealConsumer=new Consumer<List<CommitHashPlusParents>>(){
    @Override public void consume(    final List<CommitHashPlusParents> list){
      if (isInterrupted())       return;
      final List<CommitI> buffer=new ArrayList<CommitI>();
      final List<List<AbstractHash>> parents=myLoadParents ? new ArrayList<List<AbstractHash>>() : null;
      for (      CommitHashPlusParents commitHashPlusParents : list) {
        CommitI commit=new Commit(commitHashPlusParents.getHash(),commitHashPlusParents.getTime(),myUsersIndex.put(commitHashPlusParents.getAuthorName()));
        commit=myRootHolder.decorateByRoot(commit);
        buffer.add(commit);
        if (myLoadParents) {
          parents.add(commitHashPlusParents.getParents());
        }
      }
      StepType stepType=myMediator.appendResult(myTicket,buffer,parents,myRootHolder.getRoot(),true);
      if (!StepType.FINISHED.equals(myStepType)) {
        myStepType=stepType;
      }
    }
  }
;
  myBufferConsumer=new BufferedListConsumer<CommitHashPlusParents>(15,myRealConsumer,400);
  myRepeatingLoadConsumer=new RepeatingLoadConsumer<CommitHashPlusParents>(myProject,myBufferConsumer.asConsumer());
}
