{
  configureByFile(getBasePath() + "/before" + getTestName(false)+ "."+ ext);
  I18nizeAction action=new I18nizeAction();
  DataContext dataContext=DataManager.getInstance().getDataContext(myEditor.getComponent());
  AnActionEvent event=new AnActionEvent(null,dataContext,"place",action.getTemplatePresentation(),null,0);
  action.update(event);
  @NonNls String afterFile=getBasePath() + "/after" + getTestName(false)+ "."+ ext;
  boolean afterFileExists=new File(PathManagerEx.getTestDataPath() + afterFile).exists();
  I18nQuickFixHandler handler=action.getHandler(event);
  try {
    if (handler != null) {
      handler.checkApplicability(getFile(),getEditor());
    }
  }
 catch (  IncorrectOperationException e) {
    event.getPresentation().setEnabled(false);
  }
  assertEquals(afterFileExists,event.getPresentation().isEnabled());
  if (afterFileExists) {
    PsiLiteralExpression literalExpression=I18nizeAction.getEnclosingStringLiteral(getFile(),getEditor());
    assertNotNull(handler);
    handler.performI18nization(getFile(),getEditor(),literalExpression,Collections.<PropertiesFile>emptyList(),"key1","value1","i18nizedExpr",PsiExpression.EMPTY_ARRAY,JavaI18nUtil.DEFAULT_PROPERTY_CREATION_HANDLER);
    checkResultByFile(afterFile);
  }
}
