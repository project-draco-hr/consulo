{
  PsiElement refElement=super.getReferenceOrReferencedElement(file,editor,flags,offset);
  PsiReference ref=null;
  if (refElement == null) {
    ref=TargetElementUtilBase.findReference(editor,offset);
    if (ref instanceof PsiJavaReference) {
      refElement=((PsiJavaReference)ref).advancedResolve(true).getElement();
    }
  }
  if (refElement != null) {
    if ((flags & NEW_AS_CONSTRUCTOR) != 0) {
      if (ref == null) {
        ref=TargetElementUtilBase.findReference(editor,offset);
      }
      if (ref != null) {
        PsiElement parent=ref.getElement().getParent();
        if (parent instanceof PsiAnonymousClass) {
          parent=parent.getParent();
        }
        if (parent instanceof PsiNewExpression) {
          PsiMethod constructor=((PsiNewExpression)parent).resolveConstructor();
          if (constructor != null) {
            refElement=constructor;
          }
        }
      }
    }
    if (refElement instanceof PsiMirrorElement) {
      return ((PsiMirrorElement)refElement).getPrototype();
    }
    if (refElement instanceof PsiClass) {
      final PsiFile containingFile=refElement.getContainingFile();
      if (containingFile != null && containingFile.getVirtualFile() == null) {
        String qualifiedName=((PsiClass)refElement).getQualifiedName();
        if (qualifiedName == null)         return null;
        return JavaPsiFacade.getInstance(refElement.getProject()).findClass(qualifiedName,refElement.getResolveScope());
      }
    }
  }
  return refElement;
}
