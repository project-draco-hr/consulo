{
  if (reference instanceof PsiReferenceExpression && element instanceof PsiMember) {
    return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        final PsiExpression expression=((PsiReferenceExpression)reference).getQualifierExpression();
        final PsiClass psiClass;
        if (expression != null) {
          psiClass=PsiUtil.resolveClassInType(expression.getType());
        }
 else {
          if (element instanceof PsiClass) {
            final PsiElement resolve=reference.resolve();
            if (resolve instanceof PsiClass) {
              return InheritanceUtil.isInheritorOrSelf((PsiClass)resolve,(PsiClass)element,true) || InheritanceUtil.isInheritorOrSelf((PsiClass)element,(PsiClass)resolve,true);
            }
          }
          psiClass=PsiTreeUtil.getParentOfType((PsiReferenceExpression)reference,PsiClass.class);
        }
        final PsiClass containingClass=((PsiMember)element).getContainingClass();
        if (containingClass == psiClass)         return true;
        return psiClass != null && containingClass != null && (containingClass.isInheritor(psiClass,true) || psiClass.isInheritor(containingClass,true));
      }
    }
);
  }
  return super.acceptImplementationForReference(reference,element);
}
