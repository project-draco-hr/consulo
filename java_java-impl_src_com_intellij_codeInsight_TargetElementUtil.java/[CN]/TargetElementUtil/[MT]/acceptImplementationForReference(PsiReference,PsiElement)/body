{
  if (reference instanceof PsiReferenceExpression && element instanceof PsiMember) {
    return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        PsiClass containingClass=((PsiMember)element).getContainingClass();
        final PsiExpression expression=((PsiReferenceExpression)reference).getQualifierExpression();
        PsiClass psiClass;
        if (expression != null) {
          psiClass=PsiUtil.resolveClassInType(expression.getType());
        }
 else {
          if (element instanceof PsiClass) {
            psiClass=(PsiClass)element;
            final PsiElement resolve=reference.resolve();
            if (resolve instanceof PsiClass) {
              containingClass=(PsiClass)resolve;
            }
          }
 else {
            psiClass=PsiTreeUtil.getParentOfType((PsiReferenceExpression)reference,PsiClass.class);
          }
        }
        if (containingClass == null && psiClass == null)         return true;
        if (containingClass != null) {
          PsiElementFindProcessor<PsiClass> processor1=new PsiElementFindProcessor<PsiClass>(containingClass);
          while (psiClass != null) {
            if (!processor1.process(psiClass) || !ClassInheritorsSearch.search(containingClass).forEach(new PsiElementFindProcessor<PsiClass>(psiClass)) || !ClassInheritorsSearch.search(psiClass).forEach(processor1)) {
              return true;
            }
            psiClass=psiClass.getContainingClass();
          }
        }
        return false;
      }
    }
);
  }
  return super.acceptImplementationForReference(reference,element);
}
