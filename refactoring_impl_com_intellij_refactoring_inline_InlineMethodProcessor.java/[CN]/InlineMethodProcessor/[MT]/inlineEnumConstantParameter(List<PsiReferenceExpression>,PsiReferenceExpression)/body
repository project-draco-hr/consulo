{
  PsiExpression expr=getSimpleReturnedExpression(myMethod);
  if (expr != null) {
    refsVector.add(ref);
  }
 else {
    PsiCall call=PsiTreeUtil.getParentOfType(ref,PsiCall.class);
    @NonNls String text="new Object() { " + myMethod.getReturnTypeElement().getText() + " evaluate() { return "+ call.getText()+ ";}}.evaluate";
    PsiExpression callExpr=JavaPsiFacade.getInstance(myProject).getParserFacade().createExpressionFromText(text,call);
    PsiElement classExpr=ref.replace(callExpr);
    classExpr.accept(new JavaRecursiveElementVisitor(){
      public void visitReturnStatement(      final PsiReturnStatement statement){
        super.visitReturnStatement(statement);
        PsiExpression expr=statement.getReturnValue();
        if (expr instanceof PsiMethodCallExpression) {
          refsVector.add(((PsiMethodCallExpression)expr).getMethodExpression());
        }
      }
    }
);
    if (classExpr.getParent() instanceof PsiMethodCallExpression) {
      PsiExpressionList args=((PsiMethodCallExpression)classExpr.getParent()).getArgumentList();
      PsiExpression[] argExpressions=args.getExpressions();
      if (argExpressions.length > 0) {
        args.deleteChildRange(argExpressions[0],argExpressions[argExpressions.length - 1]);
      }
    }
  }
}
