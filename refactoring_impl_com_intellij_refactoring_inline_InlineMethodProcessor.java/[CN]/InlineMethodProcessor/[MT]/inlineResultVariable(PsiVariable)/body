{
  PsiReference[] refs=ReferencesSearch.search(resultVar,GlobalSearchScope.projectScope(myProject),false).toArray(new PsiReference[0]);
  PsiAssignmentExpression assignment=null;
  PsiReferenceExpression resultUsage=null;
  for (  PsiReference ref1 : refs) {
    PsiReferenceExpression ref=(PsiReferenceExpression)ref1;
    if (ref.getParent() instanceof PsiAssignmentExpression && ((PsiAssignmentExpression)ref.getParent()).getLExpression().equals(ref)) {
      if (assignment != null) {
        assignment=null;
        break;
      }
 else {
        assignment=(PsiAssignmentExpression)ref.getParent();
      }
    }
 else {
      LOG.assertTrue(resultUsage == null);
      resultUsage=ref;
    }
  }
  if (assignment == null)   return;
  boolean condition=assignment.getParent() instanceof PsiExpressionStatement;
  LOG.assertTrue(condition);
  if (!(assignment.getParent().getParent() == resultVar.getParent().getParent()))   return;
  if (resultUsage != null) {
    String name=resultVar.getName();
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(name,resultVar.getType(),assignment.getRExpression());
    declaration=(PsiDeclarationStatement)assignment.getParent().replace(declaration);
    resultVar.getParent().delete();
    resultVar=(PsiVariable)declaration.getDeclaredElements()[0];
    PsiElement parentStatement=RefactoringUtil.getParentStatement(resultUsage,true);
    PsiElement next=declaration.getNextSibling();
    boolean canInline=false;
    while (true) {
      if (next == null)       break;
      if (parentStatement.equals(next)) {
        canInline=true;
        break;
      }
      if (next instanceof PsiStatement)       break;
      next=next.getNextSibling();
    }
    if (canInline) {
      final PsiExpression initializer=resultVar.getInitializer();
      final PsiClass thisClass=ChangeContextUtil.getThisClass(initializer);
      ChangeContextUtil.encodeContextInfo(initializer,false);
      final PsiElement element=resultUsage.replace(resultVar.getInitializer());
      ChangeContextUtil.decodeContextInfo(element,thisClass,element.getManager().getElementFactory().createExpressionFromText("this",null));
      declaration.delete();
    }
  }
 else {
    PsiExpression rExpression=assignment.getRExpression();
    while (rExpression instanceof PsiReferenceExpression)     rExpression=((PsiReferenceExpression)rExpression).getQualifierExpression();
    if (rExpression == null || !PsiUtil.isStatement(rExpression)) {
      assignment.delete();
    }
 else {
      assignment.replace(rExpression);
    }
    resultVar.delete();
  }
}
