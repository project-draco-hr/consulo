{
  UsageInfo[] usagesIn=refUsages.get();
  ArrayList<String> conflicts=new ArrayList<String>();
  if (!myInlineThisOnly) {
    final PsiMethod[] superMethods=myMethod.findSuperMethods();
    for (    PsiMethod method : superMethods) {
      final String message=method.hasModifierProperty(PsiModifier.ABSTRACT) ? RefactoringBundle.message("inlined.method.implements.method.from.0",method.getContainingClass().getQualifiedName()) : RefactoringBundle.message("inlined.method.overrides.method.from.0",method.getContainingClass().getQualifiedName());
      conflicts.add(message);
    }
  }
  addInaccessibleMemberConflicts(myMethod,usagesIn,new ReferencedElementsCollector(),conflicts);
  if (!conflicts.isEmpty()) {
    ConflictsDialog dialog=new ConflictsDialog(myProject,conflicts);
    dialog.show();
    if (!dialog.isOK()) {
      return false;
    }
  }
  if (!myInlineThisOnly) {
    if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,myMethod))     return false;
  }
  prepareSuccessful();
  RefactoringUtil.sortDepthFirstRightLeftOrder(usagesIn);
  return true;
}
