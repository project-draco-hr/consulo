{
  final PsiCodeBlock block=myMethodCopy.getBody();
  final PsiStatement[] originalStatements=block.getStatements();
  PsiLocalVariable resultVar=null;
  PsiType returnType=callSubstitutor.substitute(myMethod.getReturnType());
  String resultName=null;
  if (returnType != null && returnType != PsiType.VOID) {
    resultName=myCodeStyleManager.propertyNameToVariableName("result",VariableKind.LOCAL_VARIABLE);
    resultName=myCodeStyleManager.suggestUniqueVariableName(resultName,block.getFirstChild(),true);
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(resultName,returnType,null);
    declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
    resultVar=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  }
  PsiParameter[] parms=myMethodCopy.getParameterList().getParameters();
  PsiLocalVariable[] parmVars=new PsiLocalVariable[parms.length];
  for (int i=parms.length - 1; i >= 0; i--) {
    PsiParameter parm=parms[i];
    String parmName=parm.getName();
    String name=parmName;
    name=myCodeStyleManager.variableNameToPropertyName(name,VariableKind.PARAMETER);
    name=myCodeStyleManager.propertyNameToVariableName(name,VariableKind.LOCAL_VARIABLE);
    if (!name.equals(parmName)) {
      name=myCodeStyleManager.suggestUniqueVariableName(name,block.getFirstChild(),true);
    }
    RefactoringUtil.renameVariableReferences(parm,name,GlobalSearchScope.projectScope(myProject));
    String defaultValue=PsiTypesUtil.getDefaultValueOfType(parm.getType());
    PsiExpression initializer=myFactory.createExpressionFromText(defaultValue,null);
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(name,callSubstitutor.substitute(parm.getType()),initializer);
    declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
    parmVars[i]=(PsiLocalVariable)declaration.getDeclaredElements()[0];
    parmVars[i].getModifierList().setModifierProperty(PsiModifier.FINAL,parm.hasModifierProperty(PsiModifier.FINAL));
  }
  PsiLocalVariable thisVar=null;
  if (!myMethod.hasModifierProperty(PsiModifier.STATIC)) {
    String thisVarName;
    PsiClass containingClass=myMethod.getContainingClass();
    if (containingClass != null) {
      PsiType thisType=myFactory.createType(containingClass,callSubstitutor);
      String[] names=myCodeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,thisType).names;
      thisVarName=names[0];
      thisVarName=myCodeStyleManager.suggestUniqueVariableName(thisVarName,block.getFirstChild(),true);
      PsiExpression initializer=myFactory.createExpressionFromText("null",null);
      PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(thisVarName,thisType,initializer);
      declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
      thisVar=(PsiLocalVariable)declaration.getDeclaredElements()[0];
    }
  }
  if (thisVar != null && syncNeeded(ref)) {
    PsiSynchronizedStatement synchronizedStatement=(PsiSynchronizedStatement)myFactory.createStatementFromText("synchronized(" + thisVar.getName() + "){}",block);
    synchronizedStatement=(PsiSynchronizedStatement)CodeStyleManager.getInstance(myProject).reformat(synchronizedStatement);
    synchronizedStatement=(PsiSynchronizedStatement)block.add(synchronizedStatement);
    final PsiCodeBlock synchronizedBody=synchronizedStatement.getBody();
    for (    final PsiStatement originalStatement : originalStatements) {
      synchronizedBody.add(originalStatement);
      originalStatement.delete();
    }
  }
  if (resultName != null) {
    PsiReturnStatement[] returnStatements=RefactoringUtil.findReturnStatements(myMethodCopy);
    for (    PsiReturnStatement returnStatement : returnStatements) {
      if (returnStatement.getReturnValue() == null)       continue;
      PsiStatement statement=myFactory.createStatementFromText(resultName + "=0;",null);
      statement=(PsiStatement)myCodeStyleManager.reformat(statement);
      PsiAssignmentExpression assignment=(PsiAssignmentExpression)((PsiExpressionStatement)statement).getExpression();
      assignment.getRExpression().replace(returnStatement.getReturnValue());
      returnStatement.replace(statement);
    }
  }
  return new BlockData(block,thisVar,parmVars,resultVar);
}
