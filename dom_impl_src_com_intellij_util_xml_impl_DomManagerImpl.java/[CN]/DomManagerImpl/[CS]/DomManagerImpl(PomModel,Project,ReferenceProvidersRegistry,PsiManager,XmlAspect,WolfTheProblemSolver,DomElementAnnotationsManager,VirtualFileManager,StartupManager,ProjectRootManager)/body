{
  myProject=project;
  myAnnotationsManager=(DomElementAnnotationsManagerImpl)annotationsManager;
  pomModel.addModelListener(new PomModelListener(){
    public void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null) {
        final Iterable<XmlFile> changedFiles=changeSet.getChangedFiles();
        boolean processExternalChange=false;
        for (        XmlFile file : changedFiles) {
          if (file == null || getCachedFileElement(file) == null || !processXmlFileChange(file,false)) {
            processExternalChange=true;
          }
        }
        if (processExternalChange && !myChanging) {
          new ExternalChangeProcessor(DomManagerImpl.this,changeSet).processChanges();
        }
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
,project);
  myReferenceProvidersRegistry=registry;
  final GenericValueReferenceProvider provider=new GenericValueReferenceProvider();
  registry.registerReferenceProvider(XmlTag.class,provider);
  registry.registerReferenceProvider(XmlAttributeValue.class,provider);
  myFileFactory=PsiFileFactory.getInstance(project);
  solver.registerFileHighlightFilter(new Condition<VirtualFile>(){
    public boolean value(    final VirtualFile file){
      final PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
        public @Nullable PsiFile compute(){
          return psiManager.findFile(file);
        }
      }
);
      return isDomFile(psiFile);
    }
  }
,project);
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      final VirtualFileAdapter listener=new VirtualFileAdapter(){
        public void contentsChanged(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileCreated(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileDeleted(        VirtualFileEvent event){
          List<XmlFile> toChange=null;
          for (          final Set<WeakReference<DomFileElementImpl>> set : myFileDescriptions.values()) {
            for (Iterator<WeakReference<DomFileElementImpl>> it=set.iterator(); it.hasNext(); ) {
              WeakReference<DomFileElementImpl> reference=it.next();
              final DomFileElementImpl element=reference.get();
              if (element == null) {
                it.remove();
                continue;
              }
              final XmlFile file=element.getFile();
              if (!file.isValid()) {
                it.remove();
                if (toChange == null)                 toChange=new ArrayList<XmlFile>();
                toChange.add(file);
              }
            }
          }
          if (toChange != null) {
            for (            final XmlFile file : toChange) {
              processFileChange(file);
            }
          }
        }
        public void propertyChanged(        VirtualFilePropertyEvent event){
          final VirtualFile file=event.getFile();
          if (!file.isDirectory() && VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
            processVfsChange(file);
          }
        }
      }
;
      virtualFileManager.addVirtualFileListener(listener,project);
    }
  }
);
  myFileIndex=projectRootManager.getFileIndex();
  for (  final DomFileDescription description : Extensions.getExtensions(DomFileDescription.EP_NAME)) {
    registerFileDescription(description);
  }
  registerRunnable();
}
