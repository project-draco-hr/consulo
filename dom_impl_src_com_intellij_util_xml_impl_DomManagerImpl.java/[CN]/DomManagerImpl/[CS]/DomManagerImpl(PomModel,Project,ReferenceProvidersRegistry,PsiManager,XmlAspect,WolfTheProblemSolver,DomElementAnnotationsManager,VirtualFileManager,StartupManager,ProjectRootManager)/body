{
  myProject=project;
  myAnnotationsManager=(DomElementAnnotationsManagerImpl)annotationsManager;
  pomModel.addModelListener(new PomModelListener(){
    public void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null && !myChanging) {
        new ExternalChangeProcessor(DomManagerImpl.this,changeSet).processChanges();
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
,project);
  myReferenceProvidersRegistry=registry;
  myElementFactory=psiManager.getElementFactory();
  solver.registerFileHighlightFilter(new Condition<VirtualFile>(){
    public boolean value(    final VirtualFile file){
      final PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
        public @Nullable PsiFile compute(){
          return psiManager.findFile(file);
        }
      }
);
      return isDomFile(psiFile);
    }
  }
,project);
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      final VirtualFileAdapter listener=new VirtualFileAdapter(){
        public void contentsChanged(        VirtualFileEvent event){
          processFileChange(event.getFile());
        }
        public void fileCreated(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileDeleted(        VirtualFileEvent event){
          for (          final Set<DomFileElementImpl> set : new HashSet<Set<DomFileElementImpl>>(myFileDescriptions.values())) {
            for (            final DomFileElementImpl fileElement : new HashSet<DomFileElementImpl>(set)) {
              processFileChange(fileElement.getFile());
            }
          }
        }
        public void propertyChanged(        VirtualFilePropertyEvent event){
          final VirtualFile file=event.getFile();
          if (!file.isDirectory() && VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
            processVfsChange(file);
          }
        }
      }
;
      virtualFileManager.addVirtualFileListener(listener,project);
    }
  }
);
  StdLanguages.XML.injectAnnotator(new DefaultDomAnnotator(this,annotationsManager),project);
  myFileIndex=projectRootManager.getFileIndex();
  for (  final DomFileDescription description : Extensions.getExtensions(DomFileDescription.EP_NAME)) {
    registerFileDescription(description);
  }
}
