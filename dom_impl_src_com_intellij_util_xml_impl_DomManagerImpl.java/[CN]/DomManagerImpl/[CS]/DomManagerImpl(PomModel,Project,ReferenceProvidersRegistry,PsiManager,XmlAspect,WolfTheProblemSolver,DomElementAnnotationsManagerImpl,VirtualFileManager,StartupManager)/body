{
  myProject=project;
  myAnnotationsManager=annotationsManager;
  pomModel.addModelListener(new PomModelListener(){
    public void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null) {
        if (!myChanging) {
          new ExternalChangeProcessor(DomManagerImpl.this,changeSet).processChanges();
        }
        final XmlFile xmlFile=changeSet.getChangedFile();
        if (xmlFile == null)         return;
        updateDependantFiles(xmlFile);
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
,project);
  myReferenceProvidersRegistry=registry;
  myElementFactory=psiManager.getElementFactory();
  solver.registerFileHighlightFilter(new Condition<VirtualFile>(){
    public boolean value(    final VirtualFile file){
      final PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
        public @Nullable PsiFile compute(){
          return psiManager.findFile(file);
        }
      }
);
      return isDomFile(psiFile);
    }
  }
,project);
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      final VirtualFileAdapter listener=new VirtualFileAdapter(){
        public void contentsChanged(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileCreated(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileDeleted(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void fileMoved(        VirtualFileMoveEvent event){
          processVfsChange(event.getFile());
        }
        public void propertyChanged(        VirtualFilePropertyEvent event){
          processVfsChange(event.getFile());
        }
      }
;
      virtualFileManager.addVirtualFileListener(listener,project);
    }
  }
);
  StdLanguages.XML.injectAnnotator(new Annotator(){
    public void annotate(    PsiElement psiElement,    AnnotationHolder holder){
      final DomFileDescription description=getDomFileDescription(psiElement);
      if (description != null && description.isAutomaticHighlightingEnabled()) {
        final DomElement domElement;
        if (psiElement instanceof XmlTag) {
          domElement=getDomElement((XmlTag)psiElement);
        }
 else         if (psiElement instanceof XmlAttribute) {
          domElement=getDomElement((XmlAttribute)psiElement);
        }
 else {
          return;
        }
        if (domElement != null) {
          final List<Annotation> list=(List<Annotation>)holder;
          final DomElementsProblemsHolder problemsHolder=annotationsManager.getProblemHolder(domElement);
          for (          final DomElementProblemDescriptor descriptor : problemsHolder.getAllProblems(MockAnnotatingDomInspection.INSTANCE)) {
            list.addAll(descriptor.getAnnotations());
          }
          if (problemsHolder instanceof DomElementsProblemsHolderImpl) {
            list.addAll(((DomElementsProblemsHolderImpl)problemsHolder).getAnnotations());
          }
        }
      }
    }
  }
,project);
}
