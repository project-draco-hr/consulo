{
  myProject=project;
  myAnnotationsManager=annotationsManager;
  pomModel.addModelListener(new PomModelListener(){
    public void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null) {
        if (!myChanging) {
          new ExternalChangeProcessor(DomManagerImpl.this,changeSet).processChanges();
        }
        final XmlFile xmlFile=changeSet.getChangedFile();
        if (xmlFile == null)         return;
        updateDependantFiles(xmlFile);
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
,project);
  myReferenceProvidersRegistry=registry;
  myElementFactory=psiManager.getElementFactory();
  solver.registerFileHighlightFilter(new Condition<VirtualFile>(){
    public boolean value(    final VirtualFile file){
      final PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
        public @Nullable PsiFile compute(){
          return psiManager.findFile(file);
        }
      }
);
      return isDomFile(psiFile);
    }
  }
,project);
  final PsiTreeChangeAdapter psiTreeChangeAdapter=new PsiTreeChangeAdapter(){
    public void childAdded(    PsiTreeChangeEvent event){
      processPsiChange(event.getChild());
    }
    public void childMoved(    PsiTreeChangeEvent event){
      processPsiChange(event.getChild());
    }
    public void childRemoved(    PsiTreeChangeEvent event){
      processPsiChange(event.getChild());
    }
    public void childrenChanged(    PsiTreeChangeEvent event){
      processPsiChange(event.getParent());
    }
    public void childReplaced(    PsiTreeChangeEvent event){
      processPsiChange(event.getOldChild());
      processPsiChange(event.getNewChild());
    }
    public void propertyChanged(    PsiTreeChangeEvent event){
      final PsiElement element=event.getElement();
      if (element != null) {
        processPsiChange(element);
      }
    }
  }
;
}
