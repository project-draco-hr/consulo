{
  myProject=project;
  myAnnotationsManager=annotationsManager;
  pomModel.addModelListener(new PomModelListener(){
    public synchronized void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null) {
        if (!myChanging) {
          new ExternalChangeProcessor(DomManagerImpl.this,changeSet).processChanges();
        }
        final XmlFile xmlFile=changeSet.getChangedFile();
        if (xmlFile == null)         return;
        final FileDescriptionCachedValueProvider provider=getCachedValueProvider(xmlFile);
        if (provider != null) {
          final DomFileDescription description=provider.getFileDescription();
          if (description != null) {
            final DomFileElementImpl<DomElement> fileElement=getFileElement(xmlFile);
            final Set<XmlFile> toUpdate=new THashSet<XmlFile>();
            for (            final DomFileDescription<?> domFileDescription : myFileDescriptionDependencies.get(description)) {
              toUpdate.addAll(domFileDescription.getDomModelDependentFiles(fileElement));
              toUpdate.addAll(ContainerUtil.map(myFileDescriptions.get(domFileDescription),new Function<DomFileElementImpl,XmlFile>(){
                public XmlFile fun(                final DomFileElementImpl s){
                  return s.getFile();
                }
              }
));
            }
            for (            final XmlFile file : toUpdate) {
              updateFileDomness(file,fileElement);
            }
          }
        }
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
);
  myReferenceProvidersRegistry=registry;
  myElementFactory=psiManager.getElementFactory();
  solver.registerFileHighlightFilter(new Condition<VirtualFile>(){
    public boolean value(    final VirtualFile file){
      final PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
        public @Nullable PsiFile compute(){
          return psiManager.findFile(file);
        }
      }
);
      return isDomFile(psiFile);
    }
  }
,project);
}
