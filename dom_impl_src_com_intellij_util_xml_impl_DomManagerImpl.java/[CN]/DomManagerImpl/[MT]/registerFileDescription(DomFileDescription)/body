{
  for (  final Map.Entry<Class<? extends DomElement>,Class<? extends DomElement>> entry : ((DomFileDescription<?>)description).getImplementations().entrySet()) {
    registerImplementation((Class)entry.getKey(),entry.getValue());
  }
  myTypeChooserManager.copyFrom(description.getTypeChooserManager());
  final DomElementsAnnotator annotator=description.createAnnotator();
  final Class<? extends DomElement> rootClass=description.getRootElementClass();
  if (annotator != null) {
    myAnnotationsManager.registerDomElementsAnnotator(annotator,rootClass);
  }
  myFileDescriptions.add(description);
  final DomLazyReferenceProvider tagReferenceProvider=new DomLazyReferenceProvider(description){
    protected void registerTrueReferenceProvider(    final String[] names){
      myReferenceProvidersRegistry.registerXmlTagReferenceProvider(names,new MyElementFilter(description),true,myGenericValueReferenceProvider);
    }
    protected Set<String> getReferenceElementNames(    final GenericInfoImpl info){
      return info.getReferenceTagNames();
    }
  }
;
  myReferenceProvidersRegistry.registerReferenceProvider(new MyElementFilter(description){
    protected boolean isInitialized(){
      return tagReferenceProvider.myInitialized;
    }
  }
,XmlTag.class,tagReferenceProvider);
  final DomLazyReferenceProvider attributeReferenceProvider=new DomLazyReferenceProvider(description){
    protected void registerTrueReferenceProvider(    final String[] names){
      myReferenceProvidersRegistry.registerXmlAttributeValueReferenceProvider(names,new MyElementFilter(description),true,myGenericValueReferenceProvider);
    }
    protected Set<String> getReferenceElementNames(    final GenericInfoImpl info){
      return info.getReferenceAttributeNames();
    }
  }
;
  myReferenceProvidersRegistry.registerReferenceProvider(new MyElementFilter(description){
    protected boolean isInitialized(){
      return attributeReferenceProvider.myInitialized;
    }
  }
,XmlAttributeValue.class,attributeReferenceProvider);
}
