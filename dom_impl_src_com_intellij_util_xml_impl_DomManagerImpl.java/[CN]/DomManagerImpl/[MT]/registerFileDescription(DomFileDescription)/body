{
  for (  final Map.Entry<Class<? extends DomElement>,Class<? extends DomElement>> entry : ((DomFileDescription<?>)description).getImplementations().entrySet()) {
    registerImplementation((Class)entry.getKey(),entry.getValue());
  }
  final DomElementsAnnotator annotator=description.createAnnotator();
  final Class<? extends DomElement> rootClass=description.getRootElementClass();
  if (annotator != null) {
    myAnnotationsManager.registerDomElementsAnnotator(annotator,rootClass);
  }
  myFileDescriptions.add(description);
  final MyElementFilter filter=new MyElementFilter(description);
  myReferenceProvidersRegistry.registerReferenceProvider(filter,XmlTag.class,new DomLazyReferenceProvider(description){
    protected void registerTrueReferenceProvider(    final String[] names){
      myReferenceProvidersRegistry.registerXmlTagReferenceProvider(names,filter,true,myGenericValueReferenceProvider);
    }
    protected Set<String> getReferenceElementNames(    final GenericInfoImpl info){
      return info.getReferenceTagNames();
    }
  }
);
  myReferenceProvidersRegistry.registerReferenceProvider(filter,XmlAttributeValue.class,new DomLazyReferenceProvider(description){
    protected void registerTrueReferenceProvider(    final String[] names){
      myReferenceProvidersRegistry.registerXmlAttributeValueReferenceProvider(names,filter,true,myGenericValueReferenceProvider);
    }
    protected Set<String> getReferenceElementNames(    final GenericInfoImpl info){
      return info.getReferenceAttributeNames();
    }
  }
);
}
