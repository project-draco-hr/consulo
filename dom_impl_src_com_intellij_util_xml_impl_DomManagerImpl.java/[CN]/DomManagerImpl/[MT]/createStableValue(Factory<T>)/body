{
  final T initial=provider.create();
  final StableInvocationHandler handler=new StableInvocationHandler<T>(initial,provider);
  final Set<Class> intf=new HashSet<Class>();
  intf.addAll(Arrays.asList(initial.getClass().getInterfaces()));
  intf.add(StableElement.class);
  final Class<? extends T> superClass=(Class<? extends T>)initial.getClass().getSuperclass();
  final T proxy=AdvancedProxy.createProxy(superClass,intf.toArray(new Class[intf.size()]),handler,Collections.<JavaMethodSignature>emptySet());
  final Set classes=new HashSet();
  classes.addAll(Arrays.asList(initial.getClass().getInterfaces()));
  ContainerUtil.addIfNotNull(superClass,classes);
  handler.setClasses(classes);
  return proxy;
}
