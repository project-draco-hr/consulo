{
  return (T)type.accept(new PsiTypeVisitor<PsiType>(){
    public PsiType visitArrayType(    final PsiArrayType arrayType){
      return new PsiArrayType(originalize(arrayType.getComponentType()));
    }
    public PsiType visitCapturedWildcardType(    final PsiCapturedWildcardType capturedWildcardType){
      return PsiCapturedWildcardType.create(originalize(capturedWildcardType.getWildcard()),capturedWildcardType.getContext());
    }
    public PsiType visitClassType(    final PsiClassType classType){
      final PsiClassType.ClassResolveResult classResolveResult=classType.resolveGenerics();
      final PsiClass psiClass=classResolveResult.getElement();
      final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
      if (psiClass == null)       return classType;
      return new PsiImmediateClassType(getOriginalElement(psiClass),originalize(substitutor));
    }
    public PsiType visitEllipsisType(    final PsiEllipsisType ellipsisType){
      return new PsiEllipsisType(originalize(ellipsisType.getComponentType()));
    }
    public PsiType visitPrimitiveType(    final PsiPrimitiveType primitiveType){
      return primitiveType;
    }
    public PsiType visitType(    final PsiType type){
      return type;
    }
    public PsiType visitWildcardType(    final PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      final PsiManager manager=wildcardType.getManager();
      if (bound == null)       return PsiWildcardType.createUnbounded(manager);
      return wildcardType.isExtends() ? PsiWildcardType.createExtends(manager,bound) : PsiWildcardType.createSuper(manager,bound);
    }
  }
);
}
