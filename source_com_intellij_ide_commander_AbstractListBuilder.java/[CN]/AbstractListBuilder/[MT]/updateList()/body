{
  if (myIsDisposed || myCurrentParent == null) {
    return;
  }
  myTreeStructure.commit();
  final AbstractTreeNode initialParentDescriptor=myCurrentParent;
  AbstractTreeNode parentDescriptor=initialParentDescriptor;
  while (true) {
    parentDescriptor.update();
    if (parentDescriptor.getValue() != null)     break;
    parentDescriptor=parentDescriptor.getParent();
  }
  final Object[] children=getChildren(parentDescriptor);
  final com.intellij.util.containers.HashMap<Object,Integer> elementToIndexMap=new com.intellij.util.containers.HashMap<Object,Integer>();
  for (int i=0; i < children.length; i++) {
    elementToIndexMap.put(children[i],new Integer(i));
  }
  final List resultDescriptors=new ArrayList();
  final Object[] listChildren=myModel.toArray();
  for (int i=0; i < listChildren.length; i++) {
    final Object child=listChildren[i];
    if (!(child instanceof NodeDescriptor)) {
      continue;
    }
    final NodeDescriptor descriptor=(NodeDescriptor)child;
    descriptor.update();
    final Object newElement=descriptor.getElement();
    final Integer index=(newElement != null) ? elementToIndexMap.get(newElement) : null;
    if (index != null) {
      resultDescriptors.add(descriptor);
      descriptor.setIndex(index.intValue());
      elementToIndexMap.remove(newElement);
    }
  }
  for (Iterator iterator=elementToIndexMap.keySet().iterator(); iterator.hasNext(); ) {
    final Object child=iterator.next();
    final Integer index=elementToIndexMap.get(child);
    if (index != null) {
      final NodeDescriptor childDescr=myTreeStructure.createDescriptor(child,parentDescriptor);
      childDescr.setIndex(index.intValue());
      childDescr.update();
      resultDescriptors.add(childDescr);
    }
  }
  final SelectionInfo selection=storeSelection();
  if (myComparator != null) {
    Collections.sort(resultDescriptors,myComparator);
  }
  myModel.removeAllElements();
  if (shouldAddTopElement()) {
    myModel.addElement("[ .. ]");
  }
  for (int i=0; i < resultDescriptors.size(); i++) {
    final NodeDescriptor descriptor=(NodeDescriptor)resultDescriptors.get(i);
    myModel.addElement(descriptor);
  }
  restoreSelection(selection);
  updateParentTitle();
}
