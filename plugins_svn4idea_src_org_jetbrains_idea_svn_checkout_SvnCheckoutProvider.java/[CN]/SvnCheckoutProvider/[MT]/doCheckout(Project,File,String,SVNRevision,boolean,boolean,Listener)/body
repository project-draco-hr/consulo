{
  final Ref<Boolean> checkoutSuccessful=new Ref<Boolean>();
  try {
    final SVNException[] exception=new SVNException[1];
    final SVNUpdateClient client=SvnVcs.getInstance(project).createUpdateClient();
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
        client.setEventHandler(new CheckoutEventHandler(SvnVcs.getInstance(project),false,progressIndicator));
        client.setIgnoreExternals(ignoreExternals);
        try {
          progressIndicator.setText(SvnBundle.message("progress.text.checking.out",target.getAbsolutePath()));
          client.doCheckout(SVNURL.parseURIEncoded(url),target,SVNRevision.UNDEFINED,revision,recursive);
          progressIndicator.checkCanceled();
          checkoutSuccessful.set(Boolean.TRUE);
        }
 catch (        SVNException e) {
          exception[0]=e;
        }
 finally {
          client.setIgnoreExternals(false);
          client.setEventHandler(null);
        }
      }
    }
,SvnBundle.message("message.title.check.out"),true,project);
    if (exception[0] != null) {
      throw exception[0];
    }
  }
 catch (  SVNCancelException ignore) {
  }
catch (  SVNException e1) {
    Messages.showErrorDialog(SvnBundle.message("message.text.cannot.checkout",e1.getMessage()),SvnBundle.message("message.title.check.out"));
  }
 finally {
    @NonNls String fileURL="file://" + target.getAbsolutePath().replace(File.separatorChar,'/');
    VirtualFile vf=VirtualFileManager.getInstance().findFileByUrl(fileURL);
    if (vf != null) {
      vf.refresh(true,true,new Runnable(){
        public void run(){
          if (listener != null) {
            if (!checkoutSuccessful.isNull()) {
              listener.directoryCheckedOut(target);
            }
            listener.checkoutCompleted();
          }
        }
      }
);
    }
 else     if (listener != null) {
      if (!checkoutSuccessful.isNull()) {
        listener.directoryCheckedOut(target);
      }
      listener.checkoutCompleted();
    }
  }
}
