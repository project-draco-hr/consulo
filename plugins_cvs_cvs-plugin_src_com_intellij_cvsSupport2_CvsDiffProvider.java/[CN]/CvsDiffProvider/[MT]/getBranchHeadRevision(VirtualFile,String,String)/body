{
  final int[] subRevisions=new CvsRevisionNumber(currentRevNumber).getSubRevisions();
  if (subRevisions == null || subRevisions.length < 2)   return currentRevNumber;
  final int[] top=new int[subRevisions.length - 1];
  System.arraycopy(subRevisions,1,top,0,subRevisions.length - 1);
  final String branchRoot=StringUtil.join(top,".");
  final LocalPathIndifferentLogOperation operation=new LocalPathIndifferentLogOperation(new File(parent.getPath(),name));
  final Ref<Boolean> logSuccess=new Ref<Boolean>(Boolean.TRUE);
  final ModalityContext context=ModalityContextImpl.NON_MODAL;
  final CvsExecutionEnvironment cvsExecutionEnvironment=new CvsExecutionEnvironment(new CvsMessagesAdapter(),CvsExecutionEnvironment.DUMMY_STOPPER,new ErrorProcessor(){
    public void addError(    VcsException ex){
      logSuccess.set(Boolean.FALSE);
    }
    public void addWarning(    VcsException ex){
    }
    public List getErrors(){
      return null;
    }
  }
,context,PostCvsActivity.DEAF);
  try {
    operation.execute(cvsExecutionEnvironment);
  }
 catch (  VcsException e) {
  }
catch (  CommandAbortedException e) {
  }
  if (Boolean.TRUE.equals(logSuccess.get())) {
    final Collection<CvsRevisionNumber> numberCollection=operation.getAllRevisions();
    if (numberCollection == null)     return null;
    for (    CvsRevisionNumber revisionNumber : numberCollection) {
      final String stringPresentation=revisionNumber.asString();
      if (stringPresentation.startsWith(branchRoot)) {
        return stringPresentation;
      }
    }
  }
  return null;
}
