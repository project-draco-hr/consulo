{
  final LogOperation operation=new LogOperation(Collections.<FilePath>singletonList(new FilePathImpl(file,false))){
    @Override protected Command createCommand(    CvsRootProvider root,    CvsExecutionEnvironment cvsExecutionEnvironment){
      final LogCommand command=(LogCommand)super.createCommand(root,cvsExecutionEnvironment);
      command.setRevisionFilter(latestKnownRevision + ":");
      return command;
    }
  }
;
  final Ref<Boolean> logSuccess=new Ref<Boolean>(Boolean.TRUE);
  final ModalityContext context=ModalityContextImpl.NON_MODAL;
  final CvsExecutionEnvironment cvsExecutionEnvironment=new CvsExecutionEnvironment(new CvsMessagesAdapter(),CvsExecutionEnvironment.DUMMY_STOPPER,new ErrorProcessor(){
    public void addError(    VcsException ex){
      logSuccess.set(Boolean.FALSE);
    }
    public void addWarning(    VcsException ex){
    }
    public List getErrors(){
      return null;
    }
  }
,context,PostCvsActivity.DEAF);
  try {
    operation.login(context);
    operation.execute(cvsExecutionEnvironment);
  }
 catch (  VcsException e) {
  }
catch (  CommandAbortedException e) {
  }
catch (  CannotFindCvsRootException e) {
  }
  if (Boolean.TRUE.equals(logSuccess.get())) {
    final List<LogInformation> informations=operation.getLogInformationList();
    if (informations != null && (!informations.isEmpty())) {
      return informations.get(0).getHeadRevision();
    }
  }
  return null;
}
