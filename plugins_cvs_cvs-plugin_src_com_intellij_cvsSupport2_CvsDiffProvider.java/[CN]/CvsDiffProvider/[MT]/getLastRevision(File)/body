{
  CvsOperationExecutor executor=new CvsOperationExecutor(myProject);
  final List<File> files=Collections.singletonList(file);
  final StatusOperation statusOperation=new StatusOperation(files){
    @Override protected Command createCommand(    CvsRootProvider root,    CvsExecutionEnvironment cvsExecutionEnvironment){
      final StatusCommand command=(StatusCommand)super.createCommand(root,cvsExecutionEnvironment);
      command.setIncludeTags(true);
      return command;
    }
  }
;
  final Ref<Boolean> success=new Ref<Boolean>();
  final CvsOperationExecutorCallback callback=new CvsOperationExecutorCallback(){
    public void executionFinished(    final boolean successfully){
    }
    public void executionFinishedSuccessfully(){
      success.set(Boolean.TRUE);
    }
    public void executeInProgressAfterAction(    final ModalityContext modaityContext){
    }
  }
;
  final CommandCvsHandler cvsHandler=new CommandCvsHandler(CvsBundle.message("operation.name.get.file.status"),statusOperation){
    @Override protected boolean runInReadThread(){
      return false;
    }
  }
;
  if (Boolean.TRUE.equals(success.get())) {
    if ((statusOperation.getStickyDate() != null) || (statusOperation.getStickyTag() != null)) {
      final String headRevision=getHeadRevisionFromLog(statusOperation.getRepositoryRevision(),file);
      if (headRevision != null) {
        return new ItemLatestState(new CvsRevisionNumber(headRevision),(statusOperation.getStatus() != null) && (!FileStatus.REMOVED.equals(statusOperation.getStatus())),false);
      }
    }
 else {
      return new ItemLatestState(new CvsRevisionNumber(statusOperation.getRepositoryRevision()),(statusOperation.getStatus() != null) && (!FileStatus.REMOVED.equals(statusOperation.getStatus())),false);
    }
  }
  return new ItemLatestState(new CvsRevisionNumber("HEAD"),true,true);
}
