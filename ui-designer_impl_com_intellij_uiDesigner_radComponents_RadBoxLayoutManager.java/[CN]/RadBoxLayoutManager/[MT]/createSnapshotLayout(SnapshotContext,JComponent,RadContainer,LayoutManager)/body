{
  int rowCount=1;
  int colCount=1;
  boolean hasFiller=false;
  if (parent.getComponentCount() > 1) {
    for (    Component component : parent.getComponents()) {
      if (component instanceof Box.Filler) {
        hasFiller=true;
      }
    }
    Rectangle bounds1=parent.getComponent(0).getBounds();
    Rectangle bounds2=parent.getComponent(1).getBounds();
    if (bounds2.x >= bounds1.x + bounds1.width) {
      colCount=parent.getComponentCount();
      if (!hasFiller)       colCount++;
      myHorizontal=true;
    }
 else {
      rowCount=parent.getComponentCount();
      if (!hasFiller)       rowCount++;
    }
  }
  container.setLayout(new GridLayoutManager(rowCount,colCount));
  if (!hasFiller) {
    if (myHorizontal) {
      RadHSpacer spacer=new RadHSpacer(null,context.newId());
      spacer.getConstraints().setColumn(colCount - 1);
      spacer.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW);
      spacer.getConstraints().setFill(GridConstraints.FILL_HORIZONTAL);
      container.addComponent(spacer);
    }
 else {
      RadVSpacer spacer=new RadVSpacer(null,context.newId());
      spacer.getConstraints().setRow(rowCount - 1);
      spacer.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW);
      spacer.getConstraints().setFill(GridConstraints.FILL_VERTICAL);
      container.addComponent(spacer);
    }
  }
}
