{
  if (jar.getPackedFiles().isEmpty() && jar.getPackedJars().isEmpty()) {
    myContext.addMessage(CompilerMessageCategory.WARNING,"Archive '" + jar.getPresentableDestination() + "' has no files so it won't be created",null,-1,-1);
    return;
  }
  myContext.getProgressIndicator().setText(CompilerBundle.message("packaging.compiler.message.building.0",jar.getPresentableDestination()));
  File jarFile=FileUtil.createTempFile("artifactCompiler","tmp");
  myBuiltJars.put(jar,jarFile);
  FileUtil.createParentDirs(jarFile);
  VirtualFile manifestFile=null;
  for (  Pair<String,VirtualFile> pair : jar.getPackedFiles()) {
    if (pair.getFirst().equals(JarFile.MANIFEST_NAME)) {
      manifestFile=pair.getSecond();
    }
  }
  final JarOutputStream jarOutputStream=createJarOutputStream(jarFile,manifestFile);
  try {
    final THashSet<String> writtenPaths=new THashSet<String>();
    for (    Pair<String,VirtualFile> pair : jar.getPackedFiles()) {
      if (pair.getFirst().equals(JarFile.MANIFEST_NAME))       continue;
      final VirtualFile sourceFile=pair.getSecond();
      if (sourceFile.isInLocalFileSystem()) {
        File file=VfsUtil.virtualToIoFile(sourceFile);
        addFileToJar(jarOutputStream,file,pair.getFirst(),writtenPaths);
      }
 else {
        extractFileAndAddToJar(jarOutputStream,sourceFile,pair.getFirst(),writtenPaths);
      }
    }
    for (    Pair<String,JarInfo> nestedJar : jar.getPackedJars()) {
      File nestedJarFile=myBuiltJars.get(nestedJar.getSecond());
      if (nestedJarFile != null) {
        addFileToJar(jarOutputStream,nestedJarFile,nestedJar.getFirst(),writtenPaths);
      }
 else {
        LOG.debug("nested jar file " + nestedJar.getFirst() + " for "+ jar.getPresentableDestination()+ " not found");
      }
    }
  }
  finally {
    jarOutputStream.close();
  }
}
