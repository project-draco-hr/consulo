{
  try {
    Expression expression=myElement.makeExpression(expr);
    final TypeHierarchy typeHierarchy=myXPathContext.getConfiguration().getTypeHierarchy();
    expression=expression.typeCheck(ExpressionVisitor.make(myElement.getStaticContext(),expression.getExecutable()),Type.ITEM_TYPE);
    final ItemType itemType=expression.getItemType(typeHierarchy);
    final Item evaluate=expression.evaluateItem(myXPathContext);
    return new Value(){
      @Override public Object getValue(){
        return evaluate != null ? evaluate.getStringValue() : null;
      }
      @Override public Type getType(){
        return new ObjectType(itemType.toString());
      }
    }
;
  }
 catch (  IllegalArgumentException e) {
    throw new Debugger.EvaluationException(e.getMessage() != null ? e.getMessage() : e.toString());
  }
catch (  XPathException e) {
    throw new Debugger.EvaluationException(e.getMessage() != null ? e.getMessage() : e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
    throw new Debugger.EvaluationException(e.getMessage() != null ? e.getMessage() : e.toString());
  }
}
