{
  final ArrayList<Debugger.Variable> variables=new ArrayList<Debugger.Variable>();
  final HashMap<StructuredQName,GlobalVariable> globalVariables=myXPathContext.getController().getExecutable().getCompiledGlobalVariables();
  if (globalVariables != null) {
    for (    StructuredQName name : globalVariables.keySet()) {
      final GlobalVariable globalVariable=globalVariables.get(name);
      variables.add(new VariableImpl(globalVariable.getVariableQName().getDisplayName(),new Value(){
        public Object getValue(){
          try {
            final ValueRepresentation valueRepresentation=globalVariable.evaluateVariable(myXPathContext);
            return valueRepresentation != null ? valueRepresentation.getStringValue() : null;
          }
 catch (          XPathException e) {
            return " - error: " + e.getMessage() + " - ";
          }
        }
        public Type getType(){
          return new ObjectType(globalVariable.getRequiredType().toString());
        }
      }
,false,Debugger.Variable.Kind.VARIABLE,"",-1));
    }
  }
  XPathContext context=myXPathContext;
  while (context != null) {
    final StackFrame frame=context.getStackFrame();
    final SlotManager map=frame.getStackFrameMap();
    final ValueRepresentation[] values=frame.getStackFrameValues();
    outer:     for (int i=0, valuesLength=values.length; i < valuesLength; i++) {
      final ValueRepresentation value=values[i];
      if (value != null) {
        final String name=map.getVariableMap().get(i).getDisplayName();
        for (        Debugger.Variable variable : variables) {
          if (name.equals(variable.getName())) {
            continue outer;
          }
        }
        variables.add(new VariableImpl(name,new Value(){
          public Object getValue(){
            try {
              return value.getStringValue();
            }
 catch (            XPathException e) {
              return " - error: " + e.getMessage() + " - ";
            }
          }
          public Type getType(){
            if (value instanceof net.sf.saxon.value.Value) {
              final ItemType type=((net.sf.saxon.value.Value)value).getItemType(myXPathContext.getConfiguration().getTypeHierarchy());
              return new ObjectType(type.toString());
            }
 else             if (value instanceof NodeInfo) {
              return XPathType.NODESET;
            }
            return XPathType.UNKNOWN;
          }
        }
,false,Debugger.Variable.Kind.VARIABLE,"",-1));
      }
    }
    context=context.getCaller();
  }
  return variables;
}
