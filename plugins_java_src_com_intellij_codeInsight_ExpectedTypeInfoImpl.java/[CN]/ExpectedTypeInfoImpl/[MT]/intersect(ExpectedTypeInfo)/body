{
  ExpectedTypeInfoImpl info1=(ExpectedTypeInfoImpl)info;
  if (kind == TYPE_STRICTLY) {
    if (info1.kind == TYPE_STRICTLY) {
      if (info1.type.equals(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else {
      return info1.intersect(this);
    }
  }
 else   if (kind == TYPE_OR_SUBTYPE) {
    if (info1.kind == TYPE_STRICTLY) {
      if (type.isAssignableFrom(info1.type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else     if (info1.kind == TYPE_OR_SUBTYPE) {
      PsiType otherType=info1.type;
      if (type.isAssignableFrom(otherType))       return new ExpectedTypeInfoImpl[]{info1};
 else       if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else {
      return info1.intersect(this);
    }
  }
 else   if (kind == TYPE_OR_SUPERTYPE) {
    if (info1.kind == TYPE_STRICTLY) {
      if (info1.type.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else     if (info1.kind == TYPE_OR_SUBTYPE) {
      PsiType otherType=info1.type;
      if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else     if (info1.kind == TYPE_OR_SUPERTYPE) {
      PsiType otherType=info1.type;
      if (type.isAssignableFrom(otherType))       return new ExpectedTypeInfoImpl[]{this};
 else       if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else {
      return info1.intersect(this);
    }
  }
  return ExpectedTypeInfo.EMPTY_ARRAY;
}
