{
  if (method.isConstructor()) {
    if (options.isIncludeOverloadUsages) {
      for (      PsiMethod constructor : method.getContainingClass().getConstructors()) {
        addConstructorUsages(constructor,searchScope,result,options);
      }
    }
 else {
      addConstructorUsages(method,searchScope,result,options);
    }
  }
 else {
    boolean strictSignatureSearch=!options.isIncludeOverloadUsages;
    MethodReferencesSearch.search(method,searchScope,strictSignatureSearch).forEach(new PsiReferenceProcessorAdapter(new PsiReferenceProcessor(){
      public boolean execute(      PsiReference ref){
        return addResult(result,ref,options,method);
      }
    }
));
  }
}
