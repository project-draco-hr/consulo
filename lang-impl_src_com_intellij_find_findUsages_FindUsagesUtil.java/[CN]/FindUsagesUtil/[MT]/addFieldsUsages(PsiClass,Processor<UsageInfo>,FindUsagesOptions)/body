{
  if (options.isIncludeInherited) {
    final PsiManager manager=aClass.getManager();
    PsiField[] fields=aClass.getAllFields();
    FieldsLoop:     for (int i=0; i < fields.length; i++) {
      final PsiField field=fields[i];
      for (int j=0; j < i; j++) {
        if (field.getName().equals(fields[j].getName()))         continue FieldsLoop;
      }
      final PsiClass fieldClass=field.getContainingClass();
      if (manager.areElementsEquivalent(fieldClass,aClass)) {
        addElementUsages(fields[i],results,options);
      }
 else {
        ReferencesSearch.search(field,options.searchScope,false).forEach(new ReadActionProcessor<PsiReference>(){
          public boolean processInReadAction(          final PsiReference reference){
            addResultFromReference(reference,fieldClass,manager,aClass,results,options,field);
            return true;
          }
        }
);
      }
    }
  }
 else {
    PsiField[] fields=ApplicationManager.getApplication().runReadAction(new Computable<PsiField[]>(){
      public PsiField[] compute(){
        return aClass.getFields();
      }
    }
);
    for (    PsiField field : fields) {
      addElementUsages(field,results,options);
    }
  }
}
