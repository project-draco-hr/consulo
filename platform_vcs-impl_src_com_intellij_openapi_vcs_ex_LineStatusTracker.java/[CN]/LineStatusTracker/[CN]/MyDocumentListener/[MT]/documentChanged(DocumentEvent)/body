{
  if (myBulkUpdate || (!myBaseLoaded))   return;
  myApplication.assertWriteAccessAllowed();
  int line=myDocument.getLineNumber(e.getOffset() + e.getNewLength());
  int linesAfterChange=line - myDocument.getLineNumber(e.getOffset());
  int linesShift=linesAfterChange - myLinesBeforeChange;
  List<Range> rangesAfterChange=getRangesAfter(myRanges,myLastChangedLine);
  List<Range> rangesBeforeChange=getRangesBefore(myRanges,myFirstChangedLine);
  List<Range> changedRanges=getChangedRanges(myFirstChangedLine,myLastChangedLine);
  int newSize=rangesBeforeChange.size() + changedRanges.size() + rangesAfterChange.size();
  if (myRanges.size() != newSize) {
    LOG.info("Ranges: " + myRanges + "; first changed line: "+ myFirstChangedLine+ "; last changed line: "+ myLastChangedLine);
    LOG.assertTrue(false);
  }
  myLastChangedLine+=linesShift;
  List<Range> newChangedRanges=getNewChangedRanges();
  shiftRanges(rangesAfterChange,linesShift);
  if (!changedRanges.equals(newChangedRanges)) {
    replaceRanges(changedRanges,newChangedRanges);
    myRanges=new ArrayList<Range>();
    myRanges.addAll(rangesBeforeChange);
    myRanges.addAll(newChangedRanges);
    myRanges.addAll(rangesAfterChange);
    myRanges=mergeRanges(myRanges);
    for (    Range range : myRanges) {
      if (!range.hasHighlighter())       range.setHighlighter(createHighlighter(range));
    }
  }
}
