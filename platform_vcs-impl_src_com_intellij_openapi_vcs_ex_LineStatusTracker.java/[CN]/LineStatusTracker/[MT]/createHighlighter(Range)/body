{
  myApplication.assertIsDispatchThread();
  LOG.assertTrue(!myReleased,"Already released");
  if (range.getHighlighter() != null) {
    LOG.error("Multiple highlighters registered for the same Range");
    return;
  }
  if (myMode == Mode.SILENT)   return;
  int first=range.getLine1() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine1());
  int second=range.getLine2() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine2());
  MarkupModel markupModel=DocumentMarkupModel.forDocument(myDocument,myProject,true);
  RangeHighlighter highlighter=LineStatusMarkerRenderer.createRangeHighlighter(range,new TextRange(first,second),markupModel);
  highlighter.setLineMarkerRenderer(LineStatusMarkerRenderer.createRenderer(range,new Function<Editor,LineStatusMarkerPopup>(){
    @Override public LineStatusMarkerPopup fun(    Editor editor){
      return new LineStatusTrackerDrawing.MyLineStatusMarkerPopup(LineStatusTracker.this,editor,range);
    }
  }
));
  highlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
  range.setHighlighter(highlighter);
}
