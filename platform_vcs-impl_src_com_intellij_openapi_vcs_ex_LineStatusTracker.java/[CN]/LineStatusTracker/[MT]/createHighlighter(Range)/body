{
  myApplication.assertIsDispatchThread();
  LOG.assertTrue(!myReleased,"Already released");
  if (range.getHighlighter() != null) {
    LOG.error("Multiple highlighters registered for the same Range");
    return;
  }
  if (myMode == Mode.SILENT)   return;
  int first=range.getLine1() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine1());
  int second=range.getLine2() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine2());
  final TextAttributes attr=LineStatusTrackerDrawing.getAttributesFor(range);
  final RangeHighlighter highlighter=DocumentMarkupModel.forDocument(myDocument,myProject,true).addRangeHighlighter(first,second,HighlighterLayer.FIRST - 1,attr,HighlighterTargetArea.LINES_IN_RANGE);
  highlighter.setThinErrorStripeMark(true);
  highlighter.setGreedyToLeft(true);
  highlighter.setGreedyToRight(true);
  highlighter.setLineMarkerRenderer(LineStatusTrackerDrawing.createRenderer(range,this));
  highlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
  final String tooltip;
  if (range.getLine1() == range.getLine2()) {
    if (range.getVcsLine1() + 1 == range.getVcsLine2()) {
      tooltip=VcsBundle.message("tooltip.text.line.before.deleted",range.getLine1() + 1);
    }
 else {
      tooltip=VcsBundle.message("tooltip.text.lines.before.deleted",range.getLine1() + 1,range.getVcsLine2() - range.getVcsLine1());
    }
  }
 else   if (range.getLine1() + 1 == range.getLine2()) {
    tooltip=VcsBundle.message("tooltip.text.line.changed",range.getLine1() + 1);
  }
 else {
    tooltip=VcsBundle.message("tooltip.text.lines.changed",range.getLine1() + 1,range.getLine2());
  }
  highlighter.setErrorStripeTooltip(tooltip);
  range.setHighlighter(highlighter);
}
