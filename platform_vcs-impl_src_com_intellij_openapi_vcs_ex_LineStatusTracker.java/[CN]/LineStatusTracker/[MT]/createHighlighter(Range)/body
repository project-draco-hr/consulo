{
  LOG.assertTrue(!myReleased,"Already released");
  int first=range.getOffset1() >= myDocument.getLineCount() ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getOffset1());
  int second=range.getOffset2() >= myDocument.getLineCount() ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getOffset2());
  final RangeHighlighter highlighter=DocumentMarkupModel.forDocument(myDocument,myProject,true).addRangeHighlighter(first,second,HighlighterLayer.FIRST - 1,null,HighlighterTargetArea.LINES_IN_RANGE);
  final TextAttributes attr=LineStatusTrackerDrawing.getAttributesFor(range);
  highlighter.setErrorStripeMarkColor(attr.getErrorStripeColor());
  highlighter.setThinErrorStripeMark(true);
  highlighter.setGreedyToLeft(true);
  highlighter.setGreedyToRight(true);
  highlighter.setLineMarkerRenderer(LineStatusTrackerDrawing.createRenderer(range,this));
  highlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
  final int line1=myDocument.getLineNumber(first);
  final int line2=myDocument.getLineNumber(second);
  final String tooltip;
  if (line1 == line2) {
    tooltip=VcsBundle.message("tooltip.text.line.changed",line1);
  }
 else {
    tooltip=VcsBundle.message("tooltip.text.lines.changed",line1,line2);
  }
  highlighter.setErrorStripeTooltip(tooltip);
  return highlighter;
}
