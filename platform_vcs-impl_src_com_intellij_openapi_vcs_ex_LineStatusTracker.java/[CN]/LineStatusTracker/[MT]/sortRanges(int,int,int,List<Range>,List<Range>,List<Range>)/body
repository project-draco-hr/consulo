{
  int lastBefore=-1;
  int firstAfter=myRanges.size();
  for (int i=0; i < myRanges.size(); i++) {
    Range range=myRanges.get(i);
    if (range.getLine2() < beforeChangedLine1) {
      lastBefore=i;
    }
 else     if (range.getLine1() > beforeChangedLine2) {
      firstAfter=i;
      break;
    }
  }
  if (Registry.is("diff.status.tracker.skip.spaces")) {
    while (lastBefore != -1) {
      int firstChangedLine=beforeChangedLine1;
      if (lastBefore + 1 < myRanges.size()) {
        Range firstChanged=myRanges.get(lastBefore + 1);
        firstChangedLine=Math.min(firstChangedLine,firstChanged.getLine1());
      }
      if (!isLineRangeEmpty(myDocument,myRanges.get(lastBefore).getLine2(),firstChangedLine)) {
        break;
      }
      lastBefore--;
    }
    while (firstAfter != myRanges.size()) {
      int firstUnchangedLineAfter=beforeChangedLine2 + linesShift;
      if (firstAfter > 0) {
        Range lastChanged=myRanges.get(firstAfter - 1);
        firstUnchangedLineAfter=Math.max(firstUnchangedLineAfter,lastChanged.getLine2() + linesShift);
      }
      if (!isLineRangeEmpty(myDocument,firstUnchangedLineAfter,myRanges.get(firstAfter).getLine1() + linesShift)) {
        break;
      }
      firstAfter++;
    }
  }
  for (int i=0; i < myRanges.size(); i++) {
    Range range=myRanges.get(i);
    if (i <= lastBefore) {
      rangesBeforeChange.add(range);
    }
 else     if (i >= firstAfter) {
      rangesAfterChange.add(range);
    }
 else {
      changedRanges.add(range);
    }
  }
}
