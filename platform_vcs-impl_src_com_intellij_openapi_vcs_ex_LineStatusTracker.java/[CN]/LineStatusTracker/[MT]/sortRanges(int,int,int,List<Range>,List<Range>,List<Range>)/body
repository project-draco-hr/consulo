{
  if (!Registry.is("diff.status.tracker.skip.spaces")) {
    for (    Range range : myRanges) {
      if (range.getLine2() < beforeChangedLine1) {
        rangesBeforeChange.add(range);
      }
 else       if (range.getLine1() > beforeChangedLine2) {
        rangesAfterChange.add(range);
      }
 else {
        changedRanges.add(range);
      }
    }
  }
 else {
    int lastBefore=-1;
    int firstAfter=myRanges.size();
    for (int i=0; i < myRanges.size(); i++) {
      Range range=myRanges.get(i);
      if (range.getLine2() < beforeChangedLine1) {
        lastBefore=i;
      }
 else       if (range.getLine1() > beforeChangedLine2) {
        firstAfter=i;
        break;
      }
    }
    CharSequence sequence=myDocument.getCharsSequence();
    int lineCount=getLineCount(myDocument);
    while (true) {
      if (lastBefore == -1)       break;
      if (lastBefore < myRanges.size() - 1 && firstAfter - lastBefore > 1) {
        Range firstChangedRange=myRanges.get(lastBefore + 1);
        if (firstChangedRange.getLine1() < beforeChangedLine1) {
          beforeChangedLine1=firstChangedRange.getLine1();
        }
      }
      if (beforeChangedLine1 < 0)       break;
      if (beforeChangedLine1 >= lineCount)       break;
      int offset1=myDocument.getLineStartOffset(beforeChangedLine1) - 2;
      int deltaLines=0;
      while (offset1 > 0) {
        char c=sequence.charAt(offset1);
        if (!StringUtil.isWhiteSpace(c))         break;
        if (c == '\n')         deltaLines++;
        offset1--;
      }
      if (deltaLines == 0)       break;
      beforeChangedLine1-=deltaLines;
      if (myRanges.get(lastBefore).getLine2() < beforeChangedLine1)       break;
      while (lastBefore != -1 && myRanges.get(lastBefore).getLine2() >= beforeChangedLine1) {
        lastBefore--;
      }
    }
    while (true) {
      if (firstAfter == myRanges.size())       break;
      if (firstAfter > 0 && firstAfter - lastBefore > 1) {
        Range lastChangedRange=myRanges.get(firstAfter - 1);
        if (lastChangedRange.getLine2() > beforeChangedLine2) {
          beforeChangedLine2=lastChangedRange.getLine2();
        }
      }
      int afterChangedLine2=beforeChangedLine2 + linesShift - 1;
      if (afterChangedLine2 < 0)       break;
      if (afterChangedLine2 >= lineCount)       break;
      int offset2=myDocument.getLineEndOffset(afterChangedLine2) + 1;
      int deltaLines=0;
      while (offset2 < sequence.length()) {
        char c=sequence.charAt(offset2);
        if (!StringUtil.isWhiteSpace(c))         break;
        if (c == '\n')         deltaLines++;
        offset2++;
      }
      if (deltaLines == 0)       break;
      beforeChangedLine2+=deltaLines;
      if (myRanges.get(firstAfter).getLine1() > beforeChangedLine2)       break;
      while (firstAfter != myRanges.size() && myRanges.get(firstAfter).getLine1() <= beforeChangedLine2) {
        firstAfter++;
      }
    }
    for (int i=0; i < myRanges.size(); i++) {
      Range range=myRanges.get(i);
      if (i <= lastBefore) {
        rangesBeforeChange.add(range);
      }
 else       if (i >= firstAfter) {
        rangesAfterChange.add(range);
      }
 else {
        changedRanges.add(range);
      }
    }
  }
}
