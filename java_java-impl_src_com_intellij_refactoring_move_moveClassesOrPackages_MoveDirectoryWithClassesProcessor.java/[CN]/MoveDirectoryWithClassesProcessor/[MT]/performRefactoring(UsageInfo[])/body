{
  final Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
  for (  PsiClass psiClass : myClassesToMove.keySet()) {
    ChangeContextUtil.encodeContextInfo(psiClass,true);
    final RefactoringElementListener listener=getTransaction().getElementListener(psiClass);
    final PsiClass newClass=MoveClassesOrPackagesUtil.doMoveClass(psiClass,myClassesToMove.get(psiClass).findOrCreateTargetDirectory());
    oldToNewElementsMapping.put(psiClass,newClass);
    listener.elementMoved(newClass);
  }
  for (  PsiClass psiClass : myClassesToMove.keySet()) {
    ChangeContextUtil.decodeContextInfo(psiClass,null,null);
  }
  myNonCodeUsages=MoveClassesOrPackagesProcessor.retargetUsages(usages,oldToNewElementsMapping);
  for (  UsageInfo usage : usages) {
    if (usage instanceof RemoveOnDemandImportStatementsUsageInfo) {
      final PsiElement element=usage.getElement();
      if (element != null) {
        element.delete();
      }
    }
  }
  for (  PsiDirectory directory : myDirectories) {
    directory.delete();
  }
}
