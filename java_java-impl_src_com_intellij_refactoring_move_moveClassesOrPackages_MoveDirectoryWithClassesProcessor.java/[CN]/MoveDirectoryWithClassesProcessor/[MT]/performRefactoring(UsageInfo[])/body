{
  try {
    for (    PsiDirectory directory : myDirectories) {
      final TargetDirectoryWrapper targetSubDirectory=myTargetDirectory != null ? new TargetDirectoryWrapper(myTargetDirectory,directory.getName()) : getTargetDirectory(directory);
      targetSubDirectory.findOrCreateTargetDirectory();
    }
    for (    PsiFile psiFile : myFilesToMove.keySet()) {
      myFilesToMove.get(psiFile).findOrCreateTargetDirectory();
    }
  }
 catch (  IncorrectOperationException e) {
    Messages.showErrorDialog(myProject,e.getMessage(),CommonBundle.getErrorTitle());
    return;
  }
  final Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
  for (  PsiFile psiFile : myFilesToMove.keySet()) {
    ChangeContextUtil.encodeContextInfo(psiFile,true);
    final RefactoringElementListener listener=getTransaction().getElementListener(psiFile);
    final PsiDirectory moveDestination=myFilesToMove.get(psiFile).getTargetDirectory();
    if (psiFile instanceof PsiClassOwner) {
      for (      PsiClass psiClass : ((PsiClassOwner)psiFile).getClasses()) {
        final PsiClass newClass=MoveClassesOrPackagesUtil.doMoveClass(psiClass,moveDestination);
        oldToNewElementsMapping.put(psiClass,newClass);
        listener.elementMoved(newClass);
      }
    }
 else {
      if (!moveDestination.equals(psiFile.getContainingDirectory())) {
        psiFile.getManager().moveFile(psiFile,moveDestination);
        listener.elementMoved(psiFile);
      }
    }
  }
  for (  PsiElement newElement : oldToNewElementsMapping.values()) {
    ChangeContextUtil.decodeContextInfo(newElement,null,null);
  }
  myNonCodeUsages=MoveClassesOrPackagesProcessor.retargetUsages(usages,oldToNewElementsMapping);
  for (  UsageInfo usage : usages) {
    if (usage instanceof RemoveOnDemandImportStatementsUsageInfo) {
      final PsiElement element=usage.getElement();
      if (element != null) {
        element.delete();
      }
    }
  }
  for (  PsiDirectory directory : myDirectories) {
    directory.delete();
  }
}
