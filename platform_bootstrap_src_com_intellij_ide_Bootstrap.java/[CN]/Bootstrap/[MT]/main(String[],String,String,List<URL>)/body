{
  final UrlClassLoader newClassLoader=ClassloaderUtil.initClassloader(classpathElements);
  try {
    WindowsCommandLineProcessor.ourMirrorClass=Class.forName(WindowsCommandLineProcessor.class.getName(),true,newClassLoader);
    final Class<?> klass=Class.forName(PLUGIN_MANAGER,true,newClassLoader);
    final Method startMethod=klass.getDeclaredMethod("start",String.class,String.class,String[].class);
    startMethod.setAccessible(true);
    startMethod.invoke(null,mainClass,methodName,args);
  }
 catch (  Exception e) {
    if ("true".equals(System.getProperty("java.awt.headless"))) {
      e.printStackTrace(System.err);
    }
 else {
      JOptionPane.showMessageDialog(null,e.getClass().getName() + ": " + e.getMessage(),"Error starting IntelliJ Platform",JOptionPane.ERROR_MESSAGE);
    }
  }
}
