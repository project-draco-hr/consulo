{
  NameItem[] names=new NameItem[projects.size()];
  int i=0;
  for (  MavenProject each : projects) {
    names[i++]=new NameItem(each,mavenProjectToModule.get(each));
  }
  Arrays.sort(names);
  Map<String,Integer> nameCounters=new HashMap<String,Integer>();
  for (i=0; i < names.length; i++) {
    if (names[i].hasDuplicatedGroup)     continue;
    for (int k=i + 1; k < names.length; k++) {
      if (names[i].originalName.equals(names[k].originalName)) {
        nameCounters.put(names[i].originalName,0);
        if (names[i].groupId.equals(names[k].groupId)) {
          names[i].hasDuplicatedGroup=true;
          names[k].hasDuplicatedGroup=true;
        }
      }
    }
  }
  Set<String> existingNames=new HashSet<String>();
  for (  NameItem name : names) {
    if (name.module != null) {
      boolean wasAdded=existingNames.add(name.getResultName());
    }
  }
  for (  NameItem nameItem : names) {
    if (nameItem.module == null) {
      Integer c=nameCounters.get(nameItem.originalName);
      if (c != null) {
        nameItem.number=c;
        nameCounters.put(nameItem.originalName,c + 1);
      }
      do {
        String name=nameItem.getResultName();
        if (existingNames.add(name))         break;
        nameItem.number++;
        nameCounters.put(nameItem.originalName,nameItem.number + 1);
      }
 while (true);
    }
  }
  for (  NameItem each : names) {
    mavenProjectToModuleName.put(each.project,each.getResultName());
  }
}
