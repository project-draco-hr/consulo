{
  myListsHolder=new ChangesListCreationHelper();
  final Map<String,ExternallyRenamedChange> copiedAddedChanges=new HashMap<String,ExternallyRenamedChange>();
  for (  String path : myAddedPaths) {
    final ExternallyRenamedChange addedChange=new ExternallyRenamedChange(null,myListsHolder.createRevisionLazily(path,false));
    if (myCopiedAddedPaths.containsKey(path)) {
      copiedAddedChanges.put(myCopiedAddedPaths.get(path),addedChange);
    }
    myListsHolder.add(addedChange);
  }
  for (  String path : myDeletedPaths) {
    final ExternallyRenamedChange deletedChange=new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path,true),null);
    if (copiedAddedChanges.containsKey(path)) {
      final ExternallyRenamedChange addedChange=copiedAddedChanges.get(path);
      deletedChange.setRenamedOrMovedTarget(addedChange.getAfterRevision().getFile());
    }
    myListsHolder.add(deletedChange);
  }
  for (  String path : myChangedPaths) {
    boolean moveAndChange=false;
    final boolean replaced=myReplacedPaths.contains(path);
    for (    String addedPath : myAddedPaths) {
      final String copyFromPath=myCopiedAddedPaths.get(addedPath);
      if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath,path))) {
        moveAndChange=true;
        final Change renamedChange=new Change(myListsHolder.createRevisionLazily(copyFromPath,true),myListsHolder.createRevisionLazily(path,false));
        renamedChange.getMoveRelativePath(myVcs.getProject());
        renamedChange.setIsReplaced(replaced);
        myListsHolder.add(renamedChange);
        break;
      }
    }
    if (!moveAndChange) {
      final ExternallyRenamedChange renamedChange=new ExternallyRenamedChange(myListsHolder.createRevisionLazily(path,true),myListsHolder.createRevisionLazily(path,false));
      renamedChange.setIsReplaced(replaced);
      myListsHolder.add(renamedChange);
    }
  }
}
