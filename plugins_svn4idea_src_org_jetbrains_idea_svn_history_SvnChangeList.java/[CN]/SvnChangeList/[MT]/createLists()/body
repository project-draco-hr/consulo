{
  try {
    myRepository=myVcs.createRepository(myRepositoryRoot);
  }
 catch (  SVNException e) {
    LOG.error(e);
  }
  myChanges=new ArrayList<Change>();
  final Map<String,ExternallyRenamedChange> copiedAddedChanges=new HashMap<String,ExternallyRenamedChange>();
  for (  String path : myAddedPaths) {
    final ExternallyRenamedChange addedChange=new ExternallyRenamedChange(null,createRevisionLazily(path,false));
    if (myCopiedAddedPaths.containsKey(path)) {
      copiedAddedChanges.put(myCopiedAddedPaths.get(path),addedChange);
    }
    myChanges.add(addedChange);
  }
  for (  String path : myDeletedPaths) {
    final ExternallyRenamedChange deletedChange=new ExternallyRenamedChange(createRevisionLazily(path,true),null);
    if (copiedAddedChanges.containsKey(path)) {
      final ExternallyRenamedChange addedChange=copiedAddedChanges.get(path);
      deletedChange.setRenamedOrMovedTarget(addedChange.getAfterRevision().getFile());
    }
    myChanges.add(deletedChange);
  }
  for (  String path : myChangedPaths) {
    boolean moveAndChange=false;
    for (    String addedPath : myAddedPaths) {
      if (SVNPathUtil.isAncestor(addedPath,path)) {
        moveAndChange=true;
        final Change renamedChange=new Change(createRevisionLazily(myCopiedAddedPaths.get(addedPath),true),createRevisionLazily(path,false));
        renamedChange.getMoveRelativePath(myVcs.getProject());
        myChanges.add(renamedChange);
        break;
      }
    }
    if (!moveAndChange) {
      myChanges.add(new ExternallyRenamedChange(createRevisionLazily(path,true),createRevisionLazily(path,false)));
    }
  }
}
