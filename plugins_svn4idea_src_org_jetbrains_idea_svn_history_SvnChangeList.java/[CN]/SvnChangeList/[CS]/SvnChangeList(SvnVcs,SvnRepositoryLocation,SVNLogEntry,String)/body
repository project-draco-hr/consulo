{
  myVcs=vcs;
  myLocation=location;
  myRevision=logEntry.getRevision();
  final String author=logEntry.getAuthor();
  myAuthor=author == null ? "" : author;
  myDate=logEntry.getDate();
  final String message=logEntry.getMessage();
  myMessage=message == null ? "" : message;
  myRepositoryRoot=repositoryRoot.endsWith("/") ? repositoryRoot.substring(0,repositoryRoot.length() - 1) : repositoryRoot;
  final CommonPathSearcher commonPathSearcher=new CommonPathSearcher();
  for (  Object o : logEntry.getChangedPaths().values()) {
    final SVNLogEntryPath entry=(SVNLogEntryPath)o;
    final String path=entry.getPath();
    commonPathSearcher.next(path);
    if (entry.getType() == 'A') {
      if (entry.getCopyPath() != null) {
        myCopiedAddedPaths.put(path,entry.getCopyPath());
      }
      myAddedPaths.add(path);
    }
 else     if (entry.getType() == 'D') {
      myDeletedPaths.add(path);
    }
 else {
      myChangedPaths.add(path);
    }
  }
  myCommonPathRoot=commonPathSearcher.getCommon();
  updateCachedInfo();
}
