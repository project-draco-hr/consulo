{
  myVcs=vcs;
  myLocation=location;
  myDirectories=new HashMap<String,Boolean>();
  myRevision=logEntry.getRevision();
  final String author=logEntry.getAuthor();
  myAuthor=author == null ? "" : author;
  myDate=logEntry.getDate();
  final String message=logEntry.getMessage();
  myMessage=message == null ? "" : message;
  myRepositoryRoot=repositoryRoot;
  initRepository();
  final Map<String,Collection<String>> deletedChildren=new HashMap<String,Collection<String>>();
  final Map<String,String> copiedAdded=new HashMap<String,String>();
  for (  Object o : logEntry.getChangedPaths().values()) {
    final SVNLogEntryPath entry=(SVNLogEntryPath)o;
    final String path=entry.getPath();
    if (entry.getType() == 'A') {
      myAddedPaths.add(path);
      if (entry.getCopyPath() != null) {
        copiedAdded.put(entry.getCopyPath(),path);
      }
    }
 else     if (entry.getType() == 'D') {
      myDeletedPaths.add(path);
      final Collection<String> deleted=getChildren(path,myRevision - 1);
      if (deleted != null) {
        for (        String name : deleted) {
          myDeletedPaths.add(path + '/' + name);
        }
        deletedChildren.put(path,deleted);
      }
    }
 else {
      myChangedPaths.add(path);
    }
  }
  for (  Map.Entry<String,String> entry : copiedAdded.entrySet()) {
    final Collection<String> contents=deletedChildren.get(entry.getKey());
    if (contents != null) {
      for (      String name : contents) {
        final String path=entry.getValue() + '/' + name;
        myAddedPaths.add(path);
        myDirectories.put(path,Boolean.TRUE);
      }
    }
  }
  updateBranchInfo();
}
