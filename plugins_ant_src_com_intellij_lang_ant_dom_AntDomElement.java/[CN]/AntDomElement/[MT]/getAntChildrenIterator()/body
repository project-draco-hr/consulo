{
  final List<DomElement> children=DomUtil.getDefinedChildren(this,true,false);
  if (children.size() == 0) {
    return Collections.<AntDomElement>emptyList().iterator();
  }
  final Iterator<DomElement> it=children.iterator();
  return new Iterator<AntDomElement>(){
    private DomElement myUnprocessedElement;
    public boolean hasNext(){
      findNextAntElement();
      return myUnprocessedElement != null;
    }
    public AntDomElement next(){
      findNextAntElement();
      if (myUnprocessedElement == null) {
        throw new NoSuchElementException();
      }
      final AntDomElement antElement=(AntDomElement)myUnprocessedElement;
      myUnprocessedElement=null;
      return antElement;
    }
    private void findNextAntElement(){
      if (myUnprocessedElement != null) {
        return;
      }
      do {
        if (!it.hasNext()) {
          break;
        }
        myUnprocessedElement=it.next();
      }
 while (!(myUnprocessedElement instanceof AntDomElement));
    }
    public void remove(){
      throw new UnsupportedOperationException("remove");
    }
  }
;
}
