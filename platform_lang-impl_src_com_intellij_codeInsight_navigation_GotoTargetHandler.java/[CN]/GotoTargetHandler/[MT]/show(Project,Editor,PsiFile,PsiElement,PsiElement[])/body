{
  if (elements == null || elements.length == 0) {
    handleNoVariansCase(project,editor,file);
    return;
  }
  if (elements.length == 1) {
    Navigatable descriptor=elements[0] instanceof Navigatable ? (Navigatable)elements[0] : EditSourceUtil.getDescriptor(elements[0]);
    if (descriptor != null && descriptor.canNavigate()) {
      navigateToElement(descriptor);
    }
  }
 else {
    PsiElementListCellRenderer renderer=null;
    for (    GotoTargetRendererProvider provider : Extensions.getExtensions(GotoTargetRendererProvider.EP_NAME)) {
      renderer=provider.getRenderer(elements);
      if (renderer != null)       break;
    }
    String titleKey;
    if (renderer == null) {
      renderer=new DefaultPsiElementListCellRenderer();
      titleKey=getChooserInFileTitleKey(sourceElement);
    }
 else {
      titleKey=getChooserTitleKey(sourceElement);
    }
    String name=((PsiNamedElement)sourceElement).getName();
    String title=CodeInsightBundle.message(titleKey,name,elements.length);
    if (shouldSortResult())     Arrays.sort(elements,renderer.getComparator());
    final JList list=new JList(elements);
    list.setCellRenderer(renderer);
    final Runnable runnable=new Runnable(){
      public void run(){
        int[] ids=list.getSelectedIndices();
        if (ids == null || ids.length == 0)         return;
        Object[] selectedElements=list.getSelectedValues();
        for (        Object element : selectedElements) {
          Navigatable descriptor=element instanceof Navigatable ? (Navigatable)element : EditSourceUtil.getDescriptor((PsiElement)element);
          if (descriptor != null && descriptor.canNavigate()) {
            navigateToElement(descriptor);
          }
        }
      }
    }
;
    final PopupChooserBuilder builder=new PopupChooserBuilder(list);
    renderer.installSpeedSearch(builder);
    builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).createPopup().showInBestPositionFor(editor);
  }
}
