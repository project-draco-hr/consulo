{
  if (targets.length == 0 && additionalActions.isEmpty()) {
    HintManager.getInstance().showErrorHint(editor,getNotFoundMessage(project,editor,file));
    return;
  }
  if (targets.length == 1 && additionalActions.isEmpty()) {
    Navigatable descriptor=targets[0] instanceof Navigatable ? (Navigatable)targets[0] : EditSourceUtil.getDescriptor(targets[0]);
    if (descriptor != null && descriptor.canNavigate()) {
      navigateToElement(descriptor);
    }
    return;
  }
  final Map<Object,PsiElementListCellRenderer> targetsWithRenderers=new THashMap<Object,PsiElementListCellRenderer>(targets.length);
  GotoTargetRendererProvider[] providers=Extensions.getExtensions(GotoTargetRendererProvider.EP_NAME);
  for (  PsiElement eachTarget : targets) {
    PsiElementListCellRenderer renderer=null;
    for (    GotoTargetRendererProvider eachProvider : providers) {
      renderer=eachProvider.getRenderer(eachTarget);
      if (renderer != null)       break;
    }
    if (renderer == null) {
      renderer=myDefaultTargetElementRenderer;
    }
    targetsWithRenderers.put(eachTarget,renderer);
  }
  String name=((PsiNamedElement)sourceElement).getName();
  String title=getChooserTitle(sourceElement,name,targets.length);
  if (shouldSortTargets()) {
    Arrays.sort(targets,new Comparator<PsiElement>(){
      @Override public int compare(      PsiElement o1,      PsiElement o2){
        return getComparingObject(o1).compareTo(getComparingObject(o2));
      }
      private Comparable getComparingObject(      PsiElement o1){
        return targetsWithRenderers.get(o1).getComparingObject(o1);
      }
    }
);
  }
  List<Object> allElements=new ArrayList<Object>(targets.length + additionalActions.size());
  Collections.addAll(allElements,targets);
  allElements.addAll(additionalActions);
  final JList list=new JBList(allElements);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value == null)       return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof AdditionalAction) {
        return myActionElementRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      }
      return targetsWithRenderers.get(value).getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  final Runnable runnable=new Runnable(){
    public void run(){
      int[] ids=list.getSelectedIndices();
      if (ids == null || ids.length == 0)       return;
      Object[] selectedElements=list.getSelectedValues();
      for (      Object element : selectedElements) {
        if (element instanceof AdditionalAction) {
          ((AdditionalAction)element).execute();
        }
 else {
          Navigatable nav=element instanceof Navigatable ? (Navigatable)element : EditSourceUtil.getDescriptor((PsiElement)element);
          if (nav != null && nav.canNavigate()) {
            navigateToElement(nav);
          }
        }
      }
    }
  }
;
  final PopupChooserBuilder builder=new PopupChooserBuilder(list);
  builder.setFilteringEnabled(new Function<Object,String>(){
    @Override public String fun(    Object o){
      if (o instanceof AdditionalAction) {
        return ((AdditionalAction)o).getText();
      }
      return targetsWithRenderers.get(o).getElementText((PsiElement)o);
    }
  }
);
  builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).createPopup().showInBestPositionFor(editor);
}
