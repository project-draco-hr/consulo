{
  final JPanel panel=new JPanel(new BorderLayout());
  final MemberSelectionPanel memberSelectionPanel=new MemberSelectionPanel(RefactorJBundle.message("members.to.extract.label"),memberInfo,"As enum"){
    @Override protected MemberSelectionTable createMemberSelectionTable(    final List<MemberInfo> memberInfo,    String abstractColumnHeader){
      return new MemberSelectionTable(memberInfo,abstractColumnHeader){
        @Nullable @Override protected Object getAbstractColumnValue(        MemberInfo memberInfo){
          if (isExtractAsEnum()) {
            final PsiMember member=memberInfo.getMember();
            if (isConstantField(member)) {
              return Boolean.valueOf(enumConstants.contains(memberInfo));
            }
          }
          return null;
        }
        @Override protected boolean isAbstractColumnEditable(        int rowIndex){
          final MemberInfo info=memberInfo.get(rowIndex);
          if (info.isChecked()) {
            final PsiMember member=info.getMember();
            if (isConstantField(member)) {
              if (enumConstants.isEmpty())               return true;
              final MemberInfo currentEnumConstant=enumConstants.get(0);
              if (((PsiField)currentEnumConstant.getMember()).getType().equals(((PsiField)member).getType()))               return true;
            }
          }
          return false;
        }
      }
;
    }
  }
;
  final MemberSelectionTable table=memberSelectionPanel.getTable();
  table.setMemberInfoModel(new DelegatingMemberInfoModel<PsiMember,MemberInfo>(table.getMemberInfoModel()){
    @Override public int checkForProblems(    @NotNull final MemberInfo member){
      final PsiMember cause=getCause(member);
      if (member.isChecked() && cause != null)       return ERROR;
      if (!member.isChecked() && cause != null)       return WARNING;
      return OK;
    }
    @Override public String getTooltipText(    final MemberInfo member){
      final PsiMember cause=getCause(member);
      if (cause != null) {
        final String presentation=SymbolPresentationUtil.getSymbolPresentableText(cause);
        if (member.isChecked()) {
          return "Depends on " + presentation + " from "+ sourceClass.getName();
        }
 else {
          final String className=getClassName();
          return "Depends on " + presentation + " from new class"+ (className.length() > 0 ? ": " + className : "");
        }
      }
      return null;
    }
    private PsiMember getCause(    final MemberInfo member){
      PsiMember cause=myMember2CauseMap.get(member);
      if (cause != null)       return cause;
      final BackpointerUsageVisitor visitor;
      if (member.isChecked()) {
        visitor=new BackpointerUsageVisitor(getFieldsToExtract(),getClassesToExtract(),getMethodsToExtract(),sourceClass);
      }
 else {
        visitor=new BackpointerUsageVisitor(getMembersToExtract(false,PsiField.class),getMembersToExtract(false,PsiClass.class),getMembersToExtract(false,PsiMethod.class),sourceClass,false);
      }
      member.getMember().accept(visitor);
      cause=visitor.getCause();
      myMember2CauseMap.put(member,cause);
      return cause;
    }
  }
);
  panel.add(memberSelectionPanel,BorderLayout.CENTER);
  table.addMemberInfoChangeListener(this);
  extractAsEnum.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      table.repaint();
    }
  }
);
  myGenerateAccessorsCb=new JCheckBox("Generate accessors");
  myGenerateAccessorsCb.setMnemonic('G');
  panel.add(myGenerateAccessorsCb,BorderLayout.SOUTH);
  panel.add(myVisibilityPanel,BorderLayout.EAST);
  return panel;
}
