{
  final Project project=sourceClass.getProject();
  final PsiNameHelper nameHelper=JavaPsiFacade.getInstance(project).getNameHelper();
  final List<PsiMethod> methods=getMethodsToExtract();
  final List<PsiField> fields=getFieldsToExtract();
  final List<PsiClass> innerClasses=getClassesToExtract();
  if (methods.isEmpty() && fields.isEmpty() && innerClasses.isEmpty()) {
    throw new ConfigurationException("Nothing found to extract");
  }
  final String className=getClassName();
  if (className.length() == 0 || !nameHelper.isIdentifier(className)) {
    throw new ConfigurationException("\'" + className + "\' is invalid extracted class name");
  }
  for (  PsiClass innerClass : innerClasses) {
    if (className.equals(innerClass.getName())) {
      throw new ConfigurationException("Extracted class should have unique name. Name " + "\'" + className + "\' is already in use by one of the inner classes");
    }
  }
}
