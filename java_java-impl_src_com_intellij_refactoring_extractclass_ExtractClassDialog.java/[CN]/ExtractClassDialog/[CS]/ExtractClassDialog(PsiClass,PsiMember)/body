{
  super(sourceClass.getProject(),true);
  setModal(true);
  setTitle(RefactorJBundle.message("extract.class.title"));
  this.sourceClass=sourceClass;
  final DocumentListener docListener=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      validateButtons();
    }
  }
;
  classNameField=new JTextField();
  final PsiFile file=sourceClass.getContainingFile();
  final String text=file instanceof PsiJavaFile ? ((PsiJavaFile)file).getPackageName() : "";
  packageTextField=new PackageNameReferenceEditorCombo(text,myProject,"ExtractClass.RECENTS_KEY",RefactorJBundle.message("choose.destination.package.label"));
  packageTextField.getChildComponent().getDocument().addDocumentListener(new com.intellij.openapi.editor.event.DocumentAdapter(){
    @Override public void documentChanged(    com.intellij.openapi.editor.event.DocumentEvent e){
      validateButtons();
    }
  }
);
  classNameField.getDocument().addDocumentListener(docListener);
  sourceClassTextField=new JTextField();
  final MemberInfo.Filter<PsiMember> filter=new MemberInfo.Filter<PsiMember>(){
    public boolean includeMember(    PsiMember element){
      if (element instanceof PsiMethod) {
        return !((PsiMethod)element).isConstructor() && ((PsiMethod)element).getBody() != null;
      }
 else       if (element instanceof PsiField) {
        return true;
      }
 else       if (element instanceof PsiClass) {
        return PsiTreeUtil.isAncestor(ExtractClassDialog.this.sourceClass,element,true);
      }
      return false;
    }
  }
;
  memberInfo=MemberInfo.extractClassMembers(this.sourceClass,filter,false);
  for (  MemberInfo info : memberInfo) {
    if (info.getMember().equals(selectedMember)) {
      info.setChecked(true);
    }
  }
  super.init();
  sourceClassTextField.setText(sourceClass.getQualifiedName());
  validateButtons();
}
