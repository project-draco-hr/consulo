{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  Class[] scopes=new Class[]{PsiMethod.class,PsiClassInitializer.class,PsiClass.class,PsiField.class,PsiFile.class};
  PsiReferenceExpression[] refs=CreateFromUsageUtils.collectExpressions(myRefExpr,scopes,true);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    PsiElement element=PsiTreeUtil.getParentOfType(myRefExpr,scopes);
    LookupItem[] items=collectItems();
    ReferenceNameExpression refExpr=new ReferenceNameExpression(items,myRefExpr.getReferenceName());
    Document document=editor.getDocument();
    TemplateBuilder builder=new TemplateBuilder(element);
    for (int i=0; i < refs.length; i++) {
      PsiReferenceExpression expr=refs[i];
      if (!expr.equals(myRefExpr)) {
        builder.replaceElement(expr.getReferenceNameElement(),OTHER_VARIABLE_NAME,INPUT_VARIABLE_NAME,false);
      }
 else {
        builder.replaceElement(expr.getReferenceNameElement(),INPUT_VARIABLE_NAME,refExpr,true);
      }
    }
    final float proportion=EditorUtil.calcVerticalScrollProportion(editor);
    editor.getCaretModel().moveToOffset(element.getTextRange().getStartOffset());
    for (int i=refs.length - 1; i >= 0; i--) {
      TextRange range=refs[i].getReferenceNameElement().getTextRange();
      document.deleteString(range.getStartOffset(),range.getEndOffset());
    }
    Template template=builder.buildInlineTemplate();
    editor.getCaretModel().moveToOffset(element.getTextRange().getStartOffset());
    TemplateManager.getInstance(project).startTemplate(editor,template,new TemplateStateListener(){
      public void templateFinished(      Template template){
        TemplateState templateState=TemplateManagerImpl.getTemplateState(editor);
        int offset=templateState.getVariableRange(INPUT_VARIABLE_NAME).getEndOffset();
        editor.getCaretModel().moveToOffset(offset);
        EditorUtil.setVerticalScrollProportion(editor,proportion);
      }
    }
);
    EditorUtil.setVerticalScrollProportion(editor,proportion);
  }
}
