{
  LinkedHashSet<LookupItem> items=new LinkedHashSet<LookupItem>();
  boolean qualified=myRefExpr.getQualifierExpression() != null;
  if (!qualified && !(myRefExpr.getParent() instanceof PsiMethodCallExpression)) {
    PsiVariable[] vars=CreateFromUsageUtils.guessMatchingVariables(myRefExpr);
    for (int i=0; i < vars.length; i++) {
      LookupItemUtil.addLookupItem(items,vars[i].getName(),"");
    }
  }
 else {
class MyScopeProcessor extends BaseScopeProcessor {
      ArrayList<PsiElement> myResult=new ArrayList<PsiElement>();
      boolean myFilterMethods;
      boolean myFilterStatics=false;
      MyScopeProcessor(      PsiReferenceExpression refExpression){
        myFilterMethods=refExpression.getParent() instanceof PsiMethodCallExpression;
        PsiExpression qualifier=refExpression.getQualifierExpression();
        if (qualifier instanceof PsiReferenceExpression) {
          PsiElement e=((PsiReferenceExpression)qualifier).resolve();
          myFilterStatics=e != null && e instanceof PsiClass;
        }
 else         if (qualifier == null) {
          PsiModifierListOwner scope=PsiTreeUtil.getParentOfType(refExpression,PsiModifierListOwner.class);
          myFilterStatics=scope != null && scope.hasModifierProperty(PsiModifier.STATIC);
        }
      }
      public boolean execute(      PsiElement element,      PsiSubstitutor substitutor){
        if (element instanceof PsiNamedElement && element instanceof PsiModifierListOwner && myFilterMethods == element instanceof PsiMethod) {
          if (((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC) == myFilterStatics) {
            myResult.add(element);
          }
        }
        return true;
      }
      public PsiElement[] getVariants(){
        return myResult.toArray(new PsiElement[myResult.size()]);
      }
    }
    MyScopeProcessor processor=new MyScopeProcessor(myRefExpr);
    myRefExpr.processVariants(processor);
    final PsiElement[] variants=processor.getVariants();
    for (int i=0; i < variants.length; i++) {
      LookupItemUtil.addLookupItem(items,((PsiNamedElement)variants[i]).getName(),"");
    }
  }
  return items.toArray(new LookupItem[items.size()]);
}
