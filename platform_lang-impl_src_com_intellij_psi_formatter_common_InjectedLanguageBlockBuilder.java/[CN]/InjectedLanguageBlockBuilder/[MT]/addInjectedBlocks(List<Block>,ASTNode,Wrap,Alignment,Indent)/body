{
  final PsiFile[] injectedFile=new PsiFile[1];
  final Ref<TextRange> injectedRangeInsideHost=new Ref<TextRange>();
  final Ref<Integer> prefixLength=new Ref<Integer>();
  final Ref<Integer> suffixLength=new Ref<Integer>();
  final PsiLanguageInjectionHost.InjectedPsiVisitor injectedPsiVisitor=new PsiLanguageInjectionHost.InjectedPsiVisitor(){
    @Override public void visit(    @NotNull final PsiFile injectedPsi,    @NotNull final List<PsiLanguageInjectionHost.Shred> places){
      if (places.size() == 1) {
        final PsiLanguageInjectionHost.Shred shred=places.get(0);
        final TextRange textRange=shred.getRangeInsideHost();
        String childText;
        if ((injectionHost.getTextLength() == textRange.getEndOffset() && textRange.getStartOffset() == 0) || (canProcessFragment((childText=injectionHost.getText()).substring(0,textRange.getStartOffset()),injectionHost) && canProcessFragment(childText.substring(textRange.getEndOffset()),injectionHost))) {
          injectedFile[0]=injectedPsi;
          injectedRangeInsideHost.set(textRange);
          prefixLength.set(shred.prefix != null ? shred.prefix.length() : 0);
          suffixLength.set(shred.suffix != null ? shred.suffix.length() : 0);
        }
      }
    }
  }
;
  InjectedLanguageUtil.enumerate(injectionHost.getPsi(),injectedPsiVisitor);
  if (injectedFile[0] != null) {
    final Language childLanguage=injectedFile[0].getLanguage();
    final FormattingModelBuilder builder=LanguageFormatting.INSTANCE.forContext(childLanguage,injectionHost.getPsi());
    if (builder != null) {
      final int startOffset=injectedRangeInsideHost.get().getStartOffset();
      final int endOffset=injectedRangeInsideHost.get().getEndOffset();
      TextRange range=injectionHost.getTextRange();
      int childOffset=range.getStartOffset();
      if (startOffset != 0) {
        final ASTNode leaf=injectionHost.findLeafElementAt(startOffset - 1);
        result.add(createBlockBeforeInjection(leaf,wrap,alignment,indent,new TextRange(childOffset,childOffset + startOffset)));
      }
      addInjectedLanguageBlockWrapper(result,injectedFile[0].getNode(),indent,childOffset + startOffset,new TextRange(prefixLength.get(),injectedFile[0].getTextLength() - suffixLength.get()));
      if (endOffset != injectionHost.getTextLength()) {
        final ASTNode leaf=injectionHost.findLeafElementAt(endOffset);
        result.add(createBlockAfterInjection(leaf,wrap,alignment,indent,new TextRange(childOffset + endOffset,range.getEndOffset())));
      }
      return true;
    }
  }
  return false;
}
