{
  if (!clientEnvironment.getLocalFileReader().exists(directoryObject,clientEnvironment.getCvsFileSystem())) {
    return Collections.EMPTY_LIST;
  }
  cvsFiles.add(CvsFile.createCvsDirectory(directoryObject));
  final Set subDirectoryNames=new HashSet();
  final LocalFiles localFiles=new LocalFiles(directoryObject,clientEnvironment);
  final Collection entries=clientEnvironment.getAdminReader().getEntries(directoryObject,clientEnvironment.getCvsFileSystem());
  for (Iterator it=entries.iterator(); it.hasNext(); ) {
    final Entry entry=(Entry)it.next();
    if (entry.isDirectory()) {
      subDirectoryNames.add(entry.getFileName());
    }
 else {
      final FileObject fileObject=FileObject.createInstance(directoryObject,entry.getFileName());
      final boolean fileExists=clientEnvironment.getLocalFileReader().exists(fileObject,clientEnvironment.getCvsFileSystem());
      cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject,entry,fileExists));
      localFiles.removeFile(entry.getFileName());
    }
  }
  for (Iterator it=localFiles.getFileNames().iterator(); it.hasNext(); ) {
    final String fileName=(String)it.next();
    cvsFiles.add(CvsFile.createCvsFileForExistingFile(FileObject.createInstance(directoryObject,fileName)));
  }
  final List subDirectories=new ArrayList(subDirectoryNames.size());
  for (Iterator it=subDirectoryNames.iterator(); it.hasNext(); ) {
    final String directoryName=(String)it.next();
    subDirectories.add(DirectoryObject.createInstance(directoryObject,directoryName));
  }
  return subDirectories;
}
