{
  List<GraphElement> graphElements=cache.get(visibleRowIndex);
  if (graphElements != null) {
    return graphElements;
  }
  List<GraphElement> result=new ArrayList<GraphElement>();
  result.add(myGraph.getNode(visibleRowIndex));
  for (  Edge edge : myEdgesInRow.getEdgesInRow(visibleRowIndex)) {
    if (edgeIsVisibleInRow(edge,visibleRowIndex))     result.add(edge);
  }
  Collections.sort(result,new Comparator<GraphElement>(){
    @Override public int compare(    @NotNull GraphElement o1,    @NotNull GraphElement o2){
      int layoutIndex1=o1.getLayoutIndex();
      int layoutIndex2=o2.getLayoutIndex();
      if (layoutIndex1 != layoutIndex2)       return layoutIndex1 - layoutIndex2;
      if (o1 instanceof Node)       return 1;
      if (o2 instanceof Node)       return -1;
      if (o1 instanceof Edge && o2 instanceof Edge) {
        Edge edge1=(Edge)o1;
        Edge edge2=(Edge)o2;
        if (edge1.getUpNodeVisibleIndex() != edge2.getUpNodeVisibleIndex())         return edge1.getUpNodeVisibleIndex() - edge2.getUpNodeVisibleIndex();
 else         return edge2.getDownNodeVisibleIndex() - edge1.getDownNodeVisibleIndex();
      }
      return 0;
    }
  }
);
  cache.put(visibleRowIndex,result);
  return result;
}
