{
  return new JavaElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      if (PsiUtil.getLanguageLevel(expression).isAtLeast(LanguageLevel.JDK_1_7)) {
        final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
        if (classReference != null) {
          final PsiReferenceParameterList parameterList=classReference.getParameterList();
          if (parameterList != null) {
            final PsiTypeElement[] typeElements=parameterList.getTypeParameterElements();
            if (typeElements.length > 0) {
              if (typeElements.length == 1 && typeElements[0].getType() instanceof PsiDiamondType)               return;
              holder.registerProblem(parameterList,"Redundant type argument #ref #loc",new LocalQuickFix(){
                @NotNull @Override public String getName(){
                  return "Replace with <>";
                }
                @NotNull @Override public String getFamilyName(){
                  return getName();
                }
                @Override public void applyFix(                @NotNull Project project,                @NotNull ProblemDescriptor descriptor){
                  final PsiElement psiElement=descriptor.getPsiElement();
                  if (psiElement instanceof PsiReferenceParameterList) {
                    final PsiTypeElement[] parameterElements=((PsiReferenceParameterList)psiElement).getTypeParameterElements();
                    psiElement.deleteChildRange(parameterElements[0],parameterElements[parameterElements.length - 1]);
                  }
                }
              }
);
            }
          }
        }
      }
    }
  }
;
}
