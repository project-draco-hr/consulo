{
  final String actionName=getText().substring(PREFIX.length()).trim();
  final ActionManager am=ActionManager.getInstance();
  final AnAction targetAction=am.getAction(actionName);
  if (targetAction == null) {
    dumpError(context,"Unknown action: " + actionName);
    return new ActionCallback.Rejected();
  }
  if (!context.isUseDirectActionCall()) {
    final Shortcut[] sc=KeymapManager.getInstance().getActiveKeymap().getShortcuts(actionName);
    KeyStroke stroke=null;
    for (    Shortcut each : sc) {
      if (each instanceof KeyboardShortcut) {
        final KeyboardShortcut ks=(KeyboardShortcut)each;
        final KeyStroke first=ks.getFirstKeyStroke();
        final KeyStroke second=ks.getSecondKeyStroke();
        if (first != null && second == null) {
          stroke=KeyStroke.getKeyStroke(first.getKeyCode(),first.getModifiers(),false);
          break;
        }
      }
    }
    if (stroke != null) {
      final ActionCallback result=new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"),"Timed out calling action id=" + actionName,new Throwable(),true){
        @Override protected void dumpError(){
          context.error(getMessage(),getLine());
        }
      }
;
      context.message("Invoking action via shortcut: " + stroke.toString(),getLine());
      final KeyStroke finalStroke=stroke;
      IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable(){
        @Override public void run(){
          final Ref<AnActionListener> listener=new Ref<AnActionListener>();
          listener.set(new AnActionListener.Adapter(){
            @Override public void beforeActionPerformed(            final AnAction action,            DataContext dataContext,            AnActionEvent event){
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  if (context.isDisposed()) {
                    am.removeAnActionListener(listener.get());
                    return;
                  }
                  if (targetAction.equals(action)) {
                    context.message("Performed action: " + actionName,context.getCurrentLine());
                    am.removeAnActionListener(listener.get());
                    result.setDone();
                  }
                }
              }
);
            }
          }
);
          am.addAnActionListener(listener.get());
          context.runPooledThread(new Runnable(){
            @Override public void run(){
              type(context.getRobot(),finalStroke);
            }
          }
);
        }
      }
);
      return result;
    }
  }
  final InputEvent input=getInputEvent(actionName);
  final ActionCallback result=new ActionCallback();
  context.getRobot().delay(Registry.intValue("actionSystem.playback.delay"));
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      am.tryToExecute(targetAction,input,null,null,false).doWhenProcessed(new Runnable(){
        @Override public void run(){
          result.setDone();
        }
      }
);
    }
  }
);
  return result;
}
