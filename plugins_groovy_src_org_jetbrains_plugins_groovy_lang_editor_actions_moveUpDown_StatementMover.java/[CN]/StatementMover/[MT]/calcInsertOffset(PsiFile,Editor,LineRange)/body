{
  int line=isDown ? range.endLine + 1 : range.startLine - 1;
  int startLine=isDown ? range.endLine : range.startLine - 1;
  if (line < 0 || startLine < 0)   return false;
  while (true) {
    final int offset=editor.logicalPositionToOffset(new LogicalPosition(line,0));
    PsiElement element=firstNonWhiteElement(offset,file,true);
    while (element != null && !(element instanceof PsiFile)) {
      if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {
        boolean found=false;
        if ((element instanceof GrStatement || element instanceof PsiComment) && statementCanBePlacedAlong(element)) {
          found=true;
          if (!(element.getParent() instanceof GrCodeBlock)) {
          }
        }
 else         if (element.getNode() != null && element.getNode().getElementType() == GroovyTokenTypes.mRCURLY) {
          found=true;
        }
        if (found) {
          toMove=range;
          int endLine=line;
          if (startLine > endLine) {
            int tmp=endLine;
            endLine=startLine;
            startLine=tmp;
          }
          toMove2=isDown ? new LineRange(startLine,endLine) : new LineRange(startLine,endLine + 1);
          return true;
        }
      }
      element=element.getParent();
    }
    line+=isDown ? 1 : -1;
    if (line == 0 || line >= editor.getDocument().getLineCount()) {
      return false;
    }
  }
}
