{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.kFOR);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {
    marker.done(FOR_STATEMENT);
    return true;
  }
  if (!ForStatement.forClauseParse(builder,this)) {
    builder.error(GroovyBundle.message("for.clause.expected"));
    marker.done(FOR_STATEMENT);
    return true;
  }
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"))) {
    while (ParserUtils.getToken(builder,mNLS)) {
    }
    marker.done(FOR_STATEMENT);
    return true;
  }
  PsiBuilder.Marker warn=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (parseExtendedStatement(builder)) {
    warn.rollbackTo();
    marker.done(FOR_STATEMENT);
    return true;
  }
  if (!parseStatement(builder,true)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("expression.expected"));
    marker.done(FOR_STATEMENT);
    return true;
  }
 else {
    warn.drop();
    marker.done(FOR_STATEMENT);
    return true;
  }
}
