{
  PsiBuilder.Marker declMarker=builder.mark();
  boolean modifiersParsed=Modifiers.parse(builder,this);
  if (kIMPORT == builder.getTokenType()) {
    final PsiBuilder.Marker impMarker=declMarker.precede();
    ImportStatement.parseAfterModifiers(builder);
    declMarker.done(IMPORT_STATEMENT);
    impMarker.error(GroovyBundle.message("import.not.allowed"));
    return true;
  }
  if (isTypeDefinitionStart(builder)) {
    final IElementType tdType=TypeDefinition.parseAfterModifiers(builder,this);
    if (tdType != WRONGWAY) {
      declMarker.done(tdType);
    }
 else {
      builder.error(GroovyBundle.message("identifier.expected"));
      declMarker.drop();
    }
    return true;
  }
  if (isInClass && parseInitializer(builder)) {
    declMarker.done(CLASS_INITIALIZER);
    return true;
  }
  final IElementType declType=Declaration.parseAfterModifiers(builder,isInClass,isInAnnotation,typeDefinitionName,this,modifiersParsed);
  if (declType != WRONGWAY) {
    if (declType != null) {
      declMarker.done(declType);
    }
 else {
      declMarker.drop();
    }
    return true;
  }
  if (modifiersParsed) {
    declMarker.drop();
    builder.error(GroovyBundle.message("identifier.expected"));
    return true;
  }
  declMarker.rollbackTo();
  return false;
}
