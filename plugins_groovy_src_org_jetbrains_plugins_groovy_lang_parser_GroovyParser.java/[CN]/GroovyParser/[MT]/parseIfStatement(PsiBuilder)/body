{
  PsiBuilder.Marker ifStmtMarker=builder.mark();
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.kIF)) {
    ifStmtMarker.rollbackTo();
    builder.error(GroovyBundle.message("if.expected"));
    return false;
  }
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {
    ifStmtMarker.drop();
    return false;
  }
  if (!ConditionalExpression.parse(builder,this)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"))) {
    while (!builder.eof() && !GroovyTokenTypes.mNLS.equals(builder.getTokenType()) && !GroovyTokenTypes.mRPAREN.equals(builder.getTokenType())) {
      builder.advanceLexer();
      builder.error(GroovyBundle.message("rparen.expected"));
    }
    if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN)) {
      ifStmtMarker.done(GroovyElementTypes.IF_STATEMENT);
      return true;
    }
  }
  PsiBuilder.Marker warn=builder.mark();
  if (builder.getTokenType() == GroovyTokenTypes.mNLS) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  }
  if (!parseStatement(builder,true) && !GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("expression.expected"));
    ifStmtMarker.done(GroovyElementTypes.IF_STATEMENT);
    return true;
  }
 else {
    warn.drop();
  }
  PsiBuilder.Marker rb=builder.mark();
  if (GroovyTokenTypes.kELSE.equals(builder.getTokenType()) || (Separators.parse(builder) && builder.getTokenType() == GroovyTokenTypes.kELSE)) {
    rb.drop();
    ParserUtils.getToken(builder,GroovyTokenTypes.kELSE);
    warn=builder.mark();
    if (builder.getTokenType() == GroovyTokenTypes.mNLS) {
      ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    }
    if (!parseStatement(builder,true) && !GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {
      warn.rollbackTo();
      builder.error(GroovyBundle.message("expression.expected"));
      ifStmtMarker.done(GroovyElementTypes.IF_STATEMENT);
      return true;
    }
 else {
      warn.drop();
    }
    ifStmtMarker.done(GroovyElementTypes.IF_STATEMENT);
    return true;
  }
 else {
    rb.rollbackTo();
    ifStmtMarker.done(GroovyElementTypes.IF_STATEMENT);
    return true;
  }
}
