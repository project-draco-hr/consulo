{
  PsiBuilder.Marker ifStmtMarker=builder.mark();
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.kIF)) {
    ifStmtMarker.rollbackTo();
    builder.error(GroovyBundle.message("if.expected"));
    return false;
  }
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {
    ifStmtMarker.done(IF_STATEMENT);
    return true;
  }
  if (!ConditionalExpression.parse(builder,this)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"));
  if (!parseBranch(builder)) {
    ifStmtMarker.done(IF_STATEMENT);
    return true;
  }
  PsiBuilder.Marker rb=builder.mark();
  if (GroovyTokenTypes.kELSE.equals(builder.getTokenType()) || (Separators.parse(builder) && builder.getTokenType() == GroovyTokenTypes.kELSE)) {
    rb.drop();
    ParserUtils.getToken(builder,GroovyTokenTypes.kELSE);
    parseBranch(builder);
  }
 else {
    rb.rollbackTo();
  }
  ifStmtMarker.done(IF_STATEMENT);
  return true;
}
