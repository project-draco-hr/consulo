{
  final GitBranchesSearcher searcher=new GitBranchesSearcher(myProject,vcsRoot,true);
  final GitBranch target=searcher.getRemote();
  if (searcher.getLocal() == null || target == null) {
    return revisions;
  }
  final Collection<U> result=new ArrayList<U>(revisions);
  for (Iterator<U> iterator=result.iterator(); iterator.hasNext(); ) {
    final U t=iterator.next();
    final LinkedList<String> branches=new LinkedList<String>();
    final VcsRevisionNumber revision=GitHistoryUtils.getCurrentRevision(myProject,filePatchConvertor.convert(t));
    GitBranch.listAsStrings(myProject,vcsRoot,true,false,branches,revision == null ? convertor.convert(t).asString() : revision.asString());
    if (branches.contains(target.getName())) {
      iterator.remove();
    }
  }
  return result;
}
