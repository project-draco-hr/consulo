{
  final GitBranchesSearcher searcher=new GitBranchesSearcher(myProject,vcsRoot,true);
  final GitBranch target=searcher.getRemote();
  if (searcher.getLocal() == null || target == null) {
    return new ArrayList<U>(revisions);
  }
  final Collection<U> result=new ArrayList<U>(revisions);
  for (Iterator<U> iterator=result.iterator(); iterator.hasNext(); ) {
    final U t=iterator.next();
    final LinkedList<String> branches=new LinkedList<String>();
    final VcsRevisionNumber revision=GitHistoryUtils.getCurrentRevision(myProject,filePatchConvertor.convert(t));
    if (revision == null)     continue;
    final String containingCommit=revision.asString();
    try {
      GitBranch.listAsStrings(myProject,vcsRoot,true,false,branches,containingCommit);
    }
 catch (    VcsException e) {
      LOG.info("containingCommit = '" + containingCommit + "', current revision = '"+ (revision == null ? null : revision.asString())+ "', file = "+ filePatchConvertor.convert(t).getPath());
      LOG.info(e);
      throw e;
    }
    if (branches.contains(target.getName())) {
      iterator.remove();
    }
  }
  return result;
}
