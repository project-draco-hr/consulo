{
  final Set<GitBranch> usedBranches=new HashSet<GitBranch>();
  final GitBranch currentBranch=GitBranch.current(myProject,vcsRoot);
  if (currentBranch == null)   return Collections.emptyList();
  usedBranches.add(currentBranch);
  GitBranch remoteBranch=currentBranch;
  while (true) {
    remoteBranch=remoteBranch.tracked(myProject,vcsRoot);
    if (remoteBranch == null)     return Collections.emptyList();
    if ((!findRemote) || remoteBranch.isRemote())     break;
    if (usedBranches.contains(remoteBranch))     return Collections.emptyList();
    usedBranches.add(remoteBranch);
  }
  final GitBranch finalRemoteBranch=remoteBranch;
  return GitUtil.getLocalCommittedChanges(myProject,vcsRoot,new Consumer<GitSimpleHandler>(){
    public void consume(    final GitSimpleHandler handler){
      handler.addParameters(finalRemoteBranch.getFullName() + "..HEAD");
    }
  }
);
}
