{
  LOG.debug("getOutgoingChanges root: " + vcsRoot.getPath());
  final GitBranchesSearcher searcher=new GitBranchesSearcher(myProject,vcsRoot,findRemote);
  if (searcher.getLocal() == null || searcher.getRemote() == null) {
    return new Pair<VcsRevisionNumber,List<CommittedChangeList>>(null,Collections.<CommittedChangeList>emptyList());
  }
  final GitRevisionNumber base=searcher.getLocal().getMergeBase(myProject,vcsRoot,searcher.getRemote());
  if (base == null) {
    return new Pair<VcsRevisionNumber,List<CommittedChangeList>>(null,Collections.<CommittedChangeList>emptyList());
  }
  final List<CommittedChangeList> lists=GitUtil.getLocalCommittedChanges(myProject,vcsRoot,new Consumer<GitSimpleHandler>(){
    public void consume(    final GitSimpleHandler handler){
      handler.addParameters(base.asString() + "..HEAD");
    }
  }
);
  return new Pair<VcsRevisionNumber,List<CommittedChangeList>>(base,lists);
}
