{
  LOG.assertTrue(!myInitialized);
  myDisposed=false;
  myInitialized=true;
  myRootManager=new RootManager(this,myProjectRootManager);
  PsiManagerConfiguration configuration=PsiManagerConfiguration.getInstance();
  myUseRepository=configuration.REPOSITORY_ENABLED;
  myProjectFileIndex=myProjectRootManager.getFileIndex();
  Runnable runnable=new Runnable(){
    public void run(){
synchronized (PsiLock.LOCK) {
        myCachedObjectClassMap=null;
      }
    }
  }
;
  myManager.registerRunnableToRunOnChange(runnable);
  myVirtualFileListener=new MyVirtualFileListener();
  myVirtualFileManager.addVirtualFileListener(myVirtualFileListener);
  myConnection.subscribe(AppTopics.FILE_TYPES,new FileTypeListener(){
    public void beforeFileTypesChanged(    FileTypeEvent event){
    }
    public void fileTypesChanged(    FileTypeEvent e){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          PsiTreeChangeEventImpl event=new PsiTreeChangeEventImpl(myManager);
          event.setPropertyName(PsiTreeChangeEvent.PROP_FILE_TYPES);
          myManager.beforePropertyChange(event);
          removeInvalidFilesAndDirs(true);
          event=new PsiTreeChangeEventImpl(myManager);
          event.setPropertyName(PsiTreeChangeEvent.PROP_FILE_TYPES);
          myManager.propertyChanged(event);
        }
      }
);
    }
  }
);
  myConnection.subscribe(ProjectTopics.PROJECT_ROOTS,new MyModuleRootListener());
  myConnection.subscribe(AppTopics.FILE_DOCUMENT_SYNC,new MyFileDocumentManagerAdapter());
}
