{
  if (!myUseRepository) {
    return findClassWithoutRepository(qName);
  }
  if (!myInitialized) {
    LOG.error("Access to psi files should be performed only after startup activity");
    return null;
  }
  LOG.assertTrue(!myDisposed);
synchronized (PsiLock.LOCK) {
    if ("java.lang.Object".equals(qName)) {
      if (myCachedObjectClassMap == null) {
        myCachedObjectClassMap=new HashMap<GlobalSearchScope,PsiClass>();
        Module[] modules=ModuleManager.getInstance(myManager.getProject()).getModules();
        for (        Module aModule : modules) {
          GlobalSearchScope moduleScope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(aModule);
          PsiClass objectClass=_findClass(qName,moduleScope);
          myCachedObjectClassMap.put(moduleScope,objectClass);
        }
        GlobalSearchScope allScope=GlobalSearchScope.allScope(myManager.getProject());
        PsiClass objectClass=_findClass(qName,allScope);
        myCachedObjectClassMap.put(allScope,objectClass);
      }
      final PsiClass cachedClass=myCachedObjectClassMap.get(scope);
      return cachedClass == null ? _findClass(qName,scope) : cachedClass;
    }
    return _findClass(qName,scope);
  }
}
