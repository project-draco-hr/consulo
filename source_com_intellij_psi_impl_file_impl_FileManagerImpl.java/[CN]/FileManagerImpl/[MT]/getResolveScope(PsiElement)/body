{
  VirtualFile vFile;
  if (element instanceof PsiDirectory) {
    vFile=((PsiDirectory)element).getVirtualFile();
  }
 else {
    final PsiFile contextFile=ResolveUtil.getContextFile(element);
    if (contextFile == null || contextFile instanceof XmlFile) {
      return GlobalSearchScope.allScope(myManager.getProject());
    }
    vFile=contextFile.getVirtualFile();
    if (vFile == null) {
      PsiFile originalFile=contextFile.getOriginalFile();
      if (originalFile != null) {
        vFile=originalFile.getVirtualFile();
      }
    }
  }
  if (vFile == null) {
    return GlobalSearchScope.allScope(myManager.getProject());
  }
  ProjectFileIndex projectFileIndex=myProjectRootManager.getFileIndex();
  Module module=projectFileIndex.getModuleForFile(vFile);
  if (module != null) {
    boolean includeTests=projectFileIndex.isInTestSourceContent(vFile) || !projectFileIndex.isContentJavaSourceFile(vFile);
    return GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,includeTests);
  }
 else {
    GlobalSearchScope allInclusiveModuleScope=null;
    List<OrderEntry> orderEntries=projectFileIndex.getOrderEntriesForFile(vFile);
    for (    OrderEntry entry : orderEntries) {
      if (entry instanceof LibraryOrderEntry || entry instanceof JdkOrderEntry) {
        Module ownerModule=entry.getOwnerModule();
        final GlobalSearchScope moduleScope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(ownerModule);
        if (allInclusiveModuleScope == null) {
          allInclusiveModuleScope=moduleScope;
        }
 else {
          allInclusiveModuleScope=allInclusiveModuleScope.uniteWith(moduleScope);
        }
      }
    }
    if (allInclusiveModuleScope == null) {
      allInclusiveModuleScope=GlobalSearchScope.allScope(myManager.getProject());
    }
    return new LibrariesOnlyScope(allInclusiveModuleScope);
  }
}
