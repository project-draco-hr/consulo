{
  VirtualFile vFile;
  if (element instanceof PsiDirectory) {
    vFile=((PsiDirectory)element).getVirtualFile();
  }
 else {
    final PsiFile contextFile=ResolveUtil.getContextFile(element);
    if (contextFile == null || contextFile instanceof XmlFile) {
      return GlobalSearchScope.allScope(myManager.getProject());
    }
    vFile=contextFile.getVirtualFile();
    if (vFile == null) {
      PsiFile originalFile=contextFile.getOriginalFile();
      if (originalFile != null) {
        vFile=originalFile.getVirtualFile();
      }
    }
  }
  if (vFile == null) {
    return GlobalSearchScope.allScope(myManager.getProject());
  }
  final ProjectFileIndex projectFileIndex=myProjectRootManager.getFileIndex();
  Module module=projectFileIndex.getModuleForFile(vFile);
  if (module != null) {
    boolean includeTests=projectFileIndex.isInTestSourceContent(vFile) || !projectFileIndex.isContentJavaSourceFile(vFile);
    return GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,includeTests);
  }
 else {
    final GlobalSearchScope projectScope=GlobalSearchScope.allScope(myManager.getProject());
    final VirtualFile classRoot=projectFileIndex.getClassRootForFile(vFile);
    final GlobalSearchScope scope=new GlobalSearchScope(){
      public int compare(      VirtualFile file1,      VirtualFile file2){
        final VirtualFile classRootForFile1=projectFileIndex.getClassRootForFile(file1);
        final VirtualFile classRootForFile2=projectFileIndex.getClassRootForFile(file2);
        if (classRootForFile1 != classRootForFile2) {
          if (classRootForFile1 == classRoot)           return 1;
          if (classRootForFile2 == classRoot)           return -1;
        }
        return projectScope.compare(file1,file2);
      }
      public boolean contains(      VirtualFile file){
        return projectScope.contains(file);
      }
      public boolean isSearchInLibraries(){
        return true;
      }
      public boolean isSearchInModuleContent(      Module aModule){
        return false;
      }
    }
;
    return scope;
  }
}
