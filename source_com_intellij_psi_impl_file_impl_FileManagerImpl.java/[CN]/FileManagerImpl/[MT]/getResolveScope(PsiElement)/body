{
  final ProgressManager progressManager=ProgressManager.getInstance();
  progressManager.checkCanceled();
  VirtualFile vFile;
  final Project project=myManager.getProject();
  if (element instanceof PsiDirectory) {
    vFile=((PsiDirectory)element).getVirtualFile();
  }
 else {
    final PsiFile contextFile=ResolveUtil.getContextFile(element);
    if (contextFile == null || contextFile instanceof XmlFile) {
      return GlobalSearchScope.allScope(project);
    }
    vFile=contextFile.getVirtualFile();
    if (vFile == null) {
      PsiFile originalFile=contextFile.getOriginalFile();
      if (originalFile != null) {
        vFile=originalFile.getVirtualFile();
      }
    }
  }
  if (vFile == null) {
    return GlobalSearchScope.allScope(project);
  }
  ProjectFileIndex projectFileIndex=myProjectRootManager.getFileIndex();
  Module module=projectFileIndex.getModuleForFile(vFile);
  if (module != null) {
    boolean includeTests=projectFileIndex.isInTestSourceContent(vFile) || !projectFileIndex.isContentJavaSourceFile(vFile);
    return GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,includeTests);
  }
 else {
    List<Module> modulesLibraryUsedIn=new ArrayList<Module>();
    List<OrderEntry> orderEntries=projectFileIndex.getOrderEntriesForFile(vFile);
    for (    OrderEntry entry : orderEntries) {
      progressManager.checkCanceled();
      if (entry instanceof JdkOrderEntry) {
        return ((ProjectRootManagerEx)myProjectRootManager).getScopeForJdk((JdkOrderEntry)entry);
      }
      if (entry instanceof LibraryOrderEntry) {
        Module ownerModule=entry.getOwnerModule();
        modulesLibraryUsedIn.add(ownerModule);
      }
    }
    return ((ProjectRootManagerEx)myProjectRootManager).getScopeForLibraryUsedIn(modulesLibraryUsedIn);
  }
}
