{
  super(component,true);
  if (!isSupported(type))   throw new IllegalArgumentException("Type is invalid " + type);
  myProject=project;
  myType=type;
  myOtherCheckers=new HashSet<ConditionChecker>(otherCheckersSameType);
  myOtherCheckers.addAll(otherCheckers);
  myPreviouslySelectedChecker=previouslySelectedChecker;
  if (myPreviouslySelectedChecker != null)   myOtherCheckers.remove(myPreviouslySelectedChecker);
  PsiClass psiClass=null;
  PsiMethod psiMethod=null;
  PsiParameter psiParameter=null;
  if (previouslySelectedChecker != null) {
    psiMethod=previouslySelectedChecker.getPsiMethod();
    psiClass=psiMethod.getContainingClass();
    psiParameter=previouslySelectedChecker.getPsiParameter();
  }
  classField=new ClassField(myProject,psiClass);
  methodDropDown=new MethodDropDown(psiClass,psiMethod,myType,MethodDropDown.buildModel());
  parameterDropDown=new ParameterDropDown(psiMethod,psiParameter,ParameterDropDown.buildModel(),myType);
  classField.addPropertyChangeListener(methodDropDown);
  classField.addPropertyChangeListener(parameterDropDown);
  classField.addPropertyChangeListener(this);
  methodDropDown.addItemListener(parameterDropDown);
  methodDropDown.addItemListener(this);
  parameterDropDown.addItemListener(this);
  init();
  checkOkActionEnable();
  setTitle(initTitle(type));
}
