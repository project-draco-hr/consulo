{
  super(component,true);
  if (!isSupported(type))   throw new IllegalArgumentException("Type is invalid " + type);
  myProject=project;
  myType=type;
  myOtherCheckers=new HashSet<ConditionChecker>(otherCheckersSameType);
  myOtherCheckers.addAll(otherCheckers);
  myPreviouslySelectedChecker=previouslySelectedChecker;
  if (myPreviouslySelectedChecker != null)   myOtherCheckers.remove(myPreviouslySelectedChecker);
  PsiClass psiClass=null;
  PsiMethod psiMethod=null;
  PsiParameter psiParameter=null;
  if (previouslySelectedChecker != null) {
    psiClass=JavaPsiFacade.getInstance(myProject).findClass(previouslySelectedChecker.getClassName(),GlobalSearchScope.allScope(myProject));
    if (psiClass != null) {
      for (      PsiMethod method : psiClass.findMethodsByName(previouslySelectedChecker.getMethodName(),true)) {
        if (previouslySelectedChecker.equals(buildParameterClassListFromPsiMethod(method))) {
          psiMethod=method;
          break;
        }
      }
    }
    if (psiMethod != null) {
      PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
      if (parameters.length - 1 >= previouslySelectedChecker.getCheckedParameterIndex()) {
        psiParameter=parameters[previouslySelectedChecker.getCheckedParameterIndex()];
      }
    }
  }
  if (psiClass == null || psiMethod == null || psiParameter == null) {
    psiClass=null;
    psiMethod=null;
    psiParameter=null;
  }
  classField=new ClassField(myProject,psiClass);
  methodDropDown=new MethodDropDown(psiClass,psiMethod,myType,MethodDropDown.buildModel());
  parameterDropDown=new ParameterDropDown(psiMethod,psiParameter,ParameterDropDown.buildModel(),myType);
  classField.addPropertyChangeListener(methodDropDown);
  classField.addPropertyChangeListener(parameterDropDown);
  classField.addPropertyChangeListener(this);
  methodDropDown.addItemListener(parameterDropDown);
  methodDropDown.addItemListener(this);
  parameterDropDown.addItemListener(this);
  init();
  checkOkActionEnable();
  setTitle(initTitle(type));
}
