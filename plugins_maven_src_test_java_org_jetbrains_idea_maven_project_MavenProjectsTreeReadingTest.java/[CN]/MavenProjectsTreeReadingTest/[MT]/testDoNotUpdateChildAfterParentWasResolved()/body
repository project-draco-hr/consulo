{
  createProjectPom("<groupId>test</groupId>" + "<artifactId>parent</artifactId>" + "<version>1</version>");
  VirtualFile child=createModulePom("child","<groupId>test</groupId>" + "<artifactId>child</artifactId>" + "<version>1</version>"+ "<parent>"+ "  <groupId>test</groupId>"+ "  <artifactId>parent</artifactId>"+ "  <version>1</version>"+ "</parent>");
  MyLoggingListener listener=new MyLoggingListener();
  myTree.addListener(listener);
  updateAll(myProjectPom,child);
  MavenProject parentProject=myTree.findProject(myProjectPom);
  MavenEmbeddersManager embeddersManager=new MavenEmbeddersManager(myProject);
  try {
    final NativeMavenProjectHolder[] nativeProject=new NativeMavenProjectHolder[1];
    myTree.addListener(new MavenProjectsTree.ListenerAdapter(){
      @Override public void projectResolved(      Pair<MavenProject,MavenProjectChanges> projectWithChanges,      NativeMavenProjectHolder nativeMavenProject){
        nativeProject[0]=nativeMavenProject;
      }
    }
);
    myTree.resolve(myProject,parentProject,getMavenGeneralSettings(),embeddersManager,NULL_MAVEN_CONSOLE,EMPTY_MAVEN_PROCESS);
    myTree.resolvePlugins(parentProject,nativeProject[0],embeddersManager,NULL_MAVEN_CONSOLE,EMPTY_MAVEN_PROCESS);
    myTree.resolveFolders(parentProject,getMavenImporterSettings(),embeddersManager,NULL_MAVEN_CONSOLE,EMPTY_MAVEN_PROCESS);
  }
  finally {
    embeddersManager.releaseInTests();
  }
  assertEquals("updated: parent child deleted: <none> resolved: parent plugins: parent folders: parent ",listener.log);
  myTree.updateAll(false,getMavenGeneralSettings(),EMPTY_MAVEN_PROCESS);
  assertEquals("updated: parent child deleted: <none> resolved: parent plugins: parent folders: parent ",listener.log);
}
