{
  createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<packaging>pom</packaging>"+ "<modules>"+ "  <module>m</module>"+ "</modules>");
  VirtualFile m=createModulePom("m","<groupId>test</groupId>" + "<artifactId>m</artifactId>" + "<version>1</version>");
  updateAll(myProjectPom);
  List<MavenProject> roots=myTree.getRootProjects();
  MavenProject parentNode=roots.get(0);
  MavenProject childNode=myTree.getModules(roots.get(0)).get(0);
  createProjectPom("<groupId>test</groupId>" + "<artifactId>project1</artifactId>" + "<version>1</version>"+ "<packaging>pom</packaging>"+ "<modules>"+ "  <module>m</module>"+ "</modules>");
  createModulePom("m","<groupId>test</groupId>" + "<artifactId>m1</artifactId>" + "<version>1</version>");
  updateAll(myProjectPom);
  roots=myTree.getRootProjects();
  assertEquals(1,roots.size());
  assertEquals(1,myTree.getModules(roots.get(0)).size());
  MavenProject parentNode1=roots.get(0);
  MavenProject childNode1=myTree.getModules(roots.get(0)).get(0);
  assertSame(parentNode,parentNode1);
  assertSame(childNode,childNode1);
  assertEquals("project1",parentNode1.getMavenId().getArtifactId());
  assertEquals("m1",childNode1.getMavenId().getArtifactId());
}
