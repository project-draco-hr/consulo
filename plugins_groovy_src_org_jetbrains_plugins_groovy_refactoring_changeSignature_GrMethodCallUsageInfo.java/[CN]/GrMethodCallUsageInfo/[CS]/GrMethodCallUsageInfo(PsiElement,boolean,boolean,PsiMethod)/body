{
  super(element);
  final GroovyResolveResult resolveResult=resolveMethod(element);
  if (resolveResult == null || resolveResult.getElement() == null) {
    mySubstitutor=PsiSubstitutor.EMPTY;
  }
 else   if (resolveResult.getElement() instanceof PsiMethod) {
    PsiMethod resolved=(PsiMethod)resolveResult.getElement();
    mySubstitutor=resolveResult.getSubstitutor();
    if (!element.getManager().areElementsEquivalent(method,resolved)) {
      final PsiClass baseClass=method.getContainingClass();
      final PsiClass derivedClass=resolved.getContainingClass();
      if (baseClass != null && derivedClass != null && InheritanceUtil.isInheritorOrSelf(derivedClass,baseClass,true)) {
        final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,derivedClass,mySubstitutor);
        final MethodSignature superMethodSignature=method.getSignature(superClassSubstitutor);
        final MethodSignature methodSignature=resolved.getSignature(PsiSubstitutor.EMPTY);
        final PsiSubstitutor superMethodSignatureSubstitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(methodSignature,superMethodSignature);
        mySubstitutor=TypesUtil.composeSubstitutors(superMethodSignatureSubstitutor,mySubstitutor);
      }
    }
  }
  GrClosureSignature signature=GrClosureSignatureUtil.createSignature(method,mySubstitutor);
  myToChangeArguments=isToChangeArguments;
  myToCatchExceptions=isToCatchExceptions;
  final GrCall call=GroovyRefactoringUtil.getCallExpressionByMethodReference(element);
  if (call == null) {
    myMapToArguments=GrClosureSignatureUtil.ArgInfo.empty_array();
  }
 else {
    myMapToArguments=GrClosureSignatureUtil.mapParametersToArguments(signature,call.getNamedArguments(),call.getExpressionArguments(),call,call.getClosureArguments(),false,false);
  }
}
