{
  for (  PsiAnnotation annotation : parameter.getModifierList().getAnnotations()) {
    builder.append(annotation.getText()).append(' ');
  }
  PsiType type=parameter.getTypeGroovy();
  type=substitutor.substitute(type);
  if (typePresentation == TypePresentation.LINK) {
    GroovyDocumentationProvider.appendTypeString(builder,type,parameter);
    builder.append(' ').append(parameter.getName());
    return;
  }
  if (type != null) {
    if (typePresentation == TypePresentation.PRESENTABLE) {
      builder.append(type.getPresentableText()).append(' ').append(parameter.getName());
    }
 else     if (typePresentation == TypePresentation.CANONICAL) {
      builder.append(type.getCanonicalText()).append(' ').append(parameter.getName());
    }
  }
 else {
    builder.append(parameter.getName());
    final Set<String> structural=Collections.synchronizedSet(new LinkedHashSet<String>());
    ReferencesSearch.search(parameter).forEach(new Processor<PsiReference>(){
      public boolean process(      PsiReference ref){
        PsiElement parent=ref.getElement().getParent();
        if (parent instanceof GrReferenceExpression) {
          if (structural.size() >= CONSTRAINTS_NUMBER) {
            structural.add("...");
            return false;
          }
          StringBuilder builder1=new StringBuilder();
          builder1.append(((GrReferenceElement)parent).getReferenceName());
          PsiType[] argTypes=PsiUtil.getArgumentTypes(parent,true);
          if (argTypes != null) {
            builder1.append("(");
            if (argTypes.length > 0) {
              builder1.append(argTypes.length);
              if (argTypes.length == 1) {
                builder1.append(" arg");
              }
 else {
                builder1.append(" args");
              }
            }
            builder1.append(')');
          }
          structural.add(builder1.toString());
        }
        return true;
      }
    }
);
    if (!structural.isEmpty()) {
      builder.append(".");
      String[] array=ArrayUtil.toStringArray(structural);
      if (array.length > 1)       builder.append("[");
      for (int i=0; i < array.length; i++) {
        if (i > 0)         builder.append(", ");
        builder.append(array[i]);
      }
      if (array.length > 1)       builder.append("]");
    }
  }
}
