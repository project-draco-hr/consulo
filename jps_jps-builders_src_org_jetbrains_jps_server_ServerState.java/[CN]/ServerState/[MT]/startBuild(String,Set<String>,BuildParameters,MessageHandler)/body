{
  final String projectName=getProjectName(projectPath);
  BuildType buildType=params.buildType;
  ProjectDescriptor pd;
synchronized (myConfigurationLock) {
    pd=myProjects.get(projectPath);
    if (pd == null) {
      final Project project=loadProject(projectPath,params);
      final FSState fsState=new FSState();
      pd=new ProjectDescriptor(projectName,project,fsState,new ProjectTimestamps(projectName));
      myProjects.put(projectPath,pd);
    }
    pd.incUsageCounter();
  }
  final Project project=pd.project;
  try {
    final List<Module> toCompile=new ArrayList<Module>();
    if (modules != null && modules.size() > 0) {
      for (      Module m : project.getModules().values()) {
        if (modules.contains(m.getName())) {
          toCompile.add(m);
        }
      }
    }
 else {
      toCompile.addAll(project.getModules().values());
    }
    final CompileScope compileScope=new CompileScope(project,toCompile);
    final IncProjectBuilder builder=new IncProjectBuilder(pd,BuilderRegistry.getInstance());
    if (msgHandler != null) {
      builder.addMessageHandler(msgHandler);
    }
switch (buildType) {
case PROJECT_REBUILD:
      builder.build(compileScope,false,true);
    break;
case FORCED_COMPILATION:
  builder.build(compileScope,false,false);
break;
case MAKE:
builder.build(compileScope,true,false);
break;
case CLEAN:
break;
}
}
  finally {
pd.release();
clearZipIndexCache();
}
}
