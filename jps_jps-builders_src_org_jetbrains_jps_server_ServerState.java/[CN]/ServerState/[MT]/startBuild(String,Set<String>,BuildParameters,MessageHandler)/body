{
  final String projectName=getProjectName(projectPath);
  Project project;
  Mappings mappings;
synchronized (myConfigurationLock) {
    project=myProjects.get(projectPath);
    if (project == null) {
      project=loadProject(projectPath,params);
      myProjects.put(projectPath,project);
    }
    mappings=myProjectMappings.get(projectPath);
    if (mappings == null) {
      final File mappingsStorageFile=Paths.getMappingsStorageFile(projectName);
      try {
        final BufferedReader reader=new BufferedReader(new InputStreamReader(new DeflaterInputStream(new FileInputStream(mappingsStorageFile))));
        try {
          mappings=new Mappings(reader);
        }
  finally {
          reader.close();
        }
      }
 catch (      FileNotFoundException e) {
        mappings=new Mappings();
      }
catch (      IOException e) {
        msgHandler.processMessage(new CompilerMessage(IncProjectBuilder.JPS_SERVER_NAME,BuildMessage.Kind.WARNING,e.getMessage()));
        mappings=new Mappings();
      }
      myProjectMappings.put(projectPath,mappings);
    }
  }
  final List<Module> toCompile=new ArrayList<Module>();
  if (modules != null && modules.size() > 0) {
    for (    Module m : project.getModules().values()) {
      if (modules.contains(m.getName())) {
        toCompile.add(m);
      }
    }
  }
 else {
    toCompile.addAll(project.getModules().values());
  }
  final CompileScope compileScope=new CompileScope(project){
    public Collection<Module> getAffectedModules(){
      return toCompile;
    }
  }
;
  final IncProjectBuilder builder=new IncProjectBuilder(projectName,project,mappings,BuilderRegistry.getInstance());
  if (msgHandler != null) {
    builder.addMessageHandler(msgHandler);
  }
switch (params.buildType) {
case REBUILD:
    builder.build(compileScope,false);
  break;
case MAKE:
builder.build(compileScope,true);
break;
case CLEAN:
break;
}
}
