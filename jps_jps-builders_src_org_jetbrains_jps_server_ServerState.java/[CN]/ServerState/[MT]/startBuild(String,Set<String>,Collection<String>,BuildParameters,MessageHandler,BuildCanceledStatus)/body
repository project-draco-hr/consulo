{
  final String projectName=getProjectName(projectPath);
  BuildType buildType=params.buildType;
  ProjectDescriptor pd;
synchronized (myConfigurationLock) {
    pd=myProjects.get(projectPath);
    if (pd == null) {
      final Project project=loadProject(projectPath,params);
      final FSState fsState=new FSState();
      final ProjectTimestamps timestamps=new ProjectTimestamps(projectName);
      final BuildDataManager dataManager=new BuildDataManager(projectName,myKeepTempCachesInMemory);
      pd=new ProjectDescriptor(projectName,project,fsState,timestamps,dataManager);
      myProjects.put(projectPath,pd);
    }
    pd.incUsageCounter();
  }
  final Project project=pd.project;
  try {
    final CompileScope compileScope=createCompilationScope(buildType,pd,modules,paths);
    final IncProjectBuilder builder=new IncProjectBuilder(pd,BuilderRegistry.getInstance(),cs);
    if (msgHandler != null) {
      builder.addMessageHandler(msgHandler);
    }
switch (buildType) {
case PROJECT_REBUILD:
      builder.build(compileScope,false,true);
    break;
case FORCED_COMPILATION:
  builder.build(compileScope,false,false);
break;
case MAKE:
builder.build(compileScope,true,false);
break;
case CLEAN:
break;
}
}
  finally {
pd.release();
clearZipIndexCache();
}
}
