{
  String toFind=model.getStringToFind();
  String toReplace=model.getStringToReplace();
  Pattern pattern;
  try {
    int flags=Pattern.MULTILINE;
    if (!model.isCaseSensitive()) {
      flags|=Pattern.CASE_INSENSITIVE;
    }
    pattern=Pattern.compile(toFind,flags);
  }
 catch (  PatternSyntaxException e) {
    return toReplace;
  }
  Matcher matcher=pattern.matcher(foundString);
  if (matcher.matches()) {
    try {
      return matcher.replaceAll(StringUtil.unescapeStringCharacters(toReplace));
    }
 catch (    Exception e) {
      throw createMalformedReplacementException(model,e);
    }
  }
 else {
    return toReplace;
  }
}
