{
  Matcher matcher=compileRegExp(model,text);
  if (model.isForward()) {
    if (!matcher.find(startOffset)) {
      return null;
    }
    if (matcher.end() > text.length()) {
      return null;
    }
  }
 else {
    int start=-1;
    while (matcher.find() && matcher.end() < startOffset) {
      start=matcher.start();
    }
    if (start < 0) {
      return null;
    }
  }
  try {
    StringBuffer replaced=new StringBuffer();
    matcher.appendReplacement(replaced,model.getStringToReplace());
    return replaced.substring(matcher.start());
  }
 catch (  Exception e) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myProject,FindBundle.message("find.replace.invalid.replacement.string",model.getStringToReplace()),FindBundle.message("find.replace.invalid.replacement.string.title"));
      }
    }
);
    return null;
  }
}
