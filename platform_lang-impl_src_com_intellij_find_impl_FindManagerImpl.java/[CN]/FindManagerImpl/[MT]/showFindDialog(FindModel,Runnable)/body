{
  final Consumer<FindModel> handler=new Consumer<FindModel>(){
    @Override public void consume(    FindModel findModel){
      String stringToFind=findModel.getStringToFind();
      if (!StringUtil.isEmpty(stringToFind)) {
        FindSettings.getInstance().addStringToFind(stringToFind);
      }
      if (!findModel.isMultipleFiles()) {
        setFindWasPerformed();
      }
      if (findModel.isReplaceState()) {
        FindSettings.getInstance().addStringToReplace(findModel.getStringToReplace());
      }
      if (findModel.isMultipleFiles() && !findModel.isProjectScope() && findModel.getDirectoryName() != null) {
        FindSettings.getInstance().addDirectory(findModel.getDirectoryName());
        myFindInProjectModel.setWithSubdirectories(findModel.isWithSubdirectories());
      }
      okHandler.run();
    }
  }
;
  if (myFindDialog == null || Disposer.isDisposed(myFindDialog.getDisposable())) {
    myFindDialog=new FindDialog(myProject,model,handler){
      @Override protected void dispose(){
        super.dispose();
        myFindDialog=null;
      }
    }
;
    myFindDialog.setModal(true);
  }
 else   if (myFindDialog.getModel().isReplaceState() != model.isReplaceState()) {
    myFindDialog.setModel(model);
    myFindDialog.setOkHandler(handler);
    return;
  }
  myFindDialog.show();
}
