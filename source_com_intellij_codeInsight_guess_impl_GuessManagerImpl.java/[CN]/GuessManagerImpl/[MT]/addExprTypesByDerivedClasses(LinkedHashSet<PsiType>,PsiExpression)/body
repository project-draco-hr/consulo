{
  PsiType type=expr.getType();
  if (!(type instanceof PsiClassType))   return;
  PsiClass refClass=PsiUtil.resolveClassInType(type);
  if (refClass == null)   return;
  PsiManager manager=PsiManager.getInstance(myProject);
  PsiSearchHelper helper=manager.getSearchHelper();
  PsiElementProcessor.CollectElementsWithLimit<PsiClass> processor=new PsiElementProcessor.CollectElementsWithLimit<PsiClass>(5);
  helper.processInheritors(processor,refClass,GlobalSearchScope.allScope(myProject),true);
  if (processor.isOverflow())   return;
  Iterator<PsiClass> iterator=processor.getCollection().iterator();
  while (iterator.hasNext()) {
    PsiClass derivedClass=iterator.next();
    if (derivedClass instanceof PsiAnonymousClass)     continue;
    PsiType derivedType=manager.getElementFactory().createType(derivedClass);
    set.add(derivedType);
  }
}
