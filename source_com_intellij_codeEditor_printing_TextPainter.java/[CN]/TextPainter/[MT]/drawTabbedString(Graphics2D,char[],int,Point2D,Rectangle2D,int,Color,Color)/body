{
  boolean ret=true;
  if (myOffset + length >= mySegmentEnd) {
    ret=false;
    length=mySegmentEnd - myOffset;
  }
  if (length <= 0) {
    return false;
  }
  if (myPrintSettings.WRAP) {
    double w=getTextSegmentWidth(text,myOffset,length,position.getX(),g);
    if (position.getX() + w > clip.getWidth()) {
      IntArrayList breakOffsets=calcBreakOffsets(g,text,myOffset,myOffset + length,colNumber,position,clip);
      int startOffset=myOffset;
      for (int i=0; i < breakOffsets.size(); i++) {
        int breakOffset=breakOffsets.get(i);
        drawTabbedString(g,text,breakOffset - myOffset,position,clip,colNumber,backColor,underscoredColor);
        position.setLocation(0,position.getY() + getLineHeight(g));
        if (position.getY() > clip.getY() + clip.getHeight() - getLineHeight(g)) {
          return false;
        }
      }
      if (myOffset > startOffset) {
        drawTabbedString(g,text,startOffset + length - myOffset,position,clip,colNumber,backColor,underscoredColor);
      }
      return ret;
    }
  }
  double xStart=position.getX();
  double x=position.getX();
  double y=getLineHeight(g) - getDescent(g) + position.getY();
  if (backColor != null) {
    Color savedColor=g.getColor();
    setBackgroundColor(g,backColor);
    double w=getTextSegmentWidth(text,myOffset,length,position.getX(),g);
    g.fill(new Area(new Rectangle2D.Double(position.getX(),y - getLineHeight(g) + getDescent(g),w,getLineHeight(g))));
    g.setColor(savedColor);
  }
  int start=myOffset;
  for (int i=myOffset; i < myOffset + length; i++) {
    if (text[i] != '\t')     continue;
    if (i > start) {
      String s=new String(text,start,i - start);
      x+=drawStringToGraphics(g,s,x,y);
    }
    x=nextTabStop(g,x);
    start=i + 1;
  }
  if (myOffset + length > start) {
    String s=new String(text,start,myOffset + length - start);
    x+=drawStringToGraphics(g,s,x,y);
  }
  if (underscoredColor != null) {
    Color savedColor=g.getColor();
    setForegroundColor(g,underscoredColor);
    double w=getTextSegmentWidth(text,myOffset,length,position.getX(),g);
    UIUtil.drawLine(g,(int)position.getX(),(int)y + 1,(int)(xStart + w),(int)(y + 1));
    g.setColor(savedColor);
  }
  position.setLocation(x,position.getY());
  myOffset+=length;
  return ret;
}
