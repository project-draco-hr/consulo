{
  myCodeStyleSettings=CodeStyleSettingsManager.getSettings(project);
  myDocument=editorDocument;
  myPrintSettings=PrintSettings.getInstance();
  String fontName=myPrintSettings.FONT_NAME;
  int fontSize=myPrintSettings.FONT_SIZE;
  myPlainFont=new Font(fontName,Font.PLAIN,fontSize);
  myBoldFont=new Font(fontName,Font.BOLD,fontSize);
  myItalicFont=new Font(fontName,Font.ITALIC,fontSize);
  myBoldItalicFont=new Font(fontName,Font.BOLD + Font.ITALIC,fontSize);
  myHighlighter=highlighter;
  myHeaderFont=new Font(myPrintSettings.FOOTER_HEADER_FONT_NAME,Font.PLAIN,myPrintSettings.FOOTER_HEADER_FONT_SIZE);
  myFileName=fileName;
  mySegmentEnd=myDocument.getTextLength();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  myFileType=psiFile.getFileType();
  final ArrayList<LineMarkerInfo> methodSeparators=new ArrayList<LineMarkerInfo>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      GeneralHighlightingPass action=new GeneralHighlightingPass(project,psiFile,myDocument,0,psiFile.getTextLength(),false,true);
      LineMarkerInfo[] lineMarkerInfos=action.queryLineMarkers();
      for (int i=0; i < lineMarkerInfos.length; i++) {
        LineMarkerInfo lineMarkerInfo=lineMarkerInfos[i];
        if (lineMarkerInfo.separatorColor != null) {
          methodSeparators.add(lineMarkerInfo);
        }
      }
    }
  }
);
  Collections.sort(methodSeparators,new Comparator(){
    public int compare(    Object o1,    Object o2){
      LineMarkerInfo i1=(LineMarkerInfo)o1;
      LineMarkerInfo i2=(LineMarkerInfo)o2;
      return i1.startOffset - i2.startOffset;
    }
  }
);
  myMethodSeparators=methodSeparators.toArray(new LineMarkerInfo[methodSeparators.size()]);
  myCurrentMethodSeparator=0;
}
