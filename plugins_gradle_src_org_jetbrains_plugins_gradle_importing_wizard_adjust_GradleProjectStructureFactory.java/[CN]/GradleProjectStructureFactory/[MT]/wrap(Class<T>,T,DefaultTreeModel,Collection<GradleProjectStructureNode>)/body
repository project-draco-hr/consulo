{
  final Method triggerMethod;
  try {
    triggerMethod=Named.class.getMethod("setName",String.class);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException("Unexpected exception occurred",e);
  }
  InvocationHandler invocationHandler=new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      Object result=method.invoke(delegate,args);
      if (method.equals(triggerMethod)) {
        for (        GradleProjectStructureNode node : treeNodes) {
          node.getDescriptor().setName(args[0].toString());
          model.nodeChanged(node);
        }
      }
      return result;
    }
  }
;
  ClassLoader classLoader=GradleProjectStructureFactory.class.getClassLoader();
  Class<?>[] interfaces={interfaceClass};
  return (T)Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);
}
