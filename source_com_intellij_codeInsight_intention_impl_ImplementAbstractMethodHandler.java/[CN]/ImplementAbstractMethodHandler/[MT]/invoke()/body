{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiClass[][] result=new PsiClass[1][];
  ApplicationManager.getApplication().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final PsiClass psiClass=myMethod.getContainingClass();
      if (!psiClass.isValid())       return;
      result[0]=getClassImplementations(psiClass);
    }
  }
,"Searching For Descendants...",true,myProject);
  if (result[0] == null)   return;
  if (result[0].length == 0) {
    Messages.showMessageDialog(myProject,"There are no classes found where this method can be implemented","No Classes Found",Messages.getInformationIcon());
    return;
  }
  if (result[0].length == 1) {
    implementInClass(result[0][0]);
    return;
  }
  PsiClassListCellRenderer renderer=new PsiClassListCellRenderer();
  Arrays.sort(result[0],renderer.getComparator());
  myList=new JList(result[0]);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setCellRenderer(renderer);
  renderer.installSpeedSearch(myList);
  final Runnable runnable=new Runnable(){
    public void run(){
      int index=myList.getSelectedIndex();
      if (index < 0)       return;
      PsiElement element=(PsiElement)myList.getSelectedValue();
      implementInClass((PsiClass)element);
    }
  }
;
  ListPopup listPopup=new ListPopup(" Choose Implementing Class ",myList,runnable,myProject);
  LogicalPosition caretPosition=myEditor.getCaretModel().getLogicalPosition();
  Point caretLocation=myEditor.logicalPositionToXY(caretPosition);
  int x=caretLocation.x;
  int y=caretLocation.y;
  x+=myLocation.x;
  y+=myLocation.y;
  listPopup.show(x,y);
}
