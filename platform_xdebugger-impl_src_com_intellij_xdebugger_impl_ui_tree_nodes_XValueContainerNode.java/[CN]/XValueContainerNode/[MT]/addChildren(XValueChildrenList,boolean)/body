{
  if (myObsolete)   return;
  invokeNodeUpdate(new Runnable(){
    @Override public void run(){
      if (myObsolete)       return;
      List<XValueContainerNode<?>> newChildren;
      if (children.size() > 0) {
        newChildren=new ArrayList<XValueContainerNode<?>>(children.size());
        if (myValueChildren == null) {
          if (!myAlreadySorted && XDebuggerSettingsManager.getInstance().getDataViewSettings().isSortValues()) {
            myValueChildren=new SortedList<XValueNodeImpl>(XValueNodeImpl.COMPARATOR);
          }
 else {
            myValueChildren=new ArrayList<XValueNodeImpl>(children.size());
          }
        }
        boolean valuesInline=XDebuggerSettingsManager.getInstance().getDataViewSettings().isShowValuesInline();
        InlineDebuggerHelper inlineHelper=XValueContainerNode.this.getTree().getEditorsProvider().getInlineDebuggerHelper();
        for (int i=0; i < children.size(); i++) {
          XValueNodeImpl node=new XValueNodeImpl(myTree,XValueContainerNode.this,children.getName(i),children.getValue(i));
          myValueChildren.add(node);
          newChildren.add(node);
          if (valuesInline && inlineHelper.shouldEvaluateChildrenByDefault(node) && isUseGetChildrenHack(myTree)) {
            node.getChildren();
          }
        }
      }
 else {
        newChildren=new SmartList<XValueContainerNode<?>>();
        if (myValueChildren == null) {
          myValueChildren=new SmartList<XValueNodeImpl>();
        }
      }
      myTopGroups=XValueContainerNode.this.createGroupNodes(children.getTopGroups(),myTopGroups,newChildren);
      myBottomGroups=XValueContainerNode.this.createGroupNodes(children.getBottomGroups(),myBottomGroups,newChildren);
      myCachedAllChildren=null;
      XValueContainerNode.this.fireNodesInserted(newChildren);
      if (last && myTemporaryMessageChildren != null) {
        final int[] ints=XValueContainerNode.this.getNodesIndices(myTemporaryMessageChildren);
        final TreeNode[] removed=myTemporaryMessageChildren.toArray(new TreeNode[myTemporaryMessageChildren.size()]);
        myCachedAllChildren=null;
        myTemporaryMessageChildren=null;
        XValueContainerNode.this.fireNodesRemoved(ints,removed);
      }
      myTree.childrenLoaded(XValueContainerNode.this,newChildren,last);
    }
  }
);
}
