{
  boolean error=true;
  try {
    createSocket();
    this.socketOutputStream=new BufferedOutputStream(socket.getOutputStream());
    this.socketInputStream=new BufferedInputStream(socket.getInputStream());
    final OutputStream loggingOutputStream=streamLogger.createLoggingOutputStream(this.socketOutputStream);
    final InputStream loggingInputStream=streamLogger.createLoggingInputStream(this.socketInputStream);
    writeLn(loggingOutputStream,preamble,"US-ASCII");
    writeLn(loggingOutputStream,repository);
    writeLn(loggingOutputStream,userName);
    writeLn(socketOutputStream,encodedPassword,"US-ASCII");
    writeLn(streamLogger.getOutputLogStream(),ENCODED_PASSWORD_OUTPUT_MESSAGE);
    writeLn(loggingOutputStream,postamble,"US-ASCII");
    loggingOutputStream.flush();
    String response=new StreamUtilities(null).readLine(loggingInputStream);
    if (response.equals(SUCCESS_MESSAGE)) {
      error=false;
      return;
    }
    if (response.length() == 0) {
      throw new AuthenticationException(JavaCvsSrcBundle.message("no.response.from.server.error.message"));
    }
    if (response.equals(FAILED_MESSAGE)) {
      throw new UnknownUserException(JavaCvsSrcBundle.message("wrong.password.or.unknown.user.error.message"));
    }
    response=removePrefix(response,"error ");
    response=removePrefix(response,"E ");
    throw new UnknownUserException(getMessage(JavaCvsSrcBundle.message("authentication.failed.error.message"),response));
  }
 catch (  ConnectException ex) {
    throw new AuthenticationException(getMessage(JavaCvsSrcBundle.message("cannot.connect.to.host.error.message"),connectionSettings.getHostName()),ex);
  }
catch (  NoRouteToHostException ex) {
    throw new AuthenticationException(getMessage(JavaCvsSrcBundle.message("no.route.to.host.error.message"),connectionSettings.getHostName()),ex);
  }
catch (  IOException ex) {
    throw new AuthenticationException(getMessage(JavaCvsSrcBundle.message("i.o.error.while.connecting.to.host.error.mesage"),connectionSettings.getHostName()),ex);
  }
 finally {
    if (error) {
      close();
    }
  }
}
