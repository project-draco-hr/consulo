{
  final ArrayList<CommandLineEntry> entries=new ArrayList<CommandLineEntry>();
  final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
  moduleRootManager.processOrder(new RootPolicy(){
    public Object visitJdkOrderEntry(    final JdkOrderEntry jdkOrderEntry,    final Object object){
      entries.add(JavaParametersUtil.JDK_ENTRY);
      return null;
    }
    public Object visitLibraryOrderEntry(    final LibraryOrderEntry libraryOrderEntry,    final Object object){
      final String[] urls=libraryOrderEntry.getUrls(OrderRootType.CLASSES_AND_OUTPUT);
      for (int i=0; i < urls.length; i++) {
        final String url=urls[i];
        entries.add(new ClassPathEntry(PathUtil.toPresentableUrl(url)));
      }
      return null;
    }
    public Object visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleSourceOrderEntry,    final Object object){
      final List<String> outputs=ProjectRootsTraversing.RootTraversePolicy.ALL_OUTPUTS.getOutputs(module);
      if (withDependencies) {
        final Module[] dependencies=moduleRootManager.getDependencies();
        if (dependencies != null) {
          for (          Module module1 : dependencies) {
            outputs.addAll(ProjectRootsTraversing.RootTraversePolicy.ALL_OUTPUTS.getOutputs(module1));
          }
        }
      }
      for (Iterator<String> iterator1=outputs.iterator(); iterator1.hasNext(); ) {
        final String url=iterator1.next();
        entries.add(new ClassPathEntry(PathUtil.toPresentableUrl(url)));
      }
      return null;
    }
  }
,null);
  return entries;
}
