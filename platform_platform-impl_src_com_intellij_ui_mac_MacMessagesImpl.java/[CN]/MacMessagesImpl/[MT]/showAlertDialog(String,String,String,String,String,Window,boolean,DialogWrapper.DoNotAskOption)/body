{
  return doForWindowAndTitle(new PairFunction<Pair<Window,String>,JRootPane,Integer>(){
    @Override public Integer fun(    Pair<Window,String> windowAndTitle,    JRootPane pane){
      String _windowTitle=windowAndTitle.getSecond();
      Window _window=windowAndTitle.getFirst();
      final ID focusedWindow=MacUtil.findWindowForTitle(_windowTitle);
      if (focusedWindow != null) {
        String fakeTitle=null;
        final FocusTrackback[] focusTrackback={new FocusTrackback(new Object(),_window,true)};
        ID pool=invoke("NSAutoreleasePool","new");
        try {
          final ID delegate=invoke(Foundation.getObjcClass("NSAlertDelegate_"),"new");
          cfRetain(delegate);
          fakeTitle=String.format("MacSheetDialog-%d",delegate.intValue());
          ID paramsArray=invoke("NSArray","arrayWithObjects:",nsString(title),nsString(UIUtil.removeMnemonic(defaultText)),nsString(otherText == null ? "-1" : UIUtil.removeMnemonic(otherText)),nsString(alternateText == null ? "-1" : UIUtil.removeMnemonic(alternateText)),nsString(StringUtil.stripHtml(message == null ? "" : message,true).replace("%","%%")),focusedWindow,nsString(fakeTitle),nsString(errorStyle ? "error" : "-1"),nsString(doNotAskDialogOption == null || !doNotAskDialogOption.canBeHidden() ? "-1" : doNotAskDialogOption.getDoNotShowMessage()),nsString(doNotAskDialogOption != null && !doNotAskDialogOption.isToBeShown() ? "checked" : "-1"),null);
          IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(false);
          invoke(delegate,"performSelectorOnMainThread:withObject:waitUntilDone:",Foundation.createSelector("showSheet:"),paramsArray,false);
        }
  finally {
          invoke(pool,"release");
        }
        if (fakeTitle != null) {
          pane.putClientProperty(MacUtil.MAC_NATIVE_WINDOW_SHOWING,Boolean.TRUE);
          pane.putClientProperty(MAC_SHEET_ID,fakeTitle);
          MacUtil.startModal(pane);
          IdeFocusManager.getGlobalInstance().setTypeaheadEnabled(true);
          Integer result=(Integer)pane.getClientProperty(MAC_SHEET_RESULT);
          boolean suppress=Boolean.TRUE == pane.getClientProperty(MAC_SHEET_SUPPRESS);
          int cancelCode=1;
          int code;
          if (alternateText != null) {
            cancelCode=2;
            if (result == null)             result=2;
switch (result) {
case 1:
              code=0;
            break;
case 0:
          code=1;
        break;
case -1:
default :
      code=2;
    break;
}
}
 else {
cancelCode=1;
if (result == null) result=-1;
switch (result) {
case 1:
  code=0;
break;
case -1:
default :
code=1;
break;
}
}
if (doNotAskDialogOption != null && doNotAskDialogOption.canBeHidden()) {
if (cancelCode != code || doNotAskDialogOption.shouldSaveOptionsOnCancel()) {
doNotAskDialogOption.setToBeShown(!suppress,code);
}
}
pane.putClientProperty(MAC_SHEET_RESULT,null);
pane.putClientProperty(MAC_SHEET_SUPPRESS,null);
if (focusTrackback[0] != null && !(focusTrackback[0].isSheduledForRestore() || focusTrackback[0].isWillBeSheduledForRestore())) {
focusTrackback[0].setWillBeSheduledForRestore();
IdeFocusManager mgr=IdeFocusManager.findInstanceByComponent(_window);
Runnable r=new Runnable(){
public void run(){
if (focusTrackback[0] != null) focusTrackback[0].restoreFocus();
focusTrackback[0]=null;
}
}
;
mgr.doWhenFocusSettlesDown(r);
}
return code;
}
}
return -1;
}
}
,window);
}
