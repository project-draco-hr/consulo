{
  final boolean isOneLineMode=isOneLineMode();
  editor.setOneLineMode(isOneLineMode);
  final EditorColorsManager mgr=EditorColorsManager.getInstance();
  final EditorColorsScheme defaultScheme=UIUtil.isUnderDarcula() ? mgr.getScheme(mgr.getGlobalScheme().getName()) : mgr.getScheme(EditorColorsManager.DEFAULT_SCHEME_NAME);
  final EditorColorsScheme customGlobalScheme=isOneLineMode ? defaultScheme : null;
  editor.setColorsScheme(editor.createBoundColorSchemeDelegate(customGlobalScheme));
  final EditorColorsScheme colorsScheme=editor.getColorsScheme();
  colorsScheme.setColor(EditorColors.CARET_ROW_COLOR,null);
  editor.setColorsScheme(new DelegateColorScheme(colorsScheme){
    @Override public TextAttributes getAttributes(    TextAttributesKey key){
      final TextAttributes attributes=super.getAttributes(key);
      if (!isEnabled() && attributes != null) {
        return new TextAttributes(UIUtil.getInactiveTextColor(),attributes.getBackgroundColor(),attributes.getEffectColor(),attributes.getEffectType(),attributes.getFontType());
      }
      return attributes;
    }
  }
);
  setupEditorFont(editor);
  updateBorder(editor);
  editor.setBackgroundColor(getBackgroundColor(!myIsViewer,colorsScheme));
}
