{
  Color color=UIUtil.getListForeground();
  SimpleTextAttributes attributes=null;
  String locationString=null;
  if (value instanceof NodeDescriptor) {
    final NodeDescriptor descriptor=(NodeDescriptor)value;
    setIcon(descriptor.getClosedIcon());
    final Color elementColor=descriptor.getColor();
    if (elementColor != null) {
      color=elementColor;
    }
    if (descriptor instanceof AbstractTreeNode) {
      final AbstractTreeNode treeNode=(AbstractTreeNode)descriptor;
      final TextAttributesKey attributesKey=treeNode.getAttributesKey();
      if (attributesKey != null) {
        final TextAttributes textAttributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(attributesKey);
        if (textAttributes != null)         attributes=SimpleTextAttributes.fromTextAttributes(textAttributes);
      }
      locationString=treeNode.getLocationString();
    }
  }
  if (attributes == null)   attributes=new SimpleTextAttributes(Font.PLAIN,color);
  final String text=value.toString();
  if (myCommanderPanel.isEnableSearchHighlighting() && SpeedSearchBase.hasActiveSpeedSearch(list)) {
    final SpeedSearchBase.SpeedSearchComparator comparator=myCommanderPanel.getListSpeedSearch().getComparator();
    final String recentSearchText=comparator.getRecentSearchText();
    if (recentSearchText != null && recentSearchText.length() > 0 && comparator.doCompare(recentSearchText,text)) {
      final Matcher matcher=comparator.getRecentSearchMatcher();
      final List<Pair<String,Integer>> searchTerms=new ArrayList<Pair<String,Integer>>();
      for (int i=0; i < matcher.groupCount(); i++) {
        final int start=matcher.start(i + 1);
        if (searchTerms.size() > 0) {
          final Pair<String,Integer> recent=searchTerms.get(searchTerms.size() - 1);
          if (start == recent.second + recent.first.length()) {
            searchTerms.set(searchTerms.size() - 1,Pair.create(recent.first + matcher.group(i + 1),recent.second));
            continue;
          }
        }
        searchTerms.add(Pair.create(matcher.group(i + 1),start));
      }
      SearchUtil.appendFragmentsStrict(text,searchTerms,Font.PLAIN,attributes.getFgColor(),selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground(),this);
    }
 else {
      append(text != null ? text : "",attributes);
    }
  }
 else {
    append(text != null ? text : "",attributes);
  }
  if (locationString != null && locationString.length() > 0) {
    append(" (" + locationString + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
  }
}
