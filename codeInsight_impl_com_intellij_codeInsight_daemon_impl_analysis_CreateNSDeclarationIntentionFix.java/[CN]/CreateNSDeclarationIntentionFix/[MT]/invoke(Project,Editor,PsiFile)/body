{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  String[] namespaces;
  final XmlSchemaProvider provider=XmlSchemaProvider.getAvailableProvider((XmlFile)file);
  if (provider == null) {
    namespaces=guessNamespace(file,myElement == null ? myTag.getLocalName() : myElement.getText());
  }
 else {
    final Set<String> strings=provider.getAvailableNamespaces((XmlFile)file);
    namespaces=strings.toArray(new String[strings.size()]);
  }
  Arrays.sort(namespaces);
  runActionOverSeveralAttributeValuesAfterLettingUserSelectTheNeededOne(namespaces,project,new StringToAttributeProcessor(){
    public void doSomethingWithGivenStringToProduceXmlAttributeNowPlease(    @NotNull final String namespace) throws IncorrectOperationException {
      final int offset=editor.getCaretModel().getOffset();
      final RangeMarker marker=editor.getDocument().createRangeMarker(offset,offset);
      final XmlExtension extension=XmlExtension.getExtension((XmlFile)file);
      extension.insertNamespaceDeclaration((XmlFile)file,editor,Collections.singleton(namespace),myNamespacePrefix,new XmlExtension.Runner<String,IncorrectOperationException>(){
        public void run(        final String param) throws IncorrectOperationException {
          if (namespace.length() > 0) {
            editor.getCaretModel().moveToOffset(marker.getStartOffset());
          }
        }
      }
);
    }
  }
,getTitle(),this,editor);
}
