{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  String[] namespaces;
  if (!myInJsp) {
    namespaces=guessNamespace(file,myElement == null ? myTag.getLocalName() : myElement.getText());
    if (file.getLanguage() == StdLanguages.JSPX) {
      final Map<String,String> map=guessJspNamespaces();
      final Set<String> strings=map.keySet();
      namespaces=ArrayUtil.mergeArrays(namespaces,strings.toArray(new String[strings.size()]),String.class);
    }
  }
 else {
    final Map<String,String> map=guessJspNamespaces();
    final Set<String> strings=map.keySet();
    namespaces=strings.toArray(new String[strings.size()]);
  }
  Arrays.sort(namespaces);
  runActionOverSeveralAttributeValuesAfterLettingUserSelectTheNeededOne(namespaces,project,new StringToAttributeProcessor(){
    public void doSomethingWithGivenStringToProduceXmlAttributeNowPlease(    @NotNull final String attrName) throws IncorrectOperationException {
      final int offset=editor.getCaretModel().getOffset();
      final RangeMarker marker=editor.getDocument().createRangeMarker(offset,offset);
      final XmlExtension extension=XmlExtension.getExtension((XmlFile)file);
      extension.insertNamespaceDeclaration((XmlFile)file,editor,Collections.singleton(attrName),myNamespacePrefix,new XmlExtension.Runner<String,IncorrectOperationException>(){
        public void run(        final String param) throws IncorrectOperationException {
          editor.getCaretModel().moveToOffset(marker.getStartOffset());
        }
      }
);
    }
  }
,XmlErrorMessages.message(myInJsp ? "select.taglib.title" : "select.namespace.title"),this,editor);
}
