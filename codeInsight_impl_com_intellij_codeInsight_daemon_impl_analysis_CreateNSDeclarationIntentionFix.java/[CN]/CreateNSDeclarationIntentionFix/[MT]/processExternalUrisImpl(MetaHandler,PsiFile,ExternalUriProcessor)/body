{
  final ProgressIndicator pi=ProgressManager.getInstance().getProgressIndicator();
  final String searchFor=metaHandler.searchFor();
  if (pi != null)   pi.setText(XmlErrorMessages.message("looking.in.schemas"));
  final ExternalResourceManager instanceEx=ExternalResourceManager.getInstance();
  final String[] availableUrls=instanceEx.getResourceUrls(null,true);
  int i=0;
  for (  String url : availableUrls) {
    if (pi != null) {
      pi.setFraction((double)i / availableUrls.length);
      pi.setText2(url);
      ++i;
    }
    final XmlFile xmlFile=XmlUtil.findNamespace(file,url);
    if (xmlFile != null) {
      final boolean wordFound=checkIfGivenXmlHasTheseWords(searchFor,xmlFile);
      if (!wordFound)       continue;
      final PsiMetaData metaData=xmlFile.getDocument().getMetaData();
      if (metaHandler.isAcceptableMetaData(metaData,url)) {
        final XmlNSDescriptorImpl descriptor=metaData instanceof XmlNSDescriptorImpl ? (XmlNSDescriptorImpl)metaData : null;
        final String defaultNamespace=descriptor != null ? descriptor.getDefaultNamespace() : url;
        if (!XmlUtil.XML_SCHEMA_URI2.equals(defaultNamespace) && !XmlUtil.XML_SCHEMA_URI3.equals(defaultNamespace)) {
          processor.process(defaultNamespace,url);
        }
      }
    }
  }
}
