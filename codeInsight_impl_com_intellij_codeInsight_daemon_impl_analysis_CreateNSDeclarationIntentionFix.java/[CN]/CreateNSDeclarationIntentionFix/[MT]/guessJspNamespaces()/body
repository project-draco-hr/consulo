{
  if (!myTag.isValid()) {
    return Collections.emptyMap();
  }
  final JspFile jspFile=PsiUtil.getJspFile(myTag);
  if (jspFile == null) {
    return Collections.emptyMap();
  }
  final String text=myTag.getName().trim();
  final int pos=text.indexOf(':');
  final Map<String,String> namespaces=new LinkedHashMap<String,String>();
  final Project project=myTag.getProject();
  final JspManager jspManager=JspManager.getInstance(project);
  if (myElement != null) {
    final Set<String> map=jspManager.getNamespacesByFunctionName(myElement.getText(),jspFile,false);
    for (    String uri : map) {
      final String prefix=StringUtil.isEmpty(myNamespacePrefix) ? jspManager.getPrefixForNamespace(uri,jspFile) : myNamespacePrefix;
      namespaces.put(uri,prefix);
    }
  }
 else   if (pos == -1) {
    final Set<String> map=jspManager.getNamespacesByTagName(text,jspFile,false);
    for (    String uri : map) {
      final String prefix=StringUtil.isEmpty(myNamespacePrefix) ? jspManager.getPrefixForNamespace(uri,jspFile) : myNamespacePrefix;
      namespaces.put(uri,prefix);
    }
  }
 else   if (pos == text.length() - 1) {
    final Module module=ModuleUtil.findModuleForPsiElement(myTag);
    if (module == null) {
      return Collections.emptyMap();
    }
    final String prefix=text.substring(0,text.length() - 1);
    final Collection<XmlFile> files=jspManager.getPossibleTldFiles(module);
    for (    XmlFile psiFile : files) {
      final XmlDocument document=psiFile.getDocument();
      if (document != null) {
        final TldDescriptor descriptor=(TldDescriptor)document.getMetaData();
        if (descriptor != null) {
          final String defaultPrefix=descriptor.getDefaultPrefix();
          if (defaultPrefix != null && defaultPrefix.equals(prefix)) {
            final String uri=descriptor.getUri();
            if (!StringUtil.isEmpty(uri)) {
              namespaces.put(uri,prefix);
            }
          }
        }
      }
    }
  }
 else {
    final String tagName=text.substring(pos + 1);
    final Set<String> map=jspManager.getNamespacesByTagName(tagName,jspFile,false);
    for (    String uri : map) {
      namespaces.put(uri,jspManager.getPrefixForNamespace(uri,jspFile));
    }
  }
  return namespaces;
}
