{
  if (text == null)   return;
  if (filter == null || filter.length() == 0) {
    textRenderer.append(text,new SimpleTextAttributes(style,foreground));
  }
 else {
    final HashSet<String> quoted=new HashSet<String>();
    filter=processFilter(filter,quoted);
    final TreeMap<Integer,String> indx=new TreeMap<Integer,String>();
    for (    String stripped : quoted) {
      int beg=0;
      int idx;
      while ((idx=StringUtil.indexOfIgnoreCase(text,stripped,beg)) != -1) {
        indx.put(idx,text.substring(idx,idx + stripped.length()));
        beg=idx + stripped.length();
      }
    }
    final List<String> selectedWords=new ArrayList<String>();
    int pos=0;
    for (    Integer index : indx.keySet()) {
      final String stripped=indx.get(index);
      final int start=index.intValue();
      appendSelectedWords(text,selectedWords,pos,start,filter);
      selectedWords.add(stripped);
      pos=start + stripped.length();
    }
    appendSelectedWords(text,selectedWords,pos,text.length(),filter);
    int idx=0;
    for (    String word : selectedWords) {
      text=text.substring(idx);
      textRenderer.append(text.substring(0,text.indexOf(word)),new SimpleTextAttributes(background,foreground,null,style));
      idx=text.indexOf(word) + word.length();
      textRenderer.append(text.substring(idx - word.length(),idx),new SimpleTextAttributes(UIUtil.getTreeSelectionBackground(),UIUtil.getTreeSelectionForeground(),null,style));
    }
    textRenderer.append(text.substring(idx,text.length()),new SimpleTextAttributes(background,foreground,null,style));
  }
}
