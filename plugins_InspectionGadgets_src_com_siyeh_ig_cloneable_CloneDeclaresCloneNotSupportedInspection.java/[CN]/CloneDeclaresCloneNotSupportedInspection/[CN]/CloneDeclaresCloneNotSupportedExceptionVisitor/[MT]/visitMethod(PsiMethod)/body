{
  final String methodName=method.getName();
  if (!HardcodedMethodConstants.CLONE.equals(methodName)) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList == null) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters == null || parameters.length != 0) {
    return;
  }
  if (method.hasModifierProperty(PsiModifier.FINAL)) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (containingClass.hasModifierProperty(PsiModifier.FINAL)) {
    return;
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  if (throwsList == null) {
    registerMethodError(method);
    return;
  }
  final PsiJavaCodeReferenceElement[] referenceElements=throwsList.getReferenceElements();
  for (  final PsiJavaCodeReferenceElement referenceElement : referenceElements) {
    final PsiElement referencedElement=referenceElement.resolve();
    if (referencedElement != null && referencedElement instanceof PsiClass) {
      final PsiClass aClass=(PsiClass)referencedElement;
      final String className=aClass.getQualifiedName();
      if ("java.lang.CloneNotSupportedException".equals(className)) {
        return;
      }
    }
  }
  registerMethodError(method);
}
