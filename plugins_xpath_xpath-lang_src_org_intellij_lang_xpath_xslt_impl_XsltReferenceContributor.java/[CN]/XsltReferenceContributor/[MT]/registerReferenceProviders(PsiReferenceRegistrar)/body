{
  registrar.registerReferenceProvider(PlatformPatterns.psiElement(XmlAttributeValue.class).and(new FilterPattern(new XsltAttributeFilter())),new XsltReferenceProvider(registrar.getProject()));
  registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(xmlAttribute("as").withParent(xmlTag().withNamespace(XsltSupport.XSLT_NS))),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      if (element.textContains(':')) {
        return new PsiReference[]{new PrefixReference((XmlAttribute)element.getParent()){
          @NotNull @Override public Object[] getVariants(){
            return XsltNamespaceContext.getPrefixes(myAttribute).toArray();
          }
        }
};
      }
      return PsiReference.EMPTY_ARRAY;
    }
  }
);
}
