{
  myProject=project;
  myAllRepositories=repositories;
  myRootNode=new CheckedTreeNode(null);
  myRootNode.add(new DefaultMutableTreeNode(new FakeCommit()));
  myTreeModel=new DefaultTreeModel(myRootNode);
  myTreeCellRenderer=new MyTreeCellRenderer();
  myTree=new CheckboxTree(myTreeCellRenderer,myRootNode){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      Object userObject=node.getUserObject();
      if (userObject instanceof GitRepository) {
        checkboxListener.consume(node.isChecked());
      }
    }
    @Override public boolean getScrollableTracksViewportWidth(){
      return false;
    }
  }
;
  myTree.setRootVisible(false);
  TreeUtil.expandAll(myTree);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)myTree.getLastSelectedPathComponent();
      if (node != null) {
        Object nodeInfo=node.getUserObject();
        if (nodeInfo instanceof GitCommit) {
          myChangesBrowser.getViewer().setEmptyText("No differences");
          myChangesBrowser.setChangesToDisplay(((GitCommit)nodeInfo).getChanges());
          return;
        }
      }
      setDefaultEmptyText();
      myChangesBrowser.setChangesToDisplay(Collections.<Change>emptyList());
    }
  }
);
  myChangesBrowser=new ChangesBrowser(project,null,Collections.<Change>emptyList(),null,false,true,null,ChangesBrowser.MyUseCase.LOCAL_CHANGES,null);
  myChangesBrowser.getDiffAction().registerCustomShortcutSet(CommonShortcuts.getDiff(),myTree);
  setDefaultEmptyText();
  Splitter splitter=new Splitter(false,0.7f);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree));
  splitter.setSecondComponent(myChangesBrowser);
  setLayout(new BorderLayout());
  add(splitter);
}
