def start_server(function):
    '\n    Decorator.\n    Tries to call function, if it fails, try to (re)start inotify server.\n    Raise QueryFailed if something went wrong\n    '

    def decorated_function(self, *args):
        result = None
        try:
            return function(self, *args)
        except (OSError, socket.error) as err:
            autostart = self.ui.configbool('inotify', 'autostart', True)
            if (err[0] == errno.ECONNREFUSED):
                self.ui.warn(_('inotify-client: found dead inotify server socket; removing it\n'))
                os.unlink(os.path.join(self.root, '.hg', 'inotify.sock'))
            if ((err[0] in (errno.ECONNREFUSED, errno.ENOENT)) and autostart):
                self.ui.debug('(starting inotify server)\n')
                try:
                    try:
                        server.start(self.ui, self.dirstate, self.root, dict(daemon=True, daemon_pipefds=''))
                    except server.AlreadyStartedException as inst:
                        self.ui.debug(str(inst))
                except Exception as inst:
                    self.ui.warn((_('inotify-client: could not start inotify server: %s\n') % inst))
                else:
                    try:
                        return function(self, *args)
                    except socket.error as err:
                        self.ui.warn((_('inotify-client: could not talk to new inotify server: %s\n') % err[(-1)]))
            elif (err[0] in (errno.ECONNREFUSED, errno.ENOENT)):
                self.ui.debug('(inotify server not running)\n')
            else:
                self.ui.warn((_('inotify-client: failed to contact inotify server: %s\n') % err[(-1)]))
        self.ui.traceback()
        raise QueryFailed('inotify query failed')
    return decorated_function
