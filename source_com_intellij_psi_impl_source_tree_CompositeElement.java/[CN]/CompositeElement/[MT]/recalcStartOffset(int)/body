{
  if (parentModificationsCount == myParentModifications || parent == null)   return;
{
    final int parentParentModificationsCount=parentModificationsCount - parent.getModificationCount();
    parent.recalcStartOffset(parentParentModificationsCount);
  }
  CompositeElement lastKnownStart=null;
  TreeElement treePrev=prev;
  TreeElement last=this;
  TreeElement current=null;
{
    while (treePrev instanceof CompositeElement) {
      final CompositeElement compositeElement=(CompositeElement)treePrev;
      if (compositeElement.myParentModifications == parentModificationsCount) {
        lastKnownStart=compositeElement;
        break;
      }
      last=treePrev;
      treePrev=treePrev.getTreePrev();
    }
  }
  if (lastKnownStart == null) {
    lastKnownStart=parent;
    current=(TreeElement)parent.getFirstChildNode();
    while (current != last) {
      LOG.assertTrue(current != null,"Invalid tree");
      if (current instanceof CompositeElement) {
        final CompositeElement compositeElement=(CompositeElement)current;
        if (compositeElement.myParentModifications == parentModificationsCount)         lastKnownStart=compositeElement;
      }
      current=current.getTreeNext();
    }
  }
  current=lastKnownStart != parent ? lastKnownStart : (TreeElement)parent.getFirstChildNode();
  int start=lastKnownStart.myStartOffset;
  while (current != this) {
    start+=current.getTextLength();
    current=current.getTreeNext();
  }
  myStartOffset=start;
  myParentModifications=parentModificationsCount;
}
