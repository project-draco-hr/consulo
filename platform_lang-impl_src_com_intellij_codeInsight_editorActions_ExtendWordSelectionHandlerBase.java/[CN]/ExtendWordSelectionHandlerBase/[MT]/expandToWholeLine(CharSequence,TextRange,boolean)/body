{
  int textLength=text.length();
  List<TextRange> result=new ArrayList<TextRange>();
  if (range == null) {
    return result;
  }
  LOG.assertTrue(range.getEndOffset() <= text.length());
  if (!StringUtil.contains(text,range.getStartOffset(),range.getEndOffset(),'\n')) {
    result.add(range);
  }
  int startOffset=range.getStartOffset();
  int endOffset=range.getEndOffset();
  int index1=CharArrayUtil.shiftBackward(text,startOffset - 1," \t");
  if (endOffset > startOffset && text.charAt(endOffset - 1) == '\n') {
    endOffset--;
  }
  int index2=Math.min(textLength,CharArrayUtil.shiftForward(text,endOffset," \t"));
  if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') {
    if (!isSymmetric) {
      if (index1 < 0 || text.charAt(index1) == '\n') {
        startOffset=index1 + 1;
      }
      if (index2 == textLength || text.charAt(index2) == '\n') {
        endOffset=index2;
        if (endOffset < textLength) {
          endOffset++;
        }
      }
      result.add(new TextRange(startOffset,endOffset));
    }
 else {
      if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) {
        startOffset=index1 + 1;
        endOffset=index2;
        if (endOffset < textLength) {
          endOffset++;
        }
        result.add(new TextRange(startOffset,endOffset));
      }
 else {
        result.add(range);
      }
    }
  }
 else {
    result.add(range);
  }
  return result;
}
