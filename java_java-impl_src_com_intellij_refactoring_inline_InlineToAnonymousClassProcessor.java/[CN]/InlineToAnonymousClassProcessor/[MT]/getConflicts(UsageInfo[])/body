{
  Map<PsiElement,String> result=new LinkedHashMap<PsiElement,String>();
  ReferencedElementsCollector collector=new ReferencedElementsCollector(){
    protected void checkAddMember(    @NotNull final PsiMember member){
      if (PsiTreeUtil.isAncestor(myClass,member,false)) {
        return;
      }
      final PsiModifierList modifierList=member.getModifierList();
      if (member.getContainingClass() == myClass.getSuperClass() && modifierList != null && modifierList.hasModifierProperty(PsiModifier.PROTECTED)) {
        return;
      }
      super.checkAddMember(member);
    }
  }
;
  InlineMethodProcessor.addInaccessibleMemberConflicts(myClass,usages,collector,result);
  return result;
}
