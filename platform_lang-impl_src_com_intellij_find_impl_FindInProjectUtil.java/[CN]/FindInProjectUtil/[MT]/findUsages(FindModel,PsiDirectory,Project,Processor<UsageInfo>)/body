{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  final Collection<PsiFile> psiFiles=getFilesToSearchIn(findModel,project,psiDirectory);
  try {
    final SearchScope customScope=findModel.getCustomScope();
    final Set<PsiFile> largeFiles=new THashSet<PsiFile>();
    int i=0;
    long totalFilesSize=0;
    int count=0;
    final boolean[] warningShown={false};
    final UsageViewManager usageViewManager=UsageViewManager.getInstance(project);
    for (    final PsiFile psiFile : psiFiles) {
      usageViewManager.checkSearchCanceled();
      final VirtualFile virtualFile=psiFile.getVirtualFile();
      final int index=i++;
      if (virtualFile == null)       continue;
      long fileLength=getFileLength(virtualFile);
      if (fileLength == -1)       continue;
      if (ProjectUtil.isProjectOrWorkspaceFile(virtualFile) && !Registry.is("find.search.in.project.files"))       continue;
      if (fileLength > SINGLE_FILE_SIZE_LIMIT) {
        largeFiles.add(psiFile);
        continue;
      }
      if (progress != null) {
        progress.setFraction((double)index / psiFiles.size());
        String text=FindBundle.message("find.searching.for.string.in.file.progress",findModel.getStringToFind(),virtualFile.getPresentableUrl());
        progress.setText(text);
        progress.setText2(FindBundle.message("find.searching.for.string.in.file.occurrences.progress",count));
      }
      int countInFile=processUsagesInFile(psiFile,findModel,consumer);
      count+=countInFile;
      if (countInFile > 0) {
        totalFilesSize+=fileLength;
        if (totalFilesSize > FILES_SIZE_LIMIT && !warningShown[0]) {
          warningShown[0]=true;
          String message=FindBundle.message("find.excessive.total.size.prompt",presentableSize(totalFilesSize),ApplicationNamesInfo.getInstance().getProductName());
          UsageLimitUtil.showAndCancelIfAborted(project,message);
        }
      }
    }
    if (!largeFiles.isEmpty()) {
      @Language("HTML") String message="<html><body>";
      if (largeFiles.size() == 1) {
        final VirtualFile vFile=largeFiles.iterator().next().getVirtualFile();
        message+="File " + presentableFileInfo(vFile) + " is ";
      }
 else {
        message+="Files<br> ";
        int counter=0;
        for (        PsiFile file : largeFiles) {
          final VirtualFile vFile=file.getVirtualFile();
          message+=presentableFileInfo(vFile) + "<br> ";
          if (counter++ > 10)           break;
        }
        message+="are ";
      }
      message+="too large and cannot be scanned</body></html>";
      final String finalMessage=message;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          ToolWindowManager.getInstance(project).notifyByBalloon(ToolWindowId.FIND,MessageType.WARNING,finalMessage);
        }
      }
,project.getDisposed());
    }
  }
 catch (  ProcessCanceledException e) {
  }
  if (progress != null) {
    progress.setText(FindBundle.message("find.progress.search.completed"));
  }
}
