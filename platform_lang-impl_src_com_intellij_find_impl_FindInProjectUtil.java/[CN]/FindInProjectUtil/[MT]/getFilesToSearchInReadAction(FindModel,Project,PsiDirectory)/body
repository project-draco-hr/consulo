{
  String moduleName=findModel.getModuleName();
  Module module=moduleName == null ? null : ModuleManager.getInstance(project).findModuleByName(moduleName);
  final FileIndex fileIndex=module == null ? ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(module).getFileIndex();
  if (psiDirectory == null || findModel.isWithSubdirectories() && fileIndex.isInContent(psiDirectory.getVirtualFile())) {
    final Pattern fileMaskRegExp=createFileMaskRegExp(findModel);
    Pair<Boolean,Collection<PsiFile>> fastWords=getFilesForFastWordSearch(findModel,project,psiDirectory,fileMaskRegExp,module);
    final Collection<PsiFile> filesForFastWordSearch=fastWords.getSecond();
    if (fastWords.getFirst() && canOptimizeForFastWordSearch(findModel))     return filesForFastWordSearch;
    final GlobalSearchScope customScope=toGlobal(project,findModel.getCustomScope());
class EnumContentIterator implements ContentIterator {
      final List<PsiFile> myFiles=new ArrayList<PsiFile>(filesForFastWordSearch);
      final PsiManager psiManager=PsiManager.getInstance(project);
      @Override public boolean processFile(      VirtualFile virtualFile){
        if (!virtualFile.isDirectory() && (fileMaskRegExp == null || fileMaskRegExp.matcher(virtualFile.getName()).matches()) && customScope.contains(virtualFile)) {
          final PsiFile psiFile=psiManager.findFile(virtualFile);
          if (psiFile != null && !filesForFastWordSearch.contains(psiFile)) {
            myFiles.add(psiFile);
          }
        }
        return true;
      }
      private Collection<PsiFile> getFiles(){
        return myFiles;
      }
    }
    final EnumContentIterator iterator=new EnumContentIterator();
    if (psiDirectory == null) {
      boolean success=fileIndex.iterateContent(iterator);
      if (success && customScope.isSearchInLibraries()) {
        OrderEnumerator enumerator=module == null ? OrderEnumerator.orderEntries(project) : OrderEnumerator.orderEntries(module);
        final VirtualFile[] librarySources=enumerator.withoutModuleSourceEntries().withoutDepModules().getSourceRoots();
        iterateAll(librarySources,customScope,iterator);
      }
    }
 else {
      fileIndex.iterateContentUnderDirectory(psiDirectory.getVirtualFile(),iterator);
    }
    return iterator.getFiles();
  }
 else {
    Collection<PsiFile> fileList=new THashSet<PsiFile>();
    addFilesUnderDirectory(psiDirectory,fileList,findModel.isWithSubdirectories(),createFileMaskRegExp(findModel));
    return fileList;
  }
}
