{
  if (filter == null) {
    return Conditions.alwaysTrue();
  }
  String pattern="";
  String negativePattern="";
  final List<String> masks=StringUtil.split(filter,",");
  for (  String mask : masks) {
    mask=mask.trim();
    if (StringUtil.startsWith(mask,"!")) {
      negativePattern+=(negativePattern.isEmpty() ? "" : "|") + "(" + PatternUtil.convertToRegex(mask.substring(1))+ ")";
    }
 else {
      pattern+=(pattern.isEmpty() ? "" : "|") + "(" + PatternUtil.convertToRegex(mask)+ ")";
    }
  }
  final String finalPattern=pattern;
  final String finalNegativePattern=negativePattern;
  return new Condition<String>(){
    final Pattern regExp=Pattern.compile(finalPattern,Pattern.CASE_INSENSITIVE);
    final Pattern negativeRegExp=StringUtil.isEmpty(finalNegativePattern) ? null : Pattern.compile(finalNegativePattern,Pattern.CASE_INSENSITIVE);
    @Override public boolean value(    String input){
      return regExp.matcher(input).matches() && (negativeRegExp == null || !negativeRegExp.matcher(input).matches());
    }
  }
;
}
