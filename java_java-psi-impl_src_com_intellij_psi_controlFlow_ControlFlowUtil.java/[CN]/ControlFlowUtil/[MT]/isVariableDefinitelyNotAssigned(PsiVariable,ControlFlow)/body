{
class MyVisitor extends InstructionClientVisitor<Boolean> {
    final boolean[] maybeAssigned=new boolean[flow.getSize() + 1];
    @Override public void visitWriteVariableInstruction(    WriteVariableInstruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean assigned=instruction.variable == variable || maybeAssigned[nextOffset];
      maybeAssigned[offset]|=assigned;
    }
    @Override public void visitThrowToInstruction(    ThrowToInstruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean assigned=!isLeaf(nextOffset) && maybeAssigned[nextOffset];
      maybeAssigned[offset]|=assigned;
    }
    @Override public void visitConditionalThrowToInstruction(    ConditionalThrowToInstruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      int throwToOffset=instruction.offset;
      boolean assigned=throwToOffset == nextOffset ? !isLeaf(nextOffset) && maybeAssigned[nextOffset] : maybeAssigned[nextOffset];
      maybeAssigned[offset]|=assigned;
    }
    @Override public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean assigned=maybeAssigned[nextOffset];
      maybeAssigned[offset]|=assigned;
    }
    @Override public Boolean getResult(){
      return !maybeAssigned[0];
    }
  }
  MyVisitor visitor=new MyVisitor();
  depthFirstSearch(flow,visitor);
  return visitor.getResult().booleanValue();
}
