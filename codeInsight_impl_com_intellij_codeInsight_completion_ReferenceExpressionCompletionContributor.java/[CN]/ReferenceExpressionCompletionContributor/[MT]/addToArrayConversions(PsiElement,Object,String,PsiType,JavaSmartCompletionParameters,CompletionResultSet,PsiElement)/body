{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(element.getProject()).getElementFactory();
  final String callSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES);
  final PsiType componentType=PsiUtil.extractIterableTypeParameter(itemType,true);
  if (componentType == null || !(parameters.getExpectedType() instanceof PsiArrayType))   return;
  final PsiArrayType type=(PsiArrayType)parameters.getExpectedType();
  if (!type.getComponentType().isAssignableFrom(componentType) || componentType instanceof PsiClassType && ((PsiClassType)componentType).hasParameters()) {
    return;
  }
  final String bracketSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_BRACKETS);
  if (object instanceof PsiVariable && !containsMethodCalls(qualifier)) {
    final PsiVariable variable=(PsiVariable)object;
    addToArrayConversion(element,prefix,"new " + componentType.getCanonicalText() + "["+ bracketSpace+ getQualifierText(qualifier)+ variable.getName()+ ".size("+ callSpace+ ")"+ bracketSpace+ "]","new " + getQualifierText(qualifier) + componentType.getPresentableText()+ "["+ variable.getName()+ ".size()]",result,qualifier);
  }
 else {
    boolean hasEmptyArrayField=false;
    final PsiClass psiClass=PsiUtil.resolveClassInType(type);
    if (psiClass != null) {
      for (      final PsiField field : psiClass.getAllFields()) {
        if (field.hasModifierProperty(PsiModifier.STATIC) && field.hasModifierProperty(PsiModifier.FINAL) && JavaPsiFacade.getInstance(field.getProject()).getResolveHelper().isAccessible(field,parameters.getPosition(),null)&& type.isAssignableFrom(field.getType())&& isEmptyArrayInitializer(field.getInitializer())) {
          boolean needQualify;
          try {
            needQualify=!field.isEquivalentTo(((PsiReferenceExpression)elementFactory.createExpressionFromText(field.getName(),element)).resolve());
          }
 catch (          IncorrectOperationException e) {
            continue;
          }
          addToArrayConversion(element,prefix,(needQualify ? field.getContainingClass().getQualifiedName() + "." : "") + field.getName(),(needQualify ? field.getContainingClass().getName() + "." : "") + field.getName(),result,qualifier);
          hasEmptyArrayField=true;
        }
      }
    }
    if (!hasEmptyArrayField) {
      addToArrayConversion(element,prefix,"new " + componentType.getCanonicalText() + "["+ bracketSpace+ "0"+ bracketSpace+ "]","new " + componentType.getPresentableText() + "[0]",result,qualifier);
    }
  }
}
