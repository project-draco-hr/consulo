{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(element.getProject()).getElementFactory();
  PsiType componentType=PsiUtil.extractIterableTypeParameter(parameters.getExpectedType(),true);
  final String callSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES);
  if (componentType == null || !(itemType instanceof PsiArrayType) || !componentType.isAssignableFrom(((PsiArrayType)itemType).getComponentType())) {
    return;
  }
  final String qualifierText=getQualifierText(qualifier);
  final PsiExpression conversion=elementFactory.createExpressionFromText(CommonClassNames.JAVA_UTIL_ARRAYS + ".asList(" + callSpace+ qualifierText+ prefix+ callSpace+ ")",element);
  final LookupItem item=LookupItemUtil.objectToLookupItem(conversion);
  @NonNls final String presentable="Arrays.asList(" + qualifierText + prefix+ ")";
  item.setLookupString(presentable);
  item.setPresentableText(presentable);
  item.addLookupStrings(prefix,presentable,"asList(" + prefix + ")");
  item.setIcon(Icons.METHOD_ICON);
  item.setInsertHandler(new SimpleInsertHandler(){
    public int handleInsert(    final Editor editor,    int startOffset,    final LookupElement item,    final LookupElement[] allItems,    final TailType tailType,    final char completionChar) throws IncorrectOperationException {
      final Document document=editor.getDocument();
      final int tailOffset=startOffset + item.getLookupString().length();
      RangeMarker tail=document.createRangeMarker(tailOffset,tailOffset);
      document.deleteString(startOffset - qualifierText.length(),startOffset);
      startOffset-=qualifierText.length();
      document.insertString(startOffset,"java.util.");
      final Project project=element.getProject();
      PsiDocumentManager.getInstance(project).commitDocument(document);
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
      try {
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(file,startOffset,startOffset + CommonClassNames.JAVA_UTIL_ARRAYS.length());
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();
      return tail.getEndOffset();
    }
  }
);
  result.addElement(item);
}
