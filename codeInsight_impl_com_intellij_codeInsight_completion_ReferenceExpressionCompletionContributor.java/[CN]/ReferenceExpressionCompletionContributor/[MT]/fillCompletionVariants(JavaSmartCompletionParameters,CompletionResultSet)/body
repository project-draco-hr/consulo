{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final PsiElement element=parameters.getPosition();
      if (psiElement().afterLeaf(psiElement().withText(")").withParent(PsiTypeCastExpression.class)).accepts(element))       return;
      final int offset=parameters.getOffset();
      final PsiReference reference=element.getContainingFile().findReferenceAt(offset);
      if (reference != null) {
        final Pair<ElementFilter,TailType> pair=getReferenceFilter(element,false,false);
        if (pair != null) {
          final PsiFile originalFile=parameters.getOriginalFile();
          final TailType tailType=pair.second;
          final ElementFilter filter=pair.first;
          final THashSet<LookupElement> set=JavaSmartCompletionContributor.completeReference(element,reference,originalFile,tailType,filter,result);
          for (          final LookupElement item : set) {
            result.addElement(item);
          }
          if (parameters.getInvocationCount() >= 2) {
            ElementFilter baseFilter=getReferenceFilter(element,true,false).first;
            final PsiClassType stringType=PsiType.getJavaLangString(element.getManager(),element.getResolveScope());
            for (            final LookupElement baseItem : JavaSmartCompletionContributor.completeReference(element,reference,originalFile,tailType,baseFilter,result)) {
              final Object object=baseItem.getObject();
              final String prefix=getItemText(object);
              if (prefix == null)               continue;
              final PsiSubstitutor substitutor=(PsiSubstitutor)((LookupItem)baseItem).getAttribute(LookupItem.SUBSTITUTOR);
              try {
                PsiType itemType=object instanceof PsiVariable ? ((PsiVariable)object).getType() : object instanceof PsiMethod ? ((PsiMethod)object).getReturnType() : null;
                if (substitutor != null) {
                  itemType=substitutor.substitute(itemType);
                }
                if (itemType == null)                 continue;
                final PsiElement qualifier=getQualifier(reference.getElement());
                if (!OBJECT_METHOD_PATTERN.accepts(object) || allowGetClass(object,parameters)) {
                  if (!stringType.equals(itemType)) {
                    addChainedCallVariants(element,originalFile,tailType,getReferenceFilter(element,true,true).first,prefix,substitutor,qualifier,result,parameters,itemType);
                  }
                }
                addArraysAsListConversions(element,prefix,itemType,parameters,result,qualifier);
                addToArrayConversions(element,object,prefix,itemType,parameters,result,qualifier);
                addArrayMemberAccessors(element,prefix,itemType,qualifier,parameters,result,(PsiModifierListOwner)object);
              }
 catch (              IncorrectOperationException e) {
              }
            }
          }
        }
      }
    }
  }
);
  return true;
}
