{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final PsiElement element=parameters.getPosition();
      if (psiElement().afterLeaf(psiElement().withText(")").withParent(PsiTypeCastExpression.class)).accepts(element))       return;
      final int offset=parameters.getOffset();
      final PsiReference reference=element.getContainingFile().findReferenceAt(offset);
      if (reference != null) {
        final Pair<ElementFilter,TailType> pair=getReferenceFilter(element,false);
        if (pair != null) {
          final PsiFile originalFile=parameters.getOriginalFile();
          final TailType tailType=pair.second;
          final ElementFilter filter=pair.first;
          final THashSet<LookupItem> set=JavaSmartCompletionContributor.completeReference(element,reference,originalFile,tailType,filter,result);
          for (          final LookupItem item : set) {
            result.addElement(item);
          }
          if (parameters.getInvocationCount() >= 2) {
            ElementFilter qualifierFilter=getReferenceFilter(element,true).first;
            for (            final LookupItem<?> qualifier : JavaSmartCompletionContributor.completeReference(element,reference,originalFile,tailType,qualifierFilter,result)) {
              final Object object=qualifier.getObject();
              final String prefix=getItemText(object);
              if (prefix == null)               continue;
              final PsiSubstitutor substitutor=(PsiSubstitutor)qualifier.getAttribute(LookupItem.SUBSTITUTOR);
              try {
                final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(element.getProject()).getElementFactory();
                String qualifierText="";
                if (reference instanceof PsiJavaCodeReferenceElement) {
                  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)reference;
                  final PsiElement q=referenceElement.getQualifier();
                  if (q != null) {
                    qualifierText=q.getText() + ".";
                  }
                }
                final PsiExpression ref=elementFactory.createExpressionFromText(qualifierText + prefix + ".xxx",element);
                for (                final LookupItem<?> item : JavaSmartCompletionContributor.completeReference(element,(PsiReferenceExpression)ref,originalFile,tailType,qualifierFilter,result)) {
                  if (item.getObject() instanceof PsiMethod) {
                    final PsiMethod method=(PsiMethod)item.getObject();
                    if (PsiJavaPatterns.psiMethod().withName("toArray").withParameterCount(1).definedInClass(CommonClassNames.JAVA_UTIL_COLLECTION).accepts(method)) {
                      continue;
                    }
                    final QualifiedMethodLookupItem newItem=new QualifiedMethodLookupItem(method,prefix);
                    final PsiSubstitutor newSubstitutor=(PsiSubstitutor)item.getAttribute(LookupItem.SUBSTITUTOR);
                    if (substitutor != null || newSubstitutor != null) {
                      newItem.setAttribute(LookupItem.SUBSTITUTOR,substitutor == null ? newSubstitutor : newSubstitutor == null ? substitutor : substitutor.putAll(newSubstitutor));
                    }
                    result.addElement(newItem);
                  }
 else {
                    item.setAttribute(JavaCompletionUtil.QUALIFIER_PREFIX_ATTRIBUTE,prefix + ".");
                    item.setLookupString(prefix + "." + item.getLookupString());
                    result.addElement(item);
                  }
                }
                PsiType itemType=object instanceof PsiVariable ? ((PsiVariable)object).getType() : object instanceof PsiMethod ? ((PsiMethod)object).getReturnType() : null;
                if (substitutor != null) {
                  itemType=substitutor.substitute(itemType);
                }
                if (itemType == null)                 continue;
                PsiType componentType=PsiUtil.extractIterableTypeParameter(parameters.getExpectedType());
                final String callSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES);
                if (componentType != null) {
                  if (itemType instanceof PsiArrayType) {
                    if (componentType.isAssignableFrom(((PsiArrayType)itemType).getComponentType())) {
                      final PsiExpression conversion=elementFactory.createExpressionFromText(CommonClassNames.JAVA_UTIL_ARRAYS + ".asList(" + callSpace+ prefix+ callSpace+ ")",element);
                      final LookupItem item=LookupItemUtil.objectToLookupItem(conversion);
                      @NonNls final String presentable="Arrays.asList(" + prefix + ")";
                      item.setLookupString(presentable);
                      item.setPresentableText(presentable);
                      item.addLookupStrings(prefix,presentable,"asList(" + prefix + ")");
                      item.setIcon(Icons.METHOD_ICON);
                      item.setInsertHandler(new SimpleInsertHandler(){
                        public int handleInsert(                        final Editor editor,                        final int startOffset,                        final LookupElement item,                        final LookupElement[] allItems,                        final TailType tailType,                        final char completionChar) throws IncorrectOperationException {
                          final Document document=editor.getDocument();
                          final int tailOffset=startOffset + item.getLookupString().length();
                          RangeMarker tail=document.createRangeMarker(tailOffset,tailOffset);
                          document.insertString(startOffset,"java.util.");
                          final Project project=editor.getProject();
                          PsiDocumentManager.getInstance(project).commitDocument(document);
                          final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
                          try {
                            JavaCodeStyleManager.getInstance(project).shortenClassReferences(file,startOffset,startOffset + CommonClassNames.JAVA_UTIL_ARRAYS.length());
                          }
 catch (                          IncorrectOperationException e) {
                            LOG.error(e);
                          }
                          PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();
                          return tail.getEndOffset();
                        }
                      }
);
                      result.addElement(item);
                    }
                  }
                }
                componentType=PsiUtil.substituteTypeParameter(itemType,CommonClassNames.JAVA_UTIL_COLLECTION,0);
                if (componentType != null && parameters.getExpectedType() instanceof PsiArrayType) {
                  final PsiArrayType type=(PsiArrayType)parameters.getExpectedType();
                  if (type.getComponentType().isAssignableFrom(componentType) && !(componentType instanceof PsiClassType && ((PsiClassType)componentType).hasParameters())) {
                    final String bracketSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_BRACKETS);
                    if (object instanceof PsiVariable) {
                      final PsiVariable variable=(PsiVariable)object;
                      addToArrayConversion(element,prefix,"new " + componentType.getCanonicalText() + "["+ bracketSpace+ variable.getName()+ ".size("+ callSpace+ ")"+ bracketSpace+ "]","new " + componentType.getPresentableText() + "["+ variable.getName()+ ".size()]",result);
                    }
 else {
                      boolean hasEmptyArrayField=false;
                      final PsiClass psiClass=PsiUtil.resolveClassInType(type);
                      if (psiClass != null) {
                        for (                        final PsiField field : psiClass.getAllFields()) {
                          if (field.hasModifierProperty(PsiModifier.STATIC) && field.hasModifierProperty(PsiModifier.FINAL) && JavaPsiFacade.getInstance(field.getProject()).getResolveHelper().isAccessible(field,parameters.getPosition(),null)&& type.isAssignableFrom(field.getType())&& isEmptyArrayInitializer(field.getInitializer())) {
                            boolean needQualify=!field.isEquivalentTo(((PsiReferenceExpression)elementFactory.createExpressionFromText(field.getName(),element)).resolve());
                            addToArrayConversion(element,prefix,(needQualify ? field.getContainingClass().getQualifiedName() + "." : "") + field.getName(),(needQualify ? field.getContainingClass().getName() + "." : "") + field.getName(),result);
                            hasEmptyArrayField=true;
                          }
                        }
                      }
                      if (!hasEmptyArrayField) {
                        addToArrayConversion(element,prefix,"new " + componentType.getCanonicalText() + "["+ bracketSpace+ "0"+ bracketSpace+ "]","new " + componentType.getPresentableText() + "[0]",result);
                      }
                    }
                  }
                }
              }
 catch (              IncorrectOperationException e) {
              }
            }
          }
        }
      }
    }
  }
);
  return true;
}
