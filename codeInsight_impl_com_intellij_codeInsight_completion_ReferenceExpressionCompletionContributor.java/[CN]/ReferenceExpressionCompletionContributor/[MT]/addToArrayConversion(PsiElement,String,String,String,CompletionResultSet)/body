{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(element.getProject()).getElementFactory();
  final boolean callSpace=CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES;
  final PsiExpression conversion=elementFactory.createExpressionFromText(prefix + ".toArray(" + getSpace(callSpace)+ expressionString+ getSpace(callSpace)+ ")",element);
  final LookupItem item=LookupItemUtil.objectToLookupItem(conversion);
  item.setPresentableText(prefix + ".toArray(" + presentableString+ ")");
  item.addLookupStrings(prefix,presentableString);
  item.setIcon(Icons.METHOD_ICON);
  item.setInsertHandler(new SimpleInsertHandler(){
    public int handleInsert(    final Editor editor,    final int startOffset,    final LookupElement item,    final LookupElement[] allItems,    final TailType tailType,    final char completionChar) throws IncorrectOperationException {
      final Document document=editor.getDocument();
      final int tailOffset=startOffset + item.getLookupString().length();
      RangeMarker tail=document.createRangeMarker(tailOffset,tailOffset);
      final Project project=editor.getProject();
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
      try {
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(file,startOffset,tailOffset);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();
      return tail.getEndOffset();
    }
  }
);
  result.addElement(item);
}
