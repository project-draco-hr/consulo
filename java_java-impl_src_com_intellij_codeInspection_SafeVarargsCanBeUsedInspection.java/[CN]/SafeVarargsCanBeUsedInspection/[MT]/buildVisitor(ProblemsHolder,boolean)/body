{
  return new JavaElementVisitor(){
    @Override public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      if (!PsiUtil.getLanguageLevel(method).isAtLeast(LanguageLevel.JDK_1_7))       return;
      if (AnnotationUtil.isAnnotated(method,"java.lang.SafeVarargs",false))       return;
      if (!method.isVarArgs())       return;
      final PsiParameter psiParameter=method.getParameterList().getParameters()[method.getParameterList().getParametersCount() - 1];
      final PsiType componentType=((PsiEllipsisType)psiParameter.getType()).getComponentType();
      if (GenericsHighlightUtil.isReifiableType(componentType)) {
        return;
      }
      for (      PsiReference reference : ReferencesSearch.search(psiParameter)) {
        final PsiElement element=reference.getElement();
        if (element instanceof PsiExpression && !PsiUtil.isAccessedForReading((PsiExpression)element)) {
          return;
        }
      }
      final PsiIdentifier nameIdentifier=method.getNameIdentifier();
      if (nameIdentifier != null) {
        holder.registerProblem(nameIdentifier,"Possible heap pollution from parameterized vararg type #loc",method.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.STATIC) ? new AnnotateAsSafeVarargsQuickFix() : null);
      }
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
  }
;
}
