{
  final PsiExpression operand;
  if (element instanceof PsiPostfixExpression) {
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)element;
    operand=postfixExpression.getOperand();
  }
 else {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)element;
    operand=prefixExpression.getOperand();
  }
  if (operand == null) {
    return;
  }
  final PsiStatement statement=PsiTreeUtil.getParentOfType(element,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final PsiElement parent=statement.getParent();
  if (parent == null) {
    return;
  }
  final PsiManager manager=element.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  final String newStatementText=element.getText() + ';';
  final String operandText=operand.getText();
  if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) {
    final StringBuilder text=new StringBuilder();
    text.append('{');
    if (element instanceof PsiPostfixExpression) {
      appendElementText(statement,element,operandText,text);
      text.append(newStatementText);
    }
 else {
      text.append(newStatementText);
      appendElementText(statement,element,operandText,text);
    }
    text.append('}');
    final PsiCodeBlock codeBlock=factory.createCodeBlockFromText(text.toString(),parent);
    statement.replace(codeBlock);
    return;
  }
  final PsiStatement newStatement=factory.createStatementFromText(newStatementText,null);
  if (!(statement instanceof PsiForStatement)) {
    if (element instanceof PsiPostfixExpression) {
      parent.addAfter(newStatement,statement);
    }
 else {
      parent.addBefore(newStatement,statement);
    }
  }
  if (statement instanceof PsiLoopStatement) {
    final PsiLoopStatement loopStatement=(PsiLoopStatement)statement;
    final PsiStatement body=loopStatement.getBody();
    if (body instanceof PsiBlockStatement) {
      final PsiBlockStatement blockStatement=(PsiBlockStatement)body;
      final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
      if (element instanceof PsiPostfixExpression) {
        final PsiElement firstElement=codeBlock.getFirstBodyElement();
        codeBlock.addBefore(newStatement,firstElement);
      }
 else {
        codeBlock.add(newStatement);
      }
    }
 else {
      final StringBuilder blockText=new StringBuilder();
      blockText.append('{');
      if (element instanceof PsiPostfixExpression) {
        blockText.append(newStatementText);
        if (body != null) {
          blockText.append(body.getText());
        }
      }
 else {
        if (body != null) {
          blockText.append(body.getText());
        }
        blockText.append(newStatementText);
      }
      blockText.append('}');
      final PsiStatement blockStatement=factory.createStatementFromText(blockText.toString(),statement);
      if (body == null) {
        loopStatement.add(blockStatement);
      }
 else {
        body.replace(blockStatement);
      }
    }
  }
  replaceExpression(operandText,(PsiExpression)element);
}
