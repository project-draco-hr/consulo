{
  final Set<Artifact> result=new HashSet<Artifact>(Arrays.asList(context.getArtifactModel().getArtifacts()));
  ArtifactUtil.processPackagingElements(artifact,ARTIFACT_ELEMENT_TYPE,new Processor<ArtifactPackagingElement>(){
    public boolean process(    ArtifactPackagingElement artifactPackagingElement){
      result.remove(artifactPackagingElement.findArtifact(context));
      return true;
    }
  }
,context,true);
  result.remove(artifact);
  final Iterator<Artifact> iterator=result.iterator();
  while (iterator.hasNext()) {
    Artifact another=iterator.next();
    final boolean notContainThis=ArtifactUtil.processPackagingElements(another,ARTIFACT_ELEMENT_TYPE,new Processor<ArtifactPackagingElement>(){
      public boolean process(      ArtifactPackagingElement element){
        return !artifact.getName().equals(element.getArtifactName());
      }
    }
,context,true);
    if (!notContainThis) {
      iterator.remove();
    }
  }
  return new ArrayList<Artifact>(result);
}
