{
  final PsiManager mgr=PsiManager.getInstance(project);
  final PsiElementFactory factory=mgr.getElementFactory();
  PsiExpression expressionToReplace=exp;
  final String expString;
  final String newExpressionText=newExpression.getText();
  if (BoolUtils.isNegated(exp)) {
    expressionToReplace=BoolUtils.findNegation(exp);
    expString=newExpressionText;
  }
 else   if (ComparisonUtils.isComparison(newExpression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)newExpression;
    final PsiJavaToken sign=binaryExpression.getOperationSign();
    final String operator=sign.getText();
    final String negatedComparison=ComparisonUtils.getNegatedComparison(operator);
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    expString=lhs.getText() + negatedComparison + rhs.getText();
  }
 else {
    if (ParenthesesUtils.getPrecendence(newExpression) > ParenthesesUtils.PREFIX_PRECEDENCE) {
      expString="!(" + newExpressionText + ')';
    }
 else {
      expString='!' + newExpressionText;
    }
  }
  final PsiExpression newCall=factory.createExpressionFromText(expString,null);
  final PsiElement insertedElement=expressionToReplace.replace(newCall);
  final CodeStyleManager codeStyleManager=mgr.getCodeStyleManager();
  codeStyleManager.reformat(insertedElement);
}
