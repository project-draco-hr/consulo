{
  Color bgColor;
  Color fgColor;
  boolean paintHighlightsBackground;
  boolean paintHighlightsForeground;
  if (myIsSelected && myHasFocus) {
    bgColor=UIManager.getColor("Tree.selectionBackground");
    fgColor=UIManager.getColor("Tree.selectionForeground");
    paintHighlightsBackground=false;
    paintHighlightsForeground=false;
  }
 else {
    bgColor=myEnforcedBackground == null ? UIManager.getColor("Tree.textBackground") : myEnforcedBackground;
    fgColor=getForeground();
    paintHighlightsBackground=isOpaque();
    paintHighlightsForeground=true;
  }
  int textOffset=getTextOffset();
  int offset=textOffset;
  if (isOpaque()) {
    g.setColor(getBackground());
    g.fillRect(0,0,textOffset - 2,getHeight() - 1);
    g.setColor(bgColor);
    g.fillRect(textOffset - 2,0,getWidth() - 1,getHeight() - 1);
  }
  if (myIcon != null) {
    myIcon.paintIcon(this,g,0,(getHeight() - myIcon.getIconHeight()) / 2);
  }
  FontMetrics defFontMetrics=getFontMetrics(getFont());
  if (myText == null) {
    myText="";
  }
  final int yOffset=(getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1;
  if (myHighlightedRegions.size() == 0) {
    g.setColor(fgColor);
    g.drawString(myText,textOffset,yOffset);
  }
 else {
    int endIndex=0;
    for (int i=0; i < myHighlightedRegions.size(); i++) {
      HighlightedRegion hRegion=(HighlightedRegion)myHighlightedRegions.get(i);
      String text=myText.substring(endIndex,hRegion.startOffset);
      endIndex=hRegion.endOffset;
      if (text.length() != 0) {
        g.setColor(fgColor);
        g.setFont(defFontMetrics.getFont());
        g.drawString(text,offset,yOffset);
        offset+=defFontMetrics.stringWidth(text);
      }
      FontMetrics fontMetrics=(FontMetrics)myFontMetrics.get(hRegion.textAttributes.getFontType());
      text=myText.substring(hRegion.startOffset,hRegion.endOffset);
      if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) {
        g.setColor(hRegion.textAttributes.getBackgroundColor());
        g.fillRect(offset,0,fontMetrics.stringWidth(text),fontMetrics.getHeight() + fontMetrics.getLeading());
      }
      if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) {
        g.setColor(hRegion.textAttributes.getForegroundColor());
      }
 else {
        g.setColor(fgColor);
      }
      g.setFont(fontMetrics.getFont());
      g.drawString(text,offset,yOffset);
      if (hRegion.textAttributes.getEffectColor() != null) {
        g.setColor(hRegion.textAttributes.getEffectColor());
        int y=yOffset + 2;
        g.drawLine(offset,y,offset + fontMetrics.stringWidth(text) - 1,y);
      }
      if (hRegion.textAttributes.getEffectColor() != null && hRegion.textAttributes.getEffectType() == EffectType.BOXED) {
        g.setColor(hRegion.textAttributes.getEffectColor());
        g.drawRect(offset,0,fontMetrics.stringWidth(text) - 1,fontMetrics.getHeight() + fontMetrics.getLeading() - 1);
      }
      offset+=fontMetrics.stringWidth(text);
    }
    String text=myText.substring(endIndex,myText.length());
    if (text.length() != 0) {
      g.setColor(fgColor);
      g.setFont(defFontMetrics.getFont());
      g.drawString(text,offset,yOffset);
    }
  }
  if (myIsSelected) {
    g.setColor(UIManager.getColor("Tree.selectionBorderColor"));
    BegTreeHandleUtil.drawDottedRectangle(g,textOffset - 2,0,getWidth() - 1,getHeight() - 1);
  }
  super.paintComponent(g);
}
