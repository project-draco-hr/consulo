{
  final Map<GitRepository,Integer> successfulRepositoriesWithPushedCommitCount=new HashMap<GitRepository,Integer>();
  GitCompoundResult result=new GitCompoundResult(myProject);
  for (  Map.Entry<GitRepository,Integer> entry : pushInfo.getRepositoriesWithPushCommitCount().entrySet()) {
    GitRepository repository=entry.getKey();
    GitCommandResult res=Git.push(repository,pushInfo.getPushSpec());
    result.append(repository,res);
    if (res.success()) {
      successfulRepositoriesWithPushedCommitCount.put(repository,entry.getValue());
    }
  }
  Notification notification;
  if (result.totalSuccess()) {
    int commitsPushed=0;
    for (    Integer integer : successfulRepositoriesWithPushedCommitCount.values()) {
      commitsPushed+=integer;
    }
    notification=GitVcs.NOTIFICATION_GROUP_ID.createNotification("Pushed " + commitsPushed + " "+ StringUtil.pluralize("commit",commitsPushed),NotificationType.INFORMATION);
  }
 else   if (result.partialSuccess()) {
    StringBuilder errorReport=new StringBuilder(result.getErrorOutputWithReposIndication());
    errorReport.append("However some pushes were successful: <br/>");
    for (    Map.Entry<GitRepository,Integer> entry : successfulRepositoriesWithPushedCommitCount.entrySet()) {
      Integer commitNum=entry.getValue();
      errorReport.append("<code>" + entry.getKey().getPresentableUrl() + "</code>: pushed "+ commitNum+ " "+ StringUtil.pluralize("commit",commitNum)+ ".<br/>");
    }
    notification=GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification("Push failed for some repositories",errorReport.toString(),NotificationType.WARNING,null);
  }
 else {
    notification=GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification("Push failed",result.getErrorOutputWithReposIndication(),NotificationType.ERROR,null);
  }
  notification.notify(myProject);
}
