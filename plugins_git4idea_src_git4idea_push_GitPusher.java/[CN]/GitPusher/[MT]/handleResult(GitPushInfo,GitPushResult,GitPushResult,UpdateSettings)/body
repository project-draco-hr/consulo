{
  result.mergeFrom(previousResult);
  if (result.isEmpty()) {
    GitVcs.NOTIFICATION_GROUP_ID.createNotification("Nothing to push",NotificationType.INFORMATION).notify(myProject);
  }
 else   if (result.wasErrorCancelOrNotAuthorized()) {
    result.createNotification().notify(myProject);
  }
 else {
    Map<GitRepository,GitBranch> rejectedPushesForCurrentBranch=result.getRejectedPushesForCurrentBranch();
    if (!rejectedPushesForCurrentBranch.isEmpty()) {
      if (updateSettings == null) {
        updateSettings=readUpdateSettings();
        if (!mySettings.autoUpdateIfPushRejected()) {
          final GitRejectedPushUpdateDialog dialog=new GitRejectedPushUpdateDialog(myProject,rejectedPushesForCurrentBranch.keySet(),updateSettings);
          final int exitCode=showDialogAndGetExitCode(dialog);
          updateSettings=new UpdateSettings(dialog.shouldUpdateAll(),getUpdateMethodFromDialogExitCode(exitCode));
          saveUpdateSettings(updateSettings);
        }
      }
      if (updateSettings.shouldUpdate()) {
        Collection<GitRepository> repositoriesToUpdate=getRootsToUpdate(rejectedPushesForCurrentBranch,updateSettings.shouldUpdateAllRoots());
        GitPushResult adjustedPushResult=result.remove(rejectedPushesForCurrentBranch);
        adjustedPushResult.markUpdateStartIfNotMarked(repositoriesToUpdate);
        boolean updateResult=update(getRootsFromRepositories(repositoriesToUpdate),updateSettings.getUpdateMethod());
        if (updateResult) {
          myProgressIndicator.setText(INDICATOR_TEXT);
          GitPushInfo newPushInfo=pushInfo.retain(rejectedPushesForCurrentBranch);
          push(newPushInfo,adjustedPushResult,updateSettings);
          return;
        }
      }
    }
    result.createNotification().notify(myProject);
  }
}
