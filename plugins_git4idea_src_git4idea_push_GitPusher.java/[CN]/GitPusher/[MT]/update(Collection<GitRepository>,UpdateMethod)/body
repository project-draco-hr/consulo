{
  GitUpdateProcess.UpdateMethod um=updateMethod == UpdateMethod.MERGE ? GitUpdateProcess.UpdateMethod.MERGE : GitUpdateProcess.UpdateMethod.REBASE;
  GitUpdateResult updateResult=new GitUpdateProcess(myProject,myProgressIndicator,new HashSet<GitRepository>(rootsToUpdate),UpdatedFiles.create()).update(um);
  for (  GitRepository repository : rootsToUpdate) {
    repository.getRoot().refresh(true,true);
  }
  if (updateResult == GitUpdateResult.SUCCESS) {
    return true;
  }
 else   if (updateResult == GitUpdateResult.SUCCESS_WITH_RESOLVED_CONFLICTS || updateResult == GitUpdateResult.INCOMPLETE) {
    String title="Push cancelled";
    String description;
    if (updateResult == GitUpdateResult.INCOMPLETE) {
      description="Push has been cancelled, because not all conflicts were resolved during update.<br/>" + "Resolve the conflicts and invoke push again.";
    }
 else {
      description="Push has been cancelled, because there were conflicts during update.<br/>" + "Check that conflicts were resolved correctly, and invoke push again.";
    }
    new Notification(GitVcs.MINOR_NOTIFICATION.getDisplayId(),title,description,NotificationType.WARNING).notify(myProject);
    return false;
  }
 else {
    return false;
  }
}
