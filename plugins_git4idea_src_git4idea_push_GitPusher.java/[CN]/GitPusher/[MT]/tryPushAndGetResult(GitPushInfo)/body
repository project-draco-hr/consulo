{
  GitPushResult pushResult=new GitPushResult(myProject);
  GitCommitsByRepoAndBranch commits=pushInfo.getCommits();
  for (  GitRepository repository : commits.getRepositories()) {
    GitPushRejectedDetector rejectedDetector=new GitPushRejectedDetector();
    GitCommandResult res=Git.push(repository,pushInfo.getPushSpec(),rejectedDetector);
    GitPushRepoResult repoResult;
    if (rejectedDetector.rejected()) {
      Collection<String> rejectedBranches=rejectedDetector.getRejectedBranches();
      Map<GitBranch,GitPushBranchResult> resultMap=new HashMap<GitBranch,GitPushBranchResult>();
      GitCommitsByBranch commitsByBranch=commits.get(repository);
      boolean pushedBranchWasRejected=false;
      for (      GitBranch branch : commitsByBranch.getBranches()) {
        GitPushBranchResult branchResult;
        if (branchInRejected(branch,rejectedBranches)) {
          branchResult=GitPushBranchResult.rejected();
          pushedBranchWasRejected=true;
        }
 else {
          branchResult=successfulResultForBranch(commitsByBranch,branch);
        }
        resultMap.put(branch,branchResult);
      }
      if (pushedBranchWasRejected) {
        repoResult=GitPushRepoResult.someRejected(resultMap,res);
      }
 else {
        repoResult=GitPushRepoResult.success(resultMap,res);
      }
    }
 else     if (res.success()) {
      repoResult=successOrErrorRepoResult(commits,repository,res,true);
    }
 else {
      repoResult=successOrErrorRepoResult(commits,repository,res,false);
    }
    pushResult.append(repository,repoResult);
  }
  return pushResult;
}
