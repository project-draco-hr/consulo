{
  final ActionManager actionManager=ActionManager.getInstance();
  @NonNls final String actionId="BROWSER_" + family.toString();
  AnAction action=actionManager.getAction(actionId);
  if (action == null) {
    action=new AnAction(family.getName(),XmlBundle.message("browser.description",family.getName()),getBrowserIcon(family)){
      @Nullable private PsiFile getFile(      @NotNull final DataContext context){
        final Editor editor=PlatformDataKeys.EDITOR.getData(context);
        if (editor != null) {
          final Project project=editor.getProject();
          if (project != null) {
            final PsiDocumentManager manager=PsiDocumentManager.getInstance(project);
            final PsiFile psiFile=manager.getPsiFile(editor.getDocument());
            if (psiFile != null) {
              return psiFile;
            }
          }
        }
        return null;
      }
      @Nullable private WebBrowserUrlProvider getProvider(      @NotNull PsiFile file){
        final WebBrowserUrlProvider[] providers=Extensions.getExtensions(WebBrowserUrlProvider.EXTENSION_POINT_NAME);
        for (        WebBrowserUrlProvider provider : providers) {
          if (provider.isAvailableFor(file)) {
            return provider;
          }
        }
        return null;
      }
      public void actionPerformed(      final AnActionEvent e){
        final PsiFile psiFile=getFile(e.getDataContext());
        LOG.assertTrue(psiFile != null);
        final WebBrowserUrlProvider provider=getProvider(psiFile);
        LOG.assertTrue(provider != null);
        final Project project=psiFile.getProject();
        PsiDocumentManager.getInstance(project).commitAllDocuments();
        try {
          launchBrowser(family,provider.getUrl(psiFile,project,e.getInputEvent().isShiftDown()));
        }
 catch (        WebBrowserUrlProvider.BrowserException e1) {
          Messages.showErrorDialog(e1.getMessage(),XmlBundle.message("browser.error"));
        }
catch (        Exception e1) {
          LOG.error(e1);
        }
      }
      @Override public void update(      final AnActionEvent e){
        boolean visible=suggestBrowserPath(family).second.booleanValue();
        if (visible) {
          visible=false;
          final PsiFile file=getFile(e.getDataContext());
          if (file != null) {
            final WebBrowserUrlProvider urlProvider=getProvider(file);
            visible=urlProvider != null;
          }
        }
        final Presentation presentation=e.getPresentation();
        presentation.setVisible(visible);
      }
    }
;
    actionManager.registerAction(actionId,action);
    AnAction actionGroup=actionManager.getAction("EditorContextBarMenu");
    if (actionGroup == null) {
      actionGroup=new DefaultActionGroup();
      actionManager.registerAction("EditorContextBarMenu",actionGroup);
    }
    if (actionGroup instanceof DefaultActionGroup) {
      ((DefaultActionGroup)actionGroup).add(action);
    }
  }
}
