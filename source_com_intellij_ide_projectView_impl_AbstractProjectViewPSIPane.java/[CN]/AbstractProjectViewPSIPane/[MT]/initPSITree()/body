{
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  myTree.putClientProperty("JTree.lineStyle","Angled");
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.expandPath(new TreePath(myTree.getModel().getRoot()));
  myTree.setSelectionPath(new TreePath(myTree.getModel().getRoot()));
  ActionGroup group=(ActionGroup)ActionManager.getInstance().getAction(IdeActions.GROUP_PROJECT_VIEW_POPUP);
  PopupHandler.installPopupHandler(myTree,group,ActionPlaces.PROJECT_VIEW_POPUP,ActionManager.getInstance());
  EditSourceOnDoubleClickHandler.install(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      fireTreeChangeListener();
    }
  }
);
  myTree.getModel().addTreeModelListener(new TreeModelListener(){
    public void treeNodesChanged(    TreeModelEvent e){
      fireTreeChangeListener();
    }
    public void treeNodesInserted(    TreeModelEvent e){
      fireTreeChangeListener();
    }
    public void treeNodesRemoved(    TreeModelEvent e){
      fireTreeChangeListener();
    }
    public void treeStructureChanged(    TreeModelEvent e){
      fireTreeChangeListener();
    }
  }
);
  new MySpeedSearch(myTree);
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode()) {
        final DefaultMutableTreeNode selectedNode=myTree.getSelectedNode();
        if (selectedNode != null && !selectedNode.isLeaf()) {
          return;
        }
        DataContext dataContext=DataManager.getInstance().getDataContext(myTree);
        OpenSourceUtil.openSourcesFrom(dataContext,false);
      }
 else       if (KeyEvent.VK_ESCAPE == e.getKeyCode()) {
        if (e.isConsumed())         return;
        CopyPasteManagerEx copyPasteManager=(CopyPasteManagerEx)CopyPasteManager.getInstance();
        boolean[] isCopied=new boolean[1];
        if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) {
          copyPasteManager.clear();
          e.consume();
        }
      }
    }
  }
);
}
