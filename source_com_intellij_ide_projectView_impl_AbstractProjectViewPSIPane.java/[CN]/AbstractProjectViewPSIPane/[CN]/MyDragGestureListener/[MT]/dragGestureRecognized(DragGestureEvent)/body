{
  if ((dge.getDragAction() & DnDConstants.ACTION_MOVE) == 0)   return;
  final Point dragOrigin=dge.getDragOrigin();
  final AbstractTreeNode draggableObject=findAbstractTreeNodeByLocation(dragOrigin);
  if (draggableObject != null) {
    try {
      FavoritesViewImpl.getInstance(myProject).getCurrentTreeViewPanel().setDraggableObject(draggableObject.getClass(),draggableObject.getValue());
      final MyDragSourceListener dragSourceListener=new MyDragSourceListener();
      dge.startDrag(DragSource.DefaultMoveNoDrop,new Transferable(){
        public DataFlavor[] getTransferDataFlavors(){
          return FLAVORS;
        }
        public boolean isDataFlavorSupported(        DataFlavor flavor){
          DataFlavor[] flavors=getTransferDataFlavors();
          return ArrayUtil.find(flavors,flavor) != -1;
        }
        public Object getTransferData(        DataFlavor flavor){
          return null;
        }
      }
,dragSourceListener);
    }
 catch (    InvalidDnDOperationException idoe) {
    }
  }
}
