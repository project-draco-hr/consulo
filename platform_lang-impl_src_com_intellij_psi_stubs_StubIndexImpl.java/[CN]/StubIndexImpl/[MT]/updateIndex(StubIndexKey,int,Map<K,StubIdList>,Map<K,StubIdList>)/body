{
  try {
    final MyIndex<K> index=(MyIndex<K>)myIndices.get(key);
    UpdateData<K,StubIdList> updateData;
    if (MapDiffUpdateData.ourDiffUpdateEnabled) {
      updateData=new MapDiffUpdateData<K,StubIdList>(key){
        @Override public void save(        int inputId) throws IOException {
        }
        @Override protected Map<K,StubIdList> getNewValue(){
          return newValues;
        }
        @Override protected Map<K,StubIdList> getCurrentValue() throws IOException {
          return oldValues;
        }
      }
;
    }
 else {
      updateData=index.new SimpleUpdateData(key,fileId,newValues,new NotNullComputable<Collection<K>>(){
        @NotNull @Override public Collection<K> compute(){
          return oldValues.keySet();
        }
      }
);
    }
    index.updateWithMap(fileId,updateData);
  }
 catch (  StorageException e) {
    LOG.info(e);
    requestRebuild();
  }
}
