{
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  FileBasedIndex.getInstance().ensureUpToDate(StubUpdatingIndex.INDEX_ID,project,scope);
  final Set<Key> result=new THashSet<Key>();
  final PersistentFS fs=(PersistentFS)ManagingFS.getInstance();
  final MyIndex<Key> index=(MyIndex<Key>)myIndices.get(indexKey);
  final Collection<Key> allKeys=getAllKeys(indexKey,project);
  for (  final Key key : allKeys) {
    try {
      try {
        FileBasedIndex.disableUpToDateCheckForCurrentThread();
        index.getReadLock().lock();
        final ValueContainer<TIntArrayList> container=index.getData(key);
        container.forEach(new ValueContainer.ContainerAction<TIntArrayList>(){
          public void perform(          final int id,          final TIntArrayList value){
            final VirtualFile file=IndexInfrastructure.findFileById(fs,id);
            if (file != null && (scope == null || scope.contains(file))) {
              result.add(key);
            }
          }
        }
);
      }
  finally {
        index.getReadLock().unlock();
        FileBasedIndex.enableUpToDateCheckForCurrentThread();
      }
    }
 catch (    StorageException e) {
      forceRebuild(e);
    }
catch (    RuntimeException e) {
      final Throwable cause=e.getCause();
      if (cause instanceof IOException || cause instanceof StorageException) {
        forceRebuild(e);
      }
 else {
        throw e;
      }
    }
  }
  return result;
}
