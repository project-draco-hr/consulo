{
  super.updateImpl(data);
  int fileCount=getStructure().getFileCount(getValue());
  if (getValue() == null || !getValue().isValid() || fileCount == 0) {
    setValue(null);
    return;
  }
  VirtualFile directory=getValue().getVirtualFile();
  boolean isProjectRoot=!ProjectRootManager.getInstance(getProject()).getFileIndex().isInContent(directory);
  String newName=isProjectRoot || getStructure().getIsFlattenPackages() ? getValue().getVirtualFile().getPresentableUrl() : getValue().getName();
  StringBuffer sb=new StringBuffer(newName);
  int nameEndOffset=newName.length();
  int todoItemCount=getStructure().getTodoItemCount(getValue());
  sb.append(" ( ").append(todoItemCount).append(" item");
  if (todoItemCount > 1) {
    sb.append('s');
  }
  sb.append(" in " + fileCount).append(" file");
  if (fileCount > 1) {
    sb.append('s');
  }
  sb.append(" )");
  newName=sb.toString();
  myHighlightedRegions.clear();
  TextAttributes textAttributes=new TextAttributes();
  Color newColor=FileStatusManager.getInstance(getProject()).getStatus(getValue().getVirtualFile()).getColor();
  if (CopyPasteManager.getInstance().isCutElement(getValue())) {
    newColor=CopyPasteManager.CUT_COLOR;
  }
  textAttributes.setForegroundColor(newColor);
  myHighlightedRegions.add(new HighlightedRegion(0,nameEndOffset,textAttributes));
  EditorColorsScheme colorsScheme=UsageTreeColorsScheme.getInstance().getScheme();
  myHighlightedRegions.add(new HighlightedRegion(nameEndOffset,newName.length(),colorsScheme.getAttributes(UsageTreeColors.NUMBER_OF_USAGES)));
  data.setPresentableText(newName);
}
