{
  super.visitSynchronizedStatement(statement);
  final PsiElement parent=statement.getParent();
  if (!(parent instanceof PsiCodeBlock)) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethod)) {
    return;
  }
  final PsiMethod method=(PsiMethod)grandParent;
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length != 1) {
    return;
  }
  final PsiExpression lockExpression=statement.getLockExpression();
  if (method.hasModifierProperty(PsiModifier.STATIC)) {
    if (!(lockExpression instanceof PsiClassObjectAccessExpression)) {
      return;
    }
    final PsiClassObjectAccessExpression classExpression=(PsiClassObjectAccessExpression)lockExpression;
    final PsiTypeElement typeElement=classExpression.getOperand();
    final PsiType type=typeElement.getType();
    if (!(type instanceof PsiClassType)) {
      return;
    }
    final PsiClassType classType=(PsiClassType)type;
    final PsiClass aClass=classType.resolve();
    final PsiClass containingClass=method.getContainingClass();
    if (aClass != containingClass) {
      return;
    }
    registerMethodError(method);
  }
 else {
    if (!(lockExpression instanceof PsiThisExpression)) {
      return;
    }
    final PsiThisExpression thisExpression=(PsiThisExpression)lockExpression;
    final PsiJavaCodeReferenceElement qualifier=thisExpression.getQualifier();
    if (qualifier != null) {
      final PsiElement target=qualifier.resolve();
      final PsiClass containingClass=method.getContainingClass();
      if (!containingClass.equals(target)) {
        return;
      }
    }
    registerMethodError(method);
  }
}
