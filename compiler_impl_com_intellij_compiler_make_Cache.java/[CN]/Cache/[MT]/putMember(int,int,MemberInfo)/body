{
  try {
    if (classMember instanceof FieldInfo) {
      FieldInfo fieldInfo=(FieldInfo)classMember;
      if (memberId == UNKNOWN) {
        memberId=myViewPool.getFieldDeclarationView(memberId).getRecordId();
        final ClassDeclarationView cdview=myViewPool.getClassDeclarationView(classDeclarationId);
        cdview.addFieldId(memberId);
      }
      final FieldDeclarationView view=myViewPool.getFieldDeclarationView(memberId);
      view.setName(fieldInfo.getName());
      view.setDescriptor(fieldInfo.getDescriptor());
      view.setGenericSignature(fieldInfo.getGenericSignature());
      view.setFlags(fieldInfo.getFlags());
      view.setConstantValue(fieldInfo.getConstantValue());
      view.setRuntimeVisibleAnnotations(fieldInfo.getRuntimeVisibleAnnotations());
      view.setRuntimeInvisibleAnnotations(fieldInfo.getRuntimeInvisibleAnnotations());
    }
 else     if (classMember instanceof MethodInfo) {
      MethodInfo methodInfo=(MethodInfo)classMember;
      if (memberId == UNKNOWN) {
        memberId=myViewPool.getMethodDeclarationView(memberId).getRecordId();
        myViewPool.getClassDeclarationView(classDeclarationId).addMethodId(memberId);
      }
      final MethodDeclarationView view=myViewPool.getMethodDeclarationView(memberId);
      view.setName(methodInfo.getName());
      view.setDescriptor(methodInfo.getDescriptor());
      view.setGenericSignature(methodInfo.getGenericSignature());
      view.setFlags(methodInfo.getFlags());
      view.setIsConstructor(methodInfo.isConstructor());
      view.setThrownExceptions(methodInfo.getThrownExceptions());
      view.setRuntimeVisibleAnnotations(methodInfo.getRuntimeVisibleAnnotations());
      view.setRuntimeInvisibleAnnotations(methodInfo.getRuntimeInvisibleAnnotations());
      view.setRuntimeVisibleParamAnnotations(methodInfo.getRuntimeVisibleParameterAnnotations());
      view.setRuntimeInvisibleParamAnnotations(methodInfo.getRuntimeInvisibleParameterAnnotations());
      view.setAnnotationDefault(methodInfo.getAnnotationDefault());
    }
 else {
      LOG.assertTrue(false,"Unknown member info: " + classMember.getClass().getName());
    }
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
  return memberId;
}
