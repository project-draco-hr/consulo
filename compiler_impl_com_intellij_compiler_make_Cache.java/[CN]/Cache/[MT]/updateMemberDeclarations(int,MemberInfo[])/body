{
  try {
    final int classDeclarationId=getClassDeclarationId(classQName);
    final int[] fieldIds=getFieldIds(classDeclarationId);
    final int[] methodIds=getMethodIds(classDeclarationId);
    final TObjectIntHashMap<MemberInfo> currentMembers=new TObjectIntHashMap<MemberInfo>();
    for (    final int fieldId : fieldIds) {
      currentMembers.put(createFieldInfo(fieldId),fieldId);
    }
    for (    final int methodId : methodIds) {
      currentMembers.put(createMethodInfo(methodId),methodId);
    }
    final TIntHashSet fieldsToRemove=new TIntHashSet(fieldIds);
    final TIntHashSet methodsToRemove=new TIntHashSet(methodIds);
    for (    final MemberInfo classMember : classMembers) {
      if (currentMembers.containsKey(classMember)) {
        final int memberId=currentMembers.get(classMember);
        if (classMember instanceof FieldInfo) {
          fieldsToRemove.remove(memberId);
        }
 else         if (classMember instanceof MethodInfo) {
          methodsToRemove.remove(memberId);
        }
        putMember(classDeclarationId,memberId,classMember);
      }
 else {
        putMember(classDeclarationId,UNKNOWN,classMember);
      }
    }
    if (!fieldsToRemove.isEmpty()) {
      final int[] fieldsArray=fieldsToRemove.toArray();
      for (      int aFieldsArray : fieldsArray) {
        removeFieldDeclaration(classDeclarationId,aFieldsArray);
      }
    }
    if (!methodsToRemove.isEmpty()) {
      final int[] methodsArray=methodsToRemove.toArray();
      for (      int aMethodsArray : methodsArray) {
        removeMethodDeclaration(classDeclarationId,aMethodsArray);
      }
    }
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
