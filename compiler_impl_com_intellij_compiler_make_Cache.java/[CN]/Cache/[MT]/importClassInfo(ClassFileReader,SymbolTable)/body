{
  final int qName=symbolTable.getId(reader.getQualifiedName());
  try {
synchronized (myViewPool.getClassInfosLock()) {
      final ClassInfoView classInfoView=myViewPool.getClassInfoView(getClassId(qName));
      final int id=classInfoView.getRecordId();
      classInfoView.setQualifiedName(qName);
      final String signature=reader.getGenericSignature();
      final int genericSignature=signature != null ? symbolTable.getId(signature) : -1;
      classInfoView.setGenericSignature(genericSignature);
      classInfoView.setPath(reader.getPath());
      final String superClass=reader.getSuperClass();
      final int superQName="".equals(superClass) ? UNKNOWN : symbolTable.getId(superClass);
      LOG.assertTrue(superQName != qName);
      classInfoView.setSuperQualifiedName(superQName);
      final String[] superInterfaces=reader.getSuperInterfaces();
      final int[] interfaceNames=new int[superInterfaces.length];
      for (int idx=0; idx < superInterfaces.length; idx++) {
        interfaceNames[idx]=symbolTable.getId(superInterfaces[idx]);
      }
      classInfoView.setSuperInterfaces(interfaceNames);
      final String sourceFileName=reader.getSourceFileName();
      if (sourceFileName != null) {
        classInfoView.setSourceFileName(sourceFileName);
      }
      classInfoView.setFlags(reader.getAccessFlags());
      classInfoView.setRuntimeVisibleAnnotations(reader.getRuntimeVisibleAnnotations());
      classInfoView.setRuntimeInvisibleAnnotations(reader.getRuntimeInvisibleAnnotations());
      classInfoView.setReferences(reader.getReferences());
      getQNameToClassInfoIdMap().put(qName,id);
    }
    final FieldInfo[] fields=reader.getFields();
    final MethodInfo[] methods=reader.getMethods();
    MemberInfo[] members=ArrayUtil.mergeArrays(fields,methods,MemberInfo.class);
    updateMemberDeclarations(qName,members);
  }
 catch (  ClsFormatException e) {
    throw e;
  }
catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
  return qName;
}
