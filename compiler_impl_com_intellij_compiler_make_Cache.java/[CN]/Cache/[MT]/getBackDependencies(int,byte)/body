{
  try {
    final TIntObjectHashMap<Dependency> dependencies=new TIntObjectHashMap<Dependency>();
    if ((dependencyKindMask & DEPENDENCIES_ON_CLASSES) != 0) {
      for (      final int referencer : getClassReferencers(classQName)) {
        if (referencer != classQName) {
          addDependency(dependencies,referencer);
        }
      }
    }
    if ((dependencyKindMask & DEPENDENCIES_ON_FIELDS) != 0) {
      for (      final FieldInfo field : getFields(classQName)) {
        for (        int referencer : getFieldReferencers(classQName,field.getName())) {
          if (referencer != classQName) {
            final Dependency dependency=addDependency(dependencies,referencer);
            dependency.addMemberInfo(field);
          }
        }
      }
    }
    if ((dependencyKindMask & DEPENDENCIES_ON_METHODS) != 0) {
      for (      final MethodInfo methodId : getMethods(classQName)) {
        for (        int referencer : getMethodReferencers(classQName,methodId.getName(),methodId.getDescriptor())) {
          if (referencer != classQName) {
            final Dependency dependency=addDependency(dependencies,referencer);
            dependency.addMemberInfo(methodId);
          }
        }
      }
    }
    final Dependency[] dependencyArray=new Dependency[dependencies.size()];
    dependencies.forEachValue(new TObjectProcedure<Dependency>(){
      private int index=0;
      public boolean execute(      Dependency object){
        dependencyArray[index++]=object;
        return true;
      }
    }
);
    return dependencyArray;
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
