{
  final int classDeclarationId=getClassDeclarationId(classQName);
  if (classDeclarationId == UNKNOWN) {
    return null;
  }
  try {
    final TIntObjectHashMap<Dependency> dependencies=new TIntObjectHashMap<Dependency>();
    final int[] classReferencers=myViewPool.getClassDeclarationView(classDeclarationId).getReferencers();
    for (    final int referencer : classReferencers) {
      if (referencer != classQName) {
        addDependency(dependencies,referencer);
      }
    }
    final int[] fieldIds=myViewPool.getClassDeclarationView(classDeclarationId).getFieldIds();
    for (    final int fieldId : fieldIds) {
      final FieldDeclarationView fieldDeclarationView=myViewPool.getFieldDeclarationView(fieldId);
      final int[] fieldReferencers=fieldDeclarationView.getReferencers();
      for (      int referencer : fieldReferencers) {
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(createFieldInfo(fieldId));
        }
      }
    }
    final int[] methodIds=myViewPool.getClassDeclarationView(classDeclarationId).getMethodIds();
    for (    final int methodId : methodIds) {
      final int[] methodReferencers=myViewPool.getMethodDeclarationView(methodId).getReferencers();
      for (      int referencer : methodReferencers) {
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(createMethodInfo(methodId));
        }
      }
    }
    final Dependency[] dependencyArray=new Dependency[dependencies.size()];
    dependencies.forEachValue(new TObjectProcedure<Dependency>(){
      private int index=0;
      public boolean execute(      Dependency object){
        dependencyArray[index++]=object;
        return true;
      }
    }
);
    return dependencyArray;
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
