{
  try {
    final TIntObjectHashMap<Dependency> dependencies=new TIntObjectHashMap<Dependency>();
    for (    final int referencer : getClassReferencers(classQName)) {
      if (referencer != classQName) {
        addDependency(dependencies,referencer);
      }
    }
    for (    final FieldInfo field : getFieldIds(classQName)) {
      for (      int referencer : getFieldReferencers(classQName,field.getName())) {
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(field);
        }
      }
    }
    for (    final MethodInfo methodId : getMethodIds(classQName)) {
      for (      int referencer : getMethodReferencers(classQName,methodId.getName(),methodId.getDescriptor())) {
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(methodId);
        }
      }
    }
    final Dependency[] dependencyArray=new Dependency[dependencies.size()];
    dependencies.forEachValue(new TObjectProcedure<Dependency>(){
      private int index=0;
      public boolean execute(      Dependency object){
        dependencyArray[index++]=object;
        return true;
      }
    }
);
    return dependencyArray;
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
