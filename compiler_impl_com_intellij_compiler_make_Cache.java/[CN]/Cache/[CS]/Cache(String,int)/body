{
  myStorePath=storePath;
  new File(storePath).mkdirs();
  myQNameToClassInfoMap=new CachedPersistentHashMap<StorageClassId,ClassInfo>(new File(storePath,"classes"),ClassIdKeyDescriptor.INSTANCE,new DataExternalizer<ClassInfo>(){
    public void save(    DataOutput out,    ClassInfo value) throws IOException {
      value.save(out);
    }
    public ClassInfo read(    DataInput in) throws IOException {
      return new ClassInfo(in);
    }
  }
,cacheSize);
  myQNameToReferencersMap=new CompilerDependencyStorage<StorageClassId>(new File(storePath,"bdeps"),GenericIdKeyDescriptor.INSTANCE,cacheSize);
  myQNameToReferencedClassesMap=new CompilerDependencyStorage<StorageClassId>(new File(storePath,"fdeps"),ClassIdKeyDescriptor.INSTANCE,cacheSize);
  myQNameToSubclassesMap=new CompilerDependencyStorage<StorageClassId>(new File(storePath,"subclasses"),ClassIdKeyDescriptor.INSTANCE,cacheSize);
  myRemoteQNames=new CachedPersistentHashMap<StorageClassId,Boolean>(new File(storePath,"remote"),ClassIdKeyDescriptor.INSTANCE,new DataExternalizer<Boolean>(){
    public void save(    DataOutput out,    Boolean value) throws IOException {
      out.writeBoolean(value.booleanValue());
    }
    public Boolean read(    DataInput in) throws IOException {
      return in.readBoolean();
    }
  }
,cacheSize){
    public synchronized Boolean get(    StorageClassId storageClassId) throws IOException {
      final Boolean value=super.get(storageClassId);
      return value != null ? value : Boolean.FALSE;
    }
  }
;
}
