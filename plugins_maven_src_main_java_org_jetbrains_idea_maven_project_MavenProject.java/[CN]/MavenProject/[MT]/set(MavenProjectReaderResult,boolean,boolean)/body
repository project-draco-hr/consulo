{
  State newState=myState.clone();
  if (updateLastReadStamp)   newState.myLastReadStamp++;
  newState.myValid=readerResult.isValid;
  newState.myActiveProfilesIds=readerResult.activeProfiles;
  newState.myReadingProblems=readerResult.readingProblems;
  newState.myLocalRepository=readerResult.localRepository;
  org.apache.maven.project.MavenProject nativeMavenProject=readerResult.nativeMavenProject;
  Model model=nativeMavenProject.getModel();
  newState.myMavenId=new MavenId(model.getGroupId(),model.getArtifactId(),model.getVersion());
  Parent parent=model.getParent();
  newState.myParentId=parent != null ? new MavenId(parent.getGroupId(),parent.getArtifactId(),parent.getVersion()) : null;
  newState.myPackaging=model.getPackaging();
  newState.myName=model.getName();
  Build build=model.getBuild();
  newState.myFinalName=build.getFinalName();
  newState.myDefaultGoal=build.getDefaultGoal();
  newState.myBuildDirectory=build.getDirectory();
  newState.myOutputDirectory=build.getOutputDirectory();
  newState.myTestOutputDirectory=build.getTestOutputDirectory();
  doSetFolders(newState,readerResult);
  newState.myFilters=build.getFilters() == null ? Collections.EMPTY_LIST : build.getFilters();
  newState.myProperties=model.getProperties() != null ? model.getProperties() : new Properties();
  doSetResolvedAttributes(newState,readerResult,resetArtifacts);
  newState.myModulesPathsAndNames=collectModulePathsAndNames(model,getDirectory(),newState.myActiveProfilesIds);
  newState.myProfilesIds=collectProfilesIds(model);
  newState.myStrippedMavenModel=MavenUtil.cloneObject(model);
  MavenUtil.stripDown(newState.myStrippedMavenModel);
  myState=newState;
}
