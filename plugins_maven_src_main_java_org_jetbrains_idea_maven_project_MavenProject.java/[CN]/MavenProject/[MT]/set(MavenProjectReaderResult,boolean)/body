{
  if (updateTimestamps) {
    myLastTimestamp=myFile.getTimeStamp();
    myLastProfilesTimestamp=getProfilesXmlTimestamp();
  }
  myValid=readerResult.isValid;
  myActiveProfilesIds=readerResult.activeProfiles;
  myReadingProblems=readerResult.readingProblems;
  myUnresolvedArtifactIds=readerResult.unresolvedArtifactIds;
  myLocalRepository=readerResult.localRepository;
  org.apache.maven.project.MavenProject nativeMavenProject=readerResult.nativeMavenProject;
  Model model=nativeMavenProject.getModel();
  myMavenId=new MavenId(nativeMavenProject.getGroupId(),nativeMavenProject.getArtifactId(),nativeMavenProject.getVersion());
  Parent parent=model.getParent();
  myParentId=parent != null ? new MavenId(parent.getGroupId(),parent.getArtifactId(),parent.getVersion()) : null;
  myPackaging=model.getPackaging() == null ? "jar" : model.getPackaging();
  myName=model.getName();
  Build build=nativeMavenProject.getBuild();
  myFinalName=myValid ? build.getFinalName() : (myMavenId.artifactId + ".jar");
  myDefaultGoal=myValid ? build.getDefaultGoal() : null;
  myBuildDirectory=myValid ? build.getDirectory() : getDirectory() + "/target";
  myOutputDirectory=myValid ? build.getOutputDirectory() : getDirectory() + "/target/classes";
  myTestOutputDirectory=myValid ? build.getTestOutputDirectory() : getDirectory() + "/target/test-classes";
  setFolders(readerResult);
  myFilters=myValid ? new ArrayList<String>(build.getFilters()) : Collections.<String>emptyList();
  myProperties=myValid && nativeMavenProject.getProperties() != null ? nativeMavenProject.getProperties() : new Properties();
  myRemoteRepositories=myValid ? convertRepositories(model.getRepositories()) : Collections.<MavenRemoteRepository>emptyList();
  myPlugins=myValid ? collectPlugins(model) : Collections.<MavenPlugin>emptyList();
  myExtensions=myValid ? convertArtifacts(nativeMavenProject.getExtensionArtifacts()) : Collections.<MavenArtifact>emptyList();
  setDependencies(readerResult,false);
  myModulesPathsAndNames=collectModulePathsAndNames(model);
  myProfilesIds=collectProfilesIds(model);
  myStrippedMavenModel=MavenUtil.cloneObject(model);
  MavenUtil.stripDown(myStrippedMavenModel);
}
