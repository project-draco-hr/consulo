{
  resetProblemsCache();
  myLastReadStamp++;
  myValid=readerResult.isValid;
  myActiveProfilesIds=readerResult.activeProfiles;
  myReadingProblems=readerResult.readingProblems;
  myUnresolvedArtifactIds=readerResult.unresolvedArtifactIds;
  myLocalRepository=readerResult.localRepository;
  org.apache.maven.project.MavenProject nativeMavenProject=readerResult.nativeMavenProject;
  Model model=nativeMavenProject.getModel();
  myMavenId=new MavenId(model.getGroupId(),model.getArtifactId(),model.getVersion());
  Parent parent=model.getParent();
  myParentId=parent != null ? new MavenId(parent.getGroupId(),parent.getArtifactId(),parent.getVersion()) : null;
  myPackaging=model.getPackaging();
  myName=model.getName();
  Build build=model.getBuild();
  myFinalName=build.getFinalName();
  myDefaultGoal=build.getDefaultGoal();
  myBuildDirectory=build.getDirectory();
  myOutputDirectory=build.getOutputDirectory();
  myTestOutputDirectory=build.getTestOutputDirectory();
  setFolders(readerResult);
  myFilters=nonNull(build,build.getFilters());
  myProperties=model.getProperties() != null ? model.getProperties() : new Properties();
  myRemoteRepositories=convertRepositories(model.getRepositories());
  myPlugins=collectPlugins(model);
  myExtensions=convertArtifacts(nativeMavenProject.getExtensionArtifacts());
  setDependencies(readerResult,resetDependencies);
  myModulesPathsAndNames=collectModulePathsAndNames(model);
  myProfilesIds=collectProfilesIds(model);
  myStrippedMavenModel=MavenUtil.cloneObject(model);
  MavenUtil.stripDown(myStrippedMavenModel);
}
