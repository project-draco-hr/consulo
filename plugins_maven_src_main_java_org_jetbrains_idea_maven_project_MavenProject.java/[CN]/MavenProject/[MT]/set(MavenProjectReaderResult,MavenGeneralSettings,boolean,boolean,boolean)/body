{
  State newState=myState.clone();
  if (updateLastReadStamp)   newState.myLastReadStamp=myState.myLastReadStamp + 1;
  newState.myReadingProblems=readerResult.readingProblems;
  newState.myLocalRepository=settings.getEffectiveLocalRepository();
  Collection<MavenProfile> activeProfiles=readerResult.activatedProfiles;
  newState.myActiveProfilesIds=collectProfilesIds(activeProfiles);
  MavenModel model=readerResult.mavenModel;
  newState.myMavenId=model.getMavenId();
  if (model.getParent() != null) {
    newState.myParentId=model.getParent().getMavenId();
  }
  newState.myPackaging=model.getPackaging();
  newState.myName=model.getName();
  newState.myFinalName=model.getBuild().getFinalName();
  newState.myDefaultGoal=model.getBuild().getDefaultGoal();
  newState.myBuildDirectory=model.getBuild().getDirectory();
  newState.myOutputDirectory=model.getBuild().getOutputDirectory();
  newState.myTestOutputDirectory=model.getBuild().getTestOutputDirectory();
  doSetFolders(newState,readerResult);
  newState.myFilters=model.getBuild().getFilters();
  newState.myProperties=model.getProperties();
  doSetResolvedAttributes(newState,readerResult,resetArtifacts);
  newState.myModulesPathsAndNames=collectModulePathsAndNames(model,getDirectory(),activeProfiles);
  Collection<String> newProfiles=collectProfilesIds(model.getProfiles());
  if (resetProfiles || newState.myProfilesIds == null) {
    newState.myProfilesIds=newProfiles;
  }
 else {
    Set<String> mergedProfiles=new THashSet<String>(newState.myProfilesIds);
    mergedProfiles.addAll(newProfiles);
    newState.myProfilesIds=new ArrayList<String>(mergedProfiles);
  }
  newState.myModelMap=readerResult.nativeModelMap;
  return setState(newState);
}
