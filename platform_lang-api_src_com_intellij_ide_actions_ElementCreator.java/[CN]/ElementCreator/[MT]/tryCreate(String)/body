{
  if (inputString.length() == 0) {
    Messages.showMessageDialog(myProject,IdeBundle.message("error.name.should.be.specified"),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
    return PsiElement.EMPTY_ARRAY;
  }
  try {
    checkBeforeCreate(inputString);
  }
 catch (  IncorrectOperationException e) {
    Messages.showMessageDialog(myProject,CreateElementActionBase.filterMessage(e.getMessage()),myErrorTitle,Messages.getErrorIcon());
    return PsiElement.EMPTY_ARRAY;
  }
  final Exception[] exception=new Exception[1];
  final SmartPsiElementPointer[][] myCreatedElements={null};
  final String commandName=getActionName(inputString);
  new WriteCommandAction(myProject,commandName){
    protected void run(    Result result) throws Throwable {
      LocalHistoryAction action=LocalHistoryAction.NULL;
      try {
        action=LocalHistory.getInstance().startAction(commandName);
        PsiElement[] psiElements=create(inputString);
        myCreatedElements[0]=new SmartPsiElementPointer[psiElements.length];
        SmartPointerManager manager=SmartPointerManager.getInstance(myProject);
        for (int i=0; i < myCreatedElements[0].length; i++) {
          myCreatedElements[0][i]=manager.createSmartPsiElementPointer(psiElements[i]);
        }
      }
 catch (      Exception ex) {
        exception[0]=ex;
      }
 finally {
        action.finish();
      }
    }
    @Override protected UndoConfirmationPolicy getUndoConfirmationPolicy(){
      return UndoConfirmationPolicy.REQUEST_CONFIRMATION;
    }
  }
.execute();
  if (exception[0] != null) {
    LOG.info(exception[0]);
    String errorMessage=CreateElementActionBase.filterMessage(exception[0].getMessage());
    if (errorMessage == null || errorMessage.length() == 0) {
      errorMessage=exception[0].toString();
    }
    Messages.showMessageDialog(myProject,errorMessage,myErrorTitle,Messages.getErrorIcon());
    return PsiElement.EMPTY_ARRAY;
  }
  List<PsiElement> result=new SmartList<PsiElement>();
  for (  final SmartPsiElementPointer pointer : myCreatedElements[0]) {
    ContainerUtil.addIfNotNull(pointer.getElement(),result);
  }
  return PsiUtilBase.toPsiElementArray(result);
}
