{
  super(new MyModel(scopeToAverageSeverityMap,defaultScopeName));
  getColumnModel().getColumn(SCOPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      setOpaque(false);
      UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,this);
      return this;
    }
  }
);
  getColumnModel().getColumn(SEVERITY_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    final JTable table,    final Object value,    final boolean isSelected,    final boolean hasFocus,    final int row,    final int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      final HighlightDisplayLevel level=(HighlightDisplayLevel)value;
      setIcon(level.getIcon());
      setText(SingleInspectionProfilePanel.renderSeverity(level.getSeverity()));
      setOpaque(false);
      UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,this);
      return this;
    }
  }
);
  setShowGrid(false);
  setRowSelectionAllowed(false);
  setColumnSelectionAllowed(false);
  setOpaque(false);
  for (int i=0; i < getColumnModel().getColumnCount(); i++) {
    int w=0;
    final TableColumn column=getColumnModel().getColumn(i);
    for (int j=0; j < getModel().getRowCount(); j++) {
      final Component component=prepareRenderer(column.getCellRenderer(),j,i);
      w=Math.max(component.getPreferredSize().width,w);
    }
    column.setPreferredWidth(w + 1);
  }
}
