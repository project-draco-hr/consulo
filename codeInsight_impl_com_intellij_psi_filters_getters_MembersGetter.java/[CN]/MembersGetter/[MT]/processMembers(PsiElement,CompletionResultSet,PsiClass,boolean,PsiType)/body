{
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(TrueFilter.INSTANCE);
  where.processDeclarations(processor,ResolveState.initial(),null,context);
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
  for (  final PsiElement result : processor.getResults()) {
    if (result instanceof PsiMember && !(result instanceof PsiClass)) {
      final PsiMember member=(PsiMember)result;
      if (member.hasModifierProperty(PsiModifier.STATIC) && !PsiTreeUtil.isAncestor(member.getContainingClass(),context,false) && resolveHelper.isAccessible(member,context,null)) {
        if (result instanceof PsiField && !member.hasModifierProperty(PsiModifier.FINAL))         continue;
        if (result instanceof PsiMethod && acceptMethods)         continue;
        final LookupItem item=LookupItemUtil.objectToLookupItem(result);
        item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
        JavaAwareCompletionData.qualify(item);
        if (member instanceof PsiMethod) {
          item.setAttribute(LookupItem.SUBSTITUTOR,SmartCompletionDecorator.calculateMethodReturnTypeSubstitutor((PsiMethod)member,expectedType));
        }
        results.addElement(item);
      }
    }
  }
}
