{
  if (myCachedIsConstructor == Boolean.TRUE)   return null;
  if (getTreeElement() != null) {
    PsiTypeElement typeElement=getReturnTypeElement();
    if (typeElement == null)     return null;
    int arrayCount=0;
    ASTNode parameterList=SourceTreeToPsiMap.psiElementToTree(getParameterList());
    Loop:     for (ASTNode child=parameterList.getTreeNext(); child != null; child=child.getTreeNext()) {
      IElementType i=child.getElementType();
      if (i == LBRACKET) {
        arrayCount++;
      }
 else       if (i == RBRACKET || i == WHITE_SPACE || i == C_STYLE_COMMENT || i == DOC_COMMENT || i == END_OF_LINE_COMMENT) {
      }
 else {
        break Loop;
      }
    }
    PsiType type;
    if (!(typeElement instanceof PsiTypeElementImpl)) {
      type=typeElement.getType();
    }
 else {
      type=((PsiTypeElementImpl)typeElement).getDetachedType(this);
    }
    for (int i=0; i < arrayCount; i++) {
      type=type.createArrayType();
    }
    return type;
  }
 else {
    myCachedTypeText=getRepositoryManager().getMethodView().getReturnTypeText(getRepositoryId());
    if (myCachedTypeText == null)     return null;
    try {
      return getManager().getElementFactory().createTypeFromText(myCachedTypeText,this);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
      return null;
    }
  }
}
