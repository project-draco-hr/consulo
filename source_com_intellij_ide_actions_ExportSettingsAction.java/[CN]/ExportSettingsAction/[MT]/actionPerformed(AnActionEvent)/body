{
  List<ExportableApplicationComponent> exportableComponents=new ArrayList<ExportableApplicationComponent>();
  Map<File,Set<ExportableApplicationComponent>> fileToComponents=getRegisteredComponentsAndFiles(exportableComponents);
  final ChooseComponentsToExportDialog dialog=new ChooseComponentsToExportDialog(exportableComponents,fileToComponents,true,IdeBundle.message("title.select.components.to.export"),IdeBundle.message("propt.please.check.all.components.to.export"));
  dialog.show();
  if (!dialog.isOK())   return;
  Set<ExportableApplicationComponent> markedComponents=dialog.getExportableComponents();
  if (markedComponents.size() == 0)   return;
  Set<File> exportFiles=new HashSet<File>();
  for (Iterator iterator=markedComponents.iterator(); iterator.hasNext(); ) {
    ExportableApplicationComponent component=(ExportableApplicationComponent)iterator.next();
    final File[] files=component.getExportFiles();
    exportFiles.addAll(Arrays.asList(files));
  }
  ApplicationManager.getApplication().saveSettings();
  try {
    final File saveFile=dialog.getExportFile();
    if (saveFile.exists()) {
      final int ret=Messages.showOkCancelDialog(IdeBundle.message("prompt.overwrite.settings.file",FileUtil.toSystemDependentName(saveFile.getPath())),IdeBundle.message("title.file.already.exists"),Messages.getWarningIcon());
      if (ret != 0)       return;
    }
    final JarOutputStream output=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(saveFile)));
    final File configPath=new File(PathManager.getConfigPath());
    final HashSet<String> writtenItemRelativePaths=new HashSet<String>();
    for (Iterator<File> iterator=exportFiles.iterator(); iterator.hasNext(); ) {
      File file=iterator.next();
      final String relativePath=FileUtil.toSystemIndependentName(FileUtil.getRelativePath(configPath,file));
      if (file.exists()) {
        ZipUtil.addFileOrDirRecursively(output,saveFile,file,relativePath,null,writtenItemRelativePaths);
      }
    }
    final File magicFile=new File(FileUtil.getTempDirectory(),SETTINGS_JAR_MARKER);
    magicFile.createNewFile();
    magicFile.deleteOnExit();
    ZipUtil.addFileToZip(output,magicFile,SETTINGS_JAR_MARKER,writtenItemRelativePaths,null);
    output.close();
    Messages.showMessageDialog(IdeBundle.message("message.settings.exported.successfully"),IdeBundle.message("title.export.successful"),Messages.getInformationIcon());
  }
 catch (  IOException e1) {
    Messages.showErrorDialog(IdeBundle.message("error.writing.settings",e1.toString()),IdeBundle.message("title.error.writing.file"));
  }
}
