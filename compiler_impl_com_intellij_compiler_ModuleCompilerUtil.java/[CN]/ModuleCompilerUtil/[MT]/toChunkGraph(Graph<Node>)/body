{
  final Set<Chunk<Node>> chunks=new HashSet<Chunk<Node>>();
  final Map<Node,Chunk<Node>> nodeToChunkMap=new HashMap<Node,Chunk<Node>>();
  for (  final Node node : graph.getNodes()) {
    if (nodeToChunkMap.containsKey(node)) {
      continue;
    }
    final Chunk<Node> chunk=buildChunk(graph,node);
    chunks.add(chunk);
    for (    final Node n : chunk.getNodes()) {
      nodeToChunkMap.put(n,chunk);
    }
  }
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Chunk<Node>>(){
    public Collection<Chunk<Node>> getNodes(){
      return chunks;
    }
    public Iterator<Chunk<Node>> getIn(    Chunk<Node> chunk){
      final Set<Node> chunkNodes=chunk.getNodes();
      final Set<Chunk<Node>> ins=new HashSet<Chunk<Node>>();
      for (      final Node node : chunkNodes) {
        for (Iterator<Node> nodeIns=graph.getIn(node); nodeIns.hasNext(); ) {
          final Node in=nodeIns.next();
          if (!chunk.containsNode(in)) {
            ins.add(nodeToChunkMap.get(in));
          }
        }
      }
      return ins.iterator();
    }
  }
));
}
