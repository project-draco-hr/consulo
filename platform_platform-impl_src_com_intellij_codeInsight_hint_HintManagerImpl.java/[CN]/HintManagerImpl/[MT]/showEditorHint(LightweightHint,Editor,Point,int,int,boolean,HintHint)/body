{
  LOG.assertTrue(SwingUtilities.isEventDispatchThread());
  myHideAlarm.cancelAllRequests();
  hideHints(HIDE_BY_OTHER_HINT,false,false);
  if (editor != myLastEditor) {
    hideAllHints();
  }
  if (!ApplicationManager.getApplication().isUnitTestMode() && !editor.getContentComponent().isShowing())   return;
  updateLastEditor(editor);
  getPublisher().hintShown(editor.getProject(),hint,flags);
  Component component=hint.getComponent();
  doShowInGivenLocation(hint,editor,p,hintInfo);
  ListenerUtil.addMouseListener(component,new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myHideAlarm.cancelAllRequests();
    }
  }
);
  ListenerUtil.addFocusListener(component,new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      myHideAlarm.cancelAllRequests();
    }
  }
);
  if ((flags & HIDE_BY_MOUSEOVER) != 0) {
    ListenerUtil.addMouseMotionListener(component,new MouseMotionAdapter(){
      @Override public void mouseMoved(      MouseEvent e){
        hideHints(HIDE_BY_MOUSEOVER,true,false);
      }
    }
);
  }
  final HintInfo info=new HintInfo(hint,flags,reviveOnEditorChange);
  myHintsStack.add(info);
  if (timeout > 0) {
    Timer timer=new Timer(timeout,new ActionListener(){
      public void actionPerformed(      ActionEvent event){
        hint.hide();
      }
    }
);
    timer.setRepeats(false);
    timer.start();
  }
}
