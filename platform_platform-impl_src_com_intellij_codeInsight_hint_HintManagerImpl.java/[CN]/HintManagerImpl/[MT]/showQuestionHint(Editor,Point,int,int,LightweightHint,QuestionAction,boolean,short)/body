{
  TextAttributes attributes=new TextAttributes();
  attributes.setEffectColor(HintUtil.QUESTION_UNDERSCORE_COLOR);
  attributes.setEffectType(EffectType.LINE_UNDERSCORE);
  final RangeHighlighter highlighter=editor.getMarkupModel().addRangeHighlighter(offset1,offset2,HighlighterLayer.ERROR + 1,attributes,HighlighterTargetArea.EXACT_RANGE);
  if (myQuestionHint != null) {
    myQuestionHint.hide();
    myQuestionHint=null;
    myQuestionAction=null;
  }
  hint.addHintListener(new HintListener(){
    public void hintHidden(    EventObject event){
      if (!editor.isDisposed()) {
        editor.getMarkupModel().removeHighlighter(highlighter);
      }
      if (myQuestionHint == hint) {
        myQuestionAction=null;
        myQuestionHint=null;
      }
      hint.removeHintListener(this);
    }
  }
);
  HintHint hintInfo=new HintHint(editor,p);
  if (showByBalloon) {
    JRootPane rootPane=editor.getComponent().getRootPane();
    if (rootPane != null) {
      JLayeredPane lp=rootPane.getLayeredPane();
      hintInfo=new HintHint(lp,p);
      hintInfo.setAwtTooltip(true).setHighlighterType(true);
    }
  }
  hintInfo.initStyleFrom(hint.getComponent());
  hintInfo.setBorderColor(Color.gray);
  hintInfo.setPreferredPosition(Balloon.Position.above);
  if (constraint == UNDER || constraint == RIGHT_UNDER) {
    hintInfo.setPreferredPosition(Balloon.Position.below);
  }
 else   if (constraint == RIGHT) {
    hintInfo.setPreferredPosition(Balloon.Position.atRight);
  }
 else   if (constraint == LEFT) {
    hintInfo.setPreferredPosition(Balloon.Position.atLeft);
  }
  showEditorHint(hint,editor,p,HIDE_BY_ANY_KEY | HIDE_BY_TEXT_CHANGE | UPDATE_BY_SCROLLING| HIDE_IF_OUT_OF_EDITOR,0,false,hintInfo);
  myQuestionAction=action;
  myQuestionHint=hint;
}
