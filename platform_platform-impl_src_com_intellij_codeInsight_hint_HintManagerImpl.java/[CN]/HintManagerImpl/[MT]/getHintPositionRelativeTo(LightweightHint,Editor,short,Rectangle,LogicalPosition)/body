{
  JComponent editorComponent=editor.getComponent();
  JLayeredPane layeredPane=editorComponent.getRootPane().getLayeredPane();
  IdeTooltip ideTooltip=hint.getCurrentIdeTooltip();
  if (ideTooltip != null) {
    Point point=ideTooltip.getPoint();
    return SwingUtilities.convertPoint(ideTooltip.getComponent(),point,layeredPane);
  }
  Dimension hintSize=hint.getComponent().getPreferredSize();
  int layeredPaneHeight=layeredPane.getHeight();
switch (constraint) {
case LEFT:
{
      int y=lookupBounds.y;
      if (y < 0) {
        y=0;
      }
 else       if (y + hintSize.height >= layeredPaneHeight) {
        y=layeredPaneHeight - hintSize.height;
      }
      return new Point(lookupBounds.x - hintSize.width,y);
    }
case RIGHT:
{
    int y=lookupBounds.y;
    if (y < 0) {
      y=0;
    }
 else     if (y + hintSize.height >= layeredPaneHeight) {
      y=layeredPaneHeight - hintSize.height;
    }
    return new Point(lookupBounds.x + lookupBounds.width,y);
  }
case ABOVE:
Point posAboveCaret=getHintPosition(hint,editor,pos,ABOVE);
return new Point(lookupBounds.x,Math.min(posAboveCaret.y,lookupBounds.y - hintSize.height));
case UNDER:
Point posUnderCaret=getHintPosition(hint,editor,pos,UNDER);
return new Point(lookupBounds.x,Math.max(posUnderCaret.y,lookupBounds.y + lookupBounds.height));
default :
LOG.assertTrue(false);
return null;
}
}
