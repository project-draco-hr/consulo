{
  LogicalPosition pos=editor.getCaretModel().getLogicalPosition();
  final DataContext dataContext=((EditorEx)editor).getDataContext();
  final Rectangle dominantArea=PlatformDataKeys.DOMINANT_HINT_AREA_RECTANGLE.getData(dataContext);
  LOG.assertTrue(SwingUtilities.isEventDispatchThread());
  JRootPane rootPane=editor.getComponent().getRootPane();
  if (dominantArea == null && rootPane != null) {
    JLayeredPane lp=rootPane.getLayeredPane();
    for (    HintInfo info : getHintsStackArray()) {
      if (!info.hint.isSelectingHint())       continue;
      IdeTooltip tooltip=info.hint.getCurrentIdeTooltip();
      if (tooltip != null) {
        Point p=tooltip.getShowingPoint().getPoint(lp);
        if (info.hint != hint) {
switch (constraint) {
case ABOVE:
            if (tooltip.getPreferredPosition() == Balloon.Position.below) {
              p.y-=tooltip.getPositionChangeY();
            }
          break;
case UNDER:
case RIGHT_UNDER:
        if (tooltip.getPreferredPosition() == Balloon.Position.above) {
          p.y+=tooltip.getPositionChangeY();
        }
      break;
case RIGHT:
    if (tooltip.getPreferredPosition() == Balloon.Position.atLeft) {
      p.x+=tooltip.getPositionChangeX();
    }
  break;
case LEFT:
if (tooltip.getPreferredPosition() == Balloon.Position.atRight) {
  p.x-=tooltip.getPositionChangeX();
}
break;
}
}
return p;
}
Rectangle rectangle=info.hint.getBounds();
JComponent c=info.hint.getComponent();
rectangle=SwingUtilities.convertRectangle(c.getParent(),rectangle,lp);
if (rectangle != null) {
return getHintPositionRelativeTo(hint,editor,constraint,rectangle,pos);
}
}
}
 else {
return getHintPositionRelativeTo(hint,editor,constraint,dominantArea,pos);
}
return getHintPosition(hint,editor,pos,constraint);
}
