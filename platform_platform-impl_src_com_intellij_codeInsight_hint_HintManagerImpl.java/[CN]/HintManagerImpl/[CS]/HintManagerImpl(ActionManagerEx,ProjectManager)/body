{
  myEditorManagerListener=new MyEditorManagerListener();
  myAnActionListener=new MyAnActionListener();
  actionManagerEx.addAnActionListener(myAnActionListener);
  myCaretMoveListener=new CaretListener(){
    @Override public void caretPositionChanged(    CaretEvent e){
      hideHints(HIDE_BY_ANY_KEY,false,false);
    }
  }
;
  projectManager.addProjectManagerListener(new MyProjectManagerListener());
  myEditorMouseListener=new EditorMouseAdapter(){
    @Override public void mousePressed(    EditorMouseEvent event){
      hideAllHints();
    }
  }
;
  myVisibleAreaListener=new VisibleAreaListener(){
    @Override public void visibleAreaChanged(    VisibleAreaEvent e){
      updateScrollableHints(e);
      hideHints(HIDE_BY_SCROLLING,false,false);
    }
  }
;
  myEditorFocusListener=new FocusAdapter(){
    @Override public void focusLost(    final FocusEvent e){
      myHideAlarm.addRequest(new Runnable(){
        @Override public void run(){
          if (!JBPopupFactory.getInstance().isChildPopupFocused(e.getComponent())) {
            hideAllHints();
          }
        }
      }
,200);
    }
    @Override public void focusGained(    FocusEvent e){
      myHideAlarm.cancelAllRequests();
    }
  }
;
  myEditorDocumentListener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent event){
      LOG.assertTrue(SwingUtilities.isEventDispatchThread());
      HintInfo[] infos=getHintsStackArray();
      for (      HintInfo info : infos) {
        if ((info.flags & HIDE_BY_TEXT_CHANGE) != 0) {
          if (info.hint.isVisible()) {
            info.hint.hide();
          }
          myHintsStack.remove(info);
        }
      }
      if (myHintsStack.isEmpty()) {
        updateLastEditor(null);
      }
    }
  }
;
}
