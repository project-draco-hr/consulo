{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 24:
{
        yybegin(MODIFICATION_OPERATOR_FUNCTION_ARGUMENT);
        return TypoScriptTokenTypes.MODIFICATION_OPERATOR_FUNCTION_PARAM_BEGIN;
      }
case 29:
    break;
case 2:
{
    return TypoScriptTokenTypes.OBJECT_PATH_ENTITY;
  }
case 30:
break;
case 23:
{
return TypoScriptTokenTypes.MODIFICATION_OPERATOR_FUNCTION;
}
case 31:
break;
case 4:
{
return TokenType.BAD_CHARACTER;
}
case 32:
break;
case 17:
{
yybegin(ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.CODE_BLOCK_OPERATOR_BEGIN;
}
case 33:
break;
case 7:
{
yybegin(EXPRESSION_SIGN);
return TypoScriptTokenTypes.OBJECT_PATH_ENTITY;
}
case 34:
break;
case 28:
{
return TypoScriptTokenTypes.C_STYLE_COMMENT;
}
case 35:
break;
case 20:
{
yybegin(MULTILINE_OPERATOR_VALUE);
return TokenType.WHITE_SPACE;
}
case 36:
break;
case 1:
{
return TokenType.WHITE_SPACE;
}
case 37:
break;
case 22:
{
yybegin(ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.MULTILINE_VALUE_OPERATOR_END;
}
case 38:
break;
case 19:
{
yybegin(YYINITIAL);
return TypoScriptTokenTypes.IGNORED_TEXT;
}
case 39:
break;
case 6:
{
return TypoScriptTokenTypes.ONE_LINE_COMMENT;
}
case 40:
break;
case 25:
{
return TypoScriptTokenTypes.MODIFICATION_OPERATOR_FUNCTION_ARGUMENT;
}
case 41:
break;
case 21:
{
return TypoScriptTokenTypes.MULTILINE_VALUE;
}
case 42:
break;
case 13:
{
yybegin(ASSIGNMENT_VALUE);
return TypoScriptTokenTypes.ASSIGNMENT_OPERATOR;
}
case 43:
break;
case 3:
{
yybegin(MULTILINE_OPERATOR_VALUE);
return TypoScriptTokenTypes.IGNORED_TEXT;
}
case 44:
break;
case 27:
{
yybegin(MODIFICATION_OPERATOR_VALUE);
return TypoScriptTokenTypes.MODIFICATION_OPERATOR;
}
case 45:
break;
case 12:
{
yybegin(ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.CODE_BLOCK_OPERATOR_END;
}
case 46:
break;
case 11:
{
return TypoScriptTokenTypes.IGNORED_TEXT;
}
case 47:
break;
case 15:
{
yybegin(COPYING_OPERATOR_VALUE);
return TypoScriptTokenTypes.COPYING_OPERATOR;
}
case 48:
break;
case 9:
{
return TypoScriptTokenTypes.CONDITION;
}
case 49:
break;
case 5:
{
yybegin(YYINITIAL);
return TokenType.WHITE_SPACE;
}
case 50:
break;
case 26:
{
yybegin(ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.MODIFICATION_OPERATOR_FUNCTION_PARAM_END;
}
case 51:
break;
case 18:
{
yybegin(YYINITIAL);
return TypoScriptTokenTypes.ASSIGNMENT_VALUE;
}
case 52:
break;
case 10:
{
return TypoScriptTokenTypes.INCLUDE_STATEMENT;
}
case 53:
break;
case 8:
{
return TypoScriptTokenTypes.OBJECT_PATH_SEPARATOR;
}
case 54:
break;
case 16:
{
yybegin(MULTILINE_AFTER_SIGN_ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.MULTILINE_VALUE_OPERATOR_BEGIN;
}
case 55:
break;
case 14:
{
yybegin(ONE_LINE_IGNORED_ZONE);
return TypoScriptTokenTypes.UNSETTING_OPERATOR;
}
case 56:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
