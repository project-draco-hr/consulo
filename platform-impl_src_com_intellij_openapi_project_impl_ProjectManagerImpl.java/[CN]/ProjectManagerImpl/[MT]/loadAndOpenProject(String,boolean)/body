{
  try {
    final Pair<Class,Object> convertorComponent;
    if (convert) {
      try {
        convertorComponent=convertProject(filePath);
      }
 catch (      ProcessCanceledException e) {
        return null;
      }
    }
 else {
      convertorComponent=null;
    }
    final Project[] project=new Project[1];
    final IOException[] io=new IOException[]{null};
    final StateStorage.StateStorageException[] stateStorage=new StateStorage.StateStorageException[]{null};
    boolean ok=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        try {
          if (indicator != null) {
            indicator.setText(ProjectBundle.message("loading.components.for",filePath));
            indicator.setIndeterminate(true);
          }
          project[0]=loadProject(filePath,convertorComponent);
        }
 catch (        IOException e) {
          io[0]=e;
          return;
        }
catch (        StateStorage.StateStorageException e) {
          stateStorage[0]=e;
          return;
        }
        if (indicator != null) {
          indicator.setText(ProjectBundle.message("initializing.components"));
        }
      }
    }
,ProjectBundle.message("project.load.progress"),true,null);
    if (!ok) {
      if (project[0] != null) {
        Disposer.dispose(project[0]);
        project[0]=null;
      }
      notifyProjectOpenFailed();
    }
    if (io[0] != null)     throw io[0];
    if (stateStorage[0] != null)     throw stateStorage[0];
    if (project[0] == null || !ok) {
      return null;
    }
 else     if (!openProject(project[0])) {
      Disposer.dispose(project[0]);
      return null;
    }
    return project[0];
  }
 catch (  StateStorage.StateStorageException e) {
    throw new IOException(e.getMessage());
  }
}
