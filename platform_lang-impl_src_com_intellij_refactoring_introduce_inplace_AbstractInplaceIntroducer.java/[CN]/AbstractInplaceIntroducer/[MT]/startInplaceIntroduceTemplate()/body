{
  final boolean replaceAllOccurrences=isReplaceAllOccurrences();
  final Ref<Boolean> result=new Ref<Boolean>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      final String[] names=suggestNames(replaceAllOccurrences,getLocalVariable());
      RangeMarker r;
      if (myLocalMarker != null) {
        final PsiReference reference=myExpr.getReference();
        if (reference != null && reference.resolve() == myLocalVariable) {
          r=myExprMarker;
        }
 else {
          r=myLocalMarker;
        }
      }
 else {
        r=myExprMarker;
      }
      final V variable=createFieldToStartTemplateOn(replaceAllOccurrences,names);
      boolean started=false;
      if (variable != null) {
        myEditor.getCaretModel().moveToOffset(r.getStartOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        final LinkedHashSet<String> nameSuggestions=new LinkedHashSet<String>();
        nameSuggestions.add(variable.getName());
        nameSuggestions.addAll(Arrays.asList(names));
        initOccurrencesMarkers();
        setElementToRename(variable);
        started=AbstractInplaceIntroducer.super.performInplaceRename(false,nameSuggestions);
        myBalloon.setTitle(variable.getText());
      }
      result.set(started);
      if (!started && variable != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            variable.delete();
          }
        }
);
      }
    }
  }
,getCommandName(),getCommandName());
  return result.get();
}
