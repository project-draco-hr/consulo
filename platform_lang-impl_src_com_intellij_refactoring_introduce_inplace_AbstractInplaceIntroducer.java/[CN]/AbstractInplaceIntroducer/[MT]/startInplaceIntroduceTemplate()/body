{
  final boolean replaceAllOccurrences=isReplaceAllOccurrences();
  final Ref<Boolean> result=new Ref<Boolean>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      final String[] names=suggestNames(replaceAllOccurrences,getLocalVariable());
      RangeMarker r;
      if (myLocalMarker != null) {
        final PsiReference reference=myExpr != null ? myExpr.getReference() : null;
        if (reference != null && reference.resolve() == myLocalVariable) {
          r=myExprMarker;
        }
 else {
          r=myLocalMarker;
        }
      }
 else {
        r=myExprMarker;
      }
      final V variable=createFieldToStartTemplateOn(replaceAllOccurrences,names);
      boolean started=false;
      if (variable != null) {
        myEditor.getCaretModel().moveToOffset(r.getStartOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        final LinkedHashSet<String> nameSuggestions=new LinkedHashSet<String>();
        nameSuggestions.add(variable.getName());
        nameSuggestions.addAll(Arrays.asList(names));
        initOccurrencesMarkers();
        setElementToRename(variable);
        started=AbstractInplaceIntroducer.super.performInplaceRename(false,nameSuggestions);
        myDocumentAdapter=new DocumentAdapter(){
          @Override public void documentChanged(          DocumentEvent e){
            final TemplateState templateState=TemplateManagerImpl.getTemplateState(myEditor);
            if (templateState != null) {
              final String variableValue=templateState.getVariableValue(VariableInplaceRenamer.PRIMARY_VARIABLE_NAME).getText();
              updateTitle(getVariable(),variableValue);
            }
          }
        }
;
        myEditor.getDocument().addDocumentListener(myDocumentAdapter);
        updateTitle(getVariable());
        if (TemplateManagerImpl.getTemplateState(myEditor) != null) {
          myEditor.putUserData(ACTIVE_INTRODUCE,AbstractInplaceIntroducer.this);
        }
      }
      result.set(started);
      if (!started && variable != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            variable.delete();
          }
        }
);
      }
    }
  }
,getCommandName(),getCommandName());
  return result.get();
}
