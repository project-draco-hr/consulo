{
  return new LocalPathIndifferentOperation(new AdminReaderOnStoredRepositoryPath(adminWriter),environment){
    private boolean myIsInModule=false;
    protected Command createCommand(    CvsRootProvider root,    CvsExecutionEnvironment cvsExecutionEnvironment){
      CheckoutCommand result=new CheckoutCommand();
      result.addModule(moduleName);
      result.setRecursive(true);
      return result;
    }
    protected ILocalFileReader createLocalFileReader(){
      return ConstantLocalFileReader.FOR_EXISTING_FILE;
    }
    protected String getOperationName(){
      return "checkout";
    }
    protected ILocalFileWriter createLocalFileWriter(    String cvsRoot,    UpdatedFilesManager mergedFilesCollector,    CvsExecutionEnvironment cvsExecutionEnvironment){
      return DeafLocalFileWriter.INSTANCE;
    }
    public void messageSent(    String message,    boolean error,    boolean tagged){
      super.messageSent(message,error,tagged);
      myDirectoryContentListener.setModulePath(myAdminWriterStoringRepositoryPath.getModulePath());
      if (message.startsWith("cvs server: Updating ")) {
        if ((myModuleLocation != null) && message.equals("cvs server: Updating " + myModuleLocation)) {
          myIsInModule=true;
        }
 else {
          myIsInModule=false;
        }
      }
 else       if (DirectoryContentListener.moduleMessage(message)) {
        myIsInModule=true;
      }
      if (myIsInModule) {
        myDirectoryContentListener.messageSent(message);
      }
    }
    public void modifyOptions(    GlobalOptions options){
      super.modifyOptions(options);
      options.setDoNoChanges(true);
    }
  }
;
}
