{
  final TreePath path=event.getPath();
  if (path == null)   return;
  final DefaultMutableTreeNode node=(PackageDependenciesNode)path.getLastPathComponent();
  if (node instanceof DirectoryNode) {
    Set<FileNode> fileNodes=null;
    for (int i=node.getChildCount() - 1; i >= 0; i--) {
      final TreeNode childNode=node.getChildAt(i);
      if (childNode instanceof ClassNode) {
        final ClassNode classNode=(ClassNode)childNode;
        final PsiFile containingFile=classNode.getContainingFile();
        if (containingFile != null && containingFile.isValid()) {
          if (fileNodes == null) {
            fileNodes=new HashSet<FileNode>();
          }
          fileNodes.add(new FileNode(containingFile,true));
        }
        node.remove(classNode);
      }
    }
    if (fileNodes != null) {
      for (      FileNode fileNode : fileNodes) {
        node.add(fileNode);
      }
    }
    TreeUtil.sort(node,getNodeComparator());
    final Object source=event.getSource();
    if (source instanceof JTree) {
      ((DefaultTreeModel)((JTree)source).getModel()).reload(node);
    }
  }
}
