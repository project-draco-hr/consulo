{
  if (ThrowSearchUtil.isSearchable(element)) {
    return ThrowSearchUtil.getSearchableTypeName(element);
  }
  if (element instanceof PsiDirectory) {
    return UsageViewUtil.getPackageName((PsiDirectory)element,false);
  }
 else   if (element instanceof PsiPackage) {
    return UsageViewUtil.getPackageName((PsiPackage)element);
  }
 else   if (element instanceof PsiFile) {
    return ((PsiFile)element).getVirtualFile().getPresentableUrl();
  }
 else   if (element instanceof PsiClass) {
    if (element instanceof PsiAnonymousClass) {
      return "anonymous class";
    }
 else {
      final PsiClass aClass=(PsiClass)element;
      String qName=aClass.getQualifiedName();
      return qName == null ? aClass.getName() : qName;
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)element;
    String formatted=PsiFormatUtil.formatMethod(psiMethod,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
    PsiClass psiClass=psiMethod.getContainingClass();
    if (psiClass != null) {
      return formatted + getContainingClassDescription(psiClass);
    }
    return formatted;
  }
 else   if (element instanceof PsiField) {
    PsiField psiField=(PsiField)element;
    String formatted=PsiFormatUtil.formatVariable(psiField,PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
    PsiClass psiClass=psiField.getContainingClass();
    if (psiClass != null) {
      return formatted + getContainingClassDescription(psiClass);
    }
    return formatted;
  }
 else   if (element instanceof PsiVariable) {
    return PsiFormatUtil.formatVariable((PsiVariable)element,PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
  }
  return "";
}
