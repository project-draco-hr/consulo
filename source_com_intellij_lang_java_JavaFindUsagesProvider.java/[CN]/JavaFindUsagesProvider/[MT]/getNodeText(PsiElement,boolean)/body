{
  if (element instanceof PsiDirectory) {
    return getPackageName((PsiDirectory)element,false);
  }
  if (element instanceof PsiPackage) {
    return getPackageName((PsiPackage)element);
  }
  if (element instanceof PsiFile) {
    return useFullName ? ((PsiFile)element).getVirtualFile().getPresentableUrl() : ((PsiFile)element).getName();
  }
  if (element instanceof PsiLabeledStatement) {
    return ((PsiLabeledStatement)element).getLabelIdentifier().getText();
  }
  if (ThrowSearchUtil.isSearchable(element)) {
    return ThrowSearchUtil.getSearchableTypeName(element);
  }
  if (element instanceof PsiClass) {
    String name=((PsiClass)element).getQualifiedName();
    if (name == null || !useFullName) {
      name=((PsiClass)element).getName();
    }
    if (name != null)     return name;
  }
  if (element instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)element;
    if (useFullName) {
      String s=PsiFormatUtil.formatMethod((PsiMethod)element,PsiSubstitutor.EMPTY,PsiFormatUtil.TYPE_AFTER | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME| PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME);
      final PsiClass psiClass=psiMethod.getContainingClass();
      if (psiClass != null) {
        final String qName=psiClass.getQualifiedName();
        if (qName != null) {
          if (psiClass.isInterface()) {
            s=LangBundle.message("java.terms.of.interface",s,qName);
          }
 else {
            s=LangBundle.message("java.terms.of.class",s,qName);
          }
        }
      }
      return s;
    }
 else {
      return PsiFormatUtil.formatMethod(psiMethod,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
    }
  }
 else   if (element instanceof PsiParameter && ((PsiParameter)element).getDeclarationScope() instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)((PsiParameter)element).getDeclarationScope();
    String s=LangBundle.message("java.terms.variable.of.method",PsiFormatUtil.formatVariable((PsiVariable)element,PsiFormatUtil.TYPE_AFTER | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY),PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE));
    final PsiClass psiClass=method.getContainingClass();
    if (psiClass != null && psiClass.getQualifiedName() != null) {
      if (psiClass.isInterface()) {
        s=LangBundle.message("java.terms.of.interface",s,psiClass.getQualifiedName());
      }
 else {
        s=LangBundle.message("java.terms.of.class",s,psiClass.getQualifiedName());
      }
    }
    return s;
  }
 else   if (element instanceof PsiField) {
    PsiField psiField=(PsiField)element;
    String s=PsiFormatUtil.formatVariable(psiField,PsiFormatUtil.TYPE_AFTER | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
    PsiClass psiClass=psiField.getContainingClass();
    if (psiClass != null) {
      String qName=psiClass.getQualifiedName();
      if (qName != null) {
        if (psiClass.isInterface()) {
          s=LangBundle.message("java.terms.of.interface",s,qName);
        }
 else {
          s=LangBundle.message("java.terms.of.class",s,qName);
        }
      }
    }
    return s;
  }
 else   if (element instanceof PsiVariable) {
    return PsiFormatUtil.formatVariable((PsiVariable)element,PsiFormatUtil.TYPE_AFTER | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
  }
  return "";
}
