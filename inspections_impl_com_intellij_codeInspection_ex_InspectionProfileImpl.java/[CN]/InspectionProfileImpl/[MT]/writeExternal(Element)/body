{
  element.setAttribute(VERSION_TAG,VALID_VERSION);
  for (  final HighlightDisplayKey key : myDisplayLevelMap.keySet()) {
    Element inspectionElement=new Element(INSPECTION_TOOL_TAG);
    final String toolName=key.toString();
    inspectionElement.setAttribute(CLASS_TAG,toolName);
    inspectionElement.setAttribute(LEVEL_TAG,getErrorLevel(key).toString());
    inspectionElement.setAttribute(ENABLED_TAG,Boolean.toString(isToolEnabled(key)));
    final InspectionTool tool=myTools.get(toolName);
    if (tool != null) {
      tool.writeExternal(inspectionElement);
    }
    element.addContent(inspectionElement);
  }
  myVisibleTreeState.writeExternal(element);
  if (myAdditionalJavadocTags != null && myAdditionalJavadocTags.length() != 0) {
    final Element additionalTags=new Element(ADDITIONAL_JAVADOC_TAGS_TAG);
    additionalTags.setAttribute(VALUE_TAG,myAdditionalJavadocTags);
    element.addContent(additionalTags);
  }
  if (myAdditionalHtmlTags != null && myAdditionalHtmlTags.length() != 0) {
    final Element additionalTags=new Element(ADDITIONAL_HTML_TAGS_TAG);
    additionalTags.setAttribute(VALUE_TAG,myAdditionalHtmlTags);
    element.addContent(additionalTags);
  }
  if (myAdditionalHtmlAttributes != null && myAdditionalHtmlAttributes.length() != 0) {
    final Element additionalAttributes=new Element(ADDITIONAL_HTML_ATTRIBUTES_TAG);
    additionalAttributes.setAttribute(VALUE_TAG,myAdditionalHtmlAttributes);
    element.addContent(additionalAttributes);
  }
  if (myAdditionalRequiredHtmlAttributes != null && myAdditionalRequiredHtmlAttributes.length() != 0) {
    final Element additionalAttributes=new Element(ADDITIONAL_REQUIRED_HTML_ATTRIBUTES_TAG);
    additionalAttributes.setAttribute(VALUE_TAG,myAdditionalRequiredHtmlAttributes);
    element.addContent(additionalAttributes);
  }
  final Element unusedSymbolSettings=new Element(UNUSED_SYMBOL_SETTINGS_TAG);
  myUnusedSymbolSettings.writeExternal(unusedSymbolSettings);
  element.addContent(unusedSymbolSettings);
}
