{
  super.readExternal(element);
  if (myFile == null) {
    initInspectionTools();
  }
  myDisplayLevelMap.clear();
  final String version=element.getAttributeValue(VERSION_TAG);
  if (myFile != null && (version == null || !version.equals(VALID_VERSION))) {
    try {
      element=InspectionProfileConvertor.convertToNewFormat(myFile,this);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
catch (    JDOMException e) {
      LOG.error(e);
    }
  }
  final String locked=element.getAttributeValue(IS_LOCKED);
  if (locked != null) {
    myLockedProfile=Boolean.parseBoolean(locked);
  }
  final Element highlightElement=element.getChild(USED_LEVELS);
  if (highlightElement != null) {
    ((SeverityProvider)getProfileManager()).getOwnSeverityRegistrar().readExternal(highlightElement);
  }
  myBaseProfile=getDefaultProfile();
  for (  final Object o : element.getChildren(INSPECTION_TOOL_TAG)) {
    Element toolElement=(Element)o;
    String toolClassName=toolElement.getAttributeValue(CLASS_TAG);
    final String levelName=toolElement.getAttributeValue(LEVEL_TAG);
    HighlightDisplayLevel level=HighlightDisplayLevel.find(((SeverityProvider)getProfileManager()).getOwnSeverityRegistrar().getSeverity(levelName));
    if (level == null || level == HighlightDisplayLevel.DO_NOT_SHOW) {
      level=HighlightDisplayLevel.WARNING;
    }
    InspectionTool tool=myTools.get(toolClassName);
    if (tool != null) {
      tool.readSettings(toolElement);
    }
    HighlightDisplayKey key=HighlightDisplayKey.find(toolClassName);
    if (key == null)     continue;
    final String enabled=toolElement.getAttributeValue(ENABLED_TAG);
    myDisplayLevelMap.put(key,new ToolState(level,enabled != null && Boolean.parseBoolean(enabled)));
  }
}
