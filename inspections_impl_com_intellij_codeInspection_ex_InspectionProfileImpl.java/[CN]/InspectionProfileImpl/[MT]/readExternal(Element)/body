{
  myDisplayLevelMap.clear();
  final String version=element.getAttributeValue(VERSION_TAG);
  if (version == null || !version.equals(VALID_VERSION)) {
    try {
      element=InspectionProfileConvertor.convertToNewFormat(myFile,this);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
catch (    JDOMException e) {
      LOG.error(e);
    }
  }
  for (  final Object o : element.getChildren(INSPECTION_TOOL_TAG)) {
    Element toolElement=(Element)o;
    String toolClassName=toolElement.getAttributeValue(CLASS_TAG);
    final String levelName=toolElement.getAttributeValue(LEVEL_TAG);
    HighlightDisplayLevel level=HighlightDisplayLevel.find(levelName);
    if (level == null || level == HighlightDisplayLevel.DO_NOT_SHOW) {
      level=HighlightDisplayLevel.WARNING;
    }
    InspectionTool tool=myTools.get(toolClassName);
    if (tool != null) {
      tool.readExternal(toolElement);
    }
    HighlightDisplayKey key=HighlightDisplayKey.find(toolClassName);
    if (key == null) {
      if (tool instanceof LocalInspectionToolWrapper) {
        key=HighlightDisplayKey.register(toolClassName,tool.getDisplayName(),((LocalInspectionToolWrapper)tool).getTool().getID());
      }
 else {
        key=HighlightDisplayKey.register(toolClassName);
      }
    }
    final String enabled=toolElement.getAttributeValue(ENABLED_TAG);
    myDisplayLevelMap.put(key,new ToolState(level,enabled != null && Boolean.parseBoolean(enabled)));
  }
  myVisibleTreeState.readExternal(element);
  final Element additionalJavadocs=element.getChild(ADDITIONAL_JAVADOC_TAGS_TAG);
  if (additionalJavadocs != null) {
    myAdditionalJavadocTags=additionalJavadocs.getAttributeValue(VALUE_TAG);
  }
  final Element additionalHtmlTags=element.getChild(ADDITIONAL_HTML_TAGS_TAG);
  if (additionalHtmlTags != null) {
    myAdditionalHtmlTags=additionalHtmlTags.getAttributeValue(VALUE_TAG);
  }
  final Element additionalHtmlAttributes=element.getChild(ADDITIONAL_HTML_ATTRIBUTES_TAG);
  if (additionalHtmlAttributes != null) {
    myAdditionalHtmlAttributes=additionalHtmlAttributes.getAttributeValue(VALUE_TAG);
  }
  final Element additionalRequiredHtmlAttributes=element.getChild(ADDITIONAL_REQUIRED_HTML_ATTRIBUTES_TAG);
  if (additionalRequiredHtmlAttributes != null) {
    myAdditionalRequiredHtmlAttributes=additionalRequiredHtmlAttributes.getAttributeValue(VALUE_TAG);
  }
  final Element unusedSymbolSettings=element.getChild(UNUSED_SYMBOL_SETTINGS_TAG);
  myUnusedSymbolSettings.readExternal(unusedSymbolSettings);
  myBaseProfile=InspectionProfileImpl.DEFAULT_PROFILE;
}
