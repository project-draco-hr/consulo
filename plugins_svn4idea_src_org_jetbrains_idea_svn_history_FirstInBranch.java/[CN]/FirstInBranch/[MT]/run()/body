{
  final SVNLogClient logClient=myVcs.createLogClient();
  try {
    logClient.doLog(SVNURL.parseURIEncoded(myFullBranchUrl),null,SVNRevision.UNDEFINED,SVNRevision.HEAD,SVNRevision.create(0),true,true,0,new ISVNLogEntryHandler(){
      public void handleLogEntry(      final SVNLogEntry logEntry) throws SVNException {
        final Map map=logEntry.getChangedPaths();
        for (        Object o : map.values()) {
          final SVNLogEntryPath path=(SVNLogEntryPath)o;
          final String localPath=path.getPath();
          final String copyPath=path.getCopyPath();
          if ('A' == path.getType() && (myBranchUrl.equals(localPath) || SVNPathUtil.isAncestor(localPath,myBranchUrl)) && (myTrunkUrl.equals(copyPath)) || SVNPathUtil.isAncestor(copyPath,myTrunkUrl)) {
            myCopyRevision=path.getCopyRevision();
            throw new MockException();
          }
        }
      }
    }
);
  }
 catch (  MockException e) {
    myConsumer.consume(myCopyRevision);
    return;
  }
catch (  SVNException e) {
    myConsumer.consume(myCopyRevision);
  }
  if (myPrimary) {
    new FirstInBranch(myVcs,myRepositoryRoot,myFullTrunkUrl,myFullBranchUrl,myConsumer,false).run();
  }
 else {
    myConsumer.consume(myCopyRevision);
  }
}
