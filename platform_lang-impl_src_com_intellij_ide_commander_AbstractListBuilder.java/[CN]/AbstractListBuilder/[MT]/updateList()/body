{
  if (myIsDisposed || myCurrentParent == null) {
    return;
  }
  if (myTreeStructure.hasSomethingToCommit()) {
    myTreeStructure.commit();
  }
  AbstractTreeNode parentDescriptor=myCurrentParent;
  while (true) {
    parentDescriptor.update();
    if (parentDescriptor.getValue() != null)     break;
    parentDescriptor=parentDescriptor.getParent();
  }
  final Object[] children=getChildren(parentDescriptor);
  final HashMap<Object,Integer> elementToIndexMap=new HashMap<Object,Integer>();
  for (int i=0; i < children.length; i++) {
    elementToIndexMap.put(children[i],Integer.valueOf(i));
  }
  final List<NodeDescriptor> resultDescriptors=new ArrayList<NodeDescriptor>();
  final Object[] listChildren=myModel.toArray();
  for (  final Object child : listChildren) {
    if (!(child instanceof NodeDescriptor)) {
      continue;
    }
    final NodeDescriptor descriptor=(NodeDescriptor)child;
    descriptor.update();
    final Object newElement=descriptor.getElement();
    final Integer index=newElement != null ? elementToIndexMap.get(newElement) : null;
    if (index != null) {
      resultDescriptors.add(descriptor);
      descriptor.setIndex(index.intValue());
      elementToIndexMap.remove(newElement);
    }
  }
  for (  final Object child : elementToIndexMap.keySet()) {
    final Integer index=elementToIndexMap.get(child);
    if (index != null) {
      final NodeDescriptor childDescr=myTreeStructure.createDescriptor(child,parentDescriptor);
      childDescr.setIndex(index.intValue());
      childDescr.update();
      resultDescriptors.add(childDescr);
    }
  }
  final SelectionInfo selection=storeSelection();
  if (myComparator != null) {
    Collections.sort(resultDescriptors,myComparator);
  }
 else {
    Collections.sort(resultDescriptors,IndexComparator.INSTANCE);
  }
  if (shouldAddTopElement()) {
    final List elems=new ArrayList();
    elems.add(new TopLevelNode(myProject,parentDescriptor.getValue()));
    elems.addAll(resultDescriptors);
    myModel.replaceElements(elems);
  }
 else {
    myModel.replaceElements(resultDescriptors);
  }
  restoreSelection(selection);
  updateParentTitle();
}
