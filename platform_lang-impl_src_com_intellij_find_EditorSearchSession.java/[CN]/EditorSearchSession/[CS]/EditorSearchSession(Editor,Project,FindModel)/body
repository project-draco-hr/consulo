{
  myClickToHighlightLabel.setVisible(false);
  myFindModel=findModel;
  myEditor=editor;
  mySearchResults=new SearchResults(myEditor,project);
  myLivePreviewController=new LivePreviewController(mySearchResults,this);
  myComponent=SearchReplaceComponent.buildFor(project,myEditor.getContentComponent()).addPrimarySearchActions(new PrevOccurrenceAction(),new NextOccurrenceAction(),new FindAllAction(),new AnSeparator(),new AddOccurrenceAction(),new RemoveOccurrenceAction(),new SelectAllAction(),new AnSeparator()).addSecondarySearchActions(new ToggleInCommentsAction(),new ToggleInLiteralsOnlyAction(),new ToggleExceptCommentsAction(),new ToggleExceptLiteralsAction(),new ToggleExceptCommentsAndLiteralsAction()).addExtraSearchActions(new ToggleMatchCase(),new ToggleRegex(),new ToggleWholeWordsOnlyAction(),new StatusTextAction(),new DefaultCustomComponentAction(myClickToHighlightLabel)).addSearchFieldActions(new RestorePreviousSettingsAction()).addPrimaryReplaceActions(new ReplaceAction(),new ReplaceAllAction(),new ExcludeAction()).addExtraReplaceAction(new TogglePreserveCaseAction(),new ToggleSelectionOnlyAction()).addReplaceFieldActions(new PrevOccurrenceAction(),new NextOccurrenceAction()).withDataProvider(this).withCloseAction(new Runnable(){
    @Override public void run(){
      close();
    }
  }
).withReplaceAction(new Runnable(){
    @Override public void run(){
      replaceCurrent();
    }
  }
).withSecondarySearchActionsIsModifiedGetter(new BooleanGetter(){
    @Override public boolean get(){
      return myFindModel.getSearchContext() != FindModel.SearchContext.ANY;
    }
  }
).build();
  myComponent.addListener(this);
  new UiNotifyConnector(myComponent,new Activatable(){
    @Override public void showNotify(){
      initLivePreview();
    }
    @Override public void hideNotify(){
      myLivePreviewController.off();
      mySearchResults.removeListener(EditorSearchSession.this);
    }
  }
);
  new SwitchToFind(getComponent());
  new SwitchToReplace(getComponent());
  myFindModel.addObserver(new FindModel.FindModelObserver(){
    @Override public void findModelChanged(    FindModel findModel){
      String stringToFind=myFindModel.getStringToFind();
      if (!wholeWordsApplicable(stringToFind)) {
        myFindModel.setWholeWordsOnly(false);
      }
      updateUIWithFindModel();
      updateResults(true);
      FindUtil.updateFindInFileModel(getProject(),myFindModel);
    }
  }
);
  updateUIWithFindModel();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    initLivePreview();
  }
  updateMultiLineStateIfNeed();
}
