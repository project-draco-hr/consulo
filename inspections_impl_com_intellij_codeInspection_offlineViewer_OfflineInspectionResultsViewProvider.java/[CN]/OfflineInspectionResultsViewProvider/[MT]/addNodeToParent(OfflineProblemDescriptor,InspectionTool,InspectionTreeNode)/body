{
  final Set<InspectionTreeNode> children=new HashSet<InspectionTreeNode>();
  TreeUtil.traverseDepth(parentNode,new TreeUtil.Traverse(){
    public boolean accept(    Object node){
      children.add((InspectionTreeNode)node);
      return true;
    }
  }
);
  OfflineRefElementNode nodeToAdd=new OfflineRefElementNode(descriptor,tool);
  boolean firstLevel=true;
  RefElementNode prevNode=null;
  while (true) {
    OfflineRefElementNode currentNode=firstLevel ? nodeToAdd : new OfflineRefElementNode(descriptor,tool);
    for (    InspectionTreeNode node : children) {
      if (node instanceof OfflineRefElementNode) {
        final OfflineRefElementNode refElementNode=(OfflineRefElementNode)node;
        if (Comparing.equal(refElementNode.getUserObject(),descriptor)) {
          if (firstLevel) {
            return refElementNode;
          }
 else {
            for (int i=0; i < refElementNode.getChildCount(); i++) {
              if (Comparing.equal(((InspectionTreeNode)refElementNode.getChildAt(i)).getUserObject(),prevNode.getUserObject())) {
                return nodeToAdd;
              }
            }
            refElementNode.add(prevNode);
            return nodeToAdd;
          }
        }
      }
    }
    if (!firstLevel) {
      currentNode.add(prevNode);
    }
    OfflineProblemDescriptor owner=descriptor.getOwner();
    if (owner == null) {
      parentNode.add(currentNode);
      return nodeToAdd;
    }
    descriptor=owner;
    prevNode=currentNode;
    firstLevel=false;
  }
}
