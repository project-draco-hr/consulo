{
  final String shortName=tool.getShortName();
  if (myContent.containsKey(shortName)) {
    final Map<String,List<OfflineProblemDescriptor>> package2Problems=myContent.get(shortName);
    final List<InspectionTreeNode> result=new ArrayList<InspectionTreeNode>();
    for (    String packageName : package2Problems.keySet()) {
      final InspectionPackageNode pNode=new InspectionPackageNode(packageName);
      final List<OfflineProblemDescriptor> elements=package2Problems.get(packageName);
      for (      OfflineProblemDescriptor descriptor : elements) {
        final OfflineRefElementNode elemNode=addNodeToParent(descriptor,tool,pNode);
        if (tool instanceof DescriptorProviderInspection) {
          final OfflineProblemDescriptorNode problemNode=new OfflineProblemDescriptorNode(descriptor,!(tool instanceof DuplicatePropertyInspection),(DescriptorProviderInspection)tool);
          elemNode.add(problemNode);
        }
      }
      if (pNode.getChildCount() > 0)       result.add(pNode);
    }
    return result.toArray(new InspectionTreeNode[result.size()]);
  }
  return new InspectionTreeNode[0];
}
