{
  if (targets.length == 0)   return null;
  if (targets.length == 1) {
    targets[0].navigate(true);
    return null;
  }
  final JBListWithHintProvider list=new JBListWithHintProvider(new CollectionListModel(targets)){
    @Override protected PsiElement getPsiElementForHint(    final Object selectedValue){
      return (PsiElement)selectedValue;
    }
  }
;
  list.setCellRenderer(listRenderer);
  final PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (listRenderer instanceof PsiElementListCellRenderer) {
    ((PsiElementListCellRenderer)listRenderer).installSpeedSearch(builder);
  }
  final JBPopup popup=builder.setTitle(title).setMovable(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      int[] ids=list.getSelectedIndices();
      if (ids == null || ids.length == 0)       return;
      Object[] selectedElements=list.getSelectedValues();
      for (      Object element : selectedElements) {
        PsiElement selected=(PsiElement)element;
        LOG.assertTrue(selected.isValid());
        ((NavigatablePsiElement)selected).navigate(true);
      }
    }
  }
).setCancelCallback(new Computable<Boolean>(){
    @Override public Boolean compute(){
      list.hideHint();
      return true;
    }
  }
).createPopup();
  if (listUpdaterTask != null) {
    listUpdaterTask.setList(list);
    listUpdaterTask.setPopup((AbstractPopup)popup);
    ProgressManager.getInstance().run(listUpdaterTask);
  }
  return popup;
}
