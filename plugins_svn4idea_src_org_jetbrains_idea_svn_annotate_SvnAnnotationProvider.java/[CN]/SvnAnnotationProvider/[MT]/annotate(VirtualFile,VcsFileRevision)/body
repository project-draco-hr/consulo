{
  if (file.isDirectory()) {
    throw new VcsException(SvnBundle.message("exception.text.cannot.annotate.directory"));
  }
  final FileAnnotation[] annotation=new FileAnnotation[1];
  final SVNException[] exception=new SVNException[1];
  Runnable command=new Runnable(){
    public void run(){
      final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      try {
        final SvnFileAnnotation result=new SvnFileAnnotation(myVcs,file);
        final File ioFile=new File(file.getPath()).getAbsoluteFile();
        SVNWCClient wcClient=myVcs.createWCClient();
        SVNInfo info=wcClient.doInfo(ioFile,SVNRevision.WORKING);
        if (info == null) {
          exception[0]=new SVNException(SVNErrorMessage.create(SVNErrorCode.UNKNOWN,"File ''{0}'' is not under version control",ioFile));
          return;
        }
        final String url=info.getURL() == null ? null : info.getURL().toString();
        SVNLogClient client=myVcs.createLogClient();
        SVNRevision endRevision=((SvnFileRevision)revision).getRevision();
        if (SVNRevision.WORKING.equals(endRevision)) {
          endRevision=info.getRevision();
        }
        if (progress != null) {
          progress.setText(SvnBundle.message("progress.text.computing.annotation",file.getName()));
        }
        client.doAnnotate(ioFile,SVNRevision.UNDEFINED,SVNRevision.create(0),endRevision,true,new ISVNAnnotateHandler(){
          public void handleLine(          Date date,          long revision,          String author,          String line){
            result.appendLineInfo(date,revision,author,line);
          }
          public void handleLine(          final Date date,          final long revision,          final String author,          final String line,          final Date mergedDate,          final long mergedRevision,          final String mergedAuthor,          final String mergedPath,          final int lineNumber) throws SVNException {
            handleLine(date,revision,author,line);
          }
          public boolean handleRevision(          final Date date,          final long revision,          final String author,          final File contents) throws SVNException {
            return false;
          }
          public void handleEOF(){
          }
        }
);
        client.doLog(new File[]{ioFile},endRevision,SVNRevision.create(1),false,false,0,new ISVNLogEntryHandler(){
          public void handleLogEntry(          SVNLogEntry logEntry){
            if (progress != null) {
              progress.setText2(SvnBundle.message("progress.text2.revision.processed",logEntry.getRevision()));
            }
            result.setRevision(logEntry.getRevision(),new SvnFileRevision(myVcs,SVNRevision.UNDEFINED,logEntry,url,""));
          }
        }
);
        annotation[0]=result;
      }
 catch (      SVNException e) {
        exception[0]=e;
      }
    }
  }
;
  if (ApplicationManager.getApplication().isDispatchThread()) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(command,SvnBundle.message("action.text.annotate"),false,myVcs.getProject());
  }
 else {
    command.run();
  }
  if (exception[0] != null) {
    throw new VcsException(exception[0]);
  }
  return annotation[0];
}
