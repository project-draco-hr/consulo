{
  if (file.isDirectory()) {
    throw new VcsException(SvnBundle.message("exception.text.cannot.annotate.directory"));
  }
  final FileAnnotation[] annotation=new FileAnnotation[1];
  final SVNException[] exception=new SVNException[1];
  Runnable command=new Runnable(){
    public void run(){
      final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      try {
        final SvnFileAnnotation result=new SvnFileAnnotation(myVcs);
        SVNLogClient client=myVcs.createLogClient();
        SVNRevision endRevision=((SvnRevisionNumber)revision.getRevisionNumber()).getRevision();
        if (progress != null) {
          progress.setText(SvnBundle.message("progress.text.computing.annotation",file.getName()));
        }
        client.doAnnotate(new File(file.getPath()).getAbsoluteFile(),SVNRevision.UNDEFINED,SVNRevision.create(0),endRevision,new ISVNAnnotateHandler(){
          public void handleLine(          Date date,          long revision,          String author,          String line){
            result.appendLineInfo(date,revision,author,line);
          }
        }
);
        annotation[0]=result;
      }
 catch (      SVNException e) {
        exception[0]=e;
      }
    }
  }
;
  if (ApplicationManager.getApplication().isDispatchThread()) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(command,SvnBundle.message("action.text.annotate"),false,myVcs.getProject());
  }
 else {
    command.run();
  }
  if (exception[0] != null) {
    throw new VcsException(exception[0]);
  }
  return annotation[0];
}
