{
  final SvnFileAnnotation svnFileAnnotation=(SvnFileAnnotation)fileAnnotation;
  svnFileAnnotation.getAnnotationSourceSwitcher().switchTo(AnnotationSource.LOCAL);
  final int size=svnFileAnnotation.getNumLines();
  final VcsUsualLineAnnotationData lineAnnotationData=new VcsUsualLineAnnotationData(size);
  for (int i=0; i < size; i++) {
    final VcsRevisionNumber revisionNumber=svnFileAnnotation.getLineRevisionNumber(i);
    lineAnnotationData.put(i,revisionNumber);
  }
  final VcsRareLineAnnotationData merged=new VcsRareLineAnnotationData(size);
  final Map<VcsRevisionNumber,VcsFileRevision> addMap=new HashMap<VcsRevisionNumber,VcsFileRevision>();
  svnFileAnnotation.getAnnotationSourceSwitcher().switchTo(AnnotationSource.MERGE);
  for (int i=0; i < size; i++) {
    if (svnFileAnnotation.getAnnotationSourceSwitcher().mergeSourceAvailable(i)) {
      final VcsRevisionNumber number=svnFileAnnotation.getLineRevisionNumber(i);
      merged.put(i,number);
      addMap.put(number,svnFileAnnotation.getRevision(((SvnRevisionNumber)number).getRevision().getNumber()));
    }
  }
  final VcsAnnotation vcsAnnotation=new VcsAnnotation(new FilePathImpl(svnFileAnnotation.getFile()),lineAnnotationData,svnFileAnnotation.getFirstRevisionNumber());
  if (!merged.isEmpty()) {
    vcsAnnotation.addAnnotation(MERGED_KEY,merged);
    vcsAnnotation.addCachedOtherRevisions(addMap);
  }
  return vcsAnnotation;
}
