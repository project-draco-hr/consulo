{
  AnnotationHolder annotationHolder=new AnnotationHolderImpl();
  List<HighlightInfo> infos=new ArrayList<HighlightInfo>(myUnusedImports.size());
  for (  GrImportStatement unusedImport : myUnusedImports) {
    Annotation annotation=annotationHolder.createWarningAnnotation(unusedImport,GroovyInspectionBundle.message("unused.import"));
    annotation.setHighlightType(ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    annotation.registerFix(createUnusedImportIntention());
    infos.add(HighlightInfo.fromAnnotation(annotation));
  }
  UpdateHighlightersUtil.setHighlightersToEditor(myProject,myDocument,0,myFile.getTextLength(),infos,getId());
  final Runnable optimize=myOptimizeRunnable;
  if (optimize != null && timeToOptimizeImports()) {
    PostHighlightingPass.invokeOnTheFlyImportOptimizer(new Runnable(){
      @Override public void run(){
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        optimize.run();
      }
    }
);
  }
}
