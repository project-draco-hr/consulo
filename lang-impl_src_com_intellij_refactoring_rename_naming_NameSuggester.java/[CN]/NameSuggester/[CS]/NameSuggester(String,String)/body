{
  myOldClassNameAsGiven=oldClassName;
  myNewClassNameAsGiven=newClassName;
  myOldClassName=NameUtil.splitNameIntoWords(oldClassName);
  myNewClassName=NameUtil.splitNameIntoWords(newClassName);
  myChanges=new ArrayList<OriginalToNewChange>();
  int oldIndex=myOldClassName.length - 1;
  int oldLastMatch=myOldClassName.length;
  int newLastMatch=myNewClassName.length;
  while (oldIndex >= 0) {
    final String patternWord=myOldClassName[oldIndex];
    final int matchingWordIndex=findInNewBackwardsFromIndex(patternWord,newLastMatch - 1);
    if (matchingWordIndex < 0) {
      oldIndex--;
    }
 else {
      if (oldIndex + 1 <= oldLastMatch - 1 || matchingWordIndex + 1 <= newLastMatch - 1) {
        final OriginalToNewChange change=new OriginalToNewChange(oldIndex + 1,oldLastMatch - 1,matchingWordIndex + 1,newLastMatch - 1);
        myChanges.add(change);
      }
      oldLastMatch=oldIndex;
      newLastMatch=matchingWordIndex;
      oldIndex--;
    }
  }
  if (0 <= oldLastMatch - 1 || 0 <= newLastMatch - 1) {
    myChanges.add(new OriginalToNewChange(0,oldLastMatch - 1,0,newLastMatch - 1));
  }
}
