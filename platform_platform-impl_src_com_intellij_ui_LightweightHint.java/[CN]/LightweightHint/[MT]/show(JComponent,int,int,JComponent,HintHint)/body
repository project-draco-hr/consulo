{
  myParentComponent=parentComponent;
  myHintHint=hintHint;
  myFocusBackComponent=focusBackComponent;
  LOG.assertTrue(myParentComponent.isShowing());
  myEscListener=new MyEscListener();
  myComponent.registerKeyboardAction(myEscListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
  myComponent.registerKeyboardAction(myEscListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_FOCUSED);
  final JLayeredPane layeredPane=parentComponent.getRootPane().getLayeredPane();
  myComponent.validate();
  if (!myForceShowAsPopup && (myForceLightweightPopup || fitsLayeredPane(layeredPane,myComponent,new RelativePoint(parentComponent,new Point(x,y)),hintHint))) {
    beforeShow();
    final Dimension preferredSize=myComponent.getPreferredSize();
    if (hintHint.isAwtTooltip()) {
      IdeTooltip tooltip=new IdeTooltip(hintHint.getOriginalComponent(),hintHint.getOriginalPoint(),myComponent,hintHint,myComponent){
        @Override protected boolean canAutohideOn(        TooltipEvent event){
          if (event.getInputEvent() instanceof MouseEvent) {
            return !(hintHint.isContentActive() && event.isIsEventInsideBalloon());
          }
 else           if (event.getAction() != null) {
            return false;
          }
 else {
            return true;
          }
        }
        @Override protected void onHidden(){
          fireHintHidden();
          TooltipController.getInstance().resetCurrent();
        }
        @Override public boolean canBeDismissedOnTimeout(){
          return false;
        }
      }
.setToCenterIfSmall(hintHint.isMayCenterTooltip()).setPreferredPosition(hintHint.getPreferredPosition()).setHighlighterType(hintHint.isHightlighterType()).setTextForeground(hintHint.getTextForeground()).setTextBackground(hintHint.getTextBackground()).setBorderColor(hintHint.getBorderColor()).setFont(hintHint.getTextFont()).setCalloutShift(hintHint.getCalloutShift()).setPositionChangeShift(hintHint.getPositionChangeX(),hintHint.getPositionChangeY()).setExlicitClose(hintHint.isExplicitClose());
      myComponent.validate();
      myCurrentIdeTooltip=IdeTooltipManager.getInstance().show(tooltip,false);
      myCurrentIdeTooltip.getShown().notify(myHintHint.getShown());
    }
 else {
      final Point layeredPanePoint=SwingUtilities.convertPoint(parentComponent,x,y,layeredPane);
      myComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,preferredSize.width,preferredSize.height);
      layeredPane.add(myComponent,JLayeredPane.POPUP_LAYER);
      hintHint.getShown().setDone();
      myComponent.validate();
      myComponent.repaint();
    }
  }
 else {
    myIsRealPopup=true;
    Point actualPoint=new Point(x,y);
    JComponent actualComponent=new OpaquePanel(new BorderLayout());
    actualComponent.add(myComponent,BorderLayout.CENTER);
    if (myHintHint.isAwtTooltip()) {
      fixActualPoint(actualPoint);
      int inset=BalloonImpl.getNormalInset();
      actualComponent.setBorder(new LineBorder(hintHint.getTextBackground(),inset));
      actualComponent.setBackground(hintHint.getTextBackground());
      actualComponent.validate();
    }
    myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(actualComponent,myFocusRequestor).setRequestFocus(myFocusRequestor != null).setFocusable(myFocusRequestor != null).setResizable(myResizable).setMovable(myTitle != null).setTitle(myTitle).setModalContext(false).setShowShadow(isRealPopup()).setCancelKeyEnabled(false).setCancelOnClickOutside(myCancelOnClickOutside).setCancelOnOtherWindowOpen(myCancelOnOtherWindowOpen).setForceHeavyweight(!myForceLightweightPopup && myForceShowAsPopup).createPopup();
    myPopup.getShown().notify(hintHint.getShown());
    beforeShow();
    myPopup.show(new RelativePoint(myParentComponent,new Point(actualPoint.x,actualPoint.y)));
  }
}
