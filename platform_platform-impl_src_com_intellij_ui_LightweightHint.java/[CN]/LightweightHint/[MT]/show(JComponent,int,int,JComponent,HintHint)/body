{
  myParentComponent=parentComponent;
  myHintHint=hintHint;
  myFocusBackComponent=focusBackComponent;
  LOG.assertTrue(myParentComponent.isShowing());
  myEscListener=new MyEscListener();
  myComponent.registerKeyboardAction(myEscListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
  final JLayeredPane layeredPane=parentComponent.getRootPane().getLayeredPane();
  myComponent.validate();
  if (!myForceShowAsPopup && (myForceLightweightPopup || fitsLayeredPane(layeredPane,myComponent,new RelativePoint(parentComponent,new Point(x,y))))) {
    beforeShow();
    final Dimension preferredSize=myComponent.getPreferredSize();
    if (hintHint.isAwtTooltip()) {
      IdeTooltip tooltip=new IdeTooltip(hintHint.getOriginalComponent(),hintHint.getOriginalPoint(),myComponent,hintHint,myComponent){
        @Override protected boolean canAutohideOn(        TooltipEvent event){
          if (event.getInputEvent() instanceof MouseEvent) {
            return !(hintHint.isContentActive() && event.isIsEventInsideBalloon());
          }
 else {
            return true;
          }
        }
        @Override protected void onHidden(){
          fireHintHidden();
          TooltipController.getInstance().resetCurrent();
        }
        @Override public boolean canBeDismissedOnTimeout(){
          return false;
        }
      }
.setToCenterIfSmall(hintHint.isMayCenterTooltip()).setPreferredPosition(hintHint.getPreferredPosition()).setHighlighterType(hintHint.isHightlighterType()).setTextForeground(hintHint.getTextForeground()).setTextBackground(hintHint.getTextBackground()).setBorderColor(hintHint.getBorderColor()).setFont(hintHint.getTextFont()).setCalloutShift(hintHint.getCalloutShift());
      myComponent.validate();
      myCurrentIdeTooltip=IdeTooltipManager.getInstance().show(tooltip,false);
    }
 else {
      final Point layeredPanePoint=SwingUtilities.convertPoint(parentComponent,x,y,layeredPane);
      myComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,preferredSize.width,preferredSize.height);
      layeredPane.add(myComponent,JLayeredPane.POPUP_LAYER);
      myComponent.validate();
      myComponent.repaint();
    }
  }
 else {
    myIsRealPopup=true;
    myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(myComponent,null).setRequestFocus(false).setResizable(myResizable).setMovable(myTitle != null).setTitle(myTitle).setShowShadow(!myForceLightweightPopup && myForceShowAsPopup).setCancelKeyEnabled(false).setCancelOnClickOutside(myCancelOnClickOutside).setCancelOnOtherWindowOpen(myCancelOnOtherWindowOpen).setForceHeavyweight(!myForceLightweightPopup && myForceShowAsPopup).createPopup();
    beforeShow();
    myPopup.show(new RelativePoint(myParentComponent,new Point(x,y)));
  }
}
