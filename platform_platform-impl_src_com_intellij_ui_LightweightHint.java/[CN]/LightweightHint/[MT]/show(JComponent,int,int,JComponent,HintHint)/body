{
  myParentComponent=parentComponent;
  myFocusBackComponent=focusBackComponent;
  LOG.assertTrue(myParentComponent.isShowing());
  myEscListener=new MyEscListener();
  myComponent.registerKeyboardAction(myEscListener,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
  final JLayeredPane layeredPane=parentComponent.getRootPane().getLayeredPane();
  myComponent.validate();
  if (!myForceShowAsPopup && (myForceLightweightPopup || fitsLayeredPane(layeredPane,myComponent,new RelativePoint(parentComponent,new Point(x,y))))) {
    beforeShow();
    final Dimension preferredSize=myComponent.getPreferredSize();
    if (hintInfo.isAwtTooltip()) {
      myCurrentIdeTooltip=IdeTooltipManager.getInstance().showTipNow(new IdeTooltip(hintInfo.getOriginalComponent(),hintInfo.getOriginalPoint(),myComponent){
        @Override protected boolean canAutohideOn(        MouseEvent me){
          return me.getComponent() != hintInfo.getOriginalComponent();
        }
        @Override protected void onHidden(){
          fireHintHidden();
        }
      }
);
    }
 else {
      final Point layeredPanePoint=SwingUtilities.convertPoint(parentComponent,x,y,layeredPane);
      myComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,preferredSize.width,preferredSize.height);
      layeredPane.add(myComponent,JLayeredPane.POPUP_LAYER);
      myComponent.validate();
      myComponent.repaint();
    }
  }
 else {
    myIsRealPopup=true;
    myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(myComponent,null).setRequestFocus(false).setResizable(myResizable).setMovable(myTitle != null).setTitle(myTitle).setShowShadow(false).setCancelKeyEnabled(false).setCancelOnClickOutside(myCancelOnClickOutside).setCancelOnOtherWindowOpen(myCancelOnOtherWindowOpen).setForceHeavyweight(!myForceLightweightPopup && myForceShowAsPopup).createPopup();
    beforeShow();
    myPopup.show(new RelativePoint(myParentComponent,new Point(x,y)));
  }
}
