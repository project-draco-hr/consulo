{
  LiveTemplateBuilder builder=new LiveTemplateBuilder();
  int end=-1;
  boolean hasChildren=myChildren.size() > 0;
  String txt=!hasChildren && myToInsertChildren ? surroundedText : null;
  TemplateImpl parentTemplate=myTemplateToken instanceof XmlTemplateToken ? invokeXmlTemplate((XmlTemplateToken)myTemplateToken,callback,myNumberInIteration,generator,txt,hasChildren) : invokeTemplate(myTemplateToken,hasChildren,callback,generator,txt);
  int offset=builder.insertTemplate(0,parentTemplate,null);
  int newOffset=gotoChild(callback.getProject(),builder.getText(),offset,0,builder.length());
  if (offset < builder.length() && newOffset != offset) {
    end=offset;
  }
  offset=newOffset;
  if (end == -1 && offset < builder.length() && myChildren.size() == 0) {
    end=offset;
  }
  LiveTemplateBuilder.Marker marker=offset < builder.length() ? builder.createMarker(offset) : null;
  for (int i=0, myChildrenSize=myChildren.size(); i < myChildrenSize; i++) {
    GenerationNode child=myChildren.get(i);
    TemplateImpl childTemplate=child.generate(callback,surroundedText,generator);
    boolean blockTag=child.isBlockTag();
    if (blockTag && !isNewLineBefore(builder.getText(),offset)) {
      builder.insertText(offset++,"\n");
    }
    int e=builder.insertTemplate(offset,childTemplate,null);
    offset=marker != null ? marker.getEndOffset() : builder.length();
    if (blockTag && !isNewLineAfter(builder.getText(),offset)) {
      builder.insertText(offset++,"\n");
    }
    if (end == -1 && e < offset) {
      end=e;
    }
  }
  if (end != -1) {
    builder.insertVariableSegment(end,TemplateImpl.END);
  }
  return builder.buildTemplate();
}
