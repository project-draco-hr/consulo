{
  final Project project=event.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDisposed()) {
    notifyError(project,"Project is null. " + event.getPlace() + ", "+ event.getDataContext(),null);
    return;
  }
  final VirtualFile[] vFiles=event.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (vFiles == null || vFiles.length != 1 || vFiles[0] == null) {
    notifyError(project,"Selected incorrect virtual files array: " + Arrays.toString(vFiles),null);
    return;
  }
  final VirtualFile file=vFiles[0];
  final VirtualFile vcsRoot=VcsUtil.getVcsRootFor(project,file);
  if (vcsRoot == null) {
    notifyError(project,"The file " + file + " is not under Git version control.",null);
    return;
  }
  final List<GitBranch> branches=new ArrayList<GitBranch>();
  GitBranch curBranch=null;
  try {
    curBranch=GitBranch.list(project,vcsRoot,true,true,branches,null);
  }
 catch (  VcsException e) {
    notifyError(project,"Couldn't get information about current branch",e);
  }
  if (curBranch == null) {
    notifyError(project,"Current branch is null.",null);
    return;
  }
  final String currentBranch=curBranch.getName();
  final JBList list=new JBList(branches);
  list.installCellRenderer(new NotNullFunction<GitBranch,JComponent>(){
    @NotNull public JComponent fun(    GitBranch branch){
      if (branch.isActive()) {
        JLabel label=new JLabel(branch.getName() + " *");
        final Map<TextAttribute,Float> attributes=new HashMap<TextAttribute,Float>(1);
        attributes.put(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);
        label.setFont(label.getFont().deriveFont(attributes));
        return label;
      }
      return new JLabel(branch.getName());
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Select branch to compare").setItemChoosenCallback(new Runnable(){
    public void run(){
      Application app=ApplicationManager.getApplication();
      if (project.isDisposed() || app == null || !app.isActive() || app.isDisposed() || app.isDisposeInProgress()) {
        return;
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          try {
            showDiffWithBranch(project,file,currentBranch,list.getSelectedValue().toString());
          }
 catch (          Exception e) {
            notifyError(project,"Couldn't compare file [" + file + "] with selected branch ["+ list.getSelectedValue()+ "]",e);
          }
        }
      }
);
    }
  }
).setAutoselectOnMouseMove(true).createPopup().showInBestPositionFor(event.getDataContext());
}
