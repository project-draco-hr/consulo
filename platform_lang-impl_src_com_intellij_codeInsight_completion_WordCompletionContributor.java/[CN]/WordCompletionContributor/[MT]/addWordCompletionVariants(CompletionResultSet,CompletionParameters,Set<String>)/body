{
  final Set<String> realExcludes=new HashSet<String>(excludes);
  for (  String exclude : excludes) {
    String[] words=exclude.split("[ \\.-]");
    if (words.length > 0 && StringUtil.isNotEmpty(words[0])) {
      realExcludes.add(words[0]);
    }
  }
  int startOffset=parameters.getOffset();
  final PsiElement position=parameters.getPosition();
  final CompletionResultSet javaResultSet=result.withPrefixMatcher(CompletionUtil.findJavaIdentifierPrefix(parameters));
  final CompletionResultSet plainResultSet=result.withPrefixMatcher(CompletionUtil.findAlphanumericPrefix(parameters));
  for (  final String word : getAllWords(position,startOffset)) {
    if (!realExcludes.contains(word)) {
      final LookupElement item=LookupElementBuilder.create(word);
      javaResultSet.addElement(item);
      plainResultSet.addElement(item);
    }
  }
  addValuesFromOtherStringLiterals(result,parameters,realExcludes,position);
}
