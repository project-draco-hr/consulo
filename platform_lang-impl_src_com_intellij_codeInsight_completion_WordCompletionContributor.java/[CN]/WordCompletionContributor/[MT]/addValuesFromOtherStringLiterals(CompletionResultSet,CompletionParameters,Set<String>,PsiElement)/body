{
  ParserDefinition definition=LanguageParserDefinitions.INSTANCE.forLanguage(position.getLanguage());
  if (definition == null) {
    return;
  }
  final ElementPattern<PsiElement> pattern=psiElement().withElementType(definition.getStringLiteralElements());
  final PsiElement localString=PsiTreeUtil.findFirstParent(position,false,new Condition<PsiElement>(){
    @Override public boolean value(    PsiElement element){
      return pattern.accepts(element);
    }
  }
);
  if (localString == null) {
    return;
  }
  ElementManipulator<PsiElement> manipulator=ElementManipulators.getManipulator(localString);
  if (manipulator == null) {
    return;
  }
  int offset=manipulator.getRangeInElement(localString).getStartOffset();
  PsiFile file=position.getContainingFile();
  final CompletionResultSet fullStringResult=result.withPrefixMatcher(file.getText().substring(offset + localString.getTextRange().getStartOffset(),parameters.getOffset()));
  file.accept(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element == localString) {
        return;
      }
      if (pattern.accepts(element)) {
        element.accept(new PsiRecursiveElementWalkingVisitor(){
          @Override public void visitElement(          PsiElement each){
            String valueText=ElementManipulators.getValueText(each);
            if (StringUtil.isNotEmpty(valueText) && !realExcludes.contains(valueText)) {
              final LookupElement item=LookupElementBuilder.create(valueText);
              fullStringResult.addElement(item);
            }
          }
        }
);
        return;
      }
      super.visitElement(element);
    }
  }
);
}
