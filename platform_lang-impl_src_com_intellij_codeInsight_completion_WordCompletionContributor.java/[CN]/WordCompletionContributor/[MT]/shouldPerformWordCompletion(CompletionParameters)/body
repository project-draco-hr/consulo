{
  final PsiElement insertedElement=parameters.getPosition();
  final boolean dumb=DumbService.getInstance(insertedElement.getProject()).isDumb();
  if (dumb) {
    return true;
  }
  final PsiFile file=insertedElement.getContainingFile();
  final CompletionData data=CompletionUtil.getCompletionDataByElement(insertedElement,file);
  if (!(data instanceof SyntaxTableCompletionData)) {
    Set<CompletionVariant> toAdd=new HashSet<CompletionVariant>();
    data.addKeywordVariants(toAdd,insertedElement,file);
    for (    CompletionVariant completionVariant : toAdd) {
      if (completionVariant.hasKeywordCompletions()) {
        return false;
      }
    }
  }
  final int startOffset=parameters.getOffset();
  final PsiReference reference=ApplicationManager.getApplication().runReadAction(new Computable<PsiReference>(){
    public PsiReference compute(){
      return file.findReferenceAt(startOffset);
    }
  }
);
  if (reference != null) {
    return false;
  }
  final PsiElement element=ApplicationManager.getApplication().runReadAction(new Computable<PsiElement>(){
    public PsiElement compute(){
      return file.findElementAt(startOffset - 1);
    }
  }
);
  ASTNode textContainer=element != null ? element.getNode() : null;
  while (textContainer != null) {
    final IElementType elementType=textContainer.getElementType();
    if (LanguageWordCompletion.INSTANCE.isEnabledIn(elementType) || elementType == PlainTextTokenTypes.PLAIN_TEXT) {
      return true;
    }
    textContainer=textContainer.getTreeParent();
  }
  return false;
}
