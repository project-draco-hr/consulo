{
  column=table.convertColumnIndexToModel(column);
  Property property=(Property)value;
  Color background=table.getBackground();
  boolean isDefault=true;
  Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
  boolean tableHasFocus=focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner,table);
  try {
    isDefault=isDefault(property);
  }
 catch (  Exception e) {
    LOG.debug(e);
  }
  myRenderer.clear();
  if (column == 0) {
    myRenderer.getTableCellRendererComponent(table,value,selected,cellHasFocus,row,column);
    myRenderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background);
    SimpleTextAttributes attr=SimpleTextAttributes.REGULAR_ATTRIBUTES;
    if (!selected && !isDefault) {
      attr=attr.derive(-1,FileStatus.MODIFIED.getColor(),null,null);
    }
    if (property.isImportant()) {
      attr=attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD,null,null,null);
    }
    if (property.isExpert()) {
      attr=attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC,null,null,null);
    }
    if (property.isDeprecated()) {
      attr=attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT,null,null,null);
    }
    ErrorInfo errorInfo=getErrorInfoForRow(row);
    if (errorInfo != null) {
      SimpleTextAttributes template=SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())));
      int style=((template.getStyle() & SimpleTextAttributes.STYLE_WAVED) != 0 ? SimpleTextAttributes.STYLE_WAVED : 0) | ((template.getStyle() & SimpleTextAttributes.STYLE_UNDERLINE) != 0 ? SimpleTextAttributes.STYLE_UNDERLINE : 0);
      attr=attr.derive(attr.getStyle() | style,template.getFgColor(),template.getBgColor(),template.getWaveColor());
    }
    myRenderer.append(property.getName(),attr);
    Icon icon=UIUtil.getTreeNodeIcon(isExpanded(property),selected,tableHasFocus);
    boolean hasChildren=!getChildren(property).isEmpty();
    myRenderer.setIcon(hasChildren ? icon : null);
    int nodeIndent=UIUtil.getTreeLeftChildIndent() + UIUtil.getTreeRightChildIndent();
    int totalIndent=nodeIndent * getDepth(property);
    if (hasChildren) {
      int leftIconOffset=Math.max(0,UIUtil.getTreeLeftChildIndent() - (icon.getIconWidth() / 2));
      totalIndent+=leftIconOffset;
      myRenderer.setIconTextGap(Math.max(0,nodeIndent - leftIconOffset - icon.getIconWidth()));
    }
 else {
      totalIndent+=nodeIndent;
    }
    myRenderer.setIpad(new Insets(0,totalIndent,0,0));
    return myRenderer;
  }
 else {
    try {
      PropertyRenderer renderer=property.getRenderer();
      JComponent component=renderer.getComponent(getCurrentComponent(),getPropertyContext(),getValue(property),selected,tableHasFocus);
      component.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background);
      component.setFont(table.getFont());
      if (component instanceof JCheckBox) {
        component.putClientProperty("JComponent.sizeVariant",UIUtil.isUnderAquaLookAndFeel() ? "small" : null);
      }
      return component;
    }
 catch (    Exception e) {
      LOG.debug(e);
      myRenderer.getTableCellRendererComponent(table,value,selected,cellHasFocus,row,column);
      myRenderer.append(formatErrorGettingValueMesage(e.getMessage()),SimpleTextAttributes.ERROR_ATTRIBUTES);
      return myRenderer;
    }
  }
}
