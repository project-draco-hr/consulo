{
  PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
  CodeStyleManager styleManager=CodeStyleManager.getInstance(project);
  for (  PsiMethod baseConstructor : patternConstructors) {
    PsiMethod constructor=(PsiMethod)superclass.add(factory.createConstructor());
    PsiParameterList paramList=constructor.getParameterList();
    PsiParameter[] baseParams=baseConstructor.getParameterList().getParameters();
    @NonNls StringBuffer superCallText=new StringBuffer();
    superCallText.append("super(");
    for (int i=0; i < baseParams.length; i++) {
      PsiParameter baseParam=baseParams[i];
      paramList.add(baseParam);
      if (i > 0) {
        superCallText.append(",");
      }
      superCallText.append(baseParam.getName());
    }
    superCallText.append(");");
    PsiStatement statement=factory.createStatementFromText(superCallText.toString(),null);
    statement=(PsiStatement)styleManager.reformat(statement);
    constructor.getBody().add(statement);
    PsiReferenceList baseThrowsList=baseConstructor.getThrowsList();
    if (baseThrowsList != null) {
      final PsiJavaCodeReferenceElement[] thrown=baseThrowsList.getReferenceElements();
      for (      PsiJavaCodeReferenceElement ref : thrown) {
        constructor.getThrowsList().add(ref);
      }
    }
  }
}
