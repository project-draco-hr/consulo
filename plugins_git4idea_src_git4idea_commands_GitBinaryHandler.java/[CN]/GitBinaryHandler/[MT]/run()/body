{
  addListener(new GitHandlerListener(){
    @Override public void processTerminated(    int exitCode){
      if (exitCode != 0 && !isIgnoredErrorCode(exitCode)) {
        Charset cs=getCharset();
        cs=cs == null ? GitUtil.UTF8_CHARSET : cs;
        String message=new String(myStderr.toByteArray(),cs);
        if (message.length() == 0) {
          if (myException.get() != null) {
            message="Process finished with exit code " + exitCode;
          }
 else {
            message=null;
          }
        }
 else {
          if (!isStderrSuppressed()) {
            GitVcs.getInstance(myProject).showErrorMessages(message);
          }
        }
        if (message != null) {
          VcsException e=myException.getAndSet(new VcsException(message));
          if (e != null) {
            LOG.warn("Dropping previous exception: ",e);
          }
        }
      }
    }
    @Override public void startFailed(    Throwable exception){
      VcsException e=myException.getAndSet(new VcsException("Start failed: " + exception.getMessage(),exception));
      if (e != null) {
        LOG.warn("Dropping previous exception: ",e);
      }
    }
  }
);
  GitHandlerUtil.runInCurrentThread(this,null);
  if (myException.get() != null) {
    throw myException.get();
  }
  return myStdout.toByteArray();
}
