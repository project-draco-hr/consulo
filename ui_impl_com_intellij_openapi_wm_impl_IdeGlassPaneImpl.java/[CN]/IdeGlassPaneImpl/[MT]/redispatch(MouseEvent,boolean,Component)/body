{
  Container actualContainer=getParentOf(target);
  Component actualTarget=target;
  if (isEndComponent(actualTarget))   return false;
  MouseEvent targetEvent=convertEvent(originalEvent,actualTarget);
  for (  EventListener eachListener : myMouseListeners) {
    if (isMotion && eachListener instanceof MouseMotionListener) {
      fireMouseMotion((MouseMotionListener)eachListener,targetEvent);
    }
 else     if (!isMotion && eachListener instanceof MouseListener) {
      fireMouseEvent((MouseListener)eachListener,targetEvent);
    }
  }
  if (targetEvent.isConsumed()) {
    return true;
  }
  Set<Component> processed=new HashSet<Component>();
  while (true) {
    if (actualTarget == null || actualContainer == null)     break;
    targetEvent=convertEvent(originalEvent,actualTarget);
    dispatchEvent(actualTarget,targetEvent);
    processed.add(actualTarget);
    if (targetEvent.isConsumed()) {
      return true;
    }
    boolean shouldProceed=isMotion ? actualTarget.getMouseMotionListeners().length == 0 : actualTarget.getMouseListeners().length == 0;
    if (shouldProceed) {
      Component sibling=null;
      Point containerPoint=SwingUtilities.convertPoint(originalEvent.getComponent(),originalEvent.getPoint(),actualContainer);
      for (int i=0; i < actualContainer.getComponentCount(); i++) {
        final Component eachCandidate=actualContainer.getComponent(i);
        if (processed.contains(eachCandidate))         continue;
        if (eachCandidate.getBounds().contains(containerPoint)) {
          sibling=eachCandidate;
          break;
        }
      }
      if (sibling != null) {
        actualTarget=sibling;
      }
 else {
        actualTarget=getParentOf(actualTarget);
        actualContainer=getParentOf(actualTarget);
      }
    }
 else {
      break;
    }
    if (isEndComponent(actualTarget))     return false;
  }
  return false;
}
