{
  myProject=project;
  myPushers=Extensions.getExtensions(FilePropertyPusher.EP_NAME);
  myFilePushers=ContainerUtil.findAllAsArray(myPushers,new Condition<FilePropertyPusher>(){
    @Override public boolean value(    FilePropertyPusher pusher){
      return !pusher.pushDirectoriesOnly();
    }
  }
);
  myConnection=project.getMessageBus().connect();
  StartupManager.getInstance(project).registerPreStartupActivity(new Runnable(){
    @Override public void run(){
      myConnection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
        @Override public void rootsChanged(        final ModuleRootEvent event){
          for (          FilePropertyPusher pusher : myPushers) {
            pusher.afterRootsChanged(project);
          }
        }
      }
);
      myConnection.subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
        @Override public void after(        @NotNull List<? extends VFileEvent> events){
          List<Runnable> delayedTasks=ContainerUtil.newArrayList();
          for (          VFileEvent event : events) {
            final VirtualFile file=event.getFile();
            if (file == null)             continue;
            final FilePropertyPusher[] pushers=file.isDirectory() ? myPushers : myFilePushers;
            if (pushers.length == 0)             continue;
            if (event instanceof VFileCreateEvent) {
              if (!event.isFromRefresh() || !file.isDirectory()) {
                doPushRecursively(file,pushers,ProjectRootManager.getInstance(myProject).getFileIndex());
              }
 else {
                ContainerUtil.addIfNotNull(delayedTasks,createRecursivePushTask(file,pushers));
              }
            }
 else             if (event instanceof VFileMoveEvent) {
              for (              FilePropertyPusher pusher : pushers) {
                file.putUserData(pusher.getFileDataKey(),null);
              }
              doPushRecursively(file,pushers,ProjectRootManager.getInstance(myProject).getFileIndex());
            }
          }
          if (!delayedTasks.isEmpty()) {
            queueTasks(delayedTasks);
          }
        }
      }
);
    }
  }
);
}
