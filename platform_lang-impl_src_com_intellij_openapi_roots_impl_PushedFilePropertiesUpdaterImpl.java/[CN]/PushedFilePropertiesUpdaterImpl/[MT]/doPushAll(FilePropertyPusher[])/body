{
  Module[] modules=ApplicationManager.getApplication().runReadAction(new Computable<Module[]>(){
    @Override public Module[] compute(){
      return ModuleManager.getInstance(myProject).getModules();
    }
  }
);
  List<Runnable> tasks=new ArrayList<Runnable>();
  for (  final Module module : modules) {
    Runnable iteration=ApplicationManager.getApplication().runReadAction(new Computable<Runnable>(){
      @Override public Runnable compute(){
        if (module.isDisposed())         return EmptyRunnable.INSTANCE;
        ProgressManager.checkCanceled();
        final Object[] moduleValues=new Object[pushers.length];
        for (int i=0; i < moduleValues.length; i++) {
          moduleValues[i]=pushers[i].getImmediateValue(module);
        }
        final ModuleFileIndex fileIndex=ModuleRootManager.getInstance(module).getFileIndex();
        return new Runnable(){
          @Override public void run(){
            fileIndex.iterateContent(new ContentIterator(){
              @Override public boolean processFile(              final VirtualFile fileOrDir){
                applyPushersToFile(fileOrDir,pushers,moduleValues);
                return true;
              }
            }
);
          }
        }
;
      }
    }
);
    tasks.add(iteration);
  }
  invokeConcurrentlyIfPossible(tasks);
}
