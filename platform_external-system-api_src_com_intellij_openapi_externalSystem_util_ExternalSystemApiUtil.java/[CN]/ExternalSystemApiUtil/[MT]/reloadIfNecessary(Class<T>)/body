{
  T instance=clazz.newInstance();
  List<URL> urls=ContainerUtilRt.newArrayList();
  instance.enhanceLocalProcessing(urls);
  if (urls.isEmpty()) {
    return instance;
  }
  final ClassLoader baseLoader=clazz.getClassLoader();
  Method method=baseLoader.getClass().getMethod("getUrls");
  if (method != null) {
    urls.addAll((Collection<? extends URL>)method.invoke(baseLoader));
  }
  UrlClassLoader loader=new UrlClassLoader(UrlClassLoader.build().urls(urls).parent(baseLoader.getParent())){
    @Override protected Class<?> loadClass(    String name,    boolean resolve) throws ClassNotFoundException {
      if (name.equals(clazz.getName())) {
        return super.loadClass(name,resolve);
      }
 else {
        try {
          return baseLoader.loadClass(name);
        }
 catch (        ClassNotFoundException e) {
          return super.loadClass(name,resolve);
        }
      }
    }
  }
;
  return (T)loader.loadClass(clazz.getName()).newInstance();
}
