{
  if (basePath.isEmpty()) {
    LOG.error("Invalid root, fs=" + fs);
    return null;
  }
  String rootUrl=normalizeRootUrl(basePath,fs);
  myRootsLock.readLock().lock();
  try {
    VirtualFileSystemEntry root=myRoots.get(rootUrl);
    if (root != null)     return root;
  }
  finally {
    myRootsLock.readLock().unlock();
  }
  VirtualFileSystemEntry newRoot;
  int rootId=FSRecords.findRootRecord(rootUrl);
  if (fs instanceof JarFileSystem) {
    String parentPath=basePath.substring(0,basePath.indexOf(ArchiveFileSystem.ARCHIVE_SEPARATOR));
    VirtualFile parentFile=LocalFileSystem.getInstance().findFileByPath(parentPath);
    if (parentFile == null || !isValidJar(parentPath))     return null;
    newRoot=new JarRoot(fs,rootId,parentFile);
  }
 else {
    newRoot=new FsRoot(fs,rootId,basePath);
  }
  FileAttributes attributes=fs.getAttributes(newRoot);
  if (attributes == null || !attributes.isDirectory()) {
    return null;
  }
  boolean mark=false;
  myRootsLock.writeLock().lock();
  try {
    VirtualFileSystemEntry root=myRoots.get(rootUrl);
    if (root != null)     return root;
    mark=writeAttributesToRecord(rootId,0,newRoot,fs,attributes);
    myRoots.put(rootUrl,newRoot);
    myRootsById.put(rootId,newRoot);
  }
  finally {
    myRootsLock.writeLock().unlock();
  }
  if (!mark && attributes.lastModified != FSRecords.getTimestamp(rootId)) {
    newRoot.markDirtyRecursively();
  }
  LOG.assertTrue(rootId == newRoot.getId(),"root=" + newRoot + " expected="+ rootId+ " actual="+ newRoot.getId());
  return newRoot;
}
