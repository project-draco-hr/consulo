{
  final NewVirtualFileSystem fs=replaceWithNativeFS(getDelegate(file));
  String[] delegateNames=VfsUtil.filterNames(fs.list(file));
  if (delegateNames.length == 0 && current.length > 0) {
    return current;
  }
  Set<String> toAdd=ContainerUtil.newHashSet(delegateNames);
  for (  FSRecords.NameId nameId : current) {
    toAdd.remove(nameId.name.toString());
  }
  final TIntArrayList childrenIds=new TIntArrayList(current.length + toAdd.size());
  final List<FSRecords.NameId> nameIds=ContainerUtil.newArrayListWithCapacity(current.length + toAdd.size());
  for (  FSRecords.NameId nameId : current) {
    childrenIds.add(nameId.id);
    nameIds.add(nameId);
  }
  for (  String newName : toAdd) {
    FakeVirtualFile child=new FakeVirtualFile(file,newName);
    FileAttributes attributes=fs.getAttributes(child);
    if (attributes != null) {
      int childId=createAndFillRecord(fs,child,id,attributes);
      childrenIds.add(childId);
      nameIds.add(new FSRecords.NameId(childId,FileNameCache.storeName(newName),newName));
    }
  }
  FSRecords.updateList(id,childrenIds.toNativeArray());
  setChildrenCached(id);
  return nameIds.toArray(new FSRecords.NameId[nameIds.size()]);
}
