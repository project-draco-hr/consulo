{
  final NewVirtualFileSystem fs=replaceWithNativeFS(getDelegate(file));
  String[] delegateNames=VfsUtil.filterNames(fs.list(file));
  if (delegateNames.length == 0 && current.length > 0) {
    return current;
  }
  THashMap<String,FSRecords.NameId> result=new THashMap<String,FSRecords.NameId>();
  if (current.length == 0) {
    for (    String name : delegateNames) {
      result.put(name,new FSRecords.NameId(-1,name));
    }
  }
 else {
    for (    FSRecords.NameId nameId : current) {
      result.put(nameId.name,nameId);
    }
    for (    String name : delegateNames) {
      if (!result.containsKey(name)) {
        result.put(name,new FSRecords.NameId(-1,name));
      }
    }
  }
  final TIntArrayList childrenIds=new TIntArrayList(result.size());
  final List<FSRecords.NameId> nameIds=ContainerUtil.newArrayListWithExpectedSize(result.size());
  result.forEachValue(new TObjectProcedure<FSRecords.NameId>(){
    @Override public boolean execute(    FSRecords.NameId nameId){
      if (nameId.id < 0) {
        FakeVirtualFile child=new FakeVirtualFile(file,nameId.name);
        FileAttributes attributes=fs.getAttributes(child);
        if (attributes != null) {
          int childId=createAndFillRecord(fs,child,id,attributes);
          nameId=new FSRecords.NameId(childId,nameId.name);
        }
      }
      if (nameId.id > 0) {
        childrenIds.add(nameId.id);
        nameIds.add(nameId);
      }
      return true;
    }
  }
);
  FSRecords.updateList(id,childrenIds.toNativeArray());
  setChildrenCached(id);
  return nameIds.toArray(new FSRecords.NameId[nameIds.size()]);
}
