{
  final TextRange hostRange=myHost.getTextRange();
  PsiFile hostPsiFile=myHost.getContainingFile();
  final VirtualFile hostVirtualFile=hostPsiFile.getVirtualFile();
  final DocumentEx hostDocument=(DocumentEx)PsiDocumentManager.getInstance(myHost.getProject()).getDocument(hostPsiFile);
  final PsiManagerImpl psiManager=(PsiManagerImpl)myHost.getManager();
  final List<Pair<PsiElement,TextRange>> result=new SmartList<Pair<PsiElement,TextRange>>();
  InjectedLanguagePlaces placesRegistrar=new InjectedLanguagePlaces(){
    public void addPlace(    @NotNull Language language,    @NotNull TextRange rangeInsideHost){
      final TextRange documentWindow=hostRange.cutOut(rangeInsideHost);
      DocumentRange documentRange=new DocumentRange(hostDocument,documentWindow);
      String newText=documentRange.getText();
      final VirtualFile virtualFile=new VirtualFileDelegate(hostVirtualFile,documentWindow,language,newText);
      FileDocumentManagerImpl.registerDocument(documentRange,virtualFile);
      PsiElement psi=parseInjectedPsiFile(myHost,rangeInsideHost,psiManager,language,virtualFile,myTextEscaper);
      if (psi != null) {
        psi.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,myHost);
      }
      result.add(new Pair<PsiElement,TextRange>(psi,rangeInsideHost));
    }
  }
;
  for (  LanguageInjector injector : psiManager.getLanguageInjectors()) {
    injector.getLanguagesToInject(myHost,placesRegistrar);
  }
  return Result.createSingleDependency(result,myHost);
}
