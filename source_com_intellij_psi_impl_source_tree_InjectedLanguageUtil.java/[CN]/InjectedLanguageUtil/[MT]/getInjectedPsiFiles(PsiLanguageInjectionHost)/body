{
  CachedValue<List<Pair<PsiElement,TextRange>>> cachedPsi=host.getUserData(INJECTED_PSI);
  if (cachedPsi == null) {
    CachedValueProvider<List<Pair<PsiElement,TextRange>>> provider=new CachedValueProvider<List<Pair<PsiElement,TextRange>>>(){
      public Result<List<Pair<PsiElement,TextRange>>> compute(){
        TextRange hostRange=host.getTextRange();
        final VirtualFile hostVirtualFile=host.getContainingFile().getVirtualFile();
        final DocumentEx document=(DocumentEx)PsiDocumentManager.getInstance(host.getProject()).getDocument(host.getContainingFile());
        List<Pair<Language,TextRange>> injectedLanguages=host.getManager().getInjectedLanguages(host);
        List<Pair<PsiElement,TextRange>> result=null;
        if (injectedLanguages != null) {
          result=new SmartList<Pair<PsiElement,TextRange>>();
          for (          Pair<Language,TextRange> pair : injectedLanguages) {
            TextRange range=pair.getSecond();
            final TextRange documentWindow=hostRange.cutOut(range);
            DocumentRange documentRange=new DocumentRange(document,documentWindow);
            Language language=pair.getFirst();
            String newText=documentRange.getText();
            final VirtualFile virtualFile=new VirtualFileDelegate(hostVirtualFile,documentWindow,language,newText);
            FileDocumentManagerImpl.registerDocument(documentRange,virtualFile);
            PsiElement psi=parseInjectedPsiFile(newText,host.getManager(),language,virtualFile);
            if (psi != null) {
              psi.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,host);
            }
            result.add(new Pair<PsiElement,TextRange>(psi,range));
          }
        }
        return Result.createSingleDependency(result,host);
      }
    }
;
    cachedPsi=host.getManager().getCachedValuesManager().createCachedValue(provider,false);
    host.putUserData(INJECTED_PSI,cachedPsi);
  }
  return cachedPsi.getValue();
}
