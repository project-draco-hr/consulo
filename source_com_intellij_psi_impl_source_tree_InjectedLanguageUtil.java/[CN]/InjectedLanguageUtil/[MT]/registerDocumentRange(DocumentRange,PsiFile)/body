{
  DocumentEx document=documentRange.getDelegate();
  Map<RangeMarker,PsiFile> injected=document.getUserData(INJECTED_DOCUMENTS_KEY);
  if (injected == null) {
    injected=new THashMap<RangeMarker,PsiFile>(new TObjectHashingStrategy<RangeMarker>(){
      public int computeHashCode(      final RangeMarker object){
        return object.getStartOffset();
      }
      public boolean equals(      final RangeMarker o1,      final RangeMarker o2){
        return o1.getStartOffset() == o2.getStartOffset() && o1.getEndOffset() == o2.getEndOffset();
      }
    }
);
    document.putUserData(INJECTED_DOCUMENTS_KEY,injected);
  }
  RangeMarker marker=documentRange.getTextRange();
  final PsiFileImpl oldFile=(PsiFileImpl)injected.get(marker);
  if (oldFile == null) {
    injected.put(marker,injectedPsi);
    return injectedPsi;
  }
  FileElement newFileElement=(FileElement)injectedPsi.getNode().copyElement();
  FileElement oldFileElement=oldFile.getTreeElement();
  if (!newFileElement.getText().equals(oldFileElement.getText())) {
    if (oldFileElement.getFirstChildNode() != null) {
      TreeUtil.removeRange(oldFileElement.getFirstChildNode(),null);
    }
    final ASTNode firstChildNode=newFileElement.getFirstChildNode();
    if (firstChildNode != null) {
      TreeUtil.addChildren(oldFileElement,(TreeElement)firstChildNode);
    }
    oldFileElement.setCharTable(newFileElement.getCharTable());
    oldFile.subtreeChanged();
    PsiDocumentManagerImpl.checkConsistency(oldFile,documentRange);
  }
  return oldFile;
}
