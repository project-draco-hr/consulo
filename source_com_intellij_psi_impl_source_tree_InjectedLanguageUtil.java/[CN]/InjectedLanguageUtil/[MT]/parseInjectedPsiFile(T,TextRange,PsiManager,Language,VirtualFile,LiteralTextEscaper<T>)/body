{
  final Project project=psiManager.getProject();
  final ParserDefinition parserDefinition=language.getParserDefinition();
  if (parserDefinition == null)   return null;
  final PsiParser parser=parserDefinition.createParser(project);
  final IElementType root=parserDefinition.getFileNodeType();
  final String text=host.getText();
  StringBuilder outChars=new StringBuilder(text.length());
  if (textEscaper == null) {
    outChars.append(text,rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset());
  }
 else {
    boolean result=textEscaper.decode(host,rangeInsideHost,outChars);
    if (!result)     return null;
  }
  final PsiBuilderImpl builder=new PsiBuilderImpl(language,project,null,outChars);
  final ASTNode parsedNode=parser.parse(root,builder);
  if (!(parsedNode instanceof FileElement))   return null;
  if (textEscaper != null) {
    patchLeafs(parsedNode,host,rangeInsideHost,textEscaper);
  }
  parsedNode.putUserData(TreeElement.MANAGER_KEY,psiManager);
  SingleRootFileViewProvider viewProvider=new SingleRootFileViewProvider(psiManager,virtualFile){
    public FileViewProvider clone(){
      FileViewProvider providerClone=super.clone();
      FileDocumentManagerImpl.registerDocument(providerClone.getDocument(),providerClone.getVirtualFile());
      return providerClone;
    }
  }
;
  PsiFile psiFile=parserDefinition.createFile(viewProvider);
  SrcRepositoryPsiElement repositoryPsiElement=(SrcRepositoryPsiElement)psiFile;
  ((FileElement)parsedNode).setPsiElement(repositoryPsiElement);
  repositoryPsiElement.setTreeElement(parsedNode);
  viewProvider.forceCachedPsi(psiFile);
  return parsedNode.getPsi();
}
