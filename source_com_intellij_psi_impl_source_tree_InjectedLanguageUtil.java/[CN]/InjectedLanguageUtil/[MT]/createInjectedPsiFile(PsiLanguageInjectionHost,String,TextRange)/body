{
  final Language language=host.getManager().getInjectedLanguage(host);
  if (language == null)   return null;
  final Project project=host.getProject();
  final ParserDefinition parserDefinition=language.getParserDefinition();
  if (parserDefinition == null)   return null;
  final PsiParser parser=parserDefinition.createParser(project);
  final IElementType root=parserDefinition.getFileNodeType();
  final PsiBuilderImpl builder=new PsiBuilderImpl(language,project,null,text);
  final ASTNode parsedNode=parser.parse(root,builder);
  if (parsedNode instanceof FileElement) {
    parsedNode.putUserData(TreeElement.MANAGER_KEY,host.getManager());
    TextRange documentWindow=host.getTextRange().cutOut(range);
    DocumentEx document=(DocumentEx)PsiDocumentManager.getInstance(project).getDocument(host.getContainingFile());
    DocumentRange documentRange=new DocumentRange(document,documentWindow);
    final VirtualFile virtualFile=new VirtualFileDelegate(host.getContainingFile().getVirtualFile(),documentWindow,language,text);
    PsiFile psiFile=parserDefinition.createFile(new SingleRootFileViewProvider(host.getManager(),virtualFile));
    psiFile.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,host);
    FileDocumentManagerImpl.registerDocument(documentRange,virtualFile);
    SrcRepositoryPsiElement repositoryPsiElement=(SrcRepositoryPsiElement)psiFile;
    ((FileElement)parsedNode).setPsiElement(repositoryPsiElement);
    repositoryPsiElement.setTreeElement(parsedNode);
  }
  return Pair.create(parsedNode.getPsi(),range);
}
