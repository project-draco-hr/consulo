{
  final CommonActionsManager actionManager=CommonActionsManager.getInstance();
  TreeExpander treeExpander=new TreeExpander(){
    public void expandAll(){
      TreeUtil.expandAll(myTree);
    }
    public boolean canExpand(){
      return true;
    }
    public void collapseAll(){
      TreeUtil.collapseAll(myTree,3);
    }
    public boolean canCollapse(){
      return true;
    }
  }
;
  final AnAction expandAllAction=actionManager.createExpandAllAction(treeExpander,myTree);
  final AnAction collapseAllAction=actionManager.createCollapseAllAction(treeExpander,myTree);
  final SelectAllAction selectAllAction=new SelectAllAction(true);
  final SelectAllAction unSelectAllAction=new SelectAllAction(false);
  expandAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_EXPAND_ALL)),myTree);
  collapseAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_COLLAPSE_ALL)),myTree);
  selectAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_A,SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK)),myTree);
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(expandAllAction);
  actions.add(collapseAllAction);
  actions.add(selectAllAction);
  actions.add(unSelectAllAction);
  return ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actions,false);
}
