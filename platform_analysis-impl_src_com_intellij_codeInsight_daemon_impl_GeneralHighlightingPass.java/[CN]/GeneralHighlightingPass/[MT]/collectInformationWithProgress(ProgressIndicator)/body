{
  final List<HighlightInfo> outsideResult=new ArrayList<HighlightInfo>(100);
  final List<HighlightInfo> insideResult=new ArrayList<HighlightInfo>(100);
  final DaemonCodeAnalyzerEx daemonCodeAnalyzer=DaemonCodeAnalyzerEx.getInstanceEx(myProject);
  final HighlightVisitor[] filteredVisitors=getHighlightVisitors(getFile());
  final List<PsiElement> insideElements=new ArrayList<PsiElement>();
  final List<PsiElement> outsideElements=new ArrayList<PsiElement>();
  try {
    List<ProperTextRange> insideRanges=new ArrayList<ProperTextRange>();
    List<ProperTextRange> outsideRanges=new ArrayList<ProperTextRange>();
    Divider.divideInsideAndOutside(getFile(),myRestrictRange.getStartOffset(),myRestrictRange.getEndOffset(),myPriorityRange,insideElements,insideRanges,outsideElements,outsideRanges,false,SHOULD_HIGHIGHT_FILTER);
    if (!insideElements.isEmpty() && insideElements.get(insideElements.size() - 1) instanceof PsiFile) {
      PsiElement file=insideElements.remove(insideElements.size() - 1);
      outsideElements.add(file);
      ProperTextRange range=insideRanges.remove(insideRanges.size() - 1);
      outsideRanges.add(range);
    }
    setProgressLimit((long)(insideElements.size() + outsideElements.size()));
    final boolean forceHighlightParents=forceHighlightParents();
    if (!isDumbMode()) {
      highlightTodos(getFile(),getDocument().getCharsSequence(),myRestrictRange.getStartOffset(),myRestrictRange.getEndOffset(),progress,myPriorityRange,insideResult,outsideResult);
    }
    boolean success=collectHighlights(insideElements,insideRanges,outsideElements,outsideRanges,progress,filteredVisitors,insideResult,outsideResult,forceHighlightParents);
    if (success) {
      myHighlightInfoProcessor.highlightsOutsideVisiblePartAreProduced(myHighlightingSession,outsideResult,myPriorityRange,myRestrictRange,getId());
      if (myUpdateAll) {
        daemonCodeAnalyzer.getFileStatusMap().setErrorFoundFlag(myProject,getDocument(),myErrorFound);
      }
    }
 else {
      cancelAndRestartDaemonLater(progress,myProject);
    }
  }
  finally {
    incVisitorUsageCount(-1);
    myHighlights.addAll(insideResult);
    myHighlights.addAll(outsideResult);
  }
}
