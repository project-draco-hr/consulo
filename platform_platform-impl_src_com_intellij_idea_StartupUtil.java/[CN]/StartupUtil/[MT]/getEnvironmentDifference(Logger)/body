{
  try {
    String shell=System.getenv("SHELL");
    if (shell != null && new File(shell).canExecute()) {
      String[] command={shell,"-l","-c","/usr/bin/printenv"};
      Process process=Runtime.getRuntime().exec(command);
      InputStream input=process.getInputStream();
      List<String> lines=new ArrayList<String>();
      ByteArrayOutputStream lineBuf=new ByteArrayOutputStream();
      int b;
      while ((b=input.read()) >= 0) {
        if (b != '\n') {
          lineBuf.write(b);
        }
 else {
          String line=new String(lineBuf.toByteArray());
          lines.add(line);
          lineBuf=new ByteArrayOutputStream();
        }
      }
      input.close();
      int rv;
      try {
        rv=process.exitValue();
      }
 catch (      IllegalThreadStateException e) {
        process.destroy();
        rv=-1;
      }
      if (rv != 0 || lines.isEmpty()) {
        throw new Exception("rv:" + rv + " lines:"+ lines.size());
      }
      Map<String,String> env=System.getenv();
      Map<String,String> envDiff=new HashMap<String,String>();
      Set<String> varsToIgnore=new HashSet<String>(Arrays.asList("_","PWD","SHLVL"));
      for (      String line : lines) {
        int pos=line.indexOf('=');
        if (pos > 0) {
          String name=line.substring(0,pos);
          if (!varsToIgnore.contains(name)) {
            String value=line.substring(pos + 1);
            if (!env.containsKey(name) || !value.equals(env.get(name))) {
              envDiff.put(name,value);
            }
          }
        }
      }
      return envDiff;
    }
  }
 catch (  Throwable t) {
    log.warn("can't get shell environment",t);
  }
  return Collections.emptyMap();
}
