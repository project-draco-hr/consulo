{
  if (!SystemInfo.isUnix || SystemInfo.isMac)   return true;
  final File tmpDir=new File(System.getProperty("java.io.tmpdir"));
  if (!tmpDir.isDirectory()) {
    showError("Inaccessible Temp Directory","Temp directory '" + tmpDir + "' does not exist.\n"+ "Please set 'java.io.tmpdir' system property to point to an existing directory.");
    return false;
  }
  final File tmp;
  try {
    tmp=File.createTempFile("idea_tmp_check_",".sh",tmpDir);
    FileUtil.writeToFile(tmp,"#!/bin/sh\n" + "exit 0");
  }
 catch (  IOException e) {
    showError("Inaccessible Temp Directory",e.getMessage() + " (" + tmpDir+ ").\n"+ "Temp directory is not accessible.\n"+ "Please set 'java.io.tmpdir' system property to point to a writable directory.");
    return false;
  }
  String message=null;
  try {
    if (!tmp.setExecutable(true,true) && !tmp.canExecute()) {
      message="Cannot make '" + tmp.getAbsolutePath() + "' executable.";
    }
 else {
      final int rv=new ProcessBuilder(tmp.getAbsolutePath()).start().waitFor();
      if (rv != 0) {
        message="Cannot execute '" + tmp.getAbsolutePath() + "': "+ rv;
      }
    }
  }
 catch (  Exception e) {
    message=e.getMessage();
  }
  if (!tmp.delete()) {
    tmp.deleteOnExit();
  }
  if (message != null) {
    showError("Inaccessible Temp Directory",message + ".\nPossible reason: temp directory is mounted with a 'noexec' option.\n" + "Please set 'java.io.tmpdir' system property to point to an accessible directory.");
    return false;
  }
  return true;
}
