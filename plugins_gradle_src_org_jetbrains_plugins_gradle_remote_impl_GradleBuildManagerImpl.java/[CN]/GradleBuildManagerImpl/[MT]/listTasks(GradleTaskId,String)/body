{
  Function<ProjectConnection,Collection<GradleTaskDescriptor>> f=new Function<ProjectConnection,Collection<GradleTaskDescriptor>>(){
    @Nullable @Override public Collection<GradleTaskDescriptor> fun(    ProjectConnection connection){
      ModelBuilder<? extends IdeaProject> modelBuilder=myHelper.getModelBuilder(id,connection,false);
      IdeaProject project=modelBuilder.get();
      DomainObjectSet<? extends IdeaModule> modules=project.getModules();
      if (modules == null) {
        return Collections.emptyList();
      }
      Set<GradleTaskDescriptor> result=new HashSet<GradleTaskDescriptor>();
      for (      IdeaModule module : modules) {
        for (        GradleTask task : module.getGradleProject().getTasks()) {
          String name=task.getName();
          if (name == null || name.trim().isEmpty()) {
            continue;
          }
          String s=name.toLowerCase();
          if (s.contains("idea") || s.contains("eclipse")) {
            continue;
          }
          result.add(new GradleTaskDescriptor(name,task.getDescription()));
        }
      }
      return result;
    }
  }
;
  return myHelper.execute(id,GradleTaskType.REFRESH_TASKS_LIST,projectPath,f);
}
