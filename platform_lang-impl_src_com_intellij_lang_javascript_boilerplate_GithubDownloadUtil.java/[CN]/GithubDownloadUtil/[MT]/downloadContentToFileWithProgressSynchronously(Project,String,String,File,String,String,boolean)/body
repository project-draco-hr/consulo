{
  Outcome<File> outcome=DownloadUtil.provideDataWithProgressSynchronously(project,progressTitle,"Downloading zip archive" + DownloadUtil.CONTENT_LENGTH_TEMPLATE + " ...",new Callable<File>(){
    @Override public File call() throws Exception {
      ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      downloadAtomically(progress,url,outputFile,userName,repositoryName);
      return outputFile;
    }
  }
,new Producer<Boolean>(){
    @Override public Boolean produce(){
      if (!retryOnError) {
        return false;
      }
      return IOExceptionDialog.showErrorDialog("Download Error","Can not download '" + url + "'");
    }
  }
);
  File out=outcome.get();
  if (out != null) {
    return;
  }
  Exception e=outcome.getException();
  if (e != null) {
    throw new GeneratorException("Can not fetch content from " + url);
  }
  throw new GeneratorException("Download was cancelled");
}
