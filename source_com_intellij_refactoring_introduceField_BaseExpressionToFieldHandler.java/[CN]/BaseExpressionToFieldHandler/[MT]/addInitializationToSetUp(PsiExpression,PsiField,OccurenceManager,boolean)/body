{
  final PsiManager manager=myParentClass.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  final PsiMethod patternMethod=factory.createMethodFromText("protected void setUp() throws Exception {\nsuper.setUp();\n}",null);
  PsiMethod inClass=field.getContainingClass().findMethodBySignature(patternMethod,false);
  PsiElement anchor=null;
  if (inClass == null) {
    inClass=(PsiMethod)field.getContainingClass().add(patternMethod);
  }
 else   if (inClass.getBody() == null) {
    inClass.replace(patternMethod);
  }
 else {
    if (PsiTreeUtil.isAncestor(inClass,initializer,true)) {
      anchor=replaceAll ? occurenceManager.getAnchorStatementForAllInScope(inClass) : PsiTreeUtil.getParentOfType(initializer,PsiStatement.class);
    }
  }
  final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)factory.createStatementFromText(field.getName() + "= expr;",null);
  PsiAssignmentExpression expr=(PsiAssignmentExpression)expressionStatement.getExpression();
  final PsiExpression rExpression=expr.getRExpression();
  LOG.assertTrue(rExpression != null);
  rExpression.replace(initializer);
  inClass.getBody().addBefore(expressionStatement,anchor);
  manager.getCodeStyleManager().reformat(inClass.getBody());
}
