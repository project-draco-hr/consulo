{
  boolean result=false;
  if (ParserUtils.lookAhead(builder,kTHIS,mLPAREN)) {
    final PsiBuilder.Marker marker=builder.mark();
    ParserUtils.getToken(builder,kTHIS);
    marker.done(REFERENCE_EXPRESSION);
    result=true;
  }
  if (ParserUtils.lookAhead(builder,kSUPER,mLPAREN)) {
    final PsiBuilder.Marker marker=builder.mark();
    ParserUtils.getToken(builder,kSUPER);
    marker.done(REFERENCE_EXPRESSION);
    result=true;
  }
  if (result) {
    PsiBuilder.Marker marker=builder.mark();
    ParserUtils.getToken(builder,mLPAREN);
    ArgumentList.parseArgumentList(builder,mRPAREN,parser);
    ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"));
    marker.done(ARGUMENTS);
    return true;
  }
  return false;
}
