{
  super(new BorderLayout(0,0));
  this.project=project;
  setFocusable(true);
  addKeyListener(this);
  setBorder(new EmptyBorder(0,0,0,0));
  setBackground(Color.WHITE);
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  final Font font=pathLabel.getFont();
  pathLabel.setFont(font.deriveFont((float)10));
  descriptions=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  descriptions.setBorder(BorderFactory.createEmptyBorder(1,4,1,4));
  descriptions.add(pathLabel);
  twManager=ToolWindowManager.getInstance(project);
  final DefaultListModel twModel=new DefaultListModel();
  for (  String id : twManager.getToolWindowIds()) {
    final ToolWindow tw=twManager.getToolWindow(id);
    if (tw.isAvailable()) {
      ids.put(tw,id);
      twModel.addElement(tw);
    }
  }
  toolwindows=new JList(twModel);
  toolwindows.setBorder(IdeBorderFactory.createEmptyBorder(5,5,5,20));
  toolwindows.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  toolwindows.setCellRenderer(new ToolWindowsRenderer(ids));
  toolwindows.addKeyListener(this);
  toolwindows.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!toolwindows.getSelectionModel().isSelectionEmpty()) {
        files.getSelectionModel().clearSelection();
      }
    }
  }
);
  final JPanel separator=new JPanel(){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(SEPARATOR_COLOR);
      g.drawLine(0,0,0,getHeight());
    }
  }
;
  separator.setBackground(Color.WHITE);
  final FileEditorManager editorManager=FileEditorManager.getInstance(project);
  final VirtualFile[] openFiles=editorManager.getOpenFiles();
  try {
    Arrays.sort(openFiles,new RecentFilesComparator(project));
  }
 catch (  Exception e) {
  }
  final DefaultListModel filesModel=new DefaultListModel();
  for (  VirtualFile openFile : openFiles) {
    filesModel.addElement(openFile);
  }
  files=new JList(filesModel);
  files.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  files.setBorder(IdeBorderFactory.createEmptyBorder(5,5,5,20));
  files.setCellRenderer(new VirtualFilesRenderer(project));
  files.addKeyListener(this);
  files.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!files.getSelectionModel().isSelectionEmpty()) {
        toolwindows.getSelectionModel().clearSelection();
      }
    }
  }
);
  this.add(toolwindows,BorderLayout.WEST);
  if (filesModel.size() > 0) {
    this.add(files,BorderLayout.EAST);
  }
  this.add(descriptions,BorderLayout.SOUTH);
  this.add(separator,BorderLayout.CENTER);
  files.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    private String getTitle2Text(    String fullText){
      int labelWidth=pathLabel.getWidth();
      if (fullText == null || fullText.length() == 0)       return " ";
      while (pathLabel.getFontMetrics(pathLabel.getFont()).stringWidth(fullText) > labelWidth) {
        int sep=fullText.indexOf(File.separatorChar,4);
        if (sep < 0)         return fullText;
        fullText="..." + fullText.substring(sep);
      }
      return fullText;
    }
    public void valueChanged(    final ListSelectionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updatePathLabel();
        }
      }
);
    }
    private void updatePathLabel(){
      final Object[] values=files.getSelectedValues();
      if (values != null && values.length == 1) {
        final VirtualFile parent=((VirtualFile)values[0]).getParent();
        if (parent != null) {
          pathLabel.setText(getTitle2Text(parent.getPresentableUrl()));
        }
 else {
          pathLabel.setText(" ");
        }
      }
 else {
        pathLabel.setText(" ");
      }
    }
  }
);
  final IdeFrameImpl ideFrame=WindowManagerEx.getInstanceEx().getFrame(project);
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(this,this).setResizable(false).setModalContext(false).setFocusable(true).setRequestFocus(true).setMovable(true).setTitle("Switcher").setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      SWITCHER=null;
      return true;
    }
  }
).createPopup();
  myPopup.showInCenterOf(ideFrame.getContentPane());
}
