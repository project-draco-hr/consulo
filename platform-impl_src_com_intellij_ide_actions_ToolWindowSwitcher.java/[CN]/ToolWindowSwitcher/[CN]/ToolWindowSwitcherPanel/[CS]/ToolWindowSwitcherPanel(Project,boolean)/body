{
  this.project=project;
  setFocusable(true);
  addKeyListener(this);
  setBorder(new EmptyBorder(0,0,0,0));
  setBackground(Color.WHITE);
  final BorderLayout layout=new BorderLayout(0,0);
  setLayout(layout);
  twManager=ToolWindowManager.getInstance(project);
  ArrayList<String> visible=new ArrayList<String>();
  for (  String id : twManager.getToolWindowIds()) {
    final ToolWindow tw=twManager.getToolWindow(id);
    if (tw.isAvailable()) {
      visible.add(id);
    }
  }
  ids=visible.toArray(new String[visible.size()]);
  currentIndex=fromFirst ? 0 : ids.length - 1;
  toolwindows=new JLabel[ids.length];
  final FileEditorManager editorManager=FileEditorManager.getInstance(project);
  final VirtualFile[] openFiles=editorManager.getOpenFiles();
  final VirtualFile[] selectedFiles=editorManager.getSelectedFiles();
  final VirtualFile selectedFile=selectedFiles.length > 0 ? selectedFiles[0] : null;
  files=new JLabel[openFiles.length];
  final JPanel tabs=openFiles.length > 0 ? createItemsPanel("Open Files:",new Insets(0,0,0,4)) : new JPanel();
  vfiles=openFiles;
  for (int i=0; i < openFiles.length; i++) {
    if (openFiles[i] == selectedFile) {
      currentIndex=i;
    }
    files[i]=createItem(openFiles[i].getName(),IconUtil.getIcon(openFiles[i],Iconable.ICON_FLAG_READ_STATUS,project));
    tabs.add(files[i]);
  }
  final JPanel toolwindows=createItemsPanel("Tool Windows:",new Insets(0,4,0,10));
  for (int i=0; i < ids.length; i++) {
    this.toolwindows[i]=createItem(ids[i],getIcon(ids[i]));
    toolwindows.add(this.toolwindows[i]);
  }
  JPanel titlePanel=new JPanel();
  title=new JLabel("",SwingConstants.CENTER);
  title.setFont(new Font(title.getFont().getName(),Font.BOLD,12));
  titlePanel.setOpaque(true);
  titlePanel.setBorder(BorderFactory.createMatteBorder(0,0,1,0,Color.BLACK));
  titlePanel.add(title);
  this.add(titlePanel,BorderLayout.NORTH);
  this.add(toolwindows,BorderLayout.WEST);
  if (files.length > 0) {
    this.add(tabs,BorderLayout.EAST);
  }
  activePanel=files.length > 1 ? ActivePanel.FILES : ActivePanel.TOOL_WINDOWS;
  final IdeFrameImpl ideFrame=WindowManagerEx.getInstanceEx().getFrame(project);
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(this,this).setResizable(false).setModalContext(false).setFocusable(true).setRequestFocus(true).setMovable(false).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      SWITCHER=null;
      return true;
    }
  }
).createPopup();
  updateUI();
  update();
  myPopup.showInCenterOf(ideFrame.getContentPane());
}
