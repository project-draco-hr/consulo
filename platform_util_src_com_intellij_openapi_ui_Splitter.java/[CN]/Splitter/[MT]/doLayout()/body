{
  final double width=getWidth();
  final double height=getHeight();
  if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent)&& mySecondComponent.isVisible()) {
    Rectangle firstRect=new Rectangle();
    Rectangle dividerRect=new Rectangle();
    Rectangle secondRect=new Rectangle();
    final double componentSize=getOrientation() ? height : width;
    double dividerWidth=getDividerWidth();
    double firstCompontSize;
    double secondComponentSize;
    if (componentSize <= dividerWidth) {
      firstCompontSize=0;
      secondComponentSize=0;
      dividerWidth=componentSize;
    }
 else {
      firstCompontSize=myProportion * (float)(componentSize - dividerWidth);
      secondComponentSize=getOrientation() ? height - firstCompontSize - dividerWidth : width - firstCompontSize - dividerWidth;
      if (isHonorMinimumSize()) {
        double minWidth=75;
        double minHeight=45;
        final double firstMinSize=getOrientation() ? minHeight : minWidth;
        final double secondMinSize=getOrientation() ? minHeight : minWidth;
        if (firstCompontSize + secondComponentSize <= firstMinSize + secondMinSize) {
          double propotion=firstMinSize / (firstMinSize + secondMinSize);
          firstCompontSize=(int)(propotion * (float)(componentSize - dividerWidth));
          secondComponentSize=getOrientation() ? height - firstCompontSize - dividerWidth : width - firstCompontSize - dividerWidth;
        }
 else {
          if (firstCompontSize < firstMinSize) {
            if (secondComponentSize - (firstMinSize - firstCompontSize) > secondMinSize) {
              secondComponentSize=secondComponentSize - (firstMinSize - firstCompontSize);
            }
            firstCompontSize=firstMinSize;
          }
 else           if (secondComponentSize < secondMinSize) {
            firstCompontSize=firstCompontSize - (secondMinSize - secondComponentSize);
            secondComponentSize=secondMinSize;
          }
        }
      }
    }
    if (getOrientation()) {
      firstRect.setBounds(0,0,(int)width,(int)firstCompontSize);
      dividerRect.setBounds(0,(int)firstCompontSize,(int)width,(int)dividerWidth);
      secondRect.setBounds(0,(int)(firstCompontSize + dividerWidth),(int)width,(int)secondComponentSize);
    }
 else {
      firstRect.setBounds(0,0,(int)firstCompontSize,(int)height);
      dividerRect.setBounds((int)firstCompontSize,0,(int)dividerWidth,(int)height);
      secondRect.setBounds((int)(firstCompontSize + dividerWidth),0,(int)secondComponentSize,(int)height);
    }
    myDivider.setVisible(true);
    myFirstComponent.setBounds(firstRect);
    myDivider.setBounds(dividerRect);
    mySecondComponent.setBounds(secondRect);
    myFirstComponent.validate();
    mySecondComponent.validate();
  }
 else   if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) {
    hideNull(mySecondComponent);
    myDivider.setVisible(false);
    myFirstComponent.setBounds(0,0,(int)width,(int)height);
    myFirstComponent.validate();
  }
 else   if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) {
    hideNull(myFirstComponent);
    myDivider.setVisible(false);
    mySecondComponent.setBounds(0,0,(int)width,(int)height);
    mySecondComponent.validate();
  }
 else {
    myDivider.setVisible(false);
    if (myFirstComponent != null) {
      myFirstComponent.setBounds(0,0,0,0);
      myFirstComponent.validate();
    }
 else {
      hideNull(myFirstComponent);
    }
    if (mySecondComponent != null) {
      mySecondComponent.setBounds(0,0,0,0);
      mySecondComponent.validate();
    }
 else {
      hideNull(mySecondComponent);
    }
  }
  myDivider.doLayout();
}
