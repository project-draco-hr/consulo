{
  final Ref<Boolean> empty=Ref.create(true);
  Consumer<CompletionResult> passResult=new Consumer<CompletionResult>(){
    public void consume(    final CompletionResult lookupElement){
      empty.set(false);
      result.passResult(lookupElement);
    }
  }
;
  result.runRemainingContributors(parameters,passResult);
  if (empty.get()) {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() == 1 && JavaCompletionContributor.mayStartClassName(result,false) && JavaCompletionContributor.isClassNamePossible(parameters.getPosition())) {
      JavaClassNameCompletionContributor.addAllClasses(parameters,JavaCompletionSorting.addJavaSorting(parameters,result),true,new Consumer<LookupElement>(){
        @Override public void consume(        LookupElement element){
          JavaPsiClassReferenceElement classElement=element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);
          if (classElement != null) {
            classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
          }
          result.addElement(element);
        }
      }
);
    }
 else     if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {
      result.runRemainingContributors(parameters.withInvocationCount(3),passResult);
    }
  }
}
