{
  if (parameters.getCompletionType() == CompletionType.BASIC) {
    PsiElement position=parameters.getPosition();
    if (parameters.getInvocationCount() <= 1 && JavaCompletionContributor.mayStartClassName(result,false) && JavaCompletionContributor.isClassNamePossible(position)) {
      suggestNonImportedClasses(parameters,result);
      return;
    }
    PsiElement parent=position.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      PsiElement qualifier=((PsiJavaCodeReferenceElement)parent).getQualifier();
      if (qualifier instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)qualifier).isQualified() && ((PsiJavaCodeReferenceElement)qualifier).resolve() == null) {
        CompletionResultSet qualifiedCollector=result.withPrefixMatcher(position.getContainingFile().getText().substring(parent.getTextRange().getStartOffset(),parameters.getOffset()));
        ElementFilter filter=JavaCompletionContributor.getReferenceFilter(position);
        for (        LookupElement base : suggestQualifierItems(parameters,result,(PsiJavaCodeReferenceElement)qualifier,filter)) {
          PsiType type=JavaCompletionUtil.getLookupElementType(base);
          if (type != null) {
            PsiReferenceExpression ref=ReferenceExpressionCompletionContributor.createMockReference(position,type,base);
            for (            final LookupElement item : JavaSmartCompletionContributor.completeReference(position,ref,filter,true,true,parameters,result.getPrefixMatcher())) {
              qualifiedCollector.addElement(new JavaChainLookupElement(base,item));
            }
          }
        }
      }
    }
  }
  if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {
    result.runRemainingContributors(parameters.withInvocationCount(3),passResult);
  }
}
