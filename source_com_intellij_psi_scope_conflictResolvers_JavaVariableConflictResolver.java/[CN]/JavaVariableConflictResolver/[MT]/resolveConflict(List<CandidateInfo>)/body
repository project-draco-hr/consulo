{
  final int size=conflicts.size();
  if (size == 1) {
    return conflicts.get(0);
  }
  if (size > 0) {
    final CandidateInfo[] uncheckedResult=conflicts.toArray(new CandidateInfo[size]);
    CandidateInfo currentResult=uncheckedResult[0];
    final PsiElement currentElement=currentResult.getElement();
    if (currentElement instanceof PsiField) {
      for (int i=1; i < uncheckedResult.length; i++) {
        final CandidateInfo candidate=uncheckedResult[i];
        final PsiElement otherElement=candidate.getElement();
        if (otherElement == null)         continue;
        if (!(otherElement instanceof PsiField)) {
          if (otherElement instanceof PsiLocalVariable) {
            return candidate;
          }
 else {
            if (!currentResult.isAccessible())             return candidate;
            conflicts.remove(candidate);
            continue;
          }
        }
        final PsiClass newClass=((PsiField)otherElement).getContainingClass();
        final PsiClass oldClass=((PsiField)currentElement).getContainingClass();
        final PsiElement scope=currentResult.getCurrentFileResolveScope();
        if (newClass.isInheritor(oldClass,true)) {
          if (!(scope instanceof PsiClass) || !((PsiClass)scope).isInheritorDeep(oldClass,newClass)) {
            conflicts.remove(currentResult);
            currentResult=candidate;
            continue;
          }
        }
 else         if (oldClass.isInheritor(newClass,true)) {
          if (!(scope instanceof PsiClass) || !((PsiClass)scope).isInheritorDeep(newClass,oldClass)) {
            conflicts.remove(candidate);
            continue;
          }
        }
        if (!candidate.isAccessible()) {
          conflicts.remove(candidate);
          continue;
        }
        if (!currentResult.isAccessible()) {
          conflicts.remove(currentResult);
          currentResult=candidate;
          continue;
        }
        if (otherElement == currentElement && candidate.getSubstitutor().equals(currentResult.getSubstitutor())) {
          conflicts.remove(candidate);
          continue;
        }
        return null;
      }
    }
    return currentResult;
  }
  return null;
}
