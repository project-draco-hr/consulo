{
  final List<CompositeElement> nodes=ContainerUtil.newArrayList();
  final List<PsiElement> psiElements=ContainerUtil.newArrayList();
  RecursiveTreeElementWalkingVisitor visitor=new RecursiveTreeElementWalkingVisitor(false){
    @Override public void visitLeaf(    LeafElement leaf){
    }
    @Override public void visitComposite(    CompositeElement composite){
      ProgressIndicatorProvider.checkCanceled();
      if (composite.myWrapper == null) {
        nodes.add(composite);
        psiElements.add(composite.createPsiNoLock());
      }
      super.visitComposite(composite);
    }
  }
;
  for (TreeElement child=getFirstChildNode(); child != null; child=child.getTreeNext()) {
    child.acceptTree(visitor);
  }
synchronized (PsiLock.LOCK) {
    for (int i=0; i < psiElements.size(); i++) {
      CompositeElement node=nodes.get(i);
      if (node.myWrapper == null) {
        node.myWrapper=psiElements.get(i);
      }
    }
  }
}
