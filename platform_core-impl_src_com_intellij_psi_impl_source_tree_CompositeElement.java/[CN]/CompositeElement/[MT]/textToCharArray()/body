{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  int startStamp=myModificationsCount;
  final int len=getTextLength();
  if (startStamp != myModificationsCount) {
    throw new AssertionError("Tree changed while calculating text. startStamp:" + startStamp + "; current:"+ myModificationsCount+ "; myHC:"+ myHC+ "; assertThreading:"+ ASSERT_THREADING+ "; Thread.holdsLock(START_OFFSET_LOCK):"+ Thread.holdsLock(START_OFFSET_LOCK)+ "; Thread.holdsLock(PSI_LOCK):"+ Thread.holdsLock(PsiLock.LOCK));
  }
  char[] buffer=new char[len];
  final int endOffset;
  try {
    endOffset=AstBufferUtil.toBuffer(this,buffer,0);
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    @NonNls String msg="Underestimated text length: " + len;
    msg+=diagnoseTextInconsistency(new String(buffer),startStamp);
    try {
      int length=AstBufferUtil.toBuffer(this,new char[len],0);
      msg+=";\n repetition gives success (" + length + ")";
    }
 catch (    ArrayIndexOutOfBoundsException e1) {
      msg+=";\n repetition fails as well";
    }
    throw new RuntimeException(msg,e);
  }
  if (endOffset != len) {
    @NonNls String msg="len=" + len + ";\n endOffset="+ endOffset;
    msg+=diagnoseTextInconsistency(new String(buffer,0,Math.min(len,endOffset)),startStamp);
    throw new AssertionError(msg);
  }
  return buffer;
}
