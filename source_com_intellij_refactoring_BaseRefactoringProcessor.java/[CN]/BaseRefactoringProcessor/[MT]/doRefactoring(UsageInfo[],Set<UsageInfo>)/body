{
  if (usages != null) {
    ArrayList<UsageInfo> array=new ArrayList<UsageInfo>();
    for (int i=0; i < usages.length; i++) {
      UsageInfo usage=usages[i];
      if (excludedUsages != null && excludedUsages.contains(usage)) {
        continue;
      }
      final PsiElement element=usage.getElement();
      if (element == null)       continue;
      if (!element.isWritable())       continue;
      array.add(usage);
    }
    usages=array.toArray(new UsageInfo[array.size()]);
  }
  LvcsAction action=LvcsIntegration.checkinFilesBeforeRefactoring(myProject,getCommandName());
  try {
    final UsageInfo[] _usages=usages;
    ApplicationManager.getApplication().runWriteAction(new RefactoringChangeMarker(){
      public Object getId(){
        return myMarkerId;
      }
      public void run(){
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        RefactoringListenerManagerImpl listenerManager=(RefactoringListenerManagerImpl)RefactoringListenerManager.getInstance(myProject);
        myTransaction=listenerManager.startTransaction();
        performRefactoring(_usages);
        myTransaction.commit();
        performPsiSpoilingRefactoring();
      }
    }
);
  }
  finally {
    LvcsIntegration.checkinFilesAfterRefactoring(myProject,action);
  }
  if (usages != null) {
    int count=usages.length;
    if (count > 0) {
      WindowManager.getInstance().getStatusBar(myProject).setInfo(count + " occurrence" + (count > 1 ? "s" : "")+ " changed");
    }
 else {
      if (!isPreviewUsages(usages)) {
        WindowManager.getInstance().getStatusBar(myProject).setInfo("No occurrences found");
      }
    }
  }
}
