{
  if (usages != null) {
    ArrayList<UsageInfo> array=new ArrayList<UsageInfo>(Arrays.asList(usages));
    array.removeAll(excludedUsages);
    for (Iterator<UsageInfo> iterator=array.iterator(); iterator.hasNext(); ) {
      final PsiElement element=iterator.next().getElement();
      if (element == null || !element.isWritable())       iterator.remove();
    }
    usages=array.toArray(new UsageInfo[array.size()]);
  }
  LvcsAction action=LvcsIntegration.checkinFilesBeforeRefactoring(myProject,getCommandName());
  try {
    final UsageInfo[] _usages=usages;
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        RefactoringListenerManagerImpl listenerManager=(RefactoringListenerManagerImpl)RefactoringListenerManager.getInstance(myProject);
        myTransaction=listenerManager.startTransaction();
        Set<PsiJavaFile> touchedJavaFiles=getTouchedJavaFiles(_usages);
        performRefactoring(_usages);
        removeRedundantImports(touchedJavaFiles);
        myTransaction.commit();
        performPsiSpoilingRefactoring();
      }
    }
);
  }
  finally {
    LvcsIntegration.checkinFilesAfterRefactoring(myProject,action);
  }
  if (usages != null) {
    int count=usages.length;
    if (count > 0) {
      WindowManager.getInstance().getStatusBar(myProject).setInfo(RefactoringBundle.message("statusBar.refactoring.result",count));
    }
 else {
      if (!isPreviewUsages(usages)) {
        WindowManager.getInstance().getStatusBar(myProject).setInfo(RefactoringBundle.message("statusBar.noUsages"));
      }
    }
  }
}
