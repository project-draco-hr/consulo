{
  myMarkerId=markerId;
  final UsageInfo[][] usages=new UsageInfo[1][];
  final Runnable findUsagesRunnable=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          usages[0]=findUsages();
        }
      }
);
    }
  }
;
  if (!ApplicationManager.getApplication().runProcessWithProgressSynchronously(findUsagesRunnable,"Looking For Usages...",true,myProject))   return;
  LOG.assertTrue(usages[0] != null);
  if (!preprocessUsages(usages))   return;
  boolean toPreview=isPreviewUsages(usages[0]);
  if (toPreview) {
    FindUsagesCommand findUsagesCommand=new FindUsagesCommand(){
      public UsageInfo[] execute(      PsiElement[] elementsToSearch){
        refreshElements(elementsToSearch);
        findUsagesRunnable.run();
        return usages[0];
      }
    }
;
    UsageViewDescriptor descriptor=createUsageViewDescriptor(usages[0],findUsagesCommand);
    showUsageView(descriptor,isVariable(),isVariable());
    ensureFilesWritable(usages[0]);
  }
 else {
    final UsageInfo[] usages1=usages[0];
    ensureFilesWritable(usages[0]);
    execute(usages1);
  }
}
