{
  final List<DirDiffElement> selectedElements=getSelectedElements();
  myUpdating.set(true);
synchronized (myElements) {
    final Iterator<DirDiffElement> i=myElements.iterator();
    while (i.hasNext()) {
      final DType type=i.next().getType();
switch (type) {
case SOURCE:
        if (!mySettings.showNewOnSource)         i.remove();
      break;
case TARGET:
    if (!mySettings.showNewOnTarget)     i.remove();
  break;
case SEPARATOR:
break;
case CHANGED:
if (!mySettings.showDifferent) i.remove();
break;
case EQUAL:
if (!mySettings.showEqual) i.remove();
break;
}
}
boolean sep=true;
for (int j=myElements.size() - 1; j >= 0; j--) {
if (myElements.get(j).isSeparator()) {
if (sep) {
myElements.remove(j);
}
 else {
sep=true;
}
}
 else {
sep=false;
}
}
fireTableDataChanged();
myUpdating.set(false);
int index;
if (!selectedElements.isEmpty() && (index=myElements.indexOf(selectedElements.get(0))) != -1) {
myTable.getSelectionModel().setSelectionInterval(index,index);
TableUtil.scrollSelectionToVisible(myTable);
}
 else {
selectFirstRow();
}
myPanel.focusTable();
myPanel.update(true);
}
}
