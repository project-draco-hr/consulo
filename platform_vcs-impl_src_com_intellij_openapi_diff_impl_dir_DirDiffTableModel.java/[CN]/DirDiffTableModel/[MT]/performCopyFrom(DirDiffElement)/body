{
  final DiffElement<?> target=element.getTarget();
  if (target != null) {
    if (target instanceof BackgroundOperatingDiffElement) {
      final Ref<String> errorMessage=new Ref<String>();
      final Ref<DiffElement> diff=new Ref<DiffElement>();
      Runnable onFinish=new Runnable(){
        @Override public void run(){
          if (!Disposer.isDisposed(DirDiffTableModel.this)) {
            refreshElementAfterCopyFrom(element,diff.get());
            if (!errorMessage.isNull()) {
              reportException(errorMessage.get());
            }
          }
        }
      }
;
      ((BackgroundOperatingDiffElement)target).copyTo(mySrc,errorMessage,diff,onFinish,element.getSource() != null);
    }
 else {
      final String path=element.getParentNode().getPath();
      final AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(getClass());
      try {
        final DiffElement<?> diffElement=target.copyTo(mySrc,path);
        refreshElementAfterCopyFrom(element,diffElement);
      }
  finally {
        token.finish();
      }
    }
  }
}
