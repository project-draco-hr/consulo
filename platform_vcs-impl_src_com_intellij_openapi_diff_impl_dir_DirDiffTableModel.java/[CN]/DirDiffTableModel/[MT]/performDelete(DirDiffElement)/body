{
  final DiffElement source=element.getSource();
  final DiffElement target=element.getTarget();
  LOG.assertTrue(source == null || target == null);
  if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) {
    final Ref<String> errorMessage=new Ref<String>();
    Runnable onFinish=new Runnable(){
      @Override public void run(){
        if (!Disposer.isDisposed(DirDiffTableModel.this)) {
          if (!errorMessage.isNull()) {
            reportException(errorMessage.get());
          }
 else {
synchronized (myElements) {
              if (myElements.indexOf(element) != -1) {
                removeElement(element,true);
              }
            }
          }
        }
      }
    }
;
    if (source != null) {
      ((BackgroundOperatingDiffElement)source).delete(errorMessage,onFinish);
    }
 else {
      ((BackgroundOperatingDiffElement)target).delete(errorMessage,onFinish);
    }
  }
 else {
synchronized (myElements) {
      if (myElements.indexOf(element) != -1) {
        removeElement(element,true);
      }
    }
    final AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(getClass());
    try {
      if (source != null) {
        source.delete();
      }
      if (target != null) {
        target.delete();
      }
    }
  finally {
      token.finish();
    }
  }
}
