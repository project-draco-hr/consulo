{
  final DiffElement<?> source=element.getSource();
  if (source != null) {
    final String path=element.getParentNode().getPath();
    if (source instanceof BackgroundOperatingDiffElement) {
      final Ref<String> errorMessage=new Ref<String>();
      final Ref<DiffElement> diff=new Ref<DiffElement>();
      Runnable onFinish=new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().assertIsDispatchThread();
          if (!Disposer.isDisposed(DirDiffTableModel.this)) {
            DiffElement newElement=diff.get();
            if (newElement == null && element.getTarget() != null) {
              final int row=myElements.indexOf(element);
              element.updateTargetData();
              fireTableRowsUpdated(row,row);
            }
            refreshElementAfterCopyTo(newElement,element);
            if (!errorMessage.isNull()) {
              reportException(errorMessage.get());
            }
          }
        }
      }
;
      ((BackgroundOperatingDiffElement)source).copyTo(myTrg,errorMessage,diff,onFinish,element.getTarget(),path);
    }
 else {
      final AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(getClass());
      try {
        final DiffElement<?> diffElement=source.copyTo(myTrg,path);
        refreshElementAfterCopyTo(diffElement,element);
      }
  finally {
        token.finish();
      }
    }
  }
}
