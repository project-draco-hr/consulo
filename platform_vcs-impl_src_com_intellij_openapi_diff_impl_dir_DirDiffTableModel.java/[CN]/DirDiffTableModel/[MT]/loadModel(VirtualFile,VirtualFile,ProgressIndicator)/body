{
  final HashSet<String> files=new HashSet<String>();
  scan("",src,files,indicator,true);
  scan("",trg,files,indicator,true);
  final ArrayList<String> pathes=new ArrayList<String>(files);
  Collections.sort(pathes,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      final boolean b1=o1.endsWith("/");
      final boolean b2=o2.endsWith("/");
      final String[] dirs1=o1.split("/");
      final String[] dirs2=o2.split("/");
      for (int i=0; i < Math.min(dirs1.length,dirs2.length); i++) {
        final int cmp=dirs1[i].toLowerCase().compareTo(dirs2[i].toLowerCase());
        if (cmp != 0)         return cmp;
      }
      return dirs1.length - dirs2.length;
    }
  }
);
  for (  String path : pathes) {
    final VirtualFile srcFile=src.findFileByRelativePath(path);
    final VirtualFile trgFile=trg.findFileByRelativePath(path);
    if (srcFile == null && trgFile != null) {
      myElements.add(DirDiffElement.createTargetOnly(trgFile));
    }
 else     if (srcFile != null && trgFile == null) {
      myElements.add(DirDiffElement.createSourceOnly(srcFile));
    }
 else     if (srcFile != null && trgFile != null) {
      indicator.setText2("Comparing " + path);
      if (srcFile.isDirectory() && trgFile.isDirectory()) {
        myElements.add(DirDiffElement.createDirElement(srcFile,trgFile,path));
      }
 else       if (srcFile.isDirectory() && !trgFile.isDirectory()) {
        myElements.add(DirDiffElement.createDirElement(srcFile,null,path));
        myElements.add(DirDiffElement.createTargetOnly(trgFile));
      }
 else       if (!srcFile.isDirectory() && trgFile.isDirectory()) {
        myElements.add(DirDiffElement.createDirElement(null,trgFile,path));
        myElements.add(DirDiffElement.createSourceOnly(srcFile));
      }
 else       if (!isEqual(srcFile,trgFile)) {
        myElements.add(DirDiffElement.createChange(srcFile,trgFile));
      }
    }
  }
}
