{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  HashMap<PsiFile,ArrayList<UsageOffset>> filesToOffsetsMap=new HashMap<PsiFile,ArrayList<UsageOffset>>();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element == null || !element.isValid())     continue;
    if (usage instanceof NonCodeUsageInfo) {
      final PsiFile containingFile=element.getContainingFile();
      int fileOffset=element.getTextRange().getStartOffset() + usage.startOffset;
      ArrayList<UsageOffset> list=filesToOffsetsMap.get(containingFile);
      if (list == null) {
        list=new ArrayList<UsageOffset>();
        filesToOffsetsMap.put(containingFile,list);
      }
      list.add(new UsageOffset(fileOffset,fileOffset + usage.endOffset - usage.startOffset,((NonCodeUsageInfo)usage).newText));
    }
  }
  for (  PsiFile file : filesToOffsetsMap.keySet()) {
    final Document editorDocument=PsiDocumentManager.getInstance(project).getDocument(file);
    ArrayList<UsageOffset> list=filesToOffsetsMap.get(file);
    UsageOffset[] offsets=list.toArray(new UsageOffset[list.size()]);
    Arrays.sort(offsets);
    for (int i=offsets.length - 1; i >= 0; i--) {
      UsageOffset usageOffset=offsets[i];
      editorDocument.replaceString(usageOffset.startOffset,usageOffset.endOffset,usageOffset.newText);
    }
    PsiDocumentManager.getInstance(project).commitDocument(editorDocument);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
}
