{
  final GrVariable var=findVar();
  final GrExpression expr=findExpr();
  if (var != null) {
    myTypeComboBox=GrTypeComboBox.createTypeComboBoxWithDefType(var.getDeclaredType());
  }
 else   if (expr != null) {
    myTypeComboBox=GrTypeComboBox.createTypeComboBoxFromExpression(expr);
  }
 else {
    myTypeComboBox=GrTypeComboBox.createEmptyTypeComboBox();
  }
  myTypeComboBox.addType(JavaPsiFacade.getElementFactory(myProject).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_CLOSURE,myInfo.getContext()));
  String[] possibleNames;
  final GrIntroduceContext introduceContext=new GrIntroduceContextImpl(myProject,null,expr,var,PsiElement.EMPTY_ARRAY,myInfo.getToReplaceIn());
  final GroovyFieldValidator validator=new GroovyFieldValidator(introduceContext);
  if (expr != null) {
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNames(expr,validator,true);
  }
 else   if (var != null) {
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNameByType(var.getType(),validator);
  }
 else {
    possibleNames=ArrayUtil.EMPTY_STRING_ARRAY;
  }
  if (var != null) {
    String[] arr=new String[possibleNames.length + 1];
    arr[0]=var.getName();
    System.arraycopy(possibleNames,0,arr,1,possibleNames.length);
    possibleNames=arr;
  }
  myNameSuggestionsField=new NameSuggestionsField(possibleNames,myProject,GroovyFileType.GROOVY_FILE_TYPE);
}
