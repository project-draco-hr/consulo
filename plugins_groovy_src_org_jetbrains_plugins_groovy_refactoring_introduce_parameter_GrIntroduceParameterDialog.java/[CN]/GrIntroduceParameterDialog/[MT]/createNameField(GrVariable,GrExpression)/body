{
  String[] possibleNames;
  if (expr != null) {
    final GrIntroduceContext introduceContext=new GrIntroduceContextImpl(myProject,null,expr,var,PsiElement.EMPTY_ARRAY,myInfo.getToReplaceIn());
    final GroovyFieldValidator validator=new GroovyFieldValidator(introduceContext);
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNames(expr,validator,true);
  }
 else   if (var != null) {
    final GrIntroduceContext introduceContext=new GrIntroduceContextImpl(myProject,null,expr,var,PsiElement.EMPTY_ARRAY,myInfo.getToReplaceIn());
    final GroovyFieldValidator validator=new GroovyFieldValidator(introduceContext);
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNameByType(var.getType(),validator);
  }
 else {
    possibleNames=new String[]{"closure"};
  }
  if (var != null) {
    String[] arr=new String[possibleNames.length + 1];
    arr[0]=var.getName();
    System.arraycopy(possibleNames,0,arr,1,possibleNames.length);
    possibleNames=arr;
  }
  return new NameSuggestionsField(possibleNames,myProject,GroovyFileType.GROOVY_FILE_TYPE);
}
