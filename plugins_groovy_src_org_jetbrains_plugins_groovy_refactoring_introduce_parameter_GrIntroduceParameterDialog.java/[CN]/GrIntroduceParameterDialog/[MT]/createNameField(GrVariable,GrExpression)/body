{
  String[] possibleNames;
  if (expr != null) {
    final GrIntroduceContext introduceContext=new GrIntroduceContextImpl(myProject,null,expr,var,PsiElement.EMPTY_ARRAY,myInfo.getToReplaceIn());
    final GroovyFieldValidator validator=new GroovyFieldValidator(introduceContext);
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNames(expr,validator,true);
  }
 else   if (var != null) {
    final GrIntroduceContext introduceContext=new GrIntroduceContextImpl(myProject,null,expr,var,PsiElement.EMPTY_ARRAY,myInfo.getToReplaceIn());
    final GroovyFieldValidator validator=new GroovyFieldValidator(introduceContext);
    possibleNames=GroovyNameSuggestionUtil.suggestVariableNameByType(var.getType(),validator);
  }
 else {
    possibleNames=new String[]{"closure"};
  }
  List<String> names=new ArrayList<String>();
  if (var != null) {
    names.add(var.getName());
  }
  ContainerUtil.addAll(names,possibleNames);
  return new NameSuggestionsField(ArrayUtil.toStringArray(names),myProject,GroovyFileType.GROOVY_FILE_TYPE);
}
