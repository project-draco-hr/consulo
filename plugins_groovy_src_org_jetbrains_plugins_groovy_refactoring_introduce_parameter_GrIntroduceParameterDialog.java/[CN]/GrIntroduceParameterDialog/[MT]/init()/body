{
  super.init();
  JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  initReplaceFieldsWithGetters(settings);
  myDeclareFinalCheckBox.setSelected(hasFinalModifier());
  myDelegateViaOverloadingMethodCheckBox.setVisible(myInfo.getToSearchFor() != null);
  setTitle(RefactoringBundle.message("introduce.parameter.title"));
  myTable.init(myInfo);
  final GrParameter[] parameters=myInfo.getToReplaceIn().getParameters();
  toRemoveCBs.forEachEntry(new TObjectIntProcedure<JCheckBox>(){
    @Override public boolean execute(    JCheckBox checkbox,    int index){
      checkbox.setSelected(true);
      final GrParameter param=parameters[index];
      final ParameterInfo pinfo=findParamByOldName(param.getName());
      if (pinfo != null) {
        pinfo.setPassAsParameter(false);
      }
      return true;
    }
  }
);
  updateSignature();
  if (findExpr() != null || findVar() != null) {
    mySignaturePanel.setVisible(false);
  }
  myTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      mySignaturePanel.setVisible(myTypeComboBox.isClosureSelected());
      pack();
    }
  }
);
  pack();
}
