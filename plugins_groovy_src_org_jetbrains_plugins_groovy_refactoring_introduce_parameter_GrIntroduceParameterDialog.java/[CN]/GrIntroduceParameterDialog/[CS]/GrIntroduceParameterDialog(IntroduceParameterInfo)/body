{
  super(info.getProject(),true);
  myInfo=info;
  TObjectIntHashMap<GrParameter> parametersToRemove=GroovyIntroduceParameterUtil.findParametersToRemove(info);
  toRemoveCBs=new TObjectIntHashMap<JCheckBox>(parametersToRemove.size());
  for (  Object p : parametersToRemove.keys()) {
    JCheckBox cb=new JCheckBox(GroovyRefactoringBundle.message("remove.parameter.0.no.longer.used",((GrParameter)p).getName()));
    toRemoveCBs.put(cb,parametersToRemove.get((GrParameter)p));
    cb.setSelected(true);
  }
  JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  if (myInfo.getStatements().length == 1 && GrIntroduceHandlerBase.findVariable(myInfo.getStatements()[0]) == null) {
    myRemoveLocalVariableCheckBox.setSelected(false);
    myRemoveLocalVariableCheckBox.setVisible(false);
  }
 else {
    myRemoveLocalVariableCheckBox.setSelected(settings.INTRODUCE_PARAMETER_DELETE_LOCAL_VARIABLE);
  }
  initReplaceFieldsWithGetters(settings);
  myDeclareFinalCheckBox.setSelected(hasFinalModifier());
  myChangeVarUsages.setVisible(info.getToReplaceIn() instanceof GrClosableBlock && info.getToSearchFor() instanceof GrVariable);
  myChangeVarUsages.setSelected(true);
  myDelegateViaOverloadingMethodCheckBox.setVisible(info.getToSearchFor() != null);
  setTitle(RefactoringBundle.message("introduce.parameter.title"));
  init();
}
