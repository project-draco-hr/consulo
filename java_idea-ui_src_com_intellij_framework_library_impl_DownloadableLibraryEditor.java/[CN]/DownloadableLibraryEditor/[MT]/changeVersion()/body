{
  final ModalityState current=ModalityState.current();
  myDescription.fetchLibraryVersions(new DownloadableLibraryDescription.LibraryVersionsCallback(){
    @Override public void onSuccess(    @NotNull final List<? extends FrameworkLibraryVersion> versions){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          String pathForDownloaded="";
          final VirtualFile existingRootDirectory=myEditorComponent.getExistingRootDirectory();
          if (existingRootDirectory != null) {
            pathForDownloaded=existingRootDirectory.getPath();
          }
 else {
            final VirtualFile baseDir=myEditorComponent.getBaseDirectory();
            if (baseDir != null) {
              pathForDownloaded=baseDir.getPath() + "/lib";
            }
          }
          final LibraryDownloadSettings initialSettings=new LibraryDownloadSettings(getCurrentVersion(versions),myLibraryType,LibrariesContainer.LibraryLevel.PROJECT,pathForDownloaded);
          final LibraryDownloadSettings settings=DownloadingOptionsDialog.showDialog(myMainPanel,initialSettings,versions,false);
          if (settings != null) {
            final NewLibraryEditor editor=settings.download(myMainPanel);
            if (editor != null) {
              myEditorComponent.getLibraryEditor().removeAllRoots();
              myEditorComponent.getLibraryEditor().setName(editor.getName());
              editor.applyTo((LibraryEditorBase)myEditorComponent.getLibraryEditor());
              myEditorComponent.updateRootsTree();
              myCurrentVersionString=settings.getVersion().getVersionString();
              updateDescription();
              myModified=true;
            }
          }
        }
      }
,current);
    }
  }
);
}
