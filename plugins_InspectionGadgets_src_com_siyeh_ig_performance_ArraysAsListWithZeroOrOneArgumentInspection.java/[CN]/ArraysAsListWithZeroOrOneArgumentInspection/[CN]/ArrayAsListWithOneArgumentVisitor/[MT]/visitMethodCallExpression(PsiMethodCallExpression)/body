{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"asList".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 1) {
    final PsiExpression argument=arguments[0];
    final PsiType type=argument.getType();
    if (type instanceof PsiArrayType) {
      return;
    }
  }
 else   if (arguments.length != 0) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String className=containingClass.getQualifiedName();
  if (!"java.util.Arrays".equals(className)) {
    return;
  }
  registerMethodCallError(expression,Boolean.valueOf(arguments.length == 0));
}
