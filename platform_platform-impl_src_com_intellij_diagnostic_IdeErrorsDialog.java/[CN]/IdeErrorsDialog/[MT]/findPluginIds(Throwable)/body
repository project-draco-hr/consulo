{
  if (t instanceof PluginException) {
    PluginId pluginId=((PluginException)t).getPluginId();
    return Collections.singleton(pluginId);
  }
  Set<PluginId> pluginIds=new TreeSet<>();
  if (t instanceof NoSuchMethodException) {
    if (t.getMessage() != null) {
      String className="";
      StringTokenizer tok=new StringTokenizer(t.getMessage(),".");
      while (tok.hasMoreTokens()) {
        String token=tok.nextToken();
        if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) {
          className+=token;
        }
      }
      addPluginIdByClassName(className,pluginIds);
    }
  }
 else   if (t instanceof ClassNotFoundException) {
    if (t.getMessage() != null) {
      String className=t.getMessage();
      addPluginIdByClassName(className,pluginIds);
    }
  }
 else   if (t instanceof AbstractMethodError && t.getMessage() != null) {
    String s=t.getMessage();
    int pos=s.indexOf('(');
    if (pos >= 0) {
      s=s.substring(0,pos);
      pos=s.lastIndexOf('.');
      if (pos >= 0) {
        s=s.substring(0,pos);
        addPluginIdByClassName(s,pluginIds);
      }
    }
  }
 else   if (t instanceof ExtensionException) {
    String className=((ExtensionException)t).getExtensionClass().getName();
    addPluginIdByClassName(className,pluginIds);
  }
  for (  StackTraceElement element : t.getStackTrace()) {
    if (element != null) {
      String className=element.getClassName();
      addPluginIdByClassName(className,pluginIds);
    }
  }
  return pluginIds;
}
