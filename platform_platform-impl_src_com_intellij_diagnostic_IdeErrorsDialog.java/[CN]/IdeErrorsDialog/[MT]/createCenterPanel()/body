{
  DefaultActionGroup goBack=new DefaultActionGroup();
  BackAction back=new BackAction();
  goBack.add(back);
  ActionToolbar backToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,goBack,true);
  backToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myBackButtonPanel.add(backToolbar.getComponent(),BorderLayout.CENTER);
  DefaultActionGroup goForward=new DefaultActionGroup();
  ForwardAction forward=new ForwardAction();
  new ShadowAction(forward,ActionManager.getInstance().getAction("Forward"),getRootPane());
  goForward.add(forward);
  ActionToolbar forwardToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,goForward,true);
  forwardToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myNextButtonPanel.add(forwardToolbar.getComponent(),BorderLayout.CENTER);
  myTabs=new TabbedPaneWrapper(this);
  final LabeledTextComponent.TextListener commentsListener=new LabeledTextComponent.TextListener(){
    @Override public void textChanged(    String newText){
      if (myMute) {
        return;
      }
      AbstractMessage message=getSelectedMessage();
      if (message != null) {
        message.setAdditionalInfo(newText);
      }
    }
  }
;
  if (!INTERNAL_MODE) {
    myDetailsTabForm=new DetailsTabForm(null);
    myCommentsTabForm=new CommentsTabForm();
    myCommentsTabForm.addCommentsListener(commentsListener);
    myTabs.addTab(DiagnosticBundle.message("error.comments.tab.title"),myCommentsTabForm.getContentPane());
    myDetailsTabForm.setCommentsAreaVisible(false);
  }
 else {
    myAnalyzeAction=new AnalyzeAction(ActionManager.getInstance().getAction("AnalyzeStacktraceOnError"));
    myDetailsTabForm=new DetailsTabForm(myAnalyzeAction);
    myDetailsTabForm.setCommentsAreaVisible(true);
    myDetailsTabForm.addCommentsListener(commentsListener);
  }
  myTabs.addTab(DiagnosticBundle.message("error.details.tab.title"),myDetailsTabForm.getContentPane());
  myAttachmentsTabForm=new AttachmentsTabForm();
  int activeTabIndex=Integer.parseInt(PropertiesComponent.getInstance().getValue(ACTIVE_TAB_OPTION,"0"));
  if (activeTabIndex >= myTabs.getTabCount() || activeTabIndex < 0) {
    activeTabIndex=0;
  }
  myTabs.setSelectedIndex(activeTabIndex);
  myTabs.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      final JComponent c=getPreferredFocusedComponent();
      if (c != null) {
        IdeFocusManager.findInstanceByComponent(myContentPane).requestFocus(c,true);
      }
    }
  }
);
  myTabsPanel.add(myTabs.getComponent(),BorderLayout.CENTER);
  myDisableLink.setHyperlinkText(UIUtil.removeMnemonic(DiagnosticBundle.message("error.list.disable.plugin")));
  myDisableLink.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        disablePlugin();
      }
    }
  }
);
  myCredentialsLabel.addHyperlinkListener(new HyperlinkListener(){
    @Override public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        new JetBrainsAccountDialog(getRootPane()).show();
        updateCredentialsPane(getSelectedMessage());
      }
    }
  }
);
  return myContentPane;
}
