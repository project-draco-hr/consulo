{
  final List<InspectionTreeNode> content=new ArrayList<InspectionTreeNode>();
  for (  String packageName : packageContents.keySet()) {
    final Map<String,InspectionPackageNode> module2PackageMap=new HashMap<String,InspectionPackageNode>();
    InspectionPackageNode pNode=null;
    final Set<T> elements=packageContents.get(packageName);
    for (    T userObject : elements) {
      final UserObjectContainer<T> container=computeContainer.fun(userObject);
      final String moduleName=showStructure ? container.getModule() : null;
      pNode=module2PackageMap.get(moduleName);
      if (pNode == null) {
        pNode=new InspectionPackageNode(packageName);
        module2PackageMap.put(moduleName,pNode);
      }
      appendDescriptor(tool,container,pNode,canPackageRepeat);
    }
    if (showStructure) {
      final HashMap<String,InspectionModuleNode> moduleNodes=new HashMap<String,InspectionModuleNode>();
      for (      final String moduleName : module2PackageMap.keySet()) {
        final InspectionPackageNode packNode=module2PackageMap.get(moduleName);
        if (packNode.getChildCount() > 0) {
          InspectionModuleNode moduleNode=moduleNodes.get(moduleName);
          if (moduleNode == null) {
            final Module module=ModuleManager.getInstance(myProject).findModuleByName(moduleName);
            if (module != null) {
              moduleNode=new InspectionModuleNode(module);
              moduleNodes.put(moduleName,moduleNode);
            }
 else {
              continue;
            }
          }
          moduleNode.add(packNode);
        }
      }
      content.addAll(moduleNodes.values());
    }
 else     if (pNode != null) {
      for (int i=0; i < pNode.getChildCount(); i++) {
        content.add(((RefElementNode)pNode.getChildAt(i)));
      }
    }
  }
  return content;
}
