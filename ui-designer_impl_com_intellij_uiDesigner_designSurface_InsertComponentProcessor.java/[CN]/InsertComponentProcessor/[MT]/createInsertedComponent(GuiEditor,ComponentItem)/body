{
  if (item.isAnyComponent()) {
    ComponentItem newItem=item.clone();
    ComponentItemDialog dlg=new ComponentItemDialog(editor.getProject(),editor,newItem,true);
    dlg.setTitle(UIDesignerBundle.message("palette.non.palette.component.title"));
    dlg.show();
    if (!dlg.isOK()) {
      return null;
    }
    item=newItem;
  }
  RadComponent result;
  final String id=FormEditingUtil.generateId(editor.getRootContainer());
  Class radComponentClass=getRadComponentClass(item.getClassName());
  if (radComponentClass != null) {
    try {
      result=(RadComponent)radComponentClass.getConstructor(Module.class,String.class).newInstance(editor.getModule(),id);
    }
 catch (    Exception e) {
      LOG.error(e);
      return null;
    }
  }
 else {
    PsiFile boundForm=item.getBoundForm();
    if (boundForm != null) {
      try {
        result=new RadNestedForm(editor.getModule(),FormEditingUtil.buildResourceName(boundForm),id);
      }
 catch (      Exception ex) {
        result=RadErrorComponent.create(editor.getModule(),id,item.getClassName(),null,ex.getMessage());
      }
    }
 else {
      final ClassLoader loader=LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile());
      try {
        final Class aClass=Class.forName(item.getClassName(),true,loader);
        if (item.isContainer()) {
          LOG.debug("Creating custom container instance");
          result=new RadContainer(editor.getModule(),aClass,id);
        }
 else {
          result=new RadAtomicComponent(editor.getModule(),aClass,id);
        }
      }
 catch (      final Exception exc) {
        String errorDescription=Utils.validateJComponentClass(loader,item.getClassName(),true);
        if (errorDescription == null) {
          errorDescription=UIDesignerBundle.message("error.class.cannot.be.instantiated",item.getClassName());
          final String message=FormEditingUtil.getExceptionMessage(exc);
          if (message != null) {
            errorDescription+=": " + message;
          }
        }
        result=RadErrorComponent.create(editor.getModule(),id,item.getClassName(),null,errorDescription);
      }
    }
  }
  result.init(editor,item);
  return result;
}
