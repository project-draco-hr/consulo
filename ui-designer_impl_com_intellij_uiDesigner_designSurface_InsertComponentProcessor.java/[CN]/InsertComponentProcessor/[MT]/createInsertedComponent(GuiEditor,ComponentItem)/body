{
  if (item.isAnyComponent()) {
    ComponentItem newItem=item.clone();
    ComponentItemDialog dlg=new ComponentItemDialog(editor.getProject(),editor,newItem,true);
    dlg.setTitle(UIDesignerBundle.message("palette.non.palette.component.title"));
    dlg.show();
    if (!dlg.isOK()) {
      return null;
    }
    item=newItem;
  }
  RadComponent result;
  final String id=FormEditingUtil.generateId(editor.getRootContainer());
  if (JScrollPane.class.getName().equals(item.getClassName())) {
    result=new RadScrollPane(editor.getModule(),id);
  }
 else   if (item == Palette.getInstance(editor.getProject()).getPanelItem()) {
    result=new RadContainer(editor.getModule(),id);
  }
 else {
    if (VSpacer.class.getName().equals(item.getClassName())) {
      result=new RadVSpacer(editor.getModule(),id);
    }
 else     if (HSpacer.class.getName().equals(item.getClassName())) {
      result=new RadHSpacer(editor.getModule(),id);
    }
 else     if (JTabbedPane.class.getName().equals(item.getClassName())) {
      result=new RadTabbedPane(editor.getModule(),id);
    }
 else     if (JSplitPane.class.getName().equals(item.getClassName())) {
      result=new RadSplitPane(editor.getModule(),id);
    }
 else     if (JToolBar.class.getName().equals(item.getClassName())) {
      result=new RadToolBar(editor.getModule(),id);
    }
 else {
      PsiFile boundForm=item.getBoundForm();
      if (boundForm != null) {
        try {
          result=new RadNestedForm(editor.getModule(),FormEditingUtil.buildResourceName(boundForm),id);
        }
 catch (        Exception ex) {
          result=RadErrorComponent.create(editor.getModule(),id,item.getClassName(),null,ex.getMessage());
        }
      }
 else {
        final ClassLoader loader=LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile());
        try {
          final Class aClass=Class.forName(item.getClassName(),true,loader);
          result=new RadAtomicComponent(editor.getModule(),aClass,id);
        }
 catch (        final Exception exc) {
          String errorDescription=Utils.validateJComponentClass(loader,item.getClassName(),true);
          if (errorDescription == null) {
            errorDescription=UIDesignerBundle.message("error.class.cannot.be.instantiated",item.getClassName());
            final String message=FormEditingUtil.getExceptionMessage(exc);
            if (message != null) {
              errorDescription+=": " + message;
            }
          }
          result=RadErrorComponent.create(editor.getModule(),id,item.getClassName(),null,errorDescription);
        }
      }
    }
  }
  result.init(editor,item);
  return result;
}
