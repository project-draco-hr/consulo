{
  myEditor.getActiveDecorationLayer().removeFeedback();
  final ComponentItem item=myPalette.getActiveItem();
  final String id=myEditor.generateId();
  if (JScrollPane.class.getName().equals(item.getClassName())) {
    myInsertedComponent=new RadScrollPane(myEditor.getModule(),id);
  }
 else   if (item == Palette.getInstance(myEditor.getProject()).getPanelItem()) {
    myInsertedComponent=new RadContainer(myEditor.getModule(),id);
  }
 else {
    if (VSpacer.class.getName().equals(item.getClassName())) {
      myInsertedComponent=new RadVSpacer(myEditor.getModule(),id);
    }
 else     if (HSpacer.class.getName().equals(item.getClassName())) {
      myInsertedComponent=new RadHSpacer(myEditor.getModule(),id);
    }
 else     if (JTabbedPane.class.getName().equals(item.getClassName())) {
      myInsertedComponent=new RadTabbedPane(myEditor.getModule(),id);
    }
 else     if (JSplitPane.class.getName().equals(item.getClassName())) {
      myInsertedComponent=new RadSplitPane(myEditor.getModule(),id);
    }
 else {
      final ClassLoader loader=LoaderFactory.getInstance(myEditor.getProject()).getLoader(myEditor.getFile());
      try {
        final Class aClass=Class.forName(item.getClassName(),true,loader);
        myInsertedComponent=new RadAtomicComponent(myEditor.getModule(),aClass,id);
      }
 catch (      final Exception exc) {
        String errorDescription=Utils.validateJComponentClass(loader,item.getClassName());
        if (errorDescription == null) {
          errorDescription=UIDesignerBundle.message("error.class.cannot.be.instantiated",item.getClassName());
          final String message=FormEditingUtil.getExceptionMessage(exc);
          if (message != null) {
            errorDescription+=": " + message;
          }
        }
        myInsertedComponent=RadErrorComponent.create(myEditor.getModule(),id,item.getClassName(),null,errorDescription);
      }
    }
  }
  myInsertedComponent.init(item);
  myEditor.setDesignTimeInsets(2);
  final GridInsertLocation location=GridInsertProcessor.getGridInsertLocation(myEditor,e.getX(),e.getY(),0);
  if (FormEditingUtil.canDrop(myEditor,e.getX(),e.getY(),1) || location.getMode() != GridInsertLocation.GridInsertMode.None) {
    CommandProcessor.getInstance().executeCommand(myEditor.getProject(),new Runnable(){
      public void run(){
        createBindingWhenDrop(myEditor,myInsertedComponent);
        final RadComponent[] components=new RadComponent[]{myInsertedComponent};
        if (location.getMode() == GridInsertLocation.GridInsertMode.None) {
          myDropInfo=FormEditingUtil.drop(myEditor,e.getX(),e.getY(),components,new int[]{0},new int[]{0});
        }
 else {
          myDropInfo=myGridInsertProcessor.processGridInsertOnDrop(location,components,null);
          if (myDropInfo == null) {
            return;
          }
        }
        FormEditingUtil.clearSelection(myEditor.getRootContainer());
        myInsertedComponent.setSelected(true);
        myInitialSize=null;
        myShouldSetPreferredSizeIfNotResized=true;
        if (myDropInfo.myTargetContainer.isXY()) {
          setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
          myInitialSize=myInsertedComponent.getSize();
          if (myInitialSize.width > 0 && myInitialSize.height > 0) {
            myShouldSetPreferredSizeIfNotResized=false;
          }
 else {
            myInitialSize=new Dimension(7,7);
          }
          Util.adjustSize(myInsertedComponent.getDelegee(),myInsertedComponent.getConstraints(),myInitialSize);
          myInsertedComponent.setSize(myInitialSize);
        }
        if (!GuiDesignerConfiguration.getInstance(myEditor.getProject()).IRIDA_LAYOUT_MODE && myInsertedComponent.getParent() instanceof RadRootContainer && myInsertedComponent instanceof RadAtomicComponent) {
          GridBuildUtil.convertToGrid(myEditor);
          FormEditingUtil.clearSelection(myEditor.getRootContainer());
          myInsertedComponent.setSelected(true);
        }
        myEditor.refresh();
        myInitialPoint=e.getPoint();
      }
    }
,null,null);
  }
}
