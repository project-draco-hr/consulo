{
  if (SvnConfiguration.UPGRADE_NONE.equals(upgradeMode)) {
    int format=0;
    try {
      format=SVNAdminAreaFactory.checkWC(path,false);
      if (format == 0 && path.getParentFile() != null) {
        format=SVNAdminAreaFactory.checkWC(path.getParentFile(),false);
      }
    }
 catch (    SVNException e) {
    }
    if (format == SVNAdminAreaFactory.WC_FORMAT_14) {
      return factories;
    }
    SVNAdminAreaFactory factory=null;
    for (    Object f : factories) {
      if (((SVNAdminAreaFactory)f).getSupportedVersion() == SVNAdminAreaFactory.WC_FORMAT_13) {
        factory=(SVNAdminAreaFactory)f;
        break;
      }
    }
    return Collections.singletonList(factory);
  }
 else   if (SvnConfiguration.UPGRADE_AUTO.equals(upgradeMode)) {
    return factories;
  }
 else   if (upgradeMode == null) {
    int format=0;
    try {
      format=SVNAdminAreaFactory.checkWC(path,false);
      if (format == 0 && path.getParentFile() != null) {
        format=SVNAdminAreaFactory.checkWC(path.getParentFile(),false);
      }
    }
 catch (    SVNException e) {
    }
    if (format == SVNAdminAreaFactory.WC_FORMAT_14) {
      return factories;
    }
    final String[] newMode=new String[]{null};
    try {
      if (SwingUtilities.isEventDispatchThread()) {
        displayUpgradeDialog(project,path,newMode);
      }
 else {
        SwingUtilities.invokeAndWait(new Runnable(){
          public void run(){
            displayUpgradeDialog(project,path,newMode);
          }
        }
);
      }
    }
 catch (    InterruptedException e) {
    }
catch (    InvocationTargetException e) {
    }
    config.setUpgradeMode(newMode[0]);
    return getFactories(newMode[0],path,factories,project,config);
  }
  return factories;
}
