{
  return new PsiElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    public void visitXmlTag(    final XmlTag tag){
      if (SCRIPT_TAG_NAME.equals(tag.getName()) || (tag instanceof HtmlTag && SCRIPT_TAG_NAME.equalsIgnoreCase(tag.getLocalName()))) {
        final ASTNode child=XmlChildRole.EMPTY_TAG_END_FINDER.findChild(tag.getNode());
        if (child != null) {
          final LocalQuickFix fix=new LocalQuickFix(){
            public String getName(){
              return XmlBundle.message("html.inspections.check.empty.script.tag.fix.message");
            }
            public void applyFix(            Project project,            ProblemDescriptor descriptor){
              final StringBuilder builder=new StringBuilder(tag.getText());
              builder.replace(builder.length() - 2,builder.length() - 1,"></" + SCRIPT_TAG_NAME + ">");
              try {
                final XmlTag tagFromText=tag.getManager().getElementFactory().createTagFromText(builder.toString());
                tag.replace(tagFromText);
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
            public String getFamilyName(){
              return getName();
            }
          }
;
          holder.registerProblem(tag,XmlBundle.message("html.inspections.check.empty.script.message"),fix);
        }
      }
    }
  }
;
}
