{
  final ArrayList<RadComponent> selectedComponents=FormEditingUtil.getSelectedComponents(myEditor);
  final JComponent rootContainerDelegee=myEditor.getRootContainer().getDelegee();
  if (selectedComponents.size() == 0) {
    moveToFirstComponent(rootContainerDelegee);
    return;
  }
  final RadComponent selectedComponent=selectedComponents.get(0);
  if (moveSelectionByGrid(selectedComponent)) {
    return;
  }
  final ArrayList<RadComponent> components=new ArrayList<RadComponent>();
  final ArrayList<Point> points=new ArrayList<Point>();
  FormEditingUtil.iterate(myEditor.getRootContainer(),new FormEditingUtil.ComponentVisitor<RadComponent>(){
    public boolean visit(    final RadComponent component){
      if (component instanceof RadAtomicComponent) {
        if (selectedComponent.equals(component)) {
          return true;
        }
        components.add(component);
        final JComponent _delegee=component.getDelegee();
        final Point p=SwingUtilities.convertPoint(_delegee,new Point(0,0),rootContainerDelegee);
        p.x+=_delegee.getWidth() / 2;
        p.y+=_delegee.getHeight() / 2;
        points.add(p);
      }
      return true;
    }
  }
);
  if (components.size() == 0) {
    return;
  }
  final Point source=SwingUtilities.convertPoint(selectedComponent.getDelegee(),new Point(0,0),rootContainerDelegee);
  source.x+=selectedComponent.getDelegee().getWidth() / 2;
  source.y+=selectedComponent.getDelegee().getHeight() / 2;
  int min=Integer.MAX_VALUE;
  int nextSelectedIndex=-1;
  for (int i=points.size() - 1; i >= 0; i--) {
    final int distance=calcDistance(source,points.get(i));
    if (distance < min) {
      min=distance;
      nextSelectedIndex=i;
    }
  }
  if (min == Integer.MAX_VALUE) {
    return;
  }
  LOG.assertTrue(nextSelectedIndex != -1);
  final RadComponent component=components.get(nextSelectedIndex);
  GuiEditorUtil.selectSingleComponent(component);
}
