{
  super(view.getProject(),false);
  myView=view;
  myTagField=new MyTextFieldWithAutoCompletion(view.getProject()){
    @Override public void showLookup(){
      parseExistingMessagesIfNecessary();
      myTagField.setVariants(Arrays.asList(toLookupElements(myUsedTags)));
      super.showLookup();
    }
  }
;
  myTagFieldWrapper.add(myTagField);
  myLogTagLabel.setLabelFor(myTagField);
  myPidField=new MyTextFieldWithAutoCompletion(view.getProject()){
    @Override public void showLookup(){
      parseExistingMessagesIfNecessary();
      myPidField.setVariants(myUsedPids);
      super.showLookup();
    }
  }
;
  myPidField.setComparator(new Comparator<LookupElement>(){
    @Override public int compare(    LookupElement e1,    LookupElement e2){
      final int pid1=Integer.parseInt(e1.getLookupString());
      final int pid2=Integer.parseInt(e2.getLookupString());
      return Comparing.compare(pid1,pid2);
    }
  }
);
  myPidFieldWrapper.add(myPidField);
  myLogLevelCombo.setModel(new EnumComboBoxModel<Log.LogLevel>(Log.LogLevel.class));
  myLogLevelCombo.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value != null) {
        value=StringUtil.capitalize(((Log.LogLevel)value).getStringValue().toLowerCase());
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  init();
  if (entry != null) {
    myEntry=entry;
    reset();
  }
 else {
    myEntry=new AndroidConfiguredLogFilters.MyFilterEntry();
  }
}
