{
  super(view.getProject(),false);
  myView=view;
  final Project project=view.getProject();
  myTagField=new TextFieldWithAutoCompletion<String>(project,new TextFieldWithAutoCompletion.StringsCompletionProvider(null,null){
    @NotNull @Override public Collection<String> getItems(    String prefix,    boolean cached,    CompletionParameters parameters){
      parseExistingMessagesIfNecessary();
      setItems(Arrays.asList(myUsedTags));
      return super.getItems(prefix,cached,parameters);
    }
  }
,true);
  myTagFieldWrapper.add(myTagField);
  myLogTagLabel.setLabelFor(myTagField);
  myPidField=new TextFieldWithAutoCompletion<String>(project,new TextFieldWithAutoCompletion.StringsCompletionProvider(null,null){
    @NotNull @Override public Collection<String> getItems(    String prefix,    boolean cached,    CompletionParameters parameters){
      parseExistingMessagesIfNecessary();
      setItems(Arrays.asList(myUsedPids));
      return super.getItems(prefix,cached,parameters);
    }
    @Override public int compare(    String item1,    String item2){
      final int pid1=Integer.parseInt(item1);
      final int pid2=Integer.parseInt(item2);
      return Comparing.compare(pid1,pid2);
    }
  }
,true);
  myPidFieldWrapper.add(myPidField);
  myLogLevelCombo.setModel(new EnumComboBoxModel<Log.LogLevel>(Log.LogLevel.class));
  myLogLevelCombo.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(StringUtil.capitalize(((Log.LogLevel)value).getStringValue().toLowerCase()));
      }
    }
  }
);
  init();
  if (entry != null) {
    myEntry=entry;
    reset();
  }
 else {
    myEntry=new AndroidConfiguredLogFilters.MyFilterEntry();
  }
}
