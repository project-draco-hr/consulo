{
  super.visitNewExpression(expression);
  if (expression.getAnonymousClass() != null) {
    final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
    final PsiJavaCodeReferenceElement baseClassReference=anonymousClass.getBaseClassReference();
    final PsiElement referent=baseClassReference.resolve();
    if (referent == null) {
      return;
    }
    final PsiClass referencedClass=(PsiClass)referent;
    final String referencedClassName=referencedClass.getQualifiedName();
    if (!"java.lang.Thread".equals(referencedClassName)) {
      return;
    }
    if (definesRun(anonymousClass)) {
      return;
    }
    final PsiExpressionList argumentList=expression.getArgumentList();
    if (argumentList == null) {
      return;
    }
    final PsiExpression[] args=argumentList.getExpressions();
    if (args == null) {
      return;
    }
    for (int i=0; i < args.length; i++) {
      if (TypeUtils.expressionHasTypeOrSubtype("java.lang.Runnable",args[i])) {
        return;
      }
    }
    registerError(baseClassReference);
  }
 else {
    final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
    if (classReference == null) {
      return;
    }
    final PsiElement referent=classReference.resolve();
    if (referent == null) {
      return;
    }
    final PsiClass referencedClass=(PsiClass)referent;
    final String referencedClassName=referencedClass.getQualifiedName();
    if (!"java.lang.Thread".equals(referencedClassName)) {
      return;
    }
    final PsiExpressionList argumentList=expression.getArgumentList();
    if (argumentList == null) {
      return;
    }
    final PsiExpression[] args=argumentList.getExpressions();
    if (args == null) {
      return;
    }
    for (int i=0; i < args.length; i++) {
      if (TypeUtils.expressionHasTypeOrSubtype("java.lang.Runnable",args[i])) {
        return;
      }
    }
    registerError(classReference);
  }
}
