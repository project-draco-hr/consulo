{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(element);
  if (!(parent instanceof PsiPolyadicExpression)) {
    return;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operands.length != 2) {
    return;
  }
  PsiExpression operand=ParenthesesUtils.stripParentheses(operands[1]);
  if (operand instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)operand;
    if (!JavaTokenType.EXCL.equals(prefixExpression.getOperationTokenType())) {
      return;
    }
    operand=ParenthesesUtils.stripParentheses(prefixExpression.getOperand());
  }
  if (!(operand instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)operand;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType type=argument.getType();
  final String newQualifierText;
  if (PsiType.BOOLEAN.equals(type)) {
    final Object value=ExpressionUtils.computeConstantExpression(argument);
    if (Boolean.TRUE.equals(value)) {
      newQualifierText="java.lang.Boolean.TRUE";
    }
 else     if (Boolean.FALSE.equals(value)) {
      newQualifierText="java.lang.Boolean.FALSE";
    }
 else {
      newQualifierText="java.lang.Boolean.valueOf(" + argument.getText() + ")";
    }
  }
 else   if (PsiType.BYTE.equals(type)) {
    newQualifierText="java.lang.Byte.valueOf(" + argument.getText() + ')';
  }
 else   if (PsiType.SHORT.equals(type)) {
    newQualifierText="java.lang.Short.valueOf(" + argument.getText() + ')';
  }
 else   if (PsiType.INT.equals(type)) {
    newQualifierText="java.lang.Integer.valueOf(" + argument.getText() + ')';
  }
 else   if (PsiType.LONG.equals(type)) {
    newQualifierText="java.lang.Long.valueOf(" + argument.getText() + ')';
  }
 else   if (PsiType.FLOAT.equals(type)) {
    newQualifierText="java.lang.Float.valueOf(" + argument.getText() + ')';
  }
 else   if (PsiType.DOUBLE.equals(type)) {
    newQualifierText="java.lang.Double.valueOf(" + argument.getText() + ')';
  }
 else {
    newQualifierText=argument.getText();
  }
  replaceExpression(polyadicExpression,newQualifierText + "." + referenceName+ "("+ qualifier.getText()+ ")");
}
