{
  final Ref<PsiExpression> selectedExpression=Ref.create(null);
  final Ref<TextRange> currentRange=Ref.create(null);
  PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable(){
    public void run(){
      final int offset=calculateOffset(editor,point);
      PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
      if (psiFile == null || !psiFile.isValid())       return;
      int selectionStart=editor.getSelectionModel().getSelectionStart();
      int selectionEnd=editor.getSelectionModel().getSelectionEnd();
      if ((type == ValueHintType.MOUSE_CLICK_HINT || type == ValueHintType.MOUSE_ALT_OVER_HINT) && (selectionStart <= offset && offset <= selectionEnd)) {
        PsiElement ctx=(selectionStart > 0) ? psiFile.findElementAt(selectionStart - 1) : psiFile.findElementAt(selectionStart);
        try {
          String text=editor.getSelectionModel().getSelectedText();
          if (text != null && ctx != null) {
            selectedExpression.set(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(text,ctx));
            currentRange.set(new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd()));
          }
        }
 catch (        IncorrectOperationException e) {
        }
      }
      if (currentRange.get() == null) {
        PsiElement elementAtCursor=psiFile.findElementAt(offset);
        if (elementAtCursor == null)         return;
        Pair<PsiExpression,TextRange> pair=findExpression(elementAtCursor);
        if (pair == null)         return;
        selectedExpression.set(pair.getFirst());
        currentRange.set(pair.getSecond());
      }
    }
  }
);
  return Pair.create(selectedExpression.get(),currentRange.get());
}
