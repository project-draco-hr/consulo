{
  String url="/projects/" + myProjectId + "/issues.xml?";
  final boolean hasKey=!StringUtil.isEmpty(myAPIKey) && !isUseHttpAuthentication();
  if (hasKey) {
    url+="key=" + myAPIKey;
  }
  if (hasKey)   url+="&";
  url+=encodeUrl("fields[]") + "=status_id&" + encodeUrl("operators[status_id]")+ "=o&"+ encodeUrl("values[status_id][]")+ "=1";
  final boolean hasQuery=!StringUtil.isEmpty(query);
  if (hasQuery) {
    url+="&" + encodeUrl("fields[]") + "=subject&"+ encodeUrl("operators[subject]")+ "="+ encodeUrl("~")+ "&"+ encodeUrl("values[subject][]")+ "="+ encodeUrl(query);
  }
  if (max >= 0) {
    url+="&limit=" + encodeUrl(String.valueOf(max));
  }
  HttpMethod method=doREST(url,false);
  InputStream stream=method.getResponseBodyAsStream();
  Element element=new SAXBuilder(false).build(stream).getRootElement();
  if (!"issues".equals(element.getName())) {
    LOG.warn("Error fetching issues for: " + url + ", HTTP status code: "+ method.getStatusCode());
    throw new Exception("Error fetching issues for: " + url + ", HTTP status code: "+ method.getStatusCode()+ "\n"+ element.getText());
  }
  return element.getChildren("issue");
}
