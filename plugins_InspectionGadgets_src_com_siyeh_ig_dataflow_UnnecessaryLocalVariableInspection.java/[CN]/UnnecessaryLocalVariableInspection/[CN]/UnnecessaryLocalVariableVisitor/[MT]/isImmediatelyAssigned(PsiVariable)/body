{
  final PsiCodeBlock containingScope=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  if (containingScope == null) {
    return false;
  }
  final PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(variable,PsiDeclarationStatement.class);
  if (declarationStatement == null) {
    return false;
  }
  PsiStatement nextStatement=null;
  int followingStatementNumber=0;
  final PsiStatement[] statements=containingScope.getStatements();
  for (int i=0; i < statements.length - 1; i++) {
    if (statements[i].equals(declarationStatement)) {
      nextStatement=statements[i + 1];
      followingStatementNumber=i + 2;
    }
  }
  if (nextStatement == null) {
    return false;
  }
  if (!(nextStatement instanceof PsiExpressionStatement)) {
    return false;
  }
  final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)nextStatement;
  final PsiExpression expression=expressionStatement.getExpression();
  if (!(expression instanceof PsiAssignmentExpression)) {
    return false;
  }
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
  final PsiExpression rhs=assignmentExpression.getRExpression();
  if (rhs == null) {
    return false;
  }
  if (!(rhs instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)rhs;
  final PsiElement referent=reference.resolve();
  if (referent == null || !referent.equals(variable)) {
    return false;
  }
  final PsiExpression lhs=assignmentExpression.getLExpression();
  if (VariableAccessUtils.variableIsUsed(variable,lhs)) {
    return false;
  }
  for (int i=followingStatementNumber; i < statements.length; i++) {
    if (VariableAccessUtils.variableIsUsed(variable,statements[i])) {
      return false;
    }
  }
  return true;
}
