{
  if (!myBuffer.isEmpty()) {
    return myBuffer.remove(0);
  }
  final TextRange textRange;
  Fragment fragment=null;
  while (myFragmentsIterator.hasNext()) {
    fragment=myFragmentsIterator.next();
    final TextDiffTypeEnum type=fragment.getType();
    if ((!myIgnoreFragmentsType) && ((type == null) || TextDiffTypeEnum.DELETED.equals(type) || TextDiffTypeEnum.NONE.equals(type)))     continue;
    break;
  }
  if (fragment == null)   return null;
  textRange=fragment.getRange(FragmentSide.SIDE2);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      final int startLine=myDocument.getLineNumber(textRange.getStartOffset());
      final int endLine=myDocument.getLineNumber(textRange.getEndOffset());
      for (int i=startLine; i <= endLine; i++) {
        String text=myDocument.getText().substring(myDocument.getLineStartOffset(i),myDocument.getLineEndOffset(i));
        myBuffer.add(new Pair<Integer,String>(i,text));
      }
    }
  }
);
  if (myBuffer.isEmpty())   return null;
  return myBuffer.remove(0);
}
