{
  Point textLoc=new Point();
  Border border=getBorder();
  if (getTitle() == null || getTitle().length() == 0) {
    if (border != null) {
      border.paintBorder(c,g,x,y,width,height);
    }
    return;
  }
  Rectangle grooveRect=new Rectangle(x + EDGE_SPACING,y + EDGE_SPACING,width - (EDGE_SPACING * 2),height - (EDGE_SPACING * 2));
  Font font=g.getFont();
  Color color=g.getColor();
  g.setFont(getFont(c));
  JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
  FontMetrics fm=SwingUtilities2.getFontMetrics(jc,g);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  int diff;
  int stringWidth=SwingUtilities2.stringWidth(jc,fm,getTitle());
  Insets insets;
  if (border != null) {
    insets=border.getBorderInsets(c);
  }
 else {
    insets=new Insets(0,0,0,0);
  }
  int titlePos=getTitlePosition();
switch (titlePos) {
case ABOVE_TOP:
    diff=ascent + descent + (Math.max(EDGE_SPACING,TEXT_SPACING * 2) - EDGE_SPACING);
  grooveRect.y+=diff;
grooveRect.height-=diff;
textLoc.y=grooveRect.y - (descent + TEXT_SPACING);
break;
case TOP:
case DEFAULT_POSITION:
diff=Math.max(0,((ascent / 2) + TEXT_SPACING) - EDGE_SPACING);
grooveRect.y+=diff;
grooveRect.height-=diff;
textLoc.y=(grooveRect.y - descent) + (insets.top + ascent + descent) / 2;
break;
case BELOW_TOP:
textLoc.y=grooveRect.y + insets.top + ascent+ TEXT_SPACING;
break;
case ABOVE_BOTTOM:
textLoc.y=(grooveRect.y + grooveRect.height) - (insets.bottom + descent + TEXT_SPACING);
break;
case BOTTOM:
grooveRect.height-=fontHeight / 2;
textLoc.y=((grooveRect.y + grooveRect.height) - descent) + ((ascent + descent) - insets.bottom) / 2;
break;
case BELOW_BOTTOM:
grooveRect.height-=fontHeight;
textLoc.y=grooveRect.y + grooveRect.height + ascent+ TEXT_SPACING;
break;
}
int justification=getTitleJustification();
if (c.getComponentOrientation().isLeftToRight()) {
if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) {
justification=LEFT;
}
 else if (justification == TRAILING) {
justification=RIGHT;
}
}
 else {
if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) {
justification=RIGHT;
}
 else if (justification == TRAILING) {
justification=LEFT;
}
}
switch (justification) {
case LEFT:
textLoc.x=grooveRect.x + TEXT_INSET_H + insets.left;
break;
case RIGHT:
textLoc.x=(grooveRect.x + grooveRect.width) - (stringWidth + TEXT_INSET_H + insets.right);
break;
case CENTER:
textLoc.x=grooveRect.x + ((grooveRect.width - stringWidth) / 2);
break;
}
if (border != null) {
if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) {
Rectangle clipRect=new Rectangle();
Rectangle saveClip=g.getClipBounds();
clipRect.setBounds(saveClip);
if (computeIntersection2(clipRect,x,y,textLoc.x - 1 - x,height)) {
g.setClip(clipRect);
border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);
}
clipRect.setBounds(saveClip);
if (computeIntersection2(clipRect,textLoc.x + stringWidth + 1,y,x + width - (textLoc.x + stringWidth + 1),height)) {
g.setClip(clipRect);
border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);
}
if (titlePos == TOP || titlePos == DEFAULT_POSITION) {
clipRect.setBounds(saveClip);
if (computeIntersection2(clipRect,textLoc.x - 1,textLoc.y + descent,stringWidth + 2,y + height - textLoc.y - descent)) {
g.setClip(clipRect);
border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);
}
}
 else {
clipRect.setBounds(saveClip);
if (computeIntersection2(clipRect,textLoc.x - 1,y,stringWidth + 2,textLoc.y - ascent - y)) {
g.setClip(clipRect);
border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);
}
}
g.setClip(saveClip);
}
 else {
border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);
}
}
g.setColor(getTitleColor());
SwingUtilities2.drawString(jc,g,getTitle(),textLoc.x,textLoc.y);
final int index=myOriginalTitle.indexOf('&');
if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) {
int x0=SwingUtilities2.stringWidth(jc,fm,getTitle().substring(0,index));
int x1=SwingUtilities2.stringWidth(jc,fm,getTitle().substring(0,index + 1));
((Graphics2D)g).setPaint(getTitleColor());
g.drawLine(textLoc.x + x0 - 1,textLoc.y + 1,textLoc.x + x1 - 1,textLoc.y + 1);
((Graphics2D)g).setPaint(color);
}
g.setFont(font);
g.setColor(color);
}
