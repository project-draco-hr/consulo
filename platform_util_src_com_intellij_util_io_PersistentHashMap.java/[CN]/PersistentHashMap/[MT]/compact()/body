{
synchronized (myEnumerator) {
    final long now=System.currentTimeMillis();
    final String newPath=getDataFile(myEnumerator.myFile).getPath() + ".new";
    final PersistentHashMapValueStorage newStorage=PersistentHashMapValueStorage.create(newPath);
    myValueStorage.switchToCompactionMode();
    myLiveAndGarbageKeysCounter=0;
    myReadCompactionGarbageSize=0;
    traverseAllRecords(new PersistentEnumerator.RecordsProcessor(){
      @Override public boolean process(      final int keyId) throws IOException {
        final long record=readValueId(keyId);
        if (record != NULL_ADDR) {
          PersistentHashMapValueStorage.ReadResult readResult=myValueStorage.readBytes(record);
          long value=newStorage.appendBytes(readResult.buffer,0,readResult.buffer.length,0);
          updateValueId(keyId,value,record,null,getCurrentKey());
          myLiveAndGarbageKeysCounter+=LIVE_KEY_MASK;
        }
        return true;
      }
    }
);
    myValueStorage.dispose();
    newStorage.dispose();
    FileUtil.rename(new File(newPath),getDataFile(myEnumerator.myFile));
    myValueStorage=PersistentHashMapValueStorage.create(getDataFile(myEnumerator.myFile).getPath());
    LOG.info("Compacted " + myEnumerator.myFile.getPath() + " in "+ (System.currentTimeMillis() - now)+ "ms.");
    myEnumerator.putMetaData(myLiveAndGarbageKeysCounter);
  }
}
