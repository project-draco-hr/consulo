{
  RefactoringTransaction transaction=getTransaction();
  final RefactoringElementListener elementListener=transaction == null ? null : transaction.getElementListener(myChangeInfo.getMethod());
  final String fqn=CopyReferenceAction.elementToFqn(myChangeInfo.getMethod());
  if (fqn != null) {
    UndoableAction action=new BasicUndoableAction(){
      public void undo(){
        if (elementListener instanceof UndoRefactoringElementListener) {
          ((UndoRefactoringElementListener)elementListener).undoElementMovedOrRenamed(myChangeInfo.getMethod(),fqn);
        }
      }
      @Override public void redo(){
      }
    }
;
    UndoManager.getInstance(myProject).undoableActionPerformed(action);
  }
  try {
    final ChangeSignatureUsageProcessor[] processors=ChangeSignatureUsageProcessor.EP_NAME.getExtensions();
    final ResolveSnapshotProvider resolveSnapshotProvider=myChangeInfo.isParameterNamesChanged() ? VariableInplaceRenamer.INSTANCE.forLanguage(myChangeInfo.getMethod().getLanguage()) : null;
    final List<ResolveSnapshotProvider.ResolveSnapshot> snapshots=new ArrayList<ResolveSnapshotProvider.ResolveSnapshot>();
    for (    ChangeSignatureUsageProcessor processor : processors) {
      if (resolveSnapshotProvider != null) {
        processor.registerConflictResolvers(snapshots,resolveSnapshotProvider,usages,myChangeInfo);
      }
    }
    for (    UsageInfo usage : usages) {
      for (      ChangeSignatureUsageProcessor processor : processors) {
        if (processor.processUsage(myChangeInfo,usage,true,usages))         break;
      }
    }
    LOG.assertTrue(myChangeInfo.getMethod().isValid());
    for (    ChangeSignatureUsageProcessor processor : processors) {
      if (processor.processPrimaryMethod(myChangeInfo))       break;
    }
    for (    UsageInfo usage : usages) {
      for (      ChangeSignatureUsageProcessor processor : processors) {
        if (processor.processUsage(myChangeInfo,usage,false,usages))         break;
      }
    }
    if (!snapshots.isEmpty()) {
      for (      ParameterInfo parameterInfo : myChangeInfo.getNewParameters()) {
        for (        ResolveSnapshotProvider.ResolveSnapshot snapshot : snapshots) {
          snapshot.apply(parameterInfo.getName());
        }
      }
    }
    final PsiElement method=myChangeInfo.getMethod();
    LOG.assertTrue(method.isValid());
    if (elementListener != null && myChangeInfo.isNameChanged()) {
      elementListener.elementRenamed(method);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
