{
  PsiElementFactory factory=field.getManager().getElementFactory();
  Project project=field.getProject();
  String name=field.getName();
  String getName=suggestGetterName(project,field);
  try {
    PsiMethod getMethod=factory.createMethod(getName,field.getType());
    getMethod.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      getMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
    }
    PsiAnnotation[] annotations=field.getModifierList().getAnnotations();
    for (    PsiAnnotation ann : annotations) {
      final String qName=ann.getQualifiedName();
      if (AnnotationUtil.NULLABLE.equals(qName) || AnnotationUtil.NOT_NULL.equals(qName)) {
        final PsiAnnotation annotation=factory.createAnnotationFromText("@" + qName,getMethod);
        getMethod.getModifierList().addAfter(annotation,null);
        break;
      }
    }
    PsiCodeBlock body=factory.createCodeBlockFromText("{\nreturn " + name + ";\n}",null);
    getMethod.getBody().replace(body);
    getMethod=(PsiMethod)CodeStyleManager.getInstance(project).reformat(getMethod);
    return getMethod;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return null;
  }
}
