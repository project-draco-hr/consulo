{
  PsiWildcardType wildcardToCapture=null;
  PsiType lowerBound=PsiType.NULL;
  PsiType upperBound=PsiType.NULL;
  if (parameters.length > 0) {
    for (int j=0; j < arguments.length; j++) {
      PsiExpression argument=arguments[j];
      if (argument instanceof PsiMethodCallExpression && myBlockedForInferenceMethodCalls.get().contains(argument))       continue;
      final PsiParameter parameter=parameters[Math.min(j,parameters.length - 1)];
      if (j >= parameters.length && !parameter.isVarArgs())       break;
      PsiType parameterType=parameter.getType();
      PsiType argumentType=argument.getType();
      if (argumentType == null)       continue;
      if (parameterType instanceof PsiEllipsisType) {
        parameterType=((PsiEllipsisType)parameterType).getComponentType();
        if (arguments.length == parameters.length && argumentType instanceof PsiArrayType && !(((PsiArrayType)argumentType).getComponentType() instanceof PsiPrimitiveType)) {
          argumentType=((PsiArrayType)argumentType).getComponentType();
        }
      }
      final Pair<PsiType,ConstraintType> currentSubstitution=getSubstitutionForTypeParameterConstraint(typeParameter,parameterType,argumentType,true,PsiUtil.getLanguageLevel(argument));
      if (currentSubstitution == null)       continue;
      if (currentSubstitution == FAILED_INFERENCE) {
        return getFailedInferenceConstraint(typeParameter);
      }
      final ConstraintType constraintType=currentSubstitution.getSecond();
      final PsiType type=currentSubstitution.getFirst();
      if (type == null)       return new Pair<PsiType,ConstraintType>(null,ConstraintType.EQUALS);
switch (constraintType) {
case EQUALS:
        if (!(type instanceof PsiWildcardType))         return currentSubstitution;
      if (wildcardToCapture != null)       return getFailedInferenceConstraint(typeParameter);
    wildcardToCapture=(PsiWildcardType)type;
  break;
case SUPERTYPE:
if (PsiType.NULL.equals(lowerBound)) {
  lowerBound=type;
}
 else if (!lowerBound.equals(type)) {
  lowerBound=GenericsUtil.getLeastUpperBound(lowerBound,type,typeParameter.getManager());
  if (lowerBound == null)   return getFailedInferenceConstraint(typeParameter);
}
break;
case SUBTYPE:
if (PsiType.NULL.equals(upperBound) || TypeConversionUtil.isAssignable(upperBound,type)) {
upperBound=type;
}
}
}
}
if (wildcardToCapture != null) {
if (lowerBound != PsiType.NULL) {
if (!wildcardToCapture.isAssignableFrom(lowerBound)) return getFailedInferenceConstraint(typeParameter);
if (wildcardToCapture.isSuper()) {
return new Pair<PsiType,ConstraintType>(wildcardToCapture,ConstraintType.SUPERTYPE);
}
lowerBound=GenericsUtil.getLeastUpperBound(lowerBound,wildcardToCapture,typeParameter.getManager());
}
 else {
if (upperBound != PsiType.NULL && !upperBound.isAssignableFrom(wildcardToCapture)) return getFailedInferenceConstraint(typeParameter);
return new Pair<PsiType,ConstraintType>(wildcardToCapture,ConstraintType.EQUALS);
}
}
if (lowerBound != PsiType.NULL) return new Pair<PsiType,ConstraintType>(lowerBound,ConstraintType.EQUALS);
if (parent != null) {
final Pair<PsiType,ConstraintType> constraint=inferMethodTypeParameterFromParent(typeParameter,partialSubstitutor,parent,forCompletion);
if (constraint != null) {
if (constraint.getSecond() != ConstraintType.SUBTYPE) {
return constraint;
}
if (upperBound != PsiType.NULL) {
return new Pair<PsiType,ConstraintType>(upperBound,ConstraintType.SUBTYPE);
}
return constraint;
}
}
if (upperBound != PsiType.NULL) return new Pair<PsiType,ConstraintType>(upperBound,ConstraintType.SUBTYPE);
return null;
}
