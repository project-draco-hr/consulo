{
  if (inBackground) {
    final Semaphore startSemaphore=new Semaphore();
    final Semaphore finishSemaphore=new Semaphore();
    final ProgressIndicator[] indicator=new ProgressIndicator[1];
    startSemaphore.up();
    finishSemaphore.up();
    ProgressManager.getInstance().run(new Task.Backgroundable(project,title,true){
      public void run(      @NotNull ProgressIndicator i){
        try {
          indicator[0]=i;
          startSemaphore.down();
          t.run(new MavenProgress(i));
        }
 catch (        MavenException e) {
          MavenLog.LOG.warn(e);
        }
catch (        CanceledException ignore) {
        }
 finally {
          finishSemaphore.down();
        }
      }
    }
);
    return new MavenTaskHandler(startSemaphore,finishSemaphore,indicator);
  }
 else {
    final MavenException[] mavenEx=new MavenException[1];
    final CanceledException[] canceledEx=new CanceledException[1];
    ProgressManager.getInstance().run(new Task.Modal(project,title,true){
      public void run(      @NotNull ProgressIndicator i){
        try {
          t.run(new MavenProgress(i));
        }
 catch (        MavenException e) {
          mavenEx[0]=e;
        }
catch (        CanceledException e) {
          canceledEx[0]=e;
        }
      }
    }
);
    if (mavenEx[0] != null)     throw mavenEx[0];
    if (canceledEx[0] != null)     throw canceledEx[0];
    return null;
  }
}
