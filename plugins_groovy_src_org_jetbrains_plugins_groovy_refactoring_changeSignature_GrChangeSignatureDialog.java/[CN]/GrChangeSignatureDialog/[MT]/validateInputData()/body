{
  if (!StringUtil.isJavaIdentifier(getNewName())) {
    showErrorHint(message("name.is.wrong",getNewName()));
    return false;
  }
  if (!checkType(myReturnTypeCodeFragment)) {
    showErrorHint(message("return.type.is.wrong"));
    return false;
  }
  for (  GrTableParameterInfo info : myParameterModel.getParameterInfos()) {
    if (!StringUtil.isJavaIdentifier(info.getName())) {
      showErrorHint(message("name.is.wrong",info.getName()));
    }
    if (!checkType(info.getTypeFragment())) {
      showErrorHint(message("type.for.parameter.is.incorrect",info.getName()));
      return false;
    }
    String defaultValue=info.getDefaultValue();
    if (info.getOldIndex() < 0 && (defaultValue == null || defaultValue.trim().length() == 0)) {
      showErrorHint(message("specify.default.value",info.getName()));
      return false;
    }
  }
  ThrownExceptionInfo[] exceptionInfos=myExceptionTableModel.getThrownExceptions();
  PsiTypeCodeFragment[] typeCodeFragments=myExceptionTableModel.getTypeCodeFragments();
  for (int i=0; i < exceptionInfos.length; i++) {
    ThrownExceptionInfo exceptionInfo=exceptionInfos[i];
    PsiTypeCodeFragment typeCodeFragment=typeCodeFragments[i];
    try {
      PsiType type=typeCodeFragment.getType();
      if (!(type instanceof PsiClassType)) {
        showErrorHint(GroovyRefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText()));
        return false;
      }
      PsiClassType throwable=JavaPsiFacade.getInstance(myMethod.getProject()).getElementFactory().createTypeByFQClassName("java.lang.Throwable",type.getResolveScope());
      if (!throwable.isAssignableFrom(type)) {
        showErrorHint(GroovyRefactoringBundle.message("changeSignature.not.throwable.type",typeCodeFragment.getText()));
        return false;
      }
      exceptionInfo.setType((PsiClassType)type);
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      showErrorHint(GroovyRefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText()));
      return false;
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      showErrorHint(GroovyRefactoringBundle.message("changeSignature.no.type.for.exception"));
      return false;
    }
  }
  return true;
}
