{
  if (!validateInputData()) {
    return;
  }
  stopEditing();
  String modifier="";
  if (myPublicRadioButton.isSelected()) {
    modifier=GrModifier.PUBLIC;
  }
 else   if (myPrivateRadioButton.isSelected()) {
    modifier=GrModifier.PRIVATE;
  }
 else   if (myProtectedRadioButton.isSelected()) {
    modifier=GrModifier.PROTECTED;
  }
  PsiType returnType=null;
  try {
    returnType=myReturnTypeCodeFragment.getType();
  }
 catch (  PsiTypeCodeFragment.TypeSyntaxException ignored) {
  }
catch (  PsiTypeCodeFragment.NoTypeException ignored) {
  }
  String newName=getNewName();
  final List<GrTableParameterInfo> tableParameterInfos=myParameterModel.getParameterInfos();
  final List<GrParameterInfo> parameterInfos=ContainerUtil.map(tableParameterInfos,new Function<GrTableParameterInfo,GrParameterInfo>(){
    public GrParameterInfo fun(    GrTableParameterInfo info){
      return info.generateParameterInfo();
    }
  }
);
  final ThrownExceptionInfo[] exceptionInfos=myExceptionTableModel.getThrownExceptions();
  invokeRefactoring(new GrChangeSignatureProcessor(myProject,new GrChangeInfoImpl(myMethod,modifier,returnType == null ? null : CanonicalTypes.createTypeWrapper(returnType),newName,parameterInfos,exceptionInfos,myDelegateRadioButton.isSelected())));
}
