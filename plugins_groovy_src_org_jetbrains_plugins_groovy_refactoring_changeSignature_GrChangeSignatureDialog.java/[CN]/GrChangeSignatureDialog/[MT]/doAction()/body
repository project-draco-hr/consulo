{
  if (!validateInputData()) {
    return;
  }
  TableUtil.stopEditing(myParameterTable);
  String modifier=myVisibilityPanel.getVisibility();
  PsiType returnType=null;
  try {
    returnType=myReturnTypeCodeFragment.getType();
  }
 catch (  PsiTypeCodeFragment.TypeSyntaxException ignored) {
  }
catch (  PsiTypeCodeFragment.NoTypeException ignored) {
  }
  String newName=getNewName();
  final List<GrTableParameterInfo> tableParameterInfos=myParameterModel.getParameterInfos();
  final List<GrParameterInfo> parameterInfos=ContainerUtil.map(tableParameterInfos,new Function<GrTableParameterInfo,GrParameterInfo>(){
    public GrParameterInfo fun(    GrTableParameterInfo info){
      return info.generateParameterInfo();
    }
  }
);
  final ThrownExceptionInfo[] exceptionInfos=myExceptionTableModel.getThrownExceptions();
  final CanonicalTypes.Type type=returnType == null ? null : CanonicalTypes.createTypeWrapper(returnType);
  final GrChangeInfoImpl info=new GrChangeInfoImpl(myMethod,modifier,type,newName,parameterInfos,exceptionInfos,myDelegateRadioButton.isSelected());
  invokeRefactoring(new GrChangeSignatureProcessor(myProject,info));
}
