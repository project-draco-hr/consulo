{
  saveAll();
  if (!ProjectLevelVcsManager.getInstance(project).checkAllFilesAreUnder(GitVcs.getInstance(project),affectedFiles))   return;
  final Map<VirtualFile,List<VirtualFile>> roots=GitUtil.sortFilesByVcsRoot(project,affectedFiles);
  boolean stashesFound=false;
  for (  VirtualFile root : roots.keySet()) {
    GitCommand command=new GitCommand(project,vcs.getSettings(),root);
    String[] stashList=command.stashList();
    if (stashList == null || stashList.length == 0)     continue;
    stashesFound=true;
    int stashIndex=Messages.showChooseDialog(GitBundle.getString("unstash.message"),GitBundle.getString("unstash.title"),stashList,stashList[0],Messages.getQuestionIcon());
    if (stashIndex < 0)     continue;
    GitCommandRunnable cmdr=new GitCommandRunnable(project,vcs.getSettings(),root);
    cmdr.setCommand(GitCommand.STASH_CMD);
    String stashName=stashList[stashIndex].split(":")[0];
    cmdr.setArgs(new String[]{"apply",stashName});
    ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.getString("unstashing.title"),false,project);
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"}) VcsException ex=cmdr.getException();
    if (ex != null) {
      GitUIUtil.showOperationError(project,ex,"git stash apply");
      break;
    }
  }
  if (!stashesFound) {
    Messages.showInfoMessage(project,GitBundle.getString("unstash.notfound.message"),GitBundle.getString("unstash.notfound.title"));
  }
}
