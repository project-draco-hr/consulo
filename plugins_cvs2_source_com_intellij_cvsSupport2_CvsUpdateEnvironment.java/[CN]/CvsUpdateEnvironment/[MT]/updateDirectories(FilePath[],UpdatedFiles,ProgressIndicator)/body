{
  CvsConfiguration cvsConfiguration=CvsConfiguration.getInstance(myProject);
  if (!CvsVcs2.getInstance(myProject).getUpdateOptions().getValue()) {
    cvsConfiguration.CLEAN_COPY=false;
    cvsConfiguration.RESET_STICKY=false;
  }
  try {
    final UpdateSettingsOnCvsConfiguration updateSettings=new UpdateSettingsOnCvsConfiguration(cvsConfiguration,cvsConfiguration.CLEAN_COPY,cvsConfiguration.RESET_STICKY);
    final UpdateHandler handler=CommandCvsHandler.createUpdateHandler(contentRoots,updateSettings,myProject,updatedFiles);
    handler.addCvsListener(new UpdatedFilesProcessor(updatedFiles));
    CvsOperationExecutor cvsOperationExecutor=new CvsOperationExecutor(true,myProject,ModalityState.defaultModalityState());
    cvsOperationExecutor.setShowErrors(false);
    cvsOperationExecutor.performActionSync(handler,new CvsOperationExecutorCallback(){
      public void executionFinished(      boolean successfully){
      }
      public void executionFinishedSuccessfully(){
      }
      public void executeInProgressAfterAction(      ModalityContext modaityContext){
      }
    }
);
    final CvsResult result=cvsOperationExecutor.getResult();
    return new UpdateSessionAdapter(result.getErrorsAndWarnings(),result.isCanceled() || !result.isLoggedIn()){
      public void onRefreshFilesCompleted(){
        if (!updatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID).isEmpty()) {
          invokeManualMerging(updatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID),myProject);
        }
      }
    }
;
  }
  finally {
    cvsConfiguration.CLEAN_COPY=false;
    cvsConfiguration.RESET_STICKY=false;
  }
}
