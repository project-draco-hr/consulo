{
  int absoluteStartOffset=usageInfo2UsageAdapter.getNavigationOffset();
  if (absoluteStartOffset == -1)   return TextChunk.EMPTY_ARRAY;
  Document visibleDocument=myDocument instanceof DocumentWindow ? ((DocumentWindow)myDocument).getDelegate() : myDocument;
  int visibleStartOffset=myDocument instanceof DocumentWindow ? ((DocumentWindow)myDocument).injectedToHost(absoluteStartOffset) : absoluteStartOffset;
  int lineNumber=myDocument.getLineNumber(absoluteStartOffset);
  int visibleLineNumber=visibleDocument.getLineNumber(visibleStartOffset);
  int visibleColumnNumber=visibleStartOffset - visibleDocument.getLineStartOffset(visibleLineNumber);
  final List<TextChunk> result=new ArrayList<TextChunk>();
  appendPrefix(result,visibleLineNumber,visibleColumnNumber);
  int fragmentToShowStart=myDocument.getLineStartOffset(lineNumber);
  int fragmentToShowEnd=fragmentToShowStart < myDocument.getTextLength() ? myDocument.getLineEndOffset(lineNumber) : 0;
  if (fragmentToShowStart > fragmentToShowEnd)   return TextChunk.EMPTY_ARRAY;
  final CharSequence chars=myDocument.getCharsSequence();
  if (fragmentToShowEnd - fragmentToShowStart > MAX_LINE_LENGTH_TO_SHOW) {
    final int lineStartOffset=fragmentToShowStart;
    fragmentToShowStart=Math.max(lineStartOffset,absoluteStartOffset - OFFSET_BEFORE_TO_SHOW_WHEN_LONG_LINE);
    final int lineEndOffset=fragmentToShowEnd;
    Segment segment=usageInfo2UsageAdapter.getUsageInfo().getSegment();
    int usage_length=segment != null ? segment.getEndOffset() - segment.getStartOffset() : 0;
    fragmentToShowEnd=Math.min(lineEndOffset,absoluteStartOffset + usage_length + OFFSET_AFTER_TO_SHOW_WHEN_LONG_LINE);
    if (usage_length > 0 && StringUtil.isJavaIdentifierStart(chars.charAt(absoluteStartOffset)) && StringUtil.isJavaIdentifierStart(chars.charAt(absoluteStartOffset + usage_length - 1))) {
      while (fragmentToShowEnd < lineEndOffset && StringUtil.isJavaIdentifierStart(chars.charAt(fragmentToShowEnd - 1)))       ++fragmentToShowEnd;
      while (fragmentToShowStart > lineStartOffset && StringUtil.isJavaIdentifierStart(chars.charAt(fragmentToShowStart)))       --fragmentToShowStart;
      if (fragmentToShowStart != lineStartOffset)       ++fragmentToShowStart;
      if (fragmentToShowEnd != lineEndOffset)       --fragmentToShowEnd;
    }
  }
  if (myDocument instanceof DocumentWindow) {
    List<TextRange> editable=InjectedLanguageManager.getInstance(file.getProject()).intersectWithAllEditableFragments(file,new TextRange(fragmentToShowStart,fragmentToShowEnd));
    for (    TextRange range : editable) {
      createTextChunks(usageInfo2UsageAdapter,chars,range.getStartOffset(),range.getEndOffset(),true,result);
    }
    return result.toArray(new TextChunk[result.size()]);
  }
  return createTextChunks(usageInfo2UsageAdapter,chars,fragmentToShowStart,fragmentToShowEnd,true,result);
}
