{
  final PsiNewExpression expression=(PsiNewExpression)descriptor.getPsiElement();
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final String text=argument.getText();
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(expression);
  @NonNls final String newExpression;
  if (PsiKeyword.TRUE.equals(text) || TRUE.equalsIgnoreCase(text)) {
    newExpression="java.lang.Boolean.TRUE";
  }
 else   if (PsiKeyword.FALSE.equals(text) || FALSE.equalsIgnoreCase(text)) {
    newExpression="java.lang.Boolean.FALSE";
  }
 else   if (languageLevel.equals(LanguageLevel.JDK_1_3)) {
    newExpression=buildText(argument,false);
  }
 else {
    final PsiClass booleanClass=ClassUtils.findClass(CommonClassNames.JAVA_LANG_BOOLEAN,argument);
    boolean methodFound=false;
    if (booleanClass != null) {
      final PsiMethod[] methods=booleanClass.findMethodsByName("valueOf",false);
      for (      PsiMethod method : methods) {
        final PsiParameterList parameterList=method.getParameterList();
        final PsiParameter[] parameters=parameterList.getParameters();
        if (parameters.length == 0) {
          continue;
        }
        final PsiParameter parameter=parameters[0];
        final PsiType type=parameter.getType();
        if (PsiType.BOOLEAN.equals(type)) {
          methodFound=true;
          break;
        }
      }
    }
    newExpression=buildText(argument,methodFound);
  }
  replaceExpression(expression,newExpression);
}
