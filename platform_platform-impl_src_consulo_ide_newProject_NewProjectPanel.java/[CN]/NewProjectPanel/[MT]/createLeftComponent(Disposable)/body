{
  NewModuleContext context=new NewModuleContext();
  NewModuleBuilder.EP_NAME.composite().setupContext(context);
  CollectionListModel<Object> model=new CollectionListModel<>();
  myList=new JBList<>(model);
  myList.setCellRenderer(new ColoredListCellRenderer<Object>(){
    @Override protected void customizeCellRenderer(    @NotNull JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setFont(UIUtil.getFont(UIUtil.FontSize.BIGGER,null));
      if (value instanceof NewModuleContext.Group) {
        setSeparator(StringUtil.nullize(((NewModuleContext.Group)value).getName()));
      }
 else       if (value instanceof NewModuleContext.Item) {
        setIcon(((NewModuleContext.Item)value).getIcon());
        append(((NewModuleContext.Item)value).getName());
      }
    }
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      Component component=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      Dimension preferredSize=component.getPreferredSize();
      component.setPreferredSize(new Dimension(preferredSize.width,JBUI.scale(25)));
      return component;
    }
  }
);
  NewModuleContext.Group[] groups=context.getGroups();
  for (  NewModuleContext.Group group : groups) {
    if (!(groups.length == 1 && group.getId().equals(NewModuleContext.UGROUPED))) {
      model.add(group);
    }
    for (    NewModuleContext.Item item : group.getItems()) {
      model.add(item);
    }
  }
  return ScrollPaneFactory.createScrollPane(myList,true);
}
