{
  if (type == null)   return null;
  return type.accept(new PsiTypeVisitor<PsiType>(){
    public PsiType visitClassType(    PsiClassType classType){
      final PsiClass aClass=classType.resolve();
      if (!(aClass instanceof PsiTypeParameter)) {
        return classType.rawType();
      }
 else {
        return typeParameterErasure((PsiTypeParameter)aClass);
      }
    }
    public PsiType visitWildcardType(    PsiWildcardType wildcardType){
      return wildcardType.getExtendsBound().accept(this);
    }
    public PsiType visitPrimitiveType(    PsiPrimitiveType primitiveType){
      return primitiveType;
    }
    public PsiType visitEllipsisType(    PsiEllipsisType ellipsisType){
      final PsiType componentType=ellipsisType.getComponentType();
      final PsiType newComponentType=componentType.accept(this);
      if (newComponentType == componentType)       return ellipsisType;
      return new PsiArrayType(newComponentType);
    }
    public PsiType visitArrayType(    PsiArrayType arrayType){
      final PsiType componentType=arrayType.getComponentType();
      final PsiType newComponentType=componentType.accept(this);
      if (newComponentType == componentType)       return arrayType;
      return newComponentType.createArrayType();
    }
  }
);
}
