{
  PsiSubstitutor rightSubstitutor=rightResult.getSubstitutor();
  PsiClass leftClass=leftResult.getElement();
  if (!leftClass.hasTypeParameters())   return true;
  final PsiSubstitutor substitutor;
  PsiClass rightClass=rightResult.getElement();
  if (leftClass.getManager().areElementsEquivalent(leftClass,rightClass)) {
    substitutor=rightSubstitutor;
  }
 else {
    substitutor=getSuperClassSubstitutor(leftClass,rightClass,rightSubstitutor);
  }
  Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator(leftClass);
  while (iterator.hasNext()) {
    PsiTypeParameter parameter=iterator.next();
    final PsiType typeLeft=leftResult.getSubstitutor().substitute(parameter);
    if (typeLeft == null)     continue;
    final PsiType typeRight=substitutor.substituteWithBoundsPromotion(parameter);
    if (typeRight == null) {
      return allowUncheckedConversion;
    }
    if (!typesAgree(typeLeft,typeRight))     return false;
  }
  return true;
}
