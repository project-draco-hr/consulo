{
  if (!superClass.hasTypeParameters())   return PsiSubstitutor.EMPTY;
  final PsiManager manager=superClass.getManager();
  if (PsiUtil.isRawSubstitutor(derivedClass,derivedSubstitutor)) {
    return manager.getElementFactory().createRawSubstitutor(superClass);
  }
  final PsiClass objectClass=manager.findClass("java.lang.Object",superClass.getResolveScope());
  if (manager.areElementsEquivalent(superClass,objectClass)) {
    return PsiSubstitutor.EMPTY;
  }
  PsiSubstitutor substitutor;
  final Set<PsiClass> visited=new THashSet<PsiClass>();
  if (derivedClass instanceof PsiAnonymousClass) {
    final PsiClassType baseType=((PsiAnonymousClass)derivedClass).getBaseClassType();
    final JavaResolveResult result=baseType.resolveGenerics();
    if (result.getElement() == null)     return null;
    substitutor=getSuperClassSubstitutorInner(superClass,(PsiClass)result.getElement(),derivedSubstitutor.putAll(result.getSubstitutor()),visited,manager);
  }
 else {
    substitutor=getSuperClassSubstitutorInner(superClass,derivedClass,derivedSubstitutor,visited,manager);
  }
  if (substitutor == null) {
    LOG.assertTrue(false,"Not inheritor: " + derivedClass + " super: "+ superClass);
  }
  return substitutor;
}
