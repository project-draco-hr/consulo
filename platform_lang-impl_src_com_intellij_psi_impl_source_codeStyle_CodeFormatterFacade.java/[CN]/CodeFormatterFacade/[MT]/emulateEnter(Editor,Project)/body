{
  final DataContext dataContext=prepareContext(editor.getComponent(),project);
  int caretOffset=editor.getCaretModel().getOffset();
  Document document=editor.getDocument();
  SelectionModel selectionModel=editor.getSelectionModel();
  int startSelectionOffset=0;
  int endSelectionOffset=0;
  boolean restoreSelection=selectionModel.hasSelection();
  if (restoreSelection) {
    startSelectionOffset=selectionModel.getSelectionStart();
    endSelectionOffset=selectionModel.getSelectionEnd();
    selectionModel.removeSelection();
  }
  int textLengthBeforeWrap=document.getTextLength();
  int lineCountBeforeWrap=document.getLineCount();
  DataManager.getInstance().saveInDataContext(dataContext,WRAP_LONG_LINE_DURING_FORMATTING_IN_PROGRESS_KEY,true);
  CommandProcessor commandProcessor=CommandProcessor.getInstance();
  try {
    Runnable command=new Runnable(){
      @Override public void run(){
        EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_ENTER).execute(editor,dataContext);
      }
    }
;
    if (commandProcessor.getCurrentCommand() == null) {
      commandProcessor.executeCommand(editor.getProject(),command,WRAP_LINE_COMMAND_NAME,null);
    }
 else {
      command.run();
    }
  }
  finally {
    DataManager.getInstance().saveInDataContext(dataContext,WRAP_LONG_LINE_DURING_FORMATTING_IN_PROGRESS_KEY,null);
  }
  if (restoreSelection) {
    int symbolsDiff=document.getTextLength() - textLengthBeforeWrap;
    int newSelectionStart=startSelectionOffset;
    int newSelectionEnd=endSelectionOffset;
    if (startSelectionOffset >= caretOffset) {
      newSelectionStart+=symbolsDiff;
    }
    if (endSelectionOffset >= caretOffset) {
      newSelectionEnd+=symbolsDiff;
    }
    selectionModel.setSelection(newSelectionStart,newSelectionEnd);
  }
  return document.getLineCount() - lineCountBeforeWrap;
}
