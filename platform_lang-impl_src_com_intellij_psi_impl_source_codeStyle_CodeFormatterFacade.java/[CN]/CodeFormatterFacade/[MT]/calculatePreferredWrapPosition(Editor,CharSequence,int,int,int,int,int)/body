{
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}
