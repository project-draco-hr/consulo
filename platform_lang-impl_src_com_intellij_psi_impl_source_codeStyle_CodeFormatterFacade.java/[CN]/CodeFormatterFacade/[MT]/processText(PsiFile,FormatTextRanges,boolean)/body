{
  final Project project=file.getProject();
  Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  if (document instanceof DocumentWindow) {
    file=InjectedLanguageUtil.getTopLevelFile(file);
    final DocumentWindow documentWindow=(DocumentWindow)document;
    for (    FormatTextRanges.FormatTextRange range : ranges.getRanges()) {
      range.setTextRange(documentWindow.injectedToHost(range.getTextRange()));
    }
    document=documentWindow.getDelegate();
  }
  final FormattingModelBuilder builder=LanguageFormatting.INSTANCE.forContext(file);
  if (builder != null) {
    if (file.getTextLength() > 0) {
      try {
        ranges.preprocess(file.getNode());
        if (doPostponedFormatting) {
          RangeMarker[] markers=new RangeMarker[ranges.getRanges().size()];
          int i=0;
          for (          FormatTextRanges.FormatTextRange range : ranges.getRanges()) {
            TextRange textRange=range.getTextRange();
            int start=textRange.getStartOffset();
            int end=textRange.getEndOffset();
            if (start >= 0 && end > start && end <= document.getTextLength()) {
              markers[i]=document.createRangeMarker(textRange);
              markers[i].setGreedyToLeft(true);
              markers[i].setGreedyToRight(true);
              i++;
            }
          }
          final PostprocessReformattingAspect component=file.getProject().getComponent(PostprocessReformattingAspect.class);
          component.doPostponedFormatting(file.getViewProvider());
          i=0;
          for (          FormatTextRanges.FormatTextRange range : ranges.getRanges()) {
            RangeMarker marker=markers[i];
            if (marker != null) {
              range.setTextRange(new TextRange(marker.getStartOffset(),marker.getEndOffset()));
              ((RangeMarkerEx)marker).dispose();
            }
            i++;
          }
        }
        final FormattingModel originalModel=builder.createModel(file,mySettings);
        final FormattingModel model=new DocumentBasedFormattingModel(originalModel.getRootBlock(),document,project,mySettings,file.getFileType(),file);
        FormatterEx.getInstanceEx().format(model,mySettings,mySettings.getIndentOptions(file.getFileType()),ranges);
        for (        FormatTextRanges.FormatTextRange range : ranges.getRanges()) {
          TextRange textRange=range.getTextRange();
          wrapLongLinesIfNecessary(file,document,textRange.getStartOffset(),textRange.getEndOffset());
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
