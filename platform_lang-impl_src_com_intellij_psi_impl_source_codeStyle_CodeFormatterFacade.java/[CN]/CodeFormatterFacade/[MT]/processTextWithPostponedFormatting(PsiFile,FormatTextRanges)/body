{
  final FileType fileType=myHelper.getFileType();
  final FormattingModelBuilder builder=LanguageFormatting.INSTANCE.forContext(file);
  if (builder != null) {
    if (file.getTextLength() > 0) {
      try {
        ranges.preprocess(file.getNode());
        final PostprocessReformattingAspect component=file.getProject().getComponent(PostprocessReformattingAspect.class);
        component.doPostponedFormatting(file.getViewProvider());
        Block rootBlock=builder.createModel(file,mySettings).getRootBlock();
        Project project=file.getProject();
        final FormattingModel model=new DocumentBasedFormattingModel(rootBlock,PsiDocumentManager.getInstance(project).getDocument(file),project,mySettings,fileType,file);
        printToConsole(rootBlock,model);
        FormatterEx.getInstanceEx().format(model,mySettings,mySettings.getIndentOptions(fileType),ranges);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
