{
  TextRange result=range;
  PsiElement psi=node.getPsi();
  if (!psi.isValid()) {
    for (    PreFormatProcessor processor : Extensions.getExtensions(PreFormatProcessor.EP_NAME)) {
      result=processor.process(node,result);
    }
    return result;
  }
  PsiFile file=psi.getContainingFile();
  PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(file.getProject());
  List<DocumentWindow> injectedDocuments=InjectedLanguageUtil.getCachedInjectedDocuments(file);
  if (!injectedDocuments.isEmpty()) {
    List<DocumentWindow> injectedDocumentsToUse=ContainerUtilRt.newArrayList(injectedDocuments);
    for (    DocumentWindow window : injectedDocumentsToUse) {
      if (!window.isValid()) {
        continue;
      }
      PsiFile injected=psiDocumentManager.getCachedPsiFile(window);
      if (injected != null) {
        int startHostOffset=window.injectedToHost(0);
        int endHostOffset=window.injectedToHost(window.getTextLength());
        int startInjectedOffset=range.getStartOffset() > startHostOffset ? startHostOffset - range.getStartOffset() : 0;
        int endInjectedOffset=injected.getTextLength();
        if (range.getEndOffset() < endHostOffset) {
          endInjectedOffset-=endHostOffset - range.getEndOffset();
        }
        final TextRange initialInjectedRange=TextRange.create(startInjectedOffset,endInjectedOffset);
        TextRange injectedRange=initialInjectedRange;
        for (        PreFormatProcessor processor : Extensions.getExtensions(PreFormatProcessor.EP_NAME)) {
          injectedRange=processor.process(injected.getNode(),injectedRange);
        }
        if ((initialInjectedRange.getStartOffset() > injectedRange.getStartOffset() && initialInjectedRange.getStartOffset() > 0) || (initialInjectedRange.getEndOffset() < injectedRange.getEndOffset() && initialInjectedRange.getEndOffset() < injected.getTextLength())) {
          range=TextRange.create(range.getStartOffset() + injectedRange.getStartOffset() - initialInjectedRange.getStartOffset(),range.getEndOffset() + initialInjectedRange.getEndOffset() - injectedRange.getEndOffset());
        }
      }
    }
  }
  for (  PreFormatProcessor processor : Extensions.getExtensions(PreFormatProcessor.EP_NAME)) {
    result=processor.process(node,result);
  }
  return result;
}
