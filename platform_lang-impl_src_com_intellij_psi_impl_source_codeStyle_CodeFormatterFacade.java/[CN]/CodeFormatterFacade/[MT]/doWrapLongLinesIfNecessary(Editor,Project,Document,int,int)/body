{
  int startOffsetToUse=Math.min(document.getTextLength(),Math.max(0,startOffset));
  int endOffsetToUse=Math.min(document.getTextLength(),Math.max(0,endOffset));
  LineWrapPositionStrategy strategy=LanguageLineWrapPositionStrategy.INSTANCE.forEditor(editor);
  CharSequence text=document.getCharsSequence();
  int startLine=document.getLineNumber(startOffsetToUse);
  int endLine=document.getLineNumber(Math.max(0,endOffsetToUse - 1));
  int maxLine=Math.min(document.getLineCount(),endLine + 1);
  int tabSize=EditorUtil.getTabSize(editor);
  if (tabSize <= 0) {
    tabSize=1;
  }
  int spaceSize=EditorUtil.getSpaceWidth(Font.PLAIN,editor);
  int[] shifts=new int[2];
  for (int line=startLine; line < maxLine; line++) {
    int startLineOffset=document.getLineStartOffset(line);
    int endLineOffset=document.getLineEndOffset(line);
    final int preferredWrapPosition=calculatePreferredWrapPosition(editor,text,tabSize,spaceSize,startLineOffset,endLineOffset,endOffsetToUse);
    if (preferredWrapPosition < 0 || preferredWrapPosition >= endLineOffset) {
      continue;
    }
    if (preferredWrapPosition >= endOffsetToUse) {
      return;
    }
    int wrapOffset=strategy.calculateWrapPosition(document,editor.getProject(),Math.max(startLineOffset,startOffsetToUse),Math.min(endLineOffset,endOffsetToUse),preferredWrapPosition,false,false);
    if (wrapOffset < 0 || CharArrayUtil.shiftBackward(text,startLineOffset,wrapOffset - 1," \t") < startLineOffset) {
      continue;
    }
    editor.getCaretModel().moveToOffset(wrapOffset);
    emulateEnter(editor,project,shifts);
    if (shifts[1] - 1 >= wrapOffset - startLineOffset) {
      document.deleteString(wrapOffset,wrapOffset + shifts[1]);
    }
 else {
      maxLine+=shifts[0];
      endOffsetToUse+=shifts[1];
    }
  }
}
