{
  final PsiElement psiElement=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiMethodCallExpression.class);
  if (!(psiElement instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiClass newAssertClass=JavaPsiFacade.getInstance(project).findClass("org.junit.Assert",GlobalSearchScope.allScope(project));
  final PsiClass oldAssertClass=JavaPsiFacade.getInstance(project).findClass("junit.framework.Assert",GlobalSearchScope.allScope(project));
  if (newAssertClass == null) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)psiElement;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  final PsiElement usedImport=qualifierExpression instanceof PsiReferenceExpression ? ((PsiReferenceExpression)qualifierExpression).advancedResolve(true).getCurrentFileResolveScope() : methodExpression.advancedResolve(true).getCurrentFileResolveScope();
  final PsiMethod psiMethod=methodCallExpression.resolveMethod();
  final boolean isImportUnused=isImportBecomeUnused(methodCallExpression,usedImport,psiMethod);
  PsiImportStaticStatement staticStatement=null;
  if (qualifierExpression == null) {
    staticStatement=staticallyImported(oldAssertClass,methodExpression);
  }
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
  if (staticStatement == null) {
    methodExpression.setQualifierExpression(JavaPsiFacade.getElementFactory(project).createReferenceExpression(newAssertClass));
    if (isImportUnused && usedImport instanceof PsiImportStatementBase) {
      usedImport.delete();
    }
    styleManager.shortenClassReferences(methodExpression);
  }
 else {
    if (isImportUnused) {
      final PsiJavaCodeReferenceElement importReference=staticStatement.getImportReference();
      if (importReference != null) {
        if (staticStatement.isOnDemand()) {
          importReference.bindToElement(newAssertClass);
        }
 else {
          final PsiElement importQExpression=importReference.getQualifier();
          if (importQExpression instanceof PsiReferenceExpression) {
            ((PsiReferenceExpression)importQExpression).bindToElement(newAssertClass);
          }
        }
      }
    }
 else {
      methodExpression.setQualifierExpression(JavaPsiFacade.getElementFactory(project).createReferenceExpression(newAssertClass));
      styleManager.shortenClassReferences(methodExpression);
    }
  }
}
