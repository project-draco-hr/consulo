{
  final String xmlAttributeValue=target.getDependsList().getValue();
  if (xmlAttributeValue == null) {
    return Collections.emptyList();
  }
  final XmlAttribute attr=target.getDependsList().getXmlAttribute();
  if (attr == null) {
    return Collections.emptyList();
  }
  final int offsetInPosition=attr.getValueTextRange().getStartOffset();
  final List<PsiReference> result=PsiReferenceListSpinAllocator.alloc();
  try {
    final StringBuilder builder=StringBuilderSpinAllocator.alloc();
    try {
      int i=0;
      int rightBound;
      final int valueLen=xmlAttributeValue.length();
      do {
        rightBound=(i < valueLen) ? xmlAttributeValue.indexOf(',',i) : valueLen;
        if (rightBound < 0)         rightBound=valueLen;
        builder.setLength(0);
        int j=i;
        for (; j < rightBound; ++j) {
          builder.append(xmlAttributeValue.charAt(j));
        }
        j=0;
        final int len=builder.length();
        for (; j < len; ++j) {
          if (!Character.isWhitespace(builder.charAt(j)))           break;
        }
        final String targetName=(len == 0 || j == len) ? "" : builder.substring(j);
        final int start=offsetInPosition + i + j;
        result.add(new AntDomDependentTargetReference(target,targetName,start));
        i=rightBound + 1;
      }
 while (rightBound < valueLen);
      return result;
    }
  finally {
      StringBuilderSpinAllocator.dispose(builder);
    }
  }
  finally {
    PsiReferenceListSpinAllocator.dispose(result);
  }
}
