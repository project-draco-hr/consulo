{
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myRevisionsList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final int idx=myRevisionsList.locationToIndex(e.getPoint());
      if (idx >= 0) {
        final Rectangle baseRect=myRevisionsList.getCellBounds(idx,idx);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (baseRect.contains(e.getPoint())) {
          final SvnChangeList changeList=(SvnChangeList)myRevisionsList.getModel().getElementAt(idx);
          final long number=changeList.getNumber();
          toggleInclusion(number);
          myRevisionsList.repaint(baseRect);
          e.consume();
        }
      }
    }
  }
);
  myRevisionsList.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (KeyEvent.VK_SPACE == e.getKeyCode()) {
        final Object[] selected=myRevisionsList.getSelectedValues();
        if (selected == null || selected.length == 0)         return;
        for (        Object o : selected) {
          if (o instanceof SvnChangeList) {
            final SvnChangeList changeList=(SvnChangeList)o;
            toggleInclusion(changeList.getNumber());
          }
        }
        myRevisionsList.repaint();
        e.consume();
      }
    }
  }
);
  myRevisionsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final Object[] objects=myRevisionsList.getSelectedValues();
      myRepositoryChangesBrowser.setChangesToDisplay(Collections.<Change>emptyList());
      myAlreadyMerged.clear();
      if (objects != null && objects.length > 0) {
        final List<CommittedChangeList> lists=ObjectsConvertor.convert(Arrays.asList(objects),new Convertor<Object,CommittedChangeList>(){
          public CommittedChangeList convert(          Object o){
            if (o instanceof CommittedChangeList) {
              final CommittedChangeList cl=(CommittedChangeList)o;
              final Collection<String> notMerged=myPartiallyMerged.get(cl.getNumber());
              final SvnChangeList svnList=(SvnChangeList)cl;
              final Collection<String> forCheck=new HashSet<String>();
              forCheck.addAll(svnList.getAddedPaths());
              forCheck.addAll(svnList.getChangedPaths());
              forCheck.addAll(svnList.getDeletedPaths());
              for (              String path : forCheck) {
                if ((notMerged != null) && !notMerged.contains(path)) {
                  myAlreadyMerged.add(((SvnChangeList)cl).getByPath(path));
                }
              }
              return cl;
            }
            return null;
          }
        }
,ObjectsConvertor.NOT_NULL);
        final List<Change> changes=CommittedChangesTreeBrowser.collectChanges(lists,false);
        myRepositoryChangesBrowser.setChangesToDisplay(changes);
      }
      mySplitter.doLayout();
      myRepositoryChangesBrowser.repaint();
    }
  }
);
}
