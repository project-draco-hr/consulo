{
  super(new BorderLayout());
  myDependencies=builder.getCyclicDependencies();
  myBuilder=builder;
  myProject=project;
  myUsagesPanel=new UsagesPanel(myProject,builder.getForwardBuilder());
  mySettings.UI_SHOW_MODULES=false;
  Splitter treeSplitter=new Splitter();
  treeSplitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myLeftTree));
  treeSplitter.setSecondComponent(ScrollPaneFactory.createScrollPane(myRightTree));
  Splitter splitter=new Splitter(true);
  splitter.setFirstComponent(treeSplitter);
  splitter.setSecondComponent(myUsagesPanel);
  add(splitter,BorderLayout.CENTER);
  add(createToolbar(),BorderLayout.NORTH);
  myRightTreeExpantionMonitor=TreeExpantionMonitor.install(myRightTree,myProject);
  myLeftTreeExpantionMonitor=TreeExpantionMonitor.install(myLeftTree,myProject);
  updateLeftTreeModel();
  updateRightTreeModel();
  myLeftTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updateRightTreeModel();
      myUsagesPanel.setToInitialPosition();
    }
  }
);
  myRightTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          Set<PsiFile> searchIn=getSelectedScope(myRightTree);
          final PackageNode selectedPackageNode=getSelectedPackage(myRightTree);
          if (selectedPackageNode == null) {
            return;
          }
          final PackageDependenciesNode nextPackageNode=getNextPackageNode(selectedPackageNode);
          Set<PsiFile> searchFor=new HashSet<PsiFile>();
          Set<PackageNode> packNodes=new HashSet<PackageNode>();
          getPackageNodesHierarchy(selectedPackageNode,packNodes);
          for (Iterator<PackageNode> iterator=packNodes.iterator(); iterator.hasNext(); ) {
            PackageNode packageNode=iterator.next();
            searchFor.addAll(myBuilder.getDependentFilesInPackage((PsiPackage)packageNode.getPsiElement(),((PsiPackage)nextPackageNode.getPsiElement())));
          }
          if (searchIn.isEmpty() || searchFor.isEmpty()) {
            myUsagesPanel.setToInitialPosition();
          }
 else {
            myBuilder.setRootNodeNameInUsageView("Usages of package \'" + ((PsiPackage)nextPackageNode.getPsiElement()).getQualifiedName() + "\' in package \'"+ ((PsiPackage)selectedPackageNode.getPsiElement()).getQualifiedName()+ "\'");
            myUsagesPanel.findUsages(searchIn,searchFor);
          }
        }
      }
);
    }
  }
);
  initTree(myLeftTree);
  initTree(myRightTree);
  mySettings.UI_FILTER_LEGALS=false;
  mySettings.UI_FLATTEN_PACKAGES=false;
  TreeUtil.selectFirstNode(myLeftTree);
}
