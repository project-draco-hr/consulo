{
  PackageDependenciesNode root=new RootNode();
  final PackageNode packageNode=getSelectedPackage(myLeftTree);
  if (packageNode != null) {
    boolean group=mySettings.UI_GROUP_BY_SCOPE_TYPE;
    mySettings.UI_GROUP_BY_SCOPE_TYPE=false;
    final PsiPackage aPackage=(PsiPackage)packageNode.getPsiElement();
    final Set<ArrayList<PsiPackage>> cyclesOfPackages=myDependencies.get(aPackage);
    for (Iterator<ArrayList<PsiPackage>> iterator=cyclesOfPackages.iterator(); iterator.hasNext(); ) {
      ArrayList<PsiPackage> packCycle=iterator.next();
      PackageDependenciesNode[] nodes=new PackageDependenciesNode[packCycle.size()];
      for (int i=0; i < packCycle.size(); i++) {
        final PsiPackage psiPackage=packCycle.get(i);
        PsiPackage nextPackage=packCycle.get(i == packCycle.size() - 1 ? 0 : i + 1);
        PsiPackage prevPackage=packCycle.get(i == 0 ? packCycle.size() - 1 : i - 1);
        final Set<PsiFile> dependentFilesInPackage=myBuilder.getDependentFilesInPackage(prevPackage,psiPackage,nextPackage);
        final PackageDependenciesNode pack=(PackageDependenciesNode)TreeModelBuilder.createTreeModel(myProject,false,dependentFilesInPackage,new TreeModelBuilder.Marker(){
          public boolean isMarked(          PsiFile file){
            return false;
          }
        }
,mySettings).getRoot();
        nodes[i]=hideEmptyMiddlePackages((PackageDependenciesNode)pack.getChildAt(0),new StringBuffer());
      }
      PackageDependenciesNode cycleNode=new CycleNode();
      for (int i=0; i < nodes.length; i++) {
        nodes[i].setEquals(true);
        cycleNode.add(nodes[i]);
      }
      root.add(cycleNode);
    }
    mySettings.UI_GROUP_BY_SCOPE_TYPE=group;
  }
  myRightTreeExpantionMonitor.freeze();
  myRightTree.setModel(new TreeModelBuilder.TreeModel(root,-1,-1));
  myRightTreeExpantionMonitor.restore();
  expandFirstLevel(myRightTree);
}
