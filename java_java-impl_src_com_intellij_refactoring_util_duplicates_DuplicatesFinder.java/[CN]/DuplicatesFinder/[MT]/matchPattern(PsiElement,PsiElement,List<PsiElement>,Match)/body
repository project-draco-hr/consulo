{
  if (pattern == null || candidate == null)   return pattern == candidate;
  if (pattern.getUserData(PARAMETER) != null) {
    final Pair<PsiVariable,PsiType> parameter=pattern.getUserData(PARAMETER);
    return match.putParameter(parameter,candidate);
  }
  if (!canBeEquivalent(pattern,candidate))   return false;
  if (pattern instanceof PsiExpressionList && candidate instanceof PsiExpressionList) {
    final PsiExpression[] expressions=((PsiExpressionList)pattern).getExpressions();
    final PsiExpression[] childExpressions=((PsiExpressionList)candidate).getExpressions();
    if (expressions.length < childExpressions.length && expressions.length > 0 && expressions[expressions.length - 1] instanceof PsiReferenceExpression) {
      final PsiElement resolved=((PsiReferenceExpression)expressions[expressions.length - 1]).resolve();
      if (resolved instanceof PsiParameter && ((PsiParameter)resolved).getType() instanceof PsiEllipsisType) {
        for (int i=0; i < expressions.length - 1; i++) {
          final Pair<PsiVariable,PsiType> parameter=expressions[i].getUserData(PARAMETER);
          if (parameter == null)           return false;
          if (!match.putParameter(parameter,childExpressions[i]))           return false;
        }
        final Pair<PsiVariable,PsiType> param=expressions[expressions.length - 1].getUserData(PARAMETER);
        if (param == null)         return false;
        for (int i=expressions.length - 1; i < childExpressions.length; i++) {
          if (!match.putParameter(param,childExpressions[i]))           return false;
        }
        return true;
      }
    }
  }
  if (pattern instanceof PsiAssignmentExpression) {
    final PsiExpression lExpression=((PsiAssignmentExpression)pattern).getLExpression();
    if (lExpression.getType() instanceof PsiPrimitiveType && lExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)lExpression).resolve() instanceof PsiParameter) {
      return false;
    }
  }
 else   if (pattern instanceof PsiPrefixExpression) {
    if (checkParameterModification(((PsiPrefixExpression)pattern).getOperand(),((PsiPrefixExpression)pattern).getOperationTokenType(),((PsiPrefixExpression)candidate).getOperand()))     return false;
  }
 else   if (pattern instanceof PsiPostfixExpression) {
    if (checkParameterModification(((PsiPostfixExpression)pattern).getOperand(),((PsiPostfixExpression)pattern).getOperationTokenType(),((PsiPostfixExpression)candidate).getOperand()))     return false;
  }
  if (pattern instanceof PsiJavaCodeReferenceElement) {
    final PsiElement resolveResult1=((PsiJavaCodeReferenceElement)pattern).resolve();
    final PsiElement resolveResult2=((PsiJavaCodeReferenceElement)candidate).resolve();
    if (resolveResult1 instanceof PsiClass && resolveResult2 instanceof PsiClass)     return true;
    if (isUnder(resolveResult1,myPatternAsList) && isUnder(resolveResult2,candidates)) {
      traverseParameter(resolveResult1,resolveResult2,match);
      return match.putDeclarationCorrespondence(resolveResult1,resolveResult2);
    }
    final PsiElement qualifier2=((PsiJavaCodeReferenceElement)candidate).getQualifier();
    if (!equivalentResolve(resolveResult1,resolveResult2,qualifier2)) {
      return false;
    }
  }
  if (pattern instanceof PsiTypeCastExpression) {
    final PsiTypeElement castTypeElement1=((PsiTypeCastExpression)pattern).getCastType();
    final PsiTypeElement castTypeElement2=((PsiTypeCastExpression)candidate).getCastType();
    if (castTypeElement1 != null && castTypeElement2 != null) {
      final PsiType type1=TypeConversionUtil.erasure(castTypeElement1.getType());
      final PsiType type2=TypeConversionUtil.erasure(castTypeElement2.getType());
      if (!type1.equals(type2))       return false;
    }
  }
 else   if (pattern instanceof PsiNewExpression) {
    final PsiType type1=((PsiNewExpression)pattern).getType();
    final PsiType type2=((PsiNewExpression)candidate).getType();
    if (type1 == null || type2 == null)     return false;
    final PsiJavaCodeReferenceElement classReference1=((PsiNewExpression)pattern).getClassReference();
    final PsiJavaCodeReferenceElement classReference2=((PsiNewExpression)candidate).getClassReference();
    if (classReference1 != null && classReference2 != null) {
      final PsiElement resolved1=classReference1.resolve();
      final PsiElement resolved2=classReference2.resolve();
      if (!pattern.getManager().areElementsEquivalent(resolved1,resolved2))       return false;
    }
 else {
      if (!canTypesBeEquivalent(type1,type2))       return false;
    }
  }
 else   if (pattern instanceof PsiClassObjectAccessExpression) {
    final PsiTypeElement operand1=((PsiClassObjectAccessExpression)pattern).getOperand();
    final PsiTypeElement operand2=((PsiClassObjectAccessExpression)candidate).getOperand();
    return operand1.getType().equals(operand2.getType());
  }
 else   if (pattern instanceof PsiInstanceOfExpression) {
    final PsiTypeElement operand1=((PsiInstanceOfExpression)pattern).getCheckType();
    final PsiTypeElement operand2=((PsiInstanceOfExpression)candidate).getCheckType();
    if (operand1 == null || operand2 == null)     return false;
    if (!operand1.getType().equals(operand2.getType()))     return false;
  }
 else   if (pattern instanceof PsiReturnStatement) {
    final PsiReturnStatement patternReturnStatement=(PsiReturnStatement)pattern;
    return matchReturnStatement(patternReturnStatement,candidate,candidates,match);
  }
 else   if (pattern instanceof PsiContinueStatement) {
    match.registerReturnValue(new ContinueReturnValue());
  }
 else   if (pattern instanceof PsiBreakStatement) {
    match.registerReturnValue(new BreakReturnValue());
  }
 else   if (pattern instanceof PsiReferenceExpression) {
    final PsiReferenceExpression patternRefExpr=(PsiReferenceExpression)pattern;
    final PsiReferenceExpression candidateRefExpr=(PsiReferenceExpression)candidate;
    final PsiExpression patternQualifier=patternRefExpr.getQualifierExpression();
    final PsiExpression candidateQualifier=candidateRefExpr.getQualifierExpression();
    if (patternQualifier == null) {
      PsiClass contextClass=PsiTreeUtil.getParentOfType(pattern,PsiClass.class);
      return contextClass != null && match.registerInstanceExpression(candidateQualifier,contextClass);
    }
 else {
      if (candidateQualifier == null) {
        if (patternQualifier instanceof PsiThisExpression) {
          final PsiJavaCodeReferenceElement qualifier=((PsiThisExpression)patternQualifier).getQualifier();
          if (candidate instanceof PsiReferenceExpression) {
            PsiElement contextClass=qualifier == null ? PsiTreeUtil.getParentOfType(pattern,PsiClass.class) : qualifier.resolve();
            return contextClass instanceof PsiClass && match.registerInstanceExpression(((PsiReferenceExpression)candidate).getQualifierExpression(),(PsiClass)contextClass);
          }
        }
 else {
          final PsiType type=patternQualifier.getType();
          PsiClass contextClass=type instanceof PsiClassType ? ((PsiClassType)type).resolve() : null;
          try {
            final Pair<PsiVariable,PsiType> parameter=patternQualifier.getUserData(PARAMETER);
            if (parameter != null) {
              final PsiClass thisClass=RefactoringUtil.getThisClass(parameter.first);
              if (contextClass != null && InheritanceUtil.isInheritorOrSelf(thisClass,contextClass,true)) {
                contextClass=thisClass;
              }
              final PsiClass thisCandidate=RefactoringUtil.getThisClass(candidate);
              if (thisCandidate != null && InheritanceUtil.isInheritorOrSelf(thisCandidate,contextClass,true)) {
                contextClass=thisCandidate;
              }
              return contextClass != null && match.putParameter(parameter,RefactoringUtil.createThisExpression(patternQualifier.getManager(),contextClass));
            }
            return false;
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
 else {
        if (patternQualifier instanceof PsiThisExpression && candidateQualifier instanceof PsiThisExpression) {
          final PsiJavaCodeReferenceElement thisPatternQualifier=((PsiThisExpression)patternQualifier).getQualifier();
          final PsiElement patternContextClass=thisPatternQualifier == null ? PsiTreeUtil.getParentOfType(patternQualifier,PsiClass.class) : thisPatternQualifier.resolve();
          final PsiJavaCodeReferenceElement thisCandidateQualifier=((PsiThisExpression)candidateQualifier).getQualifier();
          final PsiElement candidateContextClass=thisCandidateQualifier == null ? PsiTreeUtil.getParentOfType(candidateQualifier,PsiClass.class) : thisCandidateQualifier.resolve();
          return patternContextClass == candidateContextClass;
        }
      }
    }
  }
 else   if (pattern instanceof PsiThisExpression) {
    final PsiJavaCodeReferenceElement qualifier=((PsiThisExpression)pattern).getQualifier();
    final PsiElement contextClass=qualifier == null ? PsiTreeUtil.getParentOfType(pattern,PsiClass.class) : qualifier.resolve();
    if (candidate instanceof PsiReferenceExpression) {
      final PsiElement parent=candidate.getParent();
      return parent instanceof PsiReferenceExpression && contextClass instanceof PsiClass && match.registerInstanceExpression(((PsiReferenceExpression)parent).getQualifierExpression(),(PsiClass)contextClass);
    }
 else     if (candidate instanceof PsiThisExpression) {
      final PsiJavaCodeReferenceElement candidateQualifier=((PsiThisExpression)candidate).getQualifier();
      final PsiElement candidateContextClass=candidateQualifier == null ? PsiTreeUtil.getParentOfType(candidate,PsiClass.class) : candidateQualifier.resolve();
      return contextClass == candidateContextClass;
    }
  }
 else   if (pattern instanceof PsiSuperExpression) {
    final PsiJavaCodeReferenceElement qualifier=((PsiSuperExpression)pattern).getQualifier();
    final PsiElement contextClass=qualifier == null ? PsiTreeUtil.getParentOfType(pattern,PsiClass.class) : qualifier.resolve();
    if (candidate instanceof PsiSuperExpression) {
      final PsiJavaCodeReferenceElement candidateQualifier=((PsiSuperExpression)candidate).getQualifier();
      return contextClass == (candidateQualifier != null ? candidateQualifier.resolve() : PsiTreeUtil.getParentOfType(candidate,PsiClass.class));
    }
  }
  PsiElement[] children1=getFilteredChildren(pattern);
  PsiElement[] children2=getFilteredChildren(candidate);
  if (children1.length != children2.length)   return false;
  for (int i=0; i < children1.length; i++) {
    PsiElement child1=children1[i];
    PsiElement child2=children2[i];
    if (!matchPattern(child1,child2,candidates,match))     return false;
  }
  if (children1.length == 0) {
    if (pattern.getParent() instanceof PsiVariable && ((PsiVariable)pattern.getParent()).getNameIdentifier() == pattern) {
      return match.putDeclarationCorrespondence(pattern.getParent(),candidate.getParent());
    }
    if (!pattern.textMatches(candidate))     return false;
  }
  return true;
}
