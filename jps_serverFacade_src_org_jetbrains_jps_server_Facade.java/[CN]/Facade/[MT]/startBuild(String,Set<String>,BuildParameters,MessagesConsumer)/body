{
  ProjectWrapper pw=myProjects.get(projectPath);
  if (pw == null) {
    pw=ProjectWrapper.load(new GantBinding(),projectPath,getStartupScript(),myPathVariables,false);
    myProjects.put(projectPath,pw);
  }
  configureProject(pw,params,consumer);
  final Project project=pw.getProject();
  final List<Module> toCompile=new ArrayList<Module>();
  if (modules != null && modules.size() > 0) {
    for (    Module m : project.getModules().values()) {
      if (modules.contains(m.getName())) {
        toCompile.add(m);
      }
    }
  }
 else {
    toCompile.addAll(project.getModules().values());
  }
  final CompileScope compileScope=new CompileScope(project){
    public Collection<Module> getAffectedModules(){
      return toCompile;
    }
  }
;
  final IncProjectBuilder builder=new IncProjectBuilder(project,BuilderRegistry.getInstance());
  builder.addMessageHandler(new MessageHandler(){
    public void processMessage(    BuildMessage msg){
      if (msg instanceof CompilerMessage) {
        consumer.consumeCompilerMessage(((CompilerMessage)msg).getCompilerName(),msg.getMessageText());
      }
 else {
        consumer.consumeProgressMessage(msg.getMessageText());
      }
    }
  }
);
switch (params.buildType) {
case REBUILD:
    builder.build(compileScope);
  break;
case MAKE:
builder.build(compileScope);
break;
case CLEAN:
project.clean();
break;
}
}
