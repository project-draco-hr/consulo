{
  final ProjectWrapper proj=ProjectWrapper.load(new GantBinding(),projectPath,getStartupScript(params),params.pathVariables,params.buildType == BuildType.MAKE);
  List<Module> toCompile=null;
  if (modules != null && modules.size() > 0) {
    for (    Module m : proj.getProject().getModules().values()) {
      if (modules.contains(m.getName())) {
        if (toCompile == null) {
          toCompile=new ArrayList<Module>();
        }
        toCompile.add(m);
      }
    }
  }
  proj.getProject().getBuilder().setBuildInfoPrinter(new BuildInfoPrinter(){
    public Object printProgressMessage(    Project project,    String message){
      consumer.consumeProgressMessage(message);
      return null;
    }
    public Object printCompilationErrors(    Project project,    String compilerName,    String messages){
      consumer.consumeCompilerMessage(compilerName,compilerName);
      return null;
    }
  }
);
switch (params.buildType) {
case REBUILD:
    if (toCompile == null || toCompile.isEmpty()) {
      proj.rebuild();
    }
 else {
      proj.makeModules(toCompile,new ProjectWrapper.Flags(){
        public boolean tests(){
          return true;
        }
        public boolean incremental(){
          return false;
        }
        public boolean force(){
          return true;
        }
        public PrintStream logStream(){
          return null;
        }
      }
);
    }
  break;
case MAKE:
proj.makeModules(toCompile,new ProjectWrapper.Flags(){
  public boolean tests(){
    return true;
  }
  public boolean incremental(){
    return true;
  }
  public boolean force(){
    return false;
  }
  public PrintStream logStream(){
    return null;
  }
}
);
break;
case CLEAN:
proj.clean();
break;
}
proj.save();
}
