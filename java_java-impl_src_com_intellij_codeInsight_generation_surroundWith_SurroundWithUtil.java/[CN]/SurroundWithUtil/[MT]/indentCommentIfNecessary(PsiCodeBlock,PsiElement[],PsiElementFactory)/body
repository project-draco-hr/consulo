{
  if (statements == null || statements.length <= 0) {
    return;
  }
  PsiElement first=statements[0];
  ASTNode node=first.getNode();
  if (node == null || !ElementType.JAVA_COMMENT_BIT_SET.contains(node.getElementType())) {
    return;
  }
  ASTNode commentWsText=node.getTreePrev();
  if (commentWsText == null || !ElementType.WHITE_SPACE_BIT_SET.contains(commentWsText.getElementType())) {
    return;
  }
  int indent=0;
  CharSequence text=commentWsText.getChars();
  for (int i=text.length() - 1; i >= 0; i--, indent++) {
    if (text.charAt(i) == '\n') {
      break;
    }
  }
  if (indent <= 0) {
    return;
  }
  PsiElement codeBlockWsElement=null;
  ASTNode codeBlockWsNode=null;
  boolean lbraceFound=false;
  for (PsiElement codeBlockChild=container.getFirstChild(); codeBlockChild != null; codeBlockChild=codeBlockChild.getNextSibling()) {
    ASTNode childNode=codeBlockChild.getNode();
    if (childNode == null) {
      continue;
    }
    if (!lbraceFound) {
      if (JavaTokenType.LBRACE == childNode.getElementType()) {
        lbraceFound=true;
      }
      continue;
    }
    if (ElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) {
      codeBlockWsElement=codeBlockChild;
      codeBlockWsNode=childNode;
      break;
    }
 else     if (JavaTokenType.RBRACE == childNode.getElementType()) {
      break;
    }
  }
  if (codeBlockWsElement != null) {
    CharSequence existingWhiteSpaceText=codeBlockWsNode.getChars();
    int existingWhiteSpaceEndOffset=existingWhiteSpaceText.length();
    for (int i=existingWhiteSpaceEndOffset - 1; i >= 0; i--) {
      if (existingWhiteSpaceText.charAt(i) == '\n') {
        existingWhiteSpaceEndOffset=i;
        break;
      }
    }
    String newWsText=text.subSequence(text.length() - indent,text.length()).toString();
    if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) {
      newWsText=existingWhiteSpaceText.subSequence(0,existingWhiteSpaceEndOffset + 1).toString() + newWsText;
    }
    PsiElement indentElement=factory.createWhiteSpaceFromText(newWsText);
    codeBlockWsElement.replace(indentElement);
  }
 else {
    PsiElement indentElement=factory.createWhiteSpaceFromText(text.subSequence(text.length() - indent,text.length()).toString());
    container.add(indentElement);
  }
}
