{
  String text="";
  Event event=descriptor.getSecond();
  if (event instanceof VMStartEvent) {
    text=DebuggerBundle.message("status.process.started");
  }
 else   if (event instanceof VMDeathEvent) {
    text=DebuggerBundle.message("status.process.terminated");
  }
 else   if (event instanceof VMDisconnectEvent) {
    final RemoteConnection connection=getConnection();
    final String addressDisplayName=DebuggerBundle.getAddressDisplayName(connection);
    final String transportName=DebuggerBundle.getTransportName(connection);
    text=DebuggerBundle.message("status.disconnected",addressDisplayName,transportName);
  }
 else   if (event instanceof ExceptionEvent) {
    ExceptionEvent exceptionEvent=(ExceptionEvent)event;
    ObjectReference objectReference=exceptionEvent.exception();
    try {
      text=DebuggerBundle.message("status.exception.breakpoint.reached") + "." + DebuggerBundle.message("status.exception.breakpoint.reached.details",objectReference.referenceType().name(),exceptionEvent.thread().name());
    }
 catch (    Exception e) {
      text=DebuggerBundle.message("status.exception.breakpoint.reached");
    }
  }
 else   if (event instanceof AccessWatchpointEvent) {
    AccessWatchpointEvent accessEvent=(AccessWatchpointEvent)event;
    final StringBuffer message=new StringBuffer(32);
    message.append(DebuggerBundle.message("status.field.watchpoint.reached")).append(". ");
    final Field field=accessEvent.field();
    final ObjectReference object=accessEvent.object();
    if (object != null) {
      message.append(DebuggerBundle.message("status.field.watchpoint.reached.access",field.declaringType().name(),field.name(),object.uniqueID()));
    }
 else {
      message.append(DebuggerBundle.message("status.static.field.watchpoint.reached.access",field.declaringType().name(),field.name()));
    }
    text=message.toString();
  }
 else   if (event instanceof ModificationWatchpointEvent) {
    ModificationWatchpointEvent modificationEvent=(ModificationWatchpointEvent)event;
    StringBuffer message=new StringBuffer(64);
    message.append(DebuggerBundle.message("status.field.watchpoint.reached")).append(". ");
    final Field field=modificationEvent.field();
    final ObjectReference object=modificationEvent.object();
    if (object != null) {
      message.append(DebuggerBundle.message("status.field.watchpoint.reached.modification",field.declaringType().name(),field.name(),modificationEvent.valueCurrent(),modificationEvent.valueToBe(),object.uniqueID()));
    }
 else {
      message.append(DebuggerBundle.message("status.static.field.watchpoint.reached.modification",field.declaringType().name(),field.name(),modificationEvent.valueCurrent(),modificationEvent.valueToBe()));
    }
    text=message.toString();
  }
 else   if (event instanceof BreakpointEvent) {
    BreakpointEvent breakpointEvent=(BreakpointEvent)event;
    Breakpoint breakpoint=descriptor.getFirst();
    if (breakpoint instanceof LineBreakpoint && !((LineBreakpoint)breakpoint).isVisible()) {
      text=DebuggerBundle.message("status.stopped.at.cursor");
    }
 else {
      Location location=breakpointEvent.location();
      try {
        text=DebuggerBundle.message("status.line.breakpoint.reached",location.sourceName(),location.lineNumber());
      }
 catch (      AbsentInformationException e) {
        text=DebuggerBundle.message("status.generic.breakpoint.reached");
      }
catch (      InternalException e) {
        text=DebuggerBundle.message("status.generic.breakpoint.reached");
      }
    }
  }
 else   if (event instanceof MethodEntryEvent) {
    MethodEntryEvent entryEvent=(MethodEntryEvent)event;
    Method method=entryEvent.method();
    text=DebuggerBundle.message("status.method.entry.breakpoint.reached",method.declaringType().name() + "." + method.name()+ "()");
  }
 else   if (event instanceof MethodExitEvent) {
    MethodExitEvent exitEvent=(MethodExitEvent)event;
    Method method=exitEvent.method();
    text=DebuggerBundle.message("status.method.exit.breakpoint.reached",method.declaringType().name() + "." + method.name()+ "()");
  }
  return text;
}
