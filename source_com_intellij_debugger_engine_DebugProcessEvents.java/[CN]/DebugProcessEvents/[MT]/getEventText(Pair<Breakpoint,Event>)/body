{
  String text="";
  Event event=descriptor.getSecond();
  if (event instanceof VMStartEvent) {
    text="Process started";
  }
 else   if (event instanceof VMDeathEvent) {
    text="Process terminated";
  }
 else   if (event instanceof VMDisconnectEvent) {
    text="Disconnected from the debugged process";
  }
 else   if (event instanceof ExceptionEvent) {
    ExceptionEvent exceptionEvent=(ExceptionEvent)event;
    ObjectReference objectReference=exceptionEvent.exception();
    try {
      text="Exception breakpoint reached. Exception  '" + objectReference.referenceType().name() + "' in thread '"+ exceptionEvent.thread().name()+ "'";
    }
 catch (    Exception e) {
      text="Exception breakpoint reached. ";
    }
  }
 else   if (event instanceof AccessWatchpointEvent) {
    AccessWatchpointEvent accessEvent=(AccessWatchpointEvent)event;
    StringBuffer message=new StringBuffer(32);
    message.append("Field watchpoint reached. ");
    ObjectReference object=accessEvent.object();
    Field field=accessEvent.field();
    if (object != null) {
      message.append("{");
    }
    message.append(field.declaringType().name());
    if (object != null) {
      message.append('@');
      message.append(object.uniqueID());
      message.append("}");
    }
    message.append('.');
    message.append(field.name());
    message.append(" will be accessed.");
    text=message.toString();
  }
 else   if (event instanceof ModificationWatchpointEvent) {
    ModificationWatchpointEvent modificationEvent=(ModificationWatchpointEvent)event;
    StringBuffer message=new StringBuffer(64);
    message.append("Field watchpoint reached. ");
    Field field=modificationEvent.field();
    ObjectReference object=modificationEvent.object();
    if (object != null) {
      message.append("{");
    }
    message.append(field.declaringType().name());
    if (object != null) {
      message.append('@');
      message.append(object.uniqueID());
      message.append("}");
    }
    message.append('.');
    message.append(field.name());
    message.append(" will be modified. Current value = '");
    message.append(modificationEvent.valueCurrent());
    message.append("'. New value = '");
    message.append(modificationEvent.valueToBe());
    message.append("'.");
    text=message.toString();
  }
 else   if (event instanceof BreakpointEvent) {
    BreakpointEvent breakpointEvent=(BreakpointEvent)event;
    Breakpoint breakpoint=descriptor.getFirst();
    if (breakpoint instanceof LineBreakpoint && !((LineBreakpoint)breakpoint).isVisible()) {
      text="Stopped at cursor";
    }
 else {
      Location location=breakpointEvent.location();
      try {
        text="Breakpoint reached in " + location.sourceName() + "; at line "+ location.lineNumber();
      }
 catch (      AbsentInformationException e) {
        text="Breakpoint reached";
      }
catch (      InternalException e) {
        text="Breakpoint reached";
      }
    }
  }
 else   if (event instanceof MethodEntryEvent) {
    MethodEntryEvent entryEvent=(MethodEntryEvent)event;
    Method method=entryEvent.method();
    text="Method '" + method + "' entered";
  }
 else   if (event instanceof MethodExitEvent) {
    MethodExitEvent exitEvent=(MethodExitEvent)event;
    Method method=exitEvent.method();
    text="Method breakpoint reached. Method '" + method + "' is about to exit";
  }
  return text;
}
