{
  boolean isDeprecatedByComment=false;
  boolean isInterface=false;
  boolean isEnum=false;
  boolean isEnumConst=false;
  boolean isAnonymous=false;
  boolean isAnnotation=false;
  boolean isInQualifiedNew=false;
  boolean hasDeprecatedAnnotation=false;
  String qualifiedName=null;
  String name=null;
  String baseRef=null;
  if (node.getTokenType() == JavaElementType.ANONYMOUS_CLASS) {
    isAnonymous=true;
  }
 else   if (node.getTokenType() == JavaElementType.ENUM_CONSTANT_INITIALIZER) {
    isAnonymous=isEnumConst=true;
    baseRef=((PsiClassStub)parentStub.getParentStub()).getName();
  }
  for (  final LighterASTNode child : tree.getChildren(node)) {
    final IElementType type=child.getTokenType();
    if (type == JavaDocElementType.DOC_COMMENT) {
      isDeprecatedByComment=RecordUtil.isDeprecatedByDocComment(tree,child);
    }
 else     if (type == JavaElementType.MODIFIER_LIST) {
      hasDeprecatedAnnotation=RecordUtil.isDeprecatedByAnnotation(tree,child);
    }
 else     if (type == JavaTokenType.AT) {
      isAnnotation=true;
    }
 else     if (type == JavaTokenType.INTERFACE_KEYWORD) {
      isInterface=true;
    }
 else     if (type == JavaTokenType.ENUM_KEYWORD) {
      isEnum=true;
    }
 else     if (!isAnonymous && type == JavaTokenType.IDENTIFIER) {
      name=RecordUtil.intern(tree.getCharTable(),child);
    }
 else     if (isAnonymous && !isEnumConst && type == JavaElementType.JAVA_CODE_REFERENCE) {
      baseRef=LightTreeUtil.toFilteredString(tree,child,null);
    }
  }
  if (name != null) {
    if (parentStub instanceof PsiJavaFileStub) {
      final String pkg=((PsiJavaFileStub)parentStub).getPackageName();
      if (pkg.length() > 0)       qualifiedName=pkg + '.' + name;
 else       qualifiedName=name;
    }
 else     if (parentStub instanceof PsiClassStub) {
      final String parentFqn=((PsiClassStub)parentStub).getQualifiedName();
      qualifiedName=parentFqn != null ? parentFqn + '.' + name : null;
    }
  }
  if (isAnonymous) {
    final LighterASTNode parent=node.getParent();
    if (parent != null && parent.getTokenType() == JavaElementType.NEW_EXPRESSION) {
      isInQualifiedNew=(LightTreeUtil.firstChildOfType(tree,parent,JavaTokenType.DOT) != null);
    }
  }
  final byte flags=PsiClassStubImpl.packFlags(isDeprecatedByComment,isInterface,isEnum,isEnumConst,isAnonymous,isAnnotation,isInQualifiedNew,hasDeprecatedAnnotation);
  final JavaClassElementType type=typeForClass(isAnonymous,isEnumConst);
  return new PsiClassStubImpl(type,parentStub,qualifiedName,name,baseRef,flags);
}
