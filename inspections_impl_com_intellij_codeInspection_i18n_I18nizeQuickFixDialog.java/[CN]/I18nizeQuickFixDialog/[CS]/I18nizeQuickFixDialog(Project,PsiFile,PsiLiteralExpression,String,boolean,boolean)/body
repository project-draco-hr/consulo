{
  super(false);
  myProject=project;
  myContext=context;
  myLiteralExpression=literalExpression;
  myDefaultPropertyValue=defaultPropertyValue;
  myShowPreview=showPreview;
  setTitle(CodeInsightBundle.message("i18nize.dialog.title"));
  myResourceBundleSuggester.setLayout(new BorderLayout());
  PsiManager psiManager=PsiManager.getInstance(myProject);
  PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
  PsiClass resourceBundle=null;
  try {
    myResourceBundleManager=ResourceBundleManager.getManager(context);
    LOG.assertTrue(myResourceBundleManager != null);
    resourceBundle=myResourceBundleManager.getResourceBundle();
  }
 catch (  ResourceBundleManager.ResourceBundleNotFoundException e) {
  }
  myShowJavaCodeInfo=showJavaCodeInfo && myResourceBundleManager.canShowJavaCodeInfo();
  if (myShowJavaCodeInfo) {
    LOG.assertTrue(resourceBundle != null);
    myResourceBundleType=factory.createType(resourceBundle);
    @NonNls String defaultVarName="resourceBundle";
    PsiExpressionCodeFragment expressionCodeFragment=factory.createExpressionCodeFragment(defaultVarName,myLiteralExpression,myResourceBundleType,true);
    Document document=PsiDocumentManager.getInstance(myProject).getDocument(expressionCodeFragment);
    myRBEditorTextField=new EditorComboBox(document,myProject,StdFileTypes.JAVA);
    myResourceBundleSuggester.add(myRBEditorTextField,BorderLayout.CENTER);
    suggestAvailableResourceBundleExpressions();
    myRBEditorTextField.addDocumentListener(new com.intellij.openapi.editor.event.DocumentAdapter(){
      public void documentChanged(      com.intellij.openapi.editor.event.DocumentEvent e){
        somethingChanged();
      }
    }
);
  }
  myPropertiesFile=new TextFieldWithHistory();
  myPropertiesFile.setHistorySize(-1);
  myPropertiesFilePanel.add(GuiUtils.constructFieldWithBrowseButton(myPropertiesFile,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TreeClassChooserFactory chooserFactory=TreeClassChooserFactory.getInstance(myProject);
      TreeFileChooser fileChooser=chooserFactory.createFileChooser(CodeInsightBundle.message("i18nize.dialog.property.file.chooser.title"),getPropertiesFile(),StdFileTypes.PROPERTIES,null);
      fileChooser.showDialog();
      PsiFile selectedFile=fileChooser.getSelectedFile();
      if (selectedFile == null)       return;
      myPropertiesFile.setText(FileUtil.toSystemDependentName(selectedFile.getVirtualFile().getPath()));
    }
  }
),BorderLayout.CENTER);
  populatePropertiesFiles();
  myPropertiesFile.addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      propertiesFileChanged();
      somethingChanged();
    }
  }
);
  getKeyTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  myValue.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  myHyperLinkPanel.setLayout(new BorderLayout());
  final String templateName=getTemplateName();
  if (templateName != null) {
    HyperlinkLabel link=new HyperlinkLabel(CodeInsightBundle.message("i18nize.dialog.template.link.label"));
    link.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      HyperlinkEvent e){
        final FileTemplateConfigurable configurable=new FileTemplateConfigurable();
        final FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(templateName);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            configurable.setTemplate(template,null);
          }
        }
);
        boolean ok=ShowSettingsUtil.getInstance().editConfigurable(myPanel,configurable);
        if (ok) {
          somethingChanged();
          if (myShowJavaCodeInfo) {
            suggestAvailableResourceBundleExpressions();
          }
        }
      }
    }
);
    myHyperLinkPanel.add(link,BorderLayout.CENTER);
  }
  if (!myShowJavaCodeInfo) {
    myJavaCodeInfoPanel.setVisible(false);
  }
  if (!myShowPreview) {
    myPreviewPanel.setVisible(false);
  }
  @NonNls final String KEY="I18NIZE_DIALOG_USE_RESOURCE_BUNDLE";
  final boolean useBundleByDefault=!PropertiesComponent.getInstance().isValueSet(KEY) || PropertiesComponent.getInstance().isTrueValue(KEY);
  myUseResourceBundle.setSelected(useBundleByDefault);
  myUseResourceBundle.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PropertiesComponent.getInstance().setValue(KEY,Boolean.valueOf(myUseResourceBundle.isSelected()).toString());
    }
  }
);
  propertiesFileChanged();
  somethingChanged();
  setKeyValueEditBoxes();
  init();
}
