{
  super(false);
  myProject=project;
  myContext=context;
  myLiteralExpression=literalExpression;
  myDefaultPropertyValue=defaultPropertyValue;
  myShowJavaCodeInfo=showJavaCodeInfo;
  myShowPreview=showPreview;
  setTitle(CodeInsightBundle.message("i18nize.dialog.title"));
  myResourceBundleSuggester.setLayout(new BorderLayout());
  PsiManager psiManager=PsiManager.getInstance(myProject);
  PsiClass rbClass=psiManager.findClass("java.util.ResourceBundle",GlobalSearchScope.allScope(myProject));
  if (rbClass == null) {
    Messages.showErrorDialog(myProject,CodeInsightBundle.message("i18nize.dialog.error.jdk.message"),CodeInsightBundle.message("i18nize.dialog.error.jdk.title"));
    return;
  }
  PsiElementFactory factory=psiManager.getElementFactory();
  myResourceBundleType=factory.createType(rbClass);
  if (myShowJavaCodeInfo) {
    @NonNls String defaultVarName="resourceBundle";
    PsiExpressionCodeFragment expressionCodeFragment=factory.createExpressionCodeFragment(defaultVarName,myLiteralExpression,myResourceBundleType,true);
    Document document=PsiDocumentManager.getInstance(myProject).getDocument(expressionCodeFragment);
    myRBEditorTextField=new EditorComboBox(document,myProject,StdFileTypes.JAVA);
    myResourceBundleSuggester.add(myRBEditorTextField,BorderLayout.CENTER);
    suggestAvailableResourceBundleExpressions();
    myRBEditorTextField.addDocumentListener(new com.intellij.openapi.editor.event.DocumentAdapter(){
      public void documentChanged(      com.intellij.openapi.editor.event.DocumentEvent e){
        somethingChanged();
      }
    }
);
    _E.setLabelFor(myRBEditorTextField);
  }
  myPropertiesFile=new TextFieldWithHistory();
  JPanel panel=GuiUtils.constructFieldWithBrowseButton(myPropertiesFile,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TreeClassChooserFactory chooserFactory=TreeClassChooserFactory.getInstance(myProject);
      TreeFileChooser fileChooser=chooserFactory.createFileChooser(CodeInsightBundle.message("i18nize.dialog.property.file.chooser.title"),getPropertiesFile(),StdFileTypes.PROPERTIES,null);
      fileChooser.showDialog();
      PsiFile selectedFile=fileChooser.getSelectedFile();
      if (selectedFile == null)       return;
      myPropertiesFile.setText(FileUtil.toSystemDependentName(selectedFile.getVirtualFile().getPath()));
    }
  }
);
  myPropertiesFilePanel.setLayout(new BorderLayout());
  myPropertiesFilePanel.add(panel,BorderLayout.CENTER);
  _P.setLabelFor(myPropertiesFile);
  populatePropertiesFiles();
  myPropertiesFile.addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      propertiesFileChanged();
      somethingChanged();
    }
  }
);
  getKeyTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  myValue.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  myHyperLinkPanel.setLayout(new BorderLayout());
  HyperlinkLabel link=new HyperlinkLabel(CodeInsightBundle.message("i18nize.dialog.template.link.label"));
  link.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      final FileTemplateConfigurable configurable=new FileTemplateConfigurable();
      final FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(getTemplateName());
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          configurable.setTemplate(template,null);
        }
      }
);
      boolean ok=ShowSettingsUtil.getInstance().editConfigurable(myPanel,configurable);
      if (ok) {
        somethingChanged();
        if (myShowJavaCodeInfo) {
          suggestAvailableResourceBundleExpressions();
        }
      }
    }
  }
);
  myHyperLinkPanel.add(link,BorderLayout.CENTER);
  if (!myShowJavaCodeInfo) {
    myJavaCodeInfoPanel.setVisible(false);
  }
  if (!myShowPreview) {
    myPreviewPanel.setVisible(false);
  }
  propertiesFileChanged();
  somethingChanged();
  setKeyValueEditBoxes();
  init();
}
