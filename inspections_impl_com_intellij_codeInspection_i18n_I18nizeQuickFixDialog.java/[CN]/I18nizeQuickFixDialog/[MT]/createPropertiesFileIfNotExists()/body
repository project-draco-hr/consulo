{
  final String path=FileUtil.toSystemIndependentName(myPropertiesFile.getText());
  FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName(path);
  if (fileType != StdFileTypes.PROPERTIES) {
    Messages.showErrorDialog(myProject,"Can't create properties file '" + myPropertiesFile.getText() + "' because its name is associated with the "+ fileType.getDescription()+ ".","Error creating properties file");
    return false;
  }
  final VirtualFile virtualFile;
  try {
    final File file=new File(path).getCanonicalFile();
    FileUtil.createParentDirs(file);
    final IOException[] e=new IOException[1];
    virtualFile=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
      public VirtualFile compute(){
        VirtualFile dir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file.getParentFile());
        try {
          if (dir == null) {
            throw new IOException("Error creating directory structure for file '" + path + "'");
          }
          return dir.createChildData(this,file.getName());
        }
 catch (        IOException e1) {
          e[0]=e1;
        }
        return null;
      }
    }
);
    if (e[0] != null)     throw e[0];
  }
 catch (  IOException e) {
    Messages.showErrorDialog(myProject,e.getLocalizedMessage(),"Error creating properties file");
    return false;
  }
  PsiFile psiFile=PsiManager.getInstance(myProject).findFile(virtualFile);
  return psiFile instanceof PropertiesFile;
}
