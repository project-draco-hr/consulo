{
  super(CvsBundle.message("dialog.title.import.settings"),wizard);
  myCheckoutAfterImport.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateCheckoutSettingsVisibility();
    }
  }
);
  mySelectImportLocationStep=selectImportLocationStep;
  myImportConfiguration=importConfiguration;
  myModuleNameLabel.setLabelFor(myModuleName);
  myReleaseTagLabel.setLabelFor(myReleaseTag);
  myVendorLabel.setLabelFor(myVendor);
  myLogMessageLabel.setLabelFor(myLogMessage);
  myLogMessage.setWrapStyleWord(true);
  myLogMessage.setLineWrap(true);
  myReleaseTag.setText(myImportConfiguration.RELEASE_TAG);
  myVendor.setText(myImportConfiguration.VENDOR);
  myLogMessage.setText(myImportConfiguration.LOG_MESSAGE);
  myCheckoutAfterImport.setSelected(myImportConfiguration.CHECKOUT_AFTER_IMPORT);
  myMakeCheckedOutFilesReadOnly.setSelected(myImportConfiguration.MAKE_NEW_FILES_READ_ONLY);
  updateCheckoutSettingsVisibility();
  selectAll();
  final DocumentAdapter listener=new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      getWizard().updateButtons();
    }
  }
;
  myModuleName.getDocument().addDocumentListener(listener);
  myVendor.getDocument().addDocumentListener(listener);
  myReleaseTag.getDocument().addDocumentListener(listener);
  myKeywordExpansionButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final CustomizeKeywordSubstitutionDialog dialog=new CustomizeKeywordSubstitutionDialog(project,CvsBundle.message("dialog.title.customize.keyword.substitutions"),importConfiguration);
      dialog.show();
    }
  }
);
  init();
}
