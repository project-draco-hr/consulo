{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null || !s_assertMethods.contains(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!InheritanceUtil.isInheritor(containingClass,"junit.framework.Assert") && !InheritanceUtil.isInheritor(containingClass,"org.junit.Assert")) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final int parameterCount=parameterList.getParametersCount();
  if (parameterCount < 2 && methodName.startsWith("assert")) {
    registerMethodCallError(expression);
    return;
  }
  if (parameterCount < 1) {
    registerMethodCallError(expression);
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType1=parameters[0].getType();
  if (!parameterType1.equals(stringType)) {
    registerMethodCallError(expression);
    return;
  }
  if (parameters.length != 2) {
    return;
  }
  final PsiType parameterType2=parameters[1].getType();
  if (!parameterType2.equals(stringType)) {
    return;
  }
  registerMethodCallError(expression);
}
