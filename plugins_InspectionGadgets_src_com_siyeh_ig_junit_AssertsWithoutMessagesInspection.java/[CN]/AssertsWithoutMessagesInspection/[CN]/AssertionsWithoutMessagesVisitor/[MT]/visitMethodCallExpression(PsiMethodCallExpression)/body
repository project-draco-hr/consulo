{
  super.visitMethodCallExpression(expression);
  if (!isJUnitAssertion(expression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  if (method == null) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  if (paramList == null) {
    return;
  }
  final PsiParameter[] parameters=paramList.getParameters();
  if (parameters.length < 2) {
    registerMethodCallError(expression);
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  if (paramType1.equals(stringType)) {
    if (parameters.length == 2) {
      final PsiType paramType2=parameters[1].getType();
      if (paramType2.equals(stringType)) {
        registerMethodCallError(expression);
      }
    }
  }
 else {
    registerMethodCallError(expression);
  }
}
