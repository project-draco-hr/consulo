{
  return new ProjectRootsTraversing.RootTraversePolicy.Visit<T>(){
    public void visit(    T entry,    ProjectRootsTraversing.TraverseState state,    RootPolicy<ProjectRootsTraversing.TraverseState> policy){
      Module ownerModule=entry.getOwnerModule();
      if (skipDependencyModules && originalModule != ownerModule)       return;
      if (originalModule != ownerModule && entry instanceof ModuleSourceOrderEntry) {
        MavenProject project=manager.findProject(originalModule);
        MavenProject depProject=manager.findProject(ownerModule);
        if (project == null || depProject == null) {
          original.visit(entry,state,policy);
          return;
        }
        for (        MavenArtifact each : project.findDependencies(depProject)) {
          boolean isTestClasspath=original == ProjectClasspathTraversing.ALL_OUTPUTS;
          if (!isTestClasspath && MavenConstants.SCOPE_PROVIDEED.equals(each.getScope()))           continue;
          if (isTestClasspath || !MavenConstants.SCOPE_TEST.equals(each.getScope())) {
            addOutput(ownerModule,MavenConstants.TYPE_TEST_JAR.equals(each.getType()),state);
          }
        }
      }
 else {
        if (entry instanceof ExportableOrderEntry) {
          boolean isTestClasspath=original == ProjectRootsTraversing.RootTraversePolicy.ADD_CLASSES || original == ProjectRootsTraversing.RootTraversePolicy.RECURSIVE;
          if (!isTestClasspath && ((ExportableOrderEntry)entry).getScope() == DependencyScope.PROVIDED)           return;
        }
        original.visit(entry,state,policy);
      }
    }
  }
;
}
