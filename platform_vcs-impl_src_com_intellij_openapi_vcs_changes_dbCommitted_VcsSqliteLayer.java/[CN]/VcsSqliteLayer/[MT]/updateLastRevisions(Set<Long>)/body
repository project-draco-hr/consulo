{
  final PreparedStatement maxStatement=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_MAX_REVISION,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection connection) throws SQLException {
      final String num=SqliteTables.REVISION.NUMBER_INT;
      return connection.prepareStatement("SELECT " + num + "MAX_REV, "+ SqliteTables.REVISION.DATE+ "MAX_DATE FROM "+ SqliteTables.REVISION.TABLE_NAME+ " WHERE MAX_REV=("+ " SELECT MAX("+ num+ ")  FROM "+ SqliteTables.REVISION.TABLE_NAME+ " WHERE "+ SqliteTables.REVISION.ROOT_FK+ " =?");
    }
  }
);
  final PreparedStatement minStatement=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_MIN_REVISION,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection connection) throws SQLException {
      final String num=SqliteTables.REVISION.NUMBER_INT;
      return connection.prepareStatement("SELECT " + num + "MIN_REV, "+ SqliteTables.REVISION.DATE+ "MIN_DATE FROM "+ SqliteTables.REVISION.TABLE_NAME+ " WHERE MIN_REV=("+ " SELECT MIN("+ num+ ")  FROM "+ SqliteTables.REVISION.TABLE_NAME+ " WHERE "+ SqliteTables.REVISION.ROOT_FK+ " =?");
    }
  }
);
  try {
    for (    final Long id : rootIdsToCheck) {
      maxStatement.setLong(1,id);
      final ResultSet set=maxStatement.executeQuery();
      SqliteUtil.readSelectResults(set,new ThrowableRunnable<SQLException>(){
        @Override public void run() throws SQLException {
          final long max=set.getLong(1);
          final long time=set.getLong(2);
          if (max > 0) {
            myKnownRepositoryLocations.setLastRevision(id,new RevisionId(max,time));
          }
        }
      }
);
      minStatement.setLong(1,id);
      final ResultSet setMin=minStatement.executeQuery();
      SqliteUtil.readSelectResults(setMin,new ThrowableRunnable<SQLException>(){
        @Override public void run() throws SQLException {
          final long min=setMin.getLong(1);
          final long time=setMin.getLong(2);
          if (min > 0) {
            myKnownRepositoryLocations.setFirstRevision(id,new RevisionId(min,time));
          }
        }
      }
);
    }
  }
 catch (  SQLException e) {
    throw new VcsException(e);
  }
}
