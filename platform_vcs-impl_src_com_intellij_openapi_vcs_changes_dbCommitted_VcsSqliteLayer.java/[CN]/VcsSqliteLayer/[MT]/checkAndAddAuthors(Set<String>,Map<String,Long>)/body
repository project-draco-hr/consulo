{
  final PreparedStatement statement=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection connection) throws SQLException {
      return connection.prepareStatement("SELECT " + SqliteTables.AUTHOR.ID + ", "+ SqliteTables.AUTHOR.NAME+ " FROM "+ SqliteTables.AUTHOR.TABLE_NAME+ " WHERE "+ SqliteTables.AUTHOR.NAME+ "=?");
    }
  }
);
  try {
    for (final Iterator<String> iterator=names.iterator(); iterator.hasNext(); ) {
      final String name=iterator.next();
      statement.setString(1,name);
      final ResultSet set=statement.executeQuery();
      SqliteUtil.readSelectResults(set,new ThrowableRunnable<SQLException>(){
        @Override public void run() throws SQLException {
          final long id=set.getLong(SqliteTables.AUTHOR.ID);
          myKnownRepositoryLocations.addKnownAuthor(name,id);
          known.put(name,id);
          iterator.remove();
        }
      }
);
    }
    if (names.isEmpty())     return;
    final PreparedStatement insertAuthor=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_ADD_AUTHOR,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
      @Override public PreparedStatement convert(      Connection connection) throws SQLException {
        return connection.prepareStatement("INSERT INTO " + SqliteTables.AUTHOR.TABLE_NAME + " ( "+ SqliteTables.AUTHOR.NAME+ ") VALUES (?)",Statement.RETURN_GENERATED_KEYS);
      }
    }
);
    for (    String name : names) {
      insertAuthor.setString(1,name);
      final long id=SqliteUtil.insert(insertAuthor);
      myKnownRepositoryLocations.addKnownAuthor(name,id);
      known.put(name,id);
    }
  }
 catch (  SQLException e) {
    throw new VcsException(e);
  }
}
