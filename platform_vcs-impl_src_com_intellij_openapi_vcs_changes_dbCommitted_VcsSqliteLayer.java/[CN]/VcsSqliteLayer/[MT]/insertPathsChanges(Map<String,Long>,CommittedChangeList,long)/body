{
  final PreparedStatement insert=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_INSERT_PATH_2_REVS,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection connection) throws SQLException {
      return connection.prepareStatement("INSERT INTO " + SqliteTables.PATHS_2_REVS.TABLE_NAME + " ( "+ StringUtil.join(Arrays.asList(SqliteTables.PATHS_2_REVS.PATH_FK,SqliteTables.PATHS_2_REVS.REVISION_FK,SqliteTables.PATHS_2_REVS.TYPE,SqliteTables.PATHS_2_REVS.COPY_PATH_ID,SqliteTables.PATHS_2_REVS.DELETE_PATH_ID)," , ")+ ") VALUES (?,?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
    }
  }
);
  try {
    insert.setLong(2,listId);
    for (    Change change : list.getChanges()) {
      final ChangeTypeEnum type=ChangeTypeEnum.getChangeType(change);
      if (change.getBeforeRevision() == null) {
        insert.setLong(1,paths.get(FileUtil.toSystemIndependentName(change.getAfterRevision().getFile().getPath())));
        insert.setLong(3,type.getCode());
        SqliteUtil.insert(insert);
      }
 else       if (ChangeTypeEnum.MOVE.equals(type)) {
        final Long beforeId=paths.get(FileUtil.toSystemIndependentName(change.getBeforeRevision().getFile().getPath()));
        insert.setLong(1,beforeId);
        insert.setLong(3,ChangeTypeEnum.DELETE.getCode());
        SqliteUtil.insert(insert);
        insert.setLong(1,paths.get(FileUtil.toSystemIndependentName(change.getAfterRevision().getFile().getPath())));
        insert.setLong(4,beforeId);
        insert.setLong(3,type.getCode());
        SqliteUtil.insert(insert);
      }
 else {
        insert.setLong(1,paths.get(FileUtil.toSystemIndependentName(change.getAfterRevision().getFile().getPath())));
        insert.setLong(3,type.getCode());
        SqliteUtil.insert(insert);
      }
    }
  }
 catch (  SQLException e) {
    throw new VcsException(e);
  }
}
