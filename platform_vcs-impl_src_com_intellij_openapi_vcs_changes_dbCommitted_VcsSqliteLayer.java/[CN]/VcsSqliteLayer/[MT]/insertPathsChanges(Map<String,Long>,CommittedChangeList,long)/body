{
  final PreparedStatement insert=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_INSERT_PATH_2_REVS,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection connection) throws SQLException {
      return connection.prepareStatement("INSERT INTO " + SqliteTables.PATHS_2_REVS.TABLE_NAME + " ( "+ StringUtil.join(Arrays.asList(SqliteTables.PATHS_2_REVS.PATH_FK,SqliteTables.PATHS_2_REVS.REVISION_FK,SqliteTables.PATHS_2_REVS.TYPE,SqliteTables.PATHS_2_REVS.COPY_PATH_ID,SqliteTables.PATHS_2_REVS.DELETE_PATH_ID,SqliteTables.PATHS_2_REVS.VISIBLE)," , ")+ ") VALUES (?,?,?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
    }
  }
);
  try {
    insert.setLong(2,listId);
    final Collection<Change> withMoved=list.getChangesWithMovedTrees();
    final Set<Change> simple=new HashSet<Change>(list.getChanges());
    for (    Change change : withMoved) {
      insertOneChange(paths,insert,change,simple.contains(change));
    }
  }
 catch (  SQLException e) {
    throw new VcsException(e);
  }
}
