{
  final PreparedStatement readVcses=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_VCS,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
    @Override public PreparedStatement convert(    Connection o) throws SQLException {
      return o.prepareStatement("SELECT * FROM VCS");
    }
  }
);
  try {
    final ResultSet set=readVcses.executeQuery();
    SqliteUtil.readSelectResults(set,new ThrowableRunnable<SQLException>(){
      @Override public void run() throws SQLException {
        final long id=set.getLong(SqliteTables.KNOWN_VCS.ID);
        final String name=set.getString(SqliteTables.KNOWN_VCS.NAME);
        myKnownRepositoryLocations.addVcs(name,id);
        vcsNamesSet.remove(name);
      }
    }
);
    if (vcsNamesSet.isEmpty())     return;
    final PreparedStatement insertStatement=myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_INSERT_VCS,new ThrowableConvertor<Connection,PreparedStatement,SQLException>(){
      @Override public PreparedStatement convert(      Connection o) throws SQLException {
        return o.prepareStatement("INSERT INTO " + SqliteTables.KNOWN_VCS.TABLE_NAME + " ("+ SqliteTables.KNOWN_VCS.NAME+ ") VALUES (?)",Statement.RETURN_GENERATED_KEYS);
      }
    }
);
    for (    String name : vcsNamesSet) {
      insertStatement.setString(1,name);
      final long id=SqliteUtil.insert(insertStatement);
      myKnownRepositoryLocations.addVcs(name,id);
    }
    myConnection.commit();
  }
 catch (  SQLException e) {
    throw new VcsException(e);
  }
}
