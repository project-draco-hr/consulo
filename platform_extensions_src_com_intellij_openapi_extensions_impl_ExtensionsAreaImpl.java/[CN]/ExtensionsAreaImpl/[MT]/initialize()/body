{
  for (  Map.Entry<String,String> entry : ourDefaultEPs.entrySet()) {
    String epName=entry.getKey();
    registerExtensionPoint(epName,entry.getValue());
  }
  getExtensionPoint(EPAvailabilityListenerExtension.EXTENSION_POINT_NAME).addExtensionPointListener(new ExtensionPointListener(){
    @Override @SuppressWarnings({"unchecked"}) public void extensionRemoved(    @NotNull Object extension,    final PluginDescriptor pluginDescriptor){
      EPAvailabilityListenerExtension epListenerExtension=(EPAvailabilityListenerExtension)extension;
      Collection<ExtensionPointAvailabilityListener> listeners=myAvailabilityListeners.get(epListenerExtension.getExtensionPointName());
      for (Iterator<ExtensionPointAvailabilityListener> iterator=listeners.iterator(); iterator.hasNext(); ) {
        ExtensionPointAvailabilityListener listener=iterator.next();
        if (listener.getClass().getName().equals(epListenerExtension.getListenerClass())) {
          iterator.remove();
          return;
        }
      }
      myLogger.warn("Failed to find EP availability listener: " + epListenerExtension.getListenerClass());
    }
    @Override public void extensionAdded(    @NotNull Object extension,    final PluginDescriptor pluginDescriptor){
      EPAvailabilityListenerExtension epListenerExtension=(EPAvailabilityListenerExtension)extension;
      try {
        String epName=epListenerExtension.getExtensionPointName();
        ExtensionPointAvailabilityListener listener=(ExtensionPointAvailabilityListener)instantiate(epListenerExtension.loadListenerClass());
        addAvailabilityListener(epName,listener);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
}
