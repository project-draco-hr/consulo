{
  final String id=element.getAttributeValue("id");
  if (id == null)   return null;
  final String summary=element.getAttributeValue("summary");
  if (summary == null)   return null;
  final String description=element.getAttributeValue("description");
  String type=element.getAttributeValue("type");
  TaskType taskType=TaskType.OTHER;
  if (type != null) {
    try {
      taskType=TaskType.valueOf(type.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
    }
  }
  final TaskType finalTaskType=taskType;
  final Date updated=new Date(Long.parseLong(element.getAttributeValue("updated")));
  final Date created=new Date(Long.parseLong(element.getAttributeValue("created")));
  return new Task(){
    @Override public boolean isIssue(){
      return true;
    }
    @Override public String getIssueUrl(){
      return getUrl() + "/issue/" + getId();
    }
    @NotNull @Override public String getId(){
      return id;
    }
    @NotNull @Override public String getSummary(){
      return summary;
    }
    public String getDescription(){
      return description;
    }
    @NotNull @Override public Comment[] getComments(){
      return Comment.EMPTY_ARRAY;
    }
    @NotNull @Override public Icon getIcon(){
      return TasksIcons.Youtrack;
    }
    @NotNull @Override public TaskType getType(){
      return finalTaskType;
    }
    @Nullable @Override public Date getUpdated(){
      return updated;
    }
    @Nullable @Override public Date getCreated(){
      return created;
    }
    @Override public boolean isClosed(){
      return false;
    }
    @Override public TaskRepository getRepository(){
      return YouTrackRepository.this;
    }
  }
;
}
