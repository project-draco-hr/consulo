{
  if (!(usage instanceof PsiElementUsage)) {
    return null;
  }
  final PsiElement psiElement=((PsiElementUsage)usage).getElement();
  final PsiFile containingFile=psiElement.getContainingFile();
  PsiFile topLevelFile=InjectedLanguageUtil.getTopLevelFile(containingFile);
  if (!(topLevelFile instanceof PsiJavaFile) || topLevelFile instanceof JspFile) {
    return null;
  }
  PsiElement containingClass=topLevelFile == containingFile ? psiElement : containingFile.getContext();
  do {
    containingClass=PsiTreeUtil.getParentOfType(containingClass,PsiClass.class,true);
    if (containingClass == null || ((PsiClass)containingClass).getQualifiedName() != null)     break;
  }
 while (true);
  if (containingClass == null) {
    PsiImportList importList=PsiTreeUtil.getParentOfType(psiElement,PsiImportList.class,true);
    if (importList != null) {
      final String fileName=getFileNameWithoutExtension(topLevelFile);
      final PsiClass[] classes=((PsiJavaFile)topLevelFile).getClasses();
      for (      final PsiClass aClass : classes) {
        if (fileName.equals(aClass.getName())) {
          containingClass=aClass;
          break;
        }
      }
    }
  }
 else {
    if (containingClass.getParent() instanceof PsiFile && JspPsiUtil.isInJspFile(containingClass)) {
      containingClass=null;
    }
  }
  if (containingClass != null) {
    return new ClassUsageGroup((PsiClass)containingClass);
  }
  final VirtualFile virtualFile=topLevelFile.getVirtualFile();
  if (virtualFile != null) {
    return new FileGroupingRule.FileUsageGroup(topLevelFile.getProject(),virtualFile);
  }
  return null;
}
