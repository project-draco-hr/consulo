{
  ProgressManager.getInstance().checkCanceled();
  final PsiElement scopePsi=SourceTreeToPsiMap.treeElementToPsi(scope);
  if (scopePsi instanceof PsiWhiteSpace) {
    return true;
  }
  final Language lang=scopePsi.getLanguage();
  if (lang.getFindUsagesProvider().mayHaveReferences(scope.getElementType(),searchContext)) {
    if (scope instanceof LeafElement) {
      LeafElement leaf=(LeafElement)scope;
      int startOffset=0;
      int endOffset=leaf.getTextLength();
      do {
        int i=leaf.searchWord(startOffset,searcher);
        if (i >= 0) {
          if (!processor.execute(scopePsi,i))           return false;
          startOffset=i + 1;
        }
 else {
          return true;
        }
      }
 while (startOffset < endOffset);
    }
 else {
      char[] buffer=((CompositeElement)scope).textToCharArray();
      int startOffset=0;
      int endOffset=buffer.length;
      final int originalStartOffset=startOffset;
      do {
        int i=searchWord(buffer,startOffset,endOffset,searcher);
        if (i >= 0) {
          if (!processor.execute(scopePsi,i - originalStartOffset))           return false;
          startOffset=i + 1;
        }
 else {
          return true;
        }
      }
 while (startOffset < endOffset);
    }
  }
  if (scope instanceof CompositeElement) {
    return processChildren(scope,searcher,processor,progress,searchContext);
  }
  return true;
}
