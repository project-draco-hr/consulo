{
  ProgressManager.getInstance().checkCanceled();
  if (elementTypes.isInSet(scope.getElementType())) {
    int startOffset;
    int endOffset;
    if (scope instanceof LeafElement) {
      LeafElement leaf=(LeafElement)scope;
      startOffset=0;
      endOffset=leaf.getTextLength();
      do {
        int i=leaf.searchWord(startOffset,searcher);
        if (i >= 0) {
          if (!processor.execute(SourceTreeToPsiMap.treeElementToPsi(scope),i))           return false;
          startOffset=i + 1;
        }
 else {
          return true;
        }
      }
 while (startOffset < endOffset);
      endOffset=startOffset + leaf.getTextLength();
    }
 else {
      char[] buffer=scope.textToCharArray();
      startOffset=0;
      endOffset=buffer.length;
      final int originalStartOffset=startOffset;
      do {
        int i=searchWord(buffer,startOffset,endOffset,searcher);
        if (i >= 0) {
          if (!processor.execute(SourceTreeToPsiMap.treeElementToPsi(scope),i - originalStartOffset))           return false;
          startOffset=i + 1;
        }
 else {
          return true;
        }
      }
 while (startOffset < endOffset);
    }
  }
  if (scope instanceof CompositeElement) {
    return processChildren(scope,searcher,processor,elementTypes,progress);
  }
  return true;
}
