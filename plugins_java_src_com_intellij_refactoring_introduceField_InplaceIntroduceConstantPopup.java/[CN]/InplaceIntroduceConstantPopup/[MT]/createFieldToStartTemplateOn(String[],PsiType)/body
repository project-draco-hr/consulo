{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
  return ApplicationManager.getApplication().runWriteAction(new Computable<PsiField>(){
    @Override public PsiField compute(){
      PsiField field=elementFactory.createFieldFromText(psiType.getCanonicalText() + " " + (getInputName() != null ? getInputName() : names[0])+ " = "+ myInitializerText+ ";",myParentClass);
      PsiUtil.setModifierProperty(field,PsiModifier.FINAL,true);
      PsiUtil.setModifierProperty(field,PsiModifier.STATIC,true);
      final String visibility=getSelectedVisibility();
      if (visibility != null) {
        PsiUtil.setModifierProperty(field,visibility,true);
      }
      final PsiElement anchorElementIfAll=getAnchorElementIfAll();
      PsiElement finalAnchorElement;
      for (finalAnchorElement=anchorElementIfAll; finalAnchorElement != null && finalAnchorElement.getParent() != myParentClass; finalAnchorElement=finalAnchorElement.getParent()) {
      }
      PsiMember anchorMember=finalAnchorElement instanceof PsiMember ? (PsiMember)finalAnchorElement : null;
      field=BaseExpressionToFieldHandler.ConvertToFieldRunnable.appendField(myExpr,BaseExpressionToFieldHandler.InitializationPlace.IN_FIELD_DECLARATION,myParentClass,myParentClass,field,anchorMember);
      myFieldRangeStart=myEditor.getDocument().createRangeMarker(field.getTextRange());
      return field;
    }
  }
);
}
