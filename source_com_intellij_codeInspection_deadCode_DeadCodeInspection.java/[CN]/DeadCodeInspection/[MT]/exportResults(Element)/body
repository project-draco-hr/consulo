{
  final RefUnreferencedFilter filter=new RefUnreferencedFilter();
  final DeadHTMLComposer composer=new DeadHTMLComposer(this);
  checkForReachables();
  getRefManager().iterate(new RefManager.RefIterator(){
    public void accept(    RefElement refElement){
      if (filter.accepts(refElement)) {
        if (refElement instanceof RefImplicitConstructor)         refElement=((RefImplicitConstructor)refElement).getOwnerClass();
        Element element=XMLExportUtl.createElement(refElement,parentNode,-1);
        Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
        problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"));
        element.addContent(problemClassElement);
        Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
        StringBuffer buf=new StringBuffer();
        composer.appendProblemSynopsis(refElement,buf);
        descriptionElement.addContent(buf.toString());
        element.addContent(descriptionElement);
      }
    }
  }
);
}
