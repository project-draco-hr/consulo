{
  getRefManager().findAllDeclarations();
  getRefManager().iterate(new RefManager.RefIterator(){
    public void accept(    final RefElement refElement){
      if (!refElement.isSuspicious())       return;
      refElement.accept(new RefVisitor(){
        public void visitMethod(        RefMethod method){
          if (isAddMainsEnabled() && method.isAppMain()) {
            getEntryPointsManager().addEntryPoint(method,false);
          }
        }
        public void visitClass(        RefClass aClass){
          if (isAddJUnitEnabled() && aClass.isTestCase()) {
            PsiClass psiClass=(PsiClass)aClass.getElement();
            addTestcaseEntries(psiClass);
          }
 else           if (isAddAppletEnabled() && aClass.isApplet() || isAddServletEnabled() && aClass.isServlet() || aClass.isEjb()) {
            getEntryPointsManager().addEntryPoint(aClass,false);
          }
        }
      }
);
    }
  }
);
  if (isAddNonJavaUsedEnabled()) {
    checkForReachables();
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        final RefFilter filter=new StrictUnreferencedFilter();
        final PsiSearchHelper helper=PsiManager.getInstance(getRefManager().getProject()).getSearchHelper();
        getRefManager().iterate(new RefManager.RefIterator(){
          public void accept(          final RefElement refElement){
            if (refElement instanceof RefClass && filter.accepts(refElement)) {
              findExternalClassReferences((RefClass)refElement);
            }
 else             if (refElement instanceof RefMethod) {
              RefMethod refMethod=(RefMethod)refElement;
              if (refMethod.isConstructor() && filter.accepts(refMethod)) {
                findExternalClassReferences(refMethod.getOwnerClass());
              }
            }
          }
          private void findExternalClassReferences(          final RefClass refElement){
            PsiClass psiClass=(PsiClass)refElement.getElement();
            String qualifiedName=psiClass.getQualifiedName();
            if (qualifiedName != null) {
              helper.processUsagesInNonJavaFiles(qualifiedName,new PsiNonJavaFileReferenceProcessor(){
                public boolean process(                PsiFile file,                int startOffset,                int endOffset){
                  getEntryPointsManager().addEntryPoint(refElement,false);
                  return false;
                }
              }
,GlobalSearchScope.projectScope(myProject));
            }
          }
        }
);
      }
    }
,null);
  }
  myProcessedSuspicious=new HashSet<RefElement>();
  myPhase=1;
}
