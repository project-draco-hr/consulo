{
  myLoadCounter=0;
  myProject=project;
  myVcsManager=vcsManager;
  myStatusProvider=statusProvider;
  myApplication=application;
  myFileEditorManager=fileEditorManager;
  myLineStatusTrackers=new HashMap<Document,LineStatusTracker>();
  myPartner=new QueueProcessorRemovePartner<Document,BaseRevisionLoader>(myProject,new Consumer<BaseRevisionLoader>(){
    @Override public void consume(    BaseRevisionLoader baseRevisionLoader){
      baseRevisionLoader.run();
    }
  }
);
  project.getMessageBus().connect().subscribe(DocumentBulkUpdateListener.TOPIC,new DocumentBulkUpdateListener.Adapter(){
    @Override public void updateStarted(    @NotNull final Document doc){
      final LineStatusTracker tracker=getLineStatusTracker(doc);
      if (tracker != null)       tracker.startBulkUpdate();
    }
    @Override public void updateFinished(    @NotNull final Document doc){
      final LineStatusTracker tracker=getLineStatusTracker(doc);
      if (tracker != null)       tracker.finishBulkUpdate();
    }
  }
);
  myDisposable=new Disposable(){
    @Override public void dispose(){
synchronized (myLock) {
        for (        final LineStatusTracker tracker : myLineStatusTrackers.values()) {
          tracker.release();
        }
        myLineStatusTrackers.clear();
        myPartner.clear();
      }
    }
  }
;
  Disposer.register(myProject,myDisposable);
}
