{
  trackAwtThread();
  final MyFileStatusListener fileStatusListener=new MyFileStatusListener();
  final EditorFactoryListener editorFactoryListener=new MyEditorFactoryListener();
  final MyVirtualFileListener virtualFileListener=new MyVirtualFileListener();
  final EditorColorsListener editorColorsListener=new EditorColorsListener(){
    public void globalSchemeChange(    EditorColorsScheme scheme){
      resetTrackersForOpenFiles();
    }
  }
;
  myLineStatusTrackers=new HashMap<Document,LineStatusTracker>();
  final FileStatusManager fsManager=FileStatusManager.getInstance(myProject);
  fsManager.addFileStatusListener(fileStatusListener,myProject);
  final EditorFactory editorFactory=EditorFactory.getInstance();
  editorFactory.addEditorFactoryListener(editorFactoryListener,myProject);
  final VirtualFileManager virtualFileManager=VirtualFileManager.getInstance();
  virtualFileManager.addVirtualFileListener(virtualFileListener,myProject);
  final EditorColorsManager editorColorsManager=EditorColorsManager.getInstance();
  editorColorsManager.addEditorColorsListener(editorColorsListener);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      trackAwtThread();
      fsManager.removeFileStatusListener(fileStatusListener);
      virtualFileManager.removeVirtualFileListener(virtualFileListener);
      editorColorsManager.removeEditorColorsListener(editorColorsListener);
    }
  }
);
}
