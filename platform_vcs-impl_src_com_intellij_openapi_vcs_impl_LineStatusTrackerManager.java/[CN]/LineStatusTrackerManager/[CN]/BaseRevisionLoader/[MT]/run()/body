{
  if (isDisabled())   return;
  if (!myVirtualFile.isValid()) {
    log("BaseRevisionLoader failed: virtual file not valid",myVirtualFile);
    reportTrackerBaseLoadFailed();
    return;
  }
  VcsBaseContentProvider.BaseContent baseContent=myStatusProvider.getBaseRevision(myVirtualFile);
  if (baseContent == null) {
    log("BaseRevisionLoader failed: null returned for base revision",myVirtualFile);
    reportTrackerBaseLoadFailed();
    return;
  }
  final VcsRevisionNumber revisionNumber=baseContent.getRevisionNumber();
  final Charset charset=myVirtualFile.getCharset();
  final long loadCounter=myLoadCounter;
  myLoadCounter++;
synchronized (myLock) {
    final TrackerData data=myLineStatusTrackers.get(myDocument);
    if (data == null) {
      log("BaseRevisionLoader canceled: tracker already released",myVirtualFile);
      return;
    }
    if (!data.shouldBeUpdated(revisionNumber,charset,loadCounter)) {
      log("BaseRevisionLoader canceled: no need to update",myVirtualFile);
      return;
    }
  }
  String lastUpToDateContent=baseContent.loadContent();
  if (lastUpToDateContent == null) {
    log("BaseRevisionLoader failed: can't load up-to-date content",myVirtualFile);
    reportTrackerBaseLoadFailed();
    return;
  }
  final String converted=StringUtil.convertLineSeparators(lastUpToDateContent);
  final Runnable runnable=new Runnable(){
    @Override public void run(){
synchronized (myLock) {
        final TrackerData data=myLineStatusTrackers.get(myDocument);
        if (data == null) {
          log("BaseRevisionLoader initializing: tracker already released",myVirtualFile);
          return;
        }
        if (!data.shouldBeUpdated(revisionNumber,charset,loadCounter)) {
          log("BaseRevisionLoader initializing: canceled",myVirtualFile);
          return;
        }
        log("BaseRevisionLoader initializing: success",myVirtualFile);
        myLineStatusTrackers.put(myDocument,new TrackerData(data.tracker,revisionNumber,charset,loadCounter));
        data.tracker.setBaseRevision(converted);
      }
    }
  }
;
  nonModalAliveInvokeLater(runnable);
}
