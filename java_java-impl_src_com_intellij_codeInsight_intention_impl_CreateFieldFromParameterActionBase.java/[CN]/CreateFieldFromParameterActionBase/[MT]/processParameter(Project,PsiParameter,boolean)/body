{
  final PsiType type=getSubstitutedType(myParameter);
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
  final String parameterName=myParameter.getName();
  String propertyName=styleManager.variableNameToPropertyName(parameterName,VariableKind.PARAMETER);
  String fieldNameToCalc;
  boolean isFinalToCalc;
  final PsiClass targetClass=PsiTreeUtil.getParentOfType(myParameter,PsiClass.class);
  final PsiMethod method=(PsiMethod)myParameter.getDeclarationScope();
  final boolean isMethodStatic=method.hasModifierProperty(PsiModifier.STATIC);
  VariableKind kind=isMethodStatic ? VariableKind.STATIC_FIELD : VariableKind.FIELD;
  SuggestedNameInfo suggestedNameInfo=styleManager.suggestVariableName(kind,propertyName,null,type);
  String[] names=suggestedNameInfo.names;
  if (isInteractive) {
    List<String> namesList=new ArrayList<String>();
    ContainerUtil.addAll(namesList,names);
    String defaultName=styleManager.propertyNameToVariableName(propertyName,kind);
    if (namesList.contains(defaultName)) {
      Collections.swap(namesList,0,namesList.indexOf(defaultName));
    }
 else {
      namesList.add(0,defaultName);
    }
    names=ArrayUtil.toStringArray(namesList);
    final CreateFieldFromParameterDialog dialog=new CreateFieldFromParameterDialog(project,names,targetClass,method.isConstructor(),type);
    dialog.show();
    if (!dialog.isOK())     return;
    fieldNameToCalc=dialog.getEnteredName();
    isFinalToCalc=dialog.isDeclareFinal();
    suggestedNameInfo.nameChosen(fieldNameToCalc);
  }
 else {
    isFinalToCalc=!isMethodStatic && method.isConstructor();
    fieldNameToCalc=names[0];
  }
  final boolean isFinal=isFinalToCalc;
  final String fieldName=fieldNameToCalc;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        performRefactoring(project,targetClass,method,myParameter,type,fieldName,isMethodStatic,isFinal);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
