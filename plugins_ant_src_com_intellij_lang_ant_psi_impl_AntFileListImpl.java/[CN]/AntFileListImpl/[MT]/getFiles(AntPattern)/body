{
  final File root=getCanonicalFile(computeAttributeValue(getSourceElement().getAttributeValue("dir")));
  if (root == null) {
    return Collections.emptyList();
  }
  final ArrayList<File> files=new ArrayList<File>();
  final String filenames=getSourceElement().getAttributeValue("files");
  if (filenames != null) {
    final StringTokenizer tokenizer=new StringTokenizer(filenames,", \t\n\r\f",false);
    while (tokenizer.hasMoreTokens()) {
      files.add(new File(root,tokenizer.nextToken()));
    }
  }
  final AntElement[] children=getChildren();
  final AntTypeDefinition selfTypeDef=getTypeDefinition();
  if (selfTypeDef != null) {
    for (    AntElement child : children) {
      if (child instanceof AntStructuredElement) {
        final AntStructuredElement se=(AntStructuredElement)child;
        final AntTypeDefinition typeDef=se.getTypeDefinition();
        if (typeDef != null && selfTypeDef.getNestedClassName(typeDef.getTypeId()) != null) {
          final String fileName=computeAttributeValue(se.getSourceElement().getAttributeValue("name"));
          if (fileName != null) {
            files.add(new File(root,fileName));
          }
        }
      }
    }
  }
  return files;
}
