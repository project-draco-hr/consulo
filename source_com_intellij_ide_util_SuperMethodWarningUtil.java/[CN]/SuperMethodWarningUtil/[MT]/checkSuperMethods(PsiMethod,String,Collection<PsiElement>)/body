{
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return new PsiMethod[]{method};
  final Collection<PsiMethod> superMethods=DeepestSuperMethodsSearch.search(method).findAll();
  if (ignore != null) {
    superMethods.removeAll(ignore);
  }
  if (superMethods.isEmpty())   return new PsiMethod[]{method};
  Set<String> superClasses=new HashSet<String>();
  boolean superAbstract=false;
  boolean parentInterface=false;
  for (  final PsiMethod superMethod : superMethods) {
    final PsiClass containingClass=superMethod.getContainingClass();
    superClasses.add(containingClass.getQualifiedName());
    final boolean isInterface=containingClass.isInterface();
    superAbstract|=isInterface || superMethod.hasModifierProperty(PsiModifier.ABSTRACT);
    parentInterface|=isInterface;
  }
  SuperMethodWarningDialog dialog=new SuperMethodWarningDialog(method.getProject(),UsageViewUtil.getDescriptiveName(method),actionString,superAbstract,parentInterface,aClass.isInterface(),superClasses.toArray(new String[superClasses.size()]));
  dialog.show();
  if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
    return superMethods.toArray(new PsiMethod[superMethods.size()]);
  }
  if (dialog.getExitCode() == SuperMethodWarningDialog.NO_EXIT_CODE) {
    return new PsiMethod[]{method};
  }
  return PsiMethod.EMPTY_ARRAY;
}
