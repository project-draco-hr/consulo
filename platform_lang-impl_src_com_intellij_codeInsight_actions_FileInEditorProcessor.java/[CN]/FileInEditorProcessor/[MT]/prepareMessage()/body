{
  StringBuilder builder=new StringBuilder("<html>");
  LayoutCodeInfoCollector notifications=myProcessor.getInfoCollector();
  LOG.assertTrue(notifications != null);
  if (notifications.isEmpty() && !myNoChangesDetected) {
    if (myProcessChangesTextOnly) {
      builder.append("No lines changed: changes since last revision are already properly formatted").append("<br>");
    }
 else {
      builder.append("No lines changed: code is already properly formatted").append("<br>");
    }
  }
 else {
    if (notifications.hasReformatOrRearrangeNotification()) {
      String reformatInfo=notifications.getReformatCodeNotification();
      String rearrangeInfo=notifications.getRearrangeCodeNotification();
      builder.append(joinWithCommaAndCapitalize(reformatInfo,rearrangeInfo));
      if (myProcessChangesTextOnly) {
        builder.append(" in changes since last revision");
      }
      builder.append("<br>");
    }
 else     if (myNoChangesDetected) {
      builder.append("No lines changed: no changes since last revision").append("<br>");
    }
    String optimizeImportsNotification=notifications.getOptimizeImportsNotification();
    if (optimizeImportsNotification != null) {
      builder.append(StringUtil.capitalize(optimizeImportsNotification)).append("<br>");
    }
  }
  String shortcutText=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction("ShowReformatFileDialog"));
  String color=ColorUtil.toHex(JBColor.gray);
  builder.append("<span style='color:#").append(color).append("'>").append("<a href=''>Show</a> reformat dialog: ").append(shortcutText).append("</span>").append("</html>");
  return builder.toString();
}
