{
  return new JavaElementVisitor(){
    public final void visitReferenceExpression(    PsiReferenceExpression expression){
      visitExpression(expression);
    }
    @Override public void visitExpression(    PsiExpression expression){
      final PsiElement element=expression.getParent();
      if (element instanceof PsiExpressionList) {
        check(expression,holder,false);
      }
 else       if (element instanceof PsiNameValuePair) {
        final PsiNameValuePair valuePair=(PsiNameValuePair)element;
        final String name=valuePair.getName();
        if (name == null || name.equals(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)) {
          check(expression,holder,true);
        }
      }
    }
    @Override public void visitReturnStatement(    PsiReturnStatement statement){
      final PsiExpression returnValue=statement.getReturnValue();
      if (returnValue != null) {
        check(returnValue,holder,false);
      }
    }
    @Override public void visitVariable(    PsiVariable var){
      final PsiExpression initializer=var.getInitializer();
      if (initializer != null) {
        check(initializer,holder,false);
      }
    }
    @Override public void visitAssignmentExpression(    PsiAssignmentExpression expression){
      final PsiExpression e=expression.getRExpression();
      if (e != null) {
        check(e,holder,false);
      }
      visitExpression(expression);
    }
    private void check(    @NotNull PsiExpression expression,    ProblemsHolder holder,    boolean isAnnotationValue){
      if (expression instanceof PsiConditionalExpression) {
        final PsiConditionalExpression expr=((PsiConditionalExpression)expression);
        PsiExpression e=expr.getThenExpression();
        if (e != null) {
          check(e,holder,isAnnotationValue);
        }
        e=expr.getElseExpression();
        if (e != null) {
          check(e,holder,isAnnotationValue);
        }
      }
 else {
        final PsiType type=expression.getType();
        if (type != null && PsiUtilEx.isString(type)) {
          final PsiModifierListOwner element;
          if (isAnnotationValue) {
            final PsiAnnotation psiAnnotation=PsiTreeUtil.getParentOfType(expression,PsiAnnotation.class);
            if (psiAnnotation != null && myConfiguration.getSubstAnnotationClass().equals(psiAnnotation.getQualifiedName())) {
              element=PsiTreeUtil.getParentOfType(expression,PsiModifierListOwner.class);
            }
 else {
              return;
            }
          }
 else {
            element=AnnotationUtilEx.getAnnotatedElementFor(expression,AnnotationUtilEx.LookupType.PREFER_CONTEXT);
          }
          if (element != null) {
            final PsiAnnotation[] annotations=AnnotationUtilEx.getAnnotationFrom(element,myConfiguration.getPatternAnnotationPair(),true);
            checkExpression(expression,annotations,holder);
          }
        }
      }
    }
  }
;
}
