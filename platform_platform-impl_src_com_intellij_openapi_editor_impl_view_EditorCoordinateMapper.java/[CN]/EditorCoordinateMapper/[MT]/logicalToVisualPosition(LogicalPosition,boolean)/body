{
  int line=pos.line;
  int column=pos.column;
  int logicalLineCount=myDocument.getLineCount();
  if (line >= logicalLineCount) {
    return new VisualPosition(line - logicalLineCount + myView.getEditor().getVisibleLineCount(),column,pos.leansForward);
  }
  int offset=logicalPositionToOffset(pos);
  int visualLine=offsetToVisualLine(offset,beforeSoftWrap);
  int maxVisualColumn=0;
  int maxLogicalColumn=0;
  for (  VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,offset,beforeSoftWrap)) {
    if (!pos.leansForward && offset == fragment.getVisualLineStartOffset()) {
      return new VisualPosition(visualLine,fragment.getStartVisualColumn());
    }
    if (fragment.isCollapsedFoldRegion()) {
      int startLogicalLine=fragment.getStartLogicalLine();
      int endLogicalLine=fragment.getEndLogicalLine();
      int startLogicalColumn=fragment.getStartLogicalColumn();
      int endLogicalColumn=fragment.getEndLogicalColumn();
      if ((line > startLogicalLine || line == startLogicalLine && (column > startLogicalColumn || column == startLogicalColumn && pos.leansForward)) && (line < endLogicalLine || line == endLogicalLine && column < endLogicalColumn)) {
        return new VisualPosition(visualLine,fragment.getStartVisualColumn(),true);
      }
      if (line == endLogicalLine && column == endLogicalColumn && !pos.leansForward) {
        return new VisualPosition(visualLine,fragment.getEndVisualColumn());
      }
      maxLogicalColumn=startLogicalLine == endLogicalLine ? Math.max(maxLogicalColumn,endLogicalColumn) : endLogicalColumn;
    }
 else {
      int minColumn=fragment.getMinLogicalColumn();
      int maxColumn=fragment.getMaxLogicalColumn();
      if (line == fragment.getStartLogicalLine() && (column > minColumn && column < maxColumn || column == minColumn && pos.leansForward || column == maxColumn && !pos.leansForward)) {
        return new VisualPosition(visualLine,fragment.logicalToVisualColumn(column),fragment.isRtl() ^ pos.leansForward);
      }
      maxLogicalColumn=Math.max(maxLogicalColumn,maxColumn);
    }
    maxVisualColumn=fragment.getEndVisualColumn();
  }
  int resultColumn=column - maxLogicalColumn + maxVisualColumn;
  if (resultColumn < 0) {
    if (maxVisualColumn > maxLogicalColumn) {
      resultColumn=Integer.MAX_VALUE;
    }
 else {
      LOG.error("Error converting " + pos + " to visual position",new Attachment("details.txt",String.format("offset: %d, visual line: %d, max logical column: %d, max visual column: %d",offset,visualLine,maxLogicalColumn,maxVisualColumn)),new Attachment("dump.txt",myView.getEditor().dumpState()));
      resultColumn=0;
    }
  }
  return new VisualPosition(visualLine,resultColumn,pos.leansForward);
}
