{
  int visualLine=yToVisualLine(p.y);
  int lastColumn=0;
  float x=getStartX(visualLine);
  int px=p.x;
  if (visualLine < myView.getEditor().getVisibleLineCount()) {
    int visualLineStartOffset=visualLineToOffset(visualLine);
    int maxOffset=0;
    for (    VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,visualLineStartOffset,false)) {
      if (px <= fragment.getStartX()) {
        if (fragment.getStartVisualColumn() == 0) {
          return new VisualPosition(visualLine,0);
        }
        int markerWidth=myView.getEditor().getSoftWrapModel().getMinDrawingWidthInPixels(SoftWrapDrawingType.AFTER_SOFT_WRAP);
        float indent=fragment.getStartX() - markerWidth;
        if (px <= indent) {
          break;
        }
        boolean after=px >= indent + markerWidth / 2;
        return new VisualPosition(visualLine,fragment.getStartVisualColumn() - (after ? 0 : 1),!after);
      }
      float nextX=fragment.getEndX();
      if (px <= nextX) {
        int[] column=fragment.xToVisualColumn(px);
        return new VisualPosition(visualLine,column[0],column[1] > 0);
      }
      x=nextX;
      lastColumn=fragment.getEndVisualColumn();
      maxOffset=Math.max(maxOffset,fragment.getMaxOffset());
    }
    if (myView.getEditor().getSoftWrapModel().getSoftWrap(maxOffset) != null) {
      int markerWidth=myView.getEditor().getSoftWrapModel().getMinDrawingWidthInPixels(SoftWrapDrawingType.BEFORE_SOFT_WRAP_LINE_FEED);
      if (px <= x + markerWidth) {
        boolean after=px >= x + markerWidth / 2;
        return new VisualPosition(visualLine,lastColumn + (after ? 1 : 0),!after);
      }
      px-=markerWidth;
      lastColumn++;
    }
  }
  int plainSpaceWidth=myView.getPlainSpaceWidth();
  int remainingShift=(int)(px - x);
  int additionalColumns=remainingShift <= 0 ? 0 : (remainingShift + plainSpaceWidth / 2) / plainSpaceWidth;
  return new VisualPosition(visualLine,lastColumn + additionalColumns,remainingShift > 0 && additionalColumns == (remainingShift - 1) / plainSpaceWidth);
}
