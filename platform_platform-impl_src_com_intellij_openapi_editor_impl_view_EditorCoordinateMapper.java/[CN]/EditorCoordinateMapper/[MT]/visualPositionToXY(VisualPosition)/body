{
  int visualLine=pos.line;
  int column=pos.column;
  int y=visualLineToY(visualLine);
  float x=getStartX(visualLine);
  int lastColumn=0;
  if (visualLine < myView.getEditor().getVisibleLineCount()) {
    int visualLineStartOffset=visualLineToOffset(visualLine);
    int maxOffset=0;
    for (    VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,visualLineStartOffset,false)) {
      if (column < fragment.getStartVisualColumn()) {
        break;
      }
      int endColumn=fragment.getEndVisualColumn();
      if (column <= endColumn) {
        return new Point((int)fragment.visualColumnToX(column),y);
      }
      x=fragment.getEndX();
      lastColumn=endColumn;
      maxOffset=Math.max(maxOffset,fragment.getMaxOffset());
    }
    if (myView.getEditor().getSoftWrapModel().getSoftWrap(maxOffset) != null) {
      column--;
      x+=myView.getEditor().getSoftWrapModel().getMinDrawingWidthInPixels(SoftWrapDrawingType.BEFORE_SOFT_WRAP_LINE_FEED);
    }
  }
  int additionalShift=column <= lastColumn ? 0 : (column - lastColumn) * myView.getPlainSpaceWidth();
  return new Point((int)(x) + additionalShift,y);
}
