{
  if (myPreviousAlgorithm != null) {
    myPreviousAlgorithm.stop();
  }
  final List<LoaderAndRefresher<CommitHashPlusParents>> list=new ArrayList<LoaderAndRefresher<CommitHashPlusParents>>();
  final List<VirtualFile> roots=rootsHolder.getRoots();
  int i=0;
  for (  VirtualFile root : roots) {
    final LoaderAndRefresherImpl.MyRootHolder rootHolder=roots.size() == 1 ? new LoaderAndRefresherImpl.OneRootHolder(root) : new LoaderAndRefresherImpl.ManyCaseHolder(i,rootsHolder);
    if (filters.isEmpty()) {
      final LoaderAndRefresherImpl loaderAndRefresher=new LoaderAndRefresherImpl(ticket,Collections.<ChangesFilter.Filter>emptyList(),myMediator,startingPoints,myDetailsCache,myProject,rootHolder,myUsersIndex,loadGrowthController.getId());
      list.add(loaderAndRefresher);
    }
 else {
      Collection<Collection<ChangesFilter.Filter>> reordered=new ArrayList<Collection<ChangesFilter.Filter>>();
      final Iterator<Collection<ChangesFilter.Filter>> iterator=filters.iterator();
      if (iterator.hasNext()) {
        final Collection<ChangesFilter.Filter> first=iterator.next();
        for (        ChangesFilter.Filter filter : first) {
          final ArrayList<ChangesFilter.Filter> newList=new ArrayList<ChangesFilter.Filter>();
          newList.add(filter);
          reordered.add(newList);
        }
      }
      while (iterator.hasNext()) {
        final Collection<ChangesFilter.Filter> next=iterator.next();
        final Collection<Collection<ChangesFilter.Filter>> reorderedCopy=reordered;
        reordered=new ArrayList<Collection<ChangesFilter.Filter>>();
        for (        ChangesFilter.Filter filter : next) {
          for (          Collection<ChangesFilter.Filter> filterCollection : reorderedCopy) {
            final ArrayList<ChangesFilter.Filter> newList=new ArrayList<ChangesFilter.Filter>(filterCollection);
            newList.add(filter);
            reordered.add(newList);
          }
        }
      }
      for (      Collection<ChangesFilter.Filter> filterCollection : reordered) {
        final LoaderAndRefresherImpl loaderAndRefresher=new LoaderAndRefresherImpl(ticket,filterCollection,myMediator,startingPoints,myDetailsCache,myProject,rootHolder,myUsersIndex,loadGrowthController.getId());
        list.add(loaderAndRefresher);
      }
    }
    ++i;
  }
  myUsersComponent.acceptUpdate(myUsersIndex.getKeys());
  myPreviousAlgorithm=new LoadAlgorithm(myProject,list,possibleHashes == null ? null : Arrays.asList(possibleHashes));
  myPreviousAlgorithm.execute();
}
