{
  if (myPreviousAlgorithm != null) {
    myPreviousAlgorithm.stop();
  }
  final List<LoaderAndRefresher<CommitHashPlusParents>> list=new ArrayList<LoaderAndRefresher<CommitHashPlusParents>>();
  final List<VirtualFile> roots=rootsHolder.getRoots();
  int i=0;
  for (  VirtualFile root : roots) {
    final LoaderAndRefresherImpl.MyRootHolder rootHolder=roots.size() == 1 ? new LoaderAndRefresherImpl.OneRootHolder(root) : new LoaderAndRefresherImpl.ManyCaseHolder(i,rootsHolder);
    if (filters.isEmpty()) {
      final LoaderAndRefresherImpl loaderAndRefresher=new LoaderAndRefresherImpl(ticket,filters,myMediator,startingPoints,myDetailsCache,myProject,rootHolder,myUsersIndex);
      list.add(loaderAndRefresher);
    }
 else {
      for (      ChangesFilter.Filter filter : filters) {
        final LoaderAndRefresherImpl loaderAndRefresher=new LoaderAndRefresherImpl(ticket,Collections.singletonList(filter),myMediator,startingPoints,myDetailsCache,myProject,rootHolder,myUsersIndex);
        list.add(loaderAndRefresher);
      }
    }
    ++i;
  }
  myUsersComponent.acceptUpdate(myUsersIndex.getKeys());
  myPreviousAlgorithm=new LoadAlgorithm(myProject,list,possibleHashes == null ? null : Arrays.asList(possibleHashes));
  myPreviousAlgorithm.execute();
}
