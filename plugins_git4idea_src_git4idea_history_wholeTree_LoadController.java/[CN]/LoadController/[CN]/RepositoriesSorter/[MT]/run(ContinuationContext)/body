{
  final Map<VirtualFile,SymbolicRefsI> map=new HashMap<VirtualFile,SymbolicRefsI>();
  for (  ByRootLoader shortLoader : myShortLoaders) {
    final VirtualFile root=shortLoader.getRootHolder().getRoot();
    final SymbolicRefsI refs=shortLoader.initSymbRefs();
    map.put(root,refs);
    try {
      long ts=GitHistoryUtils.getHeadTs(myProject,new FilePathImpl(root));
      mySortOrder.put(root,ts);
    }
 catch (    VcsException e) {
      LOG.info(e);
    }
  }
  for (  LoaderAndRefresher<CommitHashPlusParents> simpleLoader : mySimpleLoaders) {
    simpleLoader.setSymbolicRefs(map.get(simpleLoader.getRoot()));
  }
  Collections.sort(myShortLoaders,new Comparator<ByRootLoader>(){
    @Override public int compare(    ByRootLoader rl1,    ByRootLoader rl2){
      final Long pair1=mySortOrder.get(rl1.getRootHolder().getRoot());
      final Long pair2=mySortOrder.get(rl2.getRootHolder().getRoot());
      return Comparing.compare(pair2,pair1);
    }
  }
);
  Collections.sort(mySimpleLoaders,new Comparator<LoaderAndRefresher<CommitHashPlusParents>>(){
    @Override public int compare(    LoaderAndRefresher<CommitHashPlusParents> lr1,    LoaderAndRefresher<CommitHashPlusParents> lr2){
      final Long pair1=mySortOrder.get(lr1.getRoot());
      final Long pair2=mySortOrder.get(lr2.getRoot());
      return Comparing.compare(pair2,pair1);
    }
  }
);
  myPreviousAlgorithm=new LoadAlgorithm(myProject,mySimpleLoaders,myShortLoaders,myContinuation,myGitCommitsSequentially);
  myPreviousAlgorithm.fillContinuation();
}
