{
  super.initModule(module);
  final ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
  final LibraryTable libraryTable=model.getModuleLibraryTable();
  for (  Lib lib : myLibraries) {
    String libraryName=lib.getName();
    final Library library=libraryTable.createLibrary(libraryName);
    final Library.ModifiableModel libraryModel=library.getModifiableModel();
    for (    OrderRootType rootType : OrderRootType.getAllTypes()) {
      final String[] roots=lib.getRoots(rootType);
      for (      String root : roots) {
        VirtualFile vRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(root);
        if (vRoot != null && OrderRootType.CLASSES.equals(rootType) && !vRoot.isDirectory()) {
          final VirtualFile jar=JarFileSystem.getInstance().refreshAndFindFileByPath(root + "!/");
          if (jar != null)           vRoot=jar;
        }
        if (vRoot != null) {
          libraryModel.addRoot(vRoot,rootType);
        }
      }
    }
    libraryModel.commit();
    libraryCreated(library,module);
  }
  if (myJdk != null) {
    ModuleJdkUtil.setJdk(model,JavaSdkImpl.getInstance().createJdk(module.getName() + "_jdk",myJdk,false));
  }
 else {
    final Sdk projectJdk;
switch (myMockJdkLevel) {
default :
      projectJdk=JavaSdkImpl.getMockJdk("java 1.4");
    break;
case jdk15:
  projectJdk=JavaSdkImpl.getMockJdk15("java 1.5");
break;
}
ModuleJdkUtil.setJdk(model,projectJdk);
}
if (myMockJdkLevel == MockJdkLevel.jdk15) {
model.getModuleExtension(LanguageLevelModuleExtension.class).setLanguageLevel(LanguageLevel.JDK_1_5);
}
model.commit();
}
