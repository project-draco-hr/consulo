{
  if (xDim < 5 || yDim < 5) {
    throw new IllegalArgumentException();
  }
  ArrayList<Object> resultPath=new ArrayList<Object>();
  int vertexNum=xDim * yDim;
  mxGraph graph=aGraph.getGraph();
  Object parent=graph.getDefaultParent();
  int vertexCount=0;
  for (int i=0; i < vertexNum; i++) {
    graph.insertVertex(parent,null,new Integer(vertexCount).toString(),0,0,25,25);
    vertexCount++;
  }
  Object[] vertices=aGraph.getChildVertices(parent);
  int currValue=startVertexValue;
  int[] currCoords=new int[2];
  Object oldMove=vertices[startVertexValue];
  currCoords=getVertexGridCoords(xDim,yDim,startVertexValue);
  resultPath.add(oldMove);
  Object nextMove=getNextKnightMove(aGraph,xDim,yDim,currCoords[0],currCoords[1],resultPath);
  mxCostFunction costFunction=aGraph.getGenerator().getCostFunction();
  mxGraphView view=graph.getView();
  while (nextMove != null) {
    graph.insertEdge(parent,null,null,oldMove,nextMove);
    resultPath.add(nextMove);
    currValue=(int)costFunction.getCost(new mxCellState(view,nextMove,null));
    currCoords=getVertexGridCoords(xDim,yDim,currValue);
    oldMove=nextMove;
    nextMove=getNextKnightMove(aGraph,xDim,yDim,currCoords[0],currCoords[1],resultPath);
  }
  if (resultPath.size() < vertexNum) {
    throw new StructuralException("Could not generate a correct Knight tour with size " + xDim + " x "+ yDim+ ".");
  }
}
