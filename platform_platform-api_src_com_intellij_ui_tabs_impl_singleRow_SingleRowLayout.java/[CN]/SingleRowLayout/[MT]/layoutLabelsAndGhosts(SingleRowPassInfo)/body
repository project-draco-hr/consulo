{
  if (data.firstGhostVisible || myTabs.isGhostsAlwaysVisible()) {
    data.firstGhost=getStrategy().getLayoutRect(data,data.position,myTabs.getGhostTabLength());
    myTabs.layout(myLeftGhost,data.firstGhost);
    data.position+=getStrategy().getLengthIncrement(data.firstGhost.getSize()) + myTabs.getInterTabSpaceLength();
  }
  int deltaToFit=0;
  if (data.firstGhostVisible || data.lastGhostVisible) {
    if (data.requiredLength < data.toFitLength && getStrategy().canBeStretched()) {
      deltaToFit=(int)Math.floor((data.toFitLength - data.requiredLength) / (double)data.toLayout.size());
    }
  }
  int totalLength=0;
  int positionStart=data.position;
  boolean layoutStopped=false;
  for (  TabInfo eachInfo : data.toLayout) {
    final TabLabel label=myTabs.myInfo2Label.get(eachInfo);
    if (layoutStopped) {
      label.setActionPanelVisible(false);
      final Rectangle rec=getStrategy().getLayoutRect(data,0,0);
      myTabs.layout(label,rec);
      continue;
    }
    label.setActionPanelVisible(true);
    final Dimension eachSize=label.getPreferredSize();
    boolean isLast=data.toLayout.indexOf(eachInfo) == data.toLayout.size() - 1;
    int length;
    if (!isLast || deltaToFit == 0) {
      length=getStrategy().getLengthIncrement(eachSize) + deltaToFit;
    }
 else {
      length=data.toFitLength - totalLength;
    }
    boolean continueLayout=applyTabLayout(data,label,length,deltaToFit);
    data.position=getStrategy().getMaxPosition(label.getBounds());
    data.position+=myTabs.getInterTabSpaceLength();
    totalLength=getStrategy().getMaxPosition(label.getBounds()) - positionStart + myTabs.getInterTabSpaceLength();
    if (!continueLayout) {
      layoutStopped=true;
    }
  }
  for (  TabInfo eachInfo : data.toDrop) {
    JBTabsImpl.resetLayout(myTabs.myInfo2Label.get(eachInfo));
  }
  if (data.lastGhostVisible || myTabs.isGhostsAlwaysVisible()) {
    data.lastGhost=getStrategy().getLayoutRect(data,data.position,myTabs.getGhostTabLength());
    myTabs.layout(myRightGhost,data.lastGhost);
  }
}
