{
  if (myTabs.isAlphabeticalMode()) {
    Collections.sort(visibleInfos,new Comparator<TabInfo>(){
      @Override public int compare(      TabInfo o1,      TabInfo o2){
        return StringUtil.naturalCompare(o1.getText(),o2.getText());
      }
    }
);
  }
  SingleRowPassInfo data=new SingleRowPassInfo(this,visibleInfos);
  final boolean layoutLabels=checkLayoutLabels(data);
  if (!layoutLabels) {
    data=myLastSingRowLayout;
  }
  final TabInfo selected=myTabs.getSelectedInfo();
  prepareLayoutPassInfo(data,selected);
  myTabs.resetLayout(layoutLabels || myTabs.isHideTabs());
  if (layoutLabels && !myTabs.isHideTabs()) {
    data.position=getStrategy().getStartPosition(data) - getScrollOffset();
    recomputeToLayout(data);
    layoutLabelsAndGhosts(data);
    layoutMoreButton(data);
  }
  if (selected != null) {
    data.comp=selected.getComponent();
    getStrategy().layoutComp(data);
  }
  updateMoreIconVisibility(data);
  data.tabRectangle=new Rectangle();
  if (data.toLayout.size() > 0) {
    final TabLabel firstLabel=myTabs.myInfo2Label.get(data.toLayout.get(0));
    final TabLabel lastLabel=findLastVisibleLabel(data);
    if (firstLabel != null && lastLabel != null) {
      data.tabRectangle.x=firstLabel.getBounds().x;
      data.tabRectangle.y=firstLabel.getBounds().y;
      data.tabRectangle.width=(int)lastLabel.getBounds().getMaxX() - data.tabRectangle.x;
      data.tabRectangle.height=(int)lastLabel.getBounds().getMaxY() - data.tabRectangle.y;
    }
  }
  myLastSingRowLayout=data;
  return data;
}
