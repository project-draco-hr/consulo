{
  if (!compileRequest.hasProjectId()) {
    return ProtoUtil.toMessage(sessionId,ProtoUtil.createFailure("No project specified"));
  }
  final String projectId=compileRequest.getProjectId();
  final JpsRemoteProto.Message.Request.CompilationRequest.Type compileType=compileRequest.getCommandType();
switch (compileType) {
case MAKE:
case FORCED_COMPILATION:
case REBUILD:
{
      channelContext.setAttachment(sessionId);
      final BuildType buildType=convertCompileType(compileType);
      final List<String> modules=compileRequest.getModuleNameList();
      final List<String> artifacts=compileRequest.getArtifactNameList();
      final List<String> paths=compileRequest.getFilePathList();
      final Map<String,String> builderParams=new HashMap<String,String>();
      for (      JpsRemoteProto.Message.KeyValuePair pair : compileRequest.getBuilderParameterList()) {
        builderParams.put(pair.getKey(),pair.getValue());
      }
      final CompilationTask task=new CompilationTask(sessionId,channelContext,projectId,buildType,modules,artifacts,builderParams,paths);
      final RunnableFuture future=getCompileTaskExecutor(projectId).submit(task);
      myBuildsInProgress.add(new Pair<RunnableFuture,CompilationTask>(future,task));
      return null;
    }
default :
  return ProtoUtil.toMessage(sessionId,ProtoUtil.createFailure("Unsupported command: '" + compileType + "'"));
}
}
