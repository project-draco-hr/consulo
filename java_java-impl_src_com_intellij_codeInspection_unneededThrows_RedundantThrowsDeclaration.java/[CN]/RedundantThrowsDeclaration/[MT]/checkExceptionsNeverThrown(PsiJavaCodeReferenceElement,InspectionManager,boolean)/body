{
  if (!(referenceElement.getParent() instanceof PsiReferenceList))   return null;
  PsiReferenceList referenceList=(PsiReferenceList)referenceElement.getParent();
  if (!(referenceList.getParent() instanceof PsiMethod))   return null;
  PsiMethod method=(PsiMethod)referenceList.getParent();
  if (referenceList != method.getThrowsList())   return null;
  PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return null;
  PsiManager manager=referenceElement.getManager();
  PsiClassType exceptionType=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType(referenceElement);
  if (ExceptionUtil.isUncheckedExceptionOrSuperclass(exceptionType))   return null;
  PsiCodeBlock body=method.getBody();
  if (body == null)   return null;
  PsiModifierList modifierList=method.getModifierList();
  if (!modifierList.hasModifierProperty(PsiModifier.PRIVATE) && !modifierList.hasModifierProperty(PsiModifier.STATIC) && !modifierList.hasModifierProperty(PsiModifier.FINAL)&& !method.isConstructor()&& !(containingClass instanceof PsiAnonymousClass)&& !containingClass.hasModifierProperty(PsiModifier.FINAL)) {
    return null;
  }
  Collection<PsiClassType> types=ExceptionUtil.collectUnhandledExceptions(body,method);
  Collection<PsiClassType> unhandled=new HashSet<PsiClassType>(types);
  if (method.isConstructor()) {
    PsiField[] fields=containingClass.getFields();
    for (    final PsiField field : fields) {
      if (field.hasModifierProperty(PsiModifier.STATIC))       continue;
      PsiExpression initializer=field.getInitializer();
      if (initializer == null)       continue;
      unhandled.addAll(ExceptionUtil.collectUnhandledExceptions(initializer,field));
    }
  }
  for (  PsiClassType unhandledException : unhandled) {
    if (unhandledException.isAssignableFrom(exceptionType) || exceptionType.isAssignableFrom(unhandledException)) {
      return null;
    }
  }
  if (HighlightMethodUtil.isSerializationRelatedMethod(method,containingClass))   return null;
  String description=JavaErrorMessages.message("exception.is.never.thrown",HighlightUtil.formatType(exceptionType));
  final LocalQuickFix quickFixes=new DeleteThrowsFix(method,exceptionType);
  return inspectionManager.createProblemDescriptor(referenceElement,description,quickFixes,ProblemHighlightType.LIKE_UNUSED_SYMBOL,onTheFly);
}
