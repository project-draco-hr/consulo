{
  if (name.isEmpty()) {
    return null;
  }
  VirtualFileSystemEntry found=doFindChildInArray(name,ignoreCase);
  if (found != null)   return found;
  if (allChildrenLoaded()) {
    return NULL_VIRTUAL_FILE;
  }
  if (ensureCanonicalName) {
    name=UriUtil.trimTrailingSlashes(UriUtil.trimLeadingSlashes(FileUtilRt.toSystemIndependentName(name)));
    if (name.indexOf('/') != -1)     return null;
    VirtualFile fake=new FakeVirtualFile(this,name);
    name=delegate.getCanonicallyCasedName(fake);
    if (name.isEmpty())     return null;
  }
  VirtualFileSystemEntry child;
synchronized (myData) {
    if (myData.isAdoptedName(name))     return NULL_VIRTUAL_FILE;
    int[] array=myData.myChildrenIds;
    int indexInReal=findIndex(array,name,ignoreCase);
    if (indexInReal >= 0) {
      return VfsData.getFileById(array[indexInReal],this);
    }
    int id=ourPersistence.getId(this,name,delegate);
    if (id <= 0) {
      return null;
    }
    child=createChild(FileNameCache.storeName(name),id,delegate);
    int[] after=myData.myChildrenIds;
    if (after != array) {
      addChild(child);
    }
 else {
      insertChildAt(child,indexInReal);
      assertConsistency(!delegate.isCaseSensitive(),name);
    }
  }
  if (!child.isDirectory()) {
    VfsRootAccess.assertAccessInTests(child,getFileSystem());
  }
  return child;
}
