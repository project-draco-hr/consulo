{
  int high=array.length - 1;
  if (high == -1) {
    return pack(-1,-1);
  }
  int low=0;
  boolean startInAdopted=isAdoptedChild(array[low]);
  boolean endInAdopted=isAdoptedChild(array[high]);
  if (startInAdopted == endInAdopted) {
    int index=findIndexInOneHalf(array,low,high + 1,startInAdopted,comparer);
    int otherIndex=startInAdopted ? -1 : -array.length - 1;
    return startInAdopted ? pack(otherIndex,index) : pack(index,otherIndex);
  }
  boolean adopted=false;
  int cmp=-1;
  int mid=-1;
  int foundIndex=-1;
  while (low <= high) {
    mid=low + high >>> 1;
    VirtualFileSystemEntry file=array[mid];
    cmp=comparer.compareMyKeyTo(file);
    adopted=isAdoptedChild(file);
    if (cmp == 0) {
      foundIndex=mid;
      break;
    }
    if ((adopted || cmp <= 0) && (!adopted || cmp >= 0)) {
      int indexInAdopted=findIndexInOneHalf(array,mid + 1,high + 1,true,comparer);
      int indexInReal=findIndexInOneHalf(array,low,mid,false,comparer);
      return pack(indexInReal,indexInAdopted);
    }
    if (cmp > 0) {
      low=mid + 1;
    }
 else {
      high=mid - 1;
    }
  }
  if (cmp != 0)   foundIndex=-low - 1;
  int newStart=adopted ? low : mid + 1;
  int newEnd=adopted ? mid + 1 : high + 1;
  int theOtherHalfIndex=newStart < newEnd ? findIndexInOneHalf(array,newStart,newEnd,!adopted,comparer) : -newStart - 1;
  return adopted ? pack(theOtherHalfIndex,foundIndex) : pack(foundIndex,theOtherHalfIndex);
}
