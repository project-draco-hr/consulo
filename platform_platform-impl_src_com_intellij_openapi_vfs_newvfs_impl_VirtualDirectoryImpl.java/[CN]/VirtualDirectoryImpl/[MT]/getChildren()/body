{
  VirtualFileSystemEntry[] children=myChildren;
  NewVirtualFileSystem delegate=getFileSystem();
  final boolean ignoreCase=!delegate.isCaseSensitive();
  if (allChildrenLoaded()) {
    assertConsistency(children,ignoreCase);
    int sas=getSuspiciousArrayStart();
    return sas == children.length ? children : Arrays.copyOf(children,sas);
  }
  FSRecords.NameId[] childrenIds=ourPersistence.listAll(this);
  VirtualFileSystemEntry[] result;
  if (childrenIds.length == 0) {
    result=EMPTY_ARRAY;
  }
 else {
    Arrays.sort(childrenIds,new Comparator<FSRecords.NameId>(){
      @Override public int compare(      FSRecords.NameId o1,      FSRecords.NameId o2){
        String name1=o1.name;
        String name2=o2.name;
        return compareNames(name1,name2,ignoreCase);
      }
    }
);
    result=new VirtualFileSystemEntry[childrenIds.length];
    int delegateI=0;
    int cachedI=0;
    int cachedEnd=getSuspiciousArrayStart();
    while (delegateI < childrenIds.length) {
      FSRecords.NameId nameId=childrenIds[delegateI];
      while (cachedI < cachedEnd && children[cachedI].compareNameTo(nameId.name,ignoreCase) < 0)       cachedI++;
      VirtualFileSystemEntry resultFile;
      if (cachedI < cachedEnd && children[cachedI].compareNameTo(nameId.name,ignoreCase) == 0) {
        resultFile=children[cachedI++];
      }
 else {
        resultFile=createChild(nameId.name,nameId.id,delegate);
      }
      result[delegateI++]=resultFile;
    }
    assertConsistency(result,ignoreCase);
  }
  if (getId() > 0) {
    myChildren=result;
    setChildrenLoaded();
  }
  return result;
}
