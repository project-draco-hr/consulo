{
  VirtualFileSystemEntry[] children=myChildren;
  NewVirtualFileSystem delegate=getFileSystem();
  final boolean ignoreCase=!delegate.isCaseSensitive();
  if (allChildrenLoaded()) {
    assertConsistency(children,ignoreCase);
    return children;
  }
  final boolean wasChildrenLoaded=ourPersistence.areChildrenLoaded(this);
  final FSRecords.NameId[] childrenIds=ourPersistence.listAll(this);
  VirtualFileSystemEntry[] result;
  if (childrenIds.length == 0) {
    result=EMPTY_ARRAY;
  }
 else {
    Arrays.sort(childrenIds,new java.util.Comparator<FSRecords.NameId>(){
      @Override public int compare(      FSRecords.NameId o1,      FSRecords.NameId o2){
        CharSequence name1=o1.name;
        CharSequence name2=o2.name;
        int cmp=compareNames(name1,name2,ignoreCase);
        if (cmp == 0 && name1 != name2) {
          LOG.error(ourPersistence + " returned duplicate file names(" + name1+ ","+ name2+ ")"+ " ignoreCase: "+ ignoreCase+ " SystemInfo.isFileSystemCaseSensitive: "+ SystemInfo.isFileSystemCaseSensitive+ " SystemInfo.OS: "+ SystemInfo.OS_NAME+ " "+ SystemInfo.OS_VERSION+ " wasChildrenLoaded: "+ wasChildrenLoaded+ " in the dir: "+ VirtualDirectoryImpl.this+ ";"+ " children: "+ Arrays.toString(childrenIds));
        }
        return cmp;
      }
    }
);
    result=new VirtualFileSystemEntry[childrenIds.length];
    int delegateI=0;
    int i=0;
    int cachedEnd=getAdoptedChildrenStart();
    while (delegateI < childrenIds.length) {
      FSRecords.NameId nameId=childrenIds[delegateI];
      while (i < cachedEnd && children[i].compareNameTo(nameId.name,ignoreCase) < 0)       i++;
      VirtualFileSystemEntry resultFile;
      if (i < cachedEnd && children[i].compareNameTo(nameId.name,ignoreCase) == 0) {
        resultFile=children[i++];
      }
 else {
        resultFile=createChild(nameId.nameId,nameId.id,delegate);
      }
      result[delegateI++]=resultFile;
    }
    assertConsistency(result,ignoreCase,children,cachedEnd,childrenIds);
  }
  if (getId() > 0) {
    myChildren=result;
    setChildrenLoaded();
  }
  return result;
}
