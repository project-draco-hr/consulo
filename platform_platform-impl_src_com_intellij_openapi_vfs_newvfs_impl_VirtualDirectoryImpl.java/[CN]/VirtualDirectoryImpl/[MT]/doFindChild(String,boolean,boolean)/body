{
  if (name.length() == 0) {
    return null;
  }
  final VirtualFile[] array;
  final Map<String,VirtualFile> map;
  final VirtualFile file;
synchronized (this) {
    array=asArray();
    if (array == null) {
      map=ensureAsMap();
      file=map.get(name);
    }
 else {
      file=null;
      map=null;
    }
  }
  if (array != null) {
    Object encoded=encodeName(name);
    byte[] bytes=encoded instanceof byte[] ? (byte[])encoded : null;
    for (    VirtualFile vf : array) {
      if (namesEqual(name,bytes,vf))       return vf;
    }
    return createIfNotFound ? createAndFindChildWithEventFire(name) : null;
  }
  if (file != null)   return file;
  if (ensureCanonicalName) {
    final NewVirtualFileSystem delegate=getFileSystem();
    VirtualFile fake=new FakeVirtualFile(this,name);
    name=delegate.getCanonicallyCasedName(fake);
    if (name.length() == 0)     return null;
  }
synchronized (this) {
    int id=PersistentFS.getId(this,name);
    if (id > 0) {
      VirtualFile lastTry=map.get(name);
      if (lastTry != null)       return lastTry;
      final String shorty=new String(name);
      NewVirtualFile child=createChild(shorty,id);
      map.put(shorty,child);
      return child;
    }
  }
  return null;
}
