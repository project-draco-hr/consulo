{
  if (name.isEmpty()) {
    return null;
  }
  VirtualFileSystemEntry found=doFindChildInArray(name,comparator);
  if (found != null)   return found;
  if (allChildrenLoaded()) {
    return NULL_VIRTUAL_FILE;
  }
  if (ensureCanonicalName) {
    name=UriUtil.trimTrailingSlashes(UriUtil.trimLeadingSlashes(FileUtilRt.toSystemIndependentName(name)));
    if (name.indexOf('/') != -1)     return null;
    VirtualFile fake=new FakeVirtualFile(this,name);
    name=delegate.getCanonicallyCasedName(fake);
    if (name.isEmpty())     return null;
  }
synchronized (this) {
    VirtualFileSystemEntry[] array=myChildren;
    long r=findIndexInBoth(array,name,comparator);
    int indexInReal=(int)(r >> 32);
    int indexInAdopted=(int)r;
    if (indexInAdopted >= 0)     return NULL_VIRTUAL_FILE;
    if (indexInReal >= 0) {
      return array[indexInReal];
    }
    int id=ourPersistence.getId(this,name,delegate);
    if (id <= 0) {
      return null;
    }
    VirtualFileSystemEntry child=createChild(FileNameCache.storeName(name),id,delegate);
    VirtualFileSystemEntry[] after=myChildren;
    if (after != array) {
      addChild(child);
    }
 else {
      insertChildAt(child,indexInReal);
      assertConsistency(myChildren,!delegate.isCaseSensitive(),name);
    }
    return child;
  }
}
