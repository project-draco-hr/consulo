{
  PsiFile psiFile=psiElement.getContainingFile();
  boolean mayHaveClassesInside=false;
  if (psiFile instanceof PsiJavaFileImpl) {
    PsiJavaFileImpl impl=(PsiJavaFileImpl)psiFile;
    Lexer originalLexer=impl.createLexer();
    FilterLexer lexer=new FilterLexer(originalLexer,new FilterLexer.SetFilter(ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET));
    final TextRange range=psiElement.getTextRange();
    lexer.start(fileBuffer,range.getStartOffset(),range.getEndOffset(),0);
    boolean isInNewExpression=false;
    boolean isRightAfterNewExpression=false;
    int angleLevel=0;
    int parenLevel=0;
    do {
      IElementType tokenType=lexer.getTokenType();
      if (tokenType == null)       break;
      if (tokenType == JavaTokenType.NEW_KEYWORD) {
        isInNewExpression=true;
      }
 else       if (tokenType == JavaTokenType.LPARENTH) {
        if (isInNewExpression)         parenLevel++;
      }
 else       if (tokenType == JavaTokenType.LT) {
        if (isInNewExpression)         angleLevel++;
      }
 else       if (tokenType == JavaTokenType.GT) {
        if (isInNewExpression)         angleLevel--;
      }
 else       if (tokenType == JavaTokenType.RPARENTH) {
        if (isInNewExpression) {
          parenLevel--;
          if (parenLevel == 0) {
            isRightAfterNewExpression=true;
          }
        }
      }
 else       if (tokenType == JavaTokenType.LBRACE) {
        if (isInNewExpression || isRightAfterNewExpression) {
          mayHaveClassesInside=true;
        }
      }
 else       if (tokenType == JavaTokenType.LBRACKET) {
        if (parenLevel == 0 && angleLevel == 0)         isInNewExpression=false;
      }
 else       if (tokenType == JavaTokenType.INTERFACE_KEYWORD || tokenType == JavaTokenType.CLASS_KEYWORD || tokenType == JavaTokenType.ENUM_KEYWORD) {
        mayHaveClassesInside=true;
      }
      if (isInNewExpression && isRightAfterNewExpression) {
        isInNewExpression=false;
      }
 else {
        isRightAfterNewExpression=false;
      }
      lexer.advance();
    }
 while (!mayHaveClassesInside);
  }
  return mayHaveClassesInside;
}
