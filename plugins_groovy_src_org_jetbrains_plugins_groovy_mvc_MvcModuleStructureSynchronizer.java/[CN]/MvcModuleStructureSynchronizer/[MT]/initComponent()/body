{
  final MessageBusConnection connection=myProject.getMessageBus().connect();
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      queue(SyncAction.SyncLibrariesInPluginsModule,myProject);
      queue(SyncAction.UpgradeFramework,myProject);
      queue(SyncAction.CreateAppStructureIfNeeded,myProject);
      queue(SyncAction.UpdateProjectStructure,myProject);
      queue(SyncAction.EnsureRunConfigurationExists,myProject);
      myModificationCount++;
      updateProjectViewVisibility();
    }
  }
);
  connection.subscribe(ProjectTopics.MODULES,new ModuleListener(){
    public void moduleAdded(    Project project,    Module module){
      queue(SyncAction.UpdateProjectStructure,module);
      queue(SyncAction.CreateAppStructureIfNeeded,module);
    }
    public void beforeModuleRemoved(    Project project,    Module module){
    }
    public void moduleRemoved(    Project project,    Module module){
    }
    public void modulesRenamed(    Project project,    List<Module> modules){
    }
  }
);
  connection.subscribe(VirtualFileManager.VFS_CHANGES,new BulkVirtualFileListenerAdapter(new VirtualFileAdapter(){
    public void fileCreated(    final VirtualFileEvent event){
      myModificationCount++;
      final VirtualFile file=event.getFile();
      final String fileName=event.getFileName();
      if (MvcModuleStructureUtil.APPLICATION_PROPERTIES.equals(fileName) || isApplicationDirectoryName(fileName)) {
        queue(SyncAction.UpdateProjectStructure,file);
        queue(SyncAction.EnsureRunConfigurationExists,file);
      }
 else       if (isLibDirectory(file) || isLibDirectory(event.getParent())) {
        queue(SyncAction.UpdateProjectStructure,file);
      }
 else {
        if (!myProject.isInitialized())         return;
        final Module module=ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(file);
        if (module == null) {
          if (file.isDirectory()) {
            if (myPluginRoots.contains(file.getParent())) {
              queue(SyncAction.UpdateProjectStructure,myProject);
              return;
            }
            if (!myOutOfModuleDirectoryCreatedActionAdded) {
              queue(SyncAction.OutOfModuleDirectoryCreated,myProject);
              myOutOfModuleDirectoryCreatedActionAdded=true;
            }
          }
          return;
        }
        if (!MvcConsole.isUpdatingVfsByConsoleProcess(module))         return;
        final MvcFramework framework=MvcFramework.getInstance(module);
        if (framework == null)         return;
        if (framework.isToReformatOnCreation(file) || file.isDirectory()) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              if (!file.isValid())               return;
              if (!framework.hasSupport(module))               return;
              final List<VirtualFile> files=new ArrayList<VirtualFile>();
              if (file.isDirectory()) {
                ModuleRootManager.getInstance(module).getFileIndex().iterateContentUnderDirectory(file,new ContentIterator(){
                  @Override public boolean processFile(                  VirtualFile fileOrDir){
                    if (!fileOrDir.isDirectory() && framework.isToReformatOnCreation(fileOrDir)) {
                      files.add(file);
                    }
                    return true;
                  }
                }
);
              }
 else {
                files.add(file);
              }
              PsiManager manager=PsiManager.getInstance(myProject);
              for (              VirtualFile virtualFile : files) {
                PsiFile psiFile=manager.findFile(virtualFile);
                if (psiFile != null) {
                  new ReformatCodeProcessor(myProject,psiFile,null,false).run();
                }
              }
            }
          }
,module.getDisposed());
        }
      }
    }
    @Override public void fileDeleted(    VirtualFileEvent event){
      myModificationCount++;
      final VirtualFile file=event.getFile();
      if (isLibDirectory(file) || isLibDirectory(event.getParent())) {
        queue(SyncAction.UpdateProjectStructure,file);
      }
    }
    @Override public void contentsChanged(    VirtualFileEvent event){
      final String fileName=event.getFileName();
      if (MvcModuleStructureUtil.APPLICATION_PROPERTIES.equals(fileName)) {
        queue(SyncAction.UpdateProjectStructure,event.getFile());
      }
    }
    @Override public void fileMoved(    VirtualFileMoveEvent event){
      myModificationCount++;
    }
    @Override public void propertyChanged(    VirtualFilePropertyEvent event){
      if (VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
        myModificationCount++;
      }
    }
  }
));
}
