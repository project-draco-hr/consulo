{
  this.settings=settings;
  manager=SpellCheckerManager.getInstance(project);
  HyperlinkLabel link=new HyperlinkLabel(SpellCheckerBundle.message("link.to.inspection.settings"));
  link.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    final HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        final OptionsEditor optionsEditor=OptionsEditor.KEY.getData(DataManager.getInstance().getDataContext());
        if (optionsEditor != null) {
          final ErrorsConfigurable errorsConfigurable=optionsEditor.findConfigurable(ErrorsConfigurable.class);
          if (errorsConfigurable != null) {
            optionsEditor.select(errorsConfigurable).doWhenDone(new Runnable(){
              public void run(){
                errorsConfigurable.selectInspectionTool("SpellCheckingInspection");
              }
            }
);
          }
        }
      }
    }
  }
);
  linkContainer.setLayout(new BorderLayout());
  linkContainer.add(link);
  fillAllDictionaries();
  pathsChooserComponent=new PathsChooserComponent(dictionariesFolders,new PathsChooserComponent.PathProcessor(){
    public boolean addPath(    List<String> paths,    String path){
      if (paths.contains(path)) {
        final String title=SpellCheckerBundle.message("add.directory.title");
        final String msg=SpellCheckerBundle.message("directory.is.already.included");
        Messages.showErrorDialog(root,msg,title);
        return false;
      }
      paths.add(path);
      final ArrayList<Pair<String,Boolean>> currentDictionaries=optionalChooserComponent.getCurrentModel();
      SPFileUtil.processFilesRecursively(path,new Consumer<String>(){
        public void consume(        final String s){
          currentDictionaries.add(Pair.create(s,true));
        }
      }
);
      optionalChooserComponent.refresh();
      return true;
    }
    public boolean removePath(    List<String> paths,    String path){
      if (paths.remove(path)) {
        final ArrayList<Pair<String,Boolean>> result=new ArrayList<Pair<String,Boolean>>();
        final ArrayList<Pair<String,Boolean>> currentDictionaries=optionalChooserComponent.getCurrentModel();
        for (        Pair<String,Boolean> pair : currentDictionaries) {
          if (!pair.first.startsWith(FileUtil.toSystemDependentName(path))) {
            result.add(pair);
          }
        }
        currentDictionaries.clear();
        currentDictionaries.addAll(result);
        optionalChooserComponent.refresh();
        return true;
      }
      return false;
    }
  }
,project);
  panelForFolderChooser.setLayout(new BorderLayout());
  panelForFolderChooser.add(pathsChooserComponent.getContentPane(),BorderLayout.CENTER);
  pathsChooserComponent.getEmptyText().setText(SpellCheckerBundle.message("no.custom.folders"));
  optionalChooserComponent=new OptionalChooserComponent<String>(allDictionaries){
    @Override public JCheckBox createCheckBox(    String path,    boolean checked){
      if (isUserDictionary(path)) {
        path=FileUtil.toSystemIndependentName(path);
        final int i=path.lastIndexOf('/');
        if (i != -1) {
          final String name=path.substring(i + 1);
          return new JCheckBox("[user] " + name,checked);
        }
      }
      return new JCheckBox("[bundled] " + FileUtil.toSystemDependentName(path),checked);
    }
  }
;
  panelForDictionaryChooser.setLayout(new BorderLayout());
  panelForDictionaryChooser.add(optionalChooserComponent.getContentPane(),BorderLayout.CENTER);
  optionalChooserComponent.getEmptyText().setText(SpellCheckerBundle.message("no.dictionaries"));
  wordsPanel=new WordsPanel(manager);
  panelForAcceptedWords.setLayout(new BorderLayout());
  panelForAcceptedWords.add(wordsPanel,BorderLayout.CENTER);
}
