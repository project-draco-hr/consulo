{
  final ArrayList<VirtualFile> readOnly=new ArrayList<VirtualFile>();
  for (  PsiDirectory directory : directories) {
    checkMove(directory,readOnly);
  }
  if (!readOnly.isEmpty()) {
    if (!successfullyCheckedOut(project,readOnly)) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("some.files.or.directories.are.read.only"));
      Messages.showErrorDialog(project,message,RefactoringBundle.message("move.tltle"));
      return;
    }
  }
  List<PsiDirectory> sourceRootDirectories=buildRearrangeTargetsList(project,directories);
  DirectoryChooser chooser=new DirectoryChooser(project);
  chooser.setTitle(RefactoringBundle.message("select.source.root.chooser.title"));
  chooser.fillList(sourceRootDirectories.toArray(new PsiDirectory[sourceRootDirectories.size()]),null,project,"");
  chooser.show();
  if (!chooser.isOK())   return;
  final PsiDirectory selectedTarget=chooser.getSelectedDirectory();
  if (selectedTarget == null)   return;
  final Ref<IncorrectOperationException> ex=Ref.create(null);
  final String commandDescription=RefactoringBundle.message("moving.directories.command");
  Runnable runnable=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          final LvcsAction lvcsAction=LvcsIntegration.checkinFilesBeforeRefactoring(project,commandDescription);
          try {
            rearrangeDirectoriesToTarget(directories,selectedTarget);
          }
 catch (          IncorrectOperationException e) {
            ex.set(e);
          }
 finally {
            LvcsIntegration.checkinFilesAfterRefactoring(project,lvcsAction);
          }
        }
      }
);
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,runnable,commandDescription,null);
  if (ex.get() != null) {
    RefactoringUtil.processIncorrectOperation(project,ex.get());
  }
}
