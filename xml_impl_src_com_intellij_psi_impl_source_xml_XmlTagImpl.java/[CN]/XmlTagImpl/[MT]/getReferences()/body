{
  ProgressManager.checkCanceled();
  final ASTNode startTagName=XmlChildRole.START_TAG_NAME_FINDER.findChild(this);
  if (startTagName == null)   return PsiReference.EMPTY_ARRAY;
  final ASTNode endTagName=XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(this);
  final PsiReference[] referencesFromProviders=ReferenceProvidersRegistry.getReferencesFromProviders(this,XmlTag.class);
  List<PsiReference> myRefs=new ArrayList<PsiReference>();
  final String prefix=getNamespacePrefix();
  if (endTagName != null) {
    if (prefix.length() > 0) {
      myRefs.add(new SchemaPrefixReference(this,TextRange.from(startTagName.getStartOffset() - this.getStartOffset(),prefix.length()),prefix));
      myRefs.add(new SchemaPrefixReference(this,TextRange.from(endTagName.getStartOffset() - this.getStartOffset(),prefix.length()),prefix));
    }
    myRefs.add(TagNameReference.create(this,startTagName,true));
    myRefs.add(TagNameReference.create(this,endTagName,false));
  }
 else {
    if (prefix.length() > 0) {
      myRefs.add(new SchemaPrefixReference(this,TextRange.from(startTagName.getStartOffset() - this.getStartOffset(),prefix.length()),prefix));
    }
    myRefs.add(TagNameReference.create(this,startTagName,true));
  }
  final PsiReference[] result=myRefs.toArray(new PsiReference[myRefs.size() + referencesFromProviders.length]);
  System.arraycopy(referencesFromProviders,0,result,myRefs.size(),referencesFromProviders.length);
  return result;
}
