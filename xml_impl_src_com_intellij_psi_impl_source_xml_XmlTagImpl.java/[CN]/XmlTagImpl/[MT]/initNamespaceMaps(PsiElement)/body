{
  BidirectionalMap<String,String> map=myNamespaceMap;
  if (map == null && hasNamespaceDeclarations()) {
    final BidirectionalMap<String,String> namespaceMap=new BidirectionalMap<String,String>();
    final XmlAttribute[] attributes=getAttributes();
    for (    final XmlAttribute attribute : attributes) {
      if (attribute.isNamespaceDeclaration()) {
        final String name=attribute.getName();
        int splitIndex=name.indexOf(':');
        final String value=getRealNs(attribute.getValue());
        if (value != null) {
          if (splitIndex < 0) {
            namespaceMap.put("",value);
          }
 else {
            namespaceMap.put(XmlUtil.findLocalNameByQualifiedName(name),value);
          }
        }
      }
    }
    myNamespaceMap=map=namespaceMap;
  }
  if (parent instanceof XmlDocument) {
    final XmlExtension extension=XmlExtension.getExtensionByElement(parent);
    if (extension != null) {
      final String[][] defaultNamespace=extension.getNamespacesFromDocument((XmlDocument)parent,map != null);
      if (defaultNamespace != null) {
        final BidirectionalMap<String,String> namespaceMap=new BidirectionalMap<String,String>();
        if (map != null) {
          namespaceMap.putAll(map);
        }
        for (        final String[] prefix2ns : defaultNamespace) {
          namespaceMap.put(prefix2ns[0],getRealNs(prefix2ns[1]));
        }
        myNamespaceMap=map=namespaceMap;
      }
    }
  }
  return map;
}
