{
  final TypeInfo typeInfo=TypeInfo.create(tree,node,parentStub);
  boolean isDeprecatedByComment=false;
  boolean hasDeprecatedAnnotation=false;
  String name=null;
  String initializer=null;
  boolean expectingInit=false;
  for (  final LighterASTNode child : tree.getChildren(node)) {
    final IElementType type=child.getTokenType();
    if (type == JavaDocElementType.DOC_COMMENT) {
      isDeprecatedByComment=RecordUtil.isDeprecatedByDocComment(tree,child);
    }
 else     if (type == JavaElementType.MODIFIER_LIST) {
      hasDeprecatedAnnotation=RecordUtil.isDeprecatedByAnnotation(tree,child);
    }
 else     if (type == JavaTokenType.IDENTIFIER) {
      name=RecordUtil.intern(tree.getCharTable(),child);
    }
 else     if (type == JavaTokenType.EQ) {
      expectingInit=true;
    }
 else     if (expectingInit && !ElementType.JAVA_COMMENT_OR_WHITESPACE_BIT_SET.contains(type) && type != JavaTokenType.SEMICOLON) {
      initializer=encodeInitializer(tree,child);
      break;
    }
  }
  final boolean isEnumConst=node.getTokenType() == JavaElementType.ENUM_CONSTANT;
  final byte flags=PsiFieldStubImpl.packFlags(isEnumConst,isDeprecatedByComment,hasDeprecatedAnnotation);
  return new PsiFieldStubImpl(parentStub,name,typeInfo,initializer,flags);
}
