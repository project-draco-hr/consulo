{
  final Project antProject=getOwningTarget().getProject();
  final Project newProject=new Project();
  newProject.init();
  for (  final Object o : antProject.getBuildListeners()) {
    final BuildListener listener=(BuildListener)o;
    if (!(listener instanceof AntClassLoader)) {
      newProject.addBuildListener(listener);
    }
  }
  newProject.setBaseDir(antProject.getBaseDir());
  final File gantFile=newProject.resolveFile(file);
  if (!gantFile.exists()) {
    throw new BuildException("Gantfile does not exist.",getLocation());
  }
  final GantBuilder ant=new GantBuilder(newProject);
  final Map<String,String> environmentParameter=new HashMap<String,String>();
  environmentParameter.put("environment","environment");
  ant.invokeMethod("property",new Object[]{environmentParameter});
  final GantBinding binding=new GantBinding();
  binding.forcedSettingOfVariable("ant",ant);
  for (  final Definition definition : definitions) {
    final Map<String,String> definitionParameter=new HashMap<String,String>();
    definitionParameter.put("name",definition.getName());
    definitionParameter.put("value",definition.getValue());
    ant.invokeMethod("property",new Object[]{definitionParameter});
  }
  final gant.Gant gant=new gant.Gant(binding);
  gant.loadScript(gantFile);
  final List<String> targetsAsStrings=new ArrayList<String>();
  for (  final GantTarget g : targets) {
    targetsAsStrings.add(g.getValue());
  }
  final int returnCode=gant.processTargets(targetsAsStrings);
  if (returnCode != 0) {
    throw new BuildException("Gant execution failed with return code " + returnCode + '.',getLocation());
  }
}
