{
  final File projectBuildFileDestDir=VfsUtil.virtualToIoFile(project.getBaseDir());
  projectBuildFileDestDir.mkdirs();
  final List<File> generated=new ArrayList<File>();
  final File projectBuildFile=new File(projectBuildFileDestDir,BuildProperties.getProjectBuildFileName(project) + XML_EXTENSION);
  final File propertiesFile=new File(projectBuildFileDestDir,BuildProperties.getPropertyFileName(project));
  final ModuleChunk[] chunks=genOptions.getModuleChunks();
  final File[] chunkFiles=new File[chunks.length];
  for (int idx=0; idx < chunks.length; idx++) {
    final ModuleChunk chunk=chunks[idx];
    final File chunkBaseDir=BuildProperties.getModuleChunkBaseDir(chunk);
    chunkFiles[idx]=new File(chunkBaseDir,BuildProperties.getModuleChunkBuildFileName(chunk) + XML_EXTENSION);
  }
  if (!backup(projectBuildFile,project,genOptions,filesToRefresh)) {
    return null;
  }
  if (!backup(propertiesFile,project,genOptions,filesToRefresh)) {
    return null;
  }
  FileUtil.createIfDoesntExist(projectBuildFile);
  final PrintWriter mainDataOutput=makeWriter(projectBuildFile);
  try {
    final MultipleFileProjectBuild build=new MultipleFileProjectBuild(project,genOptions);
    build.generate(mainDataOutput);
    generated.add(projectBuildFile);
    for (int idx=0; idx < chunks.length; idx++) {
      final ModuleChunk chunk=chunks[idx];
      final File chunkBuildFile=chunkFiles[idx];
      final File chunkBaseDir=chunkBuildFile.getParentFile();
      if (chunkBaseDir != null) {
        chunkBaseDir.mkdirs();
      }
      final boolean moduleBackupOk=backup(chunkBuildFile,project,genOptions,filesToRefresh);
      if (!moduleBackupOk) {
        return null;
      }
      FileUtil.createIfDoesntExist(chunkBuildFile);
      final PrintWriter out=makeWriter(chunkBuildFile);
      try {
        new ModuleChunkAntProject(project,chunk,genOptions).generate(out);
        generated.add(chunkBuildFile);
      }
  finally {
        out.close();
      }
    }
  }
  finally {
    mainDataOutput.close();
  }
  final PrintWriter propertiesOut=makeWriter(propertiesFile);
  try {
    new PropertyFileGeneratorImpl(project,genOptions).generate(propertiesOut);
    generated.add(propertiesFile);
  }
  finally {
    propertiesOut.close();
  }
  filesToRefresh.addAll(generated);
  return generated.toArray(new File[generated.size()]);
}
