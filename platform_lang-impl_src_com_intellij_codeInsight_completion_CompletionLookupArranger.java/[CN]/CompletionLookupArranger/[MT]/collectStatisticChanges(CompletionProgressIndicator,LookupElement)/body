{
  LookupImpl lookupImpl=indicator.getLookup();
  applyLastCompletionStatisticsUpdate();
  CompletionLocation myLocation=new CompletionLocation(indicator.getParameters());
  final StatisticsInfo main=StatisticsManager.serialize(CompletionService.STATISTICS_KEY,item,myLocation);
  final List<LookupElement> items=lookupImpl.getItems();
  final int count=Math.min(3,lookupImpl.getList().getSelectedIndex());
  final List<StatisticsInfo> toIncrement=new ArrayList<StatisticsInfo>();
  for (int i=0; i < count; i++) {
    final LookupElement element=items.get(i);
    StatisticsInfo baseInfo=StatisticsManager.serialize(CompletionService.STATISTICS_KEY,element,myLocation);
    if (baseInfo != null && baseInfo != StatisticsInfo.EMPTY && StatisticsManager.getInstance().getUseCount(baseInfo) == 0) {
      toIncrement.add(new StatisticsInfo(composeContextWithValue(baseInfo),IGNORED));
    }
  }
  if (main != null && main != StatisticsInfo.EMPTY) {
    toIncrement.addAll(StatisticsWeigher.composeStatsWithPrefix(main,myLocation,item));
  }
  StatisticsUpdate update=new StatisticsUpdate(toIncrement);
  ourPendingUpdate=update;
  Disposer.register(update,new Disposable(){
    @Override public void dispose(){
      ourPendingUpdate=null;
    }
  }
);
  return update;
}
