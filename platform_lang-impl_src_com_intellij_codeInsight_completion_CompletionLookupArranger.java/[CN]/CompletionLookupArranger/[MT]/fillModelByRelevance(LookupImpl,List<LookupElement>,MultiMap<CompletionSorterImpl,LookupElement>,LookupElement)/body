{
  Iterator<LookupElement> byRelevance=sortByRelevance(inputBySorter).iterator();
  final LinkedHashSet<LookupElement> model=new LinkedHashSet<LookupElement>();
  addPrefixItems(model);
  addFrozenItems(items,model);
  addSomeItems(model,byRelevance,new Condition<LookupElement>(){
    @Override public boolean value(    LookupElement lastAdded){
      return model.size() >= MAX_PREFERRED_COUNT;
    }
  }
);
  addCurrentlySelectedItemToTop(lookup,items,model);
  freezeTopItems(lookup,model);
  ensureItemAdded(items,model,byRelevance,lookup.getCurrentItem());
  ensureItemAdded(items,model,byRelevance,relevantSelection);
  ensureEverythingVisibleAdded(lookup,model,byRelevance);
  return new ArrayList<LookupElement>(model);
}
