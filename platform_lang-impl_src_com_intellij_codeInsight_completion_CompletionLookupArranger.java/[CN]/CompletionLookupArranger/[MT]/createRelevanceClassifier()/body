{
  return new Classifier<LookupElement>(){
    @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) private final FactoryMap<CompletionSorterImpl,Classifier<LookupElement>> myClassifiers=new FactoryMap<CompletionSorterImpl,Classifier<LookupElement>>(){
      @Override protected Map<CompletionSorterImpl,Classifier<LookupElement>> createMap(){
        return Maps.newLinkedHashMap();
      }
      @Override protected Classifier<LookupElement> create(      CompletionSorterImpl key){
        return key.buildClassifier();
      }
    }
;
    @Override public void addElement(    LookupElement element){
      myClassifiers.get(obtainSorter(element)).addElement(element);
    }
    @Override public Iterable<List<LookupElement>> classify(    List<LookupElement> source){
      MultiMap<CompletionSorterImpl,LookupElement> inputBySorter=groupInputBySorter(source);
      final ArrayList<List<LookupElement>> result=new ArrayList<List<LookupElement>>();
      for (      CompletionSorterImpl sorter : myClassifiers.keySet()) {
        ContainerUtil.addAll(result,myClassifiers.get(sorter).classify((List<LookupElement>)inputBySorter.get(sorter)));
      }
      return result;
    }
    private MultiMap<CompletionSorterImpl,LookupElement> groupInputBySorter(    List<LookupElement> source){
      MultiMap<CompletionSorterImpl,LookupElement> inputBySorter=new MultiMap<CompletionSorterImpl,LookupElement>();
      for (      LookupElement element : source) {
        inputBySorter.putValue(obtainSorter(element),element);
      }
      return inputBySorter;
    }
    @NotNull private CompletionSorterImpl obtainSorter(    LookupElement element){
      return myProcess.getSorter(element);
    }
    @Override public void describeItems(    LinkedHashMap<LookupElement,StringBuilder> map){
      final MultiMap<CompletionSorterImpl,LookupElement> inputBySorter=groupInputBySorter(new ArrayList<LookupElement>(map.keySet()));
      if (inputBySorter.size() > 1) {
        for (        LookupElement element : map.keySet()) {
          map.get(element).append(obtainSorter(element)).append(": ");
        }
      }
      for (      CompletionSorterImpl sorter : inputBySorter.keySet()) {
        final LinkedHashMap<LookupElement,StringBuilder> subMap=new LinkedHashMap<LookupElement,StringBuilder>();
        for (        LookupElement element : inputBySorter.get(sorter)) {
          subMap.put(element,map.get(element));
        }
        myClassifiers.get(sorter).describeItems(subMap);
      }
    }
  }
;
}
