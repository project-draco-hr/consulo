{
  super(project,true);
  myProject=project;
  mySelectionStart=selectionStart;
  mySelectionEnd=selectionEnd;
  myCachedContents=cachedContents;
  setTitle(title);
  myActiveVcs=vcs;
  myRevisions=new ArrayList<VcsFileRevision>();
  myFile=file;
  String helpId=vcsHistoryProvider.getHelpId();
  myHelpId=helpId != null ? helpId : "reference.dialogs.vcs.selection.history";
  final VcsDependentHistoryComponents components=vcsHistoryProvider.getUICustomization(session,getRootPane());
  myList=new TableView(new ListTableModel(createColumns(components.getColumns())));
  ((SortableColumnModel)myList.getModel()).setSortable(false);
  myList.getEmptyText().setText(VcsBundle.message("history.empty"));
  myDiffPanel=DiffManager.getInstance().createDiffPanel(getWindow(),myProject);
  myRevisions.addAll(session.getRevisionList());
  final VcsRevisionNumber currentRevisionNumber=session.getCurrentRevisionNumber();
  if (currentRevisionNumber != null) {
    myRevisions.add(new CurrentRevision(file,currentRevisionNumber));
  }
  Collections.sort(myRevisions,new Comparator<VcsFileRevision>(){
    public int compare(    VcsFileRevision rev1,    VcsFileRevision rev2){
      return VcsHistoryUtil.compare(rev1,rev2);
    }
  }
);
  Collections.reverse(myRevisions);
  myContentFileType=FileTypeManager.getInstance().getFileTypeByFile(file);
  final VcsConfiguration configuration=VcsConfiguration.getInstance(myProject);
  mySplitter=new Splitter(true,getVcsConfiguration().FILE_HISTORY_DIALOG_SPLITTER_PROPORTION);
  mySplitter.setFirstComponent(myDiffPanel.getComponent());
  mySplitter.setSecondComponent(createBottomPanel(components.getDetailsComponent()));
  mySplitter.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (Splitter.PROP_PROPORTION.equals(evt.getPropertyName())) {
        getVcsConfiguration().FILE_HISTORY_DIALOG_SPLITTER_PROPORTION=((Float)evt.getNewValue()).floatValue();
      }
    }
  }
);
  myList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final VcsFileRevision revision;
      if (myList.getSelectedRowCount() == 1) {
        revision=(VcsFileRevision)myList.getItems().get(myList.getSelectedRow());
        myComments.setText(revision.getCommitMessage());
        myComments.setCaretPosition(0);
      }
 else {
        revision=null;
        myComments.setText("");
      }
      if (components.getRevisionListener() != null) {
        components.getRevisionListener().consume(revision);
      }
      updateDiff();
    }
  }
);
  myChangesOnlyCheckBox.setSelected(configuration.SHOW_ONLY_CHANGED_IN_SELECTION_DIFF);
  updateRevisionsList();
  myChangesOnlyCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      configuration.SHOW_ONLY_CHANGED_IN_SELECTION_DIFF=myChangesOnlyCheckBox.isSelected();
      updateRevisionsList();
    }
  }
);
  init();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      myList.getSelectionModel().addSelectionInterval(0,0);
    }
  }
);
  setTitle(VcsBundle.message("dialog.title.history.for.file",file.getName()));
}
