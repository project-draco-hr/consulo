{
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  GrExpression expr=(GrExpression)reference.getElement();
  if (expr.getParent() instanceof GrAssignmentExpression) {
    GrAssignmentExpression parent=(GrAssignmentExpression)expr.getParent();
    if (expr.equals(parent.getLValue())) {
      conflicts.putValue(expr,GroovyRefactoringBundle.message("local.varaible.is.lvalue"));
    }
  }
  if ((referenced instanceof GrAccessorMethod || referenced instanceof GrField) && expr instanceof GrReferenceExpression) {
    final GroovyResolveResult resolveResult=((GrReferenceExpression)expr).advancedResolve();
    if (resolveResult.getElement() instanceof GrAccessorMethod && !resolveResult.isInvokedOnProperty()) {
      final PsiElement parent=expr.getParent();
      if (!(parent instanceof GrCall && parent instanceof GrExpression)) {
        conflicts.putValue(expr,GroovyRefactoringBundle.message("reference.to.accessor.0.is.used",CommonRefactoringUtil.htmlEmphasize(PsiFormatUtil.formatMethod((GrAccessorMethod)resolveResult.getElement(),PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE))));
      }
    }
  }
  return conflicts;
}
