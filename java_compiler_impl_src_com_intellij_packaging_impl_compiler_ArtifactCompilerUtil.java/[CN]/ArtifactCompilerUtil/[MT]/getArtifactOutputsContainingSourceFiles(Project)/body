{
  final List<VirtualFile> allOutputs=new ArrayList<VirtualFile>();
  for (  Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    ContainerUtil.addIfNotNull(artifact.getOutputFile(),allOutputs);
  }
  final Set<VirtualFile> affectedOutputPaths=new HashSet<VirtualFile>();
  final PackagingElementResolvingContext context=ArtifactManager.getInstance(project).getResolvingContext();
  for (  Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    ArtifactUtil.processPackagingElements(artifact,null,new PackagingElementProcessor<PackagingElement<?>>(){
      @Override public boolean shouldProcessSubstitution(      ComplexPackagingElement<?> element){
        return !(element instanceof ArtifactPackagingElement);
      }
      @Override public boolean process(      @NotNull PackagingElement<?> element,      @NotNull PackagingElementPath path){
        if (element instanceof FileOrDirectoryCopyPackagingElement<?>) {
          final VirtualFile file=((FileOrDirectoryCopyPackagingElement)element).findFile();
          if (file != null) {
            for (            VirtualFile output : allOutputs) {
              if (VfsUtilCore.isAncestor(output,file,false)) {
                affectedOutputPaths.add(output);
              }
            }
          }
        }
        return true;
      }
    }
,context,true);
  }
  return affectedOutputPaths;
}
