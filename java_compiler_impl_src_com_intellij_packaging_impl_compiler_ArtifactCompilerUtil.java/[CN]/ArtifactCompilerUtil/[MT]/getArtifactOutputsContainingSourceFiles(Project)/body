{
  final List<VirtualFile> allOutputs=new ArrayList<VirtualFile>();
  for (  Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    ContainerUtil.addIfNotNull(artifact.getOutputFile(),allOutputs);
  }
  final Set<VirtualFile> roots=new HashSet<VirtualFile>();
  final PackagingElementResolvingContext context=ArtifactManager.getInstance(project).getResolvingContext();
  for (  Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    Processor<PackagingElement<?>> processor=new Processor<PackagingElement<?>>(){
      @Override public boolean process(      @NotNull PackagingElement<?> element){
        if (element instanceof FileOrDirectoryCopyPackagingElement<?>) {
          final VirtualFile file=((FileOrDirectoryCopyPackagingElement)element).findFile();
          if (file != null) {
            roots.add(file);
          }
        }
        return true;
      }
    }
;
    ArtifactUtil.processRecursivelySkippingIncludedArtifacts(artifact,processor,context);
  }
  final Module[] modules=ModuleManager.getInstance(project).getModules();
  for (  Module module : modules) {
    final Facet[] facets=FacetManager.getInstance(module).getAllFacets();
    for (    Facet facet : facets) {
      if (facet instanceof FacetRootsProvider) {
        roots.addAll(((FacetRootsProvider)facet).getFacetRoots());
      }
    }
  }
  final Set<VirtualFile> affectedOutputPaths=new HashSet<VirtualFile>();
  for (  VirtualFile output : allOutputs) {
    for (    VirtualFile root : roots) {
      if (VfsUtilCore.isAncestor(output,root,false)) {
        affectedOutputPaths.add(output);
      }
    }
  }
  return affectedOutputPaths;
}
