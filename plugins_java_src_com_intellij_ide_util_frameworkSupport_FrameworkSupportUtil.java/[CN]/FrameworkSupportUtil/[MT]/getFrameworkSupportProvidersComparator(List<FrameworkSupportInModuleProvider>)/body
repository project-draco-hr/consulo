{
  DFSTBuilder<FrameworkSupportInModuleProvider> builder=new DFSTBuilder<FrameworkSupportInModuleProvider>(GraphGenerator.create(CachingSemiGraph.create(new ProvidersGraph(types))));
  if (!builder.isAcyclic()) {
    Pair<FrameworkSupportInModuleProvider,FrameworkSupportInModuleProvider> pair=builder.getCircularDependency();
    LOG.error("Circular dependency between types '" + pair.getFirst().getFrameworkType().getId() + "' and '"+ pair.getSecond().getFrameworkType().getId()+ "' was found.");
  }
  return builder.comparator();
}
