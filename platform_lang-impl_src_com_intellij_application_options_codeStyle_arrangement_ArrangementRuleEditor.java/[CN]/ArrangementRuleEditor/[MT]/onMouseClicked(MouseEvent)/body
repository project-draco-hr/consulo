{
  if (myModel == null) {
    return;
  }
  ArrangementAtomNodeComponent clickedComponent=getNodeComponentAt(e.getLocationOnScreen());
  if (clickedComponent == null) {
    return;
  }
  ArrangementAtomMatchCondition chosenCondition=clickedComponent.getMatchCondition();
  boolean remove=myModel.hasCondition(chosenCondition.getValue());
  clickedComponent.setSelected(!remove);
  repaintComponent(clickedComponent);
  if (remove) {
    myModel.removeAndCondition(chosenCondition);
    return;
  }
  Collection<Set<?>> mutexes=myFilter.getMutexes();
  for (  Set<?> mutex : mutexes) {
    if (!mutex.contains(chosenCondition.getValue())) {
      continue;
    }
    for (    Object key : mutex) {
      if (myModel.hasCondition(key)) {
        ArrangementAtomNodeComponent componentToDeselect=myComponents.get(key);
        myModel.replaceCondition(componentToDeselect.getMatchCondition(),chosenCondition);
        for (        ArrangementAtomNodeComponent componentToCheck : myComponents.values()) {
          if (!ArrangementConfigUtil.isEnabled(componentToCheck.getMatchCondition().getValue(),myFilter,myModel.getMatchCondition())) {
            myModel.removeAndCondition(componentToCheck.getMatchCondition());
          }
        }
        updateState(myModel);
        return;
      }
    }
  }
  myModel.addAndCondition(chosenCondition);
}
