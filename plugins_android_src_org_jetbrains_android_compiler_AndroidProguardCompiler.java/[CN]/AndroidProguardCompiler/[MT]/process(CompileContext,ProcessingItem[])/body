{
  final List<ProcessingItem> processedItems=new ArrayList<ProcessingItem>();
  for (  ProcessingItem item : items) {
    final MyProcessingItem processingItem=(MyProcessingItem)item;
    if (!AndroidCompileUtil.isModuleAffected(context,processingItem.myModule)) {
      continue;
    }
    final String proguardConfigFileOsPath=FileUtil.toSystemDependentName(processingItem.getProguardConfigFile().getPath());
    final String[] classFilesDirOsPaths=toOsPaths(processingItem.getAllClassFilesDirs());
    final String[] externalJarOsPaths=toOsPaths(processingItem.getExternalJars());
    try {
      final String inputJarOsPath=buildTempInputJar(classFilesDirOsPaths);
      final String logsDirOsPath=processingItem.getLogsDirectoryOsPath();
      final Map<CompilerMessageCategory,List<String>> messages=launchProguard(processingItem.getTarget(),processingItem.getSdkOsPath(),proguardConfigFileOsPath,inputJarOsPath,externalJarOsPaths,processingItem.getOutputJarOsPath(),logsDirOsPath);
      CompilerUtil.refreshIOFile(new File(processingItem.getOutputJarOsPath()));
      AndroidCompileUtil.addMessages(context,messages);
      if (messages.get(CompilerMessageCategory.ERROR).isEmpty()) {
        processedItems.add(item);
      }
    }
 catch (    IOException e) {
      if (e.getMessage() == null) {
        LOG.error(e);
      }
 else {
        LOG.info(e);
        context.addMessage(CompilerMessageCategory.ERROR,"I/O error: " + e.getMessage(),null,-1,-1);
      }
    }
  }
  return processedItems.toArray(new ProcessingItem[processedItems.size()]);
}
