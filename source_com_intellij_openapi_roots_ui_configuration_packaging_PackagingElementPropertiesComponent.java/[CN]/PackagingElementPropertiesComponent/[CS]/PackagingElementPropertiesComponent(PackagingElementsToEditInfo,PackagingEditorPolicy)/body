{
  myElementsInfo=elementsInfo;
  myElementNameLabel.setText(elementsInfo.getElementText());
  myEditorPolicy=editorPolicy;
  if (elementsInfo.getAllowedPackagingMethods().length > 1 && elementsInfo.getPackagingMethod() != null) {
    for (    PackagingMethod method : elementsInfo.getAllowedPackagingMethods()) {
      myPackagingMethodBox.addItem(method);
    }
    myPackagingMethodBox.setRenderer(new PackagingMethodListCellRenderer());
    myPackagingMethodBox.setSelectedItem(myLastSelectedMethod=elementsInfo.getPackagingMethod());
    myPackagingMethodBox.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        updateOutputPath();
      }
    }
);
  }
 else {
    myPackagingMethodBox.setVisible(false);
    myPackagingMethodLabel.setVisible(false);
  }
  String outputPath=elementsInfo.getRelativePath();
  myPathTails=elementsInfo.getPathTails();
  if (outputPath != null) {
    myOutputPathField.setText(outputPath);
  }
 else {
    myOutputPathField.setVisible(false);
    myOutputPathLabel.setVisible(false);
  }
  List<ContainerElement> elements=elementsInfo.getElements();
  if (elements.size() == 1) {
    ContainerElement element=elements.get(0);
    myAdditionalPropertiesConfigurable=editorPolicy.getAdditionalPropertiesConfigurable(element);
    if (myAdditionalPropertiesConfigurable != null) {
      myLabelsPanel.add(myAdditionalPropertiesConfigurable.getLabelsComponent(),BorderLayout.CENTER);
      myFieldPanel.add(myAdditionalPropertiesConfigurable.getFieldsComponent(),BorderLayout.CENTER);
      myAdditionalPropertiesConfigurable.resetFrom(element);
    }
  }
}
