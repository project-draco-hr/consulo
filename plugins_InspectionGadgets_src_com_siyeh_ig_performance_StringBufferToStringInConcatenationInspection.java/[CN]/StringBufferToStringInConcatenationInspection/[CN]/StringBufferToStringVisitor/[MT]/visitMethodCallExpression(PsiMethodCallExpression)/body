{
  super.visitMethodCallExpression(expression);
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression parentBinary=(PsiBinaryExpression)parent;
  final PsiJavaToken sign=parentBinary.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!tokenType.equals(JavaTokenType.PLUS)) {
    return;
  }
  final PsiExpression rhs=parentBinary.getROperand();
  if (rhs == null) {
    return;
  }
  if (rhs.equals(expression)) {
    final PsiExpression lhs=parentBinary.getLOperand();
    if (!TypeUtils.expressionHasType(lhs,CommonClassNames.JAVA_LANG_STRING)) {
      return;
    }
  }
 else   if (!TypeUtils.expressionHasType(rhs,CommonClassNames.JAVA_LANG_STRING)) {
    return;
  }
  if (!isStringBufferToString(expression)) {
    return;
  }
  registerMethodCallError(expression);
}
