{
  if (true)   return;
  String indent=new SimpleDateFormat("hh:mm:ss:SSSS").format(new Date()) + (SwingUtilities.isEventDispatchThread() ? "-(EDT) " : "-(" + Thread.currentThread() + " ");
  @NonNls String s=indent + msg + (task == null ? " - " : "; task: " + task);
  for (  Object arg : args) {
    if (!StringUtil.isEmpty(String.valueOf(arg))) {
      s+="; " + arg;
      if (arg instanceof Document) {
        Document document=(Document)arg;
        s+=" (\"" + StringUtil.first(document.getImmutableCharSequence(),40,true).toString().replaceAll("\n"," ") + "\")";
      }
    }
  }
  if (task != null) {
    if (task.indicator.isCanceled()) {
      s+="; indicator: " + task.indicator;
    }
    Document document=task.getDocument();
    boolean stillUncommitted=!task.project.isDisposed() && ((PsiDocumentManagerBase)PsiDocumentManager.getInstance(task.project)).isInUncommittedSet(document);
    if (stillUncommitted) {
      s+="; still uncommitted";
    }
    Set<Document> uncommitted=project == null || project.isDisposed() ? Collections.<Document>emptySet() : ((PsiDocumentManagerBase)PsiDocumentManager.getInstance(project)).myUncommittedDocuments;
    if (!uncommitted.isEmpty()) {
      s+="; uncommitted: " + uncommitted;
    }
  }
synchronized (lock) {
    int size=documentsToCommit.size();
    if (size != 0) {
      s+=" (" + size + " documents still in queue: ";
      int i=0;
      for (      CommitTask commitTask : documentsToCommit) {
        s+=commitTask + "; ";
        if (++i > 4) {
          s+=" ... ";
          break;
        }
      }
      s+=")";
    }
  }
  System.out.println(s);
synchronized (log) {
    log.append(s).append("\n");
    if (log.length() > 100000) {
      log.delete(0,log.length() - 50000);
    }
  }
}
