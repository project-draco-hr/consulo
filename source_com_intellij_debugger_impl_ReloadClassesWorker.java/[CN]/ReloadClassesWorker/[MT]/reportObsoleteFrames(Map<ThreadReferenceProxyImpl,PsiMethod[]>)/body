{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      VirtualMachineProxyImpl vm=getDebugProcess().getVirtualMachineProxy();
      for (Iterator it=vm.allThreads().iterator(); it.hasNext(); ) {
        try {
          ThreadReferenceProxyImpl threadProxy=(ThreadReferenceProxyImpl)it.next();
          if (threadProxy.isSuspended()) {
            PsiMethod[] methods=methodsOnTheStack.get(threadProxy);
            if (methods != null) {
              for (Iterator itf=threadProxy.frames().iterator(); itf.hasNext(); ) {
                StackFrameProxyImpl stackFrame=(StackFrameProxyImpl)itf.next();
                if (stackFrame.location().method().isObsolete()) {
                  PsiMethod method=methods[stackFrame.getFrameIndex()];
                  if (method != null) {
                    PsiFile psiFile=method.getContainingFile();
                    VirtualFile file=null;
                    int lineIndex=0;
                    if (psiFile != null) {
                      file=psiFile.getVirtualFile();
                      if (file != null) {
                        lineIndex=StringUtil.offsetToLineNumber(psiFile.getText(),method.getTextOffset());
                      }
                      MethodSignature sig=method.getSignature(PsiSubstitutor.EMPTY);
                      myProgress.addMessage(MessageCategory.WARNING,getPresentableSignatureText(sig) + " : Breakpoints will be ignored for the obsolete version of the method. ");
                    }
                  }
                }
              }
            }
          }
        }
 catch (        EvaluateException e) {
        }
catch (        VMDisconnectedException e) {
        }
      }
    }
  }
);
}
