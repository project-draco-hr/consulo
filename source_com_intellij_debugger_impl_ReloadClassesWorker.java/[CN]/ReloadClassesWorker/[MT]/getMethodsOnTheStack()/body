{
  final Map<ThreadReferenceProxyImpl,PsiMethod[]> myThreadsToMethods=new HashMap<ThreadReferenceProxyImpl,PsiMethod[]>();
  PsiDocumentManager.getInstance(getProject()).commitAndRunReadAction(new Runnable(){
    public void run(){
      VirtualMachineProxyImpl vm=getDebugProcess().getVirtualMachineProxy();
      try {
        for (Iterator it=vm.allThreads().iterator(); it.hasNext(); ) {
          ThreadReferenceProxyImpl threadProxy=(ThreadReferenceProxyImpl)it.next();
          if (threadProxy.isSuspended()) {
            List frames=threadProxy.frames();
            PsiMethod[] methods=new PsiMethod[frames.size()];
            myThreadsToMethods.put(threadProxy,methods);
            for (Iterator itf=frames.iterator(); itf.hasNext(); ) {
              StackFrameProxyImpl stackFrame=(StackFrameProxyImpl)itf.next();
              methods[stackFrame.getFrameIndex()]=findPsiMethod(getProject(),stackFrame);
            }
          }
        }
      }
 catch (      EvaluateException e) {
      }
    }
  }
);
  return myThreadsToMethods;
}
