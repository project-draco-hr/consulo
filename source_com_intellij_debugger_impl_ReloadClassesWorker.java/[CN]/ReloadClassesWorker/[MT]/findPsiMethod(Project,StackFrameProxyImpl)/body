{
  try {
    String className=DebuggerUtilsEx.signatureToName(stackFrame.location().declaringType().signature());
    GlobalSearchScope scope=GlobalSearchScope.allScope(project);
    PsiClass cls=PsiManager.getInstance(project).findClass(className,scope);
    if (cls == null)     return null;
    Method method=stackFrame.location().method();
    PsiMethod[] methods=cls.findMethodsByName(method.name(),false);
    nextMethod:     for (int i=0; i < methods.length; i++) {
      PsiMethod m=methods[i];
      if (method.isStatic() == m.hasModifierProperty(PsiModifier.STATIC)) {
        PsiParameter[] params=m.getParameterList().getParameters();
        List argTypes=method.argumentTypeNames();
        if (argTypes.size() == params.length) {
          int j=0;
          for (Iterator iterator=argTypes.iterator(); iterator.hasNext(); j++) {
            String typeName=(String)iterator.next();
            if (!params[j].getType().getCanonicalText().equals(typeName))             continue nextMethod;
          }
          return m;
        }
      }
    }
  }
 catch (  EvaluateException e) {
    e.printStackTrace();
  }
  return null;
}
