{
  final JPanel panel=new JPanel(new GridBagLayout());
  final GridBagConstraints gc=new GridBagConstraints(GridBagConstraints.RELATIVE,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  final JLabel classNameLabel=new JLabel(RefactoringBundle.message("replace.method.with.object.class.name.label"));
  classNameLabel.setLabelFor(myInnerClassNameField);
  panel.add(classNameLabel,gc);
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.weightx=1;
  String innerClassName=StringUtil.capitalize(myMethod.getName());
  int idx=1;
  while (myMethod.getContainingClass().findInnerClassByName(innerClassName,true) != null) {
    innerClassName+=idx++;
  }
  myInnerClassNameField.setText(innerClassName);
  myInnerClassNameField.selectAll();
  panel.add(myInnerClassNameField,gc);
  myInnerClassNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      validateButtons();
    }
  }
);
  gc.gridy=1;
  gc.gridwidth=2;
  gc.anchor=GridBagConstraints.EAST;
  gc.fill=GridBagConstraints.NONE;
  myDeleteMethodCb.setEnabled(OverridingMethodsSearch.search(myMethod).findAll().isEmpty() && myMethod.findSuperMethods().length == 0);
  panel.add(myDeleteMethodCb,gc);
  return panel;
}
