{
  ASTNode anchor=null;
  ASTNode firstChildNode=myOldParent.getFirstChildNode();
  for (int i=0; i < myPos; i++) {
    anchor=anchor == null ? firstChildNode : anchor.getTreeNext();
  }
  PsiElement psiParent=myOldParent.getPsi();
  PsiElement psiChild=getPsi(myNewNode,file);
  if (psiParent != null && psiChild != null) {
    PsiTreeChangeEventImpl event=new PsiTreeChangeEventImpl(file.getManager());
    event.setParent(psiParent);
    event.setChild(psiChild);
    event.setFile(file);
    ((PsiManagerEx)file.getManager()).beforeChildAddition(event);
  }
  ((TreeElement)myNewNode).rawRemove();
  if (anchor != null) {
    ((TreeElement)anchor).rawInsertAfterMe((TreeElement)myNewNode);
  }
 else {
    if (firstChildNode != null) {
      ((TreeElement)firstChildNode).rawInsertBeforeMe((TreeElement)myNewNode);
    }
 else {
      ((CompositeElement)myOldParent).rawAddChildren((TreeElement)myNewNode);
    }
  }
  astDiffBuilder.nodeInserted(myOldParent,myNewNode,myPos);
  ((TreeElement)myNewNode).clearCaches();
  ((CompositeElement)myOldParent).subtreeChanged();
  DebugUtil.checkTreeStructure(myOldParent);
}
