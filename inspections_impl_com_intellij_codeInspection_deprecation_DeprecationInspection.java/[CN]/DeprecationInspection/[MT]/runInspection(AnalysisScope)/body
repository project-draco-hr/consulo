{
  getRefManager().findAllDeclarations();
  getRefManager().iterate(new RefManager.RefIterator(){
    public void accept(    RefElement refElement){
      if (refElement instanceof RefMethod && ((RefMethod)refElement).isOverridesDeprecated()) {
        if (!InspectionManagerEx.isToCheckMember((PsiDocCommentOwner)((RefMethod)refElement).getElement(),DeprecationInspection.this.getShortName()))         return;
        addProblemElement(refElement,new ProblemDescriptor[]{getManager().createProblemDescriptor(refElement.getElement(),InspectionsBundle.message("inspection.deprecated.problem.descriptor"),(LocalQuickFix[])null,ProblemHighlightType.LIKE_DEPRECATED)});
      }
 else       if (refElement.isUsesDeprecatedApi()) {
        if (getDescriptions(refElement) != null)         return;
        if (refElement.getElement() instanceof PsiDocCommentOwner && !InspectionManagerEx.isToCheckMember((PsiDocCommentOwner)refElement.getElement(),DeprecationInspection.this.getShortName()))         return;
        addProblemElement(refElement,new ProblemDescriptor[]{getManager().createProblemDescriptor(refElement.getElement(),InspectionsBundle.message("inspection.deprecated.problem.descriptor1"),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING)});
      }
    }
  }
);
}
