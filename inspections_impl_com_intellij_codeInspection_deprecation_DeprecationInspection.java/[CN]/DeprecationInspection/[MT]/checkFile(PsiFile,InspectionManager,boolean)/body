{
  final Set<ProblemDescriptor> problems=new HashSet<ProblemDescriptor>();
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      JavaResolveResult result=reference.advancedResolve(true);
      PsiElement resolved=result.getElement();
      final ProblemDescriptor problemDescriptor=checkDeprecated(resolved,reference.getReferenceNameElement(),manager);
      if (problemDescriptor != null) {
        problems.add(problemDescriptor);
      }
    }
    public void visitNewExpression(    PsiNewExpression expression){
      super.visitNewExpression(expression);
      PsiType type=expression.getType();
      PsiExpressionList list=expression.getArgumentList();
      if (!(type instanceof PsiClassType))       return;
      PsiClassType.ClassResolveResult typeResult=((PsiClassType)type).resolveGenerics();
      PsiClass aClass=typeResult.getElement();
      if (aClass == null)       return;
      if (aClass instanceof PsiAnonymousClass) {
        type=((PsiAnonymousClass)aClass).getBaseClassType();
        typeResult=((PsiClassType)type).resolveGenerics();
        aClass=typeResult.getElement();
        if (aClass == null)         return;
      }
      final PsiResolveHelper resolveHelper=expression.getManager().getResolveHelper();
      final PsiMethod[] constructors=aClass.getConstructors();
      if (constructors.length > 0 && list != null) {
        JavaResolveResult[] results=resolveHelper.multiResolveConstructor((PsiClassType)type,list,list);
        MethodCandidateInfo result=null;
        if (results.length == 1)         result=(MethodCandidateInfo)results[0];
        PsiMethod constructor=result == null ? null : result.getElement();
        if (constructor != null && expression.getClassReference() != null) {
          final ProblemDescriptor problemDescriptor=checkDeprecated(constructor,expression.getClassReference(),manager);
          if (problemDescriptor != null) {
            problems.add(problemDescriptor);
          }
        }
      }
    }
    public void visitMethodCallExpression(    PsiMethodCallExpression methodCall){
      super.visitMethodCallExpression(methodCall);
      PsiReferenceExpression referenceToMethod=methodCall.getMethodExpression();
      JavaResolveResult resolveResult=referenceToMethod.advancedResolve(true);
      PsiElement element=resolveResult.getElement();
      final ProblemDescriptor problemDescriptor=checkDeprecated(element,referenceToMethod.getReferenceNameElement(),manager);
      if (problemDescriptor != null) {
        problems.add(problemDescriptor);
      }
    }
  }
);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
