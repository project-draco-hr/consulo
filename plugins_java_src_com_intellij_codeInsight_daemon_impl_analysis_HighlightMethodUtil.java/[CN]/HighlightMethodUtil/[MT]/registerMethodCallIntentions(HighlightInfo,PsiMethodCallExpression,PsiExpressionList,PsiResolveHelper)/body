{
  TextRange fixRange=getFixRange(methodCall);
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreateMethodFromUsageFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreateAbstractMethodFromUsageFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreateConstructorFromSuperFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreateConstructorFromThisFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreatePropertyFromUsageFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createCreateGetterSetterPropertyFromUsageFix(methodCall));
  CandidateInfo[] methodCandidates=resolveHelper.getReferencedMethodCandidates(methodCall,false);
  CastMethodArgumentFix.REGISTRAR.registerCastActions(methodCandidates,methodCall,highlightInfo,fixRange);
  PermuteArgumentsFix.registerFix(highlightInfo,methodCall,methodCandidates,fixRange);
  AddTypeArgumentsFix.REGISTRAR.registerCastActions(methodCandidates,methodCall,highlightInfo,fixRange);
  registerMethodAccessLevelIntentions(methodCandidates,methodCall,list,highlightInfo);
  registerChangeMethodSignatureFromUsageIntentions(methodCandidates,list,highlightInfo,fixRange);
  RemoveRedundantArgumentsFix.registerIntentions(methodCandidates,list,highlightInfo,fixRange);
  ConvertDoubleToFloatFix.registerIntentions(methodCandidates,list,highlightInfo,fixRange);
  WrapExpressionFix.registerWrapAction(methodCandidates,list.getExpressions(),highlightInfo);
  registerChangeParameterClassFix(methodCall,list,highlightInfo);
  if (methodCandidates.length == 0) {
    QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createStaticImportMethodFix(methodCall));
  }
  for (  IntentionAction action : QUICK_FIX_FACTORY.getVariableTypeFromCallFixes(methodCall,list)) {
    QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,action);
  }
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createReplaceAddAllArrayToCollectionFix(methodCall));
  QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QUICK_FIX_FACTORY.createSurroundWithArrayFix(methodCall,null));
  QualifyThisArgumentFix.registerQuickFixAction(methodCandidates,methodCall,highlightInfo,fixRange);
  CandidateInfo[] candidates=resolveHelper.getReferencedMethodCandidates(methodCall,true);
  ChangeStringLiteralToCharInMethodCallFix.registerFixes(candidates,methodCall,highlightInfo);
}
