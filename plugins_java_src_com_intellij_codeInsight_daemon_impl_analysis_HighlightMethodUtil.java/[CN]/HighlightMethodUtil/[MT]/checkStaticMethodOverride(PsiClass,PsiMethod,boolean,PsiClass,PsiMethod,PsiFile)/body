{
  if (superMethod == null)   return null;
  PsiManager manager=containingFile.getManager();
  PsiModifierList superModifierList=superMethod.getModifierList();
  PsiModifierList modifierList=method.getModifierList();
  if (superModifierList.hasModifierProperty(PsiModifier.PRIVATE))   return null;
  if (superModifierList.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !JavaPsiFacade.getInstance(manager.getProject()).arePackagesTheSame(aClass,superClass)) {
    return null;
  }
  boolean isSuperMethodStatic=superModifierList.hasModifierProperty(PsiModifier.STATIC);
  if (isMethodStatic != isSuperMethodStatic) {
    TextRange textRange=HighlightNamesUtil.getMethodDeclarationTextRange(method);
    @NonNls final String messageKey=isMethodStatic ? "static.method.cannot.override.instance.method" : "instance.method.cannot.override.static.method";
    String description=JavaErrorMessages.message(messageKey,JavaHighlightUtil.formatMethod(method),HighlightUtil.formatClass(aClass),JavaHighlightUtil.formatMethod(superMethod),HighlightUtil.formatClass(superClass));
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(description).create();
    if (!isSuperMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,modifierList) == null) {
      QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(method,PsiModifier.STATIC,isSuperMethodStatic,false));
    }
    if (manager.isInProject(superMethod) && (!isMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,superModifierList) == null)) {
      QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(superMethod,PsiModifier.STATIC,isMethodStatic,true));
    }
    return info;
  }
  if (isMethodStatic) {
    int accessLevel=PsiUtil.getAccessLevel(modifierList);
    String accessModifier=PsiUtil.getAccessModifier(accessLevel);
    HighlightInfo info=isWeaker(method,modifierList,accessModifier,accessLevel,superMethod,true);
    if (info != null)     return info;
    info=checkSuperMethodIsFinal(method,superMethod);
    if (info != null)     return info;
  }
  return null;
}
