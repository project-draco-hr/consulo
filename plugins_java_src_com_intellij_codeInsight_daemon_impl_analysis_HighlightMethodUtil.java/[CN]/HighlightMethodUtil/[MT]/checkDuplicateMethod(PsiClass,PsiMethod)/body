{
  if (aClass == null || method instanceof ExternallyDefinedPsiElement)   return null;
  MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
  int methodCount=0;
  final PsiMethod[] methodsByName=aClass.findMethodsByName(method.getName(),false);
  for (  PsiMethod other : methodsByName) {
    if (other instanceof ExternallyDefinedPsiElement)     continue;
    if (other == method || other.isConstructor() == method.isConstructor() && other.getSignature(PsiSubstitutor.EMPTY).equals(methodSignature)) {
      methodCount++;
      if (methodCount > 1)       break;
    }
  }
  if (methodCount == 1 && aClass.isEnum() && GenericsHighlightUtil.isEnumSyntheticMethod(methodSignature,aClass.getProject())) {
    methodCount++;
  }
  if (methodCount > 1) {
    String description=JavaErrorMessages.message("duplicate.method",HighlightUtil.formatMethod(method),HighlightUtil.formatClass(aClass));
    TextRange textRange=HighlightNamesUtil.getMethodDeclarationTextRange(method);
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(description).create();
  }
  return null;
}
