{
  PsiMethod method=methodSignature.getMethod();
  PsiType returnType=methodSignature.getSubstitutor().substitute(method.getReturnType());
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return null;
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    PsiType declaredReturnType=superMethod.getReturnType();
    PsiType superReturnType=declaredReturnType;
    if (superMethodSignature.isRaw())     superReturnType=TypeConversionUtil.erasure(declaredReturnType);
    if (returnType == null || superReturnType == null || method == superMethod)     continue;
    PsiClass superClass=superMethod.getContainingClass();
    if (superClass == null)     continue;
    HighlightInfo highlightInfo=checkSuperMethodSignature(superMethod,superMethodSignature,superReturnType,method,methodSignature,returnType,includeRealPositionInfo,JavaErrorMessages.message("incompatible.return.type"),method);
    if (highlightInfo != null)     return highlightInfo;
  }
  return null;
}
