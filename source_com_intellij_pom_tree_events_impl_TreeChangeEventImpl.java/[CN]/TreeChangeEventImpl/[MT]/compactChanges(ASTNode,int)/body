{
  int currentDepth=myOfEqualDepth.size();
  while (--currentDepth > depth) {
    final Set<ASTNode> treeElements=myOfEqualDepth.get(currentDepth);
    if (treeElements == null)     continue;
    final Iterator<ASTNode> iterator=treeElements.iterator();
    while (iterator.hasNext()) {
      boolean isUnderCompacted=false;
      final TreeElement treeElement=(TreeElement)iterator.next();
      ASTNode currentParent=treeElement;
      while (currentParent != null) {
        if (currentParent == parent) {
          isUnderCompacted=true;
          break;
        }
        currentParent=currentParent.getTreeParent();
      }
      if (isUnderCompacted) {
        final ChangeInfoImpl compactedChange=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,treeElement,myFileElement.getCharTable());
        compactedChange.compactChange(treeElement,getChangesByElement(treeElement));
        iterator.remove();
        myChangedElements.remove(treeElement);
        final CompositeElement treeParent=treeElement.getTreeParent();
        final TreeChange changesByElement=getChangesByElement(treeParent);
        if (changesByElement != null) {
          final ChangeInfoImpl changeByChild=(ChangeInfoImpl)changesByElement.getChangeByChild(treeElement);
          if (changeByChild != null) {
            changeByChild.setOldLength(compactedChange.getOldLength());
          }
 else {
            changesByElement.addChange(treeElement,compactedChange);
          }
        }
 else         processElementaryChange(treeParent,treeElement,compactedChange,currentDepth - 1);
      }
    }
  }
}
