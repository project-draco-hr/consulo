{
  setLayout(new BorderLayout());
  myList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  myList.setModel(myListModel);
  final DefaultActionGroup actionGroup=new DefaultActionGroup();
  final ReorderableListController<Object> controller=ReorderableListController.create(myList,actionGroup);
  controller.addAction(new AddAction());
  controller.addRemoveAction(ProjectBundle.message("module.remove.action"));
  controller.addMoveUpAction();
  controller.addMoveDownAction();
  myList.setCellRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof Library) {
        final Library library=(Library)value;
        if (library.getName() != null && library.getUrls(OrderRootType.CLASSES).length == 0) {
          SimpleTextCellAppearance.invalid(library.getName(),Icons.LIBRARY_ICON).customize(this);
        }
 else {
          OrderEntryCellAppearanceUtils.forLibrary(library).customize(this);
        }
      }
    }
  }
);
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.PROJECT_VIEW_TOOLBAR,actionGroup,true).getComponent(),BorderLayout.NORTH);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myList);
  add(scrollPane,BorderLayout.CENTER);
  final FontMetrics fontMetrics=myList.getFontMetrics(myList.getFont());
  scrollPane.setPreferredSize(new Dimension(0,fontMetrics.getHeight() * 12));
  myList.getModel().addListDataListener(new ListDataListener(){
    public void intervalAdded(    ListDataEvent e){
    }
    public void intervalRemoved(    ListDataEvent e){
      listChanged(e);
    }
    public void contentsChanged(    ListDataEvent e){
    }
  }
);
}
