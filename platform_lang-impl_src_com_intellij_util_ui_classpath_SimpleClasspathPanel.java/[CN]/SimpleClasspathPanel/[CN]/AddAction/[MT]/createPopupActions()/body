{
  int index=1;
  final List<PopupAction> actions=new ArrayList<PopupAction>();
  actions.add(new ChooseAndAddAction(index++,"Jar...",Icons.JAR_ICON){
    @NotNull protected List<Library> doChoose(){
      final ChooseJarDialog dialog=new ChooseJarDialog(SimpleClasspathPanel.this,getVirtualFiles(),myDisposable);
      dialog.doChoose();
      return dialog.getChosenElements();
    }
  }
);
  actions.add(new ChooseAndAddAction(index++,"Library...",Icons.LIBRARY_ICON){
    @NotNull protected List<Library> doChoose(){
      final Set<VirtualFile> existingFiles=getVirtualFiles();
      final ChooseLibrariesDialog dialog=new ChooseLibrariesDialog(ProjectManager.getInstance().getDefaultProject(),"Choose Existing Libraries"){
        @Override protected boolean acceptsElement(        final Object element){
          if (!(element instanceof Library))           return true;
          final Library library=(Library)element;
          return !existingFiles.containsAll(Arrays.asList(library.getFiles(OrderRootType.CLASSES)));
        }
        @Override protected JComponent createCenterPanel(){
          final JPanel panel=new JPanel(new BorderLayout());
          panel.add(super.createCenterPanel(),BorderLayout.CENTER);
          final MultiLineLabel label=new MultiLineLabel("Please note that project-level and module-level libraries will not be\n\n" + "  added as a whole but will be converted to jars and folders instead.");
          label.setIcon(Messages.getWarningIcon());
          label.setIcon(Messages.getWarningIcon());
          panel.add(label,BorderLayout.SOUTH);
          return panel;
        }
      }
;
      dialog.show();
      final List<Library> libraries=dialog.getSelectedLibraries();
      final ArrayList<Library> result=new ArrayList<Library>();
      for (      Library o : libraries) {
        result.addAll(ensureApplicationLevel(o,existingFiles,myDisposable));
      }
      return result;
    }
  }
);
  return actions.toArray(new PopupAction[actions.size()]);
}
