{
  JavaRunConfigurationModule configurationModule=getConfigurationModule();
  final PsiClass testClass=configurationModule.checkModuleAndClassName(CLASS_NAME,ExecutionBundle.message("no.test.class.specified.error.text"));
  if (!JUnitUtil.isTestClass(testClass)) {
    throw new RuntimeConfigurationWarning(ExecutionBundle.message("class.isnt.test.class.error.message",CLASS_NAME));
  }
  if (METHOD_NAME == null || METHOD_NAME.trim().length() == 0) {
    throw new RuntimeConfigurationError(ExecutionBundle.message("method.name.not.specified.error.message"));
  }
  final JUnitUtil.TestMethodFilter filter=new JUnitUtil.TestMethodFilter(testClass);
  boolean found=false;
  boolean testAnnotated=false;
  for (  final PsiMethod method : testClass.findMethodsByName(METHOD_NAME,true)) {
    if (filter.value(method))     found=true;
    if (JUnitUtil.isTestAnnotated(method))     testAnnotated=true;
  }
  if (!found) {
    throw new RuntimeConfigurationWarning(ExecutionBundle.message("test.method.doesnt.exist.error.message",METHOD_NAME));
  }
  if (!AnnotationUtil.isAnnotated(testClass,JUnitUtil.RUN_WITH,true) && !testAnnotated) {
    try {
      final PsiClass testCaseClass=JUnitUtil.getTestCaseClass(configurationModule.getModule());
      if (!testClass.isInheritor(testCaseClass,true)) {
        throw new RuntimeConfigurationError(ExecutionBundle.message("class.isnt.inheritor.of.testcase.error.message",CLASS_NAME));
      }
    }
 catch (    JUnitUtil.NoJUnitException e) {
      throw new RuntimeConfigurationWarning(ExecutionBundle.message(AndroidBundle.message("cannot.find.testcase.error")));
    }
  }
}
