{
  if (myDisplayText != null)   return myDisplayText;
  XmlAttributeValue value=getValueElement();
  if (value == null)   return null;
  PsiElement firstChild=value.getFirstChild();
  if (firstChild == null)   return null;
  ASTNode child=firstChild.getNode();
  myValueTextRange=new TextRange(0,value.getTextLength());
  if (child != null && child.getElementType() == XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER) {
    myValueTextRange=new TextRange(child.getTextLength(),myValueTextRange.getEndOffset());
    child=child.getTreeNext();
  }
  final TIntArrayList gapsStarts=new TIntArrayList();
  final TIntArrayList gapsShifts=new TIntArrayList();
  StringBuffer buffer=new StringBuffer(getTextLength());
  while (child != null) {
    final int start=buffer.length();
    IElementType elementType=child.getElementType();
    if (elementType == XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER) {
      myValueTextRange=new TextRange(myValueTextRange.getStartOffset(),child.getTextRange().getStartOffset() - value.getTextRange().getStartOffset());
      break;
    }
    if (elementType == XmlTokenType.XML_CHAR_ENTITY_REF) {
      buffer.append(XmlUtil.getCharFromEntityRef(child.getText()));
    }
 else {
      buffer.append(child.getText());
    }
    int end=buffer.length();
    int originalLength=child.getTextLength();
    if (end - start != originalLength) {
      gapsStarts.add(start);
      gapsShifts.add(originalLength - (end - start));
    }
    child=child.getTreeNext();
  }
  myGapDisplayStarts=new int[gapsShifts.size()];
  myGapPhysicalStarts=new int[gapsShifts.size()];
  int currentGapsSum=0;
  for (int i=0; i < myGapDisplayStarts.length; i++) {
    currentGapsSum+=gapsShifts.get(i);
    myGapDisplayStarts[i]=gapsStarts.get(i);
    myGapPhysicalStarts[i]=myGapDisplayStarts[i] + currentGapsSum;
  }
  return myDisplayText=buffer.toString();
}
