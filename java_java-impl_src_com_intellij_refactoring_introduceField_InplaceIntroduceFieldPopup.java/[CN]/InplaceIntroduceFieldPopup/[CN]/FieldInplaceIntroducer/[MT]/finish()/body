{
  super.finish();
  final PsiField psiField=(PsiField)getVariable();
  LOG.assertTrue(psiField != null);
  myFieldTypePointer=SmartTypePointerManager.getInstance(myProject).createSmartTypePointer(psiField.getType());
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  myFieldName=psiField.getName();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      final PsiFile containingFile=myParentClass.getContainingFile();
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
      myInitializerExpression=restoreExpression(containingFile,psiField,elementFactory,getExprMarker(),myExprText);
      if (myInitializerExpression != null) {
        myExprMarker=myEditor.getDocument().createRangeMarker(myInitializerExpression.getTextRange());
      }
      final List<RangeMarker> occurrenceMarkers=getOccurrenceMarkers();
      for (int i=0, occurrenceMarkersSize=occurrenceMarkers.size(); i < occurrenceMarkersSize; i++) {
        RangeMarker marker=occurrenceMarkers.get(i);
        if (getExprMarker() != null && marker.getStartOffset() == getExprMarker().getStartOffset()) {
          myOccurrences[i]=myInitializerExpression;
          continue;
        }
        final PsiExpression psiExpression=restoreExpression(containingFile,psiField,elementFactory,marker,myLocalVariable != null ? myLocalName : myExprText);
        if (psiExpression != null) {
          myOccurrences[i]=psiExpression;
        }
      }
      myOccurrenceMarkers=null;
      if (psiField.isValid()) {
        psiField.delete();
      }
    }
  }
);
}
