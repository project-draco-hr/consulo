{
  if (!myInitListeners) {
    myInitListeners=true;
    myIntroduceFieldPanel.addVisibilityListener(new VisibilityListener(myProject,IntroduceFieldHandler.REFACTORING_NAME,myEditor){
      @Override protected String getVisibility(){
        return myIntroduceFieldPanel.getFieldVisibility();
      }
    }
);
    final FinalListener finalListener=new FinalListener(myProject,IntroduceFieldHandler.REFACTORING_NAME);
    myIntroduceFieldPanel.addFinalListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        finalListener.perform(myIntroduceFieldPanel.isDeclareFinal());
      }
    }
);
    myIntroduceFieldPanel.addOccurrenceListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        final Runnable restartTemplate=new Runnable(){
          @Override public void run(){
            final TemplateState templateState=TemplateManagerImpl.getTemplateState(myEditor);
            if (templateState != null) {
              templateState.gotoEnd(true);
              myTypeSelectorManager=new TypeSelectorManagerImpl(myProject,myDefaultParameterTypePointer.getType(),null,myInitializerExpression,myOccurrences);
              startTemplate(myIntroduceFieldPanel.isReplaceAllOccurrences(),myFieldTypePointer.getType());
            }
          }
        }
;
        CommandProcessor.getInstance().executeCommand(myProject,restartTemplate,IntroduceFieldHandler.REFACTORING_NAME,IntroduceFieldHandler.REFACTORING_NAME);
      }
    }
);
  }
  return myWholePanel;
}
