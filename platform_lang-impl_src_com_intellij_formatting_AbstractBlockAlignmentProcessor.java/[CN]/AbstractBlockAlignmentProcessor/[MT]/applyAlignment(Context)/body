{
  IndentData indent=calculateAlignmentAnchorIndent(context);
  if (indent == null) {
    return Result.TARGET_BLOCK_PROCESSED_NOT_ALIGNED;
  }
  WhiteSpace whiteSpace=context.targetBlock.getWhiteSpace();
  if (whiteSpace.containsLineFeeds() && applyIndentToTheFirstBlockOnLine(indent,context)) {
    return Result.TARGET_BLOCK_ALIGNED;
  }
  int diff=getAlignmentIndentDiff(indent,context);
  if (diff == 0) {
    return Result.TARGET_BLOCK_ALIGNED;
  }
  if (diff > 0) {
    int alignmentSpaces=whiteSpace.getSpaces() + diff;
    if (alignmentSpaces > context.maxAlignmentSpaces) {
      whiteSpace.setSpaces(1,whiteSpace.getIndentSpaces());
      reportAlignmentProcessingError(context);
      return Result.RECURSION_DETECTED;
    }
    whiteSpace.setSpaces(alignmentSpaces,whiteSpace.getIndentSpaces());
    if (!whiteSpace.containsLineFeeds()) {
      whiteSpace.setForceSkipTabulationsUsage(true);
    }
    return Result.TARGET_BLOCK_ALIGNED;
  }
  if (!context.alignment.isAllowBackwardShift()) {
    return Result.TARGET_BLOCK_PROCESSED_NOT_ALIGNED;
  }
  LeafBlockWrapper offsetResponsibleBlock=context.alignment.getOffsetRespBlockBefore(context.targetBlock);
  if (offsetResponsibleBlock == null) {
    return Result.TARGET_BLOCK_PROCESSED_NOT_ALIGNED;
  }
  if (offsetResponsibleBlock.getWhiteSpace().isIsReadOnly()) {
    return Result.UNABLE_TO_ALIGN_BACKWARD_BLOCK;
  }
  if (!CoreFormatterUtil.allowBackwardAlignment(offsetResponsibleBlock,context.targetBlock,context.alignmentMappings)) {
    return Result.UNABLE_TO_ALIGN_BACKWARD_BLOCK;
  }
  Set<LeafBlockWrapper> blocksCausedRealignment=context.backwardShiftedAlignedBlocks.get(offsetResponsibleBlock);
  if (blocksCausedRealignment != null && blocksCausedRealignment.contains(context.targetBlock)) {
    return Result.RECURSION_DETECTED;
  }
  WhiteSpace previousWhiteSpace=offsetResponsibleBlock.getWhiteSpace();
  previousWhiteSpace.setSpaces(previousWhiteSpace.getSpaces() - diff,previousWhiteSpace.getIndentOffset());
  if (!previousWhiteSpace.containsLineFeeds()) {
    previousWhiteSpace.setForceSkipTabulationsUsage(true);
  }
  return Result.BACKWARD_BLOCK_ALIGNED;
}
