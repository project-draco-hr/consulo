{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      if (DumbService.isDumb(myProject)) {
        throw new ModalityIgnorantBackgroundableTask.ToBeRepeatedException();
      }
      myOneSide=fragmentedContent.isOneSide();
      myIsAddition=fragmentedContent.isAddition();
      List<BeforeAfter<TextRange>> expandedRanges=expand(fragmentedContent.getRanges(),VcsConfiguration.getInstance(myProject).SHORT_DIFF_EXTRA_LINES,fragmentedContent.getBefore(),fragmentedContent.getAfter());
      final Document document=fragmentedContent.getBefore();
      final Document document1=fragmentedContent.getAfter();
      BeforeAfter<Integer> lines=new BeforeAfter<Integer>(0,0);
      for (      BeforeAfter<TextRange> lineNumbers : expandedRanges) {
        if (lines.getBefore() > 0 || lines.getAfter() > 0) {
          oldConvertor.emptyLine(lines.getBefore());
          newConvertor.emptyLine(lines.getAfter());
          lines=new BeforeAfter<Integer>(lines.getBefore() + 1,lines.getAfter() + 1);
          sbOld.append('\n');
          sbNew.append('\n');
        }
        myLineRanges.add(lines);
        oldConvertor.put(lines.getBefore(),lineNumbers.getBefore().getStartOffset());
        newConvertor.put(lines.getAfter(),lineNumbers.getAfter().getStartOffset());
        if (sbOld.length() > 0) {
          sbOld.append('\n');
        }
        final TextRange beforeRange=new TextRange(document.getLineStartOffset(lineNumbers.getBefore().getStartOffset()),document.getLineEndOffset(lineNumbers.getBefore().getEndOffset()));
        myBeforeFragments.add(beforeRange);
        sbOld.append(document.getText(beforeRange));
        if (sbNew.length() > 0) {
          sbNew.append('\n');
        }
        final TextRange afterRange=new TextRange(document1.getLineStartOffset(lineNumbers.getAfter().getStartOffset()),document1.getLineEndOffset(lineNumbers.getAfter().getEndOffset()));
        myAfterFragments.add(afterRange);
        sbNew.append(document1.getText(afterRange));
        int before=lines.getBefore() + lineNumbers.getBefore().getEndOffset() - lineNumbers.getBefore().getStartOffset() + 1;
        int after=lines.getAfter() + lineNumbers.getAfter().getEndOffset() - lineNumbers.getAfter().getStartOffset() + 1;
        lines=new BeforeAfter<Integer>(before,after);
      }
      myLineRanges.add(new BeforeAfter<Integer>(lines.getBefore() == 0 ? 0 : lines.getBefore() - 1,lines.getAfter() == 0 ? 0 : lines.getAfter() - 1));
      if (!expandedRanges.isEmpty()) {
        BeforeAfter<TextRange> last=expandedRanges.get(expandedRanges.size() - 1);
        if (sbOld.length() > 0) {
          if (document.getLineEndOffset(last.getBefore().getEndOffset()) != document.getTextLength()) {
            sbOld.append('\n');
            oldConvertor.emptyLine(lines.getBefore());
          }
        }
        if (sbNew.length() > 0) {
          if (document1.getLineEndOffset(last.getAfter().getEndOffset()) != document1.getTextLength()) {
            sbNew.append('\n');
            newConvertor.emptyLine(lines.getAfter());
          }
        }
      }
      setHighlighters(fragmentedContent.getBefore(),fragmentedContent.getAfter(),expandedRanges,fragmentedContent);
      setTodoHighlighting(fragmentedContent.getBefore(),fragmentedContent.getAfter());
    }
  }
);
}
