{
  List<String> nonexistentOutputRoots=new SmartList<String>();
  final Collection<File> targetRoots=myTarget.getOutputRoots(context);
synchronized (ALL_DELETED_ROOTS_KEY) {
    Set<File> allDeletedRoots=ALL_DELETED_ROOTS_KEY.get(context);
    for (    File outputRoot : targetRoots) {
      boolean wasDeleted=allDeletedRoots != null && allDeletedRoots.contains(outputRoot);
      if (!wasDeleted) {
        wasDeleted=!outputRoot.exists();
        if (wasDeleted) {
          if (allDeletedRoots == null) {
            allDeletedRoots=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
            ALL_DELETED_ROOTS_KEY.set(context,allDeletedRoots);
          }
          allDeletedRoots.add(outputRoot);
        }
      }
      if (wasDeleted) {
        nonexistentOutputRoots.add(outputRoot.getAbsolutePath());
      }
    }
  }
  if (nonexistentOutputRoots.isEmpty()) {
    return false;
  }
  Set<String> storedNonExistentOutputs;
  File file=getNonexistentOutputsFile();
  if (!file.exists()) {
    storedNonExistentOutputs=Collections.emptySet();
  }
 else {
    List<String> lines=StringUtil.split(FileUtil.loadFile(file),"\n");
    storedNonExistentOutputs=new THashSet<String>(lines,FileUtil.PATH_HASHING_STRATEGY);
  }
  return !storedNonExistentOutputs.containsAll(nonexistentOutputRoots);
}
