{
  final String path=FileUtil.toSystemIndependentName(myDestDirectoryField.getText());
  final Project project=myDirectory.getProject();
  PsiDirectory directory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
    public PsiDirectory compute(){
      try {
        return DirectoryUtil.mkdirs(PsiManager.getInstance(project),path);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return null;
      }
    }
  }
);
  if (directory == null) {
    Messages.showErrorDialog(project,RefactoringBundle.message("cannot.find.or.create.destination.directory"),RefactoringBundle.message("cannot.move"));
    return;
  }
  super.doOKAction();
  final PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(directory);
  if (aPackage == null) {
    Messages.showErrorDialog(project,RefactoringBundle.message("destination.directory.does.not.correspond.to.any.package"),RefactoringBundle.message("cannot.move"));
    return;
  }
  final JavaRefactoringSettings refactoringSettings=JavaRefactoringSettings.getInstance();
  final boolean searchInComments=isSearchInComments();
  final boolean searchForTextOccurences=isSearchInNonJavaFiles();
  refactoringSettings.MOVE_SEARCH_IN_COMMENTS=searchInComments;
  refactoringSettings.MOVE_SEARCH_FOR_TEXT=searchForTextOccurences;
  final VirtualFile sourceRoot=ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(directory.getVirtualFile());
  if (sourceRoot == null) {
    Messages.showErrorDialog(project,RefactoringBundle.message("destination.directory.does.not.correspond.to.any.package"),RefactoringBundle.message("cannot.move"));
    return;
  }
  final RefactoringFactory factory=RefactoringFactory.getInstance(project);
  final MoveDestination destination=factory.createSourceRootMoveDestination(aPackage.getQualifiedName(),sourceRoot);
  MoveClassesOrPackagesProcessor processor=new MoveClassesOrPackagesProcessor(myDirectory.getProject(),myElementsToMove,destination,searchInComments,searchForTextOccurences,myMoveCallback);
  if (processor.verifyValidPackageName()) {
    processor.run();
  }
}
