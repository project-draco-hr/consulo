{
  super(false);
  setTitle(MoveHandler.REFACTORING_NAME);
  myDirectory=directory;
  myElementsToMove=elementsToMove;
  myMoveCallback=moveCallback;
  myDestDirectoryField.setText(directory.getVirtualFile().getPath());
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
  myDestDirectoryField.getButton().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final VirtualFile[] files=FileChooser.chooseFiles(myDirectory.getProject(),descriptor,directory.getVirtualFile());
      if (files.length == 1) {
        myDestDirectoryField.setText(files[0].getPath());
      }
    }
  }
);
  if (elementsToMove.length == 1) {
    PsiElement firstElement=elementsToMove[0];
    myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label",UsageViewUtil.getType(firstElement),UsageViewUtil.getLongName(firstElement)));
  }
 else   if (elementsToMove.length > 1) {
    myNameLabel.setText(elementsToMove[0] instanceof PsiClass ? RefactoringBundle.message("move.specified.classes") : RefactoringBundle.message("move.specified.packages"));
  }
  final RefactoringSettings refactoringSettings=RefactoringSettings.getInstance();
  mySearchInCommentsAndStringsCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_IN_COMMENTS);
  mySearchForTextOccurrencesCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_FOR_TEXT);
  myDestDirectoryField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      setOKActionEnabled(myDestDirectoryField.getText().length() > 0);
    }
  }
);
  init();
}
