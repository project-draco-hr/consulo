{
  Set<Integer> blackNodes=new HashSet<Integer>();
  blackNodes.add(startNode);
  Set<Integer> grayNodes=new HashSet<Integer>();
  grayNodes.addAll(getNextNodes.fun(startNode));
  int endNode=-1;
  while (blackNodes.size() < SHORT_FRAGMENT_MAX_SIZE && !grayNodes.contains(LinearGraph.NOT_LOAD_COMMIT)) {
    int nextBlackNode=-1;
    for (    int grayNode : grayNodes) {
      if (blackNodes.containsAll(getPrevNodes.fun(grayNode))) {
        nextBlackNode=grayNode;
        break;
      }
    }
    if (nextBlackNode == -1)     return null;
    if (grayNodes.size() == 1) {
      endNode=nextBlackNode;
      break;
    }
    List<Integer> nextGrayNodes=getNextNodes.fun(nextBlackNode);
    if (nextGrayNodes.isEmpty() || thisNodeCantBeInMiddle.value(nextBlackNode))     return null;
    blackNodes.add(nextBlackNode);
    grayNodes.remove(nextBlackNode);
    grayNodes.addAll(nextGrayNodes);
  }
  if (endNode != -1)   return Pair.create(startNode,endNode);
 else   return null;
}
