{
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  if (argumentList == null) {
    return false;
  }
  final PsiExpression[] expressions=argumentList.getExpressions();
  final PsiMethod originalMethod=callExpression.resolveMethod();
  if (originalMethod == null) {
    return false;
  }
  final String name=originalMethod.getName();
  final PsiClass containingClass=originalMethod.getContainingClass();
  if (containingClass == null) {
    return false;
  }
  final PsiType[] types=new PsiType[expressions.length];
  for (int i=0; i < expressions.length; i++) {
    final PsiExpression expression=expressions[i];
    final PsiType type=expression.getType();
    if (unboxingExpression.equals(expression)) {
      if (!(type instanceof PsiPrimitiveType)) {
        return false;
      }
      final PsiPrimitiveType primitiveType=(PsiPrimitiveType)type;
      types[i]=primitiveType.getBoxedType(unboxingExpression);
    }
 else {
      types[i]=type;
    }
  }
  final PsiMethod[] methods=containingClass.findMethodsByName(name,true);
  for (  PsiMethod method : methods) {
    if (!originalMethod.equals(method)) {
      if (MethodCallUtils.isApplicable(method,PsiSubstitutor.EMPTY,types)) {
        return false;
      }
    }
  }
  return true;
}
