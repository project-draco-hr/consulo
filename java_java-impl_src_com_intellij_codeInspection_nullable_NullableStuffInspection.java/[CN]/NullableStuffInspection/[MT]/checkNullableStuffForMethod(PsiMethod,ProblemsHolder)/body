{
  Annotated annotated=check(method,holder,method.getReturnType());
  PsiParameter[] parameters=method.getParameterList().getParameters();
  List<MethodSignatureBackedByPsiMethod> superMethodSignatures=method.findSuperMethodSignaturesIncludingStatic(true);
  boolean reported_not_annotated_method_overrides_notnull=false;
  boolean reported_nullable_method_overrides_notnull=false;
  boolean[] reported_notnull_parameter_overrides_nullable=new boolean[parameters.length];
  boolean[] reported_not_annotated_parameter_overrides_notnull=new boolean[parameters.length];
  final NullableNotNullManager nullableManager=NullableNotNullManager.getInstance(holder.getProject());
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    if (!reported_nullable_method_overrides_notnull && REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE && annotated.isDeclaredNullable&& NullableNotNullManager.isNotNull(superMethod)) {
      reported_nullable_method_overrides_notnull=true;
      holder.registerProblem(method.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.Nullable.method.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    if (!reported_not_annotated_method_overrides_notnull && REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL && !annotated.isDeclaredNullable&& !annotated.isDeclaredNotNull&& NullableNotNullManager.isNotNull(superMethod)) {
      reported_not_annotated_method_overrides_notnull=true;
      final String defaultNotNull=nullableManager.getDefaultNotNull();
      final String[] annotationsToRemove=ArrayUtil.toStringArray(nullableManager.getNullables());
      final LocalQuickFix fix=AnnotationUtil.isAnnotatingApplicable(method,defaultNotNull) ? createAnnotateMethodFix(defaultNotNull,annotationsToRemove) : createChangeDefaultNotNullFix(nullableManager,superMethod);
      holder.registerProblem(method.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.method.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,wrapFix(fix));
    }
    if (REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE || REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL) {
      PsiParameter[] superParameters=superMethod.getParameterList().getParameters();
      if (superParameters.length != parameters.length) {
        continue;
      }
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        PsiParameter superParameter=superParameters[i];
        if (!reported_notnull_parameter_overrides_nullable[i] && REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE && nullableManager.isNotNull(parameter,false)&& nullableManager.isNullable(superParameter,false)) {
          reported_notnull_parameter_overrides_nullable[i]=true;
          holder.registerProblem(parameter.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.NotNull.parameter.overrides.Nullable"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
        if (!reported_not_annotated_parameter_overrides_notnull[i] && REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL) {
          if (!AnnotationUtil.isAnnotated(parameter,nullableManager.getAllAnnotations(),false,false) && nullableManager.isNotNull(superParameter,false)) {
            reported_not_annotated_parameter_overrides_notnull[i]=true;
            final LocalQuickFix fix=AnnotationUtil.isAnnotatingApplicable(parameter,nullableManager.getDefaultNotNull()) ? new AddNotNullAnnotationFix(parameter) : createChangeDefaultNotNullFix(nullableManager,superParameter);
            holder.registerProblem(parameter.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.parameter.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,wrapFix(fix));
          }
        }
      }
    }
  }
  if (REPORT_ANNOTATION_NOT_PROPAGATED_TO_OVERRIDERS) {
    boolean[] parameterAnnotated=new boolean[parameters.length];
    boolean[] parameterQuickFixSuggested=new boolean[parameters.length];
    boolean hasAnnotatedParameter=false;
    for (int i=0; i < parameters.length; i++) {
      PsiParameter parameter=parameters[i];
      parameterAnnotated[i]=nullableManager.isNotNull(parameter,false);
      hasAnnotatedParameter|=parameterAnnotated[i];
    }
    if (hasAnnotatedParameter || annotated.isDeclaredNotNull) {
      PsiManager manager=method.getManager();
      final String defaultNotNull=nullableManager.getDefaultNotNull();
      final boolean superMethodApplicable=AnnotationUtil.isAnnotatingApplicable(method,defaultNotNull);
      PsiMethod[] overridings=OverridingMethodsSearch.search(method,GlobalSearchScope.allScope(manager.getProject()),true).toArray(PsiMethod.EMPTY_ARRAY);
      boolean methodQuickFixSuggested=false;
      for (      PsiMethod overriding : overridings) {
        if (!manager.isInProject(overriding))         continue;
        final boolean applicable=AnnotationUtil.isAnnotatingApplicable(overriding,defaultNotNull);
        if (!methodQuickFixSuggested && annotated.isDeclaredNotNull && !nullableManager.isNotNull(overriding,false)&& (nullableManager.isNullable(overriding,false) || !nullableManager.isNullable(overriding,true))) {
          method.getNameIdentifier();
          PsiAnnotation annotation=AnnotationUtil.findAnnotation(method,nullableManager.getNotNulls());
          final String[] annotationsToRemove=ArrayUtil.toStringArray(nullableManager.getNullables());
          final LocalQuickFix fix;
          if (applicable) {
            fix=new MyAnnotateMethodFix(defaultNotNull,annotationsToRemove);
          }
 else {
            fix=superMethodApplicable ? null : createChangeDefaultNotNullFix(nullableManager,method);
          }
          PsiElement psiElement=annotation;
          if (!annotation.isPhysical()) {
            psiElement=method.getNameIdentifier();
            if (psiElement == null)             continue;
          }
          holder.registerProblem(psiElement,InspectionsBundle.message("nullable.stuff.problems.overridden.methods.are.not.annotated"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,wrapFix(fix));
          methodQuickFixSuggested=true;
        }
        if (hasAnnotatedParameter) {
          PsiParameter[] psiParameters=overriding.getParameterList().getParameters();
          for (int i=0; i < psiParameters.length; i++) {
            if (parameterQuickFixSuggested[i])             continue;
            PsiParameter parameter=psiParameters[i];
            if (parameterAnnotated[i] && !nullableManager.isNotNull(parameter,false) && !nullableManager.isNullable(parameter,false)) {
              parameters[i].getNameIdentifier();
              PsiAnnotation annotation=AnnotationUtil.findAnnotation(parameters[i],nullableManager.getNotNulls());
              PsiElement psiElement=annotation;
              if (!annotation.isPhysical()) {
                psiElement=parameters[i].getNameIdentifier();
                if (psiElement == null)                 continue;
              }
              holder.registerProblem(psiElement,InspectionsBundle.message("nullable.stuff.problems.overridden.method.parameters.are.not.annotated"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,wrapFix(!applicable ? createChangeDefaultNotNullFix(nullableManager,parameters[i]) : new AnnotateOverriddenMethodParameterFix(defaultNotNull,nullableManager.getDefaultNullable())));
              parameterQuickFixSuggested[i]=true;
            }
          }
        }
      }
    }
  }
}
