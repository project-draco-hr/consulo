{
  ProperTextRange.assertProperRange(rangeInsideHost);
  if (!host.getTextRange().contains(rangeInsideHost.shiftRight(host.getTextRange().getStartOffset()))) {
    clear();
    throw new IllegalArgumentException("rangeInsideHost must lie within host text range. rangeInsideHost:" + rangeInsideHost + "; host textRange:"+ host.getTextRange());
  }
  if (myLanguage == null) {
    clear();
    throw new IllegalStateException("Seems you haven't called startInjecting()");
  }
  FileViewProvider viewProvider=myHostPsiFile.getViewProvider();
  myHostVirtualFile=viewProvider.getVirtualFile();
  myHostDocument=(DocumentEx)viewProvider.getDocument();
  myPsiManager=viewProvider.getManager();
  if (prefix == null)   prefix="";
  if (suffix == null)   suffix="";
  prefixes.add(prefix);
  suffixes.add(suffix);
  cleared=false;
  injectionHosts.add(host);
  outChars.append(prefix);
  LiteralTextEscaper<PsiLanguageInjectionHost> textEscaper=host.createLiteralTextEscaper();
  escapers.add(textEscaper);
  isOneLineEditor|=textEscaper.isOneLine();
  TextRange relevantRange=textEscaper.getRelevantTextRange().intersection(rangeInsideHost);
  if (relevantRange == null)   return this;
  int startOffset=outChars.length();
  boolean result=textEscaper.decode(relevantRange,outChars);
  if (!result)   return this;
  outChars.append(suffix);
  int endOffset=outChars.length();
  TextRange relevantRangeInHost=relevantRange.shiftRight(host.getTextRange().getStartOffset());
  relevantRangesInHostDocument.add(relevantRangeInHost);
  RangeMarker relevantMarker=myHostDocument.createRangeMarker(relevantRangeInHost);
  relevantMarker.setGreedyToLeft(true);
  relevantMarker.setGreedyToRight(true);
  shreds.add(new PsiLanguageInjectionHost.Shred(host,relevantMarker,prefix,suffix,new ProperTextRange(startOffset,endOffset)));
  return this;
}
