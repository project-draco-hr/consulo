{
  final PsiElement element=(PsiElement)param;
  PsiFile hostPsiFile=element.getContainingFile();
  if (hostPsiFile == null)   return null;
  FileViewProvider viewProvider=hostPsiFile.getViewProvider();
  VirtualFile virtualFile=viewProvider.getVirtualFile();
  final VirtualFile hostVirtualFile=virtualFile;
  final DocumentEx hostDocument=(DocumentEx)viewProvider.getDocument();
  if (hostDocument == null)   return null;
  final Places result=new PlacesImpl();
  InjectedLanguageManagerImpl injectedManager=InjectedLanguageManagerImpl.getInstance();
  if (injectedManager == null)   return null;
  injectedManager.processInPlaceInjectorsFor(element,new Processor<InjectedLanguageManager.MultiPlaceInjector>(){
    public boolean process(    InjectedLanguageManager.MultiPlaceInjector injector){
      injector.getLanguagesToInject(element,new InjectedLanguageManager.MultiPlaceRegistrar(){
        public void addPlaces(        @NotNull Language language,        @NonNls @Nullable String prefix,        @NonNls @Nullable String suffix,        @NotNull List<Pair<PsiLanguageInjectionHost,TextRange>> hosts){
          Place place=parseInjectedPsiFile(language,hostVirtualFile,hostDocument,prefix == null ? "" : prefix,suffix == null ? "" : suffix,hosts);
          if (place != null) {
            result.add(place);
          }
        }
      }
);
      return result.isEmpty();
    }
  }
);
  if (result.isEmpty())   return null;
  return new CachedValueProvider.Result<Places>(result,PsiModificationTracker.MODIFICATION_COUNT,hostDocument);
}
