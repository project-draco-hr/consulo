{
  final TextRange hostRange=host.getTextRange();
  PsiFile hostPsiFile=host.getContainingFile();
  VirtualFile virtualFile=hostPsiFile.getVirtualFile();
  if (virtualFile == null) {
    PsiFile originalFile=hostPsiFile.getOriginalFile();
    if (originalFile != null)     virtualFile=originalFile.getVirtualFile();
  }
  if (virtualFile == null)   virtualFile=hostPsiFile.getViewProvider().getVirtualFile();
  final VirtualFile hostVirtualFile=virtualFile;
  final DocumentEx hostDocument=(DocumentEx)hostPsiFile.getViewProvider().getDocument();
  if (hostDocument == null)   return null;
  final PsiManagerEx psiManager=(PsiManagerEx)host.getManager();
  final List<Pair<PsiElement,TextRange>> result=new SmartList<Pair<PsiElement,TextRange>>();
  InjectedLanguagePlaces placesRegistrar=new InjectedLanguagePlaces(){
    public void addPlace(    @NotNull Language language,    @NotNull TextRange rangeInsideHost,    @Nullable String prefix,    @Nullable String suffix){
      TextRange relevantRange=myTextEscaper == null ? rangeInsideHost : rangeInsideHost.intersection(myTextEscaper.getRelevantTextRange());
      if (relevantRange == null)       return;
      PsiElement psi=parseInjectedPsiFile(host,relevantRange,language,hostVirtualFile,hostRange,hostDocument,myTextEscaper,prefix == null ? "" : prefix,suffix == null ? "" : suffix);
      if (psi != null) {
        result.add(new Pair<PsiElement,TextRange>(psi,relevantRange));
      }
    }
  }
;
  for (  LanguageInjector injector : psiManager.getLanguageInjectors()) {
    injector.getLanguagesToInject(host,placesRegistrar);
  }
  for (  LanguageInjector injector : Extensions.getExtensions(LanguageInjector.EXTENSION_POINT_NAME)) {
    injector.getLanguagesToInject(host,placesRegistrar);
  }
  return result;
}
