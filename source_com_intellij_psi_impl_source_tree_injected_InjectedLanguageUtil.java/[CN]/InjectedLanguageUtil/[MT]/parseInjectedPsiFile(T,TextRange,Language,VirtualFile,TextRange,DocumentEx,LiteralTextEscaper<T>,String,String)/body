{
  TextRange documentWindow=hostRange.cutOut(rangeInsideHost);
  DocumentRange documentRange=new DocumentRange(hostDocument,documentWindow,prefix,suffix);
  VirtualFileDelegate virtualFile=new VirtualFileDelegate(hostVirtualFile,documentRange,language,documentRange.getText());
  final ParserDefinition parserDefinition=language.getParserDefinition();
  if (parserDefinition == null)   return null;
  PsiFile hostFile=host.getContainingFile();
  if (hostFile == null)   return null;
  PsiManager psiManager=host.getManager();
  final Project project=psiManager.getProject();
  final String text=host.getText();
  StringBuilder outChars=new StringBuilder(text.length());
  outChars.append(prefix);
  if (textEscaper == null) {
    outChars.append(text,rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset());
  }
 else {
    boolean result=textEscaper.decode(host,rangeInsideHost,outChars);
    if (!result)     return null;
  }
  outChars.append(suffix);
  virtualFile.setContent(null,outChars,false);
  DocumentImpl decodedDocument=new DocumentImpl(outChars);
  FileDocumentManagerImpl.registerDocument(decodedDocument,virtualFile);
  SingleRootFileViewProvider viewProvider=new MyFileViewProvider(project,virtualFile);
  PsiFile psiFile=parserDefinition.createFile(viewProvider);
  SmartPsiElementPointer<T> pointer=createHostSmartPointer(host);
  psiFile.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,pointer);
  final ASTNode parsedNode=psiFile.getNode();
  if (!(parsedNode instanceof FileElement))   return null;
  String sourceRawText=prefix + text.substring(rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset()) + suffix;
  if (textEscaper != null) {
    patchLeafs(parsedNode,textEscaper,sourceRawText,prefix.length());
  }
  String parsedText=parsedNode.getText();
  LOG.assertTrue(parsedText.equals(sourceRawText));
  parsedNode.putUserData(TreeElement.MANAGER_KEY,psiManager);
  virtualFile.setContent(null,documentRange.getText(),false);
  FileDocumentManagerImpl.registerDocument(documentRange,virtualFile);
  psiFile=registerDocumentRange(documentRange,psiFile);
  ((MyFileViewProvider)psiFile.getViewProvider()).setVirtualFile(virtualFile);
  ((SingleRootFileViewProvider)psiFile.getViewProvider()).forceCachedPsi(psiFile);
  LOG.assertTrue(psiFile.getText().equals(documentRange.getText()));
  PsiDocumentManagerImpl.checkConsistency(psiFile,documentRange);
  PsiDocumentManagerImpl.checkConsistency(hostFile,documentRange.getDelegate());
  return psiFile;
}
