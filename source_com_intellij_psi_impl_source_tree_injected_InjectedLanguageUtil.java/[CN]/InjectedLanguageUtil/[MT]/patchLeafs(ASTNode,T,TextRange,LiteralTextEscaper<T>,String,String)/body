{
  final String text=prefix + host.getText().substring(rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset()) + suffix;
  final Map<LeafElement,String> newTexts=new THashMap<LeafElement,String>();
  ((TreeElement)parsedNode).acceptTree(new RecursiveTreeElementVisitor(){
    protected boolean visitNode(    TreeElement element){
      return true;
    }
    public void visitLeaf(    LeafElement leaf){
      TextRange range=leaf.getTextRange();
      int offsetInSource=literalTextEscaper.getOffsetInSource(range.getStartOffset()) + prefix.length();
      int endOffsetInSource=literalTextEscaper.getOffsetInSource(range.getEndOffset()) + prefix.length();
      String sourceSubText=text.substring(offsetInSource,endOffsetInSource);
      String leafText=leaf.getText();
      if (!Comparing.strEqual(leafText,sourceSubText)) {
        newTexts.put(leaf,sourceSubText);
      }
    }
  }
);
  for (  LeafElement leaf : newTexts.keySet()) {
    String newText=newTexts.get(leaf);
    leaf.setText(newText);
  }
  ((TreeElement)parsedNode).acceptTree(new RecursiveTreeElementVisitor(){
    protected boolean visitNode(    TreeElement element){
      element.clearCaches();
      return true;
    }
  }
);
}
