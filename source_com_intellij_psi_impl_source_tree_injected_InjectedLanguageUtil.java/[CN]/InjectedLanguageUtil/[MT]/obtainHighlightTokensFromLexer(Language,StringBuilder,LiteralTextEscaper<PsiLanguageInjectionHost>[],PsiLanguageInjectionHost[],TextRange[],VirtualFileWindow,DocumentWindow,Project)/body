{
  List<Trinity<IElementType,PsiLanguageInjectionHost,TextRange>> tokens=new ArrayList<Trinity<IElementType,PsiLanguageInjectionHost,TextRange>>(10);
  SyntaxHighlighter syntaxHighlighter=language.getSyntaxHighlighter(project,virtualFile);
  Lexer lexer=syntaxHighlighter.getHighlightingLexer();
  lexer.start(outChars,0,outChars.length(),0);
  for (IElementType tokenType; (tokenType=lexer.getTokenType()) != null; lexer.advance()) {
    TextRange textRange=new TextRange(lexer.getTokenStart(),lexer.getTokenEnd());
    TextRange editable=documentWindow.intersectWithEditable(textRange);
    if (editable == null || editable.getLength() == 0)     continue;
    int i=documentWindow.getHostNumber(textRange.getStartOffset());
    if (i == -1)     continue;
    int prevHostsCombinedLength=documentWindow.getPrevHostsCombinedLength(i);
    LiteralTextEscaper<PsiLanguageInjectionHost> textEscaper=textEscapers[i];
    TextRange rangeInHost;
    if (textEscaper == null) {
      rangeInHost=textRange.shiftRight(hostRanges[i].getStartOffset() - documentWindow.getPrefix().length() - prevHostsCombinedLength);
    }
 else {
      int startInHost=textEscaper.getOffsetInHost(editable.getStartOffset() - documentWindow.getPrefix().length() - prevHostsCombinedLength,hostRanges[i]);
      int endInHost=textEscaper.getOffsetInHost(editable.getEndOffset() - documentWindow.getPrefix().length() - prevHostsCombinedLength,hostRanges[i]);
      rangeInHost=new TextRange(startInHost,endInHost);
    }
    tokens.add(Trinity.create(tokenType,injectionHosts[i],rangeInHost));
  }
  return tokens;
}
