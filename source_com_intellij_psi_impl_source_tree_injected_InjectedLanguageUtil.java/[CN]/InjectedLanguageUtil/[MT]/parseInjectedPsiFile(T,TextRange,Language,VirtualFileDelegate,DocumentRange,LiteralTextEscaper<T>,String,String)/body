{
  final ParserDefinition parserDefinition=language.getParserDefinition();
  if (parserDefinition == null)   return null;
  PsiFile hostFile=host.getContainingFile();
  if (hostFile == null)   return null;
  PsiManager psiManager=host.getManager();
  final Project project=psiManager.getProject();
  final PsiParser parser=parserDefinition.createParser(project);
  final IElementType root=parserDefinition.getFileNodeType();
  final String text=host.getText();
  StringBuilder outChars=new StringBuilder(text.length());
  outChars.append(prefix);
  if (textEscaper == null) {
    outChars.append(text,rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset());
  }
 else {
    boolean result=textEscaper.decode(host,rangeInsideHost,outChars);
    if (!result)     return null;
  }
  outChars.append(suffix);
  final PsiBuilderImpl builder=new PsiBuilderImpl(language,project,null,outChars);
  final ASTNode parsedNode=parser.parse(root,builder);
  if (!(parsedNode instanceof FileElement))   return null;
  if (textEscaper != null) {
    patchLeafs(parsedNode,host,rangeInsideHost,textEscaper,prefix,suffix);
  }
  String parsedText=parsedNode.getText();
  String sourceRawText=prefix + host.getText().substring(rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset()) + suffix;
  LOG.assertTrue(parsedText.equals(sourceRawText));
  parsedNode.putUserData(TreeElement.MANAGER_KEY,psiManager);
  SingleRootFileViewProvider viewProvider=createViewProvider(project,virtualFile);
  PsiFile psiFile=parserDefinition.createFile(viewProvider);
  psiFile=(PsiFile)registerDocumentRange(hostFile,documentRange,psiFile);
  SrcRepositoryPsiElement repositoryPsiElement=(SrcRepositoryPsiElement)psiFile;
  ((FileElement)parsedNode).setPsiElement(repositoryPsiElement);
  repositoryPsiElement.setTreeElement(parsedNode);
  ((SingleRootFileViewProvider)psiFile.getViewProvider()).forceCachedPsi(psiFile);
  if (host.isPhysical()) {
    SmartPsiElementPointer pointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host);
    psiFile.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,pointer);
  }
  return parsedNode.getPsi();
}
