{
  List<Trinity<IElementType,PsiLanguageInjectionHost,TextRange>> tokens=new ArrayList<Trinity<IElementType,PsiLanguageInjectionHost,TextRange>>(10);
  SyntaxHighlighter syntaxHighlighter=language.getSyntaxHighlighter(project,virtualFile);
  Lexer lexer=syntaxHighlighter.getHighlightingLexer();
  lexer.start(outChars,0,outChars.length(),0);
  for (IElementType tokenType=lexer.getTokenType(); tokenType != null; lexer.advance(), tokenType=lexer.getTokenType()) {
    TextRange textRange=new TextRange(lexer.getTokenStart(),lexer.getTokenEnd());
    TextRange editable=documentWindow.intersectWithEditable(textRange);
    if (editable == null || editable.getLength() == 0)     continue;
    int i=documentWindow.getHostNumber(textRange.getStartOffset());
    if (i == -1)     continue;
    PsiLanguageInjectionHost host=shreds.get(i).host;
    LiteralTextEscaper<PsiLanguageInjectionHost> escaper=escapers.get(i);
    TextRange rangeInsideHost=shreds.get(i).getRangeInsideHost();
    int prefixLength=shreds.get(i).prefix.length();
    int prevHostsCombinedLength=documentWindow.getPrevHostsCombinedLength(i);
    int start=escaper.getOffsetInHost(editable.getStartOffset() - prevHostsCombinedLength - prefixLength,rangeInsideHost);
    int end=escaper.getOffsetInHost(editable.getEndOffset() - prevHostsCombinedLength - prefixLength,rangeInsideHost);
    TextRange rangeInHost=new TextRange(start,end);
    tokens.add(Trinity.create(tokenType,host,rangeInHost));
  }
  return tokens;
}
