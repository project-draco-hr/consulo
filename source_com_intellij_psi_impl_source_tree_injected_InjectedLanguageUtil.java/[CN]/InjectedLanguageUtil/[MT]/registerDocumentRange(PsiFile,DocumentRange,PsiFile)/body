{
  Map<RangeMarker,PsiFile> injected=hostFile.getUserData(INJECTED_FILES_KEY);
  if (injected == null) {
    injected=new THashMap<RangeMarker,PsiFile>(new TObjectHashingStrategy<RangeMarker>(){
      public int computeHashCode(      final RangeMarker object){
        return 0;
      }
      public boolean equals(      final RangeMarker o1,      final RangeMarker o2){
        return o1.getStartOffset() == o2.getStartOffset() && o1.getEndOffset() == o2.getEndOffset();
      }
    }
);
    hostFile.putUserData(INJECTED_FILES_KEY,injected);
  }
  RangeMarker marker=documentRange.getTextRange();
  final PsiFileImpl oldFile=(PsiFileImpl)injected.get(marker);
  if (oldFile == null) {
    injected.put(marker,injectedPsi);
    return injectedPsi;
  }
  if (!injectedPsi.getText().equals(oldFile.getText())) {
    FileElement newFileElement=(FileElement)injectedPsi.getNode().copyElement();
    FileElement oldFileElement=oldFile.getTreeElement();
    if (oldFileElement.getFirstChildNode() != null) {
      TreeUtil.removeRange(oldFileElement.getFirstChildNode(),null);
    }
    final ASTNode firstChildNode=newFileElement.getFirstChildNode();
    if (firstChildNode != null) {
      TreeUtil.addChildren(oldFileElement,(TreeElement)firstChildNode);
    }
    oldFileElement.setCharTable(newFileElement.getCharTable());
    oldFile.subtreeChanged();
    PsiDocumentManagerImpl.checkConsistency(oldFile,documentRange);
    SingleRootFileViewProvider viewProvider=(SingleRootFileViewProvider)oldFile.getViewProvider();
    viewProvider.setVirtualFile(injectedPsi.getVirtualFile());
  }
  return oldFile;
}
