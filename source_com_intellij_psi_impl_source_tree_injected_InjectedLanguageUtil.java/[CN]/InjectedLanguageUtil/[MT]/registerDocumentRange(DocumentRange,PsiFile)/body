{
  DocumentEx hostDocument=documentRange.getDelegate();
  List<DocumentRange> injected=hostDocument.getUserData(INJECTED_FILES_KEY);
  if (injected == null) {
    injected=new SmartList<DocumentRange>();
    hostDocument.putUserData(INJECTED_FILES_KEY,injected);
  }
  RangeMarker rangeMarker=documentRange.getTextRange();
  TextRange textRange=new TextRange(rangeMarker.getStartOffset(),rangeMarker.getEndOffset());
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(injectedPsi.getProject());
  for (  DocumentRange oldDocument : injected) {
    PsiFileImpl oldFile=(PsiFileImpl)documentManager.getPsiFile(oldDocument);
    RangeMarker oldRangeMarker=oldDocument.getTextRange();
    TextRange oldTextRange=new TextRange(oldRangeMarker.getStartOffset(),oldRangeMarker.getEndOffset());
    if (oldTextRange.intersects(textRange) && !injectedPsi.getNode().getText().equals(oldFile.getNode().getText())) {
      FileElement newFileElement=(FileElement)injectedPsi.getNode().copyElement();
      FileElement oldFileElement=oldFile.getTreeElement();
      if (oldFileElement.getFirstChildNode() != null) {
        TreeUtil.removeRange(oldFileElement.getFirstChildNode(),null);
      }
      final ASTNode firstChildNode=newFileElement.getFirstChildNode();
      if (firstChildNode != null) {
        TreeUtil.addChildren(oldFileElement,(TreeElement)firstChildNode);
      }
      oldFileElement.setCharTable(newFileElement.getCharTable());
      oldFile.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,injectedPsi.getUserData(ResolveUtil.INJECTED_IN_ELEMENT));
      FileDocumentManagerImpl.registerDocument(documentRange,oldFile.getVirtualFile());
      oldFile.subtreeChanged();
      PsiDocumentManagerImpl.checkConsistency(oldFile,documentRange);
      SingleRootFileViewProvider viewProvider=(SingleRootFileViewProvider)oldFile.getViewProvider();
      viewProvider.setVirtualFile(injectedPsi.getVirtualFile());
      return oldFile;
    }
  }
  injected.add(documentRange);
  return injectedPsi;
}
