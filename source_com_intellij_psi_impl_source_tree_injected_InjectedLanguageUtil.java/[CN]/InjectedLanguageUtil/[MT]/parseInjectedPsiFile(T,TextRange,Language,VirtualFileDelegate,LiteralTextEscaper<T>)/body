{
  final ParserDefinition parserDefinition=language.getParserDefinition();
  if (parserDefinition == null)   return null;
  PsiManager psiManager=host.getManager();
  final Project project=psiManager.getProject();
  final PsiParser parser=parserDefinition.createParser(project);
  final IElementType root=parserDefinition.getFileNodeType();
  final String text=host.getText();
  StringBuilder outChars=new StringBuilder(text.length());
  if (textEscaper == null) {
    outChars.append(text,rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset());
  }
 else {
    boolean result=textEscaper.decode(host,rangeInsideHost,outChars);
    if (!result)     return null;
  }
  final PsiBuilderImpl builder=new PsiBuilderImpl(language,project,null,outChars);
  final ASTNode parsedNode=parser.parse(root,builder);
  if (!(parsedNode instanceof FileElement))   return null;
  if (textEscaper != null) {
    patchLeafs(parsedNode,host,rangeInsideHost,textEscaper);
  }
  String parsedText=parsedNode.getText();
  String sourceRawText=host.getText().substring(rangeInsideHost.getStartOffset(),rangeInsideHost.getEndOffset());
  LOG.assertTrue(parsedText.equals(sourceRawText));
  parsedNode.putUserData(TreeElement.MANAGER_KEY,psiManager);
  SingleRootFileViewProvider viewProvider=new SingleRootFileViewProvider(psiManager,virtualFile){
    public FileViewProvider clone(){
      DocumentRange oldDocumentRange=((VirtualFileDelegate)getVirtualFile()).getDocumentRange();
      RangeMarker documentWindow=oldDocumentRange.getTextRange();
      DocumentEx delegate=oldDocumentRange.getDelegate();
      PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
      PsiFile hostFile=documentManager.getPsiFile(delegate);
      PsiFile hostPsiFileCopy=(PsiFile)hostFile.copy();
      TextRange oldTextRange=new TextRange(documentWindow.getStartOffset(),documentWindow.getEndOffset());
      T newHost=(T)findInjectionHost(hostPsiFileCopy.findElementAt(oldDocumentRange.getTextRange().getStartOffset()));
      List<Pair<PsiElement,TextRange>> newInjected=newHost.getInjectedPsi();
      if (newInjected == null)       return null;
      for (      Pair<PsiElement,TextRange> pair : newInjected) {
        PsiElement psi=pair.getFirst();
        TextRange rangeInsideHost=pair.getSecond();
        TextRange injectedRange=newHost.getTextRange().cutOut(rangeInsideHost);
        if (injectedRange.equals(oldTextRange)) {
          PsiFile newFile=(PsiFile)psi;
          return newFile.getViewProvider();
        }
      }
      return null;
    }
  }
;
  PsiFile psiFile=parserDefinition.createFile(viewProvider);
  SrcRepositoryPsiElement repositoryPsiElement=(SrcRepositoryPsiElement)psiFile;
  ((FileElement)parsedNode).setPsiElement(repositoryPsiElement);
  repositoryPsiElement.setTreeElement(parsedNode);
  viewProvider.forceCachedPsi(psiFile);
  if (host.isPhysical()) {
    SmartPsiElementPointer pointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host);
    psiFile.putUserData(ResolveUtil.INJECTED_IN_ELEMENT,pointer);
  }
  return parsedNode.getPsi();
}
