{
  final List<T> descritors=new SmartList<T>();
  if (problemDescriptor instanceof DomElementResolveProblemDescriptor) {
    final PsiReference reference=((DomElementResolveProblemDescriptor)problemDescriptor).getPsiReference();
    final PsiElement element=reference.getElement();
    final TextRange referenceRange=reference.getRangeInElement();
    final TextRange errorRange;
    if (referenceRange.getStartOffset() == referenceRange.getEndOffset()) {
      if (element instanceof XmlAttributeValue) {
        errorRange=TextRange.from(referenceRange.getStartOffset() - 1,2);
      }
 else {
        errorRange=TextRange.from(referenceRange.getStartOffset(),1);
      }
    }
 else {
      errorRange=referenceRange;
    }
    descritors.add(creator.fun(Pair.create(errorRange,element)));
    return descritors;
  }
  final DomElement domElement=problemDescriptor.getDomElement();
  final PsiElement psiElement=getPsiElement(domElement);
  if (psiElement != null && StringUtil.isNotEmpty(psiElement.getText())) {
    if (psiElement instanceof XmlTag) {
      final XmlTag tag=(XmlTag)psiElement;
switch (problemDescriptor.getHighlightingType()) {
case ALL_TAG:
        descritors.add(creator.fun(Pair.create(new TextRange(0,tag.getTextLength()),(PsiElement)tag)));
      break;
case START_TAG_NAME:
    addDescriptionsToTagEnds(tag,descritors,creator);
  break;
}
return descritors;
}
int start=0;
int length=psiElement.getTextRange().getLength();
if (psiElement instanceof XmlAttributeValue) {
String value=((XmlAttributeValue)psiElement).getValue();
if (StringUtil.isNotEmpty(value)) {
start=psiElement.getText().indexOf(value);
length=value.length();
}
}
return Arrays.asList(creator.fun(Pair.create(TextRange.from(start,length),psiElement)));
}
final XmlTag tag=getParentXmlTag(domElement);
if (tag != null) {
addDescriptionsToTagEnds(tag,descritors,creator);
}
return descritors;
}
