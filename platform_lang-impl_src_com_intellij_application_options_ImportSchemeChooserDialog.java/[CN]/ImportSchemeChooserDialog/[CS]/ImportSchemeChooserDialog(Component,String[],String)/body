{
  super(parent,false);
  if (schemeNames.length > 0) {
    myNames.addAll(Arrays.asList(schemeNames));
  }
 else {
    myNames.add(UNNAMED_SCHEME_ITEM);
  }
  mySchemeList.setModel(new DefaultListModel(){
    @Override public int getSize(){
      return myNames.size();
    }
    @Override public Object getElementAt(    int index){
      return myNames.get(index);
    }
  }
);
  mySchemeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  mySchemeList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      int index=mySchemeList.getSelectedIndex();
      if (index >= 0) {
        mySelectedName=myNames.get(index);
        if (!myUseCurrentScheme.isSelected() && !UNNAMED_SCHEME_ITEM.equals(mySelectedName))         myTargetNameField.setText(mySelectedName);
      }
    }
  }
);
  myUseCurrentScheme.setEnabled(currScheme != null);
  myUseCurrentScheme.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (myUseCurrentScheme.isSelected()) {
        myTargetNameField.setEnabled(false);
        if (currScheme != null) {
          myTargetNameField.setText(currScheme);
        }
      }
 else {
        myTargetNameField.setEnabled(true);
        if (mySelectedName != null)         myTargetNameField.setText(mySelectedName);
      }
    }
  }
);
  mySchemeList.getSelectionModel().setSelectionInterval(0,0);
  init();
  setTitle(ApplicationBundle.message("title.import.scheme.chooser"));
}
