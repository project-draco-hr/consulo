{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(ProjectBundle.message("project.index.scanning.files.progress"));
  }
  if (forDir == null) {
    myDirToInfoMap.clear();
    myPackageNameToDirsMap.clear();
  }
  if (forDir != null) {
    VirtualFile dir=forDir;
    do {
      myDirToInfoMap.remove(dir);
      dir=dir.getParent();
    }
 while (dir != null);
  }
  ModuleManager moduleManager=ModuleManager.getInstance(myProject);
  Module[] modules=moduleManager.getModules();
  if (reverseAllSets) {
    modules=ArrayUtil.reverseArray(modules);
  }
  if (progress != null) {
    progress.setText2(ProjectBundle.message("project.index.building.exclude.roots.progress"));
  }
  Map<VirtualFile,Set<VirtualFile>> excludeRootsMap=new THashMap<VirtualFile,Set<VirtualFile>>();
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    ContentEntry[] contentEntries=rootManager.getContentEntries();
    for (    ContentEntry contentEntry : contentEntries) {
      VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null)       continue;
      VirtualFile[] excludeRoots=contentEntry.getExcludeFolderFiles();
      for (      VirtualFile excludeRoot : excludeRoots) {
        if (!VfsUtil.isAncestor(contentRoot,excludeRoot,false)) {
          if (rootManager.getCompilerOutputPath() == excludeRoot || rootManager.getCompilerOutputPathForTests() == excludeRoot) {
            putForFileAndAllAncestors(excludeRootsMap,excludeRoot,excludeRoot);
          }
        }
        putForFileAndAllAncestors(excludeRootsMap,contentRoot,excludeRoot);
      }
    }
  }
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2(ProjectBundle.message("project.index.processing.module.content.progress",module.getName()));
    }
    VirtualFile[] contentRoots=rootManager.getContentRoots();
    if (reverseAllSets) {
      contentRoots=ArrayUtil.reverseArray(contentRoots);
    }
    for (    final VirtualFile contentRoot : contentRoots) {
      Set<VirtualFile> excludeRootsSet=excludeRootsMap.get(contentRoot);
      fillMapWithModuleContent(contentRoot,module,contentRoot,excludeRootsSet,forDir,fileTypeManager);
    }
  }
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2(ProjectBundle.message("project.index.processing.module.sources.progress",module.getName()));
    }
    ContentEntry[] contentEntries=rootManager.getContentEntries();
    if (reverseAllSets) {
      contentEntries=ArrayUtil.reverseArray(contentEntries);
    }
    for (    ContentEntry contentEntry : contentEntries) {
      SourceFolder[] sourceFolders=contentEntry.getSourceFolders();
      if (reverseAllSets) {
        sourceFolders=ArrayUtil.reverseArray(sourceFolders);
      }
      for (      SourceFolder sourceFolder : sourceFolders) {
        VirtualFile dir=sourceFolder.getFile();
        if (dir != null) {
          fillMapWithModuleSource(dir,module,sourceFolder.getPackagePrefix(),dir,sourceFolder.isTestSource(),forDir);
        }
      }
    }
  }
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2(ProjectBundle.message("project.index.processing.library.sources.progress",module.getName()));
    }
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (    OrderEntry orderEntry : orderEntries) {
      boolean isLibrary=orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry;
      if (isLibrary) {
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (        final VirtualFile sourceRoot : sourceRoots) {
          fillMapWithLibrarySources(sourceRoot,"",sourceRoot,forDir,fileTypeManager);
        }
      }
    }
  }
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2(ProjectBundle.message("project.index.processing.library.classes.progress",module.getName()));
    }
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (    OrderEntry orderEntry : orderEntries) {
      boolean isLibrary=orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry;
      if (isLibrary) {
        VirtualFile[] classRoots=orderEntry.getFiles(OrderRootType.CLASSES);
        for (        final VirtualFile classRoot : classRoots) {
          fillMapWithLibraryClasses(classRoot,"",classRoot,forDir,fileTypeManager);
        }
      }
    }
  }
  if (progress != null) {
    progress.setText2("");
  }
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (    OrderEntry orderEntry : orderEntries) {
      List<OrderEntry> oneEntryList=Arrays.asList(new OrderEntry[]{orderEntry});
      if (orderEntry instanceof ModuleOrderEntry) {
        Module entryModule=null;
        VirtualFile[] importedClassRoots=orderEntry.getFiles(OrderRootType.COMPILATION_CLASSES);
        for (        VirtualFile importedClassRoot : importedClassRoots) {
          fillMapWithOrderEntries(importedClassRoot,oneEntryList,entryModule,null,null,forDir,null,null,fileTypeManager);
        }
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (        VirtualFile sourceRoot : sourceRoots) {
          fillMapWithOrderEntries(sourceRoot,oneEntryList,entryModule,null,null,forDir,null,null,fileTypeManager);
        }
      }
 else       if (orderEntry instanceof ModuleSourceOrderEntry) {
        Module entryModule=orderEntry.getOwnerModule();
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (        VirtualFile sourceRoot : sourceRoots) {
          fillMapWithOrderEntries(sourceRoot,oneEntryList,entryModule,null,null,forDir,null,null,fileTypeManager);
        }
      }
 else       if (orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry) {
        VirtualFile[] classRoots=orderEntry.getFiles(OrderRootType.CLASSES);
        for (        VirtualFile classRoot : classRoots) {
          fillMapWithOrderEntries(classRoot,oneEntryList,null,classRoot,null,forDir,null,null,fileTypeManager);
        }
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (        VirtualFile sourceRoot : sourceRoots) {
          fillMapWithOrderEntries(sourceRoot,oneEntryList,null,null,sourceRoot,forDir,null,null,fileTypeManager);
        }
      }
    }
  }
  if (progress != null) {
    progress.popState();
  }
}
