{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText("Scanning files...");
  }
  if (forDir == null) {
    myDirToInfoMap.clear();
    myPackageNameToDirsMap.clear();
  }
  if (forDir != null) {
    VirtualFile dir=forDir;
    do {
      myDirToInfoMap.remove(dir);
      dir=dir.getParent();
    }
 while (dir != null);
  }
  ModuleManager moduleManager=ModuleManager.getInstance(myProject);
  Module[] modules=moduleManager.getModules();
  if (reverseAllSets) {
    modules=(Module[])reverseArray(modules);
  }
  if (progress != null) {
    progress.setText2("Building exclude roots...");
  }
  Map<VirtualFile,Set<VirtualFile>> excludeRootsMap=new HashMap<VirtualFile,Set<VirtualFile>>();
  for (int i=0; i < modules.length; i++) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(modules[i]);
    ContentEntry[] contentEntries=rootManager.getContentEntries();
    for (int j=0; j < contentEntries.length; j++) {
      ContentEntry contentEntry=contentEntries[j];
      VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null)       continue;
      VirtualFile[] excludeRoots=contentEntry.getExcludeFolderFiles();
      for (int k=0; k < excludeRoots.length; k++) {
        putForFileAndAllAncestors(excludeRootsMap,contentRoot,excludeRoots[k]);
      }
    }
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2("Processing module \"" + module.getName() + "\" content...");
    }
    VirtualFile[] contentRoots=rootManager.getContentRoots();
    if (reverseAllSets) {
      contentRoots=(VirtualFile[])reverseArray(contentRoots);
    }
    for (int j=0; j < contentRoots.length; j++) {
      final VirtualFile contentRoot=contentRoots[j];
      Set<VirtualFile> excludeRootsSet=excludeRootsMap.get(contentRoot);
      fillMapWithModuleContent(contentRoot,module,contentRoot,excludeRootsSet,forDir);
    }
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2("Processing module \"" + module.getName() + "\" sources...");
    }
    ContentEntry[] contentEntries=rootManager.getContentEntries();
    if (reverseAllSets) {
      contentEntries=(ContentEntry[])reverseArray(contentEntries);
    }
    for (int j=0; j < contentEntries.length; j++) {
      ContentEntry contentEntry=contentEntries[j];
      SourceFolder[] sourceFolders=contentEntry.getSourceFolders();
      if (reverseAllSets) {
        sourceFolders=(SourceFolder[])reverseArray(sourceFolders);
      }
      for (int k=0; k < sourceFolders.length; k++) {
        SourceFolder sourceFolder=sourceFolders[k];
        VirtualFile dir=sourceFolder.getFile();
        if (dir != null) {
          fillMapWithModuleSource(dir,module,sourceFolder.getPackagePrefix(),dir,sourceFolder.isTestSource(),forDir);
        }
      }
    }
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2("Processing module \"" + module.getName() + "\" library sources...");
    }
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (int j=0; j < orderEntries.length; j++) {
      OrderEntry orderEntry=orderEntries[j];
      boolean isLibrary=orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry;
      if (isLibrary) {
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (int k=0; k < sourceRoots.length; k++) {
          final VirtualFile sourceRoot=sourceRoots[k];
          fillMapWithLibrarySources(sourceRoot,"",sourceRoot,forDir);
        }
      }
    }
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    if (progress != null) {
      progress.setText2("Processing module \"" + module.getName() + "\" library classes...");
    }
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (int j=0; j < orderEntries.length; j++) {
      OrderEntry orderEntry=orderEntries[j];
      boolean isLibrary=orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry;
      if (isLibrary) {
        VirtualFile[] classRoots=orderEntry.getFiles(OrderRootType.CLASSES);
        for (int k=0; k < classRoots.length; k++) {
          final VirtualFile classRoot=classRoots[k];
          fillMapWithLibraryClasses(classRoot,"",classRoot,forDir);
        }
      }
    }
  }
  if (progress != null) {
    progress.setText2("");
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    OrderEntry[] orderEntries=rootManager.getOrderEntries();
    for (int j=0; j < orderEntries.length; j++) {
      OrderEntry orderEntry=orderEntries[j];
      List<OrderEntry> oneEntryList=Arrays.asList(new OrderEntry[]{orderEntry});
      if (orderEntry instanceof ModuleOrderEntry) {
        Module entryModule=null;
        VirtualFile[] importedClassRoots=orderEntry.getFiles(OrderRootType.COMPILATION_CLASSES);
        for (int k=0; k < importedClassRoots.length; k++) {
          fillMapWithOrderEntries(importedClassRoots[k],oneEntryList,entryModule,null,null,forDir);
        }
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (int k=0; k < sourceRoots.length; k++) {
          fillMapWithOrderEntries(sourceRoots[k],oneEntryList,entryModule,null,null,forDir);
        }
      }
 else       if (orderEntry instanceof ModuleSourceOrderEntry) {
        Module entryModule=orderEntry.getOwnerModule();
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (int k=0; k < sourceRoots.length; k++) {
          fillMapWithOrderEntries(sourceRoots[k],oneEntryList,entryModule,null,null,forDir);
        }
      }
 else       if (orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry) {
        VirtualFile[] classRoots=orderEntry.getFiles(OrderRootType.CLASSES);
        for (int k=0; k < classRoots.length; k++) {
          VirtualFile classRoot=classRoots[k];
          fillMapWithOrderEntries(classRoot,oneEntryList,null,classRoot,null,forDir);
        }
        VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
        for (int k=0; k < sourceRoots.length; k++) {
          VirtualFile sourceRoot=sourceRoots[k];
          fillMapWithOrderEntries(sourceRoot,oneEntryList,null,null,sourceRoot,forDir);
        }
      }
    }
  }
  if (progress != null) {
    progress.popState();
  }
}
