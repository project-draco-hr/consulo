{
  Map<VirtualFile,Set<VirtualFile>> excludeRootsMap=new THashMap<VirtualFile,Set<VirtualFile>>();
  for (  Module module : modules) {
    ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    final CompilerModuleExtension compilerModuleExtension=CompilerModuleExtension.getInstance(module);
    ContentEntry[] contentEntries=rootManager.getContentEntries();
    for (    ContentEntry contentEntry : contentEntries) {
      VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null)       continue;
      VirtualFile[] excludeRoots=contentEntry.getExcludeFolderFiles();
      for (      VirtualFile excludeRoot : excludeRoots) {
        if (!VfsUtil.isAncestor(contentRoot,excludeRoot,false)) {
          if (compilerModuleExtension.getCompilerOutputPath() == excludeRoot || compilerModuleExtension.getCompilerOutputPathForTests() == excludeRoot) {
            putForFileAndAllAncestors(excludeRootsMap,excludeRoot,excludeRoot);
          }
        }
        putForFileAndAllAncestors(excludeRootsMap,contentRoot,excludeRoot);
      }
    }
  }
  VirtualFile outputPath=CompilerProjectExtension.getInstance(myProject).getCompilerOutput();
  if (outputPath != null)   putForFileAndAllAncestors(excludeRootsMap,outputPath,outputPath);
  return excludeRootsMap;
}
