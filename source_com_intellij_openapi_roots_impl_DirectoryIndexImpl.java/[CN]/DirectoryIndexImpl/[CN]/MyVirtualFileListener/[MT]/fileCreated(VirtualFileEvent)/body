{
  VirtualFile file=event.getFile();
  if (!file.isDirectory())   return;
  VirtualFile parent=file.getParent();
  if (parent == null)   return;
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  if (fileTypeManager.isFileIgnored(file.getName()))   return;
  DirectoryInfo parentInfo=myDirToInfoMap.get(parent);
  if (parentInfo == null)   return;
  if (!LAZY_MODE) {
    fillMapWithModuleContent(file,parentInfo.module,parentInfo.contentRoot,null,null,fileTypeManager);
    if (parentInfo.module != null) {
      if (parentInfo.isInModuleSource) {
        String newDirPackageName=getPackageNameForSubdir(parentInfo.packageName,file.getName());
        fillMapWithModuleSource(file,parentInfo.module,newDirPackageName,parentInfo.sourceRoot,parentInfo.isTestSource,null);
      }
    }
    if (parentInfo.libraryClassRoot != null) {
      String newDirPackageName=getPackageNameForSubdir(parentInfo.packageName,file.getName());
      fillMapWithLibraryClasses(file,newDirPackageName,parentInfo.libraryClassRoot,null,fileTypeManager);
    }
    if (parentInfo.isInLibrarySource) {
      String newDirPackageName=getPackageNameForSubdir(parentInfo.packageName,file.getName());
      fillMapWithLibrarySources(file,newDirPackageName,parentInfo.sourceRoot,null,fileTypeManager);
    }
    if (!parentInfo.getOrderEntries().isEmpty()) {
      fillMapWithOrderEntries(file,parentInfo.getOrderEntries(),null,null,null,null,parentInfo,null,fileTypeManager);
    }
  }
}
