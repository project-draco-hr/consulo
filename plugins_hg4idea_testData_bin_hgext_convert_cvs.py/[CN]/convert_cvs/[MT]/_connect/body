def _connect(self):
    root = self.cvsroot
    conntype = None
    (user, host) = (None, None)
    cmd = ['cvs', 'server']
    self.ui.status((_('connecting to %s\n') % root))
    if root.startswith(':pserver:'):
        root = root[9:]
        m = re.match('(?:(.*?)(?::(.*?))?@)?([^:\\/]*)(?::(\\d*))?(.*)', root)
        if m:
            conntype = 'pserver'
            (user, passw, serv, port, root) = m.groups()
            if (not user):
                user = 'anonymous'
            if (not port):
                port = 2401
            else:
                port = int(port)
            format0 = (':pserver:%s@%s:%s' % (user, serv, root))
            format1 = (':pserver:%s@%s:%d%s' % (user, serv, port, root))
            if (not passw):
                passw = 'A'
                cvspass = os.path.expanduser('~/.cvspass')
                try:
                    pf = open(cvspass)
                    for line in pf.read().splitlines():
                        (part1, part2) = line.split(' ', 1)
                        if (part1 == '/1'):
                            (part1, part2) = part2.split(' ', 1)
                            format = format1
                        else:
                            format = format0
                        if (part1 == format):
                            passw = part2
                            break
                    pf.close()
                except IOError as inst:
                    if (inst.errno != errno.ENOENT):
                        if (not getattr(inst, 'filename', None)):
                            inst.filename = cvspass
                        raise
            sck = socket.socket()
            sck.connect((serv, port))
            sck.send('\n'.join(['BEGIN AUTH REQUEST', root, user, passw, 'END AUTH REQUEST', '']))
            if (sck.recv(128) != 'I LOVE YOU\n'):
                raise util.Abort(_('CVS pserver authentication failed'))
            self.writep = self.readp = sck.makefile('r+')
    if ((not conntype) and root.startswith(':local:')):
        conntype = 'local'
        root = root[7:]
    if (not conntype):
        if root.startswith(':ext:'):
            root = root[5:]
        m = re.match('(?:([^@:/]+)@)?([^:/]+):?(.*)', root)
        if (os.path.isdir(root) or (not m)):
            conntype = 'local'
        else:
            conntype = 'rsh'
            (user, host, root) = (m.group(1), m.group(2), m.group(3))
    if (conntype != 'pserver'):
        if (conntype == 'rsh'):
            rsh = (os.environ.get('CVS_RSH') or 'ssh')
            if user:
                cmd = ([rsh, '-l', user, host] + cmd)
            else:
                cmd = ([rsh, host] + cmd)
        cmd = [util.shellquote(arg) for arg in cmd]
        cmd = util.quotecommand(' '.join(cmd))
        (self.writep, self.readp) = util.popen2(cmd)
    self.realroot = root
    self.writep.write(('Root %s\n' % root))
    self.writep.write('Valid-responses ok error Valid-requests Mode M Mbinary E Checked-in Created Updated Merged Removed\n')
    self.writep.write('valid-requests\n')
    self.writep.flush()
    r = self.readp.readline()
    if (not r.startswith('Valid-requests')):
        raise util.Abort((_('unexpected response from CVS server (expected "Valid-requests", but got %r)') % r))
    if ('UseUnchanged' in r):
        self.writep.write('UseUnchanged\n')
        self.writep.flush()
        r = self.readp.readline()
