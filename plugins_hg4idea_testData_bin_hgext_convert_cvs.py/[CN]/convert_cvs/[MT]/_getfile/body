def _getfile(self, name, rev):

    def chunkedread(fp, count):
        chunksize = 65536
        output = StringIO()
        while (count > 0):
            data = fp.read(min(count, chunksize))
            if (not data):
                raise util.Abort((_('%d bytes missing from remote file') % count))
            count -= len(data)
            output.write(data)
        return output.getvalue()
    if rev.endswith('(DEAD)'):
        raise IOError
    args = ('-N -P -kk -r %s --' % rev).split()
    args.append(((self.cvsrepo + '/') + name))
    for x in args:
        self.writep.write(('Argument %s\n' % x))
    self.writep.write(('Directory .\n%s\nco\n' % self.realroot))
    self.writep.flush()
    data = ''
    mode = None
    while 1:
        line = self.readp.readline()
        if (line.startswith('Created ') or line.startswith('Updated ')):
            self.readp.readline()
            self.readp.readline()
            mode = self.readp.readline()[:(-1)]
            count = int(self.readp.readline()[:(-1)])
            data = chunkedread(self.readp, count)
        elif line.startswith(' '):
            data += line[1:]
        elif line.startswith('M '):
            pass
        elif line.startswith('Mbinary '):
            count = int(self.readp.readline()[:(-1)])
            data = chunkedread(self.readp, count)
        elif (line == 'ok\n'):
            if (mode is None):
                raise util.Abort(_('malformed response from CVS'))
            return (data, ((('x' in mode) and 'x') or ''))
        elif line.startswith('E '):
            self.ui.warn((_('cvs server: %s\n') % line[2:]))
        elif line.startswith('Remove'):
            self.readp.readline()
        else:
            raise util.Abort((_('unknown CVS response: %s') % line))
