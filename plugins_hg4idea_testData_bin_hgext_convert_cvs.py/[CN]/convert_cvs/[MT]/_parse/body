def _parse(self):
    if (self.changeset is not None):
        return
    self.changeset = {}
    maxrev = 0
    if self.rev:
        try:
            maxrev = int(self.rev)
        except ValueError:
            raise util.Abort((_('revision %s is not a patchset number') % self.rev))
    d = os.getcwd()
    try:
        os.chdir(self.path)
        id = None
        state = 0
        filerevids = {}
        cache = 'update'
        if (not self.ui.configbool('convert', 'cvsps.cache', True)):
            cache = None
        db = cvsps.createlog(self.ui, cache=cache)
        db = cvsps.createchangeset(self.ui, db, fuzz=int(self.ui.config('convert', 'cvsps.fuzz', 60)), mergeto=self.ui.config('convert', 'cvsps.mergeto', None), mergefrom=self.ui.config('convert', 'cvsps.mergefrom', None))
        for cs in db:
            if (maxrev and (cs.id > maxrev)):
                break
            id = str(cs.id)
            cs.author = self.recode(cs.author)
            self.lastbranch[cs.branch] = id
            cs.comment = self.recode(cs.comment)
            date = util.datestr(cs.date)
            self.tags.update(dict.fromkeys(cs.tags, id))
            files = {}
            for f in cs.entries:
                files[f.file] = ('%s%s' % ('.'.join([str(x) for x in f.revision]), ['', '(DEAD)'][f.dead]))
            c = commit(author=cs.author, date=date, parents=[str(p.id) for p in cs.parents], desc=cs.comment, branch=(cs.branch or ''))
            self.changeset[id] = c
            self.files[id] = files
        self.heads = self.lastbranch.values()
    finally:
        os.chdir(d)
