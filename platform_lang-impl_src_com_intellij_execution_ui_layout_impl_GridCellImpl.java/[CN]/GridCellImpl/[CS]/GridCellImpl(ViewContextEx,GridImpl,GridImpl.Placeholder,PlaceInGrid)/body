{
  myContext=context;
  myContainer=container;
  myPlaceInGrid=placeInGrid;
  myPlaceholder=placeholder;
  myTabs=new JBEditorTabs(myContext.getProject(),myContext.getActionManager(),myContext.getFocusManager(),container){
    @Override public boolean useSmallLabels(){
      return true;
    }
    @Override protected SingleRowLayout createSingleRowLayout(){
      return new ScrollableSingleRowLayout(this);
    }
    @Override protected JBEditorTabsPainter createPainter(){
      JBEditorTabsPainter painter=super.createPainter();
      painter.setModifyTabColor(UIManager.getColor("runner.grid.tabs.color"));
      return painter;
    }
    @Override public int tabMSize(){
      return 12;
    }
    @Override protected void paintBorder(    Graphics2D g2d,    ShapeInfo shape,    Color borderColor){
      if (UIUtil.isUnderDarcula()) {
        return;
      }
      super.paintBorder(g2d,shape,borderColor);
    }
    @Override public void processDropOver(    TabInfo over,    RelativePoint point){
      ((RunnerContentUi)myContext).myTabs.processDropOver(over,point);
    }
    @Override public Image startDropOver(    TabInfo tabInfo,    RelativePoint point){
      return ((RunnerContentUi)myContext).myTabs.startDropOver(tabInfo,point);
    }
    @Override public void resetDropOver(    TabInfo tabInfo){
      ((RunnerContentUi)myContext).myTabs.resetDropOver(tabInfo);
    }
    @Override protected TabLabel createTabLabel(    TabInfo info){
      return new TabLabel(this,info){
        @Override public void setAlignmentToCenter(        boolean toCenter){
          super.setAlignmentToCenter(false);
        }
      }
;
    }
  }
.setDataProvider(new DataProvider(){
    @Override @Nullable public Object getData(    @NonNls final String dataId){
      if (ViewContext.CONTENT_KEY.is(dataId)) {
        TabInfo target=myTabs.getTargetInfo();
        if (target != null) {
          return new Content[]{getContentFor(target)};
        }
      }
 else       if (ViewContext.CONTEXT_KEY.is(dataId)) {
        return myContext;
      }
      return null;
    }
  }
);
  myTabs.getPresentation().setUiDecorator(new UiDecorator(){
    @Override @NotNull public UiDecoration getDecoration(){
      return new UiDecoration(null,new Insets(1,-1,1,-1));
    }
  }
).setSideComponentVertical(!context.getLayoutSettings().isToolbarHorizontal()).setStealthTabMode(true).setFocusCycle(false).setPaintFocus(true).setProvideSwitchTargets(false).setTabDraggingEnabled(true).setSideComponentOnTabs(false);
  myTabs.addTabMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if (UIUtil.isCloseClick(e)) {
        closeOrMinimize(e);
      }
    }
  }
);
  rebuildPopupGroup();
  myTabs.addListener(new TabsListener.Adapter(){
    @Override public void beforeSelectionChanged(    TabInfo oldSelection,    TabInfo newSelection){
      if (oldSelection != null && myContext.isStateBeingRestored()) {
        saveUiState();
      }
    }
    @Override public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      updateSelection(myTabs.getComponent().isShowing());
      if (!myTabs.getComponent().isShowing())       return;
      if (newSelection != null) {
        newSelection.stopAlerting();
      }
    }
  }
);
}
