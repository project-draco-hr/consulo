{
  if (!(blocked instanceof TreeChangeEventImpl))   return;
  final TreeChangeEventImpl blockedTreeChange=(TreeChangeEventImpl)blocked;
  final Map<ASTNode,TreeChange> changedElements=new HashMap<ASTNode,TreeChange>(blockedTreeChange.myChangedElements);
{
    final Iterator<Map.Entry<ASTNode,TreeChange>> iterator=changedElements.entrySet().iterator();
    while (iterator.hasNext()) {
      final Map.Entry<ASTNode,TreeChange> entry=iterator.next();
      final ASTNode changed=entry.getKey();
      final TreeChange treeChange=myChangedElements.get(changed);
      if (treeChange != null) {
        iterator.remove();
        treeChange.add(entry.getValue());
      }
    }
  }
  int depth=0;
{
    final Iterator<Map.Entry<ASTNode,TreeChange>> iterator=changedElements.entrySet().iterator();
    while (iterator.hasNext()) {
      final Map.Entry<ASTNode,TreeChange> entry=iterator.next();
      final ASTNode changed=entry.getKey();
      TreeElement prevParent=(TreeElement)changed;
      CompositeElement currentParent=(CompositeElement)changed.getTreeParent();
      while (currentParent != null) {
        if (myChangedElements.containsKey(currentParent)) {
          final ChangeInfoImpl newChange=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,prevParent);
          final int newLength=((TreeElement)changed).getNotCachedLength();
          final int oldLength=entry.getValue().getOldLength();
          newChange.setOldLength(prevParent.getNotCachedLength() - newLength + oldLength);
          processElementaryChange(currentParent,prevParent,newChange,-1);
          iterator.remove();
          break;
        }
        depth++;
        prevParent=currentParent;
        currentParent=currentParent.getTreeParent();
      }
    }
  }
{
    for (    final Map.Entry<ASTNode,TreeChange> entry : changedElements.entrySet()) {
      final ASTNode changed=entry.getKey();
      myChangedElements.put(changed,entry.getValue());
      insertAtList(changed);
      addToEqualsDepthList(depth,changed);
      compactChanges(changed,depth);
    }
  }
}
