{
  if (!XmlUtil.isStubBuilding(file) && file.getFileType() == XmlFileType.INSTANCE) {
    VirtualFile virtualFile=file.getVirtualFile();
    if (virtualFile instanceof VirtualFileWithId) {
      ObjectStubTree tree=StubTreeLoader.getInstance().readFromVFile(file.getProject(),virtualFile);
      if (tree != null) {
        return ((FileStub)tree.getRoot()).getHeader();
      }
    }
  }
  final XmlDocument document=file.getDocument();
  if (document != null) {
    String publicId=null;
    String systemId=null;
    final XmlProlog prolog=document.getProlog();
    if (prolog != null) {
      final XmlDoctype doctype=prolog.getDoctype();
      if (doctype != null) {
        publicId=doctype.getPublicId();
        systemId=doctype.getSystemId();
        if (systemId == null) {
          systemId=doctype.getDtdUri();
        }
      }
    }
    final XmlTag tag=document.getRootTag();
    if (tag != null) {
      String localName=tag.getLocalName();
      if (StringUtil.isNotEmpty(localName)) {
        if (tag.getPrevSibling() instanceof PsiErrorElement) {
          return XmlFileHeader.EMPTY;
        }
        String psiNs=tag.getNamespace();
        return new XmlFileHeader(localName,psiNs == XmlUtil.EMPTY_URI || Comparing.equal(psiNs,systemId) ? null : psiNs,publicId,systemId);
      }
    }
  }
  if (!file.isValid())   return XmlFileHeader.EMPTY;
  return NanoXmlUtil.parseHeader(file);
}
