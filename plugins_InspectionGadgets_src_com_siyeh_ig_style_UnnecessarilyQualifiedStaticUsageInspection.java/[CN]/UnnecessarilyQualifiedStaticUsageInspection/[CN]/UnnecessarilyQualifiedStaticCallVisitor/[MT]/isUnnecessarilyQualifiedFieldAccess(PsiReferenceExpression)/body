{
  final PsiElement element=expression.resolve();
  if (!(element instanceof PsiField) && !(element instanceof PsiMethod)) {
    return false;
  }
  final PsiMember member=(PsiMember)element;
  if (!member.hasModifierProperty(PsiModifier.STATIC)) {
    return false;
  }
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (!(qualifierExpression instanceof PsiJavaCodeReferenceElement)) {
    return false;
  }
  final PsiElement qualifierElement=((PsiReference)qualifierExpression).resolve();
  if (!(qualifierElement instanceof PsiClass)) {
    return false;
  }
  final String referenceName=expression.getReferenceName();
  PsiClass parentClass=ClassUtils.getContainingClass(expression);
  PsiClass containingClass=parentClass;
  while (parentClass != null) {
    containingClass=parentClass;
    final PsiField[] fields=containingClass.getAllFields();
    for (int i=0; i < fields.length; i++) {
      final PsiField field=fields[i];
      final String name=field.getName();
      if (referenceName.equals(name) && !containingClass.equals(qualifierElement)) {
        return false;
      }
    }
    parentClass=ClassUtils.getContainingClass(containingClass);
  }
  PsiMethod containingMethod=(PsiMethod)PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  while (containingMethod != null) {
    final PsiParameterList parameterList=containingMethod.getParameterList();
    final PsiParameter[] parameters=parameterList.getParameters();
    for (int i=0; i < parameters.length; i++) {
      final PsiParameter parameter=parameters[i];
      final String name=parameter.getName();
      if (referenceName.equals(name)) {
        return false;
      }
    }
    containingMethod=(PsiMethod)PsiTreeUtil.getParentOfType(containingMethod,PsiMethod.class);
  }
  if (!qualifierElement.equals(containingClass)) {
    return false;
  }
  return true;
}
