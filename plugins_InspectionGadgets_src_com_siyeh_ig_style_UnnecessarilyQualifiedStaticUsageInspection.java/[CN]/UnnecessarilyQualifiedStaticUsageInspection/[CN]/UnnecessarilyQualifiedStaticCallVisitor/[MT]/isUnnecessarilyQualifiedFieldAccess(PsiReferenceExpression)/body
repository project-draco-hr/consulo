{
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (!(qualifierExpression instanceof PsiJavaCodeReferenceElement)) {
    return false;
  }
  final PsiElement element=expression.resolve();
  if (!(element instanceof PsiField)) {
    return false;
  }
  final PsiMember member=(PsiMember)element;
  if (!member.hasModifierProperty(PsiModifier.STATIC)) {
    return false;
  }
  if (m_ignoreStaticAccessFromStaticContext) {
    final PsiMember containingMember=PsiTreeUtil.getParentOfType(expression,PsiMember.class);
    if (containingMember != null && !containingMember.hasModifierProperty(PsiModifier.STATIC)) {
      return false;
    }
  }
  final String referenceName=expression.getReferenceName();
  if (referenceName == null) {
    return false;
  }
  final PsiManager manager=expression.getManager();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  final PsiVariable variable=resolveHelper.resolveReferencedVariable(referenceName,expression);
  if (variable == null || !variable.equals(member)) {
    return false;
  }
  final PsiElement qualifierElement=((PsiReference)qualifierExpression).resolve();
  if (!(qualifierElement instanceof PsiClass)) {
    return false;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(expression);
  return qualifierElement.equals(containingClass);
}
