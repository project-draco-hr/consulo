{
  final PsiElement parent=referenceElement.getParent();
  if (parent instanceof PsiJavaCodeReferenceElement || parent instanceof PsiImportStatementBase) {
    return false;
  }
  final PsiElement qualifierElement=referenceElement.getQualifier();
  if (!(qualifierElement instanceof PsiJavaCodeReferenceElement)) {
    return false;
  }
  final PsiJavaCodeReferenceElement qualifier=(PsiJavaCodeReferenceElement)qualifierElement;
  final PsiReferenceParameterList qualifierParameterList=qualifier.getParameterList();
  if (qualifierParameterList != null) {
    final PsiTypeElement[] typeParameterElements=qualifierParameterList.getTypeParameterElements();
    if (typeParameterElements.length > 0) {
      return false;
    }
  }
  final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
  if (parameterList != null) {
    final PsiTypeElement[] typeParameterElements=parameterList.getTypeParameterElements();
    if (typeParameterElements.length > 0) {
      return false;
    }
  }
  final PsiElement target=referenceElement.resolve();
  if ((!(target instanceof PsiField) || m_ignoreStaticFieldAccesses) && (!(target instanceof PsiMethod) || m_ignoreStaticMethodCalls)) {
    return false;
  }
  if (m_ignoreStaticAccessFromStaticContext) {
    final PsiMember containingMember=PsiTreeUtil.getParentOfType(referenceElement,PsiMember.class);
    if (containingMember != null && !containingMember.hasModifierProperty(PsiModifier.STATIC)) {
      return false;
    }
  }
  final String referenceName=referenceElement.getReferenceName();
  if (referenceName == null) {
    return false;
  }
  final PsiElement resolvedQualifier=qualifier.resolve();
  if (!(resolvedQualifier instanceof PsiClass)) {
    return false;
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(referenceElement,PsiClass.class);
  final PsiClass qualifyingClass=(PsiClass)resolvedQualifier;
  if (containingClass == null || !containingClass.equals(qualifyingClass)) {
    return false;
  }
  final Project project=referenceElement.getProject();
  final JavaPsiFacade manager=JavaPsiFacade.getInstance(project);
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  final PsiMember member=(PsiMember)target;
  final PsiClass memberClass;
  if (target instanceof PsiField) {
    final PsiVariable variable=resolveHelper.resolveReferencedVariable(referenceName,referenceElement);
    if (variable == null || !variable.equals(member)) {
      return false;
    }
    final PsiMember memberVariable=(PsiMember)variable;
    memberClass=memberVariable.getContainingClass();
  }
 else   if (target instanceof PsiClass) {
    final PsiClass aClass=resolveHelper.resolveReferencedClass(referenceName,referenceElement);
    if (aClass == null || !aClass.equals(member)) {
      return false;
    }
    memberClass=aClass.getContainingClass();
  }
 else {
    return isMethodAccessibleWithoutQualifier(referenceElement,qualifyingClass);
  }
  return resolvedQualifier.equals(memberClass);
}
