{
  final PsiElement qualifierElement=referenceElement.getQualifier();
  if (!(qualifierElement instanceof PsiJavaCodeReferenceElement)) {
    return false;
  }
  final PsiElement target=referenceElement.resolve();
  if (!(target instanceof PsiField) && !(target instanceof PsiClass)) {
    return false;
  }
  if (m_ignoreStaticAccessFromStaticContext) {
    final PsiMember containingMember=PsiTreeUtil.getParentOfType(referenceElement,PsiMember.class);
    if (containingMember != null && !containingMember.hasModifierProperty(PsiModifier.STATIC)) {
      return false;
    }
  }
  final String referenceName=referenceElement.getReferenceName();
  if (referenceName == null) {
    return false;
  }
  final PsiManager manager=referenceElement.getManager();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  final PsiMember member=(PsiMember)target;
  if (target instanceof PsiField) {
    if (!member.hasModifierProperty(PsiModifier.STATIC)) {
      return false;
    }
    final PsiVariable variable=resolveHelper.resolveReferencedVariable(referenceName,referenceElement);
    if (variable == null || !variable.equals(member)) {
      return false;
    }
  }
 else {
    final PsiClass aClass=resolveHelper.resolveReferencedClass(referenceName,referenceElement);
    if (aClass == null || !aClass.equals(member)) {
      return false;
    }
  }
  final PsiReference reference=(PsiReference)qualifierElement;
  final PsiElement resolvedQualifier=reference.resolve();
  if (!(resolvedQualifier instanceof PsiClass)) {
    return false;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(referenceElement);
  return resolvedQualifier.equals(containingClass);
}
