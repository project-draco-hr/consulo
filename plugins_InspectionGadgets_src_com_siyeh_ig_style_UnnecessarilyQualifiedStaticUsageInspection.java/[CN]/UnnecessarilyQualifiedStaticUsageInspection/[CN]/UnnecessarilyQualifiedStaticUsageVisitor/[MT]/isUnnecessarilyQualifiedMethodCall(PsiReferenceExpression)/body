{
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (!(qualifierExpression instanceof PsiJavaCodeReferenceElement)) {
    return false;
  }
  final PsiElement element=expression.resolve();
  if (!(element instanceof PsiMethod)) {
    return false;
  }
  final PsiMember member=(PsiMember)element;
  if (!member.hasModifierProperty(PsiModifier.STATIC)) {
    return false;
  }
  if (m_ignoreStaticAccessFromStaticContext) {
    final PsiMember containingMember=PsiTreeUtil.getParentOfType(expression,PsiMember.class);
    if (containingMember != null && !containingMember.hasModifierProperty(PsiModifier.STATIC)) {
      return false;
    }
  }
  final PsiReference reference=(PsiReference)qualifierExpression;
  final PsiElement qualifierElement=reference.resolve();
  if (!(qualifierElement instanceof PsiClass)) {
    return false;
  }
  final String referenceName=expression.getReferenceName();
  if (referenceName == null) {
    return false;
  }
  PsiClass parentClass=ClassUtils.getContainingClass(expression);
  PsiClass containingClass=parentClass;
  while (parentClass != null) {
    containingClass=parentClass;
    final PsiMethod[] methods=containingClass.getAllMethods();
    for (    final PsiMethod method : methods) {
      final String name=method.getName();
      if (referenceName.equals(name) && !containingClass.equals(qualifierElement)) {
        return false;
      }
    }
    parentClass=ClassUtils.getContainingClass(containingClass);
  }
  return qualifierElement.equals(containingClass);
}
