{
  indicator.setText2(HgVcsMessages.message("hg4idea.progress.merging"));
  hgMergeCommand.execute();
  VcsDirtyScopeManager vcsDirtyScopeManager=VcsDirtyScopeManager.getInstance(project);
  vcsDirtyScopeManager.dirDirtyRecursively(repo);
  repo.refresh(false,true);
  HgStatusCommand hgStatusCommand=new HgStatusCommand(project);
  hgStatusCommand.setIncludeIgnored(false);
  hgStatusCommand.setIncludeUnknown(false);
  Set<HgChange> changes=hgStatusCommand.execute(repo);
  if (changes.isEmpty()) {
    return;
  }
  for (  HgChange change : changes) {
    HgFile afterFile=change.afterFile();
    HgFile beforeFile=change.beforeFile();
    String fileGroupId=null;
    String filePath=null;
    if (afterFile != null && beforeFile != null) {
      fileGroupId=FileGroup.MODIFIED_ID;
      filePath=afterFile.getFile().getAbsolutePath();
    }
 else     if (beforeFile != null) {
      fileGroupId=FileGroup.LOCALLY_REMOVED_ID;
      filePath=beforeFile.getFile().getAbsolutePath();
    }
 else     if (afterFile != null) {
      fileGroupId=FileGroup.LOCALLY_ADDED_ID;
      filePath=afterFile.getFile().getAbsolutePath();
    }
    if (fileGroupId != null && filePath != null) {
      updatedFiles.getGroupById(fileGroupId).add(filePath,HgVcs.VCS_NAME,revisionNumber);
    }
  }
}
