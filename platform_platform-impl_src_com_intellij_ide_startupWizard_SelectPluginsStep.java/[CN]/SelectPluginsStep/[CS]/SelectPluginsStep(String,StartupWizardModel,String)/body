{
  super(title,"Select the plugins to enable. Disabling unused plugins will improve IDE startup speed and performance.\n\nTo change plugin settings later, go to Settings | Plugins.",null);
  myModel=model;
  myRequirePlugin=requirePlugin;
  myPluginsList.setCellRenderer(new ListCellRenderer(){
    private final JCheckBox myCheckbox=new JCheckBox();
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      IdeaPluginDescriptor descriptor=(IdeaPluginDescriptor)value;
      myCheckbox.setEnabled(!myModel.isForceEnable(descriptor));
      if (isSelected) {
        myCheckbox.setBackground(UIUtil.getListSelectionBackground());
        myCheckbox.setForeground(UIUtil.getListSelectionForeground());
      }
 else {
        myCheckbox.setBackground(UIUtil.getListBackground());
        myCheckbox.setForeground(UIUtil.getListForeground());
      }
      myCheckbox.setText(getAbbreviatedName(descriptor) + buildRequires(descriptor));
      myCheckbox.setSelected(!myModel.isDisabledPlugin(descriptor));
      return myCheckbox;
    }
  }
);
  myPluginsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      final IdeaPluginDescriptor pluginDescriptor=getSelectedPlugin();
      if (pluginDescriptor != null) {
        final String description=pluginDescriptor.getDescription();
        myDescriptionArea.setText(description);
        myDescriptionArea.moveCaretPosition(0);
      }
 else {
        myDescriptionArea.setText("Select a plugin to see its description");
      }
    }
  }
);
  myPluginsList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      toggleSelection();
      e.consume();
    }
  }
);
  myPluginsList.addKeyListener(new KeyAdapter(){
    public void keyTyped(    final KeyEvent e){
      if (e.getKeyChar() == ' ') {
        toggleSelection();
      }
    }
  }
);
  myEnableAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      setAllPluginsEnabled(true);
    }
  }
);
  myDisableAllButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      setAllPluginsEnabled(false);
    }
  }
);
}
