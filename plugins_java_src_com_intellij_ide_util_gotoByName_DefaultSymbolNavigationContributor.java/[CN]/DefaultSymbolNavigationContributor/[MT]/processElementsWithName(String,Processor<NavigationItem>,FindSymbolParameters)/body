{
  GlobalSearchScope scope=parameters.getSearchScope();
  IdFilter filter=parameters.getIdFilter();
  PsiShortNamesCache cache=PsiShortNamesCache.getInstance(scope.getProject());
  boolean dummy=cache.processFieldsWithName(name,new Processor<PsiField>(){
    @Override public boolean process(    PsiField field){
      if (isOpenable(field))       return processor.process(field);
      return true;
    }
  }
,scope,filter) && cache.processMethodsWithName(name,new Processor<PsiMethod>(){
    @Override public boolean process(    PsiMethod method){
      if (!method.isConstructor() && isOpenable(method) && !hasSuperMethod(method))       return processor.process(method);
      return true;
    }
  }
,scope,filter) && cache.processClassesWithName(name,new Processor<PsiClass>(){
    @Override public boolean process(    PsiClass aClass){
      if (isOpenable(aClass))       return processor.process(aClass);
      return true;
    }
  }
,scope,filter);
}
