{
  myPanel=new JPanel(new BorderLayout());
  myTabbedPane=new TabbedPaneWrapper();
  final ConfigurationType[] factories=getConfigurationFactories();
  myTabs=new ConfigurationTab[factories.length];
  for (int i=0; i < factories.length; i++) {
    final ConfigurationType type=factories[i];
    final ConfigurationTab configurationTab=new ConfigurationTab(type,this);
    myTabs[i]=configurationTab;
    JPanel panel=new JPanel(new BorderLayout());
    panel.setBorder(BorderFactory.createEmptyBorder(6,6,6,6));
    panel.add(configurationTab.getComponent(),BorderLayout.CENTER);
    myTabbedPane.addTab(type.getDisplayName(),panel);
    myTabbedPane.setIconAt(i,type.getIcon());
  }
  myPanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  final JPanel bottomPanel=new JPanel(new GridLayout(1,2,5,0));
  myCbShowSettingsBeforeRunning=new JCheckBox(ExecutionBundle.message("run.configuration.display.settings.checkbox"));
  bottomPanel.add(myCbShowSettingsBeforeRunning);
  myCbCompileBeforeRunning=new JCheckBox(ExecutionBundle.message("run.configuration.make.module.before.running.checkbox"));
  bottomPanel.add(myCbCompileBeforeRunning);
  myPanel.add(bottomPanel,BorderLayout.SOUTH);
  bottomPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    final ChangeEvent e){
      updateDialog();
    }
  }
);
  final ItemListener cbListener=new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      setModified(true);
    }
  }
;
  myCbCompileBeforeRunning.addItemListener(cbListener);
  myCbShowSettingsBeforeRunning.addItemListener(cbListener);
  updateDialog();
  return myPanel;
}
