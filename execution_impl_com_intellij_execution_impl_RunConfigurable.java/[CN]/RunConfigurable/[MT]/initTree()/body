{
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myTree);
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      if (myTree.getPathForLocation(x,y) != null && Arrays.binarySearch(myTree.getSelectionRows(),myTree.getRowForLocation(x,y)) > -1) {
        final ActionPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN,createActionsGroup());
        popupMenu.getComponent().show(comp,x,y);
      }
    }
  }
);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        final Object userObject=node.getUserObject();
        if (userObject instanceof ConfigurationType) {
          final ConfigurationType configurationType=(ConfigurationType)userObject;
          append(configurationType.getDisplayName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
          setIcon(configurationType.getIcon());
        }
 else         if (userObject instanceof SingleConfigurationConfigurable) {
          final SingleConfigurationConfigurable settings=(SingleConfigurationConfigurable)userObject;
          final RunManager runManager=getRunManager();
          final RunConfiguration configuration=settings.getConfiguration();
          append(settings.getNameText(),runManager.isTemporary(configuration) ? SimpleTextAttributes.GRAY_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          setIcon(ExecutionUtil.getConfigurationIcon(getProject(),configuration,!settings.isValid()));
        }
      }
    }
  }
);
  final RunManagerEx manager=getRunManager();
  final ConfigurationType[] factories=getRunManager().getConfigurationFactories();
  for (  ConfigurationType type : factories) {
    final RunnerAndConfigurationSettingsImpl[] configurations=manager.getConfigurationSettings(type);
    if (configurations != null && configurations.length > 0) {
      final DefaultMutableTreeNode typeNode=new DefaultMutableTreeNode(type);
      myRoot.add(typeNode);
      for (      RunnerAndConfigurationSettingsImpl configuration : configurations) {
        final SingleConfigurationConfigurable<RunConfiguration> configurationConfigurable=SingleConfigurationConfigurable.editSettings(configuration);
        installUpdateListeners(configurationConfigurable);
        typeNode.add(new DefaultMutableTreeNode(configurationConfigurable));
      }
    }
  }
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final Object userObject=node.getUserObject();
        if (userObject instanceof SingleConfigurationConfigurable) {
          myRightPanel.removeAll();
          mySelectedConfigurable=(SingleConfigurationConfigurable<RunConfiguration>)userObject;
          myRightPanel.add(mySelectedConfigurable.createComponent(),BorderLayout.CENTER);
          updateCompileMethodComboStatus(mySelectedConfigurable);
          setupDialogBounds();
        }
 else         if (userObject instanceof ConfigurationType) {
          drawPressAddButtonMessage(((ConfigurationType)userObject));
        }
      }
      updateDialog();
    }
  }
);
  myTree.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      clickDefaultButton();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      myTree.requestFocusInWindow();
      TreeUtil.selectFirstNode(myTree);
      drawPressAddButtonMessage(null);
      final RunnerAndConfigurationSettings settings=manager.getSelectedConfiguration();
      if (settings == null) {
        mySelectedConfigurable=null;
        return;
      }
      final Enumeration enumeration=myRoot.breadthFirstEnumeration();
      while (enumeration.hasMoreElements()) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)enumeration.nextElement();
        final Object userObject=node.getUserObject();
        if (userObject instanceof SingleConfigurationConfigurable) {
          final SingleConfigurationConfigurable<RunConfiguration> configurationConfigurable=((SingleConfigurationConfigurable<RunConfiguration>)userObject);
          if (configurationConfigurable.getConfiguration().getType() == settings.getType() && Comparing.strEqual(configurationConfigurable.getConfiguration().getName(),settings.getName())) {
            mySelectedConfigurable=configurationConfigurable;
            TreeUtil.selectInTree(node,true,myTree);
            break;
          }
        }
      }
    }
  }
);
  sortTree(myRoot);
  ((DefaultTreeModel)myTree.getModel()).reload();
}
