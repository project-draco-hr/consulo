{
  PriorityQueue<PersistentHashMap.CompactionRecordInfo> records=new PriorityQueue<PersistentHashMap.CompactionRecordInfo>(infos.size(),new Comparator<PersistentHashMap.CompactionRecordInfo>(){
    @Override public int compare(    PersistentHashMap.CompactionRecordInfo info,    PersistentHashMap.CompactionRecordInfo info2){
      long i=info.valueAddress - info2.valueAddress;
      return i > 0 ? -1 : i < 0 ? 1 : 0;
    }
  }
);
  records.addAll(infos);
  final int fileBufferLength=256 * 1024;
  final int maxRecordHeader=Math.max(BYTE_LENGTH_INT_ADDRESS,INT_LENGTH_LONG_ADDRESS);
  final byte[] buffer=new byte[fileBufferLength + maxRecordHeader];
  byte[] recordBuffer={};
  long lastReadOffset=mySize;
  long lastConsumedOffset=lastReadOffset;
  long allRecordsStart=0;
  int fragments=0;
  int allRecordsLength=0;
  byte[] stuffFromPreviousRecord=null;
  int bytesRead=(int)(mySize - (mySize / fileBufferLength) * fileBufferLength);
  while (lastReadOffset != 0) {
    final long readStartOffset=lastReadOffset - bytesRead;
    myCompactionModeReader.get(readStartOffset,buffer,0,bytesRead);
    while (records.size() > 0) {
      final PersistentHashMap.CompactionRecordInfo info=records.peek();
      if (info.valueAddress >= lastReadOffset - bytesRead) {
        final int recordStartInBuffer=(int)(info.valueAddress - readStartOffset);
        final int sizePart=buffer[recordStartInBuffer];
        final long prevChunkAddress;
        int chunkSize;
        final int dataOffset;
        if (stuffFromPreviousRecord != null && (fileBufferLength - recordStartInBuffer) < maxRecordHeader) {
          if (allRecordsStart != 0) {
            myCompactionModeReader.get(allRecordsStart,buffer,bytesRead,maxRecordHeader);
          }
 else {
            final int maxAdditionalBytes=Math.min(stuffFromPreviousRecord.length,maxRecordHeader);
            for (int i=0; i < maxAdditionalBytes; ++i) {
              buffer[bytesRead + i]=stuffFromPreviousRecord[i];
            }
          }
        }
        if (sizePart < 0) {
          chunkSize=-sizePart - POSITIVE_VALUE_SHIFT;
          prevChunkAddress=Bits.getInt(buffer,recordStartInBuffer + 1);
          dataOffset=BYTE_LENGTH_INT_ADDRESS;
        }
 else {
          chunkSize=Bits.getInt(buffer,recordStartInBuffer);
          prevChunkAddress=Bits.getLong(buffer,recordStartInBuffer + 4);
          dataOffset=INT_LENGTH_LONG_ADDRESS;
        }
        byte[] b;
        if (info.value != null) {
          int defragmentedChunkSize=info.value.length + chunkSize;
          if (prevChunkAddress == 0) {
            if (defragmentedChunkSize >= recordBuffer.length)             recordBuffer=new byte[defragmentedChunkSize];
            b=recordBuffer;
          }
 else {
            b=new byte[defragmentedChunkSize];
          }
          System.arraycopy(info.value,0,b,chunkSize,info.value.length);
        }
 else {
          if (prevChunkAddress == 0) {
            if (chunkSize >= recordBuffer.length)             recordBuffer=new byte[chunkSize];
            b=recordBuffer;
          }
 else {
            b=new byte[chunkSize];
          }
        }
        final int chunkSizeOutOfBuffer=Math.min(chunkSize,Math.max((int)(info.valueAddress + dataOffset + chunkSize - lastReadOffset),0));
        if (chunkSizeOutOfBuffer > 0) {
          if (allRecordsStart != 0) {
            myCompactionModeReader.get(allRecordsStart,b,chunkSize - chunkSizeOutOfBuffer,chunkSizeOutOfBuffer);
          }
 else {
            int offsetInStuffFromPreviousRecord=Math.max((int)(info.valueAddress + dataOffset - lastReadOffset),0);
            System.arraycopy(stuffFromPreviousRecord,offsetInStuffFromPreviousRecord,b,chunkSize - chunkSizeOutOfBuffer,chunkSizeOutOfBuffer);
          }
        }
        stuffFromPreviousRecord=null;
        allRecordsStart=allRecordsLength=0;
        lastConsumedOffset=info.valueAddress;
        checkPreconditions(b,chunkSize,0);
        System.arraycopy(buffer,recordStartInBuffer + dataOffset,b,0,chunkSize - chunkSizeOutOfBuffer);
        ++fragments;
        records.remove(info);
        if (info.value != null) {
          chunkSize+=info.value.length;
          info.value=null;
        }
        if (prevChunkAddress == 0) {
          info.newValueAddress=storage.appendBytes(b,0,chunkSize,0);
        }
 else {
          info.value=b;
          info.valueAddress=prevChunkAddress;
          records.add(info);
        }
      }
 else {
        if (stuffFromPreviousRecord == null) {
          stuffFromPreviousRecord=new byte[(int)(lastConsumedOffset - readStartOffset)];
          System.arraycopy(buffer,0,stuffFromPreviousRecord,0,stuffFromPreviousRecord.length);
        }
 else {
          allRecordsStart=readStartOffset;
          allRecordsLength+=buffer.length;
        }
        break;
      }
    }
    lastReadOffset-=bytesRead;
    bytesRead=fileBufferLength;
  }
  return fragments;
}
