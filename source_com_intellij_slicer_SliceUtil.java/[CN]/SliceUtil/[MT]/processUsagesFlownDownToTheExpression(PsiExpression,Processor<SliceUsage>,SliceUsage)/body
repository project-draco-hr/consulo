{
  PsiMethod method=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  if (method == null)   return true;
  expression=simplify(expression);
  Processor<SliceUsage> uniqueProcessor=new CommonProcessors.UniqueProcessor<SliceUsage>(processor,new TObjectHashingStrategy<SliceUsage>(){
    public int computeHashCode(    final SliceUsage object){
      return object.getUsageInfo().hashCode();
    }
    public boolean equals(    final SliceUsage o1,    final SliceUsage o2){
      return o1.getUsageInfo().equals(o2.getUsageInfo());
    }
  }
);
  if (expression instanceof PsiReferenceExpression) {
    PsiReferenceExpression ref=(PsiReferenceExpression)expression;
    PsiElement resolved=ref.resolve();
    if (!(resolved instanceof PsiVariable))     return true;
    Collection<PsiExpression> expressions=getExpressionsFlownTo(expression,method,(PsiVariable)resolved);
    return processFlownFromExpressions(expressions,uniqueProcessor,parent);
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    return processMethodReturnValue((PsiMethodCallExpression)expression,uniqueProcessor,parent);
  }
  return true;
}
