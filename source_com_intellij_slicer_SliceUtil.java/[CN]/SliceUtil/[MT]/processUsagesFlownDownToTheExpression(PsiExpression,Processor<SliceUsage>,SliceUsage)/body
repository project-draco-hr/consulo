{
  expression=simplify(expression);
  Processor<SliceUsage> uniqueProcessor=new CommonProcessors.UniqueProcessor<SliceUsage>(processor,new TObjectHashingStrategy<SliceUsage>(){
    public int computeHashCode(    final SliceUsage object){
      return object.getUsageInfo().hashCode();
    }
    public boolean equals(    final SliceUsage o1,    final SliceUsage o2){
      return o1.getUsageInfo().equals(o2.getUsageInfo());
    }
  }
);
  if (expression instanceof PsiReferenceExpression) {
    PsiReferenceExpression ref=(PsiReferenceExpression)expression;
    PsiElement resolved=ref.resolve();
    if (resolved instanceof PsiMethod && expression.getParent() instanceof PsiMethodCallExpression) {
      return processUsagesFlownDownToTheExpression((PsiExpression)expression.getParent(),processor,parent);
    }
    if (!(resolved instanceof PsiVariable))     return true;
    final PsiVariable variable=(PsiVariable)resolved;
    final Set<PsiExpression> expressions=new THashSet<PsiExpression>(DfaUtil.getCachedVariableValues(variable,ref));
    PsiExpression initializer=variable.getInitializer();
    if (initializer != null)     expressions.add(initializer);
    if (!handToProcessor(expressions,uniqueProcessor,parent))     return false;
    if (resolved instanceof PsiField) {
      return processFieldUsages((PsiField)resolved,uniqueProcessor,parent);
    }
 else     if (resolved instanceof PsiParameter) {
      return processParameterUsages((PsiParameter)resolved,uniqueProcessor,parent);
    }
  }
  if (expression instanceof PsiMethodCallExpression) {
    return processMethodReturnValue((PsiMethodCallExpression)expression,uniqueProcessor,parent);
  }
  if (expression instanceof PsiConditionalExpression) {
    PsiConditionalExpression conditional=(PsiConditionalExpression)expression;
    PsiExpression thenE=conditional.getThenExpression();
    PsiExpression elseE=conditional.getElseExpression();
    if (thenE != null && !handToProcessor(Collections.singletonList(thenE),uniqueProcessor,parent))     return false;
    if (elseE != null && !handToProcessor(Collections.singletonList(elseE),uniqueProcessor,parent))     return false;
  }
  return true;
}
