{
  final Object object=item.getObject();
  if (object instanceof PsiClass) {
    if (myTypeParameter != null && object.equals(PsiUtil.resolveClassInType(TypeConversionUtil.typeParameterErasure(myTypeParameter)))) {
      return MyResult.exactlyExpected;
    }
  }
  if (myExpectedTypes == null)   return MyResult.normal;
  PsiType itemType=JavaCompletionUtil.getLookupElementType(item);
  if (itemType == null || !itemType.isValid())   return MyResult.normal;
  if (object instanceof PsiClass) {
    for (    final ExpectedTypeInfo info : myExpectedTypes) {
      if (TypeConversionUtil.erasure(info.getType().getDeepComponentType()).equals(TypeConversionUtil.erasure(itemType))) {
        return AbstractExpectedTypeSkipper.skips(item,myLocation) ? MyResult.expectedNoSelect : MyResult.exactlyExpected;
      }
    }
  }
  for (  final ExpectedTypeInfo expectedInfo : myExpectedTypes) {
    final PsiType defaultType=expectedInfo.getDefaultType();
    final PsiType expectedType=expectedInfo.getType();
    if (!expectedType.isValid()) {
      return MyResult.normal;
    }
    if (defaultType != expectedType) {
      if (defaultType.equals(itemType)) {
        return MyResult.exactlyDefault;
      }
      if (defaultType.isAssignableFrom(itemType)) {
        return MyResult.ofDefaultType;
      }
    }
    if (PsiType.VOID.equals(itemType) && PsiType.VOID.equals(expectedType)) {
      return MyResult.exactlyExpected;
    }
  }
  return MyResult.normal;
}
