{
  final List<Chunk<Module>> chunks=ModuleCompilerUtil.getSortedModuleChunks(myProject,Arrays.asList(scope.getAffectedModules()));
  for (  final Chunk<Module> chunk : chunks) {
    final Set<Module> chunkModules=chunk.getNodes();
    if (chunkModules.size() <= 1) {
      continue;
    }
    for (    Module chunkModule : chunkModules) {
      if (myCompilerConfiguration.getAnnotationProcessingConfiguration(chunkModule).isEnabled()) {
        showCyclesNotSupportedForAnnotationProcessors(chunkModules.toArray(new Module[chunkModules.size()]));
        return false;
      }
    }
  }
  final JavacCompiler compiler=getBackEndCompiler();
  final boolean previousValue=compiler.setAnnotationProcessorMode(true);
  try {
    return compiler.checkCompiler(scope);
  }
  finally {
    compiler.setAnnotationProcessorMode(previousValue);
  }
}
