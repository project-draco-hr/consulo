{
  if (!myCompilerConfiguration.isAnnotationProcessorsEnabled()) {
    return;
  }
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final CompileContextEx _context=new CompileContextExProxy((CompileContextEx)context){
    @Override public VirtualFile getModuleOutputDirectory(    Module module){
      final String path=JavaAdditionalOutputDirectoriesProvider.getAnnotationProcessorsGenerationPath(module);
      return path != null ? lfs.findFileByPath(path) : null;
    }
    @Override public VirtualFile getModuleOutputDirectoryForTests(    Module module){
      return getModuleOutputDirectory(module);
    }
  }
;
  final JavacCompiler javacCompiler=getBackEndCompiler();
  final boolean processorMode=javacCompiler.setAnnotationProcessorMode(true);
  final BackendCompilerWrapper wrapper=new BackendCompilerWrapper(this,moduleChunk,myProject,Arrays.asList(files),_context,javacCompiler,sink);
  wrapper.setForceCompileTestsSeparately(true);
  try {
    wrapper.compile();
  }
 catch (  CompilerException e) {
    _context.addMessage(CompilerMessageCategory.ERROR,ExceptionUtil.getThrowableText(e),null,-1,-1);
  }
catch (  CacheCorruptedException e) {
    LOGGER.info(e);
    _context.requestRebuildNextTime(e.getMessage());
  }
 finally {
    javacCompiler.setAnnotationProcessorMode(processorMode);
    final Set<VirtualFile> dirsToRefresh=new HashSet<VirtualFile>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        for (        Module module : moduleChunk.getNodes()) {
          final VirtualFile out=_context.getModuleOutputDirectory(module);
          if (out != null) {
            dirsToRefresh.add(out);
          }
        }
      }
    }
);
    for (    VirtualFile root : dirsToRefresh) {
      root.refresh(false,true);
    }
  }
}
