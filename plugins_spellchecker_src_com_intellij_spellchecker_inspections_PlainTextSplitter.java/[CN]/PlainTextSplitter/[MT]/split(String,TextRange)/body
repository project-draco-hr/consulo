{
  if (text == null || StringUtil.isEmpty(text)) {
    return null;
  }
  List<TextRange> toCheck=excludeByPattern(text,range,COMPLEX,0);
  if (toCheck == null)   return null;
  Matcher matcher;
  List<CheckArea> results=new ArrayList<CheckArea>();
  final WordSplitter ws=SplitterFactory.getInstance().getWordSplitter();
  for (  TextRange r : toCheck) {
    checkCancelled();
    matcher=EXTENDED_WORD_AND_SPECIAL.matcher(text.substring(r.getStartOffset(),r.getEndOffset()));
    while (matcher.find()) {
      TextRange found=matcherRange(r,matcher);
      final List<CheckArea> res=ws.split(text,found);
      if (res != null) {
        results.addAll(res);
      }
    }
  }
  return (results.size() == 0) ? null : results;
}
