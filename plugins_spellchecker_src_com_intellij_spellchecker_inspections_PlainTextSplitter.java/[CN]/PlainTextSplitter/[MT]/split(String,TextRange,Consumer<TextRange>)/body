{
  if (text == null || StringUtil.isEmpty(text)) {
    return;
  }
  String substring=range.substring(text);
  if (Verifier.checkCharacterData(substring) != null) {
    return;
  }
  final TextSplitter ws=TextSplitter.getInstance();
  int from=range.getStartOffset();
  int till;
  Matcher matcher=SPLIT_PATTERN.matcher(range.substring(text));
  while (true) {
    checkCancelled();
    List<TextRange> toCheck;
    TextRange wRange;
    String word;
    if (matcher.find()) {
      TextRange found=matcherRange(range,matcher);
      till=found.getStartOffset();
      if (badSize(from,till)) {
        continue;
      }
      wRange=new TextRange(from,till);
      word=wRange.substring(text);
      from=found.getEndOffset();
    }
 else {
      wRange=new TextRange(from,range.getEndOffset());
      word=wRange.substring(text);
    }
    if (word.contains("@")) {
      toCheck=excludeByPattern(text,wRange,MAIL,0);
    }
 else     if (text.contains("://")) {
      toCheck=excludeByPattern(text,wRange,URL,0);
    }
 else {
      toCheck=Collections.singletonList(wRange);
    }
    for (    TextRange r : toCheck) {
      ws.split(text,r,consumer);
    }
    if (matcher.hitEnd())     break;
  }
}
