{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.RUN.equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  if (parameters.length != 0) {
    return;
  }
  final PsiClass methodClass=method.getContainingClass();
  if (methodClass == null) {
    return;
  }
  if (!ClassUtils.isSubclass(methodClass,"java.lang.Thread")) {
    return;
  }
  if (isInsideThreadRun(expression)) {
    return;
  }
  registerMethodCallError(expression);
}
