{
  PsiVariable variable=null;
  if (element instanceof PsiIdentifier) {
    if (element.getParent() instanceof PsiVariable) {
      variable=(PsiVariable)element.getParent();
    }
  }
 else   if (element instanceof PsiJavaToken) {
    final PsiJavaToken token=(PsiJavaToken)element;
    if (token.getTokenType() != JavaTokenType.EQ)     return null;
    if (token.getParent() instanceof PsiVariable) {
      variable=(PsiVariable)token.getParent();
    }
  }
  if (variable == null) {
    return null;
  }
  variableName=variable.getName();
  final PsiExpression initializer=variable.getInitializer();
  if (initializer == null)   return null;
  final PsiType variableType=variable.getType();
  final PsiType initializerType=initializer.getType();
  if (!(variableType instanceof PsiClassType))   return null;
  final PsiClassType variableClassType=(PsiClassType)variableType;
  if (!variableClassType.isRaw())   return null;
  if (!(initializerType instanceof PsiClassType))   return null;
  final PsiClassType initializerClassType=(PsiClassType)initializerType;
  if (initializerClassType.isRaw())   return null;
  final PsiClassType.ClassResolveResult variableResolveResult=variableClassType.resolveGenerics();
  final PsiClassType.ClassResolveResult initializerResolveResult=initializerClassType.resolveGenerics();
  if (initializerResolveResult.getElement() == null)   return null;
  final PsiSubstitutor targetSubstitutor=TypeConversionUtil.getClassSubstitutor(variableResolveResult.getElement(),initializerResolveResult.getElement(),initializerResolveResult.getSubstitutor());
  if (targetSubstitutor == null)   return null;
  PsiType type=JavaPsiFacade.getInstance(variable.getProject()).getElementFactory().createType(variableResolveResult.getElement(),targetSubstitutor);
  newTypeName=type.getCanonicalText();
  return Pair.create(variable,type);
}
