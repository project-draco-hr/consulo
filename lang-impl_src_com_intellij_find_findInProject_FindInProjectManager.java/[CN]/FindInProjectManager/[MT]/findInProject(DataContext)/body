{
  boolean isOpenInNewTabEnabled;
  final boolean[] toOpenInNewTab=new boolean[1];
  Content selectedContent=UsageViewManager.getInstance(myProject).getSelectedContent(true);
  if (selectedContent != null && selectedContent.isPinned()) {
    toOpenInNewTab[0]=true;
    isOpenInNewTabEnabled=false;
  }
 else {
    toOpenInNewTab[0]=myToOpenInNewTab;
    isOpenInNewTabEnabled=UsageViewManager.getInstance(myProject).getReusableContentsCount() > 0;
  }
  final FindManager findManager=FindManager.getInstance(myProject);
  final FindModel findModel=(FindModel)findManager.getFindInProjectModel().clone();
  findModel.setReplaceState(false);
  findModel.setOpenInNewTabVisible(true);
  findModel.setOpenInNewTabEnabled(isOpenInNewTabEnabled);
  findModel.setOpenInNewTab(toOpenInNewTab[0]);
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  if (editor != null) {
    String s=editor.getSelectionModel().getSelectedText();
    if (s != null && !s.contains("\r") && !s.contains("\n")) {
      findModel.setStringToFind(s);
    }
  }
  if (!findManager.showFindDialog(findModel)) {
    findModel.setOpenInNewTabVisible(false);
    return;
  }
  findModel.setOpenInNewTabVisible(false);
  final PsiDirectory psiDirectory=FindInProjectUtil.getPsiDirectory(findModel,myProject);
  if (findModel.getDirectoryName() != null && psiDirectory == null) {
    return;
  }
  if (isOpenInNewTabEnabled) {
    myToOpenInNewTab=toOpenInNewTab[0]=findModel.isOpenInNewTab();
  }
  com.intellij.usages.UsageViewManager manager=com.intellij.usages.UsageViewManager.getInstance(myProject);
  if (manager == null)   return;
  findManager.getFindInProjectModel().copyFrom(findModel);
  final FindModel findModelCopy=(FindModel)findModel.clone();
  final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(myToOpenInNewTab,findModelCopy);
  final boolean showPanelIfOnlyOneUsage=!FindSettings.getInstance().isSkipResultsWithOneUsage();
  FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,showPanelIfOnlyOneUsage,presentation);
  manager.searchAndShowUsages(new UsageTarget[]{new FindInProjectUtil.StringUsageTarget(findModel.getStringToFind())},new Factory<UsageSearcher>(){
    public UsageSearcher create(){
      return new UsageSearcher(){
        public void generate(        final Processor<Usage> processor){
          myIsFindInProgress=true;
          try {
            FindInProjectUtil.findUsages(findModelCopy,psiDirectory,myProject,new AdapterProcessor<UsageInfo,Usage>(processor,UsageInfo2UsageAdapter.CONVERTER));
          }
  finally {
            myIsFindInProgress=false;
          }
        }
      }
;
    }
  }
,processPresentation,presentation,null);
}
