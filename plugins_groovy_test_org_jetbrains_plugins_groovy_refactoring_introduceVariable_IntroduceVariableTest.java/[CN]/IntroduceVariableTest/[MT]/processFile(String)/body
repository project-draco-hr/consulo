{
  String result="";
  int startOffset=fileText.indexOf(TestUtils.BEGIN_MARKER);
  if (startOffset < 0) {
    startOffset=fileText.indexOf(ALL_MARKER);
    replaceAllOccurences=true;
    fileText=removeAllMarker(fileText);
  }
 else {
    replaceAllOccurences=false;
    fileText=TestUtils.removeBeginMarker(fileText);
  }
  int endOffset=fileText.indexOf(TestUtils.END_MARKER);
  fileText=TestUtils.removeEndMarker(fileText);
  myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  Editor myEditor=myFixture.getEditor();
  myEditor.getSelectionModel().setSelection(startOffset,endOffset);
  GroovyIntroduceVariableBase introduceVariableBase=new GroovyIntroduceVariableHandler();
  GrExpression selectedExpr=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)myFixture.getFile()),startOffset,endOffset,GrExpression.class);
  Assert.assertNotNull("Selected expression reference points to null",selectedExpr);
  final PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
  Assert.assertTrue(tempContainer instanceof GroovyPsiElement);
  PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurrences(GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),tempContainer);
  String varName="preved";
  final PsiType varType=null;
  final GrVariableDeclaration varDecl=GroovyPsiElementFactory.getInstance(getProject()).createVariableDeclaration(new String[0],GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),varType,varName);
  introduceVariableBase.runRefactoring(selectedExpr,myEditor,((GroovyPsiElement)tempContainer),occurences,varName,varType,replaceAllOccurences,varDecl);
  result=myEditor.getDocument().getText();
  int caretOffset=myEditor.getCaretModel().getOffset();
  result=result.substring(0,caretOffset) + TestUtils.CARET_MARKER + result.substring(caretOffset);
  return result;
}
