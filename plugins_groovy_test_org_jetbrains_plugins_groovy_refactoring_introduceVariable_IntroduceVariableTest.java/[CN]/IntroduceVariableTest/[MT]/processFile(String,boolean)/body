{
  String result;
  int startOffset=fileText.indexOf(TestUtils.BEGIN_MARKER);
  if (startOffset < 0) {
    startOffset=fileText.indexOf(ALL_MARKER);
    replaceAllOccurences=true;
    fileText=removeAllMarker(fileText);
  }
 else {
    replaceAllOccurences=false;
    fileText=TestUtils.removeBeginMarker(fileText);
  }
  int endOffset=fileText.indexOf(TestUtils.END_MARKER);
  fileText=TestUtils.removeEndMarker(fileText);
  myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  Editor myEditor=myFixture.getEditor();
  myEditor.getSelectionModel().setSelection(startOffset,endOffset);
  final GrIntroduceVariableHandler introduceVariableHandler=new GrIntroduceVariableHandler();
  GrExpression selectedExpr=GrIntroduceHandlerBase.findExpression(((GroovyFileBase)myFixture.getFile()),startOffset,endOffset);
  assertNotNull("Selected expression reference points to null",selectedExpr);
  final PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
  assertTrue(tempContainer instanceof GroovyPsiElement);
  PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurrences(PsiUtil.skipParentheses(selectedExpr,false),tempContainer);
  final String varName="preved";
  final PsiType varType;
  if (explicitType) {
    varType=selectedExpr.getType();
  }
 else {
    varType=null;
  }
  final GrIntroduceContext context=new GrIntroduceContext(getProject(),myEditor,selectedExpr,null,occurences,tempContainer);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      introduceVariableHandler.runRefactoring(context,new GroovyIntroduceVariableSettings(){
        @Override public boolean isDeclareFinal(){
          return false;
        }
        @Nullable @Override public PsiType getSelectedType(){
          return varType;
        }
        @Override public String getName(){
          return varName;
        }
        @Override public boolean replaceAllOccurrences(){
          return replaceAllOccurences;
        }
      }
);
      PostprocessReformattingAspect.getInstance(getProject()).doPostponedFormatting();
    }
  }
);
  result=myEditor.getDocument().getText();
  int caretOffset=myEditor.getCaretModel().getOffset();
  result=result.substring(0,caretOffset) + TestUtils.CARET_MARKER + result.substring(caretOffset);
  return result;
}
