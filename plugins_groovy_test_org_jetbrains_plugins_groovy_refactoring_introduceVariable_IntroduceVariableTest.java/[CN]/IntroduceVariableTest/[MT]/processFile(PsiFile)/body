{
  String result="";
  String fileText=file.getText();
  int startOffset=fileText.indexOf(TestUtils.BEGIN_MARKER);
  if (startOffset < 0) {
    startOffset=fileText.indexOf(ALL_MARKER);
    replaceAllOccurences=true;
    fileText=removeAllMarker(fileText);
  }
 else {
    replaceAllOccurences=false;
    fileText=TestUtils.removeBeginMarker(fileText,myOffset);
  }
  int endOffset=fileText.indexOf(TestUtils.END_MARKER);
  fileText=TestUtils.removeEndMarker(fileText,myOffset);
  myFile=TestUtils.createPseudoPhysicalFile(myProject,fileText);
  fileEditorManager=FileEditorManager.getInstance(myProject);
  myEditor=fileEditorManager.openTextEditor(new OpenFileDescriptor(myProject,myFile.getVirtualFile(),0),false);
  try {
    myEditor.getSelectionModel().setSelection(startOffset,endOffset);
    GroovyIntroduceVariableBase introduceVariableBase=new GroovyIntroduceVariableHandler();
    Assert.assertTrue(myFile instanceof GroovyFileBase);
    GrExpression selectedExpr=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)myFile),startOffset,endOffset,GrExpression.class);
    Assert.assertNotNull("Selected expression reference points to null",selectedExpr);
    final PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
    Assert.assertTrue(tempContainer instanceof GroovyPsiElement);
    PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurrences(GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),tempContainer);
    String varName="preved";
    final PsiType varType=null;
    final GrVariableDeclaration varDecl=GroovyPsiElementFactory.getInstance(myProject).createVariableDeclaration(new String[0],varName,GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),varType,false);
    introduceVariableBase.runRefactoring(selectedExpr,myEditor,((GroovyPsiElement)tempContainer),occurences,varName,varType,replaceAllOccurences,varDecl);
    result=myEditor.getDocument().getText();
    int caretOffset=myEditor.getCaretModel().getOffset();
    result=result.substring(0,caretOffset) + TestUtils.CARET_MARKER + result.substring(caretOffset);
  }
  finally {
    fileEditorManager.closeFile(myFile.getVirtualFile());
    myEditor=null;
  }
  return result;
}
