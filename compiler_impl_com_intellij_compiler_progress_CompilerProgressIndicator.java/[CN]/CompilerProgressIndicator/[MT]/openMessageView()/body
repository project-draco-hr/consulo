{
  if (IS_UNIT_TEST_MODE) {
    return;
  }
  if (isCanceled()) {
    return;
  }
synchronized (myMessageViewLock) {
    if (myErrorTreeView != null) {
      return;
    }
    myErrorTreeView=new CompilerErrorTreeView(myProject);
    myErrorTreeView.setProcessController(new NewErrorTreeViewPanel.ProcessController(){
      public void stopProcess(){
        cancel();
      }
      public boolean isProcessStopped(){
        return !isRunning();
      }
    }
);
  }
  final Window window=getWindow();
  final ModalityState modalityState=window != null ? ModalityState.stateForComponent(window) : ModalityState.NON_MMODAL;
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      final MessageView messageView=myProject.getComponent(MessageView.class);
      final JComponent component;
synchronized (myMessageViewLock) {
        component=myErrorTreeView.getComponent();
      }
      final Content content=PeerFactory.getInstance().getContentFactory().createContent(component,myContentName,true);
      content.putUserData(CONTENT_ID_KEY,myContentId);
      messageView.addContent(content);
      new CloseListener(content,messageView);
      removeAllContents(myProject,content);
      messageView.setSelectedContent(content);
      ToolWindow toolWindow=ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW);
      if (toolWindow != null) {
        if (CompilerWorkspaceConfiguration.getInstance(myProject).COMPILE_IN_BACKGROUND) {
          toolWindow.activate(null);
        }
 else {
          toolWindow.show(null);
        }
      }
      updateProgressText();
    }
  }
,modalityState);
}
