{
  if (!asynchronous) {
    ApplicationManager.getApplication().assertWriteAccessAllowed();
  }
  if (!isValid())   return;
  if (LOG.isDebugEnabled()) {
    LOG.debug("refreshInternal recursive = " + recursive + " asynchronous = "+ asynchronous+ " file = "+ getName());
  }
  PhysicalFile physicalFile=getPhysicalFile();
  final boolean isDirectory=physicalFile.isDirectory();
  if (isDirectory != myDirectoryFlag) {
    final PhysicalFile _physicalFile=physicalFile;
    ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
      public void run(){
        if (!isValid())         return;
        VirtualFileImpl parent=(VirtualFileImpl)getParent();
        if (parent == null)         return;
        ourFileSystem.fireBeforeFileDeletion(null,VirtualFileImpl.this);
        parent.removeChild(VirtualFileImpl.this);
        ourFileSystem.fireFileDeleted(null,VirtualFileImpl.this,getName(),myDirectoryFlag,parent);
        VirtualFileImpl newChild=new VirtualFileImpl(parent,_physicalFile,isDirectory);
        parent.addChild(newChild);
        ourFileSystem.fireFileCreated(null,newChild);
      }
    }
,asynchronous,modalityState);
    return;
  }
  if (isDirectory) {
    if (myChildren == null)     return;
    PhysicalFile[] files=physicalFile.listFiles();
    final boolean[] found=new boolean[myChildren.length];
    VirtualFileImpl[] children=myChildren;
    for (int i=0; i < files.length; i++) {
      final PhysicalFile file=files[i];
      final String name=file.getName();
      int index=-1;
      if (i < children.length && children[i].getName().equals(name)) {
        index=i;
      }
 else {
        for (int j=0; j < children.length; j++) {
          VirtualFileImpl child=myChildren[j];
          if (child.getName().equals(name))           index=j;
        }
      }
      if (index < 0) {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (VirtualFileImpl.this.isValid()) {
              if (findChild(file.getName()) != null)               return;
              VirtualFileImpl newChild=new VirtualFileImpl(VirtualFileImpl.this,file,file.isDirectory());
              addChild(newChild);
              ourFileSystem.fireFileCreated(null,newChild);
            }
          }
        }
,asynchronous,modalityState);
      }
 else {
        found[index]=true;
      }
    }
    for (int i=0; i < children.length; i++) {
      final VirtualFileImpl child=children[i];
      if (found[i]) {
        if (recursive) {
          child.refreshInternal(recursive,modalityState,false,asynchronous);
        }
      }
 else {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (child.isValid()) {
              ourFileSystem.fireBeforeFileDeletion(null,child);
              removeChild(child);
              ourFileSystem.fireFileDeleted(null,child,child.getName(),child.myDirectoryFlag,VirtualFileImpl.this);
            }
          }
        }
,asynchronous,modalityState);
      }
    }
  }
 else {
    if (myTimeStamp > 0) {
      final long timeStamp=physicalFile.lastModified();
      if (timeStamp != myTimeStamp || forceRefresh) {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (!isValid())             return;
            ourFileSystem.fireBeforeContentsChange(null,VirtualFileImpl.this);
            long oldModificationStamp=getModificationStamp();
            myTimeStamp=timeStamp;
            myModificationStamp=LocalTimeCounter.currentTime();
            ourFileSystem.fireContentsChanged(null,VirtualFileImpl.this,oldModificationStamp);
          }
        }
,asynchronous,modalityState);
      }
    }
  }
  if (myWritableFlag != null) {
    final boolean isWritable=isWritable(physicalFile,isDirectory());
    if (isWritable != myWritableFlag.booleanValue()) {
      ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
        public void run(){
          if (!isValid())           return;
          ourFileSystem.fireBeforePropertyChange(null,VirtualFileImpl.this,PROP_WRITABLE,myWritableFlag,isWritable ? Boolean.TRUE : Boolean.FALSE);
          myWritableFlag=isWritable ? Boolean.TRUE : Boolean.FALSE;
          ourFileSystem.firePropertyChanged(null,VirtualFileImpl.this,PROP_WRITABLE,isWritable ? Boolean.FALSE : Boolean.TRUE,myWritableFlag);
        }
      }
,asynchronous,modalityState);
    }
  }
}
