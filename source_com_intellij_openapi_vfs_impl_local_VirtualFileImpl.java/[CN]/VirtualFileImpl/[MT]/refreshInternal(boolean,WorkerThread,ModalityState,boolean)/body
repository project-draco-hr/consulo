{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  if (LOG.isDebugEnabled()) {
    LOG.debug("refreshInternal recursive = " + recursive + " worker = "+ worker+ " "+ myName);
  }
  PhysicalFile physicalFile=getPhysicalFile();
  final boolean isDirectory=physicalFile.isDirectory();
  if (isDirectory != myDirectoryFlag) {
    final PhysicalFile _physicalFile=physicalFile;
    myFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
      public void run(){
        if (!isValid())         return;
        VirtualFileImpl parent=(VirtualFileImpl)getParent();
        if (parent == null)         return;
        myFileSystem.fireBeforeFileDeletion(null,VirtualFileImpl.this);
        parent.removeChild(VirtualFileImpl.this);
        myFileSystem.fireFileDeleted(null,VirtualFileImpl.this,myName,myDirectoryFlag,parent);
        VirtualFileImpl newChild=new VirtualFileImpl(myFileSystem,parent,_physicalFile,isDirectory);
        parent.addChild(newChild);
        myFileSystem.fireFileCreated(null,newChild);
      }
    }
);
    return;
  }
  if (isDirectory) {
    if (myChildren == null)     return;
    final Map<String,VirtualFileImpl> childrenMap=new HashMap<String,VirtualFileImpl>(myChildren.length,(float)0.6);
    for (    final VirtualFileImpl child : myChildren) {
      childrenMap.put(child.getName(),child);
    }
    PhysicalFile[] files=physicalFile.listFiles();
    for (    final PhysicalFile file : files) {
      final String name=file.getName();
      final VirtualFileImpl vFile=childrenMap.get(name);
      if (vFile == null) {
        myFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (VirtualFileImpl.this.isValid()) {
              if (findChild(file.getName()) != null)               return;
              final VirtualFileImpl newFile=new VirtualFileImpl(myFileSystem,VirtualFileImpl.this,file,file.isDirectory());
              addChild(newFile);
              myFileSystem.fireFileCreated(null,newFile);
            }
          }
        }
);
      }
 else {
        if (recursive) {
          if (worker != null) {
            worker.addTask(new Runnable(){
              public void run(){
                Runnable action=new Runnable(){
                  public void run(){
                    vFile.refreshInternal(recursive,worker,modalityState,false);
                  }
                }
;
                ApplicationManager.getApplication().runReadAction(action);
              }
            }
);
          }
 else {
            vFile.refreshInternal(recursive,null,modalityState,false);
          }
        }
      }
      childrenMap.remove(name);
    }
    myFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
      public void run(){
        for (        VirtualFileImpl toRemove : childrenMap.values()) {
          if (toRemove.isValid()) {
            myFileSystem.fireBeforeFileDeletion(null,toRemove);
            removeChild(toRemove);
            myFileSystem.fireFileDeleted(null,toRemove,toRemove.myName,toRemove.myDirectoryFlag,VirtualFileImpl.this);
          }
        }
      }
    }
);
  }
 else {
    if (myTimeStamp > 0) {
      final long timeStamp=physicalFile.lastModified();
      if (timeStamp != myTimeStamp || forceRefresh) {
        myFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (!isValid())             return;
            myFileSystem.fireBeforeContentsChange(null,VirtualFileImpl.this);
            long oldModificationStamp=getModificationStamp();
            myTimeStamp=timeStamp;
            myModificationStamp=LocalTimeCounter.currentTime();
            myFileSystem.fireContentsChanged(null,VirtualFileImpl.this,oldModificationStamp);
          }
        }
);
      }
    }
  }
  if (myWritableFlag != null) {
    final boolean isWritable=isWritable(physicalFile,isDirectory());
    if (isWritable != myWritableFlag.booleanValue()) {
      myFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
        public void run(){
          if (!isValid())           return;
          myFileSystem.fireBeforePropertyChange(null,VirtualFileImpl.this,PROP_WRITABLE,myWritableFlag,isWritable ? Boolean.TRUE : Boolean.FALSE);
          myWritableFlag=isWritable ? Boolean.TRUE : Boolean.FALSE;
          myFileSystem.firePropertyChanged(null,VirtualFileImpl.this,PROP_WRITABLE,isWritable ? Boolean.FALSE : Boolean.TRUE,myWritableFlag);
        }
      }
);
    }
  }
}
