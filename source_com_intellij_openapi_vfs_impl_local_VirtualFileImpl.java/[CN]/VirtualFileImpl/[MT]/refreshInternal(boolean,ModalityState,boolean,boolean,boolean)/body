{
  if (!asynchronous) {
    ApplicationManager.getApplication().assertWriteAccessAllowed();
  }
  if (!isValid())   return;
  if (LOG.isDebugEnabled()) {
    LOG.debug("refreshInternal recursive = " + recursive + " asynchronous = "+ asynchronous+ " file = "+ myName);
  }
  final File physicalFile=getPhysicalFile();
  File[] childFiles=null;
  final boolean isDirectory;
  if (myChildren == null) {
    isDirectory=physicalFile.isDirectory();
  }
 else {
    childFiles=physicalFile.listFiles();
    isDirectory=childFiles != null;
  }
  final boolean oldIsDirectory=isDirectory();
  if (isDirectory != oldIsDirectory) {
    ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
      public void run(){
        if (!isValid())         return;
        VirtualFileImpl parent=getParent();
        if (parent == null)         return;
        ourFileSystem.fireBeforeFileDeletion(null,VirtualFileImpl.this);
        parent.removeChild(VirtualFileImpl.this);
        ourFileSystem.fireFileDeleted(null,VirtualFileImpl.this,myName,parent);
        VirtualFileImpl newChild=new VirtualFileImpl(parent,physicalFile,isDirectory);
        parent.addChild(newChild);
        ourFileSystem.fireFileCreated(null,newChild);
      }
    }
,asynchronous,modalityState);
    return;
  }
  if (isDirectory) {
    if (myChildren == null)     return;
    final int[] newIndices=new int[myChildren.length];
    for (int i=0; i < newIndices.length; i++)     newIndices[i]=-1;
    VirtualFileImpl[] children=myChildren;
    for (int i=0; i < childFiles.length; i++) {
      final File file=childFiles[i];
      final String name=file.getName();
      int index=-1;
      if (i < children.length && children[i].nameEquals(name)) {
        index=i;
      }
 else {
        for (int j=0; j < children.length; j++) {
          VirtualFileImpl child=myChildren[j];
          if (child.nameEquals(name))           index=j;
        }
      }
      if (index < 0) {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (isValid()) {
              if (findChild(file.getName()) != null)               return;
              VirtualFileImpl newChild=new VirtualFileImpl(VirtualFileImpl.this,file,file.isDirectory());
              addChild(newChild);
              ourFileSystem.fireFileCreated(null,newChild);
            }
          }
        }
,asynchronous,modalityState);
      }
 else {
        newIndices[index]=i;
      }
    }
    for (int i=0; i < children.length; i++) {
      final VirtualFileImpl child=children[i];
      final int newIndex=newIndices[i];
      if (newIndex >= 0) {
        final String oldName=child.getName();
        final String newName=childFiles[newIndex].getName();
        if (!oldName.equals(newName)) {
          ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
            public void run(){
              if (child.isValid()) {
                ourFileSystem.fireBeforePropertyChange(null,child,VirtualFile.PROP_NAME,oldName,newName);
                child.setName(newName);
                ourFileSystem.firePropertyChanged(null,child,VirtualFile.PROP_NAME,oldName,newName);
              }
            }
          }
,asynchronous,modalityState);
        }
        if (recursive) {
          ourFileSystem.refreshInner(child,true,modalityState,asynchronous,noWatcher);
        }
      }
 else {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (child.isValid()) {
              ourFileSystem.fireBeforeFileDeletion(null,child);
              removeChild(child);
              ourFileSystem.fireFileDeleted(null,child,child.myName,VirtualFileImpl.this);
            }
          }
        }
,asynchronous,modalityState);
      }
    }
  }
 else {
    if (myTimeStamp > 0) {
      final long timeStamp=physicalFile.lastModified();
      if (timeStamp != myTimeStamp || forceRefresh) {
        ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
          public void run(){
            if (!forceRefresh && (timeStamp == myTimeStamp || !isValid()))             return;
            ourFileSystem.fireBeforeContentsChange(null,VirtualFileImpl.this);
            long oldModificationStamp=getModificationStamp();
            myTimeStamp=timeStamp;
            myModificationStamp=LocalTimeCounter.currentTime();
            ourFileSystem.fireContentsChanged(null,VirtualFileImpl.this,oldModificationStamp);
          }
        }
,asynchronous,modalityState);
      }
    }
  }
  if (isWritableInitialized()) {
    final boolean isWritable=physicalFile.canWrite();
    final boolean oldWritable=isWritableCached();
    if (isWritable != oldWritable) {
      ourFileSystem.getManager().addEventToFireByRefresh(new Runnable(){
        public void run(){
          if (!isValid())           return;
          ourFileSystem.fireBeforePropertyChange(null,VirtualFileImpl.this,PROP_WRITABLE,oldWritable,isWritable);
          cacheIsWritable(isWritable);
          ourFileSystem.firePropertyChanged(null,VirtualFileImpl.this,PROP_WRITABLE,isWritable,oldWritable);
        }
      }
,asynchronous,modalityState);
    }
  }
}
