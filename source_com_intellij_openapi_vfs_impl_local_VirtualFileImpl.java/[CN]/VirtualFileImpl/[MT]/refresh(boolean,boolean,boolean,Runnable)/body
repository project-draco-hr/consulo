{
  if (!asynchronous) {
    ApplicationManager.getApplication().assertWriteAccessAllowed();
  }
  final ModalityState modalityState=VirtualFileManagerImpl.calcModalityStateForRefreshEventsPosting(asynchronous);
  if (LOG.isDebugEnabled()) {
    LOG.debug("VirtualFile.refresh():" + getPresentableUrl() + ", recursive = "+ recursive+ ", modalityState = "+ modalityState);
  }
  final Runnable runnable=new Runnable(){
    public void run(){
      ourFileSystem.getManager().beforeRefreshStart(asynchronous,modalityState,postRunnable);
      File physicalFile=getPhysicalFile();
      if (!physicalFile.exists()) {
        Runnable runnable=new Runnable(){
          public void run(){
            if (!isValid())             return;
            VirtualFileImpl parent=getParent();
            if (parent != null) {
              ourFileSystem.fireBeforeFileDeletion(null,VirtualFileImpl.this);
              parent.removeChild(VirtualFileImpl.this);
              ourFileSystem.fireFileDeleted(null,VirtualFileImpl.this,myName,parent);
            }
          }
        }
;
        ourFileSystem.getManager().addEventToFireByRefresh(runnable,asynchronous,modalityState);
      }
 else {
        ourFileSystem.refresh(VirtualFileImpl.this,recursive,true,modalityState,asynchronous,noFileWatcher);
      }
      ourFileSystem.getManager().afterRefreshFinish(asynchronous,modalityState);
    }
  }
;
  if (asynchronous) {
    Runnable runnable1=new Runnable(){
      public void run(){
        if (LOG.isDebugEnabled()) {
          LOG.debug("Executing request:" + this);
        }
        runnable.run();
      }
    }
;
    ourFileSystem.submitAsynchronousTask(runnable1);
  }
 else {
    runnable.run();
  }
}
