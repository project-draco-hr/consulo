{
  final boolean makeStatic=myInnerMethod != null && RefactoringUtil.isInStaticContext(match.getMatchStart(),getExtractedMethod().getContainingClass()) && !myInnerMethod.getContainingClass().hasModifierProperty(PsiModifier.STATIC);
  final PsiElement element=super.processMatch(match);
  if (makeStatic) {
    myMadeStatic=true;
    final PsiModifierList modifierList=myInnerMethod.getContainingClass().getModifierList();
    LOG.assertTrue(modifierList != null);
    modifierList.setModifierProperty(PsiModifier.STATIC,true);
    PsiUtil.setModifierProperty(myInnerMethod,PsiModifier.STATIC,true);
  }
  PsiMethodCallExpression methodCallExpression=null;
  if (element instanceof PsiMethodCallExpression) {
    methodCallExpression=(PsiMethodCallExpression)element;
  }
 else   if (element instanceof PsiExpressionStatement) {
    final PsiExpression expression=((PsiExpressionStatement)element).getExpression();
    if (expression instanceof PsiMethodCallExpression) {
      methodCallExpression=(PsiMethodCallExpression)expression;
    }
 else     if (expression instanceof PsiAssignmentExpression) {
      final PsiExpression psiExpression=((PsiAssignmentExpression)expression).getRExpression();
      if (psiExpression instanceof PsiMethodCallExpression) {
        methodCallExpression=(PsiMethodCallExpression)psiExpression;
      }
    }
  }
 else   if (element instanceof PsiDeclarationStatement) {
    final PsiElement[] declaredElements=((PsiDeclarationStatement)element).getDeclaredElements();
    for (    PsiElement declaredElement : declaredElements) {
      if (declaredElement instanceof PsiLocalVariable) {
        final PsiExpression initializer=((PsiLocalVariable)declaredElement).getInitializer();
        if (initializer instanceof PsiMethodCallExpression) {
          methodCallExpression=(PsiMethodCallExpression)initializer;
          break;
        }
      }
    }
  }
  if (methodCallExpression == null)   return element;
  PsiExpression expression=processMethodDeclaration(methodCallExpression.getArgumentList());
  return methodCallExpression.replace(expression);
}
