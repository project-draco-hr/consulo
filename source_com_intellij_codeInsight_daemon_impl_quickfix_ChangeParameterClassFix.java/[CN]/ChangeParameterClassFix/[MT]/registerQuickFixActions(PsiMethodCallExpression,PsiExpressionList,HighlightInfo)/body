{
  final PsiMethod method=(PsiMethod)methodCall.getMethodExpression().resolve();
  final PsiExpression[] expressions=list.getExpressions();
  if (method == null || method.getParameterList() == null || method.getParameterList().getParameters().length != expressions.length)   return;
  for (int i=0; i < expressions.length; i++) {
    PsiExpression expression=expressions[i];
    final PsiParameter parameter=method.getParameterList().getParameters()[i];
    final PsiType expressionType=expression.getType();
    final PsiType parameterType=parameter.getType();
    if (expressionType == null || expressionType instanceof PsiPrimitiveType || TypeConversionUtil.isNullType(expressionType) || expressionType instanceof PsiArrayType)     continue;
    if (parameterType == null || parameterType instanceof PsiPrimitiveType || TypeConversionUtil.isNullType(parameterType) || parameterType instanceof PsiArrayType)     continue;
    if (parameterType.isAssignableFrom(expressionType))     continue;
    final PsiClass parameterClass=PsiUtil.resolveClassInType(parameterType);
    final PsiClass expressionClass=PsiUtil.resolveClassInType(expressionType);
    if (parameterClass == null || expressionClass == null)     continue;
    if (parameterClass.isInheritor(expressionClass,true))     continue;
    QuickFixAction.registerQuickFixAction(highlightInfo,new ChangeParameterClassFix(expressionClass,(PsiClassType)parameterType));
  }
}
