{
  boolean hasAnnotation=AnnotationUtil.isAnnotated(element,TEST_ANNOTATION_FQN,true,true);
  if (hasAnnotation) {
    if (checkDisabled) {
      PsiAnnotation annotation=AnnotationUtil.findAnnotation(element,true,TEST_ANNOTATION_FQN);
      if (annotation != null) {
        PsiNameValuePair[] attribs=annotation.getParameterList().getAttributes();
        for (        PsiNameValuePair attrib : attribs) {
          final String attribName=attrib.getName();
          final PsiAnnotationMemberValue attribValue=attrib.getValue();
          if (Comparing.strEqual(attribName,"enabled") && attribValue != null && attribValue.textMatches("false"))           return false;
        }
      }
    }
    return true;
  }
  if (element instanceof PsiDocCommentOwner && hasTestJavaDoc((PsiDocCommentOwner)element,checkJavadoc))   return true;
  if (element instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)element;
    for (    PsiMethod method : psiClass.getAllMethods()) {
      if (AnnotationUtil.isAnnotated(method,TEST_ANNOTATION_FQN,false,true))       return true;
      if (hasTestJavaDoc(method,checkJavadoc))       return true;
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiClass psiClass=((PsiMethod)element).getContainingClass();
    if (psiClass != null) {
      if (AnnotationUtil.isAnnotated(psiClass,TEST_ANNOTATION_FQN,true,true)) {
        boolean isPrivate=element.hasModifierProperty(PsiModifier.PRIVATE);
        return !isPrivate;
      }
      if (hasTestJavaDoc(psiClass,checkJavadoc))       return true;
    }
  }
  return false;
}
