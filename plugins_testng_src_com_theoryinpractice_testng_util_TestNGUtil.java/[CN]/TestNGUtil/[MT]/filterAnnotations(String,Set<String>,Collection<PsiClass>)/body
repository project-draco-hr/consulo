{
  Map<PsiClass,Collection<PsiMethod>> results=new HashMap<PsiClass,Collection<PsiMethod>>();
  Set<String> test=new HashSet<String>(1);
  test.add(TEST_ANNOTATION_FQN);
  test.addAll(Arrays.asList(CONFIG_ANNOTATIONS_FQN));
  for (  PsiClass psiClass : classes) {
    if (isBrokenPsiClass(psiClass))     continue;
    PsiAnnotation annotation;
    try {
      annotation=AnnotationUtil.findAnnotation(psiClass,test);
    }
 catch (    Exception e) {
      LOGGER.error("Exception trying to findAnnotation on " + psiClass.getClass().getName() + ".\n\n"+ e.getMessage());
      annotation=null;
    }
    if (annotation != null) {
      if (isAnnotatedWithParameter(annotation,parameter,values)) {
        results.put(psiClass,new LinkedHashSet<PsiMethod>());
      }
    }
 else {
      Collection<String> matches=extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass),parameter);
      for (      String s : matches) {
        if (values.contains(s)) {
          results.put(psiClass,new LinkedHashSet<PsiMethod>());
          break;
        }
      }
    }
    PsiMethod[] methods=psiClass.getMethods();
    for (    PsiMethod method : methods) {
      if (method != null) {
        annotation=AnnotationUtil.findAnnotation(method,test);
        if (annotation != null) {
          if (isAnnotatedWithParameter(annotation,parameter,values)) {
            if (results.get(psiClass) == null)             results.put(psiClass,new LinkedHashSet<PsiMethod>());
            results.get(psiClass).add(method);
          }
        }
 else {
          Collection<String> matches=extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass),parameter);
          for (          String s : matches) {
            if (values.contains(s)) {
              results.get(psiClass).add(method);
            }
          }
        }
      }
    }
  }
  return results;
}
