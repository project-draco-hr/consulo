{
  boolean hasAnnotation=AnnotationUtil.isAnnotated(element,TEST_ANNOTATION_FQN,false);
  if (hasAnnotation) {
    PsiAnnotation annotation=AnnotationUtil.findAnnotation(element,TEST_ANNOTATION_FQN);
    PsiNameValuePair[] attribs=annotation.getParameterList().getAttributes();
    for (    PsiNameValuePair attrib : attribs) {
      if (attrib.getName().equals("enabled") && attrib.getValue().textMatches("false"))       return false;
    }
    return true;
  }
  if (hasTestJavaDoc(element))   return true;
  if (element instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)element;
    for (    PsiMethod method : psiClass.getAllMethods()) {
      if (AnnotationUtil.isAnnotated(method,TEST_ANNOTATION_FQN,false))       return true;
      if (hasTestJavaDoc(method))       return true;
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiClass psiClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
    if (AnnotationUtil.isAnnotated(psiClass,TEST_ANNOTATION_FQN,false)) {
      boolean isPrivate=element.getModifierList().hasModifierProperty(PsiModifier.PRIVATE);
      return !isPrivate;
    }
    if (hasTestJavaDoc(psiClass))     return true;
  }
  return false;
}
