{
  LOG.assertTrue(BufferedImage.TYPE_INT_ARGB == src.getType() || BufferedImage.TYPE_4BYTE_ABGR == src.getType());
  int bitCount=32;
  BinaryOutputStream bos=new BinaryOutputStream(os,BinaryConstants.BYTE_ORDER_INTEL);
  try {
    int scanline_size=(bitCount * src.getWidth() + 7) / 8;
    if ((scanline_size % 4) != 0)     scanline_size+=4 - (scanline_size % 4);
    int t_scanline_size=(src.getWidth() + 7) / 8;
    if ((t_scanline_size % 4) != 0)     t_scanline_size+=4 - (t_scanline_size % 4);
    int imageSize=40 + src.getHeight() * scanline_size + src.getHeight() * t_scanline_size;
    bos.write2Bytes(0);
    bos.write2Bytes(1);
    bos.write2Bytes(1);
    int iconDirEntryWidth=src.getWidth();
    int iconDirEntryHeight=src.getHeight();
    if (iconDirEntryWidth > 255 || iconDirEntryHeight > 255) {
      iconDirEntryWidth=0;
      iconDirEntryHeight=0;
    }
    bos.write(iconDirEntryWidth);
    bos.write(iconDirEntryHeight);
    bos.write(0);
    bos.write(0);
    bos.write2Bytes(1);
    bos.write2Bytes(bitCount);
    bos.write4Bytes(imageSize);
    bos.write4Bytes(22);
    bos.write4Bytes(40);
    bos.write4Bytes(src.getWidth());
    bos.write4Bytes(2 * src.getHeight());
    bos.write2Bytes(1);
    bos.write2Bytes(bitCount);
    bos.write4Bytes(0);
    bos.write4Bytes(0);
    bos.write4Bytes(0);
    bos.write4Bytes(0);
    bos.write4Bytes(0);
    bos.write4Bytes(0);
    int bit_cache=0;
    int bits_in_cache=0;
    int row_padding=scanline_size - (bitCount * src.getWidth() + 7) / 8;
    for (int y=src.getHeight() - 1; y >= 0; y--) {
      for (int x=0; x < src.getWidth(); x++) {
        int argb=src.getRGB(x,y);
        bos.write(0xff & argb);
        bos.write(0xff & (argb >> 8));
        bos.write(0xff & (argb >> 16));
        bos.write(0xff & (argb >> 24));
      }
      for (int x=0; x < row_padding; x++) {
        bos.write(0);
      }
    }
    int t_row_padding=t_scanline_size - (src.getWidth() + 7) / 8;
    for (int y=src.getHeight() - 1; y >= 0; y--) {
      for (int x=0; x < src.getWidth(); x++) {
        int argb=src.getRGB(x,y);
        int alpha=0xff & (argb >> 24);
        bit_cache<<=1;
        if (alpha == 0)         bit_cache|=1;
        bits_in_cache++;
        if (bits_in_cache >= 8) {
          bos.write(0xff & bit_cache);
          bit_cache=0;
          bits_in_cache=0;
        }
      }
      if (bits_in_cache > 0) {
        bit_cache<<=(8 - bits_in_cache);
        bos.write(0xff & bit_cache);
        bit_cache=0;
        bits_in_cache=0;
      }
      for (int x=0; x < t_row_padding; x++) {
        bos.write(0);
      }
    }
  }
  finally {
    try {
      bos.close();
    }
 catch (    IOException ignored) {
    }
  }
}
