{
  final int actualNumber=getActualLineNumber();
  if (actualNumber < 0)   return;
  final VcsRevisionNumber revisionNumber=myFileAnnotation.getLineRevisionNumber(actualNumber);
  if (revisionNumber != null) {
    final VcsException[] exc=new VcsException[1];
    final List<Change> changes=new LinkedList<Change>();
    final FilePath[] targetPath=new FilePath[1];
    ProgressManager.getInstance().run(new Task.Backgroundable(myVcs.getProject(),"Loading revision " + revisionNumber.asString() + " contents",true,BackgroundFromStartOption.getInstance()){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        final CommittedChangesProvider provider=myVcs.getCommittedChangesProvider();
        try {
          final Pair<CommittedChangeList,FilePath> pair=provider.getOneList(myFile,revisionNumber);
          if (pair == null || pair.getFirst() == null) {
            VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),"Can not load data for show diff",MessageType.ERROR);
            return;
          }
          targetPath[0]=pair.getSecond() == null ? VcsUtil.getFilePath(myFile) : pair.getSecond();
          final CommittedChangeList cl=pair.getFirst();
          changes.addAll(cl.getChanges());
          Collections.sort(changes,ChangesComparator.getInstance(true));
        }
 catch (        VcsException e1) {
          exc[0]=e1;
        }
      }
      @RequiredDispatchThread @Override public void onSuccess(){
        if (exc[0] != null) {
          VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),"Can not show diff: " + exc[0].getMessage(),MessageType.ERROR);
        }
 else         if (!changes.isEmpty()) {
          int idx=findSelfInList(changes,targetPath[0]);
          final ShowDiffContext context=new ShowDiffContext(DiffDialogHints.FRAME);
          if (idx != -1) {
            context.putChangeContext(changes.get(idx),DiffUserDataKeysEx.NAVIGATION_CONTEXT,createDiffNavigationContext(actualNumber));
          }
          if (ChangeListManager.getInstance(myVcs.getProject()).isFreezedWithNotification(null))           return;
          ShowDiffAction.showDiffForChange(myVcs.getProject(),changes,idx,context);
        }
      }
    }
);
  }
}
