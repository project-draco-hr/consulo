{
  if (elements.length != 1 || !(elements[0] instanceof PsiTypeParameterListOwner))   return;
  final PsiTypeParameterListOwner member=(PsiTypeParameterListOwner)elements[0];
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,member))   return;
  final PsiClass containingClass;
  if (member instanceof PsiMethod && ((PsiMethod)member).isConstructor()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("constructor.cannot.be.made.static"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MAKE_METHOD_STATIC,project);
    return;
  }
  if (member.getContainingClass() == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("this.member.does.not.seem.to.belong.to.any.class"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MAKE_METHOD_STATIC,project);
    return;
  }
  containingClass=member.getContainingClass();
  if (member.hasModifierProperty(PsiModifier.STATIC)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("member.is.already.static"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MAKE_METHOD_STATIC,project);
    return;
  }
  if (member.hasModifierProperty(PsiModifier.ABSTRACT)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("cannot.make.abstract.method.static"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MAKE_METHOD_STATIC,project);
    return;
  }
  if (containingClass.getContainingClass() != null && !containingClass.hasModifierProperty(PsiModifier.STATIC)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("inner.classes.cannot.have.static.members"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.MAKE_METHOD_STATIC,project);
    return;
  }
  final InternalUsageInfo[] classRefsInMember=MakeStaticUtil.findClassRefsInMember(member,false);
  AbstractMakeStaticDialog dialog;
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    if (classRefsInMember.length > 0) {
      final PsiType type=containingClass.getManager().getElementFactory().createType(containingClass);
      String[] nameSuggestions=CodeStyleManager.getInstance(project).suggestVariableName(VariableKind.PARAMETER,null,null,type).names;
      dialog=new MakeParameterizedStaticDialog(project,member,nameSuggestions,classRefsInMember);
    }
 else {
      dialog=new SimpleMakeStaticDialog(project,member);
    }
    dialog.show();
    return;
  }
}
