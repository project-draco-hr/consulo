{
  final Cache newCache=myCompileContext.getDependencyCache().getNewClassesCache();
  final Set<CompiledClass> paths=myFileNameToSourceMap.get(srcFile.getName());
  if (paths == null || paths.isEmpty()) {
    return;
  }
  final String prefix=packagePrefix != null && packagePrefix.length() > 0 ? packagePrefix.replace('.','/') + "/" : "";
  final String filePath="/" + prefix + VfsUtil.getRelativePath(srcFile,sourceRoot,'/');
  for (  final CompiledClass cc : paths) {
    myCompileContext.getProgressIndicator().checkCanceled();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Checking [pathToClass; relPathToSource] = " + cc);
    }
    if (FileUtil.pathsEqual(filePath,cc.relativePathToSource)) {
      final String outputPath=cc.pathToClass.replace(File.separatorChar,'/');
      final Pair<String,String> realLocation=moveToRealLocation(outputDir,outputPath,srcFile,filesToRefresh);
      if (realLocation != null) {
        Collection<TranslatingCompiler.OutputItem> outputs=results.get(realLocation.getFirst());
        if (outputs == null) {
          outputs=new ArrayList<TranslatingCompiler.OutputItem>();
          results.put(realLocation.getFirst(),outputs);
        }
        outputs.add(new OutputItemImpl(realLocation.getSecond(),srcFile));
        if (CompilerConfiguration.MAKE_ENABLED) {
          newCache.setPath(cc.qName,realLocation.getSecond());
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("Added output item: [outputDir; outputPath; sourceFile]  = [" + realLocation.getFirst() + "; "+ realLocation.getSecond()+ "; "+ srcFile.getPresentableUrl()+ "]");
        }
        if (!compiledWithErrors.contains(srcFile)) {
          mySuccesfullyCompiledJavaFiles.add(srcFile);
        }
      }
 else {
        myCompileContext.addMessage(CompilerMessageCategory.ERROR,"Failed to copy from temporary location to output directory: " + outputPath + " (see idea.log for details)",null,-1,-1);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Failed to move to real location: " + outputPath + "; from "+ outputDir);
        }
      }
    }
  }
}
