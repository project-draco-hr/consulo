{
  final Module module=myCompileContext.getModuleByFile(sourceFile);
  if (module == null) {
    final String message="Cannot determine module for source file: " + sourceFile.getPresentableUrl() + ";\nCorresponding output file: "+ pathToClass;
    LOG.info(message);
    myCompileContext.addMessage(CompilerMessageCategory.WARNING,message,sourceFile.getUrl(),-1,-1);
    return new Pair<String,String>(tempOutputDir,pathToClass);
  }
  final String realOutputDir;
  if (myCompileContext.isInTestSourceContent(sourceFile)) {
    realOutputDir=getTestsOutputDir(module);
  }
 else {
    realOutputDir=getOutputDir(module);
  }
  if (FileUtil.pathsEqual(tempOutputDir,realOutputDir)) {
    chunk.myFilesToRefresh.add(new File(pathToClass));
    return new Pair<String,String>(realOutputDir,pathToClass);
  }
  final String realPathToClass=realOutputDir + pathToClass.substring(tempOutputDir.length());
  final File fromFile=new File(pathToClass);
  final File toFile=new File(realPathToClass);
  boolean success=fromFile.renameTo(toFile);
  if (!success) {
    final File parentFile=toFile.getParentFile();
    if (parentFile != null) {
      parentFile.mkdirs();
      success=fromFile.renameTo(toFile);
    }
  }
  if (!success) {
    try {
      FileUtil.copy(fromFile,toFile);
      FileUtil.delete(fromFile);
      success=true;
    }
 catch (    IOException e) {
      LOG.info(e);
      success=false;
    }
  }
  if (success) {
    chunk.myFilesToRefresh.add(toFile);
    return new Pair<String,String>(realOutputDir,realPathToClass);
  }
  return null;
}
