{
  myCompileContext.getProgressIndicator().checkCanceled();
  chunk.setSourcesFilter(sourcesFilter);
  if (ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    public Boolean compute(){
      return chunk.getFilesToCompile().length == 0 ? Boolean.TRUE : Boolean.FALSE;
    }
  }
).booleanValue()) {
    return;
  }
  ModuleType moduleType=chunk.getModules()[0].getModuleType();
  if (!(chunk.getJdk().getSdkType() instanceof JavaSdkType) && !(moduleType instanceof JavaModuleType || moduleType.createModuleBuilder() instanceof JavaModuleBuilder)) {
    return;
  }
  int exitValue=0;
  try {
    Process process=myCompiler.launchProcess(chunk,outputDir,myCompileContext);
    final ClassParsingThread classParsingThread=new ClassParsingThread(isJdk6(chunk.getJdk()));
    final Future<?> classParsingThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(classParsingThread);
    OutputParser errorParser=myCompiler.createErrorParser(outputDir);
    CompilerParsingThread errorParsingThread=errorParser == null ? null : new SynchedCompilerParsing(process,myCompileContext,errorParser,classParsingThread,true,errorParser.isTrimLines());
    Future<?> errorParsingThreadFuture=null;
    if (errorParsingThread != null) {
      errorParsingThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(errorParsingThread);
    }
    OutputParser outputParser=myCompiler.createOutputParser(outputDir);
    CompilerParsingThread outputParsingThread=outputParser == null ? null : new SynchedCompilerParsing(process,myCompileContext,outputParser,classParsingThread,false,outputParser.isTrimLines());
    Future<?> outputParsingThreadFuture=null;
    if (outputParsingThread != null) {
      outputParsingThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(outputParsingThread);
    }
    try {
      exitValue=process.waitFor();
    }
 catch (    InterruptedException e) {
      process.destroy();
      exitValue=process.exitValue();
    }
 finally {
      if (errorParsingThread != null) {
        errorParsingThread.setProcessTerminated(true);
      }
      if (outputParsingThread != null) {
        outputParsingThread.setProcessTerminated(true);
      }
      joinThread(errorParsingThreadFuture);
      joinThread(outputParsingThreadFuture);
      classParsingThread.stopParsing();
      joinThread(classParsingThreadFuture);
      registerParsingException(outputParsingThread);
      registerParsingException(errorParsingThread);
    }
  }
  finally {
    compileFinished(exitValue,chunk,outputDir);
    myModuleName=null;
  }
}
