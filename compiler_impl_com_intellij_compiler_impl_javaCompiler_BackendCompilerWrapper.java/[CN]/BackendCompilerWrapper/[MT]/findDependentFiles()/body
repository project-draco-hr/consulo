{
  myCompileContext.getProgressIndicator().setText(CompilerBundle.message("progress.checking.dependencies"));
  final DependencyCache dependencyCache=myCompileContext.getDependencyCache();
  final long start=System.currentTimeMillis();
  final Pair<int[],Set<VirtualFile>> deps=dependencyCache.findDependentClasses(myCompileContext,myProject,mySuccesfullyCompiledJavaFiles,myCompiler.getDependencyProcessor());
  final long finishMarkingClasses=System.currentTimeMillis();
  LOG.info("Dependent classes marked in " + (finishMarkingClasses - start) / 60000 + " min " + ((finishMarkingClasses - start) % 60000) / 1000 + "sec");
  final TIntHashSet currentDeps=new TIntHashSet(deps.getFirst());
  currentDeps.removeAll(myProcessedNames.toArray());
  final int[] depQNames=currentDeps.toArray();
  myProcessedNames.addAll(deps.getFirst());
  final Set<VirtualFile> depFiles=new HashSet<VirtualFile>(deps.getSecond());
  depFiles.removeAll(myProcessedFiles);
  myProcessedFiles.addAll(deps.getSecond());
  final Set<VirtualFile> dependentFiles=new HashSet<VirtualFile>();
  final CacheCorruptedException[] _ex={null};
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myProject);
        SourceFileFinder sourceFileFinder=new SourceFileFinder(myProject,myCompileContext);
        final Cache cache=dependencyCache.getCache();
        for (        final int infoQName : depQNames) {
          final String qualifiedName=dependencyCache.resolve(infoQName);
          final VirtualFile file=sourceFileFinder.findSourceFile(qualifiedName,cache.getSourceFileName(infoQName));
          if (file != null) {
            if (!compilerConfiguration.isExcludedFromCompilation(file)) {
              dependentFiles.add(file);
              if (ApplicationManager.getApplication().isUnitTestMode()) {
                CompilerManagerImpl.addRecompiledPath(file.getPath());
              }
            }
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug("No source file for " + dependencyCache.resolve(infoQName) + " found");
            }
          }
        }
        for (        final VirtualFile file : depFiles) {
          if (!compilerConfiguration.isExcludedFromCompilation(file)) {
            dependentFiles.add(file);
            if (ApplicationManager.getApplication().isUnitTestMode()) {
              CompilerManagerImpl.addRecompiledPath(file.getPath());
            }
          }
        }
      }
 catch (      CacheCorruptedException e) {
        _ex[0]=e;
      }
    }
  }
);
  if (_ex[0] != null) {
    throw _ex[0];
  }
  myCompileContext.getProgressIndicator().setText(CompilerBundle.message("progress.found.dependent.files",dependentFiles.size()));
  final long finish=System.currentTimeMillis();
  LOG.info("Total time spent on finding dependent files: " + (finish - start) / 60000 + " min " + ((finish - start) % 60000) / 1000 + "sec");
  return dependentFiles;
}
