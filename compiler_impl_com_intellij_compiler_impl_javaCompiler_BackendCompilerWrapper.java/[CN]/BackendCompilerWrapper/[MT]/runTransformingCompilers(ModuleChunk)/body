{
  final JavaSourceTransformingCompiler[] transformers=CompilerManager.getInstance(myProject).getCompilers(JavaSourceTransformingCompiler.class);
  if (transformers.length == 0) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Running transforming compilers...");
  }
  final Module[] modules=chunk.getModules();
  for (  final JavaSourceTransformingCompiler transformer : transformers) {
    final Map<VirtualFile,VirtualFile> originalToCopyFileMap=new HashMap<VirtualFile,VirtualFile>();
    final Application application=ApplicationManager.getApplication();
    application.invokeAndWait(new Runnable(){
      public void run(){
        for (        final Module module : modules) {
          VirtualFile[] filesToCompile=chunk.getFilesToCompile(module);
          for (          final VirtualFile file : filesToCompile) {
            if (transformer.isTransformable(file)) {
              application.runWriteAction(new Runnable(){
                public void run(){
                  try {
                    VirtualFile fileCopy=createFileCopy(getTempDir(module),file);
                    originalToCopyFileMap.put(file,fileCopy);
                  }
 catch (                  IOException e) {
                  }
                }
              }
);
            }
          }
        }
      }
    }
,myCompileContext.getProgressIndicator().getModalityState());
    for (    final Module module : modules) {
      final VirtualFile[] filesToCompile=chunk.getFilesToCompile(module);
      for (int j=0; j < filesToCompile.length; j++) {
        final VirtualFile file=filesToCompile[j];
        VirtualFile fileCopy=originalToCopyFileMap.get(file);
        if (fileCopy != null) {
          final boolean ok=transformer.transform(myCompileContext,fileCopy,file);
          if (ok) {
            chunk.substituteWithTransformedVersion(module,j,fileCopy);
          }
        }
      }
    }
  }
}
