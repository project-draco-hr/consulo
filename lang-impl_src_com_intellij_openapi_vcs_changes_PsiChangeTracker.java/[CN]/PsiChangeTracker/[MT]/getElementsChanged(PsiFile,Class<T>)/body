{
  final Project project=file.getProject();
  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  FileStatus status=FileStatusManager.getInstance(project).getStatus(file.getVirtualFile());
  final String oldText=getUnmodifiedDocument(file.getVirtualFile(),project);
  final DocumentImpl oldDocument=oldText == null ? null : new DocumentImpl(oldText);
  final LineStatusTracker tracker=LineStatusTrackerManager.getInstance(project).getLineStatusTracker(document);
  final List<T> elements=new ArrayList<T>();
  final List<T> oldElements=new ArrayList<T>();
  final PsiFile oldFile=oldText == null ? null : PsiFileFactory.getInstance(project).createFileFromText(file.getName(),file.getLanguage(),oldText,false,true);
  file.accept(new MyVisitor<T>(filter,elements));
  if (oldFile != null) {
    oldFile.accept(new MyVisitor<T>(filter,oldElements));
  }
  final HashMap<T,FileStatus> result=new HashMap<T,FileStatus>();
  if (status == FileStatus.ADDED) {
    for (    T element : elements) {
      result.put(element,status);
    }
    return result;
  }
  if (tracker == null)   return result;
  for (  Range range : tracker.getRanges()) {
    status=getRangeType(range);
    if (status == FileStatus.DELETED) {
      if (oldDocument == null)       break;
      for (      T element : oldElements) {
        if (getUpdatedTextRange(oldDocument,range).contains(element.getTextRange())) {
          result.put(element,status);
        }
      }
    }
 else     if (status == FileStatus.ADDED || status == FileStatus.MODIFIED) {
      final TextRange old=getOldTextRange(document,range);
      final TextRange updated=getUpdatedTextRange(document,range);
      for (      T element : elements) {
        if (isInserted(element,status,old) || isModified(element,status,old)) {
          result.put(element,status);
        }
      }
    }
  }
  return result;
}
