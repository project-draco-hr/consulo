{
  final JEditorPane text=new JEditorPane();
  text.setEditorKit(UIUtil.getHTMLEditorKit());
  final HyperlinkListener listener=NotificationsUtil.wrapListener(notification);
  if (listener != null) {
    text.addHyperlinkListener(listener);
  }
  final JLabel label=new JLabel(NotificationsUtil.buildHtml(notification,null));
  text.setText(NotificationsUtil.buildHtml(notification,"width:" + Math.min(400,label.getPreferredSize().width) + "px;"));
  text.setEditable(false);
  text.setOpaque(false);
  if (UIUtil.isUnderNimbusLookAndFeel()) {
    text.setBackground(UIUtil.TRANSPARENT_COLOR);
  }
  text.setBorder(null);
  final JPanel content=new NonOpaquePanel(new BorderLayout((int)(label.getIconTextGap() * 1.5),(int)(label.getIconTextGap() * 1.5)));
  text.setCaretPosition(0);
  JScrollPane pane=ScrollPaneFactory.createScrollPane(text,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  pane.setBorder(null);
  pane.setOpaque(false);
  pane.getViewport().setOpaque(false);
  content.add(pane,BorderLayout.CENTER);
  final NonOpaquePanel north=new NonOpaquePanel(new BorderLayout());
  north.add(new JLabel(NotificationsUtil.getIcon(notification)),BorderLayout.NORTH);
  content.add(north,BorderLayout.WEST);
  content.setBorder(new EmptyBorder(2,4,2,4));
  Dimension preferredSize=text.getPreferredSize();
  text.setSize(preferredSize);
  Dimension paneSize=new Dimension(text.getPreferredSize());
  int maxHeight=Math.min(400,window.getComponent().getHeight() - 20);
  int maxWidth=Math.min(600,window.getComponent().getWidth() - 20);
  if (paneSize.height > maxHeight) {
    pane.setPreferredSize(new Dimension(Math.min(maxWidth,paneSize.width + UIUtil.getScrollBarWidth()),maxHeight));
  }
 else   if (paneSize.width > maxWidth) {
    pane.setPreferredSize(new Dimension(maxWidth,paneSize.height + UIUtil.getScrollBarWidth()));
  }
  final BalloonBuilder builder=JBPopupFactory.getInstance().createBalloonBuilder(content);
  builder.setFillColor(NotificationsUtil.getBackground(notification)).setCloseButtonEnabled(true).setShowCallout(showCallout).setHideOnClickOutside(hideOnClickOutside).setHideOnAction(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false);
  final Balloon balloon=builder.createBalloon();
  notification.setBalloon(balloon);
  return balloon;
}
