{
  final JEditorPane text=new JEditorPane();
  text.setEditorKit(UIUtil.getHTMLEditorKit());
  final HyperlinkListener listener=NotificationsUtil.wrapListener(notification);
  if (listener != null) {
    text.addHyperlinkListener(listener);
  }
  text.setText(NotificationsUtil.buildHtml(notification));
  final JLabel label=new JLabel(text.getText());
  final Dimension size=label.getPreferredSize();
  text.setEditable(false);
  text.setOpaque(false);
  if (UIUtil.isUnderNimbusLookAndFeel()) {
    text.setBackground(new Color(0,0,0,0));
  }
  text.setBorder(null);
  text.setPreferredSize(size);
  final JPanel content=new NonOpaquePanel(new BorderLayout((int)(label.getIconTextGap() * 1.5),(int)(label.getIconTextGap() * 1.5)));
  final NonOpaquePanel textWrapper=new NonOpaquePanel(new GridBagLayout());
  textWrapper.add(text);
  content.add(textWrapper,BorderLayout.CENTER);
  final NonOpaquePanel north=new NonOpaquePanel(new BorderLayout());
  north.add(new JLabel(NotificationsUtil.getIcon(notification)),BorderLayout.NORTH);
  content.add(north,BorderLayout.WEST);
  content.setBorder(new EmptyBorder(2,4,2,4));
  final BalloonBuilder builder=JBPopupFactory.getInstance().createBalloonBuilder(content);
  builder.setFillColor(NotificationsUtil.getBackground(notification)).setCloseButtonEnabled(true).setShowCallout(showCallout).setHideOnClickOutside(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false);
  if (fadeOut) {
    builder.setFadeoutTime(3000);
  }
  final Balloon balloon=builder.createBalloon();
  balloon.addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      notification.setBalloon(null);
    }
  }
);
  notification.setBalloon(balloon);
  return balloon;
}
