{
  final TIntHashSet visited=new TIntHashSet();
  final TIntHashSet result=new TIntHashSet();
  final CallEnvironment env=new CallEnvironment.DepthFirstCallEnvironment();
  fragmentInsns.forEach(new TIntProcedure(){
    public boolean execute(    int insnNum){
      processInsn(flow[insnNum],visited,result);
      return true;
    }
    private void processInsn(    Instruction instruction,    TIntHashSet visited,    TIntHashSet result){
      final int num=instruction.num();
      if (visited.contains(num))       return;
      visited.add(num);
      if (instruction instanceof ReadWriteVariableInstruction && !((ReadWriteVariableInstruction)instruction).isWrite() && !fragmentInsns.contains(num)) {
        result.add(num);
      }
      for (      Instruction succ : instruction.succ(env)) {
        processInsn(succ,visited,result);
      }
    }
  }
);
  return result;
}
