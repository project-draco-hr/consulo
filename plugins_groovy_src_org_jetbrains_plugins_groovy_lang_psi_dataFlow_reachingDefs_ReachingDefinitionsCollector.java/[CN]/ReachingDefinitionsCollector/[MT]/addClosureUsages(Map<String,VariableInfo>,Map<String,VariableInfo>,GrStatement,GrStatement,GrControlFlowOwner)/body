{
  flowOwner.accept(new GroovyRecursiveElementVisitor(){
    public void visitClosure(    GrClosableBlock closure){
      addUsagesInClosure(imap,omap,closure,first,last);
      super.visitClosure(closure);
    }
    private void addUsagesInClosure(    final Map<String,VariableInfo> imap,    final Map<String,VariableInfo> omap,    final GrClosableBlock closure,    final GrStatement first,    final GrStatement last){
      closure.accept(new GroovyRecursiveElementVisitor(){
        public void visitReferenceExpression(        GrReferenceExpression refExpr){
          if (!refExpr.isQualified()) {
            PsiElement resolved=refExpr.resolve();
            if (resolved instanceof GrVariable) {
              GrVariable variable=(GrVariable)resolved;
              if (!PsiTreeUtil.isAncestor(closure,variable,true)) {
                String name=variable.getName();
                if (name != null) {
                  if (!(variable instanceof GrField)) {
                    if (!isInFragment(first,last,resolved)) {
                      if (isInFragment(first,last,closure)) {
                        addVariable(name,imap,variable.getManager(),variable.getType());
                      }
                    }
 else {
                      if (!isInFragment(first,last,closure)) {
                        addVariable(name,omap,variable.getManager(),variable.getType());
                      }
                    }
                  }
                }
              }
            }
          }
 else {
            super.visitReferenceExpression(refExpr);
          }
        }
      }
);
    }
  }
);
}
