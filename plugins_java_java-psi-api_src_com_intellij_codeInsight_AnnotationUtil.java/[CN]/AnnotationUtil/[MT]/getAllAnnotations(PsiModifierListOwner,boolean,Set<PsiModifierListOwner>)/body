{
  final PsiModifierList list=owner.getModifierList();
  PsiAnnotation[] annotations=PsiAnnotation.EMPTY_ARRAY;
  if (list != null) {
    annotations=list.getAnnotations();
  }
  final PsiAnnotation[] externalAnnotations=ExternalAnnotationsManager.getInstance(owner.getProject()).findExternalAnnotations(owner);
  if (externalAnnotations != null) {
    annotations=ArrayUtil.mergeArrays(annotations,externalAnnotations,PsiAnnotation.ARRAY_FACTORY);
  }
  if (inHierarchy) {
    if (owner instanceof PsiClass) {
      for (      PsiClass superClass : ((PsiClass)owner).getSupers()) {
        if (visited == null)         visited=new THashSet<PsiModifierListOwner>();
        if (visited.add(superClass))         annotations=ArrayUtil.mergeArrays(annotations,getAllAnnotations(superClass,inHierarchy,visited));
      }
    }
 else     if (owner instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)owner;
      PsiClass aClass=method.getContainingClass();
      if (aClass != null) {
        HierarchicalMethodSignature methodSignature=method.getHierarchicalMethodSignature();
        final List<HierarchicalMethodSignature> superSignatures=methodSignature.getSuperSignatures();
        PsiResolveHelper resolveHelper=PsiResolveHelper.SERVICE.getInstance(aClass.getProject());
        for (        final HierarchicalMethodSignature superSignature : superSignatures) {
          final PsiMethod superMethod=superSignature.getMethod();
          if (visited == null)           visited=new THashSet<PsiModifierListOwner>();
          if (!visited.add(superMethod))           continue;
          if (!resolveHelper.isAccessible(superMethod,owner,null))           continue;
          annotations=ArrayUtil.mergeArrays(annotations,getAllAnnotations(superMethod,inHierarchy,visited));
        }
      }
    }
 else     if (owner instanceof PsiParameter) {
      PsiParameter parameter=(PsiParameter)owner;
      PsiElement scope=parameter.getDeclarationScope();
      if (scope instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)scope;
        PsiClass aClass=method.getContainingClass();
        PsiElement parent=parameter.getParent();
        if (aClass != null && parent instanceof PsiParameterList) {
          int index=((PsiParameterList)parent).getParameterIndex(parameter);
          HierarchicalMethodSignature methodSignature=method.getHierarchicalMethodSignature();
          final List<HierarchicalMethodSignature> superSignatures=methodSignature.getSuperSignatures();
          PsiResolveHelper resolveHelper=PsiResolveHelper.SERVICE.getInstance(aClass.getProject());
          for (          final HierarchicalMethodSignature superSignature : superSignatures) {
            final PsiMethod superMethod=superSignature.getMethod();
            if (visited == null)             visited=new THashSet<PsiModifierListOwner>();
            if (!visited.add(superMethod))             continue;
            if (!resolveHelper.isAccessible(superMethod,owner,null))             continue;
            PsiParameter[] superParameters=superMethod.getParameterList().getParameters();
            if (index < superParameters.length) {
              annotations=ArrayUtil.mergeArrays(annotations,getAllAnnotations(superParameters[index],inHierarchy,visited));
            }
          }
        }
      }
    }
  }
  return annotations;
}
