{
  final IdeTooltip tooltip=new IdeTooltip(c,me.getPoint(),null,new Object()){
    @Override protected boolean beforeShow(){
      myCurrentEvent=me;
      if (!c.isShowing())       return false;
      String text=c.getToolTipText(myCurrentEvent);
      if (text == null || text.trim().length() == 0)       return false;
      JLayeredPane layeredPane=IJSwingUtilities.findParentOfType(c,JLayeredPane.class);
      final JEditorPane pane=initPane(text,new HintHint(me).setAwtTooltip(true),layeredPane);
      final Wrapper wrapper=new Wrapper(pane);
      setTipComponent(wrapper);
      return true;
    }
  }
.setToCenter(toCenter).setCalloutShift(shift).setPositionChangeShift(posChangeX,posChangeY).setLayer(Balloon.Layer.top);
  if (tooltip.getPreferredPosition() == Balloon.Position.above && c instanceof JTree) {
    javax.swing.tree.TreePath path=((JTree)c).getClosestPathForLocation(me.getX(),me.getY());
    if (path != null) {
      Rectangle pathBounds=((JTree)c).getPathBounds(path);
      if (pathBounds != null && pathBounds.y + 4 < me.getY()) {
        tooltip.setPositionChangeShift(tooltip.getPositionChangeX(),tooltip.getPositionChangeY() - ((me.getY() - pathBounds.y - 4)));
      }
    }
  }
  show(tooltip,false);
}
