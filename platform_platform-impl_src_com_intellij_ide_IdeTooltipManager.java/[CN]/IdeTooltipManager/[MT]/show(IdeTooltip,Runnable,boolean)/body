{
  boolean toCenterX;
  boolean toCenterY;
  boolean toCenter=tooltip.isToCenter();
  boolean small=false;
  if (!toCenter && tooltip.isToCenterIfSmall()) {
    Dimension size=tooltip.getComponent().getSize();
    toCenterX=size.width < 64;
    toCenterY=size.height < 64;
    toCenter=toCenterX || toCenterY;
    small=true;
  }
 else {
    toCenterX=true;
    toCenterY=true;
  }
  Point effectivePoint=tooltip.getPoint();
  if (toCenter) {
    Rectangle bounds=tooltip.getComponent().getBounds();
    effectivePoint.x=toCenterX ? bounds.width / 2 : effectivePoint.x;
    effectivePoint.y=toCenterY ? (bounds.height / 2) : effectivePoint.y;
  }
  if (myCurrentComponent == tooltip.getComponent() && effectivePoint.equals(new Point(myX,myY))) {
    return;
  }
  Color bg=tooltip.getTextBackground() != null ? tooltip.getTextBackground() : getTextBackground(true);
  Color fg=tooltip.getTextForeground() != null ? tooltip.getTextForeground() : getTextForeground(true);
  Color border=tooltip.getBorderColor() != null ? tooltip.getBorderColor() : getBorderColor(true);
  BalloonBuilder builder=myPopupFactory.createBalloonBuilder(tooltip.getTipComponent()).setPreferredPosition(tooltip.getPreferredPosition()).setFillColor(bg).setBorderColor(border).setAnimationCycle(animationEnabled ? Registry.intValue("ide.tooltip.animationCycle") : 0).setShowCallout(true).setCalloutShift((small && tooltip.getCalloutShift() == 0) ? -2 : tooltip.getCalloutShift()).setPositionChangeXShift(tooltip.getPositionChangeX()).setPositionChangeYShift(tooltip.getPositionChangeY()).setHideOnKeyOutside(!tooltip.isExplicitClose()).setHideOnAction(!tooltip.isExplicitClose()).setLayer(tooltip.getLayer());
  tooltip.getTipComponent().setForeground(fg);
  tooltip.getTipComponent().setBorder(new EmptyBorder(1,3,2,3));
  tooltip.getTipComponent().setFont(tooltip.getFont() != null ? tooltip.getFont() : getTextFont(true));
  if (beforeShow != null) {
    beforeShow.run();
  }
  myCurrentTipUi=(BalloonImpl)builder.createBalloon();
  tooltip.setUi(myCurrentTipUi);
  myCurrentComponent=tooltip.getComponent();
  myX=effectivePoint.x;
  myY=effectivePoint.y;
  myCurrentTipIsCentered=toCenter;
  myCurrentTooltip=tooltip;
  myShowRequest=null;
  myQueuedComponent=null;
  myQueuedTooltip=null;
  myCurrentTipUi.show(new RelativePoint(tooltip.getComponent(),effectivePoint),tooltip.getPreferredPosition());
  myAlarm.addRequest(new Runnable(){
    @Override public void run(){
      if (myCurrentTooltip == tooltip && tooltip.canBeDismissedOnTimeout()) {
        hideCurrent(null,null,null);
      }
    }
  }
,tooltip.getDismissDelay());
}
