{
  if (myCurrentComponent != c || !c.isShowing())   return;
  String text=c.getToolTipText(myCurrentEvent);
  if (text == null || text.trim().length() == 0)   return;
  myTipLabel.setText(text);
  boolean useSystem;
  if ("default".equalsIgnoreCase(myMode.asString())) {
    useSystem=false;
  }
 else   if ("system".equalsIgnoreCase(myMode.asString())) {
    useSystem=true;
  }
 else   if ("graphite".equalsIgnoreCase(myMode.asString())) {
    useSystem=false;
  }
 else {
    useSystem=false;
  }
  Color bg=useSystem ? UIManager.getColor("ToolTip.background") : new Color(100,100,100,230);
  Color fg=useSystem ? UIManager.getColor("ToolTip.foreground") : Color.white;
  Color border=useSystem ? Color.darkGray : bg.darker();
  BalloonBuilder builder=myPopupFactory.createBalloonBuilder(myTipLabel).setPreferredPosition(Balloon.Position.above).setFillColor(bg).setBorderColor(border).setAnimationCycle(150).setShowCallout(true).setCalloutShift(4);
  myTipLabel.setForeground(fg);
  myTipLabel.setBorder(new EmptyBorder(1,3,2,3));
  myTipLabel.setFont(UIManager.getFont("ToolTip.font"));
  myCurrentTip=builder.createBalloon();
  boolean toCenterX;
  boolean toCenterY;
  if (!toCenter) {
    Dimension size=c.getSize();
    toCenterX=size.width < 64;
    toCenterY=size.height < 64;
    toCenter=toCenterX || toCenterY;
  }
 else {
    toCenterX=true;
    toCenterY=true;
  }
  Point point=new Point(myX,myY);
  if (toCenter) {
    Rectangle bounds=c.getBounds();
    point.x=toCenterX ? bounds.width / 2 : point.x;
    point.y=toCenterY ? (bounds.height / 2) : point.y;
  }
  myCurrentTip.show(new RelativePoint(c,point),Balloon.Position.above);
}
