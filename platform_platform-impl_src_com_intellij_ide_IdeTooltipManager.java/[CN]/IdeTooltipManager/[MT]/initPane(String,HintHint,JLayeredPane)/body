{
  final Ref<Dimension> prefSize=new Ref<Dimension>(null);
  String htmlBody=getHtmlBody(text);
  htmlBody=UIUtil.convertSpace2Nbsp(htmlBody);
  text="<html><head>" + UIUtil.getCssFontDeclaration(hintHint.getTextFont(),hintHint.getTextForeground(),hintHint.getLinkForeground(),hintHint.getUlImg()) + "</head><body>"+ htmlBody+ "</body></html>";
  final JEditorPane pane=new JEditorPane(){
    @Override public Dimension getPreferredSize(){
      Dimension s=prefSize.get() != null ? new Dimension(prefSize.get()) : super.getPreferredSize();
      Border b=getBorder();
      if (b != null) {
        Insets insets=b.getBorderInsets(this);
        if (insets != null) {
          s.width+=insets.left + insets.right;
          s.height+=insets.top + insets.bottom;
        }
      }
      return s;
    }
  }
;
  final HTMLEditorKit.HTMLFactory factory=new HTMLEditorKit.HTMLFactory(){
    @Override public View create(    Element elem){
      AttributeSet attrs=elem.getAttributes();
      Object elementName=attrs.getAttribute(AbstractDocument.ElementNameAttribute);
      Object o=(elementName != null) ? null : attrs.getAttribute(StyleConstants.NameAttribute);
      if (o instanceof HTML.Tag) {
        HTML.Tag kind=(HTML.Tag)o;
        if (kind == HTML.Tag.HR) {
          return new CustomHrView(elem,hintHint.getTextForeground());
        }
      }
      return super.create(elem);
    }
  }
;
  HTMLEditorKit kit=new HTMLEditorKit(){
    @Override public ViewFactory getViewFactory(){
      return factory;
    }
  }
;
  pane.setEditorKit(kit);
  pane.setText(text);
  pane.setCaretPosition(0);
  pane.setEditable(false);
  if (hintHint.isOwnBorderAllowed()) {
    setBorder(pane);
    setColors(pane);
  }
 else {
    pane.setBorder(null);
  }
  if (hintHint.isAwtTooltip()) {
    Dimension size=layeredPane != null ? layeredPane.getSize() : new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);
    int fitWidth=(int)(size.width * 0.8);
    Dimension prefSizeOriginal=pane.getPreferredSize();
    if (prefSizeOriginal.width > fitWidth) {
      pane.setSize(new Dimension(fitWidth,Integer.MAX_VALUE));
      Dimension fixedWidthSize=pane.getPreferredSize();
      prefSize.set(new Dimension(fitWidth,fixedWidthSize.height));
    }
 else {
      prefSize.set(new Dimension(prefSizeOriginal));
    }
  }
  pane.setOpaque(hintHint.isOpaqueAllowed());
  pane.setBackground(hintHint.getTextBackground());
  return pane;
}
