{
  super.visitPolyadicExpression(expression);
  final IElementType tokenType=expression.getOperationTokenType();
  if (ComparisonUtils.isComparisonOperation(tokenType)) {
    return;
  }
  PsiExpression[] operands=expression.getOperands();
  PsiType left=operands[0].getType();
  for (int i=1; i < operands.length; i++) {
    PsiExpression operand=operands[i];
    final PsiType rType=operand.getType();
    PsiType opType=TypeConversionUtil.calcTypeForBinaryExpression(left,rType,tokenType,true);
    if (opType == null || opType.equalsToText("java.lang.String")) {
      return;
    }
    if (PsiType.CHAR.equals(rType)) {
      registerError(operand,operand);
    }
    if (PsiType.CHAR.equals(left) && i == 1) {
      registerError(operands[0],operands[0]);
    }
    left=rType;
  }
}
