{
  super(new VerticalFlowLayout());
  myTrafficLightRenderer=trafficLightRenderer;
  add(statusLabel);
  TrafficLightRenderer.DaemonCodeAnalyzerStatus fakeStatusLargeEnough=new TrafficLightRenderer.DaemonCodeAnalyzerStatus();
  fakeStatusLargeEnough.errorCount=new int[]{1,1,1,1};
  Project project=trafficLightRenderer.getProject();
  PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  for (int i=0; i < 3; i++) {
    fakeStatusLargeEnough.passStati.add(new ProgressableTextEditorHighlightingPass(project,null,DaemonBundle.message("pass.wolf"),psiFile,false){
      @Override protected void collectInformationWithProgress(      ProgressIndicator progress){
      }
      @Override protected void applyInformationWithProgress(){
      }
    }
);
  }
  rebuildPassesPanel(fakeStatusLargeEnough);
  for (  Pair<JProgressBar,JLabel> pair : passes.values()) {
    JProgressBar bar=pair.first;
    bar.setMaximum(100);
    JLabel label=pair.second;
    label.setText("100%");
  }
  add(passStatuses);
  add(statistics);
  updatePanel(fakeStatusLargeEnough);
  hintHint.initStyle(this,true);
}
