{
  myHintHint=hintHint;
  myTrafficLightRenderer=trafficLightRenderer;
  setLayout(new BorderLayout());
  VerticalBox center=new VerticalBox();
  add(center,BorderLayout.NORTH);
  center.add(statusLabel);
  center.add(new Separator());
  center.add(Box.createVerticalStrut(6));
  TrafficLightRenderer.DaemonCodeAnalyzerStatus fakeStatusLargeEnough=new TrafficLightRenderer.DaemonCodeAnalyzerStatus();
  fakeStatusLargeEnough.errorCount=new int[]{1,1,1,1};
  Project project=trafficLightRenderer.getProject();
  PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  fakeStatusLargeEnough.passStati=new ArrayList<ProgressableTextEditorHighlightingPass>();
  for (int i=0; i < 3; i++) {
    fakeStatusLargeEnough.passStati.add(new ProgressableTextEditorHighlightingPass(project,null,DaemonBundle.message("pass.wolf"),psiFile,false){
      @Override protected void collectInformationWithProgress(      ProgressIndicator progress){
      }
      @Override protected void applyInformationWithProgress(){
      }
    }
);
  }
  rebuildPassesPanel(fakeStatusLargeEnough);
  for (  Pair<JProgressBar,JLabel> pair : passes.values()) {
    JProgressBar bar=pair.first;
    bar.setMaximum(MAX);
    JLabel label=pair.second;
    label.setText(MAX_TEXT);
  }
  center.add(passStatuses);
  add(statistics,BorderLayout.SOUTH);
  updatePanel(fakeStatusLargeEnough);
  hintHint.initStyle(this,true);
}
