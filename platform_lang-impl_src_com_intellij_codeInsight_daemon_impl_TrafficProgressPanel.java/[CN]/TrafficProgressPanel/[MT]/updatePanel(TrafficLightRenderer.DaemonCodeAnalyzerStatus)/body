{
  if (status == null)   return;
  if (PowerSaveMode.isEnabled()) {
    statusLabel.setText("Code analysis is disabled in power save mode");
    passStatuses.setVisible(false);
    statistics.setText("");
    return;
  }
  if (status.errorAnalyzingFinished) {
    statusLabel.setText(DaemonBundle.message("analysis.completed"));
    passStatuses.setVisible(true);
    setPassesEnabled(false,Boolean.TRUE);
    return;
  }
  if (!status.enabled) {
    statusLabel.setText("Code analysis has been suspended");
    passStatuses.setVisible(true);
    setPassesEnabled(false,Boolean.FALSE);
    statistics.setText("");
    return;
  }
  if (status.noHighlightingRoots != null && status.noHighlightingRoots.length == status.rootsNumber) {
    statusLabel.setText(DaemonBundle.message("analysis.hasnot.been.run"));
    passStatuses.setVisible(true);
    setPassesEnabled(false,Boolean.FALSE);
    statistics.setText("");
    return;
  }
  statusLabel.setText(DaemonBundle.message("performing.code.analysis"));
  passStatuses.setVisible(true);
  setPassesEnabled(true,null);
  if (!status.passStati.equals(new ArrayList<ProgressableTextEditorHighlightingPass>(passes.keySet()))) {
    rebuildPassesPanel(status);
  }
  for (  ProgressableTextEditorHighlightingPass pass : status.passStati) {
    double progress=pass.getProgress();
    Pair<JProgressBar,JLabel> pair=passes.get(pass);
    JProgressBar progressBar=pair.first;
    int percent=(int)Math.round(progress * MAX);
    progressBar.setValue(percent);
    JLabel percentage=pair.second;
    percentage.setText(percent + "%");
  }
  int currentSeverityErrors=0;
  @Language("HTML") String text="<html><body>";
  for (int i=status.errorCount.length - 1; i >= 0; i--) {
    if (status.errorCount[i] > 0) {
      final HighlightSeverity severity=SeverityRegistrar.getInstance(myTrafficLightRenderer.getProject()).getSeverityByIndex(i);
      String name=status.errorCount[i] > 1 ? StringUtil.pluralize(severity.toString().toLowerCase()) : severity.toString().toLowerCase();
      text+=status.errorAnalyzingFinished ? DaemonBundle.message("errors.found",status.errorCount[i],name) : DaemonBundle.message("errors.found.so.far",status.errorCount[i],name);
      text+="<br>";
      currentSeverityErrors+=status.errorCount[i];
    }
  }
  if (currentSeverityErrors == 0) {
    text+=status.errorAnalyzingFinished ? DaemonBundle.message("no.errors.or.warnings.found") : DaemonBundle.message("no.errors.or.warnings.found.so.far") + "<br>";
  }
  statistics.setText(text);
}
