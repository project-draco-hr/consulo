{
  for (PsiElement e=field.getPrevSibling(); e != null; e=e.getPrevSibling()) {
    if (e instanceof PsiWhiteSpace) {
      continue;
    }
    if (e instanceof PsiJavaToken && ((PsiJavaToken)e).getTokenType() == JavaTokenType.COMMA) {
      return;
    }
 else {
      break;
    }
  }
  TextRange range=field.getTextRange();
  PsiElement child=field.getLastChild();
  boolean needProcessing;
  if (child instanceof PsiJavaToken) {
    needProcessing=((PsiJavaToken)child).getTokenType() != JavaTokenType.SEMICOLON;
  }
 else {
    needProcessing=true;
  }
  if (needProcessing) {
    for (PsiElement e=field.getNextSibling(); e != null; e=e.getNextSibling()) {
      if (e instanceof PsiWhiteSpace) {
        continue;
      }
 else       if (e instanceof PsiJavaToken) {
        if (((PsiJavaToken)e).getTokenType() == JavaTokenType.COMMA) {
          continue;
        }
 else {
          break;
        }
      }
 else       if (e instanceof PsiField) {
        PsiElement c=e.getLastChild();
        if (c instanceof PsiErrorElement || (c instanceof PsiJavaToken && ((PsiJavaToken)c).getTokenType() == JavaTokenType.SEMICOLON)) {
          range=TextRange.create(range.getStartOffset(),c.getTextRange().getEndOffset());
        }
 else {
          continue;
        }
      }
      break;
    }
  }
  JavaElementArrangementEntry entry=createNewEntry(field,range,ArrangementEntryType.FIELD,field.getName(),true);
  processEntry(entry,field,field.getInitializer());
}
