{
  final List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  myFile.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      IElementType tokenType=element.getNode().getElementType();
      if (TokenSets.KEYWORDS.contains(tokenType)) {
        if (highlightKeyword(element,tokenType)) {
          addInfo(element,KEYWORD);
        }
      }
 else       if (!(element instanceof GroovyPsiElement || element instanceof PsiErrorElement)) {
        final TextAttributesKey attribute=getDeclarationAttribute(element);
        if (attribute != null) {
          addInfo(element,attribute);
        }
      }
 else {
        if (element instanceof GrLabel) {
          addInfo(element,LABEL);
        }
        super.visitElement(element);
      }
    }
    private void addInfo(    @NotNull PsiElement element,    @NotNull TextAttributesKey attribute){
      HighlightInfo.Builder builder=HighlightInfo.newHighlightInfo(INFORMATION).range(element);
      HighlightInfo info=builder.needsUpdateOnTyping(false).textAttributes(attribute).create();
      if (info != null) {
        result.add(info);
      }
    }
  }
);
  toHighlight=result;
}
