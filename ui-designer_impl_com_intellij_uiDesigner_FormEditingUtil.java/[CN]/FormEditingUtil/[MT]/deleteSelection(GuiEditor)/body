{
  final ArrayList<RadComponent> selection=getSelectedComponents(editor);
  for (  final RadComponent component : selection) {
    boolean wasSelected=component.isSelected();
    final RadContainer parent=component.getParent();
    boolean wasPackedHorz=false;
    boolean wasPackedVert=false;
    if (parent.getParent() != null && parent.getParent().isXY()) {
      final Dimension minSize=parent.getMinimumSize();
      wasPackedHorz=(parent.getWidth() == minSize.width);
      wasPackedVert=(parent.getHeight() == minSize.height);
    }
    GridConstraints delConstraints=parent.isGrid() ? component.getConstraints() : null;
    int index=parent.indexOfComponent(component);
    parent.removeComponent(component);
    if (wasSelected) {
      if (parent.getComponentCount() > index) {
        parent.getComponent(index).setSelected(true);
      }
 else       if (index > 0 && parent.getComponentCount() == index) {
        parent.getComponent(index - 1).setSelected(true);
      }
 else {
        parent.setSelected(true);
      }
    }
    if (delConstraints != null) {
      deleteEmptyGridCells(parent,delConstraints);
    }
    if (wasPackedHorz || wasPackedVert) {
      final Dimension minSize=parent.getMinimumSize();
      Dimension newSize=new Dimension(parent.getWidth(),parent.getHeight());
      if (wasPackedHorz) {
        newSize.width=minSize.width;
      }
      if (wasPackedVert) {
        newSize.height=minSize.height;
      }
      parent.setSize(newSize);
    }
  }
  editor.refreshAndSave(true);
}
