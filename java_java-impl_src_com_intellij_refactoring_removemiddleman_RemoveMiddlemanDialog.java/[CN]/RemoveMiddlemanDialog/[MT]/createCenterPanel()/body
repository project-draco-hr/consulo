{
  final JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(10,0,5,0));
  final MemberSelectionPanel selectionPanel=new MemberSelectionPanel("Methods to inline",delegateMethods,"Delete");
  final MemberSelectionTable table=selectionPanel.getTable();
  table.setMemberInfoModel(new DelegatingMemberInfoModel<PsiMember,MemberInfo>(table.getMemberInfoModel()){
    @Override public int checkForProblems(    @NotNull final MemberInfo member){
      return hasSuperMethods(member) ? ERROR : OK;
    }
    @Override public String getTooltipText(    final MemberInfo member){
      if (hasSuperMethods(member))       return "Deletion will break type hierarchy";
      return super.getTooltipText(member);
    }
    private boolean hasSuperMethods(    final MemberInfo member){
      if (member.isChecked() && member.isToAbstract()) {
        final PsiMember psiMember=member.getMember();
        if (psiMember instanceof PsiMethod && ((PsiMethod)psiMember).findDeepestSuperMethods().length > 0) {
          return true;
        }
      }
      return false;
    }
  }
);
  panel.add(selectionPanel,BorderLayout.CENTER);
  return panel;
}
