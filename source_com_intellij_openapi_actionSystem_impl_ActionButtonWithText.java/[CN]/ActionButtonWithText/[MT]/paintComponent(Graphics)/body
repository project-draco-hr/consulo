{
  final String text=getText();
  final Icon icon=getIcon();
  final FontMetrics fontMetrics=getFontMetrics(getFont());
  int x=(int)Math.ceil((getWidth() - icon.getIconWidth() - fontMetrics.stringWidth(text)) / 2);
  int y=(int)Math.ceil((getHeight() - icon.getIconHeight()) / 2);
  ActionButtonLook look=ActionButtonLook.IDEA_LOOK;
  look.paintBackground(g,this);
  look.paintIconAt(g,this,icon,x,y);
  look.paintBorder(g,this);
  final int textHeight=fontMetrics.getMaxAscent() + fontMetrics.getMaxDescent();
  g.setColor(isButtonEnabled() ? UIUtil.getLabelForeground() : UIUtil.getTextInactiveTextColor());
  final int iconTextDifference=(int)Math.ceil((icon.getIconHeight() - textHeight) / 2);
  final int textStartX=x + icon.getIconWidth() + ICON_TEXT_SPACE;
  g.drawString(text,textStartX,y + iconTextDifference + fontMetrics.getMaxAscent());
  final int mnemonicIndex=getMnemonicCharIndex(text);
  if (mnemonicIndex >= 0) {
    final char[] chars=text.toCharArray();
    final int startX=textStartX + fontMetrics.charsWidth(chars,0,mnemonicIndex);
    final int startY=y + iconTextDifference + fontMetrics.getMaxAscent()+ fontMetrics.getMaxDescent();
    final int endX=startX + fontMetrics.charWidth(text.charAt(mnemonicIndex));
    UIUtil.drawLine(g,startX,startY,endX,startY);
  }
}
