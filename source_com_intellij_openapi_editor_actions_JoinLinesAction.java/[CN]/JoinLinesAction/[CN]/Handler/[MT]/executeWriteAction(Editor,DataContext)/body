{
  final DocumentEx doc=(DocumentEx)editor.getDocument();
  LogicalPosition caretPosition=editor.getCaretModel().getLogicalPosition();
  int startLine=caretPosition.line;
  int endLine=startLine + 1;
  if (editor.getSelectionModel().hasSelection()) {
    startLine=doc.getLineNumber(editor.getSelectionModel().getSelectionStart());
    endLine=doc.getLineNumber(editor.getSelectionModel().getSelectionEnd());
    if (doc.getLineStartOffset(endLine) == editor.getSelectionModel().getSelectionEnd())     endLine--;
  }
  int caretRestoreOffset=-1;
  for (int i=startLine; i < endLine; i++) {
    if (i >= doc.getLineCount() - 1)     break;
    CharSequence text=doc.getCharsSequence();
    int end=doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine);
    int start=end - doc.getLineSeparatorLength(startLine);
    while (start > 0 && (text.charAt(start) == ' ' || text.charAt(start) == '\t'))     start--;
    if (caretRestoreOffset == -1)     caretRestoreOffset=start + 1;
    while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))     end++;
    doc.replaceString(start,end," ");
  }
  if (editor.getSelectionModel().hasSelection()) {
    editor.getCaretModel().moveToOffset(editor.getSelectionModel().getSelectionEnd());
  }
 else {
    if (caretRestoreOffset != -1) {
      editor.getCaretModel().moveToOffset(caretRestoreOffset);
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      editor.getSelectionModel().removeSelection();
    }
  }
}
