{
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  for (  InspectionTool tool : tools) {
    if (getCurrentProfile().isToolEnabled(HighlightDisplayKey.find(tool.getShortName())))     tool.initialize(this);
  }
  try {
    scope.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
      }
      @Override public void visitFile(      PsiFile file){
        incrementJobDoneAmount(LOCAL_ANALYSIS,file.getVirtualFile().getPresentableUrl());
        for (int i=0; i < localTools.size(); i++) {
          LocalInspectionToolWrapper tool=localTools.get(i);
          tool.processFile(file);
          psiManager.dropResolveCaches();
        }
      }
    }
);
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
  }
  for (  InspectionTool tool : tools) {
    if (getCurrentProfile().isToolEnabled(HighlightDisplayKey.find(tool.getShortName())) && !(tool instanceof LocalInspectionToolWrapper)) {
      try {
        tool.runInspection(scope);
        if (tool.queryExternalUsagesRequests()) {
          needRepeatSearchRequest.add(tool);
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.error(e);
      }
    }
  }
}
