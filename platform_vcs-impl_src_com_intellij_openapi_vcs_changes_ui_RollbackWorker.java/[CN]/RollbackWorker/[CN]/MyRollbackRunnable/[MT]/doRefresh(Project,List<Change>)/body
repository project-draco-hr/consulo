{
  final LocalHistoryAction action=LocalHistory.getInstance().startAction(myOperationName);
  final Runnable forAwtThread=new Runnable(){
    public void run(){
      action.finish();
      LocalHistory.getInstance().putSystemLabel(myProject,(myLocalHistoryActionName == null) ? myOperationName : myLocalHistoryActionName,-1);
      final VcsDirtyScopeManager manager=PeriodicalTasksCloser.getInstance().safeGetComponent(project,VcsDirtyScopeManager.class);
      VcsGuess vcsGuess=new VcsGuess(myProject);
      for (      Change change : changesToRefresh) {
        final ContentRevision beforeRevision=change.getBeforeRevision();
        final ContentRevision afterRevision=change.getAfterRevision();
        if ((!change.isIsReplaced()) && beforeRevision != null && Comparing.equal(beforeRevision,afterRevision)) {
          manager.fileDirty(beforeRevision.getFile());
        }
 else {
          markDirty(manager,vcsGuess,beforeRevision);
          markDirty(manager,vcsGuess,afterRevision);
        }
      }
      myAfterRefresh.run();
    }
  }
;
  RefreshVFsSynchronously.updateChangesForRollback(changesToRefresh);
  WaitForProgressToShow.runOrInvokeLaterAboveProgress(forAwtThread,null,project);
}
