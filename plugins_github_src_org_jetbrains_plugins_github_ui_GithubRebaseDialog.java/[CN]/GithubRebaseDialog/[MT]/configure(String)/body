{
  setTitle("Rebase GitHub");
  myShowRemoteBranchesCheckBox.setSelected(true);
  myShowRemoteBranchesCheckBox.getParent().remove(myShowRemoteBranchesCheckBox);
  myGitRootComboBox.setEnabled(false);
  myLocalBranches.clear();
  final String originName=parent.substring(0,parent.lastIndexOf('/'));
  final ArrayList<GitBranch> remoteCopy=new ArrayList<GitBranch>();
  remoteCopy.addAll(myRemoteBranches);
  myRemoteBranches.clear();
  final String filter="/" + originName + "/";
  for (  GitBranch branch : remoteCopy) {
    if (branch.getFullName().contains(filter)) {
      myRemoteBranches.add(branch);
    }
  }
  myOntoComboBox.setRenderer(new ListCellRendererWrapper<GitBranch>(myOntoComboBox.getRenderer()){
    @Override public void customize(    final JList list,    final GitBranch value,    final int index,    final boolean selected,    final boolean hasFocus){
      final String branchName=value.getFullName();
      if (branchName.contains(filter)) {
        setText(parent + "/" + branchName.substring(branchName.lastIndexOf(filter) + filter.length()));
      }
    }
  }
);
  myFromComboBox.setRenderer(new ListCellRendererWrapper<GitBranch>(myFromComboBox.getRenderer()){
    @Override public void customize(    final JList list,    final GitBranch value,    final int index,    final boolean selected,    final boolean hasFocus){
      final String branchName=value.getFullName();
      if (branchName.contains(filter)) {
        setText(parent + "/" + branchName.substring(branchName.lastIndexOf(filter) + filter.length()));
      }
    }
  }
);
  updateOntoFrom();
  final String preselected="/" + originName + "/master";
  for (  GitBranch remoteBranch : myRemoteBranches) {
    if (remoteBranch.getFullName().endsWith(preselected)) {
      myOntoComboBox.setSelectedItem(remoteBranch);
      GitUIUtil.getTextField(myOntoComboBox).setText(parent + "/master");
      break;
    }
  }
}
