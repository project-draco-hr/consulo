{
  setTitle("Rebase GitHub");
  myInteractiveCheckBox.setSelected(false);
  myShowRemoteBranchesCheckBox.setSelected(true);
  myShowRemoteBranchesCheckBox.getParent().remove(myShowRemoteBranchesCheckBox);
  myGitRootComboBox.setEnabled(false);
  myLocalBranches.clear();
  final ArrayList<GitBranch> remoteCopy=new ArrayList<GitBranch>();
  remoteCopy.addAll(myRemoteBranches);
  myRemoteBranches.clear();
  final String filter="/" + originName + "/";
  for (  GitBranch branch : remoteCopy) {
    if (branch.getFullName().contains(filter)) {
      myRemoteBranches.add(branch);
    }
  }
  updateOntoFrom();
  GitBranch remoteBranch=null;
  String currentLocalBranchName=null;
  try {
    final GitBranch currentBranch=GitBranch.current(myProject,gitRoot());
    if (currentBranch != null) {
      currentLocalBranchName=currentBranch.getName();
    }
  }
 catch (  VcsException e) {
  }
  if (currentLocalBranchName != null) {
    remoteBranch=findBranch("/" + originName + "/"+ currentLocalBranchName);
  }
  if (remoteBranch == null) {
    remoteBranch=findBranch("/" + originName + "/master");
  }
  if (remoteBranch != null) {
    myOntoComboBox.setSelectedItem(remoteBranch);
    GitUIUtil.getTextField(myOntoComboBox).setText(remoteBranch.getFullName());
  }
}
