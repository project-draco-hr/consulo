{
  return doExecute(new Executor<Collection<MavenArtifact>>(){
    public Collection<MavenArtifact> execute() throws Exception {
      try {
        Plugin mavenPlugin=new Plugin();
        mavenPlugin.setGroupId(plugin.getGroupId());
        mavenPlugin.setArtifactId(plugin.getArtifactId());
        mavenPlugin.setVersion(plugin.getVersion());
        MavenProject project=RemoteNativeMavenProjectHolder.findprojectById(nativeMavenProjectId);
        PluginDescriptor result=getComponent(PluginManager.class).verifyPlugin(mavenPlugin,project,myImpl.getSettings(),myImpl.getLocalRepository());
        if (!transitive)         return Collections.emptyList();
        Map<MavenArtifactInfo,MavenArtifact> resolvedArtifacts=new THashMap<MavenArtifactInfo,MavenArtifact>();
        for (        Artifact each : (Iterable<Artifact>)result.getIntroducedDependencyArtifacts()) {
          resolveIfNecessary(new MavenArtifactInfo(each.getGroupId(),each.getArtifactId(),each.getVersion(),each.getType(),null),repositories,resolvedArtifacts);
        }
        for (        ComponentDependency each : (List<ComponentDependency>)result.getDependencies()) {
          resolveIfNecessary(new MavenArtifactInfo(each.getGroupId(),each.getArtifactId(),each.getVersion(),each.getType(),null),repositories,resolvedArtifacts);
        }
        return new THashSet<MavenArtifact>(resolvedArtifacts.values());
      }
 catch (      Exception e) {
        MavenFacadeGlobalsManager.getLogger().info(e);
        return Collections.emptyList();
      }
    }
  }
);
}
