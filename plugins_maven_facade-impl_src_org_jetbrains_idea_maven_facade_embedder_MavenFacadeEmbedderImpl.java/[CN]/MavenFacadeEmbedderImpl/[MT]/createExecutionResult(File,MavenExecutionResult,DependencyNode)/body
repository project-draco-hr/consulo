{
  Collection<MavenProjectProblem> problems=MavenProjectProblem.createProblemsList();
  THashSet<MavenId> unresolvedArtifacts=new THashSet<MavenId>();
  validate(file,result.getExceptions(),problems,unresolvedArtifacts);
  MavenProject mavenProject=result.getMavenProject();
  if (mavenProject == null)   return new MavenWrapperExecutionResult(null,problems,unresolvedArtifacts);
  MavenModel model=MavenModelConverter.convertModel(mavenProject.getModel(),mavenProject.getCompileSourceRoots(),mavenProject.getTestCompileSourceRoots(),mavenProject.getArtifacts(),(rootNode == null ? Collections.emptyList() : rootNode.getChildren()),mavenProject.getExtensionArtifacts(),getLocalRepositoryFile());
  Collection<MavenProfile> activatedProfiles=MavenModelConverter.convertProfiles(mavenProject.getActiveProfiles());
  RemoteNativeMavenProjectHolder holder=new RemoteNativeMavenProjectHolder(mavenProject);
  try {
    UnicastRemoteObject.exportObject(holder,0);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(e);
  }
  MavenWrapperExecutionResult.ProjectData data=new MavenWrapperExecutionResult.ProjectData(model,MavenModelConverter.convertToMap(mavenProject.getModel()),holder,activatedProfiles);
  return new MavenWrapperExecutionResult(data,problems,unresolvedArtifacts);
}
