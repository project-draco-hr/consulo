{
  ArrayList<Change> changes=new ArrayList<Change>();
  final Date commitDate=GitUtil.parseTimestampWithNFEReport(s.line(),handler,s.getAllText());
  final String revisionNumber=s.line();
  final String parentsLine=s.line();
  final String[] parents=parentsLine.length() == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : parentsLine.split(" ");
  String authorName=s.line();
  String committerName=s.line();
  committerName=GitUtil.adjustAuthorName(authorName,committerName);
  String commentSubject=s.boundedToken('\u0003',true);
  s.nextLine();
  String commentBody=s.boundedToken('\u0003',true);
  String fullComment;
  if (commentSubject.length() == 0) {
    fullComment=commentBody;
  }
 else   if (commentBody.length() == 0) {
    fullComment=commentSubject;
  }
 else {
    fullComment=commentSubject + "\n" + commentBody;
  }
  GitRevisionNumber thisRevision=new GitRevisionNumber(revisionNumber,commitDate);
  if (skipDiffsForMerge || (parents.length <= 1)) {
    final GitRevisionNumber parentRevision=parents.length > 0 ? resolveReference(project,root,parents[0]) : null;
    parseChanges(project,root,thisRevision,local ? null : parentRevision,s,changes,null);
  }
 else {
    for (    String parent : parents) {
      final GitRevisionNumber parentRevision=resolveReference(project,root,parent);
      GitSimpleHandler diffHandler=new GitSimpleHandler(project,root,GitCommand.DIFF);
      diffHandler.setNoSSH(true);
      diffHandler.setSilent(true);
      diffHandler.addParameters("--name-status","-M",parentRevision.getRev(),thisRevision.getRev());
      String diff=diffHandler.run();
      parseChanges(project,root,thisRevision,parentRevision,diff,changes,null);
      if (changes.size() > 0) {
        break;
      }
    }
  }
  String changeListName=String.format("%s(%s)",commentSubject,revisionNumber);
  return new GitCommittedChangeList(changeListName,fullComment,committerName,thisRevision,commitDate,changes,revertable);
}
