{
  while (s.hasMoreData()) {
    FileStatus status=null;
    if (s.isEol()) {
      s.nextLine();
      continue;
    }
    if ("CADUMR".indexOf(s.peek()) == -1) {
      return;
    }
    String[] tokens=s.line().split("\t");
    final ContentRevision before;
    final ContentRevision after;
    final String path=tokens[tokens.length - 1];
switch (tokens[0].charAt(0)) {
case 'C':
case 'A':
      before=null;
    status=FileStatus.ADDED;
  after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
case 'U':
status=FileStatus.MERGED_WITH_CONFLICTS;
case 'M':
if (status == null) {
status=FileStatus.MODIFIED;
}
before=GitContentRevision.createRevision(vcsRoot,path,parentRevision,project,false,true,true);
after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
case 'D':
status=FileStatus.DELETED;
before=GitContentRevision.createRevision(vcsRoot,path,parentRevision,project,true,true,true);
after=null;
break;
case 'R':
status=FileStatus.MODIFIED;
before=GitContentRevision.createRevision(vcsRoot,tokens[1],parentRevision,project,true,true,true);
after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
default :
throw new VcsException("Unknown file status: " + Arrays.asList(tokens));
}
if (ignoreNames == null || !ignoreNames.contains(path)) {
changes.add(new Change(before,after,status));
}
}
}
