{
  ArrayList<Change> changes=new ArrayList<Change>();
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitHandler.SHOW);
  h.setNoSSH(true);
  h.setSilent(true);
  h.addParameters("--name-status","--no-abbrev","-M","--pretty=format:%ct%n%H%n%P%n%an%x20%x3C%ae%x3E%n%cn%x20%x3C%ce%x3E%n%s%n%x00%n%b%n%x00","--encoding=UTF-8",revisionName,"--");
  String output=h.run();
  try {
    String[] lines=output.split("\n");
    int i=0;
    final Date commitDate=GitUtil.parseTimestamp(lines[i++]);
    final String revisionNumber=lines[i++];
    final String parentsLine=lines[i++];
    final String[] parents=parentsLine.length() == 0 ? new String[0] : parentsLine.split(" ");
    String authorName=lines[i++];
    String committerName=lines[i++];
    committerName=GitUtil.adjustAuthorName(authorName,committerName);
    StringBuilder builder=new StringBuilder();
    while (!"\u0000".equals(lines[i])) {
      if (builder.length() > 0) {
        builder.append('\n');
      }
      builder.append(lines[i++]);
    }
    i++;
    String commentSubject=builder.toString();
    builder=new StringBuilder();
    while (!"\u0000".equals(lines[i])) {
      if (builder.length() > 0) {
        builder.append('\n');
      }
      builder.append(lines[i++]);
    }
    i++;
    String commentBody=builder.toString();
    String fullComment;
    if (commentSubject.length() == 0) {
      fullComment=commentBody;
    }
 else     if (commentBody.length() == 0) {
      fullComment=commentSubject;
    }
 else {
      fullComment=commentBody + "\n\n" + commentSubject;
    }
    GitRevisionNumber thisRevision=new GitRevisionNumber(revisionNumber,commitDate);
    GitRevisionNumber parentRevision=parents.length > 0 ? loadRevision(project,root,parents[0]) : null;
    long number=Long.parseLong(revisionNumber.substring(0,15),16) << 4 + Integer.parseInt(revisionNumber.substring(15,16),16);
    if (parents.length <= 1) {
      parseChanges(project,root,thisRevision,parentRevision,lines,i,changes,null);
    }
 else {
      i=0;
      do {
        GitSimpleHandler diffHandler=new GitSimpleHandler(project,root,GitHandler.DIFF);
        diffHandler.setNoSSH(true);
        diffHandler.setSilent(true);
        diffHandler.addParameters("--name-status","-M",parentRevision.getRev(),thisRevision.getRev());
        String diff=diffHandler.run();
        parseChanges(project,root,thisRevision,parentRevision,diff.split("\n"),0,changes,null);
        if (changes.size() > 0) {
          break;
        }
        parentRevision=loadRevision(project,root,parents[i]);
      }
 while (i < parents.length);
    }
    return new CommittedChangeListImpl(commentSubject + "(" + revisionNumber+ ")",fullComment,committerName,number,commitDate,changes);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  VcsException e) {
    throw e;
  }
catch (  Exception e) {
    throw new VcsException(e);
  }
}
