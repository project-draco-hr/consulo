{
  ArrayList<Change> changes=new ArrayList<Change>();
  final Date commitDate=GitUtil.parseTimestamp(s.line());
  final String revisionNumber=s.line();
  final String parentsLine=s.line();
  final String[] parents=parentsLine.length() == 0 ? new String[0] : parentsLine.split(" ");
  String authorName=s.line();
  String committerName=s.line();
  committerName=GitUtil.adjustAuthorName(authorName,committerName);
  String commentSubject=s.boundedToken('\u0000',true);
  s.nextLine();
  String commentBody=s.boundedToken('\u0000',true);
  String fullComment;
  if (commentSubject.length() == 0) {
    fullComment=commentBody;
  }
 else   if (commentBody.length() == 0) {
    fullComment=commentSubject;
  }
 else {
    fullComment=commentBody + "\n\n" + commentSubject;
  }
  GitRevisionNumber thisRevision=new GitRevisionNumber(revisionNumber,commitDate);
  GitRevisionNumber parentRevision=parents.length > 0 ? loadRevision(project,root,parents[0]) : null;
  long number=Long.parseLong(revisionNumber.substring(0,15),16) << 4 + Integer.parseInt(revisionNumber.substring(15,16),16);
  if (parents.length <= 1) {
    parseChanges(project,root,thisRevision,parentRevision,s,changes,null);
  }
 else {
    int i=0;
    do {
      if (i != 0) {
        parentRevision=loadRevision(project,root,parents[i]);
      }
      GitSimpleHandler diffHandler=new GitSimpleHandler(project,root,GitHandler.DIFF);
      diffHandler.setNoSSH(true);
      diffHandler.setSilent(true);
      diffHandler.addParameters("--name-status","-M",parentRevision.getRev(),thisRevision.getRev());
      String diff=diffHandler.run();
      parseChanges(project,root,thisRevision,parentRevision,diff,changes,null);
      if (changes.size() > 0) {
        break;
      }
      i++;
    }
 while (i < parents.length);
  }
  return new CommittedChangeListImpl(commentSubject + "(" + revisionNumber+ ")",fullComment,committerName,number,commitDate,changes);
}
