{
  final Document document=editor.getDocument();
  final PsiFile file=PsiDocumentManager.getInstance(myMethod.getProject()).getPsiFile(document);
  boolean signatureSelected=allItems.length > 1 && CodeInsightSettings.getInstance().SHOW_SIGNATURES_IN_LOOKUPS || ((LookupItem)item).getAttribute(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) != null;
  final boolean needLeftParenth=file == null || isToInsertParenth(file.findElementAt(startOffset));
  final boolean hasParams=needLeftParenth && hasParams(item,allItems,signatureSelected);
  int offset=editor.getCaretModel().getOffset();
  int tailOffset=SimpleInsertHandlerFactory.handleParenses(hasParams,needLeftParenth,offset,document,file,editor,tailType);
  tailOffset=insertExplicitTypeParams(item,document,offset,tailOffset,file);
  final PsiType type=myMethod.getReturnType();
  if (completionChar == '!' && type != null && PsiType.BOOLEAN.isAssignableFrom(type)) {
    PsiDocumentManager.getInstance(myMethod.getProject()).commitDocument(document);
    final PsiMethodCallExpression methodCall=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethodCallExpression.class,false);
    if (methodCall != null) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
      document.insertString(methodCall.getTextRange().getStartOffset(),"!");
      tailOffset++;
    }
  }
  if (needLeftParenth && hasParams) {
    AutoPopupController.getInstance(myMethod.getProject()).autoPopupParameterInfo(editor,signatureSelected ? myMethod : null);
  }
  return tailOffset;
}
