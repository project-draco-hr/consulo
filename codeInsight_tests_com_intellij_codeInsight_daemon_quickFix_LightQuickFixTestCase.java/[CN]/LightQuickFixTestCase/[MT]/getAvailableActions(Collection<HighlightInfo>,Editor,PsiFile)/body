{
  final int offset=editor.getCaretModel().getOffset();
  final List<IntentionAction> availableActions=new ArrayList<IntentionAction>();
  if (infos != null) {
    for (    HighlightInfo info : infos) {
      final int startOffset=info.fixStartOffset;
      final int endOffset=info.fixEndOffset;
      if (startOffset <= offset && offset <= endOffset && info.quickFixActionRanges != null) {
        for (        Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
          final HighlightInfo.IntentionActionDescriptor actionDescriptor=pair.first;
          final TextRange range=pair.second;
          final IntentionAction action=actionDescriptor.getAction();
          final Project project=editor.getProject();
          if (range.getStartOffset() <= offset && offset <= range.getEndOffset() && action.isAvailable(project,editor,file)) {
            availableActions.add(action);
            final List<IntentionAction> actions=actionDescriptor.getOptions(file.findElementAt(editor.getCaretModel().getOffset()));
            if (actions != null) {
              for (              IntentionAction intentionAction : actions) {
                if (intentionAction.isAvailable(project,editor,file)) {
                  availableActions.add(intentionAction);
                }
              }
            }
          }
        }
      }
    }
  }
  return availableActions;
}
