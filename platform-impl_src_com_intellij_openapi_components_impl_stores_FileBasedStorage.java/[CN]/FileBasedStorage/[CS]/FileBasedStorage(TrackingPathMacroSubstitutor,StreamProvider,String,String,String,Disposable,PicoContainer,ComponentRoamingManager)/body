{
  super(pathMacroManager,parentDisposable,rootElementName,streamProvider,fileSpec,componentRoamingManager);
  Application app=ApplicationManager.getApplication();
  if (isOptionsFile(filePath)) {
    if (!myConfigDirectoryRefreshed && (app.isUnitTestMode() || app.isDispatchThread())) {
      try {
        String optionsPath=PathManager.getOptionsPath();
        File optionsFile=new File(optionsPath);
        if (!optionsFile.exists()) {
          optionsFile.mkdirs();
        }
        VirtualFile voptionsFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(optionsFile);
        if (voptionsFile != null) {
          voptionsFile.getChildren();
          if (voptionsFile instanceof NewVirtualFile) {
            ((NewVirtualFile)voptionsFile).markDirtyRecursively();
          }
          voptionsFile.refresh(false,true);
        }
      }
  finally {
        myConfigDirectoryRefreshed=true;
      }
    }
  }
 else {
    if (app.isUnitTestMode() || app.isDispatchThread()) {
      VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath);
      if (virtualFile != null) {
        virtualFile.refresh(false,false);
      }
    }
  }
  myRootElementName=rootElementName;
  myFilePath=filePath;
  myFile=FILE_SYSTEM.createFile(myFilePath);
  VirtualFileTracker virtualFileTracker=(VirtualFileTracker)picoContainer.getComponentInstanceOfType(VirtualFileTracker.class);
  MessageBus messageBus=(MessageBus)picoContainer.getComponentInstanceOfType(MessageBus.class);
  if (virtualFileTracker != null && messageBus != null) {
    final String path=myFile.getAbsolutePath();
    final String fileUrl=LocalFileSystem.PROTOCOL + "://" + path.replace(File.separatorChar,'/');
    final Listener listener=messageBus.syncPublisher(StateStorage.STORAGE_TOPIC);
    virtualFileTracker.addTracker(fileUrl,new VirtualFileAdapter(){
      public void contentsChanged(      final VirtualFileEvent event){
        listener.storageFileChanged(event,FileBasedStorage.this);
      }
    }
,false,this);
  }
}
