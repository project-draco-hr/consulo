{
  super(pathMacroManager,parentDisposable,rootElementName,streamProvider,fileSpec,componentRoamingManager,localComponentVersionProvider);
  Application app=ApplicationManager.getApplication();
  if (!myConfigDirectoryRefreshed && (app.isUnitTestMode() || app.isDispatchThread())) {
    try {
      String configDirectoryPath=PathManager.getConfigPath(true);
      VirtualFile configDir=LocalFileSystem.getInstance().refreshAndFindFileByPath(configDirectoryPath);
      if (configDir != null) {
        requestAllChildren(configDir);
        if (configDir instanceof NewVirtualFile) {
          ((NewVirtualFile)configDir).markDirtyRecursively();
        }
        configDir.refresh(false,true);
      }
    }
  finally {
      myConfigDirectoryRefreshed=true;
    }
  }
  if (!isOptionsFile(filePath) && !Thread.holdsLock(PsiLock.LOCK) && (app.isUnitTestMode() || app.isDispatchThread())) {
    VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath);
    if (virtualFile != null) {
      virtualFile.refresh(false,false);
    }
  }
  myRootElementName=rootElementName;
  myFilePath=filePath;
  myFile=FILE_SYSTEM.createFile(myFilePath);
  VirtualFileTracker virtualFileTracker=(VirtualFileTracker)picoContainer.getComponentInstanceOfType(VirtualFileTracker.class);
  MessageBus messageBus=(MessageBus)picoContainer.getComponentInstanceOfType(MessageBus.class);
  if (virtualFileTracker != null && messageBus != null) {
    final String path=myFile.getAbsolutePath();
    final String fileUrl=LocalFileSystem.PROTOCOL_PREFIX + path.replace(File.separatorChar,'/');
    final Listener listener=messageBus.syncPublisher(STORAGE_TOPIC);
    virtualFileTracker.addTracker(fileUrl,new VirtualFileAdapter(){
      public void contentsChanged(      final VirtualFileEvent event){
        listener.storageFileChanged(event,FileBasedStorage.this);
      }
    }
,false,this);
  }
}
