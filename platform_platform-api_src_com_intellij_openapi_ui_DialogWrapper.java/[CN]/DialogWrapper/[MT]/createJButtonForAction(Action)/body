{
  JButton button;
  if (action instanceof OptionAction) {
    final Action[] options=((OptionAction)action).getOptions();
    button=new JBOptionButton(action,options);
    final JBOptionButton jbOptionButton=(JBOptionButton)button;
    jbOptionButton.setOptionTooltipText("Press " + KeymapUtil.getKeystrokeText(SHOW_OPTION_KEYSTROKE) + " to expand");
    myOptionsButtons.add(jbOptionButton);
  }
 else {
    button=new JButton(action);
  }
  String text=button.getText();
  if (SystemInfo.isMac) {
    button.putClientProperty("JButton.buttonType","text");
  }
  if (text != null) {
    int mnemonic=0;
    StringBuilder plainText=new StringBuilder();
    for (int i=0; i < text.length(); i++) {
      char ch=text.charAt(i);
      if (ch == '_' || ch == '&') {
        i++;
        if (i >= text.length()) {
          break;
        }
        ch=text.charAt(i);
        if (ch != '_' && ch != '&') {
          int vk=ch;
          if (vk >= 'a' && vk <= 'z') {
            vk-='a' - 'A';
          }
          mnemonic=vk;
        }
      }
      plainText.append(ch);
    }
    button.setText(plainText.toString());
    final Object name=action.getValue(Action.NAME);
    if (mnemonic == KeyEvent.VK_Y && "Yes".equals(name)) {
      myYesAction=action;
    }
 else     if (mnemonic == KeyEvent.VK_N && "No".equals(name)) {
      myNoAction=action;
    }
    button.setMnemonic(mnemonic);
  }
  setMargin(button);
  if (action.getValue(DEFAULT_ACTION) != null) {
    if (myPeer != null && !myPeer.isHeadless()) {
      getRootPane().setDefaultButton(button);
    }
  }
  return button;
}
