{
  Action[] actions=filter(createActions());
  Action[] leftSideActions=createLeftSideActions();
  List<JButton> buttons=new ArrayList<JButton>();
  boolean hasHelpToMoveToLeftSide=false;
  if (UIUtil.isUnderAquaLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) {
    hasHelpToMoveToLeftSide=true;
    actions=ArrayUtil.remove(actions,getHelpAction());
  }
  if (SystemInfo.isMac) {
    for (    Action action : actions) {
      if (action instanceof MacOtherAction) {
        leftSideActions=ArrayUtil.append(leftSideActions,action);
        actions=ArrayUtil.remove(actions,action);
        break;
      }
    }
  }
 else   if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) {
    leftSideActions=ArrayUtil.append(leftSideActions,getHelpAction());
    actions=ArrayUtil.remove(actions,getHelpAction());
  }
  JPanel panel=new JPanel(new BorderLayout());
  final JPanel lrButtonsPanel=new JPanel(new GridBagLayout());
  final Insets insets=SystemInfo.isMacOSLeopard ? new Insets(0,0,0,0) : new Insets(8,0,0,0);
  if (actions.length > 0 || leftSideActions.length > 0) {
    int gridx=0;
    if (leftSideActions.length > 0) {
      JPanel buttonsPanel=createButtons(leftSideActions,buttons);
      lrButtonsPanel.add(buttonsPanel,new GridBagConstraints(gridx++,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,insets,0,0));
    }
    lrButtonsPanel.add(Box.createHorizontalGlue(),new GridBagConstraints(gridx++,0,1,1,1,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,insets,0,0));
    if (actions.length > 0) {
      if (SystemInfo.isMac) {
        int okNdx=ArrayUtil.indexOf(actions,getOKAction());
        if (okNdx >= 0 && okNdx != actions.length - 1) {
          actions=ArrayUtil.append(ArrayUtil.remove(actions,getOKAction()),getOKAction());
        }
        int cancelNdx=ArrayUtil.indexOf(actions,getCancelAction());
        if (cancelNdx > 0) {
          actions=ArrayUtil.mergeArrays(new Action[]{getCancelAction()},ArrayUtil.remove(actions,getCancelAction()));
        }
        if (!hasFocusedAction(actions)) {
          int ndx=ArrayUtil.find(actions,getCancelAction());
          if (ndx >= 0) {
          }
        }
      }
      JPanel buttonsPanel=createButtons(actions,buttons);
      lrButtonsPanel.add(buttonsPanel,new GridBagConstraints(gridx++,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,insets,0,0));
    }
    if (SwingConstants.CENTER == myButtonAlignment) {
      lrButtonsPanel.add(Box.createHorizontalGlue(),new GridBagConstraints(gridx,0,1,1,1,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,insets,0,0));
    }
    myButtons=buttons.toArray(new JButton[buttons.size()]);
  }
  if (hasHelpToMoveToLeftSide) {
    JButton helpButton=new JButton(getHelpAction());
    helpButton.putClientProperty("JButton.buttonType","help");
    helpButton.setText("");
    helpButton.setMargin(insets);
    helpButton.setToolTipText(ActionsBundle.actionDescription("HelpTopics"));
    panel.add(helpButton,BorderLayout.WEST);
  }
  panel.add(lrButtonsPanel,BorderLayout.CENTER);
  if (myDoNotAsk != null) {
    myCheckBoxDoNotShowDialog=new JCheckBox(myDoNotAsk.getDoNotShowMessage());
    JComponent southPanel=panel;
    if (!myDoNotAsk.canBeHidden()) {
      return southPanel;
    }
    final JPanel withCB=addDoNotShowCheckBox(southPanel,myCheckBoxDoNotShowDialog);
    myCheckBoxDoNotShowDialog.setSelected(!myDoNotAsk.isToBeShown());
    DialogUtil.registerMnemonic(myCheckBoxDoNotShowDialog,'&');
    panel=withCB;
  }
  panel.setBorder(IdeBorderFactory.createEmptyBorder(new Insets(8,0,0,0)));
  return panel;
}
