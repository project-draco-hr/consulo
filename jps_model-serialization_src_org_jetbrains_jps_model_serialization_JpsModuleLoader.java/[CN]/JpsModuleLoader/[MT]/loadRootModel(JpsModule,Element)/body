{
  for (  Element contentElement : getChildren(rootModelComponent,"content")) {
    final String url=contentElement.getAttributeValue(URL_ATTRIBUTE);
    module.getContentRootsList().addUrl(url);
    for (    Element sourceElement : getChildren(contentElement,"sourceFolder")) {
      final String sourceUrl=sourceElement.getAttributeValue(URL_ATTRIBUTE);
      final String packagePrefix=sourceElement.getAttributeValue("packagePrefix");
      final boolean testSource=Boolean.parseBoolean(sourceElement.getAttributeValue("isTestSource"));
      final JavaSourceRootType rootType=testSource ? JavaSourceRootType.SOURCE : JavaSourceRootType.TEST_SOURCE;
      module.addSourceRoot(rootType,sourceUrl,new JavaSourceRootProperties(packagePrefix));
    }
    for (    Element excludeElement : getChildren(contentElement,"excludeFolder")) {
      module.getExcludeRootsList().addUrl(excludeElement.getAttributeValue(URL_ATTRIBUTE));
    }
  }
  final JpsDependenciesList dependenciesList=module.getDependenciesList();
  final JpsElementFactory elementFactory=JpsElementFactory.getInstance();
  int moduleLibraryNum=0;
  for (  Element orderEntry : getChildren(rootModelComponent,"orderEntry")) {
    String type=orderEntry.getAttributeValue("type");
    if ("sourceFolder".equals(type)) {
      dependenciesList.addModuleSourceDependency();
    }
 else     if ("jdk".equals(type)) {
      String sdkName=orderEntry.getAttributeValue("jdkName");
      String sdkTypeId=orderEntry.getAttributeValue("jskType");
      final JpsSdkType<?> sdkType=getSdkType(sdkTypeId);
      dependenciesList.addSdkDependency(sdkType);
      module.getSdkReferencesTable().setSdkReference(sdkType,elementFactory.createLibraryReference(sdkName,elementFactory.createGlobalReference()));
    }
 else     if ("inheritedJdk".equals(type)) {
      dependenciesList.addSdkDependency(JpsJavaSdkType.INSTANCE);
    }
 else     if ("library".equals(type)) {
      String name=orderEntry.getAttributeValue("name");
      String level=orderEntry.getAttributeValue("level");
      final JpsLibraryDependency dependency=dependenciesList.addLibraryDependency(elementFactory.createLibraryReference(name,createLibraryTableReference(level)));
      loadModuleDependencyProperties(dependency,orderEntry);
    }
 else     if ("module-library".equals(type)) {
      final Element moduleLibraryElement=orderEntry.getChild("library");
      final JpsLibrary library=JpsLibraryTableLoader.loadLibrary(moduleLibraryElement);
      module.addModuleLibrary(library);
      final JpsLibraryDependency dependency=dependenciesList.addLibraryDependency(library);
      loadModuleDependencyProperties(dependency,orderEntry);
      moduleLibraryNum++;
    }
 else     if ("module".equals(type)) {
      String name=orderEntry.getAttributeValue("module-name");
      final JpsModuleDependency dependency=dependenciesList.addModuleDependency(elementFactory.createModuleReference(name));
      loadModuleDependencyProperties(dependency,orderEntry);
    }
  }
  for (  JpsModelLoaderExtension extension : getLoaderExtensions()) {
    extension.loadRootModel(module,rootModelComponent);
  }
}
