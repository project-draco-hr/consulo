{
  int numCellsForRank=nestedBestRanks[rankValue].length;
  ArrayList<MedianCellSorter> medianValues=new ArrayList<MedianCellSorter>(numCellsForRank);
  boolean[] reservedPositions=new boolean[numCellsForRank];
  for (int i=0; i < numCellsForRank; i++) {
    mxGraphAbstractHierarchyCell cell=nestedBestRanks[rankValue][i];
    MedianCellSorter sorterEntry=new MedianCellSorter();
    sorterEntry.cell=cell;
    Collection<mxGraphAbstractHierarchyCell> nextLevelConnectedCells;
    if (downwardSweep) {
      nextLevelConnectedCells=cell.getNextLayerConnectedCells(rankValue);
    }
 else {
      nextLevelConnectedCells=cell.getPreviousLayerConnectedCells(rankValue);
    }
    int nextRankValue;
    if (downwardSweep) {
      nextRankValue=rankValue + 1;
    }
 else {
      nextRankValue=rankValue - 1;
    }
    if (nextLevelConnectedCells != null && nextLevelConnectedCells.size() != 0) {
      sorterEntry.medianValue=medianValue(nextLevelConnectedCells,nextRankValue);
      medianValues.add(sorterEntry);
    }
 else {
      reservedPositions[cell.getGeneralPurposeVariable(rankValue)]=true;
    }
  }
  MedianCellSorter[] medianArray=medianValues.toArray(new MedianCellSorter[medianValues.size()]);
  Arrays.sort(medianArray);
  int index=0;
  for (int i=0; i < numCellsForRank; i++) {
    if (!reservedPositions[i]) {
      MedianCellSorter wrapper=medianArray[index++];
      wrapper.cell.setGeneralPurposeVariable(rankValue,i);
    }
  }
}
