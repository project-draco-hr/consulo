{
  int totalCrossings=0;
  mxGraphHierarchyRank rank=model.ranks.get(new Integer(i));
  mxGraphHierarchyRank previousRank=model.ranks.get(new Integer(i - 1));
  int currentRankSize=rank.size();
  int previousRankSize=previousRank.size();
  int[][] connections=new int[currentRankSize][previousRankSize];
  Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();
  while (iter.hasNext()) {
    mxGraphAbstractHierarchyCell cell=iter.next();
    int rankPosition=cell.getGeneralPurposeVariable(i);
    Collection<mxGraphAbstractHierarchyCell> connectedCells=cell.getPreviousLayerConnectedCells(i);
    Iterator<mxGraphAbstractHierarchyCell> iter2=connectedCells.iterator();
    while (iter2.hasNext()) {
      mxGraphAbstractHierarchyCell connectedCell=iter2.next();
      int otherCellRankPosition=connectedCell.getGeneralPurposeVariable(i - 1);
      connections[rankPosition][otherCellRankPosition]=201207;
    }
  }
  for (int j=0; j < currentRankSize; j++) {
    for (int k=0; k < previousRankSize; k++) {
      if (connections[j][k] == 201207) {
        for (int j2=j + 1; j2 < currentRankSize; j2++) {
          for (int k2=0; k2 < k; k2++) {
            if (connections[j2][k2] == 201207) {
              totalCrossings++;
            }
          }
        }
        for (int j2=0; j2 < j; j2++) {
          for (int k2=k + 1; k2 < previousRankSize; k2++) {
            if (connections[j2][k2] == 201207) {
              totalCrossings++;
            }
          }
        }
      }
    }
  }
  return totalCrossings / 2;
}
