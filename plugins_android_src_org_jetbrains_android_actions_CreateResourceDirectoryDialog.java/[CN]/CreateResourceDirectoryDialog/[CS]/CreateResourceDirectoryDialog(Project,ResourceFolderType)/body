{
  super(project);
  myResourceTypeComboBox.setModel(new EnumComboBoxModel<ResourceFolderType>(ResourceFolderType.class));
  myResourceTypeComboBox.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof ResourceFolderType) {
        setText(((ResourceFolderType)value).getName());
      }
    }
  }
);
  myDeviceConfiguratorPanel=new DeviceConfiguratorPanel(){
    @Override public void applyEditors(){
      try {
        doApplyEditors();
        final FolderConfiguration config=myDeviceConfiguratorPanel.getConfiguration();
        final ResourceFolderType selectedResourceType=(ResourceFolderType)myResourceTypeComboBox.getSelectedItem();
        myDirectoryNameTextField.setText(selectedResourceType != null ? config.getFolderName(selectedResourceType) : "");
        myErrorLabel.setText("");
      }
 catch (      InvalidOptionValueException e) {
        myErrorLabel.setText("<html><body><font color=\"red\">" + e.getMessage() + "</font></body></html>");
        myDirectoryNameTextField.setText("");
      }
      setOKActionEnabled(myDirectoryNameTextField.getText().length() > 0);
    }
  }
;
  myDeviceConfiguratorWrapper.add(myDeviceConfiguratorPanel,BorderLayout.CENTER);
  myResourceTypeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myDeviceConfiguratorPanel.applyEditors();
    }
  }
);
  if (resType != null) {
    myResourceTypeComboBox.setSelectedItem(resType);
    myResourceTypeComboBox.setEnabled(false);
  }
  myDeviceConfiguratorPanel.updateAll();
  setOKActionEnabled(myDirectoryNameTextField.getText().length() > 0);
  init();
}
