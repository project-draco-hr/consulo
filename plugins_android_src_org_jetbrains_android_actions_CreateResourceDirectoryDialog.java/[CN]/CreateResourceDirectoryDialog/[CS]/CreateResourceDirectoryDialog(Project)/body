{
  super(project);
  myResourceTypeComboBox.setModel(new EnumComboBoxModel<ResourceFolderType>(ResourceFolderType.class));
  myResourceTypeComboBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value instanceof ResourceFolderType) {
        value=((ResourceFolderType)value).getName();
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  myDeviceConfiguratorPanel=new DeviceConfiguratorPanel(null){
    @Override public void applyEditors(){
      try {
        doApplyEditors();
        final FolderConfiguration config=myDeviceConfiguratorPanel.getConfiguration();
        final ResourceFolderType selectedResourceType=(ResourceFolderType)myResourceTypeComboBox.getSelectedItem();
        myDirectoryNameTextField.setText(selectedResourceType != null ? config.getFolderName(selectedResourceType) : "");
        myErrorLabel.setText("");
      }
 catch (      InvalidOptionValueException e) {
        myErrorLabel.setText("<html><body><font color=\"red\">" + e.getMessage() + "</font></body></html>");
        myDirectoryNameTextField.setText("");
      }
      setOKActionEnabled(myDirectoryNameTextField.getText().length() > 0);
    }
  }
;
  myDeviceConfiguratorWrapper.add(myDeviceConfiguratorPanel,BorderLayout.CENTER);
  myResourceTypeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myDeviceConfiguratorPanel.applyEditors();
    }
  }
);
  myDeviceConfiguratorPanel.updateAll();
  init();
}
