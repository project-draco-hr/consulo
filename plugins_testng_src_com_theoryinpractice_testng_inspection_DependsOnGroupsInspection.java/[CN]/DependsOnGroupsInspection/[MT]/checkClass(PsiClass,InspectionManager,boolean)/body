{
  if (!psiClass.getContainingFile().isWritable())   return null;
  PsiAnnotation[] annotations=TestNGUtil.getTestNGAnnotations(psiClass);
  if (annotations.length == 0)   return EMPTY;
  List<ProblemDescriptor> problemDescriptors=new ArrayList<ProblemDescriptor>();
  for (  PsiAnnotation annotation : annotations) {
    PsiNameValuePair dep=null;
    PsiNameValuePair[] params=annotation.getParameterList().getAttributes();
    for (    PsiNameValuePair param : params) {
      if (param.getName() != null && param.getName().matches("(groups|dependsOnGroups)")) {
        dep=param;
        break;
      }
    }
    if (dep != null) {
      if (dep.getValue() != null) {
        LOGGER.info("Found " + dep.getName() + " with: "+ dep.getValue().getText());
        Matcher matcher=PATTERN.matcher(dep.getValue().getText());
        while (matcher.find()) {
          String methodName=matcher.group(1);
          if (!groups.contains(methodName)) {
            LOGGER.info("group doesn't exist:" + methodName);
            ProblemDescriptor descriptor=manager.createProblemDescriptor(annotation,"Group '" + methodName + "' is undefined.",new GroupNameQuickFix(methodName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
            problemDescriptors.add(descriptor);
          }
        }
      }
    }
  }
  return problemDescriptors.toArray(new ProblemDescriptor[]{});
}
