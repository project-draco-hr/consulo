{
  final PsiMember enclosingElement=((CallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  if (!(enclosingElement instanceof PsiMethod)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final PsiMethod method=(PsiMethod)enclosingElement;
  final ArrayList methods=new ArrayList();
  final PsiCodeBlock body=method.getBody();
  if (body != null) {
    visitor(body,methods);
  }
  final PsiMethod baseMethod=(PsiMethod)((CallHierarchyNodeDescriptor)getBaseDescriptor()).getTargetElement();
  final PsiClass baseClass=baseMethod.getContainingClass();
  final HashMap methodToDescriptorMap=new HashMap();
  final ArrayList result=new ArrayList();
  for (int i=0; i < methods.size(); i++) {
    final PsiMethod calledMethod=(PsiMethod)methods.get(i);
    if (CallHierarchyBrowser.SCOPE_CLASS.equals(myScopeType)) {
      if (!PsiTreeUtil.isAncestor(baseClass,calledMethod,true)) {
        continue;
      }
    }
 else     if (CallHierarchyBrowser.SCOPE_PROJECT.equals(myScopeType)) {
      if (!calledMethod.getManager().isInProject(calledMethod)) {
        continue;
      }
    }
    CallHierarchyNodeDescriptor d=(CallHierarchyNodeDescriptor)methodToDescriptorMap.get(calledMethod);
    if (d == null) {
      d=new CallHierarchyNodeDescriptor(myProject,descriptor,calledMethod,false);
      methodToDescriptorMap.put(calledMethod,d);
      result.add(d);
    }
 else {
      d.incrementUsageCount();
    }
  }
  final PsiSearchHelper searchHelper=method.getManager().getSearchHelper();
  final PsiMethod[] overridingMethods=searchHelper.findOverridingMethods(method,GlobalSearchScope.projectScope(myProject),true);
  for (int i=0; i < overridingMethods.length; i++) {
    final PsiMethod overridingMethod=overridingMethods[i];
    final CallHierarchyNodeDescriptor node=new CallHierarchyNodeDescriptor(myProject,descriptor,overridingMethod,false);
    if (!result.contains(node))     result.add(node);
  }
  return result.toArray(new Object[result.size()]);
}
