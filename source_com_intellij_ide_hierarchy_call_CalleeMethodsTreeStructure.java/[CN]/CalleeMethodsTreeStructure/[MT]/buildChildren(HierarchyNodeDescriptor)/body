{
  final PsiMember enclosingElement=((CallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  if (!(enclosingElement instanceof PsiMethod)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final PsiMethod method=(PsiMethod)enclosingElement;
  final ArrayList<PsiMethod> methods=new ArrayList<PsiMethod>();
  final PsiCodeBlock body=method.getBody();
  if (body != null) {
    visitor(body,methods);
  }
  final PsiMethod baseMethod=(PsiMethod)((CallHierarchyNodeDescriptor)getBaseDescriptor()).getTargetElement();
  final PsiClass baseClass=baseMethod.getContainingClass();
  final HashMap<PsiMethod,CallHierarchyNodeDescriptor> methodToDescriptorMap=new HashMap<PsiMethod,CallHierarchyNodeDescriptor>();
  final ArrayList<CallHierarchyNodeDescriptor> result=new ArrayList<CallHierarchyNodeDescriptor>();
  for (  final PsiMethod calledMethod : methods) {
    if (!isInScope(baseClass,calledMethod))     continue;
    CallHierarchyNodeDescriptor d=methodToDescriptorMap.get(calledMethod);
    if (d == null) {
      d=new CallHierarchyNodeDescriptor(myProject,descriptor,calledMethod,false,false);
      methodToDescriptorMap.put(calledMethod,d);
      result.add(d);
    }
 else {
      d.incrementUsageCount();
    }
  }
  final PsiSearchHelper searchHelper=method.getManager().getSearchHelper();
  final PsiMethod[] overridingMethods=searchHelper.findOverridingMethods(method,method.getUseScope(),true);
  for (  final PsiMethod overridingMethod : overridingMethods) {
    if (!isInScope(baseClass,overridingMethod))     continue;
    final CallHierarchyNodeDescriptor node=new CallHierarchyNodeDescriptor(myProject,descriptor,overridingMethod,false,false);
    if (!result.contains(node))     result.add(node);
  }
  return result.toArray(new Object[result.size()]);
}
