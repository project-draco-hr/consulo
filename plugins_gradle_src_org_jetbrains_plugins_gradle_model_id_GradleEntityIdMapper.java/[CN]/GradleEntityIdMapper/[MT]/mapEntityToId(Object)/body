{
  final Ref<GradleEntityId> result=new Ref<GradleEntityId>();
  if (entity instanceof GradleEntity) {
    ((GradleEntity)entity).invite(new GradleEntityVisitor(){
      @Override public void visit(      @NotNull GradleProject project){
        result.set(new GradleProjectId(GradleEntityOwner.GRADLE));
      }
      @Override public void visit(      @NotNull GradleModule module){
        result.set(new GradleModuleId(GradleEntityOwner.GRADLE,module.getName()));
      }
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        result.set(new GradleLibraryDependencyId(GradleEntityOwner.GRADLE,dependency.getOwnerModule().getName(),dependency.getName()));
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        result.set(new GradleLibraryDependencyId(GradleEntityOwner.GRADLE,dependency.getOwnerModule().getName(),dependency.getName()));
      }
      @Override public void visit(      @NotNull GradleContentRoot contentRoot){
      }
      @Override public void visit(      @NotNull GradleLibrary library){
      }
    }
);
  }
  if (result.get() == null) {
    GradleUtil.dispatch(entity,new IntellijEntityVisitor(){
      @Override public void visit(      @NotNull Project project){
        result.set(new GradleProjectId(GradleEntityOwner.INTELLIJ));
      }
      @Override public void visit(      @NotNull Module module){
        result.set(new GradleModuleId(GradleEntityOwner.INTELLIJ,module.getName()));
      }
      @Override public void visit(      @NotNull LibraryOrderEntry libraryDependency){
        final String libraryName=libraryDependency.getLibraryName();
        if (libraryName != null) {
          result.set(new GradleLibraryDependencyId(GradleEntityOwner.INTELLIJ,libraryDependency.getOwnerModule().getName(),libraryName));
        }
      }
      @Override public void visit(      @NotNull ModuleOrderEntry moduleDependency){
        result.set(new GradleModuleDependencyId(GradleEntityOwner.INTELLIJ,moduleDependency.getOwnerModule().getName(),moduleDependency.getModuleName()));
      }
    }
);
  }
  final Object r=result.get();
  if (r == null) {
    throw new IllegalArgumentException(String.format("Can't map entity '%s' to id element",entity));
  }
  return (T)r;
}
