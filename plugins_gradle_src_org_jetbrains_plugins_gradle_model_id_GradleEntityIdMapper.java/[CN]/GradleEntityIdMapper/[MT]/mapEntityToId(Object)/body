{
  final Ref<GradleEntityId> result=new Ref<GradleEntityId>();
  if (entity instanceof GradleEntity) {
    ((GradleEntity)entity).invite(new GradleEntityVisitor(){
      @Override public void visit(      @NotNull GradleProject project){
        result.set(new GradleProjectId(GradleEntityOwner.GRADLE));
      }
      @Override public void visit(      @NotNull GradleModule module){
        result.set(new GradleModuleId(GradleEntityOwner.GRADLE,module.getName()));
      }
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        result.set(new GradleModuleDependencyId(GradleEntityOwner.GRADLE,dependency.getOwnerModule().getName(),dependency.getName()));
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        result.set(new GradleLibraryDependencyId(GradleEntityOwner.GRADLE,dependency.getOwnerModule().getName(),dependency.getName()));
      }
      @Override public void visit(      @NotNull GradleContentRoot contentRoot){
        result.set(new GradleContentRootId(GradleEntityOwner.GRADLE,contentRoot.getOwnerModule().getName(),contentRoot.getRootPath()));
      }
      @Override public void visit(      @NotNull GradleLibrary library){
        result.set(new GradleLibraryId(GradleEntityOwner.GRADLE,library.getName()));
      }
      @Override public void visit(      @NotNull GradleJar jar){
        result.set(jar.getId());
      }
    }
);
  }
  if (result.get() == null) {
    GradleUtil.dispatch(entity,new IdeEntityVisitor(){
      @Override public void visit(      @NotNull Project project){
        result.set(new GradleProjectId(GradleEntityOwner.IDE));
      }
      @Override public void visit(      @NotNull Module module){
        result.set(new GradleModuleId(GradleEntityOwner.IDE,module.getName()));
      }
      @Override public void visit(      @NotNull ModuleAwareContentRoot contentRoot){
        final String path=contentRoot.getFile().getPath();
        result.set(new GradleContentRootId(GradleEntityOwner.IDE,contentRoot.getModule().getName(),path));
      }
      @Override public void visit(      @NotNull LibraryOrderEntry libraryDependency){
        String libraryName=libraryDependency.getLibraryName();
        if (libraryName == null) {
          final Library library=libraryDependency.getLibrary();
          if (library != null) {
            libraryName=GradleUtil.getLibraryName(library);
          }
        }
        if (libraryName == null) {
          return;
        }
        result.set(new GradleLibraryDependencyId(GradleEntityOwner.IDE,libraryDependency.getOwnerModule().getName(),libraryName));
      }
      @Override public void visit(      @NotNull ModuleOrderEntry moduleDependency){
        result.set(new GradleModuleDependencyId(GradleEntityOwner.IDE,moduleDependency.getOwnerModule().getName(),moduleDependency.getModuleName()));
      }
      @Override public void visit(      @NotNull Library library){
        result.set(new GradleLibraryId(GradleEntityOwner.IDE,GradleUtil.getLibraryName(library)));
      }
    }
);
  }
  final Object r=result.get();
  if (r == null) {
    throw new IllegalArgumentException(String.format("Can't map entity '%s' to id element",entity));
  }
  return (T)r;
}
