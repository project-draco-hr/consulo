{
  return CachedValuesManager.getManager(getProject()).getCachedValue(this,new CachedValueProvider<List<GrVariable>>(){
    @Override public Result<List<GrVariable>> compute(){
      List<GrVariable> result=RecursionManager.doPreventingRecursion(GroovyScriptClass.this,true,new Computable<List<GrVariable>>(){
        @Override public List<GrVariable> compute(){
          final List<GrVariable> result=new ArrayList<GrVariable>();
          myFile.accept(new PsiRecursiveElementWalkingVisitor(){
            @Override public void visitElement(            PsiElement element){
              if (element instanceof GrVariableDeclaration && ((GrVariableDeclaration)element).getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_FIELD) != null) {
                Collections.addAll(result,((GrVariableDeclaration)element).getVariables());
              }
              super.visitElement(element);
            }
          }
);
          return result;
        }
      }
);
      if (result == null) {
        result=Collections.emptyList();
      }
      return Result.create(result,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,myFile);
    }
  }
);
}
