{
  return CachedValuesManager.getManager(getProject()).getCachedValue(this,new CachedValueProvider<GrField[]>(){
    @Override public Result<GrField[]> compute(){
      List<GrField> result=RecursionManager.doPreventingRecursion(GroovyScriptClass.this,true,new Computable<List<GrField>>(){
        @Override public List<GrField> compute(){
          final List<GrField> result=new ArrayList<GrField>();
          myFile.accept(new GroovyRecursiveElementVisitor(){
            @Override public void visitVariableDeclaration(            GrVariableDeclaration element){
              if (element.getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_FIELD) != null) {
                for (                GrVariable variable : element.getVariables()) {
                  result.add(GrScriptField.createScriptFieldFrom(variable));
                }
              }
              super.visitVariableDeclaration(element);
            }
          }
);
          return result;
        }
      }
);
      if (result == null) {
        result=Collections.emptyList();
      }
      return Result.create(result.toArray(new GrField[result.size()]),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,myFile);
    }
  }
);
}
