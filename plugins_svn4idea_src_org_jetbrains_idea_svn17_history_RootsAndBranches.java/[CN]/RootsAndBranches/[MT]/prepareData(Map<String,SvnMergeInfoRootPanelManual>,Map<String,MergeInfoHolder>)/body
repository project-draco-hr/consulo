{
  final List<WCInfoWithBranches> roots=myDataLoader.loadRoots();
  final JPanel mainPanel=new JPanel(new GridBagLayout());
  boolean onlyOneRoot=roots.size() == 1;
  final GridBagConstraints gb=new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  mainPanel.add(myToolbarComponent,gb);
  ++gb.gridy;
  for (  final WCInfoWithBranches root : roots) {
    if (root == null) {
      continue;
    }
    final SvnMergeInfoRootPanelManual panel=new SvnMergeInfoRootPanelManual(myProject,new NullableFunction<WCInfoWithBranches,WCInfoWithBranches>(){
      public WCInfoWithBranches fun(      final WCInfoWithBranches wcInfoWithBranches){
        final WCInfoWithBranches newInfo=myDataLoader.reloadInfo(wcInfoWithBranches);
        if (newInfo == null) {
          myProject.getMessageBus().syncPublisher(SvnVcs17.WC_CONVERTED).run();
          return wcInfoWithBranches;
        }
        return newInfo;
      }
    }
,new Runnable(){
      public void run(){
        final MergeInfoHolder holder=getHolder(root.getPath());
        if (holder != null) {
          holder.refresh(false);
        }
      }
    }
,onlyOneRoot,root);
    panels.put(root.getPath(),panel);
    holders.put(root.getPath(),createHolder(panel));
    final JPanel contentPanel=panel.getContentPanel();
    mainPanel.add(contentPanel,gb);
    ++gb.gridy;
  }
  if (panels.size() == 1) {
    for (    SvnMergeInfoRootPanelManual panel : panels.values()) {
      panel.setOnlyOneRoot(true);
    }
  }
  return mainPanel;
}
