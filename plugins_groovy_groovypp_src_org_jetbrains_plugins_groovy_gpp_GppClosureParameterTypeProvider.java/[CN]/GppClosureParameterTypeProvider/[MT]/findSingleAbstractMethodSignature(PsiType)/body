{
  if (type instanceof PsiClassType) {
    PsiClassType classType=(PsiClassType)type;
    final PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
    final PsiClass psiClass=resolveResult.getElement();
    if (psiClass == null) {
      return null;
    }
    final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    final Collection<MethodSignature> signatures=OverrideImplementUtil.getMethodSignaturesToImplement(psiClass);
    for (Iterator<MethodSignature> iterator=signatures.iterator(); iterator.hasNext(); ) {
      MethodSignature next=iterator.next();
      if (next instanceof MethodSignatureBackedByPsiMethod) {
        final PsiMethod method=((MethodSignatureBackedByPsiMethod)next).getMethod();
        if (hasTraitImplementation(method)) {
          iterator.remove();
        }
      }
    }
    if (signatures.size() == 1) {
      final PsiType[] parameterTypes=signatures.iterator().next().getParameterTypes();
      return ContainerUtil.map2Array(parameterTypes,PsiType.class,new Function<PsiType,PsiType>(){
        public PsiType fun(        PsiType type){
          return substitutor.substitute(type);
        }
      }
);
    }
 else     if (signatures.isEmpty()) {
      final List<PsiMethod> abstractMethods=ContainerUtil.findAll(psiClass.getMethods(),new Condition<PsiMethod>(){
        public boolean value(        PsiMethod method){
          return method.hasModifierProperty(PsiModifier.ABSTRACT) && !hasTraitImplementation(method);
        }
      }
);
      if (abstractMethods.size() == 1) {
        return ContainerUtil.map2Array(abstractMethods.get(0).getParameterList().getParameters(),PsiType.class,new Function<PsiParameter,PsiType>(){
          public PsiType fun(          PsiParameter psiParameter){
            return substitutor.substitute(psiParameter.getType());
          }
        }
);
      }
    }
  }
  return null;
}
