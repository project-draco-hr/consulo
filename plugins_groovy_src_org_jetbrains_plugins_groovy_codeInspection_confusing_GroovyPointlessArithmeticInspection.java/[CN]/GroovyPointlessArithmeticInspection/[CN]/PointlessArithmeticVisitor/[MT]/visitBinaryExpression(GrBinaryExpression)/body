{
  super.visitBinaryExpression(expression);
  final GrExpression rhs=expression.getRightOperand();
  if (rhs == null)   return;
  final IElementType sign=expression.getOperationTokenType();
  if (!arithmeticTokens.contains(sign))   return;
  final GrExpression lhs=expression.getLeftOperand();
  final boolean isPointless;
  if (sign.equals(mPLUS)) {
    isPointless=additionExpressionIsPointless(lhs,rhs);
  }
 else   if (sign.equals(mMINUS)) {
    isPointless=subtractionExpressionIsPointless(rhs);
  }
 else   if (sign.equals(mSTAR)) {
    isPointless=multiplyExpressionIsPointless(lhs,rhs);
  }
 else   if (sign.equals(mDIV)) {
    isPointless=divideExpressionIsPointless(rhs);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression);
}
