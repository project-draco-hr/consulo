{
  try {
    int offset=editor.getCaretModel().getOffset();
    if (aClass.getLBrace() == null) {
      PsiClass psiClass=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory().createClass("X");
      aClass.addRangeAfter(psiClass.getLBrace(),psiClass.getRBrace(),aClass.getLastChild());
    }
    int lbraceOffset=aClass.getLBrace().getTextOffset();
    List<PsiGenerationInfo<PsiMethod>> resultMembers;
    if (offset <= lbraceOffset || aClass.isEnum()) {
      resultMembers=new ArrayList<PsiGenerationInfo<PsiMethod>>();
      for (      PsiMethodMember candidate : candidates) {
        Collection<PsiMethod> prototypes=overrideOrImplementMethod(aClass,candidate.getElement(),candidate.getSubstitutor(),copyJavadoc,insertOverrideWherePossible);
        List<PsiGenerationInfo<PsiMethod>> infos=convert2GenerationInfos(prototypes);
        for (        PsiGenerationInfo<PsiMethod> info : infos) {
          PsiElement anchor=getDefaultAnchorToOverrideOrImplement(aClass,candidate.getElement(),candidate.getSubstitutor());
          info.insert(aClass,anchor,true);
          resultMembers.add(info);
        }
      }
    }
 else {
      List<PsiGenerationInfo<PsiMethod>> prototypes=overrideOrImplementMethods(aClass,candidates,copyJavadoc,insertOverrideWherePossible);
      resultMembers=GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(),offset,prototypes);
    }
    if (!resultMembers.isEmpty()) {
      resultMembers.get(0).positionCaret(editor,true);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
