{
  if (myType.isValid())   return myType;
  final PsiElement classElement=myClass.getElement();
  if (!(classElement instanceof PsiClass))   return null;
  Map<PsiTypeParameter,PsiType> resurrected=new HashMap<PsiTypeParameter,PsiType>();
  final Set<Map.Entry<SmartPsiElementPointer,SmartTypePointer>> set=myMap.entrySet();
  for (Iterator<Map.Entry<SmartPsiElementPointer,SmartTypePointer>> iterator=set.iterator(); iterator.hasNext(); ) {
    Map.Entry<SmartPsiElementPointer,SmartTypePointer> entry=iterator.next();
    PsiElement element=entry.getKey().getElement();
    if (element instanceof PsiTypeParameter) {
      resurrected.put(((PsiTypeParameter)element),entry.getValue().getType());
    }
  }
  Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator((PsiClass)classElement);
  while (iterator.hasNext()) {
    PsiTypeParameter typeParameter=iterator.next();
    if (!resurrected.containsKey(typeParameter)) {
      resurrected.put(typeParameter,null);
    }
  }
  final PsiSubstitutor resurrectedSubstitutor=PsiSubstitutorImpl.createSubstitutor(resurrected);
  myType=new PsiImmediateClassType(((PsiClass)classElement),resurrectedSubstitutor);
  return myType;
}
