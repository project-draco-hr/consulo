{
  final TypeMigrationProcessor processor=new TypeMigrationProcessor(project,root,rules){
    @Override public void performRefactoring(    final UsageInfo[] usages){
      super.performRefactoring(usages);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final List<PsiElement> result=new ArrayList<PsiElement>();
          for (          UsageInfo usage : usages) {
            final PsiElement element=usage.getElement();
            if (element instanceof PsiMethod) {
              result.add(((PsiMethod)element).getReturnTypeElement());
            }
 else             if (element instanceof PsiVariable) {
              result.add(((PsiVariable)element).getTypeElement());
            }
 else             if (element != null) {
              result.add(element);
            }
          }
          if (editor != null)           RefactoringUtil.highlightAllOccurrences(project,PsiUtilBase.toPsiElementArray(result),editor);
        }
      }
);
    }
  }
;
  processor.run();
}
