{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(file))   return;
  final int offset=editor.getCaretModel().getOffset();
  final PsiReference psiReference=file.findReferenceAt(offset);
  if (psiReference != null) {
    final PsiElement element=psiReference.getElement();
    final PsiClass psiClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
    LOG.assertTrue(psiClass != null);
    final PsiElement target=psiReference.resolve();
    LOG.assertTrue(target instanceof PsiClass);
    final PsiClass targetClass=(PsiClass)target;
    new WriteCommandAction(project,getText(),file){
      protected void run(      Result result) throws Throwable {
        for (        PsiField constField : targetClass.getAllFields()) {
          final PsiClass containingClass=constField.getContainingClass();
          for (          PsiReference ref : ReferencesSearch.search(constField,new LocalSearchScope(psiClass))) {
            ((PsiReferenceExpressionImpl)ref).bindToElementViaStaticImport(containingClass,constField.getName(),((PsiJavaFile)file).getImportList());
          }
        }
        element.delete();
        JavaCodeStyleManager.getInstance(project).optimizeImports(file);
      }
    }
.execute();
  }
 else {
    final PsiElement identifier=file.findElementAt(offset);
    LOG.assertTrue(identifier instanceof PsiIdentifier);
    final PsiElement element=identifier.getParent();
    LOG.assertTrue(element instanceof PsiClass);
    final PsiClass targetClass=(PsiClass)element;
    final Map<PsiFile,Map<PsiField,Set<PsiReference>>> refs=new HashMap<PsiFile,Map<PsiField,Set<PsiReference>>>();
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
        for (        PsiClass psiClass : ClassInheritorsSearch.search(targetClass)) {
          final PsiFile psiFile=psiClass.getContainingFile();
          if (psiFile instanceof PsiJavaFile) {
            for (            PsiField field : targetClass.getAllFields()) {
              final String fieldName=field.getName();
              if (progressIndicator != null) {
                progressIndicator.setText2(fieldName);
              }
              for (              PsiReference reference : ReferencesSearch.search(field,new LocalSearchScope(psiClass))) {
                if (reference == null) {
                  continue;
                }
                Map<PsiField,Set<PsiReference>> references=refs.get(psiFile);
                if (references == null) {
                  references=new HashMap<PsiField,Set<PsiReference>>();
                  refs.put(psiFile,references);
                }
                Set<PsiReference> fieldsRefs=references.get(field);
                if (fieldsRefs == null) {
                  fieldsRefs=new HashSet<PsiReference>();
                  references.put(field,fieldsRefs);
                }
                fieldsRefs.add(reference);
              }
            }
          }
        }
      }
    }
,"Find constant field usages...",true,project)) {
      return;
    }
    final Set<PsiJavaCodeReferenceElement> refs2Unimplement=new HashSet<PsiJavaCodeReferenceElement>();
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        for (        PsiClass psiClass : DirectClassInheritorsSearch.search(targetClass)) {
          PsiFile containingFile=psiClass.getContainingFile();
          if (!refs.containsKey(containingFile)) {
            refs.put(containingFile,new HashMap<PsiField,Set<PsiReference>>());
          }
          if (collectExtendsImplements(targetClass,psiClass.getExtendsList(),refs2Unimplement))           continue;
          collectExtendsImplements(targetClass,psiClass.getImplementsList(),refs2Unimplement);
        }
      }
    }
,"Find references in implement/extends lists...",true,project)) {
      return;
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        for (        PsiJavaCodeReferenceElement referenceElement : refs2Unimplement) {
          referenceElement.delete();
        }
        for (        PsiFile psiFile : refs.keySet()) {
          final Map<PsiField,Set<PsiReference>> map=refs.get(psiFile);
          for (          PsiField psiField : map.keySet()) {
            final PsiClass containingClass=psiField.getContainingClass();
            final String fieldName=psiField.getName();
            for (            PsiReference reference : map.get(psiField)) {
              if (reference instanceof PsiReferenceExpressionImpl) {
                ((PsiReferenceExpressionImpl)reference).bindToElementViaStaticImport(containingClass,fieldName,((PsiJavaFile)psiFile).getImportList());
              }
 else {
                reference.bindToElement(psiField);
              }
            }
          }
        }
        for (        PsiFile psiFile : refs.keySet()) {
          JavaCodeStyleManager.getInstance(project).optimizeImports(psiFile);
        }
      }
    }
);
  }
}
