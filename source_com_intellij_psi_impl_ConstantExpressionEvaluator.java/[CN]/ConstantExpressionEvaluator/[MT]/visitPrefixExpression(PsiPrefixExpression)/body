{
  Object operand;
  if (expression.getOperand() == null) {
    myValue=null;
    return;
  }
  operand=accept(expression.getOperand());
  if (operand == null || expression.getOperationSign() == null) {
    myValue=null;
    return;
  }
  IElementType tokenType=expression.getOperationSign().getTokenType();
  Object value=null;
  if (tokenType == JavaTokenType.MINUS) {
    if (operand instanceof Character)     operand=new Integer(((Character)operand).charValue());
    if (operand instanceof Number) {
      if (operand instanceof Double) {
        value=new Double(-((Number)operand).doubleValue());
        checkRealNumberOverflow(value,null,null,expression);
      }
 else       if (operand instanceof Float) {
        value=new Float(-((Number)operand).floatValue());
        checkRealNumberOverflow(value,null,null,expression);
      }
 else       if (operand instanceof Long) {
        value=new Long(-((Number)operand).longValue());
        if (myThrowExceptionOnOverflow && !(expression.getOperand() instanceof PsiLiteralExpression) && ((Number)operand).longValue() == Long.MIN_VALUE) {
          throw new ConstantEvaluationOverflowException(expression);
        }
      }
 else {
        value=new Integer(-((Number)operand).intValue());
        if (myThrowExceptionOnOverflow && !(expression.getOperand() instanceof PsiLiteralExpression) && ((Number)operand).intValue() == Integer.MIN_VALUE) {
          throw new ConstantEvaluationOverflowException(expression);
        }
      }
    }
  }
 else   if (tokenType == JavaTokenType.PLUS) {
    if (operand instanceof Character)     operand=new Integer(((Character)operand).charValue());
    if (operand instanceof Number) {
      value=operand;
    }
  }
 else   if (tokenType == JavaTokenType.TILDE) {
    if (operand instanceof Character)     operand=new Integer(((Character)operand).charValue());
    if (isIntegral(operand)) {
      if (operand instanceof Long) {
        value=new Long(~((Number)operand).longValue());
      }
 else {
        value=new Integer(~((Number)operand).intValue());
      }
    }
  }
 else   if (tokenType == JavaTokenType.EXCL) {
    if (operand instanceof Boolean) {
      value=Boolean.valueOf(!((Boolean)operand).booleanValue());
    }
  }
  myValue=value;
}
