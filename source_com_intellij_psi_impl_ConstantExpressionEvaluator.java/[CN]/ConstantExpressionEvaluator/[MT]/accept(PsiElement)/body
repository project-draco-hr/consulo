{
  if (element == null)   return null;
  Project project=element.getProject();
  CachedValue<Map<PsiElement,Object>> cachedValue=project.getUserData(CONSTANT_VALUE_MAP_KEY);
  if (!myThrowExceptionOnOverflow) {
    if (cachedValue == null) {
      cachedValue=PsiManager.getInstance(project).getCachedValuesManager().createCachedValue(new CachedValueProvider<Map<PsiElement,Object>>(){
        public Result<Map<PsiElement,Object>> compute(){
          Map<PsiElement,Object> value=Collections.synchronizedMap(new SoftHashMap<PsiElement,Object>());
          return new Result<Map<PsiElement,Object>>(value,PsiModificationTracker.MODIFICATION_COUNT);
        }
      }
,false);
      project.putUserData(CONSTANT_VALUE_MAP_KEY,cachedValue);
    }
    Map<PsiElement,Object> map=cachedValue.getValue();
    Object value=map.get(element);
    if (value == null) {
      myValue=null;
      element.accept(this);
      map.put(element,myValue == null ? NO_VALUE : myValue);
      return myValue;
    }
 else     if (value == NO_VALUE) {
      return null;
    }
 else {
      return value;
    }
  }
 else {
    myValue=null;
    element.accept(this);
    return myValue;
  }
}
