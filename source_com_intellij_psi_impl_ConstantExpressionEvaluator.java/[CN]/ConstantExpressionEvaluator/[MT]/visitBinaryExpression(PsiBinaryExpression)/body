{
  Object lOperandValue=accept(expression.getLOperand());
  if (lOperandValue == null) {
    myValue=null;
    return;
  }
  Object rOperandValue=accept(expression.getROperand());
  if (rOperandValue == null) {
    myValue=null;
    return;
  }
  PsiJavaToken operationSign=expression.getOperationSign();
  final IElementType tokenType=operationSign.getTokenType();
  Object value=null;
  if (tokenType == JavaTokenType.LT) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() < ((Number)rOperandValue).doubleValue());
    }
  }
 else   if (tokenType == JavaTokenType.LE) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() <= ((Number)rOperandValue).doubleValue());
    }
  }
 else   if (tokenType == JavaTokenType.GT) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() > ((Number)rOperandValue).doubleValue());
    }
  }
 else   if (tokenType == JavaTokenType.GE) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() >= ((Number)rOperandValue).doubleValue());
    }
  }
 else   if (tokenType == JavaTokenType.EQEQ) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() == ((Number)rOperandValue).doubleValue());
    }
 else     if (lOperandValue instanceof String && rOperandValue instanceof String) {
      value=Boolean.valueOf(lOperandValue == rOperandValue);
    }
 else     if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() == ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.NE) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      value=Boolean.valueOf(((Number)lOperandValue).doubleValue() != ((Number)rOperandValue).doubleValue());
    }
 else     if (lOperandValue instanceof String && rOperandValue instanceof String) {
      value=Boolean.valueOf(lOperandValue != rOperandValue);
    }
 else     if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() != ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.PLUS) {
    if (lOperandValue instanceof String || rOperandValue instanceof String) {
      value=myInterner.intern(lOperandValue.toString() + rOperandValue.toString());
    }
 else {
      if (lOperandValue instanceof Character)       lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
      if (rOperandValue instanceof Character)       rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
      if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
        if (lOperandValue instanceof Double || rOperandValue instanceof Double) {
          value=new Double(((Number)lOperandValue).doubleValue() + ((Number)rOperandValue).doubleValue());
          checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
        }
 else         if (lOperandValue instanceof Float || rOperandValue instanceof Float) {
          value=new Float(((Number)lOperandValue).floatValue() + ((Number)rOperandValue).floatValue());
          checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
        }
 else         if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
          final long l=((Number)lOperandValue).longValue();
          final long r=((Number)rOperandValue).longValue();
          value=Long.valueOf(l + r);
          checkAdditionOverflow(((Long)value).longValue() >= 0,l >= 0,r >= 0,expression);
        }
 else {
          final int l=((Number)lOperandValue).intValue();
          final int r=((Number)rOperandValue).intValue();
          value=Integer.valueOf(l + r);
          checkAdditionOverflow(((Integer)value).intValue() >= 0,l >= 0,r >= 0,expression);
        }
      }
    }
  }
 else   if (tokenType == JavaTokenType.MINUS) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      if (lOperandValue instanceof Double || rOperandValue instanceof Double) {
        value=new Double(((Number)lOperandValue).doubleValue() - ((Number)rOperandValue).doubleValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Float || rOperandValue instanceof Float) {
        value=new Float(((Number)lOperandValue).floatValue() - ((Number)rOperandValue).floatValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        final long l=((Number)lOperandValue).longValue();
        final long r=((Number)rOperandValue).longValue();
        value=Long.valueOf(l - r);
        checkAdditionOverflow(((Long)value).longValue() >= 0,l >= 0,r < 0,expression);
      }
 else {
        final int l=((Number)lOperandValue).intValue();
        final int r=((Number)rOperandValue).intValue();
        value=Integer.valueOf(l - r);
        checkAdditionOverflow(((Integer)value).intValue() >= 0,l >= 0,r < 0,expression);
      }
    }
  }
 else   if (tokenType == JavaTokenType.ASTERISK) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      if (lOperandValue instanceof Double || rOperandValue instanceof Double) {
        value=new Double(((Number)lOperandValue).doubleValue() * ((Number)rOperandValue).doubleValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Float || rOperandValue instanceof Float) {
        value=new Float(((Number)lOperandValue).floatValue() * ((Number)rOperandValue).floatValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        final long l=((Number)lOperandValue).longValue();
        final long r=((Number)rOperandValue).longValue();
        value=Long.valueOf(l * r);
        checkMultiplicationOverflow(((Long)value).longValue(),l,r,expression);
      }
 else {
        final int l=((Number)lOperandValue).intValue();
        final int r=((Number)rOperandValue).intValue();
        value=Integer.valueOf(l * r);
        checkMultiplicationOverflow(((Integer)value).intValue(),l,r,expression);
      }
    }
  }
 else   if (tokenType == JavaTokenType.DIV) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      if (lOperandValue instanceof Double || rOperandValue instanceof Double) {
        value=new Double(((Number)lOperandValue).doubleValue() / ((Number)rOperandValue).doubleValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Float || rOperandValue instanceof Float) {
        value=new Float(((Number)lOperandValue).floatValue() / ((Number)rOperandValue).floatValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        final long r=((Number)rOperandValue).longValue();
        final long l=((Number)lOperandValue).longValue();
        checkDivisionOverflow(l,r,Long.MIN_VALUE,expression);
        value=r == 0 ? null : Long.valueOf(l / r);
      }
 else {
        final int r=((Number)rOperandValue).intValue();
        final int l=((Number)lOperandValue).intValue();
        checkDivisionOverflow(l,r,Integer.MIN_VALUE,expression);
        value=r == 0 ? null : Integer.valueOf(l / r);
      }
    }
  }
 else   if (tokenType == JavaTokenType.PERC) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (lOperandValue instanceof Number && rOperandValue instanceof Number) {
      double rVal=((Number)rOperandValue).doubleValue();
      if (myThrowExceptionOnOverflow && rVal == 0)       throw new ConstantEvaluationOverflowException(expression);
      if (lOperandValue instanceof Double || rOperandValue instanceof Double) {
        value=new Double(((Number)lOperandValue).doubleValue() % ((Number)rOperandValue).doubleValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Float || rOperandValue instanceof Float) {
        value=new Float(((Number)lOperandValue).floatValue() % ((Number)rOperandValue).floatValue());
        checkRealNumberOverflow(value,lOperandValue,rOperandValue,expression);
      }
 else       if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        final long l=((Number)lOperandValue).longValue();
        final long r=((Number)rOperandValue).longValue();
        checkDivisionOverflow(l,r,Long.MIN_VALUE,expression);
        value=r == 0 ? null : Long.valueOf(l % r);
      }
 else {
        final int l=((Number)lOperandValue).intValue();
        final int r=((Number)rOperandValue).intValue();
        checkDivisionOverflow(l,r,Integer.MIN_VALUE,expression);
        value=r == 0 ? null : Integer.valueOf(l % r);
      }
    }
  }
 else   if (tokenType == JavaTokenType.LTLT) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() << ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() << ((Number)rOperandValue).intValue());
      }
    }
  }
 else   if (tokenType == JavaTokenType.GTGT) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() >> ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() >> ((Number)rOperandValue).intValue());
      }
    }
  }
 else   if (tokenType == JavaTokenType.GTGTGT) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() >>> ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() >>> ((Number)rOperandValue).intValue());
      }
    }
  }
 else   if (tokenType == JavaTokenType.AND) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() & ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() & ((Number)rOperandValue).intValue());
      }
    }
 else     if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() && ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.OR) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() | ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() | ((Number)rOperandValue).intValue());
      }
    }
 else     if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() || ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.XOR) {
    if (lOperandValue instanceof Character)     lOperandValue=Integer.valueOf(((Character)lOperandValue).charValue());
    if (rOperandValue instanceof Character)     rOperandValue=Integer.valueOf(((Character)rOperandValue).charValue());
    if (isIntegral(lOperandValue) && isIntegral(rOperandValue)) {
      if (lOperandValue instanceof Long || rOperandValue instanceof Long) {
        value=Long.valueOf(((Number)lOperandValue).longValue() ^ ((Number)rOperandValue).longValue());
      }
 else {
        value=Integer.valueOf(((Number)lOperandValue).intValue() ^ ((Number)rOperandValue).intValue());
      }
    }
 else     if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() ^ ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.ANDAND) {
    if (lOperandValue instanceof Boolean && !((Boolean)lOperandValue).booleanValue()) {
      myValue=Boolean.FALSE;
      return;
    }
    if (rOperandValue instanceof Boolean && !((Boolean)rOperandValue).booleanValue()) {
      myValue=Boolean.FALSE;
      return;
    }
    if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() && ((Boolean)rOperandValue).booleanValue());
    }
  }
 else   if (tokenType == JavaTokenType.OROR) {
    if (lOperandValue instanceof Boolean && ((Boolean)lOperandValue).booleanValue()) {
      myValue=Boolean.TRUE;
      return;
    }
    if (rOperandValue instanceof Boolean && ((Boolean)rOperandValue).booleanValue()) {
      myValue=Boolean.TRUE;
      return;
    }
    if (lOperandValue instanceof Boolean && rOperandValue instanceof Boolean) {
      value=Boolean.valueOf(((Boolean)lOperandValue).booleanValue() || ((Boolean)rOperandValue).booleanValue());
    }
  }
  myValue=value;
}
