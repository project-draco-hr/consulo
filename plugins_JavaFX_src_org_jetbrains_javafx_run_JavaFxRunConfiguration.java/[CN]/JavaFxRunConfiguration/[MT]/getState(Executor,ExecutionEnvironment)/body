{
  final CommandLineState state=new CommandLineState(env){
    @Override protected ProcessHandler startProcess() throws ExecutionException {
      final GeneralCommandLine commandLine=createCommandLine();
      final OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString());
      ProcessTerminatedListener.attach(processHandler);
      return processHandler;
    }
    private GeneralCommandLine createCommandLine() throws ExecutionException {
      final Module module=getModule();
      if (module == null) {
        throw new ExecutionException(JavaFxBundle.message("invalid.module"));
      }
      final JavaFxFacet facet=FacetManager.getInstance(module).getFacetByType(JavaFxFacet.ID);
      if (facet == null) {
        throw new ExecutionException(JavaFxBundle.message("invalid.facet"));
      }
      final Sdk sdk=JavaFxSdkUtil.getSdk(facet);
      if (sdk == null) {
        throw new ExecutionException(JavaFxBundle.message("couldnt.find.javafx.sdk"));
      }
      final VirtualFile mainScriptFile=LocalFileSystem.getInstance().findFileByPath(MAIN_SCRIPT);
      if (mainScriptFile == null) {
        throw new ExecutionException(JavaFxBundle.message("couldnt.find.main.class"));
      }
      final String compilerOutputPath=JavaFxUtil.getCompilerOutputPath(ModuleUtil.findModuleForFile(mainScriptFile,module.getProject()));
      if (compilerOutputPath == null) {
        throw new ExecutionException(JavaFxBundle.message("wrong.compiler.output.path"));
      }
      final String binPath=FileUtil.toSystemDependentName(sdk.getHomePath() + "/bin/javafx");
      final GeneralCommandLine commandLine=new GeneralCommandLine();
      commandLine.setExePath(binPath);
      if (!StringUtil.isEmptyOrSpaces(JAVA_FX_PARAMETERS)) {
        commandLine.addParameters(JAVA_FX_PARAMETERS.split(" "));
      }
      commandLine.addParameter("-cp");
      commandLine.addParameter(FileUtil.toSystemDependentName(compilerOutputPath));
      commandLine.addParameter(JavaFxUtil.scriptNameToClassName(module.getProject(),MAIN_SCRIPT));
      if (!StringUtil.isEmptyOrSpaces(PROGRAM_PARAMETERS)) {
        commandLine.addParameters(PROGRAM_PARAMETERS.split(" "));
      }
      commandLine.setWorkDirectory(myWorkingDirectory);
      commandLine.setEnvParams(myEnvironmentVariables);
      commandLine.setPassParentEnvs(PASS_PARENT_VARIABLES);
      return commandLine;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuilderFactory.getInstance().createBuilder(getProject()));
  return state;
}
