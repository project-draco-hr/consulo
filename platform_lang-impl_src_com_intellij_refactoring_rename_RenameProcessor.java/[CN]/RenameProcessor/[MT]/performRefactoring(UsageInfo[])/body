{
  String message=null;
  try {
    for (    Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
      RenameUtil.checkRename(entry.getKey(),entry.getValue());
    }
  }
 catch (  IncorrectOperationException e) {
    message=e.getMessage();
  }
  if (message != null) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("rename.title"),message,getHelpID(),myProject);
    return;
  }
  List<Runnable> postRenameCallbacks=new ArrayList<Runnable>();
  for (  Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
    PsiElement element=entry.getKey();
    String newName=entry.getValue();
    final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
    RenameUtil.doRename(element,newName,extractUsagesForElement(element,usages),myProject,elementListener);
    Runnable postRenameCallback=RenamePsiElementProcessor.forElement(element).getPostRenameCallback(element,newName,elementListener);
    if (postRenameCallback != null) {
      postRenameCallbacks.add(postRenameCallback);
    }
  }
  for (  Runnable runnable : postRenameCallbacks) {
    runnable.run();
  }
  List<NonCodeUsageInfo> nonCodeUsages=new ArrayList<NonCodeUsageInfo>();
  for (  UsageInfo usage : usages) {
    if (usage instanceof NonCodeUsageInfo) {
      nonCodeUsages.add((NonCodeUsageInfo)usage);
    }
  }
  myNonCodeUsages=nonCodeUsages.toArray(new NonCodeUsageInfo[nonCodeUsages.size()]);
}
