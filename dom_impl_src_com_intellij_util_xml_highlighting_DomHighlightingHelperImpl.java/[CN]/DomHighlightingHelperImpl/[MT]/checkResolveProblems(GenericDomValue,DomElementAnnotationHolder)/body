{
  final XmlElement valueElement=DomUtil.getValueElement(element);
  if (valueElement != null && !isSoftReference(element)) {
    final SmartList<DomElementProblemDescriptor> list=new SmartList<DomElementProblemDescriptor>();
    final PsiReference[] psiReferences=myProvider.getReferencesByElement(valueElement);
    GenericDomValueReference domReference=null;
    for (    final PsiReference reference : psiReferences) {
      if (reference instanceof GenericDomValueReference) {
        domReference=(GenericDomValueReference)reference;
        break;
      }
    }
    final Converter converter=WrappingConverter.getDeepestConverter(element.getConverter(),element);
    final boolean domReferenceResolveOK=domReference != null && !hasBadResolve(element,domReference) || converter instanceof ResolvingConverter && ((ResolvingConverter)converter).getAdditionalVariants().contains(element.getStringValue());
    boolean hasBadResolve=false;
    if (!domReferenceResolveOK) {
      for (      final PsiReference reference : psiReferences) {
        if (reference != domReference && hasBadResolve(element,reference)) {
          hasBadResolve=true;
          list.add(holder.createResolveProblem(element,reference));
        }
      }
      final boolean isResolvingConverter=converter instanceof ResolvingConverter;
      if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(element,domReference=new GenericDomValueReference(element)))) {
        hasBadResolve=true;
        final String errorMessage=converter.getErrorMessage(element.getStringValue(),new ConvertContextImpl(DomManagerImpl.getDomInvocationHandler(element)));
        if (errorMessage != null && XmlHighlightVisitor.getErrorDescription(domReference) != null) {
          list.add(holder.createResolveProblem(element,domReference));
        }
      }
    }
    if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null) {
      final String errorMessage=converter.getErrorMessage(element.getStringValue(),new ConvertContextImpl(DomManagerImpl.getDomInvocationHandler(element)));
      if (errorMessage != null) {
        list.add(holder.createProblem(element,errorMessage));
      }
    }
    return list;
  }
  return Collections.emptyList();
}
