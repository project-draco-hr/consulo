{
  final Required required=element.getAnnotation(Required.class);
  if (required != null) {
    final XmlElement xmlElement=element.getXmlElement();
    if (required.value()) {
      if (xmlElement == null) {
        if (element instanceof GenericAttributeValue) {
          return Arrays.asList(holder.createProblem(element,IdeBundle.message("attribute.0.should.be.defined",element.getXmlElementName())));
        }
        return Arrays.asList(holder.createProblem(element,IdeBundle.message("child.tag.0.should.be.defined",element.getXmlElementName())));
      }
      if (element instanceof GenericDomValue) {
        return ContainerUtil.createMaybeSingletonList(checkRequiredGenericValue((GenericDomValue)element,required,holder));
      }
    }
  }
  final SmartList<DomElementProblemDescriptor> list=new SmartList<DomElementProblemDescriptor>();
  final DomGenericInfo info=element.getGenericInfo();
  for (  final DomChildrenDescription description : info.getChildrenDescriptions()) {
    if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) {
      final DomCollectionChildDescription childDescription=(DomCollectionChildDescription)description;
      final Required annotation=description.getAnnotation(Required.class);
      if (annotation != null && annotation.value()) {
        list.add(holder.createProblem(element,childDescription,IdeBundle.message("child.tag.0.should.be.defined",description.getXmlElementName())));
      }
    }
  }
  return list;
}
