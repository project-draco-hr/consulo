{
  final Required required=element.getAnnotation(Required.class);
  if (required != null) {
    final XmlElement xmlElement=element.getXmlElement();
    if (xmlElement == null) {
      if (required.value()) {
        final String xmlElementName=element.getXmlElementName();
        if (element instanceof GenericAttributeValue) {
          return Arrays.asList(holder.createProblem(element,IdeBundle.message("attribute.0.should.be.defined",xmlElementName)));
        }
        return Arrays.asList(holder.createProblem(element,HighlightSeverity.ERROR,IdeBundle.message("child.tag.0.should.be.defined",xmlElementName),new AddRequiredSubtagFix(xmlElementName,element.getXmlElementNamespace(),element.getParent().getXmlTag())));
      }
    }
 else     if (element instanceof GenericDomValue) {
      return ContainerUtil.createMaybeSingletonList(checkRequiredGenericValue((GenericDomValue)element,required,holder));
    }
  }
  if (element.getXmlElement() != null) {
    final SmartList<DomElementProblemDescriptor> list=new SmartList<DomElementProblemDescriptor>();
    final DomGenericInfo info=element.getGenericInfo();
    for (    final DomChildrenDescription description : info.getChildrenDescriptions()) {
      if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) {
        final DomCollectionChildDescription childDescription=(DomCollectionChildDescription)description;
        final Required annotation=description.getAnnotation(Required.class);
        if (annotation != null && annotation.value()) {
          list.add(holder.createProblem(element,childDescription,IdeBundle.message("child.tag.0.should.be.defined",description.getXmlElementName())));
        }
      }
    }
    return list;
  }
  return Collections.emptyList();
}
