{
  final Project project=element.getManager().getProject();
  PsiClass extendClass=JavaPsiFacade.getInstance(project).findClass(name,GlobalSearchScope.allScope(project));
  if (extendClass != null) {
    final SmartList<DomElementProblemDescriptor> list=new SmartList<DomElementProblemDescriptor>();
    if (!name.equals(value.getQualifiedName()) && !value.isInheritor(extendClass,true)) {
      String message=IdeBundle.message("class.is.not.a.subclass",value.getQualifiedName(),extendClass.getQualifiedName());
      list.add(holder.createProblem(element,message));
    }
 else     if (instantiatable) {
      if (value.hasModifierProperty(PsiModifier.ABSTRACT)) {
        list.add(holder.createProblem(element,IdeBundle.message("class.is.not.concrete",value.getQualifiedName())));
      }
 else       if (!value.hasModifierProperty(PsiModifier.PUBLIC)) {
        list.add(holder.createProblem(element,IdeBundle.message("class.is.not.public",value.getQualifiedName())));
      }
 else       if (!hasDefaultConstructor(value)) {
        if (canBeDecorator) {
          boolean hasConstructor=false;
          for (          PsiMethod method : value.getConstructors()) {
            final PsiParameterList psiParameterList=method.getParameterList();
            if (psiParameterList.getParametersCount() != 1)             continue;
            final PsiType psiType=psiParameterList.getParameters()[0].getTypeElement().getType();
            if (psiType instanceof PsiClassType) {
              final PsiClass psiClass=((PsiClassType)psiType).resolve();
              if (psiClass != null && InheritanceUtil.isInheritorOrSelf(psiClass,extendClass,true)) {
                hasConstructor=true;
                break;
              }
            }
          }
          if (!hasConstructor) {
            list.add(holder.createProblem(element,IdeBundle.message("class.decorator.or.has.default.constructor",value.getQualifiedName())));
          }
        }
 else {
          list.add(holder.createProblem(element,IdeBundle.message("class.has.no.default.constructor",value.getQualifiedName())));
        }
      }
    }
    return list;
  }
  return Collections.emptyList();
}
