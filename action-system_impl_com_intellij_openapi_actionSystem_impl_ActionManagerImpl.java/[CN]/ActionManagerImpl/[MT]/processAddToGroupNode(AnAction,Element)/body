{
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: processAddToGroupNode(" + action + ","+ element.getName()+ ")");
  }
  if (!(action instanceof Separator)) {
    assertActionIsGroupOrStub(action);
  }
  String actionName=action instanceof ActionStub ? ((ActionStub)action).getClassName() : action.getClass().getName();
  if (!ADD_TO_GROUP_ELEMENT_NAME.equals(element.getName())) {
    LOG.error("unexpected name of element \"" + element.getName() + "\"");
    return;
  }
  String groupId=element.getAttributeValue(GROUPID_ATTR_NAME);
  if (groupId == null || groupId.length() == 0) {
    LOG.error(actionName + ": attribute \"group-id\" should be defined");
    return;
  }
  AnAction parentGroup=getActionImpl(groupId,true);
  if (parentGroup == null) {
    LOG.error(actionName + ": action with id \"" + groupId+ "\" isn't registered; action will be added to the \"Other\" group");
    parentGroup=getActionImpl(IdeActions.GROUP_OTHER_MENU,true);
  }
  if (!(parentGroup instanceof DefaultActionGroup)) {
    LOG.error(actionName + ": action with id \"" + groupId+ "\" should be instance of "+ DefaultActionGroup.class.getName());
    return;
  }
  String anchorStr=element.getAttributeValue(ANCHOR_ELEMENT_NAME);
  if (anchorStr == null) {
    LOG.error(actionName + ": attribute \"anchor\" should be defined");
    return;
  }
  Anchor anchor;
  if (FIRST.equalsIgnoreCase(anchorStr)) {
    anchor=Anchor.FIRST;
  }
 else   if (LAST.equalsIgnoreCase(anchorStr)) {
    anchor=Anchor.LAST;
  }
 else   if (BEFORE.equalsIgnoreCase(anchorStr)) {
    anchor=Anchor.BEFORE;
  }
 else   if (AFTER.equalsIgnoreCase(anchorStr)) {
    anchor=Anchor.AFTER;
  }
 else {
    LOG.error(actionName + ": anchor should be one of the following constants: \"first\", \"last\", \"before\" or \"after\"");
    return;
  }
  String relativeToActionId=element.getAttributeValue(RELATIVE_TO_ACTION_ATTR_NAME);
  if ((Anchor.BEFORE == anchor || Anchor.AFTER == anchor) && relativeToActionId == null) {
    LOG.error(actionName + ": \"relative-to-action\" cannot be null if anchor is \"after\" or \"before\"");
    return;
  }
  ((DefaultActionGroup)parentGroup).add(action,new Constraints(anchor,relativeToActionId),this);
}
