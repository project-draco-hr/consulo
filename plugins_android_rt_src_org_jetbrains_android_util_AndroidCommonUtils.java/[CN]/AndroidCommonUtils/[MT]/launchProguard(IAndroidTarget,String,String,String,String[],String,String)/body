{
  final List<String> commands=new ArrayList<String>();
  final String toolOsPath=sdkOsPath + File.separator + SdkConstants.OS_SDK_TOOLS_PROGUARD_BIN_FOLDER+ SdkConstants.FN_PROGUARD;
  commands.add(toolOsPath);
  commands.add("@" + quotePath(proguardConfigFileOsPath));
  commands.add("-injars");
  StringBuilder builder=new StringBuilder(quotePath(inputJarOsPath));
  for (  String jarFile : externalJarOsPaths) {
    builder.append(File.pathSeparatorChar);
    builder.append(quotePath(jarFile));
  }
  commands.add(builder.toString());
  commands.add("-outjars");
  commands.add(quotePath(outputJarFileOsPath));
  commands.add("-libraryjars");
  builder=new StringBuilder(quotePath(target.getPath(IAndroidTarget.ANDROID_JAR)));
  IAndroidTarget.IOptionalLibrary[] libraries=target.getOptionalLibraries();
  if (libraries != null) {
    for (    IAndroidTarget.IOptionalLibrary lib : libraries) {
      builder.append(File.pathSeparatorChar);
      builder.append(quotePath(lib.getJarPath()));
    }
  }
  commands.add(builder.toString());
  if (logDirOutputOsPath != null) {
    commands.add("-dump");
    commands.add(quotePath(new File(logDirOutputOsPath,"dump.txt").getAbsolutePath()));
    commands.add("-printseeds");
    commands.add(quotePath(new File(logDirOutputOsPath,"seeds.txt").getAbsolutePath()));
    commands.add("-printusage");
    commands.add(quotePath(new File(logDirOutputOsPath,"usage.txt").getAbsolutePath()));
    commands.add("-printmapping");
    commands.add(quotePath(new File(logDirOutputOsPath,"mapping.txt").getAbsolutePath()));
  }
  LOG.info(command2string(commands));
  return AndroidExecutionUtil.doExecute(ArrayUtil.toStringArray(commands));
}
