{
  final Ref<Boolean> isInContent=Ref.create(false);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      for (      final Project project : myProjectManager.getOpenProjects()) {
        if (!project.isInitialized()) {
          continue;
        }
        final int projectId=getProjectId(project);
        final boolean projectSuspended=isSuspended(projectId);
        final ProjectRootManager rootManager=ProjectRootManager.getInstance(project);
        ProjectFileIndex fileIndex=rootManager.getFileIndex();
        if (fileIndex.isInContent(file)) {
          isInContent.set(true);
        }
        if (fileIndex.isInSourceContent(file)) {
          final TranslatingCompiler[] translators=CompilerManager.getInstance(project).getCompilers(TranslatingCompiler.class);
          processRecursively(file,false,new FileProcessor(){
            public void execute(            final VirtualFile file){
              if (!projectSuspended && isCompilable(file)) {
                loadInfoAndAddSourceForRecompilation(projectId,file);
              }
            }
            boolean isCompilable(            VirtualFile file){
              for (              TranslatingCompiler translator : translators) {
                if (translator.isCompilableFile(file,DummyCompileContext.getInstance())) {
                  return true;
                }
              }
              return false;
            }
          }
);
        }
 else {
          if (!projectSuspended && belongsToIntermediateSources(file,project)) {
            processRecursively(file,false,new FileProcessor(){
              public void execute(              final VirtualFile file){
                loadInfoAndAddSourceForRecompilation(projectId,file);
              }
            }
);
          }
        }
      }
    }
  }
);
  if (notifyServer && !isIgnoredOrUnderIgnoredDirectory(file)) {
    final Set<File> pathsToMark=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    boolean dbOnly=!isInContent.get();
    processRecursively(file,dbOnly,new FileProcessor(){
      @Override public void execute(      VirtualFile file){
        pathsToMark.add(new File(file.getPath()));
      }
    }
);
    notifyFilesChanged(pathsToMark);
  }
}
