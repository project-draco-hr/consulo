{
  return new Filter[]{new Filter(){
    @Nullable @Override public Result applyFilter(    String line,    int entireLength){
      if (!line.startsWith("[ERROR] ") || !line.contains(".groovy: "))       return null;
      Matcher matcher=PATTERN.matcher(line);
      if (!matcher.matches())       return null;
      String path=matcher.group(1);
      VirtualFile file=LocalFileSystem.getInstance().findFileByPath(path);
      if (file == null)       return null;
      int lineNumber=Integer.parseInt(matcher.group(2)) - 1;
      if (lineNumber < 0) {
        lineNumber=-1;
      }
      TextAttributes attr=createCompilationErrorAttr();
      return new Result(entireLength - line.length() + matcher.start(1),entireLength - line.length() + matcher.end(2),new OpenFileHyperlinkInfo(project,file,lineNumber),attr);
    }
    private TextAttributes createCompilationErrorAttr(){
      TextAttributes attr=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.HYPERLINK_ATTRIBUTES).clone();
      attr.setForegroundColor(Color.RED);
      attr.setEffectColor(Color.RED);
      attr.setEffectType(EffectType.LINE_UNDERSCORE);
      attr.setFontType(Font.PLAIN);
      return attr;
    }
  }
};
}
