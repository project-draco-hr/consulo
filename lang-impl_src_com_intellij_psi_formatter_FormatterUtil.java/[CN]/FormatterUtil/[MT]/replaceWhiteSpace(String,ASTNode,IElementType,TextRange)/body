{
  final CharTable charTable=SharedImplUtil.findCharTableByTree(leafElement);
  if (textRange != null && textRange.getStartOffset() > leafElement.getTextRange().getStartOffset() && textRange.getEndOffset() < leafElement.getTextRange().getEndOffset()) {
    StringBuilder newText=createNewLeafChars(leafElement,textRange,whiteSpace);
    LeafElement newElement=Factory.createSingleLeafElement(leafElement.getElementType(),newText,0,newText.length(),charTable,leafElement.getPsi().getManager());
    leafElement.getTreeParent().replaceChild(leafElement,newElement);
    return;
  }
  ASTNode treePrev=findPreviousWhiteSpace(leafElement);
  if (treePrev == null) {
    treePrev=getWsCandidate(leafElement);
  }
  if (treePrev != null && treePrev.getText().trim().length() == 0 && treePrev.getElementType() != whiteSpaceToken && treePrev.getTextLength() > 0 && whiteSpace.length() > 0) {
    LeafElement whiteSpaceElement=Factory.createSingleLeafElement(treePrev.getElementType(),whiteSpace,0,whiteSpace.length(),charTable,SharedImplUtil.getManagerByTree(leafElement));
    ASTNode treeParent=treePrev.getTreeParent();
    treeParent.replaceChild(treePrev,whiteSpaceElement);
  }
 else {
    LeafElement whiteSpaceElement=Factory.createSingleLeafElement(whiteSpaceToken,whiteSpace,0,whiteSpace.length(),charTable,SharedImplUtil.getManagerByTree(leafElement));
    if (treePrev == null) {
      if (whiteSpace.length() > 0) {
        addWhiteSpace(leafElement,whiteSpaceElement);
      }
    }
 else     if (!isSpaceTextElement(treePrev)) {
      if (whiteSpace.length() > 0) {
        addWhiteSpace(treePrev,whiteSpaceElement);
      }
    }
 else     if (isWhiteSpaceElement(treePrev)) {
      final CompositeElement treeParent=(CompositeElement)treePrev.getTreeParent();
      if (whiteSpace.length() > 0) {
        treeParent.replaceChild(treePrev,whiteSpaceElement);
      }
 else {
        treeParent.removeChild(treePrev);
      }
    }
  }
}
