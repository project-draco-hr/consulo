def _parse(self, ui, path):
    'Prepare list of P4 filenames and revisions to import'
    ui.status(_('reading p4 views\n'))
    if ('/' in path):
        self._parse_view(path)
        if (path.startswith('//') and path.endswith('/...')):
            views = {path[:(-3)]: '', }
        else:
            views = {'//': '', }
    else:
        cmd = ('p4 -G client -o "%s"' % path)
        clientspec = marshal.load(util.popen(cmd, mode='rb'))
        views = {}
        for client in clientspec:
            if client.startswith('View'):
                (sview, cview) = clientspec[client].split()
                self._parse_view(sview)
                if (sview.endswith('...') and cview.endswith('...')):
                    sview = sview[:(-3)]
                    cview = cview[:(-3)]
                cview = cview[2:]
                cview = cview[(cview.find('/') + 1):]
                views[sview] = cview
    self.p4changes = self.p4changes.keys()
    self.p4changes.sort(key=int)
    vieworder = views.keys()
    vieworder.sort(key=len, reverse=True)
    startrev = self.ui.config('convert', 'p4.startrev', default=0)
    self.p4changes = [x for x in self.p4changes if (((not startrev) or (int(x) >= int(startrev))) and ((not self.rev) or (int(x) <= int(self.rev))))]
    ui.status(_('collecting p4 changelists\n'))
    lastid = None
    for change in self.p4changes:
        cmd = ('p4 -G describe %s' % change)
        stdout = util.popen(cmd, mode='rb')
        d = marshal.load(stdout)
        desc = self.recode(d['desc'])
        shortdesc = desc.split('\n', 1)[0]
        t = ('%s %s' % (d['change'], repr(shortdesc)[1:(-1)]))
        ui.status((util.ellipsis(t, 80) + '\n'))
        if lastid:
            parents = [lastid]
        else:
            parents = []
        date = (int(d['time']), 0)
        c = commit(author=self.recode(d['user']), date=util.datestr(date), parents=parents, desc=desc, branch='', extra={'p4': change, })
        files = []
        i = 0
        while ((('depotFile%d' % i) in d) and (('rev%d' % i) in d)):
            oldname = d[('depotFile%d' % i)]
            filename = None
            for v in vieworder:
                if oldname.startswith(v):
                    filename = (views[v] + oldname[len(v):])
                    break
            if filename:
                files.append((filename, d[('rev%d' % i)]))
                self.depotname[filename] = oldname
            i += 1
        self.changeset[change] = c
        self.files[change] = files
        lastid = change
    if lastid:
        self.heads = [lastid]
