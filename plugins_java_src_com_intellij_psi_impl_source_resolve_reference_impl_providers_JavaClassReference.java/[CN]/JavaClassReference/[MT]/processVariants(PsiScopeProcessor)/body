{
  if (processor instanceof JavaCompletionProcessor) {
    final Map<CustomizableReferenceProvider.CustomizationKey,Object> options=getOptions();
    if (options != null && (JavaClassReferenceProvider.EXTEND_CLASS_NAMES.getValue(options) != null || JavaClassReferenceProvider.NOT_INTERFACE.getBooleanValue(options) || JavaClassReferenceProvider.CONCRETE.getBooleanValue(options)) || JavaClassReferenceProvider.CLASS_KIND.getValue(options) != null) {
      ((JavaCompletionProcessor)processor).setCompletionElements(getVariants());
      return;
    }
  }
  PsiScopeProcessor processorToUse=processor;
  if (myInStaticImport) {
    processor.handleEvent(JavaScopeProcessorEvent.CHANGE_LEVEL,null);
  }
 else {
    if (isDefinitelyStatic()) {
      processor.handleEvent(JavaScopeProcessorEvent.START_STATIC,null);
    }
    processorToUse=new PsiScopeProcessor(){
      @Override public boolean execute(      @NotNull PsiElement element,      ResolveState state){
        return !(element instanceof PsiClass || element instanceof PsiJavaPackage) || processor.execute(element,state);
      }
      @Override public <V>V getHint(      @NotNull Key<V> hintKey){
        return processor.getHint(hintKey);
      }
      @Override public void handleEvent(      Event event,      Object associated){
        processor.handleEvent(event,associated);
      }
    }
;
  }
  super.processVariants(processorToUse);
}
