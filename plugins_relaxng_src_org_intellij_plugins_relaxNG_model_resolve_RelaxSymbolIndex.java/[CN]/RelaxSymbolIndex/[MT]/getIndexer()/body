{
  return new DataIndexer<String,Void,FileContent>(){
    @NotNull public Map<String,Void> map(    FileContent inputData){
      final HashMap<String,Void> map=new HashMap<String,Void>();
      if (inputData.getFileType() == XmlFileType.INSTANCE) {
        CharSequence inputDataContentAsText=inputData.getContentAsText();
        if (CharArrayUtil.indexOf(inputDataContentAsText,ApplicationLoader.RNG_NAMESPACE,0) == -1)         return Collections.EMPTY_MAP;
        NanoXmlUtil.parse(new CharSequenceReader(inputDataContentAsText),new NanoXmlUtil.IXMLBuilderAdapter(){
          NanoXmlUtil.IXMLBuilderAdapter attributeHandler;
          int depth;
          @Override public void addAttribute(          String key,          String nsPrefix,          String nsURI,          String value,          String type) throws Exception {
            if (attributeHandler != null) {
              attributeHandler.addAttribute(key,nsPrefix,nsURI,value,type);
            }
          }
          @Override public void startElement(          String name,          String nsPrefix,          String nsURI,          String systemID,          int lineNr) throws Exception {
            attributeHandler=null;
            if (depth == 1 && ApplicationLoader.RNG_NAMESPACE.equals(nsURI)) {
              if ("define".equals(name)) {
                attributeHandler=new NanoXmlUtil.IXMLBuilderAdapter(){
                  @Override public void addAttribute(                  String key,                  String nsPrefix,                  String nsURI,                  String value,                  String type) throws Exception {
                    if ("name".equals(key) && (nsURI == null || nsURI.length() == 0)) {
                      map.put(value,null);
                    }
                  }
                }
;
              }
            }
            depth++;
          }
          @Override public void endElement(          String name,          String nsPrefix,          String nsURI) throws Exception {
            attributeHandler=null;
            depth--;
          }
        }
);
      }
 else       if (inputData.getFileType() == RncFileType.getInstance()) {
        final PsiFile file=inputData.getPsiFile();
        if (file instanceof XmlFile) {
          final Grammar grammar=GrammarFactory.getGrammar((XmlFile)file);
          if (grammar != null) {
            grammar.acceptChildren(new CommonElement.Visitor(){
              @Override public void visitDefine(              Define define){
                map.put(define.getName(),null);
              }
            }
);
          }
        }
      }
      return map;
    }
  }
;
}
