{
  super(new BorderLayout(0,0));
  GRADIENT_C1=getBackground();
  GRADIENT_C2=new Color(Math.max(0,GRADIENT_C1.getRed() - 0x18),Math.max(0,GRADIENT_C1.getGreen() - 0x18),Math.max(0,GRADIENT_C1.getBlue() - 0x18));
  myProject=project;
  myEditor=editor;
  JPanel leadPanel=new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT,5,0));
  add(leadPanel,BorderLayout.WEST);
  mySearchField=new JTextField(){
    protected void paintBorder(    final Graphics g){
      super.paintBorder(g);
      final LafManager lafManager=LafManager.getInstance();
      if (!(lafManager.isUnderAquaLookAndFeel() || lafManager.isUnderQuaquaLookAndFeel()) && isFocusOwner()) {
        final Rectangle bounds=getBounds();
        g.setColor(FOCUS_CATCHER_COLOR);
        g.drawRect(0,0,bounds.width - 1,bounds.height - 1);
      }
    }
  }
;
  mySearchField.addFocusListener(new FocusListener(){
    public void focusGained(    final FocusEvent e){
      mySearchField.repaint();
    }
    public void focusLost(    final FocusEvent e){
      mySearchField.repaint();
    }
  }
);
  mySearchField.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  leadPanel.add(mySearchField);
  myDefaultBackground=mySearchField.getBackground();
  mySearchField.setColumns(25);
  setSmallerFont(mySearchField);
  DefaultActionGroup group=new DefaultActionGroup("search bar",false);
  group.add(new ShowHistoryAction());
  group.add(new PrevOccurenceAction());
  group.add(new NextOccurenceAction());
  group.add(new FindAllAction());
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",group,true);
  tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myToolbarComponent=tb.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  leadPanel.add(myToolbarComponent);
  final JCheckBox cbMatchCase=new NonFocusableCheckBox("Case sensitive");
  myCbWholeWords=new NonFocusableCheckBox("Match whole words only");
  myCbRegexp=new NonFocusableCheckBox("Regex");
  leadPanel.add(cbMatchCase);
  leadPanel.add(myCbWholeWords);
  leadPanel.add(myCbRegexp);
  cbMatchCase.setSelected(isCaseSensitive());
  myCbWholeWords.setSelected(isWholeWords());
  myCbRegexp.setSelected(isRegexp());
  cbMatchCase.setMnemonic('C');
  myCbWholeWords.setMnemonic('M');
  myCbRegexp.setMnemonic('R');
  setSmallerFontAndOpaque(myCbWholeWords);
  setSmallerFontAndOpaque(cbMatchCase);
  setSmallerFontAndOpaque(myCbRegexp);
  cbMatchCase.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=cbMatchCase.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setCaseSensitive(b);
      FindSettings.getInstance().setLocalCaseSensitive(b);
      updateResults(true);
    }
  }
);
  myCbWholeWords.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbWholeWords.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setWholeWordsOnly(b);
      FindSettings.getInstance().setLocalWholeWordsOnly(b);
      updateResults(true);
    }
  }
);
  myCbRegexp.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbRegexp.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setRegularExpressions(b);
      myCbWholeWords.setEnabled(!b);
      updateResults(true);
    }
  }
);
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  tailContainer.add(tailPanel,BorderLayout.EAST);
  add(tailContainer,BorderLayout.CENTER);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  JLabel closeLabel=new JLabel(" ",IconLoader.getIcon("/actions/cross.png"),JLabel.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  tailPanel.add(myMatchInfoLabel,BorderLayout.CENTER);
  tailPanel.add(closeLabel,BorderLayout.EAST);
  mySearchField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateResults(true);
    }
  }
);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      close();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_FOCUSED);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (getTextInField().length() == 0) {
        showHistory(false);
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),JComponent.WHEN_FOCUSED);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if ("".equals(mySearchField.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addCurrentTextToRecents();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  final String initialText=myEditor.getSelectionModel().getSelectedText();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      final String text=initialText != null && initialText.indexOf('\n') < 0 ? initialText : "";
      mySearchField.setText(text);
      mySearchField.selectAll();
    }
  }
);
  new VariantsCompletionAction();
  myDocumentListener=new com.intellij.openapi.editor.event.DocumentAdapter(){
    public void documentChanged(    final com.intellij.openapi.editor.event.DocumentEvent e){
      updateResults(false);
    }
  }
;
  myEditor.getDocument().addDocumentListener(myDocumentListener);
}
