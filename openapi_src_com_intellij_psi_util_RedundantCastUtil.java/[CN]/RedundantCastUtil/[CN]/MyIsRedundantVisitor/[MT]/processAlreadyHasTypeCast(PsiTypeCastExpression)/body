{
  PsiElement parent=typeCast.getParent();
  while (parent instanceof PsiParenthesizedExpression)   parent=parent.getParent();
  if (parent instanceof PsiExpressionList)   return;
  if (isTypeCastSemantical(typeCast))   return;
  PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return;
  PsiType castType=typeElement.getType();
  PsiType opType=typeCast.getOperand().getType();
  if (opType == null)   return;
  if (parent instanceof PsiReferenceExpression) {
    if (castType instanceof PsiClassType && opType instanceof PsiPrimitiveType)     return;
    if (opType instanceof PsiClassType) {
      final PsiReferenceExpression refExpression=(PsiReferenceExpression)parent;
      PsiElement element=refExpression.resolve();
      if (!(element instanceof PsiMember))       return;
      PsiClass accessClass=((PsiClassType)opType).resolve();
      if (accessClass == null)       return;
      if (!JavaPsiFacade.getInstance(parent.getProject()).getResolveHelper().isAccessible((PsiMember)element,typeCast,accessClass))       return;
      if (!isCastRedundantInRefExpression(refExpression,typeCast.getOperand()))       return;
    }
  }
  if (!(parent instanceof PsiExpression) || !TypeConversionUtil.isLValue((PsiExpression)parent)) {
    if (TypeConversionUtil.isAssignable(castType,opType,false)) {
      addToResults(typeCast);
    }
  }
 else {
    if (TypeConversionUtil.isAssignable(opType,castType,false)) {
      addToResults(typeCast);
    }
  }
}
