{
  PsiElement parent=typeCast.getParent();
  while (parent instanceof PsiParenthesizedExpression)   parent=parent.getParent();
  if (parent instanceof PsiExpressionList)   return;
  if (isTypeCastSemantical(typeCast))   return;
  PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return;
  PsiType toType=typeElement.getType();
  PsiType fromType=typeCast.getOperand().getType();
  if (fromType == null)   return;
  if (parent instanceof PsiReferenceExpression) {
    if (toType instanceof PsiClassType && fromType instanceof PsiPrimitiveType)     return;
    if (fromType instanceof PsiClassType) {
      final PsiReferenceExpression refExpression=(PsiReferenceExpression)parent;
      PsiElement element=refExpression.resolve();
      if (!(element instanceof PsiMember))       return;
      PsiClass accessClass=((PsiClassType)fromType).resolve();
      if (accessClass == null)       return;
      if (!JavaPsiFacade.getInstance(parent.getProject()).getResolveHelper().isAccessible((PsiMember)element,typeCast,accessClass))       return;
      if (!isCastRedundantInRefExpression(refExpression,typeCast.getOperand()))       return;
    }
  }
  if (TypeConversionUtil.isAssignable(toType,fromType,false)) {
    addToResults(typeCast);
  }
}
