{
  final AsyncResult<Object> result=new AsyncResult<Object>();
  if (element instanceof AbstractTreeNode) {
    AbstractTreeNode node=(AbstractTreeNode)element;
    final Object value=node.getValue();
    VirtualFile vFile=null;
    if (value instanceof PsiFileSystemItem) {
      vFile=((PsiFileSystemItem)value).getVirtualFile();
    }
 else     if (value instanceof PsiElement) {
      PsiFile psiFile=((PsiElement)value).getContainingFile();
      if (psiFile != null) {
        vFile=psiFile.getVirtualFile();
      }
    }
    final ActionCallback cb=new ActionCallback();
    final VirtualFile finalVFile=vFile;
    final FocusRequestor focusRequestor=IdeFocusManager.getInstance(myProject).getFurtherRequestor();
    batch(new Progressive(){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        final Ref<Object> target=new Ref<Object>();
        _select(value,finalVFile,false,Conditions.<AbstractTreeNode>alwaysTrue(),cb,indicator,target,focusRequestor,false);
        cb.doWhenDone(new Runnable(){
          @Override public void run(){
            result.setDone(target.get());
          }
        }
).doWhenRejected(new Runnable(){
          @Override public void run(){
            result.setRejected();
          }
        }
);
      }
    }
);
  }
 else {
    result.setRejected();
  }
  return result;
}
