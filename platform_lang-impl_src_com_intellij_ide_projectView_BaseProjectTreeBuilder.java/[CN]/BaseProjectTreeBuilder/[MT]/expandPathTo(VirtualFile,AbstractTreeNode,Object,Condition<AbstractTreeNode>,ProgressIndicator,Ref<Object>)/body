{
  final AsyncResult<AbstractTreeNode> async=new AsyncResult<AbstractTreeNode>();
  if (root.canRepresent(element)) {
    if (target == null) {
      expand(root,new Runnable(){
        public void run(){
          async.setDone(root);
        }
      }
);
    }
 else {
      target.set(root);
      async.setDone(root);
    }
    return async;
  }
  if (root instanceof ProjectViewNode && file != null && !((ProjectViewNode)root).contains(file)) {
    async.setRejected();
    return async;
  }
  if (target == null) {
    expand(root,new Runnable(){
      public void run(){
        indicator.checkCanceled();
        final DefaultMutableTreeNode rootNode=getNodeForElement(root);
        if (rootNode != null) {
          final List<AbstractTreeNode> kids=collectChildren(rootNode);
          expandChild(kids,0,nonStopCondition,file,element,async,indicator,target);
        }
 else {
          async.setRejected();
        }
      }
    }
);
  }
 else {
    if (indicator.isCanceled()) {
      async.setRejected();
    }
 else {
      final DefaultMutableTreeNode rootNode=getNodeForElement(root);
      final ArrayList<AbstractTreeNode> kids=new ArrayList<AbstractTreeNode>();
      if (rootNode != null && getTree().isExpanded(new TreePath(rootNode.getPath()))) {
        kids.addAll(collectChildren(rootNode));
      }
 else {
        List<Object> list=Arrays.asList(getTreeStructure().getChildElements(root));
        for (        Object each : list) {
          kids.add((AbstractTreeNode)each);
        }
      }
      yield(new Runnable(){
        public void run(){
          if (isDisposed())           return;
          expandChild(kids,0,nonStopCondition,file,element,async,indicator,target);
        }
      }
);
    }
  }
  return async;
}
