{
  long repositoryId=getRepositoryId();
  if (repositoryId < 0) {
    try {
      ClassFileData classFileData=myParent.getClassFileData();
      byte[] data=classFileData.getData();
      int offset=myStartOffset + 4;
      int b1=data[offset++] & 0xFF;
      int b2=data[offset++] & 0xFF;
      int index=(b1 << 8) + b2;
      offset=classFileData.getOffsetInConstantPool(index);
      offset+=3;
      if (offset + 1 >= data.length) {
        throw new ClsFormatException();
      }
      if (data[offset++] != '(') {
        throw new ClsFormatException();
      }
      ArrayList<String> types=null;
      if (myConstructorFlag && myParent.getParent() instanceof PsiClass && !myParent.getModifierList().hasModifierProperty(PsiModifier.STATIC)) {
        if (data[offset] == ')') {
          throw new ClsFormatException();
        }
        offset=ClsUtil.getTypeEndOffset(data,offset);
        if (offset >= data.length) {
          throw new ClsFormatException();
        }
      }
      while (data[offset] != ')') {
        String typeText=ClsUtil.getTypeText(data,offset);
        offset=ClsUtil.getTypeEndOffset(data,offset);
        if (offset >= data.length) {
          throw new ClsFormatException();
        }
        if (types == null) {
          types=new ArrayList<String>();
        }
        types.add(typeText);
      }
      if (types != null) {
        patchVarargs(types);
      }
      return types;
    }
 catch (    ClsFormatException e) {
      return new ArrayList<String>();
    }
  }
 else {
    MethodView methodView=getRepositoryManager().getMethodView();
    int count=methodView.getParameterCount(repositoryId);
    if (count == 0)     return null;
    ArrayList<String> types=new ArrayList<String>(count);
    for (int i=0; i < count; i++) {
      String text=methodView.getParameterTypeText(repositoryId,i);
      types.add(text);
    }
    return types;
  }
}
