{
  if (body == null)   return null;
  final ControlFlow flow;
  try {
    ControlFlowPolicy policy=new ControlFlowPolicy(){
      public PsiVariable getUsedVariable(      PsiReferenceExpression refExpr){
        if (refExpr.isQualified())         return null;
        PsiElement refElement=refExpr.resolve();
        if (refElement instanceof PsiLocalVariable || refElement instanceof PsiParameter) {
          if (!isVariableDeclaredInMethod((PsiVariable)refElement))           return null;
          return (PsiVariable)refElement;
        }
        return null;
      }
      public boolean isParameterAccepted(      PsiParameter psiParameter){
        return isVariableDeclaredInMethod(psiParameter);
      }
      public boolean isLocalVariableAccepted(      PsiLocalVariable psiVariable){
        return isVariableDeclaredInMethod(psiVariable);
      }
      private boolean isVariableDeclaredInMethod(      PsiVariable psiVariable){
        return PsiTreeUtil.getParentOfType(psiVariable,PsiClass.class) == PsiTreeUtil.getParentOfType(body,PsiClass.class);
      }
    }
;
    flow=ControlFlowFactory.getControlFlow(body,policy,false);
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
  int start=flow.getStartOffset(body);
  int end=flow.getEndOffset(body);
  PsiVariable[] writtenVariables=ControlFlowUtil.getWrittenVariables(flow,start,end,false);
  final HashSet<PsiVariable> ssaVarsSet=new HashSet<PsiVariable>();
  body.accept(new PsiRecursiveElementVisitor(){
    public void visitCodeBlock(    PsiCodeBlock block){
      super.visitCodeBlock(block);
      PsiElement anchor=block;
      if (block.getParent() instanceof PsiSwitchStatement) {
        anchor=block.getParent();
      }
      int from=flow.getStartOffset(anchor);
      int end=flow.getEndOffset(anchor);
      PsiVariable[] ssa=ControlFlowUtil.getSSAVariables(flow,from,end,true);
      HashSet<PsiElement> declared=getDeclaredVariables(block);
      for (      PsiVariable psiVariable : ssa) {
        if (declared.contains(psiVariable)) {
          ssaVarsSet.add(psiVariable);
        }
      }
    }
    private HashSet<PsiElement> getDeclaredVariables(    PsiCodeBlock block){
      final HashSet<PsiElement> result=new HashSet<PsiElement>();
      PsiElement[] children=block.getChildren();
      for (      PsiElement child : children) {
        child.accept(new PsiElementVisitor(){
          public void visitReferenceExpression(          PsiReferenceExpression expression){
            visitReferenceElement(expression);
          }
          public void visitDeclarationStatement(          PsiDeclarationStatement statement){
            PsiElement[] declaredElements=statement.getDeclaredElements();
            for (            PsiElement declaredElement : declaredElements) {
              if (declaredElement instanceof PsiVariable)               result.add(declaredElement);
            }
          }
        }
);
      }
      return result;
    }
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
  }
);
  ArrayList<PsiVariable> result=new ArrayList<PsiVariable>(ssaVarsSet);
  if (body.getParent() instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)body.getParent();
    PsiParameter[] parameters=method.getParameterList().getParameters();
    for (    PsiParameter parameter : parameters) {
      if (!result.contains(parameter))       result.add(parameter);
    }
  }
  PsiVariable[] psiVariables=result.toArray(new PsiVariable[result.size()]);
  for (  PsiVariable psiVariable : psiVariables) {
    if (!isReportParameters() && psiVariable instanceof PsiParameter || !isReportVariables() && psiVariable instanceof PsiLocalVariable || psiVariable.hasModifierProperty(PsiModifier.FINAL)) {
      result.remove(psiVariable);
    }
    if (psiVariable instanceof PsiLocalVariable) {
      PsiDeclarationStatement decl=(PsiDeclarationStatement)psiVariable.getParent();
      if (decl != null && decl.getParent() instanceof PsiForStatement) {
        result.remove(psiVariable);
      }
    }
  }
  for (  PsiVariable writtenVariable : writtenVariables) {
    if (writtenVariable instanceof PsiParameter) {
      result.remove(writtenVariable);
    }
  }
  if (result.size() == 0)   return null;
  for (Iterator<PsiVariable> iterator=result.iterator(); iterator.hasNext(); ) {
    final PsiVariable variable=iterator.next();
    if (!variable.isPhysical()) {
      iterator.remove();
    }
  }
  ProblemDescriptor[] problems=new ProblemDescriptor[result.size()];
  for (int i=0; i < problems.length; i++) {
    PsiVariable problemVariable=result.get(i);
    final PsiIdentifier nameIdenitier=problemVariable.getNameIdentifier();
    PsiElement problemElement=nameIdenitier != null ? nameIdenitier : problemVariable;
    if (problemVariable instanceof PsiParameter) {
      problems[i]=manager.createProblemDescriptor(problemElement,InspectionsBundle.message("inspection.can.be.local.parameter.problem.descriptor"),myQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
 else {
      problems[i]=manager.createProblemDescriptor(problemElement,InspectionsBundle.message("inspection.can.be.local.variable.problem.descriptor"),myQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
  }
  return problems;
}
