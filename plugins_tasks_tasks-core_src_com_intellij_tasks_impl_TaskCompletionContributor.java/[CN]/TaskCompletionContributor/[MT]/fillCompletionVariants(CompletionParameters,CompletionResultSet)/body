{
  PsiFile file=parameters.getOriginalFile();
  final Consumer<Task> consumer=file.getUserData(KEY);
  if (consumer != null) {
    result.stopHere();
    String text=parameters.getOriginalFile().getText();
    int i=text.lastIndexOf(' ',parameters.getOffset() - 1) + 1;
    final String prefix=text.substring(i,parameters.getOffset());
    result=result.withPrefixMatcher(new PlainPrefixMatcher(prefix));
    final TaskSearchSupport searchSupport=new TaskSearchSupport(file.getProject(),false);
    List<Task> items=searchSupport.getItems(prefix,true);
    addCompletionElements(result,consumer,items);
    Future<List<Task>> future=ApplicationManager.getApplication().executeOnPooledThread(new Callable<List<Task>>(){
      @Override public List<Task> call(){
        return searchSupport.getItems(prefix,false);
      }
    }
);
    while (true) {
      try {
        List<Task> tasks=future.get(100,TimeUnit.MILLISECONDS);
        if (tasks != null) {
          addCompletionElements(result,consumer,tasks);
          return;
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Exception ignore) {
      }
      ProgressManager.checkCanceled();
    }
  }
}
