{
  final Component component=myRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  final DomElementAnnotationsManager annotationsManager=DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject());
  final DomElementsProblemsHolder holder=annotationsManager.getCachedProblemHolder(myCellValueDomElement);
  final List<DomElementProblemDescriptor> errorProblems=holder.getProblems(myCellValueDomElement);
  final List<DomElementProblemDescriptor> warningProblems=new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement,true,true,HighlightSeverity.WARNING));
  warningProblems.removeAll(errorProblems);
  final boolean hasErrors=errorProblems.size() > 0;
  if (hasErrors) {
    component.setForeground(Color.RED);
  }
 else {
    component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
  }
  if (hasErrors && (value == null || value.toString().trim().length() == 0)) {
    component.setBackground(BaseControl.ERROR_BACKGROUND);
  }
 else   if (warningProblems.size() > 0) {
    component.setBackground(BaseControl.WARNING_BACKGROUND);
    if (isSelected)     component.setForeground(Color.BLACK);
  }
  final List<DomElementProblemDescriptor> errorDescriptors=annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement,true,true);
  if (table.getModel().getColumnCount() - 1 == column && errorDescriptors.size() > 0) {
    final JPanel wrapper=new JPanel(new BorderLayout());
    wrapper.add(component,BorderLayout.CENTER);
    wrapper.setBackground(component.getBackground());
    final JLabel errorLabel=new JLabel(getErrorIcon());
    wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors));
    wrapper.add(errorLabel,BorderLayout.EAST);
    if (component instanceof JComponent) {
      wrapper.setBorder(((JComponent)component).getBorder());
      ((JComponent)component).setBorder(BorderFactory.createEmptyBorder());
    }
    return wrapper;
  }
 else {
    if (component instanceof JComponent) {
      ((JComponent)component).setToolTipText(errorDescriptors.size() > 0 ? TooltipUtils.getTooltipText(errorDescriptors) : null);
    }
    return component;
  }
}
