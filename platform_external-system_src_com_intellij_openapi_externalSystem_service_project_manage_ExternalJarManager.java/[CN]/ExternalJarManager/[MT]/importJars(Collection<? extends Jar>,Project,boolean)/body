{
  if (jars.isEmpty()) {
    return;
  }
  final Map<LibraryId,List<Jar>> jarsByLibraries=ContainerUtilRt.newHashMap();
  for (  Jar jar : jars) {
    List<Jar> list=jarsByLibraries.get(jar.getLibraryId());
    if (list == null) {
      jarsByLibraries.put(jar.getLibraryId(),list=ContainerUtilRt.newArrayList());
    }
    list.add(jar);
  }
  ExternalSystemUtil.executeProjectChangeAction(project,jars,synchronous,new Runnable(){
    @Override public void run(){
      for (      Map.Entry<LibraryId,List<Jar>> entry : jarsByLibraries.entrySet()) {
        LibraryTable table=myPlatformFacade.getProjectLibraryTable(project);
        Library library=table.getLibraryByName(entry.getKey().getLibraryName());
        if (library == null) {
          return;
        }
        Library.ModifiableModel model=library.getModifiableModel();
        try {
          LocalFileSystem fileSystem=LocalFileSystem.getInstance();
          for (          Jar jar : entry.getValue()) {
            OrderRootType ideJarType=myLibraryPathTypeMapper.map(jar.getPathType());
            for (            VirtualFile file : model.getFiles(ideJarType)) {
              if (jar.getPath().equals(ExternalSystemUtil.getLocalFileSystemPath(file))) {
                return;
              }
            }
            File jarFile=new File(jar.getPath());
            VirtualFile virtualFile=fileSystem.refreshAndFindFileByIoFile(jarFile);
            if (virtualFile == null) {
              LOG.warn(String.format("Can't find a jar of the library '%s' at path '%s'",jar.getLibraryId().getLibraryName(),jar.getPath()));
              return;
            }
            if (virtualFile.isDirectory()) {
              model.addRoot(virtualFile,ideJarType);
            }
 else {
              VirtualFile jarRoot=JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile);
              if (jarRoot == null) {
                LOG.warn(String.format("Can't parse contents of the jar file at path '%s' for the library '%s''",jar.getPath(),library.getName()));
                return;
              }
              model.addRoot(jarRoot,ideJarType);
            }
          }
        }
  finally {
          model.commit();
        }
      }
    }
  }
);
}
