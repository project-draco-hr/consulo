{
  if (jars.isEmpty()) {
    return;
  }
  Map<LibraryId,List<Jar>> jarsByLibraries=ContainerUtilRt.newHashMap();
  for (  Jar jar : jars) {
    List<Jar> list=jarsByLibraries.get(jar.getLibraryId());
    if (list == null) {
      jarsByLibraries.put(jar.getLibraryId(),list=ContainerUtilRt.newArrayList());
    }
    list.add(jar);
  }
  LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(project);
  for (  Map.Entry<LibraryId,List<Jar>> entry : jarsByLibraries.entrySet()) {
    Library library=libraryTable.getLibraryByName(entry.getKey().getLibraryName());
    if (library == null) {
      continue;
    }
    Set<Jar> libraryJars=ContainerUtilRt.newHashSet(entry.getValue());
    for (    Jar jar : entry.getValue()) {
      boolean valid=false;
      for (      VirtualFile file : library.getFiles(myLibraryPathTypeMapper.map(jar.getPathType()))) {
        if (jar.getPath().equals(ExternalSystemUtil.getLocalFileSystemPath(file))) {
          valid=true;
          break;
        }
      }
      if (!valid) {
        libraryJars.remove(jar);
      }
    }
    if (!libraryJars.isEmpty()) {
      removeLibraryJars(libraryJars,project,synchronous);
    }
  }
}
