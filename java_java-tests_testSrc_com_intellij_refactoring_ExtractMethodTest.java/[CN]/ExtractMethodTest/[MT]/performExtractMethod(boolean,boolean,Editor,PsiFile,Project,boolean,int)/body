{
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiElement[] elements;
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
  }
  if (elements.length == 0) {
    final PsiExpression expression=IntroduceVariableBase.getSelectedExpression(project,file,startOffset,endOffset);
    if (expression != null) {
      elements=new PsiElement[]{expression};
    }
  }
  assertTrue(elements.length > 0);
  final ExtractMethodProcessor processor=new ExtractMethodProcessor(project,editor,elements,null,"Extract Method","newMethod",null);
  processor.setShowErrorDialogs(false);
  processor.setChainedConstructor(extractChainedConstructor);
  if (!processor.prepare()) {
    return false;
  }
  if (doRefactor) {
    processor.testPrepare();
    if (disabledParams != null) {
      for (      int param : disabledParams) {
        processor.doNotPassParameter(param);
      }
    }
    ExtractMethodHandler.run(project,editor,processor);
  }
  if (replaceAllDuplicates) {
    final List<Match> duplicates=processor.getDuplicates();
    for (    final Match match : duplicates) {
      if (!match.getMatchStart().isValid() || !match.getMatchEnd().isValid())       continue;
      processor.processMatch(match);
    }
  }
  return true;
}
