{
  final Document document=PsiDocumentManager.getInstance(getProject()).getDocument(file);
  final EditorImpl editor;
  if (doCheckDocumentUpdate()) {
    editor=(EditorImpl)FileEditorManager.getInstance(getProject()).openTextEditor(new OpenFileDescriptor(getProject(),file.getVirtualFile(),0),false);
    editor.putUserData(EditorImpl.DO_DOCUMENT_UPDATE_TEST,Boolean.TRUE);
    if (myFile != null) {
      FileEditorManager.getInstance(getProject()).closeFile(myFile.getVirtualFile());
    }
    myEditor=editor;
    myFile=file;
  }
 else {
    editor=null;
  }
  CommandProcessor.getInstance().executeCommand(getProject(),new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          document.replaceString(0,document.getTextLength(),text);
          PsiDocumentManager.getInstance(getProject()).commitDocument(document);
          assertEquals(file.getText(),document.getText());
          if (false && doCheckDocumentUpdate()) {
            makeFolding(file,editor);
          }
          try {
            if (doReformatRangeTest) {
              CodeStyleManager.getInstance(getProject()).reformatRange(file,file.getTextRange().getStartOffset(),file.getTextRange().getEndOffset());
            }
 else             if (myTextRange != null) {
              CodeStyleManager.getInstance(getProject()).reformatText(file,myTextRange.getStartOffset(),myTextRange.getEndOffset());
            }
 else {
              CodeStyleManager.getInstance(getProject()).reformatText(file,file.getTextRange().getStartOffset(),file.getTextRange().getEndOffset());
            }
          }
 catch (          IncorrectOperationException e) {
            fail();
          }
        }
      }
);
    }
  }
,"","");
  assertEquals(textAfter,document.getText());
  PsiDocumentManager.getInstance(getProject()).commitDocument(document);
  assertEquals(textAfter,file.getText());
}
