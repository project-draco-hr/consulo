{
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  Font editorFont=new Font(scheme.getEditorFontName(),Font.PLAIN,scheme.getEditorFontSize());
  setFont(editorFont);
  removeAll();
  final boolean hasRightRenderer=UISettings.getInstance().SHOW_ICONS_IN_QUICK_NAVIGATION;
  final ModuleRendererFactory factory=ModuleRendererFactory.getInstance();
  final LeftRenderer left=new LeftRenderer(!hasRightRenderer || !factory.rendersLocationString(),myMatcher);
  final Component leftCellRendererComponent=left.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
  final Color listBg=leftCellRendererComponent.getBackground();
  add(leftCellRendererComponent,BorderLayout.WEST);
  setBackground(isSelected ? UIUtil.getListSelectionBackground() : listBg);
  if (hasRightRenderer) {
    final DefaultListCellRenderer moduleRenderer=factory.getModuleRenderer();
    final Component rightCellRendererComponent=moduleRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    ((JComponent)rightCellRendererComponent).setOpaque(false);
    rightCellRendererComponent.setBackground(listBg);
    add(rightCellRendererComponent,BorderLayout.EAST);
    final JPanel spacer=new NonOpaquePanel();
    final Dimension size=rightCellRendererComponent.getSize();
    spacer.setSize(new Dimension((int)(size.width * 0.015 + leftCellRendererComponent.getSize().width * 0.015),size.height));
    spacer.setBackground(isSelected ? UIUtil.getListSelectionBackground() : listBg);
    add(spacer,BorderLayout.CENTER);
  }
  return this;
}
