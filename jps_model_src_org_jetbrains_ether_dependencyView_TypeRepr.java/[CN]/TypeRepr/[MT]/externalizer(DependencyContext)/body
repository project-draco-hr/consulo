{
  return new DataExternalizer<AbstractType>(){
    @Override public void save(    final DataOutput out,    final AbstractType value) throws IOException {
      value.save(out);
    }
    @Override public AbstractType read(    final DataInput in) throws IOException {
      AbstractType elementType;
      int level=0;
      loop:       while (true) {
switch (in.readInt()) {
case PRIMITIVE_TYPE:
          elementType=context.getType(new PrimitiveType(in));
        break loop;
case CLASS_TYPE:
      elementType=context.getType(new ClassType(context,in));
    break loop;
case ARRAY_TYPE:
  level++;
break;
}
}
for (int i=0; i < level; i++) {
elementType=context.getType(new ArrayType(elementType));
}
return elementType;
}
}
;
}
