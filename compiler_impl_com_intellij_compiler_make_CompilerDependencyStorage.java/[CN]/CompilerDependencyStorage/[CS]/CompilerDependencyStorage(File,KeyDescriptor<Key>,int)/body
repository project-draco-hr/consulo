{
  myMap=new PersistentHashMap<Key,int[]>(file,keyDescriptor,new DataExternalizer<int[]>(){
    public void save(    DataOutput out,    int[] array) throws IOException {
      out.writeInt(array.length);
      for (      int value : array) {
        out.writeInt(value);
      }
    }
    public int[] read(    DataInput in) throws IOException {
      final TIntHashSet set=new TIntHashSet();
      DataInputStream stream=(DataInputStream)in;
      while (stream.available() > 0) {
        final int size=stream.readInt();
        final int _size=Math.abs(size);
        for (int idx=0; idx < _size; idx++) {
          if (size > 0) {
            set.add(stream.readInt());
          }
 else {
            set.remove(stream.readInt());
          }
        }
      }
      return set.toArray();
    }
  }
);
  myCache=new SLRUCache<Key,IntSet>(cacheSize * 2,cacheSize){
    @NotNull public IntSet createValue(    Key key){
      return new IntSet(key);
    }
    protected void onDropFromCache(    Key key,    final IntSet set){
      if (key == myKeyToRemove || !set.isDirty()) {
        return;
      }
      try {
        if (set.needsCompacting()) {
          myMap.put(key,set.getValues());
        }
 else {
          myMap.appendData(key,new PersistentHashMap.ValueDataAppender(){
            public void append(            final DataOutput out) throws IOException {
              final Ref<IOException> exception=new Ref<IOException>(null);
              final TIntProcedure saveProc=new TIntProcedure(){
                public boolean execute(                int value){
                  try {
                    out.writeInt(value);
                    return true;
                  }
 catch (                  IOException e) {
                    exception.set(e);
                    return false;
                  }
                }
              }
;
              out.writeInt(-set.getRemovedCount());
              set.processRemovedValues(saveProc);
              if (exception.get() != null) {
                throw exception.get();
              }
              out.writeInt(set.getAddedCount());
              set.processAddedValues(saveProc);
              if (exception.get() != null) {
                throw exception.get();
              }
            }
          }
);
        }
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
;
}
