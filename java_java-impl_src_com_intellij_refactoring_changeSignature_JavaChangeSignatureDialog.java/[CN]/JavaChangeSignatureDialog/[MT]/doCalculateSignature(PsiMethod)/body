{
  @NonNls StringBuilder buffer=new StringBuilder();
  PsiModifierList modifierList=method.getModifierList();
  String modifiers=modifierList.getText();
  String oldModifier=VisibilityUtil.getVisibilityModifier(modifierList);
  String newModifier=getVisibility();
  String newModifierStr=VisibilityUtil.getVisibilityString(newModifier);
  if (!newModifier.equals(oldModifier)) {
    int index=modifiers.indexOf(oldModifier);
    if (index >= 0) {
      StringBuilder buf=new StringBuilder(modifiers);
      buf.replace(index,index + oldModifier.length() + ("".equals(newModifierStr) ? 1 : 0),newModifierStr);
      modifiers=buf.toString();
    }
 else {
      if (!"".equals(newModifierStr))       newModifierStr+=" ";
      modifiers=newModifierStr + modifiers;
    }
  }
  buffer.append(modifiers);
  if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers,'\n') && !StringUtil.endsWithChar(modifiers,'\r') && !StringUtil.endsWithChar(modifiers,' ')) {
    buffer.append(" ");
  }
  if (!method.isConstructor()) {
    final CanonicalTypes.Type returnType=getReturnType();
    if (returnType != null) {
      buffer.append(returnType.getTypeText());
    }
    buffer.append(" ");
  }
  buffer.append(getMethodName());
  buffer.append("(");
  int paramIndent=buffer.toString().length();
  char[] chars=new char[paramIndent];
  Arrays.fill(chars,' ');
  String indent=new String(chars);
  List<ParameterTableModelItemBase<ParameterInfoImpl>> items=myParametersTableModel.getItems();
  int curIndent=indent.length();
  for (int i=0; i < items.size(); i++) {
    ParameterTableModelItemBase<ParameterInfoImpl> item=items.get(i);
    if (i > 0) {
      buffer.append(",");
      buffer.append("\n");
      buffer.append(indent);
    }
    final String text=item.typeCodeFragment.getText();
    buffer.append(text);
    buffer.append(" ");
    final String name=item.parameter.getName();
    buffer.append(name);
    curIndent=indent.length() + text.length() + 1+ name.length();
  }
  buffer.append(")");
  PsiTypeCodeFragment[] thrownExceptionsFragments=myExceptionsTableModel.getTypeCodeFragments();
  if (thrownExceptionsFragments.length > 0) {
    buffer.append(" throws ");
    curIndent+=9;
    chars=new char[curIndent];
    Arrays.fill(chars,' ');
    indent=new String(chars);
    for (int i=0; i < thrownExceptionsFragments.length; i++) {
      String text=thrownExceptionsFragments[i].getText();
      if (i != 0)       buffer.append(indent);
      buffer.append(text);
      if (i < thrownExceptionsFragments.length - 1) {
        buffer.append(",");
      }
      buffer.append("\n");
    }
  }
  return buffer.toString();
}
