{
  return new JBTableRowEditor(){
    private EditorTextField myTypeEditor;
    private EditorTextField myNameEditor;
    private EditorTextField myDefaultValueEditor;
    private JCheckBox myAnyVar;
class MyDocumentListener extends DocumentAdapter {
      private int myColumn;
      private MyDocumentListener(      int column){
        myColumn=column;
      }
      @Override public void documentChanged(      DocumentEvent e){
        fireDocumentChanged(e,myColumn);
      }
    }
    @Override public void prepareEditor(    JTable table,    int row){
      setLayout(new BorderLayout());
      final JPanel typePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP,4,2,true,false));
      final Document document=PsiDocumentManager.getInstance(getProject()).getDocument(item.typeCodeFragment);
      myTypeEditor=new EditorTextField(document,getProject(),getFileType());
      myTypeEditor.addDocumentListener(mySignatureUpdater);
      final JLabel typeLabel=new JLabel("Type");
      typePanel.add(typeLabel);
      typePanel.add(myTypeEditor);
      myTypeEditor.setPreferredWidth(t.getWidth() / 2);
      myTypeEditor.addDocumentListener(new MyDocumentListener(0));
      add(typePanel,BorderLayout.WEST);
      final JPanel namePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP,4,2,true,false));
      myNameEditor=new EditorTextField(item.parameter.getName(),getProject(),getFileType());
      myNameEditor.addDocumentListener(mySignatureUpdater);
      myNameEditor.addDocumentListener(new MyDocumentListener(1));
      final JLabel nameLabel=new JLabel("Name");
      namePanel.add(nameLabel);
      namePanel.add(myNameEditor);
      add(namePanel,BorderLayout.CENTER);
      if (!item.isEllipsisType() && item.parameter.getOldIndex() == -1) {
        final JPanel additionalPanel=new JPanel(new BorderLayout());
        final JPanel defaultValuePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP,4,2,true,false));
        final Document doc=PsiDocumentManager.getInstance(getProject()).getDocument(item.defaultValueCodeFragment);
        myDefaultValueEditor=new EditorTextField(doc,getProject(),getFileType());
        ((PsiExpressionCodeFragment)item.defaultValueCodeFragment).setExpectedType(getRowType(item));
        final JLabel defaultValueLabel=new JLabel("Default value");
        defaultValuePanel.add(defaultValueLabel);
        defaultValuePanel.add(myDefaultValueEditor);
        myDefaultValueEditor.setPreferredWidth(t.getWidth() / 2);
        myDefaultValueEditor.addDocumentListener(new MyDocumentListener(2));
        additionalPanel.add(defaultValuePanel,BorderLayout.WEST);
        if (!isGenerateDelegate()) {
          myAnyVar=new JCheckBox("&Use Any Var");
          DialogUtil.registerMnemonic(myAnyVar,'&');
          myAnyVar.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              item.parameter.setUseAnySingleVariable(myAnyVar.isSelected());
            }
          }
);
          final JPanel anyVarPanel=new JPanel(new BorderLayout());
          anyVarPanel.add(myAnyVar,BorderLayout.SOUTH);
          additionalPanel.add(anyVarPanel,BorderLayout.CENTER);
          add(additionalPanel,BorderLayout.SOUTH);
        }
      }
    }
    @Override public JBTableRow getValue(){
      return new JBTableRow(){
        @Override public Object getValueAt(        int column){
switch (column) {
case 0:
            return item.typeCodeFragment;
case 1:
          return myNameEditor.getText().trim();
case 2:
        return item.defaultValueCodeFragment;
case 3:
      return myAnyVar != null && myAnyVar.isSelected();
  }
  return null;
}
}
;
}
@Override public JComponent getPreferredFocusedComponent(){
final MouseEvent me=getMouseEvent();
if (me == null) {
return myTypeEditor;
}
return me.getPoint().getX() <= getTypesColumnWidth() ? myTypeEditor : myNameEditor;
}
@Override public JComponent[] getFocusableComponents(){
final List<JComponent> focusable=new ArrayList<JComponent>();
focusable.add(myTypeEditor.getFocusTarget());
focusable.add(myNameEditor.getFocusTarget());
if (myDefaultValueEditor != null) {
focusable.add(myDefaultValueEditor.getFocusTarget());
}
if (myAnyVar != null) {
focusable.add(myAnyVar);
}
return focusable.toArray(new JComponent[focusable.size()]);
}
}
;
}
