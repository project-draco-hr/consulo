{
  final OrderPanel<String> testsPanel=new OrderPanel<String>(String.class){
    @Override public boolean isCheckable(    String entry){
      return true;
    }
    @Override public boolean isChecked(    String entry){
      return myTests.get(entry);
    }
    @Override public void setChecked(    String entry,    boolean checked){
      myTests.put(entry,checked);
    }
    @Override public String getCheckboxColumnName(){
      return INCLUDE;
    }
  }
;
  testsPanel.setCheckboxColumnName(INCLUDE);
  for (  String testName : myTests.keySet()) {
    testsPanel.add(testName);
  }
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(testsPanel,BorderLayout.CENTER);
  final JPanel buttonsPanel=new JPanel(new VerticalFlowLayout());
  final JButton addButton=new JButton(ApplicationBundle.message("button.add"));
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        final SourceScope sourceScope=myConfigurationCopy.getPersistentData().getScope().getSourceScope(myConfigurationCopy);
        final GlobalSearchScope searchScope=sourceScope.getGlobalSearchScope();
        final TreeClassChooser chooser=TreeClassChooserFactory.getInstance(myProject).createNoInnerClassesScopeChooser("Choose test",searchScope,TestClassFilter.create(sourceScope,myConfigurationCopy.getConfigurationModule().getModule()),null);
        chooser.showDialog();
        final PsiClass selectedClass=chooser.getSelectedClass();
        if (selectedClass != null) {
          myTests.put(selectedClass.getQualifiedName(),Boolean.TRUE);
          testsPanel.add(selectedClass.getQualifiedName());
        }
      }
 catch (      JUnitUtil.NoJUnitException e1) {
      }
    }
  }
);
  buttonsPanel.add(addButton);
  final JButton removeButton=new JButton(ApplicationBundle.message("button.remove"));
  removeButton.setEnabled(false);
  testsPanel.getEntryTable().getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      removeButton.setEnabled(testsPanel.getEntryTable().getSelectedRows() != null);
    }
  }
);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final int selectedRow=testsPanel.getEntryTable().getSelectedRow();
      testsPanel.remove(testsPanel.getValueAt(selectedRow));
    }
  }
);
  buttonsPanel.add(removeButton);
  panel.add(buttonsPanel,BorderLayout.EAST);
  return panel;
}
