{
  final JavaCodeFragmentFactory factory=JavaCodeFragmentFactory.getInstance(place.getProject());
  PsiType varType=qualifierType;
  if (varType instanceof PsiEllipsisType) {
    varType=((PsiEllipsisType)varType).getComponentType();
  }
  if (varType instanceof PsiWildcardType || varType instanceof PsiCapturedWildcardType) {
    varType=TypeConversionUtil.erasure(expectedType);
  }
  final String typeText=varType.getCanonicalText();
  final JavaCodeFragment block=factory.createCodeBlockCodeFragment(typeText + " xxx;xxx.xxx;",place,false);
  final PsiElement secondChild=block.getChildren()[1];
  if (!(secondChild instanceof PsiExpressionStatement)) {
    LOG.error(typeText + " of " + varType.getClass());
  }
  final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)secondChild;
  final PsiReferenceExpression mockRef=(PsiReferenceExpression)expressionStatement.getExpression();
  final ElementFilter filter=getReferenceFilter(place,true);
  for (  final LookupElement item : completeFinalReference(place,mockRef,filter,parameters)) {
    if (shoudChain(place,varType,expectedType,item)) {
      result.consume(new JavaChainLookupElement(qualifierItem,item));
    }
  }
}
