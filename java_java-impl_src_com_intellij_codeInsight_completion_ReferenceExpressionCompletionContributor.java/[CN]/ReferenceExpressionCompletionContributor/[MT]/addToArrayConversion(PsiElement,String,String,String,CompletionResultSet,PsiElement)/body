{
  final boolean callSpace=CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES;
  final PsiExpression conversion;
  try {
    conversion=createExpression(getQualifierText(qualifier) + prefix + ".toArray("+ getSpace(callSpace)+ expressionString+ getSpace(callSpace)+ ")",element);
  }
 catch (  IncorrectOperationException e) {
    return;
  }
  final LookupItem item=new ExpressionLookupItem(conversion);
  item.setLookupString(prefix + ".toArray(" + getSpace(callSpace)+ expressionString+ getSpace(callSpace)+ ")");
  item.setPresentableText(prefix + ".toArray(" + presentableString+ ")");
  item.addLookupStrings(presentableString);
  item.setIcon(Icons.METHOD_ICON);
  item.setInsertHandler(new InsertHandler<LookupItem>(){
    public void handleInsert(    InsertionContext context,    LookupItem item){
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.SECOND_SMART_COMPLETION_TOAR);
      final Editor editor=context.getEditor();
      final int startOffset=context.getStartOffset();
      final Document document=editor.getDocument();
      final int tailOffset=startOffset + item.getLookupString().length();
      final Project project=editor.getProject();
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
      try {
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(file,startOffset,tailOffset);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();
    }
  }
);
  result.addElement(item);
}
