{
  if (itemType instanceof PsiArrayType && expectedType.isAssignableFrom(((PsiArrayType)itemType).getComponentType())) {
    final PsiExpression conversion=JavaPsiFacade.getInstance(element.getProject()).getElementFactory().createExpressionFromText(getQualifierText(qualifier) + prefix + "[0]",element);
    final LookupItem item=new ExpressionLookupItem(conversion);
    @NonNls final String presentable=prefix + "[...]";
    item.setLookupString(prefix);
    item.setPresentableText(presentable);
    item.addLookupStrings(prefix);
    item.setIcon(object.getIcon(Iconable.ICON_FLAG_VISIBILITY));
    item.setInsertHandler(new InsertHandler<LookupElement>(){
      public void handleInsert(      InsertionContext context,      LookupElement item){
        FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.SECOND_SMART_COMPLETION_ARRAY_MEMBER);
        final Editor editor=context.getEditor();
        final int startOffset=context.getStartOffset();
        final Document document=editor.getDocument();
        final int tailOffset=startOffset + item.getLookupString().length();
        final String callSpace=getSpace(CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_BRACKETS);
        final String access="[" + callSpace + callSpace+ "]";
        document.insertString(tailOffset,access);
        editor.getCaretModel().moveToOffset(tailOffset + 1 + callSpace.length());
      }
    }
);
    result.addElement(item);
  }
}
