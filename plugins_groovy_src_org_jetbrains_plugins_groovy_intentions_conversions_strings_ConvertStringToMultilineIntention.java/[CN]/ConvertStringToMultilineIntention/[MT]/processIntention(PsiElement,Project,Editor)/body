{
  String quote=element.getText().startsWith("'") ? "'''" : "\"\"\"";
  StringBuilder buffer=new StringBuilder();
  buffer.append(quote);
  GrExpression old;
  if (element instanceof GrLiteralImpl) {
    appendSimpleStringValue(element,buffer,quote);
    old=(GrExpression)element;
  }
 else {
    final GrStringImpl gstring=PsiTreeUtil.getParentOfType(element,GrStringImpl.class);
    for (ASTNode child=gstring.getNode().getFirstChildNode(); child != null; child=child.getTreeNext()) {
      if (child.getElementType() == GroovyTokenTypes.mGSTRING_CONTENT) {
        appendGStringContent(child,buffer);
      }
 else       if (child.getElementType() == GroovyElementTypes.GSTRING_INJECTION) {
        buffer.append(child.getText());
      }
    }
    old=gstring;
  }
  buffer.append(quote);
  try {
    final int offset=editor.getCaretModel().getOffset();
    final TextRange range=old.getTextRange();
    int shift;
    if (range.getStartOffset() == offset) {
      shift=0;
    }
 else     if (range.getEndOffset() == offset + 1) {
      shift=-2;
    }
 else {
      shift=2;
    }
    final GrExpression newLiteral=GroovyPsiElementFactory.getInstance(project).createExpressionFromText(buffer.toString());
    old.replaceWithExpression(newLiteral,true);
    if (shift != 0) {
      editor.getCaretModel().moveToOffset(editor.getCaretModel().getOffset() + shift);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
