{
  final List<GrExpression> expressions;
  if (editor.getSelectionModel().hasSelection()) {
    expressions=Collections.singletonList(((GrExpression)element));
  }
 else {
    final AccessToken accessToken=ReadAction.start();
    try {
      expressions=collectExpressions(element);
    }
  finally {
      accessToken.finish();
    }
  }
  if (expressions.size() == 1) {
    invokeImpl(expressions.get(0),project,editor);
  }
 else   if (ApplicationManager.getApplication().isUnitTestMode()) {
    invokeImpl(expressions.get(expressions.size() - 1),project,editor);
  }
 else {
    final Pass<GrExpression> callback=new Pass<GrExpression>(){
      public void pass(      @NotNull final GrExpression selectedValue){
        invokeImpl(selectedValue,project,editor);
      }
    }
;
    final Function<GrExpression,String> renderer=new Function<GrExpression,String>(){
      @Override public String fun(      @NotNull GrExpression grExpression){
        return grExpression.getText();
      }
    }
;
    IntroduceTargetChooser.showChooser(editor,expressions,callback,renderer);
  }
}
