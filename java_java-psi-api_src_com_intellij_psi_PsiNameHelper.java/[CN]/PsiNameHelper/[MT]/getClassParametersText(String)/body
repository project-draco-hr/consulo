{
  if (referenceText.indexOf('<') < 0)   return ArrayUtil.EMPTY_STRING_ARRAY;
  referenceText=removeWhitespace(referenceText);
  final char[] chars=referenceText.toCharArray();
  int afterLastDotIndex=0;
  int level=0;
  for (int i=0; i < chars.length; i++) {
    char aChar=chars[i];
switch (aChar) {
case '<':
      level++;
    break;
case '.':
  if (level == 0)   afterLastDotIndex=i + 1;
break;
case '>':
level--;
break;
}
}
if (level != 0) return ArrayUtil.EMPTY_STRING_ARRAY;
int dim=0;
for (int i=afterLastDotIndex; i < chars.length; i++) {
char aChar=chars[i];
switch (aChar) {
case '<':
level++;
if (level == 1) dim++;
break;
case ',':
if (level == 1) dim++;
break;
case '>':
level--;
break;
}
}
if (level != 0 || dim == 0) return ArrayUtil.EMPTY_STRING_ARRAY;
final String[] result=new String[dim];
dim=0;
int ltPos=0;
for (int i=afterLastDotIndex; i < chars.length; i++) {
final char aChar=chars[i];
switch (aChar) {
case '<':
level++;
if (level == 1) ltPos=i;
break;
case ',':
if (level == 1) {
result[dim++]=new String(chars,ltPos + 1,i - ltPos - 1);
ltPos=i;
}
break;
case '>':
level--;
if (level == 0) result[dim++]=new String(chars,ltPos + 1,i - ltPos - 1);
break;
}
}
return result;
}
