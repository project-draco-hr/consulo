{
  Map<File,Set<ExportableApplicationComponent>> fileToComponents=new HashMap<File,Set<ExportableApplicationComponent>>();
  final List<ExportableApplicationComponent> components=new ArrayList<ExportableApplicationComponent>(Arrays.asList(ApplicationManager.getApplication().getComponents(ExportableApplicationComponent.class)));
  final ExportableBean[] exportableBeans=Extensions.getExtensions(ExportableApplicationComponent.EXTENSION_POINT);
  for (  ExportableBean exportableBean : exportableBeans) {
    final String serviceClass=exportableBean.serviceInterface;
    if (serviceClass == null) {
      LOG.error("Service interface not specified in " + ExportableApplicationComponent.EXTENSION_POINT);
      continue;
    }
    try {
      final Class<?> aClass=Class.forName(serviceClass,true,exportableBean.getPluginDescriptor().getPluginClassLoader());
      final Object service=ServiceManager.getService(aClass);
      if (service == null) {
        LOG.error("Can't find service: " + serviceClass);
        continue;
      }
      if (!(service instanceof ExportableApplicationComponent)) {
        LOG.error("Service " + serviceClass + " is registered in exportable EP, but doesn't implement ExportableApplicationComponent");
        continue;
      }
      components.add((ExportableApplicationComponent)service);
    }
 catch (    ClassNotFoundException e) {
      LOG.error(e);
    }
  }
  for (  ExportableApplicationComponent component : components) {
    exportableComponents.add(component);
    final File[] exportFiles=component.getExportFiles();
    for (    File exportFile : exportFiles) {
      Set<ExportableApplicationComponent> componentsTied=fileToComponents.get(exportFile);
      if (componentsTied == null) {
        componentsTied=new HashSet<ExportableApplicationComponent>();
        fileToComponents.put(exportFile,componentsTied);
      }
      componentsTied.add(component);
    }
  }
  return fileToComponents;
}
