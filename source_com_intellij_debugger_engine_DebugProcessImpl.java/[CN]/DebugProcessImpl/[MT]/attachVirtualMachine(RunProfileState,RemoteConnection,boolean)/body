{
  myWaitFor.down();
  LOG.assertTrue(SwingUtilities.isEventDispatchThread());
  LOG.assertTrue(isInInitialState());
  myConnection=remoteConnection;
  createVirtualMachine(state,pollConnection);
  try {
synchronized (myProcessListeners) {
      myExecutionResult=state.execute();
      for (Iterator<ProcessListener> iterator=myProcessListeners.iterator(); iterator.hasNext(); ) {
        ProcessListener processListener=iterator.next();
        myExecutionResult.getProcessHandler().addProcessListener(processListener);
      }
      myProcessListeners.clear();
    }
  }
 catch (  ExecutionException e) {
    fail();
    throw e;
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return myExecutionResult;
  }
  final Alarm debugPortTimeout=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
  myExecutionResult.getProcessHandler().addProcessListener(new ProcessAdapter(){
    public void processTerminated(    ProcessEvent event){
      debugPortTimeout.cancelAllRequests();
    }
    public void startNotified(    ProcessEvent event){
      debugPortTimeout.addRequest(new Runnable(){
        public void run(){
          if (isInInitialState()) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                String message=createConnectionStatusMessage("Check your run/debug configuration. Failed to establish connection to the target VM",remoteConnection);
                Messages.showErrorDialog(myProject,message,"Cannot Debug Application");
              }
            }
);
          }
        }
      }
,LOCAL_START_TIMEOUT);
    }
  }
);
  return myExecutionResult;
}
