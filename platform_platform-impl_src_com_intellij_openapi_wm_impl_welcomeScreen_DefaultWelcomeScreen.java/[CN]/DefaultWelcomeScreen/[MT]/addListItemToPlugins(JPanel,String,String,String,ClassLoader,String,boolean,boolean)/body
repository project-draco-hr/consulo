{
  if (StringUtil.isEmptyOrSpaces(name)) {
    return;
  }
 else {
    name=name.trim();
  }
  final int y=myPluginsIdx+=2;
  Icon logoImage;
  if (StringUtil.isEmptyOrSpaces(iconPath)) {
    logoImage=new EmptyIcon(PLUGIN_LOGO_SIZE.width,PLUGIN_LOGO_SIZE.height);
  }
 else {
    logoImage=IconLoader.findIcon(iconPath,pluginClassLoader);
    if (logoImage == null)     logoImage=new EmptyIcon(PLUGIN_LOGO_SIZE.width,PLUGIN_LOGO_SIZE.height);
  }
  JLabel imageLabel=new JLabel(logoImage);
  GridBagConstraints gBC=new GridBagConstraints(0,y,1,1,0,0,NORTHWEST,NONE,new Insets(15,20,0,0),0,0);
  panel.add(imageLabel,gBC);
  name=name + " " + (incompatible ? UIBundle.message("welcome.screen.incompatible.plugins.description") : (enabled ? "" : UIBundle.message("welcome.screen.disabled.plugins.description")));
  String shortenedName=adjustStringBreaksByWidth(name,LINK_FONT,false,PLUGIN_NAME_MAX_WIDTH,PLUGIN_NAME_MAX_ROWS);
  JLabel logoName=new JLabel(shortenedName);
  logoName.setFont(LINK_FONT);
  logoName.setForeground(enabled ? CAPTION_COLOR : DISABLED_CAPTION_COLOR);
  if (shortenedName.endsWith(___HTML_SUFFIX)) {
    logoName.setToolTipText(adjustStringBreaksByWidth(name,UIUtil.getToolTipFont(),false,MAX_TOOLTIP_WIDTH,0));
  }
  JPanel logoPanel=new JPanel(new BorderLayout());
  logoPanel.setBackground(PLUGINS_PANEL_BACKGROUND);
  logoPanel.add(logoName,BorderLayout.WEST);
  gBC=new GridBagConstraints(1,y,1,1,0,0,NORTHWEST,NONE,new Insets(15,7,0,0),0,0);
  panel.add(logoPanel,gBC);
  if (!StringUtil.isEmptyOrSpaces(url)) {
    JLabel learnMore=new JLabel(UIBundle.message("welcome.screen.plugins.panel.learn.more.link"));
    learnMore.setFont(LINK_FONT);
    learnMore.setForeground(enabled ? CAPTION_COLOR : DISABLED_CAPTION_COLOR);
    learnMore.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    learnMore.setToolTipText(UIBundle.message("welcome.screen.plugins.panel.learn.more.tooltip.text"));
    new ClickListener(){
      @Override public boolean onClick(      MouseEvent e,      int clickCount){
        try {
          BrowserUtil.launchBrowser(url);
        }
 catch (        IllegalThreadStateException ignore) {
        }
        return true;
      }
    }
.installOn(learnMore);
    logoPanel.add(new JLabel(" "),BorderLayout.CENTER);
    logoPanel.add(learnMore,BorderLayout.EAST);
  }
  if (!StringUtil.isEmpty(description)) {
    description=description.trim();
    if (description.startsWith(HTML_PREFIX)) {
      description=description.replaceAll(HTML_PREFIX,"");
      if (description.endsWith(HTML_SUFFIX)) {
        description=description.replaceAll(HTML_SUFFIX,"");
      }
    }
    description=description.replaceAll(ESC_NEW_LINE,"");
    String shortenedDcs=adjustStringBreaksByWidth(description,TEXT_FONT,false,PLUGIN_DSC_MAX_WIDTH,PLUGIN_DSC_MAX_ROWS);
    JLabel pluginDescription=new JLabel(shortenedDcs);
    pluginDescription.setFont(TEXT_FONT);
    if (shortenedDcs.endsWith(___HTML_SUFFIX)) {
      pluginDescription.setToolTipText(adjustStringBreaksByWidth(description,UIUtil.getToolTipFont(),false,MAX_TOOLTIP_WIDTH,0));
    }
    gBC=new GridBagConstraints(1,y + 1,1,1,0,0,NORTHWEST,HORIZONTAL,new Insets(5,7,0,0),5,0);
    panel.add(pluginDescription,gBC);
  }
}
