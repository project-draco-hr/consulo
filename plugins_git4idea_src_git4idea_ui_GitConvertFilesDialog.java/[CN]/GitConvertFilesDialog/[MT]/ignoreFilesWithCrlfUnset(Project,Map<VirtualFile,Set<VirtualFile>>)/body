{
  boolean stdin=CHECK_ATTR_STDIN_SUPPORTED.isLessOrEqual(GitVcs.getInstance(project).getVersion());
  stdin=false;
  for (  final Map.Entry<VirtualFile,Set<VirtualFile>> e : files.entrySet()) {
    final VirtualFile r=e.getKey();
    GitSimpleHandler h=new GitSimpleHandler(project,r,GitCommand.CHECK_ATTR);
    if (stdin) {
      h.addParameters("--stdin","-z");
    }
    h.addParameters("crlf");
    h.setSilent(true);
    h.setNoSSH(true);
    final HashMap<String,VirtualFile> filesToCheck=new HashMap<String,VirtualFile>();
    Set<VirtualFile> fileSet=e.getValue();
    for (    VirtualFile file : fileSet) {
      filesToCheck.put(GitUtil.relativePath(r,file),file);
    }
    if (stdin) {
      h.setInputProcessor(new Processor<OutputStream>(){
        public boolean process(        OutputStream outputStream){
          try {
            OutputStreamWriter out=new OutputStreamWriter(outputStream,GitUtil.UTF8_CHARSET);
            try {
              for (              String file : filesToCheck.keySet()) {
                out.write(file);
                out.write("\u0000");
              }
            }
  finally {
              out.close();
            }
          }
 catch (          IOException ex) {
            try {
              outputStream.close();
            }
 catch (            IOException ioe) {
            }
          }
          return true;
        }
      }
);
    }
 else {
      h.endOptions();
      h.addRelativeFiles(filesToCheck.values());
    }
    StringScanner output=new StringScanner(h.run());
    String unsetIndicator=": crlf: unset";
    while (output.hasMoreData()) {
      String l=output.line();
      if (l.endsWith(unsetIndicator)) {
        fileSet.remove(filesToCheck.get(GitUtil.unescapePath(l.substring(0,l.length() - unsetIndicator.length()))));
      }
    }
  }
}
