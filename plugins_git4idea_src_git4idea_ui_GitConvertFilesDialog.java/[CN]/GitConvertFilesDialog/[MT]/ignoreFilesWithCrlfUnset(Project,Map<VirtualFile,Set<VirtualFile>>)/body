{
  for (  final Map.Entry<VirtualFile,Set<VirtualFile>> e : files.entrySet()) {
    final VirtualFile r=e.getKey();
    final HashMap<String,VirtualFile> filesToCheck=new HashMap<String,VirtualFile>();
    Set<VirtualFile> fileSet=e.getValue();
    for (    VirtualFile file : fileSet) {
      filesToCheck.put(GitUtil.relativePath(r,file),file);
    }
    final List<List<String>> chunkedFiles=GitFileUtils.chunkFiles(r,filesToCheck.values());
    for (    List<String> list : chunkedFiles) {
      GitSimpleHandler h=new GitSimpleHandler(project,r,GitCommand.CHECK_ATTR);
      h.addParameters("crlf");
      h.setSilent(true);
      h.setNoSSH(true);
      h.endOptions();
      h.addParameters(list);
      StringScanner output=new StringScanner(h.run());
      String unsetIndicator=": crlf: unset";
      while (output.hasMoreData()) {
        String l=output.line();
        if (l.endsWith(unsetIndicator)) {
          fileSet.remove(filesToCheck.get(GitUtil.unescapePath(l.substring(0,l.length() - unsetIndicator.length()))));
        }
      }
    }
  }
}
