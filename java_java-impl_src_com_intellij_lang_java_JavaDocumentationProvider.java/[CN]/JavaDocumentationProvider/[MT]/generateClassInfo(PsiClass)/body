{
  StringBuffer buffer=new StringBuffer();
  if (aClass instanceof PsiAnonymousClass)   return LangBundle.message("java.terms.anonymous.class");
  PsiFile file=aClass.getContainingFile();
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  if (module != null) {
    buffer.append('[').append(module.getName()).append("] ");
  }
  if (file instanceof PsiJavaFile) {
    String packageName=((PsiJavaFile)file).getPackageName();
    if (packageName.length() > 0) {
      buffer.append(packageName);
      newLine(buffer);
    }
  }
  generateModifiers(buffer,aClass);
  final String classString=aClass.isInterface() ? "java.terms.interface" : aClass instanceof PsiTypeParameter ? "java.terms.type.parameter" : aClass.isEnum() ? "java.terms.enum" : "java.terms.class";
  buffer.append(LangBundle.message(classString) + " ");
  buffer.append(JavaDocUtil.getShortestClassName(aClass,aClass));
  if (aClass.hasTypeParameters()) {
    PsiTypeParameter[] parms=aClass.getTypeParameters();
    buffer.append("<");
    for (int i=0; i < parms.length; i++) {
      PsiTypeParameter p=parms[i];
      buffer.append(p.getName());
      PsiClassType[] refs=p.getExtendsList().getReferencedTypes();
      if (refs.length > 0) {
        buffer.append(" extends ");
        for (int j=0; j < refs.length; j++) {
          generateType(buffer,refs[j],aClass);
          if (j < refs.length - 1) {
            buffer.append(" & ");
          }
        }
      }
      if (i < parms.length - 1) {
        buffer.append(", ");
      }
    }
    buffer.append(">");
  }
  PsiClassType[] refs;
  if (!aClass.isEnum() && !aClass.isAnnotationType()) {
    PsiReferenceList extendsList=aClass.getExtendsList();
    refs=extendsList == null ? PsiClassType.EMPTY_ARRAY : extendsList.getReferencedTypes();
    if (refs.length > 0 || !aClass.isInterface() && !"java.lang.Object".equals(aClass.getQualifiedName())) {
      buffer.append(" extends ");
      if (refs.length == 0) {
        buffer.append("Object");
      }
 else {
        for (int i=0; i < refs.length; i++) {
          generateType(buffer,refs[i],aClass);
          if (i < refs.length - 1) {
            buffer.append(", ");
          }
        }
      }
    }
  }
  refs=aClass.getImplementsListTypes();
  if (refs.length > 0) {
    newLine(buffer);
    buffer.append("implements ");
    for (int i=0; i < refs.length; i++) {
      generateType(buffer,refs[i],aClass);
      if (i < refs.length - 1) {
        buffer.append(", ");
      }
    }
  }
  return buffer.toString();
}
