{
  final ContentRevision before;
  final ContentRevision after;
  FileStatus status=null;
  final String path=parts.get(1);
  final List<GitRevisionNumber> parentRevisions=new ArrayList<GitRevisionNumber>(parents.size());
  for (  AbstractHash parent : parents) {
    parentRevisions.add(new GitRevisionNumber(parent.getString()));
  }
switch (parts.get(0).charAt(0)) {
case 'C':
case 'A':
    before=null;
  status=FileStatus.ADDED;
after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
case 'U':
status=FileStatus.MERGED_WITH_CONFLICTS;
case 'M':
if (status == null) {
status=FileStatus.MODIFIED;
}
final FilePath filePath=GitContentRevision.createPath(vcsRoot,path,false,true,true);
before=GitContentRevision.createMultipleParentsRevision(project,filePath,parentRevisions);
after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
case 'D':
status=FileStatus.DELETED;
final FilePath filePathDeleted=GitContentRevision.createPath(vcsRoot,path,true,true,true);
before=GitContentRevision.createMultipleParentsRevision(project,filePathDeleted,parentRevisions);
after=null;
break;
case 'R':
status=FileStatus.MODIFIED;
final FilePath filePathAfterRename=GitContentRevision.createPath(vcsRoot,parts.get(2),false,false,true);
after=GitContentRevision.createMultipleParentsRevision(project,filePathAfterRename,parentRevisions);
before=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,true,true,true);
break;
case 'T':
status=FileStatus.MODIFIED;
final FilePath filePath2=GitContentRevision.createPath(vcsRoot,path,false,true,true);
before=GitContentRevision.createMultipleParentsRevision(project,filePath2,parentRevisions);
after=GitContentRevision.createRevision(vcsRoot,path,thisRevision,project,false,false,true);
break;
default :
throw new VcsException("Unknown file status: " + Arrays.asList(parts));
}
return new Change(before,after,status);
}
