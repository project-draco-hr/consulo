{
  initTree();
  JPanel panel=new MavenProjectsNavigatorPanel(myProject,myTree);
  final ToolWindowManagerEx manager=ToolWindowManagerEx.getInstanceEx(myProject);
  myToolWindow=manager.registerToolWindow(TOOL_WINDOW_ID,panel,ToolWindowAnchor.RIGHT,myProject,true);
  myToolWindow.setIcon(MavenIcons.ToolWindowMaven);
  final ToolWindowManagerAdapter listener=new ToolWindowManagerAdapter(){
    boolean wasVisible=false;
    @Override public void stateChanged(){
      if (myToolWindow.isDisposed())       return;
      boolean visible=myToolWindow.isVisible();
      if (!visible || visible == wasVisible)       return;
      scheduleStructureUpdate();
      wasVisible=visible;
    }
  }
;
  manager.addToolWindowManagerListener(listener);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      manager.removeToolWindowManagerListener(listener);
    }
  }
);
}
