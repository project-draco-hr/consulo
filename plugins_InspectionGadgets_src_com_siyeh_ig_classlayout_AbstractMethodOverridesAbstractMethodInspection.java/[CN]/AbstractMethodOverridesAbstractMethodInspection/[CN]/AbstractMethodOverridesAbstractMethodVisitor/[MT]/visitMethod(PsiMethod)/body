{
  if (method.isConstructor()) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!method.hasModifierProperty(PsiModifier.ABSTRACT) && !containingClass.isInterface()) {
    return;
  }
  final PsiMethod[] superMethods=PsiSuperMethodUtil.findSuperMethods(method);
  for (  final PsiMethod superMethod : superMethods) {
    final PsiClass superClass=superMethod.getContainingClass();
    if (superClass.isInterface() || superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
      registerMethodError(method);
      return;
    }
  }
}
