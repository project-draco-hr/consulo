{
  final DataContext dataContext=e.getDataContext();
  final Component component=(Component)dataContext.getData(DataConstantsEx.CONTEXT_COMPONENT);
  final String path=ChooseComponentsToExportDialog.chooseSettingsFile(PathManager.getConfigPath(),component,"Import File Location","Choose import file path or directory where the file located");
  if (path == null)   return;
  final File saveFile=new File(path);
  try {
    if (!saveFile.exists()) {
      Messages.showErrorDialog("Cannot find file " + presentableFileName(saveFile),"File Not Found");
      return;
    }
    final ZipFile zipFile=new ZipFile(saveFile);
    final ZipEntry magicEntry=zipFile.getEntry(ExportSettingsAction.SETTINGS_JAR_MARKER);
    if (magicEntry == null) {
      Messages.showErrorDialog("The file " + presentableFileName(saveFile) + " contains no settings to import.\n"+ promptLocationMessage(),"Invalid File");
      return;
    }
    final ArrayList<ExportableApplicationComponent> registeredComponents=new ArrayList<ExportableApplicationComponent>();
    final Map<File,Set<ExportableApplicationComponent>> filesToComponents=ExportSettingsAction.getRegisteredComponentsAndFiles(registeredComponents);
    List<ExportableApplicationComponent> components=getComponentsStored(saveFile,registeredComponents);
    final ChooseComponentsToExportDialog dialog=new ChooseComponentsToExportDialog(components,filesToComponents,false,"Select Components to Import","Please check all components to import:");
    dialog.show();
    if (!dialog.isOK())     return;
    final Set<ExportableApplicationComponent> chosenComponents=dialog.getExportableComponents();
    Set<String> relativeNamesToExtract=new HashSet<String>();
    for (Iterator iterator=chosenComponents.iterator(); iterator.hasNext(); ) {
      ExportableApplicationComponent chosenComponent=(ExportableApplicationComponent)iterator.next();
      final File[] exportFiles=chosenComponent.getExportFiles();
      for (int j=0; j < exportFiles.length; j++) {
        File exportFile=exportFiles[j];
        final File configPath=new File(PathManager.getConfigPath());
        final String relativePath=FileUtil.toSystemIndependentName(FileUtil.getRelativePath(configPath,exportFile));
        relativeNamesToExtract.add(relativePath);
      }
    }
    final File tempFile=new File(PathManagerEx.getPluginTempPath() + "/" + saveFile.getName());
    FileUtil.copy(saveFile,tempFile);
    File outDir=new File(PathManager.getConfigPath());
    final MyFilenameFilter filenameFilter=new MyFilenameFilter(relativeNamesToExtract);
    StartupActionScriptManager.ActionCommand unzip=new StartupActionScriptManager.UnzipCommand(tempFile,outDir,filenameFilter);
    StartupActionScriptManager.addActionCommand(unzip);
    StartupActionScriptManager.ActionCommand deleteTemp=new StartupActionScriptManager.DeleteCommand(tempFile);
    StartupActionScriptManager.addActionCommand(deleteTemp);
    final int ret=Messages.showOkCancelDialog("Settings imported successfully. You have to restart IDEA to reload the settings." + "\nShutdown Intellij IDEA?","Restart Needed",Messages.getQuestionIcon());
    if (ret == 0) {
      ApplicationManager.getApplication().exit();
    }
  }
 catch (  ZipException e1) {
    Messages.showErrorDialog("Error reading file " + presentableFileName(saveFile) + ".\n"+ "There was "+ e1.getMessage()+ "\n\n"+ promptLocationMessage(),"Invalid File");
  }
catch (  IOException e1) {
    Messages.showErrorDialog("Error reading file " + presentableFileName(saveFile) + ".\n\n"+ e1.getMessage(),"Error Reading File");
  }
}
