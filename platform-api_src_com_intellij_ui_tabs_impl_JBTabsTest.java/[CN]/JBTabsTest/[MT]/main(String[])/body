{
  System.out.println("JBTabs.main");
  IconLoader.activate();
  final JFrame frame=new JFrame();
  frame.getContentPane().setLayout(new BorderLayout());
  final int[] count=new int[1];
  final JBTabsImpl tabs=new JBTabsImpl(null,null,null,new Disposable(){
    public void dispose(){
    }
  }
);
  frame.getContentPane().add(tabs.getComponent(),BorderLayout.CENTER);
  JPanel south=new JPanel(new FlowLayout());
  final JCheckBox f=new JCheckBox("Focused");
  f.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setFocused(f.isSelected());
    }
  }
);
  south.add(f);
  final JCheckBox v=new JCheckBox("Vertical");
  v.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setSideComponentVertical(v.isSelected());
    }
  }
);
  south.add(v);
  final JCheckBox row=new JCheckBox("Single row",true);
  row.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setSingleRow(row.isSelected());
    }
  }
);
  south.add(row);
  final JCheckBox ghosts=new JCheckBox("Ghosts always visible",false);
  ghosts.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setGhostsAlwaysVisible(ghosts.isSelected());
    }
  }
);
  south.add(ghosts);
  final JCheckBox stealth=new JCheckBox("Stealth tab",tabs.isStealthTabMode());
  stealth.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setStealthTabMode(stealth.isSelected());
    }
  }
);
  south.add(stealth);
  final JCheckBox hide=new JCheckBox("Hide tabs",tabs.isHideTabs());
  hide.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setHideTabs(hide.isSelected());
    }
  }
);
  south.add(hide);
  frame.getContentPane().add(south,BorderLayout.SOUTH);
  tabs.addListener(new TabsListener(){
    public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      System.out.println("TabsWithActions.selectionChanged old=" + oldSelection + " new="+ newSelection);
    }
  }
);
  tabs.addTab(new TabInfo(new JTree(){
    public void addNotify(){
      super.addNotify();
      System.out.println("JBTabs.addNotify");
    }
    public void removeNotify(){
      System.out.println("JBTabs.removeNotify");
      super.removeNotify();
    }
  }
)).setText("Tree1").setActions(new DefaultActionGroup(),null).setIcon(IconLoader.getIcon("/debugger/frame.png"));
  final JTree component=new JTree();
  final TabInfo toAnimate1=new TabInfo(component);
  final JCheckBox attract1=new JCheckBox("Attract 1");
  attract1.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (attract1.isSelected()) {
        toAnimate1.fireAlert();
      }
 else {
        toAnimate1.stopAlerting();
      }
    }
  }
);
  south.add(attract1);
  final JCheckBox hide1=new JCheckBox("Hide 1",toAnimate1.isHidden());
  hide1.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      toAnimate1.setHidden(!toAnimate1.isHidden());
    }
  }
);
  south.add(hide1);
  final JCheckBox block=new JCheckBox("Block",false);
  block.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      tabs.setPaintBlocked(!block.isSelected());
    }
  }
);
  south.add(block);
  final JCheckBox fill=new JCheckBox("Tab fill in",true);
  fill.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      tabs.setActiveTabFillIn(fill.isSelected() ? Color.white : null);
    }
  }
);
  south.add(fill);
  final JButton refire=new JButton("Re-fire attraction");
  refire.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      toAnimate1.fireAlert();
    }
  }
);
  south.add(refire);
  tabs.addTab(toAnimate1).append("Tree2",new SimpleTextAttributes(SimpleTextAttributes.STYLE_WAVED,Color.black,Color.red));
  tabs.addTab(new TabInfo(new JTable())).setText("Table 1").setActions(new DefaultActionGroup(),null);
  tabs.addTab(new TabInfo(new JTable())).setText("Table 2").setActions(new DefaultActionGroup(),null);
  tabs.addTab(new TabInfo(new JTable())).setText("Table 3").setActions(new DefaultActionGroup(),null);
  tabs.setPaintBorder(1,-1,-1,-1);
  tabs.setActiveTabFillIn(Color.white);
  tabs.setGhostsAlwaysVisible(true);
  tabs.setBorder(new EmptyBorder(10,10,10,10));
  tabs.setUiDecorator(new UiDecorator(){
    public UiDecoration getDecoration(){
      return new UiDecoration(null,new Insets(0,-1,0,-1));
    }
  }
);
  tabs.setStealthTabMode(true);
  frame.setBounds(1400,200,1000,600);
  frame.show();
}
