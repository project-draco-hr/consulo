{
  PsiClass psiClass=JVMNameUtil.getClassAt(position);
  if (psiClass == null) {
    return null;
  }
  String waitPrepareFor;
  ClassPrepareRequestor waitRequestor;
  if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
    PsiClass parent=JVMNameUtil.getTopLevelParentClass(psiClass);
    if (parent == null) {
      return null;
    }
    final String parentQName=JVMNameUtil.getNonAnonymousClassName(parent);
    if (parentQName == null) {
      return null;
    }
    waitPrepareFor=parentQName + "$*";
    waitRequestor=new ClassPrepareRequestor(){
      public void processClassPrepare(      DebugProcess debuggerProcess,      ReferenceType referenceType){
        final CompoundPositionManager positionManager=((DebugProcessImpl)debuggerProcess).getPositionManager();
        if (positionManager.locationsOfLine(referenceType,position).size() > 0) {
          requestor.processClassPrepare(debuggerProcess,referenceType);
        }
 else {
          final List<ReferenceType> positionClasses=positionManager.getAllClasses(position);
          if (positionClasses.contains(referenceType)) {
            requestor.processClassPrepare(debuggerProcess,referenceType);
          }
        }
      }
    }
;
  }
 else {
    waitPrepareFor=JVMNameUtil.getNonAnonymousClassName(psiClass);
    waitRequestor=requestor;
  }
  if (waitPrepareFor == null) {
    return null;
  }
  return myDebugProcess.getRequestsManager().createClassPrepareRequest(waitRequestor,waitPrepareFor);
}
