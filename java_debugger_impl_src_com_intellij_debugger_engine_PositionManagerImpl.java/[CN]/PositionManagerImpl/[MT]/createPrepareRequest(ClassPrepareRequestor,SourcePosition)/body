{
  final Ref<String> waitPrepareFor=new Ref<String>(null);
  final Ref<ClassPrepareRequestor> waitRequestor=new Ref<ClassPrepareRequestor>(null);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      PsiClass psiClass=JVMNameUtil.getClassAt(position);
      if (psiClass == null) {
        return;
      }
      if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
        PsiClass parent=JVMNameUtil.getTopLevelParentClass(psiClass);
        if (parent == null) {
          return;
        }
        final String parentQName=JVMNameUtil.getNonAnonymousClassName(parent);
        if (parentQName == null) {
          return;
        }
        waitPrepareFor.set(parentQName + "$*");
        waitRequestor.set(new ClassPrepareRequestor(){
          public void processClassPrepare(          DebugProcess debuggerProcess,          ReferenceType referenceType){
            final CompoundPositionManager positionManager=((DebugProcessImpl)debuggerProcess).getPositionManager();
            if (positionManager.locationsOfLine(referenceType,position).size() > 0) {
              requestor.processClassPrepare(debuggerProcess,referenceType);
            }
 else {
              final List<ReferenceType> positionClasses=positionManager.getAllClasses(position);
              if (positionClasses.contains(referenceType)) {
                requestor.processClassPrepare(debuggerProcess,referenceType);
              }
            }
          }
        }
);
      }
 else {
        waitPrepareFor.set(JVMNameUtil.getNonAnonymousClassName(psiClass));
        waitRequestor.set(requestor);
      }
    }
  }
);
  if (waitPrepareFor.get() == null) {
    return null;
  }
  return myDebugProcess.getRequestsManager().createClassPrepareRequest(waitRequestor.get(),waitPrepareFor.get());
}
