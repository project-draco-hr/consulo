{
  return ApplicationManager.getApplication().runReadAction(new Computable<Trinity<String,Boolean,PsiClass>>(){
    public Trinity<String,Boolean,PsiClass> compute(){
      final PsiClass psiClass=JVMNameUtil.getClassAt(classPosition);
      if (psiClass == null) {
        return null;
      }
      if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
        final PsiClass parentNonLocal=JVMNameUtil.getTopLevelParentClass(psiClass);
        if (parentNonLocal == null) {
          LOG.error("Local or anonymous class has no non-local parent");
          return null;
        }
        final String parentClassName=JVMNameUtil.getNonAnonymousClassName(parentNonLocal);
        if (parentClassName == null) {
          LOG.error("The name of a parent of a local (anonymous) class is null");
          return null;
        }
        return new Trinity<String,Boolean,PsiClass>(parentClassName,Boolean.FALSE,psiClass);
      }
      final String className=JVMNameUtil.getNonAnonymousClassName(psiClass);
      return className != null ? new Trinity<String,Boolean,PsiClass>(className,Boolean.TRUE,psiClass) : null;
    }
  }
);
}
