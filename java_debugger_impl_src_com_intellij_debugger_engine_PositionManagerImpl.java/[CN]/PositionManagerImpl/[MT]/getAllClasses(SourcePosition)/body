{
  return ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      final PsiClass psiClass=JVMNameUtil.getClassAt(classPosition);
      if (psiClass == null) {
        return Collections.emptyList();
      }
      if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
        final PsiClass parentNonLocal=JVMNameUtil.getTopLevelParentClass(psiClass);
        if (parentNonLocal == null) {
          LOG.error("Local or anonymous class has no non-local parent");
          return Collections.emptyList();
        }
        final String parentClassName=JVMNameUtil.getNonAnonymousClassName(parentNonLocal);
        if (parentClassName == null) {
          LOG.error("The name of a parent of a local (anonymous) class is null");
          return Collections.emptyList();
        }
        final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(parentClassName);
        final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
        for (        ReferenceType outer : outers) {
          final ReferenceType nested=findNested(outer,psiClass,classPosition);
          if (nested != null) {
            result.add(nested);
          }
        }
        return result;
      }
 else {
        final String className=JVMNameUtil.getNonAnonymousClassName(psiClass);
        if (className == null) {
          return Collections.emptyList();
        }
        return myDebugProcess.getVirtualMachineProxy().classesByName(className);
      }
    }
  }
);
}
