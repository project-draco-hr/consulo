{
  final Trinity<String,Boolean,PsiClass> trinity=calcClassName(classPosition);
  if (trinity == null) {
    return Collections.emptyList();
  }
  final String className=trinity.getFirst();
  final boolean isNonAnonymousClass=trinity.getSecond();
  final PsiClass classAtPosition=trinity.getThird();
  if (isNonAnonymousClass) {
    return myDebugProcess.getVirtualMachineProxy().classesByName(className);
  }
  final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(className);
  final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
  for (  ReferenceType outer : outers) {
    final ReferenceType nested=findNested(outer,classAtPosition,classPosition);
    if (nested != null) {
      result.add(nested);
    }
  }
  return result;
}
