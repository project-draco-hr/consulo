{
  final CharSequence text=myDocument.getImmutableCharSequence();
  final EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy=myEditor.new LineWhitespacePaintingStrategy();
  boolean paintAllSoftWraps=myEditor.getSettings().isAllSoftWrapsShown();
  int lineCount=myEditor.getVisibleLineCount();
  final int whiteSpaceStrokeWidth=JBUI.scale(1);
  final Stroke whiteSpaceStroke=new BasicStroke(whiteSpaceStrokeWidth);
  LineLayout prefixLayout=myView.getPrefixLayout();
  if (startVisualLine == 0 && prefixLayout != null) {
    g.setColor(myView.getPrefixAttributes().getForegroundColor());
    paintLineLayoutWithEffect(g,prefixLayout,getMinX(),myView.getAscent(),myView.getPrefixAttributes().getEffectColor(),myView.getPrefixAttributes().getEffectType());
  }
  VisualLinesIterator visLinesIterator=new VisualLinesIterator(myEditor,startVisualLine);
  while (!visLinesIterator.atEnd()) {
    int visualLine=visLinesIterator.getVisualLine();
    if (visualLine > endVisualLine || visualLine >= lineCount)     break;
    int y=visLinesIterator.getY();
    final boolean paintSoftWraps=paintAllSoftWraps || myEditor.getCaretModel().getLogicalPosition().line == visLinesIterator.getStartLogicalLine();
    final int[] currentLogicalLine=new int[]{-1};
    paintLineFragments(g,clip,visLinesIterator,y + myView.getAscent(),new LineFragmentPainter(){
      @Override public void paintBeforeLineStart(      Graphics2D g,      TextAttributes attributes,      int columnEnd,      float xEnd,      int y){
        if (paintSoftWraps) {
          SoftWrapModelImpl softWrapModel=myEditor.getSoftWrapModel();
          int symbolWidth=softWrapModel.getMinDrawingWidthInPixels(SoftWrapDrawingType.AFTER_SOFT_WRAP);
          softWrapModel.doPaint(g,SoftWrapDrawingType.AFTER_SOFT_WRAP,(int)xEnd - symbolWidth,y - myView.getAscent(),myView.getLineHeight());
        }
      }
      @Override public void paint(      Graphics2D g,      VisualLineFragmentsIterator.Fragment fragment,      int start,      int end,      TextAttributes attributes,      float xStart,      float xEnd,      int y){
        int lineHeight=myView.getLineHeight();
        List<Inlay> inlays=fragment.getCurrentInlays();
        if (inlays != null) {
          for (          Inlay inlay : inlays) {
            EditorCustomElementRenderer renderer=inlay.getRenderer();
            int width=inlay.getWidthInPixels();
            renderer.paint(myEditor,g,new Rectangle((int)xStart,y - myView.getAscent(),width,lineHeight));
            xStart+=width;
          }
          return;
        }
        boolean allowBorder=fragment.getCurrentFoldRegion() != null;
        if (attributes != null && hasTextEffect(attributes.getEffectColor(),attributes.getEffectType(),allowBorder)) {
          paintTextEffect(g,xStart,xEnd,y,attributes.getEffectColor(),attributes.getEffectType(),allowBorder);
        }
        if (attributes != null && attributes.getForegroundColor() != null) {
          g.setColor(attributes.getForegroundColor());
          fragment.draw(g,xStart,y,start,end);
        }
        if (fragment.getCurrentFoldRegion() == null) {
          int logicalLine=fragment.getStartLogicalLine();
          if (logicalLine != currentLogicalLine[0]) {
            whitespacePaintingStrategy.update(text,myDocument.getLineStartOffset(logicalLine),myDocument.getLineEndOffset(logicalLine));
            currentLogicalLine[0]=logicalLine;
          }
          paintWhitespace(g,text,xStart,y,start,end,whitespacePaintingStrategy,fragment,whiteSpaceStroke,whiteSpaceStrokeWidth);
        }
      }
      @Override public void paintAfterLineEnd(      Graphics2D g,      Rectangle clip,      IterationState iterationState,      int columnStart,      float x,      int y){
        int offset=iterationState.getEndOffset();
        SoftWrapModelImpl softWrapModel=myEditor.getSoftWrapModel();
        if (softWrapModel.getSoftWrap(offset) == null) {
          int logicalLine=myDocument.getLineNumber(offset);
          paintLineExtensions(g,logicalLine,x,y);
        }
 else         if (paintSoftWraps) {
          softWrapModel.doPaint(g,SoftWrapDrawingType.BEFORE_SOFT_WRAP_LINE_FEED,(int)x,y - myView.getAscent(),myView.getLineHeight());
        }
      }
    }
);
    visLinesIterator.advance();
  }
  ComplexTextFragment.flushDrawingCache(g);
}
