{
  Stroke oldStroke=g.getStroke();
  try {
    g.setColor(myEditor.getColorsScheme().getColor(EditorColors.WHITESPACES_COLOR));
    g.setStroke(stroke);
    boolean isRtl=fragment.isRtl();
    int baseStartOffset=fragment.getStartOffset();
    int startOffset=isRtl ? baseStartOffset - start : baseStartOffset + start;
    y-=1;
    for (int i=start; i < end; i++) {
      int charOffset=isRtl ? baseStartOffset - i - 1 : baseStartOffset + i;
      char c=text.charAt(charOffset);
      if (" \t\u3000".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) {
        int startX=(int)fragment.offsetToX(x,startOffset,isRtl ? baseStartOffset - i : baseStartOffset + i);
        int endX=(int)fragment.offsetToX(x,startOffset,isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1);
        if (c == ' ') {
          g.fillRect((startX + endX - strokeWidth) / 2,y - strokeWidth + 1,strokeWidth,strokeWidth);
        }
 else         if (c == '\t') {
          endX-=myView.getPlainSpaceWidth() / 4;
          int height=myView.getCharHeight();
          int halfHeight=height / 2;
          int mid=y - halfHeight;
          int top=y - height;
          UIUtil.drawLine(g,startX,mid,endX,mid);
          UIUtil.drawLine(g,endX,y,endX,top);
          g.fillPolygon(new int[]{endX - halfHeight,endX - halfHeight,endX},new int[]{y,y - height,y - halfHeight},3);
        }
 else         if (c == '\u3000') {
          int charHeight=myView.getCharHeight();
          g.drawRect(startX + JBUI.scale(2) + strokeWidth / 2,y - charHeight + strokeWidth / 2,endX - startX - JBUI.scale(4)- (strokeWidth - 1),charHeight - (strokeWidth - 1));
        }
      }
    }
  }
  finally {
    g.setStroke(oldStroke);
  }
}
