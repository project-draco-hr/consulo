{
  EditorImpl.CaretRectangle[] locations=myEditor.getCaretLocations(true);
  if (locations == null)   return;
  Graphics2D g=IdeBackgroundUtil.getOriginalGraphics(g_);
  int lineHeight=myView.getLineHeight();
  EditorSettings settings=myEditor.getSettings();
  Color caretColor=myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR);
  if (caretColor == null)   caretColor=new JBColor(CARET_DARK,CARET_LIGHT);
  int minX=getMinX();
  for (  EditorImpl.CaretRectangle location : locations) {
    g.setColor(caretColor);
    int x=location.myPoint.x;
    int y=location.myPoint.y;
    Caret caret=location.myCaret;
    boolean isRtl=location.myIsRtl;
    if (myEditor.isInsertMode() != settings.isBlockCursor()) {
      int lineWidth=JBUI.scale(settings.getLineCursorWidth());
      if (!ImmediatePainter.isZeroLatencyTypingEnabled()) {
        if (x > minX && lineWidth > 1)         x--;
      }
      g.fillRect(x,y,lineWidth,lineHeight);
      if (myDocument.getTextLength() > 0 && caret != null && !myView.getTextLayoutCache().getLineLayout(caret.getLogicalPosition().line).isLtr()) {
        g.fillPolygon(new int[]{isRtl ? x + lineWidth : x,isRtl ? x + lineWidth - CARET_DIRECTION_MARK_SIZE : x + CARET_DIRECTION_MARK_SIZE,isRtl ? x + lineWidth : x},new int[]{y,y,y + CARET_DIRECTION_MARK_SIZE},3);
      }
    }
 else {
      int width=location.myWidth;
      int startX=Math.max(minX,isRtl ? x - width : x);
      g.fillRect(startX,y,width,lineHeight - 1);
      if (myDocument.getTextLength() > 0 && caret != null) {
        int targetVisualColumn=caret.getVisualPosition().column;
        for (        VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,caret.getVisualLineStart(),false)) {
          int startVisualColumn=fragment.getStartVisualColumn();
          int endVisualColumn=fragment.getEndVisualColumn();
          if (startVisualColumn < targetVisualColumn && endVisualColumn > targetVisualColumn || startVisualColumn == targetVisualColumn && !isRtl || endVisualColumn == targetVisualColumn && isRtl) {
            g.setColor(ColorUtil.isDark(caretColor) ? CARET_LIGHT : CARET_DARK);
            fragment.draw(g,startX,y + myView.getAscent(),targetVisualColumn - startVisualColumn - (isRtl ? 1 : 0),targetVisualColumn - startVisualColumn + (isRtl ? 0 : 1));
            break;
          }
        }
        ComplexTextFragment.flushDrawingCache(g);
      }
    }
  }
}
