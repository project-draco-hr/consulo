{
  Rectangle clip=g.getClipBounds();
  if (myEditor.getContentComponent().isOpaque()) {
    g.setColor(myEditor.getBackgroundColor());
    g.fillRect(clip.x,clip.y,clip.width,clip.height);
  }
  if (paintPlaceholderText(g)) {
    paintCaret(g);
    return;
  }
  int startLine=myView.yToVisualLine(clip.y);
  int endLine=myView.yToVisualLine(clip.y + clip.height);
  int startOffset=myView.visualLineToOffset(startLine);
  int endOffset=myView.visualLineToOffset(endLine + 1);
  ClipDetector clipDetector=new ClipDetector(myEditor,clip);
  paintBackground(g,clip,startLine,endLine);
  paintRightMargin(g,clip);
  paintCustomRenderers(g,startOffset,endOffset);
  MarkupModelEx docMarkup=myEditor.getFilteredDocumentMarkupModel();
  paintLineMarkersSeparators(g,clip,docMarkup,startOffset,endOffset);
  paintLineMarkersSeparators(g,clip,myEditor.getMarkupModel(),startOffset,endOffset);
  paintTextWithEffects(g,clip,startLine,endLine);
  paintHighlightersAfterEndOfLine(g,docMarkup,startOffset,endOffset);
  paintHighlightersAfterEndOfLine(g,myEditor.getMarkupModel(),startOffset,endOffset);
  paintBorderEffect(g,clipDetector,myEditor.getHighlighter(),startOffset,endOffset);
  paintBorderEffect(g,clipDetector,docMarkup,startOffset,endOffset);
  paintBorderEffect(g,clipDetector,myEditor.getMarkupModel(),startOffset,endOffset);
  paintCaret(g);
  paintComposedTextDecoration(g);
}
