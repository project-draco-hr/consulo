{
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new GotoTaskAction());
  group.add(new AnAction("Remove Task","Remove Task",IconUtil.getRemoveIcon()){
    @Override public void actionPerformed(    final AnActionEvent e){
      for (      LocalTask localTask : myTable.getSelectedObjects()) {
        SwitchTaskAction.removeTask(myProject,localTask,myTaskManager);
      }
    }
  }
);
  group.add(new ToggleAction("Hide closed tasks","Hide closed tasks",AllIcons.Actions.Checked){
    @Override public boolean isSelected(    final AnActionEvent e){
      return myTimeTrackingManager.isHideClosedTasks();
    }
    @Override public void setSelected(    final AnActionEvent e,    final boolean state){
      myTimeTrackingManager.setHideClosedTasks(state);
    }
  }
);
  group.add(new ToggleAction("Auto mode","Automatic starting and stopping of timer",TasksIcons.AutoMode){
    @Override public boolean isSelected(    final AnActionEvent e){
      return myTimeTrackingManager.isTimeTrackingAutoMode();
    }
    @Override public void setSelected(    final AnActionEvent e,    final boolean state){
      myTimeTrackingManager.setTimeTrackingAutoMode(state);
      updateTable();
    }
  }
);
  group.add(new AnAction(){
    @Override public void update(    final AnActionEvent e){
      if (myTimeTrackingManager.isTimeTrackingAutoMode()) {
        e.getPresentation().setEnabled(false);
        e.getPresentation().setIcon(TasksIcons.StartTimer);
        e.getPresentation().setText("Start timer for active task");
      }
 else {
        e.getPresentation().setEnabled(true);
        if (myTaskManager.getActiveTask().isRunning()) {
          e.getPresentation().setIcon(TasksIcons.StopTimer);
          e.getPresentation().setText("Stop timer for active task");
        }
 else {
          e.getPresentation().setIcon(TasksIcons.StartTimer);
          e.getPresentation().setText("Start timer for active task");
        }
      }
    }
    @Override public void actionPerformed(    final AnActionEvent e){
      final LocalTask activeTask=myTaskManager.getActiveTask();
      if (activeTask.isRunning()) {
        activeTask.setRunning(false);
      }
 else {
        activeTask.setRunning(true);
      }
    }
  }
);
  final ActionToolbar actionToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,myVertical);
  return actionToolBar.getComponent();
}
