{
  final ColumnInfo<LocalTask,String> task=new ColumnInfo<LocalTask,String>("Task"){
    @Nullable @Override public String valueOf(    final LocalTask task){
      return task.getPresentableName();
    }
    @Nullable @Override public TableCellRenderer getRenderer(    final LocalTask task){
      return new TableCellRenderer(){
        @Override public Component getTableCellRendererComponent(        final JTable table,        final Object value,        final boolean isSelected,        final boolean hasFocus,        final int row,        final int column){
          JPanel panel=new JPanel(new BorderLayout());
          panel.setBackground(UIUtil.getTableBackground(isSelected));
          final SimpleColoredComponent component=new SimpleColoredComponent();
          final boolean isClosed=task.isClosed() || myTaskManager.isLocallyClosed(task);
          final boolean isActive=task.isActive();
          final boolean isRunning=myTimeTrackingManager.getState().autoMode ? isActive : isActive && task.isRunning();
          component.append((String)value,getAttributes(isClosed,isActive,isSelected));
          component.setIcon(isRunning ? LayeredIcon.create(task.getIcon(),AllIcons.Nodes.RunnableMark) : isClosed && !isActive ? IconLoader.getTransparentIcon(task.getIcon()) : task.getIcon());
          component.setOpaque(false);
          panel.add(component,BorderLayout.CENTER);
          panel.setOpaque(true);
          return panel;
        }
      }
;
    }
    @Nullable @Override public Comparator<LocalTask> getComparator(){
      return new Comparator<LocalTask>(){
        public int compare(        LocalTask o1,        LocalTask o2){
          int i=Comparing.compare(o2.getUpdated(),o1.getUpdated());
          return i == 0 ? Comparing.compare(o2.getCreated(),o1.getCreated()) : i;
        }
      }
;
    }
  }
;
  final ColumnInfo<LocalTask,String> spentTime=new ColumnInfo<LocalTask,String>("Time Spent"){
    @Nullable @Override public String valueOf(    final LocalTask task){
      long timeSpent=myTimeTrackingManager.getState().showSpentTimeFromLastPost ? task.getTimeSpentFromLastPost() : task.getTotalTimeSpent();
      if (task.isActive()) {
        return formatDuration(timeSpent);
      }
      return DateFormatUtil.formatDuration(timeSpent);
    }
    @Nullable @Override public TableCellRenderer getRenderer(    final LocalTask task){
      return new TableCellRenderer(){
        @Override public Component getTableCellRendererComponent(        final JTable table,        final Object value,        final boolean isSelected,        final boolean hasFocus,        final int row,        final int column){
          JPanel panel=new JPanel(new BorderLayout());
          panel.setBackground(UIUtil.getTableBackground(isSelected));
          final SimpleColoredComponent component=new SimpleColoredComponent();
          final boolean isClosed=task.isClosed() || myTaskManager.isLocallyClosed(task);
          final boolean isActive=task.isActive();
          component.append((String)value,getAttributes(isClosed,isActive,isSelected));
          component.setOpaque(false);
          panel.add(component,BorderLayout.CENTER);
          panel.setOpaque(true);
          return panel;
        }
      }
;
    }
    @Nullable @Override public Comparator<LocalTask> getComparator(){
      return new Comparator<LocalTask>(){
        @Override public int compare(        final LocalTask o1,        final LocalTask o2){
          final long timeSpent1=myTimeTrackingManager.getState().showSpentTimeFromLastPost ? o1.getTimeSpentFromLastPost() : o1.getTotalTimeSpent();
          final long timeSpent2=myTimeTrackingManager.getState().showSpentTimeFromLastPost ? o2.getTimeSpentFromLastPost() : o2.getTotalTimeSpent();
          return Comparing.compare(timeSpent1,timeSpent2);
        }
      }
;
    }
  }
;
  return new ListTableModel<LocalTask>((new ColumnInfo[]{task,spentTime}));
}
