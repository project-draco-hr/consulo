{
  PsiManager manager=PsiManager.getInstance(project);
  ArrayList<Object> array=new ArrayList<Object>();
  Object[] refObjects=new Object[refs.length];
  for (int i=0; i < referenceData.length; i++) {
    PsiJavaCodeReferenceElement ref=refs[i];
    if (ref != null) {
      LOG.assertTrue(ref.isValid());
      TextBlockTransferable.ReferenceData data=referenceData[i];
      PsiClass refClass=manager.findClass(data.qClassName,ref.getResolveScope());
      if (refClass == null)       continue;
      Object refObject=refClass;
      if (data.staticMemberName != null) {
        refObject=refClass.getQualifiedName() + "." + data.staticMemberName;
      }
      refObjects[i]=refObject;
      if (!array.contains(refObject)) {
        array.add(refObject);
      }
    }
  }
  if (array.size() == 0)   return;
  Object[] selectedObjects=array.toArray(new Object[array.size()]);
  Arrays.sort(selectedObjects,new Comparator(){
    public int compare(    Object o1,    Object o2){
      String fqName1=getFQName(o1);
      String fqName2=getFQName(o2);
      return fqName1.compareToIgnoreCase(fqName2);
    }
  }
);
  RestoreReferencesDialog dialog=new RestoreReferencesDialog(project,selectedObjects);
  dialog.show();
  selectedObjects=dialog.getSelectedElements();
  for (int i=0; i < referenceData.length; i++) {
    PsiJavaCodeReferenceElement ref=refs[i];
    if (ref != null) {
      LOG.assertTrue(ref.isValid());
      TextBlockTransferable.ReferenceData data=referenceData[i];
      Object refObject=refObjects[i];
      boolean found=false;
      for (int j=0; j < selectedObjects.length; j++) {
        Object selected=selectedObjects[j];
        if (refObject.equals(selected)) {
          found=true;
          break;
        }
      }
      if (!found) {
        refs[i]=null;
      }
    }
  }
}
