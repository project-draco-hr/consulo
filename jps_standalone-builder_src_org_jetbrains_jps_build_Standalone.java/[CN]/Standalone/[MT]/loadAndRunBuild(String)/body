{
  String globalOptionsPath=null;
  if (configPath != null) {
    File optionsDir=new File(configPath,"options");
    if (!optionsDir.isDirectory()) {
      System.err.println("'" + configPath + "' is not valid config path: "+ optionsDir.getAbsolutePath()+ " not found");
      return;
    }
    globalOptionsPath=optionsDir.getAbsolutePath();
  }
  ParameterizedRunnable<JpsModel> initializer=null;
  String scriptPath=initializationScriptPath;
  if (scriptPath != null) {
    File scriptFile=new File(scriptPath);
    if (!scriptFile.isFile()) {
      System.err.println("Script '" + scriptPath + "' not found");
      return;
    }
    initializer=new GroovyModelInitializer(scriptFile);
  }
  JpsModelLoaderImpl loader=new JpsModelLoaderImpl(projectPath,globalOptionsPath,initializer);
  BuildType buildType=incremental ? BuildType.MAKE : BuildType.PROJECT_REBUILD;
  Set<String> modulesSet=new HashSet<String>(Arrays.asList(modules));
  List<String> artifactsList=Arrays.asList(artifacts);
  File dataStorageRoot;
  if (cacheDirPath != null) {
    dataStorageRoot=new File(cacheDirPath);
  }
 else {
    dataStorageRoot=Utils.getDataStorageRoot(projectPath);
  }
  if (dataStorageRoot == null) {
    System.err.println("Error: Cannot determine build data storage root for project " + projectPath);
    return;
  }
  long start=System.currentTimeMillis();
  try {
    runBuild(loader,dataStorageRoot,buildType,modulesSet,artifactsList,true,new ConsoleMessageHandler());
  }
 catch (  Throwable t) {
    System.err.println("Internal error: " + t.getMessage());
    t.printStackTrace();
  }
  System.out.println("Build finished in " + Utils.formatDuration(System.currentTimeMillis() - start));
}
