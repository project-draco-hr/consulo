{
  Application app=ApplicationManager.getApplication();
  if (app == null || myListenerAdded)   return;
  final LocalFileSystem system=LocalFileSystem.getInstance();
  myVFSBaseDir=system.findFileByIoFile(myBaseDir);
  if (myVFSBaseDir == null && !app.isUnitTestMode() && !app.isHeadlessEnvironment()) {
    myRefreshAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD);
    myRefreshAlarm.addRequest(new Runnable(){
      @Override public void run(){
        ensureVFSBaseDir();
      }
    }
,60 * 1000,ModalityState.NON_MODAL);
  }
  system.addVirtualFileListener(new VirtualFileAdapter(){
    @Override public void contentsChanged(    @NotNull final VirtualFileEvent event){
      onFileContentChanged(event);
    }
    @Override public void fileCreated(    @NotNull final VirtualFileEvent event){
      VirtualFile file=event.getFile();
      if (event.getRequestor() == null && isFileUnder(file,myVFSBaseDir) && !myInsideSave) {
        ArrayList<E> read=new ArrayList<E>();
        readSchemeFromFile(read,file,true);
        if (!read.isEmpty()) {
          E readScheme=read.get(0);
          myProcessor.initScheme(readScheme);
          myProcessor.onSchemeAdded(readScheme);
        }
      }
    }
    @Override public void fileDeleted(    @NotNull final VirtualFileEvent event){
      VirtualFile parent=event.getParent();
      if (event.getRequestor() == null && parent != null && parent.equals(myVFSBaseDir) && !myInsideSave) {
        File ioFile=new File(event.getFileName());
        E scheme=findSchemeFor(ioFile.getName());
        T oldCurrentScheme=null;
        if (scheme != null) {
          oldCurrentScheme=getCurrentScheme();
          @SuppressWarnings("unchecked") T t=(T)scheme;
          removeScheme(t);
          myProcessor.onSchemeDeleted(scheme);
        }
        T newCurrentScheme=getCurrentScheme();
        if (oldCurrentScheme != null && newCurrentScheme == null) {
          if (!mySchemes.isEmpty()) {
            setCurrentSchemeName(mySchemes.get(0).getName());
            newCurrentScheme=getCurrentScheme();
          }
        }
        if (oldCurrentScheme != newCurrentScheme) {
          myProcessor.onCurrentSchemeChanged((E)oldCurrentScheme);
        }
      }
    }
  }
);
  myListenerAdded=true;
}
