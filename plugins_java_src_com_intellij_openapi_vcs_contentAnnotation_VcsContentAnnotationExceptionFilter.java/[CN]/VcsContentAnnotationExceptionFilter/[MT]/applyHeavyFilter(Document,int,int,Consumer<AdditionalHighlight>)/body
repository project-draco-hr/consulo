{
  VcsContentAnnotation vcsContentAnnotation=VcsContentAnnotationImpl.getInstance(myProject);
  final LocalChangesCorrector localChangesCorrector=new LocalChangesCorrector(myProject);
  Trinity<PsiClass,PsiFile,String> previousLineResult=null;
  for (int i=0; i < copiedFragment.getLineCount(); i++) {
    final int lineStartOffset=copiedFragment.getLineStartOffset(i);
    final int lineEndOffset=copiedFragment.getLineEndOffset(i);
    final ExceptionWorker worker=new ExceptionWorker(myProject,myScope);
    final String[] lineText=new String[1];
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        lineText[0]=copiedFragment.getText(new TextRange(lineStartOffset,lineEndOffset));
        worker.execute(lineText[0],lineEndOffset);
      }
    }
);
    if (worker.getResult() != null) {
      VirtualFile vf=worker.getFile().getVirtualFile();
      if (vf.getFileSystem().isReadOnly())       continue;
      VcsRevisionNumber recentChangeRevision=myRevNumbersCache.get(vf);
      if (recentChangeRevision == null) {
        recentChangeRevision=vcsContentAnnotation.fileRecentlyChanged(vf);
        if (recentChangeRevision == null) {
          myRevNumbersCache.put(vf,VcsRevisionNumber.NULL);
        }
 else {
          myRevNumbersCache.put(vf,recentChangeRevision);
        }
      }
      if (VcsRevisionNumber.NULL.equals(recentChangeRevision)) {
        recentChangeRevision=null;
      }
      if (localChangesCorrector.isFileAlreadyIdentifiedAsChanged(vf) || ChangeListManager.isFileChanged(myProject,vf) || recentChangeRevision != null) {
        final Document document=getDocumentForFile(worker);
        if (document == null)         return;
        int startFileOffset=worker.getInfo().getThird().getStartOffset();
        int idx=lineText[0].indexOf(':',startFileOffset);
        int endIdx=idx == -1 ? worker.getInfo().getThird().getEndOffset() : idx;
        consumer.consume(new MyAdditionalHighlight(startOffset + lineStartOffset + startFileOffset+ 1,startOffset + lineStartOffset + endIdx));
        if (worker.getPsiClass() != null) {
          final List<TextRange> ranges=findMethodRange(worker,document,previousLineResult);
          if (ranges != null) {
            boolean methodChanged=false;
            for (            TextRange range : ranges) {
              if (localChangesCorrector.isRangeChangedLocally(vf,document,range)) {
                methodChanged=true;
                break;
              }
              final TextRange correctedRange=localChangesCorrector.getCorrectedRange(vf,document,range);
              if (vcsContentAnnotation.intervalRecentlyChanged(vf,correctedRange,recentChangeRevision)) {
                methodChanged=true;
                break;
              }
            }
            if (methodChanged) {
              consumer.consume(new MyAdditionalHighlight(startOffset + lineStartOffset + worker.getInfo().getSecond().getStartOffset(),startOffset + lineStartOffset + worker.getInfo().getSecond().getEndOffset()));
            }
          }
        }
      }
    }
    previousLineResult=worker.getResult() == null ? null : new Trinity<PsiClass,PsiFile,String>(worker.getPsiClass(),worker.getFile(),worker.getMethod());
  }
}
