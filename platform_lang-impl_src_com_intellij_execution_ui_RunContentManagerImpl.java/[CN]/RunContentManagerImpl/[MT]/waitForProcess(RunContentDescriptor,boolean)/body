{
  final ProcessHandler processHandler=descriptor.getProcessHandler();
  final boolean killable=!modal && (processHandler instanceof KillableProcess) && ((KillableProcess)processHandler).canKillProcess();
  String title=ExecutionBundle.message("terminating.process.progress.title",descriptor.getDisplayName());
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,title,true){
{
      if (killable) {
        String cancelText=ExecutionBundle.message("terminating.process.progress.kill");
        setCancelText(cancelText);
        setCancelTooltipText(cancelText);
      }
    }
    @Override public boolean isConditionalModal(){
      return modal;
    }
    @Override public boolean shouldStartInBackground(){
      return !modal;
    }
    @Override public void run(    @NotNull final ProgressIndicator progressIndicator){
      final Semaphore semaphore=new Semaphore();
      semaphore.down();
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          final ProcessHandler processHandler=descriptor.getProcessHandler();
          try {
            if (processHandler != null) {
              processHandler.waitFor();
            }
          }
  finally {
            semaphore.up();
          }
        }
      }
);
      progressIndicator.setText(ExecutionBundle.message("waiting.for.vm.detach.progress.text"));
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          while (true) {
            if (progressIndicator.isCanceled() || !progressIndicator.isRunning()) {
              semaphore.up();
              break;
            }
            try {
synchronized (this) {
                wait(2000L);
              }
            }
 catch (            InterruptedException ignore) {
            }
          }
        }
      }
);
      semaphore.waitFor();
    }
    @RequiredDispatchThread @Override public void onCancel(){
      if (killable && !processHandler.isProcessTerminated()) {
        ((KillableProcess)processHandler).killProcess();
      }
    }
  }
);
}
