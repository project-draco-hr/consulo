{
  final String toolWindowId=executor.getToolWindowId();
  if (toolWindowManager.getToolWindow(toolWindowId) != null) {
    return;
  }
  ToolWindow toolWindow=toolWindowManager.registerToolWindow(toolWindowId,true,ToolWindowAnchor.BOTTOM,this,true);
  final ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addDataProvider(new DataProvider(){
    private int myInsideGetData=0;
    @Override public Object getData(    String dataId){
      myInsideGetData++;
      try {
        if (PlatformDataKeys.HELP_ID.is(dataId)) {
          return executor.getHelpId();
        }
 else {
          return myInsideGetData == 1 ? DataManager.getInstance().getDataContext(contentManager.getComponent()).getData(dataId) : null;
        }
      }
  finally {
        myInsideGetData--;
      }
    }
  }
);
  toolWindow.setIcon(executor.getToolWindowIcon());
  new ContentManagerWatcher(toolWindow,contentManager);
  contentManager.addContentManagerListener(new ContentManagerAdapter(){
    @Override public void selectionChanged(    final ContentManagerEvent event){
      Content content=event.getContent();
      getSyncPublisher().contentSelected(content == null ? null : getRunContentDescriptorByContent(content),executor);
    }
  }
);
  myToolwindowIdToContentManagerMap.put(toolWindowId,contentManager);
  Disposer.register(contentManager,new Disposable(){
    @Override public void dispose(){
      myToolwindowIdToContentManagerMap.remove(toolWindowId).removeAllContents(true);
      myToolwindowIdZBuffer.remove(toolWindowId);
    }
  }
);
  myToolwindowIdZBuffer.addLast(toolWindowId);
}
