{
  String progressTitle=ExecutionBundle.message("terminating.process.progress.title",descriptor.getDisplayName());
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    private ProgressIndicator myProgressIndicator;
    private final Semaphore mySemaphore=new Semaphore();
    private final Runnable myWaitThread=new Runnable(){
      public void run(){
        descriptor.getProcessHandler().waitFor();
        mySemaphore.up();
      }
    }
;
    private final Runnable myCancelListener=new Runnable(){
      public void run(){
        while (true) {
          if (myProgressIndicator != null && (myProgressIndicator.isCanceled() || !myProgressIndicator.isRunning())) {
            mySemaphore.up();
            break;
          }
          try {
synchronized (this) {
              wait(2000);
            }
          }
 catch (          InterruptedException ignore) {
          }
        }
      }
    }
;
    public void run(){
      myProgressIndicator=ProgressManager.getInstance().getProgressIndicator();
      if (myProgressIndicator != null) {
        myProgressIndicator.setText(ExecutionBundle.message("waiting.for.vm.detach.progress.text"));
      }
      ApplicationManager.getApplication().executeOnPooledThread(myWaitThread);
      ApplicationManager.getApplication().executeOnPooledThread(myCancelListener);
      mySemaphore.down();
      mySemaphore.waitFor();
    }
  }
,progressTitle,true,myProject);
}
