{
  ToolWindowManagerEx toolWindowManager=ToolWindowManagerEx.getInstanceEx(myProject);
  if (toolWindowManager == null) {
    return;
  }
  for (  Executor executor : ExecutorRegistry.getInstance().getRegisteredExecutors()) {
    registerToolwindow(executor,toolWindowManager);
  }
  toolWindowManager.addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    @Override public void stateChanged(){
      if (myProject.isDisposed()) {
        return;
      }
      ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
      Set<String> currentWindows=new THashSet<String>();
      ContainerUtil.addAll(currentWindows,toolWindowManager.getToolWindowIds());
      myToolwindowIdZBuffer.retainAll(currentWindows);
      final String activeToolWindowId=toolWindowManager.getActiveToolWindowId();
      if (activeToolWindowId != null) {
        if (myToolwindowIdZBuffer.remove(activeToolWindowId)) {
          myToolwindowIdZBuffer.addFirst(activeToolWindowId);
        }
      }
    }
  }
);
}
