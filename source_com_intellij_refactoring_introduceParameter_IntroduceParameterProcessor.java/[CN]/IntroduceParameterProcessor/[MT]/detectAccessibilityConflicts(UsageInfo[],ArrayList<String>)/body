{
  if (myParameterInitializer != null) {
    final ReferencedElementsCollector collector=new ReferencedElementsCollector();
    myParameterInitializer.accept(collector);
    final Set<PsiElement> result=collector.myResult;
    if (!result.isEmpty()) {
      for (      final UsageInfo usageInfo : usageArray) {
        if (usageInfo instanceof ExternalUsageInfo && RefactoringUtil.isMethodUsage(usageInfo.getElement())) {
          final PsiElement place=usageInfo.getElement();
          for (          final PsiElement element : result) {
            if (element instanceof PsiMember && !myManager.getResolveHelper().isAccessible((PsiMember)element,place,null)) {
              String message=ConflictsUtil.getDescription(element,true) + " is not accesible from " + ConflictsUtil.getDescription(ConflictsUtil.getContainer(place),true)+ ". "+ "Value for introduced parameter in that method call will be incorrect.";
              conflicts.add(message);
            }
          }
        }
      }
    }
  }
}
