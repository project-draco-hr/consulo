{
  if (!RefactoringUtil.isMethodUsage(usage.getElement()))   return;
  PsiCallExpression callExpression=RefactoringUtil.getCallExpressionByMethodReference((PsiJavaCodeReferenceElement)usage.getElement());
  PsiExpressionList argList=callExpression.getArgumentList();
  PsiExpression[] oldArgs=argList.getExpressions();
  PsiExpression newArg;
  final PsiExpression anchor;
  if (!myMethodToSearchFor.isVarArgs()) {
    anchor=getLast(oldArgs);
  }
 else {
    final PsiParameter[] parameters=myMethodToSearchFor.getParameterList().getParameters();
    if (parameters.length > oldArgs.length) {
      anchor=getLast(oldArgs);
    }
 else {
      LOG.assertTrue(parameters.length > 0);
      final int lastNonVararg=parameters.length - 2;
      anchor=lastNonVararg >= 0 ? oldArgs[lastNonVararg] : null;
    }
  }
  newArg=(PsiExpression)argList.addAfter(myParameterInitializer,anchor);
  ChangeContextUtil.decodeContextInfo(newArg,null,null);
  new OldReferencesResolver(callExpression,newArg,myReplaceFieldsWithGetters).resolve();
}
