{
  if (domElement == null)   return;
  final java.util.List<SimpleNode> parentsNodes=new ArrayList<SimpleNode>();
  SimpleNodeVisitor visitor=new SimpleNodeVisitor(){
    public boolean accept(    SimpleNode simpleNode){
      if (simpleNode instanceof BaseDomElementNode) {
        final DomElement nodeElement=((AbstractDomElementNode)simpleNode).getDomElement();
        if (isParent(nodeElement,domElement)) {
          parentsNodes.add(simpleNode);
        }
      }
      return false;
    }
    private boolean isParent(    final DomElement potentialParent,    final DomElement domElement){
      DomElement currParent=domElement;
      while (currParent != null) {
        if (currParent.equals(potentialParent))         return true;
        currParent=currParent.getParent();
      }
      return false;
    }
  }
;
  getTree().accept(getBuilder(),visitor);
  if (parentsNodes.size() > 0) {
    getTree().setSelectedNode(getBuilder(),parentsNodes.get(parentsNodes.size() - 1),true);
  }
}
