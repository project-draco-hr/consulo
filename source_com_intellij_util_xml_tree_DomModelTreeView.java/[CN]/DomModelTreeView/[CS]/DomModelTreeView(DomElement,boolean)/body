{
  myRootElement=rootElement;
  myTree=new SimpleTree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setRootVisible(isRootVisible);
  myTree.setShowsRootHandles(true);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeUtil.installActions(myTree);
  final SimpleTreeStructure treeStructure=rootElement != null ? getTreeStructure(rootElement) : new SimpleTreeStructure(){
    public Object getRootElement(){
      return null;
    }
  }
;
  myBuilder=new SimpleTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),treeStructure,WeightBasedComparator.INSTANCE);
  myBuilder.setNodeDescriptorComparator(null);
  myBuilder.initRoot();
  add(myTree,BorderLayout.CENTER);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(true);
      }
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(false);
        simpleNode.update();
      }
    }
  }
);
  myDomEventListener=new DomEventListener(){
    public void eventOccured(    DomEvent event){
      myBuilder.updateFromRoot(false);
    }
  }
;
  myDomManager=rootElement.getManager();
  myDomManager.addDomEventListener(myDomEventListener);
  myTree.setPopupGroup(getPopupActions(),DOM_MODEL_TREE_VIEW_POPUP);
}
