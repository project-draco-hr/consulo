{
  myTempScopes.add(PsiIdentifier.class);
  registerManipulator(XmlAttributeValue.class,new XmlAttributeValueManipulator());
  registerManipulator(PsiPlainTextFile.class,new PlainFileManipulator());
  registerManipulator(XmlToken.class,new XmlTokenManipulator());
  myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER,new JavaClassReferenceProvider());
  myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER,new JspxIncludePathReferenceProvider());
  myReferenceTypeToProviderMap.put(PROPERTY_FILE_KEY_PROVIDER,new PropertiesReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"class","type"},new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("useBean"),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  RegisterInPsi.referenceProviders(this);
  registerXmlAttributeValueReferenceProvider(new String[]{"extends"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"type"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.attribute")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("attribute"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"variable-class"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.variable")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("variable"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"import"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),new JspImportListReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"errorPage"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"file"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("include")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.include")))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"value"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("url"))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"url"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URI),new AndFilter(new ClassFilter(XmlTag.class),new OrFilter(new TextFilter("import"),new TextFilter("redirect")))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"key"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new NamespaceFilter(XmlUtil.JSTL_FORMAT_URI),new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message"))),2)),getProviderByType(PROPERTY_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"altKey","titleKey","pageKey","srcKey"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),new ClassFilter(XmlTag.class)),2)),getProviderByType(PROPERTY_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"code"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.SPRING_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message","theme"))),2)),getProviderByType(PROPERTY_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"page"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("include"))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"tagdir"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"uri"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2)),new JspUriReferenceProvider());
  final JavaClassListReferenceProvider classListProvider=new JavaClassListReferenceProvider();
  registerXmlAttributeValueReferenceProvider(null,new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI),2)),classListProvider);
  registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS),XmlToken.class,classListProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new TextFilter(new String[]{"function-class","tag-class","tei-class","variable-class","type","function-signature"}),new NamespaceFilter(MetaRegistry.TAGLIB_URIS))),XmlTag.class,new TaglibReferenceProvider(getProviderByType(CLASS_REFERENCE_PROVIDER)));
  final DtdReferencesProvider dtdReferencesProvider=new DtdReferencesProvider();
  registerReferenceProvider(null,XmlEntityRef.class,dtdReferencesProvider);
  URIReferenceProvider uriProvider=new URIReferenceProvider();
  registerXmlAttributeValueReferenceProvider(null,dtdReferencesProvider.getSystemReferenceFilter(),uriProvider);
  HtmlUtil.HtmlReferenceProvider provider=new HtmlUtil.HtmlReferenceProvider();
  registerXmlAttributeValueReferenceProvider(null,provider.getFilter(),provider);
  final PsiReferenceProvider filePathReferenceProvider=new FilePathReferenceProvider();
  registerReferenceProvider(PsiLiteralExpression.class,filePathReferenceProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"ref","type","base","name"},new ScopeFilter(new ParentElementFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),2)),new SchemaReferencesProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"schemaLocation"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("import","include"))),2)),uriProvider);
  registerXmlAttributeValueReferenceProvider(null,uriProvider.getNamespaceAttributeFilter(),uriProvider);
}
