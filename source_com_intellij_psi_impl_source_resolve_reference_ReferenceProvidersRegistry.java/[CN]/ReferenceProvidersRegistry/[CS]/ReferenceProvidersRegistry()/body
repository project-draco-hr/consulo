{
  myTempScopes.add(PsiIdentifier.class);
  registerManipulator(XmlAttributeValue.class,new XmlAttributeValueManipulator());
  registerManipulator(PsiPlainTextFile.class,new PlainFileManipulator());
  registerManipulator(XmlToken.class,new XmlTokenManipulator());
  registerManipulator(PsiLiteralExpression.class,new StringLiteralManipulator());
  registerManipulator(XmlTag.class,new XmlTagValueManipulator());
  myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER,new JavaClassReferenceProvider());
  myReferenceTypeToProviderMap.put(PATH_REFERENCES_PROVIDER,new JspxIncludePathReferenceProvider());
  myReferenceTypeToProviderMap.put(DYNAMIC_PATH_REFERENCES_PROVIDER,new JspxDynamicPathReferenceProvider());
  myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER,new PropertiesReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"class","type"},new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("useBean"),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  RegisterInPsi.referenceProviders(this);
  registerXmlAttributeValueReferenceProvider(new String[]{"extends"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),getProviderByType(CLASS_REFERENCE_PROVIDER));
  final CustomizableReferenceProvider classReferenceProvider=(CustomizableReferenceProvider)getProviderByType(CLASS_REFERENCE_PROVIDER);
  final CustomizingReferenceProvider qualifiedClassReferenceProvider=new CustomizingReferenceProvider(classReferenceProvider);
  qualifiedClassReferenceProvider.addCustomization(JavaClassReferenceProvider.RESOLVE_QUALIFIED_CLASS_NAME,true);
  registerXmlAttributeValueReferenceProvider(new String[]{"type"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.attribute")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("attribute"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),qualifiedClassReferenceProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"variable-class"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.variable")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("variable"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),qualifiedClassReferenceProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"import"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)),new JspImportListReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"errorPage"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"file"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("include")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.include")))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"value"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("url"))),2)),getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"url"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URIS),new AndFilter(new ClassFilter(XmlTag.class),new OrFilter(new TextFilter("import"),new TextFilter("redirect")))),2)),getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"key"},new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new NamespaceFilter(XmlUtil.JSTL_FORMAT_URIS),new NamespaceFilter(XmlUtil.STRUTS_BEAN_URI)),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message"))),2)),getProviderByType(PROPERTIES_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"altKey","titleKey","pageKey","srcKey"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),new ClassFilter(XmlTag.class)),2)),getProviderByType(PROPERTIES_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"code"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.SPRING_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message","theme"))),2)),getProviderByType(PROPERTIES_FILE_KEY_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"page"},new ScopeFilter(new ParentElementFilter(new OrFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("include","forward"))),new AndFilter(new NamespaceFilter(XmlUtil.STRUTS_HTML_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("rewrite")))),2)),getProviderByType(DYNAMIC_PATH_REFERENCES_PROVIDER));
  registerXmlTagReferenceProvider(new String[]{"welcome-file","location","taglib-location"},new NamespaceFilter(XmlUtil.WEB_XML_URIS),true,getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"tagdir"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2)),getProviderByType(PATH_REFERENCES_PROVIDER));
  registerXmlAttributeValueReferenceProvider(new String[]{"uri"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2)),new JspUriReferenceProvider());
  final JavaClassListReferenceProvider classListProvider=new JavaClassListReferenceProvider();
  registerXmlAttributeValueReferenceProvider(null,new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI),2)),classListProvider);
  registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS),XmlToken.class,classListProvider);
  registerXmlTagReferenceProvider(new String[]{"function-class","tag-class","tei-class","variable-class","type","path","function-signature","name","name-given"},new NamespaceFilter(MetaRegistry.TAGLIB_URIS),true,new TaglibReferenceProvider(getProviderByType(CLASS_REFERENCE_PROVIDER)));
  final NamespaceFilter jsfNsFilter=new NamespaceFilter(XmlUtil.JSF_URIS);
  registerXmlTagReferenceProvider(new String[]{"render-kit-class","renderer-class","managed-bean-class","attribute-class","component-class","converter-for-class","converter-class","key-class","value-class","referenced-bean-class","validator-class","application-factory","faces-context-factory","render-kit-factory","lifecycle-factory","view-handler","variable-resolver","phase-listener","property-resolver","state-manager","action-listener","navigation-handler"},jsfNsFilter,true,getProviderByType(CLASS_REFERENCE_PROVIDER));
  final JSFReferencesProvider jsfProvider=new JSFReferencesProvider();
  registerXmlTagReferenceProvider(new String[]{"property-name","property-class"},jsfNsFilter,true,jsfProvider);
  final DtdReferencesProvider dtdReferencesProvider=new DtdReferencesProvider();
  registerReferenceProvider(null,XmlEntityRef.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlDoctype.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlElementDecl.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlAttlistDecl.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlElementContentSpec.class,dtdReferencesProvider);
  URIReferenceProvider uriProvider=new URIReferenceProvider();
  registerTypeWithProvider(URI_PROVIDER,uriProvider);
  registerXmlAttributeValueReferenceProvider(null,dtdReferencesProvider.getSystemReferenceFilter(),uriProvider);
  HtmlReferenceProvider provider=new HtmlReferenceProvider();
  registerXmlAttributeValueReferenceProvider(new String[]{"src","href","action","background","width","height","type","bgcolor","color","vlink","link","alink","text","name"},provider.getFilter(),false,provider);
  final PsiReferenceProvider filePathReferenceProvider=new FilePathReferenceProvider();
  registerReferenceProvider(PsiLiteralExpression.class,filePathReferenceProvider);
  final SchemaReferencesProvider schemaReferencesProvider=new SchemaReferencesProvider();
  registerXmlAttributeValueReferenceProvider(new String[]{"ref","type","base","name","substitutionGroup","memberTypes"},new ScopeFilter(new ParentElementFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),2)),schemaReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"xsi:type"},null,schemaReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"xsi:noNamespaceSchemaLocation"},null,uriProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"schemaLocation"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("import","include"))),2)),uriProvider);
  registerXmlAttributeValueReferenceProvider(null,uriProvider.getNamespaceAttributeFilter(),uriProvider);
  final JspReferencesProvider jspReferencesProvider=new JspReferencesProvider();
  registerXmlAttributeValueReferenceProvider(new String[]{"fragment","name","property","id","name-given","dynamic-attributes"},new ScopeFilter(new ParentElementFilter(new AndFilter(new ClassFilter(XmlTag.class),new NamespaceFilter(new String[]{XmlUtil.JSP_URI,XmlUtil.STRUTS_BEAN_URI,XmlUtil.STRUTS_LOGIC_URI})),2)),jspReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"var"},new ScopeFilter(new ParentElementFilter(new AndFilter(new ClassFilter(XmlTag.class),new NamespaceFilter(XmlUtil.JSTL_CORE_URIS)),2)),jspReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"scope"},null,jspReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"name"},new ScopeFilter(new ParentElementFilter(new AndFilter(new ClassFilter(XmlTag.class),new AndFilter(new TextFilter("property"),new NamespaceFilter(XmlUtil.SPRING_CORE_URI))),2)),new SpringReferencesProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"name"},new ScopeFilter(new ParentElementFilter(new AndFilter(new ClassFilter(XmlTag.class),new AndFilter(new NamespaceFilter(XmlUtil.HIBERNATE_URIS),new TextFilter(new String[]{"property","list","map","set","array","bag","idbag","primitive-array","many-to-one","one-to-one"}))),2)),new HibernateReferencesProvider());
}
