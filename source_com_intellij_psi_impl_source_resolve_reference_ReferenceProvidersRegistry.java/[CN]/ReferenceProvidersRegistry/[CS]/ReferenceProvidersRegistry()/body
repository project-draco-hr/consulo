{
  myTempScopes.add(PsiIdentifier.class);
  registerManipulator(XmlAttributeValue.class,new XmlAttributeValueManipulator());
  registerManipulator(PsiPlainTextFile.class,new PlainFileManipulator());
  registerManipulator(XmlToken.class,new XmlTokenManipulator());
  final JavaClassReferenceProvider classReferenceProvider=new JavaClassReferenceProvider();
  registerReferenceProvider(new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter(new String[]{"class","type"}),new ParentElementFilter(new AndFilter(new TextFilter("useBean"),new NamespaceFilter(XmlUtil.JSP_URI)))))),XmlAttributeValue.class,classReferenceProvider);
  RegisterInPsi.referenceProviders(this);
  registerReferenceProvider(new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("extends"),new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)))))),XmlAttributeValue.class,classReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("type"),new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.attribute")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("attribute"))),new NamespaceFilter(XmlUtil.JSP_URI)))))),XmlAttributeValue.class,classReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("variable-class"),new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.variable")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("variable"))),new NamespaceFilter(XmlUtil.JSP_URI)))))),XmlAttributeValue.class,classReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new ParentElementFilter(new AndFilter(new TextFilter("import"),new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)))))),XmlAttributeValue.class,new JspImportListReferenceProvider());
  final JspxIncludePathReferenceProvider pathReferenceProvider=new JspxIncludePathReferenceProvider();
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("errorPage")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("file")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new OrFilter(new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("include")),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.include")))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("value")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("url"))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("url")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_CORE_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("import"))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("key")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSTL_FORMAT_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message"))),2))),XmlAttributeValue.class,new PropertiesReferenceProvider());
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("page")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("include"))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("tagdir")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2))),XmlAttributeValue.class,pathReferenceProvider);
  registerReferenceProvider(new ScopeFilter(new AndFilter(new ParentElementFilter(new TextFilter("uri")),new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.JSP_URI),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("taglib"))),2))),XmlAttributeValue.class,new JspUriReferenceProvider());
  registerReferenceProvider(new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI),2)),XmlAttributeValue.class,new JavaClassListReferenceProvider());
  registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS),XmlToken.class,new JavaClassListReferenceProvider());
  HtmlUtil.HtmlReferenceProvider provider=new HtmlUtil.HtmlReferenceProvider();
  registerReferenceProvider(provider.getFilter(),XmlAttributeValue.class,provider);
  final PsiReferenceProvider filePathReferenceProvider=new FilePathReferenceProvider();
  registerReferenceProvider(PsiLiteralExpression.class,filePathReferenceProvider);
}
