{
  myTempScopes.add(PsiIdentifier.class);
  registerManipulator(XmlAttributeValue.class,new XmlAttributeValueManipulator());
  registerManipulator(PsiPlainTextFile.class,new PlainFileManipulator());
  registerManipulator(XmlToken.class,new XmlTokenManipulator());
  registerManipulator(PsiLiteralExpression.class,new StringLiteralManipulator());
  registerManipulator(XmlTag.class,new XmlTagValueManipulator());
  registerManipulator(PsiDocTag.class,new PsiDocTagValueManipulator());
  myReferenceTypeToProviderMap.put(CLASS_REFERENCE_PROVIDER,new JavaClassReferenceProvider());
  PsiReferenceProvider propertiesReferenceProvider=new PropertiesReferenceProvider(false);
  myReferenceTypeToProviderMap.put(PROPERTIES_FILE_KEY_PROVIDER,propertiesReferenceProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"code"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(XmlUtil.SPRING_URI),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("message","theme"))),2)),propertiesReferenceProvider);
  final JavaClassListReferenceProvider classListProvider=new JavaClassListReferenceProvider();
  registerXmlAttributeValueReferenceProvider(null,new AndFilter(new NotFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.ANT_URI),2)),new NotFilter(new ScopeFilter(new ParentElementFilter(new AndFilter(new OrFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("directive.page")),new AndFilter(new ClassFilter(JspDirective.class),new TextFilter("page"))),new NamespaceFilter(XmlUtil.JSP_URI)),2)))),classListProvider);
  registerReferenceProvider(new TokenTypeFilter(XmlTokenType.XML_DATA_CHARACTERS),XmlToken.class,classListProvider);
  final IdReferenceProvider idReferenceProvider=new IdReferenceProvider();
  registerXmlAttributeValueReferenceProvider(idReferenceProvider.getIdForAttributeNames(),idReferenceProvider.getIdForFilter(),true,idReferenceProvider);
  final DtdReferencesProvider dtdReferencesProvider=new DtdReferencesProvider();
  registerReferenceProvider(null,XmlEntityRef.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlDoctype.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlElementDecl.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlAttlistDecl.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlElementContentSpec.class,dtdReferencesProvider);
  registerReferenceProvider(null,XmlToken.class,dtdReferencesProvider);
  URIReferenceProvider uriProvider=new URIReferenceProvider();
  registerTypeWithProvider(URI_PROVIDER,uriProvider);
  registerXmlAttributeValueReferenceProvider(null,dtdReferencesProvider.getSystemReferenceFilter(),uriProvider);
  HtmlReferenceProvider provider=new HtmlReferenceProvider();
  registerXmlAttributeValueReferenceProvider(provider.getAttributeValues(),provider.getFilter(),false,provider);
  registerXmlAttributeValueReferenceProvider(new String[]{"href"},new ScopeFilter(new ParentElementFilter(new AndFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("include")),new NamespaceFilter(XmlUtil.XINCLUDE_URI)),2)),true,new JspxIncludePathReferenceProvider());
  final PsiReferenceProvider filePathReferenceProvider=new FilePathReferenceProvider();
  registerReferenceProvider(new ElementFilter(){
    public boolean isAcceptable(    Object element,    PsiElement context){
      if (context instanceof PsiLiteralExpression) {
        PsiLiteralExpression literalExpression=(PsiLiteralExpression)context;
        final Map<String,Object> annotationParams=new HashMap<String,Object>();
        annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER,null);
        if (I18nUtil.mustBePropertyKey(literalExpression,annotationParams)) {
          return false;
        }
      }
      return true;
    }
    public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
,PsiLiteralExpression.class,filePathReferenceProvider);
  final SchemaReferencesProvider schemaReferencesProvider=new SchemaReferencesProvider();
  registerTypeWithProvider(SCHEMA_PROVIDER,schemaReferencesProvider);
  registerXmlAttributeValueReferenceProvider(schemaReferencesProvider.getCandidateAttributeNamesForSchemaReferences(),new ScopeFilter(new ParentElementFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),2)),schemaReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"xsi:type"},null,schemaReferencesProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"xsi:noNamespaceSchemaLocation","xsi:schemaLocation"},null,uriProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"schemaLocation","namespace"},new ScopeFilter(new ParentElementFilter(new AndFilter(new NamespaceFilter(MetaRegistry.SCHEMA_URIS),new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("import","include","redefine"))),2)),uriProvider);
  registerXmlAttributeValueReferenceProvider(null,URIReferenceProvider.ELEMENT_FILTER,uriProvider);
  registerXmlAttributeValueReferenceProvider(new String[]{"content"},new ScopeFilter(new ParentElementFilter(new AndFilter(new ClassFilter(XmlTag.class),new TextFilter("meta")),2)),new HtmlHttpEquivEncodingReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"encoding"},new ScopeFilter(new ParentElementFilter(new ClassFilter(XmlProcessingInstruction.class))),new XmlEncodingReferenceProvider());
  registerXmlAttributeValueReferenceProvider(new String[]{"contentType","pageEncoding"},new ScopeFilter(new ParentElementFilter(new NamespaceFilter(XmlUtil.JSP_URI),2)),new JspEncodingInAttributeReferenceProvider());
}
