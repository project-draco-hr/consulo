{
  Painter.paintComponentDecoration(myEditor,component,g);
  final Set<RadButtonGroup> paintedGroups=new HashSet<RadButtonGroup>();
  final RadRootContainer rootContainer=myEditor.getRootContainer();
  final ComponentTree componentTree=UIDesignerToolWindowManager.getInstance(component.getProject()).getComponentTree();
  final Collection<RadButtonGroup> selectedGroups=componentTree.getSelectedElements(RadButtonGroup.class);
  FormEditingUtil.iterate(component,new FormEditingUtil.ComponentVisitor<RadComponent>(){
    public boolean visit(    final RadComponent component){
      final Point point=SwingUtilities.convertPoint(component.getDelegee(),0,0,rootContainer.getDelegee());
      RadButtonGroup group=(RadButtonGroup)FormEditingUtil.findGroupForComponent(rootContainer,component);
      if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) {
        paintedGroups.add(group);
        Painter.paintButtonGroupLines(rootContainer,group,g);
      }
      g.translate(point.x,point.y);
      try {
        if (myEditor.isShowComponentTags() && FormEditingUtil.isComponentSwitchedInView(component)) {
          Painter.paintComponentTag(component,g);
        }
        Painter.paintSelectionDecoration(component,g,myEditor.getGlassLayer().isFocusOwner());
        if (component.hasDragger()) {
          final Icon icon=getDragIcon();
          icon.paintIcon(PassiveDecorationLayer.this,g,-icon.getIconWidth(),-icon.getIconHeight());
        }
      }
  finally {
        g.translate(-point.x,-point.y);
      }
      return true;
    }
  }
);
}
