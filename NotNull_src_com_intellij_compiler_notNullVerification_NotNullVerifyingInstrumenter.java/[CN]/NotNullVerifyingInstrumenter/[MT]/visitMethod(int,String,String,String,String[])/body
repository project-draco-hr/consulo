{
  final Type[] args=Type.getArgumentTypes(desc);
  final Type returnType=Type.getReturnType(desc);
  final int startParameter=getStartParameterIndex(name);
  MethodVisitor v=cv.visitMethod(access,name,desc,signature,exceptions);
  return new MethodAdapter(v){
    private final ArrayList myNotNullParams=new ArrayList();
    private boolean myIsNotNull=false;
    public Label myThrowLabel;
    private Label myStartGeneratedCodeLabel;
    public AnnotationVisitor visitParameterAnnotation(    final int parameter,    final String anno,    final boolean visible){
      AnnotationVisitor av;
      av=mv.visitParameterAnnotation(parameter,anno,visible);
      if (isReferenceType(args[parameter]) && anno.equals("Lorg/jetbrains/annotations/NotNull;")) {
        myNotNullParams.add(new Integer(parameter));
      }
      return av;
    }
    public AnnotationVisitor visitAnnotation(    String anno,    boolean isRuntime){
      final AnnotationVisitor av=mv.visitAnnotation(anno,isRuntime);
      if (isReferenceType(returnType) && anno.equals("Lorg/jetbrains/annotations/NotNull;")) {
        myIsNotNull=true;
      }
      return av;
    }
    public void visitCode(){
      if (myNotNullParams.size() > 0) {
        myStartGeneratedCodeLabel=new Label();
        mv.visitLabel(myStartGeneratedCodeLabel);
      }
      for (int p=0; p < myNotNullParams.size(); ++p) {
        int var=((access & Opcodes.ACC_STATIC) == 0) ? 1 : 0;
        int param=((Integer)myNotNullParams.get(p)).intValue();
        for (int i=0; i < param + startParameter; ++i) {
          var+=args[i].getSize();
        }
        mv.visitVarInsn(Opcodes.ALOAD,var);
        Label end=new Label();
        mv.visitJumpInsn(Opcodes.IFNONNULL,end);
        generateThrow("java/lang/IllegalArgumentException","Argument " + param + " for @NotNull parameter of "+ myClassName+ "."+ name+ " must not be null",end);
      }
    }
    public void visitLocalVariable(    final String name,    final String desc,    final String signature,    final Label start,    final Label end,    final int index){
      final boolean isStatic=(access & Opcodes.ACC_STATIC) != 0;
      final boolean isParameter=isStatic ? index < args.length : index <= args.length;
      mv.visitLocalVariable(name,desc,signature,(isParameter && myStartGeneratedCodeLabel != null) ? myStartGeneratedCodeLabel : start,end,index);
    }
    public void visitInsn(    int opcode){
      if (opcode == Opcodes.ARETURN && myIsNotNull) {
        mv.visitInsn(Opcodes.DUP);
        if (myThrowLabel == null) {
          Label skipLabel=new Label();
          mv.visitJumpInsn(Opcodes.IFNONNULL,skipLabel);
          myThrowLabel=new Label();
          mv.visitLabel(myThrowLabel);
          generateThrow("java/lang/IllegalStateException","@NotNull method " + myClassName + "."+ name+ " must not return null",skipLabel);
        }
 else {
          mv.visitJumpInsn(Opcodes.IFNULL,myThrowLabel);
        }
      }
      mv.visitInsn(opcode);
    }
    private void generateThrow(    final String exceptionClass,    final String descr,    final Label end){
      String exceptionParamClass="(Ljava/lang/String;)V";
      mv.visitTypeInsn(Opcodes.NEW,exceptionClass);
      mv.visitInsn(Opcodes.DUP);
      mv.visitLdcInsn(descr);
      mv.visitMethodInsn(Opcodes.INVOKESPECIAL,exceptionClass,CONSTRUCTOR_NAME,exceptionParamClass);
      mv.visitInsn(Opcodes.ATHROW);
      mv.visitLabel(end);
      myIsModification=true;
    }
    public void visitMaxs(    final int maxStack,    final int maxLocals){
      try {
        super.visitMaxs(maxStack,maxLocals);
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        throw new ArrayIndexOutOfBoundsException("maxs processing failed for method " + name + ": "+ e.getMessage());
      }
    }
  }
;
}
