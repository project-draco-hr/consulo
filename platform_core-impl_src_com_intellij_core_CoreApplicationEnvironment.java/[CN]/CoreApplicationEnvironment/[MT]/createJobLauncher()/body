{
  return new JobLauncher(){
    @Override public <T>boolean invokeConcurrentlyUnderProgress(    @NotNull List<? extends T> things,    ProgressIndicator progress,    boolean failFastOnAcquireReadAction,    @NotNull Processor<T> thingProcessor) throws ProcessCanceledException {
      for (      T thing : things) {
        if (!thingProcessor.process(thing))         return false;
      }
      return true;
    }
    @Override public <T>boolean invokeConcurrentlyUnderProgress(    @NotNull List<? extends T> things,    ProgressIndicator progress,    boolean runInReadAction,    boolean failFastOnAcquireReadAction,    @NotNull Processor<T> thingProcessor){
      return invokeConcurrentlyUnderProgress(things,progress,failFastOnAcquireReadAction,thingProcessor);
    }
    @NotNull @Override public <T>AsyncFuture<Boolean> invokeConcurrentlyUnderProgressAsync(    @NotNull List<? extends T> things,    ProgressIndicator progress,    boolean failFastOnAcquireReadAction,    @NotNull Processor<T> thingProcessor){
      final AsyncFutureResult<Boolean> asyncFutureResult=AsyncFutureFactory.getInstance().createAsyncFutureResult();
      try {
        final boolean result=invokeConcurrentlyUnderProgress(things,progress,failFastOnAcquireReadAction,thingProcessor);
        asyncFutureResult.set(result);
      }
 catch (      Throwable t) {
        asyncFutureResult.setException(t);
      }
      return asyncFutureResult;
    }
    @NotNull @Override public Job<Void> submitToJobThread(    int priority,    @NotNull Runnable action,    Consumer<Future> onDoneCallback){
      action.run();
      if (onDoneCallback != null)       onDoneCallback.consume(new Future(){
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          return false;
        }
        @Override public boolean isCancelled(){
          return false;
        }
        @Override public boolean isDone(){
          return true;
        }
        @Override public Object get() throws InterruptedException, ExecutionException {
          return null;
        }
        @Override public Object get(        long timeout,        @NotNull TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          return null;
        }
      }
);
      return Job.NULL_JOB;
    }
  }
;
}
