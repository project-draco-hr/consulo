{
  myParentDisposable=parentDisposable;
  Extensions.cleanRootArea(myParentDisposable);
  myFileTypeRegistry=new CoreFileTypeRegistry();
  myEncodingRegistry=new CoreEncodingRegistry();
  myApplication=new MockApplication(myParentDisposable);
  ApplicationManager.setApplication(myApplication,new StaticGetter<FileTypeRegistry>(myFileTypeRegistry),new StaticGetter<EncodingRegistry>(myEncodingRegistry),myParentDisposable);
  myLocalFileSystem=createLocalFileSystem();
  myJarFileSystem=createJarFileSystem();
  Extensions.registerAreaClass(ExtensionAreas.IDEA_PROJECT,null);
  final MutablePicoContainer appContainer=myApplication.getPicoContainer();
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl(new Function<CharSequence,Document>(){
    @Override public Document fun(    CharSequence charSequence){
      return new DocumentImpl(charSequence);
    }
  }
,null));
  registerComponentInstance(appContainer,VirtualFileManager.class,new VirtualFileManagerImpl(new VirtualFileSystem[]{myLocalFileSystem,myJarFileSystem},new MessageBusImpl(myApplication,null),new FileSystemPersistence(){
    @Override public void refresh(    boolean asynchronous,    Runnable postAction,    @NotNull ModalityState modalityState){
    }
    @Override public int getCheapFileSystemModificationCount(){
      return 0;
    }
  }
));
  myApplication.registerService(VirtualFilePointerManager.class,new CoreVirtualFilePointerManager());
  myApplication.registerService(DefaultASTFactory.class,new CoreASTFactory());
  myApplication.registerService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  myApplication.registerService(ReferenceProvidersRegistry.class,new MockReferenceProvidersRegistry());
  myApplication.registerService(StubTreeLoader.class,new CoreStubTreeLoader());
  myApplication.registerService(PsiReferenceService.class,new PsiReferenceServiceImpl());
  registerApplicationExtensionPoint(ContentBasedFileSubstitutor.EP_NAME,ContentBasedFileSubstitutor.class);
  registerExtensionPoint(Extensions.getRootArea(),BinaryFileStubBuilders.EP_NAME,FileTypeExtensionPoint.class);
  ProgressIndicatorProvider.ourInstance=new ProgressIndicatorProvider(){
    @Override public ProgressIndicator getProgressIndicator(){
      return new EmptyProgressIndicator();
    }
    @Override protected void doCheckCanceled() throws ProcessCanceledException {
    }
    @Override public NonCancelableSection startNonCancelableSection(){
      return new NonCancelableSection(){
        @Override public void done(){
        }
      }
;
    }
  }
;
}
