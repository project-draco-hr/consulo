{
  if (child.getElementType() == XmlElementType.XML_TEXT) {
    final PsiElement parent=child.getPsi().getParent();
    if (parent instanceof XmlTag && ((XmlTag)parent).getSubTags().length == 0) {
      final PsiFile[] injectedFile=new PsiFile[1];
      ((PsiLanguageInjectionHost)child.getPsi()).processInjectedPsi(new PsiLanguageInjectionHost.InjectedPsiVisitor(){
        public void visit(        @NotNull final PsiFile injectedPsi,        @NotNull final List<PsiLanguageInjectionHost.Shred> places){
          if (places.size() == 1) {
            final TextRange textRange=places.get(0).getRangeInsideHost();
            if (child.getTextLength() == textRange.getEndOffset() && textRange.getStartOffset() == 0) {
              injectedFile[0]=injectedPsi;
            }
          }
        }
      }
);
      if (injectedFile[0] != null) {
        final Language childLanguage=injectedFile[0].getLanguage();
        final ASTNode astNode=injectedFile[0].getNode();
        if (LanguageFormatting.INSTANCE.forContext(childLanguage,injectedFile[0]) != null) {
          createAnotherLanguageBlockWrapper(childLanguage,astNode,result,indent,child.getTextRange().getStartOffset());
          return child;
        }
      }
    }
    return createXmlTextBlocks(result,child,wrap,alignment);
  }
 else {
    return super.processChild(result,child,wrap,alignment,indent);
  }
}
