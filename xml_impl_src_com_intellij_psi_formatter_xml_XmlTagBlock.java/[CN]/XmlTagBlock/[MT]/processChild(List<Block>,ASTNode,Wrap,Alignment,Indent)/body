{
  if (child.getElementType() == XmlElementType.XML_TEXT) {
    final PsiElement parent=child.getPsi().getParent();
    if (parent instanceof XmlTag && ((XmlTag)parent).getSubTags().length == 0) {
      final PsiFile[] injectedFile=new PsiFile[1];
      final Ref<Integer> offset=new Ref<Integer>();
      final Ref<Integer> offset2=new Ref<Integer>();
      final Ref<Integer> prefixLength=new Ref<Integer>();
      final Ref<Integer> suffixLength=new Ref<Integer>();
      ((PsiLanguageInjectionHost)child.getPsi()).processInjectedPsi(new PsiLanguageInjectionHost.InjectedPsiVisitor(){
        public void visit(        @NotNull final PsiFile injectedPsi,        @NotNull final List<PsiLanguageInjectionHost.Shred> places){
          if (places.size() == 1) {
            final PsiLanguageInjectionHost.Shred shred=places.get(0);
            final TextRange textRange=shred.getRangeInsideHost();
            String childText;
            if ((child.getTextLength() == textRange.getEndOffset() && textRange.getStartOffset() == 0) || (isEmpty((childText=child.getText()).substring(0,textRange.getStartOffset())) && isEmpty(childText.substring(textRange.getEndOffset())))) {
              injectedFile[0]=injectedPsi;
              offset.set(textRange.getStartOffset());
              offset2.set(textRange.getEndOffset());
              prefixLength.set(shred.prefix != null ? shred.prefix.length() : 0);
              suffixLength.set(shred.suffix != null ? shred.suffix.length() : 0);
            }
          }
        }
        private boolean isEmpty(        String s){
          s=s.trim();
          s=s.replace("<![CDATA[","");
          s=s.replace("]]>","");
          return s.length() == 0;
        }
      }
);
      if (injectedFile[0] != null) {
        final Language childLanguage=injectedFile[0].getLanguage();
        final FormattingModelBuilder builder=LanguageFormatting.INSTANCE.forContext(childLanguage,child.getPsi());
        if (builder != null) {
          final int startOffset=offset.get().intValue();
          final int endOffset=offset2.get().intValue();
          if (startOffset != 0) {
            final ASTNode leaf=child.findLeafElementAt(startOffset - 1);
            processChild(result,leaf,wrap,alignment,indent);
          }
          createAnotherLanguageBlockWrapper(childLanguage,injectedFile[0].getNode(),result,indent,child.getTextRange().getStartOffset() + startOffset,new TextRange(prefixLength.get(),injectedFile[0].getTextLength() - suffixLength.get()));
          if (endOffset != child.getTextLength()) {
            processChild(result,child.findLeafElementAt(endOffset),wrap,alignment,indent);
          }
          return child;
        }
      }
    }
    return createXmlTextBlocks(result,child,wrap,alignment);
  }
 else {
    return super.processChild(result,child,wrap,alignment,indent);
  }
}
