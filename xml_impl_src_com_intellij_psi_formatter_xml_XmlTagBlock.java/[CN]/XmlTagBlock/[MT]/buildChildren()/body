{
  ChameleonTransforming.transformChildren(myNode);
  ASTNode child=myNode.getFirstChildNode();
  final Wrap attrWrap=Wrap.createWrap(getWrapType(myXmlFormattingPolicy.getAttributesWrap()),false);
  final Wrap textWrap=Wrap.createWrap(getWrapType(myXmlFormattingPolicy.getTextWrap(getTag())),true);
  final Wrap tagBeginWrap=createTagBeginWrapping(getTag());
  final Alignment attrAlignment=Alignment.createAlignment();
  final Alignment textAlignment=Alignment.createAlignment();
  final ArrayList<Block> result=new ArrayList<Block>(3);
  ArrayList<Block> localResult=new ArrayList<Block>(1);
  boolean insideTag=true;
  while (child != null) {
    if (!FormatterUtil.containsWhiteSpacesOnly(child) && child.getTextLength() > 0) {
      Wrap wrap=chooseWrap(child,tagBeginWrap,attrWrap,textWrap);
      Alignment alignment=chooseAlignment(child,attrAlignment,textAlignment);
      if (child.getElementType() == XmlElementType.XML_TAG_END) {
        child=processChild(localResult,child,wrap,alignment,null);
        result.add(createTagDescriptionNode(localResult));
        localResult=new ArrayList<Block>(1);
        insideTag=true;
      }
 else       if (child.getElementType() == XmlElementType.XML_START_TAG_START) {
        insideTag=false;
        if (!localResult.isEmpty()) {
          result.add(createTagContentNode(localResult));
        }
        localResult=new ArrayList<Block>(1);
        child=processChild(localResult,child,wrap,alignment,null);
      }
 else       if (child.getElementType() == XmlElementType.XML_END_TAG_START) {
        insideTag=false;
        if (!localResult.isEmpty()) {
          result.add(createTagContentNode(localResult));
          localResult=new ArrayList<Block>(1);
        }
        child=processChild(localResult,child,wrap,alignment,null);
      }
 else       if (child.getElementType() == XmlElementType.XML_EMPTY_ELEMENT_END) {
        child=processChild(localResult,child,wrap,alignment,null);
        result.add(createTagDescriptionNode(localResult));
        localResult=new ArrayList<Block>(1);
      }
 else       if (isJspxJavaContainingNode(child)) {
        createJspTextNode(localResult,child,getChildIndent());
      }
 else {
        final Indent indent;
        if (isJspResult(localResult)) {
          indent=getChildrenIndent();
        }
 else         if (!insideTag) {
          indent=null;
        }
 else {
          indent=getChildrenIndent();
        }
        child=processChild(localResult,child,wrap,alignment,indent);
      }
    }
    if (child != null) {
      child=child.getTreeNext();
    }
  }
  if (!localResult.isEmpty()) {
    result.add(createTagContentNode(localResult));
  }
  return result;
}
