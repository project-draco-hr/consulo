{
  final Instruction next=runner.getInstruction(getIndex() + 1);
  DfaValue dfaRight=memState.pop();
  DfaValue dfaLeft=memState.pop();
  if (myOperationSign != null) {
    final DfaValueFactory factory=runner.getFactory();
    if (("==".equals(myOperationSign) || "!=".equals(myOperationSign)) && dfaLeft instanceof DfaConstValue && dfaRight instanceof DfaConstValue) {
      boolean negated="!=".equals(myOperationSign) ^ (memState.canBeNaN(dfaLeft) || memState.canBeNaN(dfaRight));
      if (dfaLeft == dfaRight ^ negated) {
        memState.push(factory.getConstFactory().getTrue());
        setTrueReachable();
      }
 else {
        memState.push(factory.getConstFactory().getFalse());
        setFalseReachable();
      }
      return new DfaInstructionState[]{new DfaInstructionState(next,memState)};
    }
    boolean negated=memState.canBeNaN(dfaLeft) || memState.canBeNaN(dfaRight);
    DfaRelationValue dfaRelation=factory.getRelationFactory().create(dfaLeft,dfaRight,myOperationSign,negated);
    if (dfaRelation != null) {
      ArrayList<DfaInstructionState> states=new ArrayList<DfaInstructionState>();
      final DfaMemoryState trueCopy=memState.createCopy();
      if (trueCopy.applyCondition(dfaRelation)) {
        trueCopy.push(factory.getConstFactory().getTrue());
        setTrueReachable();
        states.add(new DfaInstructionState(next,trueCopy));
      }
      DfaMemoryState falseCopy=memState;
      if (falseCopy.applyCondition(dfaRelation.createNegated())) {
        falseCopy.push(factory.getConstFactory().getFalse());
        setFalseReachable();
        states.add(new DfaInstructionState(next,falseCopy));
      }
      return states.toArray(new DfaInstructionState[states.size()]);
    }
 else     if ("+".equals(myOperationSign)) {
      memState.push(getNonNullStringValue(factory));
      setTrueReachable();
      setFalseReachable();
    }
 else {
      memState.push(DfaUnknownValue.getInstance());
    }
  }
 else {
    memState.push(DfaUnknownValue.getInstance());
  }
  return new DfaInstructionState[]{new DfaInstructionState(next,memState)};
}
