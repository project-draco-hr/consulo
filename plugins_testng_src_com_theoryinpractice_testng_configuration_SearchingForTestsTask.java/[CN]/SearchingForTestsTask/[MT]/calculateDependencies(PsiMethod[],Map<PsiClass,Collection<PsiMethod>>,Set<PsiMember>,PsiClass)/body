{
  if (classes != null && classes.length > 0) {
    final Set<String> groupDependencies=new HashSet<String>();
    TestNGUtil.collectAnnotationValues(groupDependencies,"dependsOnGroups",methods,classes);
    final Set<String> testMethodDependencies=new HashSet<String>();
    TestNGUtil.collectAnnotationValues(testMethodDependencies,"dependsOnMethods",methods,classes);
    final Set<PsiMember> membersToCheckNow=new LinkedHashSet<PsiMember>();
    if (!groupDependencies.isEmpty() || !testMethodDependencies.isEmpty()) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          final Project project=classes[0].getProject();
          final PsiClass testAnnotation=JavaPsiFacade.getInstance(project).findClass(TestNGUtil.TEST_ANNOTATION_FQN,GlobalSearchScope.allScope(project));
          LOG.assertTrue(testAnnotation != null);
          for (          PsiMember psiMember : AnnotatedMembersSearch.search(testAnnotation,getSearchScope())) {
            if (psiMember instanceof PsiMethod && testMethodDependencies.contains(psiMember.getName())) {
              if (appendMember(psiMember,alreadyMarkedToBeChecked,results)) {
                membersToCheckNow.add(psiMember);
              }
            }
 else             if (!groupDependencies.isEmpty()) {
              final PsiAnnotation annotation=AnnotationUtil.findAnnotation(psiMember,TestNGUtil.TEST_ANNOTATION_FQN);
              if (TestNGUtil.isAnnotatedWithParameter(annotation,"groups",groupDependencies)) {
                if (appendMember(psiMember,alreadyMarkedToBeChecked,results)) {
                  membersToCheckNow.add(psiMember);
                }
              }
            }
          }
        }
      }
);
    }
    if (methods == null) {
      for (      PsiClass c : classes) {
        results.put(c,new LinkedHashSet<PsiMethod>());
      }
    }
    for (    PsiMember psiMember : membersToCheckNow) {
      PsiClass psiClass;
      PsiMethod[] meths=null;
      if (psiMember instanceof PsiMethod) {
        psiClass=psiMember.getContainingClass();
        meths=new PsiMethod[]{(PsiMethod)psiMember};
      }
 else {
        psiClass=(PsiClass)psiMember;
      }
      calculateDependencies(meths,results,alreadyMarkedToBeChecked,psiClass);
    }
  }
}
