{
  final TestData data=myConfig.getPersistantData();
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    final String packageName=data.getPackageName();
    PsiJavaPackage psiPackage=ApplicationManager.getApplication().runReadAction(new Computable<PsiJavaPackage>(){
      @Nullable public PsiJavaPackage compute(){
        return JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(packageName);
      }
    }
);
    if (psiPackage == null) {
      throw CantRunException.packageNotFound(packageName);
    }
 else {
      TestSearchScope scope=myConfig.getPersistantData().getScope();
      TestClassFilter projectFilter=new TestClassFilter(scope.getSourceScope(myConfig).getGlobalSearchScope(),myProject,true,true);
      TestClassFilter filter=projectFilter.intersectionWith(PackageScope.packageScope(psiPackage,true));
      calculateDependencies(null,classes,TestNGUtil.getAllTestClasses(filter,false));
      if (classes.size() == 0) {
        throw new CantRunException("No tests found in the package \"" + packageName + '\"');
      }
    }
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
      @Nullable public PsiClass compute(){
        return ClassUtil.findPsiClass(psiManager,data.getMainClassName().replace('/','.'),null,true,getSearchScope());
      }
    }
);
    if (psiClass == null) {
      throw new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"');
    }
    if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Nullable public String compute(){
        return psiClass.getQualifiedName();
      }
    }
)) {
      throw new CantRunException("Cannot test anonymous or local class \"" + data.getMainClassName() + '\"');
    }
    calculateDependencies(null,classes,psiClass);
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
      @Nullable public PsiClass compute(){
        return ClassUtil.findPsiClass(psiManager,data.getMainClassName().replace('/','.'),null,true,getSearchScope());
      }
    }
);
    if (psiClass == null) {
      throw new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"');
    }
    if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Nullable public String compute(){
        return psiClass.getQualifiedName();
      }
    }
)) {
      throw new CantRunException("Cannot test anonymous or local class \"" + data.getMainClassName() + '\"');
    }
    collectTestMethods(classes,psiClass,data.getMethodName());
  }
 else   if (data.TEST_OBJECT.equals(TestType.GROUP.getType())) {
    PsiClass[] testClasses=TestNGUtil.getAllTestClasses(new TestClassFilter(data.getScope().getSourceScope(myConfig).getGlobalSearchScope(),myProject,true,true),false);
    if (testClasses != null) {
      for (      PsiClass c : testClasses) {
        classes.put(c,new HashSet<PsiMethod>());
      }
    }
  }
 else   if (data.TEST_OBJECT.equals(TestType.PATTERN.getType())) {
    for (    final String pattern : data.getPatterns()) {
      final String className;
      final String methodName;
      if (pattern.contains(",")) {
        methodName=StringUtil.getShortName(pattern,',');
        className=StringUtil.getPackageName(pattern,',');
      }
 else {
        className=pattern;
        methodName=null;
      }
      final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
        @Nullable @Override public PsiClass compute(){
          return ClassUtil.findPsiClass(psiManager,className.replace('/','.'),null,true,getSearchScope());
        }
      }
);
      if (psiClass != null) {
        final Boolean hasTest=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
          @Override public Boolean compute(){
            return TestNGUtil.hasTest(psiClass);
          }
        }
);
        if (hasTest) {
          if (StringUtil.isEmpty(methodName)) {
            calculateDependencies(null,classes,psiClass);
          }
 else {
            collectTestMethods(classes,psiClass,methodName);
          }
        }
 else {
          throw new CantRunException("No tests found in class " + className);
        }
      }
    }
    if (classes.size() != data.getPatterns().size()) {
      TestSearchScope scope=myConfig.getPersistantData().getScope();
      final List<Pattern> compilePatterns=new ArrayList<Pattern>();
      for (      String p : data.getPatterns()) {
        final Pattern compilePattern;
        try {
          compilePattern=Pattern.compile(p);
        }
 catch (        PatternSyntaxException e) {
          continue;
        }
        if (compilePattern != null) {
          compilePatterns.add(compilePattern);
        }
      }
      TestClassFilter projectFilter=new TestClassFilter(scope.getSourceScope(myConfig).getGlobalSearchScope(),myProject,true,true){
        @Override public boolean isAccepted(        PsiClass psiClass){
          if (super.isAccepted(psiClass)) {
            final String qualifiedName=psiClass.getQualifiedName();
            LOG.assertTrue(qualifiedName != null);
            for (            Pattern pattern : compilePatterns) {
              if (pattern.matcher(qualifiedName).matches())               return true;
            }
          }
          return false;
        }
      }
;
      calculateDependencies(null,classes,TestNGUtil.getAllTestClasses(projectFilter,false));
      if (classes.size() == 0) {
        throw new CantRunException("No tests found in for patterns \"" + StringUtil.join(data.getPatterns()," || ") + '\"');
      }
    }
  }
}
