{
  final TestData data=myConfig.getPersistantData();
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    final String packageName=data.getPackageName();
    PsiPackage psiPackage=ApplicationManager.getApplication().runReadAction(new Computable<PsiPackage>(){
      @Nullable public PsiPackage compute(){
        return JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(packageName);
      }
    }
);
    if (psiPackage == null) {
      throw CantRunException.packageNotFound(packageName);
    }
 else {
      TestSearchScope scope=myConfig.getPersistantData().getScope();
      TestClassFilter projectFilter=new TestClassFilter(scope.getSourceScope(myConfig).getGlobalSearchScope(),myProject,true);
      TestClassFilter filter=projectFilter.intersectionWith(PackageScope.packageScope(psiPackage,true));
      classes.putAll(calculateDependencies(null,TestNGUtil.getAllTestClasses(filter,false)));
      if (classes.size() == 0) {
        throw new CantRunException("No tests found in the package \"" + packageName + '\"');
      }
    }
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
      @Nullable public PsiClass compute(){
        return JavaPsiFacade.getInstance(psiManager.getProject()).findClass(data.getMainClassName(),getSearchScope());
      }
    }
);
    if (psiClass == null) {
      throw new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"');
    }
    if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Nullable public String compute(){
        return psiClass.getQualifiedName();
      }
    }
)) {
      throw new CantRunException("Cannot test anonymous or local class \"" + data.getMainClassName() + '\"');
    }
    classes.putAll(calculateDependencies(null,psiClass));
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
      @Nullable public PsiClass compute(){
        return JavaPsiFacade.getInstance(psiManager.getProject()).findClass(data.getMainClassName(),getSearchScope());
      }
    }
);
    if (psiClass == null) {
      throw new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"');
    }
    if (null == ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Nullable public String compute(){
        return psiClass.getQualifiedName();
      }
    }
)) {
      throw new CantRunException("Cannot test anonymous or local class \"" + data.getMainClassName() + '\"');
    }
    final PsiMethod[] methods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
      public PsiMethod[] compute(){
        return psiClass.findMethodsByName(data.getMethodName(),true);
      }
    }
);
    classes.putAll(calculateDependencies(methods,psiClass));
    Collection<PsiMethod> psiMethods=classes.get(psiClass);
    if (psiMethods == null) {
      psiMethods=new LinkedHashSet<PsiMethod>();
      classes.put(psiClass,psiMethods);
    }
    psiMethods.addAll(Arrays.asList(methods));
  }
 else   if (data.TEST_OBJECT.equals(TestType.GROUP.getType())) {
    PsiClass[] testClasses=TestNGUtil.getAllTestClasses(new TestClassFilter(data.getScope().getSourceScope(myConfig).getGlobalSearchScope(),myProject,true),false);
    for (    PsiClass c : testClasses) {
      classes.put(c,new HashSet<PsiMethod>());
    }
  }
}
