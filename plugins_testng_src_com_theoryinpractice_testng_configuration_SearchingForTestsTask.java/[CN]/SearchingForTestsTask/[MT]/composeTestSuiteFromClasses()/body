{
  Map<String,Collection<String>> map=new HashMap<String,Collection<String>>();
  for (  final Map.Entry<PsiClass,Collection<PsiMethod>> entry : myClasses.entrySet()) {
    Collection<String> methods=new HashSet<String>(entry.getValue().size());
    for (    PsiMethod method : entry.getValue()) {
      methods.add(method.getName());
    }
    map.put(ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Nullable public String compute(){
        return ClassUtil.getJVMClassName(entry.getKey());
      }
    }
),methods);
  }
  Collection<String> groupNames=null;
  if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) {
    String groupName=myData.getGroupName();
    if (groupName != null && groupName.length() > 0) {
      groupNames=new HashSet<String>(1);
      groupNames.add(groupName);
    }
  }
  Map<String,String> testParams=buildTestParameters();
  int logLevel=1;
  try {
    final Properties properties=new Properties();
    properties.load(new ByteArrayInputStream(myConfig.getPersistantData().VM_PARAMETERS.getBytes()));
    final String verbose=properties.getProperty("-Dtestng.verbose");
    if (verbose != null) {
      logLevel=Integer.parseInt(verbose);
    }
  }
 catch (  Exception e) {
    logLevel=1;
  }
  LaunchSuite suite=SuiteGenerator.createSuite(myProject.getName(),null,map,groupNames,testParams,AnnotationTypeEnum.JDK.getName(),logLevel);
  File xmlFile=suite.save(new File(PathManager.getSystemPath()));
  String path=xmlFile.getAbsolutePath() + "\n";
  try {
    FileUtil.writeToFile(myTempFile,path.getBytes(),true);
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
