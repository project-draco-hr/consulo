{
  final MethodSignature methodSignature=LambdaUtil.getFunction(aClass);
  if (methodSignature == null)   return false;
  for (  PsiTypeParameter parameter : aClass.getTypeParameters()) {
    if (parameter.getExtendsListTypes().length == 0)     continue;
    boolean depends=false;
    final PsiType substitution=resolveResult.getSubstitutor().substitute(parameter);
    if (substitution instanceof PsiWildcardType && !((PsiWildcardType)substitution).isBounded()) {
      for (      PsiType paramType : methodSignature.getParameterTypes()) {
        if (LambdaUtil.depends(paramType,parameter,new LambdaUtil.TypeParamsChecker((PsiMethod)null,aClass){
          @Override public boolean startedInference(){
            return true;
          }
        }
)) {
          depends=true;
          break;
        }
      }
      if (!depends)       return true;
    }
  }
  return false;
}
