{
  if (intervalStart == intervalEnd) {
    return processIfOnePoint(e,intervalStart,isGreedyToRight);
  }
  final int offset=e.getOffset();
  final int oldLength=e.getOldLength();
  final int newLength=e.getNewLength();
  if (intervalEnd < offset) {
    return new UnfairTextRange(intervalStart,intervalEnd);
  }
  if (!isGreedyToRight && intervalEnd == offset) {
    if (e instanceof DocumentEventImpl && oldLength == 0 && ((DocumentEventImpl)e).getInitialStartOffset() < offset) {
      return new UnfairTextRange(intervalStart,intervalEnd + newLength);
    }
    return new UnfairTextRange(intervalStart,intervalEnd);
  }
  if (intervalStart > offset + oldLength) {
    return new UnfairTextRange(intervalStart + newLength - oldLength,intervalEnd + newLength - oldLength);
  }
  if (!isGreedyToLeft && intervalStart == offset + oldLength) {
    if (e instanceof DocumentEventImpl && oldLength == 0 && ((DocumentEventImpl)e).getInitialStartOffset() + ((DocumentEventImpl)e).getInitialOldLength() > offset) {
      return new UnfairTextRange(intervalStart - oldLength,intervalEnd + newLength - oldLength);
    }
    return new UnfairTextRange(intervalStart + newLength - oldLength,intervalEnd + newLength - oldLength);
  }
  if (intervalStart <= offset && intervalEnd >= offset + oldLength) {
    return new ProperTextRange(intervalStart,intervalEnd + newLength - oldLength);
  }
  if (intervalStart >= offset && intervalStart <= offset + oldLength && intervalEnd > offset + oldLength) {
    return new ProperTextRange(offset + newLength,intervalEnd + newLength - oldLength);
  }
  if (intervalEnd >= offset && intervalEnd <= offset + oldLength && intervalStart < offset) {
    return new UnfairTextRange(intervalStart,offset);
  }
  return null;
}
