{
  byte type=getChangeType(change);
  int offset1=shift + change.line1;
  int offset2=offset1 + change.inserted;
  int uOffset1=vcsShift + change.line0;
  int uOffset2=uOffset1 + change.deleted;
  if (type != Range.MODIFIED) {
    return new Range(offset1,offset2,uOffset1,uOffset2,type,Collections.singletonList(new Range.InnerRange(offset1,offset2,type)));
  }
  LineWrapper[] lines1=new LineWrapper[change.deleted];
  LineWrapper[] lines2=new LineWrapper[change.inserted];
  for (int i=0; i < change.deleted; i++) {
    lines1[i]=new LineWrapper(vcs.get(i + change.line0));
  }
  for (int i=0; i < change.inserted; i++) {
    lines2[i]=new LineWrapper(current.get(i + change.line1));
  }
  Diff.Change ch=Diff.buildChanges(lines1,lines2);
  List<Range.InnerRange> inner=new ArrayList<Range.InnerRange>();
  int last0=0;
  int last1=0;
  while (ch != null) {
    if (ch.line0 != last0 && ch.line1 != last1) {
      byte innerType=Range.EQUAL;
      int innerStart=shift + change.line1 + last1;
      int innerEnd=shift + change.line1 + ch.line1;
      inner.add(new Range.InnerRange(innerStart,innerEnd,innerType));
    }
    byte innerType=getChangeType(ch);
    int innerStart=shift + change.line1 + ch.line1;
    int innerEnd=innerStart + ch.inserted;
    inner.add(new Range.InnerRange(innerStart,innerEnd,innerType));
    last0=ch.line0 + ch.deleted;
    last1=ch.line1 + ch.inserted;
    ch=ch.link;
  }
  if (change.deleted != last0 && change.inserted != last1) {
    byte innerType=Range.EQUAL;
    int innerStart=shift + change.line1 + last1;
    int innerEnd=shift + change.line1 + change.inserted;
    inner.add(new Range.InnerRange(innerStart,innerEnd,innerType));
  }
  return new Range(offset1,offset2,uOffset1,uOffset2,type,inner);
}
