{
  myProject=project;
  myContentManager=contentManager;
  myView=new ChangesListView(project);
  Disposer.register(project,myView);
  myRepaintAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,project);
  myDiffDetails=new ShortDiffDetails(myProject,new Getter<Change[]>(){
    @Override public Change[] get(){
      return myView.getSelectedChanges();
    }
  }
,vcsChangeDetailsManager);
  myListenersForShortDiff=new FileAndDocumentListenersForShortDiff(myDiffDetails){
    @Override protected void updateDetails(){
      myDetailsUpdater.queue(myUpdateDetails);
    }
    @Override protected boolean updateSynchronously(){
      if (shouldUpdateDetailsNow()) {
        return myDiffDetails.refreshDataSynch();
      }
      return false;
    }
  }
;
  myDiffDetails.setParent(myView);
  myDetailsUpdater=new ZipperUpdater(300,Alarm.ThreadToUse.SWING_THREAD,myProject);
  myUpdateDetails=new Runnable(){
    @Override public void run(){
      if (!shouldUpdateDetailsNow()) {
        myDetailsUpdater.queue(this);
        return;
      }
      changeDetails();
    }
  }
;
  myTsl=new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (mySelectedPaths == null && e.getPaths() == null) {
        return;
      }
      if (checkSelectionNotChanged(e))       return;
      mySelectedPaths=e.getPaths();
      if (LOG.isDebugEnabled()) {
        StringWriter sw=new StringWriter();
        new Throwable().printStackTrace(new PrintWriter(sw));
        LOG.debug("selection changed. selected:  " + toStringPaths(myView.getSelectionPaths()) + " from: "+ sw.toString());
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          changeDetails();
        }
      }
);
    }
    private boolean checkSelectionNotChanged(    TreeSelectionEvent e){
      if (mySelectedPaths != null && e.getPaths() != null) {
        if (mySelectedPaths.length == e.getPaths().length) {
          boolean equal=true;
          int idx=0;
          TreePath[] paths=e.getPaths();
          for (; idx < mySelectedPaths.length; idx++) {
            Object last1=mySelectedPaths[idx].getLastPathComponent();
            Object last2=paths[idx].getLastPathComponent();
            if (last1 instanceof ChangesBrowserNode && last2.getClass().equals(last1.getClass())) {
              equal=Comparing.equal(((ChangesBrowserNode)last1).getUserObject(),((ChangesBrowserNode)last2).getUserObject());
              if (!equal)               break;
            }
 else {
              equal=false;
              break;
            }
          }
          if (equal) {
            return true;
          }
        }
      }
      return false;
    }
    private String toStringPaths(    TreePath[] paths){
      if (paths == null)       return "null";
      if (paths.length == 0)       return "empty";
      final StringBuilder sb=new StringBuilder();
      for (      TreePath path : paths) {
        if (sb.length() > 0) {
          sb.append(", ");
        }
        sb.append(path.toString());
      }
      return sb.toString();
    }
  }
;
}
