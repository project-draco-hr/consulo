{
  SimpleToolWindowPanel panel=new SimpleToolWindowPanel(false,true);
  DefaultActionGroup group=(DefaultActionGroup)ActionManager.getInstance().getAction("ChangesViewToolbar");
  ActionManager.getInstance().getAction("ChangesView.Refresh").registerCustomShortcutSet(CommonShortcuts.getRerun(),panel);
  ActionManager.getInstance().getAction("ChangesView.NewChangeList").registerCustomShortcutSet(CommonShortcuts.getNew(),panel);
  ActionManager.getInstance().getAction("ChangesView.RemoveChangeList").registerCustomShortcutSet(CommonShortcuts.DELETE,panel);
  ActionManager.getInstance().getAction("ChangesView.Move").registerCustomShortcutSet(CommonShortcuts.getMove(),panel);
  ActionManager.getInstance().getAction("ChangesView.Rename").registerCustomShortcutSet(CommonShortcuts.getRename(),panel);
  ActionManager.getInstance().getAction("ChangesView.SetDefault").registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_U,KeyEvent.ALT_DOWN_MASK | ctrlMask())),panel);
  final CustomShortcutSet diffShortcut=new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_D,ctrlMask()));
  ActionManager.getInstance().getAction("ChangesView.Diff").registerCustomShortcutSet(diffShortcut,panel);
  JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(createToolbarComponent(group),BorderLayout.WEST);
  DefaultActionGroup visualActionsGroup=new DefaultActionGroup();
  final Expander expander=new Expander();
  visualActionsGroup.add(CommonActionsManager.getInstance().createExpandAllAction(expander,panel));
  visualActionsGroup.add(CommonActionsManager.getInstance().createCollapseAllAction(expander,panel));
  ToggleShowFlattenAction showFlattenAction=new ToggleShowFlattenAction();
  showFlattenAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_P,ctrlMask())),panel);
  visualActionsGroup.add(showFlattenAction);
  visualActionsGroup.add(ActionManager.getInstance().getAction(IdeActions.ACTION_COPY));
  visualActionsGroup.add(new ToggleShowIgnoredAction());
  visualActionsGroup.add(new IgnoredSettingsAction());
  visualActionsGroup.add(new ToggleDetailsAction());
  visualActionsGroup.add(new ContextHelpAction(ChangesListView.ourHelpId));
  toolbarPanel.add(createToolbarComponent(visualActionsGroup),BorderLayout.CENTER);
  DefaultActionGroup menuGroup=(DefaultActionGroup)ActionManager.getInstance().getAction("ChangesViewPopupMenu");
  myView.setMenuActions(menuGroup);
  myView.setShowFlatten(SHOW_FLATTEN_MODE);
  myProgressLabel=new JLabel();
  panel.setToolbar(toolbarPanel);
  final JPanel content=new JPanel(new BorderLayout());
  mySplitter=new Splitter(false,0.5f);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myView);
  final JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.setBorder(BorderFactory.createLineBorder(UIUtil.getBorderColor()));
  wrapper.add(scrollPane,BorderLayout.CENTER);
  mySplitter.setShowDividerControls(true);
  mySplitter.setFirstComponent(wrapper);
  content.add(mySplitter,BorderLayout.CENTER);
  content.add(myProgressLabel,BorderLayout.SOUTH);
  panel.setContent(content);
  myView.installDndSupport(ChangeListManagerImpl.getInstanceImpl(myProject));
  myView.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      changeDetails();
    }
  }
);
  return panel;
}
