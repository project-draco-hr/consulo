{
  final PairConsumer<Change,Pair<JPanel,Disposable>> cacheConsumer=new PairConsumer<Change,Pair<JPanel,Disposable>>(){
    @Override public void consume(    Change change,    Pair<JPanel,Disposable> pair){
      final FilePath filePath=ChangesUtil.getFilePath(change);
      final Pair<JPanel,Disposable> old=myDetailsCache.get(filePath);
      if (old == null) {
        myDetailsCache.put(filePath,pair);
      }
 else       if (old != pair) {
        if (pair.getSecond() != null) {
          Disposer.dispose(pair.getSecond());
        }
      }
    }
  }
;
  myDetailsConsumer=new PairConsumer<Change,Pair<JPanel,Disposable>>(){
    @Override public void consume(    Change change,    Pair<JPanel,Disposable> pair){
      cacheConsumer.consume(change,pair);
      myDetailsPanel.data(pair.getFirst());
      myDetailsPanel.layout();
    }
  }
;
  myDetailsLoader=new GenericDetailsLoader<Change,Pair<JPanel,Disposable>>(new Consumer<Change>(){
    @Override public void consume(    Change change){
      final FilePath filePath=ChangesUtil.getFilePath(change);
      Pair<JPanel,Disposable> details=myDetailsCache.get(filePath);
      if (details != null) {
        myDetailsConsumer.consume(change,details);
      }
 else       if (myVcsChangeDetailsManager.getPanel(change)) {
        myDetailsPanel.loading();
        myDetailsPanel.layout();
      }
    }
  }
,myDetailsConsumer);
  myDetailsLoader.setCacheConsumer(cacheConsumer);
  myVcsChangeDetailsManager.setDetails(myDetailsLoader);
}
