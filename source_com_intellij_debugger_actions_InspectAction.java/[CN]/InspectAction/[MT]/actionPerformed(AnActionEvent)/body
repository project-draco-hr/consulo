{
  final Project project=(Project)e.getDataContext().getData(DataConstants.PROJECT);
  final DebuggerTreeNodeImpl node=getSelectedNode(e.getDataContext());
  if (node == null)   return;
  final NodeDescriptorImpl descriptor=node.getDescriptor();
  final DebuggerStateManager stateManager=getContextManager(e.getDataContext());
  if (!(descriptor instanceof ValueDescriptorImpl) || stateManager == null)   return;
  final DebuggerContextImpl context=stateManager.getContext();
  if (!canInspect((ValueDescriptorImpl)descriptor,context)) {
    return;
  }
  context.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(context){
    public void threadAction(){
      final TextWithImportsImpl evaluationText=DebuggerTreeNodeExpression.createEvaluationText(node,context);
      final NodeDescriptorImpl inspectDescriptor;
      if (descriptor instanceof WatchItemDescriptor) {
        inspectDescriptor=(NodeDescriptorImpl)((WatchItemDescriptor)descriptor).getModifier().getInspectItem(project);
      }
 else {
        inspectDescriptor=descriptor;
      }
      DebuggerInvocationUtil.invokeLater(project,new Runnable(){
        public void run(){
          InspectDialog dialog=new InspectDialog(project,stateManager,"Inspect '" + evaluationText + "'",inspectDescriptor);
          dialog.show();
        }
      }
);
    }
  }
);
}
