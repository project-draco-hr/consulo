{
  final List<Injectable> injectables=getAllInjectables();
  final JList list=new JBList(injectables);
  list.setCellRenderer(new ColoredListCellRendererWrapper<Injectable>(){
    @Override protected void doCustomize(    JList list,    Injectable language,    int index,    boolean selected,    boolean hasFocus){
      setIcon(language.getIcon());
      append(language.getDisplayName());
      String description=language.getAdditionalDescription();
      if (description != null) {
        append(description,SimpleTextAttributes.GRAYED_ATTRIBUTES);
      }
    }
  }
);
  JBPopup popup=new PopupChooserBuilder(list).setItemChoosenCallback(new Runnable(){
    public void run(){
      Injectable value=(Injectable)list.getSelectedValue();
      if (value != null) {
        onChosen.process(value);
        PropertiesComponent.getInstance().setValue(LAST_INJECTED_LANGUAGE,value.getId());
      }
    }
  }
).setFilteringEnabled(new Function<Object,String>(){
    @Override public String fun(    Object language){
      return ((Injectable)language).getDisplayName();
    }
  }
).createPopup();
  final String lastInjected=PropertiesComponent.getInstance().getValue(LAST_INJECTED_LANGUAGE);
  if (lastInjected != null) {
    Injectable injectable=ContainerUtil.find(injectables,new Condition<Injectable>(){
      @Override public boolean value(      Injectable injectable){
        return lastInjected.equals(injectable.getId());
      }
    }
);
    list.setSelectedValue(injectable,true);
  }
  popup.showInBestPositionFor(editor);
  return true;
}
