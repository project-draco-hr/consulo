{
  final PsiMethod first;
  if (parent.getParent() instanceof PsiMethodCallExpression) {
    first=((PsiMethodCallExpression)parent.getParent()).resolveMethod();
  }
 else {
    first=PsiTreeUtil.getParentOfType(parent,PsiMethod.class,true);
  }
  if (first == null || first.getContainingClass() == null)   return null;
  final LinkedList<PsiMethod> methods=new LinkedList<PsiMethod>();
  methods.add(first);
  while (!methods.isEmpty()) {
    final PsiMethod method=methods.removeFirst();
    final PsiClass psiClass=method.getContainingClass();
    if (psiClass != null && psiClass.getQualifiedName() != null) {
      return method;
    }
 else {
      methods.addAll(Arrays.asList(method.findSuperMethods()));
    }
  }
  return null;
}
