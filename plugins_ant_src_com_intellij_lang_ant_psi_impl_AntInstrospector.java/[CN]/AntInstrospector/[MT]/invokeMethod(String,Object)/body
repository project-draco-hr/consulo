{
  final Class helperClass=myHelper.getClass();
  final Class[] types=new Class[params.length];
  try {
    for (int idx=0; idx < params.length; idx++) {
      types[idx]=params[idx].getClass();
    }
    final Method method=helperClass.getMethod(methodName,types);
    return (T)method.invoke(myHelper,params);
  }
 catch (  IllegalAccessException e) {
    LOG.error(e);
  }
catch (  NoSuchMethodException e) {
    LOG.error(e);
  }
catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
    if (cause instanceof Error) {
      throw (Error)cause;
    }
    LOG.error(e);
  }
  return null;
}
