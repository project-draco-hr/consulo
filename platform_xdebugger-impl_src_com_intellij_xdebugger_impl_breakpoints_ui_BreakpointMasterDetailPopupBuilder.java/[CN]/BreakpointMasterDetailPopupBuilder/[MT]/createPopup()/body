{
  myPopupBuilder=new MasterDetailPopupBuilder(myProject);
  for (  BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
    provider.createBreakpointsGroupingRules(myRulesAvailable);
  }
  for (  XBreakpointGroupingRule rule : myRulesAvailable) {
    if (rule.isAlwaysEnabled()) {
      myRulesEnabled.add(rule);
    }
  }
  DefaultActionGroup actions=createActions();
  myTree=BreakpointItemsTree.createTree(getEnabledRulesList());
  final ArrayList<BreakpointItem> breakpoints=collectItems();
  myTree.buildTree(breakpoints);
  final BreakpointPanelProvider.BreakpointsListener listener=new BreakpointPanelProvider.BreakpointsListener(){
    @Override public void breakpointsChanged(){
      myTree.buildTree(collectItems());
    }
  }
;
  for (  BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
    provider.addListener(listener,myProject);
  }
  final JBPopup popup=myPopupBuilder.setActionsGroup(actions).setTree(myTree).setDelegate(new MasterDetailPopupBuilder.Delegate(){
    @Override public String getTitle(){
      return "Breakpoints";
    }
    @Override public void handleMnemonic(    KeyEvent e,    Project project,    JBPopup popup){
    }
    public JComponent createAccessoryView(    Project project){
      return new JCheckBox();
    }
    @Override public Object[] getSelectedItemsInTree(){
      final List<BreakpointItem> res=myTree.getSelectedBreakpoints();
      return res.toArray(new Object[res.size()]);
    }
  }
).setCloseOnEnter(false).createMasterDetailPopup();
  myTree.setBorder(IdeBorderFactory.createBorder());
  myTree.setDelegate(new BreakpointItemsTree.BreakpointItemsTreeDelegate(){
    @Override public void execute(    BreakpointItem item){
      item.execute(myProject,popup);
    }
  }
);
  initSelection(breakpoints);
  popup.addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      for (      BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
        provider.removeListener(listener);
      }
    }
  }
);
  return popup;
}
