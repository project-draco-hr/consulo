{
  element=element.getParent();
  final GrField field=(GrField)element;
  final Collection<PsiReference> usages=ReferencesSearch.search(field).findAll();
  final Collection<PsiElement> fieldUsages=new HashSet<PsiElement>();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  for (  PsiReference usage : usages) {
    final PsiElement psiElement=usage.getElement();
    if (PsiUtil.isMethodUsage(psiElement))     continue;
    if (GroovyFileType.GROOVY_LANGUAGE.equals(psiElement.getLanguage())) {
      fieldUsages.add(psiElement);
    }
 else {
      conflicts.putValue(psiElement,GroovyInspectionBundle.message("closure.is.used.as.variable.in.not.groovy"));
    }
  }
  if (conflicts.size() > 0) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(project,conflicts,new Runnable(){
      public void run(){
        execute(field,fieldUsages);
      }
    }
);
    conflictsDialog.show();
  }
 else {
    execute(field,fieldUsages);
  }
}
