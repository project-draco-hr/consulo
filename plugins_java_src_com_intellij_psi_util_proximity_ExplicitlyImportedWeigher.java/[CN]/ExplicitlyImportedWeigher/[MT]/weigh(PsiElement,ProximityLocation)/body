{
  final PsiElement position=location.getPosition();
  if (position == null) {
    return 0;
  }
  final PsiFile elementFile=element.getContainingFile();
  final PsiFile positionFile=position.getContainingFile();
  if (positionFile != null && elementFile != null && positionFile.getOriginalFile().equals(elementFile.getOriginalFile())) {
    return 3;
  }
  if (element instanceof PsiClass) {
    final String qname=((PsiClass)element).getQualifiedName();
    if (qname != null) {
      final PsiJavaFile psiJavaFile=PsiTreeUtil.getContextOfType(position,PsiJavaFile.class,false);
      if (psiJavaFile != null) {
        final PsiImportList importList=psiJavaFile.getImportList();
        if (importList != null) {
          for (          final PsiImportStatement importStatement : importList.getImportStatements()) {
            final boolean onDemand=importStatement.isOnDemand();
            final String imported=importStatement.getQualifiedName();
            if (onDemand && qname.startsWith(imported + ".") || !onDemand && qname.equals(imported)) {
              return 1;
            }
          }
        }
      }
    }
  }
  if (element instanceof PsiMember) {
    final PsiPackage placePackage=PLACE_PACKAGE.getValue(location);
    if (placePackage != null) {
      Module elementModule=ModuleUtil.findModuleForPsiElement(element);
      if (location.getPositionModule() == elementModule && placePackage.equals(getContextPackage(element))) {
        return 2;
      }
    }
  }
  return 0;
}
