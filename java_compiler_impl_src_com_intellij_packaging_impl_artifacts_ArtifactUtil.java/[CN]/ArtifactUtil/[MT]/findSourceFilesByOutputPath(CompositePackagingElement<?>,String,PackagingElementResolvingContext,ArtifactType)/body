{
  outputPath=StringUtil.trimStart(outputPath,"/");
  if (outputPath.length() == 0) {
    return Collections.emptyList();
  }
  int i=outputPath.indexOf('/');
  final String firstName=i != -1 ? outputPath.substring(0,i) : outputPath;
  String tail=i != -1 ? outputPath.substring(i + 1) : "";
  final List<CompositePackagingElement<?>> compositeChildren=new SmartList<CompositePackagingElement<?>>();
  final List<FileCopyPackagingElement> fileCopies=new SmartList<FileCopyPackagingElement>();
  final List<DirectoryCopyPackagingElement> dirCopies=new SmartList<DirectoryCopyPackagingElement>();
  processElements(parent.getChildren(),context,artifactType,new Processor<PackagingElement<?>>(){
    public boolean process(    PackagingElement<?> element){
      if (element instanceof CompositePackagingElement) {
        final CompositePackagingElement<?> compositeElement=(CompositePackagingElement<?>)element;
        if (firstName.equals(compositeElement.getName())) {
          compositeChildren.add(compositeElement);
        }
      }
 else       if (element instanceof FileCopyPackagingElement) {
        final FileCopyPackagingElement fileCopyElement=(FileCopyPackagingElement)element;
        if (firstName.equals(fileCopyElement.getOutputFileName())) {
          fileCopies.add(fileCopyElement);
        }
      }
 else       if (element instanceof DirectoryCopyPackagingElement) {
        dirCopies.add((DirectoryCopyPackagingElement)element);
      }
      return true;
    }
  }
);
  List<VirtualFile> result=new SmartList<VirtualFile>();
  for (  CompositePackagingElement<?> child : compositeChildren) {
    result.addAll(findSourceFilesByOutputPath(child,tail,context,artifactType));
  }
  if (tail.length() == 0) {
    for (    FileCopyPackagingElement fileCopy : fileCopies) {
      ContainerUtil.addIfNotNull(fileCopy.findFile(),result);
    }
  }
  for (  DirectoryCopyPackagingElement dirCopy : dirCopies) {
    final VirtualFile sourceRoot=dirCopy.findFile();
    if (sourceRoot != null) {
      ContainerUtil.addIfNotNull(sourceRoot.findFileByRelativePath(outputPath),result);
    }
  }
  return result;
}
