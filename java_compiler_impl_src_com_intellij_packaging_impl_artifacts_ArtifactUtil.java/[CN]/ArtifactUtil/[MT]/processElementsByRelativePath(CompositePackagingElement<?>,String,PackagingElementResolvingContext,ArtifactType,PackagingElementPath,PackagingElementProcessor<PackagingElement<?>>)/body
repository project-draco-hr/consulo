{
  relativePath=StringUtil.trimStart(relativePath,"/");
  if (relativePath.length() == 0) {
    return true;
  }
  int i=relativePath.indexOf('/');
  final String firstName=i != -1 ? relativePath.substring(0,i) : relativePath;
  final String tail=i != -1 ? relativePath.substring(i + 1) : "";
  return processElements(parent.getChildren(),context,artifactType,parentPath.appendComposite(parent),new PackagingElementProcessor<PackagingElement<?>>(){
    @Override public boolean process(    @NotNull PackagingElement<?> element,    @NotNull PackagingElementPath path){
      boolean process=false;
      if (element instanceof CompositePackagingElement && firstName.equals(((CompositePackagingElement<?>)element).getName())) {
        process=true;
      }
 else       if (element instanceof FileCopyPackagingElement) {
        final FileCopyPackagingElement fileCopy=(FileCopyPackagingElement)element;
        if (firstName.equals(fileCopy.getOutputFileName())) {
          process=true;
        }
      }
      if (process) {
        if (tail.length() == 0) {
          if (!processor.process(element,path))           return false;
        }
 else         if (element instanceof CompositePackagingElement<?>) {
          return processElementsByRelativePath((CompositePackagingElement)element,tail,context,artifactType,path,processor);
        }
      }
      return true;
    }
  }
);
}
