{
  final boolean isResourceFile=CompilerConfiguration.getInstance(project).isResourceFile(file);
  final List<Trinity<Artifact,PackagingElementPath,String>> artifacts=new ArrayList<Trinity<Artifact,PackagingElementPath,String>>();
  final PackagingElementResolvingContext context=ArtifactManager.getInstance(project).getResolvingContext();
  for (  final Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    processPackagingElements(artifact,null,new PackagingElementProcessor<PackagingElement<?>>(){
      @Override public boolean process(      @NotNull PackagingElement<?> element,      @NotNull PackagingElementPath path){
        if (element instanceof FileOrDirectoryCopyPackagingElement<?>) {
          final VirtualFile root=((FileOrDirectoryCopyPackagingElement)element).findFile();
          if (root != null && VfsUtil.isAncestor(root,file,false)) {
            final String relativePath;
            if (root.equals(file) && element instanceof FileCopyPackagingElement) {
              relativePath=((FileCopyPackagingElement)element).getOutputFileName();
            }
 else {
              relativePath=VfsUtilCore.getRelativePath(file,root,'/');
            }
            artifacts.add(Trinity.create(artifact,path,relativePath));
            return false;
          }
        }
 else         if (isResourceFile && element instanceof ModuleOutputPackagingElement) {
          final String relativePath=getRelativePathInSources(file,(ModuleOutputPackagingElement)element,context);
          if (relativePath != null) {
            artifacts.add(Trinity.create(artifact,path,relativePath));
            return false;
          }
        }
        return true;
      }
    }
,context,true);
  }
  return artifacts;
}
