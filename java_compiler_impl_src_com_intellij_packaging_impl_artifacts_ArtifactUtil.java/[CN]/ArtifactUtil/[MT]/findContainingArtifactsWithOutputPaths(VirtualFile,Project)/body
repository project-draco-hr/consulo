{
  final List<Trinity<Artifact,List<CompositePackagingElement<?>>,String>> artifacts=new ArrayList<Trinity<Artifact,List<CompositePackagingElement<?>>,String>>();
  for (  final Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    processFileOrDirectoryCopyElements(artifact,new PackagingElementProcessor<FileOrDirectoryCopyPackagingElement<?>>(){
      @Override public boolean process(      @NotNull List<CompositePackagingElement<?>> parents,      @NotNull FileOrDirectoryCopyPackagingElement<?> element){
        final VirtualFile root=element.findFile();
        if (root != null && VfsUtil.isAncestor(root,file,false)) {
          final String relativePath;
          if (root.equals(file) && element instanceof FileCopyPackagingElement) {
            relativePath=((FileCopyPackagingElement)element).getOutputFileName();
          }
 else {
            relativePath=VfsUtil.getRelativePath(file,root,'/');
          }
          artifacts.add(Trinity.create(artifact,parents,relativePath));
          return false;
        }
        return true;
      }
    }
,ArtifactManager.getInstance(project).getResolvingContext(),true);
  }
  return artifacts;
}
