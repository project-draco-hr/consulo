{
  final List<Pair<Artifact,String>> artifacts=new ArrayList<Pair<Artifact,String>>();
  for (  final Artifact artifact : ArtifactManager.getInstance(project).getArtifacts()) {
    processPackagingElements(artifact,PackagingElementFactoryImpl.FILE_COPY_ELEMENT_TYPE,new PackagingElementProcessor<FileCopyPackagingElement>(){
      @Override public boolean process(      @NotNull List<CompositePackagingElement<?>> parents,      @NotNull FileCopyPackagingElement fileCopyPackagingElement){
        final VirtualFile root=fileCopyPackagingElement.findFile();
        if (root != null && VfsUtil.isAncestor(root,file,false)) {
          boolean isInArchive=false;
          for (          CompositePackagingElement<?> parent : parents) {
            if (parent instanceof ArchivePackagingElement) {
              isInArchive=true;
              break;
            }
          }
          String path;
          if (!isInArchive) {
            final String relativePath;
            if (root.equals(file)) {
              relativePath=fileCopyPackagingElement.getOutputFileName();
            }
 else {
              relativePath=VfsUtil.getRelativePath(file,root,'/');
            }
            path=DeploymentUtil.concatPaths(getPathFromRoot(parents,"/"),relativePath);
          }
 else {
            path=null;
          }
          artifacts.add(Pair.create(artifact,path));
          return false;
        }
        return true;
      }
    }
,ArtifactManager.getInstance(project).getResolvingContext(),true);
  }
  return artifacts;
}
