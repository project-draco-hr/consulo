{
  if (virtualFile == null) {
    return getModuleNode(module);
  }
  PackageDependenciesNode directoryNode=myModuleDirNodes.get(virtualFile);
  if (directoryNode != null) {
    if (myCompactEmptyMiddlePackages) {
      final DirectoryNode nestedNode=((DirectoryNode)directoryNode).getCompactedDirNode();
      if (nestedNode != null) {
        boolean expand=false;
        if (myTree != null) {
          expand=!myTree.isCollapsed(new TreePath(directoryNode.getPath()));
        }
        DirectoryNode parentWrapper=nestedNode.getWrapper();
        while (parentWrapper.getWrapper() != null) {
          parentWrapper=parentWrapper.getWrapper();
        }
        for (int i=parentWrapper.getChildCount() - 1; i >= 0; i--) {
          nestedNode.add((MutableTreeNode)parentWrapper.getChildAt(i));
        }
        ((DirectoryNode)directoryNode).setCompactedDirNode(null);
        parentWrapper.add(nestedNode);
        nestedNode.removeUpReference();
        if (myTree != null && expand) {
          final Runnable expandRunnable=new Runnable(){
            public void run(){
              myTree.expandPath(new TreePath(nestedNode.getPath()));
            }
          }
;
          SwingUtilities.invokeLater(expandRunnable);
        }
        return parentWrapper;
      }
      if (directoryNode.getParent() == null) {
        DirectoryNode parentWrapper=((DirectoryNode)directoryNode).getWrapper();
        if (parentWrapper != null) {
          while (parentWrapper.getWrapper() != null) {
            parentWrapper=parentWrapper.getWrapper();
          }
          return parentWrapper;
        }
      }
    }
    return directoryNode;
  }
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  final VirtualFile sourceRoot=fileIndex.getSourceRootForFile(virtualFile);
  final VirtualFile contentRoot=fileIndex.getContentRootForFile(virtualFile);
  directoryNode=new DirectoryNode(virtualFile,myProject,myCompactEmptyMiddlePackages,myFlattenPackages,myBaseDir,myContentRoots);
  myModuleDirNodes.put(virtualFile,(DirectoryNode)directoryNode);
  final VirtualFile directory=virtualFile.getParent();
  if (!myFlattenPackages && directory != null) {
    if (myCompactEmptyMiddlePackages && !Comparing.equal(sourceRoot,virtualFile) && !Comparing.equal(contentRoot,virtualFile)) {
      ((DirectoryNode)directoryNode).setCompactedDirNode(childNode);
    }
    if (fileIndex.getModuleForFile(directory) == module) {
      DirectoryNode parentDirectoryNode=myModuleDirNodes.get(directory);
      if (parentDirectoryNode != null || !myCompactEmptyMiddlePackages || (sourceRoot != null && VfsUtil.isAncestor(directory,sourceRoot,false) && fileIndex.getSourceRootForFile(directory) != null) || Comparing.equal(directory,contentRoot)) {
        getModuleDirNode(directory,module,(DirectoryNode)directoryNode).add(directoryNode);
      }
 else {
        directoryNode=getModuleDirNode(directory,module,(DirectoryNode)directoryNode);
      }
    }
 else {
      getModuleNode(module).add(directoryNode);
    }
  }
 else {
    if (Comparing.equal(contentRoot,virtualFile)) {
      getModuleNode(module).add(directoryNode);
    }
 else {
      final VirtualFile root;
      if (!Comparing.equal(sourceRoot,virtualFile) && sourceRoot != null) {
        root=sourceRoot;
      }
 else       if (contentRoot != null) {
        root=contentRoot;
      }
 else {
        root=null;
      }
      if (root != null) {
        getModuleDirNode(root,module,null).add(directoryNode);
      }
    }
  }
  return directoryNode;
}
