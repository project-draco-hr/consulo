{
  boolean isMarked=myMarker != null && myMarker.isMarked(file.getVirtualFile());
  if (!isMarked)   return null;
  final VirtualFile vFile=file.getVirtualFile();
  LOG.assertTrue(vFile != null);
  VirtualFile dirToReload=vFile.getParent();
  PackageDependenciesNode rootToReload=myModuleDirNodes.get(dirToReload);
  if (rootToReload == null && myFlattenPackages) {
    final Module module=myFileIndex.getModuleForFile(vFile);
    final boolean moduleNodeExist=myModuleNodes.get(module) != null;
    rootToReload=getModuleNode(module);
    if (!moduleNodeExist) {
      rootToReload=null;
    }
  }
 else {
    while ((rootToReload == null || (rootToReload instanceof DirectoryNode && ((DirectoryNode)rootToReload).getCompactedDirNode() != null)) && dirToReload != null) {
      dirToReload=dirToReload.getParent();
      rootToReload=myModuleDirNodes.get(dirToReload);
    }
  }
  PackageDependenciesNode dirNode=getFileParentNode(vFile);
  if (findNodeForPsiElement(dirNode,file) == null) {
    dirNode.add(new FileNode(vFile,myProject,isMarked));
  }
  return rootToReload;
}
