{
  Module module=myFileIndex.getModuleForFile(parent.getVirtualFile());
  if (element instanceof PsiDirectory && myFlattenPackages) {
    final PackageDependenciesNode moduleNode=getModuleNode(module);
    final PsiDirectory psiDirectory=(PsiDirectory)element;
    final VirtualFile virtualFile=psiDirectory.getVirtualFile();
    final PackageDependenciesNode dirNode=getModuleDirNode(psiDirectory,myFileIndex.getModuleForFile(virtualFile),null);
    dirNode.removeFromParent();
    return moduleNode;
  }
  DefaultMutableTreeNode dirNode=getModuleDirNode(parent,module,null);
  if (dirNode == null)   return null;
  final PackageDependenciesNode[] classOrDirNodes=findNodeForPsiElement((PackageDependenciesNode)dirNode,element);
  if (classOrDirNodes != null) {
    for (    PackageDependenciesNode classNode : classOrDirNodes) {
      classNode.removeFromParent();
    }
  }
  DefaultMutableTreeNode node=dirNode;
  DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();
  while (node != null && node.getChildCount() == 0) {
    PsiDirectory directory=parent.getParentDirectory();
    parentNode=(DefaultMutableTreeNode)node.getParent();
    node.removeFromParent();
    if (node instanceof DirectoryNode) {
      while (node != null) {
        myModuleDirNodes.put((PsiDirectory)((DirectoryNode)node).getPsiElement(),null);
        node=((DirectoryNode)node).getCompactedDirNode();
      }
    }
 else     if (node instanceof ModuleNode) {
      myModuleNodes.put(((ModuleNode)node).getModule(),null);
    }
 else     if (node instanceof ModuleGroupNode) {
      myModuleGroupNodes.put(((ModuleGroupNode)node).getModuleGroupName(),null);
    }
    node=parentNode;
    parent=directory;
  }
  if (myCompactEmptyMiddlePackages && node instanceof DirectoryNode && node.getChildCount() == 1) {
    final TreeNode treeNode=node.getChildAt(0);
    if (treeNode instanceof DirectoryNode) {
      node.removeAllChildren();
      for (int i=treeNode.getChildCount() - 1; i >= 0; i--) {
        node.add((MutableTreeNode)treeNode.getChildAt(i));
      }
      ((DirectoryNode)node).setCompactedDirNode((DirectoryNode)treeNode);
    }
  }
  return parentNode;
}
