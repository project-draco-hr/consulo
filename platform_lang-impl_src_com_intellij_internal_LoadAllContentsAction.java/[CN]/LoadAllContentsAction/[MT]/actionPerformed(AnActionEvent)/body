{
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  String m="Started loading content";
  LOG.info(m);
  System.out.println(m);
  long start=System.currentTimeMillis();
  final AtomicInteger count=new AtomicInteger();
  ApplicationManagerEx.getApplicationEx().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
        @Override public boolean processFile(        VirtualFile fileOrDir){
          if (fileOrDir.isDirectory() || fileOrDir.isSpecialFile())           return true;
          try {
            count.incrementAndGet();
            FileUtil.loadFileBytes(new File(fileOrDir.getPath()));
            ProgressManager.getInstance().getProgressIndicator().setText(fileOrDir.getPresentableUrl());
          }
 catch (          IOException e1) {
            LOG.error(e1);
          }
          return true;
        }
      }
);
    }
  }
,"Loading",false,project);
  long end=System.currentTimeMillis();
  String message="Finished loading content of " + count + " files. elapsed="+ ((end - start) / 1000)+ "sec.";
  LOG.info(message);
  System.out.println(message);
}
