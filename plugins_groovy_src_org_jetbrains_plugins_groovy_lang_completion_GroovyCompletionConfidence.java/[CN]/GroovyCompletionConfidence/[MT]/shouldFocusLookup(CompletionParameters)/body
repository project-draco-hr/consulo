{
  final PsiElement position=parameters.getPosition();
  PsiFile file=position.getContainingFile();
  if (file instanceof GroovyFile && GroovyScriptTypeDetector.getScriptType((GroovyFile)file) != GroovyScriptTypeDetector.DEFAULT_TYPE) {
    return ThreeState.NO;
  }
  if (position.getParent() instanceof GrReferenceElement && psiElement().afterLeaf(psiElement().withText("(").withParent(GrForStatement.class)).accepts(position)) {
    return ThreeState.NO;
  }
  if (position.getParent() instanceof GrReferenceExpression) {
    final GrReferenceExpression ref=(GrReferenceExpression)position.getParent();
    final GrExpression qualifier=ref.getQualifierExpression();
    if (qualifier == null) {
      if (isPossibleClosureParameter(ref))       return ThreeState.NO;
      if (parameters.getOriginalFile().getUserData(GroovyShellAction.GROOVY_SHELL_FILE) == Boolean.TRUE) {
        return ThreeState.NO;
      }
      GrExpression runtimeQualifier=PsiImplUtil.getRuntimeQualifier(ref);
      if (runtimeQualifier != null && runtimeQualifier.getType() == null) {
        return ThreeState.NO;
      }
      return ThreeState.YES;
    }
    if (qualifier.getType() == null) {
      return ThreeState.NO;
    }
    return ThreeState.YES;
  }
  return ThreeState.UNSURE;
}
