{
  PsiClass aClass;
  boolean tempIsStatic=myIsConstant;
  PsiElement parent=local.getParent();
  while (true) {
    if (parent instanceof PsiClass && !(parent instanceof PsiAnonymousClass)) {
      aClass=(PsiClass)parent;
      break;
    }
    if (parent instanceof PsiFile && JspPsiUtil.isInJspFile(parent)) {
      String message=RefactoringBundle.message("error.not.supported.for.jsp",REFACTORING_NAME);
      CommonRefactoringUtil.showErrorHint(myProject,editor,message,REFACTORING_NAME,HelpID.LOCAL_TO_FIELD);
      return false;
    }
    if (parent instanceof PsiModifierListOwner && ((PsiModifierListOwner)parent).hasModifierProperty(PsiModifier.STATIC)) {
      tempIsStatic=true;
    }
    parent=parent.getParent();
  }
  final boolean isStatic=tempIsStatic;
  final PsiExpression[] occurences=CodeInsightUtil.findReferenceExpressions(RefactoringUtil.getVariableScope(local),local);
  if (editor != null) {
    RefactoringUtil.highlightAllOccurences(myProject,occurences,editor);
  }
  final BaseExpressionToFieldHandler.Settings settings=showRefactoringDialog(aClass,local,occurences,isStatic);
  if (settings == null)   return false;
  final PsiClass destinationClass=settings.getDestinationClass();
  boolean rebindNeeded=false;
  if (destinationClass != null) {
    aClass=destinationClass;
    rebindNeeded=true;
  }
  final PsiClass aaClass=aClass;
  final boolean rebindNeeded1=rebindNeeded;
  final Runnable runnable=new IntroduceFieldRunnable(rebindNeeded1,local,aaClass,settings,isStatic,occurences);
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,REFACTORING_NAME,null);
  return true;
}
