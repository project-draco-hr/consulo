{
  PsiElement declarationScope=parameter.getDeclarationScope();
  if (declarationScope instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)declarationScope;
    if (PsiUtil.hasErrorElementChild(method))     return null;
    if ((method.isConstructor() || method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)) && !method.hasModifierProperty(PsiModifier.NATIVE) && !HighlightMethodUtil.isSerializationRelatedMethod(method)&& !isMainMethod(method)) {
      if (!myRefCountHolder.isReferenced(parameter) && !isImplicitUsage(parameter)) {
        PsiIdentifier identifier=parameter.getNameIdentifier();
        String message=MessageFormat.format(PARAMETER_IS_NOT_USED,identifier.getText());
        HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
        QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedParameterFix(parameter),options,displayName);
        return highlightInfo;
      }
    }
  }
 else   if (declarationScope instanceof PsiForeachStatement) {
    if (!myRefCountHolder.isReferenced(parameter) && !isImplicitUsage(parameter)) {
      PsiIdentifier identifier=parameter.getNameIdentifier();
      String message=MessageFormat.format(PARAMETER_IS_NOT_USED,identifier.getText());
      final HighlightInfo unusedSymbolInfo=createUnusedSymbolInfo(identifier,message);
      QuickFixAction.registerQuickFixAction(unusedSymbolInfo,new EmptyIntentionAction(UnusedSymbolLocalInspection.DISPLAY_NAME,options),options,displayName);
      return unusedSymbolInfo;
    }
  }
  return null;
}
