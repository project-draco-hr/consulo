{
  PsiIdentifier identifier=variable.getNameIdentifier();
  if (identifier == null)   return null;
  if (!myRefCountHolder.isReferenced(variable) && !isImplicitUsage(variable)) {
    String message=MessageFormat.format(JavaErrorMessages.message("local.variable.is.never.used"),identifier.getText());
    HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
    QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedVariableFix(variable),getOptions(context),displayName);
    return highlightInfo;
  }
  boolean referenced=myRefCountHolder.isReferencedForRead(variable);
  if (!referenced && !isImplicitRead(variable)) {
    String message=MessageFormat.format(JavaErrorMessages.message("local.variable.is.not.used.for.reading"),identifier.getText());
    HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
    QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedVariableFix(variable),getOptions(context),displayName);
    return highlightInfo;
  }
  if (!variable.hasInitializer()) {
    referenced=myRefCountHolder.isReferencedForWrite(variable);
    if (!referenced && !isImplicitWrite(variable)) {
      String message=MessageFormat.format(JavaErrorMessages.message("local.variable.is.not.assigned"),identifier.getText());
      final HighlightInfo unusedSymbolInfo=createUnusedSymbolInfo(identifier,message);
      List<IntentionAction> options=getOptions(context);
      QuickFixAction.registerQuickFixAction(unusedSymbolInfo,new EmptyIntentionAction(UnusedSymbolLocalInspection.DISPLAY_NAME,options),options,displayName);
      return unusedSymbolInfo;
    }
  }
  return null;
}
