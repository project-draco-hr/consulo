{
  if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
    if (!myRefCountHolder.isReferenced(method)) {
      if (HighlightMethodUtil.isSerializationRelatedMethod(method) || isIntentionalPrivateConstructor(method) || isImplicitUsage(method)) {
        return null;
      }
      String pattern=method.isConstructor() ? JavaErrorMessages.message("private.constructor.is.not.used") : JavaErrorMessages.message("private.method.is.not.used");
      String symbolName=HighlightMessageUtil.getSymbolName(method,PsiSubstitutor.EMPTY);
      String message=MessageFormat.format(pattern,symbolName);
      PsiIdentifier identifier=method.getNameIdentifier();
      HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new SafeDeleteFix(method),options,displayName);
      return highlightInfo;
    }
  }
  return null;
}
