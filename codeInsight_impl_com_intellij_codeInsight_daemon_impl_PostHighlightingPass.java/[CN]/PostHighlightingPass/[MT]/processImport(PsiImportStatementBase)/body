{
  if (!InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(importStatement).isToolEnabled(HighlightDisplayKey.find(UnusedImportLocalInspection.SHORT_NAME)))   return null;
  if (importStatement instanceof JspxImportStatement && ((JspxImportStatement)importStatement).isForeignFileImport())   return null;
  if (PsiUtil.hasErrorElementChild(importStatement))   return null;
  boolean isRedundant=myRefCountHolder.isRedundant(importStatement);
  if (!isRedundant && !(importStatement instanceof PsiImportStaticStatement)) {
    String packageName=((PsiJavaFile)importStatement.getContainingFile()).getPackageName();
    PsiElement resolved=importStatement.getImportReference().resolve();
    if (resolved instanceof PsiPackage) {
      isRedundant=packageName.equals(((PsiPackage)resolved).getQualifiedName());
    }
 else     if (resolved instanceof PsiClass) {
      String qName=((PsiClass)resolved).getQualifiedName();
      if (qName != null) {
        String name=((PsiClass)resolved).getName();
        isRedundant=qName.equals(packageName + '.' + name);
      }
    }
  }
  if (isRedundant) {
    return registerRedundantImport(importStatement);
  }
  int entryIndex=myStyleManager.findEntryIndex(importStatement);
  if (entryIndex < myCurentEntryIndex) {
    myHasMissortedImports=true;
  }
  myCurentEntryIndex=entryIndex;
  return null;
}
