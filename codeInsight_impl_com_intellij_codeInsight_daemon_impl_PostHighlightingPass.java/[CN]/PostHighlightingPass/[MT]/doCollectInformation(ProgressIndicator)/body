{
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  myRefCountHolder=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap().getRefCountHolder(myFile);
  Runnable doCollectInfo=new Runnable(){
    public void run(){
      List<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
      final FileViewProvider viewProvider=myFile.getViewProvider();
      final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
      Set<PsiElement> elementSet=new THashSet<PsiElement>();
      for (      Language language : relevantLanguages) {
        PsiElement psiRoot=viewProvider.getPsi(language);
        if (!HighlightUtil.shouldHighlight(psiRoot))         continue;
        List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
        elementSet.addAll(elements);
      }
      collectHighlights(elementSet,highlights);
      boolean doubleCheckUsages=false;
      if (PsiUtil.isInJspFile(myFile)) {
        final JspFile jspFile=PsiUtil.getJspFile(myFile);
        if (jspFile != null) {
          doubleCheckUsages=JspSpiUtil.isIncludedOrIncludesSomething(jspFile);
        }
      }
      List<PsiNamedElement> unusedDcls=myRefCountHolder.getUnusedDcls();
      for (      PsiNamedElement unusedDcl : unusedDcls) {
        if (doubleCheckUsages) {
          if (ReferencesSearch.search(unusedDcl).findFirst() != null)           continue;
        }
        String dclType=StringUtil.capitalize(UsageViewUtil.getType(unusedDcl));
        if (dclType.length() == 0)         dclType=LangBundle.message("java.terms.symbol");
        String message=MessageFormat.format(JavaErrorMessages.message("symbol.is.never.used"),dclType,unusedDcl.getName());
        HighlightInfo highlightInfo=createUnusedSymbolInfo(unusedDcl.getNavigationElement(),message);
        highlights.add(highlightInfo);
      }
      Collection<PsiElement> duplicatedDcls=myRefCountHolder.getDuplicatedElements();
      for (      PsiElement dupe : duplicatedDcls) {
        HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,dupe,XmlErrorMessages.message("duplicate.id.reference"));
        highlights.add(highlightInfo);
      }
      myHighlights=highlights;
    }
  }
;
  myRefCountHolder.retrieveUnusedReferencesInfo(doCollectInfo,progress);
}
