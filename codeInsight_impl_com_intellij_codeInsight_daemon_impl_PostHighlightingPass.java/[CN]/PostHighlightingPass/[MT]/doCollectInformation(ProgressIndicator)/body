{
  List<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
  final FileViewProvider viewProvider=myFile.getViewProvider();
  final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
  Set<PsiElement> elementSet=new THashSet<PsiElement>();
  for (  Language language : relevantLanguages) {
    PsiElement psiRoot=viewProvider.getPsi(language);
    if (!HighlightUtil.shouldHighlight(psiRoot))     continue;
    List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
    elementSet.addAll(elements);
  }
  collectHighlights(elementSet,highlights);
  List<PsiNamedElement> unusedDcls=myRefCountHolder.getUnusedDcls();
  for (  PsiNamedElement unusedDcl : unusedDcls) {
    String dclType=UsageViewUtil.capitalize(UsageViewUtil.getType(unusedDcl));
    if (dclType == null || dclType.length() == 0)     dclType=LangBundle.message("java.terms.symbol");
    String message=MessageFormat.format(JavaErrorMessages.message("symbol.is.never.used"),dclType,unusedDcl.getName());
    HighlightInfo highlightInfo=createUnusedSymbolInfo(unusedDcl.getNavigationElement(),message);
    highlights.add(highlightInfo);
  }
  myHighlights=highlights;
}
