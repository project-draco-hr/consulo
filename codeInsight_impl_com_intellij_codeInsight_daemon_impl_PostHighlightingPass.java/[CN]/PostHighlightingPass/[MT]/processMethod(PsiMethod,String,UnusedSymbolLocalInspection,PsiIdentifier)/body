{
  if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
    final boolean isSetter=PropertyUtil.isSimplePropertySetter(method);
    final boolean isInjected=isSetter && isInjected(method,unusedSymbolInspection);
    if (!myRefCountHolder.isReferenced(method)) {
      if (isInjected || HighlightMethodUtil.isSerializationRelatedMethod(method) || isIntentionalPrivateConstructor(method)|| isImplicitUsage(method)) {
        return null;
      }
      String pattern=method.isConstructor() ? JavaErrorMessages.message("private.constructor.is.not.used") : JavaErrorMessages.message("private.method.is.not.used");
      String symbolName=HighlightMessageUtil.getSymbolName(method,PsiSubstitutor.EMPTY);
      String message=MessageFormat.format(pattern,symbolName);
      PsiIdentifier identifier=method.getNameIdentifier();
      final HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new SafeDeleteFix(method),getOptions(context),displayName);
      if (isSetter) {
        SpecialAnnotationsUtil.createAddToSpecialAnnotationFixes(method,new Processor<String>(){
          public boolean process(          final String annoName){
            QuickFixAction.registerQuickFixAction(highlightInfo,unusedSymbolInspection.createQuickFix(annoName,method));
            return true;
          }
        }
);
      }
      return highlightInfo;
    }
  }
  return null;
}
