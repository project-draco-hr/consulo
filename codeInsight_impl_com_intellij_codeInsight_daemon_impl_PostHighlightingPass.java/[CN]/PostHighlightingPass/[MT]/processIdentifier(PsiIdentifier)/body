{
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(identifier);
  if (!profile.isToolEnabled(HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME)))   return null;
  final UnusedSymbolLocalInspection unusedSymbolInspection=(UnusedSymbolLocalInspection)((LocalInspectionToolWrapper)profile.getInspectionTool(UnusedSymbolLocalInspection.SHORT_NAME)).getTool();
  if (InspectionManagerEx.inspectionResultSuppressed(identifier,unusedSymbolInspection.getID()))   return null;
  PsiElement parent=identifier.getParent();
  if (PsiUtil.hasErrorElementChild(parent))   return null;
  List<IntentionAction> options=IntentionManager.getInstance(myProject).getStandardIntentionOptions(HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME),identifier);
  String displayName=UnusedSymbolLocalInspection.DISPLAY_NAME;
  HighlightInfo info;
  if (parent instanceof PsiLocalVariable && unusedSymbolInspection.LOCAL_VARIABLE) {
    info=processLocalVariable((PsiLocalVariable)parent,options,displayName);
  }
 else   if (parent instanceof PsiField && unusedSymbolInspection.FIELD) {
    final PsiField psiField=(PsiField)parent;
    info=processField(psiField,options,displayName,unusedSymbolInspection);
  }
 else   if (parent instanceof PsiParameter && unusedSymbolInspection.PARAMETER) {
    info=processParameter((PsiParameter)parent,options,displayName);
  }
 else   if (parent instanceof PsiMethod && unusedSymbolInspection.METHOD) {
    info=processMethod((PsiMethod)parent,options,displayName);
  }
 else   if (parent instanceof PsiClass && identifier.equals(((PsiClass)parent).getNameIdentifier()) && unusedSymbolInspection.CLASS) {
    info=processClass((PsiClass)parent,options,displayName);
  }
 else {
    return null;
  }
  return info;
}
