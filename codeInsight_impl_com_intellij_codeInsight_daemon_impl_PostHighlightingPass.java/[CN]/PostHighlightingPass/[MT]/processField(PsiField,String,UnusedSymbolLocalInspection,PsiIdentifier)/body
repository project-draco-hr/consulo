{
  if (field.hasModifierProperty(PsiModifier.PRIVATE)) {
    final HighlightDisplayKey key=HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME);
    if (!myRefCountHolder.isReferenced(field) && !isImplicitUsage(field)) {
      if (HighlightUtil.isSerializationImplicitlyUsedField(field)) {
        return null;
      }
      String message=MessageFormat.format(JavaErrorMessages.message("private.field.is.not.used"),identifier.getText());
      HighlightInfo highlightInfo=suggestionsToMakeFieldUsed(field,key,displayName,identifier,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new CreateConstructorParameterFromFieldFix(field),key);
      return highlightInfo;
    }
    final boolean readReferenced=myRefCountHolder.isReferencedForRead(field);
    if (!readReferenced && !isImplicitRead(field)) {
      String message=MessageFormat.format(JavaErrorMessages.message("private.field.is.not.used.for.reading"),identifier.getText());
      return suggestionsToMakeFieldUsed(field,key,displayName,identifier,message);
    }
    if (!field.hasInitializer()) {
      final boolean isInjected=isInjected(field,unusedSymbolInspection);
      final boolean writeReferenced=myRefCountHolder.isReferencedForWrite(field);
      if (!writeReferenced && !isInjected && !isImplicitWrite(field)) {
        String message=MessageFormat.format(JavaErrorMessages.message("private.field.is.not.assigned"),identifier.getText());
        final HighlightInfo info=createUnusedSymbolInfo(identifier,message);
        QuickFixAction.registerQuickFixAction(info,new CreateGetterOrSetterFix(false,true,field),key);
        QuickFixAction.registerQuickFixAction(info,new CreateConstructorParameterFromFieldFix(field),key);
        SpecialAnnotationsUtil.createAddToSpecialAnnotationFixes(field,new Processor<String>(){
          public boolean process(          final String annoName){
            QuickFixAction.registerQuickFixAction(info,unusedSymbolInspection.createQuickFix(annoName,field));
            return true;
          }
        }
);
        return info;
      }
    }
  }
  return null;
}
