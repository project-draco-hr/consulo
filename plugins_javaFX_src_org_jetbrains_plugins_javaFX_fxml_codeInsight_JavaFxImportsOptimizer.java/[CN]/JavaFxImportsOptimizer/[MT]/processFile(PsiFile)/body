{
  VirtualFile vFile=file.getVirtualFile();
  if (vFile instanceof VirtualFileWindow)   vFile=((VirtualFileWindow)vFile).getDelegate();
  final Project project=file.getProject();
  if (vFile == null || !ProjectRootManager.getInstance(project).getFileIndex().isInSourceContent(vFile)) {
    return EmptyRunnable.INSTANCE;
  }
  final List<Pair<String,Boolean>> names=new ArrayList<Pair<String,Boolean>>();
  collectNamesToImport(names,(XmlFile)file);
  Collections.sort(names,new Comparator<Pair<String,Boolean>>(){
    @Override public int compare(    Pair<String,Boolean> o1,    Pair<String,Boolean> o2){
      return StringUtil.compare(o1.first,o2.first,true);
    }
  }
);
  final CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  final List<Pair<String,Boolean>> sortedNames=ImportHelper.sortItemsAccordingToSettings(names,settings);
  final HashSet<String> onDemand=new HashSet<String>();
  ImportHelper.collectOnDemandImports(sortedNames,onDemand,settings);
  final Set<String> imported=new HashSet<String>();
  final List<String> imports=new ArrayList<String>();
  for (  Pair<String,Boolean> pair : sortedNames) {
    final String qName=pair.first;
    final String packageName=StringUtil.getPackageName(qName);
    if (imported.contains(packageName) || imported.contains(qName)) {
      continue;
    }
    if (onDemand.contains(packageName)) {
      imported.add(packageName);
      imports.add("<?import " + packageName + ".*?>");
    }
 else {
      imported.add(qName);
      imports.add("<?import " + qName + "?>");
    }
  }
  final PsiFileFactory factory=PsiFileFactory.getInstance(file.getProject());
  final XmlFile dummyFile=(XmlFile)factory.createFileFromText("_Dummy_.fxml",StdFileTypes.XML,StringUtil.join(imports,"\n"));
  final XmlDocument document=dummyFile.getDocument();
  final XmlProlog newImportList=document.getProlog();
  if (newImportList == null)   return EmptyRunnable.getInstance();
  return new Runnable(){
    @Override public void run(){
      final XmlDocument xmlDocument=((XmlFile)file).getDocument();
      final XmlProlog prolog=xmlDocument.getProlog();
      if (prolog != null) {
        final Collection<XmlProcessingInstruction> instructions=PsiTreeUtil.findChildrenOfType(prolog,XmlProcessingInstruction.class);
        for (        final XmlProcessingInstruction instruction : instructions) {
          final ASTNode node=instruction.getNode();
          final ASTNode nameNode=node.findChildByType(XmlTokenType.XML_NAME);
          if (nameNode != null && nameNode.getText().equals("import")) {
            instruction.delete();
          }
        }
        prolog.add(newImportList);
      }
 else {
        document.addBefore(newImportList,document.getRootTag());
      }
    }
  }
;
}
