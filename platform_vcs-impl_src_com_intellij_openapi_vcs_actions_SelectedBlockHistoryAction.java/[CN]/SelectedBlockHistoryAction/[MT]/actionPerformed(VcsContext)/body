{
  try {
    final VcsSelection selection=VcsSelectionUtil.getSelection(context);
    VirtualFile file=FileDocumentManager.getInstance().getFile(selection.getDocument());
    final Project project=context.getProject();
    if (project == null)     return;
    final AbstractVcs activeVcs=ProjectLevelVcsManager.getInstance(project).getVcsFor(file);
    if (activeVcs == null)     return;
    final VcsHistoryProvider provider=activeVcs.getVcsBlockHistoryProvider();
    final int selectionStart=selection.getSelectionStartLineNumber();
    final int selectionEnd=selection.getSelectionEndLineNumber();
    final VcsException[] preloadException=new VcsException[1];
    final CachedRevisionsContents cachedRevisionsContents=new CachedRevisionsContents(project,file);
    new VcsHistoryProviderBackgroundableProxy(activeVcs,provider,activeVcs.getDiffProvider()).createSessionFor(activeVcs.getKeyInstanceMethod(),new FilePathImpl(file),new Consumer<VcsHistorySession>(){
      public void consume(      VcsHistorySession session){
        if (preloadException[0] != null) {
          reportError(preloadException[0]);
        }
        if (session == null)         return;
        final VcsHistoryDialog vcsHistoryDialog=new VcsHistoryDialog(project,context.getSelectedFiles()[0],provider,session,activeVcs,Math.min(selectionStart,selectionEnd),Math.max(selectionStart,selectionEnd),selection.getDialogTitle(),cachedRevisionsContents);
        vcsHistoryDialog.show();
      }
    }
,VcsBackgroundableActions.HISTORY_FOR_SELECTION,false,new Consumer<VcsHistorySession>(){
      @Override public void consume(      VcsHistorySession vcsHistorySession){
        if (vcsHistorySession == null)         return;
        final List<VcsFileRevision> revisionList=vcsHistorySession.getRevisionList();
        cachedRevisionsContents.setRevisions(revisionList);
        if (VcsConfiguration.getInstance(project).SHOW_ONLY_CHANGED_IN_SELECTION_DIFF) {
          try {
            cachedRevisionsContents.loadContentsFor(revisionList.toArray(new VcsFileRevision[revisionList.size()]));
          }
 catch (          VcsException e) {
            preloadException[0]=e;
          }
        }
      }
    }
);
  }
 catch (  Exception exception) {
    reportError(exception);
  }
}
