{
  if (myKids == null) {
    List<Configurable> kids=new ArrayList<Configurable>();
    CompilerConfigurationImpl compilerConfiguration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
    final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,false,false,false,true);
    final ExcludedEntriesConfigurable excludes=new ExcludedEntriesConfigurable(myProject,descriptor,compilerConfiguration.getExcludedEntriesConfiguration()){
      public void apply(){
        super.apply();
        FileStatusManager.getInstance(myProject).fileStatusesChanged();
      }
    }
;
    kids.add(createExcludesWrapper(excludes,myProject));
    ArrayList<Configurable> additional=new ArrayList<Configurable>();
    final CompilerSettingsFactory[] factories=Extensions.getExtensions(CompilerSettingsFactory.EP_NAME,myProject);
    if (factories.length > 0) {
      for (      CompilerSettingsFactory factory : factories) {
        final Configurable configurable;
        try {
          configurable=factory.create(myProject);
        }
 catch (        Exception e) {
          LOG.error(e);
          continue;
        }
        additional.add(configurable);
      }
      Collections.sort(additional,new Comparator<Configurable>(){
        public int compare(        final Configurable o1,        final Configurable o2){
          return Comparing.compare(o1.getDisplayName(),o2.getDisplayName());
        }
      }
);
    }
    additional.add(0,new RmicConfigurable(RmicConfiguration.getSettings(myProject)));
    additional.add(0,new AnnotationProcessorsConfigurable(myProject));
    additional.add(0,new JavaCompilersTab(myProject,compilerConfiguration.getRegisteredJavaCompilers(),compilerConfiguration.getDefaultCompiler()));
    kids.addAll(additional);
    myKids=kids.toArray(new Configurable[kids.size()]);
  }
  return myKids;
}
