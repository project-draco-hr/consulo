{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  final CodeStyleManagerEx codeStyleManager=(CodeStyleManagerEx)CodeStyleManager.getInstance(context.project);
  final VariableKind variableKind=codeStyleManager.getVariableKind(var);
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,null,null,var.getType());
  final String[] suggestedNames=suggestedNameInfo.names;
  LookupItemUtil.addLookupItems(set,suggestedNames,context.getPrefix());
  if (set.isEmpty()) {
    suggestedNameInfo=new SuggestedNameInfo(CompletionUtil.getOverlappedNameVersions(context.getPrefix(),suggestedNames,"")){
      public void nameChoosen(      String name){
      }
    }
;
    LookupItemUtil.addLookupItems(set,suggestedNameInfo.names,context.getPrefix());
  }
  PsiElement parent=PsiTreeUtil.getParentOfType(var,PsiCodeBlock.class);
  if (parent == null)   parent=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
  LookupItemUtil.addLookupItems(set,CompletionUtil.getUnresolvedReferences(parent,false),context.getPrefix());
  LookupItemUtil.addLookupItems(set,StatisticsManager.getInstance().getNameSuggestions(var.getType(),StatisticsManager.getContext(var),context.getPrefix()),context.getPrefix());
  return new NamePreferencePolicy(suggestedNameInfo);
}
