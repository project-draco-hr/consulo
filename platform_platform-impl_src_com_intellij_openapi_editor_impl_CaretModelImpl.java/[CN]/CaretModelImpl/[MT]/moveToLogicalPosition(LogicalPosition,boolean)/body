{
  assertIsDispatchThread();
  myDesiredX=-1;
  validateCallContext();
  int column=pos.column;
  int line=pos.line;
  int softWrapLinesBefore=pos.softWrapLinesBeforeCurrentLogicalLine;
  int softWrapLinesCurrent=pos.softWrapLinesOnCurrentLogicalLine;
  int softWrapColumns=pos.softWrapColumnDiff;
  Document doc=myEditor.getDocument();
  if (column < 0) {
    column=0;
    softWrapColumns=0;
  }
  if (line < 0) {
    line=0;
    softWrapLinesBefore=0;
    softWrapLinesCurrent=0;
  }
  int lineCount=doc.getLineCount();
  if (lineCount == 0) {
    line=0;
  }
 else   if (line > lineCount - 1) {
    line=lineCount - 1;
    softWrapLinesBefore=0;
    softWrapLinesCurrent=0;
  }
  EditorSettings editorSettings=myEditor.getSettings();
  if (!editorSettings.isVirtualSpace() && line < lineCount) {
    int lineEndOffset=doc.getLineEndOffset(line);
    int lineEndColumnNumber=myEditor.offsetToLogicalPosition(lineEndOffset).column;
    if (column > lineEndColumnNumber) {
      column=lineEndColumnNumber;
      if (softWrapColumns != 0) {
        softWrapColumns-=column - lineEndColumnNumber;
      }
    }
  }
  ((FoldingModelImpl)myEditor.getFoldingModel()).flushCaretPosition();
  VerticalInfo oldInfo=myCaretInfo;
  LogicalPosition oldCaretPosition=myLogicalCaret;
  LogicalPosition logicalPositionToUse;
  if (pos.visualPositionAware) {
    logicalPositionToUse=new LogicalPosition(line,column,softWrapLinesBefore,softWrapLinesCurrent,softWrapColumns,pos.foldedLines,pos.foldingColumnDiff);
  }
 else {
    logicalPositionToUse=new LogicalPosition(line,column);
  }
  setCurrentLogicalCaret(logicalPositionToUse);
  final int offset=myEditor.logicalPositionToOffset(myLogicalCaret);
  FoldRegion collapsedAt=myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset);
  if (collapsedAt != null && offset > collapsedAt.getStartOffset()) {
    Runnable runnable=new Runnable(){
      public void run(){
        FoldRegion[] allCollapsedAt=((FoldingModelImpl)myEditor.getFoldingModel()).fetchCollapsedAt(offset);
        for (        FoldRegion foldRange : allCollapsedAt) {
          foldRange.setExpanded(true);
        }
      }
    }
;
    myEditor.getFoldingModel().runBatchFoldingOperation(runnable);
  }
  myEditor.setLastColumnNumber(myLogicalCaret.column);
  myVisibleCaret=myEditor.logicalToVisualPosition(myLogicalCaret);
  myOffset=myEditor.logicalPositionToOffset(myLogicalCaret);
  LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());
  myVisualLineStart=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line,0)));
  myVisualLineEnd=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line + 1,0)));
  myEditor.updateCaretCursor();
  requestRepaint(oldInfo);
  if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(myEditor)) {
    int lineToUse=myVisibleCaret.line - 1;
    if (lineToUse >= 0) {
      moveToVisualPosition(new VisualPosition(lineToUse,EditorUtil.getLastVisualLineColumnNumber(myEditor,lineToUse)));
      return;
    }
  }
  if (!oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) {
    CaretEvent event=new CaretEvent(myEditor,oldCaretPosition,myLogicalCaret);
    for (    CaretListener listener : myCaretListeners) {
      listener.caretPositionChanged(event);
    }
  }
}
