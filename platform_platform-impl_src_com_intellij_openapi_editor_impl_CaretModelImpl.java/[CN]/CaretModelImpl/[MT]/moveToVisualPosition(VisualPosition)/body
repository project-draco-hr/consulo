{
  assertIsDispatchThread();
  validateCallContext();
  myDesiredX=-1;
  int column=pos.column;
  int line=pos.line;
  if (column < 0)   column=0;
  if (line < 0)   line=0;
  int lastLine=myEditor.getVisibleLineCount() - 1;
  if (lastLine <= 0) {
    lastLine=0;
  }
  if (line > lastLine) {
    line=lastLine;
  }
  EditorSettings editorSettings=myEditor.getSettings();
  if (!editorSettings.isVirtualSpace() && line <= lastLine) {
    int lineEndColumn=EditorUtil.getLastVisualLineColumnNumber(myEditor,line);
    if (column > lineEndColumn) {
      column=lineEndColumn;
    }
    if (column < 0 && line > 0) {
      line--;
      column=EditorUtil.getLastVisualLineColumnNumber(myEditor,line);
    }
  }
  myVisibleCaret=new VisualPosition(line,column);
  VerticalInfo oldInfo=myCaretInfo;
  LogicalPosition oldPosition=myLogicalCaret;
  setCurrentLogicalCaret(myEditor.visualToLogicalPosition(myVisibleCaret));
  myOffset=myEditor.logicalPositionToOffset(myLogicalCaret);
  LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());
  myVisualLineStart=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line,0)));
  myVisualLineEnd=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line + 1,0)));
  ((FoldingModelImpl)myEditor.getFoldingModel()).flushCaretPosition();
  myEditor.setLastColumnNumber(myVisibleCaret.column);
  myEditor.updateCaretCursor();
  requestRepaint(oldInfo);
  if (oldPosition.column != myLogicalCaret.column || oldPosition.line != myLogicalCaret.line) {
    CaretEvent event=new CaretEvent(myEditor,oldPosition,myLogicalCaret);
    for (    CaretListener listener : myCaretListeners) {
      listener.caretPositionChanged(event);
    }
  }
}
