{
  assertIsDispatchThread();
  if (debugBuffer != null) {
    debugBuffer.append(String.format("Start moveToLogicalPosition(). Locate before soft wrap: %b, position: %s%n",locateBeforeSoftWrap,pos));
  }
  myDesiredX=-1;
  validateCallContext();
  int column=pos.column;
  int line=pos.line;
  int softWrapLinesBefore=pos.softWrapLinesBeforeCurrentLogicalLine;
  int softWrapLinesCurrent=pos.softWrapLinesOnCurrentLogicalLine;
  int softWrapColumns=pos.softWrapColumnDiff;
  Document doc=myEditor.getDocument();
  if (column < 0) {
    if (debugBuffer != null) {
      debugBuffer.append("Resetting target logical column to zero as it is negative (" + column + ")\n");
    }
    column=0;
    softWrapColumns=0;
  }
  if (line < 0) {
    if (debugBuffer != null) {
      debugBuffer.append("Resetting target logical line to zero as it is negative (" + line + ")\n");
    }
    line=0;
    softWrapLinesBefore=0;
    softWrapLinesCurrent=0;
  }
  int lineCount=doc.getLineCount();
  if (lineCount == 0) {
    if (debugBuffer != null) {
      debugBuffer.append("Resetting target logical line to zero as the document is empty\n");
    }
    line=0;
  }
 else   if (line > lineCount - 1) {
    if (debugBuffer != null) {
      debugBuffer.append(String.format("Resetting target logical line (%d) to %d as it is greater than total document lines number%n",line,lineCount - 1));
    }
    line=lineCount - 1;
    softWrapLinesBefore=0;
    softWrapLinesCurrent=0;
  }
  EditorSettings editorSettings=myEditor.getSettings();
  if (!editorSettings.isVirtualSpace() && line < lineCount && !myEditor.getSelectionModel().hasBlockSelection()) {
    int lineEndOffset=doc.getLineEndOffset(line);
    final LogicalPosition endLinePosition=myEditor.offsetToLogicalPosition(lineEndOffset);
    int lineEndColumnNumber=endLinePosition.column;
    if (column > lineEndColumnNumber) {
      int oldColumn=column;
      column=lineEndColumnNumber;
      if (softWrapColumns != 0) {
        softWrapColumns-=column - lineEndColumnNumber;
      }
      if (debugBuffer != null) {
        debugBuffer.append(String.format("Resetting target logical column (%d) to %d because caret is not allowed to be located after line end (offset: %d, " + "logical position: %s). Current soft wrap columns value: %d%n",oldColumn,lineEndColumnNumber,lineEndOffset,endLinePosition,softWrapColumns));
      }
    }
  }
  ((FoldingModelImpl)myEditor.getFoldingModel()).flushCaretPosition();
  VerticalInfo oldInfo=myCaretInfo;
  LogicalPosition oldCaretPosition=myLogicalCaret;
  LogicalPosition logicalPositionToUse;
  if (pos.visualPositionAware) {
    logicalPositionToUse=new LogicalPosition(line,column,softWrapLinesBefore,softWrapLinesCurrent,softWrapColumns,pos.foldedLines,pos.foldingColumnDiff);
  }
 else {
    logicalPositionToUse=new LogicalPosition(line,column);
  }
  setCurrentLogicalCaret(logicalPositionToUse);
  final int offset=myEditor.logicalPositionToOffset(myLogicalCaret);
  if (debugBuffer != null) {
    debugBuffer.append(String.format("Resulting logical position to use: %s. It's mapped to offset %d%n",myLogicalCaret,offset));
  }
  FoldRegion collapsedAt=myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset);
  if (collapsedAt != null && offset > collapsedAt.getStartOffset()) {
    if (debugBuffer != null) {
      debugBuffer.append("Scheduling expansion of fold region ").append(collapsedAt).append("\n");
    }
    Runnable runnable=new Runnable(){
      @Override public void run(){
        FoldRegion[] allCollapsedAt=((FoldingModelImpl)myEditor.getFoldingModel()).fetchCollapsedAt(offset);
        for (        FoldRegion foldRange : allCollapsedAt) {
          foldRange.setExpanded(true);
        }
      }
    }
;
    myEditor.getFoldingModel().runBatchFoldingOperation(runnable,false);
  }
  myEditor.setLastColumnNumber(myLogicalCaret.column);
  myVisibleCaret=myEditor.logicalToVisualPosition(myLogicalCaret);
  myOffset=myEditor.logicalPositionToOffset(myLogicalCaret);
  if (debugBuffer != null) {
    debugBuffer.append(String.format("Storing offset %d (mapped from logical position %s)%n",myOffset,myLogicalCaret));
  }
  LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());
  myVisualLineStart=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line,0)));
  myVisualLineEnd=myEditor.logicalPositionToOffset(myEditor.visualToLogicalPosition(new VisualPosition(myVisibleCaret.line + 1,0)));
  myEditor.updateCaretCursor();
  requestRepaint(oldInfo);
  if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(myEditor)) {
    int lineToUse=myVisibleCaret.line - 1;
    if (lineToUse >= 0) {
      final VisualPosition visualPosition=new VisualPosition(lineToUse,EditorUtil.getLastVisualLineColumnNumber(myEditor,lineToUse));
      if (debugBuffer != null) {
        debugBuffer.append(String.format("Adjusting caret position by moving it before soft wrap. Moving to visual position %s%n",visualPosition));
      }
      moveToVisualPosition(visualPosition);
      return;
    }
  }
  if (!oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) {
    CaretEvent event=new CaretEvent(myEditor,oldCaretPosition,myLogicalCaret);
    for (    CaretListener listener : myCaretListeners) {
      listener.caretPositionChanged(event);
    }
  }
}
