{
  assertIsDispatchThread();
  SelectionModel selectionModel=myEditor.getSelectionModel();
  int selectionStart=selectionModel.getLeadSelectionOffset();
  LogicalPosition blockSelectionStart=selectionModel.hasBlockSelection() ? selectionModel.getBlockStart() : getLogicalPosition();
  EditorSettings editorSettings=myEditor.getSettings();
  VisualPosition visualCaret=getVisualPosition();
  int newColumnNumber=visualCaret.column + columnShift;
  int newLineNumber=visualCaret.line + lineShift;
  Document document=myEditor.getDocument();
  if (!editorSettings.isVirtualSpace() && columnShift == 0) {
    newColumnNumber=myEditor.getLastColumnNumber();
  }
 else   if (!editorSettings.isVirtualSpace() && lineShift == 0 && columnShift == 1) {
    int lastLine=document.getLineCount() - 1;
    if (lastLine < 0)     lastLine=0;
    if (EditorModificationUtil.calcAfterLineEnd(myEditor) >= 0 && newLineNumber < myEditor.logicalToVisualPosition(new LogicalPosition(lastLine,0)).line) {
      newColumnNumber=0;
      newLineNumber++;
    }
  }
 else   if (!editorSettings.isVirtualSpace() && lineShift == 0 && columnShift == -1) {
    if (newColumnNumber < 0 && newLineNumber > 0) {
      newLineNumber--;
      newColumnNumber=EditorUtil.getLastVisualLineColumnNumber(myEditor,newLineNumber);
    }
  }
  if (newColumnNumber < 0)   newColumnNumber=0;
  boolean selectToDocumentStart=false;
  if (newLineNumber < 0) {
    selectToDocumentStart=true;
    newLineNumber=0;
  }
  VisualPosition pos=new VisualPosition(newLineNumber,newColumnNumber);
  int lastColumnNumber=newColumnNumber;
  if (!editorSettings.isCaretInsideTabs() && !myEditor.getSoftWrapModel().isInsideSoftWrap(pos)) {
    LogicalPosition log=myEditor.visualToLogicalPosition(new VisualPosition(newLineNumber,newColumnNumber));
    int offset=myEditor.logicalPositionToOffset(log);
    if (offset >= document.getTextLength()) {
      int lastOffsetColumn=myEditor.offsetToVisualPosition(document.getTextLength()).column;
      newColumnNumber=Math.max(lastOffsetColumn,newColumnNumber);
    }
    CharSequence text=document.getCharsSequence();
    if (offset >= 0 && offset < document.getTextLength()) {
      if (text.charAt(offset) == '\t' && (columnShift <= 0 || offset == myOffset)) {
        if (columnShift <= 0) {
          newColumnNumber=myEditor.offsetToVisualPosition(offset).column;
        }
 else {
          SoftWrap softWrap=myEditor.getSoftWrapModel().getSoftWrap(offset + 1);
          if (softWrap == null) {
            newColumnNumber=myEditor.offsetToVisualPosition(offset + 1).column;
          }
 else {
            newColumnNumber=EditorUtil.getLastVisualLineColumnNumber(myEditor,newLineNumber);
          }
        }
      }
    }
  }
  pos=new VisualPosition(newLineNumber,newColumnNumber);
  if (columnShift != 0 && lineShift == 0 && myEditor.getSoftWrapModel().isInsideSoftWrap(pos)) {
    LogicalPosition logical=myEditor.visualToLogicalPosition(pos);
    int softWrapOffset=myEditor.logicalPositionToOffset(logical);
    if (columnShift >= 0) {
      moveToOffset(softWrapOffset);
    }
 else {
      int line=myEditor.offsetToVisualPosition(softWrapOffset - 1).line;
      moveToVisualPosition(new VisualPosition(line,EditorUtil.getLastVisualLineColumnNumber(myEditor,line)));
    }
  }
 else {
    moveToVisualPosition(pos);
    if (!editorSettings.isVirtualSpace() && columnShift == 0) {
      myEditor.setLastColumnNumber(lastColumnNumber);
    }
  }
  if (withSelection) {
    if (blockSelection) {
      selectionModel.setBlockSelection(blockSelectionStart,getLogicalPosition());
    }
 else {
      if (selectToDocumentStart) {
        selectionModel.setSelection(selectionStart,0);
      }
 else       if (pos.line >= myEditor.getVisibleLineCount()) {
        if (selectionStart < document.getTextLength()) {
          selectionModel.setSelection(selectionStart,document.getTextLength());
        }
      }
 else {
        selectionModel.setSelection(selectionStart,getOffset());
      }
    }
  }
 else {
    selectionModel.removeSelection();
  }
  if (scrollToCaret) {
    myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
}
