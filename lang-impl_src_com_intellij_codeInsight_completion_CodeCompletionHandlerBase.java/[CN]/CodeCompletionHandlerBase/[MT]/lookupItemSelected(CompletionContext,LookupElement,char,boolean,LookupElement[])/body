{
  final InsertHandler handler;
  if (item.getInsertHandler() == null) {
    handler=new InsertHandler(){
      public void handleInsert(      final InsertionContext context,      final LookupElement item){
        final int idEndOffset=context.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET);
        if (idEndOffset != context.getSelectionEndOffset() && CompletionUtil.isOverwrite(item,completionChar)) {
          context.getEditor().getDocument().deleteString(context.getSelectionEndOffset(),idEndOffset);
        }
        final TailType type=SimpleInsertHandler.DEFAULT_COMPLETION_CHAR_HANDLER.handleCompletionChar(context.getEditor(),item,completionChar);
        type.processTail(context.getEditor(),context.getEditor().getCaretModel().getOffset());
      }
    }
;
  }
 else {
    handler=item.getInsertHandler();
  }
  final InsertionContext context1=new InsertionContext(context.getOffsetMap(),completionChar,signatuireSelected,items,context.file,context.editor);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      PsiDocumentManager.getInstance(context.project).commitAllDocuments();
      handler.handleInsert(context1,item);
    }
  }
);
  final Runnable runnable=context1.getLaterRunnable();
  if (runnable != null) {
    final Runnable runnable1=new Runnable(){
      public void run(){
        final Project project=context1.getProject();
        if (project.isDisposed())         return;
        runnable.run();
      }
    }
;
    if (!ApplicationManager.getApplication().isUnitTestMode()) {
      ApplicationManager.getApplication().invokeLater(runnable1);
    }
 else {
      runnable1.run();
    }
  }
}
