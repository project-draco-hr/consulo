{
  super(null);
  getPicoContainer().registerComponentInstance(Application.class,this);
  CommonBundle.assertKeyIsFound=isUnitTestMode;
  if ((isInternal || isUnitTestMode) && !Comparing.equal("off",System.getProperty("idea.disposer.debug"))) {
    Disposer.setDebugMode(true);
  }
  myStartTime=System.currentTimeMillis();
  myName=appName;
  ApplicationManagerEx.setApplication(this);
  PluginsFacade.INSTANCE=new PluginsFacade(){
    public IdeaPluginDescriptor getPlugin(    PluginId id){
      return PluginManager.getPlugin(id);
    }
    public IdeaPluginDescriptor[] getPlugins(){
      return PluginManager.getPlugins();
    }
  }
;
  if (!isUnitTestMode && !isHeadless) {
    Toolkit.getDefaultToolkit().getSystemEventQueue().push(IdeEventQueue.getInstance());
    if (Patches.SUN_BUG_ID_6209673) {
      RepaintManager.setCurrentManager(new IdeRepaintManager());
    }
    IconLoader.activate();
  }
  myIsInternal=isInternal;
  myTestModeFlag=isUnitTestMode;
  myHeadlessMode=isHeadless;
  myCommandLineMode=isCommandLine;
  loadApplicationComponents();
  if (myTestModeFlag) {
    registerShutdownHook();
  }
  if (!isUnitTestMode && !isHeadless) {
    Disposer.register(this,Disposer.newDisposable(),"ui");
  }
  StartupUtil.addExternalInstanceListener(new Consumer<List<String>>(){
    @Override public void consume(    final List<String> args){
      invokeLater(new Runnable(){
        @Override public void run(){
          final Project project=CommandLineProcessor.processExternalCommandLine(args);
          final IdeFrame frame;
          if (project != null) {
            frame=WindowManager.getInstance().getIdeFrame(project);
          }
 else {
            frame=WindowManager.getInstance().getAllFrames()[0];
          }
          ((IdeFrameImpl)frame).requestFocus();
        }
      }
);
    }
  }
);
}
