{
  super(null);
  ApplicationManagerEx.setApplication(this,myLastDisposable);
  getPicoContainer().registerComponentInstance(Application.class,this);
  CommonBundle.assertKeyIsFound=isUnitTestMode;
  AWTExceptionHandler.register();
  if ((isInternal || isUnitTestMode) && !Comparing.equal("off",System.getProperty("idea.disposer.debug"))) {
    Disposer.setDebugMode(true);
  }
  myStartTime=System.currentTimeMillis();
  mySplash=splash;
  myName=appName;
  myIsInternal=isInternal;
  myTestModeFlag=isUnitTestMode;
  myHeadlessMode=isHeadless;
  myCommandLineMode=isCommandLine;
  myDoNotSave=myTestModeFlag || myHeadlessMode;
  loadApplicationComponents();
  if (myTestModeFlag) {
    registerShutdownHook();
  }
  if (!isUnitTestMode && !isHeadless) {
    Disposer.register(this,Disposer.newDisposable(),"ui");
    StartupUtil.addExternalInstanceListener(new Consumer<List<String>>(){
      @Override public void consume(      final List<String> args){
        invokeLater(new Runnable(){
          @Override public void run(){
            final Project project=CommandLineProcessor.processExternalCommandLine(args);
            final IdeFrame frame;
            if (project != null) {
              frame=WindowManager.getInstance().getIdeFrame(project);
            }
 else {
              frame=WindowManager.getInstance().getAllFrames()[0];
            }
            ((IdeFrameImpl)frame).requestFocus();
          }
        }
);
      }
    }
);
  }
  final String s=System.getProperty("jb.restart.code");
  if (s != null) {
    try {
      myRestartCode=Integer.parseInt(s);
    }
 catch (    NumberFormatException ignore) {
    }
  }
  registerFont("/fonts/Inconsolata.ttf");
}
