{
  Project[] openProjects=ProjectManagerEx.getInstanceEx().getOpenProjects();
  final boolean[] canClose={true};
  for (  final Project project : openProjects) {
    CommandProcessor commandProcessor=CommandProcessor.getInstance();
    commandProcessor.executeCommand(project,new Runnable(){
      public void run(){
        FileDocumentManager.getInstance().saveAllDocuments();
        canClose[0]=ProjectUtil.closeProject(project);
      }
    }
,ApplicationBundle.message("command.exit"),null);
    if (!canClose[0])     return;
  }
  myDisposeInProgress=true;
  Disposer.dispose(this);
  if (isInternal() && !Disposer.isEmpty()) {
    try {
      Class.forName("com.intellij.util.ProfilingUtil").getDeclaredMethod("forceCaptureMemorySnapshot").invoke(null);
    }
 catch (    Exception ignored) {
    }
  }
  Disposer.assertIsEmpty();
}
