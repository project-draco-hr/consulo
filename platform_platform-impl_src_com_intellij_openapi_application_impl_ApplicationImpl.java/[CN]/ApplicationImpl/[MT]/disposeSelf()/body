{
  Project[] openProjects=ProjectManagerEx.getInstanceEx().getOpenProjects();
  final boolean[] canClose={true};
  for (  final Project project : openProjects) {
    CommandProcessor commandProcessor=CommandProcessor.getInstance();
    commandProcessor.executeCommand(project,new Runnable(){
      public void run(){
        FileDocumentManager.getInstance().saveAllDocuments();
        canClose[0]=ProjectUtil.closeProject(project);
      }
    }
,ApplicationBundle.message("command.exit"),null);
    if (!canClose[0])     return;
  }
  myDisposeInProgress=true;
  Disposer.dispose(this);
  if (isInternal() && !Disposer.isEmpty()) {
    int ret=JOptionPane.showConfirmDialog(null,"Memory leaks detected. Create memory snapshot?","Memory leaks",JOptionPane.OK_CANCEL_OPTION);
    if (ret == JOptionPane.OK_OPTION) {
      try {
        System.out.println("Creating snapshot...");
        Class.forName("com.intellij.util.ProfilingUtil").getDeclaredMethod("forceCaptureMemorySnapshot").invoke(null);
        System.out.println("Snapshot created");
      }
 catch (      Exception ignored) {
      }
    }
  }
  Disposer.assertIsEmpty();
}
