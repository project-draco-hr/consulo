{
  int offset=editor.getCaretModel().getOffset();
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  PsiElement element=file.findElementAt(offset);
  while (true) {
    if (element == null || element instanceof PsiFile) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.constructor"));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.REPLACE_CONSTRUCTOR_WITH_FACTORY,project);
      return;
    }
    if (element instanceof PsiReferenceExpression) {
      final PsiElement psiElement=((PsiReferenceExpression)element).resolve();
      if (psiElement instanceof PsiMethod && ((PsiMethod)psiElement).isConstructor()) {
        invoke(project,new PsiElement[]{psiElement},dataContext);
        return;
      }
    }
 else     if (element instanceof PsiConstructorCall) {
      final PsiConstructorCall constructorCall=(PsiConstructorCall)element;
      final PsiMethod method=constructorCall.resolveConstructor();
      if (method != null) {
        invoke(project,new PsiElement[]{method},dataContext);
        return;
      }
    }
    if (element instanceof PsiClass && !(element instanceof PsiAnonymousClass) && ((PsiClass)element).getConstructors().length == 0) {
      invoke(project,new PsiElement[]{element},dataContext);
      return;
    }
    if (element instanceof PsiMethod && ((PsiMethod)element).isConstructor()) {
      invoke(project,new PsiElement[]{element},dataContext);
      return;
    }
    element=element.getParent();
  }
}
