{
  startElement(expression);
  try {
    PsiExpression lExpr=expression.getLExpression();
    PsiExpression rExpr=expression.getRExpression();
    if (rExpr == null) {
      pushUnknown();
      return;
    }
    lExpr.accept(this);
    IElementType op=expression.getOperationSign().getTokenType();
    PsiType type=expression.getType();
    boolean shouldUnboxArgs=TypeConversionUtil.isPrimitiveAndNotNull(type);
    boolean isBoolean=type == PsiType.BOOLEAN;
    if (op == JavaTokenType.EQ) {
      rExpr.accept(this);
      if (shouldUnboxArgs) {
        generateUnboxingInstructionFor(rExpr);
      }
    }
 else     if (op == JavaTokenType.ANDEQ) {
      if (isBoolean) {
        generateAndExpression(lExpr,rExpr,shouldUnboxArgs);
      }
 else {
        generateDefaultBinop(lExpr,rExpr,shouldUnboxArgs);
      }
    }
 else     if (op == JavaTokenType.OREQ) {
      if (isBoolean) {
        generateOrExpression(lExpr,rExpr,shouldUnboxArgs);
      }
 else {
        generateDefaultBinop(lExpr,rExpr,shouldUnboxArgs);
      }
    }
 else     if (op == JavaTokenType.XOREQ) {
      if (isBoolean) {
        generateXorExpression(expression,lExpr,rExpr,shouldUnboxArgs);
      }
 else {
        generateDefaultBinop(lExpr,rExpr,shouldUnboxArgs);
      }
    }
 else {
      generateDefaultBinop(lExpr,rExpr,shouldUnboxArgs);
    }
    addInstruction(new AssignInstruction(rExpr));
  }
  finally {
    finishElement(expression);
  }
}
