{
  startElement(statement);
  final ArrayList<PsiElement> declaredVariables=new ArrayList<PsiElement>();
  PsiStatement initialization=statement.getInitialization();
  if (initialization != null) {
    initialization.accept(this);
    initialization.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      @Override public void visitDeclarationStatement(      PsiDeclarationStatement statement){
        PsiElement[] declaredElements=statement.getDeclaredElements();
        for (        PsiElement element : declaredElements) {
          if (element instanceof PsiVariable) {
            declaredVariables.add(element);
          }
        }
      }
    }
);
  }
  PsiExpression condition=statement.getCondition();
  if (condition != null) {
    condition.accept(this);
    generateBoxingUnboxingInstructionFor(condition,PsiType.BOOLEAN);
  }
 else {
    addInstruction(myInstructionFactory.createPushInstruction(myFactory.getConstFactory().getTrue()));
  }
  addInstruction(myInstructionFactory.createConditionalGotoInstruction(getEndOffset(statement),true,condition));
  PsiStatement body=statement.getBody();
  if (body != null) {
    body.accept(this);
  }
  PsiStatement update=statement.getUpdate();
  if (update != null) {
    update.accept(this);
  }
  int offset=initialization != null ? getEndOffset(initialization) : getStartOffset(statement);
  addInstruction(myInstructionFactory.createGotoInstruction(offset));
  finishElement(statement);
  for (  PsiElement declaredVariable : declaredVariables) {
    PsiVariable psiVariable=(PsiVariable)declaredVariable;
    myCurrentFlow.removeVariable(psiVariable);
  }
}
