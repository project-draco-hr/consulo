{
  startElement(statement);
  PsiCodeBlock finallyBlock=statement.getFinallyBlock();
  if (finallyBlock != null) {
    myCatchStack.push(new CatchDescriptor(finallyBlock));
  }
  int catchesPushCount=0;
  PsiCatchSection[] sections=statement.getCatchSections();
  for (int i=sections.length - 1; i >= 0; i--) {
    PsiCatchSection section=sections[i];
    PsiCodeBlock catchBlock=section.getCatchBlock();
    PsiParameter parameter=section.getParameter();
    if (parameter != null && catchBlock != null && parameter.getType() instanceof PsiClassType && (!myHonorRuntimeExceptions || !ExceptionUtil.isUncheckedException((PsiClassType)parameter.getType()))) {
      myCatchStack.push(new CatchDescriptor(parameter,catchBlock));
      catchesPushCount++;
    }
 else {
      throw new CantAnalyzeException();
    }
  }
  int endOffset=finallyBlock == null ? getEndOffset(statement) : getStartOffset(finallyBlock) - 2;
  PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock != null) {
    tryBlock.accept(this);
  }
  for (int i=0; i < catchesPushCount; i++)   myCatchStack.pop();
  addInstruction(myInstructionFactory.createGotoInstruction(endOffset));
  for (  PsiCatchSection section : sections) {
    section.accept(this);
    addInstruction(myInstructionFactory.createGotoInstruction(endOffset));
  }
  if (finallyBlock != null) {
    myCatchStack.pop();
    addInstruction(myInstructionFactory.createGosubInstruction(getStartOffset(finallyBlock)));
    addInstruction(myInstructionFactory.createGotoInstruction(getEndOffset(statement)));
    finallyBlock.accept(this);
    addInstruction(myInstructionFactory.createReturnFromSubInstruction());
  }
  finishElement(statement);
}
