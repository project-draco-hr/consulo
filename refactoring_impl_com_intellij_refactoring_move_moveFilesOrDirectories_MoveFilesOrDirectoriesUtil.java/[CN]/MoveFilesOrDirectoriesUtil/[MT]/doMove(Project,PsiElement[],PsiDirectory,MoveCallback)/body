{
  for (  PsiElement element : elements) {
    if (!(element instanceof PsiFile) && !(element instanceof PsiDirectory)) {
      throw new IllegalArgumentException("unexpected element type: " + element);
    }
  }
  final PsiDirectory initialTargetDirectory=getInitialTargetDirectory(initialTargetElement,elements);
  final MoveFilesOrDirectoriesDialog.Callback doRun=new MoveFilesOrDirectoriesDialog.Callback(){
    public void run(    final MoveFilesOrDirectoriesDialog moveDialog){
      final PsiDirectory targetDirectory=moveDialog.getTargetDirectory();
      LOG.assertTrue(targetDirectory != null);
      PsiManager manager=PsiManager.getInstance(project);
      try {
        for (        PsiElement psiElement : elements) {
          manager.checkMove(psiElement,targetDirectory);
        }
        new MoveFilesOrDirectoriesProcessor(project,elements,targetDirectory,false,false,moveCallback,new Runnable(){
          public void run(){
            moveDialog.close(DialogWrapper.CANCEL_EXIT_CODE);
          }
        }
).run();
      }
 catch (      IncorrectOperationException e) {
        String helpId=HelpID.getMoveHelpID(elements[0]);
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),helpId,project);
      }
    }
  }
;
  final MoveFilesOrDirectoriesDialog moveDialog=new MoveFilesOrDirectoriesDialog(project,doRun);
  boolean searchInComments=RefactoringSettings.getInstance().MOVE_SEARCH_IN_COMMENTS;
  boolean searchForTextOccurences=RefactoringSettings.getInstance().MOVE_SEARCH_FOR_TEXT;
  moveDialog.setData(elements,initialTargetDirectory,searchInComments,searchForTextOccurences,HelpID.getMoveHelpID(elements[0]));
  moveDialog.show();
}
