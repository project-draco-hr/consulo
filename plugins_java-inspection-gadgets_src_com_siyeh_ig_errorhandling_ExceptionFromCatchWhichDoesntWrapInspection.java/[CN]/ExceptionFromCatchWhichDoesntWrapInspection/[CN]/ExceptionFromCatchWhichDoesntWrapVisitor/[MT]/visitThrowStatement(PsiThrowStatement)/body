{
  super.visitThrowStatement(statement);
  final PsiCatchSection catchSection=PsiTreeUtil.getParentOfType(statement,PsiCatchSection.class,true,PsiClass.class);
  if (catchSection == null) {
    return;
  }
  final PsiParameter parameter=catchSection.getParameter();
  if (parameter == null) {
    return;
  }
  @NonNls final String parameterName=parameter.getName();
  if ("ignore".equals(parameterName) || "ignored".equals(parameterName)) {
    return;
  }
  final PsiExpression exception=statement.getException();
  if (exception == null) {
    return;
  }
  if (ignoreCantWrap) {
    final PsiType thrownType=exception.getType();
    if (thrownType instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)thrownType;
      final PsiClass exceptionClass=classType.resolve();
      if (exceptionClass != null) {
        final PsiMethod[] constructors=exceptionClass.getConstructors();
        final PsiClassType throwableType=TypeUtils.getType(CommonClassNames.JAVA_LANG_THROWABLE,statement);
        boolean canWrap=false;
        outer:         for (        PsiMethod constructor : constructors) {
          final PsiParameterList parameterList=constructor.getParameterList();
          final PsiParameter[] parameters=parameterList.getParameters();
          for (          PsiParameter constructorParameter : parameters) {
            final PsiType type=constructorParameter.getType();
            if (throwableType.equals(type)) {
              canWrap=true;
              break outer;
            }
          }
        }
        if (!canWrap) {
          return;
        }
      }
    }
  }
  final ReferenceFinder visitor=new ReferenceFinder(parameter);
  exception.accept(visitor);
  if (visitor.usesParameter()) {
    return;
  }
  registerStatementError(statement);
}
