{
  PsiType type=null;
  List<PsiAnnotation> annotations=new SmartList<PsiAnnotation>();
  for (ASTNode child=getFirstChildNode(); child != null; child=child.getTreeNext()) {
    IElementType elementType=child.getElementType();
    if (elementType == JavaElementType.ANNOTATION) {
      annotations.add((PsiAnnotation)child.getPsi());
      continue;
    }
    if (elementType == JavaElementType.JAVA_CODE_REFERENCE) {
      LOG.assertTrue(type == null);
      type=new PsiClassReferenceType((PsiJavaCodeReferenceElement)SourceTreeToPsiMap.treeElementToPsi(child),null);
    }
 else     if (ElementType.PRIMITIVE_TYPE_BIT_SET.contains(elementType)) {
      LOG.assertTrue(type == null);
      PsiAnnotation[] annos=annotations.toArray(new PsiAnnotation[annotations.size()]);
      type=JavaPsiFacade.getInstance(getProject()).getElementFactory().createPrimitiveType(child.getText(),annos);
    }
 else     if (elementType == JavaTokenType.LBRACKET) {
      LOG.assertTrue(type != null);
      PsiAnnotation[] annos=annotations.toArray(new PsiAnnotation[annotations.size()]);
      type=type.createArrayType(annos);
    }
 else     if (elementType == JavaElementType.ANONYMOUS_CLASS) {
      PsiAnnotation[] annos=annotations.toArray(new PsiAnnotation[annotations.size()]);
      PsiElementFactory factory=JavaPsiFacade.getInstance(getProject()).getElementFactory();
      PsiClass aClass=(PsiClass)SourceTreeToPsiMap.treeElementToPsi(child);
      PsiSubstitutor substitutor=aClass instanceof PsiTypeParameter ? PsiSubstitutor.EMPTY : factory.createRawSubstitutor(aClass);
      type=factory.createType(aClass,substitutor,PsiUtil.getLanguageLevel(aClass),annos);
    }
  }
  return type;
}
