{
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  PsiElement element=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  if (element instanceof PsiLocalVariable) {
    final PsiReference psiReference=TargetElementUtil.findReference(editor);
    final PsiReferenceExpression refExpr=psiReference instanceof PsiReferenceExpression ? ((PsiReferenceExpression)psiReference) : null;
    InlineLocalHandler.invoke(project,editor,(PsiLocalVariable)element,refExpr);
  }
 else   if (element instanceof PsiMethod) {
    InlineMethodHandler.invoke(project,editor,(PsiMethod)element);
  }
 else   if (element instanceof PsiField) {
    InlineConstantFieldHandler.invoke(project,editor,(PsiField)element);
  }
 else   if (element instanceof PsiClass && ApplicationManagerEx.getApplicationEx().isInternal()) {
    InlineToAnonymousClassHandler.invoke(project,editor,(PsiClass)element);
  }
 else   if (PsiUtil.isInJspFile(file)) {
    InlineIncludeFileHandler.invoke(project,editor,PsiUtil.getJspFile(file));
  }
 else {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.method.or.local.name"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
  }
}
