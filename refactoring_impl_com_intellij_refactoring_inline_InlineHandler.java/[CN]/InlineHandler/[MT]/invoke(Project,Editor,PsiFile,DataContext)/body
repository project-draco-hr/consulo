{
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  PsiElement element=DataKeys.PSI_ELEMENT.getData(dataContext);
  if (element != null) {
    final com.intellij.lang.refactoring.InlineHandler languageSpecific=element.getLanguage().getRefactoringSupportProvider().getInlineHandler();
    if (languageSpecific != null) {
      GenericInlineHandler.invoke(element,editor,languageSpecific);
      return;
    }
  }
  if (element instanceof PsiLocalVariable) {
    final PsiReference psiReference=TargetElementUtil.findReference(editor);
    final PsiReferenceExpression refExpr=psiReference instanceof PsiReferenceExpression ? ((PsiReferenceExpression)psiReference) : null;
    InlineLocalHandler.invoke(project,editor,(PsiLocalVariable)element,refExpr);
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() && !InlineMethodHandler.isChainingConstructor(method)) {
      InlineToAnonymousClassHandler.invoke(project,editor,method.getContainingClass());
    }
 else {
      InlineMethodHandler.invoke(project,editor,method);
    }
  }
 else   if (element instanceof PsiField) {
    InlineConstantFieldHandler.invoke(project,editor,(PsiField)element);
  }
 else   if (element instanceof PsiClass) {
    InlineToAnonymousClassHandler.invoke(project,editor,(PsiClass)element);
  }
 else   if (PsiUtil.isInJspFile(file)) {
    InlineIncludeFileHandler.invoke(project,editor,PsiUtil.getJspFile(file));
  }
 else {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.method.or.local.name"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
  }
}
