{
  PsiElement parent=modifierList.getParent();
  if (parent instanceof PsiClass && GroovyCommonClassNames.GROOVY_TRANSFORM_COMPILE_DYNAMIC.equals(((PsiClass)parent).getQualifiedName())) {
    HashMap<String,PsiNameValuePair> params=ContainerUtil.newHashMap();
    annotations.put(GroovyCommonClassNames.GROOVY_TRANSFORM_COMPILE_STATIC,params);
    GrAnnotation annotation=GroovyPsiElementFactory.getInstance(modifierList.getProject()).createAnnotationFromText("@CompileStatic(TypeCheckingMode.SKIP)");
    params.put("value",annotation.getParameterList().getAttributes()[0]);
    return;
  }
  PsiAnnotation[] rawAnnotations=modifierList instanceof GrModifierList ? ((GrModifierList)modifierList).getRawAnnotations() : modifierList.getAnnotations();
  for (  PsiAnnotation annotation : rawAnnotations) {
    final String qname=annotation.getQualifiedName();
    if (qname == null || qname.equals(GroovyCommonClassNames.GROOVY_TRANSFORM_ANNOTATION_COLLECTOR))     continue;
    final PsiNameValuePair[] attributes=annotation.getParameterList().getAttributes();
    for (    PsiNameValuePair pair : attributes) {
      Map<String,PsiNameValuePair> map=annotations.get(qname);
      if (map == null) {
        map=ContainerUtil.newHashMap();
        annotations.put(qname,map);
      }
      map.put(pair.getName() != null ? pair.getName() : "value",pair);
    }
    if (attributes.length == 0 && !annotations.containsKey(qname)) {
      annotations.put(qname,ContainerUtil.<String,PsiNameValuePair>newHashMap());
    }
  }
}
