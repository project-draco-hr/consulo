{
  ErrorInfo.clear(rootComponent);
  AndroidLintExternalAnnotator annotator=new AndroidLintExternalAnnotator();
  State state=annotator.collectionInformation(xmlFile);
  if (state != null) {
    state=annotator.doAnnotate(state);
    for (    ProblemData problemData : state.getProblems()) {
      Issue issue=problemData.getIssue();
      String message=problemData.getMessage();
      TextRange range=problemData.getTextRange();
      if (range.getStartOffset() == range.getEndOffset()) {
        continue;
      }
      Pair<AndroidLintInspectionBase,HighlightDisplayLevel> pair=AndroidLintUtil.getHighlighLevelAndInspection(issue,xmlFile);
      if (pair == null) {
        continue;
      }
      AndroidLintInspectionBase inspection=pair.getFirst();
      if (inspection != null) {
        HighlightDisplayKey key=HighlightDisplayKey.find(inspection.getShortName());
        if (key != null) {
          PsiElement startElement=xmlFile.findElementAt(range.getStartOffset());
          PsiElement endElement=xmlFile.findElementAt(range.getEndOffset() - 1);
          if (startElement != null && endElement != null && !inspection.isSuppressedFor(startElement)) {
            RadComponent component=findComponent(rootComponent,startElement);
            ErrorInfo errorInfo=new ErrorInfo(message,null,pair.getSecond());
            ErrorInfo.add(component,errorInfo);
            List<QuickFix> designerFixes=errorInfo.getQuickFixes();
            for (            AndroidLintQuickFix fix : inspection.public_getQuickFixes(message)) {
              if (fix.isApplicable(startElement,endElement,false)) {
                designerFixes.add(new QuickFix(fix.getName(),null){
                  @Override public void run() throws Exception {
                    System.out.println("00000000");
                  }
                }
);
              }
            }
            for (            IntentionAction intention : inspection.getIntentions(startElement,endElement)) {
              designerFixes.add(new QuickFix(intention.getText(),null){
                @Override public void run() throws Exception {
                  System.out.println("1111111");
                }
              }
);
            }
            designerFixes.add(new QuickFix("Disable inspection",null){
              @Override public void run() throws Exception {
                System.out.println("22222");
              }
            }
);
            designerFixes.add(new QuickFix("Edit '" + inspection.getDisplayName() + "' inspection settings",null){
              @Override public void run() throws Exception {
                System.out.println("3333333");
              }
            }
);
            SuppressIntentionAction[] suppressActions=inspection.getSuppressActions(startElement);
            if (suppressActions != null) {
              for (              SuppressIntentionAction action : suppressActions) {
                if (action.isAvailable(xmlFile.getProject(),null,startElement)) {
                  designerFixes.add(new QuickFix("Suppress: " + action.getText(),action.getIcon(0)){
                    @Override public void run() throws Exception {
                      System.out.println("4444444");
                    }
                  }
);
                }
              }
            }
          }
        }
      }
    }
  }
}
