{
  if (!(element instanceof GrMethodCallExpression)) {
    return false;
  }
  if (ErrorUtil.containsError(element)) {
    return false;
  }
  final GrMethodCallExpression callExpression=(GrMethodCallExpression)element;
  final GrArgumentList argList=callExpression.getArgumentList();
  if (argList == null) {
    return false;
  }
  final GrExpression[] arguments=argList.getExpressionArguments();
  final GrExpression invokedExpression=callExpression.getInvokedExpression();
  if (!(invokedExpression instanceof GrReferenceExpression)) {
    return false;
  }
  final GrReferenceExpression referenceExpression=(GrReferenceExpression)invokedExpression;
  final GrExpression qualifier=referenceExpression.getQualifierExpression();
  if (qualifier == null) {
    return false;
  }
  final IElementType referenceType=referenceExpression.getDotTokenType();
  if (!GroovyTokenTypes.mDOT.equals(referenceType)) {
    return false;
  }
  final String methodName=referenceExpression.getName();
  if ("getAt".equals(methodName)) {
    return arguments.length == 1;
  }
  if ("get".equals(methodName)) {
    final PsiType qualifierType=qualifier.getType();
    if (!isMap(qualifierType)) {
      return false;
    }
    return arguments.length == 1;
  }
 else   if ("setAt".equals(methodName)) {
    return arguments.length == 2;
  }
 else   if ("put".equals(methodName)) {
    final PsiType qualifierType=qualifier.getType();
    if (!isMap(qualifierType)) {
      return false;
    }
    return arguments.length == 2;
  }
  return false;
}
