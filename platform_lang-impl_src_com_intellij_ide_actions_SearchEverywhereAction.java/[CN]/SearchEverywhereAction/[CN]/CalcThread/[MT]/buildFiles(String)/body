{
  int filesCounter=0;
  List<MatchResult> matches=collectResults(pattern,myFiles,myFileModel);
  final List<VirtualFile> files=new ArrayList<VirtualFile>();
  final int maxFiles=8;
  for (  MatchResult o : matches) {
    if (filesCounter > maxFiles)     break;
    Object[] objects=myFileModel.getElementsByName(o.elementName,false,pattern,myProgressIndicator);
    for (    Object object : objects) {
      if (!myListModel.contains(object)) {
        if (object instanceof PsiFile) {
          object=((PsiFile)object).getVirtualFile();
        }
        if (object instanceof VirtualFile && !myAlreadyAddedFiles.contains((VirtualFile)object) && !((VirtualFile)object).isDirectory()) {
          files.add((VirtualFile)object);
          myAlreadyAddedFiles.add((VirtualFile)object);
          filesCounter++;
          if (filesCounter > maxFiles)           break;
        }
      }
    }
  }
  myProgressIndicator.checkCanceled();
  if (files.size() > 0) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        if (!myProgressIndicator.isCanceled()) {
          myTitleIndexes.files=myListModel.size();
          for (          Object file : files) {
            myListModel.addElement(file);
          }
          myMoreFilesIndex=files.size() >= maxFiles ? myListModel.size() - 1 : -1;
        }
      }
    }
);
  }
}
