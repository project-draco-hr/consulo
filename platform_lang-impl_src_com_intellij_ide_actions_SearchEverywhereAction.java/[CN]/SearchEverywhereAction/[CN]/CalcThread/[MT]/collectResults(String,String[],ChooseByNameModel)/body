{
  if (names == null)   return Collections.emptyList();
  final String trimmedPattern=pattern.trim();
  if (!pattern.startsWith("*") && pattern.length() > 1) {
    pattern="*" + pattern;
  }
  final ArrayList<MatchResult> results=new ArrayList<MatchResult>();
  MinusculeMatcher matcher=new MinusculeMatcher(pattern,NameUtil.MatchingCaseSensitivity.NONE){
    @Override public boolean matches(    @NotNull String name){
      if (!(model instanceof GotoActionModel) && trimmedPattern.indexOf(' ') > 0 && name.trim().indexOf(' ') < 0) {
        return false;
      }
      return super.matches(name);
    }
  }
;
  MatchResult result;
  for (  String name : names) {
    result=null;
    if (model instanceof CustomMatcherModel) {
      try {
        result=((CustomMatcherModel)model).matches(name,pattern) ? new MatchResult(name,0,true) : null;
        if (result != null && model == myActionModel) {
          ((CustomMatcherModel)model).matches(name,pattern);
        }
      }
 catch (      Exception ignore) {
      }
    }
 else {
      result=matcher.matches(name) ? new MatchResult(name,matcher.matchingDegree(name),matcher.isStartMatch(name)) : null;
    }
    if (result != null) {
      results.add(result);
    }
  }
  Collections.sort(results,new Comparator<MatchResult>(){
    @Override public int compare(    MatchResult o1,    MatchResult o2){
      return o1.compareTo(o2);
    }
  }
);
  return results;
}
