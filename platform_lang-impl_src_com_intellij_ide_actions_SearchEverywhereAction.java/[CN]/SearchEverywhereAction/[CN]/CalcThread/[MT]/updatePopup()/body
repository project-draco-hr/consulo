{
  myProgressIndicator.checkCanceled();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      myProgressIndicator.checkCanceled();
      myListModel.update();
      myList.revalidate();
      myList.repaint();
      myRenderer.recalculateWidth();
      if (myPopup == null || !myPopup.isVisible()) {
        final ActionCallback callback=ListDelegationUtil.installKeyboardDelegation(getField().getTextEditor(),myList);
        final ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(new JBScrollPane(myList),null);
        myPopup=builder.setRequestFocus(false).setCancelKeyEnabled(false).setCancelCallback(new Computable<Boolean>(){
          @Override public Boolean compute(){
            return myBalloon == null || myBalloon.isDisposed() || !getField().getTextEditor().hasFocus();
          }
        }
).setCancelOnMouseOutCallback(new MouseChecker(){
          @Override public boolean check(          MouseEvent event){
            final Component c=event.getComponent();
            return myContentPanel != c && getField().getTextEditor() != c;
          }
        }
).createPopup();
        Disposer.register(myPopup,new Disposable(){
          @Override public void dispose(){
            callback.setDone();
            if (myBalloon != null) {
              myBalloon.cancel();
              myBalloon=null;
              initTooltip();
              mySearchLabel.setIcon(AllIcons.Actions.FindPlain);
            }
            myFileModel=null;
            myClassModel=null;
            myActionModel=null;
            myActions=null;
            myFiles=null;
            myClasses=null;
            myConfigurables.clear();
          }
        }
);
        myPopup.show(new RelativePoint(getField().getParent(),new Point(0,getField().getParent().getHeight())));
        ActionManager.getInstance().addAnActionListener(new AnActionListener.Adapter(){
          @Override public void beforeActionPerformed(          AnAction action,          DataContext dataContext,          AnActionEvent event){
            if (action instanceof TextComponentEditorAction) {
              return;
            }
            myPopup.cancel();
          }
        }
,myPopup);
      }
 else {
        myList.revalidate();
        myList.repaint();
      }
      ListScrollingUtil.ensureSelectionExists(myList);
      if (myList.getModel().getSize() > 0) {
        updatePopupBounds();
      }
    }
  }
);
}
