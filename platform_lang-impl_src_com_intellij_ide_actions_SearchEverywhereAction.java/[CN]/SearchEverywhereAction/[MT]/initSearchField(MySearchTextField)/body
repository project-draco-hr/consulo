{
  final JTextField editor=search.getTextEditor();
  editor.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      final String pattern=editor.getText();
      final int len=pattern.trim().length();
      myAlarm.cancelAllRequests();
      myAlarm.addRequest(new Runnable(){
        @Override public void run(){
          if (editor.hasFocus()) {
            rebuildList(pattern);
          }
        }
      }
,len == 1 ? 400 : len == 2 ? 300 : len == 3 ? 250 : 30);
    }
  }
);
  editor.addFocusListener(new FocusAdapter(){
    boolean skip=false;
    @Override public void focusGained(    FocusEvent e){
      if (skip) {
        skip=false;
        return;
      }
      search.setText("");
      search.getTextEditor().setForeground(UIUtil.getLabelForeground());
      myTitleIndexes=new TitleIndexes();
      editor.setColumns(SEARCH_FIELD_COLUMNS);
      myFocusComponent=e.getOppositeComponent();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          final JComponent parent=(JComponent)editor.getParent();
          parent.revalidate();
          parent.repaint();
        }
      }
);
      if (myPopup != null && myPopup.isVisible()) {
        myPopup.cancel();
        myPopup=null;
      }
      rebuildList("");
    }
    @Override public void focusLost(    FocusEvent e){
      if (myPopup instanceof AbstractPopup && myPopup.isVisible() && ((myList == e.getOppositeComponent()) || ((AbstractPopup)myPopup).getPopupWindow() == e.getOppositeComponent())) {
        return;
      }
      if (myNonProjectCheckBox == e.getOppositeComponent()) {
        skip=true;
        editor.requestFocus();
        return;
      }
      onFocusLost();
    }
  }
);
}
