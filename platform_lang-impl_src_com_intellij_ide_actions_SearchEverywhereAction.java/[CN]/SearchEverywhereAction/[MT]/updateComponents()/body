{
  myRenderer=new MyListRenderer();
  myList=new JBList(){
    @Override public Dimension getPreferredSize(){
      final Dimension size=super.getPreferredSize();
      return new Dimension(Math.max(myBalloon.getSize().width,Math.min(size.width - 2,POPUP_MAX_WIDTH)),myList.isEmpty() ? 60 : size.height);
    }
    @Override public void clearSelection(){
    }
    @Override public Object getSelectedValue(){
      try {
        return super.getSelectedValue();
      }
 catch (      Exception e) {
        return null;
      }
    }
  }
;
  myList.setCellRenderer(myRenderer);
  myList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      e.consume();
      final int i=myList.locationToIndex(e.getPoint());
      if (i != -1) {
        mySkipFocusGain=true;
        getField().requestFocus();
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            myList.setSelectedIndex(i);
            doNavigate(i);
          }
        }
);
      }
    }
  }
);
  myNonProjectCheckBox=new JCheckBox();
  myNonProjectCheckBox.setOpaque(false);
  myNonProjectCheckBox.setAlignmentX(1.0f);
  myNonProjectCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (showAll.get() != myNonProjectCheckBox.isSelected()) {
        showAll.set(!showAll.get());
        final JTextField editor=UIUtil.findComponentOfType(myBalloon.getContent(),JTextField.class);
        if (editor != null) {
          final String pattern=editor.getText();
          myAlarm.cancelAllRequests();
          myAlarm.addRequest(new Runnable(){
            @Override public void run(){
              if (editor.hasFocus()) {
                rebuildList(pattern);
              }
            }
          }
,30);
        }
      }
    }
  }
);
}
