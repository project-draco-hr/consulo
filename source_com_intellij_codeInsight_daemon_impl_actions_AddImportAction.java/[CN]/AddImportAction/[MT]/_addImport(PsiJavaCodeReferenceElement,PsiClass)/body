{
  if (ref.isValid() && targetClass.isValid()) {
    int caretOffset=myEditor.getCaretModel().getOffset();
    RangeMarker caretMarker=(myEditor.getDocument()).createRangeMarker(caretOffset,caretOffset);
    int colByOffset=myEditor.offsetToLogicalPosition(caretOffset).column;
    int col=myEditor.getCaretModel().getLogicalPosition().column;
    int virtualSpace=col != colByOffset ? col - colByOffset : 0;
    int line=myEditor.getCaretModel().getLogicalPosition().line;
    LogicalPosition pos=new LogicalPosition(line,0);
    myEditor.getCaretModel().moveToLogicalPosition(pos);
    try {
      if (ref instanceof PsiImportStaticReferenceElement) {
        ((PsiImportStaticReferenceElement)ref).bindToTargetClass(targetClass);
      }
 else {
        ref.bindToElement(targetClass);
      }
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
    line=myEditor.getCaretModel().getLogicalPosition().line;
    LogicalPosition pos1=new LogicalPosition(line,col);
    myEditor.getCaretModel().moveToLogicalPosition(pos1);
    if (caretMarker.isValid()) {
      LogicalPosition pos2=myEditor.offsetToLogicalPosition(caretMarker.getStartOffset());
      int newCol=pos2.column + virtualSpace;
      myEditor.getCaretModel().moveToLogicalPosition(new LogicalPosition(pos2.line,newCol));
      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
      if (daemonCodeAnalyzer != null) {
        daemonCodeAnalyzer.updateVisibleHighlighters(myEditor);
      }
    }
  }
);
}
