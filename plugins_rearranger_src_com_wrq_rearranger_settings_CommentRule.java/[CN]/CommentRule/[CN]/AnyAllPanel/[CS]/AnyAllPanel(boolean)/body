{
  super(new GridBagLayout());
  final Constraints constraints=new Constraints(GridBagConstraints.NORTHWEST);
  constraints.lastRow();
  constraints.fill=GridBagConstraints.BOTH;
  anyAllCheckbox=new JCheckBox("items match");
  anyAllCheckbox.setSelected((emitCondition & (preceding ? 1 : 2)) > 0);
  anyAllComboBox=new JComboBox(new String[]{"any","all"});
  anyAllComboBox.setSelectedIndex(preceding ? (myAllPrecedingRules ? 1 : 0) : (myAllSubsequentRules ? 1 : 0));
  Dimension d=anyAllComboBox.getPreferredSize();
  d.width+=3;
  anyAllComboBox.setPreferredSize(d);
  anyAllLabel=new JLabel();
  anyAllLabel.setText("of the subsequent");
  d=anyAllLabel.getPreferredSize();
  anyAllLabel.setText(preceding ? "of the preceding" : "of the subsequent");
  anyAllLabel.setMinimumSize(d);
  anyAllLabel.setPreferredSize(d);
  final NumberFormat integerInstance=NumberFormat.getIntegerInstance();
  integerInstance.setMaximumIntegerDigits(2);
  integerInstance.setMinimumIntegerDigits(1);
  anyAllPrevNumber=new JFormattedTextField(integerInstance);
  anyAllPrevNumber.setValue(new Integer("88"));
  d=anyAllPrevNumber.getPreferredSize();
  d.width+=3;
  anyAllPrevNumber.setPreferredSize(d);
  anyAllPrevNumber.setValue(preceding ? myNPrecedingRulesToMatch : myNSubsequentRulesToMatch);
  anyAllPrevNumber.setFocusLostBehavior(JFormattedTextField.COMMIT_OR_REVERT);
  rulesLabel=new JLabel("rules");
  constraints.insets=new Insets(0,10,0,0);
  add(anyAllCheckbox,constraints.nextCol());
  constraints.insets=new Insets(0,0,0,0);
  add(anyAllComboBox,constraints.nextCol());
  constraints.insets=new Insets(0,4,0,0);
  add(anyAllLabel,constraints.nextCol());
  constraints.insets=new Insets(0,4,0,0);
  add(anyAllPrevNumber,constraints.nextCol());
  add(rulesLabel,constraints.weightedLastCol());
  anyAllComboBox.setEnabled(anyAllCheckbox.isSelected());
  anyAllLabel.setEnabled(anyAllCheckbox.isSelected());
  anyAllPrevNumber.setEnabled(anyAllCheckbox.isSelected());
  rulesLabel.setEnabled(anyAllCheckbox.isSelected());
  anyAllCheckbox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (anyAllCheckbox.isSelected()) {
        emitCondition|=(preceding ? 1 : 2);
      }
 else {
        emitCondition&=(preceding ? ~1 : ~2);
      }
      anyAllComboBox.setEnabled(anyAllCheckbox.isSelected());
      anyAllLabel.setEnabled(anyAllCheckbox.isSelected());
      anyAllPrevNumber.setEnabled(anyAllCheckbox.isSelected());
      rulesLabel.setEnabled(anyAllCheckbox.isSelected());
    }
  }
);
  anyAllComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int s=anyAllComboBox.getSelectedIndex();
      if (preceding) {
        myAllPrecedingRules=(s == 1);
      }
 else {
        myAllSubsequentRules=(s == 1);
      }
    }
  }
);
  anyAllPrevNumber.addPropertyChangeListener("value",new PropertyChangeListener(){
    public void propertyChange(    final PropertyChangeEvent evt){
      int n=((Number)anyAllPrevNumber.getValue()).intValue();
      if (n <= 0) {
        n=1;
        anyAllPrevNumber.setValue(n);
      }
      if (preceding) {
        myNPrecedingRulesToMatch=n;
      }
 else {
        myNSubsequentRulesToMatch=n;
      }
    }
  }
);
}
