{
  final JPanel commentPanel=new JPanel(new GridBagLayout());
  final Border border=BorderFactory.createEtchedBorder();
  commentPanel.setBorder(border);
  final Constraints constraints=new Constraints(GridBagConstraints.NORTHWEST);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.insets=new Insets(4,4,4,0);
  final JLabel emitLabel=new JLabel("Emit comment:");
  final JRadioButton alwaysButton=new JRadioButton("Always"), whenButton=new JRadioButton("When");
  final ButtonGroup group=new ButtonGroup();
  group.add(alwaysButton);
  group.add(whenButton);
  if (emitCondition == 0) {
    alwaysButton.setSelected(true);
  }
 else {
    whenButton.setSelected(true);
  }
  commentPanel.add(emitLabel,constraints.weightedLastCol());
  constraints.newRow();
  constraints.insets=new Insets(0,14,0,0);
  commentPanel.add(alwaysButton,constraints.weightedLastCol());
  constraints.newRow();
  commentPanel.add(whenButton,constraints.weightedLastCol());
  constraints.insets=new Insets(0,24,0,4);
  constraints.newRow();
  final JPanel anyAllPreviousPanel=new AnyAllPanel(true);
  commentPanel.add(anyAllPreviousPanel,constraints.weightedLastCol());
  constraints.newRow();
  constraints.insets=new Insets(0,24,10,4);
  final JPanel anyAllSubsequentPanel=new AnyAllPanel(false);
  commentPanel.add(anyAllSubsequentPanel,constraints.weightedLastCol());
  anyAllPreviousPanel.setEnabled(emitCondition > 0);
  anyAllSubsequentPanel.setEnabled(emitCondition > 0);
  final JLabel commentLabel=new JLabel("Comment separator text:");
  constraints.insets=new Insets(4,4,4,4);
  constraints.newRow();
  commentPanel.add(commentLabel,constraints.weightedLastCol());
  final JTextArea commentArea=new JTextArea(4,40);
  commentArea.setText(getCommentText());
  constraints.weightedNewRow();
  final JScrollPane scrollPane=new JScrollPane(commentArea);
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  commentPanel.add(scrollPane,constraints.weightedLastCol());
  constraints.newRow();
  final JPanel cfsPanel=commentFillString.getCommentFillStringPanel();
  final JLabel fillStringLabel=new JLabel("Fill string:");
  fillStringLabel.setToolTipText("Occurrences of %FS% in the comment separator text will be replaced with equal \n" + "amounts of the fill string, replicated to make the comment end at the specified column");
  commentPanel.add(cfsPanel,constraints.weightedLastCol());
  alwaysButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (alwaysButton.isSelected()) {
        emitCondition=EMIT_ALWAYS;
        anyAllPreviousPanel.setEnabled(false);
        anyAllSubsequentPanel.setEnabled(false);
      }
    }
  }
);
  whenButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (whenButton.isSelected()) {
        anyAllPreviousPanel.setEnabled(true);
        anyAllSubsequentPanel.setEnabled(true);
      }
    }
  }
);
  commentArea.getDocument().addDocumentListener(new DocumentListener(){
    public void changedUpdate(    final DocumentEvent e){
      setCommentText(commentArea.getText());
    }
    public void insertUpdate(    final DocumentEvent e){
      setCommentText(commentArea.getText());
    }
    public void removeUpdate(    final DocumentEvent e){
      setCommentText(commentArea.getText());
    }
  }
);
  return commentPanel;
}
