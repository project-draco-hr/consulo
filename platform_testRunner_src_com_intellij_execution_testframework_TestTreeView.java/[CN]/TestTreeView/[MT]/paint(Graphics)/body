{
  super.paint(g);
  final TestFrameworkRunningModel model=myModel;
  if (model == null)   return;
  final TestConsoleProperties properties=model.getProperties();
  if (TestConsoleProperties.SHOW_INLINE_STATISTICS.value(properties)) {
    Rectangle visibleRect=getVisibleRect();
    Rectangle clip=g.getClipBounds();
    final int visibleRowCount=TreeUtil.getVisibleRowCountForFixedRowHeight(this);
    final int firstRow=getClosestRowForLocation(0,visibleRect.y);
    for (int row=firstRow; row < Math.min(firstRow + visibleRowCount + 1,getRowCount()); row++) {
      if (isExpandableHandlerVisibleForCurrentRow(row)) {
        continue;
      }
      Object node=getPathForRow(row).getLastPathComponent();
      if (node instanceof DefaultMutableTreeNode) {
        Object data=((DefaultMutableTreeNode)node).getUserObject();
        if (data instanceof BaseTestProxyNodeDescriptor) {
          final AbstractTestProxy testProxy=((BaseTestProxyNodeDescriptor)data).getElement();
          final String durationString=testProxy.getDurationString(properties);
          if (durationString != null) {
            Rectangle rowBounds=getRowBounds(row);
            rowBounds.x=0;
            rowBounds.width=Integer.MAX_VALUE;
            if (rowBounds.intersects(clip)) {
              final Rectangle fullRowRect=new Rectangle(visibleRect.x,rowBounds.y,visibleRect.width,rowBounds.height);
              final boolean rowSelected=isRowSelected(row);
              final boolean hasTreeFocus=hasFocus();
              paintRowData(this,durationString,fullRowRect,(Graphics2D)g,rowSelected,hasTreeFocus);
            }
          }
        }
      }
    }
  }
}
