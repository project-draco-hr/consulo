{
  if (PlatformDataKeys.COPY_PROVIDER.is(dataId)) {
    return this;
  }
  if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
    TreePath[] paths=getSelectionPaths();
    if (paths != null && paths.length > 1) {
      final List<PsiElement> els=new ArrayList<PsiElement>(paths.length);
      for (      TreePath path : paths) {
        if (isPathSelected(path.getParentPath()))         continue;
        AbstractTestProxy test=getSelectedTest(path);
        if (test != null) {
          final PsiElement psiElement=(PsiElement)TestsUIUtil.getData(test,CommonDataKeys.PSI_ELEMENT.getName(),myModel);
          if (psiElement != null) {
            els.add(psiElement);
          }
        }
      }
      return els.isEmpty() ? null : els.toArray(new PsiElement[els.size()]);
    }
  }
  if (Location.DATA_KEYS.is(dataId)) {
    TreePath[] paths=getSelectionPaths();
    if (paths != null && paths.length > 1) {
      final List<Location<?>> locations=new ArrayList<Location<?>>(paths.length);
      for (      TreePath path : paths) {
        if (isPathSelected(path.getParentPath()))         continue;
        AbstractTestProxy test=getSelectedTest(path);
        if (test != null) {
          final Location<?> location=(Location<?>)TestsUIUtil.getData(test,Location.DATA_KEY.getName(),myModel);
          if (location != null) {
            locations.add(location);
          }
        }
      }
      return locations.isEmpty() ? null : locations.toArray(new Location[locations.size()]);
    }
  }
  if (MODEL_DATA_KEY.is(dataId)) {
    return myModel;
  }
  final TreePath selectionPath=getSelectionPath();
  if (selectionPath == null)   return null;
  final AbstractTestProxy testProxy=getSelectedTest(selectionPath);
  if (testProxy == null)   return null;
  return TestsUIUtil.getData(testProxy,dataId,myModel);
}
