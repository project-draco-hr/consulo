{
  List<ArrangementEntryWrapper<E>> arranged=new ArrayList<ArrangementEntryWrapper<E>>();
  Set<ArrangementEntryWrapper<E>> unprocessed=new LinkedHashSet<ArrangementEntryWrapper<E>>(entries);
  for (  ArrangementRule rule : context.rules) {
    for (    ArrangementEntryWrapper<E> wrapper : entries) {
      if (wrapper.getEntry().canBeMatched() && unprocessed.contains(wrapper) && rule.getMatcher().isMatched(wrapper.getEntry())) {
        arranged.add(wrapper);
        unprocessed.remove(wrapper);
      }
    }
  }
  arranged.addAll(unprocessed);
  context.prepare(arranged);
  for (int i=arranged.size() - 1; i >= 0; i--) {
    ArrangementEntryWrapper<E> arrangedWrapper=arranged.get(i);
    ArrangementEntryWrapper<E> initialWrapper=entries.get(i);
    context.replace(arrangedWrapper,initialWrapper,i > 0 ? arranged.get(i - 1) : null);
  }
}
