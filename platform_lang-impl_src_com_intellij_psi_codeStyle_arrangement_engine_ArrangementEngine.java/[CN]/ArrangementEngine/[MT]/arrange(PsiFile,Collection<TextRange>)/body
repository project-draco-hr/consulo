{
  final Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document == null) {
    return;
  }
  final Rearranger<?> rearranger=Rearranger.EXTENSION.forLanguage(file.getLanguage());
  if (rearranger == null) {
    return;
  }
  final CodeStyleSettings settings=CodeStyleSettingsManager.getInstance(file.getProject()).getCurrentSettings();
  List<? extends ArrangementRule> arrangementRules=settings.getCommonSettings(file.getLanguage()).getArrangementRules();
  if (arrangementRules.isEmpty() && rearranger instanceof ArrangementStandardSettingsAware) {
    List<StdArrangementRule> defaultRules=((ArrangementStandardSettingsAware)rearranger).getDefaultRules();
    if (defaultRules != null) {
      arrangementRules=defaultRules;
    }
  }
  if (arrangementRules.isEmpty()) {
    return;
  }
  final DocumentEx documentEx;
  if (document instanceof DocumentEx && !((DocumentEx)document).isInBulkUpdate()) {
    documentEx=(DocumentEx)document;
  }
 else {
    documentEx=null;
  }
  final Context<? extends ArrangementEntry> context=Context.from(rearranger,document,file,ranges,arrangementRules,settings);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      if (documentEx != null) {
        documentEx.setInBulkUpdate(true);
      }
      try {
        doArrange(context);
      }
  finally {
        if (documentEx != null) {
          documentEx.setInBulkUpdate(false);
        }
      }
    }
  }
);
}
