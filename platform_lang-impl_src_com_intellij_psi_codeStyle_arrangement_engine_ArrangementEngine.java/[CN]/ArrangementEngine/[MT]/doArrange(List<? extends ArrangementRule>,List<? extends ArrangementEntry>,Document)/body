{
  List<ArrangementEntry> arranged=new ArrayList<ArrangementEntry>();
  Set<ArrangementEntry> unprocessed=new LinkedHashSet<ArrangementEntry>(entries);
  for (  ArrangementRule rule : rules) {
    for (    ArrangementEntry entry : entries) {
      if (entry.canBeMatched() && unprocessed.contains(entry) && rule.getMatcher().isMatched(entry)) {
        arranged.add(entry);
        unprocessed.remove(entry);
      }
    }
  }
  arranged.addAll(unprocessed);
  if (arranged.equals(entries)) {
    return;
  }
  ArrangementEntry parent=entries.get(0).getParent();
  final String initial;
  final int shift;
  if (parent == null) {
    initial=document.getCharsSequence().toString();
    shift=0;
  }
 else {
    initial=document.getCharsSequence().subSequence(parent.getStartOffset(),parent.getEndOffset()).toString();
    shift=parent.getStartOffset();
  }
  for (int i=arranged.size() - 1; i >= 0; i--) {
    ArrangementEntry arrangedEntry=arranged.get(i);
    ArrangementEntry initialEntry=entries.get(i);
    if (!arrangedEntry.equals(initialEntry)) {
      String text=initial.substring(arrangedEntry.getStartOffset() - shift,arrangedEntry.getEndOffset() - shift);
      document.replaceString(initialEntry.getStartOffset(),initialEntry.getEndOffset(),text);
    }
  }
}
