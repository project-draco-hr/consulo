{
  init(documentText);
  for (  DataEntry data : myExpectedData) {
    LogicalPosition actualLogicalByVisual=myModel.adjustLogicalPosition(toSoftWrapUnawareLogicalByVisual(data),data.visual);
    if (!data.foldedSpace && !equals(data.logical,actualLogicalByVisual)) {
      throw new AssertionError(String.format("Detected unmatched logical position by visual (%s). Expected: '%s', actual: '%s'. Calculation was performed " + "against soft wrap-unaware logical: '%s'",data.visual,data.logical,actualLogicalByVisual,toSoftWrapUnawareLogicalByVisual(data)));
    }
    LogicalPosition actualLogicalByOffset=myModel.adjustLogicalPosition(toSoftWrapUnawareLogicalByOffset(data),data.offset);
    if (!data.virtualSpace && !equals(data.logical,actualLogicalByOffset)) {
      throw new AssertionError(String.format("Detected unmatched logical position by offset. Expected: '%s', actual: '%s'. Calculation was performed " + "against offset: '%d' and soft wrap-unaware logical: '%s'",data.logical,actualLogicalByOffset,data.offset,toSoftWrapUnawareLogicalByOffset(data)));
    }
    VisualPosition actualVisual=myModel.adjustVisualPosition(data.logical,toSoftWrapUnawareVisual(data));
    if (!actualVisual.equals(data.visual)) {
      throw new AssertionError(String.format("Detected unmatched visual position by logical. Expected: '%s', actual: '%s'. Calculation was performed " + "against logical position: '%s' and soft wrap-unaware visual: '%s'",data.visual,actualVisual,data.logical,toSoftWrapUnawareVisual(data)));
    }
  }
}
