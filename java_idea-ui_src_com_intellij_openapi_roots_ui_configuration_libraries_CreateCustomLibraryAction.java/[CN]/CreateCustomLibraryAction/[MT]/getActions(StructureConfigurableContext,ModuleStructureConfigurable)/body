{
  final Module module=moduleStructureConfigurable.getSelectedModule();
  if (module == null)   return Collections.emptyList();
  final List<AnAction> actions=new ArrayList<AnAction>();
  for (  CustomLibraryCreator creator : CustomLibraryCreator.EP_NAME.getExtensions()) {
    final HashSet<LibraryKind<?>> kinds=new HashSet<LibraryKind<?>>(creator.getSuitableKinds());
    List<Library> suitableLibraries=LibraryPresentationManager.getInstance().getLibraries(kinds,context.getProject(),context);
    final Predicate<Library> notAddedLibrariesCondition=LibraryEditingUtil.getNotAddedLibrariesCondition(context.getModulesConfigurator().getRootModel(module));
    final Collection<Library> librariesToAdd=Collections2.filter(suitableLibraries,notAddedLibrariesCondition);
    if (librariesToAdd.isEmpty()) {
      actions.add(new CreateCustomLibraryAction(creator.getDisplayName(),creator,context,moduleStructureConfigurable,module));
    }
 else {
      final DefaultActionGroup group=new DefaultActionGroup(creator.getDisplayName(),true);
      group.getTemplatePresentation().setIcon(creator.getIcon());
      group.add(new CreateCustomLibraryAction("New...",creator,context,moduleStructureConfigurable,module));
      for (      Library library : librariesToAdd) {
        Icon icon=LibraryPresentationManager.getInstance().getNamedLibraryIcon(library,context);
        group.add(new AddExistingCustomLibraryAction(library,icon,context,moduleStructureConfigurable,module));
      }
      actions.add(group);
    }
  }
  return actions;
}
