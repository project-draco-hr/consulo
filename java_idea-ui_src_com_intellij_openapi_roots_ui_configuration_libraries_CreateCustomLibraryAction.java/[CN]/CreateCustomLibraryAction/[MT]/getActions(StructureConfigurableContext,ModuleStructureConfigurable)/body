{
  final Module module=moduleStructureConfigurable.getSelectedModule();
  if (module == null)   return Collections.emptyList();
  final ProjectStructureConfigurable projectStructureConfigurable=ProjectStructureConfigurable.getInstance(module.getProject());
  final List<AnAction> actions=new ArrayList<AnAction>();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(context);
  for (  CustomLibraryCreator creator : CustomLibraryCreator.EP_NAME.getExtensions()) {
    List<Library> libraries=new ArrayList<Library>();
    Collections.addAll(libraries,context.getProjectLibrariesProvider().getModifiableModel().getLibraries());
    Collections.addAll(libraries,context.getGlobalLibrariesProvider().getModifiableModel().getLibraries());
    final Set<? extends LibraryKind<?>> suitableKinds=creator.getDescription().getSuitableLibraryKinds();
    Predicate<Library> suitablePredicate=new Predicate<Library>(){
      @Override public boolean apply(      Library input){
        return LibraryPresentationManager.getInstance().isLibraryOfKind(input,container,suitableKinds);
      }
    }
;
    final Predicate<Library> notAddedLibrariesCondition=LibraryEditingUtil.getNotAddedLibrariesCondition(context.getModulesConfigurator().getRootModel(module));
    final Collection<Library> librariesToAdd=Collections2.filter(libraries,Predicates.and(suitablePredicate,notAddedLibrariesCondition));
    if (librariesToAdd.isEmpty()) {
      actions.add(new CreateCustomLibraryAction(creator.getDisplayName(),creator,context,projectStructureConfigurable,module));
    }
 else {
      final DefaultActionGroup group=new DefaultActionGroup(creator.getDisplayName(),true);
      group.getTemplatePresentation().setIcon(creator.getIcon());
      group.add(new CreateCustomLibraryAction("New...",creator,context,projectStructureConfigurable,module));
      for (      Library library : librariesToAdd) {
        Icon icon=LibraryPresentationManager.getInstance().getNamedLibraryIcon(library,context);
        group.add(new AddExistingCustomLibraryAction(library,icon,creator,context,projectStructureConfigurable,module));
      }
      actions.add(group);
    }
  }
  return actions;
}
