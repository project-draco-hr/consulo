{
  final Map<PsiElement,PsiElement> replacement=new HashMap<PsiElement,PsiElement>();
  scope.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitTypeElement(    PsiTypeElement typeElement){
      super.visitTypeElement(typeElement);
      PsiType type=typeElement.getType();
      if (type instanceof PsiClassType) {
        JavaResolveResult resolveResult=((PsiClassType)type).resolveGenerics();
        PsiElement resolved=resolveResult.getElement();
        if (resolved instanceof PsiTypeParameter) {
          PsiType newType=resolveResult.getSubstitutor().putAll(substitutor).substitute((PsiTypeParameter)resolved);
          if (newType == null) {
            newType=PsiType.getJavaLangObject(resolved.getManager(),resolved.getResolveScope());
          }
          try {
            replacement.put(typeElement,factory.createTypeElement(newType));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
    }
  }
);
  for (  PsiElement element : replacement.keySet()) {
    if (element.isValid()) {
      element.replace(replacement.get(element));
    }
  }
}
