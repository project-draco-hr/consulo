{
  ParserUtils.getToken(builder,mDOT);
  if (ParserUtils.lookAhead(builder,mIDENT,mDOT) || ParserUtils.lookAhead(builder,mNLS,mIDENT,mDOT)) {
    ParserUtils.getToken(builder,mNLS);
    builder.advanceLexer();
    Marker newMarker=marker.precede();
    marker.done(IDENITFIER_STAR);
    subParse(builder,newMarker);
  }
 else   if (ParserUtils.lookAhead(builder,mSTAR) || ParserUtils.lookAhead(builder,mNLS,mSTAR)) {
    ParserUtils.getToken(builder,mNLS);
    builder.advanceLexer();
    marker.done(IDENITFIER_STAR);
  }
 else   if (ParserUtils.lookAhead(builder,mIDENT,kAS) || ParserUtils.lookAhead(builder,mNLS,mIDENT,kAS)) {
    marker.drop();
    ParserUtils.getToken(builder,mNLS);
    Marker selMarker=builder.mark();
    builder.advanceLexer();
    builder.getTokenText();
    builder.advanceLexer();
    if (ParserUtils.lookAhead(builder,mNLS,mIDENT)) {
      ParserUtils.getToken(builder,mNLS);
    }
    ParserUtils.getToken(builder,mIDENT,GroovyBundle.message("identifier.expected"));
    selMarker.done(IMPORT_SELECTOR);
  }
 else   if (ParserUtils.lookAhead(builder,mIDENT) || ParserUtils.lookAhead(builder,mNLS,mIDENT)) {
    marker.drop();
    ParserUtils.getToken(builder,mNLS);
    ParserUtils.eatElement(builder,IMPORT_END);
  }
 else {
    builder.error(GroovyBundle.message("identifier.expected"));
    marker.done(IDENITFIER_STAR);
  }
}
