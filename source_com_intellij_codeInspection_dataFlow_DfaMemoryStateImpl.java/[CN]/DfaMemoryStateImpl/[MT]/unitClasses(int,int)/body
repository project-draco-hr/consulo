{
  SortedIntSet c1=myEqClasses.get(c1Index);
  SortedIntSet c2=myEqClasses.get(c2Index);
  int nConst=0;
  int[] c1s=c1.toNativeArray();
  for (int i=0; i < c1s.length; i++) {
    DfaValue dfaValue=DfaValueFactory.getInstance().getValue(c1s[i]);
    if (dfaValue instanceof DfaConstValue)     nConst++;
  }
  int[] c2s=c2.toNativeArray();
  for (int i=0; i < c2s.length; i++) {
    DfaValue dfaValue=DfaValueFactory.getInstance().getValue(c2s[i]);
    if (dfaValue instanceof DfaConstValue)     nConst++;
  }
  if (nConst > 1)   return false;
  TLongArrayList c2Pairs=new TLongArrayList();
  long[] distincts=myDistinctClasses.toArray();
  for (int i=0; i < distincts.length; i++) {
    int pc1=low(distincts[i]);
    int pc2=high(distincts[i]);
    boolean addedToC1=false;
    if (pc1 == c1Index || pc2 == c1Index) {
      addedToC1=true;
    }
    if (pc1 == c2Index || pc2 == c2Index) {
      if (addedToC1)       return false;
      c2Pairs.add(distincts[i]);
    }
  }
  c1.add(c2.toNativeArray());
  long[] c2Array=c2Pairs.toNativeArray();
  myDistinctClasses.removeAll(c2Array);
  myEqClasses.set(c2Index,null);
  myStateSize--;
  for (int i=0; i < c2Array.length; i++) {
    long l=c2Array[i];
    myDistinctClasses.add(createPair(c1Index,low(l) == c2Index ? high(l) : low(l)));
  }
  return true;
}
