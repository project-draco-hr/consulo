{
  DfaMemoryStateImpl newState=new DfaMemoryStateImpl();
  newState.myStack=(Stack)myStack.clone();
  newState.myDistinctClasses=new TLongHashSet(myDistinctClasses.toArray());
  newState.myEqClasses=new ArrayList<SortedIntSet>();
  newState.myStateSize=myStateSize;
  newState.myVariableStates=new com.intellij.util.containers.HashMap();
  newState.myOffsetStack=new TIntStack(myOffsetStack);
  for (int i=0; i < myEqClasses.size(); i++) {
    SortedIntSet aClass=myEqClasses.get(i);
    newState.myEqClasses.add(aClass != null ? new SortedIntSet(aClass.toNativeArray()) : null);
  }
  try {
    for (Iterator iterator=myVariableStates.keySet().iterator(); iterator.hasNext(); ) {
      DfaVariableValue dfaVariableValue=(DfaVariableValue)iterator.next();
      newState.myVariableStates.put(dfaVariableValue,((DfaVariableState)myVariableStates.get(dfaVariableValue)).clone());
    }
  }
 catch (  CloneNotSupportedException e) {
    LOG.error(e);
  }
  return newState;
}
