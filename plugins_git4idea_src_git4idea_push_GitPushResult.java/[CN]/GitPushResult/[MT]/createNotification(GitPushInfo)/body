{
  GroupedResult groupedResult=group();
  boolean error=!groupedResult.myErrorResults.isEmpty();
  boolean rejected=!groupedResult.myRejectedResults.isEmpty();
  boolean success=!groupedResult.mySuccessfulResults.isEmpty();
  boolean onlyError=error && !rejected && !success;
  boolean onlyRejected=rejected && !error && !success;
  int pushedCommitsNumber=calcPushedCommitTotalNumber(groupedResult.mySuccessfulResults,pushInfo);
  String title;
  NotificationType notificationType;
  if (error) {
    if (onlyError) {
      title="Push failed";
    }
 else {
      title="Push partially failed";
      if (success) {
        title+=", " + commits(pushedCommitsNumber) + " pushed";
      }
    }
    notificationType=NotificationType.ERROR;
  }
 else   if (rejected) {
    if (onlyRejected) {
      title="Push rejected";
    }
 else {
      title="Push partially rejected";
      if (success) {
        title+=", " + commits(pushedCommitsNumber) + " pushed";
      }
    }
    notificationType=NotificationType.WARNING;
  }
 else {
    title="Pushed " + pushedCommitsNumber + " "+ StringUtil.pluralize("commit",pushedCommitsNumber);
    notificationType=NotificationType.INFORMATION;
  }
  String errorReport=reportForGroup(groupedResult.myErrorResults,pushInfo,GroupedResult.Type.ERROR);
  String successReport=reportForGroup(groupedResult.mySuccessfulResults,pushInfo,GroupedResult.Type.SUCCESS);
  String rejectedReport=reportForGroup(groupedResult.myRejectedResults,pushInfo,GroupedResult.Type.REJECT);
  StringBuilder sb=new StringBuilder();
  sb.append(errorReport);
  sb.append(rejectedReport);
  sb.append(successReport);
  return GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification(title,sb.toString(),notificationType,null);
}
