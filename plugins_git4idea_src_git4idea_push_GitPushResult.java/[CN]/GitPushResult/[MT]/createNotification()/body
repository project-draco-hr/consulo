{
  final UpdatedFiles updatedFiles=collectUpdatedFiles();
  GroupedResult groupedResult=group();
  boolean error=!groupedResult.myErrorResults.isEmpty();
  boolean rejected=!groupedResult.myRejectedResults.isEmpty();
  boolean success=!groupedResult.mySuccessfulResults.isEmpty();
  boolean onlyError=error && !rejected && !success;
  boolean onlyRejected=rejected && !error && !success;
  final boolean onlySuccess=success && !rejected && !error;
  int pushedCommitsNumber=calcPushedCommitTotalNumber(myResults);
  String title;
  NotificationType notificationType;
  if (error) {
    if (onlyError) {
      title="Push failed";
    }
 else {
      title="Push partially failed";
      if (success) {
        title+=", " + commits(pushedCommitsNumber) + " pushed";
      }
    }
    notificationType=NotificationType.ERROR;
  }
 else   if (rejected) {
    if (onlyRejected) {
      title="Push rejected";
    }
 else {
      title="Push partially rejected, " + commits(pushedCommitsNumber) + " pushed";
    }
    notificationType=NotificationType.WARNING;
  }
 else {
    notificationType=NotificationType.INFORMATION;
    if (pushedCommitsNumber == 0) {
      title="Pushed successfully";
    }
 else {
      title="Pushed " + pushedCommitsNumber + " "+ StringUtil.pluralize("commit",pushedCommitsNumber);
    }
  }
  String errorReport=reportForGroup(groupedResult.myErrorResults,GroupedResult.Type.ERROR);
  String successReport=reportForGroup(groupedResult.mySuccessfulResults,GroupedResult.Type.SUCCESS);
  String rejectedReport=reportForGroup(groupedResult.myRejectedResults,GroupedResult.Type.REJECT);
  StringBuilder sb=new StringBuilder();
  sb.append(errorReport);
  sb.append(rejectedReport);
  sb.append(successReport);
  if (!updatedFiles.isEmpty()) {
    sb.append("<a href='UpdatedFiles'>View files updated during the push<a/>");
  }
  NotificationListener viewUpdateFilesListener=new NotificationListener(){
    @Override public void hyperlinkUpdate(    @NotNull Notification notification,    @NotNull HyperlinkEvent event){
      if (event.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED) && event.getDescription().equals("UpdatedFiles")) {
        ProjectLevelVcsManagerEx vcsManager=ProjectLevelVcsManagerEx.getInstanceEx(myProject);
        UpdateInfoTree tree=vcsManager.showUpdateProjectInfo(updatedFiles,"Update",ActionInfo.UPDATE,false);
        tree.setBefore(myBeforeUpdateLabel);
        tree.setAfter(LocalHistory.getInstance().putSystemLabel(myProject,"After push"));
      }
    }
  }
;
  return new Notification(GitVcs.IMPORTANT_ERROR_NOTIFICATION.getDisplayId(),title,sb.toString(),notificationType,viewUpdateFilesListener){
    @Override public boolean isImportant(){
      return !onlySuccess;
    }
  }
;
}
