{
  final Map<GitRepository,GitBranch> rejectedPushesForCurrentBranch=new HashMap<GitRepository,GitBranch>();
  for (  Map.Entry<GitRepository,GitPushRepoResult> entry : group().myRejectedResults.entrySet()) {
    GitRepository repository=entry.getKey();
    GitBranch currentBranch=repository.getCurrentBranch();
    if (currentBranch == null) {
      continue;
    }
    GitPushRepoResult repoResult=entry.getValue();
    GitPushBranchResult curBranchResult=repoResult.getBranchResults().get(currentBranch);
    if (curBranchResult == null) {
      continue;
    }
    String trackedBranchName;
    try {
      String simpleName=GitBranchUtil.getTrackedBranchName(myProject,repository.getRoot(),currentBranch.getName());
      if (simpleName == null) {
        continue;
      }
      if (simpleName.startsWith(GitBranch.REFS_HEADS_PREFIX)) {
        simpleName=simpleName.substring(GitBranch.REFS_HEADS_PREFIX.length());
      }
      String remote=GitBranchUtil.getTrackedRemoteName(myProject,repository.getRoot(),currentBranch.getName());
      if (remote == null) {
        continue;
      }
      trackedBranchName=remote + "/" + simpleName;
    }
 catch (    VcsException e) {
      LOG.info("Couldn't get tracked branch for branch " + currentBranch,e);
      continue;
    }
    if (!pushSpecs.get(repository).getDest().getName().equals(trackedBranchName)) {
      continue;
    }
    if (curBranchResult.isRejected()) {
      rejectedPushesForCurrentBranch.put(repository,currentBranch);
    }
  }
  return rejectedPushesForCurrentBranch;
}
