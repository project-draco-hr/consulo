{
  final PsiFile placeFile=place.getContainingFile().getOriginalFile();
  final VirtualFile placeVFfile=placeFile.getVirtualFile();
  if (placeVFfile == null) {
    return;
  }
  int count=0;
  final LinkedBlockingQueue<Pair<GroovyFile,GroovyDslExecutor>> queue=new LinkedBlockingQueue<Pair<GroovyFile,GroovyDslExecutor>>();
  final Set<String> unusedPaths=new THashSet<String>(ourMapping.keySet());
  for (  final GroovyFile file : getDslFiles(new AdditionalIndexedRootsScope(place.getResolveScope(),StandardDslIndexedRootsProvider.class))) {
    final VirtualFile vfile=file.getVirtualFile();
    if (vfile == null) {
      continue;
    }
    unusedPaths.remove(vfile.getUrl());
    if (vfile.equals(placeVFfile)) {
      continue;
    }
    final long stamp=file.getModificationStamp();
    final GroovyDslExecutor cached=getCachedExecutor(vfile,stamp);
    if (cached == null) {
      final String text=file.getText();
      count++;
      scheduleParsing(queue,file,vfile,stamp,text);
    }
 else {
      cached.processVariants(descriptor,consumer);
    }
  }
  for (  final String unusedPath : unusedPaths) {
    final VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(unusedPath);
    if (file != null) {
      ourMapping.remove(unusedPath);
    }
  }
  try {
    while (count > 0) {
      ProgressManager.getInstance().checkCanceled();
      final Pair<GroovyFile,GroovyDslExecutor> pair=queue.poll(20,TimeUnit.MILLISECONDS);
      if (pair != null) {
        final GroovyDslExecutor executor=pair.second;
        if (executor != null) {
          executor.processVariants(descriptor,consumer);
        }
        count--;
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.error(e);
  }
}
