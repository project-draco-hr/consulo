{
  int count=0;
  final AdditionalIndexableFileSet standardSet=new AdditionalIndexableFileSet(StandardDslIndexedRootsProvider.getInstance());
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final AdditionalIndexedRootsScope scope=new AdditionalIndexedRootsScope(GlobalSearchScope.allScope(project),standardSet);
  for (  VirtualFile vfile : FileBasedIndex.getInstance().getContainingFiles(NAME,OUR_KEY,scope)) {
    if (!vfile.isValid()) {
      continue;
    }
    if (!standardSet.isInSet(vfile) && !fileIndex.isInLibraryClasses(vfile) && !fileIndex.isInLibrarySource(vfile)) {
      if (!fileIndex.isInSourceContent(vfile) || !isActivated(vfile)) {
        continue;
      }
    }
    PsiFile psiFile=PsiManager.getInstance(project).findFile(vfile);
    if (!(psiFile instanceof GroovyFile)) {
      continue;
    }
    GroovyFile file=(GroovyFile)psiFile;
    final long stamp=file.getModificationStamp();
    final GroovyDslExecutor cached=getCachedExecutor(vfile,stamp);
    count++;
    if (cached == null) {
      file.putUserData(CACHED_ENHANCEMENTS,null);
      scheduleParsing(queue,file,vfile,stamp,file.getText());
    }
 else {
      queue.offer(Pair.create(file,cached));
    }
  }
  return count;
}
