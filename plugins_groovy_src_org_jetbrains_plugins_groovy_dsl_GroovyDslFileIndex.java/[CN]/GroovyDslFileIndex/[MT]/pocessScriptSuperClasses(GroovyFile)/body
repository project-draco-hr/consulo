{
  if (!scriptFile.isScript())   return null;
  final VirtualFile virtualFile=scriptFile.getVirtualFile();
  if (virtualFile == null)   return null;
  final String filePath=virtualFile.getPath();
  List<Trinity<String,String,GroovyDslScript>> supers=ContainerUtil.newArrayList();
  final Project project=scriptFile.getProject();
  for (  GroovyDslScript script : getDslScripts(project)) {
    final MultiMap staticInfo=script.getStaticInfo();
    final Collection infos=staticInfo != null ? staticInfo.get("scriptSuperClass") : Collections.emptyList();
    for (    Object info : infos) {
      if (info instanceof Map) {
        final Map map=(Map)info;
        final Object _pattern=map.get("pattern");
        final Object _superClass=map.get("superClass");
        if (_pattern instanceof String && _superClass instanceof String) {
          final String pattern=(String)_pattern;
          final String superClass=(String)_superClass;
          try {
            if (Pattern.matches(".*" + pattern,filePath)) {
              supers.add(Trinity.create(superClass,pattern,script));
            }
          }
 catch (          RuntimeException e) {
            script.handleDslError(e);
          }
        }
      }
    }
  }
  if (!supers.isEmpty()) {
    final String className=supers.get(0).first;
    final GroovyDslScript script=supers.get(0).third;
    try {
      return TypesUtil.createTypeByFQClassName(className,scriptFile);
    }
 catch (    RuntimeException e) {
      script.handleDslError(e);
      return null;
    }
  }
 else {
    return null;
  }
}
