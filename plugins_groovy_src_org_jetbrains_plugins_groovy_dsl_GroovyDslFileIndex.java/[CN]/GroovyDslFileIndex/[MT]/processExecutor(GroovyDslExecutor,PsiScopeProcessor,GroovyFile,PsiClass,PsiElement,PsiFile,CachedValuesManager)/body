{
  final String qname=psiClass.getQualifiedName();
  if (qname == null) {
    return true;
  }
  Map<String,Boolean> specificities=getCachedMap(dslFile,PLACE_DEPENDENT_KEY,manager);
  boolean firstTime=!specificities.containsKey(qname);
  final boolean placeDependent=firstTime || specificities.get(qname);
  GroovyClassDescriptor descriptor=new GroovyClassDescriptor(psiClass,place,placeDependent,placeFile);
  final ConcurrentMap<GroovyClassDescriptor,CustomMembersHolder> members=getCachedMap(dslFile,MEMBER_HOLDERS,manager);
  CustomMembersHolder holder=members.get(descriptor);
  if (holder == null) {
    holder=addGdslMembers(executor,descriptor,dslFile);
    if (firstTime) {
      final boolean placeAccessed=descriptor.placeAccessed();
      specificities.put(qname,placeAccessed);
      final GroovyClassDescriptor newDescriptor=new GroovyClassDescriptor(psiClass,place,placeAccessed,placeFile);
      members.putIfAbsent(newDescriptor,holder);
    }
 else {
      members.putIfAbsent(descriptor,holder);
    }
  }
  return holder.processMembers(processor);
}
