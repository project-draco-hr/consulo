{
  if (!(place instanceof GrReferenceExpression) || PsiTreeUtil.getParentOfType(place,PsiAnnotation.class) != null) {
    return true;
  }
  final PsiFile placeFile=place.getContainingFile().getOriginalFile();
  final LinkedBlockingQueue<Pair<GroovyFile,GroovyDslExecutor>> queue=new LinkedBlockingQueue<Pair<GroovyFile,GroovyDslExecutor>>();
  final ArrayList<Pair<GroovyFile,GroovyDslExecutor>> ready=new ArrayList<Pair<GroovyFile,GroovyDslExecutor>>();
  int count=queueExecutors(psiClass.getProject(),queue,ready);
  for (  Pair<GroovyFile,GroovyDslExecutor> pair : ready) {
    if (!processExecutor(pair.second,processor,pair.first,psiClass,place,placeFile)) {
      return false;
    }
    count--;
  }
  try {
    while (count > 0) {
      ProgressManager.checkCanceled();
      final Pair<GroovyFile,GroovyDslExecutor> pair=queue.poll(20,TimeUnit.MILLISECONDS);
      if (pair != null) {
        final GroovyDslExecutor executor=pair.second;
        final GroovyFile dslFile=pair.first;
        if (executor != null && !processExecutor(executor,processor,dslFile,psiClass,place,placeFile)) {
          return false;
        }
        count--;
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.error(e);
  }
  return true;
}
