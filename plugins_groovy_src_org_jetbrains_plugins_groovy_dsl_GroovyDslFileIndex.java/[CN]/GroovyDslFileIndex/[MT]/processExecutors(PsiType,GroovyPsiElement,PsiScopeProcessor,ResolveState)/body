{
  if (PsiTreeUtil.getParentOfType(place,PsiAnnotation.class) != null) {
    return true;
  }
  final String qname=psiType.getCanonicalText();
  if (qname == null) {
    return true;
  }
  final PsiFile placeFile=place.getContainingFile().getOriginalFile();
  final DelegatingScopeProcessor nameChecker=new DelegatingScopeProcessor(processor){
    @Override public boolean execute(    PsiElement element,    ResolveState state){
      return ResolveUtil.processElement(processor,(PsiNamedElement)element,state);
    }
  }
;
  for (  GroovyDslScript script : getDslScripts(place.getProject())) {
    if (!script.processExecutor(nameChecker,psiType,place,placeFile,qname,state)) {
      return false;
    }
  }
  return true;
}
