{
  checkSourcePositionFileType(position);
  return ApplicationManager.getApplication().runReadAction(new Computable<List<Location>>(){
    public List<Location> compute(){
      try {
        final List<String> relativePaths=getRelativeSourePathsByType(type);
        for (        String relativePath : relativePaths) {
          final PsiFile file=mySourcesFinder.findSourceFile(relativePath,myDebugProcess.getProject(),myScope);
          if (file != null && file.equals(position.getFile())) {
            return getLocationsOfLine(type,getSourceName(file.getName(),type),relativePath,position.getLine() + 1);
          }
        }
      }
 catch (      ObjectCollectedException ignored) {
      }
catch (      AbsentInformationException ignored) {
      }
catch (      ClassNotPreparedException ignored) {
      }
catch (      InternalError e) {
        myDebugProcess.getExecutionResult().getProcessHandler().notifyTextAvailable(DebuggerBundle.message("internal.error.locations.of.line",type.name()),ProcessOutputTypes.SYSTEM);
      }
      return null;
    }
    private String getSourceName(    final String name,    final ReferenceType type) throws AbsentInformationException {
      for (      String sourceNameFromType : type.sourceNames(myStratumId)) {
        if (sourceNameFromType.indexOf(name) >= 0) {
          return sourceNameFromType;
        }
      }
      return name;
    }
  }
);
}
