{
  ButtonGroup group=new ButtonGroup();
  Map<String,JRadioButton> nameToButtonMap=new HashMap<String,JRadioButton>();
  List<Pair<String,JRadioButton>> attachedLibraries=new ArrayList<Pair<String,JRadioButton>>();
  for (  final TestFramework descriptor : Extensions.getExtensions(TestFramework.EXTENSION_NAME)) {
    final JRadioButton b=new JRadioButton(descriptor.getName());
    myLibraryButtons.add(b);
    group.add(b);
    nameToButtonMap.put(descriptor.getName(),b);
    if (descriptor.isLibraryAttached(myTargetModule)) {
      attachedLibraries.add(Pair.create(descriptor.getName(),b));
    }
    b.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (b.isSelected())         onLibrarySelected(descriptor);
      }
    }
);
  }
  String defaultLibrary=getDefaultLibraryName();
  if (attachedLibraries.isEmpty()) {
    if (defaultLibrary != null) {
      myDefaultLibraryButton=nameToButtonMap.get(defaultLibrary);
    }
  }
 else {
    if (defaultLibrary != null) {
      for (      Pair<String,JRadioButton> each : attachedLibraries) {
        if (each.first.equals(defaultLibrary)) {
          myDefaultLibraryButton=each.second;
        }
      }
    }
    if (myDefaultLibraryButton == null) {
      myDefaultLibraryButton=attachedLibraries.get(0).second;
    }
  }
  if (myDefaultLibraryButton == null) {
    myDefaultLibraryButton=myLibraryButtons.get(0);
  }
  myFixLibraryButton=new JButton(CodeInsightBundle.message("intention.create.test.dialog.fix.library"));
  myFixLibraryButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          OrderEntryFix.addJarToRoots(mySelectedFramework.getLibraryPath(),myTargetModule,null);
        }
      }
);
      myFixLibraryPanel.setVisible(false);
    }
  }
);
  TestGenerator[] generators=TestGenerator.EP_NAME.getExtensions();
  myLanguageCombo=new ComboBox(generators,-1);
  final String defaultLanguage=getDefaultLanguage();
  if (defaultLanguage != null) {
    for (    TestGenerator generator : generators) {
      if (defaultLanguage.equals(generator.toString())) {
        myLanguageCombo.setSelectedItem(generator);
        break;
      }
    }
  }
  myTargetClassNameField=new EditorTextField(targetClass.getName() + "Test");
  myTargetClassNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    com.intellij.openapi.editor.event.DocumentEvent e){
      getOKAction().setEnabled(JavaPsiFacade.getInstance(myProject).getNameHelper().isIdentifier(getClassName()));
    }
  }
);
  mySuperClassField=JavaReferenceEditorUtil.createReferenceEditorWithBrowseButton(new MyChooseSuperClassAction(),"",myProject,true);
  mySuperClassField.setMinimumSize(mySuperClassField.getPreferredSize());
  String targetPackageName=targetPackage != null ? targetPackage.getQualifiedName() : "";
  myTargetPackageField=new PackageNameReferenceEditorCombo(targetPackageName,myProject,RECENTS_KEY,CodeInsightBundle.message("dialog.create.class.package.chooser.title"));
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      myTargetPackageField.getButton().doClick();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.SHIFT_DOWN_MASK)),myTargetPackageField.getChildComponent());
  myGenerateBeforeBox=new JCheckBox("setUp/@Before");
  myGenerateAfterBox=new JCheckBox("tearDown/@After");
  myShowInheritedMethodsBox=new JCheckBox(CodeInsightBundle.message("intention.create.test.dialog.show.inherited"));
  myShowInheritedMethodsBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateMethodsTable();
    }
  }
);
  restoreShowInheritedMembersStatus();
  myMethodsTable=new MemberSelectionTable(Collections.<MemberInfo>emptyList(),null);
  updateMethodsTable();
}
