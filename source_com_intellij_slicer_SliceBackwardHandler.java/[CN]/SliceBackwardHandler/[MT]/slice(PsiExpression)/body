{
  final Project project=expression.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  Map<SliceUsage,List<SliceUsage>> targetEqualUsages=new THashMap<SliceUsage,List<SliceUsage>>(new TObjectHashingStrategy<SliceUsage>(){
    public int computeHashCode(    SliceUsage object){
      return object.getUsageInfo().hashCode();
    }
    public boolean equals(    SliceUsage o1,    SliceUsage o2){
      return o1.getUsageInfo().equals(o2.getUsageInfo());
    }
  }
);
  final Content[] myContent=new Content[1];
  final ContentManager contentManager=SliceManager.getInstance(project).getContentManager();
  final SliceToolwindowSettings sliceToolwindowSettings=SliceToolwindowSettings.getInstance(project);
  SlicePanel slicePanel=new SlicePanel(project,new SliceUsage(new UsageInfo(expression),targetEqualUsages,null)){
    public void dispose(){
      super.dispose();
      contentManager.removeContent(myContent[0],true);
    }
    public boolean isAutoScroll(){
      return sliceToolwindowSettings.isAutoScroll();
    }
    public void setAutoScroll(    boolean autoScroll){
      sliceToolwindowSettings.setAutoScroll(autoScroll);
    }
    public boolean isPreview(){
      return sliceToolwindowSettings.isPreview();
    }
    public void setPreview(    boolean preview){
      sliceToolwindowSettings.setPreview(preview);
    }
  }
;
  myContent[0]=contentManager.getFactory().createContent(slicePanel,"slices",true);
  contentManager.addContent(myContent[0]);
  contentManager.setSelectedContent(myContent[0]);
  ToolWindowManager.getInstance(project).getToolWindow("Slice").activate(new Runnable(){
    public void run(){
    }
  }
);
}
