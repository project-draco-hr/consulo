{
  final boolean checkSpelling;
  final boolean useCommitMessageMargin;
  final int commitMessageMarginSize;
  VcsConfiguration configuration=VcsConfiguration.getInstance(project);
  if (configuration != null) {
    checkSpelling=forceSpellCheckOn || configuration.CHECK_COMMIT_MESSAGE_SPELLING;
    useCommitMessageMargin=configuration.USE_COMMIT_MESSAGE_MARGIN;
    commitMessageMarginSize=configuration.COMMIT_MESSAGE_MARGIN_SIZE;
  }
 else {
    checkSpelling=true;
    useCommitMessageMargin=false;
    commitMessageMarginSize=-1;
  }
  EditorTextFieldProvider service=ServiceManager.getService(project,EditorTextFieldProvider.class);
  return service.getEditorField(FileTypes.PLAIN_TEXT.getLanguage(),project,new EditorTextFieldProvider.AdHocEditorCustomizer(){
    @Override public void customize(    EditorEx editor){
      toggleEditorSpellchecking(project,editor,checkSpelling);
      if (useCommitMessageMargin) {
        editor.setColorsScheme(EditorColorsManager.getInstance().getGlobalScheme());
        editor.getSettings().setRightMarginShown(true);
        editor.getSettings().setRightMargin(commitMessageMarginSize);
      }
    }
  }
);
}
