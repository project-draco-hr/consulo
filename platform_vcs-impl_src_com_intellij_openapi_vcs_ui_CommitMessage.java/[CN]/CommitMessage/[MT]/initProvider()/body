{
  InspectionToolProvider provider;
  try {
    provider=(InspectionToolProvider)Class.forName("com.intellij.spellchecker.inspections.SpellCheckerInspectionToolProvider").newInstance();
  }
 catch (  Exception e) {
    return null;
  }
  final Map<String,LocalInspectionTool> tools=new HashMap<String,LocalInspectionTool>();
  Class<LocalInspectionTool>[] inspectionClasses=(Class<LocalInspectionTool>[])provider.getInspectionClasses();
  for (  Class<LocalInspectionTool> inspectionClass : inspectionClasses) {
    try {
      LocalInspectionTool tool=inspectionClass.newInstance();
      tools.put(tool.getShortName(),tool);
    }
 catch (    Exception e) {
      return null;
    }
  }
  InspectionProfile profile=new InspectionProfileImpl("CommitMessage"){
    private final LocalInspectionTool[] myToolsArray=tools.values().toArray(new LocalInspectionTool[tools.size()]);
    @Override public HighlightDisplayLevel getErrorLevel(    @NotNull HighlightDisplayKey inspectionToolKey,    PsiElement element){
      return HighlightDisplayLevel.WARNING;
    }
    @Override public InspectionProfileEntry getInspectionTool(    @NotNull String shortName,    @NotNull PsiElement element){
      return tools.get(shortName);
    }
    @NotNull @Override public InspectionProfileEntry[] getInspectionTools(    PsiElement element){
      return myToolsArray;
    }
    @Override public boolean isToolEnabled(    HighlightDisplayKey key,    PsiElement element){
      return true;
    }
  }
;
  final List<LocalInspectionTool> toolsList=new ArrayList<LocalInspectionTool>(tools.values());
  final InspectionProfileWrapper profileWrapper=new InspectionProfileWrapper(profile){
    @Override public List<LocalInspectionTool> getHighlightingLocalInspectionTools(    PsiElement element){
      return toolsList;
    }
  }
;
  return profileWrapper;
}
