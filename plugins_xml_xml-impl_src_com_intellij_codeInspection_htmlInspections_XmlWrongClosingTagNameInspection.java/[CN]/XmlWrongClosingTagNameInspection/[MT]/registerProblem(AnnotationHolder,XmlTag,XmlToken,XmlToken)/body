{
  PsiElement context=tag.getContainingFile().getContext();
  if (context != null) {
    ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(context.getLanguage());
    if (parserDefinition != null) {
      ASTNode contextNode=context.getNode();
      if (contextNode != null && contextNode.getChildren(parserDefinition.getStringLiteralElements(context.getLanguageVersion())) != null) {
        return;
      }
    }
  }
  final String tagName=(tag instanceof HtmlTag) ? tag.getName().toLowerCase() : tag.getName();
  final String endTokenText=(tag instanceof HtmlTag) ? end.getText().toLowerCase() : end.getText();
  final RenameTagBeginOrEndIntentionAction renameEndAction=new RenameTagBeginOrEndIntentionAction(tagName,endTokenText,false);
  final RenameTagBeginOrEndIntentionAction renameStartAction=new RenameTagBeginOrEndIntentionAction(endTokenText,tagName,true);
  if (start != null) {
    final Annotation annotation=holder.createErrorAnnotation(start,XmlErrorMessages.message("tag.has.wrong.closing.tag.name"));
    annotation.registerFix(renameEndAction);
    annotation.registerFix(renameStartAction);
  }
  final Annotation annotation=holder.createErrorAnnotation(end,XmlErrorMessages.message("wrong.closing.tag.name"));
  annotation.registerFix(new RemoveExtraClosingTagIntentionAction());
  annotation.registerFix(renameEndAction);
  annotation.registerFix(renameStartAction);
}
