{
  final List<FilePatch> patches;
  try {
    patches=ApplyPatchSaveToFileExecutor.patchGroupsToOneGroup(patchGroups,myBaseDir);
  }
 catch (  IOException e) {
    myInner.handleException(e,true);
    return;
  }
  final PatchApplier<BinaryFilePatch> patchApplier=new PatchApplier<BinaryFilePatch>(myVcs.getProject(),myBaseDir,patches,localList,null,null);
  patchApplier.scheduleSelf(false,myInner,true);
  boolean thereAreCreations=false;
  for (  FilePatch patch : patches) {
    if (patch.isNewFile() || !Comparing.equal(patch.getAfterName(),patch.getBeforeName())) {
      thereAreCreations=true;
      break;
    }
  }
  if (thereAreCreations) {
    myInner.next(new DirectoryAddition());
  }
  appendResolveConflictToContext(myInner);
  appendTailToContextLast(myInner);
  myInner.ping();
}
