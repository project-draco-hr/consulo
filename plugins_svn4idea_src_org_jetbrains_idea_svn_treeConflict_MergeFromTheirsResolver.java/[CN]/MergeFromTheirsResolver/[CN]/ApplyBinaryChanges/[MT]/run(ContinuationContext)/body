{
  if (myTheirsBinaryChanges.isEmpty())   return;
  final Application application=ApplicationManager.getApplication();
  final VcsException[] exc=new VcsException[1];
  final List<FilePath> dirtyPaths=new ArrayList<FilePath>();
  for (  final Change change : myTheirsBinaryChanges) {
    application.runWriteAction(new Runnable(){
      public void run(){
        try {
          if (change.getAfterRevision() != null) {
            final FilePath file=change.getAfterRevision().getFile();
            dirtyPaths.add(file);
            final String parentPath=file.getParentPath().getPath();
            final VirtualFile parentFile=VfsUtil.createDirectoryIfMissing(parentPath);
            if (parentFile == null) {
              context.handleException(new VcsException("Can not create directory: " + parentPath,true),false);
              return;
            }
            final VirtualFile child=parentFile.createChildData(TreeConflictRefreshablePanel.class,file.getName());
            if (child == null) {
              context.handleException(new VcsException("Can not create file: " + file.getPath(),true),false);
              return;
            }
            final BinaryContentRevision revision=(BinaryContentRevision)change.getAfterRevision();
            final byte[] content=revision.getBinaryContent();
            if (content == null) {
              context.handleException(new VcsException("Can not load Theirs content for file " + file.getPath()),false);
              return;
            }
            child.setBinaryContent(content);
          }
 else {
            final FilePath path=change.getBeforeRevision().getFile();
            dirtyPaths.add(path);
            final VirtualFile file=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(path.getIOFile());
            if (file == null) {
              context.handleException(new VcsException("Can not delete file: " + file.getPath(),true),false);
              return;
            }
            file.delete(TreeConflictRefreshablePanel.class);
          }
        }
 catch (        IOException e) {
          exc[0]=new VcsException(e);
        }
catch (        VcsException e) {
          exc[0]=e;
        }
      }
    }
);
    if (exc[0] != null) {
      context.handleException(exc[0],true);
      return;
    }
  }
  VcsDirtyScopeManager.getInstance(myVcs.getProject()).filePathsDirty(dirtyPaths,null);
}
