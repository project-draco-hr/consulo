{
  int ok=Messages.showOkCancelDialog(myVcs.getProject(),(myChange.isMoved() ? SvnBundle.message("confirmation.resolve.tree.conflict.merge.moved",myOldPresentation,myNewPresentation) : SvnBundle.message("confirmation.resolve.tree.conflict.merge.renamed",myOldPresentation,myNewPresentation)),TreeConflictRefreshablePanel.TITLE,Messages.getQuestionIcon());
  if (Messages.OK != ok)   return;
  FileDocumentManager.getInstance().saveAllDocuments();
  final Continuation fragmented=Continuation.createFragmented(myVcs.getProject(),false);
  fragmented.addExceptionHandler(VcsException.class,new Consumer<VcsException>(){
    @Override public void consume(    VcsException e){
      myWarnings.add(e);
      if (e.isWarning()) {
        return;
      }
      AbstractVcsHelper.getInstance(myVcs.getProject()).showErrors(myWarnings,TreeConflictRefreshablePanel.TITLE);
    }
  }
);
  final List<TaskDescriptor> tasks=new SmartList<TaskDescriptor>();
  if (SVNNodeKind.DIR.equals(myDescription.getNodeKind())) {
    tasks.add(new PreloadChangesContentsForDir());
  }
 else {
    tasks.add(new PreloadChangesContentsForFile());
  }
  tasks.add(new ConvertTextPaths());
  tasks.add(new PatchCreator());
  tasks.add(new SelectPatchesInApplyPatchDialog());
  tasks.add(new SelectBinaryFiles());
  fragmented.run(tasks);
}
