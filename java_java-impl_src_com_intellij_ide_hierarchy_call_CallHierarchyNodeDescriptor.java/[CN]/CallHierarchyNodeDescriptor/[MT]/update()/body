{
  final CompositeAppearance oldText=myHighlightedText;
  final Icon oldIcon=myIcon;
  int flags=Iconable.ICON_FLAG_VISIBILITY;
  if (isMarkReadOnly()) {
    flags|=Iconable.ICON_FLAG_READ_STATUS;
  }
  boolean changes=super.update();
  final PsiElement enclosingElement=getEnclosingElement();
  if (enclosingElement == null) {
    final String invalidPrefix=IdeBundle.message("node.hierarchy.invalid");
    if (!myHighlightedText.getText().startsWith(invalidPrefix)) {
      myHighlightedText.getBeginning().addText(invalidPrefix,HierarchyNodeDescriptor.getInvalidPrefixAttributes());
    }
    return true;
  }
  myIcon=enclosingElement.getIcon(flags);
  if (changes && myIsBase) {
    final LayeredIcon icon=new LayeredIcon(2);
    icon.setIcon(myIcon,0);
    icon.setIcon(AllIcons.Hierarchy.Base,1,-AllIcons.Hierarchy.Base.getIconWidth() / 2,0);
    myIcon=icon;
  }
  myHighlightedText=new CompositeAppearance();
  TextAttributes mainTextAttributes=null;
  if (myColor != null) {
    mainTextAttributes=new TextAttributes(myColor,null,null,null,Font.PLAIN);
  }
  if (enclosingElement instanceof PsiMethod) {
    if (enclosingElement instanceof JspHolderMethod) {
      PsiFile file=enclosingElement.getContainingFile();
      myHighlightedText.getEnding().addText(file != null ? file.getName() : IdeBundle.message("node.call.hierarchy.unknown.jsp"),mainTextAttributes);
    }
 else {
      final PsiMethod method=(PsiMethod)enclosingElement;
      final StringBuilder buffer=new StringBuilder(128);
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null) {
        buffer.append(ClassPresentationUtil.getNameForClass(containingClass,false));
        buffer.append('.');
      }
      final String methodText=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
      buffer.append(methodText);
      myHighlightedText.getEnding().addText(buffer.toString(),mainTextAttributes);
    }
  }
 else   if (JspPsiUtil.isInJspFile(enclosingElement) && enclosingElement instanceof PsiFile) {
    final JspFile file=JspPsiUtil.getJspFile(enclosingElement);
    myHighlightedText.getEnding().addText(file.getName(),mainTextAttributes);
  }
 else {
    myHighlightedText.getEnding().addText(ClassPresentationUtil.getNameForClass((PsiClass)enclosingElement,false),mainTextAttributes);
  }
  if (myUsageCount > 1) {
    myHighlightedText.getEnding().addText(IdeBundle.message("node.call.hierarchy.N.usages",myUsageCount),HierarchyNodeDescriptor.getUsageCountPrefixAttributes());
  }
  if (!(JspPsiUtil.isInJspFile(enclosingElement) && enclosingElement instanceof PsiFile)) {
    final PsiClass containingClass=enclosingElement instanceof PsiMethod ? ((PsiMethod)enclosingElement).getContainingClass() : (PsiClass)enclosingElement;
    if (containingClass != null) {
      final String packageName=JavaHierarchyUtil.getPackageName(containingClass);
      myHighlightedText.getEnding().addText("  (" + packageName + ")",HierarchyNodeDescriptor.getPackageNameAttributes());
    }
  }
  myName=myHighlightedText.getText();
  if (!Comparing.equal(myHighlightedText,oldText) || !Comparing.equal(myIcon,oldIcon)) {
    changes=true;
  }
  return changes;
}
