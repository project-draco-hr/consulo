{
  final String versionString=jdk.getVersionString();
  if (StringUtil.isEmpty(versionString)) {
    throw new IllegalArgumentException(CompilerBundle.message("javac.error.unknown.jdk.version",jdk.getName()));
  }
  final LanguageLevel applicableLanguageLevel=getApplicableLanguageLevel(versionString,chunkLanguageLevel);
  if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_8)) {
    commandLine.add("-source");
    commandLine.add("8");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_7)) {
    commandLine.add("-source");
    commandLine.add("1.7");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_6)) {
    commandLine.add("-source");
    commandLine.add("1.6");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_5)) {
    commandLine.add("-source");
    commandLine.add("1.5");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_4)) {
    commandLine.add("-source");
    commandLine.add("1.4");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_3)) {
    if (!(isOfVersion(versionString,"1.3") || isOfVersion(versionString,"1.2") || isOfVersion(versionString,"1.1"))) {
      commandLine.add("-source");
      commandLine.add("1.3");
    }
  }
}
