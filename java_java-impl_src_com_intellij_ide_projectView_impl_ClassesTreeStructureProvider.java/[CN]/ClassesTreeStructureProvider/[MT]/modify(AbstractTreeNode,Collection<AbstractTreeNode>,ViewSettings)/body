{
  ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
  for (  final AbstractTreeNode child : children) {
    Object o=child.getValue();
    if (o instanceof PsiClassOwner) {
      final ViewSettings settings1=((ProjectViewNode)parent).getSettings();
      final PsiClassOwner classOwner=(PsiClassOwner)o;
      final VirtualFile file=classOwner.getVirtualFile();
      if (!(classOwner instanceof PsiCompiledElement)) {
        final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
        if (file != null && fileIndex.isInLibrarySource(file)) {
          final PsiElement originalElement=classOwner.getOriginalElement();
          if (originalElement instanceof PsiFile) {
            PsiFile classFile=(PsiFile)originalElement;
            final VirtualFile virtualClassFile=classFile.getVirtualFile();
            if (virtualClassFile != null && fileIndex.isInLibraryClasses(virtualClassFile) && classOwner.getManager().areElementsEquivalent(classOwner.getContainingDirectory(),classFile.getContainingDirectory())) {
              continue;
            }
          }
        }
      }
      PsiClass[] classes=classOwner.getClasses();
      if (fileInRoots(file)) {
        if (classes.length == 1 && !(classes[0] instanceof SyntheticElement)) {
          result.add(new ClassTreeNode(myProject,classes[0],settings1));
        }
 else {
          result.add(new PsiClassOwnerTreeNode(classOwner,settings1));
        }
        continue;
      }
    }
    result.add(child);
  }
  return result;
}
