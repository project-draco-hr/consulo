{
  if (myEditor == null)   return;
  final MarkupModel markupModel=DocumentMarkupModel.forDocument(myDocument,myProject,true);
  final List<RangeHighlighter> highlighters=new ArrayList<RangeHighlighter>();
  final ProjectData data=suite.getCoverageData();
  if (data == null) {
    coverageDataNotFound(suite);
    return;
  }
  final CoverageEngine engine=suite.getCoverageEngine();
  final Set<String> qualifiedNames=engine.getQualifiedNames(myFile);
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  final VirtualFile file=getVirtualFile();
  final long fileTimeStamp=file.getTimeStamp();
  final long coverageTimeStamp=suite.getLastCoverageTimeStamp();
  final TIntIntHashMap oldToNewLineMapping;
  if (engine.isInLibraryClasses(myProject,file)) {
    return;
  }
  if (projectFileIndex.isInLibrarySource(file)) {
    if (fileTimeStamp > coverageTimeStamp) {
      showEditorWarningMessage(CodeInsightBundle.message("coverage.data.outdated"));
      return;
    }
    oldToNewLineMapping=null;
  }
 else {
    oldToNewLineMapping=getOldToNewLineMapping(coverageTimeStamp);
    if (oldToNewLineMapping == null) {
      if (fileTimeStamp > coverageTimeStamp && classesArePresentInCoverageData(data,qualifiedNames)) {
        showEditorWarningMessage(CodeInsightBundle.message("coverage.data.outdated"));
        return;
      }
    }
  }
  if (myEditor.getUserData(COVERAGE_HIGHLIGHTERS) != null) {
    return;
  }
  final Module module=ApplicationManager.getApplication().runReadAction(new Computable<Module>(){
    @Nullable @Override public Module compute(){
      return ModuleUtil.findModuleForPsiElement(myFile);
    }
  }
);
  if (module != null) {
    if (engine.recompileProjectAndRerunAction(module,suite,new Runnable(){
      public void run(){
        CoverageDataManager.getInstance(myProject).chooseSuitesBundle(suite);
      }
    }
)) {
      return;
    }
  }
  final Set<File> outputFiles=engine.getCorrespondingOutputFiles(myFile,module,suite);
  final boolean subCoverageActive=CoverageDataManager.getInstance(myProject).isSubCoverageActive();
  final boolean coverageByTestApplicable=suite.isCoverageByTestApplicable() && !(subCoverageActive && suite.isCoverageByTestEnabled());
  final TreeMap<Integer,LineData> executableLines=new TreeMap<Integer,LineData>();
  final TreeMap<Integer,Object[]> classLines=new TreeMap<Integer,Object[]>();
  final TreeMap<Integer,String> classNames=new TreeMap<Integer,String>();
class HighlightersCollector {
    private void collect(    File outputFile,    final String qualifiedName){
      final ClassData fileData=data.getClassData(qualifiedName);
      if (fileData != null) {
        final Object[] lines=fileData.getLines();
        if (lines != null) {
          final Object[] postProcessedLines=suite.getCoverageEngine().postProcessExecutableLines(lines,myEditor);
          for (          Object lineData : postProcessedLines) {
            if (lineData instanceof LineData) {
              final int line=((LineData)lineData).getLineNumber() - 1;
              final int lineNumberInCurrent;
              if (oldToNewLineMapping != null) {
                if (!oldToNewLineMapping.contains(line)) {
                  continue;
                }
                lineNumberInCurrent=oldToNewLineMapping.get(line);
              }
 else {
                lineNumberInCurrent=line;
              }
              LOG.assertTrue(lineNumberInCurrent < myDocument.getLineCount());
              executableLines.put(line,(LineData)lineData);
              classLines.put(line,postProcessedLines);
              classNames.put(line,qualifiedName);
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  if (myDocument == null || lineNumberInCurrent >= myDocument.getLineCount())                   return;
                  final RangeHighlighter highlighter=createRangeHighlighter(suite.getLastCoverageTimeStamp(),markupModel,coverageByTestApplicable,executableLines,qualifiedName,line,lineNumberInCurrent,suite,postProcessedLines);
                  highlighters.add(highlighter);
                }
              }
);
            }
          }
        }
      }
 else       if (outputFile != null && !subCoverageActive && engine.includeUntouchedFileInCoverage(qualifiedName,outputFile,myFile,suite)) {
        collectNonCoveredFileInfo(outputFile,highlighters,markupModel,executableLines,coverageByTestApplicable);
      }
    }
  }
  final HighlightersCollector collector=new HighlightersCollector();
  if (!outputFiles.isEmpty()) {
    for (    File outputFile : outputFiles) {
      final String qualifiedName=engine.getQualifiedName(outputFile,myFile);
      if (qualifiedName != null) {
        collector.collect(outputFile,qualifiedName);
      }
    }
  }
 else {
    for (    String qName : qualifiedNames) {
      collector.collect(null,qName);
    }
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myEditor != null && highlighters.size() > 0) {
        myEditor.putUserData(COVERAGE_HIGHLIGHTERS,highlighters);
      }
    }
  }
);
  final DocumentListener documentListener=new DocumentAdapter(){
    @Override public void documentChanged(    final DocumentEvent e){
      myNewToOldLines=null;
      myOldToNewLines=null;
      List<RangeHighlighter> rangeHighlighters=myEditor.getUserData(COVERAGE_HIGHLIGHTERS);
      if (rangeHighlighters == null)       rangeHighlighters=new ArrayList<RangeHighlighter>();
      int offset=e.getOffset();
      final int lineNumber=myDocument.getLineNumber(offset);
      final int lastLineNumber=myDocument.getLineNumber(offset + e.getNewLength());
      final TextRange changeRange=new TextRange(myDocument.getLineStartOffset(lineNumber),myDocument.getLineEndOffset(lastLineNumber));
      for (Iterator<RangeHighlighter> it=rangeHighlighters.iterator(); it.hasNext(); ) {
        final RangeHighlighter highlighter=it.next();
        if (!highlighter.isValid() || TextRange.create(highlighter).intersects(changeRange)) {
          highlighter.dispose();
          it.remove();
        }
      }
      final List<RangeHighlighter> highlighters=rangeHighlighters;
      myUpdateAlarm.cancelAllRequests();
      if (!myUpdateAlarm.isDisposed()) {
        myUpdateAlarm.addRequest(new Runnable(){
          @Override public void run(){
            final TIntIntHashMap newToOldLineMapping=getNewToOldLineMapping(suite.getLastCoverageTimeStamp());
            if (newToOldLineMapping != null) {
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  if (myEditor == null)                   return;
                  for (int line=lineNumber; line <= lastLineNumber; line++) {
                    final int oldLineNumber=newToOldLineMapping.get(line);
                    final LineData lineData=executableLines.get(oldLineNumber);
                    if (lineData != null) {
                      RangeHighlighter rangeHighlighter=createRangeHighlighter(suite.getLastCoverageTimeStamp(),markupModel,coverageByTestApplicable,executableLines,classNames.get(oldLineNumber),oldLineNumber,line,suite,classLines.get(oldLineNumber));
                      highlighters.add(rangeHighlighter);
                    }
                  }
                  myEditor.putUserData(COVERAGE_HIGHLIGHTERS,highlighters.size() > 0 ? highlighters : null);
                }
              }
);
            }
          }
        }
,100);
      }
    }
  }
;
  myDocument.addDocumentListener(documentListener);
  myEditor.putUserData(COVERAGE_DOCUMENT_LISTENER,documentListener);
}
