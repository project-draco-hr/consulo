{
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  final TextAttributes attributes=scheme.getAttributes(CoverageLineMarkerRenderer.getAttributesKey(line,executableLines));
  TextAttributes textAttributes=null;
  if (attributes.getBackgroundColor() != null) {
    textAttributes=attributes;
  }
  final int startOffset=myDocument.getLineStartOffset(lineNumberInCurrent);
  final int endOffset=myDocument.getLineEndOffset(lineNumberInCurrent);
  final RangeHighlighter highlighter=markupModel.addRangeHighlighter(startOffset,endOffset,HighlighterLayer.SELECTION - 1,textAttributes,HighlighterTargetArea.LINES_IN_RANGE);
  final Function<Integer,Integer> newToOldConverter=new Function<Integer,Integer>(){
    public Integer fun(    final Integer newLine){
      if (myEditor == null)       return -1;
      final TIntIntHashMap oldLineMapping=getNewToOldLineMapping(date);
      return oldLineMapping != null ? oldLineMapping.get(newLine.intValue()) : newLine.intValue();
    }
  }
;
  final Function<Integer,Integer> oldToNewConverter=new Function<Integer,Integer>(){
    public Integer fun(    final Integer newLine){
      if (myEditor == null)       return -1;
      final TIntIntHashMap newLineMapping=getOldToNewLineMapping(date);
      return newLineMapping != null ? newLineMapping.get(newLine.intValue()) : newLine.intValue();
    }
  }
;
  final CoverageLineMarkerRenderer markerRenderer=coverageSuite.getCoverageEngine().getLineMarkerRenderer(line,className,executableLines,coverageByTestApplicable,coverageSuite,newToOldConverter,oldToNewConverter,CoverageDataManager.getInstance(myProject).isSubCoverageActive());
  highlighter.setLineMarkerRenderer(markerRenderer);
  final LineData lineData=className != null ? (LineData)lines[line + 1] : null;
  if (lineData != null && lineData.getStatus() == LineCoverage.NONE) {
    highlighter.setErrorStripeMarkColor(markerRenderer.getErrorStripeColor(myEditor));
    highlighter.setThinErrorStripeMark(true);
    highlighter.setGreedyToLeft(true);
    highlighter.setGreedyToRight(true);
  }
  return highlighter;
}
