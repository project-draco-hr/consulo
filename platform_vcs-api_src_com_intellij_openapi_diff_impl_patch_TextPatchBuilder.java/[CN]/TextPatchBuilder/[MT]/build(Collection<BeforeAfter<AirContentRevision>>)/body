{
  List<FilePatch> result=new ArrayList<FilePatch>();
  for (  BeforeAfter<AirContentRevision> c : changes) {
    checkCanceled();
    final AirContentRevision beforeRevision;
    final AirContentRevision afterRevision;
    if (myIsReversePath) {
      beforeRevision=c.getAfter();
      afterRevision=c.getBefore();
    }
 else {
      beforeRevision=c.getBefore();
      afterRevision=c.getAfter();
    }
    if (beforeRevision != null && beforeRevision.getPath().isDirectory()) {
      continue;
    }
    if (afterRevision != null && afterRevision.getPath().isDirectory()) {
      continue;
    }
    if ((beforeRevision != null) && beforeRevision.isBinary() || (afterRevision != null) && afterRevision.isBinary()) {
      result.add(buildBinaryPatch(myBasePath,beforeRevision,afterRevision));
      continue;
    }
    if (beforeRevision == null) {
      result.add(buildAddedFile(myBasePath,afterRevision));
      continue;
    }
    if (afterRevision == null) {
      result.add(buildDeletedFile(myBasePath,beforeRevision));
      continue;
    }
    final String beforeContent=beforeRevision.getContentAsString();
    if (beforeContent == null) {
      throw new VcsException("Failed to fetch old content for changed file " + beforeRevision.getPath().getPath());
    }
    final String afterContent=afterRevision.getContentAsString();
    if (afterContent == null) {
      throw new VcsException("Failed to fetch new content for changed file " + afterRevision.getPath().getPath());
    }
    String[] beforeLines=new LineTokenizer(beforeContent).execute();
    String[] afterLines=new LineTokenizer(afterContent).execute();
    DiffFragment[] woFormattingBlocks=DiffPolicy.LINES_WO_FORMATTING.buildFragments(beforeContent,afterContent);
    DiffFragment[] step1lineFragments=new DiffCorrection.TrueLineBlocks(ComparisonPolicy.DEFAULT).correctAndNormalize(woFormattingBlocks);
    ArrayList<LineFragment> fragments=new DiffFragmentsProcessor().process(step1lineFragments);
    if (fragments.size() > 1 || (fragments.size() == 1 && fragments.get(0).getType() != null && fragments.get(0).getType() != TextDiffTypeEnum.NONE)) {
      TextFilePatch patch=buildPatchHeading(myBasePath,beforeRevision,afterRevision);
      result.add(patch);
      int lastLine1=0;
      int lastLine2=0;
      while (fragments.size() > 0) {
        checkCanceled();
        List<LineFragment> adjacentFragments=getAdjacentFragments(fragments);
        if (adjacentFragments.size() > 0) {
          LineFragment first=adjacentFragments.get(0);
          LineFragment last=adjacentFragments.get(adjacentFragments.size() - 1);
          final int start1=first.getStartingLine1();
          final int start2=first.getStartingLine2();
          final int end1=last.getStartingLine1() + last.getModifiedLines1();
          final int end2=last.getStartingLine2() + last.getModifiedLines2();
          int contextStart1=Math.max(start1 - CONTEXT_LINES,lastLine1);
          int contextStart2=Math.max(start2 - CONTEXT_LINES,lastLine2);
          int contextEnd1=Math.min(end1 + CONTEXT_LINES,beforeLines.length);
          int contextEnd2=Math.min(end2 + CONTEXT_LINES,afterLines.length);
          PatchHunk hunk=new PatchHunk(contextStart1,contextEnd1,contextStart2,contextEnd2);
          patch.addHunk(hunk);
          for (          LineFragment fragment : adjacentFragments) {
            checkCanceled();
            for (int i=contextStart1; i < fragment.getStartingLine1(); i++) {
              addLineToHunk(hunk,beforeLines[i],PatchLine.Type.CONTEXT);
            }
            for (int i=fragment.getStartingLine1(); i < fragment.getStartingLine1() + fragment.getModifiedLines1(); i++) {
              addLineToHunk(hunk,beforeLines[i],PatchLine.Type.REMOVE);
            }
            for (int i=fragment.getStartingLine2(); i < fragment.getStartingLine2() + fragment.getModifiedLines2(); i++) {
              addLineToHunk(hunk,afterLines[i],PatchLine.Type.ADD);
            }
            contextStart1=fragment.getStartingLine1() + fragment.getModifiedLines1();
          }
          for (int i=contextStart1; i < contextEnd1; i++) {
            addLineToHunk(hunk,beforeLines[i],PatchLine.Type.CONTEXT);
          }
        }
      }
    }
 else     if (!beforeRevision.getPath().equals(afterRevision.getPath())) {
      result.add(buildMovedFile(myBasePath,beforeRevision,afterRevision,beforeLines));
    }
  }
  return result;
}
