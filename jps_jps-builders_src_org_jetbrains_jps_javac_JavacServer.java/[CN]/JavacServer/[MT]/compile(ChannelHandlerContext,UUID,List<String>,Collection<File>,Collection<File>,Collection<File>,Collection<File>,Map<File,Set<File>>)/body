{
  final DiagnosticOutputConsumer diagnostic=new DiagnosticOutputConsumer(){
    public void outputLineAvailable(    String line){
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createStdOutputResponse(line)));
    }
    public void report(    Diagnostic<? extends JavaFileObject> diagnostic){
      final Diagnostic.Kind kind=diagnostic.getKind();
      final JavaFileObject source=diagnostic.getSource();
      final String srcPath=source != null ? source.toUri().getPath() : null;
      final JavacRemoteProto.Message.Response response=JavacProtoUtil.createBuildMessageResponse(kind,diagnostic.getMessage(Locale.US),srcPath,diagnostic.getLineNumber(),diagnostic.getColumnNumber(),diagnostic.getStartPosition(),diagnostic.getEndPosition());
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,response));
    }
  }
;
  final OutputFileConsumer outputSink=new OutputFileConsumer(){
    public void save(    @NotNull OutputFileObject fileObject){
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createOutputObjectResponse(fileObject)));
    }
  }
;
  final boolean rc=JavacMain.compile(options,files,classpath,platformCp,sourcePath,outs,diagnostic,outputSink,null);
  return JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createBuildCompletedResponse(rc));
}
