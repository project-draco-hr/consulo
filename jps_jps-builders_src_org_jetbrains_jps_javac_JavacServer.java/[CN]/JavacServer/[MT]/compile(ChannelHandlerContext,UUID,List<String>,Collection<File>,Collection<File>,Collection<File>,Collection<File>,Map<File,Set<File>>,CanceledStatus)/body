{
  final DiagnosticOutputConsumer diagnostic=new DiagnosticOutputConsumer(){
    public void outputLineAvailable(    String line){
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createStdOutputResponse(line)));
    }
    public void report(    Diagnostic<? extends JavaFileObject> diagnostic){
      final JavacRemoteProto.Message.Response response=JavacProtoUtil.createBuildMessageResponse(diagnostic);
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,response));
    }
  }
;
  final OutputFileConsumer outputSink=new OutputFileConsumer(){
    public void save(    @NotNull OutputFileObject fileObject){
      Channels.write(ctx.getChannel(),JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createOutputObjectResponse(fileObject)));
    }
  }
;
  try {
    final boolean rc=JavacMain.compile(options,files,classpath,platformCp,sourcePath,outs,diagnostic,outputSink,canceledStatus);
    return JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createBuildCompletedResponse(rc));
  }
 catch (  Throwable e) {
    e.printStackTrace(System.err);
    return JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createFailure(e.getMessage(),e));
  }
}
