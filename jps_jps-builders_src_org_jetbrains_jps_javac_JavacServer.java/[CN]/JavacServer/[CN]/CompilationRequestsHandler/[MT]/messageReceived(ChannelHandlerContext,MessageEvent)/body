{
  final JavacRemoteProto.Message msg=(JavacRemoteProto.Message)e.getMessage();
  final UUID sessionId=JavacProtoUtil.fromProtoUUID(msg.getSessionId());
  final JavacRemoteProto.Message.Type messageType=msg.getMessageType();
  JavacRemoteProto.Message reply=null;
  try {
    if (messageType == JavacRemoteProto.Message.Type.REQUEST) {
      final JavacRemoteProto.Message.Request request=msg.getRequest();
      final JavacRemoteProto.Message.Request.Type requestType=request.getRequestType();
      if (requestType == JavacRemoteProto.Message.Request.Type.COMPILE) {
        final List<String> options=request.getOptionList();
        final List<File> files=toFiles(request.getFileList());
        final List<File> cp=toFiles(request.getClasspathList());
        final List<File> platformCp=toFiles(request.getPlatformClasspathList());
        final List<File> srcPath=toFiles(request.getSourcepathList());
        final Map<File,Set<File>> outs=new HashMap<File,Set<File>>();
        for (        JavacRemoteProto.Message.Request.OutputGroup outputGroup : request.getOutputList()) {
          final Set<File> srcRoots=new HashSet<File>();
          for (          String root : outputGroup.getSourceRootList()) {
            srcRoots.add(new File(root));
          }
          outs.put(new File(outputGroup.getOutputRoot()),srcRoots);
        }
        final CancelHandler cancelHandler=new CancelHandler();
        myCancelHandlers.add(cancelHandler);
        SharedThreadPool.INSTANCE.submit(new Runnable(){
          public void run(){
            try {
              final JavacRemoteProto.Message exitMsg=compile(ctx,sessionId,options,files,cp,platformCp,srcPath,outs,cancelHandler);
              Channels.write(ctx.getChannel(),exitMsg);
            }
  finally {
              myCancelHandlers.remove(cancelHandler);
            }
          }
        }
);
      }
 else       if (requestType == JavacRemoteProto.Message.Request.Type.CANCEL) {
        cancelBuilds();
        reply=JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createRequestAckResponse());
      }
 else       if (requestType == JavacRemoteProto.Message.Request.Type.SHUTDOWN) {
        cancelBuilds();
        new Thread("StopThread"){
          public void run(){
            try {
              JavacServer.this.stop();
            }
  finally {
              System.exit(0);
            }
          }
        }
.start();
      }
 else {
        reply=JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createFailure("Unsupported request type: " + requestType.name(),null));
      }
    }
 else {
      reply=JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createFailure("Unsupported message: " + messageType.name(),null));
    }
  }
  finally {
    if (reply != null) {
      Channels.write(ctx.getChannel(),reply);
    }
  }
}
