{
  PsiDirectory psiDirectory=null;
  PsiElement psiElement=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  if (psiElement instanceof PsiDirectory) {
    psiDirectory=(PsiDirectory)psiElement;
  }
  final PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataContext);
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  String shortFileName=null;
  String directoryName=null;
  if (psiFile != null || psiDirectory != null) {
    if (psiFile != null) {
      shortFileName=psiFile.getVirtualFile().getName();
      if (psiDirectory == null) {
        psiDirectory=psiFile.getContainingDirectory();
      }
    }
    if (psiDirectory != null) {
      directoryName=psiDirectory.getVirtualFile().getPresentableUrl();
    }
  }
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  boolean isSelectedTextEnabled=false;
  if (editor != null && editor.getSelectionModel().hasSelection()) {
    isSelectedTextEnabled=true;
  }
  ExportToHTMLDialog exportToHTMLDialog=new ExportToHTMLDialog(shortFileName,directoryName,isSelectedTextEnabled,project);
  ExportToHTMLSettings exportToHTMLSettings=ExportToHTMLSettings.getInstance(project);
  if (exportToHTMLSettings.OUTPUT_DIRECTORY == null) {
    final VirtualFile baseDir=project.getBaseDir();
    if (baseDir != null) {
      exportToHTMLSettings.OUTPUT_DIRECTORY=baseDir.getPresentableUrl() + File.separator + "exportToHTML";
    }
 else {
      exportToHTMLSettings.OUTPUT_DIRECTORY="";
    }
  }
  exportToHTMLDialog.reset();
  exportToHTMLDialog.show();
  if (!exportToHTMLDialog.isOK()) {
    return;
  }
  try {
    exportToHTMLDialog.apply();
  }
 catch (  ConfigurationException e) {
    Messages.showErrorDialog(project,e.getMessage(),CommonBundle.getErrorTitle());
  }
  final String outputDirectoryName=exportToHTMLSettings.OUTPUT_DIRECTORY;
  if (exportToHTMLSettings.getPrintScope() != PrintSettings.PRINT_DIRECTORY) {
    if (psiFile == null || psiFile.getText() == null) {
      return;
    }
    final String dirName=constructOutputDirectory(psiFile,outputDirectoryName);
    HTMLTextPainter textPainter=new HTMLTextPainter(psiFile,project,dirName,exportToHTMLSettings.PRINT_LINE_NUMBERS);
    if (exportToHTMLSettings.getPrintScope() == PrintSettings.PRINT_SELECTED_TEXT && editor != null && editor.getSelectionModel().hasSelection()) {
      int firstLine=editor.getDocument().getLineNumber(editor.getSelectionModel().getSelectionStart());
      textPainter.setSegment(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd(),firstLine);
    }
    textPainter.paint(null,psiFile.getFileType());
    if (exportToHTMLSettings.OPEN_IN_BROWSER) {
      BrowserUtil.launchBrowser(textPainter.getHTMLFileName());
    }
  }
 else {
    myLastException=null;
    ExportRunnable exportRunnable=new ExportRunnable(exportToHTMLSettings,psiDirectory,outputDirectoryName,project);
    ProgressManager.getInstance().runProcessWithProgressSynchronously(exportRunnable,CodeEditorBundle.message("export.to.html.title"),true,project);
    if (myLastException != null) {
      throw myLastException;
    }
  }
}
