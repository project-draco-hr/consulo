{
  if (ArrayUtil.find(file.getPsiRoots(),file) != 0)   return null;
  VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile == null)   return null;
  String text=file.getText();
  Charset charset=LoadTextUtil.extractCharsetFromFileContent(file.getProject(),virtualFile,text);
  if (charset instanceof Native2AsciiCharset)   return null;
  int errorCount=0;
  int start=-1;
  List<ProblemDescriptor> descriptors=new SmartList<ProblemDescriptor>();
  for (int i=0; i <= text.length(); i++) {
    char c=i == text.length() ? 0 : text.charAt(i);
    if (i == text.length() || isRepresentable(c,charset)) {
      if (start != -1) {
        TextRange range=new TextRange(start,i);
        String message=InspectionsBundle.message("unsupported.character.for.the.charset",charset);
        ProblemDescriptor descriptor=manager.createProblemDescriptor(file,range,message,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly,CHANGE_ENCODING_FIX);
        descriptors.add(descriptor);
        start=-1;
        if (errorCount++ > 200)         break;
      }
    }
 else     if (start == -1) {
      start=i;
    }
  }
  return descriptors.toArray(new ProblemDescriptor[descriptors.size()]);
}
