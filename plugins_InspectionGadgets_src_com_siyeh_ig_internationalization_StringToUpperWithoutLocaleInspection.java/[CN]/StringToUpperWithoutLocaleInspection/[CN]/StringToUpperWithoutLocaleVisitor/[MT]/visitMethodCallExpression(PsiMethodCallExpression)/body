{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.TO_UPPER_CASE.equals(methodName) && !HardcodedMethodConstants.TO_LOWER_CASE.equals(methodName)) {
    return;
  }
  if (NonNlsUtils.isNonNlsAnnotatedUse(expression)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() == 1) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String className=containingClass.getQualifiedName();
  if (!"java.lang.String".equals(className)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (NonNlsUtils.isNonNlsAnnotated(qualifier)) {
    return;
  }
  registerMethodCallError(expression);
}
