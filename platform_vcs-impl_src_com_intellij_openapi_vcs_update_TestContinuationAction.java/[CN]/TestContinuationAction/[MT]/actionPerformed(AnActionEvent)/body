{
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null)   return;
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Test Continuation",true,new PerformInBackgroundOption(){
    @Override public boolean shouldStartInBackground(){
      return false;
    }
    @Override public void processSentToBackground(){
    }
  }
){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final Continuation continuation=Continuation.createForCurrentProgress(project,true,e.getPresentation().getText());
      final ReportTask finalBlock=new ReportTask("I'm finally block!");
      finalBlock.setHaveMagicCure(true);
      continuation.run(new TaskDescriptor[]{new LongTaskDescriptor("First"),new ReportTask("First complete"),new TaskDescriptor("Adding task",Where.POOLED){
        @Override public void run(        final ContinuationContext context){
          addMore(context);
          try {
            Thread.sleep(10000);
          }
 catch (          InterruptedException e1) {
          }
        }
      }
,new LongTaskDescriptor("Second"),new ReportTask("Second complete"),new TaskDescriptor("Adding task 2",Where.POOLED){
        @Override public void run(        final ContinuationContext context){
          addMoreSurviving(context);
          try {
            Thread.sleep(10000);
          }
 catch (          InterruptedException e1) {
          }
          context.suspend();
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              context.ping();
            }
          }
,ModalityState.NON_MODAL);
        }
      }
,new LongTaskDescriptor("Third"),new ReportTask("Third complete"),finalBlock});
    }
    @Override public void onCancel(){
      Messages.showInfoMessage("cancel!",myTitle);
    }
    @Override public void onSuccess(){
      Messages.showInfoMessage("success!",myTitle);
    }
  }
);
}
