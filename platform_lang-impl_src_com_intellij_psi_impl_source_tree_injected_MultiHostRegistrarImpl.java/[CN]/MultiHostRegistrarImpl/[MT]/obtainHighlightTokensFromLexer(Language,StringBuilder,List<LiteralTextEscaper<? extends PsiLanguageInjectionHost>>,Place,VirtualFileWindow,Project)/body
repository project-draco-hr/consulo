{
  List<Trinity<IElementType,SmartPsiElementPointer<PsiLanguageInjectionHost>,TextRange>> tokens=new ArrayList<Trinity<IElementType,SmartPsiElementPointer<PsiLanguageInjectionHost>,TextRange>>(10);
  SyntaxHighlighter syntaxHighlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(language,project,(VirtualFile)virtualFile);
  Lexer lexer=syntaxHighlighter.getHighlightingLexer();
  lexer.start(outChars);
  int hostNum=-1;
  int prevHostEndOffset=0;
  SmartPsiElementPointer<PsiLanguageInjectionHost> host=null;
  LiteralTextEscaper<? extends PsiLanguageInjectionHost> escaper=null;
  int prefixLength=0;
  int suffixLength=0;
  TextRange rangeInsideHost=null;
  int shredEndOffset=-1;
  for (IElementType tokenType=lexer.getTokenType(); tokenType != null; lexer.advance(), tokenType=lexer.getTokenType()) {
    TextRange range=new ProperTextRange(lexer.getTokenStart(),lexer.getTokenEnd());
    while (range != null && !range.isEmpty()) {
      if (range.getStartOffset() >= shredEndOffset) {
        hostNum++;
        PsiLanguageInjectionHost.Shred shred=shreds.get(hostNum);
        shredEndOffset=shred.getRange().getEndOffset();
        prevHostEndOffset=range.getStartOffset();
        host=((ShredImpl)shred).getSmartPointer();
        escaper=escapers.get(hostNum);
        rangeInsideHost=shred.getRangeInsideHost();
        prefixLength=shred.getPrefix().length();
        suffixLength=shred.getSuffix().length();
      }
      if (range.getStartOffset() < prevHostEndOffset + prefixLength) {
        range=new UnfairTextRange(prevHostEndOffset + prefixLength,range.getEndOffset());
      }
      TextRange spilled=null;
      if (range.getEndOffset() > shredEndOffset - suffixLength) {
        spilled=new UnfairTextRange(shredEndOffset,range.getEndOffset());
        range=new UnfairTextRange(range.getStartOffset(),shredEndOffset - suffixLength);
      }
      if (!range.isEmpty()) {
        int start=escaper.getOffsetInHost(range.getStartOffset() - prevHostEndOffset - prefixLength,rangeInsideHost);
        if (start == -1)         start=rangeInsideHost.getStartOffset();
        int end=escaper.getOffsetInHost(range.getEndOffset() - prevHostEndOffset - prefixLength,rangeInsideHost);
        if (end == -1) {
          end=rangeInsideHost.getEndOffset();
          prevHostEndOffset=shredEndOffset;
        }
        TextRange rangeInHost=new ProperTextRange(start,end);
        tokens.add(Trinity.create(tokenType,host,rangeInHost));
      }
      range=spilled;
    }
  }
  return tokens;
}
