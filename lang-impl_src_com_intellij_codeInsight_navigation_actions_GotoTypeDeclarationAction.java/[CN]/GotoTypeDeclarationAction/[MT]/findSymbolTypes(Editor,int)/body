{
  PsiElement targetElement=TargetElementUtilBase.getInstance().findTargetElement(editor,TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.LOOKUP_ITEM_ACCEPTED,offset);
  if (targetElement != null) {
    final PsiElement symbolType=getSymbolType(targetElement);
    return symbolType == null ? PsiElement.EMPTY_ARRAY : new PsiElement[]{symbolType};
  }
 else {
    final PsiReference psiReference=TargetElementUtilBase.findReference(editor,offset);
    if (psiReference instanceof PsiPolyVariantReference) {
      final ResolveResult[] results=((PsiPolyVariantReference)psiReference).multiResolve(false);
      Set<PsiElement> types=new THashSet<PsiElement>();
      for (      ResolveResult r : results) {
        final PsiElement element=getSymbolType(r.getElement());
        if (element != null)         types.add(element);
      }
      if (types.size() > 0)       return types.toArray(new PsiElement[types.size()]);
    }
  }
  return null;
}
