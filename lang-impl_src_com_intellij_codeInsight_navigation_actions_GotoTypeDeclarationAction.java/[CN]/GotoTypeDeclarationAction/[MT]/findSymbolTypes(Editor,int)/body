{
  PsiElement targetElement=TargetElementUtilBase.getInstance().findTargetElement(editor,TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.LOOKUP_ITEM_ACCEPTED,offset);
  if (targetElement != null) {
    final PsiElement[] symbolType=getSymbolTypeDeclarations(targetElement);
    return symbolType == null ? PsiElement.EMPTY_ARRAY : symbolType;
  }
  final PsiReference psiReference=TargetElementUtilBase.findReference(editor,offset);
  if (psiReference instanceof PsiPolyVariantReference) {
    final ResolveResult[] results=((PsiPolyVariantReference)psiReference).multiResolve(false);
    Set<PsiElement> types=new THashSet<PsiElement>();
    for (    ResolveResult r : results) {
      final PsiElement[] declarations=getSymbolTypeDeclarations(r.getElement());
      if (declarations != null) {
        for (        PsiElement declaration : declarations) {
          types.add(declaration);
        }
      }
    }
    if (!types.isEmpty())     return types.toArray(new PsiElement[types.size()]);
  }
  return null;
}
