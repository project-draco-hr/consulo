{
  final SchemaReader sr=schemaFile.getFileType() == RncFileType.getInstance() ? CompactSchemaReader.getInstance() : new AutoSchemaReader();
  final PropertyMapBuilder properties=new PropertyMapBuilder();
  ValidateProperty.ERROR_HANDLER.put(properties,eh);
  RngProperty.CHECK_ID_IDREF.add(properties);
  try {
    final String schemaPath=RngParser.reallyFixIDEAUrl(schemaFile.getUrl());
    try {
      final ValidationDriver driver=new ValidationDriver(properties.toPropertyMap(),sr);
      final InputSource in=ValidationDriver.uriOrFileInputSource(schemaPath);
      in.setEncoding(schemaFile.getCharset().name());
      if (driver.loadSchema(in)) {
        final String path=RngParser.reallyFixIDEAUrl(instanceFile.getUrl());
        try {
          driver.validate(ValidationDriver.uriOrFileInputSource(path));
        }
 catch (        IOException e1) {
          eh.fatalError(new SAXParseException(e1.getMessage(),null,UriOrFile.fileToUri(path),-1,-1,e1));
        }
      }
    }
 catch (    SAXParseException e1) {
      eh.fatalError(e1);
    }
catch (    IOException e1) {
      eh.fatalError(new SAXParseException(e1.getMessage(),null,UriOrFile.fileToUri(schemaPath),-1,-1,e1));
    }
  }
 catch (  SAXException e1) {
    Logger.getInstance(ValidateAction.class.getName()).error(e1);
  }
catch (  MalformedURLException e1) {
    Logger.getInstance(ValidateAction.class.getName()).error(e1);
  }
}
