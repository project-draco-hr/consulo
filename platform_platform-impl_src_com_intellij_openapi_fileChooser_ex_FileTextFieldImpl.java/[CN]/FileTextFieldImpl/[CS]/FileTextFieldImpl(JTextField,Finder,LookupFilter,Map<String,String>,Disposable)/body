{
  myPathTextField=field;
  myMacroMap=new TreeMap<String,String>();
  myMacroMap.putAll(macroMap);
  final InputMap listMap=(InputMap)UIManager.getDefaults().get("List.focusInputMap");
  final KeyStroke[] listKeys=listMap.keys();
  myDisabledTextActions=new HashSet<Action>();
  for (  KeyStroke eachListStroke : listKeys) {
    final String listActionID=(String)listMap.get(eachListStroke);
    if ("selectNextRow".equals(listActionID) || "selectPreviousRow".equals(listActionID)) {
      final String textActionID=(String)field.getInputMap().get(eachListStroke);
      if (textActionID != null) {
        final Action textAction=field.getActionMap().get(textActionID);
        if (textAction != null) {
          myDisabledTextActions.add(textAction);
        }
      }
    }
  }
  final FileTextFieldImpl assigned=(FileTextFieldImpl)myPathTextField.getClientProperty(KEY);
  if (assigned != null) {
    assigned.myFinder=finder;
    assigned.myFilter=filter;
    return;
  }
  myPathTextField.putClientProperty(KEY,this);
  final boolean headless=ApplicationManager.getApplication().isUnitTestMode();
  myUiUpdater=new MergingUpdateQueue("FileTextField.UiUpdater",200,false,myPathTextField);
  if (!headless) {
    new UiNotifyConnector(myPathTextField,myUiUpdater);
  }
  myFinder=finder;
  myFilter=filter;
  myFileSpitRegExp=myFinder.getSeparator().replaceAll("\\\\","\\\\\\\\");
  myPathTextField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      processTextChanged();
    }
    public void removeUpdate(    final DocumentEvent e){
      processTextChanged();
    }
    public void changedUpdate(    final DocumentEvent e){
      processTextChanged();
    }
  }
);
  myPathTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      processListSelection(e);
    }
  }
);
  myPathTextField.addFocusListener(new FocusAdapter(){
    public void focusLost(    final FocusEvent e){
      closePopup();
    }
  }
);
  myCancelAction=new CancelAction();
  new LazyUiDisposable<FileTextFieldImpl>(parent,field,this){
    protected void initialize(    @NotNull Disposable parent,    @NotNull FileTextFieldImpl child,    @Nullable Project project){
      Disposer.register(child,myUiUpdater);
    }
  }
;
}
