{
  String usagesString="";
  String suffix=" " + FindBundle.message("find.usages.panel.title.separator") + " ";
  ArrayList<String> strings=new ArrayList<String>();
  FindUsagesOptions localShownFindUsagesOptions=selectedOptions;
  if ((selectedOptions.isUsages && localShownFindUsagesOptions.isUsages) || (selectedOptions.isClassesUsages && localShownFindUsagesOptions.isClassesUsages) || (selectedOptions.isMethodsUsages && localShownFindUsagesOptions.isMethodsUsages)|| (selectedOptions.isFieldsUsages && localShownFindUsagesOptions.isFieldsUsages)) {
    strings.add(FindBundle.message("find.usages.panel.title.usages"));
  }
  if (selectedOptions.isIncludeOverloadUsages && localShownFindUsagesOptions.isIncludeOverloadUsages) {
    strings.add(FindBundle.message("find.usages.panel.title.overloaded.methods.usages"));
  }
  if ((selectedOptions.isDerivedClasses && localShownFindUsagesOptions.isDerivedClasses)) {
    strings.add(FindBundle.message("find.usages.panel.title.derived.classes"));
  }
  if ((selectedOptions.isDerivedInterfaces && localShownFindUsagesOptions.isDerivedInterfaces)) {
    strings.add(FindBundle.message("find.usages.panel.title.derived.interfaces"));
  }
  if ((selectedOptions.isImplementingClasses && localShownFindUsagesOptions.isImplementingClasses)) {
    strings.add(FindBundle.message("find.usages.panel.title.implementing.classes"));
  }
  if ((selectedOptions.isImplementingMethods && localShownFindUsagesOptions.isImplementingMethods)) {
    strings.add(FindBundle.message("find.usages.panel.title.implementing.methods"));
  }
  if ((selectedOptions.isOverridingMethods && localShownFindUsagesOptions.isOverridingMethods)) {
    strings.add(FindBundle.message("find.usages.panel.title.overriding.methods"));
  }
  if (strings.size() == 0) {
    strings.add(FindBundle.message("find.usages.panel.title.usages"));
  }
  for (int i=0; i < strings.size(); i++) {
    String s=strings.get(i);
    usagesString+=(i == strings.size() - 1) ? s : s + suffix;
  }
  return usagesString;
}
