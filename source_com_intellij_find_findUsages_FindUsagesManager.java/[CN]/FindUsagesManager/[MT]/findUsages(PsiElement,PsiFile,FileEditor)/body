{
  PsiElement[] elementsToSearch=null;
  PsiElement[] secondaryElementsToSearch=null;
  if (!canFindUsages(psiElement)) {
    return;
  }
  if (psiElement instanceof PsiDirectory) {
    PsiPackage psiPackage=((PsiDirectory)psiElement).getPackage();
    if (psiPackage == null) {
      return;
    }
    psiElement=psiPackage;
  }
  final String actionString=FindBundle.message("find.super.method.warning.action.verb");
  if (psiElement instanceof PsiMethod) {
    final PsiMethod[] methods=SuperMethodWarningUtil.checkSuperMethods((PsiMethod)psiElement,actionString);
    if (methods.length > 1) {
      elementsToSearch=methods;
    }
 else     if (methods.length == 1) {
      psiElement=methods[0];
    }
 else {
      return;
    }
  }
  if (psiElement == null) {
    return;
  }
  final FindUsagesDialog dialog=getFindUsagesDialog(psiElement,scopeFile != null);
  if (!showDialog(dialog))   return;
  FindUsagesOptions findUsagesOptions=dialog.calcFindUsagesOptions();
  clearFindingNextUsageInFile();
  LOG.assertTrue(psiElement.isValid());
  if (psiElement instanceof PsiParameter) {
    final PsiParameter parameter=(PsiParameter)psiElement;
    final PsiElement scope=parameter.getDeclarationScope();
    if (scope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)scope;
      if (PsiUtil.canBeOverriden(method)) {
        final PsiClass aClass=method.getContainingClass();
        LOG.assertTrue(aClass != null);
        if (aClass.isInterface() || method.hasModifierProperty(PsiModifier.ABSTRACT) || shouldSearchForParameterInOverridingMethods(psiElement,parameter)) {
          elementsToSearch=getParameterElementsToSearch(parameter);
        }
      }
    }
  }
 else   if (psiElement instanceof PsiField) {
    final PsiField field=(PsiField)psiElement;
    if (field.getContainingClass() != null) {
      final String propertyName=field.getManager().getCodeStyleManager().variableNameToPropertyName(field.getName(),VariableKind.FIELD);
      PsiMethod getter=PropertyUtil.findPropertyGetterWithType(propertyName,field.hasModifierProperty(PsiModifier.STATIC),field.getType(),ContainerUtil.iterate(field.getContainingClass().getMethods()));
      PsiMethod setter=PropertyUtil.findPropertySetterWithType(propertyName,field.hasModifierProperty(PsiModifier.STATIC),field.getType(),ContainerUtil.iterate(field.getContainingClass().getMethods()));
      if (getter != null || setter != null) {
        if (Messages.showDialog(FindBundle.message("find.field.accessors.prompt",field.getName()),FindBundle.message("find.field.accessors.title"),new String[]{CommonBundle.getYesButtonText(),CommonBundle.getNoButtonText()},0,Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE) {
          final List<PsiElement> elements=new ArrayList<PsiElement>();
          if (getter != null) {
            elements.addAll(Arrays.asList(SuperMethodWarningUtil.checkSuperMethods(getter,actionString)));
          }
          if (setter != null) {
            elements.addAll(Arrays.asList(SuperMethodWarningUtil.checkSuperMethods(setter,actionString)));
          }
          secondaryElementsToSearch=elements.toArray(new PsiElement[elements.size()]);
        }
      }
    }
  }
  if (elementsToSearch == null) {
    elementsToSearch=new PsiElement[]{psiElement};
  }
  final UsageInfoToUsageConverter.TargetElementsDescriptor descriptor=new UsageInfoToUsageConverter.TargetElementsDescriptor(elementsToSearch,secondaryElementsToSearch);
  if (scopeFile == null) {
    findUsages(descriptor,dialog.isSkipResultsWhenOneUsage(),dialog.isShowInSeparateWindow(),findUsagesOptions);
  }
 else {
    findUsagesOptions=(FindUsagesOptions)findUsagesOptions.clone();
    findUsagesOptions.isDerivedClasses=false;
    findUsagesOptions.isDerivedInterfaces=false;
    findUsagesOptions.isImplementingClasses=false;
    editor.putUserData(KEY_START_USAGE_AGAIN,null);
    findUsagesInEditor(descriptor,scopeFile,FROM_START,findUsagesOptions,editor);
  }
}
