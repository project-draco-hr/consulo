{
  return new UsageSearcher(){
    public void generate(    final Processor<Usage> processor){
      if (scopeFile != null) {
        options.searchScope=new LocalSearchScope(scopeFile);
      }
      for (int i=0; i < elementsToSearch.length; i++) {
        final PsiElement elementToSearch=elementsToSearch[i];
        if (elementToSearch != null && elementToSearch.isValid()) {
          FindUsagesUtil.processUsages(elementToSearch,new Processor<UsageInfo>(){
            public boolean process(            UsageInfo usageInfo){
              return processor.process(UsageInfoToUsageConverter.convert(usageInfo));
            }
          }
,options);
        }
      }
    }
  }
;
}
