{
  String usagesString="";
  String suffix=useAndWord ? " and " : " or ";
  ArrayList<String> strings=new ArrayList<String>();
  FindUsagesOptions localShownFindUsagesOptions=selectedOptions;
  if ((selectedOptions.isUsages && localShownFindUsagesOptions.isUsages) || (selectedOptions.isClassesUsages && localShownFindUsagesOptions.isClassesUsages) || (selectedOptions.isMethodsUsages && localShownFindUsagesOptions.isMethodsUsages)|| (selectedOptions.isFieldsUsages && localShownFindUsagesOptions.isFieldsUsages)) {
    strings.add(beginWithCapitals ? "Usages" : "usages");
  }
  if (selectedOptions.isIncludeOverloadUsages && localShownFindUsagesOptions.isIncludeOverloadUsages) {
    strings.add(beginWithCapitals ? "Overloaded Methods Usages" : "overloaded methods usages");
  }
  if ((selectedOptions.isDerivedClasses && localShownFindUsagesOptions.isDerivedClasses)) {
    strings.add(beginWithCapitals ? "Derived Classes" : "derived classes");
  }
  if ((selectedOptions.isDerivedInterfaces && localShownFindUsagesOptions.isDerivedInterfaces)) {
    strings.add(beginWithCapitals ? "Derived Interfaces" : "derived interfaces");
  }
  if ((selectedOptions.isImplementingClasses && localShownFindUsagesOptions.isImplementingClasses)) {
    strings.add(beginWithCapitals ? "Implementing Classes" : "implementing classes");
  }
  if ((selectedOptions.isImplementingMethods && localShownFindUsagesOptions.isImplementingMethods)) {
    strings.add(beginWithCapitals ? "Implementing Methods" : "implementing methods");
  }
  if ((selectedOptions.isOverridingMethods && localShownFindUsagesOptions.isOverridingMethods)) {
    strings.add(beginWithCapitals ? "Overriding Methods" : "overriding methods");
  }
  if (strings.size() == 0) {
    strings.add(beginWithCapitals ? "Usages" : "usages");
  }
  for (int i=0; i < strings.size(); i++) {
    String s=strings.get(i);
    usagesString+=(i == strings.size() - 1) ? s : s + suffix;
  }
  return usagesString;
}
