{
  myProject=project;
  myAnotherManager=anotherManager;
  final FindUsagesOptions findClassOptions=FindUsagesHandler.createFindUsagesOptions(project);
  final FindUsagesOptions findMethodOptions=FindUsagesHandler.createFindUsagesOptions(project);
  final FindUsagesOptions findPackageOptions=FindUsagesHandler.createFindUsagesOptions(project);
  final FindUsagesOptions findPointcutOptions=FindUsagesHandler.createFindUsagesOptions(project);
  final FindUsagesOptions findVariableOptions=FindUsagesHandler.createFindUsagesOptions(project);
  myHandlers.add(new Function<PsiElement,FindUsagesHandler>(){
    @Nullable public FindUsagesHandler fun(    final PsiElement element){
      if (element instanceof PsiFile && ((PsiFile)element).getVirtualFile() == null)       return null;
      if (!element.getLanguage().getFindUsagesProvider().canFindUsagesFor(element))       return null;
      if (element instanceof PsiDirectory) {
        PsiPackage psiPackage=((PsiDirectory)element).getPackage();
        return psiPackage == null ? null : new DefaultFindUsagesHandler(psiPackage,findClassOptions,findMethodOptions,findPackageOptions,findPointcutOptions,findVariableOptions);
      }
      if (element instanceof PsiMethod) {
        final PsiMethod[] methods=SuperMethodWarningUtil.checkSuperMethods((PsiMethod)element,DefaultFindUsagesHandler.ACTION_STRING);
        if (methods.length > 1) {
          return new DefaultFindUsagesHandler(element,methods,findClassOptions,findMethodOptions,findPackageOptions,findPointcutOptions,findVariableOptions);
        }
        if (methods.length == 1) {
          return new DefaultFindUsagesHandler(methods[0],findClassOptions,findMethodOptions,findPackageOptions,findPointcutOptions,findVariableOptions);
        }
        return null;
      }
      return new DefaultFindUsagesHandler(element,findClassOptions,findMethodOptions,findPackageOptions,findPointcutOptions,findVariableOptions);
    }
  }
);
}
