{
  super.addNotify();
  final Editor editor=getEditor();
  if (editor instanceof EditorImpl) {
    editor.putUserData(EditorImpl.EDITABLE_AREA_MARKER,Pair.create(myStartMarker,myEndMarker));
    indexParameters(createFromString(),INDEXER);
    ((EditorImpl)editor).setScrollToCaret(false);
    ((CaretModelImpl)editor.getCaretModel()).setIgnoreWrongMoves(true);
    final TextRange range=getCurrentSignatureTextRange();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        CodeStyleManager.getInstance(getProject()).reformatText(myFile,range.getStartOffset(),range.getEndOffset());
      }
    }
);
    editor.getCaretModel().addCaretListener(new CaretListener(){
      @Override public void caretPositionChanged(      CaretEvent e){
        createFromString();
        final LogicalPosition newPosition=e.getNewPosition();
        final Editor ed=e.getEditor();
        final int pos=ed.logicalPositionToOffset(newPosition);
        final TextRange range=getCurrentSignatureTextRange();
        final int start=range.getStartOffset();
        final int end=range.getEndOffset();
        if (pos < start) {
          e.getEditor().getCaretModel().moveToOffset(start);
          updateUI(ed,false);
        }
 else         if (end < pos) {
          e.getEditor().getCaretModel().moveToOffset(end);
          updateUI(ed,false);
        }
      }
    }
);
    editor.getSettings().setUseSoftWraps(false);
    updateUI(editor,true);
    editor.getDocument().addDocumentListener(new DocumentAdapter(){
      @Override public void documentChanged(      DocumentEvent e){
        updateUI(getEditor(),false);
      }
    }
);
  }
}
