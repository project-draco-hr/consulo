{
  PathsList classPath=parameters.getClassPath();
  ExternalSystemApiUtil.addBundle(classPath,GradleBundle.PATH_TO_BUNDLE,GradleBundle.class);
  String toolingApiPath=PathManager.getJarPathForClass(ProjectConnection.class);
  if (toolingApiPath == null) {
    LOG.warn(GradleBundle.message("gradle.generic.text.error.jar.not.found"));
    throw new ExecutionException("Can't find gradle libraries");
  }
  File gradleJarsDir=new File(toolingApiPath).getParentFile();
  String[] gradleJars=gradleJarsDir.list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar");
    }
  }
);
  if (gradleJars == null) {
    LOG.warn(GradleBundle.message("gradle.generic.text.error.jar.not.found"));
    throw new ExecutionException("Can't find gradle libraries at " + gradleJarsDir.getAbsolutePath());
  }
  for (  String jar : gradleJars) {
    classPath.add(new File(gradleJarsDir,jar).getAbsolutePath());
  }
  List<String> additionalEntries=ContainerUtilRt.newArrayList();
  ContainerUtilRt.addIfNotNull(additionalEntries,PathUtil.getJarPathForClass(JavaProjectData.class));
  ContainerUtilRt.addIfNotNull(additionalEntries,PathUtil.getJarPathForClass(LanguageLevel.class));
  for (  String entry : additionalEntries) {
    classPath.add(entry);
  }
  for (  GradleProjectResolverExtension extension : RESOLVER_EXTENSIONS.getValue()) {
    extension.enhanceRemoteProcessing(parameters);
  }
}
