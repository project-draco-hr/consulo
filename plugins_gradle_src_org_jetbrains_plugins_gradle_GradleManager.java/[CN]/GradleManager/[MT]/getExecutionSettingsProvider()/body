{
  return new Function<Pair<Project,String>,GradleExecutionSettings>(){
    private final GradleJavaHelper myJavaHelper=new GradleJavaHelper();
    @Override public GradleExecutionSettings fun(    Pair<Project,String> pair){
      GradleSettings settings=GradleSettings.getInstance(pair.first);
      File gradleHome=myInstallationManager.getGradleHome(pair.first,pair.second);
      String localGradlePath=null;
      if (gradleHome != null) {
        try {
          localGradlePath=gradleHome.getCanonicalPath();
        }
 catch (        IOException e) {
          localGradlePath=gradleHome.getAbsolutePath();
        }
      }
      GradleExecutionSettings result=new GradleExecutionSettings(localGradlePath,settings.getServiceDirectoryPath(),false);
      for (      GradleProjectResolverExtension extension : RESOLVER_EXTENSIONS.getValue()) {
        result.addResolverExtensionClass(extension.getClass().getName());
      }
      String javaHome=myJavaHelper.getJdkHome(pair.first);
      if (!StringUtil.isEmpty(javaHome)) {
        LOG.info("Instructing gradle to use java from " + javaHome);
      }
      result.setJavaHome(javaHome);
      return result;
    }
  }
;
}
