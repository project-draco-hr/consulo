{
  myLineToGutterRenderers=new TIntObjectHashMap<ArrayList<GutterIconRenderer>>();
  processRangeHighlighters(new RangeHighlighterProcessor(){
    public void process(    RangeHighlighter highlighter){
      GutterIconRenderer renderer=highlighter.getGutterIconRenderer();
      if (renderer == null || !highlighter.getEditorFilter().avaliableIn(myEditor))       return;
      int startOffset=highlighter.getStartOffset();
      int line=myEditor.getDocument().getLineNumber(startOffset);
      ArrayList<GutterIconRenderer> renderers=myLineToGutterRenderers.get(line);
      if (renderers == null) {
        renderers=new ArrayList<GutterIconRenderer>();
        myLineToGutterRenderers.put(line,renderers);
      }
      renderers.add(renderer);
    }
  }
,0,myEditor.getDocument().getTextLength());
  myIconsAreaWidth=START_ICON_AREA_WIDTH;
  myLineToGutterRenderers.forEachValue(new TObjectProcedure(){
    public boolean execute(    Object object){
      ArrayList<GutterIconRenderer> renderers=(ArrayList<GutterIconRenderer>)object;
      int width=1;
      for (int i=0; i < renderers.size(); i++) {
        GutterIconRenderer renderer=renderers.get(i);
        width+=renderer.getIcon().getIconWidth();
        if (i > 0)         width+=GAP_BETWEEN_ICONS;
      }
      if (myIconsAreaWidth < width) {
        myIconsAreaWidth=width;
      }
      return true;
    }
  }
);
  myLineMarkerAreaWidth=myIconsAreaWidth + FREE_PAINTERS_AREA_WIDTH + (isFoldingOutlineShown() ? 0 : getFoldingAnchorWidth() / 2);
}
