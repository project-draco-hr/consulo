{
  g.setColor(getBackground());
  g.fillRect(getAnnotationsAreaOffset(),clip.y,getAnnotationsAreaWidth(),clip.height);
  int x=getAnnotationsAreaOffset();
  Color color=myEditor.getColorsScheme().getColor(EditorColors.ANNOTATIONS_COLOR);
  g.setColor(color != null ? color : Color.blue);
  g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));
  for (int i=0; i < myTextAnnotationGutters.size(); i++) {
    TextAnnotationGutterProvider gutterProvider=myTextAnnotationGutters.get(i);
    int lineHeight=myEditor.getLineHeight();
    int startLineNumber=clip.y / lineHeight;
    int endLineNumber=(clip.y + clip.height) / lineHeight + 1;
    int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(Math.max(0,myEditor.getDocument().getLineCount() - 1),0)).line;
    endLineNumber=Math.min(endLineNumber,lastLine + 1);
    if (startLineNumber >= endLineNumber) {
      return;
    }
    for (int j=startLineNumber; j < endLineNumber; j++) {
      int logLine=myEditor.visualToLogicalPosition(new VisualPosition(j,0)).line;
      String s=gutterProvider.getLineText(logLine,myEditor);
      if (s != null) {
        g.drawString(s,x,(j + 1) * lineHeight - myEditor.getDescent());
      }
    }
    x+=myTextAnnotationGutterSizes.get(i);
  }
}
