{
  if (!isLineNumbersShown()) {
    return;
  }
  Rectangle clip=g.getClipBounds();
  int lineHeight=myEditor.getLineHeight();
  int startLineNumber=clip.y / lineHeight;
  int endLineNumber=(clip.y + clip.height) / lineHeight + 1;
  int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(Math.max(0,myEditor.getDocument().getLineCount() - 1),0)).line;
  endLineNumber=Math.min(endLineNumber,lastLine + 1);
  if (startLineNumber >= endLineNumber) {
    return;
  }
  Color color=myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);
  g.setColor(color != null ? color : Color.blue);
  g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));
  Graphics2D g2=(Graphics2D)g;
  AffineTransform old=g2.getTransform();
  if (isMirrored()) {
    AffineTransform originalTransform=new AffineTransform(old);
    originalTransform.scale(-1,1);
    originalTransform.translate(-getLineNumberAreaWidth() + 2,0);
    g2.setTransform(originalTransform);
  }
  for (int i=startLineNumber; i < endLineNumber; i++) {
    int logLine=myEditor.visualToLogicalPosition(new VisualPosition(i,0)).line;
    String s="" + (logLine + 1);
    g.drawString(s,getLineNumberAreaOffset() + getLineNumberAreaWidth() - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s) - 4,(i + 1) * lineHeight - myEditor.getDescent());
  }
  g2.setTransform(old);
}
