{
  final ReferenceProvidersRegistry registry=ReferenceProvidersRegistry.getInstance(myProject);
  final PsiReferenceProvider referenceProvider=new PropertiesReferenceProvider();
  registry.registerReferenceProvider(PsiLiteralExpression.class,referenceProvider);
  registry.registerReferenceProvider(new ElementFilter(){
    public boolean isAcceptable(    Object element,    PsiElement context){
      if (context instanceof PsiLiteralExpression) {
        PsiLiteralExpression literalExpression=(PsiLiteralExpression)context;
        if (literalExpression.getParent() instanceof PsiNameValuePair) {
          PsiNameValuePair nvp=(PsiNameValuePair)literalExpression.getParent();
          if (AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER.equals(nvp.getName())) {
            return true;
          }
        }
      }
      return false;
    }
    public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
,PsiLiteralExpression.class,new ResourceBundleReferenceProvider());
  StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
    public void run(){
      ProjectRootManager.getInstance(myProject).getFileIndex().iterateContent(new ContentIterator(){
        public boolean processFile(        VirtualFile fileOrDir){
          boolean isPropertiesFile=myPropertiesFilesManager.addNewFile(fileOrDir);
          if (isPropertiesFile) {
synchronized (myChangedFiles) {
              myChangedFiles.add(fileOrDir);
            }
          }
          return true;
        }
      }
);
    }
  }
);
}
