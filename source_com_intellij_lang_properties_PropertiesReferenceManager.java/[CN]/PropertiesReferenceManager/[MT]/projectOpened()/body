{
  final ReferenceProvidersRegistry registry=ReferenceProvidersRegistry.getInstance(myProject);
  final PsiReferenceProvider referenceProvider=new PropertiesReferenceProvider(true);
  registry.registerReferenceProvider(PsiLiteralExpression.class,referenceProvider);
  registry.registerReferenceProvider(new ElementFilter(){
    public boolean isAcceptable(    Object element,    PsiElement context){
      if (context instanceof PsiLiteralExpression) {
        PsiLiteralExpression literalExpression=(PsiLiteralExpression)context;
        if (literalExpression.getParent() instanceof PsiNameValuePair) {
          PsiNameValuePair nvp=(PsiNameValuePair)literalExpression.getParent();
          if (AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER.equals(nvp.getName())) {
            return true;
          }
        }
      }
      return false;
    }
    public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
,PsiLiteralExpression.class,new ResourceBundleReferenceProvider());
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    refreshAllPropFilesInProject();
  }
 else {
    StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
      public void run(){
        refreshAllPropFilesInProject();
      }
    }
);
  }
}
