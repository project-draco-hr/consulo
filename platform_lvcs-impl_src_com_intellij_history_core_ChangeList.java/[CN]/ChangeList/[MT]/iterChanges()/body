{
  return new Iterable<ChangeSet>(){
    public Iterator<ChangeSet> iterator(){
      return new Iterator<ChangeSet>(){
        private ChangeSetBlock currentBlock;
        private Iterator<ChangeSet> currentIter;
        private ChangeSet next=fetchNext();
        public boolean hasNext(){
          return next != null;
        }
        public ChangeSet next(){
          ChangeSet result=next;
          next=fetchNext();
          return result;
        }
        private ChangeSet fetchNext(){
          if (currentBlock == null) {
synchronized (ChangeList.this) {
              currentBlock=myCurrentBlock;
              List<ChangeSet> copy=new ArrayList<ChangeSet>(currentBlock.changes);
              currentIter=ContainerUtil.iterateBackward(copy).iterator();
            }
          }
          while (!currentIter.hasNext()) {
synchronized (ChangeList.this) {
              currentBlock=myStorage.readPrevious(currentBlock);
            }
            if (currentBlock == null)             return null;
            currentIter=ContainerUtil.iterateBackward(currentBlock.changes).iterator();
          }
          return currentIter.next();
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
