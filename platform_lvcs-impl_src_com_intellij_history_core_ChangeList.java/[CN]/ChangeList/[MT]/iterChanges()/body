{
  return new Iterable<ChangeSet>(){
    public Iterator<ChangeSet> iterator(){
      return new Iterator<ChangeSet>(){
        private final TIntHashSet recursionGuard=new TIntHashSet(1000);
        private ChangeSetHolder currentBlock;
        private ChangeSet next=fetchNext();
        public boolean hasNext(){
          return next != null;
        }
        public ChangeSet next(){
          ChangeSet result=next;
          next=fetchNext();
          return result;
        }
        private ChangeSet fetchNext(){
          if (currentBlock == null) {
synchronized (ChangeList.this) {
              if (myCurrentChangeSet != null) {
                currentBlock=new ChangeSetHolder(-1,myCurrentChangeSet);
              }
 else {
                currentBlock=myStorage.readPrevious(-1,recursionGuard);
              }
            }
          }
 else {
synchronized (ChangeList.this) {
              currentBlock=myStorage.readPrevious(currentBlock.id,recursionGuard);
            }
          }
          if (currentBlock == null)           return null;
          return currentBlock.changeSet;
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
