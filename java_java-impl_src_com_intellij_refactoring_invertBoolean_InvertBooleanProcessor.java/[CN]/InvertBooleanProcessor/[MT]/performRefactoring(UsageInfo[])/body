{
  for (  PsiElement element : myRenameProcessor.getElements()) {
    RenameUtil.doRename(element,myNewName,extractUsagesForElement(element,usages),myProject,new RefactoringElementListener(){
      public void elementMoved(      @NotNull PsiElement newElement){
      }
      public void elementRenamed(      @NotNull PsiElement newElement){
      }
    }
);
  }
  for (  UsageInfo usage : usages) {
    final SmartPsiElementPointer pointerToInvert=myToInvert.get(usage);
    if (pointerToInvert != null) {
      PsiExpression expression=(PsiExpression)pointerToInvert.getElement();
      LOG.assertTrue(expression != null);
      if (expression.getParent() instanceof PsiMethodCallExpression)       expression=(PsiExpression)expression.getParent();
      try {
        while (expression.getParent() instanceof PsiPrefixExpression && ((PsiPrefixExpression)expression.getParent()).getOperationSign().getTokenType() == JavaTokenType.EXCL) {
          expression=(PsiExpression)expression.getParent();
        }
        expression.replace(CodeInsightServicesUtil.invertCondition(expression));
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
