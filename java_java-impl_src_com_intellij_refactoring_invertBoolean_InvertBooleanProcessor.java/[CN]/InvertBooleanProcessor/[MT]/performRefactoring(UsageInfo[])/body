{
  for (  final PsiElement element : myRenameProcessor.getElements()) {
    try {
      RenameUtil.doRename(element,myRenameProcessor.getNewName(element),extractUsagesForElement(element,usages),myProject,null);
    }
 catch (    final IncorrectOperationException e) {
      RenameUtil.showErrorMessage(e,element,myProject);
      return;
    }
  }
  for (  UsageInfo usage : usages) {
    final SmartPsiElementPointer pointerToInvert=myToInvert.get(usage);
    if (pointerToInvert != null) {
      PsiExpression expression=(PsiExpression)pointerToInvert.getElement();
      LOG.assertTrue(expression != null);
      if (expression.getParent() instanceof PsiMethodCallExpression)       expression=(PsiExpression)expression.getParent();
      try {
        while (expression.getParent() instanceof PsiPrefixExpression && ((PsiPrefixExpression)expression.getParent()).getOperationTokenType() == JavaTokenType.EXCL) {
          expression=(PsiExpression)expression.getParent();
        }
        if (!(expression.getParent() instanceof PsiExpressionStatement)) {
          expression.replace(CodeInsightServicesUtil.invertCondition(expression));
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
