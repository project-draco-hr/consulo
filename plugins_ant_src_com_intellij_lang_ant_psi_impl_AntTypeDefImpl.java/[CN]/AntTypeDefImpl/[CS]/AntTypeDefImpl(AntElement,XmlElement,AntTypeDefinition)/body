{
  super(parent,sourceElement,definition);
  final String classname=getClassName();
  if (classname == null)   return;
  final String classpath=getClassPath();
  ClassLoader loader=null;
  if (classpath != null) {
    try {
      loader=new URLClassLoader(new URL[]{new URL("file://" + classpath)},getClass().getClassLoader());
    }
 catch (    MalformedURLException e) {
      LOG.error(e);
    }
  }
 else {
    myNewDefinition=getAntProject().getBaseTypeDefinition(classname);
    if (myNewDefinition != null)     return;
  }
  Class clazz;
  try {
    if (loader == null) {
      clazz=Class.forName(classname);
    }
 else {
      clazz=loader.loadClass(classname);
    }
  }
 catch (  ClassNotFoundException e) {
    clazz=null;
  }
  final String name=getDefinedName();
  final String uri=getUri();
  AntTypeId id=(uri == null) ? new AntTypeId(name) : new AntTypeId(name,uri);
  if (clazz == null) {
    myNewDefinition=null;
  }
 else {
    myNewDefinition=AntProjectImpl.createTypeDefinition(id,clazz,Task.class.isAssignableFrom(clazz));
    getAntProject().registerCustomType(myNewDefinition);
  }
}
