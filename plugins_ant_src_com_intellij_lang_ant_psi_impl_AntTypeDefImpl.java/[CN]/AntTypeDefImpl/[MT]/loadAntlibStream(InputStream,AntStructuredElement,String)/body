{
  final String nsPrefix=element.getSourceElement().getPrefixByNamespace(ns);
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    int nextByte;
    while ((nextByte=antlibStream.read()) >= 0) {
      builder.append((char)nextByte);
    }
    antlibStream.close();
    final AntElement parent=element.getAntParent();
    final XmlFile xmlFile=(XmlFile)createDummyFile("dummy.xml",StdFileTypes.XML,builder,element.getManager());
    final XmlDocument document=xmlFile.getDocument();
    if (document == null)     return;
    final XmlTag rootTag=document.getRootTag();
    if (rootTag == null)     return;
    for (    final XmlTag tag : rootTag.getSubTags()) {
      if (nsPrefix != null && nsPrefix.length() > 0) {
        try {
          tag.setName(nsPrefix + ':' + tag.getLocalName());
        }
 catch (        IncorrectOperationException e) {
          continue;
        }
      }
      final AntElement newElement=AntElementFactory.createAntElement(element,tag);
      if (newElement instanceof AntTypeDef) {
        for (        final AntTypeDefinition def : ((AntTypeDef)newElement).getDefinitions()) {
          if (parent instanceof AntStructuredElementImpl) {
            ((AntStructuredElementImpl)parent).registerCustomType(def);
          }
 else {
            final AntFile file=element.getAntFile();
            if (file != null) {
              file.registerCustomType(def);
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    if (element instanceof AntTypeDefImpl) {
      final AntTypeDefImpl td=((AntTypeDefImpl)element);
      td.myClassesLoaded=false;
      td.myLocalizedError=e.getLocalizedMessage();
    }
  }
 finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
