{
  URL[] urls=ClassEntry.EMPTY_URL_ARRAY;
  final String classpath=getClassPath();
  if (classpath != null) {
    try {
      if (classpath.indexOf(File.pathSeparatorChar) < 0) {
        final File file=new File(computeAttributeValue(classpath));
        urls=new URL[]{file.toURL()};
      }
 else {
        final List<URL> urlList=new ArrayList<URL>();
        for (        final String path : classpath.split(File.pathSeparator)) {
          final File file=new File(computeAttributeValue(path));
          urlList.add(file.toURL());
        }
        urls=urlList.toArray(new URL[urlList.size()]);
      }
    }
 catch (    MalformedURLException e) {
      urls=ClassEntry.EMPTY_URL_ARRAY;
    }
  }
  boolean newlyLoaded=false;
  Class clazz=CLASS_CACHE.getClass(urls,classname);
  if (clazz == null) {
    ClassLoader loader=getAntFile().getClassLoader().getClassloader();
    if (urls.length > 0) {
      loader=new URLClassLoader(urls,loader);
    }
    try {
      if (loader == null) {
        clazz=Class.forName(classname);
      }
 else {
        clazz=loader.loadClass(classname);
      }
      newlyLoaded=true;
    }
 catch (    Exception e) {
      clazz=null;
    }
  }
  final String name=getDefinedName();
  final String uri=getUri();
  final AntTypeId id=(uri == null) ? new AntTypeId(name) : new AntTypeId(name,uri);
  if (clazz == null) {
    myNewDefinition=null;
  }
 else {
    myNewDefinition=(AntTypeDefinitionImpl)AntFileImpl.createTypeDefinition(id,clazz,Task.class.isAssignableFrom(clazz));
  }
  if (myNewDefinition != null) {
    myNewDefinition.setDefiningElement(this);
    final AntStructuredElement parent=getAntParent();
    if (parent != null) {
      parent.registerCustomType(myNewDefinition);
    }
    if (newlyLoaded) {
      CLASS_CACHE.setClass(urls,classname,clazz);
    }
  }
}
