{
  final String classpath=getClassPath();
  ClassLoader loader=null;
  if (classpath != null) {
    try {
      URL[] urls;
      if (classpath.indexOf(':') < 0) {
        urls=new URL[]{new URL("file://" + classpath)};
      }
 else {
        final List<URL> urlList=new ArrayList<URL>();
        for (        String url : classpath.split(":")) {
          urlList.add(new URL("file://" + url));
        }
        urls=urlList.toArray(new URL[urlList.size()]);
      }
      loader=new URLClassLoader(urls,getClass().getClassLoader());
    }
 catch (    MalformedURLException e) {
      LOG.error(e);
    }
  }
  Class clazz;
  try {
    if (loader == null) {
      clazz=Class.forName(classname);
    }
 else {
      clazz=loader.loadClass(classname);
    }
  }
 catch (  Exception e) {
    clazz=null;
  }
  final String name=getDefinedName();
  final String uri=getUri();
  AntTypeId id=(uri == null) ? new AntTypeId(name) : new AntTypeId(name,uri);
  if (clazz == null) {
    myNewDefinition=null;
  }
 else {
    myNewDefinition=(AntTypeDefinitionImpl)AntFileImpl.createTypeDefinition(id,clazz,Task.class.isAssignableFrom(clazz));
    myNewDefinition.setDefiningElement(this);
    getAntParent().registerCustomType(myNewDefinition);
  }
}
