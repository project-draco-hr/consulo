{
  if (classname == null || name == null || name.length() == 0) {
    return null;
  }
  boolean newlyLoaded=false;
  final List<URL> urls=getClassPathUrls();
  Class clazz=CLASS_CACHE.getClass(urls,classname);
  if (clazz == null) {
    final ClassLoader loader=getClassLoader(urls);
    if (loader != null) {
      try {
        clazz=loader.loadClass(classname);
        newlyLoaded=true;
      }
 catch (      ClassNotFoundException e) {
        myLocalizedError=e.getLocalizedMessage();
        clazz=null;
      }
catch (      NoClassDefFoundError e) {
        myLocalizedError=e.getLocalizedMessage();
        clazz=null;
      }
catch (      UnsupportedClassVersionError e) {
        myLocalizedError=e.getLocalizedMessage();
        clazz=null;
      }
    }
  }
  final String nsPrefix=(uri == null) ? null : getSourceElement().getPrefixByNamespace(uri);
  final AntTypeId id=(nsPrefix == null) ? new AntTypeId(name) : new AntTypeId(name,nsPrefix);
  AntTypeDefinitionImpl def=null;
  if (clazz == null) {
    def=new AntTypeDefinitionImpl(id,classname,isTask());
  }
 else {
    myClassesLoaded=true;
    final boolean isTask=isTask(clazz);
    def=(AntTypeDefinitionImpl)AntFileImpl.createTypeDefinition(id,clazz,isTask);
    if (def == null) {
      def=new AntTypeDefinitionImpl(id,classname,isTask);
    }
    def.setIsProperty(isAssignableFrom(org.apache.tools.ant.taskdefs.Property.class.getName(),clazz));
    if (newlyLoaded) {
      CLASS_CACHE.setClass(urls,classname,clazz);
    }
  }
  if (def != null) {
    myNewDefinitions=ArrayUtil.append(myNewDefinitions,def);
    def.setDefiningElement(this);
    if (parent != null) {
      if (!(parent instanceof AntProject)) {
        final AntProject antProject=parent.getAntProject();
        if (antProject != null) {
          antProject.registerCustomType(def);
        }
      }
      parent.registerCustomType(def);
    }
 else {
      antFile.registerCustomType(def);
    }
    if (antFile != null) {
      for (      final AntTypeId typeId : def.getNestedElements()) {
        final String nestedClassName=def.getNestedClassName(typeId);
        AntTypeDefinitionImpl nestedDef=(AntTypeDefinitionImpl)antFile.getBaseTypeDefinition(nestedClassName);
        if (nestedDef == null) {
          nestedDef=loadClass(antFile,nestedClassName,typeId.getName(),uri,null);
          if (nestedDef != null) {
            def.registerNestedType(nestedDef.getTypeId(),nestedDef.getClassName());
          }
        }
      }
    }
  }
  return def;
}
