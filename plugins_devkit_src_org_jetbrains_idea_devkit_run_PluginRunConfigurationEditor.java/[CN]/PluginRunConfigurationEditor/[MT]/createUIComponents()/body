{
  ProjectSdksModel projectSdksModel=new ProjectSdksModel();
  if (!projectSdksModel.isInitialized()) {
    projectSdksModel.reset(myProject);
  }
  myJavaSdkComboBox=new SdkComboBox(projectSdksModel,new Condition<SdkTypeId>(){
    @Override public boolean value(    SdkTypeId sdkTypeId){
      return sdkTypeId instanceof JavaSdk;
    }
  }
,false);
  myConsuloSdkComboBox=new SdkComboBox(projectSdksModel,new Condition<SdkTypeId>(){
    @Override public boolean value(    SdkTypeId sdkTypeId){
      return sdkTypeId instanceof ConsuloSdkType;
    }
  }
,false);
  final Artifact[] sortedArtifacts=ArtifactManager.getInstance(myProject).getSortedArtifacts();
  myArtifactComboBox=new JComboBox();
  for (  Artifact sortedArtifact : sortedArtifacts) {
    myArtifactComboBox.addItem(new ArtifactItem(sortedArtifact.getName(),sortedArtifact));
  }
  myArtifactComboBox.setRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      ArtifactItem artifactItem=(ArtifactItem)value;
      if (artifactItem == null) {
        append("<None>",SimpleTextAttributes.ERROR_ATTRIBUTES);
        return;
      }
      final Artifact artifact=artifactItem.myArtifact;
      if (artifact == null) {
        append(artifactItem.myName,SimpleTextAttributes.ERROR_ATTRIBUTES);
        setIcon(AllIcons.Nodes.Artifact);
      }
 else {
        append(artifactItem.myName,SimpleTextAttributes.REGULAR_ATTRIBUTES);
        setIcon(artifact.getArtifactType().getIcon());
      }
    }
  }
);
}
