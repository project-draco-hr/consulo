{
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)descriptor.getPsiElement();
  final String referencedClassName=referenceElement.getText();
  final PsiClass iface=(PsiClass)referenceElement.resolve();
  final PsiField[] allFields=iface.getAllFields();
  final PsiClass implementingClass=(PsiClass)PsiTreeUtil.getParentOfType(referenceElement,PsiClass.class);
  final PsiManager manager=referenceElement.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final SearchScope searchScope=implementingClass.getUseScope();
  for (int i=0; i < allFields.length; i++) {
    final PsiField field=allFields[i];
    final PsiReference[] references=searchHelper.findReferences(field,searchScope,false);
    for (int j=0; j < references.length; j++) {
      final PsiReferenceExpression reference=(PsiReferenceExpression)references[j];
      if (!reference.isQualified()) {
        final String referenceText=reference.getText();
        replaceExpression(project,reference,referencedClassName + '.' + referenceText);
      }
 else {
        final PsiExpression qualifier=reference.getQualifierExpression();
        final String referenceName=reference.getReferenceName();
        if (qualifier instanceof PsiReferenceExpression) {
          final PsiElement referent=((PsiReference)qualifier).resolve();
          if (!referent.equals(iface)) {
            replaceExpression(project,reference,referencedClassName + '.' + referenceName);
          }
        }
 else {
          replaceExpression(project,reference,referencedClassName + '.' + referenceName);
        }
      }
    }
  }
  deleteElement(referenceElement);
}
