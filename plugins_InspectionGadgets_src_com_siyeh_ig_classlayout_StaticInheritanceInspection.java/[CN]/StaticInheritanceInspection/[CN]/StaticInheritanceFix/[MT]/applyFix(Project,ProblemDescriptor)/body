{
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)descriptor.getPsiElement();
  final String text=referenceElement.getText();
  final PsiClass iface=(PsiClass)referenceElement.resolve();
  final PsiField[] allFields=iface.getAllFields();
  final PsiClass implementingClass=(PsiClass)PsiTreeUtil.getParentOfType(referenceElement,PsiClass.class);
  final PsiManager manager=referenceElement.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final LocalSearchScope searchScope=new LocalSearchScope(implementingClass);
  for (int i=0; i < allFields.length; i++) {
    final PsiField field=allFields[i];
    final PsiReference[] references=searchHelper.findReferences(field,searchScope,false);
    for (int j=0; j < references.length; j++) {
      final PsiReferenceExpression reference=(PsiReferenceExpression)references[j];
      if (reference.isQualified()) {
        continue;
      }
      final String referenceText=reference.getText();
      replaceExpression(project,reference,text + '.' + referenceText);
    }
  }
  deleteElement(referenceElement);
}
