{
  super.visitMethod(method);
  if (ignoreTestCases) {
    final PsiClass aClass=ClassUtils.getContainingClass(method);
    if (aClass != null && ClassUtils.isSubclass(aClass,"junit.framework.Test")) {
      return;
    }
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  final PsiJavaCodeReferenceElement[] references=throwsList.getReferenceElements();
  final List<String> exceptionListCopy;
synchronized (lock) {
    exceptionListCopy=new ArrayList<String>(exceptionList);
  }
  for (  PsiJavaCodeReferenceElement reference : references) {
    final PsiClass thrownClass=(PsiClass)reference.resolve();
    if (thrownClass == null) {
      continue;
    }
    final String text=thrownClass.getQualifiedName();
    if (text == null) {
      continue;
    }
    for (    String exceptionClassName : exceptionListCopy) {
      if (text.equals(exceptionClassName)) {
        registerError(reference);
      }
    }
  }
}
