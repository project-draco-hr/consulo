{
  super.visitMethod(method);
  if (ignoreTestCases) {
    final PsiClass aClass=ClassUtils.getContainingClass(method);
    if (aClass != null && ClassUtils.isSubclass(aClass,"junit.framework.TestCase")) {
      return;
    }
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  final PsiJavaCodeReferenceElement[] references=throwsList.getReferenceElements();
  for (  PsiJavaCodeReferenceElement reference : references) {
    final PsiClass thrownClass=(PsiClass)reference.resolve();
    if (thrownClass != null) {
      final String text=thrownClass.getQualifiedName();
      if (text != null) {
        final List<String> exceptionListCopy;
synchronized (lock) {
          exceptionListCopy=new ArrayList<String>(exceptionsList);
        }
        for (        Object aExceptionsList : exceptionListCopy) {
          final String exceptionClass=(String)aExceptionsList;
          if (text.equals(exceptionClass)) {
            registerError(reference);
          }
        }
      }
    }
  }
}
