{
  final Collection<GitTestBranch> branches=new ArrayList<GitTestBranch>();
  final File refsHeads=new File(new File(myGitDir,"refs"),local ? "heads" : "remotes");
  FileUtil.processFilesRecursively(refsHeads,new Processor<File>(){
    @Override public boolean process(    File file){
      if (file.equals(refsHeads)) {
        return true;
      }
      if (file.isDirectory()) {
        return true;
      }
      String name=FileUtil.getRelativePath(refsHeads,file);
      GitTestBranch branch=null;
      try {
        branch=new GitTestBranch(name,FileUtil.loadFile(file));
      }
 catch (      IOException e) {
        fail(e.toString());
        e.printStackTrace();
      }
      if (!branches.contains(branch)) {
        branches.add(branch);
      }
      return true;
    }
  }
);
  String packedRefs=FileUtil.loadFile(new File(myGitDir,"packed-refs"));
  for (  String ref : packedRefs.split("\n")) {
    String[] refAndName=ref.split(" ");
    String name=refAndName[1];
    String prefix=local ? "refs/heads/" : "refs/remotes/";
    if (name.startsWith(prefix)) {
      GitTestBranch branch=new GitTestBranch(name.substring(prefix.length()),refAndName[0]);
      if (!branches.contains(branch)) {
        branches.add(branch);
      }
    }
  }
  return branches;
}
