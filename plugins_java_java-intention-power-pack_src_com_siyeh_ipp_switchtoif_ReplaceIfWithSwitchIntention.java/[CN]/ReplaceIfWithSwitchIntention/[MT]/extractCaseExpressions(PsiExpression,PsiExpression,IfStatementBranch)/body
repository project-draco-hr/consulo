{
  if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiExpression[] arguments=argumentList.getExpressions();
    final PsiExpression argument=arguments[0];
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    if (EquivalenceChecker.expressionsAreEquivalent(switchExpression,argument)) {
      values.addCaseExpression(qualifierExpression);
    }
 else {
      values.addCaseExpression(argument);
    }
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final PsiExpression[] operands=polyadicExpression.getOperands();
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    if (JavaTokenType.OROR.equals(tokenType)) {
      for (      PsiExpression operand : operands) {
        extractCaseExpressions(operand,switchExpression,values);
      }
    }
 else     if (JavaTokenType.EQEQ.equals(tokenType) && operands.length == 2) {
      final PsiExpression lhs=operands[0];
      final PsiExpression rhs=operands[1];
      if (EquivalenceChecker.expressionsAreEquivalent(switchExpression,rhs)) {
        values.addCaseExpression(lhs);
      }
 else       if (EquivalenceChecker.expressionsAreEquivalent(switchExpression,lhs)) {
        values.addCaseExpression(rhs);
      }
    }
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression contents=parenthesizedExpression.getExpression();
    extractCaseExpressions(contents,switchExpression,values);
  }
}
