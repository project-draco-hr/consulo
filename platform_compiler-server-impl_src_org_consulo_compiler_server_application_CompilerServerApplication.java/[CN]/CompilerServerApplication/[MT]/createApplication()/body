{
  com.intellij.openapi.diagnostic.Logger.setFactory(new com.intellij.openapi.diagnostic.Logger.Factory(){
    @Override public com.intellij.openapi.diagnostic.Logger getLoggerInstance(    String category){
      return new com.intellij.openapi.diagnostic.Logger(){
        @Override public boolean isDebugEnabled(){
          return false;
        }
        @Override public void debug(        @NonNls String message){
        }
        @Override public void debug(        @Nullable Throwable t){
        }
        @Override public void debug(        @NonNls String message,        @Nullable Throwable t){
        }
        @Override public void error(        @NonNls String message,        @Nullable Throwable t,        @NonNls String... details){
          System.out.println(message);
          if (t != null) {
            t.printStackTrace();
          }
        }
        @Override public void info(        @NonNls String message){
          System.out.println(message);
        }
        @Override public void info(        @NonNls String message,        @Nullable Throwable t){
          System.out.println(message);
          if (t != null) {
            t.printStackTrace();
          }
        }
        @Override public void warn(        @NonNls String message,        @Nullable Throwable t){
          System.out.println(message);
          if (t != null) {
            t.printStackTrace();
          }
        }
        @Override public void setLevel(        Level level){
        }
      }
;
    }
  }
);
  ProgressIndicatorProvider.ourInstance=createProgressIndicatorProvider();
  final CompilerServerApplication app=new CompilerServerApplication();
  ApplicationManager.setApplication(app,new Getter<FileTypeRegistry>(){
    @Override public FileTypeRegistry get(){
      return new CoreFileTypeRegistry();
    }
  }
,new Getter<EncodingRegistry>(){
    @Override public EncodingRegistry get(){
      return new CoreEncodingRegistry();
    }
  }
,app);
  return app;
}
