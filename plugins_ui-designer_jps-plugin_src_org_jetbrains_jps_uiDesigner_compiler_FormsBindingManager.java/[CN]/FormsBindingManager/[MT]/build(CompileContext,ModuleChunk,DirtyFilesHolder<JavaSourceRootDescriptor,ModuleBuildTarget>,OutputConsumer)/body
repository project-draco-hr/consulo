{
  ExitCode exitCode=ExitCode.NOTHING_DONE;
  final JpsProject project=context.getProjectDescriptor().getProject();
  final JpsUiDesignerConfiguration config=JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project);
  if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) {
    return exitCode;
  }
  final Map<File,ModuleBuildTarget> filesToCompile=new THashMap<File,ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY);
  final Map<File,ModuleBuildTarget> formsToCompile=new THashMap<File,ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY);
  final Map<File,Collection<File>> srcToForms=new THashMap<File,Collection<File>>(FileUtil.FILE_HASHING_STRATEGY);
  if (!context.isProjectRebuild() && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context,Boolean.FALSE)) {
    if (!FORMS_REBUILD_FORCED.get(context,Boolean.FALSE)) {
      FORMS_REBUILD_FORCED.set(context,Boolean.TRUE);
      FSOperations.markDirty(context,chunk,FORM_SOURCES_FILTER);
    }
  }
  dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor,ModuleBuildTarget>(){
    public boolean apply(    ModuleBuildTarget target,    File file,    JavaSourceRootDescriptor descriptor) throws IOException {
      if (JAVA_SOURCES_FILTER.accept(file)) {
        filesToCompile.put(file,target);
      }
 else       if (FORM_SOURCES_FILTER.accept(file)) {
        formsToCompile.put(file,target);
      }
      return true;
    }
  }
);
  if (config.isInstrumentClasses()) {
    final JpsJavaCompilerConfiguration configuration=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project);
    final JpsCompilerExcludes excludes=configuration.getCompilerExcludes();
    for (    final Map.Entry<File,ModuleBuildTarget> entry : formsToCompile.entrySet()) {
      final File form=entry.getKey();
      final ModuleBuildTarget target=entry.getValue();
      final File boundSource=findBoundSource(context,target,form);
      if (boundSource != null && !excludes.isExcluded(boundSource)) {
        addBinding(boundSource,form,srcToForms);
        FSOperations.markDirty(context,boundSource);
        filesToCompile.put(boundSource,target);
        context.getScope().expandScope(target,boundSource);
        exitCode=ExitCode.OK;
      }
    }
    final OneToManyPathsMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
    for (    Map.Entry<File,ModuleBuildTarget> entry : filesToCompile.entrySet()) {
      final File srcFile=entry.getKey();
      final ModuleBuildTarget target=entry.getValue();
      final Collection<String> boundForms=sourceToFormMap.getState(srcFile.getPath());
      if (boundForms != null) {
        for (        String formPath : boundForms) {
          final File formFile=new File(formPath);
          if (!excludes.isExcluded(formFile) && formFile.exists()) {
            addBinding(srcFile,formFile,srcToForms);
            FSOperations.markDirty(context,formFile);
            formsToCompile.put(formFile,target);
            context.getScope().expandScope(target,formFile);
            exitCode=ExitCode.OK;
          }
        }
      }
    }
  }
  FORMS_TO_COMPILE.set(context,srcToForms.isEmpty() ? null : srcToForms);
  if (config.isCopyFormsRuntimeToOutput() && !formsToCompile.isEmpty()) {
    for (    ModuleBuildTarget target : chunk.getTargets()) {
      if (!target.isTests()) {
        final File outputDir=target.getOutputDir();
        if (outputDir != null) {
          final String outputRoot=FileUtil.toSystemIndependentName(outputDir.getPath());
          final List<File> generatedFiles=CopyResourcesUtil.copyFormsRuntime(outputRoot,false);
          if (!generatedFiles.isEmpty()) {
            exitCode=ExitCode.OK;
            for (            File file : generatedFiles) {
              outputConsumer.registerOutputFile(target,file,Collections.<String>emptyList());
            }
          }
        }
      }
    }
  }
  return exitCode;
}
