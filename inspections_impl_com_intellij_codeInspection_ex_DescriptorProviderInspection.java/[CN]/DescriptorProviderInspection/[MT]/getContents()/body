{
  List<InspectionTreeNode> content=new ArrayList<InspectionTreeNode>();
  buildTreeNode(content,myPackageContents,myProblemElements);
  if (isOldProblemsIncluded(getContext())) {
    HashMap<String,Set<RefElement>> oldContents=new HashMap<String,Set<RefElement>>();
    final Set<RefEntity> elements=myOldProblemElements.keySet();
    for (    RefEntity element : elements) {
      if (element instanceof RefElement) {
        String packageName=RefUtil.getInstance().getPackageName(element);
        final Set<RefElement> collection=myPackageContents.get(packageName);
        if (collection != null) {
          final Set<RefEntity> currentElements=new HashSet<RefEntity>(collection);
          if (contains((RefElement)element,currentElements))           continue;
        }
        Set<RefElement> oldContent=oldContents.get(packageName);
        if (oldContent == null) {
          oldContent=new HashSet<RefElement>();
          oldContents.put(packageName,oldContent);
        }
        oldContent.add((RefElement)element);
      }
    }
    buildTreeNode(content,oldContents,myOldProblemElements);
  }
  for (  RefModule refModule : myModulesProblems) {
    InspectionModuleNode moduleNode=new InspectionModuleNode(refModule.getModule());
    final CommonProblemDescriptor[] problems=myProblemElements.get(refModule);
    for (    CommonProblemDescriptor problem : problems) {
      moduleNode.add(new ProblemDescriptionNode(refModule,problem,!(this instanceof DuplicatePropertyInspection),this));
    }
    content.add(moduleNode);
  }
  return content.toArray(new InspectionTreeNode[content.size()]);
}
