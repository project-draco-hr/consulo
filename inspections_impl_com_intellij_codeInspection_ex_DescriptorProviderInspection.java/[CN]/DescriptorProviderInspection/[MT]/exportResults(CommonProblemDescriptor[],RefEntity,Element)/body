{
  for (  CommonProblemDescriptor description : descriptions) {
    @NonNls final String template=description.getDescriptionTemplate();
    int line=description instanceof ProblemDescriptor ? ((ProblemDescriptor)description).getLineNumber() : -1;
    final String text=description instanceof ProblemDescriptor ? ((ProblemDescriptor)description).getPsiElement().getText() : "";
    @NonNls String problemText=template.replaceAll("#ref",text.replaceAll("\\$","\\\\\\$"));
    problemText=problemText.replaceAll(" #loc "," ");
    Element element=XMLExportUtl.createElement(refEntity,parentNode,line,description instanceof ProblemDescriptorImpl ? ((ProblemDescriptorImpl)description).getTextRange() : null);
    @NonNls Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
    problemClassElement.addContent(getDisplayName());
    if (refEntity instanceof RefElement) {
      final RefElement refElement=(RefElement)refEntity;
      final HighlightSeverity severity=getCurrentSeverity(refElement);
      final String attributeKey=getTextAttributeKey(severity,description instanceof ProblemDescriptor ? ((ProblemDescriptor)description).getHighlightType() : ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
      problemClassElement.setAttribute("severity",severity.myName);
      problemClassElement.setAttribute("attribute_key",attributeKey);
    }
    element.addContent(problemClassElement);
    try {
      Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
      descriptionElement.addContent(problemText);
      element.addContent(descriptionElement);
    }
 catch (    IllegalDataException e) {
      System.out.println("Cannot save results for " + refEntity.getName());
    }
  }
}
