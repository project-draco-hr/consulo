{
  PsiManager psiManager=myNewExpression.getManager();
  final Project project=psiManager.getProject();
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiClass psiClass=CreateFromUsageUtils.createClass(getReferenceElement(myNewExpression),false,null);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        PsiClass aClass=psiClass;
        if (aClass == null)         return;
        setupInheritance(myNewExpression,aClass);
        setupGenericParameters(myNewExpression,aClass);
        PsiExpressionList argList=myNewExpression.getArgumentList();
        if (argList != null && argList.getExpressions().length > 0) {
          PsiMethod constructor=elementFactory.createConstructor();
          constructor=(PsiMethod)aClass.add(constructor);
          TemplateBuilder templateBuilder=new TemplateBuilder(aClass);
          CreateFromUsageUtils.setupMethodParameters(constructor,templateBuilder,argList,getTargetSubstitutor(myNewExpression));
          setupSuperCall(aClass,constructor,templateBuilder);
          getReferenceElement(myNewExpression).bindToElement(aClass);
          aClass=CodeInsightUtil.forcePsiPosprocessAndRestoreElement(aClass);
          Template template=templateBuilder.buildTemplate();
          Editor editor=positionCursor(project,aClass.getContainingFile(),aClass);
          TextRange textRange=aClass.getTextRange();
          editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
          startTemplate(editor,template,project);
        }
 else {
          positionCursor(project,aClass.getContainingFile(),aClass);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
