{
  if (!SystemInfo.isUnix)   return;
  try {
    final File scriptFile=createLauncherScriptFile();
    final File scriptTarget=new File(pathName);
    if (scriptTarget.exists()) {
      int rc=Messages.showOkCancelDialog(project,ApplicationBundle.message("launcher.script.overwrite",scriptTarget),"Create Launcher Script",Messages.getQuestionIcon());
      if (rc != 0) {
        return;
      }
    }
    final File launcherScriptContainingDir=scriptTarget.getParentFile();
    if (!(launcherScriptContainingDir.exists() || launcherScriptContainingDir.mkdirs()) || !scriptFile.renameTo(scriptTarget)) {
      final String launcherScriptContainingDirPath=launcherScriptContainingDir.getCanonicalPath();
      final String installationScriptSrc="#!/bin/sh\n" + "mkdir -p \"" + launcherScriptContainingDirPath + "\"\n"+ "install -g 0 -o 0 \""+ scriptFile.getCanonicalPath()+ "\" \""+ pathName+ "\"";
      final File installationScript=ExecUtil.createTempExecutableScript("launcher_installer",".sh",installationScriptSrc);
      ExecUtil.sudo(installationScript.getAbsolutePath(),ApplicationBundle.message("launcher.script.sudo.prompt",launcherScriptContainingDirPath));
    }
  }
 catch (  Exception e) {
    final String message=e.getMessage();
    if (!StringUtil.isEmptyOrSpaces(message)) {
      LOG.warn(e);
      Notifications.Bus.notify(new Notification(Notifications.SYSTEM_MESSAGES_GROUP_ID,"Failed to create launcher script",message,NotificationType.ERROR),project);
    }
 else {
      LOG.error(e);
    }
  }
}
