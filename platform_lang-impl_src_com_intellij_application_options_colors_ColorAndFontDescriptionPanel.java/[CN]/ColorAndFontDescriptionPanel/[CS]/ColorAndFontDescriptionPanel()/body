{
  super(new BorderLayout());
  add(myPanel,BorderLayout.CENTER);
  setBorder(BorderFactory.createEmptyBorder(4,0,4,4));
  myEffectsModel=new EffectsComboModel(ContainerUtil.newArrayList(myEffectsMap.keySet()));
  myEffectsCombo.setModel(myEffectsModel);
  myEffectsCombo.setRenderer(new ListCellRendererWrapper<String>(){
    @Override public void customize(    JList list,    String value,    int index,    boolean selected,    boolean hasFocus){
      setText(value != null ? value : "<invalid>");
    }
  }
);
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onSettingsChanged(e);
    }
  }
;
  for (  JBCheckBox c : new JBCheckBox[]{myCbBackground,myCbForeground,myCbEffects,myCbErrorStripe,myCbItalic,myCbBold,myInheritAttributesBox}) {
    c.addActionListener(actionListener);
  }
  for (  ColorPanel c : new ColorPanel[]{myBackgroundChooser,myForegroundChooser,myEffectsColorChooser,myErrorStripeColorChooser}) {
    c.addActionListener(actionListener);
  }
  myEffectsCombo.addActionListener(actionListener);
  Messages.configureMessagePaneUi(myInheritanceLabel,"<html>",null);
  myInheritanceLabel.addHyperlinkListener(new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    HyperlinkEvent e){
      onHyperLinkClicked(e);
    }
  }
);
  myInheritanceLabel.setBorder(BorderFactory.createEmptyBorder());
  myLabelFont.setVisible(false);
}
