{
  final ReadActionProcessor<PsiReference> refProcessor=new ReadActionProcessor<PsiReference>(){
    public boolean processInReadAction(    final PsiReference ref){
      TextRange rangeInElement=ref.getRangeInElement();
      return processor.process(new UsageInfo(ref.getElement(),rangeInElement.getStartOffset(),rangeInElement.getEndOffset(),false));
    }
  }
;
  final SearchScope scope=options.searchScope;
  final boolean searchText=options.isSearchForTextOccurences && scope instanceof GlobalSearchScope;
  if (options.fastTrack != null) {
    SearchRequestor.contributeTargets(element,options,options.fastTrack,refProcessor);
    options.fastTrack.addRequest(PsiSearchRequest.custom(new Computable<Boolean>(){
      public Boolean compute(){
        if (searchText) {
          processUsagesInText(element,processor,(GlobalSearchScope)scope);
        }
        return true;
      }
    }
));
    return;
  }
  if (options.isUsages) {
    ReferencesSearch.search(element,scope,false).forEach(refProcessor);
  }
  if (searchText) {
    processUsagesInText(element,processor,(GlobalSearchScope)scope);
  }
}
