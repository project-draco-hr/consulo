{
  final ReadActionProcessor<PsiReference> refProcessor=new ReadActionProcessor<PsiReference>(){
    @RequiredReadAction @Override public boolean processInReadAction(    final PsiReference ref){
      TextRange rangeInElement=ref.getRangeInElement();
      return processor.process(new UsageInfo(ref.getElement(),rangeInElement.getStartOffset(),rangeInElement.getEndOffset(),false));
    }
  }
;
  final SearchScope scope=options.searchScope;
  final boolean searchText=options.isSearchForTextOccurrences && scope instanceof GlobalSearchScope;
  if (options.isUsages) {
    boolean success=ReferencesSearch.search(new ReferencesSearch.SearchParameters(element,scope,false,options.fastTrack)).forEach(refProcessor);
    if (!success)     return false;
  }
  if (searchText) {
    if (options.fastTrack != null) {
      options.fastTrack.searchCustom(new Processor<Processor<PsiReference>>(){
        @Override public boolean process(        Processor<PsiReference> consumer){
          return processUsagesInText(element,processor,(GlobalSearchScope)scope);
        }
      }
);
    }
 else {
      return processUsagesInText(element,processor,(GlobalSearchScope)scope);
    }
  }
  return true;
}
