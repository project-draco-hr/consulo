{
  Collection<String> stringToSearch=getStringsToSearch(element);
  if (stringToSearch == null)   return;
  final TextRange elementTextRange=ApplicationManager.getApplication().runReadAction(new Computable<TextRange>(){
    public TextRange compute(){
      if (!element.isValid())       return null;
      return element.getTextRange();
    }
  }
);
  TextOccurrencesUtil.UsageInfoFactory factory=new TextOccurrencesUtil.UsageInfoFactory(){
    public UsageInfo createUsageInfo(    @NotNull PsiElement usage,    int startOffset,    int endOffset){
      if (elementTextRange != null && usage.getContainingFile() == element.getContainingFile() && elementTextRange.contains(startOffset) && elementTextRange.contains(endOffset)) {
        return null;
      }
      PsiReference someReference=usage.findReferenceAt(startOffset);
      if (someReference != null) {
        PsiElement refElement=someReference.getElement();
        for (        PsiReference ref : PsiReferenceService.getService().getReferences(refElement,new PsiReferenceService.Hints(element,null))) {
          if (element.getManager().areElementsEquivalent(ref.resolve(),element)) {
            TextRange range=ref.getRangeInElement().shiftRight(refElement.getTextRange().getStartOffset() - usage.getTextRange().getStartOffset());
            return new UsageInfo(usage,range.getStartOffset(),range.getEndOffset(),true);
          }
        }
      }
      return new UsageInfo(usage,startOffset,endOffset,true);
    }
  }
;
  for (  String s : stringToSearch) {
    TextOccurrencesUtil.processTextOccurences(element,s,searchScope,processor,factory);
  }
}
