{
  final Set<Artifact> result=new HashSet<Artifact>(Arrays.asList(context.getArtifactModel().getArtifacts()));
  if (notIncludedOnly) {
    ArtifactUtil.processPackagingElements(artifact,getInstance(),new Processor<ArtifactPackagingElement>(){
      @Override public boolean process(      ArtifactPackagingElement artifactPackagingElement){
        result.remove(artifactPackagingElement.findArtifact(context));
        return true;
      }
    }
,context,true);
  }
  result.remove(artifact);
  final Iterator<Artifact> iterator=result.iterator();
  while (iterator.hasNext()) {
    Artifact another=iterator.next();
    final boolean notContainThis=ArtifactUtil.processPackagingElements(another,getInstance(),new Processor<ArtifactPackagingElement>(){
      @Override public boolean process(      ArtifactPackagingElement element){
        return !artifact.getName().equals(element.getArtifactName());
      }
    }
,context,true);
    if (!notContainThis) {
      iterator.remove();
    }
  }
  final ArrayList<Artifact> list=new ArrayList<Artifact>(result);
  Collections.sort(list,ArtifactManager.ARTIFACT_COMPARATOR);
  return list;
}
