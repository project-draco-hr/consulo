{
  myGoalsComboBox.setLightWeightPopupEnabled(false);
  EditorComboBoxEditor editor=new StringComboboxEditor(myProject,PlainTextFileType.INSTANCE,myGoalsComboBox);
  myGoalsComboBox.setRenderer(new EditorComboBoxRenderer(editor));
  myGoalsComboBox.setEditable(true);
  myGoalsComboBox.setEditor(editor);
  myGoalsComboBox.setFocusable(true);
  EditorTextField editorTextField=editor.getEditorComponent();
  new MavenArgumentsCompletionProvider(myProject).apply(editorTextField);
  MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(myProject);
  List<MavenProject> mavenProjects=projectsManager.getProjects();
  final Map<MavenProject,String> nameMap=MavenProjectNamer.generateNameMap(mavenProjects);
  final Map<MavenProject,Integer> projectTreeMap=MavenProjectNamer.buildProjectTree(projectsManager);
  myModuleComboBox.setModel(new CollectionComboBoxModel(new ArrayList<MavenProject>(projectTreeMap.keySet())));
  myModuleComboBox.setRenderer(new ListCellRendererWrapper<MavenProject>(){
    @Override public void customize(    JList list,    MavenProject value,    int index,    boolean selected,    boolean hasFocus){
      String text=nameMap.get(value);
      Integer deep=projectTreeMap.get(value);
      if (deep != null && deep > 0) {
        text=StringUtil.repeat("  ",deep) + text;
      }
      setText(text);
    }
  }
);
  new ComboboxSpeedSearch(myModuleComboBox){
    protected String getElementText(    Object element){
      String name=nameMap.get((MavenProject)element);
      if (name != null)       return name;
      if (element == null)       return "";
      return ((MavenProject)element).getMavenId().toString();
    }
  }
.setComparator(new SpeedSearchComparator(false,false));
}
