{
  incModificationCount();
  for (  FilePointerPartNode node : myNodesToUpdateUrl) {
synchronized (this) {
      String urlBefore=node.myFileAndUrl.second;
      Pair<VirtualFile,String> after=node.update();
      String urlAfter=after.second;
      if (URL_COMPARATOR.compare(urlBefore,urlAfter) != 0) {
        List<VirtualFilePointerImpl> myPointers=new SmartList<VirtualFilePointerImpl>();
        node.addAllPointersTo(myPointers);
        int useCount=node.useCount;
        FilePointerPartNode root=node.remove();
        FilePointerPartNode newNode=root.findPointerOrCreate(VfsUtilCore.urlToPath(urlAfter),0,after,myPointers.size());
        VirtualFilePointer existingPointer=newNode.getAnyPointer();
        if (existingPointer != null) {
          for (FilePointerPartNode n=newNode; n != null; n=n.parent) {
            n.pointersUnder+=myPointers.size();
          }
        }
        newNode.addAllPointersTo(myPointers);
        VirtualFilePointerImpl[] newMyPointers=myPointers.toArray(new VirtualFilePointerImpl[myPointers.size()]);
        newNode.associate(newMyPointers,after);
        newNode.incrementUsageCount(useCount);
      }
    }
  }
  VirtualFilePointer[] pointersToFireArray=toPointers(myNodesToFire);
  for (  VirtualFilePointer pointer : pointersToFireArray) {
    ((VirtualFilePointerImpl)pointer).myNode.update();
  }
  for (  EventDescriptor event : myEvents) {
    event.fireAfter();
  }
  if (pointersToFireArray.length != 0) {
    myBus.syncPublisher(VirtualFilePointerListener.TOPIC).validityChanged(pointersToFireArray);
  }
  myNodesToUpdateUrl=Collections.emptyList();
  myEvents=Collections.emptyList();
  myNodesToFire=Collections.emptyList();
  for (  FilePointerPartNode root : myPointers.values()) {
    root.checkConsistency();
  }
}
