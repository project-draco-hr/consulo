{
  String protocol;
  IVirtualFileSystem fileSystem;
  if (file == null) {
    protocol=VirtualFileManager.extractProtocol(url);
    fileSystem=protocol == null ? null : myVirtualFileManager.getFileSystem(protocol);
  }
 else {
    protocol=null;
    fileSystem=file.getFileSystem();
  }
  if (fileSystem == myTempFileSystem) {
    VirtualFile found=file == null ? VirtualFileManager.getInstance().findFileByUrl(url) : file;
    return new IdentityVirtualFilePointer(found,url);
  }
  if (fileSystem != myLocalFileSystem && !(fileSystem instanceof ArchiveFileSystem)) {
    VirtualFile found=fileSystem == null ? null : file != null ? file : VirtualFileManager.getInstance().findFileByUrl(url);
    return getOrCreateIdentity(url,found);
  }
  String path;
  if (file == null) {
    path=VirtualFileManager.extractPath(url);
    path=cleanupPath(path,fileSystem);
    url=VirtualFileManager.constructUrl(protocol,path);
  }
 else {
    path=file.getPath();
  }
  VirtualFilePointerImpl pointer=getOrCreate(parentDisposable,listener,path,Pair.create(file,url));
  DelegatingDisposable.registerDisposable(parentDisposable,pointer);
  return pointer;
}
