{
  String protocol;
  VirtualFileSystem fileSystem;
  if (file == null) {
    protocol=VirtualFileManager.extractProtocol(url);
    fileSystem=myVirtualFileManager.getFileSystem(protocol);
  }
 else {
    protocol=null;
    fileSystem=file.getFileSystem();
  }
  if (fileSystem == TempFileSystem.getInstance()) {
    VirtualFile found=fileSystem == null ? null : file != null ? file : VirtualFileManager.getInstance().findFileByUrl(url);
    return new IdentityVirtualFilePointer(found,url);
  }
  if (fileSystem != LocalFileSystem.getInstance() && fileSystem != JarFileSystem.getInstance()) {
    VirtualFile found=fileSystem == null ? null : file != null ? file : VirtualFileManager.getInstance().findFileByUrl(url);
    return getOrCreateIdentity(url,found);
  }
  String path;
  if (file == null) {
    path=VirtualFileManager.extractPath(url);
    path=cleanupPath(path,protocol);
    url=VirtualFileManager.constructUrl(protocol,path);
  }
 else {
    path=file.getPath();
  }
  VirtualFilePointerImpl pointer=getOrCreate(file,url,parentDisposable,listener,path);
  int newCount=pointer.incrementUsageCount();
  if (newCount == 1) {
    Disposer.register(parentDisposable,pointer);
  }
 else {
    register(parentDisposable,pointer);
  }
  return pointer;
}
