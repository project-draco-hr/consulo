{
  IVirtualFileSystem fileSystem;
  String protocol;
  String path;
  if (file == null) {
    int protocolEnd=url.indexOf(URLUtil.SCHEME_SEPARATOR);
    if (protocolEnd == -1) {
      protocol=null;
      fileSystem=null;
    }
 else {
      protocol=url.substring(0,protocolEnd);
      fileSystem=myVirtualFileManager.getFileSystem(protocol);
    }
    path=url.substring(protocolEnd + URLUtil.SCHEME_SEPARATOR.length());
  }
 else {
    fileSystem=file.getFileSystem();
    protocol=fileSystem.getProtocol();
    path=file.getPath();
    url=VirtualFileManager.constructUrl(protocol,path);
  }
  if (fileSystem == myTempFileSystem) {
    VirtualFile found=file == null ? VirtualFileManager.getInstance().findFileByUrl(url) : file;
    return new IdentityVirtualFilePointer(found,url);
  }
  boolean isArchive=fileSystem instanceof ArchiveFileSystem;
  if (fileSystem != myLocalFileSystem && !isArchive) {
    VirtualFile found=fileSystem == null ? null : file != null ? file : VirtualFileManager.getInstance().findFileByUrl(url);
    return getOrCreateIdentity(url,found);
  }
  if (file == null) {
    String cleanPath=cleanupPath(path,isArchive);
    if (cleanPath != path) {
      url=VirtualFileManager.constructUrl(protocol,cleanPath);
      path=cleanPath;
    }
  }
  VirtualFilePointerImpl pointer=getOrCreate(parentDisposable,listener,path,Pair.create(file,url));
  DelegatingDisposable.registerDisposable(parentDisposable,pointer);
  return pointer;
}
