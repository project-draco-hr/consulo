{
  return new FileBasedStorage(getMacroSubstitutor(fileSpec),this,expandedFile,fileSpec,rootTagName,this,picoContainer,ComponentRoamingManager.getInstance(),this){
    @NotNull protected StorageData createStorageData(){
      return ProjectStateStorageManager.this.createStorageData(fileSpec);
    }
    @Override public synchronized Element getState(    final String componentName) throws StateStorageException {
      Element dataFromSuper=super.getState(componentName);
      if (dataFromSuper == null) {
        ensureAlternativeState();
        if (myAlternativeStorageData != null) {
          Element result=myAlternativeStorageData.getState(componentName);
          if (result != null) {
            myAlternativeStorageData.removeState(componentName);
          }
          return result;
        }
      }
      return dataFromSuper;
    }
    @Override public boolean hasState(    final Object component,    final String componentName,    final Class<?> aClass) throws StateStorageException {
      return super.hasState(component,componentName,aClass) || hasAlternativeState(componentName);
    }
    private boolean hasAlternativeState(    final String componentName){
      ensureAlternativeState();
      if (myAlternativeStorageData != null) {
        return myAlternativeStorageData.hasState(componentName);
      }
      return false;
    }
    private void ensureAlternativeState(){
      if (!myAlternativeDocumentsLoaded) {
        try {
          myAlternativeStorageData=createStorageData();
          loadData("$PROJECT_CONFIG_DIR$/convert.xml",myAlternativeStorageData);
        }
  finally {
          myAlternativeDocumentsLoaded=true;
        }
      }
    }
    private void loadData(    final String path,    final StorageData storageData){
      String pathToDefaultStorage=expandMacroses(path);
      IFile defaultFile=FILE_SYSTEM.createFile(pathToDefaultStorage);
      try {
        Document document=JDOMUtil.loadDocument(defaultFile);
        if (document != null) {
          Element element=document.getRootElement();
          storageData.checkPathMacros(element);
          if (myPathMacroSubstitutor != null) {
            myPathMacroSubstitutor.expandPaths(element);
          }
          JDOMUtil.internElement(element,ourInterner);
          try {
            storageData.load(element);
          }
 catch (          IOException e) {
            throw new StateStorageException(e);
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
;
}
