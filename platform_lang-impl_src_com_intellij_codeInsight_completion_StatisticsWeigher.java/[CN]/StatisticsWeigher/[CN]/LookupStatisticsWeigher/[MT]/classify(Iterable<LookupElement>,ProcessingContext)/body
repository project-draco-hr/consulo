{
  checkPrefixChanged(context);
  final Collection<List<LookupElement>> byWeight=buildMapByWeight(source,context).descendingMap().values();
  List<LookupElement> initialList=getInitialNoStatElements(source,context);
  final THashSet<LookupElement> initialSet=new THashSet<LookupElement>(initialList,TObjectHashingStrategy.IDENTITY);
  final Condition<LookupElement> notInInitialList=new Condition<LookupElement>(){
    @Override public boolean value(    LookupElement element){
      return !initialSet.contains(element);
    }
  }
;
  return ContainerUtil.concat(initialList,new Iterable<LookupElement>(){
    @Override public Iterator<LookupElement> iterator(){
      return new FlatteningIterator<List<LookupElement>,LookupElement>(byWeight.iterator()){
        @Override protected Iterator<LookupElement> createValueIterator(        List<LookupElement> group){
          return myNext.classify(ContainerUtil.findAll(group,notInInitialList),context).iterator();
        }
      }
;
    }
  }
);
}
