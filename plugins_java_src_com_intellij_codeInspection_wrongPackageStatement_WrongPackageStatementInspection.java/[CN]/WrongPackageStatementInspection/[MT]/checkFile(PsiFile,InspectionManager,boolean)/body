{
  if (ApplicationManager.getApplication().isUnitTestMode())   return null;
  if (file instanceof PsiJavaFile) {
    if (JspPsiUtil.isInJspFile(file))     return null;
    PsiJavaFile javaFile=(PsiJavaFile)file;
    PsiDirectory directory=javaFile.getContainingDirectory();
    if (directory == null)     return null;
    PsiPackage dirPackage=JavaDirectoryService.getInstance().getPackage(directory);
    if (dirPackage == null)     return null;
    PsiPackageStatement packageStatement=javaFile.getPackageStatement();
    PsiClass[] classes=javaFile.getClasses();
    if (classes.length == 0 && packageStatement == null)     return null;
    String packageName=dirPackage.getQualifiedName();
    if (!Comparing.strEqual(packageName,"",true) && packageStatement == null) {
      String description=JavaErrorMessages.message("missing.package.statement",packageName);
      return new ProblemDescriptor[]{manager.createProblemDescriptor(classes[0].getNameIdentifier(),description,new AdjustPackageNameFix(packageName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly)};
    }
    if (packageStatement != null) {
      final PsiJavaCodeReferenceElement packageReference=packageStatement.getPackageReference();
      PsiPackage classPackage=(PsiPackage)packageReference.resolve();
      List<LocalQuickFix> availableFixes=new ArrayList<LocalQuickFix>();
      if (classPackage == null || !Comparing.equal(dirPackage.getQualifiedName(),packageReference.getQualifiedName(),true)) {
        availableFixes.add(new AdjustPackageNameFix(packageName));
        MoveToPackageFix moveToPackageFix=new MoveToPackageFix(classPackage != null ? classPackage.getQualifiedName() : packageReference.getQualifiedName());
        if (moveToPackageFix.isAvailable(file)) {
          availableFixes.add(moveToPackageFix);
        }
      }
      if (!availableFixes.isEmpty()) {
        String description=JavaErrorMessages.message("package.name.file.path.mismatch",packageReference.getQualifiedName(),dirPackage.getQualifiedName());
        LocalQuickFix[] fixes=availableFixes.toArray(new LocalQuickFix[availableFixes.size()]);
        ProblemDescriptor descriptor=manager.createProblemDescriptor(packageStatement.getPackageReference(),description,isOnTheFly,fixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        return new ProblemDescriptor[]{descriptor};
      }
    }
  }
  return null;
}
