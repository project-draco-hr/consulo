{
  if (options.isUsages) {
    ReferencesSearch.search(element,options.searchScope,false).forEach(new ReadActionProcessor<PsiReference>(){
      public boolean processInReadAction(      final PsiReference ref){
        TextRange rangeInElement=ref.getRangeInElement();
        return processor.process(new UsageInfo(ref.getElement(),rangeInElement.getStartOffset(),rangeInElement.getEndOffset(),false));
      }
    }
);
  }
  if (options.isSearchForTextOccurences && options.searchScope instanceof GlobalSearchScope) {
    String stringToSearch=getStringToSearch(element);
    if (stringToSearch != null) {
      final TextRange elementTextRange=ApplicationManager.getApplication().runReadAction(new Computable<TextRange>(){
        public TextRange compute(){
          return element.getTextRange();
        }
      }
);
      TextOccurrencesUtil.UsageInfoFactory factory=new TextOccurrencesUtil.UsageInfoFactory(){
        public UsageInfo createUsageInfo(        @NotNull PsiElement usage,        int startOffset,        int endOffset){
          if (elementTextRange != null && usage.getContainingFile() == element.getContainingFile() && elementTextRange.contains(startOffset) && elementTextRange.contains(endOffset)) {
            return null;
          }
          return new UsageInfo(usage,startOffset,endOffset,true);
        }
      }
;
      TextOccurrencesUtil.processTextOccurences(element,stringToSearch,(GlobalSearchScope)options.searchScope,processor,factory);
    }
  }
}
