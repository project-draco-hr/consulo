{
  final ChangeListManager changeListManager=ChangeListManager.getInstance(project);
  final FilePath[] roots=getRoots(context);
  for (  final FilePath root : roots) {
    final VirtualFile file=root.getVirtualFile();
    if (file == null)     continue;
    final Ref<Change> change=new Ref<Change>();
    if (!file.isDirectory()) {
      change.set(changeListManager.getChange(file));
    }
 else {
      final FileIndexFacade index=PeriodicalTasksCloser.getInstance().safeGetService(project,FileIndexFacade.class);
      final VirtualFileFilter filter=new VirtualFileFilter(){
        @Override public boolean accept(        final VirtualFile file){
          return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
            @Override public Boolean compute(){
              return (!index.isExcludedFile(file));
            }
          }
);
        }
      }
;
      VfsUtilCore.iterateChildrenRecursively(file,filter,new ContentIterator(){
        @Override public boolean processFile(        final VirtualFile fileOrDir){
          final Change c=changeListManager.getChange(fileOrDir);
          if (c != null) {
            change.set(c);
            return false;
          }
          return true;
        }
      }
);
    }
    if (!change.isNull()) {
      return changeListManager.getChangeList(change.get());
    }
  }
  return changeListManager.getDefaultChangeList();
}
