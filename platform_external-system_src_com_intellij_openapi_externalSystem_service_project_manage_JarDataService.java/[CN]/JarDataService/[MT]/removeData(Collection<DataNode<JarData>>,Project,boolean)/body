{
  if (toRemove.isEmpty()) {
    return;
  }
  Map<LibraryId,List<DataNode<JarData>>> jarsByLibraries=ContainerUtilRt.newHashMap();
  for (  DataNode<JarData> jarNode : toRemove) {
    LibraryId libraryId=jarNode.getData().getLibraryId();
    List<DataNode<JarData>> list=jarsByLibraries.get(libraryId);
    if (list == null) {
      jarsByLibraries.put(libraryId,list=ContainerUtilRt.newArrayList());
    }
    list.add(jarNode);
  }
  LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(project);
  for (  Map.Entry<LibraryId,List<DataNode<JarData>>> entry : jarsByLibraries.entrySet()) {
    Library library=libraryTable.getLibraryByName(entry.getKey().getLibraryName());
    if (library == null) {
      continue;
    }
    Set<DataNode<JarData>> libraryJars=ContainerUtilRt.newHashSet(entry.getValue());
    for (    DataNode<JarData> jarNode : entry.getValue()) {
      boolean valid=false;
      JarData jarData=jarNode.getData();
      for (      VirtualFile file : library.getFiles(myLibraryPathTypeMapper.map(jarData.getPathType()))) {
        if (jarData.getPath().equals(ExternalSystemUtil.getLocalFileSystemPath(file))) {
          valid=true;
          break;
        }
      }
      if (!valid) {
        libraryJars.remove(jarNode);
      }
    }
    if (!libraryJars.isEmpty()) {
      removeLibraryJars(libraryJars,entry.getKey(),project,synchronous);
    }
  }
}
