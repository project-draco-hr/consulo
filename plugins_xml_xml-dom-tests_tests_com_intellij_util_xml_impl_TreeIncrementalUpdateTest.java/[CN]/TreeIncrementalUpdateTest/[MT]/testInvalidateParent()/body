{
  final MyElement root=getDomManager().createMockElement(MyElement.class,null,true);
  new WriteCommandAction<MyElement>(getProject()){
    @Override protected void run(    Result<MyElement> result) throws Throwable {
      root.getChild().ensureTagExists();
      root.getChild2().ensureTagExists();
      final MyElement element=root.addChildElement().getChild();
      result.setResult(element);
      element.ensureTagExists().getValue().setText("abc");
      root.addChildElement();
      root.addChildElement();
    }
  }
.execute().getResultObject();
  assertTrue(root.isValid());
  final MyElement element=root.getChildElements().get(0).getChild();
  assertTrue(element.isValid());
  final MyElement child=element.getChild();
  final MyElement genericValue=child.getChild();
  new WriteCommandAction(getProject()){
    @Override protected void run(    Result result) throws Throwable {
      final Document document=getDocument(DomUtil.getFile(element));
      final TextRange range=element.getXmlTag().getTextRange();
      document.replaceString(range.getStartOffset(),range.getEndOffset(),"");
      commitDocument(document);
    }
  }
.execute();
  assertFalse(genericValue.isValid());
  assertFalse(child.isValid());
  assertFalse(element.isValid());
}
