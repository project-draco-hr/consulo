{
  final Module module=findModule(context);
  List<PackagingElement<?>> elements=new ArrayList<PackagingElement<?>>();
  final PackagingElementFactory factory=PackagingElementFactory.getInstance();
  if (module != null) {
    final ModuleRootModel rootModel=context.getModulesProvider().getRootModel(module);
    for (    OrderEntry entry : rootModel.getOrderEntries()) {
      if (entry instanceof ModuleSourceOrderEntry) {
        elements.add(factory.createModuleOutput(myModuleName));
      }
 else       if (entry instanceof LibraryOrderEntry) {
        final Library library=((LibraryOrderEntry)entry).getLibrary();
        if (library != null) {
          elements.addAll(factory.createLibraryElements(library));
        }
      }
 else       if (entry instanceof ModuleOrderEntry) {
        elements.add(new ModuleWithDependenciesPackagingElement(((ModuleOrderEntry)entry).getModuleName()));
      }
    }
  }
  final List<PackagingElement<?>> substitution=new ArrayList<PackagingElement<?>>();
  for (  PackagingElement<?> element : elements) {
    final String path=artifactType.getDefaultPathFor(element,context);
    if (path != null) {
      substitution.add(factory.createParentDirectories(path,element));
    }
  }
  return substitution;
}
