{
  super(new BorderLayout());
  myProject=project;
  myTreeModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(myTreeModel);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new NodeRenderer());
  myTree.setLineStyleAngled();
  getMainPanel().add(createToolbar(),BorderLayout.WEST);
  Splitter splitter=new Splitter(false,0.3f);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree,SideBorder.LEFT));
  myPropertiesPanelLayout=new CardLayout();
  myPropertiesPanel=new JPanel(myPropertiesPanelLayout);
  myMessageLabel=new JLabel(EMPTY_SELECTION_MESSAGE,SwingConstants.CENTER);
  myPropertiesPanel.add(MESSAGE_CARD,new Wrapper(myMessageLabel));
  splitter.setSecondComponent(myPropertiesPanel);
  getMainPanel().add(splitter,BorderLayout.CENTER);
  setupBuilder(project);
  for (  RemoteServersViewContributor contributor : RemoteServersViewContributor.EP_NAME.getExtensions()) {
    contributor.setupTree(myProject,myTree,myBuilder);
  }
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      onSelectionChanged();
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      Set<ServersTreeStructure.RemoteServerNode> nodes=getSelectedRemoteServerNodes();
      if (nodes.size() == 1) {
        RemoteServer<?> server=nodes.iterator().next().getValue();
        ServerConnectionManager.getInstance().getOrCreateConnection(server).computeDeployments(EmptyRunnable.INSTANCE);
        return true;
      }
      return false;
    }
  }
.installOn(myTree);
}
