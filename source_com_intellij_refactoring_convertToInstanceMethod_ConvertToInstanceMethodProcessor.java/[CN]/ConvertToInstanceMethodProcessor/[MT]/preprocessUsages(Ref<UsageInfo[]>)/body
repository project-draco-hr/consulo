{
  UsageInfo[] usagesIn=refUsages.get();
  ArrayList<String> conflicts=new ArrayList<String>();
  final Set<PsiMember> methods=Collections.singleton(((PsiMember)myMethod));
  if (!myTargetClass.isInterface()) {
    final String original=VisibilityUtil.getVisibilityModifier(myMethod.getModifierList());
    conflicts.addAll(Arrays.asList(MoveMembersProcessor.analyzeAccessibilityConflicts(methods,myTargetClass,new LinkedHashSet<String>(),original)));
  }
 else {
    for (    final UsageInfo usage : usagesIn) {
      if (usage instanceof ImplementingClassUsageInfo) {
        conflicts.addAll(Arrays.asList(MoveMembersProcessor.analyzeAccessibilityConflicts(methods,((ImplementingClassUsageInfo)usage).getPsiClass(),new LinkedHashSet<String>(),PsiModifier.PUBLIC)));
      }
    }
  }
  for (  final UsageInfo usageInfo : usagesIn) {
    if (usageInfo instanceof MethodCallUsageInfo) {
      final PsiMethodCallExpression methodCall=((MethodCallUsageInfo)usageInfo).getMethodCall();
      final PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
      final int index=myMethod.getParameterList().getParameterIndex(myTargetParameter);
      if (index < expressions.length) {
        PsiExpression instanceValue=expressions[index];
        instanceValue=RefactoringUtil.unparenthesizeExpression(instanceValue);
        if (instanceValue instanceof PsiLiteralExpression && ((PsiLiteralExpression)instanceValue).getValue() == null) {
          String message=ConflictsUtil.getDescription(ConflictsUtil.getContainer(methodCall),true) + " contains call with null argument for parameter " + ConflictsUtil.htmlEmphasize(myTargetParameter.getName());
          conflicts.add(message);
        }
      }
    }
  }
  if (conflicts.size() != 0) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(conflicts.toArray(new String[conflicts.size()]),myProject);
    conflictsDialog.show();
    if (!conflictsDialog.isOK())     return false;
  }
  return super.preprocessUsages(refUsages);
}
