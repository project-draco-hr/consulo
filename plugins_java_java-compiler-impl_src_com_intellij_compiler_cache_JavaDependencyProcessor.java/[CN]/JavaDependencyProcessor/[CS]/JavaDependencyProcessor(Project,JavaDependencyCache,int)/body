{
  myProject=project;
  myJavaDependencyCache=javaDependencyCache;
  myQName=qName;
  final Cache cache=javaDependencyCache.getCache();
  final Cache newClassesCache=javaDependencyCache.getNewClassesCache();
  final MethodInfo[] oldMethods=cache.getMethods(qName);
  for (  MethodInfo method : oldMethods) {
    myRefToMethodMap.put(new Dependency.MethodRef(method.getName(),method.getDescriptor()),method);
  }
  final TIntObjectHashMap<FieldInfo> oldFieldsMap=getFieldInfos(cache,qName);
  oldFieldsMap.forEachEntry(new TIntObjectProcedure<FieldInfo>(){
    public boolean execute(    int fieldName,    FieldInfo fieldInfo){
      myRefToFieldMap.put(new Dependency.FieldRef(fieldName),fieldInfo);
      return true;
    }
  }
);
  final Map<String,MethodInfoContainer> oldMethodsMap=getMethodInfos(oldMethods);
  final Map<String,MethodInfoContainer> newMethodsMap=getMethodInfos(newClassesCache.getMethods(qName));
  final TIntObjectHashMap<FieldInfo> newFieldsMap=getFieldInfos(newClassesCache,qName);
  addAddedMembers(oldFieldsMap,oldMethodsMap,newFieldsMap,newMethodsMap,myAddedMembers);
  addRemovedMembers(oldFieldsMap,oldMethodsMap,newFieldsMap,newMethodsMap,myRemovedMembers);
  addChangedMembers(oldFieldsMap,oldMethodsMap,newFieldsMap,newMethodsMap,myChangedMembers);
  myMembersChanged=!myAddedMembers.isEmpty() || !myRemovedMembers.isEmpty() || !myChangedMembers.isEmpty();
  myIsRemoteInterface=JavaMakeUtil.isInterface(cache.getFlags(myQName)) && cache.isRemote(qName);
  myIsAnnotation=ClsUtil.isAnnotation(cache.getFlags(qName));
  myWereAnnotationTargetsRemoved=myIsAnnotation && wereAnnotationTargesRemoved(cache,newClassesCache);
  myRetentionPolicyChanged=myIsAnnotation && hasRetentionPolicyChanged(cache,newClassesCache);
  myAnnotationSemanticsChanged=myIsAnnotation && hasAnnotationSemanticsChanged(cache,newClassesCache);
  int[] oldInterfaces=cache.getSuperInterfaces(qName);
  int[] newInterfaces=newClassesCache.getSuperInterfaces(qName);
  mySuperInterfaceRemoved=wereInterfacesRemoved(oldInterfaces,newInterfaces);
  mySuperInterfaceAdded=wereInterfacesRemoved(newInterfaces,oldInterfaces);
  mySuperlistGenericSignatureChanged=isSuperlistGenericSignatureChanged(cache.getGenericSignature(qName),newClassesCache.getGenericSignature(qName));
  boolean superclassesDiffer=cache.getSuperQualifiedName(qName) != newClassesCache.getSuperQualifiedName(qName);
  boolean wasDerivedFromObject=CommonClassNames.JAVA_LANG_OBJECT.equals(javaDependencyCache.resolve(cache.getSuperQualifiedName(qName)));
  mySuperClassChanged=!wasDerivedFromObject && superclassesDiffer;
  mySuperClassAdded=wasDerivedFromObject && superclassesDiffer;
}
