{
  ApplicationEx app=ApplicationManagerEx.getApplicationEx();
  try {
    IdeEventQueue.getInstance().setWindowManager((WindowManagerEx)WindowManager.getInstance());
    final Ref<Boolean> willOpenProject=new Ref<Boolean>(Boolean.FALSE);
    final AppLifecycleListener lifecyclePublisher=app.getMessageBus().syncPublisher(AppLifecycleListener.TOPIC);
    lifecyclePublisher.appFrameCreated(args,willOpenProject);
    LOG.info("App initialization took " + (System.nanoTime() - PluginManager.startupStart) / 1000000 + " ms");
    PluginManager.dumpPluginClassStatistics();
    if (!willOpenProject.get()) {
      WelcomeFrame.showNow();
      lifecyclePublisher.welcomeScreenDisplayed();
    }
  }
 catch (  PluginException e) {
    Messages.showErrorDialog("Plugin " + e.getPluginId() + " couldn't be loaded, the IDE will now exit.\n"+ "See the full details in the log.\n"+ e.getMessage(),"Plugin Error");
    System.exit(-1);
  }
  app.invokeLater(new Runnable(){
    @Override public void run(){
      if (mySplash != null) {
        mySplash.dispose();
        mySplash=null;
      }
    }
  }
,ModalityState.NON_MODAL);
  app.invokeLater(new Runnable(){
    @Override public void run(){
      if (myPerformProjectLoad) {
        loadProject();
      }
      final UpdateSettings settings=UpdateSettings.getInstance();
      if (settings != null) {
        final ApplicationInfo appInfo=ApplicationInfo.getInstance();
        if (StringUtil.compareVersionNumbers(settings.LAST_BUILD_CHECKED,appInfo.getBuild().asString()) < 0 || (UpdateChecker.isMyVeryFirstOpening() && UpdateChecker.checkNeeded())) {
          UpdateChecker.setMyVeryFirstOpening(false);
          UpdateChecker.updateAndShowResult();
        }
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          PluginManager.reportPluginError();
        }
      }
);
    }
  }
,ModalityState.NON_MODAL);
}
