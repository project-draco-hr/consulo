{
  CachedValue<PsiMethod[]> cached=getUserData(ENUM_METHODS);
  if (cached == null) {
    cached=CachedValuesManager.getManager(getProject()).createCachedValue(new CachedValueProvider<PsiMethod[]>(){
      @Override public Result<PsiMethod[]> compute(){
        PsiMethod[] defMethods=new PsiMethod[3];
        final PsiManagerEx manager=getManager();
        final PsiElementFactory factory=JavaPsiFacade.getElementFactory(getProject());
        defMethods[0]=new LightMethodBuilder(manager,GROOVY_LANGUAGE,"values").setMethodReturnType(factory.createTypeFromText(JAVA_UTIL_COLLECTION + "<" + getName()+ ">",GrEnumTypeDefinitionImpl.this)).setContainingClass(GrEnumTypeDefinitionImpl.this).addModifier(PsiModifier.PUBLIC).addModifier(PsiModifier.STATIC);
        defMethods[1]=new LightMethodBuilder(manager,GROOVY_LANGUAGE,"next").setMethodReturnType(factory.createType(GrEnumTypeDefinitionImpl.this)).setContainingClass(GrEnumTypeDefinitionImpl.this).addModifier(PsiModifier.PUBLIC);
        defMethods[2]=new LightMethodBuilder(manager,GROOVY_LANGUAGE,"previous").setMethodReturnType(factory.createType(GrEnumTypeDefinitionImpl.this)).setContainingClass(GrEnumTypeDefinitionImpl.this).addModifier(PsiModifier.PUBLIC);
        return Result.create(defMethods);
      }
    }
,false);
    putUserDataIfAbsent(ENUM_METHODS,cached);
  }
  return cached.getValue();
}
