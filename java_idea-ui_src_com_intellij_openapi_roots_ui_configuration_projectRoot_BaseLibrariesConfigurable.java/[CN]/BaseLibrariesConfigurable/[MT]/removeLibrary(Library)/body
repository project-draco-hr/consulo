{
  final LibraryTable table=library.getTable();
  if (table != null) {
    final Collection<ProjectStructureElementUsage> usages=myContext.getDaemonAnalyzer().getUsages(getSelectedElement());
    if (usages.size() > 0) {
      final MultiMap<String,ProjectStructureElementUsage> containerType2Usage=new MultiMap<String,ProjectStructureElementUsage>();
      for (      final ProjectStructureElementUsage usage : usages) {
        containerType2Usage.putValue(usage.getContainingElement().getTypeName(),usage);
      }
      List<String> types=new ArrayList<String>(containerType2Usage.keySet());
      Collections.sort(types);
      final StringBuilder sb=new StringBuilder("Library '");
      sb.append(library.getName()).append("' is used in ");
      for (int i=0; i < types.size(); i++) {
        if (i == types.size() - 1) {
          sb.append(" and in ");
        }
 else         if (i > 0) {
          sb.append(", in ");
        }
        String type=types.get(i);
        Collection<ProjectStructureElementUsage> usagesOfType=containerType2Usage.get(type);
        if (usagesOfType.size() > 1) {
          sb.append(usagesOfType.size()).append(" ").append(StringUtil.decapitalize(StringUtil.pluralize(type)));
        }
 else {
          sb.append(StringUtil.decapitalize(usagesOfType.iterator().next().getContainingElement().getPresentableName()));
        }
      }
      sb.append(".\n\nAre you sure you want to delete this library?");
      if (DialogWrapper.OK_EXIT_CODE == Messages.showOkCancelDialog(myProject,sb.toString(),"Delete Library",Messages.getQuestionIcon())) {
        final ModuleStructureConfigurable rootConfigurable=ModuleStructureConfigurable.getInstance(myProject);
        for (        final ProjectStructureElementUsage usage : usages) {
          if (usage instanceof UsageInModuleClasspath) {
            rootConfigurable.removeLibraryOrderEntry(((ModuleProjectStructureElement)usage.getContainingElement()).getModule(),library);
          }
 else           if (usage instanceof UsageInArtifact) {
            ((UsageInArtifact)usage).removeElement();
          }
        }
        getModelProvider().getModifiableModel().removeLibrary(library);
        myContext.getDaemonAnalyzer().removeElement(new LibraryProjectStructureElement(myContext,library));
        return true;
      }
    }
 else {
      getModelProvider().getModifiableModel().removeLibrary(library);
      myContext.getDaemonAnalyzer().removeElement(new LibraryProjectStructureElement(myContext,library));
      return true;
    }
  }
  return false;
}
