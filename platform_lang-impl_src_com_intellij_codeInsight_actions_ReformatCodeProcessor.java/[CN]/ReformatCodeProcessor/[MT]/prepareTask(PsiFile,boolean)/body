{
  return new FutureTask<Boolean>(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      FormattingProgressTask.FORMATTING_CANCELLED_FLAG.set(false);
      try {
        if (myRanges.isEmpty() && processChangedTextOnly) {
          myRanges.addAll(FormatChangedTextUtil.getChanges(file));
        }
        if (myRanges.isEmpty()) {
          myRanges.add(file.getTextRange());
        }
        CodeStyleManager.getInstance(myProject).reformatText(file,myRanges);
        return !FormattingProgressTask.FORMATTING_CANCELLED_FLAG.get();
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return false;
      }
 finally {
        myRanges.clear();
      }
    }
  }
);
}
