{
  final Pair<String,XmlTag> pair=new Pair<String,XmlTag>(name,rootTag);
  final CachedValue<TypeDescriptor> descriptor=myTypesMap.get(pair);
  if (descriptor != null)   return descriptor.getValue();
  if (rootTag == null)   return null;
  XmlTag[] tags=rootTag.getSubTags();
  for (int i=0; i < tags.length; i++) {
    final XmlTag tag=tags[i];
    if (equalsToSchemaName(tag,"complexType")) {
      if (name == null) {
        CachedValue<TypeDescriptor> value=createAndPutTypesCachedValue(tag,pair);
        return value.getValue();
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (nameAttribute != null) {
        if (nameAttribute.equals(name) || (name.indexOf(":") >= 0 && nameAttribute.equals(name.substring(name.indexOf(":") + 1)))) {
          CachedValue<TypeDescriptor> cachedValue=createAndPutTypesCachedValue(tag,pair);
          return cachedValue.getValue();
        }
      }
    }
 else     if (equalsToSchemaName(tag,"simpleType")) {
      if (name == null) {
        return new SimpleTypeDescriptor(tag);
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (name.equals(nameAttribute) || name.indexOf(":") >= 0 && name.substring(name.indexOf(":") + 1).equals(nameAttribute)) {
        return new ComplexTypeDescriptor(this,tag);
      }
    }
 else     if (equalsToSchemaName(tag,"include")) {
      final String schemaLocation=tag.getAttributeValue("schemaLocation");
      if (schemaLocation != null) {
        final XmlFile xmlFile=XmlUtil.findXmlFile(rootTag.getContainingFile(),schemaLocation);
        if (xmlFile != null) {
          final XmlDocument document=xmlFile.getDocument();
          if (document != null) {
            final XmlTag rTag=document.getRootTag();
            final CachedValue<TypeDescriptor> value=tag.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<TypeDescriptor>(){
              public Result<TypeDescriptor> compute(){
                final TypeDescriptor complexTypeDescriptor=findTypeDescriptor(rTag,name);
                return new Result<TypeDescriptor>(complexTypeDescriptor,new Object[]{rTag});
              }
            }
,false);
            if (value.getValue() != null) {
              myTypesMap.put(pair,value);
              return value.getValue();
            }
          }
        }
      }
    }
  }
  return null;
}
