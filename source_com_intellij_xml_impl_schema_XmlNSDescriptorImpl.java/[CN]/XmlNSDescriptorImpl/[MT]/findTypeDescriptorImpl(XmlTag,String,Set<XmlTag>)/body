{
  XmlNSDescriptorImpl nsDescriptor=getNSDescriptorToSearchIn(rootTag,name,this);
  if (nsDescriptor != this) {
    return nsDescriptor.findTypeDescriptor(nsDescriptor.getDescriptorFile().getDocument().getRootTag(),XmlUtil.findLocalNameByQualifiedName(name));
  }
  final Pair<String,XmlTag> pair=new Pair<String,XmlTag>(name,rootTag);
  final CachedValue<TypeDescriptor> descriptor=myTypesMap.get(pair);
  if (descriptor != null)   return descriptor.getValue();
  if (rootTag == null)   return null;
  XmlTag[] tags=rootTag.getSubTags();
  if (visited == null)   visited=new HashSet<XmlTag>(1);
 else   if (visited.contains(rootTag))   return null;
  visited.add(rootTag);
  for (  final XmlTag tag : tags) {
    if (equalsToSchemaName(tag,"complexType")) {
      if (name == null) {
        CachedValue<TypeDescriptor> value=createAndPutTypesCachedValue(tag,pair);
        return value.getValue();
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (nameAttribute != null) {
        if (nameAttribute.equals(name) || (name.indexOf(":") >= 0 && nameAttribute.equals(name.substring(name.indexOf(":") + 1)))) {
          CachedValue<TypeDescriptor> cachedValue=createAndPutTypesCachedValue(tag,pair);
          return cachedValue.getValue();
        }
      }
    }
 else     if (equalsToSchemaName(tag,"simpleType")) {
      if (name == null) {
        CachedValue<TypeDescriptor> value=createAndPutTypesCachedValueSimpleType(tag,pair);
        return value.getValue();
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (name.equals(nameAttribute) || name.indexOf(":") >= 0 && name.substring(name.indexOf(":") + 1).equals(nameAttribute)) {
        CachedValue<TypeDescriptor> cachedValue=createAndPutTypesCachedValue(tag,pair);
        return cachedValue.getValue();
      }
    }
 else     if (equalsToSchemaName(tag,"include") || (equalsToSchemaName(tag,"import") && rootTag.getNamespaceByPrefix(XmlUtil.findPrefixByQualifiedName(name)).equals(tag.getAttributeValue("namespace")))) {
      final String schemaLocation=tag.getAttributeValue("schemaLocation");
      if (schemaLocation != null) {
        final XmlFile xmlFile=XmlUtil.findXmlFile(rootTag.getContainingFile(),schemaLocation);
        if (xmlFile != null) {
          final XmlDocument document=xmlFile.getDocument();
          if (document != null) {
            final XmlTag rTag=document.getRootTag();
            if ("import".equals(tag.getLocalName())) {
              final XmlNSDescriptor importedDescriptor=(XmlNSDescriptor)document.getMetaData();
              nsDescriptor=(importedDescriptor instanceof XmlNSDescriptorImpl) ? (XmlNSDescriptorImpl)importedDescriptor : this;
            }
 else {
              nsDescriptor=this;
            }
            final Set<XmlTag> visited1=visited;
            final XmlNSDescriptorImpl nsDescriptor1=nsDescriptor;
            final CachedValue<TypeDescriptor> value=tag.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<TypeDescriptor>(){
              public Result<TypeDescriptor> compute(){
                final String currentName=tag.getAttributeValue("name");
                if (currentName != null && !currentName.equals(XmlUtil.findLocalNameByQualifiedName(name))) {
                  myTypesMap.remove(pair);
                  return new Result<TypeDescriptor>(null);
                }
                final TypeDescriptor complexTypeDescriptor=(nsDescriptor1 != XmlNSDescriptorImpl.this) ? nsDescriptor1.findTypeDescriptor(rTag,name) : nsDescriptor1.findTypeDescriptorImpl(rTag,name,visited1);
                return new Result<TypeDescriptor>(complexTypeDescriptor,new Object[]{rTag});
              }
            }
,false);
            if (value.getValue() != null) {
              myTypesMap.put(pair,value);
              return value.getValue();
            }
          }
        }
      }
    }
  }
  return null;
}
