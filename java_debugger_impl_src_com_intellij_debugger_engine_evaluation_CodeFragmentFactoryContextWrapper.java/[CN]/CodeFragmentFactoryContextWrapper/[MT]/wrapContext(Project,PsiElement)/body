{
  PsiElement context=originalContext;
  final DebugProcessImpl process=DebuggerManagerEx.getInstanceEx(project).getContext().getDebugProcess();
  if (process != null) {
    final Map<ObjectReference,ValueMarkup> markupMap=ValueDescriptorImpl.getMarkupMap(process);
    if (markupMap != null && markupMap.size() > 0) {
      final Pair<String,Map<String,ObjectReference>> markupVariables=createMarkupVariablesText(markupMap);
      int offset=markupVariables.getFirst().length() - 1;
      final TextWithImportsImpl textWithImports=new TextWithImportsImpl(CodeFragmentKind.CODE_BLOCK,markupVariables.getFirst(),"");
      final JavaCodeFragment codeFragment=myDelegate.createCodeFragment(textWithImports,context,project);
      codeFragment.accept(new JavaRecursiveElementVisitor(){
        public void visitLocalVariable(        PsiLocalVariable variable){
          final String name=variable.getName();
          variable.putUserData(LABEL_VARIABLE_VALUE_KEY,markupVariables.getSecond().get(name));
        }
      }
);
      final PsiElement newContext=codeFragment.findElementAt(offset);
      if (newContext != null) {
        context=newContext;
      }
    }
  }
  return context;
}
