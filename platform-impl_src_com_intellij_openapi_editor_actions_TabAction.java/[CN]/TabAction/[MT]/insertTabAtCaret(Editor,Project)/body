{
  int columnNumber=editor.getCaretModel().getLogicalPosition().column;
  CodeStyleFacade settings=CodeStyleFacade.getInstance(project);
  final Document doc=editor.getDocument();
  VirtualFile vFile=FileDocumentManager.getInstance().getFile(doc);
  final FileType fileType=vFile == null ? null : FileTypeManager.getInstance().getFileTypeByFile(vFile);
  int tabSize=settings.getIndentSize(fileType);
  int spacesToAddCount=tabSize - columnNumber % tabSize;
  boolean useTab=editor.getSettings().isUseTabCharacter(project);
  CharSequence chars=doc.getCharsSequence();
  if (useTab && settings.isSmartTabs(fileType)) {
    int offset=editor.getCaretModel().getOffset();
    while (offset > 0) {
      offset--;
      if (chars.charAt(offset) == '\t')       continue;
      if (chars.charAt(offset) == '\n')       break;
      useTab=false;
      break;
    }
  }
  doc.startGuardedBlockChecking();
  try {
    if (useTab) {
      EditorModificationUtil.typeInStringAtCaretHonorBlockSelection(editor,"\t",false);
    }
 else {
      StringBuffer buffer=new StringBuffer();
      for (int i=0; i < spacesToAddCount; i++) {
        buffer.append(' ');
      }
      EditorModificationUtil.typeInStringAtCaretHonorBlockSelection(editor,buffer.toString(),false);
    }
  }
 catch (  ReadOnlyFragmentModificationException e) {
    EditorActionManager.getInstance().getReadonlyFragmentModificationHandler().handle(e);
  }
 finally {
    doc.stopGuardedBlockChecking();
  }
}
