{
  PsiType type=expression.getType();
  PsiExpressionList list=expression.getArgumentList();
  if (!(type instanceof PsiClassType))   return;
  PsiClassType.ClassResolveResult typeResult=((PsiClassType)type).resolveGenerics();
  PsiClass aClass=typeResult.getElement();
  if (aClass == null)   return;
  if (aClass instanceof PsiAnonymousClass) {
    type=((PsiAnonymousClass)aClass).getBaseClassType();
    typeResult=((PsiClassType)type).resolveGenerics();
    aClass=typeResult.getElement();
    if (aClass == null)     return;
  }
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper();
  final PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length > 0 && list != null) {
    JavaResolveResult[] results=resolveHelper.multiResolveConstructor((PsiClassType)type,list,list);
    MethodCandidateInfo result=null;
    if (results.length == 1)     result=(MethodCandidateInfo)results[0];
    PsiMethod constructor=result == null ? null : result.getElement();
    if (constructor != null && expression.getClassReference() != null) {
      checkDeprecated(constructor,expression.getClassReference(),null,myIgnoreInsideDeprecated,myHolder);
    }
  }
}
