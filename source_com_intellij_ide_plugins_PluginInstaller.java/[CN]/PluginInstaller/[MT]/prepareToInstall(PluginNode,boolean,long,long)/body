{
  if (pluginNode.getDepends() != null && pluginNode.getDepends().size() > 0) {
    List<PluginNode> depends=new ArrayList<PluginNode>();
    for (int i=0; i < pluginNode.getDepends().size(); i++) {
      PluginId depPluginId=pluginNode.getDepends().get(i);
      if (PluginManager.isPluginInstalled(depPluginId)) {
        continue;
      }
      PluginNode depPlugin=new PluginNode(depPluginId);
      depPlugin.setSize("-1");
      depends.add(depPlugin);
    }
    if (depends.size() > 0) {
      final boolean success=prepareToInstall(depends);
      if (!success) {
        return false;
      }
    }
  }
synchronized (lock) {
    if (PluginManager.isPluginInstalled(pluginNode.getId())) {
      PluginDescriptor pluginDescriptor=PluginManager.getPlugin(pluginNode.getId());
      StartupActionScriptManager.ActionCommand deleteOld=new StartupActionScriptManager.DeleteCommand(pluginDescriptor.getPath());
      StartupActionScriptManager.addActionCommand(deleteOld);
    }
    File file=RepositoryHelper.downloadPlugin(pluginNode,packet,count,available);
    if (file == null) {
      JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),"Plugin " + pluginNode.getName() + " was not installed.");
      return false;
    }
    if (file.getName().endsWith(".jar")) {
      StartupActionScriptManager.ActionCommand copyPlugin=new StartupActionScriptManager.CopyCommand(file,new File(PathManager.getPluginsPath() + File.separator + file.getName()));
      StartupActionScriptManager.addActionCommand(copyPlugin);
    }
 else {
      String unzipPath;
      if (ZipUtil.isZipContainsFolder(file))       unzipPath=PathManager.getPluginsPath();
 else       unzipPath=PathManager.getPluginsPath() + File.separator + pluginNode.getName();
      StartupActionScriptManager.ActionCommand unzip=new StartupActionScriptManager.UnzipCommand(file,new File(unzipPath));
      StartupActionScriptManager.addActionCommand(unzip);
    }
    StartupActionScriptManager.ActionCommand deleteTemp=new StartupActionScriptManager.DeleteCommand(file);
    StartupActionScriptManager.addActionCommand(deleteTemp);
    pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
  }
  return true;
}
