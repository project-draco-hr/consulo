{
  myManifestFiles.saveManifestFiles();
  final List<Pair<? extends CompositePackagingElement<?>,List<PackagingElement<?>>>> elementsToInclude=new ArrayList<Pair<? extends CompositePackagingElement<?>,List<PackagingElement<?>>>>();
  for (  Artifact artifact : artifactModel.getArtifacts()) {
    ArtifactUtil.processPackagingElements(artifact,ArtifactElementType.ARTIFACT_ELEMENT_TYPE,new PackagingElementProcessor<ArtifactPackagingElement>(){
      @Override public boolean process(      @NotNull List<CompositePackagingElement<?>> parents,      @NotNull ArtifactPackagingElement artifactPackagingElement){
        final Artifact included=artifactPackagingElement.findArtifact(context);
        if (!parents.isEmpty() && included != null) {
          final CompositePackagingElement<?> parent=parents.get(0);
          final List<PackagingElement<?>> elements=myExternalDependencies.get(included);
          if (elements != null) {
            elementsToInclude.add(Pair.create(parent,elements));
          }
        }
        return true;
      }
    }
,context,false);
  }
  for (  Pair<? extends CompositePackagingElement<?>,List<PackagingElement<?>>> pair : elementsToInclude) {
    pair.getFirst().addOrFindChildren(pair.getSecond());
  }
}
