{
  PsiJavaCodeReferenceElement reference=(PsiJavaCodeReferenceElement)element;
  while (reference.getParent() instanceof PsiJavaCodeReferenceElement) {
    reference=(PsiJavaCodeReferenceElement)reference.getParent();
  }
  final PsiJavaFile javaFile=PsiTreeUtil.getParentOfType(reference,PsiJavaFile.class);
  if (javaFile == null) {
    return;
  }
  final PsiElement target=reference.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  if (!ImportUtils.nameCanBeImported(qualifiedName,javaFile)) {
    return;
  }
  final PsiImportList importList=javaFile.getImportList();
  if (importList == null) {
    return;
  }
  @NonNls final String packageName=ClassUtil.extractPackageName(qualifiedName);
  if (packageName.equals("java.lang")) {
    if (ImportUtils.hasOnDemandImportConflict(qualifiedName,javaFile)) {
      addImport(importList,aClass);
    }
  }
 else   if (importList.findSingleClassImportStatement(qualifiedName) == null) {
    addImport(importList,aClass);
  }
  final PsiElement qualifier=reference.getQualifier();
  if (qualifier == null) {
    return;
  }
  qualifier.delete();
}
