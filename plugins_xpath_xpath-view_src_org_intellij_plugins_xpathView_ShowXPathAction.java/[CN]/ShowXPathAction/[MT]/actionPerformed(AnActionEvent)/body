{
  final Editor editor=LangDataKeys.EDITOR.getData(e.getDataContext());
  if (editor == null) {
    return;
  }
  final Project project=editor.getProject();
  if (project == null) {
    return;
  }
  final PsiDocumentManager docmgr=PsiDocumentManager.getInstance(project);
  final Document document=editor.getDocument();
  docmgr.commitDocument(document);
  final PsiFile psiFile=docmgr.getPsiFile(document);
  if (!(psiFile instanceof XmlFile)) {
    return;
  }
  final PsiElement element=psiFile.findElementAt(editor.getCaretModel().getOffset());
  if (!(element instanceof XmlElement || element instanceof PsiWhiteSpace)) {
    XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.",editor);
    return;
  }
  final PsiElement node=XPathExpressionGenerator.transformToValidShowPathNode(element);
  if (node == null) {
    XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.",editor);
    return;
  }
  final Config cfg=myComponent.getConfig();
  final RangeHighlighter h=HighlighterUtil.highlightNode(editor,node,cfg.getContextAttributes(),cfg);
  final String path=XPathSupport.getInstance().getUniquePath((XmlElement)node,null);
  final JTextField label=new JTextField(path);
  label.setPreferredSize(new Dimension(label.getPreferredSize().width + new JLabel("M").getPreferredSize().width,label.getPreferredSize().height));
  label.setEditable(false);
  label.setBorder(null);
  label.setHorizontalAlignment(JTextField.CENTER);
  label.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
  final JPanel p=new JPanel(new BorderLayout());
  p.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED,Color.WHITE,new Color(128,128,128)),BorderFactory.createEmptyBorder(3,5,3,5)));
  final JLabel l=new JLabel("XPath:");
  p.add(l,BorderLayout.WEST);
  p.add(label,BorderLayout.CENTER);
  final LightweightHint hint=new LightweightHint(p){
    public void hide(){
      super.hide();
      HighlighterUtil.removeHighlighter(editor,h);
    }
  }
;
  final Point point=editor.visualPositionToXY(editor.getCaretModel().getVisualPosition());
  SwingUtilities.convertPointToScreen(point,editor.getContentComponent());
  HintManagerImpl.getInstanceImpl().showEditorHint(hint,editor,point,HintManagerImpl.HIDE_BY_ANY_KEY,0,false);
}
