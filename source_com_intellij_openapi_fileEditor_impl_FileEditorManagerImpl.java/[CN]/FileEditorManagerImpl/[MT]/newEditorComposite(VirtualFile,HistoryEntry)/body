{
  if (file == null) {
    return null;
  }
  final FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
  final FileEditorProvider[] providers=editorProviderManager.getProviders(myProject,file);
  final FileEditor[] editors=new FileEditor[providers.length];
  for (int i=0; i < providers.length; i++) {
    final FileEditorProvider provider=providers[i];
    LOG.assertTrue(provider != null);
    LOG.assertTrue(provider.accept(myProject,file));
    final FileEditor editor=provider.createEditor(myProject,file);
    editors[i]=editor;
    LOG.assertTrue(editor != null);
    LOG.assertTrue(editor.isValid());
    editor.addPropertyChangeListener(myEditorPropertyChangeListener);
  }
  final EditorWithProviderComposite newComposite=new EditorWithProviderComposite(file,editors,providers,this);
  final EditorHistoryManager editorHistoryManager=EditorHistoryManager.getInstance(myProject);
  for (int i=0; i < editors.length; i++) {
    final FileEditor editor=editors[i];
    if (editor instanceof TextEditor) {
    }
    final FileEditorProvider provider=providers[i];
    FileEditorState state=null;
    if (entry != null) {
      state=entry.getState(provider);
    }
    if (state == null) {
      state=editorHistoryManager.getState(file,provider);
    }
    if (state != null) {
      editor.setState(state);
    }
  }
  return newComposite;
}
