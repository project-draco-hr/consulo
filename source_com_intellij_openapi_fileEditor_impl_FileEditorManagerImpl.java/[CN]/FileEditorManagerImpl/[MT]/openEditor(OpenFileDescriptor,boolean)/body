{
  assertThread();
  if (descriptor.getFile() instanceof VirtualFileDelegate) {
    VirtualFileDelegate delegate=(VirtualFileDelegate)descriptor.getFile();
    int offset=delegate.getWindowRange().getStartOffset();
    OpenFileDescriptor realDescriptor=new OpenFileDescriptor(descriptor.getProject(),delegate.getDelegate(),descriptor.getOffset() + offset);
    return openEditor(realDescriptor,focusEditor);
  }
  final java.util.List<FileEditor> result=new ArrayList<FileEditor>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      VirtualFile file=descriptor.getFile();
      final FileEditor[] editors=openFile(file,focusEditor);
      result.addAll(Arrays.asList(editors));
      for (      final FileEditor editor : editors) {
        if (!(editor instanceof TextEditor)) {
          continue;
        }
        final Editor _editor=((TextEditor)editor).getEditor();
        if (descriptor.getOffset() >= 0) {
          _editor.getCaretModel().moveToOffset(Math.min(descriptor.getOffset(),_editor.getDocument().getTextLength()));
          _editor.getSelectionModel().removeSelection();
          _editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
        }
 else         if (descriptor.getLine() != -1 && descriptor.getColumn() != -1) {
          final LogicalPosition pos=new LogicalPosition(descriptor.getLine(),descriptor.getColumn());
          _editor.getCaretModel().moveToLogicalPosition(pos);
          _editor.getSelectionModel().removeSelection();
          _editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
        }
        break;
      }
    }
  }
,"",null);
  return result;
}
