{
  final DebuggerTreeNodeImpl node=getSelectedNode(event.getDataContext());
  if (node == null) {
    return;
  }
  final NodeDescriptorImpl descriptor=node.getDescriptor();
  if (!(descriptor instanceof ValueDescriptorImpl)) {
    return;
  }
  if (!((ValueDescriptorImpl)descriptor).canSetValue()) {
    return;
  }
  final DebuggerTree tree=getTree(event.getDataContext());
  final DebuggerContextImpl debuggerContext=getDebuggerContext(event.getDataContext());
  tree.saveState(node);
  if (descriptor instanceof FieldDescriptorImpl) {
    FieldDescriptorImpl fieldDescriptor=(FieldDescriptorImpl)descriptor;
    final Field field=fieldDescriptor.getField();
    if (!field.isStatic()) {
      final ObjectReference object=fieldDescriptor.getObject();
      if (object != null) {
        askAndSet(node,debuggerContext,new SetValueRunnable(){
          public void setValue(          EvaluationContextImpl evaluationContext,          Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
            object.setValue(field,preprocessValue(evaluationContext,newValue,field.type()));
            update(debuggerContext);
          }
          public ReferenceType loadClass(          EvaluationContextImpl evaluationContext,          String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
            return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,field.declaringType().classLoader());
          }
        }
);
      }
    }
 else {
      ReferenceType refType=field.declaringType();
      if (refType instanceof ClassType) {
        final ClassType classType=(ClassType)refType;
        askAndSet(node,debuggerContext,new SetValueRunnable(){
          public void setValue(          EvaluationContextImpl evaluationContext,          Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
            classType.setValue(field,preprocessValue(evaluationContext,newValue,field.type()));
            update(debuggerContext);
          }
          public ReferenceType loadClass(          EvaluationContextImpl evaluationContext,          String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
            return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,field.declaringType().classLoader());
          }
        }
);
      }
    }
  }
 else   if (descriptor instanceof LocalVariableDescriptorImpl) {
    LocalVariableDescriptorImpl localDescriptor=(LocalVariableDescriptorImpl)descriptor;
    final LocalVariableProxyImpl local=localDescriptor.getLocalVariable();
    if (local != null) {
      askAndSet(node,debuggerContext,new SetValueRunnable(){
        public void setValue(        EvaluationContextImpl evaluationContext,        Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
          debuggerContext.getFrameProxy().setValue(local,preprocessValue(evaluationContext,newValue,local.getType()));
          update(debuggerContext);
        }
        public ReferenceType loadClass(        EvaluationContextImpl evaluationContext,        String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
          return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,evaluationContext.getClassLoader());
        }
      }
);
    }
  }
 else   if (descriptor instanceof ArrayElementDescriptorImpl) {
    final ArrayElementDescriptorImpl elementDescriptor=(ArrayElementDescriptorImpl)descriptor;
    final ArrayReference array=elementDescriptor.getArray();
    if (array != null) {
      if (array.isCollected()) {
        Messages.showWarningDialog(tree,"The array object has been garbage-collected in the debugge VM.\nThe value will be recalculated","Object Collected");
        node.getParent().calcValue();
        return;
      }
      final ArrayType arrType=(ArrayType)array.referenceType();
      askAndSet(node,debuggerContext,new SetValueRunnable(){
        public void setValue(        EvaluationContextImpl evaluationContext,        Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
          array.setValue(elementDescriptor.getIndex(),preprocessValue(evaluationContext,newValue,arrType.componentType()));
          update(debuggerContext);
        }
        public ReferenceType loadClass(        EvaluationContextImpl evaluationContext,        String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
          return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,arrType.classLoader());
        }
      }
);
    }
  }
 else   if (descriptor instanceof EvaluationDescriptor) {
    final EvaluationDescriptor evaluationDescriptor=(EvaluationDescriptor)descriptor;
    if (evaluationDescriptor.canSetValue()) {
      askAndSet(node,debuggerContext,new SetValueRunnable(){
        public void setValue(        EvaluationContextImpl evaluationContext,        Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
          final Modifier modifier=evaluationDescriptor.getModifier();
          modifier.setValue(preprocessValue(evaluationContext,newValue,modifier.getExpectedType()));
          update(debuggerContext);
        }
        public ReferenceType loadClass(        EvaluationContextImpl evaluationContext,        String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
          return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,evaluationContext.getClassLoader());
        }
      }
);
    }
  }
}
