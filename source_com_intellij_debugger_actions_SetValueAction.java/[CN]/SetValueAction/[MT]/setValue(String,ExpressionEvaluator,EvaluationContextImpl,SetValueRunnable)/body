{
  Value value;
  try {
    value=evaluator.evaluate(evaluationContext);
    setValueRunnable.setValue(evaluationContext,value);
  }
 catch (  EvaluateException e1) {
    throw EvaluateExceptionUtil.createEvaluateException("Failed to evaluate expression '" + expressionToShow + "'. \n"+ e1.getMessage());
  }
catch (  IllegalArgumentException ex) {
    throw EvaluateExceptionUtil.createEvaluateException("Failed to evaluate expression. '" + expressionToShow + "'. \n"+ "Invalid arguments :"+ ex.getMessage());
  }
catch (  InvalidTypeException ex) {
    throw EvaluateExceptionUtil.createEvaluateException("Failed to set value : type mismatch");
  }
catch (  IncompatibleThreadStateException e) {
    throw EvaluateExceptionUtil.createEvaluateException(e);
  }
catch (  ClassNotLoadedException ex) {
    final ReferenceType refType;
    try {
      refType=setValueRunnable.loadClass(evaluationContext,ex.className());
      if (refType != null) {
        setValue(expressionToShow,evaluator,evaluationContext,setValueRunnable);
      }
    }
 catch (    InvocationException e) {
      throw EvaluateExceptionUtil.createEvaluateException(e);
    }
catch (    ClassNotLoadedException e) {
      throw EvaluateExceptionUtil.createEvaluateException(e);
    }
catch (    IncompatibleThreadStateException e) {
      throw EvaluateExceptionUtil.createEvaluateException(e);
    }
catch (    InvalidTypeException e) {
      throw EvaluateExceptionUtil.createEvaluateException(e);
    }
catch (    ObjectCollectedException e) {
      throw EvaluateExceptionUtil.OBJECT_WAS_COLLECTED;
    }
  }
}
