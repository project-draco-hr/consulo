{
  final FileGroupInfo fileGroupInfo=new FileGroupInfo();
  myHelperAction.setFileIterationListener(fileGroupInfo);
  myHelperAction.update(e);
  myGetterStub.setDelegate(fileGroupInfo);
  if ((e.getPresentation().isEnabled())) {
    removeAll();
    if (myHelperAction.allAreIgnored()) {
      final DataContext dataContext=e.getDataContext();
      final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
      SvnVcs17 vcs=SvnVcs17.getInstance(project);
      final Ref<Boolean> filesOk=new Ref<Boolean>(Boolean.FALSE);
      final Ref<Boolean> extensionOk=new Ref<Boolean>(Boolean.FALSE);
      SvnPropertyService.doCheckIgnoreProperty(vcs,project,null,fileGroupInfo,fileGroupInfo.getExtensionMask(),filesOk,extensionOk);
      if (Boolean.TRUE.equals(filesOk.get())) {
        myRemoveExactAction.setActionText(fileGroupInfo.oneFileSelected() ? fileGroupInfo.getFileName() : SvnBundle.message("action.Subversion.UndoIgnore.text"));
        add(myRemoveExactAction);
      }
      if (Boolean.TRUE.equals(extensionOk.get())) {
        myRemoveExtensionAction.setActionText(fileGroupInfo.getExtensionMask());
        add(myRemoveExtensionAction);
      }
      e.getPresentation().setText(SvnBundle.message("group.RevertIgnoreChoicesGroup.text"));
    }
 else     if (myHelperAction.allCanBeIgnored()) {
      final String ignoreExactlyName=(fileGroupInfo.oneFileSelected()) ? fileGroupInfo.getFileName() : SvnBundle.message("action.Subversion.Ignore.ExactMatch.text");
      myAddExactAction.setActionText(ignoreExactlyName);
      add(myAddExactAction);
      if (fileGroupInfo.sameExtension()) {
        myAddExtensionAction.setActionText(fileGroupInfo.getExtensionMask());
        add(myAddExtensionAction);
      }
      e.getPresentation().setText(SvnBundle.message("group.IgnoreChoicesGroup.text"));
    }
  }
}
