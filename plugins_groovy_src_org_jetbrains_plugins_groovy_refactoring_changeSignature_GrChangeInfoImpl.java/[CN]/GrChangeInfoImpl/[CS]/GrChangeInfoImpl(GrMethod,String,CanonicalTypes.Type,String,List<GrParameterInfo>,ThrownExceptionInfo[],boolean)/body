{
  this.method=method;
  this.visibilityModifier=visibilityModifier;
  this.returnType=returnType;
  this.parameters=parameters;
  this.newName=newName;
  myDelegate=generateDelegate;
  myOldName=method.getName();
  if (!method.getName().equals(newName)) {
    myIsNameChanged=true;
  }
  myIsVisibilityChanged=visibilityModifier != null && !method.hasModifierProperty(visibilityModifier);
  if (!method.isConstructor()) {
    PsiType oldReturnType=null;
    if (method.getReturnTypeElementGroovy() != null) {
      oldReturnType=method.getReturnType();
    }
    try {
      PsiType newReturnType=returnType == null ? null : returnType.getType(method,getMethod().getManager());
      if ((oldReturnType == null && newReturnType != null) || (oldReturnType != null && !oldReturnType.equals(newReturnType))) {
        myIsReturnTypeChanged=true;
      }
    }
 catch (    IncorrectOperationException e) {
      myIsReturnTypeChanged=true;
    }
  }
  GrParameter[] params=method.getParameters();
  final int oldParameterCount=this.method.getParameters().length;
  myOldParameterNames=new String[oldParameterCount];
  myOldParameterTypes=new String[oldParameterCount];
  for (int i=0; i < oldParameterCount; i++) {
    GrParameter param=params[i];
    myOldParameterNames[i]=param.getName();
    myOldParameterTypes[i]=param.getType().getCanonicalText();
  }
  if (oldParameterCount != this.parameters.size()) {
    changeParameters=true;
  }
 else {
    for (int i=0, parametersSize=parameters.size(); i < parametersSize; i++) {
      GrParameterInfo parameter=parameters.get(i);
      if (parameter.getOldIndex() != i) {
        changeParameters=true;
        break;
      }
      if (!params[i].getName().equals(parameter.getName())) {
        myIsParameterNamesChanged=true;
      }
      try {
        PsiType type=parameter.createType(method,method.getManager());
        PsiType oldType=params[i].getType();
        if (!oldType.equals(type)) {
          myIsParameterTypesChanged=true;
        }
      }
 catch (      IncorrectOperationException e) {
        myIsParameterTypesChanged=true;
      }
    }
  }
  myWasVarargs=method.isVarArgs();
  if (parameters.size() == 0) {
    myIsObtainVarargs=false;
    myIsRetainVarargs=false;
    myIsArrayToVarargs=false;
  }
 else {
    GrParameterInfo lastNewParam=parameters.get(parameters.size() - 1);
    myIsObtainVarargs=lastNewParam.isVarargType();
    myIsRetainVarargs=lastNewParam.getOldIndex() >= 0 && myIsObtainVarargs;
    if (myIsRetainVarargs) {
      final PsiType oldTypeForVararg=params[lastNewParam.getOldIndex()].getType();
      myIsArrayToVarargs=(oldTypeForVararg instanceof PsiArrayType && !(oldTypeForVararg instanceof PsiEllipsisType));
    }
 else {
      myIsArrayToVarargs=false;
    }
  }
  if (myIsNameChanged) {
    if (StringUtil.isJavaIdentifier(newName)) {
      myNewNameIdentifier=JavaPsiFacade.getElementFactory(getMethod().getProject()).createIdentifier(newName);
    }
 else {
      myNewNameIdentifier=getMethod().getNameIdentifier();
    }
  }
  PsiElementFactory factory=JavaPsiFacade.getInstance(method.getProject()).getElementFactory();
  defaultValues=new PsiExpression[parameters.size()];
  for (int i=0; i < parameters.size(); i++) {
    JavaParameterInfo info=parameters.get(i);
    if (info.getOldIndex() < 0 && !info.isVarargType()) {
      if (info.getDefaultValue() == null)       continue;
      try {
        defaultValues[i]=factory.createExpressionFromText(info.getDefaultValue(),method);
      }
 catch (      IncorrectOperationException e) {
      }
    }
  }
  myThrownExceptions=exceptions;
  final PsiClassType[] thrownTypes=method.getThrowsList().getReferencedTypes();
  if (thrownTypes.length != myThrownExceptions.length) {
    myExceptionSetChanged=true;
    myExceptionSetOrOrderChanged=true;
  }
 else {
    myExceptionSetChanged=false;
    for (int i=0; i < myThrownExceptions.length; i++) {
      ThrownExceptionInfo info=myThrownExceptions[i];
      if (info.getOldIndex() < 0) {
        myExceptionSetChanged=true;
        myExceptionSetOrOrderChanged=true;
        break;
      }
 else       if (info.getOldIndex() != i) {
        myExceptionSetOrOrderChanged=true;
      }
    }
  }
}
