{
  int firstVisibleRow=1000;
  int delta=1000;
  final int start=Math.max(0,firstVisibleRow - delta);
  final int end=Math.min(linearGraph.nodesCount(),start + 2 * delta);
  final List<GraphCommit<CommitId>> graphCommits=ContainerUtil.newArrayListWithCapacity(end - start);
  final List<CommitId> commitsIdMap=ContainerUtil.newArrayListWithCapacity(end - start);
  for (int row=start; row < end; row++) {
    int nodeId=linearGraph.getNodeId(row);
    CommitId commit=permanentCommitsInfo.getCommitId(nodeId);
    List<CommitId> parents=ContainerUtil.newSmartList();
    parents.addAll(ContainerUtil.mapNotNull(asLiteLinearGraph(linearGraph).getNodes(row,LiteLinearGraph.NodeFilter.DOWN),new Function<Integer,CommitId>(){
      @Override public CommitId fun(      Integer row){
        if (row < start || row >= end)         return null;
        return permanentCommitsInfo.getCommitId(linearGraph.getNodeId(row));
      }
    }
));
    graphCommits.add(new GraphCommitImpl<>(commit,parents,permanentCommitsInfo.getTimestamp(nodeId)));
    commitsIdMap.add(commit);
  }
  IntTimestampGetter timestampGetter=PermanentCommitsInfoImpl.createTimestampGetter(graphCommits);
  NotNullFunction<Integer,CommitId> function=createCommitIdMapFunction(commitsIdMap);
  PermanentLinearGraphImpl newLinearGraph=PermanentLinearGraphBuilder.newInstance(graphCommits).build();
  final int[] layoutIndexes=new int[end - start];
  List<Integer> headNodeIndexes=ContainerUtil.newArrayList();
  TObjectIntHashMap<CommitId> commitIdToInteger=reverseCommitIdMap(permanentCommitsInfo,permanentGraphSize);
  for (int row=start; row < end; row++) {
    CommitId commitId=commitsIdMap.get(row - start);
    int layoutIndex=oldLayout.getLayoutIndex(commitIdToInteger.get(commitId));
    layoutIndexes[row - start]=layoutIndex;
    if (asLiteLinearGraph(newLinearGraph).getNodes(row - start,LiteLinearGraph.NodeFilter.UP).isEmpty()) {
      headNodeIndexes.add(row - start);
    }
  }
  ContainerUtil.sort(headNodeIndexes,new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return layoutIndexes[o1] - layoutIndexes[o2];
    }
  }
);
  int[] starts=new int[headNodeIndexes.size()];
  for (int i=0; i < starts.length; i++) {
    starts[i]=layoutIndexes[headNodeIndexes.get(i)];
  }
  GraphLayoutImpl newLayout=new GraphLayoutImpl(layoutIndexes,headNodeIndexes,starts);
  return new SimpleGraphInfo<>(newLinearGraph,newLayout,function,timestampGetter,LinearGraphUtils.convertIdsToNodeIndexes(linearGraph,branchNodeIds));
}
