{
  return new PermanentCommitsInfo<CommitId>(){
    @NotNull @Override public CommitId getCommitId(    int nodeId){
      return myFunction.fun(nodeId);
    }
    @Override public long getTimestamp(    int nodeId){
      return myTimestampGetter.getTimestamp(nodeId);
    }
    @Override public int getNodeId(    @NotNull CommitId commitId){
      for (int id=0; id < myLinearGraph.nodesCount(); id++) {
        if (myFunction.fun(id).equals(commitId)) {
          return id;
        }
      }
      return -1;
    }
    @NotNull @Override public Set<Integer> convertToNodeIds(    @NotNull Collection<CommitId> heads){
      Set<Integer> result=ContainerUtil.newHashSet();
      for (int id=0; id < myLinearGraph.nodesCount(); id++) {
        if (heads.contains(myFunction.fun(id))) {
          result.add(id);
        }
      }
      return result;
    }
  }
;
}
