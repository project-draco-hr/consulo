{
  final IdRunnable updateRunnable=new IdRunnable(this){
    public void run(){
      if (!isVisible()) {
        return;
      }
      myNewVisibleActions.clear();
      final DataContext dataContext=getDataContext();
      Utils.expandActionGroup(myActionGroup,myNewVisibleActions,myPresentationFactory,dataContext,myPlace,myActionManager,transparentOnly);
      if (forced || !myNewVisibleActions.equals(myVisibleActions)) {
        final boolean changeBarVisibility=myNewVisibleActions.isEmpty() || myVisibleActions.isEmpty();
        final List<AnAction> temp=myVisibleActions;
        myVisibleActions=myNewVisibleActions;
        myNewVisibleActions=temp;
        Dimension oldSize=getPreferredSize();
        removeAll();
        mySecondaryActions.removeAll();
        mySecondaryActionsButton=null;
        fillToolBar(myVisibleActions,getLayoutPolicy() == AUTO_LAYOUT_POLICY && myOrientation == SwingConstants.HORIZONTAL);
        Dimension newSize=getPreferredSize();
        if (changeBarVisibility) {
          revalidate();
        }
 else {
          final Container parent=getParent();
          if (parent != null) {
            parent.invalidate();
            parent.validate();
          }
        }
        ((WindowManagerEx)WindowManager.getInstance()).adjustContainerWindow(ActionToolbarImpl.this,oldSize,newSize);
        repaint();
      }
    }
  }
;
  if (now) {
    updateRunnable.run();
  }
 else {
    final Application app=ApplicationManager.getApplication();
    final IdeFocusManager fm=IdeFocusManager.getInstance(null);
    if (!app.isUnitTestMode() && !app.isHeadlessEnvironment()) {
      if (app.isDispatchThread()) {
        fm.doWhenFocusSettlesDown(updateRunnable);
      }
 else {
        UiNotifyConnector.doWhenFirstShown(this,new Runnable(){
          public void run(){
            fm.doWhenFocusSettlesDown(updateRunnable);
          }
        }
);
      }
    }
  }
}
