{
  if (isPopupShowing())   return;
  final ActionGroup group;
  if (myOrientation == SwingConstants.HORIZONTAL) {
    group=myActionGroup;
  }
 else {
    final DefaultActionGroup outside=new DefaultActionGroup();
    for (int i=myFirstOusideIndex; i < myVisibleActions.size(); i++) {
      outside.add(myVisibleActions.get(i));
    }
    group=outside;
  }
  PopupToolbar popupToolbar=new PopupToolbar(myPlace,group,true,myDataManager,myActionManager,myKeymapManager,this){
    protected void onOtherActionPerformed(){
      hidePopup();
    }
    protected DataContext getDataContext(){
      return ActionToolbarImpl.this.getDataContext();
    }
  }
;
  popupToolbar.setLayoutPolicy(NOWRAP_LAYOUT_POLICY);
  Point location;
  if (myOrientation == SwingConstants.HORIZONTAL) {
    location=getLocationOnScreen();
  }
 else {
    location=getLocationOnScreen();
    location.y=location.y + getHeight() - popupToolbar.getPreferredSize().height;
  }
  final ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(popupToolbar,null);
  builder.setResizable(false).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      final boolean toClose=myActionManager.isActionPopupStackEmpty();
      if (toClose) {
        updateActions(false,false,true);
      }
      return toClose;
    }
  }
).setCancelOnMouseOutCallback(new MouseChecker(){
    public boolean check(    final MouseEvent event){
      return myAutoPopupRec != null && myActionManager.isActionPopupStackEmpty() && !new RelativeRectangle(ActionToolbarImpl.this,myAutoPopupRec).contains(new RelativePoint(event));
    }
  }
);
  builder.addListener(new JBPopupAdapter(){
    public void onClosed(    LightweightWindowEvent event){
      processClosed();
    }
  }
);
  myPopup=builder.createPopup();
  final AnActionListener.Adapter listener=new AnActionListener.Adapter(){
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      final JBPopup popup=myPopup;
      if (popup != null && !popup.isDisposed() && popup.isVisible()) {
        popup.cancel();
      }
    }
  }
;
  ActionManager.getInstance().addAnActionListener(listener);
  Disposer.register(myPopup,popupToolbar);
  Disposer.register(popupToolbar,new Disposable(){
    @Override public void dispose(){
      ActionManager.getInstance().removeAnActionListener(listener);
    }
  }
);
  myPopup.showInScreenCoordinates(this,location);
  final Window window=SwingUtilities.getWindowAncestor(this);
  if (window != null) {
    final ComponentAdapter componentAdapter=new ComponentAdapter(){
      public void componentResized(      final ComponentEvent e){
        hidePopup();
      }
      public void componentMoved(      final ComponentEvent e){
        hidePopup();
      }
      public void componentShown(      final ComponentEvent e){
        hidePopup();
      }
      public void componentHidden(      final ComponentEvent e){
        hidePopup();
      }
    }
;
    window.addComponentListener(componentAdapter);
    Disposer.register(popupToolbar,new Disposable(){
      public void dispose(){
        window.removeComponentListener(componentAdapter);
      }
    }
);
  }
}
