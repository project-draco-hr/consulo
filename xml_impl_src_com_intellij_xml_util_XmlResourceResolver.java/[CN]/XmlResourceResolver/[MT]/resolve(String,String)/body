{
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: resolveEntity(baseSystemId='" + baseSystemId + "' systemId='"+ systemId+ ","+ super.toString()+ "')");
  }
  if (systemId == null)   return null;
  if (myStopOnUnDeclaredResource && ExternalResourceManagerEx.getInstanceEx().isIgnoredResource(systemId)) {
    throw new IgnoredResourceException();
  }
  final PsiFile[] result=new PsiFile[]{null};
  final Runnable action=new Runnable(){
    public void run(){
      PsiFile baseFile=null;
      VirtualFile vFile=null;
      if (baseSystemId != null) {
        baseFile=resolve(null,baseSystemId);
        if (baseFile == null) {
          if (myFile != null) {
            File workingFile=new File("");
            String workingDir=workingFile.getAbsoluteFile().getAbsolutePath().replace(File.separatorChar,'/');
            String id=StringUtil.replace(baseSystemId,workingDir,myFile.getVirtualFile().getParent().getPath());
            vFile=UriUtil.findRelativeFile(id,null);
          }
          if (vFile == null) {
            vFile=UriUtil.findRelativeFile(baseSystemId,null);
            if (vFile == null) {
              try {
                vFile=VfsUtil.findFileByURL(new URL(baseSystemId));
              }
 catch (              MalformedURLException ex) {
              }
            }
          }
        }
        if (vFile != null && !vFile.isDirectory() && !(vFile.getFileSystem() instanceof HttpFileSystem)) {
          baseFile=PsiManager.getInstance(myProject).findFile(vFile);
        }
      }
      if (baseFile == null) {
        baseFile=myFile;
      }
      PsiFile psiFile=ExternalResourceManager.getInstance().getResourceLocation(systemId,baseFile,null);
      if (psiFile == null) {
        psiFile=XmlUtil.findXmlFile(baseFile,systemId);
      }
      if (psiFile == null && baseSystemId != null) {
        String fullUrl=baseSystemId.substring(0,baseSystemId.lastIndexOf('/') + 1) + systemId;
        psiFile=XmlUtil.findXmlFile(baseFile,fullUrl);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("before relative file checking:" + psiFile + ","+ systemId+ ","+ baseSystemId+ ")");
      }
      if (psiFile == null && baseSystemId == null) {
        File workingFile=new File("");
        String workingDir=workingFile.getAbsoluteFile().getAbsolutePath().replace(File.separatorChar,'/') + "/";
        String relativePath=StringUtil.replace(systemId,workingDir,"");
        if (relativePath.equals(systemId)) {
          relativePath=systemId.substring(systemId.lastIndexOf('/') + 1);
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("next to relative file checking:" + relativePath + ","+ myExternalResourcesMap.size()+ ")");
        }
        for (        String path : myExternalResourcesMap.values()) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Finding file by url:" + path);
          }
          VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(path);
          if (file == null)           continue;
          if (LOG.isDebugEnabled()) {
            LOG.debug("Finding " + relativePath + " relative to:"+ file.getPath());
          }
          final VirtualFile relativeFile=UriUtil.findRelativeFile(relativePath,file);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found " + (relativeFile != null ? relativeFile.getPath() : "null"));
          }
          if (relativeFile != null) {
            psiFile=PsiManager.getInstance(myProject).findFile(relativeFile);
            if (psiFile != null)             break;
          }
        }
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("resolveEntity: psiFile='" + (psiFile != null ? psiFile.getVirtualFile() : null) + "'");
      }
      result[0]=psiFile;
    }
  }
;
  ApplicationManager.getApplication().runReadAction(action);
  final PsiFile psiFile=result[0];
  if (psiFile != null) {
    final String url=psiFile.getVirtualFile().getUrl();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Adding external resource ref:" + systemId + ","+ url+ ","+ super.toString());
    }
    myExternalResourcesMap.put(systemId,url);
  }
  return psiFile;
}
