{
  myProject=project;
  myMessageBus=messageBus;
  mySerialization=new ProjectLevelVcsManagerSerialization();
  myOptionsAndConfirmations=new OptionsAndConfirmations();
  myDefaultVcsRootPolicy=defaultVcsRootPolicy;
  myInitialization=new VcsInitialization(myProject);
  Disposer.register(project,myInitialization);
  projectManager.addProjectManagerListener(project,new ProjectManagerAdapter(){
    @Override public void projectClosing(    Project project){
      Disposer.dispose(myInitialization);
    }
  }
);
  if (project.isDefault()) {
    MessageBusConnection connection=ApplicationManager.getApplication().getMessageBus().connect();
    connection.subscribe(AppLifecycleListener.TOPIC,new AppLifecycleListener.Adapter(){
      @Override public void appClosing(){
        Disposer.dispose(myInitialization);
      }
    }
);
  }
  myMappings=new NewMappings(myProject,myMessageBus,this,manager);
  myMappingsToRoots=new MappingsToRoots(myMappings,myProject);
  myVcsHistoryCache=new VcsHistoryCache();
  myContentRevisionCache=new ContentRevisionCache();
  myConnect=myMessageBus.connect();
  myVcsFileListenerContextHelper=vcsFileListenerContextHelper;
  VcsListener vcsListener=new VcsListener(){
    @Override public void directoryMappingChanged(){
      myVcsHistoryCache.clear();
      myVcsFileListenerContextHelper.possiblySwitchActivation(hasActiveVcss());
    }
  }
;
  myExcludedIndex=excludedFileIndex;
  myConnect.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED,vcsListener);
  myConnect.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED_IN_PLUGIN,vcsListener);
  myConnect.subscribe(UpdatedFilesListener.UPDATED_FILES,new UpdatedFilesListener(){
    @Override public void consume(    Set<String> strings){
      myContentRevisionCache.clearCurrent(strings);
    }
  }
);
  myAnnotationLocalChangesListener=new VcsAnnotationLocalChangesListenerImpl(myProject,this);
}
