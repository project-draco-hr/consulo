{
  myProject=project;
  myMessageBus=messageBus;
  mySerialization=new ProjectLevelVcsManagerSerialization();
  myOptionsAndConfirmations=new OptionsAndConfirmations();
  myDefaultVcsRootPolicy=DefaultVcsRootPolicy.getInstance(project);
  myBackgroundableActionHandlerMap=new EnumMap<VcsBackgroundableActions,BackgroundableActionEnabledHandler>(VcsBackgroundableActions.class);
  myInitialization=new VcsInitialization(myProject);
  myMappings=new NewMappings(myProject,myMessageBus,this,manager,excludedFileIndex);
  myMappingsToRoots=new MappingsToRoots(myMappings,myProject);
  if (!myProject.isDefault()) {
    myVcsEventListenerManager=new VcsEventsListenerManagerImpl();
  }
  myVcsHistoryCache=new VcsHistoryCache();
  myContentRevisionCache=new ContentRevisionCache();
  myConnect=myMessageBus.connect();
  myVcsFileListenerContextHelper=VcsFileListenerContextHelper.getInstance(myProject);
  VcsListener vcsListener=new VcsListener(){
    @Override public void directoryMappingChanged(){
      myVcsHistoryCache.clear();
      myVcsFileListenerContextHelper.possiblySwitchActivation(hasActiveVcss());
    }
  }
;
  myExcludedIndex=excludedFileIndex;
  myConnect.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED,vcsListener);
  myConnect.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED_IN_PLUGIN,vcsListener);
  myConnect.subscribe(UpdatedFilesListener.UPDATED_FILES,new UpdatedFilesListener(){
    @Override public void consume(    Set<String> strings){
      myContentRevisionCache.clearCurrent(strings);
    }
  }
);
  myAnnotationLocalChangesListener=new VcsAnnotationLocalChangesListenerImpl(myProject,this);
}
