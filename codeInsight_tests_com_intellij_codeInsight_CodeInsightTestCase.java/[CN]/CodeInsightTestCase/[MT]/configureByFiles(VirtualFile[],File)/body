{
  myFile=null;
  myEditor=null;
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
  final ModifiableRootModel rootModel=rootManager.getModifiableModel();
  if (clearModelBeforeConfiguring()) {
    rootModel.clear();
  }
  File dir=createTempDirectory();
  myFilesToDelete.add(dir);
  VirtualFile vDir=LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar,'/'));
  final VirtualFile[] newVFiles=new VirtualFile[vFiles.length];
  final RangeMarker[] caretMarkers=new RangeMarker[vFiles.length];
  final RangeMarker[] selStartMarkers=new RangeMarker[vFiles.length];
  final RangeMarker[] selEndMarkers=new RangeMarker[vFiles.length];
  final String[] newFileTexts=new String[vFiles.length];
  boolean projectCopied=false;
  List<Writer> writersToClose=new ArrayList<Writer>(vFiles.length);
  List<OutputStream> streamsToClose=new ArrayList<OutputStream>(0);
  for (int i=0; i < vFiles.length; i++) {
    VirtualFile vFile=vFiles[i];
    assertNotNull(vFile);
    byte[] content=vFile.getFileType().isBinary() ? vFile.contentsToByteArray() : null;
    final String fileText=vFile.getFileType().isBinary() ? null : VfsUtil.loadText(vFile);
    String newFileText=null;
    RangeMarker caretMarker=null;
    RangeMarker selStartMarker=null;
    RangeMarker selEndMarker=null;
    if (fileText != null) {
      Document document=EditorFactory.getInstance().createDocument(fileText);
      int caretIndex=fileText.indexOf(CARET_MARKER);
      int selStartIndex=fileText.indexOf(SELECTION_START_MARKER);
      int selEndIndex=fileText.indexOf(SELECTION_END_MARKER);
      caretMarker=caretIndex >= 0 ? document.createRangeMarker(caretIndex,caretIndex) : null;
      selStartMarker=selStartIndex >= 0 ? document.createRangeMarker(selStartIndex,selStartIndex) : null;
      selEndMarker=selEndIndex >= 0 ? document.createRangeMarker(selEndIndex,selEndIndex) : null;
      if (caretMarker != null) {
        document.deleteString(caretMarker.getStartOffset(),caretMarker.getStartOffset() + CARET_MARKER.length());
      }
      if (selStartMarker != null) {
        document.deleteString(selStartMarker.getStartOffset(),selStartMarker.getStartOffset() + SELECTION_START_MARKER.length());
      }
      if (selEndMarker != null) {
        document.deleteString(selEndMarker.getStartOffset(),selEndMarker.getStartOffset() + SELECTION_END_MARKER.length());
      }
      newFileText=document.getText();
    }
    VirtualFile newVFile;
    if (projectRoot != null) {
      if (!projectCopied) {
        FileUtil.copyDir(projectRoot,dir);
        projectCopied=true;
      }
      String path=vDir.getPath() + vFile.getPath().substring(projectRoot.getPath().length());
      newVFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(path);
      doWrite(newFileText,newVFile,writersToClose,content,streamsToClose);
    }
 else {
      newVFile=vDir.createChildData(this,vFile.getName());
      doWrite(newFileText,newVFile,writersToClose,content,streamsToClose);
    }
    newVFiles[i]=newVFile;
    newFileTexts[i]=newFileText;
    selEndMarkers[i]=selEndMarker;
    selStartMarkers[i]=selStartMarker;
    caretMarkers[i]=caretMarker;
  }
  for (int i=writersToClose.size() - 1; i >= 0; --i) {
    writersToClose.get(i).close();
  }
  for (int i=streamsToClose.size() - 1; i >= 0; --i) {
    streamsToClose.get(i).close();
  }
  final ContentEntry contentEntry=rootModel.addContentEntry(vDir);
  if (isAddDirToSource())   contentEntry.addSourceFolder(vDir,false);
  rootModel.commit();
  for (int i=0; i < newVFiles.length; i++) {
    VirtualFile newVFile=newVFiles[i];
    PsiFile file=myPsiManager.findFile(newVFile);
    if (myFile == null)     myFile=file;
    Editor editor=createEditor(newVFile);
    if (myEditor == null)     myEditor=editor;
    if (caretMarkers[i] != null) {
      int caretLine=StringUtil.offsetToLineNumber(newFileTexts[i],caretMarkers[i].getStartOffset());
      int caretCol=caretMarkers[i].getStartOffset() - StringUtil.lineColToOffset(newFileTexts[i],caretLine,0);
      LogicalPosition pos=new LogicalPosition(caretLine,caretCol);
      editor.getCaretModel().moveToLogicalPosition(pos);
    }
    if (selStartMarkers[i] != null) {
      editor.getSelectionModel().setSelection(selStartMarkers[i].getStartOffset(),selEndMarkers[i].getStartOffset());
    }
  }
  return vDir;
}
