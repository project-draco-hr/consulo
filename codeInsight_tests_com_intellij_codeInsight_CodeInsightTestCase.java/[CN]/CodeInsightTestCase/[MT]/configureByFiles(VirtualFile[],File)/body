{
  myFile=null;
  myEditor=null;
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
  final ModifiableRootModel rootModel=rootManager.getModifiableModel();
  if (clearModelBeforeConfiguring()) {
    rootModel.clear();
  }
  File dir=createTempDirectory();
  myFilesToDelete.add(dir);
  VirtualFile vDir=LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar,'/'));
  EditorInfo[] editorInfos=new EditorInfo[vFiles.length];
  final VirtualFile[] newVFiles=new VirtualFile[vFiles.length];
  boolean projectCopied=false;
  List<Writer> writersToClose=new ArrayList<Writer>(vFiles.length);
  List<OutputStream> streamsToClose=new ArrayList<OutputStream>(0);
  for (int i=0; i < vFiles.length; i++) {
    VirtualFile vFile=vFiles[i];
    assertNotNull(vFile);
    byte[] content=vFile.getFileType().isBinary() ? vFile.contentsToByteArray() : null;
    final String fileText=vFile.getFileType().isBinary() ? null : StringUtil.convertLineSeparators(VfsUtil.loadText(vFile),"\n");
    String newFileText=null;
    if (fileText != null) {
      EditorInfo editorInfo=new EditorInfo(fileText);
      editorInfos[i]=editorInfo;
      newFileText=editorInfo.getNewFileText();
    }
    VirtualFile newVFile;
    if (projectRoot != null) {
      if (!projectCopied) {
        FileUtil.copyDir(projectRoot,dir);
        projectCopied=true;
      }
      String path=vDir.getPath() + vFile.getPath().substring(projectRoot.getPath().length());
      newVFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(path);
      doWrite(newFileText,newVFile,writersToClose,content,streamsToClose);
    }
 else {
      newVFile=vDir.createChildData(this,vFile.getName());
      doWrite(newFileText,newVFile,writersToClose,content,streamsToClose);
    }
    newVFiles[i]=newVFile;
  }
  for (int i=writersToClose.size() - 1; i >= 0; --i) {
    writersToClose.get(i).close();
  }
  for (int i=streamsToClose.size() - 1; i >= 0; --i) {
    streamsToClose.get(i).close();
  }
  final ContentEntry contentEntry=rootModel.addContentEntry(vDir);
  if (isAddDirToSource())   contentEntry.addSourceFolder(vDir,false);
  rootModel.commit();
  for (int i=0; i < newVFiles.length; i++) {
    VirtualFile newVFile=newVFiles[i];
    PsiFile file=myPsiManager.findFile(newVFile);
    if (myFile == null)     myFile=file;
    Editor editor=createEditor(newVFile);
    if (myEditor == null)     myEditor=editor;
    editorInfos[i].applyToEditor(editor);
  }
  return vDir;
}
