{
  myFile=null;
  myEditor=null;
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
  final ModifiableRootModel rootModel=rootManager.getModifiableModel();
  if (clearModelBeforeConfiguring()) {
    rootModel.clear();
  }
  File toDirIO=createTempDirectory();
  VirtualFile toDir=LocalFileSystem.getInstance().refreshAndFindFileByPath(toDirIO.getCanonicalPath().replace(File.separatorChar,'/'));
  final LinkedHashMap<VirtualFile,EditorInfo> editorInfos;
  vFiles=ArrayUtil.reverseArray(vFiles);
  if (projectRoot != null) {
    FileUtil.copyDir(projectRoot,toDirIO);
    VirtualFile fromDir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectRoot);
    editorInfos=copyFilesFillingEditorInfos(fromDir,toDir,ContainerUtil.map2Array(vFiles,String.class,new Function<VirtualFile,String>(){
      public String fun(      final VirtualFile s){
        return s.getPath().substring(projectRoot.getPath().length());
      }
    }
));
  }
 else {
    editorInfos=new LinkedHashMap<VirtualFile,EditorInfo>();
    for (    final VirtualFile vFile : vFiles) {
      editorInfos.putAll(copyFilesFillingEditorInfos(vFile.getParent(),toDir,vFile.getName()));
    }
  }
  if (isAddDirToContentRoot()) {
    final ContentEntry contentEntry=rootModel.addContentEntry(toDir);
    if (isAddDirToSource())     contentEntry.addSourceFolder(toDir,false);
  }
  rootModel.commit();
  openEditorsAndActivateLast(editorInfos);
  return toDir;
}
