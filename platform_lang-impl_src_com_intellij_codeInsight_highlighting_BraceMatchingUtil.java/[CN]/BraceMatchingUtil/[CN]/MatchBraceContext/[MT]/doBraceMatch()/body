{
  myBraceStack.clear();
  myTagNameStack.clear();
  myBraceStack.push(brace1Token);
  if (isStrict) {
    myTagNameStack.push(brace1TagName);
  }
  boolean matched=false;
  while (true) {
    if (!forward) {
      iterator.retreat();
    }
 else {
      iterator.advance();
    }
    if (iterator.atEnd()) {
      break;
    }
    IElementType tokenType=iterator.getTokenType();
    if (getTokenGroup(tokenType,fileType) != group) {
      continue;
    }
    String tagName=getTagName(myMatcher,fileText,iterator);
    if (!isStrict && !Comparing.equal(brace1TagName,tagName,isCaseSensitive))     continue;
    if (forward ? isLBraceToken(iterator,fileText,fileType) : isRBraceToken(iterator,fileText,fileType)) {
      myBraceStack.push(tokenType);
      if (isStrict) {
        myTagNameStack.push(tagName);
      }
    }
 else     if (forward ? isRBraceToken(iterator,fileText,fileType) : isLBraceToken(iterator,fileText,fileType)) {
      IElementType topTokenType=myBraceStack.pop();
      String topTagName=null;
      if (isStrict) {
        topTagName=myTagNameStack.pop();
      }
      if (!isStrict) {
        final IElementType baseType=myMatcher.getOppositeBraceTokenType(tokenType);
        if (myBraceStack.contains(baseType)) {
          while (!isPairBraces(topTokenType,tokenType,fileType) && !myBraceStack.empty()) {
            topTokenType=myBraceStack.pop();
          }
        }
 else         if ((brace1TagName == null || !brace1TagName.equals(tagName)) && !isPairBraces(topTokenType,tokenType,fileType)) {
          myBraceStack.push(topTokenType);
          continue;
        }
      }
      if (!isPairBraces(topTokenType,tokenType,fileType) || isStrict && !Comparing.equal(topTagName,tagName,isCaseSensitive)) {
        matched=false;
        break;
      }
      if (myBraceStack.isEmpty()) {
        matched=true;
        break;
      }
    }
  }
  return matched;
}
