{
  ourBraceStack.clear();
  ourTagNameStack.clear();
  ourBraceStack.push(brace1Token);
  if (isStrict) {
    ourTagNameStack.push(brace1TagName);
  }
  boolean matched=false;
  while (true) {
    if (!forward) {
      iterator.retreat();
    }
 else {
      iterator.advance();
    }
    if (iterator.atEnd()) {
      break;
    }
    IElementType tokenType=iterator.getTokenType();
    if (getTokenGroup(tokenType,fileType) != group) {
      continue;
    }
    String tagName=myMatcher == null ? null : getTagName(myMatcher,fileText,iterator);
    if (!isStrict && !Comparing.equal(brace1TagName,tagName,isCaseSensitive))     continue;
    if (isStructural && (forward ? isRBraceToken(iterator,fileText,fileType) && !isPairBraces(brace1Token,tokenType,fileType) : isLBraceToken(iterator,fileText,fileType) && !isPairBraces(brace1Token,tokenType,fileType))) {
      if (!ourBraceStack.isEmpty() && myMatcher != null) {
        boolean shouldContinue;
        if (myMatcher instanceof NontrivialBraceMatcher) {
          shouldContinue=true;
          List<IElementType> oppositeElementTypes=((NontrivialBraceMatcher)myMatcher).getOppositeBraceTokenTypes(tokenType);
          for (int i=ourBraceStack.size() - 1; i >= 0; i--) {
            if (oppositeElementTypes.contains(ourBraceStack.get(i))) {
              shouldContinue=false;
            }
          }
        }
 else {
          shouldContinue=!ourBraceStack.contains(myMatcher.getOppositeBraceTokenType(tokenType));
        }
        if (shouldContinue) {
          continue;
        }
      }
    }
    if (forward ? isLBraceToken(iterator,fileText,fileType) : isRBraceToken(iterator,fileText,fileType)) {
      ourBraceStack.push(tokenType);
      if (isStrict) {
        ourTagNameStack.push(tagName);
      }
    }
 else     if (forward ? isRBraceToken(iterator,fileText,fileType) : isLBraceToken(iterator,fileText,fileType)) {
      IElementType topTokenType=ourBraceStack.pop();
      String topTagName=null;
      if (isStrict) {
        topTagName=ourTagNameStack.pop();
      }
      if (!isStrict && myMatcher != null && ourBraceStack.contains(myMatcher.getOppositeBraceTokenType(tokenType))) {
        while (!isPairBraces(topTokenType,tokenType,fileType)) {
          topTokenType=ourBraceStack.pop();
        }
      }
      if (!isPairBraces(topTokenType,tokenType,fileType) || isStrict && !Comparing.equal(topTagName,tagName,isCaseSensitive)) {
        matched=false;
        break;
      }
      if (ourBraceStack.isEmpty()) {
        matched=true;
        break;
      }
    }
  }
  return matched;
}
