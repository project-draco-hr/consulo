{
  if (!(element instanceof PsiJavaToken)) {
    return false;
  }
  final IElementType tokenType=((PsiJavaToken)element).getTokenType();
  if (!JavaTokenType.TRY_KEYWORD.equals(tokenType)) {
    return false;
  }
  if (!(element.getParent() instanceof PsiTryStatement)) {
    return false;
  }
  final PsiTryStatement tryStatement=(PsiTryStatement)element.getParent();
  if (ErrorUtil.containsError(tryStatement)) {
    return false;
  }
  final Set exceptionsThrown=new HashSet(10);
  final PsiManager mgr=element.getManager();
  final PsiElementFactory factory=mgr.getElementFactory();
  final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
  ExceptionUtils.calculateExceptionsThrownForCodeBlock(tryBlock,exceptionsThrown,factory);
  final Set exceptionsCaught=ExceptionUtils.getExceptionTypesHandled(tryStatement);
  for (Iterator iterator=exceptionsThrown.iterator(); iterator.hasNext(); ) {
    final PsiType typeThrown=(PsiType)iterator.next();
    if (!exceptionsCaught.contains(typeThrown)) {
      for (Iterator caught=exceptionsCaught.iterator(); caught.hasNext(); ) {
        final PsiType typeCaught=(PsiType)caught.next();
        if (typeCaught.isAssignableFrom(typeThrown)) {
          return true;
        }
      }
    }
  }
  return false;
}
