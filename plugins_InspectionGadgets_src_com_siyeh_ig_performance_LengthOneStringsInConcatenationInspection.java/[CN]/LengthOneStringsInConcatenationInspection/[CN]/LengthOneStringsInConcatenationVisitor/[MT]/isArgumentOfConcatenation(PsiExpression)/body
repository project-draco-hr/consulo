{
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiPolyadicExpression)) {
    return false;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  if (!JavaTokenType.PLUS.equals(polyadicExpression.getOperationTokenType())) {
    return false;
  }
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operands.length < 2) {
    return false;
  }
  final int index=ArrayUtil.indexOf(operands,expression);
  for (int i=0; i < index; i++) {
    final PsiType type=operands[i].getType();
    if (TypeUtils.isJavaLangString(type)) {
      return true;
    }
  }
  if (index == 0) {
    final PsiType type=operands[index + 1].getType();
    return TypeUtils.isJavaLangString(type);
  }
  return false;
}
