{
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(context,PsiClass.class);
  if (ClassUtils.isSubclass(containingClass,qualifierClass)) {
    return;
  }
  final PsiFile psiFile=context.getContainingFile();
  if (!(psiFile instanceof PsiJavaFile)) {
    return;
  }
  final PsiJavaFile javaFile=(PsiJavaFile)psiFile;
  final PsiImportList importList=javaFile.getImportList();
  if (importList == null) {
    return;
  }
  final PsiImportStatementBase existingImportStatement=importList.findSingleImportStatement(memberName);
  if (existingImportStatement != null) {
    return;
  }
  final PsiImportStaticStatement onDemandImportStatement=findOnDemandImportStaticStatement(importList,qualifierClass);
  if (onDemandImportStatement != null && !hasOnDemandImportStaticConflict(qualifierClass,memberName,context)) {
    return;
  }
  final Project project=context.getProject();
  final GlobalSearchScope scope=context.getResolveScope();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiClass aClass=psiFacade.findClass(qualifierClass,scope);
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  final List<PsiImportStaticStatement> imports=getMatchingImports(importList,qualifiedName);
  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
  final PsiElementFactory elementFactory=psiFacade.getElementFactory();
  if (imports.size() < codeStyleSettings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) {
    importList.add(elementFactory.createImportStaticStatement(aClass,memberName));
  }
 else {
    for (    PsiImportStaticStatement importStatement : imports) {
      importStatement.delete();
    }
    importList.add(elementFactory.createImportStaticStatement(aClass,"*"));
  }
}
