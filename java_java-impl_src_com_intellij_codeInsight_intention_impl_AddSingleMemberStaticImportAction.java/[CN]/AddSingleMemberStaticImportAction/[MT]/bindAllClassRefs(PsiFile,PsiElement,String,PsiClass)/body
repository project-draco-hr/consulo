{
  file.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      if (referenceName != null && referenceName.equals(reference.getReferenceName())) {
        PsiElement resolved=reference.resolve();
        if (resolved != null) {
          reference.putUserData(TEMP_REFERENT_USER_DATA,resolved);
        }
      }
    }
  }
);
  if (resolved != null) {
    PsiReferenceExpressionImpl.bindToElementViaStaticImport(resolvedClass,referenceName,((PsiJavaFile)file).getImportList());
  }
  file.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      if (reference.getParameterList() != null && reference.getParameterList().getFirstChild() != null)       return;
      if (referenceName.equals(reference.getReferenceName())) {
        final PsiElement qualifierExpression=reference.getQualifier();
        PsiElement referent=reference.getUserData(TEMP_REFERENT_USER_DATA);
        if (!reference.isQualified()) {
          if (referent instanceof PsiMember && referent != reference.resolve()) {
            PsiElementFactory factory=JavaPsiFacade.getInstance(reference.getProject()).getElementFactory();
            try {
              final PsiClass containingClass=((PsiMember)referent).getContainingClass();
              if (containingClass != null) {
                PsiReferenceExpression copy=(PsiReferenceExpression)factory.createExpressionFromText("A." + reference.getReferenceName(),null);
                reference=(PsiReferenceExpression)reference.replace(copy);
                ((PsiReferenceExpression)reference.getQualifier()).bindToElement(containingClass);
              }
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
          reference.putUserData(TEMP_REFERENT_USER_DATA,null);
        }
 else {
          if (qualifierExpression instanceof PsiJavaCodeReferenceElement) {
            PsiElement aClass=((PsiJavaCodeReferenceElement)qualifierExpression).resolve();
            if (aClass instanceof PsiVariable) {
              aClass=PsiUtil.resolveClassInClassTypeOnly(((PsiVariable)aClass).getType());
            }
            if (aClass instanceof PsiClass && InheritanceUtil.isInheritorOrSelf((PsiClass)aClass,resolvedClass,true)) {
              boolean foundMemberByName=false;
              if (referent instanceof PsiMember) {
                final String memberName=((PsiMember)referent).getName();
                final PsiClass containingClass=PsiTreeUtil.getParentOfType(reference,PsiClass.class);
                if (containingClass != null) {
                  foundMemberByName|=containingClass.findFieldByName(memberName,true) != null;
                  foundMemberByName|=containingClass.findMethodsByName(memberName,true).length > 0;
                }
              }
              if (!foundMemberByName) {
                try {
                  qualifierExpression.delete();
                }
 catch (                IncorrectOperationException e) {
                  LOG.error(e);
                }
              }
            }
          }
        }
        reference.putUserData(TEMP_REFERENT_USER_DATA,null);
      }
      super.visitReferenceElement(reference);
    }
  }
);
}
