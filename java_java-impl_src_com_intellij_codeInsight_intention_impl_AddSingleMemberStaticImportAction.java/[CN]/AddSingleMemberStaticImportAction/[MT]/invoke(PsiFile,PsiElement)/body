{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  final PsiReferenceExpression refExpr=(PsiReferenceExpression)element.getParent();
  final PsiElement resolved=refExpr.resolve();
  file.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      String referenceName=refExpr.getReferenceName();
      if (referenceName != null && referenceName.equals(expression.getReferenceName())) {
        PsiElement resolved=expression.resolve();
        if (resolved != null) {
          expression.putUserData(TEMP_REFERENT_USER_DATA,resolved);
        }
      }
    }
  }
);
  if (resolved != null) {
    RefactoringUtil.bindToElementViaStaticImport(((PsiMember)resolved).getContainingClass(),((PsiNamedElement)resolved).getName(),((PsiJavaFile)file).getImportList());
  }
  file.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      if (expression.getParameterList() != null && expression.getParameterList().getFirstChild() != null)       return;
      if (refExpr.getReferenceName().equals(expression.getReferenceName())) {
        final PsiExpression qualifierExpression=expression.getQualifierExpression();
        PsiElement referent=expression.getUserData(TEMP_REFERENT_USER_DATA);
        if (!expression.isQualified()) {
          if (referent instanceof PsiMember && referent != expression.resolve()) {
            PsiElementFactory factory=JavaPsiFacade.getInstance(expression.getProject()).getElementFactory();
            try {
              PsiReferenceExpression copy=(PsiReferenceExpression)factory.createExpressionFromText("A." + expression.getReferenceName(),null);
              expression=(PsiReferenceExpression)expression.replace(copy);
              ((PsiReferenceExpression)qualifierExpression).bindToElement(((PsiMember)referent).getContainingClass());
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
          expression.putUserData(TEMP_REFERENT_USER_DATA,null);
        }
 else {
          if (qualifierExpression instanceof PsiReferenceExpression) {
            PsiElement aClass=((PsiReferenceExpression)qualifierExpression).resolve();
            if (aClass == ((PsiMember)resolved).getContainingClass()) {
              boolean foundMemberByName=false;
              if (referent instanceof PsiMember) {
                final String memberName=((PsiMember)referent).getName();
                final PsiClass containingClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
                if (containingClass != null) {
                  foundMemberByName|=containingClass.findFieldByName(memberName,true) != null;
                  foundMemberByName|=containingClass.findMethodsByName(memberName,true).length > 0;
                }
              }
              if (!foundMemberByName) {
                try {
                  qualifierExpression.delete();
                }
 catch (                IncorrectOperationException e) {
                  LOG.error(e);
                }
              }
            }
          }
        }
        expression.putUserData(TEMP_REFERENT_USER_DATA,null);
      }
      super.visitReferenceExpression(expression);
    }
  }
);
}
