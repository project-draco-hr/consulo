{
  final Object pathObj=myGetPath.invoke(myDefaultFileSystem,path,ArrayUtil.EMPTY_STRING_ARRAY);
  try {
    if (SystemInfo.isWindows) {
      final Map attributes=(Map)myReadAttributes.invoke(null,pathObj,"dos:*",myNoFollowLinkOptions);
      return new FileAttributes((Boolean)attributes.get("isDirectory"),(Boolean)attributes.get("isSymbolicLink"),(Boolean)attributes.get("isOther"),(Long)attributes.get("size"),(Long)myToMillis.invoke(attributes.get("lastModifiedTime")),!(Boolean)attributes.get("readonly"));
    }
 else {
      final Map attributes=(Map)myReadAttributes.invoke(null,pathObj,"posix:*",myNoFollowLinkOptions);
      return new FileAttributes((Boolean)attributes.get("isDirectory"),(Boolean)attributes.get("isSymbolicLink"),(Boolean)attributes.get("isOther"),(Long)attributes.get("size"),(Long)myToMillis.invoke(attributes.get("lastModifiedTime")),decodePermissions(attributes.get("permissions")));
    }
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause != null && "java.nio.file.NoSuchFileException".equals(cause.getClass().getName())) {
      return null;
    }
    throw e;
  }
}
