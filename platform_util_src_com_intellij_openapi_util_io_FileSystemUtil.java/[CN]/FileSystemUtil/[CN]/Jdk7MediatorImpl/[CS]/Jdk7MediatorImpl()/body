{
  myDefaultFileSystem=Class.forName("java.nio.file.FileSystems").getMethod("getDefault").invoke(null);
  myGetPath=Class.forName("java.nio.file.FileSystem").getMethod("getPath",String.class,String[].class);
  myGetPath.setAccessible(true);
  final Class<?> pathClass=Class.forName("java.nio.file.Path");
  final Class<?> filesClass=Class.forName("java.nio.file.Files");
  myIsSymbolicLink=filesClass.getMethod("isSymbolicLink",pathClass);
  myIsSymbolicLink.setAccessible(true);
  final Class<?> linkOptClass=Class.forName("java.nio.file.LinkOption");
  myLinkOptions=Array.newInstance(linkOptClass,0);
  myNoFollowLinkOptions=Array.newInstance(linkOptClass,1);
  Array.set(myNoFollowLinkOptions,0,linkOptClass.getField("NOFOLLOW_LINKS").get(null));
  final Class<?> linkOptArrClass=myLinkOptions.getClass();
  myReadAttributes=filesClass.getMethod("readAttributes",pathClass,String.class,linkOptArrClass);
  myReadAttributes.setAccessible(true);
  mySetAttribute=filesClass.getMethod("setAttribute",pathClass,String.class,Object.class,linkOptArrClass);
  mySetAttribute.setAccessible(true);
  final Class<?> fileTimeClass=Class.forName("java.nio.file.attribute.FileTime");
  myToMillis=fileTimeClass.getMethod("toMillis");
  myToMillis.setAccessible(true);
}
