{
  mySharedMem.clear();
  final int res=SystemInfo.isLinux ? myLibC.__lxstat64(0,path,mySharedMem) : myLibC.lstat(path,mySharedMem);
  if (res == 0) {
    final int mode=(SystemInfo.isLinux ? mySharedMem.getInt(myModeOffset) : mySharedMem.getShort(myModeOffset)) & LibC.S_MASK;
    final boolean isDirectory=(mode & LibC.S_IFDIR) == LibC.S_IFDIR;
    final boolean isSymlink=(mode & LibC.S_IFLNK) == LibC.S_IFLNK;
    final boolean isSpecial=!isDirectory && !isSymlink && (mode & LibC.S_IFREG) == 0;
    final long size=mySharedMem.getLong(mySizeOffset);
    final long mTime1=SystemInfo.is32Bit ? mySharedMem.getInt(myTimeOffset) : mySharedMem.getLong(myTimeOffset);
    final long mTime2=SystemInfo.is32Bit ? mySharedMem.getInt(myTimeOffset + 4) : mySharedMem.getLong(myTimeOffset + 8);
    final long mTime=mTime1 * 1000 + mTime2 / 1000000;
    @FileAttributes.Permissions final int permissions=mode & LibC.PERM_MASK;
    return new FileAttributes(isDirectory,isSymlink,isSpecial,size,mTime,permissions);
  }
  return null;
}
