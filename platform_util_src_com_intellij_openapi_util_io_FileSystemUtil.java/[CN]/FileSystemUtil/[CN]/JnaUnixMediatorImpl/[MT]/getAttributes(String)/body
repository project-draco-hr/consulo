{
  Memory buffer=new Memory(256);
  int res=SystemInfo.isLinux ? myLibC.__lxstat64(0,path,buffer) : myLibC.lstat(path,buffer);
  if (res != 0)   return null;
  int mode=(SystemInfo.isLinux ? buffer.getInt(myModeOffset) : buffer.getShort(myModeOffset)) & LibC.S_MASK;
  boolean isSymlink=(mode & LibC.S_IFLNK) == LibC.S_IFLNK;
  if (isSymlink) {
    res=SystemInfo.isLinux ? myLibC.__xstat64(0,path,buffer) : myLibC.stat(path,buffer);
    if (res != 0) {
      return FileAttributes.BROKEN_SYMLINK;
    }
    mode=(SystemInfo.isLinux ? buffer.getInt(myModeOffset) : buffer.getShort(myModeOffset)) & LibC.S_MASK;
  }
  boolean isDirectory=(mode & LibC.S_IFDIR) == LibC.S_IFDIR;
  boolean isSpecial=!isDirectory && (mode & LibC.S_IFREG) == 0;
  long size=buffer.getLong(mySizeOffset);
  long mTime1=SystemInfo.is32Bit ? buffer.getInt(myTimeOffset) : buffer.getLong(myTimeOffset);
  long mTime2=myCoarseTs ? 0 : SystemInfo.is32Bit ? buffer.getInt(myTimeOffset + 4) : buffer.getLong(myTimeOffset + 8);
  long mTime=mTime1 * 1000 + mTime2 / 1000000;
  @FileAttributes.Permissions int permissions=mode & LibC.PERM_MASK;
  return new FileAttributes(isDirectory,isSpecial,isSymlink,size,mTime,permissions);
}
