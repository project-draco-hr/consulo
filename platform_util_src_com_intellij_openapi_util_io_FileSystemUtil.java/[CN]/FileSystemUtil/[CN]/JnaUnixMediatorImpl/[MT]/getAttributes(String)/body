{
  Memory buffer=new Memory(256);
  int res=SystemInfo.isLinux ? myLibC.__lxstat64(STAT_VER,path,buffer) : myLibC.lstat(path,buffer);
  if (res != 0)   return null;
  int mode=getModeFlags(buffer) & LibC.S_MASK;
  boolean isSymlink=(mode & LibC.S_IFMT) == LibC.S_IFLNK;
  if (isSymlink) {
    if (!loadFileStatus(path,buffer)) {
      return FileAttributes.BROKEN_SYMLINK;
    }
    mode=getModeFlags(buffer) & LibC.S_MASK;
  }
  boolean isDirectory=(mode & LibC.S_IFMT) == LibC.S_IFDIR;
  boolean isSpecial=!isDirectory && (mode & LibC.S_IFMT) != LibC.S_IFREG;
  long size=buffer.getLong(myOffsets[OFF_SIZE]);
  long mTime1=SystemInfo.is32Bit ? buffer.getInt(myOffsets[OFF_TIME]) : buffer.getLong(myOffsets[OFF_TIME]);
  long mTime2=myCoarseTs ? 0 : SystemInfo.is32Bit ? buffer.getInt(myOffsets[OFF_TIME] + 4) : buffer.getLong(myOffsets[OFF_TIME] + 8);
  long mTime=mTime1 * 1000 + mTime2 / 1000000;
  boolean writable=ownFile(buffer) ? (mode & LibC.WRITE_MASK) != 0 : myLibC.access(path,LibC.W_OK) == 0;
  return new FileAttributes(isDirectory,isSpecial,isSymlink,false,size,mTime,writable);
}
