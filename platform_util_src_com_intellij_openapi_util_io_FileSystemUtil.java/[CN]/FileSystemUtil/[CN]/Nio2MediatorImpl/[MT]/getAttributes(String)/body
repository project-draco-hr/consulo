{
  try {
    Object pathObj=myGetPath.invoke(myDefaultFileSystem,path,ArrayUtil.EMPTY_STRING_ARRAY);
    Map attributes=(Map)myReadAttributes.invoke(null,pathObj,mySchema,myNoFollowLinkOptions);
    boolean isSymbolicLink=(Boolean)attributes.get("isSymbolicLink");
    if (isSymbolicLink) {
      try {
        attributes=(Map)myReadAttributes.invoke(null,pathObj,mySchema,myLinkOptions);
      }
 catch (      InvocationTargetException e) {
        final Throwable cause=e.getCause();
        if (cause != null && "java.nio.file.NoSuchFileException".equals(cause.getClass().getName())) {
          return FileAttributes.BROKEN_SYMLINK;
        }
      }
    }
    boolean isDirectory=(Boolean)attributes.get("isDirectory");
    boolean isOther=(Boolean)attributes.get("isOther");
    long size=(Long)attributes.get("size");
    long lastModified=(Long)myToMillis.invoke(attributes.get("lastModifiedTime"));
    if (SystemInfo.isWindows) {
      boolean isHidden=new File(path).getParent() == null ? false : (Boolean)attributes.get("hidden");
      boolean isWritable=!(Boolean)attributes.get("readonly");
      return new FileAttributes(isDirectory,isOther,isSymbolicLink,isHidden,size,lastModified,isWritable);
    }
 else {
      boolean isWritable=new File(path).canWrite();
      return new FileAttributes(isDirectory,isOther,isSymbolicLink,false,size,lastModified,isWritable);
    }
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause != null && ("java.nio.file.NoSuchFileException".equals(cause.getClass().getName()) || "java.nio.file.InvalidPathException".equals(cause.getClass().getName()))) {
      LOG.debug(cause);
      return null;
    }
    throw e;
  }
}
