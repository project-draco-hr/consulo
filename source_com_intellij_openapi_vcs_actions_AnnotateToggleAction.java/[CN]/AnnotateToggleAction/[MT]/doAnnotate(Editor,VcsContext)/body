{
  final VirtualFile file=FileDocumentManager.getInstance().getFile(editor.getDocument());
  Project project=context.getProject();
  if (project == null)   return;
  AbstractVcs vcs=ProjectLevelVcsManager.getInstance(project).getVcsFor(file);
  if (vcs == null)   return;
  final AnnotationProvider annotationProvider=vcs.getAnnotationProvider();
  final Ref<FileAnnotation> fileAnnotationRef=new Ref<FileAnnotation>();
  final Ref<VcsException> exceptionRef=new Ref<VcsException>();
  boolean result=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        fileAnnotationRef.set(annotationProvider.annotate(file));
      }
 catch (      VcsException e) {
        exceptionRef.set(e);
      }
    }
  }
,VcsBundle.message("retrieving.annotations"),true,project);
  if (!result) {
    return;
  }
  if (!exceptionRef.isNull()) {
    AbstractVcsHelper.getInstance(project).showErrors(Arrays.asList(exceptionRef.get()),VcsBundle.message("message.title.annotate"));
  }
  if (fileAnnotationRef.isNull()) {
    return;
  }
  FileAnnotation fileAnnotation=fileAnnotationRef.get();
  String upToDateContent=fileAnnotation.getAnnotatedContent();
  final UpToDateLineNumberProvider getUpToDateLineNumber=LocalVcs.getInstance(context.getProject()).getUpToDateLineNumberProvider(editor.getDocument(),upToDateContent);
  editor.getGutter().closeAllAnnotations();
  Collection<AnnotationFieldGutter> annotations=editor.getUserData(KEY_IN_EDITOR);
  if (annotations == null) {
    annotations=new HashSet<AnnotationFieldGutter>();
    editor.putUserData(KEY_IN_EDITOR,annotations);
  }
  final LineAnnotationAspect[] aspects=fileAnnotation.getAspects();
  for (  LineAnnotationAspect aspect : aspects) {
    final AnnotationFieldGutter gutter=new AnnotationFieldGutter(getUpToDateLineNumber,fileAnnotation,editor,aspect);
    if (aspect instanceof EditorGutterAction) {
      editor.getGutter().registerTextAnnotation(gutter,gutter);
    }
 else {
      editor.getGutter().registerTextAnnotation(gutter);
    }
    annotations.add(gutter);
  }
}
