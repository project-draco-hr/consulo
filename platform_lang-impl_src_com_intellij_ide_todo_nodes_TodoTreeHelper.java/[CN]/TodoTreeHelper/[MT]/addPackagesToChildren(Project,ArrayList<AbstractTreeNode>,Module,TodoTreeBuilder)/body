{
  final PsiManager psiManager=PsiManager.getInstance(project);
  final List<VirtualFile> sourceRoots=new ArrayList<VirtualFile>();
  if (module == null) {
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);
    ContainerUtil.addAll(sourceRoots,projectRootManager.getContentSourceRoots());
  }
 else {
    ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    ContainerUtil.addAll(sourceRoots,moduleRootManager.getContentFolderFiles(ContentFolderScopes.productionAndTest()));
  }
  final Set<PsiPackage> topLevelPackages=new HashSet<PsiPackage>();
  for (  final VirtualFile root : sourceRoots) {
    final PsiDirectory directory=psiManager.findDirectory(root);
    if (directory == null) {
      continue;
    }
    final PsiPackage directoryPackage=PsiPackageManager.getInstance(project).findAnyPackage(directory);
    if (directoryPackage == null || PackageNodeUtil.isPackageDefault(directoryPackage)) {
      final PsiDirectory[] subdirectories=directory.getSubdirectories();
      for (      PsiDirectory subdirectory : subdirectories) {
        final PsiPackage aPackage=PsiPackageManager.getInstance(project).findAnyPackage(subdirectory);
        if (aPackage != null && !PackageNodeUtil.isPackageDefault(aPackage)) {
          topLevelPackages.add(aPackage);
        }
 else {
          final Iterator<PsiFile> files=builder.getFiles(subdirectory);
          if (!files.hasNext())           continue;
          TodoDirNode dirNode=new TodoDirNode(project,subdirectory,builder);
          if (!children.contains(dirNode)) {
            children.add(dirNode);
          }
        }
      }
      final Iterator<PsiFile> filesUnderDirectory=builder.getFilesUnderDirectory(directory);
      for (; filesUnderDirectory.hasNext(); ) {
        final PsiFile file=filesUnderDirectory.next();
        TodoFileNode todoFileNode=new TodoFileNode(project,file,builder,false);
        if (!children.contains(todoFileNode)) {
          children.add(todoFileNode);
        }
      }
    }
 else {
      topLevelPackages.add(directoryPackage);
    }
  }
  GlobalSearchScope scope=module != null ? GlobalSearchScope.moduleScope(module) : GlobalSearchScope.projectScope(project);
  ArrayList<PsiPackage> packages=new ArrayList<PsiPackage>();
  for (  PsiPackage psiPackage : topLevelPackages) {
    final PsiPackage aPackage=findNonEmptyPackage(psiPackage,module,project,builder,scope);
    if (aPackage != null) {
      packages.add(aPackage);
    }
  }
  for (  PsiPackage psiPackage : packages) {
    if (!builder.getTodoTreeStructure().getIsFlattenPackages()) {
      PackageElement element=new PackageElement(module,psiPackage,false);
      TodoPackageNode packageNode=new TodoPackageNode(project,element,builder,psiPackage.getQualifiedName());
      if (!children.contains(packageNode)) {
        children.add(packageNode);
      }
    }
 else {
      Set<PsiPackage> allPackages=new HashSet<PsiPackage>();
      traverseSubPackages(psiPackage,module,builder,project,allPackages);
      for (      PsiPackage aPackage : allPackages) {
        TodoPackageNode packageNode=new TodoPackageNode(project,new PackageElement(module,aPackage,false),builder);
        if (!children.contains(packageNode)) {
          children.add(packageNode);
        }
      }
    }
  }
  addPackagesToChildren0(project,children,module,builder);
}
