{
  final Class<ProcessListener> listenerClass=ProcessListener.class;
  return (ProcessListener)Proxy.newProxyInstance(listenerClass.getClassLoader(),new Class[]{listenerClass},new InvocationHandler(){
    public Object invoke(    Object object,    Method method,    Object[] params) throws Throwable {
      final Iterator<ProcessListener> iterator;
synchronized (myListeners) {
        iterator=myListeners.iterator();
      }
      while (iterator.hasNext()) {
        final ProcessListener processListener=iterator.next();
        try {
          method.invoke(processListener,params);
        }
 catch (        Throwable e) {
          LOG.error(e);
        }
      }
      return null;
    }
  }
);
}
