{
  final GroovyToJavaGeneratorTester groovyToJavaGeneratorTester=new GroovyToJavaGeneratorTester(relTestPath,data[0],myProject);
  final GeneratingCompiler.GenerationItem[][] generatedItems=new GeneratingCompiler.GenerationItem[1][1];
  final StringBuffer buffer=new StringBuffer();
  final Runnable generateThread=new Runnable(){
    public void run(){
      GeneratingCompiler.GenerationItem[] generationItems=groovyToJavaGeneratorTester.getGenerationItems(null);
      try {
        myOutputDirVirtualFile=LocalFileSystem.getInstance().findFileByIoFile(new File(GENERATING_OUTPUT_DIR.getCanonicalPath().replace(File.separatorChar,'/')));
        generatedItems[0]=groovyToJavaGeneratorTester.generate(null,generationItems,myOutputDirVirtualFile);
        for (        GeneratingCompiler.GenerationItem generatedItem : generatedItems[0]) {
          final String path=GENERATING_OUTPUT_DIR + File.separator + generatedItem.getPath();
          BufferedReader reader=new BufferedReader(new FileReader(path));
          int ch=reader.read();
          while (ch != -1) {
            buffer.append((char)ch);
            ch=reader.read();
          }
          buffer.append("\n");
          buffer.append("---");
          buffer.append("\n");
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        System.out.println("----------" + relTestPath + "----------");
        System.out.println(buffer);
        down();
      }
    }
  }
;
  up();
  ApplicationManager.getApplication().executeOnPooledThread(generateThread);
  waitFor();
  Thread.sleep(5);
  return buffer.toString();
}
