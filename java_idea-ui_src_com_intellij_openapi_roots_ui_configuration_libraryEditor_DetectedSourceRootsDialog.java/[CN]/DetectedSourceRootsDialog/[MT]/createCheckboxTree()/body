{
  CheckboxTree tree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(true){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      CheckedTreeNode node=(CheckedTreeNode)value;
      VirtualFile file=(VirtualFile)node.getUserObject();
      String text;
      SimpleTextAttributes attributes;
      Icon icon;
      boolean isValid=true;
      if (leaf) {
        VirtualFile ancestor=(VirtualFile)((CheckedTreeNode)node.getParent()).getUserObject();
        if (ancestor != null) {
          text=VfsUtil.getRelativePath(file,ancestor,File.separatorChar);
        }
 else {
          text=file.getPresentableUrl();
        }
        if (text == null) {
          isValid=false;
          text=file.getPresentableUrl();
        }
        attributes=SimpleTextAttributes.REGULAR_ATTRIBUTES;
        icon=PlatformIcons.DIRECTORY_CLOSED_ICON;
      }
 else {
        text=file == null ? "found files" : file.getPresentableUrl();
        if (text == null) {
          isValid=false;
        }
        attributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
        icon=expanded ? PlatformIcons.DIRECTORY_OPEN_ICON : PlatformIcons.DIRECTORY_CLOSED_ICON;
      }
      final ColoredTreeCellRenderer textRenderer=getTextRenderer();
      textRenderer.setIcon(icon);
      if (!isValid) {
        textRenderer.append("[INVALID] ",SimpleTextAttributes.ERROR_ATTRIBUTES);
      }
      if (text != null) {
        textRenderer.append(text,attributes);
      }
    }
  }
,myRootNode);
  tree.setRootVisible(false);
  TreeUtil.expandAll(tree);
  return tree;
}
