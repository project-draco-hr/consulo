{
  HighlightVisitor[] highlightVisitors=createHighlightVisitors();
  RefCountHolder refCountHolder=null;
  Collection<HighlightInfo> result=new THashSet<HighlightInfo>(100);
  List<LineMarkerInfo> lineMarkers=new ArrayList<LineMarkerInfo>();
  try {
    if (myUpdateAll) {
      DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
      refCountHolder=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap().getRefCountHolder(myDocument,myFile);
      setRefCountHolders(refCountHolder,highlightVisitors);
      PsiElement dirtyScope=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap().getFileDirtyScope(myDocument,Pass.UPDATE_ALL);
      if (dirtyScope != null) {
        if (dirtyScope instanceof PsiFile) {
          refCountHolder.clear();
        }
 else {
          refCountHolder.removeInvalidRefs();
        }
      }
    }
 else {
      setRefCountHolders(null,highlightVisitors);
    }
    final FileViewProvider viewProvider=myFile.getViewProvider();
    final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
    for (    Language language : relevantLanguages) {
      PsiElement psiRoot=viewProvider.getPsi(language);
      if (!HighlightUtil.shouldHighlight(psiRoot))       continue;
      List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
      if (elements.isEmpty()) {
        elements=Collections.singletonList(psiRoot);
      }
      addLineMarkers(elements,lineMarkers);
      result.addAll(collectHighlights(elements,highlightVisitors));
      result.addAll(collectTextHighlights());
    }
  }
  finally {
    setRefCountHolders(null,highlightVisitors);
    releaseHighlightVisitors();
    if (refCountHolder != null) {
      refCountHolder.touch();
    }
  }
  myHighlights=result;
  myMarkers=lineMarkers;
}
