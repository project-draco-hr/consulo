{
  final HighlightVisitor[] highlightVisitors=createHighlightVisitors();
  final Collection<HighlightInfo> result=new THashSet<HighlightInfo>(100);
  final List<LineMarkerInfo> lineMarkers=new ArrayList<LineMarkerInfo>();
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  try {
    final RefCountHolder refCountHolder;
    if (myUpdateAll) {
      refCountHolder=fileStatusMap.getRefCountHolder(myFile);
    }
 else {
      refCountHolder=null;
    }
    setRefCountHolders(refCountHolder,highlightVisitors);
    Runnable doCollectInfo=new Runnable(){
      public void run(){
        if (refCountHolder != null) {
          DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject);
          PsiElement dirtyScope=daemonCodeAnalyzer.getFileStatusMap().getFileDirtyScope(myDocument,Pass.UPDATE_ALL);
          if (dirtyScope != null) {
            if (dirtyScope instanceof PsiFile) {
              refCountHolder.clear();
            }
 else {
              refCountHolder.removeInvalidRefs();
            }
          }
        }
        final FileViewProvider viewProvider=myFile.getViewProvider();
        final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
        for (        Language language : relevantLanguages) {
          PsiElement psiRoot=viewProvider.getPsi(language);
          if (!HighlightUtil.shouldHighlight(psiRoot))           continue;
          List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
          if (elements.isEmpty()) {
            elements=Collections.singletonList(psiRoot);
          }
          addLineMarkers(elements,lineMarkers);
          result.addAll(collectHighlights(elements,highlightVisitors));
          result.addAll(highlightTodos());
          addInjectedPsiHighlights(elements,refCountHolder,myInjectedPsiHighlights);
        }
      }
    }
;
    if (refCountHolder != null) {
      refCountHolder.analyzeAndStoreReferences(doCollectInfo,progress);
    }
 else {
      doCollectInfo.run();
    }
    if (myUpdateAll) {
      fileStatusMap.setErrorFoundFlag(myDocument,myErrorFound);
    }
  }
  finally {
    setRefCountHolders(null,highlightVisitors);
    releaseHighlightVisitors(highlightVisitors);
  }
  myHighlights=result;
  myMarkers=lineMarkers;
}
