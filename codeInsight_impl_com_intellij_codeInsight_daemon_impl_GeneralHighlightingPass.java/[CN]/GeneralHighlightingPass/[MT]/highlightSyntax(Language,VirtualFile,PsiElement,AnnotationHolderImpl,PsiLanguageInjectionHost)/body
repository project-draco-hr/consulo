{
  List<Pair<IElementType,TextRange>> tokens=InjectedLanguageUtil.getHighlightTokens((PsiFile)injectedPsi);
  if (tokens == null)   return;
  SyntaxHighlighter syntaxHighlighter=injectedLanguage.getSyntaxHighlighter(injectedPsi.getProject(),virtualFile);
  for (  Pair<IElementType,TextRange> token : tokens) {
    IElementType tokenType=token.getFirst();
    TextRange textRange=token.getSecond();
    TextAttributesKey[] keys=syntaxHighlighter.getTokenHighlights(tokenType);
    if (keys.length == 0)     continue;
    if (textRange.getLength() == 0)     continue;
    Annotation annotation=annotationHolder.createInfoAnnotation(textRange.shiftRight(injectionHost.getTextRange().getStartOffset()),null);
    if (annotation == null)     continue;
    if (keys.length == 0) {
      annotation.setEnforcedTextAttributes(TextAttributes.ERASE_MARKER);
    }
 else {
      EditorColorsScheme globalScheme=EditorColorsManager.getInstance().getGlobalScheme();
      TextAttributes attributes=globalScheme.getAttributes(keys[0]);
      final TextAttributes defaultAttrs=globalScheme.getAttributes(HighlighterColors.TEXT);
      if (attributes == null || attributes.isEmpty() || attributes.equals(defaultAttrs)) {
        annotation.setEnforcedTextAttributes(TextAttributes.ERASE_MARKER);
      }
 else {
        Color back=attributes.getBackgroundColor() == null ? globalScheme.getDefaultBackground() : attributes.getBackgroundColor();
        Color fore=attributes.getForegroundColor() == null ? globalScheme.getDefaultForeground() : attributes.getForegroundColor();
        TextAttributes forced=new TextAttributes(fore,back,attributes.getEffectColor(),attributes.getEffectType(),attributes.getFontType());
        annotation.setEnforcedTextAttributes(forced);
      }
    }
  }
}
