{
  List<DocumentWindow> injected=InjectedLanguageUtil.getCachedInjectedDocuments(getDocument());
  Collection<PsiElement> hosts=new THashSet<PsiElement>(elements.size() + injected.size());
  for (  DocumentWindow documentRange : injected) {
    PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);
    if (file == null)     continue;
    PsiElement context=file.getContext();
    if (context != null && context.isValid() && (myUpdateAll || new TextRange(myStartOffset,myEndOffset).contains(context.getTextRange()))) {
      hosts.add(context);
    }
  }
  hosts.addAll(elements);
  final Collection<PsiFile> injectedFiles=new THashSet<PsiFile>();
  for (  PsiElement element : hosts) {
    InjectedLanguageUtil.enumerate(element,myFile,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
      public void visit(      @NotNull PsiFile injectedPsi,      @NotNull List<PsiLanguageInjectionHost.Shred> places){
        injectedFiles.add(injectedPsi);
      }
    }
,false);
  }
  if (injectedFiles.isEmpty())   return;
  JobUtil.invokeConcurrentlyForAll(injectedFiles,new Processor<PsiFile>(){
    public boolean process(    final PsiFile injectedPsi){
      AnnotationHolderImpl annotationHolder=createAnnotationHolder();
      highlightInjectedIn(injectedPsi,annotationHolder,refCountHolder);
      DocumentWindow documentWindow=(DocumentWindow)PsiDocumentManager.getInstance(myProject).getCachedDocument(injectedPsi);
      for (      Annotation annotation : annotationHolder) {
        HighlightInfo highlightInfo=HighlightUtil.convertToHighlightInfo(annotation);
        TextRange textRange=documentWindow.getHostRange(highlightInfo.startOffset);
synchronized (myInjectedPsiHighlights) {
          Collection<HighlightInfo> infos=myInjectedPsiHighlights.get(textRange);
          if (infos == null) {
            infos=new SmartList<HighlightInfo>();
            myInjectedPsiHighlights.put(textRange,infos);
          }
          infos.add(highlightInfo);
        }
      }
      return true;
    }
  }
,"Highlight injected language fragments");
}
