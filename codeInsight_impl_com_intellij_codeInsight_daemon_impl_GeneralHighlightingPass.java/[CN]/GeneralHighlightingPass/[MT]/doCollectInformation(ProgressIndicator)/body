{
  PsiElement[] psiRoots=myFile.getPsiRoots();
  if (myUpdateAll) {
    DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
    RefCountHolder refCountHolder=daemonCodeAnalyzer.getFileStatusMap().getRefCountHolder(myDocument,myFile);
    setRefCountHolders(refCountHolder);
    PsiElement dirtyScope=daemonCodeAnalyzer.getFileStatusMap().getFileDirtyScope(myDocument,FileStatusMap.NORMAL_HIGHLIGHTERS);
    if (dirtyScope != null) {
      if (dirtyScope instanceof PsiFile) {
        refCountHolder.clear();
      }
 else {
        refCountHolder.removeInvalidRefs();
      }
    }
  }
 else {
    setRefCountHolders(null);
  }
  Collection<HighlightInfo> result=new THashSet<HighlightInfo>(100);
  try {
    for (    final PsiElement psiRoot : psiRoots) {
      if (!HighlightUtil.isRootHighlighted(psiRoot))       continue;
      List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
      if (elements.isEmpty()) {
        elements=Collections.singletonList(psiRoot);
      }
      myMarkers=collectLineMarkers(elements);
      Collection<HighlightInfo> highlights1=collectHighlights(elements);
      Collection<HighlightInfo> highlights2=collectTextHighlights();
      addHighlights(result,highlights1);
      addHighlights(result,highlights2);
    }
  }
  finally {
    if (myHighlightVisitors != null) {
      setRefCountHolders(null);
      releaseHighlightVisitors();
    }
  }
  myHighlights=result;
  reportToProblemsToolWindow(result);
}
