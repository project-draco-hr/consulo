{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Set<PsiElement> skipParentsSet=new THashSet<PsiElement>();
  final Set<HighlightInfo> gotHighlights=new THashSet<HighlightInfo>();
  final List<HighlightVisitor> visitors=new ArrayList<HighlightVisitor>();
  for (  HighlightVisitor visitor : myHighlightVisitors) {
    if (visitor.suitableForFile(myFile))     visitors.add(visitor);
  }
  final HighlightInfoFilter[] filters=ApplicationManager.getApplication().getComponents(HighlightInfoFilter.class);
  final HighlightInfoHolder holder=new HighlightInfoHolder(myFile,filters);
  PsiManager.getInstance(myProject).performActionWithFormatterDisabled(new Runnable(){
    public void run(){
      for (      PsiElement element : elements) {
        ProgressManager.getInstance().checkCanceled();
        if (skipParentsSet.contains(element)) {
          skipParentsSet.add(element.getParent());
          continue;
        }
        for (        HighlightVisitor visitor : visitors) {
          visitor.visit(element,holder);
        }
        for (int i=0; i < holder.size(); i++) {
          HighlightInfo info=holder.get(i);
          if (!gotHighlights.add(info))           continue;
          if (info.getSeverity() == HighlightSeverity.ERROR) {
            skipParentsSet.add(element.getParent());
          }
        }
        holder.clear();
      }
    }
  }
);
  return gotHighlights;
}
