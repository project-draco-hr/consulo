{
  List<DocumentWindow> injected=InjectedLanguageUtil.getCachedInjectedDocuments(getDocument());
  Collection<PsiElement> hosts=new THashSet<PsiElement>(elements.size() + injected.size());
  for (  DocumentWindow documentRange : injected) {
    PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);
    if (file == null)     continue;
    PsiElement context=file.getContext();
    if (context != null && context.isValid() && (myUpdateAll || new TextRange(myStartOffset,myEndOffset).contains(context.getTextRange()))) {
      hosts.add(context);
    }
  }
  hosts.addAll(elements);
  final Collection<PsiFile> injectedFiles=new THashSet<PsiFile>();
  for (  PsiElement element : hosts) {
    InjectedLanguageUtil.enumerate(element,myFile,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
      public void visit(      @NotNull PsiFile injectedPsi,      @NotNull List<PsiLanguageInjectionHost.Shred> places){
        injectedFiles.add(injectedPsi);
      }
    }
,false);
  }
  if (injectedFiles.isEmpty())   return;
  AnnotationHolderImpl annotationHolder=createAnnotationHolder();
  for (  PsiFile injectedPsi : injectedFiles) {
    highlightInjectedIn(injectedPsi,annotationHolder,refCountHolder);
    DocumentWindowImpl documentWindow=(DocumentWindowImpl)PsiDocumentManager.getInstance(myProject).getCachedDocument(injectedPsi);
    for (    Annotation annotation : annotationHolder) {
      HighlightInfo highlightInfo=HighlightUtil.convertToHighlightInfo(annotation);
      TextRange textRange=documentWindow.getHostRange(highlightInfo.startOffset);
      Collection<HighlightInfo> infos=result.get(textRange);
      if (infos == null) {
        infos=new ArrayList<HighlightInfo>();
        result.put(textRange,infos);
      }
      infos.add(highlightInfo);
    }
    annotationHolder.clear();
  }
}
