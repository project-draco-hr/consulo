{
  if (element instanceof PsiIdentifier && element.getParent() instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element.getParent();
    int offset=element.getTextRange().getStartOffset();
    MethodSignatureBackedByPsiMethod superSignature=SuperMethodsSearch.search(method,null,true,false).findFirst();
    if (superSignature != null) {
      boolean overrides=method.hasModifierProperty(PsiModifier.ABSTRACT) == superSignature.getMethod().hasModifierProperty(PsiModifier.ABSTRACT);
      return new LineMarkerInfo(LineMarkerInfo.MarkerType.OVERRIDING_METHOD,method,offset,overrides ? OVERRIDING_METHOD_ICON : IMPLEMENTING_METHOD_ICON);
    }
  }
  if (mySettings.SHOW_METHOD_SEPARATORS && element.getFirstChild() == null) {
    PsiElement element1=element;
    boolean isMember=false;
    while (element1 != null && !(element1 instanceof PsiFile) && element1.getPrevSibling() == null) {
      element1=element1.getParent();
      if (element1 instanceof PsiMember) {
        isMember=true;
        break;
      }
    }
    if (isMember && !(element1 instanceof PsiAnonymousClass || element1.getParent() instanceof PsiAnonymousClass)) {
      boolean drawSeparator=false;
      int category=getCategory(element1);
      for (PsiElement child=element1.getPrevSibling(); child != null; child=child.getPrevSibling()) {
        int category1=getCategory(child);
        if (category1 == 0)         continue;
        drawSeparator=category != 1 || category1 != 1;
        break;
      }
      if (drawSeparator) {
        LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.MarkerType.METHOD_SEPARATOR,element,element.getTextRange().getStartOffset(),null);
        EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
        info.separatorColor=scheme.getColor(CodeInsightColors.METHOD_SEPARATORS_COLOR);
        info.separatorPlacement=SeparatorPlacement.TOP;
        return info;
      }
    }
  }
  return null;
}
