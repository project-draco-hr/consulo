{
  if (myUpdateAll && myFile instanceof PsiJavaFile && myFile.isPhysical()&& myFile.getVirtualFile() != null && mySettings.getInspectionProfile(myFile).isToolEnabled(HighlightDisplayKey.ILLEGAL_DEPENDENCY)) {
    final DependencyValidationManager validationManager=DependencyValidationManager.getInstance(myProject);
    if (!validationManager.hasRules())     return;
    DependenciesBuilder builder=new ForwardDependenciesBuilder(myProject,new AnalysisScope(myFile));
    builder.analyzeFileDependencies(myFile,new DependenciesBuilder.DependencyProcessor(){
      public void process(      PsiElement place,      PsiElement dependency){
        PsiFile dependencyFile=dependency.getContainingFile();
        if (dependencyFile != null && dependencyFile.isPhysical() && dependencyFile.getVirtualFile() != null) {
          DependencyRule[] rules=validationManager.getViolatorDependencyRules(myFile,dependencyFile);
          if (rules.length > 0) {
            if (InspectionManagerEx.inspectionResultSuppressed(place,HighlightDisplayKey.ILLEGAL_DEPENDENCY.getID()))             return;
            HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ILLEGAL_DEPENDENCY,place,InspectionsBundle.message("illegal.dependency.violated.rule.message",rules[0].getDisplayText()));
            if (info != null) {
              list.add(info);
              List<IntentionAction> options=IntentionManager.getInstance(myProject).getStandardIntentionOptions(HighlightDisplayKey.ILLEGAL_DEPENDENCY,place);
              QuickFixAction.registerQuickFixAction(info,new EditDependencyRulesAction(rules[0]),options);
            }
          }
        }
      }
    }
);
  }
}
