{
  List<Trinity<IElementType,PsiLanguageInjectionHost,TextRange>> tokens=InjectedLanguageUtil.getHighlightTokens(injectedPsi);
  if (tokens == null)   return;
  SyntaxHighlighter syntaxHighlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(injectedLanguage,injectedPsi.getProject(),injectedPsi.getVirtualFile());
  EditorColorsScheme globalScheme=EditorColorsManager.getInstance().getGlobalScheme();
  final TextAttributes defaultAttrs=globalScheme.getAttributes(HighlighterColors.TEXT);
  for (  Trinity<IElementType,PsiLanguageInjectionHost,TextRange> token : tokens) {
    IElementType tokenType=token.getFirst();
    PsiLanguageInjectionHost injectionHost=token.getSecond();
    TextRange textRange=token.getThird();
    TextAttributesKey[] keys=syntaxHighlighter.getTokenHighlights(tokenType);
    if (textRange.getLength() == 0)     continue;
    Annotation annotation=annotationHolder.createInfoAnnotation(textRange.shiftRight(injectionHost.getTextRange().getStartOffset()),null);
    if (annotation == null)     continue;
    TextAttributes attributes=keys.length == 0 ? null : globalScheme.getAttributes(keys[0]);
    if (attributes == null || attributes.isEmpty() || attributes.equals(defaultAttrs)) {
      annotation.setEnforcedTextAttributes(TextAttributes.ERASE_MARKER);
    }
 else {
      Color back=attributes.getBackgroundColor() == null ? globalScheme.getDefaultBackground() : attributes.getBackgroundColor();
      Color fore=attributes.getForegroundColor() == null ? globalScheme.getDefaultForeground() : attributes.getForegroundColor();
      TextAttributes forced=new TextAttributes(fore,back,attributes.getEffectColor(),attributes.getEffectType(),attributes.getFontType());
      annotation.setEnforcedTextAttributes(forced);
    }
  }
}
