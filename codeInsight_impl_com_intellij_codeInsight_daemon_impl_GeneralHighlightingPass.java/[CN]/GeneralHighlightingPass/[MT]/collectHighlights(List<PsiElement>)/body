{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Set<PsiElement> skipParentsSet=new THashSet<PsiElement>();
  final Set<HighlightInfo> gotHighlights=new THashSet<HighlightInfo>();
  final List<HighlightVisitor> visitors=new ArrayList<HighlightVisitor>();
  for (  HighlightVisitor visitor : myHighlightVisitors) {
    if (visitor.suitableForFile(myFile))     visitors.add(visitor);
  }
  final boolean isAntFile=CodeInsightUtil.isAntFile(myFile);
  final HighlightInfoHolder holder=createInfoHolder();
  ProgressManager progressManager=ProgressManager.getInstance();
  setProgressLimit((long)elements.size() * visitors.size());
  for (  PsiElement element : elements) {
    progressManager.checkCanceled();
    if (element != myFile && skipParentsSet.contains(element)) {
      skipParentsSet.add(element.getParent());
      continue;
    }
    if (element instanceof PsiErrorElement) {
      myHasErrorElement=true;
    }
    try {
      holder.setWritable(true);
      holder.clear();
      for (      HighlightVisitor visitor : visitors) {
        visitor.visit(element,holder);
      }
      advanceProgress(visitors.size());
    }
  finally {
      holder.setWritable(false);
    }
    for (int i=0; i < holder.size(); i++) {
      HighlightInfo info=holder.get(i);
      if (!gotHighlights.add(info))       continue;
      if (!isAntFile && info.getSeverity() == HighlightSeverity.ERROR) {
        skipParentsSet.add(element.getParent());
      }
    }
  }
  return gotHighlights;
}
