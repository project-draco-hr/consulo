{
  final StringBuffer buffer=new StringBuffer();
  StringBuffer afterWhiteSpace=new StringBuffer();
  int whiteSpaceLength=0;
  boolean insideWhiteSpace=true;
  int line=0;
  for (int i=elementRange.getStartOffset(); i < elementRange.getEndOffset(); i++) {
    final char c=myDocument.getCharsSequence().charAt(i);
switch (c) {
case '\n':
      if (line > 0) {
        createWhiteSpace(whiteSpaceLength + shift,buffer);
      }
    buffer.append(afterWhiteSpace.toString());
  insideWhiteSpace=true;
whiteSpaceLength=0;
afterWhiteSpace=new StringBuffer();
buffer.append(c);
line++;
break;
case ' ':
if (insideWhiteSpace) {
whiteSpaceLength+=1;
}
 else {
afterWhiteSpace.append(c);
}
break;
case '\t':
if (insideWhiteSpace) {
whiteSpaceLength+=getIndentOptions().TAB_SIZE;
}
 else {
afterWhiteSpace.append(c);
}
break;
default :
insideWhiteSpace=false;
afterWhiteSpace.append(c);
}
}
if (line > 0) {
createWhiteSpace(whiteSpaceLength + shift,buffer);
}
buffer.append(afterWhiteSpace.toString());
myDocument.replaceString(elementRange.getStartOffset(),elementRange.getEndOffset(),buffer.toString());
return buffer.length() - elementRange.getLength();
}
