{
  if (!CodeInsightSettings.getInstance().INDENT_TO_CARET_ON_PASTE) {
    return;
  }
  final Document document=editor.getDocument();
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (psiFile == null || !acceptFileType(psiFile.getFileType())) {
    return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      String pastedText=document.getText(TextRange.create(bounds));
      int startLine=document.getLineNumber(bounds.getStartOffset());
      int endLine=document.getLineNumber(bounds.getEndOffset());
      if (!pastedText.trim().contains("\n") && startLine == endLine) {
        return;
      }
      int startLineStart=document.getLineStartOffset(startLine);
      final String textBeforeFirstLine=document.getText(new TextRange(startLineStart,bounds.getStartOffset()));
      if (textBeforeFirstLine.trim().length() == 0) {
        EditorActionUtil.indentLine(project,editor,startLine,-value.getFirstLineLeadingSpaces());
      }
      final List<String> strings=StringUtil.split(pastedText,"\n");
      if (caretColumn >= value.getIndent() && !strings.isEmpty() && StringUtil.isEmptyOrSpaces(strings.get(strings.size() - 1)))       endLine-=1;
      for (int i=startLine + 1; i <= endLine; i++) {
        int indent=value.getFirstLineLeadingSpaces() <= caretColumn || value.getFirstLineLeadingSpaces() == value.getMaxIndent() ? value.getIndent() : -value.getIndent();
        EditorActionUtil.indentLine(project,editor,i,indent);
      }
      indented.set(Boolean.TRUE);
    }
  }
);
}
