{
  if (!CodeInsightSettings.getInstance().INDENT_TO_CARET_ON_PASTE) {
    return;
  }
  if (value.getOffset() == caretOffset)   return;
  final Document document=editor.getDocument();
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (psiFile == null || !acceptFileType(psiFile.getFileType())) {
    return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      String pastedText=document.getText(TextRange.create(bounds));
      int startLine=document.getLineNumber(bounds.getStartOffset());
      int endLine=document.getLineNumber(bounds.getEndOffset());
      int fromIndent=StringUtil.findFirst(pastedText,CharFilter.NOT_WHITESPACE_FILTER);
      if (fromIndent < 0)       fromIndent=0;
      String initialText=document.getText(TextRange.create(0,bounds.getStartOffset())) + document.getText(TextRange.create(bounds.getEndOffset(),document.getTextLength()));
      int toIndent=0;
      if (initialText.length() > 0) {
        final DocumentImpl initialDocument=new DocumentImpl(initialText);
        int lineNumber=initialDocument.getTextLength() > caretOffset ? initialDocument.getLineNumber(caretOffset) : initialDocument.getLineCount() - 1;
        final int offset=getLineStartSafeOffset(initialDocument,lineNumber);
        if (bounds.getStartOffset() == offset) {
          String toString=initialDocument.getText(TextRange.create(offset,initialDocument.getLineEndOffset(lineNumber)));
          toIndent=StringUtil.findFirst(toString,new CharFilter(){
            @Override public boolean accept(            char ch){
              return ch != ' ';
            }
          }
);
          if ((toIndent < 0 || toString.startsWith("\n")) && initialText.length() >= caretOffset) {
            toIndent=caretOffset - offset;
          }
        }
 else         if (isNotApplicable(initialDocument,offset))         return;
 else {
          startLine+=1;
          toIndent=Math.abs(bounds.getStartOffset() - offset);
        }
      }
      int indent=toIndent - fromIndent;
      if (!StringUtil.startsWithWhitespace(pastedText) && !StringUtil.endsWithLineBreak(pastedText) && !(StringUtil.splitByLines(pastedText).length > 1))       return;
      if (pastedText.endsWith("\n"))       endLine-=1;
      for (int i=startLine; i <= endLine; i++) {
        EditorActionUtil.indentLine(project,editor,i,indent);
      }
      indented.set(Boolean.TRUE);
    }
    private boolean isNotApplicable(    DocumentImpl initialDocument,    int offset){
      return caretOffset < initialDocument.getTextLength() && !StringUtil.isEmptyOrSpaces(initialDocument.getText(TextRange.create(offset,caretOffset)));
    }
  }
);
}
