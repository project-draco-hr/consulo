{
  if (isQuickFixOnReadOnlyFile(descriptor)) {
    return;
  }
  final PsiNewExpression expression=(PsiNewExpression)descriptor.getPsiElement();
  final PsiExpressionList argList=expression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  final PsiExpression arg=args[0];
  final String text=arg.getText();
  final String newExpression;
  final PsiManager psiManager=expression.getManager();
  final LanguageLevel languageLevel=psiManager.getEffectiveLanguageLevel();
  if ("true".equals(text) || "\"true\"".equalsIgnoreCase(text)) {
    newExpression="Boolean.TRUE";
  }
 else   if ("false".equals(text) || "\"false\"".equalsIgnoreCase(text)) {
    newExpression="Boolean.FALSE";
  }
 else   if (languageLevel.equals(LanguageLevel.JDK_1_3)) {
    final PsiType argType=arg.getType();
    if (PsiType.BOOLEAN.equals(argType)) {
      if (ParenthesesUtils.getPrecendence(arg) > ParenthesesUtils.CONDITIONAL_PRECEDENCE)       newExpression=text + "?Boolean.TRUE:Boolean.FALSE";
 else       newExpression='(' + text + ")?Boolean.TRUE:Boolean.FALSE";
    }
 else {
      newExpression="Boolean.valueOf(" + text + ')';
    }
  }
 else {
    newExpression="Boolean.valueOf(" + text + ')';
  }
  replaceExpression(expression,newExpression);
}
