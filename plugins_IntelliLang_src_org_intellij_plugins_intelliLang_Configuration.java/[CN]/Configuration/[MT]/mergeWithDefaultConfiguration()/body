{
  final ArrayList<Configuration> cfgList=new ArrayList<Configuration>();
  for (  LanguageInjectionSupport support : InjectorUtils.getActiveInjectionSupports()) {
    final String config=support.getDefaultConfigUrl();
    final URL url=config == null ? null : support.getClass().getResource(config);
    if (url != null) {
      try {
        cfgList.add(load(url.openStream()));
      }
 catch (      Exception e) {
        LOG.warn(e);
      }
    }
  }
  final THashSet<String> visitedUrls=new THashSet<String>();
  for (  IdeaPluginDescriptor pluginDescriptor : PluginManager.getPlugins()) {
    final ClassLoader loader=pluginDescriptor.getPluginClassLoader();
    final URL url=loader != null ? loader.getResource("META-INF/languageInjections.xml") : null;
    if (url == null)     continue;
    if (!visitedUrls.add(url.getFile()))     continue;
    try {
      cfgList.add(load(url.openStream()));
    }
 catch (    Exception e) {
      LOG.warn(e);
    }
  }
  final ArrayList<BaseInjection> originalInjections=new ArrayList<BaseInjection>();
  final ArrayList<BaseInjection> newInjections=new ArrayList<BaseInjection>();
  myDefaultInjections=new ArrayList<BaseInjection>();
  for (  String supportId : InjectorUtils.getActiveInjectionSupportIds()) {
    for (    Configuration cfg : cfgList) {
      final List<BaseInjection> imported=cfg.getInjections(supportId);
      myDefaultInjections.addAll(imported);
      importInjections(getInjections(supportId),imported,originalInjections,newInjections);
    }
  }
  replaceInjections(newInjections,originalInjections);
}
