{
  final MultiValuesMap<InjectionPlace,BaseInjection> placeMap=new MultiValuesMap<InjectionPlace,BaseInjection>();
  for (  BaseInjection exising : existingInjections) {
    for (    InjectionPlace place : exising.getInjectionPlaces()) {
      placeMap.put(place,exising);
    }
  }
  main:   for (  BaseInjection other : importingInjections) {
    final List<BaseInjection> matchingInjections=ContainerUtil.concat(other.getInjectionPlaces(),new Function<InjectionPlace,Collection<? extends BaseInjection>>(){
      public Collection<? extends BaseInjection> fun(      final InjectionPlace o){
        final Collection<BaseInjection> collection=placeMap.get(o);
        return collection == null ? Collections.<BaseInjection>emptyList() : collection;
      }
    }
);
    if (matchingInjections.isEmpty()) {
      newInjections.add(other);
    }
 else {
      BaseInjection existing=null;
      for (      BaseInjection injection : matchingInjections) {
        if (injection.equals(other))         continue main;
        if (existing == null && injection.sameLanguageParameters(other)) {
          existing=injection;
        }
      }
      if (existing == null)       continue main;
      final BaseInjection newInjection=existing.copy();
      newInjection.mergeOriginalPlacesFrom(other,true);
      if (!newInjection.equals(existing)) {
        originalInjections.add(existing);
        newInjections.add(newInjection);
      }
    }
  }
}
