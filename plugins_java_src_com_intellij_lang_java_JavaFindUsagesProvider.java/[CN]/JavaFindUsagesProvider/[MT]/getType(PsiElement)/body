{
  if (element instanceof PsiDirectory) {
    return LangBundle.message("terms.directory");
  }
  if (element instanceof PsiFile) {
    return LangBundle.message("terms.file");
  }
  if (ThrowSearchUtil.isSearchable(element)) {
    return LangBundle.message("java.terms.exception");
  }
  if (element instanceof PsiJavaPackage) {
    return LangBundle.message("java.terms.package");
  }
  if (element instanceof PsiLabeledStatement) {
    return LangBundle.message("java.terms.label");
  }
  if (element instanceof PsiClass) {
    if (((PsiClass)element).isAnnotationType()) {
      return LangBundle.message("java.terms.annotation.interface");
    }
    if (((PsiClass)element).isEnum()) {
      return LangBundle.message("java.terms.enum");
    }
    if (((PsiClass)element).isInterface()) {
      return LangBundle.message("java.terms.interface");
    }
    if (element instanceof PsiTypeParameter) {
      return LangBundle.message("java.terms.type.parameter");
    }
    return LangBundle.message("java.terms.class");
  }
  if (element instanceof PsiField) {
    return LangBundle.message("java.terms.field");
  }
  if (element instanceof PsiParameter) {
    return LangBundle.message("java.terms.parameter");
  }
  if (element instanceof PsiLocalVariable) {
    return LangBundle.message("java.terms.variable");
  }
  if (element instanceof PsiMethod) {
    final PsiMethod psiMethod=(PsiMethod)element;
    final boolean isConstructor=psiMethod.isConstructor();
    if (isConstructor) {
      return LangBundle.message("java.terms.constructor");
    }
    return LangBundle.message("java.terms.method");
  }
  if (element instanceof PsiExpression) {
    return LangBundle.message("java.terms.expression");
  }
  final String name=TypePresentationService.getService().getTypePresentableName(element.getClass());
  if (name != null) {
    return name;
  }
  return "";
}
