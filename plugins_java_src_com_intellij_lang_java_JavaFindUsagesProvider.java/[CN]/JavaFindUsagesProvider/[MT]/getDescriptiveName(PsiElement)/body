{
  if (ThrowSearchUtil.isSearchable(element)) {
    return ThrowSearchUtil.getSearchableTypeName(element);
  }
  if (element instanceof PsiDirectory) {
    return getPackageName((PsiDirectory)element,false);
  }
  if (element instanceof PsiJavaPackage) {
    return getPackageName((PsiJavaPackage)element);
  }
  if (element instanceof PsiFile) {
    return ((PsiFile)element).getVirtualFile().getPresentableUrl();
  }
  if (element instanceof PsiLabeledStatement) {
    return ((PsiLabeledStatement)element).getLabelIdentifier().getText();
  }
  if (element instanceof PsiClass) {
    if (element instanceof PsiAnonymousClass) {
      return LangBundle.message("java.terms.anonymous.class");
    }
 else {
      final PsiClass aClass=(PsiClass)element;
      String qName=aClass.getQualifiedName();
      return qName == null ? aClass.getName() : qName;
    }
  }
  if (element instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)element;
    String formatted=PsiFormatUtil.formatMethod(psiMethod,PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE | PsiFormatUtilBase.SHOW_RAW_NON_TOP_TYPE);
    PsiClass psiClass=psiMethod.getContainingClass();
    if (psiClass != null) {
      return getContainingClassDescription(psiClass,formatted);
    }
    return formatted;
  }
  if (element instanceof PsiField) {
    PsiField psiField=(PsiField)element;
    String formatted=PsiFormatUtil.formatVariable(psiField,PsiFormatUtilBase.SHOW_NAME,PsiSubstitutor.EMPTY);
    PsiClass psiClass=psiField.getContainingClass();
    if (psiClass != null) {
      return getContainingClassDescription(psiClass,formatted);
    }
    return formatted;
  }
  if (element instanceof PsiVariable) {
    return PsiFormatUtil.formatVariable((PsiVariable)element,PsiFormatUtilBase.SHOW_NAME,PsiSubstitutor.EMPTY);
  }
  if (element instanceof PsiLiteralExpression) {
    return element.getText();
  }
  return "";
}
