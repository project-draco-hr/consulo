{
  return ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      GroovyPsiElement sourceImage=findReferenceTypeSourceImage(classPosition);
      String qName=null;
      if (sourceImage instanceof GrTypeDefinition) {
        qName=((GrTypeDefinition)sourceImage).getQualifiedName();
      }
 else       if (sourceImage == null) {
        PsiFile file=classPosition.getFile();
        if (file instanceof GroovyFile) {
          qName=getScriptFQName((GroovyFile)file);
        }
 else {
          return Collections.emptyList();
        }
      }
      if (qName == null) {
        final GrTypeDefinition toplevel=getToplevelTypeDefinition(sourceImage);
        if (toplevel == null)         return Collections.emptyList();
        final String parentClassName=toplevel.getQualifiedName();
        final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(parentClassName);
        final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
        for (        ReferenceType outer : outers) {
          final ReferenceType nested=findNested(outer,sourceImage,classPosition);
          if (nested != null) {
            result.add(nested);
          }
        }
        return result;
      }
 else {
        return myDebugProcess.getVirtualMachineProxy().classesByName(qName);
      }
    }
  }
);
}
