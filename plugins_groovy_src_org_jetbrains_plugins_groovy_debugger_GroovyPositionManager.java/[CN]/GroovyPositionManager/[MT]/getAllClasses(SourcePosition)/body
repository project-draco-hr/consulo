{
  List<ReferenceType> result=ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      GrTypeDefinition typeDefinition=findEnclosingTypeDefinition(classPosition);
      String qName=null;
      if (typeDefinition != null) {
        qName=typeDefinition.getQualifiedName();
      }
      if (qName == null) {
        qName=getScriptQualifiedName(classPosition);
        if (qName == null)         return Collections.emptyList();
        final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(qName);
        final GroovyPsiElement sourceImage=findReferenceTypeSourceImage(classPosition);
        if (sourceImage == null)         return Collections.emptyList();
        final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
        for (        ReferenceType outer : outers) {
          final ReferenceType nested=findNested(outer,sourceImage,classPosition);
          if (nested != null) {
            result.add(nested);
          }
        }
        return result;
      }
 else {
        return myDebugProcess.getVirtualMachineProxy().classesByName(qName);
      }
    }
  }
);
  if (result == null || result.isEmpty())   throw new NoDataException();
  return result;
}
