{
  List<ReferenceType> result=ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      GroovyPsiElement sourceImage=findReferenceTypeSourceImage(position);
      final String scriptName=getScriptQualifiedName(position);
      if (sourceImage instanceof GrTypeDefinition) {
        String qName=((GrTypeDefinition)sourceImage).getQualifiedName();
        if (qName != null)         return myDebugProcess.getVirtualMachineProxy().classesByName(qName);
      }
 else       if (sourceImage == null) {
        if (scriptName != null)         return myDebugProcess.getVirtualMachineProxy().classesByName(scriptName);
      }
 else {
        final GrTypeDefinition typeDefinition=findEnclosingTypeDefinition(position);
        String enclosingName;
        if (typeDefinition != null) {
          enclosingName=typeDefinition.getQualifiedName();
        }
 else {
          enclosingName=scriptName;
        }
        if (enclosingName == null)         return Collections.emptyList();
        final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(enclosingName);
        final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
        for (        ReferenceType outer : outers) {
          final ReferenceType nested=findNested(outer,sourceImage,position);
          if (nested != null) {
            result.add(nested);
          }
        }
        return result;
      }
      return Collections.emptyList();
    }
  }
);
  if (result == null || result.isEmpty())   throw new NoDataException();
  return result;
}
