{
  GroovyPsiElement sourceImage=findReferenceTypeSourceImage(position);
  String qName=null;
  if (sourceImage instanceof GrTypeDefinition) {
    qName=((GrTypeDefinition)sourceImage).getQualifiedName();
  }
 else {
    if (sourceImage == null) {
      PsiFile file=position.getFile();
      if (file instanceof GroovyFile) {
        qName=getScriptFQName((GroovyFile)file);
      }
      if (qName == null)       return null;
    }
  }
  String waitPrepareFor;
  ClassPrepareRequestor waitRequestor;
  if (qName == null) {
    GrTypeDefinition toplevel=getToplevelTypeDefinition(sourceImage);
    if (toplevel == null)     return null;
    final String toplevelQName=toplevel.getQualifiedName();
    if (toplevelQName == null)     return null;
    waitPrepareFor=toplevelQName + "$*";
    waitRequestor=new ClassPrepareRequestor(){
      public void processClassPrepare(      DebugProcess debuggerProcess,      ReferenceType referenceType){
        final CompoundPositionManager positionManager=((DebugProcessImpl)debuggerProcess).getPositionManager();
        if (positionManager.locationsOfLine(referenceType,position).size() > 0) {
          requestor.processClassPrepare(debuggerProcess,referenceType);
        }
 else {
          final List<ReferenceType> positionClasses=positionManager.getAllClasses(position);
          if (positionClasses.contains(referenceType)) {
            requestor.processClassPrepare(debuggerProcess,referenceType);
          }
        }
      }
    }
;
  }
 else {
    waitPrepareFor=qName;
    waitRequestor=requestor;
  }
  return myDebugProcess.getRequestsManager().createClassPrepareRequest(waitRequestor,waitPrepareFor);
}
