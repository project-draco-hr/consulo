{
  final HashMap<PsiField,Initializer> fieldsToInitializers=new HashMap<PsiField,Initializer>();
  boolean anyFound=false;
  for (  PsiField field : movedFields) {
    PsiExpression commonInitializer=null;
    final ArrayList<PsiElement> fieldInitializersToRemove=new ArrayList<PsiElement>();
    for (    PsiMethod subConstructor : subConstructors) {
      commonInitializer=hasCommonInitializer(commonInitializer,subConstructor,field,fieldInitializersToRemove);
      if (commonInitializer == null)       break;
    }
    if (commonInitializer != null) {
      final ParametersAndMovedFieldsUsedCollector visitor=new ParametersAndMovedFieldsUsedCollector(movedFields);
      commonInitializer.accept(visitor);
      fieldsToInitializers.put(field,new Initializer(commonInitializer,visitor.getUsedFields(),visitor.getUsedParameters(),fieldInitializersToRemove));
      anyFound=true;
    }
  }
  if (!anyFound)   return;
{
    final Set<PsiField> initializedFields=fieldsToInitializers.keySet();
    Set<PsiField> unmovable=RefactoringUtil.transitiveClosure(new RefactoringUtil.Graph<PsiField>(){
      public Set<PsiField> getVertices(){
        return initializedFields;
      }
      public Set<PsiField> getTargets(      PsiField source){
        return fieldsToInitializers.get(source).movedFieldsUsed;
      }
    }
,new Condition<PsiField>(){
      public boolean value(      PsiField object){
        return !initializedFields.contains(object);
      }
    }
);
    for (    PsiField psiField : unmovable) {
      fieldsToInitializers.remove(psiField);
    }
  }
  final PsiElementFactory factory=JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory();
  if (constructor == null) {
    constructor=(PsiMethod)myTargetSuperClass.add(factory.createConstructor());
    final String visibilityModifier=VisibilityUtil.getVisibilityModifier(myTargetSuperClass.getModifierList());
    constructor.getModifierList().setModifierProperty(visibilityModifier,true);
  }
  ArrayList<PsiField> initializedFields=new ArrayList<PsiField>(fieldsToInitializers.keySet());
  Collections.sort(initializedFields,new Comparator<PsiField>(){
    public int compare(    PsiField field1,    PsiField field2){
      Initializer i1=fieldsToInitializers.get(field1);
      Initializer i2=fieldsToInitializers.get(field2);
      if (i1.movedFieldsUsed.contains(field2))       return 1;
      if (i2.movedFieldsUsed.contains(field1))       return -1;
      return 0;
    }
  }
);
  for (  final PsiField initializedField : initializedFields) {
    Initializer initializer=fieldsToInitializers.get(initializedField);
    final PsiParameterList parameterList=constructor.getParameterList();
    for (    final PsiParameter parameter : initializer.usedParameters) {
      parameterList.add(parameter);
    }
    for (    final PsiMethod subConstructor : subConstructors) {
      modifySuperCall(subConstructor,initializer.usedParameters);
    }
    PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)factory.createStatementFromText(initializedField.getName() + "=0;",constructor.getBody());
    assignmentStatement=(PsiExpressionStatement)constructor.getBody().add(assignmentStatement);
    PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)assignmentStatement.getExpression();
    PsiReferenceExpression fieldRef=(PsiReferenceExpression)assignmentExpression.getLExpression();
    PsiElement resolved=fieldRef.resolve();
    if (resolved != initializedField) {
      PsiElement qualifiedRef=factory.createExpressionFromText("this." + initializedField.getName(),fieldRef);
      qualifiedRef=CodeStyleManager.getInstance(myManager.getProject()).reformat(qualifiedRef);
      fieldRef.replace(qualifiedRef);
    }
    final PsiElement newInitializer=assignmentExpression.getRExpression().replace(initializer.initializer);
    ChangeContextUtil.decodeContextInfo(newInitializer,myTargetSuperClass,RefactoringUtil.createThisExpression(myManager,null));
    for (    PsiElement psiElement : initializer.statementsToRemove) {
      psiElement.delete();
    }
  }
}
