{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (project != null && project.isDisposed())   return;
  if (LOG.isDebugEnabled()) {
    LOG.debug("executeCommand: " + command + ", name = "+ name+ ", groupId = "+ groupId);
  }
  if (myCurrentCommand != null) {
    command.run();
    return;
  }
  boolean failed=false;
  try {
    myCurrentCommand=new CommandDescriptor(command,project,name,groupId,undoConfirmationPolicy);
    fireCommandStarted();
    command.run();
  }
 catch (  TooComplexPSIModificationException rollback) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      throw new RuntimeException(rollback);
    }
    failed=true;
  }
catch (  UnsupportedOperationException operation) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      throw new RuntimeException(operation);
    }
    failed=true;
  }
catch (  Throwable e) {
    if (e instanceof Error)     throw (Error)e;
 else     if (e instanceof RuntimeException)     throw (RuntimeException)e;
    LOG.error(e);
  }
 finally {
    fireCommandFinished();
  }
  if (failed) {
    if (project != null) {
      FileEditor editor=new FocusBasedCurrentEditorProvider().getCurrentEditor();
      final UndoManager undoManager=UndoManager.getInstance(project);
      if (undoManager.isUndoAvailable(editor)) {
        undoManager.undo(editor);
      }
    }
    Messages.showErrorDialog(project,"Cannot perform operation. Too complex, sorry.","Failed to perform operation");
  }
}
