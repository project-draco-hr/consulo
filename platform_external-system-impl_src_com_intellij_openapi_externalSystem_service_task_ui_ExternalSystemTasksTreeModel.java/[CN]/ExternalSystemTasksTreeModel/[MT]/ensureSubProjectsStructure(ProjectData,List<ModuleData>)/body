{
  ExternalSystemNode<ProjectNodeElement> topLevelProjectNode=ensureProjectNodeExists(topLevelProject);
  Map<String,ModuleData> toAdd=ContainerUtilRt.newHashMap();
  final TObjectIntHashMap<String> subProjectWeights=new TObjectIntHashMap<String>();
  int w=0;
  for (  ModuleData subProject : subProjects) {
    toAdd.put(subProject.getExternalConfigPath(),subProject);
    subProjectWeights.put(subProject.getExternalConfigPath(),w++);
  }
  final TObjectIntHashMap<Object> taskWeights=new TObjectIntHashMap<Object>();
  for (int i=0; i < topLevelProjectNode.getChildCount(); i++) {
    ExternalSystemNode<?> child=topLevelProjectNode.getChildAt(i);
    Object childElement=child.getDescriptor().getElement();
    if (childElement instanceof ExternalSystemTaskDescriptor) {
      taskWeights.put(childElement,subProjects.size() + i);
      continue;
    }
    if (toAdd.remove(((ProjectNodeElement)childElement).path) == null) {
      topLevelProjectNode.remove(child);
      myIndexHolder[0]=i;
      myNodeHolder[0]=child;
      nodesWereRemoved(topLevelProjectNode,myIndexHolder,myNodeHolder);
      i--;
    }
  }
  if (!toAdd.isEmpty()) {
    for (    Map.Entry<String,ModuleData> entry : toAdd.entrySet()) {
      ProjectNodeElement element=new ProjectNodeElement(entry.getValue().getName(),entry.getValue().getExternalConfigPath());
      topLevelProjectNode.add(new ExternalSystemNode<ProjectNodeElement>(descriptor(element,myUiAware.getProjectIcon())));
    }
  }
  ExternalSystemUiUtil.sort(topLevelProjectNode,this,new Comparator<TreeNode>(){
    @Override public int compare(    TreeNode o1,    TreeNode o2){
      return getWeight(o1) - getWeight(o2);
    }
    private int getWeight(    @NotNull TreeNode node){
      if (!(node instanceof ExternalSystemNode<?>)) {
        return 0;
      }
      Object element=((ExternalSystemNode)node).getDescriptor().getElement();
      if (element instanceof ProjectNodeElement) {
        return subProjectWeights.get(((ProjectNodeElement)element).path);
      }
 else       if (element instanceof ExternalSystemTaskDescriptor) {
        return taskWeights.get(element);
      }
 else {
        return 0;
      }
    }
  }
);
}
