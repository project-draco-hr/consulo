{
  myList.setModel(myCustomizationSchemas);
  myList.setPrototypeCellValue(new CustomActionsSchema("xxxxxxxxxxxxx",""));
  fillSchemaList();
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setCellRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof CustomActionsSchema) {
        final CustomActionsSchema schema=(CustomActionsSchema)value;
        append(schema.getName(),schema.getName().equals(CustomizableActionsSchemas.DEFAULT_NAME) ? SimpleTextAttributes.GRAYED_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
      }
    }
  }
);
  Group rootGroup=new Group("root",null,null);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(rootGroup);
  DefaultTreeModel model=new DefaultTreeModel(root);
  myActionsTree.setModel(model);
  myActionsTree.setRootVisible(false);
  myActionsTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myActionsTree);
  myActionsTree.setCellRenderer(new MyTreeCellRenderer());
  setButtonsDisabled();
  final ActionManager actionManager=ActionManager.getInstance();
  myActionsTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath[] selectionPaths=myActionsTree.getSelectionPaths();
      final boolean isSingleSelection=selectionPaths != null && selectionPaths.length == 1;
      myAddActionButton.setEnabled(isSingleSelection);
      if (isSingleSelection) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPaths[0].getLastPathComponent();
        String actionId=getActionId(node);
        if (actionId != null) {
          final AnAction action=actionManager.getAction(actionId);
          myEditIconButton.setEnabled(action != null && (!action.isDefaultIcon() || (action.getTemplatePresentation() != null && action.getTemplatePresentation().getIcon() == null)));
        }
 else {
          myEditIconButton.setEnabled(false);
        }
      }
 else {
        myEditIconButton.setEnabled(false);
      }
      myAddSeparatorButton.setEnabled(isSingleSelection);
      myRemoveActionButton.setEnabled(selectionPaths != null);
      if (selectionPaths != null) {
        for (        TreePath selectionPath : selectionPaths) {
          if ((selectionPath.getPath() != null && selectionPath.getPath().length <= 2) || (mySelectedSchema == null || mySelectedSchema.getName().equals(CustomizableActionsSchemas.DEFAULT_NAME))) {
            setButtonsDisabled();
            return;
          }
        }
      }
      myMoveActionUpButton.setEnabled(isMoveSupported(myActionsTree,-1));
      myMoveActionDownButton.setEnabled(isMoveSupported(myActionsTree,1));
    }
  }
);
  final CustomizableActionsSchemas schemas=CustomizableActionsSchemas.getInstance();
  myAddActionButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final FindAvailableActionsDialog dlg=new FindAvailableActionsDialog();
        dlg.show();
        if (dlg.isOK()) {
          final Set<Object> toAdd=dlg.getTreeSelectedActionIds();
          if (toAdd == null)           return;
          for (          final Object o : toAdd) {
            final ActionUrl url=new ActionUrl(ActionUrl.getGroupPath(new TreePath(node.getPath())),o,ActionUrl.ADDED,node.getParent().getIndex(node) + 1);
            mySelectedSchema.addAction(url);
            ActionUrl.changePathInActionsTree(myActionsTree,url);
            if (o instanceof String) {
              DefaultMutableTreeNode current=new DefaultMutableTreeNode(url.getComponent());
              current.setParent((DefaultMutableTreeNode)node.getParent());
              editToolbarIcon((String)o,current,schemas);
            }
          }
          ((DefaultTreeModel)myActionsTree.getModel()).reload();
        }
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myEditIconButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        EditIconDialog dlg=new EditIconDialog((DefaultMutableTreeNode)selectionPath.getLastPathComponent());
        dlg.show();
        if (dlg.isOK()) {
          myActionsTree.repaint();
        }
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myAddSeparatorButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final ActionUrl url=new ActionUrl(ActionUrl.getGroupPath(selectionPath),Separator.getInstance(),ActionUrl.ADDED,node.getParent().getIndex(node) + 1);
        ActionUrl.changePathInActionsTree(myActionsTree,url);
        mySelectedSchema.addAction(url);
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myRemoveActionButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (        TreePath treePath : selectionPath) {
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.DELETED);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          mySelectedSchema.addAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myMoveActionUpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (        TreePath treePath : selectionPath) {
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.MOVE);
          final int absolutePosition=url.getAbsolutePosition();
          url.setInitialPosition(absolutePosition);
          url.setAbsolutePosition(absolutePosition - 1);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          mySelectedSchema.addAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
        TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
        for (        TreePath path : selectionPath) {
          myActionsTree.addSelectionPath(path);
        }
      }
    }
  }
);
  myMoveActionDownButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (int i=selectionPath.length - 1; i >= 0; i--) {
          TreePath treePath=selectionPath[i];
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.MOVE);
          final int absolutePosition=url.getAbsolutePosition();
          url.setInitialPosition(absolutePosition);
          url.setAbsolutePosition(absolutePosition + 1);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          mySelectedSchema.addAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
        TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
        for (        TreePath path : selectionPath) {
          myActionsTree.addSelectionPath(path);
        }
      }
    }
  }
);
  myDescription.setText(mySelectedSchema != null ? mySelectedSchema.getDescription() : "");
  final DefaultActionGroup group=new DefaultActionGroup();
  ReorderableListController<CustomActionsSchema> controller=ReorderableListController.create(myList,group);
  controller.addAddAction(IdeBundle.message("action.add.customization.schema"),new Factory<CustomActionsSchema>(){
    public CustomActionsSchema create(){
      return new CustomActionsSchema(createUniqueName(),"");
    }
  }
,true);
  final ReorderableListController<CustomActionsSchema>.RemoveActionDescription removeActionDescription=controller.addRemoveAction(IdeBundle.message("action.remove.customization.schema"));
  removeActionDescription.setEnableCondition(new Condition<CustomActionsSchema>(){
    public boolean value(    final CustomActionsSchema schema){
      return !schema.getName().equals(IdeBundle.message("customizations.schema.default"));
    }
  }
);
  controller.addCopyAction(IdeBundle.message("action.copy.customization.schema"),new Convertor<CustomActionsSchema,CustomActionsSchema>(){
    public CustomActionsSchema convert(    final CustomActionsSchema o){
      final CustomActionsSchema customActionsSchema=o.copyFrom();
      customActionsSchema.setName(createUniqueName());
      return customActionsSchema;
    }
  }
,Conditions.<CustomActionsSchema>alwaysTrue());
  myListPane.setLayout(new BorderLayout());
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  myListPane.add(toolbar.getComponent(),BorderLayout.NORTH);
  myListPane.add(ScrollPaneFactory.createScrollPane(myList),BorderLayout.CENTER);
  myList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final CustomActionsSchema selectedValue=(CustomActionsSchema)myList.getSelectedValue();
      if (selectedValue != null) {
        myTreeExpansionMonitor.freeze();
        mySelectedSchema=selectedValue;
        setNameAndDescription(!mySelectedSchema.getName().equals(CustomizableActionsSchemas.DEFAULT_NAME),mySelectedSchema.getName(),mySelectedSchema.getDescription());
        patchActionsTreeCorrespondingToSchema((DefaultMutableTreeNode)myActionsTree.getModel().getRoot());
        myTreeExpansionMonitor.restore();
      }
 else {
        mySelectedSchema=null;
        ((DefaultMutableTreeNode)myActionsTree.getModel().getRoot()).removeAllChildren();
      }
    }
  }
);
  myList.getModel().addListDataListener(new ListDataListener(){
    public void contentsChanged(    ListDataEvent e){
    }
    public void intervalAdded(    ListDataEvent e){
    }
    public void intervalRemoved(    ListDataEvent e){
      if (myList.getModel().getSize() == 0) {
        mySelectedSchema=null;
        setNameAndDescription(false,"","");
        ((DefaultMutableTreeNode)myActionsTree.getModel().getRoot()).removeAllChildren();
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
      }
    }
  }
);
  myDescription.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      if (mySelectedSchema != null) {
        mySelectedSchema.setDescription(myDescription.getText());
      }
    }
  }
);
  myName.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      if (mySelectedSchema != null) {
        mySelectedSchema.setName(myName.getText());
        myList.repaint();
      }
    }
  }
);
  patchActionsTreeCorrespondingToSchema(root);
  myTreeExpansionMonitor=TreeExpansionMonitor.install(myActionsTree);
}
