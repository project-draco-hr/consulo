{
  if (!(originalExpression.getValue() instanceof String))   return;
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(originalExpression.getProject());
  final String stringToFind=(String)originalExpression.getValue();
  if (stringToFind.length() < MIN_STRING_LENGTH)   return;
  final PsiSearchHelper searchHelper=originalExpression.getManager().getSearchHelper();
  final List<String> words=StringUtil.getWordsIn(stringToFind);
  if (words.size() == 0)   return;
  Collections.sort(words,new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o2.length() - o1.length();
    }
  }
);
  Set<PsiFile> resultFiles=null;
  for (int i=0; i < words.size(); i++) {
    String word=words.get(i);
    final Set<PsiFile> files=new THashSet<PsiFile>();
    searchHelper.processAllFilesWithWordInLiterals(word,scope,new Processor<PsiFile>(){
      public boolean process(      PsiFile file){
        files.add(file);
        return true;
      }
    }
);
    final boolean firstTime=i == 0;
    if (firstTime) {
      resultFiles=files;
    }
 else {
      resultFiles.retainAll(files);
    }
    if (resultFiles.size() == 0)     return;
  }
  final List<PsiExpression> foundExpr=new ArrayList<PsiExpression>();
  for (Iterator<PsiFile> iterator=resultFiles.iterator(); iterator.hasNext(); ) {
    PsiFile file=iterator.next();
    file.accept(new PsiRecursiveElementVisitor(){
      public void visitLiteralExpression(      PsiLiteralExpression expression){
        if (expression != originalExpression && Comparing.equal(stringToFind,expression.getValue())) {
          foundExpr.add(expression);
        }
      }
    }
);
  }
  if (foundExpr.size() == 0)   return;
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (int i=0; i < foundExpr.size(); i++) {
    PsiElement aClass=foundExpr.get(i);
    do {
      aClass=PsiTreeUtil.getParentOfType(aClass,PsiClass.class);
    }
 while (aClass instanceof PsiAnonymousClass || (aClass != null && ((PsiClass)aClass).getQualifiedName() == null));
    if (aClass == null)     continue;
    classes.add((PsiClass)aClass);
  }
  if (classes.size() == 0)   return;
  String msg="<html><body>Duplicate string literal found in ";
  int i=0;
  for (Iterator<PsiClass> iterator=classes.iterator(); iterator.hasNext(); i++) {
    final PsiClass aClass=iterator.next();
    if (i > 10) {
      msg+="<br>... (" + (classes.size() - i) + " more)";
      break;
    }
    msg+=(i == 0 ? "" : ", ") + "<br>&nbsp;&nbsp;&nbsp;'<b>" + aClass.getQualifiedName()+ "</b>'";
    if (aClass.getContainingFile() == originalExpression.getContainingFile()) {
      msg+=" (in this file)";
    }
  }
  msg+="</body></html>";
  addIntroduceConstantFix(foundExpr,originalExpression,manager,msg,allProblems);
}
