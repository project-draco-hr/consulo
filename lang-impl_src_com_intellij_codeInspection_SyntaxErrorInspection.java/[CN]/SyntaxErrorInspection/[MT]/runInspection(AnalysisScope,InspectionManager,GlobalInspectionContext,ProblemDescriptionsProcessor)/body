{
  scope.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitErrorElement(    PsiErrorElement element){
      super.visitErrorElement(element);
      CommonProblemDescriptor descriptor;
      final TextRange textRange=element.getTextRange();
      if (textRange.getLength() > 0) {
        descriptor=manager.createProblemDescriptor(element,element.getErrorDescription(),ProblemHighlightType.ERROR,null);
      }
 else {
        PsiElement parent=element;
        while (true) {
          parent=parent.getParent();
          if (parent == null)           break;
          TextRange r=parent.getTextRange();
          if (r == null)           return;
          if (r.getLength() > 0) {
            break;
          }
        }
        if (parent == null)         return;
        int offset=element.getTextRange().getStartOffset() - parent.getTextRange().getStartOffset();
        descriptor=manager.createProblemDescriptor(parent,new TextRange(offset,offset + 1),element.getErrorDescription(),ProblemHighlightType.ERROR);
      }
      final RefElement refElement=globalContext.getRefManager().getReference(element.getContainingFile());
      problemDescriptionsProcessor.addProblemElement(refElement,descriptor);
    }
  }
);
}
