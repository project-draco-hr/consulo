{
  return new PsiReference(){
    private PsiClass getReferencedClass(){
      LOG.assertTrue(getTreeParent().getElementType() == ANNOTATION_PARAMETER_LIST && getTreeParent().getTreeParent().getElementType() == ANNOTATION);
      PsiAnnotationImpl annotation=(PsiAnnotationImpl)getTreeParent().getTreeParent().getPsi();
      PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
      return nameRef == null ? null : (PsiClass)nameRef.resolve();
    }
    public PsiElement getElement(){
      PsiIdentifier nameIdentifier=getNameIdentifier();
      if (nameIdentifier != null) {
        return nameIdentifier;
      }
 else {
        return PsiNameValuePairImpl.this;
      }
    }
    public TextRange getRangeInElement(){
      PsiIdentifier id=getNameIdentifier();
      if (id != null) {
        return new TextRange(0,id.getTextLength());
      }
 else {
        final TreeElement firstChildNode=getFirstChildNode();
        if (firstChildNode != null && firstChildNode.getElementType() == REFERENCE_EXPRESSION) {
          final PsiReferenceExpression refExpr=(PsiReferenceExpression)firstChildNode.getPsi();
          if (refExpr.isQualified())           return new TextRange(0,0);
          return new TextRange(0,refExpr.getTextLength());
        }
 else {
          return new TextRange(0,0);
        }
      }
    }
    public PsiElement resolve(){
      PsiClass refClass=getReferencedClass();
      if (refClass == null)       return null;
      String name=getName();
      if (name == null)       name=PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME;
      MethodSignature signature=MethodSignatureUtil.createMethodSignature(name,PsiType.EMPTY_ARRAY,PsiTypeParameter.EMPTY_ARRAY,PsiSubstitutor.EMPTY);
      return MethodSignatureUtil.findMethodBySignature(refClass,signature,false);
    }
    public String getCanonicalText(){
      String name=getName();
      return name != null ? name : PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME;
    }
    public PsiElement handleElementRename(    String newElementName) throws IncorrectOperationException {
      PsiIdentifier nameIdentifier=getNameIdentifier();
      if (nameIdentifier != null) {
        SharedPsiElementImplUtil.setName(nameIdentifier,newElementName);
      }
 else       if (ANNOTATION_MEMBER_VALUE_BIT_SET.contains(getFirstChildNode().getElementType())) {
        PsiElementFactory factory=JavaPsiFacade.getInstance(getManager().getProject()).getElementFactory();
        nameIdentifier=factory.createIdentifier(newElementName);
        addBefore(nameIdentifier,SourceTreeToPsiMap.treeElementToPsi(getFirstChildNode()));
      }
      return PsiNameValuePairImpl.this;
    }
    public PsiElement bindToElement(    @NotNull PsiElement element) throws IncorrectOperationException {
      throw new IncorrectOperationException("Not implemented");
    }
    public boolean isReferenceTo(    PsiElement element){
      return element instanceof PsiMethod && element.equals(resolve());
    }
    public Object[] getVariants(){
      PsiClass aClass=getReferencedClass();
      if (aClass != null) {
        PsiAnnotationParameterList parent=(PsiAnnotationParameterList)getParent();
        final PsiNameValuePair[] existingPairs=parent.getAttributes();
        List<PsiMethod> result=new ArrayList<PsiMethod>();
        methods:         for (        PsiMethod method : aClass.getMethods()) {
          for (          PsiNameValuePair pair : existingPairs) {
            if (Comparing.equal(pair.getName(),method.getName()))             continue methods;
          }
          result.add(method);
        }
        return result.toArray(new Object[result.size()]);
      }
 else {
        return ArrayUtil.EMPTY_OBJECT_ARRAY;
      }
    }
    public boolean isSoft(){
      return false;
    }
  }
;
}
