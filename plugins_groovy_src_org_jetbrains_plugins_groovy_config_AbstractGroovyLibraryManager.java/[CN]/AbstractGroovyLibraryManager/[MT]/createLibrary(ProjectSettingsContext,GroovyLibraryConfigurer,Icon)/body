{
  final String libraryKind=getLibraryCategoryName();
  final Module module=context.getModule();
  final Project project=module.getProject();
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false){
    public boolean isFileSelectable(    VirtualFile file){
      return super.isFileSelectable(file) && configUtils.isSDKHome(file);
    }
  }
;
  final VirtualFile[] files=FileChooserFactory.getInstance().createFileChooser(descriptor,project).choose(null,project);
  if (files.length == 1) {
    String path=files[0].getPath();
    List<String> versions=CollectionFactory.arrayList();
    final LibrariesContainer container=((ProjectConfigurableContext)context).getContainer();
    for (    Library library : getAllDefinedLibraries(container)) {
      if (managesLibrary(library,container)) {
        ContainerUtil.addIfNotNull(getLibraryVersion(library,container),versions);
      }
    }
    String newVersion=configUtils.getSDKVersion(path);
    boolean addVersion=!versions.contains(newVersion) || Messages.showOkCancelDialog("Add one more " + libraryKind + " library of version "+ newVersion+ "?","Duplicate library version",bigIcon) == 0;
    if (addVersion && !AbstractConfigUtils.UNDEFINED_VERSION.equals(newVersion)) {
      final String name=generatePointerName(context,newVersion,getLibraryPrefix());
      final CreateLibraryDialog dialog=new CreateLibraryDialog(project,"Create " + libraryKind + " library","Create Project " + libraryKind + " library '"+ name+ "'","Create Global " + libraryKind + " library '"+ name+ "'");
      dialog.show();
      if (dialog.isOK()) {
        return configUtils.createSDKLibrary(path,name,project,true,dialog.isInProject());
      }
    }
  }
  return null;
}
