{
  final List<String> versions=CollectionFactory.arrayList();
  final Set<String> usedLibraryNames=CollectionFactory.newTroveSet();
  for (  Library library : container.getAllLibraries()) {
    usedLibraryNames.add(library.getName());
    final VirtualFile[] libraryFiles=container.getLibraryFiles(library,OrderRootType.CLASSES);
    if (managesLibrary(libraryFiles)) {
      ContainerUtil.addIfNotNull(getLibraryVersion(libraryFiles),versions);
    }
  }
  final String newVersion=getSDKVersion(path);
  final String libraryKind=getLibraryCategoryName();
  boolean addVersion=!versions.contains(newVersion) || Messages.showOkCancelDialog("Add one more " + libraryKind + " library of version "+ newVersion+ "?","Duplicate library version",getDialogIcon()) == 0;
  if (addVersion && !AbstractConfigUtils.UNDEFINED_VERSION.equals(newVersion)) {
    final Project project=container.getProject();
    final String name=generatePointerName(newVersion,getLibraryPrefix() + "-",container,usedLibraryNames);
    final CreateLibraryDialog dialog=new CreateLibraryDialog(project,"Create " + libraryKind + " library","Create Project " + libraryKind + " library '"+ name+ "'","Create Global " + libraryKind + " library '"+ name+ "'");
    dialog.show();
    if (dialog.isOK()) {
      return ApplicationManager.getApplication().runWriteAction(new Computable<Library>(){
        @Nullable public Library compute(){
          return createSDKLibrary(path,name,project,inModuleSettings,dialog.isInProject());
        }
      }
);
    }
  }
  return null;
}
