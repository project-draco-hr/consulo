{
  final ArrayList<RangeHighlighter> highlighters=new ArrayList<RangeHighlighter>();
  highlightMatch(project,editor,match,highlighters);
  final TextRange textRange=match.getTextRange();
  final LogicalPosition logicalPosition=editor.offsetToLogicalPosition(textRange.getStartOffset());
  expandAllRegionsCoveringRange(project,editor,textRange);
  editor.getScrollingModel().scrollTo(logicalPosition,ScrollType.MAKE_VISIBLE);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    if (showAll.get() == null || !showAll.get()) {
      final String prompt=provider.getConfirmDuplicatePrompt(match);
      final ReplacePromptDialog promptDialog=new ReplacePromptDialog(false,provider.getReplaceDuplicatesTitle(idx,size),project){
        @Override protected String getMessage(){
          final String message=super.getMessage();
          return prompt != null ? message + prompt : message;
        }
      }
;
      promptDialog.show();
      final boolean allChosen=promptDialog.getExitCode() == FindManager.PromptResult.ALL;
      showAll.set(allChosen);
      if (allChosen && confirmDuplicatePrompt != null && prompt == null) {
        if (Messages.showOkCancelDialog(project,"In order to replace all occurrences method signature will be changed. Proceed?",CommonBundle.getWarningTitle(),Messages.getWarningIcon()) != DialogWrapper.OK_EXIT_CODE)         return true;
      }
      if (promptDialog.getExitCode() == FindManager.PromptResult.SKIP)       return false;
      if (promptDialog.getExitCode() == FindManager.PromptResult.CANCEL)       return true;
    }
  }
  HighlightManager.getInstance(project).removeSegmentHighlighter(editor,highlighters.get(0));
  final Runnable action=new Runnable(){
    public void run(){
      try {
        provider.processMatch(match);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
  ApplicationManager.getApplication().runWriteAction(action);
  return false;
}
