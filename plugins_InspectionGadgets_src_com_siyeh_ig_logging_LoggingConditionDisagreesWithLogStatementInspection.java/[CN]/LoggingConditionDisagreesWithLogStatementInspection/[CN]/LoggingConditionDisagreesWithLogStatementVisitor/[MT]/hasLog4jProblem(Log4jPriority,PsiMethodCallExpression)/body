{
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  Log4jPriority enabledFor=null;
  if ("isDebugEnabled".equals(methodName)) {
    enabledFor=Log4jPriority.DEBUG;
  }
 else   if ("isInfoEnabled".equals(methodName)) {
    enabledFor=Log4jPriority.INFO;
  }
 else   if ("isTraceEnabled".equals(methodName)) {
    enabledFor=Log4jPriority.TRACE;
  }
 else   if ("isEnabledFor".equals(methodName)) {
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiExpression[] arguments=argumentList.getExpressions();
    for (    PsiExpression argument : arguments) {
      if (!(argument instanceof PsiReferenceExpression)) {
        continue;
      }
      final PsiReferenceExpression argumentReference=(PsiReferenceExpression)argument;
      final PsiType type=argument.getType();
      if (!(type instanceof PsiClassType)) {
        continue;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (aClass == null) {
        continue;
      }
      final String qName=aClass.getQualifiedName();
      if (!"org.apache.log4j.Priority".equals(qName)) {
        continue;
      }
      final PsiElement argumentTarget=argumentReference.resolve();
      if (!(argumentTarget instanceof PsiField)) {
        continue;
      }
      final PsiField field=(PsiField)argumentTarget;
      final String name=field.getName();
      enabledFor=Log4jPriority.valueOf(name);
    }
  }
  return enabledFor != priority;
}
