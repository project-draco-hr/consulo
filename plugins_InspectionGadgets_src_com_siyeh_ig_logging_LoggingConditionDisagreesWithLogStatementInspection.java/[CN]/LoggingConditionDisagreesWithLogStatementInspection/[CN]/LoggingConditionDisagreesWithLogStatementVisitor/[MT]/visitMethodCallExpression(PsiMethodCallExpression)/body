{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  if (!loggingLevels.contains(referenceName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiExpressionStatement)) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  final PsiIfStatement ifStatement;
  if (grandParent instanceof PsiCodeBlock) {
    final PsiElement greatGrandParent=grandParent.getParent();
    if (!(greatGrandParent instanceof PsiBlockStatement)) {
      return;
    }
    final PsiElement greatGreatGrandParent=greatGrandParent.getParent();
    if (!(greatGreatGrandParent instanceof PsiIfStatement)) {
      return;
    }
    ifStatement=(PsiIfStatement)greatGreatGrandParent;
  }
 else   if (grandParent instanceof PsiIfStatement) {
    ifStatement=(PsiIfStatement)grandParent;
  }
 else {
    return;
  }
  PsiExpression condition=ifStatement.getCondition();
  if (condition instanceof PsiMethodCallExpression) {
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    if (!PsiTreeUtil.isAncestor(thenBranch,expression,false)) {
      return;
    }
  }
 else   if (condition instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)condition;
    if (!JavaTokenType.EXCL.equals(prefixExpression.getOperationTokenType())) {
      return;
    }
    final PsiStatement elseBranch=ifStatement.getElseBranch();
    if (!PsiTreeUtil.isAncestor(elseBranch,expression,false)) {
      return;
    }
    condition=prefixExpression.getOperand();
    if (!(condition instanceof PsiMethodCallExpression)) {
      return;
    }
  }
 else {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifier;
  final PsiElement target=referenceExpression.resolve();
  if (target == null) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)condition;
  final PsiReferenceExpression conditionMethodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression conditionQualifier=conditionMethodExpression.getQualifierExpression();
  if (!(conditionQualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression conditionReferenceExpression=(PsiReferenceExpression)conditionQualifier;
  final PsiElement conditionTarget=conditionReferenceExpression.resolve();
  if (!target.equals(conditionTarget)) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  final LoggingProblemChecker problemChecker=problemCheckers.get(qualifiedName);
  if (problemChecker == null || !problemChecker.hasLoggingProblem(referenceName,methodCallExpression)) {
    return;
  }
  registerMethodCallError(methodCallExpression,referenceName);
}
