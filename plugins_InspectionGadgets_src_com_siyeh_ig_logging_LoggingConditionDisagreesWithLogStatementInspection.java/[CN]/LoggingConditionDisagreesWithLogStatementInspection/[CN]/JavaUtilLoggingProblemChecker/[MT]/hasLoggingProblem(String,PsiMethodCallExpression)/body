{
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"isLoggable".equals(methodName)) {
    return false;
  }
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return false;
  }
  final PsiExpression argument=arguments[0];
  if (!(argument instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression argumentReference=(PsiReferenceExpression)argument;
  final PsiType type=argument.getType();
  if (!(type instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass aClass=classType.resolve();
  if (aClass == null) {
    return false;
  }
  final String qName=aClass.getQualifiedName();
  if (!"java.util.logging.Level".equals(qName)) {
    return false;
  }
  final PsiElement argumentTarget=argumentReference.resolve();
  if (!(argumentTarget instanceof PsiField)) {
    return false;
  }
  final PsiField field=(PsiField)argumentTarget;
  final String enabledFor=field.getName().toLowerCase();
  return enabledFor != priority;
}
