{
  final List<AntBuildTargetBase> list=new ArrayList<AntBuildTargetBase>();
  final AntDomProject project=model.getAntProject();
  final VirtualFile sourceFile=model.getBuildFile().getVirtualFile();
  if (project != null) {
    new Object(){
      private boolean myIsImported=false;
      private final Set<VirtualFile> myProcessed=new HashSet<VirtualFile>();
      private AntDomTarget myDefaultTarget=null;
      private void fillTargets(      List<AntBuildTargetBase> list,      AntBuildModelBase model,      AntDomProject project,      VirtualFile sourceFile){
        if (myProcessed.contains(sourceFile)) {
          return;
        }
        myProcessed.add(sourceFile);
        if (!myIsImported) {
          final GenericAttributeValue<Trinity<AntDomTarget,String,Map<String,AntDomTarget>>> defTarget=project.getDefaultTarget();
          if (defTarget != null) {
            final Trinity<AntDomTarget,String,Map<String,AntDomTarget>> trinity=defTarget.getValue();
            if (trinity != null) {
              myDefaultTarget=trinity.getFirst();
            }
          }
        }
        for (        final AntDomTarget target : project.getDeclaredTargets()) {
          list.add(new AntBuildTargetImpl(target,model,sourceFile,myIsImported,target.equals(myDefaultTarget)));
        }
        myIsImported=true;
        final Iterable<AntDomIncludingDirective> allIncludes=ContainerUtil.concat((Iterable<AntDomImport>)project.getDeclaredImports(),(Iterable<? extends AntDomInclude>)project.getDeclaredIncludes());
        for (        AntDomIncludingDirective incl : allIncludes) {
          final PsiFileSystemItem includedFile=incl.getFile().getValue();
          if (includedFile instanceof PsiFile) {
            final AntDomProject includedProject=AntSupport.getAntDomProject((PsiFile)includedFile);
            if (includedProject != null) {
              fillTargets(list,model,includedProject,includedFile.getContainingFile().getOriginalFile().getVirtualFile());
            }
          }
        }
      }
    }
.fillTargets(list,model,project,sourceFile);
  }
  return list;
}
