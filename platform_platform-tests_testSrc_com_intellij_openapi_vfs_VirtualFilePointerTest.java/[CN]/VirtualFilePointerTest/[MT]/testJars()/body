{
  final File tempDir=createTempDirectory();
  final File jarParent=new File(tempDir,"jarParent");
  jarParent.mkdir();
  final File jar=new File(jarParent,"x.jar");
  final File originalJar=new File(PathManagerEx.getTestDataPath() + "/psi/generics22/collect-2.2.jar".replace('/',File.separatorChar));
  FileUtil.copy(originalJar,jar);
  LocalFileSystem.getInstance().refreshAndFindFileByIoFile(jar);
  final VirtualFilePointer[] pointersToWatch=new VirtualFilePointer[2];
  final VirtualFilePointerListener listener=new VirtualFilePointerListener(){
    @Override public void beforeValidityChanged(    @NotNull VirtualFilePointer[] pointers){
      verifyPointersInCorrectState(pointersToWatch);
    }
    @Override public void validityChanged(    @NotNull VirtualFilePointer[] pointers){
      verifyPointersInCorrectState(pointersToWatch);
    }
  }
;
  final VirtualFilePointer jarParentPointer=createPointerByFile(jarParent,listener);
  final String pathInJar=jar.getPath().replace(File.separatorChar,'/') + JarFileSystem.JAR_SEPARATOR;
  final String jarUrl=VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL,pathInJar);
  final VirtualFilePointer jarPointer=myVirtualFilePointerManager.create(jarUrl,myProject,listener);
  pointersToWatch[0]=jarParentPointer;
  pointersToWatch[1]=jarPointer;
  assertTrue(jarParentPointer.isValid());
  assertTrue(jarPointer.isValid());
  jar.delete();
  jarParent.delete();
  refreshVFS();
  verifyPointersInCorrectState(pointersToWatch);
  assertFalse(jarParentPointer.isValid());
  assertFalse(jarPointer.isValid());
  UIUtil.dispatchAllInvocationEvents();
  jarParent.mkdir();
  FileUtil.copy(originalJar,jar);
  refreshVFS();
  verifyPointersInCorrectState(pointersToWatch);
  assertTrue(jarParentPointer.isValid());
  assertTrue(jarPointer.isValid());
  UIUtil.dispatchAllInvocationEvents();
  jar.delete();
  jarParent.delete();
  refreshVFS();
  UIUtil.dispatchAllInvocationEvents();
  verifyPointersInCorrectState(pointersToWatch);
  assertFalse(jarParentPointer.isValid());
  assertFalse(jarPointer.isValid());
  UIUtil.dispatchAllInvocationEvents();
}
