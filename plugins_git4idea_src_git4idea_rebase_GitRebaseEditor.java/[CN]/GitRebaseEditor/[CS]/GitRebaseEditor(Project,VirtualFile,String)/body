{
  super(project,true);
  myProject=project;
  myGitRoot=gitRoot;
  setTitle(GitBundle.getString("rebase.editor.title"));
  setOKButtonText(GitBundle.getString("rebase.editor.button"));
  if (SystemInfo.isWindows && file.startsWith(CYGDRIVE_PREFIX)) {
    final int prefixSize=CYGDRIVE_PREFIX.length();
    file=file.substring(prefixSize,prefixSize + 1) + ":" + file.substring(prefixSize + 1);
  }
  myFile=file;
  myTableModel=new MyTableModel();
  myTableModel.load(file);
  myCommitsTable.setModel(myTableModel);
  myCommitsTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  TableColumn actionColumn=myCommitsTable.getColumnModel().getColumn(MyTableModel.ACTION);
  actionColumn.setCellEditor(ComboBoxTableCellEditor.INSTANCE);
  actionColumn.setCellRenderer(ComboBoxTableCellRenderer.INSTANCE);
  myCommitsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      myViewButton.setEnabled(myCommitsTable.getSelectedRowCount() == 1);
      final ListSelectionModel selectionModel=myCommitsTable.getSelectionModel();
      myMoveUpButton.setEnabled(selectionModel.getMinSelectionIndex() > 0);
      myMoveDownButton.setEnabled(selectionModel.getMaxSelectionIndex() != -1 && selectionModel.getMaxSelectionIndex() < myTableModel.myEntries.size() - 1);
    }
  }
);
  myViewButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      int row=myCommitsTable.getSelectedRow();
      if (row < 0) {
        return;
      }
      GitRebaseEntry entry=myTableModel.myEntries.get(row);
      GitShowAllSubmittedFilesAction.showSubmittedFiles(project,entry.getCommit(),gitRoot,false,false);
    }
  }
);
  myMoveUpButton.addActionListener(new MoveUpDownActionListener(MoveDirection.up));
  myMoveDownButton.addActionListener(new MoveUpDownActionListener(MoveDirection.down));
  myTableModel.addTableModelListener(new TableModelListener(){
    public void tableChanged(    final TableModelEvent e){
      validateFields();
    }
  }
);
  init();
}
