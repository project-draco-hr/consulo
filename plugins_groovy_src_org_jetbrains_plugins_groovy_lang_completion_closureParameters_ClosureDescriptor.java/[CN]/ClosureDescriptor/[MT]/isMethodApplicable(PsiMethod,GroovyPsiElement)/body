{
  String name=String.valueOf(myMethod.get("name"));
  if (name == null || !name.equals(method.getName()))   return false;
  List<PsiType> types=new ArrayList<PsiType>();
  final Object params=myMethod.get("params");
  if (params instanceof Map) {
    boolean first=true;
    for (    Object paramName : ((Map)params).keySet()) {
      Object value=((Map)params).get(paramName);
      boolean isNamed=first && value instanceof List;
      first=false;
      String typeName=isNamed ? CommonClassNames.JAVA_UTIL_MAP : String.valueOf(value);
      types.add(convertToPsiType(typeName,place));
    }
  }
 else   if (params instanceof List) {
    for (    Object param : ((List)params)) {
      PsiTypeParameterList typeParameterList=method.getTypeParameterList();
      types.add(convertToPsiType(String.valueOf(param),typeParameterList != null ? typeParameterList : method));
    }
  }
  final boolean isConstructor=Boolean.TRUE.equals(myMethod.get("constructor"));
  final MethodSignature signature=MethodSignatureUtil.createMethodSignature(name,types.toArray(new PsiType[types.size()]),method.getTypeParameters(),PsiSubstitutor.EMPTY,isConstructor);
  final GrClosureSignature closureSignature=GrClosureSignatureUtil.createSignature(signature);
  if (method instanceof ClsMethodImpl)   method=((ClsMethodImpl)method).getSourceMirrorMethod();
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  final PsiType[] typeArray=new PsiType[parameters.length];
  ContainerUtil.map(parameters,new Function<PsiParameter,PsiType>(){
    @Override public PsiType fun(    PsiParameter parameter){
      return parameter.getType();
    }
  }
,typeArray);
  return GrClosureSignatureUtil.isSignatureApplicable(closureSignature,typeArray,place);
}
