{
  myCheckPolicy=checkPolicy;
  setRootVisible(false);
  setShowsRootHandles(true);
  setLineStyleAngled();
  TreeUtil.installActions(this);
  installRenderer(cellRenderer);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (isToggleEvent(e)) {
        TreePath treePath=getLeadSelectionPath();
        if (treePath == null)         return;
        final Object o=treePath.getLastPathComponent();
        if (!(o instanceof CheckedTreeNode))         return;
        CheckedTreeNode firstNode=(CheckedTreeNode)o;
        boolean checked=toggleNode(firstNode);
        TreePath[] selectionPaths=getSelectionPaths();
        for (int i=0; selectionPaths != null && i < selectionPaths.length; i++) {
          final TreePath selectionPath=selectionPaths[i];
          final Object o1=selectionPath.getLastPathComponent();
          if (!(o1 instanceof CheckedTreeNode))           continue;
          CheckedTreeNode node=(CheckedTreeNode)o1;
          checkNode(node,checked);
          ((DefaultTreeModel)getModel()).nodeChanged(node);
        }
        e.consume();
      }
    }
  }
);
  setSelectionRow(0);
  if (root != null) {
    setModel(new DefaultTreeModel(root));
  }
}
