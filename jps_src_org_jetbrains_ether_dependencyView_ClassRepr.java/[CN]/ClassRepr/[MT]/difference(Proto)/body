{
  final ClassRepr pastClass=(ClassRepr)past;
  int diff=super.difference(past).base();
  if (!superClass.equals(pastClass.superClass)) {
    diff|=Difference.SUPERCLASS;
  }
  final int d=diff;
  return new Diff(){
    @Override public Difference.Specifier<TypeRepr.AbstractType> interfaces(){
      return Difference.make(pastClass.interfaces,interfaces);
    }
    @Override public Difference.Specifier<TypeRepr.AbstractType> nestedClasses(){
      return Difference.make(pastClass.nestedClasses,nestedClasses);
    }
    @Override public Difference.Specifier<FieldRepr> fields(){
      return Difference.make(pastClass.fields,fields);
    }
    @Override public Difference.Specifier<MethodRepr> methods(){
      return Difference.make(pastClass.methods,methods);
    }
    @Override public Specifier<ElementType> targets(){
      return Difference.make(pastClass.targets,targets);
    }
    @Override public boolean retentionChanged(){
      return !((policy == null && pastClass.policy == RetentionPolicy.CLASS) || (policy == RetentionPolicy.CLASS && pastClass.policy == null) || (policy == pastClass.policy));
    }
    @Override public int base(){
      return d;
    }
  }
;
}
