{
  final ClassRepr pastClass=(ClassRepr)past;
  int diff=super.difference(past).base();
  if (!superClass.equals(pastClass.superClass)) {
    diff|=Difference.SUPERCLASS;
  }
  final int d=diff;
  return new Diff(){
    public Difference.Specifier<TypeRepr.AbstractType> interfaces(){
      return Difference.make(pastClass.interfaces,interfaces);
    }
    public Difference.Specifier<TypeRepr.AbstractType> nestedClasses(){
      return Difference.make(pastClass.nestedClasses,nestedClasses);
    }
    public Difference.Specifier<FieldRepr> fields(){
      return null;
    }
    public Difference.Specifier<MethodRepr> methods(){
      return null;
    }
    public int base(){
      return d;
    }
  }
;
}
