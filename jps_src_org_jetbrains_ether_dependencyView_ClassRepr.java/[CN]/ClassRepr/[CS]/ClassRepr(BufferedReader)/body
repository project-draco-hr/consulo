{
  super(r);
  fileName=StringCache.get(RW.readString(r));
  sourceFileName=StringCache.get(RW.readString(r));
  superClass=TypeRepr.reader.read(r);
  interfaces=(Set<TypeRepr.AbstractType>)RW.readMany(r,TypeRepr.reader,new HashSet<TypeRepr.AbstractType>());
  nestedClasses=(Set<TypeRepr.AbstractType>)RW.readMany(r,TypeRepr.reader,new HashSet<TypeRepr.AbstractType>());
  fields=(Set<FieldRepr>)RW.readMany(r,FieldRepr.reader,new HashSet<FieldRepr>());
  methods=(Set<MethodRepr>)RW.readMany(r,MethodRepr.reader,new HashSet<MethodRepr>());
  targets=(Set<ElementType>)RW.readMany(r,UsageRepr.AnnotationUsage.elementTypeReader,new HashSet<ElementType>());
  final String s=RW.readString(r);
  policy=s.length() == 0 ? null : RetentionPolicy.valueOf(s);
  outerClassName=StringCache.get(RW.readString(r));
  isLocal=RW.readString(r).equals("true");
}
