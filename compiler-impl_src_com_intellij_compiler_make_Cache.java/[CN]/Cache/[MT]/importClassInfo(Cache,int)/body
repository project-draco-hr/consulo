{
  try {
    final int fromClassId=fromCache.getClassId(qName);
    LOG.assertTrue(fromClassId != UNKNOWN);
    final ClassInfoView view=myViewPool.getClassInfoView(getClassId(qName));
    final int id=view.getRecordId();
    final ClassInfoView classInfoView=myViewPool.getClassInfoView(id);
    classInfoView.setQualifiedName(qName);
    classInfoView.setGenericSignature(fromCache.getGenericSignature(fromClassId));
    classInfoView.setPath(fromCache.getPath(fromClassId));
    final int superQualifiedName=fromCache.getSuperQualifiedName(fromClassId);
    LOG.assertTrue(qName != superQualifiedName);
    classInfoView.setSuperQualifiedName(superQualifiedName);
    classInfoView.setSuperInterfaces(fromCache.getSuperInterfaces(fromClassId));
    classInfoView.setSourceFileName(fromCache.getSourceFileName(fromClassId));
    classInfoView.setFlags(fromCache.getFlags(fromClassId));
    classInfoView.setRuntimeVisibleAnnotations(fromCache.getRuntimeVisibleAnnotations(fromClassId));
    classInfoView.setRuntimeInvisibleAnnotations(fromCache.getRuntimeInvisibleAnnotations(fromClassId));
    final int fromClassDeclarationId=fromCache.getClassDeclarationId(qName);
    final int[] fromFieldIds=fromCache.getFieldIds(fromClassDeclarationId);
    final int[] fromMethodIds=fromCache.getMethodIds(fromClassDeclarationId);
    final MemberInfo[] members=new MemberInfo[fromFieldIds.length + fromMethodIds.length];
    int currentMemberIndex=0;
    for (int idx=0; idx < fromFieldIds.length; idx++) {
      members[currentMemberIndex++]=fromCache.createFieldInfo(fromFieldIds[idx]);
    }
    for (int idx=0; idx < fromMethodIds.length; idx++) {
      final int methodId=fromMethodIds[idx];
      members[currentMemberIndex++]=fromCache.createMethodInfo(methodId);
    }
    updateMemberDeclarations(qName,members);
    registerClassId(qName,id);
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
