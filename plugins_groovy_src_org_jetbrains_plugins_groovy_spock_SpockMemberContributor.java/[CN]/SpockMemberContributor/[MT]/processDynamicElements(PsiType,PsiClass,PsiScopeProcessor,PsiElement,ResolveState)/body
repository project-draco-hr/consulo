{
  ClassHint classHint=processor.getHint(ClassHint.KEY);
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.PROPERTY)) {
    GrMethod method=PsiTreeUtil.getParentOfType(place,GrMethod.class);
    if (method == null)     return;
    if (aClass != method.getContainingClass())     return;
    Map<String,SpockVariableDescriptor> cachedValue=SpockUtils.getVariableMap(method);
    String nameHint=ResolveUtil.getNameHint(processor);
    if (nameHint == null) {
      for (      SpockVariableDescriptor spockVar : cachedValue.values()) {
        if (!processor.execute(spockVar.getVariable(),state))         return;
      }
    }
 else {
      SpockVariableDescriptor spockVar=cachedValue.get(nameHint);
      if (spockVar != null && spockVar.getNavigationElement() != place) {
        if (!processor.execute(spockVar.getVariable(),state))         return;
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.METHOD)) {
    if ("get_".equals(ResolveUtil.getNameHint(processor))) {
      GrLightMethodBuilder m=new GrLightMethodBuilder(aClass.getManager(),"get_");
      m.setReturnType(null);
      if (!processor.execute(m,state))       return;
    }
  }
}
