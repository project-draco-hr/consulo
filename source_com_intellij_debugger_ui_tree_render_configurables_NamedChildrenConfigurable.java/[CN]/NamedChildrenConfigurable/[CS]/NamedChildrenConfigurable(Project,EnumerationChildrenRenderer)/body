{
  myProject=project;
  myRenderer=renderer;
  myTableLabel.setLabelFor(myTable);
  getModel().addColumn("Name",(Object[])null);
  getModel().addColumn("Expression",(Object[])null);
  PsiClass psiClass=DebuggerUtils.findClass(myRenderer.getClassName(),myProject);
  myCompletionEditor=((DebuggerUtilsEx)DebuggerUtils.getInstance()).createEditor(myProject,psiClass,"NamedChildrenConfigurable");
  myTable.setDragEnabled(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  myTable.getColumn("Expression").setCellEditor(new AbstractTableCellEditor(){
    public Object getCellEditorValue(){
      return myCompletionEditor.getText();
    }
    public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      myCompletionEditor.setText((TextWithImports)value);
      return myCompletionEditor;
    }
  }
);
  myButtonAdd.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      getModel().addRow(new Object[]{"",DebuggerUtils.getInstance().createExpressionWithImports("")});
    }
  }
);
  myButtonRemove.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int selectedRow=myTable.getSelectedRow();
      if (selectedRow >= 0 && selectedRow < myTable.getRowCount()) {
        getModel().removeRow(selectedRow);
      }
    }
  }
);
  myButtonDown.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.moveSelectedItemsDown(myTable);
    }
  }
);
  myButtonUp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.moveSelectedItemsUp(myTable);
    }
  }
);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  updateButtons();
}
