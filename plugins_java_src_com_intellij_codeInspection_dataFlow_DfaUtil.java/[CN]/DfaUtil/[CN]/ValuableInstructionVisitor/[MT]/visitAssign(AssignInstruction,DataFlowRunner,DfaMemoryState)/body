{
  final Instruction nextInstruction=runner.getInstruction(instruction.getIndex() + 1);
  final DfaValue dfaSource=memState.pop();
  final DfaValue dfaDest=memState.pop();
  if (dfaDest instanceof DfaVariableValue) {
    DfaVariableValue var=(DfaVariableValue)dfaDest;
    final PsiExpression rightValue=instruction.getRExpression();
    final PsiElement parent=rightValue == null ? null : rightValue.getParent();
    final IElementType type=parent instanceof PsiAssignmentExpression ? ((PsiAssignmentExpression)parent).getOperationTokenType() : JavaTokenType.EQ;
    final PsiExpression prevValue=((ValuableDataFlowRunner.ValuableDfaVariableState)((ValuableDataFlowRunner.MyDfaMemoryState)memState).getVariableState(var)).myExpression;
    memState.setVarValue(var,dfaSource);
    final ValuableDataFlowRunner.ValuableDfaVariableState curState=(ValuableDataFlowRunner.ValuableDfaVariableState)((ValuableDataFlowRunner.MyDfaMemoryState)memState).getVariableState(var);
    final PsiExpression curValue=curState.myExpression;
    final PsiExpression nextValue;
    if (type == JavaTokenType.PLUSEQ && prevValue != null) {
      PsiExpression tmpExpression;
      try {
        tmpExpression=JavaPsiFacade.getElementFactory(myContext.getProject()).createExpressionFromText(prevValue.getText() + "+" + rightValue.getText(),rightValue);
      }
 catch (      Exception e) {
        tmpExpression=curValue == null ? rightValue : curValue;
      }
      nextValue=tmpExpression;
    }
 else {
      nextValue=curValue == null ? rightValue : curValue;
    }
    curState.myExpression=nextValue;
  }
  memState.push(dfaDest);
  return new DfaInstructionState[]{new DfaInstructionState(nextInstruction,memState)};
}
