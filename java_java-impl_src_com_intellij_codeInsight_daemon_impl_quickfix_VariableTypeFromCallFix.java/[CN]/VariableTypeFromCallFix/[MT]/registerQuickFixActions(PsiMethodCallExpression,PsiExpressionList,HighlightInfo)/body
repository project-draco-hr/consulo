{
  final JavaResolveResult result=methodCall.getMethodExpression().advancedResolve(false);
  PsiMethod method=(PsiMethod)result.getElement();
  final PsiSubstitutor substitutor=result.getSubstitutor();
  PsiExpression[] expressions=list.getExpressions();
  if (method == null || method.getParameterList().getParametersCount() != expressions.length)   return;
  for (int i=0; i < expressions.length; i++) {
    final PsiExpression expression=expressions[i];
    PsiType expressionType=expression.getType();
    if (expressionType instanceof PsiPrimitiveType) {
      expressionType=((PsiPrimitiveType)expressionType).getBoxedType(expression);
    }
    if (expressionType == null)     continue;
    final PsiParameter parameter=method.getParameterList().getParameters()[i];
    final PsiType formalParamType=parameter.getType();
    final PsiType parameterType=substitutor.substitute(formalParamType);
    if (parameterType.isAssignableFrom(expressionType))     continue;
    final PsiExpression qualifierExpression=methodCall.getMethodExpression().getQualifierExpression();
    if (!(qualifierExpression instanceof PsiReferenceExpression)) {
      continue;
    }
    final PsiElement resolved=((PsiReferenceExpression)qualifierExpression).resolve();
    if (resolved instanceof PsiVariable) {
      final PsiClass varClass=PsiUtil.resolveClassInType(((PsiVariable)resolved).getType());
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper();
      if (varClass != null) {
        final PsiSubstitutor psiSubstitutor=resolveHelper.inferTypeArguments(varClass.getTypeParameters(),new PsiParameter[]{parameter},new PsiExpression[]{expression},PsiSubstitutor.EMPTY,resolved,false);
        final PsiClassType appropriateVarType=JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass,psiSubstitutor);
        QuickFixAction.registerQuickFixAction(highlightInfo,new VariableTypeFromCallFix(appropriateVarType,(PsiVariable)resolved));
      }
    }
  }
}
