{
  final JavaResolveResult result=methodCall.getMethodExpression().advancedResolve(false);
  PsiMethod method=(PsiMethod)result.getElement();
  final PsiSubstitutor substitutor=result.getSubstitutor();
  PsiExpression[] expressions=list.getExpressions();
  if (method == null || method.getParameterList().getParametersCount() != expressions.length)   return;
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (int i=0; i < expressions.length; i++) {
    final PsiExpression expression=expressions[i];
    PsiType expressionType=expression.getType();
    if (expressionType instanceof PsiPrimitiveType) {
      expressionType=((PsiPrimitiveType)expressionType).getBoxedType(expression);
    }
    if (expressionType == null)     continue;
    final PsiParameter parameter=parameters[i];
    final PsiType formalParamType=parameter.getType();
    final PsiType parameterType=substitutor.substitute(formalParamType);
    if (parameterType.isAssignableFrom(expressionType))     continue;
    final PsiExpression qualifierExpression=methodCall.getMethodExpression().getQualifierExpression();
    if (qualifierExpression instanceof PsiReferenceExpression) {
      final PsiElement resolved=((PsiReferenceExpression)qualifierExpression).resolve();
      if (resolved instanceof PsiVariable) {
        final PsiType varType=((PsiVariable)resolved).getType();
        final PsiClass varClass=PsiUtil.resolveClassInType(varType);
        final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper();
        if (varClass != null) {
          final PsiSubstitutor psiSubstitutor=resolveHelper.inferTypeArguments(varClass.getTypeParameters(),parameters,expressions,PsiSubstitutor.EMPTY,resolved,DefaultParameterTypeInferencePolicy.INSTANCE);
          final PsiClassType appropriateVarType=JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass,psiSubstitutor);
          if (!varType.equals(appropriateVarType)) {
            QuickFixAction.registerQuickFixAction(highlightInfo,new VariableTypeFromCallFix(appropriateVarType,(PsiVariable)resolved));
          }
          break;
        }
      }
    }
    registerParameterTypeChange(highlightInfo,method,expression,parameterType);
  }
}
