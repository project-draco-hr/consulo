{
  final Map<Module,ModifiableRootModel> models=new LinkedHashMap<Module,ModifiableRootModel>();
  Project project=currentModule.getProject();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
    models.put(module,model);
  }
  ModifiableRootModel currentModel=models.get(currentModule);
  ModifiableRootModel toDependOnModel=models.get(toDependOn);
  Collection<Chunk<ModifiableRootModel>> nodesBefore=buildChunks(models);
  for (  Chunk<ModifiableRootModel> chunk : nodesBefore) {
    if (chunk.containsNode(toDependOnModel) && chunk.containsNode(currentModel))     return null;
  }
  try {
    currentModel.addModuleOrderEntry(toDependOn);
    Collection<Chunk<ModifiableRootModel>> nodesAfter=buildChunks(models);
    for (    Chunk<ModifiableRootModel> chunk : nodesAfter) {
      if (chunk.containsNode(toDependOnModel) && chunk.containsNode(currentModel)) {
        Iterator<ModifiableRootModel> nodes=chunk.getNodes().iterator();
        return Pair.create(nodes.next().getModule(),nodes.next().getModule());
      }
    }
  }
  finally {
    for (    ModifiableRootModel model : models.values()) {
      model.dispose();
    }
  }
  return null;
}
