{
  final ProjectRootManagerImpl projectRootManager=ProjectRootManagerImpl.getInstanceImpl(myProject);
  final ConfigurationException[] ex=new ConfigurationException[1];
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        final List<ModifiableRootModel> models=new ArrayList<ModifiableRootModel>(myModuleEditors.size());
        for (        final ModuleEditor moduleEditor : myModuleEditors) {
          final ModifiableRootModel model=moduleEditor.applyAndDispose();
          if (model != null) {
            models.add(model);
          }
        }
        myFacetsConfigurator.applyAndDispose();
        J2EEModuleUtilEx.checkJ2EEModulesAcyclic(models);
        final ModifiableRootModel[] rootModels=models.toArray(new ModifiableRootModel[models.size()]);
        projectRootManager.multiCommit(myModuleModel,rootModels);
        myFacetsConfigurator.commitFacets();
      }
 catch (      ConfigurationException e) {
        ex[0]=e;
      }
 finally {
        myFacetsConfigurator=new ProjectFacetsConfigurator();
        myModuleModel=ModuleManager.getInstance(myProject).getModifiableModel();
        for (        Module module : myModuleModel.getModules()) {
          if (!module.isDisposed()) {
            final ModuleEditor moduleEditor=getModuleEditor(module);
            if (moduleEditor != null) {
              final ModuleBuilder builder=moduleEditor.getModuleBuilder();
              if (builder != null) {
                builder.onModuleInitialized(module);
                builder.addSupport(module);
              }
            }
          }
        }
      }
    }
  }
);
  if (ex[0] != null) {
    throw ex[0];
  }
  if (!J2EEModuleUtilEx.checkDependentModulesOutputPathConsistency(myProject,J2EEModuleUtil.getAllJ2EEModules(myProject),true)) {
    throw new ConfigurationException(null);
  }
  ApplicationManager.getApplication().saveAll();
  myModified=false;
}
