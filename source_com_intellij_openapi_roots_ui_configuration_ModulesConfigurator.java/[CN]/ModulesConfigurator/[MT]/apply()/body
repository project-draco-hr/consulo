{
  final ProjectRootManagerImpl projectRootManager=ProjectRootManagerImpl.getInstanceImpl(myProject);
  final List<ModifiableRootModel> models=new ArrayList<ModifiableRootModel>(myModuleEditors.size());
  for (  final ModuleEditor moduleEditor : myModuleEditors) {
    final ModifiableRootModel model=moduleEditor.applyAndDispose();
    if (model != null) {
      models.add(model);
    }
  }
  J2EEModuleUtilEx.checkJ2EEModulesAcyclic(models);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        final ModifiableRootModel[] rootModels=models.toArray(new ModifiableRootModel[models.size()]);
        projectRootManager.multiCommit(myModuleModel,rootModels);
      }
  finally {
        myModuleModel=ModuleManager.getInstance(myProject).getModifiableModel();
        for (        Module module : myModuleModel.getModules()) {
          if (!module.isDisposed()) {
            final ModuleEditor moduleEditor=getModuleEditor(module);
            if (moduleEditor != null) {
              final ModuleBuilder builder=moduleEditor.getModuleBuilder();
              if (builder != null) {
                builder.addSupport(module);
              }
            }
          }
        }
      }
    }
  }
);
  if (!J2EEModuleUtilEx.checkDependentModulesOutputPathConsistency(myProject,J2EEModuleUtil.getAllJ2EEModules(myProject),true)) {
    throw new ConfigurationException(null);
  }
  ApplicationManager.getApplication().saveAll();
  myModified=false;
}
