{
  final ProjectRootManagerImpl projectRootManager=ProjectRootManagerImpl.getInstanceImpl(myProject);
  final List<ModifiableRootModel> models=new ArrayList<ModifiableRootModel>(myModuleEditors.size());
  for (  final ModuleEditor moduleEditor : myModuleEditors) {
    final ModifiableRootModel model=moduleEditor.applyAndDispose();
    if (model != null) {
      models.add(model);
    }
  }
  J2EEModuleUtilEx.checkJ2EEModulesAcyclic(models);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        final LanguageLevel newLevel=(LanguageLevel)myLanguageLevelCombo.getSelectedItem();
        projectRootManager.setLanguageLevel(newLevel);
        ((ProjectEx)myProject).setSavePathsRelative(myRbRelativePaths.isSelected());
        try {
          myProjectJdkConfigurable.apply();
        }
 catch (        ConfigurationException e) {
        }
        String canonicalPath=myProjectCompilerOutput.getText();
        if (canonicalPath != null && canonicalPath.length() > 0) {
          try {
            canonicalPath=new File(canonicalPath).getCanonicalPath();
          }
 catch (          IOException e) {
          }
          canonicalPath=FileUtil.toSystemIndependentName(canonicalPath);
          projectRootManager.setCompilerOutputUrl(VfsUtil.pathToUrl(canonicalPath));
        }
 else {
          projectRootManager.setCompilerOutputPointer(null);
        }
        final ModifiableRootModel[] rootModels=models.toArray(new ModifiableRootModel[models.size()]);
        projectRootManager.multiCommit(myModuleModel,rootModels);
      }
  finally {
        myModuleModel=ModuleManager.getInstance(myProject).getModifiableModel();
      }
    }
  }
);
  if (!J2EEModuleUtilEx.checkDependentModulesOutputPathConsistency(myProject,J2EEModuleUtil.getAllJ2EEModules(myProject),true)) {
    throw new ConfigurationException(null);
  }
  ApplicationManager.getApplication().saveAll();
}
