{
  final List<ModifiableRootModel> result=new ArrayList<ModifiableRootModel>();
  for (  ModuleEditor moduleEditor : myModuleEditors) {
    result.add(moduleEditor.getModifiableRootModel());
  }
  final GraphGenerator<ModifiableRootModel> graphGenerator=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<ModifiableRootModel>(){
    public Collection<ModifiableRootModel> getNodes(){
      return result;
    }
    public Iterator<ModifiableRootModel> getIn(    final ModifiableRootModel model){
      final Module[] modules=model.getModuleDependencies();
      final List<ModifiableRootModel> dependencies=new ArrayList<ModifiableRootModel>();
      for (      Module module : modules) {
        dependencies.add(getModuleEditor(module).getModifiableRootModel());
      }
      return dependencies.iterator();
    }
  }
));
  final Graph<Chunk<ModifiableRootModel>> graph=ModuleCompilerUtil.toChunkGraph(graphGenerator);
  final Collection<Chunk<ModifiableRootModel>> chunks=graph.getNodes();
  String cycles="";
  int count=0;
  for (  Chunk<ModifiableRootModel> chunk : chunks) {
    final Set<ModifiableRootModel> modules=chunk.getNodes();
    String cycle="";
    for (    ModifiableRootModel model : modules) {
      cycle+=", " + model.getModule().getName();
    }
    if (modules.size() > 1) {
      @NonNls final String br="<br>";
      cycles+=br + cycle.substring(2);
      count++;
    }
  }
  @NonNls final String leftBrace="<html>";
  @NonNls final String rightBrace="</html>";
  String warningMessage=leftBrace + (count > 0 ? ProjectBundle.message("module.circular.dependency.warning",cycles,count) : "") + rightBrace;
  myWarningLabel.setIcon(warningMessage.length() > 0 ? Messages.getWarningIcon() : null);
  myWarningLabel.setText(warningMessage);
  myWarningLabel.repaint();
}
