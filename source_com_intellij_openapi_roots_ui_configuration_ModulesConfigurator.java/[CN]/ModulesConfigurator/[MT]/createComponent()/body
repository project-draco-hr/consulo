{
  final JPanel mainPanel=new MyJPanel();
  mainPanel.setPreferredSize(new Dimension(700,500));
  myModuleListPanel=new JPanel(new BorderLayout());
  myLanguageLevelCombo=new ComboBox();
  myLanguageLevelCombo.addItem(LanguageLevel.JDK_1_3);
  myLanguageLevelCombo.addItem(LanguageLevel.JDK_1_4);
  myLanguageLevelCombo.addItem(LanguageLevel.JDK_1_5);
  myLanguageLevelCombo.setRenderer(new MyDefaultListCellRenderer());
  myLanguageLevelCombo.setSelectedItem(ProjectRootManagerEx.getInstanceEx(myProject).getLanguageLevel());
  myRbRelativePaths=new JRadioButton("Use relative path");
  myRbAbsolutePaths=new JRadioButton("Use absolute path");
  ButtonGroup buttonGroup=new ButtonGroup();
  buttonGroup.add(myRbRelativePaths);
  buttonGroup.add(myRbAbsolutePaths);
  if (((ProjectEx)myProject).isSavePathsRelative()) {
    myRbRelativePaths.setSelected(true);
  }
 else {
    myRbAbsolutePaths.setSelected(true);
  }
  myModuleEditorsList=new JList(new DefaultListModel());
  myModuleEditorsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myModuleEditorsList.setCellRenderer(new ModulesListCellRenderer());
  final JScrollPane modulesListScrollPane=ScrollPaneFactory.createScrollPane(myModuleEditorsList);
  final Dimension preferredSize=new Dimension(130,100);
  modulesListScrollPane.setPreferredSize(preferredSize);
  modulesListScrollPane.setMinimumSize(preferredSize);
  myModuleContentsPanel=new JPanel(new CardLayout());
  myModuleContentsPanel.add(new JPanel(),EMPTY_PANEL_ID);
  final DefaultActionGroup moduleActionsGroup=new DefaultActionGroup();
  final AddModuleAction addModuleAction=new AddModuleAction(mainPanel);
  addModuleAction.registerCustomShortcutSet(CommonShortcuts.INSERT,myModuleEditorsList);
  moduleActionsGroup.add(addModuleAction);
  final RemoveModuleAction removeModuleAction=new RemoveModuleAction();
  removeModuleAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myModuleEditorsList);
  moduleActionsGroup.add(removeModuleAction);
  myModuleListPanel.add(new JLabel("Modules:"),BorderLayout.NORTH);
  myModuleListPanel.add(new ToolbarPanel(modulesListScrollPane,moduleActionsGroup),BorderLayout.CENTER);
  final Splitter modulesContentSplitter=new Splitter(false);
  modulesContentSplitter.setHonorComponentsMinimumSize(true);
  modulesContentSplitter.setShowDividerControls(true);
  modulesContentSplitter.setProportion(0.20f);
  modulesContentSplitter.setFirstComponent(myModuleListPanel);
  modulesContentSplitter.setSecondComponent(myModuleContentsPanel);
  mainPanel.add(modulesContentSplitter,new GridBagConstraints(0,GridBagConstraints.RELATIVE,4,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(2,0,0,0),0,0));
  mainPanel.add(new JLabel("For files outside project file directory:"),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  mainPanel.add(myRbAbsolutePaths,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  mainPanel.add(myRbRelativePaths,new GridBagConstraints(2,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  final Box horizontalBox=Box.createHorizontalBox();
  horizontalBox.add(new JLabel("Language level for project (effective on restart): "));
  horizontalBox.add(Box.createHorizontalStrut(5));
  horizontalBox.add(myLanguageLevelCombo);
  mainPanel.add(horizontalBox,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  myWarningLabel=new JLabel("");
  myWarningLabel.setUI(new MultiLineLabelUI());
  mainPanel.add(myWarningLabel,new GridBagConstraints(3,GridBagConstraints.RELATIVE,1,2,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,6,0,0),0,0));
  myModuleEditorsList.addListSelectionListener(new ListSelectionListener(){
    int mySelectedIndex=-1;
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final ModuleEditor previousEditor=getEditorAt(mySelectedIndex);
      final ModuleEditor selectedEditor=getSelectedEditor();
      if (selectedEditor != null) {
        showModuleEditor(selectedEditor,previousEditor != null ? previousEditor.getSelectedTabName() : null);
      }
      mySelectedIndex=myModuleEditorsList.getSelectedIndex();
    }
  }
);
  resetModuleEditors();
  return mainPanel;
}
