{
  try {
    final ModuleEditor selectedEditor=getSelectedEditor();
    String question;
    if (myModuleEditors.size() == 1) {
      question=ProjectBundle.message("module.remove.last.confirmation");
    }
 else {
      question=ProjectBundle.message("module.remove.confirmation",selectedEditor.getModule().getName());
    }
    int result=Messages.showYesNoDialog(myModuleEditorsList,question,ProjectBundle.message("module.remove.confirmation.title"),Messages.getQuestionIcon());
    if (result != 0) {
      return;
    }
    myModuleEditors.remove(selectedEditor);
    removeModuleEditorUIComponent(selectedEditor);
    final DefaultListModel listModel=(DefaultListModel)myModuleEditorsList.getModel();
    final int selectedIndex=myModuleEditorsList.getSelectedIndex();
    listModel.removeElementAt(selectedIndex);
    if (selectedIndex < listModel.getSize()) {
      myModuleEditorsList.setSelectedIndex(selectedIndex);
    }
 else     if (listModel.getSize() > 0) {
      myModuleEditorsList.setSelectedIndex(0);
    }
    final ModuleEditor newSelectedEditor=getSelectedEditor();
    final String selectedTabName=selectedEditor.getSelectedTabName();
    showModuleEditor(newSelectedEditor,selectedTabName);
    final Module moduleToRemove=selectedEditor.getModule();
    List<ModifiableRootModel> modifiableRootModels=new ArrayList<ModifiableRootModel>();
    for (    final ModuleEditor moduleEditor : myModuleEditors) {
      if (moduleToRemove.equals(moduleEditor.getModule())) {
        continue;
      }
      final ModifiableRootModel modifiableRootModel=moduleEditor.getModifiableRootModelProxy();
      modifiableRootModels.add(modifiableRootModel);
    }
    final ModifiableRootModel model=selectedEditor.dispose();
    ModuleDeleteProvider.removeModule(moduleToRemove,model,modifiableRootModels,myModuleModel);
    myModuleEditorsList.revalidate();
    processModuleCountChanged(myModuleEditors.size() + 1,myModuleEditors.size());
  }
  finally {
    myModuleEditorsList.requestFocus();
  }
}
