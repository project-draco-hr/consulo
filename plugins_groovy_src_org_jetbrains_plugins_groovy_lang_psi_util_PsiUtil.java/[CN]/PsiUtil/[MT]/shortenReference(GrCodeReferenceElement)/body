{
  final GrCodeReferenceElement qualifier=ref.getQualifier();
  if (qualifier != null && (PsiTreeUtil.getParentOfType(ref,GrDocMemberReference.class) != null || PsiTreeUtil.getParentOfType(ref,GrDocComment.class) == null) && PsiTreeUtil.getParentOfType(ref,GrImportStatement.class) == null && PsiTreeUtil.getParentOfType(ref,GroovyCodeFragment.class) == null) {
    final PsiElement resolved=ref.resolve();
    if (resolved instanceof PsiClass) {
      ref.setQualifier(null);
      if (ref.isReferenceTo(resolved))       return;
      final GroovyFileBase file=(GroovyFileBase)ref.getContainingFile();
      final PsiClass clazz=(PsiClass)resolved;
      final String qName=clazz.getQualifiedName();
      if (qName != null) {
        if (mayInsertImport(ref)) {
          final GrImportStatement added=file.addImportForClass(clazz);
          if (!ref.isReferenceTo(resolved)) {
            file.removeImport(added);
            ref.setQualifier(qualifier);
          }
        }
      }
    }
  }
}
