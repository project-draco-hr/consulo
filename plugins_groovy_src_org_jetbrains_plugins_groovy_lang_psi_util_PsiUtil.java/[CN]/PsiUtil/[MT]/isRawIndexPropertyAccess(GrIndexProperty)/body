{
  final GrExpression qualifier=expr.getSelectedExpression();
  final PsiType qualifierType=qualifier.getType();
  if (qualifierType instanceof PsiClassType) {
    if (InheritanceUtil.isInheritor(qualifierType,CommonClassNames.JAVA_UTIL_LIST)) {
      return com.intellij.psi.util.PsiUtil.extractIterableTypeParameter(qualifierType,false) == null;
    }
    if (InheritanceUtil.isInheritor(qualifierType,CommonClassNames.JAVA_UTIL_MAP)) {
      return com.intellij.psi.util.PsiUtil.substituteTypeParameter(qualifierType,CommonClassNames.JAVA_UTIL_MAP,1,false) == null;
    }
    PsiClassType classType=(PsiClassType)qualifierType;
    final PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
    GrExpression[] arguments=expr.getArgumentList().getExpressionArguments();
    PsiType[] argTypes=new PsiType[arguments.length];
    for (int i=0; i < arguments.length; i++) {
      PsiType argType=arguments[i].getType();
      if (argType == null)       argType=TypesUtil.getJavaLangObject(expr);
      argTypes[i]=argType;
    }
    MethodResolverProcessor processor=new MethodResolverProcessor("getAt",expr,false,qualifierType,argTypes,PsiType.EMPTY_ARRAY);
    final PsiClass qClass=resolveResult.getElement();
    if (qClass != null) {
      qClass.processDeclarations(processor,ResolveState.initial().put(PsiSubstitutor.KEY,PsiSubstitutor.EMPTY),null,expr);
    }
    ResolveUtil.processNonCodeMethods(qualifierType,processor,expr,false);
    final GroovyResolveResult[] candidates=processor.getCandidates();
    PsiType type=null;
    if (candidates.length == 1) {
      final PsiElement element=candidates[0].getElement();
      if (element instanceof PsiMethod) {
        type=getSmartReturnType((PsiMethod)element);
      }
    }
    return isRawType(type,resolveResult.getSubstitutor());
  }
  return false;
}
