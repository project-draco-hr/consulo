{
  PsiElementFactory factory=JavaPsiFacade.getInstance(place.getProject()).getElementFactory();
  PsiElement parent=place.getParent();
  if (parent instanceof GrCallExpression) {
    List<PsiType> result=new ArrayList<PsiType>();
    GrCallExpression call=(GrCallExpression)parent;
    if (!forConstructor) {
      GrNamedArgument[] namedArgs=call.getNamedArguments();
      if (namedArgs.length > 0) {
        result.add(factory.createTypeByFQClassName("java.util.HashMap",place.getResolveScope()));
      }
    }
    GrExpression[] expressions=call.getExpressionArguments();
    for (    GrExpression expression : expressions) {
      PsiType type=getArgumentType(expression);
      if (type == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(call));
      }
 else {
        result.add(type);
      }
    }
    GrClosableBlock[] closures=call.getClosureArguments();
    for (    GrClosableBlock closure : closures) {
      PsiType closureType=closure.getType();
      if (closureType != null) {
        result.add(closureType);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
 else   if (parent instanceof GrApplicationStatement) {
    GrExpression[] args=((GrApplicationStatement)parent).getArguments();
    PsiType[] result=new PsiType[args.length];
    for (int i=0; i < result.length; i++) {
      PsiType argType=getArgumentType(args[i]);
      if (argType == null) {
        result[i]=nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject((GroovyPsiElement)parent);
      }
 else {
        result[i]=argType;
      }
    }
    return result;
  }
 else   if (parent instanceof GrConstructorInvocation || parent instanceof GrEnumConstant) {
    final GrArgumentList argList=(GrArgumentList)((GrCall)parent).getArgumentList();
    if (argList == null)     return PsiType.EMPTY_ARRAY;
    List<PsiType> result=new ArrayList<PsiType>();
    if (argList.getNamedArguments().length > 0) {
      result.add(factory.createTypeByFQClassName("java.util.HashMap",place.getResolveScope()));
    }
    GrExpression[] expressions=argList.getExpressionArguments();
    for (    GrExpression expression : expressions) {
      PsiType type=getArgumentType(expression);
      if (type == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(argList));
      }
 else {
        result.add(type);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
  return null;
}
