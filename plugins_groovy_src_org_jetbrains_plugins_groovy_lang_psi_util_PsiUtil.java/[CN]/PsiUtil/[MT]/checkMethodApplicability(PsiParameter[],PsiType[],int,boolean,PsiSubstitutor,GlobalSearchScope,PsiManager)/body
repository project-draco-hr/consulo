{
  int argIndex=0;
  for (int i=0; i < parameters.length - 1; i++) {
    if (isOptionalParameter(parameters[i])) {
      if (optionalParametersCount == 0)       continue;
      optionalParametersCount--;
    }
    final PsiType parameterType=substitutor.substitute(parameters[i].getType());
    if (argIndex >= argumentTypes.length)     return false;
    final PsiType argType=argumentTypes[argIndex++];
    if (!TypesUtil.isAssignableByMethodCallConversion(parameterType,argType,manager,scope)) {
      return false;
    }
  }
  final PsiParameter lastParameter=parameters[parameters.length - 1];
  final PsiType lastParameterType=substitutor.substitute(lastParameter.getType());
  if (hasVarArg) {
    if (argIndex == argumentTypes.length - 1 && TypesUtil.isAssignableByMethodCallConversion(lastParameterType,argumentTypes[argIndex],manager,scope)) {
      return true;
    }
    final PsiType arrayType=((PsiArrayType)lastParameterType).getComponentType();
    for (; argIndex < argumentTypes.length; argIndex++) {
      if (!TypesUtil.isAssignableByMethodCallConversion(arrayType,argumentTypes[argIndex],manager,scope))       return false;
    }
  }
 else {
    if (!isOptionalParameter(lastParameter) || optionalParametersCount > 0) {
      if (argIndex >= argumentTypes.length)       return false;
      final PsiType argType=argumentTypes[argIndex++];
      if (!TypesUtil.isAssignableByMethodCallConversion(lastParameterType,argType,manager,scope))       return false;
    }
  }
  return argIndex == argumentTypes.length;
}
