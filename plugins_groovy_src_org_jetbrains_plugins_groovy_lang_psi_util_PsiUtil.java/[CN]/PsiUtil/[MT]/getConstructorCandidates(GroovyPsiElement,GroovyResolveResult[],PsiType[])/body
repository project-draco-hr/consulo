{
  for (  GroovyResolveResult classResult : classCandidates) {
    final PsiElement element=classResult.getElement();
    if (element instanceof PsiClass) {
      final GroovyPsiElement context=classResult.getCurrentFileResolveContext();
      PsiClass clazz=(PsiClass)element;
      String className=clazz.getName();
      PsiType thisType=JavaPsiFacade.getElementFactory(place.getProject()).createType(clazz,classResult.getSubstitutor());
      final MethodResolverProcessor processor=new MethodResolverProcessor(className,place,true,thisType,argTypes,PsiType.EMPTY_ARRAY);
      PsiSubstitutor substitutor=classResult.getSubstitutor();
      final ResolveState state=ResolveState.initial().put(PsiSubstitutor.KEY,substitutor).put(ResolverProcessor.RESOLVE_CONTEXT,context);
      List<GroovyResolveResult> constructors=ResolveUtil.getAllClassConstructors(clazz,place,substitutor);
      if (!constructors.isEmpty()) {
        for (        GroovyResolveResult result : constructors) {
          processor.execute(result.getElement(),state.put(PsiSubstitutor.KEY,result.getSubstitutor()));
        }
        return processor.getCandidates();
      }
    }
  }
  return GroovyResolveResult.EMPTY_ARRAY;
}
