{
  List<GroovyResolveResult> constructorResults=new ArrayList<GroovyResolveResult>();
  for (  GroovyResolveResult classResult : classCandidates) {
    final PsiElement element=classResult.getElement();
    if (element instanceof PsiClass) {
      final GroovyPsiElement context=classResult.getCurrentFileResolveContext();
      PsiClass clazz=(PsiClass)element;
      String className=clazz.getName();
      PsiType thisType=JavaPsiFacade.getInstance(place.getProject()).getElementFactory().createType(clazz,classResult.getSubstitutor());
      final MethodResolverProcessor processor=new MethodResolverProcessor(className,place,true,thisType,argTypes,PsiType.EMPTY_ARRAY);
      PsiSubstitutor substitutor=classResult.getSubstitutor();
      final ResolveState state=ResolveState.initial().put(PsiSubstitutor.KEY,substitutor).put(ResolverProcessor.RESOLVE_CONTEXT,context);
      final PsiMethod[] methods=clazz.getMethods();
      boolean toBreak=true;
      for (      PsiMethod method : methods) {
        if (method.isConstructor() && !processor.execute(method,state)) {
          toBreak=false;
          break;
        }
      }
      NonCodeMembersContributor.runContributors(thisType,processor,place,state);
      ContainerUtil.addAll(constructorResults,processor.getCandidates());
      if (!toBreak)       break;
    }
  }
  return constructorResults.toArray(new GroovyResolveResult[constructorResults.size()]);
}
