{
  PsiElement parent=place.getParent();
  if (parent instanceof GrCallExpression) {
    List<PsiType> result=new ArrayList<PsiType>();
    GrCallExpression call=(GrCallExpression)parent;
    GrNamedArgument[] namedArgs=call.getNamedArguments();
    if (namedArgs.length > 0) {
      result.add(createMapType(place.getResolveScope()));
    }
    GrExpression[] expressions=call.getExpressionArguments();
    for (    GrExpression expression : expressions) {
      PsiType type=expression.getType();
      if (type == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(call));
      }
 else {
        result.add(type);
      }
    }
    GrClosableBlock[] closures=call.getClosureArguments();
    for (    GrClosableBlock closure : closures) {
      PsiType closureType=closure.getType();
      if (closureType != null) {
        result.add(closureType);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
 else   if (parent instanceof GrAnonymousClassDefinition) {
    final GrAnonymousClassDefinition anonymous=(GrAnonymousClassDefinition)parent;
    final GrArgumentList argList=anonymous.getArgumentListGroovy();
    List<PsiType> result=new ArrayList<PsiType>();
    GrNamedArgument[] namedArgs=argList.getNamedArguments();
    if (namedArgs.length > 0) {
      result.add(createMapType(place.getResolveScope()));
    }
    GrExpression[] expressions=argList.getExpressionArguments();
    for (    GrExpression expression : expressions) {
      PsiType type=expression.getType();
      if (type == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(argList));
      }
 else {
        result.add(type);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
 else   if (parent instanceof GrApplicationStatement) {
    final GrApplicationStatement call=(GrApplicationStatement)parent;
    GrExpression[] args=call.getArguments();
    final GrArgumentList argList=call.getArgumentList();
    GrNamedArgument[] namedArgs=argList != null ? argList.getNamedArguments() : GrNamedArgument.EMPTY_ARRAY;
    final ArrayList<PsiType> result=new ArrayList<PsiType>();
    if (namedArgs.length > 0) {
      result.add(createMapType(place.getResolveScope()));
    }
    for (    GrExpression arg : args) {
      PsiType argType=arg.getType();
      if (argType == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(parent));
      }
 else {
        result.add(argType);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
 else   if (parent instanceof GrConstructorInvocation || parent instanceof GrEnumConstant) {
    final GrArgumentList argList=((GrCall)parent).getArgumentList();
    if (argList == null)     return PsiType.EMPTY_ARRAY;
    List<PsiType> result=new ArrayList<PsiType>();
    if (argList.getNamedArguments().length > 0) {
      result.add(createMapType(place.getResolveScope()));
    }
    GrExpression[] expressions=argList.getExpressionArguments();
    for (    GrExpression expression : expressions) {
      PsiType type=expression.getType();
      if (type == null) {
        result.add(nullAsBottom ? PsiType.NULL : TypesUtil.getJavaLangObject(argList));
      }
 else {
        result.add(type);
      }
    }
    return result.toArray(new PsiType[result.size()]);
  }
  return null;
}
