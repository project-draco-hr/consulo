{
  if (owner instanceof PsiMember) {
    if (place instanceof GrReferenceExpression) {
      GrExpression qualifier=((GrReferenceExpression)place).getQualifierExpression();
      if (qualifier != null) {
        PsiClass containingClass=((PsiMember)owner).getContainingClass();
        final boolean isStatic=owner.hasModifierProperty(PsiModifier.STATIC) && !(ResolveUtil.isInUseScope(resolveContext));
        if (qualifier instanceof GrReferenceExpression) {
          if ("class".equals(((GrReferenceExpression)qualifier).getReferenceName())) {
            final PsiType type=qualifier.getType();
            if (type instanceof PsiClassType) {
              final PsiClass psiClass=((PsiClassType)type).resolve();
              if (psiClass != null && CommonClassNames.JAVA_LANG_CLASS.equals(psiClass.getQualifiedName())) {
                final PsiType[] params=((PsiClassType)type).getParameters();
                if (params.length == 1 && params[0] instanceof PsiClassType) {
                  if (place.getManager().areElementsEquivalent(containingClass,((PsiClassType)params[0]).resolve())) {
                    return owner.hasModifierProperty(GrModifier.STATIC);
                  }
                }
              }
            }
          }
          PsiElement qualifierResolved=((GrReferenceExpression)qualifier).resolve();
          if (qualifierResolved instanceof PsiClass || qualifierResolved instanceof PsiPackage) {
            if (owner instanceof PsiClass) {
              return true;
            }
            if (containingClass == null) {
              return true;
            }
            if (isStatic) {
              return true;
            }
            final String qname=containingClass.getQualifiedName();
            if (qname != null && qname.startsWith("java.")) {
              if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname) || CommonClassNames.JAVA_LANG_CLASS.equals(qname)) {
                return true;
              }
              if (containingClass.isInterface()) {
                PsiClass javaLangClass=JavaPsiFacade.getInstance(place.getProject()).findClass(CommonClassNames.JAVA_LANG_CLASS,place.getResolveScope());
                if (javaLangClass != null && javaLangClass.isInheritor(containingClass,true)) {
                  return true;
                }
              }
            }
            return false;
          }
        }
 else         if (qualifier instanceof GrThisReferenceExpression && ((GrThisReferenceExpression)qualifier).getQualifier() == null) {
          final boolean isInStatic=isInStaticContext((GrThisReferenceExpression)qualifier);
          if (containingClass != null && CommonClassNames.JAVA_LANG_CLASS.equals(containingClass.getQualifiedName())) {
            return !(owner.hasModifierProperty(GrModifier.STATIC) && !CodeInsightSettings.getInstance().SHOW_STATIC_AFTER_INSTANCE);
          }
 else           if (isInStatic)           return owner.hasModifierProperty(GrModifier.STATIC);
        }
        if (owner instanceof PsiClass) {
          return false;
        }
        return !(isStatic && !CodeInsightSettings.getInstance().SHOW_STATIC_AFTER_INSTANCE);
      }
 else {
        if (((PsiMember)owner).getContainingClass() == null)         return true;
        if (owner instanceof GrVariable && !(owner instanceof GrField))         return true;
        if (owner.hasModifierProperty(GrModifier.STATIC))         return true;
        PsiElement stopAt=resolveContext != null ? PsiTreeUtil.findCommonParent(place,resolveContext) : null;
        while (place != null && place != stopAt && !(place instanceof GrMember)) {
          if (place instanceof PsiFile)           break;
          place=place.getParent();
        }
        if (place == null || place instanceof PsiFile || place == stopAt)         return true;
        if (place instanceof GrTypeDefinition) {
          return !(((GrTypeDefinition)place).hasModifierProperty(GrModifier.STATIC) || ((GrTypeDefinition)place).getContainingClass() == null);
        }
        return !((GrMember)place).hasModifierProperty(GrModifier.STATIC);
      }
    }
  }
  return true;
}
