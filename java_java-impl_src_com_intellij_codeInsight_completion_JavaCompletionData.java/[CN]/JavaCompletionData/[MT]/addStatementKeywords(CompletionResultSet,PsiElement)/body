{
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.SWITCH),TailTypes.SWITCH_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.WHILE),TailTypes.WHILE_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.DO),TailType.createSimpleTailType('{')));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.FOR),TailTypes.FOR_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.IF),TailTypes.IF_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.TRY),TailType.createSimpleTailType('{')));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.THROW),TailType.SPACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.NEW),TailType.SPACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.ASSERT),TailType.SPACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.SYNCHRONIZED),TailTypes.SYNCHRONIZED_LPARENTH));
  TailType returnTail=getReturnTail(position);
  LookupElement ret=createKeyword(position,PsiKeyword.RETURN);
  if (returnTail != TailType.NONE) {
    ret=new OverrideableSpace(ret,returnTail);
  }
  variant.addElement(ret);
}
