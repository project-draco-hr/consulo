{
{
    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new NotFilter(new ScopeFilter(new EnumOrAnnotationTypeFilter())),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">"))));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.addCompletion(PsiKeyword.EXTENDS);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    variant.excludeScopeClass(PsiTypeParameter.class);
    registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY),new NotFilter(new BeforeElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">"))),new NotFilter(new ScopeFilter(new InterfaceFilter())));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.addCompletion(PsiKeyword.IMPLEMENTS);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiElement.class,psiElement().afterLeaf(psiElement(PsiIdentifier.class).afterLeaf(psiElement().withText(string().oneOf(",","<")).withParent(PsiTypeParameterList.class))));
    variant.addCompletion(PsiKeyword.EXTENDS,TailType.SPACE);
    registerVariant(variant);
  }
}
