{
  boolean inCast=psiElement().afterLeaf(psiElement().withText("(").withParent(psiElement(PsiParenthesizedExpression.class,PsiTypeCastExpression.class))).accepts(position);
  boolean typeFragment=position.getContainingFile() instanceof PsiTypeCodeFragment && PsiTreeUtil.prevVisibleLeaf(position) == null;
  boolean declaration=DECLARATION_START.accepts(position);
  if (START_FOR.accepts(position) || isInsideParameterList(position) && !AFTER_DOT.accepts(position) || VARIABLE_AFTER_FINAL.accepts(position) || inCast || declaration || typeFragment || isStatementPosition(position)) {
    for (    String primitiveType : PRIMITIVE_TYPES) {
      LookupElement keyword=createKeyword(position,primitiveType);
      result.addElement(inCast || typeFragment ? keyword : new OverrideableSpace(keyword,TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
  }
  if (declaration) {
    result.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.VOID),TailType.HUMBLE_SPACE_BEFORE_WORD));
  }
 else   if (typeFragment && ((PsiTypeCodeFragment)position.getContainingFile()).isVoidValid()) {
    result.addElement(createKeyword(position,PsiKeyword.VOID));
  }
}
