{
  new LeftNeighbour(new AndFilter(new TextFilter("("),new ParentElementFilter(new OrFilter(new ClassFilter(PsiParenthesizedExpression.class),new ClassFilter(PsiTypeCastExpression.class)))));
  boolean inCast=psiElement().afterLeaf(psiElement().withText("(").withParent(psiElement(PsiParenthesizedExpression.class,PsiTypeCastExpression.class))).accepts(position);
  boolean declaration=DECLARATION_START.isAcceptable(position,position) || psiElement().withParents(PsiJavaCodeReferenceElement.class,PsiTypeElement.class,PsiMember.class).accepts(position) || psiElement().withParents(PsiJavaCodeReferenceElement.class,PsiTypeElement.class,PsiClassLevelDeclarationStatement.class).accepts(position);
  if (START_FOR.accepts(position) || INSIDE_PARAMETER_LIST.accepts(position) && !AFTER_DOT.accepts(position) || VARIABLE_AFTER_FINAL.accepts(position) || inCast || declaration) {
    for (    String primitiveType : PRIMITIVE_TYPES) {
      LookupElement keyword=createKeyword(position,primitiveType);
      result.addElement(inCast ? keyword : new OverrideableSpace(keyword));
    }
  }
  if (declaration) {
    result.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.VOID)));
  }
}
