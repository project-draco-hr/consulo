{
  final long started=myDebugTime ? System.nanoTime() : 0;
  if (myMemoryLoader != null) {
    JarMemoryLoader loader=myMemoryLoader.get();
    if (loader != null) {
      Resource resource=loader.getResource(name);
      if (resource != null)       return resource;
    }
  }
  ZipFile file=null;
  try {
    file=acquireZipFile();
    if (file == null)     return null;
    ZipEntry entry=file.getEntry(name);
    if (entry != null) {
      ++hits;
      if (hits % 1000 == 0 && UrlClassLoader.doDebug) {
        UrlClassLoader.debug("Exists jar loader: misses:" + misses + ", hits:"+ hits);
      }
      return new MyResource(entry,new URL(getBaseURL(),name));
    }
    if (misses % 1000 == 0 && UrlClassLoader.doDebug) {
      UrlClassLoader.debug("Missed " + name + " from jar:"+ myURL);
    }
    ++misses;
  }
 catch (  Exception e) {
    return null;
  }
 finally {
    try {
      releaseZipFile(file);
    }
 catch (    IOException ignored) {
    }
    final long doneFor=myDebugTime ? System.nanoTime() - started : 0;
    if (doneFor > NS_THRESHOLD) {
      System.out.println(doneFor / 1000000 + " ms for jar loader get resource:" + name);
    }
  }
  return null;
}
