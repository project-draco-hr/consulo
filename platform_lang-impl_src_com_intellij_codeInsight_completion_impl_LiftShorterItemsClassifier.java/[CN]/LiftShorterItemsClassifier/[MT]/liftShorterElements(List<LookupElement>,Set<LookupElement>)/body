{
  final Set<LookupElement> srcSet=new HashSet<LookupElement>(source);
  final Iterable<List<LookupElement>> classified=myNext.classify(source);
  final Set<LookupElement> processed=new HashSet<LookupElement>();
  final ArrayList<List<LookupElement>> result=new ArrayList<List<LookupElement>>();
  for (  List<LookupElement> list : classified) {
    final ArrayList<LookupElement> group=new ArrayList<LookupElement>();
    for (    LookupElement element : list) {
      if (processed.add(element)) {
        final List<String> prefixes=new SmartList<String>();
        for (        String string : getAllLookupStrings(element)) {
          prefixes.addAll(myPrefixes.get(string));
        }
        Collections.sort(prefixes);
        for (        String prefix : prefixes) {
          for (          LookupElement shorterElement : myElements.get(prefix)) {
            if (srcSet.contains(shorterElement) && processed.add(shorterElement)) {
              lifted.add(shorterElement);
              if (group.isEmpty()) {
                result.add(Collections.singletonList(shorterElement));
              }
 else {
                group.add(shorterElement);
              }
            }
          }
        }
        group.add(element);
      }
    }
    result.add(group);
  }
  return result;
}
