{
  final Set<LookupElement> srcSet=new THashSet<LookupElement>(source instanceof Collection ? ((Collection)source).size() : myCount,TObjectHashingStrategy.IDENTITY);
  ContainerUtil.addAll(srcSet,source);
  final Set<LookupElement> processed=new THashSet<LookupElement>(srcSet.size(),TObjectHashingStrategy.IDENTITY);
  final Set<LookupElement[]> arraysProcessed=new THashSet<LookupElement[]>(myInterned.size(),TObjectHashingStrategy.IDENTITY);
  final boolean forSorting=context.get(CompletionLookupArranger.PURE_RELEVANCE) != Boolean.TRUE;
  final Iterable<LookupElement> next=myNext.classify(source,context);
  return new Iterable<LookupElement>(){
    @Override public Iterator<LookupElement> iterator(){
      Iterator<LookupElement> base=FilteringIterator.create(next.iterator(),new Condition<LookupElement>(){
        @Override public boolean value(        LookupElement element){
          return processed.add(element);
        }
      }
);
      return new FlatteningIterator<LookupElement,LookupElement>(base){
        @Override protected Iterator<LookupElement> createValueIterator(        LookupElement element){
          List<LookupElement> shorter=addShorterElements(srcSet,processed,arraysProcessed,null,myToLiftForPreselection.get(element));
          if (forSorting) {
            shorter=addShorterElements(srcSet,processed,arraysProcessed,shorter,myToLiftForSorting.get(element));
          }
          if (shorter != null) {
            if (lifted != null) {
              lifted.addAll(shorter);
            }
            return ContainerUtil.concat(myNext.classify(shorter,context),Collections.singletonList(element)).iterator();
          }
          return Collections.singletonList(element).iterator();
        }
      }
;
    }
  }
;
}
