{
  final Set<LookupElement> srcSet=new THashSet<LookupElement>(source instanceof Collection ? ((Collection)source).size() : myCount,TObjectHashingStrategy.IDENTITY);
  ContainerUtil.addAll(srcSet,source);
  final Set<LookupElement> processed=new THashSet<LookupElement>(srcSet.size(),TObjectHashingStrategy.IDENTITY);
  final Set<LookupElement[]> arraysProcessed=new THashSet<LookupElement[]>(myInterned.size(),TObjectHashingStrategy.IDENTITY);
  boolean forSorting=context.get(CompletionLookupArranger.PURE_RELEVANCE) != Boolean.TRUE;
  final List<LookupElement> result=new ArrayList<LookupElement>(srcSet.size());
  for (  LookupElement element : myNext.classify(source,context)) {
    if (processed.add(element)) {
      List<LookupElement> shorter=addShorterElements(srcSet,processed,arraysProcessed,null,myToLiftForPreselection.get(element));
      if (forSorting) {
        shorter=addShorterElements(srcSet,processed,arraysProcessed,shorter,myToLiftForSorting.get(element));
      }
      if (shorter != null) {
        lifted.addAll(shorter);
        ContainerUtil.addAll(result,myNext.classify(shorter,context));
      }
      result.add(element);
    }
  }
  return result;
}
