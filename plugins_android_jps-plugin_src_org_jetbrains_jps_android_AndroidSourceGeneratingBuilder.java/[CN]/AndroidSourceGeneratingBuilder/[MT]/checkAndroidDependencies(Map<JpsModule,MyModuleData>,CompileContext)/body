{
  for (  Map.Entry<JpsModule,MyModuleData> entry : moduleDataMap.entrySet()) {
    final JpsModule module=entry.getKey();
    final MyModuleData moduleData=entry.getValue();
    final JpsAndroidModuleExtension extension=moduleData.getAndroidExtension();
    final Pair<String,File> manifestMergerProp=AndroidJpsUtil.getProjectPropertyValue(extension,AndroidCommonUtils.ANDROID_MANIFEST_MERGER_PROPERTY);
    if (manifestMergerProp != null && Boolean.parseBoolean(manifestMergerProp.getFirst())) {
      final String message="[" + module.getName() + "] Manifest merging is not supported. Please, reconfigure your manifest files";
      final String propFilePath=manifestMergerProp.getSecond().getPath();
      context.processMessage(new CompilerMessage(ANDROID_VALIDATOR,BuildMessage.Kind.WARNING,message,propFilePath));
    }
    if (extension.isLibrary()) {
      continue;
    }
    for (    JpsDependencyElement item : JpsJavaExtensionService.getInstance().getDependencies(module,JpsJavaClasspathKind.PRODUCTION_RUNTIME,false)) {
      if (item instanceof JpsModuleDependency) {
        final JpsModule depModule=((JpsModuleDependency)item).getModule();
        if (depModule != null) {
          final JpsAndroidModuleExtension depExtension=AndroidJpsUtil.getExtension(depModule);
          if (depExtension != null && !depExtension.isLibrary()) {
            String message="Suspicious module dependency " + module.getName() + " -> "+ depModule.getName()+ ": Android application module depends on other application module. Possibly, you should ";
            if (AndroidJpsUtil.isMavenizedModule(depModule)) {
              message+="change packaging type of module " + depModule.getName() + " to 'apklib' in pom.xml file or ";
            }
            message+="change dependency scope to 'Provided'.";
            context.processMessage(new CompilerMessage(ANDROID_VALIDATOR,BuildMessage.Kind.WARNING,message));
          }
        }
      }
    }
  }
}
