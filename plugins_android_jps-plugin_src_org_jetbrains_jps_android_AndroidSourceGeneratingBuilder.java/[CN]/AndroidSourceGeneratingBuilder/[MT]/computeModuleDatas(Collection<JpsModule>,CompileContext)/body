{
  final Map<JpsModule,MyModuleData> moduleDataMap=new HashMap<JpsModule,MyModuleData>();
  boolean success=true;
  for (  JpsModule module : modules) {
    final JpsAndroidModuleExtension extension=AndroidJpsUtil.getExtension(module);
    if (extension == null) {
      continue;
    }
    final AndroidPlatform platform=AndroidJpsUtil.getAndroidPlatform(module,context,BUILDER_NAME);
    if (platform == null) {
      success=false;
      continue;
    }
    final File manifestFile=AndroidJpsUtil.getManifestFileForCompilationPath(extension);
    if (manifestFile == null || !manifestFile.exists()) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,AndroidJpsBundle.message("android.jps.errors.manifest.not.found",module.getName())));
      success=false;
      continue;
    }
    final String packageName=parsePackageNameFromManifestFile(manifestFile);
    if (packageName == null || packageName.length() == 0) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,AndroidJpsBundle.message("android.jps.errors.package.not.specified",module.getName())));
      success=false;
      continue;
    }
    if (!AndroidCommonUtils.contains2Identifiers(packageName)) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,extension.isLibrary() ? BuildMessage.Kind.WARNING : BuildMessage.Kind.ERROR,AndroidJpsBundle.message("android.jps.errors.incorrect.package.name",module.getName())));
      success=false;
      continue;
    }
    moduleDataMap.put(module,new MyModuleData(platform,extension,manifestFile,packageName));
  }
  return success ? moduleDataMap : null;
}
