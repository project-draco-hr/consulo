{
  context.processMessage(new ProgressMessage("Processing AIDL files..."));
  boolean success=true;
  for (  Map.Entry<File,AndroidFacet> entry : files.entrySet()) {
    final File file=entry.getKey();
    final Module module=entry.getValue().getModule();
    final String filePath=file.getPath();
    final MyModuleData moduleData=moduleDataMap.get(module);
    if (!LOG.assertTrue(moduleData != null)) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Internal error"));
      success=false;
      continue;
    }
    final File outputDirectory=moduleData.getOutputDirectory();
    final File aidlOutputDirectory=new File(outputDirectory,"generated-aidl");
    final IAndroidTarget target=moduleData.getAndroidTarget();
    try {
      final File[] sourceRoots=getSourceRootsForModuleAndDependencies(module);
      final String[] sourceRootPaths=toPaths(sourceRoots);
      final String packageName=computePackageForFile(context,file);
      if (packageName == null) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot compute package for file",filePath));
        success=false;
        continue;
      }
      final File outputFile=new File(aidlOutputDirectory,packageName.replace('.',File.separatorChar) + File.separator + FileUtil.getNameWithoutExtension(file)+ ".java");
      final String outputFilePath=outputFile.getPath();
      final Map<AndroidCompilerMessageKind,List<String>> messages=AndroidIdl.execute(target,filePath,outputFilePath,sourceRootPaths);
      addMessages(context,messages,filePath);
      if (messages.get(AndroidCompilerMessageKind.ERROR).size() > 0) {
        success=false;
        continue;
      }
      final String moduleName=getCannonicalModuleName(module);
      final SourceToOutputMapping sourceToOutputMap=context.getDataManager().getSourceToOutputMap(moduleName,false);
      sourceToOutputMap.update(filePath,outputFilePath);
    }
 catch (    final IOException e) {
      reportExceptionError(context,filePath,e);
      success=false;
    }
  }
  return success;
}
