{
  TextAttributes attr=new TextAttributes(null,null,null,null,Font.BOLD);
  final RangeHighlighter lineHighlighter=myLogEditor.getMarkupModel().addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,attr);
  Color color=notification.getType() == NotificationType.ERROR ? Color.red : notification.getType() == NotificationType.WARNING ? Color.yellow : Color.green;
  lineHighlighter.setErrorStripeMarkColor(color);
  lineHighlighter.setErrorStripeTooltip(message);
  lineHighlighter.setGutterIconRenderer(new GutterIconRenderer(){
    @NotNull @Override public Icon getIcon(){
      return IconLoader.getIcon("/general/reset.png");
    }
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(    Object obj){
      return this == obj;
    }
    @Override public int hashCode(){
      return 0;
    }
    @Override public String getTooltipText(){
      return "Mark as read";
    }
    @Override public boolean isNavigateAction(){
      return true;
    }
    @Override public AnAction getClickAction(){
      return new AnAction(){
        @Override public void actionPerformed(        AnActionEvent e){
          myProjectModel.removeNotification(notification);
        }
      }
;
    }
  }
);
  myProjectModel.removeHandlers.put(notification,new Runnable(){
    @Override public void run(){
      myLogEditor.getMarkupModel().removeHighlighter(lineHighlighter);
    }
  }
);
}
