{
  final MarkupModel markupModel=myLogEditor.getValue().getMarkupModel();
  TextAttributes bold=new TextAttributes(null,null,null,null,Font.BOLD);
  final RangeHighlighter lineHighlighter=markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,bold);
  Color color=notification.getType() == NotificationType.ERROR ? Color.red : notification.getType() == NotificationType.WARNING ? Color.yellow : Color.green;
  lineHighlighter.setErrorStripeMarkColor(color);
  lineHighlighter.setErrorStripeTooltip(message);
  myProjectModel.removeHandlers.put(notification,new Runnable(){
    @Override public void run(){
      markupModel.removeHighlighter(lineHighlighter);
      TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(ConsoleViewContentType.LOG_EXPIRED_ENTRY);
      markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,attributes);
      TextAttributes italic=new TextAttributes(null,null,null,null,Font.ITALIC);
      for (      RangeHighlighter highlighter : myHyperlinkSupport.getValue().findAllHyperlinksOnLine(line)) {
        markupModel.addRangeHighlighter(highlighter.getStartOffset(),highlighter.getEndOffset(),HighlighterLayer.CARET_ROW + 2,italic,HighlighterTargetArea.EXACT_RANGE);
        myHyperlinkSupport.getValue().removeHyperlink(highlighter);
      }
    }
  }
);
}
