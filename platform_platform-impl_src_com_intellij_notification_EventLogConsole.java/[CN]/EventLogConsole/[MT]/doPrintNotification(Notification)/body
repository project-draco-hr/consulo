{
  if (myLogEditor.isDisposed()) {
    return;
  }
  Document document=myLogEditor.getDocument();
  boolean scroll=document.getTextLength() == myLogEditor.getCaretModel().getOffset();
  append(document,DateFormat.getTimeInstance(DateFormat.MEDIUM).format(notification.getCreationTime()) + " ");
  EventLog.LogEntry pair=EventLog.formatForLog(notification);
  final NotificationType type=notification.getType();
  TextAttributesKey key=type == NotificationType.ERROR ? ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY : type == NotificationType.INFORMATION ? ConsoleViewContentType.NORMAL_OUTPUT_KEY : ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY;
  int msgStart=document.getTextLength();
  String message=pair.message;
  append(document,message);
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key);
  int layer=HighlighterLayer.CARET_ROW + 1;
  myLogEditor.getMarkupModel().addRangeHighlighter(msgStart,document.getTextLength(),layer,attributes,HighlighterTargetArea.EXACT_RANGE);
  for (  Pair<TextRange,HyperlinkInfo> link : pair.links) {
    myHyperlinkSupport.addHyperlink(link.first.getStartOffset() + msgStart,link.first.getEndOffset() + msgStart,null,link.second);
  }
  append(document,"\n");
  if (scroll) {
    myLogEditor.getCaretModel().moveToOffset(document.getTextLength());
    myLogEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  }
  if (notification.isImportant()) {
    highlightNotification(notification,message,document.getLineCount() - 2);
  }
}
