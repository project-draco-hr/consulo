{
  final MarkupModel markupModel=getConsoleEditor().getMarkupModel();
  TextAttributes bold=new TextAttributes(null,null,null,null,Font.BOLD);
  final RangeHighlighter colorHighlighter=markupModel.addRangeHighlighter(titleOffset,titleOffset + titleLength,HighlighterLayer.CARET_ROW + 1,bold,HighlighterTargetArea.EXACT_RANGE);
  Color color=notification.getType() == NotificationType.ERROR ? JBColor.RED : notification.getType() == NotificationType.WARNING ? JBColor.YELLOW : JBColor.GREEN;
  colorHighlighter.setErrorStripeMarkColor(color);
  colorHighlighter.setErrorStripeTooltip(message);
  final Runnable removeHandler=new Runnable(){
    @Override public void run(){
      if (colorHighlighter.isValid()) {
        markupModel.removeHighlighter(colorHighlighter);
      }
      TextAttributes italic=new TextAttributes(null,null,null,null,Font.ITALIC);
      for (int line=startLine; line < endLine; line++) {
        for (        RangeHighlighter highlighter : myHyperlinkSupport.getValue().findAllHyperlinksOnLine(line)) {
          markupModel.addRangeHighlighter(highlighter.getStartOffset(),highlighter.getEndOffset(),HighlighterLayer.CARET_ROW + 2,italic,HighlighterTargetArea.EXACT_RANGE);
          myHyperlinkSupport.getValue().removeHyperlink(highlighter);
        }
      }
    }
  }
;
  if (!notification.isExpired()) {
    myProjectModel.removeHandlers.put(notification,removeHandler);
  }
 else {
    removeHandler.run();
  }
}
