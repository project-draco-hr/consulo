{
  Project project=myProjectModel.getProject();
  final EditorEx editor=ConsoleViewUtil.setupConsoleEditor(project,false,false);
  editor.getSettings().setFoldingOutlineShown(true);
  editor.getSettings().setWhitespacesShown(false);
  installNotificationsFont(editor);
  myProjectModel.getProject().getMessageBus().connect().subscribe(ProjectManager.TOPIC,new ProjectManagerAdapter(){
    @Override public void projectClosed(    Project project){
      if (project == myProjectModel.getProject()) {
        EditorFactory.getInstance().releaseEditor(editor);
      }
    }
  }
);
  ((EditorMarkupModel)editor.getMarkupModel()).setErrorStripeVisible(true);
  final ClearLogAction clearLog=new ClearLogAction(this);
  clearLog.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.CONSOLE_CLEAR_ALL).getShortcutSet(),editor.getContentComponent());
  editor.setContextMenuGroupId(null);
  editor.addEditorMouseListener(new EditorPopupHandler(){
    public void invokePopup(    final EditorMouseEvent event){
      final ActionManager actionManager=ActionManager.getInstance();
      DefaultActionGroup actions=createPopupActions(actionManager,clearLog,editor,event);
      final ActionPopupMenu menu=actionManager.createActionPopupMenu(ActionPlaces.EDITOR_POPUP,actions);
      final MouseEvent mouseEvent=event.getMouseEvent();
      menu.getComponent().show(mouseEvent.getComponent(),mouseEvent.getX(),mouseEvent.getY());
    }
  }
);
  return editor;
}
