{
  final MarkupModel markupModel=myLogEditor.getValue().getMarkupModel();
  TextAttributes bold=new TextAttributes(null,null,null,null,Font.BOLD);
  final List<RangeHighlighter> lineColors=new ArrayList<RangeHighlighter>();
  for (int line=line1; line < line2; line++) {
    final RangeHighlighter lineHighlighter=markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,bold);
    Color color=notification.getType() == NotificationType.ERROR ? JBColor.RED : notification.getType() == NotificationType.WARNING ? JBColor.YELLOW : JBColor.GREEN;
    lineHighlighter.setErrorStripeMarkColor(color);
    lineHighlighter.setErrorStripeTooltip(message);
    lineColors.add(lineHighlighter);
  }
  final Document document=myLogEditor.getValue().getDocument();
  final Runnable removeHandler=new Runnable(){
    @Override public void run(){
      TextAttributes expired=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(ConsoleViewContentType.LOG_EXPIRED_ENTRY);
      TextAttributes italic=new TextAttributes(null,null,null,null,Font.ITALIC);
      for (      RangeHighlighter colorHighlighter : lineColors) {
        if (colorHighlighter.isValid()) {
          int line=document.getLineNumber(colorHighlighter.getStartOffset());
          markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,expired);
          for (          RangeHighlighter highlighter : myHyperlinkSupport.getValue().findAllHyperlinksOnLine(line)) {
            markupModel.addRangeHighlighter(highlighter.getStartOffset(),highlighter.getEndOffset(),HighlighterLayer.CARET_ROW + 2,italic,HighlighterTargetArea.EXACT_RANGE);
            myHyperlinkSupport.getValue().removeHyperlink(highlighter);
          }
        }
        markupModel.removeHighlighter(colorHighlighter);
      }
    }
  }
;
  if (!notification.isExpired()) {
    myProjectModel.removeHandlers.put(notification,removeHandler);
  }
 else {
    removeHandler.run();
  }
}
