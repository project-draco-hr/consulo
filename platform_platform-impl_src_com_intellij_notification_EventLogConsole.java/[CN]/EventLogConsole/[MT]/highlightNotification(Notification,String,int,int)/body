{
  final MarkupModel markupModel=myLogEditor.getValue().getMarkupModel();
  TextAttributes bold=new TextAttributes(null,null,null,null,Font.BOLD);
  final List<RangeHighlighter> lineColors=new ArrayList<RangeHighlighter>();
  for (int line=line1; line < line2; line++) {
    final RangeHighlighter lineHighlighter=markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,bold);
    Color color=notification.getType() == NotificationType.ERROR ? Color.red : notification.getType() == NotificationType.WARNING ? Color.yellow : Color.green;
    lineHighlighter.setErrorStripeMarkColor(color);
    lineHighlighter.setErrorStripeTooltip(message);
    lineColors.add(lineHighlighter);
  }
  myProjectModel.removeHandlers.put(notification,new Runnable(){
    @Override public void run(){
      for (      RangeHighlighter color : lineColors) {
        markupModel.removeHighlighter(color);
      }
      TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(ConsoleViewContentType.LOG_EXPIRED_ENTRY);
      for (int line=line1; line < line2; line++) {
        markupModel.addLineHighlighter(line,HighlighterLayer.CARET_ROW + 1,attributes);
      }
      TextAttributes italic=new TextAttributes(null,null,null,null,Font.ITALIC);
      for (int line=line1; line < line2; line++) {
        for (        RangeHighlighter highlighter : myHyperlinkSupport.getValue().findAllHyperlinksOnLine(line)) {
          markupModel.addRangeHighlighter(highlighter.getStartOffset(),highlighter.getEndOffset(),HighlighterLayer.CARET_ROW + 2,italic,HighlighterTargetArea.EXACT_RANGE);
          myHyperlinkSupport.getValue().removeHyperlink(highlighter);
        }
      }
    }
  }
);
}
