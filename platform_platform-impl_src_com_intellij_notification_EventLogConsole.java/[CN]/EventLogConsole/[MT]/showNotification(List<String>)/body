{
  clearNMore();
  myNMoreHighlighters=new ArrayList<RangeHighlighter>();
  EditorEx editor=(EditorEx)getConsoleEditor();
  List<RangeHighlighterEx> highlighters=ContainerUtil.mapNotNull(ids,new Function<String,RangeHighlighterEx>(){
    @Override public RangeHighlighterEx fun(    String id){
      return EventLogConsole.this.findHighlighter(id);
    }
  }
);
  if (!highlighters.isEmpty()) {
    editor.getCaretModel().moveToOffset(highlighters.get(0).getStartOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_UP);
    List<Point> ranges=new ArrayList<Point>();
    Point currentRange=null;
    DocumentEx document=editor.getDocument();
    for (    RangeHighlighterEx highlighter : highlighters) {
      int startLine=document.getLineNumber(highlighter.getStartOffset());
      int endLine=document.getLineNumber(highlighter.getEndOffset()) + 1;
      if (currentRange != null && startLine - 1 == currentRange.y) {
        currentRange.y=endLine;
      }
 else {
        ranges.add(currentRange=new Point(startLine,endLine));
      }
    }
    TextAttributes attributes=new TextAttributes(null,ColorUtil.mix(editor.getBackgroundColor(),new Color(0x808080),0.1),null,EffectType.BOXED,Font.PLAIN);
    MarkupModelEx markupModel=editor.getMarkupModel();
    for (    Point range : ranges) {
      int start=document.getLineStartOffset(range.x);
      int end=document.getLineStartOffset(range.y);
      myNMoreHighlighters.add(markupModel.addRangeHighlighter(start,end,HighlighterLayer.CARET_ROW + 2,attributes,HighlighterTargetArea.EXACT_RANGE));
    }
  }
}
