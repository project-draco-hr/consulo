{
  final boolean myStatic=method.hasModifierProperty(PsiModifier.STATIC);
  List<MethodSignatureBackedByPsiMethod> result=new ArrayList<MethodSignatureBackedByPsiMethod>();
  final EjbMethodRole role=J2EERolesUtil.getEjbRole(method);
  if (role instanceof EjbImplMethodRole) {
    final PsiMethod[] ejbDeclarations=EjbUtil.findEjbDeclarations(method);
    for (    PsiMethod ejbDeclaration : ejbDeclarations) {
      result.add(MethodSignatureBackedByPsiMethod.create(ejbDeclaration,PsiSubstitutor.EMPTY));
    }
  }
  Map<MethodSignature,HierarchicalMethodSignatureImpl> signaturesMap=getSignaturesMap(parentClass);
  HierarchicalMethodSignature signature=signaturesMap.get(method.getSignature(PsiSubstitutor.EMPTY));
  PsiResolveHelper helper=method.getManager().getResolveHelper();
  if (signature == null) {
    return result;
  }
  PsiMethod hisMethod=signature.getMethod();
  if (parentClass.equals(hisMethod.getContainingClass())) {
    List<HierarchicalMethodSignature> superSignatures=signature.getSuperSignatures();
    for (    HierarchicalMethodSignature superSignature : superSignatures) {
      PsiMethod superMethod=superSignature.getMethod();
      boolean hisStatic=superMethod.hasModifierProperty(PsiModifier.STATIC);
      if (myStatic != hisStatic)       continue;
      if (allowStaticMethod || !hisStatic) {
        if (helper.isAccessible(superMethod,method,null)) {
          result.add(superSignature);
        }
      }
    }
  }
 else {
    if (helper.isAccessible(hisMethod,method,null)) {
      boolean hisStatic=hisMethod.hasModifierProperty(PsiModifier.STATIC);
      if (hisStatic == myStatic && (allowStaticMethod || !hisStatic)) {
        result.add(signature);
      }
    }
  }
  return result;
}
