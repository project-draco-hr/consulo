{
  boolean isNewSignature=true;
  for (int i=stack.size() - 1; i >= 0; i--) {
    HierarchicalMethodSignatureImpl existing=stack.get(i);
    final PsiMethod hisMethod=existing.getMethod();
    final PsiClass hisClass=hisMethod.getContainingClass();
    if (!hisMethod.isConstructor() && !aClass.equals(hisClass) && !(hisClass.isInterface() && "java.lang.Object".equals(aClass.getQualifiedName()) && !method.hasModifierProperty(PsiModifier.PUBLIC))&& PsiUtil.isAccessible(method,hisMethod,hisMethod.getContainingClass())&& MethodSignatureUtil.isSubsignature(signature,existing)) {
      existing.addSuperSignature(signatureHierarchical);
      isNewSignature=false;
      break;
    }
  }
  if (isNewSignature) {
    result.put(signature,signatureHierarchical);
  }
}
