{
  PsiMethod superMethod=superSignatureHierarchical.getMethod();
  PsiClass superClass=superMethod.getContainingClass();
  if (!superMethod.isConstructor() && !aClass.equals(superClass) && !(aClass.isInterface() && "java.lang.Object".equals(superClass.getQualifiedName()) && !superMethod.hasModifierProperty(PsiModifier.PUBLIC))&& PsiUtil.isAccessible(superMethod,aClass,aClass)&& MethodSignatureUtil.isSubsignature(superSignatureHierarchical,hierarchicalMethodSignature)) {
    return true;
  }
  return false;
}
