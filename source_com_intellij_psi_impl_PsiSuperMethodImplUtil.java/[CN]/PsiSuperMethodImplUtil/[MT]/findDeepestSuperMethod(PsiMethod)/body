{
  if (method.isConstructor())   return null;
  if (method.hasModifierProperty(PsiModifier.STATIC))   return null;
  if (method.hasModifierProperty(PsiModifier.PRIVATE))   return null;
  PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return null;
  }
  final PsiMethod[] allMethods;
  PsiMethod[] ejbDeclarations=EjbUtil.findEjbDeclarations(method);
  boolean isEjbInherited=J2EERolesUtil.getEjbRole(method) instanceof EjbImplMethodRole && ejbDeclarations.length != 0;
  if (isEjbInherited) {
    allMethods=ejbDeclarations;
  }
 else {
    allMethods=aClass.getAllMethods();
  }
  PsiMethod topSuper=null;
  for (int i=0; i < allMethods.length; i++) {
    PsiMethod superMethod=allMethods[i];
    PsiClass superClass=superMethod.getContainingClass();
    if (superClass.equals(aClass))     continue;
    PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getClassSubstitutor(superClass,aClass,PsiSubstitutor.EMPTY);
    if (superClassSubstitutor == null)     superClassSubstitutor=PsiSubstitutor.EMPTY;
    boolean looksLikeSuperMethod=method.getName().equals(superMethod.getName()) && !superMethod.hasModifierProperty(PsiModifier.STATIC) && PsiUtil.isAccessible(superMethod,aClass,aClass)&& method.getSignature(PsiSubstitutor.EMPTY).equals(superMethod.getSignature(superClassSubstitutor));
    if (isEjbInherited || looksLikeSuperMethod) {
      if (topSuper != null && superClass.isInheritor(topSuper.getContainingClass(),true)) {
        continue;
      }
      topSuper=superMethod;
    }
  }
  return topSuper;
}
