{
  PsiTypeParameter[] superTypeParams=superClass.getTypeParameters();
  if (superTypeParams.length == 0)   return PsiSubstitutor.EMPTY;
  if (PsiUtil.isRawSubstitutor(derivedClass,derivedSubstitutor)) {
    Map<PsiTypeParameter,PsiType> substitutionMap=derivedSubstitutor.getSubstitutionMap();
    Map<PsiTypeParameter,PsiType> boundSubstituted=new HashMap<PsiTypeParameter,PsiType>();
    boolean boundSubsted=false;
    for (    PsiTypeParameter typeParameter : substitutionMap.keySet()) {
      PsiType type=substitutionMap.get(typeParameter);
      PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
      if (type == null && extendsTypes.length != 0) {
        boundSubstituted.put(typeParameter,extendsTypes[0]);
        boundSubsted=true;
      }
 else {
        boundSubstituted.put(typeParameter,type);
      }
    }
    if (boundSubsted) {
      PsiElementFactory elementFactory=JavaPsiFacade.getInstance(superClass.getProject()).getElementFactory();
      derivedSubstitutor=elementFactory.createSubstitutor(boundSubstituted);
    }
  }
  final Map<PsiTypeParameter,PsiType> map=superSubstitutor.getSubstitutionMap();
  final Map<PsiTypeParameter,PsiType> m1=new HashMap<PsiTypeParameter,PsiType>();
  for (  PsiTypeParameter typeParameter : superTypeParams) {
    if (map.containsKey(typeParameter)) {
      PsiType type=superSubstitutor.substitute(typeParameter);
      final PsiType t=derivedSubstitutor.substituteNoErase(type);
      m1.put(typeParameter,t);
    }
  }
  PsiElementFactory elementFactory=JavaPsiFacade.getInstance(superClass.getProject()).getElementFactory();
  return elementFactory.createSubstitutor(m1);
}
