{
  @NonNls StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    builder.append(CommonXmlStrings.HTML_START).append(CommonXmlStrings.BODY_START);
    builder.append(XBreakpointUtil.getDisplayText(this));
    String errorMessage=getErrorMessage();
    if (!StringUtil.isEmpty(errorMessage)) {
      builder.append(BR_NBSP);
      builder.append("<font color='#").append(ColorUtil.toHex(JBColor.RED)).append("'>");
      builder.append(errorMessage);
      builder.append("</font>");
    }
    if (getSuspendPolicy() == SuspendPolicy.NONE) {
      builder.append(BR_NBSP).append(XDebuggerBundle.message("xbreakpoint.tooltip.suspend.policy.none"));
    }
 else     if (getType().isSuspendThreadSupported()) {
      builder.append(BR_NBSP);
switch (getSuspendPolicy()) {
case ALL:
        builder.append(XDebuggerBundle.message("xbreakpoint.tooltip.suspend.policy.all"));
      break;
case THREAD:
    builder.append(XDebuggerBundle.message("xbreakpoint.tooltip.suspend.policy.thread"));
  break;
}
}
String condition=getCondition();
if (!StringUtil.isEmpty(condition)) {
builder.append(BR_NBSP);
builder.append(XDebuggerBundle.message("xbreakpoint.tooltip.condition"));
builder.append(CommonXmlStrings.NBSP);
builder.append(XmlStringUtil.escapeString(condition));
}
if (isLogMessage()) {
builder.append(BR_NBSP).append(XDebuggerBundle.message("xbreakpoint.tooltip.log.message"));
}
String logExpression=getLogExpression();
if (!StringUtil.isEmpty(logExpression)) {
builder.append(BR_NBSP);
builder.append(XDebuggerBundle.message("xbreakpoint.tooltip.log.expression"));
builder.append(CommonXmlStrings.NBSP);
builder.append(XmlStringUtil.escapeString(logExpression));
}
XBreakpoint<?> masterBreakpoint=getBreakpointManager().getDependentBreakpointManager().getMasterBreakpoint(this);
if (masterBreakpoint != null) {
builder.append(BR_NBSP);
String str=XDebuggerBundle.message("xbreakpoint.tooltip.depends.on");
builder.append(str);
builder.append(CommonXmlStrings.NBSP);
builder.append(XBreakpointUtil.getShortText(masterBreakpoint));
}
builder.append(CommonXmlStrings.BODY_END).append(CommonXmlStrings.HTML_END);
return builder.toString();
}
  finally {
StringBuilderSpinAllocator.dispose(builder);
}
}
