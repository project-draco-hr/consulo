{
  myConfig=config;
  final String componentKey=config.getInterfaceClass();
  myDelegate=new CachingComponentAdapter(new ConstructorInjectionComponentAdapter(componentKey,implementationClass,null,true)){
    @Override public Object getComponentInstance(    PicoContainer picoContainer) throws PicoInitializationException, PicoIntrospectionException {
      Object componentInstance=null;
      try {
        long startTime=myInitialized ? 0 : System.nanoTime();
        componentInstance=super.getComponentInstance(picoContainer);
        if (!myInitialized) {
          if (myInitializing) {
            if (myConfig.pluginDescriptor != null) {
              LOG.error(new PluginException("Cyclic component initialization: " + componentKey,myConfig.pluginDescriptor.getPluginId()));
            }
 else {
              LOG.error(new Throwable("Cyclic component initialization: " + componentKey));
            }
          }
          try {
            myInitializing=true;
            myComponentsRegistry.registerComponentInstance(componentInstance);
            initComponent(componentInstance);
            long endTime=System.nanoTime();
            long ms=(endTime - startTime) / 1000000;
            if (ms > 10) {
              if (logSlowComponents()) {
                LOG.info(componentInstance.getClass().getName() + " initialized in " + ms+ " ms");
              }
            }
          }
  finally {
            myInitializing=false;
          }
          myInitialized=true;
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      StateStorageException e) {
        throw e;
      }
catch (      Throwable t) {
        handleInitComponentError(t,componentInstance == null,componentKey,config);
      }
      return componentInstance;
    }
  }
;
}
