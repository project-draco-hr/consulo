{
  final T initializedComponent=(T)myInitializedComponents.get(interfaceClass);
  if (initializedComponent != null)   return initializedComponent;
synchronized (this) {
    if (myComponentsRegistry == null || !myComponentsRegistry.containsInterface(interfaceClass)) {
      return null;
    }
    Object lock=myComponentsRegistry.getComponentLock(interfaceClass);
synchronized (lock) {
      T dcl=(T)myInitializedComponents.get(interfaceClass);
      if (dcl != null)       return dcl;
      T component=(T)getPicoContainer().getComponentInstance(interfaceClass.getName());
      if (component == null) {
        component=(T)createComponent(interfaceClass);
      }
      if (component == null) {
        throw new IncorrectOperationException("createComponent() returns null for: " + interfaceClass);
      }
      myInitializedComponents.put(interfaceClass,component);
      if (component instanceof com.intellij.openapi.Disposable) {
        Disposer.register(this,(com.intellij.openapi.Disposable)component);
      }
      return component;
    }
  }
}
