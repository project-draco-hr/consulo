{
  buf.append("Module: " + module.getName() + "\n");
  classPathItemToBuffer(buf,module,true);
  namedListToBuffer(buf,"Excludes",module.getExcludes());
  buf.append("Libraries:\n");
  for (  Library lib : prepare(module.getLibraries().values(),myLibraryComparator)) {
    libraryToBuffer(buf,lib);
  }
  long ss=sourceRootToBuffer(buf,"SourceRoots",module.getSourceRoots()).snd;
  buf.append("OutputPath: " + module.getOutputPath() + "\n");
  long os=directoryToBuffer(buf,module.getOutputPath(),myClassExts).fst;
  long tss=sourceRootToBuffer(buf,"TestRoots",module.getTestRoots()).snd;
  buf.append("TestOutputPath: " + module.getTestOutputPath() + "\n");
  long tos=directoryToBuffer(buf,module.getTestOutputPath(),myClassExts).fst;
  buf.append("Dependencies:\n");
  for (  Module.ModuleDependency dep : module.getDependencies()) {
    final ClasspathItem item=dep.getItem();
    if (item instanceof Module) {
      buf.append("module " + ((Module)item).getName() + "\n");
    }
 else     if (item instanceof Library) {
      buf.append("library " + ((Library)item).getName() + "\n");
    }
 else     if (item instanceof JavaSdk) {
      buf.append("javaSdk " + ((JavaSdk)item).getName() + "\n");
    }
 else     if (item instanceof Sdk) {
      buf.append("Sdk " + ((Sdk)item).getName() + "\n");
    }
 else     if (item instanceof PathEntry) {
      buf.append("pathEntry " + ((PathEntry)item).getPath() + "\n");
    }
 else {
      buf.append("unknown ClasspathItem implementation in dependencies: <" + item.getClass().getName() + ">\n");
    }
  }
  return new ModuleHistory(module.getName(),ss,os,tss,tos);
}
