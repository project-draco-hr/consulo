{
  myPartner.checkCanceled();
  final File ioFile=status.getFile();
  checkIfCopyRootWasReported(status,ioFile);
  final VirtualFile vFile=getVirtualFile(ioFile);
  if (vFile != null) {
    final Boolean excluded=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        if (myProject.isDisposed())         return null;
        return myPartner.isExcluded(vFile);
      }
    }
);
    if (Boolean.TRUE.equals(excluded))     return;
  }
  if (myProject.isDisposed())   throw new ProcessCanceledException();
  if ((vFile != null) && (SvnVcs.svnStatusIsUnversioned(status))) {
    if (vFile.isDirectory()) {
      if (FileUtil.filesEqual(myCurrentItem.getPath().getIOFile(),ioFile)) {
      }
 else {
        final MyItem childItem=new MyItem(myProject,new FilePathImpl(vFile),SVNDepth.INFINITY,myPartner.createStatusClient(),true);
        myQueue.add(childItem);
      }
    }
 else {
      myReceiver.processUnversioned(vFile);
    }
  }
 else {
    final FilePath path=VcsUtil.getFilePath(ioFile,status.getKind().equals(SVNNodeKind.DIR));
    myReceiver.process(path,status);
  }
}
