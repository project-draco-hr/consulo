{
  myPartner.checkCanceled();
  final File ioFile=status.getFile();
  if (!myMetCurrentItem && myCurrentItem.isIsInnerCopyRoot()) {
    myMetCurrentItem=true;
    final SVNStatus statusInner=SvnUtil.getStatus(SvnVcs.getInstance(myProject),myCurrentItem.getPath().getIOFile());
    if (myCurrentItem.getPath().getVirtualFile() != null || statusInner != null) {
      myReceiver.processCopyRoot(myCurrentItem.getPath().getVirtualFile(),statusInner.getURL(),WorkingCopyFormat.getInstance(statusInner.getWorkingCopyFormat()));
    }
  }
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  VirtualFile vFile=lfs.findFileByIoFile(ioFile);
  if (vFile == null) {
    vFile=lfs.refreshAndFindFileByIoFile(ioFile);
  }
  if ((vFile != null) && myPartner.isExcluded(vFile))   return;
  if ((vFile != null) && (SvnVcs.svnStatusIsUnversioned(status))) {
    myReceiver.processUnversioned(vFile);
    if (vFile.isDirectory()) {
      processRecursively(vFile,myCurrentItem.getDepth());
    }
  }
 else {
    final FilePath path=VcsUtil.getFilePath(ioFile,status.getKind().equals(SVNNodeKind.DIR));
    myReceiver.process(path,status);
  }
}
