{
  if (statement instanceof PsiExpressionStatement) {
    final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)statement;
    final PsiExpression expression=expressionStatement.getExpression();
    if (!(expression instanceof PsiMethodCallExpression)) {
      return false;
    }
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    return isResourceClose(methodCallExpression,variable);
  }
 else   if (statement instanceof PsiTryStatement) {
    final PsiTryStatement tryStatement=(PsiTryStatement)statement;
    final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    if (tryBlock == null) {
      return false;
    }
    final PsiStatement[] innerStatements=tryBlock.getStatements();
    if (innerStatements.length == 0) {
      return false;
    }
    if (isResourceClose(innerStatements[0],variable)) {
      return true;
    }
  }
 else   if (statement instanceof PsiIfStatement) {
    final PsiIfStatement ifStatement=(PsiIfStatement)statement;
    final PsiExpression condition=ifStatement.getCondition();
    if (!(condition instanceof PsiBinaryExpression)) {
      return false;
    }
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)condition;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (JavaTokenType.NE != tokenType) {
      return false;
    }
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      return false;
    }
    if (PsiType.NULL.equals(lhs.getType())) {
      if (!(rhs instanceof PsiReferenceExpression)) {
        return false;
      }
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)rhs;
      final PsiElement target=referenceExpression.resolve();
      if (!variable.equals(target)) {
        return false;
      }
    }
 else     if (PsiType.NULL.equals(rhs.getType())) {
      if (!(lhs instanceof PsiReferenceExpression)) {
        return false;
      }
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
      final PsiElement target=referenceExpression.resolve();
      if (!variable.equals(target)) {
        return false;
      }
    }
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    return isResourceClose(thenBranch,variable);
  }
 else   if (statement instanceof PsiBlockStatement) {
    final PsiBlockStatement blockStatement=(PsiBlockStatement)statement;
    final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
    final PsiStatement[] statements=codeBlock.getStatements();
    return statements.length != 0 && isResourceClose(statements[0],variable);
  }
  return false;
}
