{
  String name=null;
  final PsiElement parent=myModifierList.getParent();
  if (parent instanceof PsiClass) {
    name=((PsiClass)parent).getName();
  }
 else   if (parent instanceof PsiMethod) {
    name=PsiFormatUtil.formatMethod((PsiMethod)parent,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | (myShowContainingClass ? PsiFormatUtil.SHOW_CONTAINING_CLASS : 0),0);
  }
 else   if (parent instanceof PsiVariable) {
    name=PsiFormatUtil.formatVariable((PsiVariable)parent,PsiFormatUtil.SHOW_NAME | (myShowContainingClass ? PsiFormatUtil.SHOW_CONTAINING_CLASS : 0),PsiSubstitutor.EMPTY);
  }
 else   if (parent instanceof PsiClassInitializer) {
    final PsiClass containingClass=((PsiClassInitializer)parent).getContainingClass();
    final String className=containingClass instanceof PsiAnonymousClass ? "Anonymous class derived from " + ((PsiAnonymousClass)containingClass).getBaseClassType().getPresentableText() : containingClass.getName();
    name=className + " class initializer";
  }
  final String text=MessageFormat.format("Make ''{0}'' {1}{2}",new Object[]{name,(myShouldHave ? "" : "not "),myModifier.equals(PsiModifier.PACKAGE_LOCAL) ? "package local" : myModifier});
  return text;
}
