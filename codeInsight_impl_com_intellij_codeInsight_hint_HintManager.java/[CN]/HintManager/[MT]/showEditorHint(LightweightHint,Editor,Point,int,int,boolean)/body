{
  LOG.assertTrue(SwingUtilities.isEventDispatchThread());
  myHideAlarm.cancelAllRequests();
  hideHints(HIDE_BY_OTHER_HINT,false,false);
  if (editor != myLastEditor) {
    hideAllHints();
  }
  if (!editor.getContentComponent().isShowing())   return;
  updateLastEditor(editor);
  Project project=editor.getProject();
  if (project != null) {
    LookupManager lookupManager=LookupManager.getInstance(project);
    Lookup lookup=lookupManager.getActiveLookup();
    if (lookup != null && (flags & HIDE_BY_LOOKUP_ITEM_CHANGE) != 0) {
      lookup.addLookupListener(new LookupAdapter(){
        public void currentItemChanged(        LookupEvent event){
          hint.hide();
        }
        public void itemSelected(        LookupEvent event){
          hint.hide();
        }
        public void lookupCanceled(        LookupEvent event){
          hint.hide();
        }
      }
);
    }
  }
  Component component=hint.getComponent();
  JLayeredPane layeredPane=editor.getComponent().getRootPane().getLayeredPane();
  Dimension size=component.getPreferredSize();
  if (layeredPane.getWidth() < p.x + size.width) {
    p.x=Math.max(0,layeredPane.getWidth() - size.width);
  }
  hint.show(layeredPane,p.x,p.y,editor.getContentComponent());
  ListenerUtil.addMouseListener(component,new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myHideAlarm.cancelAllRequests();
    }
  }
);
  ListenerUtil.addFocusListener(component,new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      myHideAlarm.cancelAllRequests();
    }
  }
);
  final HintInfo info=new HintInfo(hint,flags,reviveOnEditorChange);
  myHintsStack.add(info);
  if (timeout > 0) {
    Timer timer=new Timer(timeout,new ActionListener(){
      public void actionPerformed(      ActionEvent event){
        hint.hide();
      }
    }
);
    timer.setRepeats(false);
    timer.start();
  }
}
