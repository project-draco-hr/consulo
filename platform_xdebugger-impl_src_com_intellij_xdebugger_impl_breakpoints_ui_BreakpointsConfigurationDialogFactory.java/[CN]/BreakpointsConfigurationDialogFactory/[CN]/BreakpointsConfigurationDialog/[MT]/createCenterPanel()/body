{
  for (  BreakpointPanelProvider<?> panelProvider : myBreakpointPanelProviders) {
    addPanels(panelProvider);
  }
  JComponent contentComponent=null;
  if (myPanels.size() > 1) {
    final TabbedPaneWrapper tabbedPane=new TabbedPaneWrapper(getDisposable());
    for (    AbstractBreakpointPanel breakpointPanel : myPanels) {
      addPanel(breakpointPanel,tabbedPane);
    }
    final ChangeListener tabPaneChangeListener=new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        AbstractBreakpointPanel panel=getSelectedPanel();
        if (panel != null) {
          panel.ensureSelectionExists();
        }
      }
    }
;
    tabbedPane.addChangeListener(tabPaneChangeListener);
    myDisposeActions.add(new Runnable(){
      public void run(){
        tabbedPane.removeChangeListener(tabPaneChangeListener);
      }
    }
);
    myTabbedPane=tabbedPane;
    contentComponent=tabbedPane.getComponent();
  }
 else   if (myPanels.size() == 1) {
    contentComponent=myPanels.get(0).getPanel();
  }
  myPanel=new JPanel(new BorderLayout());
  if (contentComponent != null) {
    myPanel.add(contentComponent,BorderLayout.CENTER);
  }
  ActionListener closeAction=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      close(CANCEL_EXIT_CODE);
    }
  }
;
  myPanel.registerKeyboardAction(closeAction,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myPanel.setPreferredSize(new Dimension(600,500));
  return myPanel;
}
