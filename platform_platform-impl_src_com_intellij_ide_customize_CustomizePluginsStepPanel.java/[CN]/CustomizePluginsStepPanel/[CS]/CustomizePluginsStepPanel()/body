{
  myCardLayout=new JBCardLayout();
  setLayout(myCardLayout);
  JPanel gridPanel=new JPanel(new GridLayout(0,COLS));
  myCustomizePanel=new IdSetPanel();
  JBScrollPane scrollPane=new JBScrollPane(gridPanel,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.getVerticalScrollBar().setUnitIncrement(10);
  scrollPane.setBorder(null);
  add(scrollPane,MAIN);
  add(myCustomizePanel,CUSTOMIZE);
  Map<String,Pair<String,List<String>>> groups=PluginGroups.getInstance().getTree();
  for (  final Map.Entry<String,Pair<String,List<String>>> entry : groups.entrySet()) {
    final String group=entry.getKey();
    if (PluginGroups.CORE.equals(group))     continue;
    JPanel groupPanel=new JPanel(new GridBagLayout()){
      @Override public Color getBackground(){
        Color color=UIManager.getColor("Panel.background");
        return isGroupEnabled(group) ? color : ColorUtil.darker(color,1);
      }
    }
;
    gridPanel.setOpaque(true);
    GridBagConstraints gbc=new GridBagConstraints();
    gbc.fill=GridBagConstraints.BOTH;
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    gbc.weightx=1;
    JLabel titleLabel=new JLabel("<html><body><h2 style=\"text-align:left;\">" + group + "</h2></body></html>",SwingConstants.CENTER){
      @Override public boolean isEnabled(){
        return isGroupEnabled(group);
      }
    }
;
    groupPanel.add(new JLabel(IconLoader.getIcon(entry.getValue().getFirst())),gbc);
    groupPanel.add(titleLabel,gbc);
    JLabel descriptionLabel=new JLabel(PluginGroups.getInstance().getDescription(group),SwingConstants.CENTER){
      @Override public Dimension getPreferredSize(){
        Dimension size=super.getPreferredSize();
        size.width=Math.min(size.width,200);
        return size;
      }
      @Override public boolean isEnabled(){
        return isGroupEnabled(group);
      }
      @Override public Color getForeground(){
        return ColorUtil.withAlpha(UIManager.getColor("Label.foreground"),.75);
      }
    }
;
    groupPanel.add(descriptionLabel,gbc);
    gbc.weighty=1;
    groupPanel.add(Box.createVerticalGlue(),gbc);
    gbc.weighty=0;
    JPanel buttonsPanel=new JPanel(new FlowLayout(FlowLayout.CENTER,10,5));
    buttonsPanel.setOpaque(false);
    if (PluginGroups.getInstance().getSets(group).size() == 1) {
      buttonsPanel.add(createLink(SWITCH_COMMAND + ":" + group,getGroupSwitchTextProvider(group)));
    }
 else {
      buttonsPanel.add(createLink(CUSTOMIZE_COMMAND + ":" + group,CUSTOMIZE_TEXT_PROVIDER));
      buttonsPanel.add(createLink(SWITCH_COMMAND + ":" + group,getGroupSwitchTextProvider(group)));
    }
    groupPanel.add(buttonsPanel,gbc);
    gridPanel.add(groupPanel);
  }
  int cursor=0;
  Component[] components=gridPanel.getComponents();
  int rowCount=components.length / COLS;
  for (  Component component : components) {
    ((JComponent)component).setBorder(new CompoundBorder(new CustomLineBorder(ColorUtil.withAlpha(JBColor.foreground(),.2),0,0,cursor / 3 < rowCount - 1 ? 1 : 0,cursor % COLS != COLS - 1 ? 1 : 0){
      @Override protected Color getColor(){
        return ColorUtil.withAlpha(JBColor.foreground(),.2);
      }
    }
,BorderFactory.createEmptyBorder(GAP / 2,GAP,GAP / 2,GAP)));
    cursor++;
  }
}
