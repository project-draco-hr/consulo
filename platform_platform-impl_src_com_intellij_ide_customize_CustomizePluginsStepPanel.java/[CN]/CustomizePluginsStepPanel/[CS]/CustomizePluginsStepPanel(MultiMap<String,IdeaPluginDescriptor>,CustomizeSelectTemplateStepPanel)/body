{
  myPluginDescriptors=pluginDescriptors;
  myTemplateStepPanel=templateStepPanel;
  setLayout(new BorderLayout());
  myRoot=new CheckedTreeNode(null);
  for (  Map.Entry<String,Collection<IdeaPluginDescriptor>> entry : pluginDescriptors.entrySet()) {
    String key=entry.getKey();
    Collection<IdeaPluginDescriptor> value=entry.getValue();
    DefaultMutableTreeNode groupNode=new DefaultMutableTreeNode(key);
    for (    IdeaPluginDescriptor ideaPluginDescriptor : value) {
      CheckedTreeNode newChild=new CheckedTreeNode(ideaPluginDescriptor);
      newChild.setChecked(false);
      groupNode.add(newChild);
    }
    myRoot.add(groupNode);
  }
  CheckboxTree checkboxTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      String valueOfNode=getValueOfNode(value);
      if (valueOfNode != null) {
        getTextRenderer().append(valueOfNode);
      }
    }
  }
,myRoot){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      boolean state=node.isChecked();
      Object userObject=node.getUserObject();
      if (userObject instanceof IdeaPluginDescriptor) {
        Set<String> deepDependencies=new THashSet<String>();
        collectDeepDependencies(deepDependencies,(IdeaPluginDescriptor)userObject);
        setupChecked(myRoot,deepDependencies,state);
      }
      repaint();
    }
  }
;
  TreeUtil.sort(myRoot,new Comparator(){
    @Override public int compare(    Object o1,    Object o2){
      String stringValue1=getValueOfNode(o1);
      String stringValue2=getValueOfNode(o2);
      if (stringValue1 != null && stringValue2 != null) {
        return stringValue1.compareToIgnoreCase(stringValue2);
      }
      return 0;
    }
  }
);
  checkboxTree.setRootVisible(false);
  TreeUtil.expandAll(checkboxTree);
  add(ScrollPaneFactory.createScrollPane(checkboxTree,true),BorderLayout.CENTER);
}
