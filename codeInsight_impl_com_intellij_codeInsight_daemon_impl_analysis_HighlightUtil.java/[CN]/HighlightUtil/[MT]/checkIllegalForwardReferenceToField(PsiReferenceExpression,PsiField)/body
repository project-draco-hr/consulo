{
  PsiClass containingClass=referencedField.getContainingClass();
  if (containingClass == null)   return null;
  if (expression.getContainingFile() != referencedField.getContainingFile())   return null;
  if (expression.getTextRange().getStartOffset() >= referencedField.getTextRange().getEndOffset())   return null;
  if (expression.getQualifierExpression() != null)   return null;
  PsiField initField=findEnclosingFieldInitializer(expression);
  PsiClassInitializer classInitializer=findParentClassInitializer(expression);
  if (initField == null && classInitializer == null)   return null;
  boolean isStaticClassInitializer=classInitializer != null && classInitializer.hasModifierProperty(PsiModifier.STATIC);
  boolean isStaticInitField=initField != null && initField.hasModifierProperty(PsiModifier.STATIC);
  boolean inStaticContext=isStaticInitField || isStaticClassInitializer;
  if (!inStaticContext && referencedField.hasModifierProperty(PsiModifier.STATIC))   return null;
  if (PsiUtil.isOnAssignmentLeftHand(expression) && !PsiUtil.isAccessedForReading(expression))   return null;
  if (!containingClass.getManager().areElementsEquivalent(containingClass,PsiTreeUtil.getParentOfType(expression,PsiClass.class))) {
    return null;
  }
  return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,JavaErrorMessages.message("illegal.forward.reference"));
}
