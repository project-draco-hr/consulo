{
  if (refElement instanceof PsiCompiledElement)   return;
  PsiModifierList modifierList=refElement.getModifierList();
  if (modifierList == null)   return;
  PsiClass accessObjectClass=PsiTreeUtil.getParentOfType(place,PsiClass.class,false,true);
  PsiClass packageLocalClassInTheMiddle=getPackageLocalClassInTheMiddle(place);
  if (packageLocalClassInTheMiddle != null) {
    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(packageLocalClassInTheMiddle.getModifierList(),PsiModifier.PUBLIC,true,true);
    QuickFixAction.registerQuickFixAction(errorResult,fix);
    return;
  }
  try {
    PsiModifierList modifierListCopy=refElement.getManager().getElementFactory().createFieldFromText("int a;",null).getModifierList();
    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));
    int i=0;
    if (refElement.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
      i=1;
    }
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      i=2;
    }
    String[] modifiers=new String[]{PsiModifier.PACKAGE_LOCAL,PsiModifier.PROTECTED,PsiModifier.PUBLIC};
    for (; i < modifiers.length; i++) {
      String modifier=modifiers[i];
      modifierListCopy.setModifierProperty(modifier,true);
      if (refElement.getManager().getResolveHelper().isAccessible(refElement,modifierListCopy,place,accessObjectClass,fileResolveScope)) {
        IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(refElement.getModifierList(),modifier,true,true);
        TextRange fixRange=new TextRange(errorResult.startOffset,errorResult.endOffset);
        PsiElement ref=place.getReferenceNameElement();
        if (ref != null) {
          fixRange=fixRange.union(ref.getTextRange());
        }
        QuickFixAction.registerQuickFixAction(errorResult,fixRange,fix,null);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
