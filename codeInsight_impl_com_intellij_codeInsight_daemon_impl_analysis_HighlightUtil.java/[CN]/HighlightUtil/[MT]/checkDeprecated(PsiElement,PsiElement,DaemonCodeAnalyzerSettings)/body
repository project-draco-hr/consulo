{
  if (!settings.getInspectionProfile(elementToHighlight).isToolEnabled(HighlightDisplayKey.DEPRECATED_SYMBOL))   return null;
  if (!(refElement instanceof PsiDocCommentOwner))   return null;
  if (!((PsiDocCommentOwner)refElement).isDeprecated())   return null;
  if (InspectionManagerEx.inspectionResultSuppressed(elementToHighlight,HighlightDisplayKey.DEPRECATED_SYMBOL.getID()))   return null;
  String description=JavaErrorMessages.message("deprecated.symbol",HighlightMessageUtil.getSymbolName(refElement,PsiSubstitutor.EMPTY));
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES);
  HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.DEPRECATED,elementToHighlight.getTextRange(),description,attributes);
  List<IntentionAction> options=IntentionManager.getInstance(elementToHighlight.getProject()).getStandardIntentionOptions(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight);
  QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(HighlightDisplayKey.getDisplayNameByKey(HighlightDisplayKey.DEPRECATED_SYMBOL),options),options);
  return highlightInfo;
}
