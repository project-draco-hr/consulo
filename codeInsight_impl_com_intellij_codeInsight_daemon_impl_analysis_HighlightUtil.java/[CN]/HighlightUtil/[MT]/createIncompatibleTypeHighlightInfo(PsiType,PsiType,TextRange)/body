{
  PsiType lType1=lType;
  PsiType rType1=rType;
  PsiTypeParameter[] lTypeParams=PsiTypeParameter.EMPTY_ARRAY;
  PsiSubstitutor lTypeSubstitutor=PsiSubstitutor.EMPTY;
  if (lType1 instanceof PsiClassType) {
    PsiClassType.ClassResolveResult resolveResult=((PsiClassType)lType1).resolveGenerics();
    lTypeSubstitutor=resolveResult.getSubstitutor();
    PsiClass psiClass=resolveResult.getElement();
    if (psiClass instanceof PsiAnonymousClass) {
      lType1=((PsiAnonymousClass)psiClass).getBaseClassType();
      resolveResult=((PsiClassType)lType1).resolveGenerics();
      lTypeSubstitutor=resolveResult.getSubstitutor();
      psiClass=resolveResult.getElement();
    }
    lTypeParams=psiClass == null ? PsiTypeParameter.EMPTY_ARRAY : psiClass.getTypeParameters();
  }
  PsiTypeParameter[] rTypeParams=PsiTypeParameter.EMPTY_ARRAY;
  PsiSubstitutor rTypeSubstitutor=PsiSubstitutor.EMPTY;
  if (rType1 instanceof PsiClassType) {
    PsiClassType.ClassResolveResult resolveResult=((PsiClassType)rType1).resolveGenerics();
    rTypeSubstitutor=resolveResult.getSubstitutor();
    PsiClass psiClass=resolveResult.getElement();
    if (psiClass instanceof PsiAnonymousClass) {
      rType1=((PsiAnonymousClass)psiClass).getBaseClassType();
      resolveResult=((PsiClassType)rType1).resolveGenerics();
      rTypeSubstitutor=resolveResult.getSubstitutor();
      psiClass=resolveResult.getElement();
    }
    rTypeParams=psiClass == null ? PsiTypeParameter.EMPTY_ARRAY : psiClass.getTypeParameters();
  }
  int typeParamColumns=Math.max(lTypeParams.length,rTypeParams.length);
  @NonNls String requredRow="";
  @NonNls String foundRow="";
  for (int i=0; i < typeParamColumns; i++) {
    PsiTypeParameter lTypeParameter=i >= lTypeParams.length ? null : lTypeParams[i];
    PsiTypeParameter rTypeParameter=i >= rTypeParams.length ? null : rTypeParams[i];
    PsiType lSubstedType=lTypeParameter == null ? null : lTypeSubstitutor.substitute(lTypeParameter);
    PsiType rSubstedType=rTypeParameter == null ? null : rTypeSubstitutor.substitute(rTypeParameter);
    boolean matches=Comparing.equal(lSubstedType,rSubstedType);
    @NonNls String openBrace=i == 0 ? "&lt;" : "";
    @NonNls String closeBrace=i == typeParamColumns - 1 ? "&gt;" : ",";
    requredRow+="<td>" + (lTypeParams.length == 0 ? "" : openBrace) + redIfNotMatch(lSubstedType,matches)+ (i < lTypeParams.length ? closeBrace : "")+ "</td>";
    foundRow+="<td>" + (rTypeParams.length == 0 ? "" : openBrace) + redIfNotMatch(rSubstedType,matches)+ (i < rTypeParams.length ? closeBrace : "")+ "</td>";
  }
  PsiType lRawType=lType1 instanceof PsiClassType ? ((PsiClassType)lType1).rawType() : lType1;
  PsiType rRawType=rType1 instanceof PsiClassType ? ((PsiClassType)rType1).rawType() : rType1;
  boolean assignable=lRawType == null || rRawType == null || TypeConversionUtil.isAssignable(lRawType,rRawType);
  String toolTip=JavaErrorMessages.message("incompatible.types.html.tooltip",redIfNotMatch(lRawType,assignable),requredRow,redIfNotMatch(rRawType,assignable),foundRow);
  String description=JavaErrorMessages.message("incompatible.types",formatType(lType1),formatType(rType1));
  return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,null,textRange.getStartOffset(),textRange.getEndOffset(),description,toolTip);
}
