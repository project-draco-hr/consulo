{
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile(assignment).isToolEnabled(HighlightDisplayKey.SILLY_ASSIGNMENT)) {
    return null;
  }
  if (InspectionManagerEx.inspectionResultSuppressed(assignment,HighlightDisplayKey.SILLY_ASSIGNMENT.getID()))   return null;
  if (assignment.getOperationSign().getTokenType() != JavaTokenType.EQ)   return null;
  PsiExpression lExpression=assignment.getLExpression();
  PsiExpression rExpression=assignment.getRExpression();
  if (rExpression == null)   return null;
  lExpression=PsiUtil.deparenthesizeExpression(lExpression);
  rExpression=PsiUtil.deparenthesizeExpression(rExpression);
  if (!(lExpression instanceof PsiReferenceExpression) || !(rExpression instanceof PsiReferenceExpression))   return null;
  PsiReferenceExpression lRef=(PsiReferenceExpression)lExpression;
  PsiReferenceExpression rRef=(PsiReferenceExpression)rExpression;
  PsiManager manager=assignment.getManager();
  if (!sameInstanceReferences(lRef,rRef,manager))   return null;
  HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.SILLY_ASSIGNMENT,assignment,JavaErrorMessages.message("assignment.to.itself"));
  List<IntentionAction> options=IntentionManager.getInstance(assignment.getProject()).getStandardIntentionOptions(HighlightDisplayKey.SILLY_ASSIGNMENT,assignment);
  QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(HighlightDisplayKey.getDisplayNameByKey(HighlightDisplayKey.SILLY_ASSIGNMENT),options),options);
  return highlightInfo;
}
