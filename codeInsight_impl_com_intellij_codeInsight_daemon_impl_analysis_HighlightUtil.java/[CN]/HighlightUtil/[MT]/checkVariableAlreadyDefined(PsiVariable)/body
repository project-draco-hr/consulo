{
  boolean isIncorrect=false;
  PsiIdentifier identifier=variable.getNameIdentifier();
  String name=variable.getName();
  if (variable instanceof PsiLocalVariable || variable instanceof PsiParameter && ((PsiParameter)variable).getDeclarationScope() instanceof PsiCatchSection || variable instanceof PsiParameter && ((PsiParameter)variable).getDeclarationScope() instanceof PsiForeachStatement) {
    PsiElement scope=PsiTreeUtil.getParentOfType(variable,PsiFile.class,PsiMethod.class,PsiClassInitializer.class);
    VariablesNotProcessor proc=new VariablesNotProcessor(variable,false){
      protected boolean check(      final PsiVariable var,      final PsiSubstitutor substitutor){
        return (var instanceof PsiLocalVariable || var instanceof PsiParameter) && super.check(var,substitutor);
      }
    }
;
    PsiScopesUtil.treeWalkUp(proc,identifier,scope);
    if (proc.size() > 0) {
      isIncorrect=true;
    }
  }
 else   if (variable instanceof PsiField) {
    PsiField field=(PsiField)variable;
    PsiClass aClass=field.getContainingClass();
    if (aClass == null)     return null;
    PsiField fieldByName=aClass.findFieldByName(name,false);
    if (fieldByName != null && fieldByName != field) {
      isIncorrect=true;
    }
  }
 else {
    PsiElement scope=variable.getParent();
    PsiElement[] children=scope.getChildren();
    for (    PsiElement child : children) {
      if (child instanceof PsiVariable) {
        if (child.equals(variable))         continue;
        if (name.equals(((PsiVariable)child).getName())) {
          isIncorrect=true;
          break;
        }
      }
    }
  }
  if (isIncorrect) {
    String description=JavaErrorMessages.message("variable.already.defined",name);
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,identifier,description);
    QuickFixAction.registerQuickFixAction(highlightInfo,new ReuseVariableDeclarationFix(variable,identifier));
    return highlightInfo;
  }
  return null;
}
