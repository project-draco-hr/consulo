{
  if (!(initializer instanceof PsiArrayInitializerExpression))   return;
  final PsiType arrayInitializerType=initializer.getType();
  if (!(arrayInitializerType instanceof PsiArrayType))   return;
  final PsiType componentType=((PsiArrayType)arrayInitializerType).getComponentType();
  final PsiArrayInitializerExpression arrayInitializer=(PsiArrayInitializerExpression)initializer;
  boolean arrayTypeFixChecked=false;
  VariableArrayTypeFix fix=null;
  final PsiExpression[] initializers=arrayInitializer.getInitializers();
  for (  PsiExpression expression : initializers) {
    final HighlightInfo info=checkArrayInitalizerCompatibleTypes(expression,componentType);
    if (info != null) {
      holder.add(info);
      if (!arrayTypeFixChecked) {
        final TypeGetter<PsiExpression> typeGetter=(expression.getType() == null) ? ByInnerInitializerTypeGetter.ourInstance : PsiExpressionTypeGetter.ourInstance;
        final Pair<PsiType,Boolean> checkResult=sameType(initializers,typeGetter);
        fix=Boolean.TRUE.equals(checkResult.second) ? new VariableArrayTypeFix(arrayInitializer,checkResult.first) : null;
        arrayTypeFixChecked=true;
      }
      if (fix != null) {
        QuickFixAction.registerQuickFixAction(info,fix);
      }
    }
  }
}
