{
  PsiElement refName=ref.getReferenceNameElement();
  if (!(refName instanceof PsiIdentifier) && !(refName instanceof PsiKeyword))   return null;
  HighlightInfo highlightInfo=checkMemberReferencedBeforeConstructorCalled(ref);
  if (highlightInfo != null)   return highlightInfo;
  PsiElement refParent=ref.getParent();
  if (!(refParent instanceof PsiMethodCallExpression)) {
    if (resolved == null) {
      if (isInsidePackageStatement(refName))       return null;
      if (result.isPackagePrefixPackageReference())       return null;
      String description=JavaErrorMessages.message("cannot.resolve.symbol",refName.getText());
      HighlightInfoType type=HighlightInfoType.WRONG_REF;
      if (PsiTreeUtil.getParentOfType(ref,PsiDocComment.class) != null) {
        return null;
      }
      PsiElement parent=PsiTreeUtil.getParentOfType(ref,PsiNewExpression.class,PsiMethod.class);
      HighlightInfo info=HighlightInfo.createHighlightInfo(type,refName,description);
      List<IntentionAction> options=new ArrayList<IntentionAction>();
      QuickFixAction.registerQuickFixAction(info,new ImportClassAction(ref),options);
      QuickFixAction.registerQuickFixAction(info,SetupJDKFix.getInstnace(),options);
      if (ref instanceof PsiReferenceExpression) {
        TextRange fixRange=HighlightMethodUtil.getFixRange(ref);
        PsiReferenceExpression refExpr=(PsiReferenceExpression)ref;
        QuickFixAction.registerQuickFixAction(info,fixRange,new CreateConstantFieldFromUsageAction(refExpr),options);
        QuickFixAction.registerQuickFixAction(info,fixRange,new CreateFieldFromUsageAction(refExpr),options);
        QuickFixAction.registerQuickFixAction(info,new RenameWrongRefAction(refExpr),options);
        if (!ref.isQualified()) {
          QuickFixAction.registerQuickFixAction(info,fixRange,new BringVariableIntoScopeAction(refExpr),options);
          QuickFixAction.registerQuickFixAction(info,fixRange,new CreateLocalFromUsageAction(refExpr),options);
          QuickFixAction.registerQuickFixAction(info,fixRange,new CreateParameterFromUsageAction(refExpr),options);
        }
      }
      QuickFixAction.registerQuickFixAction(info,new CreateClassFromUsageAction(ref,true),options);
      QuickFixAction.registerQuickFixAction(info,new CreateClassFromUsageAction(ref,false),options);
      if (parent instanceof PsiNewExpression) {
        QuickFixAction.registerQuickFixAction(info,new CreateClassFromNewAction((PsiNewExpression)parent),options);
      }
      return info;
    }
    if (!result.isValidResult()) {
      if (!result.isAccessible()) {
        String description=buildProblemWithAccessDescription(ref,result);
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
        if (result.isStaticsScopeCorrect()) {
          registerAccessQuickFixAction((PsiMember)resolved,ref,info,result.getCurrentFileResolveScope());
          if (ref instanceof PsiReferenceExpression) {
            QuickFixAction.registerQuickFixAction(info,new RenameWrongRefAction((PsiReferenceExpression)ref),null);
          }
        }
        return info;
      }
      if (!result.isStaticsScopeCorrect()) {
        String description=buildProblemWithStaticDescription(resolved);
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
        registerStaticProblemQuickFixAction(resolved,info,ref);
        if (ref instanceof PsiReferenceExpression) {
          QuickFixAction.registerQuickFixAction(info,new RenameWrongRefAction((PsiReferenceExpression)ref),null);
        }
        return info;
      }
    }
    if ((resolved instanceof PsiLocalVariable || resolved instanceof PsiParameter) && !(resolved instanceof ImplicitVariable)) {
      highlightInfo=HighlightControlFlowUtil.checkVariableMustBeFinal((PsiVariable)resolved,ref);
      if (highlightInfo != null)       return highlightInfo;
    }
  }
  return highlightInfo;
}
