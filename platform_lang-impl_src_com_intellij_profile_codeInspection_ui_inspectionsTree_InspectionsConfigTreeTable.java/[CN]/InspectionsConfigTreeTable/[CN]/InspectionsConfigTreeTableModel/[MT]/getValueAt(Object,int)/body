{
  if (column == TREE_COLUMN) {
    return null;
  }
  final InspectionConfigTreeNode treeNode=(InspectionConfigTreeNode)node;
  final List<HighlightDisplayKey> inspectionsKeys=InspectionsAggregationUtil.getInspectionsKeys(treeNode);
  if (column == SEVERITIES_COLUMN) {
    final MultiColoredHighlightSeverityIconSink sink=new MultiColoredHighlightSeverityIconSink();
    for (    final HighlightDisplayKey selectedInspectionsNode : inspectionsKeys) {
      final String toolId=selectedInspectionsNode.toString();
      if (mySettings.getInspectionProfile().getTools(toolId,mySettings.getProject()).isEnabled()) {
        sink.put(mySettings.getInspectionProfile().getToolDefaultState(toolId,mySettings.getProject()),mySettings.getInspectionProfile().getNonDefaultTools(toolId,mySettings.getProject()));
      }
    }
    return sink.constructIcon(mySettings.getInspectionProfile());
  }
 else   if (column == IS_ENABLED_COLUMN) {
    return isEnabled(inspectionsKeys);
  }
  throw new IllegalArgumentException();
}
