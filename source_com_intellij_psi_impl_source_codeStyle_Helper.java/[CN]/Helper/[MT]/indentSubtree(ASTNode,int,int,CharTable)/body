{
  if (oldIndent == newIndent)   return;
  for (ASTNode son=tree.getFirstChildNode(); son != null; ) {
    if (son.getElementType() == ElementType.WHITE_SPACE) {
      final int indentLevelsDiff=newIndent / Helper.INDENT_FACTOR - oldIndent / Helper.INDENT_FACTOR;
      final int indentSpacesDiff=newIndent % Helper.INDENT_FACTOR - oldIndent % Helper.INDENT_FACTOR;
      final String ws=son.getText();
      String newIndentString=indentWhitespace(ws,indentLevelsDiff,indentSpacesDiff);
      if (!ws.equals(newIndentString)) {
        boolean skipWSChange=false;
        if (tree instanceof XmlText && (myFileType == StdFileTypes.HTML || myFileType == StdFileTypes.XHTML || myFileType == StdFileTypes.JSP || myFileType == StdFileTypes.JSPX)) {
          skipWSChange=FormatterImpl.getInstance().isDisabled();
        }
        if (!skipWSChange) {
          ASTNode newWSElem=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,newIndentString.toCharArray(),0,newIndentString.length(),table,SharedImplUtil.getManagerByTree(tree));
          tree.replaceChild(son,newWSElem);
          son=newWSElem;
        }
      }
    }
 else     if (son instanceof CompositeElement) {
      indentSubtree(son,oldIndent,newIndent,table);
    }
    son=son.getTreeNext();
  }
}
