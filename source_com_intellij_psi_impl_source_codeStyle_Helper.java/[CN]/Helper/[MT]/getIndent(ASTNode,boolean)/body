{
  if (element.getTreePrev() != null) {
    ASTNode prev=element.getTreePrev();
    CompositeElement lastCompositePrev;
    while (prev instanceof CompositeElement && !(prev instanceof XmlText)) {
      lastCompositePrev=(CompositeElement)prev;
      prev=((CompositeElement)prev).lastChild;
      if (prev == null) {
        return getIndent(lastCompositePrev,includeNonSpace);
      }
    }
    String text=prev.getText();
    int index=Math.max(text.lastIndexOf('\n'),text.lastIndexOf('\r'));
    if (index >= 0) {
      return getIndent(text.substring(index + 1),includeNonSpace);
    }
    if (includeNonSpace) {
      return getIndent(prev,includeNonSpace) + getIndent(text,includeNonSpace);
    }
    if (element.getElementType() == ElementType.CODE_BLOCK) {
      ASTNode parent=element.getTreeParent();
      if (parent.getElementType() == ElementType.BLOCK_STATEMENT) {
        parent=parent.getTreeParent();
      }
      if (parent.getElementType() != ElementType.CODE_BLOCK) {
        return getIndent(parent,includeNonSpace);
      }
    }
 else {
      if (element.getElementType() == ElementType.LBRACE) {
        return getIndent(element.getTreeParent(),includeNonSpace);
      }
    }
    ASTNode parent=prev.getTreeParent();
    ASTNode child=prev;
    while (parent != null) {
      if (child.getTreePrev() != null)       break;
      child=parent;
      parent=parent.getTreeParent();
    }
    if (parent == null) {
      return getIndent(text,includeNonSpace);
    }
 else {
      if (prev.getTreeParent().getElementType() == ElementType.LABELED_STATEMENT) {
        return getIndent(prev,true) + getIndent(text,true);
      }
 else       return getIndent(prev,includeNonSpace);
    }
  }
 else {
    if (element.getTreeParent() == null) {
      return 0;
    }
    return getIndent(element.getTreeParent(),includeNonSpace);
  }
}
