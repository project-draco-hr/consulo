{
  LeafElement space=getSpaceElement(parent,child1,child2);
  final CharTable charTableByTree=SharedImplUtil.findCharTableByTree(parent);
  int indentShift;
  if (space == null) {
    if (text.length() == 0)     return child2;
    LeafElement newSpace=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,text.toCharArray(),0,text.length(),charTableByTree,null);
    ChangeUtil.addChild((CompositeElement)parent,newSpace,(TreeElement)(child1 != null ? child1.getTreeNext() : parent.getFirstChildNode()));
    indentShift=getIndent(newSpace.getText(),true);
  }
 else {
    final String oldSpace=space.getText();
    if (text.length() == 0) {
      if (child1 != null && child2 != null) {
        if (!canStickChildrenTogether(child1,child2)) {
          return makeSpace(parent,child1,child2," ",indentMultiline);
        }
      }
      ChangeUtil.removeChild((CompositeElement)parent,space);
      indentShift=-getIndent(oldSpace,true);
    }
 else {
      if (text.length() == space.getTextLength()) {
        int i;
        for (i=0; i < text.length(); i++) {
          if (text.charAt(i) != space.charAt(i))           break;
        }
        if (i == text.length())         return child2;
      }
      TreeElement newSpace=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,text.toCharArray(),0,text.length(),charTableByTree,null);
      ChangeUtil.replaceChild(space.getTreeParent(),space,newSpace);
      indentShift=getIndent(newSpace.getText(),true) - getIndent(oldSpace,true);
    }
  }
  if (indentMultiline) {
    child2=shiftIndentInside((TreeElement)child2,indentShift);
  }
  return child2;
}
