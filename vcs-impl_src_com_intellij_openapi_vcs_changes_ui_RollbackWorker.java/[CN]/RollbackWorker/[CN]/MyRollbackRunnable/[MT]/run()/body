{
  myIndicator=ProgressManager.getInstance().getProgressIndicator();
  try {
    ChangesUtil.processChangesByVcs(myProject,myChanges,new ChangesUtil.PerVcsProcessor<Change>(){
      public void process(      AbstractVcs vcs,      List<Change> changes){
        final RollbackEnvironment environment=vcs.getRollbackEnvironment();
        if (environment != null) {
          myPathsToRefresh.addAll(ChangesUtil.getPaths(changes));
          if (myIndicator != null) {
            myIndicator.setText(vcs.getDisplayName() + ": doing rollback...");
            myIndicator.setIndeterminate(false);
          }
          environment.rollbackChanges(changes,myExceptions,new MyProgressModifier(changes.size()));
          if (myIndicator != null) {
            myIndicator.setText2("");
          }
          if (myExceptions.isEmpty() && myDeleteLocallyAddedFiles) {
            deleteAddedFilesLocally(changes);
          }
        }
      }
    }
);
  }
 catch (  ProcessCanceledException e) {
  }
  if (myIndicator != null) {
    myIndicator.startNonCancelableSection();
    myIndicator.setIndeterminate(true);
    myIndicator.setText2("");
    myIndicator.setText(VcsBundle.message("progress.text.synchronizing.files"));
  }
  doRefresh(myProject,myPathsToRefresh,(!mySynchronous),myAfterRefresh,myLocalHistoryActionName);
  AbstractVcsHelper.getInstanceChecked(myProject).showErrors(myExceptions,VcsBundle.message("changes.action.rollback.text"));
}
