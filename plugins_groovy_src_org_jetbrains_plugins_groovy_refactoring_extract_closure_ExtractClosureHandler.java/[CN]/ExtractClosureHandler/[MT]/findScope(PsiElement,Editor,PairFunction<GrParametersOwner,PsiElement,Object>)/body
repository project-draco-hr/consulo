{
  final List<GrParametersOwner> scopes=new ArrayList<GrParametersOwner>();
  while (true) {
    final GrParametersOwner parent=PsiTreeUtil.getParentOfType(place,GrMethod.class);
    if (parent == null)     break;
    scopes.add(parent);
    place=parent;
  }
  if (scopes.size() == 0) {
    throw new ExtractException(GroovyRefactoringBundle.message("there.is.no.method.or.closure"));
  }
 else   if (scopes.size() == 1) {
    final GrParametersOwner owner=scopes.get(0);
    if (owner instanceof GrMethod) {
      PsiMethod newMethod=SuperMethodWarningUtil.checkSuperMethod((PsiMethod)owner,RefactoringBundle.message("to.refactor"));
      if (newMethod == null)       return;
      callback.fun(owner,newMethod);
    }
 else {
      callback.fun(owner,MethodOrClosureScopeChooser.findVariableToUse(owner));
    }
  }
 else {
    myPopup=MethodOrClosureScopeChooser.create(scopes,editor,this,callback);
    myPopup.showInBestPositionFor(editor);
  }
}
