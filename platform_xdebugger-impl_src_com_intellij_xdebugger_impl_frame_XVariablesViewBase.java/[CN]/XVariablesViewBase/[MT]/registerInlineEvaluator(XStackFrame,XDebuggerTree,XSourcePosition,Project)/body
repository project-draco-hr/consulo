{
  final VirtualFile file=position.getFile();
  final FileEditor fileEditor=FileEditorManagerEx.getInstanceEx(project).getSelectedEditor(file);
  if (fileEditor instanceof PsiAwareTextEditorImpl) {
    final Editor editor=((PsiAwareTextEditorImpl)fileEditor).getEditor();
    final SelectionListener listener=new SelectionListener(){
      @Override public void selectionChanged(      final SelectionEvent e){
        final String text=editor.getDocument().getText(e.getNewRange());
        final XDebuggerEvaluator evaluator=stackFrame.getEvaluator();
        if (evaluator != null && !StringUtil.isEmpty(text) && !(text.contains("exec(") || text.contains("++") || text.contains("--")|| text.contains("="))) {
          evaluator.evaluate(text,new XEvaluationCallbackBase(){
            @Override public void evaluated(            @NotNull XValue result){
              final AccessToken token=ApplicationManager.getApplication().acquireReadActionLock();
              try {
                final XDebugSession session=getSession(getTree());
                if (session == null)                 return;
                final TextRange range=e.getNewRange();
                final ExpressionInfo info=new ExpressionInfo(range);
                final int offset=range.getStartOffset();
                final LogicalPosition pos=editor.offsetToLogicalPosition(offset);
                final Point point=editor.logicalPositionToXY(pos);
                new XValueHint(project,editor,point,ValueHintType.MOUSE_OVER_HINT,info,evaluator,session).invokeHint();
              }
  finally {
                token.finish();
              }
            }
            @Override public void errorOccurred(            @NotNull String errorMessage){
            }
          }
,position);
        }
      }
    }
;
    editor.getSelectionModel().addSelectionListener(listener);
    Disposer.register(tree,new Disposable(){
      @Override public void dispose(){
        final FileEditor fileEditor=FileEditorManagerEx.getInstanceEx(project).getSelectedEditor(file);
        if (fileEditor instanceof PsiAwareTextEditorImpl) {
          ((PsiAwareTextEditorImpl)fileEditor).getEditor().getSelectionModel().removeSelectionListener(listener);
        }
      }
    }
);
  }
}
