{
  myCbForceClassicVM=new StateRestoringCheckBox(DebuggerBundle.message("label.debugger.launching.configurable.force.classic.vm"));
  myCbDisableJIT=new JCheckBox(DebuggerBundle.message("label.debugger.launching.configurable.disable.jit"));
  myHideDebuggerCheckBox=new JCheckBox(DebuggerBundle.message("label.debugger.launching.configurable.hide.window"));
  myRbSocket=new JRadioButton(DebuggerBundle.message("label.debugger.launching.configurable.socket"));
  myRbShmem=new JRadioButton(DebuggerBundle.message("label.debugger.launching.configurable.shmem"));
  myFocusAppCheckBox=new JCheckBox(DebuggerBundle.message("label.debugger.focusAppOnBreakpoint"));
  int cbLeftOffset=0;
  final Border border=myCbForceClassicVM.getBorder();
  if (border != null) {
    final Insets insets=border.getBorderInsets(myCbForceClassicVM);
    if (insets != null) {
      cbLeftOffset=insets.left;
    }
  }
  final ButtonGroup gr=new ButtonGroup();
  gr.add(myRbSocket);
  gr.add(myRbShmem);
  final Box box=Box.createHorizontalBox();
  box.add(myRbSocket);
  box.add(myRbShmem);
  final JPanel transportPanel=new JPanel(new BorderLayout());
  transportPanel.add(new JLabel(DebuggerBundle.message("label.debugger.launching.configurable.debugger.transport")),BorderLayout.WEST);
  transportPanel.add(box,BorderLayout.CENTER);
  VerticalBox panel=new VerticalBox();
  panel.setOpaque(false);
  panel.add(transportPanel);
  panel.add(myCbForceClassicVM);
  panel.add(myCbDisableJIT);
  panel.add(myHideDebuggerCheckBox);
  panel.add(myFocusAppCheckBox);
  JPanel result=new JPanel(new BorderLayout());
  result.add(panel,BorderLayout.NORTH);
  result.setBorder(new EmptyBorder(4,4,0,0));
  return result;
}
