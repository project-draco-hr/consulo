{
  myPreviouslyFocusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);
  myActionListener=callback;
  myTextFieldPanel=new JPanelProvider();
  myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel,BoxLayout.Y_AXIS));
  final JPanel hBox=new JPanel();
  hBox.setLayout(new BoxLayout(hBox,BoxLayout.X_AXIS));
  if (myModel.getPromptText() != null) {
    JLabel label=new JLabel(" " + myModel.getPromptText());
    label.setFont(UIManager.getFont("Label.font").deriveFont(Font.BOLD));
    hBox.add(label);
  }
  myCard=new CardLayout();
  myCardContainer=new JPanel(myCard);
  final JPanel checkBoxPanel=new JPanel();
  checkBoxPanel.setLayout(new BoxLayout(checkBoxPanel,BoxLayout.X_AXIS));
  checkBoxPanel.add(new JLabel("  ("));
  myCheckBox=new JCheckBox(myModel.getCheckBoxName());
  myCheckBox.setMnemonic(myModel.getCheckBoxMnemonic());
  myCheckBox.setSelected(myModel.loadInitialCheckBoxState());
  checkBoxPanel.add(myCheckBox);
  checkBoxPanel.add(new JLabel(")"));
  myCardContainer.add(checkBoxPanel,CHECK_BOX_CARD);
  myCardContainer.add(new JLabel("  (" + myModel.getNotInMessage() + ")"),NOT_FOUND_MESSAGE_CARD);
  myCardContainer.add(new JLabel("  (no matches found)"),NOT_FOUND_CARD);
  myCard.show(myCardContainer,CHECK_BOX_CARD);
  if (isCheckboxVisible()) {
    hBox.add(myCardContainer);
  }
  myTextFieldPanel.add(hBox);
  myHistory=new ArrayList<Pair<String,Integer>>();
  myFuture=new ArrayList<Pair<String,Integer>>();
  myTextField=new MyTextField();
  myTextField.setText(myInitialText);
  myEditor=(Editor)DataManager.getInstance().getDataContext(myPreviouslyFocusedComponent).getData(DataConstants.EDITOR);
  if (myEditor != null) {
    myTextField.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,Collections.EMPTY_SET);
    final JPanel p=new JPanel(new BorderLayout());
    final JLabel label=new JLabel("<html><body><center>Press <b>TAB</b> to paste the reference into editor.</center></body></html>");
    label.setHorizontalAlignment(SwingConstants.CENTER);
    p.add(label,BorderLayout.CENTER);
    myTextFieldPanel.add(p);
  }
  myTextFieldPanel.add(myTextField);
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  Font editorFont=new Font(scheme.getEditorFontName(),Font.PLAIN,scheme.getEditorFontSize());
  myTextField.setFont(editorFont);
  if (isCloseByFocusLost()) {
    myTextField.addFocusListener(new FocusAdapter(){
      public void focusLost(      FocusEvent e){
        if (!myTextFieldPanel.focusRequested()) {
          close(false);
          myTextFieldPanel.hideHint();
        }
      }
    }
);
  }
  myCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      ensureNamesLoaded(myCheckBox.isSelected());
      rebuildList(0,REBUILD_DELAY,null,ModalityState.current());
    }
  }
);
  myCheckBox.setFocusable(false);
  myTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      rebuildList(0,REBUILD_DELAY,null,ModalityState.current());
      choosenElementMightChange();
    }
  }
);
  myTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (!myListScrollPane.isVisible()) {
        return;
      }
      final int keyCode=e.getKeyCode();
switch (keyCode) {
case KeyEvent.VK_TAB:
        insertElement();
      break;
case KeyEvent.VK_DOWN:
    ListScrollingUtilEx.moveDown(myList,e.getModifiersEx());
  break;
case KeyEvent.VK_UP:
ListScrollingUtilEx.moveUp(myList,e.getModifiersEx());
break;
case KeyEvent.VK_PAGE_UP:
ListScrollingUtil.movePageUp(myList);
break;
case KeyEvent.VK_PAGE_DOWN:
ListScrollingUtil.movePageDown(myList);
break;
case KeyEvent.VK_ENTER:
if (myList.getSelectedValue() == OUR_EXTRA_ELEMENT) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current());
e.consume();
}
break;
}
}
}
);
myTextField.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent actionEvent){
close(true);
}
}
);
myListModel=new DefaultListModel();
myList=new JList(myListModel);
myList.setFocusable(false);
myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_SELECTION);
myList.addMouseListener(new MouseAdapter(){
public void mouseClicked(MouseEvent e){
if (!myTextField.hasFocus()) {
myTextField.requestFocus();
}
if (e.getClickCount() == 2) {
if (myList.getSelectedValue() == OUR_EXTRA_ELEMENT) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current());
e.consume();
}
 else {
close(true);
}
}
}
}
);
myList.setCellRenderer(myModel.getListCellRenderer());
myList.setFont(editorFont);
myList.addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
choosenElementMightChange();
}
}
);
myListScrollPane=new JScrollPane(myList);
if (!"Motif".equals(UIManager.getLookAndFeel().getID())) {
LookAndFeel.installBorder(myTextFieldPanel,"PopupMenu.border");
}
LookAndFeel.installColorsAndFont(myTextFieldPanel,"PopupMenu.background","PopupMenu.foreground","PopupMenu.font");
LookAndFeel.installColorsAndFont(myCheckBox,"PopupMenu.background","PopupMenu.foreground","PopupMenu.font");
showTextFieldPanel();
ensureNamesLoaded(myCheckBox.isSelected());
if (modalityState != null) {
rebuildList(0,0,null,modalityState);
}
}
