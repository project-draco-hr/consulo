{
  String namePattern=getNamePattern(pattern);
  String qualifierPattern=getQualifierPattern(pattern);
  boolean isAnnotation=namePattern.startsWith("@");
  boolean empty=namePattern.length() == 0 || isAnnotation && namePattern.length() == 1;
  if (empty && !isShowListForEmptyPattern())   return;
  List<String> namesList=new ArrayList<String>();
  getNamesByPattern(myCheckboxState,this,namesList,namePattern);
  if (myCancelled) {
    throw new ProcessCanceledException();
  }
  Collections.sort(namesList,new MatchesComparator(pattern));
  boolean overflow=false;
  List<Object> sameNameElements=new SmartList<Object>();
  All:   for (  String name : namesList) {
    if (myCancelled) {
      throw new ProcessCanceledException();
    }
    final Object[] elements=myModel.getElementsByName(name,myCheckboxState);
    sameNameElements.clear();
    for (    final Object element : elements) {
      if (isAnnotation) {
        if (!(element instanceof PsiClass))         continue;
        if (!((PsiClass)element).isAnnotationType())         continue;
      }
      if (matchesQualifier(element,qualifierPattern)) {
        sameNameElements.add(element);
      }
    }
    sortByProximity(sameNameElements);
    for (    Object element : sameNameElements) {
      elementsArray.add(element);
      if (elementsArray.size() >= myMaximumListSizeLimit) {
        overflow=true;
        break All;
      }
    }
  }
  if (overflow) {
    elementsArray.add(EXTRA_ELEM);
  }
}
