{
  final boolean invert[]=new boolean[]{false};
  NodeDescriptor.NodeComparator<NodeDescriptor> c=new NodeDescriptor.NodeComparator<NodeDescriptor>(){
    @Override public int compare(    NodeDescriptor o1,    NodeDescriptor o2){
      return invert[0] ? AlphaComparator.INSTANCE.compare(o2,o1) : AlphaComparator.INSTANCE.compare(o1,o2);
    }
  }
;
  myComparator.setDelegate(c);
  buildStructure(myRoot);
  buildNode("/",false);
  assertTree("-/\n" + " +com\n" + " +jetbrains\n"+ " +org\n"+ " +xunit\n");
  updateFromRoot();
  updateFromRoot();
  updateFromRoot();
  assertTrue(getMyBuilder().getUi().myOwnComparatorStamp > c.getStamp());
  invert[0]=true;
  c.incStamp();
  updateFrom(new NodeElement("/"),false);
  assertTree("-/\n" + " +xunit\n" + " +org\n"+ " +jetbrains\n"+ " +com\n");
}
