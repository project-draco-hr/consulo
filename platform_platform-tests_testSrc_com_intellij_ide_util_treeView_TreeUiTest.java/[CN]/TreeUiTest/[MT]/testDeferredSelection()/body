{
  buildStructure(myRoot,false);
  final Ref<Boolean> queued=new Ref<Boolean>(false);
  final Ref<Boolean> intellijSelected=new Ref<Boolean>(false);
  final Ref<Boolean> jetbrainsSelected=new Ref<Boolean>(false);
  invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      try {
        getBuilder().select(new NodeElement("intellij"),new Runnable(){
          @Override public void run(){
            intellijSelected.set(true);
          }
        }
,true);
        queued.set(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail();
      }
    }
  }
);
  new WaitFor(){
    @Override protected boolean condition(){
      return queued.get();
    }
  }
;
  assertTrue(getBuilder().getUi().isIdle());
  assertTreeNow("+null\n");
  assertNull(((DefaultMutableTreeNode)notNull(getBuilder().getTreeModel()).getRoot()).getUserObject());
  invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      getBuilder().getUi().activate(true);
      getBuilder().select(new NodeElement("jetbrains"),new Runnable(){
        @Override public void run(){
          jetbrainsSelected.set(true);
        }
      }
,true);
    }
  }
);
  waitBuilderToCome(new Condition<Object>(){
    @Override public boolean value(    Object object){
      return intellijSelected.get() && jetbrainsSelected.get();
    }
  }
);
  assertTree("-/\n" + " -com\n" + "  +[intellij]\n"+ " +[jetbrains]\n"+ " +org\n"+ " +xUnit\n");
}
