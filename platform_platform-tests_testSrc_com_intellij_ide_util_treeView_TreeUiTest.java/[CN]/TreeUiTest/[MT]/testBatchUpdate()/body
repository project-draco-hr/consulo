{
  buildStructure(myRoot);
  myElementUpdate.clear();
  final NodeElement[] toExpand=new NodeElement[]{new NodeElement("com"),new NodeElement("jetbrains"),new NodeElement("org"),new NodeElement("xunit")};
  final ActionCallback done=new ActionCallback();
  final Ref<ProgressIndicator> indicatorRef=new Ref<ProgressIndicator>();
  final Ref<ActionCallback> ready=new Ref<ActionCallback>();
  myElementUpdateHook=new ElementUpdateHook(){
    @Override public void onElementAction(    String action,    Object element){
      if (new NodeElement("jetbrains").equals(element) && ready.get() == null) {
        ActionCallback readyCallback=new ActionCallback();
        assertFalse(getBuilder().getUi().isReady());
        getBuilder().getReady(this).notify(readyCallback);
        ready.set(readyCallback);
      }
    }
  }
;
  invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      getBuilder().batch(new Progressive(){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          indicatorRef.set(indicator);
          expandNext(toExpand,0,indicator,done);
        }
      }
).notify(done);
    }
  }
);
  waitBuilderToCome(new Condition(){
    @Override public boolean value(    Object o){
      return done.isProcessed();
    }
  }
);
  assertTrue(done.isDone());
  assertNotNull(ready.get());
  assertTrue(ready.get().isDone());
  assertTree("-/\n" + " -com\n" + "  +intellij\n"+ " -jetbrains\n"+ "  +fabrique\n"+ " -org\n"+ "  +eclipse\n"+ " -xunit\n"+ "  runner\n");
  assertFalse(indicatorRef.get().isCanceled());
}
