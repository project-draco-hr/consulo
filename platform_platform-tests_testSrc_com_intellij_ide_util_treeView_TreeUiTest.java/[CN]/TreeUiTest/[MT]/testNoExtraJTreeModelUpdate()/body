{
  buildStructure(myRoot);
  expand(getPath("/"));
  assertTree("-/\n" + " +com\n" + " +jetbrains\n"+ " +org\n"+ " +xUnit\n");
  final Ref<StringBuffer> updates=new Ref<StringBuffer>(new StringBuffer());
  notNull(getMyBuilder().getTreeModel()).addTreeModelListener(new TreeModelListener(){
    @Override public void treeNodesChanged(    TreeModelEvent e){
      updates.get().append("changed parent").append(e.getTreePath()).append(" children=").append(Arrays.asList(e.getChildren())).append("\n");
    }
    @Override public void treeNodesInserted(    TreeModelEvent e){
      updates.get().append("inserted=").append(e.getTreePath()).append("\n");
    }
    @Override public void treeNodesRemoved(    TreeModelEvent e){
      updates.get().append("removed=").append(e.getTreePath()).append("\n");
    }
    @Override public void treeStructureChanged(    TreeModelEvent e){
      updates.get().append("structureChanged=").append(e.getTreePath()).append("\n");
    }
  }
);
  assertEquals("",updates.get().toString());
  updateFromRoot();
  assertEquals("",updates.get().toString());
  myChanges.add(new NodeElement("com"));
  updateFromRoot();
  assertEquals("changed parent[/] children=[com]\n",updates.get().toString());
  assertTree("-/\n" + " +com\n" + " +jetbrains\n"+ " +org\n"+ " +xUnit\n");
  updates.set(new StringBuffer());
  updateFrom(new NodeElement("org"));
  assertEquals("",updates.get().toString());
  myChanges.add(new NodeElement("org"));
  updateFrom(new NodeElement("org"));
  assertEquals("changed parent[/] children=[org]\n",updates.get().toString());
  updates.set(new StringBuffer());
  myChanges.add(new NodeElement("intellij"));
  updateFromRoot();
  assertEquals("",updates.get().toString());
}
