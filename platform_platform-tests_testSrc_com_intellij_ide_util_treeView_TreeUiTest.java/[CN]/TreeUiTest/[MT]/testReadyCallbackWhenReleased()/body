{
  buildStructure(myRoot);
  final Ref<Boolean> done=new Ref<Boolean>(false);
  final Ref<Boolean> rejected=new Ref<Boolean>(false);
  final Ref<Boolean> processed=new Ref<Boolean>(false);
  final Ref<Boolean> wasUiNull=new Ref<Boolean>(true);
  final Ref<Runnable> addReadyCallbacks=new Ref<Runnable>(new Runnable(){
    public void run(){
      getBuilder().getReady(this).doWhenDone(new NamedRunnable("on done"){
        @Override public void run(){
          wasUiNull.set(getBuilder().getUi() == null);
          done.set(true);
        }
      }
).doWhenRejected(new NamedRunnable("on rejected"){
        @Override public void run(){
          wasUiNull.set(getBuilder().getUi() == null);
          rejected.set(true);
        }
      }
).doWhenProcessed(new NamedRunnable("on processed"){
        @Override public void run(){
          processed.set(true);
        }
      }
);
    }
  }
);
  final Ref<Boolean> disposeRequested=new Ref<Boolean>(false);
  myElementUpdateHook=new ElementUpdateHook(){
    @Override public void onElementAction(    String action,    Object element){
      if (addReadyCallbacks.get() != null) {
        addReadyCallbacks.get().run();
        addReadyCallbacks.set(null);
      }
      if (element.equals(new NodeElement("ide"))) {
        disposeRequested.set(true);
        getBuilder().dispose();
      }
    }
  }
;
  invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      getBuilder().expand(new NodeElement("fabrique"),null);
    }
  }
);
  waitBuilderToCome(new Condition<Object>(){
    @Override public boolean value(    Object o){
      return disposeRequested.get();
    }
  }
);
  assertTrue(wasUiNull.get());
  assertFalse(done.get());
  assertTrue(rejected.get());
  assertTrue(processed.get());
}
