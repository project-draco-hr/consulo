{
  myComparator.setDelegate(new NodeDescriptor.NodeComparator<NodeDescriptor>(){
    @Override public int compare(    NodeDescriptor o1,    NodeDescriptor o2){
      boolean isParent1=myStructure._getChildElements(o1.getElement(),false).length > 0;
      boolean isParent2=myStructure._getChildElements(o2.getElement(),false).length > 0;
      int result=AlphaComparator.INSTANCE.compare(o1,o2);
      if (isParent1) {
        result-=1000;
      }
      if (isParent2) {
        result+=1000;
      }
      return result;
    }
  }
);
  buildStructure(myRoot);
  myRoot.addChild("toDelete");
  select(new NodeElement("toDelete"),false);
  assertTree("-/\n" + " +com\n" + " +jetbrains\n"+ " +org\n"+ " +xunit\n"+ " [toDelete]\n");
  if (keepRef) {
    removeFromParentButKeepRef(new NodeElement("toDelete"));
  }
 else {
    myStructure.getNodeFor(new NodeElement("toDelete")).delete();
  }
  getMyBuilder().addSubtreeToUpdateByElement(new NodeElement("/"));
  assertTree("-/\n" + " +com\n" + " +jetbrains\n"+ " +org\n"+ " +[xunit]\n");
}
