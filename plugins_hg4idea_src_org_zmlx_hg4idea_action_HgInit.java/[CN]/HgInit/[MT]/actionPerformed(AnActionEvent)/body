{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null) {
    LOG.warn("[actionPerformed] project is null");
    return;
  }
  final FileChooserDescriptor fcd=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  fcd.setTitle(HgVcsMessages.message("hg4idea.init.destination.directory.title"));
  fcd.setDescription(HgVcsMessages.message("hg4idea.init.destination.directory.description"));
  fcd.setHideIgnored(false);
  final VirtualFile baseDir=project.getBaseDir();
  final VirtualFile[] files=FileChooser.chooseFiles(project,fcd,baseDir);
  if (files.length == 0) {
    return;
  }
  final VirtualFile root=files[0];
  final HgVcs hgVcs=HgVcs.getInstance(project);
  if (hgVcs.isVersionedDirectory(root)) {
    Messages.showErrorDialog(project,HgVcsMessages.message("hg4idea.init.error.already.under.hg",root.getPresentableUrl()),HgVcsMessages.message("hg4idea.init.error.title"));
    return;
  }
  (new HgInitCommand(project)).execute(root);
  root.refresh(false,false);
  final String path=root.equals(baseDir) ? "" : root.getPath();
  ProjectLevelVcsManager vcs=ProjectLevelVcsManager.getInstance(project);
  final List<VcsDirectoryMapping> vcsDirectoryMappings=new ArrayList<VcsDirectoryMapping>(vcs.getDirectoryMappings());
  VcsDirectoryMapping mapping=new VcsDirectoryMapping(path,HgVcs.VCS_NAME);
  for (int i=0; i < vcsDirectoryMappings.size(); i++) {
    final VcsDirectoryMapping m=vcsDirectoryMappings.get(i);
    if (m.getDirectory().equals(path)) {
      if (m.getVcs().length() == 0) {
        vcsDirectoryMappings.set(i,mapping);
        mapping=null;
        break;
      }
 else       if (m.getVcs().equals(mapping.getVcs())) {
        mapping=null;
        break;
      }
    }
  }
  if (mapping != null) {
    vcsDirectoryMappings.add(mapping);
  }
  vcs.setDirectoryMappings(vcsDirectoryMappings);
  vcs.updateActiveVcss();
}
