{
  final GrExpression lop=binaryExpression.getLeftOperand();
  PsiType lType=lop == null ? null : lop.getType();
  final GrExpression rop=binaryExpression.getRightOperand();
  PsiType rType=rop == null ? null : rop.getType();
  if (lType == null || rType == null)   return null;
  String lCanonical=lType.getCanonicalText();
  String rCanonical=rType.getCanonicalText();
  if (TYPE_TO_RANK.containsKey(lCanonical) && TYPE_TO_RANK.containsKey(rCanonical)) {
    int lRank=TYPE_TO_RANK.get(lCanonical);
    int rRank=TYPE_TO_RANK.get(rCanonical);
    int resultRank=Math.max(lRank,rRank);
    return binaryExpression.getManager().getElementFactory().createTypeByFQClassName(RANK_TO_TYPE.get(resultRank),binaryExpression.getResolveScope());
  }
  if (lType instanceof PsiClassType) {
    final PsiClass lClass=((PsiClassType)lType).resolve();
    if (lClass != null) {
      final IElementType tokenType=binaryExpression.getOperationTokenType();
      final String operatorName=ourBinaryOperationsToOperatorNames.get(tokenType);
      if (operatorName != null) {
        MethodResolverProcessor processor=new MethodResolverProcessor(operatorName,binaryExpression,false,false,new PsiType[]{rType});
        lClass.processDeclarations(processor,PsiSubstitutor.EMPTY,null,binaryExpression);
        final GroovyResolveResult[] candidates=processor.getCandidates();
        if (candidates.length == 1) {
          final PsiElement element=candidates[0].getElement();
          if (element instanceof PsiMethod) {
            return ((PsiMethod)element).getReturnType();
          }
        }
      }
    }
  }
  return null;
}
