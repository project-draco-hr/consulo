{
  return new JavaElementVisitor(){
    @Override public void visitMethodCallExpression(    final PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      final Project project=expression.getProject();
      final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
      final PsiElement target=expression.getMethodExpression().resolve();
      if (!(target instanceof PsiMethod))       return;
      final PsiMethod method=(PsiMethod)target;
      if (!SETTER_METHOD_NAME.equals(method.getName()))       return;
      final PsiClass aClass=((PsiMethod)target).getContainingClass();
      final PsiClass comboClass=facade.findClass(COMBO_BOX_CLASS_NAME,GlobalSearchScope.allScope(project));
      if (!InheritanceUtil.isInheritorOrSelf(aClass,comboClass,true))       return;
      final PsiExpression[] arguments=expression.getArgumentList().getExpressions();
      if (arguments.length != 1)       return;
      final PsiType type=arguments[0].getType();
      if (!(type instanceof PsiClassType))       return;
      final PsiClass rendererClass=((PsiClassType)type).resolve();
      for (      String rightClassName : RIGHT_RENDERER_CLASS_NAMES) {
        final PsiClass rightClass=facade.findClass(rightClassName,GlobalSearchScope.allScope(project));
        if (InheritanceUtil.isInheritorOrSelf(rendererClass,rightClass,true))         return;
      }
      holder.registerProblem(expression,MESSAGE);
    }
  }
;
}
