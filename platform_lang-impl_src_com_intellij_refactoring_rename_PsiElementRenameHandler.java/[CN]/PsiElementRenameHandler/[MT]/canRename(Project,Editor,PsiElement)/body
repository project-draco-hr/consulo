{
  if (element == null)   return false;
  if (!(element instanceof PsiFile) && CollectHighlightsUtil.isOutsideSourceRootJavaFile(element.getContainingFile()))   return false;
  boolean hasRenameProcessor=RenamePsiElementProcessor.forElement(element) != RenamePsiElementProcessor.DEFAULT;
  boolean hasWritableMetaData=element instanceof PsiMetaOwner && ((PsiMetaOwner)element).getMetaData() instanceof PsiWritableMetaData;
  if (!hasRenameProcessor && !hasWritableMetaData && !(element instanceof PsiNamedElement)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.symbol"));
    if (!ApplicationManager.getApplication().isUnitTestMode()) {
      showErrorMessage(project,editor,message);
    }
    return false;
  }
  if (!PsiManager.getInstance(project).isInProject(element) && element.isPhysical()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.out.of.project.element",UsageViewUtil.getType(element)));
    showErrorMessage(project,editor,message);
    return false;
  }
  if (InjectedLanguageUtil.isInInjectedLanguagePrefixSuffix(element)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.in.injected.lang.prefix.suffix",UsageViewUtil.getType(element)));
    showErrorMessage(project,editor,message);
    return false;
  }
  return true;
}
