{
  return new BaseInspectionVisitor(){
    @Override public void visitMethod(    GrMethod method){
      super.visitMethod(method);
      final GrOpenBlock block=method.getBlock();
      if (block != null) {
        processLocalVars(block);
      }
    }
    @Override public void visitFile(    GroovyFileBase file){
      super.visitFile(file);
      if (file instanceof GroovyFile && file.isScript()) {
        processLocalVars(file);
      }
    }
    @Override public void visitField(    GrField field){
      super.visitField(field);
      final GrExpression initializer=field.getInitializerGroovy();
      if (initializer != null) {
        processLocalVars(initializer);
      }
    }
    @Override public void visitClassInitializer(    GrClassInitializer initializer){
      super.visitClassInitializer(initializer);
      processLocalVars(initializer);
    }
    private void processLocalVars(    GroovyPsiElement scope){
      MultiMap<PsiElement,GrVariable> scopes=collectVariables(scope);
      for (      Map.Entry<PsiElement,Collection<GrVariable>> entry : scopes.entrySet()) {
        final PsiElement scopeToProcess=entry.getKey();
        final Map<String,GrVariable> variables=ContainerUtil.newHashMap();
        for (        GrVariable var : entry.getValue()) {
          variables.put(var.getName(),var);
        }
        final List<ReadWriteVariableInstruction> result=checkFlow(getFlow(scopeToProcess),variables);
        if (result != null) {
          for (          ReadWriteVariableInstruction instruction : result) {
            if (variables.containsKey(instruction.getVariableName())) {
              registerError(instruction.getElement(),GroovyBundle.message("cannot.assign.a.value.to.final.field.0",instruction.getVariableName()),LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
            }
          }
        }
      }
    }
  }
;
}
