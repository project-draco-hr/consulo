{
  try {
    final PsiExpression[] args=list.getExpressions();
    final PsiType[] types=list.getExpressionTypes();
    ColorConstructors type=getConstructorType(types);
    if (type != null) {
switch (type) {
case INT:
        return new Color(getInt(args[0]));
case INT_BOOL:
      return new Color(getInt(args[0]),getBoolean(args[1]));
case INT_x3:
    return new Color(getInt(args[0]),getInt(args[1]),getInt(args[2]));
case INT_x4:
  return new Color(getInt(args[0]),getInt(args[1]),getInt(args[2]),getInt(args[3]));
case FLOAT_x3:
return new Color(getFloat(args[0]),getFloat(args[1]),getFloat(args[2]));
case FLOAT_x4:
return new Color(getFloat(args[0]),getFloat(args[1]),getFloat(args[2]),getFloat(args[3]));
}
}
}
 catch (Exception ignore) {
}
return null;
}
