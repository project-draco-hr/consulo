{
  if (!file.exists())   return;
  FacetTypeRegistry facetTypeRegistry=FacetTypeRegistry.getInstance();
  ModuleManager moduleManager=ModuleManager.getInstance(myProject);
  Document document;
  try {
    document=JDOMUtil.loadDocument(file);
  }
 catch (  Exception e) {
    LOG.info(e);
    return;
  }
  DetectedFacetsBean detectedFacetsBean=XmlSerializer.deserialize(document,DetectedFacetsBean.class);
  if (detectedFacetsBean == null)   return;
  for (  DetectedFacetBean facetBean : detectedFacetsBean.myFacets) {
    FacetType type=facetTypeRegistry.findFacetType(facetBean.myTypeId);
    if (type == null) {
      LOG.info("facet type '" + facetBean.myTypeId + " not found");
      continue;
    }
    Module module=moduleManager.findModuleByName(facetBean.myModuleName);
    if (module == null) {
      LOG.info("module '" + facetBean.myModuleName + "' not found");
      continue;
    }
    FacetInfo2<Module> underlyingFacet;
    String underlyingId=facetBean.myUnderlyingId;
    if (underlyingId.startsWith("/")) {
      underlyingFacet=findById(Integer.parseInt(underlyingId.substring(1)));
    }
 else {
      Facet facet=FacetPointersManager.getInstance(myProject).create(underlyingId).getFacet();
      underlyingFacet=facet != null ? getOrCreateInfo(facet) : null;
    }
    FacetConfiguration configuration=type.createDefaultConfiguration();
    try {
      FacetUtil.loadFacetConfiguration(configuration,facetBean.myConfiguration);
    }
 catch (    InvalidDataException e) {
      LOG.info(e);
      continue;
    }
    int id=facetBean.myId;
    myNextId=Math.max(myNextId,id + 1);
    addFacetInfo(new DetectedFacetInfoImpl<Module>(facetBean.myFacetName,configuration,type,module,underlyingFacet,null,id,facetBean.myDetectorId));
  }
}
