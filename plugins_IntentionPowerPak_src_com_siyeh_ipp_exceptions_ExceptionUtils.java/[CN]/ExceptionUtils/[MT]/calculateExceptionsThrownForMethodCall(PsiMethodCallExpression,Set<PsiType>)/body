{
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=argumentList.getExpressions();
  for (  PsiExpression expression : expressions) {
    calculateExceptionsThrown(expression,exceptionTypes);
  }
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  calculateExceptionsThrown(methodExpression,exceptionTypes);
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method != null) {
    final PsiReferenceList throwsList=method.getThrowsList();
    final PsiJavaCodeReferenceElement[] list=throwsList.getReferenceElements();
    for (    final PsiJavaCodeReferenceElement referenceElement : list) {
      final PsiClass exceptionClass=(PsiClass)referenceElement.resolve();
      if (exceptionClass != null) {
        final PsiManager psiManager=exceptionClass.getManager();
        final PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
        final PsiClassType exceptionType=factory.createType(exceptionClass);
        exceptionTypes.add(exceptionType);
      }
    }
  }
}
