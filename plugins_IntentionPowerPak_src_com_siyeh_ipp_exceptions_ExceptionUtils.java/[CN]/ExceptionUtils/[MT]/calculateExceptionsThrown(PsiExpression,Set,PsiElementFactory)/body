{
  if (exp == null) {
    return;
  }
  if (exp instanceof PsiThisExpression || exp instanceof PsiLiteralExpression || exp instanceof PsiSuperExpression|| exp instanceof PsiClassObjectAccessExpression) {
  }
 else   if (exp instanceof PsiTypeCastExpression) {
    calculateExceptionsThrownForTypeCast((PsiTypeCastExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiInstanceOfExpression) {
    calculateExceptionsThrownForInstanceOf((PsiInstanceOfExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiReferenceExpression) {
    final PsiReferenceExpression refExp=(PsiReferenceExpression)exp;
    final PsiExpression qualifier=refExp.getQualifierExpression();
    if (qualifier != null) {
      calculateExceptionsThrown(qualifier,exceptionTypes,factory);
    }
  }
 else   if (exp instanceof PsiMethodCallExpression) {
    calculateExceptionsThrownForMethodCall((PsiMethodCallExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiNewExpression) {
    calculateExceptionsThrownForNewExpression((PsiNewExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiArrayInitializerExpression) {
    calculateExceptionsThrownForArrayInitializerExpression((PsiArrayInitializerExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiArrayAccessExpression) {
    calculateExceptionsThrownForArrayAccessExpression((PsiArrayAccessExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiPrefixExpression) {
    calculateExceptionsThrownForPrefixException((PsiPrefixExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiPostfixExpression) {
    calculateExceptionsThrownForPostixExpression((PsiPostfixExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiBinaryExpression) {
    calculateExceptionsThrownForBinaryExpression((PsiBinaryExpression)exp,exceptionTypes,factory);
  }
 else   if (exp instanceof PsiConditionalExpression) {
    calculateExceptionsThrownForConditionalExcpression((PsiConditionalExpression)exp,exceptionTypes,factory);
  }
}
