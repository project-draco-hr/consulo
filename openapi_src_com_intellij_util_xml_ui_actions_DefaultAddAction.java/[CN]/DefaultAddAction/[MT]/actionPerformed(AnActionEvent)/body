{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (beforeAddition()) {
        final DomElement parent=getParentDomElement();
        final int[] index=new int[]{-1};
        final DomCollectionChildDescription[] description=new DomCollectionChildDescription[]{null};
        final DomManager domManager=parent.getManager();
        final ClassChooser[] oldChooser=new ClassChooser[]{null};
        final Class[] aClass=new Class[]{null};
        final String[] name=new String[]{null};
        new WriteCommandAction(domManager.getProject()){
          protected void run(          Result result) throws Throwable {
            final T t=doAdd();
            name[0]=t.getXmlElementName();
            description[0]=parent.getGenericInfo().getCollectionChildDescription(name[0]);
            index[0]=description[0].getValues(parent).indexOf(t);
            aClass[0]=DomUtil.getRawType(description[0].getType());
            oldChooser[0]=ClassChooserManager.getClassChooser(aClass[0]);
            ClassChooserManager.registerClassChooser(aClass[0],new ClassChooser(){
              public Class<? extends T> chooseClass(              final XmlTag tag){
                if (tag == getParentDomElement().getXmlTag().findSubTags(name[0])[index[0]]) {
                  return getElementClass();
                }
                return oldChooser[0].chooseClass(tag);
              }
              public void distinguishTag(              final XmlTag tag,              final Class aClass) throws IncorrectOperationException {
                oldChooser[0].distinguishTag(tag,aClass);
              }
              public Class[] getChooserClasses(){
                return oldChooser[0].getChooserClasses();
              }
            }
);
          }
        }
.execute();
        ClassChooserManager.registerClassChooser(aClass[0],oldChooser[0]);
        afterAddition(e,description[0].getValues(getParentDomElement()).get(index[0]));
      }
    }
  }
);
}
