{
  PsiClass klass=findSourceElement(element);
  if (klass == null)   return Collections.emptySet();
  GlobalSearchScope scope=GlobalSearchScope.moduleTestsWithDependentsScope(getModule(element));
  String klassName=klass.getName();
  Pattern pattern=Pattern.compile(".*" + klassName + ".*");
  List<Pair<PsiElement,Integer>> classesWithProximities=new ArrayList<Pair<PsiElement,Integer>>();
  PsiShortNamesCache cache=JavaPsiFacade.getInstance(element.getProject()).getShortNamesCache();
  for (  String eachName : cache.getAllClassNames()) {
    if (pattern.matcher(eachName).matches()) {
      for (      PsiClass eachClass : cache.getClassesByName(eachName,scope)) {
        if (TestUtil.isTestClass(eachClass)) {
          classesWithProximities.add(new Pair<PsiElement,Integer>(eachClass,calcTestNameProximity(klassName,eachName)));
        }
      }
    }
  }
  Collections.sort(classesWithProximities,new Comparator<Pair<PsiElement,Integer>>(){
    public int compare(    Pair<PsiElement,Integer> o1,    Pair<PsiElement,Integer> o2){
      return o1.second.compareTo(o2.second);
    }
  }
);
  List<PsiElement> result=new ArrayList<PsiElement>();
  for (  Pair<PsiElement,Integer> each : classesWithProximities) {
    result.add(each.first);
  }
  return result;
}
