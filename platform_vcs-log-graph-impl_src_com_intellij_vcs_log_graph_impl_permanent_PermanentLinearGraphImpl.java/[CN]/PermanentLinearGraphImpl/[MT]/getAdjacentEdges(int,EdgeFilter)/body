{
  List<GraphEdge> result=new SmartList<>();
  boolean hasUpSimpleEdge=nodeIndex != 0 && mySimpleNodes.get(nodeIndex - 1);
  if (hasUpSimpleEdge && filter.upNormal)   result.add(new GraphEdge(nodeIndex - 1,nodeIndex,null,USUAL));
  for (int i=myNodeToEdgeIndex.get(nodeIndex); i < myNodeToEdgeIndex.get(nodeIndex + 1); i++) {
    int adjacentNode=myLongEdges.get(i);
    if (adjacentNode < 0 && filter.special) {
      result.add(GraphEdge.createEdgeWithTargetId(nodeIndex,adjacentNode,GraphEdgeType.NOT_LOAD_COMMIT));
    }
    if (adjacentNode < 0)     continue;
    if (nodeIndex > adjacentNode && filter.upNormal)     result.add(new GraphEdge(adjacentNode,nodeIndex,null,USUAL));
    if (nodeIndex < adjacentNode && filter.downNormal)     result.add(new GraphEdge(nodeIndex,adjacentNode,null,USUAL));
  }
  if (mySimpleNodes.get(nodeIndex) && filter.downNormal)   result.add(new GraphEdge(nodeIndex,nodeIndex + 1,null,USUAL));
  return result;
}
