{
  if (PlatformDataKeys.NAVIGATABLE.is(dataId)) {
    final AntBuildFile buildFile=getCurrentBuildFile();
    if (buildFile == null) {
      return null;
    }
    final VirtualFile file=buildFile.getVirtualFile();
    if (file == null) {
      return null;
    }
    final TreePath treePath=myTree.getLeadSelectionPath();
    if (treePath == null) {
      return null;
    }
    final DefaultMutableTreeNode node=(DefaultMutableTreeNode)treePath.getLastPathComponent();
    if (node == null) {
      return null;
    }
    if (node.getUserObject() instanceof AntTargetNodeDescriptor) {
      final AntTargetNodeDescriptor targetNodeDescriptor=(AntTargetNodeDescriptor)node.getUserObject();
      final AntBuildTargetBase buildTarget=targetNodeDescriptor.getTarget();
      final OpenFileDescriptor descriptor=buildTarget.getOpenFileDescriptor();
      if (descriptor != null) {
        final VirtualFile descriptorFile=descriptor.getFile();
        if (descriptorFile.isValid()) {
          return descriptor;
        }
      }
    }
    if (file.isValid()) {
      return new OpenFileDescriptor(myProject,file);
    }
  }
 else   if (PlatformDataKeys.HELP_ID.is(dataId)) {
    return HelpID.ANT;
  }
 else   if (PlatformDataKeys.TREE_EXPANDER.is(dataId)) {
    return myTreeExpander;
  }
 else   if (PlatformDataKeys.VIRTUAL_FILE_ARRAY.is(dataId)) {
    final TreePath[] paths=myTree.getSelectionPaths();
    if (paths == null) {
      return null;
    }
    final ArrayList<VirtualFile> result=new ArrayList<VirtualFile>();
    for (    final TreePath path : paths) {
      for (DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent(); node != null; node=(DefaultMutableTreeNode)node.getParent()) {
        final Object userObject=node.getUserObject();
        if (!(userObject instanceof AntBuildFileNodeDescriptor)) {
          continue;
        }
        final AntBuildFile buildFile=((AntBuildFileNodeDescriptor)userObject).getBuildFile();
        if (buildFile != null) {
          final VirtualFile virtualFile=buildFile.getVirtualFile();
          if (virtualFile != null && virtualFile.isValid()) {
            result.add(virtualFile);
          }
        }
        break;
      }
    }
    if (result.size() == 0) {
      return null;
    }
    return VfsUtil.toVirtualFileArray(result);
  }
  return super.getData(dataId);
}
