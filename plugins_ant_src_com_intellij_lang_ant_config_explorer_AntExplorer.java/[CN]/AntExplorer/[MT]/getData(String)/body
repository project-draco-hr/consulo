{
  if (DataConstants.NAVIGATABLE.equals(dataId)) {
    AntBuildFile buildFile=getCurrentBuildFile();
    if (buildFile == null) {
      return null;
    }
    final PsiFile file=buildFile.getAntFile();
    if (file == null) {
      return null;
    }
    TreePath treePath=myTree.getLeadSelectionPath();
    if (treePath == null) {
      return null;
    }
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)treePath.getLastPathComponent();
    if (node == null) {
      return null;
    }
    if (node.getUserObject() instanceof AntTargetNodeDescriptor) {
      AntTargetNodeDescriptor targetNodeDescriptor=(AntTargetNodeDescriptor)node.getUserObject();
      AntBuildTargetBase buildTarget=targetNodeDescriptor.getTarget();
      final OpenFileDescriptor descriptor=buildTarget.getOpenFileDescriptor();
      if (descriptor != null) {
        final VirtualFile descriptorFile=descriptor.getFile();
        if (descriptorFile != null && descriptorFile.isValid()) {
          return descriptor;
        }
      }
    }
    if (file.isValid()) {
      final VirtualFile virtualFile=file.getVirtualFile();
      if (virtualFile != null && virtualFile.isValid()) {
        return new OpenFileDescriptor(myProject,virtualFile);
      }
    }
  }
 else   if (DataConstantsEx.HELP_ID.equals(dataId)) {
    return HelpID.ANT;
  }
 else   if (DataConstantsEx.TREE_EXPANDER.equals(dataId)) {
    return myTreeExpander;
  }
 else   if (DataConstants.VIRTUAL_FILE_ARRAY.equals(dataId)) {
    TreePath[] paths=myTree.getSelectionPaths();
    if (paths == null) {
      return null;
    }
    ArrayList<VirtualFile> result=new ArrayList<VirtualFile>();
    for (    TreePath path : paths) {
      for (DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent(); node != null; node=(DefaultMutableTreeNode)node.getParent()) {
        Object userObject=node.getUserObject();
        if (!(userObject instanceof AntBuildFileNodeDescriptor)) {
          continue;
        }
        AntBuildFile buildFile=((AntBuildFileNodeDescriptor)userObject).getBuildFile();
        if (buildFile != null) {
          VirtualFile virtualFile=buildFile.getVirtualFile();
          if (virtualFile != null) {
            result.add(virtualFile);
          }
        }
        break;
      }
    }
    if (result.size() == 0) {
      return null;
    }
    return result.toArray(new VirtualFile[result.size()]);
  }
  return null;
}
