{
  super(new BorderLayout(0,2));
  myProject=project;
  final DefaultTreeModel model=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(model);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new NodeRenderer());
  myBuilder=new AntExplorerTreeBuilder(project,myTree,model);
  myBuilder.setTargetsFiltered(AntConfigurationBase.getInstance(project).isFilterTargets());
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  new TreeSpeedSearch(myTree);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      popupInvoked(comp,x,y);
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        final TreePath path=myTree.getPathForLocation(e.getX(),e.getY());
        if (path != null) {
          runSelection(DataManager.getInstance().getDataContext(myTree));
        }
      }
    }
  }
);
  myTree.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      runSelection(DataManager.getInstance().getDataContext(myTree));
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  myTree.expandRow(0);
  myTree.setLineStyleAngled();
  myAntBuildFilePropertiesAction=new AntBuildFilePropertiesAction(this);
  add(createToolbarPanel(),BorderLayout.NORTH);
  add(new JScrollPane(myTree),BorderLayout.CENTER);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myKeymapListener=new KeymapListener();
}
