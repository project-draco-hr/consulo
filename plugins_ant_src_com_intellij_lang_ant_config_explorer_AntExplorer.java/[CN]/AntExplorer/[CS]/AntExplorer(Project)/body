{
  super(true,true);
  setTransferHandler(new MyTransferHandler());
  myProject=project;
  myConfig=AntConfiguration.getInstance(project);
  final DefaultTreeModel model=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(model);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new NodeRenderer());
  myBuilder=new AntExplorerTreeBuilder(project,myTree,model);
  myBuilder.setTargetsFiltered(AntConfigurationBase.getInstance(project).isFilterTargets());
  TreeUtil.installActions(myTree);
  new TreeSpeedSearch(myTree);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      popupInvoked(comp,x,y);
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      final TreePath path=myTree.getPathForLocation(e.getX(),e.getY());
      if (path != null) {
        runSelection(DataManager.getInstance().getDataContext(myTree));
        return true;
      }
      return false;
    }
  }
.installOn(myTree);
  myTree.registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      runSelection(DataManager.getInstance().getDataContext(myTree));
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),WHEN_FOCUSED);
  myTree.setLineStyleAngled();
  myAntBuildFilePropertiesAction=new AntBuildFilePropertiesAction(this);
  setToolbar(createToolbarPanel());
  setContent(ScrollPaneFactory.createScrollPane(myTree));
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myKeymapListener=new KeymapListener();
  DomManager.getDomManager(project).addDomEventListener(new DomEventListener(){
    public void eventOccured(    DomEvent event){
      myBuilder.queueUpdate();
    }
  }
,this);
  RunManagerEx.getInstanceEx(myProject).addRunManagerListener(new RunManagerAdapter(){
    public void beforeRunTasksChanged(){
      myBuilder.queueUpdate();
    }
  }
);
}
