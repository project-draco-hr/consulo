{
  final Queue<PositionedStripe> thinEnds=new PriorityQueue<PositionedStripe>(5,new Comparator<PositionedStripe>(){
    @Override public int compare(    @NotNull PositionedStripe o1,    @NotNull PositionedStripe o2){
      return o1.yEnd - o2.yEnd;
    }
  }
);
  final Queue<PositionedStripe> wideEnds=new PriorityQueue<PositionedStripe>(5,new Comparator<PositionedStripe>(){
    @Override public int compare(    @NotNull PositionedStripe o1,    @NotNull PositionedStripe o2){
      return o1.yEnd - o2.yEnd;
    }
  }
);
  final List<PositionedStripe> thinStripes=new ArrayList<PositionedStripe>();
  final List<PositionedStripe> wideStripes=new ArrayList<PositionedStripe>();
  final int[] thinYStart=new int[1];
  final int[] wideYStart=new int[1];
  DisposableIterator<RangeHighlighterEx> iterator1=markup1.overlappingIterator(startOffset,endOffset);
  DisposableIterator<RangeHighlighterEx> iterator2=markup2.overlappingIterator(startOffset,endOffset);
  IntervalTreeImpl.PeekableIterator<RangeHighlighterEx> iterator=IntervalTreeImpl.mergeIterators((IntervalTreeImpl.PeekableIterator<RangeHighlighterEx>)iterator1,(IntervalTreeImpl.PeekableIterator<RangeHighlighterEx>)iterator2,RangeHighlighterEx.BY_AFFECTED_START_OFFSET);
  try {
    ContainerUtil.process(iterator,new Processor<RangeHighlighterEx>(){
      @Override public boolean process(      @NotNull RangeHighlighterEx highlighter){
        if (!highlighter.getEditorFilter().avaliableIn(myEditor))         return true;
        Color color=highlighter.getErrorStripeMarkColor();
        if (color == null)         return true;
        boolean isThin=highlighter.isThinErrorStripeMark();
        int[] yStart=isThin ? thinYStart : wideYStart;
        List<PositionedStripe> stripes=isThin ? thinStripes : wideStripes;
        Queue<PositionedStripe> ends=isThin ? thinEnds : wideEnds;
        ProperTextRange range=offsetsToYPositions(highlighter.getStartOffset(),highlighter.getEndOffset());
        final int ys=range.getStartOffset();
        int ye=range.getEndOffset();
        if (ye - ys < myMinMarkHeight)         ye=ys + myMinMarkHeight;
        yStart[0]=drawStripesEndingBefore(ys,ends,stripes,g,yStart[0]);
        final int layer=highlighter.getLayer();
        PositionedStripe stripe=null;
        int i;
        for (i=0; i < stripes.size(); i++) {
          PositionedStripe s=stripes.get(i);
          if (s.layer == layer) {
            stripe=s;
            break;
          }
          if (s.layer < layer) {
            break;
          }
        }
        if (stripe == null) {
          if (i == 0 && yStart[0] != ys) {
            if (!stripes.isEmpty()) {
              PositionedStripe top=stripes.get(0);
              drawSpot(g,top.thin,yStart[0],ys,top.color);
            }
            yStart[0]=ys;
          }
          stripe=new PositionedStripe(color,ye,isThin,layer);
          stripes.add(i,stripe);
          ends.offer(stripe);
        }
 else {
          if (stripe.yEnd < ye) {
            if (!color.equals(stripe.color)) {
              if (i == 0 && yStart[0] != ys) {
                drawSpot(g,stripe.thin,yStart[0],ys,stripe.color);
                yStart[0]=ys;
              }
              stripe.color=color;
            }
            ends.remove(stripe);
            stripe.yEnd=ye;
            ends.offer(stripe);
          }
        }
        return true;
      }
    }
);
  }
  finally {
    iterator.dispose();
  }
  drawStripesEndingBefore(Integer.MAX_VALUE,thinEnds,thinStripes,g,thinYStart[0]);
  drawStripesEndingBefore(Integer.MAX_VALUE,wideEnds,wideStripes,g,wideYStart[0]);
}
