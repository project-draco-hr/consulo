{
  myVisualLine=visualLine;
  myShowInstantly=showInstantly;
  myHighlighters.clear();
  if (myVisualLine == -1)   return;
  int oldStartLine=myStartVisualLine;
  int oldEndLine=myEndVisualLine;
  myStartVisualLine=fitLineToEditor(myVisualLine - myPreviewLines);
  myEndVisualLine=fitLineToEditor(myVisualLine + myPreviewLines);
  isDirty|=oldStartLine != myStartVisualLine || oldEndLine != myEndVisualLine;
  for (  RangeHighlighterEx rangeHighlighter : rangeHighlighters) {
    myHighlighters.add(rangeHighlighter);
  }
  Collections.sort(myHighlighters,new Comparator<RangeHighlighterEx>(){
    @Override public int compare(    RangeHighlighterEx ex1,    RangeHighlighterEx ex2){
      LogicalPosition startPos1=myEditor.offsetToLogicalPosition(ex1.getAffectedAreaStartOffset());
      LogicalPosition startPos2=myEditor.offsetToLogicalPosition(ex2.getAffectedAreaStartOffset());
      if (startPos1.line != startPos2.line)       return 0;
      return startPos1.column - startPos2.column;
    }
  }
);
}
