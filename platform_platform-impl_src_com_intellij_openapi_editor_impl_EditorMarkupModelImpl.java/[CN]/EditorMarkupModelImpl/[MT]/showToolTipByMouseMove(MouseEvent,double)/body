{
  MouseEvent me=e;
  Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
  getNearestHighlighters(this,me,width,highlighters);
  getNearestHighlighters((MarkupModelEx)myEditor.getDocument().getMarkupModel(getEditor().getProject()),me,width,highlighters);
  if (highlighters.isEmpty())   return false;
  int minDelta=Integer.MAX_VALUE;
  int y=e.getY();
  for (  RangeHighlighter each : highlighters) {
    ProperTextRange range=offsetToYPosition(each.getStartOffset(),each.getEndOffset());
    int eachStartY=range.getStartOffset();
    int eachEndY=range.getEndOffset();
    int eachY=eachStartY + (eachEndY - eachStartY) / 2;
    if (Math.abs(e.getY() - eachY) < minDelta) {
      y=eachY;
    }
  }
  me=new MouseEvent((Component)e.getSource(),e.getID(),e.getWhen(),e.getModifiers(),e.getX(),y + 1,e.getClickCount(),e.isPopupTrigger());
  TooltipRenderer bigRenderer=myTooltipRendererProvider.calcTooltipRenderer(highlighters);
  if (bigRenderer != null) {
    showTooltip(me,bigRenderer,new HintHint(me).setAwtTooltip(true).setPreferredPosition(Balloon.Position.atLeft));
    return true;
  }
  return false;
}
