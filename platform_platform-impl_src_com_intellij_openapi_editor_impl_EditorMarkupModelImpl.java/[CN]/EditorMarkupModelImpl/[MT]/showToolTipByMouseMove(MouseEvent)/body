{
  if (myEditor.getVisibleLineCount() == 0)   return false;
  MouseEvent me=new MouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),0,e.getY() + 1,e.getClickCount(),e.isPopupTrigger());
  final int visualLine=getVisualLineByEvent(e);
  Rectangle area=myEditor.getScrollingModel().getVisibleArea();
  int visualY=myEditor.getLineHeight() * visualLine;
  boolean isVisible=area.contains(area.x,visualY) && myWheelAccumulator == 0;
  TooltipRenderer bigRenderer;
  if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(),EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) {
    final Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
    getNearestHighlighters(this,me.getY(),highlighters);
    getNearestHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),me.getY(),highlighters);
    if (highlighters.isEmpty())     return false;
    int y=e.getY();
    RangeHighlighter nearest=getNearestRangeHighlighter(e);
    if (nearest != null) {
      ProperTextRange range=offsetsToYPositions(nearest.getStartOffset(),nearest.getEndOffset());
      int eachStartY=range.getStartOffset();
      int eachEndY=range.getEndOffset();
      y=eachStartY + (eachEndY - eachStartY) / 2;
    }
    me=new MouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),me.getX(),y + 1,e.getClickCount(),e.isPopupTrigger());
    bigRenderer=myTooltipRendererProvider.calcTooltipRenderer(highlighters);
    if (bigRenderer != null) {
      showTooltip(me,bigRenderer,createHint(me));
      return true;
    }
    return false;
  }
 else {
    float rowRatio=(float)visualLine / (myEditor.getVisibleLineCount() - 1);
    int y=myRowAdjuster != 0 ? (int)(rowRatio * myEditor.getVerticalScrollBar().getHeight()) : me.getY();
    me=new MouseEvent(me.getComponent(),me.getID(),me.getWhen(),me.getModifiers(),me.getX(),y,me.getClickCount(),me.isPopupTrigger());
    final List<RangeHighlighterEx> highlighters=new ArrayList<RangeHighlighterEx>();
    collectRangeHighlighters(this,visualLine,highlighters);
    collectRangeHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),visualLine,highlighters);
    myEditorFragmentRenderer.update(visualLine,highlighters,me.isAltDown());
    myEditorFragmentRenderer.show(myEditor,me.getPoint(),true,ERROR_STRIPE_TOOLTIP_GROUP,createHint(me));
    return true;
  }
}
