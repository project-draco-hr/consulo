{
  final int startOffset=getOffset(fitLineToEditor(visualLine - myPreviewLines),true);
  final int endOffset=getOffset(fitLineToEditor(visualLine + myPreviewLines),false);
  markupModel.processRangeHighlightersOverlappingWith(startOffset,endOffset,new Processor<RangeHighlighterEx>(){
    @Override public boolean process(    RangeHighlighterEx highlighter){
      if (highlighter.getErrorStripeMarkColor() != null) {
        if (highlighter.getStartOffset() < endOffset && highlighter.getEndOffset() > startOffset) {
          highlighters.add(highlighter);
        }
      }
      return true;
    }
  }
);
}
