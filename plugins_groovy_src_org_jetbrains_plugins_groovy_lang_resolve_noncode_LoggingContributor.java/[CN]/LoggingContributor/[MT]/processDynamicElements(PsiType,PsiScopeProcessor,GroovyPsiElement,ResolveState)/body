{
  if (!(qualifierType instanceof PsiClassType))   return;
  PsiClass psiClass=((PsiClassType)qualifierType).resolve();
  if (!(psiClass instanceof GrTypeDefinition) || !PsiTreeUtil.isAncestor(psiClass,place,true))   return;
  PsiModifierList modifierList=psiClass.getModifierList();
  if (modifierList == null)   return;
  for (  PsiAnnotation annotation : modifierList.getAnnotations()) {
    String qname=annotation.getQualifiedName();
    String logger=ourLoggers.get(qname);
    if (logger != null) {
      String fieldName="log";
      PsiAnnotationMemberValue value=annotation.findDeclaredAttributeValue("value");
      if (value instanceof GrExpression) {
        Object o=GroovyConstantExpressionEvaluator.evaluate((GrExpression)value);
        if (o instanceof String) {
          fieldName=(String)o;
        }
      }
      LightFieldBuilder field=new LightFieldBuilder(fieldName,logger,annotation).setContainingClass(psiClass).setModifiers(PsiModifier.FINAL,PsiModifier.STATIC,PsiModifier.PRIVATE);
      processor.execute(field,state);
    }
  }
}
