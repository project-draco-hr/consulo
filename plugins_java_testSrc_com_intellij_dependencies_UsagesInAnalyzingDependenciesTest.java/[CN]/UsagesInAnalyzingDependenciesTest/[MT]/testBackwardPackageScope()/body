{
  final PsiPackage bPackage=JavaPsiFacade.getInstance(myPsiManager.getProject()).findPackage("com.a");
  final DependenciesBuilder builder=new BackwardDependenciesBuilder(myProject,new JavaAnalysisScope(bPackage,null));
  builder.analyze();
  final Set<PsiFile> searchFor=new HashSet<PsiFile>();
  searchFor.add(myJavaFacade.findClass("com.a.A",GlobalSearchScope.allScope(myProject)).getContainingFile());
  final Set<PsiFile> searchIn=new HashSet<PsiFile>();
  final PsiClass bClass=myJavaFacade.findClass("com.b.B",GlobalSearchScope.allScope(myProject));
  searchIn.add(bClass.getContainingFile());
  final PsiClass cClass=myJavaFacade.findClass("com.a.C",GlobalSearchScope.allScope(myProject));
  searchFor.add(cClass.getContainingFile());
  final UsageInfo[] usagesInfos=FindDependencyUtil.findBackwardDependencies(builder,searchIn,searchFor);
  final UsageInfo2UsageAdapter[] usages=UsageInfo2UsageAdapter.convert(usagesInfos);
  final String[] psiUsages=new String[usagesInfos.length];
  for (int i=0; i < usagesInfos.length; i++) {
    psiUsages[i]=toString(usages[i]);
  }
  checkResult(new String[]{"(4: 3) A myA = new A();","(4: 15) A myA = new A();","(5: 3) C myC = new C();","(5: 15) C myC = new C();","(7: 9) myA.aa();","(8: 9) myC.cc();"},psiUsages);
}
