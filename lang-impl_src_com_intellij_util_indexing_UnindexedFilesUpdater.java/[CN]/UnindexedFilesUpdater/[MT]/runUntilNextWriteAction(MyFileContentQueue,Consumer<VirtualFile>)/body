{
  final ProgressIndicatorBase innerIndicator=new ProgressIndicatorBase();
  final ApplicationAdapter canceller=new ApplicationAdapter(){
    @Override public void beforeWriteActionStart(    Object action){
      innerIndicator.cancel();
    }
  }
;
  final Ref<Boolean> finished=Ref.create(Boolean.FALSE);
  ProgressManager.getInstance().runProcess(new Runnable(){
    public void run(){
      ApplicationManager.getApplication().addApplicationListener(canceller);
      try {
        while (true) {
          if (myProject.isDisposed())           return;
          final FileContent fileContent=queue.take();
          if (fileContent == null) {
            finished.set(Boolean.TRUE);
            return;
          }
          final VirtualFile file=fileContent.getVirtualFile();
          if (file == null) {
            finished.set(Boolean.TRUE);
            return;
          }
          try {
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              public void run(){
                innerIndicator.checkCanceled();
                if (!file.isValid()) {
                  return;
                }
                updateUi.consume(file);
                doProcessFile(fileContent);
                innerIndicator.checkCanceled();
              }
            }
);
          }
 catch (          ProcessCanceledException e) {
            queue.pushback(fileContent);
            return;
          }
catch (          Throwable e) {
            LOG.error("Error while indexing " + file.getPresentableUrl() + "\n"+ "To reindex this file IDEA has to be restarted",e);
            file.putUserData(DONT_INDEX_AGAIN_KEY,Boolean.TRUE);
          }
        }
      }
  finally {
        ApplicationManager.getApplication().removeApplicationListener(canceller);
      }
    }
  }
,innerIndicator);
  return finished.get().booleanValue();
}
