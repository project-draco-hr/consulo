{
  if (text.length() == 0 && !myFileReferenceSet.isEndingSlashNotAllowed() && isLast() || ".".equals(text) || "/".equals(text)) {
    result.add(new PsiElementResolveResult(context));
  }
 else   if ("..".equals(text)) {
    final PsiFileSystemItem resolved=context.getParent();
    if (resolved != null) {
      result.add(new PsiElementResolveResult(resolved));
    }
  }
 else {
    final int separatorIndex=text.indexOf('/');
    if (separatorIndex >= 0) {
      final List<ResolveResult> resolvedContexts=new ArrayList<ResolveResult>();
      if (separatorIndex == 0 && "/".equals(context.getName())) {
        resolvedContexts.add(new PsiElementResolveResult(context));
      }
 else {
        innerResolveInContext(text.substring(0,separatorIndex),context,resolvedContexts,caseSensitive);
      }
      final String restOfText=text.substring(separatorIndex + 1);
      for (      ResolveResult contextVariant : resolvedContexts) {
        final PsiFileSystemItem item=(PsiFileSystemItem)contextVariant.getElement();
        if (item != null) {
          innerResolveInContext(restOfText,item,result,caseSensitive);
        }
      }
    }
 else {
      final String decoded=decode(text);
      if (decoded != null) {
        processVariants(context,new PsiFileSystemItemProcessor(){
          public boolean acceptItem(          String name,          boolean isDirectory){
            return caseSensitive ? decoded.equals(name) : decoded.compareToIgnoreCase(name) == 0;
          }
          public boolean execute(          PsiFileSystemItem element){
            result.add(new PsiElementResolveResult(getOriginalFile(element)));
            return false;
          }
        }
);
      }
    }
  }
}
