{
  final CompletionProcess process=CompletionService.getCompletionService().getCurrentCompletion();
  if (process != null && process.isAutopopupCompletion() && isSoft()) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final String s=getText();
  if (s != null && s.equals("/")) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem> collector=new CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem>();
  final PsiElementProcessor<PsiFileSystemItem> processor=new PsiElementProcessor<PsiFileSystemItem>(){
    public boolean execute(    PsiFileSystemItem fileSystemItem){
      return new FilteringProcessor<PsiFileSystemItem>(myFileReferenceSet.getReferenceCompletionFilter(),collector).process(getOriginalFile(fileSystemItem));
    }
  }
;
  for (  PsiFileSystemItem context : getContexts()) {
    for (    final PsiElement child : context.getChildren()) {
      if (child instanceof PsiFileSystemItem) {
        processor.execute((PsiFileSystemItem)child);
      }
    }
  }
  final THashSet<PsiElement> set=new THashSet<PsiElement>(collector.getResults(),new TObjectHashingStrategy<PsiElement>(){
    public int computeHashCode(    final PsiElement object){
      if (object instanceof PsiNamedElement) {
        final String name=((PsiNamedElement)object).getName();
        if (name != null) {
          return name.hashCode();
        }
      }
      return object.hashCode();
    }
    public boolean equals(    final PsiElement o1,    final PsiElement o2){
      if (o1 instanceof PsiNamedElement && o2 instanceof PsiNamedElement) {
        return Comparing.equal(((PsiNamedElement)o1).getName(),((PsiNamedElement)o2).getName());
      }
      return o1.equals(o2);
    }
  }
);
  final PsiElement[] candidates=set.toArray(new PsiElement[set.size()]);
  final Object[] variants=new Object[candidates.length];
  for (int i=0; i < candidates.length; i++) {
    variants[i]=createLookupItem(candidates[i]);
  }
  if (myFileReferenceSet.isUrlEncoded()) {
    for (int i=0; i < candidates.length; i++) {
      final PsiElement element=candidates[i];
      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement=(PsiNamedElement)element;
        String name=psiElement.getName();
        final String encoded=encode(name);
        if (!encoded.equals(name)) {
          final Icon icon=psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          variants[i]=FileInfoManager.getFileLookupItem(candidates[i],encoded,icon);
        }
      }
    }
  }
  return variants;
}
