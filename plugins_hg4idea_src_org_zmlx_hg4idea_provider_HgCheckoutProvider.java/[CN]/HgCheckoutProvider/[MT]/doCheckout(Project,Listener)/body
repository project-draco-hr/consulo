{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      FileDocumentManager.getInstance().saveAllDocuments();
    }
  }
);
  final HgCloneDialog dialog=new HgCloneDialog(project);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final VirtualFile destinationParent=LocalFileSystem.getInstance().findFileByIoFile(new File(dialog.getParentDirectory()));
  if (destinationParent == null) {
    return;
  }
  final String targetDir=destinationParent.getPath() + File.separator + dialog.getDirectoryName();
  final String sourceRepositoryURL=dialog.getSourceRepositoryURL();
  new Task.Backgroundable(project,HgVcsMessages.message("hg4idea.clone.progress",sourceRepositoryURL),true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      HgCloneCommand clone=new HgCloneCommand(project);
      clone.setRepositoryURL(sourceRepositoryURL);
      clone.setDirectory(targetDir);
      final HgCommandResult myCloneResult=clone.execute();
      if (myCloneResult == null) {
        notifyError("Clone failed","Clone failed due to unknown error",project);
      }
 else       if (myCloneResult.getExitValue() != 0) {
        notifyError("Clone failed","Clone from " + sourceRepositoryURL + " failed.<br/><br/>"+ myCloneResult.getRawError(),project);
      }
 else {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (listener != null) {
              listener.directoryCheckedOut(new File(dialog.getParentDirectory(),dialog.getDirectoryName()));
              listener.checkoutCompleted();
            }
          }
        }
);
      }
    }
  }
.queue();
}
