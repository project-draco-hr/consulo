{
  if (classParameterList != null) {
    final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("unexpected.token"));
    errorElement.rawAddChildren(classParameterList);
    first.rawInsertAfterMe(errorElement);
  }
  CompositeElement variable;
  if (context == Context.CLASS_CONTEXT || context == Context.ANNOTATION_INTERFACE_CONTEXT) {
    variable=ASTFactory.composite(JavaElementType.FIELD);
    variable.rawAddChildren(first);
  }
 else   if (context == Context.CODE_BLOCK_CONTEXT) {
    variable=ASTFactory.composite(JavaElementType.LOCAL_VARIABLE);
    variable.rawAddChildren(first);
  }
 else {
    LOG.assertTrue(false);
    return null;
  }
  CompositeElement variable1=variable;
  boolean unclosed=false;
  boolean eatSemicolon=true;
  boolean shouldRollback;
  while (true) {
    shouldRollback=true;
    while (lexer.getTokenType() == JavaTokenType.LBRACKET) {
      variable1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      if (lexer.getTokenType() != JavaTokenType.RBRACKET) {
        variable1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbracket")));
        unclosed=true;
        break;
      }
      variable1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
    if (lexer.getTokenType() == JavaTokenType.EQ) {
      variable1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      TreeElement expr=myContext.getExpressionParsing().parseExpression(lexer);
      if (expr != null) {
        shouldRollback=false;
        variable1.rawAddChildren(expr);
      }
 else {
        variable1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
        unclosed=true;
        break;
      }
    }
    if (lexer.getTokenType() != JavaTokenType.COMMA)     break;
    TreeElement comma=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    variable1.rawInsertAfterMe(comma);
    if (lexer.getTokenType() != JavaTokenType.IDENTIFIER) {
      comma.rawInsertAfterMe(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
      unclosed=true;
      eatSemicolon=false;
      break;
    }
    CompositeElement variable2=ASTFactory.composite(variable1.getElementType());
    comma.rawInsertAfterMe(variable2);
    variable2.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    variable1=variable2;
  }
  if (lexer.getTokenType() == JavaTokenType.SEMICOLON && eatSemicolon) {
    variable1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
 else {
    if (lexer.getTokenType() != null && shouldRollback) {
      int spaceStart=lexer instanceof StoppableLexerAdapter ? ((StoppableLexerAdapter)lexer).getPrevTokenEnd() : ((FilterLexer)lexer).getPrevTokenEnd();
      int spaceEnd=lexer.getTokenStart();
      final CharSequence buffer=lexer.getBufferSequence();
      int lineStart=CharArrayUtil.shiftBackwardUntil(buffer,spaceEnd,"\n\r");
      if (startPos.getOffset() < lineStart && lineStart < spaceStart) {
        final int newBufferEnd=CharArrayUtil.shiftForward(buffer,lineStart,"\n\r \t");
        lexer.restore(startPos);
        StoppableLexerAdapter stoppableLexer=new StoppableLexerAdapter(new StoppableLexerAdapter.StoppingCondition(){
          public boolean stopsAt(          IElementType token,          int start,          int end){
            return start >= newBufferEnd || end > newBufferEnd;
          }
        }
,lexer);
        return parseDeclaration(stoppableLexer,context);
      }
    }
    if (!unclosed) {
      variable1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.semicolon")));
    }
  }
  return variable;
}
