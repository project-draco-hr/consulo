{
  return ApplicationManager.getApplication().runReadAction(new Computable<GenerationItem[]>(){
    @Override public GenerationItem[] compute(){
      final List<GenerationItem> result=new ArrayList<GenerationItem>();
      for (      Module module : ModuleManager.getInstance(context.getProject()).getModules()) {
        final AndroidFacet facet=AndroidFacet.getInstance(module);
        if (facet == null || AndroidCompileUtil.isLibraryWithBadCircularDependency(facet)) {
          continue;
        }
        final VirtualFile manifestFile=AndroidRootUtil.getManifestFileForCompiler(facet);
        if (manifestFile == null) {
          context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.manifest.not.found",module.getName()),null,-1,-1);
          continue;
        }
        final Manifest manifest=AndroidUtils.loadDomElement(module,manifestFile,Manifest.class);
        if (manifest == null) {
          context.addMessage(CompilerMessageCategory.ERROR,"Cannot parse file",manifestFile.getUrl(),-1,-1);
          continue;
        }
        String packageName=manifest.getPackage().getValue();
        if (packageName != null) {
          packageName=packageName.trim();
        }
        if (packageName == null || packageName.length() <= 0) {
          context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("package.not.found.error"),manifestFile.getUrl(),-1,-1);
          continue;
        }
        final boolean debug=!AndroidCompileUtil.isReleaseBuild(context);
        result.add(new MyGenerationItem(module,packageName,debug));
        for (        String libPackage : AndroidCompileUtil.getLibPackages(module,packageName)) {
          result.add(new MyGenerationItem(module,libPackage,debug));
        }
      }
      return result.toArray(new GenerationItem[result.size()]);
    }
  }
);
}
