{
  try {
    final int qName=symbolTable.getId(reader.getQualifiedName());
    myQualifiedName=qName;
    final String genericSignature=reader.getGenericSignature();
    myGenericSignature=genericSignature != null ? symbolTable.getId(genericSignature) : -1;
    myPath=reader.getPath();
    final String superClass=reader.getSuperClass();
    final int superQName="".equals(superClass) ? -1 : symbolTable.getId(superClass);
    mySuperQualifiedName=superQName;
    LOG.assertTrue(superQName != qName);
    final String[] superInterfaces=reader.getSuperInterfaces();
    mySuperInterfaces=ArrayUtil.newIntArray(superInterfaces.length);
    for (int idx=0; idx < superInterfaces.length; idx++) {
      mySuperInterfaces[idx]=symbolTable.getId(superInterfaces[idx]);
    }
    final String sourceFileName=reader.getSourceFileName();
    mySourceFileName=sourceFileName != null ? sourceFileName : "";
    myFlags=reader.getAccessFlags();
    myRuntimeVisibleAnnotations=reader.getRuntimeVisibleAnnotations();
    myRuntimeInvisibleAnnotations=reader.getRuntimeInvisibleAnnotations();
    final Collection<ReferenceInfo> refs=reader.getReferences();
    myReferences=refs.toArray(new ReferenceInfo[refs.size()]);
    myFields=reader.getFields();
    myMethods=reader.getMethods();
  }
 catch (  ClsFormatException e) {
    throw new CacheCorruptedException(e);
  }
}
