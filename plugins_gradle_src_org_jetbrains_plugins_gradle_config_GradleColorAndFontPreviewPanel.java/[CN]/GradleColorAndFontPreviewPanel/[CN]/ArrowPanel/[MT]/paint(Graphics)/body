{
  if (!myPaint) {
    return;
  }
  Graphics2D g2=(Graphics2D)g;
  g.setColor(Color.RED);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2.setRenderingHints(renderHints);
  FontMetrics fontMetrics=getFontMetrics(getFont());
  int unit=fontMetrics.charWidth('a') * 2 / 3;
  int yShift=0;
  final Dimension size=getSize();
  if (size != null) {
    yShift=size.height / 2 - unit;
    if (size.height % 2 != 0) {
      yShift++;
    }
  }
  int q=unit / 4;
  int[] x={0,unit * 3,unit * 2,unit * 4,unit * 4,unit * 2,unit * 3,0};
  int[] y={unit,0,unit - q,unit - q,unit + q,unit + q,unit * 2,unit};
  if (yShift != 0) {
    for (int i=0; i < y.length; i++) {
      y[i]+=yShift;
    }
  }
  g2.fillPolygon(x,y,x.length);
}
