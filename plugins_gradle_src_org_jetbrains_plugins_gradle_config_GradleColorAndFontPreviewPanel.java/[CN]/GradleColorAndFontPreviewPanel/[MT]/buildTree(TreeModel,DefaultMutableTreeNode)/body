{
  final Tree tree=new Tree(model){
    @Override protected void setExpandedState(    TreePath path,    boolean state){
      if (myAllowTreeExpansion.get()) {
        super.setExpandedState(path,state);
      }
    }
  }
;
  for (  DefaultMutableTreeNode node : nodesToExpand) {
    tree.expandPath(new TreePath(node.getPath()));
  }
  myAllowTreeExpansion.set(false);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.addTreeSelectionListener(new TreeSelectionListener(){
    private boolean myIgnore;
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (myIgnore) {
        return;
      }
      final TreePath path=e.getNewLeadSelectionPath();
      if (path == null) {
        clearSelection();
        return;
      }
      final Object component=path.getLastPathComponent();
      for (      Map.Entry<TextAttributesKey,DefaultMutableTreeNode> entry : myNodes.entrySet()) {
        if (entry.getValue().equals(component)) {
          pointTo(entry.getValue());
          for (          ColorAndFontSettingsListener listener : myListeners) {
            listener.selectionInPreviewChanged(entry.getKey().getExternalName());
            clearSelection();
          }
          return;
        }
      }
      clearSelection();
    }
    private void clearSelection(){
      myIgnore=true;
      try {
        tree.getSelectionModel().clearSelection();
      }
  finally {
        myIgnore=false;
      }
    }
  }
);
  final NodeRenderer delegate=new NodeRenderer(){
    @NotNull @Override protected EditorColorsScheme getColorsScheme(){
      return myOptions.getSelectedScheme();
    }
  }
;
  myNodeRenderPanel.setBackground(tree.getBackground());
  tree.setCellRenderer(new TreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Component component=delegate.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
      if (myNodeRenderPanel.getComponentCount() <= 0) {
        GridBagConstraints constraints=new GridBagConstraints();
        myNodeRenderPanel.add(component,constraints);
        constraints.weightx=1;
        constraints.anchor=GridBagConstraints.CENTER;
        myNodeRenderPanel.add(mySelectedElementSignPanel,constraints);
      }
      mySelectedElementSignPanel.setPaint(value == mySelectedNode);
      return myNodeRenderPanel;
    }
  }
);
  return tree;
}
