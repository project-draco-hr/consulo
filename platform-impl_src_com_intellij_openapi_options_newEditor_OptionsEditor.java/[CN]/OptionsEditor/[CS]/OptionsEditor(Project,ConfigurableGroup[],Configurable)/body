{
  myProject=project;
  myGroups=groups;
  final Filter filter=new Filter();
  myContext=new OptionsEditorContext(filter);
  mySearch=new MySearchField(){
    @Override protected void onTextKeyEvent(    final KeyEvent e){
      myTree.processTextEvent(e);
    }
  }
;
  myTree=new OptionsTree(myProject,groups,getContext()){
    @Override protected void onTreeKeyEvent(    final KeyEvent e){
      mySearch.processKeyEvent(e);
    }
  }
;
  getContext().addColleague(myTree);
  Disposer.register(this,myTree);
  mySearch.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      filter.update(e);
    }
    public void removeUpdate(    final DocumentEvent e){
      filter.update(e);
    }
    public void changedUpdate(    final DocumentEvent e){
      filter.update(e);
    }
  }
);
  final DefaultActionGroup toolbarActions=new DefaultActionGroup();
  toolbarActions.add(new BackAction(myTree));
  toolbarActions.add(new ForwardAction(myTree));
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,true);
  tb.setTargetComponent(this);
  final JComponent toolbar=tb.getComponent();
  final JPanel left=new JPanel(new BorderLayout());
  myToolbar=toolbar;
  left.add(myToolbar,BorderLayout.NORTH);
  left.add(myTree,BorderLayout.CENTER);
  left.add(mySearch,BorderLayout.SOUTH);
  setLayout(new BorderLayout());
  mySplitter=new Splitter(false);
  mySplitter.setFirstComponent(left);
  mySplitter.setHonorComponentsMinimumSize(false);
  mySplitter.setSecondComponent(myDetails.getComponent());
  float proportion=.3f;
  try {
    final String p=PropertiesComponent.getInstance(myProject).getValue(SPLITTER_PROPORTION);
    if (p != null) {
      proportion=Float.valueOf(p);
    }
  }
 catch (  NumberFormatException e) {
    LOG.debug(e);
  }
  mySplitter.setProportion(proportion);
  add(mySplitter,BorderLayout.CENTER);
  myColleague=new MyColleague();
  getContext().addColleague(myColleague);
  if (preselectedConfigurable != null) {
    myTree.select(preselectedConfigurable);
  }
 else {
    myTree.selectFirst();
  }
  Toolkit.getDefaultToolkit().addAWTEventListener(this,MouseEvent.MOUSE_EVENT_MASK | KeyEvent.KEY_EVENT_MASK);
  myModificationChecker=new MergingUpdateQueue("OptionsModificationChecker",1000,false,this,this,this);
}
