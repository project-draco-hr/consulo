{
  myProject=project;
  myGroups=groups;
  myFilter=new Filter();
  myContext=new OptionsEditorContext(myFilter);
  mySearch=new MySearchField(){
    @Override protected void onTextKeyEvent(    final KeyEvent e){
      myTree.processTextEvent(e);
    }
  }
;
  myTree=new OptionsTree(myProject,groups,getContext()){
    @Override protected void onTreeKeyEvent(    final KeyEvent e){
      myFilterFocumentWasChanged=false;
      try {
        mySearch.keyEventToTextField(e);
      }
  finally {
        if (myFilterFocumentWasChanged && !isFilterFieldVisible()) {
          setFilterFieldVisible(true,false,false);
        }
      }
    }
  }
;
  getContext().addColleague(myTree);
  Disposer.register(this,myTree);
  mySearch.addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      myFilter.update(e);
    }
    public void removeUpdate(    final DocumentEvent e){
      myFilter.update(e);
    }
    public void changedUpdate(    final DocumentEvent e){
      myFilter.update(e);
    }
  }
);
  final DefaultActionGroup toolbarActions=new DefaultActionGroup();
  toolbarActions.add(new BackAction(myTree));
  toolbarActions.add(new ForwardAction(myTree));
  toolbarActions.addSeparator();
  toolbarActions.add(new ShowSearchFieldAction(this));
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,true);
  tb.setTargetComponent(this);
  myToolbar=tb.getComponent();
  myLeftSide=new JPanel(new BorderLayout());
  final NonOpaquePanel toolbarPanel=new NonOpaquePanel(new BorderLayout());
  toolbarPanel.add(myToolbar,BorderLayout.NORTH);
  toolbarPanel.add(mySearchWrapper,BorderLayout.CENTER);
  myLeftSide.add(toolbarPanel,BorderLayout.NORTH);
  myLeftSide.add(myTree,BorderLayout.CENTER);
  setLayout(new BorderLayout());
  myMainSplitter=new Splitter(false);
  myMainSplitter.setFirstComponent(myLeftSide);
  myMainSplitter.setHonorComponentsMinimumSize(false);
  myLoadingDecorator=new LoadingDecorator(myOwnDetails.getComponent(),project,150);
  myMainSplitter.setSecondComponent(myLoadingDecorator.getComponent());
  myMainSplitter.setProportion(readPropertion(.3f,MAIN_SPLITTER_PROPORTION));
  myContentWrapper.mySplitter.setProportion(readPropertion(.2f,DETAILS_SPLITTER_PROPORTION));
  add(myMainSplitter,BorderLayout.CENTER);
  myColleague=new MyColleague();
  getContext().addColleague(myColleague);
  if (preselectedConfigurable != null) {
    myTree.select(preselectedConfigurable);
  }
 else {
    myTree.selectFirst();
  }
  Toolkit.getDefaultToolkit().addAWTEventListener(this,MouseEvent.MOUSE_EVENT_MASK | KeyEvent.KEY_EVENT_MASK);
  myModificationChecker=new MergingUpdateQueue("OptionsModificationChecker",1000,false,this,this,this);
  mySpotlightUpdate=new MergingUpdateQueue("OptionsSplotlight",500,false,this,this,this);
  IdeGlassPaneUtil.installPainter(myOwnDetails.getContentGutter(),mySpotlightPainter,this);
}
