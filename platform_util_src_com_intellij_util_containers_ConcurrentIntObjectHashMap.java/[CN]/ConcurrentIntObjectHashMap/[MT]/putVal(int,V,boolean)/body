{
  int hash=spread(key);
  int binCount=0;
  for (Node<V>[] tab=table; ; ) {
    Node<V> f;
    int n, i, fh;
    if (tab == null || (n=tab.length) == 0) {
      tab=initTable();
    }
 else     if ((f=tabAt(tab,i=(n - 1) & hash)) == null) {
      if (casTabAt(tab,i,null,new Node<V>(hash,key,value,null))) {
        break;
      }
    }
 else     if ((fh=f.hash) == MOVED) {
      tab=helpTransfer(tab,f);
    }
 else {
      V oldVal=null;
synchronized (f) {
        if (tabAt(tab,i) == f) {
          if (fh >= 0) {
            binCount=1;
            for (Node<V> e=f; ; ++binCount) {
              if ((e.key == key)) {
                oldVal=e.val;
                if (!onlyIfAbsent) {
                  e.val=value;
                }
                break;
              }
              Node<V> pred=e;
              if ((e=e.next) == null) {
                pred.next=new Node<V>(hash,key,value,null);
                break;
              }
            }
          }
 else           if (f instanceof TreeBin) {
            Node<V> p;
            binCount=2;
            if ((p=((TreeBin<V>)f).putTreeVal(hash,key,value)) != null) {
              oldVal=p.val;
              if (!onlyIfAbsent) {
                p.val=value;
              }
            }
          }
        }
      }
      if (binCount != 0) {
        if (binCount >= TREEIFY_THRESHOLD) {
          treeifyBin(tab,i);
        }
        if (oldVal != null) {
          return oldVal;
        }
        break;
      }
    }
  }
  addCount(1L,binCount);
  return null;
}
