{
  List<Pair<GradleLibraryDependency,Module>> libraryDependenciesToImport=ContainerUtilRt.newArrayList();
  Map<String,Library> ideLibsToRemove=ContainerUtilRt.newHashMap();
  Map<String,GradleLibrary> ide2gradleLibs=ContainerUtilRt.newHashMap();
  Collection<LibraryOrderEntry> ideLibraryDependenciesToRemove=ContainerUtilRt.newArrayList();
  GradleProjectStructureHelper projectStructureHelper=myContext.getProjectStructureHelper();
  PlatformFacade facade=myContext.getPlatformFacade();
  for (  GradleProjectStructureNode<?> node : nodes) {
    Object entity=node.getDescriptor().getElement().mapToEntity(myContext);
    if (!(entity instanceof GradleCompositeLibraryDependency)) {
      continue;
    }
    GradleCompositeLibraryDependency e=(GradleCompositeLibraryDependency)entity;
    String ideLibraryName=e.getIdeEntity().getLibraryName();
    Library ideLibraryToRemove=null;
    if (ideLibraryName != null) {
      ideLibraryToRemove=projectStructureHelper.findIdeLibrary(ideLibraryName);
    }
    if (ideLibraryToRemove != null) {
      ideLibsToRemove.put(ideLibraryName,ideLibraryToRemove);
      ide2gradleLibs.put(ideLibraryName,e.getGradleEntity().getTarget());
    }
  }
  RootPolicy<LibraryOrderEntry> visitor=new RootPolicy<LibraryOrderEntry>(){
    @Override public LibraryOrderEntry visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    LibraryOrderEntry value){
      return libraryOrderEntry;
    }
  }
;
  for (  Module ideModule : facade.getModules(myProject)) {
    GradleModule gradleModule=projectStructureHelper.findGradleModule(ideModule.getName());
    if (gradleModule == null) {
      continue;
    }
    for (    OrderEntry entry : facade.getOrderEntries(ideModule)) {
      LibraryOrderEntry ideLibraryDependency=entry.accept(visitor,null);
      if (ideLibraryDependency == null) {
        continue;
      }
      String libraryName=ideLibraryDependency.getLibraryName();
      if (libraryName == null) {
        continue;
      }
      if (!ideLibsToRemove.containsKey(libraryName)) {
        continue;
      }
      ideLibraryDependenciesToRemove.add(ideLibraryDependency);
      GradleLibraryDependency gradleLibraryDependency=new GradleLibraryDependency(gradleModule,ide2gradleLibs.get(libraryName));
      gradleLibraryDependency.setExported(ideLibraryDependency.isExported());
      gradleLibraryDependency.setScope(ideLibraryDependency.getScope());
      libraryDependenciesToImport.add(Pair.create(gradleLibraryDependency,ideModule));
    }
  }
  myDependencyManager.removeDependencies(ideLibraryDependenciesToRemove,false);
  myLibraryManager.removeLibraries(ideLibsToRemove.values(),myProject);
  for (  Pair<GradleLibraryDependency,Module> pair : libraryDependenciesToImport) {
    myDependencyManager.importDependency(pair.first,pair.second,false);
  }
}
