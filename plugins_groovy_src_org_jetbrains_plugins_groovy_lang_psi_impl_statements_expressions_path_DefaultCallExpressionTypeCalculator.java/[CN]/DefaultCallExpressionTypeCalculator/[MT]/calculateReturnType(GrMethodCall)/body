{
  GrExpression invoked=callExpression.getInvokedExpression();
  if (invoked instanceof GrReferenceExpression) {
    GrReferenceExpression refExpr=(GrReferenceExpression)invoked;
    final GroovyResolveResult[] resolveResults=refExpr.multiResolve(false);
    PsiManager manager=callExpression.getManager();
    GlobalSearchScope scope=callExpression.getResolveScope();
    PsiType result=null;
    for (    GroovyResolveResult resolveResult : resolveResults) {
      PsiElement resolved=resolveResult.getElement();
      PsiType returnType=null;
      if (resolved instanceof PsiMethod && !GroovyPsiManager.isTypeBeingInferred(resolved)) {
        PsiMethod method=(PsiMethod)resolved;
        if (resolveResult.isInvokedOnProperty()) {
          final PsiType propertyType=PsiUtil.getSmartReturnType(method);
          returnType=extractReturnTypeFromClosure(propertyType,true);
        }
 else {
          returnType=getClosureCallOrCurryReturnType(callExpression,refExpr,method);
          if (returnType == null) {
            returnType=PsiUtil.getSmartReturnType(method);
          }
        }
      }
 else       if (resolved instanceof GrVariable) {
        PsiType refType=refExpr.getType();
        final PsiType type=refType == null ? ((GrVariable)resolved).getTypeGroovy() : refType;
        returnType=extractReturnTypeFromClosure(type,true);
      }
      if (returnType == null)       return null;
      returnType=resolveResult.getSubstitutor().substitute(returnType);
      returnType=TypesUtil.boxPrimitiveType(returnType,manager,scope);
      if (result == null || returnType.isAssignableFrom(result))       result=returnType;
 else       if (!result.isAssignableFrom(returnType))       result=TypesUtil.getLeastUpperBound(result,returnType,manager);
    }
    if (result == null)     return null;
    if (refExpr.getDotTokenType() != GroovyTokenTypes.mSPREAD_DOT) {
      return result;
    }
 else {
      return ResolveUtil.getListTypeForSpreadOperator(refExpr,result);
    }
  }
 else {
    return extractReturnTypeFromClosure(invoked.getType(),false);
  }
}
