{
  super(fileSpec,roamingType,pathMacroManager,parentDisposable,rootElementName,streamProvider,componentVersionProvider);
  myFilePath=filePath;
  myFile=new File(filePath);
  VirtualFileTracker virtualFileTracker=ServiceManager.getService(VirtualFileTracker.class);
  MessageBus messageBus=(MessageBus)picoContainer.getComponentInstanceOfType(MessageBus.class);
  if (virtualFileTracker != null && messageBus != null) {
    final Listener listener=messageBus.syncPublisher(STORAGE_TOPIC);
    virtualFileTracker.addTracker(LocalFileSystem.PROTOCOL_PREFIX + myFile.getAbsolutePath().replace(File.separatorChar,'/'),new VirtualFileAdapter(){
      @Override public void fileMoved(      @NotNull VirtualFileMoveEvent event){
        myCachedVirtualFile=null;
      }
      @Override public void fileDeleted(      @NotNull VirtualFileEvent event){
        myCachedVirtualFile=null;
      }
      @Override public void fileCreated(      @NotNull VirtualFileEvent event){
        myCachedVirtualFile=event.getFile();
      }
      @Override public void contentsChanged(      @NotNull final VirtualFileEvent event){
        if (!isDisposed()) {
          listener.storageFileChanged(event,FileBasedStorage.this);
        }
      }
    }
,false,this);
  }
}
