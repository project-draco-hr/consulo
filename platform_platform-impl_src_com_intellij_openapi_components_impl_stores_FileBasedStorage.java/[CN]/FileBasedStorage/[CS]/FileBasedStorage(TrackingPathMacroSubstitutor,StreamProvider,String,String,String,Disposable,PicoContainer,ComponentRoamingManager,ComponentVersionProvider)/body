{
  super(pathMacroManager,parentDisposable,rootElementName,streamProvider,fileSpec,componentRoamingManager,localComponentVersionProvider);
  Application app=ApplicationManager.getApplication();
  if (!myConfigDirectoryRefreshed && (app.isUnitTestMode() || app.isDispatchThread())) {
    try {
      syncRefreshPathRecursively(PathManager.getConfigPath(),"componentVersions");
    }
  finally {
      myConfigDirectoryRefreshed=true;
    }
  }
  myRootElementName=rootElementName;
  myFilePath=filePath;
  myFile=FileSystem.FILE_SYSTEM.createFile(myFilePath);
  VirtualFileTracker virtualFileTracker=(VirtualFileTracker)picoContainer.getComponentInstanceOfType(VirtualFileTracker.class);
  MessageBus messageBus=(MessageBus)picoContainer.getComponentInstanceOfType(MessageBus.class);
  if (virtualFileTracker != null && messageBus != null) {
    final String path=myFile.getAbsolutePath();
    final String fileUrl=LocalFileSystem.PROTOCOL_PREFIX + path.replace(File.separatorChar,'/');
    final Listener listener=messageBus.syncPublisher(STORAGE_TOPIC);
    virtualFileTracker.addTracker(fileUrl,new VirtualFileAdapter(){
      @Override public void fileMoved(      @NotNull VirtualFileMoveEvent event){
        myCachedVirtualFile=null;
      }
      @Override public void fileDeleted(      @NotNull VirtualFileEvent event){
        myCachedVirtualFile=null;
      }
      @Override public void contentsChanged(      @NotNull final VirtualFileEvent event){
        if (!isDisposed()) {
          listener.storageFileChanged(event,FileBasedStorage.this);
        }
      }
    }
,false,this);
  }
}
