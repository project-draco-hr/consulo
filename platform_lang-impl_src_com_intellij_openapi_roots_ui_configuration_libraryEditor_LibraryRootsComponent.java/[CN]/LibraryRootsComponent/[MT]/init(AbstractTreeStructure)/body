{
  myTree=new Tree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  new LibraryRootsTreeSpeedSearch(myTree);
  myTree.setCellRenderer(new LibraryTreeRenderer());
  myTreeBuilder=new LibraryTableTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),treeStructure);
  myTreePanel.setLayout(new BorderLayout());
  ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(myTree).disableUpDownActions().setRemoveActionName(ProjectBundle.message("library.detach.action")).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final Object[] selectedElements=getSelectedElements();
      if (selectedElements.length == 0) {
        return;
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          Object selectedElement : selectedElements) {
            if (selectedElement instanceof ItemElement) {
              final ItemElement itemElement=(ItemElement)selectedElement;
              getLibraryEditor().removeRoot(itemElement.getUrl(),itemElement.getRootType());
            }
 else             if (selectedElement instanceof OrderRootTypeElement) {
              final OrderRootType rootType=((OrderRootTypeElement)selectedElement).getOrderRootType();
              final String[] urls=getLibraryEditor().getUrls(rootType);
              for (              String url : urls) {
                getLibraryEditor().removeRoot(url,rootType);
              }
            }
 else             if (selectedElement instanceof ExcludedRootElement) {
              getLibraryEditor().removeExcludedRoot(((ExcludedRootElement)selectedElement).getUrl());
            }
          }
        }
      }
);
      libraryChanged(true);
    }
  }
);
  List<String> actionsOrder=new ArrayList<String>();
  actionsOrder.add("Add");
  final List<AttachRootButtonDescriptor> popupItems=new ArrayList<AttachRootButtonDescriptor>();
  for (  AttachRootButtonDescriptor descriptor : myDescriptor.createAttachButtons()) {
    Icon icon=descriptor.getToolbarIcon();
    if (icon != null) {
      AttachItemAction action=new AttachItemAction(descriptor,descriptor.getButtonText(),icon);
      toolbarDecorator.addExtraAction(AnActionButton.fromAction(action));
      actionsOrder.add(action.getTemplatePresentation().getText());
    }
 else {
      popupItems.add(descriptor);
    }
  }
  myAddExcludedRootActionButton=new AddExcludedRootActionButton();
  toolbarDecorator.addExtraAction(myAddExcludedRootActionButton);
  actionsOrder.add(myAddExcludedRootActionButton.getTemplatePresentation().getText());
  actionsOrder.add("Remove");
  toolbarDecorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      if (popupItems.isEmpty()) {
        new AttachFilesAction(myDescriptor.getAttachFilesActionName()).actionPerformed(null);
        return;
      }
      List<AnAction> actions=new ArrayList<AnAction>();
      actions.add(new AttachFilesAction(myDescriptor.getAttachFilesActionName()));
      for (      AttachRootButtonDescriptor descriptor : popupItems) {
        actions.add(new AttachItemAction(descriptor,descriptor.getButtonText(),null));
      }
      final DefaultActionGroup group=new DefaultActionGroup(actions);
      JBPopupFactory.getInstance().createActionGroupPopup(null,group,DataManager.getInstance().getDataContext(button.getContextComponent()),JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,true).show(button.getPreferredPopupPoint());
    }
  }
);
  toolbarDecorator.setButtonComparator(ArrayUtil.toStringArray(actionsOrder));
  myTreePanel.add(toolbarDecorator.createPanel(),BorderLayout.CENTER);
  Disposer.register(this,myTreeBuilder);
}
