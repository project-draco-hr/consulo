{
  myFileStatusMap.markAllFilesDirty("prepare to run main passes");
  stopProcess(false,"disable background daemon");
  myPassExecutorService.cancelAll(true);
  final List<HighlightInfo> result;
  try {
    result=new ArrayList<HighlightInfo>();
    final VirtualFile virtualFile=psiFile.getVirtualFile();
    if (virtualFile != null && !virtualFile.getFileType().isBinary()) {
      List<TextEditorHighlightingPass> passes=TextEditorHighlightingPassRegistrarEx.getInstanceEx(myProject).instantiateMainPasses(psiFile,document,HighlightInfoProcessor.getEmpty());
      Collections.sort(passes,new Comparator<TextEditorHighlightingPass>(){
        @Override public int compare(        @NotNull TextEditorHighlightingPass o1,        @NotNull TextEditorHighlightingPass o2){
          if (o1 instanceof GeneralHighlightingPass)           return -1;
          if (o2 instanceof GeneralHighlightingPass)           return 1;
          return 0;
        }
      }
);
      LOG.debug("All passes for " + psiFile.getName() + " started ("+ passes+ "). progress canceled: "+ progress.isCanceled());
      try {
        for (        TextEditorHighlightingPass pass : passes) {
          pass.doCollectInformation(progress);
          result.addAll(pass.getInfos());
        }
      }
 catch (      ProcessCanceledException e) {
        LOG.debug("Canceled: " + progress);
        throw e;
      }
      LOG.debug("All passes for " + psiFile.getName() + " run. progress canceled: "+ progress.isCanceled()+ "; infos: "+ result);
    }
  }
  finally {
    stopProcess(true,"re-enable background daemon after main passes run");
  }
  return result;
}
