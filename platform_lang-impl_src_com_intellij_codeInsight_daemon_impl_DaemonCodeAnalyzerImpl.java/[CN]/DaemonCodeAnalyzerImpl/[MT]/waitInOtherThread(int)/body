{
  Disposable disposable=Disposer.newDisposable();
  myProject.getMessageBus().connect(disposable).subscribe(PsiModificationTracker.TOPIC,new PsiModificationTracker.Listener(){
    @Override public void modificationCountChanged(){
      throw new IllegalStateException("You must not perform PSI modifications from inside highlighting");
    }
  }
);
  try {
    Future<Boolean> future=ApplicationManager.getApplication().executeOnPooledThread(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        try {
          return myPassExecutorService.waitFor(millis);
        }
 catch (        Throwable e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    return future.get();
  }
  finally {
    Disposer.dispose(disposable);
  }
}
