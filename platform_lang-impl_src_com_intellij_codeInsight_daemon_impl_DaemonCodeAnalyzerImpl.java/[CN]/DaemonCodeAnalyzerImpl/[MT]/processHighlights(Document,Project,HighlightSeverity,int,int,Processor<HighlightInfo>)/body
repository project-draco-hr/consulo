{
  LOG.assertTrue(ApplicationManager.getApplication().isReadAccessAllowed());
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getInstance(project);
  MarkupModelEx model=(MarkupModelEx)((DocumentEx)document).getMarkupModel(project);
  return model.processHighlightsOverlappingWith(startOffset,endOffset,new Processor<RangeHighlighterEx>(){
    public boolean process(    RangeHighlighterEx marker){
      Object tt=marker.getErrorStripeTooltip();
      if (!(tt instanceof HighlightInfo))       return true;
      HighlightInfo info=(HighlightInfo)tt;
      return minSeverity != null && severityRegistrar.compare(info.getSeverity(),minSeverity) < 0 || processor.process(info);
    }
  }
);
}
