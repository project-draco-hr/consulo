{
  if (SwingUtilities.isEventDispatchThread()) {
    UIUtil.dispatchAllInvocationEvents();
  }
 else {
    UIUtil.pump();
  }
  Project project=file.getProject();
  setUpdateByTimerEnabled(false);
  FileStatusMap fileStatusMap=getFileStatusMap();
  for (  int ignoreId : toIgnore) {
    fileStatusMap.markFileUpToDate(document,file,ignoreId);
  }
  fileStatusMap.allowDirt(allowDirt);
  try {
    TextEditorBackgroundHighlighter highlighter=(TextEditorBackgroundHighlighter)textEditor.getBackgroundHighlighter();
    final List<TextEditorHighlightingPass> passes=highlighter.getPasses(toIgnore);
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        for (        TextEditorHighlightingPass pass : passes) {
          pass.collectInformation(progress);
          if (apply) {
            if (SwingUtilities.isEventDispatchThread()) {
              UIUtil.dispatchAllInvocationEvents();
            }
 else {
              UIUtil.pump();
            }
            pass.applyInformationToEditor();
          }
        }
      }
    }
,progress);
    return getHighlights(document,null,project);
  }
  finally {
    fileStatusMap.allowDirt(true);
    myPassExecutorService.cancelAll(true);
  }
}
