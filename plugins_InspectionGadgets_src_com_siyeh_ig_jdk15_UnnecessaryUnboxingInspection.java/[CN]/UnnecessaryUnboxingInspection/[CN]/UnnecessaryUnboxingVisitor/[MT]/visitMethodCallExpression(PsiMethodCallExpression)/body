{
  super.visitMethodCallExpression(expression);
  final PsiManager manager=expression.getManager();
  final LanguageLevel languageLevel=manager.getEffectiveLanguageLevel();
  if (languageLevel.equals(LanguageLevel.JDK_1_3) || languageLevel.equals(LanguageLevel.JDK_1_4)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  if (methodExpression == null) {
    return;
  }
  final String methodName=methodExpression.getReferenceName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final PsiType qualifierType=qualifier.getType();
  if (qualifierType == null) {
    return;
  }
  final String qualifierTypeName=qualifierType.getCanonicalText();
  if (!s_unboxingMethods.containsKey(qualifierTypeName)) {
    return;
  }
  final String unboxingMethod=s_unboxingMethods.get(qualifierTypeName);
  if (!unboxingMethod.equals(methodName)) {
    return;
  }
  if (getContainingExpression(expression) instanceof PsiTypeCastExpression) {
    return;
  }
  registerError(expression);
}
