{
  final PsiExpression expression=(PsiExpression)element;
  final PsiType type=expression.getType();
  if (PsiType.INT.equals(type) || PsiType.LONG.equals(type)) {
    String textString=expression.getText();
    final int textLength=textString.length();
    final char lastChar=textString.charAt(textLength - 1);
    final boolean isLong=lastChar == 'l' || lastChar == 'L';
    if (isLong) {
      textString=textString.substring(0,textLength - 1);
    }
    BigInteger value;
    if (textString.charAt(0) == '0') {
      value=new BigInteger(textString,8);
    }
 else {
      value=new BigInteger(textString,10);
      final PsiElement parent=expression.getParent();
      if (parent instanceof PsiPrefixExpression) {
        final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)parent;
        final IElementType tokenType=prefixExpression.getOperationTokenType();
        if (JavaTokenType.MINUS == tokenType) {
          if (isLong) {
            value=value.xor(LONG_BINARY_ONES).add(BigInteger.ONE);
          }
 else {
            value=value.xor(INT_BINARY_ONES).add(BigInteger.ONE);
          }
          @NonNls String hexString="0x" + value.toString(16);
          if (isLong) {
            hexString+='L';
          }
          replaceExpression(hexString,prefixExpression);
          return;
        }
      }
    }
    @NonNls String hexString="0x" + value.toString(16);
    if (isLong) {
      hexString+='L';
    }
    replaceExpression(hexString,expression);
  }
 else {
    String textString=expression.getText();
    final int textLength=textString.length();
    final char lastChar=textString.charAt(textLength - 1);
    final boolean isFloat=lastChar == 'f' || lastChar == 'F';
    if (isFloat) {
      textString=textString.substring(0,textLength - 1);
    }
    if (isFloat) {
      final float floatValue=Float.parseFloat(textString);
      final String floatString=Float.toHexString(floatValue) + lastChar;
      replaceExpression(floatString,expression);
    }
 else {
      final double doubleValue=Double.parseDouble(textString);
      final String floatString=Double.toHexString(doubleValue);
      replaceExpression(floatString,expression);
    }
  }
}
