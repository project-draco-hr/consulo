{
  final ElementToWorkOn[] elementToWorkOn=new ElementToWorkOn[1];
  ElementToWorkOn.processElementToWorkOn(myEditor,myFile,"INtr param",HelpID.INTRODUCE_PARAMETER,getProject(),new ElementToWorkOn.ElementsProcessor<ElementToWorkOn>(){
    @Override public boolean accept(    ElementToWorkOn el){
      return true;
    }
    @Override public void pass(    final ElementToWorkOn e){
      if (e == null)       return;
      elementToWorkOn[0]=e;
    }
  }
);
  final PsiExpression expr=elementToWorkOn[0].getExpression();
  final PsiLocalVariable localVar=elementToWorkOn[0].getLocalVariable();
  PsiElement context=expr == null ? localVar : expr;
  PsiMethod method=Util.getContainingMethod(context);
  if (method == null)   return false;
  final List<PsiMethod> methods=com.intellij.refactoring.introduceParameter.IntroduceParameterHandler.getEnclosingMethods(method);
  assertTrue(methods.size() > enclosingLevel);
  method=methods.get(enclosingLevel);
  final PsiMethod methodToSearchFor;
  if (searchForSuper) {
    methodToSearchFor=method.findDeepestSuperMethod();
  }
 else {
    methodToSearchFor=method;
  }
  PsiExpression[] occurences;
  PsiExpression initializer;
  if (expr == null) {
    initializer=localVar.getInitializer();
    occurences=CodeInsightUtil.findReferenceExpressions(method,localVar);
  }
 else {
    initializer=expr;
    occurences=new ExpressionOccurrenceManager(expr,method,null).findExpressionOccurrences();
  }
  TIntArrayList parametersToRemove=removeUnusedParameters ? Util.findParametersToRemove(method,initializer,occurences) : new TIntArrayList();
  new IntroduceParameterProcessor(getProject(),method,methodToSearchFor,initializer,expr,localVar,true,parameterName,replaceAllOccurences,replaceFieldsWithGetters,declareFinal,generateDelegate,null,parametersToRemove).run();
  myEditor.getSelectionModel().removeSelection();
  return true;
}
