{
  if (!FileModificationService.getInstance().preparePsiElementForWrite(aClass))   return;
  new WriteCommandAction.Simple(newSuperClass.getProject(),aClass.getContainingFile()){
    @Override protected void run() throws Throwable {
      PsiElementFactory factory=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();
      if (aClass instanceof PsiAnonymousClass) {
        ((PsiAnonymousClass)aClass).getBaseClassReference().replace(factory.createClassReferenceElement(newSuperClass));
      }
 else       if (oldSuperClass.isInterface()) {
        final PsiReferenceList interfaceList=aClass.getImplementsList();
        if (interfaceList != null) {
          for (          final PsiJavaCodeReferenceElement interfaceRef : interfaceList.getReferenceElements()) {
            final PsiElement aInterface=interfaceRef.resolve();
            if (aInterface != null && aInterface.isEquivalentTo(oldSuperClass)) {
              interfaceRef.delete();
            }
          }
        }
        final PsiReferenceList extendsList=aClass.getExtendsList();
        if (extendsList != null) {
          final PsiJavaCodeReferenceElement newClassReference=factory.createClassReferenceElement(newSuperClass);
          if (extendsList.getReferenceElements().length == 0) {
            extendsList.add(newClassReference);
          }
        }
      }
 else {
        final PsiReferenceList extendsList=aClass.getExtendsList();
        if (extendsList != null && extendsList.getReferenceElements().length == 1) {
          extendsList.getReferenceElements()[0].delete();
          PsiElement ref=extendsList.add(factory.createClassReferenceElement(newSuperClass));
          JavaCodeStyleManager.getInstance(aClass.getProject()).shortenClassReferences(ref);
        }
      }
    }
  }
.execute();
}
