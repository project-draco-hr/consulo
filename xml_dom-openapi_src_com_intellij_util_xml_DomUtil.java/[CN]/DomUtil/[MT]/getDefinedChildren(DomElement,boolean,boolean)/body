{
  if (parent instanceof MergedObject) {
    final SmartList<DomElement> result=new SmartList<DomElement>();
    parent.acceptChildren(new DomElementVisitor(){
      public void visitDomElement(      final DomElement element){
        if (hasXml(element)) {
          result.add(element);
        }
      }
    }
);
    return result;
  }
  ProgressManager.checkCanceled();
  if (parent instanceof GenericAttributeValue)   return Collections.emptyList();
  if (parent instanceof DomFileElement) {
    final DomFileElement element=(DomFileElement)parent;
    return tags ? Arrays.asList(element.getRootElement()) : Collections.<DomElement>emptyList();
  }
  final XmlElement xmlElement=parent.getXmlElement();
  if (xmlElement instanceof XmlTag) {
    XmlTag tag=(XmlTag)xmlElement;
    final DomManager domManager=parent.getManager();
    final SmartList<DomElement> result=new SmartList<DomElement>();
    if (attributes) {
      for (      final XmlAttribute attribute : tag.getAttributes()) {
        if (!attribute.isValid()) {
          throw new AssertionError("Invalid attr: parent.valid=" + tag.isValid());
        }
        GenericAttributeValue element=domManager.getDomElement(attribute);
        checkHasXml(attribute,element);
        ContainerUtil.addIfNotNull(element,result);
      }
    }
    if (tags) {
      for (      final XmlTag subTag : tag.getSubTags()) {
        if (!subTag.isValid()) {
          throw new AssertionError("Invalid subtag: parent.valid=" + tag.isValid());
        }
        DomElement element=domManager.getDomElement(subTag);
        checkHasXml(subTag,element);
        ContainerUtil.addIfNotNull(element,result);
      }
    }
    return result;
  }
  return Collections.emptyList();
}
