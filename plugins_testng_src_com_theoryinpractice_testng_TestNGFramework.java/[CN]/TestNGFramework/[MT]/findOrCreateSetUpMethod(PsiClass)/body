{
  PsiMethod method=findSetUpMethod(clazz);
  if (method != null)   return method;
  final PsiManager manager=clazz.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  PsiMethod patternMethod=factory.createMethodFromText("@org.testng.annotations.BeforeMethod\n protected void setUp() throws Exception {}",null);
  final PsiClass superClass=clazz.getSuperClass();
  if (superClass != null) {
    final PsiMethod[] methods=superClass.findMethodsBySignature(patternMethod,false);
    if (methods.length > 0) {
      final PsiModifierList modifierList=methods[0].getModifierList();
      if (!modifierList.hasModifierProperty(PsiModifier.PRIVATE)) {
        @NonNls String pattern="@org.testng.annotations.BeforeMethod\n";
        if (modifierList.hasModifierProperty(PsiModifier.PROTECTED)) {
          pattern+="protected ";
        }
 else         if (modifierList.hasModifierProperty(PsiModifier.PUBLIC)) {
          pattern+="public ";
        }
        patternMethod=factory.createMethodFromText(pattern + "void setUp() throws Exception {\nsuper.setUp();\n}",null);
      }
    }
  }
  final PsiMethod[] psiMethods=clazz.getMethods();
  PsiMethod inClass=null;
  for (  PsiMethod psiMethod : psiMethods) {
    if (AnnotationUtil.isAnnotated(psiMethod,BeforeMethod.class.getName(),false)) {
      inClass=psiMethod;
      break;
    }
  }
  if (inClass == null) {
    final PsiMethod psiMethod=(PsiMethod)clazz.add(patternMethod);
    JavaCodeStyleManager.getInstance(clazz.getProject()).shortenClassReferences(clazz);
    return psiMethod;
  }
 else   if (inClass.getBody() == null) {
    return (PsiMethod)inClass.replace(patternMethod);
  }
  return inClass;
}
