{
  PsiMethod method=findSetUpMethod(clazz);
  if (method != null)   return method;
  final PsiManager manager=clazz.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  String setUpName="setUp";
  PsiMethod patternMethod=factory.createMethodFromText("@" + BeforeMethod.class.getName() + "\n protected void "+ setUpName+ "() throws Exception {}",null);
  PsiMethod inClass=clazz.findMethodBySignature(patternMethod,false);
  if (inClass != null) {
    int exit=ApplicationManager.getApplication().isUnitTestMode() ? DialogWrapper.OK_EXIT_CODE : Messages.showYesNoDialog("Method \'" + setUpName + "\' already exist but is not annotated as @BeforeMethod.",CommonBundle.getWarningTitle(),"Annotate","Create new method",Messages.getWarningIcon());
    if (exit == DialogWrapper.OK_EXIT_CODE) {
      new AddAnnotationFix(BeforeMethod.class.getName(),inClass).invoke(inClass.getProject(),null,inClass.getContainingFile());
      return inClass;
    }
 else     if (exit == DialogWrapper.CANCEL_EXIT_CODE) {
      inClass=null;
      int i=0;
      while (clazz.findMethodBySignature(patternMethod,false) != null) {
        patternMethod.setName(setUpName + (++i));
      }
      setUpName=patternMethod.getName();
    }
  }
  final PsiClass superClass=clazz.getSuperClass();
  if (superClass != null) {
    final PsiMethod[] methods=superClass.findMethodsBySignature(patternMethod,false);
    if (methods.length > 0) {
      final PsiModifierList modifierList=methods[0].getModifierList();
      if (!modifierList.hasModifierProperty(PsiModifier.PRIVATE)) {
        @NonNls String pattern="@" + BeforeMethod.class.getName() + "\n";
        if (modifierList.hasModifierProperty(PsiModifier.PROTECTED)) {
          pattern+="protected ";
        }
 else         if (modifierList.hasModifierProperty(PsiModifier.PUBLIC)) {
          pattern+="public ";
        }
        patternMethod=factory.createMethodFromText(pattern + "void " + setUpName+ "() throws Exception {\nsuper."+ setUpName+ "();\n}",null);
      }
    }
  }
  final PsiMethod[] psiMethods=clazz.getMethods();
  PsiMethod testMethod=null;
  for (  PsiMethod psiMethod : psiMethods) {
    if (inClass == null && AnnotationUtil.isAnnotated(psiMethod,BeforeMethod.class.getName(),false)) {
      inClass=psiMethod;
    }
    if (testMethod == null && AnnotationUtil.isAnnotated(psiMethod,Test.class.getName(),false) && !psiMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
      testMethod=psiMethod;
    }
  }
  if (inClass == null) {
    final PsiMethod psiMethod;
    if (testMethod != null) {
      psiMethod=(PsiMethod)clazz.addBefore(patternMethod,testMethod);
    }
 else {
      psiMethod=(PsiMethod)clazz.add(patternMethod);
    }
    JavaCodeStyleManager.getInstance(clazz.getProject()).shortenClassReferences(clazz);
    return psiMethod;
  }
 else   if (inClass.getBody() == null) {
    return (PsiMethod)inClass.replace(patternMethod);
  }
  return inClass;
}
