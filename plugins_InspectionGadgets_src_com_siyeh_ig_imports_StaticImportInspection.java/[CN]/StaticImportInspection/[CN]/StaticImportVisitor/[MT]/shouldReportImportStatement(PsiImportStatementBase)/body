{
  final PsiJavaCodeReferenceElement importReference=importStatement.getImportReference();
  if (importReference == null) {
    return false;
  }
  final PsiElement target;
  if (importReference instanceof PsiImportStaticReferenceElement) {
    final PsiImportStaticReferenceElement importStaticReferenceElement=(PsiImportStaticReferenceElement)importReference;
    final PsiJavaCodeReferenceElement classReference=importStaticReferenceElement.getClassReference();
    target=classReference.resolve();
  }
 else {
    target=importReference.resolve();
  }
  if (target instanceof PsiClass) {
    PsiClass aClass=(PsiClass)target;
    while (aClass != null) {
      final String qualifiedName=aClass.getQualifiedName();
      if (allowedClasses.contains(qualifiedName)) {
        return false;
      }
      aClass=aClass.getContainingClass();
    }
  }
  if (importStatement.isOnDemand()) {
    return true;
  }
  if (ignoreSingleFieldImports || ignoreSingeMethodImports) {
    boolean field=false;
    boolean method=false;
    final JavaResolveResult[] results=importReference.multiResolve(false);
    for (    JavaResolveResult result : results) {
      final PsiElement element=result.getElement();
      if (element instanceof PsiField) {
        field=true;
      }
 else       if (element instanceof PsiMethod) {
        method=true;
      }
    }
    if (field && !method) {
      if (ignoreSingleFieldImports) {
        return false;
      }
    }
 else     if (method && !field) {
      if (ignoreSingeMethodImports) {
        return false;
      }
    }
  }
  return true;
}
