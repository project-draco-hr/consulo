{
  ProperTextRange.assertProperRange(rangeInsideHost);
  String subText=rangeInsideHost.substring(myHost.getText());
  outSourceOffsets=new int[subText.length() + 1];
  final IElementType elementType=myHost.getFirstChild().getNode().getElementType();
  if (elementType == GroovyTokenTypes.mSTRING_LITERAL || elementType == GroovyTokenTypes.mGSTRING_LITERAL) {
    return GrStringUtil.parseStringCharacters(subText,outChars,outSourceOffsets);
  }
 else   if (elementType == GroovyTokenTypes.mREGEX_LITERAL) {
    return GrStringUtil.parseRegexCharacters(subText,outChars,outSourceOffsets,true);
  }
 else   if (elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) {
    return GrStringUtil.parseRegexCharacters(subText,outChars,outSourceOffsets,false);
  }
 else   return false;
}
