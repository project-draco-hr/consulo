{
  if (file instanceof PsiCompiledElement) {
    file=(PsiFile)((PsiCompiledElement)file).getMirror();
  }
  if (!(file instanceof PsiClassOwner)) {
    return new ReferenceTransferableData(new ReferenceTransferableData.ReferenceData[0]);
  }
  final ArrayList<ReferenceTransferableData.ReferenceData> array=new ArrayList<ReferenceTransferableData.ReferenceData>();
  for (int j=0; j < startOffsets.length; j++) {
    final int startOffset=startOffsets[j];
    final int endOffset=endOffsets[j];
    final List<PsiElement> elements=CollectHighlightsUtil.getElementsInRange(file,startOffset,endOffset);
    for (    final PsiElement element : elements) {
      if (element instanceof PsiJavaCodeReferenceElement) {
        if (!((PsiJavaCodeReferenceElement)element).isQualified()) {
          final JavaResolveResult resolveResult=((PsiJavaCodeReferenceElement)element).advancedResolve(false);
          final PsiElement refElement=resolveResult.getElement();
          if (refElement != null && refElement.getContainingFile() != file) {
            if (refElement instanceof PsiClass) {
              if (refElement.getContainingFile() != element.getContainingFile()) {
                final String qName=((PsiClass)refElement).getQualifiedName();
                if (qName != null) {
                  addReferenceData(element,array,startOffset,qName,null);
                }
              }
            }
 else             if (resolveResult.getCurrentFileResolveScope() instanceof PsiImportStaticStatement) {
              final String classQName=((PsiMember)refElement).getContainingClass().getQualifiedName();
              final String name=((PsiNamedElement)refElement).getName();
              if (classQName != null && name != null) {
                addReferenceData(element,array,startOffset,classQName,name);
              }
            }
          }
        }
      }
    }
  }
  return new ReferenceTransferableData(array.toArray(new ReferenceTransferableData.ReferenceData[array.size()]));
}
