{
  super(new BorderLayout());
  final AnAction[] recentProjectActions=RecentProjectsManagerBase.getInstance().getRecentProjectsActions(false);
  myList=new MyList(recentProjectActions);
  myList.setCellRenderer(new RecentProjectItemRenderer());
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent event,    int clickCount){
      Object selection=myList.getSelectedValue();
      if (selection != null) {
        ((AnAction)selection).actionPerformed(AnActionEvent.createFromInputEvent((AnAction)selection,event,ActionPlaces.WELCOME_SCREEN));
      }
      return true;
    }
  }
.installOn(myList);
  myList.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Object selection=myList.getSelectedValue();
      if (selection != null) {
        ((AnAction)selection).actionPerformed(AnActionEvent.createFromInputEvent((AnAction)selection,null,ActionPlaces.WELCOME_SCREEN));
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseMotionListener(new MouseMotionAdapter(){
    boolean myIsEngaged=false;
    public void mouseMoved(    MouseEvent e){
      if (myIsEngaged && !UIUtil.isSelectionButtonDown(e)) {
        Point point=e.getPoint();
        int index=myList.locationToIndex(point);
        myList.setSelectedIndex(index);
      }
 else {
        myIsEngaged=true;
      }
    }
  }
);
  myList.setSelectedIndex(0);
  JBScrollPane scroll=new JBScrollPane(myList);
  scroll.setBorder(null);
  add(scroll,BorderLayout.CENTER);
  JPanel title=new JPanel(){
    @Override public Dimension getPreferredSize(){
      return new Dimension(super.getPreferredSize().width,28);
    }
  }
;
  JLabel titleLabel=new JLabel("Recent Projects");
  title.add(titleLabel);
  titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
  title.setBackground(Gray._210);
  add(title,BorderLayout.NORTH);
  setBorder(new LineBorder(Gray._190));
}
