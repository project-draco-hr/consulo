{
  super(new BorderLayout());
  final AnAction[] recentProjectActions=RecentProjectsManagerBase.getInstance().getRecentProjectsActions(false);
  myPathShortener=new UniqueNameBuilder<ReopenProjectAction>(SystemProperties.getUserHome(),File.separator,40);
  for (  AnAction action : recentProjectActions) {
    ReopenProjectAction item=(ReopenProjectAction)action;
    myPathShortener.addPath(item,item.getProjectPath());
  }
  myList=new MyList(recentProjectActions);
  myList.setCellRenderer(new RecentProjectItemRenderer());
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent event,    int clickCount){
      int selectedIndex=myList.getSelectedIndex();
      if (selectedIndex >= 0) {
        if (myList.getCellBounds(selectedIndex,selectedIndex).contains(event.getPoint())) {
          Object selection=myList.getSelectedValue();
          if (selection != null) {
            ((AnAction)selection).actionPerformed(AnActionEvent.createFromInputEvent((AnAction)selection,event,ActionPlaces.WELCOME_SCREEN));
          }
        }
      }
      return true;
    }
  }
.installOn(myList);
  myList.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Object selection=myList.getSelectedValue();
      if (selection != null) {
        ((AnAction)selection).actionPerformed(AnActionEvent.createFromInputEvent((AnAction)selection,null,ActionPlaces.WELCOME_SCREEN));
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  ActionListener deleteAction=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Object[] selection=myList.getSelectedValues();
      if (selection != null && selection.length > 0) {
        final int rc=Messages.showOkCancelDialog(RecentProjectPanel.this,"Remove '" + StringUtil.join(selection,new Function<Object,String>(){
          @Override public String fun(          Object action){
            return ((ReopenProjectAction)action).getTemplatePresentation().getText();
          }
        }
,"'\n'") + "' from recent projects list?","Remove Recent Project",Messages.getQuestionIcon());
        if (rc == 0) {
          final RecentProjectsManagerBase manager=RecentProjectsManagerBase.getInstance();
          for (          Object projectAction : selection) {
            manager.removePath(((ReopenProjectAction)projectAction).getProjectPath());
          }
          ListUtil.removeSelectedItems(myList);
        }
      }
    }
  }
;
  myList.registerKeyboardAction(deleteAction,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.registerKeyboardAction(deleteAction,KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseMotionListener(new MouseMotionAdapter(){
    boolean myIsEngaged=false;
    public void mouseMoved(    MouseEvent e){
      if (myIsEngaged && !UIUtil.isSelectionButtonDown(e)) {
        Point point=e.getPoint();
        int index=myList.locationToIndex(point);
        myList.setSelectedIndex(index);
        final Rectangle bounds=myList.getCellBounds(index,index);
        if (bounds != null && bounds.contains(point)) {
          myList.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
 else {
          myList.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
      }
 else {
        myIsEngaged=true;
      }
    }
  }
);
  myList.setSelectedIndex(0);
  JBScrollPane scroll=new JBScrollPane(myList);
  scroll.setBorder(null);
  JComponent list=recentProjectActions.length == 0 ? myList : ListWithFilter.wrap(myList,scroll,new Function<Object,String>(){
    @Override public String fun(    Object o){
      ReopenProjectAction item=(ReopenProjectAction)o;
      String home=SystemProperties.getUserHome();
      String path=item.getProjectPath();
      if (FileUtil.startsWith(path,home)) {
        path=path.substring(home.length());
      }
      return item.getProjectName() + " " + path;
    }
  }
);
  add(list,BorderLayout.CENTER);
}
