{
  super(new BorderLayout());
  final AnAction[] recentProjectActions=RecentProjectsManager.getInstance().getRecentProjectsActions(false,isUseGroups());
  myPathShortener=new UniqueNameBuilder<ReopenProjectAction>(SystemProperties.getUserHome(),File.separator,40);
  for (  AnAction action : recentProjectActions) {
    if (action instanceof ReopenProjectAction) {
      final ReopenProjectAction item=(ReopenProjectAction)action;
      myPathShortener.addPath(item,item.getProjectPath());
    }
  }
  myList=createList(recentProjectActions,getPreferredScrollableViewportSize());
  myList.setCellRenderer(createRenderer(myPathShortener));
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      int selectedIndex=myList.getSelectedIndex();
      if (selectedIndex >= 0) {
        Rectangle cellBounds=myList.getCellBounds(selectedIndex,selectedIndex);
        if (cellBounds.contains(event.getPoint())) {
          Object selection=myList.getSelectedValue();
          if (rectInListCoordinatesContains(cellBounds,event.getPoint())) {
            removeRecentProjectAction.actionPerformed(null);
          }
 else           if (selection != null) {
            ((AnAction)selection).actionPerformed(AnActionEvent.createFromInputEvent((AnAction)selection,event,ActionPlaces.WELCOME_SCREEN));
          }
        }
      }
      return true;
    }
  }
.installOn(myList);
  myList.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final Object[] selectedValued=myList.getSelectedValues();
      if (selectedValued != null) {
        for (        Object selection : selectedValued) {
          AnActionEvent event=AnActionEvent.createFromInputEvent((AnAction)selection,null,ActionPlaces.WELCOME_SCREEN);
          ((AnAction)selection).actionPerformed(event);
        }
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  removeRecentProjectAction=new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      Object[] selection=myList.getSelectedValues();
      if (selection != null && selection.length > 0) {
        final int rc=Messages.showOkCancelDialog(RecentProjectPanel.this,"Remove '" + StringUtil.join(selection,new Function<Object,String>(){
          @Override public String fun(          Object action){
            return ((AnAction)action).getTemplatePresentation().getText();
          }
        }
,"'\n'") + "' from recent projects list?","Remove Recent Project",Messages.getQuestionIcon());
        if (rc == Messages.OK) {
          for (          Object projectAction : selection) {
            removeRecentProjectElement(projectAction);
          }
          ListUtil.removeSelectedItems(myList);
        }
      }
    }
    @Override public void update(    @NotNull AnActionEvent e){
      e.getPresentation().setEnabled(!ListWithFilter.isSearchActive(myList));
    }
  }
;
  removeRecentProjectAction.registerCustomShortcutSet(CustomShortcutSet.fromString("DELETE","BACK_SPACE"),myList,parentDisposable);
  addMouseMotionListener();
  myList.setSelectedIndex(0);
  JBScrollPane scroll=new JBScrollPane(myList);
  scroll.setBorder(null);
  JComponent list=recentProjectActions.length == 0 ? myList : ListWithFilter.wrap(myList,scroll,new Function<Object,String>(){
    @Override public String fun(    Object o){
      if (o instanceof ReopenProjectAction) {
        ReopenProjectAction item=(ReopenProjectAction)o;
        String home=SystemProperties.getUserHome();
        String path=item.getProjectPath();
        if (FileUtil.startsWith(path,home)) {
          path=path.substring(home.length());
        }
        return item.getProjectName() + " " + path;
      }
 else       if (o instanceof ProjectGroupActionGroup) {
        return ((ProjectGroupActionGroup)o).getGroup().getName();
      }
      return o.toString();
    }
  }
);
  add(list,BorderLayout.CENTER);
  JPanel title=createTitle();
  if (title != null) {
    add(title,BorderLayout.NORTH);
  }
  setBorder(new LineBorder(WelcomeScreenColors.BORDER_COLOR));
}
