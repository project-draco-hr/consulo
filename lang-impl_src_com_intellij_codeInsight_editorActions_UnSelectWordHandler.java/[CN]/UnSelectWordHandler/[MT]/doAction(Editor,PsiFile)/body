{
  if (!editor.getSelectionModel().hasSelection()) {
    return;
  }
  CharSequence text=editor.getDocument().getCharsSequence();
  int caretOffset=editor.getCaretModel().getOffset();
  if (caretOffset > 0 && !Character.isJavaIdentifierPart(text.charAt(caretOffset)) && Character.isJavaIdentifierPart(text.charAt(caretOffset - 1))) {
    caretOffset--;
  }
  PsiElement element=file.findElementAt(caretOffset);
  if (element instanceof PsiWhiteSpace && caretOffset > 0) {
    PsiElement anotherElement=file.findElementAt(caretOffset - 1);
    if (!(anotherElement instanceof PsiWhiteSpace)) {
      element=anotherElement;
    }
  }
  while (element instanceof PsiWhiteSpace) {
    if (element.getNextSibling() == null) {
      element=element.getParent();
    }
    element=element.getNextSibling();
    caretOffset=element.getTextRange().getStartOffset();
  }
  if (element != null) {
    file=element.getContainingFile();
  }
  TextRange selectionRange=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  TextRange newRange=null;
  while (element != null && element.getContainingFile() == file) {
    TextRange range=advance(selectionRange,element,text,caretOffset,editor);
    if (range != null && (newRange == null || range.contains(newRange))) {
      newRange=range;
    }
    element=element.getParent();
  }
  if (newRange == null) {
    editor.getSelectionModel().setSelection(caretOffset,caretOffset);
  }
 else {
    editor.getSelectionModel().setSelection(newRange.getStartOffset(),newRange.getEndOffset());
  }
}
