{
  if (myProjectFile == null) {
    throw new ConfigurationException(GradleBundle.message("gradle.import.text.error.project.undefined"));
  }
  if (myProjectFile.isDirectory()) {
    throw new ConfigurationException(GradleBundle.message("gradle.import.text.error.directory.instead.file"));
  }
  final Ref<String> errorReason=new Ref<String>();
  try {
    final Project project=getProject(wizardContext);
    ProgressManager.getInstance().run(new Task.Modal(project,GradleBundle.message("gradle.import.progress.text"),true){
      @SuppressWarnings("ThrowableResultOfMethodCallIgnored") @Override public void run(      @NotNull final ProgressIndicator indicator){
        GradleResolveProjectTask task=new GradleResolveProjectTask(project,myProjectFile.getAbsolutePath(),false);
        task.execute(indicator);
        myGradleProject=task.getProject();
        if (myGradleProject != null) {
          return;
        }
        final Throwable error=task.getError();
        if (error == null) {
          return;
        }
        Throwable unwrapped=RemoteUtil.unwrap(error);
        String reason=unwrapped.getLocalizedMessage();
        if (!StringUtil.isEmpty(reason)) {
          errorReason.set(reason);
        }
        if (unwrapped.getClass() == NoClassDefFoundError.class) {
          errorReason.set(GradleBundle.message("gradle.import.text.incomplete.tooling.api"));
        }
 else         if (unwrapped.getClass() == GradleApiException.class) {
          GradleLog.LOG.warn("Can't resolve gradle project. Reason: gradle api threw an exception:\n" + ((GradleApiException)unwrapped).getOriginalReason());
        }
 else {
          GradleLog.LOG.warn("Can't resolve gradle project",unwrapped);
        }
      }
    }
);
  }
 catch (  IllegalArgumentException e) {
    throw new ConfigurationException(e.getMessage(),GradleBundle.message("gradle.import.text.error.cannot.parse.project"));
  }
  if (myGradleProject == null) {
    String errorMessage=GradleBundle.message("gradle.import.text.error.resolve.generic.without.reason",myProjectFile.getPath());
    String reason=errorReason.get();
    if (reason != null) {
      errorMessage=GradleBundle.message("gradle.import.text.error.resolve.generic.with.reason",myProjectFile.getPath(),reason);
    }
    throw new ConfigurationException(errorMessage,GradleBundle.message("gradle.import.title.error.resolve.generic"));
  }
}
