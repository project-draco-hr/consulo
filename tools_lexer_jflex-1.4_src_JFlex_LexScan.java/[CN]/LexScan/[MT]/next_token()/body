{
  int zzInput;
  int zzAction;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    int zzCurrentPosL;
    int zzMarkedPosL=zzMarkedPos;
    int zzEndReadL=zzEndRead;
    char[] zzBufferL=zzBuffer;
    char[] zzCMapL=ZZ_CMAP;
    boolean zzR=false;
    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
switch (zzBufferL[zzCurrentPosL]) {
case '\u000B':
case '\u000C':
case '\u0085':
case '\u2028':
case '\u2029':
        yyline++;
      yycolumn=0;
    zzR=false;
  break;
case '\r':
yyline++;
yycolumn=0;
zzR=true;
break;
case '\n':
if (zzR) zzR=false;
 else {
yyline++;
yycolumn=0;
}
break;
default :
zzR=false;
yycolumn++;
}
}
if (zzR) {
boolean zzPeek;
if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n';
 else if (zzAtEOF) zzPeek=false;
 else {
boolean eof=zzRefill();
zzEndReadL=zzEndRead;
zzMarkedPosL=zzMarkedPos;
zzBufferL=zzBuffer;
if (eof) zzPeek=false;
 else zzPeek=zzBufferL[zzMarkedPosL] == '\n';
}
if (zzPeek) yyline--;
}
if (zzMarkedPosL > zzStartRead) {
switch (zzBufferL[zzMarkedPosL - 1]) {
case '\n':
case '\u000B':
case '\u000C':
case '\u0085':
case '\u2028':
case '\u2029':
zzAtBOL=true;
break;
case '\r':
if (zzMarkedPosL < zzEndReadL) zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';
 else if (zzAtEOF) zzAtBOL=false;
 else {
boolean eof=zzRefill();
zzMarkedPosL=zzMarkedPos;
zzEndReadL=zzEndRead;
zzBufferL=zzBuffer;
if (eof) zzAtBOL=false;
 else zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';
}
break;
default :
zzAtBOL=false;
}
}
zzAction=-1;
zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1];
 else zzState=ZZ_LEXSTATE[zzLexicalState];
zzForAction: {
while (true) {
if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++];
 else if (zzAtEOF) {
zzInput=YYEOF;
break zzForAction;
}
 else {
zzCurrentPos=zzCurrentPosL;
zzMarkedPos=zzMarkedPosL;
boolean eof=zzRefill();
zzCurrentPosL=zzCurrentPos;
zzMarkedPosL=zzMarkedPos;
zzBufferL=zzBuffer;
zzEndReadL=zzEndRead;
if (eof) {
zzInput=YYEOF;
break zzForAction;
}
 else {
zzInput=zzBufferL[zzCurrentPosL++];
}
}
int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
if (zzNext == -1) break zzForAction;
zzState=zzNext;
int zzAttributes=zzAttrL[zzState];
if ((zzAttributes & 1) == 1) {
zzAction=zzState;
zzMarkedPosL=zzCurrentPosL;
if ((zzAttributes & 8) == 8) break zzForAction;
}
}
}
zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 118:
{
cupDebug=true;
}
case 177:
break;
case 175:
{
return symbol(UNICODE_FINAL_QUOTE_PUNCTUATION);
}
case 178:
break;
case 168:
{
return symbol(UNICODE_DASH_PUNCTUATION);
}
case 179:
break;
case 122:
{
actionText.setLength(0);
yybegin(JAVA_CODE);
action_line=yyline + 1;
return symbol(EOFRULE);
}
case 180:
break;
case 113:
{
File f=new File(yytext().substring(9).trim());
if (!f.canRead()) throw new ScannerException(file,ErrorMessages.NOT_READABLE,yyline);
if (files.search(f) > 0) throw new ScannerException(file,ErrorMessages.FILE_CYCLE,yyline);
try {
yypushStream(new FileReader(f));
files.push(file);
file=f;
Out.println("Including \"" + file + "\"");
}
 catch (FileNotFoundException e) {
throw new ScannerException(file,ErrorMessages.NOT_READABLE,yyline);
}
}
case 181:
break;
case 88:
{
return symbol(FULL);
}
case 182:
break;
case 158:
{
return symbol(UNICODE_LINE_SEPARATOR);
}
case 183:
break;
case 92:
{
return symbol(ASCII);
}
case 184:
break;
case 21:
{
string.setLength(0);
nextState=REGEXP;
yybegin(STRING_CONTENT);
}
case 185:
break;
case 142:
{
return symbol(UPPERCLASS);
}
case 186:
break;
case 34:
{
return symbol(COMMA);
}
case 187:
break;
case 61:
{
return symbol(CHAR,new Character('\f'));
}
case 188:
break;
case 111:
{
throw new ScannerException(file,ErrorMessages.NO_BUFFER_SIZE,yyline);
}
case 189:
break;
case 153:
{
return symbol(UNICODE_OTHER_NUMBER);
}
case 190:
break;
case 104:
{
throw new ScannerException(file,ErrorMessages.EOF_WO_ACTION);
}
case 191:
break;
case 143:
{
return symbol(LOWERCLASS);
}
case 192:
break;
case 176:
{
return symbol(UNICODE_INITIAL_QUOTE_PUNCTUATION);
}
case 193:
break;
case 72:
{
string.append('\r');
}
case 194:
break;
case 43:
{
return symbol(HAT);
}
case 195:
break;
case 48:
{
yybegin(MACROS);
ctorArgs.add(yytext().trim());
}
case 196:
break;
case 1:
{
return symbol(EOF);
}
case 197:
break;
case 59:
{
return symbol(CHAR,new Character('\t'));
}
case 198:
break;
case 145:
{
eofclose=false;
}
case 199:
break;
case 103:
{
isPublic=true;
}
case 200:
break;
case 164:
{
return symbol(UNICODE_UPPERCASE_LETTER);
}
case 201:
break;
case 112:
{
actionText.setLength(0);
yybegin(JAVA_CODE);
Symbol s=symbol_countUpdate(EOFRULE,null);
action_line=s.left + 1;
return s;
}
case 202:
break;
case 40:
{
balance++;
return symbol(OPENCLASS);
}
case 203:
break;
case 147:
{
return symbol(UNICODE_FORMAT);
}
case 204:
break;
case 11:
{
yybegin(REGEXP);
}
case 205:
break;
case 12:
{
yybegin(STATES);
return symbol_countUpdate(LESSTHAN,null);
}
case 206:
break;
case 68:
{
string.append((char)Integer.parseInt(yytext().substring(1,yytext().length()),8));
}
case 207:
break;
case 62:
{
return symbol(CHAR,new Character('\b'));
}
case 208:
break;
case 39:
{
throw new ScannerException(file,ErrorMessages.EOL_IN_CHARCLASS,yyline,yycolumn);
}
case 209:
break;
case 5:
{
states.insert(yytext(),inclusive_states);
}
case 210:
break;
case 70:
{
string.append('\n');
}
case 211:
break;
case 10:
{
yybegin(REGEXP);
return symbol(EQUALS);
}
case 212:
break;
case 146:
{
return symbol(JLETTERDIGITCLASS);
}
case 213:
break;
case 19:
{
return symbol(STAR);
}
case 214:
break;
case 42:
{
string.setLength(0);
nextState=CHARCLASS;
yybegin(STRING_CONTENT);
}
case 215:
break;
case 116:
{
isAbstract=true;
}
case 216:
break;
case 75:
{
yypushback(1);
yycolumn--;
return symbol(CHAR,new Character(yytext().charAt(0)));
}
case 217:
break;
case 114:
{
lexThrow=concExc(lexThrow,yytext().substring(8).trim());
}
case 218:
break;
case 109:
{
throw new ScannerException(file,ErrorMessages.QUIL_CUPSYM,yyline);
}
case 219:
break;
case 93:
{
packed=false;
useRowMap=true;
}
case 220:
break;
case 87:
{
cupCompatible=true;
isImplementing=concExc(isImplementing,"java_cup.runtime.Scanner");
if (functionName == null) functionName="next_token";
if (tokenType == null) tokenType="java_cup.runtime.Symbol";
if (eofVal == null) eofVal="return new java_cup.runtime.Symbol(" + cupSymbol + ".EOF);";
if (!Options.jlex) eofclose=true;
}
case 221:
break;
case 171:
{
return symbol(UNICODE_PARAGRAPH_SEPARATOR);
}
case 222:
break;
case 30:
{
bolUsed=true;
return symbol(HAT);
}
case 223:
break;
case 4:
{
throw new ScannerException(file,ErrorMessages.UNEXPECTED_CHAR,yyline,yycolumn);
}
case 224:
break;
case 35:
{
yybegin(REGEXP);
return symbol(MORETHAN);
}
case 225:
break;
case 100:
{
packed=false;
useRowMap=false;
}
case 226:
break;
case 119:
{
caseless=true;
}
case 227:
break;
case 38:
{
yybegin(nextState);
return symbol(STRING,string.toString());
}
case 228:
break;
case 76:
{
return symbol(REPEAT,new Integer(yytext().substring(1).trim()));
}
case 229:
break;
case 13:
{
return symbol_countUpdate(RBRACE,null);
}
case 230:
break;
case 139:
{
scanErrorException=yytext().substring(11).trim();
}
case 231:
break;
case 141:
{
lexThrow=concExc(lexThrow,yytext().substring(12).trim());
}
case 232:
break;
case 84:
{
return symbol(MACROUSE,yytext().substring(1,yytext().length() - 1));
}
case 233:
break;
case 2:
{
}
case 234:
break;
case 150:
{
return symbol(UNICODE_UNASSIGNED);
}
case 235:
break;
case 156:
{
return symbol(UNICODE_LETTER_NUMBER);
}
case 236:
break;
case 127:
{
throw new ScannerException(file,ErrorMessages.QUIL_INITTHROW,yyline);
}
case 237:
break;
case 47:
{
throw new ScannerException(file,ErrorMessages.CTOR_ARG,yyline,yycolumn);
}
case 238:
break;
case 161:
{
return symbol(UNICODE_CURRENCY_SYMBOL);
}
case 239:
break;
case 108:
{
throw new ScannerException(file,ErrorMessages.QUIL_THROW,yyline);
}
case 240:
break;
case 31:
{
actionText.append(yytext());
}
case 241:
break;
case 83:
{
string.append((char)Integer.parseInt(yytext().substring(2,yytext().length()),16));
}
case 242:
break;
case 174:
{
return symbol(UNICODE_COMBINING_SPACING_MARK);
}
case 243:
break;
case 107:
{
notUnix=true;
}
case 244:
break;
case 89:
{
lineCount=true;
}
case 245:
break;
case 136:
{
initThrow=concExc(initThrow,yytext().substring(11).trim());
}
case 246:
break;
case 131:
{
standalone=true;
isInteger=true;
}
case 247:
break;
case 52:
{
nextState=MACROS;
yybegin(COMMENT);
}
case 248:
break;
case 25:
{
return symbol(TILDE);
}
case 249:
break;
case 37:
{
throw new ScannerException(file,ErrorMessages.UNTERMINATED_STR,yyline,yycolumn);
}
case 250:
break;
case 110:
{
className=yytext().substring(7).trim();
}
case 251:
break;
case 9:
{
throw new ScannerException(file,ErrorMessages.UNKNOWN_OPTION,yyline,yycolumn);
}
case 252:
break;
case 162:
{
return symbol(UNICODE_MODIFIER_LETTER);
}
case 253:
break;
case 55:
{
nextState=REGEXPSTART;
yybegin(COMMENT);
}
case 254:
break;
case 173:
{
return symbol(UNICODE_CONNECTOR_PUNCTUATION);
}
case 255:
break;
case 16:
{
return symbol(POINT);
}
case 256:
break;
case 73:
{
string.append('\f');
}
case 257:
break;
case 65:
{
yybegin(REPEATEXP);
return symbol(REPEAT,new Integer(yytext().trim().substring(1).trim()));
}
case 258:
break;
case 80:
{
return symbol(CHAR,new Character((char)Integer.parseInt(yytext().substring(2,yytext().length()),16)));
}
case 259:
break;
case 140:
{
initThrow=concExc(initThrow,string);
yybegin(MACROS);
}
case 260:
break;
case 135:
{
eofThrow=concExc(eofThrow,string);
yybegin(MACROS);
}
case 261:
break;
case 71:
{
string.append('\t');
}
case 262:
break;
case 67:
{
string.append(yytext().charAt(1));
}
case 263:
break;
case 7:
{
yybegin(MACROS);
}
case 264:
break;
case 98:
{
eofCode=conc(eofCode,string);
yybegin(MACROS);
}
case 265:
break;
case 56:
{
return symbol(CHAR,new Character(yytext().charAt(1)));
}
case 266:
break;
case 154:
{
return symbol(UNICODE_OTHER_LETTER);
}
case 267:
break;
case 28:
{
return symbol(PLUS);
}
case 268:
break;
case 101:
{
columnCount=true;
}
case 269:
break;
case 124:
{
isExtending=yytext().substring(9).trim();
}
case 270:
break;
case 123:
{
eofVal=string.toString();
yybegin(MACROS);
}
case 271:
break;
case 36:
{
string.append(yytext());
}
case 272:
break;
case 97:
{
return symbol(UNICODE);
}
case 273:
break;
case 152:
{
return symbol(UNICODE_PRIVATE_USE);
}
case 274:
break;
case 163:
{
return symbol(UNICODE_MODIFIER_SYMBOL);
}
case 275:
break;
case 74:
{
string.append('\b');
}
case 276:
break;
case 24:
{
return symbol(BANG);
}
case 277:
break;
case 132:
{
throw new ScannerException(file,ErrorMessages.QUIL_SCANERROR,yyline);
}
case 278:
break;
case 91:
{
packed=true;
useRowMap=true;
}
case 279:
break;
case 26:
{
return symbol(OPENBRACKET);
}
case 280:
break;
case 155:
{
return symbol(UNICODE_OTHER_SYMBOL);
}
case 281:
break;
case 60:
{
return symbol(CHAR,new Character('\r'));
}
case 282:
break;
case 94:
{
isFinal=true;
}
case 283:
break;
case 27:
{
return symbol(CLOSEBRACKET);
}
case 284:
break;
case 86:
{
isInteger=true;
}
case 285:
break;
case 166:
{
return symbol(UNICODE_TITLECASE_LETTER);
}
case 286:
break;
case 20:
{
return symbol(LOOKAHEAD);
}
case 287:
break;
case 51:
{
commentbalance++;
}
case 288:
break;
case 49:
{
t.start();
yybegin(MACROS);
macroDefinition=true;
return symbol(USERCODE,userCode);
}
case 289:
break;
case 44:
{
return symbol(DASH);
}
case 290:
break;
case 138:
{
throw new ScannerException(file,ErrorMessages.QUIL_YYLEXTHROW,yyline);
}
case 291:
break;
case 96:
{
debugOption=true;
}
case 292:
break;
case 64:
{
nextState=REGEXP;
yybegin(COMMENT);
}
case 293:
break;
case 32:
{
if (balance > 0) {
balance--;
actionText.append('}');
}
 else {
yybegin(REGEXPSTART);
Action a=new Action(actionText.toString(),action_line);
actions.addElement(a);
return symbol(ACTION,a);
}
}
case 294:
break;
case 157:
{
return symbol(UNICODE_ENCLOSING_MARK);
}
case 295:
break;
case 29:
{
return symbol(DOLLAR);
}
case 296:
break;
case 169:
{
return symbol(UNICODE_OTHER_PUNCTUATION);
}
case 297:
break;
case 17:
{
yybegin(CHARCLASS);
return symbol(OPENCLASS);
}
case 298:
break;
case 105:
{
initCode=conc(initCode,string);
yybegin(MACROS);
}
case 299:
break;
case 69:
{
string.append('\"');
}
case 300:
break;
case 137:
{
isImplementing=concExc(isImplementing,yytext().substring(12).trim());
}
case 301:
break;
case 126:
{
return symbol(LETTERCLASS);
}
case 302:
break;
case 151:
{
return symbol(UNICODE_MATH_SYMBOL);
}
case 303:
break;
case 102:
{
isInteger=true;
if (eofVal == null) eofVal="return 0;";
eofclose=true;
}
case 304:
break;
case 41:
{
if (balance > 0) balance--;
 else yybegin(REGEXP);
return symbol(CLOSECLASS);
}
case 305:
break;
case 77:
{
string.setLength(0);
yybegin(COPY);
}
case 306:
break;
case 8:
{
return symbol(IDENT,yytext());
}
case 307:
break;
case 121:
{
return symbol(DIGITCLASS);
}
case 308:
break;
case 144:
{
lexThrow=concExc(lexThrow,string);
yybegin(MACROS);
}
case 309:
break;
case 53:
{
Out.warning(ErrorMessages.NOT_AT_BOL,yyline);
yypushback(1);
}
case 310:
break;
case 23:
{
return symbol(BAR);
}
case 311:
break;
case 148:
{
return symbol(UNICODE_CONTROL);
}
case 312:
break;
case 45:
{
throw new ScannerException(file,ErrorMessages.UNEXPECTED_NL,yyline,yycolumn);
}
case 313:
break;
case 117:
{
cupSymbol=yytext().substring(8).trim();
if (cupCompatible) Out.warning(ErrorMessages.CUPSYM_AFTER_CUP,yyline);
}
case 314:
break;
case 58:
{
return symbol(CHAR,new Character('\n'));
}
case 315:
break;
case 95:
{
isYYEOF=true;
}
case 316:
break;
case 14:
{
return symbol(CHAR,new Character(yytext().charAt(0)));
}
case 317:
break;
case 99:
{
tokenType=yytext().substring(6).trim();
}
case 318:
break;
case 160:
{
return symbol(UNICODE_SPACE_SEPARATOR);
}
case 319:
break;
case 33:
{
balance++;
actionText.append('{');
}
case 320:
break;
case 128:
{
eofThrow=concExc(eofThrow,yytext().substring(10).trim());
}
case 321:
break;
case 63:
{
actionText.setLength(0);
yybegin(JAVA_CODE);
action_line=yyline + 1;
return symbol(REGEXPEND);
}
case 322:
break;
case 81:
{
return symbol_countUpdate(MACROUSE,makeMacroIdent());
}
case 323:
break;
case 170:
{
return symbol(UNICODE_START_PUNCTUATION);
}
case 324:
break;
case 149:
{
return symbol(UNICODE_SURROGATE);
}
case 325:
break;
case 15:
{
if (macroDefinition) {
yybegin(MACROS);
}
return symbol(REGEXPEND);
}
case 326:
break;
case 125:
{
throw new ScannerException(file,ErrorMessages.QUIL_EOFTHROW,yyline);
}
case 327:
break;
case 167:
{
return symbol(UNICODE_LOWERCASE_LETTER);
}
case 328:
break;
case 90:
{
charCount=true;
}
case 329:
break;
case 165:
{
return symbol(UNICODE_NON_SPACING_MARK);
}
case 330:
break;
case 130:
{
visibility="private";
Skeleton.makePrivate();
}
case 331:
break;
case 134:
{
return symbol(JLETTERCLASS);
}
case 332:
break;
case 22:
{
yybegin(REGEXPSTART);
return symbol(LBRACE);
}
case 333:
break;
case 115:
{
eofclose=true;
}
case 334:
break;
case 66:
yypushback(1);
{
if (macroDefinition) {
yybegin(EATWSPNL);
return symbol(BAR);
}
 else {
yybegin(REGEXPSTART);
return symbol(NOACTION);
}
}
case 335:
break;
case 82:
yypushback(2);
{
if (macroDefinition) {
yybegin(EATWSPNL);
return symbol(BAR);
}
 else {
yybegin(REGEXPSTART);
return symbol(NOACTION);
}
}
case 336:
break;
case 46:
{
yybegin(REGEXP);
return symbol(RBRACE);
}
case 337:
break;
case 78:
{
inclusive_states=false;
yybegin(STATELIST);
}
case 338:
break;
case 120:
{
bufferSize=Integer.parseInt(yytext().substring(8).trim());
}
case 339:
break;
case 106:
{
isIntWrap=true;
}
case 340:
break;
case 133:
{
yybegin(CTOR_ARG);
ctorTypes.add(yytext().substring(8).trim());
}
case 341:
break;
case 3:
{
userCode.append(yytext());
}
case 342:
break;
case 159:
{
return symbol(UNICODE_END_PUNCTUATION);
}
case 343:
break;
case 54:
{
macroDefinition=false;
yybegin(REGEXPSTART);
return symbol(DELIMITER);
}
case 344:
break;
case 129:
{
functionName=yytext().substring(10).trim();
}
case 345:
break;
case 85:
{
classCode=conc(classCode,string);
yybegin(MACROS);
}
case 346:
break;
case 18:
{
return symbol(QUESTION);
}
case 347:
break;
case 50:
{
if (commentbalance > 0) commentbalance--;
 else yybegin(nextState);
}
case 348:
break;
case 79:
{
inclusive_states=true;
yybegin(STATELIST);
}
case 349:
break;
case 57:
{
return symbol(CHAR,new Character((char)Integer.parseInt(yytext().substring(1,yytext().length()),8)));
}
case 350:
break;
case 172:
{
return symbol(UNICODE_DECIMAL_DIGIT_NUMBER);
}
case 351:
break;
case 6:
{
}
case 352:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
switch (zzLexicalState) {
case STRING_CONTENT:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);
}
case 1300:
break;
case MACROS:
{
if (yymoreStreams()) {
file=(File)files.pop();
yypopStream();
}
 else throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
}
case 1301:
break;
case STATELIST:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
}
case 1302:
break;
case CHARCLASS:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
}
case 1303:
break;
case JAVA_CODE:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_ACTION,action_line - 1);
}
case 1304:
break;
case REPEATEXP:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
}
case 1305:
break;
case COMMENT:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_COMMENT);
}
case 1306:
break;
case STATES:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_STATES);
}
case 1307:
break;
case COPY:
{
throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
}
case 1308:
break;
default :
{
if (yymoreStreams()) {
file=(File)files.pop();
yypopStream();
}
 else return symbol(EOF);
}
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
