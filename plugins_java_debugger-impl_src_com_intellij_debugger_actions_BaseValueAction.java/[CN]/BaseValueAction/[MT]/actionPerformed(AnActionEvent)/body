{
  final DataContext actionContext=e.getDataContext();
  final DebuggerTreeNodeImpl node=getSelectedNode(actionContext);
  final Value value=getValue(node);
  if (value == null) {
    return;
  }
  final Project project=PlatformDataKeys.PROJECT.getData(actionContext);
  final DebuggerManagerEx debuggerManager=DebuggerManagerEx.getInstanceEx(project);
  if (debuggerManager == null) {
    return;
  }
  final DebuggerContextImpl debuggerContext=debuggerManager.getContext();
  if (debuggerContext == null || debuggerContext.getDebuggerSession() == null) {
    return;
  }
  final ProgressWindowWithNotification progressWindow=new ProgressWindowWithNotification(true,project);
  SuspendContextCommandImpl getTextCommand=new SuspendContextCommandImpl(debuggerContext.getSuspendContext()){
    public Priority getPriority(){
      return Priority.HIGH;
    }
    public void contextAction() throws Exception {
      progressWindow.setText(DebuggerBundle.message("progress.evaluating","toString()"));
      final String valueAsString=DebuggerUtilsEx.getValueOrErrorAsString(debuggerContext.createEvaluationContext(),value);
      if (progressWindow.isCanceled()) {
        return;
      }
      DebuggerInvocationUtil.swingInvokeLater(project,new Runnable(){
        public void run(){
          String text=valueAsString;
          if (text == null) {
            text="";
          }
          processText(project,text,node,debuggerContext);
        }
      }
);
    }
  }
;
  progressWindow.setTitle(DebuggerBundle.message("title.evaluating"));
  debuggerContext.getDebugProcess().getManagerThread().startProgress(getTextCommand,progressWindow);
}
