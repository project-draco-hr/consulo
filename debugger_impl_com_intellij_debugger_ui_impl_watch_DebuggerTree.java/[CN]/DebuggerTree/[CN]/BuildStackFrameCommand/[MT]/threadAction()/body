{
  try {
    final StackFrameDescriptorImpl stackDescriptor=(StackFrameDescriptorImpl)getNode().getDescriptor();
    final StackFrameProxyImpl frame=stackDescriptor.getStackFrame();
    final DebuggerContextImpl debuggerContext=getDebuggerContext();
    if (!debuggerContext.getDebugProcess().getSuspendManager().isSuspended(frame.threadProxy())) {
      return;
    }
    final ObjectReference thisObjectReference=frame.thisObject();
    final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
    final NodeDescriptor descriptor;
    if (thisObjectReference != null) {
      descriptor=myDescriptorManager.getThisDescriptor(stackDescriptor,thisObjectReference);
    }
 else {
      final ReferenceType type=frame.location().method().declaringType();
      descriptor=myDescriptorManager.getStaticDescriptor(stackDescriptor,type);
    }
    myChildren.add(myDescriptorManager.createNode(descriptor,evaluationContext));
    try {
      for (      final LocalVariableProxyImpl local : frame.visibleVariables()) {
        final LocalVariableDescriptorImpl localVariableDescriptor=myDescriptorManager.getLocalVariableDescriptor(stackDescriptor,local);
        final DebuggerTreeNodeImpl variableNode=myDescriptorManager.createNode(localVariableDescriptor,evaluationContext);
        myChildren.add(variableNode);
      }
      if (NodeRendererSettings.getInstance().getClassRenderer().SORT_ASCENDING) {
        Collections.sort(myChildren,NodeManagerImpl.getNodeComparator());
      }
    }
 catch (    EvaluateException e) {
      myChildren.add(myDescriptorManager.createMessageNode(new MessageDescriptor(e.getMessage())));
    }
  }
 catch (  EvaluateException e) {
    myChildren.clear();
    myChildren.add(myDescriptorManager.createMessageNode(new MessageDescriptor(e.getMessage())));
  }
  updateUI(true);
}
