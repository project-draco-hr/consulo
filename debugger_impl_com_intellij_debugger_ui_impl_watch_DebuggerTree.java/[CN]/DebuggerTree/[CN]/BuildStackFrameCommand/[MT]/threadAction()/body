{
  try {
    final StackFrameDescriptorImpl stackDescriptor=(StackFrameDescriptorImpl)getNode().getDescriptor();
    final StackFrameProxyImpl frame=stackDescriptor.getFrameProxy();
    final DebuggerContextImpl debuggerContext=getDebuggerContext();
    if (!debuggerContext.getDebugProcess().getSuspendManager().isSuspended(frame.threadProxy())) {
      return;
    }
    final ObjectReference thisObjectReference=frame.thisObject();
    final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
    final NodeDescriptor descriptor;
    if (thisObjectReference != null) {
      descriptor=myNodeManager.getThisDescriptor(stackDescriptor,thisObjectReference);
    }
 else {
      final ReferenceType type=frame.location().method().declaringType();
      descriptor=myNodeManager.getStaticDescriptor(stackDescriptor,type);
    }
    myChildren.add(myNodeManager.createNode(descriptor,evaluationContext));
    try {
      buildVariables(stackDescriptor,evaluationContext);
      if (NodeRendererSettings.getInstance().getClassRenderer().SORT_ASCENDING) {
        Collections.sort(myChildren,NodeManagerImpl.getNodeComparator());
      }
    }
 catch (    EvaluateException e) {
      myChildren.add(myNodeManager.createMessageNode(new MessageDescriptor(e.getMessage())));
    }
    final Pair<Method,Value> methodValuePair=debuggerContext.getDebugProcess().getLastExecutedMethod();
    if (methodValuePair != null) {
      final ValueDescriptorImpl returnValueDescriptor=myNodeManager.getMethodReturnValueDescriptor(stackDescriptor,methodValuePair.getFirst(),methodValuePair.getSecond());
      final DebuggerTreeNodeImpl methodReturnValueNode=myNodeManager.createNode(returnValueDescriptor,evaluationContext);
      myChildren.add(1,methodReturnValueNode);
    }
  }
 catch (  EvaluateException e) {
    myChildren.clear();
    myChildren.add(myNodeManager.createMessageNode(new MessageDescriptor(e.getMessage())));
  }
  updateUI(true);
}
