{
  super(null,project);
  setScrollsOnExpand(false);
  myNodeManager=createNodeManager(project);
  final TreeBuilder model=new TreeBuilder(this){
    public void buildChildren(    TreeBuilderNode node){
      final DebuggerTreeNodeImpl debuggerTreeNode=(DebuggerTreeNodeImpl)node;
      if (debuggerTreeNode.getDescriptor() instanceof DefaultNodeDescriptor) {
        return;
      }
      buildNode(debuggerTreeNode);
    }
    public boolean isExpandable(    TreeBuilderNode builderNode){
      return DebuggerTree.this.isExpandable((DebuggerTreeNodeImpl)builderNode);
    }
  }
;
  model.setRoot(getNodeFactory().getDefaultNode());
  model.addTreeModelListener(new TreeModelListener(){
    public void treeNodesChanged(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeNodesInserted(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeNodesRemoved(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeStructureChanged(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
  }
);
  setModel(model);
  myProject=project;
  final TreeSpeedSearch search=new TreeSpeedSearch(this);
  search.setComparator(new SpeedSearchBase.SpeedSearchComparator(false));
}
