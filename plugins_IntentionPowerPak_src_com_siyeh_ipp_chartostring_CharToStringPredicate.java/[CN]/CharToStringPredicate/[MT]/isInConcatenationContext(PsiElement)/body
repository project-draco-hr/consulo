{
  final PsiElement parent=element.getParent();
  if (parent instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression parentExpression=(PsiPolyadicExpression)parent;
    final PsiType parentType=parentExpression.getType();
    if (parentType == null) {
      return false;
    }
    final String parentTypeText=parentType.getCanonicalText();
    return "java.lang.String".equals(parentTypeText);
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression parentExpression=(PsiAssignmentExpression)parent;
    final IElementType tokenType=parentExpression.getOperationTokenType();
    if (!JavaTokenType.PLUSEQ.equals(tokenType)) {
      return false;
    }
    final PsiType parentType=parentExpression.getType();
    if (parentType == null) {
      return false;
    }
    final String parentTypeText=parentType.getCanonicalText();
    return "java.lang.String".equals(parentTypeText);
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiElement grandParent=parent.getParent();
    if (!(grandParent instanceof PsiMethodCallExpression)) {
      return false;
    }
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)grandParent;
    final PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    final PsiType type;
    if (qualifierExpression == null) {
      type=methodExpression.getType();
    }
 else {
      type=qualifierExpression.getType();
    }
    if (type == null) {
      return false;
    }
    final String className=type.getCanonicalText();
    if ("java.lang.StringBuffer".equals(className) || "java.lang.StringBuilder".equals(className)) {
      @NonNls final String methodName=methodExpression.getReferenceName();
      if (!"append".equals(methodName) && !"insert".equals(methodName)) {
        return false;
      }
      final PsiElement method=methodExpression.resolve();
      return method != null;
    }
 else     if ("java.lang.String".equals(className)) {
      @NonNls final String methodName=methodExpression.getReferenceName();
      if (!"indexOf".equals(methodName) && !"lastIndexOf".equals(methodName) && !"replace".equals(methodName)) {
        return false;
      }
      final PsiElement method=methodExpression.resolve();
      return method != null;
    }
  }
  return false;
}
