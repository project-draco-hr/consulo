{
  if (params.size() == 1) {
    final ParameterChunk parameterChunk=params.get(0);
    final PsiType paramType=parameterChunk.parameter.type;
    if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) {
      parameterChunk.setField(aClass.findFieldByName("value",false));
      parameterChunk.setGetter(paramType.getCanonicalText() + "Value");
      for (      PsiMethod constructor : aClass.getConstructors()) {
        if (constructorIsCompatible(constructor,params))         return constructor;
      }
    }
  }
  final PsiMethod[] constructors=aClass.getConstructors();
  PsiMethod compatibleConstructor=null;
  for (  PsiMethod constructor : constructors) {
    if (constructorIsCompatible(constructor,params)) {
      compatibleConstructor=constructor;
      break;
    }
  }
  if (compatibleConstructor == null) {
    return null;
  }
  final PsiParameterList parameterList=compatibleConstructor.getParameterList();
  final PsiParameter[] constructorParams=parameterList.getParameters();
  for (int i=0; i < constructorParams.length; i++) {
    final PsiParameter param=constructorParams[i];
    final ParameterChunk parameterChunk=params.get(i);
    final PsiField field=findFieldAssigned(param,compatibleConstructor);
    if (field == null) {
      return null;
    }
    parameterChunk.setField(field);
    final PsiMethod getterForField=PropertyUtil.findGetterForField(field);
    if (getterForField != null) {
      parameterChunk.setGetter(getterForField.getName());
    }
    final PsiMethod setterForField=PropertyUtil.findSetterForField(field);
    if (setterForField != null) {
      parameterChunk.setSetter(setterForField.getName());
    }
  }
  return compatibleConstructor;
}
