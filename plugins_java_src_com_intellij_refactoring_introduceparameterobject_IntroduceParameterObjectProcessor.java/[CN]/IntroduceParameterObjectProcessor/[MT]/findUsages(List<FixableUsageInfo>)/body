{
  if (myUseExistingClass && existingClass != null) {
    myExistingClassCompatibleConstructor=existingClassIsCompatible(existingClass,parameters);
  }
  findUsagesForMethod(method,usages,true);
  if (myUseExistingClass && existingClass != null && !(paramsNeedingGetters.isEmpty() && paramsNeedingSetters.isEmpty())) {
    usages.add(new AppendAccessorsUsageInfo(existingClass,myGenerateAccessors,paramsNeedingGetters,paramsNeedingSetters,parameters));
  }
  final PsiMethod[] overridingMethods=OverridingMethodsSearch.search(method,true).toArray(PsiMethod.EMPTY_ARRAY);
  for (  PsiMethod siblingMethod : overridingMethods) {
    findUsagesForMethod(siblingMethod,usages,false);
  }
  if (myNewVisibility != null) {
    usages.add(new BeanClassVisibilityUsageInfo(existingClass,usages.toArray(new UsageInfo[usages.size()]),myNewVisibility,myExistingClassCompatibleConstructor));
  }
}
