{
  super.checkConfiguration();
  final RunConfigurationModule configurationModule=myConfiguration.getConfigurationModule();
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  final String testClass=data.getMainClassName();
  final PsiClass psiClass=configurationModule.checkModuleAndClassName(testClass,ExecutionBundle.message("no.test.class.specified.error.text"));
  final String methodName=data.getMethodName();
  if (methodName == null || methodName.trim().length() == 0) {
    throw new RuntimeConfigurationError(ExecutionBundle.message("method.name.not.specified.error.message"));
  }
  final JUnitUtil.TestMethodFilter filter=new JUnitUtil.TestMethodFilter(psiClass);
  boolean found=false;
  boolean testAnnotated=false;
  for (  final PsiMethod method : psiClass.findMethodsByName(methodName,true)) {
    if (filter.value(method))     found=true;
    if (JUnitUtil.isTestAnnotated(method))     testAnnotated=true;
  }
  if (!found) {
    throw new RuntimeConfigurationWarning(ExecutionBundle.message("test.method.doesnt.exist.error.message",methodName));
  }
  if (!testAnnotated) {
    try {
      final PsiClass testCaseClass=JUnitUtil.getTestCaseClass(configurationModule.getModule());
      if (!psiClass.isInheritor(testCaseClass,true)) {
        throw new RuntimeConfigurationError(ExecutionBundle.message("class.isnt.inheritor.of.testcase.error.message",testClass));
      }
    }
 catch (    JUnitUtil.NoJUnitException e) {
      throw new RuntimeConfigurationWarning(ExecutionBundle.message("junit.jar.not.found.in.module.class.path.error.message",configurationModule.getModuleName()));
    }
  }
}
