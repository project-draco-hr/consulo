{
  try {
    Class gen=null;
synchronized (source) {
      ClassLoader loader=getClassLoader();
      Map cache2=null;
      cache2=(Map)source.cache.get(loader);
      if (cache2 == null) {
        cache2=new HashMap();
        cache2.put(NAME_KEY,new HashSet());
        source.cache.put(loader,cache2);
      }
 else       if (useCache) {
        Reference ref=(Reference)cache2.get(key);
        gen=(Class)((ref == null) ? null : ref.get());
      }
      if (gen == null) {
        Object save=CURRENT.get();
        CURRENT.set(this);
        try {
          this.key=key;
          if (attemptLoad) {
            try {
              gen=loader.loadClass(getClassName());
            }
 catch (            ClassNotFoundException e) {
            }
          }
          if (gen == null) {
            byte[] b=strategy.generate(this);
            String className=ClassNameReader.getClassName(new ClassReader(b));
            getClassNameCache(loader).add(className);
            gen=ReflectUtils.defineClass(className,b,loader);
          }
          if (useCache) {
            cache2.put(key,new WeakReference(gen));
          }
          return firstInstance(gen);
        }
  finally {
          CURRENT.set(save);
        }
      }
    }
    return firstInstance(gen);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Error e) {
    throw e;
  }
catch (  Exception e) {
    throw new CodeGenerationException(e);
  }
}
