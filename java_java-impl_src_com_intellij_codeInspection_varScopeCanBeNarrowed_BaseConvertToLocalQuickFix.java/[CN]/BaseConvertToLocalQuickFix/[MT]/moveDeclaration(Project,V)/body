{
  final Collection<PsiReference> references=ReferencesSearch.search(variable).findAll();
  if (references.isEmpty())   return null;
  final PsiCodeBlock anchorBlock=findAnchorBlock(references);
  if (anchorBlock == null)   return null;
  if (!CodeInsightUtil.preparePsiElementsForWrite(anchorBlock))   return null;
  final PsiElement firstElement=getLowestOffsetElement(references);
  final String localName=suggestLocalName(project,variable,anchorBlock);
  final PsiElement anchor=getAnchorElement(anchorBlock,firstElement);
  final PsiAssignmentExpression anchorAssignmentExpression=searchAssignmentExpression(anchor);
  if (anchorAssignmentExpression != null && isVariableAssignment(anchorAssignmentExpression,variable)) {
    final Set<PsiReference> refsSet=new HashSet<PsiReference>(references);
    refsSet.remove(anchorAssignmentExpression.getLExpression());
    return applyChanges(project,localName,anchorAssignmentExpression.getRExpression(),variable,refsSet,new NotNullFunction<PsiDeclarationStatement,PsiElement>(){
      @NotNull @Override public PsiElement fun(      PsiDeclarationStatement declaration){
        if (!mayBeFinal(firstElement,references)) {
          PsiUtil.setModifierProperty((PsiModifierListOwner)declaration.getDeclaredElements()[0],PsiModifier.FINAL,false);
        }
        return anchor.replace(declaration);
      }
    }
);
  }
  return applyChanges(project,localName,variable.getInitializer(),variable,references,new NotNullFunction<PsiDeclarationStatement,PsiElement>(){
    @NotNull @Override public PsiElement fun(    PsiDeclarationStatement declaration){
      return anchorBlock.addBefore(declaration,anchor);
    }
  }
);
}
