{
  final Artifact artifact=myArtifactsStructureContext.getArtifactModel().getArtifactByOriginal(myOriginalArtifact);
  final List<ProjectStructureElementUsage> usages=new ArrayList<ProjectStructureElementUsage>();
  ArtifactUtil.processPackagingElements(myArtifactsStructureContext.getRootElement(artifact),null,new PackagingElementProcessor<PackagingElement<?>>(){
    @Override public boolean process(    @NotNull List<CompositePackagingElement<?>> parents,    @NotNull PackagingElement<?> packagingElement){
      if (packagingElement instanceof ModuleOutputPackagingElement) {
        final Module module=((ModuleOutputPackagingElement)packagingElement).findModule(myArtifactsStructureContext);
        if (module != null) {
          usages.add(new UsageInArtifact(myOriginalArtifact,myArtifactsStructureContext,new ModuleProjectStructureElement(myContext,module),ArtifactProjectStructureElement.this,getPathFromRoot(parents,"/"),packagingElement));
        }
      }
 else       if (packagingElement instanceof LibraryPackagingElement) {
        final Library library=((LibraryPackagingElement)packagingElement).findLibrary(myArtifactsStructureContext);
        if (library != null) {
          usages.add(new UsageInArtifact(myOriginalArtifact,myArtifactsStructureContext,new LibraryProjectStructureElement(myContext,library),ArtifactProjectStructureElement.this,getPathFromRoot(parents,"/"),packagingElement));
        }
      }
      return true;
    }
  }
,myArtifactsStructureContext,false,artifact.getArtifactType());
  return usages;
}
