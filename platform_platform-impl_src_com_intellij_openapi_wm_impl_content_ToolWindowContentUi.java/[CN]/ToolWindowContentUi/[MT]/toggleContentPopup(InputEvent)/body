{
  if (myShouldNotShowPopup) {
    myShouldNotShowPopup=false;
    return;
  }
  BaseListPopupStep step=new BaseListPopupStep<Content>(null,myManager.getContents()){
    @Override public PopupStep onChosen(    Content selectedValue,    boolean finalChoice){
      myManager.setSelectedContent(selectedValue,true,true);
      return FINAL_CHOICE;
    }
    @NotNull @Override public String getTextFor(    Content value){
      final String displayName=value.getTabName();
      return displayName != null ? displayName : "";
    }
    @Override public Icon getIconFor(    Content aValue){
      return aValue.getPopupIcon();
    }
    @Override public boolean isMnemonicsNavigationEnabled(){
      return true;
    }
    @Override public ListSeparator getSeparatorAbove(    Content value){
      final String separator=value.getSeparator();
      return separator != null ? new ListSeparator(separator) : super.getSeparatorAbove(value);
    }
  }
;
  step.setDefaultOptionIndex(Arrays.asList(myManager.getContents()).indexOf(myManager.getSelectedContent()));
  final ListPopup popup=new ListPopupImpl(step){
    @Override public void cancel(    InputEvent e){
      super.cancel(e);
      if (e instanceof MouseEvent) {
        final MouseEvent me=(MouseEvent)e;
        final Component component=SwingUtilities.getDeepestComponentAt(e.getComponent(),me.getX(),me.getY());
        if (UIUtil.isActionClick(me) && component instanceof ContentComboLabel && SwingUtilities.isDescendingFrom(component,ToolWindowContentUi.this)) {
          myShouldNotShowPopup=true;
        }
      }
    }
  }
;
  getCurrentLayout().showContentPopup(popup);
}
