{
  if (myFileFilter != null && !myFileFilter.accept(virtualFile))   return;
  if (virtualFile.isDirectory()) {
    VirtualFile[] children=virtualFile.getChildren();
    VirtualFile[] explodedChildren=fileInExplodedPath == null ? null : fileInExplodedPath.getChildren();
    if (explodedChildren == null)     explodedChildren=VirtualFile.EMPTY_ARRAY;
    Map<String,VirtualFile> explodedFilesMap=new THashMap<String,VirtualFile>();
    for (    VirtualFile file : explodedChildren) {
      explodedFilesMap.put(file.getName(),file);
    }
    for (    final VirtualFile child : children) {
      VirtualFile childFileInExploded=fileInExplodedPath == null ? null : explodedFilesMap.get(child.getName());
      addFileItemsRecursively(child,DeploymentUtil.trimForwardSlashes(DeploymentUtil.appendToPath(outputRelativePath,child.getName())),childFileInExploded,items,targetModule,isExplodedEnabled,jarEnabled,jarFile);
    }
  }
 else {
    InstructionProcessingItem processingItem=items.get(virtualFile);
    if (processingItem == null) {
      processingItem=new InstructionProcessingItem(virtualFile);
      items.put(virtualFile,processingItem);
    }
    boolean targetFileExists=(!isExplodedEnabled || fileInExplodedPath != null) && (!jarEnabled || jarFile != null);
    processingItem.addInstructionInfo(new InstructionProcessingItem.InstructionInfo(this,outputRelativePath,targetModule,targetFileExists));
  }
}
