{
  byte[] oldBuf=Utils.readBytes(oldFileIn);
  int oldsize=oldBuf.length;
  int[] I=new int[oldsize + 1];
  int[] V=new int[oldsize + 1];
  qsufsort(I,V,oldBuf);
  V=null;
  System.gc();
  byte[] newBuf=Utils.readBytes(newFileIn);
  int newsize=newBuf.length;
  int dblen=0;
  byte[] db=new byte[newsize];
  int eblen=0;
  byte[] eb=new byte[newsize];
  ByteArrayOutputStream arrayOut=new ByteArrayOutputStream();
  DataOutputStream diffOut=new DataOutputStream(arrayOut);
  int oldscore, scsc;
  int overlap, Ss, lens;
  int i;
  int scan=0;
  int len=0;
  int lastscan=0;
  int lastpos=0;
  int lastoffset=0;
  IntByRef pos=new IntByRef();
  int ctrlBlockLen=0;
  while (scan < newsize) {
    oldscore=0;
    for (scsc=scan+=len; scan < newsize; scan++) {
      len=search(I,oldBuf,newBuf,scan,0,oldsize,pos);
      for (; scsc < scan + len; scsc++) {
        if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) {
          oldscore++;
        }
      }
      if (((len == oldscore) && (len != 0)) || (len > oldscore + 8)) {
        break;
      }
      if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) {
        oldscore--;
      }
    }
    if ((len != oldscore) || (scan == newsize)) {
      int s=0;
      int Sf=0;
      int lenf=0;
      for (i=0; (lastscan + i < scan) && (lastpos + i < oldsize); ) {
        if (oldBuf[lastpos + i] == newBuf[lastscan + i]) {
          s++;
        }
        i++;
        if (s * 2 - i > Sf * 2 - lenf) {
          Sf=s;
          lenf=i;
        }
      }
      int lenb=0;
      if (scan < newsize) {
        s=0;
        int Sb=0;
        for (i=1; (scan >= lastscan + i) && (pos.value >= i); i++) {
          if (oldBuf[pos.value - i] == newBuf[scan - i]) {
            s++;
          }
          if (s * 2 - i > Sb * 2 - lenb) {
            Sb=s;
            lenb=i;
          }
        }
      }
      if (lastscan + lenf > scan - lenb) {
        overlap=(lastscan + lenf) - (scan - lenb);
        s=0;
        Ss=0;
        lens=0;
        for (i=0; i < overlap; i++) {
          if (newBuf[lastscan + lenf - overlap + i] == oldBuf[lastpos + lenf - overlap + i]) {
            s++;
          }
          if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) {
            s--;
          }
          if (s > Ss) {
            Ss=s;
            lens=i + 1;
          }
        }
        lenf+=lens - overlap;
        lenb-=lens;
      }
      for (i=0; i < lenf; i++) {
        db[dblen + i]=(byte)(newBuf[lastscan + i] - oldBuf[lastpos + i]);
      }
      for (i=0; i < (scan - lenb) - (lastscan + lenf); i++) {
        eb[eblen + i]=newBuf[lastscan + lenf + i];
      }
      dblen+=lenf;
      eblen+=(scan - lenb) - (lastscan + lenf);
      diffOut.writeInt(lenf);
      diffOut.writeInt((scan - lenb) - (lastscan + lenf));
      diffOut.writeInt((pos.value - lenb) - (lastpos + lenf));
      ctrlBlockLen+=12;
      lastscan=scan - lenb;
      lastpos=pos.value - lenb;
      lastoffset=pos.value - scan;
    }
  }
  GZIPOutputStream gzOut;
  gzOut=new GZIPOutputStream(diffOut);
  gzOut.write(db,0,dblen);
  gzOut.finish();
  int diffBlockLen=diffOut.size() - ctrlBlockLen;
  gzOut=new GZIPOutputStream(diffOut);
  gzOut.write(eb,0,eblen);
  gzOut.finish();
  diffOut.close();
  DataOutputStream headerStream=new DataOutputStream(diffFileOut);
  headerStream.write("jbdiff40".getBytes("US-ASCII"));
  headerStream.writeLong(ctrlBlockLen);
  headerStream.writeLong(diffBlockLen);
  headerStream.writeLong(newsize);
  headerStream.flush();
  Utils.copyBytesToStream(arrayOut,diffFileOut);
  return newBuf;
}
