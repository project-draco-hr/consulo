{
  final VirtualFile file=getSelectedFile();
  final Project project=getProject();
  Task.Backgroundable task=new Task.Backgroundable(project,""){
    @Override public void run(    ProgressIndicator indicator){
      if (isDisposed())       return;
      String currentBranchName=null;
      if (file != null) {
        AbstractVcs vcs=myVcsManager.getVcsFor(file);
        if (vcs != null && vcs instanceof GitVcs) {
          VirtualFile root=myVcsManager.getVcsRootFor(file);
          if (root != null) {
            GitBranch currentBranch=null;
            try {
              currentBranch=GitBranch.current(project,root);
            }
 catch (            VcsException e) {
              LOG.info("Exception while trying to get current branch for file " + file + " under root "+ root,e);
            }
            currentBranchName=currentBranch != null ? currentBranch.getName() : null;
          }
        }
      }
      if (currentBranchName == null) {
        currentBranchName="";
      }
      myCurrentBranchName.set(currentBranchName);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          myStatusBar.updateWidget(ID());
        }
      }
,new Condition(){
        public boolean value(        Object o){
          return isDisposed() || (project != null) && ((!project.isOpen()) || project.isDisposed()) || myStatusBar == null;
        }
      }
);
    }
  }
;
  if (project == null) {
    task.queue();
  }
 else {
    GitVcs.getInstance(project).runInBackground(task);
  }
}
