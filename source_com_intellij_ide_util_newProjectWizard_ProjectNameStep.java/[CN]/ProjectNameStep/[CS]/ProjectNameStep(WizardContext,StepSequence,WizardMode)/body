{
  myWizardContext=wizardContext;
  mySequence=sequence;
  myMode=mode;
  myNamePathComponent=new NamePathComponent(IdeBundle.message("label.project.name"),IdeBundle.message("label.component.file.location",StringUtil.capitalize(wizardContext.getPresentationName())),'a','l',IdeBundle.message("title.select.project.file.directory",wizardContext.getPresentationName()),IdeBundle.message("description.select.project.file.directory",StringUtil.capitalize(wizardContext.getPresentationName())));
  final String initialProjectName=ProjectWizardUtil.findNonExistingFileName(myWizardContext.getProjectFileDirectory(),"untitled","");
  myNamePathComponent.setPath(wizardContext.getProjectFileDirectory() + File.separator + initialProjectName);
  myNamePathComponent.setNameValue(initialProjectName);
  myPanel=new JPanel(new GridBagLayout());
  myPanel.setBorder(BorderFactory.createEtchedBorder());
  final ApplicationInfo info=ApplicationManager.getApplication().getComponent(ApplicationInfo.class);
  String appName=info.getVersionName();
  myPanel.add(new JLabel(IdeBundle.message("label.please.enter.project.name",appName,wizardContext.getPresentationName())),new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(8,10,8,10),0,0));
  myPanel.add(myNamePathComponent,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(8,10,8,10),0,0));
  myModuleDescriptionPane=new JEditorPane();
  myModuleDescriptionPane.setContentType(UIUtil.HTML_MIME);
  myModuleDescriptionPane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          BrowserUtil.launchBrowser(e.getURL().toString());
        }
 catch (        IllegalThreadStateException ex) {
        }
      }
    }
  }
);
  myModuleDescriptionPane.setEditable(false);
  ModuleType[] allModuleTypes=ModuleTypeManager.getInstance().getRegisteredTypes();
  if (myWizardContext.getProject() != null) {
    allModuleTypes=ArrayUtil.remove(allModuleTypes,ArrayUtil.find(allModuleTypes,ModuleType.EMPTY));
  }
  myTypesList=new JList(allModuleTypes);
  myTypesList.setSelectionModel(new PermanentSingleSelectionModel());
  myTypesList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final ModuleType moduleType=(ModuleType)value;
      setIcon(moduleType.getBigIcon());
      setDisabledIcon(moduleType.getBigIcon());
      setText(myWizardContext.getProject() == null ? moduleType.getProjectType() : moduleType.getName());
      return rendererComponent;
    }
  }
);
  myTypesList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final ModuleType typeSelected=(ModuleType)myTypesList.getSelectedValue();
      myModuleDescriptionPane.setText("<html><body><font face=\"verdana\" size=\"-1\">" + typeSelected.getDescription() + "</font></body></html>");
      fireStateChanged();
    }
  }
);
  myTypesList.setSelectedIndex(0);
  myTypesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
      }
    }
  }
);
  final JLabel descriptionLabel=new JLabel(IdeBundle.message("label.description"));
  descriptionLabel.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));
  myPanel.add(descriptionLabel,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.SOUTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  final JScrollPane typesListScrollPane=ScrollPaneFactory.createScrollPane(myTypesList);
  final Dimension preferredSize=calcTypeListPreferredSize(allModuleTypes);
  typesListScrollPane.setPreferredSize(preferredSize);
  typesListScrollPane.setMinimumSize(preferredSize);
  myPanel.add(typesListScrollPane,new GridBagConstraints(0,3,1,1,0.2,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,10,0,10),0,0));
  final JScrollPane descriptionScrollPane=ScrollPaneFactory.createScrollPane(myModuleDescriptionPane);
  descriptionScrollPane.setPreferredSize(new Dimension(preferredSize.width * 3,preferredSize.height));
  myPanel.add(descriptionScrollPane,new GridBagConstraints(1,3,1,1,0.8,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,10),0,0));
}
