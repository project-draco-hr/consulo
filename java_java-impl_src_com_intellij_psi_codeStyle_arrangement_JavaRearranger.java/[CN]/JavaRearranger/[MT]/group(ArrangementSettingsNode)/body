{
  final Ref<HierarchicalArrangementSettingsNode> result=new Ref<HierarchicalArrangementSettingsNode>();
  node.invite(new ArrangementSettingsNodeVisitor(){
    @Override public void visit(    @NotNull ArrangementSettingsAtomNode node){
      result.set(new HierarchicalArrangementSettingsNode(node));
    }
    @Override public void visit(    @NotNull ArrangementSettingsCompositeNode node){
      ArrangementSettingsNode typeNode=null;
      for (      ArrangementSettingsNode n : node.getOperands()) {
        if (n instanceof ArrangementSettingsAtomNode && ((ArrangementSettingsAtomNode)n).getType() == ArrangementSettingType.TYPE) {
          typeNode=n;
          break;
        }
      }
      if (typeNode == null) {
        result.set(new HierarchicalArrangementSettingsNode(node));
      }
 else {
        HierarchicalArrangementSettingsNode parent=new HierarchicalArrangementSettingsNode(typeNode);
        ArrangementSettingsCompositeNode compositeWithoutType=new ArrangementSettingsCompositeNode(node.getOperator());
        for (        ArrangementSettingsNode n : node.getOperands()) {
          if (n != typeNode) {
            compositeWithoutType.addOperand(n);
          }
        }
        parent.addChild(new HierarchicalArrangementSettingsNode(compositeWithoutType));
        result.set(parent);
      }
    }
  }
);
  return result.get();
}
