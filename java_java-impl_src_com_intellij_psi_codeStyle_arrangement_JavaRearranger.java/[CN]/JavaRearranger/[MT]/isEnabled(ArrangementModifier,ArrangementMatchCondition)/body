{
  if (current == null) {
    return SUPPORTED_MODIFIERS.contains(modifier);
  }
  final Ref<Object> typeRef=new Ref<Object>();
  current.invite(new ArrangementSettingsNodeVisitor(){
    @Override public void visit(    @NotNull ArrangementAtomMatchCondition setting){
      if (setting.getType() == ArrangementSettingType.TYPE) {
        typeRef.set(setting.getValue());
      }
    }
    @Override public void visit(    @NotNull ArrangementCompositeMatchCondition setting){
      for (      ArrangementMatchCondition n : setting.getOperands()) {
        if (typeRef.get() != null) {
          return;
        }
        n.invite(this);
      }
    }
  }
);
  Object key=typeRef.get() == null ? NO_TYPE : typeRef.get();
  Set<ArrangementModifier> modifiers=MODIFIERS_BY_TYPE.get(key);
  return modifiers != null && modifiers.contains(modifier);
}
