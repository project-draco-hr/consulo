{
  final Ref<HierarchicalArrangementConditionNode> result=new Ref<HierarchicalArrangementConditionNode>();
  node.invite(new ArrangementSettingsNodeVisitor(){
    @Override public void visit(    @NotNull ArrangementAtomMatchCondition setting){
      result.set(new HierarchicalArrangementConditionNode(setting));
    }
    @Override public void visit(    @NotNull ArrangementCompositeMatchCondition setting){
      ArrangementMatchCondition typeNode=null;
      for (      ArrangementMatchCondition n : setting.getOperands()) {
        if (n instanceof ArrangementAtomMatchCondition && ((ArrangementAtomMatchCondition)n).getType() == ArrangementSettingType.TYPE) {
          typeNode=n;
          break;
        }
      }
      if (typeNode == null) {
        result.set(new HierarchicalArrangementConditionNode(setting));
      }
 else {
        HierarchicalArrangementConditionNode parent=new HierarchicalArrangementConditionNode(typeNode);
        ArrangementCompositeMatchCondition compositeWithoutType=new ArrangementCompositeMatchCondition(setting.getOperator());
        for (        ArrangementMatchCondition n : setting.getOperands()) {
          if (n != typeNode) {
            compositeWithoutType.addOperand(n);
          }
        }
        if (compositeWithoutType.getOperands().size() == 1) {
          parent.setChild(new HierarchicalArrangementConditionNode(compositeWithoutType.getOperands().iterator().next()));
        }
 else {
          parent.setChild(new HierarchicalArrangementConditionNode(compositeWithoutType));
        }
        result.set(parent);
      }
    }
  }
);
  return result.get();
}
