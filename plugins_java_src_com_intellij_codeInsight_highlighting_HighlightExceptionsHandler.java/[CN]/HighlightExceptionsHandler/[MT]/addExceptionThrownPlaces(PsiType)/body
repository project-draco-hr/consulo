{
  if (type instanceof PsiClassType) {
    myPlace.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      @Override public void visitThrowStatement(      PsiThrowStatement statement){
        super.visitThrowStatement(statement);
        final List<PsiClassType> actualTypes=ExceptionUtil.getUnhandledExceptions(statement,myPlace);
        for (        PsiClassType actualType : actualTypes) {
          if (actualType != null && type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
            PsiExpression psiExpression=statement.getException();
            if (psiExpression instanceof PsiReferenceExpression) {
              addOccurrence(psiExpression);
            }
 else             if (psiExpression instanceof PsiNewExpression) {
              PsiJavaCodeReferenceElement ref=((PsiNewExpression)psiExpression).getClassReference();
              addOccurrence(ref);
            }
 else {
              addOccurrence(statement.getException());
            }
          }
        }
      }
      @Override public void visitMethodCallExpression(      PsiMethodCallExpression expression){
        super.visitMethodCallExpression(expression);
        PsiReference reference=expression.getMethodExpression().getReference();
        if (reference == null)         return;
        List<PsiClassType> exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,myPlace);
        for (        final PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
            addOccurrence(expression.getMethodExpression());
            break;
          }
        }
      }
      @Override public void visitNewExpression(      PsiNewExpression expression){
        super.visitNewExpression(expression);
        PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
        if (classReference == null)         return;
        List<PsiClassType> exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,myPlace);
        for (        PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
            addOccurrence(classReference);
            break;
          }
        }
      }
    }
);
  }
}
