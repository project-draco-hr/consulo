{
  LinkedHashSet<PsiMethod> methodList=new LinkedHashSet<PsiMethod>();
  Processor<PsiMethod> processor=CommonProcessors.notNullProcessor(new CommonProcessors.CollectProcessor<PsiMethod>(methodList));
  processMethods(context,processor,new Function<PsiClass,PsiMethod[]>(){
    public PsiMethod[] fun(    final PsiClass s){
      final List<PsiMethod> list=ContainerUtil.findAll(getVariants(s),new Condition<PsiMethod>(){
        public boolean value(        final PsiMethod object){
          return acceptMethod(object,context);
        }
      }
);
      return list.toArray(new PsiMethod[list.size()]);
    }
  }
);
  return methodList;
}
