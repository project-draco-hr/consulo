{
  super(project,tree,treeModel,treeStructure,comparator);
  final MessageBusConnection connection=project.getMessageBus().connect(this);
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(){
    protected DefaultMutableTreeNode getRootNode(){
      return myRootNode;
    }
    protected AbstractTreeUpdater getUpdater(){
      return myUpdater;
    }
    protected boolean isFlattenPackages(){
      return ((AbstractProjectTreeStructure)getTreeStructure()).isFlattenPackages();
    }
  }
;
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      myUpdater.addSubtreeToUpdate(myRootNode);
    }
  }
);
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new CopyPasteUtil.DefaultCopyPasteListener(myUpdater);
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  myPropertiesFileListener=new PropertiesFileListener();
  final PropertiesFilesManager propertiesFilesManager=PropertiesFilesManager.getInstance();
  if (propertiesFilesManager != null) {
    propertiesFilesManager.addPropertiesFileListener(myPropertiesFileListener);
  }
  myProblemListener=new MyProblemListener();
  WolfTheProblemSolver.getInstance(project).addProblemListener(myProblemListener);
  initRootNode();
}
