{
  if (scope.getElementType() == ElementType.IMPORT_LIST)   return;
  ChameleonTransforming.transformChildren(scope);
  for (TreeElement child=scope.firstChild; child != null; child=child.getTreeNext()) {
    if (child instanceof CompositeElement) {
      addNamesToImport(names,(CompositeElement)child,thisPackageName,namesToImportStaticly);
      if (child.getElementType() == ElementType.JAVA_CODE_REFERENCE || child.getElementType() == ElementType.REFERENCE_EXPRESSION) {
        final CompositeElement compositeChild=(CompositeElement)child;
        if (compositeChild.findChildByRole(ChildRole.QUALIFIER) == null) {
          if (child.getElementType() == ElementType.JAVA_CODE_REFERENCE && ((PsiJavaCodeReferenceElementImpl)child).getKind() == PsiJavaCodeReferenceElementImpl.CLASS_IN_QUALIFIED_NEW_KIND) {
            continue;
          }
          PsiJavaCodeReferenceElement psiReference=(PsiJavaCodeReferenceElement)SourceTreeToPsiMap.treeElementToPsi(child);
          ResolveResult resolveResult=psiReference.advancedResolve(true);
          PsiElement refElement=resolveResult.getElement();
          if (refElement == null) {
            refElement=ResolveClassUtil.resolveClass(psiReference);
          }
          if (refElement != null) {
            if (refElement instanceof PsiClass) {
              PsiClass refClass=(PsiClass)refElement;
              PsiElement parent=refClass.getParent();
              if (parent instanceof PsiClass) {
                if (isInnerVisibleByShortName(refClass,psiReference))                 continue;
              }
 else               if (!(parent instanceof PsiFile))               continue;
              String qName=refClass.getQualifiedName();
              if (hasPackage(qName,thisPackageName))               continue;
              names.add(qName);
            }
 else {
              PsiElement currentFileResolveScope=resolveResult.getCurrentFileResolveScope();
              if (currentFileResolveScope instanceof PsiImportStaticStatement) {
                PsiImportStaticStatement importStaticStatement=(PsiImportStaticStatement)currentFileResolveScope;
                String name=importStaticStatement.getImportReference().getCanonicalText();
                if (importStaticStatement.isOnDemand()) {
                  String refName=psiReference.getReferenceName();
                  if (refName != null)                   name=name + "." + refName;
                }
                names.add(name);
                namesToImportStaticly.add(name);
              }
            }
          }
        }
      }
    }
  }
}
