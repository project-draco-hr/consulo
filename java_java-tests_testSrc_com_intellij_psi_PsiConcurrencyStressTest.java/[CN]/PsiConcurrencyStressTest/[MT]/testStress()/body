{
  int numOfThreads=10;
  int iterations=Timings.adjustAccordingToMySpeed(20,true);
  System.out.println("iterations = " + iterations);
  final int readIterations=iterations * 3;
  final int writeIterations=iterations;
synchronized (this) {
    PsiClass myClass=myJavaFacade.findClass("StressClass",GlobalSearchScope.allScope(myProject));
    assertNotNull(myClass);
    myFile=(PsiJavaFile)myClass.getContainingFile();
  }
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(getProject());
  final CountDownLatch reads=new CountDownLatch(numOfThreads);
  final Random random=new Random();
  for (int i=0; i < numOfThreads; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        for (int i=0; i < readIterations; i++) {
          if (myPsiManager == null)           return;
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              assertFalse(writeActionInProgress);
              readStep(random);
            }
          }
);
        }
        reads.countDown();
      }
    }
,"stress thread" + i).start();
  }
  final Document document=documentManager.getDocument(myFile);
  for (int i=0; i < writeIterations; i++) {
    Thread.sleep(100);
    new WriteCommandAction(myProject,myFile){
      @Override protected void run(      final Result result) throws Throwable {
        writeActionInProgress=true;
        documentManager.commitAllDocuments();
        writeStep(random);
        documentManager.commitAllDocuments();
        assertEquals(document.getText(),myFile.getText());
        writeActionInProgress=false;
      }
    }
.execute();
  }
  reads.await(5,TimeUnit.MINUTES);
}
