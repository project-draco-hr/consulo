{
  if (!isMine(host))   return false;
  final Configuration configuration=Configuration.getInstance();
  final ArrayList<AbstractTagInjection> injections=collectInjections(host,configuration);
  if (injections.isEmpty())   return false;
  final Project project=host.getProject();
  final UndoableAction action=new UndoableAction(){
    public void undo() throws UnexpectedUndoException {
      for (      AbstractTagInjection injection : injections) {
        if (injection instanceof XmlTagInjection) {
          configuration.getTagInjections().add((XmlTagInjection)injection);
        }
 else         if (injection instanceof XmlAttributeInjection) {
          configuration.getAttributeInjections().add((XmlAttributeInjection)injection);
        }
      }
      configuration.configurationModified();
      FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
    }
    public void redo() throws UnexpectedUndoException {
      configuration.getTagInjections().removeAll(injections);
      configuration.getAttributeInjections().removeAll(injections);
      configuration.configurationModified();
      FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
    }
    public DocumentReference[] getAffectedDocuments(){
      return DocumentReference.EMPTY_ARRAY;
    }
    public boolean isComplex(){
      return true;
    }
  }
;
  new WriteCommandAction(project){
    @Override protected void run(    final Result result) throws Throwable {
      action.redo();
      UndoManager.getInstance(project).undoableActionPerformed(action);
    }
  }
.execute();
  return true;
}
