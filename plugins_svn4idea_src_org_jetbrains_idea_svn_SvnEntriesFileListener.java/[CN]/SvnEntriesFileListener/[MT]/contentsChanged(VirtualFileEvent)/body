{
  if (!event.isFromRefresh()) {
    return;
  }
  final VirtualFile file=event.getFile();
  if (isWcDbFile(file)) {
    LOG.debug("wc.db had changed");
    final List<LocalChangeList> listsCopy=myChangeListManager.getChangeListsCopy();
    final Set<FilePath> affectedPaths=new HashSet<FilePath>();
    for (    LocalChangeList list : listsCopy) {
      final Collection<Change> changes=list.getChanges();
      for (      Change change : changes) {
        if (change.isMoved() || change.isRenamed()) {
          final FilePath before=change.getBeforeRevision().getFile();
          final FilePath after=change.getAfterRevision().getFile();
          ((FilePathImpl)before).setIsDirectory(after.isDirectory());
          affectedPaths.add(before);
          affectedPaths.add(after);
        }
 else {
          if (change.getBeforeRevision() != null) {
            affectedPaths.add(change.getBeforeRevision().getFile());
          }
 else {
            affectedPaths.add(change.getAfterRevision().getFile());
          }
        }
      }
    }
    myDirtyScopeManager.filePathsDirty(affectedPaths,null);
    return;
  }
  if (isEntriesFile(file) && file.getParent() != null) {
    VirtualFile parent=file.getParent();
    if (parent != null) {
      VirtualFile grandParent=parent.getParent();
      if (grandParent != null) {
        fireFileStatusesChanged(grandParent);
        fileEntriesChanged(grandParent);
      }
    }
    return;
  }
  final AbstractVcs vcsFor=myVcsManager.getVcsFor(file);
  if (vcsFor == null)   return;
  if (SvnVcs.VCS_NAME.equals(vcsFor.getName())) {
    final RootUrlInfo path=((SvnVcs)vcsFor).getSvnFileUrlMapping().getWcRootForFilePath(new File(file.getPath()));
    if (path != null && WorkingCopyFormat.ONE_DOT_SEVEN.equals(path.getFormat())) {
      VcsDirtyScopeManager.getInstance(myProject).filesDirty(Collections.singletonList(file),null);
      fileRevisionProbablyChanged(file);
    }
  }
}
