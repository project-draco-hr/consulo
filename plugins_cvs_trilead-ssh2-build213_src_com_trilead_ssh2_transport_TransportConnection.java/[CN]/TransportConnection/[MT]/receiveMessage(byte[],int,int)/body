{
  if (recv_packet_header_present == false) {
    cis.read(recv_packet_header_buffer,0,5);
  }
 else   recv_packet_header_present=false;
  int packet_length=((recv_packet_header_buffer[0] & 0xff) << 24) | ((recv_packet_header_buffer[1] & 0xff) << 16) | ((recv_packet_header_buffer[2] & 0xff) << 8)| ((recv_packet_header_buffer[3] & 0xff));
  int padding_length=recv_packet_header_buffer[4] & 0xff;
  if (packet_length > 35000 || packet_length < 12)   throw new IOException("Illegal packet size! (" + packet_length + ")");
  int payload_length=packet_length - padding_length - 1;
  if (payload_length < 0)   throw new IOException("Illegal padding_length in packet from remote (" + padding_length + ")");
  if (payload_length >= len)   throw new IOException("Receive buffer too small (" + len + ", need "+ payload_length+ ")");
  cis.read(buffer,off,payload_length);
  cis.read(recv_padding_buffer,0,padding_length);
  if (recv_mac != null) {
    cis.readPlain(recv_mac_buffer,0,recv_mac_buffer.length);
    recv_mac.initMac(recv_seq_number);
    recv_mac.update(recv_packet_header_buffer,0,5);
    recv_mac.update(buffer,off,payload_length);
    recv_mac.update(recv_padding_buffer,0,padding_length);
    recv_mac.getMac(recv_mac_buffer_cmp,0);
    for (int i=0; i < recv_mac_buffer.length; i++) {
      if (recv_mac_buffer[i] != recv_mac_buffer_cmp[i])       throw new IOException("Remote sent corrupt MAC.");
    }
  }
  recv_seq_number++;
  if (log.isEnabled()) {
    log.log(90,"Received " + Packets.getMessageName(buffer[off] & 0xff) + " "+ payload_length+ " bytes payload");
  }
  return payload_length;
}
