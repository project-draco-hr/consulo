{
  final StringBuffer membersBuffer=new StringBuffer();
  final StringBuffer methodsBuffer=new StringBuffer();
  final CodeStyleManager formatter=CodeStyleManager.getInstance(aClass.getProject());
  final JavaCodeStyleManager styler=JavaCodeStyleManager.getInstance(aClass.getProject());
  for (  final String property : properties) {
    LOG.assertTrue(property != null);
    final String type=property2fqClassName.get(property);
    LOG.assertTrue(type != null);
    generateProperty(styler,property,type,membersBuffer,methodsBuffer);
  }
  final PsiClass fakeClass;
  try {
    fakeClass=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory().createClassFromText(membersBuffer.toString() + methodsBuffer.toString(),null);
    final PsiField[] fields=fakeClass.getFields();
    for (    final PsiField field : fields) {
      aClass.add(field);
    }
    final PsiMethod[] methods=fakeClass.getMethods();
    for (    final PsiMethod method : methods) {
      aClass.add(method);
    }
    styler.shortenClassReferences(aClass);
    formatter.reformat(aClass);
  }
 catch (  IncorrectOperationException e) {
    throw new MyException(e.getMessage());
  }
}
