{
  myProperties=properties;
  myContext=context;
  myPostProcessing=postProcessing;
  mySelectTargetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      selectTarget();
    }
  }
);
  myRunTargetCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      mySelectTargetButton.setEnabled(myRunTargetCheckBox.isSelected());
      if (myRunTargetCheckBox.isSelected() && myTarget == null) {
        selectTarget();
      }
      updatePanel();
    }
  }
);
  myPropertiesTable=new JBTable();
  UIPropertyBinding.Composite binding=new UIPropertyBinding.Composite();
  myBinding=binding.bindList(myPropertiesTable,PROPERTY_COLUMNS,ANT_PROPERTIES);
  myPropertiesPanel.add(ToolbarDecorator.createDecorator(myPropertiesTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      ListTableModel<BuildFileProperty> model=(ListTableModel<BuildFileProperty>)myPropertiesTable.getModel();
      if (myPropertiesTable.isEditing() && !myPropertiesTable.getCellEditor().stopCellEditing()) {
        return;
      }
      BuildFileProperty item=new BuildFileProperty();
      ArrayList<BuildFileProperty> items=new ArrayList<BuildFileProperty>(model.getItems());
      items.add(item);
      model.setItems(items);
      int newIndex=model.indexOf(item);
      ListSelectionModel selectionModel=myPropertiesTable.getSelectionModel();
      selectionModel.clearSelection();
      selectionModel.setSelectionInterval(newIndex,newIndex);
      ColumnInfo[] columns=model.getColumnInfos();
      for (int i=0; i < columns.length; i++) {
        ColumnInfo column=columns[i];
        if (column.isCellEditable(item)) {
          myPropertiesTable.requestFocusInWindow();
          myPropertiesTable.editCellAt(newIndex,i);
          break;
        }
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      TableUtil.removeSelectedItems(myPropertiesTable);
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final ListSelectionModel selectionModel=myPropertiesTable.getSelectionModel();
      ListTableModel<BuildFileProperty> model=(ListTableModel<BuildFileProperty>)myPropertiesTable.getModel();
      boolean enable=false;
      if (!selectionModel.isSelectionEmpty()) {
        enable=true;
        for (        int i : myPropertiesTable.getSelectedRows()) {
          if (AntArtifactProperties.isPredefinedProperty(model.getItems().get(i).getPropertyName())) {
            enable=false;
            break;
          }
        }
      }
      return enable;
    }
  }
).disableUpDownActions().createPanel(),BorderLayout.CENTER);
}
