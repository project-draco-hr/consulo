{
  if (CreateFromUsageUtils.isValidReference(myReferenceExpression,false))   return;
  final Project project=myReferenceExpression.getProject();
  PsiType[] expectedTypes=CreateFromUsageUtils.guessType(myReferenceExpression,false);
  PsiType type=expectedTypes[0];
  final String varName=myReferenceExpression.getReferenceName();
  PsiMethod method=PsiTreeUtil.getParentOfType(myReferenceExpression,PsiMethod.class);
  LOG.assertTrue(method != null);
  method=IntroduceParameterHandler.chooseEnclosingMethod(method);
  if (method == null)   return;
  method=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
  if (method == null)   return;
  final List<ParameterInfoImpl> parameterInfos=new ArrayList<ParameterInfoImpl>(Arrays.asList(ParameterInfoImpl.fromMethod(method)));
  ParameterInfoImpl parameterInfo=new ParameterInfoImpl(-1,varName,type,PsiTypesUtil.getDefaultValueOfType(type),false);
  if (!method.isVarArgs()) {
    parameterInfos.add(parameterInfo);
  }
 else {
    parameterInfos.add(parameterInfos.size() - 1,parameterInfo);
  }
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode()) {
    ParameterInfoImpl[] array=parameterInfos.toArray(new ParameterInfoImpl[parameterInfos.size()]);
    String modifier=PsiUtil.getAccessModifier(PsiUtil.getAccessLevel(method.getModifierList()));
    ChangeSignatureProcessor processor=new ChangeSignatureProcessor(project,method,false,modifier,method.getName(),method.getReturnType(),array);
    processor.run();
  }
 else {
    final PsiMethod finalMethod=method;
    application.invokeLater(new Runnable(){
      @Override public void run(){
        if (project.isDisposed())         return;
        try {
          JavaChangeSignatureDialog dialog=JavaChangeSignatureDialog.createAndPreselectNew(project,finalMethod,parameterInfos,true,myReferenceExpression);
          dialog.setParameterInfos(parameterInfos);
          dialog.show();
          if (dialog.isOK()) {
            for (            ParameterInfoImpl info : parameterInfos) {
              if (info.getOldIndex() == -1) {
                final String newParamName=info.getName();
                if (!Comparing.strEqual(varName,newParamName)) {
                  final PsiExpression newExpr=JavaPsiFacade.getElementFactory(project).createExpressionFromText(newParamName,finalMethod);
                  new WriteCommandAction(project){
                    @Override protected void run(                    Result result) throws Throwable {
                      myReferenceExpression.replace(newExpr);
                    }
                  }
.execute();
                }
                break;
              }
            }
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
}
