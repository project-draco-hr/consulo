{
  List<Configurable> result=new ArrayList<Configurable>();
  CompilerConfigurationImpl compilerConfiguration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,false,false,false,true);
  final ExcludedEntriesConfigurable excludes=new ExcludedEntriesConfigurable(myProject,descriptor,compilerConfiguration.getExcludedEntriesConfiguration()){
    public void apply(){
      super.apply();
      FileStatusManager.getInstance(myProject).fileStatusesChanged();
    }
  }
;
  result.add(new CompilerUIConfigurable(myProject));
  result.add(createExcludesWrapper(excludes));
  ArrayList<Configurable> additional=new ArrayList<Configurable>();
  final CompilerSettingsFactory[] factories=Extensions.getExtensions(CompilerSettingsFactory.EP_NAME,myProject);
  if (factories.length > 0) {
    for (    CompilerSettingsFactory factory : factories) {
      additional.add(factory.create(myProject));
    }
    Collections.sort(additional,new Comparator<Configurable>(){
      public int compare(      final Configurable o1,      final Configurable o2){
        return Comparing.compare(o1.getDisplayName(),o2.getDisplayName());
      }
    }
);
  }
  additional.add(0,new RmicConfigurable(RmicSettings.getInstance(myProject)));
  additional.add(0,new JavaCompilersTab(myProject,compilerConfiguration.getRegisteredJavaCompilers(),compilerConfiguration.getDefaultCompiler()));
  result.addAll(additional);
  return result.toArray(new Configurable[result.size()]);
}
