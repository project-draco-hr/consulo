{
  LOG.assertTrue(targetClass.isEnum());
  final String name=myReferenceExpression.getReferenceName();
  LOG.assertTrue(name != null);
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(myReferenceExpression.getProject()).getElementFactory();
  PsiEnumConstant enumConstant=elementFactory.createEnumConstantFromText(name,null);
  enumConstant=(PsiEnumConstant)targetClass.add(enumConstant);
  final PsiMethod[] constructors=targetClass.getConstructors();
  if (constructors.length > 0) {
    final PsiMethod constructor=constructors[0];
    final PsiParameter[] parameters=constructor.getParameterList().getParameters();
    if (parameters.length > 0) {
      final String params=StringUtil.join(parameters,new Function<PsiParameter,String>(){
        @Override public String fun(        PsiParameter psiParameter){
          return psiParameter.getName();
        }
      }
,",");
      enumConstant=(PsiEnumConstant)enumConstant.replace(elementFactory.createEnumConstantFromText(name + "(" + params+ ")",null));
      final TemplateBuilderImpl builder=new TemplateBuilderImpl(enumConstant);
      final PsiExpressionList argumentList=enumConstant.getArgumentList();
      LOG.assertTrue(argumentList != null);
      for (      PsiExpression expression : argumentList.getExpressions()) {
        builder.replaceElement(expression,new EmptyExpression());
      }
      enumConstant=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(enumConstant);
      final Template template=builder.buildTemplate();
      final Project project=targetClass.getProject();
      final Editor newEditor=positionCursor(project,targetClass.getContainingFile(),enumConstant);
      final TextRange range=enumConstant.getTextRange();
      newEditor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
      startTemplate(newEditor,template,project);
    }
  }
}
