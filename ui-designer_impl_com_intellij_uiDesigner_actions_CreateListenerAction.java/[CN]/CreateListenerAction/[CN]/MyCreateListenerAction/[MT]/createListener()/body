{
  try {
    PsiMethod constructor=findConstructorToInsert(myClass);
    final Module module=ModuleUtil.findModuleForPsiElement(myClass);
    PsiClass listenerClass=null;
    final String listenerClassName=myDescriptor.getListenerType().getName();
    if (listenerClassName.endsWith(LISTENER_SUFFIX)) {
      String adapterClassName=listenerClassName.substring(0,listenerClassName.length() - LISTENER_SUFFIX.length()) + ADAPTER_SUFFIX;
      listenerClass=myClass.getManager().findClass(adapterClassName,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module));
    }
    if (listenerClass == null) {
      listenerClass=myClass.getManager().findClass(listenerClassName,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module));
    }
    if (listenerClass == null) {
      Messages.showErrorDialog(myClass.getProject(),UIDesignerBundle.message("create.listener.class.not.found"),CommonBundle.getErrorTitle());
      return;
    }
    PsiElementFactory factory=myClass.getManager().getElementFactory();
    @NonNls StringBuilder builder=new StringBuilder(myField.getName());
    builder.append(".");
    builder.append(myDescriptor.getAddListenerMethod().getName());
    builder.append("(new ");
    builder.append(listenerClass.getQualifiedName());
    builder.append("() { } );");
    PsiStatement stmt=factory.createStatementFromText(builder.toString(),constructor);
    final PsiCodeBlock body=constructor.getBody();
    LOG.assertTrue(body != null);
    stmt=(PsiStatement)body.addAfter(stmt,body.getLastBodyElement());
    CodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt);
    final Ref<PsiClass> newClassRef=new Ref<PsiClass>();
    stmt.accept(new PsiRecursiveElementVisitor(){
      public void visitClass(      PsiClass aClass){
        newClassRef.set(aClass);
      }
    }
);
    final PsiClass newClass=newClassRef.get();
    final SmartPsiElementPointer ptr=SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(newClass);
    newClass.navigate(true);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        final PsiClass newClass=(PsiClass)ptr.getElement();
        final Editor editor=(Editor)DataManager.getInstance().getDataContext().getData(DataConstants.EDITOR);
        if (editor != null && newClass != null) {
          CommandProcessor.getInstance().executeCommand(myClass.getProject(),new Runnable(){
            public void run(){
              if (OverrideImplementUtil.getMethodSignaturesToImplement(newClass).length != 0) {
                OverrideImplementUtil.chooseAndImplementMethods(newClass.getProject(),editor,newClass);
              }
 else {
                OverrideImplementUtil.chooseAndOverrideMethods(newClass.getProject(),editor,newClass);
              }
            }
          }
,"",null);
        }
      }
    }
);
  }
 catch (  IncorrectOperationException ex) {
    LOG.error(ex);
  }
}
