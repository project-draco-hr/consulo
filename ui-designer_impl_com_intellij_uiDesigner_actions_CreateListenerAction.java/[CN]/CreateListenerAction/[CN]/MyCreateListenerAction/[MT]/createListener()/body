{
  RadRootContainer root=(RadRootContainer)FormEditingUtil.getRoot(mySelection.get(0));
  final PsiField[] boundFields=new PsiField[mySelection.size()];
  for (int i=0; i < mySelection.size(); i++) {
    boundFields[i]=BindingProperty.findBoundField(root,mySelection.get(i).getBinding());
  }
  final PsiClass myClass=boundFields[0].getContainingClass();
  final ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(myClass.getProject()).ensureFilesWritable(myClass.getContainingFile().getVirtualFile());
  if (status.hasReadonlyFiles())   return;
  try {
    PsiMethod constructor=findConstructorToInsert(myClass);
    final Module module=ModuleUtil.findModuleForPsiElement(myClass);
    PsiClass listenerClass=null;
    final String listenerClassName=myDescriptor.getListenerType().getName();
    if (listenerClassName.endsWith(LISTENER_SUFFIX)) {
      String adapterClassName=listenerClassName.substring(0,listenerClassName.length() - LISTENER_SUFFIX.length()) + ADAPTER_SUFFIX;
      listenerClass=JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module));
    }
    if (listenerClass == null) {
      listenerClass=JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module));
    }
    if (listenerClass == null) {
      Messages.showErrorDialog(myClass.getProject(),UIDesignerBundle.message("create.listener.class.not.found"),CommonBundle.getErrorTitle());
      return;
    }
    PsiElementFactory factory=JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory();
    final PsiCodeBlock body=constructor.getBody();
    LOG.assertTrue(body != null);
    @NonNls StringBuilder builder=new StringBuilder();
    @NonNls String variableName=null;
    if (boundFields.length == 1) {
      builder.append(boundFields[0].getName());
      builder.append(".");
      builder.append(myDescriptor.getAddListenerMethod().getName());
      builder.append("(");
    }
 else {
      builder.append(listenerClass.getQualifiedName()).append(" ");
      if (body.getLastBodyElement() == null) {
        variableName="listener";
      }
 else {
        final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(myClass.getProject());
        variableName=codeStyleManager.suggestUniqueVariableName("listener",body.getLastBodyElement(),false);
      }
      builder.append(variableName).append("=");
    }
    builder.append("new ");
    builder.append(listenerClass.getQualifiedName());
    builder.append("() { } ");
    if (boundFields.length == 1) {
      builder.append(");");
    }
 else {
      builder.append(";");
    }
    PsiStatement stmt=factory.createStatementFromText(builder.toString(),constructor);
    stmt=(PsiStatement)body.addAfter(stmt,body.getLastBodyElement());
    JavaCodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt);
    if (boundFields.length > 1) {
      PsiElement anchor=stmt;
      for (      PsiField field : boundFields) {
        PsiElement addStmt=factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName()+ "("+ variableName+ ");",constructor);
        addStmt=body.addAfter(addStmt,anchor);
        anchor=addStmt;
      }
    }
    final Ref<PsiClass> newClassRef=new Ref<PsiClass>();
    stmt.accept(new JavaRecursiveElementVisitor(){
      @Override public void visitClass(      PsiClass aClass){
        newClassRef.set(aClass);
      }
    }
);
    final PsiClass newClass=newClassRef.get();
    final SmartPsiElementPointer ptr=SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(newClass);
    newClass.navigate(true);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        final PsiClass newClass=(PsiClass)ptr.getElement();
        final Editor editor=DataKeys.EDITOR.getData(DataManager.getInstance().getDataContext());
        if (editor != null && newClass != null) {
          CommandProcessor.getInstance().executeCommand(myClass.getProject(),new Runnable(){
            public void run(){
              if (!OverrideImplementUtil.getMethodSignaturesToImplement(newClass).isEmpty()) {
                OverrideImplementUtil.chooseAndImplementMethods(newClass.getProject(),editor,newClass);
              }
 else {
                OverrideImplementUtil.chooseAndOverrideMethods(newClass.getProject(),editor,newClass);
              }
            }
          }
,"",null);
        }
      }
    }
);
  }
 catch (  IncorrectOperationException ex) {
    LOG.error(ex);
  }
}
