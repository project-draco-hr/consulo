{
  final List<RadComponent>[][] components=getGridComponents((RadGridLayoutComponent)component);
  final MetaModel tableRowModel=ViewsMetaManager.getInstance(component.getTag().getProject()).getModelByTag("TableRow");
  return new ComponentMorphingTool(component,new RadTableLayoutComponent(),target,new RadTableLayout()){
    @Override protected void convertChildren() throws Exception {
      for (      List<RadComponent>[] rowComponents : components) {
        RadViewComponent newRowComponent=ModelParser.createComponent(null,tableRowModel);
        ModelParser.addComponent(myNewComponent,newRowComponent,null);
        for (        List<RadComponent> cellComponents : rowComponents) {
          if (cellComponents != null) {
            for (            RadComponent cellComponent : cellComponents) {
              ModelParser.moveComponent(newRowComponent,(RadViewComponent)cellComponent,null);
            }
          }
        }
      }
    }
    @Override protected void convertTag(){
      XmlTag tag=myNewComponent.getTag();
      ModelParser.deleteAttribute(tag,"rowCount");
      ModelParser.deleteAttribute(tag,"columnCount");
      for (      RadComponent rowComponent : myNewComponent.getChildren()) {
        for (        RadComponent cellComponent : rowComponent.getChildren()) {
          XmlTag cellTag=((RadViewComponent)cellComponent).getTag();
          ModelParser.deleteAttribute(cellTag,"layout_row");
          ModelParser.deleteAttribute(cellTag,"layout_rowSpan");
          XmlAttribute attribute=cellTag.getAttribute("layout_columnSpan",SdkConstants.NS_RESOURCES);
          if (attribute != null) {
            attribute.setName(attribute.getNamespacePrefix() + ":layout_span");
          }
        }
      }
    }
    @Override protected void loadChildProperties(    PropertyParser propertyParser) throws Exception {
    }
  }
.result();
}
