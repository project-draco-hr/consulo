{
  final RadComponent[][] components=((RadGridLayoutComponent)component).getGridComponents(false);
  final MetaModel tableRowModel=ViewsMetaManager.getInstance(component.getTag().getProject()).getModelByTag("TableRow");
  return new ComponentMorphingTool(component,new RadTableLayoutComponent(),target,new RadTableLayout()){
    @Override protected void convertChildren() throws Exception {
      for (      RadComponent[] rowComponents : components) {
        RadViewComponent newRowComponent=ModelParser.createComponent(null,tableRowModel);
        ModelParser.addComponent(myNewComponent,newRowComponent,null);
        for (        RadComponent cellComponent : rowComponents) {
          if (cellComponent != null) {
            ModelParser.moveComponent(newRowComponent,(RadViewComponent)cellComponent,null);
          }
        }
      }
    }
    @Override protected void convertTag(){
      XmlTag tag=myNewComponent.getTag();
      ModelParser.deleteAttribute(tag,"android:rowCount");
      ModelParser.deleteAttribute(tag,"android:columnCount");
      for (      RadComponent rowComponent : myNewComponent.getChildren()) {
        for (        RadComponent cellComponent : rowComponent.getChildren()) {
          XmlTag cellTag=((RadViewComponent)cellComponent).getTag();
          ModelParser.deleteAttribute(cellTag,"android:layout_row");
          ModelParser.deleteAttribute(cellTag,"android:layout_rowSpan");
          XmlAttribute attribute=cellTag.getAttribute("android:layout_columnSpan");
          if (attribute != null) {
            attribute.setName("android:layout_span");
          }
        }
      }
    }
    @Override protected void loadChildProperties(    PropertyParser propertyParser) throws Exception {
    }
  }
.result();
}
