{
  ProjectFileIndex projectFileIndex=myProjectRootManager.getFileIndex();
  Module module=projectFileIndex.getModuleForFile(vFile);
  if (module != null) {
    boolean includeTests=projectFileIndex.isInTestSourceContent(vFile);
    return GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,includeTests);
  }
 else {
    List<Module> modulesLibraryUsedIn=new ArrayList<Module>();
    List<OrderEntry> orderEntries=projectFileIndex.getOrderEntriesForFile(vFile);
    LibraryOrderEntry lib=null;
    for (    OrderEntry entry : orderEntries) {
      if (entry instanceof SdkOrderEntry) {
        return LibraryScopeCache.getInstance(myProject).getScopeForSdk((SdkOrderEntry)entry);
      }
      if (entry instanceof LibraryOrderEntry) {
        lib=(LibraryOrderEntry)entry;
        modulesLibraryUsedIn.add(entry.getOwnerModule());
      }
 else       if (entry instanceof ModuleOrderEntry) {
        modulesLibraryUsedIn.add(entry.getOwnerModule());
      }
    }
    GlobalSearchScope allCandidates=LibraryScopeCache.getInstance(myProject).getScopeForLibraryUsedIn(modulesLibraryUsedIn);
    if (lib != null) {
      final LibraryRuntimeClasspathScope preferred=new LibraryRuntimeClasspathScope(myProject,lib);
      return new DelegatingGlobalSearchScope(allCandidates,preferred){
        @Override public int compare(        VirtualFile file1,        VirtualFile file2){
          boolean c1=preferred.contains(file1);
          boolean c2=preferred.contains(file2);
          if (c1 && !c2)           return 1;
          if (c2 && !c1)           return -1;
          return super.compare(file1,file2);
        }
      }
;
    }
    return allCandidates;
  }
}
