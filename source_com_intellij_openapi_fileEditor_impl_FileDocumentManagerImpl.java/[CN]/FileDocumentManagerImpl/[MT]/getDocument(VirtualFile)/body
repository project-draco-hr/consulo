{
  DocumentEx document=(DocumentEx)getCachedDocument(file);
  if (document == null) {
synchronized (lock) {
      document=(DocumentEx)getCachedDocument(file);
      if (document != null)       return document;
      if (file.isDirectory() || file.getFileType().isBinary() && file.getFileType() != StdFileTypes.CLASS)       return null;
      final CharSequence text=LoadTextUtil.loadText(file);
      document=(DocumentEx)createDocument(text);
      document.setModificationStamp(file.getModificationStamp());
      final FileType fileType=file.getFileType();
      document.setReadOnly(!file.isWritable() || fileType.isBinary());
      file.putUserData(DOCUMENT_KEY,new WeakReference<Document>(document));
      document.putUserData(FILE_KEY,file);
      if (!(file instanceof LightVirtualFile || file.getFileSystem() instanceof DummyFileSystem)) {
        document.addDocumentListener(new DocumentAdapter(){
          public void documentChanged(          DocumentEvent e){
            final Document document=e.getDocument();
            myUnsavedDocuments.add(document);
            final Runnable currentCommand=CommandProcessor.getInstance().getCurrentCommand();
            Project project=currentCommand != null ? CommandProcessor.getInstance().getCurrentCommandProject() : null;
            String lineSeparator=CodeStyleSettingsManager.getSettings(project).getLineSeparator();
            document.putUserData(LINE_SEPARATOR_KEY,lineSeparator);
          }
        }
);
        document.addEditReadOnlyListener(myReadOnlyListener);
      }
      try {
        fireFileContentLoaded(file,document);
      }
 catch (      Exception e) {
        LOG.error(e);
      }
    }
  }
  return document;
}
