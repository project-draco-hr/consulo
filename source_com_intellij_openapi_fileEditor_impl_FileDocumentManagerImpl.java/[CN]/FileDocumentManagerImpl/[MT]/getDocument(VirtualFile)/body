{
  DocumentEx document=(DocumentEx)getCachedDocument(file);
  if (document == null) {
    final CharSequence text=loadText(file);
    if (text == null)     return null;
    document=(DocumentEx)createDocument(text);
    document.setModificationStamp(file.getModificationStamp());
    final FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(file);
    document.setReadOnly(!file.isWritable() || fileType.isBinary());
    file.putUserData(DOCUMENT_KEY,new WeakReference<Document>(document,myFilesWithDocumentReferenceQueue));
    final VirtualFile parentDir=file.getParent();
    if (parentDir != null) {
      final LocalFileSystem.WatchRequest request=LocalFileSystem.getInstance().addRootToWatch(parentDir,false);
      document.putUserData(WATCH_REQUEST_KEY,request);
    }
    document.putUserData(FILE_KEY,file);
    document.addDocumentListener(new DocumentAdapter(){
      public void documentChanged(      DocumentEvent e){
        final Document document=e.getDocument();
        myUnsavedDocuments.add(document);
        final Runnable currentCommand=CommandProcessor.getInstance().getCurrentCommand();
        Project project=currentCommand != null ? CommandProcessor.getInstance().getCurrentCommandProject() : null;
        String lineSeparator=CodeStyleSettingsManager.getSettings(project).getLineSeparator();
        document.putUserData(LINE_SEPARATOR_KEY,lineSeparator);
      }
    }
);
    document.addEditReadOnlyListener(myReadOnlyListener);
    try {
      fireFileContentLoaded(file,document);
    }
 catch (    Exception e) {
      LOG.error(e);
    }
    processQueue();
  }
  return document;
}
