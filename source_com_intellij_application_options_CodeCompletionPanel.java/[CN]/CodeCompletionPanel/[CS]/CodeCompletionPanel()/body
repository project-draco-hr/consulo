{
  myCaseSensitiveCombo.setModel(new DefaultComboBoxModel(new String[]{CASE_SENSITIVE_ALL,CASE_SENSITIVE_NONE,CASE_SENSITIVE_FIRST_LETTER}));
  myRbInsertParenth.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myCbInsertBothParenthesWhenNoArgs.setEnabled(true);
    }
  }
);
  myRbInsertBothParenthes.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myCbInsertBothParenthesWhenNoArgs.setEnabled(false);
    }
  }
);
  myCbAutocompletion.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myAutocompletionDelayField.setEnabled(myCbAutocompletion.isSelected());
    }
  }
);
  myCbXmlAutocompletion.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myXmlAutocompletionDelayField.setEnabled(myCbXmlAutocompletion.isSelected());
    }
  }
);
  myCbJavadocAutocompletion.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myFldJavadocAutocompletionDelayField.setEnabled(myCbJavadocAutocompletion.isSelected());
    }
  }
);
  myCbAutopopupJavaDoc.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myAutopopupJavaDocField.setEnabled(myCbAutopopupJavaDoc.isSelected());
    }
  }
);
  myCbParameterInfoPopup.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myParameterInfoDelayField.setEnabled(myCbParameterInfoPopup.isSelected());
    }
  }
);
  buttonGroup.add(myRbInsertParenth);
  buttonGroup.add(myRbInsertBothParenthes);
  reset();
  myAddPackageButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      InputValidator validator=new InputValidator(){
        public boolean checkInput(        String inputString){
          return ourPackagePattern.matcher(inputString).matches();
        }
        public boolean canClose(        String inputString){
          return checkInput(inputString);
        }
      }
;
      String packageName=Messages.showInputDialog(myPanel,ApplicationBundle.message("exclude.from.completion.prompt"),ApplicationBundle.message("exclude.from.completion.title"),Messages.getWarningIcon(),"",validator);
      if (packageName != null) {
        myExcludePackagesModel.add(myExcludePackagesModel.size(),packageName);
        myExcludePackagesList.setSelectedValue(packageName,true);
      }
    }
  }
);
  myExcludePackagesList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(myExcludePackagesList.getSelectedValue() != null);
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ListUtil.removeSelectedItems(myExcludePackagesList);
    }
  }
);
}
