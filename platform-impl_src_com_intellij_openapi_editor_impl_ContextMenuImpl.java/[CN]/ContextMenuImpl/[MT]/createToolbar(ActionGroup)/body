{
  final ActionToolbarImpl actionToolbar=new ActionToolbarImpl(ActionPlaces.CONTEXT_TOOLBAR,group,true,DataManager.getInstance(),ActionManagerEx.getInstanceEx(),KeymapManagerEx.getInstanceEx()){
    @Override public void paint(    final Graphics g){
      if (myContextMenuPanel.isPaintChildren()) {
        paintChildren(g);
      }
    }
    @Override protected void paintChildren(    final Graphics g){
      if (myContextMenuPanel.isPaintChildren()) {
        super.paintChildren(g);
      }
    }
    @Override public boolean isOpaque(){
      return myContextMenuPanel.isPaintChildren();
    }
    @Override public ActionButton createToolbarButton(    final AnAction action,    final ActionButtonLook look,    final String place,    final Presentation presentation,    final Dimension minimumSize){
      final ActionButton result=new ActionButton(action,presentation,place,minimumSize){
        @Override public void paintComponent(        final Graphics g){
          if (myContextMenuPanel.isPaintChildren()) {
            final ActionButtonLook look=getButtonLook();
            look.paintIcon(g,this,getIcon());
          }
          if (myContextMenuPanel.isShown() && getPopState() == ActionButton.POPPED) {
            final ActionButtonLook look=getButtonLook();
            look.paintBackground(g,this);
            look.paintIcon(g,this,getIcon());
          }
        }
        @Override public boolean isOpaque(){
          return myContextMenuPanel.isPaintChildren() || getPopState() == ActionButton.POPPED;
        }
        @Override public void paint(        final Graphics g){
          final Graphics2D g2=(Graphics2D)g;
          paintComponent(g2);
        }
      }
;
      result.setLook(look);
      return result;
    }
  }
;
  actionToolbar.setTargetComponent(myEditor.getContentComponent());
  return actionToolbar;
}
