{
  final Map<PsiElement,PsiElement> elementsToReplace=new HashMap<PsiElement,PsiElement>();
  method.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiField) {
        try {
          PsiField field=(PsiField)element;
          if (field.getContainingClass() == method.getContainingClass()) {
            FieldInfo info=myFields.get(field.getName());
            if (info != null && info.replaceWithLocal) {
              final PsiExpression localRefExpr=myElementFactory.createExpressionFromText(info.localVar.getName(),method);
              elementsToReplace.put(expression,localRefExpr);
            }
          }
 else           if (myClass.getContainingClass() != null && field.getContainingClass() == myClass.getContainingClass() && outerClassLocal != null) {
            PsiReferenceExpression expr=(PsiReferenceExpression)expression.copy();
            PsiExpression qualifier=myElementFactory.createExpressionFromText(outerClassLocal.getName(),field.getContainingClass());
            expr.setQualifierExpression(qualifier);
            elementsToReplace.put(expression,expr);
          }
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
    public void visitTypeElement(    final PsiTypeElement typeElement){
      super.visitTypeElement(typeElement);
      if (typeElement.getType() instanceof PsiClassType) {
        PsiClassType classType=(PsiClassType)typeElement.getType();
        PsiClass psiClass=classType.resolve();
        if (psiClass instanceof PsiTypeParameter) {
          PsiClass containingClass=method.getContainingClass();
          PsiTypeParameter[] psiTypeParameters=containingClass.getTypeParameters();
          for (int i=0; i < psiTypeParameters.length; i++) {
            if (psiTypeParameters[i] == psiClass) {
              elementsToReplace.put(typeElement,myElementFactory.createTypeElement(substitutedParameters[i]));
            }
          }
        }
      }
    }
  }
);
  for (  Map.Entry<PsiElement,PsiElement> e : elementsToReplace.entrySet()) {
    e.getKey().replace(e.getValue());
  }
}
