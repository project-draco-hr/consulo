{
  final Map<PsiElement,PsiElement> elementsToReplace=new HashMap<PsiElement,PsiElement>();
  method.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiField) {
        try {
          PsiField field=(PsiField)element;
          if (myClass.getContainingClass() != null && field.getContainingClass() == myClass.getContainingClass() && outerClassLocal != null) {
            PsiReferenceExpression expr=(PsiReferenceExpression)expression.copy();
            PsiExpression qualifier=myElementFactory.createExpressionFromText(outerClassLocal.getName(),field.getContainingClass());
            expr.setQualifierExpression(qualifier);
            elementsToReplace.put(expression,expr);
          }
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
    @Override public void visitTypeParameter(    final PsiTypeParameter classParameter){
      super.visitTypeParameter(classParameter);
      PsiReferenceList list=classParameter.getExtendsList();
      PsiJavaCodeReferenceElement[] referenceElements=list.getReferenceElements();
      for (      PsiJavaCodeReferenceElement reference : referenceElements) {
        PsiElement psiElement=reference.resolve();
        if (psiElement instanceof PsiTypeParameter) {
          checkReplaceTypeParameter(reference,(PsiTypeParameter)psiElement);
        }
      }
    }
    @Override public void visitTypeElement(    final PsiTypeElement typeElement){
      super.visitTypeElement(typeElement);
      if (typeElement.getType() instanceof PsiClassType) {
        PsiClassType classType=(PsiClassType)typeElement.getType();
        PsiClass psiClass=classType.resolve();
        if (psiClass instanceof PsiTypeParameter) {
          checkReplaceTypeParameter(typeElement,(PsiTypeParameter)psiClass);
        }
      }
    }
    private void checkReplaceTypeParameter(    PsiElement element,    PsiTypeParameter target){
      PsiClass containingClass=method.getContainingClass();
      PsiTypeParameter[] psiTypeParameters=containingClass.getTypeParameters();
      for (int i=0; i < psiTypeParameters.length; i++) {
        if (psiTypeParameters[i] == target) {
          PsiType substType=substitutedParameters[i];
          if (substType == null) {
            substType=PsiType.getJavaLangObject(element.getManager(),ProjectScope.getAllScope(element.getProject()));
          }
          if (element instanceof PsiJavaCodeReferenceElement) {
            LOG.assertTrue(substType instanceof PsiClassType);
            elementsToReplace.put(element,myElementFactory.createReferenceElementByType((PsiClassType)substType));
          }
 else {
            elementsToReplace.put(element,myElementFactory.createTypeElement(substType));
          }
        }
      }
    }
  }
);
  RefactoringUtil.replaceElementsWithMap(method,elementsToReplace);
}
