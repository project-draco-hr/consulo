{
  if (argument instanceof PsiReferenceExpression) {
    PsiElement element=((PsiReferenceExpression)argument).resolve();
    if (element instanceof PsiParameter) {
      int index=myConstructorParameters.getParameterIndex((PsiParameter)element);
      return (PsiExpression)argument.replace(myConstructorArguments.getExpressions()[index]);
    }
  }
  final List<Pair<PsiReferenceExpression,PsiParameter>> parameterReferences=new ArrayList<Pair<PsiReferenceExpression,PsiParameter>>();
  argument.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement psiElement=expression.resolve();
      if (psiElement instanceof PsiParameter) {
        parameterReferences.add(new Pair<PsiReferenceExpression,PsiParameter>(expression,(PsiParameter)psiElement));
      }
 else       if (psiElement instanceof PsiVariable) {
        localVarRefs.add(expression);
      }
    }
  }
);
  for (  Pair<PsiReferenceExpression,PsiParameter> pair : parameterReferences) {
    PsiParameter param=pair.second;
    int index=myConstructorParameters.getParameterIndex(param);
    if (myIsInMethod) {
      addParameter(param,myConstructorArguments.getExpressions()[index]);
    }
 else {
      PsiReferenceExpression ref=pair.first;
      if (ref == argument) {
        argument=(PsiExpression)argument.replace(myConstructorArguments.getExpressions()[index]);
      }
 else {
        ref.replace(myConstructorArguments.getExpressions()[index]);
      }
    }
  }
  return argument;
}
