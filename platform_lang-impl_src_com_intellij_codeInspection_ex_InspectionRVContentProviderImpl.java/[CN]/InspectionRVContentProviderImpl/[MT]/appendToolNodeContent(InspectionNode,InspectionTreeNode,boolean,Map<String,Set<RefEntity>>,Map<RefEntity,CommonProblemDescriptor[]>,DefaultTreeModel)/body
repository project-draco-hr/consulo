{
  final InspectionTool tool=toolNode.getTool();
  Function<RefEntity,UserObjectContainer<RefEntity>> computeContainer=new Function<RefEntity,UserObjectContainer<RefEntity>>(){
    public UserObjectContainer<RefEntity> fun(    final RefEntity refElement){
      return new RefElementContainer(refElement,problems != null ? problems.get(refElement) : null);
    }
  }
;
  final Set<RefModule> moduleProblems=tool.getModuleProblems();
  if (moduleProblems != null && !moduleProblems.isEmpty()) {
    Set<RefEntity> entities=contents.get("");
    if (entities == null) {
      entities=new HashSet<RefEntity>();
      contents.put("",entities);
    }
    entities.addAll(moduleProblems);
  }
  List<InspectionTreeNode> list=buildTree(contents,false,tool,computeContainer,showStructure);
  for (  InspectionTreeNode node : list) {
    merge(model,node,toolNode,true);
  }
  if (tool.isOldProblemsIncluded()) {
    final Map<RefEntity,CommonProblemDescriptor[]> oldProblems=tool instanceof DescriptorProviderInspection ? ((DescriptorProviderInspection)tool).getOldProblemElements() : null;
    computeContainer=new Function<RefEntity,UserObjectContainer<RefEntity>>(){
      public UserObjectContainer<RefEntity> fun(      final RefEntity refElement){
        return new RefElementContainer(refElement,oldProblems != null ? oldProblems.get(refElement) : null);
      }
    }
;
    list=buildTree(tool.getOldContent(),true,tool,computeContainer,showStructure);
    for (    InspectionTreeNode node : list) {
      merge(model,node,toolNode,true);
    }
  }
  merge(model,toolNode,parentNode,true);
}
