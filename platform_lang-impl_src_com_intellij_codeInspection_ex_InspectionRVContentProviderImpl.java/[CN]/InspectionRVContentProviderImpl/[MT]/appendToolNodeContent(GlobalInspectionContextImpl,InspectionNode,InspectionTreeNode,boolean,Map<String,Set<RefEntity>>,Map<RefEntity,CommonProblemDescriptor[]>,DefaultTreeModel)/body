{
  final InspectionToolWrapper toolWrapper=toolNode.getToolWrapper();
  Function<RefEntity,UserObjectContainer<RefEntity>> computeContainer=new Function<RefEntity,UserObjectContainer<RefEntity>>(){
    @Override public UserObjectContainer<RefEntity> fun(    final RefEntity refElement){
      return new RefElementContainer(refElement,problems.get(refElement));
    }
  }
;
  InspectionToolPresentation presentation=context.getPresentation(toolWrapper);
  final Set<RefModule> moduleProblems=presentation.getModuleProblems();
  if (moduleProblems != null && !moduleProblems.isEmpty()) {
    Set<RefEntity> entities=contents.get("");
    if (entities == null) {
      entities=new HashSet<RefEntity>();
      contents.put("",entities);
    }
    entities.addAll(moduleProblems);
  }
  List<InspectionTreeNode> list=buildTree(context,contents,false,toolWrapper,computeContainer,showStructure);
  for (  InspectionTreeNode node : list) {
    merge(model,node,toolNode,true);
  }
  if (presentation.isOldProblemsIncluded()) {
    final Map<RefEntity,CommonProblemDescriptor[]> oldProblems=presentation.getOldProblemElements();
    computeContainer=new Function<RefEntity,UserObjectContainer<RefEntity>>(){
      @Override public UserObjectContainer<RefEntity> fun(      final RefEntity refElement){
        return new RefElementContainer(refElement,oldProblems != null ? oldProblems.get(refElement) : null);
      }
    }
;
    list=buildTree(context,presentation.getOldContent(),true,toolWrapper,computeContainer,showStructure);
    for (    InspectionTreeNode node : list) {
      merge(model,node,toolNode,true);
    }
  }
  merge(model,toolNode,parentNode,false);
}
