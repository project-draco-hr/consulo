{
  final CharSequence sequence=document.getCharsSequence();
  final StringBuilder sb=new StringBuilder();
  Pattern pattern=Pattern.compile("<(error|warning|EOLError|EOLWarning|info|weak_warning)((?:\\s|=|\\w+|\\\"(?:[^\"]|\\\\\\\")*?\\\")*?)>(.*?)</\\1>");
  Matcher matcher=pattern.matcher(sequence);
  sb.append(sequence,0,startOffset);
  if (matcher.find(startOffset)) {
    boolean compactMode=false;
    int pos=startOffset;
    do {
      if (matcher.start(0) >= endOffset)       break;
      if (matcher.start(2) < matcher.end(2)) {
        if (!compactMode) {
          sb.setLength(pos=0);
          compactMode=true;
        }
        sb.append(sequence,pos,matcher.start(2));
        sb.append(sequence,matcher.end(2),matcher.end(0));
      }
 else       if (!compactMode) {
        sb.append(sequence,pos,matcher.start(0));
        sb.append(sequence,matcher.start(3),matcher.end(3));
      }
      pos=matcher.end(0);
    }
 while (matcher.find(pos));
    sb.append(sequence,pos,sequence.length());
  }
 else {
    final int[] offset=new int[]{startOffset};
    final ArrayList<HighlightInfo> infos=new ArrayList<HighlightInfo>();
    DaemonCodeAnalyzerImpl.processHighlights(document,project,HighlightSeverity.WARNING,0,sequence.length(),new Processor<HighlightInfo>(){
      @Override public boolean process(      HighlightInfo info){
        if (info.severity != HighlightSeverity.WARNING && info.severity != HighlightSeverity.ERROR)         return true;
        if (info.getStartOffset() >= endOffset)         return false;
        offset[0]=appendInfo(info,sb,sequence,offset[0],infos,false);
        return true;
      }
    }
);
    offset[0]=appendInfo(null,sb,sequence,offset[0],infos,false);
    sb.append(sequence.subSequence(offset[0],sequence.length()));
  }
  document.setText(sb);
}
