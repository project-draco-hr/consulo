{
  final List<DependenciesBuilder> builders=new ArrayList<DependenciesBuilder>();
  for (  AnalysisScope scope : myScopes) {
    builders.add(new ForwardDependenciesBuilder(myProject,scope,myTransitiveBorder));
  }
  final Runnable process=new Runnable(){
    public void run(){
      for (      final DependenciesBuilder builder : builders) {
        builder.analyze();
      }
    }
  }
;
  final Runnable successRunnable=new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          DependenciesPanel panel=new DependenciesPanel(myProject,builders,myExcluded);
          Content content=PeerFactory.getInstance().getContentFactory().createContent(panel,AnalysisScopeBundle.message("package.dependencies.toolwindow.title",builders.get(0).getScope().getDisplayName()),false);
          content.setDisposer(panel);
          panel.setContent(content);
          ((DependencyValidationManagerImpl)DependencyValidationManager.getInstance(myProject)).addContent(content);
        }
      }
);
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(myProject,AnalysisScopeBundle.message("package.dependencies.progress.title"),process,successRunnable,null,new PerformAnalysisInBackgroundOption(myProject));
}
