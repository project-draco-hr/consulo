{
  myProject=project;
  myShowCheckboxes=showCheckboxes;
  myIncludedChanges=new HashSet<Change>(initiallyIncluded);
  myCards=new CardLayout();
  setLayout(myCards);
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myTree=new Tree(new ChangesBrowserNode(myProject,ROOT)){
    public Dimension getPreferredScrollableViewportSize(){
      Dimension size=super.getPreferredScrollableViewportSize();
      size=new Dimension(size.width + 10,size.height);
      return size;
    }
    protected void processMouseEvent(    MouseEvent e){
      if (e.getID() == MouseEvent.MOUSE_PRESSED) {
        int row=myTree.getRowForLocation(e.getX(),e.getY());
        if (row >= 0) {
          final Rectangle baseRect=myTree.getRowBounds(row);
          baseRect.setSize(checkboxWidth,baseRect.height);
          if (baseRect.contains(e.getPoint())) {
            myTree.setSelectionRow(row);
            toggleSelection();
          }
        }
      }
      super.processMouseEvent(e);
    }
    public int getToggleClickCount(){
      return -1;
    }
  }
;
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new MyTreeCellRenderer());
  myList=new JList(new DefaultListModel());
  myList.setVisibleRowCount(10);
  add(new JScrollPane(myList),LIST_CARD);
  add(new JScrollPane(myTree),TREE_CARD);
  new ListSpeedSearch(myList){
    protected String getElementText(    Object element){
      if (element instanceof Change) {
        return ChangesUtil.getFilePath((Change)element).getName();
      }
      return super.getElementText(element);
    }
  }
;
  myList.setCellRenderer(new MyListCellRenderer());
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      toggleSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      includeSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      excludeSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final int idx=myList.locationToIndex(e.getPoint());
      if (idx >= 0) {
        final Rectangle baseRect=myList.getCellBounds(idx,idx);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (baseRect.contains(e.getPoint())) {
          toggleSelection();
          e.consume();
        }
 else         if (e.getClickCount() == 2) {
          myDoubleClickHandler.run();
          e.consume();
        }
      }
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final int row=myTree.getRowForLocation(e.getPoint().x,e.getPoint().y);
      if (row >= 0) {
        final Rectangle baseRect=myTree.getRowBounds(row);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (!baseRect.contains(e.getPoint()) && e.getClickCount() == 2) {
          myDoubleClickHandler.run();
          e.consume();
        }
      }
    }
  }
);
}
