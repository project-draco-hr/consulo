{
  startElement(statement);
  PsiExpression exception=statement.getException();
  if (exception != null) {
    exception.accept(this);
  }
  final List<PsiElement> blocks=findThrowToBlocks(statement);
  PsiElement element;
  if (blocks.isEmpty() || blocks.get(0) == null) {
    ThrowToInstruction instruction=new ThrowToInstruction(0);
    myCurrentFlow.addInstruction(instruction);
    if (myFinallyBlocks.isEmpty()) {
      element=myCodeFragment;
      addElementOffsetLater(element,false);
    }
 else {
      instruction.offset=-2;
      element=myFinallyBlocks.get(myFinallyBlocks.size() - 1);
      addElementOffsetLater(element,true);
    }
  }
 else {
    for (int i=0; i < blocks.size(); i++) {
      element=blocks.get(i);
      BranchingInstruction instruction=i == blocks.size() - 1 ? new ThrowToInstruction(0) : new ConditionalThrowToInstruction(0);
      myCurrentFlow.addInstruction(instruction);
      instruction.offset=-1;
      addElementOffsetLater(element,true);
    }
  }
  finishElement(statement);
}
