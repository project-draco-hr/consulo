{
  startElement(expression);
  final PsiExpression lOperand=expression.getLOperand();
  lOperand.accept(this);
  IElementType signTokenType=expression.getOperationSign().getTokenType();
  if (signTokenType == JavaTokenType.ANDAND) {
    if (myEnabledShortCircuit) {
      final Object exprValue=myConstantEvaluationHelper.computeConstantExpression(lOperand);
      if (exprValue instanceof Boolean) {
        myCurrentFlow.setConstantConditionOccurred(true);
      }
      if (calculateConstantExpression(expression) && exprValue instanceof Boolean) {
        if (!((Boolean)exprValue).booleanValue()) {
          myCurrentFlow.addInstruction(new GoToInstruction(0,myEndJumpRoles.get(myEndJumpRoles.size() - 1)));
          addElementOffsetLater(myEndStatementStack.peekElement(),myEndStatementStack.peekAtStart());
        }
      }
 else {
        myCurrentFlow.addInstruction(new ConditionalGoToInstruction(0,myEndJumpRoles.get(myEndJumpRoles.size() - 1)));
        addElementOffsetLater(myEndStatementStack.peekElement(),myEndStatementStack.peekAtStart());
      }
    }
 else {
      Instruction instruction=new ConditionalGoToInstruction(0);
      myCurrentFlow.addInstruction(instruction);
      addElementOffsetLater(expression,false);
    }
  }
 else   if (signTokenType == JavaTokenType.OROR) {
    if (myEnabledShortCircuit) {
      final Object exprValue=myConstantEvaluationHelper.computeConstantExpression(lOperand);
      if (exprValue instanceof Boolean) {
        myCurrentFlow.setConstantConditionOccurred(true);
      }
      if (calculateConstantExpression(expression) && exprValue instanceof Boolean) {
        if (((Boolean)exprValue).booleanValue()) {
          myCurrentFlow.addInstruction(new GoToInstruction(0,myStartJumpRoles.get(myStartJumpRoles.size() - 1)));
          addElementOffsetLater(myStartStatementStack.peekElement(),myStartStatementStack.peekAtStart());
        }
      }
 else {
        myCurrentFlow.addInstruction(new ConditionalGoToInstruction(0,myStartJumpRoles.get(myStartJumpRoles.size() - 1)));
        addElementOffsetLater(myStartStatementStack.peekElement(),myStartStatementStack.peekAtStart());
      }
    }
 else {
      Instruction instruction=new ConditionalGoToInstruction(0);
      myCurrentFlow.addInstruction(instruction);
      addElementOffsetLater(expression,false);
    }
  }
  final PsiExpression rOperand=expression.getROperand();
  if (rOperand != null) {
    rOperand.accept(this);
  }
  finishElement(expression);
}
