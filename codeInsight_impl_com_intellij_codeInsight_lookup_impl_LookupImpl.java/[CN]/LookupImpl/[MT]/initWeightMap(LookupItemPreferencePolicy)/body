{
  final SortedMap<LookupItemWeightComparable,List<LookupItem>> map=new TreeMap<LookupItemWeightComparable,List<LookupItem>>();
  if (LookupManagerImpl.isUseNewSorting()) {
    final Document document=myEditor.getDocument();
    final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
    final PsiElement element=psiFile.findElementAt(myEditor.getCaretModel().getOffset());
    final PsiProximityComparator proximityComparator=new PsiProximityComparator(element,myProject);
    for (    final LookupItem item : myItems) {
      final int[] weight=itemPreferencePolicy instanceof CompletionPreferencePolicy ? ((CompletionPreferencePolicy)itemPreferencePolicy).getWeight(item) : new int[]{item.getObject() instanceof PsiElement ? proximityComparator.getProximity((PsiElement)item.getObject()) : 0};
      final LookupItemWeightComparable key=new LookupItemWeightComparable(item.getPriority(),weight);
      List<LookupItem> list=map.get(key);
      if (list == null)       map.put(key,list=new ArrayList<LookupItem>());
      list.add(item);
    }
  }
  return map;
}
