{
  return new XmlElementVisitor(){
    @Override public void visitXmlAttributeValue(    final XmlAttributeValue value){
      if (value.getTextRange().isEmpty()) {
        return;
      }
      final PsiFile file=value.getContainingFile();
      if (file instanceof XmlFile) {
        final XmlRefCountHolder refHolder=XmlRefCountHolder.getInstance((XmlFile)file);
        if (refHolder == null)         return;
        final PsiElement parent=value.getParent();
        if (!(parent instanceof XmlAttribute))         return;
        final XmlTag tag=((XmlAttribute)parent).getParent();
        if (tag == null)         return;
        if (refHolder.isValidatable(tag.getParent()) && refHolder.isDuplicateIdAttributeValue(value)) {
          holder.registerProblem(value,XmlErrorMessages.message("duplicate.id.reference"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
        String idRef=XmlHighlightVisitor.getUnquotedValue(value,tag);
        if (tag instanceof HtmlTag) {
          idRef=idRef.toLowerCase();
        }
        if (XmlUtil.isSimpleXmlAttributeValue(idRef,value) && refHolder.isIdReferenceValue(value)) {
          boolean hasIdDeclaration=refHolder.hasIdDeclaration(idRef);
          if (!hasIdDeclaration && tag instanceof HtmlTag) {
            hasIdDeclaration=refHolder.hasIdDeclaration(StringUtil.stripQuotesAroundValue(value.getText()));
          }
          if (!hasIdDeclaration) {
            final FileViewProvider viewProvider=tag.getContainingFile().getViewProvider();
            if (viewProvider instanceof MultiplePsiFilesPerDocumentFileViewProvider) {
              holder.registerProblem(value,XmlErrorMessages.message("invalid.id.reference"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,new XmlDeclareIdInCommentAction(idRef));
            }
 else {
              holder.registerProblem(value,XmlErrorMessages.message("invalid.id.reference"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
            }
          }
        }
      }
    }
  }
;
}
