{
  final PsiElement parent=value.getParent();
  if (!(parent instanceof XmlAttribute))   return;
  XmlAttribute attribute=(XmlAttribute)parent;
  XmlTag tag=attribute.getParent();
  if (tag == null)   return;
  final String unquotedValue=XmlHighlightVisitor.getUnquotedValue(value,tag);
  if (XmlUtil.isSimpleXmlAttributeValue(unquotedValue,value)) {
    final XmlAttribute attributeById=refCountHolder.getAttributeById(unquotedValue);
    if (attributeById == null || !attributeById.isValid() || attributeById == attribute || soft || isSoftContext(attributeById)) {
      if (!soft || attributeById == null)       refCountHolder.registerAttributeWithId(unquotedValue,attribute);
    }
 else {
      final XmlAttributeValue valueElement=attributeById.getValueElement();
      if (valueElement != null && XmlHighlightVisitor.getUnquotedValue(valueElement,tag).equals(unquotedValue)) {
        if (tag.getParent().getUserData(XmlHighlightVisitor.DO_NOT_VALIDATE_KEY) == null) {
          holder.registerProblem(value,XmlErrorMessages.message("duplicate.id.reference"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
          holder.registerProblem(valueElement,XmlErrorMessages.message("duplicate.id.reference"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
      }
 else {
        refCountHolder.registerAttributeWithId(unquotedValue,attribute);
      }
    }
  }
}
