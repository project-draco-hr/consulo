{
  boolean hasNonTrivialConstructor=false;
  final PsiMethod[] constructors=psiClass.getConstructors();
  for (  PsiMethod constructor : constructors) {
    if (constructor.getParameterList().getParametersCount() > 0) {
      hasNonTrivialConstructor=true;
      break;
    }
  }
  if (hasNonTrivialConstructor) {
    final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(psiClass,targetClass,PsiSubstitutor.EMPTY);
    final List<PsiMethodMember> baseConstructors=new ArrayList<PsiMethodMember>();
    for (    PsiMethod baseConstr : constructors) {
      if (PsiUtil.isAccessible(baseConstr,targetClass,targetClass)) {
        baseConstructors.add(new PsiMethodMember(baseConstr,substitutor));
      }
    }
    CreateConstructorMatchingSuperFix.chooseConstructor2Delegate(project,editor,substitutor,baseConstructors,constructors,targetClass);
  }
  OverrideImplementUtil.chooseAndImplementMethods(project,editor,targetClass);
}
