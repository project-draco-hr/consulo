{
  if (element == null)   return false;
  PsiClass psiClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (psiClass == null || psiClass.isAnnotationType() || psiClass.isEnum() || psiClass instanceof PsiAnonymousClass || psiClass.hasModifierProperty(PsiModifier.FINAL)) {
    return false;
  }
  final PsiMethod[] constructors=psiClass.getConstructors();
  if (constructors.length > 0) {
    boolean hasNonPrivateConstructor=false;
    for (    PsiMethod constructor : constructors) {
      if (!constructor.hasModifierProperty(PsiModifier.PRIVATE)) {
        hasNonPrivateConstructor=true;
        break;
      }
    }
    if (!hasNonPrivateConstructor)     return false;
  }
  PsiJavaToken lBrace=psiClass.getLBrace();
  if (lBrace == null)   return false;
  if (element.getTextOffset() >= lBrace.getTextOffset())   return false;
  TextRange declarationRange=HighlightNamesUtil.getClassDeclarationTextRange(psiClass);
  if (!declarationRange.contains(element.getTextRange()))   return false;
  myText=getTitle(psiClass);
  return true;
}
