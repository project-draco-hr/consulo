{
  final Project project=psiClass.getProject();
  final PsiClass[] targetClass=new PsiClass[1];
  new WriteCommandAction(project,getTitle(psiClass),getTitle(psiClass)){
    @Override protected void run(    Result result) throws Throwable {
      IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
      final PsiTypeParameterList oldTypeParameterList=psiClass.getTypeParameterList();
      try {
        targetClass[0]=JavaDirectoryService.getInstance().createClass(targetDirectory,className);
      }
 catch (      final IncorrectOperationException e) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            Messages.showErrorDialog(project,CodeInsightBundle.message("intention.error.cannot.create.class.message",className) + "\n" + e.getLocalizedMessage(),CodeInsightBundle.message("intention.error.cannot.create.class.title"));
          }
        }
);
        return;
      }
      final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
      PsiJavaCodeReferenceElement ref=elementFactory.createClassReferenceElement(psiClass);
      try {
        if (psiClass.isInterface()) {
          ref=(PsiJavaCodeReferenceElement)targetClass[0].getImplementsList().add(ref);
        }
 else {
          ref=(PsiJavaCodeReferenceElement)targetClass[0].getExtendsList().add(ref);
        }
        if (psiClass.hasTypeParameters()) {
          final Editor editor=CodeInsightUtil.positionCursor(project,targetClass[0].getContainingFile(),targetClass[0].getLBrace());
          final TemplateBuilderImpl templateBuilder=editor != null && !ApplicationManager.getApplication().isUnitTestMode() ? (TemplateBuilderImpl)TemplateBuilderFactory.getInstance().createTemplateBuilder(targetClass[0]) : null;
          if (oldTypeParameterList != null) {
            for (            PsiTypeParameter parameter : oldTypeParameterList.getTypeParameters()) {
              final PsiElement param=ref.getParameterList().add(elementFactory.createTypeElement(elementFactory.createType(parameter)));
              if (templateBuilder != null) {
                templateBuilder.replaceElement(param,param.getText());
              }
            }
          }
          replaceTypeParamsList(targetClass[0],oldTypeParameterList);
          if (templateBuilder != null) {
            templateBuilder.setEndVariableBefore(ref);
            final Template template=templateBuilder.buildTemplate();
            template.addEndVariable();
            final PsiFile containingFile=targetClass[0].getContainingFile();
            final TextRange textRange=targetClass[0].getTextRange();
            PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
            editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
            CreateFromUsageBaseFix.startTemplate(editor,template,project,new TemplateEditingAdapter(){
              @Override public void templateFinished(              Template template,              boolean brokenOff){
                targetClass[0]=((PsiClassOwner)containingFile).getClasses()[0];
                chooseAndImplement(psiClass,project,targetClass[0],editor);
              }
            }
,getTitle(psiClass));
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
.execute();
  if (targetClass[0] == null)   return null;
  if (!ApplicationManager.getApplication().isUnitTestMode() && !psiClass.hasTypeParameters()) {
    final Editor editor=CodeInsightUtil.positionCursor(project,targetClass[0].getContainingFile(),targetClass[0].getLBrace());
    if (editor == null)     return targetClass[0];
    chooseAndImplement(psiClass,project,targetClass[0],editor);
  }
  return targetClass[0];
}
