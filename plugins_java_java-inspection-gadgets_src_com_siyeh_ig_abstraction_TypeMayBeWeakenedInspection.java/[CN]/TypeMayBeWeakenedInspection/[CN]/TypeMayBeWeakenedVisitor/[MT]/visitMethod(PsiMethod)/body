{
  super.visitMethod(method);
  if (isOnTheFly() && !method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  if (MethodUtils.hasSuper(method)) {
    return;
  }
  final Query<PsiMethod> overridingSearch=OverridingMethodsSearch.search(method);
  if (overridingSearch.findFirst() != null) {
    return;
  }
  final Collection<PsiClass> weakestClasses=WeakestTypeFinder.calculateWeakestClassesNecessary(method,useRighthandTypeAsWeakestTypeInAssignments,useParameterizedTypeForCollectionMethods);
  if (doNotWeakenToJavaLangObject) {
    final Project project=method.getProject();
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiClass javaLangObjectClass=facade.findClass(CommonClassNames.JAVA_LANG_OBJECT,method.getResolveScope());
    weakestClasses.remove(javaLangObjectClass);
  }
  if (onlyWeakentoInterface) {
    for (Iterator<PsiClass> iterator=weakestClasses.iterator(); iterator.hasNext(); ) {
      final PsiClass weakestClass=iterator.next();
      if (!weakestClass.isInterface()) {
        iterator.remove();
      }
    }
  }
  if (weakestClasses.isEmpty()) {
    return;
  }
  registerMethodError(method,method,weakestClasses);
}
