{
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int[] starts;
  final int[] ends;
  LogicalPosition blockStart=null;
  LogicalPosition blockEnd=null;
  if (selectionModel.hasBlockSelection()) {
    starts=selectionModel.getBlockSelectionStarts();
    ends=selectionModel.getBlockSelectionEnds();
    blockStart=selectionModel.getBlockStart();
    blockEnd=selectionModel.getBlockEnd();
  }
 else {
    if (!selectionModel.hasSelection()) {
      selectionModel.selectWordAtCaret(true);
    }
    starts=new int[]{selectionModel.getSelectionStart()};
    ends=new int[]{selectionModel.getSelectionEnd()};
  }
  selectionModel.removeBlockSelection();
  selectionModel.removeSelection();
  for (int i=0; i < starts.length; i++) {
    int startOffset=starts[i];
    int endOffset=ends[i];
    StringBuilder builder=StringBuilderSpinAllocator.alloc();
    try {
      final String text=editor.getDocument().getCharsSequence().subSequence(startOffset,endOffset).toString();
      toCase(builder,text,true);
      if (text.equals(builder.toString())) {
        toCase(builder,text,false);
      }
      editor.getDocument().replaceString(startOffset,endOffset,builder.toString());
    }
  finally {
      StringBuilderSpinAllocator.dispose(builder);
    }
  }
  if (blockStart != null) {
    selectionModel.setBlockSelection(blockStart,blockEnd);
  }
 else {
    selectionModel.setSelection(starts[0],ends[0]);
  }
}
