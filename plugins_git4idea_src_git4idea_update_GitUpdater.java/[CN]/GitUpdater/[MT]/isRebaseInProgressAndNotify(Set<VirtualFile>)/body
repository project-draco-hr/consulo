{
  Set<VirtualFile> rebasingRoots=new TreeSet<VirtualFile>(GitUtil.VIRTUAL_FILE_COMPARATOR);
  for (  final VirtualFile root : roots) {
    if (GitRebaseUtils.isRebaseInTheProgress(root)) {
      rebasingRoots.add(root);
    }
  }
  if (!rebasingRoots.isEmpty()) {
    final StringBuilder files=new StringBuilder();
    for (    VirtualFile r : rebasingRoots) {
      files.append(GitBundle.message("update.root.rebasing.item",r.getPresentableUrl()));
      myExceptions.add(new VcsException(GitBundle.message("update.root.rebasing",r.getPresentableUrl())));
    }
    GitUIUtil.notifyImportantError(myProject,GitBundle.message("update.root.rebasing.title"),GitBundle.message("update.root.rebasing.message",files.toString()));
    return true;
  }
  return false;
}
