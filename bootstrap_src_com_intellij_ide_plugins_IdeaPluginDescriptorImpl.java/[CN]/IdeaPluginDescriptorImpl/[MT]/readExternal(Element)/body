{
  final PluginBean pluginBean=XmlSerializer.deserialize(element,PluginBean.class);
  url=pluginBean.url;
  myName=pluginBean.name;
  String idString=pluginBean.id;
  if (idString == null || idString.length() == 0) {
    idString=myName;
  }
  myId=PluginId.getId(idString);
  String internalVersionString=pluginBean.formatVersion;
  if (internalVersionString != null) {
    try {
      final int formatVersion=Integer.parseInt(internalVersionString);
    }
 catch (    NumberFormatException e) {
      LOG.error(new PluginException("Invalid value in plugin.xml format version: " + internalVersionString,e,myId));
    }
  }
  myUseIdeaClassLoader=pluginBean.useIdeaClassLoader;
  myResourceBundleBaseName=pluginBean.resourceBundle;
  myDescriptionChildText=pluginBean.description;
  myChangeNotes=pluginBean.changeNotes;
  myVersion=pluginBean.pluginVersion;
  myCategory=pluginBean.category;
  if (pluginBean.vendor != null) {
    myVendor=pluginBean.vendor.name;
    myVendorEmail=pluginBean.vendor.email;
    myVendorUrl=pluginBean.vendor.url;
    myVendorLogoPath=pluginBean.vendor.logo;
  }
  Set<PluginId> dependentPlugins=new HashSet<PluginId>();
  Set<PluginId> optionalDependentPlugins=new HashSet<PluginId>();
  if (pluginBean.dependencies != null) {
    for (    PluginDependency dependency : pluginBean.dependencies) {
      String text=dependency.pluginId;
      if (text != null && text.length() > 0) {
        final PluginId id=PluginId.getId(text);
        dependentPlugins.add(id);
        if (dependency.optional) {
          optionalDependentPlugins.add(id);
        }
      }
    }
  }
  myDependencies=dependentPlugins.toArray(new PluginId[dependentPlugins.size()]);
  myOptionalDependencies=optionalDependentPlugins.toArray(new PluginId[optionalDependentPlugins.size()]);
  List<HelpSetPath> hsPathes=new ArrayList<HelpSetPath>();
  if (pluginBean.helpSets != null) {
    for (    PluginHelpSet pluginHelpSet : pluginBean.helpSets) {
      HelpSetPath hsPath=new HelpSetPath(pluginHelpSet.file,pluginHelpSet.path);
      hsPathes.add(hsPath);
    }
  }
  myHelpSets=hsPathes.toArray(new HelpSetPath[hsPathes.size()]);
  myAppComponents=pluginBean.applicationComponents;
  myProjectComponents=pluginBean.projectComponents;
  myModuleComponents=pluginBean.moduleComponents;
  if (myAppComponents == null)   myAppComponents=ComponentConfig.EMPTY_ARRAY;
  if (myProjectComponents == null)   myProjectComponents=ComponentConfig.EMPTY_ARRAY;
  if (myModuleComponents == null)   myModuleComponents=ComponentConfig.EMPTY_ARRAY;
  if (pluginBean.extensions != null) {
    myExtensions=new ArrayList<Element>();
    for (    Element extensionsRoot : pluginBean.extensions) {
      for (      final Object o : extensionsRoot.getChildren()) {
        myExtensions.add((Element)o);
      }
    }
  }
  if (pluginBean.extensionPoints != null) {
    myExtensionsPoints=new ArrayList<Element>();
    for (    Element root : pluginBean.extensionPoints) {
      for (      Object o : root.getChildren()) {
        myExtensionsPoints.add((Element)o);
      }
    }
  }
  myActionsElement=pluginBean.actions;
}
