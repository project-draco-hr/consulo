{
  if (!JavaCompletionUtil.hasAccessibleConstructor(type))   return null;
  final PsiClass psiClass=PsiUtil.resolveClassInType(type);
  if (psiClass == null)   return null;
  if (HighlightClassUtil.checkCreateInnerClassFromStaticContext(parameters.getPosition(),null,psiClass) != null) {
    return null;
  }
  PsiType psiType=JavaCompletionUtil.eliminateWildcards(type);
  if (JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getOriginalPosition()) && PsiUtil.getLanguageLevel(parameters.getOriginalFile()).isAtLeast(LanguageLevel.JDK_1_7)) {
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(psiClass.getProject());
    if (psiClass.hasTypeParameters() && !((PsiClassType)type).isRaw()) {
      final String canonicalText=TypeConversionUtil.erasure(psiType).getCanonicalText();
      final PsiStatement statement=elementFactory.createStatementFromText(psiType.getCanonicalText() + " v = new " + canonicalText+ "<>()",parameters.getOriginalFile());
      final PsiVariable declaredVar=(PsiVariable)((PsiDeclarationStatement)statement).getDeclaredElements()[0];
      final PsiNewExpression initializer=(PsiNewExpression)declaredVar.getInitializer();
      final boolean hasDefaultConstructorOrNoGenericsOne=PsiDiamondType.hasDefaultConstructor(psiClass) || !PsiDiamondType.haveConstructorsGenericsParameters(psiClass);
      if (hasDefaultConstructorOrNoGenericsOne) {
        final PsiDiamondType.DiamondInferenceResult inferenceResult=PsiDiamondType.resolveInferredTypes(initializer);
        if (inferenceResult.getErrorMessage() == null && !psiClass.hasModifierProperty(PsiModifier.ABSTRACT) && areInferredTypesApplicable(inferenceResult.getTypes(),parameters.getOriginalPosition())) {
          psiType=initializer.getType();
        }
      }
    }
  }
  final LookupItem item=PsiTypeLookupItem.createLookupItem(psiType,parameters.getPosition());
  JavaCompletionUtil.setShowFQN(item);
  if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
    item.setAttribute(LookupItem.INDICATE_ANONYMOUS,"");
  }
  return LookupElementDecorator.withInsertHandler(item,myConstructorInsertHandler);
}
