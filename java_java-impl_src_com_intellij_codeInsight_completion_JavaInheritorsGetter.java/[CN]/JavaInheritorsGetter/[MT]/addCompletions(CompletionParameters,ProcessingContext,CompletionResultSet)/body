{
  final PsiElement identifierCopy=parameters.getPosition();
  final PsiFile file=parameters.getOriginalFile();
  final List<PsiClassType> expectedClassTypes=new SmartList<PsiClassType>();
  final List<PsiArrayType> expectedArrayTypes=new SmartList<PsiArrayType>();
  final List<ExpectedTypeInfo> infos=new SmartList<ExpectedTypeInfo>();
  ContainerUtil.addAll(infos,JavaSmartCompletionContributor.getExpectedTypes(parameters));
  for (  PsiType type : ExpectedTypesGetter.getExpectedTypes(identifierCopy,true)) {
    if (type instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)type;
      if (classType.resolve() != null) {
        expectedClassTypes.add(classType);
      }
    }
 else     if (type instanceof PsiArrayType) {
      expectedArrayTypes.add((PsiArrayType)type);
    }
  }
  for (  final PsiArrayType type : expectedArrayTypes) {
    final LookupItem item=PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type),identifierCopy);
    if (item.getObject() instanceof PsiClass) {
      JavaCompletionUtil.setShowFQN(item);
    }
    item.setInsertHandler(new DefaultInsertHandler());
    result.addElement(JavaSmartCompletionContributor.decorate(item,infos));
  }
  processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){
    public void consume(    final PsiType type){
      addExpectedType(result,type,parameters,infos);
    }
  }
,result.getPrefixMatcher());
}
