{
  if (myInitialized)   return;
  myInitialized=true;
  collectImplementations(myClass);
  final Set<Method> methods=new HashSet<Method>(Arrays.asList(myClass.getMethods()));
  for (Iterator<Method> iterator=methods.iterator(); iterator.hasNext(); ) {
    final Method method=iterator.next();
    if (isCoreMethod(method) || DomUtil.isTagValueSetter(method) || isCustomMethod(method)) {
      iterator.remove();
    }
  }
  for (Iterator<Method> iterator=methods.iterator(); iterator.hasNext(); ) {
    Method method=iterator.next();
    if (DomUtil.isGetter(method) && processGetterMethod(method)) {
      iterator.remove();
    }
  }
  for (Iterator<Method> iterator=methods.iterator(); iterator.hasNext(); ) {
    Method method=iterator.next();
    if (isAddMethod(method)) {
      myCollectionChildrenAdditionMethods.put(MethodSignature.getSignature(method),extractTagName(method,"add"));
      iterator.remove();
    }
  }
  if (false) {
    if (!methods.isEmpty()) {
      throw new AssertionError("No implementation for methods: " + methods);
    }
  }
}
