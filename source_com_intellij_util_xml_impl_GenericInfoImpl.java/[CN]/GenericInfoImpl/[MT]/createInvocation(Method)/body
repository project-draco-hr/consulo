{
  buildMethodMaps();
  final MethodSignature signature=MethodSignature.getSignature(method);
  final CustomMethod customMethod=signature.findAnnotation(CustomMethod.class,myClass);
  if (customMethod != null) {
    return createCustomMethodInvocation(customMethod,method);
  }
  final PropertyAccessor accessor=signature.findAnnotation(PropertyAccessor.class,myClass);
  if (accessor != null) {
    return createPropertyAccessorInvocation(accessor);
  }
  if (myAttributeChildrenMethods.containsKey(signature)) {
    return new GetAttributeChildInvocation(signature);
  }
  if (myFixedChildrenMethods.containsKey(signature)) {
    return new GetFixedChildInvocation(signature);
  }
  String qname=myCollectionChildrenGetterMethods.get(signature);
  if (qname != null) {
    return new GetCollectionChildInvocation(qname,getFixedChildrenCount(qname));
  }
  qname=myCollectionChildrenAdditionMethods.get(signature);
  if (qname != null) {
    return new AddChildInvocation(getTypeGetter(method),getIndexGetter(method,getFixedChildrenCount(qname)),qname,myCollectionChildrenClasses.get(qname));
  }
  throw new UnsupportedOperationException("No implementation for method " + method.toString());
}
