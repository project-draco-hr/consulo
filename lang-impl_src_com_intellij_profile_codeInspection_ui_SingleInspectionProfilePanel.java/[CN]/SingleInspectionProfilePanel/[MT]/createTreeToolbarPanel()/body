{
  final CommonActionsManager actionManager=CommonActionsManager.getInstance();
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(actionManager.createExpandAllAction(myTreeExpander,myTree));
  actions.add(actionManager.createCollapseAllAction(myTreeExpander,myTree));
  actions.add(new AnAction(CommonBundle.message("button.reset.to.default"),CommonBundle.message("button.reset.to.default"),IconLoader.getIcon("/actions/reset-to-default.png")){
{
      registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_R,InputEvent.CTRL_MASK)),myTree);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(isResetEnabled());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      resetToBaseAction();
    }
  }
);
  actions.add(new AnAction("Reset to Empty","Reset to empty",IconLoader.getIcon("/general/reset.png")){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(mySelectedProfile != null && mySelectedProfile.isExecutable());
    }
    public void actionPerformed(    AnActionEvent e){
      resetToEmptyAction();
    }
  }
);
  actions.addSeparator();
  actions.add(new MyAddScopeAction());
  actions.add(new AnAction("Delete Scope","Delete Scope",Icons.DELETE_ICON){
{
      registerCustomShortcutSet(CommonShortcuts.DELETE,myTree);
    }
    @Override public void update(    AnActionEvent e){
      final Presentation presentation=e.getPresentation();
      presentation.setEnabled(false);
      if (mySelectedProfile == null)       return;
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      if (nodes.length > 0) {
        for (        MyTreeNode node : nodes) {
          if (node.getScope() == null || node.isByDefault())           return;
        }
        presentation.setEnabled(true);
      }
    }
    @Override public void actionPerformed(    AnActionEvent e){
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      for (      MyTreeNode node : nodes) {
        final Descriptor descriptor=node.getDesriptor();
        LOG.assertTrue(descriptor != null);
        final MyTreeNode parent=(MyTreeNode)node.getParent();
        final HighlightDisplayKey key=descriptor.getKey();
        if (parent.getChildCount() <= 2) {
          mySelectedProfile.removeAllScopes(key.toString());
          parent.removeAllChildren();
          parent.setInspectionNode(true);
          parent.setByDefault(true);
        }
 else {
          mySelectedProfile.removeScope(key.toString(),parent.getIndex(node));
          node.removeFromParent();
        }
        ((DefaultTreeModel)myTree.getModel()).reload(parent);
        myTree.setSelectionPath(new TreePath(parent.getPath()));
        myTree.revalidate();
      }
    }
  }
);
  actions.add(new AnAction("Move Scope Up","Move Scope Up",IconLoader.getIcon("/actions/moveUp.png")){
    @Override public void update(    AnActionEvent e){
      final Presentation presentation=e.getPresentation();
      presentation.setEnabled(false);
      if (mySelectedProfile == null)       return;
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      if (nodes.length > 0) {
        final MyTreeNode treeNode=nodes[0];
        if (treeNode.getScope() != null && !treeNode.isByDefault()) {
          final TreeNode parent=treeNode.getParent();
          final int index=parent.getIndex(treeNode);
          presentation.setEnabled(index > 0);
        }
      }
    }
    public void actionPerformed(    AnActionEvent e){
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      final MyTreeNode node=nodes[0];
      final Descriptor descriptor=node.getDesriptor();
      final TreeNode parent=node.getParent();
      final int index=parent.getIndex(node);
      mySelectedProfile.moveScope(descriptor.getKey().toString(),index,-1);
      node.removeFromParent();
      ((MyTreeNode)parent).insert(node,index - 1);
      ((DefaultTreeModel)myTree.getModel()).reload(parent);
      myTree.setSelectionPath(new TreePath(node.getPath()));
      myTree.revalidate();
    }
  }
);
  actions.add(new AnAction("Move Scope Down","Move Scope Down",IconLoader.getIcon("/actions/moveDown.png")){
    @Override public void update(    AnActionEvent e){
      final Presentation presentation=e.getPresentation();
      presentation.setEnabled(false);
      if (mySelectedProfile == null)       return;
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      if (nodes.length > 0) {
        final MyTreeNode treeNode=nodes[0];
        if (treeNode.getScope() != null && !treeNode.isByDefault()) {
          final TreeNode parent=treeNode.getParent();
          final int index=parent.getIndex(treeNode);
          presentation.setEnabled(index < parent.getChildCount() - 2);
        }
      }
    }
    public void actionPerformed(    AnActionEvent e){
      final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
      final MyTreeNode node=nodes[0];
      final Descriptor descriptor=node.getDesriptor();
      final TreeNode parent=node.getParent();
      final int index=parent.getIndex(node);
      mySelectedProfile.moveScope(descriptor.getKey().toString(),index,+1);
      node.removeFromParent();
      ((MyTreeNode)parent).insert(node,index + 1);
      ((DefaultTreeModel)myTree.getModel()).reload(parent);
      myTree.setSelectionPath(new TreePath(node.getPath()));
      myTree.revalidate();
    }
  }
);
  actions.addSeparator();
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actions,true);
  actionToolbar.setTargetComponent(this);
  return actionToolbar;
}
