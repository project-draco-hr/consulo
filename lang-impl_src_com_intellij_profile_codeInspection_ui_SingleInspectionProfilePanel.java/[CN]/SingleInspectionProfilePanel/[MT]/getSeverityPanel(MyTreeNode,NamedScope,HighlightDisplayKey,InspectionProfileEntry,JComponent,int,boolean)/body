{
  final LevelChooser chooser=new LevelChooser(((SeverityProvider)mySelectedProfile.getProfileManager()).getOwnSeverityRegistrar());
  chooser.getComboBox().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean toUpdate=mySelectedProfile.getErrorLevel(key,scope) != chooser.getLevel();
      mySelectedProfile.setErrorLevel(key,chooser.getLevel(),idx);
      if (toUpdate)       node.isProperSetting=mySelectedProfile.isProperSetting(key);
    }
  }
);
  chooser.setLevel(mySelectedProfile.getErrorLevel(key,scope));
  final JPanel withSeverity=new JPanel(new GridBagLayout());
  withSeverity.add(new JLabel(InspectionsBundle.message("inspection.severity")),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,5,10),0,0));
  Dimension dimension=new Dimension(150,chooser.getPreferredSize().height);
  chooser.setPreferredSize(dimension);
  chooser.setMinimumSize(dimension);
  withSeverity.add(chooser,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),0,0));
  final JCheckBox enabledDescriptor=new JCheckBox("Enabled",mySelectedProfile.isToolEnabled(key,scope));
  if (multipleScopes) {
    withSeverity.setBorder(BorderFactory.createEtchedBorder());
    enabledDescriptor.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (enabledDescriptor.isSelected()) {
          mySelectedProfile.enableTool(key.toString(),scope);
        }
 else {
          mySelectedProfile.disableTool(key.toString(),scope);
        }
      }
    }
);
    withSeverity.add(enabledDescriptor,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
    withSeverity.add(new JLabel("Scope:"),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,5,5,10),0,0));
    final DefaultComboBoxModel model=new DefaultComboBoxModel();
    final NamedScopesHolder scopesHolder=mySelectedProfile.getProfileManager().getScopesManager();
    final NamedScope[] scopes=scopesHolder.getScopes();
    for (    NamedScope ascope : scopes) {
      model.addElement(ascope);
    }
    final JComboBox scopesCombo=new JComboBox(model);
    scopesCombo.setSelectedItem(scope);
    scopesCombo.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        mySelectedProfile.setScope(key.toString(),idx,(NamedScope)scopesCombo.getSelectedItem());
      }
    }
);
    withSeverity.add(scopesCombo,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,0),0,0));
  }
  if (comp != null) {
    withSeverity.add(comp,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  }
 else {
    withSeverity.add(new JPanel(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  }
  if (myAreScopesAvailable) {
    final JPanel addDeleteMoveUpDouwnPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
    final JButton addScope=new JButton("Add scope");
    addScope.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        mySelectedProfile.addOneMoreScope(tool,scope != null ? scope : DefaultScopesProvider.getAllScope(),chooser.getLevel(),enabledDescriptor.isSelected());
        updateOptionsAndDescriptionPanel(new TreePath(node.getPath()));
      }
    }
);
    addDeleteMoveUpDouwnPanel.add(addScope);
    final JButton removeScope=new JButton("Remove Scope");
    removeScope.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        mySelectedProfile.removeScope(key.toString(),idx);
        updateOptionsAndDescriptionPanel(new TreePath(node.getPath()));
      }
    }
);
    addDeleteMoveUpDouwnPanel.add(removeScope);
    final JButton moveUp=new JButton("Move Up"){
      @Override public boolean isEnabled(){
        return idx > 0;
      }
    }
;
    moveUp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        mySelectedProfile.moveScope(key.toString(),idx,-1);
        updateOptionsAndDescriptionPanel(new TreePath(node.getPath()));
      }
    }
);
    addDeleteMoveUpDouwnPanel.add(moveUp);
    final JButton moveDown=new JButton("Move Down"){
      @Override public boolean isEnabled(){
        return idx < mySelectedProfile.getStates(key.toString()).size() - 1;
      }
    }
;
    moveDown.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        mySelectedProfile.moveScope(key.toString(),idx,+1);
        updateOptionsAndDescriptionPanel(new TreePath(node.getPath()));
      }
    }
);
    addDeleteMoveUpDouwnPanel.add(moveDown);
    withSeverity.add(addDeleteMoveUpDouwnPanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  }
  return withSeverity;
}
