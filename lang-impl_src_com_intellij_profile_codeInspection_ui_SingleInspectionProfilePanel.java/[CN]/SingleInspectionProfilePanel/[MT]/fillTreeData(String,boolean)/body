{
  if (mySelectedProfile == null)   return;
  myRoot.removeAllChildren();
  myRoot.setChecked(false);
  myRoot.isProperSetting=false;
  List<Set<String>> keySetList=new ArrayList<Set<String>>();
  final Set<String> quated=new HashSet<String>();
  if (filter != null && filter.length() > 0) {
    keySetList.addAll(SearchUtil.findKeys(filter,quated));
  }
  for (  Descriptor descriptor : myDescriptors.keySet()) {
    final List<Descriptor> descriptors=myDescriptors.get(descriptor);
    if (descriptor.getTool() != null && !(descriptor.getTool() instanceof LocalInspectionToolWrapper))     continue;
    if (filter != null && filter.length() > 0 && !isDescriptorAccepted(descriptor,filter,forceInclude,keySetList,quated)) {
      continue;
    }
    final HighlightDisplayKey key=descriptor.getKey();
    final boolean enabled=mySelectedProfile.isToolEnabled(key);
    final boolean properSetting=mySelectedProfile.isProperSetting(key);
    final InspectionConfigTreeNode node=new InspectionConfigTreeNode(descriptor,null,descriptors.isEmpty(),enabled,properSetting,descriptors.isEmpty());
    getGroupNode(myRoot,descriptor.getGroup(),properSetting).add(node);
    if (!descriptors.isEmpty()) {
      for (      Descriptor des : descriptors) {
        node.add(new InspectionConfigTreeNode(des,des.getState(),false,properSetting,false));
      }
      node.add(new InspectionConfigTreeNode(descriptor,descriptor.getState(),true,properSetting,false));
    }
    myRoot.setEnabled(myRoot.isEnabled() || enabled);
    myRoot.isProperSetting|=properSetting;
  }
  if (filter != null && forceInclude && myRoot.getChildCount() == 0) {
    final Set<String> filters=SearchableOptionsRegistrar.getInstance().getProcessedWords(filter);
    if (filters.size() > 1) {
      fillTreeData(filter,false);
    }
  }
  TreeUtil.sort(myRoot,new InspectionsConfigTreeComparator());
}
