{
  if (mySelectedProfile == null)   return;
  myRoot.removeAllChildren();
  myRoot.setChecked(false);
  myRoot.isProperSetting=false;
  List<Set<String>> keySetList=new ArrayList<Set<String>>();
  final Set<String> quated=new HashSet<String>();
  if (filter != null && filter.length() > 0) {
    keySetList.addAll(SearchUtil.findKeys(filter,quated));
  }
  for (  List<Descriptor> descriptors : myDescriptors.values()) {
    final Descriptor descriptor=descriptors.iterator().next();
    if (descriptor.getTool() != null && !(descriptor.getTool() instanceof LocalInspectionToolWrapper) && !myShowInspections)     continue;
    if (filter != null && filter.length() > 0 && !isDescriptorAccepted(descriptor,filter,forceInclude,keySetList,quated)) {
      continue;
    }
    final HighlightDisplayKey key=descriptor.getKey();
    final boolean enabled=mySelectedProfile.isToolEnabled(key);
    final boolean properSetting=mySelectedProfile.isProperSetting(key);
    final MyTreeNode node=new MyTreeNode(descriptors,enabled,properSetting);
    final MyTreeNode groupNode=getGroupNode(myRoot,descriptor.getGroup());
    groupNode.add(node);
    groupNode.isProperSetting|=properSetting;
    myRoot.setEnabled(myRoot.isEnabled() || enabled);
    myRoot.isProperSetting|=properSetting;
  }
  if (filter != null && forceInclude && myRoot.getChildCount() == 0) {
    final Set<String> filters=SearchableOptionsRegistrar.getInstance().getProcessedWords(filter);
    if (filters.size() > 1) {
      fillTreeData(filter,false);
    }
  }
  sortInspections();
}
