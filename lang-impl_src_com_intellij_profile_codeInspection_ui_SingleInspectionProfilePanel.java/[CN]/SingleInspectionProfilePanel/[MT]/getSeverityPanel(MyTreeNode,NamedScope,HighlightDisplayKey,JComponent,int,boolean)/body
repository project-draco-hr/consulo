{
  final LevelChooser chooser=new LevelChooser(((SeverityProvider)mySelectedProfile.getProfileManager()).getOwnSeverityRegistrar());
  chooser.getComboBox().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      boolean toUpdate=mySelectedProfile.getErrorLevel(key,scope) != chooser.getLevel();
      mySelectedProfile.setErrorLevel(key,chooser.getLevel(),idx);
      if (toUpdate)       node.isProperSetting=mySelectedProfile.isProperSetting(key);
    }
  }
);
  chooser.setLevel(mySelectedProfile.getErrorLevel(key,scope));
  final JPanel withSeverity=new JPanel(new GridBagLayout());
  withSeverity.add(new JLabel(InspectionsBundle.message("inspection.severity")),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,5,10),0,0));
  Dimension dimension=new Dimension(150,chooser.getPreferredSize().height);
  chooser.setPreferredSize(dimension);
  chooser.setMinimumSize(dimension);
  withSeverity.add(chooser,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),0,0));
  if (showScopes) {
    withSeverity.add(new JLabel("Scope:"),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,5,5,10),0,0));
    final DefaultComboBoxModel model=new DefaultComboBoxModel();
    final NamedScopesHolder scopesHolder=mySelectedProfile.getProfileManager().getScopesManager();
    final NamedScope[] scopes=scopesHolder.getScopes();
    for (    NamedScope ascope : scopes) {
      model.addElement(ascope);
    }
    final JComboBox scopesCombo=new JComboBox(model);
    scopesCombo.setRenderer(new DefaultListCellRenderer(){
      @Override public Component getListCellRendererComponent(      JList list,      Object value,      int index,      boolean isSelected,      boolean cellHasFocus){
        final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        setText(((NamedScope)value).getName());
        return rendererComponent;
      }
    }
);
    scopesCombo.setSelectedItem(scope);
    scopesCombo.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        final NamedScope namedScope=(NamedScope)scopesCombo.getSelectedItem();
        mySelectedProfile.setScope(key.toString(),idx,namedScope);
        myTree.getSelectedNodes(MyTreeNode.class,null)[0].setScope(namedScope);
        myTree.repaint();
      }
    }
);
    withSeverity.add(scopesCombo,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,0),0,0));
  }
  if (comp != null) {
    withSeverity.add(comp,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  }
 else {
    withSeverity.add(new JPanel(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  }
  DefaultActionGroup gr=new DefaultActionGroup();
  return withSeverity;
}
