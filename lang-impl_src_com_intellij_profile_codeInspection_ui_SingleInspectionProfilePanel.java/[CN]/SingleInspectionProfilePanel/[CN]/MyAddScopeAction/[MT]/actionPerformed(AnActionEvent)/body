{
  final MyTreeNode[] nodes=myTree.getSelectedNodes(MyTreeNode.class,null);
  final MyTreeNode node=nodes[0];
  final Descriptor descriptor=node.getDesriptor();
  LOG.assertTrue(descriptor != null);
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  final InspectionProfileEntry tool=descriptor.getTool();
  final List<String> availableScopes=getAvailableScopes(descriptor,project);
  final int idx=Messages.showChooseDialog(myTree,"Scope:","Choose Scope",availableScopes.toArray(new String[availableScopes.size()]),availableScopes.get(0),Messages.getQuestionIcon());
  if (idx == -1)   return;
  final ScopeToolState scopeToolState=mySelectedProfile.addScope(tool,NamedScopesHolder.getScope(project,availableScopes.get(idx)),descriptor.getLevel(),tool.isEnabledByDefault());
  final Descriptor addedDescriptor=new Descriptor(scopeToolState,mySelectedProfile);
  if (node.getChildCount() == 0) {
    node.add(new MyTreeNode(descriptor,DefaultScopesProvider.getAllScope(),true,descriptor.isEnabled(),true,false));
  }
  node.insert(new MyTreeNode(addedDescriptor,scopeToolState.getScope(),tool.isEnabledByDefault(),true,false),0);
  node.setInspectionNode(false);
  ((DefaultTreeModel)myTree.getModel()).reload(node);
  myTree.expandPath(new TreePath(node.getPath()));
  myTree.revalidate();
}
