{
  realm=realm == null ? url.getHost() : realm;
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myVcs.getProject());
  final SvnAuthenticationManager passive=configuration.getPassiveAuthenticationManager(myVcs.getProject());
  final SvnAuthenticationManager manager=configuration.getAuthenticationManager(myVcs);
  final ISVNAuthenticationProvider provider=manager.getProvider();
  SvnAuthenticationManager tmpDirManager=null;
  final List<String> kinds=getKinds(url);
  for (  String kind : kinds) {
    try {
      boolean fromPassive=true;
      SVNAuthentication svnAuthentication=getPassiveAuthentication(realm,url,passive,kind);
      if (svnAuthentication == null) {
        fromPassive=false;
        svnAuthentication=provider.requestClientAuthentication(kind,url,realm,previousFailed ? SVNErrorMessage.create(SVNErrorCode.RA_NOT_AUTHORIZED) : null,null,true);
      }
      if (svnAuthentication == null)       return false;
      configuration.acknowledge(kind,realm,svnAuthentication);
      if (!fromPassive && svnAuthentication.isStorageAllowed()) {
        manager.acknowledgeAuthentication(true,kind,realm,null,svnAuthentication);
        return true;
      }
 else {
        if (tmpDirManager == null) {
          myTempDirectory=FileUtil.createTempDirectory("tmp","Subversion");
          tmpDirManager=SvnConfiguration.createForTmpDir(myVcs.getProject(),myTempDirectory);
        }
        tmpDirManager.setArtificialSaving(true);
        try {
          tmpDirManager.acknowledgeAuthentication(true,kind,realm,null,svnAuthentication,url);
        }
 catch (        SvnAuthenticationManager.CredentialsSavedException e) {
          return e.isSuccess();
        }
      }
    }
 catch (    SVNException e) {
      LOG.info(e);
      VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),e.getMessage(),MessageType.ERROR);
      return false;
    }
catch (    IOException e) {
      LOG.info(e);
      VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),e.getMessage(),MessageType.ERROR);
      return false;
    }
  }
  return false;
}
