{
  final File base=getExistingParent(baseFile);
  if (base == null)   return false;
  final SVNURL url=SvnUtil.getCommittedURL(myVcs,base);
  if (url == null)   return false;
  final Proxy proxy;
  try {
    proxy=getIdeaDefinedProxy(url);
  }
 catch (  URISyntaxException e) {
    LOG.info(e);
    return false;
  }
  if (proxy == null)   return false;
  if (myProxyCredentialsWereReturned) {
    final HttpConfigurable instance=HttpConfigurable.getInstance();
    if (instance.USE_HTTP_PROXY || instance.USE_PROXY_PAC) {
      PopupUtil.showBalloonForActiveComponent("Failed to authenticate to proxy. You can change proxy credentials in HTTP proxy settings.",MessageType.ERROR);
    }
 else {
      PopupUtil.showBalloonForActiveComponent("Failed to authenticate to proxy.",MessageType.ERROR);
    }
    return false;
  }
  final InetSocketAddress address=(InetSocketAddress)proxy.address();
  final PasswordAuthentication authentication;
  try {
    authentication=Authenticator.requestPasswordAuthentication(url.getHost(),address.getAddress(),url.getPort(),url.getProtocol(),url.getHost(),url.getProtocol(),new URL(url.toString()),Authenticator.RequestorType.PROXY);
  }
 catch (  MalformedURLException e) {
    LOG.info(e);
    return false;
  }
  if (authentication != null) {
    myProxyCredentialsWereReturned=true;
    return SvnConfiguration.putProxyCredentialsIntoServerFile(myTempDirectory,url.getHost(),authentication);
  }
  return false;
}
