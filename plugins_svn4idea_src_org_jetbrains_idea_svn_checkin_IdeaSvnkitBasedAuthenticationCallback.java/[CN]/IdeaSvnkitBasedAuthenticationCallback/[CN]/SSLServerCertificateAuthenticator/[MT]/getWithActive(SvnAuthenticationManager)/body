{
  final ISVNAuthenticationProvider delegate=active.getProvider();
  try {
    active.setAuthenticationProvider(new ISVNAuthenticationProvider(){
      @Override public SVNAuthentication requestClientAuthentication(      String kind,      SVNURL url,      String realm,      SVNErrorMessage errorMessage,      SVNAuthentication previousAuth,      boolean authMayBeStored){
        myCredentialsRealm=realm;
        myAuthentication=delegate.requestClientAuthentication(kind,url,realm,errorMessage,previousAuth,authMayBeStored);
        if (myAuthentication != null) {
          myStoreInUsual&=myAuthentication.isStorageAllowed();
        }
        return myAuthentication;
      }
      @Override public int acceptServerAuthentication(      SVNURL url,      String realm,      Object certificate,      boolean resultMayBeStored){
        myCertificateRealm=realm;
        myCertificate=certificate;
        myResult=delegate.acceptServerAuthentication(url,realm,certificate,resultMayBeStored);
        return myResult;
      }
    }
);
    final SVNInfo info=myVcs.createWCClient(active).doInfo(myUrl,SVNRevision.UNDEFINED,SVNRevision.HEAD);
    myStoreInUsual&=myCertificate != null && ISVNAuthenticationProvider.ACCEPTED == myResult;
    return ISVNAuthenticationProvider.REJECTED != myResult && myCertificate != null;
  }
 catch (  SVNException e) {
    if (e.getErrorMessage().getErrorCode().isAuthentication())     return null;
    throw e;
  }
 finally {
    active.setAuthenticationProvider(delegate);
  }
}
