{
  subscribeToAuthProvider(new SvnAuthenticationManager.ISVNAuthenticationProviderListener(){
    @Override public void requestClientAuthentication(    String kind,    SVNURL url,    String realm,    SVNErrorMessage errorMessage,    SVNAuthentication previousAuth,    boolean authMayBeStored,    SVNAuthentication authentication){
      if (!myUrl.equals(url))       return;
      myCredentialsRealm=realm;
      myAuthentication=authentication;
      if (myAuthentication != null) {
        myStoreInUsual&=myAuthentication.isStorageAllowed();
      }
    }
    @Override public void acceptServerAuthentication(    SVNURL url,    String realm,    Object certificate,    boolean resultMayBeStored,    int accepted){
      if (!myUrl.equals(url))       return;
      myCertificateRealm=realm;
      myCertificate=certificate;
      myResult=accepted;
    }
  }
,new ThrowableRunnable<SVNException>(){
    @Override public void run() throws SVNException {
      myVcs.createWCClient(active).doInfo(myUrl,SVNRevision.UNDEFINED,SVNRevision.HEAD);
    }
  }
);
  myStoreInUsual&=myCertificate != null && ISVNAuthenticationProvider.ACCEPTED == myResult;
  return ISVNAuthenticationProvider.REJECTED != myResult && myCertificate != null;
}
