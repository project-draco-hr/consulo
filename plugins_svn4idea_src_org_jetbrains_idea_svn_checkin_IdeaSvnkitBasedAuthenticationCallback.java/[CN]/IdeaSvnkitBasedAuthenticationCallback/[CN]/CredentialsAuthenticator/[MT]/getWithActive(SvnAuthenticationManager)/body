{
  if (ISVNAuthenticationManager.SSL.equals(myKind)) {
    doWithSubscribeToAuthProvider(new SvnAuthenticationManager.ISVNAuthenticationProviderListener(){
      @Override public void requestClientAuthentication(      String kind,      SVNURL url,      String realm,      SVNErrorMessage errorMessage,      SVNAuthentication previousAuth,      boolean authMayBeStored,      SVNAuthentication authentication){
        if (!myUrl.equals(url))         return;
        myAuthentication=authentication;
        myRealm2=realm;
        myStoreInUsual=myAuthentication != null && myAuthentication.isStorageAllowed();
      }
      @Override public void acceptServerAuthentication(      SVNURL url,      String realm,      Object certificate,      boolean resultMayBeStored,      int accepted){
      }
    }
,new ThrowableRunnable<SVNException>(){
      @Override public void run() throws SVNException {
        myVcs.createWCClient(active).doInfo(myUrl,SVNRevision.UNDEFINED,SVNRevision.HEAD);
      }
    }
);
    if (myAuthentication != null)     return myAuthentication;
  }
  myAuthentication=active.getProvider().requestClientAuthentication(myKind,myUrl,myRealm,null,null,true);
  myStoreInUsual=myTempDirectory == null && myAuthentication != null && myAuthentication.isStorageAllowed();
  return myAuthentication;
}
