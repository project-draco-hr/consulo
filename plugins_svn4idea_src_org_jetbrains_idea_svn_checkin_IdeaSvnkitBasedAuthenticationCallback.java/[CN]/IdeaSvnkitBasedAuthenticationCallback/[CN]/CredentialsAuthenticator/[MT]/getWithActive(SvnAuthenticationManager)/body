{
  if (ISVNAuthenticationManager.SSL.equals(myKind)) {
    final ISVNAuthenticationProvider provider=active.getProvider();
    try {
      active.setAuthenticationProvider(new ISVNAuthenticationProvider(){
        @Override public SVNAuthentication requestClientAuthentication(        String kind,        SVNURL url,        String realm,        SVNErrorMessage errorMessage,        SVNAuthentication previousAuth,        boolean authMayBeStored){
          myAuthentication=provider.requestClientAuthentication(kind,url,realm,errorMessage,previousAuth,authMayBeStored);
          myStoreInUsual=myAuthentication != null && myAuthentication.isStorageAllowed();
          return myAuthentication;
        }
        @Override public int acceptServerAuthentication(        SVNURL url,        String realm,        Object certificate,        boolean resultMayBeStored){
          return provider.acceptServerAuthentication(url,realm,certificate,resultMayBeStored);
        }
      }
);
      myVcs.createWCClient(active).doInfo(myUrl,SVNRevision.UNDEFINED,SVNRevision.HEAD);
    }
  finally {
      active.setAuthenticationProvider(provider);
    }
    return myAuthentication;
  }
  myAuthentication=active.getProvider().requestClientAuthentication(myKind,myUrl,myRealm,null,null,true);
  myStoreInUsual=myTempDirectory == null && myAuthentication != null && myAuthentication.isStorageAllowed();
  return myAuthentication;
}
