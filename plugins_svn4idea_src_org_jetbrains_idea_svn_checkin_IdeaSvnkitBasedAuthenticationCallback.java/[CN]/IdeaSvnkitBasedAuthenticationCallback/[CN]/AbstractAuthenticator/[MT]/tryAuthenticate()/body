{
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myVcs.getProject());
  final SvnAuthenticationManager passive=configuration.getPassiveAuthenticationManager(myVcs.getProject());
  final SvnAuthenticationManager manager=configuration.getAuthenticationManager(myVcs);
  try {
    T svnAuthentication=getWithPassive(passive);
    if (svnAuthentication == null) {
      svnAuthentication=getWithActive(manager);
    }
    if (svnAuthentication == null)     return false;
    if (myStoreInUsual) {
      manager.setArtificialSaving(true);
      return acknowledge(manager,svnAuthentication);
    }
 else {
      if (myTmpDirManager == null) {
        initTmpDir(configuration);
        myTmpDirManager=createTmpManager();
      }
      myTmpDirManager.setArtificialSaving(true);
      return acknowledge(myTmpDirManager,svnAuthentication);
    }
  }
 catch (  IOException e) {
    LOG.info(e);
    VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),e.getMessage(),MessageType.ERROR);
    return false;
  }
catch (  SVNException e) {
    LOG.info(e);
    VcsBalloonProblemNotifier.showOverChangesView(myVcs.getProject(),e.getMessage(),MessageType.ERROR);
    return false;
  }
}
