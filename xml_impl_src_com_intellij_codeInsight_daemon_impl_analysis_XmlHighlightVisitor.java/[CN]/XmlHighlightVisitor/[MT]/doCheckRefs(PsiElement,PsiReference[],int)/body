{
  for (int i=start; i < references.length; ++i) {
    PsiReference reference=references[i];
    ProgressManager.checkCanceled();
    if (reference == null) {
      continue;
    }
    if (!reference.isSoft()) {
      if (hasBadResolve(reference)) {
        String description=getErrorDescription(reference);
        final int startOffset=reference.getElement().getTextRange().getStartOffset();
        final TextRange referenceRange=reference.getRangeInElement();
        if (referenceRange.getStartOffset() > referenceRange.getEndOffset()) {
          LOG.error("Reference range start offset > end offset:  " + reference + ", start offset: "+ referenceRange.getStartOffset()+ ", end offset: "+ referenceRange.getEndOffset());
        }
        HighlightInfoType type=getTagProblemInfoType(PsiTreeUtil.getParentOfType(value,XmlTag.class));
        if (type.getSeverity(null).compareTo(HighlightInfoType.WARNING.getSeverity(null)) > 0 && value instanceof XmlAttributeValue) {
          PsiElement parent=value.getParent();
          if (parent instanceof XmlAttribute && ((XmlAttribute)parent).getName().toLowerCase().endsWith("stylename")) {
            type=HighlightInfoType.WARNING;
          }
        }
        HighlightInfo info=HighlightInfo.createHighlightInfo(type,startOffset + referenceRange.getStartOffset(),startOffset + referenceRange.getEndOffset(),description);
        addToResults(info);
        if (reference instanceof QuickFixProvider)         ((QuickFixProvider)reference).registerQuickfix(info,reference);
        UnresolvedReferenceQuickFixProvider.registerReferenceFixes(reference,new QuickFixActionRegistrarImpl(info));
      }
    }
  }
}
