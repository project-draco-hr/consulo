{
  String name=tag.getName();
  XmlElementDescriptor elementDescriptor=null;
  final PsiElement parent=tag.getParent();
  if (parent instanceof XmlTag) {
    XmlTag parentTag=(XmlTag)parent;
    final XmlElementDescriptor parentDescriptor=parentTag.getDescriptor();
    if (parentDescriptor != null) {
      elementDescriptor=XmlExtension.getExtension(tag.getContainingFile()).getElementDescriptor(tag,parentTag,parentDescriptor);
    }
    if (parentDescriptor != null && elementDescriptor == null && !skipValidation(parentTag) && !XmlUtil.tagFromTemplateFramework(tag)) {
      if (tag instanceof HtmlTag) {
        return;
      }
      addElementsForTag(tag,XmlErrorMessages.message("element.is.not.allowed.here",name),getTagProblemInfoType(tag),null);
      return;
    }
    if (elementDescriptor instanceof AnyXmlElementDescriptor || elementDescriptor == null) {
      elementDescriptor=tag.getDescriptor();
    }
    if (elementDescriptor == null)     return;
  }
 else {
    elementDescriptor=tag.getDescriptor();
    if (elementDescriptor == null) {
      addElementsForTag(tag,XmlErrorMessages.message("element.must.be.declared",name),HighlightInfoType.WRONG_REF,null);
      return;
    }
  }
  checkRequiredAttributes(tag,name,elementDescriptor);
  if (elementDescriptor instanceof Validator) {
    ((Validator<XmlTag>)elementDescriptor).validate(tag,this);
  }
}
