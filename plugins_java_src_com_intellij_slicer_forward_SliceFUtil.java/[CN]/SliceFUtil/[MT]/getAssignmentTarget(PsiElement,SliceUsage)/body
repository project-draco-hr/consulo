{
  element=complexify(element);
  PsiElement target=null;
  PsiSubstitutor substitutor=parentUsage.getSubstitutor();
  PsiElement parent=element.getParent();
  if (parent instanceof PsiAssignmentExpression) {
    PsiAssignmentExpression assignment=(PsiAssignmentExpression)parent;
    if (element.equals(assignment.getRExpression())) {
      PsiElement left=assignment.getLExpression();
      if (left instanceof PsiReferenceExpression) {
        JavaResolveResult result=((PsiReferenceExpression)left).advancedResolve(false);
        target=result.getElement();
        substitutor=result.getSubstitutor();
      }
    }
  }
 else   if (parent instanceof PsiVariable) {
    PsiVariable variable=(PsiVariable)parent;
    PsiElement initializer=variable.getInitializer();
    if (element.equals(initializer)) {
      target=variable;
    }
  }
 else   if (parent instanceof PsiExpressionList && parent.getParent() instanceof PsiCallExpression) {
    PsiExpression[] expressions=((PsiExpressionList)parent).getExpressions();
    int index=ArrayUtil.find(expressions,element);
    PsiCallExpression methodCall=(PsiCallExpression)parent.getParent();
    JavaResolveResult result=methodCall.resolveMethodGenerics();
    PsiMethod method=(PsiMethod)result.getElement();
    if (index != -1 && method != null) {
      PsiParameter[] parameters=method.getParameterList().getParameters();
      if (index < parameters.length) {
        target=parameters[index];
        substitutor=result.getSubstitutor();
      }
    }
  }
 else   if (parent instanceof PsiReturnStatement) {
    PsiReturnStatement statement=(PsiReturnStatement)parent;
    if (element.equals(statement.getReturnValue())) {
      target=PsiTreeUtil.getParentOfType(statement,PsiMethod.class);
    }
  }
  return target == null ? null : Pair.create(target,substitutor);
}
