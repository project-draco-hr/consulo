{
  final boolean sortDirection=(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING);
switch (columnIdx) {
case COLUMN_STATUS:
    return new Comparator<IdeaPluginDescriptor>(){
      public int compare(      IdeaPluginDescriptor o1,      IdeaPluginDescriptor o2){
        if (o1 instanceof PluginNode && o2 instanceof IdeaPluginDescriptorImpl) {
          return sortDirection ? -1 : 1;
        }
 else         if (o2 instanceof PluginNode && o1 instanceof IdeaPluginDescriptorImpl) {
          return sortDirection ? 1 : -1;
        }
 else         if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
          PluginNode p1=(PluginNode)(sortDirection ? o1 : o2);
          PluginNode p2=(PluginNode)(sortDirection ? o2 : o1);
          int status1=getRealNodeState(p1);
          int status2=getRealNodeState(p2);
          if (status1 == status2)           return 0;
 else           return (status1 > status2) ? 1 : -1;
        }
 else {
          IdeaPluginDescriptorImpl p1=(IdeaPluginDescriptorImpl)(sortDirection ? o1 : o2);
          IdeaPluginDescriptorImpl p2=(IdeaPluginDescriptorImpl)(sortDirection ? o2 : o1);
          if (p1.isDeleted() && !p2.isDeleted())           return -1;
 else           if (!p1.isDeleted() && p2.isDeleted())           return 1;
 else           if (PluginsTableModel.hasNewerVersion(p1.getPluginId()) && !PluginsTableModel.hasNewerVersion(p2.getPluginId()))           return 1;
 else           if (!PluginsTableModel.hasNewerVersion(p1.getPluginId()) && PluginsTableModel.hasNewerVersion(p2.getPluginId()))           return -1;
        }
        return 0;
      }
    }
;
case COLUMN_NAME:
  return new Comparator<IdeaPluginDescriptor>(){
    public int compare(    IdeaPluginDescriptor o1,    IdeaPluginDescriptor o2){
      String name1=(sortDirection ? o1 : o2).getName();
      String name2=(sortDirection ? o2 : o1).getName();
      return compareStrings(name1,name2);
    }
  }
;
case COLUMN_DOWNLOADS:
return new Comparator<IdeaPluginDescriptor>(){
  public int compare(  IdeaPluginDescriptor o1,  IdeaPluginDescriptor o2){
    if (!sortDirection) {
      IdeaPluginDescriptor swap=o2;
      o2=o1;
      o1=swap;
    }
    String count1=(o1 instanceof PluginNode) ? ((PluginNode)o1).getDownloads() : ((IdeaPluginDescriptorImpl)o1).getDownloads();
    String count2=(o2 instanceof PluginNode) ? ((PluginNode)o2).getDownloads() : ((IdeaPluginDescriptorImpl)o2).getDownloads();
    if (count1 != null && count2 != null)     return new Long(count1).compareTo(new Long(count2));
 else     if (count1 != null)     return 1;
 else     return -1;
  }
}
;
case COLUMN_CATEGORY:
return new Comparator<IdeaPluginDescriptor>(){
public int compare(IdeaPluginDescriptor o1,IdeaPluginDescriptor o2){
  String cat1=(sortDirection ? o1 : o2).getCategory();
  String cat2=(sortDirection ? o2 : o1).getCategory();
  return compareStrings(cat1,cat2);
}
}
;
case COLUMN_DATE:
return new Comparator<IdeaPluginDescriptor>(){
public int compare(IdeaPluginDescriptor o1,IdeaPluginDescriptor o2){
if (!sortDirection) {
  IdeaPluginDescriptor swap=o2;
  o2=o1;
  o1=swap;
}
long date1=(o1 instanceof PluginNode) ? ((PluginNode)o1).getDate() : ((IdeaPluginDescriptorImpl)o1).getDate();
long date2=(o2 instanceof PluginNode) ? ((PluginNode)o2).getDate() : ((IdeaPluginDescriptorImpl)o2).getDate();
if (date1 > date2) return 1;
 else if (date1 < date2) return -1;
return 0;
}
}
;
default :
return new Comparator<IdeaPluginDescriptor>(){
public int compare(IdeaPluginDescriptor o,IdeaPluginDescriptor o1){
return 0;
}
}
;
}
}
