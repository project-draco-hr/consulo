{
switch (columnIdx) {
case COLUMN_NAME:
    return new Comparator(){
      public int compare(      Object o1,      Object o2){
        if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
          PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
          PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
          return p1.getName().compareToIgnoreCase(p2.getName());
        }
 else         if (o1 instanceof IdeaPluginDescriptor && o2 instanceof IdeaPluginDescriptor) {
          IdeaPluginDescriptor p1=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o1 : o2);
          IdeaPluginDescriptor p2=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o2 : o1);
          return p1.getName().compareToIgnoreCase(p2.getName());
        }
 else         return 0;
      }
    }
;
case COLUMN_INSTALLED_VERSION:
  return new Comparator(){
    public int compare(    Object o1,    Object o2){
      if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
        PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
        PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
        IdeaPluginDescriptor pd1=PluginManager.getPlugin(p1.getId());
        IdeaPluginDescriptor pd2=PluginManager.getPlugin(p2.getId());
        if (pd1 == null && pd2 == null)         return 0;
 else         if (pd1 != null && pd2 == null)         return 1;
 else         if (pd1 == null && pd2 != null)         return -1;
 else         if (pd1 != null && pd2 != null)         return compareVersion(pd1.getVersion(),pd2.getVersion());
        return compareVersion(p1.getVersion(),p2.getVersion());
      }
 else       return 0;
    }
  }
;
case COLUMN_VERSION:
return new Comparator(){
  public int compare(  Object o1,  Object o2){
    if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
      PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
      PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
      return compareVersion(p1.getVersion(),p2.getVersion());
    }
 else     if (o1 instanceof IdeaPluginDescriptor && o2 instanceof IdeaPluginDescriptor) {
      IdeaPluginDescriptor p1=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o1 : o2);
      IdeaPluginDescriptor p2=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o2 : o1);
      return compareVersion(p1.getVersion(),p2.getVersion());
    }
 else     return 0;
  }
}
;
case COLUMN_STATUS:
return new Comparator(){
public int compare(Object o1,Object o2){
  if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
    PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
    PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
    return PluginNode.getStatusName(PluginManagerColumnInfo.getRealNodeState(p1)).compareTo(PluginNode.getStatusName(PluginManagerColumnInfo.getRealNodeState(p2)));
  }
 else   return 0;
}
}
;
case COLUMN_SIZE:
return new Comparator(){
public int compare(Object o1,Object o2){
if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
  PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
  PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
  return new Long(p1.getSize()).compareTo(new Long(p2.getSize()));
}
 else return 0;
}
}
;
case COLUMN_DOWNLOADS:
return new Comparator(){
public int compare(Object o1,Object o2){
if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
return new Long(p1.getDownloads()).compareTo(new Long(p2.getDownloads()));
}
 else return 0;
}
}
;
case COLUMN_DATE:
return new Comparator(){
public int compare(Object o1,Object o2){
if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
if (p1.getDate() != null && p2.getDate() != null) return new Long(p1.getDate()).compareTo(new Long(p2.getDate()));
 else if (p1.getDate() != null && p2.getDate() == null) return 1;
 else if (p1.getDate() == null && p2.getDate() != null) return -1;
 else if (p1.getDate() == null && p2.getDate() == null) return 0;
 else return 0;
}
 else return 0;
}
}
;
case COLUMN_CATEGORY:
return new Comparator(){
public int compare(Object o1,Object o2){
if (o1 instanceof PluginNode && o2 instanceof PluginNode) {
PluginNode p1=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o1 : o2);
PluginNode p2=(PluginNode)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (PluginNode)o2 : o1);
return p1.getParent().getName().compareToIgnoreCase(p2.getParent().getName());
}
 else return 0;
}
}
;
case COLUMN_STATE:
return new Comparator(){
public int compare(Object o1,Object o2){
if (o1 instanceof IdeaPluginDescriptor && o2 instanceof IdeaPluginDescriptor) {
IdeaPluginDescriptor p1=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o1 : o2);
IdeaPluginDescriptor p2=(IdeaPluginDescriptor)(mySortableProvider.getSortOrder() == SortableColumnModel.SORT_ASCENDING ? (IdeaPluginDescriptor)o2 : o1);
if (p1.isDeleted() == p2.isDeleted()) return 0;
 else if (p1.isDeleted() && !p2.isDeleted()) return -1;
 else return 1;
}
 else return 0;
}
}
;
default :
return new Comparator(){
public int compare(Object o,Object o1){
return 0;
}
}
;
}
}
