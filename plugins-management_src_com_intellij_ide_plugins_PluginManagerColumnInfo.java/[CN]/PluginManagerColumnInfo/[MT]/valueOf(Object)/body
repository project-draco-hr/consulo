{
  if (o instanceof CategoryNode) {
switch (columnIdx) {
case COLUMN_NAME:
      return ((CategoryNode)o).getName();
default :
    return "";
}
}
 else if (o instanceof PluginNode) {
PluginNode plugin=((PluginNode)o);
switch (columnIdx) {
case COLUMN_NAME:
  return plugin.getName();
case COLUMN_INSTALLED_VERSION:
IdeaPluginDescriptor existing=PluginManager.getPlugin(plugin.getId());
if (existing == null) return IdeBundle.message("plugin.info.not.available");
 else return existing.getVersion();
case COLUMN_VERSION:
if (plugin.getVersion() == null) return IdeBundle.message("plugin.info.not.available");
 else return plugin.getVersion();
case COLUMN_STATUS:
return PluginNode.STATUS_NAMES[getRealNodeState(plugin)];
case COLUMN_SIZE:
final String size=plugin.getSize();
if (size.equals("-1")) {
return IdeBundle.message("plugin.info.unknown");
}
return size;
case COLUMN_DOWNLOADS:
return plugin.getDownloads();
case COLUMN_DATE:
if (plugin.getDate() != null) return DateFormat.getDateInstance(DateFormat.MEDIUM).format(new Date(Long.valueOf(plugin.getDate()).longValue()));
 else return IdeBundle.message("plugin.info.not.available");
case COLUMN_CATEGORY:
return ((CategoryNode)plugin.getParent()).getName();
default :
return "?";
}
}
 else if (o instanceof IdeaPluginDescriptorImpl) {
switch (columnIdx) {
case COLUMN_NAME:
return ((IdeaPluginDescriptor)o).getName();
case COLUMN_VERSION:
case COLUMN_INSTALLED_VERSION:
return ((IdeaPluginDescriptor)o).getVersion();
case COLUMN_STATE:
return ((IdeaPluginDescriptorImpl)o).isDeleted() ? IdeBundle.message("status.plugin.will.be.removed.after.restart") : IdeBundle.message("status.plugin.installed");
default :
return "?";
}
}
 else return null;
}
