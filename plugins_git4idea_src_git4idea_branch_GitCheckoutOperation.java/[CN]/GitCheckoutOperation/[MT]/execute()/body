{
  saveAllDocuments();
  boolean fatalErrorHappened=false;
  while (hasMoreRepositories() && !fatalErrorHappened) {
    final GitRepository repository=next();
    VirtualFile root=repository.getRoot();
    GitLocalChangesWouldBeOverwrittenDetector localChangesDetector=new GitLocalChangesWouldBeOverwrittenDetector(root,GitLocalChangesWouldBeOverwrittenDetector.Operation.CHECKOUT);
    GitSimpleEventDetector unmergedFiles=new GitSimpleEventDetector(GitSimpleEventDetector.Event.UNMERGED_PREVENTING_CHECKOUT);
    GitUntrackedFilesOverwrittenByOperationDetector untrackedOverwrittenByCheckout=new GitUntrackedFilesOverwrittenByOperationDetector(root);
    GitCommandResult result=myGit.checkout(repository,myStartPointReference,myNewBranch,false,localChangesDetector,unmergedFiles,untrackedOverwrittenByCheckout);
    if (result.success()) {
      refresh(repository);
      markSuccessful(repository);
    }
 else     if (unmergedFiles.hasHappened()) {
      fatalUnmergedFilesError();
      fatalErrorHappened=true;
    }
 else     if (localChangesDetector.wasMessageDetected()) {
      boolean smartCheckoutSucceeded=smartCheckoutOrNotify(repository,localChangesDetector);
      if (!smartCheckoutSucceeded) {
        fatalErrorHappened=true;
      }
    }
 else     if (untrackedOverwrittenByCheckout.wasMessageDetected()) {
      fatalUntrackedFilesError(untrackedOverwrittenByCheckout.getFiles());
      fatalErrorHappened=true;
    }
 else {
      fatalError(getCommonErrorTitle(),result.getErrorOutputAsJoinedString());
      fatalErrorHappened=true;
    }
  }
  if (!fatalErrorHappened) {
    notifySuccess();
    updateRecentBranch();
  }
}
