{
  GitCompoundResult checkoutResult=new GitCompoundResult(myProject);
  GitCompoundResult deleteResult=new GitCompoundResult(myProject);
  for (  GitRepository repository : getSuccessfulRepositories()) {
    GitCommandResult result=Git.checkout(repository,myPreviousBranch,null);
    checkoutResult.append(repository,result);
    if (result.success() && myNewBranch != null) {
      deleteResult.append(repository,Git.branchDelete(repository,myNewBranch,true));
    }
    refresh(repository);
  }
  if (!checkoutResult.totalSuccess() || !deleteResult.totalSuccess()) {
    StringBuilder message=new StringBuilder();
    if (!checkoutResult.totalSuccess()) {
      message.append("Errors during checking out ").append(myPreviousBranch).append(": ");
      message.append(checkoutResult.getErrorOutputWithReposIndication());
    }
    if (!deleteResult.totalSuccess()) {
      message.append("Errors during deleting ").append(code(myNewBranch)).append(": ");
      message.append(deleteResult.getErrorOutputWithReposIndication());
    }
    GitUIUtil.notify(GitVcs.IMPORTANT_ERROR_NOTIFICATION,myProject,"Error during rollback",message.toString(),NotificationType.ERROR,null);
  }
}
