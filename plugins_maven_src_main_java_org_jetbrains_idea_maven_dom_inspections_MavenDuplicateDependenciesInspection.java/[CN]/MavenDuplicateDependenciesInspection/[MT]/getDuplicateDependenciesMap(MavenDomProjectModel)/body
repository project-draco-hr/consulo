{
  final Map<MavenId,Set<MavenDomDependency>> allDependencies=new HashMap<MavenId,Set<MavenDomDependency>>();
  Processor<MavenDomProjectModel> collectProcessor=new Processor<MavenDomProjectModel>(){
    public boolean process(    MavenDomProjectModel model){
      for (      MavenDomDependency dependency : model.getDependencies().getDependencies()) {
        MavenId mavenId=createId(dependency);
        if (mavenId != null) {
          if (allDependencies.containsKey(mavenId)) {
            allDependencies.get(mavenId).add(dependency);
          }
 else {
            Set<MavenDomDependency> dependencies=new HashSet<MavenDomDependency>();
            dependencies.add(dependency);
            allDependencies.put(mavenId,dependencies);
          }
        }
      }
      return false;
    }
  }
;
  MavenDomProjectProcessorUtils.processChildrenRecursively(projectModel,collectProcessor,true);
  MavenDomProjectProcessorUtils.processParentProjects(projectModel,collectProcessor);
  return allDependencies;
}
