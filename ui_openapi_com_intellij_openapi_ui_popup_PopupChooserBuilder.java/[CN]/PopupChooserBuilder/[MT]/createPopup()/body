{
  JPanel contentPane=new JPanel(new BorderLayout());
  if (!myForceMovable && myTitle != null) {
    JLabel label=new JLabel(myTitle);
    label.setBorder(BorderFactory.createEmptyBorder(2,5,2,5));
    label.setHorizontalAlignment(SwingConstants.CENTER);
    contentPane.add(label,BorderLayout.NORTH);
  }
  myChooserComponent.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  myChooserComponent.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (!e.isConsumed()) {
        closePopup(true);
      }
    }
  }
);
  regsiterClosePopupKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),false);
  regsiterClosePopupKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),true);
  for (  KeyStroke keystroke : myAdditionalKeystrokes) {
    regsiterClosePopupKeyboardAction(keystroke,true);
  }
  final JScrollPane scrollPane;
  if (myChooserComponent instanceof MyListWrapper) {
    scrollPane=(MyListWrapper)myChooserComponent;
  }
 else   if (myChooserComponent instanceof JTable) {
    scrollPane=createScrollPane((JTable)myChooserComponent);
  }
 else   if (myChooserComponent instanceof JTree) {
    scrollPane=createScrollPane((JTree)myChooserComponent);
  }
 else {
    throw new IllegalStateException("PopupChooserBuilder is intended to be constructed with one of JTable, JTree, JList components");
  }
  scrollPane.getViewport().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  contentPane.add(scrollPane,BorderLayout.CENTER);
  if (mySouthComponent != null) {
    contentPane.add(mySouthComponent,BorderLayout.SOUTH);
  }
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(contentPane,myChooserComponent).setDimensionServiceKey(myDimensionServiceKey,false).setRequestFocus(myRequestFocus).setResizable(myForceResizable).setMovable(myForceMovable).setTitle(myForceMovable ? myTitle : null).createPopup();
  return myPopup;
}
