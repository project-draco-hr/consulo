{
  super.visitMethod(method);
  if (method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (method.isConstructor()) {
    return;
  }
  if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (m_ignoreEmptyMethods && MethodUtils.isEmpty(method)) {
    return;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(method);
  if (containingClass == null) {
    return;
  }
  final PsiElement scope=containingClass.getScope();
  if (!(scope instanceof PsiJavaFile) && !containingClass.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (m_onlyPrivateOrFinal && !method.hasModifierProperty(PsiModifier.FINAL) && !method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  if (TestUtils.isJUnitTestMethod(method)) {
    return;
  }
  final PsiMethod[] superMethods=method.findSuperMethods();
  if (superMethods.length > 0) {
    return;
  }
  if (MethodUtils.isOverridden(method)) {
    return;
  }
  final MethodReferenceVisitor visitor=new MethodReferenceVisitor(method);
  method.accept(visitor);
  if (!visitor.areReferencesStaticallyAccessible()) {
    return;
  }
  registerMethodError(method);
}
