{
  super.visitMethod(method);
  if (method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (method.isConstructor()) {
    return;
  }
  if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (m_ignoreEmptyMethods) {
    final PsiCodeBlock methodBody=method.getBody();
    if (methodBody == null) {
      return;
    }
    final PsiStatement[] methodStatements=methodBody.getStatements();
    if (methodStatements.length == 0) {
      return;
    }
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(method);
  if (containingClass == null) {
    return;
  }
  final PsiElement scope=containingClass.getScope();
  if (!(scope instanceof PsiJavaFile) && !containingClass.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (m_onlyPrivateOrFinal && !method.hasModifierProperty(PsiModifier.FINAL) && !method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  @NonNls final String methodName=method.getName();
  if (methodName != null && methodName.startsWith("test") && ClassUtils.isSubclass(containingClass,"junit.framework.TestCase")) {
    return;
  }
  final PsiMethod[] superMethods=method.findSuperMethods();
  if (superMethods.length > 0) {
    return;
  }
  final PsiElementProcessor.FindElement<PsiMethod> processor=new PsiElementProcessor.FindElement<PsiMethod>();
  final PsiManager manager=method.getManager();
  final PsiSearchHelper helper=manager.getSearchHelper();
  final Project project=manager.getProject();
  final GlobalSearchScope projectScope=GlobalSearchScope.projectScope(project);
  helper.processOverridingMethods(processor,method,projectScope,true);
  if (processor.isFound()) {
    return;
  }
  final MethodReferenceVisitor visitor=new MethodReferenceVisitor(method);
  method.accept(visitor);
  if (!visitor.areReferencesStaticallyAccessible()) {
    return;
  }
  registerMethodError(method);
}
