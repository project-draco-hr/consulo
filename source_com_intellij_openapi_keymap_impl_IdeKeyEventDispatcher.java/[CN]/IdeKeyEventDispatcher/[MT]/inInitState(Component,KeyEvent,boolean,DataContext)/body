{
  KeyStroke originalKeyStroke=KeyStroke.getKeyStrokeForEvent(e);
  KeyStroke keyStroke=getKeyStrokeWithoutMouseModifiers(originalKeyStroke);
  boolean hasSecondStroke=fillActionsList(focusOwner,keyStroke,null,isModalContext);
  if (myActions.size() == 0) {
    if (SystemInfo.isMac) {
      if (e.getID() == KeyEvent.KEY_PRESSED && e.getModifiersEx() == KeyEvent.ALT_DOWN_MASK && hasMnemonicInWindow(focusOwner,e.getKeyCode())) {
        myPressedWasProcessed=true;
        myState=STATE_PROCESSED;
        return false;
      }
    }
    return false;
  }
  if (hasSecondStroke) {
    myFirstKeyStroke=keyStroke;
    ArrayList<Pair<AnAction,KeyStroke>> secondKeyStorkes=new ArrayList<Pair<AnAction,KeyStroke>>();
    for (int i=0; i < myActions.size(); i++) {
      AnAction action=myActions.get(i);
      Shortcut[] shortcuts=action.getShortcutSet().getShortcuts();
      for (int j=0; j < shortcuts.length; j++) {
        Shortcut shortcut=shortcuts[j];
        if (shortcut instanceof KeyboardShortcut) {
          KeyboardShortcut keyShortcut=(KeyboardShortcut)shortcut;
          if (keyShortcut.getFirstKeyStroke().equals(myFirstKeyStroke)) {
            secondKeyStorkes.add(new Pair<AnAction,KeyStroke>(action,keyShortcut.getSecondKeyStroke()));
          }
        }
      }
    }
    Project project=(Project)dataContext.getData(DataConstants.PROJECT);
    StringBuffer message=new StringBuffer();
    message.append(KeyMapBundle.message("prefix.key.pressed.message"));
    message.append(' ');
    for (int i=0; i < secondKeyStorkes.size(); i++) {
      Pair<AnAction,KeyStroke> pair=secondKeyStorkes.get(i);
      if (i > 0)       message.append(", ");
      message.append(pair.getFirst().getTemplatePresentation().getText());
      message.append(" (");
      message.append(KeymapUtil.getKeystrokeText(pair.getSecond()));
      message.append(")");
    }
    WindowManager.getInstance().getStatusBar(project).setInfo(message.toString());
    myState=STATE_WAIT_FOR_SECOND_KEYSTROKE;
    return true;
  }
 else {
    if (processAction(e,dataContext)) {
      return true;
    }
 else {
      return false;
    }
  }
}
