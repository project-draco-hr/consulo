{
  myTree=new Tree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  new LibraryRootsTreeSpeedSearch(myTree);
  myTree.setCellRenderer(new LibraryTreeRenderer());
  myTreeBuilder=new LibraryTableTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),treeStructure);
  myTreePanel.setLayout(new BorderLayout());
  ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(myTree).disableUpDownActions().disableAddAction().setRemoveActionName(ProjectBundle.message("library.detach.action")).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final Object[] selectedElements=getSelectedElements();
      if (selectedElements.length == 0) {
        return;
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          for (          Object selectedElement : selectedElements) {
            if (selectedElement instanceof ItemElement) {
              final ItemElement itemElement=(ItemElement)selectedElement;
              getLibraryEditor().removeRoot(itemElement.getUrl(),itemElement.getRootType());
            }
 else             if (selectedElement instanceof OrderRootTypeElement) {
              final OrderRootType rootType=((OrderRootTypeElement)selectedElement).getOrderRootType();
              final String[] urls=getLibraryEditor().getUrls(rootType);
              for (              String url : urls) {
                getLibraryEditor().removeRoot(url,rootType);
              }
            }
          }
        }
      }
);
      librariesChanged(true);
    }
  }
);
  toolbarDecorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final AnAction[] children=getActions();
      if (children.length == 0)       return;
      final DefaultActionGroup actions=new DefaultActionGroup(children);
      JBPopupFactory.getInstance().createActionGroupPopup(null,actions,DataManager.getInstance().getDataContext(button.getContextComponent()),JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,true).show(button.getPreferredPopupPoint());
    }
    private AnAction[] getActions(){
      List<AnAction> actions=new ArrayList<AnAction>();
      actions.add(new AttachFilesAction(ProjectBundle.message("button.text.attach.files")));
      for (      AttachRootButtonDescriptor descriptor : myDescriptor.createAttachButtons()) {
        actions.add(new AttachItemAction(descriptor,descriptor.getButtonText()));
      }
      return actions.toArray(new AnAction[actions.size()]);
    }
  }
);
  myTreePanel.add(toolbarDecorator.createPanel(),BorderLayout.CENTER);
  ToolbarDecorator.findRemoveButton(myTreePanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final Object[] selectedElements=getSelectedElements();
      for (      Object element : selectedElements) {
        if (element instanceof ItemElement) {
          return true;
        }
        if (element instanceof OrderRootTypeElement && getLibraryEditor().getUrls(((OrderRootTypeElement)element).getOrderRootType()).length > 0) {
          return true;
        }
      }
      return false;
    }
  }
);
  Disposer.register(this,myTreeBuilder);
}
