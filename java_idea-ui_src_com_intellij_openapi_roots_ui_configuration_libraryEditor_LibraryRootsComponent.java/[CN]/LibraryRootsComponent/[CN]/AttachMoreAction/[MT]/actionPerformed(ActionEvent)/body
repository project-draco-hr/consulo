{
  final Ref<Library.ModifiableModel> modelRef=Ref.create(null);
  final NullableComputable<Library.ModifiableModel> computable;
  if (myLibraryEditor instanceof ExistingLibraryEditor) {
    final ExistingLibraryEditor libraryEditor=(ExistingLibraryEditor)myLibraryEditor;
    computable=new NullableComputable<Library.ModifiableModel>(){
      public Library.ModifiableModel compute(){
        if (myTreeBuilder == null) {
          final Library library=libraryEditor.getLibrary();
          final InvocationHandler invocationHandler=Proxy.isProxyClass(library.getClass()) ? Proxy.getInvocationHandler(library) : null;
          final Library realLibrary=invocationHandler instanceof ModuleEditor.ProxyDelegateAccessor ? (Library)((ModuleEditor.ProxyDelegateAccessor)invocationHandler).getDelegate() : library;
          final Module module=realLibrary instanceof LibraryImpl && ((LibraryImpl)realLibrary).isDisposed() ? ((LibraryImpl)realLibrary).getModule() : null;
          if (module != null && module.isDisposed())           return null;
          final Library targetLibrary=module != null ? LibraryUtil.findLibrary(module,realLibrary.getName()) : realLibrary;
          final Library.ModifiableModel model=targetLibrary.getModifiableModel();
          modelRef.set(model);
          return model;
        }
 else {
          return libraryEditor.getModel();
        }
      }
    }
;
  }
 else {
    computable=null;
  }
  final Runnable successRunnable=new Runnable(){
    public void run(){
      if (modelRef.get() != null) {
        modelRef.get().commit();
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myTreeBuilder != null)           myTreeBuilder.queueUpdate();
          if (myProject != null && myLibraryEditor instanceof ExistingLibraryEditor) {
            ModuleStructureConfigurable.getInstance(myProject).fireItemsChangeListener(((ExistingLibraryEditor)myLibraryEditor).getLibrary());
          }
        }
      }
);
    }
  }
;
  final Runnable rejectRunnable=new Runnable(){
    public void run(){
      if (modelRef.get() != null) {
        Disposer.dispose(modelRef.get());
      }
    }
  }
;
  if (myHandlers.length == 1) {
    myHandlers[0].performAttach(myProject,myLibraryEditor,computable).doWhenDone(successRunnable).doWhenRejected(rejectRunnable);
  }
 else {
    final ListPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<LibraryTableAttachHandler>(null,myHandlers){
      @NotNull public String getTextFor(      final LibraryTableAttachHandler handler){
        return handler.getShortName();
      }
      public Icon getIconFor(      final LibraryTableAttachHandler handler){
        return handler.getIcon();
      }
      public PopupStep onChosen(      final LibraryTableAttachHandler handler,      final boolean finalChoice){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            handler.performAttach(myProject,myLibraryEditor,computable).doWhenProcessed(successRunnable).doWhenRejected(rejectRunnable);
          }
        }
);
        return PopupStep.FINAL_CHOICE;
      }
    }
);
    popup.showUnderneathOf(myAttachMoreButton);
  }
}
