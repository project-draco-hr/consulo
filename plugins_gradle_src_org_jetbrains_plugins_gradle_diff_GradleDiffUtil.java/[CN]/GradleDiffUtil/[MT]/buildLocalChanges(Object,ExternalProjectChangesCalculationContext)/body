{
  if (entity instanceof ProjectEntityData) {
    buildLocalChanges((ProjectEntityData)entity,context);
  }
 else {
    GradleUtil.dispatch(entity,new IdeEntityVisitor(){
      @Override public void visit(      @NotNull Project project){
      }
      @Override public void visit(      @NotNull Module module){
        context.register(new ModulePresenceChange(null,module));
        for (        ModuleAwareContentRoot contentRoot : context.getPlatformFacade().getContentRoots(module)) {
          visit(contentRoot);
        }
        for (        OrderEntry entry : context.getPlatformFacade().getOrderEntries(module)) {
          GradleUtil.dispatch(entry,this);
        }
      }
      @Override public void visit(      @NotNull ModuleAwareContentRoot contentRoot){
        context.register(new ContentRootPresenceChange(null,contentRoot));
      }
      @Override public void visit(      @NotNull LibraryOrderEntry libraryDependency){
        context.register(new LibraryDependencyPresenceChange(null,libraryDependency));
      }
      @Override public void visit(      @NotNull ModuleOrderEntry moduleDependency){
        final Module module=moduleDependency.getModule();
        if (module != null) {
          context.register(new ModuleDependencyPresenceChange(null,moduleDependency));
        }
      }
      @Override public void visit(      @NotNull Library library){
        for (        VirtualFile file : library.getFiles(OrderRootType.CLASSES)) {
          JarId jarId=new JarId(context.getPlatformFacade().getLocalFileSystemPath(file),LibraryPathType.BINARY,new LibraryId(ProjectSystemId.IDE,GradleUtil.getLibraryName(library)));
          context.register(new JarPresenceChange(null,jarId));
        }
      }
    }
);
  }
}
