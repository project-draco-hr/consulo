{
  ApplicationInfo appInfo=ApplicationInfo.getInstance();
  myBuildNumber.setText(appInfo.getBuild().asStringWithoutProductCode() + ")");
  final String majorVersion=appInfo.getMajorVersion();
  final String version;
  if (majorVersion != null && majorVersion.trim().length() > 0) {
    final String minorVersion=appInfo.getMinorVersion();
    if (minorVersion != null && minorVersion.trim().length() > 0) {
      version=majorVersion + "." + minorVersion;
    }
 else {
      version=majorVersion + ".0";
    }
  }
 else {
    version=appInfo.getVersionName();
  }
  myVersionNumber.setText(version);
  myNewBuildNumber.setText(myLatestBuild.getNumber().asStringWithoutProductCode() + ")");
  myNewVersionNumber.setText(myLatestBuild.getVersion());
  myUpdateMessageLabel.setBackground(UIUtil.getLabelBackground());
  myScrollPane.setBackground(UIUtil.getLabelBackground());
  myScrollPane.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
  if (myLatestBuild.getMessage() != null) {
    StringBuilder builder=new StringBuilder();
    builder.append("<html><head>").append(UIUtil.getCssFontDeclaration(UIUtil.getLabelFont())).append("</head><body>").append(AbstractUpdateDialog.formatLinks(myLatestBuild.getMessage())).append("</body></html>");
    myUpdateMessageLabel.setText(builder.toString());
    myUpdateMessageLabel.addHyperlinkListener(new BrowserHyperlinkListener());
  }
 else {
    myUpdateMessageLabel.setVisible(false);
  }
  PatchInfo patch=myLatestBuild.findPatchForCurrentBuild();
  if (patch == null) {
    myPatchAvailableLabel.setVisible(false);
    myPatchSizeLabel.setVisible(false);
  }
 else {
    myPatchSizeLabel.setText(patch.getSize() + "MB");
  }
  if (SystemInfo.isMac) {
    myManualCheckLabel.setText("<html><br>To check for new updates manually, use the <b>" + ApplicationNamesInfo.getInstance().getProductName() + " | Check for Updates</b> command.</html>");
  }
  LabelTextReplacingUtil.replaceText(myPanel);
}
