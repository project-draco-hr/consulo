{
  try {
    GitRootWrapper rootWrapper=(GitRootWrapper)myGitRoot.getSelectedItem();
    GitBranch current=GitBranch.current(myProject,rootWrapper.myRoot);
    if (current == null) {
      myCurrentBranchText.setText(GitBundle.getString("merge.no.active.branch"));
    }
 else {
      myCurrentBranchText.setText(current.getName());
    }
    GitSimpleHandler handler=new GitSimpleHandler(myProject,rootWrapper.myRoot,"branch");
    handler.setNoSSH(true);
    handler.setSilent(true);
    handler.addParameters("-a","--no-merged");
    String output=handler.run();
    myBranchChooser.clear();
    for (StringTokenizer lines=new StringTokenizer(output,"\n",false); lines.hasMoreTokens(); ) {
      String branch=lines.nextToken().substring(2);
      myBranchChooser.addElement(branch,false);
    }
  }
 catch (  VcsException e) {
    GitVcs.getInstance(myProject).showErrors(Collections.singletonList(e),GitBundle.getString("merge.retriving.branches"));
  }
}
