{
  super(sourceClass.getProject(),previewUsages);
  this.sourceClass=sourceClass;
  this.newPackageName=newPackageName;
  this.fields=new ArrayList<PsiField>(fields);
  this.methods=new ArrayList<PsiMethod>(methods);
  this.innerClasses=new ArrayList<PsiClass>(innerClasses);
  initializersToMove=calculateInitializersToMove();
  this.newClassName=newClassName;
  delegateFieldName=calculateDelegateFieldName();
  requiresBackpointer=backpointerRequired();
  if (requiresBackpointer) {
    for (    PsiTypeParameter param : sourceClass.getTypeParameters()) {
      typeParams.add(param);
    }
  }
 else {
    final Set<PsiTypeParameter> typeParamSet=new HashSet<PsiTypeParameter>();
    final TypeParametersVisitor visitor=new TypeParametersVisitor(typeParamSet);
    for (    PsiField field : fields) {
      field.accept(visitor);
    }
    for (    PsiMethod method : methods) {
      method.accept(visitor);
    }
    typeParams.addAll(typeParamSet);
  }
}
