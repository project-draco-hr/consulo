{
  final PsiManager psiManager=field.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final Iterable<PsiReference> references=SearchUtils.findAllReferences(field,scope);
  for (  PsiReference reference : references) {
    final PsiReferenceExpression exp=(PsiReferenceExpression)reference.getElement();
    if (isInMovedElement(exp)) {
      continue;
    }
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      final String qualifiedName=StringUtil.getQualifiedName(newPackageName,newClassName);
      final String capitalizedName=StringUtil.capitalize(calculateStrippedName(field));
      final PsiType fieldType=field.getType();
      @NonNls final String getter;
      if (PsiType.BOOLEAN.equals(fieldType)) {
        getter="is" + capitalizedName;
      }
 else {
        getter="get" + capitalizedName;
      }
      @NonNls final String setter="set" + capitalizedName;
      final boolean isPublic=field.hasModifierProperty(PsiModifier.PUBLIC);
      if (RefactoringUtil.isPlusPlusOrMinusMinus(exp)) {
        usages.add(new ReplaceStaticVariableIncrementDecrement(exp,qualifiedName,setter,getter,isPublic));
        if (!isPublic) {
          fieldsRequiringSetters.add(field);
        }
      }
 else       if (RefactoringUtil.isAssignmentLHS(exp)) {
        usages.add(new ReplaceStaticVariableAssignment(exp,qualifiedName,setter,getter,isPublic));
        if (!isPublic) {
          fieldsRequiringSetters.add(field);
        }
      }
 else {
        usages.add(new ReplaceStaticVariableAccess(exp,qualifiedName,getter,isPublic));
      }
      if (!isPublic) {
        fieldsRequiringGetters.add(field);
      }
    }
 else {
      final String capitalizedName=StringUtil.capitalize(calculateStrippedName(field));
      final PsiType fieldType=field.getType();
      @NonNls final String getter;
      if (PsiType.BOOLEAN.equals(fieldType)) {
        getter="is" + capitalizedName;
      }
 else {
        getter="get" + capitalizedName;
      }
      @NonNls final String setter="set" + capitalizedName;
      if (RefactoringUtil.isPlusPlusOrMinusMinus(exp)) {
        usages.add(new ReplaceInstanceVariableIncrementDecrement(exp,delegateFieldName,setter,getter));
        fieldsRequiringSetters.add(field);
      }
 else       if (RefactoringUtil.isAssignmentLHS(exp)) {
        final PsiAssignmentExpression assignment=PsiTreeUtil.getParentOfType(exp,PsiAssignmentExpression.class);
        usages.add(new ReplaceInstanceVariableAssignment(assignment,delegateFieldName,setter,getter));
        fieldsRequiringSetters.add(field);
      }
 else {
        usages.add(new ReplaceInstanceVariableAccess(exp,delegateFieldName,getter));
      }
      fieldsRequiringGetters.add(field);
    }
  }
}
