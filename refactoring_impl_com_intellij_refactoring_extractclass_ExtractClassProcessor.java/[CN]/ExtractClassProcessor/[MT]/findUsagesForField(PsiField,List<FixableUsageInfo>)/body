{
  final PsiManager psiManager=field.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  for (  PsiReference reference : ReferencesSearch.search(field,scope)) {
    final PsiReferenceExpression exp=(PsiReferenceExpression)reference.getElement();
    if (isInMovedElement(exp)) {
      continue;
    }
    final String qualifiedName=StringUtil.getQualifiedName(newPackageName,newClassName);
    @NonNls final String getter=PropertyUtil.suggestGetterName(myProject,field);
    @NonNls final String setter=PropertyUtil.suggestSetterName(myProject,field);
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      final boolean isPublic=field.hasModifierProperty(PsiModifier.PUBLIC);
      if (RefactoringUtil.isPlusPlusOrMinusMinus(exp)) {
        usages.add(new ReplaceStaticVariableIncrementDecrement(exp,qualifiedName,setter,getter,isPublic));
        if (!isPublic) {
          fieldsRequiringSetters.add(field);
        }
      }
 else       if (RefactoringUtil.isAssignmentLHS(exp)) {
        usages.add(new ReplaceStaticVariableAssignment(exp,qualifiedName,setter,getter,isPublic));
        if (!isPublic) {
          fieldsRequiringSetters.add(field);
        }
      }
 else {
        usages.add(new ReplaceStaticVariableAccess(exp,qualifiedName,getter,isPublic));
      }
      if (!isPublic) {
        fieldsRequiringGetters.add(field);
      }
    }
 else {
      if (RefactoringUtil.isPlusPlusOrMinusMinus(exp)) {
        usages.add(new ReplaceInstanceVariableIncrementDecrement(exp,delegateFieldName,setter,getter));
        fieldsRequiringSetters.add(field);
      }
 else       if (RefactoringUtil.isAssignmentLHS(exp)) {
        final PsiAssignmentExpression assignment=PsiTreeUtil.getParentOfType(exp,PsiAssignmentExpression.class);
        usages.add(new ReplaceInstanceVariableAssignment(assignment,delegateFieldName,setter,getter));
        fieldsRequiringSetters.add(field);
      }
 else {
        usages.add(new ReplaceInstanceVariableAccess(exp,delegateFieldName,getter));
      }
      fieldsRequiringGetters.add(field);
    }
  }
}
