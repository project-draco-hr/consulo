{
  final PsiManager psiManager=field.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final String qualifiedName=StringUtil.getQualifiedName(newPackageName,newClassName);
  @NonNls final String getter=PropertyUtil.suggestGetterName(myProject,field);
  @NonNls final String setter=PropertyUtil.suggestSetterName(myProject,field);
  final boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
  for (  PsiReference reference : ReferencesSearch.search(field,scope)) {
    final PsiElement element=reference.getElement();
    if (isInMovedElement(element)) {
      continue;
    }
    if (element instanceof PsiReferenceExpression) {
      final PsiReferenceExpression exp=(PsiReferenceExpression)element;
      if (RefactoringUtil.isPlusPlusOrMinusMinus(exp)) {
        usages.add(isStatic ? new ReplaceStaticVariableIncrementDecrement(exp,qualifiedName) : new ReplaceInstanceVariableIncrementDecrement(exp,delegateFieldName,setter,getter));
      }
 else       if (RefactoringUtil.isAssignmentLHS(exp)) {
        usages.add(isStatic ? new ReplaceStaticVariableAssignment(exp,qualifiedName) : new ReplaceInstanceVariableAssignment(PsiTreeUtil.getParentOfType(exp,PsiAssignmentExpression.class),delegateFieldName,setter,getter));
      }
 else {
        usages.add(isStatic ? new ReplaceStaticVariableAccess(exp,qualifiedName) : new ReplaceInstanceVariableAccess(exp,delegateFieldName,getter));
      }
      if (!isStatic) {
        delegationRequired=true;
      }
    }
 else     if (element instanceof PsiDocTagValue) {
      usages.add(new BindJavadocReference(element,qualifiedName,field.getName()));
    }
  }
}
