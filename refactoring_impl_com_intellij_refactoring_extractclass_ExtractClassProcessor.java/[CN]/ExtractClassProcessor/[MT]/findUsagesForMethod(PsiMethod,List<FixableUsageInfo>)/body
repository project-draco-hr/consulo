{
  final PsiManager psiManager=method.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final Iterable<PsiReference> calls=SearchUtils.findAllReferences(method,scope);
  for (  PsiReference reference : calls) {
    final PsiElement referenceElement=reference.getElement();
    final PsiElement parent=referenceElement.getParent();
    if (parent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression call=(PsiMethodCallExpression)parent;
      if (isInMovedElement(call)) {
        continue;
      }
      final PsiReferenceExpression methodExpression=call.getMethodExpression();
      final PsiExpression qualifier=methodExpression.getQualifierExpression();
      if (qualifier == null || qualifier instanceof PsiThisExpression) {
        usages.add(new ReplaceThisCallWithDelegateCall(call,delegateFieldName));
      }
      methodsRequiringDelegation.add(method);
    }
  }
  if (methodsRequiringDelegation.contains(method) || MethodInheritanceUtils.hasSiblingMethods(method)) {
    usages.add(new MakeMethodDelegate(method,delegateFieldName));
  }
 else {
    usages.add(new RemoveMethod(method));
  }
}
