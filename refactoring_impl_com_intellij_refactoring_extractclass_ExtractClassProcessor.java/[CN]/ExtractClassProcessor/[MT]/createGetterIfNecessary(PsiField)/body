{
  @NonNls final StringBuilder out=new StringBuilder();
  final PsiType type=field.getType();
  final String typeText=type.getCanonicalText();
  final String name=calculateStrippedName(field);
  final String capitalizedName=StringUtil.capitalize(name);
  @NonNls final String getterName;
  if (PsiType.BOOLEAN.equals(type)) {
    getterName="is" + capitalizedName;
  }
 else {
    getterName="get" + capitalizedName;
  }
  final PsiMethod[] methods=sourceClass.getMethods();
  for (  PsiMethod method : methods) {
    final String methodName=method.getName();
    if (getterName.equals(methodName) && method.getParameterList().getParameters().length == 0) {
      return;
    }
  }
  out.append("\tpublic ");
  if (field.hasModifierProperty(PsiModifier.STATIC)) {
    out.append("\tstatic ");
  }
  out.append(typeText);
  out.append(' ');
  out.append(getterName);
  out.append("()\n");
  out.append("\t{\n");
  final String fieldName=field.getName();
  out.append("\t\treturn " + fieldName + ";\n");
  out.append("\t}\n");
  out.append('\n');
  final PsiManager manager=sourceClass.getManager();
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
  try {
    final String fieldString=out.toString();
    final PsiMethod method=elementFactory.createMethodFromText(fieldString,sourceClass);
    final PsiElement newMethod=sourceClass.add(method);
    codeStyleManager.reformat(newMethod);
  }
 catch (  IncorrectOperationException e) {
    logger.error(e);
  }
}
