{
  final PsiManager psiManager=innerClass.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final Iterable<PsiReference> calls=ReferencesSearch.search(innerClass,scope);
  final String innerName=innerClass.getQualifiedName();
  final String newInnerClassName=StringUtil.getQualifiedName(newPackageName,newClassName) + innerName.substring(sourceClass.getQualifiedName().length());
  boolean hasExternalReference=false;
  for (  PsiReference reference : calls) {
    final PsiElement referenceElement=reference.getElement();
    if (referenceElement instanceof PsiJavaCodeReferenceElement) {
      if (!isInMovedElement(referenceElement)) {
        usages.add(new ReplaceClassReference((PsiJavaCodeReferenceElement)referenceElement,newInnerClassName));
        hasExternalReference=true;
      }
    }
  }
  if (hasExternalReference) {
    innerClassesToMakePublic.add(innerClass);
  }
}
