{
  try {
    final NecessaryAccessorsVisitor visitor=new NecessaryAccessorsVisitor();
    for (    PsiMethod method : methods) {
      method.accept(visitor);
    }
    for (    PsiClass innerClass : innerClasses) {
      innerClass.accept(visitor);
    }
    final Set<PsiField> fieldsNeedingGetter=visitor.getFieldsNeedingGetter();
    for (    PsiField field : fieldsNeedingGetter) {
      createGetterIfNecessary(field);
    }
    final Set<PsiField> fieldsNeedingSetter=visitor.getFieldsNeedingSetter();
    for (    PsiField field : fieldsNeedingSetter) {
      createSetterIfNecessary(field);
    }
    final Set<PsiMethod> methodsNeedingPublic=visitor.getMethodsNeedingPublic();
    for (    PsiMethod method : methodsNeedingPublic) {
      if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {
        method.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
      }
      final PsiMethod[] superMethods=method.findSuperMethods();
      for (      PsiMethod superMethod : superMethods) {
        final PsiClass containingSuperClass=superMethod.getContainingClass();
        if (!containingSuperClass.isInterface() && !superMethod.hasModifierProperty(PsiModifier.PUBLIC)) {
          superMethod.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    logger.error(e);
  }
}
