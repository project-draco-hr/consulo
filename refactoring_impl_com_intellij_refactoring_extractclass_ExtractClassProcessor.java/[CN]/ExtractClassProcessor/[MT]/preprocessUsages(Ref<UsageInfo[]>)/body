{
  final List<String> conflicts=new ArrayList<String>();
  final Project project=sourceClass.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass existingClass=JavaPsiFacade.getInstance(project).findClass(StringUtil.getQualifiedName(newPackageName,newClassName),scope);
  if (existingClass != null) {
    conflicts.add(RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("there.already.exists.a.class.with.the.chosen.name"));
  }
  conflicts.addAll(calculateInitializersConflicts());
  final NecessaryAccessorsVisitor visitor=new NecessaryAccessorsVisitor();
  for (  PsiMethod method : methods) {
    method.accept(visitor);
  }
  for (  PsiClass innerClass : innerClasses) {
    innerClass.accept(visitor);
  }
  final Set<PsiField> fieldsNeedingGetter=visitor.getFieldsNeedingGetter();
  for (  PsiField field : fieldsNeedingGetter) {
    conflicts.add("Field \'" + field.getName() + "\' needs getter");
  }
  final Set<PsiField> fieldsNeedingSetter=visitor.getFieldsNeedingSetter();
  for (  PsiField field : fieldsNeedingSetter) {
    conflicts.add("Field \'" + field.getName() + "\' needs getter");
  }
  return showConflicts(conflicts);
}
