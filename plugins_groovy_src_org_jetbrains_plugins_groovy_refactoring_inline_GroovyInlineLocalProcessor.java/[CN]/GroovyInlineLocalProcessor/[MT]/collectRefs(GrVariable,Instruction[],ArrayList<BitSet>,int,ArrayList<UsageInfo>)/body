{
  for (  Instruction instruction : flow) {
    final PsiElement element=instruction.getElement();
    if (instruction instanceof ReadWriteVariableInstruction) {
      if (((ReadWriteVariableInstruction)instruction).isWrite())       continue;
      if (element instanceof GrVariable && element != variable)       continue;
      if (!(element instanceof GrReferenceExpression))       continue;
      final GrReferenceExpression ref=(GrReferenceExpression)element;
      if (ref.isQualified() || ref.resolve() != variable)       continue;
      final BitSet prev=writes.get(instruction.num());
      if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) {
        toInline.add(new UsageInfo(ref));
      }
 else       if (writeInstructionNumber == -1 && prev.cardinality() == 0) {
        toInline.add(new ClosureUsage(ref));
      }
    }
 else     if (element instanceof GrClosableBlock) {
      final BitSet prev=writes.get(instruction.num());
      if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) {
        final Instruction[] closureFlow=((GrClosableBlock)element).getControlFlow();
        collectRefs(variable,closureFlow,ControlFlowUtils.inferWriteAccessMap(closureFlow,variable),-1,toInline);
      }
    }
 else     if (element instanceof GrAnonymousClassDefinition) {
      final BitSet prev=writes.get(instruction.num());
      if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) {
        ((GrAnonymousClassDefinition)element).acceptChildren(new GroovyRecursiveElementVisitor(){
          @Override public void visitField(          GrField field){
            GrExpression initializer=field.getInitializerGroovy();
            if (initializer != null) {
              Instruction[] flow=new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer);
              collectRefs(variable,flow,ControlFlowUtils.inferWriteAccessMap(flow,variable),-1,toInline);
            }
          }
          @Override public void visitMethod(          GrMethod method){
            GrOpenBlock block=method.getBlock();
            if (block != null) {
              Instruction[] flow=block.getControlFlow();
              collectRefs(variable,flow,ControlFlowUtils.inferWriteAccessMap(flow,variable),-1,toInline);
            }
          }
          @Override public void visitClassInitializer(          GrClassInitializer initializer){
            GrOpenBlock block=initializer.getBlock();
            Instruction[] flow=block.getControlFlow();
            collectRefs(variable,flow,ControlFlowUtils.inferWriteAccessMap(flow,variable),-1,toInline);
          }
        }
);
      }
    }
  }
}
