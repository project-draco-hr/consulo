{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  final PsiTypeParameter[] typeParameters=myPsiClass.getTypeParameters();
  final PsiSubstitutor psiSubstitutor=inferTypeArguments();
  final PsiJavaCodeReferenceElement reference=myNewExpression.getClassOrAnonymousClassReference();
  LOG.assertTrue(reference != null,myNewExpression);
  final PsiReferenceParameterList parameterList=reference.getParameterList();
  LOG.assertTrue(parameterList != null,myNewExpression);
  PsiTypeElement[] elements=parameterList.getTypeParameterElements();
  for (int i=elements.length - 1; i >= 0; i--) {
    PsiTypeElement typeElement=elements[i];
    final PsiType typeArg=psiSubstitutor.substitute(typeParameters[i]);
    typeElement.replace(JavaPsiFacade.getElementFactory(project).createTypeElement(typeArg));
  }
}
