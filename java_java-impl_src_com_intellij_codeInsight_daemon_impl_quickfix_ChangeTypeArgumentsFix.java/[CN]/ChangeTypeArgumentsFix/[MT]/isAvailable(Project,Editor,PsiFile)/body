{
  final PsiTypeParameter[] typeParameters=myPsiClass.getTypeParameters();
  if (typeParameters.length > 0) {
    if (myNewExpression != null && myNewExpression.isValid() && myNewExpression.getArgumentList() != null) {
      final PsiJavaCodeReferenceElement reference=myNewExpression.getClassOrAnonymousClassReference();
      if (reference != null) {
        final PsiReferenceParameterList parameterList=reference.getParameterList();
        if (parameterList != null) {
          final PsiSubstitutor substitutor=inferTypeArguments();
          final PsiParameter[] parameters=myTargetMethod.getParameterList().getParameters();
          if (parameters.length != myExpressions.length)           return false;
          for (int i=0, length=parameters.length; i < length; i++) {
            PsiParameter parameter=parameters[i];
            final PsiType expectedType=substitutor.substitute(parameter.getType());
            if (!myExpressions[i].isValid())             return false;
            final PsiType actualType=myExpressions[i].getType();
            if (expectedType == null || actualType == null || !TypeConversionUtil.isAssignable(expectedType,actualType))             return false;
          }
          return true;
        }
      }
    }
  }
  return false;
}
