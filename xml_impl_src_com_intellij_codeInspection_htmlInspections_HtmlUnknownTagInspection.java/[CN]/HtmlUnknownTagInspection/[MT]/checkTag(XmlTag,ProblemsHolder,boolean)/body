{
  if (tag.getUserData(DO_NOT_VALIDATE_KEY) == null) {
    final XmlElementDescriptor descriptor=tag.getDescriptor();
    if (tag instanceof HtmlTag && (descriptor instanceof AnyXmlElementDescriptor || descriptor == null)) {
      final String name=tag.getName();
      if (!isCustomValuesEnabled() || !isCustomValue(name)) {
        final AddCustomTagOrAttributeIntentionAction action=new AddCustomTagOrAttributeIntentionAction(getShortName(),name,XmlEntitiesInspection.UNKNOWN_TAG);
        final String message=XmlErrorMessages.message("unknown.html.tag",name);
        final PsiElement startTagName=XmlTagUtil.getStartTagNameElement(tag);
        final PsiElement endTagName=XmlTagUtil.getEndTagNameElement(tag);
        List<LocalQuickFix> quickfixes=new ArrayList<LocalQuickFix>();
        quickfixes.add(action);
        if (isOnTheFly) {
          quickfixes.add(new CreateNSDeclarationIntentionFix(startTagName,""));
        }
        if (HtmlUtil.isHtml5Tag(name) && !HtmlUtil.hasNonHtml5Doctype(tag)) {
          quickfixes.add(new SwitchToHtml5Action());
        }
        ProblemHighlightType highlightType=tag.getContainingFile().getContext() == null ? ProblemHighlightType.GENERIC_ERROR_OR_WARNING : ProblemHighlightType.INFORMATION;
        holder.registerProblem(startTagName,message,highlightType,quickfixes.toArray(new LocalQuickFix[quickfixes.size()]));
        if (endTagName != null) {
          holder.registerProblem(endTagName,message,highlightType,quickfixes.toArray(new LocalQuickFix[quickfixes.size()]));
        }
      }
    }
  }
}
