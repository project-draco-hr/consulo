{
  recalcMarkSpots();
  final List<MarkSpot> nearestMarkSpots=getNearestMarkSpots(e,width);
  Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
  for (  MarkSpot markSpot : nearestMarkSpots) {
    highlighters.addAll(Arrays.asList(markSpot.highlighters));
  }
  LineTooltipRenderer bigRenderer=null;
  List<HighlightInfo> infos=new SmartList<HighlightInfo>();
  Collection<String> tooltips=new THashSet<String>();
  for (  RangeHighlighter marker : highlighters) {
    final Object tooltipObject=marker.getErrorStripeTooltip();
    if (tooltipObject == null)     continue;
    if (tooltipObject instanceof HighlightInfo) {
      HighlightInfo info=(HighlightInfo)tooltipObject;
      if (info.toolTip != null && tooltips.add(info.toolTip)) {
        infos.add(info);
      }
    }
 else {
      final String text=tooltipObject.toString();
      if (tooltips.add(text)) {
        if (bigRenderer == null) {
          bigRenderer=new LineTooltipRenderer(text);
        }
 else {
          bigRenderer.addBelow(text);
        }
      }
    }
  }
  if (!infos.isEmpty()) {
    Collections.sort(infos,new Comparator<HighlightInfo>(){
      public int compare(      final HighlightInfo o1,      final HighlightInfo o2){
        int i=SeverityRegistrar.getInstance(myEditor.getProject()).compare(o2.getSeverity(),o1.getSeverity());
        if (i != 0)         return i;
        return o1.toolTip.compareTo(o2.toolTip);
      }
    }
);
    final HighlightInfoComposite composite=new HighlightInfoComposite(infos);
    if (bigRenderer == null) {
      bigRenderer=new LineTooltipRenderer(composite.toolTip);
    }
 else {
      final LineTooltipRenderer renderer=new LineTooltipRenderer(composite.toolTip);
      renderer.addBelow(bigRenderer.getText());
      bigRenderer=renderer;
    }
  }
  if (bigRenderer != null) {
    showTooltip(e,bigRenderer);
    return true;
  }
  return false;
}
