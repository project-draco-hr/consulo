{
  super.visitNewExpression(expression);
  final PsiType type=expression.getType();
  if (!TypeUtils.isJavaLangString(type)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length > 1) {
    return;
  }
  if (arguments.length == 1) {
    final PsiExpression argument=arguments[0];
    final PsiType parameterType=argument.getType();
    if (!TypeUtils.isJavaLangString(parameterType)) {
      return;
    }
    if (ignoreSubstringArguments) {
      if (argument instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)argument;
        final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
        final PsiElement element=methodExpression.resolve();
        if (element instanceof PsiMethod) {
          final PsiMethod method=(PsiMethod)element;
          final PsiClass aClass=method.getContainingClass();
          final String className=aClass.getQualifiedName();
          @NonNls final String methodName=method.getName();
          if ("java.lang.String".equals(className) && methodName.equals("substring")) {
            return;
          }
        }
      }
    }
  }
  registerError(expression);
}
