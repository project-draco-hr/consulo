{
  final int methodScopeOrder=getScopeOrder(method);
  final int classScopeOrder=getScopeOrder(aClass);
  final PsiClass containingClass=method.getContainingClass();
  final int containingClassScopeOrder=getScopeOrder(containingClass);
  if (methodScopeOrder <= classScopeOrder || containingClassScopeOrder <= classScopeOrder) {
    return false;
  }
  final PsiMethod[] superMethods=method.findSuperMethods();
  for (  PsiMethod superMethod : superMethods) {
    if (!isLessRestrictiveScope(superMethod,aClass)) {
      return false;
    }
  }
  return true;
}
