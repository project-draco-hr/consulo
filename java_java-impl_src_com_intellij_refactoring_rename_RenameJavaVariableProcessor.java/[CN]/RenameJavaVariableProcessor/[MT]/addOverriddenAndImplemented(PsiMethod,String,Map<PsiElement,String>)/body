{
  allRenames.put(methodPrototype,newName);
  PsiMethod[] methods=methodPrototype.findDeepestSuperMethods();
  if (methods.length == 0) {
    methods=new PsiMethod[]{methodPrototype};
  }
  for (  PsiMethod method : methods) {
    OverridingMethodsSearch.search(method).forEach(new Processor<PsiMethod>(){
      public boolean process(      PsiMethod psiMethod){
        RenameProcessor.assertNonCompileElement(psiMethod);
        allRenames.put(psiMethod,newName);
        return true;
      }
    }
);
    allRenames.put(method,newName);
  }
}
