{
  final OutputToGeneralTestEventsConverter outputConsumer=consoleProperties instanceof SMCustomMessagesParsing ? ((SMCustomMessagesParsing)consoleProperties).createTestEventsConverter(testFrameworkName,consoleProperties) : new OutputToGeneralTestEventsConverter(testFrameworkName,consoleProperties);
  final GeneralToSMTRunnerEventsConvertor eventsProcessor=new GeneralToSMTRunnerEventsConvertor(resultsViewer.getTestsRootNode(),testFrameworkName);
  if (locator != null) {
    eventsProcessor.setLocator(locator);
  }
  final SMTRunnerUIActionsHandler uiActionsHandler=new SMTRunnerUIActionsHandler(consoleProperties);
  final SMTRunnerNotificationsHandler notifierHandler=new SMTRunnerNotificationsHandler(consoleProperties);
  outputConsumer.setProcessor(eventsProcessor);
  eventsProcessor.addEventsListener(resultsViewer);
  resultsViewer.addEventsListener(uiActionsHandler);
  eventsProcessor.addEventsListener(statisticsPane.createTestEventsListener());
  eventsProcessor.addEventsListener(notifierHandler);
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      outputConsumer.flushBufferBeforeTerminating();
      eventsProcessor.onFinishTesting();
      Disposer.dispose(eventsProcessor);
      Disposer.dispose(outputConsumer);
    }
    @Override public void startNotified(    final ProcessEvent event){
      eventsProcessor.onStartTesting();
    }
    @Override public void processWillTerminate(    ProcessEvent event,    boolean willBeDestroyed){
    }
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      outputConsumer.process(event.getText(),outputType);
    }
  }
);
  return processHandler;
}
