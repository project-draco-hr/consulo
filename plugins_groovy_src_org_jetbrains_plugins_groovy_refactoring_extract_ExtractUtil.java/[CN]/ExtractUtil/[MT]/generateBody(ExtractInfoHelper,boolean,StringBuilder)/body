{
  VariableInfo[] outputInfos=helper.getOutputVariableInfos();
  ParameterInfo[] infos=helper.getParameterInfos();
  Set<String> declaredVars=new HashSet<String>();
  for (  ParameterInfo info : infos) {
    declaredVars.add(info.getName());
  }
  for (  VariableInfo info : mustAddVariableDeclaration(helper.getStatements(),outputInfos)) {
    declaredVars.add(info.getName());
  }
  List<VariableInfo> genDecl=new ArrayList<VariableInfo>();
  final Collection<GrVariable> outside=collectUsedLocalVarsOrParamsDeclaredOutside(helper.getStatements());
  for (  final GrVariable variable : outside) {
    if (!declaredVars.contains(variable.getName())) {
      genDecl.add(new VariableInfo(){
        @NotNull @Override public String getName(){
          return variable.getName();
        }
        @Override public PsiType getType(){
          return variable.getDeclaredType();
        }
      }
);
    }
  }
  final List<GrStatement> statements=generateVarDeclarations(genDecl,helper.getProject(),null);
  for (  GrStatement statement : statements) {
    buffer.append(statement.getText()).append('\n');
  }
  if (!isSingleExpression(helper.getStatements())) {
    for (    PsiElement element : helper.getInnerElements()) {
      buffer.append(element.getText());
    }
    if (!isVoid && outputInfos.length > 0) {
      buffer.append("\n return ");
      if (outputInfos.length > 1)       buffer.append('[');
      for (      VariableInfo info : outputInfos) {
        buffer.append(info.getName()).append(", ");
      }
      buffer.delete(buffer.length() - 2,buffer.length());
      if (outputInfos.length > 1)       buffer.append(']');
    }
  }
 else {
    GrExpression expr=(GrExpression)PsiUtil.skipParentheses(helper.getStatements()[0],false);
    boolean addReturn=!isVoid && expr != null && expr.getType() != null && expr.getType() != PsiType.VOID;
    if (addReturn) {
      buffer.append("return ");
      expr=ApplicationStatementUtil.convertToMethodCallExpression(expr);
      buffer.append(expr.getText());
    }
 else {
      buffer.append(expr != null ? expr.getText() : "");
    }
  }
}
