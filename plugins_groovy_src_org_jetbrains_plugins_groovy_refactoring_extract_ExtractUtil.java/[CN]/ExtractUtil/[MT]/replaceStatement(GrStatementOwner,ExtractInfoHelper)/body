{
  GrStatement realStatement;
  if (declarationOwner != null && !isSingleExpression(helper.getStatements()) && helper.getStringPartInfo() == null) {
    final GrStatement[] newStatement=createResultStatement(helper);
    final GrStatement[] statements=helper.getStatements();
    LOG.assertTrue(statements.length > 0);
    realStatement=null;
    for (    GrStatement statement : newStatement) {
      realStatement=declarationOwner.addStatementBefore(statement,statements[0]);
      JavaCodeStyleManager.getInstance(realStatement.getProject()).shortenClassReferences(realStatement);
    }
    LOG.assertTrue(realStatement != null);
    removeOldStatements(declarationOwner,helper);
    PsiImplUtil.removeNewLineAfter(realStatement);
  }
 else {
    GrExpression oldExpr;
    if (helper.getStringPartInfo() != null) {
      oldExpr=GrIntroduceHandlerBase.processLiteral(helper.getName(),helper.getStringPartInfo(),helper.getProject());
    }
 else {
      oldExpr=(GrExpression)helper.getStatements()[0];
    }
    GrExpression methodCall=createMethodCall(helper);
    realStatement=oldExpr.replaceWithExpression(methodCall,true);
    JavaCodeStyleManager.getInstance(realStatement.getProject()).shortenClassReferences(realStatement);
  }
  return realStatement;
}
