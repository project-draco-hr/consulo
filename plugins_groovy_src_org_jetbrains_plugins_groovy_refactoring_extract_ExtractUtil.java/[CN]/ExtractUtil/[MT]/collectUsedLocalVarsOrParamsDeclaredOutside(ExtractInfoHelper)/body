{
  final Collection<GrVariable> result=new HashSet<GrVariable>();
  final TextRange range=getRangeOfRefactoring(helper);
  final int start=range.getStartOffset();
  final int end=range.getEndOffset();
  final GroovyRecursiveElementVisitor visitor=new GroovyRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    GrReferenceExpression ref){
      final PsiElement resolved=ref.resolve();
      if ((resolved instanceof GrParameter || GroovyRefactoringUtil.isLocalVariable(resolved)) && resolved.isPhysical()) {
        final int offset=resolved.getTextRange().getStartOffset();
        if (offset < start || end <= offset) {
          result.add((GrVariable)resolved);
        }
      }
    }
  }
;
  final GrStatement[] statements=helper.getStatements();
  for (  GrStatement statement : statements) {
    statement.accept(visitor);
  }
  return result;
}
