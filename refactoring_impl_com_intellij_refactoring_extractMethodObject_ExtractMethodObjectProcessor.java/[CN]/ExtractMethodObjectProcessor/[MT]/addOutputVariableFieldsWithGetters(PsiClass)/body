{
  final Map<String,String> var2FieldNames=new HashMap<String,String>();
  final PsiVariable[] outputVariables=myExtractProcessor.getOutputVariables();
  Arrays.sort(outputVariables,new Comparator<PsiVariable>(){
    public int compare(    final PsiVariable o1,    final PsiVariable o2){
      return o1.getTextOffset() - o2.getTextOffset();
    }
  }
);
  for (  PsiVariable var : outputVariables) {
    final String name=var.getName();
    LOG.assertTrue(name != null);
    if (!myExtractProcessor.getInputVariables().contains(var)) {
      final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(getMethod().getProject());
      final String fieldName=styleManager.suggestVariableName(VariableKind.FIELD,name,null,var.getType()).names[0];
      var2FieldNames.put(name,fieldName);
      innerClass.add(myElementFactory.createField(fieldName,var.getType()));
    }
    final PsiField field=PropertyUtil.findPropertyField(myProject,innerClass,name,false);
    LOG.assertTrue(field != null);
    innerClass.add(PropertyUtil.generateGetterPrototype(field));
  }
  PsiParameter[] params=getMethod().getParameterList().getParameters();
  ParameterInfo[] infos=new ParameterInfo[params.length];
  for (int i=0; i < params.length; i++) {
    PsiParameter param=params[i];
    infos[i]=new ParameterInfo(i,param.getName(),param.getType());
  }
  ChangeSignatureProcessor cp=new ChangeSignatureProcessor(myProject,getMethod(),false,null,getMethod().getName(),new PsiImmediateClassType(innerClass,PsiSubstitutor.EMPTY),infos);
  cp.run();
  final PsiCodeBlock body=getMethod().getBody();
  LOG.assertTrue(body != null);
  final Map<PsiStatement,PsiStatement> replacementMap=new LinkedHashMap<PsiStatement,PsiStatement>();
  body.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReturnStatement(    final PsiReturnStatement statement){
      super.visitReturnStatement(statement);
      try {
        replacementMap.put(statement,myElementFactory.createStatementFromText("return this;",statement));
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    @Override public void visitDeclarationStatement(    final PsiDeclarationStatement statement){
      super.visitDeclarationStatement(statement);
      final PsiElement[] declaredElements=statement.getDeclaredElements();
      for (      PsiElement declaredElement : declaredElements) {
        if (declaredElement instanceof PsiVariable) {
          for (          PsiVariable variable : outputVariables) {
            PsiLocalVariable var=(PsiLocalVariable)declaredElement;
            if (Comparing.strEqual(var.getName(),variable.getName())) {
              final PsiExpression initializer=var.getInitializer();
              try {
                if (initializer == null) {
                  replacementMap.put(statement,null);
                }
 else {
                  replacementMap.put(statement,myElementFactory.createStatementFromText(var2FieldNames.get(var.getName()) + " = " + initializer.getText()+ ";",statement));
                }
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
          }
        }
      }
    }
  }
);
  for (  PsiStatement statement : replacementMap.keySet()) {
    final PsiStatement replacement=replacementMap.get(statement);
    if (replacement != null) {
      statement.replace(replacement);
    }
 else {
      statement.delete();
    }
  }
}
