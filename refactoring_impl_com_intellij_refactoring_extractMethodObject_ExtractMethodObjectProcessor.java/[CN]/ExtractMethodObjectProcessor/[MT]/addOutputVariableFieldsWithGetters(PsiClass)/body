{
  final Map<String,String> var2FieldNames=new HashMap<String,String>();
  final PsiVariable[] outputVariables=myExtractProcessor.getOutputVariables();
  for (int i=0; i < outputVariables.length; i++) {
    final PsiVariable var=outputVariables[i];
    final PsiField outputField=myOutputFields[i];
    final String name=var.getName();
    LOG.assertTrue(name != null);
    if (outputField != null) {
      var2FieldNames.put(name,outputField.getName());
      innerClass.add(outputField);
    }
    final PsiField field=PropertyUtil.findPropertyField(myProject,innerClass,name,false);
    LOG.assertTrue(field != null,"i:" + i + "; output variables: "+ Arrays.toString(outputVariables)+ "; parameters: "+ Arrays.toString(getMethod().getParameterList().getParameters())+ "; output field: "+ outputField);
    innerClass.add(PropertyUtil.generateGetterPrototype(field));
  }
  PsiParameter[] params=getMethod().getParameterList().getParameters();
  ParameterInfoImpl[] infos=new ParameterInfoImpl[params.length];
  for (int i=0; i < params.length; i++) {
    PsiParameter param=params[i];
    infos[i]=new ParameterInfoImpl(i,param.getName(),param.getType());
  }
  ChangeSignatureProcessor cp=new ChangeSignatureProcessor(myProject,getMethod(),false,null,getMethod().getName(),new PsiImmediateClassType(innerClass,PsiSubstitutor.EMPTY),infos);
  cp.run();
  final PsiCodeBlock body=getMethod().getBody();
  LOG.assertTrue(body != null);
  final List<PsiLocalVariable> vars=new ArrayList<PsiLocalVariable>();
  final Map<PsiElement,PsiElement> replacementMap=new LinkedHashMap<PsiElement,PsiElement>();
  body.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReturnStatement(    final PsiReturnStatement statement){
      super.visitReturnStatement(statement);
      try {
        replacementMap.put(statement,myElementFactory.createStatementFromText("return this;",statement));
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    @Override public void visitDeclarationStatement(    final PsiDeclarationStatement statement){
      super.visitDeclarationStatement(statement);
      final PsiElement[] declaredElements=statement.getDeclaredElements();
      for (      PsiElement declaredElement : declaredElements) {
        if (declaredElement instanceof PsiVariable) {
          for (          PsiVariable variable : outputVariables) {
            PsiLocalVariable var=(PsiLocalVariable)declaredElement;
            if (Comparing.strEqual(var.getName(),variable.getName())) {
              final PsiExpression initializer=var.getInitializer();
              if (initializer == null) {
                replacementMap.put(statement,null);
              }
 else {
                replacementMap.put(var,var);
              }
            }
          }
        }
      }
    }
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement resolved=expression.resolve();
      if (resolved instanceof PsiLocalVariable) {
        final String var=((PsiLocalVariable)resolved).getName();
        for (        PsiVariable variable : outputVariables) {
          if (Comparing.strEqual(variable.getName(),var)) {
            vars.add((PsiLocalVariable)resolved);
            break;
          }
        }
      }
    }
  }
);
  for (  PsiLocalVariable var : vars) {
    final String fieldName=var2FieldNames.get(var.getName());
    for (    PsiReference reference : ReferencesSearch.search(var)) {
      reference.handleElementRename(fieldName);
    }
  }
  for (  PsiElement statement : replacementMap.keySet()) {
    final PsiElement replacement=replacementMap.get(statement);
    if (replacement != null) {
      if (statement instanceof PsiLocalVariable) {
        final PsiLocalVariable variable=(PsiLocalVariable)statement;
        final PsiExpression initializer=variable.getInitializer();
        LOG.assertTrue(initializer != null);
        final PsiStatement assignmentStatement=myElementFactory.createStatementFromText(var2FieldNames.get(variable.getName()) + " = " + initializer.getText()+ ";",statement);
        final PsiDeclarationStatement declaration=PsiTreeUtil.getParentOfType(statement,PsiDeclarationStatement.class);
        LOG.assertTrue(declaration != null);
        declaration.replace(assignmentStatement);
      }
 else {
        statement.replace(replacement);
      }
    }
 else {
      statement.delete();
    }
  }
}
