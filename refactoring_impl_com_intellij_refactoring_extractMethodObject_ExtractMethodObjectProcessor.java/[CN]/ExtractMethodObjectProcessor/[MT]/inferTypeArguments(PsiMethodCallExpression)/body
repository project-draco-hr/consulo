{
  final PsiReferenceParameterList list=methodCallExpression.getMethodExpression().getParameterList();
  if (list != null && list.getTypeArguments().length > 0) {
    return list.getText();
  }
 else {
    final PsiTypeParameter[] methodTypeParameters=getMethod().getTypeParameters();
    if (methodTypeParameters.length > 0) {
      List<String> typeSignature=new ArrayList<String>();
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(getMethod().getProject()).getResolveHelper();
      for (      final PsiTypeParameter typeParameter : methodTypeParameters) {
        final PsiType type=resolveHelper.inferTypeForMethodTypeParameter(typeParameter,getMethod().getParameterList().getParameters(),methodCallExpression.getArgumentList().getExpressions(),PsiSubstitutor.EMPTY,methodCallExpression,false);
        if (type == null || type == PsiType.NULL) {
          return "";
        }
        typeSignature.add(type.getPresentableText());
      }
      return "<" + StringUtil.join(typeSignature,", ") + ">";
    }
  }
  return "";
}
