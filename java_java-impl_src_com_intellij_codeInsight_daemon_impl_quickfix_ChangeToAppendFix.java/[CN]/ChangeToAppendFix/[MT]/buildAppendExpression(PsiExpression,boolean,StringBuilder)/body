{
  final PsiType type=concatenation.getType();
  if (type == null) {
    return null;
  }
  if (concatenation instanceof PsiPolyadicExpression && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
    PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)concatenation;
    final PsiExpression[] operands=polyadicExpression.getOperands();
    boolean isConstant=true;
    boolean isString=false;
    final StringBuilder builder=new StringBuilder();
    for (    PsiExpression operand : operands) {
      if (isConstant && PsiUtil.isConstantExpression(operand)) {
        if (builder.length() != 0) {
          builder.append('+');
        }
        final PsiType operandType=operand.getType();
        if (operandType != null && operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
          isString=true;
        }
        builder.append(operand.getText());
      }
 else {
        isConstant=false;
        if (builder.length() != 0) {
          append(builder,useStringValueOf && !isString,out);
          builder.setLength(0);
        }
        buildAppendExpression(operand,useStringValueOf,out);
      }
    }
    if (builder.length() != 0) {
      append(builder,false,out);
    }
  }
 else   if (concatenation instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)concatenation;
    final PsiExpression expression=parenthesizedExpression.getExpression();
    if (expression != null) {
      return buildAppendExpression(expression,useStringValueOf,out);
    }
  }
 else {
    append(concatenation.getText(),useStringValueOf && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING),out);
  }
  return out;
}
