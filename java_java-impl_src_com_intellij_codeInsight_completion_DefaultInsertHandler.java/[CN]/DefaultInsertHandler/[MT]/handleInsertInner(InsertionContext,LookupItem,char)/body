{
  LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);
  PsiDocumentManager.getInstance(context.getProject()).commitDocument(context.getEditor().getDocument());
  myContext=context;
  myLookupItem=item;
  myProject=myContext.getProject();
  myFile=myContext.getFile();
  myEditor=myContext.getEditor();
  myDocument=myEditor.getDocument();
  TailType tailType=getTailType(completionChar);
  myState=new InsertHandlerState(myContext.getSelectionEndOffset(),myContext.getSelectionEndOffset());
  final boolean needLeftParenth=isToInsertParenth();
  final boolean hasParams=needLeftParenth && hasParams();
  if (CompletionUtil.isOverwrite(item,completionChar))   removeEndOfIdentifier(needLeftParenth && hasParams);
 else   if (myContext.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET) != myContext.getSelectionEndOffset())   JavaCompletionUtil.resetParensInfo(context.getOffsetMap());
  handleParenses(hasParams,needLeftParenth,tailType);
  handleBrackets();
  if (myLookupItem.getObject() instanceof PsiVariable) {
    if (completionChar == '!' && PsiType.BOOLEAN.isAssignableFrom(((PsiVariable)myLookupItem.getObject()).getType())) {
      PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
      final PsiReferenceExpression ref=PsiTreeUtil.findElementOfClassAtOffset(myFile,myState.tailOffset - 1,PsiReferenceExpression.class,false);
      if (ref != null) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
        myDocument.insertString(ref.getTextRange().getStartOffset(),"!");
        myState.caretOffset++;
        myState.tailOffset++;
      }
    }
  }
  myContext.setTailOffset(myState.tailOffset);
  myState.caretOffset=processTail(tailType,myState.caretOffset,myState.tailOffset);
  myEditor.getSelectionModel().removeSelection();
  qualifyIfNeeded();
  if (needLeftParenth && hasParams) {
    AutoPopupController.getInstance(myProject).autoPopupParameterInfo(myEditor,null);
  }
  if (tailType == TailType.DOT) {
    AutoPopupController.getInstance(myProject).autoPopupMemberLookup(myEditor,null);
  }
  if (completionChar == '#') {
    context.setLaterRunnable(new Runnable(){
      public void run(){
        new CodeCompletionHandlerBase(CompletionType.BASIC){
        }
.invoke(myProject,myEditor,myFile);
      }
    }
);
  }
  if (insertingAnnotation()) {
    PsiElement elementAt=myFile.findElementAt(myContext.getStartOffset());
    final PsiElement parentElement=elementAt != null ? elementAt.getParent() : null;
    if (elementAt instanceof PsiIdentifier && (PsiTreeUtil.getParentOfType(elementAt,PsiAnnotationParameterList.class) != null || parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof PsiJavaFile) && isAtTokenNeeded()) {
      int expectedOffsetForAtToken=elementAt.getTextRange().getStartOffset();
      myDocument.insertString(expectedOffsetForAtToken,"@");
    }
  }
}
