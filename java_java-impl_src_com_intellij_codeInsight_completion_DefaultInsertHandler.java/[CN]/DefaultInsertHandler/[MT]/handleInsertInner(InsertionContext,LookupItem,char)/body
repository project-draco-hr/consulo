{
  final Project project=context.getProject();
  final Editor editor=context.getEditor();
  final Document document=editor.getDocument();
  PsiDocumentManager.getInstance(project).commitDocument(document);
  final PsiFile file=context.getFile();
  TailType tailType=getTailType(completionChar,item);
  InsertHandlerState state=new InsertHandlerState(context.getSelectionEndOffset(),context.getSelectionEndOffset());
  final boolean needLeftParenth=isToInsertParenth(context,item);
  final boolean hasParams=needLeftParenth && hasParams(context,item);
  final boolean annotation=insertingAnnotation(context,item);
  if (CompletionUtil.isOverwrite(item,completionChar)) {
    removeEndOfIdentifier(needLeftParenth && hasParams,context);
  }
 else   if (context.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET) != context.getSelectionEndOffset()) {
    JavaCompletionUtil.resetParensInfo(context.getOffsetMap());
  }
  handleParentheses(hasParams,needLeftParenth,tailType,context,state);
  handleBrackets(item,document,state);
  if (item.getObject() instanceof PsiVariable) {
    if (completionChar == '!' && PsiType.BOOLEAN.isAssignableFrom(((PsiVariable)item.getObject()).getType())) {
      PsiDocumentManager.getInstance(project).commitDocument(document);
      final PsiReferenceExpression ref=PsiTreeUtil.findElementOfClassAtOffset(file,state.tailOffset - 1,PsiReferenceExpression.class,false);
      if (ref != null) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
        document.insertString(ref.getTextRange().getStartOffset(),"!");
        state.caretOffset++;
        state.tailOffset++;
      }
    }
  }
  context.setTailOffset(state.tailOffset);
  state.caretOffset=processTail(tailType,state.caretOffset,state.tailOffset,editor);
  editor.getSelectionModel().removeSelection();
  qualifyIfNeeded(context,item);
  if (needLeftParenth && hasParams) {
    AutoPopupController.getInstance(project).autoPopupParameterInfo(editor,null);
  }
  if (tailType == TailType.DOT && !(item.getObject() instanceof PsiClass)) {
    AutoPopupController.getInstance(project).autoPopupMemberLookup(editor,null);
  }
  if (completionChar == '#') {
    context.setLaterRunnable(new Runnable(){
      public void run(){
        new CodeCompletionHandlerBase(CompletionType.BASIC).invoke(project,editor,file);
      }
    }
);
  }
  if (annotation) {
    PsiElement elementAt=file.findElementAt(context.getStartOffset());
    final PsiElement parentElement=elementAt != null ? elementAt.getParent() : null;
    if (elementAt instanceof PsiIdentifier && (PsiTreeUtil.getParentOfType(elementAt,PsiAnnotationParameterList.class) != null || parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof PsiJavaFile) && isAtTokenNeeded(context)) {
      int expectedOffsetForAtToken=elementAt.getTextRange().getStartOffset();
      document.insertString(expectedOffsetForAtToken,"@");
    }
  }
}
