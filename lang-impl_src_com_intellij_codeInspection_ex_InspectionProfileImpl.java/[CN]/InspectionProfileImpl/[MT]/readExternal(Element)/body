{
  super.readExternal(element);
  initInspectionTools();
  myDisplayLevelMap.clear();
  final String version=element.getAttributeValue(VERSION_TAG);
  if (version == null || !version.equals(VALID_VERSION)) {
    try {
      element=InspectionProfileConvertor.convertToNewFormat(element,this);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
catch (    JDOMException e) {
      LOG.error(e);
    }
  }
  final String locked=element.getAttributeValue(IS_LOCKED);
  if (locked != null) {
    myLockedProfile=Boolean.parseBoolean(locked);
  }
  final Element highlightElement=element.getChild(USED_LEVELS);
  if (highlightElement != null) {
    ((SeverityProvider)getProfileManager()).getOwnSeverityRegistrar().readExternal(highlightElement);
  }
  myBaseProfile=getDefaultProfile();
  final NamedScopesHolder scopesHolder=getProfileManager().getScopesManager();
  for (  final Object o : element.getChildren(INSPECTION_TOOL_TAG)) {
    Element toolElement=(Element)o;
    String toolClassName=toolElement.getAttributeValue(CLASS_TAG);
    final String levelName=toolElement.getAttributeValue(LEVEL_TAG);
    HighlightDisplayLevel level=HighlightDisplayLevel.find(((SeverityProvider)getProfileManager()).getOwnSeverityRegistrar().getSeverity(levelName));
    if (level == null || level == HighlightDisplayLevel.DO_NOT_SHOW) {
      level=HighlightDisplayLevel.WARNING;
    }
    final String enabled=toolElement.getAttributeValue(ENABLED_TAG);
    HighlightDisplayKey key=HighlightDisplayKey.find(toolClassName);
    final ToolState toolState=new ToolState(level,enabled != null && Boolean.parseBoolean(enabled));
    myDisplayLevelMap.put(toolClassName,toolState);
    if (key == null) {
      toolState.setToolElement(toolElement);
      continue;
    }
    Tools toolList=myTools.get(toolClassName);
    LOG.assertTrue(toolList != null);
    final InspectionTool tool=toolList.getInspectionTool((NamedScope)null);
    if (scopesHolder != null) {
      final List children=toolElement.getChildren(SCOPE);
      if (!children.isEmpty()) {
        for (        Object sO : children) {
          final Element scopeElement=(Element)sO;
          final String scopeName=scopeElement.getAttributeValue(NAME);
          if (scopeName != null) {
            final NamedScope namedScope=scopesHolder.getScope(scopeName);
            if (namedScope != null) {
              final String errorLevel=scopeElement.getAttributeValue(LEVEL_TAG);
              final String enabledInScope=scopeElement.getAttributeValue(ENABLED_TAG);
              toolState.addScope(namedScope,errorLevel != null ? HighlightDisplayLevel.find(((SeverityProvider)getProfileManager()).getOwnSeverityRegistrar().getSeverity(errorLevel)) : level,enabledInScope != null && Boolean.parseBoolean(enabledInScope));
              final InspectionTool inspectionTool=myRegistrar.createInspectionTool(toolClassName,tool);
              inspectionTool.readSettings(scopeElement);
              toolList.addTool(namedScope,inspectionTool);
            }
          }
        }
      }
 else {
        tool.readSettings(toolElement);
      }
    }
 else {
      tool.readSettings(toolElement);
    }
  }
}
