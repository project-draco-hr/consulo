{
  final List<InspectionProfileEntry> tools=new ArrayList<InspectionProfileEntry>();
  for (  Tools toolList : myTools.values()) {
    tools.add(toolList.getTool());
  }
  final Element scopes=element.getChild(DefaultProjectProfileManager.SCOPES);
  if (scopes != null) {
    final List children=scopes.getChildren(SCOPE);
    if (children != null) {
      for (      Object s : children) {
        Element scopeElement=(Element)s;
        final String profile=scopeElement.getAttributeValue(DefaultProjectProfileManager.PROFILE);
        if (profile != null) {
          final InspectionProfileImpl inspectionProfile=(InspectionProfileImpl)getProfileManager().getProfile(profile);
          if (inspectionProfile != null) {
            final NamedScope scope=getProfileManager().getScopesManager().getScope(scopeElement.getAttributeValue(NAME));
            if (scope != null) {
              copyToolsConfigurations(inspectionProfile,scope);
              for (              InspectionProfileEntry entry : inspectionProfile.getInspectionTools(null)) {
                final HighlightDisplayKey key=HighlightDisplayKey.find(entry.getShortName());
                myTools.get(entry.getShortName()).addTool(scope,(InspectionTool)entry,inspectionProfile.isToolEnabled(key),inspectionProfile.getErrorLevel(key,(NamedScope)null));
              }
            }
          }
        }
      }
    }
  }
  for (  InspectionProfileEntry tool : tools) {
    final NamedScope allScope=DefaultScopesProvider.getAllScope();
    final ToolsImpl toolsSettings=myTools.get(tool.getShortName());
    myTools.get(tool.getShortName()).addTool(allScope,(InspectionTool)tool,toolsSettings.isEnabled(),toolsSettings.getLevel());
  }
}
