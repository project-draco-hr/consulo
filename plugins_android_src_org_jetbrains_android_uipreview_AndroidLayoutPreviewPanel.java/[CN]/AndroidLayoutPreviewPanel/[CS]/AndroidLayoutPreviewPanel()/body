{
  super(new VerticalFlowLayout(VerticalFlowLayout.TOP,0,0,true,true));
  setBackground(Color.WHITE);
  setOpaque(true);
  myImagePanel.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.GRAY));
  myErrorLabel.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    final HyperlinkEvent e){
      final Runnable quickFix=myErrorMessage.myQuickFix;
      if (quickFix != null && e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        quickFix.run();
      }
    }
  }
);
  myErrorLabel.setOpaque(false);
  myFileNameLabel.setHorizontalAlignment(SwingConstants.CENTER);
  myFileNameLabel.setBorder(new EmptyBorder(5,0,5,0));
  final JPanel progressPanel=new JPanel();
  progressPanel.setLayout(new BoxLayout(progressPanel,BoxLayout.X_AXIS));
  myProgressIcon=new AsyncProcessIcon("Android layout rendering");
  myProgressIconWrapper.setLayout(new CardLayout());
  myProgressIconWrapper.add(PROGRESS_ICON_CARD_NAME,myProgressIcon);
  myProgressIconWrapper.add(EMPTY_CARD_NAME,new JBLabel(" "));
  myProgressIconWrapper.setOpaque(false);
  Disposer.register(this,myProgressIcon);
  progressPanel.add(myProgressIconWrapper);
  progressPanel.add(new JBLabel(" "));
  progressPanel.setOpaque(false);
  final JPanel titlePanel=new JPanel(new BorderLayout());
  titlePanel.setOpaque(false);
  titlePanel.add(myFileNameLabel,BorderLayout.CENTER);
  titlePanel.add(progressPanel,BorderLayout.EAST);
  ((CardLayout)myProgressIconWrapper.getLayout()).show(myProgressIconWrapper,EMPTY_CARD_NAME);
  add(titlePanel);
  add(myErrorLabel);
  add(myWarningLabel);
  add(new MyImagePanelWrapper());
}
