{
  FileLocalStringEnumerator storage=new FileLocalStringEnumerator(false);
  StubInputStream inputStream=new StubInputStream(stream,storage);
  final int numberOfStrings=DataInputOutputUtil.readINT(inputStream);
  byte[] buffer=IOUtil.allocReadWriteUTFBuffer();
  storage.myStrings.ensureCapacity(numberOfStrings);
  int i=0;
  while (i < numberOfStrings) {
    String s=myStringInterner.get(IOUtil.readUTFFast(buffer,inputStream));
    storage.myStrings.add(s);
    ++i;
  }
  final int stubFilesCount=DataInputOutputUtil.readINT(inputStream);
  if (stubFilesCount <= 0) {
    Logger.getInstance(getClass()).error("Incorrect stub files count during deserialization:" + stubFilesCount);
  }
  final Stub baseStub=deserialize(inputStream,null);
  final List<PsiFileStub> stubs=ContainerUtil.newArrayListWithCapacity(stubFilesCount);
  if (baseStub instanceof PsiFileStub)   stubs.add((PsiFileStub)baseStub);
  for (int j=1; j < stubFilesCount; j++) {
    final Stub deserialize=deserialize(inputStream,null);
    if (deserialize instanceof PsiFileStub) {
      final PsiFileStub fileStub=(PsiFileStub)deserialize;
      stubs.add(fileStub);
    }
 else {
      Logger.getInstance(getClass()).error("Stub root must be PsiFileStub for files with several stub roots");
    }
  }
  final PsiFileStub[] stubsArray=stubs.toArray(new PsiFileStub[stubs.size()]);
  for (  PsiFileStub stub : stubsArray) {
    if (stub instanceof PsiFileStubImpl) {
      ((PsiFileStubImpl)stub).setStubRoots(stubsArray);
    }
  }
  return baseStub;
}
