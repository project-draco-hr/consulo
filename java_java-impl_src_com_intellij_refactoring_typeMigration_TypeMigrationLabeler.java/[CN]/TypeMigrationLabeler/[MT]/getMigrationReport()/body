{
  final StringBuffer buffer=new StringBuffer();
  buffer.append("Types:\n" + getTypeEvaluator().getReport() + "\n");
  buffer.append("Conversions:\n");
  final String[] conversions=new String[myConversions.size()];
  int k=0;
  for (  final PsiElement expr : myConversions.keySet()) {
    final Object conv=myConversions.get(expr);
    if (conv instanceof Pair && ((Pair)conv).first == null) {
      conversions[k++]=(expr.getText() + " -> " + ((Pair)conv).second+ "\n");
    }
 else {
      conversions[k++]=(expr.getText() + " -> " + conv+ "\n");
    }
  }
  Arrays.sort(conversions,new Comparator(){
    public int compare(    Object x,    Object y){
      return ((String)x).compareTo((String)y);
    }
  }
);
  for (  String conversion : conversions) {
    buffer.append(conversion);
  }
  buffer.append("\nNew expression type changes:\n");
  final String[] newchanges=new String[myNewExpressionTypeChange.size()];
  k=0;
  for (  final Map.Entry<TypeMigrationUsageInfo,PsiType> entry : myNewExpressionTypeChange.entrySet()) {
    newchanges[k++]=entry.getKey().getElement().getText() + " -> " + entry.getValue().getCanonicalText()+ "\n";
  }
  Arrays.sort(newchanges,new Comparator(){
    public int compare(    Object x,    Object y){
      return ((String)x).compareTo((String)y);
    }
  }
);
  for (  String newchange : newchanges) {
    buffer.append(newchange);
  }
  buffer.append("Fails:\n");
  final ArrayList<Pair<PsiAnchor,PsiType>> failsList=new ArrayList<Pair<PsiAnchor,PsiType>>(myFailedConversions);
  Collections.sort(failsList,new Comparator<Pair<PsiAnchor,PsiType>>(){
    public int compare(    final Pair<PsiAnchor,PsiType> o1,    final Pair<PsiAnchor,PsiType> o2){
      final PsiElement element1=o1.getFirst().retrieve();
      final PsiElement element2=o2.getFirst().retrieve();
      if (element1 == null || element2 == null)       return 0;
      return element1.getText().compareTo(element2.getText());
    }
  }
);
  for (  final Pair<PsiAnchor,PsiType> p : failsList) {
    final PsiElement element=p.getFirst().retrieve();
    if (element != null) {
      buffer.append(element.getText() + "->" + p.getSecond().getCanonicalText()+ "\n");
    }
  }
  return buffer.toString();
}
