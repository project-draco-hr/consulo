{
  final StringBuilder buffer=new StringBuilder();
  buffer.append("Types:\n").append(getTypeEvaluator().getReport()).append("\n");
  buffer.append("Conversions:\n");
  final String[] conversions=new String[myConversions.size()];
  int k=0;
  for (  final PsiElement expr : myConversions.keySet()) {
    final Object conversion=myConversions.get(expr);
    if (conversion instanceof Pair && ((Pair)conversion).first == null) {
      conversions[k++]=(expr.getText() + " -> " + ((Pair)conversion).second+ "\n");
    }
 else {
      conversions[k++]=(expr.getText() + " -> " + conversion+ "\n");
    }
  }
  Arrays.sort(conversions,new Comparator<String>(){
    public int compare(    String x,    String y){
      return x.compareTo(y);
    }
  }
);
  for (  String conversion : conversions) {
    buffer.append(conversion);
  }
  buffer.append("\nNew expression type changes:\n");
  final String[] newChanges=new String[myNewExpressionTypeChange.size()];
  k=0;
  for (  final Map.Entry<TypeMigrationUsageInfo,PsiType> entry : myNewExpressionTypeChange.entrySet()) {
    final PsiElement element=entry.getKey().getElement();
    newChanges[k++]=(element != null ? element.getText() : entry.getKey()) + " -> " + entry.getValue().getCanonicalText()+ "\n";
  }
  Arrays.sort(newChanges,new Comparator<String>(){
    public int compare(    String x,    String y){
      return x.compareTo(y);
    }
  }
);
  for (  String change : newChanges) {
    buffer.append(change);
  }
  buffer.append("Fails:\n");
  final ArrayList<Pair<PsiAnchor,PsiType>> failsList=new ArrayList<Pair<PsiAnchor,PsiType>>(myFailedConversions);
  Collections.sort(failsList,new Comparator<Pair<PsiAnchor,PsiType>>(){
    public int compare(    final Pair<PsiAnchor,PsiType> o1,    final Pair<PsiAnchor,PsiType> o2){
      final PsiElement element1=o1.getFirst().retrieve();
      final PsiElement element2=o2.getFirst().retrieve();
      if (element1 == null || element2 == null)       return 0;
      return element1.getText().compareTo(element2.getText());
    }
  }
);
  for (  final Pair<PsiAnchor,PsiType> p : failsList) {
    final PsiElement element=p.getFirst().retrieve();
    if (element != null) {
      buffer.append(element.getText()).append("->").append(p.getSecond().getCanonicalText()).append("\n");
    }
  }
  return buffer.toString();
}
