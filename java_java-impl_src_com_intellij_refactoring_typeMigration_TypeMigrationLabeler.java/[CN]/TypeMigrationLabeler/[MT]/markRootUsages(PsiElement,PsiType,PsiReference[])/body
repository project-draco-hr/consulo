{
  final List<PsiReference> validReferences=new ArrayList<PsiReference>();
  for (  PsiReference ref1 : refs) {
    final PsiElement ref=ref1.getElement();
    if (ref != null) {
      if (element instanceof PsiMethod) {
        final PsiElement parent=Util.getEssentialParent(ref);
        if (!(parent instanceof PsiMethodCallExpression)) {
          continue;
        }
        getTypeEvaluator().setType(new TypeMigrationUsageInfo(parent),migrationType);
      }
 else       if (element instanceof PsiVariable) {
        if (ref instanceof PsiReferenceExpression) {
          getTypeEvaluator().setType(new TypeMigrationUsageInfo(ref),PsiImplUtil.normalizeWildcardTypeByPosition(migrationType,(PsiReferenceExpression)ref));
        }
      }
 else {
        LOG.error("Method call expression or reference expression expected but found " + element.getClass().getName());
        continue;
      }
      validReferences.add(ref1);
    }
  }
  Collections.sort(validReferences,new Comparator<PsiReference>(){
    public int compare(    final PsiReference o1,    final PsiReference o2){
      return o1.getElement().getTextOffset() - o2.getElement().getTextOffset();
    }
  }
);
  return validReferences.toArray(new PsiReference[validReferences.size()]);
}
