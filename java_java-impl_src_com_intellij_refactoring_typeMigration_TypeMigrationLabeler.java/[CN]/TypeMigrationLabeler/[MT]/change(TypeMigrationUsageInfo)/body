{
  final PsiElement element=usageInfo.getElement();
  if (element == null)   return;
  final Project project=element.getProject();
  if (element instanceof PsiExpression) {
    final PsiExpression expression=(PsiExpression)element;
    if (element instanceof PsiNewExpression) {
      for (      Map.Entry<TypeMigrationUsageInfo,PsiType> info : myNewExpressionTypeChange.entrySet()) {
        final PsiElement expressionToReplace=info.getKey().getElement();
        if (expression.equals(expressionToReplace)) {
          TypeMigrationReplacementUtil.replaceNewExpressionType(project,(PsiNewExpression)expressionToReplace,info);
        }
      }
    }
    final Object conversion=myConversions.get(element);
    if (conversion != null) {
      myConversions.remove(element);
      TypeMigrationReplacementUtil.replaceExpression(expression,project,conversion);
    }
  }
 else   if (element instanceof PsiReferenceParameterList) {
    for (    Map.Entry<TypeMigrationUsageInfo,PsiClassType> entry : myClassTypeArgumentsChange.entrySet()) {
      if (element.equals(entry.getKey().getElement())) {
        final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
        try {
          element.getParent().replace(factory.createReferenceElementByType(entry.getValue()));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
  }
 else {
    TypeMigrationReplacementUtil.migratePsiMemeberType(element,project,getTypeEvaluator().getType(usageInfo));
  }
}
