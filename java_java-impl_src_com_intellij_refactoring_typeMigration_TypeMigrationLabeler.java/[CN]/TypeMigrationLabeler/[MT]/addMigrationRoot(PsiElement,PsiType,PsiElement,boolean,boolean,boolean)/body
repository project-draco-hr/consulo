{
  if (type.equals(PsiType.NULL)) {
    return false;
  }
  final PsiElement resolved=Util.normalizeElement(element);
  final SearchScope searchScope=myRules.getSearchScope();
  if (!resolved.isPhysical() || !PsiSearchScopeUtil.isInScope(searchScope,resolved)) {
    return false;
  }
  final PsiType originalType=getElementType(resolved);
  LOG.assertTrue(originalType != null);
  type=userDefinedType ? type : TypeEvaluator.substituteType(type,originalType,isContraVariantPosition);
  if (!userDefinedType) {
    if (typeContainsTypeParameters(originalType))     return false;
  }
  if (type instanceof PsiCapturedWildcardType) {
    return false;
  }
  if (resolved instanceof PsiMethod) {
    final PsiMethod method=((PsiMethod)resolved);
    final PsiMethod[] methods=OverridingMethodsSearch.search(method,method.getUseScope(),false).toArray(PsiMethod.EMPTY_ARRAY);
    final OverridenUsageInfo overridenUsageInfo=new OverridenUsageInfo(method);
    final OverriderUsageInfo[] overriders=new OverriderUsageInfo[methods.length];
    for (int i=-1; i < methods.length; i++) {
      final TypeMigrationUsageInfo m;
      if (i < 0) {
        m=overridenUsageInfo;
      }
 else {
        overriders[i]=new OverriderUsageInfo(methods[i],method);
        m=overriders[i];
      }
      alreadyProcessed=addRoot(m,type,place,alreadyProcessed);
    }
    overridenUsageInfo.setOverriders(overriders);
    return !alreadyProcessed;
  }
 else   if (resolved instanceof PsiParameter && ((PsiParameter)resolved).getDeclarationScope() instanceof PsiMethod) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(resolved,PsiMethod.class);
    if (method == null) {
      return false;
    }
    final int index=method.getParameterList().getParameterIndex(((PsiParameter)resolved));
    final PsiMethod[] methods=OverridingMethodsSearch.search(method,method.getUseScope(),false).toArray(PsiMethod.EMPTY_ARRAY);
    final OverriderUsageInfo[] overriders=new OverriderUsageInfo[methods.length];
    final OverridenUsageInfo overridenUsageInfo=new OverridenUsageInfo(method.getParameterList().getParameters()[index]);
    for (int i=-1; i < methods.length; i++) {
      final PsiMethod m=i < 0 ? method : methods[i];
      final PsiParameter p=m.getParameterList().getParameters()[index];
      final TypeMigrationUsageInfo paramUsageInfo;
      if (i < 0) {
        paramUsageInfo=overridenUsageInfo;
      }
 else {
        overriders[i]=new OverriderUsageInfo(p,method);
        paramUsageInfo=overriders[i];
      }
      alreadyProcessed=addRoot(paramUsageInfo,type,place,alreadyProcessed);
    }
    overridenUsageInfo.setOverriders(overriders);
    return !alreadyProcessed;
  }
 else {
    return !addRoot(new TypeMigrationUsageInfo(resolved),type,place,alreadyProcessed);
  }
}
