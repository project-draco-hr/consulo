def _load(self):
    if (not self._module):
        (head, globals, locals, after) = self._data
        mod = _origimport(head, globals, locals)

        def subload(mod, p):
            (h, t) = (p, None)
            if ('.' in p):
                (h, t) = p.split('.', 1)
            if (not hasattr(mod, h)):
                setattr(mod, h, _demandmod(p, mod.__dict__, mod.__dict__))
            elif t:
                subload(getattr(mod, h), t)
        for x in after:
            subload(mod, x)
        if (locals and (locals.get(head) == self)):
            locals[head] = mod
        object.__setattr__(self, '_module', mod)
