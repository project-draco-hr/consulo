def _demandimport(name, globals=None, locals=None, fromlist=None, level=None):
    if ((not locals) or (name in ignore) or (fromlist == ('*',))):
        if (level is None):
            return _origimport(name, globals, locals, fromlist)
        else:
            return _origimport(name, globals, locals, fromlist, level)
    elif (not fromlist):
        if ('.' in name):
            (base, rest) = name.split('.', 1)
            if (globals and (globals.get('__name__', None) == base)):
                return _origimport(name, globals, locals, fromlist)
            if (base in locals):
                if isinstance(locals[base], _demandmod):
                    locals[base]._extend(rest)
                return locals[base]
        return _demandmod(name, globals, locals)
    else:
        if (level is not None):
            return _origimport(name, globals, locals, fromlist, level)
        mod = _origimport(name, globals, locals)
        for comp in name.split('.')[1:]:
            if (not hasattr(mod, comp)):
                setattr(mod, comp, _demandmod(comp, mod.__dict__, mod.__dict__))
            mod = getattr(mod, comp)
        for x in fromlist:
            if (not hasattr(mod, x)):
                setattr(mod, x, _demandmod(x, mod.__dict__, locals))
        return mod
