{
  Project project=getProject();
  if (project == null) {
    return;
  }
  GradleSettings settings=getSettings(project);
  final String gradleHomePath=getPathToUse(myGradleHomeModifiedByUser,settings.getGradleHome(),myGradleHomePathField.getText());
  final String serviceDirPath=getPathToUse(myServiceDirectoryModifiedByUser,settings.getServiceDirectoryPath(),myServiceDirectoryPathField.getText());
  final boolean preferLocalToWrapper;
  if (myUseWrapperButton.isEnabled()) {
    preferLocalToWrapper=myUseLocalDistributionButton.isSelected();
  }
 else {
    preferLocalToWrapper=settings.isPreferLocalInstallationToWrapper();
  }
  myHelper.applySettings(linkedExternalProjectPath,gradleHomePath,preferLocalToWrapper,useAutoImport,serviceDirPath,project);
  Project defaultProject=myHelper.getDefaultProject();
  if (project != defaultProject) {
    myHelper.applyPreferLocalInstallationToWrapper(preferLocalToWrapper,defaultProject);
  }
  if (isValidGradleHome(gradleHomePath)) {
    if (myGradleHomeModifiedByUser) {
      myGradleHomeSettingType=LocationSettingType.EXPLICIT_CORRECT;
      if (defaultProject != project && !isValidGradleHome(GradleSettings.getInstance(defaultProject).getGradleHome())) {
        GradleSettings.getInstance(defaultProject).setGradleHome(gradleHomePath);
      }
    }
 else {
      myGradleHomeSettingType=LocationSettingType.DEDUCED;
    }
  }
 else   if (preferLocalToWrapper) {
    if (StringUtil.isEmpty(gradleHomePath)) {
      myGradleHomeSettingType=LocationSettingType.UNKNOWN;
    }
 else {
      myGradleHomeSettingType=LocationSettingType.EXPLICIT_INCORRECT;
      myHelper.showBalloon(MessageType.ERROR,myGradleHomeSettingType,0);
    }
  }
}
