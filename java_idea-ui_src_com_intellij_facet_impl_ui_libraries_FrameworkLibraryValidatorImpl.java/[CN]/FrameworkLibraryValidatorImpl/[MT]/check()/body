{
  final Set<? extends LibraryKind<?>> libraryKinds=myLibraryDescription.getSuitableLibraryKinds();
  final Ref<Boolean> found=Ref.create(false);
  myContext.getRootModel().orderEntries().using(myContext.getModulesProvider()).recursively().librariesOnly().forEachLibrary(new Processor<Library>(){
    @Override public boolean process(    Library library){
      if (LibraryPresentationManager.getInstance().isLibraryOfKind(library,myContext.getLibrariesContainer(),libraryKinds)) {
        found.set(true);
        return false;
      }
      return true;
    }
  }
);
  if (found.get())   return ValidationResult.OK;
  return new ValidationResult(StringUtil.capitalize(myLibraryCategoryName) + " library not found in the module dependencies list",new LibrariesQuickFix(myLibraryDescription));
}
