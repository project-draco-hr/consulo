{
  final StringBuilder depends=new StringBuilder(INIT_ARTIFACTS_TARGET);
  ArtifactUtil.processPackagingElements(artifact,null,new Processor<PackagingElement<?>>(){
    public boolean process(    PackagingElement<?> packagingElement){
      if (packagingElement instanceof ArtifactPackagingElement) {
        final Artifact included=((ArtifactPackagingElement)packagingElement).findArtifact(myResolvingContext);
        if (included != null) {
          if (depends.length() > 0)           depends.append(", ");
          depends.append(myContext.getTargetName(included));
        }
      }
 else       if (packagingElement instanceof ModuleOutputPackagingElement) {
        final Module module=((ModuleOutputPackagingElement)packagingElement).findModule(myResolvingContext);
        if (module != null) {
          if (depends.length() > 0)           depends.append(", ");
          depends.append(BuildProperties.getCompileTargetName(module.getName()));
        }
      }
      return true;
    }
  }
,myResolvingContext,true);
  final Target artifactTarget=new Target(myContext.getTargetName(artifact),depends.toString(),"Build '" + artifact.getName() + "' artifact",null);
  if (myContext.shouldBuildIntoTempDirectory(artifact)) {
    final String outputDirectory=BuildProperties.propertyRelativePath(ArtifactAntGenerationContextImpl.ARTIFACTS_TEMP_DIR_PROPERTY,BuildProperties.convertName(artifact.getName()));
    artifactTarget.add(new Property(myContext.getArtifactOutputProperty(artifact),outputDirectory));
  }
  final String outputPath=BuildProperties.propertyRef(myContext.getArtifactOutputProperty(artifact));
  artifactTarget.add(new Mkdir(outputPath));
  final DirectoryAntCopyInstructionCreator creator=new DirectoryAntCopyInstructionCreator(outputPath);
  List<Generator> copyInstructions=new ArrayList<Generator>();
  copyInstructions.addAll(artifact.getRootElement().computeAntInstructions(myResolvingContext,creator,myContext,artifact.getArtifactType()));
  for (  Generator generator : myContext.getAndClearBeforeCurrentArtifact()) {
    artifactTarget.add(generator);
  }
  for (  Generator tag : copyInstructions) {
    artifactTarget.add(tag);
  }
  return artifactTarget;
}
