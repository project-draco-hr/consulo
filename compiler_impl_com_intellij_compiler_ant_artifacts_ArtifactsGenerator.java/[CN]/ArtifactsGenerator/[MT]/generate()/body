{
  final List<Generator> generators=new ArrayList<Generator>();
  final Target initTarget=new Target(INIT_ARTIFACTS_TARGET,null,null,null);
  generators.add(initTarget);
  initTarget.add(new Property(ArtifactGenerationContextImpl.ARTIFACTS_TEMP_DIR_PROPERTY,BuildProperties.propertyRelativePath(BuildProperties.getProjectBaseDirProperty(),"artifactsTemp")));
  StringBuilder depends=new StringBuilder();
  final Artifact[] artifacts=ArtifactManager.getInstance(myProject).getArtifacts();
  for (  Artifact artifact : artifacts) {
    Target target=createArtifactTarget(artifact);
    generators.add(target);
    if (artifact.isBuildOnMake()) {
      if (depends.length() > 0)       depends.append(", ");
      depends.append(myContext.getTargetName(artifact));
    }
  }
  for (  Generator generator : myContext.getBeforeBuildGenerators()) {
    initTarget.add(generator);
  }
  Target buildAllArtifacts=new Target(BUILD_ALL_ARTIFACTS_TARGET,depends.toString(),"Build all artifacts",null);
  for (  Artifact artifact : artifacts) {
    if (artifact.isBuildOnMake()) {
      final String outputPath=myContext.getSubstitutedPath(artifact.getOutputPath());
      buildAllArtifacts.add(new Mkdir(outputPath));
      final Copy copy=new Copy(outputPath);
      copy.add(new FileSet(BuildProperties.propertyRef(myContext.getArtifactOutputProperty(artifact))));
      buildAllArtifacts.add(copy);
    }
  }
  buildAllArtifacts.add(new Comment("Delete temporary files"),1);
  for (  Generator generator : myContext.getAfterBuildGenerators()) {
    buildAllArtifacts.add(generator);
  }
  buildAllArtifacts.add(new Delete(BuildProperties.propertyRef(ArtifactGenerationContextImpl.ARTIFACTS_TEMP_DIR_PROPERTY)));
  generators.add(buildAllArtifacts);
  return generators;
}
