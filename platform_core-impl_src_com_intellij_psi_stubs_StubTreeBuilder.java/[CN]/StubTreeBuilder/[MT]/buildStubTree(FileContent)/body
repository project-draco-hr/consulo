{
  Stub data=inputData.getUserData(stubElementKey);
  if (data != null)   return data;
synchronized (inputData) {
    data=inputData.getUserData(stubElementKey);
    if (data != null)     return data;
    final FileType fileType=inputData.getFileType();
    final BinaryFileStubBuilder builder=BinaryFileStubBuilders.INSTANCE.forFileType(fileType);
    if (builder != null) {
      data=builder.buildStubTree(inputData);
      if (data instanceof PsiFileStubImpl && !((PsiFileStubImpl)data).rootsAreSet()) {
        ((PsiFileStubImpl)data).setStubRoots(new PsiFileStub[]{(PsiFileStubImpl)data});
      }
    }
 else {
      CharSequence contentAsText=inputData.getContentAsText();
      FileContentImpl fileContent=(FileContentImpl)inputData;
      PsiFile psi=fileContent.getPsiFileForPsiDependentIndex();
      final FileViewProvider viewProvider=psi.getViewProvider();
      psi=viewProvider.getStubBindingRoot();
      psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,contentAsText);
      psi.getManager().startBatchFilesProcessingMode();
      try {
        IStubFileElementType stubFileElementType=((PsiFileImpl)psi).getElementTypeForStubBuilder();
        if (stubFileElementType != null) {
          final StubBuilder stubBuilder=stubFileElementType.getBuilder();
          if (stubBuilder instanceof LightStubBuilder) {
            LightStubBuilder.FORCED_AST.set(fileContent.getLighterASTForPsiDependentIndex());
          }
          data=stubBuilder.buildStubTree(psi);
          final List<Pair<IStubFileElementType,PsiFile>> stubbedRoots=getStubbedRoots(viewProvider);
          final List<PsiFileStub> stubs=new ArrayList<PsiFileStub>(stubbedRoots.size());
          stubs.add((PsiFileStub)data);
          for (          Pair<IStubFileElementType,PsiFile> stubbedRoot : stubbedRoots) {
            final PsiFile secondaryPsi=stubbedRoot.second;
            if (psi == secondaryPsi)             continue;
            final StubBuilder stubbedRootBuilder=stubbedRoot.first.getBuilder();
            if (stubbedRootBuilder instanceof LightStubBuilder) {
              LightStubBuilder.FORCED_AST.set(new TreeBackedLighterAST(secondaryPsi.getNode()));
            }
            final StubElement element=stubbedRootBuilder.buildStubTree(secondaryPsi);
            if (element instanceof PsiFileStub) {
              stubs.add((PsiFileStub)element);
            }
          }
          final PsiFileStub[] stubsArray=stubs.toArray(new PsiFileStub[stubs.size()]);
          for (          PsiFileStub stub : stubsArray) {
            if (stub instanceof PsiFileStubImpl) {
              ((PsiFileStubImpl)stub).setStubRoots(stubsArray);
            }
          }
        }
      }
  finally {
        psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,null);
        psi.getManager().finishBatchFilesProcessingMode();
      }
    }
    inputData.putUserData(stubElementKey,data);
    return data;
  }
}
