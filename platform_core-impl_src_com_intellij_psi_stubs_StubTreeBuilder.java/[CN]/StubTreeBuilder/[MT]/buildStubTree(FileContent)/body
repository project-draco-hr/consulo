{
  Stub data=inputData.getUserData(stubElementKey);
  if (data != null)   return data;
synchronized (inputData) {
    data=inputData.getUserData(stubElementKey);
    if (data != null)     return data;
    final FileType fileType=inputData.getFileType();
    final BinaryFileStubBuilder builder=BinaryFileStubBuilders.INSTANCE.forFileType(fileType);
    if (builder != null) {
      data=builder.buildStubTree(inputData.getFile(),inputData.getContent(),inputData.getProject());
    }
 else     if (!fileType.isBinary()) {
      final LanguageFileType languageFileType=(LanguageFileType)fileType;
      Language l=languageFileType.getLanguage();
      final IFileElementType type=LanguageParserDefinitions.INSTANCE.forLanguage(l).getFileNodeType();
      PsiFile psi=inputData.getPsiFile();
      CharSequence contentAsText=inputData.getContentAsText();
      psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,contentAsText);
      try {
        if (type instanceof IStubFileElementType) {
          data=((IStubFileElementType)type).getBuilder().buildStubTree(psi);
        }
 else         if (languageFileType instanceof SubstitutedFileType) {
          SubstitutedFileType substituted=(SubstitutedFileType)languageFileType;
          LanguageFileType original=(LanguageFileType)substituted.getOriginalFileType();
          final IFileElementType originalType=LanguageParserDefinitions.INSTANCE.forLanguage(original.getLanguage()).getFileNodeType();
          if (originalType instanceof IStubFileElementType) {
            data=((IStubFileElementType)originalType).getBuilder().buildStubTree(psi);
          }
        }
      }
  finally {
        psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,null);
      }
    }
    inputData.putUserData(stubElementKey,data);
    return data;
  }
}
