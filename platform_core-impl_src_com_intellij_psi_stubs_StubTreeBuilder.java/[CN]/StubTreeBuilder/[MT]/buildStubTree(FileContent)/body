{
  Stub data=inputData.getUserData(stubElementKey);
  if (data != null)   return data;
synchronized (inputData) {
    data=inputData.getUserData(stubElementKey);
    if (data != null)     return data;
    final FileType fileType=inputData.getFileType();
    final BinaryFileStubBuilder builder=BinaryFileStubBuilders.INSTANCE.forFileType(fileType);
    if (builder != null) {
      data=builder.buildStubTree(inputData);
    }
 else {
      final LanguageFileType languageFileType=(LanguageFileType)fileType;
      CharSequence contentAsText=inputData.getContentAsText();
      FileContentImpl fileContent=(FileContentImpl)inputData;
      PsiFile psi=fileContent.getPsiFileForPsiDependentIndex();
      final FileViewProvider viewProvider=psi.getViewProvider();
      psi=viewProvider.getStubBindingRoot();
      psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,contentAsText);
      final IStubFileElementType type=((PsiFileImpl)psi).getElementTypeForStubBuilder();
      psi.getManager().startBatchFilesProcessingMode();
      try {
        IStubFileElementType stubFileElementType;
        if (type != null) {
          stubFileElementType=type;
        }
 else         if (languageFileType instanceof SubstitutedFileType) {
          SubstitutedFileType substituted=(SubstitutedFileType)languageFileType;
          LanguageFileType original=(LanguageFileType)substituted.getOriginalFileType();
          final IFileElementType originalType=LanguageParserDefinitions.INSTANCE.forLanguage(original.getLanguage()).getFileNodeType();
          stubFileElementType=originalType instanceof IStubFileElementType ? (IStubFileElementType)originalType : null;
        }
 else {
          stubFileElementType=null;
        }
        if (stubFileElementType != null) {
          final StubBuilder stubBuilder=stubFileElementType.getBuilder();
          if (stubBuilder instanceof LightStubBuilder) {
            LightStubBuilder.FORCED_AST.set(fileContent.getLighterASTForPsiDependentIndex());
          }
          data=stubBuilder.buildStubTree(psi);
          final List<Pair<IStubFileElementType,PsiFile>> stubbedRoots=getStubbedRoots(viewProvider);
          if (stubbedRoots.size() > 1) {
            final List<PsiFileStub> stubs=new ArrayList<PsiFileStub>(stubbedRoots.size());
            stubs.add((PsiFileStub)data);
            for (            Pair<IStubFileElementType,PsiFile> stubbedRoot : stubbedRoots) {
              if (psi == stubbedRoot.second)               continue;
              final StubBuilder stubbedRootBuilder=stubbedRoot.first.getBuilder();
              if (stubbedRootBuilder instanceof LightStubBuilder) {
                LightStubBuilder.FORCED_AST.set(new TreeBackedLighterAST(psi.getNode()));
              }
              final StubElement element=stubbedRootBuilder.buildStubTree(stubbedRoot.second);
              if (element instanceof PsiFileStub) {
                stubs.add((PsiFileStub)element);
              }
            }
            final PsiFileStub[] stubsArray=stubs.toArray(new PsiFileStub[stubs.size()]);
            for (            PsiFileStub stub : stubsArray) {
              if (stub instanceof PsiFileStubImpl) {
                ((PsiFileStubImpl)stub).setStubRoots(stubsArray);
              }
            }
          }
        }
      }
  finally {
        psi.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,null);
        psi.getManager().finishBatchFilesProcessingMode();
      }
    }
    inputData.putUserData(stubElementKey,data);
    return data;
  }
}
