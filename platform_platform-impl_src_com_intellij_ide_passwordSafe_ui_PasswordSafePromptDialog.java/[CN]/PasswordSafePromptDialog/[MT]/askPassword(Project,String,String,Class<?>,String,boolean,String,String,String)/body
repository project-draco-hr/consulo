{
  final PasswordSafeImpl ps=(PasswordSafeImpl)PasswordSafe.getInstance();
  try {
    if (resetPassword) {
      ps.removePassword(project,requestor,key);
    }
 else {
      String pw=ps.getPassword(project,requestor,key);
      if (pw != null) {
        return pw;
      }
    }
  }
 catch (  PasswordSafeException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Failed to retrieve or reset password",ex);
    }
  }
  final Ref<String> ref=Ref.create();
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      PasswordSafeSettings.ProviderType type=ps.getSettings().getProviderType();
      final PasswordPromptComponent component=new PasswordPromptComponent(type,message,false,promptLabel,checkboxLabel);
      PasswordSafePromptDialog d=new PasswordSafePromptDialog(project,title,component);
      d.setErrorText(error);
      if (d.showAndGet()) {
        ref.set(new String(component.getPassword()));
        try {
          if (component.isRememberSelected()) {
            ps.storePassword(project,requestor,key,ref.get());
          }
 else           if (!type.equals(PasswordSafeSettings.ProviderType.DO_NOT_STORE)) {
            ps.getMemoryProvider().storePassword(project,requestor,key,ref.get());
          }
        }
 catch (        PasswordSafeException e) {
          Messages.showErrorDialog(project,e.getMessage(),"Failed to Store Password");
          if (LOG.isDebugEnabled()) {
            LOG.debug("Failed to store password",e);
          }
        }
      }
    }
  }
,ModalityState.any());
  return ref.get();
}
