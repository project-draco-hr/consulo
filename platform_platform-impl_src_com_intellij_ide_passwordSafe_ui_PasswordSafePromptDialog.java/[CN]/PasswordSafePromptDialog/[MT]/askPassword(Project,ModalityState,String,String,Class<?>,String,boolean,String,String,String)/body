{
  final PasswordSafeImpl ps=(PasswordSafeImpl)PasswordSafe.getInstance();
  try {
    if (resetPassword) {
      ps.removePassword(project,requester,key);
    }
 else {
      String pw=ps.getPassword(project,requester,key);
      if (pw != null) {
        return pw;
      }
    }
  }
 catch (  PasswordSafeException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Failed to retrieve or reset password",ex);
    }
  }
  final AtomicReference<String> pw=new AtomicReference<String>(null);
  GuiUtils.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      final PasswordSafePromptDialog d=new PasswordSafePromptDialog(project,ps,title,message);
      if (promptLabel != null) {
        d.myPromptLabel.setText(promptLabel);
      }
      if (checkboxLabel != null) {
        d.myRememberThePasswordCheckBox.setText(checkboxLabel);
      }
      d.init();
      d.setErrorText(error);
      d.show();
      if (d.isOK()) {
        String p=new String(d.myPasswordPasswordField.getPassword());
        pw.set(p);
        try {
          if (d.myRememberThePasswordCheckBox.isSelected()) {
            ps.storePassword(project,requester,key,p);
          }
 else           if (!ps.getSettings().getProviderType().equals(PasswordSafeSettings.ProviderType.DO_NOT_STORE)) {
            ps.getMemoryProvider().storePassword(project,requester,key,p);
          }
        }
 catch (        PasswordSafeException e) {
          Messages.showErrorDialog(project,e.getMessage(),"Failed to store password");
          if (LOG.isDebugEnabled()) {
            LOG.debug("Failed to store password",e);
          }
        }
      }
    }
  }
,modalityState == null ? ModalityState.defaultModalityState() : modalityState);
  return pw.get();
}
