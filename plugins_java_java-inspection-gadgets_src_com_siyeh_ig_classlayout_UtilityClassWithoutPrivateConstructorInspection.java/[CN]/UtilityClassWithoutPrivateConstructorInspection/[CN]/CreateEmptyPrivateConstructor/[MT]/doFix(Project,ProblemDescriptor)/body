{
  final PsiElement classNameIdentifier=descriptor.getPsiElement();
  final PsiElement parent=classNameIdentifier.getParent();
  if (!(parent instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)parent;
  final Query<PsiReference> query=ReferencesSearch.search(aClass,aClass.getUseScope());
  for (  PsiReference reference : query) {
    if (reference == null) {
      continue;
    }
    final PsiElement element=reference.getElement();
    final PsiElement context=element.getParent();
    if (context instanceof PsiNewExpression) {
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          Messages.showInfoMessage(aClass.getProject(),"Utility class has instantiations, private constructor will not be created","Can't generate constructor");
        }
      }
);
      return;
    }
  }
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory factory=psiFacade.getElementFactory();
  final PsiMethod constructor=factory.createConstructor();
  final PsiModifierList modifierList=constructor.getModifierList();
  modifierList.setModifierProperty(PsiModifier.PRIVATE,true);
  aClass.add(constructor);
  final CodeStyleManager styleManager=CodeStyleManager.getInstance(project);
  styleManager.reformat(constructor);
}
