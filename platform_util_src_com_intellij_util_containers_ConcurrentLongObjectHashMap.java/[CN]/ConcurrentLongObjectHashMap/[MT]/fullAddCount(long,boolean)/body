{
  int h;
  if ((h=ThreadLocalRandom.getProbe()) == 0) {
    ThreadLocalRandom.localInit();
    h=ThreadLocalRandom.getProbe();
    wasUncontended=true;
  }
  boolean collide=false;
  for (; ; ) {
    ConcurrentHashMap.CounterCell[] as;
    ConcurrentHashMap.CounterCell a;
    int n;
    long v;
    if ((as=counterCells) != null && (n=as.length) > 0) {
      if ((a=as[(n - 1) & h]) == null) {
        if (cellsBusy == 0) {
          ConcurrentHashMap.CounterCell r=new ConcurrentHashMap.CounterCell(x);
          if (cellsBusy == 0 && U.compareAndSwapInt(this,CELLSBUSY,0,1)) {
            boolean created=false;
            try {
              ConcurrentHashMap.CounterCell[] rs;
              int m, j;
              if ((rs=counterCells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {
                rs[j]=r;
                created=true;
              }
            }
  finally {
              cellsBusy=0;
            }
            if (created) {
              break;
            }
            continue;
          }
        }
        collide=false;
      }
 else       if (!wasUncontended) {
        wasUncontended=true;
      }
 else       if (U.compareAndSwapLong(a,CELLVALUE,v=a.value,v + x)) {
        break;
      }
 else       if (counterCells != as || n >= NCPU) {
        collide=false;
      }
 else       if (!collide) {
        collide=true;
      }
 else       if (cellsBusy == 0 && U.compareAndSwapInt(this,CELLSBUSY,0,1)) {
        try {
          if (counterCells == as) {
            ConcurrentHashMap.CounterCell[] rs=new ConcurrentHashMap.CounterCell[n << 1];
            for (int i=0; i < n; ++i) {
              rs[i]=as[i];
            }
            counterCells=rs;
          }
        }
  finally {
          cellsBusy=0;
        }
        collide=false;
        continue;
      }
      h=ThreadLocalRandom.advanceProbe(h);
    }
 else     if (cellsBusy == 0 && counterCells == as && U.compareAndSwapInt(this,CELLSBUSY,0,1)) {
      boolean init=false;
      try {
        if (counterCells == as) {
          ConcurrentHashMap.CounterCell[] rs=new ConcurrentHashMap.CounterCell[2];
          rs[h & 1]=new ConcurrentHashMap.CounterCell(x);
          counterCells=rs;
          init=true;
        }
      }
  finally {
        cellsBusy=0;
      }
      if (init) {
        break;
      }
    }
 else     if (U.compareAndSwapLong(this,BASECOUNT,v=baseCount,v + x)) {
      break;
    }
  }
}
