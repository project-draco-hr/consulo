{
  PsiElement parent;
  if (element instanceof PsiIdentifier && (parent=element.getParent()) instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)parent;
    MethodSignatureBackedByPsiMethod superSignature=null;
    try {
      superSignature=SuperMethodsSearch.search(method,null,true,false).findFirst();
    }
 catch (    IndexNotReadyException e) {
    }
    if (superSignature != null) {
      boolean overrides=method.hasModifierProperty(PsiModifier.ABSTRACT) == superSignature.getMethod().hasModifierProperty(PsiModifier.ABSTRACT);
      final Icon icon=overrides ? OVERRIDING_METHOD_ICON : IMPLEMENTING_METHOD_ICON;
      final MarkerType type=MarkerType.OVERRIDING_METHOD;
      return new ArrowUpLineMarkerInfo(element,icon,type);
    }
  }
  if (myDaemonSettings.SHOW_METHOD_SEPARATORS && element.getFirstChild() == null) {
    PsiElement element1=element;
    boolean isMember=false;
    while (element1 != null && !(element1 instanceof PsiFile) && element1.getPrevSibling() == null) {
      element1=element1.getParent();
      if (element1 instanceof PsiMember) {
        isMember=true;
        break;
      }
    }
    if (isMember && !(element1 instanceof PsiAnonymousClass || element1.getParent() instanceof PsiAnonymousClass)) {
      PsiFile file=element1.getContainingFile();
      Document document=file == null ? null : PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
      boolean drawSeparator=false;
      if (document != null) {
        CharSequence documentChars=document.getCharsSequence();
        int category=getCategory(element1,documentChars);
        for (PsiElement child=element1.getPrevSibling(); child != null; child=child.getPrevSibling()) {
          int category1=getCategory(child,documentChars);
          if (category1 == 0)           continue;
          drawSeparator=category != 1 || category1 != 1;
          break;
        }
      }
      if (drawSeparator) {
        LineMarkerInfo info=new LineMarkerInfo<PsiElement>(element,element.getTextRange(),null,Pass.UPDATE_ALL,FunctionUtil.<Object,String>nullConstant(),null,GutterIconRenderer.Alignment.RIGHT);
        EditorColorsScheme scheme=myColorsManager.getGlobalScheme();
        info.separatorColor=scheme.getColor(CodeInsightColors.METHOD_SEPARATORS_COLOR);
        info.separatorPlacement=SeparatorPlacement.TOP;
        return info;
      }
    }
  }
  return null;
}
