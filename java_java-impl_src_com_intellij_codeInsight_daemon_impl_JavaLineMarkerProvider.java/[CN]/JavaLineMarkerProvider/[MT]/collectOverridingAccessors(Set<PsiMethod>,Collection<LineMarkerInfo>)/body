{
  final Set<PsiMethod> overridden=new HashSet<PsiMethod>();
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  PsiMethod method : methods) {
    ProgressManager.checkCanceled();
    final PsiClass parentClass=method.getContainingClass();
    if (!"java.lang.Object".equals(parentClass.getQualifiedName())) {
      classes.add(parentClass);
    }
  }
  for (  final PsiClass aClass : classes) {
    AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
      @Override public boolean process(      final Pair<PsiMethod,PsiMethod> pair){
        ProgressManager.checkCanceled();
        final PsiMethod superMethod=pair.getFirst();
        if (superMethod.isPhysical() && pair.getSecond().isPhysical() && methods.remove(superMethod)) {
          overridden.add(superMethod);
        }
        return !methods.isEmpty();
      }
    }
);
  }
  for (  PsiMethod method : overridden) {
    ProgressManager.checkCanceled();
    boolean overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
    final Icon icon=overrides ? OVERRIDEN_METHOD_MARKER_RENDERER : IMPLEMENTED_METHOD_MARKER_RENDERER;
    PsiElement range;
    if (method.isPhysical()) {
      range=method.getNameIdentifier();
    }
 else {
      final PsiElement navigationElement=method.getNavigationElement();
      if (navigationElement instanceof PsiNameIdentifierOwner) {
        range=((PsiNameIdentifierOwner)navigationElement).getNameIdentifier();
      }
 else {
        range=navigationElement;
      }
    }
    if (range == null)     range=method;
    final MarkerType type=MarkerType.OVERRIDEN_METHOD;
    LineMarkerInfo info=new LineMarkerInfo<PsiElement>(range,range.getTextRange(),icon,Pass.UPDATE_OVERRIDEN_MARKERS,type.getTooltip(),type.getNavigationHandler(),GutterIconRenderer.Alignment.RIGHT);
    result.add(info);
  }
}
