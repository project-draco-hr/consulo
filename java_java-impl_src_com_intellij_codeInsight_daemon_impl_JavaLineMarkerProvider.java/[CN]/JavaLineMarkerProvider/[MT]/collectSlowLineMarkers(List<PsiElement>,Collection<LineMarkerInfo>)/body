{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  if (elements.isEmpty() || DumbService.getInstance(elements.get(0).getProject()).isDumb()) {
    return;
  }
  Set<PsiMethod> methods=new HashSet<PsiMethod>();
  for (int i=0; i < elements.size(); i++) {
    PsiElement element=elements.get(i);
    ProgressManager.checkCanceled();
    if (element instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)element;
      if (PsiUtil.canBeOverriden(method)) {
        methods.add(method);
      }
    }
 else     if (element instanceof PsiClass && !(element instanceof PsiTypeParameter)) {
      collectInheritingClasses((PsiClass)element,result);
    }
 else     if (element instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)element;
      if (isRecursiveMethodCall(methodCall)) {
        result.add(new RecursiveMethodCallMarkerInfo(methodCall));
      }
    }
  }
  if (!methods.isEmpty()) {
    collectOverridingAccessors(methods,result);
  }
}
