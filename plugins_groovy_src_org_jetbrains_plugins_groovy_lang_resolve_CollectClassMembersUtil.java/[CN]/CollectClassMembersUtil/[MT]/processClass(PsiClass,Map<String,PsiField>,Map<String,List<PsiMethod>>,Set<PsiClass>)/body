{
  if (visitedClasses.contains(aClass))   return;
  visitedClasses.add(aClass);
  for (  PsiField field : aClass.getFields()) {
    String name=field.getName();
    if (!allFields.containsKey(name)) {
      allFields.put(name,field);
    }
    if (field instanceof GrField && field.getName() != null) {
      final GrField property=(GrField)field;
      final PsiMethod getter=property.getGetter();
      if (getter != null)       addMethod(allMethods,getter);
      final PsiMethod setter=property.getSetter();
      if (setter != null)       addMethod(allMethods,setter);
    }
  }
  for (  PsiMethod method : aClass.getMethods()) {
    addMethod(allMethods,method);
  }
  String qName=aClass.getQualifiedName();
  if (qName != null) {
    List<PsiMethod> defaultMethods=GroovyPsiManager.getInstance(aClass.getProject()).getDefaultMethods(qName);
    for (    PsiMethod defaultMethod : defaultMethods) {
      addMethod(allMethods,defaultMethod);
    }
  }
  for (  PsiClassType superType : aClass.getSuperTypes()) {
    PsiClass superClass=superType.resolve();
    if (superClass != null) {
      processClass(superClass,allFields,allMethods,visitedClasses);
    }
  }
}
