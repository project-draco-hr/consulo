{
  if (visitedClasses.contains(aClass))   return;
  visitedClasses.add(aClass);
  for (  PsiField field : aClass.getFields()) {
    String name=field.getName();
    if (!allFields.containsKey(name)) {
      allFields.put(name,new CandidateInfo(field,substitutor));
    }
  }
  for (  PsiMethod method : includeSynthetic || !(aClass instanceof GrTypeDefinition) ? aClass.getMethods() : ((GrTypeDefinition)aClass).getGroovyMethods()) {
    addMethod(allMethods,method,substitutor);
  }
  String qName=aClass.getQualifiedName();
  if (qName != null) {
    List<PsiMethod> defaultMethods=GroovyPsiManager.getInstance(aClass.getProject()).getDefaultMethods(qName);
    for (    PsiMethod defaultMethod : defaultMethods) {
      addMethod(allMethods,defaultMethod,substitutor);
    }
  }
  for (  PsiClassType superType : aClass.getSuperTypes()) {
    PsiClass superClass=superType.resolve();
    if (superClass != null) {
      final PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,aClass,substitutor);
      processClass(superClass,allFields,allMethods,visitedClasses,superSubstitutor,includeSynthetic);
    }
  }
}
