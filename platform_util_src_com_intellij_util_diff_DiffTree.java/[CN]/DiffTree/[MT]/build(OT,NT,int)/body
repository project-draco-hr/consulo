{
  OT oldNode=myOldTree.prepareForGetChildren(oldN);
  NT newNode=myNewTree.prepareForGetChildren(newN);
  if (level >= myNewChildrenLists.size()) {
    myNewChildrenLists.add(new Ref<NT[]>());
    myOldChildrenLists.add(new Ref<OT[]>());
  }
  final Ref<OT[]> oldChildrenR=myOldChildrenLists.get(level);
  int oldSize=myOldTree.getChildren(oldNode,oldChildrenR);
  final OT[] oldChildren=oldChildrenR.get();
  final Ref<NT[]> newChildrenR=myNewChildrenLists.get(level);
  int newSize=myNewTree.getChildren(newNode,newChildrenR);
  final NT[] newChildren=newChildrenR.get();
  if (Math.abs(oldSize - newSize) > CHANGE_PARENT_VERSUS_CHILDREN_THRESHOLD) {
    myConsumer.nodeReplaced(oldNode,newNode);
    disposeLevel(oldChildren,oldSize,newChildren,newSize);
    return;
  }
  final ShallowNodeComparator<OT,NT> comparator=myComparator;
  if (oldSize == 0 && newSize == 0) {
    if (!comparator.hashcodesEqual(oldNode,newNode) || !comparator.typesEqual(oldNode,newNode)) {
      myConsumer.nodeReplaced(oldNode,newNode);
    }
    disposeLevel(oldChildren,oldSize,newChildren,newSize);
    return;
  }
  while (oldSize > 0 && newSize > 0) {
    OT oldChild1=oldChildren[oldSize - 1];
    NT newChild1=newChildren[newSize - 1];
    CompareResult c11=looksEqual(comparator,oldChild1,newChild1);
    if (c11 != CompareResult.EQUAL && c11 != CompareResult.DRILL_DOWN_NEEDED) {
      break;
    }
    if (c11 == CompareResult.DRILL_DOWN_NEEDED) {
      build(oldChild1,newChild1,level + 1);
    }
    oldSize--;
    newSize--;
  }
  int oldIndex=0;
  int newIndex=0;
  while (oldIndex < oldSize || newIndex < newSize) {
    OT oldChild1=oldIndex < oldSize ? oldChildren[oldIndex] : null;
    OT oldChild2=oldIndex < oldSize - 1 ? oldChildren[oldIndex + 1] : null;
    NT newChild1=newIndex < newSize ? newChildren[newIndex] : null;
    NT newChild2=newIndex < newSize - 1 ? newChildren[newIndex + 1] : null;
    CompareResult c11=looksEqual(comparator,oldChild1,newChild1);
    if (c11 == CompareResult.EQUAL || c11 == CompareResult.DRILL_DOWN_NEEDED) {
      if (c11 == CompareResult.DRILL_DOWN_NEEDED) {
        build(oldChild1,newChild1,level + 1);
      }
      oldIndex++;
      newIndex++;
      continue;
    }
    CompareResult c12=looksEqual(comparator,oldChild1,newChild2);
    CompareResult c21=looksEqual(comparator,oldChild2,newChild1);
    if (c11 == CompareResult.TYPE_ONLY) {
      if (c21 == CompareResult.EQUAL || c21 == CompareResult.DRILL_DOWN_NEEDED) {
        myConsumer.nodeDeleted(oldNode,oldChild1);
        oldIndex++;
        continue;
      }
 else       if (c12 == CompareResult.EQUAL || c12 == CompareResult.DRILL_DOWN_NEEDED) {
        myConsumer.nodeInserted(oldNode,newChild1,newIndex);
        newIndex++;
        continue;
      }
 else {
        myConsumer.nodeReplaced(oldChild1,newChild1);
        oldIndex++;
        newIndex++;
        continue;
      }
    }
    if (c12 == CompareResult.EQUAL || c12 == CompareResult.DRILL_DOWN_NEEDED || c12 == CompareResult.TYPE_ONLY) {
      myConsumer.nodeInserted(oldNode,newChild1,newIndex);
      newIndex++;
      continue;
    }
    if (c21 == CompareResult.EQUAL || c21 == CompareResult.DRILL_DOWN_NEEDED || c21 == CompareResult.TYPE_ONLY) {
      myConsumer.nodeDeleted(oldNode,oldChild1);
      oldIndex++;
      continue;
    }
    if (oldChild1 == null) {
      myConsumer.nodeInserted(oldNode,newChild1,newIndex);
      newIndex++;
      continue;
    }
    if (newChild1 == null) {
      myConsumer.nodeDeleted(oldNode,oldChild1);
      oldIndex++;
      continue;
    }
    myConsumer.nodeReplaced(oldChild1,newChild1);
    oldIndex++;
    newIndex++;
  }
  disposeLevel(oldChildren,oldSize,newChildren,newSize);
}
