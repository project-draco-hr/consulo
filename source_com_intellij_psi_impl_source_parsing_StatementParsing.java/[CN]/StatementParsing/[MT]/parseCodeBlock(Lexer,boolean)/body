{
  if (lexer.getTokenType() != JavaTokenType.LBRACE)   return null;
  Lexer badLexer=lexer instanceof StoppableLexerAdapter ? ((StoppableLexerAdapter)lexer).getOriginal() : lexer;
  if (badLexer instanceof FilterLexer) {
    final Lexer original=((FilterLexer)badLexer).getOriginal();
    if (original instanceof AbstractJspJavaLexer) {
      deep=true;
    }
  }
  if (!deep) {
    int start=lexer.getTokenStart();
    lexer.advance();
    int braceCount=1;
    int end;
    while (true) {
      IElementType tokenType=lexer.getTokenType();
      if (tokenType == null) {
        end=lexer.getTokenStart();
        break;
      }
      if (tokenType == JavaTokenType.LBRACE) {
        braceCount++;
      }
 else       if (tokenType == JavaTokenType.RBRACE) {
        braceCount--;
      }
      if (braceCount == 0) {
        end=lexer.getTokenEnd();
        lexer.advance();
        break;
      }
      if (braceCount == 1 && (tokenType == JavaTokenType.SEMICOLON || tokenType == JavaTokenType.RBRACE)) {
        lexer.advance();
        final LexerPosition position=lexer.getCurrentPosition();
        List<IElementType> list=new SmartList<IElementType>();
        while (true) {
          final IElementType type=lexer.getTokenType();
          if (ElementType.PRIMITIVE_TYPE_BIT_SET.contains(type) || type == JavaTokenType.IDENTIFIER || ElementType.MODIFIER_BIT_SET.contains(type) || type == JavaTokenType.LT || type == JavaTokenType.GT || type == JavaTokenType.GTGT || type == JavaTokenType.GTGTGT || type == JavaTokenType.COMMA || type == JavaTokenType.DOT || type == JavaTokenType.EXTENDS_KEYWORD || type == JavaTokenType.IMPLEMENTS_KEYWORD) {
            list.add(type);
            lexer.advance();
          }
 else {
            break;
          }
        }
        if (lexer.getTokenType() == JavaTokenType.LPARENTH && list.size() >= 2) {
          final IElementType last=list.get(list.size() - 1);
          final IElementType prevLast=list.get(list.size() - 2);
          if (last == JavaTokenType.IDENTIFIER && (prevLast == JavaTokenType.IDENTIFIER || ElementType.PRIMITIVE_TYPE_BIT_SET.contains(prevLast))) {
            lexer.restore(position);
            end=lexer.getTokenStart();
            break;
          }
        }
      }
 else {
        lexer.advance();
      }
    }
    final TreeElement chameleon=ASTFactory.lazy(JavaElementType.CODE_BLOCK,myContext.getCharTable().intern(lexer.getBufferSequence(),start,end));
    if (braceCount != 0) {
      chameleon.putUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY,"");
    }
    return chameleon;
  }
 else {
    CompositeElement codeBlock=ASTFactory.lazy(JavaElementType.CODE_BLOCK,null);
    parseCodeBlockDeep(codeBlock,lexer,false);
    return codeBlock;
  }
}
