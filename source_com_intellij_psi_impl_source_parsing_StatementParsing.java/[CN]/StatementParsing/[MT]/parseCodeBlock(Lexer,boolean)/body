{
  if (lexer.getTokenType() != LBRACE)   return null;
  Lexer badLexer=lexer instanceof StoppableLexerAdapter ? ((StoppableLexerAdapter)lexer).getOriginal() : lexer;
  if (badLexer instanceof FilterLexer) {
    final Lexer original=((FilterLexer)badLexer).getOriginal();
    if (original instanceof JavaWithJspTemplateDataLexer || original instanceof JspJavaLexer || original instanceof JspxJavaLexer) {
      deep=true;
    }
  }
  if (!deep) {
    int start=lexer.getTokenStart();
    lexer.advance();
    int braceCount=1;
    int end;
    while (true) {
      IElementType tokenType=lexer.getTokenType();
      if (tokenType == null) {
        end=lexer.getTokenStart();
        break;
      }
      if (tokenType == LBRACE) {
        braceCount++;
      }
 else       if (tokenType == RBRACE) {
        braceCount--;
      }
      if (braceCount == 0) {
        end=lexer.getTokenEnd();
        lexer.advance();
        break;
      }
      lexer.advance();
    }
    final TreeElement chameleon=Factory.createLeafElement(CODE_BLOCK,lexer.getBuffer(),start,end,lexer.getState(),myContext.getCharTable());
    if (braceCount != 0) {
      chameleon.putUserData(ParseUtil.UNCLOSED_ELEMENT_PROPERTY,"");
    }
    return chameleon;
  }
 else {
    CompositeElement codeBlock=Factory.createCompositeElement(CODE_BLOCK);
    parseCodeBlockDeep(codeBlock,lexer,false);
    return codeBlock;
  }
}
