{
  IElementType tokenType=lexer.getTokenType();
  if (myCustomHandlers != null) {
    for (    StatementParsingHandler handler : myCustomHandlers) {
      final StatementParser parser=handler.getParserForToken(tokenType);
      if (parser != null) {
        return parser.parseStatement(lexer);
      }
    }
  }
  if (tokenType == IF_KEYWORD) {
    return parseIfStatement(lexer);
  }
 else   if (tokenType == WHILE_KEYWORD) {
    return parseWhileStatement(lexer);
  }
 else   if (tokenType == FOR_KEYWORD) {
    return parseForStatement(lexer);
  }
 else   if (tokenType == DO_KEYWORD) {
    return parseDoWhileStatement(lexer);
  }
 else   if (tokenType == SWITCH_KEYWORD) {
    return parseSwitchStatement(lexer);
  }
 else   if (tokenType == CASE_KEYWORD || tokenType == DEFAULT_KEYWORD) {
    return parseSwitchLabelStatement(lexer);
  }
 else   if (tokenType == BREAK_KEYWORD) {
    return parseBreakStatement(lexer);
  }
 else   if (tokenType == CONTINUE_KEYWORD) {
    return parseContinueStatement(lexer);
  }
 else   if (tokenType == RETURN_KEYWORD) {
    return parseReturnStatement(lexer);
  }
 else   if (tokenType == THROW_KEYWORD) {
    return parseThrowStatement(lexer);
  }
 else   if (tokenType == SYNCHRONIZED_KEYWORD) {
    return parseSynchronizedStatement(lexer);
  }
 else   if (tokenType == TRY_KEYWORD) {
    return parseTryStatement(lexer);
  }
 else   if (tokenType == ASSERT_KEYWORD) {
    return parseAssertStatement(lexer);
  }
 else   if (tokenType == LBRACE) {
    return parseBlockStatement(lexer);
  }
 else   if (tokenType instanceof IChameleonElementType) {
    LeafElement declaration=ASTFactory.leaf(tokenType,myContext.tokenText(lexer));
    lexer.advance();
    return declaration;
  }
 else   if (tokenType == SEMICOLON) {
{
      CompositeElement element=ASTFactory.composite(EMPTY_STATEMENT);
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      return element;
    }
  }
 else {
{
      if (lexer.getTokenType() == IDENTIFIER) {
        final LexerPosition refPos=lexer.getCurrentPosition();
        skipQualifiedName(lexer);
        final IElementType suspectedLT=lexer.getTokenType();
        lexer.restore(refPos);
        LOG.assertTrue(lexer.getTokenType() == IDENTIFIER);
        if (suspectedLT == LT) {
          final TreeElement decl=myContext.getDeclarationParsing().parseDeclaration(lexer,DeclarationParsing.Context.CODE_BLOCK_CONTEXT);
          CompositeElement declStatement=ASTFactory.composite(DECLARATION_STATEMENT);
          if (decl != null) {
            declStatement.rawAddChildren(decl);
          }
 else {
            final CompositeElement type=parseType(lexer,false,false);
            declStatement.rawAddChildren(type);
            final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.identifier"));
            declStatement.rawAddChildren(errorElement);
          }
          return declStatement;
        }
      }
      final LexerPosition pos=lexer.getCurrentPosition();
      CompositeElement expr=myContext.getExpressionParsing().parseExpression(lexer);
      final LexerPosition pos1=lexer.getCurrentPosition();
      if (expr != null) {
        int count=1;
        CompositeElement element=null;
        while (lexer.getTokenType() == COMMA) {
          CompositeElement list=ASTFactory.composite(EXPRESSION_LIST);
          element=ASTFactory.composite(EXPRESSION_LIST_STATEMENT);
          element.rawAddChildren(list);
          list.rawAddChildren(expr);
          final LexerPosition commaPos=lexer.getCurrentPosition();
          TreeElement comma=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
          lexer.advance();
          CompositeElement expr1=myContext.getExpressionParsing().parseExpression(lexer);
          if (expr1 == null) {
            lexer.restore(commaPos);
            break;
          }
          list.rawAddChildren(comma);
          list.rawAddChildren(expr1);
          count++;
        }
        if (count > 1) {
          processClosingSemicolon(element,lexer);
          return element;
        }
        if (expr.getElementType() != REFERENCE_EXPRESSION) {
          element=ASTFactory.composite(EXPRESSION_STATEMENT);
          element.rawAddChildren(expr);
          processClosingSemicolon(element,lexer);
          return element;
        }
        lexer.restore(pos);
      }
      TreeElement decl=myContext.getDeclarationParsing().parseDeclaration(lexer,DeclarationParsing.Context.CODE_BLOCK_CONTEXT);
      if (decl != null) {
        CompositeElement declStatement=ASTFactory.composite(DECLARATION_STATEMENT);
        declStatement.rawAddChildren(decl);
        return declStatement;
      }
      if (lexer.getTokenType() == IDENTIFIER) {
        TreeElement identifier=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
        lexer.advance();
        if (lexer.getTokenType() != COLON) {
          lexer.restore(pos);
        }
 else {
          CompositeElement element=ASTFactory.composite(LABELED_STATEMENT);
          element.rawAddChildren(identifier);
          element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
          TreeElement statement=parseStatement(lexer);
          if (statement != null) {
            element.rawAddChildren(statement);
          }
          return element;
        }
      }
      if (expr != null) {
        lexer.restore(pos1);
        CompositeElement element=ASTFactory.composite(EXPRESSION_STATEMENT);
        element.rawAddChildren(expr);
        processClosingSemicolon(element,lexer);
        return element;
      }
 else {
        return null;
      }
    }
  }
}
