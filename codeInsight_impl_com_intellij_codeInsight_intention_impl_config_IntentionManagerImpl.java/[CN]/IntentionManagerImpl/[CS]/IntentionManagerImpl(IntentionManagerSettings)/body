{
  mySettings=intentionManagerSettings;
  addAction(new QuickFixAction());
  String[] CONTROL_FLOW_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.control.flow")};
  registerIntentionAndMetaData(new SplitIfAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new InvertIfConditionAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new RemoveRedundantElseAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new AddNotNullAnnotationFix(),CONTROL_FLOW_CATEGORY,"AddAnnotationFix");
  registerIntentionAndMetaData(new AddNullableAnnotationFix(),CONTROL_FLOW_CATEGORY,"AddAnnotationFix");
  registerIntentionAndMetaData(new DeannotateIntentionAction(),CONTROL_FLOW_CATEGORY);
  String[] DECLARATION_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.declaration")};
  registerIntentionAndMetaData(new CreateFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AssignFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new CreateLocalVarFromInstanceofAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new CreateSubclassAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new ImplementAbstractMethodAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SplitDeclarationAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveInitializerToConstructorAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveFieldAssignmentToInitializerAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AddRuntimeExceptionToThrowsAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SimplifyBooleanExpressionAction(),CodeInsightBundle.message("intentions.category.boolean"));
  registerIntentionAndMetaData(new ConcatenationToMessageFormatAction(),CodeInsightBundle.message("intentions.category.i18n"));
  registerIntentionAndMetaData(new MakeTypeGenericAction(),CodeInsightBundle.message("intentions.category.declaration"));
  registerIntentionAndMetaData(new AddOverrideAnnotationAction(),CodeInsightBundle.message("intentions.category.declaration"));
  registerIntentionAndMetaData(new AddOnDemandStaticImportAction(),CodeInsightBundle.message("intentions.category.imports"));
  registerIntentionAndMetaData(new AddSingleMemberStaticImportAction(),CodeInsightBundle.message("intentions.category.imports"));
  addAction(new EditFoldingOptionsAction());
  addAction(new EditInspectionToolsSettingsInSuppressedPlaceIntention());
  final ExtensionPoint<IntentionActionBean> point=Extensions.getArea(null).getExtensionPoint(EP_INTENTION_ACTIONS);
  point.addExtensionPointListener(new ExtensionPointListener<IntentionActionBean>(){
    public void extensionAdded(    final IntentionActionBean extension,    @Nullable final PluginDescriptor pluginDescriptor){
      registerIntentionFromBean(extension,pluginDescriptor);
    }
    public void extensionRemoved(    final IntentionActionBean extension,    @Nullable final PluginDescriptor pluginDescriptor){
    }
  }
);
}
