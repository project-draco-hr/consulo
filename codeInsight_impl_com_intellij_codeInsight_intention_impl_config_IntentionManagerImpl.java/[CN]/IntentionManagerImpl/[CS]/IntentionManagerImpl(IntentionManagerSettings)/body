{
  mySettings=intentionManagerSettings;
  addAction(new QuickFixAction());
  String[] CONTROL_FLOW_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.control.flow")};
  registerIntentionAndMetaData(new SplitIfAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new InvertIfConditionAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new RemoveRedundantElseAction(),CONTROL_FLOW_CATEGORY);
  String[] DECLARATION_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.declaration")};
  registerIntentionAndMetaData(new CreateFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AssignFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new CreateLocalVarFromInstanceofAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new ImplementAbstractClassAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new ImplementAbstractMethodAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SplitDeclarationAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveInitializerToConstructorAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveFieldAssignmentToInitializerAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AddRuntimeExceptionToThrowsAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SimplifyBooleanExpressionAction(),CodeInsightBundle.message("intentions.category.boolean"));
  registerIntentionAndMetaData(new ConcatenationToMessageFormatAction(),CodeInsightBundle.message("intentions.category.i18n"));
  registerIntentionAndMetaData(new MakeTypeGenericAction(),CodeInsightBundle.message("intentions.category.declaration"));
  registerIntentionAndMetaData(new AddOverrideAnnotationAction(),CodeInsightBundle.message("intentions.category.declaration"));
  registerIntentionAndMetaData(new AddOnDemandStaticImportAction(),CodeInsightBundle.message("intentions.category.imports"));
  registerIntentionAndMetaData(new AddSingleMemberStaticImportAction(),CodeInsightBundle.message("intentions.category.imports"));
  addAction(new EditFoldingOptionsAction());
  addAction(new EditInspectionToolsSettingsInSuppressedPlaceIntention());
  Extensions.getArea(null).getExtensionPoint(EP_INTENTION_ACTIONS).addExtensionPointListener(new ExtensionPointListener<IntentionActionBean>(){
    public void extensionAdded(    final IntentionActionBean extension,    @Nullable final PluginDescriptor pluginDescriptor){
      ClassLoader classLoader=pluginDescriptor != null ? pluginDescriptor.getPluginClassLoader() : getClass().getClassLoader();
      try {
        final Class<?> aClass=Class.forName(extension.getClassName(),true,classLoader);
        final String descriptionDirectoryName=extension.getDescriptionDirectoryName();
        if (descriptionDirectoryName != null) {
          registerIntentionAndMetaData((IntentionAction)aClass.newInstance(),extension.getClassName(),descriptionDirectoryName);
        }
 else {
          registerIntentionAndMetaData((IntentionAction)aClass.newInstance(),extension.getCategories());
        }
      }
 catch (      ClassNotFoundException e) {
        LOG.error(e);
      }
catch (      IllegalAccessException e) {
        LOG.error(e);
      }
catch (      InstantiationException e) {
        LOG.error(e);
      }
    }
    public void extensionRemoved(    final IntentionActionBean extension,    @Nullable final PluginDescriptor pluginDescriptor){
      throw new UnsupportedOperationException("Method extensionRemoved is not supported in " + getClass());
    }
  }
);
}
