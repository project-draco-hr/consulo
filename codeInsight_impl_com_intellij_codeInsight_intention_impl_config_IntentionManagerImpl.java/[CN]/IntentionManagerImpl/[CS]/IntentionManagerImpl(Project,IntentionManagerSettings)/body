{
  myProject=project;
  mySettings=intentionManagerSettings;
  addAction(new QuickFixAction());
  addAction(new PostIntentionsQuickFixAction());
  String[] CONTROL_FLOW_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.control.flow")};
  registerIntentionAndMetaData(new SplitIfAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new InvertIfConditionAction(),CONTROL_FLOW_CATEGORY);
  registerIntentionAndMetaData(new RemoveRedundantElseAction(),CONTROL_FLOW_CATEGORY);
  String[] DECLARATION_CATEGORY=new String[]{CodeInsightBundle.message("intentions.category.declaration")};
  registerIntentionAndMetaData(new CreateFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AssignFieldFromParameterAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new CreateLocalVarFromInstanceofAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new ImplementAbstractClassAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new ImplementAbstractMethodAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SplitDeclarationAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveInitializerToConstructorAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new MoveFieldAssignmentToInitializerAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new AddRuntimeExceptionToThrowsAction(),DECLARATION_CATEGORY);
  registerIntentionAndMetaData(new SimplifyBooleanExpressionAction(),CodeInsightBundle.message("intentions.category.boolean"));
  registerIntentionAndMetaData(new ConcatenationToMessageFormatAction(),CodeInsightBundle.message("intentions.category.i18n"));
}
