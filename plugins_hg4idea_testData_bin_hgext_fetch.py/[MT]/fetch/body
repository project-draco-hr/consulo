def fetch(ui, repo, source='default', **opts):
    'pull changes from a remote repository, merge new changes if needed.\n\n    This finds all changes from the repository at the specified path\n    or URL and adds them to the local repository.\n\n    If the pulled changes add a new branch head, the head is\n    automatically merged, and the result of the merge is committed.\n    Otherwise, the working directory is updated to include the new\n    changes.\n\n    When a merge occurs, the newly pulled changes are assumed to be\n    "authoritative". The head of the new changes is used as the first\n    parent, with local changes as the second. To switch the merge\n    order, use --switch-parent.\n\n    See \'hg help dates\' for a list of formats valid for -d/--date.\n    '
    date = opts.get('date')
    if date:
        opts['date'] = util.parsedate(date)
    (parent, p2) = repo.dirstate.parents()
    branch = repo.dirstate.branch()
    branchnode = repo.branchtags().get(branch)
    if (parent != branchnode):
        raise util.Abort(_('working dir not at branch tip (use "hg update" to check out branch tip)'))
    if (p2 != nullid):
        raise util.Abort(_('outstanding uncommitted merge'))
    wlock = lock = None
    try:
        wlock = repo.wlock()
        lock = repo.lock()
        (mod, add, rem, del_) = repo.status()[:4]
        if (mod or add or rem):
            raise util.Abort(_('outstanding uncommitted changes'))
        if del_:
            raise util.Abort(_('working directory is missing some files'))
        bheads = repo.branchheads(branch)
        bheads = [head for head in bheads if (len(repo[head].children()) == 0)]
        if (len(bheads) > 1):
            raise util.Abort(_('multiple heads in this branch (use "hg heads ." and "hg merge" to merge)'))
        other = hg.repository(cmdutil.remoteui(repo, opts), ui.expandpath(source))
        ui.status((_('pulling from %s\n') % url.hidepassword(ui.expandpath(source))))
        revs = None
        if opts['rev']:
            try:
                revs = [other.lookup(rev) for rev in opts['rev']]
            except error.CapabilityError:
                err = _("Other repository doesn't support revision lookup, so a rev cannot be specified.")
                raise util.Abort(err)
        modheads = repo.pull(other, heads=revs)
        if (modheads == 0):
            return 0
        newheads = repo.branchheads(branch)
        newchildren = repo.changelog.nodesbetween([parent], newheads)[2]
        if (len(newheads) == 1):
            if (newchildren[0] != parent):
                return hg.clean(repo, newchildren[0])
            else:
                return
        newchildren = [n for n in newchildren if (n != parent)]
        newparent = parent
        if newchildren:
            newparent = newchildren[0]
            hg.clean(repo, newparent)
        newheads = [n for n in newheads if (n != newparent)]
        if (len(newheads) > 1):
            ui.status((_('not merging with %d other new branch heads (use "hg heads ." and "hg merge" to merge them)\n') % (len(newheads) - 1)))
            return
        err = False
        if newheads:
            if opts['switch_parent']:
                (firstparent, secondparent) = (newparent, newheads[0])
            else:
                (firstparent, secondparent) = (newheads[0], newparent)
                ui.status((_('updating to %d:%s\n') % (repo.changelog.rev(firstparent), short(firstparent))))
            hg.clean(repo, firstparent)
            ui.status((_('merging with %d:%s\n') % (repo.changelog.rev(secondparent), short(secondparent))))
            err = hg.merge(repo, secondparent, remind=False)
        if (not err):
            message = (cmdutil.logmessage(opts) or ('Automated merge with %s' % url.removeauth(other.url())))
            editor = cmdutil.commiteditor
            if (opts.get('force_editor') or opts.get('edit')):
                editor = cmdutil.commitforceeditor
            n = repo.commit(message, opts['user'], opts['date'], editor=editor)
            ui.status((_('new changeset %d:%s merges remote changes with local\n') % (repo.changelog.rev(n), short(n))))
    finally:
        release(lock, wlock)
