{
  myConsole=executionResult.getExecutionConsole();
  myRunContentDescriptor=new RunContentDescriptor(myConsole,executionResult.getProcessHandler(),myUi.getComponent(),getSessionName(),myIcon);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return myRunContentDescriptor;
  }
  myUi.removeContent(myUi.findContent(DebuggerContentInfo.CONSOLE_CONTENT),true);
  Content console=null;
  if (myConsole instanceof ExecutionConsoleEx) {
    ((ExecutionConsoleEx)myConsole).buildUi(myUi);
    console=myUi.findContent(DebuggerContentInfo.CONSOLE_CONTENT);
    if (console == null) {
      LOG.debug("Reuse console created with non-debug runner");
    }
  }
  if (console == null) {
    console=myUi.createContent(DebuggerContentInfo.CONSOLE_CONTENT,myConsole.getComponent(),XDebuggerBundle.message("debugger.session.tab.console.content.name"),AllIcons.Debugger.Console,myConsole.getPreferredFocusableComponent());
    console.setCloseable(false);
    myUi.addContent(console,1,PlaceInGrid.bottom,false);
  }
  attachNotificationTo(console);
  if (myConsole != null) {
    Disposer.register(this,myConsole);
  }
  final DefaultActionGroup consoleActions=new DefaultActionGroup();
  if (myConsole instanceof ConsoleView) {
    AnAction[] actions=((ConsoleView)myConsole).createConsoleActions();
    for (    AnAction goaction : actions) {
      consoleActions.add(goaction);
    }
  }
  console.setActions(consoleActions,ActionPlaces.DEBUGGER_TOOLBAR,myConsole.getPreferredFocusableComponent());
  myEnvironment.initLogs(myRunContentDescriptor,getLogManager());
  DefaultActionGroup group=new DefaultActionGroup();
  if (executionResult instanceof DefaultExecutionResult) {
    final AnAction[] actions=((DefaultExecutionResult)executionResult).getRestartActions();
    if (actions != null) {
      group.addAll(actions);
      if (actions.length > 0) {
        group.addSeparator();
      }
    }
  }
  final AnAction[] profileActions=executionResult.getActions();
  group.addAll(profileActions);
  addActionToGroup(group,XDebuggerActions.RESUME);
  addActionToGroup(group,XDebuggerActions.PAUSE);
  addActionToGroup(group,IdeActions.ACTION_STOP_PROGRAM);
  if (executionResult instanceof DefaultExecutionResult) {
    group.addAll(((DefaultExecutionResult)executionResult).getAdditionalStopActions());
  }
  group.addSeparator();
  addActionToGroup(group,XDebuggerActions.VIEW_BREAKPOINTS);
  addActionToGroup(group,XDebuggerActions.MUTE_BREAKPOINTS);
  group.addSeparator();
  addAction(group,DebuggerActions.EXPORT_THREADS);
  addAction(group,DebuggerActions.DUMP_THREADS);
  group.addSeparator();
  group.add(myUi.getOptions().getLayoutActions());
  final AnAction[] commonSettings=myUi.getOptions().getSettingsActionsList();
  final AnAction commonSettingsList=myUi.getOptions().getSettingsActions();
  final DefaultActionGroup settings=new DefaultActionGroup("DebuggerSettings",true){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setText(ActionsBundle.message("group.XDebugger.settings.text"));
      e.getPresentation().setIcon(commonSettingsList.getTemplatePresentation().getIcon());
    }
    @Override public boolean isDumbAware(){
      return true;
    }
  }
;
  for (  AnAction each : commonSettings) {
    settings.add(each);
  }
  if (commonSettings.length > 0) {
    settings.addSeparator();
  }
  settings.add(new WatchLastMethodReturnValueAction());
  settings.add(new AutoVarsSwitchAction());
  settings.addSeparator();
  addActionToGroup(settings,XDebuggerActions.AUTO_TOOLTIP);
  group.add(settings);
  group.addSeparator();
  addActionToGroup(group,PinToolwindowTabAction.ACTION_NAME);
  myEnvironment.initActions(myRunContentDescriptor,group);
  myUi.getOptions().setLeftToolbar(group,ActionPlaces.DEBUGGER_TOOLBAR);
  return myRunContentDescriptor;
}
