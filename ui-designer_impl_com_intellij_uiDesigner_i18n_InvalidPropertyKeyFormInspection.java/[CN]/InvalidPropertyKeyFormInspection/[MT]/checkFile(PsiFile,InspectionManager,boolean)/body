{
  if (file.getFileType().equals(StdFileTypes.GUI_DESIGNER_FORM)) {
    final Module module=ModuleUtil.getModuleForFile(file.getProject(),file.getVirtualFile());
    if (module == null) {
      return null;
    }
    final LwRootContainer rootContainer;
    try {
      rootContainer=Utils.getRootContainer(file.getText(),new PsiPropertiesProvider(module));
    }
 catch (    Exception e) {
      return null;
    }
    final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
    FormEditingUtil.iterateStringDescriptors(rootContainer,new FormEditingUtil.StringDescriptorVisitor<LwComponent>(){
      public boolean visit(      final LwComponent component,      final StringDescriptor descriptor){
        final ErrorInfo errorInfo=checkDescriptor(null,descriptor,module);
        if (errorInfo != null) {
          problems.add(manager.createProblemDescriptor(file,errorInfo.myDescription,(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
        return true;
      }
    }
);
    if (problems.size() > 0) {
      return problems.toArray(new ProblemDescriptor[problems.size()]);
    }
  }
  return null;
}
