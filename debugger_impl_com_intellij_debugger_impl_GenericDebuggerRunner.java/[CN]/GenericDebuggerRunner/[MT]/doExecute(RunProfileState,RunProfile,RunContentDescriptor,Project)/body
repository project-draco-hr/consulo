{
  final boolean addHistoryLabel=LocalHistoryConfiguration.getInstance().ADD_LABEL_ON_RUNNING;
  RunContentDescriptor contentDescriptor=null;
  final DebuggerPanelsManager manager=DebuggerPanelsManager.getInstance(project);
  if (state instanceof JavaCommandLine) {
    FileDocumentManager.getInstance().saveAllDocuments();
    final JavaCommandLine javaCommandLine=(JavaCommandLine)state;
    if (addHistoryLabel) {
      LocalHistory.putLabel(project,DebuggerBundle.message("debugger.runner.vcs.label.debugging",runProfile.getName()));
    }
    RemoteConnection connection=DebuggerManagerImpl.createDebugParameters(javaCommandLine.getJavaParameters(),true,DebuggerSettings.getInstance().DEBUGGER_TRANSPORT,"",false);
    contentDescriptor=manager.attachVirtualMachine(runProfile,this,javaCommandLine,reuseContent,connection,true);
  }
 else   if (state instanceof PatchedRunnableState) {
    FileDocumentManager.getInstance().saveAllDocuments();
    if (addHistoryLabel) {
      LocalHistory.putLabel(project,DebuggerBundle.message("debugger.runner.vcs.label.debugging",runProfile.getName()));
    }
    final RemoteConnection connection=doPatch(new JavaParameters(),state.getRunnerSettings());
    contentDescriptor=manager.attachVirtualMachine(runProfile,this,state,reuseContent,connection,true);
  }
 else   if (state instanceof RemoteState) {
    FileDocumentManager.getInstance().saveAllDocuments();
    if (addHistoryLabel) {
      LocalHistory.putLabel(project,DebuggerBundle.message("debugger.runner.vcs.label.remote.debug",runProfile.getName()));
    }
    RemoteState remoteState=(RemoteState)state;
    final RemoteConnection connection=createRemoteDebugConnection(remoteState,state.getRunnerSettings());
    contentDescriptor=manager.attachVirtualMachine(runProfile,this,remoteState,reuseContent,connection,false);
  }
  return contentDescriptor != null ? contentDescriptor : null;
}
