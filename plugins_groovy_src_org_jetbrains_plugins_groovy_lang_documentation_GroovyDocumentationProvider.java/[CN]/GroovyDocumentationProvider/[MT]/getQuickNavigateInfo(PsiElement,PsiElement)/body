{
  if (element instanceof GrVariable || element instanceof GrImplicitVariable) {
    StringBuilder buffer=new StringBuilder();
    PsiVariable variable=(PsiVariable)element;
    if (originalElement instanceof GrVariableDeclaration && ((GrVariableDeclaration)originalElement).getVariables().length > 1) {
      for (      GrVariable var : ((GrVariableDeclaration)originalElement).getVariables()) {
        generateVariableInfo(originalElement,buffer,var);
        buffer.append("\n\n");
      }
    }
 else {
      generateVariableInfo(originalElement,buffer,variable);
    }
    return buffer.toString();
  }
 else   if (element instanceof GrReferenceExpression) {
    GrReferenceExpression refExpr=(GrReferenceExpression)element;
    StringBuilder buffer=new StringBuilder();
    PsiType type=null;
    if (refExpr.getParent() instanceof GrAssignmentExpression) {
      GrAssignmentExpression assignment=(GrAssignmentExpression)refExpr.getParent();
      if (refExpr.equals(assignment.getLValue())) {
        GrExpression rvalue=assignment.getRValue();
        if (rvalue != null) {
          type=rvalue.getType();
        }
      }
    }
    appendTypeString(buffer,type,PsiSubstitutor.EMPTY);
    buffer.append(" ");
    buffer.append(refExpr.getReferenceName());
    return buffer.toString();
  }
 else   if (element instanceof PsiMethod) {
    StringBuilder buffer=new StringBuilder();
    PsiMethod method=(PsiMethod)element;
    if (method instanceof GrGdkMethod) {
      buffer.append("[GDK] ");
    }
 else {
      PsiClass hisClass=method.getContainingClass();
      if (hisClass != null) {
        String qName=hisClass.getQualifiedName();
        if (qName != null) {
          buffer.append(qName).append("\n");
        }
      }
    }
    PsiSubstitutor substitutor=calcSubstitutor(originalElement);
    if (!method.isConstructor()) {
      appendTypeString(buffer,PsiUtil.getSmartReturnType(method),substitutor);
      buffer.append(" ");
    }
    buffer.append(method.getName()).append(" ");
    buffer.append("(");
    PsiParameter[] parameters=method.getParameterList().getParameters();
    for (int i=0; i < parameters.length; i++) {
      PsiParameter parameter=parameters[i];
      if (i > 0)       buffer.append(", ");
      if (parameter instanceof GrParameter) {
        GroovyPresentationUtil.appendParameterPresentation((GrParameter)parameter,substitutor,false,buffer);
      }
 else {
        PsiType type=parameter.getType();
        appendTypeString(buffer,type,substitutor);
        buffer.append(" ");
        buffer.append(parameter.getName());
      }
    }
    buffer.append(")");
    final PsiClassType[] referencedTypes=method.getThrowsList().getReferencedTypes();
    if (referencedTypes.length > 0) {
      buffer.append("\nthrows ");
      for (      PsiClassType referencedType : referencedTypes) {
        appendTypeString(buffer,referencedType,PsiSubstitutor.EMPTY);
        buffer.append(", ");
      }
      buffer.delete(buffer.length() - 2,buffer.length());
    }
    return buffer.toString();
  }
 else   if (element instanceof GrTypeDefinition) {
    return generateClassInfo((GrTypeDefinition)element);
  }
  return null;
}
