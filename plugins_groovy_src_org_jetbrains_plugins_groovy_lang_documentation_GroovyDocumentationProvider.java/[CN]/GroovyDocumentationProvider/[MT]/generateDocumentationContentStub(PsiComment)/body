{
  if (!(contextComment instanceof GrDocComment)) {
    return null;
  }
  final GrDocCommentOwner owner=GrDocCommentUtil.findDocOwner((GrDocComment)contextComment);
  if (owner == null)   return null;
  Project project=contextComment.getProject();
  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage());
  StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    if (owner instanceof GrMethod) {
      final GrMethod method=(GrMethod)owner;
      final GrParameter[] parameters=method.getParameters();
      final Map<String,String> param2Description=new HashMap<String,String>();
      final PsiMethod[] superMethods=method.findSuperMethods();
      for (      PsiMethod superMethod : superMethods) {
        final PsiDocComment comment=superMethod.getDocComment();
        if (comment != null) {
          final PsiDocTag[] params=comment.findTagsByName("param");
          for (          PsiDocTag param : params) {
            final PsiElement[] dataElements=param.getDataElements();
            if (dataElements != null) {
              String paramName=null;
              for (              PsiElement dataElement : dataElements) {
                if (dataElement instanceof PsiDocParamRef) {
                  paramName=dataElement.getReference().getCanonicalText();
                  break;
                }
              }
              if (paramName != null) {
                param2Description.put(paramName,param.getText());
              }
            }
          }
        }
      }
      for (      PsiParameter parameter : parameters) {
        String description=param2Description.get(parameter.getName());
        if (description != null) {
          builder.append(CodeDocumentationUtil.createDocCommentLine("",project,commenter));
          if (description.indexOf('\n') > -1)           description=description.substring(0,description.lastIndexOf('\n'));
          builder.append(description);
        }
 else {
          builder.append(CodeDocumentationUtil.createDocCommentLine(PARAM_TAG,project,commenter));
          builder.append(parameter.getName());
        }
        builder.append(LINE_SEPARATOR);
      }
      final PsiType returnType=method.getInferredReturnType();
      if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && returnType != PsiType.VOID) {
        builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG,project,commenter));
        builder.append(LINE_SEPARATOR);
      }
      final PsiClassType[] references=method.getThrowsList().getReferencedTypes();
      for (      PsiClassType reference : references) {
        builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG,project,commenter));
        builder.append(reference.getClassName());
        builder.append(LINE_SEPARATOR);
      }
    }
 else     if (owner instanceof GrTypeDefinition) {
      final PsiTypeParameterList typeParameterList=((PsiClass)owner).getTypeParameterList();
      if (typeParameterList != null) {
        createTypeParamsListComment(builder,project,commenter,typeParameterList);
      }
    }
    return builder.length() > 0 ? builder.toString() : null;
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
