{
  StringBuilder buffer=new StringBuilder();
  GroovyFile file=(GroovyFile)aClass.getContainingFile();
  String packageName=file.getPackageName();
  if (packageName.length() > 0) {
    buffer.append(packageName).append("\n");
  }
  final String classString=aClass.isInterface() ? "interface" : aClass instanceof PsiTypeParameter ? "type parameter" : aClass.isEnum() ? "enum" : "class";
  buffer.append(classString).append(" ").append(aClass.getName());
  if (aClass.hasTypeParameters()) {
    PsiTypeParameter[] typeParameters=aClass.getTypeParameters();
    buffer.append("<");
    for (int i=0; i < typeParameters.length; i++) {
      if (i > 0)       buffer.append(", ");
      PsiTypeParameter tp=typeParameters[i];
      buffer.append(tp.getName());
      PsiClassType[] refs=tp.getExtendsListTypes();
      if (refs.length > 0) {
        buffer.append(" extends ");
        for (int j=0; j < refs.length; j++) {
          if (j > 0)           buffer.append(" & ");
          appendTypeString(buffer,refs[j],PsiSubstitutor.EMPTY);
        }
      }
    }
    buffer.append(">");
  }
  PsiClassType[] refs=aClass.getExtendsListTypes();
  if (refs.length > 0 || !aClass.isInterface() && !CommonClassNames.JAVA_LANG_OBJECT.equals(aClass.getQualifiedName())) {
    buffer.append(" extends ");
    if (refs.length == 0) {
      buffer.append("Object");
    }
 else {
      for (int i=0; i < refs.length; i++) {
        if (i > 0)         buffer.append(", ");
        appendTypeString(buffer,refs[i],PsiSubstitutor.EMPTY);
      }
    }
  }
  refs=aClass.getImplementsListTypes();
  if (refs.length > 0) {
    buffer.append("\nimplements ");
    for (int i=0; i < refs.length; i++) {
      if (i > 0)       buffer.append(", ");
      appendTypeString(buffer,refs[i],PsiSubstitutor.EMPTY);
    }
  }
  return buffer.toString();
}
