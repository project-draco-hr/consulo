{
  if (modifierList == null || isInJavaDoc(place)) {
    return true;
  }
  if (placeFile instanceof JavaCodeFragment) {
    JavaCodeFragment fragment=(JavaCodeFragment)placeFile;
    JavaCodeFragment.VisibilityChecker visibilityChecker=fragment.getVisibilityChecker();
    if (visibilityChecker != null) {
      JavaCodeFragment.VisibilityChecker.Visibility visibility=visibilityChecker.isDeclarationVisible(member,place);
      if (visibility == JavaCodeFragment.VisibilityChecker.Visibility.VISIBLE)       return true;
      if (visibility == JavaCodeFragment.VisibilityChecker.Visibility.NOT_VISIBLE)       return false;
    }
  }
 else   if (ignoreReferencedElementAccessibility(placeFile)) {
    return true;
  }
  if (accessObjectClass != null) {
    PsiClass containingClass=accessObjectClass.getContainingClass();
    if (!isAccessible(accessObjectClass,containingClass,accessObjectClass.getModifierList(),place,null,null,placeFile)) {
      return false;
    }
  }
  PsiFile file=placeFile == null ? null : FileContextUtil.getContextFile(placeFile);
  if (PsiImplUtil.isInServerPage(file) && PsiImplUtil.isInServerPage(member.getContainingFile())) {
    return true;
  }
  int effectiveAccessLevel=PsiUtil.getAccessLevel(modifierList);
  if (ignoreReferencedElementAccessibility(file) || effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PUBLIC) {
    return true;
  }
  PsiManager manager=member.getManager();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  if (effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PROTECTED) {
    if (facade.arePackagesTheSame(member,place)) {
      return true;
    }
    if (memberClass == null) {
      return false;
    }
    for (PsiElement placeParent=place; placeParent != null; placeParent=placeParent.getContext()) {
      if (placeParent instanceof PsiClass && InheritanceUtil.isInheritorOrSelf((PsiClass)placeParent,memberClass,true)) {
        if (member instanceof PsiClass || modifierList.hasModifierProperty(PsiModifier.STATIC) || accessObjectClass == null || InheritanceUtil.isInheritorOrSelf(accessObjectClass,(PsiClass)placeParent,true)) {
          return true;
        }
      }
    }
    return false;
  }
  if (effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PRIVATE) {
    if (memberClass == null)     return true;
    if (accessObjectClass != null) {
      PsiClass topMemberClass=getTopLevelClass(memberClass,accessObjectClass);
      PsiClass topAccessClass=getTopLevelClass(accessObjectClass,memberClass);
      if (!manager.areElementsEquivalent(topMemberClass,topAccessClass))       return false;
    }
    if (fileResolveScope == null) {
      PsiClass placeTopLevelClass=getTopLevelClass(place,null);
      PsiClass memberTopLevelClass=getTopLevelClass(memberClass,null);
      return manager.areElementsEquivalent(placeTopLevelClass,memberTopLevelClass);
    }
 else {
      return fileResolveScope instanceof PsiClass && !((PsiClass)fileResolveScope).isInheritor(memberClass,true);
    }
  }
  if (!facade.arePackagesTheSame(member,place))   return false;
  if (modifierList.hasModifierProperty(PsiModifier.STATIC))   return true;
  final PsiClass placeClass=getContextClass(place);
  if (memberClass == null || placeClass == null)   return true;
  if (memberClass.isInterface() || placeClass.isInterface())   return true;
  PsiClass clazz=accessObjectClass != null ? accessObjectClass : placeClass.getSuperClass();
  if (clazz != null && clazz.isInheritor(memberClass,true)) {
    PsiClass superClass=clazz;
    while (!manager.areElementsEquivalent(superClass,memberClass)) {
      if (superClass == null || !facade.arePackagesTheSame(superClass,memberClass))       return false;
      superClass=superClass.getSuperClass();
    }
  }
  return true;
}
