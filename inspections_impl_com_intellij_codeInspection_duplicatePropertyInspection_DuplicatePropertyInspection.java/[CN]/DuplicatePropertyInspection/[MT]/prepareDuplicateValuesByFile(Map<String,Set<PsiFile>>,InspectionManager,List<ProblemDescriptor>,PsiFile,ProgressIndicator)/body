{
  for (  String value : valueToFiles.keySet()) {
    if (progress != null) {
      progress.setText2(InspectionsBundle.message("duplicate.property.value.progress.indicator.text",value));
      if (progress.isCanceled())       throw new ProcessCanceledException();
    }
    StringSearcher searcher=new StringSearcher(value);
    StringBuffer message=new StringBuffer();
    int duplicatesCount=0;
    Set<PsiFile> psiFilesWithDuplicates=valueToFiles.get(value);
    for (    PsiFile file : psiFilesWithDuplicates) {
      CharSequence text=file.getViewProvider().getContents();
      for (int offset=LowLevelSearchUtil.searchWord(text,0,text.length(),searcher); offset >= 0; offset=LowLevelSearchUtil.searchWord(text,offset + searcher.getPattern().length(),text.length(),searcher)) {
        PsiElement element=file.findElementAt(offset);
        if (element != null && element.getParent() instanceof Property) {
          final Property property=((Property)element.getParent());
          if (Comparing.equal(property.getValue(),value) && element.getStartOffsetInParent() != 0) {
            if (duplicatesCount == 0) {
              message.append(InspectionsBundle.message("duplicate.property.value.problem.descriptor",property.getValue()));
            }
            surroundWithHref(message,element,true);
            duplicatesCount++;
          }
        }
      }
    }
    if (duplicatesCount > 1) {
      problemDescriptors.add(manager.createProblemDescriptor(psiFile,message.toString(),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
  }
}
