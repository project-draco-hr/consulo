{
  IElementType elemType=child.getNode().getElementType();
  String text=child.getText();
  if (TokenSets.NUMBERS.contains(elemType)) {
    text=text.replaceAll("_","");
    try {
      if (elemType == mNUM_INT) {
        return Integer.parseInt(text);
      }
 else       if (elemType == mNUM_LONG) {
        return Long.parseLong(text);
      }
 else       if (elemType == mNUM_FLOAT) {
        return Float.parseFloat(text);
      }
 else       if (elemType == mNUM_DOUBLE) {
        return Double.parseDouble(text);
      }
 else       if (elemType == mNUM_BIG_INT) {
        return new BigInteger(text);
      }
 else       if (elemType == mNUM_BIG_DECIMAL) {
        return new BigDecimal(text);
      }
    }
 catch (    NumberFormatException ignored) {
    }
  }
 else   if (elemType == kFALSE) {
    return Boolean.FALSE;
  }
 else   if (elemType == kTRUE) {
    return Boolean.TRUE;
  }
 else   if (elemType == mSTRING_LITERAL) {
    if (!text.startsWith("'"))     return null;
    text=text.substring(1);
    if (text.endsWith("'")) {
      text=text.substring(0,text.length() - 1);
    }
    StringBuilder chars=new StringBuilder(text.length());
    boolean result=GrStringUtil.parseStringCharacters(text,chars,null,true);
    return result ? chars.toString() : null;
  }
 else   if (elemType == mGSTRING_LITERAL) {
    if (!text.startsWith("\""))     return null;
    if (text.startsWith("\"\"\"")) {
      text=StringUtil.trimEnd(text.substring(3),"\"\"\"");
    }
 else {
      text=StringUtil.trimEnd(text.substring(1),"\"");
    }
    StringBuilder chars=new StringBuilder(text.length());
    boolean result=GrStringUtil.parseStringCharacters(text,chars,null,true);
    return result ? chars.toString() : null;
  }
 else   if (elemType == mREGEX_LITERAL) {
    text=StringUtil.trimStart(StringUtil.trimEnd(text,"/"),"/");
    StringBuilder chars=new StringBuilder(text.length());
    boolean result=GrStringUtil.parseStringCharacters(text,chars,null,false);
    return result ? chars.toString() : null;
  }
  return null;
}
