{
  myPopupBuilder=new MasterDetailPopupBuilder(myProject);
  if (!myPlainView) {
    myPopupBuilder.setDimensionServiceKey(getClass().getName());
    myPopupBuilder.setCancelOnClickOutside(false);
  }
  myPopupBuilder.setCancelOnWindowDeactivation(false);
  DetailViewImpl view=null;
  if (myDetailView != null) {
    myPopupBuilder.setDetailView(myDetailView);
  }
 else {
    view=new DetailViewImpl(myProject);
    myPopupBuilder.setDetailView(view);
  }
  myPopupBuilder.setAddDetailViewToEast(myAddDetailViewToEast);
  for (  BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
    provider.createBreakpointsGroupingRules(myRulesAvailable);
  }
  if (!myIsViewer) {
    myRulesEnabled=getInitialGroupingRules();
  }
  DefaultActionGroup actions=createActions();
  myTreeController=new BreakpointItemsTreeController(myRulesEnabled);
  JTree tree=myIsViewer ? new BreakpointsSimpleTree(myTreeController) : new BreakpointsCheckboxTree(myTreeController);
  if (myPlainView) {
    tree.putClientProperty("plainView",Boolean.TRUE);
  }
  myTreeController.setTreeView(tree);
  collectItems();
  myTreeController.buildTree(myBreakpointItems);
  final BreakpointPanelProvider.BreakpointsListener listener=new BreakpointPanelProvider.BreakpointsListener(){
    @Override public void breakpointsChanged(){
      collectItems();
      myTreeController.rebuildTree(myBreakpointItems);
    }
  }
;
  for (  BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
    provider.addListener(listener,myProject);
  }
  final MasterDetailPopupBuilder.Delegate delegate=new MasterDetailPopupBuilder.Delegate(){
    @Nullable @Override public String getTitle(){
      return "";
    }
    @Override public void handleMnemonic(    KeyEvent e,    Project project,    JBPopup popup){
    }
    public JComponent createAccessoryView(    Project project){
      return new JCheckBox();
    }
    @Override public Object[] getSelectedItemsInTree(){
      final List<BreakpointItem> res=myTreeController.getSelectedBreakpoints();
      return res.toArray(new Object[res.size()]);
    }
    @Override public void itemChosen(    ItemWrapper item,    Project project,    JBPopup popup,    boolean withEnterOrDoubleClick){
      if (myCallback != null && item instanceof BreakpointItem) {
        myCallback.breakpointChosen(myProject,(BreakpointItem)item,popup,withEnterOrDoubleClick);
      }
    }
  }
;
  myPopupBuilder.setActionsGroup(actions).setTree(tree).setDelegate(delegate);
  if (!myIsViewer) {
    myPopupBuilder.setMinSize(new Dimension(-1,700));
  }
  if (!myPlainView) {
    myPopupBuilder.setDoneRunnable(new Runnable(){
      @Override public void run(){
        myPopup.cancel();
      }
    }
);
  }
  myPopup=myPopupBuilder.setCloseOnEnter(false).createMasterDetailPopup();
  myTreeController.setDelegate(new BreakpointItemsTreeController.BreakpointItemsTreeDelegate(){
    @Override public void execute(    BreakpointItem item){
      if (myCallback != null) {
        myCallback.breakpointChosen(myProject,item,myPopup,true);
      }
    }
  }
);
  initSelection(myBreakpointItems);
  myPopup.addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      for (      BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
        provider.removeListener(listener);
      }
      saveBreakpointsDialogState();
    }
  }
);
  return myPopup;
}
