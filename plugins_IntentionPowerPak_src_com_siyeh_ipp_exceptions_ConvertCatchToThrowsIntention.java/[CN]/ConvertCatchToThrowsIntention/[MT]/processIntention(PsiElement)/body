{
  final PsiCatchSection catchSection=(PsiCatchSection)element.getParent();
  final PsiType catchType=catchSection.getCatchType();
  if (!(catchType instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)catchType;
  final PsiMethod method=PsiTreeUtil.getParentOfType(catchSection,PsiMethod.class);
  if (method == null) {
    return;
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  final PsiManager manager=element.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final PsiJavaCodeReferenceElement referenceElement=factory.createReferenceElementByType(classType);
  throwsList.add(referenceElement);
  final PsiTryStatement tryStatement=catchSection.getTryStatement();
  final PsiCatchSection[] catchSections=tryStatement.getCatchSections();
  if (catchSections.length > 1) {
    catchSection.delete();
  }
 else {
    final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    if (tryBlock == null) {
      return;
    }
    final PsiElement parent=tryStatement.getParent();
    final PsiStatement[] statements=tryBlock.getStatements();
    for (    PsiStatement statement : statements) {
      parent.addBefore(statement,tryStatement);
    }
    tryStatement.delete();
  }
}
