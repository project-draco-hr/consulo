{
  final PsiCatchSection catchSection=(PsiCatchSection)element.getParent();
  final PsiMethod method=PsiTreeUtil.getParentOfType(catchSection,PsiMethod.class);
  if (method == null) {
    return;
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  final Project project=element.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiType catchType=catchSection.getCatchType();
  if (catchType instanceof PsiClassType) {
    final PsiClassType classType=(PsiClassType)catchType;
    final PsiJavaCodeReferenceElement referenceElement=factory.createReferenceElementByType(classType);
    throwsList.add(referenceElement);
  }
 else   if (catchType instanceof PsiDisjunctionType) {
    final PsiDisjunctionType disjunctionType=(PsiDisjunctionType)catchType;
    final List<PsiType> disjunctions=disjunctionType.getDisjunctions();
    for (    PsiType disjunction : disjunctions) {
      if (!(disjunction instanceof PsiClassType)) {
        continue;
      }
      final PsiClassType classType=(PsiClassType)disjunction;
      final PsiJavaCodeReferenceElement referenceElement=factory.createReferenceElementByType(classType);
      throwsList.add(referenceElement);
    }
  }
 else {
    return;
  }
  final PsiTryStatement tryStatement=catchSection.getTryStatement();
  final PsiCatchSection[] catchSections=tryStatement.getCatchSections();
  if (catchSections.length > 1 || tryStatement.getResourceList() != null) {
    catchSection.delete();
  }
 else {
    final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    if (tryBlock == null) {
      return;
    }
    final PsiElement first=tryBlock.getFirstBodyElement();
    final PsiElement last=tryBlock.getLastBodyElement();
    if (first != null && last != null) {
      tryStatement.getParent().addRangeAfter(first,last,tryStatement);
    }
    tryStatement.delete();
  }
}
