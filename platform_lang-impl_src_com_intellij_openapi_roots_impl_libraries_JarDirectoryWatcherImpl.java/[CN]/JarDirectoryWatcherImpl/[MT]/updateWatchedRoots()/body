{
  final LocalFileSystem fs=LocalFileSystem.getInstance();
  if (!myJarDirectories.isEmpty()) {
    final Set<String> recursiveRoots=new HashSet<String>();
    final Set<String> flatRoots=new HashSet<String>();
    final VirtualFileManager fm=VirtualFileManager.getInstance();
    for (    OrderRootType rootType : myJarDirectories.getRootTypes()) {
      for (      String url : myJarDirectories.getDirectories(rootType)) {
        if (fm.getFileSystem(VirtualFileManager.extractProtocol(url)) instanceof LocalFileSystem) {
          final boolean watchRecursively=myJarDirectories.isRecursive(rootType,url);
          final String path=VirtualFileManager.extractPath(url);
          (watchRecursively ? recursiveRoots : flatRoots).add(path);
        }
      }
    }
    myWatchRequests=fs.replaceWatchedRoots(myWatchRequests,recursiveRoots,flatRoots);
    if (myBusConnection == null) {
      myBusConnection=ApplicationManager.getApplication().getMessageBus().connect();
      myBusConnection.subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
        @Override public void after(        @NotNull final List<? extends VFileEvent> events){
          boolean changesDetected=false;
          for (          VFileEvent event : events) {
            if (event instanceof VFileCopyEvent) {
              final VFileCopyEvent copyEvent=(VFileCopyEvent)event;
              final VirtualFile file=copyEvent.getFile();
              if (isUnderJarDirectory(copyEvent.getNewParent() + "/" + copyEvent.getNewChildName()) || file != null && isUnderJarDirectory(file.getUrl())) {
                changesDetected=true;
                break;
              }
            }
 else             if (event instanceof VFileMoveEvent) {
              final VFileMoveEvent moveEvent=(VFileMoveEvent)event;
              final VirtualFile file=moveEvent.getFile();
              if (file != null && (isUnderJarDirectory(file.getUrl()) || isUnderJarDirectory(moveEvent.getOldParent().getUrl() + "/" + file.getName()))) {
                changesDetected=true;
                break;
              }
            }
 else             if (event instanceof VFileDeleteEvent) {
              final VFileDeleteEvent deleteEvent=(VFileDeleteEvent)event;
              if (isUnderJarDirectory(deleteEvent.getFile().getUrl())) {
                changesDetected=true;
                break;
              }
            }
 else             if (event instanceof VFileCreateEvent) {
              final VFileCreateEvent createEvent=(VFileCreateEvent)event;
              if (isUnderJarDirectory(createEvent.getParent().getUrl() + "/" + createEvent.getChildName())) {
                changesDetected=true;
                break;
              }
            }
          }
          if (changesDetected) {
            fireRootSetChanged();
          }
        }
        private boolean isUnderJarDirectory(        String url){
          for (          String rootUrl : myJarDirectories.getAllDirectories()) {
            if (FileUtil.startsWith(url,rootUrl)) {
              return true;
            }
          }
          return false;
        }
      }
);
    }
  }
 else {
    cleanup();
  }
}
