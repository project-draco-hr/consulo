{
  try {
    new File(outputDirectoryName).mkdirs();
    final InspectionTreeNode root=myView.getTree().getRoot();
    final Enumeration children=root.children();
    while (children.hasMoreElements()) {
      InspectionTreeNode node=(InspectionTreeNode)children.nextElement();
      if (node instanceof InspectionGroupNode) {
        final Enumeration groupChildren=node.children();
        while (groupChildren.hasMoreElements()) {
          InspectionNode toolNode=(InspectionNode)groupChildren.nextElement();
          Element problems=new Element(PROBLEMS);
          final InspectionTool tool=toolNode.getTool();
          final Set<InspectionTool> tools=getWorkedTools(toolNode);
          for (          InspectionTool inspectionTool : tools) {
            inspectionTool.exportResults(problems);
          }
          PathMacroManager.getInstance(myView.getProject()).collapsePaths(problems);
          JDOMUtil.writeDocument(new Document(problems),outputDirectoryName + File.separator + tool.getShortName()+ XmlFileType.DOT_DEFAULT_EXTENSION,CodeStyleSettingsManager.getSettings(null).getLineSeparator());
        }
      }
    }
    final Element element=new Element(InspectionApplication.INSPECTIONS_NODE);
    final String profileName=myView.getCurrentProfileName();
    if (profileName != null) {
      element.setAttribute(InspectionApplication.PROFILE,profileName);
    }
    JDOMUtil.writeDocument(new Document(element),outputDirectoryName + File.separator + InspectionApplication.DESCRIPTIONS+ XmlFileType.DOT_DEFAULT_EXTENSION,CodeStyleSettingsManager.getSettings(null).getLineSeparator());
  }
 catch (  final IOException e) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myView,e.getMessage());
      }
    }
);
  }
}
