{
  try {
    new File(outputDirectoryName).mkdirs();
    final InspectionTreeNode root=myView.getTree().getRoot();
    final IOException[] ex=new IOException[1];
    TreeUtil.traverse(root,new TreeUtil.Traverse(){
      public boolean accept(      final Object node){
        if (node instanceof InspectionNode) {
          InspectionNode toolNode=(InspectionNode)node;
          Element problems=new Element(PROBLEMS);
          final InspectionTool tool=toolNode.getTool();
          final Set<InspectionTool> tools=getWorkedTools(toolNode);
          for (          InspectionTool inspectionTool : tools) {
            inspectionTool.exportResults(problems);
          }
          PathMacroManager.getInstance(myView.getProject()).collapsePaths(problems);
          try {
            JDOMUtil.writeDocument(new Document(problems),outputDirectoryName + File.separator + tool.getShortName()+ XmlFileType.DOT_DEFAULT_EXTENSION,CodeStyleSettingsManager.getSettings(null).getLineSeparator());
          }
 catch (          IOException e) {
            ex[0]=e;
          }
        }
        return true;
      }
    }
);
    if (ex[0] != null) {
      throw ex[0];
    }
    final Element element=new Element(InspectionApplication.INSPECTIONS_NODE);
    final String profileName=myView.getCurrentProfileName();
    if (profileName != null) {
      element.setAttribute(InspectionApplication.PROFILE,profileName);
    }
    JDOMUtil.writeDocument(new Document(element),outputDirectoryName + File.separator + InspectionApplication.DESCRIPTIONS+ XmlFileType.DOT_DEFAULT_EXTENSION,CodeStyleSettingsManager.getSettings(null).getLineSeparator());
  }
 catch (  final IOException e) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myView,e.getMessage());
      }
    }
);
  }
}
