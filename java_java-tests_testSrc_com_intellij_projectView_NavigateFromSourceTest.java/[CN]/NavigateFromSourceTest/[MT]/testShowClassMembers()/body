{
  useStandardProviders();
  final PsiClass[] classes=JavaDirectoryService.getInstance().getClasses(getPackageDirectory());
  sortClassesByName(classes);
  PsiClass psiClass=classes[0];
  final AbstractProjectViewPSIPane pane=myStructure.createPane();
  final PsiFile containingFile=psiClass.getContainingFile();
  final VirtualFile virtualFile=containingFile.getVirtualFile();
  ProjectViewTestUtil.checkNavigateFromSourceBehaviour(psiClass,virtualFile,pane);
  PlatformTestUtil.assertTreeEqual(pane.getTree(),"-Project\n" + " -PsiDirectory: showClassMembers\n" + "  -PsiDirectory: src\n"+ "   -PsiDirectory: com\n"+ "    -PsiDirectory: package1\n"+ "     [Class1]\n"+ "     Class2\n" + getRootFiles() + " +External Libraries\n",true);
  changeClassTextAndTryToNavigate("class Class11 {}",(PsiJavaFile)containingFile,pane,"-Project\n" + " -PsiDirectory: showClassMembers\n" + "  -PsiDirectory: src\n"+ "   -PsiDirectory: com\n"+ "    -PsiDirectory: package1\n"+ "     -Class1.java\n"+ "      [Class11]\n"+ "     Class2\n" + getRootFiles() + " +External Libraries\n");
  changeClassTextAndTryToNavigate("class Class1 {}",(PsiJavaFile)containingFile,pane,"-Project\n" + " -PsiDirectory: showClassMembers\n" + "  -PsiDirectory: src\n"+ "   -PsiDirectory: com\n"+ "    -PsiDirectory: package1\n"+ "     -Class1.java\n"+ "      [Class1]\n"+ "     Class2\n" + getRootFiles() + " +External Libraries\n");
  doTestMultipleSelection(pane,((PsiJavaFile)containingFile).getClasses()[0]);
}
