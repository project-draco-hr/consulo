{
  return new AbstractSet<Entry<K,V>>(){
    @Override public Iterator<Entry<K,V>> iterator(){
      final Iterator<Entry<K,MyReference<K,V>>> refEntries=myMap.entrySet().iterator();
      return new Iterator<Entry<K,V>>(){
        Entry<K,V> next;
        @Override public boolean hasNext(){
          while (next == null) {
            if (!refEntries.hasNext())             return false;
            Entry<K,MyReference<K,V>> ref=refEntries.next();
            final K k=ref.getKey();
            V v=ref.getValue().get();
            next=v == null ? null : new AbstractMap.SimpleEntry<K,V>(k,v){
              @Override public V setValue(              V value){
                V old=super.setValue(value);
                put(k,value);
                return old;
              }
            }
;
          }
          return true;
        }
        @Override public Entry<K,V> next(){
          if (!hasNext())           throw new NoSuchElementException();
          Entry<K,V> r=next;
          next=null;
          return r;
        }
        @Override public void remove(){
          if (next == null) {
            throw new NoSuchElementException();
          }
          ConcurrentSoftValueHashMap.this.remove(next.getKey());
        }
      }
;
    }
    @Override public int size(){
      return myMap.size();
    }
    @Override public boolean remove(    Object o){
      return ConcurrentSoftValueHashMap.this.remove(((Entry)o).getKey()) != null;
    }
    @Override public void clear(){
      ConcurrentSoftValueHashMap.this.clear();
    }
  }
;
}
