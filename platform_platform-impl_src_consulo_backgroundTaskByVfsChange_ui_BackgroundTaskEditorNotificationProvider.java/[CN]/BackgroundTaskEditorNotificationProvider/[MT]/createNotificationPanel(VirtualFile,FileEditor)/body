{
  List<BackgroundTaskByVfsChangeProvider> providers=BackgroundTaskByVfsChangeProviders.getProviders(myProject,file);
  if (providers.isEmpty()) {
    return null;
  }
  EditorNotificationPanel panel=new EditorNotificationPanel(){
    @Override public Color getBackground(){
      return Gray._220;
    }
  }
;
  List<BackgroundTaskByVfsChangeTask> tasks=BackgroundTaskByVfsChangeManager.getInstance(myProject).findTasks(file);
  if (!tasks.isEmpty()) {
    panel.text("Task(s): " + StringUtil.join(tasks,new Function<BackgroundTaskByVfsChangeTask,String>(){
      @Override public String fun(      BackgroundTaskByVfsChangeTask backgroundTaskByVfsChangeTask){
        return backgroundTaskByVfsChangeTask.getName() + (!backgroundTaskByVfsChangeTask.isEnabled() ? " (disabled)" : "");
      }
    }
,", "));
    panel.createActionLabel("Force Run",new Runnable(){
      @Override public void run(){
        BackgroundTaskByVfsChangeManager.getInstance(myProject).runTasks(file);
      }
    }
);
  }
 else {
    panel.text("Background task(s) on file change is available");
  }
  panel.createActionLabel("Manage",new Runnable(){
    @Override public void run(){
      BackgroundTaskByVfsChangeManager.getInstance(myProject).openManageDialog(file);
    }
  }
);
  return panel;
}
