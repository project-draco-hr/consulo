{
  final Set<String> merged=new HashSet<String>();
  boolean somethingAvailableForMergeFound=false;
  final long number=list.getNumber();
  final Set<String> paths=new HashSet<String>(list.getAddedPaths());
  paths.addAll(list.getDeletedPaths());
  paths.addAll(list.getChangedPaths());
  for (  String path : paths) {
    final SvnMergeInfoCache.MergeCheckResult pathResult=myWorker.isMerged(path,number);
    if (SvnMergeInfoCache.MergeCheckResult.MERGED.equals(pathResult)) {
      merged.add(path);
    }
 else     if (SvnMergeInfoCache.MergeCheckResult.NOT_MERGED.equals(pathResult)) {
      somethingAvailableForMergeFound=true;
    }
  }
  return new Pair<SvnMergeInfoCache.MergeCheckResult,Set<String>>(SvnMergeInfoCache.MergeCheckResult.getInstance(!somethingAvailableForMergeFound),merged);
}
