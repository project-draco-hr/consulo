{
  super(new BorderLayout());
  List<PsiElement> candidates=new ArrayList<PsiElement>(elements.length);
  List<FileDescriptor> files=new ArrayList<FileDescriptor>(elements.length);
  for (  PsiElement element : elements) {
    PsiFile file=getContainingFile(element);
    if (file == null)     continue;
    files.add(new FileDescriptor(file,element.getParent()));
    candidates.add(element.getNavigationElement());
  }
  myElements=PsiUtilBase.toPsiElementArray(candidates);
  if (myElements.length == 0) {
    myToolbar=null;
    myEditor=null;
    myViewingPanel=null;
    myLocationLabel=null;
    myCountLabel=null;
    myBinarySwitch=null;
    myBinaryPanel=null;
    return;
  }
  myIndex=index < myElements.length ? index : 0;
  final Project project=elements[myIndex].getProject();
  EditorFactory factory=EditorFactory.getInstance();
  Document doc=factory.createDocument("");
  doc.setReadOnly(true);
  myEditor=factory.createEditor(doc,project);
  PsiFile psiFile=getContainingFile(myElements[myIndex]);
  VirtualFile virtualFile=psiFile.getVirtualFile();
  EditorHighlighter highlighter;
  if (virtualFile != null)   highlighter=HighlighterFactory.createHighlighter(project,virtualFile);
 else {
    String fileName=psiFile.getName();
    highlighter=HighlighterFactory.createHighlighter(project,fileName);
  }
  ((EditorEx)myEditor).setHighlighter(highlighter);
  ((EditorEx)myEditor).setBackgroundColor(EditorFragmentComponent.getBackgroundColor(myEditor));
  myEditor.getSettings().setAdditionalLinesCount(1);
  myEditor.getSettings().setAdditionalColumnsCount(1);
  myEditor.getSettings().setLineMarkerAreaShown(false);
  myEditor.getSettings().setIndentGuidesShown(false);
  myEditor.getSettings().setLineNumbersShown(false);
  myEditor.getSettings().setFoldingOutlineShown(false);
  myBinarySwitch=new CardLayout();
  myViewingPanel=new JPanel(myBinarySwitch);
  myEditor.setBorder(null);
  ((EditorEx)myEditor).getScrollPane().setViewportBorder(JBScrollPane.createIndentBorder());
  myViewingPanel.add(myEditor.getComponent(),TEXT_PAGE_KEY);
  myBinaryPanel=new JPanel(new BorderLayout());
  myViewingPanel.add(myBinaryPanel,BINARY_PAGE_KEY);
  add(myViewingPanel,BorderLayout.CENTER);
  myToolbar=createToolbar();
  myLocationLabel=new JLabel();
  myCountLabel=new JLabel();
  JPanel header=new JPanel(new BorderLayout());
  header.setBorder(BorderFactory.createCompoundBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
  JPanel toolbarPanel=new JPanel(new FlowLayout(FlowLayout.LEADING,0,0));
  toolbarPanel.add(myToolbar.getComponent());
  if (myElements.length > 1) {
    myFileChooser=new JComboBox(files.toArray(new FileDescriptor[files.size()]));
    myFileChooser.setRenderer(new ListCellRendererWrapper<FileDescriptor>(myFileChooser.getRenderer()){
      @Override public void customize(      JList list,      FileDescriptor value,      int index,      boolean selected,      boolean hasFocus){
        final PsiFile file=value.myFile;
        setIcon(getIconForFile(file));
        final VirtualFile vFile=file.getVirtualFile();
        setForeground(FileStatusManager.getInstance(project).getStatus(vFile).getColor());
        setText(value.getPresentableName(vFile));
      }
    }
);
    myFileChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=myFileChooser.getSelectedIndex();
        if (myIndex != index) {
          myIndex=index;
          updateControls();
        }
      }
    }
);
    toolbarPanel.add(myFileChooser);
    toolbarPanel.add(myCountLabel);
  }
 else {
    final JLabel label=new JLabel();
    VirtualFile file=psiFile.getVirtualFile();
    if (file != null) {
      label.setIcon(getIconForFile(psiFile));
      label.setForeground(FileStatusManager.getInstance(project).getStatus(file).getColor());
      label.setText(file.getPresentableName());
      label.setBorder(new CompoundBorder(IdeBorderFactory.createRoundedBorder(),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
    }
    toolbarPanel.add(label);
  }
  header.add(toolbarPanel,BorderLayout.WEST);
  header.add(myLocationLabel,BorderLayout.EAST);
  add(header,BorderLayout.NORTH);
  setPreferredSize(new Dimension(600,400));
  updateControls();
}
