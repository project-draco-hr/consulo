{
  super(new BorderLayout());
  final Project project=elements.length > 0 ? elements[0].getProject() : null;
  EditorFactory factory=EditorFactory.getInstance();
  Document doc=factory.createDocument("");
  doc.setReadOnly(true);
  myEditor=factory.createEditor(doc,project);
  ((EditorEx)myEditor).setBackgroundColor(EditorFragmentComponent.getBackgroundColor(myEditor));
  final EditorSettings settings=myEditor.getSettings();
  settings.setAdditionalLinesCount(1);
  settings.setAdditionalColumnsCount(1);
  settings.setLineMarkerAreaShown(false);
  settings.setIndentGuidesShown(false);
  settings.setLineNumbersShown(false);
  settings.setFoldingOutlineShown(false);
  myBinarySwitch=new CardLayout();
  myViewingPanel=new JPanel(myBinarySwitch);
  myEditor.setBorder(null);
  ((EditorEx)myEditor).getScrollPane().setViewportBorder(JBScrollPane.createIndentBorder());
  myViewingPanel.add(myEditor.getComponent(),TEXT_PAGE_KEY);
  myBinaryPanel=new JPanel(new BorderLayout());
  myViewingPanel.add(myBinaryPanel,BINARY_PAGE_KEY);
  add(myViewingPanel,BorderLayout.CENTER);
  myToolbar=createToolbar();
  myLocationLabel=new JLabel();
  myCountLabel=new JLabel();
  final JPanel header=new JPanel(new BorderLayout());
  header.setBorder(BorderFactory.createCompoundBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
  final JPanel toolbarPanel=new JPanel(new FlowLayout(FlowLayout.LEADING,0,0));
  toolbarPanel.add(myToolbar.getComponent());
  setPreferredSize(new Dimension(600,400));
  update(elements,new PairFunction<PsiElement[],List<FileDescriptor>,Boolean>(){
    @Override public Boolean fun(    final PsiElement[] psiElements,    final List<FileDescriptor> fileDescriptors){
      if (psiElements == null || psiElements.length == 0)       return false;
      myElements=psiElements;
      myIndex=index < myElements.length ? index : 0;
      PsiFile psiFile=getContainingFile(myElements[myIndex]);
      VirtualFile virtualFile=psiFile.getVirtualFile();
      EditorHighlighter highlighter;
      if (virtualFile != null)       highlighter=HighlighterFactory.createHighlighter(project,virtualFile);
 else {
        String fileName=psiFile.getName();
        highlighter=HighlighterFactory.createHighlighter(project,fileName);
      }
      ((EditorEx)myEditor).setHighlighter(highlighter);
      if (myElements.length > 1) {
        myFileChooser=new JComboBox(fileDescriptors.toArray(new FileDescriptor[fileDescriptors.size()]));
        updateRenderer(project);
        myFileChooser.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            int index=myFileChooser.getSelectedIndex();
            if (myIndex != index) {
              myIndex=index;
              updateControls();
            }
          }
        }
);
        myLabel=new JLabel();
        myLabel.setVisible(false);
      }
 else {
        myFileChooser=new JComboBox();
        myFileChooser.setVisible(false);
        myCountLabel.setVisible(false);
        myLabel=new JLabel();
        VirtualFile file=psiFile.getVirtualFile();
        if (file != null) {
          myLabel.setIcon(getIconForFile(psiFile));
          myLabel.setForeground(FileStatusManager.getInstance(project).getStatus(file).getColor());
          myLabel.setText(file.getPresentableName());
          myLabel.setBorder(new CompoundBorder(IdeBorderFactory.createRoundedBorder(),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
        }
      }
      toolbarPanel.add(myFileChooser);
      toolbarPanel.add(myCountLabel);
      toolbarPanel.add(myLabel);
      header.add(toolbarPanel,BorderLayout.WEST);
      header.add(myLocationLabel,BorderLayout.EAST);
      add(header,BorderLayout.NORTH);
      updateControls();
      return true;
    }
  }
);
}
