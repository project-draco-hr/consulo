{
  update(elements,new PairFunction<PsiElement[],List<FileDescriptor>,Boolean>(){
    @Override public Boolean fun(    PsiElement[] psiElements,    List<FileDescriptor> fileDescriptors){
      if (psiElements.length == 0)       return false;
      final Project project=psiElements[0].getProject();
      myElements=psiElements;
      myIndex=index < myElements.length ? index : 0;
      PsiFile psiFile=getContainingFile(myElements[myIndex]);
      VirtualFile virtualFile=psiFile.getVirtualFile();
      EditorHighlighter highlighter;
      if (virtualFile != null)       highlighter=HighlighterFactory.createHighlighter(project,virtualFile);
 else {
        String fileName=psiFile.getName();
        highlighter=HighlighterFactory.createHighlighter(project,fileName);
      }
      ((EditorEx)myEditor).setHighlighter(highlighter);
      if (myElements.length > 1) {
        myFileChooser.setVisible(true);
        myCountLabel.setVisible(true);
        myLabel.setVisible(false);
        myFileChooser.setModel(new DefaultComboBoxModel(fileDescriptors.toArray(new FileDescriptor[fileDescriptors.size()])));
        updateRenderer(project);
      }
 else {
        myFileChooser.setVisible(false);
        myCountLabel.setVisible(false);
        VirtualFile file=psiFile.getVirtualFile();
        if (file != null) {
          myLabel.setIcon(getIconForFile(psiFile));
          myLabel.setForeground(FileStatusManager.getInstance(project).getStatus(file).getColor());
          myLabel.setText(file.getPresentableName());
          myLabel.setBorder(new CompoundBorder(IdeBorderFactory.createRoundedBorder(),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
          myLabel.setVisible(true);
        }
      }
      updateControls();
      revalidate();
      repaint();
      return true;
    }
  }
);
}
