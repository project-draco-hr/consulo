{
  final PsiElement parent=expression.getParent();
  final PsiExpression child=expression.getExpression();
  if (child == null) {
    return;
  }
  if (!(parent instanceof PsiExpression)) {
    registerError(expression);
    return;
  }
  final int parentPrecedence=ParenthesesUtils.getPrecendence((PsiExpression)parent);
  final int childPrecedence=ParenthesesUtils.getPrecendence(child);
  if (parentPrecedence > childPrecedence) {
    registerError(expression);
    return;
  }
  if (parentPrecedence == childPrecedence) {
    if (parent instanceof PsiBinaryExpression && child instanceof PsiBinaryExpression) {
      final PsiJavaToken parentSign=((PsiBinaryExpression)parent).getOperationSign();
      final IElementType parentOperator=parentSign.getTokenType();
      final PsiJavaToken childSign=((PsiBinaryExpression)child).getOperationSign();
      final IElementType childOperator=childSign.getTokenType();
      final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
      final PsiExpression lhs=binaryExpression.getLOperand();
      if (lhs.equals(expression) && parentOperator.equals(childOperator)) {
        registerError(expression);
        return;
      }
    }
 else {
      registerError(expression);
      return;
    }
  }
  super.visitParenthesizedExpression(expression);
}
