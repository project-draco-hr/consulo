{
  final PsiElement parent=expression.getParent();
  final PsiExpression child=expression.getExpression();
  if (child == null) {
    return;
  }
  if (!(parent instanceof PsiExpression)) {
    registerError(expression);
    return;
  }
  final int parentPrecedence=ParenthesesUtils.getPrecedence((PsiExpression)parent);
  final int childPrecedence=ParenthesesUtils.getPrecedence(child);
  if (parentPrecedence > childPrecedence) {
    registerError(expression);
    return;
  }
  if (parentPrecedence == childPrecedence) {
    if (parent instanceof PsiBinaryExpression && child instanceof PsiBinaryExpression) {
      final PsiBinaryExpression parentBinaryExpression=(PsiBinaryExpression)parent;
      final PsiJavaToken parentSign=parentBinaryExpression.getOperationSign();
      final IElementType parentOperator=parentSign.getTokenType();
      final PsiBinaryExpression childBinaryExpression=(PsiBinaryExpression)child;
      final PsiJavaToken childSign=childBinaryExpression.getOperationSign();
      final IElementType childOperator=childSign.getTokenType();
      if (!parentOperator.equals(childOperator)) {
        return;
      }
      final PsiType parentType=parentBinaryExpression.getType();
      if (parentType == null) {
        return;
      }
      final PsiType childType=childBinaryExpression.getType();
      if (parentType.equals(childType)) {
        registerError(expression);
        return;
      }
    }
 else {
      registerError(expression);
      return;
    }
  }
  super.visitParenthesizedExpression(expression);
}
