{
  final String password=getPlainProxyPassword();
  if (!StringUtil.isEmptyOrSpaces(PROXY_LOGIN) && !StringUtil.isEmptyOrSpaces(password)) {
    return new PasswordAuthentication(PROXY_LOGIN,password.toCharArray());
  }
  if (ApplicationManager.getApplication() == null || ApplicationManager.getApplication().isDisposeInProgress() || ApplicationManager.getApplication().isDisposed())   return null;
  final PasswordAuthentication[] value=new PasswordAuthentication[1];
  final Runnable runnable=new Runnable(){
    public void run(){
      final AuthenticationDialog dlg=new AuthenticationDialog(PopupUtil.getActiveComponent(),host,prompt,"","",KEEP_PROXY_PASSWORD);
      dlg.show();
      if (dlg.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        final AuthenticationPanel panel=dlg.getPanel();
        KEEP_PROXY_PASSWORD=panel.isRememberPassword();
        PROXY_LOGIN=panel.getLogin();
        setPlainProxyPassword(String.valueOf(panel.getPassword()));
        value[0]=new PasswordAuthentication(panel.getLogin(),panel.getPassword());
      }
    }
  }
;
  final Runnable throughSwing=new Runnable(){
    @Override public void run(){
      if (SwingUtilities.isEventDispatchThread()) {
        runnable.run();
        return;
      }
      try {
        SwingUtilities.invokeAndWait(runnable);
      }
 catch (      InterruptedException e) {
        LOG.info(e);
      }
catch (      InvocationTargetException e) {
        LOG.info(e);
      }
    }
  }
;
  if (ProgressManager.getInstance().getProgressIndicator() != null) {
    if (ProgressManager.getInstance().getProgressIndicator().isModal()) {
      WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(runnable);
    }
 else {
      throughSwing.run();
    }
  }
 else {
    throughSwing.run();
  }
  return value[0];
}
