{
  ChangeTrackingValueContainer<Value> valueContainer=(ChangeTrackingValueContainer<Value>)container;
  if (!valueContainer.needsCompacting()) {
    final BufferExposingByteArrayOutputStream bytes=new BufferExposingByteArrayOutputStream();
    final DataOutputStream _out=new DataOutputStream(bytes);
    final TIntHashSet set=valueContainer.getInvalidated();
    if (set.size() > 0) {
      for (      int inputId : set.toArray()) {
        ValueContainerExternalizer.saveInvalidateCommand(_out,inputId);
      }
    }
    final ValueContainer<Value> toRemove=valueContainer.getRemovedDelta();
    if (toRemove.size() > 0) {
      myValueContainerExternalizer.saveAsRemoved(_out,toRemove);
    }
    final ValueContainer<Value> toAppend=valueContainer.getAddedDelta();
    if (toAppend.size() > 0) {
      myValueContainerExternalizer.save(_out,toAppend);
    }
    appendData(key,new PersistentHashMap.ValueDataAppender(){
      public void append(      final DataOutput out) throws IOException {
        out.write(bytes.getInternalBuffer(),0,bytes.size());
      }
    }
);
  }
 else {
    super.put(key,valueContainer);
  }
}
