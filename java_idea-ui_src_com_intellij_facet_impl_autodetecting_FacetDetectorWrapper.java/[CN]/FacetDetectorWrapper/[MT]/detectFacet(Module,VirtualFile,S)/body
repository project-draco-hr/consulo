{
  String url=virtualFile.getUrl();
  if (!myAutodetectionFilter.isAutodetectionEnabled(module,myFacetType,url)) {
    LOG.debug("Autodetection disabled for " + myFacetType.getPresentableName() + " facets in module "+ module.getName());
    return null;
  }
  FacetInfo2<Module> underlyingFacet=null;
  FacetTypeId underlyingFacetType=myFacetType.getUnderlyingFacetType();
  if (underlyingFacetType != null) {
    if (myUnderlyingFacetSelector != null) {
      Map<U,FacetInfo2<Module>> underlyingFacets=myDetectedFacetSet.getConfigurations(underlyingFacetType,module);
      FacetConfiguration undelyingConfiguration=myUnderlyingFacetSelector.selectUnderlyingFacet(virtualFile,Collections.unmodifiableSet(underlyingFacets.keySet()));
      underlyingFacet=underlyingFacets.get(undelyingConfiguration);
    }
    if (underlyingFacet == null) {
      LOG.debug("Underlying " + underlyingFacetType + " facet not found for "+ url);
      return null;
    }
  }
  Map<C,FacetInfo2<Module>> configurations=myDetectedFacetSet.getConfigurations(myFacetType.getId(),module);
  final C detectedConfiguration=myFacetDetector.detectFacet(source,Collections.unmodifiableSet(configurations.keySet()));
  if (detectedConfiguration == null) {
    return null;
  }
  if (configurations.containsKey(detectedConfiguration)) {
    return configurations.get(detectedConfiguration);
  }
  final String name=myDetectedFacetSet.generateName(module,myFacetType);
  FacetInfo2<Module> detected=myDetectedFacetSet.createInfo(module,url,underlyingFacet,detectedConfiguration,name,myFacetType,myFacetDetector.getId());
  myDetectedFacetSet.addFacetInfo(detected);
  return detected;
}
