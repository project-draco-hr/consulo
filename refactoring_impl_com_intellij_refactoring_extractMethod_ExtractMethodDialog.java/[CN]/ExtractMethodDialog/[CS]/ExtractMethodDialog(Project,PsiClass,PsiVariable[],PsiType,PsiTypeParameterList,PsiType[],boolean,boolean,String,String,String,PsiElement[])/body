{
  super(project,true);
  myProject=project;
  myTargetClass=targetClass;
  myReturnType=returnType;
  myTypeParameterList=typeParameterList;
  myExceptions=exceptions;
  myStaticFlag=isStatic;
  myCanBeStatic=canBeStatic;
  myElementsToExtract=elementsToExtract;
  final List<ParameterTablePanel.VariableData> variableData=new ArrayList<ParameterTablePanel.VariableData>(inputVariables.length);
  for (  PsiVariable var : inputVariables) {
    String name=var.getName();
    if (!(var instanceof PsiParameter)) {
      CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(myProject);
      VariableKind kind=codeStyleManager.getVariableKind(var);
      name=codeStyleManager.variableNameToPropertyName(name,kind);
      name=codeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
    }
    PsiType type=var.getType();
    if (type instanceof PsiEllipsisType && var != inputVariables[inputVariables.length - 1]) {
      type=((PsiEllipsisType)type).toArrayType();
    }
    ParameterTablePanel.VariableData data=new ParameterTablePanel.VariableData(var,type);
    data.name=name;
    data.passAsParameter=true;
    variableData.add(data);
  }
  myVariableData=variableData.toArray(new ParameterTablePanel.VariableData[variableData.size()]);
  setTitle(title);
  myHelpId=helpId;
  myNameField=new EditorTextField(initialMethodName);
  int height=myVariableData.length + 2;
  if (myExceptions.length > 0) {
    height+=myExceptions.length + 1;
  }
  mySignatureArea=new JTextArea(height,30);
  myCbMakeStatic=new NonFocusableCheckBox();
  myCbMakeStatic.setText(RefactoringBundle.message("declare.static.checkbox"));
  init();
}
