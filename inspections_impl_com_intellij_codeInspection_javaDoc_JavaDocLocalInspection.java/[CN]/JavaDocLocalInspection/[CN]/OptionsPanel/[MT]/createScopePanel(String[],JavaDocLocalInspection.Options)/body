{
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createCompoundBorder(IdeBorderFactory.createTitledBorder(InspectionsBundle.message("inspection.scope.for.title")),BorderFactory.createEmptyBorder(0,3,3,3)));
  final Hashtable<Integer,JLabel> sliderLabels=new Hashtable<Integer,JLabel>();
  for (int i=0; i < modifiers.length; i++) {
    sliderLabels.put(new Integer(i + 1),new JLabel(modifiers[i]));
  }
  final JSlider slider=new JSlider(JSlider.VERTICAL,1,modifiers.length,1);
  slider.setLabelTable(sliderLabels);
  slider.putClientProperty(UIUtil.JSLIDER_ISFILLED,Boolean.TRUE);
  slider.setPreferredSize(new Dimension(80,50));
  slider.setPaintLabels(true);
  slider.setSnapToTicks(true);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int value=slider.getValue();
      options.ACCESS_JAVADOC_REQUIRED_FOR=modifiers[value - 1];
      for (Enumeration<Integer> enumeration=sliderLabels.keys(); enumeration.hasMoreElements(); ) {
        Integer key=enumeration.nextElement();
        sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : new Color(100,100,100));
      }
    }
  }
);
  Color fore=Color.black;
  for (int i=0; i < modifiers.length; i++) {
    sliderLabels.get(new Integer(i + 1)).setForeground(fore);
    if (modifiers[i].equals(options.ACCESS_JAVADOC_REQUIRED_FOR)) {
      slider.setValue(i + 1);
      fore=new Color(100,100,100);
    }
  }
  panel.add(slider,BorderLayout.WEST);
  return panel;
}
