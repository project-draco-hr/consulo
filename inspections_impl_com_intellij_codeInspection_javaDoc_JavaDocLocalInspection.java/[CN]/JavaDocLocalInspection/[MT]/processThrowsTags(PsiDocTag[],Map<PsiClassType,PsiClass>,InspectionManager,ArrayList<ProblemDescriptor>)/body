{
  for (  PsiDocTag tag : tags) {
    if ("throws".equals(tag.getName()) || "exception".equals(tag.getName())) {
      final PsiDocTagValue value=tag.getValueElement();
      if (value == null)       continue;
      final PsiElement firstChild=value.getFirstChild();
      if (firstChild == null)       continue;
      final PsiElement psiElement=firstChild.getFirstChild();
      if (!(psiElement instanceof PsiJavaCodeReferenceElement))       continue;
      final PsiJavaCodeReferenceElement ref=((PsiJavaCodeReferenceElement)psiElement);
      final PsiElement element=ref.resolve();
      if (element instanceof PsiClass) {
        final PsiClass exceptionClass=(PsiClass)element;
        for (Iterator<PsiClassType> it=declaredExceptions.keySet().iterator(); it.hasNext(); ) {
          PsiClassType classType=it.next();
          final PsiClass psiClass=declaredExceptions.get(classType);
          if (InheritanceUtil.isInheritorOrSelf(exceptionClass,psiClass,true)) {
            if (extractThrowsTagDescription(tag).length() == 0) {
              problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>" + tag.getName() + "</code>"),mananger));
            }
            it.remove();
          }
        }
      }
    }
  }
}
