{
  final ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>(2);
  nextTag:   for (  PsiDocTag tag : tags) {
    final JavadocManager manager=tag.getManager().getJavadocManager();
    String tagName=tag.getName();
    JavadocTagInfo tagInfo=manager.getTagInfo(tagName);
    if (tagInfo == null || !tagInfo.isValidInContext(context)) {
      final StringTokenizer tokenizer=new StringTokenizer(myAdditionalJavadocTags,", ");
      while (tokenizer.hasMoreTokens()) {
        if (tagName.equals(tokenizer.nextToken()))         continue nextTag;
      }
      if (tagInfo == null) {
        problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message("inspection.javadoc.problem.wrong.tag","<code>" + tagName + "</code>"),new AddUnknownTagToCustoms(tag)));
      }
 else {
        problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message("inspection.javadoc.problem.disallowed.tag","<code>" + tagName + "</code>"),new AddUnknownTagToCustoms(tag)));
      }
    }
    PsiDocTagValue value=tag.getValueElement();
    final JavadocTagInfo info=manager.getTagInfo(tagName);
    if (info != null && !info.isValidInContext(context))     continue;
    String message=info == null ? null : info.checkTagValue(value);
    final PsiReference reference=value != null ? value.getReference() : null;
    if (message == null && reference != null) {
      PsiElement element=reference.resolve();
      if (element == null) {
        final int textOffset=value.getTextOffset();
        if (textOffset == value.getTextRange().getEndOffset()) {
          problems.add(InspectionManager.getInstance(tag.getProject()).createProblemDescriptor(tag,InspectionsBundle.message("inspection.javadoc.problem.name.expected"),null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,true));
        }
      }
    }
    if (message != null) {
      final PsiDocTagValue valueElement=tag.getValueElement();
      if (valueElement == null) {
        problems.add(InspectionManager.getInstance(tag.getProject()).createProblemDescriptor(tag,InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>" + tag.getName() + "</code>"),null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,true));
      }
 else {
        problems.add(createDescriptor(valueElement,message));
      }
    }
  }
  return problems.isEmpty() ? null : problems;
}
