{
  ArrayList<ProblemDescriptor> problems=null;
  nextTag:   for (  PsiDocTag tag : tags) {
    final JavadocManager manager=tag.getManager().getJavadocManager();
    String tagName=tag.getName();
    JavadocTagInfo tagInfo=manager.getTagInfo(tagName);
    if (tagInfo == null || !tagInfo.isValidInContext(context)) {
      final StringTokenizer tokenizer=new StringTokenizer(myAdditionalJavadocTags,", ");
      while (tokenizer.hasMoreTokens()) {
        if (tagName.equals(tokenizer.nextToken()))         continue nextTag;
      }
      if (problems == null)       problems=new ArrayList<ProblemDescriptor>();
      if (tagInfo == null) {
        problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message("inspection.javadoc.problem.descriptor10","<code>" + tagName + "</code>"),new AddUnknownTagToCustoms(tag)));
      }
 else {
        problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message("inspection.javadoc.problem.descriptor11","<code>" + tagName + "</code>"),new AddUnknownTagToCustoms(tag)));
      }
    }
    PsiDocTagValue value=tag.getValueElement();
    final JavadocTagInfo info=manager.getTagInfo(tagName);
    if (info != null && !info.isValidInContext(context))     continue;
    String message=info == null ? null : info.checkTagValue(value);
    if (message == null && value != null && value.getReference() != null) {
      PsiElement element=value.getReference().resolve();
      if (element == null) {
        final int textOffset=value.getTextOffset();
        if (textOffset == value.getTextRange().getEndOffset()) {
          message=InspectionsBundle.message("inspection.javadoc.problem.descriptor9");
        }
 else {
          message=InspectionsBundle.message("inspection.javadoc.problem.descriptor8","<code>" + new String(value.getContainingFile().textToCharArray(),textOffset,value.getTextRange().getEndOffset() - textOffset) + "</code>");
        }
      }
    }
    if (message != null) {
      if (problems == null)       problems=new ArrayList<ProblemDescriptor>();
      problems.add(createDescriptor(tag.getValueElement(),message));
    }
    final String[] refMessage=new String[]{null};
    final PsiJavaCodeReferenceElement[] references=new PsiJavaCodeReferenceElement[]{null};
    tag.accept(new PsiElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      public void visitReferenceElement(      PsiJavaCodeReferenceElement reference){
        super.visitReferenceElement(reference);
        PsiElement resolved=reference.resolve();
        if (resolved == null) {
          refMessage[0]=InspectionsBundle.message("inspection.javadoc.problem.descriptor8","<code>" + reference.getText() + "</code>");
          references[0]=reference;
        }
      }
      public void visitElement(      PsiElement element){
        PsiElement[] children=element.getChildren();
        for (        PsiElement child : children) {
          child.accept(this);
        }
      }
    }
);
    if (refMessage[0] != null) {
      if (problems == null)       problems=new ArrayList<ProblemDescriptor>();
      problems.add(createDescriptor(references[0],refMessage[0]));
    }
  }
  return problems;
}
