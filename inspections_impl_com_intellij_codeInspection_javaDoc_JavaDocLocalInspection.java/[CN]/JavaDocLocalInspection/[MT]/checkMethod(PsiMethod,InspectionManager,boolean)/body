{
  if (IGNORE_DEPRECATED && (psiMethod.isDeprecated() || psiMethod.getContainingClass().isDeprecated())) {
    return null;
  }
  PsiDocComment docComment=psiMethod.getDocComment();
  final PsiMethod[] superMethods=psiMethod.findSuperMethods();
  if (docComment == null) {
    if (isJavaDocRequired(psiMethod)) {
      if (superMethods.length > 0)       return null;
      if (EjbRolesUtil.getEjbRolesUtil().getEjbRole(psiMethod) instanceof EjbImplMethodRole)       return null;
      return superMethods.length == 0 ? new ProblemDescriptor[]{createDescriptor(psiMethod.getNameIdentifier(),JavaDocLocalInspection.REQUIRED_JAVADOC_IS_ABSENT,manager)} : null;
    }
 else {
      return null;
    }
  }
  final PsiElement[] descriptionElements=docComment.getDescriptionElements();
  for (  PsiElement descriptionElement : descriptionElements) {
    if (descriptionElement instanceof PsiInlineDocTag) {
      if ("inheritDoc".equals(((PsiInlineDocTag)descriptionElement).getName()))       return null;
    }
  }
  if (docComment.findTagByName("inheritDoc") != null)   return null;
  PsiDocTag[] tags=docComment.getTags();
  boolean isReturnRequired=false;
  boolean isReturnAbsent=true;
  if (superMethods.length == 0 && !psiMethod.isConstructor() && PsiType.VOID != psiMethod.getReturnType() && isTagRequired(psiMethod,"return")) {
    isReturnRequired=true;
    for (    PsiDocTag tag : tags) {
      if ("return".equals(tag.getName())) {
        isReturnAbsent=false;
        break;
      }
    }
  }
  ArrayList<PsiParameter> absentParameters=null;
  if (superMethods.length == 0 && isTagRequired(psiMethod,"param")) {
    PsiParameter[] params=psiMethod.getParameterList().getParameters();
    for (    PsiParameter param : params) {
      boolean found=false;
      for (      PsiDocTag tag : tags) {
        if ("param".equals(tag.getName())) {
          PsiDocTagValue value=tag.getValueElement();
          if (value instanceof PsiDocParamRef) {
            PsiDocParamRef paramRef=(PsiDocParamRef)value;
            if (paramRef.getReference().isReferenceTo(param)) {
              found=true;
              break;
            }
          }
        }
      }
      if (!found) {
        if (absentParameters == null)         absentParameters=new ArrayList<PsiParameter>(2);
        absentParameters.add(param);
      }
    }
  }
  ArrayList<ProblemDescriptor> problems=null;
  if (isReturnRequired && isReturnAbsent) {
    problems=new ArrayList<ProblemDescriptor>(2);
    ProblemDescriptor descriptor=createMissingTagDescriptor(psiMethod.getNameIdentifier(),"return",manager);
    problems.add(descriptor);
  }
  if (absentParameters != null) {
    if (problems == null)     problems=new ArrayList<ProblemDescriptor>(2);
    for (    PsiParameter psiParameter : absentParameters) {
      ProblemDescriptor descriptor=createMissingParamTagDescriptor(psiMethod.getNameIdentifier(),psiParameter.getName(),manager);
      problems.add(descriptor);
    }
  }
  for (  PsiDocTag tag : tags) {
    if ("param".equals(tag.getName())) {
      final PsiElement[] dataElements=tag.getDataElements();
      final PsiDocTagValue valueElement=tag.getValueElement();
      boolean hasProblemsWithTag=dataElements.length < 2;
      if (!hasProblemsWithTag) {
        final StringBuffer buf=new StringBuffer();
        for (        PsiElement element : dataElements) {
          if (element != valueElement) {
            buf.append(element.getText());
          }
        }
        hasProblemsWithTag=buf.toString().trim().length() == 0;
      }
      if (hasProblemsWithTag) {
        if (problems == null)         problems=new ArrayList<ProblemDescriptor>(2);
        if (valueElement != null) {
          problems.add(createDescriptor(valueElement,InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>@param " + valueElement.getText() + "</code>"),manager));
        }
      }
    }
  }
  if (superMethods.length == 0 && isTagRequired(psiMethod,"@throws") && psiMethod.getThrowsList().getReferencedTypes().length > 0) {
    boolean found=false;
    for (    PsiDocTag tag : tags) {
      if ("throws".equals(tag.getName()) || "exception".equals(tag.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      if (problems == null)       problems=new ArrayList<ProblemDescriptor>(2);
      ProblemDescriptor descriptor=createMissingThrowsTagDescriptor(psiMethod,manager);
      problems.add(descriptor);
    }
  }
  ArrayList<ProblemDescriptor> tagProblems=getTagValuesProblems(psiMethod,tags,manager);
  if (tagProblems != null) {
    if (problems == null)     problems=new ArrayList<ProblemDescriptor>(2);
    problems.addAll(tagProblems);
  }
  problems=checkForPeriodInDoc(docComment,problems,manager);
  for (  PsiDocTag tag : tags) {
    if ("param".equals(tag.getName())) {
      if (extractTagDescription(tag).length() == 0) {
        PsiDocTagValue value=tag.getValueElement();
        if (value instanceof PsiDocParamRef) {
          PsiDocParamRef paramRef=(PsiDocParamRef)value;
          PsiParameter[] params=psiMethod.getParameterList().getParameters();
          for (          PsiParameter param : params) {
            if (paramRef.getReference().isReferenceTo(param)) {
              if (problems == null)               problems=new ArrayList<ProblemDescriptor>(2);
              problems.add(createDescriptor(value,InspectionsBundle.message("inspection.javadoc.method.problem.descriptor","<code>@param</code>","<code>" + param.getName() + "</code>"),manager));
            }
          }
        }
      }
    }
 else     if ("return".equals(tag.getName())) {
      if (extractTagDescription(tag).length() == 0) {
        if (problems == null)         problems=new ArrayList<ProblemDescriptor>(2);
        String message=InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>@return</code>");
        ProblemDescriptor descriptor=manager.createProblemDescriptor(tag,message,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,true);
        problems.add(descriptor);
      }
    }
  }
  problems=checkDuplicateTags(tags,problems,manager);
  return problems == null ? null : problems.toArray(new ProblemDescriptorImpl[problems.size()]);
}
