{
  myProject=project;
  constructUi();
  Disposer.register(myProject,this);
  myFileEditorManager=fileEditorManager;
  myTreeChangeListener=new Runnable(){
    public void run(){
      updateToolWindowTitle();
    }
  }
;
  myConnection=project.getMessageBus().connect();
  myConnection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      refresh();
    }
  }
);
  myAutoScrollFromSourceHandler=new MyAutoScrollFromSourceHandler();
  myDataProvider=new MyPanel();
  myDataProvider.add(myPanel,BorderLayout.CENTER);
  myCopyPasteDelegator=new CopyPasteDelegator(myProject,myPanel){
    @NotNull protected PsiElement[] getSelectedElements(){
      final AbstractProjectViewPane viewPane=getCurrentProjectViewPane();
      return viewPane == null ? PsiElement.EMPTY_ARRAY : viewPane.getSelectedPSIElements();
    }
  }
;
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return isAutoscrollToSource(myCurrentViewId);
    }
    protected void setAutoScrollMode(    boolean state){
      setAutoscrollToSource(state,myCurrentViewId);
    }
  }
;
  toolWindowManager.addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    private boolean toolWindowVisible;
    public void stateChanged(){
      ToolWindow window=toolWindowManager.getToolWindow(ToolWindowId.PROJECT_VIEW);
      if (window == null)       return;
      if (window.isVisible() && !toolWindowVisible) {
        String id=getCurrentViewId();
        if (isAutoscrollToSource(id)) {
          myAutoScrollToSourceHandler.onMouseClicked(getCurrentProjectViewPane().getTree());
        }
        if (isAutoscrollFromSource(id)) {
          myAutoScrollFromSourceHandler.setAutoScrollMode(true);
        }
      }
      toolWindowVisible=window.isVisible();
    }
  }
);
}
