{
  final AbstractProjectViewPane currentProjectViewPane=getCurrentProjectViewPane();
  if (currentProjectViewPane != null) {
    final Object paneSpecificData=currentProjectViewPane.getData(dataId);
    if (paneSpecificData != null)     return paneSpecificData;
  }
  if (DataConstants.PSI_ELEMENT.equals(dataId)) {
    final PsiElement psiElement;
    Object element=getSelectedNodeElement();
    if (element instanceof PsiElement) {
      psiElement=(PsiElement)element;
    }
 else {
      psiElement=null;
    }
    return psiElement != null && psiElement.isValid() ? psiElement : null;
  }
  if (DataConstants.PSI_ELEMENT_ARRAY.equals(dataId)) {
    if (currentProjectViewPane == null) {
      return null;
    }
    PsiElement[] elements=currentProjectViewPane.getSelectedPSIElements();
    return elements.length == 0 ? null : elements;
  }
  if (DataConstantsEx.TARGET_PSI_ELEMENT.equals(dataId)) {
    return null;
  }
  if (DataConstants.CUT_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (DataConstants.COPY_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (DataConstants.PASTE_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (DataConstants.IDE_VIEW.equals(dataId)) {
    return myIdeView;
  }
  if (DataConstants.DELETE_ELEMENT_PROVIDER.equals(dataId)) {
    Object selectedNode=getSelectedNodeElement();
    if (selectedNode instanceof Module) {
      return myDeleteModuleProvider;
    }
    final LibraryOrderEntry orderEntry=getSelectedLibrary();
    if (orderEntry != null) {
      return new DeleteProvider(){
        public void deleteElement(        DataContext dataContext){
          detachLibrary(orderEntry,myProject);
        }
        public boolean canDeleteElement(        DataContext dataContext){
          return true;
        }
      }
;
    }
    return myDeletePSIElementProvider;
  }
  if (DataConstants.HELP_ID.equals(dataId)) {
    return HelpID.PROJECT_VIEWS;
  }
  if (PROJECT_VIEW_DATA_CONSTANT.equals(dataId)) {
    return ProjectViewImpl.this;
  }
  if (DataConstants.PROJECT_CONTEXT.equals(dataId)) {
    Object selected=getSelectedNodeElement();
    return selected instanceof Project ? selected : null;
  }
  if (DataConstants.MODULE_CONTEXT.equals(dataId)) {
    Object selected=getSelectedNodeElement();
    return selected instanceof Module ? selected : null;
  }
  if (DataConstantsEx.PACKAGE_ELEMENT.equals(dataId)) {
    Object selected=getSelectedNodeElement();
    return selected instanceof PackageElement ? selected : null;
  }
  if (DataConstants.MODULE_CONTEXT_ARRAY.equals(dataId)) {
    return getSelectedModules();
  }
  if (DataConstantsEx.MODULE_GROUP_ARRAY.equals(dataId)) {
    final List<ModuleGroup> selectedElements=getSelectedElements(ModuleGroup.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new ModuleGroup[selectedElements.size()]);
  }
  if (DataConstantsEx.LIBRARY_GROUP_ARRAY.equals(dataId)) {
    final List<LibraryGroupElement> selectedElements=getSelectedElements(LibraryGroupElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new LibraryGroupElement[selectedElements.size()]);
  }
  if (DataConstantsEx.NAMED_LIBRARY_ARRAY.equals(dataId)) {
    final List<NamedLibraryElement> selectedElements=getSelectedElements(NamedLibraryElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new NamedLibraryElement[selectedElements.size()]);
  }
  return null;
}
