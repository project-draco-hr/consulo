{
  myCombo.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value == null)       return this;
      Pair<String,String> ids=(Pair<String,String>)value;
      String id=ids.first;
      String subId=ids.second;
      AbstractProjectViewPane pane=getProjectViewPaneById(id);
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (pane != null) {
        if (subId == null) {
          setText(pane.getTitle());
          setIcon(pane.getIcon());
        }
 else {
          String presentable=pane.getPresentableSubIdName(subId);
          if (index == -1) {
            setText(pane.getTitle() + ": " + presentable);
            setIcon(pane.getIcon());
          }
 else {
            setText(presentable);
            setIcon(BULLET_ICON);
          }
        }
      }
      return this;
    }
  }
);
  myCombo.setMinimumAndPreferredWidth(10);
  myActionGroup=new DefaultActionGroup();
  myAutoScrollFromSourceHandler.install();
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.PROJECT_VIEW_TOOLBAR,myActionGroup,true);
  JComponent toolbarComponent=myToolBar.getComponent();
  myActionGroupPanel.setLayout(new BorderLayout());
  myActionGroupPanel.add(toolbarComponent,BorderLayout.CENTER);
  if (toolWindow != null) {
    final ContentManager contentManager=toolWindow.getContentManager();
    final Content content=contentManager.getFactory().createContent(getComponent(),ToolWindowId.PROJECT_VIEW,false);
    contentManager.addContent(content);
    content.setPreferredFocusedComponent(new Computable<JComponent>(){
      public JComponent compute(){
        final AbstractProjectViewPane current=getCurrentProjectViewPane();
        return current != null ? current.getComponentToFocus() : null;
      }
    }
);
    toolWindow.setIcon(IconLoader.getIcon(ApplicationInfoEx.getInstanceEx().getToolWindowIconUrl()));
  }
  myCombo.addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      if (!viewSelectionChanged()) {
        ToolWindowManager.getInstance(myProject).activateEditorComponent();
      }
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
      ToolWindowManager.getInstance(myProject).activateEditorComponent();
    }
  }
);
  installLabelFocusListener();
  GuiUtils.replaceJSplitPaneWithIDEASplitter(myPanel);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      splitterProportions.restoreSplitterProportions(myPanel);
    }
  }
);
  if (loadPaneExtensions) {
    for (    AbstractProjectViewPane pane : Extensions.getExtensions(AbstractProjectViewPane.EP_NAME,myProject)) {
      if (myUninitializedPaneState.containsKey(pane.getId())) {
        try {
          pane.readExternal(myUninitializedPaneState.get(pane.getId()));
        }
 catch (        InvalidDataException e) {
        }
        myUninitializedPaneState.remove(pane.getId());
      }
      if (pane.isInitiallyVisible()) {
        addProjectPane(pane);
      }
      Disposer.register(this,pane);
    }
  }
  isInitialized=true;
  doAddUninitializedPanes();
}
