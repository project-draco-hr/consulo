{
  myCombo.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value == null)       return this;
      Pair<String,String> ids=(Pair<String,String>)value;
      String id=ids.first;
      String subId=ids.second;
      AbstractProjectViewPane pane=getProjectViewPaneById(id);
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (pane != null) {
        if (subId == null) {
          setText(pane.getTitle());
          setIcon(pane.getIcon());
        }
 else {
          String presentable=pane.getPresentableSubIdName(subId);
          if (index == -1) {
            setText(pane.getTitle() + ": " + presentable);
            setIcon(pane.getIcon());
          }
 else {
            setText(presentable);
            setIcon(BULLET_ICON);
          }
        }
      }
      return this;
    }
  }
);
  myCombo.setMinimumAndPreferredWidth(10);
  myStructureViewWrapper=new MyStructureViewWrapperImpl();
  myStructureViewWrapper.setFileEditor(null);
  myStructureViewPanel.setLayout(new BorderLayout());
  myStructureViewPanel.add(myStructureViewWrapper.getComponent(),BorderLayout.CENTER);
  myActionGroup=new DefaultActionGroup();
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return isAutoscrollToSource(myCurrentViewId);
    }
    protected void setAutoScrollMode(    boolean state){
      setAutoscrollToSource(state,myCurrentViewId);
    }
  }
;
  myAutoScrollFromSourceHandler.install();
  final ActionToolbar toolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.PROJECT_VIEW_TOOLBAR,myActionGroup,true);
  JComponent toolbarComponent=toolBar.getComponent();
  myActionGroupPanel.setLayout(new BorderLayout());
  myActionGroupPanel.add(toolbarComponent,BorderLayout.NORTH);
  myStructureViewPanel.setVisible(isShowStructure());
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
    ToolWindow toolWindow=toolWindowManager.registerToolWindow(ToolWindowId.PROJECT_VIEW,getComponent(),ToolWindowAnchor.LEFT);
    toolWindow.setIcon(IconLoader.getIcon("/general/toolWindowProject.png"));
  }
  myCopyPasteDelegator=new CopyPasteDelegator(myProject,myPanel){
    @NotNull protected PsiElement[] getSelectedElements(){
      final AbstractProjectViewPane viewPane=getCurrentProjectViewPane();
      return viewPane == null ? PsiElement.EMPTY_ARRAY : viewPane.getSelectedPSIElements();
    }
  }
;
  myCombo.addPopupMenuListener(new PopupMenuListener(){
    public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      if (!viewSelectionChanged()) {
        ToolWindowManager.getInstance(myProject).activateEditorComponent();
      }
    }
    public void popupMenuCanceled(    PopupMenuEvent e){
      ToolWindowManager.getInstance(myProject).activateEditorComponent();
    }
  }
);
  installLabelFocusListener();
  GuiUtils.replaceJSplitPaneWithIDEASplitter(myPanel);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      splitterProportions.restoreSplitterProportions(myPanel);
    }
  }
);
  isInitialized=true;
  doAddUninitializedPanes();
}
