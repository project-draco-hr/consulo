{
  if (!isMine(psiElement))   return false;
  final Configuration configuration=Configuration.getInstance();
  final HashMap<MethodParameterInjection,Object> injectionsMap=new HashMap<MethodParameterInjection,Object>();
  final ArrayList<PsiAnnotation> annotations=new ArrayList<PsiAnnotation>();
  final PsiLiteralExpression host=(PsiLiteralExpression)psiElement;
  final Project project=host.getProject();
  collectInjections(host,configuration,injectionsMap,annotations);
  if (injectionsMap.isEmpty() && annotations.isEmpty())   return false;
  final ArrayList<MethodParameterInjection> originalInjections=new ArrayList<MethodParameterInjection>(injectionsMap.keySet());
  final List<MethodParameterInjection> newInjections=ContainerUtil.mapNotNull(originalInjections,new NullableFunction<MethodParameterInjection,MethodParameterInjection>(){
    public MethodParameterInjection fun(    final MethodParameterInjection injection){
      final Object key=injectionsMap.get(injection);
      final MethodParameterInjection newInjection=injection.copy();
      for (      MethodParameterInjection.MethodInfo info : newInjection.getMethodInfos()) {
        Configuration.clearMethodParameterFlag(info,(Trinity<String,Integer,Integer>)key);
      }
      for (      MethodParameterInjection.MethodInfo info : newInjection.getMethodInfos()) {
        if (info.isEnabled())         return newInjection;
      }
      return null;
    }
  }
);
  addRemoveInjections(project,configuration,newInjections,originalInjections,annotations);
  return true;
}
