{
  final Configuration configuration=Configuration.getInstance();
  final MethodParameterInjection originalInjection=configuration.findExistingInjection(template);
  final MethodParameterInjection newInjection=originalInjection == null ? template : originalInjection.copy();
  if (originalInjection != null) {
    boolean found=false;
    final MethodParameterInjection.MethodInfo curInfo=template.getMethodInfos().iterator().next();
    for (    MethodParameterInjection.MethodInfo info : newInjection.getMethodInfos()) {
      if (Comparing.equal(info.getMethodSignature(),curInfo.getMethodSignature())) {
        found=true;
        final boolean[] flags=curInfo.getParamFlags();
        for (int i=0; i < flags.length; i++) {
          if (flags[i]) {
            info.getParamFlags()[i]=true;
          }
        }
        if (!info.isReturnFlag() && curInfo.isReturnFlag())         info.setReturnFlag(true);
      }
    }
    if (!found) {
      final ArrayList<MethodParameterInjection.MethodInfo> methodInfos=new ArrayList<MethodParameterInjection.MethodInfo>(newInjection.getMethodInfos());
      methodInfos.add(curInfo);
      newInjection.setMethodInfos(methodInfos);
    }
  }
  if (InjectLanguageAction.doEditConfigurable(project,new MethodParameterInjectionConfigurable(newInjection,null,project))) {
    addRemoveInjections(project,configuration,Collections.singletonList(newInjection),Collections.singletonList(originalInjection),Collections.<PsiAnnotation>emptyList());
  }
}
