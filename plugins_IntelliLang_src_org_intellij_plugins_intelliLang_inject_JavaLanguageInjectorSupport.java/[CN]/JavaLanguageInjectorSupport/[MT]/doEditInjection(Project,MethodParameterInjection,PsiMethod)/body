{
  final Configuration configuration=Configuration.getInstance();
  template.initializePlaces();
  final BaseInjection baseTemplate=new BaseInjection(template.getSupportId()).copyFrom(template);
  final MethodParameterInjection allMethodParameterInjection=createMethodParameterInjection(baseTemplate,contextMethod,true);
  allMethodParameterInjection.initializePlaces();
  final BaseInjection originalInjection=configuration.findExistingInjection(allMethodParameterInjection);
  final MethodParameterInjection methodParameterInjection;
  if (originalInjection == null) {
    methodParameterInjection=template;
  }
 else {
    final BaseInjection originalCopy=originalInjection.copy();
    final InjectionPlace currentPlace=template.getInjectionPlaces().get(0);
    final String text=currentPlace.getText();
    originalCopy.setPlaceEnabled(text,true);
    methodParameterInjection=createMethodParameterInjection(originalCopy,contextMethod,false);
  }
  if (InjectLanguageAction.doEditConfigurable(project,new MethodParameterInjectionConfigurable(methodParameterInjection,null,project))) {
    methodParameterInjection.initializePlaces();
    final BaseInjection newInjection=new BaseInjection(methodParameterInjection.getSupportId()).copyFrom(methodParameterInjection);
    newInjection.mergeOriginalPlacesFrom(originalInjection,true);
    Configuration.getInstance().replaceInjectionsWithUndo(project,Collections.singletonList(newInjection),ContainerUtil.createMaybeSingletonList(originalInjection),Collections.<PsiElement>emptyList());
  }
}
