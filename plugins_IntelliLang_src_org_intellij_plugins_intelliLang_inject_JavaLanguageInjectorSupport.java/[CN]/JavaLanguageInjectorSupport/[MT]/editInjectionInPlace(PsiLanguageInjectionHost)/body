{
  if (!isMine(psiElement))   return false;
  final Configuration configuration=Configuration.getInstance();
  final HashMap<MethodParameterInjection,Object> injectionsMap=new HashMap<MethodParameterInjection,Object>();
  final ArrayList<PsiAnnotation> annotations=new ArrayList<PsiAnnotation>();
  final PsiLiteralExpression host=(PsiLiteralExpression)psiElement;
  final Project project=host.getProject();
  collectInjections(host,configuration,injectionsMap,annotations);
  if (injectionsMap.isEmpty() || !annotations.isEmpty())   return false;
  final ArrayList<MethodParameterInjection> injections=new ArrayList<MethodParameterInjection>(injectionsMap.keySet());
  final MethodParameterInjection originalInjection=injections.get(0);
  final MethodParameterInjection newInjection=originalInjection.copy();
  final AbstractInjectionPanel panel=new MethodParameterPanel(newInjection,project);
  panel.reset();
  final DialogBuilder builder=new DialogBuilder(project);
  builder.addOkAction();
  builder.addCancelAction();
  builder.setCenterPanel(panel.getComponent());
  builder.setTitle(EditInjectionSettingsAction.EDIT_INJECTION_TITLE);
  builder.setOkOperation(new Runnable(){
    public void run(){
      panel.apply();
      builder.getDialogWrapper().close(DialogWrapper.OK_EXIT_CODE);
    }
  }
);
  if (builder.show() == DialogWrapper.OK_EXIT_CODE) {
    final List<MethodParameterInjection> newInjections=ContainerUtil.find(newInjection.getMethodInfos(),new Condition<MethodParameterInjection.MethodInfo>(){
      public boolean value(      final MethodParameterInjection.MethodInfo info){
        return info.isEnabled();
      }
    }
) == null ? Collections.<MethodParameterInjection>emptyList() : Collections.singletonList(newInjection);
    addRemoveInjections(project,configuration,newInjections,Collections.singletonList(originalInjection),Collections.<PsiAnnotation>emptyList());
  }
  return true;
}
