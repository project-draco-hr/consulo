{
  final PsiClass containingClass=contextMethod.getContainingClass();
  final String className=containingClass == null ? "" : StringUtil.notNullize(containingClass.getQualifiedName());
  final MethodParameterInjection result=new MethodParameterInjection();
  result.copyFrom(injection);
  result.getInjectionPlaces().clear();
  result.setClassName(className);
  if (containingClass != null) {
    final ArrayList<MethodParameterInjection.MethodInfo> infos=new ArrayList<MethodParameterInjection.MethodInfo>();
    for (    PsiMethod method : containingClass.getMethods()) {
      final PsiModifierList modifiers=method.getModifierList();
      if (modifiers.hasModifierProperty(PsiModifier.PRIVATE) || modifiers.hasModifierProperty(PsiModifier.PACKAGE_LOCAL))       continue;
      boolean add=false;
      final MethodParameterInjection.MethodInfo methodInfo=MethodParameterInjection.createMethodInfo(method);
      if (MethodParameterInjection.isInjectable(method.getReturnType(),method.getProject())) {
        final int parameterIndex=-1;
        final InjectionPlace place=injection.findPlaceByText(getPatternStringForJavaPlace(method,parameterIndex));
        methodInfo.setReturnFlag(place != null && place.isEnabled() || includeAllPlaces);
        add=true;
      }
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      for (int i=0; i < parameters.length; i++) {
        final PsiParameter p=parameters[i];
        if (MethodParameterInjection.isInjectable(p.getType(),p.getProject())) {
          final InjectionPlace place=injection.findPlaceByText(getPatternStringForJavaPlace(method,i));
          methodInfo.getParamFlags()[i]=place != null && place.isEnabled() || includeAllPlaces;
          add=true;
        }
      }
      if (add) {
        infos.add(methodInfo);
      }
    }
    result.setMethodInfos(infos);
  }
  return result;
}
