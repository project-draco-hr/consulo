{
  final List<PsiFile> psiFiles=ContainerUtil.mapNotNull(annotations,new NullableFunction<PsiAnnotation,PsiFile>(){
    public PsiFile fun(    final PsiAnnotation psiAnnotation){
      return psiAnnotation instanceof PsiCompiledElement ? null : psiAnnotation.getContainingFile();
    }
  }
);
  final UndoableAction action=new UndoableAction(){
    public void undo() throws UnexpectedUndoException {
      addRemoveInjectionsInner(project,configuration,originalInjections,newInjections);
    }
    public void redo() throws UnexpectedUndoException {
      addRemoveInjectionsInner(project,configuration,newInjections,originalInjections);
    }
    public DocumentReference[] getAffectedDocuments(){
      return DocumentReference.EMPTY_ARRAY;
    }
    public boolean isComplex(){
      return true;
    }
  }
;
  new WriteCommandAction.Simple(project,psiFiles.toArray(new PsiFile[psiFiles.size()])){
    public void run(){
      for (      PsiAnnotation annotation : annotations) {
        annotation.delete();
      }
      addRemoveInjectionsInner(project,configuration,newInjections,originalInjections);
      UndoManager.getInstance(project).undoableActionPerformed(action);
    }
  }
.execute();
}
