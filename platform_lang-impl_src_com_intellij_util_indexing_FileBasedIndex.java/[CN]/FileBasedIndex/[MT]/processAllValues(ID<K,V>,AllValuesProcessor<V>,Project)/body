{
  try {
    ensureUpToDate(indexId,project,null);
    final UpdatableIndex<K,V,FileContent> index=getIndex(indexId);
    if (index == null) {
      return;
    }
    final Ref<StorageException> storageEx=new Ref<StorageException>(null);
    index.processAllKeys(new Processor<K>(){
      public boolean process(      K dataKey){
        try {
          final ValueContainer<V> container=index.getData(dataKey);
          for (final Iterator<V> it=container.getValueIterator(); it.hasNext(); ) {
            final V value=it.next();
            for (final ValueContainer.IntIterator inputsIt=container.getInputIdsIterator(value); inputsIt.hasNext(); ) {
              processor.process(inputsIt.next(),value);
            }
          }
          return true;
        }
 catch (        StorageException e) {
          storageEx.set(e);
          return false;
        }
      }
    }
);
    final StorageException ex=storageEx.get();
    if (ex != null) {
      throw ex;
    }
  }
 catch (  StorageException e) {
    scheduleRebuild(indexId,e);
  }
catch (  RuntimeException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof StorageException || cause instanceof IOException) {
      scheduleRebuild(indexId,e);
    }
 else {
      throw e;
    }
  }
}
