{
  final ThrowableConvertor<UpdatableIndex<K,V,FileContent>,TIntHashSet,StorageException> convertor=new ThrowableConvertor<UpdatableIndex<K,V,FileContent>,TIntHashSet,StorageException>(){
    @Nullable @Override public TIntHashSet convert(    UpdatableIndex<K,V,FileContent> index) throws StorageException {
      TIntHashSet mainIntersection=null;
      for (      K dataKey : dataKeys) {
        ProgressManager.checkCanceled();
        TIntHashSet copy=new TIntHashSet();
        final ValueContainer<V> container=index.getData(dataKey);
        for (final Iterator<V> valueIt=container.getValueIterator(); valueIt.hasNext(); ) {
          final V value=valueIt.next();
          if (valueChecker != null && !valueChecker.value(value)) {
            continue;
          }
          for (final ValueContainer.IntIterator inputIdsIterator=container.getInputIdsIterator(value); inputIdsIterator.hasNext(); ) {
            final int id=inputIdsIterator.next();
            if ((mainIntersection == null || mainIntersection.contains(id)) && (projectFilesFilter == null || projectFilesFilter.contains(id))) {
              copy.add(id);
            }
          }
        }
        mainIntersection=copy;
        if (mainIntersection.isEmpty()) {
          return new TIntHashSet();
        }
      }
      return mainIntersection;
    }
  }
;
  return processExceptions(indexId,null,filter,convertor);
}
