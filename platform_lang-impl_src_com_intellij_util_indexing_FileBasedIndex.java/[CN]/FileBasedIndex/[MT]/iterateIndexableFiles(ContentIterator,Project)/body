{
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Module[] modules=ModuleManager.getInstance(project).getModules();
  projectFileIndex.iterateContent(processor);
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  Set<VirtualFile> visitedRoots=new com.intellij.util.containers.HashSet<VirtualFile>();
  for (  IndexedRootsProvider provider : Extensions.getExtensions(IndexedRootsProvider.EP_NAME)) {
    final Set<String> rootsToIndex=provider.getRootsToIndex();
    for (    String url : rootsToIndex) {
      final VirtualFile root=VirtualFileManager.getInstance().findFileByUrl(url);
      if (visitedRoots.add(root)) {
        iterateRecursively(root,processor,indicator);
      }
    }
  }
  for (  Module module : modules) {
    OrderEntry[] orderEntries=ModuleRootManager.getInstance(module).getOrderEntries();
    for (    OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof LibraryOrderEntry || orderEntry instanceof JdkOrderEntry) {
        final VirtualFile[] libSources=orderEntry.getFiles(OrderRootType.SOURCES);
        final VirtualFile[] libClasses=orderEntry.getFiles(OrderRootType.CLASSES);
        for (        VirtualFile[] roots : new VirtualFile[][]{libSources,libClasses}) {
          for (          VirtualFile root : roots) {
            if (visitedRoots.add(root)) {
              iterateRecursively(root,processor,indicator);
            }
          }
        }
      }
    }
  }
}
