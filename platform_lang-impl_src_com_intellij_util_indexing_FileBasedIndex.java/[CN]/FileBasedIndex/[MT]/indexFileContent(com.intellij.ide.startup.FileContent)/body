{
  myChangedFilesUpdater.ensureAllInvalidateTasksCompleted();
  final VirtualFile file=content.getVirtualFile();
  FileContent fc=null;
  PsiFile psiFile=null;
  final Ref<ProcessCanceledException> pce=Ref.create(null);
  final List<Runnable> tasks=new ArrayList<Runnable>();
  for (  final ID<?,?> indexId : myIndices.keySet()) {
    if (shouldIndexFile(file,indexId)) {
      if (fc == null) {
        byte[] currentBytes;
        try {
          currentBytes=content.getBytes();
        }
 catch (        IOException e) {
          currentBytes=ArrayUtil.EMPTY_BYTE_ARRAY;
        }
        fc=new FileContent(file,currentBytes);
        psiFile=content.getUserData(PSI_FILE);
        if (psiFile != null) {
          psiFile.putUserData(PsiFileImpl.BUILDING_STUB,true);
          fc.putUserData(PSI_FILE,psiFile);
        }
        Project project=content.getUserData(PROJECT);
        if (project == null) {
          project=ProjectUtil.guessProjectForFile(file);
        }
        fc.putUserData(PROJECT,project);
      }
      final FileContent _fc=fc;
      tasks.add(new Runnable(){
        public void run(){
          try {
            updateSingleIndex(indexId,file,_fc);
          }
 catch (          ProcessCanceledException e) {
            pce.set(e);
          }
catch (          StorageException e) {
            requestRebuild(indexId);
            LOG.info(e);
          }
        }
      }
);
    }
  }
  if (tasks.size() > 0) {
    if (Registry.get(USE_MULTITHREADED_INDEXING).asBoolean()) {
      final Job<Object> job=JobScheduler.getInstance().createJob("IndexJob",Job.DEFAULT_PRIORITY / 2);
      try {
        for (        Runnable task : tasks) {
          job.addTask(task);
        }
        job.scheduleAndWaitForResults();
      }
 catch (      Throwable throwable) {
        LOG.info(throwable);
      }
    }
 else {
      for (      Runnable task : tasks) {
        task.run();
      }
    }
  }
  if (!pce.isNull()) {
    myChangedFilesUpdater.scheduleForUpdate(file);
    throw pce.get();
  }
  if (psiFile != null) {
    psiFile.putUserData(PsiFileImpl.BUILDING_STUB,null);
  }
}
