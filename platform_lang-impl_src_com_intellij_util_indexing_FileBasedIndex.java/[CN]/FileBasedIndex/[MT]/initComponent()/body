{
  final File workInProgressFile=getMarkerFile();
  if (workInProgressFile.exists()) {
    FileUtil.delete(PathManager.getIndexRoot());
  }
  try {
    final FileBasedIndexExtension[] extensions=Extensions.getExtensions(FileBasedIndexExtension.EXTENSION_POINT_NAME);
    for (    FileBasedIndexExtension<?,?> extension : extensions) {
      myRebuildStatus.put(extension.getName(),new AtomicInteger(OK));
    }
    final File corruptionMarker=new File(PathManager.getIndexRoot(),CORRUPTION_MARKER_NAME);
    final boolean currentVersionCorrupted=corruptionMarker.exists();
    for (    FileBasedIndexExtension<?,?> extension : extensions) {
      registerIndexer(extension,currentVersionCorrupted);
    }
    FileUtil.delete(corruptionMarker);
    dropUnregisteredIndices();
    for (    ID<?,?> indexId : myIndices.keySet()) {
      if (myRebuildStatus.get(indexId).compareAndSet(REQUIRES_REBUILD,OK)) {
        try {
          clearIndex(indexId);
        }
 catch (        StorageException e) {
          requestRebuild(indexId);
          LOG.error(e);
        }
      }
    }
    myVfManager.addVirtualFileListener(myChangedFilesCollector);
    registerIndexableSet(new AdditionalIndexableFileSet());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    ShutDownTracker.getInstance().registerShutdownTask(new Runnable(){
      public void run(){
        performShutdown();
      }
    }
);
    FileUtil.createIfDoesntExist(workInProgressFile);
    saveRegisteredIndices(myIndices.keySet());
  }
}
