{
  final File indexStorageFile=IndexInfrastructure.getInputIndexStorageFile(indexId);
  final Ref<Boolean> isBufferingMode=new Ref<Boolean>(false);
  final Map<Integer,Collection<K>> tempMap=new HashMap<Integer,Collection<K>>();
  final DataExternalizer<Collection<K>> dataExternalizer=new DataExternalizer<Collection<K>>(){
    public void save(    DataOutput out,    Collection<K> value) throws IOException {
      try {
        DataInputOutputUtil.writeINT(out,value.size());
        for (        K key : value) {
          keyDescriptor.save(out,key);
        }
      }
 catch (      IOException e) {
        throw e;
      }
catch (      IllegalArgumentException e) {
        throw new IOException("Error saving data for index " + indexId,e);
      }
    }
    public Collection<K> read(    DataInput in) throws IOException {
      try {
        final int size=DataInputOutputUtil.readINT(in);
        final List<K> list=new ArrayList<K>();
        for (int idx=0; idx < size; idx++) {
          list.add(keyDescriptor.read(in));
        }
        return list;
      }
 catch (      IOException e) {
        throw e;
      }
catch (      IllegalArgumentException e) {
        throw new IOException("Error reading data for index " + indexId,e);
      }
    }
  }
;
  final PersistentHashMap<Integer,Collection<K>> map=new PersistentHashMap<Integer,Collection<K>>(indexStorageFile,new EnumeratorIntegerDescriptor(),dataExternalizer){
    @Override public synchronized Collection<K> get(    Integer integer) throws IOException {
      if (isBufferingMode.get()) {
        final Collection<K> collection=tempMap.get(integer);
        if (collection != null) {
          return collection;
        }
      }
      return super.get(integer);
    }
    @Override public synchronized void put(    Integer integer,    Collection<K> ks) throws IOException {
      if (isBufferingMode.get()) {
        tempMap.put(integer,ks == null ? Collections.<K>emptySet() : ks);
      }
 else {
        super.put(integer,ks);
      }
    }
    @Override public synchronized void remove(    Integer integer) throws IOException {
      if (isBufferingMode.get()) {
        tempMap.put(integer,Collections.<K>emptySet());
      }
 else {
        super.remove(integer);
      }
    }
  }
;
  storage.addBufferingStateListsner(new MemoryIndexStorage.BufferingStateListener(){
    public void bufferingStateChanged(    boolean newState){
synchronized (map) {
        isBufferingMode.set(newState);
      }
    }
    public void memoryStorageCleared(){
synchronized (map) {
        tempMap.clear();
      }
    }
  }
);
  return map;
}
