{
  final MapReduceIndex<K,V,FileContent> index;
  if (extension instanceof CustomImplementationFileBasedIndexExtension) {
    final UpdatableIndex<K,V,FileContent> custom=((CustomImplementationFileBasedIndexExtension<K,V,FileContent>)extension).createIndexImplementation(indexId,this,storage);
    if (!(custom instanceof MapReduceIndex)) {
      return custom;
    }
    index=(MapReduceIndex<K,V,FileContent>)custom;
  }
 else {
    index=new MapReduceIndex<K,V,FileContent>(indexId,extension.getIndexer(),storage);
  }
  final KeyDescriptor<K> keyDescriptor=extension.getKeyDescriptor();
  index.setInputIdToDataKeysIndex(new PersistentHashMap<Integer,Collection<K>>(IndexInfrastructure.getInputIndexStorageFile(indexId),new EnumeratorIntegerDescriptor(),new DataExternalizer<Collection<K>>(){
    public void save(    DataOutput out,    Collection<K> value) throws IOException {
      DataInputOutputUtil.writeINT(out,value.size());
      for (      K key : value) {
        keyDescriptor.save(out,key);
      }
    }
    public Collection<K> read(    DataInput in) throws IOException {
      final int size=DataInputOutputUtil.readINT(in);
      final List<K> list=new ArrayList<K>();
      for (int idx=0; idx < size; idx++) {
        list.add(keyDescriptor.read(in));
      }
      return list;
    }
  }
));
  return index;
}
