{
  try {
    final UpdatableIndex<K,V,FileContent> index=getIndex(indexId);
    if (index == null) {
      return true;
    }
    final Project project=filter.getProject();
    ensureUpToDate(indexId,project,filter);
    final Lock readLock=index.getReadLock();
    try {
      readLock.lock();
      List<TIntHashSet> locals=new ArrayList<TIntHashSet>();
      for (      K dataKey : dataKeys) {
        TIntHashSet local=new TIntHashSet();
        locals.add(local);
        final ValueContainer<V> container=index.getData(dataKey);
        for (final Iterator<V> valueIt=container.getValueIterator(); valueIt.hasNext(); ) {
          final V value=valueIt.next();
          for (final ValueContainer.IntIterator inputIdsIterator=container.getInputIdsIterator(value); inputIdsIterator.hasNext(); ) {
            final int id=inputIdsIterator.next();
            local.add(id);
          }
        }
      }
      if (locals.isEmpty())       return true;
      Collections.sort(locals,new Comparator<TIntHashSet>(){
        public int compare(        TIntHashSet o1,        TIntHashSet o2){
          return o1.size() - o2.size();
        }
      }
);
      final PersistentFS fs=(PersistentFS)ManagingFS.getInstance();
      TIntIterator ids=join(locals).iterator();
      while (ids.hasNext()) {
        int id=ids.next();
        VirtualFile file=IndexInfrastructure.findFileByIdIfCached(fs,id);
        if (file != null && filter.accept(file)) {
          if (!processor.process(file))           return false;
        }
      }
    }
  finally {
      index.getReadLock().unlock();
    }
  }
 catch (  StorageException e) {
    scheduleRebuild(indexId,e);
  }
catch (  RuntimeException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof StorageException || cause instanceof IOException) {
      scheduleRebuild(indexId,cause);
    }
 else {
      throw e;
    }
  }
  return true;
}
