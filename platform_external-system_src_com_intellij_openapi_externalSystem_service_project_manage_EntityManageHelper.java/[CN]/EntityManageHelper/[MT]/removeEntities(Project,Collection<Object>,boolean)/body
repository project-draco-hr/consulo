{
  final List<Module> modules=ContainerUtilRt.newArrayList();
  final List<ModuleAwareContentRoot> contentRoots=ContainerUtilRt.newArrayList();
  final List<ExportableOrderEntry> dependencies=ContainerUtilRt.newArrayList();
  final List<JarData> jars=ContainerUtilRt.newArrayList();
  IdeEntityVisitor ideVisitor=new IdeEntityVisitor(){
    @Override public void visit(    @NotNull Project project){
    }
    @Override public void visit(    @NotNull Module module){
      modules.add(module);
    }
    @Override public void visit(    @NotNull ModuleAwareContentRoot contentRoot){
      contentRoots.add(contentRoot);
    }
    @Override public void visit(    @NotNull LibraryOrderEntry libraryDependency){
      dependencies.add(libraryDependency);
    }
    @Override public void visit(    @NotNull ModuleOrderEntry moduleDependency){
      dependencies.add(moduleDependency);
    }
    @Override public void visit(    @NotNull Library library){
    }
  }
;
  ExternalEntityVisitor gradleVisitor=new ExternalEntityVisitorAdapter(){
    @Override public void visit(    @NotNull JarData jar){
      jars.add(jar);
    }
  }
;
  for (  Object entity : entities) {
    ExternalSystemUtil.dispatch(entity,gradleVisitor,ideVisitor);
  }
  myJarManager.removeJars(jars,project,synchronous);
  myContentRootManager.removeContentRoots(contentRoots,synchronous);
  myDependencyManager.removeDependencies(dependencies,synchronous);
  myModuleManager.removeModules(modules,synchronous);
}
