{
  final PsiElement tailCallToken=descriptor.getPsiElement();
  final PsiMethod method=PsiTreeUtil.getParentOfType(tailCallToken,PsiMethod.class);
  if (method == null) {
    return;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final StringBuilder builder=new StringBuilder();
  builder.append('{');
  final String thisVariableName;
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiType returnType=method.getReturnType();
    final PsiClass containingClass=method.getContainingClass();
    if (returnType instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)returnType;
      final PsiClass aClass=classType.resolve();
      if (aClass != null && aClass.equals(containingClass)) {
        builder.append(containingClass.getName());
        final PsiManager manager=method.getManager();
        final CodeStyleManager styleManager=manager.getCodeStyleManager();
        thisVariableName=styleManager.suggestUniqueVariableName("result",method,false);
        builder.append(' ');
        builder.append(thisVariableName);
        builder.append(" = this;");
      }
 else {
        thisVariableName=null;
      }
    }
 else {
      thisVariableName=null;
    }
  }
 else {
    thisVariableName=null;
  }
  final boolean tailCallIsContainedInLoop;
  if (ControlFlowUtils.isInLoop(tailCallToken)) {
    tailCallIsContainedInLoop=true;
    builder.append(method.getName());
    builder.append(':');
  }
 else {
    tailCallIsContainedInLoop=false;
  }
  builder.append("while(true)");
  final PsiManager psiManager=PsiManager.getInstance(project);
  final CodeStyleManager codeStyleManager=psiManager.getCodeStyleManager();
  replaceTailCalls(body,method,thisVariableName,tailCallIsContainedInLoop,builder);
  builder.append('}');
  @NonNls final String replacementText=builder.toString();
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiCodeBlock block=elementFactory.createCodeBlockFromText(replacementText,method);
  body.replace(block);
  codeStyleManager.reformat(method);
}
