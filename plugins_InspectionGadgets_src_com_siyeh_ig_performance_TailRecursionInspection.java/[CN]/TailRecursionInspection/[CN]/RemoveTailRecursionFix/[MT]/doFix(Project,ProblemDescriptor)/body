{
  final PsiElement methodNameToken=descriptor.getPsiElement();
  final PsiMethod method=PsiTreeUtil.getParentOfType(methodNameToken,PsiMethod.class);
  if (method == null) {
    return;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final PsiManager psiManager=PsiManager.getInstance(project);
  final CodeStyleManager codeStyleManager=psiManager.getCodeStyleManager();
  final PsiElement[] children=body.getChildren();
  final boolean[] containedTailCallInLoop=new boolean[1];
  containedTailCallInLoop[0]=false;
  final StringBuffer buffer=new StringBuffer();
  for (int i=1; i < children.length; i++) {
    replaceTailCalls(children[i],method,buffer,containedTailCallInLoop);
  }
  final String labelString;
  if (containedTailCallInLoop[0]) {
    labelString=method.getName() + ':';
  }
 else {
    labelString="";
  }
  @NonNls final String replacementText='{' + labelString + "while(true){"+ buffer+ '}';
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiCodeBlock block=elementFactory.createCodeBlockFromText(replacementText,null);
  body.replace(block);
  codeStyleManager.reformat(method);
}
