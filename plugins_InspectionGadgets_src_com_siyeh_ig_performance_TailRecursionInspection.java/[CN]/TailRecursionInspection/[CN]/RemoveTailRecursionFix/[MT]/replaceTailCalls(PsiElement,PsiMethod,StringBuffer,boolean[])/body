{
  final String text=element.getText();
  if (isTailCallReturn(element,method)) {
    final PsiReturnStatement returnStatement=(PsiReturnStatement)element;
    final PsiMethodCallExpression call=(PsiMethodCallExpression)returnStatement.getReturnValue();
    final PsiExpressionList argumentList=call.getArgumentList();
    final PsiExpression[] args=argumentList.getExpressions();
    final PsiParameterList parameterList=method.getParameterList();
    final PsiParameter[] parameters=parameterList.getParameters();
    final boolean isInBlock=returnStatement.getParent() instanceof PsiCodeBlock;
    if (!isInBlock) {
      out.append('{');
    }
    for (int i=0; i < parameters.length; i++) {
      final PsiParameter parameter=parameters[i];
      final PsiExpression arg=args[i];
      final String parameterName=parameter.getName();
      final String argText=arg.getText();
      out.append(parameterName);
      out.append(" = ");
      out.append(argText);
      out.append(';');
    }
    final PsiCodeBlock body=method.getBody();
    if (ControlFlowUtils.blockCompletesWithStatement(body,returnStatement)) {
    }
 else     if (ControlFlowUtils.isInLoop(element)) {
      final String methodName=method.getName();
      containedTailCallInLoop[0]=true;
      out.append("continue ");
      out.append(methodName);
      out.append(';');
    }
 else {
      out.append("continue;");
    }
    if (!isInBlock) {
      out.append('}');
    }
  }
 else {
    final PsiElement[] children=element.getChildren();
    if (children.length == 0) {
      out.append(text);
    }
 else {
      for (      final PsiElement child : children) {
        replaceTailCalls(child,method,out,containedTailCallInLoop);
      }
    }
  }
}
