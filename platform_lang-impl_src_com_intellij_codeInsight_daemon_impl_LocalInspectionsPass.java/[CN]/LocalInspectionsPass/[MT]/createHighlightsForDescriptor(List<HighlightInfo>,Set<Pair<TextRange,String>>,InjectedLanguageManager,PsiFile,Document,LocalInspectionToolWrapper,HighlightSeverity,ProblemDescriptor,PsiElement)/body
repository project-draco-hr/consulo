{
  LocalInspectionTool tool=toolWrapper.getTool();
  if (myIgnoreSuppressed && SuppressionUtil.inspectionResultSuppressed(element,tool))   return;
  HighlightInfoType level=ProblemDescriptorUtil.highlightTypeFromDescriptor(descriptor,severity,mySeverityRegistrar);
  HighlightInfo info=createHighlightInfo(descriptor,toolWrapper,level,emptyActionRegistered,element);
  if (info == null)   return;
  PsiFile context=getTopLevelFileInBaseLanguage(element);
  PsiFile myContext=getTopLevelFileInBaseLanguage(getFile());
  if (context != getFile()) {
    LOG.error("Reported element " + element + " is not from the file '"+ file+ "' the inspection '"+ toolWrapper+ "' ("+ tool.getClass()+ ") "+ "was invoked for. Message: '"+ descriptor+ "'.\n"+ "Element' containing file: "+ context+ "\n"+ "Inspection invoked for file: "+ myContext+ "\n");
  }
  boolean isInjected=file != getFile();
  if (!isInjected) {
    outInfos.add(info);
    return;
  }
  List<TextRange> editables=ilManager.intersectWithAllEditableFragments(file,new TextRange(info.startOffset,info.endOffset));
  for (  TextRange editable : editables) {
    TextRange hostRange=((DocumentWindow)documentRange).injectedToHost(editable);
    int start=hostRange.getStartOffset();
    int end=hostRange.getEndOffset();
    HighlightInfo.Builder builder=HighlightInfo.newHighlightInfo(info.type).range(element,start,end);
    String description=info.getDescription();
    if (description != null) {
      builder.description(description);
    }
    String toolTip=info.getToolTip();
    if (toolTip != null) {
      builder.escapedToolTip(toolTip);
    }
    HighlightInfo patched=builder.createUnconditionally();
    if (patched.startOffset != patched.endOffset || info.startOffset == info.endOffset) {
      patched.setFromInjection(true);
      registerQuickFixes(toolWrapper,descriptor,patched,emptyActionRegistered);
      outInfos.add(patched);
    }
  }
}
