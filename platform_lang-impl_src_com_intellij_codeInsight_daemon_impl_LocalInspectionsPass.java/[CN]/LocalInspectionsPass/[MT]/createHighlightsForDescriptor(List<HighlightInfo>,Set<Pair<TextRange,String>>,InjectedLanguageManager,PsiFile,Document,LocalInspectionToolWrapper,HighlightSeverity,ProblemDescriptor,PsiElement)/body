{
  if (element == null)   return;
  if (myIgnoreSuppressed && InspectionManagerEx.inspectionResultSuppressed(element,tool.getTool()))   return;
  HighlightInfoType level=highlightTypeFromDescriptor(descriptor,severity);
  HighlightInfo info=createHighlightInfo(descriptor,tool,level,emptyActionRegistered,element);
  if (info == null)   return;
  if (file == myFile) {
    outInfos.add(info);
    return;
  }
  List<TextRange> editables=ilManager.intersectWithAllEditableFragments(file,new TextRange(info.startOffset,info.endOffset));
  for (  TextRange editable : editables) {
    TextRange hostRange=((DocumentWindow)documentRange).injectedToHost(editable);
    int start=hostRange.getStartOffset();
    int end=hostRange.getEndOffset();
    HighlightInfo.Builder builder=HighlightInfo.newHighlightInfo(info.type).range(element,start,end);
    String description=info.getDescription();
    if (description != null) {
      builder.description(description);
    }
    String toolTip=info.getToolTip();
    if (toolTip != null) {
      builder.escapedToolTip(toolTip);
    }
    HighlightInfo patched=builder.createUnconditionally();
    if (patched.startOffset != patched.endOffset || info.startOffset == info.endOffset) {
      patched.setFromInjection(true);
      registerQuickFixes(tool,descriptor,patched,emptyActionRegistered);
      outInfos.add(patched);
    }
  }
}
