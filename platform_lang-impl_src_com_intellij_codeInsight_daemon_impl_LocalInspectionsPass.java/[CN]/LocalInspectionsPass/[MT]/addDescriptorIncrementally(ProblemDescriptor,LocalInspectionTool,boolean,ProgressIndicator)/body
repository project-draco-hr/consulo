{
  if (ignoreSuppressed && InspectionManagerEx.inspectionResultSuppressed(descriptor.getPsiElement(),tool)) {
    return;
  }
  infosToAdd.offer(Pair.create(descriptor,tool));
  if (haveInfosToProcess.getAndSet(true))   return;
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
      InjectedLanguageManager ilManager=InjectedLanguageManager.getInstance(myProject);
      List<HighlightInfo> infos=new ArrayList<HighlightInfo>(2);
      while (haveInfosToProcess.compareAndSet(true,false)) {
        for (Pair<ProblemDescriptor,LocalInspectionTool> pair=infosToAdd.poll(); pair != null; pair=infosToAdd.poll()) {
          if (indicator.isCanceled()) {
            infosToAdd.clear();
            return;
          }
          ProblemDescriptor descriptor=pair.first;
          LocalInspectionTool tool=pair.second;
          PsiElement psiElement=descriptor.getPsiElement();
          if (psiElement == null)           continue;
          PsiFile file=psiElement.getContainingFile();
          Document thisDocument=documentManager.getDocument(file);
          HighlightSeverity severity=inspectionProfile.getErrorLevel(HighlightDisplayKey.find(tool.getShortName()),file).getSeverity();
          infos.clear();
          createHighlightsForDescriptor(infos,emptyActionRegistered,ilManager,file,thisDocument,tool,severity,descriptor);
          for (          HighlightInfo info : infos) {
            UpdateHighlightersUtil.addHighlighterToEditorIncrementally(myProject,myDocument,myFile,myStartOffset,myEndOffset,info,getId());
          }
        }
      }
    }
  }
);
}
