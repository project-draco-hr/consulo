{
  Set<TextRange> emptyActionRegistered=new THashSet<TextRange>();
  InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
  InjectedLanguageManager ilManager=InjectedLanguageManager.getInstance(myProject);
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);
  for (  Map.Entry<PsiFile,List<InspectionResult>> entry : result.entrySet()) {
    PsiFile file=entry.getKey();
    if (file == myFile)     continue;
    DocumentWindow documentRange=(DocumentWindow)documentManager.getDocument(file);
    List<InspectionResult> resultList=entry.getValue();
    for (    InspectionResult inspectionResult : resultList) {
      LocalInspectionTool tool=inspectionResult.tool;
      HighlightSeverity severity=inspectionProfile.getErrorLevel(HighlightDisplayKey.find(tool.getShortName()),myFile).getSeverity();
      for (      ProblemDescriptor descriptor : inspectionResult.foundProblems) {
        PsiElement psiElement=descriptor.getPsiElement();
        if (InspectionManagerEx.inspectionResultSuppressed(psiElement,tool))         continue;
        HighlightInfoType level=highlightTypeFromDescriptor(descriptor,severity);
        HighlightInfo info=createHighlightInfo(descriptor,tool,level,emptyActionRegistered);
        if (info == null)         continue;
        List<TextRange> editables=ilManager.intersectWithAllEditableFragments(file,new TextRange(info.startOffset,info.endOffset));
        for (        TextRange editable : editables) {
          TextRange hostRange=documentRange.injectedToHost(editable);
          QuickFix[] fixes=descriptor.getFixes();
          LocalQuickFix[] localFixes=null;
          if (fixes != null) {
            localFixes=new LocalQuickFix[fixes.length];
            for (int k=0; k < fixes.length; k++) {
              QuickFix fix=fixes[k];
              localFixes[k]=(LocalQuickFix)fix;
            }
          }
          ProblemDescriptor patchedDescriptor=iManager.createProblemDescriptor(myFile,hostRange,descriptor.getDescriptionTemplate(),descriptor.getHighlightType(),true,localFixes);
          LocalInspectionToolWrapper toolWrapper=tool2Wrapper.get(tool);
          toolWrapper.addProblemDescriptors(Collections.singletonList(patchedDescriptor),true);
        }
      }
    }
  }
}
