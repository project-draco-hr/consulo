{
  Processor<InspectionContext> processor=new Processor<InspectionContext>(){
    @Override public boolean process(    InspectionContext context){
      indicator.checkCanceled();
      ApplicationManager.getApplication().assertReadAccessAllowed();
      InspectionEngine.acceptElements(elements,context.visitor,elementDialectIds,context.dialectIdsSpecifiedForTool);
      advanceProgress(1);
      context.tool.getTool().inspectionFinished(session,context.holder);
      if (context.holder.hasResults()) {
        List<ProblemDescriptor> allProblems=context.holder.getResults();
        List<ProblemDescriptor> restProblems=allProblems.subList(context.problemsSize,allProblems.size());
        appendDescriptors(getFile(),restProblems,context.tool);
      }
      return true;
    }
  }
;
  boolean result=JobLauncher.getInstance().invokeConcurrentlyUnderProgress(init,indicator,myFailFastOnAcquireReadAction,processor);
  if (!result) {
    throw new ProcessCanceledException();
  }
}
