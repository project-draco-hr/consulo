{
  myFailFastOnAcquireReadAction=failFastOnAcquireReadAction;
  if (toolWrappers.isEmpty())   return;
  List<PsiElement> inside=new ArrayList<PsiElement>();
  List<PsiElement> outside=new ArrayList<PsiElement>();
  Divider.divideInsideAndOutside(myFile,myStartOffset,myEndOffset,myPriorityRange,inside,outside,HighlightLevelUtil.AnalysisLevel.HIGHLIGHT_AND_INSPECT,true);
  Set<Language> languages=new HashSet<Language>();
  for (  PsiElement element : inside) {
    languages.add(element.getLanguage());
  }
  for (  PsiElement element : outside) {
    languages.add(element.getLanguage());
  }
  Set<String> langIds=new HashSet<String>();
  for (  Language language : languages) {
    langIds.add(language.getID());
    for (    Language dialect : language.getDialects()) {
      langIds.add(dialect.getID());
    }
  }
  List<LocalInspectionTool> tools=new ArrayList<LocalInspectionTool>();
  for (  LocalInspectionToolWrapper wrapper : toolWrappers) {
    if (wrapper.getLanguage() == null || langIds.contains(wrapper.getLanguage())) {
      LocalInspectionTool tool=wrapper.getTool();
      if (!checkDumbAwareness || tool instanceof DumbAware) {
        tools.add(tool);
      }
    }
  }
  setProgressLimit(1L * tools.size() * 2);
  final LocalInspectionToolSession session=new LocalInspectionToolSession(myFile,myStartOffset,myEndOffset);
  List<Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor>> init=new ArrayList<Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor>>();
  visitPriorityElementsAndInit(tools,iManager,isOnTheFly,indicator,inside,session,init);
  visitRestElementsAndCleanup(tools,iManager,isOnTheFly,indicator,outside,session,init);
  indicator.checkCanceled();
  myInfos=new ArrayList<HighlightInfo>();
  addHighlightsFromResults(myInfos,indicator);
}
