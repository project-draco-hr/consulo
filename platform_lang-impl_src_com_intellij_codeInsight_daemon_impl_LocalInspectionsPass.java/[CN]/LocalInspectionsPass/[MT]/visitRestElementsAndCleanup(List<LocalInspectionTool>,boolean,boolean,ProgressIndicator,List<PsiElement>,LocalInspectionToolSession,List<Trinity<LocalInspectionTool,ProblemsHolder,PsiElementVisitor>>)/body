{
  boolean result=JobUtil.invokeConcurrentlyUnderMyProgress(init,new Processor<Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor>>(){
    @Override public boolean process(    Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor> i){
      LocalInspectionTool tool=i.first;
      final ProgressManager progressManager=ProgressManager.getInstance();
      indicator.checkCanceled();
      ProgressIndicator original=ProgressWrapper.unwrap(progressManager.getProgressIndicator());
      LOG.assertTrue(original == indicator,original);
      ApplicationManager.getApplication().assertReadAccessAllowed();
      ProblemsHolder holder=i.second;
      PsiElementVisitor elementVisitor=i.third;
      for (      PsiElement element : elements) {
        indicator.checkCanceled();
        element.accept(elementVisitor);
      }
      advanceProgress(elements.size());
      tool.inspectionFinished(session);
      if (holder.hasResults()) {
        appendDescriptors(myFile,holder.getResults(),tool);
      }
      return true;
    }
  }
,myFailFastOnAcquireReadAction);
  if (!result) {
    throw new ProcessCanceledException();
  }
  inspectInjectedPsi(elements,tools,isOnTheFly,ignoreSuppressed,indicator,session);
}
