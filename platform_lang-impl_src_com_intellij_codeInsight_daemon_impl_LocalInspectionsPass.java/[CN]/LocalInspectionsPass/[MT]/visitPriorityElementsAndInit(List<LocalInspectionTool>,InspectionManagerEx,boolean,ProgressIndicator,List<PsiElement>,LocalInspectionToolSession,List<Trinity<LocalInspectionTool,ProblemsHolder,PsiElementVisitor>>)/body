{
  boolean result=JobUtil.invokeConcurrentlyUnderProgress(tools,new Processor<LocalInspectionTool>(){
    public boolean process(    final LocalInspectionTool tool){
      indicator.checkCanceled();
      ApplicationManager.getApplication().assertReadAccessAllowed();
      final boolean[] applyIncrementally={isOnTheFly};
      ProblemsHolder holder=new ProblemsHolder(iManager,myFile,isOnTheFly){
        @Override public void registerProblem(        @NotNull ProblemDescriptor descriptor){
          super.registerProblem(descriptor);
          if (applyIncrementally[0]) {
            addDescriptorIncrementally(descriptor,tool,indicator);
          }
        }
      }
;
      PsiElementVisitor visitor=createVisitorAndAcceptElements(tool,holder,isOnTheFly,session,elements,indicator);
synchronized (init) {
        init.add(Trinity.create(tool,holder,visitor));
      }
      advanceProgress(1);
      if (holder.hasResults()) {
        appendDescriptors(myFile,holder.getResults(),tool);
      }
      applyIncrementally[0]=false;
      return true;
    }
  }
,myFailFastOnAcquireReadAction,indicator);
  if (!result)   throw new ProcessCanceledException();
  inspectInjectedPsi(elements,tools,isOnTheFly,indicator,iManager,true);
}
