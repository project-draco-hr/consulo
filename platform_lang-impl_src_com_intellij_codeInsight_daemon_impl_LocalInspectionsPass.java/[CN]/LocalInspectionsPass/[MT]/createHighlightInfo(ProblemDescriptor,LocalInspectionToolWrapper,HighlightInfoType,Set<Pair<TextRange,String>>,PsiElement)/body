{
  @NonNls String message=ProblemDescriptionNode.renderDescriptionMessage(descriptor,element);
  final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
  final InspectionProfile inspectionProfile=myProfileWrapper.getInspectionProfile();
  if (!inspectionProfile.isToolEnabled(key,myFile))   return null;
  HighlightInfoType type=new HighlightInfoType.HighlightInfoTypeImpl(level.getSeverity(element),level.getAttributesKey());
  final String plainMessage=message.startsWith("<html>") ? StringUtil.unescapeXml(XmlStringUtil.stripHtml(message).replaceAll("<[^>]*>","")) : message;
  @NonNls final String link=" <a " + "href=\"#inspection/" + tool.getShortName() + "\""+ (UIUtil.isUnderDarcula() ? " color=\"7AB4C9\" " : "")+ ">"+ DaemonBundle.message("inspection.extended.description")+ "</a> "+ myShortcutText;
  @NonNls String tooltip=null;
  if (descriptor.showTooltip()) {
    if (message.startsWith("<html>")) {
      tooltip=XmlStringUtil.wrapInHtml(XmlStringUtil.stripHtml(message) + link);
    }
 else {
      tooltip=XmlStringUtil.wrapInHtml(XmlStringUtil.escapeString(message) + link);
    }
  }
  HighlightInfo highlightInfo=highlightInfoFromDescriptor(descriptor,type,plainMessage,tooltip,element);
  if (highlightInfo != null) {
    registerQuickFixes(tool,descriptor,highlightInfo,emptyActionRegistered);
  }
  return highlightInfo;
}
