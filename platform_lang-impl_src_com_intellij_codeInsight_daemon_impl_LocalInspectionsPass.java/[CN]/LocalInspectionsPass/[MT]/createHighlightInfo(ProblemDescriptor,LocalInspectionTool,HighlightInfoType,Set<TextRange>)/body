{
  PsiElement psiElement=descriptor.getPsiElement();
  if (psiElement == null)   return null;
  @NonNls String message=ProblemDescriptionNode.renderDescriptionMessage(descriptor);
  final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
  final InspectionProfile inspectionProfile=myProfileWrapper.getInspectionProfile();
  if (!inspectionProfile.isToolEnabled(key,myFile))   return null;
  HighlightInfoType type=new HighlightInfoType.HighlightInfoTypeImpl(level.getSeverity(psiElement),level.getAttributesKey());
  final String plainMessage=message.startsWith("<html>") ? StringUtil.unescapeXml(message.replaceAll("<[^>]*>","")) : message;
  @NonNls final String link="<a href=\"#inspection/" + tool.getShortName() + "\"> "+ DaemonBundle.message("inspection.extended.description")+ "</a>"+ myShortcutText;
  @NonNls String tooltip=null;
  if (descriptor.showTooltip()) {
    if (message.startsWith("<html>")) {
      tooltip=message.contains("</body>") ? message.replace("</body>",link + "</body>") : message.replace("</html>",link + "</html>");
    }
 else {
      tooltip="<html><body>" + XmlStringUtil.escapeString(message) + link+ "</body></html>";
    }
  }
  HighlightInfo highlightInfo=highlightInfoFromDescriptor(descriptor,type,plainMessage,tooltip);
  registerQuickFixes(tool,descriptor,highlightInfo,emptyActionRegistered);
  return highlightInfo;
}
