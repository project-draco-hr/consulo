{
  indicator.checkCanceled();
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final LocalInspectionTool tool=toolWrapper.getTool();
  final boolean[] applyIncrementally={isOnTheFly};
  ProblemsHolder holder=new ProblemsHolder(iManager,getFile(),isOnTheFly){
    @Override public void registerProblem(    @NotNull ProblemDescriptor descriptor){
      super.registerProblem(descriptor);
      if (applyIncrementally[0]) {
        addDescriptorIncrementally(descriptor,toolWrapper,indicator);
      }
    }
  }
;
  PsiElementVisitor visitor=InspectionEngine.createVisitorAndAcceptElements(tool,holder,isOnTheFly,session,elements,elementDialectIds,dialectIdsSpecifiedForTool);
synchronized (init) {
    init.add(new InspectionContext(toolWrapper,holder,holder.getResultCount(),visitor,dialectIdsSpecifiedForTool));
  }
  advanceProgress(1);
  if (holder.hasResults()) {
    appendDescriptors(getFile(),holder.getResults(),toolWrapper);
  }
  applyIncrementally[0]=false;
  return true;
}
