{
  Processor<Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor>> processor=new Processor<Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor>>(){
    @Override public boolean process(    Trinity<LocalInspectionTool,ProblemsHolder,PsiElementVisitor> trinity){
      LocalInspectionTool tool=trinity.first;
      indicator.checkCanceled();
      ApplicationManager.getApplication().assertReadAccessAllowed();
      ProblemsHolder holder=trinity.second;
      PsiElementVisitor elementVisitor=trinity.third;
      acceptElements(elements,elementVisitor);
      advanceProgress(1);
      tool.inspectionFinished(session,holder);
      if (holder.hasResults()) {
        appendDescriptors(myFile,holder.getResults(),tool);
      }
      return true;
    }
  }
;
  boolean result=JobUtil.invokeConcurrentlyUnderProgress(init,indicator,myFailFastOnAcquireReadAction,processor);
  if (!result) {
    throw new ProcessCanceledException();
  }
  inspectInjectedPsi(elements,tools,isOnTheFly,indicator,iManager,false);
}
