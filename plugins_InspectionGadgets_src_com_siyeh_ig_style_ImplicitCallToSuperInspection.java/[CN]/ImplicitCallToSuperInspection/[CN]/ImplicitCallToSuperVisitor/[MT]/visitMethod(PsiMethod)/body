{
  super.visitMethod(method);
  if (!method.isConstructor()) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (containingClass.isEnum()) {
    return;
  }
  if (m_ignoreForObjectSubclasses) {
    final PsiClass superClass=containingClass.getSuperClass();
    if (superClass != null) {
      final String superClassName=superClass.getQualifiedName();
      if ("java.lang.Object".equals(superClassName)) {
        return;
      }
    }
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length == 0) {
    registerMethodError(method);
    return;
  }
  final PsiStatement firstStatement=statements[0];
  if (isConstructorCall(firstStatement)) {
    return;
  }
  registerMethodError(method);
}
