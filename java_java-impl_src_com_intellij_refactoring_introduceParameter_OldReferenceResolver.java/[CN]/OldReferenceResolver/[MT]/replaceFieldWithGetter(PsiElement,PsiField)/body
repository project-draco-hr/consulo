{
  if (RefactoringUtil.isAssignmentLHS(expr)) {
    return expr;
  }
  PsiElement newExpr=expr;
  PsiMethod getterPrototype=PropertyUtil.generateGetterPrototype(psiField);
  PsiMethod getter=psiField.getContainingClass().findMethodBySignature(getterPrototype,true);
  if (getter != null) {
    if (JavaPsiFacade.getInstance(psiField.getProject()).getResolveHelper().isAccessible(getter,newExpr,null)) {
      PsiElementFactory factory=JavaPsiFacade.getInstance(newExpr.getProject()).getElementFactory();
      String id=getter.getName();
      final PsiElement parent=newExpr.getParent();
      String qualifier=null;
      if (parent instanceof PsiReferenceExpression) {
        final PsiExpression qualifierExpression=((PsiReferenceExpression)parent).getQualifierExpression();
        if (qualifierExpression != null) {
          qualifier=qualifierExpression.getText();
        }
      }
      PsiMethodCallExpression getterCall=(PsiMethodCallExpression)factory.createExpressionFromText((qualifier != null ? qualifier + "." : "") + id + "()",null);
      getterCall=(PsiMethodCallExpression)CodeStyleManager.getInstance(myProject).reformat(getterCall);
      if (parent != null) {
        newExpr=parent.replace(getterCall);
      }
 else {
        newExpr=getterCall;
      }
    }
 else {
    }
  }
  return newExpr;
}
