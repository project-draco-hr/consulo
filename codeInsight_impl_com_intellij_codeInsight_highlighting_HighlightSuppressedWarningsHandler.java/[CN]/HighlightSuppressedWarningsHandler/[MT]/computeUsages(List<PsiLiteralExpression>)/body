{
  final Project project=myTarget.getProject();
  final PsiElement parent=myTarget.getParent().getParent();
  LocalInspectionsPass pass=new LocalInspectionsPass(myFile,myFile.getViewProvider().getDocument(),parent.getTextRange().getStartOffset(),parent.getTextRange().getEndOffset());
  final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile(myTarget);
  for (  PsiLiteralExpression target : targets) {
    final Object value=target.getValue();
    if (value instanceof String) {
      final InspectionProfileEntry toolById=((InspectionProfileImpl)inspectionProfile).getToolById(((String)value));
      if (toolById instanceof LocalInspectionToolWrapper) {
        final LocalInspectionToolWrapper tool=new LocalInspectionToolWrapper(((LocalInspectionToolWrapper)toolById).getTool());
        final InspectionManagerEx managerEx=((InspectionManagerEx)InspectionManagerEx.getInstance(project));
        final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
        tool.initialize(context);
        ((RefManagerImpl)context.getRefManager()).inspectionReadActionStarted();
        pass.doInspectInBatch(managerEx,new InspectionProfileEntry[]{tool},ProgressManager.getInstance().getProgressIndicator(),false);
        for (        HighlightInfo info : pass.getInfos()) {
          final PsiElement element=CollectHighlightsUtil.findCommonParent(myFile,info.startOffset,info.endOffset);
          if (element != null) {
            addOccurrence(element);
          }
        }
      }
    }
  }
}
