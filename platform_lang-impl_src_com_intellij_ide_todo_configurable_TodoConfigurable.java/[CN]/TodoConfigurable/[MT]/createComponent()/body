{
  PanelWithButtons patternsPanel=new PanelWithButtons(){
{
      initPanel();
    }
    protected String getLabelText(){
      return IdeBundle.message("label.todo.patterns");
    }
    protected JComponent createMainComponent(){
      myPatternsTable=new Table(myPatternsModel);
      myPatternsTable.getEmptyText().setText(IdeBundle.message("text.todo.no.patterns"));
      myPatternsTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      JComboBox todoTypeCombo=new JComboBox(new Icon[]{TodoAttributes.DEFAULT_ICON,TodoAttributes.QUESTION_ICON,TodoAttributes.IMPORTANT_ICON});
      todoTypeCombo.setRenderer(new TodoTypeListCellRenderer());
      TableColumn typeColumn=myPatternsTable.getColumnModel().getColumn(0);
      DefaultCellEditor todoTypeEditor=new DefaultCellEditor(todoTypeCombo);
      todoTypeEditor.setClickCountToStart(1);
      typeColumn.setCellEditor(todoTypeEditor);
      TodoTypeTableCellRenderer todoTypeRenderer=new TodoTypeTableCellRenderer();
      typeColumn.setCellRenderer(todoTypeRenderer);
      int width=myPatternsTable.getFontMetrics(myPatternsTable.getFont()).stringWidth(myPatternsTable.getColumnName(0)) + 10;
      typeColumn.setPreferredWidth(width);
      typeColumn.setMaxWidth(width);
      typeColumn.setMinWidth(width);
      TableColumn todoCaseSensitiveColumn=myPatternsTable.getColumnModel().getColumn(1);
      width=myPatternsTable.getFontMetrics(myPatternsTable.getFont()).stringWidth(myPatternsTable.getColumnName(1)) + 10;
      todoCaseSensitiveColumn.setPreferredWidth(width);
      todoCaseSensitiveColumn.setMaxWidth(width);
      todoCaseSensitiveColumn.setMinWidth(width);
      TodoPatternTableCellRenderer todoPatternRenderer=new TodoPatternTableCellRenderer(myPatterns);
      TableColumn patternColumn=myPatternsTable.getColumnModel().getColumn(2);
      patternColumn.setCellRenderer(todoPatternRenderer);
      ((DefaultCellEditor)myPatternsTable.getDefaultEditor(String.class)).setClickCountToStart(2);
      JScrollPane myPatternsScroll=ScrollPaneFactory.createScrollPane(myPatternsTable);
      myPatternsScroll.setPreferredSize(new Dimension(-1,myPatternsTable.getRowHeight() * 12));
      return myPatternsScroll;
    }
    protected JButton[] createButtons(){
      myAddPatternButton=new JButton(IdeBundle.message("button.add"));
      myAddPatternButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          stopEditing();
          TodoPattern pattern=new TodoPattern();
          PatternDialog dialog=new PatternDialog(myPanel,pattern);
          dialog.setTitle(IdeBundle.message("title.add.todo.pattern"));
          dialog.show();
          if (!dialog.isOK()) {
            return;
          }
          myPatterns.add(pattern);
          int index=myPatterns.size() - 1;
          myPatternsModel.fireTableRowsInserted(index,index);
          myPatternsTable.getSelectionModel().setSelectionInterval(index,index);
          myPatternsTable.scrollRectToVisible(myPatternsTable.getCellRect(index,0,true));
        }
      }
);
      myEditPatternButton=new JButton(IdeBundle.message("button.edit"));
      myEditPatternButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          editSelectedPattern();
        }
      }
);
      myRemovePatternButton=new JButton(IdeBundle.message("button.remove"));
      myRemovePatternButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          stopEditing();
          int selectedIndex=myPatternsTable.getSelectedRow();
          if (selectedIndex < 0 || selectedIndex >= myPatternsModel.getRowCount()) {
            return;
          }
          TodoPattern patternToBeRemoved=myPatterns.get(selectedIndex);
          TableUtil.removeSelectedItems(myPatternsTable);
          for (int i=0; i < myFilters.size(); i++) {
            TodoFilter filter=myFilters.get(i);
            if (filter.contains(patternToBeRemoved)) {
              filter.removeTodoPattern(patternToBeRemoved);
              myFiltersModel.fireTableRowsUpdated(i,i);
            }
          }
        }
      }
);
      return new JButton[]{myAddPatternButton,myEditPatternButton,myRemovePatternButton};
    }
  }
;
  myPatternsTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        editSelectedPattern();
      }
    }
  }
);
  myPatternsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      updateButtonsState();
    }
  }
);
  PanelWithButtons filtersPanel=new PanelWithButtons(){
{
      initPanel();
    }
    protected String getLabelText(){
      return IdeBundle.message("label.todo.filters");
    }
    protected JComponent createMainComponent(){
      myFiltersTable=new Table(myFiltersModel);
      myFiltersTable.getEmptyText().setText(IdeBundle.message("text.todo.no.filters"));
      myFiltersTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      JScrollPane myFiltersScroll=ScrollPaneFactory.createScrollPane(myFiltersTable);
      myFiltersScroll.setPreferredSize(new Dimension(-1,myPatternsTable.getRowHeight() * 12));
      TableColumn nameColumn=myFiltersTable.getColumnModel().getColumn(0);
      int width=myPatternsTable.getColumnModel().getColumn(0).getPreferredWidth() + myPatternsTable.getColumnModel().getColumn(1).getPreferredWidth();
      nameColumn.setPreferredWidth(width);
      nameColumn.setMaxWidth(width);
      nameColumn.setMinWidth(width);
      nameColumn.setCellRenderer(new MyFilterNameTableCellRenderer());
      return myFiltersScroll;
    }
    protected JButton[] createButtons(){
      myAddFilterButton=new JButton(IdeBundle.message("button.add.d"));
      myAddFilterButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          stopEditing();
          TodoFilter filter=new TodoFilter();
          FilterDialog dialog=new FilterDialog(myPanel,filter,-1,myFilters,myPatterns);
          dialog.setTitle(IdeBundle.message("title.add.todo.filter"));
          dialog.show();
          int exitCode=dialog.getExitCode();
          if (DialogWrapper.OK_EXIT_CODE == exitCode) {
            myFilters.add(filter);
            int index=myFilters.size() - 1;
            myFiltersModel.fireTableRowsInserted(index,index);
            myFiltersTable.getSelectionModel().setSelectionInterval(index,index);
            myFiltersTable.scrollRectToVisible(myFiltersTable.getCellRect(index,0,true));
          }
        }
      }
);
      myEditFilterButton=new JButton(IdeBundle.message("button.edit.t"));
      myEditFilterButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          editSelectedFilter();
        }
      }
);
      myRemoveFilterButton=new JButton(IdeBundle.message("button.remove.m"));
      myRemoveFilterButton.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          stopEditing();
          TableUtil.removeSelectedItems(myFiltersTable);
        }
      }
);
      return new JButton[]{myAddFilterButton,myEditFilterButton,myRemoveFilterButton};
    }
  }
;
  myFiltersTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        editSelectedFilter();
      }
    }
  }
);
  myFiltersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      updateButtonsState();
    }
  }
);
  myPanel=new JPanel(new GridBagLayout());
  myPanel.add(patternsPanel,new GridBagConstraints(0,0,1,1,1,1,GridBagConstraints.NORTH,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  myPanel.add(filtersPanel,new GridBagConstraints(0,1,1,1,1,1,GridBagConstraints.NORTH,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  return myPanel;
}
