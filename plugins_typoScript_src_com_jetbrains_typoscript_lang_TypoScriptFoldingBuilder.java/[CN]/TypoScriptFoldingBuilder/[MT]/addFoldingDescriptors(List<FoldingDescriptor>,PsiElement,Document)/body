{
  TextRange elementRange=element.getTextRange();
  final int start=elementRange.getStartOffset();
  final int end=elementRange.getEndOffset();
  if (start + 1 < end) {
    TextRange range=null;
    ASTNode astNode=element.getNode();
    if (element instanceof CodeBlock) {
      range=buildRangeForBraces(range,astNode,TypoScriptTokenTypes.CODE_BLOCK_OPERATOR_BEGIN,TypoScriptTokenTypes.CODE_BLOCK_OPERATOR_END);
      addFoldingDescriptorsFromChildren(descriptors,element,document);
    }
 else     if (element instanceof MultilineValueAssignment) {
      range=buildRangeForBraces(range,astNode,TypoScriptTokenTypes.MULTILINE_VALUE_OPERATOR_BEGIN,TypoScriptTokenTypes.MULTILINE_VALUE_OPERATOR_END);
    }
 else     if (element instanceof PsiComment && ((PsiComment)element).getTokenType() == TypoScriptTokenTypes.C_STYLE_COMMENT) {
      int startIndex=astNode.getText().indexOf("/*");
      int endIndex=astNode.getText().lastIndexOf("*/");
      if (startIndex != -1 && startIndex + "/*".length() < endIndex) {
        int startOffset=element.getTextRange().getStartOffset();
        range=buildRange(range,startOffset + startIndex + "/*".length(),startOffset + endIndex);
      }
    }
    if (range != null) {
      descriptors.add(new FoldingDescriptor(astNode,range));
    }
  }
}
