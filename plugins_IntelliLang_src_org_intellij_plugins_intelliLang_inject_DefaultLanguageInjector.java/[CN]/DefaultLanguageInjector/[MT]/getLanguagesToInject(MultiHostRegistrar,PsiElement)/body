{
  final Set<String> supports=new THashSet<String>(ContainerUtil.mapNotNull(Extensions.getExtensions(LanguageInjectionSupport.EP_NAME),new NullableFunction<LanguageInjectionSupport,String>(){
    public String fun(    final LanguageInjectionSupport support){
      return support.useDefaultInjector(host) ? null : support.getId();
    }
  }
));
  for (  String supportId : myInjectionConfiguration.getAllInjectorIds()) {
    if (supports.contains(supportId))     continue;
    for (    BaseInjection injection : myInjectionConfiguration.getInjections(supportId)) {
      if (injection.acceptsPsiElement(host)) {
        final Language language=InjectedLanguage.findLanguageById(injection.getInjectedLanguageId());
        if (language == null)         continue;
        final InjectedLanguage injectedLanguage=InjectedLanguage.create(injection.getInjectedLanguageId(),injection.getPrefix(),injection.getSuffix(),false);
        final List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list=new ArrayList<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>();
        for (        TextRange range : injection.getInjectedArea(host)) {
          list.add(Trinity.create((PsiLanguageInjectionHost)host,injectedLanguage,range));
        }
        InjectorUtils.registerInjection(language,list,host.getContainingFile(),registrar);
        break;
      }
    }
  }
}
