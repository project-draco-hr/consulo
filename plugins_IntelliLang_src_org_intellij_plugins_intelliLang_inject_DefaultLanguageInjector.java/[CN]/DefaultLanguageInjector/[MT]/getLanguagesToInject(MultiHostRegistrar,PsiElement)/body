{
  final Set<String> allIds=myInjectionConfiguration.getAllInjectorIds();
  for (  LanguageInjectionSupport support : Extensions.getExtensions(LanguageInjectionSupport.EP_NAME)) {
    if (!allIds.contains(support.getId()))     continue;
    if (!support.useDefaultInjector(host))     continue;
    for (    BaseInjection injection : myInjectionConfiguration.getInjections(support.getId())) {
      if (injection.acceptsPsiElement(host)) {
        final Language language=InjectedLanguage.findLanguageById(injection.getInjectedLanguageId());
        if (language == null)         continue;
        final InjectedLanguage injectedLanguage=InjectedLanguage.create(injection.getInjectedLanguageId(),injection.getPrefix(),injection.getSuffix(),false);
        final List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list=new ArrayList<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>();
        for (        TextRange range : injection.getInjectedArea(host)) {
          list.add(Trinity.create((PsiLanguageInjectionHost)host,injectedLanguage,range));
        }
        InjectorUtils.registerInjection(language,list,host.getContainingFile(),registrar);
        InjectorUtils.registerSupport(support,true,registrar);
        break;
      }
    }
  }
}
