{
  searchField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      scheduleSearch(classMode);
    }
  }
);
  resultTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      Alarm alarm=classMode ? myClassesAlarm : myArtifactsAlarm;
      if (alarm.getActiveRequestCount() > 0)       return;
      boolean hasSelection=!resultTree.isSelectionEmpty();
      setOKActionEnabled(hasSelection);
    }
  }
);
  searchField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final Object action=getAction(e,resultTree);
      if ("selectNext".equals(action)) {
        TreeUtil.moveDown(resultTree);
      }
 else       if ("selectPrevious".equals(action)) {
        TreeUtil.moveUp(resultTree);
      }
 else       if ("scrollUpChangeSelection".equals(action)) {
        TreeUtil.movePageUp(resultTree);
      }
 else       if ("scrollDownChangeSelection".equals(action)) {
        TreeUtil.movePageDown(resultTree);
      }
    }
    private Object getAction(    final KeyEvent e,    final JComponent comp){
      final KeyStroke stroke=KeyStroke.getKeyStroke(e.getKeyCode(),e.getModifiers());
      return comp.getInputMap().get(stroke);
    }
  }
);
  resultTree.setRootVisible(false);
  resultTree.setShowsRootHandles(true);
  resultTree.setModel(null);
  resultTree.setFocusable(false);
  resultTree.setCellRenderer(classMode ? new MyClassCellRenderer() : new MyArtifactCellRenderer());
  resultTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        Object sel=resultTree.getLastSelectedPathComponent();
        if (sel != null && resultTree.getModel().isLeaf(sel)) {
          clickDefaultButton();
        }
      }
      if (!searchField.hasFocus()) {
        searchField.requestFocus();
      }
    }
  }
);
}
