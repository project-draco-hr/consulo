{
  super(new BorderLayout());
  myProject=project;
  myToolWindow=toolWindow;
  myToolWindow.setDecorator(this);
  myDivider=new MyDivider();
  myTitlePanel=new TitlePanel(){
    @Override public boolean isActive(){
      return computeActive();
    }
  }
;
  myTitleTabs=toolWindow.getContentUI().getTabComponent();
  myToggleFloatingModeAction=new ToggleFloatingModeAction();
  myToggleSideModeAction=new ToggleSideModeAction();
  myToggleDockModeAction=new ToggleDockModeAction();
  myToggleAutoHideModeAction=new TogglePinnedModeAction();
  myHideAction=new HideAction();
  HideSideAction hideSideAction=new HideSideAction();
  myToggleContentUiTypeAction=new ToggleContentUiTypeAction();
  myToggleFloatingModeButton=new MyTitleButton(myToggleFloatingModeAction);
  myToggleDockModeButton=new MyTitleButton(myToggleDockModeAction);
  myToggleAutoHideModeButton=new MyTitleButton(myToggleAutoHideModeAction);
  myHideButton=new MyTitleButton(myHideAction);
  myHideSideButton=new MyTitleButton(hideSideAction);
  myListenerList=new EventListenerList();
  MyKeymapManagerListener keymapManagerListener=new MyKeymapManagerListener();
  final KeymapManagerEx keymapManager=KeymapManagerEx.getInstanceEx();
  myWeakKeymapManagerListener=new WeakKeymapManagerListener(keymapManager,keymapManagerListener);
  keymapManager.addKeymapManagerListener(myWeakKeymapManagerListener);
  init();
  myToolWindowHandler=new ToolWindowHandler();
  myToolWindow.addPropertyChangeListener(myToolWindowHandler);
  apply(info);
}
