{
  if (Comparing.equal(myInfo,info) || myProject == null || myProject.isDisposed()) {
    return;
  }
  myInfo=info;
  final boolean active=info.isActive();
  myTitlePanel.setActive(active,!info.isSliding());
  myFloatingDockSeparator.setActive(active);
  myDockAutoHideSeparator.setActive(active);
  myAutoHideHideSeparator.setActive(active);
  final ToolWindowAnchor anchor=myInfo.getAnchor();
  if (info.isSliding()) {
    myDivider.invalidate();
    if (ToolWindowAnchor.TOP == anchor) {
      add(myDivider,BorderLayout.SOUTH);
    }
 else     if (ToolWindowAnchor.LEFT == anchor) {
      add(myDivider,BorderLayout.EAST);
    }
 else     if (ToolWindowAnchor.BOTTOM == anchor) {
      add(myDivider,BorderLayout.NORTH);
    }
 else     if (ToolWindowAnchor.RIGHT == anchor) {
      add(myDivider,BorderLayout.WEST);
    }
    myDivider.setPreferredSize(new Dimension(DIVIDER_WIDTH,DIVIDER_WIDTH));
  }
 else {
    remove(myDivider);
  }
  if (!info.isFloating()) {
    myHideSideButton.setVisible(true);
    if (ToolWindowAnchor.TOP == anchor) {
      myHideSideButton.setIcon(active ? ourHideSideUp : ourHideSideUpInactive);
    }
 else     if (ToolWindowAnchor.LEFT == anchor) {
      myHideSideButton.setIcon(active ? ourHideSideLeft : ourHideSideLeftInactive);
    }
 else     if (ToolWindowAnchor.BOTTOM == anchor) {
      myHideSideButton.setIcon(active ? ourHideSideDown : ourHideSideDownInactive);
    }
 else     if (ToolWindowAnchor.RIGHT == anchor) {
      myHideSideButton.setIcon(active ? ourHideSideRight : ourHideSideRightInactive);
    }
  }
 else {
    myHideSideButton.setVisible(false);
  }
  validate();
  repaint();
  if (myInfo.isDocked()) {
    myToggleFloatingModeButton.setIcon(active ? ourFloatingIcon : ourFloatingInactiveIcon);
    myToggleDockModeButton.setVisible(true);
    myDockAutoHideSeparator.setVisible(true);
    myToggleDockModeButton.setIcon(active ? ourSlidingIcon : ourSlidingInactiveIcon);
    myToggleAutoHideModeButton.setVisible(true);
    myAutoHideHideSeparator.setVisible(true);
    myToggleAutoHideModeButton.setIcon(active ? (myInfo.isAutoHide() ? ourAuthoHideOnIcon : ourAuthoHideOffIcon) : (myInfo.isAutoHide() ? ourAuthoHideOnInactiveIcon : ourAuthoHideOffInactiveIcon));
    myHideButton.setVisible(true);
  }
 else   if (myInfo.isFloating()) {
    myToggleFloatingModeButton.setIcon(active ? ourFixIcon : ourFixInactiveIcon);
    myToggleDockModeButton.setVisible(false);
    myDockAutoHideSeparator.setVisible(false);
    myToggleAutoHideModeButton.setVisible(true);
    myAutoHideHideSeparator.setVisible(true);
    myToggleAutoHideModeButton.setIcon(active ? myInfo.isAutoHide() ? ourAuthoHideOnIcon : ourAuthoHideOffIcon : myInfo.isAutoHide() ? ourAuthoHideOnInactiveIcon : ourAuthoHideOffInactiveIcon);
    myHideButton.setVisible(true);
  }
 else   if (myInfo.isSliding()) {
    myToggleFloatingModeButton.setIcon(active ? ourFloatingIcon : ourFloatingInactiveIcon);
    myToggleDockModeButton.setVisible(true);
    myDockAutoHideSeparator.setVisible(true);
    myToggleDockModeButton.setIcon(active ? ourDockedIcon : ourDockedInactiveIcon);
    myToggleAutoHideModeButton.setVisible(false);
    myAutoHideHideSeparator.setVisible(false);
    myHideButton.setVisible(true);
  }
  myHideButton.setIcon(active ? ourHideIcon : ourHideInactiveIcon);
  updateTitle();
  updateTooltips();
  if (myInfo.isFloating() && myInfo.isVisible()) {
    final FloatingDecorator floatingDecorator=(FloatingDecorator)SwingUtilities.getAncestorOfClass(FloatingDecorator.class,this);
    if (floatingDecorator != null) {
      floatingDecorator.apply(myInfo);
    }
  }
}
