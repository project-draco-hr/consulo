{
  StartupManager.getInstance(myProject).registerPostStartupActivity(new DumbAwareRunnable(){
    public void run(){
      final FavoritesListProvider[] extensions=Extensions.getExtensions(FavoritesListProvider.EP_NAME,myProject);
      for (      FavoritesListProvider extension : extensions) {
        final String name=extension.getListName(myProject);
        if (!myName2FavoritesRoots.containsKey(name)) {
          createNewList(name,extension.canBeRemoved(),extension.isTreeLike());
        }
 else         if (!myReadOnlyLists.contains(name) && !extension.canBeRemoved()) {
          myReadOnlyLists.add(name);
        }
        final FavoritesListProvider.Operation addOperation=extension.getCustomAddOperation();
        if (!myAddHandlers.containsKey(name)) {
          myAddHandlers.put(name,addOperation);
        }
        final FavoritesListProvider.Operation editOperation=extension.getCustomEditOperation();
        if (!myEditHandlers.containsKey(name)) {
          myEditHandlers.put(name,editOperation);
        }
        final FavoritesListProvider.Operation deleteOperation=extension.getCustomDeleteOperation();
        if (!myDeleteHandlers.containsKey(name)) {
          myDeleteHandlers.put(name,deleteOperation);
        }
        final TreeCellRenderer treeCellRenderer=extension.getTreeCellRenderer();
        if (treeCellRenderer != null && !myCustomRenderers.containsKey(name)) {
          myCustomRenderers.put(name,treeCellRenderer);
        }
        final Comparator<FavoritesTreeNodeDescriptor> comparator=extension.getNodeDescriptorComparator();
        if (comparator != null && !myComparators.containsKey(name)) {
          myComparators.put(name,comparator);
        }
      }
      final MyRootsChangeAdapter myPsiTreeChangeAdapter=new MyRootsChangeAdapter();
      PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeAdapter,myProject);
    }
  }
);
}
