{
  final Convertor<AbstractTreeNode,AbstractUrl> convertor=new Convertor<AbstractTreeNode,AbstractUrl>(){
    @Override public AbstractUrl convert(    AbstractTreeNode obj){
      return createUrlByElement(obj.getValue(),myProject);
    }
  }
;
  boolean result=true;
  for (  AbstractTreeNode element : elements) {
    final List<AbstractTreeNode> path=TaskDefaultFavoriteListProvider.getPathToUsualNode(element);
    result&=findListToRemoveFrom(name,path.subList(1,path.size()),convertor);
  }
  return result;
}
