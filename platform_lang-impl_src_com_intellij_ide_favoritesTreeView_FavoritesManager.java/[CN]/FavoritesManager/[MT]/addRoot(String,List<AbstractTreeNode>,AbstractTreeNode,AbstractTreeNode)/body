{
  final List<TreeItem<Pair<AbstractUrl,String>>> items=myName2FavoritesRoots.get(name);
  if (items == null)   return false;
  AbstractUrl url=createUrlByElement(newElement.getValue(),myProject);
  if (url == null)   return false;
  final TreeItem<Pair<AbstractUrl,String>> newItem=new TreeItem<Pair<AbstractUrl,String>>(Pair.create(url,newElement.getClass().getName()));
  if (parentElements.isEmpty()) {
    if (sibling != null) {
      TreeItem<Pair<AbstractUrl,String>> after=null;
      AbstractUrl siblingUrl=createUrlByElement(sibling.getValue(),myProject);
      int idx=-1;
      for (int i=0; i < items.size(); i++) {
        TreeItem<Pair<AbstractUrl,String>> item=items.get(i);
        if (item.getData().getFirst().equals(siblingUrl)) {
          idx=i;
          break;
        }
      }
      if (idx != -1) {
        items.add(idx,newItem);
      }
 else {
        items.add(newItem);
      }
    }
 else {
      items.add(newItem);
    }
    fireListeners.rootsChanged(name);
    return true;
  }
  Collection<TreeItem<Pair<AbstractUrl,String>>> list=items;
  TreeItem<Pair<AbstractUrl,String>> item=null;
  for (  AbstractTreeNode obj : parentElements) {
    item=findNextItem(obj,list);
    if (item == null)     return false;
    list=item.getChildren();
  }
  if (sibling != null) {
    TreeItem<Pair<AbstractUrl,String>> after=null;
    AbstractUrl siblingUrl=createUrlByElement(sibling.getValue(),myProject);
    for (    TreeItem<Pair<AbstractUrl,String>> treeItem : list) {
      if (treeItem.getData().getFirst().equals(siblingUrl)) {
        after=treeItem;
        break;
      }
    }
    if (after == null) {
      item.addChild(newItem);
    }
 else {
      item.addChildAfter(newItem,after);
    }
  }
 else {
    item.addChild(newItem);
  }
  fireListeners.rootsChanged(name);
  return true;
}
