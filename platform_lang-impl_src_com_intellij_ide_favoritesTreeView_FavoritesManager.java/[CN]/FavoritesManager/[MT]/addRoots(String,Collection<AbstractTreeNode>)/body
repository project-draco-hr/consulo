{
  final Collection<TreeItem<Pair<AbstractUrl,String>>> list=getFavoritesListRootUrls(name);
  final HashSet<AbstractUrl> set=new HashSet<AbstractUrl>(ContainerUtil.map(list,new Function<TreeItem<Pair<AbstractUrl,String>>,AbstractUrl>(){
    @Override public AbstractUrl fun(    TreeItem<Pair<AbstractUrl,String>> item){
      return item.getData().getFirst();
    }
  }
));
  for (  AbstractTreeNode node : nodes) {
    final Pair<AbstractUrl,String> pair=createPairForNode(node);
    if (pair != null) {
      if (set.contains(pair.getFirst()))       continue;
      final TreeItem<Pair<AbstractUrl,String>> treeItem=new TreeItem<Pair<AbstractUrl,String>>(pair);
      list.add(treeItem);
      set.add(pair.getFirst());
      appendChildNodes(node,treeItem);
    }
  }
  rootsChanged();
  return true;
}
