{
  String htmlAsText=myBuilder.toHtmlAsText();
  Grid grid=new Grid(myLineCount + 1,2);
  grid.setWidth("100%");
  grid.getColumnFormatter().addStyleName(0,"editorLineColumn");
  grid.getColumnFormatter().addStyleName(1,"editorCodeColumn");
  for (int i=0; i < myLineCount; i++) {
    final HorizontalPanel panel=new HorizontalPanel();
    panel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
    panel.setWidth("100%");
    panel.setHeight("100%");
    InlineHTML lineSpan=new InlineHTML(String.valueOf(i + 1));
    lineSpan.addStyleName("editorLine");
    lineSpan.addStyleName("editorGutterLine" + i);
    panel.add(lineSpan);
    HTMLTable.CellFormatter cellFormatter=grid.getCellFormatter();
    cellFormatter.addStyleName(i,0,"noselectable");
    cellFormatter.addStyleName(i,0,"editorLineRow");
    grid.setWidget(i,0,panel);
  }
  String[] split=htmlAsText.split("\n");
  for (int i=0; i < split.length; i++) {
    final String line=split[i];
    final InlineHTML lineSpan=new InlineHTML(line);
    lineSpan.setWidth("100%");
    lineSpan.addStyleName("editorLine");
    lineSpan.addStyleName("gen_Line_" + i);
    grid.setWidget(i,1,lineSpan);
    grid.getCellFormatter().setWordWrap(i,1,false);
    lineSpan.addClickHandler(new ClickHandler(){
      @Override public void onClick(      ClickEvent event){
        int caretOffset=findCaretOffset();
        if (caretOffset == myLastCaretOffset) {
          return;
        }
        myLastCaretOffset=caretOffset;
        if (myCaretHandler != null) {
          myCaretHandler.caretPlaced(new EditorCaretEvent(event.getClientX(),event.getClientY(),caretOffset));
        }
      }
      private int findCaretOffset(){
        Range browserRange=Selection.getBrowserRange();
        RangeEndPoint startPoint=browserRange.getStartPoint();
        Text text=startPoint.getTextNode();
        if (text == null) {
          return 0;
        }
        int offset=startPoint.getOffset();
        Node parentNode=text.getParentNode();
        if (parentNode == null) {
          return 0;
        }
        if (!parentNode.getNodeName().equalsIgnoreCase("span")) {
          return 0;
        }
        String styleName=((Element)parentNode).getClassName();
        String[] iter=styleName.split("\\s+");
        for (        String s1 : iter) {
          String prefix="gen_TextRage_";
          if (s1.startsWith(prefix)) {
            String startEnd=s1.substring(prefix.length(),s1.length());
            String[] startAndEnd=startEnd.split("_");
            GwtTextRange textRange=new GwtTextRange(Integer.parseInt(startAndEnd[0]),Integer.parseInt(startAndEnd[1]));
            return textRange.getStartOffset() + offset;
          }
        }
        return 0;
      }
    }
);
  }
  ScrollPanel scrollPanel=new ScrollPanel(grid);
  scrollPanel.setHeight("100%");
  scrollPanel.setWidth("100%");
  DockPanel panel=new DockPanel();
  panel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  panel.setWidth("100%");
  panel.add(scrollPanel,DockPanel.CENTER);
  setWidget(panel);
}
