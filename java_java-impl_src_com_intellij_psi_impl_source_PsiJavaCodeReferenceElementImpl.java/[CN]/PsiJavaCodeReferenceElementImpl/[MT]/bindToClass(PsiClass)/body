{
  String qName=aClass.getQualifiedName();
  final boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && isFullyQualified();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
  if (qName == null) {
    qName=aClass.getName();
    final PsiClass psiClass=facade.getResolveHelper().resolveReferencedClass(qName,this);
    if (!getManager().areElementsEquivalent(psiClass,aClass)) {
      throw cannotBindError(aClass);
    }
  }
 else {
    if (facade.findClass(qName,getResolveScope()) == null && !preserveQualification) {
      return this;
    }
  }
  final PsiReferenceParameterList parameterList=getParameterList();
  String text=parameterList == null ? qName : qName + parameterList.getText();
  PsiJavaCodeReferenceElement ref=facade.getParserFacade().createReferenceFromText(text,getParent());
  getTreeParent().replaceChildInternal(this,(TreeElement)ref.getNode());
  if (!preserveQualification) {
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(aClass.getProject());
    ref=(PsiJavaCodeReferenceElement)codeStyleManager.shortenClassReferences(ref,JavaCodeStyleManager.UNCOMPLETE_CODE);
  }
  return ref;
}
