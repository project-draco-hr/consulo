{
  final AsyncResult<String> result=new AsyncResult<String>();
  final Disposable connection=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  result.doWhenProcessed(new Runnable(){
    @Override public void run(){
      Disposer.dispose(connection);
    }
  }
);
  WindowSystemPlaybackCall.findProject().doWhenDone(new AsyncResult.Handler<Project>(){
    @Override public void run(    Project project){
      final MessageBusConnection bus=project.getMessageBus().connect(connection);
      bus.subscribe(DaemonCodeAnalyzer.DAEMON_EVENT_TOPIC,new DaemonCodeAnalyzer.DaemonListener(){
        @Override public void daemonFinished(){
          context.flushAwtAndRun(new Runnable(){
            @Override public void run(){
              result.setDone();
            }
          }
);
        }
        @Override public void daemonCancelEventOccurred(){
          result.setDone();
        }
      }
);
    }
  }
).doWhenRejected(new Runnable(){
    @Override public void run(){
      result.setRejected("Cannot find project");
    }
  }
);
  return result;
}
