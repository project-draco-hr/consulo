{
  final JPanel result=new JPanel(new BorderLayout());
  result.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  final JPanel inner=new JPanel();
  inner.setLayout(new BoxLayout(inner,BoxLayout.X_AXIS));
  inner.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,1),BorderFactory.createEmptyBorder(5,5,5,5)));
  if (!UIUtil.isUnderDarcula()) {
    inner.setBackground(Color.WHITE);
  }
  result.add(inner,BorderLayout.CENTER);
  final ButtonGroup group=new ButtonGroup();
  myColorToButtonMap=new HashMap<String,AbstractButton>();
  final Collection<String> names=myManager.getColorNames();
  for (  final String name : names) {
    final ColorButton colorButton=new ColorButton(name,myManager.getColor(name));
    group.add(colorButton);
    inner.add(colorButton);
    myColorToButtonMap.put(name,colorButton);
    inner.add(Box.createHorizontalStrut(5));
  }
  final CustomColorButton customButton=new CustomColorButton();
  group.add(customButton);
  inner.add(customButton);
  myColorToButtonMap.put(customButton.getText(),customButton);
  inner.add(Box.createHorizontalStrut(5));
  if (configuration != null) {
    final AbstractButton button=myColorToButtonMap.get(configuration.getColorName());
    if (button != null) {
      button.setSelected(true);
    }
  }
  return result;
}
