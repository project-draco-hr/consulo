{
  if (hasUTF8Bom(buffer))   return Charset.forName("UTF-8");
  if (hasUTF16LEBom(buffer))   return Charset.forName("UTF-16LE");
  if (hasUTF16BEBom(buffer))   return Charset.forName("UTF-16BE");
  boolean highOrderBit=false;
  boolean validU8Char=true;
  int length=Math.min(buffer.length,guess_length);
  int i=0;
  while (i < length - 6) {
    byte b0=buffer[i];
    byte b1=buffer[i + 1];
    byte b2=buffer[i + 2];
    byte b3=buffer[i + 3];
    byte b4=buffer[i + 4];
    byte b5=buffer[i + 5];
    if (b0 < 0) {
      highOrderBit=true;
      if (isTwoBytesSequence(b0)) {
        if (!isContinuationChar(b1))         validU8Char=false;
 else         i++;
      }
 else       if (isThreeBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2)))         validU8Char=false;
 else         i+=2;
      }
 else       if (isFourBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)))         validU8Char=false;
 else         i+=3;
      }
 else       if (isFiveBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)))         validU8Char=false;
 else         i+=4;
      }
 else       if (isSixBytesSequence(b0)) {
        if (!(isContinuationChar(b1) && isContinuationChar(b2) && isContinuationChar(b3)&& isContinuationChar(b4)&& isContinuationChar(b5)))         validU8Char=false;
 else         i+=5;
      }
 else       validU8Char=false;
    }
    if (!validU8Char)     break;
    i++;
  }
  if (!highOrderBit) {
    if (this.enforce8Bit)     return this.defaultCharset;
 else     return Charset.forName("US-ASCII");
  }
  if (validU8Char)   return Charset.forName("UTF-8");
  return this.defaultCharset;
}
