{
  for (  ForcedElementWeigher weigher : Extensions.getExtensions(ForcedElementWeigher.EP_NAME)) {
    final Comparable weigh=weigher.getForcedWeigh(element);
    if (weigh != null)     return weigh;
  }
  Project project=location.getProject();
  if (project == null || !SdkOrLibraryWeigher.isJdkElement(element,project)) {
    return 0;
  }
  if (element instanceof PsiClass) {
    @NonNls final String qname=((PsiClass)element).getQualifiedName();
    if (qname != null) {
      String pkg=StringUtil.getPackageName(qname);
      if (pkg.equals("java.lang"))       return 6;
      if (pkg.equals("java.util"))       return 5;
      if (qname.startsWith("java.lang"))       return 4;
      if (qname.startsWith("java.util"))       return 3;
      if (qname.startsWith("java."))       return 2;
      if (qname.startsWith("javax."))       return 1;
      if (qname.startsWith("com."))       return -1;
      if (qname.startsWith("net."))       return -1;
    }
  }
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    if ("finalize".equals(method.getName()) || "registerNatives".equals(method.getName())) {
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
        return -1;
      }
    }
    if ("subSequence".equals(method.getName())) {
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && CommonClassNames.JAVA_LANG_STRING.equals(containingClass.getQualifiedName())) {
        return -1;
      }
    }
  }
  return 0;
}
