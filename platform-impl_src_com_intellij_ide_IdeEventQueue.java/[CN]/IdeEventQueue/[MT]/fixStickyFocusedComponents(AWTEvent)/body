{
  if (!(e instanceof InputEvent))   return;
  final KeyboardFocusManager mgr=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  final Window wnd=mgr.getActiveWindow();
  Window showingWindow=wnd;
  if (Registry.is("actionSystem.fixStickyFocusedWindows")) {
    if (wnd != null && !wnd.isShowing()) {
      while (showingWindow != null) {
        if (showingWindow.isShowing())         break;
        showingWindow=(Window)showingWindow.getParent();
      }
      if (showingWindow == null) {
        final Frame[] allFrames=Frame.getFrames();
        for (        Frame each : allFrames) {
          if (each.isShowing()) {
            showingWindow=each;
            break;
          }
        }
      }
      if (showingWindow != null && showingWindow != wnd) {
        final Method setActive=ReflectionUtil.findMethod(KeyboardFocusManager.class.getDeclaredMethods(),"setGlobalActiveWindow",Window.class);
        if (setActive != null) {
          try {
            setActive.setAccessible(true);
            setActive.invoke(mgr,(Window)showingWindow);
          }
 catch (          Exception exc) {
            LOG.info(exc);
          }
        }
      }
    }
  }
  if (Registry.is("actionSystem.fixNullFocusedComponent")) {
    final Component focusOwner=mgr.getFocusOwner();
    if (focusOwner == null) {
      if (showingWindow != null) {
        final IdeFocusManager fm=IdeFocusManager.findInstanceByComponent(showingWindow);
        fm.doWhenFocusSettlesDown(new Runnable(){
          public void run(){
            if (mgr.getFocusOwner() == null) {
              final Application app=ApplicationManager.getApplication();
              if (app != null && app.isActive()) {
                fm.requestDefaultFocus(false);
              }
            }
          }
        }
);
      }
    }
  }
}
