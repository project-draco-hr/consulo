{
  super.visitMethodCallExpression(expression);
  PsiExpression outerExpression=expression;
  while (outerExpression.getParent() instanceof PsiExpression) {
    outerExpression=(PsiExpression)outerExpression.getParent();
  }
  final PsiElement parent=outerExpression.getParent();
  if (!(parent instanceof PsiExpressionList)) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiCallExpression)) {
    return;
  }
  if (grandParent instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression surroundingCall=(PsiMethodCallExpression)grandParent;
    final PsiReferenceExpression methodExpression=surroundingCall.getMethodExpression();
    final String callName=methodExpression.getReferenceName();
    if ("this".equals(callName) || "super".equals(callName)) {
      return;
    }
  }
  final PsiReferenceExpression reference=expression.getMethodExpression();
  if (reference == null) {
    return;
  }
  if (m_ignoreFieldInitializations) {
    final PsiElement field=PsiTreeUtil.getParentOfType(expression,PsiField.class);
    if (field != null) {
      return;
    }
  }
  registerMethodCallError(expression);
}
