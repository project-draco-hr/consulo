{
  return new ExpressionOccurenceManager(selectedExpr,parentClass,null){
    @Override protected PsiExpression[] findExpressionOccurrences(){
      if (selectedExpr instanceof PsiLiteralExpression && !selectedExpr.isPhysical()) {
        final FindManager findManager=FindManager.getInstance(selectedExpr.getProject());
        final FindModel findModel=(FindModel)findManager.getFindInFileModel().clone();
        findModel.setStringToFind(StringUtil.stripQuotesAroundValue(selectedExpr.getText()));
        final List<PsiExpression> results=new ArrayList<PsiExpression>();
        final PsiFile file=getScope().getContainingFile();
        final String text=file.getText();
        FindResult result=findManager.findString(text,0,findModel);
        while (result.isStringFound()) {
          final int startOffset=result.getStartOffset();
          final int endOffset=result.getEndOffset();
          if (PsiTreeUtil.getParentOfType(file.findElementAt(startOffset),PsiLiteralExpression.class) != null) {
            results.add(IntroduceVariableBase.getSelectedExpression(file.getProject(),file,startOffset,endOffset));
          }
          result=findManager.findString(text,endOffset,findModel);
        }
        return results.toArray(new PsiExpression[results.size()]);
      }
      return super.findExpressionOccurrences();
    }
  }
;
}
