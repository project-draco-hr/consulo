{
  final String[] data=new String[myElements.size()];
class Substitutor {
    PsiType substitute(    final PsiType t){
      if (t instanceof PsiWildcardType) {
        final PsiWildcardType wcType=(PsiWildcardType)t;
        final PsiType bound=wcType.getBound();
        if (bound == null) {
          return t;
        }
        final PsiManager manager=PsiManager.getInstance(myProject);
        final PsiType subst=substitute(bound);
        return wcType.isExtends() ? PsiWildcardType.createExtends(manager,subst) : PsiWildcardType.createSuper(manager,subst);
      }
 else       if (t instanceof PsiTypeVariable) {
        if (bindings.length > 0) {
          final PsiType b=bindings[0].apply(t);
          if (b instanceof Bottom || b instanceof PsiTypeVariable) {
            return null;
          }
          return substitute(b);
        }
        return null;
      }
 else       if (t instanceof Bottom) {
        return null;
      }
 else       if (t instanceof PsiArrayType) {
        return substitute(((PsiArrayType)t).getComponentType()).createArrayType();
      }
 else       if (t instanceof PsiClassType) {
        final PsiClassType.ClassResolveResult result=((PsiClassType)t).resolveGenerics();
        final PsiClass aClass=result.getElement();
        final PsiSubstitutor aSubst=result.getSubstitutor();
        if (aClass == null) {
          return t;
        }
        PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
        for (final Iterator<PsiTypeParameter> p=aSubst.getSubstitutionMap().keySet().iterator(); p.hasNext(); ) {
          final PsiTypeParameter parm=p.next();
          final PsiType type=aSubst.substitute(parm);
          theSubst=theSubst.put(parm,substitute(type));
        }
        return aClass.getManager().getElementFactory().createType(aClass,theSubst);
      }
 else {
        return t;
      }
    }
  }
  final Substitutor binding=new Substitutor();
  int i=0;
  for (final Iterator<PsiElement> e=myElements.iterator(); e.hasNext(); ) {
    final PsiElement element=e.next();
    data[i++]=binding.substitute(myTypes.get(element)).getCanonicalText() + "\\n" + elementString(element);
  }
  Arrays.sort(data,new Comparator(){
    public int compare(    Object x,    Object y){
      return ((String)x).compareTo((String)y);
    }
  }
);
  final StringBuffer repr=new StringBuffer();
  for (int j=0; j < data.length; j++) {
    repr.append(data[j]);
    repr.append("\n");
  }
  return repr.toString();
}
