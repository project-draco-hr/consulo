{
  final CompilerModuleExtension compilerModuleExtension=rootModel.getModuleExtension(CompilerModuleExtension.class);
  compilerModuleExtension.setExcludeOutput(true);
  rootModel.inheritSdk();
  final Set<File> contentRoots=descriptor.getContentRoots();
  for (  File contentRoot : contentRoots) {
    final LocalFileSystem lfs=LocalFileSystem.getInstance();
    VirtualFile moduleContentRoot=lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(contentRoot.getPath()));
    if (moduleContentRoot != null) {
      final ContentEntry contentEntry=rootModel.addContentEntry(moduleContentRoot);
      final Collection<DetectedProjectRoot> sourceRoots=descriptor.getSourceRoots(contentRoot);
      for (      DetectedProjectRoot srcRoot : sourceRoots) {
        final String srcpath=FileUtil.toSystemIndependentName(srcRoot.getDirectory().getPath());
        final VirtualFile sourceRoot=lfs.refreshAndFindFileByPath(srcpath);
        if (sourceRoot != null) {
          contentEntry.addSourceFolder(sourceRoot,shouldBeTestRoot(srcRoot.getDirectory()),"");
        }
      }
    }
  }
  compilerModuleExtension.inheritCompilerOutputPath(true);
  final LibraryTable moduleLibraryTable=rootModel.getModuleLibraryTable();
  for (  LibraryDescriptor libDescriptor : ModuleInsight.getLibraryDependencies(descriptor,projectDescriptor.getLibraries())) {
    final Library projectLib=projectLibs.get(libDescriptor);
    if (projectLib != null) {
      rootModel.addLibraryEntry(projectLib);
    }
 else {
      final Collection<File> jars=libDescriptor.getJars();
      for (      File file : jars) {
        Library library=moduleLibraryTable.createLibrary();
        Library.ModifiableModel modifiableModel=library.getModifiableModel();
        modifiableModel.addRoot(VfsUtil.getUrlForLibraryRoot(file),OrderRootType.CLASSES);
        modifiableModel.commit();
      }
    }
  }
}
