{
  boolean fatalErrorHappened=false;
  while (hasMoreRepositories() && !fatalErrorHappened) {
    final GitRepository repository=next();
    GitSimpleEventDetector notFullyMergedDetector=new GitSimpleEventDetector(GitSimpleEventDetector.Event.BRANCH_NOT_FULLY_MERGED);
    GitCommandResult result=Git.branchDelete(repository,myBranchName,false,notFullyMergedDetector);
    if (result.success()) {
      refresh(repository);
      markSuccessful(repository);
    }
 else     if (notFullyMergedDetector.hasHappened()) {
      Collection<GitRepository> remainingRepositories=getRemainingRepositories();
      boolean forceDelete=showNotFullyMergedDialog(myBranchName,remainingRepositories);
      if (forceDelete) {
        GitCompoundResult compoundResult=forceDelete(myBranchName,remainingRepositories);
        if (compoundResult.totalSuccess()) {
          GitRepository[] remainingRepositoriesArray=ArrayUtil.toObjectArray(remainingRepositories,GitRepository.class);
          markSuccessful(remainingRepositoriesArray);
          refresh(remainingRepositoriesArray);
        }
 else {
          fatalError(getErrorTitle(),compoundResult.getErrorOutputWithReposIndication());
          return;
        }
      }
 else {
        fatalError(getErrorTitle(),"This branch is not fully merged to " + myCurrentBranch);
        fatalErrorHappened=true;
      }
    }
 else {
      fatalError(getErrorTitle(),result.getErrorOutputAsJoinedString());
      fatalErrorHappened=true;
    }
  }
  if (!fatalErrorHappened) {
    notifySuccess();
  }
}
