{
  final List<String> mergedToBranches=getMergedToBranches(unmergedBranch);
  final Map<GitRepository,List<GitCommit>> history=new HashMap<GitRepository,List<GitCommit>>();
  for (  GitRepository repository : getRepositories()) {
    if (repositories.contains(repository)) {
      history.put(repository,getUnmergedCommits(repository,unmergedBranch,baseBranch));
    }
 else {
      history.put(repository,Collections.<GitCommit>emptyList());
    }
  }
  final AtomicBoolean forceDelete=new AtomicBoolean();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      forceDelete.set(GitBranchIsNotFullyMergedDialog.showAndGetAnswer(myProject,history,unmergedBranch,mergedToBranches,baseBranch));
    }
  }
);
  return forceDelete.get();
}
