{
  if (!(scanner.standalone || scanner.debugOption || scanner.cupDebug))   return;
  if (scanner.cupDebug) {
    println("  /**");
    println("   * Converts an int token code into the name of the");
    println("   * token by reflection on the cup symbol class/interface " + scanner.cupSymbol);
    println("   *");
    println("   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>");
    println("   */");
    println("  private String getTokenName(int token) {");
    println("    try {");
    println("      java.lang.reflect.Field [] classFields = " + scanner.cupSymbol + ".class.getFields();");
    println("      for (int i = 0; i < classFields.length; i++) {");
    println("        if (classFields[i].getInt(null) == token) {");
    println("          return classFields[i].getName();");
    println("        }");
    println("      }");
    println("    } catch (Exception e) {");
    println("      e.printStackTrace(System.err);");
    println("    }");
    println("");
    println("    return \"UNKNOWN TOKEN\";");
    println("  }");
    println("");
    println("  /**");
    println("   * Same as " + scanner.functionName + " but also prints the token to standard out");
    println("   * for debugging.");
    println("   *");
    println("   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>");
    println("   */");
    print("  " + visibility + " ");
    if (scanner.tokenType == null) {
      if (scanner.isInteger)       print("int");
 else       if (scanner.isIntWrap)       print("Integer");
 else       print("Yytoken");
    }
 else     print(scanner.tokenType);
    print(" debug_");
    print(scanner.functionName);
    print("() throws java.io.IOException");
    if (scanner.lexThrow != null) {
      print(", ");
      print(scanner.lexThrow);
    }
    if (scanner.scanErrorException != null) {
      print(", ");
      print(scanner.scanErrorException);
    }
    println(" {");
    println("    java_cup.runtime.Symbol s = " + scanner.functionName + "();");
    print("    System.out.println( ");
    if (scanner.lineCount)     print("\"line:\" + (yyline+1) + ");
    if (scanner.columnCount)     print("\" col:\" + (yycolumn+1) + ");
    println("\" --\"+ yytext() + \"--\" + getTokenName(s.sym) + \"--\");");
    println("    return s;");
    println("  }");
    println("");
  }
  if (scanner.standalone) {
    println("  /**");
    println("   * Runs the scanner on input files.");
    println("   *");
    println("   * This is a standalone scanner, it will print any unmatched");
    println("   * text to System.out unchanged.");
    println("   *");
    println("   * @param argv   the command line, contains the filenames to run");
    println("   *               the scanner on.");
    println("   */");
  }
 else {
    println("  /**");
    println("   * Runs the scanner on input files.");
    println("   *");
    println("   * This main method is the debugging routine for the scanner.");
    println("   * It prints debugging information about each returned token to");
    println("   * System.out until the end of file is reached, or an error occured.");
    println("   *");
    println("   * @param argv   the command line, contains the filenames to run");
    println("   *               the scanner on.");
    println("   */");
  }
  String className=getBaseName(scanner.className);
  println("  public static void main(String argv[]) {");
  println("    if (argv.length == 0) {");
  println("      System.out.println(\"Usage : java " + className + " <inputfile>\");");
  println("    }");
  println("    else {");
  println("      for (int i = 0; i < argv.length; i++) {");
  println("        " + className + " scanner = null;");
  println("        try {");
  println("          scanner = new " + className + "( new java.io.FileReader(argv[i]) );");
  if (scanner.standalone) {
    println("          while ( !scanner.zzAtEOF ) scanner." + scanner.functionName + "();");
  }
 else   if (scanner.cupDebug) {
    println("          while ( !scanner.zzAtEOF ) scanner.debug_" + scanner.functionName + "();");
  }
 else {
    println("          do {");
    println("            System.out.println(scanner." + scanner.functionName + "());");
    println("          } while (!scanner.zzAtEOF);");
    println("");
  }
  println("        }");
  println("        catch (java.io.FileNotFoundException e) {");
  println("          System.out.println(\"File not found : \\\"\"+argv[i]+\"\\\"\");");
  println("        }");
  println("        catch (java.io.IOException e) {");
  println("          System.out.println(\"IO error scanning file \\\"\"+argv[i]+\"\\\"\");");
  println("          System.out.println(e);");
  println("        }");
  println("        catch (Exception e) {");
  println("          System.out.println(\"Unexpected exception:\");");
  println("          e.printStackTrace();");
  println("        }");
  println("      }");
  println("    }");
  println("  }");
  println("");
}
