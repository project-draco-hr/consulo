{
  if (scanner.cupCompatible) {
    print("  public ");
  }
 else {
    print("  " + visibility + " ");
  }
  if (scanner.tokenType == null) {
    if (scanner.isInteger)     print("int");
 else     if (scanner.isIntWrap)     print("Integer");
 else     print("Yytoken");
  }
 else   print(scanner.tokenType);
  print(" ");
  print(scanner.functionName);
  print("() throws java.io.IOException");
  if (scanner.lexThrow != null) {
    print(", ");
    print(scanner.lexThrow);
  }
  if (scanner.scanErrorException != null) {
    print(", ");
    print(scanner.scanErrorException);
  }
  println(" {");
  skel.emitNext();
  if (scanner.useRowMap) {
    println("    int [] zzTransL = ZZ_TRANS;");
    println("    int [] zzRowMapL = ZZ_ROWMAP;");
    println("    int [] zzAttrL = ZZ_ATTRIBUTE;");
  }
  skel.emitNext();
  if (scanner.charCount) {
    println("      yychar+= zzMarkedPosL-zzStartRead;");
    println("");
  }
  if (scanner.lineCount || scanner.columnCount) {
    println("      boolean zzR = false;");
    println("      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;");
    println("                                                             zzCurrentPosL++) {");
    println("        switch (" + zzBufferLAccess("zzCurrentPosL") + ") {");
    println("        case '\\u000B':");
    println("        case '\\u000C':");
    println("        case '\\u0085':");
    println("        case '\\u2028':");
    println("        case '\\u2029':");
    if (scanner.lineCount)     println("          yyline++;");
    if (scanner.columnCount)     println("          yycolumn = 0;");
    println("          zzR = false;");
    println("          break;");
    println("        case '\\r':");
    if (scanner.lineCount)     println("          yyline++;");
    if (scanner.columnCount)     println("          yycolumn = 0;");
    println("          zzR = true;");
    println("          break;");
    println("        case '\\n':");
    println("          if (zzR)");
    println("            zzR = false;");
    println("          else {");
    if (scanner.lineCount)     println("            yyline++;");
    if (scanner.columnCount)     println("            yycolumn = 0;");
    println("          }");
    println("          break;");
    println("        default:");
    println("          zzR = false;");
    if (scanner.columnCount)     println("          yycolumn++;");
    println("        }");
    println("      }");
    println();
    if (scanner.lineCount) {
      println("      if (zzR) {");
      println("        // peek one character ahead if it is \\n (if we have counted one line too much)");
      println("        boolean zzPeek;");
      println("        if (zzMarkedPosL < zzEndReadL)");
      println("          zzPeek = " + zzBufferLAccess("zzMarkedPosL") + " == '\\n';");
      println("        else if (zzAtEOF)");
      println("          zzPeek = false;");
      println("        else {");
      println("          boolean eof = zzRefill();");
      println("          zzEndReadL = zzEndRead;");
      println("          zzMarkedPosL = zzMarkedPos;");
      println("          zzBufferL = zzBuffer;");
      println("          if (eof) ");
      println("            zzPeek = false;");
      println("          else ");
      println("            zzPeek = " + zzBufferLAccess("zzMarkedPosL") + " == '\\n';");
      println("        }");
      println("        if (zzPeek) yyline--;");
      println("      }");
    }
  }
  if (scanner.bolUsed) {
    println("      if (zzMarkedPosL > zzStartRead) {");
    println("        switch (" + zzBufferLAccess("zzMarkedPosL-1") + ") {");
    println("        case '\\n':");
    println("        case '\\u000B':");
    println("        case '\\u000C':");
    println("        case '\\u0085':");
    println("        case '\\u2028':");
    println("        case '\\u2029':");
    println("          zzAtBOL = true;");
    println("          break;");
    println("        case '\\r': ");
    println("          if (zzMarkedPosL < zzEndReadL)");
    println("            zzAtBOL = " + zzBufferLAccess("zzMarkedPosL") + " != '\\n';");
    println("          else if (zzAtEOF)");
    println("            zzAtBOL = false;");
    println("          else {");
    println("            boolean eof = zzRefill();");
    println("            zzMarkedPosL = zzMarkedPos;");
    println("            zzEndReadL = zzEndRead;");
    println("            zzBufferL = zzBuffer;");
    println("            if (eof) ");
    println("              zzAtBOL = false;");
    println("            else ");
    println("              zzAtBOL = " + zzBufferLAccess("zzMarkedPosL") + " != '\\n';");
    println("          }");
    println("          break;");
    println("        default:");
    println("          zzAtBOL = false;");
    println("        }");
    println("      }");
  }
  skel.emitNext();
  if (scanner.bolUsed) {
    println("      if (zzAtBOL)");
    println("        zzState = ZZ_LEXSTATE[zzLexicalState+1];");
    println("      else");
    println("        zzState = ZZ_LEXSTATE[zzLexicalState];");
    println();
  }
 else {
    println("      zzState = ZZ_LEXSTATE[zzLexicalState];");
    println();
  }
  skel.emitNext();
}
