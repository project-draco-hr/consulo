{
  if (context == null || !context.isValid())   return;
  String packagePrefix=getPackagePrefix(context,completionContext);
  final PsiManager manager=context.getManager();
  final Set<String> qnames=new THashSet<String>();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  final PsiShortNamesCache cache=facade.getShortNamesCache();
  final GlobalSearchScope scope=context.getContainingFile().getResolveScope();
  final String[] names=ApplicationManager.getApplication().runReadAction(new Computable<String[]>(){
    public String[] compute(){
      return cache.getAllClassNames(true);
    }
  }
);
  Arrays.sort(names,new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
);
  boolean lookingForAnnotations=false;
  final PsiElement prevSibling=context.getParent().getPrevSibling();
  if (prevSibling instanceof PsiJavaToken && ((PsiJavaToken)prevSibling).getTokenType() == JavaTokenType.AT) {
    lookingForAnnotations=true;
  }
  final CamelHumpMatcher matcher=new CamelHumpMatcher(completionContext.getPrefix());
  for (  final String name : names) {
    if (!matcher.prefixMatches(name))     continue;
    ProgressManager.getInstance().checkCanceled();
    final PsiClass[] classes=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>(){
      public PsiClass[] compute(){
        return cache.getClassesByName(name,scope);
      }
    }
);
    for (    PsiClass psiClass : classes) {
      ProgressManager.getInstance().checkCanceled();
      if (isSuitable(context,packagePrefix,qnames,lookingForAnnotations,psiClass)) {
        set.addElement(createLookupItem(psiClass,afterNew));
      }
    }
  }
}
