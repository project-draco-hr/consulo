{
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  documentManager.commitDocument(document);
  final RearrangerSettings settings=new RearrangerSettings();
  settings.setAskBeforeRearranging(true);
  settings.setRearrangeInnerClasses(true);
  if (useDialog) {
    final Application application=ApplicationManager.getApplication();
    application.runWriteAction(new Runnable(){
      public void run(){
        liveRearrangeDocument(project,psiFile,settings,document,cursorOffset);
      }
    }
);
  }
 else {
    final Runnable task=new Runnable(){
      public void run(){
        LOG.debug("liveRearrangeDocument task started");
        liveRearrangeDocument(project,psiFile,settings,document,cursorOffset);
      }
    }
;
    Thread t=new Thread(new Runnable(){
      public void run(){
        LOG.debug("started thread " + Thread.currentThread().getName());
        final Application application=ApplicationManager.getApplication();
        application.runReadAction(new Runnable(){
          public void run(){
            LOG.debug("enter application.runReadAction() on thread " + Thread.currentThread().getName());
            task.run();
            LOG.debug("exit application.runReadAction() on thread " + Thread.currentThread().getName());
          }
        }
);
      }
    }
,"Live Rearranger parser");
    t.start();
  }
  LOG.debug("exit buildLiveRearrangerData on thread " + Thread.currentThread().getName());
}
