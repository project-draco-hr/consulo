{
  LOG.debug("enter liveRearrangeDocument on thread " + Thread.currentThread().getName());
  new CommentUtil(settings);
  final Window window=WindowManager.getInstance().suggestParentWindow(project);
  ILiveRearranger fsp;
  if (useDialog) {
    fsp=new LiveRearrangerDialog(settings,psiFile,document,window,cursorOffset);
  }
 else {
    fsp=new LiveRearrangerPopup(settings,psiFile,document,project,window,cursorOffset);
  }
  final Parser p=new Parser(project,settings,psiFile);
  final List<ClassContentsEntry> outerClasses=p.parseOuterLevel();
  if (outerClasses.size() > 0) {
    final Mover mover=new Mover(outerClasses,settings);
    final List<RuleInstance> resultRuleInstances=mover.rearrangeOuterClasses();
    fsp.setResultRuleInstances(resultRuleInstances);
    fsp.liveRearranger();
  }
  LOG.debug("exit liveRearrangeDocument on thread " + Thread.currentThread().getName());
}
