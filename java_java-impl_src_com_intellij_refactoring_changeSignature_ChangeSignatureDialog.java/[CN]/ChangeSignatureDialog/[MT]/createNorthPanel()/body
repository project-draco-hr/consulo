{
  JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  JPanel top=new JPanel(new BorderLayout());
  if (myAllowDelegation) {
    myDelegationPanel=createDelegationPanel();
    top.add(myDelegationPanel,BorderLayout.WEST);
  }
  JPanel propagatePanel=new JPanel();
  myPropagateParamChangesButton=new JButton(RefactoringBundle.message("changeSignature.propagate.parameters.title"));
  myPropagateParamChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new CallerChooser(myMethod,RefactoringBundle.message("changeSignature.parameter.caller.chooser"),myParameterPropagationTree){
        protected void callersChosen(        Set<PsiMethod> callers){
          myMethodsToPropagateParameters=callers;
          myParameterPropagationTree=getTree();
        }
      }
.show();
    }
  }
);
  propagatePanel.add(myPropagateParamChangesButton);
  myPropagateExnChangesButton=new JButton(RefactoringBundle.message("changeSignature.propagate.exceptions.title"));
  myPropagateExnChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new CallerChooser(myMethod,RefactoringBundle.message("changeSignature.exception.caller.chooser"),myExceptionPropagationTree){
        protected void callersChosen(        Set<PsiMethod> callers){
          myMethodsToPropagateExceptions=callers;
          myExceptionPropagationTree=getTree();
        }
      }
.show();
    }
  }
);
  propagatePanel.add(myPropagateExnChangesButton);
  top.add(propagatePanel,BorderLayout.EAST);
  panel.add(top);
  if (!myMethod.isConstructor()) {
    JLabel namePrompt=new JLabel();
    myNameField=new EditorTextField(myMethod.getName());
    namePrompt.setText(RefactoringBundle.message("name.prompt"));
    namePrompt.setLabelFor(myNameField);
    panel.add(namePrompt);
    panel.add(myNameField);
    final DocumentListener documentListener=new DocumentListener(){
      public void beforeDocumentChange(      DocumentEvent event){
      }
      public void documentChanged(      DocumentEvent event){
        updateSignature();
      }
    }
;
    myNameField.addDocumentListener(documentListener);
    JLabel typePrompt=new JLabel();
    panel.add(typePrompt);
    final PsiElementFactory factory=JavaPsiFacade.getInstance(myMethod.getProject()).getElementFactory();
    final PsiTypeElement typeElement=myMethod.getReturnTypeElement();
    if (typeElement == null) {
      LOG.error(myMethod.getClass().getName());
      return panel;
    }
    myReturnTypeCodeFragment=factory.createTypeCodeFragment(typeElement.getText(),myMethod.getParameterList(),true,true);
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myReturnTypeCodeFragment);
    myReturnTypeField=new EditorTextField(document,myProject,StdFileTypes.JAVA);
    typePrompt.setText(RefactoringBundle.message("changeSignature.return.type.prompt"));
    typePrompt.setLabelFor(myReturnTypeField);
    panel.add(myReturnTypeField);
    myReturnTypeField.addDocumentListener(documentListener);
  }
  return panel;
}
