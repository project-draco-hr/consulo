{
  try {
    final PsiNamedElement variable=getVariable();
    if (variable != null && !newName.equals(myOldName)) {
      final NamesValidator namesValidator=LanguageNamesValidation.INSTANCE.forLanguage(variable.getLanguage());
      LOG.assertTrue(namesValidator != null);
      if (namesValidator.isIdentifier(newName,myProject)) {
        final PsiElement substituted=getSubstituted();
        if (substituted == null) {
          return;
        }
        final String commandName=RefactoringBundle.message("renaming.0.1.to.2",UsageViewUtil.getType(variable),UsageViewUtil.getDescriptiveName(variable),newName);
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            final RenamePsiElementProcessor elementProcessor=RenamePsiElementProcessor.forElement(substituted);
            final RenameProcessor renameProcessor=new RenameProcessor(myProject,substituted,newName,elementProcessor.isToSearchInComments(substituted),elementProcessor.isToSearchForTextOccurrences(substituted));
            for (            AutomaticRenamerFactory factory : Extensions.getExtensions(AutomaticRenamerFactory.EP_NAME)) {
              if (factory.isApplicable(substituted) && factory.getOptionName() != null) {
                if (factory.isEnabled()) {
                  renameProcessor.addRenamerFactory(factory);
                }
              }
            }
            renameProcessor.run();
            PsiDocumentManager.getInstance(myProject).commitAllDocuments();
          }
        }
,commandName,null);
      }
    }
  }
  finally {
    FinishMarkAction.finish(myProject,myEditor,markAction);
    if (myBeforeRevert != null) {
      myEditor.getCaretModel().moveToOffset(myBeforeRevert.getEndOffset());
    }
  }
}
