{
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    int asteriskCount=0;
    boolean recursive=true;
    for (int idx=(antPattern.startsWith("/") || antPattern.startsWith("\\")) ? 1 : 0; idx < antPattern.length(); idx++) {
      final char ch=antPattern.charAt(idx);
      if (ch == '*') {
        asteriskCount++;
        continue;
      }
      final boolean foundRecursivePattern=recursive && asteriskCount == 2 && (ch == '/' || ch == '\\');
      final boolean asterisksFound=asteriskCount > 0;
      asteriskCount=0;
      recursive=ch == '/' || ch == '\\';
      if (foundRecursivePattern) {
        builder.append("(?:[^/]+/)*?");
        continue;
      }
      if (asterisksFound) {
        builder.append("[^/]*?");
      }
      if (ch == '[' || ch == ']' || ch == '^' || ch == '$' || ch == '.' || ch == '{' || ch == '}' || ch == '+' || ch == '|') {
        builder.append('\\').append(ch);
        continue;
      }
      if (ch == '?') {
        builder.append("[^/]{1}");
        continue;
      }
      if (ch == '\\') {
        builder.append('/');
        continue;
      }
      builder.append(ch);
    }
    final boolean isTrailingSlash=builder.length() > 0 && builder.charAt(builder.length() - 1) == '/';
    if ((asteriskCount == 0 && isTrailingSlash) || (recursive && asteriskCount == 2)) {
      if (isTrailingSlash) {
        builder.setLength(builder.length() - 1);
      }
      if (builder.length() == 0) {
        builder.append(".*");
      }
 else {
        builder.append("(?:$|/.+)");
      }
    }
 else     if (asteriskCount > 0) {
      builder.append("[^/]*?");
    }
    return builder.toString();
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
