{
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    for (int idx=0; idx < antPattern.length(); idx++) {
      final char ch=antPattern.charAt(idx);
switch (ch) {
case '[':
case ']':
case '^':
case '$':
case '.':
case '{':
case '}':
case '+':
case '|':
        builder.append('\\').append(ch);
      break;
case '\\':
    builder.append("/");
  break;
case '?':
builder.append(".{1}");
break;
case '*':
int asteriskCount=1;
while (++idx < antPattern.length()) {
if (antPattern.charAt(idx) != '*') {
break;
}
asteriskCount++;
}
final boolean isEnd=idx >= antPattern.length();
final boolean isSlash=!isEnd && (antPattern.charAt(idx) == '/' || antPattern.charAt(idx) == '\\');
if (!isEnd && !isSlash) {
idx--;
}
if (asteriskCount == 2 && isSlash) {
builder.append("(?:[^/]+/)*?");
}
 else if (asteriskCount == 2 && isEnd) {
builder.append(".*");
}
 else {
builder.append("[^/]*?");
if (isSlash) {
builder.append("/");
}
}
break;
default :
builder.append(ch);
}
}
if (builder.length() > 0 && builder.charAt(builder.length() - 1) == '/') {
builder.append(".*");
}
return builder.toString();
}
  finally {
StringBuilderSpinAllocator.dispose(builder);
}
}
