{
  if (myNodePopup != null && myNodePopup.isVisible() && myModel.getSelectedIndex() == index) {
    cancelPopup();
    return;
  }
  final Object object=myModel.getElement(index);
  final List<Object> objects=myModel.calcElementChildren(object);
  if (!objects.isEmpty()) {
    Object[] siblings=new Object[objects.size()];
    Icon[] icons=new Icon[objects.size()];
    for (int i=0; i < objects.size(); i++) {
      siblings[i]=objects.get(i);
      if (siblings[i] instanceof Module) {
        icons[i]=((Module)siblings[i]).getModuleType().getNodeIcon(false);
      }
 else       if (siblings[i] instanceof PsiElement) {
        icons[i]=((PsiElement)siblings[i]).getIcon(Iconable.ICON_FLAG_OPEN);
      }
    }
    final BaseListPopupStep<Object> step=new BaseListPopupStep<Object>("",siblings,icons){
      public boolean isSpeedSearchEnabled(){
        return true;
      }
      public boolean isSelectable(      Object value){
        return true;
      }
      public void canceled(){
        super.canceled();
        repaint();
      }
      @NotNull public String getTextFor(      Object value){
        final String presentableText=myModel.getPresentableText(value,getWindow());
        return presentableText != null ? presentableText : "";
      }
      public PopupStep onChosen(      final Object selectedValue,      final boolean finalChoice){
        if (selectedValue instanceof PsiFile) {
          final Navigatable navigatable=(Navigatable)selectedValue;
          if (navigatable.canNavigate()) {
            navigatable.navigate(true);
          }
          hideHint();
        }
 else {
          navigateInsideBar(selectedValue);
        }
        return PopupStep.FINAL_CHOICE;
      }
    }
;
    step.setDefaultOptionIndex(index < myModel.size() - 1 ? objects.indexOf(myModel.getElement(index + 1)) : 0);
    myNodePopup=new ListPopupImpl(step){
      protected ListCellRenderer getListElementRenderer(){
        return new MySiblingsListCellRenderer();
      }
    }
;
    myNodePopup.registerAction("left",KeyEvent.VK_LEFT,0,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        myNodePopup.goBack();
        shiftFocus(-1);
        click();
      }
    }
);
    myNodePopup.registerAction("right",KeyEvent.VK_RIGHT,0,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        myNodePopup.goBack();
        shiftFocus(1);
        click();
      }
    }
);
    myNodePopup.showUnderneathOf(getItem(index).getColoredComponent());
  }
  repaint();
}
