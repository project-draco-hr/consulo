{
  myPreferredWidth=0;
  myScrollablePanel.removeAll();
  myScrollablePanel.revalidate();
  final GridBagConstraints gc=new GridBagConstraints(GridBagConstraints.RELATIVE,1,1,1,0,1,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  final MyCompositeLabel toBeContLabel=getDotsLabel();
  clearBorder(toBeContLabel.getColoredComponent());
  final int additionalWidth=toBeContLabel.getPreferredSize().width;
  final Window window=SwingUtilities.getWindowAncestor(this);
  final int availableWidth=window != null ? window.getWidth() - 2 * LEFT_ICON.getIconWidth() - 2 * additionalWidth : 0;
  int lastIndx=-1;
  if (myModel.getSelectedIndex() != -1) {
    myScrollablePanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    if (myFirstIndex > 0) {
      final MyCompositeLabel preList=getDotsLabel();
      clearBorder(preList.getColoredComponent());
      myScrollablePanel.add(preList,gc);
      myPreferredWidth+=additionalWidth;
    }
    for (int i=myFirstIndex; i < myList.size(); i++) {
      final MyCompositeLabel linkLabel=myList.get(i);
      final int labelWidth=linkLabel.getPreferredSize().width;
      if (myPreferredWidth + labelWidth < availableWidth) {
        myScrollablePanel.add(linkLabel,gc);
        myPreferredWidth+=labelWidth;
      }
 else {
        myScrollablePanel.add(toBeContLabel,gc);
        myPreferredWidth+=additionalWidth;
        lastIndx=i;
        break;
      }
    }
    gc.weightx=1;
    gc.fill=GridBagConstraints.HORIZONTAL;
    myScrollablePanel.add(Box.createHorizontalBox(),gc);
  }
 else   if (!myModel.isEmpty()) {
    myScrollablePanel.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    gc.weightx=1;
    gc.fill=GridBagConstraints.HORIZONTAL;
    myScrollablePanel.add(Box.createHorizontalBox(),gc);
    gc.weightx=0;
    gc.fill=GridBagConstraints.NONE;
    final MyCompositeLabel preselected=myList.get(myModel.size() - 1);
    installDottedBorder(preselected.getColoredComponent());
    for (int i=myModel.size() - 1; i >= 0; i--) {
      final MyCompositeLabel linkLabel=myList.get(i);
      final int labelWidth=linkLabel.getPreferredSize().width;
      if (availableWidth == 0 || myPreferredWidth + labelWidth < availableWidth) {
        myScrollablePanel.add(linkLabel,gc);
        myPreferredWidth+=labelWidth;
      }
 else {
        myFirstIndex=i + 1;
        myScrollablePanel.add(toBeContLabel,gc);
        myPreferredWidth+=additionalWidth;
        break;
      }
    }
  }
  myPreferredWidth+=2 * LEFT_ICON.getIconWidth();
  final boolean hasNavigationButtons=lastIndx > 0 || myFirstIndex > 0;
  myLeftButton.setVisible(hasNavigationButtons);
  myRightButton.setVisible(hasNavigationButtons);
  repaint();
}
