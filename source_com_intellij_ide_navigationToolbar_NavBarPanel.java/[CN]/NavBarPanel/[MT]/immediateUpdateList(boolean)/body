{
  if (update) {
    myFirstIndex=0;
    final int selectedIndex1=-1;
    myModel.setSelectedIndex(selectedIndex1);
    myList.clear();
    for (int index=0; index < myModel.size(); index++) {
      final int idx=index;
      final Object object=myModel.get(index);
      final boolean hasChildren=myModel.hasChildren(object);
      final Icon icon=NavBarModel.getIcon(object);
      final MyCompositeLabel label=new MyCompositeLabel(hasChildren ? wrapIcon(icon,idx,Color.gray) : icon,myModel.getPresentableText(object,getWindow()),myModel.getTextAttributes(object,false));
      ListenerUtil.addMouseListener(label,new MouseAdapter(){
        public void mouseExited(        MouseEvent e){
          if (!hasChildren)           return;
          label.getLabel().setIcon(wrapIcon(icon,idx,Color.gray));
        }
        public void mouseClicked(        MouseEvent e){
          if (hasChildren) {
            if (isInsideIcon(e.getPoint(),object)) {
              label.getLabel().setIcon(wrapIcon(icon,idx,Color.black));
            }
            if (myModel.getSelectedIndex() == idx && myNodePopup != null) {
              cancelPopup();
              return;
            }
            ctrlClick(idx);
          }
          clearBorder();
          myModel.setSelectedIndex(idx);
          paintBorder();
        }
      }
);
      ListenerUtil.addMouseMotionListener(label,new MouseMotionAdapter(){
        public void mouseMoved(        MouseEvent e){
          if (!hasChildren)           return;
          if (isInsideIcon(e.getPoint(),object)) {
            label.getLabel().setIcon(wrapIcon(icon,idx,Color.black));
          }
 else {
            label.getLabel().setIcon(wrapIcon(icon,idx,Color.gray));
          }
        }
      }
);
      myList.add(label);
      installActions(index);
    }
    paintComponent();
  }
}
