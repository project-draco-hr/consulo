{
  List<Integer> headIds=ContainerUtil.map(heads,new Function<CommitId,Integer>(){
    @Override public Integer fun(    CommitId head){
      return myPermanentCommitsInfo.getNodeId(head);
    }
  }
);
  if (!heads.isEmpty() && ContainerUtil.getFirstItem(heads) instanceof Integer) {
    final TIntHashSet branchNodes=new TIntHashSet();
    myReachableNodes.walk(headIds,new Consumer<Integer>(){
      @Override public void consume(      Integer node){
        branchNodes.add((Integer)myPermanentCommitsInfo.getCommitId(node));
      }
    }
);
    return new IntContainedInBranchCondition<>(branchNodes);
  }
 else {
    final Set<CommitId> branchNodes=ContainerUtil.newHashSet();
    myReachableNodes.walk(headIds,new Consumer<Integer>(){
      @Override public void consume(      Integer node){
        branchNodes.add(myPermanentCommitsInfo.getCommitId(node));
      }
    }
);
    return new ContainedInBranchCondition<>(branchNodes);
  }
}
