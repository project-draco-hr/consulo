{
  final Map<PluginId,IdeaPluginDescriptorImpl> idToDescriptorMap=new HashMap<PluginId,IdeaPluginDescriptorImpl>();
  final StringBuffer message=new StringBuffer();
  boolean pluginsWithoutIdFound=false;
  for (Iterator<IdeaPluginDescriptorImpl> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptorImpl descriptor=it.next();
    final PluginId id=descriptor.getPluginId();
    if (id == null) {
      pluginsWithoutIdFound=true;
    }
    if (idToDescriptorMap.containsKey(id)) {
      if (message.length() > 0) {
        message.append("\n");
      }
      message.append(IdeBundle.message("message.duplicate.plugin.id"));
      message.append(id);
      it.remove();
    }
 else     if (descriptor.isEnabled()) {
      idToDescriptorMap.put(id,descriptor);
    }
  }
  final List<String> disabledPluginIds=new ArrayList<String>();
  for (Iterator<IdeaPluginDescriptorImpl> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptorImpl pluginDescriptor=it.next();
    final PluginId[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
    final Set<PluginId> optionalDependencies=new HashSet<PluginId>(Arrays.asList(pluginDescriptor.getOptionalDependentPluginIds()));
    for (    final PluginId dependentPluginId : dependentPluginIds) {
      if (!idToDescriptorMap.containsKey(dependentPluginId) && !optionalDependencies.contains(dependentPluginId)) {
        if (message.length() > 0) {
          message.append("\n");
        }
        pluginDescriptor.setEnabled(false);
        disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString());
        message.append(getDisabledPlugins().contains(dependentPluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled",pluginDescriptor.getPluginId(),dependentPluginId) : IdeBundle.message("error.required.plugin.not.installed",pluginDescriptor.getPluginId(),dependentPluginId));
        it.remove();
        break;
      }
    }
  }
  if (!disabledPluginIds.isEmpty()) {
    try {
      saveDisabledPlugins(disabledPluginIds,true);
    }
 catch (    IOException e) {
      getLogger().error(e);
    }
  }
  if (pluginsWithoutIdFound) {
    if (message.length() > 0) {
      message.append("\n");
    }
    message.append(IdeBundle.message("error.plugins.without.id.found"));
  }
  if (message.length() > 0) {
    message.insert(0,IdeBundle.message("error.problems.found.loading.plugins"));
    return message.toString();
  }
  return null;
}
