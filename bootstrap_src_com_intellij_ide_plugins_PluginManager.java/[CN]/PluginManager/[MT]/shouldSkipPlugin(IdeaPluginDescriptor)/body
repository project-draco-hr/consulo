{
  final String idString=descriptor.getPluginId().getIdString();
  if (idString.equals(CORE_PLUGIN_ID)) {
    return false;
  }
  if (descriptor instanceof IdeaPluginDescriptorImpl && !((IdeaPluginDescriptorImpl)descriptor).isEnabled())   return true;
  if (!shouldLoadPlugins())   return true;
  boolean shouldLoad;
  final String loadPluginCategory=System.getProperty("idea.load.plugins.category");
  if (loadPluginCategory != null) {
    shouldLoad=loadPluginCategory.equals(descriptor.getCategory());
  }
 else {
    final String pluginId=System.getProperty("idea.load.plugins.id");
    shouldLoad=pluginId == null || (descriptor.getPluginId() != null && pluginId.equals(idString));
    if (shouldLoad) {
      shouldLoad=!getDisabledPlugins().contains(idString);
    }
    if (shouldLoad && descriptor instanceof IdeaPluginDescriptorImpl) {
      final String buildNumber=getBuildNumber();
      if (buildNumber != null) {
        final String sinceBuild=((IdeaPluginDescriptorImpl)descriptor).getSinceBuild();
        try {
          Integer.parseInt(sinceBuild);
          if (sinceBuild.compareToIgnoreCase(buildNumber) > 0) {
            return true;
          }
        }
 catch (        NumberFormatException e) {
        }
        final String untilBuild=((IdeaPluginDescriptorImpl)descriptor).getUntilBuild();
        try {
          Integer.parseInt(untilBuild);
          if (untilBuild.compareToIgnoreCase(buildNumber) < 0) {
            return true;
          }
        }
 catch (        NumberFormatException e) {
        }
      }
    }
  }
  return !shouldLoad;
}
