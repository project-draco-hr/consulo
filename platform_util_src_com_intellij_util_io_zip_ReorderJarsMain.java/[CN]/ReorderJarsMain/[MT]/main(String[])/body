{
  final String orderTxtPath=args[0];
  final String jarsPath=args[1];
  final String destinationHomePath=args[2];
  final String libPath=args.length > 3 ? args[3] : null;
  try {
    final Map<String,List<String>> toReorder=getOrder(new File(orderTxtPath));
    final Set<String> ignoredJars=libPath == null ? Collections.<String>emptySet() : loadIgnoredJars(libPath);
    for (    String jarUrl : toReorder.keySet()) {
      if (ignoredJars.contains(StringUtil.trimStart(jarUrl,"/lib/")))       continue;
      if (jarUrl.startsWith("/lib/ant"))       continue;
      final File jarFile=new File(jarsPath,jarUrl);
      if (!jarFile.isFile())       continue;
      final JBZipFile zipFile=new JBZipFile(jarFile);
      final List<JBZipEntry> entries=zipFile.getEntries();
      final List<String> orderedEntries=toReorder.get(jarUrl);
      Collections.sort(entries,new Comparator<JBZipEntry>(){
        public int compare(        JBZipEntry o1,        JBZipEntry o2){
          if ("META-INF/plugin.xml".equals(o2.getName()))           return Integer.MAX_VALUE;
          if ("META-INF/plugin.xml".equals(o1.getName()))           return -Integer.MAX_VALUE;
          if (orderedEntries.contains(o1.getName())) {
            return orderedEntries.contains(o2.getName()) ? orderedEntries.indexOf(o1.getName()) - orderedEntries.indexOf(o2.getName()) : -1;
          }
          if (orderedEntries.contains(o2.getName()))           return 1;
          return 0;
        }
      }
);
      final File tempJarFile=FileUtil.createTempFile("__reorder__","__reorder__");
      final JBZipFile file=new JBZipFile(tempJarFile);
      JBZipEntry sizeEntry=file.getOrCreateEntry(JarMemoryLoader.SIZE_ENTRY);
      sizeEntry.setData(ZipShort.getBytes(orderedEntries.size()));
      for (      JBZipEntry entry : entries) {
        final JBZipEntry zipEntry=file.getOrCreateEntry(entry.getName());
        zipEntry.setData(entry.getData());
      }
      file.close();
      final File resultJarFile=new File(destinationHomePath,jarUrl);
      resultJarFile.getParentFile().mkdirs();
      FileUtil.rename(tempJarFile,resultJarFile);
      FileUtil.delete(tempJarFile);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
