{
  Rectangle knobBounds=thumbRect;
  int w=knobBounds.width;
  int h=knobBounds.height;
  g.translate(knobBounds.x,knobBounds.y);
  if (slider.isEnabled()) {
    g.setColor(slider.getBackground());
  }
 else {
    g.setColor(slider.getBackground().darker());
  }
  Boolean paintThumbArrowShape=(Boolean)slider.getClientProperty("Slider.paintThumbArrowShape");
  if ((!slider.getPaintTicks() && paintThumbArrowShape == null) || paintThumbArrowShape == Boolean.FALSE) {
    g.fillRect(0,0,w,h);
    g.setColor(Color.black);
    g.drawLine(0,h - JBUI.scale(1),w - JBUI.scale(1),h - JBUI.scale(1));
    g.drawLine(w - JBUI.scale(1),0,w - JBUI.scale(1),h - JBUI.scale(1));
    g.setColor(getHighlightColor());
    g.drawLine(0,0,0,h - JBUI.scale(2));
    g.drawLine(JBUI.scale(1),0,w - JBUI.scale(2),0);
    g.setColor(getShadowColor());
    g.drawLine(JBUI.scale(1),h - JBUI.scale(2),w - JBUI.scale(2),h - JBUI.scale(2));
    g.drawLine(w - JBUI.scale(2),JBUI.scale(1),w - JBUI.scale(2),h - JBUI.scale(3));
  }
 else   if (slider.getOrientation() == JSlider.HORIZONTAL) {
    int cw=w / 2;
    g.fillRect(JBUI.scale(1),JBUI.scale(1),w - JBUI.scale(3),h - JBUI.scale(1) - cw);
    Polygon p=new Polygon();
    p.addPoint(JBUI.scale(1),h - cw);
    p.addPoint(cw - JBUI.scale(1),h - JBUI.scale(1));
    p.addPoint(w - JBUI.scale(2),h - JBUI.scale(1) - cw);
    g.fillPolygon(p);
    g.setColor(getHighlightColor());
    g.drawLine(0,0,w - JBUI.scale(2),0);
    g.drawLine(0,JBUI.scale(1),0,h - JBUI.scale(1) - cw);
    g.drawLine(0,h - cw,cw - JBUI.scale(1),h - JBUI.scale(1));
    g.setColor(Color.black);
    g.drawLine(w - JBUI.scale(1),0,w - JBUI.scale(1),h - JBUI.scale(2) - cw);
    g.drawLine(w - JBUI.scale(1),h - JBUI.scale(1) - cw,w - JBUI.scale(1) - cw,h - JBUI.scale(1));
    g.setColor(getShadowColor());
    g.drawLine(w - JBUI.scale(2),JBUI.scale(1),w - JBUI.scale(2),h - JBUI.scale(2) - cw);
    g.drawLine(w - JBUI.scale(2),h - JBUI.scale(1) - cw,w - JBUI.scale(1) - cw,h - JBUI.scale(2));
  }
 else {
    int cw=h / 2;
    if (slider.getComponentOrientation().isLeftToRight()) {
      g.fillRect(JBUI.scale(1),JBUI.scale(1),w - JBUI.scale(1) - cw,h - JBUI.scale(3));
      Polygon p=new Polygon();
      p.addPoint(w - cw - JBUI.scale(1),0);
      p.addPoint(w - JBUI.scale(1),cw);
      p.addPoint(w - JBUI.scale(1) - cw,h - JBUI.scale(2));
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(0,0,0,h - JBUI.scale(2));
      g.drawLine(JBUI.scale(1),0,w - JBUI.scale(1) - cw,0);
      g.drawLine(w - cw - JBUI.scale(1),0,w - JBUI.scale(1),cw);
      g.setColor(Color.black);
      g.drawLine(0,h - JBUI.scale(1),w - JBUI.scale(2) - cw,h - JBUI.scale(1));
      g.drawLine(w - JBUI.scale(1) - cw,h - JBUI.scale(1),w - JBUI.scale(1),h - JBUI.scale(1) - cw);
      g.setColor(getShadowColor());
      g.drawLine(JBUI.scale(1),h - JBUI.scale(2),w - JBUI.scale(2) - cw,h - JBUI.scale(2));
      g.drawLine(w - JBUI.scale(1) - cw,h - JBUI.scale(2),w - JBUI.scale(2),h - cw - JBUI.scale(1));
    }
 else {
      g.fillRect(JBUI.scale(5),JBUI.scale(1),w - JBUI.scale(1) - cw,h - JBUI.scale(3));
      Polygon p=new Polygon();
      p.addPoint(cw,0);
      p.addPoint(0,cw);
      p.addPoint(cw,h - JBUI.scale(2));
      g.fillPolygon(p);
      g.setColor(getHighlightColor());
      g.drawLine(cw - JBUI.scale(1),0,w - JBUI.scale(2),0);
      g.drawLine(0,cw,cw,0);
      g.setColor(Color.black);
      g.drawLine(0,h - JBUI.scale(1) - cw,cw,h - JBUI.scale(1));
      g.drawLine(cw,h - JBUI.scale(1),w - JBUI.scale(1),h - JBUI.scale(1));
      g.setColor(getShadowColor());
      g.drawLine(cw,h - JBUI.scale(2),w - JBUI.scale(2),h - JBUI.scale(2));
      g.drawLine(w - JBUI.scale(1),JBUI.scale(1),w - JBUI.scale(1),h - JBUI.scale(2));
    }
  }
  g.translate(-knobBounds.x,-knobBounds.y);
}
