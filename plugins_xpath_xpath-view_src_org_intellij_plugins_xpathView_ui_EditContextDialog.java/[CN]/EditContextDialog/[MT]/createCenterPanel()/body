{
  final JPanel p=ToolbarDecorator.createDecorator(myVariableTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      stopVarEditing();
      myVariableTableModel.addVariable();
      myNamespaceTable.editCellAt(myVariableTableModel.getRowCount() - 1,0);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myVariableTableModel.removeVariable(myVariableTable.getSelectedRow());
    }
  }
).disableUpDownActions().createPanel();
  UIUtil.addBorder(p,IdeBorderFactory.createTitledBorder("Variables",false));
  final JPanel n=ToolbarDecorator.createDecorator(myNamespaceTable).setAddAction(myContextProvider.getContextElement() != null ? null : new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final ExternalResourceManager erm=ExternalResourceManager.getInstance();
      final List<String> allURIs=new ArrayList<String>(Arrays.asList(erm.getResourceUrls(null,true)));
      final Collection<Namespace> namespaces=myNamespaceTableModel.getNamespaces();
      for (      Namespace namespace : namespaces) {
        allURIs.remove(namespace.getUri());
      }
      Collections.sort(allURIs);
      final DataContext dataContext=DataManager.getInstance().getDataContext(myNamespaceTable);
      final Project project=CommonDataKeys.PROJECT.getData(dataContext);
      final AddNamespaceDialog dlg=new AddNamespaceDialog(project,myUnresolvedPrefixes,allURIs,AddNamespaceDialog.Mode.EDITABLE);
      dlg.show();
      if (dlg.isOK()) {
        myNamespaceTableModel.addNamespace(new Namespace(dlg.getPrefix(),dlg.getURI()));
      }
    }
  }
).setRemoveAction(myContextProvider.getContextElement() != null ? null : new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myNamespaceTableModel.removeNamespace(myNamespaceTable.getSelectedRow());
    }
  }
).disableUpDownActions().createPanel();
  UIUtil.addBorder(n,IdeBorderFactory.createTitledBorder("Namespaces",false));
  int extendedState=myDimensionService.getExtendedState(getDimensionServiceKey());
  if (extendedState == -1)   extendedState=400;
  mySplitter=new Splitter(true,extendedState / 1000f);
  mySplitter.setHonorComponentsMinimumSize(true);
  mySplitter.setFirstComponent(n);
  mySplitter.setSecondComponent(p);
  return mySplitter;
}
