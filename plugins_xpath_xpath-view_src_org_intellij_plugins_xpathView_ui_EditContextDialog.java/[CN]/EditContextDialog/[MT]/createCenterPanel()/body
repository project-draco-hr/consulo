{
  final JPanel p=new JPanel(new BorderLayout());
  p.setBorder(IdeBorderFactory.createTitledBorder("Variables",false));
  final DefaultActionGroup group=new DefaultActionGroup(null,false);
  group.add(new AnAction("Add",null,IconLoader.getIcon("/general/add.png")){
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(true);
    }
    public void actionPerformed(    AnActionEvent e){
      stopVarEditing();
      myVariableTableModel.addVariable();
      myNamespaceTable.editCellAt(myVariableTableModel.getRowCount() - 1,0);
    }
  }
);
  group.add(new AnAction("Remove",null,IconLoader.getIcon("/general/remove.png")){
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myVariableTableModel.getVariables().size() > 0 && myVariableTable.getSelectedRow() != -1);
    }
    public void actionPerformed(    AnActionEvent e){
      myVariableTableModel.removeVariable(myVariableTable.getSelectedRow());
    }
  }
);
  final ActionManager actionManager=ActionManager.getInstance();
  final JComponent varToolbar=actionManager.createActionToolbar("XPathVariables",group,true).getComponent();
  p.add(varToolbar,BorderLayout.NORTH);
  p.add(ScrollPaneFactory.createScrollPane(myVariableTable),BorderLayout.CENTER);
  int extendedState=myDimensionService.getExtendedState(getDimensionServiceKey());
  if (extendedState == -1)   extendedState=400;
  mySplitter=new Splitter(true,extendedState / 1000f);
  mySplitter.setHonorComponentsMinimumSize(true);
  final JComponent n=new JPanel(new BorderLayout());
  n.setBorder(IdeBorderFactory.createTitledBorder("Namespaces",false));
  if (myContextProvider.getContextElement() == null) {
    final DefaultActionGroup nsActionGroup=new DefaultActionGroup();
    nsActionGroup.add(new AnAction("Add",null,IconLoader.getIcon("/general/add.png")){
      public void update(      AnActionEvent e){
        e.getPresentation().setEnabled(true);
      }
      public void actionPerformed(      AnActionEvent e){
        final ExternalResourceManager erm=ExternalResourceManager.getInstance();
        final List<String> allURIs=new ArrayList<String>(Arrays.asList(erm.getResourceUrls(null,true)));
        final Collection<Namespace> namespaces=myNamespaceTableModel.getNamespaces();
        for (        Namespace namespace : namespaces) {
          allURIs.remove(namespace.getUri());
        }
        Collections.sort(allURIs);
        final Project project=LangDataKeys.PROJECT.getData(e.getDataContext());
        final AddNamespaceDialog dlg=new AddNamespaceDialog(project,myUnresolvedPrefixes,allURIs,AddNamespaceDialog.Mode.EDITABLE);
        dlg.show();
        if (dlg.isOK()) {
          myNamespaceTableModel.addNamespace(new Namespace(dlg.getPrefix(),dlg.getURI()));
        }
      }
    }
);
    nsActionGroup.add(new AnAction("Remove",null,IconLoader.getIcon("/general/remove.png")){
      public void update(      AnActionEvent e){
        e.getPresentation().setEnabled(myNamespaceTableModel.getNamespaces().size() > 0 && myNamespaceTable.getSelectedRow() != -1);
      }
      public void actionPerformed(      AnActionEvent e){
        myNamespaceTableModel.removeNamespace(myNamespaceTable.getSelectedRow());
      }
    }
);
    final JComponent nsToolbar=actionManager.createActionToolbar("Namespaces",nsActionGroup,true).getComponent();
    n.add(nsToolbar,BorderLayout.NORTH);
  }
  n.add(ScrollPaneFactory.createScrollPane(myNamespaceTable),BorderLayout.CENTER);
  mySplitter.setFirstComponent(n);
  mySplitter.setSecondComponent(p);
  return mySplitter;
}
