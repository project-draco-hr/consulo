{
  final Project project=selectedExpr.getProject();
  final GroovyElementFactory factory=GroovyElementFactory.getInstance(project);
  final Runnable runnable=new Runnable(){
    public void run(){
      try {
        sortOccurences(occurences);
        if (occurences.length == 0 || !(occurences[0] instanceof GrExpression)) {
          throw new IncorrectOperationException("Wrong expression occurence");
        }
        GrExpression firstOccurence;
        if (replaceAllOccurences) {
          firstOccurence=((GrExpression)occurences[0]);
        }
 else {
          firstOccurence=selectedExpr;
        }
        boolean alreadyDefined=replaceAloneExpression(firstOccurence,selectedExpr,tempContainer,varDecl);
        if (!alreadyDefined) {
          insertVariableDefinition(tempContainer,selectedExpr,occurences,replaceAllOccurences,varDecl,factory);
        }
        GrReferenceExpression refExpr=factory.createReferenceExpressionFromText(varName);
        if (replaceAllOccurences) {
          ArrayList<PsiElement> replaced=new ArrayList<PsiElement>();
          for (          PsiElement occurence : occurences) {
            if (!(alreadyDefined && firstOccurence.equals(occurence))) {
              if (occurence instanceof GrExpression) {
                GrExpression element=(GrExpression)occurence;
                if (element instanceof GrClosableBlock && element.getParent() instanceof GrMethodCall) {
                  replaced.add(((GrMethodCall)element.getParent()).replaceClosureArgument(((GrClosableBlock)element),refExpr));
                }
 else {
                  replaced.add(element.replaceWithExpression(refExpr));
                }
                if (occurence.equals(selectedExpr)) {
                  refreshPositionMarker(replaced.get(replaced.size() - 1));
                }
                refExpr=factory.createReferenceExpressionFromText(varName);
              }
 else {
                throw new IncorrectOperationException("Expression occurence to be replaced is not instance of GroovyPsiElement");
              }
            }
          }
          if (editor != null) {
          }
        }
 else {
          if (!alreadyDefined) {
            if (selectedExpr instanceof GrClosableBlock && selectedExpr.getParent() instanceof GrMethodCall) {
              refreshPositionMarker(((GrMethodCall)selectedExpr.getParent()).replaceClosureArgument(((GrClosableBlock)selectedExpr),refExpr));
            }
 else {
              refreshPositionMarker(selectedExpr.replaceWithExpression(refExpr));
            }
          }
        }
        if (editor != null && getPositionMarker() != null) {
          editor.getCaretModel().moveToOffset(getPositionMarker().getTextRange().getEndOffset());
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,REFACTORING_NAME,null);
}
