{
  Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  int correctedOffset=offset;
  int textLength=document.getTextLength();
  if (offset >= textLength) {
    correctedOffset=textLength - 1;
  }
 else   if (!Character.isJavaIdentifierPart(text.charAt(offset))) {
    correctedOffset--;
  }
  if (correctedOffset < 0) {
    correctedOffset=offset;
  }
 else   if (!Character.isJavaIdentifierPart(text.charAt(correctedOffset))) {
    if (text.charAt(correctedOffset) == ';') {
      correctedOffset--;
    }
    if (text.charAt(correctedOffset) != ')') {
      correctedOffset=offset;
    }
  }
  final PsiElement elementAtCaret=file.findElementAt(correctedOffset);
  final List<GrExpression> expressions=new ArrayList<GrExpression>();
  for (GrExpression expression=PsiTreeUtil.getParentOfType(elementAtCaret,GrExpression.class); expression != null; expression=PsiTreeUtil.getParentOfType(expression,GrExpression.class)) {
    if (expressions.contains(expression) || expression instanceof GrParenthesizedExpression)     continue;
    if (expression instanceof GrSuperReferenceExpression || expression.getType() == PsiType.VOID)     continue;
    if (expression instanceof GrApplicationStatement)     continue;
    if (expression instanceof GrReferenceExpression && (expression.getParent() instanceof GrMethodCall && ((GrMethodCall)expression.getParent()).isCommandExpression() || ((GrReferenceExpression)expression).resolve() instanceof PsiClass)) {
      continue;
    }
    if (expression instanceof GrAssignmentExpression)     continue;
    expressions.add(expression);
  }
  return expressions;
}
