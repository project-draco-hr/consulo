{
  Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  int correctedOffset=offset;
  int textLength=document.getTextLength();
  if (offset >= textLength) {
    correctedOffset=textLength - 1;
  }
 else   if (!Character.isJavaIdentifierPart(text.charAt(offset))) {
    correctedOffset--;
  }
  if (correctedOffset < 0) {
    correctedOffset=offset;
  }
 else   if (!Character.isJavaIdentifierPart(text.charAt(correctedOffset))) {
    if (text.charAt(correctedOffset) == ';') {
      correctedOffset--;
    }
    if (text.charAt(correctedOffset) != ')') {
      correctedOffset=offset;
    }
  }
  final PsiElement elementAtCaret=file.findElementAt(correctedOffset);
  final List<GrExpression> expressions=new ArrayList<GrExpression>();
  GrExpression expression=PsiTreeUtil.getParentOfType(elementAtCaret,GrExpression.class);
  while (expression != null) {
    if (!expressions.contains(expression) && !(expression instanceof GrParenthesizedExpression) && !(expression instanceof GrSuperReferenceExpression)&& expression.getType() != PsiType.VOID) {
      if (!(expression instanceof GrReferenceExpression && (expression.getParent() instanceof GrMethodCallExpression || ((GrReferenceExpression)expression).resolve() instanceof PsiClass)) && !(expression instanceof GrAssignmentExpression)) {
        expressions.add(expression);
      }
    }
    expression=PsiTreeUtil.getParentOfType(expression,GrExpression.class);
  }
  return expressions;
}
