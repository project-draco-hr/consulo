{
  if (selectedExpr == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiFile file=selectedExpr.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  final GroovyElementFactory factory=GroovyElementFactory.getInstance(project);
  PsiType type=selectedExpr.getType();
  if (type != null)   type=TypeConversionUtil.erasure(type);
  if (type == PsiType.VOID) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("selected.expression.has.void.type"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiElement eclosingContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
  if (eclosingContainer == null || !(eclosingContainer instanceof GroovyPsiElement)) {
    return tempContainerNotFound(project);
  }
  final GroovyPsiElement tempContainer=((GroovyPsiElement)eclosingContainer);
  if (!isAppropriateContainer(tempContainer)) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("refactoring.is.not.supported.in.the.current.context",REFACTORING_NAME));
    showErrorMessage(message,project);
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  final PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurences(GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),tempContainer);
  GroovyIntroduceVariableSettings settings=getSettings(project,editor,selectedExpr,type,occurences,false,null);
  if (!settings.isOK()) {
    return false;
  }
  final String varName=settings.getEnteredName();
  PsiType varType=settings.getSelectedType();
  final boolean isFinal=settings.isDeclareFinal();
  final boolean replaceAllOccurences=settings.isReplaceAllOccurrences();
  final GrVariableDeclaration varDecl=factory.createVariableDeclaration(varName,GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),varType,isFinal);
  runRefactoring(selectedExpr,editor,tempContainer,occurences,varName,replaceAllOccurences,varDecl);
  return true;
}
