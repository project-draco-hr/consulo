{
  if (expr == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiFile file=expr.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  final GroovyElementFactory factory=GroovyElementFactory.getInstance(project);
  PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(expr);
  if (tempContainer == null) {
    return tempContainerNotFound(project);
  }
  if (!(tempContainer instanceof GrCodeBlock)) {
    String message=GroovyRefactoringBundle.message("refactoring.is.not.supported.in.the.current.context",REFACTORING_NAME);
    showErrorMessage(message,project);
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  return false;
}
