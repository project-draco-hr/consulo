{
  if (selectedExpr == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiFile file=selectedExpr.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  final GroovyElementFactory factory=GroovyElementFactory.getInstance(project);
  if (selectedExpr.getType() == PsiType.VOID) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("selected.expression.has.void.type"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiElement eclosingContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
  if (eclosingContainer == null || !(eclosingContainer instanceof GroovyPsiElement)) {
    return tempContainerNotFound(project);
  }
  final GroovyPsiElement tempContainer=((GroovyPsiElement)eclosingContainer);
  if (!isAppropriateContainer(tempContainer)) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("refactoring.is.not.supported.in.the.current.context",REFACTORING_NAME));
    showErrorMessage(message,project);
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  final PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurences(GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),tempContainer);
  GroovyIntroduceVariableSettings settings=getSettings(project,editor,selectedExpr,selectedExpr.getType(),occurences,false,null);
  if (!settings.isOK()) {
    return false;
  }
  final String varName=settings.getEnteredName();
  PsiType varType=settings.getSelectedType();
  final boolean isFinal=settings.isDeclareFinal();
  final boolean replaceAllOccurences=settings.isReplaceAllOccurrences();
  final GrVariableDeclaration varDecl=factory.createVariableDeclaration(varName,GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),varType,isFinal);
  final Runnable runnable=new Runnable(){
    public void run(){
      try {
        sortOccurences(occurences);
        if (occurences.length == 0 || !(occurences[0] instanceof GrExpression)) {
          throw new IncorrectOperationException("Wrong expression occurence");
        }
        GrExpression firstOccurence;
        if (replaceAllOccurences) {
          firstOccurence=((GrExpression)occurences[0]);
        }
 else {
          firstOccurence=selectedExpr;
        }
        boolean alreadyDefined=replaceAloneExpression(firstOccurence,tempContainer,varDecl);
        if (!alreadyDefined) {
          insertVariableDefinition(tempContainer,selectedExpr,occurences,replaceAllOccurences,varDecl,factory);
        }
        GrReferenceExpression refExpr=factory.createReferenceExpressionFromText(varName);
        if (replaceAllOccurences) {
          ArrayList<PsiElement> replaced=new ArrayList<PsiElement>();
          for (          PsiElement occurence : occurences) {
            if (!(alreadyDefined && firstOccurence.equals(occurence))) {
              if (occurence instanceof GrExpression) {
                GrExpression element=(GrExpression)occurence;
                replaced.add(element.replaceWithExpresssion(refExpr));
                refExpr=factory.createReferenceExpressionFromText(varName);
              }
 else {
                throw new IncorrectOperationException("Expression occurence to be replaced is not instance of GroovyPsiElement");
              }
            }
          }
          if (editor != null) {
            final PsiElement[] replacedOccurences=replaced.toArray(new PsiElement[replaced.size()]);
            highlightReplacedOccurences(project,editor,replacedOccurences);
          }
        }
 else {
          if (!alreadyDefined) {
            selectedExpr.replaceWithExpresssion(refExpr);
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,REFACTORING_NAME,null);
  return true;
}
