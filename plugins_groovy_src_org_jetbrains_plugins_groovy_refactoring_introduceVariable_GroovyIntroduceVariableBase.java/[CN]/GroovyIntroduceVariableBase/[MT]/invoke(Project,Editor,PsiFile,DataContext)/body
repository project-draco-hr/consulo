{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (!selectionModel.hasSelection()) {
    final int offset=editor.getCaretModel().getOffset();
    if (!selectionModel.hasSelection()) {
      final List<GrExpression> expressions=collectExpressions(file,editor,offset);
      if (expressions.isEmpty()) {
        selectionModel.selectLineAtCaret();
      }
 else       if (expressions.size() == 1) {
        final TextRange textRange=expressions.get(0).getTextRange();
        selectionModel.setSelection(textRange.getStartOffset(),textRange.getEndOffset());
      }
 else {
        IntroduceTargetChooser.showChooser(editor,expressions,new Pass<GrExpression>(){
          public void pass(          final GrExpression selectedValue){
            invoke(project,editor,file,selectedValue.getTextRange().getStartOffset(),selectedValue.getTextRange().getEndOffset());
          }
        }
,new Function<GrExpression,String>(){
          @Override public String fun(          GrExpression grExpression){
            return grExpression.getText();
          }
        }
);
        return;
      }
    }
  }
  invoke(project,editor,file,selectionModel.getSelectionStart(),selectionModel.getSelectionEnd());
}
