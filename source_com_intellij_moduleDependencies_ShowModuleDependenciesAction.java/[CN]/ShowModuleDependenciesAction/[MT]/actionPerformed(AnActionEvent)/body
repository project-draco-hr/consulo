{
  final DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  ModulesDependenciesPanel panel;
  AnalysisScope scope=new AnalysisScope(project);
  final Module[] modules=(Module[])dataContext.getData(DataConstants.MODULE_CONTEXT_ARRAY);
  if (modules != null) {
    panel=new ModulesDependenciesPanel(project,modules);
    scope=new AnalysisScope(modules);
  }
 else {
    final PsiElement element=(PsiElement)dataContext.getData(DataConstants.PSI_FILE);
    final Module module=element != null ? ModuleUtil.findModuleForPsiElement(element) : null;
    if (module != null && ModuleManager.getInstance(project).getModules().length > 1) {
      MyModuleOrProjectScope dlg=new MyModuleOrProjectScope(module.getName());
      dlg.show();
      if (dlg.isOK()) {
        if (!dlg.useProjectScope()) {
          panel=new ModulesDependenciesPanel(project,new Module[]{module});
          scope=new AnalysisScope(module);
        }
 else {
          panel=new ModulesDependenciesPanel(project);
        }
      }
 else {
        return;
      }
    }
 else {
      panel=new ModulesDependenciesPanel(project);
    }
  }
  Content content=PeerFactory.getInstance().getContentFactory().createContent(panel,AnalysisScopeBundle.message("module.dependencies.toolwindow.title",StringUtil.decapitalize(scope.getDisplayName())),false);
  content.setDisposer(panel);
  panel.setContent(content);
  DependenciesAnalyzeManager.getInstance(project).addContent(content);
}
