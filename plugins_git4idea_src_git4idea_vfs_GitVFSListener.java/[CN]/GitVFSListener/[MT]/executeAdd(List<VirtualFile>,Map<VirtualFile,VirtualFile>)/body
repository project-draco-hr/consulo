{
  final Map<VirtualFile,List<VirtualFile>> sortedFiles;
  try {
    sortedFiles=GitUtil.sortFilesByGitRoot(addedFiles,true);
  }
 catch (  VcsException e) {
    throw new RuntimeException("The exception is not expected here",e);
  }
  final HashSet<VirtualFile> retainedFiles=new HashSet<VirtualFile>();
  final ProgressManager progressManager=ProgressManager.getInstance();
  progressManager.run(new Task.Backgroundable(myProject,GitBundle.getString("vfs.listener.checking.ignored"),false){
    @Override public void run(    @NotNull ProgressIndicator pi){
      for (      Map.Entry<VirtualFile,List<VirtualFile>> e : sortedFiles.entrySet()) {
        VirtualFile root=e.getKey();
        final List<VirtualFile> files=e.getValue();
        pi.setText(root.getPresentableUrl());
        try {
          retainedFiles.addAll(Git.untrackedFiles(myProject,root,files));
        }
 catch (        final VcsException ex) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            public void run(){
              gitVcs().showMessages(ex.getMessage());
            }
          }
);
        }
      }
      addedFiles.retainAll(retainedFiles);
      AppUIUtil.invokeLaterIfProjectAlive(myProject,new Runnable(){
        @Override public void run(){
          originalExecuteAdd(addedFiles,copiedFiles);
        }
      }
);
    }
  }
);
}
