{
  final Map<VirtualFile,List<VirtualFile>> sortedFiles;
  try {
    sortedFiles=GitUtil.sortFilesByGitRoot(addedFiles,true);
  }
 catch (  VcsException e) {
    gitVcs().showMessages(e.getMessage());
    return;
  }
  gitVcs().runInBackground(new Task.Backgroundable(myProject,GitBundle.getString("add.adding")){
    public void run(    @NotNull ProgressIndicator indicator){
      for (      Map.Entry<VirtualFile,List<VirtualFile>> e : sortedFiles.entrySet()) {
        try {
          final VirtualFile root=e.getKey();
          indicator.setText(root.getPresentableUrl());
          GitFileUtils.addFiles(myProject,root,e.getValue());
          GitUtil.markFilesDirty(myProject,e.getValue());
        }
 catch (        final VcsException ex) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            public void run(){
              gitVcs().showMessages(ex.getMessage());
            }
          }
);
        }
      }
    }
  }
);
}
