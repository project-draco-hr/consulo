{
  final Map<VirtualFile,List<FilePath>> sortedFiles;
  try {
    sortedFiles=GitUtil.sortFilePathsByGitRoot(files,true);
  }
 catch (  VcsException e) {
    gitVcs().showMessages(e.getMessage());
    return;
  }
  GitVcs.runInBackground(new Task.Backgroundable(myProject,operationTitle){
    public void run(    @NotNull ProgressIndicator indicator){
      for (      Map.Entry<VirtualFile,List<FilePath>> e : sortedFiles.entrySet()) {
        try {
          executor.execute(e.getKey(),e.getValue());
        }
 catch (        final VcsException ex) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            public void run(){
              gitVcs().showMessages(ex.getMessage());
            }
          }
);
        }
      }
      LocalFileSystem.getInstance().refreshIoFiles(executor.getFilesToRefresh());
    }
  }
);
}
