{
  Module ownerModule=orderEntry.getOwnerModule();
  MavenProjectsManager manager=MavenProjectsManager.getInstance(ownerModule.getProject());
  MavenProject project=manager.findProject(ownerModule);
  if (project == null)   return AddDependencyType.DEFAULT;
  if (orderEntry instanceof LibraryOrderEntry) {
    MavenArtifact artifact=MavenRootModelAdapter.findArtifact(project,((LibraryOrderEntry)orderEntry).getLibrary());
    if (artifact == null)     return AddDependencyType.DEFAULT;
    return shouldAddArtifact(artifact,settings) ? AddDependencyType.ADD : AddDependencyType.DO_NOT_ADD;
  }
 else   if (orderEntry instanceof ModuleOrderEntry) {
    Module depModule=((ModuleOrderEntry)orderEntry).getModule();
    if (depModule == null)     return AddDependencyType.DEFAULT;
    MavenProject depProject=manager.findProject(depModule);
    if (depProject == null)     return AddDependencyType.DEFAULT;
    List<MavenArtifact> deps=project.findDependencies(depProject);
    for (    MavenArtifact each : deps) {
      if (shouldAddArtifact(each,settings))       return OrderEnumerationHandler.AddDependencyType.ADD;
    }
    return AddDependencyType.DO_NOT_ADD;
  }
  return AddDependencyType.DEFAULT;
}
