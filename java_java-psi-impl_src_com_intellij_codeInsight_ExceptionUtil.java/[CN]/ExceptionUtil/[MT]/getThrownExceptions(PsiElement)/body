{
  if (element instanceof PsiClass) {
    if (element instanceof PsiAnonymousClass) {
      final PsiExpressionList argumentList=((PsiAnonymousClass)element).getArgumentList();
      if (argumentList != null) {
        return getThrownExceptions(argumentList);
      }
    }
    return Collections.emptyList();
  }
 else   if (element instanceof PsiMethodCallExpression) {
    PsiReferenceExpression methodRef=((PsiMethodCallExpression)element).getMethodExpression();
    JavaResolveResult result=methodRef.advancedResolve(false);
    return getExceptionsByMethodAndChildren(element,result);
  }
 else   if (element instanceof PsiNewExpression) {
    JavaResolveResult result=((PsiNewExpression)element).resolveMethodGenerics();
    return getExceptionsByMethodAndChildren(element,result);
  }
 else   if (element instanceof PsiThrowStatement) {
    final PsiExpression expr=((PsiThrowStatement)element).getException();
    if (expr == null)     return Collections.emptyList();
    final List<PsiType> types=getPreciseThrowTypes(expr);
    final List<PsiClassType> classTypes=ContainerUtil.mapNotNull(types,new NullableFunction<PsiType,PsiClassType>(){
      @Override public PsiClassType fun(      PsiType type){
        return type instanceof PsiClassType ? (PsiClassType)type : null;
      }
    }
);
    addExceptions(classTypes,getThrownExceptions(expr));
    return classTypes;
  }
 else   if (element instanceof PsiTryStatement) {
    return getTryExceptions((PsiTryStatement)element);
  }
  return getThrownExceptions(element.getChildren());
}
