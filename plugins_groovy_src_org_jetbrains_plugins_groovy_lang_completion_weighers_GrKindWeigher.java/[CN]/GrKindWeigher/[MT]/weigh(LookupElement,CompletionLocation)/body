{
  Object o=element.getObject();
  if (o instanceof ResolveResult) {
    o=((ResolveResult)o).getElement();
  }
  final PsiElement position=location.getCompletionParameters().getPosition();
  if (!(position.getContainingFile() instanceof GroovyFileBase)) {
    return null;
  }
  if (!(position.getParent() instanceof GrReferenceElement)) {
    if (o instanceof PsiClass || o instanceof PsiPackage)     return 0;
    return 1;
  }
  final GrReferenceElement parent=(GrReferenceElement)position.getParent();
  if (parent.getQualifier() == null) {
    if (o instanceof GrVariable && !(o instanceof GrField))     return NotQualifiedKind.aLocal;
    if (o instanceof PsiClass)     return NotQualifiedKind.aClass;
    if (o instanceof PsiPackage)     return NotQualifiedKind.aPackage;
    if (isLightElement(o))     return NotQualifiedKind.anImplicitGroovyMethod;
    if (o instanceof PsiMember)     return NotQualifiedKind.aMember;
    if (o instanceof String) {
      if ("for".equals(o))       return NotQualifiedKind.aKeyword;
      return NotQualifiedKind.aString;
    }
  }
 else {
    if (o instanceof PsiClass)     return QualifiedKind.aClass;
    if (o instanceof PsiPackage)     return QualifiedKind.aPackage;
    if (isLightElement(o)) {
      return QualifiedKind.anImplicitGroovyMethod;
    }
    if (o instanceof GrEnumConstant || o instanceof PsiEnumConstant)     return QualifiedKind.anEnumConstant;
    if (o instanceof PsiMember) {
      final PsiClass containingClass=((PsiMember)o).getContainingClass();
      if (containingClass != null) {
        if (TRASH_CLASSES.contains(containingClass.getQualifiedName())) {
          return QualifiedKind.aTrashMethod;
        }
      }
      return QualifiedKind.aMember;
    }
    if (o instanceof String)     return QualifiedKind.aString;
  }
  return null;
}
