{
  final PsiElement position=location.getCompletionParameters().getPosition();
  if (!(position.getContainingFile() instanceof GroovyFileBase))   return null;
  Object o=element.getObject();
  if (o instanceof ResolveResult) {
    o=((ResolveResult)o).getElement();
  }
  final PsiElement parent=position.getParent();
  final PsiElement qualifier=parent instanceof GrReferenceElement ? ((GrReferenceElement)parent).getQualifier() : null;
  if (qualifier == null) {
    if (o instanceof NamedArgumentDescriptor) {
switch (((NamedArgumentDescriptor)o).getPriority()) {
case ALWAYS_ON_TOP:
        return NotQualifiedKind.onTop;
case AS_LOCAL_VARIABLE:
      return NotQualifiedKind.local;
default :
    return NotQualifiedKind.unknown;
}
}
if (o instanceof PsiVariable && !(o instanceof PsiField)) {
return NotQualifiedKind.local;
}
PsiTypeLookupItem item=element.as(PsiTypeLookupItem.CLASS_CONDITION_KEY);
if (item != null && item.getBracketsCount() > 0) {
return NotQualifiedKind.arrayType;
}
if (isPriorityKeyword(o)) return NotQualifiedKind.local;
if (isLightElement(o)) return NotQualifiedKind.unknown;
if (o instanceof PsiClass) {
if (((PsiClass)o).isAnnotationType() && GroovyCompletionContributor.AFTER_AT.accepts(position)) {
  final GrAnnotation annotation=PsiTreeUtil.getParentOfType(position,GrAnnotation.class);
  if (annotation != null) {
    PsiElement annoParent=annotation.getParent();
    PsiElement owner=annoParent.getParent();
    String[] elementTypeFields=GrAnnotationImpl.getApplicableElementTypeFields(annoParent instanceof PsiModifierList ? owner : annoParent);
    if (PsiImplUtil.findApplicableTarget((PsiClass)o,GrAnnotationImpl.translate(elementTypeFields)) != null) {
      return NotQualifiedKind.restrictedClass;
    }
  }
}
if (GroovyCompletionContributor.IN_CATCH_TYPE.accepts(position) && InheritanceUtil.isInheritor((PsiClass)o,CommonClassNames.JAVA_LANG_THROWABLE)) {
  return NotQualifiedKind.restrictedClass;
}
}
if (o instanceof PsiMember) {
final PsiClass containingClass=((PsiMember)o).getContainingClass();
if (isAccessor((PsiMember)o)) return NotQualifiedKind.accessor;
if (o instanceof PsiClass && ((PsiClass)o).getContainingClass() == null || o instanceof PsiPackage) return NotQualifiedKind.unknown;
if (o instanceof PsiClass) return NotQualifiedKind.innerClass;
if (PsiTreeUtil.isContextAncestor(containingClass,position,false)) return NotQualifiedKind.currentClassMember;
return NotQualifiedKind.member;
}
return NotQualifiedKind.unknown;
}
 else {
if (o instanceof PsiEnumConstant) return QualifiedKind.enumConstant;
if (isLightElement(o)) return QualifiedKind.unknown;
if (o instanceof PsiMember) {
if (isTrashMethod((PsiMember)o)) return QualifiedKind.unknown;
if (isAccessor((PsiMember)o)) return QualifiedKind.accessor;
if (isQualifierClassMember((PsiMember)o,qualifier)) {
  return QualifiedKind.currentClassMember;
}
if (o instanceof PsiClass && ((PsiClass)o).getContainingClass() == null || o instanceof PsiPackage) return QualifiedKind.unknown;
if (o instanceof PsiClass) return QualifiedKind.innerClass;
return QualifiedKind.member;
}
return QualifiedKind.unknown;
}
}
