{
  final PsiElement position=location.getCompletionParameters().getPosition();
  if (!(position.getContainingFile() instanceof GroovyFileBase))   return null;
  if (!(position.getParent() instanceof GrReferenceElement))   return null;
  final GrReferenceElement parent=(GrReferenceElement)position.getParent();
  Object o=element.getObject();
  if (o instanceof ResolveResult) {
    o=((ResolveResult)o).getElement();
  }
  final PsiElement qualifier=parent.getQualifier();
  if (qualifier == null) {
    if (o instanceof PsiVariable && !(o instanceof PsiField))     return NotQualifiedKind.local;
    if (isLightElement(o))     return NotQualifiedKind.unknown;
    if (o instanceof PsiMember) {
      final PsiClass containingClass=((PsiMember)o).getContainingClass();
      if (PsiTreeUtil.isContextAncestor(containingClass,position,false))       return NotQualifiedKind.currentClassMember;
      if (o instanceof PsiClass && ((PsiClass)o).getContainingClass() == null || o instanceof PsiPackage)       return NotQualifiedKind.unknown;
      return NotQualifiedKind.member;
    }
    return NotQualifiedKind.unknown;
  }
 else {
    if (o instanceof PsiEnumConstant)     return QualifiedKind.enumConstant;
    if (isLightElement(o))     return QualifiedKind.unknown;
    if (o instanceof PsiMember) {
      if (isTrashMethod((PsiMember)o))       return QualifiedKind.unknown;
      if (isQualifierClassMember((PsiMember)o,qualifier))       return QualifiedKind.currentClassMember;
      if (o instanceof PsiClass && ((PsiClass)o).getContainingClass() == null || o instanceof PsiPackage)       return QualifiedKind.unknown;
      return QualifiedKind.member;
    }
    return QualifiedKind.unknown;
  }
}
