{
  HighlightSeverity severity=info.getSeverity();
  int layer;
  if (severity == HighlightSeverity.WARNING) {
    layer=HighlighterLayer.WARNING;
  }
 else   if (SeverityRegistrar.getInstance(project).compare(severity,HighlightSeverity.ERROR) >= 0) {
    layer=HighlighterLayer.ERROR;
  }
 else {
    layer=HighlighterLayer.ADDITIONAL_SYNTAX;
  }
  RangeHighlighterEx highlighter=(RangeHighlighterEx)markup.addRangeHighlighter(infoStartOffset,infoEndOffset,layer,info.getTextAttributes(psiFile),HighlighterTargetArea.EXACT_RANGE);
  info.highlighter=highlighter;
  highlighter.setAfterEndOfLine(info.isAfterEndOfLine);
  highlighter.setErrorStripeMarkColor(info.getErrorStripeMarkColor(psiFile));
  highlighter.setErrorStripeTooltip(info);
  highlighter.setGutterIconRenderer(info.getGutterIconRenderer());
  ranges2markersCache.put(new TextRange(infoStartOffset,infoEndOffset),info.highlighter);
  if (info.quickFixActionRanges != null) {
    info.quickFixActionMarkers=new ArrayList<Pair<HighlightInfo.IntentionActionDescriptor,RangeMarker>>(info.quickFixActionRanges.size());
    for (    Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
      TextRange textRange=pair.second;
      RangeMarker marker=getOrCreate(document,ranges2markersCache,textRange,highlighter);
      info.quickFixActionMarkers.add(Pair.create(pair.first,marker));
    }
  }
  info.fixMarker=getOrCreate(document,ranges2markersCache,new TextRange(info.fixStartOffset,info.fixEndOffset),highlighter);
}
