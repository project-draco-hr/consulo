{
  ApplicationManager.getApplication().assertIsDispatchThread();
  cleanFileLevelHighlights(project,document,group);
  List<TextRange> ranges=new ArrayList<TextRange>(infos.keySet());
  Collections.sort(ranges,BY_START_OFFSET);
  for (int i=1; i < ranges.size(); i++) {
    TextRange range=ranges.get(i);
    TextRange prev=ranges.get(i - 1);
    if (prev.intersects(range)) {
      ranges.remove(i);
      TextRange union=prev.union(range);
      Collection<HighlightInfo> collection=infos.get(prev);
      collection.addAll(infos.get(range));
      infos.remove(prev);
      infos.remove(range);
      infos.put(union,collection);
      ranges.set(i - 1,union);
      i--;
    }
  }
  HighlightInfo[] oldHighlights=DaemonCodeAnalyzerImpl.getHighlights(document,project);
  List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  boolean changed=false;
  if (oldHighlights != null) {
    for (    HighlightInfo info : oldHighlights) {
      RangeHighlighter highlighter=info.highlighter;
      boolean toRemove=!highlighter.isValid() || info.group == group && Collections.binarySearch(ranges,new TextRange(highlighter.getStartOffset(),highlighter.getEndOffset()),BY_START_OFFSET_OR_CONTAINS) >= 0;
      if (toRemove) {
        document.getMarkupModel(project).removeHighlighter(highlighter);
        changed=true;
      }
 else {
        result.add(info);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Removed segment highlighters:" + (oldHighlights.length - result.size()));
    }
  }
  Map<TextRange,RangeMarker> ranges2markers=new THashMap<TextRange,RangeMarker>();
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  for (  TextRange range : ranges) {
    Collection<HighlightInfo> highlights=infos.get(range);
    int startOffset=range.getStartOffset();
    int endOffset=range.getEndOffset();
    for (    HighlightInfo info : highlights) {
      int infoStartOffset=info.startOffset;
      int infoEndOffset=info.endOffset;
      if (infoStartOffset < startOffset || infoEndOffset > endOffset)       continue;
      HighlightSeverity severity=info.getSeverity();
      int layer;
      if (severity == HighlightSeverity.WARNING) {
        layer=HighlighterLayer.WARNING;
      }
 else       if (SeverityRegistrar.getInstance(project).compare(severity,HighlightSeverity.ERROR) >= 0) {
        layer=HighlighterLayer.ERROR;
      }
 else {
        layer=HighlighterLayer.ADDITIONAL_SYNTAX;
      }
      if (infoEndOffset == infoStartOffset) {
        infoEndOffset++;
      }
      final int docLength=document.getTextLength();
      if (infoEndOffset > docLength) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Invalid HighlightInfo created: (" + infoStartOffset + ":"+ infoEndOffset+ ")"+ info.description);
        }
        infoEndOffset=docLength;
      }
      if (info.isFileLevelAnnotation) {
        if (psiFile != null) {
          if (psiFile.getViewProvider().isPhysical()) {
            addFileLevelHighlight(project,group,info,psiFile);
            continue;
          }
        }
      }
      RangeHighlighterEx highlighter=(RangeHighlighterEx)document.getMarkupModel(project).addRangeHighlighter(infoStartOffset,infoEndOffset,layer,info.getTextAttributes(psiFile),HighlighterTargetArea.EXACT_RANGE);
      info.highlighter=highlighter;
      highlighter.setAfterEndOfLine(info.isAfterEndOfLine);
      info.text=document.getCharsSequence().subSequence(infoStartOffset,infoEndOffset).toString();
      info.group=group;
      highlighter.setErrorStripeMarkColor(info.getErrorStripeMarkColor(psiFile));
      highlighter.setErrorStripeTooltip(info);
      highlighter.setGutterIconRenderer(info.getGutterIconRenderer());
      ranges2markers.clear();
      ranges2markers.put(new TextRange(infoStartOffset,infoEndOffset),info.highlighter);
      if (info.quickFixActionRanges != null) {
        info.quickFixActionMarkers=new ArrayList<Pair<HighlightInfo.IntentionActionDescriptor,RangeMarker>>(info.quickFixActionRanges.size());
        for (        Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
          TextRange textRange=pair.second;
          RangeMarker marker=ranges2markers.get(textRange);
          if (marker == null) {
            marker=document.createRangeMarker(textRange.getStartOffset(),textRange.getEndOffset());
            ranges2markers.put(textRange,marker);
          }
          info.quickFixActionMarkers.add(Pair.create(pair.first,marker));
        }
      }
      info.fixMarker=ranges2markers.get(new TextRange(info.fixStartOffset,info.fixEndOffset));
      if (info.fixMarker == null) {
        info.fixMarker=document.createRangeMarker(info.fixStartOffset,info.fixEndOffset);
      }
      changed=true;
      result.add(info);
    }
  }
  if (changed) {
    HighlightInfo[] newHighlights=result.toArray(new HighlightInfo[result.size()]);
    DaemonCodeAnalyzerImpl.setHighlights(document,newHighlights,project);
    clearWhiteSpaceOptimizationFlag(document);
  }
}
