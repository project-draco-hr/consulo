{
  ApplicationManager.getApplication().assertIsDispatchThread();
  List<LineMarkerInfo> oldMarkers=DaemonCodeAnalyzerImpl.getLineMarkers(document,project);
  List<LineMarkerInfo> array=new ArrayList<LineMarkerInfo>(oldMarkers == null ? markers.size() : oldMarkers.size());
  MarkupModel markupModel=document.getMarkupModel(project);
  RangeHighlightersToReuse toReuse=new RangeHighlightersToReuse();
  if (oldMarkers != null) {
    for (    LineMarkerInfo info : oldMarkers) {
      RangeHighlighter highlighter=info.highlighter;
      boolean toRemove=!highlighter.isValid() || info.updatePass == group && startOffset <= highlighter.getStartOffset() && (highlighter.getEndOffset() < endOffset || highlighter.getEndOffset() == document.getTextLength());
      if (toRemove) {
        toReuse.add(highlighter);
      }
 else {
        array.add(info);
      }
    }
  }
  final EditorColorsScheme colorsScheme=EditorColorsManager.getInstance().getGlobalScheme();
  for (  LineMarkerInfo info : markers) {
    PsiElement element=info.getElement();
    if (element == null) {
      continue;
    }
    TextRange textRange=element.getTextRange();
    if (textRange == null)     continue;
    TextRange elementRange=InjectedLanguageManager.getInstance(project).injectedToHost(element,textRange);
    if (startOffset > elementRange.getStartOffset() || elementRange.getEndOffset() > endOffset) {
      continue;
    }
    RangeHighlighter marker=toReuse.reuseHighlighterAt(info.startOffset,info.endOffset);
    if (marker == null) {
      TextAttributes attributes=info.textAttributesKey == null ? null : colorsScheme.getAttributes(info.textAttributesKey);
      marker=markupModel.addRangeHighlighter(info.startOffset,info.endOffset,HighlighterLayer.ADDITIONAL_SYNTAX,attributes,HighlighterTargetArea.EXACT_RANGE);
    }
    LineMarkerInfo.LineMarkerGutterIconRenderer renderer=(LineMarkerInfo.LineMarkerGutterIconRenderer)info.createGutterRenderer();
    LineMarkerInfo.LineMarkerGutterIconRenderer oldRenderer=marker.getGutterIconRenderer() instanceof LineMarkerInfo.LineMarkerGutterIconRenderer ? (LineMarkerInfo.LineMarkerGutterIconRenderer)marker.getGutterIconRenderer() : null;
    if (oldRenderer == null || renderer == null || !renderer.looksTheSameAs(oldRenderer)) {
      marker.setGutterIconRenderer(renderer);
    }
    if (!Comparing.equal(marker.getLineSeparatorColor(),info.separatorColor)) {
      marker.setLineSeparatorColor(info.separatorColor);
    }
    if (!Comparing.equal(marker.getLineSeparatorPlacement(),info.separatorPlacement)) {
      marker.setLineSeparatorPlacement(info.separatorPlacement);
    }
    info.highlighter=marker;
    array.add(info);
  }
  for (  RangeHighlighter highlighter : toReuse.forAll()) {
    markupModel.removeHighlighter(highlighter);
  }
  DaemonCodeAnalyzerImpl.setLineMarkers(document,array,project);
}
