{
  ApplicationManager.getApplication().assertIsDispatchThread();
  List<LineMarkerInfo> array=new ArrayList<LineMarkerInfo>();
  List<LineMarkerInfo> oldMarkers=DaemonCodeAnalyzerImpl.getLineMarkers(document,project);
  MarkupModel markupModel=document.getMarkupModel(project);
  if (oldMarkers != null) {
    for (    LineMarkerInfo info : oldMarkers) {
      RangeHighlighter highlighter=info.highlighter;
      boolean toRemove=!highlighter.isValid() || info.updatePass == group && startOffset <= highlighter.getStartOffset() && highlighter.getStartOffset() <= endOffset;
      if (toRemove) {
        markupModel.removeHighlighter(highlighter);
      }
 else {
        array.add(info);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Removed line markers:" + (oldMarkers.size() - array.size()));
    }
  }
  for (  LineMarkerInfo info : markers) {
    if (startOffset > info.startOffset || info.startOffset > endOffset)     continue;
    RangeHighlighter marker=markupModel.addRangeHighlighter(info.startOffset,info.endOffset,HighlighterLayer.ADDITIONAL_SYNTAX,info.textAttributes,HighlighterTargetArea.EXACT_RANGE);
    marker.setGutterIconRenderer(info.createGutterRenderer());
    marker.setLineSeparatorColor(info.separatorColor);
    marker.setLineSeparatorPlacement(info.separatorPlacement);
    info.highlighter=marker;
    array.add(info);
  }
  DaemonCodeAnalyzerImpl.setLineMarkers(document,array,project);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Added line markers:" + markers.size());
  }
}
