{
  ApplicationManager.getApplication().assertIsDispatchThread();
  Document document=e.getDocument();
  if (document instanceof DocumentEx && ((DocumentEx)document).isInBulkUpdate())   return;
  List<HighlightInfo> highlights=DaemonCodeAnalyzerImpl.getHighlights(document,project);
  if (highlights == null || highlights.isEmpty())   return;
  int offset=e.getOffset();
  Editor[] editors=EditorFactory.getInstance().getEditors(document,project);
  if (editors.length == 0)   return;
  Editor editor=editors[0];
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(Math.max(0,offset - 1));
  if (iterator.atEnd())   return;
  int start=iterator.getStart();
  while (iterator.getEnd() < e.getOffset() + e.getNewLength()) {
    iterator.advance();
    if (iterator.atEnd())     return;
  }
  int end=iterator.getEnd();
  List<HighlightInfo> infosToRemove=new ArrayList<HighlightInfo>(highlights.size());
  boolean highlightersChanged=false;
  boolean highlightersRemoved=false;
  List<HighlightInfo> result=new ArrayList<HighlightInfo>(highlights.size());
  boolean documentChangedInsideHighlighter=false;
  for (  HighlightInfo info : highlights) {
    RangeHighlighter highlighter=info.highlighter;
    boolean toRemove=false;
    if (info.needUpdateOnTyping()) {
      int highlighterStart=highlighter.getStartOffset();
      int highlighterEnd=highlighter.getEndOffset();
      if (info.isAfterEndOfLine) {
        if (highlighterStart < document.getTextLength()) {
          highlighterStart+=1;
        }
        if (highlighterEnd < document.getTextLength()) {
          highlighterEnd+=1;
        }
      }
      if (!highlighter.isValid()) {
        toRemove=true;
      }
 else       if (start < highlighterEnd && highlighterStart < end) {
        LOG.assertTrue(0 <= highlighterStart);
        LOG.assertTrue(highlighterStart < document.getTextLength());
        documentChangedInsideHighlighter=true;
        toRemove=true;
      }
    }
    if (toRemove) {
      if (info.type.equals(HighlightInfoType.WRONG_REF)) {
        document.getMarkupModel(project).removeHighlighter(highlighter);
        highlightersRemoved=true;
      }
 else {
        infosToRemove.add(info);
        result.add(info);
      }
      highlightersChanged=true;
    }
 else {
      result.add(info);
    }
  }
  if (highlightersRemoved) {
    DaemonCodeAnalyzerImpl.setHighlights(document,result,project);
  }
  if (highlightersChanged || documentChangedInsideHighlighter) {
    disableWhiteSpaceOptimization(document);
  }
  if (highlightersChanged) {
    setHighlightsToRemove(infosToRemove,document.getMarkupModel(project));
  }
}
