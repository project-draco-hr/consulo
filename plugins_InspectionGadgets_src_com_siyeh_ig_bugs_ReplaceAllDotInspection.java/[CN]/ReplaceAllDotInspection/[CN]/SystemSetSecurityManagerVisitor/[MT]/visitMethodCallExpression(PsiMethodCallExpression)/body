{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"replaceAll".equals(methodName)) {
    return;
  }
  final PsiExpressionList argList=expression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  if (args.length != 2) {
    return;
  }
  final PsiExpression arg=args[0];
  if (!PsiUtil.isConstantExpression(arg)) {
    return;
  }
  final PsiType argType=arg.getType();
  if (argType == null) {
    return;
  }
  if (!"java.lang.String".equals(argType.getCanonicalText())) {
    return;
  }
  final String argValue=(String)ConstantExpressionUtil.computeCastTo(arg,argType);
  if (!".".equals(argValue)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (!"java.lang.String".equals(qualifiedName)) {
    return;
  }
  registerMethodCallError(expression);
}
