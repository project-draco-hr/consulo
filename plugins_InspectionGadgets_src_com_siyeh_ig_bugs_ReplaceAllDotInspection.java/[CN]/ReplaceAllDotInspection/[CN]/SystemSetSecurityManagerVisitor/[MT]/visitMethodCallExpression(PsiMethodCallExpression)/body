{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"replaceAll".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 2) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (!PsiUtil.isConstantExpression(argument)) {
    return;
  }
  final PsiType argumentType=argument.getType();
  if (argumentType == null) {
    return;
  }
  final String canonicalText=argumentType.getCanonicalText();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(canonicalText)) {
    return;
  }
  final String argValue=(String)ConstantExpressionUtil.computeCastTo(argument,argumentType);
  if (!".".equals(argValue)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(qualifiedName)) {
    return;
  }
  registerMethodCallError(expression);
}
