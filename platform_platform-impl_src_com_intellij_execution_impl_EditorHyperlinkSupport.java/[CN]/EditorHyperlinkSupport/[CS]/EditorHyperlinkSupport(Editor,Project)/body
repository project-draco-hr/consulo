{
  myEditor=editor;
  myHighlighters=new SmartList<RangeHighlighter>();
  editor.addEditorMouseListener(new EditorMouseAdapter(){
    public void mouseReleased(    final EditorMouseEvent e){
      final MouseEvent mouseEvent=e.getMouseEvent();
      if (mouseEvent.getButton() == MouseEvent.BUTTON1 && !mouseEvent.isPopupTrigger()) {
        LogicalPosition logical=myEditor.xyToLogicalPosition(e.getMouseEvent().getPoint());
        if (EditorUtil.inVirtualSpace(editor,logical)) {
          return;
        }
        RangeHighlighter range=findLinkRangeAt(myEditor.logicalPositionToOffset(logical));
        final HyperlinkInfo info=myHighlighterToMessageInfoMap.get(range);
        if (info != null) {
          info.navigate(project);
          linkFollowed(editor,getHyperlinks().keySet(),range);
        }
      }
    }
  }
);
  editor.getContentComponent().addMouseMotionListener(new MouseMotionAdapter(){
    public void mouseMoved(    final MouseEvent e){
      final HyperlinkInfo info=getHyperlinkInfoByPoint(e.getPoint());
      if (info != null) {
        myEditor.getContentComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      }
 else {
        final Cursor cursor=editor instanceof EditorEx ? UIUtil.getTextCursor(((EditorEx)editor).getBackgroundColor()) : Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR);
        myEditor.getContentComponent().setCursor(cursor);
      }
    }
  }
);
  myRefresher=new Consumer<BeforeAfter<Filter.Result>>(){
    @Override public void consume(    BeforeAfter<Filter.Result> resultBeforeAfter){
      if (resultBeforeAfter.getBefore() == null)       return;
      final RangeHighlighter hyperlinkRange=findHyperlinkRange(resultBeforeAfter.getBefore().hyperlinkInfo);
      if (hyperlinkRange != null) {
        myHighlighterToMessageInfoMap.remove(hyperlinkRange);
      }
 else {
        final Iterator<RangeHighlighter> iterator=myHighlighters.iterator();
        while (iterator.hasNext()) {
          final RangeHighlighter highlighter=iterator.next();
          if (highlighter.isValid() && containsOffset(resultBeforeAfter.getBefore().highlightStartOffset,highlighter)) {
            iterator.remove();
            break;
          }
        }
      }
      if (resultBeforeAfter.getAfter() != null) {
        if (resultBeforeAfter.getAfter().hyperlinkInfo != null) {
          addHyperlink(resultBeforeAfter.getAfter().highlightStartOffset,resultBeforeAfter.getAfter().highlightEndOffset,resultBeforeAfter.getAfter().highlightAttributes,resultBeforeAfter.getAfter().hyperlinkInfo);
        }
 else         if (resultBeforeAfter.getAfter().highlightAttributes != null) {
          addHighlighter(resultBeforeAfter.getAfter().highlightStartOffset,resultBeforeAfter.getAfter().highlightEndOffset,resultBeforeAfter.getAfter().highlightAttributes);
        }
      }
    }
  }
;
}
