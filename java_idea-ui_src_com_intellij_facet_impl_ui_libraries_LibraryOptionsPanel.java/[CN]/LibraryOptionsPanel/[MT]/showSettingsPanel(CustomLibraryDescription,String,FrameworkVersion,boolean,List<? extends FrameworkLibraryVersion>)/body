{
  mySettings=new LibraryCompositionSettings(libraryDescription,baseDirectoryPath,currentFrameworkVersion,versions);
  Disposer.register(this,mySettings);
  List<Library> libraries=calculateSuitableLibraries();
  myButtonEnumModel=RadioButtonEnumModel.bindEnum(Choice.class,myButtonGroup);
  myButtonEnumModel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateState();
    }
  }
);
  myDoNotCreateRadioButton.setVisible(showDoNotCreateOption);
  myLibraryComboBoxModel=new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>(){
    @Override public int compare(    LibraryEditor o1,    LibraryEditor o2){
      final String name1=o1.getName();
      final String name2=o2.getName();
      return -StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2));
    }
  }
);
  for (  Library library : libraries) {
    ExistingLibraryEditor libraryEditor=myLibrariesContainer.getLibraryEditor(library);
    if (libraryEditor == null) {
      libraryEditor=mySettings.getOrCreateEditor(library);
    }
    myLibraryComboBoxModel.add(libraryEditor);
  }
  myExistingLibraryComboBox.setModel(myLibraryComboBoxModel);
  if (libraries.isEmpty()) {
    myLibraryComboBoxModel.add(null);
  }
  myExistingLibraryComboBox.setSelectedIndex(0);
  myExistingLibraryComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) {
        myButtonEnumModel.setSelected(Choice.USE_LIBRARY);
      }
      updateState();
    }
  }
);
  myExistingLibraryComboBox.setRenderer(new HtmlListCellRenderer(myExistingLibraryComboBox.getRenderer()){
    @Override protected void doCustomize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value == null) {
        append("[No library selected]");
      }
 else       if (value instanceof ExistingLibraryEditor) {
        final Library library=((ExistingLibraryEditor)value).getLibrary();
        final boolean invalid=!((LibraryEx)library).getInvalidRootUrls(OrderRootType.CLASSES).isEmpty();
        OrderEntryAppearanceService.getInstance(getProject()).forLibrary(library,invalid).customize(this);
      }
 else       if (value instanceof NewLibraryEditor) {
        setIcon(PlatformIcons.LIBRARY_ICON);
        final String name=((NewLibraryEditor)value).getName();
        append(name != null ? name : "<unnamed>");
      }
    }
  }
);
  boolean canDownload=mySettings.getDownloadSettings() != null;
  myDownloadRadioButton.setVisible(canDownload);
  myButtonEnumModel.setSelected(libraries.isEmpty() && canDownload ? Choice.DOWNLOAD : Choice.USE_LIBRARY);
  if (!canDownload && !showDoNotCreateOption) {
    myUseLibraryRadioButton.setVisible(false);
    myUseLibraryLabel.setVisible(true);
  }
  final Dimension minimumSize=new Dimension(-1,myMessageLabel.getFontMetrics(myMessageLabel.getFont()).getHeight() * 2);
  myMessageLabel.setMinimumSize(minimumSize);
  myHiddenLabel.setMinimumSize(minimumSize);
  myCreateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      doCreate();
    }
  }
);
  myConfigureButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      doConfigure();
    }
  }
);
  updateState();
  showCard("editing");
}
