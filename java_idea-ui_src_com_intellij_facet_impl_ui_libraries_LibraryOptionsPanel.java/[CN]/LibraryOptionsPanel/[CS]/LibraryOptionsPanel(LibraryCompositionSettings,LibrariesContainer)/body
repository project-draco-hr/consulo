{
  mySettings=settings;
  myLibrariesContainer=librariesContainer;
  List<Library> suitableLibraries=calculateSuitableLibraries();
  if (!suitableLibraries.isEmpty()) {
    mySettings.setUsedLibraries(suitableLibraries);
  }
  myLibrariesChooser=new ChooseLibrariesDialog.LibraryElementChooser(suitableLibraries);
  myLibrariesChooser.getComponents()[0].setPreferredSize(new Dimension(10,10));
  myExistingLibrariesPanel.add(myLibrariesChooser);
  myExistingLibrariesLabel.setLabelFor(myLibrariesChooser.getComponent());
  myButtonEnumModel=RadioButtonEnumModel.bindEnum(Choice.class,myButtonGroup);
  myButtonEnumModel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateState();
    }
  }
);
  myConfigureButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
switch (myButtonEnumModel.getSelected()) {
case DOWNLOAD:
        showDialog(new DownloadingOptionsDialog(myConfigureButton,mySettings));
      break;
case PICK_FILES:
    if (mySettings.getLibrary() == null) {
      VirtualFile[] files=showFileChooser();
      final Library.ModifiableModel modifiableModel=mySettings.getOrCreateLibrary().getModifiableModel();
      for (      VirtualFile file : files) {
        modifiableModel.addRoot(file,OrderRootType.CLASSES);
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          modifiableModel.commit();
        }
      }
);
    }
  EditLibraryDialog dialog=new EditLibraryDialog(myConfigureButton,mySettings);
showDialog(dialog);
break;
case DO_NOT_CREATE:
break;
}
updateState();
}
}
);
updateState();
}
