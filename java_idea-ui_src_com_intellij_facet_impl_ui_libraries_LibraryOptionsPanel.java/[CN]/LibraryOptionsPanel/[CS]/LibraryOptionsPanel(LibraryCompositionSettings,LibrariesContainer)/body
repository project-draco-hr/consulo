{
  myLibraryCompositionSettings=libraryCompositionSettings;
  myLibrariesContainer=librariesContainer;
  List<Library> suitableLibraries=calculateSuitableLibraries();
  if (!suitableLibraries.isEmpty()) {
    myLibraryCompositionSettings.setUsedLibraries(suitableLibraries);
  }
  myLibrariesChooser=new ChooseLibrariesDialog.LibraryElementChooser(suitableLibraries);
  myLibrariesChooser.getComponents()[0].setPreferredSize(new Dimension(10,10));
  myExistingLibrariesPanel.add(myLibrariesChooser);
  myExistingLibrariesLabel.setLabelFor(myLibrariesChooser.getComponent());
  myButtonEnumModel=RadioButtonEnumModel.bindEnum(Choice.class,myButtonGroup);
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateState();
    }
  }
;
  myButtonEnumModel.addActionListener(listener);
  myConfigureButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
switch (myButtonEnumModel.getSelected()) {
case DOWNLOAD:
        showDialog(new DownloadingOptionsDialog(myConfigureButton,myLibraryCompositionSettings));
      break;
case PICK_FILES:
    EditLibraryDialog dialog=new EditLibraryDialog(myConfigureButton,myLibraryCompositionSettings);
  if (myLibraryCompositionSettings.getAddedJars().isEmpty()) {
    VirtualFile[] files=showFileChooser();
    Library.ModifiableModel modifiableModel=dialog.getLibrary().getModifiableModel();
    for (    VirtualFile file : files) {
      modifiableModel.addRoot(file,OrderRootType.CLASSES);
    }
  }
showDialog(dialog);
break;
case DO_NOT_CREATE:
break;
}
updateState();
}
}
);
updateState();
}
