{
  mySettings=settings;
  myLibrariesContainer=librariesContainer;
  List<Library> libraries=calculateSuitableLibraries();
  myButtonEnumModel=RadioButtonEnumModel.bindEnum(Choice.class,myButtonGroup);
  myButtonEnumModel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateState();
    }
  }
);
  myDoNotCreateRadioButton.setVisible(showDoNotCreateOption);
  myLibraryComboBoxModel=new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>(){
    @Override public int compare(    LibraryEditor o1,    LibraryEditor o2){
      final String name1=o1.getName();
      final String name2=o2.getName();
      return StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2));
    }
  }
);
  for (  Library library : libraries) {
    ExistingLibraryEditor libraryEditor=librariesContainer.getLibraryEditor(library);
    if (libraryEditor == null) {
      libraryEditor=mySettings.getOrCreateEditor(library);
    }
    myLibraryComboBoxModel.add(libraryEditor);
  }
  myExistingLibraryComboBox.setModel(myLibraryComboBoxModel);
  if (libraries.isEmpty()) {
    myLibraryComboBoxModel.add(null);
  }
  myExistingLibraryComboBox.setSelectedIndex(0);
  myExistingLibraryComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) {
        myButtonEnumModel.setSelected(Choice.USE_LIBRARY);
      }
      updateState();
    }
  }
);
  myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value == null) {
        append("[No library selected]");
      }
 else       if (value instanceof ExistingLibraryEditor) {
        ProjectStructureDialogCellAppearanceUtils.forLibrary(((ExistingLibraryEditor)value).getLibrary(),null).customize(this);
      }
 else       if (value instanceof NewLibraryEditor) {
        setIcon(Icons.LIBRARY_ICON);
        final String name=((NewLibraryEditor)value).getName();
        append(name != null ? name : "<unnamed>");
      }
    }
  }
);
  myButtonEnumModel.setSelected(libraries.isEmpty() ? Choice.DOWNLOAD : Choice.USE_LIBRARY);
  myCreateButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final VirtualFile[] roots=showFileChooser();
      if (roots.length > 0) {
        final NewLibraryEditor libraryEditor=new NewLibraryEditor();
        libraryEditor.setName(librariesContainer.suggestUniqueLibraryName(mySettings.getDefaultLibraryName()));
        for (        VirtualFile root : roots) {
          libraryEditor.addRoot(root,OrderRootType.CLASSES);
        }
        if (myLibraryComboBoxModel.get(0) == null) {
          myLibraryComboBoxModel.remove(0);
        }
        myLibraryComboBoxModel.add(libraryEditor);
        myLibraryComboBoxModel.setSelectedItem(libraryEditor);
        myButtonEnumModel.setSelected(Choice.USE_LIBRARY);
      }
    }
  }
);
  myConfigureButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
switch (myButtonEnumModel.getSelected()) {
case DOWNLOAD:
        new DownloadingOptionsDialog(myPanel,mySettings).show();
      break;
case USE_LIBRARY:
    final Object item=myExistingLibraryComboBox.getSelectedItem();
  if (item instanceof LibraryEditor) {
    EditLibraryDialog dialog=new EditLibraryDialog(myPanel,mySettings,(LibraryEditor)item);
    dialog.show();
    if (item instanceof ExistingLibraryEditor) {
      new WriteAction(){
        protected void run(        final Result result){
          ((ExistingLibraryEditor)item).commit();
        }
      }
.execute();
    }
  }
break;
default :
break;
}
updateState();
}
}
);
updateState();
}
