{
  mySettings=settings;
  myLibrariesContainer=librariesContainer;
  myLibraries=calculateSuitableLibraries();
  myButtonEnumModel=RadioButtonEnumModel.bindEnum(Choice.class,myButtonGroup);
  myButtonEnumModel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateState();
    }
  }
);
  final boolean librariesFound=!myLibraries.isEmpty();
  myDoNotCreateRadioButton.setVisible(showDoNotCreateOption);
  myUseExistingLibraryRadioButton.setVisible(librariesFound);
  myExistingLibraryComboBox.setVisible(librariesFound);
  if (librariesFound) {
    final SortedComboBoxModel<Library> model=new SortedComboBoxModel<Library>(LibrariesAlphaComparator.INSTANCE);
    model.addAll(myLibraries);
    myExistingLibraryComboBox.setModel(model);
    myExistingLibraryComboBox.setSelectedIndex(0);
    myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(){
      @Override protected void customizeCellRenderer(      JList list,      Object value,      int index,      boolean selected,      boolean hasFocus){
        if (value instanceof Library) {
          ProjectStructureDialogCellAppearanceUtils.forLibrary((Library)value,null).customize(this);
        }
      }
    }
);
  }
  myButtonEnumModel.setSelected(librariesFound ? Choice.USE_EXISTING : Choice.DOWNLOAD);
  myConfigureButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
switch (myButtonEnumModel.getSelected()) {
case DOWNLOAD:
        new DownloadingOptionsDialog(myPanel,mySettings).show();
      break;
case PICK_FILES:
    if (mySettings.getLibraryEditor() == null) {
      VirtualFile[] files=showFileChooser();
      mySettings.addFilesToLibrary(files,OrderRootType.CLASSES);
    }
  EditLibraryDialog dialog=new EditLibraryDialog(myPanel,mySettings);
dialog.show();
break;
default :
break;
}
updateState();
}
}
);
updateState();
}
