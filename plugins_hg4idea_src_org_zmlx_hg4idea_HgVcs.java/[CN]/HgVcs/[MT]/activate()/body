{
  super.activate();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getExecutableValidator().checkExecutableAndNotifyIfNeeded();
  }
  myStatusWidget=new HgStatusWidget(this,getProject(),projectSettings);
  myStatusWidget.activate();
  myIncomingWidget=new HgIncomingOutgoingWidget(this,getProject(),projectSettings,true);
  myIncomingWidget.activate();
  myOutgoingWidget=new HgIncomingOutgoingWidget(this,getProject(),projectSettings,false);
  myOutgoingWidget.activate();
  myHgRemoteStatusUpdater=new HgRemoteStatusUpdater(this,myIncomingWidget.getChangesetStatus(),myOutgoingWidget.getChangesetStatus(),projectSettings);
  myHgRemoteStatusUpdater.activate();
  myHgCurrentBranchStatusUpdater=new HgCurrentBranchStatusUpdater(this,myStatusWidget.getCurrentBranchStatus());
  myHgCurrentBranchStatusUpdater.activate();
  messageBusConnection=myProject.getMessageBus().connect();
  messageBusConnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    FileEditorManagerEvent event){
      Project project=event.getManager().getProject();
      project.getMessageBus().syncPublisher(BRANCH_TOPIC).update(project);
    }
  }
);
  myVFSListener=new HgVFSListener(myProject,this);
  final String ignoredPattern=FileTypeManager.getInstance().getIgnoredFilesList();
  if (!ignoredPattern.contains(ORIG_FILE_PATTERN)) {
    final String newPattern=ignoredPattern + (ignoredPattern.endsWith(";") ? "" : ";") + ORIG_FILE_PATTERN;
    HgUtil.runWriteActionLater(new Runnable(){
      public void run(){
        FileTypeManager.getInstance().setIgnoredFilesList(newPattern);
      }
    }
);
  }
  myProject.getMessageBus().syncPublisher(BRANCH_TOPIC).update(myProject);
}
