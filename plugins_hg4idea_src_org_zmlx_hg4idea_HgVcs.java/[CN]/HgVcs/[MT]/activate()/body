{
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getExecutableValidator().checkExecutableAndShowDialogIfNeeded();
  }
  StatusBar statusBar=WindowManager.getInstance().getStatusBar(myProject);
  if (statusBar != null) {
    statusBar.addWidget(hgCurrentBranchStatus,myProject);
    statusBar.addWidget(incomingChangesStatus,myProject);
    statusBar.addWidget(outgoingChangesStatus,myProject);
  }
  final HgRemoteStatusUpdater remoteUpdater=new HgRemoteStatusUpdater(this,incomingChangesStatus,outgoingChangesStatus,projectSettings);
  changesUpdaterScheduledFuture=JobScheduler.getScheduler().scheduleWithFixedDelay(new Runnable(){
    public void run(){
      remoteUpdater.update(myProject);
    }
  }
,0,HgGlobalSettings.getIncomingCheckIntervalSeconds(),TimeUnit.SECONDS);
  messageBusConnection=myProject.getMessageBus().connect();
  messageBusConnection.subscribe(REMOTE_TOPIC,remoteUpdater);
  messageBusConnection.subscribe(BRANCH_TOPIC,new HgCurrentBranchStatusUpdater(hgCurrentBranchStatus));
  messageBusConnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    FileEditorManagerEvent event){
      Project project=event.getManager().getProject();
      project.getMessageBus().syncPublisher(BRANCH_TOPIC).update(project);
    }
  }
);
  myVFSListener=new HgVFSListener(myProject,this);
  final String ignoredPattern=FileTypeManager.getInstance().getIgnoredFilesList();
  if (!ignoredPattern.contains(ORIG_FILE_PATTERN)) {
    final String newPattern=ignoredPattern + (ignoredPattern.endsWith(";") ? "" : ";") + ORIG_FILE_PATTERN;
    HgUtil.runWriteActionLater(new Runnable(){
      public void run(){
        FileTypeManager.getInstance().setIgnoredFilesList(newPattern);
      }
    }
);
  }
}
