{
  super(project);
  setTitle("Generate by Pattern");
  setOKButtonText("Generate");
  myMap=new MultiMap<String,PatternDescriptor>();
  for (  PatternDescriptor descriptor : descriptors) {
    myMap.putValue(descriptor.getParentId(),descriptor);
  }
  DefaultMutableTreeNode root=createNode(null);
  myTree=new SimpleTree(){
  }
;
  myTree.setRootVisible(false);
  myTree.setCellRenderer(new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      Component component=super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      Object object=((DefaultMutableTreeNode)value).getUserObject();
      if (object instanceof PatternDescriptor) {
        setText(((PatternDescriptor)object).getName());
        setIcon(((PatternDescriptor)object).getIcon());
      }
      return component;
    }
  }
);
  myTree.setModel(new DefaultTreeModel(root));
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      update();
    }
  }
);
  myEditor=TemplateEditorUtil.createEditor(true,"");
  mySplitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree));
  JPanel details=new JPanel(new BorderLayout());
  details.add(myEditor.getComponent(),BorderLayout.CENTER);
  mySplitter.setSecondComponent(details);
  mySplitter.setHonorComponentsMinimumSize(true);
  mySplitter.setShowDividerControls(true);
  myTree.setSelectionRow(0);
  init();
}
