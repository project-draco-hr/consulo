{
  HierarchicalArrangementConditionNode grouped=ArrangementUtil.group(rule.getMatcher().getCondition(),groupingRules);
  DefaultTreeModel treeModel=(DefaultTreeModel)tree.getModel();
  if (grouped.getChild() == null) {
    ArrangementTreeNode lastChild=null;
    if (root.getChildCount() > 0) {
      lastChild=root.getLastChild();
    }
    if (lastChild != null && grouped.getCurrent().equals(lastChild.getBackingCondition())) {
      return null;
    }
  }
  Pair<ArrangementTreeNode,Integer> pair=ArrangementConfigUtil.map(null,grouped,null);
  ArrangementTreeNode topMostNode=ArrangementConfigUtil.getRoot(pair.first);
  ArrangementConfigUtil.markRows(root,tree.isRootVisible());
  ArrangementTreeNode bottomHierarchy=null;
  if (anchor != null) {
    bottomHierarchy=ArrangementConfigUtil.cutSubHierarchy(root,treeModel,anchor);
  }
  ArrangementConfigUtil.insert(root,root.getChildCount(),topMostNode,treeModel);
  if (bottomHierarchy != null) {
    ArrangementConfigUtil.insert(root,root.getChildCount(),bottomHierarchy,treeModel);
  }
  TIntIntHashMap rowChanges=ArrangementConfigUtil.collectRowChangesAndUnmark(root,tree.isRootVisible());
  topMostNode=ArrangementConfigUtil.getLastBefore(pair.first,root);
  int row=ArrangementConfigUtil.getRow(pair.first,tree.isRootVisible());
  ArrangementRuleEditingModelImpl model=new ArrangementRuleEditingModelImpl(treeModel,rule,topMostNode,pair.first,groupingRules,row,tree.isRootVisible());
  return Pair.create(model,rowChanges);
}
