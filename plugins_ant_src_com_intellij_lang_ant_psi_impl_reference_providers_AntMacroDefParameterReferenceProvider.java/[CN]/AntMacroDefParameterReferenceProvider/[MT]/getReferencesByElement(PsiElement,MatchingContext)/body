{
  if (!(element instanceof AntStructuredElement)) {
    return PsiReference.EMPTY_ARRAY;
  }
  final AntStructuredElement antElement=(AntStructuredElement)element;
  final AntAllTasksContainer sequential=PsiTreeUtil.getParentOfType(antElement,AntAllTasksContainer.class,true,true);
  if (sequential == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final AntMacroDef macrodef=PsiTreeUtil.getParentOfType(sequential,AntMacroDef.class,true,true);
  if (macrodef == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final List<PsiReference> refs=PsiReferenceListSpinAllocator.alloc();
  try {
    for (    XmlAttribute attr : antElement.getSourceElement().getAttributes()) {
      getXmlElementReferences(attr.getValueElement(),refs,antElement);
    }
    getXmlElementReferences(antElement.getSourceElement(),refs,antElement);
    return (refs.size() > 0) ? refs.toArray(new PsiReference[refs.size()]) : PsiReference.EMPTY_ARRAY;
  }
  finally {
    PsiReferenceListSpinAllocator.dispose(refs);
  }
}
