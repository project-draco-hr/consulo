{
  final Enumeration enumeration=rootNode.children();
  ArrayList children=Collections.list(enumeration);
  final int index=Collections.binarySearch(children,nodeToInsert,new Comparator<DefaultMutableTreeNode>(){
    public int compare(    DefaultMutableTreeNode node1,    DefaultMutableTreeNode node2){
      final Object o1=node1.getUserObject();
      final Object o2=node2.getUserObject();
      if (o1 instanceof Module && o2 instanceof Module) {
        return ((Module)o1).getName().compareToIgnoreCase(((Module)o2).getName());
      }
      if (o1 instanceof ModuleGroup && o2 instanceof ModuleGroup) {
        return o1.toString().compareToIgnoreCase(o2.toString());
      }
      if (o1 instanceof ModuleGroup)       return -1;
      return 1;
    }
  }
);
  final int insertionPoint=-(index + 1);
  LOG.assertTrue(0 <= insertionPoint && insertionPoint <= rootNode.getChildCount(),"insertionPoint = " + insertionPoint + "; children="+ children+ "; node="+ nodeToInsert);
  rootNode.insert(nodeToInsert,insertionPoint);
  ((DefaultTreeModel)myTree.getModel()).nodeStructureChanged(rootNode);
}
