{
  if (pattern.isOn(descriptor.getOldQName())) {
    if (composite == null) {
      composite=new RefactoringElementListenerComposite();
    }
    composite.addListener(new RefactoringElementAdapter(){
      @Override public void elementRenamedOrMoved(      @NotNull PsiElement newElement){
        LOG.assertTrue(newElement instanceof PsiQualifiedNamedElement);
        try {
          final String newPattern=text.replace(descriptor.getOldQName(),((PsiQualifiedNamedElement)newElement).getQualifiedName());
          final PackageSet newSet=PackageSetFactory.getInstance().compile(newPattern);
          NamedScope newScope=new NamedScope(descriptor.getScope().getName(),newSet);
          final NamedScope[] currentScopes=descriptor.getHolder().getEditableScopes();
          currentScopes[descriptor.getIdx()]=newScope;
          descriptor.getHolder().setScopes(currentScopes);
        }
 catch (        ParsingException ignore) {
        }
      }
      @Override public void undoElementMovedOrRenamed(      @NotNull PsiElement newElement,      @NotNull String oldQualifiedName){
        LOG.assertTrue(newElement instanceof PsiQualifiedNamedElement);
        try {
          final NamedScope[] currentScopes=descriptor.getHolder().getEditableScopes();
          final String oldPattern=((PatternBasedPackageSet)currentScopes[descriptor.getIdx()].getValue()).getPattern().replace(((PsiQualifiedNamedElement)newElement).getQualifiedName(),oldQualifiedName);
          final PackageSet newSet=PackageSetFactory.getInstance().compile(oldPattern);
          NamedScope newScope=new NamedScope(descriptor.getScope().getName(),newSet);
          currentScopes[descriptor.getIdx()]=newScope;
          descriptor.getHolder().setScopes(currentScopes);
        }
 catch (        ParsingException ignore) {
        }
      }
    }
);
  }
  return composite;
}
