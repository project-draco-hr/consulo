{
  final CompletionContext context=queryParameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
  final PrefixMatcher matcher=new CamelHumpMatcher(CompletionData.findPrefixStatic(queryParameters.getPosition(),context.getStartOffset()));
  final Stack<AsyncConsumer<LookupElement>> stack=new Stack<AsyncConsumer<LookupElement>>();
  stack.push(consumer);
  executeForMatchingProviders(type,queryParameters,new PairProcessor<ProcessingContext,CompletionPlaceImpl<LookupElement,CompletionParameters>>(){
    public boolean process(    final ProcessingContext processingContext,    final CompletionPlaceImpl<LookupElement,CompletionParameters> place){
      final Ref<Boolean> toContinue=Ref.create(true);
      final AsyncConsumer<LookupElement> consumer=stack.peek();
      place.myProvider.addCompletions(queryParameters,processingContext,new CompletionResultSet<LookupElement>(matcher){
        public void addElement(        @NotNull final LookupElement lookupElement){
          if (lookupElement.getUserData(CompletionUtil.PREFIX_MATCHER) == null) {
            final PrefixMatcher matcher=getPrefixMatcher();
            if (!matcher.prefixMatches(lookupElement))             return;
            lookupElement.putUserData(CompletionUtil.PREFIX_MATCHER,matcher);
          }
          consumer.consume(lookupElement);
        }
        public void setSuccessorFilter(        final AsyncConsumer<LookupElement> consumer){
          stack.push(consumer);
        }
        public void stopHere(){
          toContinue.set(false);
        }
        public void setPrefixMatcher(        @NotNull final PrefixMatcher prefixMatcher){
          super.setPrefixMatcher(prefixMatcher);
          context.setPrefix(prefixMatcher.getPrefix());
        }
        public void setPrefixMatcher(        @NotNull final String prefix){
          setPrefixMatcher(new CamelHumpMatcher(prefix));
        }
      }
);
      return toContinue.get();
    }
  }
);
  while (!stack.isEmpty()) {
    stack.pop().finished();
  }
}
