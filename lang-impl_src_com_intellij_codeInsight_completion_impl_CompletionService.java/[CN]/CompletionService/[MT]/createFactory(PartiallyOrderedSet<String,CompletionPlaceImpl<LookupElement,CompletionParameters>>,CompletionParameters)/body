{
  final ArrayList<PrioritizedQueryExecutor<LookupElement,CompletionParameters>> list=new ArrayList<PrioritizedQueryExecutor<LookupElement,CompletionParameters>>();
  for (  final CompletionPlaceImpl<LookupElement,CompletionParameters> place : providers.getValues()) {
    final MatchingContext matchingContext=new MatchingContext();
    if (place.myPlace.accepts(parameters.getPosition(),matchingContext)) {
      final Condition<LookupElement> condition=new Condition<LookupElement>(){
        public boolean value(        final LookupElement lookupElement){
          CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
          final LookupItem ret=(LookupItem)lookupElement;
          final boolean itemCaseInsensitive=Boolean.TRUE.equals(ret.getAttribute(LookupItem.CASE_INSENSITIVE));
          final boolean result=CompletionUtil.checkName(ret,context,itemCaseInsensitive);
          if (result && itemCaseInsensitive) {
            final String currentString=ret.getLookupString();
            final String newString=CompletionVariantPeerImpl.handleCaseInsensitiveVariant(context.getPrefix(),currentString);
            ret.setLookupString(newString);
            if (ret.getObject().equals(currentString)) {
              ret.setObject(newString);
            }
          }
          return result;
        }
      }
;
      list.add(new PrioritizedQueryExecutor<LookupElement,CompletionParameters>(){
        public void execute(        final CompletionParameters queryParameters,        final QueryResultSet<LookupElement> resultSet){
          place.myProvider.addCompletions(queryParameters,matchingContext,new ConditionedResultSet(condition,resultSet));
        }
        public String toString(){
          return place.myId != null ? place.myId : place.myProvider.toString();
        }
      }
);
    }
  }
  return new PrioritizedQueryFactory<LookupElement,CompletionParameters>(list);
}
