{
  File targetDirectory=compilationUnit.getConfiguration().getTargetDirectory();
  String outputPath=targetDirectory.getCanonicalPath().replace(File.separatorChar,'/');
  final SortedSet allClasses=new TreeSet();
  List listOfClasses=compilationUnit.getClasses();
  for (int i=0; i < listOfClasses.size(); i++) {
    allClasses.add(((GroovyClass)listOfClasses.get(i)).getName());
  }
  for (Iterator iterator=compilationUnit.iterator(); iterator.hasNext(); ) {
    SourceUnit sourceUnit=(SourceUnit)iterator.next();
    String fileName=sourceUnit.getName();
    final ModuleNode ast=sourceUnit.getAST();
    final List topLevelClasses=ast.getClasses();
    for (int i=0; i < topLevelClasses.size(); i++) {
      final ClassNode classNode=(ClassNode)topLevelClasses.get(i);
      final String topLevel=classNode.getName();
      if (forStubs) {
        final String stubPath=outputPath + "/" + topLevel.replace('.','/')+ ".java";
        if (new File(stubPath).exists()) {
          compiledFiles.add(new OutputItemImpl(outputPath,stubPath,fileName));
        }
 else {
          collector.add(new CompilerMessage(CompilerMessage.WARNING,"Couldn't generate stub for " + topLevel,fileName,classNode.getLineNumber(),classNode.getColumnNumber()));
        }
      }
 else {
        final String nested=topLevel + "$";
        final SortedSet tail=allClasses.tailSet(topLevel);
        for (Iterator tailIter=tail.iterator(); tailIter.hasNext(); ) {
          String className=(String)tailIter.next();
          if (className.equals(topLevel) || className.startsWith(nested)) {
            tailIter.remove();
            compiledFiles.add(new OutputItemImpl(outputPath,outputPath + "/" + className.replace('.','/')+ ".class",fileName));
          }
 else {
            break;
          }
        }
      }
    }
  }
}
