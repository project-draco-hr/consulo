{
  File targetDirectory=compilationUnit.getConfiguration().getTargetDirectory();
  final String outputPath=targetDirectory.getCanonicalPath().replace(File.separatorChar,'/');
  if (forStubs) {
    compilationUnit.applyToPrimaryClassNodes(new CompilationUnit.PrimaryClassNodeOperation(){
      public void call(      SourceUnit source,      GeneratorContext context,      ClassNode classNode) throws CompilationFailedException {
        final String topLevel=classNode.getName();
        final String stubPath=outputPath + "/" + topLevel.replace('.','/')+ ".java";
        String fileName=source.getName();
        if (fileName.startsWith("file:")) {
          try {
            fileName=new URL(fileName).getFile();
          }
 catch (          MalformedURLException ignored) {
          }
        }
        if (new File(stubPath).exists()) {
          compiledFiles.add(new OutputItem(stubPath,fileName));
        }
      }
    }
);
    return;
  }
  final SortedSet<String> allClasses=new TreeSet<String>();
  List<GroovyClass> listOfClasses=compilationUnit.getClasses();
  for (  GroovyClass listOfClass : listOfClasses) {
    allClasses.add(listOfClass.getName());
  }
  for (Iterator iterator=compilationUnit.iterator(); iterator.hasNext(); ) {
    SourceUnit sourceUnit=(SourceUnit)iterator.next();
    String fileName=sourceUnit.getName();
    final ModuleNode ast=sourceUnit.getAST();
    final List<ClassNode> topLevelClasses=ast.getClasses();
    for (    ClassNode classNode : topLevelClasses) {
      final String topLevel=classNode.getName();
      final String nested=topLevel + "$";
      final SortedSet<String> tail=allClasses.tailSet(topLevel);
      for (Iterator<String> tailItr=tail.iterator(); tailItr.hasNext(); ) {
        String className=tailItr.next();
        if (className.equals(topLevel) || className.startsWith(nested)) {
          tailItr.remove();
          compiledFiles.add(new OutputItem(outputPath + "/" + className.replace('.','/')+ ".class",fileName));
        }
 else {
          break;
        }
      }
    }
  }
}
