{
  final IntrospectionHelper helper=getHelperExceptionSafe(typeClass);
  if (helper == null)   return null;
  try {
    final HashMap<String,AntAttributeType> attributes=new HashMap<String,AntAttributeType>();
    final Enumeration attrEnum=helper.getAttributes();
    while (attrEnum.hasMoreElements()) {
      final String attr=AntStringInterner.intern((String)attrEnum.nextElement());
      final Class attrClass=helper.getAttributeType(attr);
      if (int.class.equals(attrClass)) {
        attributes.put(attr,AntAttributeType.INTEGER);
      }
 else       if (boolean.class.equals(attrClass)) {
        attributes.put(attr,AntAttributeType.BOOLEAN);
      }
 else {
        attributes.put(attr.toLowerCase(Locale.US),AntAttributeType.STRING);
      }
    }
    final HashMap<AntTypeId,String> nestedDefinitions=new HashMap<AntTypeId,String>();
    final Enumeration nestedEnum=helper.getNestedElements();
    while (nestedEnum.hasMoreElements()) {
      final String nestedElement=AntStringInterner.intern((String)nestedEnum.nextElement());
      final String className=((Class)helper.getNestedElementMap().get(nestedElement)).getName();
      nestedDefinitions.put(new AntTypeId(nestedElement),className);
    }
    return new AntTypeDefinitionImpl(id,AntStringInterner.intern(typeClass.getName()),isTask,attributes,nestedDefinitions);
  }
  finally {
    helper.buildFinished(null);
  }
}
