{
  final AntIntrospector helper=getHelperExceptionSafe(typeClass);
  if (helper == null) {
    return null;
  }
  final HashMap<String,AntAttributeType> attributes=new HashMap<String,AntAttributeType>();
  final Enumeration attrEnum=helper.getAttributes();
  while (attrEnum.hasMoreElements()) {
    final String attr=AntStringInterner.intern(((String)attrEnum.nextElement()).toLowerCase(Locale.US));
    attributes.put(attr,AntAttributeType.create(helper.getAttributeType(attr)));
  }
  final HashMap<AntTypeId,String> nestedDefinitions=new HashMap<AntTypeId,String>();
  final Enumeration nestedEnum=helper.getNestedElements();
  while (nestedEnum.hasMoreElements()) {
    final String nestedElement=(String)nestedEnum.nextElement();
    final Class elementType=helper.getElementType(nestedElement);
    if (elementType != null) {
      final String className=AntStringInterner.intern((elementType.getName()));
      nestedDefinitions.put(new AntTypeId(nestedElement),className);
    }
  }
  boolean isAllTasksContainer=false;
  final ClassLoader loader=typeClass.getClassLoader();
  try {
    final Class<?> containerClass=loader != null ? loader.loadClass(TaskContainer.class.getName()) : TaskContainer.class;
    isAllTasksContainer=containerClass.isAssignableFrom(typeClass);
  }
 catch (  ClassNotFoundException ignored) {
  }
  return new AntTypeDefinitionImpl(id,typeClass.getName(),isTask,isAllTasksContainer,attributes,nestedDefinitions,helper.getExtensionPointTypes(),null);
}
