{
  final Enumeration props=(properties != null) ? properties.keys() : (new Hashtable()).keys();
  final @NonNls StringBuilder builder=StringBuilderSpinAllocator.alloc();
  builder.append("<project name=\"predefined properties\">");
  try {
    while (props.hasMoreElements()) {
      final String name=(String)props.nextElement();
      final String value=(String)properties.get(name);
      builder.append("<property name=\"");
      builder.append(name);
      builder.append("\" value=\"");
      builder.append(value);
      builder.append("\"/>");
    }
    final Map<String,String> envMap=System.getenv();
    for (    final String name : envMap.keySet()) {
      final String value=envMap.get(name);
      if (name.length() > 0) {
        builder.append("<property name=\"");
        builder.append(DEFAULT_ENVIRONMENT_PREFIX);
        builder.append(name);
        builder.append("\" value=\"");
        builder.append(value);
        builder.append("\"/>");
      }
    }
    if (externalProps != null) {
      for (      final String name : externalProps.keySet()) {
        final String value=externalProps.get(name);
        builder.append("<property name=\"");
        builder.append(name);
        builder.append("\" value=\"");
        builder.append(value);
        builder.append("\"/>");
      }
    }
    final VirtualFile file=getVirtualFile();
    final AntProject antProject=getAntProject();
    String basedir=antProject.getBaseDir();
    if (basedir == null) {
      basedir=".";
    }
    if (file != null && !new File(basedir).isAbsolute()) {
      final VirtualFile dir=file.getParent();
      if (dir != null) {
        try {
          basedir=new File(dir.getPath(),basedir).getCanonicalPath();
        }
 catch (        IOException e) {
        }
      }
    }
    if (basedir != null) {
      builder.append("<property name=\"basedir\" value=\"");
      builder.append(basedir);
      builder.append("\"/>");
    }
    final AntInstallation installation=getAntInstallation();
    builder.append("<property name=\"ant.home\" value=\"");
    final String homeDir=installation.getHomeDir();
    if (homeDir != null) {
      builder.append(homeDir.replace(File.separatorChar,'/'));
    }
    builder.append("\"/>");
    builder.append("<property name=\"ant.version\" value=\"");
    builder.append(installation.getVersion());
    builder.append("\"/>");
    builder.append("<property name=\"ant.project.name\" value=\"");
    final String name=antProject.getName();
    builder.append((name == null) ? "" : name);
    builder.append("\"/>");
    builder.append("<property name=\"ant.java.version\" value=\"");
    final Sdk jdkToRunWith=getTargetJdk();
    final String version=jdkToRunWith != null ? jdkToRunWith.getVersionString() : null;
    builder.append(version != null ? version : SystemInfo.JAVA_VERSION);
    builder.append("\"/>");
    if (file != null) {
      final String path=file.getPath();
      builder.append("<property name=\"ant.file\" value=\"");
      builder.append(path);
      builder.append("\"/>");
      if (name != null) {
        builder.append("<property name=\"ant.file.");
        builder.append(name);
        builder.append("\" value=\"${ant.file}\"/>");
      }
    }
    builder.append("</project>");
    final XmlFile xmlFile=(XmlFile)PsiFileFactory.getInstance(getProject()).createFileFromText("dummy.xml",StdFileTypes.XML,builder,LocalTimeCounter.currentTime(),false,false);
    final XmlDocument document=xmlFile.getDocument();
    if (document == null)     return;
    final XmlTag rootTag=document.getRootTag();
    if (rootTag == null)     return;
    final AntTypeDefinition propertyDef=getAntFile().getBaseTypeDefinition(Property.class.getName());
    AntProject fakeProject=new AntProjectImpl(this,rootTag,antProject.getTypeDefinition());
    for (    final XmlTag tag : rootTag.getSubTags()) {
      final AntPropertyImpl property=new AntPropertyImpl(fakeProject,tag,propertyDef){
        public PsiFile getContainingFile(){
          return getSourceElement().getContainingFile();
        }
        public PsiElement getNavigationElement(){
          if (AntFileImpl.BASEDIR_ATTR.equals(getName())) {
            final XmlAttribute attr=antProject.getSourceElement().getAttribute(AntFileImpl.BASEDIR_ATTR,null);
            if (attr != null) {
              return attr;
            }
          }
          return super.getNavigationElement();
        }
      }
;
      myProperties.put(property.getName(),property);
    }
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
