{
  super(XDebuggerBundle.message("xdebugger.dialog.title.evaluate.expression"));
  myMainPanel=new JPanel(new BorderLayout());
  myExpressionEditor=new XDebuggerExpressionEditor(project,editorsProvider,"evaluateExpression",sourcePosition,expression != null ? expression : XExpressionImpl.EMPTY_EXPRESSION,false,true,false);
  myMainPanel.add(myExpressionEditor.getComponent(),BorderLayout.CENTER);
  JButton historyButton=new FixedSizeButton(myExpressionEditor.getComponent());
  historyButton.setIcon(AllIcons.General.MessageHistory);
  historyButton.setToolTipText(XDebuggerBundle.message("xdebugger.evaluate.history.hint"));
  historyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showHistory();
    }
  }
);
  myMainPanel.add(historyButton,BorderLayout.EAST);
  final JBLabel help=new JBLabel(XDebuggerBundle.message("xdebugger.evaluate.addtowatches.hint",KeymapUtil.getKeystrokeText(XDebuggerEvaluationDialog.ADD_WATCH_KEYSTROKE)),SwingConstants.RIGHT);
  help.setBorder(JBUI.Borders.empty(2,0,6,0));
  help.setComponentStyle(UIUtil.ComponentStyle.SMALL);
  help.setFontColor(UIUtil.FontColor.BRIGHTER);
  myMainPanel.add(help,BorderLayout.SOUTH);
  if (expression != null) {
    myExpressionEditor.setExpression(expression);
  }
  myExpressionEditor.selectAll();
  new AnAction("XEvaluateDialog.ShowHistory"){
    @Override public void actionPerformed(    AnActionEvent e){
      showHistory();
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(LookupManager.getActiveLookup(myExpressionEditor.getEditor()) == null);
    }
  }
.registerCustomShortcutSet(CustomShortcutSet.fromString("DOWN"),myMainPanel,parentDisposable);
}
