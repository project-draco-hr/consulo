{
  final Language language=getBaseLanguage();
  final List<Pair<OuterLanguageElement,Pair<StringBuffer,StringBuffer>>> javaFragments=new ArrayList<Pair<OuterLanguageElement,Pair<StringBuffer,StringBuffer>>>();
  try {
    StringBuffer currentBuffer=null;
    StringBuffer currentDecodedBuffer=null;
    LeafElement element=TreeUtil.findFirstLeaf(psiFile.getNode());
    if (element == null)     return;
    do {
      if (element instanceof OuterLanguageElement) {
        javaFragments.add(Pair.create((OuterLanguageElement)element,Pair.create(currentBuffer=new StringBuffer(),currentDecodedBuffer=new StringBuffer())));
      }
 else {
        final String text=element.getText();
        final String decoded=language != StdLanguages.JSP ? XmlUtil.decode(text) : text;
        currentDecodedBuffer.append(decoded);
        currentBuffer.append(text);
      }
    }
 while ((element=ParseUtil.nextLeaf(element,null)) != null);
    for (    final Pair<OuterLanguageElement,Pair<StringBuffer,StringBuffer>> pair : javaFragments) {
      final XmlText followingText=pair.getFirst().getFollowingText();
      final String buffer=pair.getSecond().getFirst().toString();
      if (followingText != null && followingText.isValid() && !followingText.getText().equals(buffer)) {
        followingText.setValue(pair.getSecond().getSecond().toString());
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
