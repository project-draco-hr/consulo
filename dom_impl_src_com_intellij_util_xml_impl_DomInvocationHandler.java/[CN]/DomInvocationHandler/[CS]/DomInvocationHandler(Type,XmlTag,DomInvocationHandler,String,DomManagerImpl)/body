{
  myManager=manager;
  myParent=parent;
  myTagName=tagName;
  myAbstractType=type;
  final Type concreteInterface=ClassChooserManager.getClassChooser(type).chooseType(tag);
  final Converter converter=getConverter(new Function<Class<? extends Annotation>,Annotation>(){
    @Nullable public Annotation fun(    final Class<? extends Annotation> s){
      return getAnnotation(s);
    }
  }
,DomUtil.getGenericValueParameter(concreteInterface),Factory.NULL_FACTORY);
  myGenericInfo=manager.getGenericInfo(concreteInterface);
  myType=concreteInterface;
  myGenericConverter=converter;
  myInvocationCache=manager.getInvocationCache(new Pair<Type,Type>(concreteInterface,converter == null ? null : converter.getClass()));
  final Class<?> rawType=DomReflectionUtil.getRawType(concreteInterface);
  myProxy=AdvancedProxy.createProxy(this,manager.getImplementation(rawType),rawType);
  attach(tag);
}
