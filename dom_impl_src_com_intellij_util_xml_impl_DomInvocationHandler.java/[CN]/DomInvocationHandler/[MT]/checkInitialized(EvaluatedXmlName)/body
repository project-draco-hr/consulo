{
  if (!isValid()) {
    throw new RuntimeException("element " + myType.toString() + " is not valid",myInvalidated);
  }
  r.lock();
  checkParentInitialized();
  try {
    if (myInitializedChildren.contains(qname)) {
      return;
    }
  }
  finally {
    r.unlock();
  }
  w.lock();
  if (myInitializedChildren.contains(qname)) {
    w.unlock();
    return;
  }
  try {
    myGenericInfo.buildMethodMaps();
    if (ATTRIBUTES == qname) {
      for (      Map.Entry<JavaMethodSignature,XmlName> entry : myGenericInfo.getAttributeChildrenEntries()) {
        getOrCreateAttributeChild(entry.getKey().findMethod(getRawType()),entry.getValue().createEvaluatedXmlName(this));
      }
    }
    final XmlTag tag=getXmlTag();
    if (myGenericInfo.isFixedChild(qname.getXmlName())) {
      final int count=myGenericInfo.getFixedChildrenCount(qname.getXmlName());
      for (int i=0; i < count; i++) {
        getOrCreateIndexedChild(findSubTag(tag,qname,i),Pair.create(qname,i));
      }
    }
 else     if (tag != null && myGenericInfo.isCollectionChild(qname.getXmlName())) {
      for (      XmlTag subTag : DomImplUtil.findSubTags(tag,qname,this)) {
        new CollectionElementInvocationHandler(myGenericInfo.getCollectionChildrenType(qname.getXmlName()),qname,subTag,this);
      }
    }
  }
  finally {
    myInitializedChildren.add(qname);
    w.unlock();
  }
}
