{
  if (!isValid()) {
    throw new RuntimeException("element " + myType.toString() + " is not valid",myInvalidated);
  }
  checkParentInitialized();
synchronized (PsiLock.LOCK) {
    if (myInitializedChildren.contains(qname)) {
      return;
    }
    try {
      myGenericInfo.buildMethodMaps();
      if (ATTRIBUTES.equals(qname)) {
        for (        Map.Entry<JavaMethodSignature,XmlName> entry : myGenericInfo.getAttributeChildrenEntries()) {
          getOrCreateAttributeChild(entry.getKey().findMethod(getRawType()),entry.getValue().createEvaluatedXmlName(this));
        }
      }
      final XmlTag tag=getXmlTag();
      if (myGenericInfo.isFixedChild(qname.getXmlName())) {
        final int count=myGenericInfo.getFixedChildrenCount(qname.getXmlName());
        for (int i=0; i < count; i++) {
          getOrCreateIndexedChild(findSubTag(tag,qname,i),Pair.create(qname,i));
        }
      }
 else       if (tag != null && myGenericInfo.isCollectionChild(qname.getXmlName())) {
        for (        XmlTag subTag : DomImplUtil.findSubTags(tag,qname,this)) {
          new CollectionElementInvocationHandler(myGenericInfo.getCollectionChildrenType(qname.getXmlName()),qname,subTag,this);
        }
      }
    }
  finally {
      myInitializedChildren.add(qname);
    }
  }
}
