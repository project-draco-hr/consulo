{
  if (myInitializedChildren.contains(description))   return;
  if (!isValid()) {
    throw new RuntimeException("element " + myType.toString() + " is not valid",myInvalidated);
  }
  r.unlock();
  w.lock();
  try {
    if (myInitializedChildren.contains(description))     return;
    if (description instanceof AttributeChildDescriptionImpl) {
      final AttributeChildDescriptionImpl attributeChildDescription=(AttributeChildDescriptionImpl)description;
      final EvaluatedXmlName evaluatedXmlName=createEvaluatedXmlName(attributeChildDescription.getXmlName());
      myAttributeChildren.put(attributeChildDescription,new AttributeChildInvocationHandler(description.getType(),myXmlTag,this,evaluatedXmlName,attributeChildDescription,myManager));
    }
 else     if (description instanceof FixedChildDescriptionImpl) {
      final FixedChildDescriptionImpl fixedChildDescription=(FixedChildDescriptionImpl)description;
      final EvaluatedXmlName evaluatedXmlName=createEvaluatedXmlName(fixedChildDescription.getXmlName());
      final int count=fixedChildDescription.getCount();
      for (int i=0; i < count; i++) {
        getOrCreateIndexedChild(findSubTag(myXmlTag,evaluatedXmlName,i),evaluatedXmlName,Pair.create(fixedChildDescription,i));
      }
    }
 else     if (myXmlTag != null && description instanceof AbstractCollectionChildDescription) {
      final AbstractCollectionChildDescription childDescription=(AbstractCollectionChildDescription)description;
      for (      XmlTag subTag : childDescription.getSubTags(this)) {
        new CollectionElementInvocationHandler(description.getType(),subTag,childDescription,this);
      }
    }
    myInitializedChildren.add(description);
  }
  finally {
    r.lock();
    w.unlock();
  }
}
