{
  final PsiElement psiElement=descriptor.getPsiElement();
  final PsiFile psiFile=psiElement.getContainingFile();
  new WriteCommandAction(project,psiFile){
    protected void run(    final Result result) throws Throwable {
      final XmlTag tag=PsiTreeUtil.getParentOfType(psiElement,XmlTag.class);
      if (tag == null)       return;
      final Language language=psiFile.getViewProvider().getBaseLanguage();
      final Commenter commenter=LanguageCommenters.INSTANCE.forLanguage(language);
      if (commenter == null)       return;
      final PsiFile tempFile=PsiFileFactory.getInstance(project).createFileFromText("dummy",language.getAssociatedFileType(),commenter.getBlockCommentPrefix() + "@declare id=\"" + myId+ "\""+ commenter.getBlockCommentSuffix()+ "\n");
      final XmlTag parent=tag.getParentTag();
      if (parent != null && parent.isValid()) {
        final XmlTag[] tags=parent.getSubTags();
        if (tags.length > 0) {
          final PsiElement[] _comment=new PsiElement[]{null};
          final PsiFile psi=tempFile.getViewProvider().getPsi(language);
          if (psi != null) {
            psi.accept(new XmlRecursiveElementVisitor(false){
              @Override public void visitXmlComment(              final XmlComment comment){
                _comment[0]=comment;
                super.visitXmlComment(comment);
              }
            }
);
            if (_comment[0] != null) {
              parent.addBefore(_comment[0],tags[0]);
            }
          }
        }
      }
    }
  }
.execute();
}
