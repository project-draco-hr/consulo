{
  XmlElementDescriptor elementDescriptor=null;
  String elementNamespace=null;
  final Map<String,XmlElementDescriptor> descriptorsMap=new HashMap<String,XmlElementDescriptor>();
  PsiElement context=element.getParent();
  PsiElement curElement=element.getParent();
{
    while (curElement instanceof XmlTag) {
      final XmlTag declarationTag=(XmlTag)curElement;
      final String namespace=declarationTag.getNamespace();
      if (!descriptorsMap.containsKey(namespace)) {
        final XmlElementDescriptor descriptor=declarationTag.getDescriptor();
        if (descriptor != null) {
          descriptorsMap.put(namespace,descriptor);
          if (elementDescriptor == null) {
            elementDescriptor=descriptor;
            elementNamespace=namespace;
          }
        }
      }
      curElement=curElement.getContext();
    }
  }
  final Set<XmlNSDescriptor> visited=new HashSet<XmlNSDescriptor>();
  final XmlExtension extension=XmlExtension.getExtension(element.getContainingFile());
  final ArrayList<XmlElementDescriptor> variants=new ArrayList<XmlElementDescriptor>();
  for (  final String namespace : namespaces) {
    final int initialSize=variants.size();
    processVariantsInNamespace(namespace,element,variants,elementDescriptor,elementNamespace,descriptorsMap,visited,context instanceof XmlTag ? (XmlTag)context : element,extension);
    if (nsInfo != null) {
      for (int i=initialSize; i < variants.size(); i++) {
        nsInfo.add(namespace);
      }
    }
  }
  List<String> l=ContainerUtil.mapNotNull(variants,new NullableFunction<XmlElementDescriptor,String>(){
    public String fun(    XmlElementDescriptor descriptor){
      return descriptor instanceof AnyXmlElementDescriptor ? null : descriptor.getName(element);
    }
  }
);
  return ArrayUtil.toStringArray(l);
}
