{
  final PsiElement element=getElement();
  if (element instanceof JspDirective)   return EMPTY_ARRAY;
  if (!myStartTagFlag) {
    XmlTag fromJspTree=null;
    final PsiFile containingFile=element.getContainingFile();
    if (containingFile.getViewProvider().getBaseLanguage() == StdLanguages.JSP) {
      final JspFile jspFile=PsiUtil.getJspFile(containingFile);
      final int startOffset=element.getTextRange().getStartOffset() + getRangeInElement().getStartOffset();
      PsiElement current=jspFile.getDocument().findElementAt(startOffset);
      if (current != element && (current=PsiTreeUtil.getParentOfType(current,XmlText.class)) != null) {
        fromJspTree=((XmlText)current).getParentTag();
        if (XmlChildRole.EMPTY_TAG_END_FINDER.findChild(fromJspTree.getNode()) != null || XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(fromJspTree.getNode()) != null || fromJspTree instanceof JspXmlRootTag)         fromJspTree=null;
        while ((current=current.getPrevSibling()) != null) {
          if (current instanceof XmlTag) {
            final XmlTag xmlTag=(XmlTag)current;
            if (XmlChildRole.EMPTY_TAG_END_FINDER.findChild(xmlTag.getNode()) == null && XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(xmlTag.getNode()) == null) {
              fromJspTree=xmlTag;
              break;
            }
          }
        }
      }
    }
    final boolean jspTreeSuggestionIsNotValid=fromJspTree == null || fromJspTree.getName().length() == 0;
    if (element instanceof XmlTag) {
      final XmlTag tag=(XmlTag)element;
      if (jspTreeSuggestionIsNotValid)       return new Object[]{tag.getName()};
      return new Object[]{tag.getName(),fromJspTree.getName()};
    }
 else {
      return jspTreeSuggestionIsNotValid ? EMPTY_ARRAY : new Object[]{fromJspTree.getName()};
    }
  }
  return getTagNameVariants((XmlTag)element);
}
