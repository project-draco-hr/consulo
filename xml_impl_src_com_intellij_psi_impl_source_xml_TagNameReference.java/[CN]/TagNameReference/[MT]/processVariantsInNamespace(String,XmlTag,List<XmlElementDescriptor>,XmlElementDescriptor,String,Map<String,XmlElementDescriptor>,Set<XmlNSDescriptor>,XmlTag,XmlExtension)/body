{
  if (descriptorsMap.containsKey(namespace)) {
    final XmlElementDescriptor descriptor=descriptorsMap.get(namespace);
    if (isAcceptableNs(element,elementDescriptor,elementNamespace,namespace)) {
      for (      XmlElementDescriptor containedDescriptor : descriptor.getElementsDescriptors(parent)) {
        if (containedDescriptor != null)         variants.add(containedDescriptor);
      }
    }
    if (element instanceof HtmlTag) {
      HtmlUtil.addHtmlSpecificCompletions(descriptor,element,variants);
    }
    visited.add(descriptor.getNSDescriptor());
  }
 else {
    if (namespace == null)     return;
    if (namespace.length() == 0 && !visited.isEmpty())     return;
    XmlNSDescriptor nsDescriptor=getDescriptor(element,namespace,true,extension);
    if (nsDescriptor == null) {
      if (!descriptorsMap.isEmpty())       return;
      nsDescriptor=getDescriptor(element,namespace,false,extension);
    }
    if (nsDescriptor != null && !visited.contains(nsDescriptor) && isAcceptableNs(element,elementDescriptor,elementNamespace,namespace)) {
      visited.add(nsDescriptor);
      final XmlElementDescriptor[] rootElementsDescriptors=nsDescriptor.getRootElementsDescriptors(PsiTreeUtil.getParentOfType(element,XmlDocument.class));
      XmlTag parentTag=extension.getParentTagForNamespace(element,namespace);
      XmlElementDescriptor parentDescriptor=elementDescriptor;
      if (parentTag != element.getParentTag()) {
        parentDescriptor=parentTag.getDescriptor();
      }
      for (      XmlElementDescriptor containedDescriptor : rootElementsDescriptors) {
        if (containedDescriptor != null && couldContainDescriptor(parentTag,parentDescriptor,containedDescriptor,namespace)) {
          variants.add(containedDescriptor);
        }
      }
    }
  }
}
