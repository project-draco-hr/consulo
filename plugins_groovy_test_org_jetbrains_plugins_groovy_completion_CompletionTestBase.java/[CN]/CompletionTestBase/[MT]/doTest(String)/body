{
  final List<String> stringList=TestUtils.readInput(getTestDataPath() + "/" + getTestName(true)+ ".test");
  if (directory.length() != 0)   directory+="/";
  final String fileName=directory + getTestName(true) + "."+ getExtension();
  myFixture.addFileToProject(fileName,stringList.get(0));
  myFixture.configureByFile(fileName);
  boolean old=CodeInsightSettings.getInstance().AUTOCOMPLETE_COMMON_PREFIX;
  CodeInsightSettings.getInstance().AUTOCOMPLETE_COMMON_PREFIX=false;
  CodeInsightSettings.getInstance().AUTOCOMPLETE_ON_CODE_COMPLETION=false;
  String result="";
  try {
    myFixture.completeBasic();
    final LookupImpl lookup=(LookupImpl)LookupManager.getActiveLookup(myFixture.getEditor());
    if (lookup != null) {
      List<LookupElement> items=lookup.getItems();
      if (!addReferenceVariants()) {
        items=ContainerUtil.findAll(items,new Condition<LookupElement>(){
          @Override public boolean value(          LookupElement lookupElement){
            final Object o=lookupElement.getObject();
            return !(o instanceof PsiMember) && !(o instanceof GrVariable) && !(o instanceof GroovyResolveResult);
          }
        }
);
      }
      Collections.sort(items,new Comparator<LookupElement>(){
        @Override public int compare(        LookupElement o1,        LookupElement o2){
          return o1.getLookupString().compareTo(o2.getLookupString());
        }
      }
);
      result="";
      for (      LookupElement item : items) {
        result=result + "\n" + item.getLookupString();
      }
      result=result.trim();
      LookupManager.getInstance(myFixture.getProject()).hideActiveLookup();
    }
  }
  finally {
    CodeInsightSettings.getInstance().AUTOCOMPLETE_ON_CODE_COMPLETION=true;
    CodeInsightSettings.getInstance().AUTOCOMPLETE_COMMON_PREFIX=old;
  }
  assertEquals(StringUtil.trimEnd(stringList.get(1),"\n"),result);
}
