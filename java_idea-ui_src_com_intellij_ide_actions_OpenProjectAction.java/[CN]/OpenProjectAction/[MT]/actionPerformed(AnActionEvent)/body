{
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  final FileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true);
  descriptor.setTitle(IdeBundle.message("title.open.project"));
  final Set<String> extensions=new HashSet<String>();
  extensions.add(ProjectFileType.DOT_DEFAULT_EXTENSION);
  final ProjectOpenProcessor[] openProcessors=Extensions.getExtensions(ProjectOpenProcessor.EXTENSION_POINT_NAME);
  for (  ProjectOpenProcessor openProcessor : openProcessors) {
    final String[] supportedExtensions=((ProjectOpenProcessorBase)openProcessor).getSupportedExtensions();
    if (supportedExtensions != null) {
      Collections.addAll(extensions,supportedExtensions);
    }
  }
  descriptor.setDescription(IdeBundle.message("filter.project.files",StringUtil.join(extensions,", ")));
  VirtualFile userHomeDir=null;
  if (SystemInfo.isMac || SystemInfo.isLinux) {
    final String home=System.getProperty("user.home");
    if (home != null) {
      userHomeDir=LocalFileSystem.getInstance().findFileByIoFile(new File(home));
    }
  }
  descriptor.putUserData(FileChooserDialogImpl.PREFER_LAST_OVER_TO_SELECT,Boolean.TRUE);
  FileChooser.chooseFilesWithSlideEffect(descriptor,project,userHomeDir,new Consumer<VirtualFile[]>(){
    @Override public void consume(    final VirtualFile[] files){
      if (files.length == 0 || files[0] == null)       return;
      ProjectUtil.openOrImport(files[0].getPath(),project,false);
    }
  }
);
}
