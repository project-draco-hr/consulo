{
  final FileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true);
  descriptor.setTitle(IdeBundle.message("title.open.project"));
  final Set<String> extensions=new LinkedHashSet<String>();
  extensions.add(ProjectFileType.DOT_DEFAULT_EXTENSION);
  final ProjectOpenProcessor[] openProcessors=Extensions.getExtensions(ProjectOpenProcessor.EXTENSION_POINT_NAME);
  for (  ProjectOpenProcessor openProcessor : openProcessors) {
    final String[] supportedExtensions=((ProjectOpenProcessorBase)openProcessor).getSupportedExtensions();
    if (supportedExtensions != null) {
      Collections.addAll(extensions,supportedExtensions);
    }
  }
  descriptor.setDescription(IdeBundle.message("filter.project.files",StringUtil.join(extensions,", ")));
  String userHomeDir=null;
  if (SystemInfo.isUnix) {
    userHomeDir=SystemProperties.getUserHome();
  }
  descriptor.putUserData(PathChooserDialog.PREFER_LAST_OVER_EXPLICIT,Boolean.TRUE);
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  FileChooser.choosePaths(descriptor,project,userHomeDir,new Consumer<List<String>>(){
    @Override public void consume(    final List<String> paths){
      if (paths.size() == 1) {
        ProjectUtil.openOrImport(paths.get(0),project,false);
      }
    }
  }
);
}
