{
  Application application=ApplicationManager.getApplication();
  application.assertWriteAccessAllowed();
  LibraryTable projectLibraryTable=ProjectLibraryTable.getInstance(intellijProject);
  if (projectLibraryTable == null) {
    GradleLog.LOG.warn("Can't resolve external dependencies of the target gradle project (" + intellijProject + "). Reason: project "+ "library table is undefined");
    return;
  }
  LibraryTable.ModifiableModel model=projectLibraryTable.getModifiableModel();
  List<ModifiableRootModel> modelsToCommit=new ArrayList<ModifiableRootModel>();
  try {
    Map<GradleLibrary,Library> libraryMappings=registerProjectLibraries(gradleProject,model);
    if (libraryMappings == null) {
      return;
    }
    modelsToCommit.addAll(configureModulesLibraryDependencies(moduleMappings,libraryMappings,gradleProject));
  }
  finally {
    model.commit();
    ProjectRootManager projectRootManager=ProjectRootManager.getInstance(intellijProject);
    ModifiableRootModel[] modelsAsArray=modelsToCommit.toArray(new ModifiableRootModel[modelsToCommit.size()]);
    projectRootManager.multiCommit(modelsAsArray);
  }
}
