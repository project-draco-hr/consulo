{
  final Ref<GradleProject> gradleProjectRef=new Ref<GradleProject>();
  final Ref<Library> libraryToPreserve=new Ref<Library>();
  final Runnable setupExternalDependenciesTask=new Runnable(){
    @Override public void run(){
      final GradleProject gradleProject=gradleProjectRef.get();
      if (gradleProject == null) {
        return;
      }
      Application application=ApplicationManager.getApplication();
      AccessToken writeLock=application.acquireWriteActionLock(getClass());
      try {
        doSetupLibraries(moduleMappings,gradleProject,intellijProject,libraryToPreserve.get());
      }
  finally {
        writeLock.finish();
      }
      final GradleSettings settings=GradleSettings.getInstance(intellijProject);
      final String gradleHome=settings.getGradleHome();
      if (gradleHome != null) {
        final GradleGroovyEnabler groovyEnabler=intellijProject.getComponent(GradleGroovyEnabler.class);
        libraryToPreserve.set(groovyEnabler.setupGroovySdkIfNecessary(gradleHome));
      }
      final GradleProjectStructureChangesModel changesModel=intellijProject.getComponent(GradleProjectStructureChangesModel.class);
      if (changesModel != null) {
        final GradleProject project=changesModel.getGradleProject();
        if (project != null) {
          changesModel.update(project);
        }
      }
    }
  }
;
  final Runnable resolveDependenciesTask=new Runnable(){
    @Override public void run(){
      ProgressManager.getInstance().run(new Task.Backgroundable(intellijProject,GradleBundle.message("gradle.library.resolve.progress.text"),false){
        @Override public void run(        @NotNull final ProgressIndicator indicator){
          GradleResolveProjectTask task=new GradleResolveProjectTask(intellijProject,gradleProjectPath,true);
          task.execute(indicator);
          GradleProject projectWithResolvedLibraries=task.getProject();
          gradleProjectRef.set(projectWithResolvedLibraries);
          ApplicationManager.getApplication().invokeLater(setupExternalDependenciesTask,ModalityState.NON_MODAL);
        }
      }
);
    }
  }
;
  UIUtil.invokeLaterIfNeeded(resolveDependenciesTask);
}
