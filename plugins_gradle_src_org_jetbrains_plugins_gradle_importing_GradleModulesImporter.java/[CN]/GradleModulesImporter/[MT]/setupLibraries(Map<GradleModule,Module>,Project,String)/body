{
  final Ref<GradleProject> gradleProjectRef=new Ref<GradleProject>();
  final Runnable setupExternalDependenciesTask=new Runnable(){
    @Override public void run(){
      final GradleProject gradleProject=gradleProjectRef.get();
      if (gradleProject == null) {
        return;
      }
      Application application=ApplicationManager.getApplication();
      AccessToken writeLock=application.acquireWriteActionLock(getClass());
      try {
        doSetupLibraries(moduleMappings,gradleProject,intellijProject);
      }
  finally {
        writeLock.finish();
      }
    }
  }
;
  Runnable resolveDependenciesTask=new Runnable(){
    @Override public void run(){
      ProgressManager.getInstance().run(new Task.Backgroundable(intellijProject,GradleBundle.message("gradle.library.resolve.progress.text"),false){
        @Override public void run(        @NotNull final ProgressIndicator indicator){
          GradleResolveProjectTask task=new GradleResolveProjectTask(intellijProject,gradleProjectPath,true);
          task.execute(indicator);
          GradleProject projectWithResolvedLibraries=task.getProject();
          gradleProjectRef.set(projectWithResolvedLibraries);
          ApplicationManager.getApplication().invokeLater(setupExternalDependenciesTask,ModalityState.NON_MODAL);
        }
      }
);
    }
  }
;
  UIUtil.invokeLaterIfNeeded(resolveDependenciesTask);
}
