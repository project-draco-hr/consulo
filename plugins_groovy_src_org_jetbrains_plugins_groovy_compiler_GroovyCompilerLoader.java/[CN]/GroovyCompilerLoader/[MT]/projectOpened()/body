{
  CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  compilerManager.addCompilableFileType(GroovyFileType.GROOVY_FILE_TYPE);
  compilerManager.addTranslatingCompiler(new GroovycStubGenerator(myProject),new HashSet<FileType>(Arrays.asList(StdFileTypes.JAVA,GroovyFileType.GROOVY_FILE_TYPE)),new HashSet<FileType>(Arrays.asList(StdFileTypes.JAVA)));
  compilerManager.addTranslatingCompiler(new GroovyCompiler(myProject),new HashSet<FileType>(Arrays.asList(GroovyFileType.GROOVY_FILE_TYPE,StdFileTypes.CLASS)),new HashSet<FileType>(Arrays.asList(StdFileTypes.CLASS)));
  myProject.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void fileOpened(    @NotNull FileEditorManager source,    @NotNull final VirtualFile file){
      if (file.getName().endsWith(".java") && file.getPath().contains(GroovycStubGenerator.GROOVY_STUBS)) {
        final PsiClass psiClass=GroovycStubGenerator.findClassByStub(myProject,file);
        if (psiClass != null) {
          final FileEditorManager fileEditorManager=FileEditorManager.getInstance(myProject);
          final FileEditor[] editors=fileEditorManager.getEditors(file);
          if (editors.length != 0) {
            decorateStubFile(file,fileEditorManager,editors[0]);
          }
        }
      }
    }
  }
);
}
