{
  if (DataConstants.PSI_ELEMENT.equals(dataId)) {
    final PsiElement[] elements=getSelectedPSIElements();
    return elements.length == 1 ? elements[0] : null;
  }
  if (DataConstants.PSI_ELEMENT_ARRAY.equals(dataId)) {
    return getSelectedPSIElements();
  }
  if (DataConstants.MODULE_CONTEXT.equals(dataId)) {
    final Object element=getSelectedElement();
    if (element instanceof Module) {
      return element;
    }
    return null;
  }
  if (DataConstants.MODULE_CONTEXT_ARRAY.equals(dataId)) {
    final List<Module> moduleList=ContainerUtil.findAll(getSelectedElements(),Module.class);
    if (!moduleList.isEmpty()) {
      return moduleList.toArray(new Module[moduleList.size()]);
    }
    return null;
  }
  if (dataId.equals(DataConstants.IDE_VIEW)) {
    return this;
  }
  if (dataId.equals(DataConstants.HELP_ID)) {
    return "reference.toolwindows." + myId.toLowerCase();
  }
  if (DataConstants.CUT_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (DataConstants.COPY_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (DataConstants.PASTE_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (DataConstants.DELETE_ELEMENT_PROVIDER.equals(dataId)) {
    for (    final Object element : getSelectedElements()) {
      if (element instanceof Module) {
        return myDeleteModuleProvider;
      }
    }
    return myDeletePSIElementProvider;
  }
  return super.getData(dataId);
}
