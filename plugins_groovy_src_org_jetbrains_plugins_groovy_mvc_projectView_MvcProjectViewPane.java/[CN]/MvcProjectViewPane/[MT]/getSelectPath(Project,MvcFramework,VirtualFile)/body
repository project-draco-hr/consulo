{
  if (file == null) {
    return null;
  }
  final Module module=ModuleUtil.findModuleForFile(file,project);
  if (module == null || !framework.hasSupport(module)) {
    return null;
  }
  List<Object> result=new ArrayList<Object>();
  final MvcProjectViewPane view=getView(project,framework);
  if (view == null) {
    return null;
  }
  final MvcProjectNode root=(MvcProjectNode)view.getTreeBuilder().getTreeStructure().getRootElement();
  result.add(root);
  for (  AbstractTreeNode moduleNode : root.getChildren()) {
    if (moduleNode.getValue() == module) {
      result.add(moduleNode);
      AbstractTreeNode<?> cur=moduleNode;
      path:       while (true) {
        for (        AbstractTreeNode descriptor : cur.getChildren()) {
          if (descriptor instanceof AbstractFolderNode) {
            final AbstractFolderNode folderNode=(AbstractFolderNode)descriptor;
            final VirtualFile dir=folderNode.getVirtualFile();
            if (dir != null && VfsUtil.isAncestor(dir,file,false)) {
              cur=folderNode;
              result.add(folderNode);
              if (dir.equals(file)) {
                return result;
              }
              continue path;
            }
          }
          if (descriptor instanceof AbstractMvcPsiNodeDescriptor) {
            if (file.equals(((AbstractMvcPsiNodeDescriptor)descriptor).getVirtualFile())) {
              result.add(descriptor);
              return result;
            }
          }
        }
        return null;
      }
    }
  }
  return null;
}
