{
  super(project);
  myDescriptor=descriptor;
  myId=descriptor.getToolWindowId();
  myAutoScrollFromSourceHandler=new MyAutoScrollFromSourceHandler();
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    @Override protected boolean isAutoScrollMode(){
      return myAutoScrollToSource;
    }
    @Override protected void setAutoScrollMode(    boolean state){
      myAutoScrollToSource=state;
    }
  }
;
class TreeUpdater implements Runnable, PsiModificationTracker.Listener {
    private volatile boolean myInQueue;
    @Override public void run(){
      if (getTree() != null && getTreeBuilder() != null) {
        updateFromRoot(true);
      }
      myInQueue=false;
    }
    @Override public void modificationCountChanged(){
      if (!myInQueue) {
        myInQueue=true;
        ApplicationManager.getApplication().invokeLater(this);
      }
    }
  }
  project.getMessageBus().connect(this).subscribe(PsiModificationTracker.TOPIC,new TreeUpdater());
  myComponent=new JPanel(new BorderLayout());
  myComponent.add(createComponent(),BorderLayout.CENTER);
  myComponent.add(createToolbar(),BorderLayout.NORTH);
  DataManager.registerDataProvider(myComponent,this);
  myCopyPasteDelegator=new CopyPasteDelegator(project,myComponent){
    @NotNull @Override protected PsiElement[] getSelectedElements(){
      return MvcProjectViewPane.this.getSelectedPSIElements();
    }
  }
;
  myDeletePSIElementProvider=new DeleteHandler.DefaultDeleteProvider();
}
