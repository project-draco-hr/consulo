{
  if (!TYPE_MARKER.equals(type)) {
    if (processingInfoStorage != null) {
      processingInfoStorage.append(String.format("Stopping '%s' provider because given signature doesn't have expected type - can work with '%s' but got '%s'%n",getClass().getName(),TYPE_MARKER,type));
    }
    return null;
  }
  String elementMarker=tokenizer.nextToken();
  if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) {
    PsiElement result=null;
    for (PsiElement child=file.getFirstChild(); child != null; child=child.getNextSibling()) {
      if (child instanceof PsiWhiteSpace) {
        continue;
      }
      if (result == null) {
        result=child;
      }
 else {
        if (processingInfoStorage != null) {
          processingInfoStorage.append(String.format("Stopping '%s' provider because it has top level marker but more than one non white-space child: %s",getClass().getName(),Arrays.toString(file.getChildren())));
        }
        return null;
      }
    }
    if (processingInfoStorage != null) {
      processingInfoStorage.append(String.format("Finished processing of '%s' provider because all of its top-level children have been processed: %s",getClass().getName(),Arrays.toString(file.getChildren())));
    }
    return result;
  }
 else   if (DOC_COMMENT_MARKER.equals(elementMarker)) {
    PsiElement candidate=parent.getFirstChild();
    return candidate instanceof PsiComment ? candidate : null;
  }
 else   if (CODE_BLOCK_MARKER.equals(elementMarker)) {
    for (PsiElement child=parent.getFirstChild(); child != null; child=child.getNextSibling()) {
      PsiElement firstChild=child.getFirstChild();
      PsiElement lastChild=child.getLastChild();
      if (firstChild != null && lastChild != null && "{".equals(firstChild.getText()) && "}".equals(lastChild.getText())) {
        return child;
      }
    }
    return null;
  }
  try {
    int index=Integer.parseInt(tokenizer.nextToken());
    return restoreElementInternal(parent,elementMarker,index,PsiNamedElement.class);
  }
 catch (  NumberFormatException e) {
    return null;
  }
}
