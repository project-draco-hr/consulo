{
  final DataContext dataContext=env.getDataContext();
  final RunProfile profile=env.getRunProfile();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  final RunContentDescriptor reuseContent=ExecutionManager.getInstance(project).getContentManager().getReuseContent(executor,dataContext);
  final RunProfileState state=env.getState(executor);
  if (state == null) {
    return;
  }
  Runnable startRunnable=new Runnable(){
    public void run(){
      try {
        if (project.isDisposed())         return;
        final RunContentDescriptor descriptor=doExecute(project,executor,state,reuseContent,env);
        if (callback != null)         callback.processStarted(descriptor);
        if (descriptor != null) {
          if (LocalHistoryConfiguration.getInstance().ADD_LABEL_ON_RUNNING) {
            LocalHistory.putSystemLabel(project,executor.getId() + " " + profile.getName());
          }
          ExecutionManager.getInstance(project).getContentManager().showRunContent(executor,descriptor);
          final ProcessHandler processHandler=descriptor.getProcessHandler();
          if (processHandler != null)           processHandler.startNotify();
        }
      }
 catch (      ExecutionException e) {
        ProgramRunnerUtil.handleExecutionError(project,profile,e);
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    startRunnable.run();
  }
 else {
    ExecutionManager.getInstance(project).compileAndRun(startRunnable,profile,state);
  }
}
