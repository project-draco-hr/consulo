{
  super(new BorderLayout());
  val moduleRootModel=moduleEditor.getModifiableRootModelProxy();
  val model=new MutableCollectionComboBoxModel<String>(new ArrayList<String>(moduleRootModel.getLayers().keySet()),moduleRootModel.getCurrentLayerName());
  val comboBox=new ComboBox(model);
  comboBox.setEnabled(model.getSize() > 1);
  moduleEditor.addChangeListener(new ModuleEditor.ChangeListener(){
    @Override public void moduleStateChanged(    ModifiableRootModel moduleRootModel){
      model.update(new ArrayList<String>(moduleRootModel.getLayers().keySet()));
      model.setSelectedItem(moduleRootModel.getCurrentLayerName());
      model.update();
      comboBox.setEnabled(comboBox.getItemCount() > 1);
    }
  }
);
  comboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        moduleEditor.getModifiableRootModelProxy().setCurrentLayer((String)comboBox.getSelectedItem());
      }
    }
  }
);
  JPanel panel=new JPanel(new HorizontalLayout());
  panel.add(new ActionButton(new AddLayerAction(moduleEditor,false),presentation("Add",IconUtil.getAddIcon()),ACTION_PLACE,ActionToolbar.DEFAULT_MINIMUM_BUTTON_SIZE));
  panel.add(new ActionButton(new RemoveLayerAction(moduleEditor),presentation("Remove",IconUtil.getRemoveIcon()),ACTION_PLACE,ActionToolbar.DEFAULT_MINIMUM_BUTTON_SIZE));
  panel.add(new ActionButton(new AddLayerAction(moduleEditor,true),presentation("Copy",AllIcons.Actions.Copy),ACTION_PLACE,ActionToolbar.DEFAULT_MINIMUM_BUTTON_SIZE));
  JPanel newPanel=new JPanel(new BorderLayout());
  newPanel.add(comboBox,BorderLayout.CENTER);
  newPanel.add(panel,BorderLayout.EAST);
  add(newPanel,BorderLayout.NORTH);
}
