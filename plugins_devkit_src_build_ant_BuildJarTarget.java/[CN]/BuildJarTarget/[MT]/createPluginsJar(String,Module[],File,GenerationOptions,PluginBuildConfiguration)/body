{
  final Tag jarTag=new Jar(jarPathProperty,"preserve");
  for (  Module m : modules) {
    final String path=VfsUtil.urlToPath(CompilerModuleExtension.getInstance(m).getCompilerOutputUrl());
    final String relativePath=GenerationUtils.toRelativePath(path,moduleBaseDir,m,genOptions);
    jarTag.add(new ZipFileSet(relativePath,"",true));
  }
  final Module module=modules[0];
  final String pluginXmlPath=moduleBuildProperties.getPluginXmlPath();
  final String relativePluginXMLPath=GenerationUtils.toRelativePath(pluginXmlPath,moduleBaseDir,module,genOptions);
  jarTag.add(new ZipFileSet(relativePluginXMLPath,"META-INF/plugin.xml",false));
  final Manifest manifestTag=new Manifest();
  jarTag.add(manifestTag);
  final java.util.jar.Manifest manifest;
  try {
    manifest=PrepareToDeployAction.createOrFindManifest(moduleBuildProperties);
  }
 catch (  IOException e) {
    return jarTag;
  }
  manifestTag.applyAttributes(manifest);
  return jarTag;
}
