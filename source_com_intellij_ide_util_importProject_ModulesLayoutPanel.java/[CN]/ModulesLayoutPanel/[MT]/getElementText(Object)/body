{
  if (element instanceof ModuleDescriptor) {
    final ModuleDescriptor moduleDescriptor=(ModuleDescriptor)element;
    final StringBuilder builder=StringBuilderSpinAllocator.alloc();
    try {
      builder.append(moduleDescriptor.getName());
      final Set<File> contents=moduleDescriptor.getContentRoots();
      final int rootCount=contents.size();
      if (rootCount > 0) {
        builder.append(" (");
        builder.append(contents.iterator().next().getPath());
        if (rootCount > 1) {
          builder.append("...");
        }
        builder.append(")");
      }
      final Set<File> sourceRoots=moduleDescriptor.getSourceRoots();
      if (sourceRoots.size() > 0) {
        builder.append(" [");
        for (Iterator<File> it=sourceRoots.iterator(); it.hasNext(); ) {
          File root=it.next();
          builder.append(root.getName());
          if (it.hasNext()) {
            builder.append(",");
          }
        }
        builder.append("]");
      }
      return builder.toString();
    }
  finally {
      StringBuilderSpinAllocator.dispose(builder);
    }
  }
  if (element instanceof LibraryDescriptor) {
    final LibraryDescriptor libDescr=(LibraryDescriptor)element;
    final Collection<File> jars=libDescr.getJars();
    if (jars.size() == 1) {
      return getDisplayText(jars.iterator().next());
    }
    return libDescr.getName();
  }
  if (element instanceof File) {
    return getDisplayText(((File)element));
  }
  return "";
}
