{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(myPsiClass.getProject()).getElementFactory();
  final String methodName=PropertyUtil.suggestGetterName(myPropertyName,myType);
  final String typeName=myType.getCanonicalText();
  @NonNls final String text;
  boolean isInterface=myPsiClass.isInterface();
  if (createField) {
    final String fieldName=getFieldName();
    text="public " + typeName + " "+ methodName+ "() { return "+ fieldName+ "; }";
  }
 else {
    if (isInterface) {
      text=typeName + " " + methodName+ "();";
    }
 else {
      text="public " + typeName + " "+ methodName+ "() { return null; }";
    }
  }
  final PsiMethod method=elementFactory.createMethodFromText(text,null);
  final PsiMethod psiElement=(PsiMethod)myPsiClass.add(method);
  if (!createField && !isInterface) {
    CreateFromUsageUtils.setupMethodBody(psiElement);
  }
  return psiElement;
}
