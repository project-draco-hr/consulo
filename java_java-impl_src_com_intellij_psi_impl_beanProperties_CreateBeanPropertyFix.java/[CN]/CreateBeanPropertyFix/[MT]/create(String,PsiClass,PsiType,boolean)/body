{
  if (psiClass instanceof PsiCompiledElement)   return NO_FIXES;
  if (type == null) {
    final Project project=psiClass.getProject();
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiClass aClass=facade.findClass("java.lang.String",GlobalSearchScope.allScope(project));
    if (aClass == null) {
      return NO_FIXES;
    }
    type=facade.getElementFactory().createType(aClass);
  }
  if (psiClass.isInterface()) {
    return new CreateBeanPropertyFix[]{new CreateAccessorFix(propertyName,psiClass,type,createSetter)};
  }
  return new CreateBeanPropertyFix[]{new CreateBeanPropertyFix(propertyName,psiClass,type){
    @Override @NotNull public String getName(){
      return QuickFixBundle.message("create.readable.writable.property.with.field",myPropertyName);
    }
    @Override protected void doFix() throws IncorrectOperationException {
      createField();
      createSetter(true);
      createGetter(true);
    }
  }
,new CreateAccessorFix(propertyName,psiClass,type,createSetter),new CreateBeanPropertyFix(propertyName,psiClass,type){
    @Override protected void doFix() throws IncorrectOperationException {
      createField();
      if (createSetter) {
        createSetter(true);
      }
 else {
        createGetter(true);
      }
    }
    @Override @NotNull public String getName(){
      return QuickFixBundle.message(createSetter ? "create.writable.property.with.field" : "create.readable.property.with.field",myPropertyName);
    }
  }
};
}
