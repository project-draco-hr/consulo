{
  if (type == null) {
    final Project project=psiClass.getProject();
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiClass aClass=facade.findClass("java.lang.String",GlobalSearchScope.allScope(project));
    if (aClass == null) {
      return new CreateBeanPropertyFix[0];
    }
    type=facade.getElementFactory().createType(aClass);
  }
  if (psiClass.isInterface()) {
    return new CreateBeanPropertyFix[]{new CreateBeanPropertyFix(propertyName,psiClass,type){
      @Override protected void doFix() throws IncorrectOperationException {
        createSetter(false);
      }
      @NotNull public String getName(){
        return QuickFixBundle.message("create.writable.property",myPropertyName);
      }
    }
};
  }
  return new CreateBeanPropertyFix[]{new CreateBeanPropertyFix(propertyName,psiClass,type){
    @NotNull public String getName(){
      return QuickFixBundle.message("create.readable.writable.property.with.field",myPropertyName);
    }
    protected void doFix() throws IncorrectOperationException {
      createField();
      createSetter(true);
      createGetter(true);
    }
  }
,new CreateBeanPropertyFix(propertyName,psiClass,type){
    protected void doFix() throws IncorrectOperationException {
      if (createSetter) {
        createSetter(false);
      }
 else {
        createGetter(false);
      }
    }
    @NotNull public String getName(){
      return QuickFixBundle.message(createSetter ? "create.writable.property" : "create.readable.property",myPropertyName);
    }
  }
,new CreateBeanPropertyFix(propertyName,psiClass,type){
    protected void doFix() throws IncorrectOperationException {
      createField();
      if (createSetter) {
        createSetter(true);
      }
 else {
        createGetter(true);
      }
    }
    @NotNull public String getName(){
      return QuickFixBundle.message(createSetter ? "create.writable.property.with.field" : "create.readable.property.with.field",myPropertyName);
    }
  }
};
}
