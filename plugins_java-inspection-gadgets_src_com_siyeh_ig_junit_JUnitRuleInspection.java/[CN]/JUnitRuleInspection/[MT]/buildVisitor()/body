{
  return new BaseInspectionVisitor(){
    @Override public void visitField(    PsiField field){
      final boolean ruleAnnotated=REPORT_RULE_PROBLEMS && AnnotationUtil.isAnnotated(field,RULE_FQN,false);
      final boolean classRuleAnnotated=REPORT_CLASS_RULE_PROBLEMS && AnnotationUtil.isAnnotated(field,CLASS_RULE_FQN,false);
      if (ruleAnnotated || classRuleAnnotated) {
        String annotation=ruleAnnotated ? RULE_FQN : CLASS_RULE_FQN;
        String errorMessage=null;
        final boolean hasStatic=field.hasModifierProperty(PsiModifier.STATIC);
        final boolean hasPublic=field.hasModifierProperty(PsiModifier.PUBLIC);
        if (!hasPublic) {
          if (classRuleAnnotated) {
            if (!hasStatic) {
              errorMessage="public and static";
            }
 else {
              errorMessage="public";
            }
          }
 else {
            if (!hasStatic) {
              errorMessage="public";
            }
 else {
              errorMessage="public and non-static";
            }
          }
        }
 else {
          if (!hasStatic) {
            if (classRuleAnnotated) {
              errorMessage="static";
            }
          }
 else           if (ruleAnnotated) {
            errorMessage="non-static";
          }
        }
        if (errorMessage != null) {
          registerError(field.getNameIdentifier(),InspectionGadgetsBundle.message("junit.rule.problem.descriptor",annotation,errorMessage),"Make field " + errorMessage,annotation);
        }
        if (!InheritanceUtil.isInheritor(PsiUtil.resolveClassInClassTypeOnly(field.getType()),false,"org.junit.rules.TestRule")) {
          registerError(field.getNameIdentifier(),InspectionGadgetsBundle.message("junit.rule.type.problem.descriptor"));
        }
      }
    }
  }
;
}
