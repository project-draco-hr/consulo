{
  FeatureUsageTracker.getInstance().triggerFeatureUsed(ProductivityFeatureNames.CODEASSISTS_OVERRIDE_IMPLEMENT);
  final TreeMap<MethodSignature,CandidateInfo> result=new TreeMap<MethodSignature,CandidateInfo>(new OverrideImplementUtil.MethodSignatureComparator());
  final HashMap<MethodSignature,PsiMethod> abstracts=new HashMap<MethodSignature,PsiMethod>();
  final HashMap<MethodSignature,PsiMethod> finals=new HashMap<MethodSignature,PsiMethod>();
  final HashMap<MethodSignature,PsiMethod> concretes=new HashMap<MethodSignature,PsiMethod>();
  for (  PsiMethod method : aClass.getMethods()) {
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      abstracts.put(method.getHierarchicalMethodSignature(),method);
    }
  }
  OverrideImplementUtil.collectMethodsToImplement(null,abstracts,finals,concretes,result);
  return OverrideImplementUtil.showOverrideImplementChooser(editor,startElement,true,result.values(),Collections.<CandidateInfo>emptyList());
}
