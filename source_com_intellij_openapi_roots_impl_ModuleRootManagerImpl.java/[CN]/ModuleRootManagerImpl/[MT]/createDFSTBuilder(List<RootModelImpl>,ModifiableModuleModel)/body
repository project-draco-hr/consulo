{
  final Map<String,RootModelImpl> nameToModel=new HashMap<String,RootModelImpl>();
  for (int i=0; i < rootModels.size(); i++) {
    final RootModelImpl rootModel=rootModels.get(i);
    final String name=rootModel.getModule().getName();
    LOG.assertTrue(!nameToModel.containsKey(name));
    nameToModel.put(name,rootModel);
  }
  final Module[] modules=moduleModel.getModules();
  for (int i=0; i < modules.length; i++) {
    final Module module=modules[i];
    final String name=module.getName();
    if (!nameToModel.containsKey(name)) {
      final RootModelImpl rootModel=((ModuleRootManagerImpl)ModuleRootManager.getInstance(module)).myRootModel;
      nameToModel.put(name,rootModel);
    }
  }
  final Collection<RootModelImpl> allRootModels=nameToModel.values();
  DFSTBuilder<RootModelImpl> builder=new DFSTBuilder<RootModelImpl>(new GraphGenerator<RootModelImpl>(new CachingSemiGraph<RootModelImpl>(new GraphGenerator.SemiGraph<RootModelImpl>(){
    public Collection<RootModelImpl> getNodes(){
      return allRootModels;
    }
    public Iterator<RootModelImpl> getIn(    RootModelImpl rootModel){
      final ArrayList<String> names1=rootModel.processOrder(new RootPolicy<ArrayList<String>>(){
        public ArrayList<String> visitModuleOrderEntry(        ModuleOrderEntry moduleOrderEntry,        ArrayList<String> strings){
          final Module module=moduleOrderEntry.getModule();
          if (module != null) {
            strings.add(module.getName());
          }
 else {
            final Module moduleToBeRenamed=moduleModel.getModuleToBeRenamed(moduleOrderEntry.getModuleName());
            if (moduleToBeRenamed != null) {
              strings.add(moduleToBeRenamed.getName());
            }
          }
          return strings;
        }
      }
,new ArrayList<String>());
      final String[] names=names1.toArray(new String[names1.size()]);
      List<RootModelImpl> result=new ArrayList<RootModelImpl>();
      for (int i=0; i < names.length; i++) {
        String name=names[i];
        final RootModelImpl depRootModel=nameToModel.get(name);
        if (depRootModel != null) {
          result.add(depRootModel);
        }
      }
      return result.iterator();
    }
  }
)));
  return builder;
}
