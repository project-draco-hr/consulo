{
  if (initializer.hasModifierProperty(PsiModifier.STATIC))   return;
  final PsiClass containingClass=ClassUtils.getContainingClass(initializer);
  if (containingClass == null) {
    return;
  }
  final ExtensionsArea rootArea=Extensions.getRootArea();
  final ExtensionPoint<Condition<PsiMember>> extensionPoint=rootArea.getExtensionPoint("com.intellij.cantBeStatic");
  final Condition<PsiMember>[] addins=extensionPoint.getExtensions();
  for (  Condition<PsiMember> addin : addins) {
    if (addin.value(initializer)) {
      return;
    }
  }
  final PsiElement scope=containingClass.getScope();
  if (!(scope instanceof PsiJavaFile) && !containingClass.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  final MethodReferenceVisitor visitor=new MethodReferenceVisitor(initializer);
  initializer.accept(visitor);
  if (!visitor.areReferencesStaticallyAccessible()) {
    return;
  }
  registerClassInitializerError(initializer);
}
