{
  PsiType type=expression.getType();
  if (type == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.UNKNOWN_TYPE(expression.getText()));
  }
  expression.getOperand().accept(this);
  Evaluator operand=myResult;
  IElementType tokenType=expression.getOperationSign().getTokenType();
  IElementType opType=expression.getOperationSign().getTokenType();
  if (tokenType == JavaTokenType.PLUSPLUS || tokenType == JavaTokenType.MINUSMINUS) {
    boolean isPlus=tokenType == JavaTokenType.PLUSPLUS;
    try {
      PsiElementFactory elementFactory=expression.getManager().getElementFactory();
      PsiExpression one=elementFactory.createExpressionFromText("1",null);
      one.accept(this);
      BinaryExpressionEvaluator operationEvaluator=new BinaryExpressionEvaluator(operand,myResult,isPlus ? JavaTokenType.PLUS : JavaTokenType.MINUS,type.getCanonicalText());
      myResult=new AssignmentEvaluator(operand,operationEvaluator);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
 else {
    myResult=new UnaryExpressionEvaluator(opType,expression.getType().getCanonicalText(),operand);
  }
}
