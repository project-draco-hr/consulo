{
  PsiExpression rExpression=expression.getRExpression();
  if (rExpression == null)   throw new EvaluateRuntimeException(EvaluateExceptionUtil.INVALID_EXPRESSION(expression.getText()));
  rExpression.accept(this);
  Evaluator rEvaluator=myResult;
  if (expression.getOperationSign().getTokenType() != JavaTokenType.EQ) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException("Operation " + expression.getOperationSign().getText() + "= is not supported."));
  }
  PsiExpression lExpression=expression.getLExpression();
  if (lExpression.getType() == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.UNKNOWN_TYPE(lExpression.getText()));
  }
  if (!TypeConversionUtil.areTypesAssignmentCompatible(lExpression.getType(),rExpression)) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException("Incompatible types " + expression.getText()));
  }
  lExpression.accept(this);
  Evaluator lEvaluator=myResult;
  myResult=new AssignmentEvaluator(lEvaluator,rEvaluator);
}
