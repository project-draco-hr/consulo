{
  LOG.assertTrue(typeElement.isValid());
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  PsiManager manager=typeElement.getManager();
  GlobalSearchScope scope=typeElement.getResolveScope();
  Project project=manager.getProject();
  ExpectedTypesProvider provider=ExpectedTypesProvider.getInstance(project);
  if (infos.length == 1 && substitutor != null && substitutor != PsiSubstitutor.EMPTY) {
    ExpectedTypeInfo info=infos[0];
    Map<PsiTypeParameter,PsiType> map=substitutor.getSubstitutionMap();
    PsiType[] vals=map.values().toArray(PsiType.EMPTY_ARRAY);
    PsiTypeParameter[] params=map.keySet().toArray(PsiTypeParameter.EMPTY_ARRAY);
    List<PsiType> types=matchingTypeParameters(vals,params,info);
    if (types.size() > 0) {
      types.addAll(Arrays.asList(provider.processExpectedTypes(infos,new MyTypeVisitor(manager,scope),project)));
      builder.replaceElement(typeElement,new TypeExpression(project,types.toArray(new PsiType[types.size()])));
      return;
    }
 else {
      PsiElementFactory factory=manager.getElementFactory();
      PsiType type=info.getType();
      PsiType defaultType=info.getDefaultType();
      try {
        PsiTypeElement inplaceTypeElement=((PsiVariable)factory.createVariableDeclarationStatement("foo",type,null).getDeclaredElements()[0]).getTypeElement();
        PsiSubstitutor rawingSubstitutor=getRawingSubstitutor(context,targetClass);
        int substitionResult=substituteToTypeParameters(typeElement,inplaceTypeElement,vals,params,builder,rawingSubstitutor,true);
        if (substitionResult != SUBSTITUTED_NONE) {
          if (substitionResult == SUBSTITUTED_IN_PARAMETERS) {
            PsiJavaCodeReferenceElement refElement=typeElement.getInnermostComponentReferenceElement();
            LOG.assertTrue(refElement != null && refElement.getReferenceNameElement() != null);
            type=getComponentType(type);
            LOG.assertTrue(type != null);
            defaultType=getComponentType(defaultType);
            LOG.assertTrue(defaultType != null);
            ExpectedTypeInfo info1=ExpectedTypesProvider.getInstance(project).createInfo(((PsiClassType)defaultType).rawType(),ExpectedTypeInfo.TYPE_STRICTLY,((PsiClassType)defaultType).rawType(),info.getTailType());
            MyTypeVisitor visitor=new MyTypeVisitor(manager,scope);
            builder.replaceElement(refElement.getReferenceNameElement(),new TypeExpression(project,provider.processExpectedTypes(new ExpectedTypeInfo[]{info1},visitor,project)));
          }
          return;
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
  builder.replaceElement(typeElement,new TypeExpression(project,provider.processExpectedTypes(infos,new MyTypeVisitor(manager,scope),project)));
}
