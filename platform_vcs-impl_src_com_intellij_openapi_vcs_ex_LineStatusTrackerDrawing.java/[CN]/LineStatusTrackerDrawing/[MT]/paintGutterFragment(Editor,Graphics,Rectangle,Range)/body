{
  final EditorGutterComponentEx gutter=((EditorEx)editor).getGutterComponentEx();
  Color gutterColor=getDiffGutterColor(range);
  Color borderColor=getDiffGutterBorderColor();
  final int x=r.x + r.width - JBUI.scale(3);
  final int endX=gutter.getWhitespaceSeparatorOffset();
  final int y=lineToY(editor,range.getLine1());
  final int endY=lineToY(editor,range.getLine2());
  if (range.getInnerRanges() == null) {
    if (y != endY) {
      paintRect(g,gutterColor,borderColor,x,y,endX,endY);
    }
 else {
      paintTriangle(g,gutterColor,borderColor,x,endX,y);
    }
  }
 else {
    if (y == endY) {
      paintTriangle(g,gutterColor,borderColor,x,endX,y);
    }
 else {
      List<Range.InnerRange> innerRanges=range.getInnerRanges();
      for (      Range.InnerRange innerRange : innerRanges) {
        if (innerRange.getType() == Range.DELETED)         continue;
        int start=lineToY(editor,innerRange.getLine1());
        int end=lineToY(editor,innerRange.getLine2());
        paintRect(g,getDiffColor(innerRange),null,x,start,endX,end);
      }
      for (int i=0; i < innerRanges.size(); i++) {
        Range.InnerRange innerRange=innerRanges.get(i);
        if (innerRange.getType() != Range.DELETED)         continue;
        int start;
        int end;
        if (i == 0) {
          start=lineToY(editor,innerRange.getLine1());
          end=lineToY(editor,innerRange.getLine2()) + JBUI.scale(5);
        }
 else         if (i == innerRanges.size() - 1) {
          start=lineToY(editor,innerRange.getLine1()) - JBUI.scale(5);
          end=lineToY(editor,innerRange.getLine2());
        }
 else {
          start=lineToY(editor,innerRange.getLine1()) - JBUI.scale(3);
          end=lineToY(editor,innerRange.getLine2()) + JBUI.scale(3);
        }
        paintRect(g,getDiffColor(innerRange),null,x,start,endX,end);
      }
      paintRect(g,null,borderColor,x,y,endX,endY);
    }
  }
}
