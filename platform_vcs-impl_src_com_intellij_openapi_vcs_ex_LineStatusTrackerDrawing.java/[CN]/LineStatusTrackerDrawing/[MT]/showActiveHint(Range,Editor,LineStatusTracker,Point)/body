{
  if (!tracker.isValid())   return;
  final Disposable disposable=Disposer.newDisposable();
  List<DiffFragment> wordDiff=computeWordDiff(range,tracker);
  installEditorHighlighters(range,editor,tracker,wordDiff,disposable);
  JComponent editorComponent=createEditorComponent(range,editor,tracker,wordDiff);
  ActionToolbar toolbar=buildToolbar(range,editor,tracker,mousePosition,disposable);
  toolbar.updateActionsImmediately();
  toolbar.setReservePlaceAutoPopupIcon(false);
  PopupPanel popupPanel=new PopupPanel(editor,toolbar,editorComponent);
  LightweightHint hint=new LightweightHint(popupPanel);
  HintListener closeListener=new HintListener(){
    @Override public void hintHidden(    final EventObject event){
      Disposer.dispose(disposable);
    }
  }
;
  hint.addHintListener(closeListener);
  int line=editor.getCaretModel().getLogicalPosition().line;
  Point point=HintManagerImpl.getHintPosition(hint,editor,new LogicalPosition(line,0),HintManager.UNDER);
  if (mousePosition != null) {
    int lineHeight=editor.getLineHeight();
    int delta=(point.y - mousePosition.y) % lineHeight;
    if (delta < 0)     delta+=lineHeight;
    point.y=mousePosition.y + delta;
  }
  point.x-=popupPanel.getEditorTextOffset();
  int flags=HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING;
  HintManagerImpl.getInstanceImpl().showEditorHint(hint,editor,point,flags,-1,false,new HintHint(editor,point));
  if (!hint.isVisible()) {
    closeListener.hintHidden(null);
  }
}
