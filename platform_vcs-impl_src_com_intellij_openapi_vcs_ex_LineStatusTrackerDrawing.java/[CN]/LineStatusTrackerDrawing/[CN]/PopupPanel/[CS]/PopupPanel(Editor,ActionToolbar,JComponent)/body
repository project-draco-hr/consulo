{
  super(new BorderLayout());
  setOpaque(false);
  myEditorComponent=editorComponent;
  boolean isEditorVisible=myEditorComponent != null;
  Color background=((EditorEx)editor).getBackgroundColor();
  Color borderColor=editor.getColorsScheme().getColor(EditorColors.SELECTED_TEARLINE_COLOR);
  JComponent toolbarComponent=toolbar.getComponent();
  toolbarComponent.setBackground(background);
  toolbarComponent.setBorder(null);
  JComponent toolbarPanel=JBUI.Panels.simplePanel(toolbarComponent);
  toolbarPanel.setBackground(background);
  Border outsideToolbarBorder=JBUI.Borders.customLine(borderColor,1,1,isEditorVisible ? 0 : 1,1);
  Border insideToolbarBorder=JBUI.Borders.empty(1,5,1,5);
  toolbarPanel.setBorder(BorderFactory.createCompoundBorder(outsideToolbarBorder,insideToolbarBorder));
  if (myEditorComponent != null) {
    Border outsideEditorBorder=JBUI.Borders.customLine(borderColor,1);
    Border insideEditorBorder=JBUI.Borders.empty(2);
    myEditorComponent.setBorder(BorderFactory.createCompoundBorder(outsideEditorBorder,insideEditorBorder));
  }
  JPanel emptyPanel=new JPanel();
  emptyPanel.setOpaque(false);
  emptyPanel.setPreferredSize(new Dimension());
  JPanel topPanel=new JPanel(new BorderLayout());
  topPanel.setOpaque(false);
  topPanel.add(toolbarPanel,BorderLayout.WEST);
  topPanel.add(emptyPanel,BorderLayout.CENTER);
  add(topPanel,BorderLayout.NORTH);
  if (myEditorComponent != null)   add(myEditorComponent,BorderLayout.CENTER);
  MouseAdapter listener=new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      transferEvent(e,editor);
    }
    @Override public void mouseClicked(    MouseEvent e){
      transferEvent(e,editor);
    }
    @Override public void mouseReleased(    MouseEvent e){
      transferEvent(e,editor);
    }
  }
;
  emptyPanel.addMouseListener(listener);
}
