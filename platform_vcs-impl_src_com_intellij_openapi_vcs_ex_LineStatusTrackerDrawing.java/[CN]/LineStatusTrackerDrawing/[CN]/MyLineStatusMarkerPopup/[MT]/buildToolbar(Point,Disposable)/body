{
  final DefaultActionGroup group=new DefaultActionGroup();
  final ShowPrevChangeMarkerAction localShowPrevAction=new ShowPrevChangeMarkerAction(myTracker.getPrevRange(myRange),myTracker,myEditor);
  final ShowNextChangeMarkerAction localShowNextAction=new ShowNextChangeMarkerAction(myTracker.getNextRange(myRange),myTracker,myEditor);
  final RollbackLineStatusRangeAction rollback=new RollbackLineStatusRangeAction(myTracker,myRange,myEditor);
  final ShowLineStatusRangeDiffAction showDiff=new ShowLineStatusRangeDiffAction(myTracker,myRange,myEditor);
  final CopyLineStatusRangeAction copyRange=new CopyLineStatusRangeAction(myTracker,myRange);
  final ToggleByWordDiffAction toggleWordDiff=new ToggleByWordDiffAction(myRange,myEditor,myTracker,mousePosition);
  group.add(localShowPrevAction);
  group.add(localShowNextAction);
  group.add(rollback);
  group.add(showDiff);
  group.add(copyRange);
  group.add(toggleWordDiff);
  JComponent editorComponent=myEditor.getComponent();
  DiffUtil.registerAction(localShowPrevAction,editorComponent);
  DiffUtil.registerAction(localShowNextAction,editorComponent);
  DiffUtil.registerAction(rollback,editorComponent);
  DiffUtil.registerAction(showDiff,editorComponent);
  DiffUtil.registerAction(copyRange,editorComponent);
  final List<AnAction> actionList=ActionUtil.getActions(editorComponent);
  Disposer.register(parentDisposable,new Disposable(){
    @Override public void dispose(){
      actionList.remove(localShowPrevAction);
      actionList.remove(localShowNextAction);
      actionList.remove(rollback);
      actionList.remove(showDiff);
      actionList.remove(copyRange);
    }
  }
);
  return ActionManager.getInstance().createActionToolbar(ActionPlaces.FILEHISTORY_VIEW_TOOLBAR,group,true);
}
