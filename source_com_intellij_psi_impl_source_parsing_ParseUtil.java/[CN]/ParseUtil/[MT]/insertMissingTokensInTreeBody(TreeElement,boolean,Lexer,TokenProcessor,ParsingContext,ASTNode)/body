{
  final CommonParentState commonParents=new CommonParentState();
  while (leaf != null) {
    commonParents.strongWhiteSpaceHolder=null;
    final IElementType tokenType=gt ? GTTokens.getTokenType(lexer) : lexer.getTokenType();
    final TreeElement next;
    if (tokenType instanceof IChameleonElementType) {
      next=nextLeaf(leaf,commonParents,tokenType);
    }
 else {
      next=nextLeaf(leaf,commonParents,null);
    }
    if (next == null || tokenType == null || next == endToken)     break;
    if (tokenType != next.getElementType() && processor.isTokenValid(tokenType)) {
      final TreeElement firstMissing=processor.process(lexer,context);
      final CompositeElement unclosedElement=commonParents.strongWhiteSpaceHolder;
      if (unclosedElement != null) {
        if (commonParents.isStrongElementOnRisingSlope || unclosedElement.getFirstChildNode() == null) {
          TreeUtil.addChildren(unclosedElement,firstMissing);
        }
 else {
          TreeUtil.insertBefore((TreeElement)unclosedElement.getFirstChildNode(),firstMissing);
        }
      }
 else {
        final ASTNode insertBefore=commonParents.nextLeafBranchStart;
        TreeElement insertAfter=commonParents.startLeafBranchStart;
        TreeElement current=commonParents.startLeafBranchStart;
        while (current != insertBefore) {
          final TreeElement treeNext=current.getTreeNext();
          if (treeNext == insertBefore) {
            insertAfter=current;
            break;
          }
          if (treeNext instanceof ModifierListElement) {
            insertAfter=current;
            break;
          }
          if (treeNext.getUserData(UNCLOSED_ELEMENT_PROPERTY) != null) {
            insertAfter=null;
            TreeUtil.addChildren((CompositeElement)treeNext,firstMissing);
            break;
          }
          current=treeNext;
        }
        if (insertAfter != null)         TreeUtil.insertAfter(insertAfter,firstMissing);
      }
    }
    passTokenOrChameleon(next,lexer,gt);
    leaf=next;
  }
}
