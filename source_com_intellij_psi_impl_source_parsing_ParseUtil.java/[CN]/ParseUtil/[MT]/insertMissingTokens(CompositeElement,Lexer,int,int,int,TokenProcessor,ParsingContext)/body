{
  if (state < 0) {
    lexer.start(lexer.getBuffer(),startOffset,endOffset);
  }
 else {
    lexer.start(lexer.getBuffer(),startOffset,endOffset,state);
  }
  boolean gt=lexer instanceof JavaLexer || lexer instanceof JavaWithJspTemplateDataLexer;
  LeafElement leaf=TreeUtil.findFirstLeaf(root);
  if (leaf == null) {
    final TreeElement firstMissing=processor.process(lexer,context);
    if (firstMissing != null) {
      TreeUtil.addChildren(root,firstMissing);
    }
    return;
  }
{
    final IElementType tokenType=gt ? GTTokens.getTokenType(lexer) : lexer.getTokenType();
    if (tokenType != leaf.getElementType() && processor.isTokenValid(tokenType)) {
      final TreeElement firstMissing=processor.process(lexer,context);
      if (firstMissing != null) {
        TreeUtil.insertBefore(root.getFirstChildNode(),firstMissing);
      }
    }
    passTokenOrChameleon(leaf,lexer,gt);
  }
  insertMissingTokensInTreeBody(leaf,gt,lexer,processor,context,null);
  if (lexer.getTokenType() != null) {
    final TreeElement firstMissing=processor.process(lexer,context);
    if (firstMissing != null) {
      ASTNode current=root;
      while (current instanceof CompositeElement) {
        if (current.getUserData(UNCLOSED_ELEMENT_PROPERTY) != null)         break;
        current=current.getLastChildNode();
      }
      if (current instanceof CompositeElement) {
        TreeUtil.addChildren((CompositeElement)current,firstMissing);
      }
 else {
        TreeUtil.insertAfter(root.getLastChildNode(),firstMissing);
      }
    }
  }
  bindComments(root);
}
