{
  if (assertion instanceof KnownException)   return ((KnownException)assertion).getPacketFactory();
  if (isComparisonFailure(assertion)) {
    return ComparisonDetailsExtractor.create(assertion);
  }
  final Throwable cause=assertion.getCause();
  if (isComparisonFailure(cause)) {
    try {
      return ComparisonDetailsExtractor.create(assertion,ComparisonDetailsExtractor.getExpected(cause),ComparisonDetailsExtractor.getActual(cause));
    }
 catch (    Throwable ignore) {
    }
  }
  final String message=assertion.getMessage();
  if (message != null) {
    Matcher matcher=Pattern.compile("\nExpected: (.*)\n\\s*got: (.*)",Pattern.DOTALL).matcher(message);
    if (!matcher.matches()) {
      matcher=Pattern.compile("\\s*expected same:<(.*)> was not:<(.*)>",Pattern.DOTALL).matcher(message);
    }
    if (!matcher.matches()) {
      matcher=Pattern.compile("\\s*expected:<(.*)> but was:<(.*)>",Pattern.DOTALL).matcher(message);
    }
    if (!matcher.matches()) {
      matcher=Pattern.compile("\nExpected: \"(.*)\"\n\\s*but: was \"(.*)\"",Pattern.DOTALL).matcher(message);
    }
    if (matcher.matches()) {
      return ComparisonDetailsExtractor.create(assertion,matcher.group(1).replaceAll("\\\\n","\n"),matcher.group(2).replaceAll("\\\\n","\n"));
    }
  }
  return new ExceptionPacketFactory(PoolOfTestStates.FAILED_INDEX,assertion);
}
