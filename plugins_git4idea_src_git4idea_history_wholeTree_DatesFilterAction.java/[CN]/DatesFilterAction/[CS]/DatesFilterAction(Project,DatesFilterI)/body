{
  super(project,DATES,"Date");
  myFilterI=filterI;
  myAll=new DumbAwareAction(ALL){
    @Override public void actionPerformed(    AnActionEvent e){
      myLabel.setText(ALL);
      myPanel.setToolTipText(DATES + " " + ALL);
      myFilterI.selectAll();
    }
  }
;
  myToday=new DumbAwareAction(TODAY){
    @Override public void actionPerformed(    AnActionEvent e){
      myLabel.setText(TODAY);
      myPanel.setToolTipText(DATES + " " + TODAY);
      myFilterI.filter(-1,getTodayMidnight(),TODAY);
    }
  }
;
  myYesterday=new DumbAwareAction(YESTERDAY){
    @Override public void actionPerformed(    AnActionEvent e){
      myLabel.setText(YESTERDAY);
      myPanel.setToolTipText(DATES + " " + YESTERDAY);
      myFilterI.filter(-1,yesterday(),YESTERDAY);
    }
  }
;
  myWeek=new DumbAwareAction(WEEK){
    @Override public void actionPerformed(    AnActionEvent e){
      myLabel.setText(WEEK);
      myPanel.setToolTipText(DATES + " " + WEEK);
      myFilterI.filter(-1,week(),WEEK);
    }
  }
;
  myBefore=new DumbAwareAction(BEFORE_SELECTED){
    @Override public void actionPerformed(    AnActionEvent e){
      final long time=myFilterI.getCommitTimeIfOne();
      if (time > 0) {
        myFilterI.filter(time,myFilterI.getAfter(),null);
        final String betweenText=betweenText();
        myLabel.setText(FILTER);
        myPanel.setToolTipText(DATES + " " + betweenText);
      }
    }
    @Override public void update(    AnActionEvent e){
      final long time=myFilterI.getCommitTimeIfOne();
      final Presentation presentation=e.getPresentation();
      presentation.setEnabledAndVisible(time > 0);
      presentation.setText(BEFORE_SELECTED + DateFormatUtil.formatDate(time));
    }
  }
;
  myAfter=new DumbAwareAction(AFTER_SELECTED){
    @Override public void actionPerformed(    AnActionEvent e){
      final long time=myFilterI.getCommitTimeIfOne();
      if (time > 0) {
        myFilterI.filter(myFilterI.getBefore(),time,null);
        final String betweenText=betweenText();
        myLabel.setText(FILTER);
        myPanel.setToolTipText(DATES + " " + betweenText);
      }
    }
    @Override public void update(    AnActionEvent e){
      final long time=myFilterI.getCommitTimeIfOne();
      final Presentation presentation=e.getPresentation();
      presentation.setEnabledAndVisible(time > 0);
      presentation.setText(AFTER_SELECTED + DateFormatUtil.formatDate(time));
    }
  }
;
  mySelect=new DumbAwareAction(SELECT){
    @Override public void actionPerformed(    AnActionEvent e){
      final DateFilterComponent component=new DateFilterComponent(false,DateFormatUtil.getDateFormat().getDelegate());
      final long before=myFilterI.getBefore();
      if (before > 0) {
        component.setBefore(before);
      }
      final long after=myFilterI.getAfter();
      if (after > 0) {
        component.setAfter(after);
      }
      final DialogBuilder builder=new DialogBuilder(myProject);
      builder.setTitle("Select Dates To Filter Between");
      builder.setOkActionEnabled(true);
      builder.setOkOperation(new Runnable(){
        @Override public void run(){
          myFilterI.filter(component.getBefore(),component.getAfter(),null);
          final String betweenText=betweenText();
          myLabel.setText(FILTER);
          myPanel.setToolTipText(DATES + " " + betweenText);
          builder.getDialogWrapper().close(0);
        }
      }
);
      builder.setCenterPanel(component.getPanel());
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          builder.showModal(true);
        }
      }
);
    }
  }
;
  myLabel.setText(ALL);
}
