{
  mxPoint[] pointsCurve=getCurvePoints(index);
  double[] curveIntervals=getIntervals(index);
  if (pointsCurve != null && pointsCurve.length > 0 && curveIntervals != null && start >= 0.0 && start <= 1.0 && end >= 0.0 && end <= 1.0) {
    if (pointsCurve.length == 1) {
      mxPoint point=pointsCurve[0];
      return new mxPoint[]{new mxPoint(point.getX(),point.getY())};
    }
    int lowerLimit=getLowerIndexOfSegment(index,start);
    mxPoint firstPointOfSeg=pointsCurve[lowerLimit];
    double segVectorX=pointsCurve[lowerLimit + 1].getX() - firstPointOfSeg.getX();
    double segVectorY=pointsCurve[lowerLimit + 1].getY() - firstPointOfSeg.getY();
    double distanceAlongSeg=(start - curveIntervals[lowerLimit]) / (curveIntervals[lowerLimit + 1] - curveIntervals[lowerLimit]);
    mxPoint startPoint=new mxPoint(firstPointOfSeg.getX() + segVectorX * distanceAlongSeg,firstPointOfSeg.getY() + segVectorY * distanceAlongSeg);
    List<mxPoint> result=new ArrayList<mxPoint>();
    result.add(startPoint);
    double current=start;
    current=curveIntervals[++lowerLimit];
    while (current <= end) {
      mxPoint nextPointOfSeg=pointsCurve[lowerLimit];
      result.add(nextPointOfSeg);
      current=curveIntervals[++lowerLimit];
    }
    if (lowerLimit > 0 && lowerLimit < pointsCurve.length && end > curveIntervals[lowerLimit - 1]) {
      firstPointOfSeg=pointsCurve[lowerLimit - 1];
      segVectorX=pointsCurve[lowerLimit].getX() - firstPointOfSeg.getX();
      segVectorY=pointsCurve[lowerLimit].getY() - firstPointOfSeg.getY();
      distanceAlongSeg=(end - curveIntervals[lowerLimit - 1]) / (curveIntervals[lowerLimit] - curveIntervals[lowerLimit - 1]);
      mxPoint endPoint=new mxPoint(firstPointOfSeg.getX() + segVectorX * distanceAlongSeg,firstPointOfSeg.getY() + segVectorY * distanceAlongSeg);
      result.add(endPoint);
    }
    mxPoint[] resultArray=new mxPoint[result.size()];
    return result.toArray(resultArray);
  }
 else {
    return null;
  }
}
