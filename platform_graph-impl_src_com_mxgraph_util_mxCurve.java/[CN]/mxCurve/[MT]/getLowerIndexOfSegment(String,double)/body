{
  double[] curveIntervals=getIntervals(index);
  if (curveIntervals == null) {
    return 0;
  }
  int numIntervals=curveIntervals.length;
  if (distance <= 0.0 || numIntervals < 3) {
    return 0;
  }
  if (distance >= 1.0) {
    return numIntervals - 2;
  }
  int testIndex=(int)(numIntervals * distance);
  if (testIndex >= numIntervals) {
    testIndex=numIntervals - 1;
  }
  int lowerLimit=-1;
  int upperLimit=numIntervals;
  for (int i=0; i < numIntervals; i++) {
    double segmentDistance=curveIntervals[testIndex];
    double multiplier=0.5;
    if (distance < segmentDistance) {
      upperLimit=Math.min(upperLimit,testIndex);
      multiplier=-0.5;
    }
 else     if (distance > segmentDistance) {
      lowerLimit=Math.max(lowerLimit,testIndex);
    }
 else {
      if (testIndex == 0) {
        lowerLimit=0;
        upperLimit=1;
      }
 else {
        lowerLimit=testIndex - 1;
        upperLimit=testIndex;
      }
    }
    int indexDifference=upperLimit - lowerLimit;
    if (indexDifference == 1) {
      break;
    }
    testIndex=(int)(testIndex + indexDifference * multiplier);
    if (testIndex == lowerLimit) {
      testIndex=lowerLimit + 1;
    }
    if (testIndex == upperLimit) {
      testIndex=upperLimit - 1;
    }
  }
  if (lowerLimit != upperLimit - 1) {
    return -1;
  }
  return lowerLimit;
}
