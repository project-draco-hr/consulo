{
  mxPoint[] currentCurve=getCurvePoints(index);
  double[] currentIntervals=getIntervals(index);
  int closestSegment=0;
  double closestSegDistSq=10000000;
  mxLine segment=new mxLine(currentCurve[0],currentCurve[1]);
  for (int i=1; i < currentCurve.length; i++) {
    segment.setPoints(currentCurve[i - 1],currentCurve[i]);
    double segDistSq=segment.ptSegDistSq(absPoint);
    if (segDistSq < closestSegDistSq) {
      closestSegDistSq=segDistSq;
      closestSegment=i - 1;
    }
  }
  mxPoint startSegPt=currentCurve[closestSegment];
  mxPoint endSegPt=currentCurve[closestSegment + 1];
  mxLine closestSeg=new mxLine(startSegPt,endSegPt);
  double lineDistSq=closestSeg.ptLineDistSq(absPoint);
  double orthogonalOffset=Math.sqrt(Math.min(lineDistSq,closestSegDistSq));
  double segX=endSegPt.getX() - startSegPt.getX();
  double segY=endSegPt.getY() - startSegPt.getY();
  double segDist=Math.sqrt(segX * segX + segY * segY);
  double segNormX=segX / segDist;
  double segNormY=segY / segDist;
  double candidateOffX1=(absPoint.getX() - segNormY * orthogonalOffset) - endSegPt.getX();
  double candidateOffY1=(absPoint.getY() + segNormX * orthogonalOffset) - endSegPt.getY();
  double candidateOffX2=(absPoint.getX() + segNormY * orthogonalOffset) - endSegPt.getX();
  double candidateOffY2=(absPoint.getY() - segNormX * orthogonalOffset) - endSegPt.getY();
  double candidateDist1=(candidateOffX1 * candidateOffX1) + (candidateOffY1 * candidateOffY1);
  double candidateDist2=(candidateOffX2 * candidateOffX2) + (candidateOffY2 * candidateOffY2);
  double orthOffsetPointX=0;
  double orthOffsetPointY=0;
  if (candidateDist2 < candidateDist1) {
    orthogonalOffset=-orthogonalOffset;
  }
  orthOffsetPointX=absPoint.getX() - segNormY * orthogonalOffset;
  orthOffsetPointY=absPoint.getY() + segNormX * orthogonalOffset;
  double distAlongEdge=0;
  double cartOffsetX=0;
  double cartOffsetY=0;
  if (Math.abs(closestSegDistSq - lineDistSq) > 0.0001) {
    double distToStartPoint=Math.abs(orthOffsetPointX - startSegPt.getX()) + Math.abs(orthOffsetPointY - startSegPt.getY());
    double distToEndPoint=Math.abs(orthOffsetPointX - endSegPt.getX()) + Math.abs(orthOffsetPointY - endSegPt.getY());
    if (distToStartPoint < distToEndPoint) {
      distAlongEdge=currentIntervals[closestSegment];
      cartOffsetX=orthOffsetPointX - startSegPt.getX();
      cartOffsetY=orthOffsetPointY - startSegPt.getY();
    }
 else {
      distAlongEdge=currentIntervals[closestSegment + 1];
      cartOffsetX=orthOffsetPointX - endSegPt.getX();
      cartOffsetY=orthOffsetPointY - endSegPt.getY();
    }
  }
 else {
    double segmentLen=Math.sqrt((endSegPt.getX() - startSegPt.getX()) * (endSegPt.getX() - startSegPt.getX()) + (endSegPt.getY() - startSegPt.getY()) * (endSegPt.getY() - startSegPt.getY()));
    double offsetLen=Math.sqrt((orthOffsetPointX - startSegPt.getX()) * (orthOffsetPointX - startSegPt.getX()) + (orthOffsetPointY - startSegPt.getY()) * (orthOffsetPointY - startSegPt.getY()));
    double proportionAlongSeg=offsetLen / segmentLen;
    double segProportingDiff=currentIntervals[closestSegment + 1] - currentIntervals[closestSegment];
    distAlongEdge=currentIntervals[closestSegment] + segProportingDiff * proportionAlongSeg;
  }
  if (distAlongEdge > 1.0) {
    distAlongEdge=1.0;
  }
  return new mxRectangle(distAlongEdge,orthogonalOffset,cartOffsetX,cartOffsetY);
}
