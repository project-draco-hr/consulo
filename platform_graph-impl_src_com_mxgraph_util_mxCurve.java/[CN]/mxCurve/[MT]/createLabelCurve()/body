{
  mxPoint[] currentCurve=getBaseLabelCurve();
  boolean labelReversed=isLabelReversed();
  List<mxPoint> labelCurvePoints=new ArrayList<mxPoint>();
  for (int i=1; i < currentCurve.length; i++) {
    int currentIndex=i;
    int lastIndex=i - 1;
    if (labelReversed) {
      currentIndex=currentCurve.length - i - 1;
      lastIndex=currentCurve.length - i;
    }
    mxPoint segStartPoint=currentCurve[currentIndex];
    mxPoint segEndPoint=currentCurve[lastIndex];
    double segVectorX=segEndPoint.getX() - segStartPoint.getX();
    double segVectorY=segEndPoint.getY() - segStartPoint.getY();
    double segVectorLength=Math.sqrt(segVectorX * segVectorX + segVectorY * segVectorY);
    double normSegVectorX=segVectorX / segVectorLength;
    double normSegVectorY=segVectorY / segVectorLength;
    double centerSegX=(segEndPoint.getX() + segStartPoint.getX()) / 2.0;
    double centerSegY=(segEndPoint.getY() + segStartPoint.getY()) / 2.0;
    if (i == 1) {
      mxPoint startPoint=new mxPoint(segEndPoint.getX() - (normSegVectorY * labelBuffer),segEndPoint.getY() + (normSegVectorX * labelBuffer));
      labelCurvePoints.add(startPoint);
      updateBounds(startPoint.getX(),startPoint.getY());
    }
    double pointX=centerSegX - (normSegVectorY * labelBuffer);
    double pointY=centerSegY + (normSegVectorX * labelBuffer);
    mxPoint labelCurvePoint=new mxPoint(pointX,pointY);
    updateBounds(pointX,pointY);
    labelCurvePoints.add(labelCurvePoint);
    if (i == currentCurve.length - 1) {
      mxPoint endPoint=new mxPoint(segStartPoint.getX() - (normSegVectorY * labelBuffer),segStartPoint.getY() + (normSegVectorX * labelBuffer));
      labelCurvePoints.add(endPoint);
      updateBounds(endPoint.getX(),endPoint.getY());
    }
  }
  mxPoint[] tmpPoints=new mxPoint[labelCurvePoints.size()];
  points.put(LABEL_CURVE,labelCurvePoints.toArray(tmpPoints));
  populateIntervals(LABEL_CURVE);
}
