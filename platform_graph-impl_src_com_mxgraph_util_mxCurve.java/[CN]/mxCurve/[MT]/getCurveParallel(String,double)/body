{
  mxPoint[] pointsCurve=getCurvePoints(index);
  double[] curveIntervals=getIntervals(index);
  if (pointsCurve != null && pointsCurve.length > 0 && curveIntervals != null && distance >= 0.0 && distance <= 1.0) {
    if (pointsCurve.length == 1) {
      mxPoint point=pointsCurve[0];
      return new mxLine(point.getX(),point.getY(),new mxPoint(1,0));
    }
    int lowerLimit=getLowerIndexOfSegment(index,distance);
    mxPoint firstPointOfSeg=pointsCurve[lowerLimit];
    double segVectorX=pointsCurve[lowerLimit + 1].getX() - firstPointOfSeg.getX();
    double segVectorY=pointsCurve[lowerLimit + 1].getY() - firstPointOfSeg.getY();
    double distanceAlongSeg=(distance - curveIntervals[lowerLimit]) / (curveIntervals[lowerLimit + 1] - curveIntervals[lowerLimit]);
    double segLength=Math.sqrt(segVectorX * segVectorX + segVectorY * segVectorY);
    double startPointX=firstPointOfSeg.getX() + segVectorX * distanceAlongSeg;
    double startPointY=firstPointOfSeg.getY() + segVectorY * distanceAlongSeg;
    mxPoint endPoint=new mxPoint(segVectorX / segLength,segVectorY / segLength);
    return new mxLine(startPointX,startPointY,endPoint);
  }
 else {
    return INVALID_POSITION;
  }
}
