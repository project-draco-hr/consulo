{
  if (ch.hasOtherLayers() && myRecursive) {
    return new MultipleDiffRequestPresentable(myProject,ch);
  }
  if (ChangesUtil.isTextConflictingChange(ch)) {
    final AbstractVcs vcs=ChangesUtil.getVcsForChange(ch,myProject);
    final MergeProvider mergeProvider=vcs.getMergeProvider();
    if (mergeProvider == null)     return null;
    final FilePath path=ChangesUtil.getFilePath(ch);
    VirtualFile vf=path.getVirtualFile();
    if (vf == null) {
      path.hardRefresh();
      vf=path.getVirtualFile();
    }
    if (vf == null)     return null;
    return new ConflictedDiffRequestPresentable(myProject,vf,ch);
  }
 else {
    if (forceText) {
      if (ch.getBeforeRevision() != null && ch.getAfterRevision() != null) {
        try {
          if (StringUtil.isEmptyOrSpaces(ch.getBeforeRevision().getContent()) && StringUtil.isEmptyOrSpaces(ch.getAfterRevision().getContent())) {
            return null;
          }
          if (StringUtil.equals(ch.getBeforeRevision().getContent(),ch.getAfterRevision().getContent())) {
            return null;
          }
        }
 catch (        VcsException e) {
        }
      }
    }
    final ChangeDiffRequestPresentable presentable=new ChangeDiffRequestPresentable(myProject,ch);
    if (forceText) {
      presentable.setIgnoreDirectoryFlag(true);
    }
    return presentable;
  }
}
