{
  super("RegExp");
  final RegExpParserDefinition parserDefinition=new RegExpParserDefinition();
  LanguageAnnotators.INSTANCE.addExplicitExtension(this,new RegExpAnnotator());
  LanguageParserDefinitions.INSTANCE.addExplicitExtension(this,parserDefinition);
  LanguageBraceMatching.INSTANCE.addExplicitExtension(this,createPairedBraceMatcher());
  LanguageSurrounders.INSTANCE.addExplicitExtension(this,new SimpleSurroundDescriptor());
  SyntaxHighlighterFactory.LANGUAGE_FACTORY.addExplicitExtension(this,new SingleLazyInstanceSyntaxHighlighterFactory(){
    @NotNull protected SyntaxHighlighter createHighlighter(){
      return new RegExpHighlighter(null,parserDefinition);
    }
  }
);
  LanguageDocumentation.INSTANCE.addExplicitExtension(this,new QuickDocumentationProvider(){
    @Nullable public String getQuickNavigateInfo(    PsiElement element){
      if (element instanceof RegExpGroup) {
        return "Capturing Group: " + ((RegExpElementImpl)element).getUnescapedText();
      }
 else {
        return null;
      }
    }
  }
);
}
