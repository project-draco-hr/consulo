{
  super(parentDisposable);
  registerFileType(JavaClassFileType.INSTANCE,"class");
  addExplicitExtension(FileTypeFileViewProviders.INSTANCE,JavaClassFileType.INSTANCE,new ClassFileViewProviderFactory());
  addExplicitExtension(BinaryFileStubBuilders.INSTANCE,JavaClassFileType.INSTANCE,new ClassFileStubBuilder());
  registerFileType(JavaFileType.INSTANCE,"java");
  addExplicitExtension(LanguageASTFactory.INSTANCE,JavaLanguage.INSTANCE,new CoreJavaASTFactory());
  addExplicitExtension(LanguageParserDefinitions.INSTANCE,JavaLanguage.INSTANCE,new JavaParserDefinition());
  registerProjectExtensionPoint(PsiElementFinder.EP_NAME,PsiElementFinder.class);
  registerExtensionPoint(Extensions.getRootArea(),ClsStubBuilderFactory.EP_NAME,ClsStubBuilderFactory.class);
  registerExtensionPoint(Extensions.getRootArea(),PsiAugmentProvider.EP_NAME,PsiAugmentProvider.class);
  registerExtensionPoint(Extensions.getRootArea(),JavaMainMethodProvider.EP_NAME,JavaMainMethodProvider.class);
  addExtension(ClsStubBuilderFactory.EP_NAME,new DefaultClsStubBuilderFactory());
  myApplication.registerService(PsiPackageImplementationHelper.class,new CorePsiPackageImplementationHelper());
  myFileManager=new CoreJavaFileManager(myPsiManager,getLocalFileSystem(),myJarFileSystem);
  JavaPsiFacadeImpl javaPsiFacade=new JavaPsiFacadeImpl(myProject,myPsiManager,myFileManager,null);
  myProject.registerService(CoreJavaFileManager.class,myFileManager);
  registerComponentInstance(myProject.getPicoContainer(),JavaPsiFacade.class,javaPsiFacade);
  myProject.registerService(JavaPsiFacade.class,javaPsiFacade);
  myProject.registerService(PsiElementFactory.class,new PsiElementFactoryImpl(myPsiManager));
  myProject.registerService(JavaPsiImplementationHelper.class,new CoreJavaPsiImplementationHelper());
  myProject.registerService(PsiResolveHelper.class,new PsiResolveHelperImpl(myPsiManager));
  myProject.registerService(LanguageLevelProjectExtension.class,new CoreLanguageLevelProjectExtension());
  myProject.registerService(PackageIndex.class,myFileManager);
  myApplication.registerService(EmptySubstitutor.class,new EmptySubstitutorImpl());
  myApplication.registerService(JavaDirectoryService.class,new CoreJavaDirectoryService());
}
