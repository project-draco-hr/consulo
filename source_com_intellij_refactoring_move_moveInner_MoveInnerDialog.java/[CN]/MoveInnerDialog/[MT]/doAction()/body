{
  String message=null;
  final String className=getClassName();
  PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(className)) {
    message="No class name specified";
  }
 else   if (!manager.getNameHelper().isIdentifier(className)) {
    message=RefactoringMessageUtil.getIncorrectIdentifierMessage(className);
  }
 else {
    if (myCbPassOuterClass.isSelected()) {
      String parameterName=getParameterName();
      if ("".equals(parameterName)) {
        message="No parameter name specified";
      }
 else       if (!manager.getNameHelper().isIdentifier(parameterName)) {
        message=RefactoringMessageUtil.getIncorrectIdentifierMessage(parameterName);
      }
    }
    if (message == null) {
      PsiElement targetContainer=MoveInnerImpl.getTargetContainer(myInnerClass);
      if (targetContainer instanceof PsiClass) {
        PsiClass targetClass=(PsiClass)targetContainer;
        PsiClass[] classes=targetClass.getInnerClasses();
        if (classes != null) {
          for (int idx=0; idx < classes.length; idx++) {
            PsiClass aClass=classes[idx];
            if (className.equals(aClass.getName())) {
              message="Inner class named '" + className + "' is already defined\n"+ "in the class "+ targetClass.getName();
              break;
            }
          }
        }
      }
 else       if (targetContainer instanceof PsiDirectory) {
        message=RefactoringMessageUtil.checkCanCreateClass((PsiDirectory)targetContainer,className);
      }
    }
  }
  if (message != null) {
    RefactoringMessageUtil.showErrorMessage(MoveInnerImpl.REFACTORING_NAME,message,HelpID.MOVE_INNER_UPPER,myProject);
    return;
  }
  RefactoringSettings.getInstance().MOVE_INNER_PREVIEW_USAGES=isPreviewUsages();
  if (myCbPassOuterClass.isSelected() && mySuggestedNameInfo != null) {
    mySuggestedNameInfo.nameChoosen(getParameterName());
  }
  myProcessor.run(this);
}
