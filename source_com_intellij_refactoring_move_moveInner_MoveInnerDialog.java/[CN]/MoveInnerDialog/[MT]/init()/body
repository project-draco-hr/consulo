{
  final PsiManager manager=myInnerClass.getManager();
  myClassNameField.setText(myInnerClass.getName());
  myClassNameField.selectAll();
  if (!myInnerClass.hasModifierProperty(PsiModifier.STATIC)) {
    PsiType outerType=manager.getElementFactory().createType(myInnerClass.getContainingClass());
    mySuggestedNameInfo=CodeStyleManager.getInstance(myProject).suggestVariableName(VariableKind.PARAMETER,null,null,outerType);
    String[] variants=mySuggestedNameInfo.names;
    myParameterField=new NameSuggestionsField(variants,myProject);
    myCbPassOuterClass=new NonFocusableCheckBox();
    myCbPassOuterClass.setSelected(true);
    myCbPassOuterClass.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        myParameterField.setEnabled(myCbPassOuterClass.isSelected());
      }
    }
);
  }
 else {
    myParameterField=new NameSuggestionsField(new String[]{""},myProject);
    myParameterField.getComponent().setEnabled(false);
    myCbPassOuterClass=new NonFocusableCheckBox();
    myCbPassOuterClass.setSelected(false);
    myCbPassOuterClass.setEnabled(false);
    myParameterField.setEnabled(false);
  }
  myCbPassOuterClass.setText(RefactoringBundle.message("pass.outer.class.instance.as.parameter"));
  myCbSearchInComments=new NonFocusableCheckBox();
  myCbSearchInComments.setText(RefactoringBundle.getSearchInCommentsAndStringsText());
  myCbSearchForTextOccurences=new NonFocusableCheckBox();
  myCbSearchForTextOccurences.setText(RefactoringBundle.getSearchForTextOccurencesText());
  super.init();
}
