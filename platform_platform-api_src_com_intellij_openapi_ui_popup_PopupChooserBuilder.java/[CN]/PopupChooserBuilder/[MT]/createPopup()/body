{
  final JList list;
  BooleanFunction<KeyEvent> keyEventHandler=null;
  if (myChooserComponent instanceof JList) {
    list=(JList)myChooserComponent;
    myChooserComponent=ListWithFilter.wrap(list,new MyListWrapper(list),myItemsNamer);
    keyEventHandler=new BooleanFunction<KeyEvent>(){
      @Override public boolean fun(      KeyEvent keyEvent){
        list.dispatchEvent(keyEvent);
        return keyEvent.isConsumed();
      }
    }
;
  }
 else {
    list=null;
  }
  JPanel contentPane=new JPanel(new BorderLayout());
  if (!myForceMovable && myTitle != null) {
    JLabel label=new JLabel(myTitle);
    label.setBorder(BorderFactory.createEmptyBorder(2,5,2,5));
    label.setHorizontalAlignment(SwingConstants.CENTER);
    contentPane.add(label,BorderLayout.NORTH);
  }
  if (list != null) {
    if (list.getSelectedIndex() == -1 && myAutoselect) {
      list.setSelectedIndex(0);
    }
  }
  (list != null ? list : myChooserComponent).addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (UIUtil.isActionClick(e,MouseEvent.MOUSE_RELEASED) && !UIUtil.isSelectionButtonDown(e) && !e.isConsumed()) {
        if (myCloseOnEnter) {
          closePopup(true,e,true);
        }
 else {
          myItemChosenRunnable.run();
        }
      }
    }
  }
);
  registerClosePopupKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),false);
  if (myCloseOnEnter) {
    registerClosePopupKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),true);
  }
 else {
    registerKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),new ActionListener(){
      @Override public void actionPerformed(      ActionEvent event){
        myItemChosenRunnable.run();
      }
    }
);
  }
  for (  KeyStroke keystroke : myAdditionalKeystrokes) {
    registerClosePopupKeyboardAction(keystroke,true);
  }
  if (myChooserComponent instanceof ListWithFilter) {
    myScrollPane=((ListWithFilter)myChooserComponent).getScrollPane();
  }
 else   if (myChooserComponent instanceof JTable) {
    myScrollPane=createScrollPane((JTable)myChooserComponent);
  }
 else   if (myChooserComponent instanceof JTree) {
    myScrollPane=createScrollPane((JTree)myChooserComponent);
  }
 else {
    throw new IllegalStateException("PopupChooserBuilder is intended to be constructed with one of JTable, JTree, JList components");
  }
  myScrollPane.getViewport().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  Insets viewportPadding=UIUtil.getListViewportPadding();
  ((JComponent)myScrollPane.getViewport().getView()).setBorder(BorderFactory.createEmptyBorder(viewportPadding.top,viewportPadding.left,viewportPadding.bottom,viewportPadding.right));
  if (myChooserComponent instanceof ListWithFilter) {
    addCenterComponentToContentPane(contentPane,myChooserComponent);
  }
 else {
    addCenterComponentToContentPane(contentPane,myScrollPane);
  }
  if (mySouthComponent != null) {
    addSouthComponentToContentPane(contentPane,mySouthComponent);
  }
  if (myEastComponent != null) {
    addEastComponentToContentPane(contentPane,myEastComponent);
  }
  ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(contentPane,myChooserComponent);
  for (  JBPopupListener each : myListeners) {
    builder.addListener(each);
  }
  builder.setDimensionServiceKey(null,myDimensionServiceKey,myUseForXYLocation).setRequestFocus(myRequestFocus).setResizable(myForceResizable).setMovable(myForceMovable).setTitle(myForceMovable ? myTitle : null).setCancelCallback(myCancelCallback).setAlpha(myAlpha).setFocusOwners(myFocusOwners).setCancelKeyEnabled(myCancelKeyEnabled).setAdText(myAd,myAdAlignment).setKeyboardActions(myKeyboardActions).setMayBeParent(myMayBeParent).setLocateWithinScreenBounds(true).setCancelOnOtherWindowOpen(true).setModalContext(myModalContext).setCancelOnWindowDeactivation(myCancelOnWindowDeactivation).setCancelOnClickOutside(myCancelOnClickOutside).setCouldPin(myCouldPin);
  if (keyEventHandler != null) {
    builder.setKeyEventHandler(keyEventHandler);
  }
  if (myCommandButton != null) {
    builder.setCommandButton(myCommandButton);
  }
  if (myMinSize != null) {
    builder.setMinSize(myMinSize);
  }
  if (mySettingsButtons != null) {
    builder.setSettingButtons(mySettingsButtons);
  }
  myPopup=builder.createPopup();
  return myPopup;
}
