{
  if (element == null)   return null;
  UsageType classUsageType=getClassUsageType(element);
  if (classUsageType != null)   return classUsageType;
  if (element instanceof PsiLiteralExpression) {
    return UsageType.LITERAL_USAGE;
  }
  if (PsiTreeUtil.getParentOfType(element,PsiComment.class,false) != null) {
    return UsageType.COMMENT_USAGE;
  }
  UsageTypeProvider[] providers=element.getProject().getComponents(UsageTypeProvider.class);
  for (  UsageTypeProvider provider : providers) {
    UsageType usageType=provider.getUsageType(element);
    if (usageType != null) {
      return usageType;
    }
  }
  return null;
}
