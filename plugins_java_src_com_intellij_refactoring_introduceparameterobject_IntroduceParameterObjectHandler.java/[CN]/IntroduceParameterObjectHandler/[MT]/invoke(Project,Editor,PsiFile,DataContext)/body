{
  final ScrollingModel scrollingModel=editor.getScrollingModel();
  scrollingModel.scrollToCaret(ScrollType.MAKE_VISIBLE);
  final PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  PsiMethod selectedMethod=null;
  if (element instanceof PsiMethod) {
    selectedMethod=(PsiMethod)element;
  }
 else   if (element instanceof PsiParameter && ((PsiParameter)element).getDeclarationScope() instanceof PsiMethod) {
    selectedMethod=(PsiMethod)((PsiParameter)element).getDeclarationScope();
  }
 else {
    final CaretModel caretModel=editor.getCaretModel();
    final int position=caretModel.getOffset();
    final PsiElement elementAt=file.findElementAt(position);
    final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(elementAt,PsiMethodCallExpression.class);
    if (methodCallExpression != null) {
      selectedMethod=methodCallExpression.resolveMethod();
    }
 else {
      final PsiParameterList parameterList=PsiTreeUtil.getParentOfType(elementAt,PsiParameterList.class);
      if (parameterList != null && parameterList.getParent() instanceof PsiMethod) {
        selectedMethod=(PsiMethod)parameterList.getParent();
      }
    }
  }
  if (selectedMethod == null) {
    final String message=RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.caret.should.be.positioned.at.the.name.of.the.method.to.be.refactored");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.IntroduceParameterObject);
    return;
  }
  invoke(project,selectedMethod,editor);
}
