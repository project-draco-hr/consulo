{
  super.visitPolyadicExpression(expression);
  final IElementType sign=expression.getOperationTokenType();
  if (!bitwiseTokens.contains(sign)) {
    return;
  }
  final PsiExpression[] operands=expression.getOperands();
  for (  PsiExpression operand : operands) {
    if (operand == null) {
      return;
    }
    final PsiType type=operand.getType();
    if (type == null || type.equals(PsiType.BOOLEAN) || type.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) {
      return;
    }
  }
  final boolean isPointless;
  if (sign.equals(JavaTokenType.AND) || sign.equals(JavaTokenType.OR) || sign.equals(JavaTokenType.XOR)) {
    isPointless=booleanExpressionIsPointless(operands);
  }
 else   if (sign.equals(JavaTokenType.LTLT) || sign.equals(JavaTokenType.GTGT) || sign.equals(JavaTokenType.GTGTGT)) {
    isPointless=shiftExpressionIsPointless(operands);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression,expression);
}
