{
  removeAll();
  final String[] lines=UIUtil.splitText(StringUtil.join(texts),getFontMetrics(BOLD_FONT),myWidthLimit,',');
  int index=0;
  int curOffset=0;
  myOneLineComponents=new OneLineComponent[lines.length];
  Map<TextRange,ParameterInfoUIContextEx.Flag> flagsMap=new TreeMap<TextRange,ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR);
  for (int i=0; i < texts.length; i++) {
    String line=texts[i];
    String text=lines[index];
    final EnumSet<ParameterInfoUIContextEx.Flag> flag=flags[i];
    if (flag.contains(ParameterInfoUIContextEx.Flag.HIGHLIGHT)) {
      flagsMap.put(TextRange.create(curOffset,curOffset + line.trim().length()),ParameterInfoUIContextEx.Flag.HIGHLIGHT);
    }
    if (flag.contains(ParameterInfoUIContextEx.Flag.DISABLE)) {
      flagsMap.put(TextRange.create(curOffset,curOffset + line.trim().length()),ParameterInfoUIContextEx.Flag.DISABLE);
    }
    if (flag.contains(ParameterInfoUIContextEx.Flag.STRIKEOUT)) {
      flagsMap.put(TextRange.create(curOffset,curOffset + line.trim().length()),ParameterInfoUIContextEx.Flag.STRIKEOUT);
    }
    curOffset+=line.length();
    if (text.trim().endsWith(line.trim())) {
      myOneLineComponents[index]=new OneLineComponent();
      myOneLineComponents[index].setup(text,flagsMap,background);
      add(myOneLineComponents[index],new GridBagConstraints(0,index,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
      index+=1;
      flagsMap.clear();
      curOffset=1;
    }
  }
}
