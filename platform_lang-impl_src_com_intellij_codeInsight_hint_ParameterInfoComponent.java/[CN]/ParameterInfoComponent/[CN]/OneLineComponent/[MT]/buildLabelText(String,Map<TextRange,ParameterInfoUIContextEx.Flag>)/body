{
  final StringBuilder labelText=new StringBuilder(text);
  final String disabledTag=FLAG_TO_TAG.get(ParameterInfoUIContextEx.Flag.DISABLE);
  int fault=0;
  if (isDisabledBeforeHighlight) {
    final String tag=getTag(disabledTag);
    labelText.insert(0,tag);
    fault+=tag.length();
  }
  final Map<TextRange,ParameterInfoUIContextEx.Flag> reverseOrderedMap=new TreeMap<TextRange,ParameterInfoUIContextEx.Flag>(Collections.reverseOrder(TEXT_RANGE_COMPARATOR));
  reverseOrderedMap.putAll(flagsMap);
  for (  Map.Entry<TextRange,ParameterInfoUIContextEx.Flag> entry : reverseOrderedMap.entrySet()) {
    final TextRange highlightRange=entry.getKey();
    final ParameterInfoUIContextEx.Flag flag=entry.getValue();
    if (flag == ParameterInfoUIContextEx.Flag.HIGHLIGHT && isDisabledBeforeHighlight) {
      final String tag=getClosingTag(disabledTag);
      labelText.insert(highlightRange.getStartOffset() + fault,tag);
      fault+=tag.length();
    }
    final String tagValue=FLAG_TO_TAG.get(flag);
    final String tag=getTag(tagValue);
    labelText.insert(highlightRange.getStartOffset() + fault,tag);
    fault+=tag.length();
  }
  for (  Map.Entry<TextRange,ParameterInfoUIContextEx.Flag> entry : flagsMap.entrySet()) {
    final TextRange highlightRange=entry.getKey();
    final ParameterInfoUIContextEx.Flag flag=entry.getValue();
    final String tagValue=FLAG_TO_TAG.get(flag);
    final String endTag=getClosingTag(tagValue);
    int end=highlightRange.getEndOffset() + fault;
    labelText.insert(end,endTag);
    fault+=endTag.length();
  }
  return "<html>" + labelText.toString() + "</html>";
}
