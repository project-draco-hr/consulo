{
  super(PsiAnnotation.EMPTY_ARRAY);
  myTypeElement=typeElement;
  final List<PsiTypeElement> typeElements=PsiTreeUtil.getChildrenOfTypeAsList(myTypeElement,PsiTypeElement.class);
  myTypes=Collections.unmodifiableList(ContainerUtil.map(typeElements,new Function<PsiTypeElement,PsiType>(){
    @Override public PsiType fun(    final PsiTypeElement psiTypeElement){
      return psiTypeElement.getType();
    }
  }
));
  final CachedValuesManager cacheManager=CachedValuesManager.getManager(myTypeElement.getProject());
  myLubCache=cacheManager.createCachedValue(new CachedValueProvider<PsiType>(){
    public Result<PsiType> compute(){
      PsiType lub=myTypes.get(0);
      for (int i=1; i < myTypes.size(); i++) {
        lub=GenericsUtil.getLeastUpperBound(lub,myTypes.get(i),myTypeElement.getManager());
      }
      return Result.create(lub,PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);
    }
  }
,false);
}
