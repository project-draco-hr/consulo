{
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(createTable(),BorderLayout.CENTER);
  myCbEncapsulateGet.setMnemonic('G');
  myCbEncapsulateSet.setMnemonic('S');
  myCbUseAccessorsWhenAccessible.setMnemonic('U');
  myRbFieldPrivate.setMnemonic('i');
  myRbFieldProtected.setMnemonic('r');
  myRbFieldPackageLocal.setMnemonic('c');
  myRbFieldAsIs.setMnemonic('A');
  myRbAccessorPublic.setMnemonic('b');
  myRbAccessorProtected.setMnemonic('o');
  myRbAccessorPrivate.setMnemonic('v');
  myRbAccessorPackageLocal.setMnemonic('k');
  ButtonGroup fieldGroup=new ButtonGroup();
  fieldGroup.add(myRbFieldAsIs);
  fieldGroup.add(myRbFieldPackageLocal);
  fieldGroup.add(myRbFieldPrivate);
  fieldGroup.add(myRbFieldProtected);
  ButtonGroup methodGroup=new ButtonGroup();
  methodGroup.add(myRbAccessorPackageLocal);
  methodGroup.add(myRbAccessorPrivate);
  methodGroup.add(myRbAccessorProtected);
  methodGroup.add(myRbAccessorPublic);
  myCbEncapsulateGet.setSelected(true);
  myCbEncapsulateSet.setSelected(true);
  ActionListener checkboxListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myCbEncapsulateGet.equals(e.getSource())) {
        if (!myCbEncapsulateGet.isSelected()) {
          myCbEncapsulateSet.setSelected(true);
        }
      }
 else {
        if (!myCbEncapsulateSet.isSelected()) {
          myCbEncapsulateGet.setSelected(true);
        }
      }
      int[] rows=myTable.getSelectedRows();
      myTableModel.fireTableDataChanged();
      TableUtil.selectRows(myTable,rows);
    }
  }
;
  myCbEncapsulateGet.addActionListener(checkboxListener);
  myCbEncapsulateSet.addActionListener(checkboxListener);
  myRbFieldAsIs.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      myCbUseAccessorsWhenAccessible.setEnabled(!myRbFieldAsIs.isSelected());
    }
  }
);
  myCbUseAccessorsWhenAccessible.setSelected(RefactoringSettings.getInstance().ENCAPSULATE_FIELDS_USE_ACCESSORS_WHEN_ACCESSIBLE);
  myRbFieldPrivate.setSelected(true);
  myRbAccessorPublic.setSelected(true);
  Box leftBox=Box.createVerticalBox();
  myCbEncapsulateGet.setPreferredSize(myCbUseAccessorsWhenAccessible.getPreferredSize());
  leftBox.add(myCbEncapsulateGet);
  leftBox.add(myCbEncapsulateSet);
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.setBorder(IdeBorderFactory.createTitledBorder("Encapsulate"));
  leftPanel.add(leftBox,BorderLayout.CENTER);
  leftPanel.add(Box.createHorizontalStrut(5),BorderLayout.WEST);
  Box rightBox=Box.createVerticalBox();
  rightBox.add(myCbUseAccessorsWhenAccessible);
  JPanel rightPanel=new JPanel(new BorderLayout());
  rightPanel.setBorder(IdeBorderFactory.createTitledBorder("Options"));
  rightPanel.add(rightBox,BorderLayout.CENTER);
  rightPanel.add(Box.createHorizontalStrut(5),BorderLayout.WEST);
  Box encapsulateBox=Box.createHorizontalBox();
  encapsulateBox.add(leftPanel);
  encapsulateBox.add(Box.createHorizontalStrut(5));
  encapsulateBox.add(rightPanel);
  Box fieldsBox=Box.createVerticalBox();
  fieldsBox.add(myRbFieldPrivate);
  fieldsBox.add(myRbFieldPackageLocal);
  fieldsBox.add(myRbFieldProtected);
  fieldsBox.add(myRbFieldAsIs);
  JPanel fieldsVisibilityPanel=new JPanel(new BorderLayout());
  fieldsVisibilityPanel.setBorder(IdeBorderFactory.createTitledBorder("Encapsulated Fields' Visibility"));
  fieldsVisibilityPanel.add(fieldsBox,BorderLayout.CENTER);
  fieldsVisibilityPanel.add(Box.createHorizontalStrut(5),BorderLayout.WEST);
  Box methodsBox=Box.createVerticalBox();
  methodsBox.add(myRbAccessorPublic);
  methodsBox.add(myRbAccessorProtected);
  methodsBox.add(myRbAccessorPackageLocal);
  methodsBox.add(myRbAccessorPrivate);
  JPanel methodsVisibilityPanel=new JPanel(new BorderLayout());
  methodsVisibilityPanel.setBorder(IdeBorderFactory.createTitledBorder("Accessors' Visibility"));
  methodsVisibilityPanel.add(methodsBox,BorderLayout.CENTER);
  methodsVisibilityPanel.add(Box.createHorizontalStrut(5),BorderLayout.WEST);
  Box visibilityBox=Box.createHorizontalBox();
  visibilityBox.add(fieldsVisibilityPanel);
  visibilityBox.add(Box.createHorizontalStrut(5));
  visibilityBox.add(methodsVisibilityPanel);
  Box box=Box.createVerticalBox();
  box.add(encapsulateBox);
  box.add(Box.createVerticalStrut(5));
  box.add(visibilityBox);
  JPanel boxPanel=new JPanel(new BorderLayout());
  boxPanel.add(box,BorderLayout.CENTER);
  boxPanel.add(Box.createVerticalStrut(5),BorderLayout.NORTH);
  panel.add(boxPanel,BorderLayout.SOUTH);
  return panel;
}
