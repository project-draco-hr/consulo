{
  super(project,true);
  myProject=project;
  myClass=aClass;
  myCallback=callback;
  String title="Encapsulate Fields";
  String qName=myClass.getQualifiedName();
  if (qName != null) {
    title+=" - " + qName;
  }
  setTitle(title);
  myFields=myClass.getFields();
  myFieldNames=new String[myFields.length];
  myCheckedMarks=new boolean[myFields.length];
  myFinalMarks=new boolean[myFields.length];
  myGetterNames=new String[myFields.length];
  mySetterNames=new String[myFields.length];
  myGetterPrototypes=new PsiMethod[myFields.length];
  mySetterPrototypes=new PsiMethod[myFields.length];
  for (int idx=0; idx < myFields.length; idx++) {
    PsiField field=myFields[idx];
    myCheckedMarks[idx]=preselectedFields.contains(field);
    myFinalMarks[idx]=field.hasModifierProperty(PsiModifier.FINAL);
    myFieldNames[idx]=PsiFormatUtil.formatVariable(field,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.TYPE_AFTER,PsiSubstitutor.EMPTY);
    myGetterNames[idx]=PropertyUtil.suggestGetterName(myProject,field);
    mySetterNames[idx]=PropertyUtil.suggestSetterName(myProject,field);
    myGetterPrototypes[idx]=generateMethodPrototype(field,myGetterNames[idx],true);
    mySetterPrototypes[idx]=generateMethodPrototype(field,mySetterNames[idx],false);
  }
  init();
}
