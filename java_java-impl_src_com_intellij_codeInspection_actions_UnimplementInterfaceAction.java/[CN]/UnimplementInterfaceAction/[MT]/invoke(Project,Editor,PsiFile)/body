{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(file))   return;
  final PsiReference psiReference=TargetElementUtilBase.findReference(editor);
  if (psiReference == null)   return;
  final PsiReferenceList referenceList=PsiTreeUtil.getParentOfType(psiReference.getElement(),PsiReferenceList.class);
  if (referenceList == null)   return;
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(referenceList,PsiClass.class);
  if (psiClass == null)   return;
  if (psiClass.getExtendsList() != referenceList && psiClass.getImplementsList() != referenceList)   return;
  PsiJavaCodeReferenceElement element=getTopLevelRef(psiReference,referenceList);
  if (element == null)   return;
  final PsiElement target=element.resolve();
  if (target == null || !(target instanceof PsiClass))   return;
  PsiClass targetClass=(PsiClass)target;
  final Map<PsiMethod,PsiMethod> implementations=new HashMap<PsiMethod,PsiMethod>();
  for (  PsiMethod psiMethod : targetClass.getAllMethods()) {
    final PsiMethod implementingMethod=MethodSignatureUtil.findMethodBySuperMethod(psiClass,psiMethod,false);
    if (implementingMethod != null) {
      implementations.put(psiMethod,implementingMethod);
    }
  }
  element.delete();
  final Set<PsiMethod> superMethods=new HashSet<PsiMethod>();
  for (  PsiClass aClass : psiClass.getSupers()) {
    Collections.addAll(superMethods,aClass.getAllMethods());
  }
  final PsiMethod[] psiMethods=targetClass.getAllMethods();
  for (  PsiMethod psiMethod : psiMethods) {
    if (superMethods.contains(psiMethod))     continue;
    final PsiMethod impl=implementations.get(psiMethod);
    if (impl != null)     impl.delete();
  }
}
