{
  if (root.canRepresent(element))   return root;
  if (root instanceof ProjectViewNode && file != null && !((ProjectViewNode)root).contains(file))   return null;
  DefaultMutableTreeNode currentNode=getNodeForElement(root);
  boolean expanded=currentNode != null && getTree().isExpanded(new TreePath(currentNode.getPath()));
  List<AbstractTreeNode> kids=getOrBuildChildren(root);
  for (  AbstractTreeNode node : kids) {
    if (nonStopCondition.value(node)) {
      AbstractTreeNode result=expandPathTo(file,node,element,nonStopCondition);
      if (result != null) {
        currentNode=getNodeForElement(root);
        if (currentNode != null) {
          final TreePath path=new TreePath(currentNode.getPath());
          if (!getTree().isExpanded(path)) {
            getTree().expandPath(path);
          }
        }
        return result;
      }
 else       if (!expanded) {
        hideChildrenFor(currentNode);
      }
    }
  }
  return null;
}
