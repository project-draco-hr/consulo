{
  if (!usedClasses.add(containingClass))   return;
  final PsiClass eventListener=JavaPsiFacade.getInstance(call.getProject()).findClass("java.util.EventListener",call.getResolveScope());
  Map<String,PsiMethod> writableProperties=new HashMap<String,PsiMethod>();
  for (  PsiMethod method : containingClass.getAllMethods()) {
    if (GroovyPropertyUtils.isSimplePropertySetter(method) && !method.hasModifierProperty(PsiModifier.STATIC)) {
      final String name=GroovyPropertyUtils.getPropertyNameBySetter(method);
      if (name != null && !writableProperties.containsKey(name)) {
        writableProperties.put(name,method);
      }
    }
 else     if (eventListener != null) {
      consumeListenerProperties(result,usedNames,method,eventListener);
    }
  }
  for (  String name : writableProperties.keySet()) {
    if (usedNames.contains(name))     continue;
    usedNames.add(name);
    final LookupElementBuilder builder=LookupElementBuilder.create(writableProperties.get(name),name).setIcon(GroovyIcons.PROPERTY).setInsertHandler(NamedArgumentInsertHandler.INSTANCE);
    result.addElement(builder);
  }
}
