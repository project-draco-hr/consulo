{
  final GrArgumentList argumentList;
  PsiElement parent=parameters.getPosition().getParent();
  if (parent instanceof GrReferenceExpression) {
    if (((GrReferenceExpression)parent).getQualifier() != null)     return;
    argumentList=(GrArgumentList)parent.getParent();
  }
 else {
    argumentList=(GrArgumentList)parent.getParent().getParent();
  }
  final GrCall call=(GrCall)argumentList.getParent();
  List<GroovyResolveResult> results=new ArrayList<GroovyResolveResult>();
  if (call instanceof GrConstructorCall) {
    GrConstructorCall constructorCall=(GrConstructorCall)call;
    ContainerUtil.addAll(results,constructorCall.multiResolveConstructor());
    ContainerUtil.addAll(results,constructorCall.multiResolveClass());
  }
 else   if (call instanceof GrCallExpression) {
    GrCallExpression constructorCall=(GrCallExpression)call;
    ContainerUtil.addAll(results,constructorCall.getCallVariants(null));
    final PsiType type=((GrCallExpression)call).getType();
    if (type instanceof PsiClassType) {
      final PsiClass psiClass=((PsiClassType)type).resolve();
      results.add(new GroovyResolveResultImpl(psiClass,true));
    }
  }
  Set<PsiClass> usedClasses=new HashSet<PsiClass>();
  Set<String> usedNames=new HashSet<String>();
  for (  GrNamedArgument argument : argumentList.getNamedArguments()) {
    final GrArgumentLabel label=argument.getLabel();
    if (label != null) {
      final String name=label.getName();
      if (name != null) {
        usedNames.add(name);
      }
    }
  }
  for (  GroovyResolveResult resolveResult : results) {
    PsiElement element=resolveResult.getElement();
    if (element instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)element;
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null) {
        addPropertiesForClass(result,usedClasses,usedNames,containingClass,call);
      }
      if (method instanceof GrMethod) {
        for (        String parameter : ((GrMethod)method).getNamedParametersArray()) {
          if (!usedNames.contains(parameter)) {
            final LookupElementBuilder lookup=LookupElementBuilder.create(parameter).setIcon(GroovyIcons.DYNAMIC).setInsertHandler(NamedArgumentInsertHandler.INSTANCE);
            result.addElement(lookup);
          }
        }
      }
    }
 else     if (element instanceof PsiClass) {
      addPropertiesForClass(result,usedClasses,usedNames,(PsiClass)element,call);
    }
  }
}
