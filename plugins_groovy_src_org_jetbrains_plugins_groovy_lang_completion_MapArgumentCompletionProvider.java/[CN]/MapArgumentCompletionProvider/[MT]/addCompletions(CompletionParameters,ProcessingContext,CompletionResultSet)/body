{
  PsiElement mapOrArgumentList;
  PsiElement parent=parameters.getPosition().getParent();
  if (parent instanceof GrReferenceExpression) {
    if (((GrReferenceExpression)parent).getQualifier() != null)     return;
    mapOrArgumentList=parent.getParent();
  }
 else {
    mapOrArgumentList=parent.getParent().getParent();
  }
  PsiElement argumentList=mapOrArgumentList instanceof GrArgumentList ? mapOrArgumentList : mapOrArgumentList.getParent();
  final GrCall call=(GrCall)argumentList.getParent();
  Map<String,GroovyNamedArgumentProvider.ArgumentDescriptor> map=GroovyNamedArgumentProvider.getNamedArgumentsFromAllProviders(call,null,true);
  for (  GrNamedArgument argument : PsiUtil.getFirstMapNamedArguments(call)) {
    map.remove(argument.getLabelName());
  }
  for (  Map.Entry<String,GroovyNamedArgumentProvider.ArgumentDescriptor> entry : map.entrySet()) {
    LookupElement lookup=LookupElementBuilder.create(entry.getKey(),entry.getKey()).setIcon(GroovyIcons.DYNAMIC).setInsertHandler(NamedArgumentInsertHandler.INSTANCE).setTailText(":");
    if (entry.getValue().isShowFirst()) {
      lookup=PrioritizedLookupElement.withPriority(lookup,1);
    }
 else {
      lookup=PrioritizedLookupElement.withPriority(lookup,-1);
    }
    result.addElement(lookup);
  }
}
