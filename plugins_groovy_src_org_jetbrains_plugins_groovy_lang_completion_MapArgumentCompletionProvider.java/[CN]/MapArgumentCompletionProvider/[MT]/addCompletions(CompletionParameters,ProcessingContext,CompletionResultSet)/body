{
  PsiElement mapOrArgumentList;
  PsiElement parent=parameters.getPosition().getParent();
  if (parent instanceof GrReferenceExpression) {
    if (((GrReferenceExpression)parent).getQualifier() != null)     return;
    mapOrArgumentList=parent.getParent();
  }
 else {
    mapOrArgumentList=parent.getParent().getParent();
  }
  if (mapOrArgumentList instanceof GrListOrMap) {
    if (((GrListOrMap)mapOrArgumentList).getNamedArguments().length > 0) {
      result.stopHere();
    }
  }
  Map<String,GroovyNamedArgumentProvider.ArgumentDescriptor> map=calcNamedArgumentsForCall(mapOrArgumentList);
  boolean sure=!map.isEmpty();
  if (!sure) {
    map=findOtherNamedArgumentsInFile(mapOrArgumentList);
  }
  for (  GrNamedArgument argument : getSiblingNamedArguments(mapOrArgumentList)) {
    map.remove(argument.getLabelName());
  }
  for (  Map.Entry<String,GroovyNamedArgumentProvider.ArgumentDescriptor> entry : map.entrySet()) {
    LookupElementBuilder lookup=LookupElementBuilder.create(entry.getValue(),entry.getKey()).setInsertHandler(NamedArgumentInsertHandler.INSTANCE).setTailText(":");
    if (sure) {
      lookup=lookup.setIcon(GroovyIcons.DYNAMIC);
    }
 else {
      lookup=lookup.setItemTextForeground(DefaultHighlighter.MAP_KEY_COLOR);
    }
    result.addElement(lookup);
  }
}
