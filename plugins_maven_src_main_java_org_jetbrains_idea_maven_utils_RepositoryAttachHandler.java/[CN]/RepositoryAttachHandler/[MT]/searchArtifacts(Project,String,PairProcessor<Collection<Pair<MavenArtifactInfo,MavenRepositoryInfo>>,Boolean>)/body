{
  if (coord == null || coord.length() == 0)   return;
  final MavenArtifactInfo template;
  if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) {
    template=new MavenArtifactInfo(null,null,null,"jar",null,coord,null);
  }
 else {
    template=new MavenArtifactInfo(getMavenId(coord),"jar",null);
  }
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Maven",false){
    public void run(    @NotNull ProgressIndicator indicator){
      final Ref<List<Pair<MavenArtifactInfo,MavenRepositoryInfo>>> result=Ref.create(Collections.<Pair<MavenArtifactInfo,MavenRepositoryInfo>>emptyList());
      final Ref<Boolean> tooManyRef=Ref.create(Boolean.FALSE);
      try {
        MavenFacadeManager facade=MavenFacadeManager.getInstance();
        final List<Pair<MavenArtifactInfo,MavenRepositoryInfo>> resultList=new ArrayList<Pair<MavenArtifactInfo,MavenRepositoryInfo>>();
        for (        String serviceUrl : MavenRepositoryServicesManager.getServiceUrls()) {
          final List<MavenArtifactInfo> artifacts;
          artifacts=MavenRepositoryServicesManager.findArtifacts(template,serviceUrl);
          if (!artifacts.isEmpty()) {
            final List<MavenRepositoryInfo> repositories=MavenRepositoryServicesManager.getRepositories(serviceUrl);
            final HashMap<String,MavenRepositoryInfo> map=new HashMap<String,MavenRepositoryInfo>();
            for (            MavenRepositoryInfo repository : repositories) {
              map.put(repository.getId(),repository);
            }
            for (            MavenArtifactInfo artifact : artifacts) {
              if (artifact == null) {
                tooManyRef.set(Boolean.TRUE);
              }
 else {
                resultList.add(Pair.create(artifact,map.get(artifact.getRepositoryId())));
              }
            }
          }
        }
        result.set(resultList);
      }
 catch (      Exception e) {
        handleError(null,e);
      }
 finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            resultProcessor.process(result.get(),tooManyRef.get());
          }
        }
);
      }
    }
  }
);
}
