{
  return new RemoteTransferListenerImpl(){
    final Map<Resource,Long> myDownloads=new ConcurrentHashMap<Resource,Long>();
    @Override public void transferInitiated(    TransferEvent transferEvent){
      final String message=transferEvent.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";
      final String url=transferEvent.getRepositoryUrl();
      indicator.setText(message + ": " + url+ "/"+ transferEvent.getResource().getResourceName());
    }
    @Override public void transferStarted(    TransferEvent transferEvent){
    }
    @Override public void transferProgress(    TransferEvent transferEvent,    int length){
      final Resource resource=transferEvent.getResource();
      final long curComplete;
      if (!myDownloads.containsKey(resource)) {
        curComplete=length;
      }
 else {
        final long complete=myDownloads.get(resource).longValue();
        curComplete=complete + length;
      }
      myDownloads.put(resource,new Long(curComplete));
      long curTotal=0;
      long curProgress=0;
      boolean unknown=false;
      for (      Resource res : myDownloads.keySet()) {
        final long total=res.getResourceContentLength();
        final long complete=myDownloads.get(res).longValue();
        if (total == -1)         unknown=true;
 else         curTotal+=total;
        curProgress+=complete;
      }
      final StringBuilder sb=new StringBuilder();
      if (curTotal >= 1024) {
        sb.append((curProgress / 1024) + "/" + (curTotal == -1 ? "?" : (curTotal / 1024) + "K"));
      }
 else {
        sb.append(curProgress + "/" + (curTotal == -1 ? "?" : curTotal + "b"));
      }
      if (unknown) {
        indicator.setIndeterminate(true);
      }
 else {
        indicator.setIndeterminate(false);
        indicator.setFraction((double)curProgress / curTotal);
      }
      indicator.setText(sb.toString());
      indicator.setText2(transferEvent.getResource().getResourceName());
    }
    @Override public void transferCompleted(    TransferEvent transferEvent){
      transferProgress(transferEvent,0);
      if (true)       return;
      final StringBuilder sb=new StringBuilder();
      final long contentLength=transferEvent.getResource().getResourceContentLength();
      if (contentLength != -1) {
        String type=(transferEvent.getRequestType() == TransferEvent.RequestType.PUT ? "uploaded" : "downloaded");
        sb.append(contentLength >= 1024 ? (contentLength / 1024) + "K" : contentLength + "b");
        String name=transferEvent.getResource().getResourceName();
        name=name.substring(name.lastIndexOf('/') + 1,name.length());
        sb.append(" ");
        sb.append(type);
        sb.append("  (");
        sb.append(name);
        sb.append(")");
      }
      indicator.setText(sb.toString());
    }
    @Override public void transferError(    TransferEvent transferEvent){
      indicator.setText2(transferEvent.getException().getMessage());
    }
    @Override public void debug(    String s){
      indicator.setText2(s);
    }
  }
;
}
