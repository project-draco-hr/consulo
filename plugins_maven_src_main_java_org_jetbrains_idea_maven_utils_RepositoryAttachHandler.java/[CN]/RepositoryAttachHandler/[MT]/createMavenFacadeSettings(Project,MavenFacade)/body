{
  final MavenFacade.MavenFacadeSettings settings=new MavenFacade.MavenFacadeSettings();
  final MavenGeneralSettings generalSettings=MavenProjectsManager.getInstance(project).getGeneralSettings();
  settings.setLocalRepository(new MavenFacade.Repository("local",VfsUtil.pathToUrl(generalSettings.getEffectiveLocalRepository().getPath()),"default"));
  settings.getNexusUrls().add("http://repository.sonatype.org/service/local/");
  settings.getNexusUrls().add("http://maven.labs.intellij.net:8081/nexus/");
  final HashSet<String> urls=new HashSet<String>();
  if (mavenFacade != null) {
    try {
      final List<RepositoryType> repositories=mavenFacade.getRepositories();
      for (      RepositoryType repository : repositories) {
        if (urls.add(repository.getContentResourceURI()) && "maven2".equals(repository.getProvider())) {
          settings.getRemoteRepositories().add(new MavenFacade.Repository(repository.getId(),repository.getContentResourceURI(),"default"));
        }
      }
    }
 catch (    Exception e) {
    }
  }
  final MavenRepositoriesProvider provider=MavenRepositoriesProvider.getInstance();
  for (  String id : provider.getRepositoryIds()) {
    final String url=provider.getRepositoryUrl(id);
    if (urls.add(url)) {
      settings.getRemoteRepositories().add(new MavenFacade.Repository(id,url,StringUtil.notNullize(provider.getRepositoryLayout(id),"default")));
    }
  }
  return settings;
}
