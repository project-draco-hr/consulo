{
  if (coord == null)   return;
  final ArtifactType template=createTemplate(coord);
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Maven",false){
    public void run(    @NotNull ProgressIndicator indicator){
      final MavenFacadeManager mavenManager=ServiceManager.getService(project,MavenFacadeManager.class);
      final Ref<List<ArtifactType>> result=Ref.create(Collections.<ArtifactType>emptyList());
      final Ref<List<RepositoryType>> result2=Ref.create(Collections.<RepositoryType>emptyList());
      try {
        final MavenFacade mavenFacade=mavenManager.getMavenFacade(project);
        final String[] nexusUrls=getDefaultNexusUrls();
        final List<ArtifactType> resultList=new ArrayList<ArtifactType>();
        final List<RepositoryType> result2List=new ArrayList<RepositoryType>();
        for (        String nexusUrl : nexusUrls) {
          final List<ArtifactType> artifacts;
          try {
            artifacts=mavenFacade.findArtifacts(template,nexusUrl);
          }
 catch (          Exception ex) {
            handleError(null,ex);
            continue;
          }
          if (!artifacts.isEmpty()) {
            final List<RepositoryType> repositories=mavenFacade.getRepositories(nexusUrl);
            final HashMap<String,RepositoryType> map=new HashMap<String,RepositoryType>();
            for (            RepositoryType repository : repositories) {
              map.put(repository.getId(),repository);
            }
            result2List.addAll(repositories);
            for (            ArtifactType artifact : artifacts) {
              final RepositoryType repoType=map.get(artifact.getRepoId());
              artifact.setResourceUri(repoType == null ? null : repoType.getContentResourceURI());
            }
            resultList.addAll(artifacts);
          }
        }
        result.set(resultList);
        result2.set(result2List);
      }
 catch (      Exception e) {
        handleError(null,e);
      }
 finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            resultProcessor.process(result.get(),result2.get());
          }
        }
);
      }
    }
  }
);
}
