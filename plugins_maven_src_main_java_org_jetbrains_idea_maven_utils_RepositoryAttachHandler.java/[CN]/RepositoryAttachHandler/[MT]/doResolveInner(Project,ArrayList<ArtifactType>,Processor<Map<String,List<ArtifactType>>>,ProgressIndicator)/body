{
  final Ref<Map<String,List<ArtifactType>>> result=Ref.create(Collections.<String,List<ArtifactType>>emptyMap());
  final MavenFacadeManager mavenManager=ServiceManager.getService(project,MavenFacadeManager.class);
  try {
    final MavenFacade mavenFacade=mavenManager.getMavenFacade(project);
    mavenFacade.setMavenSettings(createMavenFacadeSettings(project));
    final RemoteTransferListener transferListener=fromProgressIndicator(indicator);
    UnicastRemoteObject.exportObject(transferListener,0);
    mavenFacade.setTransferListener(transferListener);
    try {
      result.set(mavenFacade.resolveDependencies(artifacts));
    }
  finally {
      UnicastRemoteObject.unexportObject(transferListener,true);
      mavenFacade.setTransferListener(null);
    }
  }
 catch (  Exception e) {
    handleError("Error resolving: " + artifacts,e);
  }
 finally {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        resultProcessor.process(result.get());
      }
    }
);
  }
}
