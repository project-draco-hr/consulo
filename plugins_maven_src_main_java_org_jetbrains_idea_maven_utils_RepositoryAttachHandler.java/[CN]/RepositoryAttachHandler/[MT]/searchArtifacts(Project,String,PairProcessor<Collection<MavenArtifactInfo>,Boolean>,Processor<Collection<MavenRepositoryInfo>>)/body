{
  if (coord == null)   return;
  final MavenArtifactInfo template=createTemplate(coord,null);
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Maven",false){
    public void run(    @NotNull ProgressIndicator indicator){
      final Ref<List<MavenArtifactInfo>> result=Ref.create(Collections.<MavenArtifactInfo>emptyList());
      final Ref<List<MavenRepositoryInfo>> result2=Ref.create(Collections.<MavenRepositoryInfo>emptyList());
      final Ref<Boolean> tooManyRef=Ref.create(Boolean.FALSE);
      try {
        MavenFacadeManager facade=MavenFacadeManager.getInstance();
        final String[] nexusUrls=getDefaultNexusUrls();
        final List<MavenArtifactInfo> resultList=new ArrayList<MavenArtifactInfo>();
        final List<MavenRepositoryInfo> result2List=new ArrayList<MavenRepositoryInfo>();
        for (        String nexusUrl : nexusUrls) {
          final List<MavenArtifactInfo> artifacts;
          try {
            artifacts=facade.findArtifacts(template,nexusUrl);
          }
 catch (          Exception ex) {
            LOG.warn("Accessing Nexus at: " + nexusUrl,ex);
            continue;
          }
          if (artifacts == null) {
            tooManyRef.set(Boolean.TRUE);
          }
 else           if (!artifacts.isEmpty()) {
            result2List.addAll(facade.getRepositories(nexusUrl));
            resultList.addAll(artifacts);
          }
        }
        result.set(resultList);
        result2.set(result2List);
      }
 catch (      Exception e) {
        handleError(null,e);
      }
 finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            repoProcessor.process(result2.get());
            resultProcessor.process(result.get(),tooManyRef.get());
          }
        }
);
      }
    }
  }
);
}
