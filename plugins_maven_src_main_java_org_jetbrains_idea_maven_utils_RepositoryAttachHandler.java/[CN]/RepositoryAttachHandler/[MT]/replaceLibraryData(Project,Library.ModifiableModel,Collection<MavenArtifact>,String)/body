{
  final String repoUrl=getLocalRepositoryUrl(project);
  for (  OrderRootType type : OrderRootType.getAllTypes()) {
    for (    String url : library.getUrls(type)) {
      if (url.startsWith(repoUrl)) {
        library.removeRoot(url,type);
      }
    }
  }
  final VirtualFileManager manager=VirtualFileManager.getInstance();
  for (  MavenArtifact each : artifacts) {
    try {
      File repoFile=each.getFile();
      File toFile=repoFile;
      if (copyTo != null) {
        toFile=new File(copyTo,repoFile.getName());
        if (repoFile.exists()) {
          FileUtil.copy(repoFile,toFile);
        }
      }
      String url=VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(toFile.getPath()));
      manager.refreshAndFindFileByUrl(url);
      if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) {
        library.addRoot(url,JavadocOrderRootType.getInstance());
      }
 else       if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) {
        library.addRoot(url,OrderRootType.SOURCES);
      }
 else {
        library.addRoot(url,OrderRootType.CLASSES);
      }
    }
 catch (    MalformedURLException e) {
      MavenLog.LOG.warn(e);
    }
catch (    IOException e) {
      MavenLog.LOG.warn(e);
    }
  }
}
