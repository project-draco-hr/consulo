{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  List<Library> addedLibraries=new ArrayList<Library>(model.myLibraries);
  addedLibraries.removeAll(myModel.myLibraries);
  List<Library> removedLibraries=new ArrayList<Library>(myModel.myLibraries);
  removedLibraries.removeAll(model.myLibraries);
  for (  Library library : removedLibraries) {
    fireBeforeLibraryRemoved(library);
  }
  for (  final Library library : model.myLibraries) {
    if (addedLibraries.contains(library))     continue;
    for (    final Library oldLibrary : myModel.myLibraries) {
      if (library.equals(oldLibrary) && library != oldLibrary) {
        final int index=model.myLibraries.indexOf(library);
        Disposer.dispose(library);
        model.myLibraries.set(index,oldLibrary);
        break;
      }
    }
  }
  myModel=model;
  for (  Library library : removedLibraries) {
    Disposer.dispose(library);
    fireAfterLibraryRemoved(library);
  }
  for (  Library library : addedLibraries) {
    fireLibraryAdded(library);
  }
}
