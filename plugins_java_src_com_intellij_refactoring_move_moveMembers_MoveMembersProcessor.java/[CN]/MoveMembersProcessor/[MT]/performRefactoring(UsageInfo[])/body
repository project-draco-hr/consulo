{
  try {
    PsiClass targetClass=JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(),GlobalSearchScope.projectScope(myProject));
    if (targetClass == null)     return;
    final Map<PsiMember,SmartPsiElementPointer<PsiElement>> anchors=new HashMap<PsiMember,SmartPsiElementPointer<PsiElement>>();
    final Map<PsiMember,PsiMember> anchorsInSourceClass=new HashMap<PsiMember,PsiMember>();
    for (    PsiMember member : myMembersToMove) {
      final MoveMemberHandler handler=MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage());
      if (handler != null) {
        final PsiElement anchor=handler.getAnchor(member,targetClass,myMembersToMove);
        if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember)anchor)) {
          anchorsInSourceClass.put(member,(PsiMember)anchor);
        }
 else {
          anchors.put(member,anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor));
        }
      }
    }
    ArrayList<MoveMembersUsageInfo> otherUsages=new ArrayList<MoveMembersUsageInfo>();
    for (    UsageInfo usageInfo : usages) {
      MoveMembersUsageInfo usage=(MoveMembersUsageInfo)usageInfo;
      if (!usage.reference.isValid())       continue;
      final MoveMemberHandler handler=MoveMemberHandler.EP_NAME.forLanguage(usageInfo.getElement().getLanguage());
      if (handler != null) {
        if (handler.changeExternalUsage(myOptions,usage))         continue;
      }
      otherUsages.add(usage);
    }
    final Map<PsiMember,PsiMember> movedMembers=new HashMap<PsiMember,PsiMember>();
    for (    PsiMember member : myMembersToMove) {
      ArrayList<PsiReference> refsToBeRebind=new ArrayList<PsiReference>();
      for (Iterator<MoveMembersUsageInfo> iterator=otherUsages.iterator(); iterator.hasNext(); ) {
        MoveMembersUsageInfo info=iterator.next();
        if (member.equals(info.member)) {
          PsiReference ref=info.getReference();
          if (ref != null) {
            refsToBeRebind.add(ref);
          }
          iterator.remove();
        }
      }
      final RefactoringElementListener elementListener=getTransaction().getElementListener(member);
      final MoveMemberHandler handler=MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage());
      if (handler != null) {
        final PsiElement anchor;
        if (anchorsInSourceClass.containsKey(member)) {
          final PsiMember memberInSourceClass=anchorsInSourceClass.get(member);
          anchor=memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null;
        }
 else {
          final SmartPsiElementPointer<PsiElement> pointer=anchors.get(member);
          anchor=pointer != null ? pointer.getElement() : null;
        }
        PsiMember newMember=handler.doMove(myOptions,member,anchor,targetClass);
        movedMembers.put(member,newMember);
        elementListener.elementMoved(newMember);
        fixModifierList(member,newMember,usages);
        for (        PsiReference reference : refsToBeRebind) {
          reference.bindToElement(newMember);
        }
      }
    }
    final MoveMemberHandler handler=MoveMemberHandler.EP_NAME.forLanguage(myTargetClass.getLanguage());
    if (handler != null)     handler.decodeContextInfo(myTargetClass);
    myMembersToMove.clear();
    if (myMoveCallback != null) {
      myMoveCallback.refactoringCompleted();
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
