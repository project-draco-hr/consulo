{
  final Set<RefClass> allClasses=new HashSet<RefClass>(classes);
  final Set<Set<RefClass>> out=new HashSet<Set<RefClass>>();
  while (allClasses.size() > 0) {
    final Set<RefClass> currentComponent=new HashSet<RefClass>();
    final List<RefClass> pendingClasses=new ArrayList<RefClass>();
    final RefClass seed=allClasses.iterator().next();
    allClasses.remove(seed);
    currentComponent.add(seed);
    pendingClasses.add(seed);
    while (pendingClasses.size() > 0) {
      final RefClass classToProcess=pendingClasses.remove(0);
      final Set<RefClass> relatedClasses=getRelatedClasses(aPackage,classToProcess);
      for (      RefClass relatedClass : relatedClasses) {
        if (!currentComponent.contains(relatedClass) && !pendingClasses.contains(relatedClass)) {
          currentComponent.add(relatedClass);
          pendingClasses.add(relatedClass);
          allClasses.remove(relatedClass);
        }
      }
    }
    out.add(currentComponent);
  }
  return out;
}
