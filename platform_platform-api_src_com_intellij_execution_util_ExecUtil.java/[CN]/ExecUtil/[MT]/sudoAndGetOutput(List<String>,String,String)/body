{
  if (SystemInfo.isMac) {
    final String escapedCommandLine=StringUtil.join(command,new Function<String,String>(){
      @Override public String fun(      String s){
        return escapeAppleScriptArgument(s);
      }
    }
," & \" \" & ");
    final String escapedScript="do shell script " + escapedCommandLine + " with administrator privileges";
    return execAndGetOutput(Arrays.asList(getOsascriptPath(),"-e",escapedScript),workDir);
  }
 else   if ("root".equals(System.getenv("USER"))) {
    return execAndGetOutput(command,workDir);
  }
 else   if (hasGkSudo.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.addAll(Arrays.asList("gksudo","--message",prompt,"--"));
    sudoCommand.addAll(command);
    return execAndGetOutput(sudoCommand,workDir);
  }
 else   if (hasKdeSudo.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.addAll(Arrays.asList("kdesudo","--comment",prompt,"--"));
    sudoCommand.addAll(command);
    return execAndGetOutput(sudoCommand,workDir);
  }
 else   if (hasPkExec.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.add("pkexec");
    sudoCommand.addAll(command);
    return execAndGetOutput(sudoCommand,workDir);
  }
 else   if (SystemInfo.isUnix && hasTerminalApp()) {
    final String escapedCommandLine=StringUtil.join(command,new Function<String,String>(){
      @Override public String fun(      String s){
        return escapeUnixShellArgument(s);
      }
    }
," ");
    final File script=createTempExecutableScript("sudo",".sh","#!/bin/sh\n" + "echo " + escapeUnixShellArgument(prompt) + "\n"+ "echo\n"+ "sudo -- "+ escapedCommandLine+ "\n"+ "STATUS=$?\n"+ "echo\n"+ "read -p \"Press Enter to close this window...\" TEMP\n"+ "exit $STATUS\n");
    return execAndGetOutput(getTerminalCommand("Install",script.getAbsolutePath()),workDir);
  }
  throw new UnsupportedSystemException();
}
