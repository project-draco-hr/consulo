{
  final File workDir=commandLine.getWorkDirectory();
  final List<String> command=new ArrayList<String>();
  command.add(commandLine.getExePath());
  command.addAll(commandLine.getParametersList().getList());
  final Map<String,String> environment=commandLine.getEnvironment();
  if (SystemInfo.isMac) {
    final String escapedCommandLine=StringUtil.join(command,new Function<String,String>(){
      @Override public String fun(      String s){
        return escapeAppleScriptArgument(s);
      }
    }
," & \" \" & ");
    final String escapedScript="tell current application\n" + "   activate\n" + "   do shell script " + escapedCommandLine + " with administrator privileges without altering line endings\n"+ "end tell";
    return new GeneralCommandLine(getOsascriptPath(),"-e",escapedScript).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
 else   if ("root".equals(System.getenv("USER"))) {
    return new GeneralCommandLine(command).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
 else   if (hasGkSudo.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.addAll(Arrays.asList("gksudo","--message",prompt,"--"));
    sudoCommand.addAll(command);
    return new GeneralCommandLine(sudoCommand).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
 else   if (hasKdeSudo.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.addAll(Arrays.asList("kdesudo","--comment",prompt,"--"));
    sudoCommand.addAll(command);
    return new GeneralCommandLine(sudoCommand).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
 else   if (hasPkExec.getValue()) {
    final List<String> sudoCommand=new ArrayList<String>();
    sudoCommand.add("pkexec");
    sudoCommand.addAll(command);
    return new GeneralCommandLine(sudoCommand).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
 else   if (SystemInfo.isUnix && hasTerminalApp()) {
    final String escapedCommandLine=StringUtil.join(command,new Function<String,String>(){
      @Override public String fun(      String s){
        return escapeUnixShellArgument(s);
      }
    }
," ");
    final File script=createTempExecutableScript("sudo",".sh","#!/bin/sh\n" + "echo " + escapeUnixShellArgument(prompt) + "\n"+ "echo\n"+ "sudo -- "+ escapedCommandLine+ "\n"+ "STATUS=$?\n"+ "echo\n"+ "read -p \"Press Enter to close this window...\" TEMP\n"+ "exit $STATUS\n");
    return new GeneralCommandLine(getTerminalCommand("Install",script.getAbsolutePath())).withWorkDirectory(workDir).withEnvironment(environment).createProcess();
  }
  throw new UnsupportedSystemException();
}
