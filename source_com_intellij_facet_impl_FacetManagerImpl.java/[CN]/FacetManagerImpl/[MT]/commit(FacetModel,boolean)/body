{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  LOG.assertTrue(!myInsideCommit,"Recursive commit");
  try {
    myInsideCommit=true;
    Set<Facet> toRemove=new HashSet<Facet>(Arrays.asList(getAllFacets()));
    List<Facet> toAdd=new ArrayList<Facet>();
    for (    Facet facet : model.getAllFacets()) {
      boolean isNew=!toRemove.remove(facet);
      if (isNew) {
        toAdd.add(facet);
      }
    }
    if (fireEvents) {
      for (      Facet facet : toAdd) {
        myDispatcher.getMulticaster().beforeFacetAdded(facet);
      }
      for (      Facet facet : toRemove) {
        myDispatcher.getMulticaster().beforeFacetRemoved(facet);
      }
    }
    List<Facet> newFacets=new ArrayList<Facet>();
    for (    Facet facet : getAllFacets()) {
      if (!toRemove.contains(facet)) {
        newFacets.add(facet);
      }
    }
    newFacets.addAll(toAdd);
    myModel.setAllFacets(newFacets.toArray(new Facet[newFacets.size()]));
    if (fireEvents) {
      for (      Facet facet : toAdd) {
        myDispatcher.getMulticaster().facetAdded(facet);
      }
      for (      Facet facet : toRemove) {
        myDispatcher.getMulticaster().facetRemoved(facet);
      }
    }
    for (    Facet facet : toAdd) {
      facet.initFacet();
    }
    for (    Facet facet : toRemove) {
      Disposer.dispose(facet);
    }
  }
  finally {
    myInsideCommit=false;
  }
}
