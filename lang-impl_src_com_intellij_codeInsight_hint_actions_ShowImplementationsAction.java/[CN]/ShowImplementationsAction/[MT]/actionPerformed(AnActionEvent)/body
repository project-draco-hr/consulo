{
  final DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement element;
  if (editor != null) {
    element=TargetElementUtil.findTargetElement(editor,TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtil.LOOKUP_ITEM_ACCEPTED| TargetElementUtil.NEW_AS_CONSTRUCTOR| TargetElementUtil.THIS_ACCEPTED| TargetElementUtil.SUPER_ACCEPTED);
  }
 else {
    element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (file != null) {
      final FileEditor fileEditor=FileEditorManager.getInstance(project).getSelectedEditor(file.getVirtualFile());
      if (fileEditor instanceof TextEditor) {
        editor=((TextEditor)fileEditor).getEditor();
      }
    }
  }
  final PsiReference ref;
  if (element == null && editor != null) {
    ref=TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset());
    if (ref != null) {
      final PsiElement parent=ref.getElement().getParent();
      if (parent instanceof PsiMethodCallExpression) {
        element=parent;
      }
    }
  }
 else {
    ref=null;
  }
  if (element instanceof PsiAnonymousClass) {
    element=((PsiAnonymousClass)element).getBaseClassType().resolve();
  }
  String text="";
  PsiElement[] impls=null;
  if (element != null) {
    if (element instanceof PsiPackage)     return;
    impls=getSelfAndImplementations(editor,element);
    text=SymbolPresentationUtil.getSymbolPresentableText(element);
  }
 else   if (ref instanceof PsiPolyVariantReference) {
    final PsiPolyVariantReference polyReference=(PsiPolyVariantReference)ref;
    text=polyReference.getRangeInElement().substring(polyReference.getElement().getText());
    final ResolveResult[] results=polyReference.multiResolve(false);
    final List<PsiElement> implsList=new ArrayList<PsiElement>(results.length);
    for (    ResolveResult result : results) {
      final PsiElement resolvedElement=result.getElement();
      if (resolvedElement != null && resolvedElement.isPhysical()) {
        implsList.add(resolvedElement);
      }
    }
    if (!implsList.isEmpty()) {
      implsList.toArray(impls=new PsiElement[implsList.size()]);
    }
  }
  showImplementations(impls,project,text,editor);
}
