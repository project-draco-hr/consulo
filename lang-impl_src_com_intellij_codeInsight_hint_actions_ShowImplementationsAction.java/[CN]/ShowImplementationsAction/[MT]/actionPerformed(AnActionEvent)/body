{
  final DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement element;
  if (editor != null) {
    element=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.getInstance().getAllAccepted());
  }
 else {
    element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (file != null) {
      final FileEditor fileEditor=FileEditorManager.getInstance(project).getSelectedEditor(file.getVirtualFile());
      if (fileEditor instanceof TextEditor) {
        editor=((TextEditor)fileEditor).getEditor();
      }
    }
  }
  final PsiElement adjustedElement=TargetElementUtilBase.getInstance().adjustElement(editor,TargetElementUtilBase.getInstance().getAllAccepted(),element,null);
  if (adjustedElement != null) {
    element=adjustedElement;
  }
  final PsiReference ref;
  if (element == null && editor != null) {
    ref=TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset());
    if (ref != null) {
      element=TargetElementUtilBase.getInstance().adjustReference(ref);
    }
  }
 else {
    ref=null;
  }
  if (element == null && file != null && editor != null) {
    element=DocumentationManager.getInstance(project).getElementFromLookup(editor,file);
  }
  String text="";
  PsiElement[] impls=null;
  if (element != null) {
    impls=getSelfAndImplementations(editor,element);
    text=SymbolPresentationUtil.getSymbolPresentableText(element);
  }
 else   if (ref instanceof PsiPolyVariantReference) {
    final PsiPolyVariantReference polyReference=(PsiPolyVariantReference)ref;
    text=polyReference.getRangeInElement().substring(polyReference.getElement().getText());
    final ResolveResult[] results=polyReference.multiResolve(false);
    final List<PsiElement> implsList=new ArrayList<PsiElement>(results.length);
    for (    ResolveResult result : results) {
      final PsiElement resolvedElement=result.getElement();
      if (resolvedElement != null && resolvedElement.isPhysical()) {
        implsList.add(resolvedElement);
      }
    }
    if (!implsList.isEmpty()) {
      implsList.toArray(impls=new PsiElement[implsList.size()]);
    }
  }
  showImplementations(impls,project,text,editor,file);
}
