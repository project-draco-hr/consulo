{
  if (impls == null || impls.length == 0)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed(CODEASSISTS_QUICKDEFINITION_FEATURE);
  if (LookupManager.getInstance(project).getActiveLookup() != null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed(CODEASSISTS_QUICKDEFINITION_LOOKUP_FEATURE);
  }
  int index=0;
  if (editor != null && file != null && impls.length > 1) {
    final VirtualFile virtualFile=file.getVirtualFile();
    final PsiFile containingFile=impls[0].getContainingFile();
    if (virtualFile != null && containingFile != null && virtualFile.equals(containingFile.getVirtualFile())) {
      index=1;
    }
  }
  final ImplementationViewComponent component=new ImplementationViewComponent(impls,index);
  if (component.hasElementsToShow()) {
    final PopupUpdateProcessor updateProcessor=new PopupUpdateProcessor(){
      public void updatePopup(      Object lookupItemObject){
        final PsiElement element=lookupItemObject instanceof PsiElement ? (PsiElement)lookupItemObject : DocumentationManager.getInstance(project).getElementFromLookup(editor,file);
        updateElementImplementations(element,editor,project,file);
      }
    }
;
    final String title=CodeInsightBundle.message("implementation.view.title",text);
    final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component.getPrefferedFocusableComponent()).setRequestFocusCondition(project,NotLookupOrSearchCondition.INSTANCE).setProject(project).addListener(updateProcessor).addUserData(updateProcessor).setDimensionServiceKey(project,"ShowImplementationPopup",false).setResizable(true).setMovable(true).setTitle(title).createPopup();
    popup.showInBestPositionFor(DataManager.getInstance().getDataContext());
    component.setHint(popup,title);
  }
}
