{
  runner.clearStatus();
  try {
    Constructor constructor=testClass.getConstructor(new Class[]{String.class});
    return (Test)constructor.newInstance(new Object[]{methodName});
  }
 catch (  NoSuchMethodException e) {
    try {
      Constructor constructor=testClass.getConstructor(new Class[0]);
      TestCase test=(TestCase)constructor.newInstance(new Object[0]);
      test.setName(methodName);
      return test;
    }
 catch (    ClassCastException e1) {
      boolean methodExists;
      try {
        testClass.getMethod(methodName,new Class[0]);
        methodExists=true;
      }
 catch (      NoSuchMethodException e2) {
        methodExists=false;
      }
      if (!methodExists) {
        String error=MessageFormat.format(ourBundle.getString("junit.method.not.found"),new Object[]{methodName});
        String message=MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{error});
        return new FailedTestCase(testClass,methodName,message,null);
      }
      runner.runFailed(MessageFormat.format(ourBundle.getString("junit.class.not.derived"),new Object[]{testClass.getName()}));
      return null;
    }
catch (    Exception e1) {
      String message=MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{e1.toString()});
      return new FailedTestCase(testClass,methodName,message,e1);
    }
  }
catch (  Exception e) {
    String message=MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{e.toString()});
    return new FailedTestCase(testClass,methodName,message,e);
  }
}
