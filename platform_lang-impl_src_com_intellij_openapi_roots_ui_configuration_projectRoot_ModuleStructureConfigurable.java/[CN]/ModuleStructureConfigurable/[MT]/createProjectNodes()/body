{
  final Map<ModuleGroup,MyNode> moduleGroup2NodeMap=new HashMap<ModuleGroup,MyNode>();
  final Module[] modules=myModuleManager.getModules();
  for (  final Module module : modules) {
    ModuleConfigurable configurable=new ModuleConfigurable(myContext.myModulesConfigurator,module,TREE_UPDATER);
    final MyNode moduleNode=new MyNode(configurable);
    final String[] groupPath=myPlainMode ? null : myContext.myModulesConfigurator.getModuleModel().getModuleGroupPath(module);
    if (groupPath == null || groupPath.length == 0) {
      addNode(moduleNode,myRoot);
    }
 else {
      final MyNode moduleGroupNode=ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath),myRoot,moduleGroup2NodeMap,new Consumer<ModuleGroupUtil.ParentChildRelation<MyNode>>(){
        @Override public void consume(        final ModuleGroupUtil.ParentChildRelation<MyNode> parentChildRelation){
          addNode(parentChildRelation.getChild(),parentChildRelation.getParent());
        }
      }
,new Function<ModuleGroup,MyNode>(){
        @Override public MyNode fun(        final ModuleGroup moduleGroup){
          final NamedConfigurable moduleGroupConfigurable=createModuleGroupConfigurable(moduleGroup);
          return new MyNode(moduleGroupConfigurable,true);
        }
      }
);
      addNode(moduleNode,moduleGroupNode);
    }
  }
  if (myProject.isDefault()) {
    myRoot.removeAllChildren();
  }
}
