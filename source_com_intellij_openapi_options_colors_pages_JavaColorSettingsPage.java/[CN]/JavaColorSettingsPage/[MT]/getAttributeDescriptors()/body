{
  List<AttributesDescriptor> descriptors=new ArrayList<AttributesDescriptor>();
  descriptors.addAll(Arrays.asList(ourDescriptors));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.unknown.symbol"),CodeInsightColors.WRONG_REFERENCES_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.deprecated.symbol"),CodeInsightColors.DEPRECATED_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.unused.symbol"),CodeInsightColors.NOT_USED_ELEMENT_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.error"),CodeInsightColors.ERRORS_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.warning"),CodeInsightColors.WARNINGS_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.info"),CodeInsightColors.INFO_ATTRIBUTES));
  descriptors.add(new AttributesDescriptor(OptionsBundle.message("options.java.attribute.descriptor.server.problems"),CodeInsightColors.GENERIC_SERVER_ERROR_OR_WARNING));
  final Collection<HighlightInfoType.HighlightInfoTypeImpl> infoTypes=SeverityRegistrar.getRegisteredHighlightingInfoTypes();
  for (  HighlightInfoType type : infoTypes) {
    descriptors.add(new AttributesDescriptor(type.getSeverity(null).toString(),type.getAttributesKey()));
  }
  return descriptors.toArray(new AttributesDescriptor[descriptors.size()]);
}
