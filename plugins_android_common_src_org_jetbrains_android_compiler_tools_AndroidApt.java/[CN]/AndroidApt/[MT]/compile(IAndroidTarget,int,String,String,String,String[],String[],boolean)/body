{
  final Map<AndroidCompilerMessageKind,List<String>> messages=new HashMap<AndroidCompilerMessageKind,List<String>>();
  messages.put(AndroidCompilerMessageKind.ERROR,new ArrayList<String>());
  messages.put(AndroidCompilerMessageKind.INFORMATION,new ArrayList<String>());
  final File outOsDir=new File(outDirOsPath);
  if (!outOsDir.exists()) {
    if (!outOsDir.mkdirs()) {
      messages.get(AndroidCompilerMessageKind.ERROR).add("Unable to create directory " + outDirOsPath);
    }
  }
  final String packageFolderOsPath=FileUtil.toSystemDependentName(outDirOsPath + '/' + aPackage.replace('.','/'));
  final File manifestJavaFile=new File(packageFolderOsPath + File.separatorChar + AndroidCommonUtils.MANIFEST_JAVA_FILE_NAME);
  if (manifestJavaFile.exists()) {
    if (!FileUtil.delete(manifestJavaFile)) {
      messages.get(AndroidCompilerMessageKind.ERROR).add("Unable to delete " + manifestJavaFile.getPath());
    }
  }
  final File rJavaFile=new File(packageFolderOsPath + File.separatorChar + AndroidCommonUtils.R_JAVA_FILENAME);
  if (rJavaFile.exists()) {
    if (!FileUtil.delete(rJavaFile)) {
      messages.get(AndroidCompilerMessageKind.ERROR).add("Unable to delete " + rJavaFile.getPath());
    }
  }
  final File[] libRJavaFiles=new File[libPackages.length];
  for (int i=0; i < libPackages.length; i++) {
    final String libPackageFolderOsPath=FileUtil.toSystemDependentName(outDirOsPath + '/' + libPackages[i].replace('.','/'));
    libRJavaFiles[i]=new File(libPackageFolderOsPath + File.separatorChar + AndroidCommonUtils.R_JAVA_FILENAME);
  }
  for (  File libRJavaFile : libRJavaFiles) {
    if (libRJavaFile.exists()) {
      if (!FileUtil.delete(libRJavaFile)) {
        messages.get(AndroidCompilerMessageKind.ERROR).add("Unable to delete " + libRJavaFile.getPath());
      }
    }
  }
  if (platformToolsRevision < 0 || platformToolsRevision > 7) {
    Map<AndroidCompilerMessageKind,List<String>> map=doCompile(target,manifestFileOsPath,outDirOsPath,resourceDirsOsPaths,libPackages,null,nonConstantFields);
    if (map.get(AndroidCompilerMessageKind.ERROR).isEmpty()) {
      makeFieldsNotFinal(libRJavaFiles);
    }
    AndroidExecutionUtil.addMessages(messages,map);
    return messages;
  }
 else {
    Map<AndroidCompilerMessageKind,List<String>> map;
    map=doCompile(target,manifestFileOsPath,outDirOsPath,resourceDirsOsPaths,ArrayUtil.EMPTY_STRING_ARRAY,null,false);
    AndroidExecutionUtil.addMessages(messages,map);
    for (    String libPackage : libPackages) {
      map=doCompile(target,manifestFileOsPath,outDirOsPath,resourceDirsOsPaths,ArrayUtil.EMPTY_STRING_ARRAY,libPackage,false);
      AndroidExecutionUtil.addMessages(messages,map);
    }
    return messages;
  }
}
