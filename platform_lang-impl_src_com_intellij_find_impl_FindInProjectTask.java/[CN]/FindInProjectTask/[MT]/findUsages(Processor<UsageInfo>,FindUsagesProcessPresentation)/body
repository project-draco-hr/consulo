{
  try {
    myProgress.setIndeterminate(true);
    myProgress.setText("Scanning indexed files...");
    final Set<PsiFile> filesForFastWordSearch=ApplicationManager.getApplication().runReadAction(new Computable<Set<PsiFile>>(){
      @Override public Set<PsiFile> compute(){
        return getFilesForFastWordSearch();
      }
    }
);
    myProgress.setIndeterminate(false);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Searching for " + myFindModel.getStringToFind() + " in "+ filesForFastWordSearch.size()+ " indexed files");
    }
    searchInFiles(filesForFastWordSearch,processPresentation,consumer);
    myProgress.setIndeterminate(true);
    myProgress.setText("Scanning non-indexed files...");
    boolean skipIndexed=canRelyOnIndices();
    final Collection<PsiFile> otherFiles=collectFilesInScope(filesForFastWordSearch,skipIndexed);
    myProgress.setIndeterminate(false);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Searching for " + myFindModel.getStringToFind() + " in "+ otherFiles.size()+ " non-indexed files");
    }
    long start=System.currentTimeMillis();
    searchInFiles(otherFiles,processPresentation,consumer);
    if (skipIndexed && otherFiles.size() > 1000) {
      logStats(otherFiles,start);
    }
  }
 catch (  ProcessCanceledException e) {
    processPresentation.setCanceled(true);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Usage search canceled",e);
    }
  }
  if (!myLargeFiles.isEmpty()) {
    processPresentation.setLargeFilesWereNotScanned(myLargeFiles);
  }
  if (!myProgress.isCanceled()) {
    myProgress.setText(FindBundle.message("find.progress.search.completed"));
  }
}
