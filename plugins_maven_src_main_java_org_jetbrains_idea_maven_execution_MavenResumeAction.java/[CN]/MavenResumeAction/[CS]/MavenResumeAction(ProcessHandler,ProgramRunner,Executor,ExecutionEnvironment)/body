{
  super("Resume build from specified module",null,AllIcons.RunConfigurations.RerunFailedTests);
  myRunner=runner;
  myExecutor=executor;
  myEnvironment=environment;
  final MavenRunConfiguration runConfiguration=(MavenRunConfiguration)environment.getRunProfile();
  getTemplatePresentation().setEnabled(false);
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      if (myState == STATE_WTF)       return;
      if (event.getExitCode() == 0 && myBuildingProjectIndex != myMavenProjectNames.size()) {
        log(String.format("Build was success, but not all project was build. Project build order: %s, build index: %d",myMavenProjectNames,myBuildingProjectIndex));
      }
      if (event.getExitCode() == 1 && myBuildingProjectIndex > 0) {
        if (myBuildingProjectIndex == 1 && !hasResumeFromParameter(runConfiguration)) {
          return;
        }
        myResumeFromModuleName=myMavenProjectNames.get(myBuildingProjectIndex - 1);
        MavenProject mavenProject=findProjectByName(myResumeFromModuleName);
        if (mavenProject != null) {
          myResumeModuleId=mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId();
        }
      }
    }
    @Override public void onTextAvailable(    ProcessEvent event,    Key outputType){
      if (outputType != ProcessOutputTypes.STDOUT)       return;
      String text=event.getText().trim();
      if (text.isEmpty())       return;
      String textWithoutInfo="";
      if (text.startsWith("[INFO] ")) {
        textWithoutInfo=text.substring("[INFO] ".length()).trim();
      }
switch (myState) {
case STATE_INITIAL:
        if (textWithoutInfo.equals("Reactor build order:")) {
          myState=STATE_READING_PROJECT_LIST_OLD_MAVEN;
        }
 else         if (textWithoutInfo.equals("Reactor Build Order:")) {
          myState=STATE_READING_PROJECT_LIST;
        }
      break;
case STATE_READING_PROJECT_LIST:
    if (textWithoutInfo.equals("------------------------------------------------------------------------")) {
      myState=STATE_WAIT_FOR_BUILD;
    }
 else     if (textWithoutInfo.length() > 0) {
      myMavenProjectNames.add(textWithoutInfo);
    }
  break;
case STATE_READING_PROJECT_LIST_OLD_MAVEN:
if (textWithoutInfo.length() > 0) {
  if (text.startsWith("[INFO]   ")) {
    myMavenProjectNames.add(textWithoutInfo);
  }
 else {
    myState=STATE_WAIT_FOR_BUILD;
  }
}
break;
case STATE_WAIT_FOR_BUILD:
if (textWithoutInfo.startsWith("Building ")) {
String projectName=textWithoutInfo.substring("Building ".length());
if (myBuildingProjectIndex >= myMavenProjectNames.size() || !projectName.startsWith(myMavenProjectNames.get(myBuildingProjectIndex))) {
myState=STATE_WTF;
log(String.format("Invalid project building order. Defined order: %s, error index: %d, invalid line: %s",myMavenProjectNames,myBuildingProjectIndex,text));
break;
}
myBuildingProjectIndex++;
}
myState=STATE_WAIT_FOR______;
break;
case STATE_WAIT_FOR______:
if (textWithoutInfo.equals("------------------------------------------------------------------------")) {
myState=STATE_WAIT_FOR_BUILD;
}
break;
case STATE_WTF:
break;
default :
throw new IllegalStateException();
}
}
}
);
}
