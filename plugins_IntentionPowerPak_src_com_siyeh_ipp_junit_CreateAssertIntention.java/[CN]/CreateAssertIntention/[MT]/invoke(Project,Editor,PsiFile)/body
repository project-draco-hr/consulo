{
  if (isFileReadOnly(project,file)) {
    return;
  }
  final PsiExpressionStatement statement=(PsiExpressionStatement)findMatchingElement(file,editor);
  final PsiExpression expression=statement.getExpression();
  if (BoolUtils.isNegation(expression)) {
    final String newExpression="assertFalse(" + BoolUtils.getNegatedExpressionText(expression) + ");";
    replaceStatement(project,newExpression,statement);
  }
 else   if (isNullComparison(expression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    final PsiExpression comparedExpression;
    if (isNull(lhs)) {
      comparedExpression=rhs;
    }
 else {
      comparedExpression=lhs;
    }
    final String newExpression="assertNull(" + comparedExpression.getText() + ");";
    replaceStatement(project,newExpression,statement);
  }
 else   if (isEqualityComparison(expression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    final PsiExpression comparedExpression;
    final PsiExpression comparingExpression;
    if (rhs instanceof PsiLiteralExpression) {
      comparedExpression=rhs;
      comparingExpression=lhs;
    }
 else {
      comparedExpression=lhs;
      comparingExpression=rhs;
    }
    final PsiType type=lhs.getType();
    final String newExpression;
    if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) {
      newExpression="assertEquals(" + comparedExpression.getText() + ", "+ comparingExpression.getText()+ ", 0.0);";
    }
 else     if (type instanceof PsiPrimitiveType) {
      newExpression="assertEquals(" + comparedExpression.getText() + ", "+ comparingExpression.getText()+ ");";
    }
 else {
      newExpression="assertSame(" + comparedExpression.getText() + ", "+ comparingExpression.getText()+ ");";
    }
    replaceStatement(project,newExpression,statement);
  }
 else   if (isEqualsExpression(expression)) {
    final PsiMethodCallExpression call=(PsiMethodCallExpression)expression;
    final PsiExpression comparedExpression=call.getMethodExpression().getQualifierExpression();
    final PsiExpression comparingExpression=call.getArgumentList().getExpressions()[0];
    final String newExpression;
    if (comparingExpression instanceof PsiLiteralExpression) {
      newExpression="assertEquals(" + comparingExpression.getText() + ", "+ comparedExpression.getText()+ ");";
    }
 else {
      newExpression="assertEquals(" + comparedExpression.getText() + ", "+ comparingExpression.getText()+ ");";
    }
    replaceStatement(project,newExpression,statement);
  }
 else {
    final String newExpression="assertTrue(" + expression.getText() + ");";
    replaceStatement(project,newExpression,statement);
  }
}
