{
  if (isFileReadOnly(project,file)) {
    return;
  }
  final PsiExpressionStatement statement=(PsiExpressionStatement)findMatchingElement(file,editor);
  final PsiExpression expression=statement.getExpression();
  final String newExpression;
  if (BoolUtils.isNegation(expression)) {
    newExpression="assertFalse(" + BoolUtils.getNegatedExpressionText(expression) + ");";
    replaceStatement(project,newExpression,statement);
  }
 else   if (isNullComparison(expression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    final PsiExpression comparedExpression;
    if (isNull(lhs)) {
      comparedExpression=rhs;
    }
 else {
      comparedExpression=lhs;
    }
    newExpression="assertNull(" + comparedExpression.getText() + ");";
    replaceStatement(project,newExpression,statement);
  }
 else {
    newExpression="assertTrue(" + expression.getText() + ");";
    replaceStatement(project,newExpression,statement);
  }
}
