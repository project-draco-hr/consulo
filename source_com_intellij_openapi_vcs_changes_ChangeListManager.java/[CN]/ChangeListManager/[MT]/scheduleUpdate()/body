{
  myUpdateAlarm.cancelAllRequests();
  myUpdateAlarm.addRequest(new Runnable(){
    public void run(){
      if (myDisposed)       return;
      if (!myInitilized) {
        scheduleUpdate();
        return;
      }
      final List<VcsDirtyScope> scopes=VcsDirtyScopeManager.getInstance(myProject).retreiveScopes();
      for (      VcsDirtyScope scope : scopes) {
        final AbstractVcs vcs=myVcsManager.getVcsFor(scope.getScopeRoot());
        if (vcs != null) {
          final ChangeProvider changeProvider=vcs.getChangeProvider();
          if (changeProvider != null) {
            final Collection<Change> changes=changeProvider.getChanges(scope);
            List<Change> filteredChanges=new ArrayList<Change>();
            for (            Change change : changes) {
              if (isUnder(change,scope)) {
                filteredChanges.add(change);
              }
            }
            udpateUI(scope,filteredChanges);
          }
        }
      }
    }
    private boolean isUnder(    final Change change,    final VcsDirtyScope scope){
      final ContentRevision before=change.getBeforeRevision();
      final ContentRevision after=change.getAfterRevision();
      return before != null && scope.belongsTo(before.getFile()) || after != null && scope.belongsTo(after.getFile());
    }
  }
,300);
}
