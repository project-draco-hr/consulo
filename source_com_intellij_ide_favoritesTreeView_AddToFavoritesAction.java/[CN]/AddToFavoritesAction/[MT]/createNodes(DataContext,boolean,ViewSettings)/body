{
  ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  if (project == null)   return null;
  final PsiManager psiManager=PsiManager.getInstance(project);
  final String currentViewId=ProjectView.getInstance(project).getCurrentViewId();
  AbstractProjectViewPane pane=ProjectView.getInstance(project).getProjectViewPaneById(currentViewId);
  final ResourceBundle[] bundles=(ResourceBundle[])dataContext.getData(DataConstantsEx.RESOURCE_BUNDLE_ARRAY);
  if (bundles != null) {
    for (    ResourceBundle bundle : bundles) {
      result.add(new ResourceBundleNode(project,bundle,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final PsiElement[] psiElements=(PsiElement[])dataContext.getData(DataConstantsEx.PSI_ELEMENT_ARRAY);
  if (psiElements != null) {
    for (    PsiElement psiElement : psiElements) {
      addPsiElementNode(psiElement,project,result,favoritesConfig,(Module)dataContext.getData(DataConstants.MODULE_CONTEXT));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  PsiElement psiElement=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  if (psiElement == null && dataContext.getData(DataConstants.PSI_FILE) != null) {
    psiElement=(PsiElement)dataContext.getData(DataConstants.PSI_FILE);
  }
  if (psiElement != null) {
    Module containingModule=null;
    if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) {
      if (pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) {
        AbstractTreeNode abstractTreeNode=((AbstractTreeNode)pane.getSelectedDescriptor().getElement());
        while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) {
          abstractTreeNode=abstractTreeNode.getParent();
        }
        if (abstractTreeNode != null) {
          containingModule=((AbstractModuleNode)abstractTreeNode.getParent()).getValue();
        }
      }
    }
    addPsiElementNode(psiElement,project,result,favoritesConfig,containingModule);
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  ModuleGroup[] moduleGroups=(ModuleGroup[])dataContext.getData(DataConstantsEx.MODULE_GROUP_ARRAY);
  if (moduleGroups != null) {
    boolean isPackageView=false;
    if (currentViewId.equals(PackageViewPane.ID)) {
      isPackageView=true;
    }
    for (    ModuleGroup moduleGroup : moduleGroups) {
      if (isPackageView) {
        result.add(new PackageViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  Module module=(Module)dataContext.getData(DataConstants.MODULE);
  if (module != null) {
    if (currentViewId.equals(PackageViewPane.ID)) {
      result.add(new PackageViewModuleNode(project,module,favoritesConfig));
    }
 else {
      result.add(new ProjectViewModuleNode(project,module,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  Module[] modules=(Module[])dataContext.getData(DataConstants.MODULE_CONTEXT_ARRAY);
  if (modules != null) {
    for (    Module module1 : modules) {
      if (currentViewId.equals(PackageViewPane.ID)) {
        result.add(new PackageViewModuleNode(project,module1,favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleNode(project,module1,favoritesConfig));
      }
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final VirtualFile[] vFiles=(VirtualFile[])dataContext.getData(DataConstantsEx.VIRTUAL_FILE_ARRAY);
  if (vFiles != null) {
    for (    VirtualFile vFile : vFiles) {
      final PsiFile psiFile=psiManager.findFile(vFile);
      addPsiElementNode(psiFile,project,result,favoritesConfig,(Module)dataContext.getData(DataConstants.MODULE_CONTEXT));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final VirtualFile vFile=(VirtualFile)dataContext.getData(DataConstants.VIRTUAL_FILE);
  if (vFile != null) {
    final FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(vFile);
    if (StdFileTypes.GUI_DESIGNER_FORM.equals(fileType)) {
      final PsiFile formFile=psiManager.findFile(vFile);
      if (formFile == null)       return null;
      String text=formFile.getText();
      String className;
      try {
        className=Utils.getBoundClassName(text);
      }
 catch (      Exception e) {
        return null;
      }
      final PsiClass classToBind=psiManager.findClass(className,GlobalSearchScope.allScope(project));
      if (classToBind != null) {
        result.add(FormNode.constructFormNode(psiManager,classToBind,project,favoritesConfig));
      }
 else {
        addPsiElementNode(formFile,project,result,favoritesConfig,module);
      }
    }
 else {
      final PsiFile psiFile=psiManager.findFile(vFile);
      addPsiElementNode(psiFile,project,result,favoritesConfig,(Module)dataContext.getData(DataConstants.MODULE_CONTEXT));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final Form[] forms=(Form[])dataContext.getData(DataConstantsEx.GUI_DESIGNER_FORM_ARRAY);
  if (forms != null) {
    Set<PsiClass> bindClasses=new HashSet<PsiClass>();
    for (    Form form : forms) {
      final PsiClass classToBind=form.getClassToBind();
      if (classToBind != null) {
        if (bindClasses.contains(classToBind))         continue;
        bindClasses.add(classToBind);
        result.add(FormNode.constructFormNode(psiManager,classToBind,project,favoritesConfig));
      }
 else {
      }
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final LibraryGroupElement[] libraryGroups=(LibraryGroupElement[])dataContext.getData(DataConstantsEx.LIBRARY_GROUP_ARRAY);
  if (libraryGroups != null) {
    for (    LibraryGroupElement libraryGroup : libraryGroups) {
      result.add(new LibraryGroupNode(project,libraryGroup,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final NamedLibraryElement[] namedLibraries=(NamedLibraryElement[])dataContext.getData(DataConstantsEx.NAMED_LIBRARY_ARRAY);
  if (namedLibraries != null) {
    for (    NamedLibraryElement namedLibrary : namedLibraries) {
      result.add(new NamedLibraryElementNode(project,namedLibrary,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  return null;
}
