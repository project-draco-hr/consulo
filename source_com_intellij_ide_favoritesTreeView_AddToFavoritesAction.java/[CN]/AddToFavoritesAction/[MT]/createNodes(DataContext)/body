{
  ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  final FavoritesTreeViewConfiguration favoritesConfig=FavoritesViewImpl.getInstance(project).getCurrentTreeViewPanel().getFavoritesTreeStructure().getFavoritesConfiguration();
  final PsiManager psiManager=PsiManager.getInstance(project);
  final String currentViewId=ProjectView.getInstance(project).getCurrentViewId();
  AbstractProjectViewPane pane=ProjectView.getInstance(project).getProjectViewPaneById(currentViewId);
  if (currentViewId.equals(J2EEProjectViewPane.ID)) {
    J2EENodeDescriptor j2eeNodeDescriptor=(J2EENodeDescriptor)pane.getSelectedDescriptor();
  }
  PsiElement psiElement=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  if (psiElement != null) {
    Module containingModule=null;
    if (ProjectView.getInstance(project).isShowModules(currentViewId)) {
      AbstractTreeNode abstractTreeNode=((AbstractTreeNode)pane.getSelectedDescriptor().getElement());
      while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) {
        abstractTreeNode=abstractTreeNode.getParent();
      }
      if (abstractTreeNode != null) {
        containingModule=(Module)((AbstractModuleNode)abstractTreeNode.getParent()).getValue();
      }
    }
    addPsiElementNode(psiElement,project,result,favoritesConfig,containingModule);
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final PsiElement[] psiElements=(PsiElement[])dataContext.getData(DataConstantsEx.PSI_ELEMENT_ARRAY);
  if (psiElements != null) {
    for (int i=0; i < psiElements.length; i++) {
      addPsiElementNode(psiElements[i],project,result,favoritesConfig,(Module)dataContext.getData(DataConstants.MODULE_CONTEXT));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  Module module=(Module)dataContext.getData(DataConstants.MODULE);
  if (module != null) {
    if (currentViewId.equals(PackageViewPane.ID)) {
      result.add(new PackageViewModuleNode(project,module,favoritesConfig));
    }
 else {
      result.add(new ProjectViewModuleNode(project,module,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  Module[] modules=(Module[])dataContext.getData(DataConstants.MODULE_CONTEXT_ARRAY);
  if (modules != null) {
    for (int i=0; i < modules.length; i++) {
      if (currentViewId.equals(PackageViewPane.ID)) {
        result.add(new PackageViewModuleNode(project,modules[i],favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleNode(project,modules[i],favoritesConfig));
      }
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  ModuleGroup[] moduleGroups=(ModuleGroup[])dataContext.getData(DataConstantsEx.MODULE_GROUP_ARRAY);
  if (moduleGroups != null) {
    boolean isPackageView=false;
    if (currentViewId.equals(PackageViewPane.ID)) {
      isPackageView=true;
    }
    for (int i=0; i < moduleGroups.length; i++) {
      ModuleGroup moduleGroup=moduleGroups[i];
      if (isPackageView) {
        result.add(new PackageViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final VirtualFile vFile=(VirtualFile)dataContext.getData(DataConstants.VIRTUAL_FILE);
  if (vFile != null) {
    final FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(vFile);
    if (StdFileTypes.GUI_DESIGNER_FORM.equals(fileType)) {
      final PsiFile formFile=psiManager.findFile(vFile);
      String text=formFile.getText();
      LwRootContainer container=null;
      try {
        container=Utils.getRootContainer(text,null);
      }
 catch (      Exception e) {
        return null;
      }
      final PsiClass classToBind=psiManager.findClass(container.getClassToBind(),GlobalSearchScope.allScope(project));
      result.add(FormNode.constructFormNode(psiManager,classToBind,project,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final Form[] forms=(Form[])dataContext.getData(DataConstantsEx.GUI_DESIGNER_FORM_ARRAY);
  if (forms != null) {
    Set<PsiClass> bindClasses=new HashSet<PsiClass>();
    for (int i=0; i < forms.length; i++) {
      Form form=forms[i];
      final PsiClass classToBind=form.getClassToBind();
      if (bindClasses.contains(classToBind))       continue;
      bindClasses.add(classToBind);
      result.add(FormNode.constructFormNode(psiManager,classToBind,project,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final LibraryGroupElement[] libraryGroups=(LibraryGroupElement[])dataContext.getData(DataConstantsEx.LIBRARY_GROUP_ARRAY);
  if (libraryGroups != null) {
    for (int i=0; i < libraryGroups.length; i++) {
      LibraryGroupElement libraryGroup=libraryGroups[i];
      result.add(new LibraryGroupNode(project,libraryGroup,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  final NamedLibraryElement[] namedLibraries=(NamedLibraryElement[])dataContext.getData(DataConstantsEx.NAMED_LIBRARY_ARRAY);
  if (namedLibraries != null) {
    for (int i=0; i < namedLibraries.length; i++) {
      NamedLibraryElement namedLibrary=namedLibraries[i];
      result.add(new NamedLibraryElementNode(project,namedLibrary,favoritesConfig));
    }
    return result.isEmpty() ? null : result.toArray(new AbstractTreeNode[result.size()]);
  }
  return null;
}
