{
  ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
  if (project == null)   return Collections.emptyList();
  final PsiManager psiManager=PsiManager.getInstance(project);
  final String currentViewId=ProjectView.getInstance(project).getCurrentViewId();
  AbstractProjectViewPane pane=ProjectView.getInstance(project).getProjectViewPaneById(currentViewId);
  if (object instanceof ResourceBundle[]) {
    for (    ResourceBundle bundle : (ResourceBundle[])object) {
      result.add(new ResourceBundleNode(project,bundle,favoritesConfig));
    }
    return result;
  }
  if (object instanceof PsiElement[]) {
    for (    PsiElement psiElement : (PsiElement[])object) {
      addPsiElementNode(psiElement,project,result,favoritesConfig,moduleContext);
    }
    return result;
  }
  if (object instanceof PackageElement) {
    PackageElementNode node=new PackageElementNode(project,object,favoritesConfig);
    result.add(node);
    return result;
  }
  if (object instanceof PsiElement) {
    Module containingModule=null;
    if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) {
      if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) {
        AbstractTreeNode abstractTreeNode=((AbstractTreeNode)pane.getSelectedDescriptor().getElement());
        while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) {
          abstractTreeNode=abstractTreeNode.getParent();
        }
        if (abstractTreeNode != null) {
          containingModule=((AbstractModuleNode)abstractTreeNode.getParent()).getValue();
        }
      }
    }
    addPsiElementNode((PsiElement)object,project,result,favoritesConfig,containingModule);
    return result;
  }
  if (object instanceof VirtualFile[]) {
    for (    VirtualFile vFile : (VirtualFile[])object) {
      PsiElement element=psiManager.findFile(vFile);
      if (element == null)       element=psiManager.findDirectory(vFile);
      addPsiElementNode(element,project,result,favoritesConfig,moduleContext);
    }
    return result;
  }
  if (object instanceof VirtualFile) {
    final VirtualFile vFile=(VirtualFile)object;
    final FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(vFile);
    if (StdFileTypes.GUI_DESIGNER_FORM.equals(fileType)) {
      final PsiFile formFile=psiManager.findFile(vFile);
      if (formFile == null)       return result;
      String text=formFile.getText();
      String className;
      try {
        className=Utils.getBoundClassName(text);
      }
 catch (      Exception e) {
        return result;
      }
      final PsiClass classToBind=psiManager.findClass(className,GlobalSearchScope.allScope(project));
      if (classToBind != null) {
        result.add(FormNode.constructFormNode(classToBind,project,favoritesConfig));
      }
 else {
        addPsiElementNode(formFile,project,result,favoritesConfig,moduleContext);
      }
    }
 else {
      final PsiFile psiFile=psiManager.findFile(vFile);
      addPsiElementNode(psiFile,project,result,favoritesConfig,moduleContext);
    }
    return result;
  }
  if (object instanceof ModuleGroup[]) {
    boolean isPackageView=false;
    if (currentViewId.equals(PackageViewPane.ID)) {
      isPackageView=true;
    }
    for (    ModuleGroup moduleGroup : (ModuleGroup[])object) {
      if (isPackageView) {
        result.add(new PackageViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleGroupNode(project,moduleGroup,favoritesConfig));
      }
    }
    return result;
  }
  if (object instanceof Module)   object=new Module[]{(Module)object};
  if (object instanceof Module[]) {
    for (    Module module1 : (Module[])object) {
      if (currentViewId.equals(PackageViewPane.ID)) {
        result.add(new PackageViewModuleNode(project,module1,favoritesConfig));
      }
 else {
        result.add(new ProjectViewModuleNode(project,module1,favoritesConfig));
      }
    }
    return result;
  }
  if (object instanceof LibraryGroupElement[]) {
    for (    LibraryGroupElement libraryGroup : (LibraryGroupElement[])object) {
      result.add(new LibraryGroupNode(project,libraryGroup,favoritesConfig));
    }
    return result;
  }
  if (object instanceof NamedLibraryElement[]) {
    for (    NamedLibraryElement namedLibrary : (NamedLibraryElement[])object) {
      result.add(new NamedLibraryElementNode(project,namedLibrary,favoritesConfig));
    }
    return result;
  }
  return result;
}
