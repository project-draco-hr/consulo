{
  ChameleonTransforming.transformChildren(this);
  if (getFirstChildNode().getElementType() == ElementType.DOC_REFERENCE_HOLDER) {
    final PsiElement firstChildPsi=SourceTreeToPsiMap.treeElementToPsi(getFirstChildNode().getFirstChildNode());
    if (firstChildPsi instanceof PsiJavaCodeReferenceElement) {
      PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)firstChildPsi;
      if (referenceElement == null)       return null;
      final PsiElement referencedElement=referenceElement.resolve();
      if (referencedElement instanceof PsiClass)       return referencedElement;
      return null;
    }
 else     if (firstChildPsi instanceof PsiKeyword) {
      final PsiKeyword keyword=(PsiKeyword)firstChildPsi;
      if (keyword.getTokenType().equals(JavaTokenType.THIS_KEYWORD)) {
        return ResolveUtil.getContextClass(this);
      }
 else       if (keyword.getTokenType().equals(JavaTokenType.SUPER_KEYWORD)) {
        final PsiClass contextClass=ResolveUtil.getContextClass(this);
        if (contextClass != null)         return contextClass.getSuperClass();
        return null;
      }
    }
  }
  return ResolveUtil.getContextClass(this);
}
