{
  final PsiElement scope=getScope();
  final PsiElement element=getNameElement();
  if (scope == null || element == null)   return new MyReference(null);
  final String name=element.getText();
  final String[] signature=getSignature();
  final PsiMethod[] methods=getAllMethods(scope,this);
  nextMethod:   for (  PsiMethod method : methods) {
    if (!method.getName().equals(name))     continue;
    if (signature == null) {
      return new MyReference(method);
    }
 else {
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      if (parameters.length != signature.length)       continue;
      for (int j=0; j < parameters.length; j++) {
        PsiParameter parameter=parameters[j];
        PsiType type1=TypeConversionUtil.erasure(parameter.getType());
        String type2=signature[j];
        if (!Comparing.strEqual(type1.getPresentableText(),type2) && !Comparing.strEqual(type1.getCanonicalText(),type2))         continue nextMethod;
      }
      return new MyReference(method){
        public Object[] getVariants(){
          final List<PsiMethod> lst=new ArrayList<PsiMethod>();
          for (          PsiMethod method : methods) {
            if (name.equals(method.getName())) {
              lst.add(method);
            }
          }
          return lst.toArray();
        }
      }
;
    }
  }
  if (signature != null)   return new MyReference(null);
  final PsiVariable[] vars=getAllVariables(scope,this);
  for (  PsiVariable var : vars) {
    if (!var.getName().equals(name))     continue;
    return new MyReference(var);
  }
  return new MyReference(null);
}
