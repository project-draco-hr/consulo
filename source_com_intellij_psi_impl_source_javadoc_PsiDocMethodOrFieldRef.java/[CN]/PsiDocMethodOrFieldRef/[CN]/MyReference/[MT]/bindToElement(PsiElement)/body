{
  if (isReferenceTo(element))   return PsiDocMethodOrFieldRef.this;
  final String name=getNameElement().getText();
  final String newName;
  final PsiMethod method;
  final PsiField field;
  final boolean hasSignature;
  final PsiClass containingClass;
  if (element instanceof PsiMethod) {
    method=(PsiMethod)element;
    hasSignature=getSignature() != null;
    containingClass=method.getContainingClass();
    newName=method.getName();
  }
 else   if (element instanceof PsiField) {
    field=(PsiField)element;
    hasSignature=false;
    containingClass=field.getContainingClass();
    method=null;
    newName=field.getName();
  }
 else {
    throw new IncorrectOperationException();
  }
  if (getFirstChild() instanceof PsiJavaCodeReferenceElement) {
    PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)getFirstChild();
    referenceElement.bindToElement(containingClass);
  }
 else {
    if (!PsiTreeUtil.isAncestor(containingClass,PsiDocMethodOrFieldRef.this,true)) {
      final PsiReferenceExpression ref=containingClass.getManager().getElementFactory().createReferenceExpression(containingClass);
      addAfter(ref,null);
    }
  }
  if (hasSignature || !name.equals(newName)) {
    String text=getText();
    StringBuffer newText=new StringBuffer("/** @see ");
    if (name.equals(newName)) {
      newText.append(text.substring(0,text.indexOf('(')));
    }
 else {
      final int sharpIndex=text.indexOf('#');
      if (sharpIndex >= 0) {
        newText.append(text.substring(0,sharpIndex + 1));
      }
      newText.append(newName);
    }
    if (hasSignature) {
      newText.append('(');
      PsiParameter[] parameters=method.getParameterList().getParameters();
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        if (i > 0)         newText.append(",");
        newText.append(parameter.getType().getCanonicalText());
      }
      newText.append(')');
    }
    newText.append("*/");
    PsiComment comment=containingClass.getManager().getElementFactory().createCommentFromText(newText.toString(),null);
    PsiElement tag=PsiTreeUtil.getChildOfType(comment,PsiDocTag.class);
    PsiElement ref=PsiTreeUtil.getChildOfType(tag,PsiDocMethodOrFieldRef.class);
    return replace(ref);
  }
  return PsiDocMethodOrFieldRef.this;
}
