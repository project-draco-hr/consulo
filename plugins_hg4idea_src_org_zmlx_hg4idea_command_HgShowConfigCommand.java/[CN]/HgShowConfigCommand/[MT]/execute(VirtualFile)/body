{
  if (repo == null) {
    return Collections.emptyMap();
  }
  final HgCommandExecutor executor=new HgCommandExecutor(project);
  executor.setSilent(true);
  HgCommandResult result=executor.executeInCurrentThread(repo,"showconfig",null);
  if (result == null) {
    return Collections.emptyMap();
  }
  Map<String,Map<String,String>> configMap=new HashMap<String,Map<String,String>>();
  for (  String line : result.getOutputLines()) {
    List<String> option=StringUtil.split(line,"=",true,false);
    if (option.size() == 2) {
      String sectionAndName=option.get(0).trim();
      String value=option.get(1).trim();
      int dotIndex=sectionAndName.indexOf('.');
      if (dotIndex > 0) {
        String sectionName=sectionAndName.substring(0,dotIndex);
        String optionName=sectionAndName.substring(dotIndex + 1,sectionAndName.length());
        if (configMap.containsKey(sectionName)) {
          configMap.get(sectionName).put(optionName,value);
        }
 else {
          HashMap<String,String> sectionMap=new HashMap<String,String>();
          sectionMap.put(optionName,value);
          configMap.put(sectionName,sectionMap);
        }
      }
    }
  }
  return configMap;
}
