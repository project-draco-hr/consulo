{
  if (parent.getValue() instanceof Form)   return children;
  boolean formsFound=false;
  for (  AbstractTreeNode node : children) {
    if (node.getValue() instanceof PsiFile) {
      PsiFile file=(PsiFile)node.getValue();
      if (file.getFileType() == StdFileTypes.GUI_DESIGNER_FORM) {
        formsFound=true;
        break;
      }
    }
  }
  if (!formsFound)   return children;
  Collection<AbstractTreeNode> result=new LinkedHashSet<AbstractTreeNode>(children);
  ProjectViewNode[] copy=children.toArray(new ProjectViewNode[children.size()]);
  for (  ProjectViewNode element : copy) {
    PsiClass psiClass=null;
    if (element.getValue() instanceof PsiClass) {
      psiClass=(PsiClass)element.getValue();
    }
 else     if (element.getValue() instanceof PsiClassOwner) {
      final PsiClass[] psiClasses=((PsiClassOwner)element.getValue()).getClasses();
      if (psiClasses.length == 1) {
        psiClass=psiClasses[0];
      }
    }
    if (psiClass == null)     continue;
    String qName=psiClass.getQualifiedName();
    if (qName == null)     continue;
    List<PsiFile> forms;
    try {
      forms=FormClassIndex.findFormsBoundToClass(myProject,qName);
    }
 catch (    ProcessCanceledException e) {
      continue;
    }
    Collection<BasePsiNode<? extends PsiElement>> formNodes=findFormsIn(children,forms);
    if (!formNodes.isEmpty()) {
      Collection<PsiFile> formFiles=convertToFiles(formNodes);
      Collection<BasePsiNode<? extends PsiElement>> subNodes=new ArrayList<BasePsiNode<? extends PsiElement>>();
      subNodes.add((BasePsiNode<? extends PsiElement>)element);
      subNodes.addAll(formNodes);
      result.add(new FormNode(myProject,new Form(psiClass,formFiles),settings,subNodes));
      result.remove(element);
      result.removeAll(formNodes);
    }
  }
  return result;
}
