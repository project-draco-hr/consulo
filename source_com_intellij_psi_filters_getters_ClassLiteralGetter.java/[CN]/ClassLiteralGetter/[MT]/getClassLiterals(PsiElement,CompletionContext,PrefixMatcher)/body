{
  final Condition<String> shortNameCondition=new Condition<String>(){
    public boolean value(    String s){
      return matcher.prefixMatches(s);
    }
  }
;
  final List<MutableLookupElement<PsiExpression>> result=new ArrayList<MutableLookupElement<PsiExpression>>();
  for (  final Object element : myBaseGetter.get(context,completionContext)) {
    if (element instanceof PsiClassType) {
      PsiClassType.ClassResolveResult resolveResult=((PsiClassType)element).resolveGenerics();
      PsiClass psiClass=resolveResult.getElement();
      if (psiClass != null && CommonClassNames.JAVA_LANG_CLASS.equals(psiClass.getQualifiedName())) {
        final PsiTypeParameter[] typeParameters=psiClass.getTypeParameters();
        if (typeParameters.length == 1) {
          PsiType substitution=resolveResult.getSubstitutor().substitute(typeParameters[0]);
          boolean addInheritors=false;
          if (substitution instanceof PsiWildcardType) {
            final PsiWildcardType wildcardType=(PsiWildcardType)substitution;
            substitution=wildcardType.getBound();
            addInheritors=wildcardType.isExtends();
          }
          final PsiClass aClass=PsiUtil.resolveClassInType(substitution);
          if (aClass == null)           continue;
          createLookupElement(substitution,context,result);
          if (addInheritors && substitution != null && !CommonClassNames.JAVA_LANG_OBJECT.equals(substitution.getCanonicalText())) {
            for (            final PsiType type : CodeInsightUtil.addSubtypes(substitution,context,true,shortNameCondition)) {
              createLookupElement(type,context,result);
            }
          }
        }
      }
    }
  }
  return result.toArray(new MutableLookupElement[result.size()]);
}
