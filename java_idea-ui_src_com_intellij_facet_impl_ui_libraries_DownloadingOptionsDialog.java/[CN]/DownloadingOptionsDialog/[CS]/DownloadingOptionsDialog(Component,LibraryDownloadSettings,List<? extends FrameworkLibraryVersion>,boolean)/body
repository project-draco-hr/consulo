{
  super(parent,true);
  setTitle("Downloading Options");
  myLibraryType=settings.getLibraryType();
  LOG.assertTrue(!versions.isEmpty());
  final FormBuilder builder=LibraryNameAndLevelPanel.createFormBuilder();
  myVersionComboBox=new JComboBox();
  for (  FrameworkLibraryVersion version : versions) {
    myVersionComboBox.addItem(version);
  }
  myVersionComboBox.setRenderer(new ListCellRendererWrapper<FrameworkLibraryVersion>(myVersionComboBox){
    @Override public void customize(    JList list,    FrameworkLibraryVersion value,    int index,    boolean selected,    boolean hasFocus){
      setText(value.getVersionString());
    }
  }
);
  myVersionComboBox.setSelectedItem(settings.getVersion());
  if (versions.size() > 1) {
    builder.addLabeledComponent("&Version:",myVersionComboBox);
  }
  if (showNameAndLevel) {
    myNameAndLevelPanel=new LibraryNameAndLevelPanel(builder,settings.getLibraryName(),settings.getLibraryLevel());
  }
 else {
    myNameAndLevelPanel=null;
  }
  myNameWrappingPanel.add(builder.getPanel());
  onVersionChanged(settings.getSelectedDownloads());
  myVersionComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onVersionChanged(null);
    }
  }
);
  myFilesList.setBorder(null);
  myFilesToDownloadLabel.setLabelFor(myFilesList);
  myDirectoryField.addBrowseFolderListener(ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.title"),ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.description"),null,FileChooserDescriptorFactory.createSingleFolderDescriptor());
  myCopyDownloadedFilesToLabel.setLabelFor(myDirectoryField);
  myDirectoryField.setText(FileUtil.toSystemDependentName(settings.getDirectoryForDownloadedLibrariesPath()));
  myDownloadSourcesCheckBox.setVisible(false);
  myDownloadJavadocsCheckBox.setVisible(false);
  myDownloadSourcesCheckBox.setSelected(settings.isDownloadSources());
  myDownloadJavadocsCheckBox.setSelected(settings.isDownloadJavaDocs());
  init();
}
