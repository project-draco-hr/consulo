{
  if (progress != null)   progress.checkCanceled();
  PsiFile file=scope.getContainingFile();
  FileViewProvider viewProvider=file.getViewProvider();
  final CharSequence buffer=viewProvider.getContents();
  TextRange range=scope.getTextRange();
  if (range == null) {
    LOG.error("Element " + scope + " of class "+ scope.getClass()+ " has null range");
    return true;
  }
  final int scopeStart=range.getStartOffset();
  final int startOffset=scopeStart;
  int endOffset=range.getEndOffset();
  if (endOffset > buffer.length()) {
    diagnoseInvalidRange(scope,file,viewProvider,buffer,range);
    return true;
  }
  final Project project=file.getProject();
  final TreeElement[] lastElement={null};
  return processTextOccurrences(buffer,startOffset,endOffset,searcher,progress,new TIntProcedure(){
    @Override public boolean execute(    int offset){
      if (progress != null)       progress.checkCanceled();
      lastElement[0]=processTreeUp(project,processor,scope,searcher,offset - scopeStart,processInjectedPsi,progress,lastElement[0]);
      return lastElement[0] != null;
    }
  }
);
}
