{
  Collections.sort(changes,MyChangePathLengthComparator.getInstance());
  final ChangesGroupingPolicy policy=createGroupingPolicy();
  for (  final Change change : changes) {
    insertChangeNode(change,policy,root,new Computable<ChangesBrowserNode>(){
      @Override public ChangesBrowserNode compute(){
        return new ChangesBrowserChangeNode(myProject,change,changeNodeDecorator);
      }
    }
);
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
