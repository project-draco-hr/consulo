{
  final RemoteRevisionsCache revisionsCache=RemoteRevisionsCache.getInstance(myProject);
  for (  ChangeList list : changeLists) {
    final Collection<Change> changes=list.getChanges();
    final ChangeListRemoteState listRemoteState=new ChangeListRemoteState(changes.size());
    ChangesBrowserNode listNode=new ChangesBrowserChangeListNode(myProject,list,listRemoteState);
    model.insertNodeInto(listNode,root,0);
    final HashMap<String,ChangesBrowserNode> foldersCache=new HashMap<String,ChangesBrowserNode>();
    final ChangesGroupingPolicy policy=createGroupingPolicy();
    int i=0;
    for (    final Change change : changes) {
      final MyChangeNodeUnderChangeListDecorator decorator=new MyChangeNodeUnderChangeListDecorator(revisionsCache,new ChangeListRemoteState.Reporter(i,listRemoteState));
      insertChangeNode(change,foldersCache,policy,listNode,new Computable<ChangesBrowserNode>(){
        public ChangesBrowserNode compute(){
          return new ChangesBrowserChangeNode(myProject,change,decorator);
        }
      }
);
      ++i;
    }
  }
  if (!modifiedWithoutEditing.isEmpty()) {
    buildVirtualFiles(modifiedWithoutEditing,ChangesBrowserNode.MODIFIED_WITHOUT_EDITING_TAG);
  }
  if (!unversionedFiles.isEmpty()) {
    buildVirtualFiles(unversionedFiles,ChangesBrowserNode.UNVERSIONED_FILES_TAG);
  }
  if (!switchedFiles.isEmpty()) {
    buildSwitchedFiles(switchedFiles);
  }
  if (ignoredFiles != null && !ignoredFiles.isEmpty()) {
    buildVirtualFiles(ignoredFiles,ChangesBrowserNode.IGNORED_FILES_TAG);
  }
  if (lockedFolders != null && !lockedFolders.isEmpty()) {
    buildVirtualFiles(lockedFolders,ChangesBrowserNode.LOCKED_FOLDERS_TAG);
  }
  if (logicallyLockedFiles != null && (!logicallyLockedFiles.isEmpty())) {
    buildLogicallyLockedFiles(logicallyLockedFiles);
  }
  if (!locallyDeletedFiles.isEmpty()) {
    ChangesBrowserNode locallyDeletedNode=ChangesBrowserNode.create(myProject,VcsBundle.message("changes.nodetitle.locally.deleted.files"));
    model.insertNodeInto(locallyDeletedNode,root,root.getChildCount());
    buildLocallyDeletedPaths(locallyDeletedFiles,locallyDeletedNode);
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
