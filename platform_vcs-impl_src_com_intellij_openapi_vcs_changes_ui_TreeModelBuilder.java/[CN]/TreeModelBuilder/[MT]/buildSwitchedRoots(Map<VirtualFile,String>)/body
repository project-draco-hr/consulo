{
  final ChangesBrowserNode rootsHeadNode=ChangesBrowserNode.create(myProject,ChangesBrowserNode.SWITCHED_ROOTS_TAG);
  rootsHeadNode.setAttributes(SimpleTextAttributes.GRAYED_BOLD_ATTRIBUTES);
  model.insertNodeInto(rootsHeadNode,root,root.getChildCount());
  final List<VirtualFile> files=new ArrayList<VirtualFile>(switchedRoots.keySet());
  Collections.sort(files,VirtualFileHierarchicalComparator.getInstance());
  for (  VirtualFile vf : files) {
    final ChangesGroupingPolicy policy=createGroupingPolicy();
    final ContentRevision cr=new CurrentContentRevision(new FilePathImpl(vf));
    final Change change=new Change(cr,cr,FileStatus.NOT_CHANGED);
    final String branchName=switchedRoots.get(vf);
    insertChangeNode(vf,policy,rootsHeadNode,new Computable<ChangesBrowserNode>(){
      public ChangesBrowserNode compute(){
        return new ChangesBrowserChangeNode(myProject,change,new ChangeNodeDecorator(){
          public void decorate(          Change change,          SimpleColoredComponent component,          boolean isShowFlatten){
          }
          public List<Pair<String,Stress>> stressPartsOfFileName(          Change change,          String parentPath){
            return null;
          }
          public void preDecorate(          Change change,          ChangesBrowserNodeRenderer renderer,          boolean showFlatten){
            renderer.append("[" + branchName + "] ",SimpleTextAttributes.GRAYED_BOLD_ATTRIBUTES);
          }
        }
);
      }
    }
);
  }
}
