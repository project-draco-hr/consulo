{
  final ChangesBrowserNode rootsHeadNode=ChangesBrowserNode.create(myProject,ChangesBrowserNode.SWITCHED_ROOTS_TAG);
  rootsHeadNode.setAttributes(SimpleTextAttributes.GRAYED_BOLD_ATTRIBUTES);
  model.insertNodeInto(rootsHeadNode,root,root.getChildCount());
  final List<VirtualFile> files=new ArrayList<>(switchedRoots.keySet());
  Collections.sort(files,VirtualFileHierarchicalComparator.getInstance());
  for (  VirtualFile vf : files) {
    final ChangesGroupingPolicy policy=createGroupingPolicy();
    final ContentRevision cr=new CurrentContentRevision(VcsUtil.getFilePath(vf));
    final Change change=new Change(cr,cr,FileStatus.NOT_CHANGED);
    final String branchName=switchedRoots.get(vf);
    insertChangeNode(vf,policy,rootsHeadNode,createChangeNode(change,new ChangeNodeDecorator(){
      @Override public void decorate(      Change change1,      SimpleColoredComponent component,      boolean isShowFlatten){
      }
      @Override public List<Pair<String,Stress>> stressPartsOfFileName(      Change change1,      String parentPath){
        return null;
      }
      @Override public void preDecorate(      Change change1,      ChangesBrowserNodeRenderer renderer,      boolean showFlatten){
        renderer.append("[" + branchName + "] ",SimpleTextAttributes.GRAYED_BOLD_ATTRIBUTES);
      }
    }
));
  }
}
