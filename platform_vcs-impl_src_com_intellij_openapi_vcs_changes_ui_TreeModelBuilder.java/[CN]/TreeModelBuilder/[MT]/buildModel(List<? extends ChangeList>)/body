{
  final RemoteRevisionsCache revisionsCache=RemoteRevisionsCache.getInstance(myProject);
  for (  ChangeList list : changeLists) {
    final List<Change> changes=new ArrayList<Change>(list.getChanges());
    final ChangeListRemoteState listRemoteState=new ChangeListRemoteState(changes.size());
    ChangesBrowserNode listNode=new ChangesBrowserChangeListNode(myProject,list,listRemoteState);
    model.insertNodeInto(listNode,root,0);
    resetGrouping();
    final ChangesGroupingPolicy policy=createGroupingPolicy();
    int i=0;
    Collections.sort(changes,MyChangePathLengthComparator.getInstance());
    for (    final Change change : changes) {
      final MyChangeNodeUnderChangeListDecorator decorator=new MyChangeNodeUnderChangeListDecorator(revisionsCache,new ChangeListRemoteState.Reporter(i,listRemoteState));
      insertChangeNode(change,policy,listNode,new Computable<ChangesBrowserNode>(){
        @Override public ChangesBrowserNode compute(){
          return new ChangesBrowserChangeNode(myProject,change,decorator);
        }
      }
);
      ++i;
    }
  }
  return model;
}
