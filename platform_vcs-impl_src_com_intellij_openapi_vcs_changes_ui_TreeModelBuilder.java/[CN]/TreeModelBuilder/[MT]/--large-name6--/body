{
  resetGrouping();
  buildModel(changeLists);
  if (!modifiedWithoutEditing.isEmpty()) {
    resetGrouping();
    buildVirtualFiles(modifiedWithoutEditing,ChangesBrowserNode.MODIFIED_WITHOUT_EDITING_TAG);
  }
  final boolean manyUnversioned=unversionedFiles.getSecond() > unversionedFiles.getFirst().size();
  if (manyUnversioned || !unversionedFiles.getFirst().isEmpty()) {
    resetGrouping();
    if (manyUnversioned) {
      final ChangesBrowserNode baseNode=new ChangesBrowserManyUnversionedFilesNode(myProject,unversionedFiles.getSecond(),unversionedFiles.getThird());
      model.insertNodeInto(baseNode,root,root.getChildCount());
    }
 else {
      buildVirtualFiles(unversionedFiles.getFirst(),ChangesBrowserNode.UNVERSIONED_FILES_TAG);
    }
  }
  if (switchedRoots != null && !switchedRoots.isEmpty()) {
    resetGrouping();
    buildSwitchedRoots(switchedRoots);
  }
  if (!switchedFiles.isEmpty()) {
    resetGrouping();
    buildSwitchedFiles(switchedFiles);
  }
  if (ignoredFiles != null && !ignoredFiles.isEmpty()) {
    resetGrouping();
    buildVirtualFiles(ignoredFiles,ChangesBrowserNode.IGNORED_FILES_TAG);
  }
  if (lockedFolders != null && !lockedFolders.isEmpty()) {
    resetGrouping();
    buildVirtualFiles(lockedFolders,ChangesBrowserNode.LOCKED_FOLDERS_TAG);
  }
  if (logicallyLockedFiles != null && !logicallyLockedFiles.isEmpty()) {
    resetGrouping();
    buildLogicallyLockedFiles(logicallyLockedFiles);
  }
  if (!locallyDeletedFiles.isEmpty()) {
    resetGrouping();
    ChangesBrowserNode locallyDeletedNode=ChangesBrowserNode.create(myProject,LOCALLY_DELETED_NODE);
    model.insertNodeInto(locallyDeletedNode,root,root.getChildCount());
    buildLocallyDeletedPaths(locallyDeletedFiles,locallyDeletedNode);
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
