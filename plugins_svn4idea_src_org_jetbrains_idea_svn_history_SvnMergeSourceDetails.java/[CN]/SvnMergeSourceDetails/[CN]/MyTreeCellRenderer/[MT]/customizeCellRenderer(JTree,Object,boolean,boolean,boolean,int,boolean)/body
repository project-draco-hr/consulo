{
  final FontMetrics metrics=tree.getFontMetrics(tree.getFont());
  final SvnFileRevision revision;
  if (value instanceof MyRootNode) {
    revision=myRevision;
  }
 else {
    final MyNode myNode=(MyNode)value;
    final MyNamedConfigurable configurable=(MyNamedConfigurable)myNode.getConfigurable();
    revision=configurable.getRevision();
  }
  final String revisonNumber=revision.getRevisionNumber().asString();
  final Pair<String,Boolean> info=CommittedChangesTreeBrowser.CommittedChangeListRenderer.getDescriptionOfChangeList(revision.getCommitMessage());
  String description=info.getFirst();
  int width=metrics.stringWidth(description);
  int dotsWidth=metrics.stringWidth(ourDots);
  boolean descriptionTruncated=info.getSecond();
  if ((descriptionTruncated && (ourMaxWidth - dotsWidth < width)) || (!descriptionTruncated) && (ourMaxWidth < width)) {
    description=CommittedChangesTreeBrowser.CommittedChangeListRenderer.truncateDescription(description,metrics,ourMaxWidth - dotsWidth);
    descriptionTruncated=true;
  }
  if (descriptionTruncated) {
    description+=ourDots;
  }
  final String date=CommittedChangesTreeBrowser.CommittedChangeListRenderer.getDateOfChangeList(revision.getRevisionDate());
  final String author=revision.getAuthor();
  append(revisonNumber + " ",SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  append(description + " ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
  append(author,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  append(", " + date,SimpleTextAttributes.REGULAR_ATTRIBUTES);
}
