{
  final XmlTag tag=PsiTreeUtil.getContextOfType(expr,XmlTag.class,true);
  if (tag != null && XsltSupport.isXsltTag(tag)) {
    final XsltElement element=XsltElementFactory.getInstance().wrapElement(tag,XsltElement.class);
    if (element instanceof XsltVariable) {
      return ((XsltVariable)element).getType();
    }
 else {
      final XmlAttribute attr=PsiTreeUtil.getContextOfType(expr,XmlAttribute.class,true);
      if (attr != null) {
        if (element instanceof XsltWithParam) {
          final XmlAttribute nameAttr=tag.getAttribute("name",null);
          if (nameAttr != null) {
            final XmlAttributeValue valueElement=nameAttr.getValueElement();
            if (valueElement != null) {
              final PsiReference[] references=valueElement.getReferences();
              for (              PsiReference reference : references) {
                final PsiElement psiElement=reference.resolve();
                if (psiElement instanceof XsltVariable) {
                  return ((XsltVariable)psiElement).getType();
                }
              }
            }
          }
        }
 else {
          final String name=attr.getName();
          final String tagName=tag.getLocalName();
          if ("select".equals(name)) {
            if ("copy-of".equals(tagName) || "for-each".equals(tagName) || "apply-templates".equals(tagName)) {
              return XPathType.NODESET;
            }
 else             if ("value-of".equals(tagName) || "sort".equals(tagName)) {
              return XPathType.STRING;
            }
 else {
              return XPathType.ANY;
            }
          }
 else           if ("test".equals(name)) {
            if ("if".equals(tagName) || "when".equals(tagName)) {
              return XPathType.BOOLEAN;
            }
          }
 else           if ("number".equals(name)) {
            if ("value".equals(tagName)) {
              return XPathType.NUMBER;
            }
          }
        }
      }
    }
  }
  return XPathType.UNKNOWN;
}
