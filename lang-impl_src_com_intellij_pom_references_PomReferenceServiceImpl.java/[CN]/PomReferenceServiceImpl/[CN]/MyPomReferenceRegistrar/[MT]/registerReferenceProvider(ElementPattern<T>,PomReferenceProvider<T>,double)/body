{
  final Class scope=pattern.getCondition().getInitialCondition().getAcceptedClass();
  final PsiNamePatternCondition<?> nameCondition=ContainerUtil.findInstance(pattern.getCondition().getConditions(),PsiNamePatternCondition.class);
  if (nameCondition != null) {
    final ValuePatternCondition<String> valueCondition=ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(),ValuePatternCondition.class);
    if (valueCondition != null) {
      final Collection<String> strings=valueCondition.getValues();
      registerNamedReferenceProvider(ArrayUtil.toStringArray(strings),nameCondition,scope,true,provider,priority,pattern);
      return;
    }
    final CaseInsensitiveValuePatternCondition ciCondition=ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(),CaseInsensitiveValuePatternCondition.class);
    if (ciCondition != null) {
      registerNamedReferenceProvider(ciCondition.getValues(),nameCondition,scope,false,provider,priority,pattern);
      return;
    }
  }
  SimpleProviderBinding<PomReferenceProvider> providerBinding=myBindingsMap.get(scope);
  if (providerBinding == null) {
    myBindingsMap.put(scope,providerBinding=new SimpleProviderBinding<PomReferenceProvider>());
  }
  providerBinding.registerProvider(provider,pattern,priority);
}
