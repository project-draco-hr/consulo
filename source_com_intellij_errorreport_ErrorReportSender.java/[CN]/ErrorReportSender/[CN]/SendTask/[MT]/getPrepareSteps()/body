{
  if (prepareTasks == null)   prepareTasks=new ITask[]{new ITask(){
    private boolean cheked=false;
    public boolean isSuccessful(){
      return cheked;
    }
    public String getDescription(){
      return DiagnosticBundle.message("error.report.step.check.new.eap");
    }
    public void run(){
      try {
        int itnBuildNumber=ITNProxy.getBuildNumber();
        ApplicationInfoEx appInfo=(ApplicationInfoEx)ApplicationManager.getApplication().getComponent(ApplicationInfo.class);
        String strNumber=appInfo.getBuildNumber();
        buildNumber=-1;
        try {
          buildNumber=Integer.valueOf(strNumber).intValue();
        }
 catch (        NumberFormatException e) {
        }
        if (itnBuildNumber > 0 && buildNumber > 0 && itnBuildNumber > buildNumber) {
          throw new NewBuildException(Integer.toString(itnBuildNumber));
        }
        cheked=true;
      }
 catch (      IOException e) {
        throw new SendException(e);
      }
catch (      NewBuildException e) {
        throw new SendException(e);
      }
    }
  }
,new ITask(){
    private boolean checked=false;
    public String getDescription(){
      return DiagnosticBundle.message("error.report.step.check.exception");
    }
    public boolean isSuccessful(){
      return checked;
    }
    public void run(){
      try {
        exceptionBean=ErrorReportSender.checkException(throwable);
        newThread=false;
        checked=true;
      }
 catch (      NoSuchExceptionException e) {
        exceptionBean=new ExceptionBean(throwable);
        newThread=true;
        checked=true;
      }
catch (      Exception e) {
        throw new SendException(e);
      }
    }
  }
,new ITask(){
    private boolean checked=false;
    public String getDescription(){
      return DiagnosticBundle.message("error.report.step.check.thread.status");
    }
    public boolean isSuccessful(){
      return checked;
    }
    public void run(){
      if (!newThread) {
        try {
          String threadStatus=ITNProxy.getThreadStatus(exceptionBean.getItnThreadId());
          checked=true;
          if (!threadStatus.equals(STATUS_OPEN) && !threadStatus.equals(STATUS_SUBMITTED) && !threadStatus.equals(STATUS_MORE_INFO_NEEDED)) {
            ErrorReportConfigurable.getInstance().addClosed(exceptionBean.getHashCode(),Integer.toString(exceptionBean.getItnThreadId()));
            throw new ThreadClosedException(threadStatus,exceptionBean.getItnThreadId());
          }
        }
 catch (        IOException e) {
          throw new SendException(e);
        }
catch (        ThreadClosedException e) {
          throw new SendException(e);
        }
      }
    }
  }
};
  return prepareTasks;
}
