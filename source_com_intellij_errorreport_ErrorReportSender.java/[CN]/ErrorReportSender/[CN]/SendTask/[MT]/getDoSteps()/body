{
  if (doTasks == null)   doTasks=new ITask[]{new ITask(){
    private boolean authorized=false;
    public String getDescription(){
      return DiagnosticBundle.message("error.report.step.authorize");
    }
    public boolean isSuccessful(){
      return authorized;
    }
    public void run(){
      try {
        errorBean.setExceptionHashCode(exceptionBean.getHashCode());
        String notifierId=null;
        if (notifierBean.getEmail() != null && notifierBean.getEmail().length() > 0) {
          notifierId=ErrorReportSender.authorizeEmail(notifierBean.getEmail());
          authorized=true;
        }
 else         if (notifierBean.getItnLogin() != null && notifierBean.getItnLogin().length() > 0) {
          if (newThread) {
            int threadId=ITNProxy.postNewThread(notifierBean.getItnLogin(),notifierBean.getItnPassword(),errorBean,exceptionBean,IdeaLogger.getOurCompilationTimestamp());
            exceptionBean.setItnThreadId(threadId);
          }
 else {
            ITNProxy.postNewComment(notifierBean.getItnLogin(),notifierBean.getItnPassword(),exceptionBean.getItnThreadId(),errorBean.getDescription());
          }
          notifierId=ErrorReportSender.authorizeEAP(notifierBean.getItnLogin());
          authorized=true;
        }
        errorBean.setNotifierId(notifierId);
      }
 catch (      Exception e) {
        throw new SendException(e);
      }
    }
  }
,new ITask(){
    private boolean sent=false;
    public boolean isSuccessful(){
      return sent;
    }
    public String getDescription(){
      return DiagnosticBundle.message("error.report.step.send");
    }
    public void run(){
      exceptionBean.setBuildNumber(Integer.toString(buildNumber));
      exceptionBean.setProductCode(PRODUCT_CODE);
      exceptionBean.setScrambled(buildNumber > 0);
      exceptionBean.setDate(new Date());
      try {
        ErrorReportSender.postError(errorBean,exceptionBean);
        sent=true;
      }
 catch (      Exception e) {
        throw new SendException(e);
      }
    }
  }
};
  return doTasks;
}
