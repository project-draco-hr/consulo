{
  final Ref<DataNode<ProjectData>> externalProject=new Ref<DataNode<ProjectData>>();
  final TaskUnderProgress refreshProjectStructureTask=new TaskUnderProgress(){
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored","IOResourceOpenedButNotSafelyClosed"}) @Override public void execute(    @NotNull ProgressIndicator indicator){
      ExternalSystemResolveProjectTask task=new ExternalSystemResolveProjectTask(externalSystemId,project,externalProjectPath,resolveLibraries);
      task.execute(indicator);
      externalProject.set(task.getExternalProject());
      final Throwable error=task.getError();
      if (error == null) {
        return;
      }
      final String message=buildErrorMessage(error);
      if (StringUtil.isEmpty(message)) {
        errorMessageHolder.set(String.format("Can't resolve %s project at '%s'. Reason: %s",toReadableName(externalSystemId),externalProjectPath,message));
      }
 else {
        errorMessageHolder.set(message);
      }
      errorDetailsHolder.set(extractDetails(error));
    }
  }
;
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      if (modal) {
        String title=ExternalSystemBundle.message("progress.import.text",toReadableName(externalSystemId));
        ProgressManager.getInstance().run(new Task.Modal(project,title,false){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            refreshProjectStructureTask.execute(indicator);
          }
        }
);
      }
 else {
        String title=ExternalSystemBundle.message("progress.refresh.text",toReadableName(externalSystemId));
        ProgressManager.getInstance().run(new Task.Backgroundable(project,title){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            refreshProjectStructureTask.execute(indicator);
          }
        }
);
      }
    }
  }
);
  return externalProject.get();
}
