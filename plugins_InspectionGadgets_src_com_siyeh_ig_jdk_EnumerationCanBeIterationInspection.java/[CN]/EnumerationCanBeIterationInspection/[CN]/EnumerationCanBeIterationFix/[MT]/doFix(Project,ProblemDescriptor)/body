{
  final PsiElement element=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)element.getParent();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)methodExpression.getParent();
  final PsiElement parent=methodCallExpression.getParent();
  final PsiVariable variable;
  if (parent instanceof PsiVariable) {
    variable=(PsiVariable)parent;
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!(lhs instanceof PsiReferenceExpression)) {
      return;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiVariable)) {
      return;
    }
    variable=(PsiVariable)target;
  }
 else {
    return;
  }
  final String variableName=createVariableName(element);
  final PsiStatement statement=PsiTreeUtil.getParentOfType(element,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final boolean deleteInitialization=replaceMethodCalls(variable,statement.getTextOffset(),variableName);
  final PsiType variableType=variable.getType();
  if (!(variableType instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)variableType;
  final PsiType[] parameterTypes=classType.getParameters();
  final PsiType parameterType;
  if (parameterTypes.length > 0) {
    parameterType=parameterTypes[0];
  }
 else {
    parameterType=null;
  }
  final PsiStatement newStatement=createDeclaration(methodCallExpression,variableName,parameterType);
  if (newStatement == null) {
    return;
  }
  if (deleteInitialization) {
    statement.replace(newStatement);
  }
 else {
    final PsiElement statementParent=statement.getParent();
    if (statementParent instanceof PsiForStatement) {
      final PsiElement statementGrandParent=statementParent.getParent();
      statementGrandParent.addBefore(newStatement,statementParent);
    }
 else {
      statementParent.addAfter(newStatement,statement);
    }
  }
}
