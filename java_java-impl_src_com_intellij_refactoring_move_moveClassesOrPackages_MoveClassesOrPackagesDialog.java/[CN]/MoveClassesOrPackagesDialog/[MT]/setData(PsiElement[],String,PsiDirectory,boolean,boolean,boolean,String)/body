{
  myInitialTargetDirectory=initialTargetDirectory;
  myTargetDirectoryFixed=isTargetDirectoryFixed;
  if (targetPackageName.length() != 0) {
    myWithBrowseButtonReference.prependItem(targetPackageName);
    myClassPackageChooser.prependItem(targetPackageName);
  }
  String nameFromCallback=myMoveCallback instanceof MoveClassesOrPackagesCallback ? ((MoveClassesOrPackagesCallback)myMoveCallback).getElementsToMoveName() : null;
  if (nameFromCallback != null) {
    myNameLabel.setText(nameFromCallback);
  }
 else   if (psiElements.length == 1) {
    PsiElement firstElement=psiElements[0];
    if (firstElement instanceof PsiClass) {
      LOG.assertTrue(!MoveClassesOrPackagesImpl.isClassInnerOrLocal((PsiClass)firstElement));
    }
 else {
      PsiElement parent=firstElement.getParent();
      LOG.assertTrue(parent != null);
    }
    myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label",UsageViewUtil.getType(firstElement),UsageViewUtil.getLongName(firstElement)));
  }
 else   if (psiElements.length > 1) {
    myNameLabel.setText(psiElements[0] instanceof PsiClass ? RefactoringBundle.message("move.specified.classes") : RefactoringBundle.message("move.specified.packages"));
  }
  selectInitialCard();
  myCbSearchInComments.setSelected(searchInComments);
  myCbSearchTextOccurences.setSelected(searchForTextOccurences);
  UIUtil.setEnabled(myTargetPanel,getSourceRoots().length > 0 && isMoveToPackage() && !isTargetDirectoryFixed,true);
  final JComboBox comboBox=myDestinationFolderCB.getComboBox();
  new ComboboxSpeedSearch(comboBox){
    @Override protected String getElementText(    Object element){
      if (element instanceof DirectoryChooser.ItemWrapper) {
        final VirtualFile virtualFile=((DirectoryChooser.ItemWrapper)element).getDirectory().getVirtualFile();
        final Module module=ModuleUtil.findModuleForFile(virtualFile,myProject);
        if (module != null) {
          return module.getName();
        }
      }
      return super.getElementText(element);
    }
  }
;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  comboBox.setRenderer(new HtmlListCellRenderer<DirectoryChooser.ItemWrapper>(comboBox.getRenderer()){
    @Override protected void doCustomize(    JList list,    DirectoryChooser.ItemWrapper itemWrapper,    int index,    boolean selected,    boolean hasFocus){
      if (itemWrapper != null) {
        setIcon(itemWrapper.getIcon(fileIndex));
        final PsiDirectory directory=itemWrapper.getDirectory();
        final VirtualFile virtualFile=directory != null ? directory.getVirtualFile() : null;
        append(virtualFile != null ? ProjectUtil.calcRelativeToProjectPath(virtualFile,myProject) : itemWrapper.getPresentableUrl());
      }
 else {
        setText("Leave in same source root");
      }
    }
  }
);
  final VirtualFile[] sourceRoots=getSourceRoots();
  final VirtualFile initialSourceRoot=initialTargetDirectory != null ? fileIndex.getSourceRootForFile(initialTargetDirectory.getVirtualFile()) : null;
  myDestinationFolderCB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      VirtualFile root=MoveClassesOrPackagesUtil.chooseSourceRoot(new PackageWrapper(myManager,getTargetPackage()),sourceRoots,initialTargetDirectory);
      if (root == null)       return;
      final ComboBoxModel model=comboBox.getModel();
      for (int i=0; i < model.getSize(); i++) {
        DirectoryChooser.ItemWrapper item=(DirectoryChooser.ItemWrapper)model.getElementAt(i);
        if (fileIndex.getSourceRootForFile(item.getDirectory().getVirtualFile()) == root) {
          comboBox.setSelectedItem(item);
          return;
        }
      }
      setComboboxModel(comboBox,root,fileIndex,sourceRoots,true);
    }
  }
);
  myClassPackageChooser.getChildComponent().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      setComboboxModel(comboBox,initialSourceRoot,fileIndex,sourceRoots,false);
    }
  }
);
  setComboboxModel(comboBox,initialSourceRoot,fileIndex,sourceRoots,false);
  validateButtons();
  myHelpID=helpID;
}
