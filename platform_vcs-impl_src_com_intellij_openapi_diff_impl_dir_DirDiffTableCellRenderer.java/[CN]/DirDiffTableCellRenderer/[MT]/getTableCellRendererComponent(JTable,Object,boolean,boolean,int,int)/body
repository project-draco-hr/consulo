{
  final DirDiffTableModel model=(DirDiffTableModel)table.getModel();
  final DirDiffElement element=model.getElementAt(row);
  if (element.isSeparator()) {
    return new JPanel(){
      @Override public void paint(      Graphics g){
        super.paint(g);
        int offset=0;
        int i=0;
        final TableColumnModel columnModel=table.getColumnModel();
        while (i < column) {
          offset+=columnModel.getColumn(i).getWidth();
          i++;
        }
        int width=columnModel.getColumn(column).getWidth();
        int height=table.getRowHeight(row);
        final BufferedImage image=getOrCreate(element.getName());
        g.drawImage(image,0,0,width,height,offset,0,offset + width,height,null);
      }
    }
;
  }
  final Component c=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  if (c instanceof JLabel) {
    final JLabel label=(JLabel)c;
    if (hasFocus || isSelected) {
      label.setBorder(noFocusBorder);
    }
    final DirDiffOperation op=element.getOperation();
    if (column == 3) {
      label.setIcon(op.getIcon());
      label.setHorizontalAlignment(CENTER);
      return label;
    }
 else {
      label.setIcon(null);
    }
    Color fg=isSelected ? UIUtil.getTableSelectionForeground() : getForegroundColor(op);
    label.setForeground(fg);
    if (column == 2 || column == 4) {
      label.setHorizontalAlignment(CENTER);
    }
 else     if (column == 1 || column == 5) {
      label.setHorizontalAlignment(RIGHT);
      label.setText(label.getText() + "  ");
    }
 else {
      label.setHorizontalAlignment(LEFT);
      label.setText("  " + label.getText());
    }
  }
  return c;
}
