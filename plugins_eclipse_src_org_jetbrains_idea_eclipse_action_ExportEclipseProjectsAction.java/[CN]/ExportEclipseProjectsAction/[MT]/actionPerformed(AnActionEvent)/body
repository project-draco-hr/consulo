{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null)   return;
  project.save();
  List<Module> modules=new ArrayList<Module>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (!EclipseClasspathStorageProvider.ID.equals(ClasspathStorage.getStorageType(module)) && EclipseClasspathStorageProvider.isCompatible(ModuleRootManager.getInstance(module))) {
      modules.add(module);
    }
  }
  if (modules.isEmpty()) {
    Messages.showInfoMessage(project,EclipseBundle.message("eclipse.export.nothing.to.do"),EclipseBundle.message("eclipse.export.dialog.title"));
    return;
  }
  final ExportEclipseProjectsDialog dialog=new ExportEclipseProjectsDialog(project,modules);
  dialog.show();
  if (dialog.isOK()) {
    if (dialog.isLink()) {
      for (      Module module : dialog.getSelectedModules()) {
        ClasspathStorage.setStorageType(module,EclipseClasspathStorageProvider.ID);
      }
    }
 else {
      EclipseProjectExporter.convertWithProgress(project,dialog.getSelectedModules());
    }
    project.save();
  }
}
