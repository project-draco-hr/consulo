{
  final String targetClassName=getTargetClassName();
  if (!"".equals(targetClassName)) {
    final PsiManager manager=PsiManager.getInstance(myProject);
    final PsiClass newClass=manager.findClass(targetClassName);
    if (newClass == null) {
      RefactoringMessageUtil.showErrorMessage(IntroduceConstantHandler.REFACTORING_NAME,"Class does not exist",HelpID.INTRODUCE_FIELD,myProject);
      return;
    }
    myDestinationClass=newClass;
  }
  String fieldName=getEnteredName();
  String errorString=null;
  if ("".equals(fieldName)) {
    errorString="No field name specified";
  }
 else   if (!PsiManager.getInstance(myProject).getNameHelper().isIdentifier(fieldName)) {
    errorString=RefactoringMessageUtil.getIncorrectIdentifierMessage(fieldName);
  }
  if (errorString != null) {
    RefactoringMessageUtil.showErrorMessage(IntroduceFieldHandler.REFACTORING_NAME,errorString,HelpID.INTRODUCE_FIELD,myProject);
    return;
  }
  PsiField oldField=myParentClass.findFieldByName(fieldName,true);
  if (oldField != null) {
    int answer=Messages.showYesNoDialog(myProject,"The field with the name " + fieldName + "\nalready exists in class '"+ oldField.getContainingClass().getQualifiedName()+ "'.\nContinue?",IntroduceFieldHandler.REFACTORING_NAME,Messages.getWarningIcon());
    if (answer != 0) {
      return;
    }
  }
  RefactoringSettings.getInstance().INTRODUCE_CONSTANT_VISIBILITY=getFieldVisibility();
  super.doOKAction();
}
