{
  final GrListOrMap map=(GrListOrMap)element;
  final GrNamedArgument[] namedArguments=map.getNamedArguments();
  LOG.assertTrue(map.getInitializers().length == 0);
  final PsiFile file=map.getContainingFile();
  final String packageName=file instanceof GroovyFileBase ? ((GroovyFileBase)file).getPackageName() : "";
  final CreateClassDialog dialog=new CreateClassDialog(project,GroovyBundle.message("create.class.family.name"),"",packageName,CreateClassKind.CLASS,true,ModuleUtil.findModuleForPsiElement(element));
  dialog.show();
  if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE)   return;
  boolean replaceReturnType=checkForReturnFromMethod(map);
  boolean variableDeclaration=checkForVariableDeclaration(map);
  final GrParameter methodParameter=checkForMethodParameter(map);
  final String qualifiedClassName=dialog.getClassName();
  final String selectedPackageName=StringUtil.getPackageName(qualifiedClassName);
  final String shortName=StringUtil.getShortName(qualifiedClassName);
  final GrTypeDefinition typeDefinition=createClass(project,namedArguments,selectedPackageName,shortName);
  final PsiClass generatedClass=CreateClassActionBase.createClassByType(dialog.getTargetDirectory(),typeDefinition.getName(),PsiManager.getInstance(project),map,NewGroovyClassAction.GROOVY_CLASS);
  final PsiClass replaced=(PsiClass)generatedClass.replace(typeDefinition);
  replaceMapWithClass(project,map,replaced,replaceReturnType,variableDeclaration,methodParameter);
}
