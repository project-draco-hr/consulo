{
  if (!(element instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  @NonNls final String callName=methodExpression.getReferenceName();
  if (!"append".equals(callName)) {
    return false;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return false;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return false;
  }
  final String name=containingClass.getQualifiedName();
  if ("java.lang.StringBuffer".equals(name) || "java.lang.StringBuilder".equals(name)) {
    return true;
  }
  final PsiManager manager=containingClass.getManager();
  final Project project=containingClass.getProject();
  final PsiClass appendableClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.lang.Appendable",GlobalSearchScope.allScope(project));
  if (appendableClass == null) {
    return false;
  }
  return containingClass.isInheritor(appendableClass,true);
}
