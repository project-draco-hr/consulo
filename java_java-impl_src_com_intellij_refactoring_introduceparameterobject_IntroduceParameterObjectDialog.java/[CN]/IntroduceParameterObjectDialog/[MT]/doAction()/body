{
  final boolean useExistingClass=useExistingClass();
  final boolean keepMethod=keepMethodAsDelegate();
  final String className;
  final String packageName;
  final boolean createInnerClass=myCreateInnerClassRadioButton.isSelected();
  if (createInnerClass) {
    className=getInnerClassName();
    packageName="";
  }
 else   if (useExistingClass) {
    final String existingClassName=getExistingClassName();
    className=StringUtil.getShortName(existingClassName);
    packageName=StringUtil.getPackageName(existingClassName);
  }
 else {
    packageName=getPackageName();
    className=getClassName();
  }
  List<ParameterTablePanel.VariableData> parameters=new ArrayList<ParameterTablePanel.VariableData>();
  for (  ParameterTablePanel.VariableData data : parameterInfo) {
    if (data.passAsParameter) {
      parameters.add(data);
    }
  }
  invokeRefactoring(new IntroduceParameterObjectProcessor(className,packageName,sourceMethod,parameters.toArray(new ParameterTablePanel.VariableData[parameters.size()]),keepMethod,useExistingClass,createInnerClass,myVisibilityPanel.getVisibility(),myGenerateAccessorsCheckBox.isSelected()));
}
