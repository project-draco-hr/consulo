{
  packageTextField=new PackageNameReferenceEditorCombo("",myProject,RECENTS_KEY,RefactoringBundle.message("choose.destination.package"));
  final Document document=packageTextField.getChildComponent().getDocument();
  final com.intellij.openapi.editor.event.DocumentAdapter adapter=new com.intellij.openapi.editor.event.DocumentAdapter(){
    public void documentChanged(    com.intellij.openapi.editor.event.DocumentEvent e){
      validateButtons();
    }
  }
;
  document.addDocumentListener(adapter);
  existingClassField=new ReferenceEditorComboWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      final TreeClassChooserDialog chooser=new TreeClassChooserDialog(RefactorJBundle.message("select.wrapper.class"),project,scope,null,null);
      final String classText=existingClassField.getText();
      final PsiClass currentClass=JavaPsiFacade.getInstance(project).findClass(classText,GlobalSearchScope.allScope(project));
      if (currentClass != null) {
        chooser.selectClass(currentClass);
      }
      chooser.show();
      final PsiClass selectedClass=chooser.getSelectedClass();
      if (selectedClass != null) {
        final String className=selectedClass.getQualifiedName();
        existingClassField.setText(className);
      }
    }
  }
,"",PsiManager.getInstance(myProject),true,RECENTS_KEY);
  existingClassField.getChildComponent().getDocument().addDocumentListener(adapter);
}
