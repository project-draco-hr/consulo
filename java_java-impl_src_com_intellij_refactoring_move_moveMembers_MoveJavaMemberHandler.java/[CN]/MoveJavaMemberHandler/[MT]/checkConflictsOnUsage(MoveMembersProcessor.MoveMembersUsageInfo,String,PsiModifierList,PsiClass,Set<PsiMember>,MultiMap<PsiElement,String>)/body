{
  final PsiElement element=usageInfo.getElement();
  if (element == null)   return;
  final PsiMember member=usageInfo.member;
  if (element instanceof PsiReferenceExpression) {
    PsiExpression qualifier=((PsiReferenceExpression)element).getQualifierExpression();
    PsiClass accessObjectClass=null;
    if (qualifier != null) {
      accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
    }
    if (!JavaResolveUtil.isAccessible(member,targetClass,modifierListCopy,element,accessObjectClass,null)) {
      String visibility=newVisibility != null ? newVisibility : VisibilityUtil.getVisibilityStringToDisplay(member);
      String message=RefactoringBundle.message("0.with.1.visibility.is.not.accessible.from.2",RefactoringUIUtil.getDescription(member,false),visibility,RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(element),true));
      conflicts.putValue(member,CommonRefactoringUtil.capitalize(message));
    }
  }
  if (member instanceof PsiField && targetClass.isInterface()) {
    ReadWriteAccessDetector accessDetector=ReadWriteAccessDetector.findDetector(member);
    if (accessDetector != null) {
      ReadWriteAccessDetector.Access access=accessDetector.getExpressionAccess(element);
      if (access != ReadWriteAccessDetector.Access.Read) {
        String message=RefactoringUIUtil.getDescription(member,true) + " has write access but is moved to an interface";
        conflicts.putValue(element,CommonRefactoringUtil.capitalize(message));
      }
    }
  }
  final PsiReference reference=usageInfo.getReference();
  if (reference != null) {
    RefactoringConflictsUtil.checkAccessibilityConflicts(reference,member,modifierListCopy,targetClass,membersToMove,conflicts);
  }
}
