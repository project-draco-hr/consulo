{
  if (member instanceof PsiField && member.hasModifierProperty(PsiModifier.STATIC)) {
    final List<PsiField> afterFields=new ArrayList<PsiField>();
    final PsiExpression psiExpression=((PsiField)member).getInitializer();
    if (psiExpression != null) {
      psiExpression.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitReferenceExpression(        final PsiReferenceExpression expression){
          super.visitReferenceExpression(expression);
          final PsiElement psiElement=expression.resolve();
          if (psiElement instanceof PsiField) {
            final PsiField psiField=(PsiField)psiElement;
            if ((psiField.getContainingClass() == targetClass || membersToMove.contains(psiField)) && !afterFields.contains(psiField)) {
              afterFields.add(psiField);
            }
          }
        }
      }
);
    }
    if (!afterFields.isEmpty()) {
      Collections.sort(afterFields,new Comparator<PsiField>(){
        public int compare(        final PsiField o1,        final PsiField o2){
          return -PsiUtilCore.compareElementsByPosition(o1,o2);
        }
      }
);
      return afterFields.get(0);
    }
    final List<PsiField> beforeFields=new ArrayList<PsiField>();
    for (    PsiReference psiReference : ReferencesSearch.search(member,new LocalSearchScope(targetClass))) {
      final PsiField fieldWithReference=PsiTreeUtil.getParentOfType(psiReference.getElement(),PsiField.class);
      if (fieldWithReference != null && !afterFields.contains(fieldWithReference)) {
        beforeFields.add(fieldWithReference);
      }
    }
    Collections.sort(beforeFields,PsiUtil.BY_POSITION);
    if (!beforeFields.isEmpty()) {
      return beforeFields.get(0).getPrevSibling();
    }
  }
  return null;
}
