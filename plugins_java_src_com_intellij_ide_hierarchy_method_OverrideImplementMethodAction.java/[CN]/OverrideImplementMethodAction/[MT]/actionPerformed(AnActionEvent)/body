{
  final DataContext dataContext=event.getDataContext();
  final MethodHierarchyBrowser methodHierarchyBrowser=(MethodHierarchyBrowser)MethodHierarchyBrowserBase.DATA_KEY.getData(dataContext);
  if (methodHierarchyBrowser == null)   return;
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final String commandName=event.getPresentation().getText();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          try {
            final HierarchyNodeDescriptor[] selectedDescriptors=methodHierarchyBrowser.getSelectedDescriptors();
            if (selectedDescriptors.length > 0) {
              final List<VirtualFile> files=new ArrayList<VirtualFile>(selectedDescriptors.length);
              for (              HierarchyNodeDescriptor selectedDescriptor : selectedDescriptors) {
                final PsiFile containingFile=((MethodHierarchyNodeDescriptor)selectedDescriptor).getPsiClass().getContainingFile();
                if (containingFile != null) {
                  final VirtualFile vFile=containingFile.getVirtualFile();
                  if (vFile != null) {
                    files.add(vFile);
                  }
                }
              }
              final ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(VfsUtil.toVirtualFileArray(files));
              if (!status.hasReadonlyFiles()) {
                for (                HierarchyNodeDescriptor selectedDescriptor : selectedDescriptors) {
                  OverrideImplementUtil.overrideOrImplement(((MethodHierarchyNodeDescriptor)selectedDescriptor).getPsiClass(),methodHierarchyBrowser.getBaseMethod());
                }
                ToolWindowManager.getInstance(project).activateEditorComponent();
              }
 else {
                ApplicationManager.getApplication().invokeLater(new Runnable(){
                  public void run(){
                    Messages.showErrorDialog(project,status.getReadonlyFilesMessage(),commandName);
                  }
                }
);
              }
            }
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
,commandName,null);
    }
  }
);
}
