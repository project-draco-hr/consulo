{
  final PsiMethod method=callExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType stringType=TypeUtils.getStringType(callExpression);
  final PsiType paramType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int testPosition;
  final PsiExpression message;
  if (paramType1.equals(stringType) && parameters.length >= 2) {
    testPosition=1;
    message=arguments[0];
  }
 else {
    testPosition=0;
    message=null;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)arguments[testPosition];
  PsiExpression lhs=binaryExpression.getLOperand();
  PsiExpression rhs=binaryExpression.getROperand();
  final IElementType tokenType=binaryExpression.getOperationTokenType();
  if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) {
    final PsiExpression temp=lhs;
    lhs=rhs;
    rhs=temp;
  }
  if (rhs == null) {
    return;
  }
  @NonNls final StringBuilder newExpression=new StringBuilder();
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  @NonNls final String memberName;
  if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) {
    memberName="assertNotSame";
  }
 else {
    memberName="assertSame";
  }
  if (!ImportUtils.addStaticImport("org.junit.Assert",memberName,callExpression)) {
    newExpression.append("org.junit.Assert.");
  }
  newExpression.append(memberName).append('(');
  if (message != null) {
    newExpression.append(message.getText()).append(',');
  }
  newExpression.append(lhs.getText()).append(',').append(rhs.getText()).append(')');
  replaceExpressionAndShorten(callExpression,newExpression.toString());
}
