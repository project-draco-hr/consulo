{
  if (myUpdateAll && myFile instanceof PsiJavaFile && myFile.isPhysical()&& myFile.getVirtualFile() != null && mySettings.getInspectionProfile().isToolEnabled(HighlightDisplayKey.ILLEGAL_DEPENDENCY)) {
    DependenciesBuilder builder=new ForwardDependenciesBuilder(myProject,new AnalysisScope(myFile,AnalysisScope.SOURCE_JAVA_FILES));
    final DependencyValidationManager validationManager=DependencyValidationManager.getInstance(myProject);
    builder.analyzeFileDependencies(myFile,new DependenciesBuilder.DependencyProcessor(){
      public void process(      PsiElement place,      PsiElement dependency){
        PsiFile dependencyFile=dependency.getContainingFile();
        final InspectionManagerEx iManager=((InspectionManagerEx)InspectionManager.getInstance(place.getProject()));
        if (iManager.inspectionResultSuppressed(place,HighlightDisplayKey.ILLEGAL_DEPENDENCY.toString()))         return;
        if (dependencyFile != null && dependencyFile.isPhysical() && dependencyFile.getVirtualFile() != null) {
          final DependencyRule[] rules=validationManager.getViolatorDependencyRules(myFile,dependencyFile);
          if (rules.length > 0) {
            HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ILLEGAL_DEPENDENCY,place,"Illegal dependency. Violated rules: \"" + rules[0].getDisplayText() + "\"");
            if (info != null) {
              list.add(info);
              for (int i=0; i < rules.length; i++) {
                QuickFixAction.registerQuickFixAction(info,new EditDependencyRulesAction(rules[i]));
              }
              QuickFixAction.registerQuickFixAction(info,new AddNoInspectionCommentAction(HighlightDisplayKey.ILLEGAL_DEPENDENCY,place));
              QuickFixAction.registerQuickFixAction(info,new SwitchOffToolAction(HighlightDisplayKey.ILLEGAL_DEPENDENCY));
            }
          }
        }
      }
    }
);
  }
}
