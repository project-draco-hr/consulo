{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  Set<PsiElement> skipParentsSet=new THashSet<PsiElement>();
  Set<HighlightInfo> gotHighlights=new THashSet<HighlightInfo>();
  long totalTime=0;
  if (LOG.isDebugEnabled()) {
    totalTime=System.currentTimeMillis();
  }
  List<HighlightVisitor> visitors=new ArrayList<HighlightVisitor>();
  for (int i=0; i < myHighlightVisitors.length; i++) {
    HighlightVisitor visitor=myHighlightVisitors[i];
    if (visitor.suitableForFile(myFile))     visitors.add(visitor);
  }
  HighlightInfoFilter[] filters=ApplicationManager.getApplication().getComponents(HighlightInfoFilter.class);
  for (int i=0; i < elements.length; i++) {
    ProgressManager.getInstance().checkCanceled();
    PsiElement element=elements[i];
    if (skipParentsSet.contains(element)) {
      skipParentsSet.add(element.getParent());
      continue;
    }
    HighlightInfoHolder holder=new HighlightInfoHolder(myFile,filters);
    for (int v=0; v < visitors.size(); v++) {
      HighlightVisitor visitor=visitors.get(v);
      visitor.visit(element,holder);
    }
    HighlightInfo[] highlights=holder.toArray(new HighlightInfo[holder.size()]);
    for (int j=0; j < highlights.length; j++) {
      HighlightInfo info=highlights[j];
      if (gotHighlights.contains(info))       continue;
      gotHighlights.add(info);
      if (info.getSeverity() == HighlightInfo.ERROR) {
        skipParentsSet.add(element.getParent());
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("totalTime = " + (System.currentTimeMillis() - totalTime) / (double)1000 + "s for " + elements.length + " elements");
  }
  return gotHighlights;
}
