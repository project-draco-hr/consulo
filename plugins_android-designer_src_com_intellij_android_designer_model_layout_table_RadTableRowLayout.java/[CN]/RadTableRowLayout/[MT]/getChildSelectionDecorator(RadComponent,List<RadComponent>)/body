{
  if (isTableParent()) {
    if (mySelectionDecorator == null) {
      mySelectionDecorator=new GridSelectionDecorator(JBColor.RED,1){
        @Override public Rectangle getCellBounds(        Component layer,        RadComponent component){
          try {
            RadTableLayoutComponent tableComponent=(RadTableLayoutComponent)component.getParent().getParent();
            GridInfo gridInfo=tableComponent.getVirtualGridInfo();
            int row=tableComponent.getChildren().indexOf(component.getParent());
            RadComponent[] rowComponents=gridInfo.components[row];
            int column=ArrayUtil.indexOf(rowComponents,component);
            int columnSpan=1;
            for (int i=column + 1; i < rowComponents.length; i++) {
              if (rowComponents[i] == component) {
                columnSpan++;
              }
 else {
                break;
              }
            }
            return calculateBounds(layer,gridInfo,tableComponent,component,row,column,1,columnSpan);
          }
 catch (          Throwable e) {
            return new Rectangle();
          }
        }
      }
;
    }
    mySelectionDecorator.clear();
    if (selection.size() == 1) {
      TableLayoutSpanOperation.points(mySelectionDecorator);
    }
    return mySelectionDecorator;
  }
  return super.getChildSelectionDecorator(component,selection);
}
