{
  ApplicationManager.getApplication().assertIsDispatchThread();
  ArrayList<LineMarkerInfo> array=new ArrayList<LineMarkerInfo>();
  LineMarkerInfo[] oldMarkers=DaemonCodeAnalyzerImpl.getLineMarkers(document,project);
  if (oldMarkers != null) {
    for (    LineMarkerInfo info : oldMarkers) {
      RangeHighlighter highlighter=info.highlighter;
      boolean toRemove;
      toRemove=!highlighter.isValid() || isLineMarkerInGroup(info.type,group) && startOffset <= highlighter.getStartOffset() && highlighter.getStartOffset() <= endOffset;
      if (toRemove) {
        document.getMarkupModel(project).removeHighlighter(highlighter);
      }
 else {
        array.add(info);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Removed line markers:" + (oldMarkers.length - array.size()));
    }
  }
  for (  LineMarkerInfo info : markers) {
    RangeHighlighter marker=document.getMarkupModel(project).addRangeHighlighter(info.startOffset,info.startOffset,HighlighterLayer.ADDITIONAL_SYNTAX,info.attributes,HighlighterTargetArea.LINES_IN_RANGE);
    marker.setGutterIconRenderer(info.createGutterRenderer());
    marker.setLineSeparatorColor(info.separatorColor);
    marker.setLineSeparatorPlacement(info.separatorPlacement);
    info.highlighter=marker;
    array.add(info);
  }
  LineMarkerInfo[] newMarkers=array.toArray(new LineMarkerInfo[array.size()]);
  DaemonCodeAnalyzerImpl.setLineMarkers(document,newMarkers,project);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Added line markers:" + markers.size());
  }
}
