{
  ApplicationManager.getApplication().assertIsDispatchThread();
  cleanFileLevelHighlights(project,document,group);
  HighlightInfo[] oldHighlights=DaemonCodeAnalyzerImpl.getHighlights(document,project);
  List<HighlightInfo> array=new ArrayList<HighlightInfo>();
  if (oldHighlights != null) {
    for (    HighlightInfo info : oldHighlights) {
      RangeHighlighter highlighter=info.highlighter;
      boolean toRemove=!highlighter.isValid() || info.group == group && startOffset <= highlighter.getStartOffset() && highlighter.getEndOffset() <= endOffset;
      if (toRemove) {
        document.getMarkupModel(project).removeHighlighter(highlighter);
      }
 else {
        array.add(info);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Removed segment highlighters:" + (oldHighlights.length - array.size()));
    }
  }
  for (  HighlightInfo info : highlights) {
    int infoEndOffset=info.endOffset;
    int infoStartOffset=info.startOffset;
    if (infoStartOffset < startOffset || infoEndOffset > endOffset)     continue;
    HighlightSeverity severity=info.getSeverity();
    int layer;
    if (severity == HighlightSeverity.INFORMATION || severity == HighlightSeverity.INFO || severity == HighlightSeverity.GENERIC_SERVER_ERROR_OR_WARNING) {
      layer=HighlighterLayer.ADDITIONAL_SYNTAX;
    }
 else     if (severity == HighlightSeverity.WARNING) {
      layer=HighlighterLayer.WARNING;
    }
 else {
      layer=HighlighterLayer.ERROR;
    }
    final int docLength=document.getTextLength();
    if (infoEndOffset > docLength) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Invalid HighlightInfo created: (" + infoStartOffset + ":"+ infoEndOffset+ ")"+ info.description);
      }
      infoEndOffset=docLength;
    }
    if (info.isFileLevelAnnotation) {
      final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
      if (psiFile != null) {
        if (psiFile.getViewProvider().isPhysical()) {
          VirtualFile vFile=psiFile.getViewProvider().getVirtualFile();
          final FileEditorManager manager=FileEditorManager.getInstance(project);
          for (          FileEditor fileEditor : manager.getEditors(vFile)) {
            if (fileEditor instanceof TextEditor) {
              FileLevelIntentionComponent component=new FileLevelIntentionComponent(info.description,info.severity,info.quickFixActionRanges,project,((TextEditor)fileEditor).getEditor());
              manager.showEditorAnnotation(fileEditor,component);
              List<HighlightInfo> fileLevelInfos=fileEditor.getUserData(FILE_LEVEL_HIGHLIGHTS);
              if (fileLevelInfos == null) {
                fileLevelInfos=new ArrayList<HighlightInfo>();
                fileEditor.putUserData(FILE_LEVEL_HIGHLIGHTS,fileLevelInfos);
              }
              info.fileLevelComponent=component;
              info.group=group;
              fileLevelInfos.add(info);
            }
          }
          continue;
        }
      }
    }
    RangeHighlighterEx highlighter=(RangeHighlighterEx)document.getMarkupModel(project).addRangeHighlighter(infoStartOffset,infoEndOffset,layer,info.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    info.highlighter=highlighter;
    highlighter.setAfterEndOfLine(info.isAfterEndOfLine);
    info.text=document.getCharsSequence().subSequence(infoStartOffset,infoEndOffset).toString();
    info.group=group;
    highlighter.setErrorStripeMarkColor(info.getErrorStripeMarkColor());
    highlighter.setErrorStripeTooltip(info);
    highlighter.setGutterIconRenderer(info.getGutterIconRenderer());
    HashMap<TextRange,RangeMarker> ranges2markers=new HashMap<TextRange,RangeMarker>();
    ranges2markers.put(new TextRange(infoStartOffset,infoEndOffset),info.highlighter);
    if (info.quickFixActionRanges != null) {
      info.quickFixActionMarkers=new ArrayList<Pair<HighlightInfo.IntentionActionDescriptor,RangeMarker>>();
      for (      Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
        TextRange range=pair.second;
        RangeMarker marker=ranges2markers.get(range);
        if (marker == null) {
          marker=document.createRangeMarker(range.getStartOffset(),range.getEndOffset());
          ranges2markers.put(range,marker);
        }
        info.quickFixActionMarkers.add(Pair.create(pair.first,marker));
      }
    }
    info.fixMarker=ranges2markers.get(new TextRange(info.fixStartOffset,info.fixEndOffset));
    if (info.fixMarker == null) {
      info.fixMarker=document.createRangeMarker(info.fixStartOffset,info.fixEndOffset);
    }
    array.add(info);
  }
  HighlightInfo[] newHighlights=array.toArray(new HighlightInfo[array.size()]);
  DaemonCodeAnalyzerImpl.setHighlights(document,newHighlights,project);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Added segment highlighters:" + highlights.size());
  }
  clearWhiteSpaceOptimizationFlag(document);
}
