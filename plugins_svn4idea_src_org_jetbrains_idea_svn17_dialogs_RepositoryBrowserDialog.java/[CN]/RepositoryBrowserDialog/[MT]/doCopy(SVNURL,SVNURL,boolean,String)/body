{
  final SVNException[] exception=new SVNException[1];
  Runnable command=new Runnable(){
    public void run(){
      ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      if (progress != null) {
        progress.setText((move ? SvnBundle.message("progress.text.browser.moving",src) : SvnBundle.message("progress.text.browser.copying",src)));
        progress.setText2(SvnBundle.message("progress.text.browser.remote.destination",dst));
      }
      SvnVcs17 vcs=SvnVcs17.getInstance(myProject);
      try {
        SVNCopyClient committer=vcs.createCopyClient();
        final SVNCopySource[] copySource=new SVNCopySource[]{new SVNCopySource(SVNRevision.HEAD,SVNRevision.HEAD,src)};
        committer.doCopy(copySource,dst,move,true,true,comment,null);
      }
 catch (      SVNException e) {
        exception[0]=e;
      }
    }
  }
;
  String progressTitle=move ? SvnBundle.message("progress.title.browser.move") : SvnBundle.message("progress.title.browser.copy");
  ProgressManager.getInstance().runProcessWithProgressSynchronously(command,progressTitle,false,myProject);
  if (exception[0] != null) {
    Messages.showErrorDialog(exception[0].getMessage(),SvnBundle.message("message.text.error"));
  }
}
