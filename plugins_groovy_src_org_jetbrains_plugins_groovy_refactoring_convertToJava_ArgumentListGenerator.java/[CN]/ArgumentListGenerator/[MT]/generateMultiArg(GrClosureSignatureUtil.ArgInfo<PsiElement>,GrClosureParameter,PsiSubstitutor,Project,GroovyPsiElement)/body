{
  final PsiType type=param.getType();
  if (type instanceof PsiEllipsisType) {
    for (    PsiElement element : arg.args) {
      LOG.assertTrue(element instanceof GrExpression);
      ((GrExpression)element).accept(myExpressionGenerator);
      myBuilder.append(", ");
    }
    if (arg.args.size() > 0) {
      myBuilder.delete(myBuilder.length() - 2,myBuilder.length());
      return true;
    }
 else {
      return false;
    }
  }
 else   if (type instanceof PsiArrayType) {
    myBuilder.append("new ");
    TypeWriter.writeTypeForNew(myBuilder,type,context);
    myBuilder.append("{");
    for (    PsiElement element : arg.args) {
      LOG.assertTrue(element instanceof GrExpression);
      ((GrExpression)element).accept(myExpressionGenerator);
      myBuilder.append(", ");
    }
    if (arg.args.size() > 0)     myBuilder.delete(myBuilder.length() - 2,myBuilder.length());
    myBuilder.append('}');
  }
 else {
    final GrExpression listOrMap=GroovyRefactoringUtil.generateArgFromMultiArg(substitutor,arg.args,type,project);
    LOG.assertTrue(listOrMap instanceof GrListOrMap);
    listOrMap.accept(myExpressionGenerator);
  }
  return true;
}
