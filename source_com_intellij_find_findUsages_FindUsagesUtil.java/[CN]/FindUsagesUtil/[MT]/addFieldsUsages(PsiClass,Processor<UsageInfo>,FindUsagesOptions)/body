{
  if (!options.isIncludeInherited) {
    PsiField[] fields=aClass.getFields();
    for (    PsiField field : fields) {
      addElementUsages(field,results,options);
    }
  }
 else {
    final PsiManager manager=aClass.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    PsiField[] fields=aClass.getAllFields();
    FieldsLoop:     for (int i=0; i < fields.length; i++) {
      final PsiField field=fields[i];
      for (int j=0; j < i; j++) {
        if (field.getName().equals(fields[j].getName()))         continue FieldsLoop;
      }
      final PsiClass fieldClass=field.getContainingClass();
      if (fieldClass != null && manager.areElementsEquivalent(fieldClass,aClass)) {
        addElementUsages(fields[i],results,options);
      }
 else {
        helper.processReferences(new PsiReferenceProcessor(){
          public boolean execute(          PsiReference reference){
            PsiElement refElement=reference.getElement();
            if (refElement instanceof PsiReferenceExpression) {
              PsiClass usedClass=getFieldOrMethodAccessedClass((PsiReferenceExpression)refElement,fieldClass);
              if (usedClass != null) {
                if (manager.areElementsEquivalent(usedClass,aClass) || usedClass.isInheritor(aClass,true)) {
                  addResult(results,refElement,options,field);
                }
              }
            }
            return true;
          }
        }
,field,options.searchScope,false);
      }
    }
  }
}
