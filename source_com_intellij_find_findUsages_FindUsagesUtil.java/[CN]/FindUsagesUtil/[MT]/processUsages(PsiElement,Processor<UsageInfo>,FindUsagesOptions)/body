{
  if (element instanceof PsiVariable) {
    if (options.isReadAccess || options.isWriteAccess) {
      if (options.isReadAccess && options.isWriteAccess) {
        addElementUsages(element,processor,options);
      }
 else {
        addElementUsages(element,new Processor<UsageInfo>(){
          public boolean process(          UsageInfo info){
            final PsiElement element=info.getElement();
            boolean isWrite=element instanceof PsiExpression && PsiUtil.isAccessedForWriting((PsiExpression)element);
            if (isWrite == options.isWriteAccess) {
              if (!processor.process(info))               return false;
            }
            return true;
          }
        }
,options);
      }
    }
  }
 else   if (options.isUsages) {
    addElementUsages(element,processor,options);
  }
  if (ThrowSearchUtil.isSearchable(element) && options.isThrowUsages) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        ThrowSearchUtil.addThrowUsages(processor,options.myThrowRoot,options);
      }
    }
);
  }
  if (element instanceof PsiPackage && options.isClassesUsages) {
    addClassesUsages((PsiPackage)element,processor,options);
  }
  if (element instanceof PsiClass && options.isMethodsUsages) {
    addMethodsUsages((PsiClass)element,processor,options);
  }
  if (element instanceof PsiClass && options.isFieldsUsages) {
    addFieldsUsages((PsiClass)element,processor,options);
  }
  if (element instanceof PsiClass) {
    if (((PsiClass)element).isInterface()) {
      if (options.isDerivedInterfaces) {
        if (options.isImplementingClasses) {
          addInheritors((PsiClass)element,processor,options);
        }
 else {
          addDerivedInterfaces((PsiClass)element,processor,options);
        }
      }
 else       if (options.isImplementingClasses) {
        addImplementingClasses((PsiClass)element,processor,options);
      }
    }
 else     if (options.isDerivedClasses) {
      addInheritors((PsiClass)element,processor,options);
    }
  }
  if (element instanceof PsiMethod) {
    PsiSearchHelper searchHelper=element.getManager().getSearchHelper();
    final PsiMethod psiMethod=(PsiMethod)element;
    if (psiMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
      if (options.isImplementingMethods) {
        processOverridingMethods(psiMethod,processor,searchHelper,options);
      }
    }
 else {
      if (options.isOverridingMethods) {
        processOverridingMethods(psiMethod,processor,searchHelper,options);
      }
    }
  }
  if (options.isSearchForTextOccurences && options.searchScope instanceof GlobalSearchScope) {
    String stringToSearch=getStringToSearch(element);
    RefactoringUtil.UsageInfoFactory factory=new RefactoringUtil.UsageInfoFactory(){
      public UsageInfo createUsageInfo(      PsiElement usage,      int startOffset,      int endOffset){
        return new UsageInfo(usage,startOffset,endOffset,true);
      }
    }
;
    RefactoringUtil.processTextOccurences(element,stringToSearch,(GlobalSearchScope)options.searchScope,processor,factory);
  }
}
