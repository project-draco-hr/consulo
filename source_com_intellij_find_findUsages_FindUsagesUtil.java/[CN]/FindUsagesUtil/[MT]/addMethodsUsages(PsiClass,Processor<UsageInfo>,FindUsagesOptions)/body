{
  if (options.isIncludeInherited) {
    final PsiManager manager=aClass.getManager();
    PsiMethod[] methods=aClass.getAllMethods();
    MethodsLoop:     for (int i=0; i < methods.length; i++) {
      final PsiMethod method=methods[i];
      MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
      for (int j=0; j < i; j++) {
        if (methodSignature.equals(methods[j].getSignature(PsiSubstitutor.EMPTY)))         continue MethodsLoop;
      }
      final PsiClass methodClass=method.getContainingClass();
      if (methodClass != null && manager.areElementsEquivalent(methodClass,aClass)) {
        addMethodUsages(methods[i],results,options,options.searchScope);
      }
 else {
        boolean strictSignatureSearch=!options.isIncludeOverloadUsages;
        MethodReferencesSearch.search(method,options.searchScope,strictSignatureSearch).forEach(new PsiReferenceProcessorAdapter(new PsiReferenceProcessor(){
          public boolean execute(          PsiReference reference){
            addResultFromReference(reference,methodClass,manager,aClass,results,options,method);
            return true;
          }
        }
));
      }
    }
  }
 else {
    PsiMethod[] methods=aClass.getMethods();
    for (    PsiMethod method : methods) {
      addMethodUsages(method,results,options,options.searchScope);
    }
  }
}
