{
  if (options.isIncludeInherited) {
    final PsiManager manager=aClass.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    PsiMethod[] methods=aClass.getAllMethods();
    MethodsLoop:     for (int i=0; i < methods.length; i++) {
      final PsiMethod method=methods[i];
      MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
      for (int j=0; j < i; j++) {
        if (methodSignature.equals(methods[j].getSignature(PsiSubstitutor.EMPTY)))         continue MethodsLoop;
      }
      final PsiClass methodClass=method.getContainingClass();
      if (methodClass != null && manager.areElementsEquivalent(methodClass,aClass)) {
        addMethodUsages(methods[i],results,options,options.searchScope);
      }
 else {
        helper.processReferencesIncludingOverriding(new PsiReferenceProcessor(){
          public boolean execute(          PsiReference reference){
            PsiElement refElement=reference.getElement();
            if (refElement instanceof PsiReferenceExpression) {
              PsiClass usedClass=getFieldOrMethodAccessedClass((PsiReferenceExpression)refElement,methodClass);
              if (usedClass != null) {
                if (manager.areElementsEquivalent(usedClass,aClass) || usedClass.isInheritor(aClass,true)) {
                  addResult(results,refElement,options,method);
                }
              }
            }
            return true;
          }
        }
,method,options.searchScope,!options.isIncludeOverloadUsages);
      }
    }
  }
 else {
    PsiMethod[] methods=aClass.getMethods();
    for (    PsiMethod method : methods) {
      addMethodUsages(method,results,options,options.searchScope);
    }
  }
}
