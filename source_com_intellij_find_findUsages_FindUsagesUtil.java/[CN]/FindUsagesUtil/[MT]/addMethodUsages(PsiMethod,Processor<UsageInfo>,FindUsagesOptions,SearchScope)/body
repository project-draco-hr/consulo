{
  PsiSearchHelper helper=method.getManager().getSearchHelper();
  if (method.isConstructor()) {
    if (!options.isIncludeOverloadUsages) {
      addConstructorUsages(method,helper,searchScope,result,options);
    }
 else {
      for (      PsiMethod constructor : method.getContainingClass().getConstructors()) {
        addConstructorUsages(constructor,helper,searchScope,result,options);
      }
    }
  }
 else {
    helper.processReferencesIncludingOverriding(new PsiReferenceProcessor(){
      public boolean execute(      PsiReference ref){
        return addResult(result,ref,options,method);
      }
    }
,method,searchScope,!options.isIncludeOverloadUsages);
  }
}
