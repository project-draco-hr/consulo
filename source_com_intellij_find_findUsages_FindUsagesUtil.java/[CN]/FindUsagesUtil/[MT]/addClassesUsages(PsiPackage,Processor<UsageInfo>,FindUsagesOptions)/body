{
  PsiSearchHelper helper=aPackage.getManager().getSearchHelper();
  PsiReference[] refs=helper.findReferences(aPackage,options.searchScope,false);
  HashSet<PsiFile> filesSet=new HashSet<PsiFile>();
  ArrayList<PsiFile> files=new ArrayList<PsiFile>();
  for (  PsiReference psiReference : refs) {
    PsiElement ref=psiReference.getElement();
    PsiFile file=ref.getContainingFile();
    if (filesSet.add(file)) {
      files.add(file);
    }
  }
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
  }
  ArrayList<PsiClass> classes=new ArrayList<PsiClass>();
  addClassesInPackage(aPackage,options.isIncludeSubpackages,classes);
  for (int i=0; i < classes.size(); i++) {
    PsiClass aClass=classes.get(i);
    if (progress != null) {
      progress.setText(FindBundle.message("find.searching.for.references.to.class.progress",aClass.getName()));
    }
    for (int j=0; j < files.size(); j++) {
      ProgressManager.getInstance().checkCanceled();
      PsiFile file=files.get(j);
      refs=helper.findReferences(aClass,new LocalSearchScope(file),false);
      addResults(results,refs,options,aClass);
    }
  }
  if (progress != null) {
    progress.popState();
  }
}
