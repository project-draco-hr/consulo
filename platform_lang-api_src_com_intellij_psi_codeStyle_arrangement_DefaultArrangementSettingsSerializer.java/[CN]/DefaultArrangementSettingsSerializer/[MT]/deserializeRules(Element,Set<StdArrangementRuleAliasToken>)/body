{
  if (aliases != null && myMixin instanceof MutableMixin) {
    ((MutableMixin)myMixin).setMyRuleAliases(aliases);
  }
  final List<StdArrangementMatchRule> rules=new ArrayList<StdArrangementMatchRule>();
  for (  Object o : element.getChildren(RULE_ELEMENT_NAME)) {
    Element ruleElement=(Element)o;
    Element matcherElement=ruleElement.getChild(MATCHER_ELEMENT_NAME);
    if (matcherElement == null) {
      continue;
    }
    StdArrangementEntryMatcher matcher=null;
    for (    Object c : matcherElement.getChildren()) {
      matcher=myMatcherSerializer.deserialize((Element)c);
      if (matcher != null) {
        break;
      }
    }
    if (matcher == null) {
      return ContainerUtil.newSmartList();
    }
    Element orderTypeElement=ruleElement.getChild(ORDER_TYPE_ELEMENT_NAME);
    ArrangementSettingsToken orderType=null;
    if (orderTypeElement != null) {
      String orderTypeId=orderTypeElement.getText();
      orderType=StdArrangementTokens.byId(orderTypeId);
      if (orderType == null) {
        orderType=myMixin.deserializeToken(orderTypeId);
      }
      if (orderType == null) {
        LOG.warn(String.format("Can't deserialize matching rule order type for id '%s'. Falling back to default (%s)",orderTypeId,ArrangementMatchRule.DEFAULT_ORDER_TYPE.getId()));
      }
    }
    if (orderType == null) {
      orderType=ArrangementMatchRule.DEFAULT_ORDER_TYPE;
    }
    rules.add(new StdArrangementMatchRule(matcher,orderType));
  }
  return rules;
}
