{
  final AbstractVcs vcs=ProjectLevelVcsManager.getInstance(project).findVcsByName(vcsKey.getName());
  if (vcs == null)   return;
  if (!isInLocalFSHack(virtualFile) && !canPresentNonLocal(project,vcsKey,virtualFile))   return;
  final String title=VcsBundle.message("paths.affected.in.revision",revision instanceof ShortVcsRevisionNumber ? ((ShortVcsRevisionNumber)revision).toShortString() : revision.asString());
  final CommittedChangeList[] list=new CommittedChangeList[1];
  final VcsException[] exc=new VcsException[1];
  ProgressManager.getInstance().run(new Task.Backgroundable(project,title,true,BackgroundFromStartOption.getInstance()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        final CommittedChangesProvider provider=vcs.getCommittedChangesProvider();
        if (isInLocalFSHack(virtualFile)) {
          final Pair<CommittedChangeList,FilePath> pair=provider.getOneList(virtualFile,revision);
          if (pair != null) {
            list[0]=pair.getFirst();
          }
        }
 else {
          final RepositoryLocation local=provider.getForNonLocal(virtualFile);
          if (local != null) {
            final List<CommittedChangeList> changes=provider.getCommittedChanges(provider.createDefaultSettings(),local,1);
            if (changes != null && changes.size() == 1) {
              list[0]=changes.get(0);
            }
          }
        }
      }
 catch (      VcsException e) {
        exc[0]=e;
      }
    }
    @Override public void onSuccess(){
      final AbstractVcsHelper instance=AbstractVcsHelper.getInstance(project);
      if (exc[0] != null) {
        instance.showError(exc[0],failedText(virtualFile,revision));
      }
 else       if (list[0] == null) {
        Messages.showErrorDialog(project,failedText(virtualFile,revision),getTitle());
      }
 else {
        instance.showChangesListBrowser(list[0],virtualFile,title);
      }
    }
  }
);
}
