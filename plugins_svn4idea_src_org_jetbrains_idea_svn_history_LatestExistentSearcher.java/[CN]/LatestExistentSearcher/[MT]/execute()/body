{
  if (!myStartExistsKnown) {
    final SvnFileUrlMapping mapping=myVcs.getSvnFileUrlMapping();
    final VirtualFile vf=mapping.getVcRootByUrl(myUrl.toString());
    if (vf == null) {
      return -1;
    }
    final SVNWCClient client=myVcs.createWCClient();
    try {
      final SVNInfo info=client.doInfo(new File(vf.getPath()),SVNRevision.WORKING);
      if ((info == null) || (info.getRevision() == null)) {
        return -1;
      }
      myStartNumber=info.getRevision().getNumber();
    }
 catch (    SVNException e) {
      return -1;
    }
  }
  long latestOk=myStartNumber;
  SVNRepository repository=null;
  try {
    repository=myVcs.createRepository(myUrl.toString());
    final SVNURL repRoot=repository.getRepositoryRoot(true);
    if (repRoot != null) {
      final String urlString=myUrl.toString().substring(repRoot.toString().length());
      for (long i=myStartNumber + 1; i < myEndNumber; i++) {
        final SVNNodeKind kind=repository.checkPath(urlString,i);
        if (SVNNodeKind.DIR.equals(kind) || SVNNodeKind.FILE.equals(kind)) {
          latestOk=i;
        }
      }
    }
  }
 catch (  SVNException e) {
    return -1;
  }
 finally {
    if (repository != null) {
      repository.closeSession();
    }
  }
  return latestOk;
}
