def checkauthz(hgweb, req, op):
    'Check permission for operation based on request data (including\n    authentication info). Return if op allowed, else raise an ErrorResponse\n    exception.'
    user = req.env.get('REMOTE_USER')
    deny_read = hgweb.configlist('web', 'deny_read')
    if (deny_read and ((not user) or (deny_read == ['*']) or (user in deny_read))):
        raise ErrorResponse(HTTP_UNAUTHORIZED, 'read not authorized')
    allow_read = hgweb.configlist('web', 'allow_read')
    result = ((not allow_read) or (allow_read == ['*']))
    if (not (result or (user in allow_read))):
        raise ErrorResponse(HTTP_UNAUTHORIZED, 'read not authorized')
    if ((op == 'pull') and (not hgweb.allowpull)):
        raise ErrorResponse(HTTP_UNAUTHORIZED, 'pull not authorized')
    elif ((op == 'pull') or (op is None)):
        return
    if (req.env['REQUEST_METHOD'] != 'POST'):
        msg = 'push requires POST request'
        raise ErrorResponse(HTTP_METHOD_NOT_ALLOWED, msg)
    scheme = req.env.get('wsgi.url_scheme')
    if (hgweb.configbool('web', 'push_ssl', True) and (scheme != 'https')):
        raise ErrorResponse(HTTP_OK, 'ssl required')
    deny = hgweb.configlist('web', 'deny_push')
    if (deny and ((not user) or (deny == ['*']) or (user in deny))):
        raise ErrorResponse(HTTP_UNAUTHORIZED, 'push not authorized')
    allow = hgweb.configlist('web', 'allow_push')
    result = (allow and ((allow == ['*']) or (user in allow)))
    if (not result):
        raise ErrorResponse(HTTP_UNAUTHORIZED, 'push not authorized')
