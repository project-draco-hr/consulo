{
  long repositoryId=getRepositoryId();
  if (repositoryId < 0) {
    try {
      ClassFileData classFileData=getClassFileData();
      int offset=classFileData.getConstantPoolEnd();
      byte[] data=classFileData.getData();
      if (offset + 2 > data.length) {
        throw new ClsFormatException();
      }
      int b1=data[offset++] & 0xFF;
      int b2=data[offset] & 0xFF;
      int flags=((b1 << 8) + b2) & ClsUtil.ACC_CLASS_MASK;
      PsiElement parent=getParent();
      if (parent instanceof PsiClass) {
        PsiClass aClass=(PsiClass)parent;
        if (aClass.isInterface()) {
          flags|=ClsUtil.ACC_STATIC;
        }
 else {
          flags&=~ClsUtil.ACC_STATIC;
          BytePointer ptr=readClassAttribute("InnerClasses");
          if (ptr != null) {
            ptr.offset+=4;
            int numClasses=ClsUtil.readU2(ptr);
            int startOffset=ptr.offset + 4;
            for (int i=0; i < numClasses; i++) {
              BytePointer ptr1=new BytePointer(classFileData.getData(),startOffset + i * 8);
              int innerNameIdx=ClsUtil.readU2(ptr1);
              if (innerNameIdx == 0) {
                continue;
              }
              int innerNameOffset=classFileData.getOffsetInConstantPool(innerNameIdx);
              String innerName=ClsUtil.convertClassName(ClsUtil.readUtf8Info(classFileData.getData(),innerNameOffset),true);
              if (getName().equals(innerName)) {
                flags=ClsUtil.readU2(ptr1);
                break;
              }
            }
          }
        }
      }
      return flags;
    }
 catch (    ClsFormatException e) {
      return 0;
    }
  }
 else {
    ClassView classView=getRepositoryManager().getClassView();
    return classView.getModifiers(repositoryId);
  }
}
