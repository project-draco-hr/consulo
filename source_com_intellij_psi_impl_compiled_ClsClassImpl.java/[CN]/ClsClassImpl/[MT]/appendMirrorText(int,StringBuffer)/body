{
  ClsDocCommentImpl docComment=(ClsDocCommentImpl)getDocComment();
  if (docComment != null) {
    docComment.appendMirrorText(indentLevel,buffer);
    goNextLine(indentLevel,buffer);
  }
  ((ClsElementImpl)getModifierList()).appendMirrorText(indentLevel,buffer);
  buffer.append(isEnum() ? "enum " : isAnnotationType() ? "@interface " : isInterface() ? "interface " : "class ");
  ((ClsElementImpl)getNameIdentifier()).appendMirrorText(indentLevel,buffer);
  ((ClsTypeParametersListImpl)getTypeParameterList()).appendMirrorText(indentLevel,buffer);
  buffer.append(' ');
  if (!isEnum() && !isAnnotationType()) {
    ((ClsElementImpl)getExtendsList()).appendMirrorText(indentLevel,buffer);
    buffer.append(' ');
  }
  if (!isInterface()) {
    ((ClsElementImpl)getImplementsList()).appendMirrorText(indentLevel,buffer);
  }
  buffer.append('{');
  final int newIndentLevel=indentLevel + getIndentSize();
  PsiField[] fields=getFields();
  if (fields.length > 0) {
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < fields.length; i++) {
      PsiField field=fields[i];
      ((ClsElementImpl)field).appendMirrorText(newIndentLevel,buffer);
      if (field instanceof ClsEnumConstantImpl) {
        if (i < fields.length - 1 && fields[i + 1] instanceof ClsEnumConstantImpl) {
          buffer.append(", ");
        }
 else {
          buffer.append(";");
          if (i < fields.length - 1) {
            goNextLine(newIndentLevel,buffer);
          }
        }
      }
 else       if (i < fields.length - 1) {
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
  PsiMethod[] methods=getMethods();
  if (methods.length > 0) {
    goNextLine(newIndentLevel,buffer);
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < methods.length; i++) {
      PsiMethod method=methods[i];
      ((ClsElementImpl)method).appendMirrorText(newIndentLevel,buffer);
      if (i < methods.length - 1) {
        goNextLine(newIndentLevel,buffer);
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
  PsiClass[] classes=getInnerClasses();
  if (classes.length > 0) {
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < classes.length; i++) {
      PsiClass aClass=classes[i];
      ((ClsElementImpl)aClass).appendMirrorText(newIndentLevel,buffer);
      if (i < classes.length - 1) {
        goNextLine(newIndentLevel,buffer);
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
  goNextLine(indentLevel,buffer);
  buffer.append('}');
}
