{
synchronized (PsiLock.LOCK) {
    if (myMethods == null) {
      long repositoryId=getRepositoryId();
      if (repositoryId < 0) {
        try {
          ClassFileData classFileData=getClassFileData();
          BytePointer ptr=new BytePointer(classFileData.getData(),classFileData.getConstantPoolEnd() + 6);
          int count=ClsUtil.readU2(ptr);
          ptr.offset+=count * 2;
          count=ClsUtil.readU2(ptr);
          for (int i=0; i < count; i++) {
            ptr.offset+=6;
            ClsUtil.skipAttributes(ptr);
          }
          count=ClsUtil.readU2(ptr);
          ArrayList<PsiMethod> array=new ArrayList<PsiMethod>();
          for (int i=0; i < count; i++) {
            ClsMethodImpl method=new ClsMethodImpl(this,ptr.offset);
            String name=method.getName();
            if (!method.isBridge()) {
              if (myManager.getNameHelper().isIdentifier(name) && name.indexOf('$') < 0) {
                array.add(method);
              }
            }
            ptr.offset+=6;
            ClsUtil.skipAttributes(ptr);
          }
          myMethods=array.toArray(new PsiMethod[array.size()]);
        }
 catch (        ClsFormatException e) {
          myMethods=PsiMethod.EMPTY_ARRAY;
        }
      }
 else {
        long[] methodIds=getRepositoryManager().getClassView().getMethods(repositoryId);
        PsiMethod[] methods=new PsiMethod[methodIds.length];
        RepositoryElementsManager repositoryElementsManager=getRepositoryElementsManager();
        for (int i=0; i < methodIds.length; i++) {
          long id=methodIds[i];
          methods[i]=(PsiMethod)repositoryElementsManager.findOrCreatePsiElementById(id);
        }
        myMethods=methods;
      }
    }
    ;
  }
  return myMethods;
}
