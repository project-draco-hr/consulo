{
  if (myInnerClasses == null) {
    long repositoryId=getRepositoryId();
    if (repositoryId < 0) {
      VirtualFile vFile=myClassFileData.vFile;
      VirtualFile parentFile=vFile.getParent();
      if (parentFile == null)       return PsiClass.EMPTY_ARRAY;
      String name=vFile.getNameWithoutExtension();
      String prefix=name + "$";
      ArrayList<PsiClass> array=new ArrayList<PsiClass>();
      VirtualFile[] children=parentFile.getChildren();
      for (      VirtualFile child : children) {
        String childName=child.getNameWithoutExtension();
        if (childName.startsWith(prefix)) {
          String innerName=childName.substring(prefix.length());
          if (innerName.indexOf('$') >= 0)           continue;
          if (!JavaPsiFacade.getInstance(myManager.getProject()).getNameHelper().isIdentifier(innerName))           continue;
          PsiClass aClass=new ClsClassImpl(myManager,this,new ClassFileData(child));
          array.add(aClass);
        }
      }
      myInnerClasses=array.toArray(new PsiClass[array.size()]);
    }
 else {
      long[] classIds=getRepositoryManager().getClassView().getInnerClasses(repositoryId);
      PsiClass[] classes=new PsiClass[classIds.length];
      RepositoryElementsManager repositoryElementsManager=getRepositoryElementsManager();
      for (int i=0; i < classIds.length; i++) {
        long id=classIds[i];
        classes[i]=(PsiClass)repositoryElementsManager.findOrCreatePsiElementById(id);
      }
      myInnerClasses=classes;
    }
  }
  return myInnerClasses;
}
