{
  if (!checkBases) {
    Map<String,PsiMethod[]> methodsMap=myCachedMethodsMap;
    if (methodsMap == null) {
      methodsMap=new HashMap<String,PsiMethod[]>();
      Map<String,List<PsiMethod>> cachedMethodsMap=new HashMap<String,List<PsiMethod>>();
      final PsiMethod[] methods=getMethods();
      for (      final PsiMethod method : methods) {
        List<PsiMethod> list=cachedMethodsMap.get(method.getName());
        if (list == null) {
          list=new ArrayList<PsiMethod>(1);
          cachedMethodsMap.put(method.getName(),list);
        }
        list.add(method);
      }
      for (      final String methodName : cachedMethodsMap.keySet()) {
        List<PsiMethod> methodList=cachedMethodsMap.get(methodName);
        methodsMap.put(methodName,methodList.toArray(new PsiMethod[methodList.size()]));
      }
      myCachedMethodsMap=methodsMap;
    }
    final PsiMethod[] psiMethods=methodsMap.get(name);
    return psiMethods != null ? psiMethods : PsiMethod.EMPTY_ARRAY;
  }
  return PsiClassImplUtil.findMethodsByName(this,name,checkBases);
}
