{
  PsiElement parent=getParent();
  if (parent instanceof PsiFile) {
    String packageName=((ClsFileImpl)parent).getPackageName();
    String sourceFileName=getSourceFileName();
    String relativeFilePath=packageName.replace('.','/') + '/' + sourceFileName;
    final VirtualFile vFile=getContainingFile().getVirtualFile();
    ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
    final OrderEntry[] orderEntries=projectFileIndex.getOrderEntriesForFile(vFile);
    for (int i=0; i < orderEntries.length; i++) {
      VirtualFile[] files=orderEntries[i].getFiles(OrderRootType.SOURCES);
      for (int j=0; j < files.length; j++) {
        VirtualFile source=files[j].findFileByRelativePath(relativeFilePath);
        if (source != null) {
          PsiFile psiSource=getManager().findFile(source);
          if (psiSource == null)           continue;
          if (!(psiSource instanceof PsiJavaFile)) {
            LOG.error("Not PsiJavaFile:" + psiSource);
            continue;
          }
          PsiJavaFile psiJavaFile=(PsiJavaFile)psiSource;
          PsiClass[] classes=psiJavaFile.getClasses();
          for (int k=0; k < classes.length; k++) {
            PsiClass aClass=classes[k];
            if (aClass.getName().equals(getName()))             return aClass;
          }
        }
      }
    }
  }
 else {
    ClsClassImpl parentClass=(ClsClassImpl)parent;
    PsiClass parentSourceMirror=parentClass.getSourceMirrorClass();
    if (parentSourceMirror == null)     return null;
    PsiClass[] innerClasses=parentSourceMirror.getInnerClasses();
    for (int i=0; i < innerClasses.length; i++) {
      PsiClass innerClass=innerClasses[i];
      if (innerClass.getName().equals(getName()))       return innerClass;
    }
  }
  return null;
}
