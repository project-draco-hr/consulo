{
  try {
    String signature=getSignatureAttribute();
    if (signature == null)     return false;
    CharacterIterator iterator=new StringCharacterIterator(signature,0);
    setTypeParametersListIfNull(GenericSignatureParsing.parseTypeParametersDeclaration(iterator,this,signature));
    PsiJavaCodeReferenceElement[] supers=GenericSignatureParsing.parseToplevelClassRefSignatures(iterator,this);
    PsiReferenceList implementsList;
    PsiReferenceList extendsList;
    if (!isInterface()) {
      if (supers.length > 0 && !supers[0].getCanonicalText().equals("java.lang.Object")) {
        extendsList=new ClsReferenceListImpl(this,new PsiJavaCodeReferenceElement[]{supers[0]},PsiKeyword.EXTENDS);
      }
 else {
        extendsList=new ClsReferenceListImpl(this,PsiJavaCodeReferenceElement.EMPTY_ARRAY,PsiKeyword.EXTENDS);
      }
      PsiJavaCodeReferenceElement[] interfaces=buildInterfaces(supers);
      implementsList=new ClsReferenceListImpl(this,interfaces,PsiKeyword.IMPLEMENTS);
    }
 else {
      implementsList=new ClsReferenceListImpl(this,PsiJavaCodeReferenceElement.EMPTY_ARRAY,PsiKeyword.IMPLEMENTS);
      if (supers.length == 0 || supers[0].getCanonicalText().equals("java.lang.Object")) {
        supers=buildInterfaces(supers);
      }
      extendsList=new ClsReferenceListImpl(this,supers,PsiKeyword.EXTENDS);
    }
    setExtendsListIfNull(extendsList);
    setImplementsListIfNull(implementsList);
  }
 catch (  ClsFormatException e) {
    return false;
  }
  return true;
}
