{
  final File projectFile=File.createTempFile("lighttemp",".ipr");
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @SuppressWarnings({"AssignmentToStaticFieldFromInstanceMethod"}) public void run(){
      if (ourProject != null) {
        closeAndDeleteProject();
      }
 else {
        cleanPersistedVFSContent();
      }
      LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectFile);
      ourProject=ProjectManagerEx.getInstanceEx().newProject(FileUtil.getNameWithoutExtension(projectFile),projectFile.getPath(),false,false);
      ourPsiManager=null;
      ourModule=createMainModule();
      final VirtualFile dummyRoot=VirtualFileManager.getInstance().findFileByUrl("temp:///");
      try {
        ourSourceRoot=dummyRoot.createChildDirectory(this,"src");
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      FileBasedIndex.getInstance().registerIndexableSet(new IndexableFileSet(){
        public boolean isInSet(        final VirtualFile file){
          return file.getFileSystem() == ourSourceRoot.getFileSystem();
        }
        public void iterateIndexableFilesIn(        final VirtualFile file,        final ContentIterator iterator){
          if (file.isDirectory()) {
            for (            VirtualFile child : file.getChildren()) {
              iterateIndexableFilesIn(child,iterator);
            }
          }
 else {
            iterator.processFile(file);
          }
        }
      }
);
      final ModuleRootManager rootManager=ModuleRootManager.getInstance(ourModule);
      final ModifiableRootModel rootModel=rootManager.getModifiableModel();
      if (projectJDK != null) {
        ourJDK=projectJDK;
        rootModel.setSdk(projectJDK);
      }
      final ContentEntry contentEntry=rootModel.addContentEntry(ourSourceRoot);
      contentEntry.addSourceFolder(ourSourceRoot,false);
      rootModel.commit();
      final MessageBusConnection connection=ourProject.getMessageBus().connect();
      connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
        public void beforeRootsChange(        ModuleRootEvent event){
          if (!event.isCausedByFileTypesChange()) {
            fail("Root modification in LightIdeaTestCase is not allowed.");
          }
        }
        public void rootsChanged(        ModuleRootEvent event){
        }
      }
);
      connection.subscribe(ProjectTopics.MODULES,new ModuleListener(){
        public void moduleAdded(        Project project,        Module module){
          fail("Adding modules is not permitted in LightIdeaTestCase.");
        }
        public void beforeModuleRemoved(        Project project,        Module module){
        }
        public void moduleRemoved(        Project project,        Module module){
        }
        public void modulesRenamed(        Project project,        List<Module> modules){
        }
      }
);
      ((StartupManagerImpl)StartupManager.getInstance(getProject())).runStartupActivities();
    }
  }
);
}
