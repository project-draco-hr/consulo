{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Set<PsiElement> skipParentsSet=new THashSet<PsiElement>();
  final Set<HighlightInfo> gotHighlights=new THashSet<HighlightInfo>();
  final List<HighlightVisitor> visitors=new ArrayList<HighlightVisitor>();
  for (  HighlightVisitor visitor : highlightVisitors) {
    if (visitor.suitableForFile(myFile))     visitors.add(visitor);
  }
  boolean forceHighlightParents=false;
  for (  HighlightRangeExtension extension : Extensions.getExtensions(HighlightRangeExtension.EP_NAME)) {
    if (extension.isForceHighlightParents(myFile)) {
      forceHighlightParents=true;
      break;
    }
  }
  final HighlightInfoHolder holder=createInfoHolder();
  holder.setWritable(true);
  ProgressManager progressManager=ProgressManager.getInstance();
  setProgressLimit((long)elements.size() * visitors.size());
  int chunkSize=Math.max(1,elements.size() / 100);
  int nextLimit=chunkSize;
  for (int i=0; i < elements.size(); i++) {
    PsiElement element=elements.get(i);
    progressManager.checkCanceled();
    if (element != myFile && !skipParentsSet.isEmpty() && element.getFirstChild() != null && skipParentsSet.remove(element)) {
      skipParentsSet.add(element.getParent());
      continue;
    }
    if (element instanceof PsiErrorElement) {
      myHasErrorElement=true;
    }
    holder.clear();
    for (int j=0; j < visitors.size(); j++) {
      HighlightVisitor visitor=visitors.get(j);
      visitor.visit(element,holder);
    }
    if (i == nextLimit) {
      advanceProgress(chunkSize * visitors.size());
      nextLimit=i + chunkSize;
    }
    for (int j=0; j < holder.size(); j++) {
      HighlightInfo info=holder.get(j);
      if (!gotHighlights.add(info))       continue;
      boolean isError=info.getSeverity() == HighlightSeverity.ERROR;
      if (isError) {
        if (!forceHighlightParents) {
          skipParentsSet.add(element.getParent());
        }
        myErrorFound=true;
      }
    }
  }
  return gotHighlights;
}
