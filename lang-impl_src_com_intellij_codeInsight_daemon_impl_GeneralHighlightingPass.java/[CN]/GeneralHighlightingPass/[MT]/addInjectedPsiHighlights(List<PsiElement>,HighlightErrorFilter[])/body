{
  List<DocumentWindow> injected=InjectedLanguageUtil.getCachedInjectedDocuments(myFile);
  Collection<PsiElement> hosts=new THashSet<PsiElement>(elements.size() + injected.size());
  for (  DocumentWindow documentRange : injected) {
    if (!documentRange.isValid())     continue;
    PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);
    if (file == null)     continue;
    PsiElement context=file.getContext();
    if (context != null && context.isValid() && !file.getProject().isDisposed() && (myUpdateAll || new ProperTextRange(myStartOffset,myEndOffset).intersects(context.getTextRange()))) {
      hosts.add(context);
    }
  }
  hosts.addAll(elements);
  final Collection<PsiFile> injectedFiles=new THashSet<PsiFile>();
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  final TextAttributes injectedAttributes=scheme.getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT);
  for (  PsiElement element : hosts) {
    InjectedLanguageUtil.enumerate(element,myFile,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
      public void visit(      @NotNull PsiFile injectedPsi,      @NotNull List<PsiLanguageInjectionHost.Shred> places){
        if (injectedFiles.add(injectedPsi)) {
          for (          PsiLanguageInjectionHost.Shred place : places) {
            TextRange textRange=place.getRangeInsideHost().shiftRight(place.host.getTextRange().getStartOffset());
            if (textRange.isEmpty())             continue;
            String desc=injectedPsi.getText();
            HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.INJECTED_LANGUAGE_FRAGMENT,textRange,null,desc,injectedAttributes);
            addHighlightInfo(textRange,info);
          }
        }
      }
    }
,false);
  }
  if (injectedFiles.isEmpty())   return;
  final InjectedLanguageManager injectedLanguageManager=InjectedLanguageManager.getInstance(myProject);
  JobUtil.invokeConcurrentlyUnderMyProgress(injectedFiles,new Processor<PsiFile>(){
    public boolean process(    final PsiFile injectedPsi){
      AnnotationHolderImpl annotationHolder=createAnnotationHolder();
      highlightInjectedIn(injectedPsi,annotationHolder,errorFilters,injectedLanguageManager);
      DocumentWindow documentWindow=(DocumentWindow)PsiDocumentManager.getInstance(myProject).getCachedDocument(injectedPsi);
      for (      Annotation annotation : annotationHolder) {
        final TextRange fixedTextRange;
        final int startOffset=annotation.getStartOffset();
        TextRange textRange=documentWindow.getHostRange(startOffset);
        if (textRange == null) {
          textRange=findNearestTextRange(documentWindow,startOffset);
          final boolean isBefore=startOffset < textRange.getStartOffset();
          fixedTextRange=new ProperTextRange(isBefore ? textRange.getStartOffset() - 1 : textRange.getEndOffset(),isBefore ? textRange.getStartOffset() : textRange.getEndOffset() + 1);
        }
 else {
          fixedTextRange=null;
        }
        final HighlightInfo highlightInfo=HighlightInfo.fromAnnotation(annotation,fixedTextRange);
        addHighlightInfo(textRange,highlightInfo);
      }
      for (      HighlightInfo info : highlightTodos(injectedPsi,injectedPsi.getText(),0,injectedPsi.getTextLength())) {
        List<TextRange> editables=injectedLanguageManager.intersectWithAllEditableFragments(injectedPsi,new ProperTextRange(info.startOffset,info.endOffset));
        for (        TextRange editable : editables) {
          TextRange hostRange=documentWindow.injectedToHost(editable);
          HighlightInfo patched=HighlightInfo.createHighlightInfo(info.type,hostRange,info.description,info.description,info.forcedTextAttributes);
          patched.toolTip=info.toolTip;
          addHighlightInfo(hostRange,patched);
        }
      }
      return true;
    }
  }
,"Highlight injected language fragments");
}
