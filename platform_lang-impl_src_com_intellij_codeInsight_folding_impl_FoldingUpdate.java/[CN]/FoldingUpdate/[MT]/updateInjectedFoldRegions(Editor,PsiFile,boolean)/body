{
  if (file instanceof PsiCompiledElement)   return null;
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Project project=file.getProject();
  Document document=editor.getDocument();
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).isUncommited(document));
  final FoldingModel foldingModel=editor.getFoldingModel();
  final long timeStamp=document.getModificationStamp();
  Object lastTimeStamp=editor.getUserData(LAST_UPDATE_INJECTED_STAMP_KEY);
  if (lastTimeStamp instanceof Long && ((Long)lastTimeStamp).longValue() == timeStamp)   return null;
  List<DocumentWindow> injectedDocuments=InjectedLanguageUtil.getCachedInjectedDocuments(file);
  if (injectedDocuments.isEmpty())   return null;
  final List<EditorWindow> injectedEditors=new ArrayList<EditorWindow>();
  final List<PsiFile> injectedFiles=new ArrayList<PsiFile>();
  final List<FoldingMap> maps=new ArrayList<FoldingMap>();
  for (  final DocumentWindow injectedDocument : injectedDocuments) {
    if (!injectedDocument.isValid()) {
      continue;
    }
    InjectedLanguageUtil.enumerate(injectedDocument,file,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
      @Override public void visit(      @NotNull PsiFile injectedFile,      @NotNull List<PsiLanguageInjectionHost.Shred> places){
        if (!injectedFile.isValid())         return;
        Editor injectedEditor=InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor,injectedFile);
        if (!(injectedEditor instanceof EditorWindow))         return;
        injectedEditors.add((EditorWindow)injectedEditor);
        injectedFiles.add(injectedFile);
        final FoldingMap map=new FoldingMap();
        maps.add(map);
        getFoldingsFor(injectedFile,injectedEditor.getDocument(),map,false);
      }
    }
);
  }
  return new Runnable(){
    @Override public void run(){
      final ArrayList<Runnable> updateOperations=new ArrayList<Runnable>(injectedEditors.size());
      for (int i=0; i < injectedEditors.size(); i++) {
        EditorWindow injectedEditor=injectedEditors.get(i);
        PsiFile injectedFile=injectedFiles.get(i);
        if (!injectedEditor.getDocument().isValid())         continue;
        FoldingMap map=maps.get(i);
        updateOperations.add(new UpdateFoldRegionsOperation(project,injectedEditor,injectedFile,map,applyDefaultState ? EXCEPT_CARET_REGION : NO,!applyDefaultState,true));
      }
      foldingModel.runBatchFoldingOperation(new Runnable(){
        @Override public void run(){
          for (          Runnable operation : updateOperations) {
            operation.run();
          }
        }
      }
);
      editor.putUserData(LAST_UPDATE_INJECTED_STAMP_KEY,timeStamp);
    }
  }
;
}
