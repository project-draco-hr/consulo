{
  if (file instanceof PsiCompiledElement)   return null;
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Project project=file.getProject();
  Document document=editor.getDocument();
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).isUncommited(document));
  final long timeStamp=document.getModificationStamp();
  Object lastTimeStamp=editor.getUserData(LAST_UPDATE_INJECTED_STAMP_KEY);
  if (lastTimeStamp instanceof Long && ((Long)lastTimeStamp).longValue() == timeStamp)   return null;
  final TreeMap<PsiElement,FoldingDescriptor> elementsToFoldMap=new TreeMap<PsiElement,FoldingDescriptor>(COMPARE_BY_OFFSET);
  List<DocumentWindow> injectedDocuments=InjectedLanguageUtil.getCachedInjectedDocuments(file);
  if (injectedDocuments.isEmpty())   return null;
  for (  DocumentWindow injectedDocument : injectedDocuments) {
    PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(injectedDocument);
    if (psiFile == null || !psiFile.isValid() || !injectedDocument.isValid())     continue;
    getFoldingsFor(psiFile,injectedDocument,elementsToFoldMap,false);
  }
  final Runnable operation=new UpdateFoldRegionsOperation(project,editor,elementsToFoldMap,false,true);
  return new Runnable(){
    public void run(){
      editor.getFoldingModel().runBatchFoldingOperationDoNotCollapseCaret(operation);
      editor.putUserData(LAST_UPDATE_INJECTED_STAMP_KEY,timeStamp);
    }
  }
;
}
