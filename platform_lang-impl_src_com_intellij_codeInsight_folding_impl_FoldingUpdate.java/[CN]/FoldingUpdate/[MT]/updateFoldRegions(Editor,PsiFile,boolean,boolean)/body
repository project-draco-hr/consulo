{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Project project=file.getProject();
  final Document document=editor.getDocument();
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).isUncommited(document));
  String currentFileExtension=null;
  final VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile != null) {
    currentFileExtension=virtualFile.getExtension();
  }
  ParameterizedCachedValue<Runnable,Couple<Boolean>> value=editor.getUserData(CODE_FOLDING_KEY);
  if (value != null) {
    final String oldExtension=editor.getUserData(CODE_FOLDING_FILE_EXTENSION_KEY);
    if (oldExtension == null ? currentFileExtension != null : !oldExtension.equals(currentFileExtension)) {
      value=null;
      editor.putUserData(CODE_FOLDING_KEY,null);
    }
  }
  editor.putUserData(CODE_FOLDING_FILE_EXTENSION_KEY,currentFileExtension);
  if (value != null && value.hasUpToDateValue() && !applyDefaultState)   return null;
  if (quick)   return getUpdateResult(file,document,quick,project,editor,applyDefaultState).getValue();
  return CachedValuesManager.getManager(project).getParameterizedCachedValue(editor,CODE_FOLDING_KEY,new ParameterizedCachedValueProvider<Runnable,Couple<Boolean>>(){
    @Override public CachedValueProvider.Result<Runnable> compute(    Couple<Boolean> param){
      Document document=editor.getDocument();
      PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
      return getUpdateResult(file,document,param.first,project,editor,param.second);
    }
  }
,false,Couple.of(quick,applyDefaultState));
}
