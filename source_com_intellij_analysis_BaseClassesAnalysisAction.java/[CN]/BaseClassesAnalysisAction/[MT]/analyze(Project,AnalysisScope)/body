{
  FileDocumentManager.getInstance().saveAllDocuments();
  ProgressManager.getInstance().run(new Task.Modal(project,AnalysisScopeBundle.message("analyzing.project"),true){
    public void run(    final ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      indicator.setText(AnalysisScopeBundle.message("checking.class.files"));
      final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
      final boolean upToDate=compilerManager.isUpToDate(compilerManager.createProjectCompileScope(myProject));
      if (!upToDate) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            final int i=Messages.showYesNoCancelDialog(getProject(),AnalysisScopeBundle.message("recompile.confirmation.message"),AnalysisScopeBundle.message("project.is.out.of.date"),Messages.getWarningIcon());
            if (i == 2)             return;
            if (i == 0) {
              compileAndAnalyze(project,scope);
            }
 else {
              analyzeClasses(project,scope,indicator);
            }
          }
        }
);
      }
 else {
        analyzeClasses(project,scope,indicator);
      }
    }
  }
);
}
