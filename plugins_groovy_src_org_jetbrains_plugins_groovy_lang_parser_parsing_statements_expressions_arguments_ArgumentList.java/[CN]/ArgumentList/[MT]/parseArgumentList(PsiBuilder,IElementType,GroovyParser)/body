{
  boolean hasFirstArg=argumentParse(builder,parser);
  if (!hasFirstArg) {
    if (!closingBrace.equals(builder.getTokenType())) {
      builder.error(GroovyBundle.message("expression.expected"));
    }
    if (mRCURLY.equals(builder.getTokenType()))     return;
    if (!mCOMMA.equals(builder.getTokenType()) && !closingBrace.equals(builder.getTokenType())) {
      builder.advanceLexer();
    }
  }
  ParserUtils.getToken(builder,mNLS);
  boolean hasErrors=false;
  while (!builder.eof() && !closingBrace.equals(builder.getTokenType())) {
    if (!ParserUtils.getToken(builder,mCOMMA) && hasFirstArg) {
      builder.error("',' or '" + closingBrace + "' expected");
      hasErrors=true;
    }
    ParserUtils.getToken(builder,mNLS);
    if (hasErrors && CONTROL_KEYWORDS.contains(builder.getTokenType())) {
      return;
    }
    if (!argumentParse(builder,parser)) {
      if (!closingBrace.equals(builder.getTokenType())) {
        builder.error(GroovyBundle.message("expression.expected"));
        hasErrors=true;
      }
      if (mRCURLY.equals(builder.getTokenType()))       return;
      if (!mCOMMA.equals(builder.getTokenType()) && !closingBrace.equals(builder.getTokenType())) {
        builder.advanceLexer();
      }
    }
    ParserUtils.getToken(builder,mNLS);
  }
  ParserUtils.getToken(builder,mNLS);
}
