{
  PsiBuilder.Marker argMarker=builder.mark();
  builder.getTokenText();
  boolean labeled=argumentLabelStartCheck(builder);
  boolean expansed=ParserUtils.getToken(builder,mSTAR);
  if (labeled) {
    ParserUtils.getToken(builder,mCOLON,GroovyBundle.message("colon.expected"));
  }
  GroovyElementType result=StrictContextExpression.parse(builder);
  if (labeled && result.equals(WRONGWAY)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  while (!builder.eof() && labeled && result.equals(WRONGWAY)&& !mCOMMA.equals(builder.getTokenType())&& !closingBrace.equals(builder.getTokenType())) {
    builder.error(GroovyBundle.message("expression.expected"));
    builder.advanceLexer();
    result=StrictContextExpression.parse(builder);
  }
  if (labeled || expansed) {
    argMarker.done(ARGUMENT);
  }
 else {
    argMarker.drop();
  }
  if (labeled || !result.equals(WRONGWAY)) {
    return ARGUMENT;
  }
 else {
    return WRONGWAY;
  }
}
