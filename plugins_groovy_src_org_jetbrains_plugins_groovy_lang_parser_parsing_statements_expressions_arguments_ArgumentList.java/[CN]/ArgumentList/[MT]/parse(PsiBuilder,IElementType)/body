{
  PsiBuilder.Marker marker=builder.mark();
  if (ParserUtils.getToken(builder,mCOMMA)) {
    marker.done(ARGUMENTS);
    return ARGUMENTS;
  }
  GroovyElementType result=argumentParse(builder,closingBrace);
  if (result.equals(WRONGWAY)) {
    if (!closingBrace.equals(builder.getTokenType())) {
      builder.error(GroovyBundle.message("expression.expected"));
    }
    if (!mCOMMA.equals(builder.getTokenType()) && !closingBrace.equals(builder.getTokenType())) {
      builder.advanceLexer();
    }
  }
  ParserUtils.getToken(builder,mNLS);
  while (!builder.eof() && !closingBrace.equals(builder.getTokenType())) {
    ParserUtils.getToken(builder,mCOMMA,GroovyBundle.message("comma.expected"));
    ParserUtils.getToken(builder,mNLS);
    if (argumentParse(builder,closingBrace).equals(WRONGWAY)) {
      if (!closingBrace.equals(builder.getTokenType())) {
        builder.error(GroovyBundle.message("expression.expected"));
      }
      if (!mCOMMA.equals(builder.getTokenType()) && !closingBrace.equals(builder.getTokenType())) {
        builder.advanceLexer();
      }
    }
    ParserUtils.getToken(builder,mNLS);
  }
  marker.done(ARGUMENTS);
  ParserUtils.getToken(builder,mNLS);
  return ARGUMENTS;
}
