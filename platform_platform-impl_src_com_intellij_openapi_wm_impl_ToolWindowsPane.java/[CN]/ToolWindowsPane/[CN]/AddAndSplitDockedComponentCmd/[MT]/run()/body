{
  try {
    float newWeight;
    final ToolWindowAnchor anchor=myInfo.getAnchor();
    final Disposable splitterDisposable=new Disposable(){
      @Override public void dispose(){
      }
    }
;
    Disposer.register(myDisposable,splitterDisposable);
    final Splitter splitter=new Splitter(anchor.isSplitVertically()){
      @Override public void removeNotify(){
        super.removeNotify();
        Disposer.dispose(splitterDisposable);
      }
    }
;
    if (!anchor.isHorizontal()) {
      UISettings.getInstance().addUISettingsListener(new UISettingsListener(){
        @Override public void uiSettingsChanged(        UISettings source){
          if (anchor == ToolWindowAnchor.LEFT) {
            splitter.setOrientation(!source.LEFT_HORIZONTAL_SPLIT);
          }
          if (anchor == ToolWindowAnchor.RIGHT) {
            splitter.setOrientation(!source.RIGHT_HORIZONTAL_SPLIT);
          }
        }
      }
,splitterDisposable);
      splitter.setAllowSwitchOrientationByMouseClick(true);
      splitter.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent evt){
          if (anchor == ToolWindowAnchor.LEFT) {
            UISettings.getInstance().LEFT_HORIZONTAL_SPLIT=!splitter.isVertical();
          }
          if (anchor == ToolWindowAnchor.RIGHT) {
            UISettings.getInstance().RIGHT_HORIZONTAL_SPLIT=!splitter.isVertical();
          }
          UISettings.getInstance().fireUISettingsChanged();
        }
      }
);
    }
    InternalDecorator oldComponent=(InternalDecorator)getComponentAt(anchor);
    if (myInfo.isSplit()) {
      splitter.setFirstComponent(oldComponent);
      splitter.setSecondComponent(myNewComponent);
      float proportion=getPreferredSplitProportion(oldComponent.getWindowInfo().getId(),normalizeWeigh(oldComponent.getWindowInfo().getSideWeight() / (oldComponent.getWindowInfo().getSideWeight() + myInfo.getSideWeight())));
      splitter.setProportion(proportion);
      if (!anchor.isHorizontal() && !anchor.isSplitVertically()) {
        newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight() + myInfo.getWeight());
      }
 else {
        newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight());
      }
    }
 else {
      splitter.setFirstComponent(myNewComponent);
      splitter.setSecondComponent(oldComponent);
      splitter.setProportion(normalizeWeigh(myInfo.getSideWeight()));
      if (!anchor.isHorizontal() && !anchor.isSplitVertically()) {
        newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight() + myInfo.getWeight());
      }
 else {
        newWeight=normalizeWeigh(myInfo.getWeight());
      }
    }
    setComponent(splitter,anchor,newWeight);
    if (!myDirtyMode) {
      myLayeredPane.validate();
      myLayeredPane.repaint();
    }
  }
  finally {
    finish();
  }
}
