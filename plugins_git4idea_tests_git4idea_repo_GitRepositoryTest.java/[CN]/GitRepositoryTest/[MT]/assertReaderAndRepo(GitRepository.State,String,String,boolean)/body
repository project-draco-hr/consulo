{
  assertReader(state,curRev,branch);
  if (waitForEvent) {
    final AtomicBoolean repoChanged=new AtomicBoolean();
    final Object LOCK=new Object();
    myProject.getMessageBus().connect().subscribe(GitRepository.GIT_REPO_CHANGE,new GitRepositoryChangeListener(){
      @Override public void repositoryChanged(      @NotNull GitRepository repository){
        repoChanged.set(true);
synchronized (LOCK) {
          LOCK.notifyAll();
        }
      }
    }
);
    myRepo.refresh();
synchronized (LOCK) {
      try {
        LOCK.wait(2000);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    if (!repoChanged.get()) {
      fail("Repository change event wasn't received.");
    }
  }
  assertRepo(state,curRev,branch);
}
