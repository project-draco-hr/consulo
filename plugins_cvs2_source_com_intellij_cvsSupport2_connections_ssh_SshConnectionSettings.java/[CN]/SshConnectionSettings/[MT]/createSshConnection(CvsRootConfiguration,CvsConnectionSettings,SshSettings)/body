{
  int timeout=CvsApplicationLevelConfiguration.getInstance().TIMEOUT * 1000;
  com.intellij.cvsSupport2.config.ProxySettings proxy_settings=cvsRootConfiguration.PROXY_SETTINGS;
  ConnectionSettingsImpl connectionSettings=new ConnectionSettingsImpl(settings.HOST,getPort(sshConfiguration),proxy_settings.USE_PROXY,proxy_settings.PROXY_HOST,proxy_settings.PROXY_PORT,timeout,proxy_settings.getType(),proxy_settings.getLogin(),proxy_settings.getPassword());
  if (sshConfiguration.USE_PPK) {
    return new SshPublicKeyMaverickConnection(connectionSettings,settings.USER,new File(sshConfiguration.PATH_TO_PPK),SSHPasswordProvider.getInstance().getPPKPasswordForCvsRoot(settings.getCvsRootAsString()),sshConfiguration.SSH_TYPE,new PublicKeyVerification(){
      public boolean allowsPublicKey(      String host,      int keyLength,      String fingerprint,      String algorithmName){
        return true;
      }
    }
,settings.REPOSITORY);
  }
 else {
    return new SshPasswordMaverickConnection(connectionSettings,settings.USER,SSHPasswordProvider.getInstance().getPasswordForCvsRoot(settings.getCvsRootAsString()),sshConfiguration.SSH_TYPE,new PublicKeyVerification(){
      public boolean allowsPublicKey(      String host,      int keyLength,      String fingerprint,      String algorithmName){
        return true;
      }
    }
,settings.REPOSITORY);
  }
}
