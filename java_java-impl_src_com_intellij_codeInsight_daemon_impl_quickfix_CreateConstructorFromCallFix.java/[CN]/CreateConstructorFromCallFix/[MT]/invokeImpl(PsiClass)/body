{
  final Project project=myConstructorCall.getProject();
  PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  try {
    PsiMethod constructor=(PsiMethod)targetClass.add(elementFactory.createConstructor());
    final PsiFile file=targetClass.getContainingFile();
    TemplateBuilderImpl templateBuilder=new TemplateBuilderImpl(constructor);
    CreateFromUsageUtils.setupMethodParameters(constructor,templateBuilder,myConstructorCall.getArgumentList(),getTargetSubstitutor(myConstructorCall));
    final PsiMethod superConstructor=CreateClassFromNewFix.setupSuperCall(targetClass,constructor,templateBuilder);
    constructor=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(constructor);
    Template template=templateBuilder.buildTemplate();
    final Editor editor=positionCursor(project,targetClass.getContainingFile(),targetClass);
    if (editor == null)     return;
    final TextRange textRange=constructor.getTextRange();
    editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
    editor.getCaretModel().moveToOffset(textRange.getStartOffset());
    startTemplate(editor,template,project,new TemplateEditingAdapter(){
      @Override public void templateFinished(      Template template,      boolean brokenOff){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            try {
              PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
              final int offset=editor.getCaretModel().getOffset();
              PsiMethod constructor=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethod.class,false);
              if (superConstructor == null) {
                CreateFromUsageUtils.setupMethodBody(constructor);
              }
 else {
                OverrideImplementUtil.setupMethodBody(constructor,superConstructor,targetClass);
              }
              CreateFromUsageUtils.setupEditor(constructor,editor);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
        }
);
      }
    }
);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
