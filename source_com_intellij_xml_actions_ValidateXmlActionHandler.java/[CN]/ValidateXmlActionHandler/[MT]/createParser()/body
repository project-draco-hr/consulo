{
  try {
    if (!needsDtdChecking() && !needsSchemaChecking() && !myForceChecking) {
      return null;
    }
    SAXParserFactory factory=new SAXParserFactoryImpl();
    boolean schemaChecking=false;
    if (hasDtdDeclaration()) {
      factory.setValidating(true);
    }
    if (needsSchemaChecking()) {
      factory.setValidating(true);
      factory.setNamespaceAware(true);
      schemaChecking=true;
    }
    SAXParser parser=factory.newSAXParser();
    parser.setProperty(ENTITY_RESOLVER_PROPERTY_NAME,myXmlResourceResolver);
    final XMLGrammarPoolImpl previousGrammarPool=myFile.getUserData(GRAMMAR_POOL_KEY);
    XMLGrammarPoolImpl grammarPool=null;
    if (!myForceChecking && !isValidationDependentFilesOutOfDate(myFile)) {
      grammarPool=previousGrammarPool;
    }
    if (grammarPool == null) {
      grammarPool=new XMLGrammarPoolImpl();
      myFile.putUserData(GRAMMAR_POOL_KEY,grammarPool);
    }
    parser.getXMLReader().setProperty(GRAMMAR_FEATURE_ID,grammarPool);
    if (schemaChecking) {
      parser.setProperty(JAXPConstants.JAXP_SCHEMA_LANGUAGE,JAXPConstants.W3C_XML_SCHEMA);
      parser.getXMLReader().setFeature(SCHEMA_FULL_CHECKING_FEATURE_ID,true);
    }
    return parser;
  }
 catch (  Exception e) {
    filterAppException(e);
  }
  return null;
}
