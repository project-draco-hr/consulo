{
  try {
    if (!needsDtdChecking() && !needsSchemaChecking() && !forceChecking) {
      return null;
    }
    SAXParserFactory factory=new SAXParserFactoryImpl();
    boolean schemaChecking=false;
    if (hasDtdDeclaration()) {
      factory.setValidating(true);
    }
    if (needsSchemaChecking()) {
      factory.setValidating(true);
      factory.setNamespaceAware(true);
      schemaChecking=true;
    }
    SAXParser parser=factory.newSAXParser();
    parser.setProperty("http://apache.org/xml/properties/internal/entity-resolver",myXmlResourceResolver);
    final XMLGrammarPoolImpl previousGrammarPool=myFile.getUserData(GRAMMAR_POOL_KEY);
    XMLGrammarPoolImpl grammarPool=null;
    final VirtualFile[] files=myFile.getUserData(DEPENDENT_FILES_KEY);
    final Long grammarPoolTimeStamp=myFile.getUserData(GRAMMAR_POOL_TIME_STAMP_KEY);
    if (grammarPoolTimeStamp != null && files != null && !forceChecking) {
      long dependentFilesTimestamp=calculateTimeStamp(files);
      if (dependentFilesTimestamp == grammarPoolTimeStamp.longValue() && dependentFilesTimestamp != 0) {
        grammarPool=previousGrammarPool;
      }
    }
    if (grammarPool == null) {
      grammarPool=new XMLGrammarPoolImpl();
      myFile.putUserData(GRAMMAR_POOL_KEY,grammarPool);
    }
    parser.getXMLReader().setProperty(GRAMMAR_FEATURE_ID,grammarPool);
    if (schemaChecking) {
      parser.setProperty(JAXPConstants.JAXP_SCHEMA_LANGUAGE,JAXPConstants.W3C_XML_SCHEMA);
      parser.getXMLReader().setFeature(SCHEMA_FULL_CHECKING_FEATURE_ID,true);
    }
    return parser;
  }
 catch (  Exception e) {
    filterAppException(e);
  }
  return null;
}
