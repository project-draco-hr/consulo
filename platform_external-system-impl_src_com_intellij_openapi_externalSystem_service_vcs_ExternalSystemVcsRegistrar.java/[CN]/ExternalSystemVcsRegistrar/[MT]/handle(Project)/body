{
  for (  final ExternalSystemManager<?,?,?,?,?> manager : ExternalSystemApiUtil.getAllManagers()) {
    final AbstractExternalSystemSettings settings=manager.getSettingsProvider().fun(project);
    settings.subscribe(new ExternalSystemSettingsListenerAdapter(){
      @Override public void onProjectsLinked(      @NotNull final Collection linked){
        List<VcsDirectoryMapping> newMappings=ContainerUtilRt.newArrayList();
        final LocalFileSystem fileSystem=LocalFileSystem.getInstance();
        ProjectLevelVcsManager vcsManager=ProjectLevelVcsManager.getInstance(project);
        for (        Object o : linked) {
          final ExternalProjectSettings settings=(ExternalProjectSettings)o;
          VirtualFile dir=fileSystem.refreshAndFindFileByPath(settings.getExternalProjectPath());
          if (dir == null) {
            continue;
          }
          if (!dir.isDirectory()) {
            dir=dir.getParent();
          }
          newMappings.addAll(VcsUtil.findRoots(dir,project));
        }
        List<VcsDirectoryMapping> oldMappings=vcsManager.getDirectoryMappings();
        if (oldMappings.size() == 1 && newMappings.size() == 1 && StringUtil.isEmpty(oldMappings.get(0).getVcs())) {
          VcsDirectoryMapping newMapping=newMappings.iterator().next();
          String detectedDirPath=newMapping.getDirectory();
          VirtualFile detectedDir=fileSystem.findFileByPath(detectedDirPath);
          if (detectedDir != null && detectedDir.equals(project.getBaseDir())) {
            newMappings.clear();
            newMappings.add(new VcsDirectoryMapping("",newMapping.getVcs()));
            vcsManager.setDirectoryMappings(newMappings);
            return;
          }
        }
        newMappings.addAll(oldMappings);
        vcsManager.setDirectoryMappings(newMappings);
      }
    }
);
  }
}
