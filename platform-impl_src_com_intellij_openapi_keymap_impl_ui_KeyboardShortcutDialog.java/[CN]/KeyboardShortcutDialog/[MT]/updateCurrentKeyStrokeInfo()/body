{
  if (myConflictInfoArea == null || myKeystrokePreview == null) {
    return;
  }
  myConflictInfoArea.setText(null);
  myKeystrokePreview.setText(" ");
  if (myKeymap == null) {
    return;
  }
  KeyboardShortcut keyboardShortcut=getKeyboardShortcut();
  if (keyboardShortcut == null) {
    return;
  }
  String strokeText=getTextByKeyStroke(keyboardShortcut.getFirstKeyStroke());
  String suffixText=getTextByKeyStroke(keyboardShortcut.getSecondKeyStroke());
  if (suffixText != null && suffixText.length() > 0) {
    strokeText+=',' + suffixText;
  }
  myKeystrokePreview.setText(strokeText);
  StringBuffer buffer=new StringBuffer();
  Map<String,ArrayList<KeyboardShortcut>> conflicts=myKeymap.getConflicts(myActionId,keyboardShortcut);
  Set<String> keys=conflicts.keySet();
  String[] actionIds=keys.toArray(new String[keys.size()]);
  for (  String actionId : actionIds) {
    String actionPath=myMainGroup.getActionQualifiedPath(actionId);
    if (actionPath == null) {
      continue;
    }
    if (buffer.length() > 1) {
      buffer.append('\n');
    }
    buffer.append('[');
    buffer.append(actionPath);
    buffer.append(']');
  }
  if (buffer.length() == 0) {
    myConflictInfoArea.setForeground(UIUtil.getTextAreaForeground());
    myConflictInfoArea.setText(KeyMapBundle.message("no.conflict.info.message"));
  }
 else {
    myConflictInfoArea.setForeground(Color.red);
    myConflictInfoArea.setText(KeyMapBundle.message("assigned.to.info.message",buffer.toString()));
  }
}
