{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=zzLexicalState;
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 21:
{
        yybegin(DOCTYPE_MARKUP);
        return XmlTokenType.XML_MARKUP_START;
      }
case 71:
    break;
case 1:
{
    return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
  }
case 72:
break;
case 59:
{
return XmlTokenType.XML_DOCTYPE_SYSTEM;
}
case 73:
break;
case 36:
{
return XmlTokenType.XML_COMMA;
}
case 74:
break;
case 11:
{
return XmlTokenType.XML_EQ;
}
case 75:
break;
case 65:
{
yybegin(CDATA);
return XmlTokenType.XML_CDATA_START;
}
case 76:
break;
case 16:
{
yybegin(ATTRIBUTE_VALUE_START);
return XmlTokenType.XML_EQ;
}
case 77:
break;
case 60:
{
return XmlTokenType.XML_CONDITIONAL_IGNORE;
}
case 78:
break;
case 28:
{
return XmlTokenType.XML_SEMI;
}
case 79:
break;
case 54:
{
yybegin(DECL);
return XmlTokenType.XML_DECL_START;
}
case 80:
break;
case 9:
{
yybegin(DECL_ATTR_VALUE_DQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 81:
break;
case 68:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_ELEMENT_DECL_START;
}
case 82:
break;
case 14:
{
return XmlTokenType.XML_NAME;
}
case 83:
break;
case 19:
{
yybegin(TAG_ATTRIBUTES);
return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
}
case 84:
break;
case 10:
{
yybegin(DECL_ATTR_VALUE_SQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 85:
break;
case 58:
{
return XmlTokenType.XML_DOCTYPE_PUBLIC;
}
case 86:
break;
case 51:
{
yybegin(COMMENT);
return XmlTokenType.XML_COMMENT_START;
}
case 87:
break;
case 7:
{
yybegin(DECL_ATTR);
return XmlTokenType.XML_NAME;
}
case 88:
break;
case 37:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
}
case 89:
break;
case 64:
{
return XmlTokenType.XML_ATT_IMPLIED;
}
case 90:
break;
case 67:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_ATTLIST_DECL_START;
}
case 91:
break;
case 3:
{
return XmlTokenType.XML_DATA_CHARACTERS;
}
case 92:
break;
case 6:
{
return XmlTokenType.XML_BAD_CHARACTER;
}
case 93:
break;
case 15:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_TAG_END;
}
case 94:
break;
case 13:
{
yybegin(TAG_ATTRIBUTES);
return XmlTokenType.XML_TAG_NAME;
}
case 95:
break;
case 48:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_COMMENT_END;
}
case 96:
break;
case 31:
{
return XmlTokenType.XML_LEFT_PAREN;
}
case 97:
break;
case 61:
{
return XmlTokenType.XML_PCDATA;
}
case 98:
break;
case 38:
{
yybegin(TAG_NAME);
return XmlTokenType.XML_END_TAG_START;
}
case 99:
break;
case 57:
{
return XmlTokenType.XML_ATT_FIXED;
}
case 100:
break;
case 44:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_COMMENT_END;
}
case 101:
break;
case 25:
{
yybegin(DOCTYPE);
return XmlTokenType.XML_MARKUP_END;
}
case 102:
break;
case 43:
{
yybegin(DOCTYPE_COMMENT);
return XmlTokenType.XML_COMMENT_START;
}
case 103:
break;
case 20:
{
return XmlTokenType.XML_PI_TARGET;
}
case 104:
break;
case 62:
{
return XmlTokenType.XML_CONDITIONAL_INCLUDE;
}
case 105:
break;
case 41:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_EMPTY_ELEMENT_END;
}
case 106:
break;
case 32:
{
return XmlTokenType.XML_RIGHT_PAREN;
}
case 107:
break;
case 8:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_BAD_CHARACTER;
}
case 108:
break;
case 39:
{
yybegin(PROCESSING_INSTRUCTION);
return XmlTokenType.XML_PI_START;
}
case 109:
break;
case 63:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_ENTITY_DECL_START;
}
case 110:
break;
case 24:
{
yybegin(DOCTYPE_MARKUP_SQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 111:
break;
case 53:
{
return XmlTokenType.XML_CONTENT_EMPTY;
}
case 112:
break;
case 33:
{
return XmlTokenType.XML_PLUS;
}
case 113:
break;
case 23:
{
yybegin(DOCTYPE_MARKUP_DQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 114:
break;
case 49:
{
return XmlTokenType.XML_CONTENT_ANY;
}
case 115:
break;
case 22:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_DOCTYPE_END;
}
case 116:
break;
case 52:
{
return XmlTokenType.XML_CHAR_ENTITY_REF;
}
case 117:
break;
case 69:
{
return XmlTokenType.XML_ATT_REQUIRED;
}
case 118:
break;
case 30:
{
return XmlTokenType.XML_QUESTION;
}
case 119:
break;
case 56:
{
yybegin(DOCTYPE_EXTERNAL_ID);
return XmlTokenType.XML_DOCTYPE_SYSTEM;
}
case 120:
break;
case 34:
{
return XmlTokenType.XML_STAR;
}
case 121:
break;
case 40:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_DECL_END;
}
case 122:
break;
case 4:
{
return XmlTokenType.XML_WHITE_SPACE;
}
case 123:
break;
case 47:
{
return XmlTokenType.XML_ENTITY_REF_TOKEN;
}
case 124:
break;
case 29:
{
return XmlTokenType.XML_PERCENT;
}
case 125:
break;
case 5:
{
yybegin(TAG_NAME);
return XmlTokenType.XML_START_TAG_START;
}
case 126:
break;
case 46:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_CONDITIONAL_SECTION_END;
}
case 127:
break;
case 50:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_CDATA_END;
}
case 128:
break;
case 55:
{
yybegin(DOCTYPE_EXTERNAL_ID);
return XmlTokenType.XML_DOCTYPE_PUBLIC;
}
case 129:
break;
case 12:
{
yybegin(DECL);
return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
}
case 130:
break;
case 27:
{
return XmlTokenType.XML_AMP;
}
case 131:
break;
case 42:
{
yybegin(YYINITIAL);
return XmlTokenType.XML_PI_END;
}
case 132:
break;
case 17:
{
yybegin(ATTRIBUTE_VALUE_DQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 133:
break;
case 66:
{
yybegin(DOCTYPE);
return XmlTokenType.XML_DOCTYPE_START;
}
case 134:
break;
case 18:
{
yybegin(ATTRIBUTE_VALUE_SQ);
return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
}
case 135:
break;
case 70:
{
yybegin(DOCTYPE_MARKUP);
return XmlTokenType.XML_NOTATION_DECL_START;
}
case 136:
break;
case 26:
{
return XmlTokenType.XML_TAG_END;
}
case 137:
break;
case 35:
{
return XmlTokenType.XML_BAR;
}
case 138:
break;
case 2:
{
return XmlTokenType.XML_COMMENT_CHARACTERS;
}
case 139:
break;
case 45:
{
yybegin(CONDITIONAL);
return XmlTokenType.XML_CONDITIONAL_SECTION_START;
}
case 140:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
