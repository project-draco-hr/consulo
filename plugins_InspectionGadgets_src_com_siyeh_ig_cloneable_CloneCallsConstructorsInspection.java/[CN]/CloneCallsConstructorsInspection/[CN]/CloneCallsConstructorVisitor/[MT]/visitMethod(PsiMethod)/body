{
  final String methodName=method.getName();
  final PsiParameterList parameterList=method.getParameterList();
  final boolean isClone=HardcodedMethodConstants.CLONE.equals(methodName) && parameterList.getParameters().length == 0;
  if (isClone) {
    method.accept(new PsiRecursiveElementVisitor(){
      public void visitNewExpression(      @NotNull PsiNewExpression newExpression){
        super.visitNewExpression(newExpression);
        final PsiExpression[] arrayDimensions=newExpression.getArrayDimensions();
        if (arrayDimensions.length != 0) {
          return;
        }
        if (newExpression.getArrayInitializer() != null) {
          return;
        }
        if (newExpression.getAnonymousClass() != null) {
          return;
        }
        if (isPartOfThrowStatement(newExpression)) {
          return;
        }
        final PsiJavaCodeReferenceElement classReference=newExpression.getClassReference();
        registerError(classReference);
      }
    }
);
  }
}
