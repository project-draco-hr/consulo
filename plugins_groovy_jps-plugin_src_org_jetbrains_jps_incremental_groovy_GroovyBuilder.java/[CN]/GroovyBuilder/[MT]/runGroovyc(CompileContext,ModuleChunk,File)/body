{
  ArrayList<String> classpath=new ArrayList<String>(generateClasspath(context,chunk));
  if (LOG.isDebugEnabled()) {
    LOG.debug("Groovyc classpath: " + classpath);
  }
  final List<String> cmd=ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(chunk),"org.jetbrains.groovy.compiler.rt.GroovycRunner",Collections.<String>emptyList(),classpath,Arrays.asList("-Xmx384m","-Dfile.encoding=" + System.getProperty("file.encoding")),Arrays.<String>asList(myForStubs ? "stubs" : "groovyc",tempFile.getPath()));
  final Process process=Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd));
  final Consumer<String> updater=new Consumer<String>(){
    public void consume(    String s){
      context.processMessage(new ProgressMessage(s));
    }
  }
;
  final GroovycOSProcessHandler handler=new GroovycOSProcessHandler(process,updater){
    @Override protected Future<?> executeOnPooledThread(    Runnable task){
      return SharedThreadPool.getInstance().executeOnPooledThread(task);
    }
  }
;
  handler.startNotify();
  handler.waitFor();
  return handler;
}
