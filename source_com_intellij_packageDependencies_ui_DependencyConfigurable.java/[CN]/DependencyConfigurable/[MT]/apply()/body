{
  stopTableEditing();
  DependencyValidationManager validationManager=DependencyValidationManager.getInstance(myProject);
  validationManager.removeAllRules();
  final HashMap<String,PackageSet> unUsed=new HashMap<String,PackageSet>(validationManager.getUnnamedScopes());
  List<DependencyRule> modelItems=new ArrayList<DependencyRule>();
  modelItems.addAll(myDenyRulesModel.getItems());
  modelItems.addAll(myAllowRulesModel.getItems());
  for (  DependencyRule rule : modelItems) {
    validationManager.addRule(rule);
    final PackageSet fromPackageSet=rule.getFromScope().getValue();
    LOG.assertTrue(fromPackageSet != null);
    unUsed.remove(fromPackageSet.getText());
    final PackageSet toPackageSet=rule.getToScope().getValue();
    LOG.assertTrue(toPackageSet != null);
    unUsed.remove(toPackageSet.getText());
  }
  for (  String text : unUsed.keySet()) {
    validationManager.getUnnamedScopes().remove(text);
  }
  validationManager.setSkipImportStatements(mySkipImports.isSelected());
  DaemonCodeAnalyzer.getInstance(myProject).restart();
}
