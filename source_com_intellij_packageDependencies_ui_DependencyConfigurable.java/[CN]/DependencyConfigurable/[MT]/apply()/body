{
  stopTableEditing();
  DependencyValidationManager validationManager=DependencyValidationManager.getInstance(myProject);
  validationManager.removeAllRules();
  final HashMap<String,PackageSet> unUsed=new HashMap<String,PackageSet>(validationManager.getUnnamedScopes());
  List<DependencyRule> modelItems=new ArrayList<DependencyRule>();
  modelItems.addAll(myDenyRulesModel.getItems());
  modelItems.addAll(myAllowRulesModel.getItems());
  for (  DependencyRule rule : modelItems) {
    validationManager.addRule(rule);
    final NamedScope fromScope=rule.getFromScope();
    if (fromScope instanceof NamedScope.UnnamedScope) {
      final PackageSet fromPackageSet=fromScope.getValue();
      LOG.assertTrue(fromPackageSet != null);
      unUsed.remove(fromPackageSet.getText());
    }
    final NamedScope toScope=rule.getToScope();
    if (toScope instanceof NamedScope.UnnamedScope) {
      final PackageSet toPackageSet=toScope.getValue();
      LOG.assertTrue(toPackageSet != null);
      unUsed.remove(toPackageSet.getText());
    }
  }
  for (  String text : unUsed.keySet()) {
    validationManager.getUnnamedScopes().remove(text);
  }
  validationManager.setSkipImportStatements(mySkipImports.isSelected());
  DaemonCodeAnalyzer.getInstance(myProject).restart();
}
