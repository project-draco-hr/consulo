{
  final int insertCol=getColumn();
  final int insertRow=getRow();
  final GridInsertMode insertMode=getMode();
  Rectangle cellRect=getGridFeedbackRect(dragObject.getComponentCount());
  FeedbackPainter painter=(insertMode == GridInsertMode.ColumnBefore || insertMode == GridInsertMode.ColumnAfter) ? myVertInsertFeedbackPainter : myHorzInsertFeedbackPainter;
  Rectangle rc;
  Rectangle rcFeedback=null;
  if (dragObject.getComponentCount() == 1 && insertMode != GridInsertMode.InCell) {
    RadComponent component=getContainer().getComponentAtGrid(insertRow,insertCol);
    if (component != null) {
      Rectangle bounds=component.getBounds();
      final GridLayoutManager layoutManager=(GridLayoutManager)getContainer().getLayout();
      int[] vGridLines=layoutManager.getVerticalGridLines();
      int[] hGridLines=layoutManager.getHorizontalGridLines();
      int cellWidth=vGridLines[insertCol + 1] - vGridLines[insertCol];
      int cellHeight=hGridLines[insertRow + 1] - hGridLines[insertRow];
      bounds.translate(-vGridLines[insertCol],-hGridLines[insertRow]);
      int spaceToRight=vGridLines[insertCol + 1] - vGridLines[insertCol] - (bounds.x + bounds.width);
      int spaceBelow=hGridLines[insertRow + 1] - hGridLines[insertRow] - (bounds.y + bounds.height);
      if (insertMode == GridInsertMode.RowBefore && bounds.y > INSERT_RECT_MIN_SIZE) {
        rcFeedback=new Rectangle(0,0,cellWidth,bounds.y);
      }
 else       if (insertMode == GridInsertMode.RowAfter && spaceBelow > INSERT_RECT_MIN_SIZE) {
        rcFeedback=new Rectangle(0,bounds.y + bounds.height,cellWidth,spaceBelow);
      }
 else       if (insertMode == GridInsertMode.ColumnBefore && bounds.x > INSERT_RECT_MIN_SIZE) {
        rcFeedback=new Rectangle(0,0,bounds.x,cellHeight);
      }
 else       if (insertMode == GridInsertMode.ColumnAfter && spaceToRight > INSERT_RECT_MIN_SIZE) {
        rcFeedback=new Rectangle(bounds.x + bounds.width,0,spaceToRight,cellHeight);
      }
      if (rcFeedback != null) {
        rcFeedback.translate(vGridLines[insertCol],hGridLines[insertRow]);
        editor.getActiveDecorationLayer().putFeedback(getContainer().getDelegee(),rcFeedback);
        return;
      }
    }
  }
  int w=4;
switch (insertMode) {
case ColumnBefore:
    rc=new Rectangle(cellRect.x - w,cellRect.y - INSERT_ARROW_SIZE,2 * w,cellRect.height + 2 * INSERT_ARROW_SIZE);
  break;
case ColumnAfter:
rc=new Rectangle((int)cellRect.getMaxX() - w,(int)cellRect.getMinY() - INSERT_ARROW_SIZE,2 * w,(int)cellRect.getHeight() + 2 * INSERT_ARROW_SIZE);
break;
case RowBefore:
rc=new Rectangle((int)cellRect.getMinX() - INSERT_ARROW_SIZE,(int)cellRect.getMinY() - w,(int)cellRect.getWidth() + 2 * INSERT_ARROW_SIZE,2 * w);
break;
case RowAfter:
rc=new Rectangle((int)cellRect.getMinX() - INSERT_ARROW_SIZE,(int)cellRect.getMaxY() - w,(int)cellRect.getWidth() + 2 * INSERT_ARROW_SIZE,2 * w);
break;
default :
rc=cellRect;
painter=null;
}
editor.getActiveDecorationLayer().putFeedback(getContainer().getDelegee(),rc,painter);
}
