{
  if (e.getEventType() != HyperlinkEvent.EventType.ACTIVATED) {
    return;
  }
  JEditorPane pane=(JEditorPane)e.getSource();
  if (e instanceof HTMLFrameHyperlinkEvent) {
    HTMLFrameHyperlinkEvent evt=(HTMLFrameHyperlinkEvent)e;
    HTMLDocument doc=(HTMLDocument)pane.getDocument();
    doc.processHTMLFrameHyperlinkEvent(evt);
    return;
  }
  try {
    URL url=e.getURL();
    @NonNls String ref=url.getRef();
    if (ref.startsWith("pos:")) {
      int delimeterPos=ref.indexOf(':',"pos:".length() + 1);
      String startPosition=ref.substring("pos:".length(),delimeterPos);
      String endPosition=ref.substring(delimeterPos + 1);
      Integer textStartOffset=new Integer(startPosition);
      Integer textEndOffset=new Integer(endPosition);
      String fileURL=url.toExternalForm();
      fileURL=fileURL.substring(0,fileURL.indexOf('#'));
      VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(fileURL);
      if (vFile != null) {
        fireClickEvent(vFile,textStartOffset.intValue(),textEndOffset.intValue());
      }
    }
 else     if (ref.startsWith("descr:")) {
      if (myCurrentDescriptor instanceof ProblemDescriptor) {
        PsiElement psiElement=((ProblemDescriptor)myCurrentDescriptor).getPsiElement();
        if (psiElement == null)         return;
        VirtualFile vFile=psiElement.getContainingFile().getVirtualFile();
        if (vFile != null) {
          TextRange range=((ProblemDescriptorBase)myCurrentDescriptor).getTextRange();
          fireClickEvent(vFile,range.getStartOffset(),range.getEndOffset());
        }
      }
    }
 else     if (ref.startsWith("invoke:")) {
      int actionNumber=Integer.parseInt(ref.substring("invoke:".length()));
      InspectionToolWrapper toolWrapper=getToolWrapper();
      InspectionToolPresentation presentation=myView.getGlobalInspectionContext().getPresentation(toolWrapper);
      QuickFixAction fixAction=presentation.getQuickFixes(new RefElement[]{(RefElement)myCurrentEntity})[actionNumber];
      fixAction.doApplyFix(new RefElement[]{(RefElement)myCurrentEntity},myView);
    }
 else     if (ref.startsWith("invokelocal:")) {
      int actionNumber=Integer.parseInt(ref.substring("invokelocal:".length()));
      if (actionNumber > -1) {
        invokeLocalFix(actionNumber);
      }
    }
 else     if (ref.startsWith("suppress:")) {
      final SuppressActionWrapper.SuppressTreeAction[] suppressTreeActions=new SuppressActionWrapper(myView.getProject(),getToolWrapper(),myView.getTree().getSelectionPaths()).getChildren(null);
      final List<AnAction> activeActions=new ArrayList<AnAction>();
      for (      SuppressActionWrapper.SuppressTreeAction suppressTreeAction : suppressTreeActions) {
        if (suppressTreeAction.isAvailable())         activeActions.add(suppressTreeAction);
      }
      if (!activeActions.isEmpty()) {
        int actionNumber=Integer.parseInt(ref.substring("suppress:".length()));
        if (actionNumber > -1 && activeActions.size() > actionNumber) {
          activeActions.get(actionNumber).actionPerformed(null);
        }
      }
    }
 else {
      int offset=Integer.parseInt(ref);
      String fileURL=url.toExternalForm();
      fileURL=fileURL.substring(0,fileURL.indexOf('#'));
      VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(fileURL);
      if (vFile == null) {
        vFile=VfsUtil.findFileByURL(url);
      }
      if (vFile != null) {
        fireClickEvent(vFile,offset,offset);
      }
    }
  }
 catch (  Throwable t) {
  }
}
