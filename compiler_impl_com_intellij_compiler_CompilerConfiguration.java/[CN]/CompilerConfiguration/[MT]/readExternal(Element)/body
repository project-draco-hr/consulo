{
  DefaultJDOMExternalizer.readExternal(this,parentNode);
  Element node=parentNode.getChild(EXCLUDE_FROM_COMPILE);
  if (node != null) {
    for (    final Object o : node.getChildren()) {
      Element element=(Element)o;
      String url=element.getAttributeValue(URL);
      if (url == null)       continue;
      if (FILE.equals(element.getName())) {
        ExcludeEntryDescription excludeEntryDescription=new ExcludeEntryDescription(url,false,true);
        myExcludeEntryDescriptions.add(excludeEntryDescription);
      }
      if (DIRECTORY.equals(element.getName())) {
        boolean includeSubdirectories=Boolean.parseBoolean(element.getAttributeValue(INCLUDE_SUBDIRECTORIES));
        ExcludeEntryDescription excludeEntryDescription=new ExcludeEntryDescription(url,includeSubdirectories,false);
        myExcludeEntryDescriptions.add(excludeEntryDescription);
      }
    }
  }
  try {
    removeRegexpPatterns();
    node=parentNode.getChild(RESOURCE_EXTENSIONS);
    if (node != null) {
      for (      final Object o : node.getChildren(ENTRY)) {
        Element element=(Element)o;
        String pattern=element.getAttributeValue(NAME);
        if (pattern != null && !"".equals(pattern)) {
          addRegexpPattern(pattern);
        }
      }
    }
    removeWildcardPatterns();
    node=parentNode.getChild(WILDCARD_RESOURCE_PATTERNS);
    if (node != null) {
      myWildcardPatternsInitialized=true;
      for (      final Object o : node.getChildren(ENTRY)) {
        final Element element=(Element)o;
        String pattern=element.getAttributeValue(NAME);
        if (pattern != null && !"".equals(pattern)) {
          addWildcardResourcePattern(pattern);
        }
      }
    }
  }
 catch (  MalformedPatternException e) {
    throw new InvalidDataException(e);
  }
}
