{
  DefaultJDOMExternalizer.readExternal(this,parentNode);
  Element node=parentNode.getChild(EXCLUDE_FROM_COMPILE);
  if (node != null) {
    for (Iterator i=node.getChildren().iterator(); i.hasNext(); ) {
      Element element=(Element)i.next();
      String url=element.getAttributeValue(URL);
      if (url == null)       continue;
      if (FILE.equals(element.getName())) {
        ExcludeEntryDescription excludeEntryDescription=new ExcludeEntryDescription(url,false,true);
        myExcludeEntryDescriptions.add(excludeEntryDescription);
      }
      if (DIRECTORY.equals(element.getName())) {
        boolean includeSubdirectories=true;
        if ("false".equals(element.getAttributeValue(INCLUDE_SUBDIRECTORIES))) {
          includeSubdirectories=false;
        }
        ExcludeEntryDescription excludeEntryDescription=new ExcludeEntryDescription(url,includeSubdirectories,false);
        myExcludeEntryDescriptions.add(excludeEntryDescription);
      }
    }
  }
  removeRegexpPatterns();
  node=parentNode.getChild(RESOURCE_EXTENSIONS);
  if (node != null) {
    for (Iterator iterator=node.getChildren(ENTRY).iterator(); iterator.hasNext(); ) {
      Element element=(Element)iterator.next();
      String pattern=element.getAttributeValue(NAME);
      if (pattern != null && !"".equals(pattern)) {
        addRegexpPattern(pattern);
      }
    }
  }
  removeWildcardPatterns();
  node=parentNode.getChild(WILDCARD_RESOURCE_PATTERNS);
  if (node != null) {
    myWildcardPatternsInitialized=true;
    for (Iterator iterator=node.getChildren(ENTRY).iterator(); iterator.hasNext(); ) {
      final Element element=(Element)iterator.next();
      String pattern=element.getAttributeValue(NAME);
      if (pattern != null && !"".equals(pattern)) {
        addWildcardResourcePattern(pattern);
      }
    }
  }
}
