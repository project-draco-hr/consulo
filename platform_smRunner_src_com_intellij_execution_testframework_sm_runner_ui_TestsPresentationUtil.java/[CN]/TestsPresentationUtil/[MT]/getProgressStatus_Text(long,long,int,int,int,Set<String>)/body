{
  final StringBuilder sb=new StringBuilder();
  if (endTime == 0) {
    sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.running"));
  }
 else {
    sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.done"));
  }
  if (allCategories != null) {
    if (allCategories.size() > 1 || (allCategories.size() == 1 && !DEFAULT_TESTS_CATEGORY.equals(allCategories.iterator().next()))) {
      sb.append(' ');
      boolean first=true;
      for (      String category : allCategories) {
        if (StringUtil.isEmpty(category)) {
          continue;
        }
        if (!first) {
          sb.append(", ");
        }
        final char firstChar=category.charAt(0);
        sb.append(first ? firstChar : Character.toLowerCase(firstChar));
        sb.append(category.substring(1));
        first=false;
      }
    }
  }
  sb.append(' ').append(testsCount).append(' ');
  sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.of"));
  sb.append(' ').append(testsTotal != 0 ? testsTotal : UNKNOWN_TESTS_COUNT);
  if (failuresCount > 0) {
    sb.append(DOUBLE_SPACE);
    sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.failed"));
    sb.append(' ').append(failuresCount);
  }
  if (endTime != 0) {
    final long time=endTime - startTime;
    sb.append(DOUBLE_SPACE);
    sb.append('(').append(convertToSecondsOrMs(time)).append(')');
  }
  sb.append(DOUBLE_SPACE);
  return sb.toString();
}
