{
  final GrMethod constructor=PsiTreeUtil.getParentOfType(element,GrMethod.class);
  if (candidates.size() == 0)   return;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    for (    GrField candidate : candidates) {
      addParameter(candidate,constructor,project);
    }
    return;
  }
  final JList list=new JBList(candidates.toArray(new GrField[candidates.size()]));
  list.setCellRenderer(new DefaultPsiElementCellRenderer());
  new PopupChooserBuilder(list).setTitle(GroovyIntentionsBundle.message("create.parameter.for.field.intention.name")).setMovable(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      final Object[] selectedValues=list.getSelectedValues();
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          AccessToken accessToken=WriteAction.start();
          try {
            for (            Object selectedValue : selectedValues) {
              LOG.assertTrue(((GrField)selectedValue).isValid());
              addParameter(((GrField)selectedValue),constructor,project);
            }
          }
  finally {
            accessToken.finish();
          }
        }
      }
,GroovyIntentionsBundle.message("create.parameter.for.field.intention.name"),null);
    }
  }
).createPopup().showInBestPositionFor(editor);
}
