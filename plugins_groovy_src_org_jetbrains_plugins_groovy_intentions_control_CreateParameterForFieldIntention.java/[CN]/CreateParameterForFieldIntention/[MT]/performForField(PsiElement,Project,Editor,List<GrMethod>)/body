{
  final GrField field=PsiTreeUtil.getParentOfType(element,GrField.class);
  if (constructors.size() == 0)   return;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    for (    GrMethod constructor : constructors) {
      addParameter(field,constructor,project);
    }
    return;
  }
  final JList list=new JBList(constructors.toArray(new GrMethod[constructors.size()]));
  list.setCellRenderer(new MethodCellRenderer(true));
  new PopupChooserBuilder(list).setTitle(GroovyIntentionsBundle.message("create.parameter.for.field.intention.name")).setMovable(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      final Object[] selectedValues=list.getSelectedValues();
      Arrays.sort(selectedValues,new Comparator<Object>(){
        @Override public int compare(        Object o1,        Object o2){
          return ((GrMethod)o2).getParameterList().getParametersCount() - ((GrMethod)o1).getParameterList().getParametersCount();
        }
      }
);
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              for (              Object selectedValue : selectedValues) {
                LOG.assertTrue(((GrMethod)selectedValue).isValid());
                addParameter(field,((GrMethod)selectedValue),project);
              }
            }
          }
);
        }
      }
,GroovyIntentionsBundle.message("create.parameter.for.field.intention.name"),null);
    }
  }
).createPopup().showInBestPositionFor(editor);
}
