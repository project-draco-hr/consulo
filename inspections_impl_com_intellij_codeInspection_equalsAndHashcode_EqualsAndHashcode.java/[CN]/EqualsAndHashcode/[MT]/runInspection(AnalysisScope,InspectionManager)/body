{
  JOB_DESCRIPTOR.setTotalAmount(scope.getFileCount());
  scope.accept(new PsiRecursiveElementVisitor(){
    public void visitFile(    PsiFile file){
      if (file instanceof PsiJavaFile) {
        getContext().incrementJobDoneAmount(JOB_DESCRIPTOR,file.getVirtualFile().getPresentableUrl());
        super.visitFile(file);
      }
    }
    public void visitClass(    PsiClass aClass){
      if (!getContext().isToCheckMember(aClass,EqualsAndHashcode.this))       return;
      super.visitClass(aClass);
      boolean hasEquals=false;
      boolean hasHashCode=false;
      PsiMethod[] methods=aClass.getMethods();
      for (int i=0; i < methods.length; i++) {
        PsiMethod method=methods[i];
        if (MethodSignatureUtil.areSignaturesEqual(method,myEquals)) {
          hasEquals=true;
        }
 else         if (MethodSignatureUtil.areSignaturesEqual(method,myHashCode)) {
          hasHashCode=true;
        }
      }
      if (hasEquals != hasHashCode) {
        addProblemElement(getContext().getRefManager().getReference(aClass),new ProblemDescriptor[]{manager.createProblemDescriptor(aClass,hasEquals ? InspectionsBundle.message("inspection.equals.hashcode.only.one.defined.problem.descriptor","<code>equals()</code>","<code>hashCode()</code>") : InspectionsBundle.message("inspection.equals.hashcode.only.one.defined.problem.descriptor","<code>hashCode()</code>","<code>equals()</code>"),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING)});
      }
    }
  }
);
}
