{
  if (myEquals == null || myHashCode == null || !myEquals.isValid() || !myHashCode.isValid())   return new PsiElementVisitor(){
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
    }
  }
;
  return new PsiElementVisitor(){
    @Override public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      boolean[] hasEquals=new boolean[]{false};
      boolean[] hasHashCode=new boolean[]{false};
      processClass(aClass,hasEquals,hasHashCode);
      if (hasEquals[0] != hasHashCode[0]) {
        PsiIdentifier identifier=aClass.getNameIdentifier();
        holder.registerProblem(identifier != null ? identifier : aClass,hasEquals[0] ? InspectionsBundle.message("inspection.equals.hashcode.only.one.defined.problem.descriptor","<code>equals()</code>","<code>hashCode()</code>") : InspectionsBundle.message("inspection.equals.hashcode.only.one.defined.problem.descriptor","<code>hashCode()</code>","<code>equals()</code>"),(LocalQuickFix[])null);
      }
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
  }
;
}
