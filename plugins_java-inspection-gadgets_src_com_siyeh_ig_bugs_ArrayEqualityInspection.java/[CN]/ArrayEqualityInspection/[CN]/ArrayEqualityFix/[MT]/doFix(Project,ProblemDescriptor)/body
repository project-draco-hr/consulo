{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
  final IElementType tokenType=binaryExpression.getOperationTokenType();
  @NonNls final StringBuilder newExpressionText=new StringBuilder();
  if (JavaTokenType.NE.equals(tokenType)) {
    newExpressionText.append('!');
  }
 else   if (!JavaTokenType.EQEQ.equals(tokenType)) {
    return;
  }
  if (deepEquals) {
    newExpressionText.append("java.util.Arrays.deepEquals(");
  }
 else {
    newExpressionText.append("java.util.Arrays.equals(");
  }
  newExpressionText.append(binaryExpression.getLOperand().getText());
  newExpressionText.append(',');
  final PsiExpression rhs=binaryExpression.getROperand();
  if (rhs == null) {
    return;
  }
  newExpressionText.append(rhs.getText());
  newExpressionText.append(')');
  replaceExpressionAndShorten(binaryExpression,newExpressionText.toString());
}
