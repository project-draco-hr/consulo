{
  final UrlSerializationHelper helper=new UrlSerializationHelper(SvnVcs.getInstance(myProject));
  final Map<String,SvnBranchConfiguration> map=object.myConfigurationMap;
  final Map<String,SvnBranchConfiguration> newMap=new HashMap<String,SvnBranchConfiguration>(map.size(),1);
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  for (  Map.Entry<String,SvnBranchConfiguration> entry : map.entrySet()) {
    final SvnBranchConfiguration configuration=entry.getValue();
    final VirtualFile root=lfs.refreshAndFindFileByIoFile(new File(entry.getKey()));
    if (root == null) {
      LOG.info("root not found: " + entry.getKey());
      continue;
    }
    final SvnBranchConfiguration configToConvert;
    if ((!myConfigurationBean.mySupportsUserInfoFilter) || configuration.isUserinfoInUrl()) {
      configToConvert=helper.afterDeserialization(entry.getKey(),configuration);
    }
 else {
      configToConvert=configuration;
    }
    final SvnBranchConfigurationNew newConfig=new SvnBranchConfigurationNew();
    newConfig.setTrunkUrl(configToConvert.getTrunkUrl());
    newConfig.setUserinfoInUrl(configToConvert.isUserinfoInUrl());
    final Map<String,List<SvnBranchItem>> oldMap=configToConvert.getBranchMap();
    for (    String branchUrl : configToConvert.getBranchUrls()) {
      List<SvnBranchItem> items=oldMap.get(branchUrl);
      items=((items == null) || (items.isEmpty())) ? new ArrayList<SvnBranchItem>() : items;
      newConfig.addBranches(branchUrl,new InfoStorage<List<SvnBranchItem>>(items,(items.isEmpty()) ? InfoReliability.defaultValues : InfoReliability.setByUser));
    }
    final BranchesPreloader branchesPreloader=new BranchesPreloader(myProject,myBunch,root);
    branchesPreloader.setAll(true);
    myBunch.updateForRoot(root,new InfoStorage<SvnBranchConfigurationNew>(newConfig,InfoReliability.setByUser),branchesPreloader);
  }
  object.myConfigurationMap.clear();
  object.myConfigurationMap.putAll(newMap);
  myConfigurationBean=object;
}
