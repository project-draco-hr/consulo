{
  try {
    SVNURL baseUrl=null;
    final SVNWCAccess wcAccess=SVNWCAccess.newInstance(null);
    File rootFile=new File(vcsRoot.getPath());
    wcAccess.open(rootFile,false,0);
    try {
      SVNEntry entry=wcAccess.getEntry(rootFile,false);
      if (entry != null) {
        baseUrl=entry.getSVNURL();
      }
 else {
        throw new VcsException("Directory is not a working copy: " + vcsRoot.getPresentableUrl());
      }
    }
  finally {
      wcAccess.close();
    }
    final SvnBranchConfiguration result=new SvnBranchConfiguration();
    result.setTrunkUrl(baseUrl.toString());
    while (true) {
      final String s=SVNPathUtil.tail(baseUrl.getPath());
      if (s.equalsIgnoreCase(DEFAULT_TRUNK_NAME) || s.equalsIgnoreCase(DEFAULT_BRANCHES_NAME) || s.equalsIgnoreCase(DEFAULT_TAGS_NAME)) {
        final SVNURL rootPath=baseUrl.removePathTail();
        SVNLogClient client=SvnVcs.getInstance(myProject).createLogClient();
        client.doList(rootPath,SVNRevision.UNDEFINED,SVNRevision.HEAD,false,new ISVNDirEntryHandler(){
          public void handleDirEntry(          final SVNDirEntry dirEntry) throws SVNException {
            if (("".equals(dirEntry.getRelativePath())) || (!SVNNodeKind.DIR.equals(dirEntry.getKind()))) {
              return;
            }
            if (dirEntry.getName().toLowerCase().endsWith(DEFAULT_TRUNK_NAME)) {
              result.setTrunkUrl(rootPath.appendPath(dirEntry.getName(),false).toString());
            }
 else {
              result.getBranchUrls().add(rootPath.appendPath(dirEntry.getName(),false).toString());
            }
          }
        }
);
        break;
      }
      if (SVNPathUtil.removeTail(baseUrl.getPath()).length() == 0) {
        break;
      }
      baseUrl=baseUrl.removePathTail();
    }
    return result;
  }
 catch (  SVNException e) {
    throw new VcsException(e);
  }
}
