{
  final String[] names={ApplicationBundle.message("listbox.import.package"),ApplicationBundle.message("listbox.import.with.subpackages")};
  TableModel dataModel=new AbstractTableModel(){
    public int getColumnCount(){
      return names.length + (areStaticImportsEnabled() ? 1 : 0);
    }
    public int getRowCount(){
      return packageTable.getEntryCount();
    }
    public Object getValueAt(    int row,    int col){
      PackageEntry entry=packageTable.getEntryAt(row);
      if (entry == null || !isCellEditable(row,col))       return null;
      col+=areStaticImportsEnabled() ? 0 : 1;
      if (col == 0) {
        return entry.isStatic();
      }
      if (col == 1) {
        return entry.getPackageName();
      }
      if (col == 2) {
        return entry.isWithSubpackages() ? Boolean.TRUE : Boolean.FALSE;
      }
      throw new IllegalArgumentException(String.valueOf(col));
    }
    public String getColumnName(    int column){
      if (areStaticImportsEnabled() && column == 0)       return "Static";
      column-=areStaticImportsEnabled() ? 1 : 0;
      return names[column];
    }
    public Class getColumnClass(    int col){
      col+=areStaticImportsEnabled() ? 0 : 1;
      if (col == 0) {
        return Boolean.class;
      }
      if (col == 1) {
        return String.class;
      }
      if (col == 2) {
        return Boolean.class;
      }
      throw new IllegalArgumentException(String.valueOf(col));
    }
    public boolean isCellEditable(    int row,    int col){
      PackageEntry packageEntry=packageTable.getEntryAt(row);
      return !packageEntry.isSpecial();
    }
    public void setValueAt(    Object aValue,    int row,    int col){
      PackageEntry packageEntry=packageTable.getEntryAt(row);
      col+=areStaticImportsEnabled() ? 0 : 1;
      if (col == 0) {
        PackageEntry newPackageEntry=new PackageEntry((Boolean)aValue,packageEntry.getPackageName(),packageEntry.isWithSubpackages());
        packageTable.setEntryAt(newPackageEntry,row);
      }
 else       if (col == 1) {
        PackageEntry newPackageEntry=new PackageEntry(packageEntry.isStatic(),((String)aValue).trim(),packageEntry.isWithSubpackages());
        packageTable.setEntryAt(newPackageEntry,row);
      }
 else       if (col == 2) {
        PackageEntry newPackageEntry=new PackageEntry(packageEntry.isStatic(),packageEntry.getPackageName(),((Boolean)aValue).booleanValue());
        packageTable.setEntryAt(newPackageEntry,row);
      }
 else {
        throw new IllegalArgumentException(String.valueOf(col));
      }
    }
  }
;
  final JBTable result=new JBTable(dataModel);
  result.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  resizeColumns(packageTable,result);
  TableCellEditor editor=result.getDefaultEditor(String.class);
  if (editor instanceof DefaultCellEditor) {
    ((DefaultCellEditor)editor).setClickCountToStart(1);
  }
  TableCellEditor beditor=result.getDefaultEditor(Boolean.class);
  beditor.addCellEditorListener(new CellEditorListener(){
    public void editingStopped(    ChangeEvent e){
      if (areStaticImportsEnabled()) {
        result.repaint();
      }
    }
    public void editingCanceled(    ChangeEvent e){
    }
  }
);
  result.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  return result;
}
