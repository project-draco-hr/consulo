{
  final PsiClassType.ClassResolveResult resolveResult=myClassType.resolveGenerics();
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass == null || !psiClass.isValid()) {
    return;
  }
  final GroovyPsiElement place=obtainPlace(context);
  PsiMethod[] constructors=ResolveUtil.getAllClassConstructors(psiClass,place,resolveResult.getSubstitutor());
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(psiClass.getProject()).getResolveHelper();
  boolean hasParams=ContainerUtil.or(constructors,new Condition<PsiMethod>(){
    public boolean value(    PsiMethod psiMethod){
      if (!resolveHelper.isAccessible(psiMethod,place,null)) {
        return false;
      }
      return psiMethod.getParameterList().getParametersCount() > 0;
    }
  }
);
  if (myTriggerFeature) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
  }
  if (hasParams) {
    ParenthesesInsertHandler.WITH_PARAMETERS.handleInsert(context,item);
  }
 else {
    ParenthesesInsertHandler.NO_PARAMETERS.handleInsert(context,item);
  }
  GroovyCompletionUtil.addImportForItem(context.getFile(),context.getStartOffset(),item);
  if (hasParams)   AutoPopupController.getInstance(constructors[0].getProject()).autoPopupParameterInfo(context.getEditor(),null);
}
