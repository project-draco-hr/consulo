{
  final PsiClassType.ClassResolveResult resolveResult=myClassType.resolveGenerics();
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass == null || !psiClass.isValid()) {
    return;
  }
  GroovyPsiElement place=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),GroovyPsiElement.class,false);
  boolean hasParams=place != null && GroovyCompletionUtil.hasConstructorParameters(psiClass,place);
  if (myTriggerFeature) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
  }
  if (hasParams) {
    ParenthesesInsertHandler.WITH_PARAMETERS.handleInsert(context,item);
  }
 else {
    ParenthesesInsertHandler.NO_PARAMETERS.handleInsert(context,item);
  }
  GroovyCompletionUtil.addImportForItem(context.getFile(),context.getStartOffset(),item);
  if (hasParams) {
    AutoPopupController.getInstance(context.getProject()).autoPopupParameterInfo(context.getEditor(),null);
  }
}
