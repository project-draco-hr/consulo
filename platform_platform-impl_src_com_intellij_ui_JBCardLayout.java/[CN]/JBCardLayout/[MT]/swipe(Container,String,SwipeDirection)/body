{
  stopSwipeIfNeed();
  mySwipeFrom=findVisible(parent);
  mySwipeTo=myMap.get(name);
  if (mySwipeFrom == null || mySwipeTo == null || mySwipeFrom == mySwipeTo) {
    return;
  }
  final boolean isForward;
  if (direction == SwipeDirection.AUTO) {
    boolean b=true;
    for (    Component component : myMap.values()) {
      if (component == mySwipeFrom || component == mySwipeTo) {
        b=component == mySwipeFrom;
        break;
      }
    }
    isForward=b;
  }
 else {
    isForward=direction == SwipeDirection.FORWARD;
  }
  final double[] linearProgress=new double[1];
  linearProgress[0]=0;
  final long startTime=System.currentTimeMillis();
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      long timePassed=System.currentTimeMillis() - startTime;
      if (timePassed >= mySwipeTime) {
        show(parent,name);
        return;
      }
      linearProgress[0]=Math.min(1,Math.max(0,(float)timePassed / mySwipeTime));
      double naturalProgress=(1 - Math.cos(Math.PI * linearProgress[0])) / 2;
      Rectangle bounds=parent.getBounds();
      Insets insets=parent.getInsets();
      bounds.setLocation(insets.left,insets.top);
      bounds.width-=insets.left + insets.right;
      bounds.height-=insets.top + insets.bottom;
      Rectangle r=new Rectangle(bounds);
      int x=(int)((naturalProgress * r.width));
      r.translate(isForward ? -x : x,0);
      mySwipeFrom.setBounds(r);
      Rectangle r2=new Rectangle(bounds);
      r2.translate(isForward ? r2.width - x : x - r2.width,0);
      mySwipeTo.setVisible(true);
      mySwipeTo.setBounds(r2);
      parent.repaint();
    }
  }
;
  for (  ActionListener actionListener : myTimer.getActionListeners()) {
    myTimer.removeActionListener(actionListener);
  }
  myTimer.addActionListener(listener);
  myTimer.start();
}
