{
  if (myStart >= myEnd)   return null;
  if (myBuffer[myStart] != '\\')   return myOriginalLiteralToken;
  if (myStart + 1 >= myEnd)   return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
  final char nextChar=myBuffer[myStart + 1];
  if (myCanEscapeEol && nextChar == '\n') {
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
  if (nextChar == 'u') {
    for (int i=myStart + 2; i < myStart + 6; i++) {
      if (i >= myEnd || !isHexDigit(myBuffer[i]))       return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    }
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
switch (nextChar) {
case 'n':
case 'r':
case 'b':
case 't':
case 'f':
case '\'':
case '\"':
case '\\':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
}
return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
}
