{
  final BlockInfo info=myStack.peek();
  final Wrap wrap=info.getWrap();
  whiteSpace.arrangeLineFeeds(spaceProperty);
  if (shouldUseWrap(wrap)) {
    whiteSpace.ensureLineFeed();
  }
  final int wsLineFeeds=whiteSpace.getLineFeeds();
  if (wsLineFeeds > 0) {
    myCurrentLine+=wsLineFeeds;
    myCurrentOffset=whiteSpace.getSpaces();
  }
 else {
    myCurrentOffset+=whiteSpace.getSpaces();
  }
  if (!onTheSameLine(whiteSpace)) {
    final int before=whiteSpace.getSpaces();
    int alignOffset=getAlignOffset(info.getAlignment());
    if (alignOffset == -1) {
      int indent=calculateIndent();
      setFirstElementIsProcessed(indent);
      whiteSpace.setSpaces(indent);
    }
 else {
      setFirstElementIsProcessed(alignOffset);
      whiteSpace.setSpaces(alignOffset);
    }
    final int after=whiteSpace.getSpaces();
    myCurrentOffset+=after - before;
  }
 else {
    setElementIsProcessed(myCurrentOffset);
    whiteSpace.arrangeSpaces(spaceProperty);
  }
  setAlignOffset(info.getAlignment(),info.getCurrentIndent(),myCurrentLine);
  final TextRange textRange=info.getBlock().getTextRange();
  final int blockLineFeeds=getLineFeeds(textRange);
  if (blockLineFeeds > 0) {
    myCurrentLine+=blockLineFeeds;
    myCurrentOffset=getLastLineLength(textRange);
  }
 else {
    myCurrentOffset+=textRange.getLength();
  }
}
