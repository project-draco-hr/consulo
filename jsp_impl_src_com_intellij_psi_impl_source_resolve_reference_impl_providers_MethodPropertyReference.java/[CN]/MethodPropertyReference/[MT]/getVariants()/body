{
  final Map<String,JspReferencesProvider.MyPropertyResultLookupValue> properties=new HashMap<String,JspReferencesProvider.MyPropertyResultLookupValue>(1);
  processProperties(new ELResolveUtil.ELElementProcessor(){
    public boolean processNSPrefix(    String prefix){
      return false;
    }
    public boolean processVariable(    PsiVariable variable){
      return false;
    }
    public boolean processMethod(    PsiMethod method){
      final JspReferencesProvider.MyPropertyResultLookupValue myPropertyResultLookupValue=new JspReferencesProvider.MyPropertyResultLookupValue(method,myReadable);
      if (!properties.containsKey(myPropertyResultLookupValue.getPresentation())) {
        properties.put(myPropertyResultLookupValue.getPresentation(),myPropertyResultLookupValue);
      }
      return true;
    }
    public boolean processProperty(    Property property){
      return false;
    }
    @Nullable public String getNameHint(){
      return null;
    }
    public void setSubstitutor(    final PsiSubstitutor mySubstitutor){
    }
  }
);
  return properties.values().toArray(new Object[properties.size()]);
}
