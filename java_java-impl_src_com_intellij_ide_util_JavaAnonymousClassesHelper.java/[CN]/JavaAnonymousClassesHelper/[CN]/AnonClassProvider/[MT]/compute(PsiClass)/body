{
  final Map<PsiAnonymousClass,String> map=new THashMap<PsiAnonymousClass,String>();
  upper.accept(new JavaRecursiveElementWalkingVisitor(){
    int index=0;
    @Override public void visitAnonymousClass(    PsiAnonymousClass aClass){
      if (upper == aClass) {
        super.visitAnonymousClass(aClass);
        return;
      }
      final PsiExpressionList arguments=aClass.getArgumentList();
      if (arguments != null) {
        for (        PsiExpression expression : arguments.getExpressions()) {
          expression.acceptChildren(new JavaRecursiveElementVisitor(){
            @Override public void visitAnonymousClass(            PsiAnonymousClass aClass){
              index++;
              map.put(aClass,"$" + index);
            }
          }
);
        }
      }
      index++;
      map.put(aClass,"$" + index);
    }
    @Override public void visitClass(    PsiClass aClass){
      if (aClass == upper) {
        super.visitClass(aClass);
      }
    }
  }
);
  return CachedValueProvider.Result.create(map,upper);
}
