{
  final PsiClass upper=PsiTreeUtil.getParentOfType(cls,PsiClass.class);
  if (upper != null) {
    final CachedValue<Map<PsiAnonymousClass,String>> value=upper.getUserData(ANONYMOUS_CLASS_NAME);
    if (value != null && value.hasUpToDateValue()) {
      return value.getValue().get(cls);
    }
    final HashMap<PsiAnonymousClass,String> map=new HashMap<PsiAnonymousClass,String>();
    upper.accept(new JavaRecursiveElementWalkingVisitor(){
      int index=0;
      @Override public void visitAnonymousClass(      PsiAnonymousClass aClass){
        index++;
        map.put(aClass,"$" + String.valueOf(index));
      }
      @Override public void visitClass(      PsiClass aClass){
        if (aClass == upper) {
          super.visitClass(aClass);
        }
      }
    }
);
    final CachedValue<Map<PsiAnonymousClass,String>> cachedValue=CachedValuesManager.getManager(cls.getProject()).createCachedValue(new CachedValueProvider<Map<PsiAnonymousClass,String>>(){
      @Override public Result<Map<PsiAnonymousClass,String>> compute(){
        return new Result<Map<PsiAnonymousClass,String>>(map,upper);
      }
    }
);
    upper.putUserData(ANONYMOUS_CLASS_NAME,cachedValue);
    return map.get(cls);
  }
  return null;
}
