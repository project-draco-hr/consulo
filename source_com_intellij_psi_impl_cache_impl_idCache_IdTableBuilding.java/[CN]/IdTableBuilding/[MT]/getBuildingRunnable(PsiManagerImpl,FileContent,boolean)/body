{
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: getBuildingRunnable(file='" + fileContent.getVirtualFile() + "' buildTodos='"+ buildTodos+ "' )");
  }
  final VirtualFile virtualFile=fileContent.getVirtualFile();
  LOG.assertTrue(virtualFile.isValid());
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  if (fileTypeManager.isFileIgnored(virtualFile.getName()))   return null;
  final FileType fileType=fileTypeManager.getFileTypeByFile(virtualFile);
  if (fileType.isBinary())   return null;
  if (StdFileTypes.CLASS.equals(fileType))   return null;
  final TIntIntHashMap wordsTable=new TIntIntHashMap();
  final int[] todoCounts;
  final IndexPattern[] todoPatterns=IdCacheUtil.getIndexPatterns();
  if (buildTodos && CacheManagerImpl.canContainTodoItems(fileContent.getVirtualFile())) {
    int patternCount=todoPatterns.length;
    todoCounts=patternCount > 0 ? new int[patternCount] : null;
  }
 else {
    todoCounts=null;
  }
  Document document=FileDocumentManager.getInstance().getDocument(virtualFile);
  final char[] chars;
  final int textLength;
  if (virtualFile.getModificationStamp() != document.getModificationStamp()) {
    final PsiFile psiFile=manager.getFile(fileContent);
    if (psiFile == null)     return null;
    chars=psiFile.textToCharArray();
    textLength=psiFile.getTextLength();
  }
 else {
    chars=document.getChars();
    textLength=document.getTextLength();
  }
  final IdCacheBuilder cacheBuilder=getCacheBuilder(fileType,manager.getProject(),virtualFile);
  if (cacheBuilder == null)   return null;
  Runnable runnable=new Runnable(){
    public void run(){
synchronized (PsiLock.LOCK) {
        cacheBuilder.build(chars,textLength,wordsTable,todoPatterns,todoCounts,manager);
      }
    }
  }
;
  return new Result(runnable,wordsTable,todoCounts);
}
