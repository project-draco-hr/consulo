{
  myElementsChooser=new ElementsChooser<ModuleChooserElement>();
  myModulesPanel.setLayout(new BorderLayout());
  myModulesPanel.add(myElementsChooser,BorderLayout.CENTER);
  final Module[] modules=ModuleManager.getInstance(myProject).getModules();
  for (  Module module : modules) {
    if (module.getModuleType().isJ2EE())     continue;
    ModuleChooserElement moduleChooserElement=new ModuleChooserElement(module,null);
    BuildJarSettings buildJarSettings=BuildJarSettings.getInstance(module);
    myElementsChooser.addElement(moduleChooserElement,buildJarSettings.isBuildJar(),moduleChooserElement);
  }
  myElementsChooser.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (myCurrentModule != null) {
        applyEditor(myCurrentModule);
      }
      ModuleChooserElement selectedElement=myElementsChooser.getSelectedElement();
      Module module=selectedElement == null ? null : selectedElement.getModule();
      if (module != null) {
        BuildJarSettings buildJarSettings=BuildJarSettings.getInstance(module);
        SettingsEditor settingsEditor=new SettingsEditor(module,buildJarSettings);
        mySettings.put(module,settingsEditor);
        boolean isBuildJar=myElementsChooser.getMarkedElements().contains(selectedElement);
        GuiUtils.enableChildren(myModuleSettingsPanel,isBuildJar,null);
      }
      myCurrentModule=module;
    }
  }
);
  myElementsChooser.addElementsMarkListener(new ElementsChooser.ElementsMarkListener<ModuleChooserElement>(){
    public void elementMarkChanged(    final ModuleChooserElement element,    final boolean isMarked){
      GuiUtils.enableChildren(myModuleSettingsPanel,isMarked,null);
      if (isMarked) {
        setDefaultJarPath();
      }
    }
  }
);
  myJarPath.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String lastFilePath=myJarPath.getText();
      String path=lastFilePath != null ? lastFilePath : RecentProjectsManager.getInstance().getLastProjectPath();
      File file=new File(path);
      if (!file.exists()) {
        path=file.getParent();
      }
      JFileChooser fileChooser=new JFileChooser(path);
      FileView fileView=new FileView(){
        public Icon getIcon(        File f){
          if (f.isDirectory())           return super.getIcon(f);
          FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName(f.getName());
          return fileType.getIcon();
        }
      }
;
      fileChooser.setFileView(fileView);
      fileChooser.setMultiSelectionEnabled(false);
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setDialogTitle("Save Jar File");
      fileChooser.addChoosableFileFilter(new FileTypeFilter(StdFileTypes.ARCHIVE));
      if (fileChooser.showSaveDialog(WindowManager.getInstance().suggestParentWindow(myProject)) != JFileChooser.APPROVE_OPTION) {
        return;
      }
      file=fileChooser.getSelectedFile();
      if (file == null)       return;
      myJarPath.setText(file.getPath());
    }
  }
);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ModuleChooserElement element=myElementsChooser.getElementAt(0);
      myElementsChooser.selectElements(Collections.singletonList(element));
    }
  }
);
  GuiUtils.replaceJSplitPaneWithIDEASplitter(myPanel,true);
}
