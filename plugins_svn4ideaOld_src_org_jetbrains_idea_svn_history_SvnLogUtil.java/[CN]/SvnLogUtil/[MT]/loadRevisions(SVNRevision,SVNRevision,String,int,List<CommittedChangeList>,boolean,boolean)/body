{
  SVNLogClient logger=myVcs.createLogClient();
  logger.doLog(myRepositoryRoot,new String[]{myRelative},SVNRevision.UNDEFINED,fromIncluding,toIncluding,true,true,maxCount,new ISVNLogEntryHandler(){
    public void handleLogEntry(    SVNLogEntry logEntry){
      if (myProject.isDisposed())       throw new ProcessCanceledException();
      final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      if (progress != null) {
        progress.setText2(SvnBundle.message("progress.text2.processing.revision",logEntry.getRevision()));
        progress.checkCanceled();
      }
      if ((!includingYoungest) && (logEntry.getRevision() == fromIncluding.getNumber())) {
        return;
      }
      if ((!includeOldest) && (logEntry.getRevision() == toIncluding.getNumber())) {
        return;
      }
      if (author == null || author.equalsIgnoreCase(logEntry.getAuthor())) {
        result.add(new SvnChangeList(myVcs,myLocation,logEntry,myRepositoryRoot.toString()));
      }
    }
  }
);
}
