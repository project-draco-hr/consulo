{
  defaultInitialize();
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  RunConfigurationModule module=myConfiguration.getConfigurationModule();
  final Project project=module.getProject();
  addJUnit4Parameter(data,project);
  final ExecutionException[] exception=new ExecutionException[1];
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        myConfiguration.configureClasspath(myJavaParameters);
      }
 catch (      CantRunException e) {
        exception[0]=e;
      }
    }
  }
);
  if (exception[0] != null)   throw exception[0];
  final LinkedHashMap<PsiMethod,TestInfo> methods=new LinkedHashMap<PsiMethod,TestInfo>();
  for (  AbstractTestProxy failedTest : myFailedTests) {
    Location location=failedTest.getLocation(project);
    if (!(location instanceof MethodLocation))     continue;
    PsiElement psiElement=location.getPsiElement();
    LOG.assertTrue(psiElement instanceof PsiMethod);
    PsiMethod method=(PsiMethod)psiElement;
    methods.put(method,((TestProxy)failedTest).getInfo());
  }
  addClassesListToJavaParameters(methods.keySet(),new Function<PsiElement,String>(){
    public String fun(    PsiElement element){
      if (element instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)element;
        final TestInfo testInfo=methods.get(method);
        return JavaExecutionUtil.getRuntimeQualifiedName(((MethodLocation)testInfo.getLocation(project)).getContainingClass()) + "," + testInfo.getName();
      }
      return null;
    }
  }
,data.getPackageName(),true,false);
}
