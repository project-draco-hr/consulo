{
  defaultInitialize();
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  RunConfigurationModule module=myConfiguration.getConfigurationModule();
  final Project project=module.getProject();
  final ExecutionException[] exception=new ExecutionException[1];
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        myConfiguration.configureClasspath(myJavaParameters);
      }
 catch (      CantRunException e) {
        exception[0]=e;
      }
    }
  }
);
  if (exception[0] != null)   throw exception[0];
  final LinkedHashSet<TestInfo> methods=new LinkedHashSet<TestInfo>();
  final GlobalSearchScope searchScope=myConfiguration.getConfigurationModule().getSearchScope();
  for (  AbstractTestProxy failedTest : myFailedTests) {
    Location location=failedTest.getLocation(project,searchScope);
    if (!(location instanceof MethodLocation))     continue;
    PsiElement psiElement=location.getPsiElement();
    LOG.assertTrue(psiElement instanceof PsiMethod);
    PsiMethod method=(PsiMethod)psiElement;
    methods.add(((TestProxy)failedTest).getInfo());
  }
  addClassesListToJavaParameters(methods,new Function<TestInfo,String>(){
    public String fun(    TestInfo testInfo){
      if (testInfo != null) {
        final MethodLocation location=(MethodLocation)testInfo.getLocation(project,searchScope);
        LOG.assertTrue(location != null);
        return JavaExecutionUtil.getRuntimeQualifiedName(location.getContainingClass()) + "," + testInfo.getName();
      }
      return null;
    }
  }
,data.getPackageName(),true,false);
}
