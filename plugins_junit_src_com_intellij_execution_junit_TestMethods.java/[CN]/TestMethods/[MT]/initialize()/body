{
  final boolean isMerge=myConfiguration.isMergeWithPreviousResults();
  try {
    myConfiguration.setMergeWithPreviousResults(true);
    defaultInitialize();
  }
  finally {
    myConfiguration.setMergeWithPreviousResults(isMerge);
  }
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  RunConfigurationModule module=myConfiguration.getConfigurationModule();
  final Project project=module.getProject();
  addJUnit4Parameter(data,project);
  final ExecutionException[] exception=new ExecutionException[1];
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        myConfiguration.configureClasspath(myJavaParameters);
      }
 catch (      CantRunException e) {
        exception[0]=e;
      }
    }
  }
);
  if (exception[0] != null)   throw exception[0];
  List<PsiMethod> methods=new ArrayList<PsiMethod>();
  for (  AbstractTestProxy failedTest : myFailedTests) {
    Location location=failedTest.getLocation(project);
    if (location == null)     continue;
    PsiElement psiElement=location.getPsiElement();
    LOG.assertTrue(psiElement instanceof PsiMethod);
    PsiMethod method=(PsiMethod)psiElement;
    methods.add(method);
  }
  addClassesListToJavaParameters(methods,data.getPackageName());
}
