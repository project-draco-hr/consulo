{
  PsiImportStatementBase[] imports=file.getImportList().getAllImportStatements();
  final Map<String,Pair<String,Boolean>> unresolvedNames=new THashMap<String,Pair<String,Boolean>>();
  for (  PsiImportStatementBase anImport : imports) {
    PsiJavaCodeReferenceElement ref=anImport.getImportReference();
    if (ref == null)     continue;
    JavaResolveResult[] results=ref.multiResolve(false);
    if (results.length == 0) {
      String text=ref.getCanonicalText();
      if (anImport.isOnDemand()) {
        text+=".*";
      }
      Pair<String,Boolean> pair=Pair.create(text,anImport instanceof PsiImportStaticStatement);
      if (!anImport.isOnDemand()) {
        unresolvedNames.put(ref.getReferenceName(),pair);
      }
 else {
        namesToImport.add(pair);
      }
    }
  }
  for (  PsiClass aClass : file.getClasses()) {
    aClass.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReferenceElement(      PsiJavaCodeReferenceElement reference){
        String name=reference.getReferenceName();
        Pair<String,Boolean> pair=unresolvedNames.get(name);
        if (pair != null && reference.multiResolve(false).length == 0) {
          namesToImport.add(pair);
          unresolvedNames.remove(name);
        }
        super.visitReferenceElement(reference);
      }
    }
);
  }
}
