{
  PsiJavaCodeReferenceElement ref=statement.getImportReference();
  if (ref == null)   return null;
  int entryIndex=findEntryIndex(statement);
  PsiImportStatementBase[] allStatements=list.getAllImportStatements();
  int[] entries=ArrayUtil.newIntArray(allStatements.length);
  List<PsiImportStatementBase> statements=new ArrayList<PsiImportStatementBase>();
  for (int i=0; i < allStatements.length; i++) {
    PsiImportStatementBase statement1=allStatements[i];
    int entryIndex1=findEntryIndex(statement1);
    entries[i]=entryIndex1;
    if (entryIndex1 == entryIndex) {
      statements.add(statement1);
    }
  }
  if (statements.isEmpty()) {
    int index;
    for (index=entries.length - 1; index >= 0; index--) {
      if (entries[index] < entryIndex)       break;
    }
    index++;
    return index < entries.length ? SourceTreeToPsiMap.psiElementToTree(allStatements[index]) : null;
  }
 else {
    String refText=ref.getCanonicalText();
    if (statement.isOnDemand()) {
      refText+=".";
    }
    PsiImportStatementBase insertBefore=null;
    PsiImportStatementBase insertAfter=null;
    for (    PsiImportStatementBase statement1 : statements) {
      PsiJavaCodeReferenceElement ref1=statement1.getImportReference();
      if (ref1 == null) {
        continue;
      }
      String refTextThis=ref1.getCanonicalText();
      if (statement1.isOnDemand()) {
        refTextThis+=".";
      }
      int comp=Comparing.compare(refText,refTextThis);
      if (comp < 0 && insertBefore == null) {
        insertBefore=statement1;
      }
      if (comp > 0) {
        insertAfter=statement1;
      }
    }
    if (insertBefore != null)     return insertBefore.getNode();
    if (insertAfter != null)     return insertAfter.getNode().getTreeNext();
    return null;
  }
}
