{
  final GlobalSearchScope resolveScope=file.getResolveScope();
  Set<String> namesToUseSingle=new THashSet<String>();
  final String thisPackageName=file.getPackageName();
  final Set<String> implicitlyImportedPackages=new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()));
  final PsiManager manager=file.getManager();
  for (  String name : names) {
    String prefix=getPackageOrClassName(name);
    if (prefix.length() == 0)     continue;
    final boolean isImplicitlyImported=implicitlyImportedPackages.contains(prefix);
    if (!onDemandImports.contains(prefix) && !isImplicitlyImported)     continue;
    String shortName=PsiNameHelper.getShortClassName(name);
    String thisPackageClass=thisPackageName.length() > 0 ? thisPackageName + "." + shortName : shortName;
    if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass,resolveScope) != null) {
      namesToUseSingle.add(name);
      continue;
    }
    if (!isImplicitlyImported) {
      String langPackageClass=JAVA_LANG_PACKAGE + "." + shortName;
      if (JavaPsiFacade.getInstance(manager.getProject()).findClass(langPackageClass,resolveScope) != null) {
        namesToUseSingle.add(name);
        continue;
      }
    }
    for (    String onDemandName : onDemandImports) {
      if (prefix.equals(onDemandName))       continue;
      if (namesToImportStaticly.contains(name)) {
        PsiClass aClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(onDemandName,resolveScope);
        if (aClass != null) {
          PsiField field=aClass.findFieldByName(shortName,true);
          if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
            namesToUseSingle.add(name);
          }
 else {
            PsiClass inner=aClass.findInnerClassByName(shortName,true);
            if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) {
              namesToUseSingle.add(name);
            }
 else {
              PsiMethod[] methods=aClass.findMethodsByName(shortName,true);
              for (              PsiMethod method : methods) {
                if (method.hasModifierProperty(PsiModifier.STATIC)) {
                  namesToUseSingle.add(name);
                }
              }
            }
          }
        }
      }
 else {
        PsiClass aClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(onDemandName + "." + shortName,resolveScope);
        if (aClass != null) {
          namesToUseSingle.add(name);
        }
      }
    }
  }
  return namesToUseSingle;
}
