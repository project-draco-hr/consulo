{
  final ScrollingModel scrollingModel=editor.getScrollingModel();
  scrollingModel.scrollToCaret(ScrollType.MAKE_VISIBLE);
  final CaretModel caretModel=editor.getCaretModel();
  final int position=caretModel.getOffset();
  final PsiElement element=file.findElementAt(position);
  final PsiMember selectedMember=PsiTreeUtil.getParentOfType(element,PsiMember.class,true);
  if (selectedMember == null) {
    return;
  }
  final PsiClass containingClass=selectedMember instanceof PsiClass ? (PsiClass)selectedMember : selectedMember.getContainingClass();
  if (containingClass == null) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.caret.should.be.positioned.within.a.class.to.be.refactored"),getHelpID(),project);
    return;
  }
  if (containingClass.isInterface()) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.class.is.an.interface"),getHelpID(),project);
    return;
  }
  if (containingClass.isEnum()) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.class.is.an.enumeration"),getHelpID(),project);
    return;
  }
  if (containingClass.isAnnotationType()) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.class.is.an.annotation.type"),getHelpID(),project);
    return;
  }
  if (classIsInner(containingClass) && !containingClass.hasModifierProperty(PsiModifier.STATIC)) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.refactoring.is.not.supported.on.non.static.inner.classes"),getHelpID(),project);
    return;
  }
  if (classIsTrivial(containingClass)) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.class.has.no.members.to.extract"),getHelpID(),project);
    return;
  }
  new ExtractClassDialog(containingClass,selectedMember).show();
}
