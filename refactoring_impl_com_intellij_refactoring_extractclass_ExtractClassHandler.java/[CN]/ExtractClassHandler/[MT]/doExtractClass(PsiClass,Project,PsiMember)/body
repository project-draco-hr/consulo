{
  final ExtractClassDialog dialog=new ExtractClassDialog(containingClass,selectedMember);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final PsiManager manager=containingClass.getManager();
  final boolean previewUsages=dialog.isPreviewUsages();
  final List<PsiField> fields=dialog.getFieldsToExtract();
  final List<PsiMethod> methods=dialog.getMethodsToExtract();
  final List<PsiClass> classes=dialog.getClassesToExtract();
  final String newClassName=dialog.getClassName();
  final String packageName=dialog.getPackageName();
  final String qualifiedName=ClassUtil.createQualifiedName(packageName,newClassName);
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass existingClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(qualifiedName,scope);
  if (existingClass != null) {
    showErrorMessage(RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("there.already.exists.a.class.with.the.chosen.name"),project);
    return;
  }
  final Runnable action=new Runnable(){
    public void run(){
      final ExtractClassProcessor processor=new ExtractClassProcessor(containingClass,fields,methods,classes,packageName,newClassName,previewUsages);
      processor.run();
    }
  }
;
  perform(project,action);
}
