{
  if (selection.size() != 1) {
    return;
  }
  AbstractGravityAction<Pair<Boolean,Gravity>> action=new AbstractGravityAction<Pair<Boolean,Gravity>>(designer,selection){
    private Pair<Gravity,Gravity> myGravity;
    @Override protected boolean addSeparator(    DefaultActionGroup actionGroup,    Pair<Boolean,Gravity> item){
      if (item == null) {
        actionGroup.addSeparator();
        return true;
      }
      return false;
    }
    @NotNull @Override protected DefaultActionGroup createPopupActionGroup(    JComponent button){
      myGravity=Gravity.getSides(myComponents.get(0));
      return super.createPopupActionGroup(button);
    }
    @Override protected void update(    Pair<Boolean,Gravity> item,    Presentation presentation,    boolean popup){
      if (popup) {
        Gravity selection=item.first ? myGravity.first : myGravity.second;
        presentation.setIcon(selection == item.second ? CHECKED : null);
        presentation.setText(item.second.name());
      }
    }
    @Override protected boolean selectionChanged(    Pair<Boolean,Gravity> item){
      Gravity oldSelection=item.first ? myGravity.first : myGravity.second;
      if (oldSelection != item.second) {
        final String gravity=item.first ? Gravity.getValue(item.second,myGravity.second) : Gravity.getValue(myGravity.first,item.second);
        execute(new Runnable(){
          @Override public void run(){
            ((RadViewComponent)myComponents.get(0)).getTag().setAttribute("layout_gravity",SdkConstants.NS_RESOURCES,gravity);
          }
        }
);
      }
      return false;
    }
    @Override public void setSelection(    Pair<Boolean,Gravity> selection){
    }
  }
;
  action.setItems(ITEMS,null);
  actionGroup.add(action);
}
