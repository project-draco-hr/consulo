{
  super.visitBinaryExpression(expression);
  if (expression.getOperationTokenType() != GroovyTokenTypes.kIN)   return;
  GrExpression leftOperand=expression.getLeftOperand();
  GrExpression rightOperand=expression.getRightOperand();
  if (leftOperand == null || rightOperand == null)   return;
  PsiType ltype=leftOperand.getType();
  PsiType rtype=rightOperand.getType();
  if (ltype == null || rtype == null)   return;
  PsiType component;
  if (rtype instanceof PsiArrayType) {
    component=((PsiArrayType)rtype).getComponentType();
  }
 else   if (InheritanceUtil.isInheritor(rtype,CommonClassNames.JAVA_UTIL_COLLECTION)) {
    component=PsiUtil.substituteTypeParameter(rtype,CommonClassNames.JAVA_UTIL_COLLECTION,0,false);
  }
 else {
    checkSimpleClasses(ltype,rtype,expression);
    return;
  }
  if (component == null)   return;
  if (TypesUtil.isAssignable(ltype,component,expression.getManager(),expression.getResolveScope(),false))   return;
  registerError(expression,ltype,rtype);
}
