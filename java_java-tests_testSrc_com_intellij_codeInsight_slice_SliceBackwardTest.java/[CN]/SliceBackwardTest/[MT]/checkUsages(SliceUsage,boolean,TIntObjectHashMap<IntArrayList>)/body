{
  final List<SliceUsage> children=new ArrayList<SliceUsage>();
  boolean b=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      usage.processChildren(new CommonProcessors.CollectProcessor<SliceUsage>(children));
    }
  }
,"Expanding",true,usage.getElement().getProject());
  assertTrue(b);
  int startOffset=usage.getElement().getTextOffset();
  IntArrayList list=flownOffsets.get(startOffset);
  int[] offsets=list == null ? new int[0] : list.toArray();
  Arrays.sort(offsets);
  int size=list == null ? 0 : list.size();
  assertEquals(message(startOffset,usage),size,children.size());
  Collections.sort(children,new Comparator<SliceUsage>(){
    @Override public int compare(    SliceUsage o1,    SliceUsage o2){
      return o1.compareTo(o2);
    }
  }
);
  for (int i=0; i < children.size(); i++) {
    SliceUsage child=children.get(i);
    int offset=offsets[i];
    assertEquals(message(offset,child),offset,child.getUsageInfo().getElement().getTextOffset());
    checkUsages(child,dataFlowToThis,flownOffsets);
  }
}
