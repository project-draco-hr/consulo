{
  List<Element> files=element.getChildren("file");
  final Map<VirtualFile,Charset> mapping=new HashMap<VirtualFile,Charset>();
  for (  Element fileElement : files) {
    String url=fileElement.getAttributeValue("url");
    String charsetName=fileElement.getAttributeValue("charset");
    Charset charset=CharsetToolkit.forName(charsetName);
    if (charset == null)     continue;
    VirtualFile file=url.equals("PROJECT") ? null : VirtualFileManager.getInstance().findFileByUrl(url);
    if (file != null || url.equals("PROJECT")) {
      mapping.put(file,charset);
    }
  }
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed()) {
        myMapping.clear();
        myMapping.putAll(mapping);
      }
 else {
        setMapping(mapping);
      }
    }
  }
);
  myUseUTFGuessing=Boolean.parseBoolean(element.getAttributeValue("useUTFGuessing"));
  myNative2AsciiForPropertiesFiles=Boolean.parseBoolean(element.getAttributeValue("native2AsciiForPropertiesFiles"));
  myDefaultCharsetForPropertiesFiles=CharsetToolkit.forName(element.getAttributeValue("defaultCharsetForPropertiesFiles"));
  boolean migrated=myGeneralSettings.migrateCharsetSettingsTo(this);
  migrated|=myEditorSettings.migrateCharsetSettingsTo(this);
  if (migrated) {
    EncodingProjectManager defaultManager=getInstance(ProjectManager.getInstance().getDefaultProject());
    if (defaultManager != null) {
      myGeneralSettings.migrateCharsetSettingsTo(defaultManager);
      myEditorSettings.migrateCharsetSettingsTo(defaultManager);
    }
  }
  myModificationCount++;
}
