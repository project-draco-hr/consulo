{
  ApplicationManager.getApplication().assertIsDispatchThread();
  FileDocumentManager.getInstance().saveAllDocuments();
  final Map<VirtualFile,Charset> newMap=new HashMap<VirtualFile,Charset>(mapping.size());
  final Map<VirtualFile,Charset> oldMap=new HashMap<VirtualFile,Charset>(myMapping);
  suppressReloadDuring(new Runnable(){
    @Override public void run(){
      ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
      for (      Map.Entry<VirtualFile,Charset> entry : mapping.entrySet()) {
        VirtualFile virtualFile=entry.getKey();
        Charset charset=entry.getValue();
        if (charset == null)         throw new IllegalArgumentException("Null charset for " + virtualFile + "; mapping: "+ mapping);
        if (virtualFile != null) {
          if (!fileIndex.isInContent(virtualFile))           continue;
          if (!virtualFile.isDirectory() && !Comparing.equal(charset,oldMap.get(virtualFile))) {
            Document document;
            byte[] bytes;
            try {
              document=FileDocumentManager.getInstance().getDocument(virtualFile);
              if (document == null)               throw new IOException();
              bytes=virtualFile.contentsToByteArray();
            }
 catch (            IOException e) {
              continue;
            }
            boolean changed=new ChangeFileEncodingAction().chosen(document,null,virtualFile,bytes,charset);
            if (!changed)             continue;
          }
        }
        newMap.put(virtualFile,charset);
      }
    }
  }
);
  myMapping.clear();
  myMapping.putAll(newMap);
  final Set<VirtualFile> changed=new HashSet<VirtualFile>(oldMap.keySet());
  for (  VirtualFile newFile : newMap.keySet()) {
    if (Comparing.equal(oldMap.get(newFile),newMap.get(newFile)))     changed.remove(newFile);
  }
  Set<VirtualFile> added=new HashSet<VirtualFile>(newMap.keySet());
  added.removeAll(oldMap.keySet());
  Set<VirtualFile> removed=new HashSet<VirtualFile>(oldMap.keySet());
  removed.removeAll(newMap.keySet());
  changed.addAll(added);
  changed.addAll(removed);
  changed.remove(null);
  if (!changed.isEmpty()) {
    final Processor<VirtualFile> reloadProcessor=createChangeCharsetProcessor();
    tryStartReloadWithProgress(new Runnable(){
      @Override public void run(){
        Set<VirtualFile> processed=new THashSet<VirtualFile>();
        next:         for (        VirtualFile changedFile : changed) {
          for (          VirtualFile processedFile : processed) {
            if (VfsUtilCore.isAncestor(processedFile,changedFile,false))             continue next;
          }
          processSubFiles(changedFile,reloadProcessor);
          processed.add(changedFile);
        }
      }
    }
);
  }
  myModificationTracker.incModificationCount();
}
