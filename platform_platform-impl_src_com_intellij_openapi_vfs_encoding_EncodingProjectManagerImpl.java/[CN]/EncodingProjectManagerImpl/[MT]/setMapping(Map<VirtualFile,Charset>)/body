{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final Map<VirtualFile,Charset> map=new HashMap<VirtualFile,Charset>(result.size());
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  for (  Map.Entry<VirtualFile,Charset> entry : result.entrySet()) {
    VirtualFile virtualFile=entry.getKey();
    Charset charset=entry.getValue();
    if (virtualFile != null && !fileIndex.isInContent(virtualFile)) {
      continue;
    }
    Pair<Charset,String> check=virtualFile == null || virtualFile.isDirectory() ? null : ChooseFileEncodingAction.checkCanReload(virtualFile);
    String failReason=check == null ? null : check.second;
    boolean enabled=failReason == null;
    if (!enabled) {
      continue;
    }
    map.put(virtualFile,charset);
  }
  final Map<VirtualFile,Charset> oldMapping=new HashMap<VirtualFile,Charset>(myMapping);
  myMapping.clear();
  myMapping.putAll(map);
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      Set<VirtualFile> changed=new HashSet<VirtualFile>(map.keySet());
      changed.addAll(oldMapping.keySet());
      for (      VirtualFile changedFile : changed) {
        Charset newCharset=map.get(changedFile);
        Charset oldCharset=oldMapping.get(changedFile);
        if (!Comparing.equal(newCharset,oldCharset)) {
          reloadDir(changedFile,newCharset);
        }
      }
    }
  }
,"Reload Files",false,myProject);
  myModificationCount++;
}
