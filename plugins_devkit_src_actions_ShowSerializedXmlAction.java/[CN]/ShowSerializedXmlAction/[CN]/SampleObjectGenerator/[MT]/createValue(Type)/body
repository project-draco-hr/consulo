{
  final Class<?> valueClass=type instanceof Class ? (Class<Object>)type : (Class<Object>)((ParameterizedType)type).getRawType();
  if (String.class.isAssignableFrom(valueClass)) {
    return "value" + (myNum++);
  }
 else   if (byte.class.isAssignableFrom(valueClass) || Byte.class.isAssignableFrom(valueClass) || short.class.isAssignableFrom(valueClass)|| Short.class.isAssignableFrom(valueClass)|| int.class.isAssignableFrom(valueClass)|| Integer.class.isAssignableFrom(valueClass)|| long.class.isAssignableFrom(valueClass)|| Long.class.isAssignableFrom(valueClass)) {
    return myNum++ % 127;
  }
 else   if (double.class.isAssignableFrom(valueClass) || Double.class.isAssignableFrom(valueClass) || float.class.isAssignableFrom(valueClass)|| Float.class.isAssignableFrom(valueClass)) {
    return 0.5 + myNum++;
  }
 else   if (boolean.class.isAssignableFrom(valueClass) || Boolean.class.isAssignableFrom(valueClass)) {
    return (myNum++ % 2) == 0;
  }
 else   if (valueClass.isEnum()) {
    final Object[] constants=valueClass.getEnumConstants();
    return constants[(myNum++) % constants.length];
  }
 else   if (Collection.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) {
    return createCollection(valueClass,(ParameterizedType)type);
  }
 else   if (Map.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) {
    return createMap((ParameterizedType)type);
  }
 else   if (valueClass.isArray()) {
    return createArray(valueClass);
  }
 else {
    return createObject(valueClass);
  }
}
