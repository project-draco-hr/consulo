{
  indicator.checkCanceled();
  List<InlineChunk> words1=getInlineChunks(text1);
  List<InlineChunk> words2=getInlineChunks(text2);
  FairDiffIterable wordChanges=diff(words1,words2,indicator);
  FairDiffIterable correctedWordChanges=preferBigChunks(words1,words2,wordChanges,indicator);
  List<WordBlock> wordBlocks=new LineFragmentSplitter(text1,text2,words1,words2,correctedWordChanges,indicator).run();
  List<LineBlock> lineBlocks=new ArrayList<LineBlock>(wordBlocks.size());
  for (  WordBlock block : wordBlocks) {
    Range offsets=block.offsets;
    Range words=block.words;
    CharSequence subtext1=text1.subSequence(offsets.start1,offsets.end1);
    CharSequence subtext2=text2.subSequence(offsets.start2,offsets.end2);
    List<InlineChunk> subwords1=words1.subList(words.start1,words.end1);
    List<InlineChunk> subwords2=words2.subList(words.start2,words.end2);
    FairDiffIterable subiterable=fair(trim(correctedWordChanges,words.start1,words.end1,words.start2,words.end2));
    FairDiffIterable delimitersIterable=matchAdjustmentDelimiters(subtext1,subtext2,subwords1,subwords2,subiterable,offsets.start1,offsets.start2,indicator);
    DiffIterable iterable=matchAdjustmentWhitespaces(subtext1,subtext2,delimitersIterable,policy,indicator);
    List<DiffFragment> fragments=convertIntoFragments(iterable);
    int newlines1=countNewlines(subwords1);
    int newlines2=countNewlines(subwords2);
    lineBlocks.add(new LineBlock(fragments,offsets,newlines1,newlines2));
  }
  return lineBlocks;
}
