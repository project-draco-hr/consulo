{
  List<Range> newRanges=new ArrayList<Range>();
  for (  Range range : iterable.iterateUnchanged()) {
    if (newRanges.size() == 0) {
      newRanges.add(range);
      continue;
    }
    Range lastRange=newRanges.get(newRanges.size() - 1);
    boolean canMergeLeft=true;
    int count=range.end1 - range.start1;
    for (int i=0; i < count; i++) {
      InlineChunk word1=words1.get(lastRange.end1 + i);
      InlineChunk word2=words2.get(lastRange.end2 + i);
      if (!word1.equals(word2)) {
        canMergeLeft=false;
        break;
      }
    }
    if (canMergeLeft) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(lastRange.start1,lastRange.end1 + count,lastRange.start2,lastRange.end2 + count));
      continue;
    }
    boolean canMergeRight=true;
    int lastCount=lastRange.end1 - lastRange.start1;
    for (int i=0; i < lastCount; i++) {
      InlineChunk word1=words1.get(range.start1 - i - 1);
      InlineChunk word2=words2.get(range.start2 - i - 1);
      if (!word1.equals(word2)) {
        canMergeRight=false;
        break;
      }
    }
    if (canMergeRight) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range.start1 - lastCount,range.end1,range.start2 - lastCount,range.end2));
      continue;
    }
    newRanges.add(range);
  }
  return fair(createUnchanged(newRanges,words1.size(),words2.size()));
}
