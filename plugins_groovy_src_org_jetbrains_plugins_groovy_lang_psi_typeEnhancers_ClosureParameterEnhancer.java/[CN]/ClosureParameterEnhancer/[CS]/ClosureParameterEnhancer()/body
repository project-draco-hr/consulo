{
  simpleTypes.put("times","java.lang.Integer");
  simpleTypes.put("upto","java.lang.Integer");
  simpleTypes.put("downto","java.lang.Integer");
  simpleTypes.put("step","java.lang.Integer");
  simpleTypes.put("withObjectOutputStream","java.io.ObjectOutputStream");
  simpleTypes.put("withObjectInputStream","java.io.ObjectInputStream");
  simpleTypes.put("withOutputStream","java.io.OutputStream");
  simpleTypes.put("withInputStream","java.io.InputStream");
  simpleTypes.put("withDataOutputStream","java.io.DataOutputStream");
  simpleTypes.put("withDataInputStream","java.io.DataInputStream");
  simpleTypes.put("eachLine","java.lang.String");
  simpleTypes.put("eachFile","java.io.File");
  simpleTypes.put("eachDir","java.io.File");
  simpleTypes.put("eachFileRecurse","java.io.File");
  simpleTypes.put("traverse","java.io.File");
  simpleTypes.put("eachDirRecurse","java.io.File");
  simpleTypes.put("eachFileMatch","java.io.File");
  simpleTypes.put("eachDirMatch","java.io.File");
  simpleTypes.put("withReader","java.io.Reader");
  simpleTypes.put("withWriter","java.io.Writer");
  simpleTypes.put("withWriterAppend","java.io.Writer");
  simpleTypes.put("withPrintWriter","java.io.PrintWriter");
  simpleTypes.put("eachByte","byte");
  simpleTypes.put("transformChar","String");
  simpleTypes.put("transformLine","String");
  simpleTypes.put("filterLine","String");
  simpleTypes.put("accept","java.net.Socket");
  iterations.add("each");
  iterations.add("any");
  iterations.add("every");
  iterations.add("reverseEach");
  iterations.add("collect");
  iterations.add("collectAll");
  iterations.add("collectEntries");
  iterations.add("find");
  iterations.add("findAll");
  iterations.add("retainAll");
  iterations.add("removeAll");
  iterations.add("split");
  iterations.add("groupBy");
  iterations.add("groupEntriesBy");
  iterations.add("findLastIndexOf");
  iterations.add("findIndexValues");
  iterations.add("findIndexOf");
  iterations.add("count");
}
