{
  final String targetClassName=getTargetClassName();
  PsiClass newClass=myDefaultTargetClass;
  if (myDefaultTargetClass == null || !targetClassName.isEmpty() && !Comparing.strEqual(targetClassName,myDefaultTargetClass.getQualifiedName())) {
    final Module module=ModuleUtilCore.findModuleForPsiElement(myContext.getPlace());
    newClass=JavaPsiFacade.getInstance(myContext.getProject()).findClass(targetClassName,GlobalSearchScope.projectScope(myContext.getProject()));
    if (newClass == null && Messages.showOkCancelDialog(myContext.getProject(),GroovyRefactoringBundle.message("class.does.not.exist.in.the.module"),IntroduceConstantHandler.REFACTORING_NAME,Messages.getErrorIcon()) != OK_EXIT_CODE) {
      return;
    }
    myTargetClassInfo=new TargetClassInfo(targetClassName,myContext.getPlace().getContainingFile().getContainingDirectory(),module,myContext.getProject());
  }
  JavaRefactoringSettings.getInstance().INTRODUCE_CONSTANT_VISIBILITY=getVisibilityModifier();
  RecentsManager.getInstance(myContext.getProject()).registerRecentEntry(RECENTS_KEY,targetClassName);
  super.doOKAction();
}
