{
  myTargetClassEditor=new ReferenceEditorComboWithBrowseButton(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      TreeClassChooser chooser=TreeClassChooserFactory.getInstance(myContext.project).createWithInnerClassesScopeChooser(RefactoringBundle.message("choose.destination.class"),GlobalSearchScope.projectScope(myContext.project),new ClassFilter(){
        public boolean isAccepted(        PsiClass aClass){
          return aClass.getParent() instanceof PsiJavaFile || aClass.hasModifierProperty(PsiModifier.STATIC);
        }
      }
,null);
      if (myTargetClass != null) {
        chooser.selectDirectory(myTargetClass.getContainingFile().getContainingDirectory());
      }
      chooser.showDialog();
      PsiClass aClass=chooser.getSelected();
      if (aClass != null) {
        myTargetClassEditor.setText(aClass.getQualifiedName());
      }
    }
  }
,"",PsiManager.getInstance(myContext.project),true,RECENTS_KEY);
  if (myDefaultTargetClass != null) {
    myTargetClassEditor.setText(myDefaultTargetClass.getQualifiedName());
  }
  myTargetClassPanel.setLayout(new BorderLayout());
  myTargetClassPanel.add(myTargetClassLabel,BorderLayout.NORTH);
  myTargetClassPanel.add(myTargetClassEditor,BorderLayout.CENTER);
  Set<String> possibleClassNames=new LinkedHashSet<String>();
  for (  final PsiElement occurrence : myContext.occurrences) {
    final PsiClass parentClass=GrIntroduceConstantHandler.getParentClass(occurrence);
    if (parentClass != null && parentClass.getQualifiedName() != null) {
      possibleClassNames.add(parentClass.getQualifiedName());
    }
  }
  for (  String possibleClassName : possibleClassNames) {
    myTargetClassEditor.prependItem(possibleClassName);
  }
  myTargetClassEditor.getChildComponent().addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      targetClassChanged();
      updateOkStatus();
    }
  }
);
}
