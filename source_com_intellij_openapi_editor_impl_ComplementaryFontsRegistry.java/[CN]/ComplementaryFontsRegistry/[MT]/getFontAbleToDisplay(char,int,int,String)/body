{
  ourSharedKeyInstance.myFamilyName=defaultFontFamily;
  ourSharedKeyInstance.mySize=size;
  ourSharedKeyInstance.myStyle=style;
  FontInfo defaultFont=ourUsedFonts.get(ourSharedKeyInstance);
  if (defaultFont == null) {
    defaultFont=new FontInfo(defaultFontFamily,size,style);
    ourUsedFonts.put(ourSharedKeyInstance,defaultFont);
    ourSharedKeyInstance=new FontKey(null,0,0);
  }
  if (defaultFont.canDisplay(c)) {
    return defaultFont;
  }
  final Collection<FontInfo> descriptors=ourUsedFonts.values();
  for (Iterator<FontInfo> iterator=descriptors.iterator(); iterator.hasNext(); ) {
    FontInfo font=iterator.next();
    if (font.getSize() == size && font.getStyle() == style && font.canDisplay(c)) {
      return font;
    }
  }
  for (int i=0; i < ourFontNames.size(); i++) {
    String name=ourFontNames.get(i);
    FontInfo font=new FontInfo(name,size,style);
    if (font.canDisplay(c)) {
      ourUsedFonts.put(new FontKey(name,size,style),font);
      ourFontNames.remove(i);
      return font;
    }
  }
  return defaultFont;
}
