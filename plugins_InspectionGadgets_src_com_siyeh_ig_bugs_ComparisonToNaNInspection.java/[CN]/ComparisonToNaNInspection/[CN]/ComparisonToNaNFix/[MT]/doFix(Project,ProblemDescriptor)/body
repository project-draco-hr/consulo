{
  final PsiReferenceExpression NaNExpression=(PsiReferenceExpression)descriptor.getPsiElement();
  final String typeString=NaNExpression.getQualifier().getText();
  final PsiBinaryExpression comparison=(PsiBinaryExpression)NaNExpression.getParent();
  final PsiExpression qualifier;
  final PsiExpression lhs=comparison.getLOperand();
  final PsiExpression rhs=comparison.getROperand();
  if (NaNExpression.equals(lhs)) {
    qualifier=rhs;
  }
 else {
    qualifier=lhs;
  }
  final String qualifierText=qualifier.getText();
  final PsiJavaToken sign=comparison.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  final String negationString;
  if (tokenType.equals(JavaTokenType.EQEQ)) {
    negationString="";
  }
 else {
    negationString="!";
  }
  final String newExpressionText=negationString + typeString + ".isNaN("+ qualifierText+ ')';
  replaceExpression(comparison,newExpressionText);
}
