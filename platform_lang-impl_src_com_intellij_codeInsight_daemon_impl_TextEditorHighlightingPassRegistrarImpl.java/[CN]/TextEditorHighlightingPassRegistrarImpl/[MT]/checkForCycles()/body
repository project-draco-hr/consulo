{
  final TIntObjectHashMap<TIntHashSet> transitivePredecessors=new TIntObjectHashMap<TIntHashSet>();
  myRegisteredPassFactories.forEachEntry(new TIntObjectProcedure<PassConfig>(){
    @Override public boolean execute(    int passId,    PassConfig config){
      TIntHashSet allPredecessors=new TIntHashSet(config.completionPredecessorIds);
      allPredecessors.addAll(config.startingPredecessorIds);
      transitivePredecessors.put(passId,allPredecessors);
      allPredecessors.forEach(new TIntProcedure(){
        @Override public boolean execute(        int predecessorId){
          PassConfig predecessor=myRegisteredPassFactories.get(predecessorId);
          if (predecessor == null)           return true;
          TIntHashSet transitives=transitivePredecessors.get(predecessorId);
          if (transitives == null) {
            transitives=new TIntHashSet();
            transitivePredecessors.put(predecessorId,transitives);
          }
          transitives.addAll(predecessor.completionPredecessorIds);
          transitives.addAll(predecessor.startingPredecessorIds);
          return true;
        }
      }
);
      return true;
    }
  }
);
  transitivePredecessors.forEachKey(new TIntProcedure(){
    @Override public boolean execute(    int passId){
      if (transitivePredecessors.get(passId).contains(passId)) {
        throw new IllegalArgumentException("There is a cycle introduced involving pass " + myRegisteredPassFactories.get(passId).passFactory);
      }
      return true;
    }
  }
);
}
