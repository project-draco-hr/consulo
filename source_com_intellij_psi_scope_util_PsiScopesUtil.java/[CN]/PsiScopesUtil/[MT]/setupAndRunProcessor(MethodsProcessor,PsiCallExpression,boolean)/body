{
  if (call instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)call;
    final PsiJavaCodeReferenceElement ref=methodCall.getMethodExpression();
    processor.setArgumentList(methodCall.getArgumentList());
    processor.obtainTypeArguments(methodCall);
    if (!ref.isQualified() || ref.getReferenceNameElement() instanceof PsiKeyword) {
      final PsiElement referenceNameElement=ref.getReferenceNameElement();
      if (referenceNameElement == null)       return;
      if (referenceNameElement instanceof PsiKeyword) {
        final PsiKeyword keyword=(PsiKeyword)referenceNameElement;
        if (keyword.getTokenType() == JavaTokenType.THIS_KEYWORD) {
          final PsiClass aClass=JavaResolveUtil.getContextClass(methodCall);
          if (aClass == null) {
            throw new MethodProcessorSetupFailedException("Can't resolve class for this expression");
          }
          processor.setIsConstructor(true);
          processor.setAccessClass(aClass);
          aClass.processDeclarations(processor,ResolveState.initial(),null,call);
          if (dummyImplicitConstructor) {
            processDummyConstructor(processor,aClass);
          }
        }
 else         if (keyword.getTokenType() == JavaTokenType.SUPER_KEYWORD) {
          PsiClass aClass=JavaResolveUtil.getContextClass(methodCall);
          if (aClass == null) {
            throw new MethodProcessorSetupFailedException("Can't resolve class for super expression");
          }
          final PsiClass superClass=aClass.getSuperClass();
          if (superClass != null) {
            PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
            PsiClass runSuper=superClass;
            do {
              if (runSuper != null) {
                PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(runSuper,aClass,PsiSubstitutor.EMPTY);
                substitutor=substitutor.putAll(superSubstitutor);
              }
              if (aClass.hasModifierProperty(PsiModifier.STATIC))               break;
              aClass=JavaResolveUtil.getContextClass(aClass);
              if (aClass != null)               runSuper=aClass.getSuperClass();
            }
 while (aClass != null);
            processor.setIsConstructor(true);
            processor.setAccessClass(null);
            final PsiMethod[] constructors=superClass.getConstructors();
            ResolveState state=ResolveState.initial().put(PsiSubstitutor.KEY,substitutor);
            for (            PsiMethod constructor : constructors) {
              if (!processor.execute(constructor,state))               return;
            }
            if (dummyImplicitConstructor)             processDummyConstructor(processor,superClass);
          }
        }
 else {
          LOG.assertTrue(false,"Unknown name element " + referenceNameElement + " in reference "+ ref.getText()+ "("+ ref+ ")");
        }
      }
 else       if (referenceNameElement instanceof PsiIdentifier) {
        processor.setIsConstructor(false);
        processor.setName(referenceNameElement.getText());
        processor.setAccessClass(null);
        resolveAndWalk(processor,ref,null);
      }
 else {
        LOG.assertTrue(false,"Unknown name element " + referenceNameElement + " in reference "+ ref.getText()+ "("+ ref+ ")");
      }
    }
 else {
      final PsiElement referenceName=methodCall.getMethodExpression().getReferenceNameElement();
      final PsiManager manager=call.getManager();
      final PsiElement qualifier=ref.getQualifier();
      if (referenceName instanceof PsiIdentifier && qualifier instanceof PsiExpression) {
        PsiType type=((PsiExpression)qualifier).getType();
        if (type == null) {
          if (qualifier instanceof PsiJavaCodeReferenceElement) {
            final JavaResolveResult result=((PsiJavaCodeReferenceElement)qualifier).advancedResolve(false);
            if (result.getElement() instanceof PsiClass) {
              processor.handleEvent(PsiScopeProcessor.Event.START_STATIC,null);
              processQualifierResult(result,processor,methodCall);
            }
          }
 else {
            throw new MethodProcessorSetupFailedException("Cant determine qualifier type!");
          }
        }
 else         if (type instanceof PsiIntersectionType) {
          final PsiType[] conjuncts=((PsiIntersectionType)type).getConjuncts();
          for (          PsiType conjunct : conjuncts) {
            if (!processQualifierType(conjunct,processor,manager,methodCall))             break;
          }
        }
 else {
          processQualifierType(type,processor,manager,methodCall);
        }
      }
 else {
        LOG.assertTrue(false);
      }
    }
  }
 else {
    LOG.assertTrue(call instanceof PsiNewExpression);
    PsiNewExpression newExpr=(PsiNewExpression)call;
    PsiJavaCodeReferenceElement classRef=newExpr.getClassOrAnonymousClassReference();
    if (classRef == null) {
      throw new MethodProcessorSetupFailedException("Cant get reference to class in new expression");
    }
    final JavaResolveResult result=classRef.advancedResolve(false);
    PsiClass aClass=(PsiClass)result.getElement();
    if (aClass == null)     throw new MethodProcessorSetupFailedException("Cant resolve class in new expression");
    processor.setIsConstructor(true);
    processor.setAccessClass(aClass);
    processor.setArgumentList(newExpr.getArgumentList());
    processor.obtainTypeArguments(newExpr);
    aClass.processDeclarations(processor,ResolveState.initial().put(PsiSubstitutor.KEY,result.getSubstitutor()),null,call);
    if (dummyImplicitConstructor) {
      processDummyConstructor(processor,aClass);
    }
  }
}
