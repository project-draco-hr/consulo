{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  LOG.assertTrue(!myInsideCommit,"Recursive commit");
  try {
    myInsideCommit=true;
    Set<Facet> toRemove=new HashSet<Facet>(Arrays.asList(getAllFacets()));
    List<Facet> toAdd=new ArrayList<Facet>();
    for (    Facet facet : model.getAllFacets()) {
      boolean isNew=!toRemove.remove(facet);
      if (isNew) {
        toAdd.add(facet);
      }
    }
    List<Facet> newFacets=new ArrayList<Facet>();
    for (    Facet facet : getAllFacets()) {
      if (!toRemove.contains(facet)) {
        newFacets.add(facet);
      }
    }
    newFacets.addAll(toAdd);
    List<Pair<Facet,String>> toRename=new ArrayList<Pair<Facet,String>>();
    for (    Facet facet : newFacets) {
      final String newName=model.getNewName(facet);
      if (newName != null && !newName.equals(facet.getName())) {
        toRename.add(Pair.create(facet,newName));
      }
    }
    for (    Facet facet : toAdd) {
      myDispatcher.getMulticaster().beforeFacetAdded(facet);
    }
    for (    Facet facet : toRemove) {
      myDispatcher.getMulticaster().beforeFacetRemoved(facet);
    }
    for (    Pair<Facet,String> pair : toRename) {
      myDispatcher.getMulticaster().beforeFacetRenamed(pair.getFirst());
    }
    for (    Pair<Facet,String> pair : toRename) {
      pair.getFirst().setName(pair.getSecond());
    }
    myModel.setAllFacets(newFacets.toArray(new Facet[newFacets.size()]));
    for (    Facet facet : toAdd) {
      facet.initFacet();
    }
    for (    Facet facet : toRemove) {
      Disposer.dispose(facet);
    }
    for (    Facet facet : toAdd) {
      myDispatcher.getMulticaster().facetAdded(facet);
    }
    for (    Facet facet : toRemove) {
      myDispatcher.getMulticaster().facetRemoved(facet);
    }
    for (    Pair<Facet,String> pair : toRename) {
      myDispatcher.getMulticaster().facetRenamed(pair.getFirst());
    }
  }
  finally {
    myInsideCommit=false;
  }
}
