{
  int maxAutopopupItems=10;
  JPanel pane=new JPanel(new GridBagLayout());
  pane.setBackground(HintUtil.INFORMATION_COLOR);
  final Font editorFont=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
  final List<LookupElement> items=getItems();
  for (int i=0; i < Math.min(maxAutopopupItems,items.size()); i++) {
    LookupElement element=items.get(i);
    final LookupElementPresentation presentation=new LookupElementPresentation();
    element.renderElement(presentation);
{
      final GridBagConstraints c=new GridBagConstraints();
      c.gridx=0;
      c.gridy=i;
      c.ipadx=itemTextPadding;
      c.fill=GridBagConstraints.HORIZONTAL;
      final SimpleColoredComponent comp=new SimpleColoredComponent();
      comp.setFont(editorFont);
      final int style=presentation.isItemTextBold() ? Font.BOLD : Font.PLAIN;
      myCellRenderer.renderItemName(element,LookupCellRenderer.FOREGROUND_COLOR,false,style,StringUtil.notNullize(presentation.getItemText()),comp);
      final JPanel p1=new JPanel(new BorderLayout());
      p1.setBackground(pane.getBackground());
      p1.add(comp,BorderLayout.WEST);
      final JLabel label=new JLabel(presentation.getTailText());
      label.setFont(label.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
      p1.add(label,BorderLayout.CENTER);
      pane.add(p1,c);
    }
{
      final GridBagConstraints c=new GridBagConstraints();
      c.gridx=1;
      c.gridy=i;
      c.ipadx=4;
      c.fill=GridBagConstraints.HORIZONTAL;
      final JLabel comp=new JLabel(" " + StringUtil.notNullize(presentation.getTypeText()));
      comp.setFont(comp.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
      comp.setAlignmentX(Component.RIGHT_ALIGNMENT);
      pane.add(comp,c);
    }
  }
  if (items.size() > maxAutopopupItems) {
{
      final GridBagConstraints c=new GridBagConstraints();
      c.gridx=0;
      c.gridy=maxAutopopupItems;
      c.gridwidth=2;
      c.ipadx=5;
      c.ipady=2;
      c.fill=GridBagConstraints.HORIZONTAL;
      final String moreText=" ... (" + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION)) + " for more suggestions)";
      pane.add(new JLabel(moreText),c);
    }
  }
  pane.setBorder(new LineBorder(Color.darkGray,borderWidth));
  return pane;
}
