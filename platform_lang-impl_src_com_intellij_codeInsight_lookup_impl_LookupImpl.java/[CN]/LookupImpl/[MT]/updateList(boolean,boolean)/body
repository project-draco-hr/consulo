{
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    ApplicationManager.getApplication().assertIsDispatchThread();
  }
  checkValid();
  CollectionListModel<LookupElement> listModel=getListModel();
  Pair<List<LookupElement>,Integer> pair;
synchronized (myList) {
    pair=myPresentableArranger.arrangeItems(this,onExplicitAction || reused);
  }
  List<LookupElement> items=pair.first;
  Integer toSelect=pair.second;
  if (toSelect == null || toSelect < 0 || items.size() > 0 && toSelect >= items.size()) {
    LOG.error("Arranger " + myPresentableArranger + " returned invalid selection index="+ toSelect+ "; items="+ items);
    toSelect=0;
  }
  myOffsets.checkMinPrefixLengthChanges(items,this);
  List<LookupElement> oldModel=listModel.toList();
  listModel.removeAll();
  if (!items.isEmpty()) {
    listModel.add(items);
  }
 else {
    addEmptyItem(listModel);
  }
  updateListHeight(listModel);
  myList.setSelectedIndex(toSelect);
  return !ContainerUtil.equalsIdentity(oldModel,items);
}
