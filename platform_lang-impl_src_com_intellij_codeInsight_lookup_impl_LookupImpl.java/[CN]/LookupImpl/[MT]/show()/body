{
  ApplicationManager.getApplication().assertIsDispatchThread();
  LOG.assertTrue(!myDisposed);
  LOG.assertTrue(!myShown);
  myShown=true;
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      if (!myChangeGuard) {
        hide();
      }
    }
  }
,this);
  myEditorCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      caretOrSelectionChanged();
    }
  }
;
  myEditorSelectionListener=new SelectionListener(){
    public void selectionChanged(    final SelectionEvent e){
      caretOrSelectionChanged();
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditor.getSelectionModel().addSelectionListener(myEditorSelectionListener);
  myEditorMouseListener=new EditorMouseAdapter(){
    public void mouseClicked(    EditorMouseEvent e){
      e.consume();
      hide();
    }
  }
;
  myEditor.addEditorMouseListener(myEditorMouseListener);
  myList.addListSelectionListener(new ListSelectionListener(){
    private LookupElement oldItem=null;
    public void valueChanged(    ListSelectionEvent e){
      LookupElement item=getCurrentItem();
      if (oldItem != item) {
        mySelectionInvariant=item == null ? null : myModel.getItemPresentationInvariant(item);
        fireCurrentItemChanged(item);
      }
      oldItem=item;
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      setFocused(true);
      final Point point=e.getPoint();
      final int i=myList.locationToIndex(point);
      if (i >= 0) {
        final LookupElement selected=(LookupElement)myList.getModel().getElementAt(i);
        if (selected != null && e.getClickCount() == 1 && point.x >= myList.getCellBounds(i,i).width - PopupIcons.EMPTY_ICON.getIconWidth() && ShowLookupActionsHandler.showItemActions(LookupImpl.this,selected)) {
          return;
        }
      }
      if (e.getClickCount() == 2) {
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            finishLookup(NORMAL_SELECT_CHAR);
          }
        }
,"",null);
      }
    }
  }
);
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  getComponent().setBorder(null);
  Point p=calculatePosition();
  HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();
  hintManager.showEditorHint(this,myEditor,p,HintManagerImpl.HIDE_BY_ESCAPE | HintManagerImpl.UPDATE_BY_SCROLLING,0,false);
  myShownStamp=System.currentTimeMillis();
}
