{
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    ApplicationManager.getApplication().assertIsDispatchThread();
  }
  checkValid();
  final Pair<List<LookupElement>,Iterable<List<LookupElement>>> snapshot=myModel.getModelSnapshot();
  final LinkedHashSet<LookupElement> items=matchingItems(snapshot);
  checkMinPrefixLengthChanges(items);
  boolean hasPreselected=!mySelectionTouched && items.contains(myPreselectedItem);
  LookupElement oldSelected=mySelectionTouched ? (LookupElement)myList.getSelectedValue() : null;
  String oldInvariant=mySelectionInvariant;
  LinkedHashSet<LookupElement> model=new LinkedHashSet<LookupElement>();
  model.addAll(getPrefixItems(items,true));
  model.addAll(getPrefixItems(items,false));
  myFrozenItems.retainAll(items);
  model.addAll(myFrozenItems);
  if (!isAlphaSorted()) {
    addMostRelevantItems(model,snapshot.second);
    if (hasPreselected) {
      model.add(myPreselectedItem);
    }
  }
  myPreferredItemsCount=model.size();
  myFrozenItems.clear();
  if (myShown) {
    myFrozenItems.addAll(model);
  }
  if (isAlphaSorted()) {
    model.addAll(items);
  }
 else   if (limitRelevance()) {
    model.addAll(addRemainingItemsLexicographically(model,items));
  }
 else {
    for (    List<LookupElement> group : snapshot.second) {
      for (      LookupElement element : group) {
        if (prefixMatches(element)) {
          model.add(element);
        }
      }
    }
  }
  DefaultListModel listModel=(DefaultListModel)myList.getModel();
synchronized (myList) {
    listModel.clear();
    if (!model.isEmpty()) {
      for (      LookupElement element : model) {
        listModel.addElement(element);
      }
    }
 else {
      addEmptyItem(listModel);
    }
  }
  updateListHeight(listModel);
  if (!model.isEmpty()) {
    myList.setFixedCellWidth(Math.max(myLookupTextWidth + myCellRenderer.getIconIndent(),myAdComponent.getAdComponent().getPreferredSize().width));
    LookupElement first=model.iterator().next();
    if (isFocused() && (!(isExactPrefixItem(first,true) || isExactPrefixItem(first,false)) || mySelectionTouched)) {
      restoreSelection(oldSelected,hasPreselected,oldInvariant,snapshot.second);
    }
 else {
      myList.setSelectedIndex(0);
    }
  }
}
