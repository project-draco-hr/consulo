{
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    ApplicationManager.getApplication().assertIsDispatchThread();
  }
  if (myReused) {
    myModel.collectGarbage();
    myReused=false;
  }
  final Pair<LinkedHashSet<LookupElement>,List<List<LookupElement>>> snapshot=myModel.getModelSnapshot();
  final LinkedHashSet<LookupElement> items=snapshot.first;
  checkMinPrefixLengthChanges(items);
  LookupElement oldSelected=mySelectionTouched ? (LookupElement)myList.getSelectedValue() : null;
  String oldInvariant=mySelectionInvariant;
  boolean hasExactPrefixes;
  final boolean hasPreselectedItem;
  final boolean hasItems;
  DefaultListModel model=(DefaultListModel)myList.getModel();
  final LookupElement preselectedItem=myPreselectedItem;
synchronized (myList) {
    model.clear();
    Set<LookupElement> firstItems=new THashSet<LookupElement>();
    hasExactPrefixes=addExactPrefixItems(model,firstItems,items);
    addMostRelevantItems(model,firstItems,snapshot.second);
    hasPreselectedItem=items.contains(preselectedItem) && addPreselectedItem(model,firstItems,preselectedItem);
    myPreferredItemsCount=firstItems.size();
    addRemainingItemsLexicographically(model,firstItems,items);
    hasItems=model.getSize() != 0;
    if (!hasItems) {
      addEmptyItem(model);
    }
  }
  updateListHeight(model);
  myAdComponent.setPreferredSize(null);
  myAdComponent.setText(myAdText);
  if (myAdText != null) {
    myAdComponent.setPreferredSize(new Dimension(myAdComponent.getPreferredSize().width,myProcessIcon.getPreferredSize().height));
  }
  if (hasItems) {
    myList.setFixedCellWidth(Math.max(myLookupWidth,myAdComponent.getPreferredSize().width));
    if (isFocused() && !hasExactPrefixes) {
      restoreSelection(oldSelected,hasPreselectedItem,oldInvariant);
    }
 else {
      ListScrollingUtil.selectItem(myList,0);
    }
  }
}
