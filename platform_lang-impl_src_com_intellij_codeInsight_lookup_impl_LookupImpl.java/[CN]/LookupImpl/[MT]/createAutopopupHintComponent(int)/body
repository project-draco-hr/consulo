{
  int maxAutopopupItems=7;
  JPanel pane=new JPanel(new GridBagLayout());
  pane.setBackground(HintUtil.INFORMATION_COLOR);
  final Font editorFont=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
  final String ctrlSpace=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION));
  final String ctrlDown=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction("EditorLookupDown"));
  final String tab=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM_REPLACE));
  final String enter=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM));
  final List<LookupElement> items=getItems();
  GridBag gb=new GridBag().setDefaultFill(GridBagConstraints.HORIZONTAL).setDefaultWeightX(1);
  for (int i=0; i < Math.min(maxAutopopupItems,items.size()); i++) {
    final LookupElement element=items.get(i);
    final LookupElementPresentation presentation=new LookupElementPresentation();
    element.renderElement(presentation);
{
      final GridBagLayout gridBagLayout=new GridBagLayout();
      final JPanel row=new JPanel(gridBagLayout);
      row.setOpaque(false);
      GridBag rgb=new GridBag().setDefaultAnchor(GridBagConstraints.BASELINE);
      final SimpleColoredComponent nameLabel=new SimpleColoredComponent();
      nameLabel.setIpad(new Insets(0,0,0,0));
      nameLabel.setFont(editorFont);
      final int style=presentation.isItemTextBold() ? Font.BOLD : Font.PLAIN;
      myCellRenderer.renderItemName(element,LookupCellRenderer.FOREGROUND_COLOR,false,style,StringUtil.notNullize(presentation.getItemText()),nameLabel);
      nameLabel.setOpaque(false);
      row.add(nameLabel,rgb.next());
      final JLabel tailLabel=normalizedLabel(presentation.getTailText(),editorFont);
      tailLabel.setForeground(LookupCellRenderer.getTailTextColor(false,presentation,tailLabel.getForeground()));
      row.add(tailLabel,rgb.next());
      String keys=i == 0 ? "  [" + tab + (isFocused() ? ", " + enter : "")+ "]" : i == 1 ? "  [" + ctrlDown + "]" : "";
      JLabel adLabel=new JLabel(keys);
      adLabel.setFont(adLabel.getFont().deriveFont(Font.BOLD,editorFont.getSize()));
      row.add(adLabel,rgb.next().weightx(1).fillCellHorizontally());
      row.add(normalizedLabel("   " + StringUtil.notNullize(presentation.getTypeText()) + " ",editorFont),rgb.next());
      if (i == 1) {
        row.setBorder(BorderFactory.createCompoundBorder(new EmptyBorder(5,0,0,0),BorderFactory.createCompoundBorder(new MatteBorder(1,0,0,0,Color.lightGray),new EmptyBorder(5,itemTextPadding,0,0))));
      }
 else {
        row.setBorder(new EmptyBorder(0,itemTextPadding,0,0));
      }
      row.addMouseListener(new MouseAdapter(){
        @Override public void mouseClicked(        MouseEvent e){
          setCurrentItem(element);
          CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
            public void run(){
              finishLookup(NORMAL_SELECT_CHAR);
            }
          }
,"",null);
        }
      }
);
      pane.add(row,gb.nextLine());
    }
  }
  if (items.size() > maxAutopopupItems) {
    final JPanel lastLine=new JPanel(new BorderLayout());
    lastLine.setBorder(new EmptyBorder(4,0,2,0));
    lastLine.setOpaque(false);
    JLabel moreLabel=new JLabel("  " + (items.size() - maxAutopopupItems) + " more...");
    moreLabel.setFont(moreLabel.getFont().deriveFont(Font.ITALIC,editorFont.getSize()));
    lastLine.add(moreLabel,BorderLayout.WEST);
    JLabel keyLabel=new JLabel("  [" + ctrlSpace + "]");
    keyLabel.setFont(keyLabel.getFont().deriveFont(Font.BOLD,editorFont.getSize()));
    lastLine.add(keyLabel);
    pane.add(lastLine,gb.nextLine().padx(5).pady(2).coverColumn());
  }
  return pane;
}
