{
  int maxAutopopupItems=7;
  JPanel pane=new JPanel(new GridBagLayout());
  pane.setBackground(HintUtil.INFORMATION_COLOR);
  final Font editorFont=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
  final List<LookupElement> items=getItems();
  for (int i=0; i < Math.min(maxAutopopupItems,items.size()); i++) {
    LookupElement element=items.get(i);
    final LookupElementPresentation presentation=new LookupElementPresentation();
    element.renderElement(presentation);
{
      final GridBagConstraints c=new GridBagConstraints();
      c.gridx=0;
      c.gridy=i;
      c.ipadx=itemTextPadding;
      c.fill=GridBagConstraints.HORIZONTAL;
{
        final GridBagLayout gridBagLayout=new GridBagLayout();
        final JPanel row=new JPanel(gridBagLayout);
        row.setBackground(pane.getBackground());
        GridBagConstraints c1=new GridBagConstraints();
        c1.anchor=GridBagConstraints.BASELINE;
        final SimpleColoredComponent nameLabel=new SimpleColoredComponent();
        nameLabel.setFont(editorFont);
        final int style=presentation.isItemTextBold() ? Font.BOLD : Font.PLAIN;
        myCellRenderer.renderItemName(element,LookupCellRenderer.FOREGROUND_COLOR,false,style,StringUtil.notNullize(presentation.getItemText()),nameLabel);
        row.add(nameLabel,c1);
        c1=new GridBagConstraints();
        c1.weightx=1;
        c1.anchor=GridBagConstraints.BASELINE;
        c1.fill=GridBagConstraints.HORIZONTAL;
        final JLabel tailLabel=new JLabel(presentation.getTailText());
        tailLabel.setFont(tailLabel.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
        tailLabel.setForeground(LookupCellRenderer.getTailTextColor(false,presentation,tailLabel.getForeground()));
        row.add(tailLabel,c1);
        c1=new GridBagConstraints();
        c1.fill=GridBagConstraints.NONE;
        final JLabel typeLabel=new JLabel("   " + StringUtil.notNullize(presentation.getTypeText()) + " ");
        typeLabel.setFont(typeLabel.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
        row.add(typeLabel,c1);
        pane.add(row,c);
      }
    }
  }
{
    final GridBagConstraints c=new GridBagConstraints();
    c.gridx=0;
    c.gridy=maxAutopopupItems;
    c.gridwidth=2;
    c.ipadx=5;
    c.ipady=2;
    c.fill=GridBagConstraints.HORIZONTAL;
    final JPanel ad=new JPanel(new BorderLayout());
    ad.setBorder(new MatteBorder(1,0,0,0,Color.lightGray));
    ad.setOpaque(false);
    if (items.size() > maxAutopopupItems) {
      final String ctrlSpace=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION));
      if (StringUtil.isNotEmpty(ctrlSpace)) {
        final String moreText=ctrlSpace + " for more";
        final JLabel moreLabel=new JLabel(moreText);
        moreLabel.setFont(moreLabel.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
        ad.add(moreLabel,BorderLayout.WEST);
      }
    }
    final String tab=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM_REPLACE));
    if (StringUtil.isNotEmpty(tab)) {
      final String enter=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM));
      String message=tab + (isFocused() ? ", " + enter : "") + " for the first item";
      final JLabel fstLabel=new JLabel(message);
      fstLabel.setFont(fstLabel.getFont().deriveFont(Font.PLAIN,editorFont.getSize()));
      ad.add(fstLabel,BorderLayout.EAST);
    }
    pane.add(ad,c);
  }
  return pane;
}
