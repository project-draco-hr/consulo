{
  int maxAutopopupItems=7;
  JPanel pane=new JPanel(new GridBagLayout());
  pane.setBackground(HintUtil.INFORMATION_COLOR);
  final Font editorFont=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
  final List<LookupElement> items=getItems();
  GridBag gb=new GridBag().setDefaultFill(GridBagConstraints.HORIZONTAL).setDefaultWeightX(1);
  for (int i=0; i < Math.min(maxAutopopupItems,items.size()); i++) {
    if (i == 1) {
    }
    final LookupElement element=items.get(i);
    final LookupElementPresentation presentation=new LookupElementPresentation();
    element.renderElement(presentation);
{
      final GridBagLayout gridBagLayout=new GridBagLayout();
      final JPanel row=new JPanel(gridBagLayout);
      row.setBackground(pane.getBackground());
      GridBag rgb=new GridBag().setDefaultAnchor(GridBagConstraints.BASELINE);
      final SimpleColoredComponent nameLabel=new SimpleColoredComponent();
      nameLabel.setIpad(new Insets(0,0,0,0));
      nameLabel.setFont(editorFont);
      final int style=presentation.isItemTextBold() ? Font.BOLD : Font.PLAIN;
      myCellRenderer.renderItemName(element,LookupCellRenderer.FOREGROUND_COLOR,false,style,StringUtil.notNullize(presentation.getItemText()),nameLabel);
      row.add(nameLabel,rgb.next());
      final JLabel tailLabel=normalizedLabel(presentation.getTailText(),editorFont);
      tailLabel.setForeground(LookupCellRenderer.getTailTextColor(false,presentation,tailLabel.getForeground()));
      row.add(tailLabel,rgb.next().weightx(1).fillCellHorizontally());
      row.add(normalizedLabel("   " + StringUtil.notNullize(presentation.getTypeText()) + " ",editorFont),rgb.next());
      row.setBorder(new EmptyBorder(0,itemTextPadding,0,0));
      row.addMouseListener(new MouseAdapter(){
        @Override public void mouseClicked(        MouseEvent e){
          setCurrentItem(element);
          CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
            public void run(){
              finishLookup(NORMAL_SELECT_CHAR);
            }
          }
,"",null);
        }
      }
);
      pane.add(row,gb.nextLine());
    }
  }
{
    final JPanel ad=new JPanel(new BorderLayout());
    ad.setBorder(BorderFactory.createCompoundBorder(new MatteBorder(1,0,0,0,Color.lightGray),new EmptyBorder(0,2,0,7)));
    ad.setOpaque(false);
    if (items.size() > maxAutopopupItems) {
      final String ctrlSpace=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION));
      if (StringUtil.isNotEmpty(ctrlSpace)) {
        ad.add(normalizedLabel(ctrlSpace + " for more  ",editorFont),BorderLayout.WEST);
      }
    }
    final String tab=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM_REPLACE));
    if (StringUtil.isNotEmpty(tab)) {
      final String enter=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CHOOSE_LOOKUP_ITEM));
      String message="  " + tab + (isFocused() ? ", " + enter : "")+ " for the first item";
      ad.add(normalizedLabel(message,editorFont),BorderLayout.EAST);
    }
    pane.add(ad,gb.nextLine().padx(5).pady(2).coverColumn());
  }
  return pane;
}
