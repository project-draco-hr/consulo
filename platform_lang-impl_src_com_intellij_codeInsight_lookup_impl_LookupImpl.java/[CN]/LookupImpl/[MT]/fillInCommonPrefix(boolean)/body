{
  if (explicitlyInvoked) {
    setFocused(true);
  }
  if (explicitlyInvoked && myCalculating)   return false;
  if (!explicitlyInvoked && mySelectionTouched)   return false;
  ListModel listModel=getListModel();
  if (listModel.getSize() <= 1)   return false;
  if (listModel.getSize() == 0)   return false;
  final LookupElement firstItem=(LookupElement)listModel.getElementAt(0);
  if (listModel.getSize() == 1 && firstItem instanceof EmptyLookupItem)   return false;
  final PrefixMatcher firstItemMatcher=itemMatcher(firstItem);
  final String oldPrefix=firstItemMatcher.getPrefix();
  final String presentPrefix=oldPrefix + myAdditionalPrefix;
  String commonPrefix=getCaseCorrectedLookupString(firstItem);
  for (int i=1; i < listModel.getSize(); i++) {
    LookupElement item=(LookupElement)listModel.getElementAt(i);
    if (!oldPrefix.equals(itemMatcher(item).getPrefix()))     return false;
    final String lookupString=getCaseCorrectedLookupString(item);
    final int length=Math.min(commonPrefix.length(),lookupString.length());
    if (length < commonPrefix.length()) {
      commonPrefix=commonPrefix.substring(0,length);
    }
    for (int j=0; j < length; j++) {
      if (commonPrefix.charAt(j) != lookupString.charAt(j)) {
        commonPrefix=lookupString.substring(0,j);
        break;
      }
    }
    if (commonPrefix.length() == 0 || commonPrefix.length() < presentPrefix.length()) {
      return false;
    }
  }
  if (commonPrefix.equals(presentPrefix)) {
    return false;
  }
  for (int i=0; i < listModel.getSize(); i++) {
    LookupElement item=(LookupElement)listModel.getElementAt(i);
    if (!itemMatcher(item).cloneWithPrefix(commonPrefix).prefixMatches(item)) {
      return false;
    }
  }
  if (myAdditionalPrefix.length() == 0 && myInitialPrefix == null && !explicitlyInvoked) {
    myInitialPrefix=presentPrefix;
  }
 else {
    myInitialPrefix=null;
  }
  replacePrefix(presentPrefix,commonPrefix);
  return true;
}
