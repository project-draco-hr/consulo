{
  if (explicitlyInvoked) {
    setFocused(true);
  }
  if (explicitlyInvoked && myCalculating)   return false;
  if (!explicitlyInvoked && mySelectionTouched)   return false;
  ListModel listModel=myList.getModel();
  if (listModel.getSize() <= 1)   return false;
  if (listModel.getSize() == 0)   return false;
  final LookupElement firstItem=(LookupElement)listModel.getElementAt(0);
  if (listModel.getSize() == 1 && firstItem instanceof EmptyLookupItem)   return false;
  final PrefixMatcher firstItemMatcher=itemMatcher(firstItem);
  final String oldPrefix=firstItemMatcher.getPrefix();
  final String presentPrefix=oldPrefix + myAdditionalPrefix;
  final PrefixMatcher matcher=firstItemMatcher.cloneWithPrefix(presentPrefix);
  String lookupString=firstItem.getLookupString();
  int div=divideString(lookupString,matcher);
  if (div < 0)   return false;
  String beforeCaret=lookupString.substring(0,div);
  String afterCaret=lookupString.substring(div);
  for (int i=1; i < listModel.getSize(); i++) {
    LookupElement item=(LookupElement)listModel.getElementAt(i);
    if (!oldPrefix.equals(itemMatcher(item).getPrefix()))     return false;
    lookupString=item.getLookupString();
    div=divideString(lookupString,itemMatcher(item).cloneWithPrefix(presentPrefix));
    if (div < 0)     return false;
    String _afterCaret=lookupString.substring(div);
    if (beforeCaret != null) {
      if (div != beforeCaret.length() || !lookupString.startsWith(beforeCaret)) {
        beforeCaret=null;
      }
    }
    while (afterCaret.length() > 0) {
      if (_afterCaret.startsWith(afterCaret)) {
        break;
      }
      afterCaret=afterCaret.substring(0,afterCaret.length() - 1);
    }
    if (afterCaret.length() == 0)     return false;
  }
  if (myAdditionalPrefix.length() == 0 && myInitialPrefix == null && !explicitlyInvoked) {
    myInitialPrefix=presentPrefix;
  }
 else {
    myInitialPrefix=null;
  }
  final String finalBeforeCaret=beforeCaret;
  final String finalAfterCaret=afterCaret;
  Runnable runnable=new Runnable(){
    public void run(){
      doInsertCommonPrefix(presentPrefix,finalBeforeCaret,finalAfterCaret);
    }
  }
;
  performGuardedChange(runnable);
  return true;
}
