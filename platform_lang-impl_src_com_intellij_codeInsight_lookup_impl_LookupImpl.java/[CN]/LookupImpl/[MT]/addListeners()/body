{
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
,this);
  final CaretListener caretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
;
  final SelectionListener selectionListener=new SelectionListener(){
    public void selectionChanged(    final SelectionEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
;
  final EditorMouseListener mouseListener=new EditorMouseAdapter(){
    public void mouseClicked(    EditorMouseEvent e){
      e.consume();
      hide();
    }
  }
;
  myEditor.getCaretModel().addCaretListener(caretListener);
  myEditor.getSelectionModel().addSelectionListener(selectionListener);
  myEditor.addEditorMouseListener(mouseListener);
  Disposer.register(this,new Disposable(){
    @Override public void dispose(){
      myEditor.getCaretModel().removeCaretListener(caretListener);
      myEditor.getSelectionModel().removeSelectionListener(selectionListener);
      myEditor.removeEditorMouseListener(mouseListener);
    }
  }
);
  myList.addListSelectionListener(new ListSelectionListener(){
    private LookupElement oldItem=null;
    public void valueChanged(    ListSelectionEvent e){
      myHintAlarm.cancelAllRequests();
      final LookupElement item=getCurrentItem();
      if (oldItem != item) {
        mySelectionInvariant=item == null ? null : myPresentableModel.getItemPresentationInvariant(item);
        fireCurrentItemChanged(item);
        if (myDisposed) {
          return;
        }
      }
      if (item != null) {
        updateHint(item);
      }
      oldItem=item;
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      setFocused(true);
      markSelectionTouched();
      if (e.getClickCount() == 2) {
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            finishLookup(NORMAL_SELECT_CHAR);
          }
        }
,"",null);
      }
    }
  }
);
}
