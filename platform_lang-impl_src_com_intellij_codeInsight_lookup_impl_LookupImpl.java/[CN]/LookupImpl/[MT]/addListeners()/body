{
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
,this);
  final CaretListener caretListener=new CaretAdapter(){
    @Override public void caretPositionChanged(    CaretEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
;
  final SelectionListener selectionListener=new SelectionListener(){
    @Override public void selectionChanged(    final SelectionEvent e){
      if (!myChangeGuard && !myFinishing) {
        hide();
      }
    }
  }
;
  final EditorMouseListener mouseListener=new EditorMouseAdapter(){
    @Override public void mouseClicked(    EditorMouseEvent e){
      e.consume();
      hide();
    }
  }
;
  myEditor.getCaretModel().addCaretListener(caretListener);
  myEditor.getSelectionModel().addSelectionListener(selectionListener);
  myEditor.addEditorMouseListener(mouseListener);
  Disposer.register(this,new Disposable(){
    @Override public void dispose(){
      myEditor.getCaretModel().removeCaretListener(caretListener);
      myEditor.getSelectionModel().removeSelectionListener(selectionListener);
      myEditor.removeEditorMouseListener(mouseListener);
    }
  }
);
  JComponent editorComponent=myEditor.getContentComponent();
  if (editorComponent.isShowing()) {
    Disposer.register(this,new UiNotifyConnector(editorComponent,new Activatable(){
      @Override public void showNotify(){
      }
      @Override public void hideNotify(){
        hideLookup(false);
      }
    }
));
  }
  myList.addListSelectionListener(new ListSelectionListener(){
    private LookupElement oldItem=null;
    @Override public void valueChanged(    ListSelectionEvent e){
      final LookupElement item=getCurrentItem();
      if (oldItem != item && !myList.isEmpty()) {
        fireCurrentItemChanged(item);
        if (myDisposed) {
          return;
        }
        oldItem=item;
      }
    }
  }
);
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      setFocusDegree(FocusDegree.FOCUSED);
      markSelectionTouched();
      if (clickCount == 2) {
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          @Override public void run(){
            finishLookup(NORMAL_SELECT_CHAR);
          }
        }
,"",null);
      }
      return true;
    }
  }
.installOn(myList);
}
