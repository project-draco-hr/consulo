{
  Dimension dim=component.getPreferredSize();
  int lookupStart=getLookupStart();
  if (lookupStart < 0) {
    LOG.error(lookupStart + "; offset=" + myEditor.getCaretModel().getOffset()+ "; element="+ getPsiElement());
  }
  LogicalPosition pos=myEditor.offsetToLogicalPosition(lookupStart);
  Point location=myEditor.logicalPositionToXY(pos);
  location.y+=myEditor.getLineHeight();
  JComponent editorComponent=myEditor.getComponent();
  JComponent internalComponent=myEditor.getContentComponent();
  final JRootPane rootPane=editorComponent.getRootPane();
  if (rootPane == null) {
    LOG.error(myEditor.isDisposed());
  }
  JLayeredPane layeredPane=rootPane.getLayeredPane();
  Point layeredPanePoint=SwingUtilities.convertPoint(internalComponent,location,layeredPane);
  Point originalPoint=new Point(layeredPanePoint);
  SwingUtilities.convertPointToScreen(originalPoint,layeredPane);
  layeredPanePoint.x-=myCellRenderer.getIconIndent();
  layeredPanePoint.x-=component.getInsets().left;
  int shiftLow=layeredPane.getHeight() - (layeredPanePoint.y + dim.height);
  int shiftHigh=layeredPanePoint.y - dim.height;
  if (!isPositionedAboveCaret()) {
    myPositionedAbove=shiftLow < 0 && shiftLow < shiftHigh;
  }
  if (isPositionedAboveCaret()) {
    layeredPanePoint.y-=dim.height + myEditor.getLineHeight();
    if (pos.line == 0) {
      layeredPanePoint.y+=1;
    }
  }
  final Point painPoint=new Point(layeredPanePoint);
  SwingUtilities.convertPointToScreen(painPoint,layeredPane);
  final Rectangle originScreenRect=ScreenUtil.getScreenRectangle(originalPoint);
  if (!originScreenRect.contains(painPoint)) {
    final Point p=ScreenUtil.findNearestPointOnBorder(originScreenRect,painPoint);
    SwingUtilities.convertPointFromScreen(p,layeredPane);
    return p;
  }
  return layeredPanePoint;
}
