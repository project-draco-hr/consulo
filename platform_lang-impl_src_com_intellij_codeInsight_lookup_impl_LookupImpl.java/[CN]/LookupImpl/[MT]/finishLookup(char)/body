{
  final LookupElement item=(LookupElement)myList.getSelectedValue();
  doHide(false,true);
  if (item == null || item instanceof EmptyLookupItem || item.getObject() instanceof DeferredUserLookupValue && item.as(LookupItem.class) != null && !((DeferredUserLookupValue)item.getObject()).handleUserSelection(item.as(LookupItem.class),myProject)) {
    fireItemSelected(null,completionChar);
    return;
  }
  final PsiFile file=getPsiFile();
  if (file != null && !WriteCommandAction.ensureFilesWritable(myProject,Arrays.asList(file))) {
    fireItemSelected(null,completionChar);
    return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      EditorModificationUtil.deleteSelectedText(myEditor);
      final int caretOffset=myEditor.getCaretModel().getOffset();
      final String prefix=item.getPrefixMatcher().getPrefix();
      int lookupStart=caretOffset - prefix.length() - myAdditionalPrefix.length();
      final String lookupString=item.getLookupString();
      if (!StringUtil.startsWithConcatenationOf(lookupString,prefix,myAdditionalPrefix)) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.camelHumps");
      }
      myEditor.getDocument().replaceString(lookupStart,caretOffset,lookupString);
      int offset=lookupStart + lookupString.length();
      myEditor.getCaretModel().moveToOffset(offset);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      myEditor.getSelectionModel().removeSelection();
    }
  }
);
  fireItemSelected(item,completionChar);
}
