{
  final boolean reused=checkReused();
  updateList();
  final Editor editor=myEditor;
  if (isVisible()) {
    LOG.assertTrue(!ApplicationManager.getApplication().isUnitTestMode());
    if (editor.getComponent().getRootPane() == null) {
      LOG.error("Null root pane");
    }
    updateScrollbarVisibility();
    HintManagerImpl.adjustEditorHintPosition(this,editor,calculatePosition(getComponent()));
    layoutStatusIcons();
    if (reused) {
      ensureSelectionVisible();
    }
  }
 else   if (myHintMode) {
    final int itemTextPadding=2;
    final JPanel hintComponent=createAutopopupHintComponent(itemTextPadding);
    Point bestPoint=calculatePosition(hintComponent);
    bestPoint.x+=myCellRenderer.getIconIndent() - itemTextPadding;
    Point editorPoint=SwingUtilities.convertPoint(editor.getComponent().getRootPane().getLayeredPane(),bestPoint,editor.getContentComponent());
    final HintHint hintHint=new HintHint(editor,editorPoint);
    final HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();
    if (myAutopopupHint == null) {
      final JPanel panel=new JPanel(new BorderLayout());
      panel.add(hintComponent);
      myAutopopupHint=new MyLightweightHint(panel);
      myAutopopupHint.setForceShowAsPopup(true);
      hintManager.showEditorHint(myAutopopupHint,editor,new Point(bestPoint),HintManagerImpl.HIDE_BY_ESCAPE | HintManagerImpl.UPDATE_BY_SCROLLING,0,false,hintHint);
    }
 else {
      final JComponent panel=myAutopopupHint.getComponent();
      panel.remove(0);
      panel.add(hintComponent);
      HintManagerImpl.adjustEditorHintPosition(myAutopopupHint,editor,bestPoint);
    }
  }
}
