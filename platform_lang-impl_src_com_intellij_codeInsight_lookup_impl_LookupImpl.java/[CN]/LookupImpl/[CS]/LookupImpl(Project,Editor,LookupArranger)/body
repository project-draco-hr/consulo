{
  super(new JPanel(new BorderLayout()));
  setForceShowAsPopup(true);
  setCancelOnClickOutside(false);
  setResizable(true);
  AbstractPopup.suppressMacCornerFor(getComponent());
  myProject=project;
  myEditor=editor;
  myArranger=arranger;
  myPresentableArranger=arranger;
  myIconPanel.setVisible(false);
  myCellRenderer=new LookupCellRenderer(this);
  myList.setCellRenderer(myCellRenderer);
  myList.setFocusable(false);
  myList.setFixedCellWidth(50);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setBackground(UIUtil.isUnderDarcula() ? LookupCellRenderer.BACKGROUND_COLOR_DARK_VARIANT : LookupCellRenderer.BACKGROUND_COLOR);
  myList.getExpandableItemsHandler();
  myScrollBarIncreaseButton=new JButton();
  myScrollBarIncreaseButton.setFocusable(false);
  myScrollBarIncreaseButton.setRequestFocusEnabled(false);
  myScrollPane=new JBScrollPane(myList);
  myScrollPane.setViewportBorder(new EmptyBorder(0,0,0,0));
  myScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  myScrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(13,-1));
  myScrollPane.getVerticalScrollBar().setUI(new ButtonlessScrollBarUI(){
    @Override protected JButton createIncreaseButton(    int orientation){
      return myScrollBarIncreaseButton;
    }
  }
);
  getComponent().add(myLayeredPane,BorderLayout.CENTER);
  fixMouseCheaters();
  myLayeredPane.mainPanel.add(myScrollPane,BorderLayout.CENTER);
  myScrollPane.setBorder(null);
  myAdComponent=new Advertiser();
  JComponent adComponent=myAdComponent.getAdComponent();
  adComponent.setBorder(new EmptyBorder(0,1,1,2 + AllIcons.Ide.LookupRelevance.getIconWidth()));
  myLayeredPane.mainPanel.add(adComponent,BorderLayout.SOUTH);
  getComponent().setBorder(new BegPopupMenuBorder());
  myIconPanel.setBackground(Color.LIGHT_GRAY);
  myIconPanel.add(myProcessIcon);
  myOffsets=new LookupOffsets(editor);
  final CollectionListModel<LookupElement> model=getListModel();
  addEmptyItem(model);
  updateListHeight(model);
  addListeners();
  mySortingLabel.setBorder(new LineBorder(Color.LIGHT_GRAY));
  mySortingLabel.setOpaque(true);
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent e,    int clickCount){
      FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EDITING_COMPLETION_CHANGE_SORTING);
      UISettings.getInstance().SORT_LOOKUP_ELEMENTS_LEXICOGRAPHICALLY=!UISettings.getInstance().SORT_LOOKUP_ELEMENTS_LEXICOGRAPHICALLY;
      updateSorting();
      return true;
    }
  }
.installOn(mySortingLabel);
  updateSorting();
  myModalityState=ModalityState.stateForComponent(getComponent());
}
