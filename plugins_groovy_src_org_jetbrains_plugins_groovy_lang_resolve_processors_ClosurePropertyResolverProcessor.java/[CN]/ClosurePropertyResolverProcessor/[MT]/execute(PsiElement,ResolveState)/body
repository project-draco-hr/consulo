{
  if (myStopExecuting) {
    return false;
  }
  PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
  if (myField) {
    if (element instanceof GrReferenceExpression) {
    }
    if (element instanceof PsiVariable) {
      if (isApplicableClosure(element)) {
        myCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiVariable)element),isStaticsOK((PsiVariable)element)));
      }
 else {
        myInapplicableCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiVariable)element),isStaticsOK((PsiVariable)element)));
      }
    }
 else     if (!myField && element instanceof PsiMethod && !(element instanceof GrAccessorMethod)) {
      if (isApplicableClosure(element)) {
        myCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiMethod)element),isStaticsOK((PsiMethod)element)));
      }
 else {
        myInapplicableCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiMethod)element),isStaticsOK((PsiMethod)element)));
      }
    }
  }
 else   if (!myField && element instanceof PsiMethod && !(element instanceof GrAccessorMethod)) {
    if (isApplicableClosure(element)) {
      myCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiMethod)element),isStaticsOK((PsiMethod)element)));
    }
 else {
      myInapplicableCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiMethod)element),isStaticsOK((PsiMethod)element)));
    }
  }
  return true;
}
