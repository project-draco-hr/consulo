{
  final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  final DataContext dataContext=MapDataContext.singleData(DataConstants.PROJECT,myProject);
  compilerManager.addBeforeTask(new CompileTask(){
    public boolean execute(    CompileContext context){
      return AntConfiguration.getInstance(myProject).executeTargetBeforeCompile(dataContext);
    }
  }
);
  compilerManager.addAfterTask(new CompileTask(){
    public boolean execute(    CompileContext context){
      return AntConfiguration.getInstance(myProject).executeTargetAfterCompile(dataContext);
    }
  }
);
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      final JPanel explorerPanel=new JPanel(new BorderLayout()){
        boolean explorerInitialized=false;
        public void addNotify(){
          super.addNotify();
          if (!explorerInitialized) {
            explorerInitialized=true;
            add(myAntExplorer=new AntExplorer(myProject),BorderLayout.CENTER);
          }
        }
      }
;
      ToolWindow toolWindow=myToolWindowManager.registerToolWindow(ToolWindowId.ANT_BUILD,explorerPanel,ToolWindowAnchor.RIGHT);
      toolWindow.setIcon(IconLoader.getIcon("/general/toolWindowAnt.png"));
    }
  }
);
}
