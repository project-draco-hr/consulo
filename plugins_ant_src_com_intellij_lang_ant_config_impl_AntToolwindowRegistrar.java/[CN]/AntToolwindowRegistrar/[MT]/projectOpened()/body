{
  final KeymapManagerEx keymapManager=KeymapManagerEx.getInstanceEx();
  final String prefix=AntConfiguration.getActionIdPrefix(myProject);
  final ActionManager actionManager=ActionManager.getInstance();
  for (  Keymap keymap : keymapManager.getAllKeymaps()) {
    for (    String id : keymap.getActionIds()) {
      if (id.startsWith(prefix) && actionManager.getAction(id) == null) {
        actionManager.registerAction(id,new TargetActionStub(id,myProject));
      }
    }
  }
  final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  final DataContext dataContext=MapDataContext.singleData(DataConstants.PROJECT,myProject);
  compilerManager.addBeforeTask(new CompileTask(){
    public boolean execute(    CompileContext context){
      final AntConfiguration config=AntConfiguration.getInstance(myProject);
      ((AntConfigurationBase)config).ensureInitialized();
      return config.executeTargetBeforeCompile(dataContext);
    }
  }
);
  compilerManager.addAfterTask(new CompileTask(){
    public boolean execute(    CompileContext context){
      final AntConfiguration config=AntConfiguration.getInstance(myProject);
      ((AntConfigurationBase)config).ensureInitialized();
      return config.executeTargetAfterCompile(dataContext);
    }
  }
);
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      final JPanel explorerPanel=new JPanel(new BorderLayout()){
        boolean explorerInitialized=false;
        public void addNotify(){
          super.addNotify();
          if (!explorerInitialized) {
            explorerInitialized=true;
            add(myAntExplorer=new AntExplorer(myProject),BorderLayout.CENTER);
          }
        }
      }
;
      ToolWindow toolWindow=myToolWindowManager.registerToolWindow(ToolWindowId.ANT_BUILD,explorerPanel,ToolWindowAnchor.RIGHT);
      toolWindow.setIcon(IconLoader.getIcon("/general/toolWindowAnt.png"));
    }
  }
);
}
