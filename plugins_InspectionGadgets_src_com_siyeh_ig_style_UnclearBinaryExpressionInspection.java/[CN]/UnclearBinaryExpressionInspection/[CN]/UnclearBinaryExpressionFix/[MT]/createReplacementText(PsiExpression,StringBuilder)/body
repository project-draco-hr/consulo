{
  if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    final PsiElement parent=expression.getParent();
    if (parent instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parent;
      final IElementType parentOperationSign=parentPolyadicExpression.getOperationTokenType();
      if (!tokenType.equals(parentOperationSign)) {
        out.append('(');
        createText(polyadicExpression,out);
        out.append(')');
        return out;
      }
    }
 else     if (parent instanceof PsiConditionalExpression || parent instanceof PsiInstanceOfExpression) {
      out.append('(');
      createText(polyadicExpression,out);
      out.append(')');
      return out;
    }
    createText(polyadicExpression,out);
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression unwrappedExpression=parenthesizedExpression.getExpression();
    final PsiElement parent=expression.getParent();
    if (!(parent instanceof PsiParenthesizedExpression)) {
      out.append('(');
      createReplacementText(unwrappedExpression,out);
      out.append(')');
    }
 else {
      createReplacementText(unwrappedExpression,out);
    }
  }
 else   if (expression instanceof PsiInstanceOfExpression) {
    final PsiElement parent=expression.getParent();
    final PsiInstanceOfExpression instanceofExpression=(PsiInstanceOfExpression)expression;
    if (mightBeConfusingExpression(parent)) {
      out.append('(');
      createText(instanceofExpression,out);
      out.append(')');
    }
 else {
      createText(instanceofExpression,out);
    }
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final PsiElement parent=expression.getParent();
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)expression;
    if (mightBeConfusingExpression(parent)) {
      out.append('(');
      createText(conditionalExpression,out);
      out.append(')');
    }
 else {
      createText(conditionalExpression,out);
    }
  }
 else   if (expression != null) {
    out.append(expression.getText());
  }
  return out;
}
