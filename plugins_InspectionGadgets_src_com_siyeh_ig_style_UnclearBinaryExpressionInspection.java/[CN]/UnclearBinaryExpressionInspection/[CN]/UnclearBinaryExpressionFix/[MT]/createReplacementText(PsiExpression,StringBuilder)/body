{
  if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    final PsiElement parent=expression.getParent();
    if (parent instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parent;
      final IElementType parentOperationSign=parentPolyadicExpression.getOperationTokenType();
      final boolean parentheses=!tokenType.equals(parentOperationSign);
      appendText(polyadicExpression,parentheses,out);
    }
 else {
      final boolean parentheses=parent instanceof PsiConditionalExpression || parent instanceof PsiInstanceOfExpression;
      appendText(polyadicExpression,parentheses,out);
    }
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression unwrappedExpression=parenthesizedExpression.getExpression();
    final PsiElement parent=expression.getParent();
    if (!(parent instanceof PsiParenthesizedExpression)) {
      out.append('(');
      createReplacementText(unwrappedExpression,out);
      out.append(')');
    }
 else {
      createReplacementText(unwrappedExpression,out);
    }
  }
 else   if (expression instanceof PsiInstanceOfExpression) {
    final PsiInstanceOfExpression instanceofExpression=(PsiInstanceOfExpression)expression;
    final PsiElement parent=expression.getParent();
    final boolean parentheses=mightBeConfusingExpression(parent);
    appendText(instanceofExpression,parentheses,out);
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)expression;
    final PsiElement parent=expression.getParent();
    final boolean parentheses=mightBeConfusingExpression(parent);
    appendText(conditionalExpression,parentheses,out);
  }
 else   if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    final PsiElement parent=expression.getParent();
    final boolean parentheses=mightBeConfusingExpression(parent) && !isSimpleAssignment(assignmentExpression,parent);
    appendText(assignmentExpression,parentheses,out);
  }
 else   if (expression != null) {
    out.append(expression.getText());
  }
  return out;
}
