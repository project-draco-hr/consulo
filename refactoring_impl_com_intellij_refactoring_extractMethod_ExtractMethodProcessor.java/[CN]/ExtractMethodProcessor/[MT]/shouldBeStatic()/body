{
  for (  PsiElement element : myElements) {
    final PsiExpressionStatement statement=PsiTreeUtil.getParentOfType(element,PsiExpressionStatement.class);
    if (statement != null && RefactoringUtil.isSuperOrThisCall(statement,true,true)) {
      return true;
    }
  }
  PsiElement codeFragmentMember=myCodeFragmentMember;
  while (codeFragmentMember != null && PsiTreeUtil.isAncestor(myTargetClass,codeFragmentMember,true)) {
    if (((PsiModifierListOwner)codeFragmentMember).hasModifierProperty(PsiModifier.STATIC)) {
      return true;
    }
    codeFragmentMember=PsiTreeUtil.getParentOfType(codeFragmentMember,PsiModifierListOwner.class,true);
  }
  return false;
}
