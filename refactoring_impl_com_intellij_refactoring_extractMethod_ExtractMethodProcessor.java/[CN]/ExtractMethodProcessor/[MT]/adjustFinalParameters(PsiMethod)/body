{
  final IncorrectOperationException[] exc=new IncorrectOperationException[1];
  exc[0]=null;
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  if (parameters.length > 0) {
    if (CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS) {
      method.accept(new PsiRecursiveElementVisitor(){
        @Override public void visitReferenceExpression(        PsiReferenceExpression expression){
          final PsiElement resolved=expression.resolve();
          if (resolved != null) {
            final int index=ArrayUtil.find(parameters,resolved);
            if (index >= 0) {
              final PsiParameter param=parameters[index];
              if (param.hasModifierProperty(PsiModifier.FINAL) && PsiUtil.isAccessedForWriting(expression)) {
                try {
                  param.getModifierList().setModifierProperty(PsiModifier.FINAL,false);
                }
 catch (                IncorrectOperationException e) {
                  exc[0]=e;
                }
              }
            }
          }
          super.visitReferenceExpression(expression);
        }
      }
);
    }
 else {
      method.accept(new PsiRecursiveElementVisitor(){
        @Override public void visitReferenceExpression(        PsiReferenceExpression expression){
          final PsiElement resolved=expression.resolve();
          final int index=ArrayUtil.find(parameters,resolved);
          if (index >= 0) {
            final PsiParameter param=parameters[index];
            if (!param.hasModifierProperty(PsiModifier.FINAL) && RefactoringUtil.isInsideAnonymous(expression,method)) {
              try {
                param.getModifierList().setModifierProperty(PsiModifier.FINAL,true);
              }
 catch (              IncorrectOperationException e) {
                exc[0]=e;
              }
            }
          }
          super.visitReferenceExpression(expression);
        }
      }
);
    }
    if (exc[0] != null) {
      throw exc[0];
    }
  }
}
