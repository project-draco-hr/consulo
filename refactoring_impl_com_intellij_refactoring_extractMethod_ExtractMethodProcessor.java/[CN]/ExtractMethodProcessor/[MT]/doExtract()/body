{
  myExpression=myInputVariables.replaceWrappedReferences(myElements,myExpression);
  renameInputVariables();
  PsiMethod newMethod=generateEmptyMethod(myThrownExceptions,myStatic);
  LOG.assertTrue(myElements[0].isValid());
  PsiCodeBlock body=newMethod.getBody();
  myMethodCall=generateMethodCall(null,true);
  LOG.assertTrue(myElements[0].isValid());
  if (myExpression == null) {
    String outVariableName=myOutputVariable != null ? getNewVariableName(myOutputVariable) : null;
    PsiReturnStatement returnStatement;
    if (myNullConditionalCheck) {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return null;",null);
    }
 else     if (myOutputVariable != null) {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return " + outVariableName + ";",null);
    }
 else     if (myGenerateConditionalExit) {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return true;",null);
    }
 else {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return;",null);
    }
    boolean hasNormalExit=false;
    PsiElement lastElement=myElements[myElements.length - 1];
    if (!(lastElement instanceof PsiReturnStatement || lastElement instanceof PsiBreakStatement || lastElement instanceof PsiContinueStatement)) {
      hasNormalExit=true;
    }
    PsiStatement exitStatementCopy=myControlFlowWrapper.getExitStatementCopy(returnStatement,myElements);
    declareNecessaryVariablesInsideBody(body);
    if (myNeedChangeContext) {
      for (      PsiElement element : myElements) {
        ChangeContextUtil.encodeContextInfo(element,false);
      }
    }
    body.addRange(myElements[0],myElements[myElements.length - 1]);
    if (myNullConditionalCheck) {
      body.add(myElementFactory.createStatementFromText("return " + myOutputVariable.getName() + ";",null));
    }
 else     if (myGenerateConditionalExit) {
      body.add(myElementFactory.createStatementFromText("return false;",null));
    }
 else     if (!myHasReturnStatement && hasNormalExit && myOutputVariable != null) {
      body.add(returnStatement);
    }
    if (myNullConditionalCheck) {
      final String varName=myOutputVariable.getName();
      if (isDeclaredInside(myOutputVariable)) {
        PsiDeclarationStatement statement=(PsiDeclarationStatement)myElementFactory.createStatementFromText(myOutputVariable.getType().getCanonicalText() + " " + varName+ "=x;",null);
        statement=(PsiDeclarationStatement)addToMethodCallLocation(statement);
        myMethodCall=(PsiMethodCallExpression)((PsiLocalVariable)statement.getDeclaredElements()[0]).getInitializer().replace(myMethodCall);
      }
 else {
        PsiExpressionStatement assignmentExpression=(PsiExpressionStatement)myElementFactory.createStatementFromText(varName + "=x;",null);
        assignmentExpression=(PsiExpressionStatement)addToMethodCallLocation(assignmentExpression);
        myMethodCall=(PsiMethodCallExpression)((PsiAssignmentExpression)assignmentExpression.getExpression()).getRExpression().replace(myMethodCall);
      }
      PsiIfStatement ifStatement=(PsiIfStatement)myElementFactory.createStatementFromText(myHasReturnStatementOutput || (myGenerateConditionalExit && myFirstExitStatementCopy instanceof PsiReturnStatement && ((PsiReturnStatement)myFirstExitStatementCopy).getReturnValue() != null) ? "if (" + varName + "==null) return null;" : "if (" + varName + "==null) return;",null);
      ifStatement=(PsiIfStatement)addToMethodCallLocation(ifStatement);
      CodeStyleManager.getInstance(myProject).reformat(ifStatement);
    }
 else     if (myGenerateConditionalExit) {
      PsiIfStatement ifStatement=(PsiIfStatement)myElementFactory.createStatementFromText("if (a) b;",null);
      ifStatement=(PsiIfStatement)addToMethodCallLocation(ifStatement);
      myMethodCall=(PsiMethodCallExpression)ifStatement.getCondition().replace(myMethodCall);
      ifStatement.getThenBranch().replace(myFirstExitStatementCopy);
      CodeStyleManager.getInstance(myProject).reformat(ifStatement);
    }
 else     if (myOutputVariable != null) {
      String name=myOutputVariable.getName();
      boolean toDeclare=isDeclaredInside(myOutputVariable);
      if (!toDeclare) {
        PsiExpressionStatement statement=(PsiExpressionStatement)myElementFactory.createStatementFromText(name + "=x;",null);
        statement=(PsiExpressionStatement)myStyleManager.reformat(statement);
        statement=(PsiExpressionStatement)addToMethodCallLocation(statement);
        PsiAssignmentExpression assignment=(PsiAssignmentExpression)statement.getExpression();
        myMethodCall=(PsiMethodCallExpression)assignment.getRExpression().replace(myMethodCall);
      }
 else {
        PsiDeclarationStatement statement=myElementFactory.createVariableDeclarationStatement(name,myOutputVariable.getType(),myMethodCall);
        statement=(PsiDeclarationStatement)addToMethodCallLocation(statement);
        PsiVariable var=(PsiVariable)statement.getDeclaredElements()[0];
        myMethodCall=(PsiMethodCallExpression)var.getInitializer();
        var.getModifierList().replace(myOutputVariable.getModifierList());
      }
    }
 else     if (myHasReturnStatementOutput) {
      PsiStatement statement=myElementFactory.createStatementFromText("return x;",null);
      statement=(PsiStatement)addToMethodCallLocation(statement);
      myMethodCall=(PsiMethodCallExpression)((PsiReturnStatement)statement).getReturnValue().replace(myMethodCall);
    }
 else {
      PsiStatement statement=myElementFactory.createStatementFromText("x();",null);
      statement=(PsiStatement)addToMethodCallLocation(statement);
      myMethodCall=(PsiMethodCallExpression)((PsiExpressionStatement)statement).getExpression().replace(myMethodCall);
    }
    if (myHasReturnStatement && !myHasReturnStatementOutput && !hasNormalExit) {
      PsiStatement statement=myElementFactory.createStatementFromText("return;",null);
      addToMethodCallLocation(statement);
    }
 else     if (!myGenerateConditionalExit && exitStatementCopy != null) {
      addToMethodCallLocation(exitStatementCopy);
    }
    declareNecessaryVariablesAfterCall(myOutputVariable);
    deleteExtracted();
  }
 else {
    if (myHasExpressionOutput) {
      PsiReturnStatement returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return x;",null);
      final PsiExpression returnValue=RefactoringUtil.convertInitializerToNormalExpression(myExpression,myForcedReturnType);
      returnStatement.getReturnValue().replace(returnValue);
      body.add(returnStatement);
    }
 else {
      PsiExpressionStatement statement=(PsiExpressionStatement)myElementFactory.createStatementFromText("x;",null);
      statement.getExpression().replace(myExpression);
      body.add(statement);
    }
    final PsiElement replacement=IntroduceVariableBase.replace(myExpression,myMethodCall,myProject);
    myMethodCall=PsiTreeUtil.getParentOfType(replacement.findElementAt(replacement.getText().indexOf(myMethodCall.getText())),PsiMethodCallExpression.class);
  }
  if (myAnchor instanceof PsiField) {
    ((PsiField)myAnchor).normalizeDeclaration();
  }
  adjustFinalParameters(newMethod);
  myExtractedMethod=(PsiMethod)myTargetClass.addAfter(newMethod,myAnchor);
  if (myNeedChangeContext) {
    ChangeContextUtil.decodeContextInfo(myExtractedMethod,myTargetClass,RefactoringUtil.createThisExpression(myManager,null));
  }
}
