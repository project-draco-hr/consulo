{
  chooseAnchor();
  int col=myEditor.getCaretModel().getLogicalPosition().column;
  int line=myEditor.getCaretModel().getLogicalPosition().line;
  LogicalPosition pos=new LogicalPosition(0,0);
  myEditor.getCaretModel().moveToLogicalPosition(pos);
  SearchScope processConflictsScope=myMethodVisibility.equals(PsiModifier.PRIVATE) ? new LocalSearchScope(myTargetClass) : GlobalSearchScope.projectScope(myProject);
  final Map<PsiMethodCallExpression,PsiMethod> overloadsResolveMap=ExtractMethodUtil.encodeOverloadTargets(myTargetClass,processConflictsScope,myMethodName,myCodeFragmentMember);
  doExtract();
  ExtractMethodUtil.decodeOverloadTargets(overloadsResolveMap,myExtractedMethod,myCodeFragmentMember);
  LogicalPosition pos1=new LogicalPosition(line,col);
  myEditor.getCaretModel().moveToLogicalPosition(pos1);
  int offset=myMethodCall.getMethodExpression().getTextRange().getStartOffset();
  myEditor.getCaretModel().moveToOffset(offset);
  myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  myEditor.getSelectionModel().removeSelection();
  myEditor.getSelectionModel().removeSelection();
}
