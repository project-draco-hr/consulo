{
  @NonNls StringBuilder buffer=new StringBuilder();
  final boolean skipInstanceQualifier;
  if (myIsChainedConstructor) {
    skipInstanceQualifier=true;
    buffer.append(PsiKeyword.THIS);
  }
 else {
    skipInstanceQualifier=instanceQualifier == null || instanceQualifier instanceof PsiThisExpression;
    if (skipInstanceQualifier) {
      if (myNeedChangeContext) {
        boolean needsThisQualifier=false;
        PsiElement parent=myCodeFragmentMember;
        while (!myTargetClass.equals(parent)) {
          if (parent instanceof PsiMethod) {
            String methodName=((PsiMethod)parent).getName();
            if (methodName.equals(myMethodName)) {
              needsThisQualifier=true;
              break;
            }
          }
          parent=parent.getParent();
        }
        if (needsThisQualifier) {
          buffer.append(myTargetClass.getName());
          buffer.append(".this.");
        }
      }
    }
 else {
      buffer.append("qqq.");
    }
    buffer.append(myMethodName);
  }
  buffer.append("(");
  if (generateArgs) {
    int count=0;
    for (    ParameterTablePanel.VariableData data : myVariableDatum) {
      if (data.passAsParameter) {
        if (count > 0) {
          buffer.append(",");
        }
        buffer.append(data.variable.getName());
        count++;
      }
    }
  }
  buffer.append(")");
  String text=buffer.toString();
  PsiMethodCallExpression expr=(PsiMethodCallExpression)myElementFactory.createExpressionFromText(text,null);
  expr=(PsiMethodCallExpression)myStyleManager.reformat(expr);
  if (!skipInstanceQualifier) {
    PsiExpression qualifierExpression=expr.getMethodExpression().getQualifierExpression();
    LOG.assertTrue(qualifierExpression != null);
    qualifierExpression.replace(instanceQualifier);
  }
  return expr;
}
