{
  myExpression=null;
  if (myElements.length == 1 && myElements[0] instanceof PsiExpression) {
    final PsiExpression expression=(PsiExpression)myElements[0];
    if (expression.getParent() instanceof PsiExpressionStatement) {
      myElements[0]=expression.getParent();
    }
 else {
      myExpression=expression;
    }
  }
  final PsiElement codeFragment=ControlFlowUtil.findCodeFragment(myElements[0]);
  myCodeFragementMember=codeFragment.getParent();
  try {
    myControlFlow=ControlFlowFactory.getControlFlow(codeFragment,new LocalsControlFlowPolicy(codeFragment),false,false);
  }
 catch (  AnalysisCanceledException e) {
    throw new PrepareFailedException(RefactoringBundle.message("extract.method.control.flow.analysis.failed"),e.getErrorElement());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(myControlFlow.toString());
  }
  calculateFlowStartAndEnd();
  IntArrayList exitPoints=new IntArrayList();
  myExitStatements=new ArrayList<PsiStatement>();
  ControlFlowUtil.findExitPointsAndStatements(myControlFlow,myFlowStart,myFlowEnd,exitPoints,myExitStatements,ControlFlowUtil.DEFAULT_EXIT_STATEMENTS_CLASSES);
  if (LOG.isDebugEnabled()) {
    LOG.debug("exit points:");
    for (int i=0; i < exitPoints.size(); i++) {
      LOG.debug("  " + exitPoints.get(i));
    }
    LOG.debug("exit statements:");
    for (    PsiStatement exitStatement : myExitStatements) {
      LOG.debug("  " + exitStatement);
    }
  }
  if (exitPoints.size() == 0) {
    exitPoints.add(myControlFlow.getEndOffset(myElements[myElements.length - 1]));
  }
  if (exitPoints.size() != 1) {
    if (!areExitStatementsTheSame()) {
      showMultipleExitPointsMessage();
      return false;
    }
    myGenerateConditionalExit=true;
  }
 else {
    myHasReturnStatement=myExpression == null && ControlFlowUtil.returnPresentBetween(myControlFlow,myFlowStart,myFlowEnd);
  }
  myOutputVariables=ControlFlowUtil.getOutputVariables(myControlFlow,myFlowStart,myFlowEnd,exitPoints.toArray());
  if (myGenerateConditionalExit) {
    final Set<PsiVariable> outputVariables=new HashSet<PsiVariable>(Arrays.asList(myOutputVariables));
    for (    PsiStatement statement : myExitStatements) {
      statement.accept(new PsiRecursiveElementVisitor(){
        public void visitReferenceExpression(        PsiReferenceExpression expression){
          super.visitReferenceExpression(expression);
          final PsiElement resolved=expression.resolve();
          if (resolved instanceof PsiVariable && isDeclaredInside((PsiVariable)resolved)) {
            outputVariables.add((PsiVariable)resolved);
          }
        }
      }
);
    }
    myOutputVariables=outputVariables.toArray(new PsiVariable[outputVariables.size()]);
  }
  List<PsiVariable> inputVariables=new ArrayList<PsiVariable>(Arrays.asList(ControlFlowUtil.getInputVariables(myControlFlow,myFlowStart,myFlowEnd)));
  if (myGenerateConditionalExit) {
    removeParametersUsedInExitsOnly(codeFragment,myExitStatements,myControlFlow,myFlowStart,myFlowEnd,inputVariables);
  }
  myInputVariables=inputVariables.toArray(new PsiVariable[inputVariables.size()]);
  Arrays.sort(myInputVariables,new Comparator<PsiVariable>(){
    public int compare(    final PsiVariable v1,    final PsiVariable v2){
      return v1.getType() instanceof PsiEllipsisType ? 1 : v2.getType() instanceof PsiEllipsisType ? -1 : 0;
    }
  }
);
  chooseTargetClass();
  PsiType expressionType=null;
  if (myExpression != null) {
    if (myForcedReturnType != null) {
      expressionType=myForcedReturnType;
    }
 else {
      expressionType=RefactoringUtil.getTypeByExpressionWithExpectedType(myExpression);
    }
  }
  if (expressionType == null) {
    expressionType=PsiType.VOID;
  }
  myHasExpressionOutput=expressionType != PsiType.VOID;
  PsiType returnStatementType=null;
  if (myHasReturnStatement) {
    returnStatementType=myCodeFragementMember instanceof PsiMethod ? ((PsiMethod)myCodeFragementMember).getReturnType() : null;
  }
  myHasReturnStatementOutput=returnStatementType != null && returnStatementType != PsiType.VOID;
  if (!myHasReturnStatementOutput) {
    int outputCount=(myHasExpressionOutput ? 1 : 0) + (myGenerateConditionalExit ? 1 : 0) + myOutputVariables.length;
    if (outputCount > 1) {
      showMultipleOutputMessage(expressionType);
      return false;
    }
  }
  myOutputVariable=myOutputVariables.length > 0 ? myOutputVariables[0] : null;
  if (myHasReturnStatementOutput) {
    myReturnType=returnStatementType;
  }
 else   if (myOutputVariable != null) {
    myReturnType=myOutputVariable.getType();
  }
 else   if (myGenerateConditionalExit) {
    myReturnType=PsiType.BOOLEAN;
  }
 else {
    myReturnType=expressionType;
  }
  PsiElement container=PsiTreeUtil.getParentOfType(myElements[0],PsiClass.class,PsiMethod.class);
  myTypeParameterList=RefactoringUtil.createTypeParameterListWithUsedTypeParameters(container);
  myThrownExceptions=ExceptionUtil.getThrownCheckedExceptions(myElements);
  myStatic=shouldBeStatic();
  if (myTargetClass.getContainingClass() == null || myTargetClass.hasModifierProperty(PsiModifier.STATIC)) {
    ElementNeedsThis needsThis=new ElementNeedsThis(myTargetClass);
    for (int i=0; i < myElements.length && !needsThis.usesMembers(); i++) {
      PsiElement element=myElements[i];
      element.accept(needsThis);
    }
    myCanBeStatic=!needsThis.usesMembers();
  }
 else {
    myCanBeStatic=false;
  }
  final DuplicatesFinder duplicatesFinder;
  if (myExpression != null) {
    duplicatesFinder=new DuplicatesFinder(myElements,Arrays.asList(myInputVariables),new ArrayList<PsiVariable>());
    myDuplicates=duplicatesFinder.findDuplicates(myTargetClass);
  }
 else {
    duplicatesFinder=new DuplicatesFinder(myElements,Arrays.asList(myInputVariables),Arrays.asList(myOutputVariables));
    myDuplicates=duplicatesFinder.findDuplicates(myTargetClass);
  }
  return true;
}
