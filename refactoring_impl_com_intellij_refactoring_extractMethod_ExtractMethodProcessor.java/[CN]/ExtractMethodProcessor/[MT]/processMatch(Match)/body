{
  match.changeSignature(myExtractedMethod);
  if (RefactoringUtil.isInStaticContext(match.getMatchStart(),myExtractedMethod.getContainingClass())) {
    myExtractedMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
  }
  final PsiMethodCallExpression methodCallExpression=generateMethodCall(match.getInstanceExpression(),false);
  ArrayList<ParameterTablePanel.VariableData> datas=new ArrayList<ParameterTablePanel.VariableData>();
  for (  final ParameterTablePanel.VariableData variableData : myVariableDatum) {
    if (variableData.passAsParameter) {
      datas.add(variableData);
    }
  }
  for (  ParameterTablePanel.VariableData data : datas) {
    final List<PsiElement> parameterValue=match.getParameterValues(data.variable);
    for (    PsiElement val : parameterValue) {
      methodCallExpression.getArgumentList().add(val);
    }
  }
  return match.replace(myExtractedMethod,methodCallExpression,myOutputVariable);
}
