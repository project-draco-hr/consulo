{
  final String extension=SystemInfo.isWindows ? "cmd" : "sh";
  final String path=sdkPath + "/bin/appcfg." + extension;
  final ProcessBuilder processBuilder=new ProcessBuilder().command(FileUtil.toSystemDependentName(path),"update",FileUtil.toSystemDependentName(explodedPath));
  final String commandLine=StringUtil.join(processBuilder.command()," ");
  final Process process;
  try {
    process=processBuilder.start();
  }
 catch (  final IOException e) {
    Messages.showErrorDialog(myProject,"Cannot start 'appcfg' script: " + e.getMessage(),CommonBundle.getErrorTitle());
    return;
  }
  final Executor executor=DefaultRunExecutor.getRunExecutorInstance();
  final ConsoleView console=TextConsoleBuilderFactory.getInstance().createBuilder(myProject).getConsole();
  final RunnerLayoutUi ui=RunnerLayoutUi.Factory.getInstance(myProject).create("Upload","Upload Application","Upload Application",myProject);
  final DefaultActionGroup group=new DefaultActionGroup();
  ui.getOptions().setLeftToolbar(group,ActionPlaces.UNKNOWN);
  ui.addContent(ui.createContent("upload",console.getComponent(),"Upload Application",null,console.getPreferredFocusableComponent()));
  ProcessHandler processHandler=new OSProcessHandler(process,commandLine);
  console.attachToProcess(processHandler);
  final RunContentDescriptor contentDescriptor=new RunContentDescriptor(console,processHandler,ui.getComponent(),"Upload Application");
  group.add(ActionManager.getInstance().getAction(IdeActions.ACTION_STOP_PROGRAM));
  group.add(new CloseAction(executor,contentDescriptor,myProject));
  ExecutionManager.getInstance(myProject).getContentManager().showRunContent(executor,contentDescriptor);
  processHandler.startNotify();
}
