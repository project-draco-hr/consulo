{
  super.visitLiteralExpression(expression);
  final PsiType type=expression.getType();
  if (!ClassUtils.isPrimitiveNumericType(type)) {
    return;
  }
  if (type.equals(PsiType.CHAR)) {
    return;
  }
  final String text=expression.getText();
  if (text == null) {
    return;
  }
  if (isSpecialCase(text)) {
    return;
  }
  if (isDeclaredConstant(expression)) {
    return;
  }
  if (m_ignoreInHashCode) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
    if (containingMethod != null && "hashCode".equals(containingMethod.getName())) {
      final PsiParameterList parameterList=containingMethod.getParameterList();
      if (parameterList != null) {
        final PsiParameter[] parameters=parameterList.getParameters();
        if (parameters != null && parameters.length == 0) {
          return;
        }
      }
    }
  }
  registerError(expression);
}
