{
  super.visitLiteralExpression(expression);
  final PsiType type=expression.getType();
  if (!ClassUtils.isPrimitiveNumericType(type)) {
    return;
  }
  if (PsiType.CHAR.equals(type)) {
    return;
  }
  final String text=expression.getText();
  if (text == null) {
    return;
  }
  if (isSpecialCase(text)) {
    return;
  }
  if (isDeclaredConstant(expression)) {
    return;
  }
  if (m_ignoreInHashCode) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
    if (MethodUtils.isHashCode(containingMethod)) {
      return;
    }
  }
  registerError(expression);
}
