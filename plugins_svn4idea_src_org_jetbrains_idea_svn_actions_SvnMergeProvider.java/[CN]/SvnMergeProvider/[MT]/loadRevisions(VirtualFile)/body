{
  final MergeData data=new MergeData();
  VcsRunnable runnable=new VcsRunnable(){
    public void run() throws VcsException {
      SvnVcs vcs=SvnVcs.getInstance(myProject);
      File oldFile=null;
      File newFile=null;
      File workingFile=null;
      SVNWCClient client;
      boolean mergeCase=false;
      try {
        client=vcs.createWCClient();
        SVNInfo info=client.doInfo(new File(file.getPath()),SVNRevision.UNDEFINED);
        if (info != null) {
          oldFile=info.getConflictOldFile();
          newFile=info.getConflictNewFile();
          workingFile=info.getConflictWrkFile();
          mergeCase=workingFile.getName().contains("working");
          if (mergeCase) {
            oldFile=info.getConflictNewFile();
            newFile=info.getConflictOldFile();
            workingFile=info.getConflictWrkFile();
          }
          data.LAST_REVISION_NUMBER=new SvnRevisionNumber(info.getRevision());
        }
      }
 catch (      SVNException e) {
        throw new VcsException(e);
      }
      if (oldFile == null || newFile == null || workingFile == null) {
        ByteArrayOutputStream bos=getBaseRevisionContents(client,file);
        data.ORIGINAL=bos.toByteArray();
        data.LAST=bos.toByteArray();
        data.CURRENT=readFile(new File(file.getPath()));
      }
 else {
        data.ORIGINAL=readFile(oldFile);
        data.LAST=readFile(newFile);
        data.CURRENT=readFile(workingFile);
      }
      if (mergeCase) {
        final ByteArrayOutputStream contents=getBaseRevisionContents(vcs.createWCClient(),file);
        if (!Arrays.equals(contents.toByteArray(),data.ORIGINAL)) {
          byte[] original=data.ORIGINAL;
          data.ORIGINAL=data.LAST;
          data.LAST=original;
        }
      }
    }
  }
;
  VcsUtil.runVcsProcessWithProgress(runnable,VcsBundle.message("multiple.file.merge.loading.progress.title"),false,myProject);
  return data;
}
