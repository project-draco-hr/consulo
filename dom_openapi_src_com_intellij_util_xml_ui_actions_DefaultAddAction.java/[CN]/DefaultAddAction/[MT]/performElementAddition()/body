{
  final DomElement parent=getParentDomElement();
  final DomManager domManager=parent.getManager();
  final ClassChooser[] oldChooser=new ClassChooser[]{null};
  final Type[] aClass=new Type[]{null};
  final StableElement<T> result=new WriteCommandAction<StableElement<T>>(domManager.getProject(),parent.getRoot().getFile()){
    protected void run(    Result<StableElement<T>> result) throws Throwable {
      final T t=(T)getDomCollectionChildDescription().addValue(getParentDomElement(),getElementClass());
      tuneNewValue(t);
      aClass[0]=parent.getGenericInfo().getCollectionChildDescription(t.getXmlElementName()).getType();
      oldChooser[0]=ClassChooserManager.getClassChooser(aClass[0]);
      final SmartPsiElementPointer pointer=SmartPointerManager.getInstance(getProject()).createSmartPsiElementPointer(t.getXmlTag());
      ClassChooserManager.registerClassChooser(aClass[0],new ClassChooser(){
        public Type chooseType(        final XmlTag tag){
          if (tag == pointer.getElement()) {
            return getElementClass();
          }
          return oldChooser[0].chooseType(tag);
        }
        public void distinguishTag(        final XmlTag tag,        final Type aClass) throws IncorrectOperationException {
          oldChooser[0].distinguishTag(tag,aClass);
        }
        public Type[] getChooserClasses(){
          return oldChooser[0].getChooserClasses();
        }
      }
);
      result.setResult((StableElement<T>)t.createStableCopy());
    }
  }
.execute().getResultObject();
  if (result != null) {
    ClassChooserManager.registerClassChooser(aClass[0],oldChooser[0]);
  }
  return result.getWrappedElement();
}
