{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (beforeAddition()) {
        final DomElement parent=getParentDomElement();
        final DomManager domManager=parent.getManager();
        final ClassChooser[] oldChooser=new ClassChooser[]{null};
        final Class[] aClass=new Class[]{null};
        final T result=new WriteCommandAction<T>(domManager.getProject(),parent.getRoot().getFile()){
          protected void run(          Result<T> result) throws Throwable {
            final T t=doAdd();
            aClass[0]=DomUtil.getRawType(parent.getGenericInfo().getCollectionChildDescription(t.getXmlElementName()).getType());
            oldChooser[0]=ClassChooserManager.getClassChooser(aClass[0]);
            final SmartPsiElementPointer pointer=SmartPointerManager.getInstance(getProject()).createSmartPsiElementPointer(t.getXmlTag());
            ClassChooserManager.registerClassChooser(aClass[0],new ClassChooser(){
              public Class<? extends T> chooseClass(              final XmlTag tag){
                if (tag == pointer.getElement()) {
                  return getElementClass();
                }
                return oldChooser[0].chooseClass(tag);
              }
              public void distinguishTag(              final XmlTag tag,              final Class aClass) throws IncorrectOperationException {
                oldChooser[0].distinguishTag(tag,aClass);
              }
              public Class[] getChooserClasses(){
                return oldChooser[0].getChooserClasses();
              }
            }
);
            result.setResult((T)t.createStableCopy());
          }
        }
.execute().getResultObject();
        if (result != null) {
          ClassChooserManager.registerClassChooser(aClass[0],oldChooser[0]);
          afterAddition(e,((StableElement)result).getWrappedElement());
        }
      }
    }
  }
);
}
