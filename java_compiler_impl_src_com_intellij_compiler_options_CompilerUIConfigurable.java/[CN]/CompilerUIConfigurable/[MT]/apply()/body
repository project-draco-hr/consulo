{
  CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final CompilerWorkspaceConfiguration workspaceConfiguration=CompilerWorkspaceConfiguration.getInstance(myProject);
  workspaceConfiguration.COMPILE_IN_BACKGROUND=myCbCompileInBackground.isSelected();
  workspaceConfiguration.AUTO_SHOW_ERRORS_IN_EDITOR=myCbAutoShowFirstError.isSelected();
  workspaceConfiguration.CLEAR_OUTPUT_DIRECTORY=myCbClearOutputDirectory.isSelected();
  workspaceConfiguration.USE_COMPILE_SERVER=myCbUseCompileServer.isSelected();
  workspaceConfiguration.MAKE_PROJECT_ON_SAVE=myCbMakeProjectOnSave.isSelected();
  configuration.setAddNotNullAssertions(myCbAssertNotNull.isSelected());
  configuration.removeResourceFilePatterns();
  String extensionString=myResourcePatternsField.getText().trim();
  applyResourcePatterns(extensionString,(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject));
  final TranslatingCompilerFilesMonitor monitor=TranslatingCompilerFilesMonitor.getInstance();
  if (!workspaceConfiguration.USE_COMPILE_SERVER) {
    CompileServerManager.getInstance().shutdownServer();
    monitor.watchProject(myProject);
    monitor.scanSourcesForCompilableFiles(myProject);
  }
 else {
    monitor.suspendProject(myProject);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        CompileServerManager.getInstance().sendReloadRequest(myProject);
      }
    }
);
  }
}
