{
  CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final CompilerWorkspaceConfiguration workspaceConfiguration=CompilerWorkspaceConfiguration.getInstance(myProject);
  workspaceConfiguration.AUTO_SHOW_ERRORS_IN_EDITOR=myCbAutoShowFirstError.isSelected();
  workspaceConfiguration.CLEAR_OUTPUT_DIRECTORY=myCbClearOutputDirectory.isSelected();
  boolean wasUsingExternalMake=workspaceConfiguration.USE_COMPILE_SERVER;
  workspaceConfiguration.USE_COMPILE_SERVER=myCbUseExternalBuild.isSelected();
  workspaceConfiguration.MAKE_PROJECT_ON_SAVE=myCbEnableAutomake.isSelected();
  workspaceConfiguration.PARALLEL_COMPILATION=myCbParallelCompilation.isSelected();
  workspaceConfiguration.REBUILD_ON_DEPENDENCY_CHANGE=myCbRebuildOnDependencyChange.isSelected();
  try {
    workspaceConfiguration.COMPILER_PROCESS_HEAP_SIZE=Integer.parseInt(myHeapSizeField.getText().trim());
  }
 catch (  NumberFormatException ignored) {
    LOG.info(ignored);
  }
  workspaceConfiguration.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS=myVMOptionsField.getText().trim();
  configuration.setAddNotNullAssertions(myCbAssertNotNull.isSelected());
  configuration.removeResourceFilePatterns();
  String extensionString=myResourcePatternsField.getText().trim();
  applyResourcePatterns(extensionString,(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject));
  if (wasUsingExternalMake != workspaceConfiguration.USE_COMPILE_SERVER) {
    myProject.getMessageBus().syncPublisher(ExternalBuildOptionListener.TOPIC).externalBuildOptionChanged(workspaceConfiguration.USE_COMPILE_SERVER);
  }
  if (workspaceConfiguration.USE_COMPILE_SERVER) {
    BuildManager.getInstance().clearState(myProject);
  }
}
