{
  final String extResourcesPath=getExternalResourcesPath();
  final File extResources=new File(extResourcesPath);
  LOG.assertTrue(extResources.mkdirs() || extResources.exists(),extResources);
  final PsiManager psiManager=PsiManager.getInstance(project);
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      @SuppressWarnings("deprecation") final AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(FetchExtResourceAction.class);
      try {
        final String path=FileUtil.toSystemIndependentName(extResources.getAbsolutePath());
        final VirtualFile vFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(path);
        LOG.assertTrue(vFile != null,path);
      }
  finally {
        token.finish();
      }
    }
  }
,indicator.getModalityState());
  final List<String> downloadedResources=new LinkedList<String>();
  final List<String> resourceUrls=new LinkedList<String>();
  final IOException[] nestedException=new IOException[1];
  try {
    final String resPath=fetchOneFile(indicator,url,project,extResourcesPath,null);
    if (resPath == null)     return;
    resourceUrls.add(dtdUrl);
    downloadedResources.add(resPath);
    VirtualFile virtualFile=findFileByPath(resPath,dtdUrl,indicator);
    Set<String> linksToProcess=new HashSet<String>();
    Set<String> processedLinks=new HashSet<String>();
    Map<String,String> baseUrls=new HashMap<String,String>();
    VirtualFile contextFile=virtualFile;
    linksToProcess.addAll(extractEmbeddedFileReferences(virtualFile,null,psiManager));
    while (!linksToProcess.isEmpty()) {
      String s=linksToProcess.iterator().next();
      linksToProcess.remove(s);
      processedLinks.add(s);
      final boolean absoluteUrl=s.startsWith(HTTP_PROTOCOL);
      String resourceUrl;
      if (absoluteUrl) {
        resourceUrl=s;
      }
 else {
        String baseUrl=baseUrls.get(s);
        if (baseUrl == null)         baseUrl=url;
        resourceUrl=baseUrl.substring(0,baseUrl.lastIndexOf('/') + 1) + s;
      }
      String resourcePath;
      String refname=s.substring(s.lastIndexOf('/') + 1);
      if (absoluteUrl)       refname=Integer.toHexString(s.hashCode()) + "_" + refname;
      try {
        resourcePath=fetchOneFile(indicator,resourceUrl,project,extResourcesPath,refname);
      }
 catch (      IOException e) {
        nestedException[0]=new FetchingResourceIOException(e,resourceUrl);
        break;
      }
      if (resourcePath == null)       break;
      virtualFile=findFileByPath(resourcePath,absoluteUrl ? s : null,indicator);
      downloadedResources.add(resourcePath);
      if (absoluteUrl) {
        resourceUrls.add(s);
      }
      final Set<String> newLinks=extractEmbeddedFileReferences(virtualFile,contextFile,psiManager);
      for (      String u : newLinks) {
        baseUrls.put(u,resourceUrl);
        if (!processedLinks.contains(u))         linksToProcess.add(u);
      }
    }
  }
 catch (  IOException ex) {
    nestedException[0]=ex;
  }
  if (nestedException[0] != null) {
    cleanup(resourceUrls,downloadedResources);
    throw nestedException[0];
  }
}
