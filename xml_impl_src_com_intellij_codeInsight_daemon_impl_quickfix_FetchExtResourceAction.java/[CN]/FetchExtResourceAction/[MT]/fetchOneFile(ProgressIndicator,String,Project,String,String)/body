{
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      indicator.setText(XmlBundle.message("fetching.progress.indicator",resourceUrl));
    }
  }
);
  FetchResult result=fetchData(project,resourceUrl,indicator);
  if (result == null)   return null;
  if (!resultIsValid(project,indicator,resourceUrl,result)) {
    return null;
  }
  int slashIndex=resourceUrl.lastIndexOf('/');
  String resPath=extResourcesPath + File.separatorChar;
  if (refname != null) {
    resPath+=refname;
    int refNameSlashIndex=resPath.lastIndexOf('/');
    if (refNameSlashIndex != -1) {
      final File parent=new File(resPath.substring(0,refNameSlashIndex));
      if (!parent.mkdirs() || !parent.exists()) {
        LOG.warn("Unable to create: " + parent);
      }
    }
  }
 else {
    resPath+=Integer.toHexString(resourceUrl.hashCode()) + "_" + resourceUrl.substring(slashIndex + 1);
  }
  final int lastDoPosInResourceUrl=resourceUrl.lastIndexOf('.',slashIndex);
  if (lastDoPosInResourceUrl == -1 || FileTypeManager.getInstance().getFileTypeByExtension(resourceUrl.substring(lastDoPosInResourceUrl + 1)) == FileTypes.UNKNOWN) {
    final String extension=result.contentType.contains(HTML_MIME) ? StdFileTypes.HTML.getDefaultExtension() : StdFileTypes.XML.getDefaultExtension();
    resPath+="." + extension;
  }
  File res=new File(resPath);
  FileOutputStream out=new FileOutputStream(res);
  try {
    out.write(result.bytes);
  }
  finally {
    out.close();
  }
  return resPath;
}
