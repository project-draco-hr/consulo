{
  final VirtualFile homeDirectory=jdk.getHomeDirectory();
  if (homeDirectory == null) {
    return null;
  }
  VirtualFile rtJar=homeDirectory.findFileByRelativePath("jre/lib/rt.jar");
  if (rtJar == null) {
    rtJar=homeDirectory.findFileByRelativePath("lib/rt.jar");
  }
  if (rtJar == null) {
    rtJar=homeDirectory.findFileByRelativePath("jre/lib/vm.jar");
  }
  if (rtJar == null) {
    rtJar=homeDirectory.findFileByRelativePath("../Classes/classes.jar");
  }
  if (rtJar == null) {
    String versionString=jdk.getVersionString();
    if (versionString != null) {
      final int start=versionString.indexOf("\"");
      final int end=versionString.lastIndexOf("\"");
      versionString=start >= 0 && (end > start) ? versionString.substring(start + 1,end) : null;
    }
    return versionString;
  }
  VirtualFile rtJarFileContent=StandardFileSystems.jar().findFileByPath(rtJar.getPath() + ArchiveFileSystem.ARCHIVE_SEPARATOR);
  if (rtJarFileContent == null) {
    return null;
  }
  ArchiveFile manifestArchiveFile;
  try {
    manifestArchiveFile=((JarFileSystem)StandardFileSystems.jar()).getArchiveWrapperFile(rtJarFileContent);
  }
 catch (  IOException e) {
    return null;
  }
  if (manifestArchiveFile == null) {
    return null;
  }
  try {
    ArchiveEntry entry=manifestArchiveFile.getEntry(JarFile.MANIFEST_NAME);
    if (entry == null) {
      return null;
    }
    InputStream is=manifestArchiveFile.getInputStream(entry);
    Manifest manifest=new Manifest(is);
    is.close();
    Attributes attributes=manifest.getMainAttributes();
    return attributes.getValue(attributeName);
  }
 catch (  IOException e) {
  }
  return null;
}
