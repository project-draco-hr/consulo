{
  final GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(exePath);
  ParametersList parametersList=javaParameters.getVMParametersList();
  commandLine.addParameters(parametersList.getList());
  String encoding=parametersList.getPropertyValue("file.encoding");
  if (encoding == null) {
    Charset charset=javaParameters.getCharset();
    if (charset == null)     charset=EncodingManager.getInstance().getDefaultCharset();
    if (charset == null)     charset=CharsetToolkit.getDefaultSystemCharset();
    commandLine.addParameter("-Dfile.encoding=" + charset.name());
    commandLine.setCharset(charset);
  }
 else {
    try {
      Charset charset=Charset.forName(encoding);
      commandLine.setCharset(charset);
    }
 catch (    UnsupportedCharsetException ignore) {
    }
  }
  commandLine.setEnvParams(javaParameters.getEnv());
  commandLine.setPassParentEnvs(javaParameters.isPassParentEnvs());
  final Class commandLineWrapper;
  if (forceDynamicClasspath && (commandLineWrapper=getCommandLineWrapperClass()) != null) {
    File classpathFile=null;
    if (!parametersList.hasParameter("-classpath") && !parametersList.hasParameter("-cp")) {
      try {
        classpathFile=FileUtil.createTempFile("classpath",null);
        final PrintWriter writer=new PrintWriter(classpathFile);
        try {
          for (          String path : javaParameters.getClassPath().getPathList()) {
            writer.println(path);
          }
        }
  finally {
          writer.close();
        }
        String classpath=PathUtil.getJarPathForClass(commandLineWrapper);
        final Class<UrlClassLoader> ourUrlClassLoader=UrlClassLoader.class;
        if (ourUrlClassLoader.getName().equals(parametersList.getPropertyValue("java.system.class.loader"))) {
          classpath+=File.pathSeparator + PathUtil.getJarPathForClass(ourUrlClassLoader);
        }
        commandLine.addParameter("-classpath");
        commandLine.addParameter(classpath);
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
    if (classpathFile != null) {
      commandLine.addParameter(commandLineWrapper.getName());
      commandLine.addParameter(classpathFile.getAbsolutePath());
    }
  }
 else   if (!parametersList.hasParameter("-classpath") && !parametersList.hasParameter("-cp")) {
    commandLine.addParameter("-classpath");
    commandLine.addParameter(javaParameters.getClassPath().getPathsString());
  }
  final String mainClass=javaParameters.getMainClass();
  commandLine.addParameter(mainClass);
  commandLine.addParameters(javaParameters.getProgramParametersList().getList());
  commandLine.setWorkDirectory(javaParameters.getWorkingDirectory());
  return commandLine;
}
