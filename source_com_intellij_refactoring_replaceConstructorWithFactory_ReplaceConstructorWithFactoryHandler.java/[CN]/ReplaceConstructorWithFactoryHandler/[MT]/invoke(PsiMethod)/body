{
  if (!method.isConstructor()) {
    String message="Cannot perform the refactoring.\n" + "Method is not a constructor.";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.REPLACE_CONSTRUCTOR_WITH_FACTORY,myProject);
    return;
  }
  PsiClass aClass=method.getContainingClass();
  if (aClass == null || aClass.getQualifiedName() == null) {
    showJspOrLocalClassMessage();
    return;
  }
  if (!checkAbstractClassOrInterfaceMessage(aClass))   return;
  if (!method.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(myProject,method))     return;
  }
  final ReplaceConstructorWithFactoryDialog dialog=new ReplaceConstructorWithFactoryDialog(myProject,method.getContainingClass(),new MyCallbackForMethod(method));
  dialog.show();
}
