{
  SingleRowPassInfo data=new SingleRowPassInfo(this);
  final TabInfo selected=myTabs.getSelectedInfo();
  final JComponent selectedToolbar=myTabs.myInfo2Toolbar.get(selected);
  final boolean layoutLabels=checkLayoutLabels();
  if (!layoutLabels) {
    data=myLastSingRowLayout;
  }
  data.insets=myTabs.getLayoutInsets();
  myTabs.resetLayout(layoutLabels || myTabs.isHideTabs());
  if (selectedToolbar != null) {
    getStrategy().setComponentAddins(data,selectedToolbar,myTabs.isToDrawBorderIfTabsHidden());
  }
  if (layoutLabels && !myTabs.isHideTabs()) {
    data.position=getStrategy().getStartPosition(data);
    recomputeToLayout(selectedToolbar,data);
    layoutLabelsAndGhosts(data);
    if (data.toDrop.size() > 0) {
      data.moreRect=getStrategy().getMoreRect(data);
    }
  }
  data.compPosition=getStrategy().getComponentPosition(data);
  if (selectedToolbar != null) {
    Rectangle tb=getStrategy().getToolbarRec(data,selectedToolbar);
    if (tb != null) {
      myTabs.layout(selectedToolbar,tb);
    }
  }
  if (selected != null) {
    final JComponent comp=selected.getComponent();
    Point point=getStrategy().getCompPoint(data);
    Dimension sizeDelta=getStrategy().getCompSizeDelta(data);
    myTabs.layoutComp(point.x,point.y,comp,sizeDelta.width,sizeDelta.height);
  }
  if (data.toLayout.size() > 0 && myTabs.myVisibleInfos.size() > 0) {
    final int left=myTabs.myVisibleInfos.indexOf(data.toLayout.get(0));
    final int right=myTabs.myVisibleInfos.indexOf(data.toLayout.get(data.toLayout.size() - 1));
    myMoreIcon.setPaintedIcons(left > 0,right < myTabs.myVisibleInfos.size() - 1);
  }
 else {
    myMoreIcon.setPaintedIcons(false,false);
  }
  myLastSingRowLayout=data;
  return data;
}
