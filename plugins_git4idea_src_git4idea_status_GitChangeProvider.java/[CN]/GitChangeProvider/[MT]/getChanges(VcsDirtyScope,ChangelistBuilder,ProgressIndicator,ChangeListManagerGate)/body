{
  final GitVcs vcs=GitVcs.getInstance(myProject);
  if (vcs == null) {
    return;
  }
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final Set<VirtualFile> rootsUnderGit=new HashSet<VirtualFile>(Arrays.asList(myVcsManager.getRootsUnderVcs(vcs)));
  final Set<VirtualFile> inputColl=new HashSet<VirtualFile>(rootsUnderGit);
  final Set<VirtualFile> existingInScope=new HashSet<VirtualFile>();
  for (  FilePath dir : dirtyScope.getRecursivelyDirtyDirectories()) {
    VirtualFile vf=dir.getVirtualFile();
    if (vf == null) {
      vf=lfs.findFileByIoFile(dir.getIOFile());
    }
    if (vf == null) {
      vf=lfs.refreshAndFindFileByIoFile(dir.getIOFile());
    }
    if (vf != null) {
      existingInScope.add(vf);
    }
  }
  inputColl.addAll(existingInScope);
  FileUtil.removeAncestors(inputColl,new Convertor<VirtualFile,String>(){
    @Override public String convert(    VirtualFile o){
      return o.getPath();
    }
  }
,new PairProcessor<VirtualFile,VirtualFile>(){
    @Override public boolean process(    VirtualFile parent,    VirtualFile child){
      if (!existingInScope.contains(child)) {
        debug("adding git root for check: " + child.getPath());
        ((VcsModifiableDirtyScope)dirtyScope).addDirtyDirRecursively(new FilePathImpl(child));
      }
      return true;
    }
  }
);
  final Collection<VirtualFile> affected=dirtyScope.getAffectedContentRoots();
  Collection<VirtualFile> roots=GitUtil.gitRootsForPaths(affected);
  try {
    final MyNonChangedHolder holder=new MyNonChangedHolder(myProject,dirtyScope.getDirtyFilesNoExpand(),addGate,myFileDocumentManager,myVcsManager);
    for (    VirtualFile root : roots) {
      debug("checking root: " + root.getPath());
      GitChangesCollector collector=isNewGitChangeProviderAvailable() ? GitNewChangesCollector.collect(myProject,myGit,myChangeListManager,myVcsManager,vcs,dirtyScope,root) : GitOldChangesCollector.collect(myProject,myChangeListManager,myVcsManager,vcs,dirtyScope,root);
      final Collection<Change> changes=collector.getChanges();
      holder.changed(changes);
      for (      Change file : changes) {
        debug("process change: " + ChangesUtil.getFilePath(file).getPath());
        builder.processChange(file,GitVcs.getKey());
      }
      for (      VirtualFile f : collector.getUnversionedFiles()) {
        builder.processUnversionedFile(f);
        holder.unversioned(f);
      }
      holder.feedBuilder(builder);
    }
  }
 catch (  VcsException e) {
    PROFILE_LOG.info(e);
    vcs.getExecutableValidator().showNotificationOrThrow(e);
  }
}
