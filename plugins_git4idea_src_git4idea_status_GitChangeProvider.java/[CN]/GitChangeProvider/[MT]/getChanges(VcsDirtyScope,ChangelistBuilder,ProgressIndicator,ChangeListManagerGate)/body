{
  final GitVcs vcs=GitVcs.getInstance(myProject);
  if (vcs == null) {
    return;
  }
  final Collection<VirtualFile> affected=dirtyScope.getAffectedContentRootsWithCheck();
  final Collection<VirtualFile> affectedContentRoots=dirtyScope.getAffectedContentRoots();
  if (affectedContentRoots.size() != affected.size()) {
    final Set<VirtualFile> set=new HashSet<VirtualFile>(affected);
    set.removeAll(affectedContentRoots);
    for (    VirtualFile file : set) {
      debug("adding git root for check: " + file.getPath());
      ((VcsModifiableDirtyScope)dirtyScope).addDirtyDirRecursively(new FilePathImpl(file));
    }
  }
  Collection<VirtualFile> roots=GitUtil.gitRootsForPaths(affected);
  try {
    final MyNonChangedHolder holder=new MyNonChangedHolder(myProject,dirtyScope.getDirtyFilesNoExpand(),addGate,myFileDocumentManager,myVcsManager);
    for (    VirtualFile root : roots) {
      debug("checking root: " + root.getPath());
      GitChangesCollector collector=isNewGitChangeProviderAvailable() ? GitNewChangesCollector.collect(myProject,myGit,myChangeListManager,myVcsManager,vcs,dirtyScope,root) : GitOldChangesCollector.collect(myProject,myChangeListManager,myVcsManager,vcs,dirtyScope,root);
      final Collection<Change> changes=collector.getChanges();
      holder.changed(changes);
      for (      Change file : changes) {
        debug("process change: " + ChangesUtil.getFilePath(file).getPath());
        builder.processChange(file,GitVcs.getKey());
      }
      for (      VirtualFile f : collector.getUnversionedFiles()) {
        builder.processUnversionedFile(f);
        holder.unversioned(f);
      }
      holder.feedBuilder(builder);
    }
  }
 catch (  VcsException e) {
    PROFILE_LOG.info(e);
    vcs.getExecutableValidator().showNotificationOrThrow(e);
  }
}
