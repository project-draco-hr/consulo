{
  final Set<FilePath> recursivelyDirtyDirectories=dirtyScope.getRecursivelyDirtyDirectories();
  if (recursivelyDirtyDirectories.isEmpty()) {
    return;
  }
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final Set<VirtualFile> rootsUnderGit=new HashSet<VirtualFile>(Arrays.asList(vcsManager.getRootsUnderVcs(vcs)));
  final Set<VirtualFile> inputColl=new HashSet<VirtualFile>(rootsUnderGit);
  final Set<VirtualFile> existingInScope=new HashSet<VirtualFile>();
  for (  FilePath dir : recursivelyDirtyDirectories) {
    VirtualFile vf=dir.getVirtualFile();
    if (vf == null) {
      vf=lfs.findFileByIoFile(dir.getIOFile());
    }
    if (vf == null) {
      vf=lfs.refreshAndFindFileByIoFile(dir.getIOFile());
    }
    if (vf != null) {
      existingInScope.add(vf);
    }
  }
  inputColl.addAll(existingInScope);
  FileUtil.removeAncestors(inputColl,new Convertor<VirtualFile,String>(){
    @Override public String convert(    VirtualFile o){
      return o.getPath();
    }
  }
,new PairProcessor<VirtualFile,VirtualFile>(){
    @Override public boolean process(    VirtualFile parent,    VirtualFile child){
      if (!existingInScope.contains(child) && existingInScope.contains(parent)) {
        debug("adding git root for check: " + child.getPath());
        ((VcsModifiableDirtyScope)dirtyScope).addDirtyDirRecursively(new FilePathImpl(child));
      }
      return true;
    }
  }
);
}
