{
  PsiSubstitutor substitutor=(PsiSubstitutor)item.getAttribute(LookupItem.SUBSTITUTOR);
  Object o=item.getObject();
  String text=getName(item);
  substitutor=substitutor != null ? substitutor : PsiSubstitutor.EMPTY;
  if (o instanceof PsiElement) {
    PsiElement element=(PsiElement)o;
    if (element instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)element;
      if (showSignature(item)) {
        String parms=PsiFormatUtil.formatMethod(method,substitutor,PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE);
        text+=parms;
      }
    }
  }
  final @NonNls String TYPE_GAP="XXX";
  if (o instanceof PsiElement) {
    if (showSignature(item)) {
      PsiType typeAttr=(PsiType)item.getAttribute(LookupItem.TYPE_ATTR);
      if (typeAttr != null) {
        text+=typeAttr.getPresentableText() + TYPE_GAP;
      }
 else {
        PsiElement element=(PsiElement)o;
        if (element instanceof PsiMethod) {
          PsiMethod method=(PsiMethod)element;
          if (!method.isConstructor()) {
            text+=substitutor.substitute(method.getReturnType()).getPresentableText() + TYPE_GAP;
          }
        }
 else         if (element instanceof PsiVariable) {
          PsiVariable variable=(PsiVariable)element;
          text+=substitutor.substitute(variable.getType()).getPresentableText() + TYPE_GAP;
        }
 else         if (element instanceof PsiExpression) {
          PsiExpression expression=(PsiExpression)element;
          PsiType type=expression.getType();
          if (type != null) {
            text+=type.getPresentableText() + TYPE_GAP;
          }
        }
      }
    }
  }
 else   if (o instanceof Template) {
    text+=getTemplateDescriptionString((Template)o) + TYPE_GAP;
  }
 else   if (o instanceof LookupValueWithUIHint && ((LookupValueWithUIHint)o).getTypeHint() != null) {
    text+=((LookupValueWithUIHint)o).getTypeHint() + TYPE_GAP;
  }
  if (item.getAttribute(LookupItem.FORCE_QUALIFY) != null) {
    if (o instanceof PsiMember && ((PsiMember)o).getContainingClass() != null) {
      text=((PsiMember)o).getContainingClass().getName() + "." + text;
    }
  }
  int width=myPanel.getFontMetrics(NORMAL_FONT).stringWidth(text) + 2;
  String tailText=(String)item.getAttribute(LookupItem.TAIL_TEXT_ATTR);
  if (item.getAttribute(LookupItem.INDICATE_ANONYMOUS) != null) {
    if (item.getObject() instanceof PsiClass) {
      final PsiClass psiClass=(PsiClass)item.getObject();
      if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
        tailText+="{...}";
      }
    }
  }
  if (tailText != null) {
    boolean isSmall=item.getAttribute(LookupItem.TAIL_TEXT_SMALL_ATTR) != null;
    FontMetrics fontMetrics=myPanel.getFontMetrics(isSmall ? SMALL_FONT : NORMAL_FONT);
    width+=fontMetrics.stringWidth(tailText);
  }
  return width;
}
