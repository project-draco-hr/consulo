{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final Component component=e.getData(PlatformDataKeys.CONTEXT_COMPONENT);
  FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.popup.action");
  final GotoActionModel model=new GotoActionModel(project,component);
  final GotoActionCallback<Object> callback=new GotoActionCallback<Object>(){
    @Override public void elementChosen(    ChooseByNamePopup popup,    final Object element){
      if (element instanceof OptionDescription) {
        final String configurableId=((OptionDescription)element).getConfigurableId();
        final String enteredText=popup.getEnteredText();
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            ShowSettingsUtilImpl.showSettingsDialog(project,configurableId,enteredText);
          }
        }
);
      }
 else {
        final AnAction action=(AnAction)((Map.Entry)element).getKey();
        if (action != null) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              if (component == null || !component.isShowing()) {
                return;
              }
              final Presentation presentation=action.getTemplatePresentation().clone();
              final DataContext context=DataManager.getInstance().getDataContext(component);
              final AnActionEvent event=new AnActionEvent(e.getInputEvent(),context,e.getPlace(),presentation,ActionManager.getInstance(),e.getModifiers());
              if (ActionUtil.lastUpdateAndCheckDumb(action,event,true)) {
                if (action instanceof ActionGroup) {
                  JBPopupFactory.getInstance().createActionGroupPopup(presentation.getText(),(ActionGroup)action,context,JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,false).showInBestPositionFor(context);
                }
 else {
                  ActionUtil.performActionDumbAware(action,event);
                }
              }
            }
          }
,ModalityState.NON_MODAL);
        }
      }
    }
  }
;
  Pair<String,Integer> start=getInitialText(false,e);
  showNavigationPopup(callback,null,ChooseByNamePopup.createPopup(project,model,new DefaultChooseByNameItemProvider(null){
    @Override protected void sortNamesList(    @NotNull String namePattern,    @NotNull List<String> namesList){
      Collections.sort(namesList,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          if (o1.equals(GotoActionModel.SETTINGS_KEY))           return 1;
          if (o2.equals(GotoActionModel.SETTINGS_KEY))           return -1;
          return o1.compareToIgnoreCase(o2);
        }
      }
);
    }
  }
,start.first,false,start.second));
}
