{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final Component component=e.getData(PlatformDataKeys.CONTEXT_COMPONENT);
  FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.popup.action");
  final GotoActionModel model=new GotoActionModel(project,component);
  final GotoActionCallback<Object> callback=new GotoActionCallback<Object>(){
    @Override public void elementChosen(    ChooseByNamePopup popup,    final Object element){
      if (element instanceof OptionDescription) {
        ShowSettingsUtilImpl.showSettingsDialog(project,((OptionDescription)element).getConfigurableId(),popup.getEnteredText());
      }
 else {
        final AnAction action=(AnAction)((Map.Entry)element).getKey();
        if (action != null) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (component == null || !component.isShowing()) {
                return;
              }
              final AnActionEvent event=new AnActionEvent(e.getInputEvent(),DataManager.getInstance().getDataContext(component),e.getPlace(),(Presentation)action.getTemplatePresentation().clone(),ActionManager.getInstance(),e.getModifiers());
              if (ActionUtil.lastUpdateAndCheckDumb(action,event,true)) {
                action.actionPerformed(event);
              }
            }
          }
,ModalityState.NON_MODAL);
        }
      }
    }
  }
;
  Pair<String,Integer> start=getInitialText(false,e);
  showNavigationPopup(callback,null,ChooseByNamePopup.createPopup(project,model,new DefaultChooseByNameItemProvider(null){
    @Override protected void sortNamesList(    String namePattern,    List<String> namesList){
    }
  }
,start.first,false,start.second));
}
