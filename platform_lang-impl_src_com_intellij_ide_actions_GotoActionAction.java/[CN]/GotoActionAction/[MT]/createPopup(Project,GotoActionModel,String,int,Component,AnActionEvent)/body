{
  ChooseByNamePopup oldPopup=project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY);
  if (oldPopup != null) {
    oldPopup.close(false);
  }
  final ChooseByNamePopup popup=new ChooseByNamePopup(project,model,new GotoActionItemProvider(model),oldPopup,initialText,false,initialIndex){
    @Override protected void initUI(    Callback callback,    ModalityState modalityState,    boolean allowMultipleSelection){
      super.initUI(callback,modalityState,allowMultipleSelection);
      myList.addListSelectionListener(new ListSelectionListener(){
        @Override public void valueChanged(        ListSelectionEvent e){
          Object value=myList.getSelectedValue();
          String text=getText(value);
          if (text != null && myDropdownPopup != null) {
            myDropdownPopup.setAdText(text,SwingConstants.LEFT);
          }
        }
        @Nullable private String getText(        @Nullable Object o){
          if (o instanceof GotoActionModel.MatchedValue) {
            GotoActionModel.MatchedValue mv=(GotoActionModel.MatchedValue)o;
            if (mv.value instanceof BooleanOptionDescription || mv.value instanceof GotoActionModel.ActionWrapper && ((GotoActionModel.ActionWrapper)mv.value).getAction() instanceof ToggleAction) {
              return "Press " + KeymapUtil.getKeystrokeText(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0)) + " to toggle option";
            }
          }
          return getAdText();
        }
      }
);
    }
    @NotNull @Override protected Set<Object> filter(    @NotNull Set<Object> elements){
      return super.filter(model.sort(elements));
    }
    @Override protected boolean closeForbidden(    boolean ok){
      if (!ok)       return false;
      Object element=getChosenElement();
      return element instanceof GotoActionModel.MatchedValue && processOptionInplace(((GotoActionModel.MatchedValue)element).value,this,component,e) || super.closeForbidden(true);
    }
  }
;
  if (project != null) {
    project.putUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY,popup);
  }
  popup.addMouseClickListener(new MouseAdapter(){
    @Override public void mouseClicked(    @NotNull MouseEvent me){
      Object element=popup.getSelectionByPoint(me.getPoint());
      if (element instanceof GotoActionModel.MatchedValue) {
        if (processOptionInplace(((GotoActionModel.MatchedValue)element).value,popup,component,e)) {
          me.consume();
        }
      }
    }
  }
);
  return popup;
}
