{
  new Task.Backgroundable(project,GitBundle.message("changes.retrieving",revision)){
    public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      try {
        VirtualFile vcsRoot=GitUtil.getGitRoot(file);
        final CommittedChangeList changeList=GitChangeUtils.getRevisionChanges(project,vcsRoot,revision,true,local,revertable);
        if (changeList != null) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            public void run(){
              AbstractVcsHelper.getInstance(project).showChangesListBrowser(changeList,GitShowAllSubmittedFilesAction.getTitle(revision));
            }
          }
);
        }
      }
 catch (      final VcsException e) {
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          public void run(){
            GitUIUtil.showOperationError(project,e,"git show");
          }
        }
);
      }
    }
  }
.queue();
}
