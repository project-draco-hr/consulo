{
  if (!isNoSSH()) {
    throw new IllegalStateException("Commands that require SSH could not be run using this method");
  }
  final VcsException[] ex=new VcsException[1];
  final String[] result=new String[1];
  final Semaphore sem=new Semaphore(0);
  addListener(new GitHandlerListener(){
    public void processTerminated(    final int exitCode){
      try {
        if (exitCode == 0 || isIgnoredErrorCode(exitCode)) {
          result[0]=getStdout();
        }
 else {
          String msg=getStderr();
          if (msg.length() == 0) {
            msg=getStdout();
          }
          if (msg.length() == 0) {
            msg=GitBundle.message("git.error.exit",exitCode);
          }
          ex[0]=new VcsException(msg);
        }
      }
 catch (      Throwable t) {
        ex[0]=new VcsException(t.toString(),t);
      }
 finally {
        sem.release();
      }
    }
    public void startFailed(    final Throwable exception){
      try {
        ex[0]=new VcsException("Process failed to start (" + myCommandLine.getCommandLineString() + "): "+ exception.toString(),exception);
      }
  finally {
        sem.release();
      }
    }
  }
);
  GitHandlerUtil.runInCurrentThread(this,null);
  try {
    sem.acquire();
  }
 catch (  InterruptedException e) {
    throw new VcsException("The git process is interrupted: " + myCommandLine.getCommandLineString(),e);
  }
  if (ex[0] != null) {
    throw ex[0];
  }
  if (result[0] == null) {
    throw new VcsException("The git command returned null: " + myCommandLine.getCommandLineString());
  }
  return result[0];
}
