{
  final StringBuilder entire;
  final StringBuilder lineRest;
  final boolean suppressed;
  if (ProcessOutputTypes.STDOUT == outputType) {
    entire=myStdout;
    lineRest=myStdoutLine;
    suppressed=isStdoutSuppressed();
  }
 else   if (ProcessOutputTypes.STDERR == outputType) {
    entire=myStderr;
    lineRest=myStderrLine;
    suppressed=isStderrSuppressed();
  }
 else {
    return;
  }
  entire.append(text);
  if (suppressed || myVcs == null) {
    LOG.debug(text);
    return;
  }
  int last=lineRest.length() > 0 ? lineRest.charAt(lineRest.length() - 1) : -1;
  int start=0;
  for (int i=0; i < text.length(); i++) {
    char ch=text.charAt(i);
    if (last == '\n' || last == '\r') {
      int savedPos;
      if ((ch == '\n' || ch == '\r') && ch != last) {
        savedPos=i - 1;
      }
 else {
        savedPos=i;
      }
      if (last != '\r' || savedPos != i) {
        String line;
        if (lineRest.length() == 0) {
          line=lineRest.append(text.substring(start,savedPos)).toString();
          lineRest.setLength(0);
        }
 else {
          line=text.substring(start,savedPos);
        }
        if (ProcessOutputTypes.STDOUT == outputType && !StringUtil.isEmptyOrSpaces(line)) {
          myVcs.showMessages(line);
          LOG.info(line.trim());
        }
 else         if (ProcessOutputTypes.STDERR == outputType && !StringUtil.isEmptyOrSpaces(line)) {
          myVcs.showErrorMessages(line);
          LOG.info(line.trim());
        }
      }
      start=savedPos;
    }
    last=ch;
  }
  if (start != text.length()) {
    lineRest.append(text.substring(start));
  }
}
