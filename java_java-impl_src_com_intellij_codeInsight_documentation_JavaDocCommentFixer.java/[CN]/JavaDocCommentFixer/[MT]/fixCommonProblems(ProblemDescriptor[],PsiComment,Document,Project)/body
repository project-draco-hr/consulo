{
  List<PsiElement> toRemove=new ArrayList<PsiElement>();
  for (  ProblemDescriptor problem : problems) {
    PsiElement element=problem.getPsiElement();
    if (element == null) {
      continue;
    }
    if (comment.getTextRange().contains(element.getTextRange())) {
      for (PsiElement e=element; e != null; e=e.getParent()) {
        if (e instanceof PsiDocTag) {
          toRemove.add(e);
          break;
        }
      }
    }
 else {
      QuickFix[] fixes=problem.getFixes();
      if (fixes != null && fixes.length > 0) {
        fixes[0].applyFix(project,problem);
      }
    }
  }
  if (toRemove.isEmpty()) {
    return;
  }
  if (toRemove.size() > 1) {
    Collections.sort(toRemove,COMPARATOR);
  }
  PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(project);
  psiDocumentManager.doPostponedOperationsAndUnblockDocument(document);
  CharSequence text=document.getCharsSequence();
  for (  PsiElement element : toRemove) {
    int startOffset=element.getTextRange().getStartOffset();
    int startLine=document.getLineNumber(startOffset);
    int i=CharArrayUtil.shiftBackward(text,startOffset - 1," \t");
    if (i >= 0) {
      char c=text.charAt(i);
      if (c == '*') {
        i=CharArrayUtil.shiftBackward(text,i - 1," \t");
      }
    }
    if (i >= 0 && text.charAt(i) == '\n') {
      startOffset=Math.max(i,document.getLineStartOffset(startLine) - 1);
    }
    int endOffset=element.getTextRange().getEndOffset();
    i=CharArrayUtil.shiftBackward(text,endOffset - 1," \t*");
    if (i > 0 && text.charAt(i) == '\n') {
      endOffset=i;
    }
    document.deleteString(startOffset,endOffset);
  }
  psiDocumentManager.commitDocument(document);
}
