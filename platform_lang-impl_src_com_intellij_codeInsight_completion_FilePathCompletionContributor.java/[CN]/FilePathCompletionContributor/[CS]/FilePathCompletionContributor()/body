{
  extend(CompletionType.BASIC,psiElement(),new org.mustbe.consulo.codeInsight.completion.CompletionProvider(){
    @RequiredReadAction @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiReference psiReference=parameters.getPosition().getContainingFile().findReferenceAt(parameters.getOffset());
      if (getReference(psiReference) != null && parameters.getInvocationCount() == 1) {
        final String shortcut=getActionShortcut(IdeActions.ACTION_CODE_COMPLETION);
        if (shortcut != null) {
          result.addLookupAdvertisement(CodeInsightBundle.message("class.completion.file.path",shortcut));
        }
      }
    }
  }
);
  extend(CompletionType.BASIC,psiElement(),new org.mustbe.consulo.codeInsight.completion.CompletionProvider(){
    @RequiredReadAction @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    ProcessingContext context,    @NotNull final CompletionResultSet _result){
      if (!parameters.isExtendedCompletion()) {
        return;
      }
      @NotNull final CompletionResultSet result=_result.caseInsensitive();
      final PsiElement e=parameters.getPosition();
      final Project project=e.getProject();
      final PsiReference psiReference=parameters.getPosition().getContainingFile().findReferenceAt(parameters.getOffset());
      final Pair<FileReference,Boolean> fileReferencePair=getReference(psiReference);
      if (fileReferencePair != null) {
        final FileReference first=fileReferencePair.getFirst();
        if (first == null)         return;
        final FileReferenceSet set=first.getFileReferenceSet();
        String prefix=set.getPathString().substring(0,parameters.getOffset() - set.getElement().getTextRange().getStartOffset() - set.getStartInElement());
        List<String> pathPrefixParts=null;
        int lastSlashIndex;
        if ((lastSlashIndex=prefix.lastIndexOf('/')) != -1) {
          pathPrefixParts=StringUtil.split(prefix.substring(0,lastSlashIndex),"/");
          prefix=prefix.substring(lastSlashIndex + 1);
        }
        final CompletionResultSet __result=result.withPrefixMatcher(prefix).caseInsensitive();
        final PsiFile originalFile=parameters.getOriginalFile();
        final VirtualFile contextFile=originalFile.getVirtualFile();
        if (contextFile != null) {
          final String[] fileNames=getAllNames(project);
          final Set<String> resultNames=new TreeSet<String>();
          for (          String fileName : fileNames) {
            if (filenameMatchesPrefixOrType(fileName,prefix,set.getSuitableFileTypes(),parameters.getInvocationCount())) {
              resultNames.add(fileName);
            }
          }
          final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
          final Module contextModule=index.getModuleForFile(contextFile);
          if (contextModule != null) {
            final List<FileReferenceHelper> helpers=FileReferenceHelperRegistrar.getHelpers(originalFile);
            final GlobalSearchScope scope=ProjectScope.getProjectScope(project);
            for (            final String name : resultNames) {
              ProgressManager.checkCanceled();
              final PsiFile[] files=FilenameIndex.getFilesByName(project,name,scope);
              if (files.length > 0) {
                for (                final PsiFile file : files) {
                  ProgressManager.checkCanceled();
                  final VirtualFile virtualFile=file.getVirtualFile();
                  if (virtualFile != null && virtualFile.isValid() && !Comparing.equal(virtualFile,contextFile)) {
                    for (                    FileReferenceHelper contextHelper : helpers) {
                      ProgressManager.checkCanceled();
                      if (contextHelper.isMine(project,virtualFile)) {
                        if (pathPrefixParts == null || fileMatchesPathPrefix(contextHelper.getPsiFileSystemItem(project,virtualFile),pathPrefixParts)) {
                          __result.addElement(new FilePathLookupItem(file,contextHelper));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (set.getSuitableFileTypes().length > 0 && parameters.getInvocationCount() == 1) {
          final String shortcut=getActionShortcut(IdeActions.ACTION_CODE_COMPLETION);
          if (shortcut != null) {
            result.addLookupAdvertisement(CodeInsightBundle.message("class.completion.file.path.all.variants",shortcut));
          }
        }
        if (fileReferencePair.getSecond())         result.stopHere();
      }
    }
  }
);
}
