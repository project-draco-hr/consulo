{
  super.visitMethod(method);
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  PsiMethod leastConcreteSuperMethod=null;
  final PsiMethod[] superMethods=method.findSuperMethods(true);
  for (  final PsiMethod superMethod : superMethods) {
    final PsiClass containingClass=superMethod.getContainingClass();
    if (!superMethod.hasModifierProperty(PsiModifier.ABSTRACT) && !containingClass.isInterface()) {
      leastConcreteSuperMethod=superMethod;
      break;
    }
  }
  if (leastConcreteSuperMethod == null) {
    return;
  }
  final PsiClass containingClass=leastConcreteSuperMethod.getContainingClass();
  final String className=containingClass.getQualifiedName();
  if ("java.lang.Object".equals(className)) {
    return;
  }
  if (ignoreEmptySuperMethods) {
    final PsiMethod navigationElement=(PsiMethod)leastConcreteSuperMethod.getNavigationElement();
    if (MethodUtils.isEmpty(navigationElement)) {
      return;
    }
  }
  if (containsSuperCall(body,leastConcreteSuperMethod)) {
    return;
  }
  registerMethodError(method);
}
