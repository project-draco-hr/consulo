{
  RadComponent component=null;
  final RadComponent draggerHost=FormEditingUtil.getDraggerHost(myEditor);
  if (draggerHost != null) {
    final JComponent delegee=draggerHost.getDelegee();
    final Point p=SwingUtilities.convertPoint(delegee,0,0,e.getComponent());
    if (p.x - MainProcessor.DRAGGER_SIZE <= e.getX() && e.getX() <= p.x && p.y - MainProcessor.DRAGGER_SIZE <= e.getY() && e.getY() <= p.y) {
      component=draggerHost;
    }
  }
  if (component == null) {
    component=FormEditingUtil.getRadComponentAt(myEditor,e.getX(),e.getY());
  }
  if (component == null) {
    return;
  }
  final ComponentItem selectedItem=myEditor.getPalettePanel().getActiveItem();
  if (selectedItem != null) {
    myInsertComponentProcessor.setSticky(e.isControlDown() || e.isShiftDown());
    myCurrentProcessor=myInsertComponentProcessor;
    return;
  }
  if (e.isControlDown()) {
  }
 else   if (e.isShiftDown()) {
  }
 else {
    if (!component.isSelected()) {
      FormEditingUtil.clearSelection(myEditor.getRootContainer());
      component.setSelected(true);
    }
  }
  if (myCurrentProcessor != null) {
    myCurrentProcessor.cancelOperation();
    myCurrentProcessor=null;
  }
  final Point point=SwingUtilities.convertPoint(e.getComponent(),e.getPoint(),component.getDelegee());
  final int resizeMask=Painter.getResizeMask(component,point.x,point.y);
  if (resizeMask != 0) {
    if (component.getParent().isXY()) {
      myCurrentProcessor=new ResizeProcessor(myEditor,component,resizeMask);
    }
  }
 else   if (component instanceof RadRootContainer || ((component instanceof RadContainer) && e.isShiftDown())) {
    myCurrentProcessor=new GroupSelectionProcessor(myEditor,(RadContainer)component);
  }
 else   if (!e.isShiftDown()) {
    myCurrentProcessor=new DragSelectionProcessor(myEditor);
  }
  updateDragger(e);
}
