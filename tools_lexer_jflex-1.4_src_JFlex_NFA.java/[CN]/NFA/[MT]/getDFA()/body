{
  Hashtable dfaStates=new Hashtable(numStates);
  Vector dfaVector=new Vector(numStates);
  DFA dfa=new DFA(2 * numLexStates,numInput);
  int numDFAStates=0;
  int currentDFAState=0;
  Out.println("Converting NFA to DFA : ");
  epsilonFill();
  StateSet currentState, newState;
  for (int i=0; i < 2 * numLexStates; i++) {
    newState=epsilon[i];
    dfaStates.put(newState,new Integer(numDFAStates));
    dfaVector.addElement(newState);
    dfa.setLexState(i,numDFAStates);
    dfa.setFinal(numDFAStates,containsFinal(newState));
    dfa.setPushback(numDFAStates,containsPushback(newState));
    dfa.setAction(numDFAStates,getAction(newState));
    numDFAStates++;
  }
  numDFAStates--;
  if (Options.DEBUG)   Out.debug("DFA start states are :" + Out.NL + dfaStates+ Out.NL+ Out.NL+ "ordered :"+ Out.NL+ dfaVector);
  currentDFAState=0;
  StateSet tempStateSet=NFA.tempStateSet;
  StateSetEnumerator states=NFA.states;
  newState=new StateSet(numStates);
  while (currentDFAState <= numDFAStates) {
    currentState=(StateSet)dfaVector.elementAt(currentDFAState);
    for (char input=0; input < numInput; input++) {
      tempStateSet.clear();
      states.reset(currentState);
      while (states.hasMoreElements())       tempStateSet.add(table[states.nextElement()][input]);
      newState.copy(tempStateSet);
      states.reset(tempStateSet);
      while (states.hasMoreElements())       newState.add(epsilon[states.nextElement()]);
      if (newState.containsElements()) {
        Integer nextDFAState=(Integer)dfaStates.get(newState);
        if (nextDFAState != null) {
          dfa.addTransition(currentDFAState,input,nextDFAState.intValue());
        }
 else {
          if (Options.progress)           Out.print(".");
          numDFAStates++;
          StateSet storeState=new StateSet(newState);
          dfaStates.put(storeState,new Integer(numDFAStates));
          dfaVector.addElement(storeState);
          dfa.addTransition(currentDFAState,input,numDFAStates);
          dfa.setFinal(numDFAStates,containsFinal(storeState));
          dfa.setPushback(numDFAStates,containsPushback(storeState));
          dfa.setAction(numDFAStates,getAction(storeState));
        }
      }
    }
    currentDFAState++;
  }
  if (Options.verbose)   Out.println("");
  return dfa;
}
