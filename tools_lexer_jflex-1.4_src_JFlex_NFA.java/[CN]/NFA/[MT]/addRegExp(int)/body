{
  if (Options.DEBUG)   Out.debug("Adding nfa for regexp " + regExpNum + " :"+ Out.NL+ regExps.getRegExp(regExpNum));
  IntPair nfa=insertNFA(regExps.getRegExp(regExpNum));
  Enumeration lexStates=regExps.getStates(regExpNum).elements();
  if (!lexStates.hasMoreElements())   lexStates=scanner.states.getInclusiveStates();
  while (lexStates.hasMoreElements()) {
    int stateNum=((Integer)lexStates.nextElement()).intValue();
    if (!regExps.isBOL(regExpNum))     addEpsilonTransition(2 * stateNum,nfa.start);
    addEpsilonTransition(2 * stateNum + 1,nfa.start);
  }
  if (regExps.getLookAhead(regExpNum) != null) {
    Action a=regExps.getAction(regExpNum);
    if (a.lookAhead() == Action.FINITE_CHOICE) {
      insertLookAheadChoices(nfa.end,a,regExps.getLookAhead(regExpNum));
      scanner.actions.remove(a);
    }
 else {
      RegExp r1=regExps.getRegExp(regExpNum);
      RegExp r2=regExps.getLookAhead(regExpNum);
      IntPair look=insertNFA(r2);
      addEpsilonTransition(nfa.end,look.start);
      action[look.end]=a;
      isFinal[look.end]=true;
      if (a.lookAhead() == Action.GENERAL_LOOK) {
        IntPair forward=insertNFA(r1);
        IntPair backward=insertNFA(r2.rev(macros));
        isFinal[forward.end]=true;
        action[forward.end]=new Action(Action.FORWARD_ACTION);
        isFinal[backward.end]=true;
        action[backward.end]=new Action(Action.BACKWARD_ACTION);
        int entry=2 * (regExps.getLookEntry(regExpNum) + numLexStates);
        addEpsilonTransition(entry,forward.start);
        addEpsilonTransition(entry + 1,backward.start);
        a.setEntryState(entry);
      }
    }
  }
 else {
    action[nfa.end]=regExps.getAction(regExpNum);
    isFinal[nfa.end]=true;
  }
}
