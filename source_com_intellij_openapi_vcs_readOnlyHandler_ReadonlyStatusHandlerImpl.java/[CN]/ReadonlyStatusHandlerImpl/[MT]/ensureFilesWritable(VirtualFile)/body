{
  if (files.length == 0) {
    return new OperationStatus(VirtualFile.EMPTY_ARRAY,VirtualFile.EMPTY_ARRAY);
  }
  ApplicationManager.getApplication().assertIsDispatchThread();
  Set<VirtualFile> realFiles=new THashSet<VirtualFile>(files.length);
  for (  VirtualFile file : files) {
    if (file instanceof VirtualFileWindowImpl)     file=((VirtualFileWindow)file).getDelegate();
    realFiles.add(file);
  }
  files=realFiles.toArray(new VirtualFile[realFiles.size()]);
  final long[] modificationStamps=new long[files.length];
  for (int i=0; i < files.length; i++) {
    modificationStamps[i]=files[i].getModificationStamp();
  }
  final FileInfo[] fileInfos=createFileInfos(files);
  if (fileInfos.length == 0) {
    return createResultStatus(files,modificationStamps);
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return createResultStatus(files,modificationStamps);
  }
  final int savedEventCount=IdeEventQueue.getInstance().getEventCount();
  if (myState.SHOW_DIALOG) {
    new ReadOnlyStatusDialog(myProject,fileInfos).show();
  }
 else {
    processFiles(new ArrayList<FileInfo>(Arrays.asList(fileInfos)));
  }
  IdeEventQueue.getInstance().setEventCount(savedEventCount);
  return createResultStatus(files,modificationStamps);
}
