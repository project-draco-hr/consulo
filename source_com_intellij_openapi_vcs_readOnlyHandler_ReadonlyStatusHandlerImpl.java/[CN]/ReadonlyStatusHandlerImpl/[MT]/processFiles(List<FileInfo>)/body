{
  FileInfo[] copy=fileInfos.toArray(new FileInfo[fileInfos.size()]);
  MultiValuesMap<EditFileProvider,VirtualFile> providerToFile=new MultiValuesMap<EditFileProvider,VirtualFile>();
  final List<VirtualFile> unknown=new ArrayList<VirtualFile>();
  for (int i=0; i < copy.length; i++) {
    FileInfo fileInfo=copy[i];
    if (fileInfo.getUseVersionControl()) {
      providerToFile.put(fileInfo.getEditFileProvider(),fileInfo.getFile());
    }
 else {
      unknown.add(fileInfo.getFile());
    }
  }
  if (!unknown.isEmpty()) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        try {
          for (Iterator<VirtualFile> iterator=unknown.iterator(); iterator.hasNext(); ) {
            VirtualFile file=iterator.next();
            ReadOnlyAttributeUtil.setReadOnlyAttribute(file,false);
            file.refresh(false,false);
          }
        }
 catch (        IOException e) {
        }
      }
    }
);
  }
  for (Iterator<EditFileProvider> iterator=providerToFile.keySet().iterator(); iterator.hasNext(); ) {
    EditFileProvider editFileProvider=iterator.next();
    final Collection<VirtualFile> files=providerToFile.get(editFileProvider);
    try {
      editFileProvider.editFiles(files.toArray(new VirtualFile[files.size()]));
    }
 catch (    VcsException e) {
      Messages.showErrorDialog("Cannot edit file(s): " + e.getLocalizedMessage(),"Edit Files");
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        for (Iterator<VirtualFile> iterator1=files.iterator(); iterator1.hasNext(); ) {
          iterator1.next().refresh(false,false);
        }
      }
    }
);
  }
  for (int i=0; i < copy.length; i++) {
    FileInfo fileInfo=copy[i];
    if (fileInfo.getFile().isWritable()) {
      fileInfos.remove(fileInfo);
    }
  }
}
