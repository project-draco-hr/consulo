{
  long[] modificationStamps=new long[files.length];
  for (int i=0; i < files.length; i++) {
    modificationStamps[i]=files[i].getModificationStamp();
  }
  final FileInfo[] fileInfos=createFileInfos(files);
  if (files.length == 0)   return new OperationStatus(VirtualFile.EMPTY_ARRAY,VirtualFile.EMPTY_ARRAY);
  Runnable handleAction=new Runnable(){
    public void run(){
      if (SHOW_DIALOG) {
        HandleReadOnlyStatusDialog dialog=new HandleReadOnlyStatusDialog(myProject,fileInfos);
        dialog.show();
      }
 else {
        for (int i=0; i < fileInfos.length; i++) {
          fileInfos[i].handle();
        }
      }
    }
  }
;
  ApplicationManager.getApplication().assertIsDispatchThread();
  int savedEventCount=IdeEventQueue.getInstance().getEventCount();
  handleAction.run();
  IdeEventQueue.getInstance().setEventCount(savedEventCount);
  List<VirtualFile> readOnlyFiles=new ArrayList<VirtualFile>();
  List<VirtualFile> updatedFiles=new ArrayList<VirtualFile>();
  for (int i=0; i < files.length; i++) {
    VirtualFile file=files[i];
    if (!file.isWritable()) {
      readOnlyFiles.add(file);
    }
    if (modificationStamps[i] != file.getModificationStamp()) {
      updatedFiles.add(file);
    }
  }
  return new OperationStatus(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]),updatedFiles.toArray(new VirtualFile[updatedFiles.size()]));
}
