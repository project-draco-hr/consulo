{
  final List<UsageInfo> usages=new ArrayList<UsageInfo>();
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final Set<PsiFile> deps=new HashSet<PsiFile>();
  for (  PsiFile psiFile : searchFor) {
    for (    DependenciesBuilder builder : builders) {
      final Set<PsiFile> depsByBuilder=builder.getDependencies().get(psiFile);
      if (depsByBuilder != null) {
        deps.addAll(depsByBuilder);
      }
    }
  }
  deps.retainAll(searchIn);
  if (deps.isEmpty())   return new UsageInfo[0];
  int totalCount=deps.size();
  int count=0;
  for (  final PsiFile psiFile : deps) {
    count=updateIndicator(indicator,totalCount,count,psiFile);
    DependenciesBuilder.analyzeFileDependencies(psiFile,new DependenciesBuilder.DependencyProcessor(){
      public void process(      PsiElement place,      PsiElement dependency){
        PsiFile dependencyFile=dependency.getContainingFile();
        if (searchFor.contains(dependencyFile)) {
          usages.add(new UsageInfo(place));
        }
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
