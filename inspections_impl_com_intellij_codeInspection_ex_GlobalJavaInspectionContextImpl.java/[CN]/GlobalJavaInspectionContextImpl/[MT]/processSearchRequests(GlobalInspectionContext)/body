{
  final RefManager refManager=context.getRefManager();
  final AnalysisScope scope=refManager.getScope();
  final SearchScope searchScope=new GlobalSearchScope(){
    public boolean contains(    VirtualFile file){
      return !scope.contains(file) || file.getFileType() != StdFileTypes.JAVA;
    }
    public int compare(    VirtualFile file1,    VirtualFile file2){
      return 0;
    }
    public boolean isSearchInModuleContent(    @NotNull Module aModule){
      return true;
    }
    public boolean isSearchInLibraries(){
      return false;
    }
  }
;
  if (myDerivedClassesRequests != null) {
    List<PsiElement> sortedIDs=getSortedIDs(myDerivedClassesRequests);
    for (    PsiElement sortedID : sortedIDs) {
      final PsiClass psiClass=(PsiClass)sortedID;
      ((GlobalInspectionContextImpl)context).incrementJobDoneAmount(GlobalInspectionContextImpl.FIND_EXTERNAL_USAGES,psiClass.getQualifiedName());
      final List<DerivedClassesProcessor> processors=myDerivedClassesRequests.get(psiClass);
      ClassInheritorsSearch.search(psiClass,searchScope,false).forEach(new PsiElementProcessorAdapter<PsiClass>(new PsiElementProcessor<PsiClass>(){
        public boolean execute(        PsiClass inheritor){
          if (scope.contains(inheritor))           return true;
          DerivedClassesProcessor[] processorsArrayed=processors.toArray(new DerivedClassesProcessor[processors.size()]);
          for (          DerivedClassesProcessor processor : processorsArrayed) {
            if (!processor.process(inheritor)) {
              processors.remove(processor);
            }
          }
          return !processors.isEmpty();
        }
      }
));
    }
    myDerivedClassesRequests=null;
  }
  if (myDerivedMethodsRequests != null) {
    List<PsiElement> sortedIDs=getSortedIDs(myDerivedMethodsRequests);
    for (    PsiElement sortedID : sortedIDs) {
      final PsiMethod psiMethod=(PsiMethod)sortedID;
      final RefMethod refMethod=(RefMethod)refManager.getReference(psiMethod);
      ((GlobalInspectionContextImpl)context).incrementJobDoneAmount(GlobalInspectionContextImpl.FIND_EXTERNAL_USAGES,refManager.getQualifiedName(refMethod));
      final List<DerivedMethodsProcessor> processors=myDerivedMethodsRequests.get(psiMethod);
      OverridingMethodsSearch.search(psiMethod,searchScope,true).forEach(new PsiElementProcessorAdapter<PsiMethod>(new PsiElementProcessor<PsiMethod>(){
        public boolean execute(        PsiMethod derivedMethod){
          if (scope.contains(derivedMethod))           return true;
          DerivedMethodsProcessor[] processorsArrayed=processors.toArray(new DerivedMethodsProcessor[processors.size()]);
          for (          DerivedMethodsProcessor processor : processorsArrayed) {
            if (!processor.process(derivedMethod)) {
              processors.remove(processor);
            }
          }
          return !processors.isEmpty();
        }
      }
));
    }
    myDerivedMethodsRequests=null;
  }
  if (myFieldUsagesRequests != null) {
    List<PsiElement> sortedIDs=getSortedIDs(myFieldUsagesRequests);
    for (    PsiElement sortedID : sortedIDs) {
      final PsiField psiField=(PsiField)sortedID;
      final List<UsagesProcessor> processors=myFieldUsagesRequests.get(psiField);
      ((GlobalInspectionContextImpl)context).incrementJobDoneAmount(GlobalInspectionContextImpl.FIND_EXTERNAL_USAGES,refManager.getQualifiedName(refManager.getReference(psiField)));
      ReferencesSearch.search(psiField,searchScope,false).forEach(new PsiReferenceProcessorAdapter(createReferenceProcessor(processors,context)));
    }
    myFieldUsagesRequests=null;
  }
  if (myClassUsagesRequests != null) {
    List<PsiElement> sortedIDs=getSortedIDs(myClassUsagesRequests);
    for (    PsiElement sortedID : sortedIDs) {
      final PsiClass psiClass=(PsiClass)sortedID;
      final List<UsagesProcessor> processors=myClassUsagesRequests.get(psiClass);
      ((GlobalInspectionContextImpl)context).incrementJobDoneAmount(GlobalInspectionContextImpl.FIND_EXTERNAL_USAGES,psiClass.getQualifiedName());
      ReferencesSearch.search(psiClass,searchScope,false).forEach(new PsiReferenceProcessorAdapter(createReferenceProcessor(processors,context)));
    }
    myClassUsagesRequests=null;
  }
  if (myMethodUsagesRequests != null) {
    List<PsiElement> sortedIDs=getSortedIDs(myMethodUsagesRequests);
    for (    PsiElement sortedID : sortedIDs) {
      final PsiMethod psiMethod=(PsiMethod)sortedID;
      final List<UsagesProcessor> processors=myMethodUsagesRequests.get(psiMethod);
      ((GlobalInspectionContextImpl)context).incrementJobDoneAmount(GlobalInspectionContextImpl.FIND_EXTERNAL_USAGES,refManager.getQualifiedName(refManager.getReference(psiMethod)));
      MethodReferencesSearch.search(psiMethod,searchScope,true).forEach(new PsiReferenceProcessorAdapter(createReferenceProcessor(processors,context)));
    }
    myMethodUsagesRequests=null;
  }
}
