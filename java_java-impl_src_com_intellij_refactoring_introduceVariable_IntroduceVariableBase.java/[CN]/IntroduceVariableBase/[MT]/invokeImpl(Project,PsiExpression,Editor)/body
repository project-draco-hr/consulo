{
  if (expr != null && expr.getParent() instanceof PsiExpressionStatement) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.introduceVariable.incompleteStatement");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + expr);
  }
  if (expr == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(project,editor,message);
    return false;
  }
  final PsiType originalType=RefactoringUtil.getTypeByExpressionWithExpectedType(expr);
  if (originalType == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("unknown.expression.type"));
    showErrorMessage(project,editor,message);
    return false;
  }
  if (PsiType.VOID.equals(originalType)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    showErrorMessage(project,editor,message);
    return false;
  }
  final PsiElement physicalElement=expr.getUserData(ElementToWorkOn.PARENT);
  final PsiElement anchorStatement=RefactoringUtil.getParentStatement(physicalElement != null ? physicalElement : expr,false);
  if (anchorStatement == null) {
    return parentStatementNotFound(project,editor);
  }
  if (anchorStatement instanceof PsiExpressionStatement) {
    PsiExpression enclosingExpr=((PsiExpressionStatement)anchorStatement).getExpression();
    if (enclosingExpr instanceof PsiMethodCallExpression) {
      PsiMethod method=((PsiMethodCallExpression)enclosingExpr).resolveMethod();
      if (method != null && method.isConstructor()) {
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("invalid.expression.context"));
        showErrorMessage(project,editor,message);
        return false;
      }
    }
  }
  final PsiElement tempContainer=anchorStatement.getParent();
  if (!(tempContainer instanceof PsiCodeBlock) && !isLoopOrIf(tempContainer)) {
    String message=RefactoringBundle.message("refactoring.is.not.supported.in.the.current.context",REFACTORING_NAME);
    showErrorMessage(project,editor,message);
    return false;
  }
  if (!NotInSuperCallOccurenceFilter.INSTANCE.isOK(expr)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("cannot.introduce.variable.in.super.constructor.call"));
    showErrorMessage(project,editor,message);
    return false;
  }
  final PsiFile file=anchorStatement.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  PsiElement containerParent=tempContainer;
  PsiElement lastScope=tempContainer;
  while (true) {
    if (containerParent instanceof PsiFile)     break;
    if (containerParent instanceof PsiMethod)     break;
    containerParent=containerParent.getParent();
    if (containerParent instanceof PsiCodeBlock) {
      lastScope=containerParent;
    }
  }
  final ExpressionOccurenceManager occurenceManager=new ExpressionOccurenceManager(expr,lastScope,NotInSuperCallOccurenceFilter.INSTANCE);
  final PsiExpression[] occurrences=occurenceManager.getOccurences();
  final PsiElement anchorStatementIfAll=occurenceManager.getAnchorStatementForAll();
  final LinkedHashMap<OccurrencesChooser.ReplaceChoice,PsiExpression[]> occurrencesMap=new LinkedHashMap<OccurrencesChooser.ReplaceChoice,PsiExpression[]>();
  final boolean hasWriteAccess=OccurrencesChooser.fillChoices(expr,occurrences,occurrencesMap);
  final PsiElement nameSuggestionContext=editor != null ? file.findElementAt(editor.getCaretModel().getOffset()) : null;
  final RefactoringSupportProvider supportProvider=LanguageRefactoringSupport.INSTANCE.forLanguage(expr.getLanguage());
  final boolean isInplaceAvailableOnDataContext=supportProvider != null && editor.getSettings().isVariableInplaceRenameEnabled() && supportProvider.isInplaceIntroduceAvailable(expr,nameSuggestionContext) && !ApplicationManager.getApplication().isUnitTestMode();
  final boolean inFinalContext=occurenceManager.isInFinalContext();
  final InputValidator validator=new InputValidator(this,project,anchorStatementIfAll,anchorStatement,occurenceManager);
  final TypeSelectorManagerImpl typeSelectorManager=new TypeSelectorManagerImpl(project,originalType,expr,occurrences);
  final Pass<OccurrencesChooser.ReplaceChoice> callback=new Pass<OccurrencesChooser.ReplaceChoice>(){
    @Override public void pass(    OccurrencesChooser.ReplaceChoice choice){
      final Ref<SmartPsiElementPointer<PsiVariable>> variable=new Ref<SmartPsiElementPointer<PsiVariable>>();
      final IntroduceVariableSettings settings=getSettings(project,editor,expr,occurrences,typeSelectorManager,inFinalContext,hasWriteAccess,validator,choice);
      if (!settings.isOK())       return;
      final SuggestedNameInfo suggestedName=getSuggestedName(typeSelectorManager.getDefaultType(),expr);
      final Runnable runnable=introduce(project,expr,editor,anchorStatement,tempContainer,occurrences,anchorStatementIfAll,settings,variable);
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          ApplicationManager.getApplication().runWriteAction(runnable);
          if (isInplaceAvailableOnDataContext) {
            PsiVariable elementToRename=variable.get().getElement();
            if (elementToRename != null) {
              editor.getCaretModel().moveToOffset(elementToRename.getTextOffset());
              new VariableInplaceRenamer(elementToRename,editor).performInplaceRename(false,new LinkedHashSet<String>(Arrays.asList(suggestedName.names)));
            }
          }
        }
      }
,REFACTORING_NAME,null);
    }
  }
;
  if (!isInplaceAvailableOnDataContext) {
    callback.pass(null);
  }
 else {
    new OccurrencesChooser(editor).showChooser(callback,occurrencesMap);
  }
  return true;
}
