{
  final InjectedLanguageManager injectedLanguageManager=InjectedLanguageManager.getInstance(project);
  PsiElement elementAtStart=file.findElementAt(startOffset);
  if (elementAtStart == null || elementAtStart instanceof PsiWhiteSpace || elementAtStart instanceof PsiComment) {
    elementAtStart=PsiTreeUtil.skipSiblingsForward(elementAtStart,PsiWhiteSpace.class,PsiComment.class);
    if (elementAtStart == null) {
      if (injectedLanguageManager.isInjectedFragment(file)) {
        return getSelectionFromInjectedHost(project,file,injectedLanguageManager);
      }
 else {
        return null;
      }
    }
    startOffset=elementAtStart.getTextOffset();
  }
  PsiElement elementAtEnd=file.findElementAt(endOffset - 1);
  if (elementAtEnd == null || elementAtEnd instanceof PsiWhiteSpace || elementAtEnd instanceof PsiComment) {
    elementAtEnd=PsiTreeUtil.skipSiblingsBackward(elementAtEnd,PsiWhiteSpace.class,PsiComment.class);
    if (elementAtEnd == null)     return null;
    endOffset=elementAtEnd.getTextRange().getEndOffset();
  }
  if (endOffset <= startOffset)   return null;
  PsiElement elementAt=PsiTreeUtil.findCommonParent(elementAtStart,elementAtEnd);
  if (PsiTreeUtil.getParentOfType(elementAt,PsiExpression.class,false) == null) {
    if (injectedLanguageManager.isInjectedFragment(file)) {
      return getSelectionFromInjectedHost(project,file,injectedLanguageManager);
    }
    elementAt=null;
  }
  final PsiLiteralExpression literalExpression=PsiTreeUtil.getParentOfType(elementAt,PsiLiteralExpression.class);
  final PsiLiteralExpression startLiteralExpression=PsiTreeUtil.getParentOfType(elementAtStart,PsiLiteralExpression.class);
  final PsiLiteralExpression endLiteralExpression=PsiTreeUtil.getParentOfType(file.findElementAt(endOffset),PsiLiteralExpression.class);
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  String text=null;
  PsiExpression tempExpr;
  try {
    text=file.getText().subSequence(startOffset,endOffset).toString();
    String prefix=null;
    String stripped=text;
    if (startLiteralExpression != null) {
      final int startExpressionOffset=startLiteralExpression.getTextOffset();
      if (startOffset == startExpressionOffset) {
        if (StringUtil.startsWithChar(text,'\"') || StringUtil.startsWithChar(text,'\'')) {
          stripped=text.substring(1);
        }
      }
 else       if (startOffset == startExpressionOffset + 1) {
        text="\"" + text;
      }
 else       if (startOffset > startExpressionOffset + 1) {
        prefix="\" + ";
        text="\"" + text;
      }
    }
    String suffix=null;
    if (endLiteralExpression != null) {
      final int endExpressionOffset=endLiteralExpression.getTextOffset() + endLiteralExpression.getTextLength();
      if (endOffset == endExpressionOffset) {
        if (StringUtil.endsWithChar(stripped,'\"') || StringUtil.endsWithChar(stripped,'\'')) {
          stripped=stripped.substring(0,stripped.length() - 1);
        }
      }
 else       if (endOffset == endExpressionOffset - 1) {
        text+="\"";
      }
 else       if (endOffset < endExpressionOffset - 1) {
        suffix=" + \"";
        text+="\"";
      }
    }
    boolean primitive=false;
    if (stripped.equals("true") || stripped.equals("false")) {
      primitive=true;
    }
 else {
      try {
        Integer.parseInt(stripped);
        primitive=true;
      }
 catch (      NumberFormatException e1) {
      }
    }
    if (primitive) {
      text=stripped;
    }
    if (literalExpression != null && text.equals(literalExpression.getText()))     return literalExpression;
    final PsiElement parent=literalExpression != null ? literalExpression : elementAt;
    tempExpr=elementFactory.createExpressionFromText(text,parent);
    final boolean[] hasErrors=new boolean[1];
    final JavaRecursiveElementWalkingVisitor errorsVisitor=new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitElement(      final PsiElement element){
        if (hasErrors[0]) {
          return;
        }
        super.visitElement(element);
      }
      @Override public void visitErrorElement(      final PsiErrorElement element){
        hasErrors[0]=true;
      }
    }
;
    tempExpr.accept(errorsVisitor);
    if (hasErrors[0])     return null;
    tempExpr.putUserData(ElementToWorkOn.PREFIX,prefix);
    tempExpr.putUserData(ElementToWorkOn.SUFFIX,suffix);
    final RangeMarker rangeMarker=FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset,endOffset);
    tempExpr.putUserData(ElementToWorkOn.TEXT_RANGE,rangeMarker);
    if (parent != null) {
      tempExpr.putUserData(ElementToWorkOn.PARENT,parent);
    }
 else {
      PsiErrorElement errorElement=elementAtStart instanceof PsiErrorElement ? (PsiErrorElement)elementAtStart : PsiTreeUtil.getNextSiblingOfType(elementAtStart,PsiErrorElement.class);
      if (errorElement == null) {
        errorElement=PsiTreeUtil.getParentOfType(elementAtStart,PsiErrorElement.class);
      }
      if (errorElement == null)       return null;
      if (!(errorElement.getParent() instanceof PsiClass))       return null;
      tempExpr.putUserData(ElementToWorkOn.PARENT,errorElement);
      tempExpr.putUserData(ElementToWorkOn.OUT_OF_CODE_BLOCK,Boolean.TRUE);
    }
    final String fakeInitializer="intellijidearulezzz";
    final int[] refIdx=new int[1];
    final PsiExpression toBeExpression=createReplacement(fakeInitializer,project,prefix,suffix,parent,rangeMarker,refIdx);
    toBeExpression.accept(errorsVisitor);
    if (hasErrors[0])     return null;
    final PsiReferenceExpression refExpr=PsiTreeUtil.getParentOfType(toBeExpression.findElementAt(refIdx[0]),PsiReferenceExpression.class);
    if (refExpr == null)     return null;
    if (toBeExpression == refExpr && refIdx[0] > 0) {
      return null;
    }
    if (ReplaceExpressionUtil.isNeedParenthesis(refExpr.getNode(),tempExpr.getNode())) {
      tempExpr.putCopyableUserData(NEED_PARENTHESIS,Boolean.TRUE);
      return tempExpr;
    }
  }
 catch (  IncorrectOperationException e) {
    if (elementAt instanceof PsiExpressionList) {
      final PsiElement parent=elementAt.getParent();
      return parent instanceof PsiCallExpression ? createArrayCreationExpression(text,startOffset,endOffset,(PsiCallExpression)parent) : null;
    }
    return null;
  }
  return tempExpr;
}
