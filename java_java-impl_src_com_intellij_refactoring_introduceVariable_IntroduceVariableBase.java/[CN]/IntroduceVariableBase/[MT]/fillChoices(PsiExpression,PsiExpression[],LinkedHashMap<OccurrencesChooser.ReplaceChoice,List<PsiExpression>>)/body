{
  occurrencesMap.put(OccurrencesChooser.ReplaceChoice.NO,Collections.singletonList(expr));
  final List<PsiExpression> nonWrite=new ArrayList<PsiExpression>();
  for (  PsiExpression occurrence : occurrences) {
    if (!RefactoringUtil.isAssignmentLHS(occurrence)) {
      nonWrite.add(occurrence);
    }
  }
  final boolean hasWriteAccess=occurrences.length > nonWrite.size() && occurrences.length > 1;
  if (hasWriteAccess) {
    occurrencesMap.put(OccurrencesChooser.ReplaceChoice.NO_WRITE,nonWrite);
  }
  if (occurrences.length > 1) {
    occurrencesMap.put(OccurrencesChooser.ReplaceChoice.ALL,Arrays.asList(occurrences));
  }
  return hasWriteAccess;
}
