{
  long started;
  final Set<Integer> map=new java.util.HashSet<Integer>();
  for (int i=0; i < 100000; ++i) {
    map.add(i);
  }
  started=System.currentTimeMillis();
  for (int i=0; i < 1000; ++i) {
    for (int j=0; j < 100000; ++j) {
      map.contains(j + 1000000);
    }
  }
  System.out.println("100 000 000 lookups in java.util.HashSet took " + (System.currentTimeMillis() - started));
  final Set<Integer> troveSet=new THashSet<Integer>();
  for (int i=0; i < 100000; ++i) {
    troveSet.add(i);
  }
  started=System.currentTimeMillis();
  for (int i=0; i < 1000; ++i) {
    for (int j=0; j < 100000; ++j) {
      troveSet.contains(j + 1000000);
    }
  }
  System.out.println("100 000 000 lookups in THashSet took " + (System.currentTimeMillis() - started));
  final HashSet<Integer> tested=new HashSet<Integer>();
  for (int i=0; i < 100000; ++i) {
    tested.add(i);
  }
  started=System.currentTimeMillis();
  for (int i=0; i < 1000; ++i) {
    for (int j=0; j < 100000; ++j) {
      tested.contains(j + 1000000);
    }
  }
  System.out.println("100 000 000 lookups in HashSet took " + (System.currentTimeMillis() - started));
}
