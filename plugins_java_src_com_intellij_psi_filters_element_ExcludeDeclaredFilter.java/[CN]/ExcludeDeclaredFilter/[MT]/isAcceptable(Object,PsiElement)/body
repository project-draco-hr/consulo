{
  PsiElement cachedVar=context;
  if (myCurrentContext.get() != context) {
    myCurrentContext=new SoftReference<PsiElement>(context);
    while (cachedVar != null && !(getFilter().isAcceptable(cachedVar,cachedVar.getContext())))     cachedVar=cachedVar.getContext();
    myCachedVar=new SoftReference<PsiElement>(cachedVar);
  }
  if (element instanceof PsiMethod && myCachedVar.get() instanceof PsiMethod) {
    final PsiMethod currentMethod=(PsiMethod)element;
    final PsiMethod candidate=(PsiMethod)myCachedVar.get();
    return !candidate.getManager().areElementsEquivalent(candidate,currentMethod) && !isOverridingMethod(currentMethod,candidate);
  }
 else   if (element instanceof PsiClassType) {
    final PsiClass psiClass=((PsiClassType)element).resolve();
    return isAcceptable(psiClass,context);
  }
 else   if (context != null) {
    if (element instanceof PsiElement)     return !context.getManager().areElementsEquivalent(myCachedVar.get(),(PsiElement)element);
    return true;
  }
  return true;
}
