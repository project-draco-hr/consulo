{
  final MessageBusConnection conn=project.getMessageBus().connect();
  myConnections.put(project,conn);
  conn.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    private VirtualFile[] myRootsBefore;
    public void beforeRootsChange(    final ModuleRootEvent event){
      myRootsBefore=ProjectRootManager.getInstance(project).getContentSourceRoots();
    }
    public void rootsChanged(    final ModuleRootEvent event){
      final VirtualFile[] rootsAfter=ProjectRootManager.getInstance(project).getContentSourceRoots();
      Set<VirtualFile> roots=new HashSet<VirtualFile>();
      roots.addAll(Arrays.asList(rootsAfter));
      if (myRootsBefore != null) {
        roots.removeAll(Arrays.asList(myRootsBefore));
        myRootsBefore=null;
      }
      scanSourceContent(project,roots);
    }
  }
);
  StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){
    public void run(){
      scanSourceContent(project,Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots()));
      final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);
      if (compilers.length > 0) {
        final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();
        final Module[] modules=ModuleManager.getInstance(project).getModules();
        for (        IntermediateOutputCompiler compiler : compilers) {
          for (          Module module : modules) {
            final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));
            if (outputRoot != null) {
              intermediateRoots.add(outputRoot);
            }
            final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));
            if (testsOutputRoot != null) {
              intermediateRoots.add(testsOutputRoot);
            }
          }
        }
        if (intermediateRoots.size() > 0) {
          final String projectId=getProjectId(project);
          final FileProcessor processor=new FileProcessor(){
            final List<String> projects=Collections.singletonList(projectId);
            public void execute(            final VirtualFile file){
              if (!isMarkedForRecompilation(projectId,getFileId(file))) {
                final SourceFileInfo srcInfo=loadSourceInfo(file);
                if (srcInfo == null || (srcInfo.getTimestamp(projectId) != file.getTimeStamp())) {
                  addSourceForRecompilation(projects,file,srcInfo);
                }
              }
            }
          }
;
          for (          VirtualFile root : intermediateRoots) {
            processRecursively(root,processor);
          }
        }
      }
    }
  }
);
}
