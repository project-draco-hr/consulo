{
  final VirtualFile eventFile=event.getFile();
  processRecursively(eventFile,new FileProcessor(){
    public void execute(    final VirtualFile file){
      final String filePath=file.getPath();
      try {
        final OutputFileInfo outputInfo=loadOutputInfo(file);
        if (outputInfo != null) {
          final String srcPath=outputInfo.getSourceFilePath();
          final VirtualFile srcFile=srcPath != null ? LocalFileSystem.getInstance().findFileByPath(srcPath) : null;
          if (srcFile != null) {
            final SourceFileInfo srcInfo=loadSourceInfo(srcFile);
            if (srcInfo != null) {
              for (              int projectId : srcInfo.getProjectIds().toArray()) {
                if (srcInfo.isAssociated(projectId,filePath)) {
                  addSourceForRecompilation(projectId,srcFile,srcInfo);
                  break;
                }
              }
            }
          }
        }
        final SourceFileInfo srcInfo=loadSourceInfo(file);
        if (srcInfo != null) {
          final TIntHashSet projects=srcInfo.getProjectIds();
          if (!projects.isEmpty()) {
            final ScheduleOutputsForDeletionProc deletionProc=new ScheduleOutputsForDeletionProc(file.getUrl());
            for (            int projectId : projects.toArray()) {
              srcInfo.processOutputPaths(projectId,deletionProc);
              removeSourceForRecompilation(projectId,getFileId(file));
            }
          }
        }
      }
  finally {
synchronized (myOutputsToDelete) {
          for (          int projectId : myOutputsToDelete.keys()) {
            final Map<String,SourceUrlClassNamePair> map=myOutputsToDelete.get(projectId);
            if (map != null) {
              final SourceUrlClassNamePair val=map.remove(filePath);
              if (val != null) {
                if (LOG.isDebugEnabled()) {
                  LOG.debug("REMOVE path to delete: " + filePath);
                }
                if (map.isEmpty()) {
                  myOutputsToDelete.remove(projectId);
                }
              }
            }
          }
        }
      }
    }
  }
);
}
