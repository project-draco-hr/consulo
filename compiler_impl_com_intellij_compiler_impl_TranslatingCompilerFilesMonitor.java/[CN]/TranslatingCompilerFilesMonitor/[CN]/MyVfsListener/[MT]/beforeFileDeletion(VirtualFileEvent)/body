{
  processRecursively(event.getFile(),new FileProcessor(){
    public void execute(    final VirtualFile file){
      final String filePath=file.getPath();
      final OutputFileInfo outputInfo=loadOutputInfo(file);
      if (outputInfo != null) {
        final String srcPath=outputInfo.getSourceFilePath();
        final VirtualFile srcFile=srcPath != null ? LocalFileSystem.getInstance().findFileByPath(srcPath) : null;
        if (srcFile != null) {
          final SourceFileInfo srcInfo=loadSourceInfo(srcFile);
          if (srcInfo != null) {
            for (            int projectId : srcInfo.getProjectIds().toArray()) {
              if (srcInfo.isAssociated(projectId,filePath)) {
                addSourceForRecompilation(projectId,srcFile,srcInfo);
                break;
              }
            }
          }
        }
synchronized (myOutputsToDelete) {
          myOutputsToDelete.remove(filePath);
        }
      }
      final SourceFileInfo srcInfo=loadSourceInfo(file);
      if (srcInfo != null) {
        final TIntHashSet projects=srcInfo.getProjectIds();
        if (projects.size() > 0) {
          final ScheduleOutputsForDeletionProc deletionProc=new ScheduleOutputsForDeletionProc(file.getUrl());
          for (          int projectId : projects.toArray()) {
            srcInfo.processOutputPaths(projectId,deletionProc);
            removeSourceForRecompilation(projectId,getFileId(file));
          }
        }
      }
    }
  }
);
}
