{
  final int projectId=getProjectId(project);
  final int[] currentRoots=new int[roots.size()];
  int index=0;
  for (  VirtualFile root : roots) {
    currentRoots[index++]=getFileId(root);
  }
  final TIntHashSet oldRoots;
synchronized (myProjectOutputRoots) {
    oldRoots=new TIntHashSet(myProjectOutputRoots.get(projectId).toArray());
  }
  oldRoots.removeAll(currentRoots);
  for (TIntIterator it=oldRoots.iterator(); it.hasNext(); ) {
    final int id=it.next();
    final VirtualFile outputRoot=findFileById(id);
    if (outputRoot != null) {
      processOldOutputRoot(projectId,outputRoot);
    }
  }
synchronized (myProjectOutputRoots) {
    final TIntHashSet cachedRoots=myProjectOutputRoots.get(projectId);
    cachedRoots.clear();
    cachedRoots.addAll(currentRoots);
  }
}
