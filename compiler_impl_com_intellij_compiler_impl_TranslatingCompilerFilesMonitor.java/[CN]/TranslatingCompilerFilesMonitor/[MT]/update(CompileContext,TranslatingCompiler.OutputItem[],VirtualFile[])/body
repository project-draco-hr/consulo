{
  final Project project=context.getProject();
  final int projectId=getProjectId(project);
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final IOException[] exceptions={null};
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        final Map<VirtualFile,SourceFileInfo> compiledSources=new HashMap<VirtualFile,SourceFileInfo>();
        final Set<VirtualFile> forceRecompile=new HashSet<VirtualFile>();
        CompilerUtil.runInContext(context,"Saving compiled files info...",new ThrowableRunnable<IOException>(){
          public void run() throws IOException {
            context.getProgressIndicator().setFraction(0);
            int i=0;
            for (            TranslatingCompiler.OutputItem item : successfullyCompiled) {
              context.getProgressIndicator().checkCanceled();
              final VirtualFile sourceFile=item.getSourceFile();
              context.getProgressIndicator().setText2(sourceFile.getPresentableUrl());
              context.getProgressIndicator().setFraction(1.0 * i++ / successfullyCompiled.length / 2);
              final boolean isSourceValid=sourceFile.isValid();
              SourceFileInfo srcInfo=compiledSources.get(sourceFile);
              if (isSourceValid && srcInfo == null) {
                srcInfo=loadSourceInfo(sourceFile);
                if (srcInfo != null) {
                  srcInfo.clearPaths(projectId);
                }
 else {
                  srcInfo=new SourceFileInfo();
                }
                compiledSources.put(sourceFile,srcInfo);
              }
              final String outputPath=item.getOutputPath();
              if (outputPath != null) {
                final VirtualFile outputFile=lfs.findFileByPath(outputPath);
                if (outputFile != null) {
                  if (!sourceFile.equals(outputFile)) {
                    final String outputRoot=item.getOutputRootDirectory();
                    final String className=MakeUtil.relativeClassPathToQName(outputPath.substring(outputRoot.length()),'/');
                    if (isSourceValid) {
                      srcInfo.addOutputPath(projectId,outputPath);
                      saveOutputInfo(outputFile,new OutputFileInfo(sourceFile.getPath(),className));
                    }
 else {
                      markOutputPathForDeletion(projectId,outputPath,className,sourceFile.getUrl());
                    }
                  }
                }
 else {
                  LOG.warn("TranslatingCompilerFilesMonitor.update():  Virtual file was not found for \"" + outputPath + "\"");
                  if (isSourceValid) {
                    forceRecompile.add(sourceFile);
                  }
                }
              }
            }
            final long compilationStartStamp=((CompileContextEx)context).getStartCompilationStamp();
            i=0;
            for (            Map.Entry<VirtualFile,SourceFileInfo> entry : compiledSources.entrySet()) {
              context.getProgressIndicator().checkCanceled();
              final SourceFileInfo info=entry.getValue();
              final VirtualFile file=entry.getKey();
              context.getProgressIndicator().setText2(file.getPresentableUrl());
              context.getProgressIndicator().setFraction(0.5 + 1.0 * i++ / compiledSources.size() / 2);
              final long fileStamp=file.getTimeStamp();
              info.updateTimestamp(projectId,fileStamp);
              saveSourceInfo(file,info);
              removeSourceForRecompilation(projectId,Math.abs(getFileId(file)));
              if (fileStamp > compilationStartStamp && !((CompileContextEx)context).isGenerated(file) || forceRecompile.contains(file)) {
                addSourceForRecompilation(projectId,file,info);
              }
            }
          }
        }
);
      }
 catch (      IOException e) {
        exceptions[0]=e;
      }
    }
  }
);
  if (exceptions[0] != null) {
    throw exceptions[0];
  }
  if (filesToRecompile.length > 0) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        for (        VirtualFile file : filesToRecompile) {
          if (file.isValid()) {
            addSourceForRecompilation(projectId,file,null);
          }
        }
      }
    }
);
  }
}
