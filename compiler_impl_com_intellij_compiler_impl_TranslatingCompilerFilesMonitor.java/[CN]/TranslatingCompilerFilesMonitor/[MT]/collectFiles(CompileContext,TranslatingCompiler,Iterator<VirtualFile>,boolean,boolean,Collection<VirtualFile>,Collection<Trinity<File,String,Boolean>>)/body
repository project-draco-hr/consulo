{
  final Project project=context.getProject();
  final int projectId=getProjectId(project);
  final CompilerConfiguration configuration=CompilerConfiguration.getInstance(project);
  final boolean _forceCompile=forceCompile || isRebuild;
synchronized (mySourcesToRecompile) {
    final TIntHashSet pathsToRecompile=mySourcesToRecompile.get(projectId);
    if (_forceCompile || (pathsToRecompile != null && pathsToRecompile.size() > 0)) {
      while (scopeSrcIterator.hasNext()) {
        final VirtualFile file=scopeSrcIterator.next();
        if (configuration.isExcludedFromCompilation(file) || !compiler.isCompilableFile(file,context)) {
          continue;
        }
        final int fileId=getFileId(file);
        if (_forceCompile) {
          toCompile.add(file);
          if (pathsToRecompile == null || !pathsToRecompile.contains(fileId)) {
            addSourceForRecompilation(projectId,file,null);
          }
        }
 else         if (pathsToRecompile.contains(fileId)) {
          toCompile.add(file);
        }
      }
    }
  }
  if (!isRebuild) {
    final CompileScope compileScope=context.getCompileScope();
synchronized (myOutputsToDelete) {
      final Map<String,SourceUrlClassNamePair> outputsToDelete=myOutputsToDelete.get(projectId);
      if (outputsToDelete != null) {
        for (        String outputPath : outputsToDelete.keySet()) {
          final SourceUrlClassNamePair classNamePair=outputsToDelete.get(outputPath);
          final String sourceUrl=classNamePair.getSourceUrl();
          final VirtualFile srcFile=VirtualFileManager.getInstance().findFileByUrl(sourceUrl);
          final boolean sourcePresent=srcFile != null;
          if (sourcePresent) {
            if (!compiler.isCompilableFile(srcFile,context)) {
              continue;
            }
            if (!compileScope.belongs(sourceUrl) && ((CompileContextEx)context).isInSourceContent(srcFile)) {
              continue;
            }
          }
          final File file=new File(outputPath);
          toDelete.add(new Trinity<File,String,Boolean>(file,classNamePair.getClassName(),Boolean.valueOf(sourcePresent)));
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found file to delete: " + file);
          }
        }
      }
    }
  }
}
