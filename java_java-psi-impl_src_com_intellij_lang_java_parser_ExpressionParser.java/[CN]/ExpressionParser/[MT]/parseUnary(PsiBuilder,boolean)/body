{
  final IElementType tokenType=builder.getTokenType();
  if (PREFIX_OPS.contains(tokenType)) {
    final PsiBuilder.Marker unary=builder.mark();
    builder.advanceLexer();
    final PsiBuilder.Marker operand=parseUnary(builder,false);
    if (operand == null) {
      error(builder,JavaErrorMessages.message("expected.expression"));
    }
    unary.done(JavaElementType.PREFIX_EXPRESSION);
    return unary;
  }
 else   if (tokenType == JavaTokenType.LPARENTH) {
    final PsiBuilder.Marker typeCast=builder.mark();
    builder.advanceLexer();
    final ReferenceParser.TypeInfo typeInfo=myParser.getReferenceParser().parseTypeInfo(builder,ReferenceParser.EAT_LAST_DOT | ReferenceParser.WILDCARD);
    if (typeInfo == null || !expect(builder,JavaTokenType.RPARENTH)) {
      typeCast.rollbackTo();
      return parsePostfix(builder,false);
    }
    if (PREF_ARITHMETIC_OPS.contains(builder.getTokenType()) && !typeInfo.isPrimitive) {
      typeCast.rollbackTo();
      return parsePostfix(builder,false);
    }
    final PsiBuilder.Marker expr=parseUnary(builder,true);
    if (expr == null) {
      if (!typeInfo.isParameterized) {
        typeCast.rollbackTo();
        return parsePostfix(builder,false);
      }
 else {
        error(builder,JavaErrorMessages.message("expected.expression"));
      }
    }
    typeCast.done(JavaElementType.TYPE_CAST_EXPRESSION);
    return typeCast;
  }
 else {
    return parsePostfix(builder,afterCast);
  }
}
