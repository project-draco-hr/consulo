{
  final PsiBuilder.Marker list=builder.mark();
  builder.advanceLexer();
  boolean first=true;
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (first && (ARGS_LIST_END.contains(tokenType) || builder.eof()))     break;
    if (!first && !ARGS_LIST_CONTINUE.contains(tokenType))     break;
    boolean hasError=false;
    if (!first) {
      if (builder.getTokenType() == JavaTokenType.COMMA) {
        builder.advanceLexer();
      }
 else {
        hasError=true;
        error(builder,JavaErrorMessages.message("expected.comma.or.rparen"));
        emptyExpression(builder);
      }
    }
    first=false;
    final PsiBuilder.Marker arg=parse(builder);
    if (arg == null) {
      if (!hasError) {
        error(builder,JavaErrorMessages.message("expected.expression"));
        emptyExpression(builder);
      }
      if (!ARGS_LIST_CONTINUE.contains(builder.getTokenType()))       break;
      if (builder.getTokenType() != JavaTokenType.COMMA && !builder.eof()) {
        builder.advanceLexer();
      }
    }
  }
  final boolean closed=expectOrError(builder,JavaTokenType.RPARENTH,"expected.rparen");
  list.done(JavaElementType.EXPRESSION_LIST);
  if (!closed) {
    list.setCustomEdgeTokenBinders(null,GREEDY_RIGHT_EDGE_PROCESSOR);
  }
  return list;
}
