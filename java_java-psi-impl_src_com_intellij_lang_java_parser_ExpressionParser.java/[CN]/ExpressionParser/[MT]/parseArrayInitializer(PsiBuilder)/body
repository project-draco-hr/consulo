{
  if (builder.getTokenType() != JavaTokenType.LBRACE)   return null;
  final PsiBuilder.Marker arrayInit=builder.mark();
  builder.advanceLexer();
  boolean expressionMissed=false;
  PsiBuilder.Marker lastComma=null;
  while (true) {
    if (builder.getTokenType() == JavaTokenType.RBRACE) {
      builder.advanceLexer();
      break;
    }
    if (builder.getTokenType() == null) {
      error(builder,JavaErrorMessages.message("expected.rbrace"));
      break;
    }
    if (expressionMissed && lastComma != null) {
      lastComma.precede().errorBefore(JavaErrorMessages.message("expected.expression"),lastComma);
      lastComma.drop();
      lastComma=null;
    }
    final PsiBuilder.Marker arg=parse(builder);
    if (arg == null) {
      if (builder.getTokenType() == JavaTokenType.COMMA) {
        expressionMissed=true;
        lastComma=builder.mark();
      }
 else {
        error(builder,JavaErrorMessages.message("expected.rbrace"));
        break;
      }
    }
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == JavaTokenType.COMMA) {
      builder.advanceLexer();
    }
 else     if (tokenType != JavaTokenType.RBRACE) {
      error(builder,JavaErrorMessages.message("expected.comma"));
    }
  }
  if (lastComma != null) {
    lastComma.drop();
  }
  arrayInit.done(JavaElementType.ARRAY_INITIALIZER_EXPRESSION);
  return arrayInit;
}
