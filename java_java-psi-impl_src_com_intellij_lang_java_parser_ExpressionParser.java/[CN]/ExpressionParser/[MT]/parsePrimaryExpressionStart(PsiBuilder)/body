{
  IElementType tokenType=builder.getTokenType();
  if (LITERALS.contains(tokenType)) {
    final PsiBuilder.Marker literal=builder.mark();
    builder.advanceLexer();
    literal.done(JavaElementType.LITERAL_EXPRESSION);
    return literal;
  }
  if (tokenType == JavaTokenType.LPARENTH) {
    final PsiBuilder.Marker parenth=builder.mark();
    builder.advanceLexer();
    final PsiBuilder.Marker inner=parse(builder);
    if (inner == null) {
      error(builder,JavaErrorMessages.message("expected.expression"));
    }
    if (!expect(builder,JavaTokenType.RPARENTH)) {
      if (inner != null) {
        error(builder,JavaErrorMessages.message("expected.rparen"));
      }
    }
    parenth.done(JavaElementType.PARENTH_EXPRESSION);
    return parenth;
  }
  if (tokenType == JavaTokenType.LBRACE) {
    return parseArrayInitializer(builder);
  }
  PsiBuilder.Marker annotation=null;
  final PsiBuilder.Marker beforeAnnotation=builder.mark();
  if (tokenType == JavaTokenType.AT) {
    annotation=DeclarationParser.parseAnnotations(builder);
    tokenType=builder.getTokenType();
  }
  if (tokenType == JavaTokenType.IDENTIFIER) {
    final PsiBuilder.Marker refExpr;
    if (annotation != null) {
      final PsiBuilder.Marker refParam=annotation.precede();
      refParam.doneBefore(JavaElementType.REFERENCE_PARAMETER_LIST,annotation);
      refExpr=refParam.precede();
    }
 else {
      refExpr=builder.mark();
      builder.mark().done(JavaElementType.REFERENCE_PARAMETER_LIST);
    }
    builder.advanceLexer();
    refExpr.done(JavaElementType.REFERENCE_EXPRESSION);
    beforeAnnotation.drop();
    return refExpr;
  }
  if (annotation != null) {
    beforeAnnotation.rollbackTo();
    tokenType=builder.getTokenType();
  }
 else {
    beforeAnnotation.drop();
  }
  PsiBuilder.Marker expr=null;
  if (tokenType == JavaTokenType.LT) {
    expr=builder.mark();
    if (!ReferenceParser.parseReferenceParameterList(builder,false,false)) {
      expr.rollbackTo();
      return null;
    }
    tokenType=builder.getTokenType();
    if (!CONSTRUCTOR_CALL.contains(tokenType)) {
      expr.rollbackTo();
      return null;
    }
  }
  if (CONSTRUCTOR_CALL.contains(tokenType)) {
    if (expr == null) {
      expr=builder.mark();
      builder.mark().done(JavaElementType.REFERENCE_PARAMETER_LIST);
    }
    builder.advanceLexer();
    expr.done(builder.getTokenType() == JavaTokenType.LPARENTH ? JavaElementType.REFERENCE_EXPRESSION : tokenType == JavaTokenType.THIS_KEYWORD ? JavaElementType.THIS_EXPRESSION : JavaElementType.SUPER_EXPRESSION);
    return expr;
  }
  if (tokenType == JavaTokenType.NEW_KEYWORD) {
    return parseNew(builder,null);
  }
  if (ElementType.PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
    return parseClassObjectAccess(builder);
  }
  return null;
}
