{
  final PsiImportStatement[] importStatements=importList.getImportStatements();
  final Set<String> onDemandImports=new HashSet();
  final Set<String> singleClassImports=new HashSet();
  for (  final PsiImportStatement importStatement : importStatements) {
    final String qualifiedName=importStatement.getQualifiedName();
    if (qualifiedName == null) {
      continue;
    }
    if (importStatement.isOnDemand()) {
      if (onDemandImports.contains(qualifiedName)) {
        registerError(importStatement);
      }
      onDemandImports.add(qualifiedName);
    }
 else {
      if (singleClassImports.contains(qualifiedName)) {
        registerError(importStatement);
        continue;
      }
      final PsiElement element=importStatement.resolve();
      if (!(element instanceof PsiClass)) {
        continue;
      }
      final PsiElement context=element.getContext();
      if (context == null) {
        continue;
      }
      final String contextName;
      if (context instanceof PsiJavaFile) {
        final PsiJavaFile file=(PsiJavaFile)context;
        contextName=file.getPackageName();
      }
 else       if (context instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)context;
        contextName=aClass.getQualifiedName();
      }
 else {
        continue;
      }
      if (onDemandImports.contains(contextName) && !ImportUtils.hasOnDemandImportConflict(qualifiedName,javaFile) && !ImportUtils.hasDefaultImportConflict(qualifiedName,javaFile)) {
        registerError(importStatement);
      }
      singleClassImports.add(qualifiedName);
    }
  }
}
