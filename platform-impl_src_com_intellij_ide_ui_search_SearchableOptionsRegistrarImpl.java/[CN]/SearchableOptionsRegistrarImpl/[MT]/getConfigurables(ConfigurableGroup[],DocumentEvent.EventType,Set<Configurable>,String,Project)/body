{
  Set<String> options=getProcessedWordsWithoutStemming(option);
  if (configurables == null) {
    configurables=new HashSet<Configurable>();
    for (    ConfigurableGroup group : groups) {
      configurables.addAll(Arrays.asList(group.getConfigurables()));
    }
  }
  final Set<Configurable> currentConfigurables=new HashSet<Configurable>(configurables);
  Set<String> helpIds=null;
  if (options.isEmpty()) {
    options.add(option);
  }
  for (  String opt : options) {
    final Set<OptionDescription> optionIds=getAcceptableDescriptions(opt);
    if (optionIds == null) {
      configurables.clear();
      return configurables;
    }
    final Set<String> ids=new HashSet<String>();
    for (    OptionDescription id : optionIds) {
      ids.add(id.getConfigurableId());
    }
    if (helpIds == null) {
      helpIds=ids;
    }
    helpIds.retainAll(ids);
  }
  if (helpIds != null) {
    for (Iterator<Configurable> it=configurables.iterator(); it.hasNext(); ) {
      Configurable configurable=it.next();
      if (CodeStyleFacade.getInstance(project).isUnsuitableCodestyleConfigurable(configurable)) {
        it.remove();
        continue;
      }
      if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable)configurable).getId()))) {
        it.remove();
      }
    }
  }
  if (type == DocumentEvent.EventType.REMOVE && currentConfigurables.equals(configurables)) {
    return getConfigurables(groups,DocumentEvent.EventType.CHANGE,null,option,project);
  }
  return configurables;
}
