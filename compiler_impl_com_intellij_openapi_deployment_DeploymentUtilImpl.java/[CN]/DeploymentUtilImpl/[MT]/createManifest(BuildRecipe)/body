{
  if (findUserSuppliedManifestFile(buildRecipe) != null) {
    return null;
  }
  final StringBuffer classPath=new StringBuffer();
  buildRecipe.visitInstructions(new BuildInstructionVisitor(){
    public boolean visitInstruction(    BuildInstruction instruction) throws RuntimeException {
      final String outputRelativePath=instruction.getOutputRelativePath();
      if (instruction.isExternalDependencyInstruction()) {
        if (classPath.length() != 0)         classPath.append(' ');
        final String jarReference=PathUtil.getCanonicalPath("/tmp/" + outputRelativePath).substring(1);
        classPath.append(trimForwardSlashes(jarReference));
      }
      return true;
    }
  }
,false);
  final Manifest manifest=new Manifest();
  Attributes mainAttributes=manifest.getMainAttributes();
  if (classPath.length() > 0) {
    mainAttributes.put(Attributes.Name.CLASS_PATH,classPath.toString());
  }
  ManifestBuilder.setGlobalAttributes(mainAttributes);
  return manifest;
}
