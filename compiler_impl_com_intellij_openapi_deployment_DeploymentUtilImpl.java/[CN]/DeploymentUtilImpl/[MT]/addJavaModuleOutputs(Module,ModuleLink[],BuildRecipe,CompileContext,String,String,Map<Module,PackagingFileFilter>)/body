{
  for (  ModuleLink moduleLink : containingModules) {
    Module childModule=moduleLink.getModule();
    if (childModule != null && ModuleType.JAVA.equals(childModule.getModuleType())) {
      final PackagingMethod packagingMethod=moduleLink.getPackagingMethod();
      if (PackagingMethod.DO_NOT_PACKAGE.equals(packagingMethod)) {
        continue;
      }
      PackagingFileFilter fileFilter=fileFilters != null ? fileFilters.get(childModule) : null;
      if (PackagingMethod.JAR_AND_COPY_FILE.equals(packagingMethod)) {
        addJarJavaModuleOutput(instructions,childModule,moduleLink.getURI(),context,linkContainerDescription,fileFilter);
      }
 else       if (PackagingMethod.JAR_AND_COPY_FILE_AND_LINK_VIA_MANIFEST.equals(packagingMethod)) {
        String relativePath=getRelativePathForManifestLinking(moduleLink.getURI());
        addJarJavaModuleOutput(instructions,childModule,relativePath,context,linkContainerDescription,fileFilter);
      }
 else       if (PackagingMethod.COPY_FILES.equals(packagingMethod)) {
        addModuleOutputContents(context,instructions,childModule,module,moduleLink.getURI(),explodedPath,fileFilter);
      }
 else       if (PackagingMethod.COPY_FILES_AND_LINK_VIA_MANIFEST.equals(packagingMethod)) {
        moduleLink.setPackagingMethod(PackagingMethod.JAR_AND_COPY_FILE_AND_LINK_VIA_MANIFEST);
        String relativePath=getRelativePathForManifestLinking(moduleLink.getURI());
        addJarJavaModuleOutput(instructions,childModule,relativePath,context,linkContainerDescription,fileFilter);
        context.addMessage(CompilerMessageCategory.WARNING,CompilerBundle.message("message.text.packaging.method.for.module.reset.to.method",ModuleUtil.getModuleNameInReadAction(childModule),PackagingMethod.JAR_AND_COPY_FILE_AND_LINK_VIA_MANIFEST),null,-1,-1);
      }
 else {
        LOG.error("invalid method " + packagingMethod);
      }
    }
  }
}
