{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      String outputRelativePath;
      final PackagingMethod packagingMethod=libraryLink.getPackagingMethod();
      if (packagingMethod.equals(PackagingMethod.COPY_FILES_AND_LINK_VIA_MANIFEST) || packagingMethod.equals(PackagingMethod.JAR_AND_COPY_FILE_AND_LINK_VIA_MANIFEST)) {
        outputRelativePath=getRelativePathForManifestLinking(libraryLink.getURI());
      }
 else {
        outputRelativePath=libraryLink.getURI();
      }
      final List<String> urls=libraryLink.getClassesRootUrls();
      boolean isDestinationDirectory=true;
      if (LibraryLink.MODULE_LEVEL.equals(libraryLink.getLevel()) && urls.size() == 1 && outputRelativePath.endsWith(JAR_SUFFIX)) {
        isDestinationDirectory=false;
      }
      for (      String url : urls) {
        final String path=PathUtil.toPresentableUrl(url);
        final File file=new File(path);
        boolean packagingMethodIsCopy=packagingMethod.equals(PackagingMethod.COPY_FILES_AND_LINK_VIA_MANIFEST) || packagingMethod.equals(PackagingMethod.COPY_FILES);
        String fileDestination=outputRelativePath;
        if (isDestinationDirectory) {
          if (file.isDirectory()) {
            if (!packagingMethodIsCopy) {
              fileDestination=appendToPath(fileDestination,file.getName() + JAR_SUFFIX);
            }
          }
 else {
            fileDestination=appendToPath(fileDestination,file.getName());
          }
        }
        if (file.isDirectory()) {
          boolean ok;
          if (packagingMethodIsCopy) {
            ok=addItemsRecursively(items,file,module,fileDestination,null,possibleBaseOutputPath);
          }
 else {
            fixPackagingMethod(packagingMethod,libraryLink,context);
            BuildInstruction instruction=new JarAndCopyBuildInstructionImpl(module,file,fileDestination);
            items.addInstruction(instruction);
            ok=true;
          }
          if (!ok) {
            final String name=libraryLink.getPresentableName();
            String additionalMessage=CompilerBundle.message("message.text.adjust.library.path");
            reportRecursiveCopying(context,file.getPath(),fileDestination,CompilerBundle.message("directory.description.library.directory",name),additionalMessage);
          }
        }
 else {
          items.addFileCopyInstruction(file,false,module,fileDestination,null);
        }
      }
    }
  }
);
}
