{
  node.getPsi().getChildren();
  if (node.getPsi() != null && node.getPsi() instanceof GrMethod) {
    GrMethod method=(GrMethod)node.getPsi();
    GrOpenBlock body=method.getBody();
    if (body != null) {
      ASTNode myNode=body.getNode();
      if (myNode != null) {
        descriptors.add(new FoldingDescriptor(myNode,myNode.getTextRange()));
      }
    }
  }
  if (node.getPsi() != null && node.getPsi().getParent() != null && node.getPsi() instanceof GrTypeDefinition && !(node.getPsi().getParent() instanceof GroovyFile)) {
    GrTypeDefinition typeDef=(GrTypeDefinition)node.getPsi();
    GrBody body=typeDef.getBody();
    if (body != null) {
      ASTNode myNode=body.getNode();
      if (myNode != null && (myNode.getText().contains("\n") || myNode.getText().contains("\t"))) {
        descriptors.add(new FoldingDescriptor(myNode,myNode.getTextRange()));
      }
    }
  }
  if (node.getElementType().equals(mML_COMMENT) && node.getText().substring(0,3).equals("/**") && (node.getText().contains("\n") || node.getText().contains("\r"))) {
    descriptors.add(new FoldingDescriptor(node,node.getTextRange()));
  }
  ASTNode child=node.getFirstChildNode();
  while (child != null) {
    appendDescriptors(child,document,descriptors);
    child=child.getTreeNext();
  }
}
