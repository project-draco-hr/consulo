{
  if (!isMultiLineStringLiteral(node))   return;
  if (!node.getElementType().equals(GSTRING) && !node.getElementType().equals(REGEX)) {
    descriptors.add(new FoldingDescriptor(node,node.getTextRange()));
    return;
  }
  final GrString grString=(GrString)node.getPsi();
  if (grString == null)   return;
  final GrStringInjection[] injections=grString.getInjections();
  if (injections.length == 0) {
    descriptors.add(new FoldingDescriptor(node,node.getTextRange()));
    return;
  }
  final String start_quote=GrStringUtil.getStartQuote(node.getText());
  final String end_quote=GrStringUtil.getEndQuote(node.getText());
  final FoldingGroup group=FoldingGroup.newGroup("GString");
  final TextRange nodeRange=node.getTextRange();
  int startOffset=nodeRange.getStartOffset();
  GrStringInjection injection=injections[0];
  TextRange injectionRange=injection.getTextRange();
  if (startOffset + 1 < injectionRange.getStartOffset()) {
    descriptors.add(new NamedFoldingDescriptor(node,startOffset,injectionRange.getStartOffset(),group,start_quote));
  }
  final String placeholder=" ";
  startOffset=injectionRange.getEndOffset();
  for (int i=1; i < injections.length; i++) {
    injection=injections[i];
    injectionRange=injection.getTextRange();
    final int endOffset=injectionRange.getStartOffset();
    if (endOffset - startOffset >= 2) {
      descriptors.add(new NamedFoldingDescriptor(injection.getNode().getTreePrev(),startOffset,endOffset,group,placeholder));
    }
    startOffset=injectionRange.getEndOffset();
  }
  if (startOffset + 1 < nodeRange.getEndOffset()) {
    descriptors.add(new NamedFoldingDescriptor(node.getLastChildNode(),startOffset,nodeRange.getEndOffset(),group,end_quote));
  }
}
