{
  if (!isMultiLineStringLiteral(node))   return;
  if (!node.getElementType().equals(GSTRING)) {
    descriptors.add(new FoldingDescriptor(node,node.getTextRange()));
    return;
  }
  final GrString grString=(GrString)node.getPsi();
  if (grString == null)   return;
  final GrStringInjection[] injections=grString.getInjections();
  if (injections.length == 0) {
    descriptors.add(new FoldingDescriptor(node,node.getTextRange()));
    return;
  }
  final String quote=GrStringUtil.getStartQuote(node.getText());
  final FoldingGroup group=FoldingGroup.newGroup("GString");
  final TextRange nodeRange=node.getTextRange();
  int startOffset=nodeRange.getStartOffset();
  GrStringInjection injection=injections[0];
  boolean hasClosableBlock=injection.getClosableBlock() != null;
  final String holderText=quote + "..." + (hasClosableBlock ? "${" : "$");
  TextRange injectionRange=injection.getTextRange();
  descriptors.add(new FoldingDescriptor(node,new TextRange(startOffset,injectionRange.getStartOffset() + (hasClosableBlock ? 2 : 1)),group){
    @Override public String getPlaceholderText(){
      return holderText;
    }
  }
);
  startOffset=injectionRange.getEndOffset() - (hasClosableBlock ? 1 : 0);
  for (int i=1; i < injections.length; i++) {
    injection=injections[i];
    boolean hasClosableBlockNew=injection.getClosableBlock() != null;
    injectionRange=injection.getTextRange();
    final String text=(hasClosableBlock ? "}" : "") + "..." + (hasClosableBlockNew ? "${" : "$");
    final int endOffset=injectionRange.getStartOffset() + (hasClosableBlockNew ? 2 : 1);
    if (endOffset - startOffset >= 2) {
      descriptors.add(new FoldingDescriptor(injection.getNode().getTreePrev(),new TextRange(startOffset,endOffset),group){
        @Override public String getPlaceholderText(){
          return text;
        }
      }
);
    }
    hasClosableBlock=hasClosableBlockNew;
    startOffset=injectionRange.getEndOffset() - (hasClosableBlock ? 1 : 0);
  }
  final String text=(hasClosableBlock ? "}" : "") + "..." + quote;
  descriptors.add(new FoldingDescriptor(node.getLastChildNode(),new TextRange(startOffset,nodeRange.getEndOffset()),group){
    @Override public String getPlaceholderText(){
      return text;
    }
  }
);
}
