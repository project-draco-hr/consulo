{
  return new ElementPresentation(){
    @Override public String getElementName(){
      PresentationNameProvider namer=myNamer.getValue();
      return namer == null ? ElementPresentationManager.getElementName(element) : namer.getName(element);
    }
    @Override public String getTypeName(){
      if (StringUtil.isNotEmpty(myPresentation.typeName()))       return myPresentation.typeName();
      return ElementPresentationManager.getTypeNameForObject(element);
    }
    @Override public Icon getIcon(){
      PresentationIconProvider iconProvider=myIconProvider.getValue();
      return iconProvider == null ? myIcon.getValue() : iconProvider.getIcon(element,0);
    }
    @Override public String getDocumentation(){
      final Ref<String> result=new Ref<String>();
      element.acceptChildren(new DomElementVisitor(){
        @Override public void visitDomElement(        DomElement element){
          if (element instanceof GenericValue && element.getChildDescription().getAnnotation(Documentation.class) != null) {
            result.set(((GenericValue)element).getStringValue());
          }
        }
      }
);
      return result.isNull() ? super.getDocumentation() : result.get();
    }
  }
;
}
