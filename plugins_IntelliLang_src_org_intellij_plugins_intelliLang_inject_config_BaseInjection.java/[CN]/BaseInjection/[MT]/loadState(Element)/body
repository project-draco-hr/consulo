{
  final PatternCompiler<PsiElement> helper=getCompiler();
  final Element e=element.getChild(getClass().getSimpleName());
  if (e != null) {
    myInjectedLanguageId=JDOMExternalizer.readString(e,"LANGUAGE");
    myPrefix=JDOMExternalizer.readString(e,"PREFIX");
    mySuffix=JDOMExternalizer.readString(e,"SUFFIX");
    setValuePattern(JDOMExternalizer.readString(e,"VALUE_PATTERN"));
    mySingleFile=JDOMExternalizer.readBoolean(e,"SINGLE_FILE");
    readExternalImpl(e);
  }
 else {
    myDisplayName=StringUtil.notNullize(element.getChildText("display-name"));
    myInjectedLanguageId=StringUtil.notNullize(element.getAttributeValue("language"));
    myPrefix=StringUtil.notNullize(element.getChildText("prefix"));
    mySuffix=StringUtil.notNullize(element.getChildText("suffix"));
    setValuePattern(element.getChildText("value-pattern"));
    mySingleFile=element.getChild("single-file") != null;
    readExternalImpl(element);
    final List<Element> placeElements=(List<Element>)element.getChildren("place");
    myPlaces=InjectionPlace.ARRAY_FACTORY.create(placeElements.size());
    for (int i=0, placeElementsSize=placeElements.size(); i < placeElementsSize; i++) {
      Element placeElement=placeElements.get(i);
      final boolean enabled=!Boolean.parseBoolean(placeElement.getAttributeValue("disabled"));
      final String text=placeElement.getText();
      myPlaces[i]=new InjectionPlace(helper.createElementPattern(text,getDisplayName()),enabled);
    }
  }
  if (myPlaces.length == 0) {
    generatePlaces();
  }
}
