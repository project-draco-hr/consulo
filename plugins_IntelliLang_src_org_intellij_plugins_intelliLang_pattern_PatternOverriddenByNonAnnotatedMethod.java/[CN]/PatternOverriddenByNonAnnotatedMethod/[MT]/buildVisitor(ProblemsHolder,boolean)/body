{
  return new JavaElementVisitor(){
    final Pair<String,? extends Set<String>> annotationName=Configuration.getInstance().getPatternAnnotationPair();
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    @Override public void visitMethod(    PsiMethod method){
      final PsiIdentifier psiIdentifier=method.getNameIdentifier();
      if (psiIdentifier == null || !PsiUtilEx.isLanguageAnnotationTarget(method)) {
        return;
      }
      final PsiAnnotation[] annotationFrom=AnnotationUtilEx.getAnnotationFrom(method,annotationName,true,false);
      if (annotationFrom.length == 0) {
        final PsiAnnotation[] annotationFromHierarchy=AnnotationUtilEx.getAnnotationFrom(method,annotationName,true,true);
        if (annotationFromHierarchy.length > 0) {
          final String annotationClassname=annotationFromHierarchy[annotationFromHierarchy.length - 1].getQualifiedName();
          final String argList=annotationFromHierarchy[annotationFromHierarchy.length - 1].getParameterList().getText();
          holder.registerProblem(psiIdentifier,"Non-annotated Method overrides @Pattern Method",new AnnotateFix(method,annotationClassname,argList));
        }
      }
    }
  }
;
}
