{
  if (text.length() == 0 && !myFileReferenceSet.isEndingSlashNotAllowed() && isLast() || ".".equals(text) || "/".equals(text)) {
    result.add(new PsiElementResolveResult(context));
  }
 else   if ("..".equals(text)) {
    final PsiFileSystemItem resolved=context.getParent();
    if (resolved != null) {
      result.add(new PsiElementResolveResult(resolved));
    }
  }
 else {
    final int separatorIndex=text.indexOf('/');
    if (separatorIndex >= 0) {
      final List<ResolveResult> resolvedContexts=new ArrayList<ResolveResult>();
      if (separatorIndex == 0 && "/".equals(context.getName())) {
        resolvedContexts.add(new PsiElementResolveResult(context));
      }
 else {
        innerResolveInContext(text.substring(0,separatorIndex),context,resolvedContexts);
      }
      final String restOfText=text.substring(separatorIndex + 1);
      for (      ResolveResult contextVariant : resolvedContexts) {
        final PsiFileSystemItem item=(PsiFileSystemItem)contextVariant.getElement();
        if (item != null) {
          innerResolveInContext(restOfText,item,result);
        }
      }
    }
 else {
      final String decoded=decode(text);
      if (decoded != null) {
        processVariants(context,new Processor<PsiElement>(){
          public boolean process(          final PsiElement element){
            final String name=((PsiNamedElement)element).getName();
            if (name != null) {
              if (myFileReferenceSet.isCaseSensitive() ? decoded.equals(name) : decoded.compareToIgnoreCase(name) == 0) {
                result.add(new PsiElementResolveResult(element));
                return false;
              }
            }
            return true;
          }
        }
);
      }
    }
  }
}
