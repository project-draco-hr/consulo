{
  final String s=getText();
  if (s != null && s.equals("/")) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  try {
    final List<CandidateInfo> ret=new ArrayList<CandidateInfo>();
    final List<Class> allowedClasses=new ArrayList<Class>();
    allowedClasses.add(PsiFile.class);
    allowedClasses.add(PackagePrefixFileSystemItem.class);
    for (    final FileReferenceHelper helper : getHelpers()) {
      allowedClasses.add(helper.getDirectoryClass());
    }
    final PsiElementProcessor<PsiFileSystemItem> processor=createChildrenProcessor(myFileReferenceSet.createProcessor(ret,allowedClasses,RESOLVERS));
    for (    PsiFileSystemItem context : getContexts()) {
      for (      final PsiElement child : context.getChildren()) {
        if (child instanceof PsiFileSystemItem) {
          processor.execute((PsiFileSystemItem)child);
        }
      }
    }
    final CandidateInfo[] candidates=ret.toArray(new CandidateInfo[ret.size()]);
    final Object[] variants=new Object[candidates.length];
    System.arraycopy(candidates,0,variants,0,candidates.length);
    if (myFileReferenceSet.isUrlEncoded()) {
      for (int i=0; i < candidates.length; i++) {
        final PsiElement element=candidates[i].getElement();
        if (element instanceof PsiNamedElement) {
          final PsiNamedElement psiElement=(PsiNamedElement)element;
          String name=psiElement.getName();
          final String encoded=encode(name);
          if (!encoded.equals(name)) {
            final Icon icon=psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
            final Object lookupValue=LookupValueFactory.createLookupValue(encoded,icon);
            variants[i]=lookupValue;
          }
        }
      }
    }
    return variants;
  }
 catch (  IncompatibleReferenceTypeException e) {
    LOG.error(e);
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
}
