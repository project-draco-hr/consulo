{
  if (tabPlacement != UISettings.TABS_NONE && !UISettings.getInstance().PRESENTATION_MODE) {
    if (myTabbedPane == null) {
      final EditorWithProviderComposite editor=getSelectedEditor();
      myPanel.removeAll();
      createTabs(tabPlacement);
      restoreHiddenTabs();
      setEditor(editor,true);
    }
 else {
      myTabbedPane.setTabPlacement(tabPlacement);
    }
  }
 else   if (myTabbedPane != null) {
    final boolean focusEditor=ToolWindowManager.getInstance(getManager().getProject()).isEditorComponentActive();
    final VirtualFile currentFile=getSelectedFile();
    if (currentFile != null) {
      currentFile.putUserData(FileEditorManagerImpl.CLOSING_TO_REOPEN,Boolean.TRUE);
    }
    final VirtualFile[] files=getFiles();
    myHiddenTabs.clear();
    myTabsHidingInProgress.set(true);
    for (    VirtualFile file : files) {
      closeFile(file,false);
    }
    getManager().runChange(new FileEditorManagerChange(){
      @Override public void run(      EditorsSplitters splitters){
        myTabsHidingInProgress.set(false);
      }
    }
,myOwner);
    disposeTabs();
    if (currentFile != null) {
      currentFile.putUserData(FileEditorManagerImpl.CLOSING_TO_REOPEN,null);
      getManager().openFileImpl2(this,currentFile,focusEditor && myOwner.getCurrentWindow() == this);
    }
 else {
      myPanel.repaint();
    }
  }
}
