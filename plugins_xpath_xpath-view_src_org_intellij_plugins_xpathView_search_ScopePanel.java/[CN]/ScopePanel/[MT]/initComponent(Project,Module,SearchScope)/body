{
  myProject=project;
  final ItemListener stateListener=new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      myModuleSelection.setEnabled(myModuleScope.isSelected());
      myDirectory.setEnabled(myDirectoryScope.isSelected());
      myRecursive.setEnabled(myDirectoryScope.isSelected());
      myCustomScopeSelection.setEnabled(myCustomScope.isSelected());
      if (e.getStateChange() == ItemEvent.SELECTED) {
        firePropertyChange("scope",null,getSearchScope());
      }
    }
  }
;
  final ItemListener scopeListener=new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        firePropertyChange("scope",null,getSearchScope());
      }
    }
  }
;
  myWholeProjectScope.addItemListener(stateListener);
  myWholeProjectScope.setSelected(scope.getScopeType() == SearchScope.ScopeType.PROJECT);
  myModuleScope.addItemListener(stateListener);
  myModuleScope.setSelected(scope.getScopeType() == SearchScope.ScopeType.MODULE);
  myDirectoryScope.addItemListener(stateListener);
  myDirectoryScope.setSelected(scope.getScopeType() == SearchScope.ScopeType.DIRECTORY);
  myCustomScope.addItemListener(stateListener);
  myCustomScope.setSelected(scope.getScopeType() == SearchScope.ScopeType.CUSTOM);
  myModuleSelection.setModel(createModel(ModuleManager.getInstance(project).getModules()));
  myModuleSelection.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final JLabel l=(JLabel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value != null) {
        final Module m=((Module)value);
        l.setIcon(m.getModuleType().getNodeIcon(true));
        l.setText(m.getName());
      }
      return l;
    }
  }
);
  Module m;
  if (scope.getModuleName() != null) {
    if ((m=ModuleManager.getInstance(project).findModuleByName(scope.getModuleName())) == null) {
      m=currentModule;
    }
  }
 else {
    m=currentModule;
  }
  if (m != null) {
    myModuleSelection.setSelectedItem(m);
  }
  myModuleSelection.addItemListener(scopeListener);
  final NamedScopeManager scopeManager=NamedScopeManager.getInstance(myProject);
  final JComboBox comboBox=myCustomScopeSelection.getComboBox();
  final NamedScope[] scopes=scopeManager.getScopes();
  comboBox.setModel(createModel(scopes));
  comboBox.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value != null) {
        value=((NamedScope)value).getName();
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  if (scope.getScopeName() != null) {
    comboBox.setSelectedItem(scope.getScopeName());
  }
  comboBox.addItemListener(scopeListener);
  myCustomScopeSelection.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final EditScopesDialog dlg=EditScopesDialog.editConfigurable(myProject,new Runnable(){
        public void run(){
          if (scope != null)           ScopeChooserConfigurable.getInstance(myProject).selectNodeInTree(scope);
        }
      }
);
      if (dlg.isOK()) {
        final NamedScope[] scopes=scopeManager.getScopes();
        comboBox.setModel(createModel(scopes));
        comboBox.setSelectedItem(dlg.getSelectedScope());
        firePropertyChange("scope",null,getSearchScope());
      }
    }
  }
);
  myDirectory.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      firePropertyChange("scope",null,getSearchScope());
    }
  }
);
  myDirectory.setText(scope.getPath());
  myDirectory.addBrowseFolderListener("Select Path","Select Path",project,FileChooserDescriptorFactory.createSingleFolderDescriptor());
  myRecursive.setSelected(scope.isRecursive());
}
