{
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getInstance(project);
  HighlightInfo[] highlights=DaemonCodeAnalyzerImpl.getHighlights(editor.getDocument(),severityRegistrar.getSeverityByIndex(0),project);
  if (highlights.length == 0) {
    showMessageWhenNoHighlights(project,file,editor);
    return;
  }
  DaemonCodeAnalyzerSettings settings=DaemonCodeAnalyzerSettings.getInstance();
  if (settings.NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST) {
    for (int idx=severityRegistrar.getSeveritiesCount() - 1; idx >= 0; idx--) {
      HighlightInfo[] errors=DaemonCodeAnalyzerImpl.getHighlights(editor.getDocument(),severityRegistrar.getSeverityByIndex(idx),project);
      if (errors.length != 0) {
        highlights=errors;
        break;
      }
    }
  }
  int offsetToGo=myGoForward ? Integer.MAX_VALUE : Integer.MIN_VALUE;
  int offsetToGoIfNoLuck=offsetToGo;
  HighlightInfo infoToGo=null;
  HighlightInfo infoToGoIfNoLuck=null;
  int caretOffsetIfNoLuck=myGoForward ? -1 : editor.getDocument().getTextLength();
  for (  HighlightInfo info : highlights) {
    int startOffset=getNavigationPositionFor(info,editor.getDocument());
    if (isBetter(caretOffset,offsetToGo,startOffset)) {
      offsetToGo=startOffset;
      infoToGo=info;
    }
    if (isBetter(caretOffsetIfNoLuck,offsetToGoIfNoLuck,startOffset)) {
      offsetToGoIfNoLuck=startOffset;
      infoToGoIfNoLuck=info;
    }
  }
  if (infoToGo == null)   infoToGo=infoToGoIfNoLuck;
  if (infoToGo != null) {
    navigateToError(project,editor,infoToGo);
  }
}
