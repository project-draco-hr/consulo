{
  final JavaCommandLineState state=new JavaCommandLineState(runnerSettings,configurationSettings){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
      final ProjectJdk jdk=rootManager.getJdk();
      if (jdk == null) {
        throw CantRunException.noJdkForModule(myModule);
      }
      if (!(jdk.getSdkType() instanceof IdeaJdk)) {
        throw new ExecutionException("Wrong jdk type for plugin module");
      }
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      String libPath=jdk.getHomePath() + File.separator + "lib";
      vm.add("-Xbootclasspath/p:" + libPath + File.separator+ "boot.jar");
      final String sandboxHome=((Sandbox)jdk.getSdkAdditionalData()).getSandboxHome();
      vm.defineProperty("idea.config.path",sandboxHome + File.separator + "config");
      vm.defineProperty("idea.system.path",sandboxHome + File.separator + "system");
      vm.defineProperty("idea.plugins.path",sandboxHome + File.separator + "plugins");
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      params.setWorkingDirectory(jdk.getHomePath() + File.separator + "bin"+ File.separator);
      params.setJdk(jdk);
      params.getClassPath().addFirst(libPath + File.separator + "log4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "openapi.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea.jar");
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuidlerFactory.getInstance().createBuilder(getProject()));
  state.setModulesToCompile(getModules());
  return state;
}
