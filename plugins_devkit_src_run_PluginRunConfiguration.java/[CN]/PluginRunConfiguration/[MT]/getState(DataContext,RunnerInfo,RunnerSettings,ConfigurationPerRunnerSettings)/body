{
  if (getModule() == null) {
    throw new ExecutionException("No module specified for configuration");
  }
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(getModule());
  final ProjectJdk jdk=rootManager.getJdk();
  if (jdk == null) {
    throw CantRunException.noJdkForModule(getModule());
  }
  if (!(jdk.getSdkType() instanceof IdeaJdk)) {
    throw new ExecutionException("Wrong jdk type for plugin module");
  }
  final String sandboxHome=((Sandbox)jdk.getSdkAdditionalData()).getSandboxHome();
  IdeaLicenseHelper.copyIDEALicencse(sandboxHome,jdk);
  final JavaCommandLineState state=new JavaCommandLineState(runnerSettings,configurationSettings){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      final String[] userVMOptions=VM_PARAMETERS != null ? VM_PARAMETERS.split(" ") : null;
      for (int i=0; userVMOptions != null && i < userVMOptions.length; i++) {
        vm.add(userVMOptions[i]);
      }
      String libPath=jdk.getHomePath() + File.separator + "lib";
      vm.add("-Xbootclasspath/p:" + libPath + File.separator+ "boot.jar");
      vm.defineProperty("idea.config.path",sandboxHome + File.separator + "config");
      vm.defineProperty("idea.system.path",sandboxHome + File.separator + "system");
      vm.defineProperty("idea.plugins.path",sandboxHome + File.separator + "plugins");
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      params.setWorkingDirectory(jdk.getHomePath() + File.separator + "bin"+ File.separator);
      params.setJdk(jdk);
      params.getClassPath().addFirst(libPath + File.separator + "log4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "openapi.jar");
      params.getClassPath().addFirst(libPath + File.separator + "extensions.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea.jar");
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuidlerFactory.getInstance().createBuilder(getProject()));
  state.setModulesToCompile(getModules());
  return state;
}
