{
  final JavaCommandLineState state=new JavaCommandLineState(runnerSettings,configurationSettings){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      if (getSandbox() == null) {
        throw new CantRunException("No sandbox specified");
      }
      Module[] modules=getModules();
      if (modules.length == 0) {
        throw new CantRunException("No plugin modules selected");
      }
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      String libPath=getBasePath() + "/lib";
      vm.add("-Xbootclasspath/p:" + libPath + "/boot.jar");
      vm.defineProperty("idea.config.path",getSandboxPath() + "/config");
      vm.defineProperty("idea.system.path",getSandboxPath() + "/system");
      vm.defineProperty("idea.plugins.path",getSandboxPath() + "/plugins");
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      params.setWorkingDirectory(getBasePath() + "/bin/");
      final ModuleRootManager rootManager=ModuleRootManager.getInstance(modules[0]);
      final ProjectJdk jdk=rootManager.getJdk();
      if (jdk == null) {
        throw CantRunException.noJdkForModule(modules[0]);
      }
      params.setJdk(jdk);
      params.getClassPath().addFirst(libPath + "/log4j.jar");
      params.getClassPath().addFirst(libPath + "/openapi.jar");
      params.getClassPath().addFirst(libPath + "/idea.jar");
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuidlerFactory.getInstance().createBuilder(getProject()));
  state.setModulesToCompile(getModules());
  return state;
}
