{
  if (getModule() == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.module.specified"));
  }
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(getModule());
  final Sdk jdk=rootManager.getSdk();
  if (jdk == null) {
    throw CantRunException.noJdkForModule(getModule());
  }
  final Sdk ideaJdk=IdeaJdk.findIdeaJdk(jdk);
  if (ideaJdk == null) {
    throw new ExecutionException(DevKitBundle.message("jdk.type.incorrect.common"));
  }
  String sandboxHome=((Sandbox)ideaJdk.getSdkAdditionalData()).getSandboxHome();
  if (sandboxHome == null) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  try {
    sandboxHome=new File(sandboxHome).getCanonicalPath();
  }
 catch (  IOException e) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  final String canonicalSandbox=sandboxHome;
  IdeaLicenseHelper.copyIDEALicencse(sandboxHome,ideaJdk);
  final JavaCommandLineState state=new JavaCommandLineState(env){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      fillParameterList(vm,VM_PARAMETERS);
      fillParameterList(params.getProgramParametersList(),PROGRAM_PARAMETERS);
      @NonNls String libPath=ideaJdk.getHomePath() + File.separator + "lib";
      vm.add("-Xbootclasspath/a:" + libPath + File.separator+ "boot.jar");
      vm.defineProperty("idea.config.path",canonicalSandbox + File.separator + "config");
      vm.defineProperty("idea.system.path",canonicalSandbox + File.separator + "system");
      vm.defineProperty("idea.plugins.path",canonicalSandbox + File.separator + "plugins");
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      params.setWorkingDirectory(ideaJdk.getHomePath() + File.separator + "bin"+ File.separator);
      params.setJdk(ideaJdk);
      params.getClassPath().addFirst(libPath + File.separator + "log4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "jdom.jar");
      params.getClassPath().addFirst(libPath + File.separator + "openapi.jar");
      params.getClassPath().addFirst(libPath + File.separator + "util.jar");
      params.getClassPath().addFirst(libPath + File.separator + "extensions.jar");
      params.getClassPath().addFirst(libPath + File.separator + "bootstrap.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea_rt.jar");
      params.getClassPath().addFirst(((JavaSdkType)ideaJdk.getSdkType()).getToolsPath(ideaJdk));
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuilderFactory.getInstance().createBuilder(getProject()));
  return state;
}
