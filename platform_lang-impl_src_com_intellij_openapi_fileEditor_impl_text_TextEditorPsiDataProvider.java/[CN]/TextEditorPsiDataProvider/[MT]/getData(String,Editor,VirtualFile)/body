{
  if (!file.isValid())   return null;
  if (dataId.equals(AnActionEvent.injectedId(PlatformDataKeys.EDITOR.getName()))) {
    if (PsiDocumentManager.getInstance(e.getProject()).isUncommited(e.getDocument())) {
      return e;
    }
 else {
      return InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(e,getPsiFile(e,file));
    }
  }
  if (dataId.equals(AnActionEvent.injectedId(LangDataKeys.PSI_ELEMENT.getName()))) {
    return getPsiElementIn((Editor)getData(AnActionEvent.injectedId(PlatformDataKeys.EDITOR.getName()),e,file),file);
  }
  if (LangDataKeys.PSI_ELEMENT.is(dataId)) {
    return getPsiElementIn(e,file);
  }
  if (dataId.equals(AnActionEvent.injectedId(LangDataKeys.LANGUAGE.getName()))) {
    PsiFile psiFile=(PsiFile)getData(AnActionEvent.injectedId(LangDataKeys.PSI_FILE.getName()),e,file);
    Editor editor=(Editor)getData(AnActionEvent.injectedId(PlatformDataKeys.EDITOR.getName()),e,file);
    if (psiFile == null || editor == null)     return null;
    return getLanguageAtCurrentPositionInEditor(editor,psiFile);
  }
  if (LangDataKeys.LANGUAGE.is(dataId)) {
    final PsiFile psiFile=getPsiFile(e,file);
    if (psiFile == null)     return null;
    return getLanguageAtCurrentPositionInEditor(e,psiFile);
  }
  if (dataId.equals(AnActionEvent.injectedId(PlatformDataKeys.VIRTUAL_FILE.getName()))) {
    PsiFile psiFile=(PsiFile)getData(AnActionEvent.injectedId(LangDataKeys.PSI_FILE.getName()),e,file);
    if (psiFile == null)     return null;
    return psiFile.getVirtualFile();
  }
  if (dataId.equals(AnActionEvent.injectedId(LangDataKeys.PSI_FILE.getName()))) {
    Editor editor=(Editor)getData(AnActionEvent.injectedId(PlatformDataKeys.EDITOR.getName()),e,file);
    if (editor == null) {
      return null;
    }
    final Project project=editor.getProject();
    if (project == null) {
      return null;
    }
    return PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  }
  if (LangDataKeys.PSI_FILE.is(dataId)) {
    return getPsiFile(e,file);
  }
  if (LangDataKeys.IDE_VIEW.is(dataId)) {
    final PsiFile psiFile=PsiManager.getInstance(e.getProject()).findFile(file);
    final PsiDirectory psiDirectory=psiFile != null ? psiFile.getParent() : null;
    if (psiDirectory != null && psiDirectory.isPhysical()) {
      return new IdeView(){
        public void selectElement(        final PsiElement element){
          Editor editor=EditorHelper.openInEditor(element);
          if (editor != null) {
            ToolWindowManager.getInstance(element.getProject()).activateEditorComponent();
          }
        }
        public PsiDirectory[] getDirectories(){
          return new PsiDirectory[]{psiDirectory};
        }
        public PsiDirectory getOrChooseDirectory(){
          return psiDirectory;
        }
      }
;
    }
  }
  return null;
}
