{
  dirtyScope.iterate(new ContentIterator(){
    public boolean processFile(    final VirtualFile vFile){
      SVNStatus status;
      final File[] ioFile=new File[]{null};
      try {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (vFile == null) {
              return;
            }
            ioFile[0]=new File(vFile.getPath());
          }
        }
);
        SVNStatusClient stClient=myVcs.createStatusClient();
        status=stClient.doStatus(ioFile[0],false,true);
        if (status != null) {
          final SVNStatusType statusType=status.getContentsStatus();
          if (statusType == SVNStatusType.STATUS_UNVERSIONED) {
            builder.processUnversionedFile(vFile);
          }
 else           if (statusType == SVNStatusType.STATUS_CONFLICTED || statusType == SVNStatusType.STATUS_MERGED || statusType == SVNStatusType.STATUS_MODIFIED) {
            final FilePath filePath=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(vFile);
            builder.processChange(new Change(new SvnUpToDateRevision(filePath,myVcs),new CurrentContentRevision(filePath)));
          }
 else           if (statusType == SVNStatusType.STATUS_ADDED) {
            final FilePath filePath=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(vFile);
            builder.processChange(new Change(null,new CurrentContentRevision(filePath)));
          }
 else           if (statusType == SVNStatusType.STATUS_DELETED) {
            final FilePath filePath=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(vFile);
            builder.processChange(new Change(new SvnUpToDateRevision(filePath,myVcs),null));
          }
        }
      }
 catch (      SVNException e) {
      }
      return true;
    }
  }
);
}
