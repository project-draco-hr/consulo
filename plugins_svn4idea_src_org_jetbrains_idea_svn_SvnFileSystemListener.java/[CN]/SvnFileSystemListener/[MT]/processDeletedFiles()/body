{
  MultiMap<Project,FilePath> deletedFiles=new MultiMap<Project,FilePath>();
  for (  DeletedFileInfo deletedFileInfo : myDeletedFiles) {
    final FilePath filePath=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(deletedFileInfo.myFile);
    deletedFiles.putValue(deletedFileInfo.myProject,filePath);
  }
  for (  Project project : deletedFiles.keySet()) {
    SvnVcs vcs=SvnVcs.getInstance(project);
    final VcsShowConfirmationOption.Value value=vcs.getDeleteConfirmation().getValue();
    if (value != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
      final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(project);
      List<FilePath> filePaths=deletedFiles.get(project);
      Collection<FilePath> filesToProcess;
      if (value == VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY) {
        filesToProcess=filePaths;
      }
 else {
        filesToProcess=vcsHelper.selectFilePathsToProcess(filePaths,SvnBundle.message("confirmation.title.delete.multiple.files"),null,SvnBundle.message("confirmation.title.delete.file"),SvnBundle.message("confirmation.text.delete.file"),vcs.getAddConfirmation());
      }
      if (filesToProcess != null) {
        List<VcsException> exceptions=new ArrayList<VcsException>();
        SVNWCClient wcClient=vcs.createWCClient();
        for (        FilePath file : filesToProcess) {
          File ioFile=new File(file.getPath());
          try {
            wcClient.doDelete(ioFile,true,false);
            VcsDirtyScopeManager.getInstance(project).fileDirty(file);
          }
 catch (          SVNException e) {
            exceptions.add(new VcsException(e));
          }
        }
        if (!exceptions.isEmpty()) {
          vcsHelper.showErrors(exceptions,"Errors Deleting Files");
        }
      }
    }
  }
}
