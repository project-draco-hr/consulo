{
  SvnVcs vcs=SvnVcs.getInstance(project);
  List<VirtualFile> addedVFiles=new ArrayList<VirtualFile>();
  Map<VirtualFile,File> copyFromMap=new HashMap<VirtualFile,File>();
  final Set<VirtualFile> recursiveItems=new HashSet<VirtualFile>();
  for (Iterator<AddedFileInfo> it=myAddedFiles.iterator(); it.hasNext(); ) {
    AddedFileInfo addedFileInfo=it.next();
    if (addedFileInfo.myProject == project) {
      it.remove();
      final File ioFile=new File(getIOFile(addedFileInfo.myDir),addedFileInfo.myName);
      VirtualFile addedFile=addedFileInfo.myDir.findChild(addedFileInfo.myName);
      if (addedFile == null) {
        addedFile=myLfs.refreshAndFindFileByIoFile(ioFile);
      }
      if (addedFile != null) {
        final SVNStatus fileStatus=getFileStatus(vcs,ioFile);
        if (fileStatus == null || fileStatus.getContentsStatus() != SVNStatusType.STATUS_IGNORED) {
          boolean isIgnored=ChangeListManager.getInstance(addedFileInfo.myProject).isIgnoredFile(addedFile);
          if (!isIgnored) {
            addedVFiles.add(addedFile);
            copyFromMap.put(addedFile,addedFileInfo.myCopyFrom);
            if (addedFileInfo.myRecursive) {
              recursiveItems.add(addedFile);
            }
          }
        }
      }
    }
  }
  if (addedVFiles.size() == 0)   return;
  final VcsShowConfirmationOption.Value value=vcs.getAddConfirmation().getValue();
  if (value != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
    final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(project);
    Collection<VirtualFile> filesToProcess;
    if (value == VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY) {
      filesToProcess=addedVFiles;
    }
 else {
      final String singleFilePrompt;
      if (addedVFiles.size() == 1 && addedVFiles.get(0).isDirectory()) {
        singleFilePrompt=SvnBundle.message("confirmation.text.add.dir");
      }
 else {
        singleFilePrompt=SvnBundle.message("confirmation.text.add.file");
      }
      filesToProcess=vcsHelper.selectFilesToProcess(addedVFiles,SvnBundle.message("confirmation.title.add.multiple.files"),null,SvnBundle.message("confirmation.title.add.file"),singleFilePrompt,vcs.getAddConfirmation());
    }
    if (filesToProcess != null) {
      final List<VcsException> exceptions=new ArrayList<VcsException>();
      SVNWCClient wcClient=vcs.createWCClient();
      final SVNCopyClient copyClient=vcs.createCopyClient();
      for (      VirtualFile file : filesToProcess) {
        final File ioFile=new File(file.getPath());
        try {
          final File copyFrom=copyFromMap.get(file);
          if (copyFrom != null) {
            try {
              new ActionWithTempFile(ioFile){
                protected void executeInternal() throws VcsException {
                  try {
                    final SVNCopySource[] copySource=new SVNCopySource[]{new SVNCopySource(SVNRevision.WORKING,SVNRevision.WORKING,copyFrom)};
                    copyClient.doCopy(copySource,ioFile,false,true,true);
                  }
 catch (                  SVNException e) {
                    throw new VcsException(e);
                  }
                }
              }
.execute();
            }
 catch (            VcsException e) {
              exceptions.add(e);
            }
          }
 else {
            wcClient.doAdd(ioFile,true,false,false,true);
          }
          VcsDirtyScopeManager.getInstance(project).fileDirty(file);
        }
 catch (        SVNException e) {
          exceptions.add(new VcsException(e));
        }
      }
      if (!exceptions.isEmpty()) {
        vcsHelper.showErrors(exceptions,SvnBundle.message("add.files.errors.title"));
      }
    }
  }
}
