{
  SVNMoveClient mover=vcs.createMoveClient();
  long srcTime=src.lastModified();
  try {
    final String list=SvnChangelistListener.getCurrentMapping(vcs.getProject(),src);
    if (isUndo(vcs)) {
      myUndoingMove=true;
      restoreFromUndoStorage(dst);
      mover.undoMove(src,dst);
    }
 else {
      SVNStatus srcStatus=getFileStatus(vcs,src);
      if (srcStatus == null || srcStatus.getContentsStatus() == SVNStatusType.STATUS_UNVERSIONED || srcStatus.getContentsStatus() == SVNStatusType.STATUS_EXTERNAL || srcStatus.getContentsStatus() == SVNStatusType.STATUS_MISSING || srcStatus.getContentsStatus() == SVNStatusType.STATUS_OBSTRUCTED) {
        return false;
      }
      mover.doMove(src,dst);
      if (list != null) {
        SvnChangelistListener.putUnderList(vcs.getProject(),list,dst);
      }
    }
    dst.setLastModified(srcTime);
  }
 catch (  SVNException e) {
    addToMoveExceptions(vcs.getProject(),e);
    return false;
  }
  return true;
}
