{
  final List<FilePath> deletedFiles=new ArrayList<FilePath>();
  for (Iterator<DeletedFileInfo> it=myDeletedFiles.iterator(); it.hasNext(); ) {
    DeletedFileInfo deletedFileInfo=it.next();
    if (deletedFileInfo.myProject == project) {
      it.remove();
      final FilePath filePath=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(deletedFileInfo.myFile);
      deletedFiles.add(filePath);
    }
  }
  if (deletedFiles.size() == 0 || myUndoingMove)   return;
  SvnVcs vcs=SvnVcs.getInstance(project);
  final VcsShowConfirmationOption.Value value=vcs.getDeleteConfirmation().getValue();
  if (value != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
    final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(project);
    Collection<FilePath> filesToProcess;
    if (value == VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY) {
      filesToProcess=deletedFiles;
    }
 else {
      final String singleFilePrompt;
      if (deletedFiles.size() == 1 && deletedFiles.get(0).isDirectory()) {
        singleFilePrompt=SvnBundle.message("confirmation.text.delete.dir");
      }
 else {
        singleFilePrompt=SvnBundle.message("confirmation.text.delete.file");
      }
      filesToProcess=vcsHelper.selectFilePathsToProcess(deletedFiles,SvnBundle.message("confirmation.title.delete.multiple.files"),null,SvnBundle.message("confirmation.title.delete.file"),singleFilePrompt,vcs.getAddConfirmation());
    }
    if (filesToProcess != null) {
      List<VcsException> exceptions=new ArrayList<VcsException>();
      SVNWCClient wcClient=vcs.createWCClient();
      for (      FilePath file : filesToProcess) {
        VirtualFile vFile=file.getVirtualFile();
        File ioFile=new File(file.getPath());
        try {
          wcClient.doDelete(ioFile,true,false);
          if (vFile != null && vFile.isValid() && vFile.isDirectory()) {
            vFile.refresh(true,true);
            VcsDirtyScopeManager.getInstance(project).dirDirtyRecursively(vFile,true);
          }
 else {
            VcsDirtyScopeManager.getInstance(project).fileDirty(file);
          }
        }
 catch (        SVNException e) {
          exceptions.add(new VcsException(e));
        }
      }
      if (!exceptions.isEmpty()) {
        vcsHelper.showErrors(exceptions,SvnBundle.message("delete.files.errors.title"));
      }
    }
  }
}
