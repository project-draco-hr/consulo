{
  final List<FilePath> deletedFiles=new ArrayList<FilePath>();
  fillDeletedFiles(project,deletedFiles);
  if (deletedFiles.isEmpty() || myUndoingMove)   return;
  SvnVcs vcs=SvnVcs.getInstance(project);
  final VcsShowConfirmationOption.Value value=vcs.getDeleteConfirmation().getValue();
  if (value != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
    final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(project);
    Collection<FilePath> filesToProcess;
    filesToProcess=promptAboutDeletion(deletedFiles,vcs,value,vcsHelper);
    if (filesToProcess != null) {
      List<VcsException> exceptions=new ArrayList<VcsException>();
      runInBackground(project,"Deleting files from Subversion",createDeleteRunnable(project,vcs,filesToProcess,exceptions));
      if (!exceptions.isEmpty()) {
        vcsHelper.showErrors(exceptions,SvnBundle.message("delete.files.errors.title"));
      }
    }
    for (    FilePath file : deletedFiles) {
      final FilePath parent=file.getParentPath();
      if (parent != null) {
        myFilesToRefresh.add(parent.getVirtualFile());
      }
    }
    if (filesToProcess != null) {
      deletedFiles.removeAll(filesToProcess);
    }
    for (    FilePath file : deletedFiles) {
      FileUtil.delete(file.getIOFile());
    }
  }
}
