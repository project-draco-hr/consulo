{
  Map<PsiElement,String> conflictDescriptions=new HashMap<PsiElement,String>();
  UsageInfo[] usagesIn=refUsages.get();
  addMethodConflicts(conflictDescriptions);
  conflictDescriptions.putAll(RenameUtil.getConflictDescriptions(usagesIn));
  Set<UsageInfo> usagesSet=new HashSet<UsageInfo>(Arrays.asList(usagesIn));
  RenameUtil.removeConflictUsages(usagesSet);
  if (myChangeInfo.isVisibilityChanged) {
    try {
      addInaccessibilityDescriptions(usagesSet,conflictDescriptions);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  if (myPrepareSuccessfulSwingThreadCallback != null && !conflictDescriptions.isEmpty()) {
    ConflictsDialog dialog=new ConflictsDialog(myProject,conflictDescriptions);
    dialog.show();
    if (!dialog.isOK()) {
      if (dialog.isShowConflicts())       prepareSuccessful();
      return false;
    }
  }
  if (myChangeInfo.isReturnTypeChanged) {
    askToRemoveCovariantOverriders(usagesSet);
  }
  refUsages.set(usagesSet.toArray(new UsageInfo[usagesSet.size()]));
  prepareSuccessful();
  return true;
}
