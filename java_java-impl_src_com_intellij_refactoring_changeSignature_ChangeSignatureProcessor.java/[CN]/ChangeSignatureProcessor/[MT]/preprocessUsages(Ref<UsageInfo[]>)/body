{
  MultiMap<PsiElement,String> conflictDescriptions=new MultiMap<PsiElement,String>();
  for (  ChangeSignatureUsageProcessor usageProcessor : ChangeSignatureUsageProcessor.EP_NAME.getExtensions()) {
    final MultiMap<PsiElement,String> conflicts=usageProcessor.findConflicts(myChangeInfo,refUsages);
    for (    PsiElement key : conflicts.keySet()) {
      Collection<String> collection=conflictDescriptions.get(key);
      collection.addAll(conflicts.get(key));
      conflictDescriptions.put(key,collection);
    }
  }
  final Set<UsageInfo> usagesSet=new HashSet<UsageInfo>(Arrays.asList(refUsages.get()));
  if (myPrepareSuccessfulSwingThreadCallback != null && !conflictDescriptions.isEmpty()) {
    ConflictsDialog dialog=new ConflictsDialog(myProject,conflictDescriptions);
    dialog.show();
    if (!dialog.isOK()) {
      if (dialog.isShowConflicts())       prepareSuccessful();
      return false;
    }
  }
  if (myChangeInfo.isReturnTypeChanged()) {
    askToRemoveCovariantOverriders(usagesSet);
  }
  refUsages.set(usagesSet.toArray(new UsageInfo[usagesSet.size()]));
  prepareSuccessful();
  return true;
}
