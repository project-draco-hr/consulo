{
  PsiSubstitutor substitutor;
  if (derivedMethod.getManager().areElementsEquivalent(derivedMethod,baseMethod)) {
    substitutor=PsiSubstitutor.EMPTY;
  }
 else {
    final PsiClass baseClass=baseMethod.getContainingClass();
    final PsiClass derivedClass=derivedMethod.getContainingClass();
    if (baseClass != null && derivedClass != null && InheritanceUtil.isInheritorOrSelf(derivedClass,baseClass,true)) {
      final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,derivedClass,PsiSubstitutor.EMPTY);
      final MethodSignature superMethodSignature=baseMethod.getSignature(superClassSubstitutor);
      final MethodSignature methodSignature=derivedMethod.getSignature(PsiSubstitutor.EMPTY);
      final PsiSubstitutor superMethodSubstitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(methodSignature,superMethodSignature);
      substitutor=superMethodSubstitutor != null ? superMethodSubstitutor : superClassSubstitutor;
    }
 else {
      substitutor=PsiSubstitutor.EMPTY;
    }
  }
  return substitutor;
}
