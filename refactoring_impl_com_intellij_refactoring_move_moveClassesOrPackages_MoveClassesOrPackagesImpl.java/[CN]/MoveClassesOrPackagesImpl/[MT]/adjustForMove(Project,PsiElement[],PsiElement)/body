{
  final PsiElement[] psiElements=new PsiElement[elements.length];
  List<String> names=new ArrayList<String>();
  for (int idx=0; idx < elements.length; idx++) {
    PsiElement element=elements[idx];
    if (element instanceof PsiDirectory) {
      PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(((PsiDirectory)element));
      LOG.assertTrue(aPackage != null);
      if (aPackage.getQualifiedName().length() == 0) {
        String message=RefactoringBundle.message("move.package.refactoring.cannot.be.applied.to.default.package");
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("move.tltle"),message,HelpID.getMoveHelpID(element),project);
        return null;
      }
      if (!checkNesting(project,aPackage,targetElement))       return null;
      if (!checkMovePackage(project,aPackage))       return null;
      element=aPackage;
    }
 else     if (element instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)element;
      if (!checkNesting(project,psiPackage,targetElement))       return null;
      if (!checkMovePackage(project,psiPackage))       return null;
    }
 else     if (element instanceof PsiClass) {
      PsiClass aClass=(PsiClass)element;
      if (aClass instanceof PsiAnonymousClass) {
        String message=RefactoringBundle.message("move.class.refactoring.cannot.be.applied.to.anonymous.classes");
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("move.tltle"),message,HelpID.getMoveHelpID(element),project);
        return null;
      }
      if (!(aClass.getParent() instanceof PsiFile)) {
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("moving.local.classes.is.not.supported"));
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("move.tltle"),message,HelpID.getMoveHelpID(element),project);
        return null;
      }
      final PsiFile file=aClass.getContainingFile();
      String name=file instanceof PsiJavaFile && ((PsiJavaFile)file).getClasses().length > 1 ? aClass.getName() + "." + StdFileTypes.JAVA.getDefaultExtension() : file.getName();
      if (names.contains(name)) {
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("there.are.going.to.be.multiple.destination.files.with.the.same.name"));
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("move.tltle"),message,HelpID.getMoveHelpID(element),project);
        return null;
      }
      names.add(name);
    }
    psiElements[idx]=element;
  }
  return psiElements;
}
