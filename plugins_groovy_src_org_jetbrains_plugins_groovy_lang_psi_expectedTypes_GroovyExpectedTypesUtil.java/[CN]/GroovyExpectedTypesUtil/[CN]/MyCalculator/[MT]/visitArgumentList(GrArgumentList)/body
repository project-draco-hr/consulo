{
  PsiElement parent=list.getParent();
  List<TypeConstraint> constraints=new ArrayList<TypeConstraint>();
  if (parent instanceof GrCallExpression) {
    GroovyResolveResult[] variants=((GrCallExpression)parent).getMethodVariants();
    int idx=getIndex(list);
    for (    GroovyResolveResult variant : variants) {
      PsiElement element=variant.getElement();
      if (element instanceof GrParametersOwner) {
        GrParameter[] parameters=((GrParametersOwner)element).getParameters();
        if (parameters.length <= idx)         continue;
        PsiType parameterType=variant.getSubstitutor().substitute(parameters[idx].getType());
        constraints.add(SubtypeConstraint.create(parameterType));
      }
    }
  }
  if (constraints.isEmpty())   makeDefault();
 else {
    myResult=constraints.toArray(new TypeConstraint[constraints.size()]);
  }
}
