{
  context.getProgressIndicator().pushState();
  try {
    final Compiler[] allCompilers=CompilerManager.getInstance(myProject).getCompilers(Compiler.class);
    context.getProgressIndicator().setText(CompilerBundle.message("progress.clearing.output"));
    for (    final Compiler compiler : allCompilers) {
      if (compiler instanceof GeneratingCompiler) {
        final StateCache<ValidityState> cache=getGeneratingCompilerCache((GeneratingCompiler)compiler);
        if (!myShouldClearOutputDirectory) {
          deleteUrls(cache.getUrlsIterator());
        }
        cache.wipe();
      }
 else       if (compiler instanceof FileProcessingCompiler) {
        final FileProcessingCompilerStateCache cache=getFileProcessingCompilerCache((FileProcessingCompiler)compiler);
        cache.wipe();
      }
 else       if (compiler instanceof TranslatingCompiler) {
        final TranslatingCompilerStateCache cache=getTranslatingCompilerCache((TranslatingCompiler)compiler);
        if (!myShouldClearOutputDirectory) {
          deleteUrls(cache.getOutputUrlsIterator());
        }
        cache.wipe();
      }
    }
    if (myShouldClearOutputDirectory) {
      final File[] files=getAllOutputDirectories();
      for (      File file : files) {
        deleteAllFilesIn(file);
      }
      final List<File> createdFiles=new ArrayList<File>(files.length);
      for (      final File file : files) {
        if (file.mkdirs()) {
          createdFiles.add(file);
        }
      }
      if (createdFiles.size() > 0) {
        CompilerUtil.refreshIOFiles(createdFiles);
      }
    }
    clearCompilerSystemDirectory(context);
  }
  finally {
    context.getProgressIndicator().popState();
  }
}
