{
  final CompilerProgressIndicator indicator=new CompilerProgressIndicator(myProject,CompilerWorkspaceConfiguration.getInstance(myProject).COMPILE_IN_BACKGROUND,forceCompile ? "Compile" : "Make");
  WindowManager.getInstance().getStatusBar(myProject).setInfo("");
  final CompileContextImpl compileContext=new CompileContextImpl(myProject,indicator,scope,new DependencyCache(myCachesDirectoryPath),this);
  for (Iterator<Pair<Compiler,Module>> it=myGenerationCompilerModuleToOutputDirMap.keySet().iterator(); it.hasNext(); ) {
    Pair<Compiler,Module> pair=it.next();
    compileContext.assignModule(myGenerationCompilerModuleToOutputDirMap.get(pair),pair.getSecond());
  }
  if (message != null) {
    compileContext.addMessage(message);
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  new Thread("Compile Thread"){
    public void run(){
synchronized (CompilerManager.getInstance(myProject)) {
        ProgressManager.getInstance().runProcess(new Runnable(){
          public void run(){
            doCompile(compileContext,isRebuild,forceCompile,callback,checkCachesVersion);
          }
        }
,compileContext.getProgressIndicator());
      }
    }
  }
.start();
}
