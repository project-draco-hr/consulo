{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  PsiClass ancestorClass=aClass.getSuperClass();
  final Set<PsiClass> visitedClasses=new HashSet<PsiClass>();
  while (ancestorClass != null) {
    if (!visitedClasses.add(ancestorClass)) {
      return;
    }
    final PsiMethod overridingMethod=ancestorClass.findMethodBySignature(method,true);
    if (overridingMethod != null) {
      if (overridingMethod.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
        final PsiJavaFile file=PsiTreeUtil.getParentOfType(aClass,PsiJavaFile.class);
        if (file == null) {
          return;
        }
        final PsiJavaFile ancestorFile=PsiTreeUtil.getParentOfType(ancestorClass,PsiJavaFile.class);
        if (ancestorFile == null) {
          return;
        }
        final String packageName=file.getPackageName();
        final String ancestorPackageName=ancestorFile.getPackageName();
        if (!packageName.equals(ancestorPackageName)) {
          registerMethodError(method);
          return;
        }
      }
    }
    ancestorClass=ancestorClass.getSuperClass();
  }
}
