{
  if (ifStatement.getElseBranch() != null) {
    return false;
  }
  PsiStatement thenBranch=ifStatement.getThenBranch();
  thenBranch=ConditionalUtils.stripBraces(thenBranch);
  final PsiElement previousStatement=PsiTreeUtil.skipSiblingsBackward(ifStatement,PsiWhiteSpace.class);
  if (!(previousStatement instanceof PsiStatement)) {
    return false;
  }
  PsiStatement elseBranch=(PsiStatement)previousStatement;
  elseBranch=ConditionalUtils.stripBraces(elseBranch);
  if (!ConditionalUtils.isAssignment(thenBranch,"true") || !ConditionalUtils.isAssignment(elseBranch,"false")) {
    return false;
  }
  final PsiAssignmentExpression thenExpression=(PsiAssignmentExpression)((PsiExpressionStatement)thenBranch).getExpression();
  final PsiAssignmentExpression elseExpression=(PsiAssignmentExpression)((PsiExpressionStatement)elseBranch).getExpression();
  final PsiJavaToken thenSign=thenExpression.getOperationSign();
  final PsiJavaToken elseSign=elseExpression.getOperationSign();
  final IElementType thenTokenType=thenSign.getTokenType();
  if (!thenTokenType.equals(elseSign.getTokenType())) {
    return false;
  }
  final PsiExpression thenLhs=thenExpression.getLExpression();
  final PsiExpression elseLhs=elseExpression.getLExpression();
  return EquivalenceChecker.expressionsAreEquivalent(thenLhs,elseLhs);
}
