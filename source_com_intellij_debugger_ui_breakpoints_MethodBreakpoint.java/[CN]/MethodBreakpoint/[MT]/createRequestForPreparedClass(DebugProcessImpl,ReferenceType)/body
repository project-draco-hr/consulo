{
  try {
    boolean hasMethod=false;
    for (Iterator iterator=classType.allMethods().iterator(); iterator.hasNext(); ) {
      Method method=(Method)iterator.next();
      String signature=method.signature();
      String name=method.name();
      if (myMethodName.equals(name) && mySignature.getName(debugProcess).equals(signature)) {
        hasMethod=true;
        break;
      }
    }
    if (!hasMethod) {
      debugProcess.getRequestsManager().setInvalid(this,"Method not found in class " + classType.name());
      return;
    }
    RequestManagerImpl requestManager=debugProcess.getRequestsManager();
    if (WATCH_ENTRY) {
      MethodEntryRequest entryRequest=(MethodEntryRequest)findRequest(debugProcess,MethodEntryRequest.class);
      if (entryRequest == null) {
        entryRequest=requestManager.createMethodEntryRequest(this);
      }
 else {
        entryRequest.disable();
      }
      entryRequest.addClassFilter(classType);
      debugProcess.getRequestsManager().enableRequest(entryRequest);
    }
    if (WATCH_EXIT) {
      MethodExitRequest exitRequest=(MethodExitRequest)findRequest(debugProcess,MethodExitRequest.class);
      if (exitRequest == null) {
        exitRequest=requestManager.createMethodExitRequest(this);
      }
 else {
        exitRequest.disable();
      }
      exitRequest.addClassFilter(classType);
      debugProcess.getRequestsManager().enableRequest(exitRequest);
    }
  }
 catch (  Exception e) {
    LOG.debug(e);
  }
}
