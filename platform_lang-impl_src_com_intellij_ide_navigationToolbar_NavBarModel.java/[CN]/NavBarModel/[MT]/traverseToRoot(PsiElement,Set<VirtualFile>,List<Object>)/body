{
  if (!psiElement.isValid())   return;
  final PsiFile containingFile=psiElement.getContainingFile();
  if (containingFile != null && (containingFile.getVirtualFile() == null || !containingFile.getViewProvider().isPhysical()))   return;
  psiElement=psiElement.getOriginalElement();
  PsiElement resultElement=psiElement;
  for (  final NavBarModelExtension modelExtension : Extensions.getExtensions(NavBarModelExtension.EP_NAME)) {
    resultElement=modelExtension.adjustElement(resultElement);
  }
  boolean foundByExtension=false;
  for (  final NavBarModelExtension modelExtension : Extensions.getExtensions(NavBarModelExtension.EP_NAME)) {
    final PsiElement parent=modelExtension.getParent(resultElement);
    if (parent != null) {
      if (parent != resultElement) {
        traverseToRoot(parent,roots,model);
      }
      foundByExtension=true;
    }
  }
  if (!foundByExtension) {
    if (containingFile != null) {
      final PsiDirectory containingDirectory=containingFile.getContainingDirectory();
      if (containingDirectory != null) {
        traverseToRoot(containingDirectory,roots,model);
      }
    }
 else     if (psiElement instanceof PsiDirectory) {
      final PsiDirectory psiDirectory=(PsiDirectory)psiElement;
      if (!roots.contains(psiDirectory.getVirtualFile())) {
        PsiDirectory parentDirectory=psiDirectory.getParentDirectory();
        if (parentDirectory == null) {
          VirtualFile jar=PathUtil.getLocalFile(psiDirectory.getVirtualFile());
          if (ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(jar)) {
            parentDirectory=PsiManager.getInstance(myProject).findDirectory(jar.getParent());
          }
        }
        if (parentDirectory != null) {
          traverseToRoot(parentDirectory,roots,model);
        }
      }
    }
 else     if (psiElement instanceof PsiFileSystemItem) {
      final VirtualFile virtualFile=((PsiFileSystemItem)psiElement).getVirtualFile();
      if (virtualFile == null)       return;
      final PsiManager psiManager=PsiManager.getInstance(myProject);
      if (virtualFile.isDirectory()) {
        resultElement=psiManager.findDirectory(virtualFile);
      }
 else {
        resultElement=psiManager.findFile(virtualFile);
      }
      if (resultElement == null)       return;
      final VirtualFile parentVFile=virtualFile.getParent();
      if (parentVFile != null && !roots.contains(parentVFile)) {
        final PsiDirectory parentDirectory=psiManager.findDirectory(parentVFile);
        if (parentDirectory != null) {
          traverseToRoot(parentDirectory,roots,model);
        }
      }
    }
  }
  model.add(resultElement);
}
