{
  final List<VcsException> exception=new ArrayList<VcsException>();
  final Collection<File> committables=getCommitables(paths);
  final SVNCommitClient committer=mySvnVcs.createCommitClient();
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  final Collection<VirtualFile> deletedFiles=new ArrayList<VirtualFile>();
  if (progress != null) {
    committer.setEventHandler(new ISVNEventHandler(){
      public void handleEvent(      final SVNEvent event,      double p){
        final String path=SvnUtil.getPathForProgress(event);
        if (path == null) {
          return;
        }
        if (event.getAction() == SVNEventAction.COMMIT_ADDED) {
          progress.setText2(SvnBundle.message("progress.text2.adding",path));
        }
 else         if (event.getAction() == SVNEventAction.COMMIT_DELETED) {
          @NonNls final String filePath="file://" + event.getFile().getAbsolutePath().replace(File.separatorChar,'/');
          VirtualFile vf=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
            @Nullable public VirtualFile compute(){
              return VirtualFileManager.getInstance().findFileByUrl(filePath);
            }
          }
);
          if (vf != null) {
            deletedFiles.add(vf);
          }
          progress.setText2(SvnBundle.message("progress.text2.deleting",path));
        }
 else         if (event.getAction() == SVNEventAction.COMMIT_MODIFIED) {
          progress.setText2(SvnBundle.message("progress.text2.sending",path));
        }
 else         if (event.getAction() == SVNEventAction.COMMIT_REPLACED) {
          progress.setText2(SvnBundle.message("progress.text2.replacing",path));
        }
 else         if (event.getAction() == SVNEventAction.COMMIT_DELTA_SENT) {
          progress.setText2(SvnBundle.message("progress.text2.transmitting.delta",path));
        }
      }
      public void checkCancelled() throws SVNCancelException {
        try {
          progress.checkCanceled();
        }
 catch (        ProcessCanceledException ex) {
          throw new SVNCancelException();
        }
      }
    }
);
  }
  if (progress != null) {
    doCommit(committables,progress,committer,comment,force,recursive,exception,feedback);
  }
 else   if (ApplicationManager.getApplication().isDispatchThread()) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        ProgressIndicator p=ProgressManager.getInstance().getProgressIndicator();
        doCommit(committables,p,committer,comment,force,recursive,exception,feedback);
      }
    }
,SvnBundle.message("progress.title.commit"),false,mySvnVcs.getProject());
  }
 else {
    doCommit(committables,progress,committer,comment,force,recursive,exception,feedback);
  }
  for (  VirtualFile f : deletedFiles) {
    f.putUserData(VirtualFile.REQUESTOR_MARKER,this);
  }
  return exception;
}
