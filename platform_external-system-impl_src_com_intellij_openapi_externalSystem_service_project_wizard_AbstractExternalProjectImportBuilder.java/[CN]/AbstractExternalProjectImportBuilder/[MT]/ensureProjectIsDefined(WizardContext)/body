{
  String externalSystemName=myExternalSystemId.getReadableName();
  File projectFile=getProjectFile();
  if (projectFile == null) {
    throw new ConfigurationException(ExternalSystemBundle.message("error.project.undefined"));
  }
  projectFile=getExternalProjectConfigToUse(projectFile);
  final Ref<ConfigurationException> error=new Ref<ConfigurationException>();
  ExternalProjectRefreshCallback callback=new ExternalProjectRefreshCallback(){
    @Override public void onSuccess(    @Nullable DataNode<ProjectData> externalProject){
      myExternalProjectNode=externalProject;
    }
    @Override public void onFailure(    @NotNull String errorMessage,    @Nullable String errorDetails){
      if (!StringUtil.isEmpty(errorDetails)) {
        LOG.warn(errorDetails);
      }
      error.set(new ConfigurationException(ExternalSystemBundle.message("error.resolve.with.reason",errorMessage),ExternalSystemBundle.message("error.resolve.generic")));
    }
  }
;
  try {
    final Project project=getProject(wizardContext);
    ExternalSystemUtil.refreshProject(project,myExternalSystemId,projectFile.getAbsolutePath(),callback,false,true);
  }
 catch (  IllegalArgumentException e) {
    throw new ConfigurationException(e.getMessage(),ExternalSystemBundle.message("error.cannot.parse.project",externalSystemName));
  }
  if (myExternalProjectNode == null) {
    ConfigurationException exception=error.get();
    if (exception != null) {
      throw exception;
    }
  }
 else {
    applyProjectSettings(wizardContext);
  }
}
