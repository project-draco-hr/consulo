{
  String externalSystemName=ExternalSystemApiUtil.toReadableName(myExternalSystemId);
  File projectFile=getProjectFile();
  if (projectFile == null) {
    throw new ConfigurationException(ExternalSystemBundle.message("error.project.undefined"));
  }
  projectFile=getExternalProjectConfigToUse(projectFile);
  final Ref<String> errorReason=new Ref<String>();
  final Ref<String> errorDetails=new Ref<String>();
  try {
    final Project project=getProject(wizardContext);
    myExternalProjectNode=ExternalSystemUtil.refreshProject(project,myExternalSystemId,projectFile.getAbsolutePath(),errorReason,errorDetails,false,true);
  }
 catch (  IllegalArgumentException e) {
    throw new ConfigurationException(e.getMessage(),ExternalSystemBundle.message("error.cannot.parse.project",externalSystemName));
  }
  if (myExternalProjectNode == null) {
    final String details=errorDetails.get();
    if (!StringUtil.isEmpty(details)) {
      LOG.warn(details);
    }
    String errorMessage;
    String reason=errorReason.get();
    if (reason == null) {
      errorMessage=ExternalSystemBundle.message("error.resolve.generic.without.reason",externalSystemName,projectFile.getPath());
    }
 else {
      errorMessage=ExternalSystemBundle.message("error.resolve.with.reason",reason);
    }
    throw new ConfigurationException(errorMessage,ExternalSystemBundle.message("error.resolve.generic"));
  }
 else {
    applyProjectSettings(wizardContext);
  }
}
