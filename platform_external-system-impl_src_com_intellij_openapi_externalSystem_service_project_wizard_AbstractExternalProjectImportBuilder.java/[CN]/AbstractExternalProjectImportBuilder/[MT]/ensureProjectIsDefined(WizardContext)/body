{
  final String externalSystemName=myExternalSystemId.getReadableName();
  File projectFile=getProjectFile();
  if (projectFile == null) {
    throw new ConfigurationException(ExternalSystemBundle.message("error.project.undefined"));
  }
  projectFile=getExternalProjectConfigToUse(projectFile);
  final Ref<ConfigurationException> error=new Ref<ConfigurationException>();
  final ExternalProjectRefreshCallback callback=new ExternalProjectRefreshCallback(){
    @Override public void onSuccess(    @Nullable DataNode<ProjectData> externalProject){
      myExternalProjectNode=externalProject;
    }
    @Override public void onFailure(    @NotNull String errorMessage,    @Nullable String errorDetails){
      if (!StringUtil.isEmpty(errorDetails)) {
        LOG.warn(errorDetails);
      }
      error.set(new ConfigurationException(ExternalSystemBundle.message("error.resolve.with.reason",errorMessage),ExternalSystemBundle.message("error.resolve.generic")));
    }
  }
;
  final Project project=getProject(wizardContext);
  final File finalProjectFile=projectFile;
  final String externalProjectPath=FileUtil.toCanonicalPath(finalProjectFile.getAbsolutePath());
  final Ref<ConfigurationException> exRef=new Ref<ConfigurationException>();
  executeAndRestoreDefaultProjectSettings(project,new Runnable(){
    @Override public void run(){
      try {
        ExternalSystemUtil.refreshProject(project,myExternalSystemId,externalProjectPath,callback,false,true);
      }
 catch (      IllegalArgumentException e) {
        exRef.set(new ConfigurationException(e.getMessage(),ExternalSystemBundle.message("error.cannot.parse.project",externalSystemName)));
      }
    }
  }
);
  ConfigurationException ex=exRef.get();
  if (ex != null) {
    throw ex;
  }
  if (myExternalProjectNode == null) {
    ConfigurationException exception=error.get();
    if (exception != null) {
      throw exception;
    }
  }
 else {
    applyProjectSettings(wizardContext);
  }
}
