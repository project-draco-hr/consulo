{
  Collection<DataNode<LibraryData>> libraries=ExternalSystemApiUtil.findAll(projectWithResolvedLibraries,ProjectKeys.LIBRARY);
  ExternalSystemApiUtil.executeProjectChangeAction(project,projectWithResolvedLibraries.getData().getOwner(),libraries,new Runnable(){
    @Override public void run(){
      ProjectRootManagerEx.getInstanceEx(project).mergeRootsChangesDuring(new Runnable(){
        @Override public void run(){
          if (ExternalSystemApiUtil.isNewProjectConstruction()) {
            LibraryTable projectLibraryTable=ProjectLibraryTable.getInstance(project);
            if (projectLibraryTable == null) {
              LOG.warn("Can't resolve external dependencies of the target gradle project (" + project + "). Reason: project "+ "library table is undefined");
              return;
            }
            LibraryTable.ModifiableModel model=projectLibraryTable.getModifiableModel();
            try {
              for (              Library library : model.getLibraries()) {
                model.removeLibrary(library);
              }
            }
  finally {
              model.commit();
            }
          }
          Set<DataNode<?>> toImport=ContainerUtilRt.newHashSet();
          toImport.add(projectWithResolvedLibraries);
          myProjectDataManager.importData(toImport,project,false);
        }
      }
);
    }
  }
);
}
