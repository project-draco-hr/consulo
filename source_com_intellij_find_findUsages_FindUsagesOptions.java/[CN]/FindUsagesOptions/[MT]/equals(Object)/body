{
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  final FindUsagesOptions that=(FindUsagesOptions)o;
  if (isCheckDeepInheritance != that.isCheckDeepInheritance)   return false;
  if (isClassesUsages != that.isClassesUsages)   return false;
  if (isDerivedClasses != that.isDerivedClasses)   return false;
  if (isDerivedInterfaces != that.isDerivedInterfaces)   return false;
  if (isFieldsUsages != that.isFieldsUsages)   return false;
  if (isImplementingClasses != that.isImplementingClasses)   return false;
  if (isImplementingMethods != that.isImplementingMethods)   return false;
  if (isIncludeInherited != that.isIncludeInherited)   return false;
  if (isIncludeOverloadUsages != that.isIncludeOverloadUsages)   return false;
  if (isIncludeSubpackages != that.isIncludeSubpackages)   return false;
  if (isMethodsUsages != that.isMethodsUsages)   return false;
  if (isOverridingMethods != that.isOverridingMethods)   return false;
  if (isReadAccess != that.isReadAccess)   return false;
  if (isSearchForTextOccurences != that.isSearchForTextOccurences)   return false;
  if (isSkipImportStatements != that.isSkipImportStatements)   return false;
  if (isSkipPackageStatements != that.isSkipPackageStatements)   return false;
  if (isThrowUsages != that.isThrowUsages)   return false;
  if (isUsages != that.isUsages)   return false;
  if (isWriteAccess != that.isWriteAccess)   return false;
  if (myThrowRoot != null ? !myThrowRoot.equals(that.myThrowRoot) : that.myThrowRoot != null)   return false;
  if (searchScope != null ? !searchScope.equals(that.searchScope) : that.searchScope != null)   return false;
  return true;
}
