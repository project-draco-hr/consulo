{
  if (item instanceof LazyParseableToken) {
    final FlyweightCapableTreeStructure<LighterASTNode> tree=((LazyParseableToken)item).parseContents();
    final LighterASTNode root=tree.getRoot();
    return tree.getChildren(tree.prepareForGetChildren(root),into);
  }
  if (item instanceof Token || item instanceof ErrorItem)   return 0;
  StartMarker marker=(StartMarker)item;
  count=0;
  ProductionMarker child=marker.firstChild;
  ProductionMarker prevChild=null;
  int lexIndex=marker.myLexemeIndex;
  while (child != null) {
    lexIndex=insertLeafs(lexIndex,child.myLexemeIndex,into,marker.myBuilder);
    if (child instanceof StartMarker && ((StartMarker)child).myDoneMarker.myCollapse) {
      final int start=marker.myBuilder.myLexStarts[child.myLexemeIndex];
      final int end=marker.myBuilder.myLexStarts[((StartMarker)child).myDoneMarker.myLexemeIndex];
      insertLeaf(into,start,end,child.getTokenType(),marker.myBuilder);
      if (prevChild != null)       prevChild.next=child.next;
      if (marker.firstChild == child)       marker.firstChild=child.next;
      if (marker.lastChild == child)       marker.lastChild=prevChild;
    }
 else {
      ensureCapacity(into);
      into.get()[count++]=child;
      prevChild=child;
    }
    if (child instanceof StartMarker) {
      lexIndex=((StartMarker)child).myDoneMarker.myLexemeIndex;
    }
    child=child.next;
  }
  insertLeafs(lexIndex,marker.myDoneMarker.myLexemeIndex,into,marker.myBuilder);
  return count;
}
