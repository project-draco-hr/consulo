{
  final Stack<StartMarker> markers=new Stack<StartMarker>();
  final Stack<CompositeElement> nodes=new Stack<CompositeElement>();
  markers.push(rootMarker);
  nodes.push(rootNode);
  StartMarker curMarker=rootMarker;
  CompositeElement curNode=rootNode;
  int lexIndex=rootMarker.myLexemeIndex;
  int lastErrorIndex=-1;
  for (int i=myProduction.indexOf(rootMarker) + 1; i <= myProduction.indexOf(rootMarker.myDoneMarker); i++) {
    final ProductionMarker item=myProduction.get(i);
    lexIndex=insertLeaves(lexIndex,item.myLexemeIndex,curNode);
    if (item instanceof StartMarker) {
      final StartMarker marker=(StartMarker)item;
      if (!marker.myDoneMarker.myCollapse) {
        markers.push(curMarker);
        curMarker=marker;
        final CompositeElement childNode=createComposite(curMarker);
        curNode.rawAddChildren(childNode);
        nodes.push(curNode);
        curNode=childNode;
      }
 else {
        lexIndex=collapseLeaves(curNode,marker);
        i=myProduction.indexOf(marker.myDoneMarker);
      }
    }
 else     if (item instanceof DoneMarker) {
      curMarker=markers.pop();
      curNode=nodes.pop();
    }
 else     if (item instanceof ErrorItem) {
      int curToken=item.myLexemeIndex;
      if (curToken == lastErrorIndex)       continue;
      lastErrorIndex=curToken;
      final PsiErrorElementImpl errorElement=new PsiErrorElementImpl();
      errorElement.setErrorDescription(((ErrorItem)item).myMessage);
      curNode.rawAddChildren(errorElement);
    }
  }
}
