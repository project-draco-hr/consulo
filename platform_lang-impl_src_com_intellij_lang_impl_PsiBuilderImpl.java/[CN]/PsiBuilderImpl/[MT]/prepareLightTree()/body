{
  markTokenTypeChecked();
  for (int i=1; i < myProduction.size() - 1; i++) {
    final ProductionMarker item=myProduction.get(i);
    if (item instanceof StartMarker && ((StartMarker)item).myDoneMarker == null) {
      LOG.error(UNBALANCED_MESSAGE);
    }
    final int prevProductionLexIndex=myProduction.get(i - 1).myLexemeIndex;
    int wsStartIndex=item.myLexemeIndex;
    while (wsStartIndex > prevProductionLexIndex && whitespaceOrComment(myLexTypes[wsStartIndex - 1]))     wsStartIndex--;
    int wsEndIndex=item.myLexemeIndex;
    while (wsEndIndex < myLexemeCount && whitespaceOrComment(myLexTypes[wsEndIndex]))     wsEndIndex++;
    final List<IElementType> wsTokens=CollectionFactory.arrayList(myLexTypes,wsStartIndex,wsEndIndex);
    item.myLexemeIndex=wsStartIndex + item.myEdgeProcessor.process(wsTokens);
  }
  StartMarker rootMarker=(StartMarker)myProduction.get(0);
  StartMarker curNode=rootMarker;
  Stack<StartMarker> nodes=new Stack<StartMarker>();
  nodes.push(rootMarker);
  int lastErrorIndex=-1;
  for (int i=1; i < myProduction.size(); i++) {
    ProductionMarker item=myProduction.get(i);
    if (curNode == null)     LOG.error("Unexpected end of the production");
    if (item instanceof StartMarker) {
      StartMarker marker=(StartMarker)item;
      curNode.addChild(marker);
      nodes.push(curNode);
      curNode=marker;
    }
 else     if (item instanceof DoneMarker) {
      curNode=nodes.pop();
    }
 else     if (item instanceof ErrorItem) {
      int curToken=item.myLexemeIndex;
      if (curToken == lastErrorIndex)       continue;
      lastErrorIndex=curToken;
      curNode.addChild(item);
    }
  }
  final boolean allTokensInserted=myCurrentLexeme >= myLexemeCount;
  if (!allTokensInserted) {
    LOG.error("Not all of the tokens inserted to the tree, parsed text:\n" + myText);
  }
  if (myLexStarts.length <= myCurrentLexeme + 1) {
    resizeLexemes(myCurrentLexeme + 1);
  }
  myLexStarts[myCurrentLexeme]=myText.length();
  myLexStarts[myCurrentLexeme + 1]=0;
  myLexTypes[myCurrentLexeme]=null;
  LOG.assertTrue(curNode == rootMarker,UNBALANCED_MESSAGE);
  return rootMarker;
}
