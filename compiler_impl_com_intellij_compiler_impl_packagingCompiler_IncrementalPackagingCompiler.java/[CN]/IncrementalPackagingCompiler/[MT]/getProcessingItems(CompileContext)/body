{
  return new ReadAction<ProcessingItem[]>(){
    protected void run(    final Result<ProcessingItem[]> result){
      Module[] affectedModules=context.getCompileScope().getAffectedModules();
      if (affectedModules.length == 0) {
        result.setResult(ProcessingItem.EMPTY_ARRAY);
        return;
      }
      Module[] allModules=ModuleManager.getInstance(myProject).getSortedModules();
      ProcessingItemsBuilderContext builderContext=new ProcessingItemsBuilderContext(context);
      final BuildParticipantProvider<?>[] providers=DeploymentUtilImpl.getBuildParticipantProviders();
      for (      BuildParticipantProvider<?> provider : providers) {
        addItemsForProvider(provider,allModules,builderContext);
      }
      context.putUserData(BUILDER_CONTEXT_KEY,builderContext);
      PackagingProcessingItem[] allProcessingItems=builderContext.getProcessingItems(affectedModules);
      if (LOG.isDebugEnabled()) {
        int num=Math.min(100,allProcessingItems.length);
        LOG.debug("All files (" + num + " of "+ allProcessingItems.length+ "):");
        for (int i=0; i < num; i++) {
          LOG.debug(allProcessingItems[i].getFile().getPath());
        }
      }
      boolean hasFilesToDelete=collectFilesToDelete(context,builderContext.getProcessingItems());
      if (hasFilesToDelete) {
        MockProcessingItem mockItem=new MockProcessingItem(new LightVirtualFile("239239293"));
        result.setResult(ArrayUtil.append(allProcessingItems,mockItem,ProcessingItem.class));
      }
 else {
        result.setResult(allProcessingItems);
      }
    }
  }
.execute().getResultObject();
}
