{
  final Sdk jdk=chunk.getJdk();
  CompilerUtil.addSourceCommandLineSwitch(jdk,chunk.getLanguageLevel(),commandLine);
  final String bootCp=chunk.getCompilationBootClasspath();
  final String classPath=chunk.getCompilationClasspath();
  commandLine.add("-bootclasspath");
  commandLine.add(quoteBootClasspath ? CompilerUtil.quotePath(bootCp) : bootCp);
  commandLine.add("-classpath");
  commandLine.add(classPath);
  commandLine.add("-d");
  commandLine.add(outputPath.replace('/',File.separatorChar));
  commandLine.add("-verbose");
  StringTokenizer tokenizer=new StringTokenizer(compilerSettings.getOptionsString(myProject)," ");
  while (tokenizer.hasMoreTokens()) {
    commandLine.add(tokenizer.nextToken());
  }
  final List<VirtualFile> files=chunk.getFilesToCompile();
  if (useTempFile) {
    File sourcesFile=FileUtil.createTempFile("javac",".tmp");
    sourcesFile.deleteOnExit();
    myTempFiles.add(sourcesFile);
    final PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(sourcesFile)));
    try {
      for (      final VirtualFile file : files) {
        final String path=file.getPath().replace('/',File.separatorChar);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Adding path for compilation " + path);
        }
        writer.println(CompilerUtil.quotePath(path));
      }
    }
  finally {
      writer.close();
    }
    commandLine.add("@" + sourcesFile.getAbsolutePath());
  }
 else {
    for (    VirtualFile file : files) {
      commandLine.add(file.getPath());
    }
  }
}
