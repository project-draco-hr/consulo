{
  text.append("\n");
  text.append("  ");
  writeMethodModifiers(text,constructor.getModifierList(),JAVA_MODIFIERS);
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  String paramType;
  GrTypeElement paramTypeElement;
  for (int i=0; i < parameterList.length; i++) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    paramTypeElement=parameter.getTypeElementGroovy();
    paramType=getTypeText(paramTypeElement);
    text.append(paramType);
    text.append(" ");
    text.append(parameter.getName());
  }
  text.append(")");
  text.append(" ");
  final GrConstructorInvocation constructorInvocation=constructor.getChainingConstructorInvocation();
  if (constructorInvocation != null && constructorInvocation.isSuperCall()) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        PsiMethod superConstructor=constructorInvocation.resolveConstructor();
        if (superConstructor == null) {
          final GroovyResolveResult[] results=constructorInvocation.multiResolveConstructor();
          if (results.length > 0) {
            superConstructor=(PsiMethod)results[0].getElement();
          }
        }
        if (superConstructor != null) {
          final PsiClassType[] throwsTypes=superConstructor.getThrowsList().getReferencedTypes();
          if (throwsTypes.length > 0) {
            text.append(" throws ");
            for (int i=0; i < throwsTypes.length; i++) {
              if (i > 0)               text.append(", ");
              text.append(getTypeText(throwsTypes[i]));
            }
          }
        }
        text.append("{\n");
        text.append("    ");
        text.append("super");
        text.append("(");
        if (superConstructor != null) {
          final PsiParameter[] superParams=superConstructor.getParameterList().getParameters();
          for (int i=0; i < superParams.length; i++) {
            if (i > 0)             text.append(", ");
            String typeText=getTypeText(superParams[i].getType());
            text.append("(" + typeText + ")"+ getDefaultValueText(typeText));
          }
        }
        text.append(")");
        text.append(";");
      }
    }
);
  }
 else {
    text.append("{\n");
  }
  text.append("\n  }");
  text.append("\n");
}
