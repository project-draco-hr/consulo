{
  final boolean isScript=typeDefinition == null;
  writePackageStatement(text,packageDefinition);
  GrMembersDeclaration[] membersDeclarations=typeDefinition instanceof GrTypeDefinition ? ((GrTypeDefinition)typeDefinition).getMemberDeclarations() : GrMembersDeclaration.EMPTY_ARRAY;
  boolean isClassDef=typeDefinition instanceof GrClassDefinition;
  boolean isInterface=typeDefinition instanceof GrInterfaceDefinition;
  boolean isEnum=typeDefinition instanceof GrEnumTypeDefinition;
  boolean isAtInterface=typeDefinition instanceof GrAnnotationTypeDefinition;
  if (typeDefinition != null) {
    PsiModifierList modifierList=typeDefinition.getModifierList();
    boolean wasAddedModifiers=modifierList != null && writeTypeDefinitionMethodModifiers(text,modifierList,JAVA_TYPE_DEFINITION_MODIFIERS,typeDefinition.isInterface());
    if (!wasAddedModifiers) {
      text.append("public ");
    }
  }
  if (isScript) {
    text.append("public ");
  }
  if (isInterface)   text.append("interface");
 else   if (isEnum)   text.append("enum");
 else   if (isAtInterface)   text.append("@interface");
 else   text.append("class");
  text.append(" ");
  text.append(typeDefinitionName);
  if (typeDefinition != null) {
    appendTypeParameters(text,typeDefinition);
  }
  text.append(" ");
  if (isScript) {
    text.append("extends ");
    text.append("groovy.lang.Script ");
  }
 else   if (!isEnum && !isAtInterface) {
    final PsiClassType[] extendsClassesTypes=typeDefinition.getExtendsListTypes();
    if (extendsClassesTypes.length > 0) {
      text.append("extends ");
      text.append(computeTypeText(extendsClassesTypes[0]));
      text.append(" ");
    }
 else {
      if (isClassDef) {
        text.append("extends ");
        text.append(GrTypeDefinition.DEFAULT_BASE_CLASS_NAME);
        text.append(" ");
      }
    }
    PsiClassType[] implementsTypes=typeDefinition.getImplementsListTypes();
    if (implementsTypes.length > 0) {
      text.append(isInterface ? "extends " : "implements ");
      int i=0;
      while (i < implementsTypes.length) {
        if (i > 0)         text.append(", ");
        text.append(computeTypeText(implementsTypes[i]));
        text.append(" ");
        i++;
      }
    }
  }
  text.append("{");
  if (isEnum) {
    writeEnumConstants(text,(GrEnumTypeDefinition)typeDefinition);
  }
  boolean wasRunMethodPresent=false;
  Set<MethodSignature> methodSignatures=new HashSet<MethodSignature>();
  PsiMethod[] methods=typeDefinition == null ? PsiMethod.EMPTY_ARRAY : typeDefinition.getMethods();
  for (  PsiMethod method : methods) {
    if (method instanceof GrConstructor) {
      writeConstructor(text,(GrConstructor)method,isEnum);
      continue;
    }
    PsiParameter[] parameters=method.getParameterList().getParameters();
    if (parameters.length > 0) {
      PsiParameter[] parametersCopy=new PsiParameter[parameters.length];
      PsiType[] parameterTypes=new PsiType[parameters.length];
      for (int i=0; i < parameterTypes.length; i++) {
        parametersCopy[i]=parameters[i];
        parameterTypes[i]=parameters[i].getType();
      }
      for (int i=parameters.length - 1; i >= 0; i--) {
        MethodSignature signature=MethodSignatureUtil.createMethodSignature(method.getName(),parameterTypes,method.getTypeParameters(),PsiSubstitutor.EMPTY);
        if (methodSignatures.add(signature)) {
          writeMethod(text,method,parametersCopy);
        }
        PsiParameter parameter=parameters[i];
        if (!(parameter instanceof GrParameter) || !((GrParameter)parameter).isOptional())         break;
        parameterTypes=ArrayUtil.remove(parameterTypes,parameterTypes.length - 1);
        parametersCopy=ArrayUtil.remove(parametersCopy,parametersCopy.length - 1);
      }
    }
 else {
      MethodSignature signature=method.getSignature(PsiSubstitutor.EMPTY);
      if (methodSignatures.add(signature)) {
        writeMethod(text,method,parameters);
      }
    }
    wasRunMethodPresent=wasRunMethod(method);
  }
  for (  GrMembersDeclaration declaration : membersDeclarations) {
    if (declaration instanceof GrVariableDeclaration) {
      writeVariableDeclarations(text,(GrVariableDeclaration)declaration);
    }
  }
  if (isScript && !wasRunMethodPresent) {
    writeRunMethod(text);
  }
  text.append("}");
}
