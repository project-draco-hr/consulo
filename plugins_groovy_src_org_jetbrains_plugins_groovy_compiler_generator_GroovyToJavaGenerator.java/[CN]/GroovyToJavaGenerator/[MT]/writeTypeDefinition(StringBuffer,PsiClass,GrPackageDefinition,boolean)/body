{
  final boolean isScript=typeDefinition instanceof GroovyScriptClass;
  writePackageStatement(text,packageDefinition);
  boolean isEnum=typeDefinition.isEnum();
  boolean isAnnotationType=typeDefinition.isAnnotationType();
  boolean isInterface=!isAnnotationType && typeDefinition.isInterface();
  boolean isClassDef=!isInterface && !isEnum && !isAnnotationType&& !isScript;
  writeClassModifiers(text,typeDefinition.getModifierList(),typeDefinition.isInterface(),toplevel);
  if (isInterface)   text.append("interface");
 else   if (isEnum)   text.append("enum");
 else   if (isAnnotationType)   text.append("@interface");
 else   text.append("class");
  text.append(" ").append(typeDefinition.getName());
  appendTypeParameters(text,typeDefinition);
  text.append(" ");
  if (isScript) {
    text.append("extends groovy.lang.Script ");
  }
 else   if (!isEnum && !isAnnotationType) {
    final PsiClassType[] extendsClassesTypes=typeDefinition.getExtendsListTypes();
    if (extendsClassesTypes.length > 0) {
      text.append("extends ").append(getTypeText(extendsClassesTypes[0],typeDefinition,false)).append(" ");
    }
    PsiClassType[] implementsTypes=typeDefinition.getImplementsListTypes();
    if (implementsTypes.length > 0) {
      text.append(isInterface ? "extends " : "implements ");
      int i=0;
      while (i < implementsTypes.length) {
        if (i > 0)         text.append(", ");
        text.append(getTypeText(implementsTypes[i],typeDefinition,false)).append(" ");
        i++;
      }
    }
  }
  text.append("{");
  if (isEnum) {
    writeEnumConstants(text,(GrEnumTypeDefinition)typeDefinition);
  }
  writeAllMethods(text,collectMethods(typeDefinition,isClassDef),typeDefinition);
  if (typeDefinition instanceof GrTypeDefinition) {
    for (    GrMembersDeclaration declaration : ((GrTypeDefinition)typeDefinition).getMemberDeclarations()) {
      if (declaration instanceof GrVariableDeclaration) {
        writeVariableDeclarations(text,(GrVariableDeclaration)declaration);
      }
    }
  }
  for (  PsiClass inner : typeDefinition.getInnerClasses()) {
    writeTypeDefinition(text,inner,null,false);
    text.append("\n");
  }
  text.append("}");
}
