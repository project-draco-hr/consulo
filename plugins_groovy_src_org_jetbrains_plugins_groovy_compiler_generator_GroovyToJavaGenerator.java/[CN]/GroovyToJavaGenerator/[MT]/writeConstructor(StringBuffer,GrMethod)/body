{
  GrConstructorDefinitionImpl constrDefinition=(GrConstructorDefinitionImpl)constructor;
  writeMethodModifiers(text,constrDefinition.getModifierList(),JAVA_MODIFIERS);
  text.append("\n");
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  String paramType;
  GrTypeElement paramTypeElement;
  int i=0;
  while (i < parameterList.length) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    paramTypeElement=parameter.getTypeElementGroovy();
    paramType=getTypeText(paramTypeElement);
    text.append(paramType);
    text.append(" ");
    text.append(parameter.getName());
    i++;
  }
  text.append(")");
  text.append(" ");
  text.append("{\n");
  GrConstructorInvocation grConstructorInvocation=constrDefinition.getConstructorInvocation();
  if (grConstructorInvocation != null && grConstructorInvocation.isSuperCall()) {
    text.append("  ");
    text.append("super");
    text.append("(");
    GrArgumentList grArgumentList=grConstructorInvocation.getArgumentList();
    String initValueToText;
    if (grArgumentList != null) {
      GrExpression[] expressions=grArgumentList.getExpressionArguments();
      for (int i1=0; i1 < expressions.length; i1++) {
        if (i1 > 0)         text.append(", ");
        GrExpression expression=expressions[i1];
        PsiType argType=expression.getType();
        String typeText=computeTypeText(argType);
        if (typesToInitialValues.containsKey(typeText))         initValueToText=typesToInitialValues.get(typeText);
 else         initValueToText="null";
        text.append(initValueToText);
        i1++;
      }
    }
    text.append(")");
    text.append(";");
  }
  text.append("\n}");
  text.append("\n");
}
