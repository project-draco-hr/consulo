{
  GrConstructorDefinitionImpl constrDefinition=(GrConstructorDefinitionImpl)constructor;
  writeMethodModifiers(text,constrDefinition.getModifierList(),JAVA_MODIFIERS);
  text.append("\n");
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  String paramType;
  GrTypeElement paramTypeElement;
  int i=0;
  while (i < parameterList.length) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    paramTypeElement=parameter.getTypeElementGroovy();
    paramType=getTypeText(paramTypeElement);
    text.append(paramType);
    text.append(" ");
    text.append(parameter.getName());
    i++;
  }
  text.append(")");
  text.append(" ");
  text.append("{\n");
  final GrConstructorInvocation constructorInvocation=constrDefinition.getConstructorInvocation();
  if (constructorInvocation != null && constructorInvocation.isSuperCall()) {
    final PsiMethod superConstructor=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod>(){
      public PsiMethod compute(){
        return constructorInvocation.resolveConstructor();
      }
    }
);
    text.append("  ");
    text.append("super");
    text.append("(");
    GrArgumentList argumentList=constructorInvocation.getArgumentList();
    if (argumentList != null) {
      final GrExpression[] expressions=argumentList.getExpressionArguments();
      for (int j=0; j < expressions.length; j++) {
        if (j > 0)         text.append(", ");
        final int j1=j;
        String argText=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
          public String compute(){
            if (superConstructor != null) {
              final PsiParameter[] superParams=superConstructor.getParameterList().getParameters();
              PsiType type;
              if (j1 < superParams.length)               type=superParams[j1].getType();
 else {
                type=superParams[superParams.length - 1].getType();
                if (type instanceof PsiEllipsisType) {
                  type=((PsiEllipsisType)type).getComponentType();
                }
              }
              final String typeText=type.getCanonicalText();
              if (typeText != null) {
                return "(" + typeText + ")null";
              }
            }
            return expressions[j1].getText();
          }
        }
);
        text.append(argText);
      }
    }
    text.append(")");
    text.append(";");
  }
  text.append("\n}");
  text.append("\n");
}
