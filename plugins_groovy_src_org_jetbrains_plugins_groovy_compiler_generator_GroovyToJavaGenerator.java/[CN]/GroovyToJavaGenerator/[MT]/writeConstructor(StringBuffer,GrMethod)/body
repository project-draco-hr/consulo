{
  GrConstructorDefinitionImpl constrDefinition=(GrConstructorDefinitionImpl)constructor;
  writeMethodModifiers(text,constrDefinition.getModifierList(),JAVA_MODIFIERS);
  text.append("\n");
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  String paramType;
  GrTypeElement paramTypeElement;
  for (int i=0; i < parameterList.length; i++) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    paramTypeElement=parameter.getTypeElementGroovy();
    paramType=getTypeText(paramTypeElement);
    text.append(paramType);
    text.append(" ");
    text.append(parameter.getName());
  }
  text.append(")");
  text.append(" ");
  final GrConstructorInvocation constructorInvocation=constrDefinition.getConstructorInvocation();
  if (constructorInvocation != null && constructorInvocation.isSuperCall()) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        final PsiMethod superConstructor=constructorInvocation.resolveConstructor();
        if (superConstructor != null) {
          final PsiClassType[] throwsTypes=superConstructor.getThrowsList().getReferencedTypes();
          if (throwsTypes.length > 0) {
            text.append(" throws ");
            for (int i=0; i < throwsTypes.length; i++) {
              if (i > 0)               text.append(", ");
              text.append(throwsTypes[i].getCanonicalText());
            }
          }
        }
        text.append("{\n");
        text.append("  ");
        text.append("super");
        text.append("(");
        GrArgumentList argumentList=constructorInvocation.getArgumentList();
        if (argumentList != null) {
          final GrExpression[] expressions=argumentList.getExpressionArguments();
          final GrNamedArgument[] namedArguments=argumentList.getNamedArguments();
          if (namedArguments.length > 0) {
            text.append("(java.util.Map)null");
            if (expressions.length > 0)             text.append(", ");
          }
          for (int i=0; i < expressions.length; i++) {
            if (i > 0)             text.append(", ");
            String argText=null;
            if (superConstructor != null) {
              final PsiParameter[] superParams=superConstructor.getParameterList().getParameters();
              final int paramIndex=namedArguments.length == 0 ? i : i + 1;
              PsiType type;
              if (paramIndex < superParams.length)               type=superParams[paramIndex].getType();
 else {
                type=superParams[superParams.length - 1].getType();
                if (type instanceof PsiEllipsisType) {
                  type=((PsiEllipsisType)type).getComponentType();
                }
              }
              final String typeText=type.getCanonicalText();
              if (typeText != null) {
                argText="(" + typeText + ")"+ getDefaultValueText(typeText);
              }
            }
            if (argText == null)             argText=expressions[i].getText();
            text.append(argText);
          }
        }
        text.append(")");
        text.append(";");
      }
    }
);
  }
 else {
    text.append("{\n");
  }
  text.append("\n}");
  text.append("\n");
}
