{
  text.append("\n");
  text.append("  ");
  if (!isEnum) {
    text.append("public ");
  }
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  for (int i=0; i < parameterList.length; i++) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    text.append(getTypeText(parameter.getTypeElementGroovy())).append(" ").append(parameter.getName());
  }
  text.append(") ");
  final Set<String> throwsTypes=collectThrowsTypes(constructor,new THashSet<PsiMethod>());
  if (!throwsTypes.isEmpty()) {
    text.append("throws ").append(StringUtil.join(throwsTypes,", ")).append(" ");
  }
  text.append("{\n");
  final GrConstructorInvocation invocation=constructor.getChainingConstructorInvocation();
  if (invocation != null) {
    final GroovyResolveResult resolveResult=resolveChainingConstructor(constructor);
    if (resolveResult != null) {
      text.append("    ");
      text.append(invocation.isSuperCall() ? "super(" : "this(");
      writeStubConstructorInvocation(text,(PsiMethod)resolveResult.getElement(),resolveResult.getSubstitutor());
      text.append(");");
    }
  }
  text.append("\n  }\n");
}
