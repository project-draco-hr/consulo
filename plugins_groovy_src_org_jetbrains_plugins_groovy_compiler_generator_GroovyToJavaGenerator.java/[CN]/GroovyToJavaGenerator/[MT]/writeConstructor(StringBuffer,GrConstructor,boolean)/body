{
  text.append("\n");
  text.append("  ");
  if (!isEnum) {
    text.append("public ");
  }
  text.append(constructor.getName());
  GrParameter[] parameterList=constructor.getParameters();
  text.append("(");
  for (int i=0; i < parameterList.length; i++) {
    if (i > 0)     text.append(", ");
    GrParameter parameter=parameterList[i];
    text.append(getTypeText(parameter.getTypeElementGroovy())).append(" ").append(parameter.getName());
  }
  text.append(") ");
  final GrConstructorInvocation constructorInvocation=constructor.getChainingConstructorInvocation();
  if (constructorInvocation != null) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        GroovyResolveResult resolveResult=constructorInvocation.resolveConstructorGenerics();
        PsiSubstitutor substitutor=resolveResult.getSubstitutor();
        PsiMethod chainedConstructor=(PsiMethod)resolveResult.getElement();
        if (chainedConstructor == null) {
          final GroovyResolveResult[] results=constructorInvocation.multiResolveConstructor();
          if (results.length > 0) {
            int i=0;
            if (results[i].getElement() == constructor && results.length > 1) {
              i=1;
            }
            chainedConstructor=(PsiMethod)results[i].getElement();
            substitutor=results[i].getSubstitutor();
          }
        }
        if (chainedConstructor != null) {
          final PsiClassType[] throwsTypes=chainedConstructor.getThrowsList().getReferencedTypes();
          if (throwsTypes.length > 0) {
            text.append(" throws ");
            for (int i=0; i < throwsTypes.length; i++) {
              if (i > 0)               text.append(", ");
              text.append(getTypeText(substitutor.substitute(throwsTypes[i]),false));
            }
          }
        }
        text.append("{\n");
        text.append("    ");
        if (constructorInvocation.isSuperCall()) {
          text.append("super");
        }
 else {
          text.append("this");
        }
        text.append("(");
        if (chainedConstructor != null) {
          writeStubConstructorInvocation(text,chainedConstructor,substitutor);
        }
        text.append(")");
        text.append(";");
      }
    }
);
  }
 else {
    text.append("{\n");
  }
  text.append("\n  }");
  text.append("\n");
}
