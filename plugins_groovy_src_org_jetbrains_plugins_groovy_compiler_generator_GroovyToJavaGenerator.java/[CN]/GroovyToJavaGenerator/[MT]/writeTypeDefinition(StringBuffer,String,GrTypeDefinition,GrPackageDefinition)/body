{
  final boolean isScript=typeDefinition == null;
  writePackageStatement(text,packageDefinition);
  GrMembersDeclaration[] membersDeclarations=typeDefinition == null ? GrMembersDeclaration.EMPTY_ARRAY : typeDefinition.getMemberDeclarations();
  boolean isClassDef=typeDefinition instanceof GrClassDefinition;
  boolean isInterface=typeDefinition instanceof GrInterfaceDefinition;
  if (typeDefinition != null) {
    PsiModifierList modifierList=typeDefinition.getModifierList();
    boolean wasAddedModifiers=writeTypeDefinitionMethodModifiers(text,modifierList,JAVA_TYPE_DEFINITION_MODIFIERS,typeDefinition.isInterface());
    if (!wasAddedModifiers) {
      text.append("public ");
    }
  }
  if (isScript) {
    text.append("public ");
  }
  if (isInterface)   text.append("interface");
 else   text.append("class");
  text.append(" ");
  text.append(typeDefinitionName);
  text.append(" ");
  if (isScript) {
    text.append("extends ");
    text.append("groovy.lang.Script ");
  }
 else {
    final PsiClassType[] extendsClassesTypes=typeDefinition.getExtendsListTypes();
    if (extendsClassesTypes.length > 0) {
      text.append("extends ");
      text.append(computeTypeText(extendsClassesTypes[0]));
      text.append(" ");
    }
 else {
      if (isClassDef) {
        text.append("extends ");
        text.append(GrTypeDefinition.DEFAULT_BASE_CLASS_NAME);
        text.append(" ");
      }
    }
    PsiClassType[] implementsTypes=typeDefinition.getImplementsListTypes();
    if (implementsTypes.length > 0) {
      text.append(isInterface ? "extends " : "implements ");
      int i=0;
      while (i < implementsTypes.length) {
        if (i > 0)         text.append(", ");
        text.append(computeTypeText(implementsTypes[i]));
        text.append(" ");
        i++;
      }
    }
  }
  text.append("{");
  boolean wasRunMethodPresent=false;
  List<String> gettersNames=new ArrayList<String>();
  List<String> settersNames=new ArrayList<String>();
  List<Pair<String,MethodSignature>> methods=new ArrayList<Pair<String,MethodSignature>>();
  for (  GrMembersDeclaration declaration : membersDeclarations) {
    if (declaration instanceof GrMethod) {
      final GrMethod method=(GrMethod)declaration;
      if (method instanceof GrConstructor) {
        writeConstructor(text,(GrConstructor)method);
        continue;
      }
      Pair<String,MethodSignature> methodNameSignature=new Pair<String,MethodSignature>(method.getName(),method.getSignature(PsiSubstitutor.EMPTY));
      if (!methods.contains(methodNameSignature)) {
        methods.add(methodNameSignature);
        writeMethod(text,method);
      }
      getDefinedGetters(gettersNames,method);
      getDefinedSetters(settersNames,method);
      wasRunMethodPresent=wasRunMethod(method);
    }
    if (declaration instanceof GrVariableDeclaration) {
      writeVariableDeclarations(text,(GrVariableDeclaration)declaration);
    }
  }
  for (  GrMembersDeclaration decl : membersDeclarations) {
    if (decl instanceof GrVariableDeclaration) {
      final GrVariable[] variables=((GrVariableDeclaration)decl).getVariables();
      for (      GrVariable variable : variables) {
        if (variable instanceof GrField) {
          if (!gettersNames.contains(variable.getName())) {
            writeMethod(text,((GrField)variable).getGetter());
          }
          if (!settersNames.contains(variable.getName())) {
            writeMethod(text,((GrField)variable).getSetter());
          }
        }
      }
    }
  }
  if (isScript && !wasRunMethodPresent) {
    writeRunMethod(text);
  }
  text.append("}");
}
