{
  boolean isScript=typeDefinition == null;
  if (packageDefinition != null) {
    text.append("package ");
    text.append(packageDefinition.getPackageName());
    text.append(";");
    text.append("\n");
  }
  GrStatement[] statements=getStatementsInReadAction(typeDefinition);
  boolean isClassDef=typeDefinition instanceof GrClassDefinition;
  boolean isInteraface=typeDefinition instanceof GrInterfaceDefinition;
  if (typeDefinition != null) {
    PsiModifierList modifierList=typeDefinition.getModifierList();
    boolean wasAddedModifiers=writeTypeDefinitionMethodModifiers(text,modifierList,JAVA_TYPE_DEFINITION_MODIFIERS);
    if (!wasAddedModifiers) {
      text.append("public");
    }
  }
  text.append(" ");
  if (isInteraface)   text.append("interface");
 else   text.append("class");
  text.append(" ");
  text.append(typeDefinitionName);
  text.append(" ");
  if (isScript) {
    text.append("extends ");
    text.append("groovy.lang.Script");
  }
 else {
    final PsiClassType[] extendsClassesTypes=typeDefinition.getExtendsListTypes();
    if (extendsClassesTypes.length > 0) {
      text.append("extends ");
      text.append(computeTypeText(extendsClassesTypes[0]));
      text.append(" ");
    }
 else {
      if (isClassDef) {
        text.append("extends ");
        text.append(GrTypeDefinition.DEFAULT_BASE_CLASS_NAME);
      }
    }
    PsiClassType[] implementsTypes=typeDefinition.getImplementsListTypes();
    if (implementsTypes.length > 0) {
      text.append(" implements ");
      int i=0;
      while (i < implementsTypes.length) {
        if (i > 0)         text.append(", ");
        text.append(computeTypeText(implementsTypes[i]));
        text.append(" ");
        i++;
      }
      text.append(" ");
    }
  }
  text.append(" ");
  text.append("{");
  text.append("\n");
  boolean isRunMethodWrote=false;
  for (  GrTopStatement statement : statements) {
    if (statement instanceof GrMethod) {
      if (((GrMethod)statement).isConstructor()) {
        writeConstructor(text,(GrMethod)statement);
        text.append("\n");
      }
      writeMethod(text,(GrMethod)statement,isInteraface);
      text.append("\n");
      isRunMethodWrote="run".equals(((GrMethod)statement).getNameIdentifierGroovy().getText()) && ((GrMethod)statement).getReturnTypeElementGroovy() != null && "java.lang.Object".equals(((GrMethod)statement).getReturnTypeElementGroovy().getType().getCanonicalText());
    }
    if (statement instanceof GrVariableDeclaration) {
      writeVariableDeclarations(text,(GrVariableDeclaration)statement);
      writeGetterAndSetter(text,(GrVariableDeclaration)statement);
    }
  }
  if (isScript && !isRunMethodWrote)   writeRunMethod(text);
  text.append("}");
}
