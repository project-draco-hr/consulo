{
  myContext=context;
  List<GenerationItem> generationItems=new ArrayList<GenerationItem>();
  GenerationItem item;
  final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  final CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myProject);
  final ExcludedEntriesConfiguration excluded=GroovyCompilerConfiguration.getExcludeConfiguration(myProject);
  for (  VirtualFile file : getGroovyFilesToGenerate(context)) {
    if (compilerManager.isExcludedFromCompilation(file))     continue;
    if (excluded.isExcluded(file))     continue;
    if (compilerConfiguration.isResourceFile(file))     continue;
    final Module module=getModuleByFile(context,file);
    if (module == null || !(module.getModuleType() instanceof JavaModuleType)) {
      continue;
    }
    boolean isInTestSources=ModuleRootManager.getInstance(module).getFileIndex().isInTestSourceContent(file);
    final GroovyFileBase psiFile=findPsiFile(file);
    GrTopStatement[] statements=getTopStatementsInReadAction(psiFile);
    boolean needCreateTopLevelClass=!needsCreateClassFromFileName(statements);
    String prefix="";
    if (statements.length > 0 && statements[0] instanceof GrPackageDefinition) {
      prefix=getJavaClassPackage((GrPackageDefinition)statements[0]);
    }
    if (needCreateTopLevelClass) {
      generationItems.add(new GenerationItemImpl(prefix + file.getNameWithoutExtension() + "."+ "java",module,new TimestampValidityState(file.getTimeStamp()),isInTestSources,file));
    }
    GrTypeDefinition[] typeDefinitions=ApplicationManager.getApplication().runReadAction(new Computable<GrTypeDefinition[]>(){
      public GrTypeDefinition[] compute(){
        return psiFile.getTypeDefinitions();
      }
    }
);
    for (    GrTypeDefinition typeDefinition : typeDefinitions) {
      item=new GenerationItemImpl(prefix + typeDefinition.getName() + "."+ "java",module,new TimestampValidityState(file.getTimeStamp()),isInTestSources,file);
      generationItems.add(item);
    }
  }
  return generationItems.toArray(new GenerationItem[generationItems.size()]);
}
