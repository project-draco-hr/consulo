{
  Element keymapElement=new Element("keymap");
  keymapElement.setAttribute("version",Integer.toString(1));
  keymapElement.setAttribute("name",myName);
  keymapElement.setAttribute("disable-mnemonics",myDisableMnemonics ? "true" : "false");
  if (myParent != null) {
    keymapElement.setAttribute("parent",myParent.getName());
  }
  String[] ownActionIds=getOwnActionIds();
  Arrays.sort(ownActionIds);
  for (int i=0; i < ownActionIds.length; i++) {
    String actionId=ownActionIds[i];
    Element actionElement=new Element("action");
    actionElement.setAttribute("id",actionId);
    Shortcut[] shortcuts=getShortcuts(actionId);
    for (int j=0; j < shortcuts.length; j++) {
      Shortcut shortcut=shortcuts[j];
      if (shortcut instanceof KeyboardShortcut) {
        KeyboardShortcut keyboardShortcut=(KeyboardShortcut)shortcut;
        Element element=new Element("keyboard-shortcut");
        element.setAttribute("first-keystroke",getKeyShortcutString(keyboardShortcut.getFirstKeyStroke()));
        if (keyboardShortcut.getSecondKeyStroke() != null) {
          element.setAttribute("second-keystroke",getKeyShortcutString(keyboardShortcut.getSecondKeyStroke()));
        }
        actionElement.addContent(element);
      }
 else       if (shortcut instanceof MouseShortcut) {
        MouseShortcut mouseShortcut=(MouseShortcut)shortcut;
        Element element=new Element("mouse-shortcut");
        element.setAttribute("keystroke",getMouseShortcutString(mouseShortcut));
        actionElement.addContent(element);
      }
 else {
        throw new IllegalStateException("unknown shortcut class: " + shortcut);
      }
    }
    keymapElement.addContent(actionElement);
  }
  return keymapElement;
}
