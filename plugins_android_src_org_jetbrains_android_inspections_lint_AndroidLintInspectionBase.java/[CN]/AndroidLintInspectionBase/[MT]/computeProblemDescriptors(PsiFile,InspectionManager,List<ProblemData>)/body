{
  final List<ProblemDescriptor> result=new ArrayList<ProblemDescriptor>();
  for (  ProblemData problemData : problems) {
    final String s=problemData.getMessage();
    final String message=XmlUtil.escape(s.indexOf('>') >= 0 && s.indexOf('<') >= 0 ? s.replace('<','{').replace('>','}') : s);
    final TextRange range=problemData.getTextRange();
    if (range.getStartOffset() == range.getEndOffset()) {
      PsiFile f=psiFile;
      if (f instanceof PsiBinaryFile) {
        final Module module=ModuleUtil.findModuleForPsiElement(f);
        if (module != null) {
          final AndroidFacet facet=AndroidFacet.getInstance(module);
          final VirtualFile manifestFile=facet != null ? AndroidRootUtil.getManifestFile(facet) : null;
          if (manifestFile != null) {
            f=f.getManager().findFile(manifestFile);
          }
        }
      }
      if (f != null && !isSuppressedFor(f)) {
        result.add(manager.createProblemDescriptor(f,message,false,getLocalQuickFixes(f,f,message),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
    }
 else {
      final PsiElement startElement=psiFile.findElementAt(range.getStartOffset());
      final PsiElement endElement=psiFile.findElementAt(range.getEndOffset() - 1);
      if (startElement != null && endElement != null && !isSuppressedFor(startElement)) {
        result.add(manager.createProblemDescriptor(startElement,endElement,message,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false,getLocalQuickFixes(startElement,endElement,message)));
      }
    }
  }
  return result.toArray(new ProblemDescriptor[result.size()]);
}
