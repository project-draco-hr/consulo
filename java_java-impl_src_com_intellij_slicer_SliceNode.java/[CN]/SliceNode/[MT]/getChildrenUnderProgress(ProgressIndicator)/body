{
  if (myCachedChildren != null || !isValid() || getTreeBuilder().splitByLeafExpressions) {
    return myCachedChildren == null ? Collections.<AbstractTreeNode>emptyList() : myCachedChildren;
  }
  final List<AbstractTreeNode> children=Collections.synchronizedList(new ArrayList<AbstractTreeNode>());
  final SliceManager manager=SliceManager.getInstance(getProject());
  manager.runInterruptibly(new Runnable(){
    public void run(){
      Processor<SliceUsage> processor=new Processor<SliceUsage>(){
        public boolean process(        SliceUsage sliceUsage){
          manager.checkCanceled();
          SliceNode node=new SliceNode(myProject,sliceUsage,targetEqualUsages,getTreeBuilder(),getLeafExpressions());
          children.add(node);
          return true;
        }
      }
;
      getValue().processChildren(processor,getTreeBuilder().dataFlowToThis);
    }
  }
,new Runnable(){
    public void run(){
      changed=true;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (getTreeBuilder().isDisposed())           return;
          DefaultMutableTreeNode node=getTreeBuilder().getNodeForElement(getValue());
          if (node == null)           node=getTreeBuilder().getRootNode();
          getTreeBuilder().addSubtreeToUpdate(node);
        }
      }
);
    }
  }
,progress);
  myCachedChildren=children;
  return myCachedChildren;
}
