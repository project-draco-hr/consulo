{
  if (isUpToDate())   return myCachedChildren == null ? Collections.<AbstractTreeNode>emptyList() : myCachedChildren;
  final List<SliceNode> children=new ArrayList<SliceNode>();
  final SliceManager manager=SliceManager.getInstance(getProject());
  manager.runInterruptibly(new Runnable(){
    public void run(){
      Processor<SliceUsage> processor=new Processor<SliceUsage>(){
        public boolean process(        SliceUsage sliceUsage){
          manager.checkCanceled();
          SliceNode node=new SliceNode(myProject,sliceUsage,targetEqualUsages,dataFlowToThis);
synchronized (children) {
            node.index=children.size();
            children.add(node);
          }
          return true;
        }
      }
;
      getValue().processChildren(processor,dataFlowToThis);
    }
  }
,new Runnable(){
    public void run(){
      changed=true;
    }
  }
,progress);
synchronized (children) {
    myCachedChildren=children;
  }
  return children;
}
