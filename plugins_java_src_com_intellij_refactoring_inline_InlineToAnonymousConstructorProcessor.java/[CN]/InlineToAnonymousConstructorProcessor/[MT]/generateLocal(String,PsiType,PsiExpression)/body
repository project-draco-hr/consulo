{
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(myClass.getProject());
  String baseNameForIndex=baseName;
  int index=0;
  String localName;
  while (true) {
    localName=codeStyleManager.suggestUniqueVariableName(baseNameForIndex,myNewExpression,true);
    if (myClass.findFieldByName(localName,false) == null) {
      break;
    }
    index++;
    baseNameForIndex=baseName + index;
  }
  try {
    final PsiDeclarationStatement declaration=myElementFactory.createVariableDeclarationStatement(localName,type,initializer);
    PsiVariable variable=(PsiVariable)declaration.getDeclaredElements()[0];
    PsiUtil.setModifierProperty(variable,PsiModifier.FINAL,true);
    final PsiElement parent=myNewStatement.getParent();
    if (parent instanceof PsiCodeBlock) {
      variable=(PsiVariable)((PsiDeclarationStatement)parent.addBefore(declaration,myNewStatement)).getDeclaredElements()[0];
    }
 else {
      final int offsetInStatement=myNewExpression.getTextRange().getStartOffset() - myNewStatement.getTextRange().getStartOffset();
      final PsiBlockStatement blockStatement=(PsiBlockStatement)myElementFactory.createStatementFromText("{}",null);
      PsiCodeBlock block=blockStatement.getCodeBlock();
      block.add(declaration);
      block.add(myNewStatement);
      block=((PsiBlockStatement)myNewStatement.replace(blockStatement)).getCodeBlock();
      variable=(PsiVariable)((PsiDeclarationStatement)block.getStatements()[0]).getDeclaredElements()[0];
      myNewStatement=block.getStatements()[1];
      myNewExpression=PsiTreeUtil.getParentOfType(myNewStatement.findElementAt(offsetInStatement),PsiNewExpression.class);
    }
    return variable;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return null;
  }
}
