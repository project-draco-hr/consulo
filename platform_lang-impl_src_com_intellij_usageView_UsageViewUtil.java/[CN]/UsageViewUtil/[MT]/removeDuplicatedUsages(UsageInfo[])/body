{
  Set<UsageInfo> set=new LinkedHashSet<UsageInfo>(Arrays.asList(usages));
  String newTextInNonCodeUsage=null;
  for (  UsageInfo usage : usages) {
    if (!(usage instanceof NonCodeUsageInfo))     continue;
    newTextInNonCodeUsage=((NonCodeUsageInfo)usage).newText;
    break;
  }
  if (newTextInNonCodeUsage != null) {
    for (    UsageInfo usage : usages) {
      if (!(usage instanceof MoveRenameUsageInfo))       continue;
      PsiFile file=usage.getFile();
      if (file != null) {
        PsiElement context=file.getContext();
        if (context != null) {
          PsiElement usageElement=usage.getElement();
          if (usageElement == null)           continue;
          PsiReference psiReference=usage.getReference();
          if (psiReference == null)           continue;
          int injectionOffsetInMasterFile=InjectedLanguageManager.getInstance(usageElement.getProject()).injectedToHost(usageElement,usageElement.getTextOffset());
          set.remove(NonCodeUsageInfo.create(context.getContainingFile(),usage.startOffset + injectionOffsetInMasterFile,usage.endOffset + injectionOffsetInMasterFile,((MoveRenameUsageInfo)usage).getReferencedElement(),newTextInNonCodeUsage));
        }
      }
    }
  }
  return set.toArray(new UsageInfo[set.size()]);
}
