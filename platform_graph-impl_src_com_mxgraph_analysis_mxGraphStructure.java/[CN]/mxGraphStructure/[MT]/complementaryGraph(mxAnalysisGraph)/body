{
  ArrayList<ArrayList<mxCell>> oldConnections=new ArrayList<ArrayList<mxCell>>();
  mxGraph graph=aGraph.getGraph();
  Object parent=graph.getDefaultParent();
  Object[] vertices=aGraph.getChildVertices(parent);
  int vertexCount=vertices.length;
  for (int i=0; i < vertexCount; i++) {
    mxCell currVertex=(mxCell)vertices[i];
    int edgeCount=currVertex.getEdgeCount();
    mxCell currEdge=new mxCell();
    ArrayList<mxCell> neighborVertexes=new ArrayList<mxCell>();
    for (int j=0; j < edgeCount; j++) {
      currEdge=(mxCell)currVertex.getEdgeAt(j);
      mxCell source=(mxCell)currEdge.getSource();
      mxCell destination=(mxCell)currEdge.getTarget();
      if (!source.equals(currVertex)) {
        neighborVertexes.add(j,source);
      }
 else {
        neighborVertexes.add(j,destination);
      }
    }
    oldConnections.add(i,neighborVertexes);
  }
  Object[] edges=aGraph.getChildEdges(parent);
  graph.removeCells(edges);
  for (int i=0; i < vertexCount; i++) {
    ArrayList<mxCell> oldNeighbors=new ArrayList<mxCell>();
    oldNeighbors=oldConnections.get(i);
    mxCell currVertex=(mxCell)vertices[i];
    for (int j=0; j < vertexCount; j++) {
      mxCell targetVertex=(mxCell)vertices[j];
      boolean shouldConnect=true;
      if (oldNeighbors.contains(targetVertex)) {
        shouldConnect=false;
      }
 else       if (targetVertex.equals(currVertex)) {
        shouldConnect=false;
      }
 else       if (areConnected(aGraph,currVertex,targetVertex)) {
        shouldConnect=false;
      }
      if (shouldConnect) {
        graph.insertEdge(parent,null,null,currVertex,targetVertex);
      }
    }
  }
}
