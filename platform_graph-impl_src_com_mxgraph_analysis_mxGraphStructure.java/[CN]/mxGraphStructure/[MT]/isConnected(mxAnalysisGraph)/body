{
  Object[] vertices=aGraph.getChildVertices(aGraph.getGraph().getDefaultParent());
  int vertexNum=vertices.length;
  if (vertexNum == 0) {
    throw new IllegalArgumentException();
  }
  int connectedVertices=1;
  int[] visited=new int[vertexNum];
  visited[0]=1;
  for (int i=1; i < vertexNum; i++) {
    visited[i]=0;
  }
  ArrayList<Object> queue=new ArrayList<Object>();
  queue.add(vertices[0]);
  while (queue.size() > 0) {
    Object currVertex=queue.get(0);
    queue.remove(0);
    Object[] neighborVertices=aGraph.getOpposites(aGraph.getEdges(currVertex,null,true,true,false,true),currVertex,true,true);
    for (int j=0; j < neighborVertices.length; j++) {
      int index=0;
      for (int k=0; k < vertexNum; k++) {
        if (vertices[k].equals(neighborVertices[j])) {
          index=k;
        }
      }
      if (visited[index] == 0) {
        queue.add(vertices[index]);
        visited[index]=1;
        connectedVertices++;
      }
    }
  }
  if (connectedVertices == vertexNum) {
    return true;
  }
 else {
    return false;
  }
}
