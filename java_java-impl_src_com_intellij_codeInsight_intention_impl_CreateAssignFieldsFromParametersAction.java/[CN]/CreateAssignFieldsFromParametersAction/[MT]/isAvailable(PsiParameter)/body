{
  final PsiType type=FieldFromParameterUtils.getSubstitutedType(psiParameter);
  PsiClass targetClass=PsiTreeUtil.getParentOfType(psiParameter,PsiClass.class);
  return psiParameter.isValid() && psiParameter.getLanguage().isKindOf(JavaLanguage.INSTANCE) && psiParameter.getDeclarationScope() instanceof PsiMethod&& ((PsiMethod)psiParameter.getDeclarationScope()).getBody() != null && psiParameter.getManager().isInProject(psiParameter) && type != null && type.isValid() && FieldFromParameterUtils.getParameterAssignedToField(psiParameter) == null && targetClass != null && !targetClass.isInterface();
}
