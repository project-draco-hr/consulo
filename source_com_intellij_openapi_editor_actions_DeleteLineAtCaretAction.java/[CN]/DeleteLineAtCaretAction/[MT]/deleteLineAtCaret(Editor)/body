{
  LogicalPosition logicalPosition=editor.getCaretModel().getLogicalPosition();
  int lineNumber=logicalPosition.line;
  Document document=editor.getDocument();
  if (lineNumber >= document.getLineCount())   return;
  if (lineNumber == document.getLineCount() - 1) {
    if (document.getLineCount() > 0 && lineNumber > 0) {
      int start=document.getLineEndOffset(lineNumber - 1);
      int end=document.getLineEndOffset(lineNumber) + ((DocumentEx)document).getLineSeparatorLength(lineNumber);
      document.deleteString(start,end);
      LogicalPosition pos=new LogicalPosition(lineNumber - 1,logicalPosition.column);
      editor.getCaretModel().moveToLogicalPosition(pos);
    }
 else {
      document.deleteString(0,document.getTextLength());
      editor.getCaretModel().moveToOffset(0);
    }
  }
 else {
    VisualPosition caretPosition=editor.getCaretModel().getVisualPosition();
    VisualPosition thisLineVisible=new VisualPosition(caretPosition.line,0);
    LogicalPosition thisLineLogical=editor.visualToLogicalPosition(thisLineVisible);
    VisualPosition nextLineVisible=new VisualPosition(caretPosition.line + 1,0);
    LogicalPosition nextLineLogical=editor.visualToLogicalPosition(nextLineVisible);
    int startOffset=editor.logicalPositionToOffset(thisLineLogical);
    int endOffset=editor.logicalPositionToOffset(nextLineLogical);
    document.deleteString(startOffset,endOffset);
  }
  editor.getCaretModel().moveToLogicalPosition(logicalPosition);
  editor.getSelectionModel().removeSelection();
}
