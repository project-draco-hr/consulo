{
  myTempFile=FileUtil.createTempFile("jikes",".tmp");
  myTempFile.deleteOnExit();
  final List<VirtualFile> files=chunk.getFilesToCompile();
  PrintWriter writer=new PrintWriter(new FileWriter(myTempFile));
  try {
    for (    VirtualFile file : files) {
      writer.println(file.getPath());
    }
  }
  finally {
    writer.close();
  }
  String compilerPath=getCompilerPath();
  LOG.assertTrue(compilerPath != null,"No path to compiler configured");
  commandLine.add(compilerPath);
  commandLine.add("-verbose");
  commandLine.add("-classpath");
  commandLine.add(chunk.getCompilationBootClasspath() + File.pathSeparator + chunk.getCompilationClasspath());
  setupSourceVersion(chunk,commandLine);
  commandLine.add("-sourcepath");
  String sourcePath=chunk.getSourcePath();
  if (sourcePath.length() > 0) {
    commandLine.add(sourcePath);
  }
 else {
    commandLine.add("\"\"");
  }
  commandLine.add("-d");
  commandLine.add(outputPath.replace('/',File.separatorChar));
  JikesSettingsBuilder jikesSettings=new JikesSettingsBuilder(JikesConfiguration.getOptions(myProject));
  StringTokenizer tokenizer=new StringTokenizer(jikesSettings.getOptionsString(chunk)," ");
  while (tokenizer.hasMoreTokens()) {
    commandLine.add(tokenizer.nextToken());
  }
  commandLine.add("@" + myTempFile.getAbsolutePath());
}
