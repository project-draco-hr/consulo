{
  PsiJavaCodeReferenceElement reference=(PsiJavaCodeReferenceElement)element;
  PsiElement target=reference.resolve();
  if (!(target instanceof PsiClass)) {
    PsiElement parent=reference.getParent();
    while (parent instanceof PsiJavaCodeReferenceElement) {
      reference=(PsiJavaCodeReferenceElement)parent;
      target=reference.resolve();
      if (target instanceof PsiClass) {
        break;
      }
      parent=parent.getParent();
    }
  }
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  final PsiJavaFile file=PsiTreeUtil.getParentOfType(reference,PsiJavaFile.class);
  if (file == null) {
    return;
  }
  ImportUtils.addImportIfNeeded(aClass,reference);
  final String fullyQualifiedText=reference.getText();
  final QualificationRemover qualificationRemover=new QualificationRemover(fullyQualifiedText);
  file.accept(qualificationRemover);
  final Collection<PsiJavaCodeReferenceElement> shortenedElements=qualificationRemover.getShortenedElements();
  final int elementCount=shortenedElements.size();
  final String text;
  if (elementCount == 1) {
    text=IntentionPowerPackBundle.message("1.fully.qualified.name.status.bar.escape.highlighting.message");
  }
 else {
    text=IntentionPowerPackBundle.message("multiple.fully.qualified.names.status.bar.escape.highlighting.message",Integer.valueOf(elementCount));
  }
  HighlightUtil.highlightElements(shortenedElements,text);
}
