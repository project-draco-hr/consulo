{
  super(new JPanel(new BorderLayout()));
  myProject=project;
  myEditor=editor;
  myItems=items;
  myPrefix=prefix;
  myItemPreferencePolicy=itemPreferencePolicy;
  myCharFilter=filter;
  myEditor.putUserData(LOOKUP_IN_EDITOR_KEY,this);
  if (myPrefix == null) {
    myPrefix="";
  }
  myInitialPrefix=myPrefix;
  myBottomLabel=new JLabel();
  myBottomLabel.setText(bottomText);
  myBottomLabel.setFont(myBottomLabel.getFont().deriveFont((float)(CodeInsightSettings.getInstance().LOOKUP_HEIGHT * 10.0 / 11)));
  myBottomLabel.setBorder(new EmptyBorder(1,2,1,2));
  myList=new JList();
  myList.setFocusable(false);
  myCellRenderer=new LookupCellRenderer(this);
  myList.setCellRenderer(myCellRenderer);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myItemsMap=initWeightMap(itemPreferencePolicy);
  updateList();
  myList.setBackground(LookupCellRenderer.BACKGROUND_COLOR);
  JScrollPane scrollPane=new JScrollPane(myList);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  getComponent().add(scrollPane,BorderLayout.CENTER);
  scrollPane.setBorder(null);
  if (StringUtil.isNotEmpty(bottomText)) {
    getComponent().add(myBottomLabel,BorderLayout.SOUTH);
  }
  getComponent().setBorder(new BegPopupMenuBorder());
  myEditorCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      int curOffset=myEditor.getCaretModel().getOffset();
      if (curOffset != getLookupStart() + myPrefix.length()) {
        hide();
      }
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditorMouseListener=new EditorMouseAdapter(){
    public void mouseClicked(    EditorMouseEvent e){
      e.consume();
      hide();
    }
  }
;
  myEditor.addEditorMouseListener(myEditorMouseListener);
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      if (!myLookupStartMarker.isValid()) {
        hide();
      }
    }
  }
,this);
  myList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      LookupItem item=(LookupItem)myList.getSelectedValue();
      if (item != null && item.getAttribute(EMPTY_ITEM_ATTRIBUTE) != null) {
        item=null;
      }
      fireCurrentItemChanged(item);
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            finishLookup(NORMAL_SELECT_CHAR);
          }
        }
,"",null);
      }
    }
  }
);
  selectMostPreferableItem();
  final Application application=ApplicationManager.getApplication();
  if (!application.isUnitTestMode()) {
    application.invokeLater(new Runnable(){
      public void run(){
        if (myIndex >= 0 && myIndex < myList.getModel().getSize()) {
          ListScrollingUtil.selectItem(myList,myIndex);
        }
 else         if (myItems.length > 0) {
          ListScrollingUtil.selectItem(myList,0);
        }
      }
    }
);
  }
}
