{
  super(new JPanel(new BorderLayout()));
  myProject=project;
  myEditor=editor;
  myItemPreferencePolicy=itemPreferencePolicy;
  setInitialOffset(myEditor.getCaretModel().getOffset(),myEditor.getSelectionModel().getSelectionStart(),myEditor.getSelectionModel().getSelectionEnd());
  final Document document=myEditor.getDocument();
  final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
  myElement=psiFile == null ? null : psiFile.findElementAt(myEditor.getCaretModel().getOffset());
  final PsiProximityComparator proximityComparator=new PsiProximityComparator(myElement == null ? psiFile : myElement);
  myComparator=new Comparator<LookupElement>(){
    public int compare(    LookupElement o1,    LookupElement o2){
      LookupElement c1=getCoreElement(o1);
      LookupElement c2=getCoreElement(o2);
      if (c1 instanceof LookupItem && c2 instanceof LookupItem) {
        double priority1=((LookupItem)c1).getPriority();
        double priority2=((LookupItem)c2).getPriority();
        if (priority1 > priority2)         return -1;
        if (priority2 > priority1)         return 1;
      }
      int grouping1=c1.getGrouping();
      int grouping2=c2.getGrouping();
      if (grouping1 > grouping2)       return -1;
      if (grouping2 > grouping1)       return 1;
      int stringCompare=o1.getLookupString().compareToIgnoreCase(o2.getLookupString());
      if (stringCompare != 0)       return stringCompare;
      return proximityComparator.compare(o1.getObject(),o2.getObject());
    }
  }
;
  myItems=new SortedList<LookupElement>(myComparator);
  myItemsMap=new TreeMap<LookupItemWeightComparable,SortedList<LookupElement>>();
  myProcessIcon=new AsyncProcessIcon("Completion progress");
  myProcessIcon.setVisible(false);
  myList=new JList(new DefaultListModel());
  myCellRenderer=new LookupCellRenderer(this);
  myList.setCellRenderer(myCellRenderer);
  for (  final LookupElement item : items) {
    addItem(item);
  }
  myList.setFocusable(false);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setBackground(LookupCellRenderer.BACKGROUND_COLOR);
  JScrollPane scrollPane=new JScrollPane(myList);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  getComponent().add(scrollPane,BorderLayout.NORTH);
  scrollPane.setBorder(null);
  JPanel bottomPanel=new JPanel(new BorderLayout());
  bottomPanel.add(myProcessIcon,BorderLayout.EAST);
  myAdComponent=HintUtil.createAdComponent(null);
  bottomPanel.add(myAdComponent,BorderLayout.CENTER);
  getComponent().add(bottomPanel,BorderLayout.SOUTH);
  getComponent().setBorder(new BegPopupMenuBorder());
  updateList();
  selectMostPreferableItem();
}
