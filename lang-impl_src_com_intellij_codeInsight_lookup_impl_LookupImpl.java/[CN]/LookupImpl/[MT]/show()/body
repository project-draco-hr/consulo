{
  int lookupStart=calcLookupStart();
  myLookupStartMarker=myEditor.getDocument().createRangeMarker(lookupStart,lookupStart);
  myLookupStartMarker.setGreedyToLeft(true);
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      if (!myLookupStartMarker.isValid()) {
        hide();
      }
    }
  }
,this);
  myEditorCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      int curOffset=myEditor.getCaretModel().getOffset();
      final LookupItem item=getCurrentItem();
      if (item == null || item == EMPTY_LOOKUP_ITEM)       return;
      if (curOffset != item.getUserData(ITEM_START).intValue() + item.getPrefixMatcher().getPrefix().length()) {
        hide();
      }
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditorMouseListener=new EditorMouseAdapter(){
    public void mouseClicked(    EditorMouseEvent e){
      e.consume();
      hide();
    }
  }
;
  myEditor.addEditorMouseListener(myEditorMouseListener);
  myList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      LookupItem item=(LookupItem)myList.getSelectedValue();
      if (item != null && item.getAttribute(EMPTY_ITEM_ATTRIBUTE) != null) {
        item=null;
      }
      fireCurrentItemChanged(item);
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            finishLookup(NORMAL_SELECT_CHAR);
          }
        }
,"",null);
      }
    }
  }
);
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  Point p=calculatePosition();
  HintManager hintManager=HintManager.getInstance();
  hintManager.showEditorHint(this,myEditor,p,HintManager.HIDE_BY_ESCAPE | HintManager.UPDATE_BY_SCROLLING,0,false);
}
