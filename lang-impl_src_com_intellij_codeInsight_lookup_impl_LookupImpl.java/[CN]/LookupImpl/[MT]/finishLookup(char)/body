{
  final LookupItem item=(LookupItem)myList.getSelectedValue();
  if (item == null) {
    fireItemSelected(null,completionChar);
    hide();
    return;
  }
  if (item.getObject() instanceof DeferredUserLookupValue) {
    if (!((DeferredUserLookupValue)item.getObject()).handleUserSelection(item,myProject)) {
      fireItemSelected(null,completionChar);
      hide();
      return;
    }
  }
  final String s=item.getLookupString();
  if (item.getAttribute(EMPTY_ITEM_ATTRIBUTE) != null) {
    fireItemSelected(null,completionChar);
    hide();
    return;
  }
  myCanceled=false;
  hide();
  final CompletionProgressIndicator indicator=CompletionProgressIndicator.getCurrentCompletion();
  if (indicator != null) {
    indicator.cancel();
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      int lookupStart=item.getUserData(ITEM_START).intValue();
      LogicalPosition lookupPosition=myEditor.offsetToLogicalPosition(lookupStart);
      myEditor.getCaretModel().moveToLogicalPosition(lookupPosition);
      if (myEditor.getSelectionModel().hasSelection()) {
        myEditor.getDocument().deleteString(myEditor.getSelectionModel().getSelectionStart(),myEditor.getSelectionModel().getSelectionEnd());
      }
      if (myMinPrefixLength > 0) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.camelHumps");
        myEditor.getDocument().deleteString(lookupStart,lookupStart + myMinPrefixLength);
      }
      myEditor.getDocument().insertString(lookupStart,s);
      int offset=lookupStart + s.length();
      myEditor.getCaretModel().moveToOffset(offset);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      myEditor.getSelectionModel().removeSelection();
      fireItemSelected(item,completionChar);
    }
  }
);
}
