{
synchronized (myItems) {
    int minPrefixLength=myItems.isEmpty() ? 0 : Integer.MAX_VALUE;
    for (    final LookupElement item : myItems) {
      minPrefixLength=Math.min(item.getPrefixMatcher().getPrefix().length(),minPrefixLength);
    }
    if (myMinPrefixLength != minPrefixLength) {
      myLookupStartMarker=null;
    }
    myMinPrefixLength=minPrefixLength;
    Object oldSelected=!myDirty ? null : myList.getSelectedValue();
    DefaultListModel model=(DefaultListModel)myList.getModel();
    model.clear();
    ArrayList<LookupElement> allItems=new ArrayList<LookupElement>();
    Set<LookupElement> firstItems=new THashSet<LookupElement>();
    final boolean hasPreselectedItem=!myDirty && myPreselectedItem != EMPTY_LOOKUP_ITEM;
    boolean addPreselected=hasPreselectedItem;
    for (    final LookupItemWeightComparable comparable : myItemsMap.keySet()) {
      final List<LookupElement> suitable=new SmartList<LookupElement>();
      for (      final LookupElement item : myItemsMap.get(comparable)) {
        if (prefixMatches(item)) {
          suitable.add(item);
        }
      }
      if (allItems.size() + suitable.size() + (addPreselected ? 1 : 0) > MAX_PREFERRED_COUNT)       break;
      for (      final LookupElement item : suitable) {
        allItems.add(item);
        firstItems.add(item);
        model.addElement(item);
        if (hasPreselectedItem && item == myPreselectedItem) {
          addPreselected=false;
        }
      }
    }
    if (addPreselected) {
      allItems.add(myPreselectedItem);
      firstItems.add(myPreselectedItem);
      model.addElement(myPreselectedItem);
    }
    myPreferredItemsCount=allItems.size();
    for (    LookupElement item : myItems) {
      if (!firstItems.contains(item) && prefixMatches(item)) {
        model.addElement(item);
        allItems.add(item);
      }
    }
    boolean isEmpty=allItems.isEmpty();
    if (isEmpty) {
      LookupItem<String> item=new EmptyLookupItem(myCalculating ? " " : LangBundle.message("completion.no.suggestions"));
      item.setPrefixMatcher(new CamelHumpMatcher(""));
      if (!myCalculating) {
        final int maxWidth=myCellRenderer.updateMaximumWidth(item);
        myList.setFixedCellWidth(Math.max(maxWidth,myLookupWidth));
      }
      model.addElement(item);
      allItems.add(item);
    }
 else {
      myList.setFixedCellWidth(myLookupWidth);
    }
    myList.setFixedCellHeight(myCellRenderer.getListCellRendererComponent(myList,myList.getModel().getElementAt(0),0,false,false).getPreferredSize().height);
    myList.setVisibleRowCount(Math.min(myList.getModel().getSize(),CodeInsightSettings.getInstance().LOOKUP_HEIGHT));
    myAdComponent.setText(myAdText);
    if (StringUtil.isNotEmpty(myAdText)) {
      myAdComponent.setPreferredSize(new Dimension(myAdComponent.getPreferredSize().width,myProcessIcon.getPreferredSize().height));
    }
 else {
      myAdComponent.setPreferredSize(new Dimension(0,0));
    }
    if (!isEmpty) {
      if (oldSelected != null) {
        if (!ListScrollingUtil.selectItem(myList,oldSelected)) {
          selectMostPreferableItem();
        }
      }
 else {
        if (myPreselectedItem == EMPTY_LOOKUP_ITEM) {
          selectMostPreferableItem();
          myPreselectedItem=getCurrentItem();
        }
 else         if (hasPreselectedItem) {
          ListScrollingUtil.selectItem(myList,myPreselectedItem);
        }
 else {
          selectMostPreferableItem();
        }
      }
    }
  }
}
