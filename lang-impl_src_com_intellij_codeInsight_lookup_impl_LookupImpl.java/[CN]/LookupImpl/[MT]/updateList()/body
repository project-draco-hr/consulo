{
  int minPrefixLength=Integer.MAX_VALUE;
  for (  final LookupItem item : myItems) {
    minPrefixLength=Math.min(item.getPrefixMatcher().getPrefix().length(),minPrefixLength);
  }
  myMinPrefixLength=minPrefixLength;
  Object oldSelected=myPreselectedItem != null ? null : myList.getSelectedValue();
  DefaultListModel model=(DefaultListModel)myList.getModel();
  model.clear();
  ArrayList<LookupItem> allItems=new ArrayList<LookupItem>();
  Set<LookupItem> firstItems=new THashSet<LookupItem>();
  final boolean hasPreselectedItem=myPreselectedItem != null && myPreselectedItem != EMPTY_LOOKUP_ITEM;
  boolean addPreselected=hasPreselectedItem;
  for (  final LookupItemWeightComparable comparable : myItemsMap.keySet()) {
    final List<LookupItem> suitable=new SmartList<LookupItem>();
    for (    final LookupItem item : myItemsMap.get(comparable)) {
      if (item.isPrefixMatched()) {
        suitable.add(item);
      }
    }
    if (allItems.size() + suitable.size() + (addPreselected ? 1 : 0) > MAX_PREFERRED_COUNT)     break;
    for (    final LookupItem item : suitable) {
      allItems.add(item);
      firstItems.add(item);
      model.addElement(item);
      if (hasPreselectedItem && item == myPreselectedItem) {
        addPreselected=false;
      }
    }
  }
  if (addPreselected) {
    allItems.add(myPreselectedItem);
    firstItems.add(myPreselectedItem);
    model.addElement(myPreselectedItem);
  }
  myPreferredItemsCount=allItems.size();
  for (  LookupItem<?> item : myItems) {
    if (!firstItems.contains(item) && item.isPrefixMatched()) {
      model.addElement(item);
      allItems.add(item);
    }
  }
  boolean isEmpty=allItems.isEmpty();
  if (isEmpty) {
    LookupItem<String> item=new LookupItem<String>(myCalculating ? " " : LangBundle.message("completion.no.suggestions"),"                       ");
    item.setPrefixMatcher(new CamelHumpMatcher(""));
    item.setAttribute(EMPTY_ITEM_ATTRIBUTE,"");
    model.addElement(item);
    allItems.add(item);
  }
  myList.setFixedCellHeight(myCellRenderer.getListCellRendererComponent(myList,myList.getModel().getElementAt(0),0,false,false).getPreferredSize().height);
  myList.setVisibleRowCount(Math.min(myList.getModel().getSize(),CodeInsightSettings.getInstance().LOOKUP_HEIGHT));
  if (!isEmpty) {
    if (oldSelected != null) {
      if (!ListScrollingUtil.selectItem(myList,oldSelected)) {
        selectMostPreferableItem();
      }
    }
 else {
      if (myPreselectedItem == EMPTY_LOOKUP_ITEM) {
        selectMostPreferableItem();
        myPreselectedItem=getCurrentItem();
      }
 else       if (hasPreselectedItem) {
        ListScrollingUtil.selectItem(myList,myPreselectedItem);
      }
 else {
        selectMostPreferableItem();
      }
    }
  }
}
