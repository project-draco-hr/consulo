{
  final PatternMatcher matcher=new Perl5Matcher();
  final Pattern pattern=CompletionUtil.createCamelHumpsMatcher(myPrefix);
  Object oldSelected=myList.getSelectedValue();
  DefaultListModel model=new DefaultListModel();
  ArrayList<LookupItem> array=new ArrayList<LookupItem>();
  Set<LookupItem> first=new THashSet<LookupItem>();
  for (  final LookupItemWeightComparable comparable : myItemsMap.keySet()) {
    final List<LookupItem> items=myItemsMap.get(comparable);
    final List<LookupItem> suitable=new SmartList<LookupItem>();
    for (    final LookupItem item : items) {
      if (suits(item,matcher,pattern)) {
        suitable.add(item);
      }
    }
    if (array.size() + suitable.size() > MAX_PREFERRED_COUNT)     break;
    for (    final LookupItem item : suitable) {
      array.add(item);
      first.add(item);
      model.addElement(item);
    }
  }
  myPreferredItemsCount=array.size();
  for (  LookupItem<?> item : myItems) {
    if (!first.contains(item) && suits(item,matcher,pattern)) {
      model.addElement(item);
      array.add(item);
    }
  }
  boolean isEmpty=array.isEmpty();
  if (isEmpty) {
    LookupItem<String> item=new LookupItem<String>(CompletionBundle.message("completion.no.suggestions"),"");
    item.setAttribute(EMPTY_ITEM_ATTRIBUTE,"");
    model.addElement(item);
    array.add(item);
  }
  myList.setModel(model);
  myList.setVisibleRowCount(Math.min(myList.getModel().getSize(),CodeInsightSettings.getInstance().LOOKUP_HEIGHT));
  if (!isEmpty) {
    selectMostPreferableItem();
    if (myIndex >= 0) {
      ListScrollingUtil.selectItem(myList,myIndex);
    }
 else {
      if (oldSelected == null || !ListScrollingUtil.selectItem(myList,oldSelected)) {
        ListScrollingUtil.selectItem(myList,0);
      }
    }
  }
  LookupItem[] items=array.toArray(new LookupItem[array.size()]);
  int maxWidth=myCellRenderer.getMaximumWidth(items);
  myList.setFixedCellWidth(maxWidth);
}
