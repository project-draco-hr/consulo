{
synchronized (myItems) {
    int minPrefixLength=myItems.isEmpty() ? 0 : Integer.MAX_VALUE;
    for (    final LookupElement item : myItems) {
      minPrefixLength=Math.min(item.getPrefixMatcher().getPrefix().length(),minPrefixLength);
    }
    if (myMinPrefixLength != minPrefixLength) {
      myLookupStartMarker=null;
    }
    myMinPrefixLength=minPrefixLength;
    Object oldSelected=!myDirty ? null : myList.getSelectedValue();
    DefaultListModel model=(DefaultListModel)myList.getModel();
    model.clear();
    Set<LookupElement> firstItems=new THashSet<LookupElement>();
    addExactPrefixItems(model,firstItems);
    boolean hasExactPrefixes=!firstItems.isEmpty();
    addMostRelevantItems(model,firstItems);
    final boolean hasPreselectedItem=addPreselectedItem(model,firstItems);
    myPreferredItemsCount=firstItems.size();
    addRemainingItemsLexicographically(model,firstItems);
    boolean isEmpty=model.getSize() == 0;
    if (isEmpty) {
      addEmptyItem(model);
    }
 else {
      myList.setFixedCellWidth(myLookupWidth);
    }
    myList.setFixedCellHeight(myCellRenderer.getListCellRendererComponent(myList,myList.getModel().getElementAt(0),0,false,false).getPreferredSize().height);
    myList.setVisibleRowCount(Math.min(myList.getModel().getSize(),CodeInsightSettings.getInstance().LOOKUP_HEIGHT));
    myAdComponent.setText(myAdText);
    if (!isEmpty) {
      if (oldSelected != null) {
        if (!ListScrollingUtil.selectItem(myList,oldSelected)) {
          selectMostPreferableItem();
        }
      }
 else {
        if (myPreselectedItem == EMPTY_LOOKUP_ITEM) {
          selectMostPreferableItem();
          myPreselectedItem=getCurrentItem();
        }
 else         if (hasPreselectedItem && !hasExactPrefixes) {
          ListScrollingUtil.selectItem(myList,myPreselectedItem);
        }
 else {
          selectMostPreferableItem();
        }
      }
    }
  }
}
