{
  final Timestamps timestamps=pd.timestamps.getStorage();
  Set<Artifact> artifacts=new HashSet<Artifact>();
  if (artifactNames.isEmpty() && buildType == BuildType.PROJECT_REBUILD) {
    artifacts.addAll(pd.project.getArtifacts().values());
  }
 else {
    final Map<String,Artifact> artifactMap=pd.project.getArtifacts();
    for (    String name : artifactNames) {
      final Artifact artifact=artifactMap.get(name);
      if (artifact != null && !StringUtil.isEmpty(artifact.getOutputPath())) {
        artifacts.add(artifact);
      }
    }
  }
  final CompileScope compileScope;
  if (buildType == BuildType.PROJECT_REBUILD || (modules.isEmpty() && paths.isEmpty())) {
    compileScope=new AllProjectScope(pd.project,pd.jpsProject,artifacts,buildType != BuildType.MAKE);
  }
 else {
    final Set<JpsModule> forcedModules;
    if (!modules.isEmpty()) {
      forcedModules=new HashSet<JpsModule>();
      for (      JpsModule m : pd.jpsProject.getModules()) {
        if (modules.contains(m.getName())) {
          forcedModules.add(m);
        }
      }
    }
 else {
      forcedModules=Collections.emptySet();
    }
    final Map<String,Set<File>> filesToCompile;
    if (!paths.isEmpty()) {
      filesToCompile=new HashMap<String,Set<File>>();
      for (      String path : paths) {
        final File file=new File(path);
        final RootDescriptor rd=pd.rootsIndex.getModuleAndRoot(null,file);
        if (rd != null) {
          Set<File> files=filesToCompile.get(rd.module);
          if (files == null) {
            files=new HashSet<File>();
            filesToCompile.put(rd.module,files);
          }
          files.add(file);
          if (buildType == BuildType.FORCED_COMPILATION) {
            pd.fsState.markDirty(null,file,rd,timestamps);
          }
        }
      }
    }
 else {
      filesToCompile=Collections.emptyMap();
    }
    if (filesToCompile.isEmpty()) {
      compileScope=new ModulesScope(pd.project,pd.jpsProject,forcedModules,artifacts,buildType != BuildType.MAKE);
    }
 else {
      compileScope=new ModulesAndFilesScope(pd.project,pd.jpsProject,forcedModules,filesToCompile,artifacts,buildType != BuildType.MAKE);
    }
  }
  return compileScope;
}
