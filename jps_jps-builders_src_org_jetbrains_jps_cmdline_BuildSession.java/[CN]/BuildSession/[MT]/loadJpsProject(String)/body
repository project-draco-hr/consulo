{
  final long start=System.currentTimeMillis();
  try {
    final JpsModel model=JpsElementFactory.getInstance().createModel();
    try {
      for (      GlobalLibrary library : myGlobalLibraries) {
        JpsLibrary jpsLibrary=null;
        if (library instanceof SdkLibrary) {
          final SdkLibrary sdkLibrary=(SdkLibrary)library;
          final JpsSdkPropertiesLoader<?> loader=JpsSdkTableLoader.getSdkPropertiesLoader(sdkLibrary.getTypeName());
          if (loader != null) {
            jpsLibrary=addLibrary(model,sdkLibrary,loader);
          }
 else {
            LOG.info("Sdk type " + sdkLibrary.getTypeName() + " not registered");
          }
        }
 else {
          jpsLibrary=model.getGlobal().getLibraryCollection().addLibrary(library.getName(),JpsJavaLibraryType.INSTANCE);
        }
        if (jpsLibrary != null) {
          for (          String path : library.getPaths()) {
            jpsLibrary.addRoot(JpsPathUtil.pathToUrl(path),JpsOrderRootType.COMPILED);
          }
        }
      }
      JpsProjectLoader.loadProject(model.getProject(),myPathVars,projectPath);
      LOG.info("New JPS model: " + model.getProject().getModules().size() + " modules, "+ model.getProject().getLibraryCollection().getLibraries().size()+ " libraries");
    }
 catch (    IOException e) {
      LOG.info(e);
    }
    return model;
  }
  finally {
    final long loadTime=System.currentTimeMillis() - start;
    LOG.info("New JPS model: project " + projectPath + " loaded in "+ loadTime+ " ms");
  }
}
