{
  Throwable error=null;
  final Ref<Boolean> hasErrors=new Ref<Boolean>(false);
  final Ref<Boolean> markedFilesUptodate=new Ref<Boolean>(false);
  try {
    runBuild(new MessageHandler(){
      public void processMessage(      BuildMessage buildMessage){
        final CmdlineRemoteProto.Message.BuilderMessage response;
        if (buildMessage instanceof FileGeneratedEvent) {
          final Collection<Pair<String,String>> paths=((FileGeneratedEvent)buildMessage).getPaths();
          response=!paths.isEmpty() ? CmdlineProtoUtil.createFileGeneratedEvent(paths) : null;
        }
 else         if (buildMessage instanceof UptoDateFilesSavedEvent) {
          markedFilesUptodate.set(true);
          response=null;
        }
 else         if (buildMessage instanceof CompilerMessage) {
          markedFilesUptodate.set(true);
          final CompilerMessage compilerMessage=(CompilerMessage)buildMessage;
          final String text=compilerMessage.getCompilerName() + ": " + compilerMessage.getMessageText();
          final BuildMessage.Kind kind=compilerMessage.getKind();
          if (kind == BuildMessage.Kind.ERROR) {
            hasErrors.set(true);
          }
          if (Utils.IS_TEST_MODE) {
            LOG.info("Processing message: " + buildMessage);
          }
          response=CmdlineProtoUtil.createCompileMessage(kind,text,compilerMessage.getSourcePath(),compilerMessage.getProblemBeginOffset(),compilerMessage.getProblemEndOffset(),compilerMessage.getProblemLocationOffset(),compilerMessage.getLine(),compilerMessage.getColumn(),-1.0f);
        }
 else {
          float done=-1.0f;
          if (buildMessage instanceof ProgressMessage) {
            done=((ProgressMessage)buildMessage).getDone();
          }
          response=CmdlineProtoUtil.createCompileProgressMessageResponse(buildMessage.getMessageText(),done);
        }
        if (response != null) {
          Channels.write(myChannel,CmdlineProtoUtil.toMessage(mySessionId,response));
        }
      }
    }
,this);
  }
 catch (  Throwable e) {
    LOG.info(e);
    error=e;
  }
 finally {
    finishBuild(error,hasErrors.get(),markedFilesUptodate.get());
  }
}
