{
  PsiManager manager=aPackage.getManager();
  final PackageWrapper targetPackage=moveDestination.getTargetPackage();
  Map<MoveRenameUsageInfo,String> targetPackages=new HashMap<MoveRenameUsageInfo,String>();
  final String newPrefix;
  if ("".equals(targetPackage.getQualifiedName())) {
    newPrefix="";
  }
 else {
    newPrefix=targetPackage.getQualifiedName() + ".";
  }
  final String newPackageQualifiedName=newPrefix + aPackage.getName();
  for (  UsageInfo usage1 : usages) {
    MoveRenameUsageInfo usage=(MoveRenameUsageInfo)usage1;
    LOG.assertTrue(usage.referencedElement instanceof PsiPackage);
    final PsiPackage oldPackage=(PsiPackage)usage.referencedElement;
    LOG.assertTrue(!"".equals(oldPackage.getName()));
    targetPackages.put(usage,newPrefix + oldPackage.getName());
  }
  final GlobalSearchScope projectScope=GlobalSearchScope.projectScope(aPackage.getProject());
  PsiDirectory[] dirs=aPackage.getDirectories(projectScope);
  for (  PsiDirectory dir : dirs) {
    final PsiDirectory targetDirectory=moveDestination.getTargetDirectory(dir);
    if (targetDirectory != null) {
      moveDirectoryRecursively(dir,targetDirectory);
    }
  }
  for (  UsageInfo usage2 : usages) {
    MoveRenameUsageInfo usage=(MoveRenameUsageInfo)usage2;
    if (usage.getElement() == null)     continue;
    PsiReference reference=usage.reference;
    if (reference != null) {
      final String newQName=targetPackages.get(usage);
      final PsiPackage newPackage=manager.findPackage(newQName);
      reference.bindToElement(newPackage);
    }
  }
  aPackage.handleQualifiedNameChange(newPackageQualifiedName);
  return manager.findPackage(newPackageQualifiedName);
}
