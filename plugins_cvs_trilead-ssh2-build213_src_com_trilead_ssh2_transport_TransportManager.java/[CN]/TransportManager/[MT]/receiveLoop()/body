{
  byte[] msg=new byte[35000];
  while (true) {
    int msglen=tc.receiveMessage(msg,0,msg.length);
    int type=msg[0] & 0xff;
    if (type == Packets.SSH_MSG_IGNORE)     continue;
    if (type == Packets.SSH_MSG_DEBUG) {
      if (log.isEnabled()) {
        TypesReader tr=new TypesReader(msg,0,msglen);
        tr.readByte();
        tr.readBoolean();
        StringBuffer debugMessageBuffer=new StringBuffer();
        debugMessageBuffer.append(tr.readString("UTF-8"));
        for (int i=0; i < debugMessageBuffer.length(); i++) {
          char c=debugMessageBuffer.charAt(i);
          if ((c >= 32) && (c <= 126))           continue;
          debugMessageBuffer.setCharAt(i,'\uFFFD');
        }
        log.log(50,"DEBUG Message from remote: '" + debugMessageBuffer.toString() + "'");
      }
      continue;
    }
    if (type == Packets.SSH_MSG_UNIMPLEMENTED) {
      throw new IOException("Peer sent UNIMPLEMENTED message, that should not happen.");
    }
    if (type == Packets.SSH_MSG_DISCONNECT) {
      TypesReader tr=new TypesReader(msg,0,msglen);
      tr.readByte();
      int reason_code=tr.readUINT32();
      StringBuffer reasonBuffer=new StringBuffer();
      reasonBuffer.append(tr.readString("UTF-8"));
      if (reasonBuffer.length() > 255) {
        reasonBuffer.setLength(255);
        reasonBuffer.setCharAt(254,'.');
        reasonBuffer.setCharAt(253,'.');
        reasonBuffer.setCharAt(252,'.');
      }
      for (int i=0; i < reasonBuffer.length(); i++) {
        char c=reasonBuffer.charAt(i);
        if ((c >= 32) && (c <= 126))         continue;
        reasonBuffer.setCharAt(i,'\uFFFD');
      }
      throw new IOException("Peer sent DISCONNECT message (reason code " + reason_code + "): "+ reasonBuffer.toString());
    }
    if ((type == Packets.SSH_MSG_KEXINIT) || (type == Packets.SSH_MSG_NEWKEYS) || ((type >= 30) && (type <= 49))) {
      km.handleMessage(msg,msglen);
      continue;
    }
    MessageHandler mh=null;
    for (int i=0; i < messageHandlers.size(); i++) {
      HandlerEntry he=(HandlerEntry)messageHandlers.elementAt(i);
      if ((he.low <= type) && (type <= he.high)) {
        mh=he.mh;
        break;
      }
    }
    if (mh == null)     throw new IOException("Unexpected SSH message (type " + type + ")");
    mh.handleMessage(msg,msglen);
  }
}
