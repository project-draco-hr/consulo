{
  int correction=UIUtil.isUnderDarcula() ? 50 : 0;
  final Color[] colors=new Color[]{ColorUtil.toAlpha(ringColor,180 - correction),ColorUtil.toAlpha(ringColor,120 - correction),ColorUtil.toAlpha(ringColor,70 - correction),ColorUtil.toAlpha(ringColor,100 - correction),ColorUtil.toAlpha(ringColor,50 - correction)};
  final Object oldAntialiasingValue=g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
  final Object oldStrokeControlValue=g.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,!oval && USE_QUARTZ ? RenderingHints.VALUE_STROKE_PURE : RenderingHints.VALUE_STROKE_NORMALIZE);
  final Rectangle r=new Rectangle(bounds.x - JBUI.scale(3),bounds.y - JBUI.scale(3),bounds.width + JBUI.scale(6),bounds.height + JBUI.scale(6));
  g.setColor(colors[0]);
  drawRectOrOval(g,oval,JBUI.scale(5),r.x + JBUI.scale(2),r.y + JBUI.scale(2),r.width - JBUI.scale(5),r.height - JBUI.scale(5));
  g.setColor(colors[1]);
  drawRectOrOval(g,oval,JBUI.scale(7),r.x + JBUI.scale(1),r.y + JBUI.scale(1),r.width - JBUI.scale(3),r.height - JBUI.scale(3));
  g.setColor(colors[2]);
  drawRectOrOval(g,oval,JBUI.scale(9),r.x,r.y,r.width - JBUI.scale(1),r.height - JBUI.scale(1));
  g.setColor(colors[3]);
  drawRectOrOval(g,oval,0,r.x + JBUI.scale(3),r.y + JBUI.scale(3),r.width - JBUI.scale(7),r.height - JBUI.scale(7));
  g.setColor(colors[4]);
  drawRectOrOval(g,oval,0,r.x + JBUI.scale(4),r.y + JBUI.scale(4),r.width - JBUI.scale(9),r.height - JBUI.scale(9));
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,oldAntialiasingValue);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,oldStrokeControlValue);
}
