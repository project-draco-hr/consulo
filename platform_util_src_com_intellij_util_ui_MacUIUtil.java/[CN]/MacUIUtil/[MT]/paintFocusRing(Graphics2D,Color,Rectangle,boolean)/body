{
  int correction=UIUtil.isUnderDarcula() ? 50 : 0;
  final Color[] colors=new Color[]{ColorUtil.toAlpha(ringColor,180 - correction),ColorUtil.toAlpha(ringColor,120 - correction),ColorUtil.toAlpha(ringColor,70 - correction),ColorUtil.toAlpha(ringColor,100 - correction),ColorUtil.toAlpha(ringColor,50 - correction)};
  final Object oldAntialiasingValue=g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
  final Object oldStrokeControlValue=g.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,!oval && USE_QUARTZ ? RenderingHints.VALUE_STROKE_PURE : RenderingHints.VALUE_STROKE_NORMALIZE);
  final Rectangle r=new Rectangle(bounds.x - 3,bounds.y - 3,bounds.width + 6,bounds.height + 6);
  g.setColor(colors[0]);
  drawRectOrOval(g,oval,5,r.x + 2,r.y + 2,r.width - 5,r.height - 5);
  g.setColor(colors[1]);
  drawRectOrOval(g,oval,7,r.x + 1,r.y + 1,r.width - 3,r.height - 3);
  g.setColor(colors[2]);
  drawRectOrOval(g,oval,9,r.x,r.y,r.width - 1,r.height - 1);
  g.setColor(colors[3]);
  drawRectOrOval(g,oval,0,r.x + 3,r.y + 3,r.width - 7,r.height - 7);
  g.setColor(colors[4]);
  drawRectOrOval(g,oval,0,r.x + 4,r.y + 4,r.width - 9,r.height - 9);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,oldAntialiasingValue);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,oldStrokeControlValue);
}
