{
  myRemainingPatches.addAll(myPatches);
  final ApplyPatchStatus patchStatus=nonWriteActionPreCheck();
  final Label beforeLabel=LocalHistory.getInstance().putSystemLabel(myProject,"Before patch");
  final TriggerAdditionOrDeletion trigger=new TriggerAdditionOrDeletion(myProject);
  final ApplyPatchStatus applyStatus=getApplyPatchStatus(trigger);
  myStatus=ApplyPatchStatus.SUCCESS.equals(patchStatus) ? applyStatus : ApplyPatchStatus.and(patchStatus,applyStatus);
  trigger.processIt();
  LocalHistory.getInstance().putSystemLabel(myProject,"After patch");
  if (myStatus == ApplyPatchStatus.FAILURE) {
    suggestRollback(myProject,Collections.singletonList(PatchApplier.this),beforeLabel);
  }
 else   if (myStatus == ApplyPatchStatus.ABORT) {
    rollbackUnderProgress(myProject,myProject.getBaseDir(),beforeLabel);
  }
  if (myShowNotification || !ApplyPatchStatus.SUCCESS.equals(myStatus)) {
    showApplyStatus(myProject,myStatus);
  }
  refreshFiles(trigger.getAffected());
}
