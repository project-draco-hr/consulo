{
  myRemainingPatches.addAll(myPatches);
  final ApplyPatchStatus patchStatus=nonWriteActionPreCheck();
  if (ApplyPatchStatus.FAILURE.equals(patchStatus)) {
    if (myShowNotification) {
      showApplyStatus(myProject,patchStatus);
    }
    myStatus=patchStatus;
    return;
  }
  final ApplyPatchStatus applyStatus=ApplicationManager.getApplication().runReadAction(new Computable<ApplyPatchStatus>(){
    public ApplyPatchStatus compute(){
      final Ref<ApplyPatchStatus> refStatus=new Ref<ApplyPatchStatus>(ApplyPatchStatus.FAILURE);
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        public void run(){
          refStatus.set(executeWritable());
        }
      }
,VcsBundle.message("patch.apply.command"),null);
      return refStatus.get();
    }
  }
);
  myStatus=ApplyPatchStatus.SUCCESS.equals(patchStatus) ? applyStatus : ApplyPatchStatus.and(patchStatus,applyStatus);
  final TriggerAdditionOrDeletion trigger=new TriggerAdditionOrDeletion(myProject);
  addSkippedItems(trigger);
  trigger.process();
  if (myShowNotification || !ApplyPatchStatus.SUCCESS.equals(myStatus)) {
    showApplyStatus(myProject,myStatus);
  }
  refreshFiles(trigger.getAffected(),context);
}
