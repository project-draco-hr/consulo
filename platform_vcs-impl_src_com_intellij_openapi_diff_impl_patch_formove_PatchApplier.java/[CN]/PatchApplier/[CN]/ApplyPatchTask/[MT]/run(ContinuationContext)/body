{
  myRemainingPatches.addAll(myPatches);
  final ApplyPatchStatus patchStatus=nonWriteActionPreCheck();
  if (ApplyPatchStatus.FAILURE.equals(patchStatus)) {
    if (myShowNotification) {
      showApplyStatus(myProject,patchStatus);
    }
    myStatus=patchStatus;
    return;
  }
  final TriggerAdditionOrDeletion trigger=new TriggerAdditionOrDeletion(myProject,mySystemOperation);
  final ApplyPatchStatus applyStatus;
  try {
    applyStatus=ApplicationManager.getApplication().runReadAction(new Computable<ApplyPatchStatus>(){
      public ApplyPatchStatus compute(){
        final Ref<ApplyPatchStatus> refStatus=new Ref<ApplyPatchStatus>(ApplyPatchStatus.FAILURE);
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          public void run(){
            if (!createFiles()) {
              refStatus.set(ApplyPatchStatus.FAILURE);
              return;
            }
            addSkippedItems(trigger);
            trigger.prepare();
            refStatus.set(executeWritable());
          }
        }
,VcsBundle.message("patch.apply.command"),null);
        return refStatus.get();
      }
    }
);
  }
  finally {
    VcsFileListenerContextHelper.getInstance(myProject).clearContext();
  }
  myStatus=ApplyPatchStatus.SUCCESS.equals(patchStatus) ? applyStatus : ApplyPatchStatus.and(patchStatus,applyStatus);
  trigger.processIt();
  if (myShowNotification || !ApplyPatchStatus.SUCCESS.equals(myStatus)) {
    showApplyStatus(myProject,myStatus);
  }
  refreshFiles(trigger.getAffected(),context);
}
