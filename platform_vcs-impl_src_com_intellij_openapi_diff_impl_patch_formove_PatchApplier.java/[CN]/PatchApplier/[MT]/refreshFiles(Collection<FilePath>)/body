{
  final List<FilePath> directlyAffected=myVerifier.getDirectlyAffected();
  final List<VirtualFile> indirectlyAffected=myVerifier.getAllAffected();
  directlyAffected.addAll(additionalDirectly);
  final RefreshSession session=RefreshQueue.getInstance().createSession(false,true,new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
      if ((myTargetChangeList != null) && (!directlyAffected.isEmpty()) && (!myTargetChangeList.getName().equals(changeListManager.getDefaultListName()))) {
        changeListManager.invokeAfterUpdate(new FilesMover(changeListManager,directlyAffected),InvokeAfterUpdateMode.BACKGROUND_CANCELLABLE,VcsBundle.message("change.lists.manager.move.changes.to.list"),new Consumer<VcsDirtyScopeManager>(){
          public void consume(          final VcsDirtyScopeManager vcsDirtyScopeManager){
            vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
          }
        }
,null);
      }
 else {
        final VcsDirtyScopeManager vcsDirtyScopeManager=VcsDirtyScopeManager.getInstance(myProject);
        vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
      }
    }
  }
);
  session.addAllFiles(indirectlyAffected);
  session.launch();
}
