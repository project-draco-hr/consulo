{
  if (context != null) {
    context.suspend();
  }
  final Runnable projectFilesReload=MergeVersion.MergeDocumentVersion.prepareToReportChangedProjectFiles(project,ObjectsConvertor.fp2vf(directlyAffected));
  final TaskDescriptor projectFilesReloadTaskDescriptor=projectFilesReload == null ? null : new TaskDescriptor("",Where.AWT){
    @Override public void run(    final ContinuationContext context){
      projectFilesReload.run();
    }
  }
;
  final Runnable scheduleProjectFilesReload=new Runnable(){
    public void run(){
      if (projectFilesReloadTaskDescriptor != null) {
        if (context != null) {
          context.last(projectFilesReloadTaskDescriptor);
        }
 else {
          SwingUtilities.invokeLater(projectFilesReload);
        }
      }
    }
  }
;
  final RefreshSession session=RefreshQueue.getInstance().createSession(false,true,new Runnable(){
    public void run(){
      if (project.isDisposed())       return;
      final ChangeListManager changeListManager=ChangeListManager.getInstance(project);
      if (!directlyAffected.isEmpty() && targetChangelistMover != null) {
        changeListManager.invokeAfterUpdate(new Runnable(){
          @Override public void run(){
            if (targetChangelistMover != null) {
              targetChangelistMover.consume(directlyAffected);
            }
            scheduleProjectFilesReload.run();
            if (context != null) {
              context.ping();
            }
          }
        }
,InvokeAfterUpdateMode.BACKGROUND_CANCELLABLE,VcsBundle.message("change.lists.manager.move.changes.to.list"),new Consumer<VcsDirtyScopeManager>(){
          public void consume(          final VcsDirtyScopeManager vcsDirtyScopeManager){
            vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
            vcsDirtyScopeManager.filesDirty(indirectlyAffected,null);
          }
        }
,null);
      }
 else {
        final VcsDirtyScopeManager vcsDirtyScopeManager=VcsDirtyScopeManager.getInstance(project);
        vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
        scheduleProjectFilesReload.run();
        if (context != null) {
          context.ping();
        }
      }
    }
  }
);
  session.addAllFiles(indirectlyAffected);
  session.launch();
}
