{
  if (lexer.getTokenType() != LBRACE)   return null;
  CompositeElement element=ASTFactory.composite(ARRAY_INITIALIZER_EXPRESSION);
  element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
  lexer.advance();
  boolean firstExpressionMissing=false;
  while (true) {
    if (lexer.getTokenType() == RBRACE) {
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      return element;
    }
    if (lexer.getTokenType() == null) {
      element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbrace")));
      element.putUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY,"");
      return element;
    }
    if (firstExpressionMissing) {
      element.getLastChildNode().rawInsertBeforeMe(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
    }
    TreeElement arg=parseExpression(lexer);
    if (arg == null) {
      if (lexer.getTokenType() == COMMA) {
        firstExpressionMissing=true;
      }
 else {
        element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbrace")));
        element.putUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY,"");
        return element;
      }
    }
 else {
      element.rawAddChildren(arg);
    }
    if (lexer.getTokenType() == RBRACE) {
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      return element;
    }
    if (lexer.getTokenType() == COMMA) {
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
 else {
      element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.comma")));
    }
  }
}
