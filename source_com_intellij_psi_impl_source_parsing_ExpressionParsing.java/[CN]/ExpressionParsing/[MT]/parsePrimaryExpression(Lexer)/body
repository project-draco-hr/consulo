{
  final LexerPosition startPos=lexer.getCurrentPosition();
  CompositeElement element=parsePrimaryExpressionStart(lexer);
  if (element == null)   return null;
  while (true) {
    IElementType i=lexer.getTokenType();
    if (i == JavaTokenType.DOT) {
      final LexerPosition pos=lexer.getCurrentPosition();
      TreeElement dot=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
      lexer.advance();
      IElementType tokenType=lexer.getTokenType();
      if (tokenType == JavaTokenType.LT) {
        final TreeElement referenceParameterList=parseReferenceParameterList(lexer,false);
        CompositeElement element1=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
        element1.rawAddChildren(element);
        element1.rawAddChildren(dot);
        element1.rawAddChildren(referenceParameterList);
        if (lexer.getTokenType() == JavaTokenType.IDENTIFIER) {
          element1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
        }
 else {
          element1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
          return element1;
        }
        element=element1;
      }
 else       if (tokenType == JavaTokenType.CLASS_KEYWORD && element.getElementType() == JavaElementType.REFERENCE_EXPRESSION) {
        final LexerPosition pos1=lexer.getCurrentPosition();
        lexer.restore(startPos);
        CompositeElement element1=parseClassObjectAccessExpression(lexer);
        if (lexer.getTokenStart() <= pos1.getOffset()) {
          lexer.restore(pos1);
          element.rawAddChildren(dot);
          element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
          return element;
        }
        element=element1;
      }
 else       if (tokenType == JavaTokenType.NEW_KEYWORD) {
        element=parseNewExpression(lexer,element,dot);
      }
 else       if ((tokenType == JavaTokenType.THIS_KEYWORD || tokenType == JavaTokenType.SUPER_KEYWORD) && element.getElementType() == JavaElementType.REFERENCE_EXPRESSION) {
        lexer.restore(startPos);
        CompositeElement element1=parseJavaCodeReference(lexer,false,true);
        if (element1 == null || lexer.getTokenType() != JavaTokenType.DOT || lexer.getTokenStart() != pos.getOffset()) {
          lexer.restore(pos);
          return element;
        }
        IElementType type=tokenType == JavaTokenType.THIS_KEYWORD ? JavaElementType.THIS_EXPRESSION : JavaElementType.SUPER_EXPRESSION;
        CompositeElement element2=ASTFactory.composite(type);
        element2.rawAddChildren(element1);
        element2.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
        if (lexer.getTokenType() != tokenType) {
          lexer.restore(pos);
          return element;
        }
        element2.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
        element=element2;
      }
 else       if (tokenType == JavaTokenType.SUPER_KEYWORD) {
        CompositeElement element1=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
        element1.rawAddChildren(element);
        element1.rawAddChildren(dot);
        element1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
        element=element1;
      }
 else {
        final TreeElement referenceParameterList=parseReferenceParameterList(lexer,false);
        CompositeElement element1=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
        element1.rawAddChildren(element);
        element1.rawAddChildren(dot);
        element1.rawAddChildren(referenceParameterList);
        if (lexer.getTokenType() == JavaTokenType.IDENTIFIER) {
          element1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
        }
 else {
          element1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
          return element1;
        }
        element=element1;
      }
    }
 else     if (i == JavaTokenType.LPARENTH) {
      if (element.getElementType() != JavaElementType.REFERENCE_EXPRESSION) {
        if (element.getElementType() == JavaElementType.SUPER_EXPRESSION) {
          final LexerPosition pos=lexer.getCurrentPosition();
          lexer.restore(startPos);
          CompositeElement qualifier=parsePrimaryExpressionStart(lexer);
          if (qualifier != null) {
            CompositeElement element1=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
            element1.rawAddChildren(qualifier);
            if (lexer.getTokenType() == JavaTokenType.DOT) {
              TreeElement dot=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
              lexer.advance();
              element1.rawAddChildren(dot);
              if (lexer.getTokenType() == JavaTokenType.SUPER_KEYWORD) {
                TreeElement superKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
                lexer.advance();
                element1.rawAddChildren(superKeyword);
                element=element1;
                continue;
              }
            }
          }
          lexer.restore(pos);
          return element;
        }
 else         return element;
      }
      CompositeElement element1=ASTFactory.composite(JavaElementType.METHOD_CALL_EXPRESSION);
      element1.rawAddChildren(element);
      TreeElement argumentList=parseArgumentList(lexer);
      element1.rawAddChildren(argumentList);
      element=element1;
    }
 else     if (i == JavaTokenType.LBRACKET) {
      final LexerPosition pos=lexer.getCurrentPosition();
      TreeElement lbracket=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
      lexer.advance();
      if (lexer.getTokenType() == JavaTokenType.RBRACKET && element.getElementType() == JavaElementType.REFERENCE_EXPRESSION) {
        lexer.restore(startPos);
        CompositeElement element1=parseClassObjectAccessExpression(lexer);
        if (lexer.getTokenStart() <= pos.getOffset()) {
          lexer.restore(pos);
          return element;
        }
        element=element1;
      }
 else {
        CompositeElement element1=ASTFactory.composite(JavaElementType.ARRAY_ACCESS_EXPRESSION);
        element1.rawAddChildren(element);
        element1.rawAddChildren(lbracket);
        TreeElement expr=parseExpression(lexer);
        if (expr == null) {
          element1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
          return element1;
        }
        element1.rawAddChildren(expr);
        if (lexer.getTokenType() != JavaTokenType.RBRACKET) {
          element1.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbracket")));
          return element1;
        }
        element1.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
        element=element1;
      }
    }
 else {
      return element;
    }
  }
}
