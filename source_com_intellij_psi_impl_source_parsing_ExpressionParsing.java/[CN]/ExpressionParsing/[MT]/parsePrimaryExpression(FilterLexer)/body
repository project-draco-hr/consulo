{
  long startPos=ParseUtil.savePosition(lexer);
  CompositeElement element=parsePrimaryExpressionStart(lexer);
  if (element == null)   return null;
  while (true) {
    IElementType i=lexer.getTokenType();
    if (i == DOT) {
{
        long pos=ParseUtil.savePosition(lexer);
        TreeElement dot=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
        lexer.advance();
        IElementType tokenType=lexer.getTokenType();
        if (tokenType == LT) {
          final TreeElement referenceParameterList=parseReferenceParameterList(lexer,false);
          CompositeElement element1=Factory.createCompositeElement(REFERENCE_EXPRESSION);
          TreeUtil.addChildren(element1,element);
          TreeUtil.addChildren(element1,dot);
          TreeUtil.addChildren(element1,referenceParameterList);
          if (lexer.getTokenType() == IDENTIFIER) {
            TreeUtil.addChildren(element1,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
            lexer.advance();
          }
 else {
            TreeUtil.addChildren(element1,Factory.createErrorElement("Identifier expected"));
            return element1;
          }
          element=element1;
        }
 else         if (tokenType == CLASS_KEYWORD && element.getElementType() == REFERENCE_EXPRESSION) {
          long pos1=ParseUtil.savePosition(lexer);
          ParseUtil.restorePosition(lexer,startPos);
          CompositeElement element1=parseClassObjectAccessExpression(lexer);
          if (lexer.getTokenStart() <= ParseUtil.getStoredPosition(pos1)) {
            ParseUtil.restorePosition(lexer,pos1);
            TreeUtil.addChildren(element,dot);
            TreeUtil.addChildren(element,Factory.createErrorElement("Identifier expected"));
            return element;
          }
          element=element1;
        }
 else         if (tokenType == NEW_KEYWORD) {
          element=parseNewExpression(lexer,element,dot);
        }
 else         if ((tokenType == THIS_KEYWORD || tokenType == SUPER_KEYWORD) && element.getElementType() == REFERENCE_EXPRESSION) {
          ParseUtil.restorePosition(lexer,startPos);
          CompositeElement element1=parseJavaCodeReference(lexer,false);
          if (element1 == null || lexer.getTokenType() != DOT || lexer.getTokenStart() != ParseUtil.getStoredPosition(pos)) {
            ParseUtil.restorePosition(lexer,pos);
            return element;
          }
          IElementType type=tokenType == THIS_KEYWORD ? THIS_EXPRESSION : SUPER_EXPRESSION;
          CompositeElement element2=Factory.createCompositeElement(type);
          TreeUtil.addChildren(element2,element1);
          TreeUtil.addChildren(element2,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
          if (lexer.getTokenType() != tokenType) {
            ParseUtil.restorePosition(lexer,pos);
            return element;
          }
          TreeUtil.addChildren(element2,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
          element=element2;
        }
 else         if (tokenType == SUPER_KEYWORD) {
          CompositeElement element1=Factory.createCompositeElement(REFERENCE_EXPRESSION);
          TreeUtil.addChildren(element1,element);
          TreeUtil.addChildren(element1,dot);
          TreeUtil.addChildren(element1,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
          element=element1;
        }
 else {
          final TreeElement referenceParameterList=parseReferenceParameterList(lexer,false);
          CompositeElement element1=Factory.createCompositeElement(REFERENCE_EXPRESSION);
          TreeUtil.addChildren(element1,element);
          TreeUtil.addChildren(element1,dot);
          TreeUtil.addChildren(element1,referenceParameterList);
          if (lexer.getTokenType() == IDENTIFIER) {
            TreeUtil.addChildren(element1,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
            lexer.advance();
          }
 else {
            TreeUtil.addChildren(element1,Factory.createErrorElement("Identifier expected"));
            return element1;
          }
          element=element1;
        }
      }
    }
 else     if (i == LPARENTH) {
{
        if (element.getElementType() != REFERENCE_EXPRESSION) {
          if (element.getElementType() == SUPER_EXPRESSION) {
            long pos=ParseUtil.savePosition(lexer);
            ParseUtil.restorePosition(lexer,startPos);
            CompositeElement qualifier=parsePrimaryExpressionStart(lexer);
            if (qualifier != null) {
              CompositeElement element1=Factory.createCompositeElement(REFERENCE_EXPRESSION);
              TreeUtil.addChildren(element1,qualifier);
              if (lexer.getTokenType() == DOT) {
                TreeElement dot=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
                lexer.advance();
                TreeUtil.addChildren(element1,dot);
                if (lexer.getTokenType() == SUPER_KEYWORD) {
                  TreeElement superKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
                  lexer.advance();
                  TreeUtil.addChildren(element1,superKeyword);
                  element=element1;
                  continue;
                }
              }
            }
            ParseUtil.restorePosition(lexer,pos);
            return element;
          }
 else           return element;
        }
        CompositeElement element1=Factory.createCompositeElement(METHOD_CALL_EXPRESSION);
        TreeUtil.addChildren(element1,element);
        TreeElement argumentList=parseArgumentList(lexer);
        TreeUtil.addChildren(element1,argumentList);
        element=element1;
      }
    }
 else     if (i == LBRACKET) {
{
        long pos=ParseUtil.savePosition(lexer);
        TreeElement lbracket=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
        lexer.advance();
        if (lexer.getTokenType() == RBRACKET && element.getElementType() == REFERENCE_EXPRESSION) {
          ParseUtil.restorePosition(lexer,startPos);
          CompositeElement element1=parseClassObjectAccessExpression(lexer);
          if (lexer.getTokenStart() <= ParseUtil.getStoredPosition(pos)) {
            ParseUtil.restorePosition(lexer,pos);
            return element;
          }
          element=element1;
        }
 else {
          CompositeElement element1=Factory.createCompositeElement(ARRAY_ACCESS_EXPRESSION);
          TreeUtil.addChildren(element1,element);
          TreeUtil.addChildren(element1,lbracket);
          TreeElement expr=parseExpression(lexer);
          if (expr == null) {
            TreeUtil.addChildren(element1,Factory.createErrorElement("Expression expected"));
            return element1;
          }
          TreeUtil.addChildren(element1,expr);
          if (lexer.getTokenType() != RBRACKET) {
            TreeUtil.addChildren(element1,Factory.createErrorElement("']' expected"));
            return element1;
          }
          TreeUtil.addChildren(element1,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
          lexer.advance();
          element=element1;
        }
      }
    }
 else {
      return element;
    }
  }
}
