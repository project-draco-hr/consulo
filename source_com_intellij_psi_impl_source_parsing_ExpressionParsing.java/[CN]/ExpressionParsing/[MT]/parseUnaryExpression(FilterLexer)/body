{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == PLUS || tokenType == MINUS || tokenType == PLUSPLUS || tokenType == MINUSMINUS || tokenType == TILDE || tokenType == EXCL) {
{
      CompositeElement element=Factory.createCompositeElement(PREFIX_EXPRESSION);
      TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      CompositeElement element1=parseUnaryExpression(lexer);
      if (element1 == null) {
        TreeUtil.addChildren(element,Factory.createErrorElement("Expression expected"));
        return element;
      }
      TreeUtil.addChildren(element,element1);
      return element;
    }
  }
 else   if (tokenType == LPARENTH) {
{
      long pos=ParseUtil.savePosition(lexer);
      TreeElement lparenth=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
      lexer.advance();
      TreeElement type=parseType(lexer);
      if (type == null || lexer.getTokenType() != RPARENTH) {
        ParseUtil.restorePosition(lexer,pos);
        return parsePostfixExpression(lexer);
      }
      final TreeElement rparenth=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
      lexer.advance();
      if (lexer.getTokenType() == PLUS || lexer.getTokenType() == MINUS || lexer.getTokenType() == PLUSPLUS || lexer.getTokenType() == MINUSMINUS) {
        if (!PRIMITIVE_TYPE_BIT_SET.isInSet(((CompositeElement)type).firstChild.getElementType())) {
          ParseUtil.restorePosition(lexer,pos);
          return parsePostfixExpression(lexer);
        }
      }
      final CompositeElement expr=parseUnaryExpression(lexer);
      if (expr == null) {
        ParseUtil.restorePosition(lexer,pos);
        return parsePostfixExpression(lexer);
      }
      CompositeElement element=Factory.createCompositeElement(TYPE_CAST_EXPRESSION);
      TreeUtil.addChildren(element,lparenth);
      TreeUtil.addChildren(element,type);
      TreeUtil.addChildren(element,rparenth);
      TreeUtil.addChildren(element,expr);
      return element;
    }
  }
 else {
    return parsePostfixExpression(lexer);
  }
}
