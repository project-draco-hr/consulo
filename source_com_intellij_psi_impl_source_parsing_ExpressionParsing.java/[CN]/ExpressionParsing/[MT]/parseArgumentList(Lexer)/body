{
  if (lexer.getTokenType() != LPARENTH) {
    return ASTFactory.composite(EXPRESSION_LIST);
  }
  LOG.assertTrue(lexer.getTokenType() == LPARENTH);
  CompositeElement element=ASTFactory.composite(EXPRESSION_LIST);
  TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
  lexer.advance();
  boolean first=true;
  while (true) {
    if (first && (lexer.getTokenType() == RPARENTH || lexer.getTokenType() == RBRACE || lexer.getTokenType() == RBRACKET))     break;
    if (!first && isArgListFinished(lexer))     break;
    boolean errored=false;
    if (!first) {
      if (lexer.getTokenType() == COMMA) {
        TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
      }
 else {
        errored=true;
        TreeUtil.addChildren(element,Factory.createErrorElement(JavaErrorMessages.message("expected.comma.or.rparen")));
        TreeUtil.addChildren(element,ASTFactory.composite(EMPTY_EXPRESSION));
      }
    }
    first=false;
    TreeElement arg=parseExpression(lexer);
    if (arg == null) {
      if (!errored) {
        TreeUtil.addChildren(element,Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
        TreeUtil.addChildren(element,ASTFactory.composite(EMPTY_EXPRESSION));
      }
      if (isArgListFinished(lexer))       break;
      if (lexer.getTokenType() != COMMA) {
        TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
      }
    }
 else {
      TreeUtil.addChildren(element,arg);
    }
  }
  if (lexer.getTokenType() == RPARENTH) {
    TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
 else {
    TreeUtil.addChildren(element,Factory.createErrorElement(JavaErrorMessages.message("expected.rparen")));
    element.putUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY,"");
  }
  return element;
}
