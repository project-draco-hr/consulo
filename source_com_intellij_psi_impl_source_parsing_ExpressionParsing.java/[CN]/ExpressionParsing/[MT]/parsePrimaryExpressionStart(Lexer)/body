{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == JavaTokenType.TRUE_KEYWORD || tokenType == JavaTokenType.FALSE_KEYWORD || tokenType == JavaTokenType.NULL_KEYWORD || tokenType == JavaTokenType.INTEGER_LITERAL || tokenType == JavaTokenType.LONG_LITERAL || tokenType == JavaTokenType.FLOAT_LITERAL || tokenType == JavaTokenType.DOUBLE_LITERAL || tokenType == JavaTokenType.CHARACTER_LITERAL || tokenType == JavaTokenType.STRING_LITERAL) {
    CompositeElement element=ASTFactory.composite(JavaElementType.LITERAL_EXPRESSION);
    element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    return element;
  }
 else   if (tokenType == JavaTokenType.LPARENTH) {
    CompositeElement element=ASTFactory.composite(JavaElementType.PARENTH_EXPRESSION);
    element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    TreeElement expression=parseExpression(lexer);
    if (expression == null) {
      element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
    }
 else {
      element.rawAddChildren(expression);
    }
    if (lexer.getTokenType() != JavaTokenType.RPARENTH) {
      if (expression != null) {
        element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rparen")));
      }
    }
 else {
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
    return element;
  }
 else   if (tokenType == JavaTokenType.LBRACE) {
    return parseArrayInitializerExpression(lexer);
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER) {
    CompositeElement element=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
    element.rawAddChildren(ASTFactory.composite(JavaElementType.REFERENCE_PARAMETER_LIST));
    element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    return element;
  }
 else   if (tokenType == JavaTokenType.THIS_KEYWORD) {
    TreeElement thisKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    CompositeElement element;
    if (lexer.getTokenType() != JavaTokenType.LPARENTH) {
      element=ASTFactory.composite(JavaElementType.THIS_EXPRESSION);
    }
 else {
      element=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
    }
    element.rawAddChildren(ASTFactory.composite(JavaElementType.REFERENCE_PARAMETER_LIST));
    element.rawAddChildren(thisKeyword);
    return element;
  }
 else   if (tokenType == JavaTokenType.SUPER_KEYWORD) {
    TreeElement superKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    CompositeElement element;
    if (lexer.getTokenType() != JavaTokenType.LPARENTH) {
      element=ASTFactory.composite(JavaElementType.SUPER_EXPRESSION);
    }
 else {
      element=ASTFactory.composite(JavaElementType.REFERENCE_EXPRESSION);
    }
    element.rawAddChildren(ASTFactory.composite(JavaElementType.REFERENCE_PARAMETER_LIST));
    element.rawAddChildren(superKeyword);
    return element;
  }
 else   if (tokenType == JavaTokenType.NEW_KEYWORD) {
    return parseNewExpression(lexer,null,null);
  }
 else {
    if (tokenType != null && ElementType.PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
      return parseClassObjectAccessExpression(lexer);
    }
    return null;
  }
}
