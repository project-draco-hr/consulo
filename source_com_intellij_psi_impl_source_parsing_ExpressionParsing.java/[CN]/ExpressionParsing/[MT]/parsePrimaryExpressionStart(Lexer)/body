{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == TRUE_KEYWORD || tokenType == FALSE_KEYWORD || tokenType == NULL_KEYWORD || tokenType == INTEGER_LITERAL || tokenType == LONG_LITERAL || tokenType == FLOAT_LITERAL || tokenType == DOUBLE_LITERAL || tokenType == CHARACTER_LITERAL || tokenType == STRING_LITERAL) {
    CompositeElement element=ASTFactory.composite(LITERAL_EXPRESSION);
    TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    return element;
  }
 else   if (tokenType == LPARENTH) {
    CompositeElement element=ASTFactory.composite(PARENTH_EXPRESSION);
    TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    TreeElement expression=parseExpression(lexer);
    if (expression == null) {
      TreeUtil.addChildren(element,Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
    }
 else {
      TreeUtil.addChildren(element,expression);
    }
    if (lexer.getTokenType() != RPARENTH) {
      if (expression != null) {
        TreeUtil.addChildren(element,Factory.createErrorElement(JavaErrorMessages.message("expected.rparen")));
      }
    }
 else {
      TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
    return element;
  }
 else   if (tokenType == LBRACE) {
    return parseArrayInitializerExpression(lexer);
  }
 else   if (tokenType == IDENTIFIER) {
    CompositeElement element=ASTFactory.composite(REFERENCE_EXPRESSION);
    TreeUtil.addChildren(element,ASTFactory.composite(REFERENCE_PARAMETER_LIST));
    TreeUtil.addChildren(element,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    return element;
  }
 else   if (tokenType == THIS_KEYWORD) {
    TreeElement thisKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    CompositeElement element;
    if (lexer.getTokenType() != LPARENTH) {
      element=ASTFactory.composite(THIS_EXPRESSION);
    }
 else {
      element=ASTFactory.composite(REFERENCE_EXPRESSION);
    }
    TreeUtil.addChildren(element,ASTFactory.composite(REFERENCE_PARAMETER_LIST));
    TreeUtil.addChildren(element,thisKeyword);
    return element;
  }
 else   if (tokenType == SUPER_KEYWORD) {
    TreeElement superKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    CompositeElement element;
    if (lexer.getTokenType() != LPARENTH) {
      element=ASTFactory.composite(SUPER_EXPRESSION);
    }
 else {
      element=ASTFactory.composite(REFERENCE_EXPRESSION);
    }
    TreeUtil.addChildren(element,ASTFactory.composite(REFERENCE_PARAMETER_LIST));
    TreeUtil.addChildren(element,superKeyword);
    return element;
  }
 else   if (tokenType == NEW_KEYWORD) {
    return parseNewExpression(lexer,null,null);
  }
 else {
    if (tokenType != null && PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
      return parseClassObjectAccessExpression(lexer);
    }
    return null;
  }
}
