{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == JavaTokenType.PLUS || tokenType == JavaTokenType.MINUS || tokenType == JavaTokenType.PLUSPLUS || tokenType == JavaTokenType.MINUSMINUS || tokenType == JavaTokenType.TILDE || tokenType == JavaTokenType.EXCL) {
    CompositeElement element=ASTFactory.composite(JavaElementType.PREFIX_EXPRESSION);
    element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    CompositeElement element1=parseUnaryExpression(lexer);
    if (element1 == null) {
      element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
      return element;
    }
    element.rawAddChildren(element1);
    return element;
  }
 else   if (tokenType == JavaTokenType.LPARENTH) {
    final LexerPosition pos=lexer.getCurrentPosition();
    TreeElement lparenth=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    TreeElement type=parseType(lexer);
    if (type == null || lexer.getTokenType() != JavaTokenType.RPARENTH) {
      lexer.restore(pos);
      return parsePostfixExpression(lexer);
    }
    final TreeElement rparenth=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    if (lexer.getTokenType() == JavaTokenType.PLUS || lexer.getTokenType() == JavaTokenType.MINUS || lexer.getTokenType() == JavaTokenType.PLUSPLUS || lexer.getTokenType() == JavaTokenType.MINUSMINUS) {
      if (!ElementType.PRIMITIVE_TYPE_BIT_SET.contains(type.getFirstChildNode().getElementType())) {
        lexer.restore(pos);
        return parsePostfixExpression(lexer);
      }
    }
    final CompositeElement expr=parseUnaryExpression(lexer);
    if (expr == null) {
      final TreeElement lastNode=TreeUtil.findLastLeaf(type);
      if (lastNode.getElementType() != JavaTokenType.GT) {
        lexer.restore(pos);
        return parsePostfixExpression(lexer);
      }
    }
    CompositeElement element=ASTFactory.composite(JavaElementType.TYPE_CAST_EXPRESSION);
    element.rawAddChildren(lparenth);
    element.rawAddChildren(type);
    element.rawAddChildren(rparenth);
    if (expr != null) {
      element.rawAddChildren(expr);
    }
 else {
      element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.expression")));
    }
    return element;
  }
 else {
    return parsePostfixExpression(lexer);
  }
}
