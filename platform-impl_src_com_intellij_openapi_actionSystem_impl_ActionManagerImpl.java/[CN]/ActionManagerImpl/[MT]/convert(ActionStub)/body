{
  LOG.assertTrue(myAction2Id.contains(stub));
  myAction2Id.remove(stub);
  LOG.assertTrue(myId2Action.contains(stub.getId()));
  AnAction action=(AnAction)myId2Action.remove(stub.getId());
  LOG.assertTrue(action != null);
  LOG.assertTrue(action.equals(stub));
  Object obj;
  String className=stub.getClassName();
  try {
    Constructor<?> constructor=Class.forName(className,true,stub.getLoader()).getDeclaredConstructor();
    constructor.setAccessible(true);
    obj=constructor.newInstance();
  }
 catch (  ClassNotFoundException e) {
    PluginId pluginId=stub.getPluginId();
    if (pluginId != null) {
      throw new PluginException("class with name \"" + className + "\" not found",e,pluginId);
    }
 else {
      throw new IllegalStateException("class with name \"" + className + "\" not found");
    }
  }
catch (  UnsupportedClassVersionError e) {
    PluginId pluginId=stub.getPluginId();
    if (pluginId != null) {
      throw new PluginException(e,pluginId);
    }
 else {
      throw new IllegalStateException(e);
    }
  }
catch (  Exception e) {
    PluginId pluginId=stub.getPluginId();
    if (pluginId != null) {
      throw new PluginException("cannot create class \"" + className + "\"",e,pluginId);
    }
 else {
      throw new IllegalStateException("cannot create class \"" + className + "\"",e);
    }
  }
  if (!(obj instanceof AnAction)) {
    throw new IllegalStateException("class with name \"" + className + "\" should be instance of "+ AnAction.class.getName());
  }
  AnAction anAction=(AnAction)obj;
  stub.initAction(anAction);
  if (StringUtil.isNotEmpty(stub.getText())) {
    anAction.getTemplatePresentation().setText(stub.getText());
  }
  String iconPath=stub.getIconPath();
  if (iconPath != null) {
    setIconFromClass(anAction.getClass(),anAction.getClass().getClassLoader(),iconPath,stub.getClassName(),anAction.getTemplatePresentation(),stub.getPluginId());
  }
  myId2Action.put(stub.getId(),obj);
  myAction2Id.put(obj,stub.getId());
  return anAction;
}
