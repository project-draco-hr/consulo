{
  final Language myLanguage=myNode.getPsi().getLanguage();
  final Language childLanguage=child.getPsi().getLanguage();
  if (useMyFormatter(myLanguage,childLanguage)) {
    Block jspScriptletNode=buildBlockForScriptletNode(child,indent);
    if (jspScriptletNode != null) {
      result.add(jspScriptletNode);
      return child;
    }
    if (myXmlFormattingPolicy.processJsp() && (isXmlTag(myNode) || myNode.getElementType() == ElementType.HTML_DOCUMENT || myNode.getPsi() instanceof PsiFile) && (child.getElementType() == ElementType.XML_DATA_CHARACTERS || child.getElementType() == ElementType.JSP_XML_TEXT || child.getPsi() instanceof JspText)) {
      PsiElement tag=JspTextBlock.findXmlElementAt(child,child.getStartOffset());
      Indent childIndent=indent;
      if (tag instanceof XmlTag && tag.getTextRange().getEndOffset() <= myNode.getTextRange().getEndOffset()) {
        if (myNode.getElementType() == ElementType.HTML_DOCUMENT && tag.getParent() instanceof XmlTag && myXmlFormattingPolicy.indentChildrenOf((XmlTag)tag.getParent())) {
          childIndent=Indent.createNormalIndent();
        }
        result.add(new XmlTagBlock(tag.getNode(),null,null,myXmlFormattingPolicy,childIndent));
        ASTNode currentChild=findChildAfter(child,tag.getTextRange().getEndOffset());
        while (currentChild != null && currentChild.getTextRange().getEndOffset() > tag.getTextRange().getEndOffset()) {
          PsiElement psiElement=JspTextBlock.findXmlElementAt(currentChild,tag.getTextRange().getEndOffset());
          if (psiElement != null) {
            if (psiElement instanceof XmlTag && psiElement.getTextRange().getStartOffset() >= currentChild.getTextRange().getStartOffset() && psiElement.getTextRange().getEndOffset() <= myNode.getTextRange().getEndOffset()) {
              result.add(new XmlTagBlock(psiElement.getNode(),null,null,myXmlFormattingPolicy,childIndent));
              currentChild=findChildAfter(currentChild,psiElement.getTextRange().getEndOffset());
              tag=psiElement;
            }
 else {
              result.add(new XmlBlock(currentChild,wrap,alignment,myXmlFormattingPolicy,indent,new TextRange(tag.getTextRange().getEndOffset(),currentChild.getTextRange().getEndOffset())));
              return currentChild;
            }
          }
        }
        return currentChild;
      }
    }
    if (myXmlFormattingPolicy.processJsp() && (child.getElementType() == ElementType.JSP_XML_TEXT || child.getPsi() instanceof JspText)) {
      final Pair<PsiElement,Language> root=JspTextBlock.findPsiRootAt(child);
      if (root != null) {
        return createJspTextNode(result,child,indent);
      }
    }
    if (isXmlTag(child) || child.getElementType() == ElementType.XML_TAG) {
      result.add(new XmlTagBlock(child,wrap,alignment,myXmlFormattingPolicy,indent != null ? indent : Indent.getNoneIndent()));
      return child;
    }
 else     if (child.getElementType() == ElementType.JSP_SCRIPTLET_END) {
      result.add(new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,Indent.getNoneIndent(),null));
      return child;
    }
 else {
      result.add(new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent,null));
      return child;
    }
  }
 else {
    final FormattingModelBuilder builder=childLanguage.getFormattingModelBuilder();
    LOG.assertTrue(builder != null);
    final FormattingModel childModel=builder.createModel(child.getPsi(),myXmlFormattingPolicy.getSettings());
    result.add(new AnotherLanguageBlockWrapper(child,myXmlFormattingPolicy,childModel.getRootBlock()));
    return child;
  }
}
