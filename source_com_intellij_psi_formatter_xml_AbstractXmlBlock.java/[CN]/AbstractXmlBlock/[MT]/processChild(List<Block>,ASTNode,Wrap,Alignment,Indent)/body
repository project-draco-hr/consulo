{
  final Language myLanguage=myNode.getPsi().getLanguage();
  final Language childLanguage=child.getPsi().getLanguage();
  if (useMyFormatter(myLanguage,childLanguage)) {
    Block jspScriptletNode=buildBlockForScriptletNode(child,indent);
    if (jspScriptletNode != null) {
      result.add(jspScriptletNode);
      return child;
    }
    if (myXmlFormattingPolicy.processJsp() && (child.getElementType() == ElementType.JSP_XML_TEXT || child.getPsi() instanceof JspText)) {
      final Pair<PsiElement,Language> root=JspTextBlock.findPsiRootAt(child);
      if (root != null) {
        return createJspTextNode(result,child,indent);
      }
    }
    if (child.getElementType() == getTagType() || child.getElementType() == ElementType.XML_TAG) {
      result.add(new XmlTagBlock(child,wrap,alignment,myXmlFormattingPolicy,indent != null ? indent : getFormatter().getNoneIndent()));
      return child;
    }
 else     if (child.getElementType() == ElementType.JSP_SCRIPTLET_END) {
      result.add(new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,getFormatter().getNoneIndent()));
      return child;
    }
 else {
      result.add(new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent));
      return child;
    }
  }
 else {
    final FormattingModelBuilder builder=childLanguage.getFormattingModelBuilder();
    LOG.assertTrue(builder != null);
    final FormattingModel childModel=builder.createModel(child.getPsi(),myXmlFormattingPolicy.getSettings());
    result.add(new AnotherLanguageBlockWrapper(child,myXmlFormattingPolicy,childModel.getRootBlock()));
    return child;
  }
}
