{
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)element;
  final PsiJavaToken sign=assignmentExpression.getOperationSign();
  final PsiExpression lhs=assignmentExpression.getLExpression();
  final PsiExpression rhs=assignmentExpression.getRExpression();
  final String operand=sign.getText();
  final String newOperand=operand.substring(0,operand.length() - 1);
  final String lhsText=lhs.getText();
  final String rhsText;
  if (rhs == null) {
    rhsText="";
  }
 else {
    rhsText=rhs.getText();
  }
  if (rhs instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)rhs;
    final PsiJavaToken javaToken=binaryExpression.getOperationSign();
    final int precedence1=ParenthesesUtils.getPrecedenceForBinaryOperator(javaToken);
    final int precedence2=ParenthesesUtils.getPrecedenceForBinaryOperator(newOperand);
    if (precedence2 > precedence1) {
      final String expString=lhsText + '=' + lhsText+ newOperand+ '('+ rhsText+ ')';
      replaceExpression(expString,assignmentExpression);
    }
  }
  final String expString=lhsText + '=' + lhsText+ newOperand+ rhsText;
  replaceExpression(expString,assignmentExpression);
}
