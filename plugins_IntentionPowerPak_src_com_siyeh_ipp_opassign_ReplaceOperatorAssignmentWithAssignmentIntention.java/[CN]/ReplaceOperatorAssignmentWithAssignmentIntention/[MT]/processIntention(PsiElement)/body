{
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)element;
  final PsiJavaToken sign=assignmentExpression.getOperationSign();
  final PsiExpression lhs=assignmentExpression.getLExpression();
  final PsiExpression rhs=assignmentExpression.getRExpression();
  final String operator=sign.getText();
  final String newOperator=operator.substring(0,operator.length() - 1);
  final String lhsText=lhs.getText();
  final String rhsText=(rhs == null) ? "" : rhs.getText();
  final boolean parentheses;
  if (rhs instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)rhs;
    final int precedence1=ParenthesesUtils.getPrecedenceForOperator(binaryExpression.getOperationTokenType());
    final IElementType signTokenType=sign.getTokenType();
    final IElementType newOperatorToken=tokenMap.get(signTokenType);
    final int precedence2=ParenthesesUtils.getPrecedenceForOperator(newOperatorToken);
    parentheses=precedence1 >= precedence2 || !ParenthesesUtils.isCommutativeOperator(newOperatorToken);
  }
 else {
    parentheses=false;
  }
  final String cast=getCastString(lhs,rhs);
  final StringBuilder newExpression=new StringBuilder(lhsText);
  newExpression.append('=').append(cast);
  if (!cast.isEmpty()) {
    newExpression.append('(');
  }
  newExpression.append(lhsText).append(newOperator);
  if (parentheses) {
    newExpression.append('(').append(rhsText).append(')');
  }
 else {
    newExpression.append(rhsText);
  }
  if (!cast.isEmpty()) {
    newExpression.append(')');
  }
  replaceExpression(newExpression.toString(),assignmentExpression);
}
