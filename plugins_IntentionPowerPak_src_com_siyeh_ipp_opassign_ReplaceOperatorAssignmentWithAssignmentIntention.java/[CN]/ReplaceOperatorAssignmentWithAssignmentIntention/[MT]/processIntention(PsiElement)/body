{
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)element;
  final PsiJavaToken sign=assignmentExpression.getOperationSign();
  final PsiExpression lhs=assignmentExpression.getLExpression();
  final PsiExpression rhs=assignmentExpression.getRExpression();
  final String operator=sign.getText();
  final String newOperator=operator.substring(0,operator.length() - 1);
  final String lhsText=lhs.getText();
  final String rhsText;
  if (rhs == null) {
    rhsText="";
  }
 else {
    rhsText=rhs.getText();
  }
  if (rhs instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)rhs;
    final PsiJavaToken javaToken=binaryExpression.getOperationSign();
    final int precedence1=ParenthesesUtils.getPrecedenceForBinaryOperator(javaToken);
    final IElementType signTokenType=sign.getTokenType();
    final IElementType newOperatorToken=tokenMap.get(signTokenType);
    final int precedence2=ParenthesesUtils.getPrecedenceForBinaryOperator(newOperatorToken);
    if (precedence1 > precedence2 || !ParenthesesUtils.isCommutativeBinaryOperator(newOperatorToken)) {
      final String expString;
      if (needsCast(rhs)) {
        expString=lhsText + "=(int)" + lhsText+ newOperator+ '('+ rhsText+ "))";
      }
 else {
        expString=lhsText + '=' + lhsText+ newOperator+ '('+ rhsText+ ')';
      }
      replaceExpression(expString,assignmentExpression);
      return;
    }
  }
  final String expString;
  if (needsCast(rhs)) {
    expString=lhsText + "=(int)(" + lhsText+ newOperator+ rhsText+ ')';
  }
 else {
    expString=lhsText + '=' + lhsText+ newOperator+ rhsText;
  }
  replaceExpression(expString,assignmentExpression);
}
