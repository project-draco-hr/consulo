{
  ISVNAuthenticationStorageOptions delegatingOptions=new ISVNAuthenticationStorageOptions(){
    public boolean isNonInteractive() throws SVNException {
      return getAuthenticationStorageOptions().isNonInteractive();
    }
    public ISVNAuthStoreHandler getAuthStoreHandler() throws SVNException {
      return getAuthenticationStorageOptions().getAuthStoreHandler();
    }
    @Override public ISVNGnomeKeyringPasswordProvider getGnomeKeyringPasswordProvider(){
      return getAuthenticationStorageOptions().getGnomeKeyringPasswordProvider();
    }
    @Override public boolean isSSLPassphrasePromptSupported(){
      return false;
    }
  }
;
  ensureListenerCreated();
  myDelegate=new DefaultSVNPersistentAuthenticationProvider(authDir,userName,delegatingOptions,getDefaultOptions(),getHostOptionsProvider()){
    @Override protected IPasswordStorage[] createPasswordStorages(    DefaultSVNOptions options){
      final IPasswordStorage[] passwordStorages=super.createPasswordStorages(options);
      final IPasswordStorage[] proxied=new IPasswordStorage[passwordStorages.length];
      for (int i=0; i < passwordStorages.length; i++) {
        final IPasswordStorage storage=passwordStorages[i];
        proxied[i]=new ProxyPasswordStorageForDebug(storage,myListener);
      }
      return proxied;
    }
  }
;
  myAuthDir=authDir;
}
