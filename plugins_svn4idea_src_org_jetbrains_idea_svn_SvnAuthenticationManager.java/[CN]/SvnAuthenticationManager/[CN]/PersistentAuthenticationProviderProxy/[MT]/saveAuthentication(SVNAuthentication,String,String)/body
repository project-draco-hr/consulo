{
  try {
    ((IPersistentAuthenticationProvider)myDelegate).saveAuthentication(auth,kind,realm);
  }
 catch (  final SVNException e) {
    if (myProject == null)     return;
    try {
      GuiUtils.runOrInvokeAndWait(new Runnable(){
        public void run(){
          final ToolWindowManager manager=ToolWindowManager.getInstance(myProject);
          final boolean haveWindow=(!myProject.isDefault()) && (manager.getToolWindow(ChangesViewContentManager.TOOLWINDOW_ID) != null);
          final String message="<b>Problem when storing Subversion credentials:</b>&nbsp;" + e.getMessage();
          if (haveWindow) {
            manager.notifyByBalloon(ChangesViewContentManager.TOOLWINDOW_ID,MessageType.ERROR,message);
          }
 else {
            final JFrame frame=WindowManager.getInstance().getFrame(myProject.isDefault() ? null : myProject);
            if (frame == null)             return;
            final JComponent component=frame.getRootPane();
            if (component == null)             return;
            final Rectangle rect=component.getVisibleRect();
            final Point p=new Point(rect.x + 30,rect.y + rect.height - 10);
            final RelativePoint point=new RelativePoint(component,p);
            JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,MessageType.ERROR.getDefaultIcon(),MessageType.ERROR.getPopupBackground(),null).createBalloon().show(point,Balloon.Position.above);
          }
        }
      }
);
    }
 catch (    InvocationTargetException e1) {
    }
catch (    InterruptedException e1) {
    }
  }
}
