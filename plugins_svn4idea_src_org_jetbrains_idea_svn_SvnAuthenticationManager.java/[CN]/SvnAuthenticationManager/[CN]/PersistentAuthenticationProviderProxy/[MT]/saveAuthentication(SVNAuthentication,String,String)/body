{
  final Boolean fromInteractive=ourJustEntered.get();
  ourJustEntered.set(null);
  if (!Boolean.TRUE.equals(fromInteractive)) {
    return;
  }
  final String actualKind=auth.getKind();
  final Consumer<Boolean> actualSave=new Consumer<Boolean>(){
    @Override public void consume(    final Boolean withCredentials){
      File dir=new File(myAuthDir,actualKind);
      String fileName=SVNFileUtil.computeChecksum(realm);
      File authFile=new File(dir,fileName);
      myListener.getMulticaster().actualSaveWillBeTried(ProviderType.persistent,auth.getURL(),realm,actualKind,Boolean.TRUE.equals(withCredentials));
      try {
        ((ISVNPersistentAuthenticationProvider)myDelegate).saveAuthentication(auth,actualKind,realm);
      }
 catch (      SVNException e) {
        if (myProject != null) {
          ApplicationManager.getApplication().invokeLater(new VcsBalloonProblemNotifier(myProject,"<b>Problem when storing Subversion credentials:</b>&nbsp;" + e.getMessage(),MessageType.ERROR));
        }
      }
 finally {
        setWriteable(authFile);
      }
    }
  }
;
  if (USERNAME.equals(actualKind)) {
    actualSave.consume(true);
    return;
  }
  if (!auth.isStorageAllowed())   return;
  saveCredentialsIfAllowed(auth,actualKind,realm,actualSave);
}
