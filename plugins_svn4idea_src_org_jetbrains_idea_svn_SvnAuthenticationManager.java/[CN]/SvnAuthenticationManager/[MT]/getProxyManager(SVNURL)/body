{
  SSLExceptionsHelper.addInfo("Accessing URL: " + url.toString());
  CommonProxy.getInstance().noProxy(url.getProtocol(),url.getHost(),url.getPort());
  ourThreadLocalProvider.set(myProvider);
  String host=url.getHost();
  String proxyHost=getServersPropertyIdea(host,"http-proxy-host");
  if ((proxyHost == null) || "".equals(proxyHost.trim())) {
    if (getConfig().isIsUseDefaultProxy()) {
      try {
        final List<Proxy> proxies=CommonProxy.getInstance().select(new URI(url.toString()));
        if (proxies != null && !proxies.isEmpty()) {
          for (          Proxy proxy : proxies) {
            if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) {
              final SocketAddress address=proxy.address();
              if (address instanceof InetSocketAddress) {
                return new MyPromptingProxyManager(((InetSocketAddress)address).getHostName(),"" + ((InetSocketAddress)address).getPort(),url.getProtocol());
              }
            }
          }
        }
      }
 catch (      URISyntaxException e) {
        LOG.info(e);
      }
    }
    return null;
  }
  String proxyExceptions=getServersPropertyIdea(host,"http-proxy-exceptions");
  String proxyExceptionsSeparator=",";
  if (proxyExceptions == null) {
    proxyExceptions=System.getProperty("http.nonProxyHosts");
    proxyExceptionsSeparator="|";
  }
  if (proxyExceptions != null) {
    for (StringTokenizer exceptions=new StringTokenizer(proxyExceptions,proxyExceptionsSeparator); exceptions.hasMoreTokens(); ) {
      String exception=exceptions.nextToken().trim();
      if (DefaultSVNOptions.matches(exception,host)) {
        return null;
      }
    }
  }
  String proxyPort=getServersPropertyIdea(host,"http-proxy-port");
  String proxyUser=getServersPropertyIdea(host,"http-proxy-username");
  String proxyPassword=getServersPropertyIdea(host,"http-proxy-password");
  return new MySimpleProxyManager(proxyHost,proxyPort,proxyUser,proxyPassword);
}
