{
  final SVNURL url=auth.getURL();
  final String storeCredentials=getConfigFile().getPropertyValue("auth","store-auth-creds");
  if ((Boolean.FALSE.equals(isAuthStorageEnabledMy(url))) || (!isTurned(storeCredentials))) {
    myInteraction.warnOnAuthStorageDisabled(url);
    return;
  }
  final boolean passwordStorageEnabled=isStorePasswords(url);
  if ((!ISVNAuthenticationManager.SSL.equals(kind)) && (!passwordStorageEnabled)) {
    myInteraction.warnOnPasswordStorageDisabled(url);
    return;
  }
  if (ISVNAuthenticationManager.SSL.equals(kind) && (!isStoreSSLClientCertificatePassphrases(url))) {
    myInteraction.warnOnSSLPassphraseStorageDisabled(url);
    return;
  }
  if (!(SystemInfo.isWindows && SVNJNAUtil.isWinCryptEnabled())) {
    try {
      if (ISVNAuthenticationManager.SSL.equals(kind)) {
        if (!isStorePlainTextPassphrases(realm,auth)) {
          promptAndSaveWhenWeLackEncryption(saveRunnable,new Getter<Boolean>(){
            @Override public Boolean get(){
              return myInteraction.promptForSSLPlaintextPassphraseSaving(url,realm,((SVNSSLAuthentication)auth).getCertificateFile());
            }
          }
);
          return;
        }
      }
 else {
        if (!isStorePlainTextPasswords(realm,auth)) {
          promptAndSaveWhenWeLackEncryption(saveRunnable,new Getter<Boolean>(){
            @Override public Boolean get(){
              return myInteraction.promptForPlaintextPasswordSaving(url,realm);
            }
          }
);
          return;
        }
      }
    }
 catch (    SVNException e) {
      LOG.info(e);
      return;
    }
  }
  saveRunnable.run();
}
