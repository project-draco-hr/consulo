{
  final SVNURL url=auth.getURL();
  final IdeaSVNHostOptionsProvider hostOptionsProvider=getHostOptionsProvider();
  final ISVNHostOptions hostOptions=hostOptionsProvider.getHostOptions(url);
  if (!hostOptions.isAuthStorageEnabled()) {
    myInteraction.warnOnAuthStorageDisabled(url);
    return;
  }
  boolean passwordWillBeSaved=true;
  if ((!ISVNAuthenticationManager.SSL.equals(kind)) && (!hostOptions.isStorePasswords())) {
    myInteraction.warnOnPasswordStorageDisabled(url);
    passwordWillBeSaved=false;
  }
  if (ISVNAuthenticationManager.SSL.equals(kind) && (!hostOptionsProvider.getHostOptions(url).isStoreSSLClientCertificatePassphrases())) {
    myInteraction.warnOnSSLPassphraseStorageDisabled(url);
    passwordWillBeSaved=false;
  }
  if (passwordWillBeSaved && (!((SystemInfo.isWindows && SVNJNAUtil.isWinCryptEnabled()) || (SystemInfo.isMacOSLeopard || SystemInfo.isMacOSSnowLeopard || isLion()) && SVNJNAUtil.isMacOsKeychainEnabled() && myMacCryptIsOk))) {
    try {
      if (ISVNAuthenticationManager.SSL.equals(kind)) {
        if (!hostOptionsProvider.getHostOptions(auth.getURL()).isStorePlainTextPassphrases(realm,auth)) {
          promptAndSaveWhenWeLackEncryption(saveRunnable,new Getter<Boolean>(){
            @Override public Boolean get(){
              return myInteraction.promptForSSLPlaintextPassphraseSaving(url,realm,((SVNSSLAuthentication)auth).getCertificateFile());
            }
          }
);
          return;
        }
      }
 else {
        if (!hostOptionsProvider.getHostOptions(auth.getURL()).isStorePlainTextPasswords(realm,auth)) {
          promptAndSaveWhenWeLackEncryption(saveRunnable,new Getter<Boolean>(){
            @Override public Boolean get(){
              return myInteraction.promptForPlaintextPasswordSaving(url,realm);
            }
          }
);
          return;
        }
      }
    }
 catch (    SVNException e) {
      LOG.info(e);
      return;
    }
  }
  saveRunnable.consume(passwordWillBeSaved);
}
