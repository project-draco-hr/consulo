{
  final SVNURL url=auth.getURL();
  final String storeCredentials=getConfigFile().getPropertyValue("auth","store-auth-creds");
  if ((Boolean.FALSE.equals(isAuthStorageEnabledMy(url))) || (!isTurned(storeCredentials))) {
    ChangesViewBalloonProblemNotifier.showMe(myProject,"Cannot store credentials: forbidden by \"store-auth-creds=no\"",MessageType.ERROR);
    return false;
  }
  final boolean passwordStorageEnabled=isStorePasswords(url);
  if ((!ISVNAuthenticationManager.SSL.equals(kind)) && (!passwordStorageEnabled)) {
    ChangesViewBalloonProblemNotifier.showMe(myProject,"Cannot store password: forbidden by \"store-passwords=no\"",MessageType.ERROR);
    return false;
  }
  if (ISVNAuthenticationManager.SSL.equals(kind) && (!isStoreSSLClientCertificatePassphrases(url))) {
    ChangesViewBalloonProblemNotifier.showMe(myProject,"Cannot store passphrase: forbidden by \"store-ssl-client-cert-pp=no\"",MessageType.ERROR);
    return false;
  }
  if (!(SystemInfo.isWindows && SVNJNAUtil.isWinCryptEnabled())) {
    if (ISVNAuthenticationManager.SSL.equals(kind)) {
      try {
        if (!isStorePlainTextPassphrases(realm,auth)) {
          return askToStoreUnencrypted("Store the passphrase in plaintext?",String.format("Your passphrase for client certificate:\n%s\ncan only be stored to disk unencrypted. Would you like to store it in plaintext?",((SVNSSLAuthentication)auth).getCertificateFile().getPath()));
        }
      }
 catch (      SVNException e) {
        LOG.error(e);
      }
    }
 else {
      try {
        if (!isStorePlainTextPasswords(realm,auth)) {
          return askToStoreUnencrypted("Store the password in plaintext?",String.format("Your password for authentication realm:\n%s\ncan only be stored to disk unencrypted. Would you like to store it in plaintext?",realm));
        }
      }
 catch (      SVNException e) {
        LOG.error(e);
      }
    }
  }
  return true;
}
