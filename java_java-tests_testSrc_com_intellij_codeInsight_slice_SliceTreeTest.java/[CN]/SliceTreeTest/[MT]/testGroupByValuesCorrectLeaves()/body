{
  SliceTreeStructure treeStructure=configureTree("DuplicateLeaves");
  SliceRootNode root=(SliceRootNode)treeStructure.getRootElement();
  Map<SliceNode,Collection<PsiElement>> map=SliceLeafAnalyzer.createMap();
  Collection<PsiElement> leaves=SliceLeafAnalyzer.calcLeafExpressions(root,treeStructure,map);
  assertNotNull(leaves);
  assertEquals(1,leaves.size());
  PsiElement leaf=leaves.iterator().next();
  assertTrue(leaf instanceof PsiLiteralExpression);
  assertEquals("\"oo\"",leaf.getText());
  SliceRootNode newRoot=SliceLeafAnalyzer.createTreeGroupedByValues(leaves,root,map);
  Collection<? extends AbstractTreeNode> children=newRoot.getChildren();
  assertEquals(1,children.size());
  SliceNode child=(SliceNode)children.iterator().next();
  assertTrue(child instanceof SliceLeafValueRootNode);
  children=child.getChildren();
  assertEquals(1,children.size());
  child=(SliceNode)children.iterator().next();
  assertTrue(child.getValue().getElement() instanceof PsiField);
  children=child.getChildren();
  assertEquals(1,children.size());
  child=(SliceNode)children.iterator().next();
  assertTrue(child.getValue().getElement() instanceof PsiReferenceExpression);
  children=child.getChildren();
  assertEquals(1,children.size());
  child=(SliceNode)children.iterator().next();
  assertTrue(child.getValue().getElement() instanceof PsiReferenceExpression);
  children=child.getChildren();
  assertEquals(1,children.size());
  child=(SliceNode)children.iterator().next();
  assertTrue(child.getValue().getElement() instanceof PsiLiteralExpression);
  assertEquals(child.getValue().getElement(),leaf);
}
