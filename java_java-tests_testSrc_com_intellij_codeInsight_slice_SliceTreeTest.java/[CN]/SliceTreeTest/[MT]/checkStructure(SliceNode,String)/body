{
  List<SliceNode> actualNodes=new ArrayList<SliceNode>((Collection<? extends SliceNode>)root.getChildren());
  Collections.sort(actualNodes,SliceTreeBuilder.SLICE_NODE_COMPARATOR);
  Object[] actualStrings=ContainerUtil.map2Array(actualNodes,new Function<SliceNode,Object>(){
    @Override public Object fun(    SliceNode node){
      return node.toString();
    }
  }
);
  String[] childrenExpected=dataExpected.length() == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : dataExpected.split("\n");
  String curChildren="";
  String curNode=null;
  int iactual=0;
  for (int iexp=0; iexp <= childrenExpected.length; iexp++) {
    String e=iexp == childrenExpected.length ? null : childrenExpected[iexp];
    boolean isTopLevel=e == null || e.charAt(0) != ' ';
    if (isTopLevel) {
      if (curNode != null) {
        assertTrue(iactual < actualStrings.length);
        Object actual=actualStrings[iactual];
        assertEquals(curNode,actual);
        checkStructure(actualNodes.get(iactual),curChildren);
        iactual++;
      }
      curNode=e;
      curChildren="";
    }
 else {
      curChildren+=StringUtil.trimStart(e,"  ") + "\n";
    }
  }
  assertEquals(actualNodes.size(),iactual);
}
