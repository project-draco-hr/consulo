{
  configureByFile("/codeInsight/slice/backward/" + name + ".java");
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
  PsiElement element=new SliceHandler(true).getExpressionAtCaret(getEditor(),getFile());
  assertNotNull(element);
  Collection<HighlightInfo> errors=DaemonAnalyzerTestCase.filter(doHighlighting(),HighlightSeverity.ERROR);
  assertEmpty(errors);
  SliceAnalysisParams params=new SliceAnalysisParams();
  params.scope=new AnalysisScope(getProject());
  params.dataFlowToThis=true;
  SliceUsage usage=SliceManager.createRootUsage(element,params);
  SlicePanel panel=new SlicePanel(getProject(),true,new SliceRootNode(getProject(),new DuplicateMap(),usage),false,ToolWindowHeadlessManagerImpl.HEADLESS_WINDOW){
    @Override protected void close(){
    }
    @Override public boolean isAutoScroll(){
      return false;
    }
    @Override public void setAutoScroll(    boolean autoScroll){
    }
    @Override public boolean isPreview(){
      return false;
    }
    @Override public void setPreview(    boolean preview){
    }
  }
;
  Disposer.register(getProject(),panel);
  return (SliceTreeStructure)panel.getBuilder().getTreeStructure();
}
