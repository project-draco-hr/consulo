{
  final PsiStatement thenBranch=ifStatement.getThenBranch();
  final PsiStatement elseBranch=ifStatement.getElseBranch();
  final PsiStatement thenStatement=ConditionalUtils.stripBraces(thenBranch);
  if (thenStatement == null) {
    return false;
  }
  final PsiStatement elseStatement=ConditionalUtils.stripBraces(elseBranch);
  if (elseStatement == null) {
    return false;
  }
  if (!(thenStatement instanceof PsiExpressionStatement) || !(elseStatement instanceof PsiExpressionStatement)) {
    return false;
  }
  final PsiExpressionStatement thenExpressionStatement=(PsiExpressionStatement)thenStatement;
  final PsiExpression thenExpression=thenExpressionStatement.getExpression();
  final PsiExpressionStatement elseExpressionStatement=(PsiExpressionStatement)elseStatement;
  final PsiExpression elseExpression=elseExpressionStatement.getExpression();
  if (!(thenExpression instanceof PsiMethodCallExpression) || !(elseExpression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression thenMethodCallExpression=(PsiMethodCallExpression)thenExpression;
  final PsiMethodCallExpression elseMethodCallExpression=(PsiMethodCallExpression)elseExpression;
  final PsiReferenceExpression thenMethodExpression=thenMethodCallExpression.getMethodExpression();
  final PsiReferenceExpression elseMethodExpression=elseMethodCallExpression.getMethodExpression();
  if (!EquivalenceChecker.expressionsAreEquivalent(thenMethodExpression,elseMethodExpression)) {
    return false;
  }
  final PsiExpressionList thenArgumentList=thenMethodCallExpression.getArgumentList();
  final PsiExpression[] thenArguments=thenArgumentList.getExpressions();
  final PsiExpressionList elseArgumentList=elseMethodCallExpression.getArgumentList();
  final PsiExpression[] elseArguments=elseArgumentList.getExpressions();
  if (thenArguments.length != elseArguments.length) {
    return false;
  }
  int differences=0;
  for (int i=0, length=thenArguments.length; i < length; i++) {
    final PsiExpression thenArgument=thenArguments[i];
    final PsiExpression elseArgument=elseArguments[i];
    if (!EquivalenceChecker.expressionsAreEquivalent(thenArgument,elseArgument)) {
      differences++;
    }
  }
  return differences == 1;
}
