{
  PsiStatement thenBranch=ifStatement.getThenBranch();
  if (thenBranch == null) {
    return false;
  }
  thenBranch=ConditionalUtils.stripBraces(thenBranch);
  if (!ConditionalUtils.isAssignment(thenBranch)) {
    return false;
  }
  PsiStatement elseBranch=ifStatement.getElseBranch();
  elseBranch=ConditionalUtils.stripBraces(elseBranch);
  if (elseBranch == null) {
    return false;
  }
  if (!ConditionalUtils.isAssignment(elseBranch)) {
    return false;
  }
  final PsiAssignmentExpression thenExpression=(PsiAssignmentExpression)((PsiExpressionStatement)thenBranch).getExpression();
  final PsiAssignmentExpression elseExpression=(PsiAssignmentExpression)((PsiExpressionStatement)elseBranch).getExpression();
  final PsiJavaToken thenSign=thenExpression.getOperationSign();
  final PsiJavaToken elseSign=elseExpression.getOperationSign();
  if (thenSign.getTokenType() != elseSign.getTokenType()) {
    return false;
  }
  final PsiExpression thenLhs=thenExpression.getLExpression();
  if (thenExpression.getRExpression() == null || thenLhs == null) {
    return false;
  }
  if (elseExpression.getRExpression() == null || elseExpression.getLExpression() == null) {
    return false;
  }
  final PsiExpression thenRhs=thenExpression.getRExpression();
  final PsiType thenType=thenRhs.getType();
  if (thenType == null) {
    return false;
  }
  final PsiExpression elseRhs=elseExpression.getRExpression();
  final PsiType elseType=elseRhs.getType();
  if (elseType == null) {
    return false;
  }
  if (!(thenType.isAssignableFrom(elseType) || elseType.isAssignableFrom(thenType))) {
    return false;
  }
  final PsiExpression elseLhs=elseExpression.getLExpression();
  if (!EquivalenceChecker.expressionsAreEquivalent(thenLhs,elseLhs)) {
    return false;
  }
  return true;
}
