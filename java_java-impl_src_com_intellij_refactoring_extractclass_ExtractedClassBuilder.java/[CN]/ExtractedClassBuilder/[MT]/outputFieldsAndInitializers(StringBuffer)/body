{
  if (hasEnumConstants()) {
    out.append(StringUtil.join(enumConstantFields,new Function<PsiField,String>(){
      public String fun(      PsiField field){
        final StringBuffer fieldStr=new StringBuffer(field.getName().toUpperCase() + "(");
        final PsiExpression initializer=field.getInitializer();
        if (initializer != null) {
          initializer.accept(new Mutator(fieldStr));
        }
        fieldStr.append(")");
        return fieldStr.toString();
      }
    }
,", "));
    out.append(";");
  }
  final List<PsiClassInitializer> remainingInitializers=new ArrayList<PsiClassInitializer>(initializers);
  for (  final PsiField field : fields) {
    final Iterator<PsiClassInitializer> initializersIterator=remainingInitializers.iterator();
    final int fieldOffset=field.getTextRange().getStartOffset();
    while (initializersIterator.hasNext()) {
      final PsiClassInitializer initializer=initializersIterator.next();
      if (initializer.getTextRange().getStartOffset() < fieldOffset) {
        initializer.accept(new Mutator(out));
        initializersIterator.remove();
      }
    }
    field.accept(new Mutator(out));
    if (myFieldsNeedingGetter != null && myFieldsNeedingGetter.contains(field)) {
      out.append(PropertyUtil.generateGetterPrototype(field).getText());
      out.append("\n");
    }
    if (myFieldsNeedingSetters != null && myFieldsNeedingSetters.contains(field)) {
      out.append(PropertyUtil.generateSetterPrototype(field).getText());
      out.append("\n");
    }
  }
  for (  PsiClassInitializer initializer : remainingInitializers) {
    initializer.accept(new Mutator(out));
  }
}
