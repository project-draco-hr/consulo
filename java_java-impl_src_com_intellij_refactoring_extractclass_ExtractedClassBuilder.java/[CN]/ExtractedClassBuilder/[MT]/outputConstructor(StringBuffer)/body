{
  out.append("\t").append(hasEnumConstants() ? "" : "public ").append(className).append('(');
  if (requiresBackPointer) {
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(backPointerName,VariableKind.PARAMETER);
    out.append(originalClassName);
    if (!typeParams.isEmpty()) {
      out.append('<');
      boolean first=true;
      for (      PsiTypeParameter typeParam : typeParams) {
        if (!first) {
          out.append(',');
        }
        out.append(typeParam.getName());
        first=false;
      }
      out.append('>');
    }
    out.append(' ' + parameterName);
  }
 else   if (hasEnumConstants()) {
    out.append(myEnumParameterType.getCanonicalText()).append(" ").append("value");
  }
  out.append(")");
  out.append("\t{");
  if (requiresBackPointer) {
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(backPointerName,VariableKind.PARAMETER);
    if (backPointerName.equals(parameterName)) {
      out.append("\t\tthis." + backPointerName + " = "+ parameterName+ ";");
    }
 else {
      out.append("\t\t" + backPointerName + " = "+ parameterName+ ";");
    }
  }
 else   if (hasEnumConstants()) {
    final String fieldName=getValueFieldName();
    out.append(fieldName.equals("value") ? "this." : "").append(fieldName).append(" = value;");
  }
  out.append("\t}");
}
