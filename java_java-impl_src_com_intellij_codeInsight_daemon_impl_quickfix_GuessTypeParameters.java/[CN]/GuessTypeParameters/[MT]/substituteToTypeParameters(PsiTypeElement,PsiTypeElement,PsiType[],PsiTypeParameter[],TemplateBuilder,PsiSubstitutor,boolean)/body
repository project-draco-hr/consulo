{
  PsiType type=inplaceTypeElement.getType();
  List<PsiType> types=new ArrayList<PsiType>();
  for (int i=0; i < paramVals.length; i++) {
    PsiType val=paramVals[i];
    if (val == null)     return SUBSTITUTED_NONE;
    if (type.equals(val)) {
      types.add(myFactory.createType(params[i]));
    }
  }
  if (!types.isEmpty()) {
    Project project=typeElement.getProject();
    PsiType substituted=rawingSubstitutor.substitute(type);
    if (!"java.lang.Object".equals(substituted.getCanonicalText()) && (toplevel || substituted.equals(type))) {
      types.add(substituted);
    }
    builder.replaceElement(typeElement,new TypeExpression(project,types.toArray(new PsiType[types.size()])));
    return toplevel ? SUBSTITUTED_IN_REF : SUBSTITUTED_IN_PARAMETERS;
  }
  boolean substituted=false;
  PsiJavaCodeReferenceElement ref=typeElement.getInnermostComponentReferenceElement();
  PsiJavaCodeReferenceElement inplaceRef=inplaceTypeElement.getInnermostComponentReferenceElement();
  if (ref != null) {
    LOG.assertTrue(inplaceRef != null);
    PsiTypeElement[] innerTypeElements=ref.getParameterList().getTypeParameterElements();
    PsiTypeElement[] inplaceInnerTypeElements=inplaceRef.getParameterList().getTypeParameterElements();
    for (int i=0; i < innerTypeElements.length; i++) {
      substituted|=substituteToTypeParameters(innerTypeElements[i],inplaceInnerTypeElements[i],paramVals,params,builder,rawingSubstitutor,false) != SUBSTITUTED_NONE;
    }
  }
  return substituted ? SUBSTITUTED_IN_PARAMETERS : SUBSTITUTED_NONE;
}
