{
  final List<UsageInfo> result=new ArrayList<UsageInfo>();
  addRefs(result);
  if (myElement instanceof PsiMethod) {
    final Collection<PsiMethod> overriders=OverridingMethodsSearch.search((PsiMethod)myElement).findAll();
    for (    PsiMethod overrider : overriders) {
      result.add(new OverriderUsageInfo(overrider));
    }
    Collection<PsiMethod> allMethods=new HashSet<PsiMethod>(overriders);
    allMethods.add((PsiMethod)myElement);
    for (    PsiMethod method : allMethods) {
      method.accept(new PsiRecursiveElementVisitor(){
        public void visitReturnStatement(        PsiReturnStatement statement){
          final PsiExpression returnValue=statement.getReturnValue();
          if (returnValue != null && PsiType.BOOLEAN.equals(returnValue.getType())) {
            result.add(new InvertAndChangeNameUsageInfo(returnValue,true,false));
          }
        }
      }
);
    }
  }
 else   if (myElement instanceof PsiParameter && ((PsiParameter)myElement).getDeclarationScope() instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)((PsiParameter)myElement).getDeclarationScope();
    int index=method.getParameterList().getParameterIndex((PsiParameter)myElement);
    LOG.assertTrue(index >= 0);
    final Query<PsiReference> methodQuery=MethodReferencesSearch.search(method);
    final Collection<PsiReference> methodRefs=methodQuery.findAll();
    for (    PsiReference ref : methodRefs) {
      if (ref.getElement().getParent() instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression call=(PsiMethodCallExpression)ref.getElement().getParent();
        final PsiReferenceExpression methodExpression=call.getMethodExpression();
        final PsiExpression[] args=call.getArgumentList().getExpressions();
        if (index < args.length) {
          if (methodExpression.getQualifier() == null || !"super".equals(methodExpression.getQualifierExpression().getText())) {
            result.add(new InvertAndChangeNameUsageInfo(args[index],true,false));
          }
 else {
            result.add(new InvertAndChangeNameUsageInfo(args[index],false,true));
          }
        }
      }
    }
    final Collection<PsiMethod> overriders=OverridingMethodsSearch.search(method).findAll();
    for (    PsiMethod overrider : overriders) {
      result.add(new OverriderUsageInfo(overrider.getParameterList().getParameters()[index]));
    }
  }
 else {
    LOG.assertTrue(myElement instanceof PsiVariable);
    final PsiExpression initializer=((PsiVariable)myElement).getInitializer();
    if (initializer != null) {
      result.add(new InvertAndChangeNameUsageInfo(initializer,true,false));
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
