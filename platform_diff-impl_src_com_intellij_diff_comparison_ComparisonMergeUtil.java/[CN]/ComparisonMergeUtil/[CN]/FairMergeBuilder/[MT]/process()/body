{
  while (myPairs[0] != null && myPairs[1] != null) {
    if (myPairs[0].startsFrom(myProcessed) && myPairs[1].startsFrom(myProcessed)) {
      int len=Math.min(myPairs[0].getLength(),myPairs[1].getLength());
      if (!myPairs[0].cutHead(len)) {
        myPairs[0]=null;
      }
      if (!myPairs[1].cutHead(len)) {
        myPairs[1]=null;
      }
      myProcessed[0]+=len;
      myProcessed[1]+=len;
      myProcessed[2]+=len;
    }
 else {
      int nextBase=Math.max(myPairs[0].getBaseStart(),myPairs[1].getBaseStart());
      int[] nextVersion=new int[2];
      nextVersion[0]=nextBase - myPairs[0].getBaseStart() + myPairs[0].getVersionStart();
      nextVersion[1]=nextBase - myPairs[1].getBaseStart() + myPairs[1].getVersionStart();
      processConflict(nextVersion[0],nextBase,nextVersion[1]);
      if (!myPairs[0].cutHead(nextBase - myPairs[0].getBaseStart())) {
        myPairs[0]=null;
      }
      if (!myPairs[1].cutHead(nextBase - myPairs[1].getBaseStart())) {
        myPairs[1]=null;
      }
    }
  }
}
