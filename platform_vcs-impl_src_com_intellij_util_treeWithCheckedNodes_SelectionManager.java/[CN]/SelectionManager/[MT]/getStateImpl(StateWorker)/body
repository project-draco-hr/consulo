{
  if (stateWorker.getVf() == null)   return TreeNodeState.CLEAR;
  final TreeNodeState stateSelf=myState.get(stateWorker.getVf());
  if (stateSelf != null)   return stateSelf;
  final Ref<TreeNodeState> result=new Ref<TreeNodeState>();
  stateWorker.iterateParents(myState,new PairProcessor<VirtualFile,TreeNodeState>(){
    @Override public boolean process(    VirtualFile virtualFile,    TreeNodeState state){
      if (state != null) {
        if (TreeNodeState.SELECTED.equals(state) || TreeNodeState.HAVE_SELECTED_ABOVE.equals(state)) {
          result.set(myState.putAndPass(stateWorker.getVf(),TreeNodeState.HAVE_SELECTED_ABOVE));
        }
        return false;
      }
      return true;
    }
  }
);
  if (!result.isNull())   return result.get();
  for (  VirtualFile selected : myState.getSelected()) {
    if (VfsUtil.isAncestor(stateWorker.getVf(),selected,true)) {
      return myState.putAndPass(stateWorker.getVf(),TreeNodeState.HAVE_SELECTED_BELOW);
    }
  }
  return TreeNodeState.CLEAR;
}
