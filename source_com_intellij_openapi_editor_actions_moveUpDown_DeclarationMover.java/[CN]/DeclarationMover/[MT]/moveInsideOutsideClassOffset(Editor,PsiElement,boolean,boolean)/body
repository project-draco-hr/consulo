{
  if (sibling == null)   return ILLEGAL_MOVE;
  if (sibling instanceof PsiJavaToken && ((PsiJavaToken)sibling).getTokenType() == (isDown ? JavaTokenType.RBRACE : JavaTokenType.LBRACE) && sibling.getParent() instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)sibling.getParent();
    final PsiElement parent=aClass.getParent();
    if (!areWeMovingClass && !(parent instanceof PsiClass))     return ILLEGAL_MOVE;
    return isDown ? nextLineOffset(editor,aClass.getTextRange().getEndOffset()) : aClass.getTextRange().getStartOffset();
  }
  if (!isDown && sibling.getParent() instanceof PsiClass && (sibling instanceof PsiJavaToken && ((PsiJavaToken)sibling).getTokenType() == JavaTokenType.SEMICOLON || sibling instanceof PsiErrorElement)&& firstNonWhiteElement(sibling.getPrevSibling(),false) instanceof PsiEnumConstant) {
    final PsiClass aClass=(PsiClass)sibling.getParent();
    return aClass.getTextRange().getStartOffset();
  }
  if (sibling instanceof PsiClass) {
    PsiClass aClass=(PsiClass)sibling;
    return isDown ? nextLineOffset(editor,aClass.isEnum() ? afterEnumConstantsPosition(aClass) : aClass.getLBrace().getTextOffset()) : aClass.getRBrace().getTextOffset();
  }
  if (sibling instanceof JspTemplateDeclaration) {
    if (firstNonWhiteElement(myIsDown ? sibling.getNextSibling() : sibling.getPrevSibling(),myIsDown) == null)     return ILLEGAL_MOVE;
  }
  return NOT_CROSSING_CLASS_BORDER;
}
