{
  if (sibling == null)   throw new IllegalMoveException();
  if (sibling instanceof PsiJavaToken && ((PsiJavaToken)sibling).getTokenType() == (isDown ? JavaTokenType.RBRACE : JavaTokenType.LBRACE) && sibling.getParent() instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)sibling.getParent();
    final PsiElement parent=aClass.getParent();
    if (!areWeMovingClass && !(parent instanceof PsiClass))     throw new IllegalMoveException();
    if (aClass instanceof PsiAnonymousClass)     throw new IllegalMoveException();
    return new LineRange(sibling,sibling,editor.getDocument());
  }
  if (!isDown && sibling.getParent() instanceof PsiClass && (sibling instanceof PsiJavaToken && ((PsiJavaToken)sibling).getTokenType() == JavaTokenType.SEMICOLON || sibling instanceof PsiErrorElement)&& firstNonWhiteElement(sibling.getPrevSibling(),false) instanceof PsiEnumConstant) {
    PsiClass aClass=(PsiClass)sibling.getParent();
    Document document=editor.getDocument();
    int startLine=document.getLineNumber(aClass.getTextRange().getStartOffset());
    int endLine=document.getLineNumber(sibling.getTextRange().getEndOffset()) + 1;
    return new LineRange(startLine,endLine);
  }
  if (sibling instanceof PsiClass) {
    PsiClass aClass=(PsiClass)sibling;
    if (aClass instanceof PsiAnonymousClass)     throw new IllegalMoveException();
    return isDown ? new LineRange(aClass.getFirstChild(),aClass.isEnum() ? afterEnumConstantsPosition(aClass) : aClass.getLBrace(),editor.getDocument()) : new LineRange(aClass.getRBrace(),aClass.getRBrace(),editor.getDocument());
  }
  if (sibling instanceof JspTemplateDeclaration) {
    if (firstNonWhiteElement(this.isDown ? sibling.getNextSibling() : sibling.getPrevSibling(),this.isDown) == null)     throw new IllegalMoveException();
  }
  return null;
}
