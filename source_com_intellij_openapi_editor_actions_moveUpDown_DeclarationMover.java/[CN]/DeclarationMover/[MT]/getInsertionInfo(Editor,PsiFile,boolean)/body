{
  if (!(file instanceof PsiJavaFile)) {
    return null;
  }
  final InsertionInfo oldInsertionInfo=super.getInsertionInfo(editor,file,isDown);
  if (oldInsertionInfo == null)   return null;
  LineRange oldRange=oldInsertionInfo.whatToMove;
  final Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,oldRange);
  if (psiRange == null)   return null;
  final PsiMember firstMember=PsiTreeUtil.getParentOfType(psiRange.getFirst(),PsiMember.class,false);
  final PsiMember lastMember=PsiTreeUtil.getParentOfType(psiRange.getSecond(),PsiMember.class,false);
  final LineRange range;
  if (firstMember != null && firstMember == lastMember) {
    range=memberRange(firstMember,editor,oldRange);
    if (range == null)     return null;
    range.firstElement=firstMember;
    range.lastElement=lastMember;
  }
 else {
    final PsiElement parent=PsiTreeUtil.findCommonParent(firstMember,lastMember);
    if (parent == null)     return null;
    final Pair<PsiElement,PsiElement> combinedRange=getElementRange(parent,firstMember,lastMember);
    if (combinedRange == null)     return null;
    final LineRange lineRange1=memberRange(combinedRange.getFirst(),editor,oldRange);
    if (lineRange1 == null)     return null;
    final LineRange lineRange2=memberRange(combinedRange.getSecond(),editor,oldRange);
    if (lineRange2 == null)     return null;
    range=new LineRange(lineRange1.startLine,lineRange2.endLine);
    range.firstElement=combinedRange.getFirst();
    range.lastElement=combinedRange.getSecond();
  }
  final int offset=calcInsertOffset(editor,range,isDown);
  return offset == -1 ? null : new InsertionInfo(range,offset);
}
