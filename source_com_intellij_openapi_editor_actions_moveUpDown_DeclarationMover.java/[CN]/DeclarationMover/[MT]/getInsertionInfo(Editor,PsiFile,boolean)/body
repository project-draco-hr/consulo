{
  if (!(file instanceof PsiJavaFile)) {
    return null;
  }
  final InsertionInfo oldInsertionInfo=super.getInsertionInfo(editor,file,isDown);
  if (oldInsertionInfo == null)   return null;
  LineRange oldRange=oldInsertionInfo.whatToMove;
  final Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,oldRange);
  if (psiRange == null)   return null;
  final PsiMember firstMember=PsiTreeUtil.getParentOfType(psiRange.getFirst(),PsiMember.class,false);
  final PsiMember lastMember=PsiTreeUtil.getParentOfType(psiRange.getSecond(),PsiMember.class,false);
  LineRange range;
  if (firstMember != null && firstMember == lastMember) {
    range=memberRange(firstMember,editor,oldRange);
    if (range == null)     return null;
    range.firstElement=firstMember;
    range.lastElement=lastMember;
  }
 else {
    if (firstMember == null || lastMember == null)     return null;
    final PsiElement parent=PsiTreeUtil.findCommonParent(firstMember,lastMember);
    if (parent == null)     return null;
    final Pair<PsiElement,PsiElement> combinedRange=getElementRange(parent,firstMember,lastMember);
    if (combinedRange == null)     return null;
    final LineRange lineRange1=memberRange(combinedRange.getFirst(),editor,oldRange);
    if (lineRange1 == null)     return null;
    final LineRange lineRange2=memberRange(combinedRange.getSecond(),editor,oldRange);
    if (lineRange2 == null)     return null;
    range=new LineRange(lineRange1.startLine,lineRange2.endLine);
    range.firstElement=combinedRange.getFirst();
    range.lastElement=combinedRange.getSecond();
  }
  PsiElement nextWhitespace=range.lastElement.getNextSibling();
  if (nextWhitespace instanceof PsiWhiteSpace) {
    int endLine=editor.offsetToLogicalPosition(nextWhitespace.getTextRange().getEndOffset()).line;
    Document document=editor.getDocument();
    while (true) {
      int lineStartOffset=document.getLineStartOffset(endLine);
      int lineEndOffset=document.getLineEndOffset(endLine);
      PsiElement elementAtStart=file.findElementAt(lineStartOffset);
      PsiElement elementAtEnd=file.findElementAt(lineEndOffset - 1);
      if (elementAtEnd == nextWhitespace && elementAtStart == nextWhitespace)       break;
      endLine--;
      if (endLine == range.endLine)       break;
    }
    LineRange newRange=new LineRange(range.startLine,endLine);
    newRange.firstElement=range.firstElement;
    newRange.lastElement=nextWhitespace;
    range=newRange;
  }
  return calcInsertOffset(editor,range,isDown);
}
