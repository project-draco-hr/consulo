{
  if (options instanceof JavaVariableFindUsagesOptions) {
    final JavaVariableFindUsagesOptions varOptions=(JavaVariableFindUsagesOptions)options;
    if (varOptions.isReadAccess || varOptions.isWriteAccess) {
      if (varOptions.isReadAccess && varOptions.isWriteAccess) {
        if (!addElementUsages(element,processor,options))         return false;
      }
 else {
        if (!addElementUsages(element,new Processor<UsageInfo>(){
          @Override public boolean process(          UsageInfo info){
            final PsiElement element=info.getElement();
            boolean isWrite=element instanceof PsiExpression && PsiUtil.isAccessedForWriting((PsiExpression)element);
            if (isWrite == varOptions.isWriteAccess) {
              if (!processor.process(info))               return false;
            }
            return true;
          }
        }
,varOptions))         return false;
      }
    }
  }
 else   if (options.isUsages) {
    if (!addElementUsages(element,processor,options))     return false;
  }
  boolean success=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      if (ThrowSearchUtil.isSearchable(element) && options instanceof JavaThrowFindUsagesOptions && options.isUsages) {
        ThrowSearchUtil.Root root=options.getUserData(ThrowSearchUtil.THROW_SEARCH_ROOT_KEY);
        if (root == null) {
          final ThrowSearchUtil.Root[] roots=ThrowSearchUtil.getSearchRoots(element);
          if (roots != null && roots.length > 0) {
            root=roots[0];
          }
        }
        if (root != null) {
          return ThrowSearchUtil.addThrowUsages(processor,root,options);
        }
      }
      return true;
    }
  }
);
  if (!success)   return false;
  if (options instanceof JavaPackageFindUsagesOptions && ((JavaPackageFindUsagesOptions)options).isClassesUsages) {
    if (!addClassesUsages((PsiJavaPackage)element,processor,(JavaPackageFindUsagesOptions)options))     return false;
  }
  if (options instanceof JavaClassFindUsagesOptions) {
    final JavaClassFindUsagesOptions classOptions=(JavaClassFindUsagesOptions)options;
    final PsiClass psiClass=(PsiClass)element;
    if (classOptions.isMethodsUsages) {
      if (!addMethodsUsages(psiClass,processor,classOptions))       return false;
    }
    if (classOptions.isFieldsUsages) {
      if (!addFieldsUsages(psiClass,processor,classOptions))       return false;
    }
    if (psiClass.isInterface()) {
      if (classOptions.isDerivedInterfaces) {
        if (classOptions.isImplementingClasses) {
          if (!addInheritors(psiClass,processor,classOptions))           return false;
        }
 else {
          if (!addDerivedInterfaces(psiClass,processor,classOptions))           return false;
        }
      }
 else       if (classOptions.isImplementingClasses) {
        if (!addImplementingClasses(psiClass,processor,classOptions))         return false;
      }
    }
 else     if (classOptions.isDerivedClasses) {
      if (!addInheritors(psiClass,processor,classOptions))       return false;
    }
  }
  if (options instanceof JavaMethodFindUsagesOptions) {
    final PsiMethod psiMethod=(PsiMethod)element;
    boolean isAbstract=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return psiMethod.hasModifierProperty(PsiModifier.ABSTRACT);
      }
    }
);
    final JavaMethodFindUsagesOptions methodOptions=(JavaMethodFindUsagesOptions)options;
    if (isAbstract && methodOptions.isImplementingMethods || methodOptions.isOverridingMethods) {
      if (!processOverridingMethods(psiMethod,processor,methodOptions))       return false;
    }
  }
  if (element instanceof PomTarget) {
    if (!addAliasingUsages((PomTarget)element,processor,options))     return false;
  }
  final Boolean isSearchable=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return ThrowSearchUtil.isSearchable(element);
    }
  }
);
  if (!isSearchable && options.isSearchForTextOccurrences && options.searchScope instanceof GlobalSearchScope) {
    if (!processUsagesInText(element,processor,(GlobalSearchScope)options.searchScope))     return false;
  }
  return true;
}
