{
  final ChangeForDiffConvertor convertor=new ChangeForDiffConvertor(myProject,false);
  final List<Pair<String,DiffRequestPresentable>> list=new ArrayList<Pair<String,DiffRequestPresentable>>();
  final DiffRequestPresentable requestPresentable=convertor.convert(myChange,false);
  if (requestPresentable != null) {
    list.add(new Pair<String,DiffRequestPresentable>("",requestPresentable));
  }
  final Map<String,Change> layers=myChange.getOtherLayers();
  for (  Map.Entry<String,Change> entry : layers.entrySet()) {
    final String key=entry.getKey();
    final Change value=entry.getValue();
    final DiffRequestPresentable additional=convertor.convert(value,true);
    if (additional != null) {
      list.add(new Pair<String,DiffRequestPresentable>(key,additional));
    }
  }
  if (list.isEmpty())   return new MyResult(new SimpleDiffRequest(myProject,""),DiffPresentationReturnValue.removeFromList);
  DiffRequest request=null;
  final StringBuilder err=new StringBuilder();
  for (  Pair<String,DiffRequestPresentable> pair : list) {
    final MyResult step=pair.getSecond().step(context);
    if (step == null)     continue;
    final DiffPresentationReturnValue returnValue=step.getReturnValue();
    if (DiffPresentationReturnValue.quit.equals(returnValue)) {
      final String error=step.getAsOneError();
      if (StringUtil.isEmptyOrSpaces(error)) {
        return new MyResult(new SimpleDiffRequest(myProject,""),DiffPresentationReturnValue.quit);
      }
 else {
        return new MyResult(new SimpleDiffRequest(myProject,""),DiffPresentationReturnValue.quit,error);
      }
    }
 else     if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) {
      if (request == null) {
        request=step.getRequest();
        if (!StringUtil.isEmptyOrSpaces(pair.getFirst())) {
          request.setWindowTitle(pair.getFirst() + " " + request.getWindowTitle());
        }
      }
 else {
        request.addOtherLayer(pair.getFirst(),step.getRequest());
      }
    }
 else {
      final String error=step.getAsOneError();
      if (!StringUtil.isEmptyOrSpaces(error)) {
        err.append(error);
      }
    }
  }
  if (request == null || err.length() > 0) {
    return new MyResult(new SimpleDiffRequest(myProject,""),DiffPresentationReturnValue.removeFromList,err.toString());
  }
  return new MyResult(request,DiffPresentationReturnValue.useRequest,err.toString());
}
