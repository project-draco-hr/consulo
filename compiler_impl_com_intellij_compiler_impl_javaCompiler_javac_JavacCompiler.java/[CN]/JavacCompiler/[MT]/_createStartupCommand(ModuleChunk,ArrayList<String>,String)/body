{
  final ProjectJdk jdk=getJdkForStartupCommand(chunk);
  final String versionString=jdk.getVersionString();
  if (versionString == null || "".equals(versionString)) {
    throw new IllegalArgumentException(CompilerBundle.message("javac.error.unknown.jdk.version",jdk.getName()));
  }
  final boolean isVersion1_0=CompilerUtil.isOfVersion(versionString,"1.0");
  final boolean isVersion1_1=CompilerUtil.isOfVersion(versionString,"1.1");
  final boolean isVersion1_2=CompilerUtil.isOfVersion(versionString,"1.2");
  final boolean isVersion1_3=CompilerUtil.isOfVersion(versionString,"1.3");
  final boolean isVersion1_4=CompilerUtil.isOfVersion(versionString,"1.4");
  final boolean isVersion1_5=CompilerUtil.isOfVersion(versionString,"1.5") || CompilerUtil.isOfVersion(versionString,"5.0");
  final boolean isVersion1_5_or_higher=isVersion1_5 || !(isVersion1_0 || isVersion1_1 || isVersion1_2|| isVersion1_3|| isVersion1_4);
  final JavacSettings javacSettings=JavacSettings.getInstance(myProject);
  final String vmExePath=jdk.getVMExecutablePath();
  commandLine.add(vmExePath);
  if (isVersion1_1 || isVersion1_0) {
    commandLine.add("-mx" + javacSettings.MAXIMUM_HEAP_SIZE + "m");
  }
 else {
    commandLine.add("-Xmx" + javacSettings.MAXIMUM_HEAP_SIZE + "m");
  }
  CompilerUtil.addLocaleOptions(commandLine,false);
  commandLine.add("-classpath");
  if (isVersion1_0) {
    commandLine.add(jdk.getToolsPath());
  }
 else {
    commandLine.add(jdk.getToolsPath() + File.pathSeparator + PathUtilEx.getIdeaRtJarPath());
    commandLine.add(JavacRunner.class.getName());
    commandLine.add("\"" + versionString + "\"");
  }
  if (isVersion1_2 || isVersion1_1 || isVersion1_0) {
    commandLine.add(JAVAC_MAIN_CLASS_OLD);
  }
 else {
    commandLine.add(JAVAC_MAIN_CLASS);
  }
  LanguageLevel languageLevel=chunk.getLanguageLevel();
  CompilerUtil.addSourceCommandLineSwitch(jdk,languageLevel,commandLine);
  commandLine.add("-verbose");
  final String cp=chunk.getCompilationClasspath();
  final String bootCp=chunk.getCompilationBootClasspath();
  final String classPath;
  if (isVersion1_0 || isVersion1_1) {
    classPath=bootCp + File.pathSeparator + cp;
  }
 else {
    classPath=cp;
    commandLine.add("-bootclasspath");
    addClassPathValue(jdk,false,commandLine,CompilerUtil.quotePath(bootCp),"javac_bootcp");
  }
  commandLine.add("-classpath");
  addClassPathValue(jdk,isVersion1_0,commandLine,classPath,"javac_cp");
  if (!isVersion1_1 && !isVersion1_0) {
    commandLine.add("-sourcepath");
    commandLine.add("\"\"");
  }
  commandLine.add("-d");
  commandLine.add(outputPath.replace('/',File.separatorChar));
  StringTokenizer tokenizer=new StringTokenizer(javacSettings.getOptionsString()," ");
  while (tokenizer.hasMoreTokens()) {
    @NonNls String token=tokenizer.nextToken();
    if (isVersion1_0) {
      if ("-deprecation".equals(token)) {
        continue;
      }
    }
    if (isVersion1_0 || isVersion1_1 || isVersion1_2|| isVersion1_3|| isVersion1_4) {
      if ("-Xlint".equals(token)) {
        continue;
      }
    }
    commandLine.add(token);
  }
  final VirtualFile[] files=chunk.getFilesToCompile();
  if (isVersion1_0) {
    for (    VirtualFile file : files) {
      String path=file.getPath();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding path for compilation " + path);
      }
      commandLine.add(CompilerUtil.quotePath(path));
    }
  }
 else {
    File sourcesFile=FileUtil.createTempFile("javac",".tmp");
    sourcesFile.deleteOnExit();
    myTempFiles.add(sourcesFile);
    final PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(sourcesFile)));
    try {
      for (      final VirtualFile file : files) {
        final String path=isVersion1_5_or_higher ? file.getPath().replace('/',File.separatorChar) : file.getPath();
        if (LOG.isDebugEnabled()) {
          LOG.debug("Adding path for compilation " + path);
        }
        writer.println(isVersion1_1 ? path : CompilerUtil.quotePath(path));
      }
    }
  finally {
      writer.close();
    }
    commandLine.add("@" + sourcesFile.getAbsolutePath());
  }
}
