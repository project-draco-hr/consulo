{
  List<R> repositories=myRepositoryManager.getRepositories();
  List<R> problems=ContainerUtil.filter(repositories,new Condition<R>(){
    @Override public boolean value(    R repository){
      return hasBranch(repository,taskName);
    }
  }
);
  MultiMap<String,String> map=new MultiMap<String,String>();
  if (!problems.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode() || Messages.showDialog(myProject,"<html>The following repositories already have specified " + myBranchType + "<b>"+ taskName+ "</b>:<br>"+ StringUtil.join(problems,"<br>")+ ".<br>"+ "Do you want to checkout existing "+ myBranchType+ "?",myBranchType + " Already Exists",new String[]{Messages.YES_BUTTON,Messages.NO_BUTTON},0,Messages.getWarningIcon(),new DialogWrapper.PropertyDoNotAskOption("git.checkout.existing.branch")) == 0) {
      checkout(taskName,problems,null);
      fillMap(taskName,problems,map);
    }
  }
  repositories.removeAll(problems);
  if (!repositories.isEmpty()) {
    checkoutAsNewBranch(taskName,repositories);
  }
  fillMap(taskName,repositories,map);
  return new TaskInfo(map);
}
