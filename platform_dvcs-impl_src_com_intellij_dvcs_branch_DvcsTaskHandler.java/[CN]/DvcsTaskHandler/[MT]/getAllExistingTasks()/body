{
  List<R> repositories=myRepositoryManager.getRepositories();
  MultiMap<String,TaskInfo> tasks=new MultiMap<>();
  for (  R repository : repositories) {
    for (    TaskInfo branch : getAllBranches(repository)) {
      tasks.putValue(branch.getName(),branch);
    }
  }
  return ContainerUtil.map2Array(tasks.entrySet(),TaskInfo.class,new Function<Map.Entry<String,Collection<TaskInfo>>,TaskInfo>(){
    @Override public TaskInfo fun(    Map.Entry<String,Collection<TaskInfo>> entry){
      Set<String> repositories=new HashSet<>();
      boolean remote=false;
      for (      TaskInfo info : entry.getValue()) {
        remote|=info.isRemote();
        repositories.addAll(info.getRepositories());
      }
      return new TaskInfo(entry.getKey(),repositories,remote);
    }
  }
);
}
