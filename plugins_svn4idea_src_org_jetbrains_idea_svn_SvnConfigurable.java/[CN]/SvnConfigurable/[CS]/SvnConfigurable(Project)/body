{
  myProject=project;
  myUseDefaultCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      boolean enabled=!myUseDefaultCheckBox.isSelected();
      myConfigurationDirectoryText.setEnabled(enabled);
      myConfigurationDirectoryLabel.setEnabled(enabled);
      SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
      String path=configuration.getConfigurationDirectory();
      if (!enabled || path == null) {
        myConfigurationDirectoryText.setText(IdeaSubversionConfigurationDirectory.getPath());
      }
 else {
        myConfigurationDirectoryText.setText(path);
      }
    }
  }
);
  myCommandLineClient.addBrowseFolderListener("Subversion","Select path to Subversion executable (1.7+)",project,FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor());
  myClearAuthButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      clearAuthenticationCache(myProject,myComponent,myConfigurationDirectoryText.getText());
    }
  }
);
  myConfigurationDirectoryText.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      @NonNls String path=myConfigurationDirectoryText.getText().trim();
      selectConfigirationDirectory(path,new Consumer<String>(){
        @Override public void consume(        String s){
          myConfigurationDirectoryText.setText(s);
        }
      }
,myProject,myComponent);
    }
  }
);
  myConfigurationDirectoryText.setEditable(false);
  myConfigurationDirectoryLabel.setLabelFor(myConfigurationDirectoryText);
  myUseCommonProxy.setText(SvnBundle.message("use.idea.proxy.as.default",ApplicationNamesInfo.getInstance().getProductName()));
  myEditProxiesButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final SvnConfigureProxiesDialog dialog=new SvnConfigureProxiesDialog(myProject);
      dialog.show();
      myHttpTimeout.setValue(Long.valueOf(SvnConfiguration.getInstance(myProject).getHttpTimeout() / 1000));
    }
  }
);
  myMaximumNumberOfRevisionsCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myNumRevsInAnnotations.setEnabled(myMaximumNumberOfRevisionsCheckBox.isSelected());
    }
  }
);
  myNumRevsInAnnotations.setEnabled(myMaximumNumberOfRevisionsCheckBox.isSelected());
  final ButtonGroup bg=new ButtonGroup();
  bg.add(mySSLv3RadioButton);
  bg.add(myTLSv1RadioButton);
  bg.add(myAllRadioButton);
  if (SvnVcs.isSSLProtocolExplicitlySet()) {
    mySSLv3RadioButton.setEnabled(false);
    myTLSv1RadioButton.setEnabled(false);
    myAllRadioButton.setEnabled(false);
    mySSLExplicitly.setVisible(true);
    mySSLExplicitly.setText("Set explicitly to: " + System.getProperty(SvnVcs.SVNKIT_HTTP_SSL_PROTOCOLS));
  }
 else {
    mySSLv3RadioButton.setEnabled(true);
    myTLSv1RadioButton.setEnabled(true);
    myAllRadioButton.setEnabled(true);
    mySSLExplicitly.setVisible(false);
    final String version=SystemInfo.JAVA_RUNTIME_VERSION;
    final boolean jdkBugFixed=version.startsWith("1.7") || version.startsWith("1.8");
    if (!jdkBugFixed) {
      mySSLExplicitly.setVisible(true);
      mySSLExplicitly.setText("Setting 'All' value in this JDK version (" + version + ") is not recommended.");
    }
  }
}
