{
  if (methodReferenceExpression == null)   return false;
  Map<PsiMethodReferenceExpression,PsiType> map=ourRefs.get();
  if (map == null) {
    map=new HashMap<PsiMethodReferenceExpression,PsiType>();
    ourRefs.set(map);
  }
  final JavaResolveResult result;
  try {
    if (map.put(methodReferenceExpression,left) != null)     return false;
    result=methodReferenceExpression.advancedResolve(false);
  }
  finally {
    map.remove(methodReferenceExpression);
  }
  final PsiElement resolve=result.getElement();
  if (resolve instanceof PsiMethod) {
    final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(left);
    final PsiMethod method=getFunctionalInterfaceMethod(resolveResult);
    if (method != null) {
      final Ref<PsiClass> classRef=new Ref<PsiClass>();
      final Ref<PsiSubstitutor> substRef=new Ref<PsiSubstitutor>();
      methodReferenceExpression.process(classRef,substRef);
      final MethodSignature signature1=method.getSignature(resolveResult.getSubstitutor());
      final MethodSignature signature2=((PsiMethod)resolve).getSignature(substRef.get());
      if (areAcceptable(signature1,signature2,classRef.get(),substRef.get(),((PsiMethod)resolve).isVarArgs()))       return true;
    }
  }
  return false;
}
