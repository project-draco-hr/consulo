{
  if (psiClass instanceof PsiAnonymousClass) {
    psiClass=PsiUtil.resolveClassInType(((PsiAnonymousClass)psiClass).getBaseClassType());
  }
  if (psiClass != null && psiClass.isInterface()) {
    final List<MethodSignature> methods=new ArrayList<MethodSignature>();
    final Collection<HierarchicalMethodSignature> visibleSignatures=psiClass.getVisibleSignatures();
    for (    HierarchicalMethodSignature signature : visibleSignatures) {
      final PsiMethod psiMethod=signature.getMethod();
      if (!psiMethod.hasModifierProperty(PsiModifier.ABSTRACT))       continue;
      if (!overridesPublicObjectMethod(psiMethod) && !psiMethod.isExtensionMethod()) {
        methods.add(signature);
      }
    }
    return hasSubsignature(methods);
  }
  return null;
}
