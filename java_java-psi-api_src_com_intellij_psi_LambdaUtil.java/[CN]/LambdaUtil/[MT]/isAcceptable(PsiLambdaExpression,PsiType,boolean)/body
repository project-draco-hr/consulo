{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(leftType);
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass instanceof PsiAnonymousClass) {
    return isAcceptable(lambdaExpression,((PsiAnonymousClass)psiClass).getBaseClassType(),checkReturnType);
  }
  final MethodSignature methodSignature=getFunction(psiClass);
  if (methodSignature == null)   return false;
  final PsiParameter[] lambdaParameters=lambdaExpression.getParameterList().getParameters();
  final PsiType[] parameterTypes=methodSignature.getParameterTypes();
  if (lambdaParameters.length != parameterTypes.length)   return false;
  for (int lambdaParamIdx=0, length=lambdaParameters.length; lambdaParamIdx < length; lambdaParamIdx++) {
    PsiParameter parameter=lambdaParameters[lambdaParamIdx];
    final PsiTypeElement typeElement=parameter.getTypeElement();
    if (typeElement != null) {
      final PsiType lambdaFormalType=typeElement.getType();
      final PsiType methodParameterType=parameterTypes[lambdaParamIdx];
      if (lambdaFormalType instanceof PsiPrimitiveType) {
        if (methodParameterType instanceof PsiPrimitiveType)         return methodParameterType.equals(lambdaFormalType);
        return false;
      }
      if (!TypeConversionUtil.erasure(lambdaFormalType).isAssignableFrom(TypeConversionUtil.erasure(GenericsUtil.eliminateWildcards(resolveResult.getSubstitutor().substitute(methodSignature.getSubstitutor().substitute(methodParameterType)))))) {
        return false;
      }
    }
  }
  if (checkReturnType) {
    final String uniqueVarName=JavaCodeStyleManager.getInstance(lambdaExpression.getProject()).suggestUniqueVariableName("l",lambdaExpression,true);
    String canonicalText=leftType.getCanonicalText();
    if (leftType instanceof PsiEllipsisType) {
      canonicalText=((PsiEllipsisType)leftType).toArrayType().getCanonicalText();
    }
    final PsiStatement assignmentFromText=JavaPsiFacade.getElementFactory(lambdaExpression.getProject()).createStatementFromText(canonicalText + " " + uniqueVarName+ " = "+ lambdaExpression.getText(),lambdaExpression);
    final PsiLocalVariable localVariable=(PsiLocalVariable)((PsiDeclarationStatement)assignmentFromText).getDeclaredElements()[0];
    LOG.assertTrue(psiClass != null);
    PsiType methodReturnType=getReturnType(psiClass,methodSignature);
    if (methodReturnType != null) {
      methodReturnType=resolveResult.getSubstitutor().substitute(methodSignature.getSubstitutor().substitute(methodReturnType));
      return LambdaHighlightingUtil.checkReturnTypeCompatible((PsiLambdaExpression)localVariable.getInitializer(),methodReturnType) == null;
    }
  }
  return true;
}
