{
  int offset=0;
  final PsiType[] signatureParameterTypes1=signature1.getParameterTypes();
  final PsiType[] signatureParameterTypes2=signature2.getParameterTypes();
  if (signatureParameterTypes1.length != signatureParameterTypes2.length) {
    if (signatureParameterTypes1.length == signatureParameterTypes2.length + 1) {
      final PsiClassType classType=JavaPsiFacade.getElementFactory(psiClass.getProject()).createType(psiClass,psiSubstitutor);
      final PsiType receiverType=signatureParameterTypes1[0];
      final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(receiverType);
      if (isReceiverType(receiverType,psiClass) && resolveResult.getSubstitutor().equals(psiSubstitutor) || (receiverType instanceof PsiClassType && ((PsiClassType)receiverType).isRaw() && receiverType.equals(TypeConversionUtil.erasure(classType)))) {
        offset++;
      }
 else       if (!isVarargs) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  final int min=Math.min(signatureParameterTypes2.length,signatureParameterTypes1.length);
  for (int i=0; i < min; i++) {
    final PsiType type1=signatureParameterTypes1[offset + i];
    final PsiType type2=isVarargs && i == min - 1 ? ((PsiArrayType)signatureParameterTypes2[i]).getComponentType() : signatureParameterTypes2[i];
    if (!TypeConversionUtil.isAssignable(type2,psiSubstitutor.substitute(GenericsUtil.eliminateWildcards(type1)))) {
      return false;
    }
  }
  return true;
}
