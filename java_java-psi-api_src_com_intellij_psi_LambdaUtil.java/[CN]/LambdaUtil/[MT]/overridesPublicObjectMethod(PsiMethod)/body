{
  boolean overrideObject=false;
  for (  PsiMethod superMethod : psiMethod.findDeepestSuperMethods()) {
    final PsiClass containingClass=superMethod.getContainingClass();
    if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
      if (superMethod.hasModifierProperty(PsiModifier.PUBLIC)) {
        overrideObject=true;
        break;
      }
    }
  }
  return overrideObject;
}
