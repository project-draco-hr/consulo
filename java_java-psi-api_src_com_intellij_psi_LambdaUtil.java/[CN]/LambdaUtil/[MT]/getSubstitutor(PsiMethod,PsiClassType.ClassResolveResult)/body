{
  final PsiClass derivedClass=resolveResult.getElement();
  LOG.assertTrue(derivedClass != null);
  final PsiClass methodContainingClass=method.getContainingClass();
  LOG.assertTrue(methodContainingClass != null);
  PsiSubstitutor initialSubst=resolveResult.getSubstitutor();
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(methodContainingClass,derivedClass,PsiSubstitutor.EMPTY);
  for (  PsiTypeParameter param : superClassSubstitutor.getSubstitutionMap().keySet()) {
    final PsiType substitute=superClassSubstitutor.substitute(param);
    if (substitute != null) {
      initialSubst=initialSubst.put(param,initialSubst.substitute(substitute));
    }
  }
  return initialSubst;
}
