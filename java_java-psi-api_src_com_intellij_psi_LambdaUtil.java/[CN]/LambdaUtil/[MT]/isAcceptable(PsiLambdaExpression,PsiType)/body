{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(leftType);
  final PsiClass psiClass=resolveResult.getElement();
  final MethodSignature methodSignature=getFunction(psiClass);
  if (methodSignature == null)   return false;
  final PsiParameter[] lambdaParameters=lambdaExpression.getParameterList().getParameters();
  final PsiType[] parameterTypes=methodSignature.getParameterTypes();
  if (lambdaParameters.length != parameterTypes.length)   return false;
  for (int lambdaParamIdx=0, length=lambdaParameters.length; lambdaParamIdx < length; lambdaParamIdx++) {
    PsiParameter parameter=lambdaParameters[lambdaParamIdx];
    final PsiTypeElement typeElement=parameter.getTypeElement();
    if (typeElement != null) {
      final PsiType lambdaFormalType=typeElement.getType();
      final PsiType methodParameterType=parameterTypes[lambdaParamIdx];
      if (lambdaFormalType instanceof PsiPrimitiveType) {
        if (methodParameterType instanceof PsiPrimitiveType)         return methodParameterType.isAssignableFrom(lambdaFormalType);
        return false;
      }
      if (!resolveResult.getSubstitutor().substitute(methodParameterType).isAssignableFrom(lambdaFormalType)) {
        return false;
      }
    }
  }
  PsiMethod method=null;
  LOG.assertTrue(psiClass != null);
  final PsiMethod[] methodsByName=psiClass.findMethodsByName(methodSignature.getName(),true);
  for (  PsiMethod psiMethod : methodsByName) {
    if (MethodSignatureUtil.areSignaturesEqual(getMethodSignature(psiMethod,psiClass,psiMethod.getContainingClass()),methodSignature)) {
      method=psiMethod;
      break;
    }
  }
  LOG.assertTrue(method != null);
  PsiType methodReturnType=method.getReturnType();
  if (methodReturnType != null && methodReturnType != PsiType.VOID) {
    methodReturnType=resolveResult.getSubstitutor().substitute(methodReturnType);
    final PsiElement body=lambdaExpression.getBody();
    if (body instanceof PsiCodeBlock) {
      final PsiCodeBlock block=(PsiCodeBlock)body;
      for (      PsiStatement statement : block.getStatements()) {
        if (statement instanceof PsiReturnStatement) {
          final PsiExpression returnValue=((PsiReturnStatement)statement).getReturnValue();
          if (returnValue != null) {
            if (!checkReturnTypeAssignability(returnValue.getType(),parameterTypes,lambdaExpression,methodReturnType))             return false;
          }
        }
      }
    }
 else     if (body instanceof PsiExpression) {
      return checkReturnTypeAssignability(((PsiExpression)body).getType(),parameterTypes,lambdaExpression,methodReturnType);
    }
  }
  return true;
}
