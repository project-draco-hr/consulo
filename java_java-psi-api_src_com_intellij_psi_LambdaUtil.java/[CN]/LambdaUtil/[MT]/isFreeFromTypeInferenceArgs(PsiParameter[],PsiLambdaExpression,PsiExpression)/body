{
  final PsiParameter[] lambdaParams=lambdaExpression.getParameterList().getParameters();
  LOG.assertTrue(lambdaParams.length == methodParameters.length,"lambda params: " + lambdaExpression.getParameterList().getText() + "; method params: "+ Arrays.toString(methodParameters));
  final boolean[] independent=new boolean[]{true};
  expression.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      int usedParamIdx=-1;
      for (int i=0; i < lambdaParams.length; i++) {
        PsiParameter param=lambdaParams[i];
        if (expression.isReferenceTo(param)) {
          usedParamIdx=i;
          break;
        }
      }
      if (usedParamIdx > -1 && dependsOnTypeParams(methodParameters[usedParamIdx].getType(),lambdaExpression)) {
        independent[0]=false;
      }
    }
  }
);
  return independent[0];
}
