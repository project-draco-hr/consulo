{
  final String serializedComponents=getSerializedComponents();
  if (serializedComponents.equals(myRecentyCopiedString)) {
    myRecentyCopiedStringCount++;
  }
 else {
    myRecentyCopiedString=serializedComponents;
    myRecentyCopiedStringCount=1;
  }
  final PsiPropertiesProvider provider=new PsiPropertiesProvider(myEditor.getModule());
  final ArrayList<RadComponent> componentsToPaste=new ArrayList<RadComponent>();
  final TIntArrayList xs=new TIntArrayList();
  final TIntArrayList ys=new TIntArrayList();
  try {
    final org.jdom.Document document=SAX_BUILDER.build(new StringReader(serializedComponents),"UTF-8");
    final Element rootElement=document.getRootElement();
    if (!rootElement.getName().equals("serialized")) {
      return;
    }
    final LwContainer container=new LwContainer(JPanel.class.getName());
    final java.util.List children=rootElement.getChildren();
    for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
      final Element e=(Element)iterator.next();
      final int x=Integer.parseInt(e.getAttributeValue("x"));
      final int y=Integer.parseInt(e.getAttributeValue("y"));
      xs.add(x);
      ys.add(y);
      final Element componentElement=(Element)e.getChildren().get(0);
      final LwComponent lwComponent=LwContainer.createComponentFromTag(componentElement);
      container.addComponent(lwComponent);
      lwComponent.read(componentElement,provider);
      lwComponent.setBinding(null);
      lwComponent.setId(myEditor.generateId());
      FormEditingUtil.iterate(lwComponent,new FormEditingUtil.ComponentVisitor<LwComponent>(){
        public boolean visit(        final LwComponent c){
          c.setBinding(null);
          c.setId(myEditor.generateId());
          return true;
        }
      }
);
      final Module module=myEditor.getModule();
      final ClassLoader loader=LoaderFactory.getInstance(module.getProject()).getLoader(myEditor.getFile());
      final RadComponent radComponent=XmlReader.createComponent(module,lwComponent,loader);
      componentsToPaste.add(radComponent);
    }
  }
 catch (  Exception e) {
  }
  final RadRootContainer rootContainer=myEditor.getRootContainer();
  FormEditingUtil.clearSelection(rootContainer);
  for (int i=0; i < componentsToPaste.size(); i++) {
    final RadComponent component=componentsToPaste.get(i);
    final int delta=myRecentyCopiedStringCount * 10;
    component.setLocation(new Point(xs.get(i) + delta,ys.get(i) + delta));
    rootContainer.addComponent(component);
    FormEditingUtil.iterate(component,new FormEditingUtil.ComponentVisitor<RadComponent>(){
      public boolean visit(      final RadComponent c){
        c.setSelected(true);
        return true;
      }
    }
);
  }
  myEditor.refreshAndSave(true);
}
