{
  final String serializedComponents=getSerializedComponents();
  if (serializedComponents == null) {
    return;
  }
  if (serializedComponents.equals(myRecentyCopiedString)) {
    myRecentyCopiedStringCount++;
  }
 else {
    myRecentyCopiedString=serializedComponents;
    myRecentyCopiedStringCount=1;
  }
  final ArrayList<RadComponent> componentsToPaste=new ArrayList<RadComponent>();
  final TIntArrayList xs=new TIntArrayList();
  final TIntArrayList ys=new TIntArrayList();
  loadComponentsToPaste(myEditor,serializedComponents,xs,ys,componentsToPaste);
  final RadRootContainer rootContainer=myEditor.getRootContainer();
  final ArrayList<RadComponent> selectedComponents=FormEditingUtil.getSelectedComponents(myEditor);
  if (selectedComponents.size() == 1 && selectedComponents.get(0).canDrop(selectedComponents.size())) {
    RadComponent component=selectedComponents.get(0);
    if (component instanceof RadContainer) {
      RadContainer container=(RadContainer)component;
      container.drop(componentsToPaste.toArray(new RadComponent[componentsToPaste.size()]));
    }
  }
 else {
    FormEditingUtil.clearSelection(rootContainer);
    for (int i=0; i < componentsToPaste.size(); i++) {
      final RadComponent component=componentsToPaste.get(i);
      final int delta=myRecentyCopiedStringCount * 10;
      component.setLocation(new Point(xs.get(i) + delta,ys.get(i) + delta));
      rootContainer.addComponent(component);
      IComponentUtil.iterate(component,new IComponentUtil.ComponentVisitor<RadComponent>(){
        public boolean visit(        final RadComponent c){
          c.setSelected(true);
          return true;
        }
      }
);
    }
  }
  myEditor.refreshAndSave(true);
}
