{
  final PsiPropertiesProvider provider=new PsiPropertiesProvider(editor.getModule());
  try {
    final Document document=SAX_BUILDER.build(new StringReader(serializedComponents),"UTF-8");
    final Element rootElement=document.getRootElement();
    if (!rootElement.getName().equals(ELEMENT_SERIALIZED)) {
      return false;
    }
    final LwContainer container=new LwContainer(JPanel.class.getName());
    final java.util.List children=rootElement.getChildren();
    for (    final Object aChildren : children) {
      final Element e=(Element)aChildren;
      final int x=Integer.parseInt(e.getAttributeValue(ATTRIBUTE_X));
      final int y=Integer.parseInt(e.getAttributeValue(ATTRIBUTE_Y));
      xs.add(x);
      ys.add(y);
      final Element componentElement=(Element)e.getChildren().get(0);
      final LwComponent lwComponent=LwContainer.createComponentFromTag(componentElement);
      container.addComponent(lwComponent);
      lwComponent.read(componentElement,provider);
      lwComponent.setBinding(null);
      lwComponent.setId(editor.generateId());
      FormEditingUtil.iterate(lwComponent,new FormEditingUtil.ComponentVisitor<LwComponent>(){
        public boolean visit(        final LwComponent c){
          c.setBinding(null);
          c.setId(editor.generateId());
          return true;
        }
      }
);
      final Module module=editor.getModule();
      final ClassLoader loader=LoaderFactory.getInstance(module.getProject()).getLoader(editor.getFile());
      final RadComponent radComponent=XmlReader.createComponent(module,lwComponent,loader);
      componentsToPaste.add(radComponent);
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
