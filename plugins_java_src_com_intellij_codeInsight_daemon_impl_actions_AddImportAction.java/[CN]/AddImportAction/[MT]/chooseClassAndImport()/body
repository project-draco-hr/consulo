{
  CodeInsightUtil.sortIdenticalShortNameClasses(myTargetClasses,myReference);
  final BaseListPopupStep<PsiClass> step=new BaseListPopupStep<PsiClass>(QuickFixBundle.message("class.to.import.chooser.title"),myTargetClasses){
    @Override public boolean isAutoSelectionEnabled(){
      return false;
    }
    @Override public boolean isSpeedSearchEnabled(){
      return true;
    }
    @Override public PopupStep onChosen(    PsiClass selectedValue,    boolean finalChoice){
      if (selectedValue == null) {
        return FINAL_CHOICE;
      }
      if (finalChoice) {
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        addImport(myReference,selectedValue);
        return FINAL_CHOICE;
      }
      String qname=selectedValue.getQualifiedName();
      if (qname == null)       return FINAL_CHOICE;
      List<String> toExclude=getAllExcludableStrings(qname);
      return new BaseListPopupStep<String>(null,toExclude){
        @NotNull @Override public String getTextFor(        String value){
          return "Exclude '" + value + "' from auto-import";
        }
        @Override public PopupStep onChosen(        String selectedValue,        boolean finalChoice){
          if (finalChoice) {
            excludeFromImport(myProject,selectedValue);
          }
          return super.onChosen(selectedValue,finalChoice);
        }
      }
;
    }
    @Override public boolean hasSubstep(    PsiClass selectedValue){
      return true;
    }
    @NotNull @Override public String getTextFor(    PsiClass value){
      return ObjectUtils.assertNotNull(value.getQualifiedName());
    }
    @Override public Icon getIconFor(    PsiClass aValue){
      return IconDescriptorUpdaters.getIcon(aValue,0);
    }
  }
;
  JBPopupFactory.getInstance().createListPopup(step).showInBestPositionFor(myEditor);
}
