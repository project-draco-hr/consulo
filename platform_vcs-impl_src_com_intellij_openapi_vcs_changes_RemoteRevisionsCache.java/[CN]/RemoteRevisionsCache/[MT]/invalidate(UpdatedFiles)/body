{
  final Map<String,RemoteDifferenceStrategy> strategyMap;
synchronized (myLock) {
    strategyMap=new HashMap<>(myKinds);
  }
  final Collection<String> newForTree=new LinkedList<>();
  final Collection<String> newForUsual=new LinkedList<>();
  UpdateFilesHelper.iterateAffectedFiles(updatedFiles,new Consumer<Couple<String>>(){
    public void consume(    final Couple<String> pair){
      final String vcsName=pair.getSecond();
      RemoteDifferenceStrategy strategy=strategyMap.get(vcsName);
      if (strategy == null) {
        final AbstractVcs vcs=myVcsManager.findVcsByName(vcsName);
        if (vcs == null)         return;
        strategy=vcs.getRemoteDifferenceStrategy();
      }
      if (RemoteDifferenceStrategy.ASK_TREE_PROVIDER.equals(strategy)) {
        newForTree.add(pair.getFirst());
      }
 else {
        newForUsual.add(pair.getFirst());
      }
    }
  }
);
  myRemoteRevisionsStateCache.invalidate(newForTree);
  myRemoteRevisionsNumbersCache.invalidate(newForUsual);
}
