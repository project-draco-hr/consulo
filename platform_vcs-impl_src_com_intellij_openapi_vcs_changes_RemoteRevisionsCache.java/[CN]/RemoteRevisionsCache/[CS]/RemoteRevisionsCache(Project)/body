{
  myProject=project;
  myLfs=LocalFileSystem.getInstance();
  myLock=new Object();
  myRemoteRevisionsNumbersCache=new RemoteRevisionsNumbersCache(myProject);
  myRemoteRevisionsStateCache=new RemoteRevisionsStateCache(myProject);
  myChangeDecorator=new RemoteStatusChangeNodeDecorator(this);
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsManager.addVcsListener(this);
  myKinds=new HashMap<String,RemoteDifferenceStrategy>();
  Disposer.register(project,new Disposable(){
    public void dispose(){
      myVcsManager.removeVcsListener(RemoteRevisionsCache.this);
    }
  }
);
  updateKinds();
  final MyRecursiveUpdateRequest request=new MyRecursiveUpdateRequest(project,new Runnable(){
    public void run(){
      boolean somethingChanged=myRemoteRevisionsNumbersCache.updateStep();
      somethingChanged|=myRemoteRevisionsStateCache.updateStep();
      if (somethingChanged) {
        myProject.getMessageBus().syncPublisher(REMOTE_VERSION_CHANGED).run();
      }
    }
  }
);
  request.start();
}
