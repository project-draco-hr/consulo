{
  myProject=project;
  myLock=new Object();
  myRemoteRevisionsNumbersCache=new RemoteRevisionsNumbersCache(myProject);
  myRemoteRevisionsStateCache=new RemoteRevisionsStateCache(myProject);
  myChangeDecorator=new RemoteStatusChangeNodeDecorator(this);
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myConnection=myProject.getMessageBus().connect();
  myConnection.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED,this);
  myConnection.subscribe(ProjectLevelVcsManager.VCS_CONFIGURATION_CHANGED_IN_PLUGIN,this);
  myKinds=new HashMap<String,RemoteDifferenceStrategy>();
  Disposer.register(project,new Disposable(){
    public void dispose(){
      myConnection.disconnect();
    }
  }
);
  final VcsConfiguration vcsConfiguration=VcsConfiguration.getInstance(myProject);
  myControlledCycle=new ControlledCycle(project,new Getter<Boolean>(){
    @Override public Boolean get(){
      final boolean shouldBeDone=vcsConfiguration.isChangedOnServerEnabled() && myVcsManager.hasActiveVcss();
      if (shouldBeDone) {
        boolean somethingChanged=myRemoteRevisionsNumbersCache.updateStep();
        somethingChanged|=myRemoteRevisionsStateCache.updateStep();
        if (somethingChanged) {
          myProject.getMessageBus().syncPublisher(REMOTE_VERSION_CHANGED).run();
        }
      }
      return shouldBeDone;
    }
  }
,"Finishing \"changed on server\" update",DEFAULT_REFRESH_INTERVAL);
  updateRoots();
  if ((!myProject.isDefault()) && vcsConfiguration.isChangedOnServerEnabled()) {
    ((ProjectLevelVcsManagerImpl)myVcsManager).addInitializationRequest(VcsInitObject.REMOTE_REVISIONS_CACHE,new Runnable(){
      public void run(){
        if (!myVcsManager.hasActiveVcss() || !vcsConfiguration.isChangedOnServerEnabled())         return;
        myControlledCycle.startIfNotStarted(-1);
      }
    }
);
  }
}
