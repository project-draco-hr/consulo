{
  myProject=project;
  myLfs=LocalFileSystem.getInstance();
  myLock=new Object();
  myRemoteRevisionsNumbersCache=new RemoteRevisionsNumbersCache(myProject);
  myRemoteRevisionsStateCache=new RemoteRevisionsStateCache(myProject);
  myChangeDecorator=new RemoteStatusChangeNodeDecorator(this);
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsManager.addVcsListener(this);
  myKinds=new HashMap<String,RemoteDifferenceStrategy>();
  Disposer.register(project,new Disposable(){
    public void dispose(){
      myVcsManager.removeVcsListener(RemoteRevisionsCache.this);
    }
  }
);
  updateKinds();
  myControlledCycle=new ControlledCycle(project,new Getter<Boolean>(){
    public Boolean get(){
      final boolean shouldBeDone=VcsConfiguration.getInstance(myProject).CHECK_LOCALLY_CHANGED_CONFLICTS_IN_BACKGROUND;
      if (shouldBeDone) {
        boolean somethingChanged=myRemoteRevisionsNumbersCache.updateStep();
        somethingChanged|=myRemoteRevisionsStateCache.updateStep();
        if (somethingChanged) {
          myProject.getMessageBus().syncPublisher(REMOTE_VERSION_CHANGED).run();
        }
      }
      return shouldBeDone;
    }
  }
);
  if ((!myProject.isDefault()) && VcsConfiguration.getInstance(myProject).CHECK_LOCALLY_CHANGED_CONFLICTS_IN_BACKGROUND) {
    myControlledCycle.start();
  }
}
