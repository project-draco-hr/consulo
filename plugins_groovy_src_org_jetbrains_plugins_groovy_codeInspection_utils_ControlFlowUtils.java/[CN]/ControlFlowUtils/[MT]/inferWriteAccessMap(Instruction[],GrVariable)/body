{
  final Semilattice<BitSet> sem=new Semilattice<BitSet>(){
    @Override public BitSet join(    ArrayList<BitSet> ins){
      BitSet result=new BitSet(flow.length);
      for (      BitSet set : ins) {
        result.or(set);
      }
      return result;
    }
    @Override public boolean eq(    BitSet e1,    BitSet e2){
      return e1.equals(e2);
    }
  }
;
  DfaInstance<BitSet> dfa=new DfaInstance<BitSet>(){
    @Override public void fun(    BitSet bitSet,    Instruction instruction){
      if (!(instruction instanceof ReadWriteVariableInstruction))       return;
      if (!((ReadWriteVariableInstruction)instruction).isWrite())       return;
      final PsiElement element=instruction.getElement();
      if (element instanceof GrVariable && element != var)       return;
      if (element instanceof GrReferenceExpression) {
        final GrReferenceExpression ref=(GrReferenceExpression)element;
        if (ref.isQualified() || ref.resolve() != var)         return;
      }
      if (!((ReadWriteVariableInstruction)instruction).getVariableName().equals(var.getName())) {
        return;
      }
      bitSet.clear();
      bitSet.set(instruction.num());
    }
    @NotNull @Override public BitSet initial(){
      return new BitSet(flow.length);
    }
    @Override public boolean isForward(){
      return true;
    }
  }
;
  return new DFAEngine<BitSet>(flow,dfa,sem).performDFA();
}
