{
  final TableCellRenderer booleanCellRenderer=createBooleanCellRenderer();
  final TableCellRenderer displayNameCellRenderer=createDisplayNameCellRenderer();
  final TableCellRenderer languageCellRenderer=createLanguageCellRenderer();
  final Comparator<BaseInjection> languageComparator=new Comparator<BaseInjection>(){
    public int compare(    final BaseInjection o1,    final BaseInjection o2){
      return Comparing.compare(o1.getInjectedLanguageId(),o2.getInjectedLanguageId());
    }
  }
;
  final Comparator<BaseInjection> displayNameComparator=new Comparator<BaseInjection>(){
    public int compare(    final BaseInjection o1,    final BaseInjection o2){
      final int support=Comparing.compare(o1.getSupportId(),o2.getSupportId());
      if (support != 0)       return support;
      return Comparing.compare(o1.getDisplayName(),o2.getDisplayName());
    }
  }
;
  return new ColumnInfo[]{new ColumnInfo<BaseInjection,Boolean>(" "){
    @Override public Class getColumnClass(){
      return Boolean.class;
    }
    @Override public Boolean valueOf(    final BaseInjection o){
      return o.isEnabled();
    }
    @Override public boolean isCellEditable(    final BaseInjection injection){
      return true;
    }
    @Override public void setValue(    final BaseInjection injection,    final Boolean value){
      injection.setPlaceEnabled(null,value.booleanValue());
    }
    @Override public TableCellRenderer getRenderer(    final BaseInjection injection){
      return booleanCellRenderer;
    }
  }
,new ColumnInfo<BaseInjection,BaseInjection>("Display Name"){
    @Override public BaseInjection valueOf(    final BaseInjection injection){
      return injection;
    }
    @Override public Comparator<BaseInjection> getComparator(){
      return displayNameComparator;
    }
    @Override public TableCellRenderer getRenderer(    final BaseInjection injection){
      return displayNameCellRenderer;
    }
  }
,new ColumnInfo<BaseInjection,BaseInjection>("Language"){
    @Override public BaseInjection valueOf(    final BaseInjection injection){
      return injection;
    }
    @Override public Comparator<BaseInjection> getComparator(){
      return languageComparator;
    }
    @Override public TableCellRenderer getRenderer(    final BaseInjection injection){
      return languageCellRenderer;
    }
  }
};
}
