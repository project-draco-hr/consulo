{
  final Consumer<BaseInjection> consumer=new Consumer<BaseInjection>(){
    public void consume(    final BaseInjection injection){
      addInjection(injection);
    }
  }
;
  final Factory<BaseInjection> producer=new Factory<BaseInjection>(){
    public BaseInjection create(){
      return getSelectedInjection();
    }
  }
;
  for (  LanguageInjectionSupport support : InjectorUtils.getActiveInjectionSupports()) {
    myAddActions.addAll(Arrays.asList(support.createAddActions(myProject,consumer)));
    ContainerUtil.putIfNotNull(support.getId(),support.createEditAction(myProject,producer),myEditActions);
    mySupports.put(support.getId(),support);
  }
  Collections.sort(myAddActions,new Comparator<AnAction>(){
    public int compare(    final AnAction o1,    final AnAction o2){
      return Comparing.compare(o1.getTemplatePresentation().getText(),o2.getTemplatePresentation().getText());
    }
  }
);
  final DefaultActionGroup group=new DefaultActionGroup();
  final AnAction addAction=new AnAction("Add","Add",Icons.ADD_ICON){
    @Override public void update(    final AnActionEvent e){
      e.getPresentation().setEnabled(!myAddActions.isEmpty());
    }
    @Override public void actionPerformed(    final AnActionEvent e){
      performAdd(e);
    }
  }
;
  final AnAction removeAction=new AnAction("Remove","Remove",Icons.DELETE_ICON){
    @Override public void update(    final AnActionEvent e){
      e.getPresentation().setEnabled(!getSelectedInjections().isEmpty());
    }
    @Override public void actionPerformed(    final AnActionEvent e){
      performRemove();
    }
  }
;
  final AnAction editAction=new AnAction("Edit","Edit",Icons.PROPERTIES_ICON){
    @Override public void update(    final AnActionEvent e){
      final AnAction action=getEditAction();
      e.getPresentation().setEnabled(action != null);
      if (action != null)       action.update(e);
    }
    @Override public void actionPerformed(    final AnActionEvent e){
      final int row=myInjectionsTable.getSelectedRow();
      final AnAction action=getEditAction();
      action.actionPerformed(e);
      ((ListTableModel)myInjectionsTable.getModel()).fireTableDataChanged();
      myInjectionsTable.getSelectionModel().setSelectionInterval(row,row);
    }
  }
;
  group.add(addAction);
  group.add(removeAction);
  group.add(editAction);
  addAction.registerCustomShortcutSet(CommonShortcuts.INSERT,myInjectionsTable);
  removeAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myInjectionsTable);
  editAction.registerCustomShortcutSet(CommonShortcuts.ENTER,myInjectionsTable);
  group.add(new AnAction("Import","Import",IconLoader.getIcon("/actions/install.png")){
    @Override public void actionPerformed(    final AnActionEvent e){
      doImportAction(e.getDataContext());
    }
  }
);
  group.addSeparator();
  group.add(new AnAction("Enabled Selected Injections","Enabled Selected Injections",Icons.SELECT_ALL_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performSelectedInjectionsEnabled(true);
    }
  }
);
  group.add(new AnAction("Disabled Selected Injections","Disabled Selected Injections",Icons.UNSELECT_ALL_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performSelectedInjectionsEnabled(false);
    }
  }
);
  new AnAction("Toggle"){
    @Override public void actionPerformed(    final AnActionEvent e){
      performToggleAction();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),myInjectionsTable);
  return group;
}
