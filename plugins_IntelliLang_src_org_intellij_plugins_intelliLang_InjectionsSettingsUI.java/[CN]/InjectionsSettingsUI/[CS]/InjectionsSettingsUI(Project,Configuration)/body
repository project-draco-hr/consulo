{
  myProject=project;
  myConfiguration=configuration;
  myOriginalInjections=ContainerUtil.concat(myConfiguration.getActiveInjectorIds(),new Function<String,Collection<? extends BaseInjection>>(){
    public Collection<? extends BaseInjection> fun(    final String s){
      return myConfiguration.getInjections(s);
    }
  }
);
  Collections.sort(myOriginalInjections,new Comparator<BaseInjection>(){
    public int compare(    final BaseInjection o1,    final BaseInjection o2){
      final int support=Comparing.compare(o1.getSupportId(),o2.getSupportId());
      if (support != 0)       return support;
      final int lang=Comparing.compare(o1.getInjectedLanguageId(),o2.getInjectedLanguageId());
      if (lang != 0)       return lang;
      final int name=Comparing.compare(o1.getDisplayName(),o2.getDisplayName());
      return name;
    }
  }
);
  myInjections=new ArrayList<BaseInjection>();
  for (  BaseInjection injection : myOriginalInjections) {
    myInjections.add(injection.copy());
  }
  myRoot=new JPanel(new BorderLayout());
  myInjectionsTable=new InjectionsTable(myInjections);
  final JPanel tablePanel=new JPanel(new BorderLayout());
  tablePanel.add(BetterJTable.createStripedJScrollPane(myInjectionsTable),BorderLayout.CENTER);
  tablePanel.add(Box.createVerticalStrut(10),BorderLayout.SOUTH);
  final DefaultActionGroup group=new DefaultActionGroup();
  group.add(new AnAction("Add","Add",Icons.ADD_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performAdd(e);
    }
  }
);
  group.add(new AnAction("Remove","Remove",Icons.DELETE_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performRemove();
    }
  }
);
  group.add(new AnAction("Import","Import",IconLoader.getIcon("/actions/install.png")){
    @Override public void actionPerformed(    final AnActionEvent e){
      doImportAction(e.getDataContext());
    }
  }
);
  group.addSeparator();
  group.add(new AnAction("Enabled Selected Injections","Enabled Selected Injections",Icons.SELECT_ALL_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performSelectedInjectionsEnabled(true);
    }
  }
);
  group.add(new AnAction("Disabled Selected Injections","Disabled Selected Injections",Icons.UNSELECT_ALL_ICON){
    @Override public void actionPerformed(    final AnActionEvent e){
      performSelectedInjectionsEnabled(false);
    }
  }
);
  new AnAction("Toggle"){
    @Override public void actionPerformed(    final AnActionEvent e){
      performToggleAction();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),myInjectionsTable);
  myRoot.add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent(),BorderLayout.NORTH);
  myRoot.add(tablePanel,BorderLayout.CENTER);
}
