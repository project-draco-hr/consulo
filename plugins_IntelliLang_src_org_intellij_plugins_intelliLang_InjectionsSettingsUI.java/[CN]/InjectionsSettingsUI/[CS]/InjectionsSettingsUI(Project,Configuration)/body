{
  myProject=project;
  myConfiguration=configuration;
  myOriginalInjections=ContainerUtil.concat(InjectorUtils.getActiveInjectionSupportIds(),new Function<String,Collection<? extends BaseInjection>>(){
    public Collection<? extends BaseInjection> fun(    final String s){
      return ContainerUtil.findAll(myConfiguration.getInjections(s),new Condition<BaseInjection>(){
        public boolean value(        final BaseInjection injection){
          return InjectedLanguage.findLanguageById(injection.getInjectedLanguageId()) != null;
        }
      }
);
    }
  }
);
  sortInjections(myOriginalInjections);
  myInjections=new ArrayList<BaseInjection>();
  for (  BaseInjection injection : myOriginalInjections) {
    myInjections.add(injection.copy());
  }
  myRoot=new JPanel(new BorderLayout());
  myInjectionsTable=new InjectionsTable(myInjections);
  final JPanel tablePanel=new JPanel(new BorderLayout());
  tablePanel.add(BetterJTable.createStripedJScrollPane(myInjectionsTable),BorderLayout.CENTER);
  final DefaultActionGroup group=createActions();
  myToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  myToolbar.setTargetComponent(myInjectionsTable);
  myRoot.add(myToolbar.getComponent(),BorderLayout.NORTH);
  myRoot.add(tablePanel,BorderLayout.CENTER);
  myCountLabel=new JLabel();
  myCountLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  myCountLabel.setForeground(SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES.getFgColor());
  myRoot.add(myCountLabel,BorderLayout.SOUTH);
  updateCountLabel();
}
