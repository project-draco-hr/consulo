{
  CheckUtil.checkWritable(file);
  if (!SourceTreeToPsiMap.hasTreeElement(file)) {
    return;
  }
  ASTNode treeElement=SourceTreeToPsiMap.psiElementToTree(file);
  if (treeElement instanceof CompositeElement) {
    ChameleonTransforming.transformChildren(treeElement,true);
  }
  FileType fileType=file.getFileType();
  Helper helper=new Helper(fileType,myProject);
  final CodeFormatterFacade codeFormatter=new CodeFormatterFacade(getSettings(),helper);
  final PsiElement start=findElementInTreeWithFormatterEnabled(file.getContainingFile(),startOffset);
  final PsiElement end=findElementInTreeWithFormatterEnabled(file.getContainingFile(),endOffset);
  boolean formatFromStart=startOffset == 0;
  boolean formatToEnd=endOffset == file.getTextLength();
  final SmartPsiElementPointer startPointer=start == null ? null : SmartPointerManager.getInstance(getProject()).createSmartPsiElementPointer(start);
  final SmartPsiElementPointer endPointer=end == null ? null : SmartPointerManager.getInstance(getProject()).createSmartPsiElementPointer(end);
  codeFormatter.processText(file,startOffset,endOffset);
  final PsiElement startElement=startPointer == null ? null : startPointer.getElement();
  final PsiElement endElement=endPointer == null ? null : endPointer.getElement();
  if ((startElement != null || formatFromStart) && (endElement != null || formatToEnd)) {
    postProcessText(file,new TextRange(formatFromStart ? 0 : startElement.getTextRange().getStartOffset(),formatToEnd ? file.getTextLength() : endElement.getTextRange().getEndOffset()));
  }
}
