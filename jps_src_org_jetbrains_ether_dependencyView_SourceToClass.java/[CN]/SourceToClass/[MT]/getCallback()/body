{
  return new Callbacks.Backend(){
    private final Set<String> affected=new HashSet<String>();
    public Set<String> getAffectedFiles(){
      return affected;
    }
    public void begin(){
      affected.clear();
    }
    public void end(){
    }
    public void associate(    String classFileName,    String sourceFileName,    ClassReader cr){
      classFileName=project.getRelativePath(classFileName);
      sourceFileName=project.getRelativePath(sourceFileName);
      Set<ClassRepr> classes=mapping.get(sourceFileName);
      final Pair<ClassRepr,Set<Usage>> result=ClassfileAnalyzer.analyze(classFileName,cr);
      final ClassRepr repr=result.fst;
      final Set<Usage> localUsages=result.snd;
      if (repr != null) {
        if (classes == null) {
          classes=new HashSet<ClassRepr>();
          classes.add(repr);
          mapping.put(sourceFileName,classes);
        }
 else {
          if (affected.contains(sourceFileName)) {
            classes.add(repr);
          }
 else {
            classes.clear();
            classes.add(repr);
            affected.add(sourceFileName);
          }
        }
      }
      Set<Usage> u=usages.get(sourceFileName);
      if (u == null) {
        u=new HashSet<Usage>();
      }
      u.addAll(localUsages);
      usages.put(sourceFileName,u);
    }
    public void associate(    final Set<ClassRepr> classes,    final Set<Usage> u,    final String sourceFileName){
      mapping.put(sourceFileName,classes);
      usages.put(sourceFileName,u);
    }
  }
;
}
