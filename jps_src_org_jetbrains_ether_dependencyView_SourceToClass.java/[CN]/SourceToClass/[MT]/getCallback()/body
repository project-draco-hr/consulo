{
  return new Callbacks.Backend(){
    private final Set<String> affected=new HashSet<String>();
    public void processClassfile(    final String classFileName,    final ClassReader c){
      ClassfileAnalyzer.analyze(c);
    }
    public Set<String> getAffectedFiles(){
      return affected;
    }
    public void begin(){
      affected.clear();
    }
    public void end(){
    }
    public void associate(    String classFileName,    String sourceFileName){
      classFileName=project.getRelativePath(classFileName);
      sourceFileName=project.getRelativePath(sourceFileName);
      Set<String> classes=mapping.get(sourceFileName);
      if (classes == null) {
        classes=new HashSet<String>();
        classes.add(classFileName);
        mapping.put(sourceFileName,classes);
      }
 else {
        if (affected.contains(sourceFileName)) {
          classes.add(classFileName);
        }
 else {
          classes.clear();
          classes.add(classFileName);
          affected.add(sourceFileName);
        }
      }
    }
  }
;
}
