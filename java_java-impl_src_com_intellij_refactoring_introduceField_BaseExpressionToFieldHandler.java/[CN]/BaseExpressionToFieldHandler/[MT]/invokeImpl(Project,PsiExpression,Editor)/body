{
  final PsiElement element=getPhysicalElement(selectedExpr);
  final PsiFile file=element.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + selectedExpr);
  }
  myParentClass=getParentClass(selectedExpr);
  if (myParentClass == null) {
    if (JspPsiUtil.isInJspFile(file)) {
      CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.message("error.not.supported.for.jsp",getRefactoringName()),getRefactoringName(),getHelpID());
      return false;
    }
 else {
      LOG.assertTrue(false);
      return false;
    }
  }
  if (!validClass(myParentClass,editor)) {
    return false;
  }
  PsiType tempType=getTypeByExpression(selectedExpr);
  if (tempType == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("unknown.expression.type"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,getRefactoringName(),getHelpID());
    return false;
  }
  if (PsiType.VOID.equals(tempType)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,getRefactoringName(),getHelpID());
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  final PsiClass parentClass=myParentClass;
  final OccurenceManager occurenceManager=createOccurenceManager(selectedExpr,parentClass);
  final PsiExpression[] occurrences=occurenceManager.getOccurences();
  final PsiElement anchorStatementIfAll=occurenceManager.getAnchorStatementForAll();
  List<RangeHighlighter> highlighters=null;
  if (editor != null) {
    highlighters=RefactoringUtil.highlightAllOccurences(project,occurrences,editor);
  }
  PsiElement tempAnchorElement=RefactoringUtil.getParentExpressionAnchorElement(selectedExpr);
  if (!Comparing.strEqual(IntroduceConstantHandler.REFACTORING_NAME,getRefactoringName()) && IntroduceVariableBase.checkAnchorBeforeThisOrSuper(project,editor,tempAnchorElement,getRefactoringName(),getHelpID()))   return false;
  final Settings settings=showRefactoringDialog(project,editor,myParentClass,selectedExpr,tempType,occurrences,tempAnchorElement,anchorStatementIfAll);
  if (settings == null)   return false;
  if (settings.getForcedType() != null) {
    tempType=settings.getForcedType();
  }
  final PsiType type=tempType;
  final String fieldName=settings.getFieldName();
  final PsiElement anchorElementIfOne=tempAnchorElement;
  final boolean replaceAll=settings.isReplaceAll();
  if (replaceAll) {
    tempAnchorElement=anchorStatementIfAll;
  }
  final PsiElement anchorElement=tempAnchorElement;
  if (editor != null) {
    HighlightManager highlightManager=HighlightManager.getInstance(project);
    for (    RangeHighlighter highlighter : highlighters) {
      highlightManager.removeSegmentHighlighter(editor,highlighter);
    }
  }
  PsiElement anchor=getNormalizedAnchor(anchorElement);
  final Boolean outOfCodeBlockExtraction=selectedExpr.getUserData(ElementToWorkOn.OUT_OF_CODE_BLOCK);
  boolean tempDeleteSelf=outOfCodeBlockExtraction != null;
  if (element.getParent() instanceof PsiExpressionStatement && anchor.equals(anchorElement)) {
    PsiStatement statement=(PsiStatement)element.getParent();
    if (statement.getParent() instanceof PsiCodeBlock) {
      tempDeleteSelf=true;
    }
  }
  final boolean deleteSelf=tempDeleteSelf;
  final Runnable runnable=new Runnable(){
    public void run(){
      try {
        PsiExpression expr=selectedExpr;
        InitializationPlace initializerPlace=settings.getInitializerPlace();
        final PsiLocalVariable localVariable=settings.getLocalVariable();
        final boolean deleteLocalVariable=settings.isDeleteLocalVariable();
        @Nullable PsiExpression initializer;
        if (localVariable != null) {
          initializer=localVariable.getInitializer();
        }
 else {
          initializer=expr;
        }
        final PsiMethod enclosingConstructor=getEnclosingConstructor(myParentClass,anchorElement);
        final PsiClass destClass=settings.getDestinationClass() == null ? myParentClass : settings.getDestinationClass();
        if (!CommonRefactoringUtil.checkReadOnlyStatus(project,destClass.getContainingFile()))         return;
        if (initializer != null) {
          ChangeContextUtil.encodeContextInfo(initializer,true);
        }
        PsiField field=settings.isIntroduceEnumConstant() ? EnumConstantsUtil.createEnumConstant(destClass,fieldName,initializer) : createField(fieldName,type,initializer,initializerPlace == InitializationPlace.IN_FIELD_DECLARATION && initializer != null);
        PsiElement finalAnchorElement=null;
        if (destClass == myParentClass) {
          for (finalAnchorElement=anchorElement; finalAnchorElement != null && finalAnchorElement.getParent() != destClass; finalAnchorElement=finalAnchorElement.getParent()) {
          }
        }
        PsiMember anchorMember=finalAnchorElement instanceof PsiMember ? (PsiMember)finalAnchorElement : null;
        setModifiers(field,settings,settings.isDeclareStatic());
        if ((anchorMember instanceof PsiField) && anchorMember.hasModifierProperty(PsiModifier.STATIC) == field.hasModifierProperty(PsiModifier.STATIC)) {
          field=(PsiField)destClass.addBefore(field,anchorMember);
        }
 else         if (anchorMember instanceof PsiClassInitializer) {
          field=(PsiField)destClass.addBefore(field,anchorMember);
          destClass.addBefore(CodeEditUtil.createLineFeed(field.getManager()),anchorMember);
        }
 else {
          final PsiField forwardReference=checkForwardRefs(initializer);
          if (forwardReference != null) {
            field=(PsiField)destClass.addAfter(field,forwardReference);
          }
 else {
            field=(PsiField)destClass.add(field);
          }
        }
        if (!settings.isIntroduceEnumConstant()) {
          VisibilityUtil.fixVisibility(occurrences,field,settings.getFieldVisibility());
        }
        PsiStatement assignStatement=null;
        PsiElement anchorElementHere=null;
        if (initializerPlace == InitializationPlace.IN_CURRENT_METHOD && initializer != null || initializerPlace == InitializationPlace.IN_CONSTRUCTOR && enclosingConstructor != null && initializer != null) {
          if (replaceAll) {
            if (enclosingConstructor != null) {
              final PsiElement anchorInConstructor=occurenceManager.getAnchorStatementForAllInScope(enclosingConstructor);
              anchorElementHere=anchorInConstructor != null ? anchorInConstructor : anchorStatementIfAll;
            }
 else {
              anchorElementHere=anchorStatementIfAll;
            }
          }
 else {
            anchorElementHere=anchorElementIfOne;
          }
          assignStatement=createAssignment(field,initializer,anchorElementHere);
          if (!IntroduceVariableBase.isLoopOrIf(anchorElementHere.getParent())) {
            anchorElementHere.getParent().addBefore(assignStatement,getNormalizedAnchor(anchorElementHere));
          }
        }
        if (initializerPlace == InitializationPlace.IN_CONSTRUCTOR && initializer != null) {
          addInitializationToConstructors(initializer,field,enclosingConstructor);
        }
        if (initializerPlace == InitializationPlace.IN_SETUP_METHOD && initializer != null) {
          addInitializationToSetUp(initializer,field,occurenceManager,replaceAll);
        }
        if (expr.getParent() instanceof PsiParenthesizedExpression) {
          expr=(PsiExpression)expr.getParent();
        }
        if (outOfCodeBlockExtraction != null) {
          final int endOffset=selectedExpr.getUserData(ElementToWorkOn.TEXT_RANGE).getEndOffset();
          PsiElement endElement=element.getContainingFile().findElementAt(endOffset);
          while (true) {
            final PsiElement parent=endElement.getParent();
            if (parent instanceof PsiClass)             break;
            endElement=parent;
          }
          element.getParent().deleteChildRange(element,PsiTreeUtil.skipSiblingsBackward(endElement,PsiWhiteSpace.class));
        }
 else         if (deleteSelf) {
          element.getParent().delete();
        }
        if (replaceAll) {
          List<PsiElement> array=new ArrayList<PsiElement>();
          for (          PsiExpression occurrence : occurrences) {
            if (occurrence instanceof PsiExpression) {
              occurrence=RefactoringUtil.outermostParenthesizedExpression(occurrence);
            }
            if (deleteSelf && occurrence.equals(expr))             continue;
            final PsiElement replaced=RefactoringUtil.replaceOccurenceWithFieldRef(occurrence,field,destClass);
            if (replaced != null) {
              array.add(replaced);
            }
          }
          if (editor != null) {
            if (!ApplicationManager.getApplication().isUnitTestMode()) {
              PsiElement[] exprsToHighlight=PsiUtilBase.toPsiElementArray(array);
              HighlightManager highlightManager=HighlightManager.getInstance(project);
              highlightManager.addOccurrenceHighlights(editor,exprsToHighlight,highlightAttributes(),true,null);
              WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
            }
          }
        }
 else {
          if (!deleteSelf) {
            expr=RefactoringUtil.outermostParenthesizedExpression(expr);
            RefactoringUtil.replaceOccurenceWithFieldRef(expr,field,destClass);
          }
        }
        if (anchorElementHere != null && IntroduceVariableBase.isLoopOrIf(anchorElementHere.getParent())) {
          IntroduceVariableBase.putStatementInLoopBody(assignStatement,anchorElementHere.getParent(),anchorElementHere);
        }
        if (localVariable != null) {
          if (deleteLocalVariable) {
            localVariable.normalizeDeclaration();
            localVariable.getParent().delete();
          }
        }
        if (initializer != null) {
          ChangeContextUtil.clearContextInfo(initializer);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    private PsiField checkForwardRefs(    PsiExpression initializer){
      final PsiField[] refConstantFields=new PsiField[1];
      initializer.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitReferenceExpression(        PsiReferenceExpression expression){
          super.visitReferenceExpression(expression);
          final PsiElement resolve=expression.resolve();
          if (resolve instanceof PsiField && ((PsiField)resolve).hasModifierProperty(PsiModifier.FINAL) && PsiTreeUtil.isAncestor(myParentClass,resolve,false)&& ((PsiField)resolve).hasInitializer()) {
            if (refConstantFields[0] == null || refConstantFields[0].getTextOffset() < resolve.getTextOffset()) {
              refConstantFields[0]=(PsiField)resolve;
            }
          }
        }
      }
);
      return refConstantFields[0];
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,getRefactoringName(),null);
  return true;
}
