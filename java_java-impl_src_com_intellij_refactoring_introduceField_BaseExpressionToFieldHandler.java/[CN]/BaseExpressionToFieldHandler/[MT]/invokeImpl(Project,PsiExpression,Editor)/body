{
  final PsiElement element=getPhysicalElement(selectedExpr);
  final PsiFile file=element.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + selectedExpr);
  }
  myParentClass=getParentClass(selectedExpr);
  if (myParentClass == null) {
    if (JspPsiUtil.isInJspFile(file)) {
      CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.message("error.not.supported.for.jsp",getRefactoringName()),getRefactoringName(),getHelpID());
      return false;
    }
 else {
      LOG.assertTrue(false);
      return false;
    }
  }
  if (!validClass(myParentClass,editor)) {
    return false;
  }
  PsiType tempType=getTypeByExpression(selectedExpr);
  if (tempType == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("unknown.expression.type"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,getRefactoringName(),getHelpID());
    return false;
  }
  if (PsiType.VOID.equals(tempType)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,getRefactoringName(),getHelpID());
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  final PsiClass parentClass=myParentClass;
  final OccurenceManager occurenceManager=createOccurenceManager(selectedExpr,parentClass);
  final PsiExpression[] occurrences=occurenceManager.getOccurences();
  final PsiElement anchorStatementIfAll=occurenceManager.getAnchorStatementForAll();
  List<RangeHighlighter> highlighters=null;
  if (editor != null) {
    highlighters=RefactoringUtil.highlightAllOccurences(project,occurrences,editor);
  }
  PsiElement tempAnchorElement=RefactoringUtil.getParentExpressionAnchorElement(selectedExpr);
  if (!Comparing.strEqual(IntroduceConstantHandler.REFACTORING_NAME,getRefactoringName()) && IntroduceVariableBase.checkAnchorBeforeThisOrSuper(project,editor,tempAnchorElement,getRefactoringName(),getHelpID()))   return false;
  final Settings settings=showRefactoringDialog(project,editor,myParentClass,selectedExpr,tempType,occurrences,tempAnchorElement,anchorStatementIfAll);
  if (settings == null)   return false;
  if (settings.getForcedType() != null) {
    tempType=settings.getForcedType();
  }
  final PsiType type=tempType;
  if (editor != null) {
    HighlightManager highlightManager=HighlightManager.getInstance(project);
    for (    RangeHighlighter highlighter : highlighters) {
      highlightManager.removeSegmentHighlighter(editor,highlighter);
    }
  }
  final Runnable runnable=new ConvertToFieldRunnable(selectedExpr,settings,type,occurrences,occurenceManager,anchorStatementIfAll,tempAnchorElement,editor,myParentClass);
  new WriteCommandAction(project,getRefactoringName()){
    @Override protected void run(    Result result) throws Throwable {
      runnable.run();
    }
  }
.execute();
  return true;
}
