{
  try {
    InitializationPlace initializerPlace=mySettings.getInitializerPlace();
    final PsiLocalVariable localVariable=mySettings.getLocalVariable();
    final boolean deleteLocalVariable=mySettings.isDeleteLocalVariable();
    @Nullable PsiExpression initializer=null;
    if (localVariable != null) {
      initializer=localVariable.getInitializer();
    }
 else     if (!(mySelectedExpr instanceof PsiReferenceExpression && ((PsiReferenceExpression)mySelectedExpr).resolve() == null)) {
      initializer=mySelectedExpr;
    }
    initializer=IntroduceVariableBase.replaceExplicitWithDiamondWhenApplicable(initializer,myType);
    final PsiMethod enclosingConstructor=getEnclosingConstructor(myParentClass,myAnchorElement);
    final PsiClass destClass=mySettings.getDestinationClass() == null ? myParentClass : mySettings.getDestinationClass();
    if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,destClass.getContainingFile()))     return;
    if (initializer != null) {
      ChangeContextUtil.encodeContextInfo(initializer,true);
    }
    myField=mySettings.isIntroduceEnumConstant() ? EnumConstantsUtil.createEnumConstant(destClass,myFieldName,initializer) : createField(myFieldName,myType,initializer,initializerPlace == InitializationPlace.IN_FIELD_DECLARATION && initializer != null,myParentClass);
    setModifiers(myField,mySettings);
    myField=appendField(initializer,initializerPlace,destClass,myParentClass,myAnchorElement,myField);
    if (!mySettings.isIntroduceEnumConstant()) {
      VisibilityUtil.fixVisibility(myOccurrences,myField,mySettings.getFieldVisibility());
    }
    PsiStatement assignStatement=null;
    PsiElement anchorElementHere=null;
    if (initializerPlace == InitializationPlace.IN_CURRENT_METHOD && initializer != null || initializerPlace == InitializationPlace.IN_CONSTRUCTOR && enclosingConstructor != null && initializer != null) {
      if (myReplaceAll) {
        if (enclosingConstructor != null) {
          final PsiElement anchorInConstructor=RefactoringUtil.getAnchorElementForMultipleExpressions(mySettings.myOccurrences,enclosingConstructor);
          anchorElementHere=anchorInConstructor != null ? anchorInConstructor : myAnchorStatementIfAll;
        }
 else {
          anchorElementHere=myAnchorStatementIfAll;
        }
      }
 else {
        anchorElementHere=myAnchorElementIfOne;
      }
      assignStatement=createAssignment(myField,initializer,anchorElementHere,myParentClass);
      if (!IntroduceVariableBase.isLoopOrIf(anchorElementHere.getParent())) {
        anchorElementHere.getParent().addBefore(assignStatement,getNormalizedAnchor(anchorElementHere));
      }
    }
    if (initializerPlace == InitializationPlace.IN_CONSTRUCTOR && initializer != null) {
      addInitializationToConstructors(initializer,myField,enclosingConstructor,myParentClass);
    }
    if (initializerPlace == InitializationPlace.IN_SETUP_METHOD && initializer != null) {
      addInitializationToSetUp(initializer,myField,myOccurrences,myReplaceAll,myParentClass);
    }
    if (mySelectedExpr.getParent() instanceof PsiParenthesizedExpression) {
      mySelectedExpr=(PsiExpression)mySelectedExpr.getParent();
    }
    if (myOutOfCodeBlockExtraction != null) {
      final int endOffset=mySelectedExpr.getUserData(ElementToWorkOn.TEXT_RANGE).getEndOffset();
      PsiElement endElement=myElement.getContainingFile().findElementAt(endOffset);
      while (true) {
        final PsiElement parent=endElement.getParent();
        if (parent instanceof PsiClass)         break;
        endElement=parent;
      }
      PsiElement last=PsiTreeUtil.skipSiblingsBackward(endElement,PsiWhiteSpace.class);
      if (last.getTextRange().getStartOffset() < myElement.getTextRange().getStartOffset()) {
        last=myElement;
      }
      myElement.getParent().deleteChildRange(myElement,last);
    }
 else     if (myDeleteSelf) {
      myElement.getParent().delete();
    }
    if (myReplaceAll) {
      List<PsiElement> array=new ArrayList<PsiElement>();
      for (      PsiExpression occurrence : myOccurrences) {
        if (occurrence instanceof PsiExpression) {
          occurrence=RefactoringUtil.outermostParenthesizedExpression(occurrence);
        }
        if (myDeleteSelf && occurrence.equals(mySelectedExpr))         continue;
        final PsiElement replaced=RefactoringUtil.replaceOccurenceWithFieldRef(occurrence,myField,destClass);
        if (replaced != null) {
          array.add(replaced);
        }
      }
      if (myEditor != null) {
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          PsiElement[] exprsToHighlight=PsiUtilBase.toPsiElementArray(array);
          HighlightManager highlightManager=HighlightManager.getInstance(myProject);
          highlightManager.addOccurrenceHighlights(myEditor,exprsToHighlight,highlightAttributes(),true,null);
          WindowManager.getInstance().getStatusBar(myProject).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
        }
      }
    }
 else {
      if (!myDeleteSelf) {
        mySelectedExpr=RefactoringUtil.outermostParenthesizedExpression(mySelectedExpr);
        RefactoringUtil.replaceOccurenceWithFieldRef(mySelectedExpr,myField,destClass);
      }
    }
    if (anchorElementHere != null && IntroduceVariableBase.isLoopOrIf(anchorElementHere.getParent())) {
      IntroduceVariableBase.putStatementInLoopBody(assignStatement,anchorElementHere.getParent(),anchorElementHere);
    }
    if (localVariable != null) {
      if (deleteLocalVariable) {
        localVariable.normalizeDeclaration();
        localVariable.getParent().delete();
      }
    }
    if (initializer != null) {
      ChangeContextUtil.clearContextInfo(initializer);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
