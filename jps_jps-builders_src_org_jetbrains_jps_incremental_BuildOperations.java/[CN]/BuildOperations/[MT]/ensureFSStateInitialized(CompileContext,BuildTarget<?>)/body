{
  final ProjectDescriptor pd=context.getProjectDescriptor();
  final Timestamps timestamps=pd.timestamps.getStorage();
  final BuildTargetConfiguration configuration=pd.getTargetsState().getTargetConfiguration(target);
  boolean isTargetConfigChange=false;
  if (context.isProjectRebuild()) {
    FSOperations.markDirtyFiles(context,target,timestamps,true,null,null);
    pd.fsState.markInitialScanPerformed(target);
    configuration.save();
  }
 else   if (context.getScope().isRecompilationForced(target) || (isTargetConfigChange=configuration.isTargetDirty()) || configuration.outputRootWasDeleted(context)) {
    initTargetFSState(context,target,true);
    IncProjectBuilder.clearOutputFiles(context,target);
    pd.dataManager.cleanTargetStorages(target);
    configuration.save();
    if (isTargetConfigChange && ModuleBuildTarget.REBUILD_ON_DEPENDENCY_CHANGE && JavaModuleBuildTargetType.PRODUCTION.equals(target.getTargetType())) {
      final String moduleName=((ModuleBuildTarget)target).getModule().getName();
      context.processMessage(new CompilerMessage("",BuildMessage.Kind.INFO,"Rebuilding module \"" + moduleName + "\" because of dependencies change"));
    }
  }
 else   if (!pd.fsState.isInitialScanPerformed(target)) {
    initTargetFSState(context,target,false);
  }
}
