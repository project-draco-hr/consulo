{
  final SliceToolwindowSettings sliceToolwindowSettings=SliceToolwindowSettings.getInstance(myProject);
  SliceUsage usage=createSliceUsage(element);
  final Content[] myContent=new Content[1];
  final SlicePanel slicePanel=new SlicePanel(myProject,usage){
    protected void close(){
      myContentManager.removeContent(myContent[0],true);
    }
    public boolean isAutoScroll(){
      return sliceToolwindowSettings.isAutoScroll();
    }
    public void setAutoScroll(    boolean autoScroll){
      sliceToolwindowSettings.setAutoScroll(autoScroll);
    }
    public boolean isPreview(){
      return sliceToolwindowSettings.isPreview();
    }
    public void setPreview(    boolean preview){
      sliceToolwindowSettings.setPreview(preview);
    }
  }
;
  PsiElement elementToSlice=element;
  if (element instanceof PsiReferenceExpression)   elementToSlice=((PsiReferenceExpression)element).resolve();
  if (elementToSlice == null)   elementToSlice=element;
  String title="<html>" + ElementDescriptionUtil.getElementDescription(elementToSlice,RefactoringDescriptionLocation.WITHOUT_PARENT) + "</html>";
  title=StringUtil.first(title,100,true);
  myContent[0]=myContentManager.getFactory().createContent(slicePanel,title,true);
  myContentManager.addContent(myContent[0]);
  myContentManager.setSelectedContent(myContent[0]);
  ToolWindowManager.getInstance(myProject).getToolWindow(TOOL_WINDOW_ID).activate(null);
}
