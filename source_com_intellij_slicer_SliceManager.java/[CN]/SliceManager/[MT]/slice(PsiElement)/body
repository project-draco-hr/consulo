{
  final SliceToolwindowSettings sliceToolwindowSettings=SliceToolwindowSettings.getInstance(myProject);
  SliceUsage usage;
  if (element instanceof PsiField) {
    usage=new SliceFieldUsage(new UsageInfo(element),null,(PsiField)element);
  }
 else   if (element instanceof PsiParameter) {
    usage=new SliceParameterUsage(new UsageInfo(element),(PsiParameter)element,null);
  }
 else {
    usage=new SliceUsage(new UsageInfo(element),null);
  }
  final Content[] myContent=new Content[1];
  final SlicePanel slicePanel=new SlicePanel(myProject,usage){
    protected void close(){
      myContentManager.removeContent(myContent[0],true);
    }
    public boolean isAutoScroll(){
      return sliceToolwindowSettings.isAutoScroll();
    }
    public void setAutoScroll(    boolean autoScroll){
      sliceToolwindowSettings.setAutoScroll(autoScroll);
    }
    public boolean isPreview(){
      return sliceToolwindowSettings.isPreview();
    }
    public void setPreview(    boolean preview){
      sliceToolwindowSettings.setPreview(preview);
    }
  }
;
  myContent[0]=myContentManager.getFactory().createContent(slicePanel,"slices",true);
  myContentManager.addContent(myContent[0]);
  myContentManager.setSelectedContent(myContent[0]);
  ToolWindowManager.getInstance(myProject).getToolWindow("Slice").activate(new Runnable(){
    public void run(){
    }
  }
);
  myContentManager.addContentManagerListener(new ContentManagerAdapter(){
    public void contentRemoved(    final ContentManagerEvent event){
      Content content=event.getContent();
      if (content == myContent[0]) {
        slicePanel.dispose();
        myContents.remove(content);
        myContentManager.removeContentManagerListener(this);
      }
    }
  }
);
  myContents.put(myContent[0],slicePanel);
}
