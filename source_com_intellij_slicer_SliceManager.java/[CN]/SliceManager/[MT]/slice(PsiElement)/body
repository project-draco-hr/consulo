{
  Module module=ModuleUtil.findModuleForPsiElement(element);
  AnalysisUIOptions analysisUIOptions=new AnalysisUIOptions();
  analysisUIOptions.SCOPE_TYPE=AnalysisScope.PROJECT;
  BaseAnalysisActionDialog dialog=new BaseAnalysisActionDialog("Dataflow to this","Analyze scope",myProject,new AnalysisScope(element.getContainingFile()),module.getName(),true,analysisUIOptions);
  dialog.show();
  if (!dialog.isOK())   return;
  AnalysisScope scope=dialog.getScope(analysisUIOptions,new AnalysisScope(myProject),myProject,module);
  final SliceToolwindowSettings sliceToolwindowSettings=SliceToolwindowSettings.getInstance(myProject);
  SliceUsage usage=createRootUsage(element,scope);
  final Content[] myContent=new Content[1];
  final SlicePanel slicePanel=new SlicePanel(myProject,usage,scope){
    protected void close(){
      myContentManager.removeContent(myContent[0],true);
    }
    public boolean isAutoScroll(){
      return sliceToolwindowSettings.isAutoScroll();
    }
    public void setAutoScroll(    boolean autoScroll){
      sliceToolwindowSettings.setAutoScroll(autoScroll);
    }
    public boolean isPreview(){
      return sliceToolwindowSettings.isPreview();
    }
    public void setPreview(    boolean preview){
      sliceToolwindowSettings.setPreview(preview);
    }
  }
;
  String title=getElementDescription(element);
  myContent[0]=myContentManager.getFactory().createContent(slicePanel,title,true);
  myContentManager.addContent(myContent[0]);
  myContentManager.setSelectedContent(myContent[0]);
  ToolWindowManager.getInstance(myProject).getToolWindow(TOOL_WINDOW_ID).activate(null);
}
