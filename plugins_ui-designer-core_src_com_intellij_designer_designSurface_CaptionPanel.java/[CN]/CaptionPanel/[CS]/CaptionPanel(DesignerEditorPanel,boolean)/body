{
  setBorder(IdeBorderFactory.createBorder(horizontal ? SideBorder.BOTTOM : SideBorder.RIGHT));
  setFocusable(true);
  myHorizontal=horizontal;
  myMainArea=designer.getSurfaceArea();
  myRootComponent=new RadVisualComponent(){
    @Override public List<RadComponent> getChildren(){
      return myRootChildren;
    }
    @Override public boolean canDelete(){
      return false;
    }
  }
;
  myRootComponent.setNativeComponent(this);
  if (horizontal) {
    myRootComponent.setBounds(0,0,100000,SIZE);
  }
 else {
    myRootComponent.setBounds(0,0,SIZE,100000);
  }
  myArea=new ComponentEditableArea(this){
    @Override protected void fireSelectionChanged(){
      super.fireSelectionChanged();
      revalidate();
      repaint();
    }
    @Override public RadComponent findTarget(    int x,    int y,    @Nullable ComponentTargetFilter filter){
      FindComponentVisitor visitor=new FindComponentVisitor(CaptionPanel.this,filter,x,y);
      myRootComponent.accept(visitor,false);
      return visitor.getResult();
    }
    @Override public InputTool findTargetTool(    int x,    int y){
      return myDecorationLayer.findTargetTool(x,y);
    }
    @Override public void showSelection(    boolean value){
      myDecorationLayer.showSelection(value);
    }
    @Override public ComponentDecorator getRootSelectionDecorator(){
      return EmptyComponentDecorator.INSTANCE;
    }
    @Override public EditOperation processRootOperation(    OperationContext context){
      return null;
    }
    @Override public FeedbackLayer getFeedbackLayer(){
      return myFeedbackLayer;
    }
    @Override public RadComponent getRootComponent(){
      return myRootComponent;
    }
    @Override public ActionGroup getPopupActions(){
      if (myActionGroup == null) {
        myActionGroup=new DefaultActionGroup();
        myActionGroup.add(ActionManager.getInstance().getAction(IdeActions.ACTION_DELETE));
      }
      return myActionGroup;
    }
    @Override public String getPopupPlace(){
      return "UIDesigner.CaptionPanel";
    }
  }
;
  add(new GlassLayer(designer.getToolProvider(),myArea),DesignerEditorPanel.LAYER_GLASS);
  myDecorationLayer=new DecorationLayer(designer,myArea);
  add(myDecorationLayer,DesignerEditorPanel.LAYER_DECORATION);
  myFeedbackLayer=new FeedbackLayer();
  add(myFeedbackLayer,DesignerEditorPanel.LAYER_FEEDBACK);
  myActionsProvider=new CommonEditActionsProvider(designer){
    @Override protected EditableArea getArea(    DataContext dataContext){
      return myArea;
    }
  }
;
  myMainArea.addSelectionListener(new ComponentSelectionListener(){
    @Override public void selectionChanged(    EditableArea area){
      update();
    }
  }
);
}
