{
  if (!(psiElement instanceof XmlToken))   return;
  final IElementType tokenType=((XmlToken)psiElement).getTokenType();
  final DomManager domManager=DomManager.getDomManager(psiElement.getProject());
  final DomElement nameElement;
  if (tokenType == XmlTokenType.XML_DATA_CHARACTERS && psiElement.getParent() instanceof XmlText && psiElement.getParent().getParent() instanceof XmlTag) {
    final XmlTag tag=(XmlTag)psiElement.getParent().getParent();
    for (    XmlText text : tag.getValue().getTextElements()) {
      if (InjectedLanguageFacadeImpl.hasInjections((PsiLanguageInjectionHost)text)) {
        return;
      }
    }
    nameElement=domManager.getDomElement(tag);
  }
 else   if (tokenType == XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN && psiElement.getParent() instanceof XmlAttributeValue && psiElement.getParent().getParent() instanceof XmlAttribute) {
    final PsiElement attributeValue=psiElement.getParent();
    if (InjectedLanguageFacadeImpl.hasInjections((PsiLanguageInjectionHost)attributeValue)) {
      return;
    }
    nameElement=domManager.getDomElement((XmlAttribute)attributeValue.getParent());
  }
 else {
    return;
  }
  if (!(nameElement instanceof GenericDomValue)) {
    return;
  }
  DomElement parent=nameElement.getParent();
  if (parent == null) {
    return;
  }
  final DomTarget target=createDomTarget(parent,nameElement);
  if (target != null) {
    consumer.consume(target);
  }
}
