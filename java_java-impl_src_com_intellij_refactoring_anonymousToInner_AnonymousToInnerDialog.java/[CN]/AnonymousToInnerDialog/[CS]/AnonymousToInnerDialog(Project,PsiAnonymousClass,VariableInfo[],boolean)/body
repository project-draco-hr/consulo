{
  super(project,true);
  myProject=project;
  myAnonClass=anonClass;
  myShowCanBeStatic=showCanBeStatic;
  setTitle(AnonymousToInnerHandler.REFACTORING_NAME);
  for (  VariableInfo info : variableInfos) {
    myVariableToInfoMap.put(info.variable,info);
  }
  myVariableData=new ParameterTablePanel.VariableData[variableInfos.length];
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(myProject);
  for (int idx=0; idx < variableInfos.length; idx++) {
    VariableInfo info=variableInfos[idx];
    String name=info.variable.getName();
    VariableKind kind=codeStyleManager.getVariableKind(info.variable);
    name=codeStyleManager.variableNameToPropertyName(name,kind);
    name=codeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
    ParameterTablePanel.VariableData data=new ParameterTablePanel.VariableData(info.variable);
    data.name=name;
    data.passAsParameter=true;
    myVariableData[idx]=data;
  }
  init();
  final String[] names;
  String name=myAnonClass.getBaseClassReference().getReferenceName();
  PsiType[] typeParameters=myAnonClass.getBaseClassReference().getTypeParameters();
  if (typeParameters.length > 0) {
    names=new String[]{StringUtil.join(typeParameters,new Function<PsiType,String>(){
      public String fun(      PsiType psiType){
        PsiType type=psiType;
        if (psiType instanceof PsiClassType) {
          type=TypeConversionUtil.erasure(psiType);
        }
        if (type == null || type.equalsToText(CommonClassNames.JAVA_LANG_OBJECT))         return "";
        if (type instanceof PsiArrayType) {
          type=type.getDeepComponentType();
        }
        return StringUtil.getShortName(type.getPresentableText());
      }
    }
,"") + name,"My" + name};
  }
 else {
    names=new String[]{"My" + name};
  }
  myNameField.setSuggestions(names);
  myNameField.selectNameWithoutExtension();
}
