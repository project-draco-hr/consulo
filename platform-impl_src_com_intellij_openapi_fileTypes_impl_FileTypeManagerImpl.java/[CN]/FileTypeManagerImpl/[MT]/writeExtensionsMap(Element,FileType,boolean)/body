{
  final List<FileNameMatcher> assocs=myPatternsTable.getAssociations(type);
  final Set<FileNameMatcher> defaultAssocs=new HashSet<FileNameMatcher>(myInitialAssociations.getAssociations(type));
  for (  FileNameMatcher matcher : assocs) {
    if (defaultAssocs.contains(matcher)) {
      defaultAssocs.remove(matcher);
    }
 else     if (shouldSave(type)) {
      if (!(type instanceof ImportedFileType) || !((ImportedFileType)type).getOriginalPatterns().contains(matcher)) {
        Element content=AbstractFileType.writeMapping(type,matcher,specifyTypeName);
        if (content != null) {
          map.addContent(content);
        }
      }
    }
  }
  for (  FileNameMatcher matcher : defaultAssocs) {
    Element content=AbstractFileType.writeRemovedMapping(type,matcher,specifyTypeName);
    if (content != null) {
      map.addContent(content);
    }
  }
  if (type instanceof ImportedFileType) {
    List<FileNameMatcher> original=((ImportedFileType)type).getOriginalPatterns();
    for (    FileNameMatcher matcher : original) {
      if (!assocs.contains(matcher)) {
        Element content=AbstractFileType.writeRemovedMapping(type,matcher,specifyTypeName);
        if (content != null) {
          map.addContent(content);
        }
      }
    }
  }
}
