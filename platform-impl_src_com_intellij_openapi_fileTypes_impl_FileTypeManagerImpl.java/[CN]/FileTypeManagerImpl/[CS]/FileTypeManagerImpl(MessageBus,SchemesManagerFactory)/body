{
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new SchemeProcessor<FileType>(){
    public FileType readScheme(    final Document document) throws InvalidDataException, IOException, JDOMException {
      if (document == null) {
        throw new InvalidDataException();
      }
      Element root=document.getRootElement();
      if (root == null || !ELEMENT_FILETYPE.equals(root.getName())) {
        throw new InvalidDataException();
      }
      Element element=root.getChild(AbstractFileType.ELEMENT_HIGHLIGHTING);
      if (element != null) {
        final SyntaxTable table=AbstractFileType.readSyntaxTable(element);
        if (table != null) {
          ReadFileType type=new ReadFileType(table,element);
          String fileTypeName=root.getAttributeValue(ATTRIBUTE_NAME);
          String fileTypeDescr=root.getAttributeValue(ATTRIBUTE_DESCRIPTION);
          String iconPath=root.getAttributeValue(ATTRIBUTE_ICON);
          setFileTypeAttributes(fileTypeName,fileTypeDescr,iconPath,type);
          return type;
        }
      }
      return null;
    }
    public boolean shouldBeSaved(    final FileType fileType){
      return shouldBeSavedToFile(fileType);
    }
    public void renameScheme(    final String name,    final FileType scheme){
      if (scheme instanceof UserFileType) {
        ((UserFileType)scheme).setName(name);
      }
    }
    public void showReadErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
      LOG.debug(e);
    }
    public void showWriteErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
      LOG.debug(e);
    }
    public Document writeScheme(    final FileType fileType) throws WriteExternalException {
      Element root=new Element(ELEMENT_FILETYPE);
      writeHeader(root,fileType);
      ((JDOMExternalizable)fileType).writeExternal(root);
      Element map=new Element(ELEMENT_EXTENSIONMAP);
      root.addContent(map);
      writeExtensionsMap(map,fileType,false);
      return new Document(root);
    }
    public void initScheme(    final FileType scheme){
    }
  }
,RoamingType.PER_USER);
  for (  final Pair<FileType,String> pair : ourStandardFileTypes.values()) {
    registerFileTypeWithoutNotification(pair.first,parse(pair.second));
  }
  if (loadAllFileTypes()) {
    restoreStandardFileExtensions();
  }
  myMessageBus=bus;
}
