{
  try {
    PsiReferenceExpression classReferenceExpression=myFactory.createReferenceExpression(myTargetClass);
    PsiReferenceExpression qualifiedMethodReference=(PsiReferenceExpression)myFactory.createExpressionFromText("A." + myFactoryName,null);
    PsiMethod factoryMethod=(PsiMethod)myTargetClass.add(createFactoryMethod());
    if (myConstructor != null) {
      PsiUtil.setModifierProperty(myConstructor,PsiModifier.PRIVATE,true);
      VisibilityUtil.escalateVisibility(myConstructor,factoryMethod);
      for (      PsiElement place : myNonNewConstructorUsages) {
        VisibilityUtil.escalateVisibility(myConstructor,place);
      }
    }
    if (myConstructor == null) {
      PsiMethod constructor=myFactory.createConstructor();
      PsiUtil.setModifierProperty(constructor,PsiModifier.PRIVATE,true);
      constructor=(PsiMethod)getConstructorContainingClass().add(constructor);
      VisibilityUtil.escalateVisibility(constructor,myTargetClass);
    }
    for (    UsageInfo usage : usages) {
      PsiNewExpression newExpression=(PsiNewExpression)usage.getElement();
      if (newExpression == null)       continue;
      VisibilityUtil.escalateVisibility(factoryMethod,newExpression);
      PsiMethodCallExpression factoryCall=(PsiMethodCallExpression)myFactory.createExpressionFromText(myFactoryName + "()",newExpression);
      factoryCall.getArgumentList().replace(newExpression.getArgumentList());
      boolean replaceMethodQualifier=false;
      PsiExpression newQualifier=newExpression.getQualifier();
      PsiElement resolvedFactoryMethod=factoryCall.getMethodExpression().resolve();
      if (resolvedFactoryMethod != factoryMethod || newQualifier != null) {
        factoryCall.getMethodExpression().replace(qualifiedMethodReference);
        replaceMethodQualifier=true;
      }
      if (replaceMethodQualifier) {
        if (newQualifier == null) {
          factoryCall.getMethodExpression().getQualifierExpression().replace(classReferenceExpression);
        }
 else {
          factoryCall.getMethodExpression().getQualifierExpression().replace(newQualifier);
        }
      }
      newExpression.replace(factoryCall);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
