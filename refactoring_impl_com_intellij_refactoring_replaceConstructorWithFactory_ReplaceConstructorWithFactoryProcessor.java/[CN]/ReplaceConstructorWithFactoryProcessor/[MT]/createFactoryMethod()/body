{
  final PsiClass containingClass=getConstructorContainingClass();
  PsiClassType type=myFactory.createType(containingClass,PsiSubstitutor.EMPTY);
  final PsiMethod factoryMethod=myFactory.createMethod(myFactoryName,type);
  if (myConstructor != null) {
    factoryMethod.getParameterList().replace(myConstructor.getParameterList());
    factoryMethod.getThrowsList().replace(myConstructor.getThrowsList());
    Collection<String> names=new HashSet<String>();
    for (    PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(myConstructor)) {
      if (!names.contains(typeParameter.getName())) {
        names.add(typeParameter.getName());
        factoryMethod.getTypeParameterList().addAfter(typeParameter,null);
      }
    }
  }
  PsiReturnStatement returnStatement=(PsiReturnStatement)myFactory.createStatementFromText("return new A();",null);
  PsiNewExpression newExpression=(PsiNewExpression)returnStatement.getReturnValue();
  PsiJavaCodeReferenceElement classRef=myFactory.createReferenceElementByType(type);
  newExpression.getClassReference().replace(classRef);
  final PsiExpressionList argumentList=newExpression.getArgumentList();
  PsiParameter[] params=factoryMethod.getParameterList().getParameters();
  for (  PsiParameter parameter : params) {
    PsiExpression paramRef=myFactory.createExpressionFromText(parameter.getName(),null);
    argumentList.add(paramRef);
  }
  factoryMethod.getBody().add(returnStatement);
  factoryMethod.getModifierList().setModifierProperty(getDefaultFactoryVisibility(),true);
  if (!myIsInner) {
    factoryMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
  }
  return (PsiMethod)CodeStyleManager.getInstance(myProject).reformat(factoryMethod);
}
