{
  FoldingModel foldingModel=myEditor.getFoldingModel();
  Document document=myEditor.getDocument();
  CharSequence text=document.getCharsSequence();
  int line=document.getLineNumber(offset);
  int lineStartOffset=document.getLineStartOffset(line);
  FoldRegion region=foldingModel.getCollapsedRegionAtOffset(lineStartOffset);
  while (region != null && region.getStartOffset() != lineStartOffset) {
    line=document.getLineNumber(region.getStartOffset());
    lineStartOffset=document.getLineStartOffset(line);
    region=foldingModel.getCollapsedRegionAtOffset(lineStartOffset);
  }
  Context context=new Context(line,getSoftWrapIntroducedLinesBefore(lineStartOffset),getFoldedLinesBefore(lineStartOffset));
  myFontTypeProvider.init(lineStartOffset);
  context.fontType=myFontTypeProvider.getFontType(lineStartOffset);
  for (int i=lineStartOffset; i <= offset; i++) {
    TextChangeImpl softWrap=myStorage.getSoftWrap(i);
    if (softWrap != null) {
      context.beforeSoftWrap();
      CharSequence softWrapText=softWrap.getText();
      for (int k=0; k < softWrapText.length(); k++) {
        context.onSoftWrapSymbol(softWrapText.charAt(k));
      }
      context.afterSoftWrap();
    }
    if (i == offset) {
      break;
    }
    region=foldingModel.getCollapsedRegionAtOffset(i);
    if (region != null) {
      processFoldRegion(context,region,offset);
      if (offset <= region.getEndOffset()) {
        break;
      }
      i=region.getEndOffset();
    }
    context.fontType=myFontTypeProvider.getFontType(i);
    context.onNonSoftWrapSymbol(text.charAt(i));
  }
  return new LogicalPosition(context.logicalLine,context.logicalColumn,context.softWrapLinesBefore,context.targetSoftWrapLines,context.softWrapColumnDiff,getFoldedLinesBefore(offset),context.foldingColumnDiff);
}
