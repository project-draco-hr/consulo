{
  int visualFoldingPlaceholderWidth=region.getPlaceholderText().length();
  if (visualLine == targetVisualPosition.line && visualColumn + visualFoldingPlaceholderWidth > targetVisualPosition.column) {
    return build();
  }
  CharSequence text=myEditor.getDocument().getCharsSequence();
  boolean multiline=false;
  for (int i=region.getStartOffset(); i < region.getEndOffset(); ) {
    int lineFeedOffset=CharArrayUtil.shiftForwardUntil(text,i,"\n");
    if (lineFeedOffset < region.getEndOffset()) {
      logicalLine++;
      foldedLines++;
      logicalColumn=0;
      softWrapLinesBefore+=targetSoftWrapLines;
      targetSoftWrapLines=0;
      softWrapColumnDiff=0;
      i=lineFeedOffset + 1;
      multiline=true;
    }
 else {
      if (multiline) {
        logicalColumn=myTextRepresentationHelper.toVisualColumnSymbolsNumber(text,i,region.getEndOffset(),0);
      }
 else {
        logicalColumn+=myTextRepresentationHelper.toVisualColumnSymbolsNumber(text,i,region.getEndOffset(),x);
      }
      foldingColumnDiff=visualColumn + visualFoldingPlaceholderWidth - logicalColumn - softWrapColumnDiff;
      i=region.getEndOffset();
    }
  }
  visualColumn+=visualFoldingPlaceholderWidth;
  x+=visualFoldingPlaceholderWidth * myTextRepresentationHelper.charWidth(' ',x,Font.PLAIN);
  if (visualLine == targetVisualPosition.line && visualColumn == targetVisualPosition.column) {
    return build();
  }
  return null;
}
