{
  super.visitDocTag(tag);
  final String name=tag.getName();
  if ("link".equals(name) || "linkplain".equals(name)) {
    if (!(tag instanceof PsiInlineDocTag)) {
      return;
    }
  }
 else   if ("see".equals(name)) {
    if (tag instanceof PsiInlineDocTag) {
      return;
    }
  }
  final PsiElement[] dataElements=tag.getDataElements();
  if (dataElements.length == 0) {
    return;
  }
  final PsiElement firstElement=dataElements[0];
  if (firstElement == null) {
    return;
  }
  PsiReference reference=firstElement.getReference();
  if (reference == null) {
    final PsiElement[] children=firstElement.getChildren();
    if (children.length == 0) {
      return;
    }
    final PsiElement child=children[0];
    if (!(child instanceof PsiReference)) {
      return;
    }
    reference=(PsiReference)child;
  }
  final PsiElement target=reference.resolve();
  if (target == null) {
    return;
  }
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(tag,PsiMethod.class);
  if (target.equals(containingMethod)) {
    registerError(tag,"@" + name);
    return;
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(tag,PsiClass.class);
  if (target.equals(containingClass)) {
    registerError(tag,"@" + name);
    return;
  }
  if (containingMethod == null) {
    return;
  }
  if (!(target instanceof PsiMethod)) {
    return;
  }
  final PsiMethod method=(PsiMethod)target;
  if (!isSuperMethod(method,containingMethod)) {
    return;
  }
  registerError(tag,"@" + name);
}
