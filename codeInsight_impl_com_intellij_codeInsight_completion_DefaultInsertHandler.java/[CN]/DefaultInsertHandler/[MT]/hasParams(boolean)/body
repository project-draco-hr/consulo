{
  boolean hasParms=false;
  if (myLookupItem.getObject() instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)myLookupItem.getObject();
    hasParms=method.getParameterList().getParameters().length > 0;
    if (!signatureSelected) {
      hasParms=hasParms || hasOverloads();
    }
  }
 else   if (myLookupItem.getAttribute(LookupItem.NEW_OBJECT_ATTR) != null) {
    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
    final PsiClass aClass=(PsiClass)myLookupItem.getObject();
    final PsiElement place=myFile.findElementAt(myStartOffset);
    final PsiMethod[] constructors=aClass.getConstructors();
    for (    PsiMethod constructor : constructors) {
      if (!aClass.getManager().getResolveHelper().isAccessible(constructor,place,null))       continue;
      if (constructor.getParameterList().getParameters().length > 0) {
        hasParms=true;
        break;
      }
    }
  }
 else   if (PsiKeyword.SYNCHRONIZED.equals(myLookupItem.getLookupString()) || PsiKeyword.CATCH.equals(myLookupItem.getLookupString()) || PsiKeyword.SWITCH.equals(myLookupItem.getLookupString()))   hasParms=true;
 else   if (insertingAnnotationWithParameters()) {
    hasParms=true;
  }
  return hasParms;
}
