{
  PsiClass baseClass=aClass.getBaseClassType().resolve();
  if (baseClass == null)   return;
  PsiMethod[] allBaseMethods=baseClass.getMethods();
  if (allBaseMethods.length == 0)   return;
  List<PsiMethodMember> methods=new ArrayList<PsiMethodMember>();
  for (  final PsiMethod method : allBaseMethods) {
    if (OverrideImplementUtil.isOverridable(method)) {
      methods.add(new PsiMethodMember(method,PsiSubstitutor.UNKNOWN));
    }
  }
  boolean isJdk15Enabled=LanguageLevel.JDK_1_5.compareTo(PsiUtil.getLanguageLevel(aClass)) <= 0;
  final PsiMethodMember[] array=methods.toArray(new PsiMethodMember[methods.size()]);
  final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(array,false,true,project,isJdk15Enabled);
  chooser.setTitle(CompletionBundle.message("completion.smarttype.select.methods.to.override"));
  chooser.setCopyJavadocVisible(true);
  chooser.show();
  List<PsiMethodMember> selected=chooser.getSelectedElements();
  if (selected == null || selected.isEmpty())   return;
  try {
    final List<PsiGenerationInfo<PsiMethod>> prototypes=OverrideImplementUtil.overrideOrImplementMethods(aClass,selected,chooser.isCopyJavadoc(),chooser.isInsertOverrideAnnotation());
    final int offset=editor.getCaretModel().getOffset();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        try {
          for (          PsiGenerationInfo<PsiMethod> prototype : prototypes) {
            PsiStatement[] statements=prototype.getPsiMember().getBody().getStatements();
            if (statements.length > 0 && prototype.getPsiMember().getReturnType() == PsiType.VOID) {
              statements[0].delete();
            }
          }
          List<PsiGenerationInfo<PsiMethod>> resultMembers=GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(),offset,prototypes);
          GenerateMembersUtil.positionCaret(editor,resultMembers.get(0).getPsiMember(),true);
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
);
  }
 catch (  IncorrectOperationException ioe) {
    LOG.error(ioe);
  }
}
