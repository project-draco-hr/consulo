{
  CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(myProject);
  int textLength=myDocument.getTextLength();
  CharSequence chars=myDocument.getCharsSequence();
switch (tailType) {
case TailType.NONE:
    break;
case TailType.SEMICOLON:
  if (tailOffset == textLength || chars.charAt(tailOffset) != ';') {
    myDocument.insertString(tailOffset,";");
  }
if (caretOffset == tailOffset) {
  caretOffset++;
}
tailOffset++;
break;
case TailType.COMMA:
if (styleSettings.SPACE_BEFORE_COMMA) {
if (tailOffset == textLength || chars.charAt(tailOffset) != ' ') {
myDocument.insertString(tailOffset," ");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
if (tailOffset == textLength || chars.charAt(tailOffset) != ',') {
myDocument.insertString(tailOffset,",");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
if (styleSettings.SPACE_AFTER_COMMA) {
if (tailOffset == textLength || chars.charAt(tailOffset) != ' ') {
myDocument.insertString(tailOffset," ");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
break;
case TailType.SPACE:
if (tailOffset == textLength || chars.charAt(tailOffset) != ' ') {
myDocument.insertString(tailOffset," ");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
break;
case TailType.DOT:
if (tailOffset == textLength || chars.charAt(tailOffset) != '.') {
myDocument.insertString(tailOffset,".");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
break;
case TailType.CAST_RPARENTH:
FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.smarttype.casting");
case TailType.CALL_RPARENTH:
case TailType.IF_RPARENTH:
case TailType.WHILE_RPARENTH:
case TailType.CALL_RPARENTH_SEMICOLON:
caretOffset=processRparenthTail(tailType,caretOffset,tailOffset);
break;
case TailType.COND_EXPR_COLON:
if (tailOffset < textLength - 1 && chars.charAt(tailOffset) == ' ' && chars.charAt(tailOffset + 1) == ':') {
if (caretOffset == tailOffset) {
caretOffset+=2;
}
tailOffset+=2;
}
 else if (tailOffset < textLength && chars.charAt(tailOffset) == ':') {
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
 else {
myDocument.insertString(tailOffset," : ");
if (caretOffset == tailOffset) {
caretOffset+=3;
}
tailOffset+=3;
}
break;
case TailType.EQ:
if (tailOffset < textLength - 1 && chars.charAt(tailOffset) == ' ' && chars.charAt(tailOffset + 1) == '=') {
if (caretOffset == tailOffset) {
caretOffset+=2;
}
tailOffset+=2;
}
 else if (tailOffset < textLength && chars.charAt(tailOffset) == '=') {
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
 else {
if (styleSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS) {
myDocument.insertString(tailOffset," =");
textLength+=2;
if (caretOffset == tailOffset) {
caretOffset+=2;
}
tailOffset+=2;
}
 else {
myDocument.insertString(tailOffset,"=");
textLength++;
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
}
if (styleSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS) {
if (tailOffset == textLength || chars.charAt(tailOffset) != ' ') {
myDocument.insertString(tailOffset," ");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
break;
case TailType.CASE_COLON:
if (tailOffset == textLength || chars.charAt(tailOffset) != ':') {
myDocument.insertString(tailOffset,":");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
break;
default :
if (tailOffset == textLength || chars.charAt(tailOffset) != tailType) {
myDocument.insertString(tailOffset,"" + (char)tailType);
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
break;
case TailType.UNKNOWN:
case TailType.LPARENTH:
}
return caretOffset;
}
