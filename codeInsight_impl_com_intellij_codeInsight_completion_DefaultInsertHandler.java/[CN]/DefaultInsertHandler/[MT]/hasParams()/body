{
  boolean hasParms=false;
  if (myLookupItem.getAttribute(LookupItem.NEW_OBJECT_ATTR) != null) {
    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
    final PsiClass aClass=(PsiClass)myLookupItem.getObject();
    final PsiElement place=myFile.findElementAt(myStartOffset);
    final PsiMethod[] constructors=aClass.getConstructors();
    for (    PsiMethod constructor : constructors) {
      if (!JavaPsiFacade.getInstance(aClass.getProject()).getResolveHelper().isAccessible(constructor,place,null))       continue;
      if (constructor.getParameterList().getParametersCount() > 0) {
        hasParms=true;
        break;
      }
    }
  }
 else {
    final String lookupString=myLookupItem.getLookupString();
    if (PsiKeyword.SYNCHRONIZED.equals(lookupString)) {
      final PsiElement place=myFile.findElementAt(myStartOffset);
      hasParms=PsiTreeUtil.getParentOfType(place,PsiMember.class,PsiCodeBlock.class) instanceof PsiCodeBlock;
    }
 else     if (PsiKeyword.CATCH.equals(lookupString) || PsiKeyword.SWITCH.equals(lookupString) || PsiKeyword.WHILE.equals(lookupString)|| PsiKeyword.FOR.equals(lookupString))     hasParms=true;
 else     if (insertingAnnotationWithParameters()) {
      hasParms=true;
    }
  }
  return hasParms;
}
