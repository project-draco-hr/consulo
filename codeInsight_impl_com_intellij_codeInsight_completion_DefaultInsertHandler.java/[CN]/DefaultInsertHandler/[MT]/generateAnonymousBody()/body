{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  int offset=myEditor.getCaretModel().getOffset();
  PsiElement element=myFile.findElementAt(offset);
  if (element == null)   return null;
  if (element.getParent() instanceof PsiAnonymousClass) {
    try {
      CodeStyleManager.getInstance(myProject).reformat(element.getParent());
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
    offset=element.getParent().getTextRange().getEndOffset() - 1;
    myEditor.getCaretModel().moveToOffset(offset);
    myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    myEditor.getSelectionModel().removeSelection();
  }
  final SmartPsiElementPointer pointer=SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(element);
  return new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        public void run(){
          PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
          PsiElement element=pointer.getElement();
          if (element == null)           return;
          while (true) {
            if (element instanceof PsiFile)             return;
            PsiElement parent=element.getParent();
            if (parent instanceof PsiAnonymousClass)             break;
            element=parent;
          }
          final PsiAnonymousClass aClass=(PsiAnonymousClass)element.getParent();
          final Collection<CandidateInfo> candidatesToImplement=OverrideImplementUtil.getMethodsToOverrideImplement(aClass,true);
          boolean invokeOverride=candidatesToImplement.isEmpty();
          if (invokeOverride) {
            chooseAndOverrideMethodsInAdapter(myProject,myEditor,aClass);
          }
 else {
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              public void run(){
                try {
                  List<PsiMethod> methods=OverrideImplementUtil.overrideOrImplementMethodCandidates(aClass,candidatesToImplement,false,false);
                  List<PsiGenerationInfo<PsiMethod>> prototypes=OverrideImplementUtil.convert2GenerationInfos(methods);
                  List<PsiGenerationInfo<PsiMethod>> resultMembers=GenerateMembersUtil.insertMembersBeforeAnchor(aClass,null,prototypes);
                  GenerateMembersUtil.positionCaret(myEditor,resultMembers.get(0).getPsiMember(),true);
                }
 catch (                IncorrectOperationException ioe) {
                  LOG.error(ioe);
                }
              }
            }
);
          }
          clear();
        }
      }
,CompletionBundle.message("completion.smart.type.generate.anonymous.body"),null,UndoConfirmationPolicy.DEFAULT,myDocument);
    }
  }
;
}
