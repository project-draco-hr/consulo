{
  SmartPsiElementPointer pointer=SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);
  LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);
  final PsiManager manager=file.getManager();
  final Document document=FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());
  int newStartOffset=startOffset;
  final PsiReference reference=file.findReferenceAt(startOffset);
  if (reference != null) {
    final PsiElement resolved=reference.resolve();
    if (resolved instanceof PsiClass) {
      if (((PsiClass)resolved).getQualifiedName() == null || manager.areElementsEquivalent(aClass,resolved))       return newStartOffset;
    }
  }
  String name=aClass.getName();
  document.replaceString(startOffset,endOffset,name);
  PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();
  final RangeMarker toDelete=insertSpace(endOffset,document);
  endOffset=startOffset + name.length();
  PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();
  PsiElement element=file.findElementAt(startOffset);
  if (element instanceof PsiIdentifier) {
    PsiElement parent=element.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()) {
      PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)parent;
      if (!aClass.getManager().areElementsEquivalent(aClass,resolveReference(ref))) {
        final PsiElement pointerElement=pointer.getElement();
        if (pointerElement instanceof PsiClass) {
          if (!(ref instanceof PsiImportStaticReferenceElement)) {
            String debugText;
            if (parent.getParent().getParent() != null) {
              debugText="grandparent: " + DebugUtil.psiToString(parent.getParent().getParent(),false) + "\n ref: "+ parent.getText();
            }
 else {
              debugText="no grandparent, parent: " + DebugUtil.psiToString(parent.getParent(),false) + "\n ref: "+ parent.getText();
            }
            PsiJavaCodeReferenceElement newRef=(PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);
            newRef=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(newRef);
            LOG.assertTrue(newRef != null,debugText);
            final TextRange textRange=newRef.getTextRange();
            endOffset=textRange.getEndOffset();
            newStartOffset=textRange.getStartOffset();
          }
 else {
            PsiImportStaticStatement statement=((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass)pointerElement);
            statement=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(statement);
            final TextRange textRange=statement.getTextRange();
            endOffset=textRange.getEndOffset();
            newStartOffset=textRange.getStartOffset();
          }
        }
      }
    }
  }
  if (toDelete.isValid()) {
    document.deleteString(toDelete.getStartOffset(),toDelete.getEndOffset());
  }
  return newStartOffset;
}
