{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  myManager.startBatchFilesProcessingMode();
  try {
    String[] words=StringUtil.getWordsIn(searcher.getPattern()).toArray(ArrayUtil.EMPTY_STRING_ARRAY);
    if (words.length == 0)     return true;
    Set<PsiFile> fileSet=new THashSet<PsiFile>();
    final Application application=ApplicationManager.getApplication();
    for (    final String word : words) {
      List<PsiFile> psiFiles=application.runReadAction(new Computable<List<PsiFile>>(){
        public List<PsiFile> compute(){
          return Arrays.asList(myManager.getCacheManager().getFilesWithWord(word,searchContext,scope,caseSensitively));
        }
      }
);
      if (fileSet.isEmpty()) {
        fileSet.addAll(psiFiles);
      }
 else {
        fileSet.retainAll(psiFiles);
      }
      if (fileSet.isEmpty())       break;
    }
    final PsiFile[] files=fileSet.toArray(new PsiFile[fileSet.size()]);
    if (progress != null) {
      progress.setText(PsiBundle.message("psi.search.for.word.progress",searcher.getPattern()));
    }
    if (!application.isUnitTestMode() && !application.isWriteAccessAllowed() && POOL_SIZE > 0) {
      final int chunkSize=Math.max(10,files.length / POOL_SIZE / 20);
      ArrayList<Callable<Boolean>> callables=new ArrayList<Callable<Boolean>>(files.length / chunkSize);
      final AtomicInteger counter=new AtomicInteger(0);
      for (int v=0; v < files.length; v+=chunkSize) {
        final int index=v;
        Callable<Boolean> runnable=new Callable<Boolean>(){
          public Boolean call() throws Exception {
            final Ref<Boolean> result=new Ref<Boolean>(Boolean.TRUE);
            ((ProgressManagerImpl)ProgressManager.getInstance()).executeProcessUnderProgress(new Runnable(){
              public void run(){
                for (int i=index; i < index + chunkSize && i < files.length; i++) {
                  final PsiFile file=files[i];
                  files[i]=null;
                  try {
                    PsiElement[] psiRoots=file.getPsiRoots();
                    Set<PsiElement> processed=new HashSet<PsiElement>(psiRoots.length * 2,(float)0.5);
                    for (                    PsiElement psiRoot : psiRoots) {
                      ProgressManager.getInstance().checkCanceled();
                      if (!processed.add(psiRoot))                       continue;
                      if (!LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher)) {
                        result.set(Boolean.FALSE);
                        return;
                      }
                    }
                    if (progress != null) {
                      double fraction=(double)counter.incrementAndGet() / files.length;
                      progress.setFraction(fraction);
                    }
                    myManager.dropResolveCaches();
                  }
 catch (                  ProcessCanceledException e) {
                    result.set(Boolean.FALSE);
                  }
                  if (!result.get())                   return;
                }
              }
            }
,progress);
            return result.get();
          }
        }
;
        callables.add(runnable);
      }
      try {
        List<Future<Boolean>> futures=ApplicationManagerEx.getApplicationEx().invokeAllUnderReadAction(callables,myThreadPoolExecutor);
        boolean success=true;
        for (        Future<Boolean> future : futures) {
          if (!(success&=future.get()))           break;
        }
        return success;
      }
 catch (      Throwable throwable) {
        LOG.error(throwable);
      }
    }
 else {
      for (int i=0; i < files.length; i++) {
        ProgressManager.getInstance().checkCanceled();
        PsiFile file=files[i];
        files[i]=null;
        PsiElement[] psiRoots=file.getPsiRoots();
        Set<PsiElement> processed=new HashSet<PsiElement>(psiRoots.length * 2,(float)0.5);
        for (        PsiElement psiRoot : psiRoots) {
          if (!processed.add(psiRoot))           continue;
          if (!LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher)) {
            return false;
          }
        }
        if (progress != null) {
          double fraction=(double)i / files.length;
          progress.setFraction(fraction);
        }
        myManager.dropResolveCaches();
      }
    }
  }
  finally {
    if (progress != null) {
      progress.popState();
    }
    myManager.finishBatchFilesProcessingMode();
  }
  return true;
}
