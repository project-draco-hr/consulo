{
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  myManager.startBatchFilesProcessingMode();
  try {
    String[] words=StringUtil.getWordsIn(searcher.getPattern()).toArray(ArrayUtil.EMPTY_STRING_ARRAY);
    if (words.length == 0)     return true;
    Set<PsiFile> fileSet=new THashSet<PsiFile>();
    for (    String word : words) {
      List<PsiFile> psiFiles=Arrays.asList(myManager.getCacheManager().getFilesWithWord(word,searchContext,scope,caseSensitively));
      if (fileSet.isEmpty()) {
        fileSet.addAll(psiFiles);
      }
 else {
        fileSet.retainAll(psiFiles);
      }
      if (fileSet.isEmpty())       break;
    }
    PsiFile[] files=fileSet.toArray(new PsiFile[fileSet.size()]);
    if (progress != null) {
      progress.setText(PsiBundle.message("psi.search.for.word.progress",searcher.getPattern()));
    }
    for (int i=0; i < files.length; i++) {
      ProgressManager.getInstance().checkCanceled();
      PsiFile file=files[i];
      PsiElement[] psiRoots=file.getPsiRoots();
      Set<PsiElement> processed=new HashSet<PsiElement>(psiRoots.length * 2,(float)0.5);
      for (      PsiElement psiRoot : psiRoots) {
        if (processed.contains(psiRoot))         continue;
        processed.add(psiRoot);
        if (!LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher)) {
          return false;
        }
      }
      if (progress != null) {
        double fraction=(double)i / files.length;
        progress.setFraction(fraction);
      }
      myManager.dropResolveCaches();
    }
  }
  finally {
    if (progress != null) {
      progress.popState();
    }
    myManager.finishBatchFilesProcessingMode();
  }
  return true;
}
