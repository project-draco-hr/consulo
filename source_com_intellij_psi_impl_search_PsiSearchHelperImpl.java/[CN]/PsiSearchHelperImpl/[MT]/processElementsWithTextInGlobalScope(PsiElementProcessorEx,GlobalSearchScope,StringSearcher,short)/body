{
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  myManager.startBatchFilesProcessingMode();
  try {
    String[] words=StringUtil.getWordsIn(searcher.getPattern()).toArray(ArrayUtil.EMPTY_STRING_ARRAY);
    if (words.length == 0)     return true;
    Set<PsiFile> fileSet=new HashSet<PsiFile>();
    fileSet.addAll(Arrays.asList(myManager.getCacheManager().getFilesWithWord(words[0],searchContext,scope)));
    for (int i=1; i < words.length; i++) {
      fileSet.retainAll(Arrays.asList(myManager.getCacheManager().getFilesWithWord(words[i],searchContext,scope)));
    }
    PsiFile[] files=fileSet.toArray(new PsiFile[fileSet.size()]);
    if (progress != null) {
      progress.setText(PsiBundle.message("psi.search.for.word.progress",searcher.getPattern()));
    }
    for (int i=0; i < files.length; i++) {
      ProgressManager.getInstance().checkCanceled();
      PsiFile file=files[i];
      PsiElement[] psiRoots=file.getPsiRoots();
      for (      PsiElement psiRoot : psiRoots) {
        if (!LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,progress,searchContext)) {
          return false;
        }
      }
      if (progress != null) {
        double fraction=(double)i / files.length;
        progress.setFraction(fraction);
      }
      myManager.dropResolveCaches();
    }
  }
  finally {
    if (progress != null) {
      progress.popState();
    }
    myManager.finishBatchFilesProcessingMode();
  }
  return true;
}
