{
  LOG.assertTrue(searchScope != null);
  PsiClass parentClass=method.getContainingClass();
  if (method.isConstructor()) {
    if (!processConstructorReferences(processor,method,searchScope,!isStrictSignatureSearch,isStrictSignatureSearch)) {
      return false;
    }
  }
  if (isStrictSignatureSearch && (parentClass == null || parentClass instanceof PsiAnonymousClass || parentClass.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.STATIC) || method.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.PRIVATE))) {
    return processReferences(processor,method,searchScope,false);
  }
  final String text=method.getName();
  final PsiMethod[] methods=isStrictSignatureSearch ? new PsiMethod[]{method} : getOverloadsMayBeOverriden(method);
  SearchScope accessScope=methods[0].getUseScope();
  for (int i=1; i < methods.length; i++) {
    PsiMethod method1=methods[i];
    SearchScope someScope=PsiSearchScopeUtil.scopesUnion(accessScope,method1.getUseScope());
    accessScope=someScope == null ? accessScope : someScope;
  }
  final PsiClass aClass=method.getContainingClass();
  final PsiElementProcessorEx processor1=new PsiElementProcessorEx(){
    public boolean execute(    PsiElement element,    int offsetInElement){
      PsiReference reference=element.findReferenceAt(offsetInElement);
      if (reference != null) {
        for (        PsiMethod method : methods) {
          if (reference.isReferenceTo(method)) {
            return processor.execute(reference);
          }
          PsiElement refElement=reference.resolve();
          if (refElement instanceof PsiMethod) {
            PsiMethod refMethod=(PsiMethod)refElement;
            PsiClass refMethodClass=refMethod.getContainingClass();
            if (refMethodClass == null)             return true;
            if (!refMethod.hasModifierProperty(PsiModifier.STATIC)) {
              PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(aClass,refMethodClass,PsiSubstitutor.EMPTY);
              if (substitutor != null) {
                if (refMethod.getSignature(PsiSubstitutor.EMPTY).equals(method.getSignature(substitutor))) {
                  if (!processor.execute(reference))                   return false;
                }
              }
            }
            if (!isStrictSignatureSearch) {
              PsiManager manager=method.getManager();
              if (manager.areElementsEquivalent(refMethodClass,aClass)) {
                return processor.execute(reference);
              }
            }
          }
 else {
            return true;
          }
        }
      }
      return true;
    }
  }
;
  searchScope=searchScope.intersectWith(accessScope);
  short searchContext=UsageSearchContext.IN_CODE | UsageSearchContext.IN_COMMENTS;
  boolean toContinue=processElementsWithWord(processor1,searchScope,text,searchContext,true);
  if (!toContinue)   return false;
  if (PropertyUtil.isSimplePropertyAccessor(method)) {
    final String propertyName=PropertyUtil.getPropertyName(method);
    if (searchScope instanceof GlobalSearchScope) {
      searchScope=GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,StdFileTypes.JSP,StdFileTypes.JSPX,StdFileTypes.XML);
    }
    toContinue=processElementsWithWord(processor1,searchScope,propertyName,UsageSearchContext.IN_FOREIGN_LANGUAGES,true);
    if (!toContinue)     return false;
  }
  return true;
}
