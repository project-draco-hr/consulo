{
  LOG.assertTrue(searchScope != null);
  if (aClass instanceof PsiAnonymousClass)   return true;
  if (aClass.hasModifierProperty(PsiModifier.FINAL))   return true;
  String name=aClass.getName();
  RepositoryManager repositoryManager=myManager.getRepositoryManager();
  RepositoryElementsManager repositoryElementsManager=myManager.getRepositoryElementsManager();
  if ("java.lang.Object".equals(aClass.getQualifiedName())) {
  }
  if (aClass instanceof PsiAspect) {
    PsiAspectManager aspectManager=aClass.getManager().getAspectManager();
    PsiAspect[] aspects=aspectManager.getAspects();
    for (int i=0; i < aspects.length; i++) {
      if (!processInheritorCandidate(processor,aspects[i],aClass,searchScope,checkDeep,processed,checkInheritance)) {
        return false;
      }
    }
    return true;
  }
  final SearchScope searchScope1=searchScope.intersectWith(PsiSearchScopeUtil.getAccessScope(aClass));
  RepositoryIndex repositoryIndex=repositoryManager.getIndex();
  VirtualFileFilter rootFilter;
  if (searchScope1 instanceof GlobalSearchScope) {
    rootFilter=repositoryIndex.rootFilterBySearchScope((GlobalSearchScope)searchScope1);
  }
 else {
    rootFilter=null;
  }
  long[] candidateIds=repositoryIndex.getNameOccurrencesInExtendsLists(name,rootFilter);
  for (int i=0; i < candidateIds.length; i++) {
    long id=candidateIds[i];
    PsiClass candidate=(PsiClass)repositoryElementsManager.findOrCreatePsiElementById(id);
    LOG.assertTrue(candidate.isValid());
    if (!processInheritorCandidate(processor,candidate,aClass,searchScope,checkDeep,processed,checkInheritance)) {
      return false;
    }
  }
  final EjbClassRole classRole=J2EERolesUtil.getEjbRole(aClass);
  if (classRole != null && classRole.isDeclarationRole()) {
    final PsiClass[] implementations=classRole.findImplementations();
    for (int i=0; i < implementations.length; i++) {
      PsiClass candidate=implementations[i];
      if (!processInheritorCandidate(processor,candidate,aClass,searchScope,checkDeep,processed,checkInheritance)) {
        return false;
      }
    }
  }
  return true;
}
