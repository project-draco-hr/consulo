{
  LOG.assertTrue(searchScope != null);
  final PsiClass parentClass=method.getContainingClass();
  if (parentClass == null || method.isConstructor() || method.hasModifierProperty(PsiModifier.STATIC) || method.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.PRIVATE) || parentClass instanceof PsiAnonymousClass || parentClass.hasModifierProperty(PsiModifier.FINAL)) {
    return true;
  }
  PsiElementProcessor<PsiClass> inheritorsProcessor=new PsiElementProcessor<PsiClass>(){
    public boolean execute(    PsiClass inheritor){
      PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(parentClass,inheritor,PsiSubstitutor.EMPTY);
      MethodSignature signature=method.getSignature(substitutor);
      PsiMethod method1=MethodSignatureUtil.findMethodBySignature(inheritor,signature,false);
      if (method1 == null || method1.hasModifierProperty(PsiModifier.STATIC) || (method.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !method1.getManager().arePackagesTheSame(parentClass,inheritor))) {
        return true;
      }
      return processor.execute(method1);
    }
  }
;
  if (!processInheritors(inheritorsProcessor,parentClass,searchScope,true))   return false;
  final EjbMethodRole ejbRole=J2EERolesUtil.getEjbRole(method);
  if (ejbRole instanceof EjbDeclMethodRole) {
    final PsiMethod[] implementations=((EjbDeclMethodRole)ejbRole).findImplementations();
    for (    PsiMethod implementation : implementations) {
      if (implementation.getSignature(PsiSubstitutor.EMPTY).equals(method.getSignature(PsiSubstitutor.EMPTY)))       continue;
      if (!processor.execute(implementation))       return false;
    }
  }
  return true;
}
