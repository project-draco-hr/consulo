{
  myManager.getRepositoryManager().updateAll();
  LinkedList<PsiDirectory> queue=new LinkedList<PsiDirectory>();
  PsiDirectory[] roots=myManager.getRootDirectories(PsiRootPackageType.SOURCE_PATH);
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myManager.getProject()).getFileIndex();
  for (int i=0; i < roots.length; i++) {
    final PsiDirectory root=roots[i];
    if (fileIndex.isInContent(root.getVirtualFile())) {
      queue.addFirst(root);
    }
  }
  roots=myManager.getRootDirectories(PsiRootPackageType.CLASS_PATH);
  for (int i=0; i < roots.length; i++) {
    queue.addFirst(roots[i]);
  }
  while (!queue.isEmpty()) {
    PsiDirectory dir=queue.removeFirst();
    Module module=ModuleUtil.findModuleForPsiElement(dir);
    if (!(module != null ? searchScope.isSearchInModuleContent(module) : searchScope.isSearchInLibraries()))     continue;
    PsiDirectory[] subdirectories=dir.getSubdirectories();
    for (int i=0; i < subdirectories.length; i++) {
      queue.addFirst(subdirectories[i]);
    }
    PsiFile[] files=dir.getFiles();
    for (int i=0; i < files.length; i++) {
      PsiFile file=files[i];
      if (!searchScope.contains(file.getVirtualFile()))       continue;
      if (!(file instanceof PsiJavaFile))       continue;
      long fileId=myManager.getRepositoryManager().getFileId(file.getVirtualFile());
      if (fileId >= 0) {
        long[] allClasses=myManager.getRepositoryManager().getFileView().getAllClasses(fileId);
        for (int j=0; j < allClasses.length; j++) {
          PsiClass psiClass=(PsiClass)myManager.getRepositoryElementsManager().findOrCreatePsiElementById(allClasses[j]);
          if (!processor.execute(psiClass))           return false;
        }
      }
 else {
        if (!processAllClasses(processor,new LocalSearchScope(file)))         return false;
      }
    }
  }
  return true;
}
