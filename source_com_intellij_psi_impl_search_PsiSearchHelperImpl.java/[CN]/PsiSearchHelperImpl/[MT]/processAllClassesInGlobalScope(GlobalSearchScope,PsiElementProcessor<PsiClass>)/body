{
  myManager.getRepositoryManager().updateAll();
  LinkedList<PsiDirectory> queue=new LinkedList<PsiDirectory>();
  PsiDirectory[] roots=myManager.getRootDirectories(PsiRootPackageType.SOURCE_PATH);
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myManager.getProject()).getFileIndex();
  for (  final PsiDirectory root : roots) {
    if (fileIndex.isInContent(root.getVirtualFile())) {
      queue.addFirst(root);
    }
  }
  roots=myManager.getRootDirectories(PsiRootPackageType.CLASS_PATH);
  for (  PsiDirectory root1 : roots) {
    queue.addFirst(root1);
  }
  while (!queue.isEmpty()) {
    PsiDirectory dir=queue.removeFirst();
    Module module=ModuleUtil.findModuleForPsiElement(dir);
    if (!(module != null ? searchScope.isSearchInModuleContent(module) : searchScope.isSearchInLibraries()))     continue;
    PsiDirectory[] subdirectories=dir.getSubdirectories();
    for (    PsiDirectory subdirectory : subdirectories) {
      queue.addFirst(subdirectory);
    }
    PsiFile[] files=dir.getFiles();
    for (    PsiFile file : files) {
      if (!searchScope.contains(file.getVirtualFile()))       continue;
      if (!(file instanceof PsiJavaFile))       continue;
synchronized (PsiLock.LOCK) {
        long fileId=myManager.getRepositoryManager().getFileId(file.getVirtualFile());
        if (fileId >= 0) {
          long[] allClasses=myManager.getRepositoryManager().getFileView().getAllClasses(fileId);
          for (          long allClass : allClasses) {
            PsiClass psiClass=(PsiClass)myManager.getRepositoryElementsManager().findOrCreatePsiElementById(allClass);
            if (!processor.execute(psiClass))             return false;
          }
        }
 else {
          if (!processAllClasses(processor,new LocalSearchScope(file)))           return false;
        }
      }
    }
  }
  return true;
}
