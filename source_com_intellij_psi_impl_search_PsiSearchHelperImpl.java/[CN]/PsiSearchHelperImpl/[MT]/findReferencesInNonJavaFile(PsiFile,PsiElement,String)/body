{
class MyRefsProcessor implements PsiNonJavaFileReferenceProcessor {
    private List<PsiReference> myRefs=new ArrayList<PsiReference>();
    PsiReference[] getResult(){
      return myRefs.toArray(new PsiReference[myRefs.size()]);
    }
    public boolean process(    PsiFile file,    int startOffset,    int endOffset){
      PsiElement elementAt=file.findElementAt(startOffset);
      if (elementAt != null) {
        PsiReference ref=elementAt.findReferenceAt(startOffset - elementAt.getTextRange().getStartOffset());
        if (ref != null && ref.isReferenceTo(element))         myRefs.add(ref);
      }
      return true;
    }
  }
  MyRefsProcessor processor=new MyRefsProcessor();
  char[] text=file.textToCharArray();
  StringSearcher searcher=new StringSearcher(refText);
  for (int index=LowLevelSearchUtil.searchWord(text,0,text.length,searcher); index >= 0; ) {
    if (!processor.process(file,index,index + searcher.getPattern().length()))     break;
    index=LowLevelSearchUtil.searchWord(text,index + searcher.getPattern().length(),text.length,searcher);
  }
  return processor.getResult();
}
