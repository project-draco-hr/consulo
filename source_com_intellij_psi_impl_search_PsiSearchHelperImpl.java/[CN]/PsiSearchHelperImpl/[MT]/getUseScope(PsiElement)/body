{
  final GlobalSearchScope maximalUseScope=myManager.getFileManager().getUseScope(element);
  if (element instanceof PsiPackage) {
    return maximalUseScope;
  }
 else   if (element instanceof PsiClass) {
    if (element instanceof PsiAnonymousClass) {
      return new LocalSearchScope(element);
    }
    PsiFile file=element.getContainingFile();
    if (PsiUtil.isInJspFile(file))     return maximalUseScope;
    PsiClass aClass=(PsiClass)element;
    if (aClass.hasModifierProperty(PsiModifier.PUBLIC)) {
      return maximalUseScope;
    }
 else     if (aClass.hasModifierProperty(PsiModifier.PROTECTED)) {
      return maximalUseScope;
    }
 else     if (aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
      PsiClass topClass=PsiUtil.getTopLevelClass(aClass);
      return new LocalSearchScope(topClass == null ? aClass.getContainingFile() : topClass);
    }
 else {
      PsiPackage aPackage=null;
      if (file instanceof PsiJavaFile) {
        aPackage=element.getManager().findPackage(((PsiJavaFile)file).getPackageName());
      }
      if (aPackage == null) {
        PsiDirectory dir=file.getContainingDirectory();
        if (dir != null) {
          aPackage=dir.getPackage();
        }
      }
      if (aPackage != null) {
        SearchScope scope=GlobalSearchScope.packageScope(aPackage,false);
        scope=scope.intersectWith(maximalUseScope);
        return scope;
      }
      return new LocalSearchScope(file);
    }
  }
 else   if (element instanceof PsiMethod || element instanceof PsiField) {
    PsiMember member=(PsiMember)element;
    PsiFile file=element.getContainingFile();
    if (PsiUtil.isInJspFile(file))     return maximalUseScope;
    PsiClass aClass=member.getContainingClass();
    if (aClass instanceof PsiAnonymousClass) {
      PsiElement methodCallExpr=PsiTreeUtil.getParentOfType(aClass,PsiMethodCallExpression.class);
      return new LocalSearchScope(methodCallExpr != null ? methodCallExpr : aClass);
    }
    if (member.hasModifierProperty(PsiModifier.PUBLIC)) {
      return maximalUseScope;
    }
 else     if (member.hasModifierProperty(PsiModifier.PROTECTED)) {
      return maximalUseScope;
    }
 else     if (member.hasModifierProperty(PsiModifier.PRIVATE)) {
      PsiClass topClass=PsiUtil.getTopLevelClass(member);
      return topClass != null ? new LocalSearchScope(topClass) : new LocalSearchScope(file);
    }
 else {
      PsiPackage aPackage=file instanceof PsiJavaFile ? myManager.findPackage(((PsiJavaFile)file).getPackageName()) : null;
      if (aPackage != null) {
        SearchScope scope=GlobalSearchScope.packageScope(aPackage,false);
        scope=scope.intersectWith(maximalUseScope);
        return scope;
      }
      return maximalUseScope;
    }
  }
 else   if (element instanceof ImplicitVariable) {
    return new LocalSearchScope(((ImplicitVariable)element).getDeclarationScope());
  }
 else   if (element instanceof PsiLocalVariable) {
    PsiElement parent=element.getParent();
    if (parent instanceof PsiDeclarationStatement) {
      return new LocalSearchScope(parent.getParent());
    }
 else {
      return maximalUseScope;
    }
  }
 else   if (element instanceof PsiParameter) {
    return new LocalSearchScope(((PsiParameter)element).getDeclarationScope());
  }
 else   if (element instanceof PsiLabeledStatement) {
    return new LocalSearchScope(element);
  }
 else {
    return maximalUseScope;
  }
}
