{
  myContents=component;
  final Project project=component.getProject();
  myFileEditor=new DomFileEditor(project,virtualFile,name,component){
    public JComponent getPreferredFocusedComponent(){
      return null;
    }
    public void reset(){
      for (      final Map.Entry<EditedElementDescription<? extends DomElement>,DomElement> entry : myDomElements.entrySet()) {
        final DomElement newValue=entry.getKey().find();
        final DomElement oldValue=entry.getValue();
        if (newValue != null && !newValue.equals(oldValue) || newValue == null && !oldValue.getManager().isMockElement(oldValue)) {
          ((StableElement)oldValue).revalidate();
        }
      }
      super.reset();
    }
    public void commit(){
      super.commit();
      new WriteCommandAction(project){
        protected void run(        Result result) throws Throwable {
          for (          final Map.Entry<EditedElementDescription<? extends DomElement>,DomElement> entry : myDomElements.entrySet()) {
            final EditedElementDescription description=entry.getKey();
            final DomElement editedElement=entry.getValue();
            if (description.find() == null && editedElement.getXmlTag() != null) {
              DomElement element=description.addElement();
              element.copyFrom(editedElement);
              description.initialize(element);
              removeWatchedElement(editedElement);
              ((StableElement)editedElement).invalidate();
            }
          }
        }
      }
.execute();
    }
  }
;
  final DomManager domManager=DomManager.getDomManager(project);
  for (  final DomElement element : myDomElements.values()) {
    if (domManager.isMockElement(element)) {
      myFileEditor.addWatchedElement(element);
    }
  }
  return myFileEditor;
}
