{
  myContent=content;
  myAnnotations=annotations;
  myRevisions=revisions;
  myFile=file;
  if (revisions != null) {
    for (    VcsFileRevision revision : revisions) {
      myRevisionComments.put(revision.getRevisionNumber().toString(),revision.getCommitMessage());
    }
    Collections.sort(myRevisions,new Comparator<VcsFileRevision>(){
      public int compare(      final VcsFileRevision o1,      final VcsFileRevision o2){
        return -1 * o1.getRevisionNumber().compareTo(o2.getRevisionNumber());
      }
    }
);
  }
  myCvsEntriesListener=new CvsEntriesListener(){
    public void entriesChanged(    VirtualFile parent){
    }
    private void fireAnnotationChanged(){
      final AnnotationListener[] listeners=myListeners.toArray(new AnnotationListener[myListeners.size()]);
      for (      AnnotationListener listener : listeners) {
        listener.onAnnotationChanged();
      }
    }
    public void entryChanged(    VirtualFile file){
      if (myFile == null)       return;
      fireAnnotationChanged();
    }
  }
;
  CvsEntriesManager.getInstance().addCvsEntriesListener(myCvsEntriesListener);
}
