{
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
  GrMethod result;
  if (prototype instanceof GrMethod) {
    result=(GrMethod)prototype.copy();
  }
 else {
    StringBuilder builder=new StringBuilder();
    builder.append(prototype.getModifierList().getText()).append(' ');
    if (prototype.getReturnTypeElement() != null) {
      builder.append(prototype.getReturnTypeElement().getText());
    }
    builder.append(' ').append(prototype.getName());
    builder.append(prototype.getParameterList().getText());
    builder.append("{}");
    result=factory.createMethodFromText(builder.toString());
  }
  StringBuilder call=new StringBuilder();
  call.append("def foo(){\n");
  final GrParameter[] parameters=result.getParameters();
  call.append(prototype.getName());
  if (initializer.getExpression() instanceof GrClosableBlock) {
    if (parameters.length > 0) {
      call.append('(');
      for (      GrParameter parameter : parameters) {
        call.append(parameter.getName()).append(", ");
      }
      call.replace(call.length() - 2,call.length(),")");
    }
    call.append(initializer.getText());
  }
 else {
    call.append('(');
    for (    GrParameter parameter : parameters) {
      call.append(parameter.getName()).append(", ");
    }
    call.append(initializer.getText());
    call.append(")");
  }
  call.append("\n}");
  final GrOpenBlock block=factory.createMethodFromText(call.toString()).getBlock();
  result.getBlock().replace(block);
  final PsiElement parent=prototype.getParent();
  final GrMethod method=(GrMethod)parent.addBefore(result,prototype);
  JavaCodeStyleManager.getInstance(method.getProject()).shortenClassReferences(method);
  return method;
}
