{
  final GrParametersOwner scope=settings.getToReplaceIn();
  final GrExpression expression=settings.getExpression();
  if (expression != null) {
    final PsiElement expr=PsiUtil.skipParentheses(expression,false);
    if (expr == null)     return PsiElement.EMPTY_ARRAY;
    final PsiElement[] occurrences=GroovyRefactoringUtil.getExpressionOccurrences(expr,scope);
    if (occurrences == null || occurrences.length == 0) {
      throw new GrRefactoringError(GroovyRefactoringBundle.message("no.occurrences.found"));
    }
    return occurrences;
  }
 else {
    final GrVariable var=settings.getVar();
    LOG.assertTrue(var != null);
    final List<PsiElement> list=Collections.synchronizedList(new ArrayList<PsiElement>());
    ReferencesSearch.search(var,new LocalSearchScope(scope)).forEach(new Processor<PsiReference>(){
      @Override public boolean process(      PsiReference psiReference){
        final PsiElement element=psiReference.getElement();
        if (element != null) {
          list.add(element);
        }
        return true;
      }
    }
);
    return list.toArray(new PsiElement[list.size()]);
  }
}
