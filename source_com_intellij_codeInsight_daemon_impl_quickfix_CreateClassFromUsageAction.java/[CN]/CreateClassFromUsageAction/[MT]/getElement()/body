{
  if (!myRefElement.isValid() || !myRefElement.getManager().isInProject(myRefElement))   return null;
  CodeStyleManager codeStyleManager=myRefElement.getManager().getCodeStyleManager();
  if (!CreateFromUsageUtils.isValidReference(myRefElement) && myRefElement.getReferenceNameElement() != null && codeStyleManager.checkIdentifierRole(myRefElement.getReferenceName(),IdentifierRole.CLASS_NAME)) {
    PsiElement parent=myRefElement.getParent();
    if (parent instanceof PsiTypeElement) {
      if (parent.getParent() instanceof PsiReferenceParameterList)       return myRefElement;
      while (parent.getParent() instanceof PsiTypeElement)       parent=parent.getParent();
      if (parent.getParent() instanceof PsiVariable || parent.getParent() instanceof PsiMethod || parent.getParent() instanceof PsiClassObjectAccessExpression|| parent.getParent() instanceof PsiTypeCastExpression|| (parent.getParent() instanceof PsiInstanceOfExpression && ((PsiInstanceOfExpression)parent.getParent()).getCheckType() == parent)) {
        return myRefElement;
      }
    }
 else     if (parent instanceof PsiReferenceList) {
      if (parent.getParent() instanceof PsiClass) {
        PsiClass psiClass=(PsiClass)parent.getParent();
        if (psiClass.getExtendsList() == parent) {
          if (!myCreateInterface && !psiClass.isInterface())           return myRefElement;
          if (myCreateInterface && psiClass.isInterface())           return myRefElement;
        }
        if (psiClass.getImplementsList() == parent && myCreateInterface)         return myRefElement;
      }
 else       if (parent.getParent() instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)parent.getParent();
        if (method.getThrowsList() == parent && !myCreateInterface)         return myRefElement;
      }
    }
 else     if (parent instanceof PsiAnonymousClass && ((PsiAnonymousClass)parent).getBaseClassReference() == myRefElement) {
      return myRefElement;
    }
  }
  if (myRefElement instanceof PsiReferenceExpression) {
    PsiReferenceExpression referenceExpression=(PsiReferenceExpression)myRefElement;
    final PsiElement parent=referenceExpression.getParent();
    if (parent instanceof PsiMethodCallExpression) {
      return null;
    }
    if (parent.getParent() instanceof PsiMethodCallExpression && myCreateInterface)     return null;
    if (referenceExpression.getReferenceNameElement() != null && codeStyleManager.checkIdentifierRole(referenceExpression.getReferenceName(),IdentifierRole.CLASS_NAME) && !CreateFromUsageUtils.isValidReference(referenceExpression)) {
      return referenceExpression;
    }
  }
  return null;
}
