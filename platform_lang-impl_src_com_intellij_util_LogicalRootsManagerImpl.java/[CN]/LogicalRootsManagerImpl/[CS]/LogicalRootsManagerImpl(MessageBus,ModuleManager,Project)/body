{
  myModuleManager=moduleManager;
  myProject=project;
  final MessageBusConnection connection=bus.connect();
  connection.subscribe(LOGICAL_ROOTS,new LogicalRootListener(){
    public void logicalRootsChanged(){
      clear();
    }
  }
);
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      bus.asyncPublisher(LOGICAL_ROOTS).logicalRootsChanged();
    }
  }
);
  registerLogicalRootProvider(LogicalRootType.SOURCE_ROOT,new NotNullFunction<Module,List<VirtualFileLogicalRoot>>(){
    @NotNull public List<VirtualFileLogicalRoot> fun(    final Module module){
      return ContainerUtil.map2List(ModuleRootManager.getInstance(module).getSourceRoots(),new Function<VirtualFile,VirtualFileLogicalRoot>(){
        public VirtualFileLogicalRoot fun(        final VirtualFile s){
          return new VirtualFileLogicalRoot(s);
        }
      }
);
    }
  }
);
}
