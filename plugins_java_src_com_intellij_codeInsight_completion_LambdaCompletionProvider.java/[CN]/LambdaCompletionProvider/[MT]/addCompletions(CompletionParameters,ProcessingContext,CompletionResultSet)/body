{
  if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()))   return;
  final ExpectedTypeInfo[] expectedTypes=JavaSmartCompletionContributor.getExpectedTypes(parameters);
  for (  ExpectedTypeInfo expectedType : expectedTypes) {
    final PsiType defaultType=expectedType.getDefaultType();
    if (LambdaHighlightingUtil.checkInterfaceFunctional(defaultType) == null) {
      final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(defaultType);
      if (method != null) {
        final PsiParameter[] params=method.getParameterList().getParameters();
        final String paramsString="(" + StringUtil.join(params,new Function<PsiParameter,String>(){
          @Override public String fun(          PsiParameter parameter){
            return parameter.getName();
          }
        }
,",") + ")";
        final LookupElementBuilder builder=LookupElementBuilder.create(paramsString).withPresentableText(paramsString + " -> {}").withInsertHandler(new InsertHandler<LookupElement>(){
          @Override public void handleInsert(          InsertionContext context,          LookupElement item){
            final Editor editor=context.getEditor();
            EditorModificationUtil.insertStringAtCaret(editor," -> ");
          }
        }
);
        result.addElement(builder.withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE));
      }
    }
  }
}
