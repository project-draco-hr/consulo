{
  final Presentation presentation=e.getPresentation();
  presentation.setVisible(false);
  presentation.setEnabled(false);
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    return;
  }
  final ErrorTreeElement errorTreeElement=getSelectedErrorTreeElement();
  if (errorTreeElement instanceof NavigatableMessageElement) {
    final NavigatableMessageElement messageElement=(NavigatableMessageElement)errorTreeElement;
    final String[] text=messageElement.getText();
    if (text.length > 0) {
      if (text[0].startsWith("[") && text[0].indexOf("]") != -1) {
        final Navigatable navigatable=messageElement.getNavigatable();
        if (navigatable instanceof OpenFileDescriptor) {
          final OpenFileDescriptor fileDescriptor=(OpenFileDescriptor)navigatable;
          final VirtualFile virtualFile=fileDescriptor.getFile();
          final Module module=ModuleUtilCore.findModuleForFile(virtualFile,project);
          if (module == null) {
            return;
          }
          final Sdk jdk=ModuleRootManager.getInstance(module).getSdk();
          if (jdk == null) {
            return;
          }
          final boolean is_1_5=JavaSdk.getInstance().isOfVersionOrHigher(jdk,JavaSdkVersion.JDK_1_5);
          if (!is_1_5) {
            return;
          }
          final PsiFile psiFile=PsiManager.getInstance(project).findFile(virtualFile);
          if (psiFile == null) {
            return;
          }
          if (LanguageLevelUtil.getEffectiveLanguageLevel(module).compareTo(LanguageLevel.JDK_1_5) < 0)           return;
          final PsiElement context=psiFile.findElementAt(fileDescriptor.getOffset());
          if (context == null) {
            return;
          }
          final String id=text[0].substring(1,text[0].indexOf("]"));
          final SuppressFix suppressInspectionFix=getSuppressAction(id);
          final boolean available=suppressInspectionFix.isAvailable(project,null,context);
          presentation.setEnabled(available);
          presentation.setVisible(available);
          if (available) {
            presentation.setText(suppressInspectionFix.getText());
          }
        }
      }
    }
  }
}
