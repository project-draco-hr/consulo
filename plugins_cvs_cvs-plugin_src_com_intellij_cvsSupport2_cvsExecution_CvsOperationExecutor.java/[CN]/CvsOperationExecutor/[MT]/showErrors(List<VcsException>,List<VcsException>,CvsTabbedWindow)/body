{
  if (!myShowErrors || myIsQuietOperation)   return;
  if (tabbedWindow == null) {
    if (errors.isEmpty() && warnings.isEmpty())     return;
    final List<String> messages=new ArrayList<String>();
    for (    VcsException error : errors) {
      if (!StringUtil.isEmptyOrSpaces(error.getMessage())) {
        messages.add(error.getMessage());
      }
    }
    for (    VcsException error : warnings) {
      if (!StringUtil.isEmptyOrSpaces(error.getMessage())) {
        messages.add(error.getMessage());
      }
    }
    final String errorMessage=StringUtil.join(messages,"\n");
    Messages.showErrorDialog(errorMessage,"CVS error");
    return;
  }
  if (errors.isEmpty() && warnings.isEmpty()) {
    tabbedWindow.hideErrors();
  }
 else {
    ErrorTreeView errorTreeView=tabbedWindow.addErrorsTreeView(ErrorViewFactory.SERVICE.getInstance().createErrorTreeView(myProject,null,true,new AnAction[]{(DefaultActionGroup)ActionManager.getInstance().getAction("CvsActions")},new AnAction[]{new AnAction(CvsBundle.message("configure.global.cvs.settings.action.name"),null,IconLoader.getIcon("/nodes/cvs_global.png")){
      public void actionPerformed(      AnActionEvent e){
        new ConfigureCvsGlobalSettingsDialog().show();
      }
    }
,new ReconfigureCvsRootAction()},new ContentManagerProvider(){
      public ContentManager getParentContent(){
        return tabbedWindow.getContentManager();
      }
    }
));
    fillErrors(errors,warnings,errorTreeView);
    tabbedWindow.ensureVisible(myProject);
  }
}
