{
  final PsiFile containingFile=element.getContainingFile();
  final VirtualFile vFile=containingFile == null ? null : containingFile.getVirtualFile();
  int flags=(element.hasModifierProperty(PsiModifier.FINAL) ? FLAGS_FINAL : 0) | (element.hasModifierProperty(PsiModifier.STATIC) ? FLAGS_STATIC : 0) | (isLocked ? FLAGS_LOCKED : 0)| (isExcluded(vFile,element.getProject()) ? FLAGS_EXCLUDED : 0);
  if (element instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)element;
    if (element.hasModifierProperty(PsiModifier.ABSTRACT) && !((PsiClass)element).isInterface()) {
      flags|=FLAGS_ABSTRACT;
    }
    final PsiClass testClass=aClass.getManager().findClass("junit.framework.TestCase",aClass.getResolveScope());
    if (testClass != null && InheritanceUtil.isInheritorOrSelf(aClass,testClass,true)) {
      flags|=FLAGS_JUNIT_TEST;
    }
  }
  return flags;
}
