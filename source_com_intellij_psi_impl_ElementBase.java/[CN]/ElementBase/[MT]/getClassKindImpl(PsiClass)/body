{
  if (!aClass.isValid())   return CLASS_KIND_CLASS;
  if (aClass.isAnnotationType()) {
    return CLASS_KIND_ANNOTATION;
  }
  if (aClass.isEnum()) {
    return CLASS_KIND_ENUM;
  }
  if (aClass.isInterface()) {
    return CLASS_KIND_INTERFACE;
  }
  if (aClass instanceof JspClass) {
    return CLASS_KIND_JSP;
  }
  if (aClass instanceof PsiAnonymousClass) {
    return CLASS_KIND_ANONYMOUS;
  }
  final PsiManager manager=aClass.getManager();
  final PsiClass javaLangTrowable=manager.findClass("java.lang.Throwable",aClass.getResolveScope());
  final boolean isException=javaLangTrowable != null && InheritanceUtil.isInheritorOrSelf(aClass,javaLangTrowable,true);
  if (isException) {
    return CLASS_KIND_EXCEPTION;
  }
  if (JUnitUtil.isTestClass(aClass)) {
    return CLASS_KIND_JUNIT_TEST;
  }
  if (ExecutionUtil.isRunnableClass(aClass) && ApplicationConfigurationType.findMainMethod(aClass) != null) {
    return CLASS_KIND_RUNNABLE;
  }
  return CLASS_KIND_CLASS;
}
