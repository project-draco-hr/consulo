{
  final EjbClassRole role=J2EERolesUtil.getEjbRole(aClass);
  if (role != null)   return role.getIcon();
  if (aClass instanceof PsiAspect) {
    return Icons.ASPECT_ICON;
  }
  if (aClass.isAnnotationType()) {
    return Icons.ANNOTATION_TYPE_ICON;
  }
  if (aClass.isEnum()) {
    return Icons.ENUM_ICON;
  }
  if (aClass.isInterface()) {
    return aClass.hasModifierProperty(PsiModifier.STATIC) ? Icons.STATIC_INTERFACE_ICON : Icons.INTERFACE_ICON;
  }
  if (aClass instanceof JspClass) {
    return Icons.JSP_ICON;
  }
  if (aClass.hasModifierProperty(PsiModifier.STATIC)) {
    return Icons.STATIC_CLASS_ICON;
  }
  if (aClass instanceof PsiAnonymousClass) {
    return Icons.ANONYMOUS_CLASS_ICON;
  }
  if (aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return Icons.ABSTRACT_CLASS_ICON;
  }
  final PsiManager manager=aClass.getManager();
  final PsiClass javaLangTrowable=manager.findClass("java.lang.Throwable",aClass.getResolveScope());
  final boolean isException=javaLangTrowable != null && InheritanceUtil.isInheritorOrSelf(aClass,javaLangTrowable,true);
  if (isException) {
    return Icons.EXCEPTION_CLASS_ICON;
  }
  final PsiClass testClass=manager.findClass("junit.framework.TestCase",aClass.getResolveScope());
  if (testClass != null && InheritanceUtil.isInheritorOrSelf(aClass,testClass,true))   return Icons.JUNIT_TEST_CLASS_ICON;
  return Icons.CLASS_ICON;
}
