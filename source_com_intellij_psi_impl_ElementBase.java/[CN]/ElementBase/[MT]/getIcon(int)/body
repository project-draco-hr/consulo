{
  if (!(this instanceof PsiElement))   return null;
  final PsiElement element=(PsiElement)this;
  final Icon providersIcon=IconUtil.getProvidersIcon(element,flags);
  if (providersIcon != null) {
    return providersIcon instanceof RowIcon ? addVisibilityIcon(element,flags,(RowIcon)providersIcon) : providersIcon;
  }
  RowIcon baseIcon;
  final boolean isLocked=(flags & ICON_FLAG_READ_STATUS) != 0 && !element.isWritable();
  int elementFlags=isLocked ? FLAGS_LOCKED : 0;
  if (element instanceof PsiDirectory) {
    Icon symbolIcon;
    final PsiDirectory psiDirectory=(PsiDirectory)element;
    if (psiDirectory.getPackage() != null) {
      symbolIcon=Icons.PACKAGE_ICON;
    }
 else {
      symbolIcon=Icons.DIRECTORY_CLOSED_ICON;
    }
    final VirtualFile vFile=psiDirectory.getVirtualFile();
    final Project project=psiDirectory.getProject();
    boolean isExcluded=isExcluded(vFile,project);
    baseIcon=RowIcon.createLayeredIcon(symbolIcon,elementFlags | (isExcluded ? FLAGS_EXCLUDED : 0));
  }
 else   if (element instanceof PsiPackage) {
    baseIcon=RowIcon.createLayeredIcon(Icons.PACKAGE_ICON,elementFlags);
  }
 else   if (element instanceof PsiFile) {
    PsiFile file=(PsiFile)element;
    VirtualFile virtualFile=file.getVirtualFile();
    final Icon fileTypeIcon;
    if (virtualFile == null) {
      fileTypeIcon=file.getFileType().getIcon();
    }
 else {
      fileTypeIcon=IconUtil.getIcon(virtualFile,flags & ~ICON_FLAG_READ_STATUS,file.getProject());
    }
    baseIcon=RowIcon.createLayeredIcon(fileTypeIcon,elementFlags);
  }
 else   if (element instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)element;
    Icon symbolIcon=getClassBaseIcon(aClass);
    baseIcon=RowIcon.createLayeredIcon(symbolIcon,getFlags(aClass,isLocked));
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    Icon methodIcon=method.hasModifierProperty(PsiModifier.ABSTRACT) ? Icons.ABSTRACT_METHOD_ICON : Icons.METHOD_ICON;
    baseIcon=RowIcon.createLayeredIcon(methodIcon,getFlags(method,false));
  }
 else   if (element instanceof PsiField) {
    baseIcon=RowIcon.createLayeredIcon(Icons.FIELD_ICON,getFlags((PsiField)element,false));
  }
 else   if (element instanceof PsiParameter) {
    baseIcon=RowIcon.createLayeredIcon(Icons.PARAMETER_ICON,0);
  }
 else   if (element instanceof PsiVariable) {
    baseIcon=RowIcon.createLayeredIcon(Icons.VARIABLE_ICON,getFlags((PsiVariable)element,false));
  }
 else   if (element instanceof XmlTag) {
    return Icons.XML_TAG_ICON;
  }
 else   if (element instanceof PsiAntElement) {
    return ((PsiAntElement)element).getRole().getIcon();
  }
 else   if (element instanceof WebDirectoryElement) {
    return Icons.DIRECTORY_CLOSED_ICON;
  }
 else   if (element instanceof PsiClassObjectAccessExpression) {
    final RowIcon rowIcon=RowIcon.createLayeredIcon(Icons.FIELD_ICON,0);
    rowIcon.setIcon(Icons.PUBLIC_ICON,1);
    return rowIcon;
  }
 else {
    return null;
  }
  return addVisibilityIcon(element,flags,baseIcon);
}
