{
  RowIcon baseIcon;
  boolean showReadStatus=(flags & ICON_FLAG_READ_STATUS) != 0;
  if (element instanceof PsiDirectory) {
    Icon symbolIcon;
    final PsiDirectory psiDirectory=(PsiDirectory)element;
    if (psiDirectory.getPackage() != null) {
      symbolIcon=Icons.PACKAGE_ICON;
    }
 else {
      symbolIcon=Icons.DIRECTORY_CLOSED_ICON;
    }
    final VirtualFile vFile=psiDirectory.getVirtualFile();
    final Project project=psiDirectory.getProject();
    boolean isExcluded=isExcluded(vFile,project);
    baseIcon=createLayeredIcon(symbolIcon,showReadStatus && !elementWritable,isExcluded,false);
  }
 else   if (element instanceof PsiPackage) {
    boolean locked=showReadStatus && !elementWritable;
    baseIcon=createLayeredIcon(Icons.PACKAGE_ICON,locked,false,false);
  }
 else   if (element instanceof PsiFile) {
    PsiFile file=(PsiFile)element;
    Icon symbolIcon=IconUtilEx.getIcon(file.getVirtualFile(),flags & ~ICON_FLAG_READ_STATUS,file.getProject());
    boolean locked=showReadStatus && !elementWritable;
    baseIcon=createLayeredIcon(symbolIcon,locked,false,false);
  }
 else   if (element instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)element;
    Icon symbolIcon=getClassIcon(aClass);
    boolean isExcluded=false;
    final PsiFile containingFile=aClass.getContainingFile();
    if (containingFile != null) {
      final VirtualFile vFile=containingFile.getVirtualFile();
      isExcluded=isExcluded(vFile,containingFile.getProject());
    }
    final boolean isStatic=aClass.hasModifierProperty(PsiModifier.STATIC);
    baseIcon=createLayeredIcon(symbolIcon,showReadStatus && !elementWritable,isExcluded,isStatic);
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final EjbMethodRole role=J2EERolesUtil.getEjbRole(method);
    Icon methodIcon=role == null ? Icons.METHOD_ICON : role.getIcon();
    baseIcon=createLayeredIcon(methodIcon,false,false,method.hasModifierProperty(PsiModifier.STATIC));
  }
 else   if (element instanceof PsiField) {
    baseIcon=createLayeredIcon(Icons.FIELD_ICON,false,false,((PsiField)element).hasModifierProperty(PsiModifier.STATIC));
  }
 else   if (element instanceof PsiParameter) {
    baseIcon=createLayeredIcon(Icons.PARAMETER_ICON,false,false,false);
  }
 else   if (element instanceof PsiVariable) {
    baseIcon=createLayeredIcon(Icons.VARIABLE_ICON,false,false,((PsiVariable)element).hasModifierProperty(PsiModifier.STATIC));
  }
 else   if (element instanceof PsiPointcutDef) {
    baseIcon=createLayeredIcon(Icons.POINTCUT_ICON,false,false,false);
  }
 else   if (element instanceof PsiParentsIntroduction) {
    baseIcon=createLayeredIcon(Icons.PARENTS_INTRODUCTION_ICON,false,false,false);
  }
 else   if (element instanceof PsiErrorIntroduction) {
    baseIcon=createLayeredIcon(Icons.ERROR_INTRODUCTION_ICON,false,false,false);
  }
 else   if (element instanceof PsiWarningIntroduction) {
    baseIcon=createLayeredIcon(Icons.WARNING_INTRODUCTION_ICON,false,false,false);
  }
 else   if (element instanceof PsiSofteningIntroduction) {
    baseIcon=createLayeredIcon(Icons.SOFTENING_INTRODUCTION_ICON,false,false,false);
  }
 else   if (element instanceof PsiAdvice) {
    baseIcon=createLayeredIcon(Icons.ADVICE_ICON,false,false,false);
  }
 else   if (element instanceof XmlTag) {
    return Icons.XML_TAG_ICON;
  }
 else   if (element instanceof PsiAntElement) {
    return ((PsiAntElement)element).getRole().getIcon();
  }
 else {
    return null;
  }
  if ((flags & ICON_FLAG_VISIBILITY) != 0) {
    PsiModifierList modifierList=element instanceof PsiModifierListOwner ? ((PsiModifierListOwner)element).getModifierList() : null;
    IconUtilEx.setVisibilityIcon(modifierList,baseIcon);
  }
  return baseIcon;
}
