{
  myProject=project;
  mySuspendPolicyGroup=new ButtonGroup();
  mySuspendPolicyGroup.add(mySuspendAllRadio);
  mySuspendPolicyGroup.add(mySuspendThreadRadio);
  mySuspendPolicyGroup.add(mySuspendNoneRadio);
  myConditionCombo=new DebuggerExpressionComboBox(project,"LineBreakpoint condition");
  myLogExpressionCombo=new DebuggerExpressionComboBox(project,"LineBreakpoint logMessage");
  final JComboBox baseBreakpointCombo=new ComboBox();
  myBreakpointComboboxHandler=new BreakpointComboboxHandler(myProject,baseBreakpointCombo);
  baseBreakpointCombo.setRenderer(new BreakpointComboRenderer());
  myInstanceFiltersField=new FieldPanel(new MyTextField(),"",null,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      reloadInstanceFilters();
      EditInstanceFiltersDialog _dialog=new EditInstanceFiltersDialog(myProject);
      _dialog.setFilters(myInstanceFilters);
      _dialog.show();
      if (_dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        myInstanceFilters=_dialog.getFilters();
        updateInstanceFilterEditor(true);
      }
    }
  }
,null);
  myClassFiltersField=new FieldPanel(new MyTextField(),"",null,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      reloadClassFilters();
      TreeClassChooser.ClassFilter classFilter;
      classFilter=createClassConditionFilter();
      EditClassFiltersDialog _dialog=new EditClassFiltersDialog(myProject,classFilter);
      _dialog.setFilters(myClassFilters,myClassExclusionFilters);
      _dialog.show();
      if (_dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        myClassFilters=_dialog.getFilters();
        myClassExclusionFilters=_dialog.getExclusionFilters();
        updateClassFilterEditor(true);
      }
    }
  }
,null);
  ToolTipManager.sharedInstance().registerComponent(myClassFiltersField.getTextField());
  ToolTipManager.sharedInstance().registerComponent(myInstanceFiltersField.getTextField());
  JComponent specialBox=createSpecialBox();
  if (specialBox != null) {
    insert(mySpecialBoxPanel,specialBox);
  }
 else {
    mySpecialBoxPanel.setVisible(false);
  }
  final JPanel conditionPanel=new JPanel(new BorderLayout());
  conditionPanel.add(myConditionCombo,BorderLayout.CENTER);
  myConditionMagnifierButton=new FixedSizeButton(myConditionCombo);
  conditionPanel.add(myConditionMagnifierButton,BorderLayout.EAST);
  myConditionMagnifierButton.setFocusable(false);
  myConditionMagnifierButton.addActionListener(new MagnifierButtonAction(project,myConditionCombo,myConditionCheckbox.getText()));
  insert(myConditionComboPanel,conditionPanel);
  insert(myLogExpressionComboPanel,myLogExpressionCombo);
  insert(myDependentBreakpointComboPanel,baseBreakpointCombo);
  insert(myInstanceFiltersFieldPanel,myInstanceFiltersField);
  insert(myClassFiltersFieldPanel,myClassFiltersField);
  DebuggerUIUtil.enableEditorOnCheck(myLogExpressionCheckBox,myLogExpressionCombo);
  ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCheckboxes();
    }
  }
;
  myPassCountCheckbox.addActionListener(listener);
  myConditionCheckbox.addActionListener(listener);
  myInstanceFiltersCheckBox.addActionListener(listener);
  myClassFiltersCheckBox.addActionListener(listener);
  DebuggerUIUtil.focusEditorOnCheck(myPassCountCheckbox,myPassCountField);
  DebuggerUIUtil.focusEditorOnCheck(myConditionCheckbox,myConditionCombo);
  DebuggerUIUtil.focusEditorOnCheck(myLogExpressionCheckBox,myLogExpressionCombo);
  DebuggerUIUtil.focusEditorOnCheck(myInstanceFiltersCheckBox,myInstanceFiltersField.getTextField());
  DebuggerUIUtil.focusEditorOnCheck(myClassFiltersCheckBox,myClassFiltersField.getTextField());
}
