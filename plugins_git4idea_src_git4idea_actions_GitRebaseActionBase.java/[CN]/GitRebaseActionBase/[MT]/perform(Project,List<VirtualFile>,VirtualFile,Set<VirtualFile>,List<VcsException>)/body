{
  GitLineHandler h=createHandler(project,gitRoots,defaultRoot);
  if (h == null) {
    return;
  }
  final VirtualFile root=h.workingDirectoryFile();
  GitRebaseEditorService service=GitRebaseEditorService.getInstance();
  GitRebaseEditorHandler editor=service.getHandler(project,root);
  GitRabaseLineListener resultListener=new GitRabaseLineListener();
  h.addLineListener(resultListener);
  configureEditor(editor);
  affectedRoots.add(root);
  try {
    h.setenv(GitHandler.GIT_EDITOR_ENV,service.getEditorCommand());
    h.setenv(GitRebaseEditorMain.IDEA_REBASE_HANDER_NO,Integer.toString(editor.getHandlerNo()));
    GitHandlerUtil.doSynchronously(h,GitBundle.getString("rebasing.title"),h.printableCommandLine());
  }
  finally {
    editor.close();
    final GitRabaseLineListener.Result result=resultListener.getResult();
    String messageId;
    boolean isError=true;
switch (result.status) {
case CONFLICT:
      messageId="rebase.result.conflict";
    break;
case ERROR:
  messageId="rebase.result.error";
break;
case CANCELLED:
isError=false;
messageId="rebase.result.cancelled";
exceptions.clear();
break;
case EDIT:
isError=false;
messageId="rebase.result.amend";
break;
case FINISHED:
default :
messageId=null;
}
if (messageId != null) {
String message=GitBundle.message(messageId,result.current,result.total);
String title=GitBundle.message(messageId + ".title");
if (isError) {
Messages.showErrorDialog(project,message,title);
}
 else {
Messages.showInfoMessage(project,message,title);
}
}
}
}
