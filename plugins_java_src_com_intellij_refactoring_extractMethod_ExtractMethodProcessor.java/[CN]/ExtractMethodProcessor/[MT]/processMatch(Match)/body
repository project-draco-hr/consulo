{
  MatchUtil.changeSignature(match,myExtractedMethod);
  if (RefactoringUtil.isInStaticContext(match.getMatchStart(),myExtractedMethod.getContainingClass())) {
    PsiUtil.setModifierProperty(myExtractedMethod,PsiModifier.STATIC,true);
  }
  final PsiMethodCallExpression methodCallExpression=generateMethodCall(match.getInstanceExpression(),false);
  ArrayList<VariableData> datas=new ArrayList<VariableData>();
  for (  final VariableData variableData : myVariableDatum) {
    if (variableData.passAsParameter) {
      datas.add(variableData);
    }
  }
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
  for (  VariableData data : datas) {
    final List<PsiElement> parameterValue=match.getParameterValues(data.variable);
    if (parameterValue != null) {
      for (      PsiElement val : parameterValue) {
        if (val instanceof PsiExpression) {
          final PsiType exprType=((PsiExpression)val).getType();
          if (exprType != null && !TypeConversionUtil.isAssignable(data.type,exprType)) {
            final PsiTypeCastExpression cast=(PsiTypeCastExpression)elementFactory.createExpressionFromText("(A)a",val);
            cast.getCastType().replace(elementFactory.createTypeElement(data.type));
            cast.getOperand().replace(val.copy());
            val=cast;
          }
        }
        methodCallExpression.getArgumentList().add(val);
      }
    }
  }
  return match.replace(myExtractedMethod,methodCallExpression,myOutputVariable);
}
