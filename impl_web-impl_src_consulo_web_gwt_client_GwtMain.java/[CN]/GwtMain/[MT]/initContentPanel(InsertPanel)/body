{
  Grid grid=GwtUIUtil.fillAndReturn(new Grid(2,1));
  Command cmd=new Command(){
    @Override public void execute(){
    }
  }
;
  MenuBar fileMenu=new MenuBar(true);
  fileMenu.addItem("Settings",cmd);
  fileMenu.addItem("Project Structure",cmd);
  MenuBar menu=new MenuBar();
  menu.addItem("File",fileMenu);
  final EditorColorSchemeService schemeService=GwtUtil.get(EditorColorSchemeService.KEY);
  EditorColorSchemeListService listService=GwtUtil.get(EditorColorSchemeListService.KEY);
  MenuBar schemeMenu=new MenuBar(true);
  for (  final String schemeName : listService.getSchemes()) {
    schemeMenu.addItem(schemeName,new Command(){
      @Override public void execute(){
        schemeService.setScheme(schemeName);
      }
    }
);
  }
  menu.addItem("Scheme",schemeMenu);
  grid.getRowFormatter().getElement(0).getStyle().setHeight(26,Style.Unit.PX);
  grid.setWidget(0,0,menu);
  final HorizontalSplitPanel splitPanel=GwtUIUtil.fillAndReturn(new HorizontalSplitPanel());
  splitPanel.setSplitPosition("20%");
  final EditorTabPanel editorTabPanel=GwtUIUtil.fillAndReturn(new EditorTabPanel());
  splitPanel.setLeftWidget(GwtUIUtil.loadingPanel());
  splitPanel.setRightWidget(editorTabPanel);
  Element parentElement=editorTabPanel.getElement().getParentElement();
  parentElement.getStyle().setProperty("overflow","hidden");
  GwtUtil.rpc().getProjectInfo("ignored",new ReportableCallable<GwtProjectInfo>(){
    @Override public void onSuccess(    GwtProjectInfo result){
      CellTree projectTree=new CellTree(new ProjectTreeViewModel(result,editorTabPanel),result,GWT.<CellTree.Resources>create(DefaultCellTreeResources.class));
      projectTree.getRootTreeNode().setChildOpen(0,true);
      splitPanel.setLeftWidget(GwtUIUtil.fillAndReturn(projectTree));
    }
  }
);
  grid.setWidget(1,0,splitPanel);
  rootPanel.add(grid);
}
