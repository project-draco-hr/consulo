{
  int atIndex;
  if (line.startsWith("at ")) {
    atIndex=0;
  }
 else {
    atIndex=line.indexOf("at ");
    if (atIndex < 0) {
      atIndex=line.indexOf(" at ");
    }
    if (atIndex < 0)     return null;
  }
  final int lparenthIndex=line.indexOf('(',atIndex);
  if (lparenthIndex < 0)   return null;
  final int lastDotIndex=line.lastIndexOf('.',lparenthIndex);
  if (lastDotIndex < 0 || lastDotIndex < atIndex)   return null;
  String className=line.substring(atIndex + "at".length() + 1,lastDotIndex).trim();
  final int dollarIndex=className.indexOf('$');
  if (dollarIndex >= 0) {
    className=className.substring(0,dollarIndex);
  }
  final int rparenthIndex=line.indexOf(')',lparenthIndex);
  if (rparenthIndex < 0)   return null;
  final String fileAndLine=line.substring(lparenthIndex + 1,rparenthIndex).trim();
  final int colonIndex=fileAndLine.lastIndexOf(':');
  if (colonIndex < 0)   return null;
  final String lineString=fileAndLine.substring(colonIndex + 1);
  final String filePath=fileAndLine.substring(0,colonIndex).replace('/',File.separatorChar);
  try {
    final int lineNumber=Integer.parseInt(lineString);
    final String className1=className;
    final PsiManager manager=PsiManager.getInstance(myProject);
    PsiClass aClass=manager.findClass(className1,GlobalSearchScope.allScope(myProject));
    if (aClass == null)     return null;
    aClass=(PsiClass)aClass.getNavigationElement();
    if (aClass == null)     return null;
    final PsiFile file=aClass.getContainingFile();
    final int slashIndex=filePath.lastIndexOf(File.separatorChar);
    final String shortFileName=slashIndex < 0 ? filePath : filePath.substring(slashIndex + 1);
    if (!file.getName().equalsIgnoreCase(shortFileName))     return null;
    final int textStartOffset=entireLength - line.length();
    final int highlightStartOffset=textStartOffset + lparenthIndex + 1;
    final int highlightEndOffset=textStartOffset + rparenthIndex;
    final OpenFileHyperlinkInfo info=new OpenFileHyperlinkInfo(myProject,file.getVirtualFile(),lineNumber - 1);
    return new Result(highlightStartOffset,highlightEndOffset,info);
  }
 catch (  NumberFormatException e) {
    return null;
  }
}
