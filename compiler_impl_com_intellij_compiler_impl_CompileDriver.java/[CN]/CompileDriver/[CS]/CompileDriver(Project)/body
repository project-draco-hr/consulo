{
  myProject=project;
  myCachesDirectoryPath=CompilerPaths.getCacheStoreDirectory(myProject).getPath().replace('/',File.separatorChar);
  myShouldClearOutputDirectory=CompilerWorkspaceConfiguration.getInstance(myProject).CLEAR_OUTPUT_DIRECTORY;
  myGenerationCompilerModuleToOutputDirMap=new HashMap<Pair<IntermediateOutputCompiler,Module>,Pair<VirtualFile,VirtualFile>>();
  final IntermediateOutputCompiler[] generatingCompilers=CompilerManager.getInstance(myProject).getCompilers(IntermediateOutputCompiler.class);
  if (generatingCompilers.length > 0) {
    final Module[] allModules=ModuleManager.getInstance(myProject).getModules();
    for (    IntermediateOutputCompiler compiler : generatingCompilers) {
      for (      final Module module : allModules) {
        final VirtualFile productionOutput=lookupVFile(compiler,module,false);
        final VirtualFile testOutput=lookupVFile(compiler,module,true);
        final Pair<IntermediateOutputCompiler,Module> pair=new Pair<IntermediateOutputCompiler,Module>(compiler,module);
        final Pair<VirtualFile,VirtualFile> outputs=new Pair<VirtualFile,VirtualFile>(productionOutput,testOutput);
        myGenerationCompilerModuleToOutputDirMap.put(pair,outputs);
      }
    }
  }
  myProcessingCompilerAdapterFactory=new FileProcessingCompilerAdapterFactory(){
    public FileProcessingCompilerAdapter create(    CompileContext context,    FileProcessingCompiler compiler){
      return new FileProcessingCompilerAdapter(context,compiler);
    }
  }
;
  myPackagingCompilerAdapterFactory=new FileProcessingCompilerAdapterFactory(){
    public FileProcessingCompilerAdapter create(    CompileContext context,    FileProcessingCompiler compiler){
      return new PackagingCompilerAdapter(context,(PackagingCompiler)compiler);
    }
  }
;
  myFixedTimestampCompilerAdapterFactory=new FileProcessingCompilerAdapterFactory(){
    public FileProcessingCompilerAdapter create(    CompileContext context,    FileProcessingCompiler compiler){
      return new FixedTimestampCompilerAdapter(context,compiler);
    }
  }
;
}
