{
  final ExitStatus[] status={null};
  runInContext(context,"Refreshing files...",new ThrowableRunnable<RuntimeException>(){
    public void run(){
      boolean needRecalcOutputDirs=false;
      final List<VirtualFile> outputsToRefresh=new ArrayList<VirtualFile>();
      for (      VirtualFile output : context.getAllOutputDirectories()) {
        if (output.isValid()) {
          walkChildren(output,context);
        }
 else {
          needRecalcOutputDirs=true;
          final File file=new File(output.getPath());
          if (!file.exists()) {
            final boolean created=file.mkdirs();
            if (!created) {
              context.addMessage(CompilerMessageCategory.ERROR,"Failed to create output directory " + file.getPath(),null,0,0);
              status[0]=ExitStatus.ERRORS;
              return;
            }
          }
          output=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file);
          if (output == null) {
            context.addMessage(CompilerMessageCategory.ERROR,"Failed to locate output directory " + file.getPath(),null,0,0);
            status[0]=ExitStatus.ERRORS;
            return;
          }
        }
        outputsToRefresh.add(output);
      }
      for (      Map.Entry<Pair<IntermediateOutputCompiler,Module>,Pair<VirtualFile,VirtualFile>> entry : myGenerationCompilerModuleToOutputDirMap.entrySet()) {
        final Pair<VirtualFile,VirtualFile> generated=entry.getValue();
        walkChildren(generated.getFirst(),context);
        outputsToRefresh.add(generated.getFirst());
        walkChildren(generated.getSecond(),context);
        outputsToRefresh.add(generated.getSecond());
      }
      RefreshQueue.getInstance().refresh(false,true,null,outputsToRefresh.toArray(new VirtualFile[outputsToRefresh.size()]));
      if (needRecalcOutputDirs) {
        context.recalculateOutputDirs();
      }
    }
  }
);
  return status[0];
}
