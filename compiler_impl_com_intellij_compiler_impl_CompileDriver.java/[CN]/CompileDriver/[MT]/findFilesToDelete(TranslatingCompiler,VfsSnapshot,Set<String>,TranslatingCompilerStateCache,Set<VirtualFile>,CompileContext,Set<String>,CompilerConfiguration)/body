{
  final CompileScope scope=context.getCompileScope();
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final boolean outputDirsUpToDate=CompilerDirectoryTimestamp.isUpToDate(Arrays.asList(context.getAllOutputDirectories()));
  for (Iterator<String> it=cache.getOutputUrlsIterator(); it.hasNext(); ) {
    final String outputPath=it.next();
    final SourceUrlClassNamePair srcUrlNamePair=cache.getUrlClassNamePair(outputPath);
    final String sourceUrl=srcUrlNamePair != null ? srcUrlNamePair.getSourceUrl() : null;
    if (!scope.belongs(sourceUrl)) {
      continue;
    }
    final VirtualFile sourceFile=snapshot.getFileByUrl(sourceUrl);
    boolean needRecompile=false;
    boolean shouldDelete;
    if (outputDirsUpToDate || lfs.findFileByPath(outputPath) != null) {
      if (sourceFile == null) {
        shouldDelete=true;
      }
 else {
        if (toCompile.contains(sourceFile)) {
          shouldDelete=!FileUtil.pathsEqual(outputPath,VirtualFileManager.extractPath(sourceUrl));
        }
 else {
          final String currentOutputDir=getModuleOutputDirForFile(context,sourceFile);
          if (currentOutputDir != null) {
            final String className=srcUrlNamePair != null ? srcUrlNamePair.getClassName() : null;
            if (className == null || isUnderOutputDir(currentOutputDir,outputPath,className)) {
              shouldDelete=!compiler.isCompilableFile(sourceFile,context);
            }
 else {
              shouldDelete=true;
              needRecompile=true;
            }
          }
 else {
            shouldDelete=true;
          }
        }
      }
    }
 else {
      needRecompile=true;
      shouldDelete=true;
    }
    if (shouldDelete) {
      toDelete.add(outputPath);
    }
    if (needRecompile) {
      if (sourceFile != null) {
        if (!compilerConfiguration.isExcludedFromCompilation(sourceFile)) {
          toCompile.add(sourceFile);
        }
      }
    }
    if (sourceFile == null) {
      urlsWithSourceRemoved.add(outputPath);
    }
  }
}
