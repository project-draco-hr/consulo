{
  if (LOG.isDebugEnabled()) {
    LOG.debug("isUpToDate operation started");
  }
  scope=addAdditionalRoots(scope);
  final CompilerTask task=new CompilerTask(myProject,true,"",true);
  final CompileContextImpl compileContext=new CompileContextImpl(myProject,task,scope,createDependencyCache(),true,false);
  checkCachesVersion(compileContext);
  if (compileContext.isRebuildRequested()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Rebuild requested, up-to-date=false");
    }
    return false;
  }
  for (  Map.Entry<Pair<IntermediateOutputCompiler,Module>,Pair<VirtualFile,VirtualFile>> entry : myGenerationCompilerModuleToOutputDirMap.entrySet()) {
    final Pair<VirtualFile,VirtualFile> outputs=entry.getValue();
    Module module=entry.getKey().getSecond();
    compileContext.assignModule(outputs.getFirst(),module,false);
    compileContext.assignModule(outputs.getSecond(),module,true);
  }
  final Ref<ExitStatus> status=new Ref<ExitStatus>();
  task.start(new Runnable(){
    public void run(){
      try {
        myAllOutputDirectories=getAllOutputDirectories();
        myOutputFinder=new OutputPathFinder(myAllOutputDirectories);
        status.set(doCompile(compileContext,false,false,false,true));
      }
  finally {
        compileContext.commitZipFiles();
      }
    }
  }
,null);
  if (LOG.isDebugEnabled()) {
    LOG.debug("isUpToDate operation finished");
  }
  return ExitStatus.UP_TO_DATE.equals(status.get());
}
