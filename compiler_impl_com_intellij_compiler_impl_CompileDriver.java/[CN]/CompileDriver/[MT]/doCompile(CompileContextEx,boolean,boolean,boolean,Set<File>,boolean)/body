{
  try {
    if (isRebuild) {
      deleteAll(context,outputDirectories);
      if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
        if (LOG.isDebugEnabled()) {
          logErrorMessages(context);
        }
        return ExitStatus.ERRORS;
      }
    }
    if (!onlyCheckStatus) {
      if (!executeCompileTasks(context,true)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Compilation cancelled");
        }
        return ExitStatus.CANCELLED;
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      if (LOG.isDebugEnabled()) {
        logErrorMessages(context);
      }
      return ExitStatus.ERRORS;
    }
    final ExitStatus status=refreshFiles(context);
    if (status != null)     return status;
    boolean didSomething=false;
    final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
    try {
      didSomething|=generateSources(compilerManager,context,forceCompile,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,SourceInstrumentingCompiler.class,FILE_PROCESSING_COMPILER_ADAPTER_FACTORY,forceCompile,true,onlyCheckStatus);
      didSomething|=translate(context,compilerManager,forceCompile,isRebuild,trackDependencies,outputDirectories,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassInstrumentingCompiler.class,FILE_PROCESSING_COMPILER_ADAPTER_FACTORY,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassPostProcessingCompiler.class,FILE_PROCESSING_COMPILER_ADAPTER_FACTORY,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,PackagingCompiler.class,FILE_PACKAGING_COMPILER_ADAPTER_FACTORY,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,Validator.class,FILE_PROCESSING_COMPILER_ADAPTER_FACTORY,forceCompile,true,onlyCheckStatus);
    }
 catch (    ExitException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(e);
        logErrorMessages(context);
      }
      return e.getExitStatus();
    }
 finally {
      dropDependencyCache(context);
      final VirtualFile[] allOutputDirs=context.getAllOutputDirectories();
      if (didSomething && GENERATE_CLASSPATH_INDEX) {
        runInContext(context,"Generating classpath index...",new ThrowableRunnable<RuntimeException>(){
          public void run(){
            int count=0;
            for (            VirtualFile file : allOutputDirs) {
              context.getProgressIndicator().setFraction((double)++count / allOutputDirs.length);
              createClasspathIndex(file);
            }
          }
        }
);
      }
      if (!context.getProgressIndicator().isCanceled() && context.getMessageCount(CompilerMessageCategory.ERROR) == 0) {
        RefreshQueue.getInstance().refresh(true,true,new Runnable(){
          public void run(){
            CompilerDirectoryTimestamp.updateTimestamp(Arrays.asList(allOutputDirs));
          }
        }
,allOutputDirs);
      }
    }
    if (!onlyCheckStatus) {
      if (!executeCompileTasks(context,false)) {
        return ExitStatus.CANCELLED;
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      if (LOG.isDebugEnabled()) {
        logErrorMessages(context);
      }
      return ExitStatus.ERRORS;
    }
    if (!didSomething) {
      return ExitStatus.UP_TO_DATE;
    }
    return ExitStatus.SUCCESS;
  }
 catch (  ProcessCanceledException e) {
    return ExitStatus.CANCELLED;
  }
}
