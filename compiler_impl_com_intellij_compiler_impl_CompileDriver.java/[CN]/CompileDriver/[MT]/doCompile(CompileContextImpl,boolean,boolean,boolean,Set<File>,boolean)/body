{
  try {
    if (isRebuild) {
      deleteAll(context,outputDirectories);
      if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
        return ExitStatus.ERRORS;
      }
    }
    if (!onlyCheckStatus) {
      try {
        context.getProgressIndicator().pushState();
        if (!executeCompileTasks(context,true)) {
          return ExitStatus.CANCELLED;
        }
      }
  finally {
        context.getProgressIndicator().popState();
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      return ExitStatus.ERRORS;
    }
    for (    VirtualFile output : context.getAllOutputDirectories()) {
      walkChildren(output);
    }
    CompilerUtil.refreshVirtualFiles(Arrays.asList(context.getAllOutputDirectories()));
    boolean didSomething=false;
    final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
    try {
      didSomething|=generateSources(compilerManager,context,forceCompile,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,SourceInstrumentingCompiler.class,myProcessingCompilerAdapterFactory,forceCompile,true,onlyCheckStatus);
      didSomething|=translate(context,compilerManager,forceCompile,isRebuild,trackDependencies,outputDirectories,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassInstrumentingCompiler.class,myFixedTimestampCompilerAdapterFactory,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassPostProcessingCompiler.class,myFixedTimestampCompilerAdapterFactory,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,PackagingCompiler.class,myPackagingCompilerAdapterFactory,isRebuild,true,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,Validator.class,myProcessingCompilerAdapterFactory,forceCompile,true,onlyCheckStatus);
    }
 catch (    ExitException e) {
      return e.getExitStatus();
    }
 finally {
      dropDependencyCache(context);
      final VirtualFile[] allOutputDirs=context.getAllOutputDirectories();
      if (didSomething && GENERATE_CLASSPATH_INDEX) {
        context.getProgressIndicator().pushState();
        context.getProgressIndicator().setText("Generating classpath index...");
        int count=0;
        for (        VirtualFile file : allOutputDirs) {
          context.getProgressIndicator().setFraction(((double)++count) / allOutputDirs.length);
          createClasspathIndex(file);
        }
        context.getProgressIndicator().popState();
      }
      if (context.getMessageCount(CompilerMessageCategory.ERROR) == 0) {
        RefreshQueue.getInstance().refresh(true,true,new Runnable(){
          public void run(){
            CompilerDirectoryTimestamp.updateTimestamp(Arrays.asList(allOutputDirs));
          }
        }
,allOutputDirs);
      }
    }
    if (!onlyCheckStatus) {
      try {
        context.getProgressIndicator().pushState();
        if (!executeCompileTasks(context,false)) {
          return ExitStatus.CANCELLED;
        }
      }
  finally {
        context.getProgressIndicator().popState();
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      return ExitStatus.ERRORS;
    }
    if (!didSomething) {
      return ExitStatus.UP_TO_DATE;
    }
    return ExitStatus.SUCCESS;
  }
 catch (  ProcessCanceledException e) {
    return ExitStatus.CANCELLED;
  }
}
