{
  try {
    if (isRebuild) {
      deleteAll(context,outputDirectories);
      if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
        return ExitStatus.ERRORS;
      }
    }
    if (!onlyCheckStatus) {
      try {
        context.getProgressIndicator().pushState();
        if (!executeCompileTasks(context,true)) {
          return ExitStatus.CANCELLED;
        }
      }
  finally {
        context.getProgressIndicator().popState();
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      return ExitStatus.ERRORS;
    }
    if (!isRebuild) {
      context.getProgressIndicator().setText(CompilerBundle.message("progress.scanning.output"));
      myOutputFilesOnDisk=new TreeBasedPathsSet(myStringInterner,'/');
      CompilerPathsEx.visitFiles(context.getAllOutputDirectories(),new CompilerPathsEx.FileVisitor(){
        protected void acceptFile(        VirtualFile file,        String fileRoot,        String filePath){
          if (!(file.getFileSystem() instanceof JarFileSystem)) {
            myOutputFilesOnDisk.add(filePath);
          }
        }
      }
);
    }
    boolean didSomething=false;
    final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
    try {
      didSomething|=generateSources(compilerManager,context,forceCompile,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,SourceInstrumentingCompiler.class,myProcessingCompilerAdapterFactory,forceCompile,true,onlyCheckStatus);
      didSomething|=translate(context,compilerManager,forceCompile,isRebuild,trackDependencies,outputDirectories,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassInstrumentingCompiler.class,myFixedTimestampCompilerAdapterFactory,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,ClassPostProcessingCompiler.class,myFixedTimestampCompilerAdapterFactory,isRebuild,false,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,PackagingCompiler.class,myPackagingCompilerAdapterFactory,isRebuild,true,onlyCheckStatus);
      didSomething|=invokeFileProcessingCompilers(compilerManager,context,Validator.class,myProcessingCompilerAdapterFactory,forceCompile,true,onlyCheckStatus);
    }
 catch (    ExitException e) {
      return e.getExitStatus();
    }
 finally {
      dropDependencyCache(context);
      if (didSomething && GENERATE_CLASSPATH_INDEX) {
        context.getProgressIndicator().pushState();
        context.getProgressIndicator().setText("Generating classpath index...");
        final VirtualFile[] allOutputDirs=context.getAllOutputDirectories();
        int count=0;
        for (        VirtualFile file : allOutputDirs) {
          context.getProgressIndicator().setFraction(((double)++count) / allOutputDirs.length);
          createClasspathIndex(file);
        }
        context.getProgressIndicator().popState();
      }
    }
    if (!onlyCheckStatus) {
      try {
        context.getProgressIndicator().pushState();
        if (!executeCompileTasks(context,false)) {
          return ExitStatus.CANCELLED;
        }
      }
  finally {
        context.getProgressIndicator().popState();
      }
    }
    if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
      return ExitStatus.ERRORS;
    }
    if (!didSomething) {
      return ExitStatus.UP_TO_DATE;
    }
    return ExitStatus.SUCCESS;
  }
 catch (  ProcessCanceledException e) {
    return ExitStatus.CANCELLED;
  }
}
