{
  final CompileContext context=adapter.getCompileContext();
  final FileProcessingCompilerStateCache cache=getFileProcessingCompilerCache(adapter.getCompiler());
  final FileProcessingCompiler.ProcessingItem[] items=adapter.getProcessingItems();
  if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
    return false;
  }
  final CompileScope scope=context.getCompileScope();
  final List<FileProcessingCompiler.ProcessingItem> toProcess=new ArrayList<FileProcessingCompiler.ProcessingItem>();
  final Set<String> allUrls=new HashSet<String>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      for (      FileProcessingCompiler.ProcessingItem item : items) {
        final VirtualFile file=item.getFile();
        final String url=file.getUrl();
        allUrls.add(url);
        if (!forceCompile && cache.getTimestamp(url) == file.getTimeStamp()) {
          final ValidityState state=cache.getExtState(url);
          final ValidityState itemState=item.getValidityState();
          if (state != null ? state.equalsTo(itemState) : itemState == null) {
            continue;
          }
        }
        toProcess.add(item);
      }
    }
  }
);
  final String[] urls=cache.getUrls();
  if (urls.length > 0) {
    context.getProgressIndicator().pushState();
    context.getProgressIndicator().setText(CompilerBundle.message("progress.processing.outdated.files"));
    final List<String> urlsToRemove=new ArrayList<String>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        for (        final String url : urls) {
          if (!allUrls.contains(url)) {
            if (!checkScope || scope.belongs(url)) {
              urlsToRemove.add(url);
            }
          }
        }
      }
    }
);
    if (urlsToRemove.size() > 0) {
      for (      final String url : urlsToRemove) {
        adapter.processOutdatedItem(context,url,cache.getExtState(url));
        cache.remove(url);
      }
    }
    context.getProgressIndicator().popState();
  }
  if (toProcess.size() == 0) {
    return false;
  }
  context.getProgressIndicator().pushState();
  final FileProcessingCompiler.ProcessingItem[] processed=adapter.process(toProcess.toArray(new FileProcessingCompiler.ProcessingItem[toProcess.size()]));
  context.getProgressIndicator().popState();
  if (processed.length > 0) {
    context.getProgressIndicator().pushState();
    context.getProgressIndicator().setText(CompilerBundle.message("progress.updating.caches"));
    try {
      final VirtualFile[] vFiles=new VirtualFile[processed.length];
      for (int idx=0; idx < processed.length; idx++) {
        vFiles[idx]=processed[idx].getFile();
      }
      CompilerUtil.refreshVirtualFiles(vFiles);
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          for (          FileProcessingCompiler.ProcessingItem item : processed) {
            cache.update(item.getFile(),item.getValidityState());
          }
        }
      }
);
    }
  finally {
      if (cache.isDirty()) {
        context.getProgressIndicator().setText(CompilerBundle.message("progress.saving.caches"));
        cache.save();
      }
      context.getProgressIndicator().popState();
    }
  }
  return true;
}
