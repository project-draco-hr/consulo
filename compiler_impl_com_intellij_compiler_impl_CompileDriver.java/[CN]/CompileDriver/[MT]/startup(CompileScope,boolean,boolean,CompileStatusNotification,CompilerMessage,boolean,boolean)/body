{
  final CompilerTask indicator=new CompilerTask(myProject,CompilerWorkspaceConfiguration.getInstance(myProject).COMPILE_IN_BACKGROUND,forceCompile ? CompilerBundle.message("compiler.content.name.compile") : CompilerBundle.message("compiler.content.name.make"),false);
  WindowManager.getInstance().getStatusBar(myProject).setInfo("");
  final DependencyCache dependencyCache=new DependencyCache(myCachesDirectoryPath);
  final CompileContextImpl compileContext=new CompileContextImpl(myProject,indicator,scope,dependencyCache,this,!isRebuild && !forceCompile);
  compileContext.putUserData(COMPILATION_START_TIMESTAMP,LocalTimeCounter.currentTime());
  for (  Pair<Compiler,Module> pair : myGenerationCompilerModuleToOutputDirMap.keySet()) {
    compileContext.assignModule(myGenerationCompilerModuleToOutputDirMap.get(pair),pair.getSecond());
  }
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  FileDocumentManager.getInstance().saveAllDocuments();
  indicator.start(new Runnable(){
    public void run(){
      final Semaphore semaphore=((CompilerManagerImpl)CompilerManager.getInstance(myProject)).getCompilationSemaphore();
      semaphore.acquireUninterruptibly();
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug("COMPILATION STARTED");
        }
        if (message != null) {
          compileContext.addMessage(message);
        }
        doCompile(compileContext,isRebuild,forceCompile,callback,checkCachesVersion,trackDependencies);
      }
  finally {
        semaphore.release();
        if (LOG.isDebugEnabled()) {
          LOG.debug("COMPILATION FINISHED");
        }
      }
    }
  }
);
}
