{
  final CompilerTask compileTask=new CompilerTask(myProject,CompilerWorkspaceConfiguration.getInstance(myProject).COMPILE_IN_BACKGROUND,forceCompile ? CompilerBundle.message("compiler.content.name.compile") : CompilerBundle.message("compiler.content.name.make"),false);
  final WindowManager windowManager=WindowManager.getInstance();
  if (windowManager != null) {
    windowManager.getStatusBar(myProject).setInfo("");
  }
  final DependencyCache dependencyCache=createDependencyCache();
  final CompileContextImpl compileContext=new CompileContextImpl(myProject,compileTask,scope,dependencyCache,this,!isRebuild && !forceCompile);
  compileContext.putUserData(COMPILATION_START_TIMESTAMP,LocalTimeCounter.currentTime());
  for (  Pair<IntermediateOutputCompiler,Module> pair : myGenerationCompilerModuleToOutputDirMap.keySet()) {
    final Pair<VirtualFile,VirtualFile> outputs=myGenerationCompilerModuleToOutputDirMap.get(pair);
    compileContext.assignModule(outputs.getFirst(),pair.getSecond(),false);
    compileContext.assignModule(outputs.getSecond(),pair.getSecond(),true);
  }
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  FileDocumentManager.getInstance().saveAllDocuments();
  compileTask.start(new Runnable(){
    public void run(){
      try {
        if (myProject.isDisposed()) {
          return;
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("COMPILATION STARTED");
        }
        if (message != null) {
          compileContext.addMessage(message);
        }
        doCompile(compileContext,isRebuild,forceCompile,callback,checkCachesVersion,trackDependencies);
      }
  finally {
        if (LOG.isDebugEnabled()) {
          LOG.debug("COMPILATION FINISHED");
        }
      }
    }
  }
);
}
