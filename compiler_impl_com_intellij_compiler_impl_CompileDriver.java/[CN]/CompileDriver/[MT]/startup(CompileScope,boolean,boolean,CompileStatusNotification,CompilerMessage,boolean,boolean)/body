{
  final WolfTheProblemSolver.ProblemUpdateTransaction update=WolfTheProblemSolver.getInstance(myProject).startUpdatingProblemsInScope(scope);
  final CompilerProgressIndicator indicator=new CompilerProgressIndicator(myProject,CompilerWorkspaceConfiguration.getInstance(myProject).COMPILE_IN_BACKGROUND,forceCompile ? CompilerBundle.message("compiler.content.name.compile") : CompilerBundle.message("compiler.content.name.make"),update);
  WindowManager.getInstance().getStatusBar(myProject).setInfo("");
  final DependencyCache dependencyCache=new DependencyCache(myCachesDirectoryPath,myProject);
  final CompileContextImpl compileContext=new CompileContextImpl(myProject,indicator,scope,dependencyCache,this,!isRebuild && !forceCompile);
  for (  Pair<Compiler,Module> pair : myGenerationCompilerModuleToOutputDirMap.keySet()) {
    compileContext.assignModule(myGenerationCompilerModuleToOutputDirMap.get(pair),pair.getSecond());
  }
  if (message != null) {
    compileContext.addMessage(message);
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final Thread compileThread=new Thread("Compile Thread"){
    public void run(){
synchronized (CompilerManager.getInstance(myProject)) {
        ProgressManager.getInstance().runProcess(new Runnable(){
          public void run(){
            try {
              if (LOG.isDebugEnabled()) {
                LOG.debug("COMPILATION STARTED");
              }
              doCompile(compileContext,isRebuild,forceCompile,callback,checkCachesVersion,trackDependencies);
            }
  finally {
              update.commit();
              if (LOG.isDebugEnabled()) {
                LOG.debug("COMPILATION FINISHED");
              }
            }
          }
        }
,compileContext.getProgressIndicator());
      }
    }
  }
;
  compileThread.setPriority(Thread.NORM_PRIORITY);
  compileThread.start();
}
