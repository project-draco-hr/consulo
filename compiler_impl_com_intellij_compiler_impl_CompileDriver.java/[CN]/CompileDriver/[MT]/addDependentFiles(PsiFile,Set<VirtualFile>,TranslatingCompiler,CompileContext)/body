{
  final DependenciesBuilder builder=new ForwardDependenciesBuilder(myProject,new AnalysisScope(psiFile));
  builder.analyze();
  final Map<PsiFile,Set<PsiFile>> dependencies=builder.getDependencies();
  final Set<PsiFile> dependentFiles=dependencies.get(psiFile);
  if (dependentFiles != null && !dependentFiles.isEmpty()) {
    final TranslatingCompilerFilesMonitor monitor=TranslatingCompilerFilesMonitor.getInstance();
    for (    final PsiFile dependentFile : dependentFiles) {
      if (dependentFile instanceof PsiCompiledElement) {
        continue;
      }
      final VirtualFile vFile=dependentFile.getVirtualFile();
      if (vFile == null || toCompile.contains(vFile)) {
        continue;
      }
      if (!compiler.isCompilableFile(vFile,context)) {
        continue;
      }
      if (!monitor.isMarkedForCompilation(myProject,vFile)) {
        continue;
      }
      toCompile.add(vFile);
      addDependentFiles(dependentFile,toCompile,compiler,context);
    }
  }
}
