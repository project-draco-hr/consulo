{
  final CompileContextEx context=(CompileContextEx)adapter.getCompileContext();
  final FileProcessingCompilerStateCache cache=getFileProcessingCompilerCache(adapter.getCompiler());
  final FileProcessingCompiler.ProcessingItem[] items=adapter.getProcessingItems();
  if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
    return false;
  }
  final CompileScope scope=context.getCompileScope();
  final List<FileProcessingCompiler.ProcessingItem> toProcess=new ArrayList<FileProcessingCompiler.ProcessingItem>();
  final Set<String> allUrls=new HashSet<String>();
  final IOException[] ex={null};
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        for (        FileProcessingCompiler.ProcessingItem item : items) {
          final VirtualFile file=item.getFile();
          if (file == null) {
            LOG.error("FileProcessingCompiler.ProcessingItem.getFile() must not return null: compiler " + adapter.getCompiler().getDescription());
            continue;
          }
          final String url=file.getUrl();
          allUrls.add(url);
          if (!forceCompile && cache.getTimestamp(url) == file.getTimeStamp()) {
            final ValidityState state=cache.getExtState(url);
            final ValidityState itemState=item.getValidityState();
            if (state != null ? state.equalsTo(itemState) : itemState == null) {
              continue;
            }
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug("Adding item to process: " + url + "; saved ts= "+ cache.getTimestamp(url)+ "; VFS ts="+ file.getTimeStamp());
          }
          toProcess.add(item);
        }
      }
 catch (      IOException e) {
        ex[0]=e;
      }
    }
  }
);
  if (ex[0] != null) {
    throw ex[0];
  }
  final Collection<String> urls=cache.getUrls();
  final List<String> urlsToRemove=new ArrayList<String>();
  if (!urls.isEmpty()) {
    CompilerUtil.runInContext(context,CompilerBundle.message("progress.processing.outdated.files"),new ThrowableRunnable<IOException>(){
      public void run() throws IOException {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            for (            final String url : urls) {
              if (!allUrls.contains(url)) {
                if (!checkScope || scope.belongs(url)) {
                  urlsToRemove.add(url);
                }
              }
            }
          }
        }
);
        if (!onlyCheckStatus && !urlsToRemove.isEmpty()) {
          for (          final String url : urlsToRemove) {
            adapter.processOutdatedItem(context,url,cache.getExtState(url));
            cache.remove(url);
          }
        }
      }
    }
);
  }
  if (onlyCheckStatus) {
    if (urlsToRemove.isEmpty() && toProcess.isEmpty()) {
      return false;
    }
    if (LOG.isDebugEnabled()) {
      if (!urlsToRemove.isEmpty()) {
        LOG.debug("Found urls to remove, compiler " + adapter.getCompiler().getDescription());
        for (        String url : urlsToRemove) {
          LOG.debug("\t" + url);
        }
      }
      if (!toProcess.isEmpty()) {
        LOG.debug("Found items to compile, compiler " + adapter.getCompiler().getDescription());
        for (        FileProcessingCompiler.ProcessingItem item : toProcess) {
          LOG.debug("\t" + item.getFile().getPresentableUrl());
        }
      }
    }
    throw new ExitException(ExitStatus.CANCELLED);
  }
  if (toProcess.isEmpty()) {
    return false;
  }
  final FileProcessingCompiler.ProcessingItem[] processed=adapter.process(toProcess.toArray(new FileProcessingCompiler.ProcessingItem[toProcess.size()]));
  if (processed.length == 0) {
    return true;
  }
  CompilerUtil.runInContext(context,CompilerBundle.message("progress.updating.caches"),new ThrowableRunnable<IOException>(){
    public void run() throws IOException {
      final List<VirtualFile> vFiles=new ArrayList<VirtualFile>(processed.length);
      for (      FileProcessingCompiler.ProcessingItem aProcessed : processed) {
        final VirtualFile file=aProcessed.getFile();
        vFiles.add(file);
        if (LOG.isDebugEnabled()) {
          LOG.debug("File processed by " + adapter.getCompiler().getDescription());
          LOG.debug("\tFile processed " + file.getPresentableUrl() + "; ts="+ file.getTimeStamp());
        }
      }
      LocalFileSystem.getInstance().refreshFiles(vFiles);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Files after VFS refresh:");
        for (        VirtualFile file : vFiles) {
          LOG.debug("\t" + file.getPresentableUrl() + "; ts="+ file.getTimeStamp());
        }
      }
      for (      FileProcessingCompiler.ProcessingItem item : processed) {
        cacheUpdater.addFileForUpdate(item,cache);
      }
    }
  }
);
  return true;
}
