{
  final TranslatingCompilerStateCache cache=getTranslatingCompilerCache(compiler);
  final CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myProject);
  context.getProgressIndicator().pushState();
  final boolean[] wereFilesDeleted=new boolean[]{false};
  final Set<VirtualFile> toCompile=new HashSet<VirtualFile>();
  try {
    final Set<String> toDelete=new HashSet<String>();
    final Set<String> urlsWithSourceRemoved=new HashSet<String>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        findOutOfDateFiles(compiler,snapshot,forceCompile,cache,toCompile,context);
        if (trackDependencies && !toCompile.isEmpty()) {
          final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
          final PsiManager psiManager=PsiManager.getInstance(myProject);
          final VirtualFile[] filesToCompile=toCompile.toArray(new VirtualFile[toCompile.size()]);
          Set<String> sourcesWithOutputRemoved=getSourcesWithOutputRemoved(cache);
          for (          final VirtualFile file : filesToCompile) {
            if (fileTypeManager.getFileTypeByFile(file) == StdFileTypes.JAVA) {
              final PsiFile psiFile=psiManager.findFile(file);
              if (psiFile != null) {
                addDependentFiles(psiFile,toCompile,cache,snapshot,sourcesWithOutputRemoved,compiler,context);
              }
            }
          }
        }
        if (!isRebuild) {
          final ProgressIndicator progressIndicator=context.getProgressIndicator();
          progressIndicator.pushState();
          progressIndicator.setText(CompilerBundle.message("progress.searching.for.files.to.delete"));
          findFilesToDelete(snapshot,urlsWithSourceRemoved,cache,toCompile,context,toDelete,compilerConfiguration);
          progressIndicator.popState();
        }
      }
    }
);
    if (onlyCheckStatus) {
      if (toDelete.isEmpty() && toCompile.isEmpty()) {
        return false;
      }
      throw new ExitException(ExitStatus.CANCELLED);
    }
    if (!toDelete.isEmpty()) {
      try {
        wereFilesDeleted[0]=syncOutputDir(urlsWithSourceRemoved,context,toDelete,cache,outputDirectories);
      }
 catch (      CacheCorruptedException e) {
        LOG.info(e);
        context.requestRebuildNextTime(e.getMessage());
      }
    }
    if (wereFilesDeleted[0] && !toDelete.isEmpty()) {
      CompilerUtil.refreshPaths(toDelete.toArray(new String[toDelete.size()]));
    }
    if ((wereFilesDeleted[0] || !toCompile.isEmpty()) && context.getMessageCount(CompilerMessageCategory.ERROR) == 0) {
      final TranslatingCompiler.ExitStatus exitStatus=compiler.compile(context,toCompile.toArray(new VirtualFile[toCompile.size()]));
      updateInternalCaches(cache,context,exitStatus.getSuccessfullyCompiled(),exitStatus.getFilesToRecompile());
    }
  }
  finally {
    if (cache.isDirty()) {
      context.getProgressIndicator().setText(CompilerBundle.message("progress.saving.caches"));
      if (cache.isDirty()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("--Saving translating cache for compiler " + compiler.getDescription());
        }
        cache.save();
        if (LOG.isDebugEnabled()) {
          LOG.debug("--Done");
        }
      }
    }
    context.getProgressIndicator().popState();
  }
  return !toCompile.isEmpty() || wereFilesDeleted[0];
}
