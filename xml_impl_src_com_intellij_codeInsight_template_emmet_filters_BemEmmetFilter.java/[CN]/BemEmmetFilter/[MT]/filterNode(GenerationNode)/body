{
  final List<Pair<String,String>> attribute2Value=node.getTemplateToken().getAttribute2Value();
  Pair<String,String> classNamePair=getClassPair(attribute2Value);
  if (classNamePair != null) {
    Iterable<String> classNames=extractClasses(classNamePair.second);
    final String defaultBlockName=suggestBlockName(classNames);
    node.putUserData(BEM_BLOCK,defaultBlockName);
    final Set<String> newClassNames=ImmutableSet.copyOf(concat(transform(classNames,new Function<String,Iterable<String>>(){
      @Override public Iterable<String> apply(      String className){
        className=fillWithBemElements(className,node);
        className=fillWithBemModifiers(className,node);
        String block=null, element=null, modifier=null;
        List<String> result=newLinkedList();
        if (className.contains(ELEMENT_SEPARATOR)) {
          List<String> blockElements=newLinkedList(ELEMENTS_SPLITTER.split(className));
          block=getFirst(blockElements,"");
          if (blockElements.size() > 1) {
            List<String> elementModifiers=newLinkedList(MODIFIERS_SPLITTER.split(blockElements.get(1)));
            element=getFirst(elementModifiers,"");
            if (elementModifiers.size() > 1) {
              modifier=getLast(elementModifiers,"");
            }
          }
        }
 else         if (className.contains(MODIFIER_SEPARATOR)) {
          Iterable<String> blockModifiers=MODIFIERS_SPLITTER.split(className);
          block=getFirst(blockModifiers,"");
          modifier=getLast(blockModifiers,"");
        }
        if (block != null || element != null || modifier != null) {
          if (isNullOrEmpty(block)) {
            block=nullToEmpty(node.getUserData(BEM_BLOCK));
          }
          String prefix=block;
          if (!isNullOrEmpty(element)) {
            prefix+=ELEMENT_SEPARATOR + element;
          }
          result.add(prefix);
          if (!isNullOrEmpty(modifier)) {
            result.add(prefix + MODIFIER_SEPARATOR + modifier);
          }
          node.putUserData(BEM_BLOCK,block);
          node.putUserData(BEM_ELEMENT,element);
          node.putUserData(BEM_MODIFIER,modifier);
        }
 else {
          result.add(className);
        }
        return result;
      }
    }
)));
    attribute2Value.add(Pair.create("class",CLASS_NAME_JOINER.join(newClassNames)));
  }
  return node;
}
