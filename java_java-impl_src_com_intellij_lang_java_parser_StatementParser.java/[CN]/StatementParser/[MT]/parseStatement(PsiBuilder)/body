{
  final IElementType tokenType=builder.getTokenType();
  if (tokenType == JavaTokenType.IF_KEYWORD) {
    return parseIfStatement(builder);
  }
 else   if (tokenType == JavaTokenType.WHILE_KEYWORD) {
    return parseWhileStatement(builder);
  }
 else   if (tokenType == JavaTokenType.FOR_KEYWORD) {
    return parseForStatement(builder);
  }
 else   if (tokenType == JavaTokenType.DO_KEYWORD) {
    return parseDoWhileStatement(builder);
  }
 else   if (tokenType == JavaTokenType.SWITCH_KEYWORD) {
    return parseSwitchStatement(builder);
  }
 else   if (tokenType == JavaTokenType.CASE_KEYWORD || tokenType == JavaTokenType.DEFAULT_KEYWORD) {
    return parseSwitchLabelStatement(builder);
  }
 else   if (tokenType == JavaTokenType.BREAK_KEYWORD) {
    return parseBreakStatement(builder);
  }
 else   if (tokenType == JavaTokenType.CONTINUE_KEYWORD) {
    return parseContinueStatement(builder);
  }
 else   if (tokenType == JavaTokenType.RETURN_KEYWORD) {
    return parseReturnStatement(builder);
  }
 else   if (tokenType == JavaTokenType.THROW_KEYWORD) {
    return parseThrowStatement(builder);
  }
 else   if (tokenType == JavaTokenType.SYNCHRONIZED_KEYWORD) {
    return parseSynchronizedStatement(builder);
  }
 else   if (tokenType == JavaTokenType.TRY_KEYWORD) {
    return parseTryStatement(builder);
  }
 else   if (tokenType == JavaTokenType.ASSERT_KEYWORD) {
    return parseAssertStatement(builder);
  }
 else   if (tokenType == JavaTokenType.LBRACE) {
    return parseBlockStatement(builder);
  }
 else   if (tokenType instanceof ILazyParseableElementType) {
    builder.advanceLexer();
    return null;
  }
 else   if (tokenType == JavaTokenType.SEMICOLON) {
    final PsiBuilder.Marker empty=builder.mark();
    builder.advanceLexer();
    done(empty,JavaElementType.EMPTY_STATEMENT);
    return empty;
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER || tokenType == JavaTokenType.AT) {
    final PsiBuilder.Marker refPos=builder.mark();
    DeclarationParser.parseAnnotations(builder);
    skipQualifiedName(builder);
    final IElementType suspectedLT=builder.getTokenType();
    refPos.rollbackTo();
    if (suspectedLT == JavaTokenType.LT) {
      final PsiBuilder.Marker declStatement=builder.mark();
      final PsiBuilder.Marker decl=DeclarationParser.parse(builder,DeclarationParser.Context.CODE_BLOCK);
      if (decl == null) {
        ReferenceParser.parseType(builder,false,false);
        error(builder,JavaErrorMessages.message("expected.identifier"));
      }
      done(declStatement,JavaElementType.DECLARATION_STATEMENT);
      return declStatement;
    }
  }
  final PsiBuilder.Marker pos=builder.mark();
  final PsiBuilder.Marker expr=ExpressionParser.parse(builder);
  if (expr != null) {
    int count=1;
    final PsiBuilder.Marker list=expr.precede();
    final PsiBuilder.Marker statement=list.precede();
    while (builder.getTokenType() == JavaTokenType.COMMA) {
      final PsiBuilder.Marker commaPos=builder.mark();
      builder.advanceLexer();
      final PsiBuilder.Marker expr1=ExpressionParser.parse(builder);
      if (expr1 == null) {
        commaPos.rollbackTo();
        break;
      }
      commaPos.drop();
      count++;
    }
    if (count > 1) {
      pos.drop();
      done(list,JavaElementType.EXPRESSION_LIST);
      semicolon(builder);
      done(statement,JavaElementType.EXPRESSION_LIST_STATEMENT);
      return statement;
    }
    if (exprType(expr) != JavaElementType.REFERENCE_EXPRESSION) {
      drop(list,pos);
      semicolon(builder);
      done(statement,JavaElementType.EXPRESSION_STATEMENT);
      return statement;
    }
    pos.rollbackTo();
  }
 else {
    pos.drop();
  }
  final PsiBuilder.Marker decl=DeclarationParser.parse(builder,DeclarationParser.Context.CODE_BLOCK);
  if (decl != null) {
    final PsiBuilder.Marker statement=decl.precede();
    done(statement,JavaElementType.DECLARATION_STATEMENT);
    return statement;
  }
  if (lookAhead(builder,JavaTokenType.IDENTIFIER,JavaTokenType.COLON)) {
    final PsiBuilder.Marker statement=builder.mark();
    advance(builder,2);
    parseStatement(builder);
    done(statement,JavaElementType.LABELED_STATEMENT);
    return statement;
  }
  if (expr != null) {
    final PsiBuilder.Marker statement=builder.mark();
    ExpressionParser.parse(builder);
    semicolon(builder);
    done(statement,JavaElementType.EXPRESSION_STATEMENT);
    return statement;
  }
  return null;
}
