{
  VirtualFile file=myProjectRoot.createChildData(this,"pom.xml");
  VfsUtil.saveText(file,"<project>" + "  <modelVersion>1.2.3</modelVersion>" + "  <groupId>test</groupId>"+ "  <artifactId>project</artifactId>"+ "  <version>1</version>"+ "  <name>foo</name>"+ "  <packaging>pom</packaging>"+ "  <parent>"+ "    <groupId>testParent</groupId>"+ "    <artifactId>projectParent</artifactId>"+ "    <version>2</version>"+ "    <relativePath>../parent/pom.xml</relativePath>"+ "  </parent>"+ "  <build>"+ "    <finalName>xxx</finalName>"+ "    <defaultGoal>someGoal</defaultGoal>"+ "    <sourceDirectory>mySrc</sourceDirectory>"+ "    <testSourceDirectory>myTestSrc</testSourceDirectory>"+ "    <scriptSourceDirectory>myScriptSrc</scriptSourceDirectory>"+ "    <resources>"+ "      <resource>"+ "        <directory>myRes</directory>"+ "        <filtering>true</filtering>"+ "        <targetPath>dir</targetPath>"+ "        <includes><include>**.properties</include></includes>"+ "        <excludes><exclude>**.xml</exclude></excludes>"+ "      </resource>"+ "    </resources>"+ "    <testResources>"+ "      <testResource>"+ "        <directory>myTestRes</directory>"+ "        <includes><include>**.properties</include></includes>"+ "      </testResource>"+ "    </testResources>"+ "    <directory>myOutput</directory>"+ "    <outputDirectory>myClasses</outputDirectory>"+ "    <testOutputDirectory>myTestClasses</testOutputDirectory>"+ "  </build>"+ "</project>");
  org.apache.maven.project.MavenProject p=readProject(file,new MavenProjectReaderProjectLocator(){
    public VirtualFile findProjectFile(    MavenId coordinates){
      return null;
    }
  }
);
  assertEquals("1.2.3",p.getModelVersion());
  assertEquals("pom",p.getPackaging());
  assertEquals("foo",p.getName());
  assertParent(p,"testParent","projectParent","2","../parent/pom.xml");
  Build build=p.getBuild();
  assertNotNull(build);
  assertEquals("xxx",build.getFinalName());
  assertEquals("someGoal",build.getDefaultGoal());
  assertEquals(pathFromBasedir("mySrc"),build.getSourceDirectory());
  assertEquals(pathFromBasedir("myTestSrc"),build.getTestSourceDirectory());
  assertEquals(pathFromBasedir("myScriptSrc"),build.getScriptSourceDirectory());
  assertEquals(1,build.getResources().size());
  assertResource((Resource)build.getResources().get(0),pathFromBasedir("myRes"),true,"dir",Collections.singletonList("**.properties"),Collections.singletonList("**.xml"));
  assertEquals(1,build.getTestResources().size());
  assertResource((Resource)build.getTestResources().get(0),pathFromBasedir("myTestRes"),false,null,Collections.singletonList("**.properties"),Collections.EMPTY_LIST);
  assertEquals(pathFromBasedir("myOutput"),build.getDirectory());
  assertEquals(pathFromBasedir("myClasses"),build.getOutputDirectory());
  assertEquals(pathFromBasedir("myTestClasses"),build.getTestOutputDirectory());
}
