{
  final String className=psiClass.getQualifiedName();
  if (className == null) {
    return false;
  }
  final TestLocationDescriptor current=currentDescriptors.iterator().next();
  boolean candidateMatched;
  boolean currentMatched;
  int i=className.lastIndexOf(".");
  if (i >= 0) {
    String packageAsPath=className.substring(0,i).replace('.','/').toLowerCase();
    candidateMatched=candidate.dir.toLowerCase().contains(packageAsPath);
    currentMatched=current.dir.toLowerCase().contains(packageAsPath);
    if (candidateMatched ^ currentMatched) {
      return candidateMatched;
    }
  }
  String pattern=className.toLowerCase();
  if (pattern.endsWith("test")) {
    pattern=pattern.substring(0,pattern.length() - "Test".length());
  }
  i=pattern.lastIndexOf('.');
  if (i >= 0) {
    pattern=pattern.substring(i + 1);
  }
  candidateMatched=candidate.dir.toLowerCase().contains(pattern);
  currentMatched=current.dir.toLowerCase().contains(pattern);
  if (candidateMatched ^ currentMatched) {
    return candidateMatched;
  }
  return false;
}
