{
  final String className=psiClass.getQualifiedName();
  if (className == null) {
    return false;
  }
  final String candidatePath=candidate.getPath();
  final String candidateDir=PathUtil.getParentPath(candidatePath);
  final String currentDir=PathUtil.getParentPath(current.get(0).getPath());
  boolean candidateMatched;
  boolean currentMatched;
  int i=className.lastIndexOf(".");
  if (i >= 0) {
    String packageAsPath=className.substring(0,i).replace('.','/').toLowerCase();
    candidateMatched=candidateDir.toLowerCase().contains(packageAsPath);
    currentMatched=currentDir.toLowerCase().contains(packageAsPath);
    if (candidateMatched ^ currentMatched) {
      return candidateMatched;
    }
  }
  String pattern=className.toLowerCase();
  if (pattern.endsWith("test")) {
    pattern=pattern.substring(0,pattern.length() - "Test".length());
  }
  i=pattern.lastIndexOf('.');
  if (i >= 0) {
    pattern=pattern.substring(i + 1);
  }
  candidateMatched=candidateDir.toLowerCase().contains(pattern);
  currentMatched=currentDir.toLowerCase().contains(pattern);
  if (candidateMatched ^ currentMatched) {
    return candidateMatched;
  }
  if (PathUtil.getFileName(candidatePath).toLowerCase().startsWith(testName.toLowerCase())) {
    boolean moreRelevant=true;
    for (    VirtualFile file : current) {
      if (PathUtil.getFileName(file.getPath()).toLowerCase().startsWith(testName.toLowerCase())) {
        moreRelevant=false;
        break;
      }
    }
    if (moreRelevant) {
      return true;
    }
  }
  return false;
}
