{
  final PsiClass psiClass=PsiTreeUtil.getChildOfType(file,PsiClass.class);
  if (psiClass == null) {
    return null;
  }
  final Pair<TestDataDescriptor,Long> cached=CACHE.get(psiClass.getQualifiedName());
  if (cached != null && cached.second + CACHE_ENTRY_TTL_MS > System.currentTimeMillis()) {
    return cached.first.isComplete() ? cached.first : null;
  }
  TestFramework[] frameworks=Extensions.getExtensions(TestFramework.EXTENSION_NAME);
  TestFramework framework=null;
  for (  TestFramework each : frameworks) {
    if (each.isTestClass(psiClass)) {
      framework=each;
      break;
    }
  }
  if (framework == null) {
    return null;
  }
  final PsiElement setUpMethod=framework.findSetUpMethod(psiClass);
  final PsiElement tearDownMethod=framework.findTearDownMethod(psiClass);
  List<String> testNames=new ArrayList<String>();
  for (  PsiMethod method : psiClass.getMethods()) {
    final String name=getTestName(method.getName());
    if (StringUtil.isEmpty(name) || method == setUpMethod || method == tearDownMethod || name.equals(psiClass.getName()) || isUtilityMethod(method,psiClass,framework)) {
      continue;
    }
    testNames.add(name);
  }
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(psiClass.getProject()).getFileIndex();
  final TestDataDescriptor descriptor=buildDescriptor(gotoModel,fileIndex,testNames,psiClass);
  CACHE.put(psiClass.getQualifiedName(),new Pair<TestDataDescriptor,Long>(descriptor,System.currentTimeMillis()));
  return descriptor;
}
