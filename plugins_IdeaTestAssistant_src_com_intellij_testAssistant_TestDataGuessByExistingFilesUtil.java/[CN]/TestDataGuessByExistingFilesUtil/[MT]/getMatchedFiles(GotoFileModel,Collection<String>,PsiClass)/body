{
  List<Trinity<NameUtil.Matcher,String,String>> input=new ArrayList<Trinity<NameUtil.Matcher,String,String>>();
  for (  String testName : testNames) {
    String pattern=String.format("*%s*",testName);
    input.add(new Trinity<NameUtil.Matcher,String,String>(NameUtil.buildMatcher(pattern,0,true,true,pattern.toLowerCase().equals(pattern)),testName,pattern));
  }
  String dir=null;
  String testName=null;
  List<VirtualFile> files=new ArrayList<VirtualFile>();
  for (  String name : gotoModel.getNames(false)) {
    boolean currentNameProcessed=false;
    for (    Trinity<NameUtil.Matcher,String,String> trinity : input) {
      if (!trinity.first.matches(name)) {
        continue;
      }
      final Object[] elements=gotoModel.getElementsByName(name,false,trinity.third);
      if (elements == null) {
        continue;
      }
      for (      Object element : elements) {
        if (!(element instanceof PsiFile)) {
          continue;
        }
        final VirtualFile file=((PsiFile)element).getVirtualFile();
        if (file == null) {
          continue;
        }
        final String filePath=PathUtil.getFileName(file.getPath()).toLowerCase();
        int i=filePath.indexOf(trinity.second.toLowerCase());
        if (i < 0 || (i + trinity.second.length() < filePath.length()) && Character.isDigit(filePath.charAt(i + trinity.second.length()))) {
          continue;
        }
        currentNameProcessed=true;
        final String parentPath=PathUtil.getParentPath(file.getPath());
        if (dir == null || dir.equals(parentPath)) {
          dir=parentPath;
          if (testName == null || !testName.equals(trinity.second)) {
            files.clear();
          }
          testName=trinity.second;
          files.add(file);
          continue;
        }
        if (moreRelevantPath(file,files,psiClass,trinity.second)) {
          testName=trinity.second;
          dir=parentPath;
          files.clear();
          files.add(file);
        }
      }
      if (currentNameProcessed) {
        break;
      }
    }
  }
  return (testName == null || files.isEmpty()) ? null : new Pair<String,Collection<VirtualFile>>(testName,files);
}
