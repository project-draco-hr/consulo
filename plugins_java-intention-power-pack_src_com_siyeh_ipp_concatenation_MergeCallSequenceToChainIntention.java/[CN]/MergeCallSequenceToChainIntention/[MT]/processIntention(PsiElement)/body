{
  if (!(element instanceof PsiExpressionStatement)) {
    return;
  }
  final PsiExpressionStatement statement=(PsiExpressionStatement)element;
  final PsiExpressionStatement nextSibling=PsiTreeUtil.getNextSiblingOfType(statement,PsiExpressionStatement.class);
  if (nextSibling == null) {
    return;
  }
  final PsiExpression expression=statement.getExpression();
  final StringBuilder newMethodCallExpression=new StringBuilder(expression.getText());
  final PsiExpression expression1=nextSibling.getExpression();
  if (!(expression1 instanceof PsiMethodCallExpression)) {
    return;
  }
  PsiMethodCallExpression methodCallExpression=getRootMethodCallExpression((PsiMethodCallExpression)expression1);
  while (true) {
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final String methodName=methodExpression.getReferenceName();
    newMethodCallExpression.append('.').append(methodName).append(argumentList.getText());
    final PsiElement parent=methodCallExpression.getParent();
    final PsiElement grandParent=parent.getParent();
    if (!(grandParent instanceof PsiMethodCallExpression)) {
      break;
    }
    methodCallExpression=(PsiMethodCallExpression)grandParent;
  }
  replaceExpression(newMethodCallExpression.toString(),expression);
  nextSibling.delete();
}
