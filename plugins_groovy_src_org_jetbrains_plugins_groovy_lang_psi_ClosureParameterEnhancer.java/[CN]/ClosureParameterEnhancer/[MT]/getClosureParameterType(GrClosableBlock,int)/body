{
  final PsiElement parent=closure.getParent();
  if (!(parent instanceof GrMethodCallExpression)) {
    return null;
  }
  PsiElementFactory factory=JavaPsiFacade.getInstance(closure.getProject()).getElementFactory();
  String methodName=findMethodName((GrMethodCallExpression)parent);
  GrExpression expression=((GrMethodCallExpression)parent).getInvokedExpression();
  if (!(expression instanceof GrReferenceExpression))   return null;
  final PsiElement resolved=((GrReferenceExpression)expression).resolve();
  if (!(resolved instanceof GrGdkMethod))   return null;
  GrExpression qualifier=((GrReferenceExpression)expression).getQualifierExpression();
  if (qualifier == null)   return null;
  PsiType type=qualifier.getType();
  if (type == null) {
    return null;
  }
  final PsiParameter[] params=closure.getAllParameters();
  if (params.length == 1 && simpleTypes.containsKey(methodName)) {
    return factory.createTypeFromText(simpleTypes.get(methodName),closure);
  }
  if (iterations.contains(methodName)) {
    if (params.length == 1) {
      return findTypeForIteration(qualifier,factory,closure);
    }
    if (params.length == 2 && InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      if (index == 0) {
        return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
      }
      return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
    }
  }
 else   if ("with".equals(methodName) && params.length == 1) {
    return type;
  }
 else   if ("eachWithIndex".equals(methodName)) {
    PsiType res=findTypeForIteration(qualifier,factory,closure);
    if (params.length == 2 && res != null) {
      if (index == 0) {
        return res;
      }
      return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,closure);
    }
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      if (params.length == 2) {
        if (index == 0) {
          return getEntryForMap(type,factory,closure);
        }
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,closure);
      }
      if (params.length == 3) {
        if (index == 0) {
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
        }
        if (index == 1) {
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
        }
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,closure);
      }
    }
  }
 else   if ("inject".equals(methodName) && params.length == 2) {
    if (index == 0) {
      return factory.createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT,closure);
    }
    PsiType res=findTypeForIteration(qualifier,factory,closure);
    if (res != null) {
      return res;
    }
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      return getEntryForMap(type,factory,closure);
    }
  }
 else   if ("eachPermutation".equals(methodName) && params.length == 1) {
    final PsiType itemType=findTypeForIteration(qualifier,factory,closure);
    if (itemType != null) {
      return factory.createTypeFromText("java.util.ArrayList<" + itemType.getCanonicalText() + ">",closure);
    }
    return factory.createTypeFromText("java.util.ArrayList",closure);
  }
 else   if ("withDefault".equals(methodName)) {
    if (params.length == 1 && InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
    }
  }
 else   if ("sort".equals(methodName)) {
    if (params.length < 3) {
      return findTypeForIteration(qualifier,factory,closure);
    }
  }
 else   if ("withStream".equals(methodName)) {
    final PsiMethod method=((GrMethodCallExpression)parent).resolveMethod();
    if (method != null) {
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      if (parameters.length > 0) {
        return parameters[0].getType();
      }
    }
  }
 else   if ("withStreams".equals(methodName)) {
    if (index == 0) {
      return factory.createTypeFromText("java.io.InputStream",closure);
    }
 else     if (index == 1)     return factory.createTypeFromText("java.io.OutputStream",closure);
  }
 else   if ("withObjectStreams".equals(methodName)) {
    if (index == 0) {
      return factory.createTypeFromText("java.io.ObjectInputStream",closure);
    }
 else     if (index == 1)     return factory.createTypeFromText("java.io.ObjectOutputStream",closure);
  }
  return null;
}
