{
  PsiElementFactory factory=JavaPsiFacade.getInstance(closure.getProject()).getElementFactory();
  String methodName=findMethodName(methodCall);
  GrExpression expression=methodCall.getInvokedExpression();
  if (!(expression instanceof GrReferenceExpression))   return null;
  GrExpression qualifier=((GrReferenceExpression)expression).getQualifierExpression();
  if (qualifier == null)   return null;
  PsiType type=qualifier.getType();
  if (type == null) {
    return null;
  }
  if ("each".equals(methodName) || "every".equals(methodName) || "collect".equals(methodName)|| "find".equals(methodName)|| "findAll".equals(methodName)|| "findIndexOf".equals(methodName)) {
    PsiType res=findTypeForCollection(qualifier,factory,context);
    if (closure.getParameters().length <= 1 && res != null) {
      return res;
    }
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      if (closure.getParameters().length <= 1) {
        return getEntryForMap(type,factory,context);
      }
      if (closure.getParameters().length == 2) {
        if (index == 0) {
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
        }
        return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
      }
    }
  }
 else   if ("with".equals(methodName) && closure.getParameters().length <= 1) {
    return type;
  }
 else   if ("eachWithIndex".equals(methodName)) {
    PsiType res=findTypeForCollection(qualifier,factory,context);
    if (closure.getParameters().length == 2 && res != null) {
      if (index == 0) {
        return res;
      }
      return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
    }
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      if (paramCount == 2) {
        if (index == 0) {
          return getEntryForMap(type,factory,context);
        }
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
      }
      if (paramCount == 3) {
        if (index == 0) {
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
        }
        if (index == 1) {
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
        }
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
      }
    }
  }
 else   if ("inject".equals(methodName) && paramCount == 2) {
    if (index == 0) {
      return factory.createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT,context);
    }
    PsiType res=findTypeForCollection(qualifier,factory,context);
    if (res != null) {
      return res;
    }
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      return getEntryForMap(type,factory,context);
    }
  }
  return null;
}
