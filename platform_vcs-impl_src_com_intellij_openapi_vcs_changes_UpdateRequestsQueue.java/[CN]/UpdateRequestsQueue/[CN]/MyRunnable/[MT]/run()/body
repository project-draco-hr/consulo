{
  final List<Runnable> copy=new ArrayList<Runnable>(myWaitingUpdateCompletionQueue.size());
  try {
synchronized (myLock) {
      if ((!myStopped) && ((!myStarted) || myPlVcsManager.isBackgroundVcsOperationRunning()) || (!((StartupManagerImpl)myStartupManager).startupActivityPassed()) || myTrackHeavyLatch && HeavyProcessLatch.INSTANCE.isRunning()) {
        LOG.debug("MyRunnable: not started, not stopped, reschedule, project: " + myProject.getName() + ", runnable: "+ hashCode());
        myRequestSubmitted=false;
        schedule();
        return;
      }
      copy.addAll(myWaitingUpdateCompletionQueue);
      myRequestSubmitted=false;
      if (myStopped) {
        LOG.debug("MyRunnable: STOPPED, project: " + myProject.getName() + ", runnable: "+ hashCode());
        return;
      }
    }
    LOG.debug("MyRunnable: INVOKE, project: " + myProject.getName() + ", runnable: "+ hashCode());
    myExecutorWrapper.submit(new Consumer<AtomicSectionsAware>(){
      public void consume(      AtomicSectionsAware atomicSectionsAware){
        myDelegate.execute(atomicSectionsAware);
      }
    }
);
    LOG.debug("MyRunnable: invokeD, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
  finally {
synchronized (myLock) {
      LOG.debug("MyRunnable: delete executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
      if (!copy.isEmpty()) {
        myWaitingUpdateCompletionQueue.removeAll(copy);
      }
      if ((!myWaitingUpdateCompletionQueue.isEmpty()) && (!myRequestSubmitted)) {
        LOG.error("No update task to handle request(s)");
      }
    }
    for (    Runnable runnable : copy) {
      runnable.run();
    }
    LOG.debug("MyRunnable: Runnables executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
}
