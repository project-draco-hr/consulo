{
  final List<Runnable> copy=new ArrayList<Runnable>(myWaitingUpdateCompletionQueue.size());
  try {
synchronized (myLock) {
      if (myStopped) {
        myRequestSubmitted=false;
        LOG.debug("MyRunnable: STOPPED, project: " + myProject.getName() + ", runnable: "+ hashCode());
        return;
      }
      if (checkLifeCycle() || checkHeavyOperations()) {
        LOG.debug("MyRunnable: reschedule, project: " + myProject.getName() + ", runnable: "+ hashCode());
        myRequestSubmitted=false;
        schedule();
        return;
      }
      copy.addAll(myWaitingUpdateCompletionQueue);
      myRequestSubmitted=false;
    }
    LOG.debug("MyRunnable: INVOKE, project: " + myProject.getName() + ", runnable: "+ hashCode());
    if (ChangeListManagerImpl.DEBUG) {
      System.out.println("UpdateRequestsQueue$MyRunnable.run");
    }
    myDelegate.run();
    if (ChangeListManagerImpl.DEBUG) {
      System.out.println(" - end - UpdateRequestsQueue$MyRunnable.run");
    }
    LOG.debug("MyRunnable: invokeD, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
  finally {
synchronized (myLock) {
      LOG.debug("MyRunnable: delete executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
      if (!copy.isEmpty()) {
        myWaitingUpdateCompletionQueue.removeAll(copy);
      }
      if (!myWaitingUpdateCompletionQueue.isEmpty() && !myRequestSubmitted) {
        LOG.error("No update task to handle request(s)");
      }
    }
    for (    Runnable runnable : copy) {
      runnable.run();
    }
    LOG.debug("MyRunnable: Runnables executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
}
