{
  LOG.debug("invokeAfterUpdate for project: " + myProject.getName());
  final CallbackData data=CallbackData.create(myProject,mode,afterUpdate,title,state);
  if (dirtyScopeManagerFiller != null) {
    VcsDirtyScopeManagerProxy managerProxy=new VcsDirtyScopeManagerProxy();
    dirtyScopeManagerFiller.consume(managerProxy);
    if (!myProject.isDisposed()) {
      managerProxy.callRealManager(VcsDirtyScopeManager.getInstance(myProject));
    }
  }
synchronized (myLock) {
    if (!myStopped) {
      myWaitingUpdateCompletionQueue.add(data.getCallback());
      schedule();
    }
  }
  if (myStopped) {
    LOG.debug("invokeAfterUpdate: stopped, invoke right now for project: " + myProject.getName());
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        if (!myProject.isDisposed()) {
          afterUpdate.run();
        }
      }
    }
);
    return;
  }
  data.getWrapperStarter().run();
  LOG.debug("invokeAfterUpdate: exit for project: " + myProject.getName());
}
