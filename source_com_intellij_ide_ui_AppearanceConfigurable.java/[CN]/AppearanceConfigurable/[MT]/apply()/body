{
  UISettings settings=UISettings.getInstance();
  String temp=(String)myComponent.myFontSizeCombo.getEditor().getItem();
  int _fontSize=-1;
  if (temp != null && temp.trim().length() > 0) {
    try {
      _fontSize=new Integer(temp).intValue();
    }
 catch (    NumberFormatException ex) {
    }
    if (_fontSize <= 0) {
      _fontSize=settings.FONT_SIZE;
    }
  }
 else {
    _fontSize=settings.FONT_SIZE;
  }
  boolean shouldUpdateUI=false;
  String _fontFace=(String)myComponent.myFontCombo.getSelectedItem();
  LafManager lafManager=LafManager.getInstance();
  if (_fontSize != settings.FONT_SIZE || !settings.FONT_FACE.equals(_fontFace)) {
    settings.FONT_SIZE=_fontSize;
    settings.FONT_FACE=_fontFace;
    shouldUpdateUI=true;
  }
  settings.ANIMATE_WINDOWS=myComponent.myAnimateWindowsCheckBox.isSelected();
  boolean update=settings.SHOW_WINDOW_SHORTCUTS != myComponent.myWindowShortcutsCheckBox.isSelected();
  settings.SHOW_WINDOW_SHORTCUTS=myComponent.myWindowShortcutsCheckBox.isSelected();
  update|=settings.HIDE_TOOL_STRIPES != (!myComponent.myShowToolStripesCheckBox.isSelected());
  settings.HIDE_TOOL_STRIPES=!myComponent.myShowToolStripesCheckBox.isSelected();
  update|=settings.ALWAYS_SHOW_WINDOW_BUTTONS != myComponent.myAlwaysShowWindowButtonsCheckBox.isSelected();
  settings.ALWAYS_SHOW_WINDOW_BUTTONS=myComponent.myAlwaysShowWindowButtonsCheckBox.isSelected();
  update|=settings.SHOW_MEMORY_INDICATOR != myComponent.myShowMemoryIndicatorCheckBox.isSelected();
  settings.SHOW_MEMORY_INDICATOR=myComponent.myShowMemoryIndicatorCheckBox.isSelected();
  update|=settings.CYCLE_SCROLLING != myComponent.myCycleScrollingCheckBox.isSelected();
  settings.CYCLE_SCROLLING=myComponent.myCycleScrollingCheckBox.isSelected();
  if (settings.OVERRIDE_NONIDEA_LAF_FONTS != myComponent.myOverrideLAFFonts.isSelected()) {
    shouldUpdateUI=true;
  }
  settings.OVERRIDE_NONIDEA_LAF_FONTS=myComponent.myOverrideLAFFonts.isSelected();
  update|=settings.SCROLL_TAB_LAYOUT_IN_EDITOR != myComponent.myScrollTabLayoutInEditorCheckBox.isSelected();
  settings.SCROLL_TAB_LAYOUT_IN_EDITOR=myComponent.myScrollTabLayoutInEditorCheckBox.isSelected();
  final int tabPlacement=((Integer)myComponent.myEditorTabPlacement.getSelectedItem()).intValue();
  update|=tabPlacement != settings.EDITOR_TAB_PLACEMENT;
  settings.EDITOR_TAB_PLACEMENT=tabPlacement;
  settings.MOVE_MOUSE_ON_DEFAULT_BUTTON=myComponent.myMoveMouseOnDefaultButtonCheckBox.isSelected();
  boolean hide=myComponent.myHideKnownExtensions.isSelected();
  update|=hide != settings.HIDE_KNOWN_EXTENSION_IN_TABS;
  settings.HIDE_KNOWN_EXTENSION_IN_TABS=hide;
  boolean shouldRepaintUI=false;
  if (settings.ANTIALIASING_IN_EDITOR != myComponent.myAntialiasingInEditorCheckBox.isSelected()) {
    settings.ANTIALIASING_IN_EDITOR=myComponent.myAntialiasingInEditorCheckBox.isSelected();
    update=shouldRepaintUI=true;
  }
  if (!myComponent.myLafComboBox.getSelectedItem().equals(lafManager.getCurrentLookAndFeel())) {
    update=shouldUpdateUI=true;
    lafManager.setCurrentLookAndFeel((UIManager.LookAndFeelInfo)myComponent.myLafComboBox.getSelectedItem());
  }
  if (shouldUpdateUI) {
    lafManager.updateUI();
  }
  if (shouldRepaintUI) {
    lafManager.repaintUI();
  }
  if (WindowManagerEx.getInstanceEx().isAlphaModeSupported()) {
    int delay=-1;
    try {
      delay=Integer.parseInt(myComponent.myAlphaModeDelayTextField.getText());
    }
 catch (    NumberFormatException ignored) {
    }
    float ratio=myComponent.myAlphaModeRatioSlider.getValue() / 100f;
    if (myComponent.myEnableAlphaModeCheckBox.isSelected() != settings.ENABLE_ALPHA_MODE || delay != -1 && delay != settings.ALPHA_MODE_DELAY || ratio != settings.ALPHA_MODE_RATIO) {
      update=true;
      settings.ENABLE_ALPHA_MODE=myComponent.myEnableAlphaModeCheckBox.isSelected();
      settings.ALPHA_MODE_DELAY=delay;
      settings.ALPHA_MODE_RATIO=ratio;
    }
  }
  if (update) {
    settings.fireUISettingsChanged();
  }
  myComponent.updateCombo();
}
