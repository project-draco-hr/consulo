{
  final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
  if (node.getUserObject() instanceof ComponentPtrDescriptor) {
    final ComponentPtrDescriptor descriptor=(ComponentPtrDescriptor)node.getUserObject();
    final ComponentPtr ptr=(ComponentPtr)descriptor.getElement();
    LOG.assertTrue(ptr != null);
    final RadComponent component=ptr.getComponent();
    LOG.assertTrue(component != null);
    final boolean error=ErrorAnalyzer.getErrorForComponent(component) != null;
    final String binding=component.getBinding();
    if (binding != null) {
      append(binding,getAttribute(myBindingAttributes,error));
      append(" ",getAttribute(myClassAttributes,error));
    }
    final Class componentClass=component.getComponentClass();
    final String componentClassName=componentClass.getName();
    if (component instanceof RadVSpacer) {
      append(UIDesignerBundle.message("component.vertical.spacer"),getAttribute(myClassAttributes,error));
    }
 else     if (component instanceof RadHSpacer) {
      append(UIDesignerBundle.message("component.horizontal.spacer"),getAttribute(myClassAttributes,error));
    }
 else     if (component instanceof RadErrorComponent) {
      final RadErrorComponent c=(RadErrorComponent)component;
      append(c.getErrorDescription(),getAttribute(myUnknownAttributes,error));
    }
 else     if (component instanceof RadRootContainer) {
      append(UIDesignerBundle.message("component.form"),getAttribute(myClassAttributes,error));
      append("(",getAttribute(myPackageAttributes,error));
      final String classToBind=((RadRootContainer)component).getClassToBind();
      if (classToBind != null) {
        append(classToBind,getAttribute(myPackageAttributes,error));
      }
 else {
        append(UIDesignerBundle.message("component.no.binding"),getAttribute(myPackageAttributes,error));
      }
      append(")",getAttribute(myPackageAttributes,error));
    }
 else {
      final Package aPackage=componentClass.getPackage();
      String packageName=null;
      if (aPackage != null) {
        packageName=aPackage.getName();
      }
      if (packageName != null) {
        append(componentClassName.substring(packageName.length() + 1),getAttribute(myClassAttributes,error));
        append(" (",getAttribute(myPackageAttributes,error));
        append(packageName,getAttribute(myPackageAttributes,error));
        append(")",getAttribute(myPackageAttributes,error));
      }
 else {
        append(componentClassName,getAttribute(myClassAttributes,error));
      }
    }
    if (!(component instanceof RadErrorComponent)) {
      final ComponentItem item=Palette.getInstance(myEditor.getProject()).getItem(componentClassName);
      final Icon icon;
      if (item != null) {
        icon=item.getSmallIcon();
      }
 else {
        icon=IconLoader.getIcon("/com/intellij/uiDesigner/icons/unknown-small.png");
      }
      setIcon(icon);
    }
 else {
      setIcon(IconLoader.getIcon("/com/intellij/uiDesigner/icons/error-small.png"));
    }
    if (component == myDropTargetComponent) {
      setBorder(BorderFactory.createLineBorder(Color.BLUE,2));
    }
  }
}
