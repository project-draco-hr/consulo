{
  final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
  if (node.getUserObject() instanceof ComponentPtrDescriptor) {
    final ComponentPtrDescriptor descriptor=(ComponentPtrDescriptor)node.getUserObject();
    final ComponentPtr ptr=(ComponentPtr)descriptor.getElement();
    LOG.assertTrue(ptr != null);
    final RadComponent component=ptr.getComponent();
    LOG.assertTrue(component != null);
    final boolean error=ErrorAnalyzer.getErrorForComponent(component) != null;
    boolean hasText=false;
    final String binding=component.getBinding();
    if (binding != null) {
      append(binding,getAttribute(myBindingAttributes,error));
      append(" : ",getAttribute(myClassAttributes,error));
      hasText=true;
    }
 else {
      String componentTitle=getComponentTitle(component);
      if (componentTitle != null) {
        append(componentTitle,getAttribute(myTitleAttributes,error));
        append(" : ",getAttribute(myClassAttributes,error));
        hasText=true;
      }
    }
    final String componentClassName=component.getComponentClassName();
    if (component instanceof RadVSpacer) {
      append(UIDesignerBundle.message("component.vertical.spacer"),getAttribute(myClassAttributes,error));
    }
 else     if (component instanceof RadHSpacer) {
      append(UIDesignerBundle.message("component.horizontal.spacer"),getAttribute(myClassAttributes,error));
    }
 else     if (component instanceof RadErrorComponent) {
      final RadErrorComponent c=(RadErrorComponent)component;
      append(c.getErrorDescription(),getAttribute(myUnknownAttributes,error));
    }
 else     if (component instanceof RadRootContainer) {
      append(UIDesignerBundle.message("component.form"),getAttribute(myClassAttributes,error));
      append("(",getAttribute(myPackageAttributes,error));
      final String classToBind=((RadRootContainer)component).getClassToBind();
      if (classToBind != null) {
        append(classToBind,getAttribute(myPackageAttributes,error));
      }
 else {
        append(UIDesignerBundle.message("component.no.binding"),getAttribute(myPackageAttributes,error));
      }
      append(")",getAttribute(myPackageAttributes,error));
    }
 else {
      String packageName=null;
      int pos=componentClassName.lastIndexOf('.');
      if (pos >= 0) {
        packageName=componentClassName.substring(0,pos);
      }
      SimpleTextAttributes classAttributes=hasText ? myPackageAttributes : myClassAttributes;
      if (packageName != null) {
        append(componentClassName.substring(packageName.length() + 1).replace('$','.'),getAttribute(classAttributes,error));
        if (!packageName.equals(SWING_PACKAGE)) {
          append(" (",getAttribute(myPackageAttributes,error));
          append(packageName,getAttribute(myPackageAttributes,error));
          append(")",getAttribute(myPackageAttributes,error));
        }
      }
 else {
        append(componentClassName.replace('$','.'),getAttribute(classAttributes,error));
      }
    }
    setIcon(getComponentIcon(component));
    if (component == myDropTargetComponent) {
      setBorder(BorderFactory.createLineBorder(Color.BLUE,2));
    }
  }
}
