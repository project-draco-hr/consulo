{
  final DraggedComponentList dcl=DraggedComponentList.fromTransferable(dtde.getTransferable());
  ComponentItem componentItem=SimpleTransferable.getData(dtde.getTransferable(),ComponentItem.class);
  if (dcl != null || componentItem != null) {
    final TreePath path=getPathForLocation((int)dtde.getLocation().getX(),(int)dtde.getLocation().getY());
    final RadComponent targetComponent=getComponentFromPath(path);
    if (targetComponent instanceof RadContainer) {
      final com.intellij.uiDesigner.designSurface.DropLocation dropLocation=((RadContainer)targetComponent).getDropLocation(null);
      if (dcl != null) {
        if (!FormEditingUtil.isDropOnChild(dcl,dropLocation)) {
          RadComponent[] components=dcl.getComponents().toArray(new RadComponent[dcl.getComponents().size()]);
          dropLocation.processDrop(myEditor,components,null,dcl);
        }
      }
 else {
        new InsertComponentProcessor(myEditor).processComponentInsert(componentItem,dropLocation);
      }
    }
  }
  setDropTargetComponent(null);
}
