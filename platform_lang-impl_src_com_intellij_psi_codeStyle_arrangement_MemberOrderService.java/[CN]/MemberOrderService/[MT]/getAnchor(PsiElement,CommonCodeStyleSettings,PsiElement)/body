{
  Language language=context.getLanguage();
  Rearranger<?> rearranger=Rearranger.EXTENSION.forLanguage(language);
  if (rearranger == null) {
    return null;
  }
  ArrangementSettings arrangementSettings=settings.getArrangementSettings();
  if (arrangementSettings == null && rearranger instanceof ArrangementStandardSettingsAware) {
    arrangementSettings=((ArrangementStandardSettingsAware)rearranger).getDefaultSettings();
  }
  if (arrangementSettings == null) {
    return null;
  }
  Pair<? extends ArrangementEntry,? extends List<? extends ArrangementEntry>> pair=rearranger.parseWithNew(context,null,Collections.singleton(context.getTextRange()),member,arrangementSettings);
  if (pair == null || pair.second.isEmpty()) {
    return null;
  }
  ArrangementEntry memberEntry=pair.first;
  List<? extends ArrangementEntry> entries=pair.second;
  ArrangementEntry parentEntry=entries.get(0);
  List<? extends ArrangementEntry> nonArranged=parentEntry.getChildren();
  List<ArrangementEntry> entriesWithNew=new ArrayList<ArrangementEntry>(nonArranged);
  entriesWithNew.add(memberEntry);
  List<ArrangementEntry> arranged=ArrangementEngine.arrange(entriesWithNew,arrangementSettings.getRules());
  int i=arranged.indexOf(memberEntry);
  if (i <= 0) {
    return context;
  }
  ArrangementEntry anchorEntry=null;
  if (i >= arranged.size() - 1) {
    anchorEntry=nonArranged.get(nonArranged.size() - 1);
  }
 else {
    Set<ArrangementEntry> entriesBelow=new HashSet<ArrangementEntry>();
    entriesBelow.addAll(arranged.subList(i + 1,arranged.size()));
    for (    ArrangementEntry entry : nonArranged) {
      if (entriesBelow.contains(entry)) {
        break;
      }
      anchorEntry=entry;
    }
  }
  if (anchorEntry == null) {
    return context;
  }
  int offset=anchorEntry.getEndOffset() - 1 - context.getTextRange().getStartOffset();
  PsiElement element=context.findElementAt(offset);
  for (PsiElement e=element; e != null && e.getTextRange().getStartOffset() >= anchorEntry.getStartOffset(); e=e.getParent()) {
    element=e;
  }
  return element;
}
