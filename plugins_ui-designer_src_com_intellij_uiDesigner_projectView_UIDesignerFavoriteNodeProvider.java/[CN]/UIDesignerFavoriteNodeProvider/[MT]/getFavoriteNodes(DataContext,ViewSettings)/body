{
  Project project=CommonDataKeys.PROJECT.getData(context);
  if (project == null)   return null;
  Form[] forms=Form.DATA_KEY.getData(context);
  if (forms != null) {
    Collection<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
    Set<PsiClass> bindClasses=new HashSet<PsiClass>();
    for (    Form form : forms) {
      final PsiClass classToBind=form.getClassToBind();
      if (classToBind != null) {
        if (bindClasses.contains(classToBind))         continue;
        bindClasses.add(classToBind);
        result.add(FormNode.constructFormNode(classToBind,project,viewSettings));
      }
    }
    if (!result.isEmpty()) {
      return result;
    }
  }
  VirtualFile vFile=PlatformDataKeys.VIRTUAL_FILE.getData(context);
  if (vFile != null) {
    final FileType fileType=vFile.getFileType();
    if (fileType.equals(StdFileTypes.GUI_DESIGNER_FORM)) {
      final PsiFile formFile=PsiManager.getInstance(project).findFile(vFile);
      if (formFile == null)       return null;
      String text=formFile.getText();
      String className;
      try {
        className=Utils.getBoundClassName(text);
      }
 catch (      Exception e) {
        return null;
      }
      if (className == null)       return null;
      final PsiClass classToBind=JavaPsiFacade.getInstance(project).findClass(className,GlobalSearchScope.allScope(project));
      if (classToBind != null) {
        Form form=new Form(classToBind);
        final AbstractTreeNode node=new FormNode(project,form,viewSettings);
        return Collections.singletonList(node);
      }
    }
  }
  return null;
}
