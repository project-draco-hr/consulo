{
  LOG.debug("enter rearrangeDocument");
  new CommentUtil(settings);
  final Parser p=new Parser(project,settings,psiFile);
  final List<ClassContentsEntry> outerClasses=p.parseOuterLevel();
  if (outerClasses.size() > 0) {
    final Mover m=new Mover(outerClasses,settings);
    final List<RuleInstance> resultRuleInstances=m.rearrangeOuterClasses();
    boolean rearrange=true;
    if (settings.isAskBeforeRearranging()) {
      FileStructurePopup fsp=new FileStructurePopup(settings,resultRuleInstances,psiFile);
      rearrange=fsp.displayRearrangement();
    }
    if (rearrange) {
      final Emitter e=new Emitter(psiFile,resultRuleInstances,document);
      e.emitRearrangedDocument();
    }
  }
  LOG.debug("respacing document");
  PsiDocumentManager.getInstance(project).commitDocument(document);
  Spacer spacer=new Spacer(project,psiFile,document,settings);
  if (spacer.respace()) {
    PsiDocumentManager.getInstance(project).commitDocument(document);
  }
  LOG.debug("exit rearrangeDocument");
}
