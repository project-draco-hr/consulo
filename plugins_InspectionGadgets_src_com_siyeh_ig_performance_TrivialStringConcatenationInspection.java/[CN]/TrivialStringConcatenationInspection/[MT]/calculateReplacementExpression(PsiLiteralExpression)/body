{
  final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(expression);
  if (!(parent instanceof PsiPolyadicExpression)) {
    return null;
  }
  if (parent instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
    final PsiExpression lOperand=ParenthesesUtils.stripParentheses(binaryExpression.getLOperand());
    final PsiExpression rOperand=ParenthesesUtils.stripParentheses(binaryExpression.getROperand());
    final PsiExpression replacement;
    if (ExpressionUtils.isEmptyStringLiteral(lOperand)) {
      replacement=rOperand;
    }
 else {
      replacement=lOperand;
    }
    return replacement == null ? "" : buildReplacement(replacement,false);
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiExpression[] operands=polyadicExpression.getOperands();
  final PsiClassType stringType=TypeUtils.getStringType(expression);
  boolean seenString=false;
  boolean seenEmpty=false;
  boolean replaced=false;
  PsiExpression operandToReplace=null;
  final StringBuilder text=new StringBuilder();
  for (  PsiExpression operand : operands) {
    if (operandToReplace != null && !replaced) {
      if (TypeUtils.expressionHasType(operand,CommonClassNames.JAVA_LANG_STRING)) {
        seenString=true;
      }
      if (text.length() > 0) {
        text.append(" + ");
      }
      text.append(buildReplacement(operandToReplace,seenString));
      text.append(" + ");
      text.append(operand.getText());
      replaced=true;
      continue;
    }
    if (operand == expression) {
      seenEmpty=true;
      continue;
    }
    if (seenEmpty && !replaced) {
      operandToReplace=operand;
      continue;
    }
    if (stringType.equals(operand.getType())) {
      seenString=true;
    }
    if (text.length() > 0) {
      text.append(" + ");
    }
    text.append(operand.getText());
  }
  if (!replaced && operandToReplace != null) {
    text.append(" + ");
    text.append(buildReplacement(operandToReplace,seenString));
  }
  return text.toString();
}
