{
  final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(expression);
  if (!(parent instanceof PsiBinaryExpression)) {
    if (parent instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
      final PsiExpression[] operands=polyadicExpression.getOperands();
      final PsiClassType stringType=PsiType.getJavaLangString(expression.getManager(),expression.getResolveScope());
      boolean seenString=false;
      boolean seenEmpty=false;
      final StringBuilder text=new StringBuilder();
      for (      PsiExpression operand : operands) {
        operand=ParenthesesUtils.stripParentheses(operand);
        if (operand == null) {
          return null;
        }
        if (operand == expression) {
          seenEmpty=true;
          continue;
        }
        if (stringType.equals(operand.getType())) {
          seenString=true;
        }
        if (text.length() > 0) {
          text.append('+');
        }
        if (!seenString && seenEmpty) {
          text.append(buildReplacement(operand,seenString));
          seenString=true;
        }
 else {
          text.append(operand.getText());
        }
      }
      return text.toString();
    }
    return null;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
  final PsiExpression lOperand=ParenthesesUtils.stripParentheses(binaryExpression.getLOperand());
  final PsiExpression rOperand=ParenthesesUtils.stripParentheses(binaryExpression.getROperand());
  final PsiExpression replacement;
  if (ExpressionUtils.isEmptyStringLiteral(lOperand)) {
    replacement=rOperand;
  }
 else {
    replacement=lOperand;
  }
  return buildReplacement(replacement,false);
}
