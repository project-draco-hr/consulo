{
  final Project project=getContext().getProject();
  final ArrayList<VirtualFile> libraryRoots=new ArrayList<VirtualFile>();
  if (scope.getScopeType() == AnalysisScope.PROJECT) {
    ContainerUtil.addAll(libraryRoots,LibraryUtil.getLibraryRoots(project,false,false));
  }
 else {
    final Set<Module> modules=new HashSet<Module>();
    scope.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitFile(      PsiFile file){
        if (!(file instanceof PsiCompiledElement)) {
          final VirtualFile virtualFile=file.getVirtualFile();
          if (virtualFile != null) {
            final Module module=ModuleUtil.findModuleForFile(virtualFile,project);
            if (module != null) {
              modules.add(module);
            }
          }
        }
      }
    }
);
    ContainerUtil.addAll(libraryRoots,LibraryUtil.getLibraryRoots(modules.toArray(new Module[modules.size()]),false,false));
  }
  GlobalSearchScope searchScope;
  try {
    @NonNls final String libsName="libs";
    searchScope=GlobalSearchScope.filterScope(project,new NamedScope(libsName,PackageSetFactory.getInstance().compile("lib:*..*")));
  }
 catch (  ParsingException e) {
    LOG.error(e);
    return;
  }
  final AnalysisScope analysisScope=new AnalysisScope(searchScope,project);
  analysisScope.setSearchInLibraries(true);
  final BackwardDependenciesBuilder builder=new BackwardDependenciesBuilder(project,analysisScope);
  final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  BACKWARD_ANALYSIS.setTotalAmount(builder.getTotalFileCount());
  ((ProgressManagerImpl)ProgressManager.getInstance()).executeProcessUnderProgress(new Runnable(){
    public void run(){
      builder.analyze();
    }
  }
,new ProgressIndicatorBase(){
    public void setFraction(    final double fraction){
      super.setFraction(fraction);
      BACKWARD_ANALYSIS.setDoneAmount(((int)fraction * BACKWARD_ANALYSIS.getTotalAmount()));
      getContext().incrementJobDoneAmount(BACKWARD_ANALYSIS,getText2());
    }
    public boolean isCanceled(){
      return progressIndicator != null && progressIndicator.isCanceled() || super.isCanceled();
    }
  }
);
  final Map<PsiFile,Set<PsiFile>> dependencies=builder.getDependencies();
  for (  PsiFile file : dependencies.keySet()) {
    final VirtualFile virtualFile=file.getVirtualFile();
    LOG.assertTrue(virtualFile != null);
    for (Iterator<VirtualFile> i=libraryRoots.iterator(); i.hasNext(); ) {
      if (VfsUtil.isAncestor(i.next(),virtualFile,false)) {
        i.remove();
      }
    }
  }
  if (libraryRoots.size() > 0) {
    ProjectFileIndex projectIndex=ProjectRootManager.getInstance(project).getFileIndex();
    Map<OrderEntry,Set<VirtualFile>> unusedLibs=new HashMap<OrderEntry,Set<VirtualFile>>();
    for (    VirtualFile libraryRoot : libraryRoots) {
      final List<OrderEntry> orderEntries=projectIndex.getOrderEntriesForFile(libraryRoot);
      for (      OrderEntry orderEntry : orderEntries) {
        Set<VirtualFile> files=unusedLibs.get(orderEntry);
        if (files == null) {
          files=new HashSet<VirtualFile>();
          unusedLibs.put(orderEntry,files);
        }
        files.add(libraryRoot);
      }
    }
    final RefManager refManager=getRefManager();
    for (    OrderEntry orderEntry : unusedLibs.keySet()) {
      if (orderEntry instanceof LibraryOrderEntry) {
        final RefModule refModule=refManager.getRefModule(orderEntry.getOwnerModule());
        final Set<VirtualFile> files=unusedLibs.get(orderEntry);
        final VirtualFile[] roots=((LibraryOrderEntry)orderEntry).getRootFiles(OrderRootType.CLASSES);
        if (files.size() < roots.length) {
          final String unusedLibraryRoots=StringUtil.join(files,new Function<VirtualFile,String>(){
            public String fun(            final VirtualFile file){
              return file.getPresentableName();
            }
          }
,",");
          addProblemElement(refModule,manager.createProblemDescriptor(InspectionsBundle.message("unused.library.roots.problem.descriptor",unusedLibraryRoots,orderEntry.getPresentableName()),new RemoveUnusedLibrary(refModule,orderEntry,files)));
        }
 else {
          addProblemElement(refModule,manager.createProblemDescriptor(InspectionsBundle.message("unused.library.problem.descriptor",orderEntry.getPresentableName()),new RemoveUnusedLibrary(refModule,orderEntry,null)));
        }
      }
    }
  }
}
