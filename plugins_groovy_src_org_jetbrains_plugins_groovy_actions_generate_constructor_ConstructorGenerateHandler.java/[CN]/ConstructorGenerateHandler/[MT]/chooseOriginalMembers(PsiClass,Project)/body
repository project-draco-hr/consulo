{
  final ClassMember[] classMembers=super.chooseOriginalMembers(aClass,project);
  if (classMembers == null)   return null;
  List<ClassMember> res=new ArrayList<ClassMember>();
  final PsiElementFactory factory=aClass.getManager().getElementFactory();
  String text;
  for (  ClassMember classMember : classMembers) {
    if (classMember instanceof PsiMethodMember) {
      PsiMethod constructorImpl;
      final PsiMethod method=((PsiMethodMember)classMember).getElement();
      text=method.getText();
      try {
        constructorImpl=factory.createMethodFromText(text,aClass);
        res.add(new PsiMethodMember(constructorImpl));
      }
 catch (      IncorrectOperationException e) {
        e.printStackTrace();
      }
    }
 else     if (classMember instanceof PsiFieldMember) {
      final PsiFieldMember fieldMember=(PsiFieldMember)classMember;
      PsiField fieldImpl;
      final PsiField field=fieldMember.getElement();
      try {
        fieldImpl=factory.createFieldFromText(field.getType().getCanonicalText() + " " + field.getName(),aClass);
        res.add(new PsiFieldMember(fieldImpl));
      }
 catch (      IncorrectOperationException e) {
        e.printStackTrace();
      }
    }
  }
  return res.toArray(new ClassMember[res.size()]);
}
