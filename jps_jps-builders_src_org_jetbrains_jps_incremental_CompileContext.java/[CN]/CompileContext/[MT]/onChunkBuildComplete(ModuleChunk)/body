{
  final boolean compilingTests=isCompilingTests();
  myProjectDescriptor.fsState.clearContextRoundData();
  myProjectDescriptor.fsState.clearContextChunk();
  final BuildDataManager dataManager=getDataManager();
  try {
    if (!myErrorsFound && !myCancelStatus.isCanceled()) {
      final DirtyMarkScope dirtyScope=compilingTests ? DirtyMarkScope.TESTS : DirtyMarkScope.PRODUCTION;
      boolean marked=false;
      for (      Module module : chunk.getModules()) {
        if (isMake()) {
          myNonIncrementalModules.remove(new Pair<Module,DirtyMarkScope>(module,dirtyScope));
        }
        if (isProjectRebuild()) {
          myProjectDescriptor.fsState.markInitialScanPerformed(module.getName(),compilingTests);
        }
        final List<RootDescriptor> roots=myProjectDescriptor.rootsIndex.getModuleRoots(module);
        for (        RootDescriptor descriptor : roots) {
          if (compilingTests ? descriptor.isTestRoot : !descriptor.isTestRoot) {
            marked|=myProjectDescriptor.fsState.markAllUpToDate(getScope(),descriptor,myTimestamps,myCompilationStartStamp);
          }
        }
      }
      if (marked) {
        processMessage(UptoDateFilesSavedEvent.INSTANCE);
      }
    }
  }
  finally {
    dataManager.closeSourceToOutputStorages(chunk,compilingTests);
    dataManager.flush(true);
  }
}
