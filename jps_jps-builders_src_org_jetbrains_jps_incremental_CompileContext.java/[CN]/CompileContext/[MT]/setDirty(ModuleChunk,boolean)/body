{
  final Set<Module> modules=chunk.getModules();
  if (!isDirty) {
    myDirtyModules.removeAll(modules);
    return;
  }
  myDirtyModules.addAll(modules);
  final ClasspathKind classpathKind=ClasspathKind.compile(isCompilingTests());
  final ProjectChunks chunks=isCompilingTests() ? myTestChunks : myProductionChunks;
  boolean found=false;
  for (  ModuleChunk moduleChunk : chunks.getChunkList()) {
    if (!found) {
      if (moduleChunk.equals(chunk)) {
        found=true;
      }
    }
 else {
      MODULES_LOOP:       for (      final Module module : moduleChunk.getModules()) {
        for (        ClasspathItem dependency : module.getClasspath(classpathKind)) {
          if (dependency instanceof Module && isDirty((Module)dependency)) {
            myDirtyModules.addAll(moduleChunk.getModules());
            break MODULES_LOOP;
          }
        }
      }
    }
  }
}
