{
  final Set<Module> modules=chunk.getModules();
  final Set<Module> dirtyModules=new HashSet<Module>(modules);
  final ClasspathKind classpathKind=ClasspathKind.compile(isCompilingTests());
  final ProjectChunks chunks=isCompilingTests() ? myTestChunks : myProductionChunks;
  boolean found=false;
  for (  ModuleChunk moduleChunk : chunks.getChunkList()) {
    if (!found) {
      if (moduleChunk.equals(chunk)) {
        found=true;
      }
    }
 else {
      for (      final Module module : moduleChunk.getModules()) {
        final Set<Module> deps=getDependentModulesRecursively(module,classpathKind);
        if (Utils.intersects(deps,modules)) {
          dirtyModules.addAll(moduleChunk.getModules());
          break;
        }
      }
    }
  }
  for (  Module module : dirtyModules) {
    markDirtyFiles(module,myTsStorage,true,isCompilingTests() ? DirtyMarkScope.TESTS : DirtyMarkScope.BOTH,null);
  }
  if (isMake()) {
    for (    Module module : modules) {
      if (!isCompilingTests()) {
        myNonIncrementalModules.add(new Pair<Module,DirtyMarkScope>(module,DirtyMarkScope.PRODUCTION));
      }
      myNonIncrementalModules.add(new Pair<Module,DirtyMarkScope>(module,DirtyMarkScope.TESTS));
    }
  }
}
