{
  boolean forceMarkDirty=false;
  final File currentOutput=getProjectPaths().getModuleOutputDir(module,isCompilingTests());
  if (currentOutput != null) {
    Pair<String,String> outputsPair=getDataManager().getOutputRootsLayout().getState(module.getName());
    if (outputsPair != null) {
      final String previousPath=isCompilingTests() ? outputsPair.second : outputsPair.first;
      forceMarkDirty=StringUtil.isEmpty(previousPath) || !FileUtil.filesEqual(currentOutput,new File(previousPath));
    }
 else {
      forceMarkDirty=true;
    }
  }
  final HashSet<File> currentFiles=new HashSet<File>();
  markDirtyFiles(module,myTimestamps,forceMarkDirty,isCompilingTests() ? DirtyMarkScope.TESTS : DirtyMarkScope.PRODUCTION,currentFiles);
  myProjectDescriptor.fsState.clearDeletedPaths(module.getName(),isCompilingTests());
  final SourceToOutputMapping sourceToOutputMap=getDataManager().getSourceToOutputMap(module.getName(),isCompilingTests());
  for (final Iterator<String> it=sourceToOutputMap.getKeysIterator(); it.hasNext(); ) {
    final String path=it.next();
    final File file=new File(path);
    if (!currentFiles.contains(file)) {
      myProjectDescriptor.fsState.registerDeleted(module.getName(),file,isCompilingTests(),myTimestamps);
    }
  }
}
