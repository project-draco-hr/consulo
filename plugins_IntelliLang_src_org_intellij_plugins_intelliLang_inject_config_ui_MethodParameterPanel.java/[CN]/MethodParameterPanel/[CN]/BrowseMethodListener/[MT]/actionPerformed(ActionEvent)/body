{
  final PsiType type=getClassType();
  final PsiClass psiClass=findClass(type);
  if (psiClass != null) {
    final PsiMethod[] psiMethods=psiClass.getMethods();
    final java.util.List<PsiMethod> methods=ContainerUtil.findAll(psiMethods,new Condition<PsiMethod>(){
      public boolean value(      PsiMethod method){
        final PsiModifierList modifiers=method.getModifierList();
        if (modifiers.hasModifierProperty(PsiModifier.PRIVATE) || modifiers.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
          return false;
        }
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        return ContainerUtil.find(parameters,new Condition<PsiParameter>(){
          public boolean value(          PsiParameter p){
            return Param.isInjectable(p.getType());
          }
        }
) != null;
      }
    }
);
    final PsiMethodMember[] members=ContainerUtil.map2Array(methods,PsiMethodMember.class,new Function<PsiMethod,PsiMethodMember>(){
      public PsiMethodMember fun(      PsiMethod psiMethod){
        return new PsiMethodMember(psiMethod);
      }
    }
);
    final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(members,false,false,myProject,false);
    if (myMethod != null) {
      final PsiMethod selection=ContainerUtil.find(methods,new Condition<PsiMethod>(){
        public boolean value(        PsiMethod method){
          if (!method.getName().equals(myMethod.getName())) {
            return false;
          }
          final MethodSignature sig1=method.getSignature(PsiSubstitutor.EMPTY);
          final MethodSignature sig2=myMethod.getSignature(PsiSubstitutor.EMPTY);
          return Arrays.equals(sig1.getParameterTypes(),sig2.getParameterTypes());
        }
      }
);
      if (selection != null) {
        chooser.selectElements(new ClassMember[]{new PsiMethodMember(selection)});
      }
    }
    chooser.setCopyJavadocVisible(false);
    chooser.setTitle("Select Method");
    chooser.show();
    final java.util.List<PsiMethodMember> selection=chooser.getSelectedElements();
    if (chooser.isOK() && selection != null && selection.size() > 0) {
      final PsiMethod method=selection.get(0).getElement();
      myMethod=makeMethod(buildSignature(method));
      setMethodName(method.getName());
      updateTree();
    }
    return;
  }
  Messages.showErrorDialog(myProject,"Please select a valid class first","Method Selection");
}
