{
  final PsiElement nameElement=descriptor.getPsiElement();
  final PsiLocalVariable variable=(PsiLocalVariable)nameElement.getParent();
  final PsiExpression initializer=variable.getInitializer();
  if (initializer == null) {
    return;
  }
  final PsiMember member=PsiTreeUtil.getParentOfType(variable,PsiMember.class);
  final Query<PsiReference> search=ReferencesSearch.search(variable,new LocalSearchScope(member));
  final Collection<PsiElement> replacedElements=new ArrayList();
  search.forEach(new Processor<PsiReference>(){
    public boolean process(    PsiReference reference){
      final PsiElement replacedElement=reference.getElement().replace(initializer);
      replacedElements.add(replacedElement);
      return true;
    }
  }
);
  HighlightUtils.highlightElements(replacedElements);
  variable.delete();
}
