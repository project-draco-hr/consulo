{
  final PsiElement nameElement=descriptor.getPsiElement();
  final PsiLocalVariable variable=(PsiLocalVariable)nameElement.getParent();
  PsiExpression initializer=variable.getInitializer();
  if (initializer == null) {
    return;
  }
  if (initializer instanceof PsiArrayInitializerExpression) {
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
    final PsiType type=initializer.getType();
    final String typeText;
    if (type == null) {
      typeText="";
    }
 else {
      typeText=type.getCanonicalText();
    }
    initializer=factory.createExpressionFromText("new " + typeText + initializer.getText(),variable);
  }
  final PsiMember member=PsiTreeUtil.getParentOfType(variable,PsiMember.class);
  final Query<PsiReference> search=ReferencesSearch.search(variable,new LocalSearchScope(member));
  final Collection<PsiElement> replacedElements=new ArrayList<PsiElement>();
  final Collection<PsiReference> references=search.findAll();
  for (  PsiReference reference : references) {
    final PsiElement replacedElement=reference.getElement().replace(initializer);
    replacedElements.add(replacedElement);
  }
  HighlightUtils.highlightElements(replacedElements);
  PsiElement elementToRemove=variable;
  if (variable instanceof PsiResourceVariable) {
    final PsiElement parent=variable.getParent();
    if (parent instanceof PsiResourceList && ((PsiResourceList)parent).getResourceVariablesCount() == 1) {
      elementToRemove=parent;
    }
  }
  elementToRemove.delete();
}
