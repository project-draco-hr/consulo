{
  if (statement1 == null) {
    return statement2 == null;
  }
 else   if (statement2 == null) {
    return false;
  }
  if (statement1.getClass() != statement2.getClass()) {
    if (statement1 instanceof PsiBlockStatement && !(statement2 instanceof PsiBlockStatement)) {
      final PsiBlockStatement blockStatement=(PsiBlockStatement)statement1;
      final PsiStatement[] statements=blockStatement.getCodeBlock().getStatements();
      if (statements.length != 1) {
        return false;
      }
      statement1=statements[0];
    }
 else     if (!(statement1 instanceof PsiBlockStatement) && statement2 instanceof PsiBlockStatement) {
      final PsiBlockStatement blockStatement=(PsiBlockStatement)statement2;
      final PsiStatement[] statements=blockStatement.getCodeBlock().getStatements();
      if (statements.length != 1) {
        return false;
      }
      statement2=statements[0];
    }
 else {
      return false;
    }
    if (statement1.getClass() != statement2.getClass()) {
      return false;
    }
  }
 else   if (statement1 instanceof PsiBlockStatement) {
    return blockStatementsAreEquivalent((PsiBlockStatement)statement1,(PsiBlockStatement)statement2);
  }
  if (statement1 instanceof PsiAssertStatement) {
    return assertStatementsAreEquivalent((PsiAssertStatement)statement1,(PsiAssertStatement)statement2);
  }
  if (statement1 instanceof PsiBreakStatement) {
    return breakStatementsAreEquivalent((PsiBreakStatement)statement1,(PsiBreakStatement)statement2);
  }
  if (statement1 instanceof PsiContinueStatement) {
    return continueStatementsAreEquivalent((PsiContinueStatement)statement1,(PsiContinueStatement)statement2);
  }
  if (statement1 instanceof PsiDeclarationStatement) {
    return declarationStatementsAreEquivalent((PsiDeclarationStatement)statement1,(PsiDeclarationStatement)statement2);
  }
  if (statement1 instanceof PsiDoWhileStatement) {
    return doWhileStatementsAreEquivalent((PsiDoWhileStatement)statement1,(PsiDoWhileStatement)statement2);
  }
  if (statement1 instanceof PsiEmptyStatement) {
    return true;
  }
  if (statement1 instanceof PsiExpressionListStatement) {
    return expressionListStatementsAreEquivalent((PsiExpressionListStatement)statement1,(PsiExpressionListStatement)statement2);
  }
  if (statement1 instanceof PsiExpressionStatement) {
    return expressionStatementsAreEquivalent((PsiExpressionStatement)statement1,(PsiExpressionStatement)statement2);
  }
  if (statement1 instanceof PsiForStatement) {
    return forStatementsAreEquivalent((PsiForStatement)statement1,(PsiForStatement)statement2);
  }
  if (statement1 instanceof PsiForeachStatement) {
    return forEachStatementsAreEquivalent((PsiForeachStatement)statement1,(PsiForeachStatement)statement2);
  }
  if (statement1 instanceof PsiIfStatement) {
    return ifStatementsAreEquivalent((PsiIfStatement)statement1,(PsiIfStatement)statement2);
  }
  if (statement1 instanceof PsiLabeledStatement) {
    return labeledStatementsAreEquivalent((PsiLabeledStatement)statement1,(PsiLabeledStatement)statement2);
  }
  if (statement1 instanceof PsiReturnStatement) {
    return returnStatementsAreEquivalent((PsiReturnStatement)statement1,(PsiReturnStatement)statement2);
  }
  if (statement1 instanceof PsiSwitchStatement) {
    return switchStatementsAreEquivalent((PsiSwitchStatement)statement1,(PsiSwitchStatement)statement2);
  }
  if (statement1 instanceof PsiSwitchLabelStatement) {
    return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement)statement1,(PsiSwitchLabelStatement)statement2);
  }
  if (statement1 instanceof PsiSynchronizedStatement) {
    return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement)statement1,(PsiSynchronizedStatement)statement2);
  }
  if (statement1 instanceof PsiThrowStatement) {
    return throwStatementsAreEquivalent((PsiThrowStatement)statement1,(PsiThrowStatement)statement2);
  }
  if (statement1 instanceof PsiTryStatement) {
    return tryStatementsAreEquivalent((PsiTryStatement)statement1,(PsiTryStatement)statement2);
  }
  if (statement1 instanceof PsiWhileStatement) {
    return whileStatementsAreEquivalent((PsiWhileStatement)statement1,(PsiWhileStatement)statement2);
  }
  final String text1=statement1.getText();
  final String text2=statement2.getText();
  return text1.equals(text2);
}
