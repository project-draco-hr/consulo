{
  final PsiBinaryExpression condition=(PsiBinaryExpression)forStatement.getCondition();
  if (condition == null) {
    return null;
  }
  final PsiExpression limit=condition.getROperand();
  if (limit == null) {
    return null;
  }
  final String lengthText=limit.getText();
  final PsiStatement initialization=forStatement.getInitialization();
  if (initialization == null) {
    return null;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return null;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration.getDeclaredElements().length != 1) {
    return null;
  }
  final PsiLocalVariable var=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  final PsiExpression initialValue=var.getInitializer();
  final PsiExpressionStatement body=getBody(forStatement);
  if (body == null) {
    return null;
  }
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)body.getExpression();
  final PsiExpression lExpression=assignment.getLExpression();
  final PsiArrayAccessExpression lhs=(PsiArrayAccessExpression)ParenthesesUtils.stripParentheses(lExpression);
  if (lhs == null) {
    return null;
  }
  final PsiExpression lArray=lhs.getArrayExpression();
  final String toArrayText=lArray.getText();
  final PsiExpression rExpression=assignment.getRExpression();
  if (rExpression == null) {
    return null;
  }
  final PsiArrayAccessExpression rhs=(PsiArrayAccessExpression)ParenthesesUtils.stripParentheses(rExpression);
  if (rhs == null) {
    return null;
  }
  final PsiExpression rArray=rhs.getArrayExpression();
  final String fromArrayText=rArray.getText();
  final PsiExpression rhsIndex=rhs.getIndexExpression();
  final int offset=getOffset(initialValue);
  final String fromOffsetText=Integer.toString(offset + getOffset(rhsIndex));
  final PsiExpression lhsIndex=lhs.getIndexExpression();
  final String toOffsetText=Integer.toString(offset + getOffset(lhsIndex));
  @NonNls final StringBuffer buffer=new StringBuffer(25 + fromArrayText.length() + toArrayText.length()+ lengthText.length());
  buffer.append("System.arraycopy(");
  buffer.append(fromArrayText);
  buffer.append(", ");
  buffer.append(fromOffsetText);
  buffer.append(", ");
  buffer.append(toArrayText);
  buffer.append(", ");
  buffer.append(toOffsetText);
  buffer.append(", ");
  buffer.append(lengthText);
  buffer.append(");");
  return buffer.toString();
}
