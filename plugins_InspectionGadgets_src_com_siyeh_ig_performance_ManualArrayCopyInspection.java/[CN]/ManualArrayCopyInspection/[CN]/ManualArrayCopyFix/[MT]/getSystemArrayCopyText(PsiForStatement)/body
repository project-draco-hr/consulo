{
  final PsiExpression condition=forStatement.getCondition();
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)PsiUtil.deparenthesizeExpression(condition);
  if (binaryExpression == null) {
    return null;
  }
  final PsiExpression limit;
  if (binaryExpression.getOperationTokenType() == JavaTokenType.LT) {
    limit=binaryExpression.getROperand();
  }
 else {
    limit=binaryExpression.getLOperand();
  }
  if (limit == null) {
    return null;
  }
  final PsiStatement initialization=forStatement.getInitialization();
  if (initialization == null) {
    return null;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return null;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration.getDeclaredElements().length != 1) {
    return null;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  final String lengthText=getLengthText(limit,variable);
  final PsiExpressionStatement body=getBody(forStatement);
  if (body == null) {
    return null;
  }
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)body.getExpression();
  final PsiExpression lExpression=assignment.getLExpression();
  final PsiArrayAccessExpression lhs=(PsiArrayAccessExpression)PsiUtil.deparenthesizeExpression(lExpression);
  if (lhs == null) {
    return null;
  }
  final PsiExpression lArray=lhs.getArrayExpression();
  final String toArrayText=lArray.getText();
  final PsiExpression rExpression=assignment.getRExpression();
  final PsiArrayAccessExpression rhs=(PsiArrayAccessExpression)PsiUtil.deparenthesizeExpression(rExpression);
  if (rhs == null) {
    return null;
  }
  final PsiExpression rArray=rhs.getArrayExpression();
  final String fromArrayText=rArray.getText();
  final PsiExpression rhsIndexExpression=rhs.getIndexExpression();
  final String fromOffsetText=getOffsetText(rhsIndexExpression,variable);
  final PsiExpression lhsIndexExpression=lhs.getIndexExpression();
  final String toOffsetText=getOffsetText(lhsIndexExpression,variable);
  @NonNls final StringBuilder buffer=new StringBuilder(60);
  buffer.append("System.arraycopy(");
  buffer.append(fromArrayText);
  buffer.append(", ");
  buffer.append(fromOffsetText);
  buffer.append(", ");
  buffer.append(toArrayText);
  buffer.append(", ");
  buffer.append(toOffsetText);
  buffer.append(", ");
  buffer.append(lengthText);
  buffer.append(");");
  return buffer.toString();
}
