{
  final PsiExpression condition=forStatement.getCondition();
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)ParenthesesUtils.stripParentheses(condition);
  if (binaryExpression == null) {
    return null;
  }
  final IElementType tokenType=binaryExpression.getOperationTokenType();
  final PsiExpression limit;
  if (JavaTokenType.LT.equals(tokenType) || JavaTokenType.LE.equals(tokenType)) {
    limit=binaryExpression.getROperand();
  }
 else {
    limit=binaryExpression.getLOperand();
  }
  if (limit == null) {
    return null;
  }
  final PsiStatement initialization=forStatement.getInitialization();
  if (initialization == null) {
    return null;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return null;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  if (declaredElements.length != 1) {
    return null;
  }
  final PsiElement declaredElement=declaredElements[0];
  if (!(declaredElement instanceof PsiLocalVariable)) {
    return null;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)declaredElement;
  final String lengthText=buildLengthText(limit,variable,JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType));
  final PsiArrayAccessExpression lhs=getLhsArrayAccessExpression(forStatement);
  if (lhs == null) {
    return null;
  }
  final PsiExpression lArray=lhs.getArrayExpression();
  final String toArrayText=lArray.getText();
  final PsiArrayAccessExpression rhs=getRhsArrayAccessExpression(forStatement);
  if (rhs == null) {
    return null;
  }
  final PsiExpression rArray=rhs.getArrayExpression();
  final String fromArrayText=rArray.getText();
  final PsiExpression rhsIndexExpression=rhs.getIndexExpression();
  final PsiExpression strippedRhsIndexExpression=ParenthesesUtils.stripParentheses(rhsIndexExpression);
  final String fromOffsetText=buildOffsetText(strippedRhsIndexExpression,variable);
  final PsiExpression lhsIndexExpression=lhs.getIndexExpression();
  final PsiExpression strippedLhsIndexExpression=ParenthesesUtils.stripParentheses(lhsIndexExpression);
  final String toOffsetText=buildOffsetText(strippedLhsIndexExpression,variable);
  @NonNls final StringBuilder buffer=new StringBuilder(60);
  buffer.append("System.arraycopy(");
  buffer.append(fromArrayText);
  buffer.append(", ");
  buffer.append(fromOffsetText);
  buffer.append(", ");
  buffer.append(toArrayText);
  buffer.append(", ");
  buffer.append(toOffsetText);
  buffer.append(", ");
  buffer.append(lengthText);
  buffer.append(");");
  return buffer.toString();
}
