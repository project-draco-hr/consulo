{
  final PsiExpression strippedExpression=ParenthesesUtils.stripParentheses(expression);
  if (strippedExpression == null) {
    return null;
  }
  final String expressionText=strippedExpression.getText();
  final String variableName=variable.getName();
  if (expressionText.equals(variableName)) {
    final PsiExpression initialValue=variable.getInitializer();
    if (initialValue == null) {
      return null;
    }
    return initialValue.getText();
  }
  if (strippedExpression instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)strippedExpression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final String lhsText=getOffsetText(lhs,variable);
    final PsiExpression rhs=binaryExpression.getROperand();
    final String rhsText=getOffsetText(rhs,variable);
    final PsiJavaToken sign=binaryExpression.getOperationSign();
    final IElementType tokenType=sign.getTokenType();
    if (lhsText == null || lhsText.equals("0")) {
      if (tokenType.equals(JavaTokenType.MINUS)) {
        return '-' + rhsText;
      }
      return rhsText;
    }
 else     if (rhsText == null || rhsText.equals("0")) {
      return lhsText;
    }
    return collapseConstant(lhsText + sign.getText() + rhsText,variable);
  }
  return collapseConstant(expression.getText(),variable);
}
