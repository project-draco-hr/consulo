{
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiVariable)) {
    return;
  }
  final PsiType declType=((PsiVariable)parent).getType();
  if (!(declType instanceof PsiClassReferenceType)) {
    return;
  }
  final PsiType[] parameters=((PsiClassType)declType).getParameters();
  if (parameters.length == 0) {
    return;
  }
  PsiJavaCodeReferenceElement classReference=expression.getClassReference();
  if (classReference == null) {
    final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
    if (anonymousClass != null) {
      classReference=anonymousClass.getBaseClassReference();
      if (quick || seemsLikeLambda(anonymousClass.getSuperClass())) {
        return;
      }
    }
  }
  if (classReference != null) {
    final PsiReferenceParameterList list=classReference.getParameterList();
    if (list != null) {
      if (quick) {
        final PsiJavaCodeReferenceElement declReference=((PsiClassReferenceType)declType).getReference();
        final PsiReferenceParameterList declList=declReference.getParameterList();
        if (declList == null || !list.getText().equals(declList.getText())) {
          return;
        }
      }
 else {
        if (!Arrays.equals(list.getTypeArguments(),parameters)) {
          return;
        }
      }
      addTypeParametersFolding(foldElements,document,list,5,quick);
    }
  }
}
