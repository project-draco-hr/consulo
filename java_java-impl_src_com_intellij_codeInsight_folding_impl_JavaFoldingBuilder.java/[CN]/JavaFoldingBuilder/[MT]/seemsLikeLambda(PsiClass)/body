{
  if (baseClass == null)   return false;
  if (!baseClass.hasModifierProperty(PsiModifier.ABSTRACT))   return false;
  if (!PsiUtil.hasDefaultConstructor(baseClass,true))   return false;
  for (  final PsiMethod method : baseClass.getMethods()) {
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      return true;
    }
  }
  return !OverrideImplementUtil.getMethodSignaturesToImplement(baseClass).isEmpty();
}
