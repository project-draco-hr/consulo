{
  super.visitMethodCallExpression(psiMethodCallExpression);
  final PsiReferenceExpression methodExpression=psiMethodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"writeObject".equals(methodName)) {
    return;
  }
  final PsiExpressionList argList=psiMethodCallExpression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  if (args.length != 1) {
    return;
  }
  final PsiMethod calledMethod=psiMethodCallExpression.resolveMethod();
  if (calledMethod == null) {
    return;
  }
  final PsiClass receiverClass=calledMethod.getContainingClass();
  if (receiverClass == null) {
    return;
  }
  if (!"java.io.ObjectOutputStream".equals(receiverClass.getQualifiedName())) {
    return;
  }
  final PsiType argType=args[0].getType();
  if (argType == null) {
    return;
  }
  if (SerializationUtils.isProbablySerializable(argType)) {
    return;
  }
  registerError(args[0]);
}
