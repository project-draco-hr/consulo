{
  Object data=aEvent.getData();
  final LogMessage message=data instanceof LogMessage ? (LogMessage)data : new LogMessage(aEvent);
  if (myIdeFatals.size() < MAX_POOL_SIZE_FOR_FATALS) {
    if (myFatalsGrouper.addToGroup(message)) {
      String title="<a href='xxx'>" + getTitle(message) + "</a>";
      String notificationText=getNotificationText(message);
      Notification notification=new Notification(NOTIFICATION_GROUP.getDisplayId(),title,notificationText,NotificationType.ERROR,new NotificationListener(){
        @Override public void hyperlinkUpdate(        @NotNull Notification notification,        @NotNull HyperlinkEvent event){
          Object source=event.getSource();
          if (source instanceof Component) {
            Window window=SwingUtilities.getWindowAncestor((Component)source);
            if (window instanceof IdeFrame) {
              StatusBarWidget widget=((IdeStatusBarImpl)((IdeFrame)window).getStatusBar()).getWidget(IdeMessagePanel.FATAL_ERROR);
              if (widget instanceof IdeMessagePanel) {
                ((IdeMessagePanel)widget).openFatals(message);
              }
            }
          }
        }
      }
){
        @Override public void expire(){
          super.expire();
          if (!message.isRead()) {
            message.setRead(true);
          }
          clearFatals();
          notifyListenersRead();
        }
      }
;
      notification.notify(null);
      message.setNotification(notification);
    }
  }
 else   if (myIdeFatals.size() == MAX_POOL_SIZE_FOR_FATALS) {
    String msg=DiagnosticBundle.message("error.monitor.too.many.errors");
    myFatalsGrouper.addToGroup(new LogMessage(new LoggingEvent(msg,Category.getRoot(),Priority.ERROR,null,new TooManyErrorsException())));
    NOTIFICATION_GROUP.createNotification(msg,NotificationType.ERROR).notify(null);
  }
}
