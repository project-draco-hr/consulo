{
  final PluginId pluginId=pluginDescriptor.getPluginId();
  String epName=extractEPName(extensionElement);
  ExtensionComponentAdapter adapter;
  String implClass;
  Class extensionClass=getExtensionPoint(epName).getExtensionClass();
  implClass=extensionElement.getAttributeValue("implementation");
  if (extensionClass.isInterface() || Modifier.isAbstract(extensionClass.getModifiers())) {
    if (implClass == null) {
      throw new RuntimeException("Expected implementation for extension declaration (ep = " + epName + ")");
    }
  }
  if (implClass != null) {
    try {
      Class implementationClass;
      if (pluginDescriptor.getPluginClassLoader() == null) {
        implementationClass=Class.forName(implClass);
      }
 else {
        implementationClass=Class.forName(implClass,true,pluginDescriptor.getPluginClassLoader());
      }
      adapter=new ExtensionComponentAdapter(implementationClass,extensionElement,getPluginContainer(pluginId.getIdString()),pluginDescriptor);
    }
 catch (    ClassNotFoundException e) {
      myLogger.warn("Extension implementation class not found: " + implClass);
      myExtensionElement2extension.put(extensionElement,null);
      return;
    }
  }
 else {
    final ExtensionPoint extensionPoint=getExtensionPoint(epName);
    adapter=new ExtensionComponentAdapter(extensionPoint.getExtensionClass(),extensionElement,getPluginContainer(pluginId.getIdString()),pluginDescriptor);
  }
  myExtensionElement2extension.put(extensionElement,adapter);
  internalGetPluginContainer().registerComponent(adapter);
  getExtensionPointImpl(epName).registerExtensionAdapter(adapter);
}
