{
  if (myModulePaths != null && myModulePaths.length > 0) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        myFailedModulePaths.clear();
        myFailedModulePaths.addAll(Arrays.asList(myModulePaths));
        final List<Module> modulesWithUnknownTypes=new ArrayList<Module>();
        for (int idx=0; idx < myModulePaths.length; idx++) {
          final ModulePath modulePath=myModulePaths[idx];
          try {
            final Module module=myModuleModel.loadModuleInternal(modulePath.getPath());
            if (module.getModuleType() instanceof UnknownModuleType) {
              modulesWithUnknownTypes.add(module);
            }
            final String groupPathString=modulePath.getModuleGroup();
            if (groupPathString != null) {
              final String[] groupPath=groupPathString.split(MODULE_GROUP_SEPARATOR);
              setModuleGroupPath(module,groupPath);
            }
            myFailedModulePaths.remove(modulePath);
          }
 catch (          final IOException e) {
            fireError("Cannot load module: " + e.getMessage(),modulePath);
          }
catch (          JDOMException e) {
            fireError("Corrupted module file: " + modulePath.getPath(),modulePath);
          }
catch (          InvalidDataException e) {
            fireError("Corrupted module data at: " + modulePath.getPath(),modulePath);
          }
catch (          final ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
            fireError(moduleWithNameAlreadyExists.getMessage(),modulePath);
          }
catch (          final LoadCancelledException e) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                int response=Messages.showDialog("Cancelled loading of module from:" + modulePath.getPath() + "\n"+ "Cancelled by component: "+ e.getIssuer().getComponentName()+ "\n"+ "Reason is: "+ e.getMessage(),"Module Loading Cancelled",new String[]{"Try to load &later","&Remove from project"},0,Messages.getErrorIcon());
                if (response == 1) {
                  myModuleModel.myPath2CancelledModelMap.remove(modulePath.getPath());
                }
              }
            }
);
          }
        }
        if (!ApplicationManager.getApplication().isHeadlessEnvironment() && modulesWithUnknownTypes.size() > 0) {
          final StringBuffer message=new StringBuffer("Cannot determine module type for the following ");
          if (modulesWithUnknownTypes.size() == 1) {
            message.append("module:");
          }
 else {
            message.append("modules:");
          }
          for (Iterator it=modulesWithUnknownTypes.iterator(); it.hasNext(); ) {
            final Module module=(Module)it.next();
            message.append("\n\"");
            message.append(module.getName());
            message.append("\"");
          }
          if (modulesWithUnknownTypes.size() > 1) {
            message.append(".\nAll mentioned modules will be treated as JAVA modules.");
          }
 else {
            message.append(".\nThe module will be treated as a JAVA module.");
          }
          Messages.showWarningDialog(myProject,message.toString(),"Unknown Module Type");
        }
      }
    }
);
  }
}
