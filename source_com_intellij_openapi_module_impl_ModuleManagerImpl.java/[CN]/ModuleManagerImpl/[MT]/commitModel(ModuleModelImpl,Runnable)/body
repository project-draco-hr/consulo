{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  final Collection<Module> oldModules=myModuleModel.myPath2ModelMap.values();
  final Collection<Module> newModules=moduleModel.myPath2ModelMap.values();
  List<Module> removedModules=new ArrayList<Module>(oldModules);
  removedModules.removeAll(newModules);
  List<Module> addedModules=new ArrayList<Module>(newModules);
  addedModules.removeAll(oldModules);
  ProjectRootManagerEx.getInstanceEx(myProject).beforeRootsChange(false);
  try {
    for (int i=0; i < removedModules.size(); i++) {
      ModuleImpl module=(ModuleImpl)removedModules.get(i);
      fireBeforeModuleRemoved(module);
      cleanCachedStuff();
    }
    List<Module> neverAddedModules=new ArrayList<Module>(moduleModel.myModulesToDispose);
    neverAddedModules.removeAll(myModuleModel.myPath2ModelMap.values());
    for (Iterator<Module> iterator=neverAddedModules.iterator(); iterator.hasNext(); ) {
      ModuleImpl module=(ModuleImpl)iterator.next();
      module.dispose();
    }
    myModuleModel=moduleModel;
    if (runnable != null) {
      runnable.run();
    }
    for (int i=0; i < removedModules.size(); i++) {
      ModuleImpl module=(ModuleImpl)removedModules.get(i);
      fireModuleRemoved(module);
      cleanCachedStuff();
      module.dispose();
      cleanCachedStuff();
    }
    for (int i=0; i < addedModules.size(); i++) {
      ModuleImpl module=(ModuleImpl)addedModules.get(i);
      module.moduleAdded();
      cleanCachedStuff();
      fireModuleAdded(module);
      cleanCachedStuff();
    }
    final Map<Module,String> modulesToNewNamesMap=moduleModel.myModulesToNewNamesMap;
    final Set<Module> modulesToBeRenamed=modulesToNewNamesMap.keySet();
    final List<Module> modules=new ArrayList<Module>();
    for (Iterator<Module> iterator=modulesToBeRenamed.iterator(); iterator.hasNext(); ) {
      ModuleImpl module=(ModuleImpl)iterator.next();
      modules.add(module);
      module.rename(modulesToNewNamesMap.get(module));
      cleanCachedStuff();
    }
    fireModulesRenamed(modules);
    cleanCachedStuff();
  }
  finally {
    ProjectRootManagerEx.getInstanceEx(myProject).rootsChanged(false);
  }
}
