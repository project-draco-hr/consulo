{
  if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(new VirtualFile[]{descriptor.getPsiElement().getContainingFile().getVirtualFile()}).hasReadonlyFiles())   return;
  final PsiJavaToken classNameToken=(PsiJavaToken)descriptor.getPsiElement();
  try {
    final PsiClass innerClass=(PsiClass)classNameToken.getParent();
    final PsiManager manager=innerClass.getManager();
    final PsiSearchHelper searchHelper=manager.getSearchHelper();
    final SearchScope useScope=innerClass.getUseScope();
    final PsiReference[] references=searchHelper.findReferences(innerClass,useScope,false);
    for (int i=0; i < references.length; i++) {
      final PsiReference reference=references[i];
      final PsiElement element=reference.getElement();
      final PsiElement parent=element.getParent();
      if (parent instanceof PsiNewExpression) {
        final PsiNewExpression newExpression=(PsiNewExpression)parent;
        final PsiExpression qualifier=newExpression.getQualifier();
        if (qualifier != null) {
          qualifier.delete();
        }
      }
    }
    final PsiModifierList modifiers=innerClass.getModifierList();
    modifiers.setModifierProperty(PsiModifier.STATIC,true);
  }
 catch (  IncorrectOperationException e) {
    final Class aClass=getClass();
    final String className=aClass.getName();
    final Logger logger=Logger.getInstance(className);
    logger.error(e);
  }
}
