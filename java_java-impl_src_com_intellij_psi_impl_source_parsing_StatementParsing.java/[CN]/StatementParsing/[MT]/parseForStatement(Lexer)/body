{
  LOG.assertTrue(lexer.getTokenType() == JavaTokenType.FOR_KEYWORD);
  final TreeElement forKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  lexer.advance();
  if (lexer.getTokenType() != JavaTokenType.LPARENTH) {
    CompositeElement errorForElement=ASTFactory.composite(JavaElementType.FOR_STATEMENT);
    errorForElement.rawAddChildren(forKeyword);
    errorForElement.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.lparen")));
    return errorForElement;
  }
  final TreeElement lparenth=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  lexer.advance();
  final LexerPosition afterLParenth=lexer.getCurrentPosition();
  final TreeElement parameter=myContext.getDeclarationParsing().parseParameter(lexer,false);
  if (parameter == null || parameter.getElementType() != JavaElementType.PARAMETER || lexer.getTokenType() != JavaTokenType.COLON) {
    lexer.restore(afterLParenth);
    return parseForLoopFromInitialization(forKeyword,lparenth,lexer);
  }
 else {
    return parseForEachFromColon(forKeyword,lparenth,parameter,lexer);
  }
}
