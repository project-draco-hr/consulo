{
  final List<Library> libraries=new ArrayList<Library>();
  final List<Module> modules=new ArrayList<Module>();
  final List<ModuleAwareContentRoot> contentRoots=new ArrayList<ModuleAwareContentRoot>();
  final List<ExportableOrderEntry> dependencies=new ArrayList<ExportableOrderEntry>();
  IntellijEntityVisitor visitor=new IntellijEntityVisitor(){
    @Override public void visit(    @NotNull Project project){
    }
    @Override public void visit(    @NotNull Module module){
      modules.add(module);
    }
    @Override public void visit(    @NotNull ModuleAwareContentRoot contentRoot){
      contentRoots.add(contentRoot);
    }
    @Override public void visit(    @NotNull LibraryOrderEntry libraryDependency){
      dependencies.add(libraryDependency);
    }
    @Override public void visit(    @NotNull ModuleOrderEntry moduleDependency){
      dependencies.add(moduleDependency);
    }
    @Override public void visit(    @NotNull Library library){
      libraries.add(library);
    }
  }
;
  for (  GradleProjectStructureNode<?> node : nodes) {
    GradleProjectStructureNodeDescriptor<? extends GradleEntityId> descriptor=node.getDescriptor();
    if (descriptor.getAttributes() != GradleTextAttributes.INTELLIJ_LOCAL_CHANGE) {
      continue;
    }
    Object entity=myIdMapper.mapIdToEntity(descriptor.getElement());
    if (entity != null) {
      GradleUtil.dispatch(entity,visitor);
    }
  }
  myContentRootManager.removeContentRoots(contentRoots);
  myModuleDependencyManager.removeDependencies(dependencies);
  myModuleManager.removeModules(modules);
  myLibraryManager.removeLibraries(libraries);
  GradleUtil.refreshProject(myProjectStructureHelper.getProject());
}
