{
  final List<Module> modules=ContainerUtilRt.newArrayList();
  final List<ModuleAwareContentRoot> contentRoots=ContainerUtilRt.newArrayList();
  final List<ExportableOrderEntry> dependencies=ContainerUtilRt.newArrayList();
  final List<GradleJar> jars=ContainerUtilRt.newArrayList();
  IdeEntityVisitor intellijVisitor=new IdeEntityVisitor(){
    @Override public void visit(    @NotNull Project project){
    }
    @Override public void visit(    @NotNull Module module){
      modules.add(module);
    }
    @Override public void visit(    @NotNull ModuleAwareContentRoot contentRoot){
      contentRoots.add(contentRoot);
    }
    @Override public void visit(    @NotNull LibraryOrderEntry libraryDependency){
      dependencies.add(libraryDependency);
    }
    @Override public void visit(    @NotNull ModuleOrderEntry moduleDependency){
      dependencies.add(moduleDependency);
    }
    @Override public void visit(    @NotNull Library library){
    }
  }
;
  GradleEntityVisitor gradleVisitor=new GradleEntityVisitorAdapter(){
    @Override public void visit(    @NotNull GradleJar jar){
      jars.add(jar);
    }
  }
;
  for (  GradleProjectStructureNode<?> node : nodes) {
    GradleProjectStructureNodeDescriptor<? extends GradleEntityId> descriptor=node.getDescriptor();
    if (descriptor.getAttributes() == GradleTextAttributes.GRADLE_LOCAL_CHANGE || descriptor.getElement().getType() == GradleEntityType.SYNTHETIC || node.getParent() == null) {
      continue;
    }
    Object entity=myIdMapper.mapIdToEntity(descriptor.getElement());
    if (entity instanceof GradleEntity) {
      ((GradleEntity)entity).invite(gradleVisitor);
    }
 else     if (entity != null) {
      GradleUtil.dispatch(entity,intellijVisitor);
    }
  }
  myJarManager.removeJars(jars,myProjectStructureHelper.getProject(),false);
  myContentRootManager.removeContentRoots(contentRoots);
  myModuleDependencyManager.removeDependencies(dependencies,false);
  myModuleManager.removeModules(modules);
}
