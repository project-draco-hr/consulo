{
  final LibraryOrderEntry intellijDependency=myProjectStructureHelper.findIntellijLibraryDependency(dependency.getOwnerModule().getName(),dependency.getName());
  Set<String> intellijPaths=ContainerUtilRt.newHashSet();
  GradleLibrary gradleLibrary=dependency.getTarget();
  Library intellijLibrary=null;
  if (intellijDependency == null) {
    context.dependencies.add(dependency);
  }
 else {
    intellijLibrary=intellijDependency.getLibrary();
  }
  if (intellijLibrary == null) {
    intellijLibrary=myProjectStructureHelper.findIntellijLibrary(gradleLibrary);
  }
  if (intellijLibrary == null) {
    context.libraries.add(gradleLibrary);
  }
 else {
    for (    VirtualFile jarFile : intellijLibrary.getFiles(OrderRootType.CLASSES)) {
      intellijPaths.add(GradleUtil.getLocalFileSystemPath(jarFile));
    }
  }
  for (  String gradleJarPath : gradleLibrary.getPaths(LibraryPathType.BINARY)) {
    if (!intellijPaths.contains(gradleJarPath)) {
      context.jars.add(new GradleJar(gradleJarPath,null,gradleLibrary));
    }
  }
}
