{
  final CharSequence text=myDocument.getCharsSequence();
  final FileType fileType=myFile.getFileType();
  if (fileType instanceof CustomSyntaxTableFileType) {
    Lexer lexer=new CustomFileTypeLexer(((CustomSyntaxTableFileType)fileType).getSyntaxTable());
    final int caretOffset=myEditor.getCaretModel().getOffset();
    int commentStart=CharArrayUtil.lastIndexOf(text,commenter.getBlockCommentPrefix(),caretOffset);
    if (commentStart == -1)     return null;
    lexer.start(text,commentStart,text.length());
    if (lexer.getTokenType() == CustomHighlighterTokenType.MULTI_LINE_COMMENT && lexer.getTokenEnd() >= caretOffset) {
      return new TextRange(commentStart,lexer.getTokenEnd());
    }
    return null;
  }
  final String prefix;
  final String suffix;
  final SelectionModel selectionModel=myEditor.getSelectionModel();
  if (commenter instanceof SelfManagingCommenter) {
    SelfManagingCommenter selfManagingCommenter=(SelfManagingCommenter)commenter;
    prefix=selfManagingCommenter.getBlockCommentPrefix(selectionModel.getSelectionStart(),myDocument,mySelfManagedCommenterData);
    suffix=selfManagingCommenter.getBlockCommentSuffix(selectionModel.getSelectionEnd(),myDocument,mySelfManagedCommenterData);
  }
 else {
    prefix=trim(commenter.getBlockCommentPrefix());
    suffix=trim(commenter.getBlockCommentSuffix());
  }
  if (prefix == null || suffix == null)   return null;
  TextRange commentedRange;
  if (commenter instanceof SelfManagingCommenter) {
    commentedRange=((SelfManagingCommenter)commenter).getBlockCommentRange(selectionModel.getSelectionStart(),selectionModel.getSelectionEnd(),myDocument,mySelfManagedCommenterData);
  }
 else {
    if (!testSelectionForNonComments()) {
      return null;
    }
    commentedRange=getSelectedComments(text,prefix,suffix);
    if (commentedRange == null) {
      PsiElement comment=findCommentAtCaret();
      if (comment != null) {
        String commentText=comment.getText();
        if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) {
          commentedRange=comment.getTextRange();
        }
      }
    }
  }
  return commentedRange;
}
