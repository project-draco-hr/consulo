{
  if (commenter instanceof SelfManagingCommenter) {
    final SelfManagingCommenter selfManagingCommenter=(SelfManagingCommenter)commenter;
    return selfManagingCommenter.insertBlockComment(startOffset,endOffset,myDocument,mySelfManagedCommenterData);
  }
  String normalizedPrefix=commentPrefix.trim();
  String normalizedSuffix=commentSuffix.trim();
  IntArrayList nestedCommentPrefixes=new IntArrayList();
  IntArrayList nestedCommentSuffixes=new IntArrayList();
  String commentedPrefix=commenter.getCommentedBlockCommentPrefix();
  String commentedSuffix=commenter.getCommentedBlockCommentSuffix();
  CharSequence chars=myDocument.getCharsSequence();
  for (int i=startOffset; i < endOffset; ++i) {
    if (CharArrayUtil.regionMatches(chars,i,normalizedPrefix)) {
      nestedCommentPrefixes.add(i);
    }
 else {
      if (CharArrayUtil.regionMatches(chars,i,normalizedSuffix)) {
        nestedCommentSuffixes.add(i);
      }
    }
  }
  int shift=0;
  if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) {
    myDocument.insertString(endOffset,commentSuffix);
    shift+=commentSuffix.length();
  }
  int i=nestedCommentPrefixes.size() - 1;
  int j=nestedCommentSuffixes.size() - 1;
  final TextRange selection=new TextRange(startOffset,endOffset);
  while (i >= 0 && j >= 0) {
    final int prefixIndex=nestedCommentPrefixes.get(i);
    final int suffixIndex=nestedCommentSuffixes.get(j);
    if (prefixIndex > suffixIndex) {
      shift+=doBoundCommentingAndGetShift(prefixIndex,commentedPrefix,normalizedPrefix.length(),commentSuffix,false,selection);
      --i;
    }
 else {
      shift+=doBoundCommentingAndGetShift(suffixIndex,commentedSuffix,normalizedSuffix.length(),commentPrefix,true,selection);
      --j;
    }
  }
  while (i >= 0) {
    final int prefixIndex=nestedCommentPrefixes.get(i);
    shift+=doBoundCommentingAndGetShift(prefixIndex,commentedPrefix,normalizedPrefix.length(),commentSuffix,false,selection);
    --i;
  }
  while (j >= 0) {
    final int suffixIndex=nestedCommentSuffixes.get(j);
    shift+=doBoundCommentingAndGetShift(suffixIndex,commentedSuffix,normalizedSuffix.length(),commentPrefix,true,selection);
    --j;
  }
  if (!(commentedPrefix == null && !nestedCommentPrefixes.isEmpty() && nestedCommentPrefixes.get(0) == startOffset)) {
    myDocument.insertString(startOffset,commentPrefix);
    shift+=commentPrefix.length();
  }
  RangeMarker marker=myDocument.createRangeMarker(startOffset,endOffset + shift);
  try {
    return processDocument(myDocument,marker,commenter,true);
  }
  finally {
    marker.dispose();
  }
}
