{
  if (commenter instanceof SelfManagingCommenter) {
    final SelfManagingCommenter selfManagingCommenter=(SelfManagingCommenter)commenter;
    selfManagingCommenter.uncommentBlockComment(range.getStartOffset(),range.getEndOffset(),myDocument,mySelfManagedCommenterData);
    return;
  }
  String text=myDocument.getCharsSequence().subSequence(range.getStartOffset(),range.getEndOffset()).toString();
  int startOffset=range.getStartOffset();
  List<Couple<TextRange>> ranges=new ArrayList<Couple<TextRange>>();
  if (commenter instanceof CustomUncommenter) {
    CustomUncommenter customUncommenter=(CustomUncommenter)commenter;
    for (    Couple<TextRange> coupleFromCommenter : customUncommenter.getCommentRangesToDelete(text)) {
      TextRange openComment=coupleFromCommenter.first.shiftRight(startOffset);
      TextRange closeComment=coupleFromCommenter.second.shiftRight(startOffset);
      ranges.add(Couple.of(openComment,closeComment));
    }
  }
 else {
    int position=0;
    while (true) {
      int start=getNearest(text,commentPrefix,position);
      if (start == text.length()) {
        break;
      }
      position=start;
      int end=getNearest(text,commentSuffix,position + commentPrefix.length()) + commentSuffix.length();
      position=end;
      Couple<TextRange> pair=findCommentBlock(new TextRange(start + startOffset,end + startOffset),commentPrefix,commentSuffix);
      ranges.add(pair);
    }
  }
  RangeMarker marker=myDocument.createRangeMarker(range);
  try {
    for (int i=ranges.size() - 1; i >= 0; i--) {
      Couple<TextRange> toDelete=ranges.get(i);
      myDocument.deleteString(toDelete.first.getStartOffset(),toDelete.first.getEndOffset());
      int shift=toDelete.first.getEndOffset() - toDelete.first.getStartOffset();
      myDocument.deleteString(toDelete.second.getStartOffset() - shift,toDelete.second.getEndOffset() - shift);
      if (commenter.getCommentedBlockCommentPrefix() != null) {
        commentNestedComments(myDocument,new TextRange(toDelete.first.getEndOffset() - shift,toDelete.second.getStartOffset() - shift),commenter);
      }
    }
    processDocument(myDocument,marker,commenter,false);
  }
  finally {
    marker.dispose();
  }
}
