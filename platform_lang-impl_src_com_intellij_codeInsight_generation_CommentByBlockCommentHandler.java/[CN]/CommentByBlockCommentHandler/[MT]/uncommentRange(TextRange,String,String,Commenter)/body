{
  String text=myDocument.getCharsSequence().subSequence(range.getStartOffset(),range.getEndOffset()).toString();
  int startOffset=range.getStartOffset();
  List<Pair<TextRange,TextRange>> ranges=new ArrayList<Pair<TextRange,TextRange>>();
  int position=0;
  while (true) {
    int start=getNearest(text,commentPrefix,position);
    if (start == text.length()) {
      break;
    }
    position=start;
    int end=getNearest(text,commentSuffix,position + commentPrefix.length()) + commentSuffix.length();
    position=end;
    Pair<TextRange,TextRange> pair=findCommentBlock(new TextRange(start + startOffset,end + startOffset),commentPrefix,commentSuffix);
    ranges.add(pair);
  }
  for (int i=ranges.size() - 1; i >= 0; i--) {
    Pair<TextRange,TextRange> toDelete=ranges.get(i);
    myDocument.deleteString(toDelete.first.getStartOffset(),toDelete.first.getEndOffset());
    int shift=toDelete.first.getEndOffset() - toDelete.first.getStartOffset();
    myDocument.deleteString(toDelete.second.getStartOffset() - shift,toDelete.second.getEndOffset() - shift);
    if (commenter.getCommentedBlockCommentPrefix() != null) {
      commentNestedComments(myDocument,new TextRange(toDelete.first.getEndOffset() - shift,toDelete.second.getStartOffset() - shift),commenter);
    }
  }
}
