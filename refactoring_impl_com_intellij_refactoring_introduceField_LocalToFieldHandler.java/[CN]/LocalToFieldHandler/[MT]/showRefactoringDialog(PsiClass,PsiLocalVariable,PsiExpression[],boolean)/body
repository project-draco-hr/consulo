{
  final String fieldName;
  final BaseExpressionToFieldHandler.InitializationPlace initializerPlace;
  final boolean declareFinal;
  @Modifier String fieldVisibility;
  final TypeSelectorManagerImpl typeSelectorManager=new TypeSelectorManagerImpl(myProject,local.getType(),occurences);
  final boolean annotateAsNonNls;
  final boolean introduceEnumConstant;
  if (myIsConstant) {
    IntroduceConstantDialog dialog=new IntroduceConstantDialog(myProject,aClass,local.getInitializer(),local,true,occurences,aClass,typeSelectorManager);
    dialog.show();
    if (!dialog.isOK())     return null;
    fieldName=dialog.getEnteredName();
    declareFinal=true;
    initializerPlace=IN_FIELD_DECLARATION;
    fieldVisibility=dialog.getFieldVisibility();
    annotateAsNonNls=dialog.isAnnotateAsNonNls();
    introduceEnumConstant=dialog.introduceEnumConstant();
  }
 else {
    PsiMethod method=PsiTreeUtil.getParentOfType(local,PsiMethod.class);
    IntroduceFieldDialog dialog=new IntroduceFieldDialog(myProject,aClass,local.getInitializer(),local,method != null && method.isConstructor(),true,isStatic,occurences.length,method != null,method != null,typeSelectorManager);
    dialog.show();
    if (!dialog.isOK())     return null;
    fieldName=dialog.getEnteredName();
    initializerPlace=dialog.getInitializerPlace();
    declareFinal=dialog.isDeclareFinal();
    fieldVisibility=dialog.getFieldVisibility();
    annotateAsNonNls=false;
    introduceEnumConstant=false;
  }
  return new BaseExpressionToFieldHandler.Settings(fieldName,true,isStatic,declareFinal,initializerPlace,fieldVisibility,local,null,true,aClass,annotateAsNonNls,introduceEnumConstant);
}
