{
  DefaultActionGroup group=new DefaultActionGroup();
  final LogConsolePreferences registrar=myProject.getComponent(LogConsolePreferences.class);
  final ArrayList<LogFilter> filters=new ArrayList<LogFilter>();
  filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.INFO),IconLoader.getIcon("/ant/filterInfo.png")){
    public boolean isAcceptable(    String line){
      return registrar.isApplicable(line,myPrevType);
    }
  }
);
  filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.WARNING),IconLoader.getIcon("/ant/filterWarning.png")){
    public boolean isAcceptable(    String line){
      return registrar.isApplicable(line,myPrevType);
    }
  }
);
  filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.ERROR),IconLoader.getIcon("/ant/filterError.png")){
    public boolean isAcceptable(    String line){
      return registrar.isApplicable(line,myPrevType);
    }
  }
);
  filters.addAll(registrar.getRegisteredLogFilters());
  for (  final LogFilter filter : filters) {
    group.add(new ToggleAction(filter.getName(),filter.getName(),filter.getIcon()){
      public boolean isSelected(      AnActionEvent e){
        return registrar.isFilterSelected(filter);
      }
      public void setSelected(      AnActionEvent e,      boolean state){
        registrar.setFilterSelected(filter,state);
        filterConsoleOutput(new Condition<String>(){
          public boolean value(          final String line){
            return filter.isAcceptable(line);
          }
        }
);
      }
    }
);
  }
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(actionToolbar.getComponent(),BorderLayout.WEST);
  myFilter.reset();
  panel.add(myFilter,BorderLayout.EAST);
  return panel;
}
