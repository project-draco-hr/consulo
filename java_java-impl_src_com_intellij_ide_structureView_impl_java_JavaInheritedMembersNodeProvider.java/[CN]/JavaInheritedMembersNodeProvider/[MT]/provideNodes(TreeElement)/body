{
  if (node instanceof JavaClassTreeElement) {
    final PsiClass aClass=((JavaClassTreeElement)node).getValue();
    Collection<PsiElement> inherited=new LinkedHashSet<PsiElement>();
    Collection<PsiElement> ownChildren=new THashSet<PsiElement>();
    ContainerUtil.addAll(ownChildren,aClass.getFields());
    ContainerUtil.addAll(ownChildren,aClass.getMethods());
    ContainerUtil.addAll(ownChildren,aClass.getInnerClasses());
    ContainerUtil.addAll(ownChildren,aClass.getInitializers());
    aClass.processDeclarations(new AddAllMembersProcessor(inherited,aClass),ResolveState.initial(),null,aClass);
    inherited.removeAll(ownChildren);
    List<StructureViewTreeElement> array=new ArrayList<StructureViewTreeElement>();
    for (    PsiElement child : inherited) {
      if (!child.isValid())       continue;
      if (child instanceof PsiClass) {
        array.add(new JavaClassTreeElement((PsiClass)child,true));
      }
 else       if (child instanceof PsiField) {
        array.add(new PsiFieldTreeElement((PsiField)child,true));
      }
 else       if (child instanceof PsiMethod) {
        array.add(new PsiMethodTreeElement((PsiMethod)child,true));
      }
 else       if (child instanceof PsiClassInitializer) {
        array.add(new ClassInitializerTreeElement((PsiClassInitializer)child));
      }
    }
    return array.toArray(new StructureViewTreeElement[array.size()]);
  }
  return StructureViewTreeElement.EMPTY_ARRAY;
}
