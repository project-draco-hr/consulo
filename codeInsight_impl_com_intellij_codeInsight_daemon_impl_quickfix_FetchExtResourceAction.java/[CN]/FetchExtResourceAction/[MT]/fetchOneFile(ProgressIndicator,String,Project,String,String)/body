{
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      indicator.setText(QuickFixBundle.message("fetching.progress.indicator",resourceUrl));
    }
  }
);
  FetchResult result=fetchData(project,resourceUrl,indicator);
  if (result == null)   return null;
  if (!ApplicationManager.getApplication().isUnitTestMode() && result.contentType != null && result.contentType.indexOf(HTML_MIME) != -1 && (new String(result.bytes)).indexOf("<html") != -1) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        Messages.showMessageDialog(project,QuickFixBundle.message("invalid.url.no.xml.file.at.location",resourceUrl),QuickFixBundle.message("invalid.url.title"),Messages.getErrorIcon());
      }
    }
,indicator.getModalityState());
    return null;
  }
  int slashIndex=resourceUrl.lastIndexOf('/');
  String resPath=extResourcesPath + File.separatorChar;
  if (refname != null) {
    resPath+=refname;
    int refnameSlashIndex=resPath.lastIndexOf('/');
    if (refnameSlashIndex != -1) {
      new File(resPath.substring(0,refnameSlashIndex)).mkdirs();
    }
  }
 else {
    resPath+=Integer.toHexString(resourceUrl.hashCode()) + "_" + resourceUrl.substring(slashIndex + 1);
  }
  if (resourceUrl.indexOf('.',slashIndex) == -1) {
    resPath+="." + StdFileTypes.XML.getDefaultExtension();
  }
  File res=new File(resPath);
  FileOutputStream out=new FileOutputStream(res);
  try {
    out.write(result.bytes);
  }
  finally {
    out.close();
  }
  return resPath;
}
