{
  final List<String> result=new LinkedList<String>();
  if (context != null) {
    XmlEntityRefImpl.copyEntityCaches(file,context);
  }
  XmlUtil.processXmlElements(file,new PsiElementProcessor(){
    public boolean execute(    PsiElement element){
      if (element instanceof XmlEntityDecl) {
        String candidateName=null;
        for (PsiElement e=element.getLastChild(); e != null; e=e.getPrevSibling()) {
          if (e instanceof XmlAttributeValue && candidateName == null) {
            candidateName=e.getText().substring(1,e.getTextLength() - 1);
          }
 else           if (e instanceof XmlToken && candidateName != null && ((XmlToken)e).getTokenType() == XmlTokenType.XML_DOCTYPE_PUBLIC) {
            if (!result.contains(candidateName)) {
              result.add(candidateName);
            }
            break;
          }
        }
      }
 else       if (element instanceof XmlTag) {
        final XmlTag tag=(XmlTag)element;
        final String schemaLocation=tag.getAttributeValue(XmlUtil.SCHEMA_LOCATION_ATT);
        if (schemaLocation != null) {
          final PsiReference[] references=tag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT,null).getValueElement().getReferences();
          if (references.length > 0)           result.add(schemaLocation);
        }
      }
      return true;
    }
  }
,true,true);
  return result;
}
