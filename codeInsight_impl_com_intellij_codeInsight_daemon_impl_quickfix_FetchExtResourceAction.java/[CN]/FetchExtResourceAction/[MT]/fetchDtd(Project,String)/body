{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  String sep=File.separator;
  final String extResourcesPath=PathManager.getSystemPath() + sep + EXT_RESOURCES_FOLDER;
  final File extResources=new File(extResourcesPath);
  extResources.mkdirs();
  LOG.assertTrue(extResources.exists());
  final PsiManager psiManager=PsiManager.getInstance(project);
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      Runnable action=new Runnable(){
        public void run(){
          VirtualFile vFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(extResources.getAbsolutePath().replace(File.separatorChar,'/'));
          LOG.assertTrue(vFile != null);
          PsiDirectory directory=psiManager.findDirectory(vFile);
          directory.getFiles();
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(action);
    }
  }
,indicator.getModalityState());
  final List<String> downloadedResources=new LinkedList<String>();
  final List<String> resourceUrls=new LinkedList<String>();
  final IOException[] nestedException=new IOException[1];
  try {
    final String resPath=fetchOneFile(indicator,dtdUrl,project,extResourcesPath,null);
    if (resPath == null)     return;
    resourceUrls.add(dtdUrl);
    downloadedResources.add(resPath);
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            ExternalResourceManagerImpl.getInstance().addResource(dtdUrl,resPath);
            VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(resPath.replace(File.separatorChar,'/'));
            Set<String> linksToProcess=new HashSet<String>();
            Set<String> processedLinks=new HashSet<String>();
            VirtualFile contextFile=virtualFile;
            linksToProcess.addAll(extractEmbeddedFileReferences(virtualFile,null,psiManager));
            while (!linksToProcess.isEmpty()) {
              String s=linksToProcess.iterator().next();
              linksToProcess.remove(s);
              processedLinks.add(s);
              if (s.startsWith(HTTP_PROTOCOL)) {
                continue;
              }
              String resourceUrl=dtdUrl.substring(0,dtdUrl.lastIndexOf('/') + 1) + s;
              String resourcePath;
              try {
                resourcePath=fetchOneFile(indicator,resourceUrl,project,extResourcesPath,s);
              }
 catch (              IOException e) {
                nestedException[0]=new FetchingResourceIOException(e,resourceUrl);
                break;
              }
              virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(resourcePath.replace(File.separatorChar,'/'));
              downloadedResources.add(resourcePath);
              final List<String> newLinks=extractEmbeddedFileReferences(virtualFile,contextFile,psiManager);
              for (              String u : newLinks) {
                if (!processedLinks.contains(u))                 linksToProcess.add(u);
              }
            }
          }
        }
);
      }
    }
,indicator.getModalityState());
  }
 catch (  IOException ex) {
    nestedException[0]=ex;
  }
  if (nestedException[0] != null) {
    cleanup(resourceUrls,downloadedResources);
    throw nestedException[0];
  }
}
