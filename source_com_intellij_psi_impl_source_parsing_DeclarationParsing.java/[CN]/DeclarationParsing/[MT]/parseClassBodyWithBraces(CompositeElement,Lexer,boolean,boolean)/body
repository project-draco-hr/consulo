{
  if (lexer.getTokenType() != LBRACE)   return null;
  LeafElement lbrace=(LeafElement)ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  TreeUtil.addChildren(root,lbrace);
  lexer.advance();
  final int chameleonStart=lexer.getTokenStart();
  final int state=lexer.getState();
  LeafElement rbrace=null;
  int braceCount=1;
  int chameleonEnd=chameleonStart;
  while (braceCount > 0) {
    IElementType tokenType=lexer.getTokenType();
    if (tokenType == null)     break;
    if (tokenType == LBRACE) {
      braceCount++;
    }
 else     if (tokenType == RBRACE) {
      braceCount--;
    }
    if (braceCount == 0) {
      rbrace=(LeafElement)ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    }
    chameleonEnd=lexer.getTokenEnd();
    lexer.advance();
  }
  final int context=annotationInterface ? ClassBodyParsing.ANNOTATION : isEnum ? ClassBodyParsing.ENUM : ClassBodyParsing.CLASS;
  final int bufferEnd=lexer.getBufferEnd();
  final int endOffset=rbrace != null ? chameleonEnd - 1 : bufferEnd;
  lexer.start(lexer.getBuffer(),chameleonStart,endOffset,state);
  myContext.getClassBodyParsing().parseClassBody(root,lexer,context);
  lexer.start(lexer.getBuffer(),chameleonStart,bufferEnd,state);
  if (rbrace != null) {
    TreeUtil.addChildren(root,rbrace);
    while (lexer.getTokenStart() < chameleonEnd)     lexer.advance();
  }
 else {
    TreeUtil.addChildren(root,Factory.createErrorElement(JavaErrorMessages.message("expected.rbrace")));
    while (lexer.getTokenStart() < endOffset)     lexer.advance();
  }
  return lbrace;
}
