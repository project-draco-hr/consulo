{
  LOG.assertTrue(lexer.getTokenType() == LBRACE);
  CompositeElement memberList=ASTFactory.composite(ANNOTATION_ARRAY_INITIALIZER);
  memberList.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
  lexer.advance();
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == RBRACE) {
    memberList.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    return memberList;
  }
  memberList.rawAddChildren(parseAnnotationMemberValue(lexer));
  while (true) {
    tokenType=lexer.getTokenType();
    if (tokenType == RBRACE) {
      memberList.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      return memberList;
    }
 else     if (tokenType == COMMA) {
      memberList.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      memberList.rawAddChildren(parseAnnotationMemberValue(lexer));
      if (lexer.getTokenType() == RBRACE) {
        memberList.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
        lexer.advance();
        return memberList;
      }
    }
 else {
      memberList.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbrace")));
      memberList.putUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY,"");
      return memberList;
    }
  }
}
