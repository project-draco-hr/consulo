{
  CompositeElement parmList=parseParameterList(lexer);
  method.rawAddChildren(parmList);
  while (lexer.getTokenType() == LBRACKET) {
    method.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    if (lexer.getTokenType() != RBRACKET) {
      method.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbracket")));
      break;
    }
    method.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
  TreeElement throwsList=(TreeElement)parseThrowsList(lexer);
  if (throwsList == null) {
    throwsList=ASTFactory.composite(THROWS_LIST);
  }
  method.rawAddChildren(throwsList);
  if (annotationMethod && lexer.getTokenType() == DEFAULT_KEYWORD) {
    method.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    method.rawAddChildren(parseAnnotationMemberValue(lexer));
  }
  IElementType tokenType=lexer.getTokenType();
  if (tokenType != SEMICOLON && tokenType != LBRACE) {
    CompositeElement invalidElementsGroup=Factory.createErrorElement(JavaErrorMessages.message("expected.lbrace.or.semicolon"));
    method.rawAddChildren(invalidElementsGroup);
    Loop:     while (true) {
      tokenType=lexer.getTokenType();
      final CharSequence buf=lexer.getBufferSequence();
      int start=lexer.getTokenStart();
      for (int i=start - 1; i >= 0; i--) {
        if (buf.charAt(i) == '\n')         break Loop;
        if (buf.charAt(i) != ' ' && buf.charAt(i) != '\t')         break;
      }
      if (tokenType == IDENTIFIER || tokenType == COMMA || tokenType == THROWS_KEYWORD) {
        invalidElementsGroup.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      }
 else {
        break;
      }
      lexer.advance();
    }
  }
  if (lexer.getTokenType() == SEMICOLON) {
    method.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
 else   if (lexer.getTokenType() == LBRACE) {
    TreeElement codeBlock=myContext.getStatementParsing().parseCodeBlock(lexer,false);
    method.rawAddChildren(codeBlock);
  }
}
