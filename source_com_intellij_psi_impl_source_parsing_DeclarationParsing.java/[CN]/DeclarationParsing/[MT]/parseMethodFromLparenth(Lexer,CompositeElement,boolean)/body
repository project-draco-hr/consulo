{
  CompositeElement parmList=parseParameterList(lexer);
  TreeUtil.addChildren(method,parmList);
  while (lexer.getTokenType() == LBRACKET) {
    TreeUtil.addChildren(method,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    if (lexer.getTokenType() != RBRACKET) {
      TreeUtil.addChildren(method,Factory.createErrorElement("']' expected"));
      break;
    }
    TreeUtil.addChildren(method,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
  TreeElement throwsList=(TreeElement)parseThrowsList(lexer);
  if (throwsList == null) {
    throwsList=Factory.createCompositeElement(THROWS_LIST);
  }
  TreeUtil.addChildren(method,throwsList);
  if (annotationMethod && lexer.getTokenType() == DEFAULT_KEYWORD) {
    TreeUtil.addChildren(method,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    TreeUtil.addChildren(method,parseAnnotationMemberValue(lexer));
  }
  IElementType tokenType=lexer.getTokenType();
  if (tokenType != SEMICOLON && tokenType != LBRACE) {
    CompositeElement invalidElementsGroup=Factory.createErrorElement("'{' or ';' expected");
    TreeUtil.addChildren(method,invalidElementsGroup);
    Loop:     while (true) {
      tokenType=lexer.getTokenType();
      char[] buf=lexer.getBuffer();
      int start=lexer.getTokenStart();
      for (int i=start - 1; i >= 0; i--) {
        if (buf[i] == '\n')         break Loop;
        if (buf[i] != ' ' && buf[i] != '\t')         break;
      }
      if (tokenType == IDENTIFIER || tokenType == COMMA || tokenType == THROWS_KEYWORD) {
        TreeUtil.addChildren(invalidElementsGroup,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      }
 else {
        break Loop;
      }
      lexer.advance();
    }
  }
  if (lexer.getTokenType() == SEMICOLON) {
    TreeUtil.addChildren(method,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
 else   if (lexer.getTokenType() == LBRACE) {
    TreeElement codeBlock=myContext.getStatementParsing().parseCodeBlock(lexer,false);
    TreeUtil.addChildren(method,codeBlock);
  }
}
