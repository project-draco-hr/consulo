{
  CompositeElement aClass=Factory.createCompositeElement(CLASS);
  TreeUtil.addChildren(aClass,modifierList);
  if (atToken != null) {
    TreeUtil.addChildren(aClass,atToken);
  }
  final IElementType keywordTokenType=lexer.getTokenType();
  LOG.assertTrue(CLASS_KEYWORD_BIT_SET.contains(keywordTokenType));
  final boolean isEnum=keywordTokenType == ENUM_KEYWORD;
  TreeUtil.addChildren(aClass,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
  lexer.advance();
  if (lexer.getTokenType() != IDENTIFIER) {
    TreeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.identifier"));
    TreeUtil.addChildren(aClass,errorElement);
    return aClass.getFirstChildNode();
  }
  TreeUtil.addChildren(aClass,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
  lexer.advance();
  TreeElement classParameterList=parseTypeParameterList(lexer);
  TreeUtil.addChildren(aClass,classParameterList);
  TreeElement extendsList=(TreeElement)parseExtendsList(lexer);
  if (extendsList == null) {
    extendsList=Factory.createCompositeElement(EXTENDS_LIST);
  }
  TreeUtil.addChildren(aClass,extendsList);
  TreeElement implementsList=(TreeElement)parseImplementsList(lexer);
  if (implementsList == null) {
    implementsList=Factory.createCompositeElement(IMPLEMENTS_LIST);
  }
  TreeUtil.addChildren(aClass,implementsList);
  if (lexer.getTokenType() != LBRACE) {
    CompositeElement invalidElementsGroup=Factory.createErrorElement(JavaErrorMessages.message("expected.lbrace"));
    TreeUtil.addChildren(aClass,invalidElementsGroup);
    while (true) {
      IElementType tokenType=lexer.getTokenType();
      if (tokenType == IDENTIFIER || tokenType == COMMA || tokenType == EXTENDS_KEYWORD || tokenType == IMPLEMENTS_KEYWORD) {
        TreeUtil.addChildren(invalidElementsGroup,ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      }
 else {
        break;
      }
      lexer.advance();
    }
  }
  parseClassBodyWithBraces(aClass,lexer,atToken != null,isEnum);
  return aClass;
}
