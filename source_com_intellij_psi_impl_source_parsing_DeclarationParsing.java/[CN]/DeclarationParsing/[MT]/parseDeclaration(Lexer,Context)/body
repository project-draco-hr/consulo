{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == null)   return null;
  if (tokenType == LBRACE) {
    if (context == Context.FILE_CONTEXT || context == Context.CODE_BLOCK_CONTEXT)     return null;
  }
 else   if (tokenType == IDENTIFIER || PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
    if (context == Context.FILE_CONTEXT)     return null;
  }
 else   if (tokenType instanceof IChameleonElementType) {
    LeafElement declaration=ASTFactory.leaf(tokenType,lexer.getBufferSequence(),lexer.getTokenStart(),lexer.getTokenEnd(),myContext.getCharTable());
    lexer.advance();
    return declaration;
  }
 else   if (!MODIFIER_BIT_SET.contains(tokenType) && !CLASS_KEYWORD_BIT_SET.contains(tokenType) && tokenType != AT && (context == Context.CODE_BLOCK_CONTEXT || tokenType != LT)) {
    return null;
  }
  LexerPosition startPos=lexer.getCurrentPosition();
  CompositeElement modifierList=parseModifierList(lexer);
  tokenType=lexer.getTokenType();
  if (tokenType == AT) {
    TreeElement atToken=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    tokenType=lexer.getTokenType();
    if (tokenType == INTERFACE_KEYWORD) {
      return parseClassFromKeyword(lexer,modifierList,atToken);
    }
 else {
      lexer.restore(startPos);
      return null;
    }
  }
 else   if (CLASS_KEYWORD_BIT_SET.contains(tokenType)) {
    final CompositeElement root=parseClassFromKeyword(lexer,modifierList,null);
    if (context == Context.FILE_CONTEXT) {
      boolean declsAfterEnd=false;
      while (lexer.getTokenType() != null && lexer.getTokenType() != RBRACE) {
        LexerPosition position=lexer.getCurrentPosition();
        final TreeElement element=parseDeclaration(lexer,Context.CLASS_CONTEXT);
        if (element != null && (element.getElementType() == METHOD || element.getElementType() == FIELD)) {
          if (!declsAfterEnd) {
            final CompositeElement classExpected=Factory.createErrorElement(JavaErrorMessages.message("expected.class.or.interface"));
            root.rawAddChildren(classExpected);
          }
          declsAfterEnd=true;
          root.rawAddChildren(element);
        }
 else {
          lexer.restore(position);
          break;
        }
      }
      if (declsAfterEnd) {
        expectRBrace(root,lexer);
      }
    }
    return root;
  }
  TreeElement classParameterList=null;
  if (tokenType == LT) {
    classParameterList=parseTypeParameterList(lexer);
    tokenType=lexer.getTokenType();
  }
  if (context == Context.FILE_CONTEXT) {
    final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.class.or.interface"));
    modifierList.rawInsertAfterMe(errorElement);
    if (classParameterList != null) {
      errorElement.rawInsertAfterMe(classParameterList);
    }
    return modifierList;
  }
  final TreeElement first=modifierList;
  TreeElement last=modifierList;
  TreeElement type;
  if (tokenType != null && PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
    type=parseType(lexer);
  }
 else   if (tokenType == IDENTIFIER) {
    final LexerPosition idPos=lexer.getCurrentPosition();
    type=parseType(lexer);
    if (lexer.getTokenType() == LPARENTH) {
      if (context == Context.CODE_BLOCK_CONTEXT) {
        lexer.restore(startPos);
        return null;
      }
      lexer.restore(idPos);
      CompositeElement method=ASTFactory.composite(METHOD);
      method.rawAddChildren(first);
      if (classParameterList == null) {
        classParameterList=ASTFactory.composite(TYPE_PARAMETER_LIST);
      }
      method.rawAddChildren(classParameterList);
      method.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      if (lexer.getTokenType() != LPARENTH) {
        lexer.restore(startPos);
        return null;
      }
      parseMethodFromLparenth(lexer,method,false);
      return method;
    }
  }
 else   if (tokenType == LBRACE) {
    if (context == Context.CODE_BLOCK_CONTEXT) {
      TreeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.identifier.or.type"));
      last.rawInsertAfterMe(errorElement);
      return first;
    }
    TreeElement codeBlock=myContext.getStatementParsing().parseCodeBlock(lexer,false);
    LOG.assertTrue(codeBlock != null);
    CompositeElement initializer=ASTFactory.composite(CLASS_INITIALIZER);
    initializer.rawAddChildren(modifierList);
    if (classParameterList != null) {
      final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("unexpected.token"));
      errorElement.rawAddChildren(classParameterList);
      initializer.rawAddChildren(errorElement);
    }
    initializer.rawAddChildren(codeBlock);
    return initializer;
  }
 else {
    CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.identifier.or.type"));
    if (classParameterList != null) {
      errorElement.rawAddChildren(classParameterList);
    }
    last.rawInsertAfterMe(errorElement);
    return first;
  }
  last.rawInsertAfterMe(type);
  last=type;
  if (lexer.getTokenType() != IDENTIFIER) {
    if (context == Context.CODE_BLOCK_CONTEXT && modifierList.getFirstChildNode() == null) {
      lexer.restore(startPos);
      return null;
    }
 else {
      if (classParameterList != null) {
        final CompositeElement errorElement1=Factory.createErrorElement(JavaErrorMessages.message("unexpected.token"));
        errorElement1.rawAddChildren(classParameterList);
        last.rawInsertBeforeMe(errorElement1);
      }
      TreeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("expected.identifier"));
      last.rawInsertAfterMe(errorElement);
      return first;
    }
  }
  TreeElement identifier=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  lexer.advance();
  last.rawInsertAfterMe(identifier);
  if (lexer.getTokenType() == LPARENTH) {
    if (context == Context.CLASS_CONTEXT) {
      CompositeElement method=ASTFactory.composite(METHOD);
      if (classParameterList == null) {
        classParameterList=ASTFactory.composite(TYPE_PARAMETER_LIST);
      }
      first.rawInsertAfterMe(classParameterList);
      method.rawAddChildren(first);
      parseMethodFromLparenth(lexer,method,false);
      return method;
    }
 else     if (context == Context.ANNOTATION_INTERFACE_CONTEXT) {
      CompositeElement method=ASTFactory.composite(ANNOTATION_METHOD);
      if (classParameterList == null) {
        classParameterList=ASTFactory.composite(TYPE_PARAMETER_LIST);
      }
      first.rawInsertAfterMe(classParameterList);
      method.rawAddChildren(first);
      parseMethodFromLparenth(lexer,method,true);
      return method;
    }
 else     return parseFieldOrLocalVariable(classParameterList,first,context,lexer,startPos);
  }
 else {
    return parseFieldOrLocalVariable(classParameterList,first,context,lexer,startPos);
  }
}
