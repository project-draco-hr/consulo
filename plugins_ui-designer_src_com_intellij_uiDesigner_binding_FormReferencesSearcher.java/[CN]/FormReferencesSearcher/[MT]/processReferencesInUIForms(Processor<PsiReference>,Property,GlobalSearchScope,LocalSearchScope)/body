{
  final Project project=property.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(project).intersectWith(globalSearchScope);
  final PsiManagerImpl manager=(PsiManagerImpl)property.getManager();
  String name=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    @Override public String compute(){
      return property.getName();
    }
  }
);
  if (name == null)   return true;
  manager.startBatchFilesProcessingMode();
  try {
    final List<String> words=StringUtil.getWordsIn(name);
    if (words.isEmpty())     return true;
    final Set<PsiFile> fileSet=new HashSet<PsiFile>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        PsiFile[] filesWithWord=CacheManager.SERVICE.getInstance(project).getFilesWithWord(words.get(0),UsageSearchContext.IN_PLAIN_TEXT,scope,true);
        ContainerUtil.addAll(fileSet,filesWithWord);
        for (int i=1; i < words.size(); i++) {
          ProgressManager.checkCanceled();
          String word=words.get(i);
          PsiFile[] filesWithThisWord=CacheManager.SERVICE.getInstance(project).getFilesWithWord(word,UsageSearchContext.IN_PLAIN_TEXT,scope,true);
          fileSet.retainAll(Arrays.asList(filesWithThisWord));
          if (fileSet.isEmpty())           break;
        }
      }
    }
);
    PsiFile[] files=PsiUtilCore.toPsiFileArray(fileSet);
    for (    PsiFile file : files) {
      ProgressManager.checkCanceled();
      if (file.getFileType() != StdFileTypes.GUI_DESIGNER_FORM)       continue;
      if (!processReferences(processor,file,name,property,filterScope))       return false;
    }
  }
  finally {
    manager.finishBatchFilesProcessingMode();
  }
  return true;
}
