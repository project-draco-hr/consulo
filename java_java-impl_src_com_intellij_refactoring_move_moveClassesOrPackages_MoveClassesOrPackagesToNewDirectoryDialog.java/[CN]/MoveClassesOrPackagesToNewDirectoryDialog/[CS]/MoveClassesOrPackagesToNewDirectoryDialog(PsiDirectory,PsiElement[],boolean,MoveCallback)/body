{
  super(false);
  setTitle(MoveHandler.REFACTORING_NAME);
  myRootPanel.setBorder(IdeBorderFactory.createRoundedBorder());
  myDirectory=directory;
  myElementsToMove=elementsToMove;
  myMoveCallback=moveCallback;
  myDestDirectoryField.setText(FileUtil.toSystemDependentName(directory.getVirtualFile().getPath()));
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  myDestDirectoryField.getButton().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final VirtualFile file=FileChooser.chooseFile(myDirectory.getProject(),descriptor,directory.getVirtualFile());
      if (file != null) {
        myDestDirectoryField.setText(FileUtil.toSystemDependentName(file.getPath()));
      }
    }
  }
);
  if (elementsToMove.length == 1) {
    PsiElement firstElement=elementsToMove[0];
    myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label",UsageViewUtil.getType(firstElement),UsageViewUtil.getLongName(firstElement)));
  }
 else   if (elementsToMove.length > 1) {
    myNameLabel.setText(elementsToMove[0] instanceof PsiClass ? RefactoringBundle.message("move.specified.classes") : RefactoringBundle.message("move.specified.packages"));
  }
  final JavaRefactoringSettings refactoringSettings=JavaRefactoringSettings.getInstance();
  mySearchInCommentsAndStringsCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_IN_COMMENTS);
  mySearchForTextOccurrencesCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_FOR_TEXT);
  myDestDirectoryField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      setOKActionEnabled(myDestDirectoryField.getText().length() > 0);
    }
  }
);
  if (canShowPreserveSourceRoots) {
    final Set<VirtualFile> sourceRoots=new HashSet<VirtualFile>();
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(directory.getProject()).getFileIndex();
    for (    PsiElement element : elementsToMove) {
      if (element instanceof PsiPackage) {
        for (        PsiDirectory psiDirectory : ((PsiPackage)element).getDirectories()) {
          sourceRoots.add(fileIndex.getSourceRootForFile(psiDirectory.getVirtualFile()));
        }
      }
 else       if (element instanceof PsiClass) {
        final PsiDirectory psiDirectory=element.getContainingFile().getContainingDirectory();
        LOG.assertTrue(psiDirectory != null);
        if (psiDirectory != null) {
          sourceRoots.add(psiDirectory.getVirtualFile());
        }
      }
    }
    myPreserveSourceRoot.setVisible(sourceRoots.size() > 1);
  }
  init();
}
