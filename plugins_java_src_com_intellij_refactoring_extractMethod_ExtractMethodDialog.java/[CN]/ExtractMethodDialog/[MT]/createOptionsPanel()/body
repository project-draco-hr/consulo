{
  final JPanel optionsPanel=new JPanel(new FlowLayout(FlowLayout.LEFT,0,5));
  if (myStaticFlag || myCanBeStatic) {
    myMakeStatic.setEnabled(!myStaticFlag);
    myMakeStatic.setSelected(myStaticFlag);
    myMakeStatic.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        updateSignature();
      }
    }
);
    optionsPanel.add(myMakeStatic);
  }
 else {
    myMakeStatic.setSelected(false);
    myMakeStatic.setEnabled(false);
  }
  final Border emptyBorder=IdeBorderFactory.createEmptyBorder(5,0,5,4);
  myMakeStatic.setBorder(emptyBorder);
  myFoldParameters.setSelected(myVariableData.isFoldingSelectedByDefault());
  myFoldParameters.setVisible(myVariableData.isFoldable());
  myVariableData.setFoldingAvailable(myFoldParameters.isSelected());
  myInputVariables=myVariableData.getInputVariables().toArray(new ParameterTablePanel.VariableData[myVariableData.getInputVariables().size()]);
  myFoldParameters.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myVariableData.setFoldingAvailable(myFoldParameters.isSelected());
      myInputVariables=myVariableData.getInputVariables().toArray(new ParameterTablePanel.VariableData[myVariableData.getInputVariables().size()]);
      updateVarargsEnabled();
      createParametersPanel();
      updateSignature();
    }
  }
);
  optionsPanel.add(myFoldParameters);
  myFoldParameters.setBorder(emptyBorder);
  boolean canBeVarargs=false;
  for (  ParameterTablePanel.VariableData data : myInputVariables) {
    canBeVarargs|=data.type instanceof PsiArrayType;
  }
  if (myVariableData.isFoldable()) {
    canBeVarargs|=myVariableData.isFoldingSelectedByDefault();
  }
  if (canBeVarargs) {
    myMakeVarargs=new NonFocusableCheckBox(RefactoringBundle.message("declare.varargs.checkbox"));
    myMakeVarargs.setBorder(emptyBorder);
    updateVarargsEnabled();
    myMakeVarargs.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        updateSignature();
      }
    }
);
    myMakeVarargs.setSelected(false);
    optionsPanel.add(myMakeVarargs);
  }
  if (myCbChainedConstructor != null) {
    optionsPanel.add(myCbChainedConstructor);
    myCbChainedConstructor.setBorder(emptyBorder);
    myCbChainedConstructor.addItemListener(new ItemListener(){
      public void itemStateChanged(      final ItemEvent e){
        if (myDefaultVisibility) {
          myChangingVisibility=true;
          try {
            if (isChainedConstructor()) {
              myVisibilityPanel.setVisibility(VisibilityUtil.getVisibilityModifier(myTargetClass.getModifierList()));
            }
 else {
              myVisibilityPanel.setVisibility(PsiModifier.PRIVATE);
            }
          }
  finally {
            myChangingVisibility=false;
          }
        }
        update();
      }
    }
);
  }
  return optionsPanel;
}
