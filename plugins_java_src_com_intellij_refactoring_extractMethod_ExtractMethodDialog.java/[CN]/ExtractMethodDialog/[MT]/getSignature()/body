{
  final @NonNls StringBuilder buffer=new StringBuilder();
  final String visibilityString=VisibilityUtil.getVisibilityString(myVisibilityPanel.getVisibility());
  buffer.append(visibilityString);
  if (buffer.length() > 0) {
    buffer.append(" ");
  }
  if (isMakeStatic() && !isChainedConstructor()) {
    buffer.append("static ");
  }
  if (myTypeParameterList != null) {
    final String typeParamsText=myTypeParameterList.getText();
    if (!typeParamsText.isEmpty()) {
      buffer.append(typeParamsText);
      buffer.append(" ");
    }
  }
  if (isChainedConstructor()) {
    buffer.append(myTargetClass.getName());
  }
 else {
    buffer.append(PsiFormatUtil.formatType(myReturnType,0,PsiSubstitutor.EMPTY));
    buffer.append(" ");
    buffer.append(myNameField.getText());
  }
  buffer.append("(");
  final String INDENT=StringUtil.repeatSymbol(' ',buffer.length());
  final ParameterTablePanel.VariableData[] datas=myInputVariables;
  int count=0;
  for (int i=0; i < datas.length; i++) {
    ParameterTablePanel.VariableData data=datas[i];
    if (data.passAsParameter) {
      PsiType type=data.type;
      if (i == datas.length - 1 && type instanceof PsiArrayType && myMakeVarargs != null && myMakeVarargs.isSelected()) {
        type=new PsiEllipsisType(((PsiArrayType)type).getComponentType());
      }
      String typeText=type.getPresentableText();
      if (count > 0) {
        buffer.append(",\n");
        buffer.append(INDENT);
      }
      buffer.append(typeText);
      buffer.append(" ");
      buffer.append(data.name);
      count++;
    }
  }
  buffer.append(")");
  if (myExceptions.length > 0) {
    buffer.append("\n");
    buffer.append("throws\n");
    for (    PsiType exception : myExceptions) {
      buffer.append(INDENT);
      buffer.append(PsiFormatUtil.formatType(exception,0,PsiSubstitutor.EMPTY));
      buffer.append("\n");
    }
  }
  return buffer.toString();
}
