{
  final QuickFix fix=getTool().getQuickFix(hint);
  if (fix != null) {
    if (problemDescriptor instanceof ProblemDescriptor) {
      final ProblemDescriptor descriptor=new ProblemDescriptorImpl(((ProblemDescriptor)problemDescriptor).getStartElement(),((ProblemDescriptor)problemDescriptor).getEndElement(),problemDescriptor.getDescriptionTemplate(),new LocalQuickFix[]{(LocalQuickFix)fix},ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false,null,false);
      return QuickFixWrapper.wrap(descriptor,0);
    }
 else {
      return new IntentionAction(){
        @Override @NotNull public String getText(){
          return fix.getName();
        }
        @Override @NotNull public String getFamilyName(){
          return fix.getFamilyName();
        }
        @Override public boolean isAvailable(        @NotNull Project project,        Editor editor,        PsiFile file){
          return true;
        }
        @Override public void invoke(        @NotNull Project project,        Editor editor,        PsiFile file) throws IncorrectOperationException {
          fix.applyFix(project,problemDescriptor);
        }
        @Override public boolean startInWriteAction(){
          return true;
        }
      }
;
    }
  }
  return null;
}
