{
  if (session.isProperType(myT) && session.isProperType(myS)) {
    return TypeConversionUtil.isAssignable(myS,myT);
  }
  if (myS instanceof PsiPrimitiveType) {
    final PsiClassType boxedType=((PsiPrimitiveType)myS).getBoxedType(session.getManager(),session.getScope());
    if (boxedType != null) {
      constraints.add(new TypeCompatibilityConstraint(myT,boxedType));
      return true;
    }
  }
  if (myT instanceof PsiPrimitiveType) {
    final PsiClassType boxedType=((PsiPrimitiveType)myT).getBoxedType(session.getManager(),session.getScope());
    if (boxedType != null) {
      constraints.add(new TypeCompatibilityConstraint(boxedType,myS));
      return true;
    }
  }
  constraints.add(new SubtypingConstraint(myT,myS,true));
  return true;
}
