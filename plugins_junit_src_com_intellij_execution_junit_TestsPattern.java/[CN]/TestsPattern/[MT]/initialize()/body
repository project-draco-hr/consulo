{
  super.initialize();
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  final Project project=myConfiguration.getProject();
  boolean isJUnit4=false;
  final ArrayList<String> classNames=new ArrayList<String>();
  final Set<Module> modules=new HashSet<Module>();
  for (  String className : data.getPatterns()) {
    final PsiClass psiClass=JavaExecutionUtil.findMainClass(project,className.contains(",") ? className.substring(0,className.indexOf(',')) : className,GlobalSearchScope.allScope(project));
    if (psiClass != null && JUnitUtil.isTestClass(psiClass)) {
      classNames.add(className);
      modules.add(ModuleUtil.findModuleForPsiElement(psiClass));
      if (JUnitUtil.isJUnit4TestClass(psiClass)) {
        isJUnit4=true;
      }
    }
  }
  final String jreHome=myConfiguration.isAlternativeJrePathEnabled() ? myConfiguration.getAlternativeJrePath() : null;
  Module module=myConfiguration.getConfigurationModule().getModule();
  if (module == null && modules.size() == 1 && modules.iterator().next() != null) {
    module=modules.iterator().next();
  }
  if (module != null) {
    JavaParametersUtil.configureModule(module,myJavaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,jreHome);
  }
 else {
    JavaParametersUtil.configureProject(project,myJavaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,jreHome);
  }
  addClassesListToJavaParameters(classNames,StringUtil.isEmpty(data.METHOD_NAME) ? FunctionUtil.<String>id() : new Function<String,String>(){
    @Override public String fun(    String className){
      return className;
    }
  }
,"",true,isJUnit4);
}
