{
  final UpdatedFiles updatedFiles=UpdatedFiles.create();
  final HgMergeCommand hgMergeCommand=new HgMergeCommand(myProject,mySelectedRepository.getRoot());
  hgMergeCommand.setBranch(myBranchName);
  final HgCommandResultNotifier notifier=new HgCommandResultNotifier(myProject);
  new Task.Backgroundable(myProject,"Merging changes..."){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        new HgHeadMerger(myProject,hgMergeCommand).merge(mySelectedRepository.getRoot(),updatedFiles,HgRevisionNumber.NULL_REVISION_NUMBER);
        new HgConflictResolver(myProject,updatedFiles).resolve(mySelectedRepository.getRoot());
      }
 catch (      VcsException exception) {
        if (exception.isWarning()) {
          notifier.notifyWarning("Warning during merge",exception.getMessage());
        }
 else {
          notifier.notifyError(null,"Exception during merge",exception.getMessage());
        }
      }
catch (      Exception e1) {
        HgAbstractGlobalAction.handleException(myProject,e1);
      }
    }
  }
.queue();
}
