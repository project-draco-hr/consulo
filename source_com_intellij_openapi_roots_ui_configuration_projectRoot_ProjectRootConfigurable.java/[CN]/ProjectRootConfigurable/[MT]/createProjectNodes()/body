{
  myModulesNode=new MyNode(new ModulesConfigurable(myModuleManager),true);
  final Map<ModuleGroup,MyNode> moduleGroup2NodeMap=new HashMap<ModuleGroup,MyNode>();
  final Module[] modules=myModuleManager.getModules();
  for (  final Module module : modules) {
    ModuleConfigurable configurable=new ModuleConfigurable(myModulesConfigurator,module,TREE_UPDATER);
    final MyNode moduleNode=new MyNode(configurable);
    createModuleLibraries(module,moduleNode);
    myFacetEditorFacade.addFacetsNodes(module,moduleNode);
    final String[] groupPath=myPlainMode ? null : myModulesConfigurator.getModuleModel().getModuleGroupPath(module);
    if (groupPath == null || groupPath.length == 0) {
      addNode(moduleNode,myModulesNode);
    }
 else {
      final MyNode moduleGroupNode=ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath),myModulesNode,moduleGroup2NodeMap,new Consumer<ModuleGroupUtil.ParentChildRelation<MyNode>>(){
        public void consume(        final ModuleGroupUtil.ParentChildRelation<MyNode> parentChildRelation){
          addNode(parentChildRelation.getChild(),parentChildRelation.getParent());
        }
      }
,new Function<ModuleGroup,MyNode>(){
        public MyNode fun(        final ModuleGroup moduleGroup){
          final NamedConfigurable moduleGroupConfigurable=new ModuleGroupConfigurable(moduleGroup);
          return new MyNode(moduleGroupConfigurable,true);
        }
      }
);
      addNode(moduleNode,moduleGroupNode);
    }
  }
  if (!myProject.isDefault()) {
    myProjectNode.add(myModulesNode);
  }
  final LibraryTable table=LibraryTablesRegistrar.getInstance().getLibraryTable(myProject);
  final LibrariesModifiableModel projectLibrariesProvider=new LibrariesModifiableModel(table);
  myLevel2Providers.put(LibraryTablesRegistrar.PROJECT_LEVEL,projectLibrariesProvider);
  myProjectNode.add(myLevel2Nodes.get(LibraryTablesRegistrar.PROJECT_LEVEL));
}
