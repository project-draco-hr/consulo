{
  final LibraryTableModifiableModelProvider libraryTableModelProvider=new LibraryTableModifiableModelProvider(){
    public LibraryTable.ModifiableModel getModifiableModel(){
      return myModule2LibrariesMap.get(module);
    }
    public String getTableLevel(){
      return LibraryTableImplUtil.MODULE_LEVEL;
    }
    public LibraryTablePresentation getLibraryTablePresentation(){
      return ModuleLibraryTable.MODULE_LIBRARY_TABLE_PRESENTATION;
    }
    public boolean isLibraryTableEditable(){
      return true;
    }
  }
;
  final ModuleEditor moduleEditor=myModulesConfigurator.getModuleEditor(module);
  LOG.assertTrue(moduleEditor != null,"Module editor was not created");
  final OrderEntry[] entries=moduleEditor.getModifiableRootModel().getOrderEntries();
  for (  OrderEntry entry : entries) {
    if (entry instanceof LibraryOrderEntry) {
      final LibraryOrderEntry orderEntry=(LibraryOrderEntry)entry;
      if (orderEntry.isModuleLevel()) {
        final Library library=orderEntry.getLibrary();
        if (library != null) {
          if (orderEntry.getPresentableName() == null)           continue;
          final LibraryConfigurable libraryConfigurable=new LibraryConfigurable(libraryTableModelProvider,library,truncateModuleLibraryName(orderEntry),myProject,TREE_UPDATER);
          addNode(new MyNode(libraryConfigurable),moduleNode);
        }
      }
    }
  }
}
