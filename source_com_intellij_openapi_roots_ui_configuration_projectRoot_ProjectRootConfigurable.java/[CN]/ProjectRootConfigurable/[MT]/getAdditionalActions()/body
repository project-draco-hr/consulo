{
  final ArrayList<AnAction> result=new ArrayList<AnAction>();
  result.add(new MyRenameAction(){
    @Nullable protected String getRenameTitleSuffix(){
      final Object selectedObject=getSelectedObject();
      if (selectedObject instanceof Module) {
        return ProjectBundle.message("add.new.module.text");
      }
 else       if (selectedObject instanceof Library) {
        return ProjectBundle.message("add.new.library.text");
      }
 else       if (selectedObject instanceof ProjectJdk) {
        return ProjectBundle.message("add.new.jdk.text");
      }
      return null;
    }
  }
);
  final AnAction findUsages=new AnAction(ProjectBundle.message("find.usages.action.text")){
    public void update(    AnActionEvent e){
      final Presentation presentation=e.getPresentation();
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        final MyNode node=(MyNode)selectionPath.getLastPathComponent();
        presentation.setEnabled(!node.isDisplayInBold());
      }
 else {
        presentation.setEnabled(false);
      }
    }
    public void actionPerformed(    AnActionEvent e){
      showDependencies();
    }
  }
;
  findUsages.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_USAGES).getShortcutSet(),myTree);
  result.add(findUsages);
  result.add(ActionManager.getInstance().getAction(IdeActions.GROUP_MOVE_MODULE_TO_GROUP));
  return result;
}
