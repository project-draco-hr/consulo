{
  final Set<MyNode> roots=new HashSet<MyNode>();
  roots.add(myModulesNode);
  if (!canApply(roots,ProjectBundle.message("rename.message.prefix.module"),ProjectBundle.message("rename.module.title")))   return;
  boolean modifiedJdks=false;
  for (int i=0; i < myJdksNode.getChildCount(); i++) {
    final NamedConfigurable configurable=((MyNode)myJdksNode.getChildAt(i)).getConfigurable();
    if (configurable.isModified()) {
      configurable.apply();
      modifiedJdks=true;
    }
  }
  if (myJdksTreeModel.isModified() || modifiedJdks)   myJdksTreeModel.apply(this);
  myJdksTreeModel.setProjectJdk(ProjectRootManager.getInstance(myProject).getProjectJdk());
  if (isInitialized(myProjectConfigurable) && myProjectConfigurable.isModified())   myProjectConfigurable.apply();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      for (      final LibrariesModifiableModel provider : myLevel2Providers.values()) {
        provider.deferredCommit();
      }
    }
  }
);
  if (myModulesConfigurator.isModified())   myModulesConfigurator.apply();
  myUpdateDependenciesAlarm.cancelAllRequests();
  myUpdateDependenciesAlarm.addRequest(new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (myDisposed)           return;
          dispose();
          reset();
        }
      }
);
    }
  }
,0);
}
