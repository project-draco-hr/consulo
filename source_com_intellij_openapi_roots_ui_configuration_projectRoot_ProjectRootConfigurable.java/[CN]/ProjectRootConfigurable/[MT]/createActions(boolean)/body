{
  final ArrayList<AnAction> result=new ArrayList<AnAction>();
  result.add(new MyAddAction(fromPopup));
  result.add(new MyRemoveAction(new Condition<Object>(){
    public boolean value(    final Object object){
      if (object instanceof MyNode) {
        final NamedConfigurable namedConfigurable=((MyNode)object).getConfigurable();
        final Object editableObject=namedConfigurable.getEditableObject();
        if (editableObject instanceof ProjectJdk || editableObject instanceof Module)         return true;
        if (editableObject instanceof Library) {
          final LibraryTable table=((Library)editableObject).getTable();
          return table == null || !ApplicationServersManager.APPLICATION_SERVER_MODULE_LIBRARIES.equals(table.getTableLevel());
        }
      }
      return false;
    }
  }
));
  final AnAction findUsages=new AnAction(ProjectBundle.message("find.usages.action.text"),ProjectBundle.message("find.usages.action.text"),FIND_ICON){
    public void update(    AnActionEvent e){
      final Presentation presentation=e.getPresentation();
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        final MyNode node=(MyNode)selectionPath.getLastPathComponent();
        presentation.setEnabled(!node.isDisplayInBold());
      }
 else {
        presentation.setEnabled(false);
      }
    }
    public void actionPerformed(    AnActionEvent e){
      showDependencies();
    }
  }
;
  findUsages.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_USAGES).getShortcutSet(),myTree);
  result.add(findUsages);
  result.add(new MyGroupAction());
  final TreeExpander expander=new TreeExpander(){
    public void expandAll(){
      TreeUtil.expandAll(myTree);
    }
    public boolean canExpand(){
      return true;
    }
    public void collapseAll(){
      TreeUtil.collapseAll(myTree,0);
    }
    public boolean canCollapse(){
      return true;
    }
  }
;
  final CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  result.add(actionsManager.createExpandAllAction(expander));
  result.add(actionsManager.createCollapseAllAction(expander));
  return result;
}
