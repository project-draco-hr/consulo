{
  super.initTree();
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    final TreePath treePath){
      return ((MyNode)treePath.getLastPathComponent()).getDisplayName();
    }
  }
,true);
  TreeToolTipHandler.install(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof MyNode) {
        final MyNode node=((MyNode)value);
        final String displayName=node.getDisplayName();
        final Icon icon=node.getConfigurable().getIcon();
        setIcon(icon);
        setToolTipText(null);
        if (node.isDisplayInBold()) {
          append(displayName,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
        }
 else {
          final Object object=node.getConfigurable().getEditableObject();
          if (isUnused(object,node)) {
            append(displayName,SimpleTextAttributes.GRAYED_ATTRIBUTES);
            setToolTipText(ProjectBundle.message("project.root.unused.tooltip",displayName));
          }
 else           if (isInvalid(object)) {
            append(displayName,new SimpleTextAttributes(SimpleTextAttributes.STYLE_WAVED,selected && hasFocus ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeForeground(),Color.red));
            setToolTipText(ProjectBundle.message("project.root.misconfigured.tooltip",displayName));
          }
 else {
            append(displayName,selected && hasFocus ? SimpleTextAttributes.SELECTED_SIMPLE_CELL_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
      }
    }
  }
);
}
