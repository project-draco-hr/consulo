{
  if (selectedObject instanceof Library) {
    final Library library=(Library)selectedObject;
    if (myLibraryDependencyCache.containsKey(library)) {
      return myLibraryDependencyCache.get(library);
    }
  }
 else   if (selectedObject instanceof ProjectJdk) {
    final ProjectJdk projectJdk=(ProjectJdk)selectedObject;
    if (myJdkDependencyCache.containsKey(projectJdk)) {
      return myJdkDependencyCache.get(projectJdk);
    }
  }
  final Computable<Set<String>> dependencies=new Computable<Set<String>>(){
    public Set<String> compute(){
      final Set<String> dependencies=getDependencies(selectedObject,selectedNode);
      if (selectedObject instanceof Library) {
        myLibraryDependencyCache.put((Library)selectedObject,dependencies);
      }
 else       if (selectedObject instanceof ProjectJdk) {
        final ProjectJdk projectJdk=(ProjectJdk)selectedObject;
        myJdkDependencyCache.put(projectJdk,dependencies);
      }
      return dependencies;
    }
  }
;
  if (force) {
    return dependencies.compute();
  }
 else {
    myUpdateDependenciesAlarm.addRequest(new Runnable(){
      public void run(){
        final Set<String> dep=dependencies.compute();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            if (dep != null && dep.size() == 0 && !myDisposed) {
              myTree.repaint();
            }
          }
        }
);
      }
    }
,0);
    return null;
  }
}
