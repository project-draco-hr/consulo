{
  final MyNode node=(MyNode)selectionPath.getLastPathComponent();
  final NamedConfigurable configurable=node.getConfigurable();
  final Object editableObject=configurable.getEditableObject();
  if (editableObject instanceof ProjectJdk) {
    final ProjectJdk jdk=(ProjectJdk)editableObject;
    myJdksTreeModel.removeJdk(jdk);
    invalidateModules(myJdkDependencyCache.get(jdk));
    myJdkDependencyCache.remove(jdk);
  }
 else   if (editableObject instanceof Module) {
    final Module module=(Module)editableObject;
    if (!myModulesConfigurator.deleteModule(module)) {
      return false;
    }
    myValidityCache.remove(module);
    invalidateModules(myModulesDependencyCache.get(module));
    myModulesDependencyCache.remove(module);
  }
 else   if (editableObject instanceof Library) {
    final Library library=(Library)editableObject;
    final LibraryTable table=library.getTable();
    if (table != null) {
      final String level=table.getTableLevel();
      if (level == LibraryTablesRegistrar.APPLICATION_LEVEL) {
        myGlobalLibrariesProvider.removeLibrary(library);
      }
 else       if (level == LibraryTablesRegistrar.PROJECT_LEVEL) {
        myProjectLibrariesProvider.removeLibrary(library);
      }
 else {
        myApplicationServerLibrariesProvider.removeLibrary(library);
      }
      invalidateModules(myLibraryDependencyCache.get(library));
      myLibraryDependencyCache.remove(library);
    }
 else {
      Module module=(Module)((MyNode)node.getParent()).getConfigurable().getEditableObject();
      myModule2LibrariesMap.get(module).removeLibrary(library);
      myModulesConfigurator.getModuleEditor(module).updateOrderEntriesInEditors();
    }
  }
  return true;
}
