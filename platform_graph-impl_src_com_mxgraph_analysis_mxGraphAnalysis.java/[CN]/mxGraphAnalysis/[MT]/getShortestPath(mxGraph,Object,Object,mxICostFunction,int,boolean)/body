{
  mxGraphView view=graph.getView();
  mxFibonacciHeap q=createPriorityQueue();
  Hashtable<Object,Object> pred=new Hashtable<Object,Object>();
  q.decreaseKey(q.getNode(from,true),0);
  for (int j=0; j < steps; j++) {
    mxFibonacciHeap.Node node=q.removeMin();
    double prio=node.getKey();
    Object obj=node.getUserObject();
    if (obj == to) {
      break;
    }
    Object[] e=(directed) ? graph.getOutgoingEdges(obj) : graph.getConnections(obj);
    if (e != null) {
      for (int i=0; i < e.length; i++) {
        Object[] opp=graph.getOpposites(new Object[]{e[i]},obj);
        if (opp != null && opp.length > 0) {
          Object neighbour=opp[0];
          if (neighbour != null && neighbour != obj && neighbour != from) {
            double newPrio=prio + ((cf != null) ? cf.getCost(view.getState(e[i])) : 1);
            node=q.getNode(neighbour,true);
            double oldPrio=node.getKey();
            if (newPrio < oldPrio) {
              pred.put(neighbour,e[i]);
              q.decreaseKey(node,newPrio);
            }
          }
        }
      }
    }
    if (q.isEmpty()) {
      break;
    }
  }
  ArrayList<Object> list=new ArrayList<Object>(2 * steps);
  Object obj=to;
  Object edge=pred.get(obj);
  if (edge != null) {
    list.add(obj);
    while (edge != null) {
      list.add(0,edge);
      mxCellState state=view.getState(edge);
      Object source=(state != null) ? state.getVisibleTerminal(true) : view.getVisibleTerminal(edge,true);
      boolean isSource=source == obj;
      obj=(state != null) ? state.getVisibleTerminal(!isSource) : view.getVisibleTerminal(edge,!isSource);
      list.add(0,obj);
      edge=pred.get(obj);
    }
  }
  return list.toArray();
}
