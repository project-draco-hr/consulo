{
  ArrayList<Object> mst=new ArrayList<Object>(v.length);
  mxFibonacciHeap q=createPriorityQueue();
  Hashtable<Object,Object> pred=new Hashtable<Object,Object>();
  Object u=v[0];
  q.decreaseKey(q.getNode(u,true),0);
  for (int i=1; i < v.length; i++) {
    q.getNode(v[i],true);
  }
  while (!q.isEmpty()) {
    mxFibonacciHeap.Node node=q.removeMin();
    u=node.getUserObject();
    Object edge=pred.get(u);
    if (edge != null) {
      mst.add(edge);
    }
    Object[] e=(directed) ? graph.getOutgoingEdges(u) : graph.getConnections(u);
    Object[] opp=graph.getOpposites(e,u);
    if (e != null) {
      for (int i=0; i < e.length; i++) {
        Object neighbour=opp[i];
        if (neighbour != null && neighbour != u) {
          node=q.getNode(neighbour,false);
          if (node != null) {
            double newPrio=cf.getCost(graph.getView().getState(e[i]));
            double oldPrio=node.getKey();
            if (newPrio < oldPrio) {
              pred.put(neighbour,e[i]);
              q.decreaseKey(node,newPrio);
            }
          }
        }
      }
    }
  }
  return mst.toArray();
}
