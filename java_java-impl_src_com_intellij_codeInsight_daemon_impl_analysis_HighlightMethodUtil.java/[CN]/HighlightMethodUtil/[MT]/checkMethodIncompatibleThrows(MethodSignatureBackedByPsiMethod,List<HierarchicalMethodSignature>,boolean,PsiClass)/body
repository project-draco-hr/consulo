{
  PsiMethod method=methodSignature.getMethod();
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return null;
  PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,analyzedClass,PsiSubstitutor.EMPTY);
  PsiClassType[] exceptions=method.getThrowsList().getReferencedTypes();
  PsiJavaCodeReferenceElement[] referenceElements;
  List<PsiElement> exceptionContexts;
  if (includeRealPositionInfo) {
    exceptionContexts=new ArrayList<PsiElement>();
    referenceElements=method.getThrowsList().getReferenceElements();
  }
 else {
    exceptionContexts=null;
    referenceElements=null;
  }
  List<PsiClassType> checkedExceptions=new ArrayList<PsiClassType>();
  for (int i=0; i < exceptions.length; i++) {
    PsiClassType exception=exceptions[i];
    if (!ExceptionUtil.isUncheckedException(exception)) {
      checkedExceptions.add(exception);
      if (includeRealPositionInfo && i < referenceElements.length) {
        PsiJavaCodeReferenceElement exceptionRef=referenceElements[i];
        exceptionContexts.add(exceptionRef);
      }
    }
  }
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    int index=getExtraExceptionNum(methodSignature,superMethodSignature,checkedExceptions,superSubstitutor);
    if (index != -1) {
      PsiClassType exception=checkedExceptions.get(index);
      String message=JavaErrorMessages.message("overridden.method.does.not.throw",createClashMethodMessage(method,superMethod,true),HighlightUtil.formatType(exception));
      TextRange textRange;
      if (includeRealPositionInfo) {
        PsiElement exceptionContext=exceptionContexts.get(index);
        textRange=exceptionContext.getTextRange();
      }
 else {
        textRange=TextRange.EMPTY_RANGE;
      }
      HighlightInfo errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
      QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createMethodThrowsFix(method,exception,false,false));
      QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createMethodThrowsFix(superMethod,exception,true,true));
      return errorResult;
    }
  }
  return null;
}
