{
  PsiExpressionList list=constructorCall.getArgumentList();
  if (list == null)   return;
  PsiClass aClass=typeResolveResult.getElement();
  if (aClass == null)   return;
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(holder.getProject()).getResolveHelper();
  PsiClass accessObjectClass=null;
  if (constructorCall instanceof PsiNewExpression) {
    PsiExpression qualifier=((PsiNewExpression)constructorCall).getQualifier();
    if (qualifier != null) {
      accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
    }
  }
  if (classReference != null && !resolveHelper.isAccessible(aClass,constructorCall,accessObjectClass)) {
    String description=HighlightUtil.buildProblemWithAccessDescription(classReference,typeResolveResult);
    PsiElement element=classReference.getReferenceNameElement();
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    HighlightUtil.registerAccessQuickFixAction(aClass,classReference,info,null);
    holder.add(info);
    return;
  }
  PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0) {
    if (list.getExpressions().length != 0) {
      String constructorName=aClass.getName();
      String argTypes=buildArgTypesList(list);
      String description=JavaErrorMessages.message("wrong.constructor.arguments",constructorName + "()",argTypes);
      String tooltip=createMismatchedArgumentsHtmlTooltip(list,PsiParameter.EMPTY_ARRAY,constructorName,PsiSubstitutor.EMPTY,aClass);
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(list).description(description).escapedToolTip(tooltip).navigationShift(+1).create();
      QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall));
      if (classReference != null) {
        ConstructorParametersFixer.registerFixActions(classReference,constructorCall,info,getFixRange(list));
      }
      holder.add(info);
      return;
    }
    if (classReference != null && aClass.hasModifierProperty(PsiModifier.PROTECTED) && callingProtectedConstructorFromDerivedClass(constructorCall,aClass)) {
      holder.add(buildAccessProblem(classReference,typeResolveResult,aClass));
    }
 else     if (aClass.isInterface() && constructorCall instanceof PsiNewExpression) {
      final PsiReferenceParameterList typeArgumentList=((PsiNewExpression)constructorCall).getTypeArgumentList();
      if (typeArgumentList.getTypeArguments().length > 0) {
        holder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeArgumentList).descriptionAndTooltip("Anonymous class implements interface; cannot have type arguments").create());
      }
    }
  }
 else {
    PsiElement place=list;
    if (constructorCall instanceof PsiNewExpression) {
      final PsiAnonymousClass anonymousClass=((PsiNewExpression)constructorCall).getAnonymousClass();
      if (anonymousClass != null)       place=anonymousClass;
    }
    JavaResolveResult[] results=resolveHelper.multiResolveConstructor((PsiClassType)type,list,place);
    MethodCandidateInfo result=null;
    if (results.length == 1)     result=(MethodCandidateInfo)results[0];
    PsiMethod constructor=result == null ? null : result.getElement();
    boolean applicable=true;
    try {
      applicable=constructor != null && result.isApplicable();
    }
 catch (    IndexNotReadyException e) {
    }
    if (constructor == null) {
      String name=aClass.getName();
      name+=buildArgTypesList(list);
      String description=JavaErrorMessages.message("cannot.resolve.constructor",name);
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(list).descriptionAndTooltip(description).navigationShift(+1).create();
      QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall));
      if (classReference != null) {
        ConstructorParametersFixer.registerFixActions(classReference,constructorCall,info,getFixRange(list));
        PermuteArgumentsFix.registerFix(info,constructorCall,toMethodCandidates(results),getFixRange(list));
      }
      WrapExpressionFix.registerWrapAction(results,list.getExpressions(),info);
      holder.add(info);
      ChangeStringLiteralToCharInMethodCallFix.registerFixes(constructors,constructorCall,info);
    }
 else {
      if (classReference != null && (!result.isAccessible() || constructor.hasModifierProperty(PsiModifier.PROTECTED) && callingProtectedConstructorFromDerivedClass(constructorCall,aClass))) {
        holder.add(buildAccessProblem(classReference,result,constructor));
      }
 else       if (!applicable) {
        String constructorName=HighlightMessageUtil.getSymbolName(constructor,result.getSubstitutor());
        String containerName=HighlightMessageUtil.getSymbolName(constructor.getContainingClass(),result.getSubstitutor());
        String argTypes=buildArgTypesList(list);
        String description=JavaErrorMessages.message("wrong.method.arguments",constructorName,containerName,argTypes);
        String toolTip=createMismatchedArgumentsHtmlTooltip(result,list);
        PsiElement infoElement=list.getTextLength() > 0 ? list : constructorCall;
        HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(infoElement).description(description).escapedToolTip(toolTip).navigationShift(+1).create();
        if (info != null) {
          QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall));
          if (classReference != null) {
            ConstructorParametersFixer.registerFixActions(classReference,constructorCall,info,getFixRange(infoElement));
            ChangeMethodSignatureFromUsageFix.registerIntentions(results,list,info,null);
            ChangeTypeArgumentsFix.registerIntentions(results,list,info,aClass);
            ConvertDoubleToFloatFix.registerIntentions(results,list,info,null);
            PermuteArgumentsFix.registerFix(info,constructorCall,toMethodCandidates(results),getFixRange(list));
            ChangeParameterClassFix.registerQuickFixActions(constructorCall,list,info);
            QuickFixAction.registerQuickFixAction(info,getFixRange(list),new SurroundWithArrayFix(constructorCall));
          }
          holder.add(info);
          ChangeStringLiteralToCharInMethodCallFix.registerFixes(constructors,constructorCall,info);
        }
      }
 else {
        if (constructorCall instanceof PsiNewExpression) {
          HighlightInfo highlightInfo=GenericsHighlightUtil.checkReferenceTypeArgumentList(constructor,((PsiNewExpression)constructorCall).getTypeArgumentList(),result.getSubstitutor(),false);
          if (highlightInfo != null) {
            holder.add(highlightInfo);
          }
        }
      }
    }
  }
}
