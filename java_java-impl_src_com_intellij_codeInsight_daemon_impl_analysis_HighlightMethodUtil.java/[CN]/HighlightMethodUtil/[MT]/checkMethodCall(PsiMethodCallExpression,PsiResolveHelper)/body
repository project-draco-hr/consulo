{
  PsiExpressionList list=methodCall.getArgumentList();
  PsiReferenceExpression referenceToMethod=methodCall.getMethodExpression();
  JavaResolveResult[] results=referenceToMethod.multiResolve(true);
  JavaResolveResult resolveResult=results.length == 1 ? results[0] : JavaResolveResult.EMPTY;
  PsiElement resolved=resolveResult.getElement();
  boolean isDummy=isDummyConstructorCall(methodCall,resolveHelper,list,referenceToMethod);
  if (isDummy)   return null;
  HighlightInfo highlightInfo;
  PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  if (resolved instanceof PsiMethod && resolveResult.isValidResult()) {
    TextRange fixRange=getFixRange(methodCall);
    highlightInfo=HighlightUtil.checkUnhandledExceptions(methodCall,fixRange);
  }
 else {
    PsiMethod resolvedMethod=null;
    MethodCandidateInfo candidateInfo=null;
    if (resolveResult instanceof MethodCandidateInfo) {
      candidateInfo=(MethodCandidateInfo)resolveResult;
      resolvedMethod=candidateInfo.getElement();
    }
    if (!resolveResult.isAccessible() || !resolveResult.isStaticsScopeCorrect()) {
      highlightInfo=null;
    }
 else     if (candidateInfo != null && !candidateInfo.isApplicable()) {
      if (candidateInfo.isTypeArgumentsApplicable()) {
        String methodName=HighlightMessageUtil.getSymbolName(resolved,substitutor);
        PsiElement parent=resolved.getParent();
        String containerName=parent == null ? "" : HighlightMessageUtil.getSymbolName(parent,substitutor);
        String argTypes=buildArgTypesList(list);
        String description=JavaErrorMessages.message("wrong.method.arguments",methodName,containerName,argTypes);
        String toolTip=parent instanceof PsiClass && !ApplicationManager.getApplication().isUnitTestMode() ? createMismatchedArgumentsHtmlTooltip(candidateInfo,list) : description;
        highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,list,description,toolTip);
        registerMethodCallIntentions(highlightInfo,methodCall,list,resolveHelper);
        highlightInfo.navigationShift=+1;
      }
 else {
        PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
        PsiReferenceParameterList typeArgumentList=methodCall.getTypeArgumentList();
        if (typeArgumentList.getTypeArguments().length == 0 && resolvedMethod != null && resolvedMethod.hasTypeParameters()) {
          highlightInfo=GenericsHighlightUtil.checkInferredTypeArguments(resolvedMethod,methodCall,substitutor);
        }
 else {
          highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,methodExpression,substitutor);
        }
      }
    }
 else {
      highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,methodCall,JavaErrorMessages.message("method.call.expected"));
      if (resolved instanceof PsiClass) {
        QuickFixAction.registerQuickFixAction(highlightInfo,new InsertNewFix(methodCall,(PsiClass)resolved));
      }
 else {
        TextRange range=getFixRange(methodCall);
        QuickFixAction.registerQuickFixAction(highlightInfo,range,new CreateMethodFromUsageFix(methodCall));
        QuickFixAction.registerQuickFixAction(highlightInfo,range,new CreateAbstractMethodFromUsageFix(methodCall));
        QuickFixAction.registerQuickFixAction(highlightInfo,range,new CreatePropertyFromUsageFix(methodCall));
      }
    }
  }
  if (highlightInfo == null) {
    highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,referenceToMethod,substitutor);
  }
  return highlightInfo;
}
