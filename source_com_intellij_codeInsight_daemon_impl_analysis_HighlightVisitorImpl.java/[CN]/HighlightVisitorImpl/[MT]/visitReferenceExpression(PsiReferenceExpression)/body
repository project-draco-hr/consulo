{
  visitReferenceElement(expression);
  if (!myHolder.hasErrorResults()) {
    visitExpression(expression);
  }
  JavaResolveResult result=expression.advancedResolve(false);
  PsiElement resolved=result.getElement();
  if (resolved instanceof PsiVariable && resolved.getContainingFile() == expression.getContainingFile()) {
    if (!myHolder.hasErrorResults()) {
      myHolder.add(HighlightControlFlowUtil.checkVariableInitializedBeforeUsage(expression,resolved,myUninitializedVarProblems));
    }
    PsiVariable variable=(PsiVariable)resolved;
    boolean isFinal=variable.hasModifierProperty(PsiModifier.FINAL);
    if (isFinal && !variable.hasInitializer()) {
      if (!myHolder.hasErrorResults()) {
        myHolder.add(HighlightControlFlowUtil.checkFinalVariableMightAlreadyHaveBeenAssignedTo(variable,expression,myFinalVarProblems));
      }
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightControlFlowUtil.checkFinalVariableInitalizedInLoop(expression,resolved));
    }
  }
 else   if (expression.getParent() instanceof PsiMethodCallExpression) {
    myHolder.add(HighlightMethodUtil.checkMethodCall((PsiMethodCallExpression)expression.getParent(),myResolveHelper));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkExpressionRequired(expression));
  if (!myHolder.hasErrorResults() && resolved instanceof PsiField) {
    myHolder.add(HighlightUtil.checkIllegalForwardReferenceToField(expression,(PsiField)resolved));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightMethodUtil.checkConstructorCallMustBeFirstStatement(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkAccessStaticMemberViaInstanceReference(expression,result));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkAccessStaticFieldFromEnumConstructor(expression,result));
}
