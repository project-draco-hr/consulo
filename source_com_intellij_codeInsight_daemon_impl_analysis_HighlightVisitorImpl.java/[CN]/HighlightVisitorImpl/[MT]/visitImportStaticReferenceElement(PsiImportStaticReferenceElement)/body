{
  String refName=ref.getReferenceName();
  final ResolveResult[] results=ref.multiResolve(false);
  if (results.length == 0) {
    String description=MessageFormat.format(UNKNOWN_SYMBOL,new Object[]{refName});
    final HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
    myHolder.add(info);
    QuickFixAction.registerQuickFixAction(info,SetupJDKFix.getInstnace());
  }
 else {
    PsiManager manager=ref.getManager();
    for (int i=0; i < results.length; i++) {
      PsiElement element=results[i].getElement();
      if (!(element instanceof PsiModifierListOwner) || !((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC))       continue;
      String importedString=null;
      if (element instanceof PsiClass) {
        PsiClass aClass=mySingleImportedClasses.get(refName);
        if (aClass != null && !manager.areElementsEquivalent(aClass,element)) {
          importedString="class '" + refName + "'";
        }
        mySingleImportedClasses.put(refName,(PsiClass)element);
      }
 else       if (element instanceof PsiField) {
        PsiField field=(PsiField)mySingleImportedFields.get(refName);
        if (field != null && !manager.areElementsEquivalent(field,element)) {
          importedString="field '" + refName + "'";
        }
        mySingleImportedFields.put(refName,element);
      }
 else       if (element instanceof PsiMethod) {
        MethodSignature signature=((PsiMethod)element).getSignature(PsiSubstitutor.EMPTY);
        PsiMethod method=(PsiMethod)mySingleImportedMethods.get(signature);
        if (method != null && !manager.areElementsEquivalent(method,element)) {
          importedString="method '" + refName + "'";
        }
        mySingleImportedMethods.put(signature,element);
      }
      if (importedString != null) {
        String description=MessageFormat.format("{0} is already defined in a single-type import",new Object[]{importedString});
        myHolder.add(HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,ref,description));
      }
    }
  }
}
