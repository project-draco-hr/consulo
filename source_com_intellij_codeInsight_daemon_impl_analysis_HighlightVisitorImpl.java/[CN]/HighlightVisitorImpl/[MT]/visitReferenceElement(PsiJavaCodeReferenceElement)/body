{
  final ResolveResult result=ref.advancedResolve(true);
  final PsiElement resolved=result.getElement();
  PsiElement parent=ref.getParent();
  if (myRefCountHolder != null) {
    myRefCountHolder.registerReference(ref,result);
  }
  myHolder.add(HighlightUtil.checkReference(ref,result,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkAbstractInstantiation(ref));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkExtendsDuplicate(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkExceptionAlreadyCaught(ref,resolved));
  if (!myHolder.hasErrorResults()) {
    myHolder.add(HighlightUtil.checkDeprecated(resolved,ref.getReferenceNameElement(),DaemonCodeAnalyzerSettings.getInstance()));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightMethodUtil.checkExceptionsNeverThrown(ref));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkClassExtendsForeignInnerClass(ref,resolved));
  if (!myHolder.hasErrorResults()) {
    myHolder.add(GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,ref,result.getSubstitutor()));
  }
  if (resolved instanceof PsiClass && parent instanceof PsiReferenceList) {
    myHolder.add(HighlightUtil.checkReferenceList(ref,(PsiReferenceList)parent,result));
  }
  if (!myHolder.hasErrorResults()) {
    if (resolved instanceof PsiVariable) {
      myHolder.add(HighlightNamesUtil.highlightVariable((PsiVariable)resolved,ref.getReferenceNameElement()));
      myHolder.add(HighlightNamesUtil.highlightClassNameInQualifier(ref));
    }
 else {
      highlightMethodOrClassName(ref);
    }
  }
}
