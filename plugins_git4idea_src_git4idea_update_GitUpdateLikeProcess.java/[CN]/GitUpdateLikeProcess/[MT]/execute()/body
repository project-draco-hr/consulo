{
  final boolean saveOnFrameDeactivation=myGeneralSettings.isSaveOnFrameDeactivation();
  final boolean syncOnFrameDeactivation=myGeneralSettings.isSyncOnFrameActivation();
  myProjectManager.blockReloadingProjectOnExternalChanges();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          FileDocumentManager.getInstance().saveAllDocuments();
          myGeneralSettings.setSaveOnFrameDeactivation(false);
          myGeneralSettings.setSyncOnFrameActivation(false);
        }
      }
);
    }
  }
);
  final Continuation continuation=new Continuation(myProject,true);
  final ContinuationContext.GatheringContinuationContext initContext=new ContinuationContext.GatheringContinuationContext();
  initContext.next(new TaskDescriptor("Git: updating",Where.POOLED){
    @Override public void run(    final ContinuationContext context){
      runImpl(context);
    }
  }
,new TaskDescriptor("",Where.AWT){
    @Override public void run(    ContinuationContext context){
      myProjectManager.unblockReloadingProjectOnExternalChanges();
      myGeneralSettings.setSaveOnFrameDeactivation(saveOnFrameDeactivation);
      myGeneralSettings.setSyncOnFrameActivation(syncOnFrameDeactivation);
    }
  }
);
  continuation.runAndWait(initContext.getList());
}
