{
  final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  final boolean saveOnFrameDeactivation=myGeneralSettings.isSaveOnFrameDeactivation();
  final boolean syncOnFrameDeactivation=myGeneralSettings.isSyncOnFrameActivation();
  myProjectManager.blockReloadingProjectOnExternalChanges();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          FileDocumentManager.getInstance().saveAllDocuments();
          myGeneralSettings.setSaveOnFrameDeactivation(false);
          myGeneralSettings.setSyncOnFrameActivation(false);
        }
      }
);
    }
  }
);
  final Continuation continuation=Continuation.createForCurrentProgress(myProject,true,GIT_UPDATING);
  final GatheringContinuationContext initContext=new GatheringContinuationContext();
  final TaskDescriptor returnFlagsBack=new TaskDescriptor("",Where.AWT){
    @Override public void run(    ContinuationContext context){
      myProjectManager.unblockReloadingProjectOnExternalChanges();
      myGeneralSettings.setSaveOnFrameDeactivation(saveOnFrameDeactivation);
      myGeneralSettings.setSyncOnFrameActivation(syncOnFrameDeactivation);
      changeListManager.letGo();
    }
  }
;
  final TaskDescriptor[] next={new TaskDescriptor(GIT_UPDATING,Where.POOLED){
    @Override public void run(    ContinuationContext context){
      changeListManager.freeze(context,REASON);
    }
  }
,new TaskDescriptor(GIT_UPDATING,Where.POOLED){
    @Override public void run(    final ContinuationContext context){
      runImpl(context);
    }
  }
,returnFlagsBack};
  returnFlagsBack.setHaveMagicCure(true);
  initContext.next(next);
  continuation.run(initContext.getList());
}
