{
  final File file=filePath.getIOFile();
  final VirtualFile root=CvsVfsUtil.refreshAndFindFileByIoFile(file.getParentFile());
  if (root == null)   return null;
  final LocalPathIndifferentLogOperation logOperation=new LocalPathIndifferentLogOperation(file);
  final CvsOperationExecutor executor=new CvsOperationExecutor(myProject);
  final ArrayList<VcsFileRevision> result=new ArrayList<VcsFileRevision>();
  executor.performActionSync(new CommandCvsHandler(CvsBundle.message("operation.name.load.file.content"),logOperation),new DefaultCvsOperationExecutorCallback(){
    @Override public void executionFinishedSuccessfully(){
      final CvsConnectionSettings env=CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(filePath.getVirtualFileParent());
      final LogInformation firstLogInformation=logOperation.getFirstLogInformation();
      if (firstLogInformation != null) {
        final List<Revision> revisionList=firstLogInformation.getRevisionList();
        for (        Revision revision : revisionList) {
          result.add(new CvsFileRevisionImpl(revision,CvsUtil.getCvsLightweightFileForFile(file),firstLogInformation,env,myProject));
        }
      }
    }
  }
);
  Collections.sort(result,Collections.reverseOrder(VcsFileRevisionComparator.INSTANCE));
  return result;
}
