{
  final Class componentClass=getComponentClass(lwComponent.getComponentClassName(),myLoader);
  final LwIntrospectedProperty[] introspectedProperties=lwComponent.getAssignedIntrospectedProperties();
  for (int i=0; i < introspectedProperties.length; i++) {
    final LwIntrospectedProperty property=introspectedProperties[i];
    final String propertyClass=property.getPropertyClassName();
    final PropertyCodeGenerator propGen=(PropertyCodeGenerator)myPropertyCodeGenerators.get(propertyClass);
    if (propGen != null && propGen.generateCustomSetValue(lwComponent,componentClass,property,generator,componentLocal)) {
      continue;
    }
    generator.loadLocal(componentLocal);
    Object value=lwComponent.getPropertyValue(property);
    Type setterArgType;
    if (propertyClass.equals(Integer.class.getName())) {
      generator.push(((Integer)value).intValue());
      setterArgType=Type.INT_TYPE;
    }
 else     if (propertyClass.equals(Boolean.class.getName())) {
      generator.push(((Boolean)value).booleanValue());
      setterArgType=Type.BOOLEAN_TYPE;
    }
 else     if (propertyClass.equals(Double.class.getName())) {
      generator.push(((Double)value).doubleValue());
      setterArgType=Type.DOUBLE_TYPE;
    }
 else {
      if (propGen == null) {
        continue;
      }
      propGen.generatePushValue(generator,value);
      setterArgType=Type.getType("L" + propertyClass.replace('.','/') + ";");
    }
    generator.invokeVirtual(componentType,new Method(property.getWriteMethodName(),Type.VOID_TYPE,new Type[]{setterArgType}));
  }
}
