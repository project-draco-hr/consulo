{
  final LwIntrospectedProperty[] introspectedProperties=lwComponent.getAssignedIntrospectedProperties();
  for (int i=0; i < introspectedProperties.length; i++) {
    final LwIntrospectedProperty property=introspectedProperties[i];
    generator.loadLocal(componentLocal);
    Object value=lwComponent.getPropertyValue(property);
    Method setterMethod;
    final String propertyClass=property.getPropertyClassName();
    if (propertyClass.equals(Integer.class.getName())) {
      generator.push(((Integer)value).intValue());
      setterMethod=Method.getMethod("void " + property.getWriteMethodName() + "(int)");
    }
 else     if (propertyClass.equals(Boolean.class.getName())) {
      generator.push(((Boolean)value).booleanValue());
      setterMethod=Method.getMethod("void " + property.getWriteMethodName() + "(boolean)");
    }
 else     if (propertyClass.equals(Double.class.getName())) {
      generator.push(((Double)value).doubleValue());
      setterMethod=Method.getMethod("void " + property.getWriteMethodName() + "(double)");
    }
 else {
      PropertyCodeGenerator propGen=(PropertyCodeGenerator)myPropertyCodeGenerators.get(propertyClass);
      if (propGen == null) {
        continue;
      }
      propGen.generatePushValue(generator,value);
      setterMethod=Method.getMethod("void " + property.getWriteMethodName() + "("+ propertyClass+ ")");
    }
    generator.invokeVirtual(componentType,setterMethod);
  }
}
