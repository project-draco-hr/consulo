{
  final String binding=lwComponent.getBinding();
  if (binding != null) {
    if (!myFieldDescMap.containsKey(binding)) {
      throw new CodeGenerationException("Cannot bind: field does not exist: " + myClassToBind + "."+ binding);
    }
    Integer access=(Integer)myFieldAccessMap.get(binding);
    if ((access.intValue() & Opcodes.ACC_STATIC) != 0) {
      throw new CodeGenerationException("Cannot bind: field is static: " + myClassToBind + "."+ binding);
    }
    if ((access.intValue() & Opcodes.ACC_FINAL) != 0) {
      throw new CodeGenerationException("Cannot bind: field is final: " + myClassToBind + "."+ binding);
    }
    final Type fieldType=Type.getType((String)myFieldDescMap.get(binding));
    if (fieldType.getSort() != Type.OBJECT) {
      throw new CodeGenerationException("Cannot bind: field is of primitive type: " + myClassToBind + "."+ binding);
    }
    Class fieldClass;
    try {
      fieldClass=myLoader.loadClass(fieldType.getClassName());
    }
 catch (    ClassNotFoundException e) {
      throw new CodeGenerationException("Class not found: " + fieldType.getClassName());
    }
    if (!fieldClass.isAssignableFrom(componentClass)) {
      throw new CodeGenerationException("Cannot bind: Incompatible types. Cannot assign " + componentClass.getName() + " to field "+ myClassToBind+ "."+ binding);
    }
    generator.loadThis();
    generator.loadLocal(componentLocal);
    generator.putField(Type.getType("L" + myClassName + ";"),binding,fieldType);
  }
}
