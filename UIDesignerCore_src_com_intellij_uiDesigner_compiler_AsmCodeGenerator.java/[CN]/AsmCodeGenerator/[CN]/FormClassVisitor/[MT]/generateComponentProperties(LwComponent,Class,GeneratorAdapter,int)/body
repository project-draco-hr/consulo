{
  final LwIntrospectedProperty[] introspectedProperties=lwComponent.getAssignedIntrospectedProperties();
  for (int i=0; i < introspectedProperties.length; i++) {
    final LwIntrospectedProperty property=introspectedProperties[i];
    if (property instanceof LwIntroComponentProperty) {
      continue;
    }
    final String propertyClass=property.getCodeGenPropertyClassName();
    if (myIgnoreCustomCreation) {
      try {
        Class setterClass;
        if (propertyClass.equals(Integer.class.getName())) {
          setterClass=int.class;
        }
 else         if (propertyClass.equals(Boolean.class.getName())) {
          setterClass=boolean.class;
        }
 else         if (propertyClass.equals(Double.class.getName())) {
          setterClass=double.class;
        }
 else         if (propertyClass.equals(Float.class.getName())) {
          setterClass=float.class;
        }
 else         if (propertyClass.equals(Long.class.getName())) {
          setterClass=long.class;
        }
 else         if (propertyClass.equals(Byte.class.getName())) {
          setterClass=byte.class;
        }
 else         if (propertyClass.equals(Short.class.getName())) {
          setterClass=short.class;
        }
 else {
          setterClass=Class.forName(propertyClass);
        }
        componentClass.getMethod(property.getWriteMethodName(),new Class[]{setterClass});
      }
 catch (      Exception e) {
        continue;
      }
    }
    final PropertyCodeGenerator propGen=(PropertyCodeGenerator)myPropertyCodeGenerators.get(propertyClass);
    if (propGen != null && propGen.generateCustomSetValue(lwComponent,componentClass,property,generator,componentLocal,myClassName)) {
      continue;
    }
    generator.loadLocal(componentLocal);
    Object value=lwComponent.getPropertyValue(property);
    Type setterArgType;
    if (propertyClass.equals(Integer.class.getName())) {
      generator.push(((Integer)value).intValue());
      setterArgType=Type.INT_TYPE;
    }
 else     if (propertyClass.equals(Boolean.class.getName())) {
      generator.push(((Boolean)value).booleanValue());
      setterArgType=Type.BOOLEAN_TYPE;
    }
 else     if (propertyClass.equals(Double.class.getName())) {
      generator.push(((Double)value).doubleValue());
      setterArgType=Type.DOUBLE_TYPE;
    }
 else     if (propertyClass.equals(Float.class.getName())) {
      generator.push(((Float)value).floatValue());
      setterArgType=Type.FLOAT_TYPE;
    }
 else {
      if (propGen == null) {
        continue;
      }
      propGen.generatePushValue(generator,value);
      setterArgType=typeFromClassName(property.getPropertyClassName());
    }
    Type declaringType=(property.getDeclaringClassName() != null) ? typeFromClassName(property.getDeclaringClassName()) : Type.getType(componentClass);
    generator.invokeVirtual(declaringType,new Method(property.getWriteMethodName(),Type.VOID_TYPE,new Type[]{setterArgType}));
  }
  generateClientProperties(lwComponent,componentClass,generator,componentLocal);
}
