{
  String className;
  LwRootContainer nestedFormContainer=null;
  if (lwComponent instanceof LwNestedForm) {
    LwNestedForm nestedForm=(LwNestedForm)lwComponent;
    try {
      nestedFormContainer=myFormLoader.loadForm(nestedForm.getFormFileName());
    }
 catch (    Exception e) {
      throw new CodeGenerationException(lwComponent.getId(),e.getMessage());
    }
    if (nestedFormContainer.getComponentCount() == 0) {
      return;
    }
    if (nestedFormContainer.getComponent(0).getBinding() == null) {
      throw new CodeGenerationException(lwComponent.getId(),"No binding on root component of nested form " + nestedForm.getFormFileName());
    }
    try {
      Utils.validateNestedFormLoop(nestedForm.getFormFileName(),myFormLoader);
    }
 catch (    RecursiveFormNestingException e) {
      throw new CodeGenerationException(lwComponent.getId(),"Recursive form nesting is not allowed");
    }
    className=nestedFormContainer.getClassToBind();
  }
 else {
    className=getComponentCodeGenerator(lwComponent.getParent()).mapComponentClass(lwComponent.getComponentClassName());
  }
  Type componentType=typeFromClassName(className);
  int componentLocal=generator.newLocal(componentType);
  myIdToLocalMap.put(lwComponent.getId(),new Integer(componentLocal));
  Class componentClass=getComponentClass(className,myLoader);
  validateFieldBinding(lwComponent,componentClass);
  if (myIgnoreCustomCreation) {
    boolean creatable=true;
    try {
      final Constructor constructor=componentClass.getConstructor(new Class[0]);
      if ((constructor.getModifiers() & Modifier.PUBLIC) == 0) {
        creatable=false;
      }
    }
 catch (    NoSuchMethodException ex) {
      creatable=false;
    }
    if (!creatable) {
      componentClass=Utils.suggestReplacementClass(componentClass);
      componentType=Type.getType(componentClass);
    }
  }
  if (!lwComponent.isCustomCreate() || myIgnoreCustomCreation) {
    generator.newInstance(componentType);
    generator.dup();
    generator.invokeConstructor(componentType,Method.getMethod("void <init>()"));
    generator.storeLocal(componentLocal);
    generateFieldBinding(lwComponent,generator,componentLocal);
  }
 else {
    final String binding=lwComponent.getBinding();
    if (binding == null) {
      throw new CodeGenerationException(lwComponent.getId(),"Only components bound to fields can have custom creation code");
    }
    generator.loadThis();
    generator.getField(Type.getType("L" + myClassName + ";"),binding,Type.getType((String)myFieldDescMap.get(binding)));
    generator.storeLocal(componentLocal);
  }
  if (lwComponent instanceof LwContainer) {
    LwContainer lwContainer=(LwContainer)lwComponent;
    getComponentCodeGenerator(lwContainer).generateContainerLayout(lwContainer,generator,componentLocal);
  }
  generateComponentProperties(lwComponent,componentClass,generator,componentLocal);
  if (!(lwComponent.getParent() instanceof LwRootContainer)) {
    final LayoutCodeGenerator parentCodeGenerator=getComponentCodeGenerator(lwComponent.getParent());
    if (lwComponent instanceof LwNestedForm) {
      componentLocal=getNestedFormComponent(generator,componentClass,componentLocal);
    }
    parentCodeGenerator.generateComponentLayout(lwComponent,generator,componentLocal,parentLocal);
  }
  if (lwComponent instanceof LwContainer) {
    LwContainer container=(LwContainer)lwComponent;
    generateBorder(container,generator,componentLocal);
    for (int i=0; i < container.getComponentCount(); i++) {
      generateSetupCodeForComponent((LwComponent)container.getComponent(i),generator,componentLocal);
    }
  }
}
