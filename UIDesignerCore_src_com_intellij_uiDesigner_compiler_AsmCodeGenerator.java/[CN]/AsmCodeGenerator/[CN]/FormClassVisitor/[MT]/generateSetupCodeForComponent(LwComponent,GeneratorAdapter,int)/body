{
  String className;
  LwRootContainer nestedFormContainer=null;
  if (lwComponent instanceof LwNestedForm) {
    if (myFormLoader == null) {
      throw new CodeGenerationException(null,"Nested forms not supported in this compile configuration");
    }
    LwNestedForm nestedForm=(LwNestedForm)lwComponent;
    try {
      nestedFormContainer=myFormLoader.loadForm(nestedForm.getFormFileName());
    }
 catch (    Exception e) {
      throw new CodeGenerationException(lwComponent.getId(),e.getMessage());
    }
    if (nestedFormContainer.getComponentCount() == 0) {
      return;
    }
    if (nestedFormContainer.getComponent(0).getBinding() == null) {
      throw new CodeGenerationException(lwComponent.getId(),"No binding on root component of nested form " + nestedForm.getFormFileName());
    }
    Utils.validateNestedFormLoop(nestedForm.getFormFileName(),myFormLoader);
    className=nestedFormContainer.getClassToBind();
  }
 else {
    className=myLayoutCodeGenerator.mapComponentClass(lwComponent.getComponentClassName());
  }
  final Type componentType=typeFromClassName(className);
  int componentLocal=generator.newLocal(componentType);
  myIdToLocalMap.put(lwComponent.getId(),new Integer(componentLocal));
  generator.newInstance(componentType);
  generator.dup();
  generator.invokeConstructor(componentType,Method.getMethod("void <init>()"));
  generator.storeLocal(componentLocal);
  Class componentClass=getComponentClass(className,myLoader);
  validateFieldBinding(lwComponent,componentClass);
  generateFieldBinding(lwComponent,generator,componentLocal);
  getComponentCodeGenerator(lwComponent).generateContainerLayout(lwComponent,generator,componentLocal);
  generateComponentProperties(lwComponent,componentClass,generator,componentLocal);
  if (!(lwComponent.getParent() instanceof LwRootContainer)) {
    final LayoutCodeGenerator parentCodeGenerator=getComponentCodeGenerator(lwComponent.getParent());
    if (lwComponent instanceof LwNestedForm) {
      componentLocal=getNestedFormComponent(generator,componentClass,componentLocal);
    }
    parentCodeGenerator.generateComponentLayout(lwComponent,generator,componentLocal,parentLocal);
  }
  if (lwComponent instanceof LwContainer) {
    LwContainer container=(LwContainer)lwComponent;
    generateBorder(container,generator,componentLocal);
    for (int i=0; i < container.getComponentCount(); i++) {
      generateSetupCodeForComponent((LwComponent)container.getComponent(i),generator,componentLocal);
    }
  }
}
