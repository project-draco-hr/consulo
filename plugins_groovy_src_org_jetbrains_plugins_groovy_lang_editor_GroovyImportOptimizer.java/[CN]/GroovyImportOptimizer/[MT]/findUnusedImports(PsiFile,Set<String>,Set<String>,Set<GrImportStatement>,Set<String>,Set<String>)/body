{
  if (!(file instanceof GroovyFile))   return;
  ((GroovyFile)file).accept(new GroovyRecursiveElementVisitor(){
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      visitRefElement(refElement);
      super.visitCodeReferenceElement(refElement);
    }
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      visitRefElement(referenceExpression);
      super.visitReferenceExpression(referenceExpression);
    }
    private void visitRefElement(    GrReferenceElement refElement){
      final GroovyResolveResult[] resolveResults=refElement.multiResolve(false);
      for (      GroovyResolveResult resolveResult : resolveResults) {
        final GroovyPsiElement context=resolveResult.getCurrentFileResolveContext();
        final PsiElement element=resolveResult.getElement();
        if (element == null)         return;
        if (context instanceof GrImportStatement) {
          final GrImportStatement importStatement=(GrImportStatement)context;
          if (usedImports != null) {
            usedImports.add(importStatement);
          }
          if (!importStatement.isAliasedImport()) {
            String importedName=null;
            if (importStatement.isOnDemand()) {
              if (importStatement.isStatic()) {
                if (element instanceof PsiMember) {
                  final PsiMember member=(PsiMember)element;
                  final PsiClass clazz=member.getContainingClass();
                  if (clazz != null) {
                    final String classQName=clazz.getQualifiedName();
                    if (classQName != null) {
                      final String name=member.getName();
                      if (name != null) {
                        importedName=classQName + "." + name;
                      }
                    }
                  }
                }
              }
 else {
                importedName=getTargetQualifiedName(element);
              }
            }
 else {
              final GrCodeReferenceElement importReference=importStatement.getImportReference();
              if (importReference != null) {
                importedName=PsiUtil.getQualifiedReferenceText(importReference);
              }
            }
            if (importedName == null)             return;
            if (importStatement.isStatic()) {
              if (staticallyImportedMembers != null) {
                staticallyImportedMembers.add(importedName);
              }
            }
 else {
              if (importedClasses != null) {
                importedClasses.add(importedName);
              }
              if (element instanceof PsiClass && ((PsiClass)element).getContainingClass() != null && innerClasses != null) {
                innerClasses.add(importedName);
              }
            }
          }
        }
 else         if (context == null && !(refElement.getParent() instanceof GrImportStatement) && refElement.getQualifier() == null) {
          final String qname=getTargetQualifiedName(element);
          if (qname != null) {
            if (implicitlyImported != null) {
              implicitlyImported.add(qname);
            }
            if (importedClasses != null) {
              importedClasses.add(qname);
            }
          }
        }
      }
    }
  }
);
}
