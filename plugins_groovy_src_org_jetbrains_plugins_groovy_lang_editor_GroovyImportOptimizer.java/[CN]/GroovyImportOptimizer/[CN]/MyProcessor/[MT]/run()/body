{
  if (!(myFile instanceof GroovyFile))   return;
  GroovyFile file=((GroovyFile)myFile);
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(file.getProject());
  final Document document=documentManager.getDocument(file);
  if (document != null) {
    documentManager.commitDocument(document);
  }
  final Set<String> simplyImportedClasses=new LinkedHashSet<String>();
  final Set<String> staticallyImportedMembers=new LinkedHashSet<String>();
  final Set<GrImportStatement> usedImports=new HashSet<GrImportStatement>();
  final Set<String> implicitlyImportedClasses=new LinkedHashSet<String>();
  final Set<String> innerClasses=new HashSet<String>();
  Map<String,String> aliasImported=ContainerUtilRt.newHashMap();
  Map<String,String> annotatedImports=ContainerUtilRt.newHashMap();
  processFile(myFile,simplyImportedClasses,staticallyImportedMembers,usedImports,implicitlyImportedClasses,innerClasses,aliasImported,annotatedImports);
  final List<GrImportStatement> oldImports=PsiUtil.getValidImportStatements(file);
  if (myRemoveUnusedOnly) {
    for (    GrImportStatement oldImport : oldImports) {
      if (!usedImports.contains(oldImport)) {
        file.removeImport(oldImport);
      }
    }
    return;
  }
  GrImportStatement[] newImports=prepare(usedImports,simplyImportedClasses,staticallyImportedMembers,implicitlyImportedClasses,innerClasses,aliasImported,annotatedImports);
  if (oldImports.isEmpty() && newImports.length == 0 && aliasImported.isEmpty()) {
    return;
  }
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(file.getProject());
  GroovyFile tempFile=factory.createGroovyFile("",false,null);
  for (  GrImportStatement newImport : newImports) {
    tempFile.addImport(newImport);
  }
  final int startOffset=oldImports.get(0).getTextRange().getStartOffset();
  final int endOffset=oldImports.get(oldImports.size() - 1).getTextRange().getEndOffset();
  String oldText=oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset,endOffset);
  if (tempFile.getText().trim().equals(oldText)) {
    return;
  }
  for (  GrImportStatement statement : tempFile.getImportStatements()) {
    file.addImport(statement);
  }
  for (  GrImportStatement importStatement : oldImports) {
    file.removeImport(importStatement);
  }
}
