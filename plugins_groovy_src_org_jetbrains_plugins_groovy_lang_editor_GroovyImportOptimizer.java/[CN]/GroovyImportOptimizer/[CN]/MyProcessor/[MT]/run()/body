{
  final ArrayList<GrImportStatement> importStatements=new ArrayList<GrImportStatement>(Arrays.asList(myFile.getImportStatements()));
  myFile.accept(new GroovyRecursiveElementVisitor(){
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      visitRefElement(refElement);
      super.visitCodeReferenceElement(refElement);
    }
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      visitRefElement(referenceExpression);
      super.visitReferenceExpression(referenceExpression);
    }
    private void visitRefElement(    GrReferenceElement refElement){
      final GroovyResolveResult resolveResult=refElement.advancedResolve();
      final GrImportStatement importStatement=resolveResult.getImportStatementContext();
      if (importStatement != null && !isUnneeded(importStatement)) {
        importStatements.remove(importStatement);
      }
    }
    private boolean isUnneeded(    GrImportStatement importStatement){
      if (!importStatement.isOnDemand())       return false;
      final GrCodeReferenceElement ref=importStatement.getImportReference();
      if (ref != null) {
        String qName=PsiUtil.getQualifiedReferenceText(ref);
        LOG.assertTrue(qName != null);
        for (        String implicitlyImportedPackage : GroovyFile.IMPLICITLY_IMPORTED_PACKAGES) {
          if (qName.equals(implicitlyImportedPackage))           return true;
        }
        for (        String implicitlyImportedClass : GroovyFile.IMPLICITLY_IMPORTED_CLASSES) {
          if (qName.equals(implicitlyImportedClass))           return true;
        }
      }
      return false;
    }
  }
);
  for (  GrImportStatement importStatement : importStatements) {
    try {
      myFile.removeImport(importStatement);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
}
