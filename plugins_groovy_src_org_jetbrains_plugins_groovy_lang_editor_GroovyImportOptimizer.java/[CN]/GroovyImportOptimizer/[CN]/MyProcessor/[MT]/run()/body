{
  if (!ProjectRootManager.getInstance(myFile.getProject()).getFileIndex().isInSource(myFile.getVirtualFile())) {
    return;
  }
  final Set<String> importedClasses=new LinkedHashSet<String>();
  final Set<String> staticallyImportedMembers=new LinkedHashSet<String>();
  final Set<GrImportStatement> usedImports=new HashSet<GrImportStatement>();
  final Set<String> implicitlyImported=new LinkedHashSet<String>();
  myFile.accept(new GroovyRecursiveElementVisitor(){
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      visitRefElement(refElement);
      super.visitCodeReferenceElement(refElement);
    }
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      visitRefElement(referenceExpression);
      super.visitReferenceExpression(referenceExpression);
    }
    private void visitRefElement(    GrReferenceElement refElement){
      final GroovyResolveResult[] resolveResults=refElement.multiResolve(false);
      for (      GroovyResolveResult resolveResult : resolveResults) {
        final GroovyPsiElement context=resolveResult.getCurrentFileResolveContext();
        final PsiElement element=resolveResult.getElement();
        if (element == null)         return;
        if (context instanceof GrImportStatement) {
          final GrImportStatement importStatement=(GrImportStatement)context;
          usedImports.add(importStatement);
          if (!importStatement.isAliasedImport()) {
            String importedName=null;
            if (importStatement.isOnDemand()) {
              if (importStatement.isStatic()) {
                if (element instanceof PsiMember) {
                  final PsiMember member=(PsiMember)element;
                  final PsiClass clazz=member.getContainingClass();
                  if (clazz != null) {
                    final String classQName=clazz.getQualifiedName();
                    if (classQName != null) {
                      final String name=member.getName();
                      if (name != null) {
                        importedName=classQName + "." + name;
                      }
                    }
                  }
                }
              }
 else {
                importedName=getTargetQualifiedName(element);
              }
            }
 else {
              final GrCodeReferenceElement importReference=importStatement.getImportReference();
              if (importReference != null) {
                importedName=PsiUtil.getQualifiedReferenceText(importReference);
              }
            }
            if (importedName == null)             return;
            if (importStatement.isStatic()) {
              staticallyImportedMembers.add(importedName);
            }
 else {
              importedClasses.add(importedName);
            }
          }
        }
 else         if (context == null && !(refElement.getParent() instanceof GrImportStatement) && refElement.getQualifier() == null) {
          final String qname=getTargetQualifiedName(element);
          if (qname != null) {
            implicitlyImported.add(qname);
            importedClasses.add(qname);
          }
        }
      }
    }
  }
);
  final GrImportStatement[] oldImports=myFile.getImportStatements();
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(myFile.getProject());
  ArrayList<GrImportStatement> aliased=new ArrayList<GrImportStatement>();
  for (  GrImportStatement oldImport : oldImports) {
    if (oldImport.isAliasedImport() && usedImports.contains(oldImport)) {
      aliased.add(factory.createImportStatementFromText(oldImport.getText()));
    }
  }
  GrImportStatement[] newImports=prepare(importedClasses,staticallyImportedMembers,implicitlyImported);
  for (  GrImportStatement aliasedImport : aliased) {
    myFile.addImport(aliasedImport);
  }
  for (  GrImportStatement newImport : newImports) {
    myFile.addImport(newImport);
  }
  myFile.removeImport(myFile.addImport(factory.createImportStatementFromText("import xxxx")));
  for (  GrImportStatement importStatement : oldImports) {
    myFile.removeImport(importStatement);
  }
}
