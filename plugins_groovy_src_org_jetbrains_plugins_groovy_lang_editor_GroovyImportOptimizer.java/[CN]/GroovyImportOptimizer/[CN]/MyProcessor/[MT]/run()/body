{
  final Set<String> importedClasses=new LinkedHashSet<String>();
  final Set<String> staticallyImportedMembers=new LinkedHashSet<String>();
  myFile.accept(new GroovyRecursiveElementVisitor(){
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      visitRefElement(refElement);
      super.visitCodeReferenceElement(refElement);
    }
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      visitRefElement(referenceExpression);
      super.visitReferenceExpression(referenceExpression);
    }
    private void visitRefElement(    GrReferenceElement refElement){
      final GroovyResolveResult resolveResult=refElement.advancedResolve();
      final GrImportStatement importStatement=resolveResult.getImportStatementContext();
      if (importStatement != null) {
        String importedName=null;
        if (importStatement.isOnDemand()) {
          final PsiElement element=resolveResult.getElement();
          if (element == null)           return;
          if (importStatement.isStatic()) {
            if (element instanceof PsiMember) {
              final PsiMember member=(PsiMember)element;
              final PsiClass clazz=member.getContainingClass();
              if (clazz != null) {
                final String classQName=clazz.getQualifiedName();
                if (classQName != null) {
                  final String name=member.getName();
                  if (name != null) {
                    importedName=classQName + "." + name;
                  }
                }
              }
            }
          }
 else {
            if (element instanceof PsiClass) {
              importedName=((PsiClass)element).getQualifiedName();
            }
          }
        }
 else {
          final GrCodeReferenceElement importReference=importStatement.getImportReference();
          if (importReference != null) {
            importedName=PsiUtil.getQualifiedReferenceText(importReference);
          }
        }
        if (importedName == null)         return;
        if (importStatement.isStatic()) {
          staticallyImportedMembers.add(importedName);
        }
 else {
          importedClasses.add(importedName);
        }
      }
    }
  }
);
  for (  GrImportStatement importStatement : myFile.getImportStatements()) {
    try {
      myFile.removeImport(importStatement);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  GrImportStatement[] newImports=prepare(importedClasses,staticallyImportedMembers);
  try {
    for (    GrImportStatement newImport : newImports) {
      myFile.addImport(newImport);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
