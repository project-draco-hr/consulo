{
  if (!(myFile instanceof GroovyFile))   return;
  GroovyFile file=((GroovyFile)myFile);
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(file.getProject());
  final Document document=documentManager.getDocument(file);
  if (document != null) {
    documentManager.commitDocument(document);
  }
  final Set<String> importedClasses=new LinkedHashSet<String>();
  final Set<String> staticallyImportedMembers=new LinkedHashSet<String>();
  final Set<GrImportStatement> usedImports=new HashSet<GrImportStatement>();
  final Set<String> implicitlyImported=new LinkedHashSet<String>();
  final HashSet<String> innerClasses=new HashSet<String>();
  findUnusedImports(myFile,importedClasses,staticallyImportedMembers,usedImports,implicitlyImported,innerClasses);
  final List<GrImportStatement> oldImports=getValidImportStatements(file);
  if (myRemoveUnusedOnly) {
    for (    GrImportStatement oldImport : oldImports) {
      if (!usedImports.contains(oldImport)) {
        file.removeImport(oldImport);
      }
    }
    return;
  }
  Map<String,String> annotations=new HashMap<String,String>();
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(file.getProject());
  ArrayList<GrImportStatement> aliased=new ArrayList<GrImportStatement>();
  for (  GrImportStatement oldImport : oldImports) {
    if (oldImport.isAliasedImport() && usedImports.contains(oldImport)) {
      aliased.add(factory.createImportStatementFromText(oldImport.getText()));
    }
 else {
      String importReference=getImportReferenceText(oldImport);
      GrModifierList annotationList=oldImport.getAnnotationList();
      if (importReference != null && annotationList != null) {
        annotations.put(importReference,annotationList.getText());
      }
    }
  }
  GrImportStatement[] newImports=prepare(importedClasses,staticallyImportedMembers,implicitlyImported,innerClasses);
  if (oldImports.isEmpty() && newImports.length == 0 && aliased.isEmpty()) {
    return;
  }
  GroovyFile tempFile=(GroovyFile)PsiFileFactory.getInstance(file.getProject()).createFileFromText("a.groovy","");
  for (  GrImportStatement aliasedImport : aliased) {
    tempFile.addImport(aliasedImport);
  }
  for (  GrImportStatement newImport : newImports) {
    String imported=getImportReferenceText(newImport);
    String annos=annotations.get(imported);
    if (imported != null && StringUtil.isNotEmpty(annos)) {
      newImport=factory.createImportStatementFromText(annos + " " + newImport.getText());
    }
    tempFile.addImport(newImport);
  }
  String oldText=oldImports.isEmpty() ? "" : myFile.getText().substring(oldImports.get(0).getTextRange().getStartOffset(),oldImports.get(oldImports.size() - 1).getTextRange().getEndOffset());
  if (tempFile.getText().trim().equals(oldText)) {
    return;
  }
  for (  GrImportStatement statement : tempFile.getImportStatements()) {
    file.addImport(statement);
  }
  file.removeImport(file.addImport(factory.createImportStatementFromText("import xxxx")));
  for (  GrImportStatement importStatement : oldImports) {
    file.removeImport(importStatement);
  }
}
