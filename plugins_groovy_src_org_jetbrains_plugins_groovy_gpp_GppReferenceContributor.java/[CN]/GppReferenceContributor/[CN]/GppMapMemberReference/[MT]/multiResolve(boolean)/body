{
  final GrArgumentLabel context=getElement();
  final GrNamedArgument namedArgument=(GrNamedArgument)context.getParent();
  final GrExpression map=(GrExpression)namedArgument.getParent();
  final PsiClassType classType=LiteralConstructorReference.getTargetConversionType(map);
  if (classType != null) {
    final PsiClass psiClass=classType.resolve();
    if (psiClass != null) {
      final GrExpression value=namedArgument.getExpression();
      final List<ResolveResult> applicable=addMethodCandidates(classType,value);
      final String memberName=getValue();
      if ("super".equals(memberName) && GppTypeConverter.hasTypedContext(myElement)) {
        final LiteralConstructorReference reference=(LiteralConstructorReference)map.getReference();
        if (reference != null) {
          return reference.multiResolve(incompleteCode);
        }
      }
      if (value == null || applicable.isEmpty()) {
        final PsiMethod setter=PropertyUtil.findPropertySetter(psiClass,memberName,false,true);
        if (setter != null) {
          applicable.add(new PsiElementResolveResult(setter));
        }
 else {
          final PsiField field=PropertyUtil.findPropertyField(psiClass.getProject(),psiClass,memberName,false);
          if (field != null) {
            applicable.add(new PsiElementResolveResult(field));
          }
        }
      }
      return applicable.toArray(new ResolveResult[applicable.size()]);
    }
  }
  return ResolveResult.EMPTY_ARRAY;
}
