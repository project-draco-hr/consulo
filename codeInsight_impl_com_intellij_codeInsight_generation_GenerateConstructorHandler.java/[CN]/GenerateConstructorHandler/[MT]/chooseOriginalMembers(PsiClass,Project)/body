{
  if (aClass instanceof PsiAnonymousClass) {
    Messages.showMessageDialog(project,CodeInsightBundle.message("error.attempt.to.generate.constructor.for.anonymous.class"),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
    return null;
  }
  myCopyJavadoc=false;
  PsiMethod[] baseConstructors=null;
  PsiClass baseClass=aClass.getSuperClass();
  if (baseClass != null) {
    ArrayList<PsiMethod> array=new ArrayList<PsiMethod>();
    PsiMethod[] methods=baseClass.getMethods();
    for (    PsiMethod method : methods) {
      if (method.isConstructor()) {
        if (method.getManager().getResolveHelper().isAccessible(method,aClass,aClass)) {
          array.add(method);
        }
      }
    }
    if (array.size() > 0) {
      if (array.size() == 1) {
        baseConstructors=new PsiMethod[]{array.get(0)};
      }
 else {
        final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,aClass,PsiSubstitutor.EMPTY);
        PsiMethodMember[] constructors=ContainerUtil.map2Array(array,PsiMethodMember.class,new Function<PsiMethod,PsiMethodMember>(){
          public PsiMethodMember fun(          final PsiMethod s){
            return new PsiMethodMember(s,substitutor);
          }
        }
);
        MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(constructors,false,true,project);
        chooser.setTitle(CodeInsightBundle.message("generate.constructor.super.constructor.chooser.title"));
        chooser.show();
        List<PsiMethodMember> elements=chooser.getSelectedElements();
        if (elements == null || elements.size() == 0)         return null;
        baseConstructors=new PsiMethod[elements.size()];
        for (int i=0; i < elements.size(); i++) {
          final ClassMember member=elements.get(i);
          baseConstructors[i]=((PsiMethodMember)member).getElement();
        }
        myCopyJavadoc=chooser.isCopyJavadoc();
      }
    }
  }
  ClassMember[] allMembers=getAllOriginalMembers(aClass);
  ClassMember[] members;
  if (allMembers.length == 0) {
    members=ClassMember.EMPTY_ARRAY;
  }
 else {
    members=chooseMembers(allMembers,true,false,project);
    if (members == null)     return null;
  }
  if (baseConstructors != null) {
    ArrayList<ClassMember> array=new ArrayList<ClassMember>();
    for (    PsiMethod baseConstructor : baseConstructors) {
      array.add(new PsiMethodMember(baseConstructor));
    }
    for (    ClassMember member : members) {
      array.add(member);
    }
    members=array.toArray(new ClassMember[array.size()]);
  }
  return members;
}
