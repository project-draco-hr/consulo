{
  ArrayList<PsiMethod> baseConstructors=new ArrayList<PsiMethod>();
  ArrayList<PsiElement> fieldsVector=new ArrayList<PsiElement>();
  for (  ClassMember member1 : members) {
    PsiElement member=((PsiElementClassMember)member1).getElement();
    if (member instanceof PsiMethod) {
      baseConstructors.add((PsiMethod)member);
    }
 else {
      fieldsVector.add(member);
    }
  }
  PsiField[] fields=fieldsVector.toArray(new PsiField[fieldsVector.size()]);
  if (!baseConstructors.isEmpty()) {
    List<GenerationInfo> constructors=new ArrayList<GenerationInfo>(baseConstructors.size());
    PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(baseConstructors.get(0).getContainingClass(),aClass,PsiSubstitutor.EMPTY);
    for (    PsiMethod baseConstructor : baseConstructors) {
      if (substitutor != PsiSubstitutor.EMPTY) {
        baseConstructor=GenerateMembersUtil.substituteGenericMethod(baseConstructor,substitutor);
      }
      constructors.add(new PsiGenerationInfo(generateConstructorPrototype(aClass,baseConstructor,myCopyJavadoc,fields)));
    }
    return constructors;
  }
  return Collections.<GenerationInfo>singletonList(new PsiGenerationInfo(generateConstructorPrototype(aClass,null,false,fields)));
}
