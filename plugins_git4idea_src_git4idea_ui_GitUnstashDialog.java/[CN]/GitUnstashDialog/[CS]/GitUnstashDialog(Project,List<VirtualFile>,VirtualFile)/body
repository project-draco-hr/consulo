{
  super(project,true);
  myProject=project;
  setTitle(GitBundle.getString("unstash.title"));
  GitUIUtil.setupRootChooser(project,roots,defaultRoot,myGitRootComboBox,myCurrentBranch);
  myStashList.setModel(new DefaultListModel());
  refreshStashList();
  myGitRootComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      refreshStashList();
      updateDialogState();
    }
  }
);
  myStashList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      updateDialogState();
    }
  }
);
  myBranchTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateDialogState();
    }
  }
);
  myClearButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      GitLineHandler h=new GitLineHandler(myProject,getGitRoot(),GitHandler.STASH);
      h.setNoSSH(true);
      h.addParameters("clear");
      GitHandlerUtil.doSynchronously(h,GitBundle.getString("unstash.clearing.stashes"),h.printableCommandLine());
      refreshStashList();
      updateDialogState();
    }
  }
);
  myDropButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final String stash=getSelectedStash();
      GitSimpleHandler h=dropHandler(stash);
      try {
        h.setSilent(true);
        h.run();
        h.unsilence();
      }
 catch (      VcsException ex) {
        try {
          if (ex.getMessage().startsWith("fatal: Needed a single revision")) {
            h=dropHandler(translateStash(stash));
            h.run();
          }
 else {
            h.unsilence();
            throw ex;
          }
        }
 catch (        VcsException ex2) {
          GitUIUtil.showOperationError(myProject,ex,h.printableCommandLine());
          return;
        }
      }
      refreshStashList();
      updateDialogState();
    }
    private GitSimpleHandler dropHandler(    String stash){
      GitSimpleHandler h=new GitSimpleHandler(myProject,getGitRoot(),GitHandler.STASH);
      h.setNoSSH(true);
      h.addParameters("drop",stash);
      return h;
    }
  }
);
  myViewButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final VirtualFile root=getGitRoot();
      String resolvedStash;
      String selectedStash=getSelectedStash();
      try {
        resolvedStash=GitRevisionNumber.resolve(myProject,root,selectedStash).asString();
      }
 catch (      VcsException ex) {
        try {
          if (ex.getMessage().startsWith("fatal: bad revision 'stash@")) {
            selectedStash=translateStash(selectedStash);
            resolvedStash=GitRevisionNumber.resolve(myProject,root,selectedStash).asString();
          }
 else {
            throw ex;
          }
        }
 catch (        VcsException ex2) {
          GitUIUtil.showOperationError(myProject,ex,"resolving revision");
          return;
        }
      }
      GitShowAllSubmittedFilesAction.showSubmittedFiles(myProject,resolvedStash,root);
    }
  }
);
  init();
  updateDialogState();
}
