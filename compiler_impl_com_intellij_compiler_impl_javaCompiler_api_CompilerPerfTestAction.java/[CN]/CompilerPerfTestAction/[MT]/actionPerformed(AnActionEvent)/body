{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final CompilerManager compilerManager=CompilerManager.getInstance(project);
  final CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(project);
  Collection<BackendCompiler> compilers=configuration.getRegisteredJavaCompilers();
  final Iterator<BackendCompiler> it=new SequenceIterator<BackendCompiler>(compilers.iterator(),compilers.iterator(),compilers.iterator(),compilers.iterator(),compilers.iterator(),compilers.iterator(),compilers.iterator());
  CompileStatusNotification callback=new CompileStatusNotification(){
    volatile long start;
    BackendCompiler compiler;
    public void finished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      if (compiler == null) {
        next();
        return;
      }
      final long finish=System.currentTimeMillis();
      next();
    }
    void next(){
      if (!it.hasNext())       return;
      compiler=it.next();
      if (compiler.getId().equals("Jikes") || compiler.getId().contains("Eclipse")) {
        next();
        return;
      }
      boolean success=compiler.checkCompiler(compilerManager.createProjectCompileScope(project));
      if (!success) {
        next();
        return;
      }
      configuration.setDefaultCompiler(compiler);
      start=System.currentTimeMillis();
      compilerManager.rebuild(this);
    }
  }
;
  callback.finished(false,0,0,null);
}
