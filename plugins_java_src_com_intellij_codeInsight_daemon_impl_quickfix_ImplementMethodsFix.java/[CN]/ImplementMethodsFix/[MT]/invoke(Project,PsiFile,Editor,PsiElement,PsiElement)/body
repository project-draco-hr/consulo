{
  final PsiElement myPsiElement=startElement;
  if (editor == null || !FileModificationService.getInstance().prepareFileForWrite(myPsiElement.getContainingFile()))   return;
  if (myPsiElement instanceof PsiEnumConstant) {
    final boolean hasClassInitializer=((PsiEnumConstant)myPsiElement).getInitializingClass() != null;
    final MemberChooser<PsiMethodMember> chooser=chooseMethodsToImplement(editor,startElement,((PsiEnumConstant)myPsiElement).getContainingClass(),hasClassInitializer);
    if (chooser == null)     return;
    final List<PsiMethodMember> selectedElements=chooser.getSelectedElements();
    if (selectedElements == null || selectedElements.isEmpty())     return;
    new WriteCommandAction(project,file){
      @Override protected void run(      final Result result) throws Throwable {
        final PsiClass psiClass=((PsiEnumConstant)myPsiElement).getOrCreateInitializingClass();
        OverrideImplementUtil.overrideOrImplementMethodsInRightPlace(editor,psiClass,selectedElements,chooser.isCopyJavadoc(),chooser.isInsertOverrideAnnotation());
      }
    }
.execute();
  }
 else {
    OverrideImplementUtil.chooseAndImplementMethods(project,editor,(PsiClass)myPsiElement);
  }
}
