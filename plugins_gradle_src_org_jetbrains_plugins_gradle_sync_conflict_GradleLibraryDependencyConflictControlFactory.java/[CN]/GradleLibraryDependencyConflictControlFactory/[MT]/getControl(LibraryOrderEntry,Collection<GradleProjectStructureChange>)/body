{
  final Ref<GradleMismatchedLibraryPathChange> pathChangeRef=new Ref<GradleMismatchedLibraryPathChange>();
  GradleProjectStructureChangeVisitor visitor=new GradleProjectStructureChangeVisitorAdapter(){
    @Override public void visit(    @NotNull GradleMismatchedLibraryPathChange change){
      pathChangeRef.set(change);
    }
  }
;
  for (  GradleProjectStructureChange change : changes) {
    if (!pathChangeRef.isNull()) {
      break;
    }
    change.invite(visitor);
  }
  JComponent commonChangesControl=myCommonPropertiesFactory.getControl(libraryDependency,changes);
  final GradleMismatchedLibraryPathChange pathChange=pathChangeRef.get();
  if (commonChangesControl == null && pathChange == null) {
    return null;
  }
  if (pathChange == null) {
    return commonChangesControl;
  }
  final Library library=libraryDependency.getLibrary();
  if (library == null) {
    return commonChangesControl;
  }
  final JComponent pathConflictControl=getPathConflictControl(library,pathChange);
  if (commonChangesControl == null) {
    return pathConflictControl;
  }
  JPanel result=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.weightx=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  final JComponent commonSeparator=SeparatorFactory.createSeparator(GradleBundle.message("gradle.sync.change.dependency.common.title"),commonChangesControl);
  commonSeparator.setBackground(pathConflictControl.getBackground());
  result.add(commonSeparator,constraints);
  result.add(commonChangesControl,constraints);
  final JComponent pathSeparator=SeparatorFactory.createSeparator(GradleBundle.message("gradle.sync.change.library.path.title"),pathConflictControl);
  pathSeparator.setBackground(pathConflictControl.getBackground());
  result.add(pathSeparator,constraints);
  result.add(pathConflictControl,constraints);
  return result;
}
