{
  final Class aClass=getRawType(classType);
  int index=ContainerUtil.findByEquals(ReflectionCache.getTypeParameters(aClass),variable);
  if (index >= 0) {
    return variable;
  }
  final Class[] classes=ReflectionCache.getInterfaces(aClass);
  final Type[] genericInterfaces=ReflectionCache.getGenericInterfaces(aClass);
  for (int i=0; i < classes.length; i++) {
    Class anInterface=classes[i];
    final Type resolved=resolveVariable(variable,anInterface);
    if (resolved instanceof Class || resolved instanceof ParameterizedType) {
      return resolved;
    }
    if (resolved instanceof TypeVariable) {
      final TypeVariable typeVariable=(TypeVariable)resolved;
      index=ContainerUtil.findByEquals(ReflectionCache.getTypeParameters(anInterface),typeVariable);
      LOG.assertTrue(index >= 0,"Cannot resolve type variable:\n" + "typeVariable = " + typeVariable + "\n"+ "genericDeclaration = "+ declarationToString(typeVariable.getGenericDeclaration())+ "\n"+ "searching in "+ declarationToString(anInterface));
      final Type type=genericInterfaces[i];
      if (type instanceof Class) {
        return Object.class;
      }
      if (type instanceof ParameterizedType) {
        return ((ParameterizedType)type).getActualTypeArguments()[index];
      }
      throw new AssertionError("Invalid type: " + type);
    }
  }
  return null;
}
