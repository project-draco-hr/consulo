{
  int count=IElementType.getAllocatedTypesCount();
  System.out.println("Preloaded: " + count + " element types");
  LanguageExtensionPoint[] extensions=Extensions.getExtensions(new ExtensionPointName<LanguageExtensionPoint>("com.intellij.lang.parserDefinition"));
  System.out.println("ParserDefinitions: " + extensions.length);
  THashMap<Language,String> languageMap=new THashMap<Language,String>();
  languageMap.put(Language.ANY,"platform");
  final TObjectIntHashMap<String> map=new TObjectIntHashMap<String>();
  for (  LanguageExtensionPoint e : extensions) {
    String key=e.getPluginDescriptor().getPluginId().getIdString();
    int curCount=IElementType.getAllocatedTypesCount();
    ParserDefinition definition=(ParserDefinition)e.getInstance();
    IFileElementType type=definition.getFileNodeType();
    Language language=type.getLanguage();
    languageMap.put(language,key);
    if (language.getBaseLanguage() != null && !languageMap.containsKey(language.getBaseLanguage())) {
      languageMap.put(language.getBaseLanguage(),key);
    }
    try {
      Lexer lexer=definition.createLexer(null,Language.UNKNOWN_VERSION);
      PsiParser parser=definition.createParser(null,Language.UNKNOWN_VERSION);
    }
 catch (    UnsupportedOperationException e1) {
    }
  }
  count=IElementType.getAllocatedTypesCount();
  for (short i=0; i < count; i++) {
    IElementType type=IElementType.find(i);
    Language language=type.getLanguage();
    String key=null;
    for (Language cur=language; cur != null && key == null; cur=cur.getBaseLanguage()) {
      key=languageMap.get(cur);
    }
    key=StringUtil.notNullize(key,"unknown");
    map.put(key,map.get(key) + 1);
  }
  System.out.println("Total: " + IElementType.getAllocatedTypesCount() + " element types");
  Object[] keys=map.keys();
  Arrays.sort(keys,new Comparator<Object>(){
    @Override public int compare(    Object o1,    Object o2){
      return map.get((String)o2) - map.get((String)o1);
    }
  }
);
  int sum=0;
  for (  Object key : keys) {
    int value=map.get((String)key);
    if (value == 0)     continue;
    sum+=value;
    System.out.println("  " + key + ": "+ value);
  }
  assertTrue(IElementType.getAllocatedTypesCount() < 10000);
  assertEquals(IElementType.getAllocatedTypesCount(),sum);
}
