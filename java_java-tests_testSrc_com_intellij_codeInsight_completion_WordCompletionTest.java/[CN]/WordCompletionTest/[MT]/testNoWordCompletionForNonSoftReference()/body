{
  final PsiReferenceProviderBase softProvider=new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new PsiReference[]{new PsiReferenceBase<PsiElement>(element){
        public PsiElement resolve(){
          return null;
        }
        public boolean isSoft(){
          return true;
        }
        public Object[] getVariants(){
          return new Object[]{"MySoftVariant"};
        }
      }
};
    }
  }
;
  final PsiReferenceProviderBase hardProvider=new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new PsiReference[]{new PsiReferenceBase<PsiElement>(element){
        public PsiElement resolve(){
          return null;
        }
        public boolean isSoft(){
          return false;
        }
        public Object[] getVariants(){
          return new Object[]{"MyHardVariant"};
        }
      }
};
    }
  }
;
  ReferenceProvidersRegistry.getInstance(getProject()).registerReferenceProvider(PsiLiteralExpression.class,softProvider);
  ReferenceProvidersRegistry.getInstance(getProject()).registerReferenceProvider(PsiLiteralExpression.class,hardProvider);
  configureByFile(BASE_PATH + "3.java");
  checkResultByFile(BASE_PATH + "3_after.java");
}
