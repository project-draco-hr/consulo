{
  final PsiReferenceProvider softProvider=new PsiReferenceProvider(){
    @Override @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new PsiReference[]{new PsiReferenceBase<PsiElement>(element,true){
        @Override public PsiElement resolve(){
          return null;
        }
        @Override @NotNull public Object[] getVariants(){
          return new Object[]{"MySoftVariant"};
        }
      }
};
    }
  }
;
  final PsiReferenceProvider hardProvider=new PsiReferenceProvider(){
    @Override @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new PsiReference[]{new PsiReferenceBase<PsiElement>(element,false){
        @Override public PsiElement resolve(){
          return null;
        }
        @Override @NotNull public Object[] getVariants(){
          return new Object[]{"MyHardVariant"};
        }
      }
};
    }
  }
;
  try {
    ReferenceProvidersRegistry.getInstance().registerReferenceProvider(PsiLiteralExpression.class,softProvider);
    ReferenceProvidersRegistry.getInstance().registerReferenceProvider(PsiLiteralExpression.class,hardProvider);
    configureByFile(BASE_PATH + "3.java");
    checkResultByFile(BASE_PATH + "3_after.java");
  }
  finally {
    ReferenceProvidersRegistry.getInstance().unregisterReferenceProvider(PsiLiteralExpression.class,softProvider);
    ReferenceProvidersRegistry.getInstance().unregisterReferenceProvider(PsiLiteralExpression.class,hardProvider);
  }
}
