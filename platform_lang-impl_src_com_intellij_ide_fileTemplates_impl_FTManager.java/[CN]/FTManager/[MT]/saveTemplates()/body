{
  try {
    final File configRoot=getConfigRoot(true);
    final File[] files=configRoot.listFiles();
    final Set<String> allNames=new HashSet<String>();
    final Map<String,File> templatesOnDisk=files != null && files.length > 0 ? new HashMap<String,File>() : Collections.<String,File>emptyMap();
    if (files != null) {
      for (      File file : files) {
        if (!file.isDirectory()) {
          final String name=file.getName();
          templatesOnDisk.put(name,file);
          allNames.add(name);
        }
      }
    }
    final Map<String,FileTemplateBase> templatesToSave=new HashMap<String,FileTemplateBase>();
    for (    FileTemplateBase template : getAllTemplates(true)) {
      if (template instanceof BundledFileTemplate && !((BundledFileTemplate)template).isTextModified()) {
        continue;
      }
      final String name=template.getQualifiedName();
      templatesToSave.put(name,template);
      allNames.add(name);
    }
    if (!allNames.isEmpty()) {
      final String lineSeparator=CodeStyleSettingsManager.getSettings(ProjectManagerEx.getInstanceEx().getDefaultProject()).getLineSeparator();
      for (      String name : allNames) {
        final File customizedTemplateFile=templatesOnDisk.get(name);
        final FileTemplateBase templateToSave=templatesToSave.get(name);
        if (customizedTemplateFile == null) {
          saveTemplate(configRoot,templateToSave,lineSeparator);
        }
 else         if (templateToSave == null) {
          FileUtil.delete(customizedTemplateFile);
        }
 else {
          final String diskText=StringUtil.convertLineSeparators(FileUtil.loadFile(customizedTemplateFile,CONTENT_ENCODING));
          final String templateText=templateToSave.getText();
          if (!diskText.equals(templateText)) {
            saveTemplate(configRoot,templateToSave,lineSeparator);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Unable to save templates",e);
  }
}
