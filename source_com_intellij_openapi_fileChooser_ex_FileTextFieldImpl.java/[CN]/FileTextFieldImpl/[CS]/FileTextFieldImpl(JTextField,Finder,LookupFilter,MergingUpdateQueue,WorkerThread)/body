{
  myPathTextField=field;
  FileTextFieldImpl assigned=(FileTextFieldImpl)myPathTextField.getClientProperty(KEY);
  if (assigned != null) {
    assigned.myFinder=finder;
    assigned.myFilter=filter;
    return;
  }
  myPathTextField.putClientProperty(KEY,this);
  final boolean headless=ApplicationManager.getApplication().isUnitTestMode();
  if (uiUpdater == null) {
    myUiUpdater=new MergingUpdateQueue("FileTextField.UiUpdater",200,false,myPathTextField);
    if (!headless) {
      new UiNotifyConnector(myPathTextField,myUiUpdater);
      Disposer.register(this,myUiUpdater);
    }
  }
 else {
    myUiUpdater=uiUpdater;
  }
  if (worker == null) {
    myWorker=new WorkerThread("FileTextField.FileLocator",200);
    if (!headless) {
      myWorker.start();
      Disposer.register(this,myWorker);
    }
  }
 else {
    myWorker=worker;
  }
  myFinder=finder;
  myFilter=filter;
  myFileSpitRegExp=myFinder.getSeparator().replaceAll("\\\\","\\\\\\\\");
  myPathTextField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      processTextChanged();
    }
    public void removeUpdate(    final DocumentEvent e){
      processTextChanged();
    }
    public void changedUpdate(    final DocumentEvent e){
      processTextChanged();
    }
  }
);
  myPathTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      processListNavigation(e);
    }
  }
);
  myPathTextField.addFocusListener(new FocusAdapter(){
    public void focusLost(    final FocusEvent e){
      closePopup();
    }
  }
);
}
