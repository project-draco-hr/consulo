{
  final PsiMethod method=(PsiMethod)startElement;
  if (!FileModificationService.getInstance().prepareFileForWrite(method.getContainingFile()))   return;
  final PsiClass containingClass=method.getContainingClass();
  LOG.assertTrue(containingClass != null);
  PsiManager manager=containingClass.getManager();
  if (containingClass instanceof PsiAnonymousClass) {
    final PsiClassType baseClassType=((PsiAnonymousClass)containingClass).getBaseClassType();
    final PsiClass baseClass=baseClassType.resolve();
    if (baseClass != null && manager.isInProject(baseClass)) {
      pullUp(method,containingClass,baseClass);
    }
  }
 else {
    final LinkedHashSet<PsiClass> classesToPullUp=new LinkedHashSet<PsiClass>();
    collectClassesToPullUp(manager,classesToPullUp,containingClass.getExtendsListTypes());
    collectClassesToPullUp(manager,classesToPullUp,containingClass.getImplementsListTypes());
    if (classesToPullUp.size() == 0) {
      new ExtractInterfaceHandler().invoke(project,new PsiElement[]{containingClass},null);
    }
 else     if (classesToPullUp.size() == 1) {
      pullUp(method,containingClass,classesToPullUp.iterator().next());
    }
 else     if (editor != null) {
      NavigationUtil.getPsiElementPopup(classesToPullUp.toArray(new PsiClass[classesToPullUp.size()]),new PsiClassListCellRenderer(),"Choose super class",new PsiElementProcessor<PsiClass>(){
        @Override public boolean execute(        @NotNull PsiClass aClass){
          pullUp(method,containingClass,aClass);
          return false;
        }
      }
,classesToPullUp.iterator().next()).showInBestPositionFor(editor);
    }
  }
}
