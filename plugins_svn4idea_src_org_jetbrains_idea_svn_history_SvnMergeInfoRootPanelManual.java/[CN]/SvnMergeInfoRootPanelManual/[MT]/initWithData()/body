{
  myInclude.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myListener.run();
    }
  }
);
  final String path=myInfo.getPath();
  final String urlString=myInfo.getUrl().toString();
  myUrlText.setText(urlString);
  myFixedSelectLocal.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (mySelectedBranch != null) {
        final Pair<WorkingCopyInfo,SVNURL> info=IntegratedSelectedOptionsDialog.selectWorkingCopy(myProject,myInfo.getUrl(),mySelectedBranch.getUrl(),false);
        if (info != null) {
          final String local=info.getFirst().getLocalPath();
          myBranchToLocal.put(mySelectedBranch.getUrl(),local);
          myLocalArea.setText(local);
        }
        myListener.run();
      }
    }
  }
);
  myBranchField.getTextField().setEditable(false);
  myBranchField.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final VirtualFile vf=SvnUtil.getVirtualFile(myInfo.getPath());
      if (vf != null) {
        SelectBranchPopup.show(myProject,vf,new SelectBranchPopup.BranchSelectedCallback(){
          public void branchSelected(          final Project project,          final SvnBranchConfiguration configuration,          final String url,          final long revision){
            final String branch=SVNPathUtil.tail(url);
            myBranchField.setText(branch);
            calculateBranchPathByBranch(url);
          }
        }
,SvnBundle.message("select.branch.popup.general.title"));
        myListener.run();
      }
    }
  }
);
  if (myInfo.getBranches().isEmpty()) {
    calculateBranchPathByBranch(null);
  }
 else {
    final WCInfoWithBranches.Branch branch=myInfo.getBranches().get(0);
    final String branchName=SVNPathUtil.tail(branch.getUrl());
    myBranchField.setText(branchName);
    calculateBranchPathByBranch(branch.getUrl());
  }
}
