{
  final GrExpression[] args=list.getExpressionArguments();
  final GrNamedArgument[] namedArgs=list.getNamedArguments();
  boolean hasNamedArgs=namedArgs.length > 0;
  GrClosureParameter[] params=signature.getParameters();
  List<PsiElement>[] map=new List[params.length];
  int paramLength=params.length;
  if (hasNamedArgs) {
    if (paramLength == 0)     return null;
    PsiType type=params[0].getType();
    PsiClassType mapType=PsiUtil.createMapType(manager,scope);
    if (TypesUtil.isAssignable(mapType,type,manager,scope)) {
      paramLength--;
      map[0]=Arrays.<PsiElement>asList(namedArgs);
    }
 else {
      return null;
    }
  }
  if (args.length > paramLength && !signature.isVarargs())   return null;
  int optional=getOptionalParamCount(signature,hasNamedArgs);
  int notOptional=paramLength - optional;
  if (signature.isVarargs())   notOptional--;
  if (notOptional > args.length)   return null;
  int curParam=0;
  optional=args.length - notOptional;
  if (hasNamedArgs)   curParam++;
  for (int curArg=0; curArg < args.length; curArg++, curParam++) {
    while (optional == 0 && curParam < paramLength && params[curParam].isOptional()) {
      curParam++;
    }
    if (curParam == paramLength)     return null;
    if (params[curParam].isOptional())     optional--;
    if (TypesUtil.isAssignableByMethodCallConversion(params[curParam].getType(),args[curArg].getType(),manager,scope)) {
      map[curParam]=Collections.<PsiElement>singletonList(args[curArg]);
    }
 else {
      return null;
    }
  }
  return map;
}
