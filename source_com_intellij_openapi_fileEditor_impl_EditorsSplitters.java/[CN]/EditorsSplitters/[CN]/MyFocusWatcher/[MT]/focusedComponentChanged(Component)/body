{
  if (myInsideChange > 0) {
    return;
  }
  final EditorWindow oldActiveWindow=getCurrentWindow();
  final EditorWindow newActiveWindow=findWindowWith(component);
  final boolean currentFileChanged=getCurrentFile() != myCurrentFile;
  if (oldActiveWindow != newActiveWindow || currentFileChanged) {
    myQueue.queue(new Update("SelectionChanged"){
      public void run(){
        getManager().updateFileName(newActiveWindow == null ? null : newActiveWindow.getSelectedFile());
        if (component == null && !currentFileChanged) {
          return;
        }
        myCurrentFile=getCurrentFile();
        setCurrentWindow(newActiveWindow,false);
        EditorWithProviderComposite oldSelected=oldActiveWindow == null ? null : oldActiveWindow.getSelectedEditor();
        EditorWithProviderComposite newSelected=newActiveWindow == null ? null : newActiveWindow.getSelectedEditor();
        getManager().fireSelectionChanged(oldSelected,newSelected);
      }
    }
);
  }
}
