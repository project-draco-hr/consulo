{
  super.paintComponent(g);
  if (!myStarted)   return;
  Graphics graphics=g.create();
  try {
    int height=getHeight();
    List<Integer> wiresGroups=myModel.getWiresGroups();
    int running=0;
    if (wiresGroups.size() > 1) {
      for (int i=0; i < wiresGroups.size() - 1; i++) {
        Integer integer=wiresGroups.get(i);
        int x1=(running + integer) == 0 ? 0 : endPoint(running + integer - 1);
        graphics.setColor(UIUtil.getBorderColor());
        graphics.drawLine(x1,0,x1,height);
        running+=integer;
      }
    }
    int yOffset=(int)myTableViewPort.getViewPosition().getY();
    int integerPart=yOffset / myRowHeight;
    int firstCellPart=yOffset - integerPart * myRowHeight;
    if (firstCellPart > 0) {
      drawFirst(graphics,firstCellPart,integerPart);
    }
    int width=getWidth();
    int upBound=firstCellPart == 0 ? 0 : myRowHeight - firstCellPart;
    upBound+=myHeaderHeight;
    int idx=integerPart + (firstCellPart > 0 ? 1 : 0);
    BigTableTableModel.WiresGroupIterator groupIterator;
    try {
      groupIterator=myModel.getGroupIterator(idx);
    }
 catch (    Exception e) {
      return;
    }
    List<Integer> firstUsed=groupIterator.getFirstUsed();
    while (upBound < height && idx < myModel.getRowCount()) {
      CommitI commitAt=myModel.getCommitAt(idx);
      WireEvent eventForRow=groupIterator.getEventForRow(idx);
      if (eventForRow != null) {
      }
      if (!commitAt.holdsDecoration()) {
        int correctedWire=myModel.getCorrectedWire(commitAt);
        int startXPoint=startPoint(correctedWire);
        graphics.setColor(Color.black);
        ((Graphics2D)graphics).drawArc(startXPoint + ourLineWidth / 2 - 4,upBound + myRowHeight / 2 - 4,8,8,0,360);
        graphics.setColor(correctedWire == 0 ? Color.red : Color.yellow);
        ((Graphics2D)graphics).fillArc(startXPoint + ourLineWidth / 2 - 4,upBound + myRowHeight / 2 - 4,8,8,0,360);
      }
 else {
        graphics.setColor(Color.black);
      }
      graphics.setColor(UIUtil.getBorderColor());
      graphics.drawLine(0,upBound,width,upBound);
      ++idx;
      upBound+=myRowHeight;
    }
  }
  finally {
    graphics.dispose();
  }
}
