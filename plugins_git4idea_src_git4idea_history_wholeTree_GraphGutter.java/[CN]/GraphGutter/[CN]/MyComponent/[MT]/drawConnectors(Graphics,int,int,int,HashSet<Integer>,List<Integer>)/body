{
  final Map<VirtualFile,WireEventsIterator> groupIterators=myModel.getGroupIterators(idx);
  for (  Map.Entry<VirtualFile,WireEventsIterator> entry : groupIterators.entrySet()) {
    final WireEventsIterator eventsIterator=entry.getValue();
    int idxFrom=idx;
    int yOff=upBound;
    Set<Integer> used=new HashSet<Integer>(eventsIterator.getFirstUsed());
    final Iterator<WireEventI> iterator=eventsIterator.getWireEventsIterator();
    final int repoCorrection=myModel.getRepoCorrection(entry.getKey());
    final HashSet<Integer> wireModificationSet=new HashSet<Integer>();
    final Map<Integer,Set<Integer>> grey=myModel.getGrey(entry.getKey(),idxFrom,lastIdx,repoCorrection,wireModificationSet);
    while (iterator.hasNext()) {
      final WireEventI wireEvent=iterator.next();
      if (wireEvent.getCommitIdx() >= idx) {
        drawConnectorsFragment(graphics,idxFrom,yOff,used,wireEvent,selected,wiresGroups,grey,wireModificationSet);
        int delta=wireEvent.getCommitIdx() + 1 - idxFrom;
        delta=delta < 0 ? 0 : delta;
        yOff+=delta * myRowHeight;
        idxFrom=wireEvent.getCommitIdx() + 1;
      }
      final int[] wireEnds=wireEvent.getWireEnds();
      if (wireEnds != null) {
        for (        int wireEnd : wireEnds) {
          used.remove(Integer.valueOf(myModel.getCorrectedWire(myModel.getCommitAt(wireEnd))));
        }
      }
      if (wireEvent.isEnd()) {
        used.remove(Integer.valueOf(myModel.getCorrectedWire(myModel.getCommitAt(wireEvent.getCommitIdx()))));
      }
      final int[] commitsStarts=wireEvent.getCommitsStarts();
      if (commitsStarts != null) {
        for (        int commitsStart : commitsStarts) {
          if (commitsStart == -1)           continue;
          used.add(myModel.getCorrectedWire(myModel.getCommitAt(commitsStart)));
        }
      }
      if (wireEvent.isStart() && !wireEvent.isEnd()) {
        used.add(myModel.getCorrectedWire(myModel.getCommitAt(wireEvent.getCommitIdx())));
      }
      if (wireEvent.getCommitIdx() > lastIdx)       break;
    }
  }
}
