{
  final Color darker=new Color(35,107,178);
  final Color fill=new Color(166,220,255);
  final Color fillNotIncluded=Gray._200;
  while (idx <= lastIdx && idx < myModel.getRowCount()) {
    CommitI commitAt=myModel.getCommitAt(idx);
    final boolean contains=selected.contains(idx);
    final boolean isInActiveRoots=myModel.getActiveRoots().contains(commitAt.selectRepository(myModel.getRootsHolder().getRoots()));
    if (!commitAt.holdsDecoration() && isInActiveRoots) {
      int correctedWire=myModel.getCorrectedWire(commitAt);
      int startXPoint=startPoint(correctedWire,wiresGroups);
      final boolean inCurrentBranch=myCurrentBranchColored ? myModel.isInCurrentBranch(idx) : true;
      if (inCurrentBranch) {
        if (PresentationStyle.calm.equals(myStyle)) {
          graphics.setColor(fill);
        }
 else {
          graphics.setColor(myStyle.getColorForWire(correctedWire).brighter());
        }
      }
 else {
        graphics.setColor(fillNotIncluded);
      }
      graphics.fillArc(startXPoint + ourLineWidth / 2 - 4,upBound + myRowHeight / 2 - 4,diameter,diameter,0,360);
      if (inCurrentBranch) {
        if (PresentationStyle.calm.equals(myStyle)) {
          graphics.setColor(darker);
        }
 else {
          graphics.setColor(myStyle.getColorForWire(correctedWire));
        }
      }
 else {
        graphics.setColor(OUTLINE_NOT_INCLUDED);
      }
      graphics.drawArc(startXPoint + ourLineWidth / 2 - 4 + 1,upBound + myRowHeight / 2 - 4,diameter,diameter,0,360);
      graphics.drawArc(startXPoint + ourLineWidth / 2 - 4,upBound + myRowHeight / 2 - 4,diameter,diameter,0,360);
      if (inCurrentBranch) {
        graphics.setColor(Color.white);
        graphics.drawArc(startXPoint + ourLineWidth / 2 - 4 + 1,upBound + myRowHeight / 2 - 4 + 1,diameter - 1,diameter - 1,100,90);
      }
    }
    ++idx;
    upBound+=myRowHeight;
  }
}
