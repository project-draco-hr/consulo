{
  final String testName=getTestName(false);
  configureByFile("/refactoring/extractMethodObject/multipleExitPoints/" + testName + ".java");
  int startOffset=myEditor.getSelectionModel().getSelectionStart();
  int endOffset=myEditor.getSelectionModel().getSelectionEnd();
  PsiElement[] elements;
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(myFile,startOffset,endOffset);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(myFile,startOffset,endOffset);
  }
  final ExtractMethodObjectProcessor processor=new ExtractMethodObjectProcessor(getProject(),getEditor(),elements,"Inner");
  final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor=processor.getExtractProcessor();
  extractProcessor.setShowErrorDialogs(false);
  extractProcessor.prepare();
  extractProcessor.testRun();
  processor.setCreateInnerClass(createInnerClass);
  processor.run();
  DuplicatesImpl.processDuplicates(extractProcessor,getProject(),getEditor());
  processor.getMethod().delete();
  checkResultByFile("/refactoring/extractMethodObject/multipleExitPoints/" + testName + ".java"+ ".after");
}
