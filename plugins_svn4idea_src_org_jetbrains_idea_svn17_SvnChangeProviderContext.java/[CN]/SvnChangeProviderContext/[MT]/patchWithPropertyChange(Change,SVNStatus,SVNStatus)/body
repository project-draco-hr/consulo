{
  if (svnStatus == null)   return change;
  final SVNStatusType propertiesStatus=svnStatus.getPropertiesStatus();
  if (SVNStatusType.STATUS_CONFLICTED.equals(propertiesStatus) || SVNStatusType.CHANGED.equals(propertiesStatus) || SVNStatusType.STATUS_ADDED.equals(propertiesStatus)|| SVNStatusType.STATUS_DELETED.equals(propertiesStatus)|| SVNStatusType.STATUS_MODIFIED.equals(propertiesStatus)|| SVNStatusType.STATUS_REPLACED.equals(propertiesStatus)|| SVNStatusType.MERGED.equals(propertiesStatus)) {
    final FilePath path=ChangesUtil.getFilePath(change);
    final File ioFile=path.getIOFile();
    final SVNWCClient wcClient=myVcs.createWCClient();
    final File beforeFile=deletedStatus != null ? deletedStatus.getFile() : ioFile;
    final String beforeList=SVNStatusType.STATUS_ADDED.equals(propertiesStatus) && deletedStatus == null ? null : AbstractShowPropertiesDiffAction.getPropertyList(beforeFile,SVNRevision.BASE,wcClient);
    final String afterList=SVNStatusType.STATUS_DELETED.equals(propertiesStatus) ? null : AbstractShowPropertiesDiffAction.getPropertyList(ioFile,SVNRevision.WORKING,wcClient);
    final String beforeRevisionNu=change.getBeforeRevision() == null ? null : change.getBeforeRevision().getRevisionNumber().asString();
    final String afterRevisionNu=change.getAfterRevision() == null ? null : change.getAfterRevision().getRevisionNumber().asString();
    final Change propertyChange=new Change(beforeList == null ? null : new SimpleContentRevision(beforeList,path,beforeRevisionNu),afterList == null ? null : new SimpleContentRevision(afterList,path,afterRevisionNu),deletedStatus != null ? FileStatus.MODIFIED : SvnStatusConvertor.convertPropertyStatus(propertiesStatus));
    change.addAdditionalLayerElement(SvnChangeProvider.PROPERTY_LAYER,propertyChange);
  }
  return change;
}
