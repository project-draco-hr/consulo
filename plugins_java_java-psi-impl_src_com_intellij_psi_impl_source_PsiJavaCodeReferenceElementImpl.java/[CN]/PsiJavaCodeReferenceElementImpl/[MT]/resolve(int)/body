{
switch (kind) {
case CLASS_FQ_NAME_KIND:
{
      String text=getTextSkipWhiteSpaceAndComments();
      if (StringUtil.isEmptyOrSpaces(text))       return JavaResolveResult.EMPTY_ARRAY;
      PsiClass aClass=JavaPsiFacade.getInstance(getProject()).findClass(text,getResolveScope());
      if (aClass == null)       return JavaResolveResult.EMPTY_ARRAY;
      if (!isQualified() && text.equals(aClass.getQualifiedName())) {
        PsiFile file=getContainingFile();
        if (file instanceof PsiJavaFile && !((PsiJavaFile)file).getPackageName().isEmpty()) {
          return JavaResolveResult.EMPTY_ARRAY;
        }
      }
      return new JavaResolveResult[]{new CandidateInfo(aClass,updateSubstitutor(PsiSubstitutor.EMPTY,aClass),this,false)};
    }
case CLASS_IN_QUALIFIED_NEW_KIND:
{
    PsiElement parent=getParent();
    if (parent instanceof JavaDummyHolder) {
      parent=parent.getContext();
    }
    if (parent instanceof PsiAnonymousClass) {
      parent=parent.getParent();
    }
    final PsiExpression qualifier;
    if (parent instanceof PsiNewExpression) {
      qualifier=((PsiNewExpression)parent).getQualifier();
      LOG.assertTrue(qualifier != null);
    }
 else     if (parent instanceof PsiJavaCodeReferenceElement) {
      return JavaResolveResult.EMPTY_ARRAY;
    }
 else {
      LOG.error("Invalid java reference!");
      return JavaResolveResult.EMPTY_ARRAY;
    }
    final PsiType qualifierType=qualifier.getType();
    if (qualifierType == null)     return JavaResolveResult.EMPTY_ARRAY;
    if (!(qualifierType instanceof PsiClassType))     return JavaResolveResult.EMPTY_ARRAY;
    final JavaResolveResult result=PsiUtil.resolveGenericsClassInType(qualifierType);
    final PsiElement resultElement=result.getElement();
    if (resultElement == null)     return JavaResolveResult.EMPTY_ARRAY;
    final PsiElement classNameElement=getReferenceNameElement();
    if (!(classNameElement instanceof PsiIdentifier))     return JavaResolveResult.EMPTY_ARRAY;
    final String className=classNameElement.getText();
    final ClassResolverProcessor processor=new ClassResolverProcessor(className,this,getContainingFile());
    resultElement.processDeclarations(processor,ResolveState.initial().put(PsiSubstitutor.KEY,result.getSubstitutor()),this,this);
    return processor.getResult();
  }
case CLASS_NAME_KIND:
{
  final PsiElement classNameElement=getReferenceNameElement();
  if (!(classNameElement instanceof PsiIdentifier))   return JavaResolveResult.EMPTY_ARRAY;
  final String className=classNameElement.getText();
  final ClassResolverProcessor processor=new ClassResolverProcessor(className,this,getContainingFile());
  PsiScopesUtil.resolveAndWalk(processor,this,null);
  return processor.getResult();
}
case PACKAGE_NAME_KIND:
{
String packageName=getTextSkipWhiteSpaceAndComments();
Project project=getManager().getProject();
PsiJavaPackage aPackage=JavaPsiFacade.getInstance(project).findPackage(packageName);
if (aPackage == null || !aPackage.isValid()) {
  return JavaPsiFacade.getInstance(project).isPartOfPackagePrefix(packageName) ? CandidateInfo.RESOLVE_RESULT_FOR_PACKAGE_PREFIX_PACKAGE : JavaResolveResult.EMPTY_ARRAY;
}
return new JavaResolveResult[]{new CandidateInfo(aPackage,PsiSubstitutor.EMPTY)};
}
case CLASS_FQ_OR_PACKAGE_NAME_KIND:
case CLASS_OR_PACKAGE_NAME_KIND:
{
int classKind=kind == CLASS_OR_PACKAGE_NAME_KIND ? CLASS_NAME_KIND : CLASS_FQ_NAME_KIND;
JavaResolveResult[] result=resolve(classKind);
if (result.length == 1 && !result[0].isAccessible()) {
JavaResolveResult[] packageResult=resolve(PACKAGE_NAME_KIND);
if (packageResult.length != 0) {
  result=packageResult;
}
}
 else if (result.length == 0) {
result=resolve(PACKAGE_NAME_KIND);
}
return result;
}
}
LOG.error(this);
return JavaResolveResult.EMPTY_ARRAY;
}
