{
switch (getKind()) {
case CLASS_NAME_KIND:
case CLASS_IN_QUALIFIED_NEW_KIND:
    if (!(element instanceof PsiClass))     return false;
  break;
case CLASS_FQ_NAME_KIND:
{
  if (!(element instanceof PsiClass))   return false;
  final String qName=((PsiClass)element).getQualifiedName();
  return qName != null && qName.equals(getCanonicalText());
}
case PACKAGE_NAME_KIND:
{
if (!(element instanceof PsiJavaPackage)) return false;
final String qName=((PsiJavaPackage)element).getQualifiedName();
return qName.equals(getCanonicalText());
}
case CLASS_OR_PACKAGE_NAME_KIND:
if (element instanceof PsiJavaPackage) {
final String qName=((PsiJavaPackage)element).getQualifiedName();
return qName.equals(getCanonicalText());
}
 else if (element instanceof PsiClass) {
final PsiIdentifier nameIdentifier=((PsiClass)element).getNameIdentifier();
if (nameIdentifier == null) return false;
PsiElement nameElement=getReferenceNameElement();
return nameElement != null && nameElement.textMatches(nameIdentifier) && element.getManager().areElementsEquivalent(resolve(),element);
}
 else {
return false;
}
case CLASS_FQ_OR_PACKAGE_NAME_KIND:
if (element instanceof PsiClass) {
final String qName=((PsiClass)element).getQualifiedName();
return qName != null && qName.equals(getCanonicalText());
}
 else if (element instanceof PsiJavaPackage) {
final String qName=((PsiJavaPackage)element).getQualifiedName();
return qName.equals(getCanonicalText());
}
 else {
return false;
}
default :
LOG.assertTrue(false);
return true;
}
final ASTNode referenceNameElement=getReferenceNameNode();
if (referenceNameElement == null || referenceNameElement.getElementType() != JavaTokenType.IDENTIFIER) return false;
final String name=((PsiClass)element).getName();
return name != null && referenceNameElement.getText().equals(name) && element.getManager().areElementsEquivalent(resolve(),element);
}
