{
  logger.debug("+++ doExecuteAction - START +++");
  if (logger.isDebugEnabled()) {
    logger.debug("Current project " + project.getName());
  }
  this.project=project;
  this.clazz=clazz;
  this.psi=PsiAdapterFactory.getPsiAdapter();
  this.javaFile=psi.getSelectedJavaFile(project,psi.getPsiManager(project));
  this.config=GenerateToStringContext.getConfig();
  this.editor=psi.getSelectedEditor(project);
  this.manager=psi.getPsiManager(project);
  this.elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  this.codeStyleManager=psi.getCodeStyleManager(project);
  if (quickTemplate == null && config.isEnableTemplateQuickList()) {
    if (displayQuickTemplateDialog(insertPolicy)) {
      return;
    }
  }
  final TemplateResource template=(quickTemplate == null ? GenerateToStringContext.getConfig().getActiveTemplate() : quickTemplate);
  if (!template.isValidTemplate()) {
    Messages.showWarningDialog("The template is incompatible with this version of the plugin. See the default templates for compatible samples.","Incompatible Template");
    return;
  }
  try {
    PsiField[] filteredFields=GenerateToStringUtils.filterAvailableFields(project,psi,clazz,config.getFilterPattern());
    if (logger.isDebugEnabled())     logger.debug("Number of fields after filtering: " + filteredFields.length);
    PsiMethod[] filteredMethods=new PsiMethod[0];
    if (config.enableMethods) {
      filteredMethods=GenerateToStringUtils.filterAvailableMethods(psi,clazz,config.getFilterPattern());
      if (logger.isDebugEnabled())       logger.debug("Number of methods after filtering: " + filteredMethods.length);
    }
    if (displayMememberChooser(filteredFields.length,filteredMethods.length,template)) {
      logger.debug("Displaying member chooser dialog");
      PsiElementClassMember[] dialogMembers=GenerateToStringUtils.combineToClassMemberList(filteredFields,filteredMethods);
      final MemberChooser dialog=new MemberChooser(dialogMembers,true,true,project,false);
      dialog.setCopyJavadocVisible(false);
      dialog.selectElements(dialogMembers);
      dialog.setTitle("Choose Members for " + template.getTargetMethodName());
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          dialog.show();
          if (MemberChooser.CANCEL_EXIT_CODE == dialog.getExitCode()) {
            return;
          }
          Collection<PsiMember> selectedMembers=GenerateToStringUtils.convertClassMembersToPsiMembers(dialog.getSelectedElements());
          executeGenerateActionLater(selectedMembers,template,insertPolicy);
        }
      }
);
    }
 else {
      logger.debug("Member chooser dialog not used - either disabled in settings or no fields/methods to select after filtering");
      Collection<PsiMember> selectedMembers=Arrays.asList(GenerateToStringUtils.combineToMemberList(filteredFields,filteredMethods));
      executeGenerateAction(selectedMembers,template,insertPolicy);
    }
  }
 catch (  IncorrectOperationException e) {
    GenerateToStringUtils.handleExeption(project,e);
  }
catch (  GenerateCodeException e) {
    GenerateToStringUtils.handleExeption(project,e);
  }
  logger.debug("+++ doExecuteAction - END +++");
}
