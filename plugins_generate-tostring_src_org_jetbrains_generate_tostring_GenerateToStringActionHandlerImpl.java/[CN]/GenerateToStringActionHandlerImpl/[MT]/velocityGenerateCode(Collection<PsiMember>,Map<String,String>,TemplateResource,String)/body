{
  if (templateMacro == null) {
    return null;
  }
  StringWriter sw=new StringWriter();
  try {
    VelocityContext vc=new VelocityContext();
    logger.debug("Velocity Context - adding fields");
    vc.put("fields",ElementUtils.getOnlyAsFieldElements(project,elementFactory,psi,selectedMembers));
    logger.debug("Velocity Context - adding methods");
    vc.put("methods",ElementUtils.getOnlyAsMethodElements(elementFactory,psi,selectedMembers));
    logger.debug("Velocity Context - adding members (fields and methods)");
    List<Element> elements=ElementUtils.getOnlyAsFieldAndMethodElements(project,elementFactory,psi,selectedMembers);
    if (config.getSortElements() != 0 && !config.isUseFieldChooserDialog()) {
      Collections.sort(elements,new ElementComparator(config.getSortElements()));
    }
    vc.put("members",elements);
    ClassElement ce=ElementFactory.newClassElement(project,clazz,psi);
    vc.put("class",ce);
    if (logger.isDebugEnabled())     logger.debug("Velocity Context - adding class: " + ce);
    vc.put("classname",config.isUseFullyQualifiedName() ? ce.getQualifiedName() : ce.getName());
    vc.put("FQClassname",ce.getQualifiedName());
    if (logger.isDebugEnabled())     logger.debug("Velocity Macro:\n" + templateMacro);
    VelocityEngine velocity=VelocityFactory.getVelocityEngine();
    logger.debug("Executing velocity +++ START +++");
    velocity.evaluate(vc,sw,this.getClass().getName(),templateMacro);
    logger.debug("Executing velocity +++ END +++");
    if (vc.get("autoImportPackages") != null) {
      params.put("autoImportPackages",(String)vc.get("autoImportPackages"));
    }
    if (config.isAddImplementSerializable() && !ce.isImplements("java.io.Serializable")) {
      psi.addImplements(project,clazz,"java.io.Serializable");
    }
  }
 catch (  Exception e) {
    throw new GenerateCodeException("Error in Velocity code generator",e);
  }
  return sw.getBuffer().toString();
}
