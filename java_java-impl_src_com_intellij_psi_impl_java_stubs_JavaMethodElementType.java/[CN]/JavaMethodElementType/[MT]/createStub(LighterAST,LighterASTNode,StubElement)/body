{
  final TypeInfo typeInfo=TypeInfo.create(tree,node,parentStub);
  String name=null;
  boolean isConstructor=true;
  boolean isVarArgs=false;
  boolean isDeprecatedByComment=false;
  boolean hasDeprecatedAnnotation=false;
  String defValueText=null;
  boolean expectingDef=false;
  for (  final LighterASTNode child : tree.getChildren(node)) {
    final IElementType type=child.getTokenType();
    if (type == JavaDocElementType.DOC_COMMENT) {
      isDeprecatedByComment=RecordUtil.isDeprecatedByDocComment(tree,child);
    }
 else     if (type == JavaElementType.MODIFIER_LIST) {
      hasDeprecatedAnnotation=RecordUtil.isDeprecatedByAnnotation(tree,child);
    }
 else     if (type == JavaElementType.TYPE) {
      isConstructor=false;
    }
 else     if (type == JavaTokenType.IDENTIFIER) {
      name=RecordUtil.intern(tree.getCharTable(),child);
    }
 else     if (type == JavaElementType.PARAMETER_LIST) {
      final List<LighterASTNode> params=LightTreeUtil.getChildrenOfType(tree,child,JavaElementType.PARAMETER);
      if (params.size() > 0) {
        final LighterASTNode pType=LightTreeUtil.firstChildOfType(tree,params.get(params.size() - 1),JavaElementType.TYPE);
        if (pType != null) {
          isVarArgs=(LightTreeUtil.firstChildOfType(tree,pType,JavaTokenType.ELLIPSIS) != null);
        }
      }
    }
 else     if (type == JavaTokenType.DEFAULT_KEYWORD) {
      expectingDef=true;
    }
 else     if (expectingDef && !ElementType.JAVA_COMMENT_OR_WHITESPACE_BIT_SET.contains(type) && type != JavaTokenType.SEMICOLON && type != JavaElementType.CODE_BLOCK) {
      defValueText=LightTreeUtil.toFilteredString(tree,child,null);
      break;
    }
  }
  final boolean isAnno=(node.getTokenType() == JavaElementType.ANNOTATION_METHOD);
  final byte flags=PsiMethodStubImpl.packFlags(isConstructor,isAnno,isVarArgs,isDeprecatedByComment,hasDeprecatedAnnotation);
  return new PsiMethodStubImpl(parentStub,StringRef.fromString(name),typeInfo,flags,StringRef.fromString(defValueText));
}
