{
  SMRunnerUtil.addToInvokeLater(new Runnable(){
    public void run(){
      final String testName=ObjectUtils.assertNotNull(testFailedEvent.getName());
      final String localizedMessage=testFailedEvent.getLocalizedFailureMessage();
      final String stackTrace=testFailedEvent.getStacktrace();
      final boolean isTestError=testFailedEvent.isTestError();
      final String comparisionFailureActualText=testFailedEvent.getComparisonFailureActualText();
      final String comparisionFailureExpectedText=testFailedEvent.getComparisonFailureExpectedText();
      final boolean inDebugMode=SMTestRunnerConnectionUtil.isInDebugMode();
      final String fullTestName=getFullTestName(testName);
      SMTestProxy testProxy=getProxyByFullTestName(fullTestName);
      if (testProxy == null) {
        logProblem("Test wasn't started! TestFailure event: name = {" + testName + "}"+ ", message = {"+ localizedMessage+ "}"+ ", stackTrace = {"+ stackTrace+ "}. "+ cannotFindFullTestNameMsg(fullTestName));
        if (inDebugMode) {
          return;
        }
 else {
          if (!myFailedTestsSet.contains(testProxy)) {
            onTestStarted(new TestStartedEvent(testName,null));
            testProxy=getProxyByFullTestName(fullTestName);
          }
        }
      }
      if (testProxy == null) {
        return;
      }
      if (comparisionFailureActualText != null && comparisionFailureExpectedText != null) {
        if (myFailedTestsSet.contains(testProxy)) {
          logProblem("Duplicate failure for test [" + fullTestName + "]: msg = "+ localizedMessage+ ", stacktrace = "+ stackTrace);
          if (inDebugMode) {
            return;
          }
        }
        testProxy.setTestComparisonFailed(localizedMessage,stackTrace,comparisionFailureActualText,comparisionFailureExpectedText);
      }
 else       if (comparisionFailureActualText == null && comparisionFailureExpectedText == null) {
        testProxy.setTestFailed(localizedMessage,stackTrace,isTestError);
      }
 else {
        logProblem("Comparison failure actual and expected texts should be both null or not null.\n" + "Expected:\n" + comparisionFailureExpectedText + "\n"+ "Actual:\n"+ comparisionFailureActualText);
      }
      myFailedTestsSet.add(testProxy);
      fireOnTestFailed(testProxy);
    }
  }
);
}
