{
  final Set<InspectionTreeNode> children=new HashSet<InspectionTreeNode>();
  TreeUtil.traverseDepth(packageNode,new TreeUtil.Traverse(){
    public boolean accept(    Object node){
      children.add((InspectionTreeNode)node);
      return true;
    }
  }
);
  RefElementNode nodeToAdd=descriptor.createNode(tool);
  boolean firstLevel=true;
  RefElementNode prevNode=null;
  while (true) {
    RefElementNode currentNode=firstLevel ? nodeToAdd : descriptor.createNode(tool);
    for (    InspectionTreeNode node : children) {
      if (node instanceof RefElementNode) {
        final RefElementNode refElementNode=(RefElementNode)node;
        if (Comparing.equal(refElementNode.getUserObject(),descriptor.getUserObject())) {
          if (firstLevel) {
            return refElementNode;
          }
 else {
            refElementNode.add(prevNode);
            return nodeToAdd;
          }
        }
      }
    }
    if (!firstLevel) {
      currentNode.add(prevNode);
    }
    final Descriptor owner=descriptor.getOwner();
    if (owner == null) {
      packageNode.add(currentNode);
      return nodeToAdd;
    }
    descriptor=owner;
    prevNode=currentNode;
    firstLevel=false;
  }
}
