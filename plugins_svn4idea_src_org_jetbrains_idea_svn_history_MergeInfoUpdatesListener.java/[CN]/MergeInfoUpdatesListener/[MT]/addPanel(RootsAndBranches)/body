{
  if (myMergeInfoRefreshActions == null) {
    myMergeInfoRefreshActions=new ArrayList<RootsAndBranches>();
    myMergeInfoRefreshActions.add(action);
    myConnection.subscribe(VcsConfigurationChangeListener.BRANCHES_CHANGED,new VcsConfigurationChangeListener.Notification(){
      public void execute(      final Project project,      final VirtualFile vcsRoot){
        callReloadMergeInfo();
      }
    }
);
    final Runnable reloadRunnable=new Runnable(){
      public void run(){
        callReloadMergeInfo();
      }
    }
;
    myConnection.subscribe(SvnMapDialog.WC_CONVERTED,reloadRunnable);
    myConnection.subscribe(RootsAndBranches.REFRESH_REQUEST,reloadRunnable);
    myConnection.subscribe(SvnVcs.ROOTS_RELOADED,reloadRunnable);
    ProjectLevelVcsManager.getInstance(myProject).addVcsListener(new VcsListener(){
      public void directoryMappingChanged(){
        callReloadMergeInfo();
      }
    }
);
    myConnection.subscribe(CommittedChangesTreeBrowser.ITEMS_RELOADED,reloadRunnable);
    myConnection.subscribe(SvnMergeInfoCache.SVN_MERGE_INFO_CACHE,new SvnMergeInfoCache.SvnMergeInfoCacheListener(){
      public void copyRevisionUpdated(){
        doForEachInitialized(new Consumer<RootsAndBranches>(){
          public void consume(          final RootsAndBranches rootsAndBranches){
            rootsAndBranches.fireRepaint();
          }
        }
);
      }
    }
);
    myConnection.subscribe(Merger.COMMITTED_CHANGES_MERGED_STATE,new Merger.CommittedChangesMergedStateChanged(){
      public void event(      final List<CommittedChangeList> list){
        doForEachInitialized(new Consumer<RootsAndBranches>(){
          public void consume(          RootsAndBranches rootsAndBranches){
            rootsAndBranches.refreshByLists(list);
          }
        }
);
      }
    }
);
  }
 else {
    myMergeInfoRefreshActions.add(action);
  }
}
