{
  final PsiType variableOrMethodType;
  if (variableOrMethod instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)variableOrMethod;
    variableOrMethodType=variable.getType();
  }
 else   if (variableOrMethod instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)variableOrMethod;
    variableOrMethodType=method.getReturnType();
  }
 else {
    throw new IllegalArgumentException("PsiMethod or PsiVariable expected: " + variableOrMethod);
  }
  if (!(variableOrMethodType instanceof PsiClassType)) {
    return Collections.EMPTY_LIST;
  }
  final PsiClassType variableClassType=(PsiClassType)variableOrMethodType;
  final PsiClass variableClass=variableClassType.resolve();
  if (variableClass == null) {
    return Collections.EMPTY_LIST;
  }
  final PsiManager manager=variableOrMethod.getManager();
  final GlobalSearchScope scope=variableOrMethod.getResolveScope();
  Set<PsiClass> weakestTypeClasses=new HashSet();
  final PsiClass javaLangObjectClass=manager.findClass("java.lang.Object",scope);
  if (variableClass.equals(javaLangObjectClass)) {
    return Collections.EMPTY_LIST;
  }
  weakestTypeClasses.add(javaLangObjectClass);
  final Query<PsiReference> query=ReferencesSearch.search(variableOrMethod);
  boolean hasUsages=false;
  for (  PsiReference reference : query) {
    if (reference == null) {
      continue;
    }
    hasUsages=true;
    PsiElement referenceElement=reference.getElement();
    PsiElement referenceParent=referenceElement.getParent();
    if (referenceParent instanceof PsiMethodCallExpression) {
      referenceElement=referenceParent;
      referenceParent=referenceElement.getParent();
    }
    final PsiElement referenceGrandParent=referenceParent.getParent();
    if (referenceParent instanceof PsiExpressionList) {
      if (!(referenceGrandParent instanceof PsiMethodCallExpression)) {
        return Collections.EMPTY_LIST;
      }
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      final PsiElement methodElement=methodExpression.resolve();
      if (!(methodElement instanceof PsiMethod)) {
        return Collections.EMPTY_LIST;
      }
      final PsiMethod method=(PsiMethod)methodElement;
      if (!(referenceElement instanceof PsiExpression)) {
        return Collections.EMPTY_LIST;
      }
      final PsiExpression expression=(PsiExpression)referenceElement;
      final PsiExpressionList expressionList=(PsiExpressionList)referenceParent;
      final int index=getExpressionIndex(expression,expressionList);
      final PsiParameterList parameterList=method.getParameterList();
      final PsiParameter[] parameters=parameterList.getParameters();
      final PsiParameter parameter;
      if (index < parameters.length) {
        parameter=parameters[index];
      }
 else {
        parameter=parameters[parameters.length - 1];
      }
      final PsiType type=parameter.getType();
      if (!(type instanceof PsiClassType)) {
        return Collections.EMPTY_LIST;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (aClass == null) {
        return Collections.EMPTY_LIST;
      }
      checkClass(weakestTypeClasses,aClass);
    }
 else     if (referenceGrandParent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      final PsiElement target=methodExpression.resolve();
      if (!(target instanceof PsiMethod)) {
        return Collections.EMPTY_LIST;
      }
      final PsiMethod method=(PsiMethod)target;
      final PsiMethod[] superMethods=method.findDeepestSuperMethods();
      if (superMethods.length > 0) {
        for (        PsiMethod superMethod : superMethods) {
          final PsiClass containingClass=superMethod.getContainingClass();
          checkClass(weakestTypeClasses,containingClass);
        }
      }
 else {
        final PsiClass containingClass=method.getContainingClass();
        checkClass(weakestTypeClasses,containingClass);
      }
    }
 else     if (referenceParent instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)referenceParent;
      final PsiExpression lhs=assignmentExpression.getLExpression();
      final PsiExpression rhs=assignmentExpression.getRExpression();
      if (referenceElement.equals(rhs)) {
        final PsiType type=lhs.getType();
        if (!(type instanceof PsiClassType)) {
          return Collections.EMPTY_LIST;
        }
        final PsiClassType classType=(PsiClassType)type;
        final PsiClass aClass=classType.resolve();
        if (aClass == null) {
          return Collections.EMPTY_LIST;
        }
        checkClass(weakestTypeClasses,aClass);
      }
    }
 else     if (referenceParent instanceof PsiVariable) {
      final PsiVariable variable=(PsiVariable)referenceParent;
      final PsiType type=variable.getType();
      if (!(type instanceof PsiClassType)) {
        return Collections.EMPTY_LIST;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (aClass == null) {
        return Collections.EMPTY_LIST;
      }
      checkClass(weakestTypeClasses,aClass);
    }
 else     if (referenceParent instanceof PsiForeachStatement) {
      final PsiForeachStatement foreachStatement=(PsiForeachStatement)referenceParent;
      if (foreachStatement.getIteratedValue() != referenceElement) {
        return Collections.EMPTY_LIST;
      }
      final PsiClass javaLangIterableClass=manager.findClass("java.lang.Iterable",scope);
      if (javaLangIterableClass == null) {
        return Collections.EMPTY_LIST;
      }
      checkClass(weakestTypeClasses,javaLangIterableClass);
    }
 else     if (referenceParent instanceof PsiReturnStatement) {
      final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(referenceParent,PsiMethod.class);
      if (containingMethod == null) {
        return Collections.EMPTY_LIST;
      }
      final PsiType type=containingMethod.getReturnType();
      if (!(type instanceof PsiClassType)) {
        return Collections.EMPTY_LIST;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (aClass == null) {
        return Collections.EMPTY_LIST;
      }
      checkClass(weakestTypeClasses,aClass);
    }
    if (weakestTypeClasses.contains(variableClass)) {
      return Collections.EMPTY_LIST;
    }
  }
  if (!hasUsages) {
    return Collections.EMPTY_LIST;
  }
  weakestTypeClasses=filterVisibleClasses(weakestTypeClasses,variableOrMethod);
  return Collections.unmodifiableCollection(weakestTypeClasses);
}
