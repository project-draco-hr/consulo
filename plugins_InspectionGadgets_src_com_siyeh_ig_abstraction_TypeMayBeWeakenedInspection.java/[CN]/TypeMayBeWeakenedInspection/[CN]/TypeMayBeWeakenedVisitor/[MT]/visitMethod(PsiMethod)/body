{
  super.visitMethod(method);
  if (isOnTheFly() && !method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  final Query<MethodSignatureBackedByPsiMethod> search=SuperMethodsSearch.search(method,null,true,false);
  if (search.findFirst() != null) {
    return;
  }
  final Collection<PsiClass> weakestClasses=calculateWeakestClassesNecessary(method);
  if (weakestClasses.isEmpty()) {
    return;
  }
  registerMethodError(method,method,weakestClasses);
}
