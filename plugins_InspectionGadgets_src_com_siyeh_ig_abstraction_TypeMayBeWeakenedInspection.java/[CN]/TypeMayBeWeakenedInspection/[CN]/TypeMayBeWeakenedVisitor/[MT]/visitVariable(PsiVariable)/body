{
  super.visitVariable(variable);
  if (variable instanceof PsiParameter) {
    final PsiParameter parameter=(PsiParameter)variable;
    final PsiElement declarationScope=parameter.getDeclarationScope();
    if (declarationScope instanceof PsiCatchSection) {
      return;
    }
 else     if (declarationScope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)declarationScope;
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass == null || containingClass.isInterface()) {
        return;
      }
      final Query<MethodSignatureBackedByPsiMethod> superSearch=SuperMethodsSearch.search(method,null,true,false);
      if (superSearch.findFirst() != null) {
        return;
      }
      final Query<PsiMethod> overridingSearch=OverridingMethodsSearch.search(method);
      if (overridingSearch.findFirst() != null) {
        return;
      }
    }
  }
  if (isOnTheFly() && variable instanceof PsiField) {
    if (!variable.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
  }
  if (useRighthandTypeAsWeakestTypeInAssignments) {
    if (variable instanceof PsiParameter) {
      final PsiElement parent=variable.getParent();
      if (parent instanceof PsiForeachStatement) {
        final PsiForeachStatement foreachStatement=(PsiForeachStatement)parent;
        final PsiExpression iteratedValue=foreachStatement.getIteratedValue();
        if (!(iteratedValue instanceof PsiNewExpression) && !(iteratedValue instanceof PsiTypeCastExpression)) {
          return;
        }
      }
    }
 else {
      final PsiExpression initializer=variable.getInitializer();
      if (!(initializer instanceof PsiNewExpression) && !(initializer instanceof PsiTypeCastExpression)) {
        return;
      }
    }
  }
  final Collection<PsiClass> weakestClasses=WeakestTypeFinder.calculateWeakestClassesNecessary(variable,useRighthandTypeAsWeakestTypeInAssignments,useParameterizedTypeForCollectionMethods);
  if (doNotWeakenToJavaLangObject) {
    final Project project=variable.getProject();
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiClass javaLangObjectClass=facade.findClass(CommonClassNames.JAVA_LANG_OBJECT,variable.getResolveScope());
    weakestClasses.remove(javaLangObjectClass);
  }
  if (onlyWeakentoInterface) {
    for (Iterator<PsiClass> iterator=weakestClasses.iterator(); iterator.hasNext(); ) {
      final PsiClass weakestClass=iterator.next();
      if (!weakestClass.isInterface()) {
        iterator.remove();
      }
    }
  }
  if (weakestClasses.isEmpty()) {
    return;
  }
  registerVariableError(variable,variable,weakestClasses);
}
