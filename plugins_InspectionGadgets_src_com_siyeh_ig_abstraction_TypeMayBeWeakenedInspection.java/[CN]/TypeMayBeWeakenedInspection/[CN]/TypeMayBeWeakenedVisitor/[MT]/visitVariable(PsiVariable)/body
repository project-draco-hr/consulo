{
  super.visitVariable(variable);
  if (isOnTheFly() && variable instanceof PsiField) {
    if (!variable.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
  }
  final Collection<PsiClass> weakestClasses=calculateWeakestClassesNecessary(variable);
  if (weakestClasses.isEmpty()) {
    return;
  }
  registerVariableError(variable,variable,weakestClasses);
}
