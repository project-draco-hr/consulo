{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiTypeElement typeElement;
  if (parent instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)parent;
    typeElement=variable.getTypeElement();
  }
 else   if (parent instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)parent;
    typeElement=method.getReturnTypeElement();
  }
 else {
    return;
  }
  if (typeElement == null) {
    return;
  }
  final PsiType oldType=typeElement.getType();
  if (!(oldType instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)oldType;
  final PsiType[] parameterTypes=classType.getParameters();
  final PsiManager manager=element.getManager();
  final GlobalSearchScope scope=element.getResolveScope();
  final PsiClass aClass=manager.findClass(fqClassName,scope);
  if (aClass == null) {
    return;
  }
  final PsiTypeParameter[] typeParameters=aClass.getTypeParameters();
  final PsiElementFactory factory=manager.getElementFactory();
  final PsiClassType type;
  if (typeParameters.length != 0 && typeParameters.length == parameterTypes.length) {
    final Map<PsiTypeParameter,PsiType> typeParameterMap=new HashMap();
    for (int i=0; i < typeParameters.length; i++) {
      PsiTypeParameter typeParameter=typeParameters[i];
      PsiType parameterType=parameterTypes[i];
      typeParameterMap.put(typeParameter,parameterType);
    }
    final PsiSubstitutor substitutor=factory.createSubstitutor(typeParameterMap);
    type=factory.createType(aClass,substitutor);
  }
 else {
    type=factory.createTypeByFQClassName(fqClassName,scope);
  }
  final PsiTypeElement newTypeElement=factory.createTypeElement(type);
  typeElement.replace(newTypeElement);
}
