{
  if (!editor.getSelectionModel().hasSelection()) {
    editor.getSelectionModel().selectLineAtCaret();
  }
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement element1=file.findElementAt(startOffset);
  PsiElement element2=file.findElementAt(endOffset - 1);
  if (element1 == null || element2 == null)   return null;
  TextRange textRange=new TextRange(startOffset,endOffset);
  for (  SurroundWithRangeAdjuster adjuster : Extensions.getExtensions(SurroundWithRangeAdjuster.EP_NAME)) {
    textRange=adjuster.adjustSurroundWithRange(file,textRange);
    if (textRange == null)     return null;
  }
  startOffset=textRange.getStartOffset();
  endOffset=textRange.getEndOffset();
  element1=file.findElementAt(startOffset);
  final Language baseLanguage=file.getViewProvider().getBaseLanguage();
  final Language l=element1.getParent().getLanguage();
  List<SurroundDescriptor> surroundDescriptors=new ArrayList<SurroundDescriptor>();
  surroundDescriptors.addAll(LanguageSurrounders.INSTANCE.allForLanguage(l));
  if (l != baseLanguage)   surroundDescriptors.addAll(LanguageSurrounders.INSTANCE.allForLanguage(baseLanguage));
  if (surrounder != null) {
    invokeSurrounderInTests(project,editor,file,surrounder,startOffset,endOffset,surroundDescriptors);
    return null;
  }
  for (  SurroundDescriptor descriptor : surroundDescriptors) {
    final PsiElement[] elements=descriptor.getElementsToSurround(file,startOffset,endOffset);
    if (elements.length > 0) {
      List<AnAction> applicable=buildSurroundActions(project,editor,file,descriptor.getSurrounders(),elements);
      if (applicable != null) {
        return applicable;
      }
    }
  }
  return buildSurroundActions(project,editor,file,new Surrounder[0],new PsiElement[0]);
}
