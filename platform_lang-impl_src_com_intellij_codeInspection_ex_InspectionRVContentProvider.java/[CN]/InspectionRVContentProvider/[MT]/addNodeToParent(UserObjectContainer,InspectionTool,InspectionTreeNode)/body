{
  final RefElementNode nodeToBeAdded=container.createNode(tool);
  final Ref<Boolean> firstLevel=new Ref<Boolean>(true);
  RefElementNode prevNode=null;
  final Ref<RefElementNode> result=new Ref<RefElementNode>();
  while (true) {
    final RefElementNode currentNode=firstLevel.get() ? nodeToBeAdded : container.createNode(tool);
    final UserObjectContainer finalContainer=container;
    final RefElementNode finalPrevNode=prevNode;
    TreeUtil.traverseDepth(parentNode,new TreeUtil.Traverse(){
      @Override public boolean accept(      Object node){
        if (node instanceof RefElementNode) {
          final RefElementNode refElementNode=(RefElementNode)node;
          if (finalContainer.areEqual(refElementNode.getUserObject(),finalContainer.getUserObject())) {
            if (firstLevel.get()) {
              result.set(refElementNode);
              return false;
            }
 else {
              insertByIndex(finalPrevNode,refElementNode);
              result.set(nodeToBeAdded);
              return false;
            }
          }
        }
        return true;
      }
    }
);
    if (!result.isNull())     return result.get();
    if (!firstLevel.get()) {
      insertByIndex(prevNode,currentNode);
    }
    final UserObjectContainer owner=container.getOwner();
    if (owner == null) {
      insertByIndex(currentNode,parentNode);
      return nodeToBeAdded;
    }
    container=owner;
    prevNode=currentNode;
    firstLevel.set(false);
  }
}
