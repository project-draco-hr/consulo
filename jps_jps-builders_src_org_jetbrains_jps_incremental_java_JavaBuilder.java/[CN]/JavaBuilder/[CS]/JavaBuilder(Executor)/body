{
  super(BuilderCategory.TRANSLATOR);
  myTaskRunner=tasksExecutor;
  myClassProcessors.add(new ClassPostProcessor(){
    public void process(    CompileContext context,    OutputFileObject out){
      final OutputFileObject.Content content=out.getContent();
      final File srcFile=out.getSourceFile();
      if (srcFile != null && content != null) {
        final String outputPath=FileUtil.toSystemIndependentName(out.getFile().getPath());
        final String sourcePath=FileUtil.toSystemIndependentName(srcFile.getPath());
        final RootDescriptor moduleAndRoot=context.getModuleAndRoot(srcFile);
        final BuildDataManager dataManager=context.getDataManager();
        boolean isTemp=false;
        if (moduleAndRoot != null) {
          isTemp=moduleAndRoot.isTemp;
          if (!isTemp) {
            try {
              dataManager.getSourceToOutputMap(moduleAndRoot.module,context.isCompilingTests()).appendData(sourcePath,outputPath);
            }
 catch (            Exception e) {
              context.processMessage(new CompilerMessage(BUILDER_NAME,e));
            }
          }
        }
        out.setTemp(isTemp);
        if (!isTemp && out.getKind() == JavaFileObject.Kind.CLASS) {
          final Callbacks.Backend callback=DELTA_MAPPINGS_CALLBACK_KEY.get(context);
          if (callback != null) {
            final ClassReader reader=new ClassReader(content.getBuffer(),content.getOffset(),content.getLength());
            callback.associate(outputPath,sourcePath,reader);
          }
        }
      }
    }
  }
);
}
