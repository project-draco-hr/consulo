{
  myJavacCompiler=new EmbeddedJavac(tasksExecutor);
  myJavacCompiler.addClassProcessor(new EmbeddedJavac.ClassPostProcessor(){
    public void process(    CompileContext context,    OutputFileObject out){
      final Callbacks.Backend callback=DELTA_MAPPINGS_CALLBACK_KEY.get(context);
      if (callback != null) {
        final OutputFileObject.Content content=out.getContent();
        final File srcFile=out.getSourceFile();
        if (srcFile != null && content != null) {
          final String outputPath=FileUtil.toSystemIndependentName(out.getFile().getPath());
          final String sourcePath=FileUtil.toSystemIndependentName(srcFile.getPath());
          final RootDescriptor moduleAndRoot=context.getModuleAndRoot(srcFile);
          final BuildDataManager dataManager=context.getDataManager();
          if (moduleAndRoot != null) {
            try {
              final String moduleName=moduleAndRoot.module.getName().toLowerCase(Locale.US);
              dataManager.getSourceToOutputMap(moduleName,context.isCompilingTests()).appendData(sourcePath,outputPath);
            }
 catch (            Exception e) {
              context.processMessage(new CompilerMessage(BUILDER_NAME,e));
            }
          }
          final ClassReader reader=new ClassReader(content.getBuffer(),content.getOffset(),content.getLength());
synchronized (dataManager.getMappings()) {
            callback.associate(outputPath,Callbacks.getDefaultLookup(sourcePath),reader);
          }
        }
      }
    }
  }
);
}
