{
  final CompilerMessage.Kind kind;
switch (diagnostic.getKind()) {
case ERROR:
    kind=BuildMessage.Kind.ERROR;
  myErrorCount++;
break;
case MANDATORY_WARNING:
case WARNING:
case NOTE:
kind=BuildMessage.Kind.WARNING;
myWarningCount++;
break;
default :
kind=BuildMessage.Kind.INFO;
}
File sourceFile=null;
try {
final JavaFileObject source=diagnostic.getSource();
sourceFile=source != null ? Utils.convertToFile(source.toUri()) : null;
}
 catch (Exception e) {
LOG.info(e);
}
final String srcPath=sourceFile != null ? FileUtil.toSystemIndependentName(sourceFile.getPath()) : null;
String message=diagnostic.getMessage(Locale.US);
if (Utils.IS_TEST_MODE) {
LOG.info(message);
}
myContext.processMessage(new CompilerMessage(BUILDER_NAME,kind,message,srcPath,diagnostic.getStartPosition(),diagnostic.getEndPosition(),diagnostic.getPosition(),diagnostic.getLineNumber(),diagnostic.getColumnNumber()));
}
