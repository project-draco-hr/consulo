{
  final List<String> options=getCompilationOptions(context);
  final ClassProcessingConsumer classesConsumer=new ClassProcessingConsumer(context,outputSink);
  try {
    final boolean rc;
    if (USE_EMBEDDED_JAVAC) {
      rc=JavacMain.compile(options,files,classpath,platformCp,sourcePath,outs,diagnosticSink,classesConsumer,context.getCancelStatus());
    }
 else {
      final JavacServerClient client=ensureJavacServerLaunched(context);
      final RequestFuture<JavacServerResponseHandler> future=client.sendCompileRequest(options,files,classpath,platformCp,sourcePath,outs,diagnosticSink,classesConsumer);
      try {
        future.get();
      }
 catch (      InterruptedException e) {
        e.printStackTrace(System.err);
      }
catch (      ExecutionException e) {
        e.printStackTrace(System.err);
      }
      rc=future.getResponseHandler().isTerminatedSuccessfully();
    }
    return rc;
  }
  finally {
    classesConsumer.ensurePendingTasksCompleted();
  }
}
