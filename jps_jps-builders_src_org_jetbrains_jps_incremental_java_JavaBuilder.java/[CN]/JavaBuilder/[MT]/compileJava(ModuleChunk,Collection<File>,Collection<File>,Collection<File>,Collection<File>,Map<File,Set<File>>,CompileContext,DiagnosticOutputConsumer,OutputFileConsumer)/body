{
  LOG.info("Compiling " + files.size() + " java files");
  final List<String> options=getCompilationOptions(context,chunk);
  final ClassProcessingConsumer classesConsumer=new ClassProcessingConsumer(context,outputSink);
  try {
    final boolean rc;
    if (context.getBuilderParameter(GlobalOptions.USE_EXTERNAL_JAVAC_OPTION) == null) {
      rc=JavacMain.compile(options,files,classpath,platformCp,sourcePath,outs,diagnosticSink,classesConsumer,context.getCancelStatus());
    }
 else {
      final JavacServerClient client=ensureJavacServerLaunched(context);
      final RequestFuture<JavacServerResponseHandler> future=client.sendCompileRequest(options,files,classpath,platformCp,sourcePath,outs,diagnosticSink,classesConsumer);
      while (!future.waitFor(100L,TimeUnit.MILLISECONDS)) {
        if (context.isCanceled()) {
          future.cancel(false);
        }
      }
      rc=future.getResponseHandler().isTerminatedSuccessfully();
    }
    return rc;
  }
  finally {
    ensurePendingTasksCompleted();
  }
}
