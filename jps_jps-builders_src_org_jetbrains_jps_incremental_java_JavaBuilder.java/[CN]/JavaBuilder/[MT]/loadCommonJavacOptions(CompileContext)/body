{
  final List<String> options=new ArrayList<String>();
  final List<String> vmOptions=new ArrayList<String>();
  final Project project=context.getProject();
  final CompilerConfiguration compilerConfig=project.getCompilerConfiguration();
  final Map<String,String> opts=useEclipseCompiler(context) ? compilerConfig.getEclipseOptions() : compilerConfig.getJavacOptions();
  final boolean debugInfo=!"false".equals(opts.get("DEBUGGING_INFO"));
  final boolean nowarn="true".equals(opts.get("GENERATE_NO_WARNINGS"));
  final boolean deprecation=!"false".equals(opts.get("DEPRECATION"));
  if (debugInfo) {
    options.add("-g");
  }
  if (deprecation) {
    options.add("-deprecation");
  }
  if (nowarn) {
    options.add("-nowarn");
  }
  final String customArgs=opts.get("ADDITIONAL_OPTIONS_STRING");
  if (customArgs != null) {
    final StringTokenizer customOptsTokenizer=new StringTokenizer(customArgs," \t\r\n");
    boolean skip=false;
    while (customOptsTokenizer.hasMoreTokens()) {
      final String userOption=customOptsTokenizer.nextToken();
      if (FILTERED_OPTIONS.contains(userOption)) {
        skip=true;
        continue;
      }
      if (!skip) {
        if (!FILTERED_SINGLE_OPTIONS.contains(userOption)) {
          if (userOption.startsWith("-J-")) {
            vmOptions.add(userOption.substring("-J".length()));
          }
 else {
            options.add(userOption);
          }
        }
      }
    }
  }
  JAVAC_OPTIONS.set(context,options);
  JAVAC_VM_OPTIONS.set(context,vmOptions);
}
