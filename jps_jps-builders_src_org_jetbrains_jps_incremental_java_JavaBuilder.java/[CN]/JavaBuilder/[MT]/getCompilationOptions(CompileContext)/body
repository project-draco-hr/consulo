{
  final List<String> options=new ArrayList<String>();
  options.add("-verbose");
  final Project project=context.getProject();
  final Map<String,String> javacOpts=project.getCompilerConfiguration().getJavacOptions();
  final boolean debugInfo=!"false".equals(javacOpts.get("DEBUGGING_INFO"));
  final boolean nowarn="true".equals(javacOpts.get("GENERATE_NO_WARNINGS"));
  final boolean deprecation=!"false".equals(javacOpts.get("DEPRECATION"));
  if (debugInfo) {
    options.add("-g");
  }
  if (deprecation) {
    options.add("-deprecation");
  }
  if (nowarn) {
    options.add("-nowarn");
  }
  final String customArgs=javacOpts.get("ADDITIONAL_OPTIONS_STRING");
  boolean isEncodingSet=false;
  if (customArgs != null) {
    final StringTokenizer tokenizer=new StringTokenizer(customArgs," \t\r\n");
    while (tokenizer.hasMoreTokens()) {
      final String token=tokenizer.nextToken();
      if ("-g".equals(token) || "-deprecation".equals(token) || "-nowarn".equals(token)|| "-verbose".equals(token)) {
        continue;
      }
      options.add(token);
      if ("-encoding".equals(token)) {
        isEncodingSet=true;
      }
    }
  }
  if (!isEncodingSet && !StringUtil.isEmpty(project.getProjectCharset())) {
    options.add("-encoding");
    options.add(project.getProjectCharset());
  }
  return options;
}
