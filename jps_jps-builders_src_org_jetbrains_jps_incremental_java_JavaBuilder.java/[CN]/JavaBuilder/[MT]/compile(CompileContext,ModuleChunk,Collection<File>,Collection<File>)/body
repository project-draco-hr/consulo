{
  ExitCode exitCode=ExitCode.OK;
  final boolean hasSourcesToCompile=!files.isEmpty() || !forms.isEmpty();
  if (!hasSourcesToCompile && !context.hasRemovedSources()) {
    return exitCode;
  }
  final ProjectPaths paths=context.getProjectPaths();
  final boolean addNotNullAssertions=context.getProject().getCompilerConfiguration().isAddNotNullAssertions();
  final Collection<File> classpath=paths.getCompilationClasspath(chunk,context.isCompilingTests(),false);
  final Collection<File> platformCp=paths.getPlatformCompilationClasspath(chunk,context.isCompilingTests(),false);
  final Map<File,Set<File>> outs=buildOutputDirectoriesMap(context,chunk);
  final DiagnosticSink diagnosticSink=new DiagnosticSink(context);
  final OutputFilesSink outputSink=new OutputFilesSink(context);
  final Mappings delta=context.createDelta();
  DELTA_MAPPINGS_CALLBACK_KEY.set(context,delta.getCallback());
  try {
    if (hasSourcesToCompile) {
      final Set<File> sourcePath=TEMPORARY_SOURCE_ROOTS_KEY.get(context,Collections.<File>emptySet());
      final boolean compiledOk=compileJava(chunk,files,classpath,platformCp,sourcePath,outs,context,diagnosticSink,outputSink);
      final Map<File,String> chunkSourcePath=ProjectPaths.getSourceRootsWithDependents(chunk,context.isCompilingTests());
      final ClassLoader compiledClassesLoader=createInstrumentationClassLoader(classpath,platformCp,chunkSourcePath,outputSink);
      if (!forms.isEmpty()) {
        try {
          context.processMessage(new ProgressMessage("Instrumenting forms [" + chunk.getName() + "]"));
          instrumentForms(context,chunk,chunkSourcePath,compiledClassesLoader,forms,outputSink);
        }
  finally {
          context.processMessage(new ProgressMessage("Finished instrumenting forms [" + chunk.getName() + "]"));
        }
      }
      if (addNotNullAssertions) {
        try {
          context.processMessage(new ProgressMessage("Adding NotNull assertions [" + chunk.getName() + "]"));
          instrumentNotNull(context,outputSink,compiledClassesLoader);
        }
  finally {
          context.processMessage(new ProgressMessage("Finished adding NotNull assertions [" + chunk.getName() + "]"));
        }
      }
      if (!compiledOk && diagnosticSink.getErrorCount() == 0) {
        diagnosticSink.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR,"Compilation failed: internal java compiler error"));
      }
      if (diagnosticSink.getErrorCount() > 0) {
        throw new ProjectBuildException("Compilation failed: errors: " + diagnosticSink.getErrorCount() + "; warnings: "+ diagnosticSink.getWarningCount());
      }
    }
  }
  finally {
    outputSink.writePendingData();
    final Set<File> successfullyCompiled=outputSink.getSuccessfullyCompiled();
    DELTA_MAPPINGS_CALLBACK_KEY.set(context,null);
    if (updateMappings(context,delta,chunk,files,successfullyCompiled)) {
      exitCode=ExitCode.ADDITIONAL_PASS_REQUIRED;
    }
  }
  if (exitCode != ExitCode.ADDITIONAL_PASS_REQUIRED) {
    final Set<File> tempRoots=TEMPORARY_SOURCE_ROOTS_KEY.get(context);
    TEMPORARY_SOURCE_ROOTS_KEY.set(context,null);
    if (tempRoots != null && tempRoots.size() > 0) {
      FileUtil.asyncDelete(tempRoots);
    }
  }
  return exitCode;
}
