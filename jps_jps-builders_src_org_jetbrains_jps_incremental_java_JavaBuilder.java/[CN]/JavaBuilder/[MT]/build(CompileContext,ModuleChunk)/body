{
  try {
    final Set<File> filesToCompile=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    final Set<File> formsToCompile=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    FSOperations.processFilesToRecompile(context,chunk,new FileProcessor(){
      public boolean apply(      ModuleBuildTarget target,      File file,      String sourceRoot) throws IOException {
        if (JAVA_SOURCES_FILTER.accept(file)) {
          filesToCompile.add(file);
        }
 else         if (FORM_SOURCES_FILTER.accept(file)) {
          formsToCompile.add(file);
        }
        return true;
      }
    }
);
    final JpsCompilerExcludes excludes=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(context.getProjectDescriptor().jpsProject).getCompilerExcludes();
    if (!context.isProjectRebuild()) {
      for (Iterator<File> formsIterator=formsToCompile.iterator(); formsIterator.hasNext(); ) {
        final File form=formsIterator.next();
        final RootDescriptor descriptor=context.getProjectDescriptor().rootsIndex.getModuleAndRoot(context,form);
        if (descriptor == null) {
          continue;
        }
        for (        RootDescriptor rd : context.getProjectDescriptor().rootsIndex.getModuleRoots(context,descriptor.target.getModule())) {
          final File boundSource=getBoundSource(rd.root,form);
          if (boundSource == null) {
            continue;
          }
          if (!excludes.isExcluded(boundSource)) {
            filesToCompile.add(boundSource);
          }
 else {
            formsIterator.remove();
          }
          break;
        }
      }
      final SourceToFormMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
      for (      File srcFile : filesToCompile) {
        final String srcPath=srcFile.getPath();
        final String formPath=sourceToFormMap.getState(srcPath);
        if (formPath == null) {
          continue;
        }
        final File formFile=new File(formPath);
        if (!excludes.isExcluded(formFile)) {
          if (formFile.exists()) {
            FSOperations.markDirty(context,formFile);
            formsToCompile.add(formFile);
          }
          sourceToFormMap.remove(srcPath);
        }
      }
    }
    final JavaBuilderLogger logger=context.getLoggingManager().getJavaBuilderLogger();
    if (logger.isEnabled() && context.isMake()) {
      if (filesToCompile.size() > 0) {
        logFiles(filesToCompile,logger,"Compiling files:");
      }
      if (!formsToCompile.isEmpty()) {
        logFiles(formsToCompile,logger,"Compiling forms:");
      }
    }
    return compile(context,chunk,filesToCompile,formsToCompile);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    String message=e.getMessage();
    if (message == null) {
      final ByteArrayOutputStream out=new ByteArrayOutputStream();
      e.printStackTrace(new PrintStream(out));
      message="Internal error: \n" + out.toString();
    }
    context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,message));
    throw new ProjectBuildException(message,e);
  }
}
