{
  try {
    final Map<File,Module> filesToCompile=new HashMap<File,Module>();
    final List<File> formsToCompile=new ArrayList<File>();
    context.processFilesToRecompile(chunk,new FileProcessor(){
      public boolean apply(      Module module,      File file,      String sourceRoot) throws Exception {
        if (JAVA_SOURCES_FILTER.accept(file)) {
          filesToCompile.put(file,module);
        }
 else         if (FORM_SOURCES_FILTER.accept(file)) {
          formsToCompile.add(file);
        }
        return true;
      }
    }
);
    for (    File form : formsToCompile) {
      final RootDescriptor descriptor=context.getModuleAndRoot(form);
      if (descriptor != null) {
        for (        RootDescriptor rd : context.getModuleRoots(descriptor.module)) {
          final File boundSource=getBoundSource(rd.root,form);
          if (boundSource != null) {
            filesToCompile.put(boundSource,rd.module);
            break;
          }
        }
      }
    }
    final SourceToFormMapping sourceToFormMap=context.getDataManager().getSourceToFormMap();
    for (    File srcFile : filesToCompile.keySet()) {
      final String srcPath=srcFile.getPath();
      final String formPath=sourceToFormMap.getState(srcPath);
      if (formPath != null) {
        final File formFile=new File(formPath);
        if (formFile.exists()) {
          context.markDirty(formFile);
          formsToCompile.add(formFile);
        }
        sourceToFormMap.remove(srcPath);
      }
    }
    deleteCorrespondingOutputFiles(context,filesToCompile);
    return compile(context,chunk,filesToCompile.keySet(),formsToCompile);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    String message=e.getMessage();
    if (message == null) {
      final ByteArrayOutputStream out=new ByteArrayOutputStream();
      e.printStackTrace(new PrintStream(out));
      message="Internal error: \n" + out.toString();
    }
    context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,message));
    throw new ProjectBuildException(message,e);
  }
}
