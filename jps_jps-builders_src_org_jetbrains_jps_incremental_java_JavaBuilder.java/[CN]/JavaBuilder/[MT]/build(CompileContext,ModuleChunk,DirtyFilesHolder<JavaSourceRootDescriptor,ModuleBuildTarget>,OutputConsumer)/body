{
  final JpsProject project=context.getProjectDescriptor().getProject();
  final JpsJavaCompilerConfiguration configuration=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project);
  final String compilerId=configuration.getJavaCompilerId();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Java compiler ID: " + compilerId);
  }
  if (JavaCompilers.ECLIPSE_ID.equals(compilerId) || JavaCompilers.ECLIPSE_EMBEDDED_ID.equals(compilerId)) {
    context.putUserData(USE_ECLIPSE_COMPILER,true);
  }
 else   if (!(JavaCompilers.JAVAC_ID.equals(compilerId) || JavaCompilers.JAVAC_API_ID.equals(compilerId))) {
    return ExitCode.NOTHING_DONE;
  }
  try {
    final Set<File> filesToCompile=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    final Set<File> formsToCompile=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor,ModuleBuildTarget>(){
      public boolean apply(      ModuleBuildTarget target,      File file,      JavaSourceRootDescriptor descriptor) throws IOException {
        if (JAVA_SOURCES_FILTER.accept(file)) {
          filesToCompile.add(file);
        }
 else         if (FORM_SOURCES_FILTER.accept(file)) {
          formsToCompile.add(file);
        }
        return true;
      }
    }
);
    final JpsCompilerExcludes excludes=configuration.getCompilerExcludes();
    if (!context.isProjectRebuild()) {
      for (Iterator<File> formsIterator=formsToCompile.iterator(); formsIterator.hasNext(); ) {
        final File form=formsIterator.next();
        final JavaSourceRootDescriptor descriptor=context.getProjectDescriptor().getBuildRootIndex().findJavaRootDescriptor(context,form);
        if (descriptor == null) {
          continue;
        }
        for (        JavaSourceRootDescriptor rd : context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(descriptor.target,context)) {
          final File boundSource=getBoundSource(rd.root,form);
          if (boundSource == null) {
            continue;
          }
          if (!excludes.isExcluded(boundSource)) {
            filesToCompile.add(boundSource);
          }
 else {
            formsIterator.remove();
          }
          break;
        }
      }
      final OneToManyPathsMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
      for (      File srcFile : filesToCompile) {
        final String srcPath=srcFile.getPath();
        final Collection<String> boundForms=sourceToFormMap.getState(srcPath);
        if (boundForms != null) {
          for (          String formPath : boundForms) {
            final File formFile=new File(formPath);
            if (!excludes.isExcluded(formFile)) {
              if (formFile.exists()) {
                FSOperations.markDirty(context,formFile);
                formsToCompile.add(formFile);
              }
            }
          }
          sourceToFormMap.remove(srcPath);
        }
      }
    }
    final ProjectBuilderLogger logger=context.getLoggingManager().getProjectBuilderLogger();
    if (logger.isEnabled() && context.isMake()) {
      if (filesToCompile.size() > 0) {
        logger.logCompiledFiles(filesToCompile,BUILDER_NAME,"Compiling files:");
      }
      if (!formsToCompile.isEmpty()) {
        logger.logCompiledFiles(formsToCompile,FORMS_BUILDER_NAME,"Compiling forms:");
      }
    }
    return compile(context,chunk,dirtyFilesHolder,filesToCompile,formsToCompile);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    String message=e.getMessage();
    if (message == null) {
      final ByteArrayOutputStream out=new ByteArrayOutputStream();
      final PrintStream stream=new PrintStream(out);
      try {
        e.printStackTrace(stream);
      }
  finally {
        stream.close();
      }
      message="Internal error: \n" + out.toString();
    }
    context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,message));
    throw new ProjectBuildException(message,e);
  }
}
