{
  LOG.assertTrue(lexer.getTokenType() == JavaTokenType.NEW_KEYWORD);
  CompositeElement element=ASTFactory.composite(JavaElementType.NEW_EXPRESSION);
  if (qualifier != null) {
    element.rawAddChildren(qualifier);
    element.rawAddChildren(dot);
  }
  TreeElement newKeyword=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  element.rawAddChildren(newKeyword);
  lexer.advance();
  element.rawAddChildren(parseReferenceParameterList(lexer,false,areDiamondsSupported()));
  boolean isPrimitive;
  TreeElement refOrType;
  boolean parseAnnotations=areTypeAnnotationsSupported() && lexer.getTokenType() == JavaTokenType.AT;
  if (lexer.getTokenType() == JavaTokenType.IDENTIFIER || parseAnnotations) {
    isPrimitive=false;
    refOrType=parseJavaCodeReference(lexer,true,true,parseAnnotations,areDiamondsSupported());
  }
 else   if (lexer.getTokenType() != null && ElementType.PRIMITIVE_TYPE_BIT_SET.contains(lexer.getTokenType())) {
    isPrimitive=true;
    refOrType=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
  }
 else {
    element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
    return element;
  }
  if (!isPrimitive && lexer.getTokenType() == JavaTokenType.LPARENTH) {
    TreeElement argumentList=parseArgumentList(lexer);
    if (lexer.getTokenType() == JavaTokenType.LBRACE && refOrType.getElementType() == JavaElementType.JAVA_CODE_REFERENCE) {
      CompositeElement classElement=ASTFactory.composite(JavaElementType.ANONYMOUS_CLASS);
      element.rawAddChildren(classElement);
      classElement.rawAddChildren(refOrType);
      classElement.rawAddChildren(argumentList);
      myContext.getDeclarationParsing().parseClassBodyWithBraces(classElement,lexer,false,false);
    }
 else {
      element.rawAddChildren(refOrType);
      element.rawAddChildren(argumentList);
    }
  }
 else {
    element.rawAddChildren(refOrType);
    if (lexer.getTokenType() != JavaTokenType.LBRACKET) {
      String description=isPrimitive ? JavaErrorMessages.message("expected.lbracket") : JavaErrorMessages.message("expected.lparen.or.lbracket");
      element.rawAddChildren(Factory.createErrorElement(description));
      return element;
    }
    int bracketCount=0;
    int dimCount=0;
    while (true) {
      if (lexer.getTokenType() != JavaTokenType.LBRACKET)       break;
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
      if (bracketCount == dimCount) {
        TreeElement dimExpr=parseExpression(lexer);
        if (dimExpr != null) {
          element.rawAddChildren(dimExpr);
          dimCount++;
        }
      }
      bracketCount++;
      if (lexer.getTokenType() != JavaTokenType.RBRACKET) {
        element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.rbracket")));
        return element;
      }
      element.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
    if (dimCount == 0) {
      if (lexer.getTokenType() == JavaTokenType.LBRACE) {
        TreeElement initializer=parseArrayInitializerExpression(lexer);
        if (initializer != null) {
          element.rawAddChildren(initializer);
        }
      }
 else {
        element.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.array.initializer")));
      }
    }
  }
  return element;
}
