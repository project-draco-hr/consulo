{
  final PsiBuilder builder=new PsiBuilderImpl(new MyTestLexer(),WHITESPACE_SET,COMMENT_SET,text);
  final PsiBuilder.Marker rootMarker=builder.mark();
  parser.parse(builder);
  rootMarker.done(ROOT);
  final FlyweightCapableTreeStructure<LighterASTNode> lightTree=builder.getLightTree();
  assertEquals(expected,DebugUtil.lightTreeToString(lightTree,false));
  final FlyweightCapableTreeStructure<LighterASTNode> lightTree2=builder.getLightTree();
  assertEquals(expected,DebugUtil.lightTreeToString(lightTree2,false));
  final ASTNode root=builder.getTreeBuilt();
  assertEquals(expected,DebugUtil.nodeTreeToString(root,false));
  final PsiBuilder builder2=new PsiBuilderImpl(new MyTestLexer(),WHITESPACE_SET,COMMENT_SET,text);
  final PsiBuilder.Marker rootMarker2=builder2.mark();
  parser.parse(builder2);
  rootMarker2.done(ROOT);
  DiffTree.diff(new ASTStructure(root),builder2.getLightTree(),new ShallowNodeComparator<ASTNode,LighterASTNode>(){
    @Override public ThreeState deepEqual(    ASTNode oldNode,    LighterASTNode newNode){
      return ThreeState.UNSURE;
    }
    @Override public boolean typesEqual(    ASTNode oldNode,    LighterASTNode newNode){
      return true;
    }
    @Override public boolean hashCodesEqual(    ASTNode oldNode,    LighterASTNode newNode){
      return true;
    }
  }
,new DiffTreeChangeBuilder<ASTNode,LighterASTNode>(){
    @Override public void nodeReplaced(    @NotNull ASTNode oldChild,    @NotNull LighterASTNode newChild){
      fail("replaced(" + oldChild + ","+ newChild.getTokenType()+ ")");
    }
    @Override public void nodeDeleted(    @NotNull ASTNode oldParent,    @NotNull ASTNode oldNode){
      fail("deleted(" + oldParent + ","+ oldNode+ ")");
    }
    @Override public void nodeInserted(    @NotNull ASTNode oldParent,    @NotNull LighterASTNode newNode,    int pos){
      fail("inserted(" + oldParent + ","+ newNode.getTokenType()+ ")");
    }
  }
);
}
