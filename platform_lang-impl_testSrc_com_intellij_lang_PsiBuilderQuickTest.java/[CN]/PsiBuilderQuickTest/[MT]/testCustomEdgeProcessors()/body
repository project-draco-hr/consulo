{
  final WhitespacesAndCommentsBinder leftEdgeProcessor=new WhitespacesAndCommentsBinder(){
    @Override public int getEdgePosition(    List<IElementType> tokens,    boolean atStreamEdge,    TokenTextGetter getter){
      int pos=tokens.size() - 1;
      while (tokens.get(pos) != COMMENT && pos > 0)       pos--;
      return pos;
    }
  }
;
  final WhitespacesAndCommentsBinder rightEdgeProcessor=new WhitespacesAndCommentsBinder(){
    @Override public int getEdgePosition(    List<IElementType> tokens,    boolean atStreamEdge,    TokenTextGetter getter){
      int pos=0;
      while (tokens.get(pos) != COMMENT && pos < tokens.size() - 1)       pos++;
      return pos + 1;
    }
  }
;
  doTest("{ # i # }",new Parser(){
    @Override public void parse(    PsiBuilder builder){
      while (builder.getTokenType() != LETTER)       builder.advanceLexer();
      final PsiBuilder.Marker marker=builder.mark();
      builder.advanceLexer();
      marker.done(OTHER);
      marker.setCustomEdgeTokenBinders(leftEdgeProcessor,rightEdgeProcessor);
      while (builder.getTokenType() != null)       builder.advanceLexer();
    }
  }
,"Element(ROOT)\n" + "  PsiElement(OTHER)('{')\n" + "  PsiWhiteSpace(' ')\n"+ "  Element(OTHER)\n"+ "    PsiElement(COMMENT)('#')\n"+ "    PsiWhiteSpace(' ')\n"+ "    PsiElement(LETTER)('i')\n"+ "    PsiWhiteSpace(' ')\n"+ "    PsiElement(COMMENT)('#')\n"+ "  PsiWhiteSpace(' ')\n"+ "  PsiElement(OTHER)('}')\n");
}
