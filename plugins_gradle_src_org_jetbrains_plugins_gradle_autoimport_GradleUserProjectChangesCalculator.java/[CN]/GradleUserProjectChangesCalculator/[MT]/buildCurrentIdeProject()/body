{
  GradleSettings settings=GradleSettings.getInstance(myProject);
  String linkedProjectPath=settings.getLinkedProjectPath();
  if (StringUtil.isEmpty(linkedProjectPath)) {
    return null;
  }
  String compileOutput=null;
  CompilerProjectExtension compilerProjectExtension=CompilerProjectExtension.getInstance(myProject);
  if (compilerProjectExtension != null) {
    compileOutput=compilerProjectExtension.getCompilerOutputUrl();
  }
  if (compileOutput == null) {
    compileOutput="";
  }
  GradleProject result=new GradleProject(linkedProjectPath,compileOutput);
  final Map<String,GradleModule> modules=ContainerUtilRt.newHashMap();
  for (  Module ideModule : myFacade.getModules(myProject)) {
    final GradleModule module=new GradleModule(ideModule.getName(),ideModule.getModuleFilePath());
    modules.put(module.getName(),module);
  }
  for (  Module ideModule : myFacade.getModules(myProject)) {
    final GradleModule module=modules.get(ideModule.getName());
    RootPolicy<Void> visitor=new RootPolicy<Void>(){
      @Override public Void visitLibraryOrderEntry(      LibraryOrderEntry libraryOrderEntry,      Void value){
        Library library=libraryOrderEntry.getLibrary();
        if (library != null) {
          module.addDependency(new GradleLibraryDependency(module,new GradleLibrary(GradleUtil.getLibraryName(library))));
        }
        return value;
      }
      @Override public Void visitModuleOrderEntry(      ModuleOrderEntry moduleOrderEntry,      Void value){
        GradleModule dependencyModule=modules.get(moduleOrderEntry.getModuleName());
        if (dependencyModule != null) {
          module.addDependency(new GradleModuleDependency(module,dependencyModule));
        }
        return value;
      }
    }
;
    for (    OrderEntry orderEntry : myFacade.getOrderEntries(ideModule)) {
      orderEntry.accept(visitor,null);
    }
    result.addModule(module);
  }
  return result;
}
