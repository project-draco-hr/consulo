{
  Set<String> commonModuleNames=ContainerUtilRt.newHashSet(context.currentModules.keySet());
  commonModuleNames.retainAll(context.oldModules.keySet());
  for (  final String moduleName : commonModuleNames) {
    final Map<String,GradleModuleDependency> currentModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,GradleModuleDependency> oldModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,GradleLibraryDependency> currentLibraryDependencies=ContainerUtilRt.newHashMap();
    final Map<String,GradleLibraryDependency> oldLibraryDependencies=ContainerUtilRt.newHashMap();
    GradleEntityVisitor oldStateVisitor=new GradleEntityVisitorAdapter(){
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        oldModuleDependencies.put(dependency.getTarget().getName(),dependency);
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        oldLibraryDependencies.put(dependency.getTarget().getName(),dependency);
      }
    }
;
    for (    GradleDependency dependency : context.oldModules.get(moduleName).getDependencies()) {
      dependency.invite(oldStateVisitor);
    }
    GradleEntityVisitor currentStateVisitor=new GradleEntityVisitorAdapter(){
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        currentModuleDependencies.put(dependency.getTarget().getName(),dependency);
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        currentLibraryDependencies.put(dependency.getTarget().getName(),dependency);
      }
    }
;
    for (    GradleDependency dependency : context.currentModules.get(moduleName).getDependencies()) {
      dependency.invite(currentStateVisitor);
    }
    Function<String,GradleUserProjectChange<?>> addedModuleDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleAddModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> removedModuleDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleRemoveModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> addedLibraryDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleAddLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> removedLibraryDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleRemoveLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    buildPresenceChanges(oldModuleDependencies.keySet(),currentModuleDependencies.keySet(),addedModuleDependency,removedModuleDependency,context);
    buildPresenceChanges(oldLibraryDependencies.keySet(),currentLibraryDependencies.keySet(),addedLibraryDependency,removedLibraryDependency,context);
    NullableFunction<Pair<GradleModuleDependency,GradleModuleDependency>,GradleUserProjectChange<?>> exportedModuleDependencyBuilder=new NullableFunction<Pair<GradleModuleDependency,GradleModuleDependency>,GradleUserProjectChange<?>>(){
      @Nullable @Override public GradleUserProjectChange<?> fun(      Pair<GradleModuleDependency,GradleModuleDependency> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new GradleModuleDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<GradleModuleDependency,GradleModuleDependency>,GradleUserProjectChange<?>> scopeModuleDependencyBuilder=new NullableFunction<Pair<GradleModuleDependency,GradleModuleDependency>,GradleUserProjectChange<?>>(){
      @Nullable @Override public GradleUserProjectChange<?> fun(      Pair<GradleModuleDependency,GradleModuleDependency> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new GradleModuleDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<GradleLibraryDependency,GradleLibraryDependency>,GradleUserProjectChange<?>> exportedLibDependencyBuilder=new NullableFunction<Pair<GradleLibraryDependency,GradleLibraryDependency>,GradleUserProjectChange<?>>(){
      @Nullable @Override public GradleUserProjectChange<?> fun(      Pair<GradleLibraryDependency,GradleLibraryDependency> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new GradleLibraryDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<GradleLibraryDependency,GradleLibraryDependency>,GradleUserProjectChange<?>> scopeLibDependencyBuilder=new NullableFunction<Pair<GradleLibraryDependency,GradleLibraryDependency>,GradleUserProjectChange<?>>(){
      @Nullable @Override public GradleUserProjectChange<?> fun(      Pair<GradleLibraryDependency,GradleLibraryDependency> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new GradleLibraryDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,exportedModuleDependencyBuilder,context);
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,scopeModuleDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,exportedLibDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,scopeLibDependencyBuilder,context);
  }
}
