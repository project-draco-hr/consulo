{
  Set<String> commonModuleNames=ContainerUtilRt.newHashSet(context.currentModules.keySet());
  commonModuleNames.retainAll(context.oldModules.keySet());
  for (  final String moduleName : commonModuleNames) {
    final Set<String> currentModuleDependencies=ContainerUtilRt.newHashSet();
    final Set<String> oldModuleDependencies=ContainerUtilRt.newHashSet();
    final Set<String> currentLibraryDependencies=ContainerUtilRt.newHashSet();
    final Set<String> oldLibraryDependencies=ContainerUtilRt.newHashSet();
    GradleEntityVisitor oldStateVisitor=new GradleEntityVisitorAdapter(){
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        oldModuleDependencies.add(dependency.getTarget().getName());
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        oldLibraryDependencies.add(dependency.getTarget().getName());
      }
    }
;
    for (    GradleDependency dependency : context.oldModules.get(moduleName).getDependencies()) {
      dependency.invite(oldStateVisitor);
    }
    GradleEntityVisitor currentStateVisitor=new GradleEntityVisitorAdapter(){
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        currentModuleDependencies.add(dependency.getTarget().getName());
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        currentLibraryDependencies.add(dependency.getTarget().getName());
      }
    }
;
    for (    GradleDependency dependency : context.currentModules.get(moduleName).getDependencies()) {
      dependency.invite(currentStateVisitor);
    }
    Function<String,GradleUserProjectChange<?>> addedModuleDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleAddModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> removedModuleDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleRemoveModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> addedLibraryDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleAddLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,GradleUserProjectChange<?>> removedLibraryDependency=new Function<String,GradleUserProjectChange<?>>(){
      @Override public GradleUserProjectChange<?> fun(      String s){
        return new GradleRemoveLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    buildChanges(oldModuleDependencies,currentModuleDependencies,addedModuleDependency,removedModuleDependency,context);
    buildChanges(oldLibraryDependencies,currentLibraryDependencies,addedLibraryDependency,removedLibraryDependency,context);
  }
}
