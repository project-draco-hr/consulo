{
  Set<Hash> previousRefsHashes=toHashes(previousRefs);
  Set<Hash> newRefsHashes=toHashes(newRefs);
  Pair<Integer,Set<TimedVcsCommit>> newCommitsAndSavedGreenIndex=getNewCommitsAndSavedGreenIndex(savedLog,previousRefsHashes,firstBlock,newRefsHashes);
  Pair<Integer,Set<Hash>> redCommitsAndSavedRedIndex=getRedCommitsAndSavedRedIndex(savedLog,previousRefsHashes,firstBlock,newRefsHashes);
  Set<Hash> removeCommits=redCommitsAndSavedRedIndex.second;
  Set<TimedVcsCommit> allNewsCommits=newCommitsAndSavedGreenIndex.second;
  int unsafeBlockSize=Math.max(redCommitsAndSavedRedIndex.first,newCommitsAndSavedGreenIndex.first);
  List<TimedVcsCommit> unsafePartSavedLog=new ArrayList<TimedVcsCommit>();
  for (  TimedVcsCommit commit : savedLog.subList(0,unsafeBlockSize)) {
    if (!removeCommits.contains(commit.getHash())) {
      unsafePartSavedLog.add(commit);
    }
  }
  unsafePartSavedLog=new NewCommitIntegrator<TimedVcsCommit>(unsafePartSavedLog,allNewsCommits).getResultList();
  return Pair.create(ContainerUtil.concat(unsafePartSavedLog,savedLog.subList(unsafeBlockSize,savedLog.size())),unsafePartSavedLog.size() - unsafeBlockSize);
}
