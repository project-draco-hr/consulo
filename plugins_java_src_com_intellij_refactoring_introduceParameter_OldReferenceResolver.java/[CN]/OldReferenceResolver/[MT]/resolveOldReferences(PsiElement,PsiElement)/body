{
  if (expr == null || !expr.isValid() || oldExpr == null)   return;
  PsiElementFactory factory=JavaPsiFacade.getInstance(myProject).getElementFactory();
  PsiElement newExpr=expr;
  if (oldExpr instanceof PsiReferenceExpression) {
    final PsiReferenceExpression oldRef=(PsiReferenceExpression)oldExpr;
    final JavaResolveResult adv=oldRef.advancedResolve(false);
    final PsiElement scope=getClassContainingResolve(adv);
    final PsiClass clss=PsiTreeUtil.getParentOfType(oldExpr,PsiClass.class);
    if (clss != null && scope != null) {
      final PsiElement subj=adv.getElement();
      if (subj instanceof PsiParameter) {
        PsiParameterList parameterList=myMethodToReplaceIn.getParameterList();
        if (subj.getParent() != parameterList)         return;
        int index=parameterList.getParameterIndex((PsiParameter)subj);
        if (index < 0)         return;
        if (index < myActualArgs.length) {
          PsiExpression actualArg=myActualArgs[index];
          int copyingSafetyLevel=RefactoringUtil.verifySafeCopyExpression(actualArg);
          if (copyingSafetyLevel == RefactoringUtil.EXPR_COPY_PROHIBITED) {
            actualArg=factory.createExpressionFromText(getTempVar(actualArg),null);
          }
          newExpr=newExpr.replace(actualArg);
        }
      }
 else       if ((subj instanceof PsiField || subj instanceof PsiMethod) && oldRef.getQualifierExpression() == null && PsiTreeUtil.isAncestor(clss,scope,false)) {
        boolean isStatic=subj instanceof PsiField && ((PsiField)subj).hasModifierProperty(PsiModifier.STATIC) || subj instanceof PsiMethod && ((PsiMethod)subj).hasModifierProperty(PsiModifier.STATIC);
        if (myInstanceRef != null && !isStatic) {
          String name=((PsiNamedElement)subj).getName();
          PsiReferenceExpression newRef=(PsiReferenceExpression)factory.createExpressionFromText("a." + name,null);
          newRef=(PsiReferenceExpression)CodeStyleManager.getInstance(myProject).reformat(newRef);
          PsiExpression instanceRef=getInstanceRef(factory);
          newRef.getQualifierExpression().replace(instanceRef);
          newRef=(PsiReferenceExpression)newExpr.replace(newRef);
          newExpr=newRef.getReferenceNameElement();
        }
      }
      if (subj instanceof PsiField && PsiTreeUtil.isAncestor(scope,clss,false)) {
        if (myReplaceFieldsWithGetters != IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE) {
          if (myReplaceFieldsWithGetters == IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_ALL || myReplaceFieldsWithGetters == IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_INACCESSIBLE && !JavaPsiFacade.getInstance(myProject).getResolveHelper().isAccessible((PsiMember)subj,newExpr,null)) {
            newExpr=replaceFieldWithGetter(newExpr,(PsiField)subj,oldRef.getQualifierExpression() == null && !((PsiField)subj).hasModifierProperty(PsiModifier.STATIC));
          }
        }
      }
    }
  }
 else   if (oldExpr instanceof PsiThisExpression && (((PsiThisExpression)oldExpr).getQualifier() == null || myManager.areElementsEquivalent(((PsiThisExpression)oldExpr).getQualifier().resolve(),myMethodToReplaceIn.getContainingClass()))) {
    if (myInstanceRef != null) {
      newExpr.replace(getInstanceRef(factory));
    }
    return;
  }
 else   if (oldExpr instanceof PsiSuperExpression && ((PsiSuperExpression)oldExpr).getQualifier() == null) {
    if (myInstanceRef != null) {
      newExpr.replace(getInstanceRef(factory));
    }
    return;
  }
  PsiElement[] oldChildren=oldExpr.getChildren();
  PsiElement[] newChildren=newExpr.getChildren();
  if (oldChildren.length == newChildren.length) {
    for (int i=0; i < oldChildren.length; i++) {
      resolveOldReferences(newChildren[i],oldChildren[i]);
    }
  }
}
