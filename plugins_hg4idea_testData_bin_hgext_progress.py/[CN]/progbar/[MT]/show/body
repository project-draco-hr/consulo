def show(self, topic, pos, item, unit, total):
    termwidth = self.width()
    self.printed = True
    head = ''
    needprogress = False
    tail = ''
    for indicator in self.order:
        add = ''
        if (indicator == 'topic'):
            add = topic
        elif (indicator == 'number'):
            if total:
                add = ((('% ' + str(len(str(total)))) + 's/%s') % (pos, total))
            else:
                add = str(pos)
        elif (indicator.startswith('item') and item):
            slice = 'end'
            if ('-' in indicator):
                wid = int(indicator.split('-')[1])
            elif ('+' in indicator):
                slice = 'beginning'
                wid = int(indicator.split('+')[1])
            else:
                wid = 20
            if (slice == 'end'):
                add = item[(- wid):]
            else:
                add = item[:wid]
            add += ((wid - len(add)) * ' ')
        elif (indicator == 'bar'):
            add = ''
            needprogress = True
        elif ((indicator == 'unit') and unit):
            add = unit
        if (not needprogress):
            head = spacejoin(head, add)
        else:
            tail = spacejoin(add, tail)
    if needprogress:
        used = 0
        if head:
            used += (len(head) + 1)
        if tail:
            used += (len(tail) + 1)
        progwidth = ((termwidth - used) - 3)
        if total:
            amt = ((pos * progwidth) // total)
            bar = ('=' * (amt - 1))
            if (amt > 0):
                bar += '>'
            bar += (' ' * (progwidth - amt))
        else:
            progwidth -= 3
            self.indetcount += 1
            amt = (self.indetcount % (2 * progwidth))
            amt -= progwidth
            bar = (((' ' * int((progwidth - abs(amt)))) + '<=>') + (' ' * int(abs(amt))))
        prog = ''.join(('[', bar, ']'))
        out = spacejoin(head, prog, tail)
    else:
        out = spacejoin(head, tail)
    sys.stderr.write(('\r' + out[:termwidth]))
    sys.stderr.flush()
