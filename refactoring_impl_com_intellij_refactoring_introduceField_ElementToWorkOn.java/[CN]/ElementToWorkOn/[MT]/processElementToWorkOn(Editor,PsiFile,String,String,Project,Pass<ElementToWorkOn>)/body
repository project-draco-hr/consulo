{
  PsiLocalVariable localVar=null;
  PsiExpression expr=null;
  if (!editor.getSelectionModel().hasSelection()) {
    PsiElement element=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.LOOKUP_ITEM_ACCEPTED);
    if (element instanceof PsiLocalVariable) {
      localVar=(PsiLocalVariable)element;
      final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
      if (elementAt instanceof PsiIdentifier && elementAt.getParent() instanceof PsiReferenceExpression) {
        expr=(PsiExpression)elementAt.getParent();
      }
    }
 else {
      final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
      final PsiLocalVariable variable=PsiTreeUtil.getParentOfType(elementAt,PsiLocalVariable.class);
      if (variable != null) {
        localVar=variable;
      }
 else {
        final int offset=editor.getCaretModel().getOffset();
        final PsiElement[] statementsInRange=IntroduceVariableBase.findStatementsAtOffset(editor,file,offset);
        if (statementsInRange.length == 1 && PsiUtil.hasErrorElementChild(statementsInRange[0])) {
          editor.getSelectionModel().selectLineAtCaret();
        }
 else {
          final List<PsiExpression> expressions=IntroduceVariableBase.collectExpressions(file,offset,statementsInRange);
          if (expressions.isEmpty()) {
            editor.getSelectionModel().selectLineAtCaret();
          }
 else           if (expressions.size() == 1) {
            expr=expressions.get(0);
          }
 else {
            IntroduceVariableBase.showChooser(editor,expressions,new Pass<PsiExpression>(){
              @Override public void pass(              final PsiExpression selectedValue){
                processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,null,selectedValue));
              }
            }
);
            return;
          }
        }
      }
    }
  }
  processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,localVar,expr));
}
