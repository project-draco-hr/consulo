{
  PsiLocalVariable localVar=null;
  PsiExpression expr=null;
  if (!editor.getSelectionModel().hasSelection()) {
    PsiElement element=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.LOOKUP_ITEM_ACCEPTED);
    if (element instanceof PsiLocalVariable) {
      localVar=(PsiLocalVariable)element;
      final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
      if (elementAt instanceof PsiIdentifier && elementAt.getParent() instanceof PsiReferenceExpression) {
        expr=(PsiExpression)elementAt.getParent();
      }
    }
 else {
      final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
      final PsiLocalVariable variable=PsiTreeUtil.getParentOfType(elementAt,PsiLocalVariable.class);
      if (variable != null) {
        localVar=variable;
      }
 else {
        final List<PsiExpression> expressions=new ArrayList<PsiExpression>();
        PsiExpression expression=PsiTreeUtil.getParentOfType(elementAt,PsiExpression.class);
        while (expression != null) {
          if (!(expression instanceof PsiReferenceExpression)) {
            expressions.add(expression);
          }
          expression=PsiTreeUtil.getParentOfType(expression,PsiExpression.class);
        }
        if (expressions.isEmpty()) {
          editor.getSelectionModel().selectLineAtCaret();
        }
 else         if (expressions.size() == 1) {
          expr=expressions.get(0);
        }
 else {
          JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<PsiExpression>("Expressions",expressions){
            @Override public PopupStep onChosen(            final PsiExpression selectedValue,            final boolean finalChoice){
              processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,null,selectedValue));
              return FINAL_CHOICE;
            }
            @NotNull @Override public String getTextFor(            final PsiExpression value){
              return value.getText();
            }
          }
).showInBestPositionFor(editor);
        }
      }
    }
  }
  processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,localVar,expr));
}
