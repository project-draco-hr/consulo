{
  if (qName.length() == 0) {
    throw new IllegalArgumentException("Cannot search for elements with empty text");
  }
  ProgressManager progressManager=ProgressManager.getInstance();
  final ProgressIndicator progress=progressManager.getProgressIndicator();
  int dotIndex=qName.lastIndexOf('.');
  int dollarIndex=qName.lastIndexOf('$');
  int maxIndex=Math.max(dotIndex,dollarIndex);
  final String wordToSearch=maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName;
  if (originalElement != null && myManager.isInProject(originalElement) && searchScope.isSearchInLibraries()) {
    searchScope=searchScope.intersectWith(GlobalSearchScope.projectScope(myManager.getProject()));
  }
  final GlobalSearchScope theSearchScope=searchScope;
  PsiFile[] files=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>(){
    public PsiFile[] compute(){
      return myManager.getCacheManager().getFilesWithWord(wordToSearch,UsageSearchContext.IN_PLAIN_TEXT,theSearchScope,true);
    }
  }
);
  final StringSearcher searcher=new StringSearcher(qName,true,true);
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.search.in.non.java.files.progress"));
  }
  final Ref<Boolean> cancelled=new Ref<Boolean>(Boolean.FALSE);
  for (int i=0; i < files.length; i++) {
    if (progress != null)     progress.checkCanceled();
    final PsiFile psiFile=files[i];
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        CharSequence text=psiFile.getViewProvider().getContents();
        for (int index=LowLevelSearchUtil.searchWord(text,0,text.length(),searcher,progress); index >= 0; ) {
          final int endOffset=index + searcher.getPattern().length();
          if (originalElement == null || !containsReferenceTo(psiFile,index,endOffset,originalElement)) {
            if (!processor.process(psiFile,index,endOffset)) {
              cancelled.set(Boolean.TRUE);
              return;
            }
          }
          index=LowLevelSearchUtil.searchWord(text,endOffset,text.length(),searcher,progress);
        }
      }
    }
);
    if (cancelled.get())     break;
    if (progress != null) {
      progress.setFraction((double)(i + 1) / files.length);
    }
  }
  if (progress != null) {
    progress.popState();
  }
}
