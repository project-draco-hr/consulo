{
  final ArrayList<IdIndexEntry> keys=getWordEntries(name,true);
  if (keys.isEmpty())   return SearchCostResult.ZERO_OCCURRENCES;
  final TIntHashSet set=ApplicationManager.getApplication().runReadAction(new NullableComputable<TIntHashSet>(){
    @Override public TIntHashSet compute(){
      return FileBasedIndex.getInstance().collectFileIdsContainingAllKeys(IdIndex.NAME,keys,scope,null);
    }
  }
);
  if (set == null || set.size() > 1000 && !ApplicationManager.getApplication().isUnitTestMode()) {
    return SearchCostResult.TOO_MANY_OCCURRENCES;
  }
  final AtomicInteger count=new AtomicInteger();
  final FileIndexFacade index=FileIndexFacade.getInstance(myManager.getProject());
  final Processor<VirtualFile> processor=new Processor<VirtualFile>(){
    private final VirtualFile fileToIgnoreOccurencesInVirtualFile=fileToIgnoreOccurencesIn != null ? fileToIgnoreOccurencesIn.getVirtualFile() : null;
    @Override public boolean process(    VirtualFile file){
      if (file == fileToIgnoreOccurencesInVirtualFile)       return true;
      if (!IndexCacheManagerImpl.shouldBeFound(scope,file,index))       return true;
      final int value=count.incrementAndGet();
      return value < 10;
    }
  }
;
  final boolean cheap=ApplicationManager.getApplication().runReadAction(new NullableComputable<Boolean>(){
    @Override public Boolean compute(){
      return FileBasedIndex.processVirtualFiles(set,scope,processor);
    }
  }
);
  if (!cheap) {
    return SearchCostResult.TOO_MANY_OCCURRENCES;
  }
  return count.get() == 0 ? SearchCostResult.ZERO_OCCURRENCES : SearchCostResult.FEW_OCCURRENCES;
}
