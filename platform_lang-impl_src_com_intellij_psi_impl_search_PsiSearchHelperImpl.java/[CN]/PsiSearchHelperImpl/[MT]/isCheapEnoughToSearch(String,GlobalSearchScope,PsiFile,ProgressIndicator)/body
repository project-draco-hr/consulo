{
  final AtomicInteger count=new AtomicInteger();
  final FileIndexFacade index=FileIndexFacade.getInstance(myManager.getProject());
  final Processor<VirtualFile> processor=new Processor<VirtualFile>(){
    private final VirtualFile fileToIgnoreOccurencesInVirtualFile=fileToIgnoreOccurencesIn != null ? fileToIgnoreOccurencesIn.getVirtualFile() : null;
    @Override public boolean process(    VirtualFile file){
      if (file == fileToIgnoreOccurencesInVirtualFile)       return true;
      if (!IndexCacheManagerImpl.shouldBeFound(scope,file,index))       return true;
      final int value=count.incrementAndGet();
      return value < 10;
    }
  }
;
  final ArrayList<IdIndexEntry> keys=getWordEntries(name,true);
  final boolean cheap=keys.isEmpty() || processFilesContainingAllKeys(scope,null,processor,keys);
  if (!cheap) {
    return SearchCostResult.TOO_MANY_OCCURRENCES;
  }
  return count.get() == 0 ? SearchCostResult.ZERO_OCCURRENCES : SearchCostResult.FEW_OCCURRENCES;
}
