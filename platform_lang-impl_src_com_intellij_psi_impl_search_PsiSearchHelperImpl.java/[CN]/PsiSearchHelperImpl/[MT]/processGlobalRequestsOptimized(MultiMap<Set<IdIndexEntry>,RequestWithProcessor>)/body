{
  if (singles.isEmpty()) {
    return true;
  }
  if (singles.size() == 1) {
    final Collection<RequestWithProcessor> requests=singles.get(singles.keySet().iterator().next());
    if (requests.size() == 1) {
      final RequestWithProcessor theOnly=requests.iterator().next();
      return processSingleRequest(theOnly.request,theOnly.refProcessor);
    }
  }
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  final MultiMap<VirtualFile,RequestWithProcessor> candidateFiles=collectFiles(singles,progress);
  if (candidateFiles.isEmpty()) {
    return true;
  }
  final Map<RequestWithProcessor,StringSearcher> searchers=new HashMap<RequestWithProcessor,StringSearcher>();
  final Set<String> allWords=new TreeSet<String>();
  for (  RequestWithProcessor singleRequest : candidateFiles.values()) {
    searchers.put(singleRequest,new StringSearcher(singleRequest.request.word,singleRequest.request.caseSensitive,true));
    allWords.add(singleRequest.request.word);
  }
  if (progress != null) {
    progress.setText(PsiBundle.message("psi.search.for.word.progress",StringUtil.join(allWords,", ")));
  }
  return processPsiFileRoots(progress,new ArrayList<VirtualFile>(candidateFiles.keySet()),new Processor<PsiElement>(){
    public boolean process(    PsiElement psiRoot){
      final VirtualFile vfile=psiRoot.getContainingFile().getVirtualFile();
      for (      final RequestWithProcessor singleRequest : candidateFiles.get(vfile)) {
        StringSearcher searcher=searchers.get(singleRequest);
        TextOccurenceProcessor adapted=adaptProcessor(singleRequest.request,singleRequest.refProcessor);
        if (!LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,false,progress)) {
          return false;
        }
      }
      return true;
    }
  }
);
}
