{
  final FileIndexFacade index=FileIndexFacade.getInstance(myManager.getProject());
  final MultiMap<VirtualFile,RequestWithProcessor> result=createMultiMap();
  for (  final Set<IdIndexEntry> key : singles.keySet()) {
    if (key.isEmpty()) {
      continue;
    }
    final Collection<RequestWithProcessor> data=singles.get(key);
    final GlobalSearchScope commonScope=uniteScopes(data);
    if (key.size() == 1) {
      result.putAllValues(findFilesWithIndexEntry(key.iterator().next(),index,data,commonScope,progress));
      continue;
    }
    final CommonProcessors.CollectProcessor<VirtualFile> processor=new CommonProcessors.CollectProcessor<VirtualFile>();
    processFilesContainingAllKeys(commonScope,null,processor,key);
    for (    final VirtualFile file : processor.getResults()) {
      if (progress != null) {
        progress.checkCanceled();
      }
      for (      final IdIndexEntry entry : key) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          @Override public void run(){
            FileBasedIndex.getInstance().processValues(IdIndex.NAME,entry,file,new FileBasedIndex.ValueProcessor<Integer>(){
              @Override public boolean process(              VirtualFile file,              Integer value){
                if (IndexCacheManagerImpl.shouldBeFound(commonScope,file,index)) {
                  int mask=value.intValue();
                  for (                  RequestWithProcessor single : data) {
                    final PsiSearchRequest request=single.request;
                    if ((mask & request.searchContext) != 0 && ((GlobalSearchScope)request.searchScope).contains(file)) {
                      result.putValue(file,single);
                    }
                  }
                }
                return true;
              }
            }
,commonScope);
          }
        }
);
      }
    }
  }
  return result;
}
