{
  LOG.assertTrue(!Thread.holdsLock(PsiLock.LOCK),"You must not run search from within updating PSI activity. Please consider invokeLatering it instead.");
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  myManager.startBatchFilesProcessingMode();
  try {
    String text=searcher.getPattern();
    List<PsiFile> fileSet=getFilesWithText(scope,searchContext,caseSensitively,text,progress);
    if (progress != null) {
      progress.setText(PsiBundle.message("psi.search.for.word.progress",text));
    }
    final AtomicInteger counter=new AtomicInteger(0);
    final AtomicBoolean canceled=new AtomicBoolean(false);
    final AtomicBoolean pceThrown=new AtomicBoolean(false);
    final int size=fileSet.size();
    boolean completed=JobUtil.invokeConcurrentlyUnderMyProgress(fileSet,new Processor<PsiFile>(){
      public boolean process(      final PsiFile file){
        if (!(file instanceof PsiBinaryFile)) {
          file.getViewProvider().getContents();
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            public void run(){
              try {
                PsiElement[] psiRoots=file.getPsiRoots();
                Set<PsiElement> processed=new HashSet<PsiElement>(psiRoots.length * 2,(float)0.5);
                for (                PsiElement psiRoot : psiRoots) {
                  if (progress != null)                   progress.checkCanceled();
                  if (!processed.add(psiRoot))                   continue;
                  if (!LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,false,progress)) {
                    canceled.set(true);
                    return;
                  }
                }
                myManager.dropResolveCaches();
              }
 catch (              ProcessCanceledException e) {
                canceled.set(true);
                pceThrown.set(true);
              }
            }
          }
);
        }
        if (progress != null) {
          double fraction=(double)counter.incrementAndGet() / size;
          progress.setFraction(fraction);
        }
        return !canceled.get();
      }
    }
,false);
    if (pceThrown.get()) {
      throw new ProcessCanceledException();
    }
    return completed;
  }
  finally {
    if (progress != null) {
      progress.popState();
    }
    myManager.finishBatchFilesProcessingMode();
  }
}
