{
  List<String> words=StringUtil.getWordsIn(text);
  if (words.isEmpty())   return true;
  Collections.sort(words,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o2.length() - o1.length();
    }
  }
);
  final Set<PsiFile> fileSet;
  if (words.size() > 1) {
    fileSet=new THashSet<PsiFile>();
    Set<PsiFile> copy=new THashSet<PsiFile>();
    for (int i=0; i < words.size() - 1; i++) {
      ProgressManager.checkCanceled();
      final String word=words.get(i);
      myManager.getCacheManager().processFilesWithWord(new CommonProcessors.CollectProcessor<PsiFile>(copy),word,searchContext,scope,caseSensitively);
      if (i == 0) {
        fileSet.addAll(copy);
      }
 else {
        fileSet.retainAll(copy);
      }
      copy.clear();
      if (fileSet.isEmpty())       break;
    }
    if (fileSet.isEmpty())     return true;
  }
 else {
    fileSet=null;
  }
  return myManager.getCacheManager().processFilesWithWord(new Processor<PsiFile>(){
    public boolean process(    PsiFile psiFile){
      if (fileSet != null && !fileSet.contains(psiFile)) {
        return true;
      }
      return processor.process(psiFile);
    }
  }
,words.get(words.size() - 1),searchContext,scope,caseSensitively);
}
