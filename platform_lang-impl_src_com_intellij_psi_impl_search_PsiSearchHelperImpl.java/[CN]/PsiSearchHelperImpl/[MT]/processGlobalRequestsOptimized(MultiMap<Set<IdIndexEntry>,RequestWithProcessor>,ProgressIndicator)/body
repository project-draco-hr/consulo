{
  if (singles.isEmpty()) {
    return true;
  }
  if (singles.size() == 1) {
    final Collection<RequestWithProcessor> requests=singles.get(singles.keySet().iterator().next());
    if (requests.size() == 1) {
      final RequestWithProcessor theOnly=requests.iterator().next();
      return processSingleRequest(theOnly.request,theOnly.refProcessor);
    }
  }
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  final MultiMap<VirtualFile,RequestWithProcessor> candidateFiles=collectFiles(singles,progress);
  try {
    if (candidateFiles.isEmpty()) {
      return true;
    }
    final Map<RequestWithProcessor,StringSearcher> searchers=new HashMap<RequestWithProcessor,StringSearcher>();
    final Set<String> allWords=new TreeSet<String>();
    for (    RequestWithProcessor singleRequest : candidateFiles.values()) {
      searchers.put(singleRequest,new StringSearcher(singleRequest.request.word,singleRequest.request.caseSensitive,true));
      allWords.add(singleRequest.request.word);
    }
    if (progress != null) {
      final StringBuilder result=new StringBuilder();
      for (      String string : allWords) {
        if (string != null && string.length() != 0) {
          if (result.length() > 50) {
            result.append("...");
            break;
          }
          if (result.length() != 0)           result.append(", ");
          result.append(string);
        }
      }
      progress.setText(PsiBundle.message("psi.search.for.word.progress",result.toString()));
    }
    return processPsiFileRoots(new ArrayList<VirtualFile>(candidateFiles.keySet()),new Processor<PsiElement>(){
      @Override public boolean process(      PsiElement psiRoot){
        final VirtualFile vfile=psiRoot.getContainingFile().getVirtualFile();
        for (        final RequestWithProcessor singleRequest : candidateFiles.get(vfile)) {
          StringSearcher searcher=searchers.get(singleRequest);
          TextOccurenceProcessor adapted=adaptProcessor(singleRequest.request,singleRequest.refProcessor);
          if (!LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,true,progress)) {
            return false;
          }
        }
        return true;
      }
    }
,progress);
  }
  finally {
    if (progress != null) {
      progress.popState();
    }
  }
}
