{
  myManager.startBatchFilesProcessingMode();
  try {
    final AtomicInteger counter=new AtomicInteger(0);
    final AtomicBoolean canceled=new AtomicBoolean(false);
    final AtomicBoolean pceThrown=new AtomicBoolean(false);
    final int size=files.size();
    boolean completed=JobUtil.invokeConcurrentlyUnderProgress(files,progress,false,new Processor<VirtualFile>(){
      @Override public boolean process(      final VirtualFile vfile){
        final PsiFile file=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
          @Override public PsiFile compute(){
            return myManager.findFile(vfile);
          }
        }
);
        if (file != null && !(file instanceof PsiBinaryFile)) {
          file.getViewProvider().getContents();
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              try {
                if (myManager.getProject().isDisposed())                 throw new ProcessCanceledException();
                PsiElement[] psiRoots=file.getPsiRoots();
                Set<PsiElement> processed=new HashSet<PsiElement>(psiRoots.length * 2,(float)0.5);
                for (                PsiElement psiRoot : psiRoots) {
                  if (progress != null)                   progress.checkCanceled();
                  if (!processed.add(psiRoot))                   continue;
                  if (!psiRootProcessor.process(psiRoot)) {
                    canceled.set(true);
                    return;
                  }
                }
                myManager.dropResolveCaches();
              }
 catch (              ProcessCanceledException e) {
                canceled.set(true);
                pceThrown.set(true);
              }
            }
          }
);
        }
        if (progress != null && progress.isRunning()) {
          double fraction=(double)counter.incrementAndGet() / size;
          progress.setFraction(fraction);
        }
        return !canceled.get();
      }
    }
);
    if (pceThrown.get()) {
      throw new ProcessCanceledException();
    }
    return completed;
  }
  finally {
    myManager.finishBatchFilesProcessingMode();
  }
}
