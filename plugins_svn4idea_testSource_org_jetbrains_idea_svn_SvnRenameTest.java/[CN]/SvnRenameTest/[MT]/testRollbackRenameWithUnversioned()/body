{
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final VirtualFile child=createDirInCommand(myWorkingCopyDir,"child");
  createFileInCommand(child,"a.txt","a");
  checkin();
  disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final VirtualFile unversioned=createFileInCommand(child,"u.txt","u");
  final VirtualFile unversionedDir=createDirInCommand(child,"uc");
  createFileInCommand(unversionedDir,"c.txt","c");
  final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  changeListManager.ensureUpToDate(false);
  Assert.assertEquals(FileStatus.UNKNOWN,changeListManager.getStatus(unversioned));
  renameFileInCommand(child,"newchild");
  File childPath=new File(myWorkingCopyDir.getPath(),"child");
  File newChildPath=new File(myWorkingCopyDir.getPath(),"newchild");
  Assert.assertTrue(new File(newChildPath,"a.txt").exists());
  Assert.assertTrue(new File(newChildPath,"u.txt").exists());
  Assert.assertFalse(new File(childPath,"u.txt").exists());
  LocalFileSystem.getInstance().refresh(false);
  changeListManager.ensureUpToDate(false);
  final List<Change> changes=new ArrayList<Change>();
  changes.add(ChangeListManager.getInstance(myProject).getChange(myWorkingCopyDir.findChild("newchild").findChild("a.txt")));
  changes.add(ChangeListManager.getInstance(myProject).getChange(myWorkingCopyDir.findChild("newchild")));
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  SvnVcs.getInstance(myProject).getRollbackEnvironment().rollbackChanges(changes,exceptions,RollbackProgressListener.EMPTY);
  try {
    Thread.sleep(300);
  }
 catch (  InterruptedException e) {
  }
  Assert.assertTrue(exceptions.isEmpty());
  Assert.assertTrue(new File(childPath,"a.txt").exists());
  Assert.assertTrue(new File(childPath,"u.txt").exists());
  final File unversionedDirFile=new File(childPath,"uc");
  Assert.assertTrue(unversionedDirFile.exists());
  Assert.assertTrue(new File(unversionedDirFile,"c.txt").exists());
}
