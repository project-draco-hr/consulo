{
  final JavacCompiler javacCompiler=getBackEndCompiler();
  final boolean processorMode=javacCompiler.setAnnotationProcessorMode(true);
  final BackendCompilerWrapper wrapper=new BackendCompilerWrapper(myProject,Arrays.asList(files),(CompileContextEx)context,javacCompiler,DummySink.INSTANCE);
  try {
    wrapper.compile();
  }
 catch (  CompilerException e) {
    context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
  }
catch (  CacheCorruptedException e) {
    LOG.info(e);
    context.requestRebuildNextTime(e.getMessage());
  }
 finally {
    javacCompiler.setAnnotationProcessorMode(processorMode);
    final Set<VirtualFile> dirsToRefresh=new HashSet<VirtualFile>();
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        final Set<Module> modules=new HashSet<Module>();
        for (        VirtualFile file : files) {
          final Module module=context.getModuleByFile(file);
          if (module != null) {
            modules.add(module);
          }
        }
        for (        Module module : modules) {
          dirsToRefresh.add(context.getModuleOutputDirectory(module));
          dirsToRefresh.add(context.getModuleOutputDirectoryForTests(module));
        }
      }
    }
);
    for (    VirtualFile root : dirsToRefresh) {
      root.refresh(false,true);
    }
  }
}
