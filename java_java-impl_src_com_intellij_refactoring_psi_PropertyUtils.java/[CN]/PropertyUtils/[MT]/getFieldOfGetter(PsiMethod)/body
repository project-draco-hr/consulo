{
  final PsiExpression value=getGetterReturnExpression(method);
  if (value == null)   return null;
  if (!(value instanceof PsiReferenceExpression)) {
    return null;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)value;
  final PsiExpression qualifier=reference.getQualifierExpression();
  if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {
    return null;
  }
  final PsiElement referent=reference.resolve();
  if (referent == null) {
    return null;
  }
  if (!(referent instanceof PsiField)) {
    return null;
  }
  final PsiField field=(PsiField)referent;
  final PsiType fieldType=field.getType();
  final PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return null;
  }
  if (!fieldType.equalsToText(returnType.getCanonicalText())) {
    return null;
  }
  final PsiClass fieldContainingClass=field.getContainingClass();
  final PsiClass methodContainingClass=method.getContainingClass();
  if (InheritanceUtil.isInheritorOrSelf(methodContainingClass,fieldContainingClass,true)) {
    return field;
  }
 else {
    return null;
  }
}
