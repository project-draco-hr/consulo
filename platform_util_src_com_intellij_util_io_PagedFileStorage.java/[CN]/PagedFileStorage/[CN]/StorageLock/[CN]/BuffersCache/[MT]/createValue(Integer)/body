{
  checkThreadAccess();
  PagedFileStorage owner=getRegisteredPagedFileStorageByIndex(key & FILE_INDEX_MASK);
  int off=(key & MAX_PAGES_COUNT) * owner.myPageSize;
  if (off > owner.length()) {
    throw new IndexOutOfBoundsException("off=" + off + " key.owner.length()="+ owner.length());
  }
  ++changeCount;
  ReadWriteMappedBufferWrapper wrapper=new ReadWriteMappedBufferWrapper(owner.myFile,off,Math.min((int)(owner.length() - off),owner.myPageSize));
  IOException oome=null;
  while (true) {
    try {
      wrapper.buf();
      if (oome != null) {
        LOG.info("Successfully recovered OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MEGABYTE + "MB " + "new size limit: " + mySizeLimit / MEGABYTE + "MB " + "trying to allocate " + wrapper.myLength + " block");
      }
      return wrapper;
    }
 catch (    IOException e) {
      if (e.getCause() instanceof OutOfMemoryError) {
        oome=e;
        if (mySizeLimit > LOWER_LIMIT) {
          mySizeLimit-=owner.myPageSize;
        }
        long newSize=mySize - owner.myPageSize;
        if (newSize >= 0) {
          ensureSize(newSize);
          continue;
        }
 else {
          throw new MappingFailedException("Cannot recover from OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MEGABYTE + "MB " + "new size limit: " + mySizeLimit / MEGABYTE + "MB " + "trying to allocate " + wrapper.myLength + " block",e);
        }
      }
      throw new MappingFailedException("Cannot map buffer",e);
    }
  }
}
