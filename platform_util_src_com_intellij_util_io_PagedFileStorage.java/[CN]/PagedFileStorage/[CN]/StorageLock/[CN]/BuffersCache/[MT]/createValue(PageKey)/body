{
  if (checkThreadAccess && !Thread.holdsLock(StorageLock.this)) {
    throw new IllegalStateException("Must hold StorageLock lock to access PagedFileStorage");
  }
  int off=key.page * BUFFER_SIZE;
  if (off > key.owner.length()) {
    throw new IndexOutOfBoundsException("off=" + off + " key.owner.length()="+ key.owner.length());
  }
  ReadWriteMappedBufferWrapper wrapper=new ReadWriteMappedBufferWrapper(key.owner.myFile,off,Math.min((int)(key.owner.length() - off),BUFFER_SIZE));
  IOException oome=null;
  while (true) {
    try {
      wrapper.buf();
      if (oome != null) {
        LOG.error("Successfully recovered OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MEGABYTE + "MB " + "new size limit: " + mySizeLimit / MEGABYTE + "MB " + "trying to allocate " + wrapper.myLength + " block");
      }
      return wrapper;
    }
 catch (    IOException e) {
      if (e.getCause() instanceof OutOfMemoryError) {
        oome=e;
        if (mySizeLimit > LOWER_LIMIT) {
          mySizeLimit-=BUFFER_SIZE;
        }
        long newSize=getSize() - BUFFER_SIZE;
        if (newSize >= 0) {
          ensureSize(newSize);
          continue;
        }
 else {
          throw new MappingFailedException("Cannot recover from OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MEGABYTE + "MB " + "new size limit: " + mySizeLimit / MEGABYTE + "MB " + "trying to allocate " + wrapper.myLength + " block",e);
        }
      }
      throw new MappingFailedException("Cannot map buffer",e);
    }
  }
}
