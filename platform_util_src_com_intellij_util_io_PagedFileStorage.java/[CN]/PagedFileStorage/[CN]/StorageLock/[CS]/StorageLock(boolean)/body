{
  this.checkThreadAccess=checkThreadAccess;
  myDefaultStorageLockContext=new StorageLockContext(this);
  mySizeLimit=UPPER_LIMIT;
  myMap=new LinkedHashMap<Integer,ByteBufferWrapper>(10,0.75f){
    @Override protected boolean removeEldestEntry(    Map.Entry<Integer,ByteBufferWrapper> eldest){
      return mySize > mySizeLimit;
    }
    @Nullable @Override public ByteBufferWrapper remove(    Object key){
      ByteBufferWrapper wrapper=super.remove(key);
      if (wrapper != null) {
        mySize-=wrapper.myLength;
        wrapper.dispose();
      }
      return wrapper;
    }
  }
;
}
