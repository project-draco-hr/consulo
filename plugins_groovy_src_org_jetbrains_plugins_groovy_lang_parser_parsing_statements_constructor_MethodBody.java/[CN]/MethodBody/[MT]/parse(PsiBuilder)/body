{
  PsiBuilder.Marker cbMarker=builder.mark();
  if (!ParserUtils.getToken(builder,mLCURLY)) {
    builder.error(GroovyBundle.message("lcurly.expected"));
    cbMarker.rollbackTo();
    return WRONGWAY;
  }
  ParserUtils.getToken(builder,mNLS);
  if (!WRONGWAY.equals(ExplicitConstructorStatement.parse(builder))) {
    builder.error(GroovyBundle.message("constructor.expected"));
    if (!WRONGWAY.equals(Separators.parse(builder))) {
      if (WRONGWAY.equals(OpenOrClosableBlock.parseBlockBody(builder))) {
        cbMarker.rollbackTo();
        return WRONGWAY;
      }
    }
    cbMarker.done(CONSTRUCTOR_BODY);
    return CONSTRUCTOR_BODY;
  }
 else {
    if (WRONGWAY.equals(OpenOrClosableBlock.parseBlockBody(builder))) {
      cbMarker.rollbackTo();
      return WRONGWAY;
    }
  }
  ParserUtils.waitNextRCurly(builder);
  if (!ParserUtils.getToken(builder,mRCURLY)) {
    builder.error(GroovyBundle.message("rcurly.expected"));
  }
  cbMarker.done(METHOD_BODY);
  return METHOD_BODY;
}
