{
  Project project=PlatformDataKeys.PROJECT_CONTEXT.getData(dataProvider);
  if (project != null && !project.isDisposed()) {
    return ProjectRootManager.getInstance(project).getContentRoots();
  }
  Module[] selectedModules=LangDataKeys.MODULE_CONTEXT_ARRAY.getData(dataProvider);
  if (selectedModules != null && selectedModules.length > 0) {
    return getFilesFromModules(selectedModules);
  }
  Module selectedModule=LangDataKeys.MODULE_CONTEXT.getData(dataProvider);
  if (selectedModule != null && !selectedModule.isDisposed()) {
    return ModuleRootManager.getInstance(selectedModule).getContentRoots();
  }
  PsiElement[] psiElements=LangDataKeys.PSI_ELEMENT_ARRAY.getData(dataProvider);
  if (psiElements != null && psiElements.length != 0) {
    return getFilesFromPsiElements(psiElements);
  }
  VirtualFile vFile=PlatformDataKeys.VIRTUAL_FILE.getData(dataProvider);
  if (vFile != null) {
    return new VirtualFile[]{vFile};
  }
  PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataProvider);
  if (psiFile != null && psiFile.getVirtualFile() != null) {
    return new VirtualFile[]{psiFile.getVirtualFile()};
  }
  PsiElement elem=LangDataKeys.PSI_ELEMENT.getData(dataProvider);
  if (elem != null) {
    return getFilesFromPsiElement(elem);
  }
  Usage[] usages=UsageView.USAGES_KEY.getData(dataProvider);
  UsageTarget[] usageTargets=UsageView.USAGE_TARGETS_KEY.getData(dataProvider);
  if (usages != null || usageTargets != null) {
    return UsageDataUtil.provideVirtualFileArray(usages,usageTargets);
  }
  return null;
}
