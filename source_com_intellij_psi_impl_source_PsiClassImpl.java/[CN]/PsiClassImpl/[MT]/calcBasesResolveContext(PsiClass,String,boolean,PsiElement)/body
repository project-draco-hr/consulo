{
  final PsiClassStub stub=((PsiClassImpl)aClass).getStub();
  if (stub == null || stub.isAnonymousInQualifiedNew()) {
    return aClass.getParent();
  }
  boolean isAnonOrLocal=isAnonymousOrLocal(aClass);
  if (!isAnonOrLocal) {
    return isInitialClass ? defaultResolveContext : aClass;
  }
  if (!isInitialClass) {
    if (aClass.findInnerClassByName(className,true) != null)     return aClass;
  }
  final StubElement parentStub=stub.getParentStub();
  final StubBasedPsiElementBase<?> context=(StubBasedPsiElementBase)parentStub.getPsi();
  PsiClass[] classesInScope=context.getStubOrPsiChildren(Constants.CLASS_BIT_SET,PsiClass.EMPTY_ARRAY);
  boolean needPreciseContext=false;
  if (classesInScope.length > 1) {
    for (    PsiClass scopeClass : classesInScope) {
      if (scopeClass == aClass)       continue;
      String className1=scopeClass.getName();
      if (className.equals(className1)) {
        needPreciseContext=true;
        break;
      }
    }
  }
 else {
    LOG.assertTrue(classesInScope.length == 1);
    LOG.assertTrue(classesInScope[0] == aClass);
  }
  if (needPreciseContext) {
    return aClass.getParent();
  }
 else {
    if (context instanceof PsiClass) {
      return calcBasesResolveContext((PsiClass)context,className,false,defaultResolveContext);
    }
 else     if (context instanceof PsiMember) {
      return calcBasesResolveContext(((PsiMember)context).getContainingClass(),className,false,defaultResolveContext);
    }
 else {
      LOG.assertTrue(false);
      return context;
    }
  }
}
