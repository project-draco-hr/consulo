{
  if (isEnum()) {
    String name=getName();
    if (name != null) {
      try {
        if (myValuesMethod == null || myValueOfMethod == null || !name.equals(myCachedForLongName)) {
          myCachedForLongName=name;
          final PsiMethod valuesMethod=JavaPsiFacade.getInstance(getManager().getProject()).getElementFactory().createMethodFromText("public static " + name + "[] values() {}",this);
          myValuesMethod=new LightMethod(getManager(),valuesMethod,this);
          final PsiMethod valueOfMethod=JavaPsiFacade.getInstance(getManager().getProject()).getElementFactory().createMethodFromText("public static " + name + " valueOf(String name) throws IllegalArgumentException {}",this);
          myValueOfMethod=new LightMethod(getManager(),valueOfMethod,this);
        }
        final NameHint nameHint=processor.getHint(NameHint.class);
        final ElementClassHint classHint=processor.getHint(ElementClassHint.class);
        if (nameHint == null || VALUES_METHOD.equals(nameHint.getName(state))) {
          if (classHint == null || classHint.shouldProcess(PsiMethod.class)) {
            if (!processor.execute(myValuesMethod,ResolveState.initial()))             return false;
          }
        }
        if (nameHint == null || VALUE_OF_METHOD.equals(nameHint.getName(state))) {
          if (classHint == null || classHint.shouldProcess(PsiMethod.class)) {
            if (!processor.execute(myValueOfMethod,ResolveState.initial()))             return false;
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
  return PsiClassImplUtil.processDeclarationsInClass(this,processor,state,new HashSet<PsiClass>(),lastParent,place,false);
}
