{
  boolean isAnonOrLocal=false;
  if (aClass instanceof PsiAnonymousClass) {
    isAnonOrLocal=true;
  }
 else {
    long scopeId=((PsiClassImpl)aClass).getParentId();
    RepositoryElementType scopeType=myManager.getRepositoryManager().getElementType(scopeId);
    boolean isLocalClass=scopeType == RepositoryElementType.METHOD || scopeType == RepositoryElementType.FIELD || scopeType == RepositoryElementType.CLASS_INITIALIZER;
    if (isLocalClass) {
      isAnonOrLocal=true;
    }
  }
  if (!isAnonOrLocal) {
    return isInitialClass ? (PsiElement)aClass.getExtendsList() : aClass;
  }
  if (!isInitialClass) {
    if (aClass.findInnerClassByName(className,true) != null)     return aClass;
  }
  long classId=((RepositoryPsiElement)aClass).getRepositoryId();
  RepositoryManager repositoryManager=myManager.getRepositoryManager();
  long scopeId=repositoryManager.getClassView().getParent(classId);
  long[] classesInScope=repositoryManager.getItemView(scopeId).getChildren(scopeId,RepositoryElementType.CLASS);
  boolean needPreciseContext=false;
  if (classesInScope.length > 1) {
    for (int i=0; i < classesInScope.length; i++) {
      long id=classesInScope[i];
      if (id == classId)       continue;
      String className1=repositoryManager.getClassView().getName(id);
      if (className.equals(className1)) {
        needPreciseContext=true;
        break;
      }
    }
  }
 else {
    LOG.assertTrue(classesInScope.length == 1);
    LOG.assertTrue(classesInScope[0] == classId);
  }
  if (needPreciseContext) {
    return aClass.getParent();
  }
 else {
    PsiElement context=myManager.getRepositoryElementsManager().findOrCreatePsiElementById(scopeId);
    if (context instanceof PsiClass) {
      return calcBasesResolveContext((PsiClass)context,className,false);
    }
 else     if (context instanceof PsiMember) {
      return calcBasesResolveContext(((PsiMember)context).getContainingClass(),className,false);
    }
 else {
      LOG.assertTrue(false);
      return context;
    }
  }
}
