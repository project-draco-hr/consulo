{
  if (isEnum()) {
    if (getName() != null) {
      try {
        if (myValuesMethod == null || myValueOfMethod == null || !getName().equals(myCachedForLongName)) {
          myCachedForLongName=getName();
          final PsiMethod valuesMethod=getManager().getElementFactory().createMethodFromText("public static " + getName() + "[] values() {}",this);
          myValuesMethod=new LightMethod(getManager(),valuesMethod,this);
          final PsiMethod valueOfMethod=getManager().getElementFactory().createMethodFromText("public static " + getName() + " valueOf(String name) throws IllegalArgumentException {}",this);
          myValueOfMethod=new LightMethod(getManager(),valueOfMethod,this);
        }
        final NameHint hint=processor.getHint(NameHint.class);
        if (hint == null || VALUES_METHOD.equals(hint.getName())) {
          if (!processor.execute(myValuesMethod,PsiSubstitutor.EMPTY))           return false;
        }
        if (hint == null || VALUE_OF_METHOD.equals(hint.getName())) {
          if (!processor.execute(myValueOfMethod,PsiSubstitutor.EMPTY))           return false;
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
  return PsiClassImplUtil.processDeclarationsInClass(this,processor,substitutor,new HashSet<PsiClass>(),lastParent,place,false);
}
