{
  if (!checkBases) {
    if (myCachedMethodsMap == null) {
      final HashMap<String,PsiMethod[]> map=new HashMap<String,PsiMethod[]>();
      Map<String,List<PsiMethod>> cachedMethodsMap=new HashMap<String,List<PsiMethod>>();
      final PsiMethod[] methods=getMethods();
      for (int i=0; i < methods.length; i++) {
        final PsiMethod method=methods[i];
        List<PsiMethod> list=cachedMethodsMap.get(method.getName());
        if (list == null) {
          list=new ArrayList<PsiMethod>(1);
          cachedMethodsMap.put(method.getName(),list);
        }
        list.add(method);
      }
      final Iterator<String> iterator=cachedMethodsMap.keySet().iterator();
      while (iterator.hasNext()) {
        final String methodName=iterator.next();
        map.put(methodName,cachedMethodsMap.get(methodName).toArray(PsiMethod.EMPTY_ARRAY));
      }
      myCachedMethodsMap=map;
    }
    final PsiMethod[] psiMethods=myCachedMethodsMap.get(name);
    return psiMethods != null ? psiMethods : PsiMethod.EMPTY_ARRAY;
  }
  return PsiClassImplUtil.findMethodsByName(this,name,checkBases);
}
