{
  final Set<String> indicesToUpdate=new HashSet<String>(myIndices.keySet());
  if (indicesToUpdate.size() == 0) {
    return;
  }
  try {
    final String projectLocationHash=project.getLocationHash();
    final boolean projectAlreadyProcessed=myProcessedProjects.contains(projectLocationHash);
    myProcessedProjects.add(projectLocationHash);
    ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
      public boolean processFile(      final VirtualFile file){
        if (!file.isDirectory()) {
          for (          String indexId : indicesToUpdate) {
            final boolean forceReindexThisProject=requiresRebuild.contains(indexId) && !projectAlreadyProcessed;
            if ((forceReindexThisProject || !IndexingStamp.isFileIndexed(file,indexId)) && getInputFilter(indexId).acceptInput(file)) {
              try {
                updateSingleIndex(indexId,file,new FileContent(file,loadContent(file)),null);
              }
 catch (              StorageException e) {
              }
            }
          }
        }
        return true;
      }
    }
);
  }
  finally {
    myFlushStorages.execute();
  }
}
