{
  final Set<String> indicesToUpdate=new HashSet<String>(myIndices.keySet());
  if (indicesToUpdate.size() == 0) {
    return;
  }
  indicator.pushState();
  try {
    indicator.setText("Building indices...");
    final int[] fileCount=new int[]{0};
    ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
      public boolean processFile(      final VirtualFile file){
        if (!file.isDirectory()) {
          fileCount[0]++;
        }
        return true;
      }
    }
);
    ProjectRootManager.getInstance(project).getFileIndex().iterateContent(new ContentIterator(){
      private int myProcessed=0;
      private final double myTotalCount=(double)fileCount[0];
      public boolean processFile(      final VirtualFile file){
        if (!file.isDirectory()) {
          for (          String indexId : indicesToUpdate) {
            if (!IndexingStamp.isFileIndexed(file,indexId,getIndexCreationStamp(indexId)) && getInputFilter(indexId).acceptInput(file)) {
              try {
                updateSingleIndex(indexId,file,new FileContent(file,loadContent(file)),null);
              }
 catch (              StorageException e) {
                LOG.error(e);
              }
            }
          }
          indicator.setFraction(((double)++myProcessed) / myTotalCount);
        }
        return true;
      }
    }
);
  }
  finally {
    indicator.setText("Saving caches...");
    myFlushStorages.execute();
    indicator.popState();
  }
}
