{
  try {
    indexUnsavedDocuments();
    final AbstractIndex<K,?> index=getIndex(indexId);
    if (index == null) {
      return Collections.emptyList();
    }
    final List<VirtualFile> files=new ArrayList<VirtualFile>();
    final TIntHashSet processedIds=new TIntHashSet();
    final DirectoryIndex dirIndex=DirectoryIndex.getInstance(project);
    final PersistentFS fs=(PersistentFS)PersistentFS.getInstance();
    final ValueContainer container=index.getData(dataKey);
    for (Iterator it=container.getValueIterator(); it.hasNext(); ) {
      final Object value=it.next();
      final ValueContainer.IntIterator inputIdsIterator=container.getInputIdsIterator(value);
      while (inputIdsIterator.hasNext()) {
        final int id=inputIdsIterator.next();
        if (processedIds.contains(id)) {
          continue;
        }
        processedIds.add(id);
        final boolean isDirectory=fs.isDirectory(id);
        final DirectoryInfo directoryInfo=isDirectory ? dirIndex.getInfoForDirectoryId(id) : dirIndex.getInfoForDirectoryId(fs.getParent(id));
        if (directoryInfo != null && directoryInfo.contentRoot != null) {
          if (isDirectory) {
            files.add(directoryInfo.directory);
          }
 else {
            final VirtualFile child=directoryInfo.directory.findChild(fs.getName(id));
            if (child != null) {
              files.add(child);
            }
          }
        }
      }
    }
    return files;
  }
 catch (  StorageException e) {
    LOG.error(e);
  }
  return Collections.emptyList();
}
