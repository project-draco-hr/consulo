{
  if (params.length == 0)   return LookupElement.EMPTY_ARRAY;
  Result paramResult=params[0].calculateQuickResult(context);
  if (paramResult instanceof PsiTypeResult) {
    final PsiType type=((PsiTypeResult)paramResult).getType();
    final PsiFile file=PsiDocumentManager.getInstance(context.getProject()).getPsiFile(context.getEditor().getDocument());
    final PsiElement element=file.findElementAt(context.getStartOffset());
    final Set<LookupElement> set=new LinkedHashSet<LookupElement>();
    JavaTemplateUtil.addTypeLookupItem(set,type);
    CodeInsightUtil.processSubTypes(type,element,false,Condition.TRUE,new Consumer<PsiType>(){
      @Override public void consume(      PsiType psiType){
        JavaTemplateUtil.addTypeLookupItem(set,psiType);
      }
    }
);
    return set.toArray(new LookupElement[set.size()]);
  }
  return LookupElement.EMPTY_ARRAY;
}
