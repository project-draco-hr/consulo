{
  final Project project=e.getRequiredData(CommonDataKeys.PROJECT);
  VcsLog log=e.getRequiredData(VcsLogDataKeys.VCS_LOG);
  final List<VcsFullCommitDetails> commits=log.getSelectedDetails();
  for (  VcsFullCommitDetails commit : commits) {
    myIdsInProgress.add(commit.getId());
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final ChangeListManagerEx changeListManagerEx=(ChangeListManagerEx)ChangeListManager.getInstance(project);
  changeListManagerEx.blockModalNotifications();
  new Task.Backgroundable(project,"Cherry-picking",false){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        List<VcsFullCommitDetails> sortedCommits=sortCommits(commits);
        Map<VcsCherryPicker,List<VcsFullCommitDetails>> groupedCommits=groupByVcs(project,sortedCommits);
        for (        Map.Entry<VcsCherryPicker,List<VcsFullCommitDetails>> entry : groupedCommits.entrySet()) {
          entry.getKey().cherryPick(entry.getValue());
        }
      }
  finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            changeListManagerEx.unblockModalNotifications();
            for (            VcsFullCommitDetails commit : commits) {
              myIdsInProgress.remove(commit.getId());
            }
          }
        }
);
      }
    }
  }
.queue();
}
