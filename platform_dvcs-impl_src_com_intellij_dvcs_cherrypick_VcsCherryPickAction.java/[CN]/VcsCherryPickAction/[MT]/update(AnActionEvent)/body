{
  super.update(e);
  e.getPresentation().setVisible(true);
  final VcsLog log=e.getData(VcsLogDataKeys.VCS_LOG);
  Project project=e.getProject();
  if (project == null) {
    e.getPresentation().setEnabledAndVisible(false);
    return;
  }
  VcsCherryPickManager cherryPickManager=VcsCherryPickManager.getInstance(project);
  List<VcsCherryPicker> cherryPickers=getActiveCherryPickersForProject(project);
  if (log == null || cherryPickers.isEmpty()) {
    e.getPresentation().setEnabledAndVisible(false);
    return;
  }
  List<CommitId> commits=VcsLogUtil.collectFirstPack(log.getSelectedCommits(),VcsLogUtil.MAX_SELECTED_COMMITS);
  if (commits.isEmpty() || cherryPickManager.isCherryPickAlreadyStartedFor(commits)) {
    e.getPresentation().setEnabled(false);
    return;
  }
  VcsCherryPicker enabledCherryPicker=getEnabledCherryPicker(log,cherryPickers,commits);
  e.getPresentation().setEnabled(enabledCherryPicker != null);
  e.getPresentation().setText(enabledCherryPicker == null ? concatActionNamesForAllAvailable(cherryPickers) : enabledCherryPicker.getActionTitle());
}
