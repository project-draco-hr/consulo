{
  super.compile();
  final ArrayList formsToInstrument=myFormFiles;
  if (formsToInstrument.size() == 0) {
    log("No forms to instrument found",Project.MSG_VERBOSE);
    return;
  }
  final StringBuffer classPathBuffer=new StringBuffer();
  classPathBuffer.append(getDestdir().getAbsolutePath());
  final Path classpath=getClasspath();
  final String[] pathElements=classpath.list();
  for (int i=0; i < pathElements.length; i++) {
    final String pathElement=pathElements[i];
    classPathBuffer.append(File.pathSeparator);
    classPathBuffer.append(pathElement);
  }
  classPathBuffer.append(File.pathSeparator);
  classPathBuffer.append(ClassPath.getClassPath());
  final String classPath=classPathBuffer.toString();
  log("classpath=" + classPath,Project.MSG_VERBOSE);
  try {
    initBcel(new ClassPath(classPath));
    final ClassLoader loader;
    try {
      loader=createClassLoader(classPath);
    }
 catch (    MalformedURLException e) {
      log(e.getMessage(),Project.MSG_ERR);
      return;
    }
    final HashMap class2form=new HashMap();
    formLoop:     for (int i=0; i < formsToInstrument.size(); i++) {
      final File formFile=(File)formsToInstrument.get(i);
      log("compiling form " + formFile.getAbsolutePath(),Project.MSG_VERBOSE);
      final byte[] bytes=new byte[(int)formFile.length()];
      try {
        final FileInputStream fileReader=new FileInputStream(formFile);
        fileReader.read(bytes);
        fileReader.close();
      }
 catch (      IOException e) {
        log(e.getMessage(),Project.MSG_ERR);
        continue;
      }
      final String formFileContent;
      try {
        formFileContent=new String(bytes,"utf8");
      }
 catch (      UnsupportedEncodingException e) {
        log(e.getMessage(),Project.MSG_ERR);
        continue;
      }
      final LwRootContainer rootContainer;
      try {
        rootContainer=Utils.getRootContainer(formFileContent,new CompiledClassPropertiesProvider(loader));
      }
 catch (      AlienFormFileException e) {
        continue;
      }
catch (      Exception e) {
        log("Cannot process form file " + formFile.getAbsolutePath() + ". Reason: "+ e,Project.MSG_ERR);
        continue;
      }
      final String classToBind=rootContainer.getClassToBind();
      if (classToBind == null) {
        continue;
      }
      String name=classToBind.replace('.','/');
      File classFile=getClassFile(name);
      if (classFile == null) {
        log(formFile.getAbsolutePath() + ": Class to bind does not exist: " + classToBind,Project.MSG_WARN);
        continue formLoop;
      }
      final File alreadyProcessedForm=(File)class2form.get(classToBind);
      if (alreadyProcessedForm != null) {
        log(formFile.getAbsolutePath() + ": " + "The form is bound to the class "+ classToBind+ ".\n"+ "Another form "+ alreadyProcessedForm.getAbsolutePath()+ " is also bound to this class.",Project.MSG_ERR);
        continue;
      }
      class2form.put(classToBind,formFile);
      final CodeGenerator codeGenerator=new CodeGenerator(rootContainer,classFile,loader);
      codeGenerator.patch();
      final String[] errors=codeGenerator.getErrors();
      final String[] warnings=codeGenerator.getWarnings();
      for (int j=0; j < warnings.length; j++) {
        log(formFile.getAbsolutePath() + ": " + warnings[j],Project.MSG_WARN);
      }
      for (int j=0; j < errors.length; j++) {
        log(formFile.getAbsolutePath() + ": " + errors[j],Project.MSG_ERR);
      }
    }
  }
  finally {
    disposeBcel();
  }
}
