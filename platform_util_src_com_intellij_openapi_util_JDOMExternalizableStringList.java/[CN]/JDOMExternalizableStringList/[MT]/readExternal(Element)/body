{
  clear();
  for (  final Object o : element.getChildren()) {
    Element listElement=(Element)o;
    if (ATTR_LIST.equals(listElement.getName())) {
      String sizeString=listElement.getAttributeValue(ATTR_LISTSIZE);
      int listSize;
      try {
        listSize=Integer.parseInt(sizeString);
      }
 catch (      NumberFormatException ex) {
        throw new InvalidDataException("Size " + sizeString + " found. Must be integer!");
      }
      for (int j=0; j < listSize; j++) {
        add(null);
      }
      final ClassLoader classLoader=Reflection.getCallerClass(2).getClassLoader();
      for (      final Object o1 : listElement.getChildren()) {
        Element listItemElement=(Element)o1;
        if (!ATTR_ITEM.equals(listItemElement.getName())) {
          throw new InvalidDataException("Unable to read list item. Unknown element found: " + listItemElement.getName());
        }
        String itemIndexString=listItemElement.getAttributeValue(ATTR_INDEX);
        String itemClassString=listItemElement.getAttributeValue(ATTR_CLASS);
        Class itemClass;
        try {
          itemClass=Class.forName(itemClassString,true,classLoader);
        }
 catch (        ClassNotFoundException ex) {
          throw new InvalidDataException("Unable to read list item: unable to load class: " + itemClassString + " \n"+ ex.getMessage());
        }
        String listItem=listItemElement.getAttributeValue(ATTR_VALUE);
        LOG.assertTrue(String.class.equals(itemClass));
        set(Integer.parseInt(itemIndexString),listItem);
      }
    }
  }
}
