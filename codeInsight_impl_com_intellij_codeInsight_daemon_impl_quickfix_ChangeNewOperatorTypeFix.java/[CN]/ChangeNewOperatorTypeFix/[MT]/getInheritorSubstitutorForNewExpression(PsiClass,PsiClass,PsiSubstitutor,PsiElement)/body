{
  PsiManager manager=baseClass.getManager();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
  if (superSubstitutor == null)   return null;
  PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
  final Iterator<PsiTypeParameter> inheritorParamIter=PsiUtil.typeParametersIterator(inheritor);
  while (inheritorParamIter.hasNext()) {
    PsiTypeParameter inheritorParameter=inheritorParamIter.next();
    final Iterator<PsiTypeParameter> baseParamIter=PsiUtil.typeParametersIterator(baseClass);
    while (baseParamIter.hasNext()) {
      PsiTypeParameter baseParameter=baseParamIter.next();
      final PsiType substituted=superSubstitutor.substitute(baseParameter);
      PsiType arg=baseSubstitutor.substitute(baseParameter);
      if (arg instanceof PsiWildcardType)       arg=((PsiWildcardType)arg).getBound();
      PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(context));
      if (substitution == PsiType.NULL)       continue;
      if (substitution == null) {
        return manager.getElementFactory().createRawSubstitutor(inheritor);
      }
      inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
      break;
    }
  }
  return inheritorSubstitutor;
}
