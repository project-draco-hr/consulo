{
  if (!AndroidCompileUtil.isFullBuild(context)) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  context.getProgressIndicator().setText("Packaging Android resources...");
  final List<ProcessingItem> result=new ArrayList<ProcessingItem>();
  for (  ProcessingItem processingItem : items) {
    MyItem item=(MyItem)processingItem;
    if (!AndroidCompileUtil.isModuleAffected(context,item.myModule)) {
      continue;
    }
    if (!AndroidPackagingCompiler.shouldGenerateApk(item.myModule,context,item.myReleasePackage)) {
      continue;
    }
    final VirtualFile preprocessedManifestFile;
    try {
      preprocessedManifestFile=item.myReleasePackage ? item.myManifestFile : copyManifestAndSetDebuggableToTrue(item.myModule,item.myManifestFile);
    }
 catch (    IOException e) {
      LOG.info(e);
      context.addMessage(CompilerMessageCategory.ERROR,"Cannot preprocess AndroidManifest.xml for debug build",item.myManifestFile.getUrl(),-1,-1);
      continue;
    }
    final Map<VirtualFile,VirtualFile> presentableFilesMap=Collections.singletonMap(item.myManifestFile,preprocessedManifestFile);
    try {
      Map<CompilerMessageCategory,List<String>> messages=AndroidApt.packageResources(item.myAndroidTarget,preprocessedManifestFile.getPath(),item.myResourceDirPaths,item.myAssetsDirPath,item.myOutputPath);
      AndroidCompileUtil.addMessages(context,messages,presentableFilesMap);
    }
 catch (    final IOException e) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (context.getProject().isDisposed())           return;
          context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
        }
      }
);
    }
    if (context.getMessages(CompilerMessageCategory.ERROR).length == 0) {
      result.add(item);
    }
  }
  return result.toArray(new ProcessingItem[result.size()]);
}
