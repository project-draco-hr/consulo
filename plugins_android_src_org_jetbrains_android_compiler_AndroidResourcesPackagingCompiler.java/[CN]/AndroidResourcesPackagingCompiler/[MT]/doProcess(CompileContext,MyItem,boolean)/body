{
  if (!AndroidPackagingCompiler.shouldGenerateApk(item.myModule,context,releasePackage)) {
    return;
  }
  final VirtualFile preprocessedManifestFile;
  try {
    preprocessedManifestFile=releasePackage ? item.myManifestFile : copyManifestAndSetDebuggableToTrue(item.myModule,item.myManifestFile);
  }
 catch (  IOException e) {
    LOG.info(e);
    context.addMessage(CompilerMessageCategory.ERROR,"Cannot preprocess AndroidManifest.xml for debug build",item.myManifestFile.getUrl(),-1,-1);
    return;
  }
  final Map<VirtualFile,VirtualFile> presentableFilesMap=Collections.singletonMap(item.myManifestFile,preprocessedManifestFile);
  try {
    final String outputPath=releasePackage ? item.myOutputPath + RELEASE_SUFFIX : item.myOutputPath;
    Map<CompilerMessageCategory,List<String>> messages=AndroidApt.packageResources(item.myAndroidTarget,item.myPlatformToolsRevision,preprocessedManifestFile.getPath(),item.myResourceDirPaths,item.myAssetsDirPath,outputPath,null,!releasePackage,0);
    AndroidCompileUtil.addMessages(context,messages,presentableFilesMap);
  }
 catch (  final IOException e) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        if (context.getProject().isDisposed())         return;
        context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
      }
    }
);
  }
}
