{
  if (psiType == null)   return null;
  if (!(psiType instanceof PsiClassType))   return null;
  final PsiClassType classType=(PsiClassType)psiType;
  final PsiClassType.ClassResolveResult classResolveResult=classType.resolveGenerics();
  final PsiClass psiClass=classResolveResult.getElement();
  if (psiClass == null)   return null;
  final PsiClass iterable=JavaPsiFacade.getInstance(psiClass.getProject()).findClass(superClass,psiClass.getResolveScope());
  if (iterable == null)   return null;
  if (!psiClass.isEquivalentTo(iterable) && !psiClass.isInheritor(iterable,true))   return null;
  final PsiTypeParameter[] parameters=iterable.getTypeParameters();
  if (parameters.length <= typeParamIndex)   return null;
  final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(iterable,psiClass,classResolveResult.getSubstitutor());
  return substitutor.substitute(parameters[typeParamIndex]);
}
