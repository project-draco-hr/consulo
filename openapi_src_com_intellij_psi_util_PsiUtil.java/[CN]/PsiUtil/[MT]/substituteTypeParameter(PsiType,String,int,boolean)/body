{
  if (psiType == null)   return null;
  if (!(psiType instanceof PsiClassType))   return null;
  final PsiClassType classType=(PsiClassType)psiType;
  final PsiClassType.ClassResolveResult classResolveResult=classType.resolveGenerics();
  final PsiClass psiClass=classResolveResult.getElement();
  if (psiClass == null)   return null;
  final PsiClass baseClass=JavaPsiFacade.getInstance(psiClass.getProject()).findClass(superClass,psiClass.getResolveScope());
  if (baseClass == null)   return null;
  if (!psiClass.isEquivalentTo(baseClass) && !psiClass.isInheritor(baseClass,true))   return null;
  final PsiTypeParameter[] parameters=baseClass.getTypeParameters();
  if (parameters.length <= typeParamIndex)   return null;
  final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,psiClass,classResolveResult.getSubstitutor());
  final PsiType type=substitutor.substitute(parameters[typeParamIndex]);
  if (type == null && eraseTypeParameter) {
    return TypeConversionUtil.typeParameterErasure(parameters[typeParamIndex]);
  }
  return type;
}
