{
  if (accessObject instanceof PsiSuperExpression) {
    final PsiJavaCodeReferenceElement qualifier=((PsiSuperExpression)accessObject).getQualifier();
    if (qualifier != null) {
      final ResolveResult result=qualifier.advancedResolve(false);
      final PsiElement resolve=result.getElement();
      if (resolve instanceof PsiClass) {
        final PsiClass psiClass;
        final PsiSubstitutor substitutor;
        if (resolve instanceof PsiTypeParameter) {
          final PsiClassType parameterType=resolve.getManager().getElementFactory().createType((PsiTypeParameter)resolve);
          final PsiType superType=result.getSubstitutor().substitute(parameterType);
          if (superType instanceof PsiArrayType) {
            return resolve.getManager().getElementFactory().getArrayClassType(((PsiArrayType)superType).getComponentType()).resolveGenerics();
          }
 else           if (superType instanceof PsiClassType) {
            final PsiClassType type=(PsiClassType)superType;
            substitutor=type.resolveGenerics().getSubstitutor();
            psiClass=type.resolve();
          }
 else {
            psiClass=null;
            substitutor=PsiSubstitutor.EMPTY;
          }
        }
 else {
          psiClass=(PsiClass)resolve;
          substitutor=PsiSubstitutor.EMPTY;
        }
        if (psiClass != null) {
          return new CandidateInfo(psiClass,substitutor);
        }
 else         return ResolveResult.EMPTY;
      }
      return ResolveResult.EMPTY;
    }
 else {
      PsiElement scope=accessObject.getContext();
      PsiElement lastParent=accessObject;
      while (scope != null) {
        if (scope instanceof PsiClass) {
          if (scope instanceof PsiAnonymousClass) {
            if (lastParent instanceof PsiExpressionList) {
              lastParent=scope;
              scope=scope.getContext();
              continue;
            }
          }
          return new CandidateInfo(scope,PsiSubstitutor.EMPTY);
        }
        lastParent=scope;
        scope=scope.getContext();
      }
      return ResolveResult.EMPTY;
    }
  }
 else {
    PsiType type=accessObject.getType();
    if (!(type instanceof PsiClassType || type instanceof PsiArrayType))     return ResolveResult.EMPTY;
    return PsiUtil.resolveGenericsClassInType(type);
  }
}
