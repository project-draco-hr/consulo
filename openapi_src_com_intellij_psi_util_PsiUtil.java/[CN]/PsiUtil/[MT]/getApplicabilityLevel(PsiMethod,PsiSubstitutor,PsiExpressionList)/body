{
  PsiExpression[] args=argList.getExpressions();
  final PsiParameter[] parms=method.getParameterList().getParameters();
  if (args.length < parms.length - 1)   return NOT_APPLICABLE;
  final LanguageLevel languageLevel=getLanguageLevel(argList);
  if (!areFirstArgumentsApplicable(args,parms,languageLevel,substitutorForMethod))   return NOT_APPLICABLE;
  if (args.length == parms.length) {
    if (parms.length == 0)     return FIXED_ARITY;
    PsiType parmType=getParameterType(parms[parms.length - 1],languageLevel,substitutorForMethod);
    PsiType argType=args[args.length - 1].getType();
    if (argType == null)     return NOT_APPLICABLE;
    if (parmType.isAssignableFrom(argType))     return FIXED_ARITY;
  }
  if (method.isVarArgs() && languageLevel.compareTo(LanguageLevel.JDK_1_5) >= 0) {
    if (args.length < parms.length)     return FIXED_ARITY;
    PsiParameter lastParameter=parms[parms.length - 1];
    if (!lastParameter.isVarArgs())     return NOT_APPLICABLE;
    PsiType lastParmType=getParameterType(lastParameter,languageLevel,substitutorForMethod);
    if (!(lastParmType instanceof PsiArrayType))     return NOT_APPLICABLE;
    lastParmType=((PsiArrayType)lastParmType).getComponentType();
    for (int i=parms.length - 1; i < args.length; i++) {
      PsiType argType=args[i].getType();
      if (argType == null || !TypeConversionUtil.isAssignable(lastParmType,argType)) {
        return NOT_APPLICABLE;
      }
    }
    return VARARGS;
  }
  return NOT_APPLICABLE;
}
