{
  final JPanel mainPanel=new JPanel(new GridBagLayout());
  myCbEnableProcessing=new JCheckBox("Enable annotation processing");
  myRbClasspath=new JRadioButton("Obtain processors from project classpath");
  myRbProcessorsPath=new JRadioButton("Processor path:");
  ButtonGroup group=new ButtonGroup();
  group.add(myRbClasspath);
  group.add(myRbProcessorsPath);
  myProcessorPathField=new TextFieldWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final VirtualFile[] files=FileChooser.chooseFiles(myProcessorPathField,FileChooserDescriptorFactory.createAllButJarContentsDescriptor());
      if (files.length > 0) {
        final StringBuilder builder=new StringBuilder();
        for (        VirtualFile file : files) {
          if (builder.length() > 0) {
            builder.append(File.pathSeparator);
          }
          builder.append(FileUtil.toSystemDependentName(file.getPath()));
        }
        myProcessorPathField.setText(builder.toString());
      }
    }
  }
);
  final JPanel processorTablePanel=new JPanel(new BorderLayout());
  myProcessorsModel=new ProcessorTableModel();
  processorTablePanel.setBorder(IdeBorderFactory.createTitledBorder("Annotation Processors"));
  myProcessorTable=new Table(myProcessorsModel);
  myProcessorTable.getEmptyText().setText("No processors configured");
  processorTablePanel.add(ScrollPaneFactory.createScrollPane(myProcessorTable),BorderLayout.CENTER);
  final JPanel buttons=new JPanel(new GridBagLayout());
  myAddButton=new JButton("Add");
  buttons.add(myAddButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  myRemoveButton=new JButton("Remove");
  buttons.add(myRemoveButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  processorTablePanel.add(buttons,BorderLayout.EAST);
  processorTablePanel.setPreferredSize(new Dimension(processorTablePanel.getPreferredSize().width,50));
  myModulesTable=new ProcessedModulesTable(myProject);
  myModulesTable.setBorder(IdeBorderFactory.createTitledBorder("Processed Modules"));
  final JLabel noteMessage=new MultiLineLabel("Source files generated by annotation processors will be stored under the project output directory.\n" + "To override this behaviour for certain modules you may specify the directory name in the table below.\n" + "If specified, the directory will be created under corresponding module's content root.");
  final JLabel warning=new MultiLineLabel("WARNING!\n" + "All source files located in the generated sources output directory WILL BE EXCLUDED from annotation processing.\n" + "If option 'Clear output directory on rebuild' is enabled,\n"+ "the entire contents of directories specified in the table below WILL BE CLEARED on rebuild.");
  warning.setFont(warning.getFont().deriveFont(Font.BOLD));
  mainPanel.add(myCbEnableProcessing,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  mainPanel.add(myRbClasspath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(10,0,0,0),0,0));
  mainPanel.add(myRbProcessorsPath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  mainPanel.add(myProcessorPathField,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  mainPanel.add(processorTablePanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  mainPanel.add(noteMessage,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  mainPanel.add(warning,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  mainPanel.add(myModulesTable,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  myRbClasspath.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  myProcessorTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        updateEnabledState();
      }
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final TableCellEditor cellEditor=myProcessorTable.getCellEditor();
      if (cellEditor != null) {
        cellEditor.stopCellEditing();
      }
      final ProcessorTableModel model=(ProcessorTableModel)myProcessorTable.getModel();
      final int inserdedIndex=model.addRow();
      TableUtil.editCellAt(myProcessorTable,inserdedIndex,ProcessorTableRow.NAME_COLUMN);
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.removeSelectedItems(myProcessorTable);
    }
  }
);
  myCbEnableProcessing.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  updateEnabledState();
  return mainPanel;
}
