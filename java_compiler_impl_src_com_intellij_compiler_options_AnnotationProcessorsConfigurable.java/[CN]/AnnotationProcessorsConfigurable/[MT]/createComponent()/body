{
  final JPanel mainPanel=new JPanel(new GridBagLayout());
  myCbEnableProcessing=new JCheckBox("Enable annotation processing");
  myRbClasspath=new JRadioButton("Obtain processors from project classpath");
  myRbProcessorsPath=new JRadioButton("Processor path:");
  ButtonGroup group=new ButtonGroup();
  group.add(myRbClasspath);
  group.add(myRbProcessorsPath);
  myProcessorPathField=new TextFieldWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final VirtualFile[] files=FileChooser.chooseFiles(myProcessorPathField,new FileChooserDescriptor(true,true,true,true,false,true));
      if (files.length > 0) {
        final StringBuilder builder=new StringBuilder();
        for (        VirtualFile file : files) {
          if (builder.length() > 0) {
            builder.append(File.pathSeparator);
          }
          builder.append(FileUtil.toSystemDependentName(file.getPath()));
        }
        myProcessorPathField.setText(builder.toString());
      }
    }
  }
);
  final JPanel processorTablePanel=new JPanel(new BorderLayout());
  myProcessorsModel=new ProcessorTableModel();
  final Table processorsTable=new Table(myProcessorsModel);
  processorTablePanel.setBorder(new TitledBorder("Annotation Processors"));
  processorTablePanel.add(new JScrollPane(processorsTable),BorderLayout.CENTER);
  final JPanel buttons=new JPanel(new GridBagLayout());
  final JButton addButton=new JButton("Add");
  final JButton removeButton=new JButton("Remove");
  buttons.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  buttons.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  processorTablePanel.add(buttons,BorderLayout.EAST);
  processorTablePanel.setPreferredSize(new Dimension(processorTablePanel.getPreferredSize().width,50));
  myModulesChooser=new ElementsChooser<Module>(true){
    protected String getItemText(    @NotNull Module module){
      return module.getName() + " (" + FileUtil.toSystemDependentName(module.getModuleFilePath())+ ")";
    }
    protected Icon getItemIcon(    Module module){
      return module.getModuleType().getNodeIcon(false);
    }
  }
;
  myModulesChooser.setBorder(BorderFactory.createTitledBorder("Processed Modules"));
  mainPanel.add(myCbEnableProcessing,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  mainPanel.add(myRbClasspath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(10,0,0,0),0,0));
  mainPanel.add(myRbProcessorsPath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  mainPanel.add(myProcessorPathField,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  mainPanel.add(processorTablePanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  mainPanel.add(myModulesChooser,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  myRbClasspath.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      final boolean useProcessorpath=!myRbClasspath.isSelected();
      myProcessorPathField.setEnabled(useProcessorpath);
    }
  }
);
  removeButton.setEnabled(false);
  processorsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        removeButton.setEnabled(processorsTable.getSelectedRow() >= 0);
      }
    }
  }
);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final TableCellEditor cellEditor=processorsTable.getCellEditor();
      if (cellEditor != null) {
        cellEditor.stopCellEditing();
      }
      final ProcessorTableModel model=(ProcessorTableModel)processorsTable.getModel();
      final int inserdedIndex=model.addRow();
      TableUtil.editCellAt(processorsTable,inserdedIndex,ProcessorTableRow.NAME_COLUMN);
    }
  }
);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.removeSelectedItems(processorsTable);
    }
  }
);
  return mainPanel;
}
