{
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  final FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  myRefCountHolder=fileStatusMap.getRefCountHolder(myFile);
  Runnable doCollectInfo=new Runnable(){
    public void run(){
      List<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
      final FileViewProvider viewProvider=myFile.getViewProvider();
      final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
      Set<PsiElement> elementSet=new THashSet<PsiElement>();
      for (      Language language : relevantLanguages) {
        PsiElement psiRoot=viewProvider.getPsi(language);
        if (!HighlightUtil.shouldHighlight(psiRoot))         continue;
        List<PsiElement> elements=CodeInsightUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
        elementSet.addAll(elements);
      }
      XmlHighlightVisitor.checkDuplicates(myRefCountHolder.getPossiblyDuplicateElementsMap(),myRefCountHolder,highlights);
      collectHighlights(elementSet,highlights);
      myHighlights=highlights;
      for (      HighlightInfo info : highlights) {
        if (info.getSeverity() == HighlightSeverity.ERROR) {
          fileStatusMap.setErrorFoundFlag(myDocument,true);
          break;
        }
      }
    }
  }
;
  if (!myRefCountHolder.retrieveUnusedReferencesInfo(doCollectInfo)) {
    progress.cancel();
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        DaemonCodeAnalyzer.getInstance(myProject).restart();
      }
    }
,myProject.getDisposed());
    throw new ProcessCanceledException();
  }
}
