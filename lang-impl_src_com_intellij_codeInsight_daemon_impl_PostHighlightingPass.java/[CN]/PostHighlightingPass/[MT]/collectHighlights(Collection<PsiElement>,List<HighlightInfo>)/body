{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(myFile);
  boolean unusedSymbolEnabled=profile.isToolEnabled(HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME));
  boolean unusedImportEnabled=profile.isToolEnabled(HighlightDisplayKey.find(UnusedImportLocalInspection.SHORT_NAME));
  LocalInspectionToolWrapper unusedSymbolTool=(LocalInspectionToolWrapper)profile.getInspectionTool(UnusedSymbolLocalInspection.SHORT_NAME);
  final UnusedSymbolLocalInspection unusedSymbolInspection=unusedSymbolTool == null ? null : (UnusedSymbolLocalInspection)unusedSymbolTool.getTool();
  if (unusedImportEnabled && PsiUtil.isInJspFile(myFile)) {
    final JspFile jspFile=PsiUtil.getJspFile(myFile);
    if (jspFile != null) {
      unusedImportEnabled=!JspSpiUtil.isIncludedOrIncludesSomething(jspFile);
    }
  }
  for (  PsiElement element : elements) {
    ProgressManager.getInstance().checkCanceled();
    if (element instanceof PsiIdentifier && unusedSymbolEnabled) {
      final HighlightInfo highlightInfo=processIdentifier((PsiIdentifier)element,unusedSymbolInspection);
      if (highlightInfo != null)       array.add(highlightInfo);
    }
 else     if (element instanceof PsiImportList && unusedImportEnabled) {
      final PsiImportStatementBase[] imports=((PsiImportList)element).getAllImportStatements();
      for (      PsiImportStatementBase statement : imports) {
        final HighlightInfo highlightInfo=processImport(statement);
        if (highlightInfo != null)         array.add(highlightInfo);
      }
    }
 else     if (element instanceof XmlAttributeValue) {
      final HighlightInfo info=XmlHighlightVisitor.checkIdRefAttrValue((XmlAttributeValue)element,myRefCountHolder);
      if (info != null) {
        array.add(info);
      }
    }
  }
}
