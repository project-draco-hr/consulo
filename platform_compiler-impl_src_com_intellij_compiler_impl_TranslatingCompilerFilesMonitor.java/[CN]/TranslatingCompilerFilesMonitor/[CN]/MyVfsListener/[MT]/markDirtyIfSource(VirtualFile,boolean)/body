{
  final Set<File> pathsToMark=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  processRecursively(file,false,new FileProcessor(){
    @Override public void execute(    final VirtualFile file){
      pathsToMark.add(new File(file.getPath()));
      final SourceFileInfo srcInfo=file.isValid() ? loadSourceInfo(file) : null;
      if (srcInfo != null) {
        for (        int projectId : srcInfo.getProjectIds().toArray()) {
          if (isSuspended(projectId)) {
            if (srcInfo.clearPaths(projectId)) {
              srcInfo.updateTimestamp(projectId,-1L);
              saveSourceInfo(file,srcInfo);
            }
          }
 else {
            addSourceForRecompilation(projectId,file,srcInfo);
            if (fromMove) {
              if (srcInfo.clearPaths(projectId)) {
                saveSourceInfo(file,srcInfo);
              }
            }
          }
        }
      }
 else {
        processNewFile(file,false);
      }
    }
  }
);
  if (fromMove) {
    notifyFilesDeleted(pathsToMark);
  }
 else   if (!isIgnoredOrUnderIgnoredDirectory(file)) {
    notifyFilesChanged(pathsToMark);
  }
}
