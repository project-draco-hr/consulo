{
  final List<RepositoryLocationGroup> groups=new ArrayList<RepositoryLocationGroup>();
  final List<RepositoryLocation> singles=new ArrayList<RepositoryLocation>();
  final MultiMap<SVNURL,RepositoryLocation> map=new MultiMap<SVNURL,RepositoryLocation>();
  for (  RepositoryLocation location : in) {
    final SvnRepositoryLocation svnLocation=(SvnRepositoryLocation)location;
    final String url=svnLocation.getURL();
    final SVNURL root=SvnUtil.getRepositoryRoot(myVcs,url);
    if (root == null) {
      LOG.error("repository root not found for location:" + location.toPresentableString());
      singles.add(location);
    }
 else {
      map.putValue(root,svnLocation);
    }
  }
  final Set<SVNURL> keys=map.keySet();
  for (  SVNURL key : keys) {
    final Collection<RepositoryLocation> repositoryLocations=map.get(key);
    if (repositoryLocations.size() == 1) {
      singles.add(repositoryLocations.iterator().next());
    }
 else {
      final SvnRepositoryLocationGroup group=new SvnRepositoryLocationGroup(key,repositoryLocations);
      groups.add(group);
    }
  }
  return new Pair<List<RepositoryLocationGroup>,List<RepositoryLocation>>(groups,singles);
}
