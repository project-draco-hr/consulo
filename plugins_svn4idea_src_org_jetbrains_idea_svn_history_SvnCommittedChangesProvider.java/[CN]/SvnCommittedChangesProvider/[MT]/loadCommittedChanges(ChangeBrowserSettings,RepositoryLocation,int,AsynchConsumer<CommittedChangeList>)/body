{
  try {
    final SvnRepositoryLocation svnLocation=(SvnRepositoryLocation)location;
    final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
    if (progress != null) {
      progress.setText(SvnBundle.message("progress.text.changes.collecting.changes"));
      progress.setText2(SvnBundle.message("progress.text2.changes.establishing.connection",location));
    }
    final String repositoryRoot;
    try {
      final SVNRepository repository=myVcs.createRepository(svnLocation.getURL());
      repositoryRoot=repository.getRepositoryRoot(true).toString();
      repository.closeSession();
    }
 catch (    SVNException e) {
      throw new VcsException(e);
    }
    final ChangeBrowserSettings.Filter filter=settings.createFilter();
    getCommittedChangesImpl(settings,svnLocation.getURL(),new String[]{""},maxCount,new Consumer<SVNLogEntry>(){
      public void consume(      final SVNLogEntry svnLogEntry){
        final SvnChangeList cl=new SvnChangeList(myVcs,svnLocation,svnLogEntry,repositoryRoot);
        if (filter.accepts(cl)) {
          consumer.consume(cl);
        }
      }
    }
);
  }
  finally {
    consumer.finished();
  }
}
