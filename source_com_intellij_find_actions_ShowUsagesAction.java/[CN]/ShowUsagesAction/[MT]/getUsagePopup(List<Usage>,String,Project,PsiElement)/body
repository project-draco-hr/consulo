{
  Usage[] arr=usages.toArray(new Usage[usages.size()]);
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setDetachedMode(true);
  final UsageViewImpl usageView=(UsageViewImpl)UsageViewManager.getInstance(project).createUsageView(new UsageTarget[0],arr,presentation,null);
  GroupNode root=usageView.getRoot();
  List<UsageNode> nodes=new ArrayList<UsageNode>();
  addUsageNodes(root,nodes);
  if (nodes.size() == 1) {
    Usage usage=nodes.get(0).getUsage();
    navigateAndHint(usage,FindBundle.message("all.usages.are.in.this.line",usages.size(),searchScopePresentableName(element)));
    usageView.dispose();
    return null;
  }
  final JList list=new JList(new Vector<UsageNode>(nodes));
  list.setCellRenderer(new ListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      JPanel panel=new JPanel(new GridBagLayout());
      UsageNode usageNode=(UsageNode)value;
      int seq=appendGroupText((GroupNode)usageNode.getParent(),panel,list,value,index,isSelected);
      ColoredListCellRenderer usageRenderer=new ColoredListCellRenderer(){
        protected void customizeCellRenderer(        JList list,        Object value,        int index,        boolean selected,        boolean hasFocus){
          UsageNode usageNode=(UsageNode)value;
          Usage usage=usageNode.getUsage();
          UsagePresentation presentation=usage.getPresentation();
          setIcon(presentation.getIcon());
          TextChunk[] text=presentation.getText();
          for (          TextChunk textChunk : text) {
            append(textChunk.getText(),SimpleTextAttributes.fromTextAttributes(textChunk.getAttributes()));
          }
        }
      }
;
      usageRenderer.setIpad(new Insets(0,0,0,0));
      usageRenderer.setBorder(null);
      usageRenderer.getListCellRendererComponent(list,value,index,isSelected,false);
      panel.add(usageRenderer,new GridBagConstraints(seq,0,GridBagConstraints.REMAINDER,0,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,1));
      panel.setBackground(list.getBackground());
      return panel;
    }
    private int appendGroupText(    final GroupNode node,    JPanel panel,    JList list,    Object value,    int index,    boolean isSelected){
      if (node != null && node.getGroup() != null) {
        int seq=appendGroupText((GroupNode)node.getParent(),panel,list,value,index,isSelected);
        if (node.canNavigateToSource()) {
          ColoredListCellRenderer renderer=new ColoredListCellRenderer(){
            protected void customizeCellRenderer(            JList list,            Object value,            int index,            boolean selected,            boolean hasFocus){
              UsageGroup group=node.getGroup();
              setIcon(group.getIcon(false));
              append(group.getText(usageView),SimpleTextAttributes.REGULAR_ATTRIBUTES);
              append(" ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
            }
          }
;
          renderer.setIpad(new Insets(0,0,0,0));
          renderer.setBorder(null);
          renderer.getListCellRendererComponent(list,value,index,isSelected,false);
          panel.add(renderer,new GridBagConstraints(seq,0,1,0,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,1));
          return seq + 1;
        }
      }
      return 0;
    }
  }
);
  final Runnable runnable=new Runnable(){
    public void run(){
      Object element=list.getSelectedValue();
      if (element == null)       return;
      UsageNode node=(UsageNode)element;
      Usage usage=node.getUsage();
      navigateAndHint(usage,null);
      usageView.dispose();
    }
  }
;
  ListSpeedSearch speedSearch=new ListSpeedSearch(list){
    protected String getElementText(    final Object element){
      StringBuilder text=new StringBuilder();
      UsageNode node=(UsageNode)element;
      Usage usage=node.getUsage();
      VirtualFile virtualFile=UsageListCellRenderer.getVirtualFile(usage);
      if (virtualFile != null) {
        text.append(virtualFile.getName());
      }
      TextChunk[] chunks=usage.getPresentation().getText();
      for (      TextChunk chunk : chunks) {
        text.append(chunk.getText());
      }
      return text.toString();
    }
  }
;
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(){
    public void translatePattern(    final StringBuilder buf,    final String pattern){
      final int len=pattern.length();
      for (int i=0; i < len; ++i) {
        translateCharacter(buf,pattern.charAt(i));
      }
    }
  }
);
  PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (title != null) {
    builder.setTitle(title + " " + FindBundle.message("some.usages.found",usages.size()));
  }
  return builder.setItemChoosenCallback(runnable).createPopup();
}
