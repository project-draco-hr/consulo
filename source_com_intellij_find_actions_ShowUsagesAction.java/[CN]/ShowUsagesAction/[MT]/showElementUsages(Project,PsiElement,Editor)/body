{
  Processor<Usage> processor=new Processor<Usage>(){
    public boolean process(    final Usage usage){
      usage.navigate(true);
      return false;
    }
  }
;
  ArrayList<Usage> usages=new ArrayList<Usage>();
  CommonProcessors.CollectProcessor<Usage> collect=new CommonProcessors.CollectProcessor<Usage>(usages);
  UsageViewPresentation presentation=((FindManagerImpl)FindManager.getInstance(project)).getFindUsagesManager().processUsages(element,collect);
  if (usages.isEmpty()) {
    HintManager.getInstance().showInformationHint(editor,FindBundle.message("find.usage.view.no.usages.text"));
  }
 else   if (usages.size() == 1) {
    Usage usage=usages.iterator().next();
    usage.navigate(true);
    FileEditorLocation location=usage.getLocation();
    FileEditor newFileEditor=location == null ? null : location.getEditor();
    Editor newEditor=newFileEditor instanceof TextEditor ? ((TextEditor)newFileEditor).getEditor() : null;
    if (newEditor != null) {
      HintManager.getInstance().showInformationHint(newEditor,FindBundle.message("show.usages.only.usage"));
    }
  }
 else {
    final String title=presentation.getTabText();
    getUsagePopup(usages,title,processor).showInBestPositionFor(editor);
  }
}
