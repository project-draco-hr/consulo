{
  Collections.sort(usages,new Comparator<Usage>(){
    public int compare(    final Usage o1,    final Usage o2){
      VirtualFile file1=UsageListCellRenderer.getVirtualFile(o1);
      VirtualFile file2=UsageListCellRenderer.getVirtualFile(o2);
      String name1=file1 == null ? "" : file1.getName();
      String name2=file2 == null ? "" : file2.getName();
      String s1=name1 + o1;
      String s2=name2 + o2;
      return s1.compareTo(s2);
    }
  }
);
  final JList list=new JList(new Vector<Usage>(usages));
  list.setCellRenderer(new UsageListCellRenderer(project));
  final Runnable runnable=new Runnable(){
    public void run(){
      int[] ids=list.getSelectedIndices();
      if (ids == null || ids.length == 0)       return;
      for (      Object element : list.getSelectedValues()) {
        processor.process((Usage)element);
      }
    }
  }
;
  ListSpeedSearch speedSearch=new ListSpeedSearch(list){
    protected String getElementText(    final Object element){
      StringBuilder text=new StringBuilder();
      Usage usage=(Usage)element;
      VirtualFile virtualFile=UsageListCellRenderer.getVirtualFile(usage);
      if (virtualFile != null) {
        text.append(virtualFile.getName());
      }
      TextChunk[] chunks=usage.getPresentation().getText();
      for (      TextChunk chunk : chunks) {
        text.append(chunk.getText());
      }
      return text.toString();
    }
  }
;
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(){
    public void translatePattern(    final StringBuilder buf,    final String pattern){
      final int len=pattern.length();
      for (int i=0; i < len; ++i) {
        translateCharacter(buf,pattern.charAt(i));
      }
    }
  }
);
  PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (title != null) {
    builder.setTitle(title);
  }
  return builder.setItemChoosenCallback(runnable).createPopup();
}
