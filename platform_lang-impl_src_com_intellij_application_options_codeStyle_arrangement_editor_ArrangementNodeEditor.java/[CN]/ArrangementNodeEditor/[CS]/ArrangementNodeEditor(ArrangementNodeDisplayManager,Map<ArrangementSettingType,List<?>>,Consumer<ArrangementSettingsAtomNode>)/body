{
  myDisplayManager=manager;
  setOpaque(false);
  setBorder(IdeBorderFactory.createEmptyBorder(0,8,0,8));
  setLayout(new GridBagLayout());
  myTypeComboBox=new JComboBox();
  ArrangementSettingType[] types=settings.keySet().toArray(new ArrangementSettingType[settings.size()]);
  Arrays.sort(types,new Comparator<ArrangementSettingType>(){
    @Override public int compare(    ArrangementSettingType o1,    ArrangementSettingType o2){
      return myDisplayManager.getDisplayValue(o1).compareTo(myDisplayManager.getDisplayValue(o2));
    }
  }
);
  final Map<Object,ArrangementSettingType> uiText2Type=new HashMap<Object,ArrangementSettingType>();
  for (  ArrangementSettingType type : types) {
    String displayValue=myDisplayManager.getDisplayValue(type);
    uiText2Type.put(displayValue,type);
    myTypeComboBox.addItem(displayValue);
  }
  myTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        myCardLayout.show(myValuePanel,myCurrentCard=e.getItem().toString());
      }
    }
  }
);
  add(myTypeComboBox,new GridBag().insets(0,3,0,0));
  int maxWidth=0;
  String widestCardName=null;
  for (  Map.Entry<ArrangementSettingType,List<?>> entry : settings.entrySet()) {
    List<String> values=new ArrayList<String>();
    for (    Object o : entry.getValue()) {
      values.add(myDisplayManager.getDisplayValue(o));
      Collections.sort(values);
    }
    ArrangementAtomEditor atomEditor=new ArrangementAtomEditor(values,manager);
    String cardName=myDisplayManager.getDisplayValue(entry.getKey());
    myEditors.put(cardName,atomEditor);
    myValuePanel.add(atomEditor,cardName);
    Dimension size=atomEditor.getPreferredSize();
    if (maxWidth < size.width) {
      widestCardName=cardName;
      maxWidth=size.width;
    }
  }
  add(myValuePanel,new GridBag().insets(0,8,0,0).fillCellHorizontally().weightx(1).coverLine());
  myNegateCheckBox=new JCheckBox(ApplicationBundle.message("arrangement.text.negate"));
  add(myNegateCheckBox,new GridBag().insets(0,0,0,0).anchor(GridBagConstraints.WEST).coverLine());
  JButton okButton=new JButton(AllIcons.Actions.Checked);
  okButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ArrangementSettingType type=uiText2Type.get(myTypeComboBox.getSelectedItem());
      Object value=myEditors.get(myCurrentCard).getValue();
      resultProcessor.consume(new ArrangementSettingsAtomNode(type,value));
    }
  }
);
  add(okButton,new GridBag().insets(0,3,0,0).weightx(1).fillCellHorizontally().coverLine());
  if (widestCardName != null) {
    myCardLayout.show(myValuePanel,widestCardName);
    myPrefSize=super.getPreferredSize();
  }
 else {
    myPrefSize=super.getPreferredSize();
  }
  myCardLayout.show(myValuePanel,myCurrentCard=myTypeComboBox.getSelectedItem().toString());
}
