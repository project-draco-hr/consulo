{
  super.visitUnaryExpression(expression);
  IElementType opType=expression.getOperationTokenType();
  if (opType != GroovyTokenTypes.mINC && opType != GroovyTokenTypes.mDEC)   return;
  GrExpression operand=expression.getOperand();
  if (!(operand instanceof GrReferenceExpression))   return;
  PsiElement resolved=((GrReferenceExpression)operand).resolve();
  if (!(resolved instanceof GrVariable) || resolved instanceof GrField)   return;
  List<ReadWriteVariableInstruction> accesses=ControlFlowUtils.findAccess((GrVariable)resolved,expression.getOperand(),true,false);
  boolean allAreWrite=true;
  for (  ReadWriteVariableInstruction access : accesses) {
    if (!access.isWrite()) {
      allAreWrite=false;
      break;
    }
  }
  if (allAreWrite) {
    if (expression.isPostfix() && PsiUtil.isExpressionUsed(expression)) {
      registerError(expression.getOperationToken(),GroovyInspectionBundle.message("unused.0",expression.getOperationToken().getText()),new LocalQuickFix[]{new ReplacePostfixIncWithPrefixFix(expression),new RemoveIncOrDecFix(expression)},ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    }
 else     if (!PsiUtil.isExpressionUsed(expression)) {
      registerError(expression.getOperationToken(),GroovyInspectionBundle.message("unused.0",expression.getOperationToken().getText()),LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    }
  }
}
