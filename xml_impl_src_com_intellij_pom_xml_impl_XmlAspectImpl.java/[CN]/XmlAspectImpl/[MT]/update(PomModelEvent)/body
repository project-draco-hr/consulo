{
  if (!event.getChangedAspects().contains(myTreeAspect))   return;
  final TreeChangeEvent changeSet=(TreeChangeEvent)event.getChangeSet(myTreeAspect);
  if (changeSet == null)   return;
  final ASTNode rootElement=changeSet.getRootElement();
  final PsiFile file=(PsiFile)rootElement.getPsi();
  if (!(file instanceof XmlFile))   return;
  final XmlAspectChangeSetImpl xmlChangeSet=event.registerChangeSetIfAbsent(this,new XmlAspectChangeSetImpl(myModel));
  xmlChangeSet.addChangedFile((XmlFile)file);
  final ASTNode[] changedElements=changeSet.getChangedElements();
  final CharTable table=((FileElement)changeSet.getRootElement()).getCharTable();
  for (int i=0; i < changedElements.length; i++) {
    ASTNode changedElement=changedElements[i];
    TreeChange changesByElement=changeSet.getChangesByElement(changedElement);
    PsiElement psiElement=null;
    while (changedElement != null && (psiElement=changedElement.getPsi()) == null) {
      final ASTNode parent=changedElement.getTreeParent();
      final ChangeInfoImpl changeInfo=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,changedElement);
      changeInfo.compactChange(changedElement,changesByElement);
      changesByElement=new TreeChangeImpl(parent);
      changesByElement.addChange(changedElement,changeInfo);
      changedElement=parent;
    }
    if (changedElement == null)     continue;
    final TreeChange finalChangedElement=changesByElement;
    psiElement.accept(new PsiElementVisitor(){
      TreeChange myChange=finalChangedElement;
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
      }
      @Override public void visitElement(      PsiElement element){
        final ASTNode child=element.getNode();
        final ASTNode treeParent=child.getTreeParent();
        if (treeParent == null)         return;
        final PsiElement parent=treeParent.getPsi();
        final ChangeInfoImpl changeInfo=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,child);
        changeInfo.compactChange(child,myChange);
        myChange=new TreeChangeImpl(treeParent);
        myChange.addChange(child,changeInfo);
        parent.accept(this);
      }
      @Override public void visitXmlAttribute(      XmlAttribute attribute){
        final ASTNode[] affectedChildren=myChange.getAffectedChildren();
        String oldName=null;
        String oldValue=null;
        for (int j=0; j < affectedChildren.length; j++) {
          final ASTNode treeElement=affectedChildren[j];
          final ChangeInfo changeByChild=myChange.getChangeByChild(treeElement);
          final int changeType=changeByChild.getChangeType();
          if (treeElement.getElementType() == XmlTokenType.XML_NAME) {
            if (changeType == ChangeInfo.REMOVED) {
              oldName=treeElement.getText();
            }
 else             if (changeType == ChangeInfo.REPLACE) {
              oldName=((ReplaceChangeInfo)changeByChild).getReplaced().getText();
            }
          }
          if (treeElement.getElementType() == XmlElementType.XML_ATTRIBUTE_VALUE) {
            if (changeType == ChangeInfo.REMOVED) {
              oldValue=treeElement.getText();
            }
 else             if (changeType == ChangeInfo.REPLACE) {
              oldValue=((ReplaceChangeInfo)changeByChild).getReplaced().getText();
            }
          }
        }
        if (oldName != null && !oldName.equals(attribute.getName())) {
          xmlChangeSet.add(new XmlAttributeSetImpl(attribute.getParent(),oldName,null));
          xmlChangeSet.add(new XmlAttributeSetImpl(attribute.getParent(),attribute.getName(),attribute.getValue()));
        }
 else         if (oldValue != null) {
          xmlChangeSet.add(new XmlAttributeSetImpl(attribute.getParent(),attribute.getName(),attribute.getValue()));
        }
 else {
          xmlChangeSet.add(new XmlElementChangedImpl(attribute));
        }
      }
      @Override public void visitXmlTag(      XmlTag tag){
        ASTNode[] affectedChildren=shortenChange(myChange.getAffectedChildren(),changeSet);
        for (        final ASTNode treeElement : affectedChildren) {
          if (treeElement instanceof ChameleonElement || !(treeElement.getPsi() instanceof XmlTagChild)) {
            visitElement(tag);
            return;
          }
        }
        for (        final ASTNode treeElement : affectedChildren) {
          final ChangeInfo changeByChild=myChange.getChangeByChild(treeElement);
          final int changeType=changeByChild.getChangeType();
          final IElementType type=treeElement.getElementType();
          if (type == ElementType.WHITE_SPACE)           continue;
          final PsiElement element=treeElement.getPsi();
switch (changeType) {
case ChangeInfo.ADD:
            xmlChangeSet.add(new XmlTagChildAddImpl(tag,(XmlTagChild)element));
          break;
case ChangeInfo.REMOVED:
        treeElement.putUserData(CharTable.CHAR_TABLE_KEY,table);
      xmlChangeSet.add(new XmlTagChildRemovedImpl(tag,(XmlTagChild)element));
    break;
case ChangeInfo.CONTENTS_CHANGED:
  xmlChangeSet.add(new XmlTagChildChangedImpl(tag,(XmlTagChild)element));
break;
case ChangeInfo.REPLACE:
final PsiElement psi=((ReplaceChangeInfo)changeByChild).getReplaced().getPsi();
if (psi instanceof XmlTagChild) {
final XmlTagChild replaced=(XmlTagChild)psi;
replaced.putUserData(CharTable.CHAR_TABLE_KEY,table);
xmlChangeSet.add(new XmlTagChildRemovedImpl(tag,replaced));
xmlChangeSet.add(new XmlTagChildAddImpl(tag,(XmlTagChild)element));
}
break;
}
}
}
@Override public void visitXmlDocument(XmlDocument document){
xmlChangeSet.clear();
xmlChangeSet.add(new XmlDocumentChangedImpl(document));
}
@Override public void visitFile(PsiFile file){
final XmlDocument document=((XmlFile)file).getDocument();
if (document != null) {
xmlChangeSet.clear();
xmlChangeSet.add(new XmlDocumentChangedImpl(document));
}
}
}
);
}
}
