{
  if (operand instanceof GrRegex) {
    StringBuilder b=new StringBuilder();
    GrStringUtil.parseRegexCharacters(GrStringUtil.removeQuotes(operand.getText()),b,null,operand.getText().startsWith("/"));
    GrStringUtil.escapeSymbolsForGString(b,!multiline,false);
  }
 else   if (operand instanceof GrString) {
    final String text=GrStringUtil.removeQuotes(operand.getText());
    if (multiline && ((GrString)operand).isPlainString()) {
      final StringBuilder buffer=new StringBuilder(text);
      GrStringUtil.unescapeCharacters(buffer,"\"",true);
      builder.append(buffer);
    }
 else {
      builder.append(text);
    }
  }
 else   if (operand instanceof GrLiteral) {
    String text=GrStringUtil.removeQuotes(operand.getText());
    if (multiline) {
      final int position=builder.length();
      GrStringUtil.escapeAndUnescapeSymbols(text,"$","'\"",builder);
      GrStringUtil.fixAllTripleDoubleQuotes(builder,position);
    }
 else {
      GrStringUtil.escapeAndUnescapeSymbols(text,"$\"","'",builder);
    }
  }
 else   if (MyPredicate.satisfiedBy(operand,false)) {
    performIntention((GrBinaryExpression)operand,builder,multiline);
  }
 else   if (isToStringMethod(operand,builder)) {
  }
 else {
    builder.append(START_BRACE).append(operand == null ? "" : operand.getText()).append(END_BRACE);
  }
}
