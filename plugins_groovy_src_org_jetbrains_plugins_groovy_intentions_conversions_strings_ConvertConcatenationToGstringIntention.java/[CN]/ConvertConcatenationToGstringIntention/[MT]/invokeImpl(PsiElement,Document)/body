{
  boolean isMultiline=containsMultilineStrings((GrExpression)element);
  StringBuilder builder=new StringBuilder(element.getTextLength());
  if (element instanceof GrBinaryExpression) {
    performIntention((GrBinaryExpression)element,builder,isMultiline);
  }
 else   if (element instanceof GrLiteral) {
    getOperandText((GrExpression)element,builder,isMultiline);
  }
 else {
    return;
  }
  String text=builder.toString();
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(element.getProject());
  final GrExpression newExpr=factory.createExpressionFromText(GrStringUtil.addQuotes(text,true));
  CommandProcessor.getInstance().executeCommand(element.getProject(),new Runnable(){
    @Override public void run(){
      final AccessToken accessToken=WriteAction.start();
      try {
        final GrExpression expression=((GrExpression)element).replaceWithExpression(newExpr,true);
        if (expression instanceof GrString) {
          GrStringUtil.removeUnnecessaryBracesInGString((GrString)expression);
        }
      }
  finally {
        accessToken.finish();
      }
    }
  }
,null,null,document);
}
