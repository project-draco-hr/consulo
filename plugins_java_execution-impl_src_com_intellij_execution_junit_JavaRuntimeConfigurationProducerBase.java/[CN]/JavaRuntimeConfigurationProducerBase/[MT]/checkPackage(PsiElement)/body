{
  if (element == null || !element.isValid())   return null;
  final Project project=element.getProject();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  if (element instanceof PsiJavaPackage) {
    final PsiJavaPackage aPackage=(PsiJavaPackage)element;
    final PsiDirectory[] directories=aPackage.getDirectories(GlobalSearchScope.projectScope(project));
    for (    final PsiDirectory directory : directories) {
      if (isSource(directory,fileIndex))       return aPackage;
    }
    return null;
  }
 else   if (element instanceof PsiDirectory) {
    final PsiDirectory directory=(PsiDirectory)element;
    if (isSource(directory,fileIndex)) {
      return JavaDirectoryService.getInstance().getPackage(directory);
    }
 else {
      final VirtualFile virtualFile=directory.getVirtualFile();
      if (fileIndex.getContentRootForFile(virtualFile) == virtualFile) {
        final Module module=ModuleUtilCore.findModuleForFile(virtualFile,project);
        if (module != null) {
          final ContentEntry[] entries=ModuleRootManager.getInstance(module).getContentEntries();
          for (          ContentEntry entry : entries) {
            if (virtualFile.equals(entry.getFile())) {
              final SourceFolder[] folders=entry.getSourceFolders();
              Set<String> packagePrefixes=new HashSet<String>();
              for (              SourceFolder folder : folders) {
                packagePrefixes.add(folder.getPackagePrefix());
              }
              if (packagePrefixes.size() != 1)               return null;
              return JavaPsiFacade.getInstance(project).findPackage(packagePrefixes.iterator().next());
            }
          }
        }
      }
      return null;
    }
  }
 else {
    return null;
  }
}
