{
  final WhiteSpace whiteSpace=block.getWhiteSpace();
  final TextRange textRange=whiteSpace.getTextRange();
  final TextRange wsRange=shiftRange(textRange,shift);
  final String newWhiteSpace=_newWhiteSpace.toString();
  Document document=model.getDocumentModel().getDocument();
  int documentLengthBefore=document == null ? -1 : document.getTextLength();
  TextRange newWhiteSpaceRange=model.replaceWhiteSpace(wsRange,newWhiteSpace);
  if (document == null) {
    shift+=newWhiteSpaceRange.getLength() - textRange.getLength();
  }
 else {
    shift+=document.getTextLength() - documentLengthBefore;
  }
  if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) {
    final TextRange currentBlockRange=shiftRange(block.getTextRange(),shift);
    IndentInside lastLineIndent=block.getLastLineIndent();
    IndentInside whiteSpaceIndent=IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace));
    final int shiftInside=calcShift(lastLineIndent,whiteSpaceIndent,options);
    final TextRange newBlockRange=model.shiftIndentInsideRange(currentBlockRange,shiftInside);
    shift+=newBlockRange.getLength() - block.getLength();
  }
  return shift;
}
