{
  final SpacingImpl spaceProperty=myCurrentBlock.getSpaceProperty();
  final WhiteSpace whiteSpace=myCurrentBlock.getWhiteSpace();
  if (isReformatSelectedRangesContext()) {
    if (isCurrentBlockAlignmentUsedInRangesToModify() && whiteSpace.isReadOnly() && spaceProperty != null && !spaceProperty.isReadOnly()) {
      whiteSpace.setReadOnly(false);
      whiteSpace.setLineFeedsAreReadOnly(true);
    }
  }
  whiteSpace.arrangeLineFeeds(spaceProperty,this);
  if (!whiteSpace.containsLineFeeds()) {
    whiteSpace.arrangeSpaces(spaceProperty);
  }
  try {
    if (processWrap()) {
      return;
    }
  }
  finally {
    if (whiteSpace.containsLineFeeds()) {
      onCurrentLineChanged();
    }
  }
  if (!adjustIndent()) {
    return;
  }
  defineAlignOffset(myCurrentBlock);
  if (myCurrentBlock.containsLineFeeds()) {
    onCurrentLineChanged();
  }
  final List<TextRange> ranges=getDependentRegionRangesAfterCurrentWhiteSpace(spaceProperty,whiteSpace);
  if (!ranges.isEmpty()) {
    registerUnresolvedDependentSpacingRanges(spaceProperty,ranges);
  }
  if (!whiteSpace.isIsReadOnly() && shouldReformatPreviouslyLocatedDependentSpacing(whiteSpace)) {
    myAlignAgain.add(whiteSpace);
  }
 else   if (!myAlignAgain.isEmpty()) {
    myAlignAgain.remove(whiteSpace);
  }
  myCurrentBlock=myCurrentBlock.getNextBlock();
}
