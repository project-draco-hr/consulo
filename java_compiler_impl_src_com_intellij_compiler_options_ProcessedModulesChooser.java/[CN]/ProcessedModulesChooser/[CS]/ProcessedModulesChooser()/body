{
  super(new BorderLayout());
  myTableModel=new MyTableModel();
  myTable=new Table(myTableModel);
  myTable.setShowGrid(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  myTable.setColumnSelectionAllowed(false);
  JScrollPane pane=ScrollPaneFactory.createScrollPane(myTable);
  pane.setPreferredSize(new Dimension(100,155));
  final TableColumnModel columnModel=myTable.getColumnModel();
  final int checkmarkWidth=new JCheckBox().getPreferredSize().width;
  final CheckMarkColumnCellRenderer checkmarkRenderer=new CheckMarkColumnCellRenderer(myTable.getDefaultRenderer(Boolean.class));
  final TableColumn checkMarkColumn=columnModel.getColumn(myTableModel.CHECK_MARK_COLUM_INDEX);
  checkMarkColumn.setHeaderValue("");
  checkMarkColumn.setPreferredWidth(checkmarkWidth);
  checkMarkColumn.setMaxWidth(checkmarkWidth);
  checkMarkColumn.setCellRenderer(checkmarkRenderer);
  TableColumn storeUnderContent=columnModel.getColumn(myTableModel.STORE_UNDER_CONTENT_COLUM_INDEX);
  final String title="Generate Sources Under Content";
  storeUnderContent.setHeaderValue(title);
  final JTableHeader tableHeader=myTable.getTableHeader();
  final FontMetrics metrics=tableHeader.getFontMetrics(tableHeader.getFont());
  final int preferredWidth=metrics.stringWidth(title) + 12;
  storeUnderContent.setPreferredWidth(preferredWidth);
  storeUnderContent.setMaxWidth(preferredWidth);
  storeUnderContent.setCellRenderer(checkmarkRenderer);
  final TableColumn moduleColumn=columnModel.getColumn(myTableModel.ELEMENT_COLUMN_INDEX);
  moduleColumn.setHeaderValue("Module");
  moduleColumn.setCellRenderer(new MyElementColumnCellRenderer());
  add(pane,BorderLayout.CENTER);
  myTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final int[] selectedRows=myTable.getSelectedRows();
      boolean currentlyMarked=true;
      for (      int selectedRow : selectedRows) {
        currentlyMarked=myTableModel.isMarked(selectedRow);
        if (!currentlyMarked) {
          break;
        }
      }
      myTableModel.setMarked(selectedRows,!currentlyMarked);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  final SpeedSearchBase<Table> speedSearch=new SpeedSearchBase<Table>(myTable){
    public int getSelectedIndex(){
      return myTable.getSelectedRow();
    }
    public Object[] getAllElements(){
      final int count=myTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myTableModel.getModuleAt(idx);
      }
      return elements;
    }
    public String getElementText(    Object element){
      return ((Module)element).getName() + " (" + FileUtil.toSystemDependentName(((Module)element).getModuleFilePath())+ ")";
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myTableModel.getModuleAt(row))) {
          myTable.getSelectionModel().setSelectionInterval(row,row);
          TableUtil.scrollSelectionToVisible(myTable);
          break;
        }
      }
    }
  }
;
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(false));
}
