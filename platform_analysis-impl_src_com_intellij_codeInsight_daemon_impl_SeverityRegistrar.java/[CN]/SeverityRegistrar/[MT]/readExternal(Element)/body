{
  myMap.clear();
  myRendererColors.clear();
  final List children=element.getChildren(INFO);
  for (  Object child : children) {
    final Element infoElement=(Element)child;
    final SeverityBasedTextAttributes highlightInfo=new SeverityBasedTextAttributes();
    highlightInfo.readExternal(infoElement);
    Color color=null;
    final String colorStr=infoElement.getAttributeValue(COLOR);
    if (colorStr != null) {
      color=new Color(Integer.parseInt(colorStr,16));
    }
    registerSeverity(highlightInfo,color);
  }
  myOrder.clear();
  myReadOrder=new JDOMExternalizableStringList();
  myReadOrder.readExternal(element);
  for (int i=0; i < myReadOrder.size(); i++) {
    String name=myReadOrder.get(i);
    HighlightSeverity severity=getSeverity(name);
    if (severity == null)     continue;
    myOrder.put(severity,i);
  }
  final List<HighlightSeverity> knownSeverities=getDefaultOrder();
  myOrder.retainEntries(new TObjectIntProcedure<HighlightSeverity>(){
    @Override public boolean execute(    HighlightSeverity severity,    int order){
      return knownSeverities.contains(severity);
    }
  }
);
  if (myOrder.isEmpty()) {
    setFromList(knownSeverities);
  }
  List<HighlightSeverity> list=getOrderAsList();
  for (int i=0; i < knownSeverities.size(); i++) {
    HighlightSeverity stdSeverity=knownSeverities.get(i);
    if (!list.contains(stdSeverity)) {
      for (int oIdx=0; oIdx < list.size(); oIdx++) {
        HighlightSeverity orderSeverity=list.get(oIdx);
        HighlightInfoType type=STANDARD_SEVERITIES.get(orderSeverity.toString());
        if (type != null && knownSeverities.indexOf(type.getSeverity(null)) > i) {
          list.add(oIdx,stdSeverity);
          myReadOrder=null;
          break;
        }
      }
    }
  }
  setFromList(list);
}
