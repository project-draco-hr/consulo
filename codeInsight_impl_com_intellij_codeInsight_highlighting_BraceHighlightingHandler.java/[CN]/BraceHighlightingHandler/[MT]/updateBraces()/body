{
  if (myPsiFile == null)   return;
  clearBraceHighlighters();
  if (!myCodeInsightSettings.HIGHLIGHT_BRACES)   return;
  if (myEditor.getSelectionModel().hasSelection())   return;
  int offset=myEditor.getCaretModel().getOffset();
  final CharSequence chars=myEditor.getDocument().getCharsSequence();
  if (myEditor.offsetToLogicalPosition(offset).column != myEditor.getCaretModel().getLogicalPosition().column) {
    final int caretLineNumber=myEditor.getCaretModel().getLogicalPosition().line;
    if (caretLineNumber >= myDocument.getLineCount())     return;
    offset=myDocument.getLineEndOffset(caretLineNumber) + myDocument.getLineSeparatorLength(caretLineNumber);
  }
  final int originalOffset=offset;
  HighlighterIterator iterator=((EditorEx)myEditor).getHighlighter().createIterator(offset);
  if (iterator.atEnd()) {
    offset--;
  }
 else   if (BraceMatchingUtil.isRBraceTokenToHighlight(iterator,chars,myFileType)) {
    offset--;
  }
 else   if (!BraceMatchingUtil.isLBraceTokenToHighlight(iterator,chars,myFileType)) {
    offset--;
    if (offset >= 0) {
      final HighlighterIterator i=((EditorEx)myEditor).getHighlighter().createIterator(offset);
      if (!BraceMatchingUtil.isRBraceTokenToHighlight(i,chars,myFileType))       offset++;
    }
  }
  if (offset < 0) {
    removeLineMarkers();
    return;
  }
  iterator=((EditorEx)myEditor).getHighlighter().createIterator(offset);
  myAlarm.cancelAllRequests();
  if (BraceMatchingUtil.isLBraceTokenToHighlight(iterator,chars,myFileType) || BraceMatchingUtil.isRBraceTokenToHighlight(iterator,chars,myFileType)) {
    doHighlight(offset,originalOffset);
  }
  if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
    removeLineMarkers();
    return;
  }
  final int _offset=offset;
  myAlarm.addRequest(new Runnable(){
    public void run(){
      highlightScope(_offset);
    }
  }
,300);
}
