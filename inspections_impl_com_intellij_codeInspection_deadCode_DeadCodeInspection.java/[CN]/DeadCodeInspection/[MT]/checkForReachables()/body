{
  CodeScanner codeScanner=new CodeScanner();
  getRefManager().iterate(new RefVisitor(){
    public void visitElement(    RefEntity refEntity){
      if (refEntity instanceof RefElement) {
        final RefElementImpl refElement=(RefElementImpl)refEntity;
        final PsiElement element=refElement.getElement();
        if (element == null)         return;
        final InspectionProfile profile=InspectionProjectProfileManager.getInstance(element.getProject()).getInspectionProfile(element);
        if (getContext().RUN_WITH_EDITOR_PROFILE && profile.getInspectionTool(getShortName()) != DeadCodeInspection.this)         return;
        refElement.setReachable(false);
        refElement.accept(new RefVisitor(){
          public void visitMethod(          RefMethod method){
            if (isAddMainsEnabled() && method.isAppMain()) {
              getEntryPointsManager().addEntryPoint(method,false);
            }
            if (isAddJUnitEnabled() && method.isTestMethod()) {
              getEntryPointsManager().addEntryPoint(method,false);
            }
          }
          public void visitClass(          RefClass aClass){
            if (isAddJUnitEnabled() && aClass.isTestCase()) {
              getEntryPointsManager().addEntryPoint(aClass,false);
            }
 else             if (isAddAppletEnabled() && aClass.isApplet() || isAddServletEnabled() && aClass.isServlet() || RefUtil.isEntryPoint(aClass)) {
              getEntryPointsManager().addEntryPoint(aClass,false);
            }
          }
        }
);
      }
    }
  }
);
  SmartRefElementPointer[] entryPoints=getEntryPointsManager().getEntryPoints();
  for (  SmartRefElementPointer entry : entryPoints) {
    if (entry.getRefElement() != null) {
      entry.getRefElement().accept(codeScanner);
    }
  }
  while (codeScanner.newlyInstantiatedClassesCount() != 0) {
    codeScanner.cleanInstantiatedClassesCount();
    codeScanner.processDelayedMethods();
  }
}
