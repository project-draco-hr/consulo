{
  final Project project=element.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  if (element instanceof PsiMethod && isAddMainsEnabled()) {
    if (PsiClassImplUtil.isMethodEquivalentTo((PsiMethod)element,psiFacade.getElementFactory().createMethodFromText("void main(String[] args);",null)))     return true;
    if (PsiClassImplUtil.isMethodEquivalentTo((PsiMethod)element,psiFacade.getElementFactory().createMethodFromText("void premain(String[] args, java.lang.instrument.Instrumentation i);",null)))     return true;
  }
  if (element instanceof PsiClass) {
    if (((PsiClass)element).isAnnotationType()) {
      return true;
    }
    if (((PsiClass)element).isEnum()) {
      return true;
    }
    final PsiClass applet=psiFacade.findClass("java.applet.Applet",GlobalSearchScope.allScope(project));
    if (isAddAppletEnabled() && applet != null && ((PsiClass)element).isInheritor(applet,true)) {
      return true;
    }
    final PsiClass servlet=psiFacade.findClass("javax.servlet.Servlet",GlobalSearchScope.allScope(project));
    if (isAddServletEnabled() && servlet != null && ((PsiClass)element).isInheritor(servlet,true)) {
      return true;
    }
  }
  if (element instanceof PsiModifierListOwner && AnnotationUtil.isAnnotated((PsiModifierListOwner)element,ADDITIONAL_ANNOTATIONS)) {
    return true;
  }
  for (  UnusedCodeExtension extension : myExtensions) {
    if (extension.isEntryPoint(element)) {
      return true;
    }
  }
  final ImplicitUsageProvider[] implicitUsageProviders=Extensions.getExtensions(ImplicitUsageProvider.EP_NAME);
  for (  ImplicitUsageProvider provider : implicitUsageProviders) {
    if (provider.isImplicitUsage(element))     return true;
  }
  return false;
}
