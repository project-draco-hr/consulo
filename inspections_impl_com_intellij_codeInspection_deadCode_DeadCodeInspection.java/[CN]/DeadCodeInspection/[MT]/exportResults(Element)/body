{
  final RefUnreferencedFilter filter=new RefUnreferencedFilter(this);
  final DeadHTMLComposer composer=new DeadHTMLComposer(this);
  checkForReachables();
  getRefManager().iterate(new RefManager.RefIterator(){
    public void accept(    RefEntity refEntity){
      if (!(refEntity instanceof RefElement))       return;
      if (filter.accepts((RefElement)refEntity)) {
        if (refEntity instanceof RefImplicitConstructor)         refEntity=((RefImplicitConstructor)refEntity).getOwnerClass();
        Element element=XMLExportUtl.createElement(refEntity,parentNode,-1);
        Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
        problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"));
        element.addContent(problemClassElement);
        Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
        StringBuffer buf=new StringBuffer();
        composer.appendProblemSynopsis((RefElement)refEntity,buf);
        descriptionElement.addContent(buf.toString());
        element.addContent(descriptionElement);
      }
    }
  }
);
}
