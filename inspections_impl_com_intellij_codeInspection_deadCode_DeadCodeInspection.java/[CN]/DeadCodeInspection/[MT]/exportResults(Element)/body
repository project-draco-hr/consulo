{
  final WeakUnreferencedFilter filter=new WeakUnreferencedFilter(this);
  getRefManager().iterate(new RefVisitor(){
    @Override public void visitElement(    RefEntity refEntity){
      if (!(refEntity instanceof RefElement))       return;
      if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefElement)refEntity)) {
        if (refEntity instanceof RefImplicitConstructor)         refEntity=((RefImplicitConstructor)refEntity).getOwnerClass();
        Element element=XMLExportUtl.createElement(refEntity,parentNode,-1,null);
        @NonNls Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
        if (refEntity instanceof RefElement) {
          final RefElement refElement=(RefElement)refEntity;
          final HighlightSeverity severity=getCurrentSeverity(refElement);
          final String attributeKey=getTextAttributeKey(refElement.getElement().getProject(),severity,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
          problemClassElement.setAttribute("severity",severity.myName);
          problemClassElement.setAttribute("attribute_key",attributeKey);
        }
        problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"));
        element.addContent(problemClassElement);
        @NonNls Element hintsElement=new Element("hints");
        for (        String hint : HINTS) {
          @NonNls Element hintElement=new Element("hint");
          hintElement.setAttribute("value",hint);
          hintsElement.addContent(hintElement);
        }
        element.addContent(hintsElement);
        Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
        StringBuffer buf=new StringBuffer();
        DeadHTMLComposer.appendProblemSynopsis((RefElement)refEntity,buf);
        descriptionElement.addContent(buf.toString());
        element.addContent(descriptionElement);
      }
    }
  }
);
}
