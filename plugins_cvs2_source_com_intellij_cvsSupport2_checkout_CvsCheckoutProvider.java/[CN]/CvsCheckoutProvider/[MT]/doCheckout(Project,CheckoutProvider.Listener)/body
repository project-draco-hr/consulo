{
  final File checkoutDirectory;
  final CvsElement[] selectedElements;
  CheckoutWizard checkoutWizard=new CheckoutWizard(project);
  checkoutWizard.show();
  if (!checkoutWizard.isOK())   return;
  final boolean useAlternateCheckoutPath=checkoutWizard.useAlternativeCheckoutLocation();
  checkoutDirectory=checkoutWizard.getCheckoutDirectory();
  selectedElements=checkoutWizard.getSelectedElements();
  final CvsHandler checkoutHandler=CommandCvsHandler.createCheckoutHandler(checkoutWizard.getSelectedConfiguration(),collectCheckoutPaths(selectedElements),checkoutDirectory,useAlternateCheckoutPath,CvsApplicationLevelConfiguration.getInstance().MAKE_CHECKED_OUT_FILES_READONLY);
  final CvsOperationExecutor executor=new CvsOperationExecutor(null);
  executor.performActionSync(checkoutHandler,CvsOperationExecutorCallback.EMPTY);
  if (!executor.hasNoErrors()) {
    Messages.showErrorDialog(CvsBundle.message("message.error.checkout",executor.getResult().composeError().getLocalizedMessage()),CvsBundle.message("operation.name.check.out.project"));
  }
  VirtualFileManager.getInstance().refresh(true,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          for (          CvsElement element : selectedElements) {
            File path=useAlternateCheckoutPath ? checkoutDirectory : new File(checkoutDirectory,element.getCheckoutPath());
            listener.directoryCheckedOut(path);
          }
          listener.checkoutCompleted();
        }
      }
);
    }
  }
);
}
