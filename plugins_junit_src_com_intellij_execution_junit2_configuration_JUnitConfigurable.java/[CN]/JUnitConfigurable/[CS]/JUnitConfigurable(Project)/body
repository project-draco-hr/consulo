{
  myProject=project;
  myModel=new JUnitConfigurationModel(project);
  myModuleSelector=new ConfigurationModuleSelector(project,getModulesComponent());
  myCommonJavaParameters.setModuleContext(myModuleSelector.getModule());
  myModule.getComponent().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myCommonJavaParameters.setModuleContext(myModuleSelector.getModule());
    }
  }
);
  myBrowsers=new BrowseModuleValueActionListener[]{new PackageChooserActionListener(project),new TestClassBrowser(project),new MethodBrowser(project),new TestsChooserActionListener(project),new BrowseModuleValueActionListener(project){
    @Override protected String showDialog(){
      final VirtualFile virtualFile=FileChooser.chooseFile(FileChooserDescriptorFactory.createSingleFolderDescriptor(),project,null);
      if (virtualFile != null) {
        return FileUtil.toSystemDependentName(virtualFile.getPath());
      }
      return null;
    }
  }
};
  final DefaultComboBoxModel aModel=new DefaultComboBoxModel();
  aModel.addElement(JUnitConfigurationModel.ALL_IN_PACKAGE);
  aModel.addElement(JUnitConfigurationModel.DIR);
  aModel.addElement(JUnitConfigurationModel.PATTERN);
  aModel.addElement(JUnitConfigurationModel.CLASS);
  aModel.addElement(JUnitConfigurationModel.METHOD);
  myTypeChooser.setModel(aModel);
  myTypeChooser.setRenderer(new ListCellRendererWrapper<Integer>(myTypeChooser){
    @Override public void customize(    JList list,    Integer value,    int index,    boolean selected,    boolean hasFocus){
switch (value) {
case JUnitConfigurationModel.ALL_IN_PACKAGE:
        setText("All in package");
      break;
case JUnitConfigurationModel.DIR:
    setText("All in directory");
  break;
case JUnitConfigurationModel.PATTERN:
setText("Pattern");
break;
case JUnitConfigurationModel.CLASS:
setText("Class");
break;
case JUnitConfigurationModel.METHOD:
setText("Method");
break;
}
}
}
);
myTestLocations[JUnitConfigurationModel.ALL_IN_PACKAGE]=myPackage;
myTestLocations[JUnitConfigurationModel.CLASS]=myClass;
myTestLocations[JUnitConfigurationModel.METHOD]=myMethod;
myTestLocations[JUnitConfigurationModel.DIR]=myDir;
final JPanel panel=myPattern.getComponent();
panel.setLayout(new BorderLayout());
myPatternTextField=new TextFieldWithBrowseButton();
myPatternTextField.setButtonIcon(IconUtil.getAddIcon());
panel.add(myPatternTextField,BorderLayout.CENTER);
final FixedSizeButton editBtn=new FixedSizeButton();
editBtn.setIcon(AllIcons.Actions.ShowViewer);
editBtn.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
Messages.showTextAreaDialog(myPatternTextField.getTextField(),"Configure suite tests","EditParametersPopupWindow");
}
}
);
panel.add(editBtn,BorderLayout.EAST);
myTestLocations[JUnitConfigurationModel.PATTERN]=myPattern;
final FileChooserDescriptor dirFileChooser=FileChooserDescriptorFactory.createSingleFolderDescriptor();
dirFileChooser.setHideIgnored(false);
final JTextField textField=myDir.getComponent().getTextField();
InsertPathAction.addTo(textField,dirFileChooser);
FileChooserFactory.getInstance().installFileCompletion(textField,dirFileChooser,true,null);
myModel.setListener(this);
myTypeChooser.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
final Object selectedItem=myTypeChooser.getSelectedItem();
myModel.setType((Integer)selectedItem);
changePanel();
}
}
);
myModel.setType(JUnitConfigurationModel.CLASS);
installDocuments();
addRadioButtonsListeners(new JRadioButton[]{myWholeProjectScope,mySingleModuleScope,myModuleWDScope},null);
myWholeProjectScope.addChangeListener(new ChangeListener(){
public void stateChanged(final ChangeEvent e){
onScopeChanged();
}
}
);
myCommonJavaParameters.getProgramParametersComponent().setVisible(false);
setAnchor(mySearchForTestsLabel);
myAlternativeJREPanel.setAnchor(myModule.getLabel());
myCommonJavaParameters.setAnchor(myModule.getLabel());
}
