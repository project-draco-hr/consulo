{
  myPackage=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  myPackage.setComponent(new EditorTextFieldWithBrowseButton(myProject,false));
  myClass=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  final TestClassBrowser classBrowser=new TestClassBrowser(myProject);
  myClass.setComponent(new EditorTextFieldWithBrowseButton(myProject,true,new JavaCodeFragment.VisibilityChecker(){
    @Override public Visibility isDeclarationVisible(    PsiElement declaration,    PsiElement place){
      try {
        if (declaration instanceof PsiClass && classBrowser.getFilter().isAccepted(((PsiClass)declaration))) {
          return Visibility.VISIBLE;
        }
      }
 catch (      ClassBrowser.NoFilterException e) {
        return Visibility.NOT_VISIBLE;
      }
      return Visibility.NOT_VISIBLE;
    }
  }
));
  myMethod=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  final EditorTextFieldWithBrowseButton textFieldWithBrowseButton=new EditorTextFieldWithBrowseButton(myProject,true,JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE,PlainTextLanguage.INSTANCE.getAssociatedFileType());
  new TextFieldCompletionProvider(){
    @Override protected void addCompletionVariants(    @NotNull String text,    int offset,    @NotNull String prefix,    @NotNull CompletionResultSet result){
      final String className=getClassName();
      if (className.trim().length() == 0) {
        return;
      }
      final PsiClass testClass=getModuleSelector().findClass(className);
      if (testClass == null)       return;
      final JUnitUtil.TestMethodFilter filter=new JUnitUtil.TestMethodFilter(testClass);
      for (      PsiMethod psiMethod : testClass.getAllMethods()) {
        if (filter.value(psiMethod)) {
          result.addElement(LookupElementBuilder.create(psiMethod.getName()));
        }
      }
    }
  }
.apply(textFieldWithBrowseButton.getChildComponent());
  myMethod.setComponent(textFieldWithBrowseButton);
}
