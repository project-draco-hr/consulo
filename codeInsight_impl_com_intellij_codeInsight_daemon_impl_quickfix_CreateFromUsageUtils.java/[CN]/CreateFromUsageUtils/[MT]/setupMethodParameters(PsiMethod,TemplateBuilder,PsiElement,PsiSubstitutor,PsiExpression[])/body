{
  PsiManager psiManager=method.getManager();
  PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
  PsiParameterList parameterList=method.getParameterList();
  GlobalSearchScope resolveScope=method.getResolveScope();
  GuessTypeParameters guesser=new GuessTypeParameters(factory);
  final boolean isInterface=method.getContainingClass().isInterface();
  for (int i=0; i < arguments.length; i++) {
    PsiExpression arg=arguments[i];
    SuggestedNameInfo suggestedInfo=JavaCodeStyleManager.getInstance(psiManager.getProject()).suggestVariableName(VariableKind.PARAMETER,null,arg,null);
    @NonNls String[] names=suggestedInfo.names;
    if (names.length == 0) {
      names=new String[]{"p" + i};
    }
    PsiType argType=arg.getType();
    if (argType == null || argType == PsiType.NULL) {
      argType=PsiType.getJavaLangObject(psiManager,resolveScope);
    }
    PsiParameter parameter=factory.createParameter(names[0],argType);
    if (isInterface) {
      PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,false);
    }
    parameter=(PsiParameter)parameterList.add(parameter);
    ExpectedTypeInfo info=ExpectedTypesProvider.createInfo(argType,ExpectedTypeInfo.TYPE_OR_SUPERTYPE,argType,TailType.NONE);
    PsiElement context=PsiTreeUtil.getParentOfType(contextElement,PsiClass.class,PsiMethod.class);
    guesser.setupTypeElement(parameter.getTypeElement(),new ExpectedTypeInfo[]{info},substitutor,builder,context,method.getContainingClass());
    Expression expression=new ParameterNameExpression(names);
    builder.replaceElement(parameter.getNameIdentifier(),expression);
  }
}
