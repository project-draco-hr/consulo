{
  final PsiElementFactory factory=manager.getElementFactory();
  return ApplicationManager.getApplication().runWriteAction(new Computable<PsiClass>(){
    public PsiClass compute(){
      try {
        PsiClass targetClass;
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          try {
            if (classKind == INTERFACE) {
              targetClass=directory.createInterface(name);
            }
 else             if (classKind == CLASS) {
              targetClass=directory.createClass(name);
            }
 else             if (classKind == ENUM) {
              targetClass=directory.createEnum(name);
            }
 else {
              LOG.error("Unknown kind of a class to create");
              return null;
            }
          }
 catch (          final IncorrectOperationException e) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                Messages.showErrorDialog(QuickFixBundle.message("cannot.create.java.file.error.text",name,directory.getVirtualFile().getName(),e.getLocalizedMessage()),QuickFixBundle.message("cannot.create.java.file.error.title"));
              }
            }
);
            return null;
          }
          if (!manager.getResolveHelper().isAccessible(targetClass,contextElement,null)) {
            targetClass.getModifierList().setModifierProperty(PsiKeyword.PUBLIC,true);
          }
        }
 else {
          PsiClass aClass;
          if (classKind == INTERFACE) {
            aClass=factory.createInterface(name);
          }
 else           if (classKind == CLASS) {
            aClass=factory.createClass(name);
          }
 else           if (classKind == ENUM) {
            aClass=factory.createEnum(name);
          }
 else {
            LOG.error("Unknown kind of a class to create");
            return null;
          }
          targetClass=(PsiClass)sourceFile.add(aClass);
        }
        if (superClassName != null) {
          PsiJavaCodeReferenceElement superClass=factory.createReferenceElementByFQClassName(superClassName,targetClass.getResolveScope());
          targetClass.getExtendsList().add(superClass);
        }
        return targetClass;
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return null;
      }
    }
  }
);
}
