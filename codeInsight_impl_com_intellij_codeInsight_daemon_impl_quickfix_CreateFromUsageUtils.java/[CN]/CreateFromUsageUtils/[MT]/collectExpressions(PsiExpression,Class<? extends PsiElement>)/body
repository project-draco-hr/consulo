{
  PsiElement parent=PsiTreeUtil.getParentOfType(expression,scopes);
  final List<PsiReferenceExpression> result=new ArrayList<PsiReferenceExpression>();
  JavaRecursiveElementVisitor visitor=new JavaRecursiveElementVisitor(){
    public List getResult(){
      return result;
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expr){
      if (expression instanceof PsiReferenceExpression) {
        if (expr.textMatches(expression)) {
          result.add(expr);
        }
      }
      visitElement(expr);
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expr){
      if (expression instanceof PsiMethodCallExpression) {
        PsiReferenceExpression methodExpression=expr.getMethodExpression();
        if (methodExpression.textMatches(((PsiMethodCallExpression)expression).getMethodExpression())) {
          result.add(expr.getMethodExpression());
        }
      }
      visitElement(expr);
    }
  }
;
  parent.accept(visitor);
  return result.toArray(new PsiReferenceExpression[result.size()]);
}
