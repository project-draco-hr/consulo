{
  final String name=referenceElement.getReferenceName();
  if (referenceElement.getQualifier() instanceof PsiJavaCodeReferenceElement) {
    PsiJavaCodeReferenceElement qualifier=(PsiJavaCodeReferenceElement)referenceElement.getQualifier();
    final PsiElement psiElement=qualifier.resolve();
    if (psiElement instanceof PsiClass) {
      return ApplicationManager.getApplication().runWriteAction(new Computable<PsiClass>(){
        public PsiClass compute(){
          try {
            PsiClass psiClass=(PsiClass)psiElement;
            if (!CodeInsightUtil.preparePsiElementForWrite(psiClass))             return null;
            PsiManager manager=psiClass.getManager();
            PsiElementFactory elementFactory=manager.getElementFactory();
            PsiClass result=classKind == INTERFACE ? elementFactory.createInterface(name) : classKind == CLASS ? elementFactory.createClass(name) : elementFactory.createEnum(name);
            result=(PsiClass)manager.getCodeStyleManager().reformat(result);
            return (PsiClass)psiClass.add(result);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
            return null;
          }
        }
      }
);
    }
  }
  final PsiFile sourceFile=referenceElement.getContainingFile();
  PsiDirectory sourceDir=sourceFile.getContainingDirectory();
  final PsiManager manager=referenceElement.getManager();
  PsiDirectory targetDirectory=null;
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    Project project=manager.getProject();
    String subject=classKind.getDescription();
    String title=QuickFixBundle.message("create.class.title",StringUtil.capitalize(subject));
    PsiPackage aPackage=sourceDir.getPackage();
    CreateClassDialog dialog=new CreateClassDialog(project,title,name,aPackage != null ? aPackage.getQualifiedName() : "",subject,false);
    dialog.show();
    if (dialog.getExitCode() != CreateClassDialog.OK_EXIT_CODE)     return null;
    targetDirectory=dialog.getTargetDirectory();
    if (targetDirectory == null)     return null;
  }
  return createClass(classKind,targetDirectory,name,manager,referenceElement,sourceFile,superClassName);
}
