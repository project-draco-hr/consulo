{
  PsiType returnType=method.getReturnType();
  if (returnType == null) {
    returnType=PsiType.VOID;
  }
  PsiElementFactory factory=method.getManager().getElementFactory();
  LOG.assertTrue(!aClass.isInterface(),"Interface bodies should be already set up");
  FileType fileType=FileTypeManager.getInstance().getFileTypeByExtension(template.getExtension());
  Properties properties=new Properties();
  properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE,returnType.getPresentableText());
  properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE,PsiTypesUtil.getDefaultValueOfType(returnType));
  FileTemplateUtil.setClassAndMethodNameProperties(properties,aClass,method);
  @NonNls String methodText;
  CodeStyleManager csManager=CodeStyleManager.getInstance(method.getProject());
  try {
    String bodyText=template.getText(properties);
    if (!"".equals(bodyText))     bodyText+="\n";
    methodText=returnType.getPresentableText() + " foo () {\n" + bodyText+ "}";
    methodText=FileTemplateUtil.indent(methodText,method.getProject(),fileType);
  }
 catch (  Exception e) {
    throw new IncorrectOperationException("Failed to parse file template",e);
  }
  if (methodText != null) {
    PsiMethod m;
    try {
      m=factory.createMethodFromText(methodText,aClass);
    }
 catch (    IncorrectOperationException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog(QuickFixBundle.message("new.method.body.template.error.text"),QuickFixBundle.message("new.method.body.template.error.title"));
        }
      }
);
      return;
    }
    PsiCodeBlock oldBody=method.getBody();
    PsiCodeBlock newBody=m.getBody();
    LOG.assertTrue(newBody != null);
    if (oldBody != null) {
      oldBody.replace(newBody);
    }
 else {
      method.addBefore(newBody,null);
    }
    csManager.reformat(method);
  }
}
