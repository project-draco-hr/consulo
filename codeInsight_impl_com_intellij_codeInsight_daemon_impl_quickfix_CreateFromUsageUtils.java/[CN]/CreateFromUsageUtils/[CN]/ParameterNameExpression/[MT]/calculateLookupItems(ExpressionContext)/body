{
  Project project=context.getProject();
  int offset=context.getStartOffset();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument());
  PsiElement elementAt=file.findElementAt(offset);
  PsiParameterList parameterList=PsiTreeUtil.getParentOfType(elementAt,PsiParameterList.class);
  if (parameterList == null)   return new LookupItem[0];
  PsiParameter parameter=PsiTreeUtil.getParentOfType(elementAt,PsiParameter.class);
  Set<String> parameterNames=new HashSet<String>();
  PsiParameter[] parameters=parameterList.getParameters();
  for (  PsiParameter psiParameter : parameters) {
    if (psiParameter == parameter)     continue;
    parameterNames.add(psiParameter.getName());
  }
  HashSet<String> names=new HashSet<String>();
  Set<LookupItem> set=new LinkedHashSet<LookupItem>();
  for (  String name : myNames) {
    if (parameterNames.contains(name)) {
      int j=1;
      while (parameterNames.contains(name + j))       j++;
      name+=j;
    }
    names.add(name);
    LookupItemUtil.addLookupItem(set,name,"");
  }
  String[] suggestedNames=ExpressionUtil.getNames(context);
  if (suggestedNames != null) {
    for (    String name : suggestedNames) {
      if (parameterNames.contains(name)) {
        int j=1;
        while (parameterNames.contains(name + j))         j++;
        name+=j;
      }
      if (!names.contains(name)) {
        LookupItemUtil.addLookupItem(set,name,"");
      }
    }
  }
  return set.toArray(new LookupItem[set.size()]);
}
