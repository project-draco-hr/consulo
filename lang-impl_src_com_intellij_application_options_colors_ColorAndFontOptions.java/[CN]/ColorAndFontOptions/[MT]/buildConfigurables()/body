{
  myDisposeCompleted=false;
  initAll();
  mySubPanels=createSubPanels();
  for (  NewColorAndFontPanel partialConfigurable : mySubPanels) {
    partialConfigurable.addSchemesListener(new ColorAndFontSettingsListener.Abstract(){
      public void schemeChanged(      final Object source){
        if (!myIsReset) {
          resetSchemesCombo(source);
        }
      }
    }
);
    partialConfigurable.addDescriptionListener(new ColorAndFontSettingsListener.Abstract(){
      @Override public void fontChanged(){
        for (        NewColorAndFontPanel panel : mySubPanels) {
          panel.updatePreview();
        }
      }
    }
);
  }
  List<Configurable> result=new ArrayList<Configurable>();
  for (  final NewColorAndFontPanel subPanel : mySubPanels) {
    result.add(new Configurable(){
      @Nls public String getDisplayName(){
        return subPanel.getDisplayName();
      }
      public Icon getIcon(){
        return null;
      }
      public String getHelpTopic(){
        return null;
      }
      public JComponent createComponent(){
        return subPanel.getPanel();
      }
      public boolean isModified(){
        for (        MyColorScheme scheme : mySchemes.values()) {
          if (subPanel.containsFontOptions()) {
            if (scheme.isFontModified()) {
              return true;
            }
          }
 else {
            for (            EditorSchemeAttributeDescriptor descriptor : scheme.getDescriptors()) {
              if (subPanel.contains(descriptor) && descriptor.isModified()) {
                return true;
              }
            }
          }
        }
        return false;
      }
      public void apply() throws ConfigurationException {
        ColorAndFontOptions.this.apply();
      }
      public void reset(){
        ColorAndFontOptions.this.reset();
      }
      public void disposeUIResources(){
        ColorAndFontOptions.this.disposeUIResources();
      }
    }
);
  }
  return result.toArray(new Configurable[result.size()]);
}
