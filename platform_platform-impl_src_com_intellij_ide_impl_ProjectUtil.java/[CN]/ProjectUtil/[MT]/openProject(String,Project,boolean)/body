{
  File file=new File(path);
  if (!file.exists()) {
    Messages.showMessageDialog(IdeBundle.message("error.project.file.does.not.exist",path),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
    return null;
  }
  if (file.isDirectory() && !new File(file,com.intellij.openapi.project.ProjectUtil.DIRECTORY_BASED_PROJECT_DIR).exists()) {
    Messages.showMessageDialog(IdeBundle.message("error.project.file.does.not.exist",new File(file,com.intellij.openapi.project.ProjectUtil.DIRECTORY_BASED_PROJECT_DIR).getPath()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
    return null;
  }
  Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  for (  Project project : openProjects) {
    if (isSameProject(path,project)) {
      focusProjectWindow(project,false);
      return project;
    }
  }
  if (!forceOpenInNewFrame && openProjects.length > 0) {
    int exitCode=confirmOpenNewProject();
    if (exitCode == 1) {
      if (!closeAndDispose(projectToClose != null ? projectToClose : openProjects[openProjects.length - 1]))       return null;
    }
 else     if (exitCode != 0) {
      return null;
    }
  }
  ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  Project project=null;
  try {
    project=projectManager.loadAndOpenProject(path);
  }
 catch (  IOException e) {
    Messages.showMessageDialog(IdeBundle.message("error.cannot.load.project",e.getMessage()),IdeBundle.message("title.cannot.load.project"),Messages.getErrorIcon());
  }
catch (  JDOMException e) {
    LOG.info(e);
    Messages.showMessageDialog(IdeBundle.message("error.project.file.is.corrupted"),IdeBundle.message("title.cannot.load.project"),Messages.getErrorIcon());
  }
catch (  InvalidDataException e) {
    LOG.info(e);
    Messages.showMessageDialog(IdeBundle.message("error.project.file.is.corrupted"),IdeBundle.message("title.cannot.load.project"),Messages.getErrorIcon());
  }
  return project;
}
