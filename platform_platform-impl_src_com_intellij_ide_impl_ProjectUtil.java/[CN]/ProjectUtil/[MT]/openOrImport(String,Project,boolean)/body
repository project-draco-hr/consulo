{
  final VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(path);
  if (virtualFile == null)   return null;
  ProjectOpenProcessor strong=ProjectOpenProcessor.getStrongImportProvider(virtualFile);
  if (strong != null) {
    return strong.doOpenProject(virtualFile,projectToClose,forceOpenInNewFrame);
  }
  if (path.endsWith(ProjectFileType.DOT_DEFAULT_EXTENSION) || virtualFile.isDirectory() && virtualFile.findChild(com.intellij.openapi.project.ProjectUtil.DIRECTORY_BASED_PROJECT_DIR) != null) {
    return openProject(path,projectToClose,forceOpenInNewFrame);
  }
  if (virtualFile.isDirectory()) {
    for (    VirtualFile child : virtualFile.getChildren()) {
      final String childPath=child.getPath();
      if (childPath.endsWith(ProjectFileType.DOT_DEFAULT_EXTENSION)) {
        return openProject(childPath,projectToClose,forceOpenInNewFrame);
      }
    }
  }
  ProjectOpenProcessor provider=ProjectOpenProcessor.getImportProvider(virtualFile);
  if (provider != null) {
    final Project project=provider.doOpenProject(virtualFile,projectToClose,forceOpenInNewFrame);
    if (project != null) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (!project.isDisposed()) {
            final ToolWindow toolWindow=ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.PROJECT_VIEW);
            if (toolWindow != null) {
              toolWindow.activate(null);
            }
          }
        }
      }
,ModalityState.NON_MODAL);
    }
    return project;
  }
  return null;
}
