{
  final boolean childOnNewLine=child.getWhiteSpace().containsLineFeeds();
  IndentData childIndent=childOnNewLine ? getIndent(options,child,tokenBlockStartOffset) : new IndentData(0);
  if (childOnNewLine && child.getIndent().isAbsolute()) {
    myFlags&=~CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT;
    AbstractBlockWrapper current=this;
    while (current != null && current.getStartOffset() == getStartOffset()) {
      current.myFlags&=~CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT;
      current=current.myParent;
    }
    return childIndent;
  }
  if (child.getStartOffset() == getStartOffset()) {
    final boolean newValue=(myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0 && (child.myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0 && childIndent.isEmpty();
    setCanUseFirstChildIndentAsBlockIndent(newValue);
  }
  if (getStartOffset() == tokenBlockStartOffset) {
    if (myParent == null) {
      return childIndent;
    }
 else {
      return childIndent.add(myParent.getChildOffset(this,options,tokenBlockStartOffset));
    }
  }
 else   if (!getWhiteSpace().containsLineFeeds()) {
    return childIndent.add(myParent.getChildOffset(this,options,tokenBlockStartOffset));
  }
 else {
    if (myParent == null)     return childIndent.add(getWhiteSpace());
    if (getIndent().isAbsolute()) {
      if (myParent.myParent != null) {
        return childIndent.add(myParent.myParent.getChildOffset(myParent,options,tokenBlockStartOffset));
      }
 else {
        return childIndent.add(getWhiteSpace());
      }
    }
    if ((myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0) {
      return childIndent.add(getWhiteSpace());
    }
 else {
      return childIndent.add(myParent.getChildOffset(this,options,tokenBlockStartOffset));
    }
  }
}
