{
  if (LOG.isDebugEnabled()) {
    final SourcePosition sourcePosition=getSourcePosition(context);
    LOG.assertTrue(Comparing.equal(sourcePosition,position));
  }
  final PsiElement element=getContextElement(position);
  if (element == null)   return null;
  final StackFrameProxyImpl frameProxy=(StackFrameProxyImpl)context.getFrameProxy();
  if (frameProxy == null)   return element;
  try {
    List<LocalVariableProxyImpl> list=frameProxy.visibleVariables();
    StringBuffer buf=new StringBuffer();
    PsiResolveHelper resolveHelper=element.getManager().getResolveHelper();
    buf.append('{');
    for (Iterator<LocalVariableProxyImpl> iterator=list.iterator(); iterator.hasNext(); ) {
      LocalVariableProxyImpl localVariable=iterator.next();
      String varName=localVariable.name();
      if (resolveHelper.resolveReferencedVariable(varName,element) == null) {
        buf.append(localVariable.getVariable().typeName() + " " + varName+ ";");
      }
    }
    buf.append('}');
    if (buf.length() > 2) {
      PsiElementFactory elementFactory=element.getManager().getElementFactory();
      PsiCodeBlock codeBlockFromText=elementFactory.createCodeBlockFromText(buf.toString(),element);
      PsiStatement[] statements=codeBlockFromText.getStatements();
      for (int i=0; i < statements.length; i++) {
        PsiStatement statement=statements[i];
        if (statement instanceof PsiDeclarationStatement) {
          PsiDeclarationStatement declStatement=(PsiDeclarationStatement)statement;
          PsiElement[] declaredElements=declStatement.getDeclaredElements();
          for (int j=0; j < declaredElements.length; j++) {
            declaredElements[j].putUserData(IS_JSP_IMPLICIT,IS_JSP_IMPLICIT);
          }
        }
      }
      return codeBlockFromText;
    }
 else {
      return element;
    }
  }
 catch (  IncorrectOperationException e) {
    return element;
  }
catch (  EvaluateException e) {
    return element;
  }
}
