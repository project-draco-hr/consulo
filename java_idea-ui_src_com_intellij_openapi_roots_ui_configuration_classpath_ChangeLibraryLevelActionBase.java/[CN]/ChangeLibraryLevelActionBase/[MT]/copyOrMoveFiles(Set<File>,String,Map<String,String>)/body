{
  final Ref<Boolean> finished=Ref.create(false);
  new Task.Modal(myProject,(myCopy ? "Copying" : "Moving") + " Library Files",true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final File targetDir=new File(FileUtil.toSystemDependentName(targetDirPath));
      for (      final File from : filesToProcess) {
        indicator.checkCanceled();
        final File to=FileUtil.findSequentNonexistentFile(targetDir,FileUtil.getNameWithoutExtension(from),FileUtilRt.getExtension(from.getName()));
        try {
          if (from.isDirectory()) {
            if (myCopy) {
              FileUtil.copyDir(from,to);
            }
 else {
              FileUtil.moveDirWithContent(from,to);
            }
          }
 else {
            if (myCopy) {
              FileUtil.copy(from,to);
            }
 else {
              FileUtil.rename(from,to);
            }
          }
        }
 catch (        IOException e) {
          final String actionName=getActionName();
          final String message="Cannot " + actionName.toLowerCase() + " file "+ from.getAbsolutePath()+ ": "+ e.getMessage();
          Messages.showErrorDialog(ChangeLibraryLevelActionBase.this.myProject,message,"Cannot " + actionName);
          LOG.info(e);
          return;
        }
        new WriteAction(){
          @Override protected void run(          Result result) throws Throwable {
            final VirtualFile virtualTo=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(to);
            if (virtualTo != null) {
              copiedFiles.put(FileUtil.toSystemIndependentName(from.getAbsolutePath()),virtualTo.getPath());
            }
            if (!myCopy) {
              final VirtualFile parent=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(from.getParentFile());
              if (parent != null) {
                parent.refresh(false,false);
              }
            }
          }
        }
.execute();
      }
      finished.set(true);
    }
  }
.queue();
  if (!finished.get()) {
    return false;
  }
  return true;
}
