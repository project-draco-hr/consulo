{
  final VirtualFile baseDir=getBaseDir();
  final String libPath=baseDir != null ? baseDir.getPath() + "/lib" : "";
  boolean allowEmptyName=isConvertingToModuleLibrary() && library.getFiles(OrderRootType.CLASSES).length == 1;
  final String libraryName=allowEmptyName ? "" : StringUtil.notNullize(library.getName(),"Unnamed");
  final LibraryTableModifiableModelProvider provider=getModifiableTableModelProvider();
  final ChangeLibraryLevelDialog dialog=new ChangeLibraryLevelDialog(getParentComponent(),myProject,myCopy,libraryName,libPath,allowEmptyName,provider);
  dialog.show();
  if (!dialog.isOK()) {
    return null;
  }
  final Set<File> fileToCopy=new LinkedHashSet<File>();
  final Map<String,String> copiedFiles=new HashMap<String,String>();
  final String targetDirectoryPath=dialog.getDirectoryForFilesPath();
  if (targetDirectoryPath != null) {
    for (    OrderRootType type : OrderRootType.getAllTypes()) {
      for (      VirtualFile root : library.getFiles(type)) {
        fileToCopy.add(VfsUtil.virtualToIoFile(PathUtil.getLocalFile(root)));
      }
    }
    if (!copyOrMoveFiles(fileToCopy,targetDirectoryPath,copiedFiles)) {
      return null;
    }
  }
  final Library copied=((LibraryTableBase.ModifiableModelEx)provider.getModifiableModel()).createLibrary(dialog.getLibraryName(),library.getType());
  final LibraryEx.ModifiableModelEx model=(LibraryEx.ModifiableModelEx)copied.getModifiableModel();
  LibraryEditingUtil.copyLibrary(library,copiedFiles,model);
  AccessToken token=WriteAction.start();
  try {
    model.commit();
  }
  finally {
    token.finish();
  }
  return copied;
}
