{
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.INDEX_OF.equals(methodName)) {
    return false;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return false;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return false;
  }
  final PsiType qualifierType=qualifier.getType();
  if (qualifierType == null) {
    return false;
  }
  final Project project=expression.getProject();
  final PsiManager manager=expression.getManager();
  final GlobalSearchScope projectScope=GlobalSearchScope.allScope(project);
  final PsiClass javaUtilListClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.util.List",projectScope);
  if (javaUtilListClass == null) {
    return false;
  }
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final PsiClassType javaUtilListType=factory.createType(javaUtilListClass);
  return javaUtilListType.isAssignableFrom(qualifierType);
}
