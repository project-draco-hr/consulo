{
  final GrCodeReferenceElement referenceElement=getReferenceElement();
  if (referenceElement == null)   return GroovyResolveResult.EMPTY_ARRAY;
  final GroovyResolveResult[] classResults=referenceElement.multiResolve(false);
  List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
  final PsiResolveHelper helper=JavaPsiFacade.getInstance(getProject()).getResolveHelper();
  for (  GroovyResolveResult classResult : classResults) {
    final PsiElement element=classResult.getElement();
    if (element instanceof PsiClass) {
      final PsiMethod[] constructors=((PsiClass)element).getConstructors();
      for (      PsiMethod constructor : constructors) {
        boolean isAccessible=helper.isAccessible(constructor,this,null);
        result.add(new GroovyResolveResultImpl(constructor,null,classResult.getSubstitutor(),isAccessible,true));
      }
      final GroovyResolveResult[] results=ResolveUtil.getNonCodeConstructors((PsiClass)element,this,classResult.getSubstitutor());
      result.addAll(Arrays.asList(results));
    }
  }
  return result.toArray(new GroovyResolveResult[result.size()]);
}
