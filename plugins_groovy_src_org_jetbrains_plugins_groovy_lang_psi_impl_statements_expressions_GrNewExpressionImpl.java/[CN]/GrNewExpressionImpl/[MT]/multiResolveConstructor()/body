{
  GrCodeReferenceElement ref=getReferenceElement();
  if (ref == null)   return GroovyResolveResult.EMPTY_ARRAY;
  final GroovyResolveResult[] classResults=ref.multiResolve(false);
  if (classResults.length == 0)   return GroovyResolveResult.EMPTY_ARRAY;
  if (getNamedArguments().length > 0 && getArgumentList().getExpressionArguments().length == 0) {
    GroovyResolveResult[] constructorResults=getCandidates(ref,classResults,myMapArguments);
    for (    GroovyResolveResult result : constructorResults) {
      if (result.getElement() instanceof PsiMethod) {
        PsiMethod constructor=(PsiMethod)result.getElement();
        final PsiParameter[] parameters=constructor.getParameterList().getParameters();
        if (parameters.length == 1 && InheritanceUtil.isInheritor(parameters[0].getType(),CommonClassNames.JAVA_UTIL_MAP)) {
          return constructorResults;
        }
      }
    }
    final GroovyResolveResult[] emptyConstructors=getCandidates(ref,classResults,PsiType.EMPTY_ARRAY);
    if (emptyConstructors.length > 0) {
      return emptyConstructors;
    }
  }
  return getCandidates(ref,classResults,PsiUtil.getArgumentTypes(ref,false,false));
}
