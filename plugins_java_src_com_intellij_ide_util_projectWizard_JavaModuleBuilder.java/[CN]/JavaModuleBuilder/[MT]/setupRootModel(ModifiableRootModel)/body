{
  final CompilerModuleExtension compilerModuleExtension=rootModel.getModuleExtensionOld(CompilerModuleExtension.class);
  compilerModuleExtension.setExcludeOutput(true);
  ContentEntry contentEntry=doAddContentEntry(rootModel);
  if (contentEntry != null) {
    final List<Pair<String,String>> sourcePaths=getSourcePaths();
    if (sourcePaths != null) {
      for (      final Pair<String,String> sourcePath : sourcePaths) {
        String first=sourcePath.first;
        new File(first).mkdirs();
        final VirtualFile sourceRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(FileUtil.toSystemIndependentName(first));
        if (sourceRoot != null) {
          contentEntry.addFolder(sourceRoot,ContentFolderType.SOURCE);
        }
      }
    }
  }
  if (myCompilerOutputPath != null) {
    String canonicalPath;
    try {
      canonicalPath=FileUtil.resolveShortWindowsName(myCompilerOutputPath);
    }
 catch (    IOException e) {
      canonicalPath=myCompilerOutputPath;
    }
    compilerModuleExtension.setCompilerOutputPath(VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(canonicalPath)));
  }
 else {
    compilerModuleExtension.inheritCompilerOutputPath(true);
  }
  LibraryTable libraryTable=rootModel.getModuleLibraryTable();
  for (  Pair<String,String> libInfo : myModuleLibraries) {
    final String moduleLibraryPath=libInfo.first;
    final String sourceLibraryPath=libInfo.second;
    Library library=libraryTable.createLibrary();
    Library.ModifiableModel modifiableModel=library.getModifiableModel();
    modifiableModel.addRoot(getUrlByPath(moduleLibraryPath),OrderRootType.CLASSES);
    if (sourceLibraryPath != null) {
      modifiableModel.addRoot(getUrlByPath(sourceLibraryPath),OrderRootType.SOURCES);
    }
    modifiableModel.commit();
  }
}
