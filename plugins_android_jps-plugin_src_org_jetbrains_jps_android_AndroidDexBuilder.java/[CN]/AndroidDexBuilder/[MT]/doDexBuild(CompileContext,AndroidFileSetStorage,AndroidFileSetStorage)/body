{
  boolean success=true;
  for (  Module module : context.getProject().getModules().values()) {
    final AndroidFacet facet=AndroidJpsUtil.getFacet(module);
    if (facet == null || facet.getLibrary()) {
      continue;
    }
    final AndroidPlatform platform=AndroidJpsUtil.getAndroidPlatform(module,context,BUILDER_NAME);
    if (platform == null) {
      success=false;
      continue;
    }
    final ProjectPaths projectPaths=context.getProjectPaths();
    final File dexOutputDir=AndroidJpsUtil.getDirectoryForIntermediateArtifacts(context,module,true,BUILDER_NAME);
    if (dexOutputDir == null) {
      success=false;
      continue;
    }
    final File classesDir=projectPaths.getModuleOutputDir(module,false);
    if (classesDir == null || !classesDir.isDirectory()) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.INFO,AndroidJpsBundle.message("android.jps.warnings.dex.no.compiled.files",module.getName())));
      continue;
    }
    final Set<String> externalLibraries=AndroidJpsUtil.getExternalLibraries(projectPaths,module,platform);
    boolean includeSystemProguardCfg=false;
    String proguardCfgPath=context.getBuilderParameter(AndroidCommonUtils.PROGUARD_CFG_PATH_OPTION);
    if (proguardCfgPath != null) {
      final String includeSystemProguardCfgOption=context.getBuilderParameter(AndroidCommonUtils.INCLUDE_SYSTEM_PROGUARD_FILE_OPTION);
      includeSystemProguardCfg=Boolean.parseBoolean(includeSystemProguardCfgOption);
    }
 else     if (facet.isRunProguard()) {
      final File proguardCfgFile=facet.getProguardConfigFile();
      if (proguardCfgFile == null) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,AndroidJpsBundle.message("android.jps.errors.cannot.find.proguard.cfg",module.getName())));
        success=false;
        continue;
      }
      proguardCfgPath=proguardCfgFile != null ? proguardCfgFile.getPath() : null;
      includeSystemProguardCfg=facet.isIncludeSystemProguardCfgFile();
    }
    final Set<String> fileSet;
    final Set<String> jars;
    final Set<String> outputDirs;
    try {
      if (proguardCfgPath != null) {
        final String outputJarPath=FileUtil.toSystemDependentName(dexOutputDir.getPath() + '/' + AndroidCommonUtils.PROGUARD_OUTPUT_JAR_NAME);
        if (!runProguardIfNecessary(facet,classesDir,platform,externalLibraries,context,outputJarPath,proguardCfgPath,includeSystemProguardCfg,proguardStateStorage)) {
          success=false;
          continue;
        }
        fileSet=jars=Collections.singleton(outputJarPath);
        outputDirs=Collections.emptySet();
      }
 else {
        fileSet=new HashSet<String>();
        jars=new HashSet<String>();
        outputDirs=new HashSet<String>();
        AndroidJpsUtil.addSubdirectories(classesDir,fileSet);
        outputDirs.add(classesDir.getPath());
        fileSet.addAll(externalLibraries);
        jars.addAll(externalLibraries);
        AndroidJpsUtil.processClasspath(projectPaths,module,new AndroidDependencyProcessor(){
          @Override public void processExternalLibrary(          @NotNull File file){
            fileSet.add(file.getPath());
            jars.add(file.getPath());
          }
          @Override public void processAndroidLibraryPackage(          @NotNull File file){
            fileSet.add(file.getPath());
            jars.add(file.getPath());
          }
          @Override public void processJavaModuleOutputDirectory(          @NotNull File dir){
            fileSet.add(dir.getPath());
            outputDirs.add(dir.getPath());
          }
          @Override public boolean isToProcess(          @NotNull AndroidDependencyType type){
            return type == AndroidDependencyType.JAVA_MODULE_OUTPUT_DIR || type == AndroidDependencyType.ANDROID_LIBRARY_PACKAGE || type == AndroidDependencyType.EXTERNAL_LIBRARY;
          }
        }
);
        if (facet.isPackTestCode()) {
          final File testsClassDir=projectPaths.getModuleOutputDir(module,true);
          if (testsClassDir != null && testsClassDir.isDirectory()) {
            AndroidJpsUtil.addSubdirectories(testsClassDir,fileSet);
            outputDirs.add(testsClassDir.getPath());
          }
        }
      }
      final AndroidFileSetState newState=new AndroidFileSetState(jars,AndroidJpsUtil.CLASSES_AND_JARS_FILTER,true);
      if (context.isMake()) {
        final AndroidFileSetState oldState=dexStateStorage.getState(module.getName());
        if (oldState != null && oldState.equalsTo(newState)) {
          final Set<String> dirtyOutputDirs=context.getUserData(DIRTY_OUTPUT_DIRS);
          boolean outputDirsDirty=false;
          for (          String outputDir : outputDirs) {
            if (dirtyOutputDirs.contains(outputDir)) {
              outputDirsDirty=true;
              break;
            }
          }
          if (!outputDirsDirty) {
            continue;
          }
        }
      }
      if (fileSet.size() == 0) {
        continue;
      }
      final String[] files=new String[fileSet.size()];
      int i=0;
      for (      String filePath : fileSet) {
        files[i++]=FileUtil.toSystemDependentName(filePath);
      }
      context.processMessage(new ProgressMessage(AndroidJpsBundle.message("android.jps.progress.dex",module.getName())));
      if (!runDex(platform,dexOutputDir.getPath(),files,context,module.getName())) {
        success=false;
        dexStateStorage.update(module.getName(),null);
      }
 else {
        dexStateStorage.update(module.getName(),newState);
      }
    }
 catch (    IOException e) {
      AndroidJpsUtil.reportExceptionError(context,null,e,BUILDER_NAME);
      return false;
    }
  }
  return success;
}
