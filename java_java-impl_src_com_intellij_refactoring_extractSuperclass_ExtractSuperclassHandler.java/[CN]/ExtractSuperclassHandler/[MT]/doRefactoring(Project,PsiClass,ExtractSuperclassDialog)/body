{
  final String superclassName=dialog.getExtractedSuperName();
  final PsiDirectory targetDirectory=dialog.getTargetDirectory();
  final MemberInfo[] selectedMemberInfos=ArrayUtil.toObjectArray(dialog.getSelectedMemberInfos(),MemberInfo.class);
  final DocCommentPolicy javaDocPolicy=new DocCommentPolicy(dialog.getDocCommentPolicy());
  LocalHistoryAction a=LocalHistory.getInstance().startAction(getCommandName(subclass,superclassName));
  try {
    final PsiClass superclass;
    try {
      superclass=ExtractSuperClassUtil.extractSuperClass(project,targetDirectory,superclassName,subclass,selectedMemberInfos,javaDocPolicy);
    }
  finally {
      a.finish();
    }
    if (superclass != null) {
      final Runnable turnRefsToSuperRunnable=new Runnable(){
        public void run(){
          ExtractClassUtil.askAndTurnRefsToSuper(project,subclass,superclass);
        }
      }
;
      SwingUtilities.invokeLater(turnRefsToSuperRunnable);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
