{
  if (firstLiteral == null)   return;
  final PsiElement topBlock=PsiUtil.getTopLevelEnclosingCodeBlock(firstLiteral,null);
  final LocalSearchScope searchScope=new LocalSearchScope(new PsiElement[]{topBlock instanceof PsiCodeBlock ? topBlock : firstLiteral.getContainingFile()},"",true);
  final THashSet<PsiModifierListOwner> visitedVars=new THashSet<PsiModifierListOwner>();
  final LinkedList<PsiExpression> places=new LinkedList<PsiExpression>();
  places.add(firstLiteral);
  boolean unparsable=false;
  while (!places.isEmpty()) {
    final PsiExpression curPlace=places.removeFirst();
    final PsiModifierListOwner owner=AnnotationUtilEx.getAnnotatedElementFor(curPlace,AnnotationUtilEx.LookupType.PREFER_CONTEXT);
    if (owner == null)     continue;
    if (processAnnotationInjections(firstLiteral,owner,processor))     return;
    final PsiMethod psiMethod;
    final Trinity<String,Integer,Integer> trin;
    if (owner instanceof PsiParameter) {
      psiMethod=PsiTreeUtil.getParentOfType(owner,PsiMethod.class,false);
      final PsiParameterList parameterList=psiMethod == null ? null : psiMethod.getParameterList();
      if (parameterList == null || parameterList != owner.getParent())       continue;
      trin=Trinity.create(psiMethod.getName(),parameterList.getParametersCount(),parameterList.getParameterIndex((PsiParameter)owner));
    }
 else     if (owner instanceof PsiMethod) {
      psiMethod=(PsiMethod)owner;
      trin=Trinity.create(psiMethod.getName(),psiMethod.getParameterList().getParametersCount(),-1);
    }
 else     if (myInjectionConfiguration.isResolveReferences() && owner instanceof PsiVariable && visitedVars.add(owner)) {
      final PsiVariable variable=(PsiVariable)owner;
      for (      PsiReference psiReference : ReferencesSearch.search(variable,searchScope).findAll()) {
        final PsiElement element=psiReference.getElement();
        if (element instanceof PsiExpression) {
          final PsiExpression refExpression=(PsiExpression)element;
          places.add(refExpression);
          if (!unparsable) {
            unparsable=checkUnparsableReference(refExpression);
          }
        }
      }
      continue;
    }
 else {
      continue;
    }
    final Collection<MethodParameterInjection> injections=getMethodCache().get(trin);
    if (injections == null)     return;
    for (    MethodParameterInjection injection : injections) {
      if (injection.isApplicable(psiMethod)) {
        processInjectionWithContext(firstLiteral,unparsable,injection,processor);
        if (injection.isTerminal()) {
          return;
        }
      }
    }
  }
}
