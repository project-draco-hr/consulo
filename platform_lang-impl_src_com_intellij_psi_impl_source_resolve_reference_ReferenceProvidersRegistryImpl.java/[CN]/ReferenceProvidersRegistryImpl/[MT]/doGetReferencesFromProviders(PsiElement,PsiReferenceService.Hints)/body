{
  List<Trinity<PsiReferenceProvider,ProcessingContext,Double>> providersForContextLanguage;
  providersForContextLanguage=getRegistrar(context.getLanguage()).getPairsByElement(context,hints);
  List<Trinity<PsiReferenceProvider,ProcessingContext,Double>> providersForAllLanguages;
  providersForAllLanguages=getRegistrar(Language.ANY).getPairsByElement(context,hints);
  int providersCount=providersForContextLanguage.size() + providersForAllLanguages.size();
  if (providersCount == 0) {
    return PsiReference.EMPTY_ARRAY;
  }
  if (providersCount == 1) {
    final Trinity<PsiReferenceProvider,ProcessingContext,Double> firstProvider=(providersForAllLanguages.isEmpty() ? providersForContextLanguage : providersForAllLanguages).get(0);
    return firstProvider.getFirst().getReferencesByElement(context,firstProvider.getSecond());
  }
  Trinity<PsiReferenceProvider,ProcessingContext,Double>[] providers=new Trinity[providersCount];
  int i=0;
  for (  Trinity<PsiReferenceProvider,ProcessingContext,Double> provider : providersForContextLanguage) {
    providers[i++]=provider;
  }
  for (  Trinity<PsiReferenceProvider,ProcessingContext,Double> provider : providersForAllLanguages) {
    providers[i++]=provider;
  }
  Arrays.sort(providers,PRIORITY_COMPARATOR);
  List<PsiReference> result=new ArrayList<PsiReference>();
  final double maxPriority=providers[0].getThird();
  next:   for (  Trinity<PsiReferenceProvider,ProcessingContext,Double> trinity : providers) {
    final PsiReference[] refs;
    try {
      refs=trinity.getFirst().getReferencesByElement(context,trinity.getSecond());
    }
 catch (    IndexNotReadyException ex) {
      continue;
    }
    if (trinity.getThird().doubleValue() != maxPriority) {
      for (      PsiReference ref : refs) {
        for (        PsiReference reference : result) {
          if (ref != null && ReferenceRange.containsRangeInElement(reference,ref.getRangeInElement())) {
            continue next;
          }
        }
      }
    }
    for (    PsiReference ref : refs) {
      if (ref != null) {
        result.add(ref);
      }
    }
  }
  return result.isEmpty() ? PsiReference.EMPTY_ARRAY : ContainerUtil.toArray(result,new PsiReference[result.size()]);
}
