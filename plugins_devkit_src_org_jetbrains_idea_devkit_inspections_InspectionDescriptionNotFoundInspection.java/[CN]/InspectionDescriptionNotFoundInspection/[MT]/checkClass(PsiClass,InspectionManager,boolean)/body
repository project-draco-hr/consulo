{
  final Project project=aClass.getProject();
  final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
  final Module module=ModuleUtil.findModuleForPsiElement(aClass);
  if (nameIdentifier == null || module == null || !PsiUtil.isInstantiatable(aClass))   return null;
  final PsiClass base=JavaPsiFacade.getInstance(project).findClass(INSPECTION_PROFILE_ENTRY,GlobalSearchScope.allScope(project));
  if (base == null || !aClass.isInheritor(base,true) || isPathMethodsAreOverridden(aClass))   return null;
  PsiMethod method=findNearestMethod("getShortName",aClass);
  if (method != null && method.getContainingClass().getQualifiedName().equals(INSPECTION_PROFILE_ENTRY)) {
    method=null;
  }
  final String filename=method == null ? InspectionProfileEntry.getShortName(aClass.getName()) : PsiUtil.getReturnedLiteral(method,aClass);
  if (filename == null)   return null;
  for (  PsiDirectory description : getInspectionDescriptionsDirs(module)) {
    final PsiFile file=description.findFile(filename + ".html");
    if (file == null)     continue;
    final VirtualFile vf=file.getVirtualFile();
    if (vf == null)     continue;
    if (vf.getNameWithoutExtension().equals(filename)) {
      return null;
    }
  }
  final PsiElement problem=getProblemElement(aClass,method);
  final ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(problem == null ? nameIdentifier : problem,"Inspection does not have a description",isOnTheFly,new LocalQuickFix[]{new CreateHtmlDescriptionFix(filename,module,false)},ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  return new ProblemDescriptor[]{problemDescriptor};
}
