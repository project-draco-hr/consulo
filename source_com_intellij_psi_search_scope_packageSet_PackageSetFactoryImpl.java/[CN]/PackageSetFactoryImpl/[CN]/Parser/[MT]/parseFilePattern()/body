{
  StringBuffer pattern=new StringBuffer();
  boolean wasIdentifier=false;
  while (true) {
    if (myLexer.getTokenType() == TokenTypeEx.DIV) {
      wasIdentifier=false;
      pattern.append("/");
    }
 else     if (myLexer.getTokenType() == TokenTypeEx.IDENTIFIER) {
      if (wasIdentifier)       error(AnalysisScopeBundle.message("error.packageset.token.expectations",getTokenText()));
      wasIdentifier=true;
      pattern.append(getTokenText());
    }
 else     if (myLexer.getTokenType() == TokenTypeEx.ASTERISK) {
      wasIdentifier=false;
      pattern.append("*");
    }
 else     if (myLexer.getTokenType() == TokenTypeEx.DOT) {
      wasIdentifier=false;
      pattern.append(".");
    }
 else     if (myLexer.getTokenType() == TokenTypeEx.WHITE_SPACE) {
      wasIdentifier=false;
      pattern.append(" ");
    }
 else     if (myLexer.getTokenType() == TokenTypeEx.MINUS) {
      wasIdentifier=false;
      pattern.append("-");
    }
 else {
      break;
    }
    myLexer.advance();
  }
  if (pattern.length() == 0) {
    error(AnalysisScopeBundle.message("error.packageset.pattern.expectations"));
  }
  return pattern.toString();
}
