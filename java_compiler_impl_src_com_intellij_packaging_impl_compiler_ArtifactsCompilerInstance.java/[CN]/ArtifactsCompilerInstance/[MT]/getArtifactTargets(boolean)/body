{
  final List<ArtifactBuildTarget> targets=new ArrayList<ArtifactBuildTarget>();
  new ReadAction(){
    protected void run(    final Result result){
      final Set<Artifact> artifacts;
      if (selectedOnly) {
        artifacts=ArtifactCompileScope.getArtifactsToBuild(getProject(),myContext.getCompileScope());
      }
 else {
        artifacts=new HashSet<Artifact>(Arrays.asList(ArtifactManager.getInstance(getProject()).getArtifacts()));
      }
      List<Artifact> additionalArtifacts=new ArrayList<Artifact>();
      for (      BuildParticipantProvider provider : BuildParticipantProvider.EXTENSION_POINT_NAME.getExtensions()) {
        for (        Module module : ModuleManager.getInstance(getProject()).getModules()) {
          final Collection<? extends BuildParticipant> participants=provider.getParticipants(module);
          for (          BuildParticipant participant : participants) {
            ContainerUtil.addIfNotNull(participant.createArtifact(myContext),additionalArtifacts);
          }
        }
      }
      if (LOG.isDebugEnabled() && !additionalArtifacts.isEmpty()) {
        LOG.debug("additional artifacts to build: " + additionalArtifacts);
      }
      artifacts.addAll(additionalArtifacts);
      Map<String,Artifact> artifactsMap=new HashMap<String,Artifact>();
      for (      Artifact artifact : artifacts) {
        artifactsMap.put(artifact.getName(),artifact);
      }
      for (      String name : ArtifactSortingUtil.getInstance(getProject()).getArtifactsSortedByInclusion()) {
        Artifact artifact=artifactsMap.get(name);
        if (artifact != null) {
          targets.add(new ArtifactBuildTarget(artifact));
        }
      }
    }
  }
.execute();
  return targets;
}
