{
  myBuilderContext=new ArtifactsProcessingItemsBuilderContext(myContext);
  final Artifact artifact=target.getArtifact();
  final Map<String,String> selfIncludingArtifacts=new ReadAction<Map<String,String>>(){
    protected void run(    final Result<Map<String,String>> result){
      result.setResult(ArtifactValidationUtil.getInstance(getProject()).getArtifactToSelfIncludingNameMap());
    }
  }
.execute().getResultObject();
  final String selfIncludingName=selfIncludingArtifacts.get(artifact.getName());
  if (selfIncludingName != null) {
    String name=selfIncludingName.equals(artifact.getName()) ? "it" : "'" + selfIncludingName + "' artifact";
    myContext.addMessage(CompilerMessageCategory.ERROR,"Cannot build '" + artifact.getName() + "' artifact: "+ name+ " includes itself in the output layout",null,-1,-1);
    return Collections.emptyList();
  }
  final String outputPath=artifact.getOutputPath();
  if (outputPath == null || outputPath.length() == 0) {
    myContext.addMessage(CompilerMessageCategory.ERROR,"Cannot build '" + artifact.getName() + "' artifact: output path is not specified",null,-1,-1);
    return Collections.emptyList();
  }
  DumbService.getInstance(getProject()).waitForSmartMode();
  new ReadAction(){
    protected void run(    final Result result){
      collectItems(artifact,outputPath);
    }
  }
.execute();
  return new ArrayList<ArtifactCompilerCompileItem>(myBuilderContext.getProcessingItems());
}
