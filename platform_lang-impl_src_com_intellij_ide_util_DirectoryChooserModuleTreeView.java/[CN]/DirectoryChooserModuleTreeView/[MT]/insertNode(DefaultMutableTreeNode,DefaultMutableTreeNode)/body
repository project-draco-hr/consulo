{
  final Enumeration enumeration=rootNode.children();
  ArrayList children=Collections.list(enumeration);
  final int index=Collections.binarySearch(children,nodeToInsert,new Comparator<DefaultMutableTreeNode>(){
    @Override public int compare(    DefaultMutableTreeNode node1,    DefaultMutableTreeNode node2){
      final Object o1=node1.getUserObject();
      final Object o2=node2.getUserObject();
      if (o1 instanceof Module && o2 instanceof Module) {
        return ((Module)o1).getName().compareToIgnoreCase(((Module)o2).getName());
      }
      if (o1 instanceof ModuleGroup && o2 instanceof ModuleGroup) {
        return o1.toString().compareToIgnoreCase(o2.toString());
      }
      if (o1 instanceof ModuleGroup)       return -1;
      if (o1 instanceof DirectoryChooser.ItemWrapper && o2 instanceof DirectoryChooser.ItemWrapper) {
        final VirtualFile virtualFile1=((DirectoryChooser.ItemWrapper)o1).getDirectory().getVirtualFile();
        final VirtualFile virtualFile2=((DirectoryChooser.ItemWrapper)o2).getDirectory().getVirtualFile();
        return Comparing.compare(virtualFile1.getPath(),virtualFile2.getPath());
      }
      return 1;
    }
  }
);
  final int insertionPoint=-(index + 1);
  if (insertionPoint < 0 || insertionPoint > rootNode.getChildCount()) {
    LOG.error("insertionPoint = " + insertionPoint + "; children="+ children+ "; node="+ nodeToInsert);
    return;
  }
  rootNode.insert(nodeToInsert,insertionPoint);
  ((DefaultTreeModel)myTree.getModel()).nodeStructureChanged(rootNode);
}
