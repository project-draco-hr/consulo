{
  myItems.add(itemWrapper);
  final PsiDirectory directory=itemWrapper.getDirectory();
  final Module module=myFileIndex.getModuleForFile(directory.getVirtualFile());
  DefaultMutableTreeNode node=myModuleNodes.get(module);
  if (node == null) {
    node=new DefaultMutableTreeNode(module,true);
    final String[] groupPath=module != null ? ModuleManager.getInstance(myProject).getModuleGroupPath(module) : null;
    if (groupPath == null || groupPath.length == 0) {
      insertNode(node,myRootNode);
    }
 else {
      final DefaultMutableTreeNode parentNode=ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath),myRootNode,myModuleGroupNodes,new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>(){
        @Override public void consume(        final ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode> parentChildRelation){
          insertNode(parentChildRelation.getChild(),parentChildRelation.getParent());
        }
      }
,new Function<ModuleGroup,DefaultMutableTreeNode>(){
        @Override public DefaultMutableTreeNode fun(        final ModuleGroup moduleGroup){
          return new DefaultMutableTreeNode(moduleGroup,true);
        }
      }
);
      insertNode(node,parentNode);
    }
    myModuleNodes.put(module,node);
  }
  final DefaultMutableTreeNode itemNode=new DefaultMutableTreeNode(itemWrapper,false);
  myItemNodes.put(itemWrapper,itemNode);
  insertNode(itemNode,node);
  ((DefaultTreeModel)myTree.getModel()).nodeStructureChanged(node);
}
