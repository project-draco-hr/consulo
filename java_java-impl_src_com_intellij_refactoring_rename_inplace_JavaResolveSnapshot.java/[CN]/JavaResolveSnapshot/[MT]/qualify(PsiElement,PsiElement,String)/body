{
  if (referent instanceof PsiReferenceExpression && referee instanceof PsiField) {
    PsiReferenceExpression ref=((PsiReferenceExpression)referent);
    if (!ref.isQualified() && hidingLocalName.equals(ref.getReferenceName())) {
      final PsiElement newlyResolved=ref.resolve();
      if (referee.getManager().areElementsEquivalent(newlyResolved,referee))       return;
      PsiClass refereeClass=((PsiField)referee).getContainingClass();
      PsiClass referentClass=PsiTreeUtil.getParentOfType(referent,PsiClass.class);
      if (refereeClass != null && referentClass != null && PsiTreeUtil.isAncestor(refereeClass,referentClass,false)) {
        if (refereeClass == referentClass || refereeClass.getName() != null) {
          @NonNls String qualifer;
          if (RefactoringUtil.isInStaticContext(ref,refereeClass)) {
            qualifer=refereeClass.getName();
          }
 else {
            qualifer=refereeClass == referentClass ? "this" : refereeClass.getName() + ".this";
          }
          String qualifiedRefText=qualifer + "." + ref.getText();
          PsiElementFactory elementFactory=JavaPsiFacade.getInstance(referentClass.getProject()).getElementFactory();
          try {
            PsiReferenceExpression qualifiedRef=(PsiReferenceExpression)elementFactory.createExpressionFromText(qualifiedRefText,null);
            ref.replace(qualifiedRef);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
    }
  }
}
