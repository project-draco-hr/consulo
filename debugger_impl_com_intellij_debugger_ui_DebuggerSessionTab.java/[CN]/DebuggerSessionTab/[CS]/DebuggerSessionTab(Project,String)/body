{
  myProject=project;
  myManager=new LogFilesManager(project,this);
  myContentPanel=new JPanel(new BorderLayout());
  final DebuggerSettings debuggerSettings=DebuggerSettings.getInstance();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getContextManager().addListener(new DebuggerContextListener(){
      public void changeEvent(      DebuggerContextImpl newContext,      int event){
switch (event) {
case DebuggerSession.EVENT_DETACHED:
          DebuggerSettings settings=debuggerSettings;
        myFirstToolbar.updateActionsImmediately();
      if (settings.HIDE_DEBUGGER_ON_PROCESS_TERMINATION) {
        try {
          ExecutionManager.getInstance(getProject()).getContentManager().hideRunContent(myRunner,myRunContentDescriptor);
        }
 catch (        NullPointerException e) {
          LOG.debug(e);
        }
      }
    break;
case DebuggerSession.EVENT_PAUSE:
  if (myIsJustStarted) {
    final Content frameView=findContent(DebuggerContentInfo.FRAME_CONTENT);
    final Content watchView=findContent(DebuggerContentInfo.WATCHES_CONTENT);
    if (frameView != null) {
      Content content=myViewsContentManager.getSelectedContent();
      if (content == null || content.equals(frameView) || content.equals(watchView)) {
        return;
      }
      showFramePanel();
    }
    myIsJustStarted=false;
  }
}
}
}
);
}
myContentUI=new DebuggerContentUI(this,ActionManager.getInstance(),DebuggerBundle.message("title.generic.debug.dialog") + " - " + sessionName);
myViewsContentManager=getContentFactory().createContentManager(myContentUI,false,getProject());
myWatchPanel=new MainWatchPanel(getProject(),getContextManager());
myFramePanel=new FramePanel(getProject(),getContextManager());
myFramePanel.getFrameTree().setAutoVariablesMode(debuggerSettings.AUTO_VARIABLES_MODE);
myWatchesContent=createContent(myWatchPanel,DebuggerBundle.message("debugger.session.tab.watches.title"),WATCHES_ICON,WATCHES_CONTENT);
final DefaultActionGroup watchesGroup=new DefaultActionGroup();
addAction(watchesGroup,DebuggerActions.NEW_WATCH);
addAction(watchesGroup,DebuggerActions.ADD_TO_WATCH);
addAction(watchesGroup,DebuggerActions.REMOVE_WATCH);
myWatchesContent.setActions(watchesGroup,ActionPlaces.DEBUGGER_TOOLBAR);
myViewsContentManager.addContent(myWatchesContent);
myFramesContent=createContent(myFramePanel,DebuggerBundle.message("debugger.session.tab.frames.title"),IconLoader.getIcon("/debugger/frame.png"),FRAME_CONTENT);
final DefaultActionGroup framesGroup=new DefaultActionGroup();
addAction(framesGroup,DebuggerActions.SHOW_EXECUTION_POINT);
framesGroup.addSeparator();
addAction(framesGroup,DebuggerActions.STEP_OVER);
addAction(framesGroup,DebuggerActions.STEP_INTO);
addAction(framesGroup,DebuggerActions.STEP_OUT);
addAction(framesGroup,DebuggerActions.FORCE_STEP_INTO);
framesGroup.addSeparator();
addAction(framesGroup,IdeActions.ACTION_PREVIOUS_OCCURENCE);
addAction(framesGroup,IdeActions.ACTION_NEXT_OCCURENCE);
addAction(framesGroup,DebuggerActions.POP_FRAME);
addAction(framesGroup,DebuggerActions.RUN_TO_CURSOR);
myFramesContent.setActions(framesGroup,ActionPlaces.DEBUGGER_TOOLBAR);
myViewsContentManager.addContent(myFramesContent);
myVarsContent=createContent(myFramePanel.getVarsPanel(),DebuggerBundle.message("debugger.session.tab.variables.title"),IconLoader.getIcon("/debugger/value.png"),VARIABLES_CONTENT);
final DefaultActionGroup varsGroup=new DefaultActionGroup();
addAction(varsGroup,DebuggerActions.EVALUATE_EXPRESSION);
varsGroup.add(new WatchLastMethodReturnValueAction());
varsGroup.add(new AutoVarsSwitchAction());
myVarsContent.setActions(varsGroup,ActionPlaces.DEBUGGER_TOOLBAR);
myViewsContentManager.addContent(myVarsContent);
myViewsContentManager.addContentManagerListener(new ContentManagerAdapter(){
public void selectionChanged(ContentManagerEvent event){
final Content content=event.getContent();
if (content.getComponent() instanceof DebuggerView) {
final DebuggerView view=(DebuggerView)content.getComponent();
final boolean selected=myViewsContentManager.isSelected(content);
if (selected) {
view.setUpdateEnabled(true);
if (view.isRefreshNeeded()) {
  view.rebuildIfVisible(DebuggerSession.EVENT_CONTEXT);
}
}
 else {
view.setUpdateEnabled(false);
}
}
}
}
);
myContentPanel.add(myViewsContentManager.getComponent(),BorderLayout.CENTER);
}
