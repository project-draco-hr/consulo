{
  myProject=project;
  myManager=new LogFilesManager(project,this);
  myUi=new RunnerLayoutUiImpl(project,this,"JavaDebugger",DebuggerBundle.message("title.generic.debug.dialog"),sessionName);
  myUi.initTabDefaults(0,"Debugger",null);
  final DebuggerSettings debuggerSettings=DebuggerSettings.getInstance();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getContextManager().addListener(new DebuggerContextListener(){
      public void changeEvent(      DebuggerContextImpl newContext,      int event){
switch (event) {
case DebuggerSession.EVENT_DETACHED:
          myUi.updateToolbarNow();
        if (debuggerSettings.HIDE_DEBUGGER_ON_PROCESS_TERMINATION) {
          try {
            ExecutionManager.getInstance(getProject()).getContentManager().hideRunContent(myRunner.getInfo(),myRunContentDescriptor);
          }
 catch (          NullPointerException e) {
            LOG.debug(e);
          }
        }
      break;
  }
}
}
);
}
DefaultActionGroup stepping=new DefaultActionGroup();
ActionManager actionManager=ActionManager.getInstance();
stepping.add(actionManager.getAction(DebuggerActions.SHOW_EXECUTION_POINT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.STEP_OVER));
stepping.add(actionManager.getAction(DebuggerActions.STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.FORCE_STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.STEP_OUT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.RUN_TO_CURSOR));
myUi.setTopToolbar(stepping,ActionPlaces.DEBUGGER_TOOLBAR);
myWatchPanel=new MainWatchPanel(getProject(),getContextManager());
myFramesPanel=new FramesPanel(getProject(),getContextManager());
Content watches=myUi.createContent(DebuggerContentInfo.WATCHES_CONTENT,myWatchPanel,DebuggerBundle.message("debugger.session.tab.watches.title"),WATCHES_ICON,null);
final DefaultActionGroup watchesGroup=new DefaultActionGroup();
addAction(watchesGroup,DebuggerActions.NEW_WATCH);
addAction(watchesGroup,DebuggerActions.ADD_TO_WATCH);
addAction(watchesGroup,DebuggerActions.REMOVE_WATCH);
watches.setActions(watchesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myWatchPanel.getTree());
myUi.addContent(watches,0,RunnerLayoutUi.PlaceInGrid.right,false);
Content framesContent=myUi.createContent(DebuggerContentInfo.FRAME_CONTENT,myFramesPanel,DebuggerBundle.message("debugger.session.tab.frames.title"),IconLoader.getIcon("/debugger/frame.png"),null);
final DefaultActionGroup framesGroup=new DefaultActionGroup();
addAction(framesGroup,DebuggerActions.POP_FRAME);
CommonActionsManager actionsManager=CommonActionsManager.getInstance();
framesGroup.add(actionsManager.createPrevOccurenceAction(myFramesPanel.getOccurenceNavigator()));
framesGroup.add(actionsManager.createNextOccurenceAction(myFramesPanel.getOccurenceNavigator()));
framesContent.setActions(framesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myFramesPanel.getFramesList());
myUi.addContent(framesContent,0,RunnerLayoutUi.PlaceInGrid.left,false);
myVariablesPanel=new VariablesPanel(myProject,myStateManager,this);
myVariablesPanel.getFrameTree().setAutoVariablesMode(debuggerSettings.AUTO_VARIABLES_MODE);
Content vars=myUi.createContent(DebuggerContentInfo.VARIABLES_CONTENT,myVariablesPanel,DebuggerBundle.message("debugger.session.tab.variables.title"),IconLoader.getIcon("/debugger/value.png"),null);
final DefaultActionGroup varsGroup=new DefaultActionGroup();
addAction(varsGroup,DebuggerActions.EVALUATE_EXPRESSION);
varsGroup.add(new WatchLastMethodReturnValueAction());
varsGroup.add(new AutoVarsSwitchAction());
vars.setActions(varsGroup,ActionPlaces.DEBUGGER_TOOLBAR,myVariablesPanel.getTree());
myUi.addContent(vars,0,RunnerLayoutUi.PlaceInGrid.center,false);
myUi.getContentManager().addContentManagerListener(new ContentManagerAdapter(){
public void selectionChanged(ContentManagerEvent event){
final Content content=event.getContent();
if (content.getComponent() instanceof DebuggerView) {
  final DebuggerView view=(DebuggerView)content.getComponent();
  if (content.isSelected()) {
    view.setUpdateEnabled(true);
    if (view.isRefreshNeeded()) {
      view.rebuildIfVisible(DebuggerSession.EVENT_CONTEXT);
    }
  }
 else {
    view.setUpdateEnabled(false);
  }
}
}
}
);
myUi.setSelected(framesContent);
}
