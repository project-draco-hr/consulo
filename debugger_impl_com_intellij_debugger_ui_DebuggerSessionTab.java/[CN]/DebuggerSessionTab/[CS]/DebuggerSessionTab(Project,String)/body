{
  myProject=project;
  myManager=new LogFilesManager(project,this);
  myUi=RunnerLayoutUi.Factory.getInstance(project).create("JavaDebugger",DebuggerBundle.message("title.generic.debug.dialog"),sessionName,this);
  myUi.getDefaults().initTabDefaults(0,"Debugger",null).initFocusContent(DebuggerContentInfo.FRAME_CONTENT,BREAKPOINT_CONDITION).initFocusContent(DebuggerContentInfo.CONSOLE_CONTENT,LayoutViewOptions.STARTUP);
  final DefaultActionGroup focus=new DefaultActionGroup();
  focus.add(ActionManager.getInstance().getAction("Debugger.FocusOnBreakpoint"));
  myUi.getOptions().setAdditionalFocusActions(focus);
  final DebuggerSettings debuggerSettings=DebuggerSettings.getInstance();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getContextManager().addListener(new DebuggerContextListener(){
      public void changeEvent(      DebuggerContextImpl newContext,      int event){
switch (event) {
case DebuggerSession.EVENT_DETACHED:
          myUi.updateActionsNow();
        if (debuggerSettings.HIDE_DEBUGGER_ON_PROCESS_TERMINATION) {
          try {
            ExecutionManager.getInstance(getProject()).getContentManager().hideRunContent(DefaultDebugExecutor.getDebugExecutorInstance(),myRunContentDescriptor);
          }
 catch (          NullPointerException e) {
            LOG.debug(e);
          }
        }
      break;
  }
}
}
);
}
DefaultActionGroup stepping=new DefaultActionGroup();
ActionManager actionManager=ActionManager.getInstance();
stepping.add(actionManager.getAction(DebuggerActions.SHOW_EXECUTION_POINT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.STEP_OVER));
stepping.add(actionManager.getAction(DebuggerActions.STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.FORCE_STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.STEP_OUT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.RUN_TO_CURSOR));
myUi.getOptions().setTopToolbar(stepping,ActionPlaces.DEBUGGER_TOOLBAR);
myWatchPanel=new MainWatchPanel(getProject(),getContextManager());
myFramesPanel=new FramesPanel(getProject(),getContextManager());
final AlertIcon breakpointAlert=new AlertIcon(IconLoader.getIcon("/debugger/breakpointAlert.png"));
Content watches=myUi.createContent(DebuggerContentInfo.WATCHES_CONTENT,myWatchPanel,XDebuggerBundle.message("debugger.session.tab.watches.title"),XDebuggerUIConstants.WATCHES_TAB_ICON,null);
watches.setCloseable(false);
watches.setAlertIcon(breakpointAlert);
final DefaultActionGroup watchesGroup=new DefaultActionGroup();
addAction(watchesGroup,DebuggerActions.NEW_WATCH);
addAction(watchesGroup,DebuggerActions.ADD_TO_WATCH);
addAction(watchesGroup,DebuggerActions.REMOVE_WATCH);
watches.setActions(watchesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myWatchPanel.getTree());
myUi.addContent(watches,0,PlaceInGrid.right,false);
Content framesContent=myUi.createContent(DebuggerContentInfo.FRAME_CONTENT,myFramesPanel,XDebuggerBundle.message("debugger.session.tab.frames.title"),XDebuggerUIConstants.FRAMES_TAB_ICON,null);
framesContent.setCloseable(false);
framesContent.setAlertIcon(breakpointAlert);
final DefaultActionGroup framesGroup=new DefaultActionGroup();
addAction(framesGroup,DebuggerActions.POP_FRAME);
CommonActionsManager actionsManager=CommonActionsManager.getInstance();
framesGroup.add(actionsManager.createPrevOccurenceAction(myFramesPanel.getOccurenceNavigator()));
framesGroup.add(actionsManager.createNextOccurenceAction(myFramesPanel.getOccurenceNavigator()));
framesContent.setActions(framesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myFramesPanel.getFramesList());
myUi.addContent(framesContent,0,PlaceInGrid.left,false);
myVariablesPanel=new VariablesPanel(myProject,myStateManager,this);
myVariablesPanel.getFrameTree().setAutoVariablesMode(debuggerSettings.AUTO_VARIABLES_MODE);
Content vars=myUi.createContent(DebuggerContentInfo.VARIABLES_CONTENT,myVariablesPanel,XDebuggerBundle.message("debugger.session.tab.variables.title"),XDebuggerUIConstants.VARIABLES_TAB_ICON,null);
vars.setCloseable(false);
vars.setAlertIcon(breakpointAlert);
final DefaultActionGroup varsGroup=new DefaultActionGroup();
addAction(varsGroup,DebuggerActions.EVALUATE_EXPRESSION);
varsGroup.add(new WatchLastMethodReturnValueAction());
varsGroup.add(new AutoVarsSwitchAction());
vars.setActions(varsGroup,ActionPlaces.DEBUGGER_TOOLBAR,myVariablesPanel.getTree());
myUi.addContent(vars,0,PlaceInGrid.center,false);
myThreadsPanel=new ThreadsPanel(project,getContextManager());
Content threadsContent=myUi.createContent(DebuggerContentInfo.THREADS_CONTENT,myThreadsPanel,XDebuggerBundle.message("debugger.session.tab.threads.title"),XDebuggerUIConstants.THREADS_TAB_ICON,null);
threadsContent.setCloseable(false);
myUi.addContent(threadsContent,0,PlaceInGrid.left,true);
for (Content each : myUi.getContents()) {
updateStatus(each);
}
myUi.addListener(new ContentManagerAdapter(){
public void selectionChanged(ContentManagerEvent event){
updateStatus(event.getContent());
}
}
,this);
}
