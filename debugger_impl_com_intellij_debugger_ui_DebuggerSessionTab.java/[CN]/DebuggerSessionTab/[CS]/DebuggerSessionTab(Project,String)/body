{
  myProject=project;
  myManager=new LogFilesManager(project,this);
  myContentPanel=new JPanel(new BorderLayout());
  final RunnerLayout layout=getLayout();
  layout.setDefault(0,"Debugger",null);
  layout.setDefault(DebuggerContentInfo.FRAME_CONTENT,0,View.PlaceInGrid.left,false);
  layout.setDefault(DebuggerContentInfo.VARIABLES_CONTENT,0,View.PlaceInGrid.center,false);
  layout.setDefault(DebuggerContentInfo.WATCHES_CONTENT,0,View.PlaceInGrid.right,false);
  layout.setDefault(DebuggerContentInfo.CONSOLE_CONTENT,1,View.PlaceInGrid.bottom,false);
  final DebuggerSettings debuggerSettings=DebuggerSettings.getInstance();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    getContextManager().addListener(new DebuggerContextListener(){
      public void changeEvent(      DebuggerContextImpl newContext,      int event){
switch (event) {
case DebuggerSession.EVENT_DETACHED:
          myContentUI.updateActionsImmediately();
        if (debuggerSettings.HIDE_DEBUGGER_ON_PROCESS_TERMINATION) {
          try {
            ExecutionManager.getInstance(getProject()).getContentManager().hideRunContent(myRunner.getInfo(),myRunContentDescriptor);
          }
 catch (          NullPointerException e) {
            LOG.debug(e);
          }
        }
      break;
  }
}
}
);
}
DefaultActionGroup stepping=new DefaultActionGroup();
ActionManager actionManager=ActionManager.getInstance();
stepping.add(actionManager.getAction(DebuggerActions.SHOW_EXECUTION_POINT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.STEP_OVER));
stepping.add(actionManager.getAction(DebuggerActions.STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.FORCE_STEP_INTO));
stepping.add(actionManager.getAction(DebuggerActions.STEP_OUT));
stepping.addSeparator();
stepping.add(actionManager.getAction(DebuggerActions.RUN_TO_CURSOR));
myContentUI=new RunnerContentUi(getProject(),ActionManager.getInstance(),IdeFocusManager.getInstance(getProject()),getLayoutSettings(),DebuggerBundle.message("title.generic.debug.dialog") + " - " + sessionName,stepping,ActionPlaces.DEBUGGER_TOOLBAR);
myViewsContentManager=getContentFactory().createContentManager(myContentUI.getContentUI(),false,getProject());
Disposer.register(this,myViewsContentManager);
myWatchPanel=new MainWatchPanel(getProject(),getContextManager());
myFramesPanel=new FramesPanel(getProject(),getContextManager());
myWatchesContent=createContent(myWatchPanel,DebuggerBundle.message("debugger.session.tab.watches.title"),WATCHES_ICON,DebuggerContentInfo.WATCHES_CONTENT,null);
final DefaultActionGroup watchesGroup=new DefaultActionGroup();
addAction(watchesGroup,DebuggerActions.NEW_WATCH);
addAction(watchesGroup,DebuggerActions.ADD_TO_WATCH);
addAction(watchesGroup,DebuggerActions.REMOVE_WATCH);
myWatchesContent.setActions(watchesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myWatchPanel.getTree());
myViewsContentManager.addContent(myWatchesContent);
myFramesContent=createContent(myFramesPanel,DebuggerBundle.message("debugger.session.tab.frames.title"),IconLoader.getIcon("/debugger/frame.png"),DebuggerContentInfo.FRAME_CONTENT,null);
final DefaultActionGroup framesGroup=new DefaultActionGroup();
addAction(framesGroup,DebuggerActions.POP_FRAME);
CommonActionsManager actionsManager=CommonActionsManager.getInstance();
framesGroup.add(actionsManager.createPrevOccurenceAction(myFramesPanel.getOccurenceNavigator()));
framesGroup.add(actionsManager.createNextOccurenceAction(myFramesPanel.getOccurenceNavigator()));
myFramesContent.setActions(framesGroup,ActionPlaces.DEBUGGER_TOOLBAR,myFramesPanel.getFramesList());
myViewsContentManager.addContent(myFramesContent);
myVariablesPanel=new VariablesPanel(myProject,myStateManager,this);
myVariablesPanel.getFrameTree().setAutoVariablesMode(debuggerSettings.AUTO_VARIABLES_MODE);
myVarsContent=createContent(myVariablesPanel,DebuggerBundle.message("debugger.session.tab.variables.title"),IconLoader.getIcon("/debugger/value.png"),DebuggerContentInfo.VARIABLES_CONTENT,null);
final DefaultActionGroup varsGroup=new DefaultActionGroup();
addAction(varsGroup,DebuggerActions.EVALUATE_EXPRESSION);
varsGroup.add(new WatchLastMethodReturnValueAction());
varsGroup.add(new AutoVarsSwitchAction());
myVarsContent.setActions(varsGroup,ActionPlaces.DEBUGGER_TOOLBAR,myVariablesPanel.getTree());
myViewsContentManager.addContent(myVarsContent);
myViewsContentManager.addContentManagerListener(new ContentManagerAdapter(){
public void selectionChanged(ContentManagerEvent event){
final Content content=event.getContent();
if (content.getComponent() instanceof DebuggerView) {
  final DebuggerView view=(DebuggerView)content.getComponent();
  final boolean selected=myViewsContentManager.isSelected(content);
  if (selected) {
    view.setUpdateEnabled(true);
    if (view.isRefreshNeeded()) {
      view.rebuildIfVisible(DebuggerSession.EVENT_CONTEXT);
    }
  }
 else {
    view.setUpdateEnabled(false);
  }
}
}
}
);
myViewsContentManager.setSelectedContent(myFramesContent);
myContentPanel.add(myViewsContentManager.getComponent(),BorderLayout.CENTER);
}
