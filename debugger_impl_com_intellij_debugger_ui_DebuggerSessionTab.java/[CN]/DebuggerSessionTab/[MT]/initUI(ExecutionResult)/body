{
  myConsole=executionResult.getExecutionConsole();
  myRunContentDescriptor=new RunContentDescriptor(myConsole,executionResult.getProcessHandler(),myContentPanel,getSessionName());
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return myRunContentDescriptor;
  }
  Content content=findContent(CONSOLE_CONTENT);
  if (content != null) {
    myViewsContentManager.removeContent(content);
  }
  content=PeerFactory.getInstance().getContentFactory().createContent(myConsole.getComponent(),DebuggerBundle.message("debugger.session.tab.console.content.name"),false);
  content.setIcon(CONSOLE_ICON);
  content.putUserData(CONTENT_KIND,CONSOLE_CONTENT);
  Content[] contents=myViewsContentManager.getContents();
  myViewsContentManager.removeAllContents();
  myViewsContentManager.addContent(content);
  for (  Content content1 : contents) {
    myViewsContentManager.addContent(content1);
  }
  if (myConfiguration instanceof RunConfigurationBase && !(myConfiguration instanceof JUnitConfiguration)) {
    clearLogContents();
    RunConfigurationBase base=(RunConfigurationBase)myConfiguration;
    final ArrayList<LogFileOptions> logFiles=base.getLogFiles();
    for (    LogFileOptions logFile : logFiles) {
      if (logFile.isEnabled()) {
        final Set<String> paths=logFile.getPaths();
        for (        String path : paths) {
          addLogConsole(path,logFile.isSkipContent(),myProject,logFile.getName());
        }
      }
    }
  }
  if (myToolBarPanel != null) {
    myContentPanel.remove(myToolBarPanel);
  }
  myFirstToolbar=createFirstToolbar(myRunContentDescriptor,myContentPanel);
  mySecondToolbar=createSecondToolbar();
  myToolBarPanel=new JPanel(new GridLayout(1,2));
  myToolBarPanel.add(myFirstToolbar.getComponent());
  myToolBarPanel.add(mySecondToolbar.getComponent());
  myContentPanel.add(myToolBarPanel,BorderLayout.WEST);
  return myRunContentDescriptor;
}
