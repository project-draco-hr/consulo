{
  new WriteCommandAction(myProject,myCommandName,myCommandName){
    @Override protected void run(    Result result) throws Throwable {
      final Document document=myEditor.getDocument();
      PsiDocumentManager.getInstance(getProject()).commitDocument(document);
      final PsiVariable variable=getVariable();
      LOG.assertTrue(variable != null);
      final PsiModifierList modifierList=variable.getModifierList();
      LOG.assertTrue(modifierList != null);
      int textOffset=modifierList.getTextOffset();
      final String modifierListText=modifierList.getText();
      int length=PsiModifier.PUBLIC.length();
      int idx=modifierListText.indexOf(PsiModifier.PUBLIC);
      if (idx == -1) {
        idx=modifierListText.indexOf(PsiModifier.PROTECTED);
        length=PsiModifier.PROTECTED.length();
      }
      if (idx == -1) {
        idx=modifierListText.indexOf(PsiModifier.PRIVATE);
        length=PsiModifier.PRIVATE.length();
      }
      final int startOffset=textOffset + idx;
      final int endOffset;
      if (idx == -1) {
        endOffset=startOffset;
      }
 else {
        endOffset=textOffset + length;
      }
      String visibility=getVisibility();
      if (visibility == PsiModifier.PACKAGE_LOCAL) {
        visibility="";
      }
      final String finalVisibility=visibility;
      Runnable runnable=new Runnable(){
        @Override public void run(){
          document.replaceString(startOffset,endOffset,finalVisibility);
        }
      }
;
      final LookupImpl lookup=(LookupImpl)LookupManager.getActiveLookup(myEditor);
      if (lookup != null) {
        lookup.performGuardedChange(runnable);
      }
 else {
        runnable.run();
      }
    }
  }
.execute();
}
