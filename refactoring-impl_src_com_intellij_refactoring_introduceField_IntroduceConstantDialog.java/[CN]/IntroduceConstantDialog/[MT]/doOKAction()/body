{
  final String targetClassName=getTargetClassName();
  if (!"".equals(targetClassName)) {
    final PsiManager manager=PsiManager.getInstance(myProject);
    final PsiClass newClass=manager.findClass(targetClassName,GlobalSearchScope.projectScope(myProject));
    if (newClass == null) {
      CommonRefactoringUtil.showErrorMessage(IntroduceConstantHandler.REFACTORING_NAME,RefactoringBundle.message("class.does.not.exist.in.the.project"),HelpID.INTRODUCE_FIELD,myProject);
      return;
    }
    myDestinationClass=newClass;
  }
  String fieldName=getEnteredName();
  String errorString=null;
  if ("".equals(fieldName)) {
    errorString=RefactoringBundle.message("no.field.name.specified");
  }
 else   if (!PsiManager.getInstance(myProject).getNameHelper().isIdentifier(fieldName)) {
    errorString=RefactoringMessageUtil.getIncorrectIdentifierMessage(fieldName);
  }
  if (errorString != null) {
    CommonRefactoringUtil.showErrorMessage(IntroduceFieldHandler.REFACTORING_NAME,errorString,HelpID.INTRODUCE_FIELD,myProject);
    return;
  }
  PsiField oldField=myParentClass.findFieldByName(fieldName,true);
  if (oldField != null) {
    int answer=Messages.showYesNoDialog(myProject,RefactoringBundle.message("field.exists",fieldName,oldField.getContainingClass().getQualifiedName()),IntroduceFieldHandler.REFACTORING_NAME,Messages.getWarningIcon());
    if (answer != 0) {
      return;
    }
  }
  RefactoringSettings.getInstance().INTRODUCE_CONSTANT_VISIBILITY=getFieldVisibility();
  RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY,targetClassName);
  super.doOKAction();
}
