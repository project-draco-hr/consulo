{
  beforeMove();
  final LineRange lineRange=whatToMove;
  final int startLine=lineRange.startLine;
  final int endLine=lineRange.endLine;
  final Document document=editor.getDocument();
  final int start=editor.logicalPositionToOffset(new LogicalPosition(startLine,0));
  final int end=editor.logicalPositionToOffset(new LogicalPosition(endLine + 1,0));
  final String toInsert=document.getCharsSequence().subSequence(start,end).toString();
  final int insStartAfterCut=myIsDown ? insertOffset - toInsert.length() : insertOffset;
  final int insEndAfterCut=insStartAfterCut + toInsert.length();
  final CaretModel caretModel=editor.getCaretModel();
  final int caretRelativePos=caretModel.getOffset() - start;
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int selectionStart=selectionModel.getSelectionStart();
  final int selectionEnd=selectionModel.getSelectionEnd();
  final boolean hasSelection=selectionModel.hasSelection();
  caretModel.moveToOffset(0);
  document.deleteString(start,end);
  document.insertString(insStartAfterCut,toInsert);
  final Project project=editor.getProject();
  PsiDocumentManager.getInstance(project).commitDocument(document);
  afterMove();
  if (hasSelection) {
    restoreSelection(editor,selectionStart,selectionEnd,start,insStartAfterCut);
  }
  try {
    final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
    final int line1=editor.offsetToLogicalPosition(insStartAfterCut).line;
    final int line2=editor.offsetToLogicalPosition(insEndAfterCut).line;
    caretModel.moveToOffset(insStartAfterCut + caretRelativePos);
    for (int line=line1; line <= line2; line++) {
      if (lineContainsNonSpaces(document,line)) {
        int lineStart=document.getLineStartOffset(line);
        codeStyleManager.adjustLineIndent(file,lineStart);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
