{
  beforeMove(editor);
  final LineRange lineRange=whatToMove;
  final int startLine=lineRange.startLine;
  final int endLine=lineRange.endLine;
  final Document document=editor.getDocument();
  final int start=editor.logicalPositionToOffset(new LogicalPosition(startLine,0));
  final int end=editor.logicalPositionToOffset(new LogicalPosition(endLine + 1,0));
  final String toInsert=document.getCharsSequence().subSequence(start,end).toString();
  myInsertStartAfterCutOffset=myIsDown ? insertOffset - toInsert.length() : insertOffset;
  myInsertEndAfterCutOffset=myInsertStartAfterCutOffset + toInsert.length();
  myDeleteStartAfterMoveOffset=myIsDown ? start : start + toInsert.length();
  final CaretModel caretModel=editor.getCaretModel();
  final int caretRelativePos=caretModel.getOffset() - start;
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int selectionStart=selectionModel.getSelectionStart();
  final int selectionEnd=selectionModel.getSelectionEnd();
  final boolean hasSelection=selectionModel.hasSelection();
  caretModel.moveToOffset(0);
  document.deleteString(start,end);
  document.insertString(myInsertStartAfterCutOffset,toInsert);
  final Project project=editor.getProject();
  PsiDocumentManager.getInstance(project).commitDocument(document);
  if (hasSelection) {
    restoreSelection(editor,selectionStart,selectionEnd,start,myInsertStartAfterCutOffset);
  }
  try {
    final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
    final int line1=editor.offsetToLogicalPosition(myInsertStartAfterCutOffset).line;
    final int line2=editor.offsetToLogicalPosition(myInsertEndAfterCutOffset).line;
    caretModel.moveToOffset(myInsertStartAfterCutOffset + caretRelativePos);
    for (int line=line1; line <= line2; line++) {
      if (lineContainsNonSpaces(document,line)) {
        int lineStart=document.getLineStartOffset(line);
        int oldLineLength=document.getLineEndOffset(line) - lineStart;
        codeStyleManager.adjustLineIndent(file,lineStart);
        int newLineLength=document.getLineEndOffset(line) - lineStart;
        myInsertEndAfterCutOffset+=newLineLength - oldLineLength;
        if (!myIsDown) {
          myDeleteStartAfterMoveOffset+=newLineLength - oldLineLength;
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  afterMove(editor,file);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
