{
  LOG.assertTrue(module != null);
  LOG.assertTrue(lwComponent != null);
  LOG.assertTrue(loader != null);
  final Class componentClass;
  if (lwComponent.getErrorComponentProperties() != null) {
    componentClass=null;
  }
 else {
    componentClass=Class.forName(lwComponent.getComponentClassName(),true,loader);
  }
  final String id=lwComponent.getId();
  final RadComponent component;
  if (lwComponent instanceof LwHSpacer) {
    component=new RadHSpacer(module,id);
  }
 else   if (lwComponent instanceof LwVSpacer) {
    component=new RadVSpacer(module,id);
  }
 else   if (lwComponent instanceof LwAtomicComponent) {
    if (componentClass == null) {
      component=createErrorComponent(module,id,lwComponent,loader);
    }
 else {
      RadComponent component1;
      try {
        component1=new RadAtomicComponent(module,componentClass,id);
      }
 catch (      final Exception exc) {
        String errorDescription="Class \"" + lwComponent.getComponentClassName() + "\" cannot be instantiated";
        final String message=FormEditingUtil.getExceptionMessage(exc);
        if (message != null) {
          errorDescription+=": " + message;
        }
        component1=RadErrorComponent.create(module,id,lwComponent.getComponentClassName(),lwComponent.getErrorComponentProperties(),errorDescription);
      }
      component=component1;
    }
  }
 else   if (lwComponent instanceof LwScrollPane) {
    component=new RadScrollPane(module,id);
  }
 else   if (lwComponent instanceof LwTabbedPane) {
    component=new RadTabbedPane(module,id);
  }
 else   if (lwComponent instanceof LwSplitPane) {
    component=new RadSplitPane(module,id);
  }
 else   if (lwComponent instanceof LwContainer) {
    final LwContainer lwContainer=(LwContainer)lwComponent;
    AbstractLayout layout=lwContainer.getLayout();
    if (layout instanceof XYLayoutManager) {
      final XYLayoutManagerImpl xyLayoutManager=new XYLayoutManagerImpl();
      layout=xyLayoutManager;
      xyLayoutManager.setPreferredSize(lwComponent.getBounds().getSize());
    }
    if (componentClass == null) {
      component=createErrorComponent(module,id,lwComponent,loader);
    }
 else     if (lwContainer instanceof LwRootContainer) {
      component=new RadRootContainer(module,componentClass,id);
    }
 else {
      component=new RadContainer(module,componentClass,id);
    }
    ((RadContainer)component).setLayout(layout);
  }
 else {
    throw new IllegalArgumentException("unexpected component: " + lwComponent);
  }
  component.setBinding(lwComponent.getBinding());
  component.setBounds(lwComponent.getBounds());
  final LwIntrospectedProperty[] properties=lwComponent.getAssignedIntrospectedProperties();
  if (componentClass != null) {
    final Palette palette=Palette.getInstance(module.getProject());
    for (int i=0; i < properties.length; i++) {
      final LwIntrospectedProperty lwProperty=properties[i];
      final IntrospectedProperty property=palette.getIntrospectedProperty(componentClass,lwProperty.getName());
      if (property == null) {
        continue;
      }
      try {
        final Object value=lwComponent.getPropertyValue(lwProperty);
        property.setValue(component,value);
      }
 catch (      Exception e) {
        LOG.info(e);
      }
    }
  }
  component.getConstraints().restore(lwComponent.getConstraints());
  component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints());
  if (component instanceof RadContainer) {
    final RadContainer container=(RadContainer)component;
    final LwContainer lwContainer=(LwContainer)lwComponent;
    container.setBorderType(lwContainer.getBorderType());
    container.setBorderTitle(lwContainer.getBorderTitle());
    for (int i=0; i < lwContainer.getComponentCount(); i++) {
      container.addComponent(createComponent(module,(LwComponent)lwContainer.getComponent(i),loader));
    }
  }
  if (component instanceof RadRootContainer) {
    final RadRootContainer radRootContainer=(RadRootContainer)component;
    final LwRootContainer lwRootContainer=(LwRootContainer)lwComponent;
    radRootContainer.setClassToBind(lwRootContainer.getClassToBind());
    radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding());
  }
  return component;
}
