{
  if (javacMessages == null)   return;
  boolean isJikes=false;
  for (  String errorMessage : javacMessages) {
    if (isJikesMessage(errorMessage)) {
      isJikes=true;
      break;
    }
  }
  com.intellij.compiler.OutputParser outputParser;
  if (isJikes) {
    outputParser=new JikesOutputParser(project);
  }
 else {
    outputParser=new JavacOutputParser(project);
  }
  com.intellij.compiler.OutputParser.Callback callback=new com.intellij.compiler.OutputParser.Callback(){
    private int myIndex=0;
    @Nullable public String getCurrentLine(){
      if (javacMessages == null || myIndex >= javacMessages.size()) {
        return null;
      }
      return javacMessages.get(myIndex);
    }
    public String getNextLine(){
      return javacMessages.get(myIndex++);
    }
    public void message(    final CompilerMessageCategory category,    final String message,    final String url,    final int lineNum,    final int columnNum){
      StringTokenizer tokenizer=new StringTokenizer(message,"\n",false);
      final String[] strings=new String[tokenizer.countTokens()];
      for (int idx=0; tokenizer.hasMoreTokens(); idx++) {
        strings[idx]=tokenizer.nextToken();
      }
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          VirtualFile file=url == null ? null : VirtualFileManager.getInstance().findFileByUrl(url);
          messageView.outputJavacMessage(convertCategory(category),strings,file,url,lineNum,columnNum);
        }
      }
);
    }
    public void setProgressText(    String text){
    }
    public void fileProcessed(    String path){
    }
    public void fileGenerated(    String path){
    }
  }
;
  try {
    while (true) {
      if (!outputParser.processMessageLine(callback)) {
        break;
      }
    }
  }
 catch (  Exception e) {
  }
}
