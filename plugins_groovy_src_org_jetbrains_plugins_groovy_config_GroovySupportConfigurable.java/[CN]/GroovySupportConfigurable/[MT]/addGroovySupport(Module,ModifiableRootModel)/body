{
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(rootModel);
  if (!facetEditor.addNewSdk()) {
    final Library selectedLibrary=facetEditor.getSelectedLibrary();
    if (selectedLibrary != null) {
      List<LibraryManager> suitable=CollectionFactory.arrayList();
      for (      final LibraryManager manager : AbstractGroovyLibraryManager.EP_NAME.getExtensions()) {
        if (manager.managesLibrary(selectedLibrary,container)) {
          suitable.add(manager);
        }
      }
      if (cleanDuplicates(suitable,rootModel,container)) {
        LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(selectedLibrary));
      }
    }
    return;
  }
  final String path=facetEditor.getNewSdkPath();
  final AbstractGroovyLibraryManager libraryManager=facetEditor.getChosenManager();
  if (path != null && libraryManager != null) {
    List<LibraryManager> suitable=CollectionFactory.arrayList();
    suitable.add(libraryManager);
    final VirtualFile vfile=LocalFileSystem.getInstance().refreshAndFindFileByPath(FileUtil.toSystemIndependentName(path));
    if (vfile != null) {
      for (      final LibraryManager manager : AbstractGroovyLibraryManager.EP_NAME.getExtensions()) {
        if (manager != libraryManager && manager.isSDKHome(vfile)) {
          suitable.add(manager);
        }
      }
    }
    if (!cleanDuplicates(suitable,rootModel,container))     return;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        if (module.isDisposed()) {
          return;
        }
        final Library lib=libraryManager.createLibrary(path,LibrariesContainerFactory.createContainer(module),false);
        if (lib != null) {
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
              LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(lib));
              rootModel.commit();
            }
          }
);
        }
      }
    }
);
  }
}
