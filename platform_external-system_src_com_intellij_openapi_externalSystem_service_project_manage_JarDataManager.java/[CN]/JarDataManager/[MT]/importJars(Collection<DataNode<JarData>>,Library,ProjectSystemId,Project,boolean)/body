{
  if (jars.isEmpty()) {
    return;
  }
  ExternalSystemUtil.executeProjectChangeAction(project,externalSystemId,jars,synchronous,new Runnable(){
    @Override public void run(){
      LibraryTable table=myPlatformFacade.getProjectLibraryTable(project);
      String libraryName=library.getName();
      if (libraryName == null) {
        LOG.warn(String.format("Can't import jars %s. Reason: target library doesn't have a name",jars));
        return;
      }
      Library libraryToUse=table.getLibraryByName(libraryName);
      if (libraryToUse == null) {
        LOG.warn(String.format("Can't import jars %s. Reason: target library (%s) doesn't exist",jars,libraryName));
        return;
      }
      Library.ModifiableModel model=library.getModifiableModel();
      try {
        LocalFileSystem fileSystem=LocalFileSystem.getInstance();
        for (        DataNode<JarData> jarNode : jars) {
          JarData jarData=jarNode.getData();
          OrderRootType ideJarType=myLibraryPathTypeMapper.map(jarData.getPathType());
          for (          VirtualFile file : model.getFiles(ideJarType)) {
            if (jarData.getPath().equals(ExternalSystemUtil.getLocalFileSystemPath(file))) {
              return;
            }
          }
          File jarFile=new File(jarData.getPath());
          VirtualFile virtualFile=fileSystem.refreshAndFindFileByIoFile(jarFile);
          if (virtualFile == null) {
            LOG.warn(String.format("Can't find a jar of the library '%s' at path '%s'",jarData.getLibraryId().getLibraryName(),jarData.getPath()));
            return;
          }
          if (virtualFile.isDirectory()) {
            model.addRoot(virtualFile,ideJarType);
          }
 else {
            VirtualFile jarRoot=JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile);
            if (jarRoot == null) {
              LOG.warn(String.format("Can't parse contents of the jar file at path '%s' for the library '%s''",jarData.getPath(),libraryName));
              return;
            }
            model.addRoot(jarRoot,ideJarType);
          }
        }
      }
  finally {
        model.commit();
      }
    }
  }
);
}
