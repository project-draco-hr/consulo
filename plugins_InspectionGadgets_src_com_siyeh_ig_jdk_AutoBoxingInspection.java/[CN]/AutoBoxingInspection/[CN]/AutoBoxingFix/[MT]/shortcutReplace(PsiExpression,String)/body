{
  if (!(expression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if (qualifierExpression == null) {
    return false;
  }
  if (classToConstruct.equals("java.lang.Integer")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Integer",PsiType.INT,"intValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Short")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Short",PsiType.SHORT,"shortValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Byte")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Byte",PsiType.BYTE,"byteValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Character")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Character",PsiType.CHAR,"charValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Long")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Long",PsiType.LONG,"longValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Float")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Float",PsiType.FLOAT,"floatValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals("java.lang.Double")) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Double",PsiType.DOUBLE,"doubleValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
  return false;
}
