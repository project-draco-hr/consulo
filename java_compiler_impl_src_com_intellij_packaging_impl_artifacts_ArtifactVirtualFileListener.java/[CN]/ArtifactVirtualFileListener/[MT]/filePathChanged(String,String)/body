{
  final Collection<Artifact> artifacts=myParentPathsToArtifacts.getValue().get(oldPath);
  if (artifacts != null) {
    final ModifiableArtifactModel model=myArtifactManager.createModifiableModel();
    for (    Artifact artifact : artifacts) {
      final Artifact copy=model.getOrCreateModifiableArtifact(artifact);
      ArtifactUtil.processFileOrDirectoryCopyElements(copy,new PackagingElementProcessor<FileOrDirectoryCopyPackagingElement<?>>(){
        @Override public boolean process(        @NotNull List<CompositePackagingElement<?>> parents,        @NotNull FileOrDirectoryCopyPackagingElement<?> element){
          final String path=element.getFilePath();
          if (FileUtil.startsWith(path,oldPath)) {
            element.setFilePath(newPath + path.substring(oldPath.length()));
          }
          return true;
        }
      }
,myArtifactManager.getResolvingContext(),false);
    }
    model.commit();
  }
}
