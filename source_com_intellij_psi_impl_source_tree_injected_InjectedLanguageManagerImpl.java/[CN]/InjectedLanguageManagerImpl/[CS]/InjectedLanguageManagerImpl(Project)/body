{
  myProject=project;
  final ExtensionPoint<ConcatenationAwareInjector> concatPoint=Extensions.getArea(project).getExtensionPoint(CONCATENATION_INJECTOR_EP_NAME);
  concatPoint.addExtensionPointListener(new ExtensionPointListener<ConcatenationAwareInjector>(){
    public void extensionAdded(    ConcatenationAwareInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      registerConcatenationInjector(injector);
    }
    public void extensionRemoved(    ConcatenationAwareInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      unregisterConcatenationInjector(injector);
    }
  }
);
  final ExtensionPoint<MultiHostInjector> multiPoint=Extensions.getArea(project).getExtensionPoint(MULTIHOST_INJECTOR_EP_NAME);
  multiPoint.addExtensionPointListener(new ExtensionPointListener<MultiHostInjector>(){
    public void extensionAdded(    MultiHostInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      registerMultiHostInjector(injector);
    }
    public void extensionRemoved(    MultiHostInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      unregisterMultiHostInjector(injector);
    }
  }
);
  myListener=new ExtensionPointListener<LanguageInjector>(){
    public void extensionAdded(    LanguageInjector extension,    @Nullable PluginDescriptor pluginDescriptor){
      psiManagerInjectorsChanged();
    }
    public void extensionRemoved(    LanguageInjector extension,    @Nullable PluginDescriptor pluginDescriptor){
      psiManagerInjectorsChanged();
    }
  }
;
  ExtensionPoint<LanguageInjector> psiManagerPoint=Extensions.getRootArea().getExtensionPoint(LanguageInjector.EXTENSION_POINT_NAME);
  psiManagerPoint.addExtensionPointListener(myListener);
}
