{
  myProjectListener=new ProjectManagerAdapter(){
    public void projectClosing(    final Project project){
      VirtualFileWindow[] windows;
synchronized (cachedFiles) {
        windows=new VirtualFileWindow[cachedFiles.size()];
        Iterator<VirtualFileWindow> iterator=cachedFiles.iterator();
        int i=0;
        while (iterator.hasNext()) {
          windows[i++]=iterator.next();
        }
      }
      for (      VirtualFileWindow file : windows) {
        if (file == null)         continue;
        DocumentWindow documentWindow=file.getDocumentWindow();
        PsiFile injected=((PsiManagerEx)PsiManager.getInstance(project)).getFileManager().getCachedPsiFile(file);
        if (injected != null) {
          InjectedLanguageUtil.clearCaches(injected,documentWindow);
        }
      }
    }
  }
;
  registerMultiHostInjector(PsiLanguageInjectionHost.class,null,new MultiHostInjector(){
    public void getLanguagesToInject(    @NotNull PsiElement context,    @NotNull final MultiHostRegistrar injectionPlacesRegistrar){
      final PsiLanguageInjectionHost host=(PsiLanguageInjectionHost)context;
      PsiManagerEx psiManager=(PsiManagerEx)context.getManager();
      InjectedLanguagePlaces placesRegistrar=new InjectedLanguagePlaces(){
        public void addPlace(        @NotNull Language language,        @NotNull TextRange rangeInsideHost,        @NonNls @Nullable String prefix,        @NonNls @Nullable String suffix){
          injectionPlacesRegistrar.startInjecting(language).addPlace(prefix,suffix,host,rangeInsideHost).doneInjecting();
        }
      }
;
      for (      LanguageInjector injector : psiManager.getLanguageInjectors()) {
        injector.getLanguagesToInject(host,placesRegistrar);
      }
      for (      LanguageInjector injector : Extensions.getExtensions(LanguageInjector.EXTENSION_POINT_NAME)) {
        injector.getLanguagesToInject(host,placesRegistrar);
      }
    }
  }
);
  registerMultiHostInjector(PsiElement.class,null,new Concatenation2InjectorAdapter());
}
