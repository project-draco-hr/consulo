{
  if (returnType == PsiType.VOID || returnType1 == PsiType.VOID)   return 0;
  TypeKind typeKind=TypeKind.PRIMITIVE;
  if (lambdaType instanceof PsiLambdaExpressionType) {
    typeKind=areLambdaReturnExpressionsPrimitive((PsiLambdaExpressionType)lambdaType);
  }
 else   if (lambdaType instanceof PsiMethodReferenceType) {
    final PsiElement referencedElement=((PsiMethodReferenceType)lambdaType).getExpression().resolve();
    if (referencedElement instanceof PsiMethod && !(((PsiMethod)referencedElement).getReturnType() instanceof PsiPrimitiveType)) {
      typeKind=TypeKind.REFERENCE;
    }
  }
  if (typeKind != TypeKind.NONE_DETERMINED) {
    if (returnType instanceof PsiPrimitiveType) {
      final int moreSpecific=typeKind == TypeKind.PRIMITIVE ? 1 : -1;
      if (!(returnType1 instanceof PsiPrimitiveType)) {
        return -moreSpecific;
      }
 else {
        return TypeConversionUtil.isAssignable(returnType,returnType1) ? moreSpecific : -moreSpecific;
      }
    }
    if (returnType1 instanceof PsiPrimitiveType) {
      return typeKind == TypeKind.PRIMITIVE ? 1 : -1;
    }
  }
  final PsiClassType.ClassResolveResult r=PsiUtil.resolveGenericsClassInType(GenericsUtil.eliminateWildcards(returnType));
  final PsiClass rClass=r.getElement();
  final PsiClassType.ClassResolveResult r1=PsiUtil.resolveGenericsClassInType(GenericsUtil.eliminateWildcards(returnType1));
  final PsiClass rClass1=r1.getElement();
  if (rClass != null && rClass1 != null) {
    if (rClass == rClass1) {
      int moreSpecific=0;
      for (      PsiTypeParameter parameter : rClass.getTypeParameters()) {
        final PsiType t=r.getSubstitutor().substituteWithBoundsPromotion(parameter);
        final PsiType t1=r1.getSubstitutor().substituteWithBoundsPromotion(parameter);
        if (t == null || t1 == null)         continue;
        if (t1.isAssignableFrom(t) && !GenericsUtil.eliminateWildcards(t1).equals(t)) {
          if (moreSpecific == 1) {
            return 0;
          }
          moreSpecific=-1;
        }
 else         if (t.isAssignableFrom(t1) && !GenericsUtil.eliminateWildcards(t).equals(t1)) {
          if (moreSpecific == -1) {
            return 0;
          }
          moreSpecific=1;
        }
 else {
          return 0;
        }
      }
      return moreSpecific;
    }
 else     if (rClass1.isInheritor(rClass,true)) {
      return 1;
    }
 else     if (rClass.isInheritor(rClass1,true)) {
      return -1;
    }
  }
  return 0;
}
