{
  if (myProject != null && myProject.isDisposed())   return;
  final Set<Object> elements=new LinkedHashSet<Object>();
  if (!ourLoadNamesEachTime)   ensureNamesLoaded(myCheckboxState);
  addElementsByPattern(myPattern,elements,myProgress,myCheckboxState);
  if (myProgress.isCanceled()) {
    myShowCardAlarm.cancelAllRequests();
    return;
  }
  if (elements.isEmpty() && !myCheckboxState) {
    myScopeExpanded=true;
    myCheckboxState=true;
    if (!ourLoadNamesEachTime)     ensureNamesLoaded(true);
    addElementsByPattern(myPattern,elements,myProgress,true);
  }
  final String cardToShow=elements.isEmpty() ? NOT_FOUND_CARD : myScopeExpanded ? NOT_FOUND_IN_PROJECT_CARD : CHECK_BOX_CARD;
  showCard(cardToShow,0);
  final boolean edt=myModel instanceof EdtSortingModel;
  final Set<Object> filtered=!edt ? filter(elements) : Collections.emptySet();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (!checkDisposed() && !myProgress.isCanceled()) {
        CalcElementsThread currentBgProcess=myCalcElementsThread;
        LOG.assertTrue(currentBgProcess == CalcElementsThread.this,currentBgProcess);
        myCallback.consume(edt ? filter(elements) : filtered);
      }
    }
  }
,myModalityState);
}
