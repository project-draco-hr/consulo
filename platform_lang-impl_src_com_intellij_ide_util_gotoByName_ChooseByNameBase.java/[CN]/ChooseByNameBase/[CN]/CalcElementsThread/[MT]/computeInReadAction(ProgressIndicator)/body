{
  if (myProject != null && myProject.isDisposed())   return;
  final Set<Object> elements=new LinkedHashSet<Object>();
  boolean scopeExpanded=fillWithScopeExpansion(elements,myPattern);
  String lowerCased=patternToLowerCase(myPattern);
  if (elements.isEmpty() && !lowerCased.equals(myPattern)) {
    scopeExpanded=fillWithScopeExpansion(elements,lowerCased);
  }
  final String cardToShow=elements.isEmpty() ? NOT_FOUND_CARD : scopeExpanded ? NOT_FOUND_IN_PROJECT_CARD : CHECK_BOX_CARD;
  final boolean edt=myModel instanceof EdtSortingModel;
  final Set<Object> filtered=!edt ? filter(elements) : Collections.emptySet();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (!checkDisposed() && !myProgress.isCanceled()) {
        CalcElementsThread currentBgProcess=myCalcElementsThread;
        LOG.assertTrue(currentBgProcess == CalcElementsThread.this,currentBgProcess);
        showCard(cardToShow,0);
        myCallback.consume(edt ? filter(elements) : filtered);
      }
    }
  }
,myModalityState);
}
