{
  showCard(SEARCHING_CARD,200);
  ProgressManager.getInstance().runProcess(new Runnable(){
    @Override public void run(){
      final Set<Object> elements=new LinkedHashSet<Object>();
      Runnable calculation=new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              ApplicationAdapter listener=new ApplicationAdapter(){
                @Override public void beforeWriteActionStart(                Object action){
                  cancel();
                  scheduleRestart();
                  ApplicationManager.getApplication().removeApplicationListener(this);
                }
              }
;
              ApplicationManager.getApplication().addApplicationListener(listener);
              try {
                boolean everywhere=myCheckboxState;
                if (!ourLoadNamesEachTime)                 ensureNamesLoaded(everywhere);
                addElementsByPattern(myPattern,elements,myCancelled,everywhere);
              }
 catch (              ProcessCanceledException e) {
              }
 finally {
                ApplicationManager.getApplication().removeApplicationListener(listener);
              }
            }
          }
);
        }
      }
;
      calculation.run();
      if (myCancelled.isCanceled()) {
        myShowCardAlarm.cancelAllRequests();
        return;
      }
      if (elements.isEmpty() && !myCheckboxState) {
        myScopeExpanded=true;
        myCheckboxState=true;
        calculation.run();
      }
      final String cardToShow=elements.isEmpty() ? NOT_FOUND_CARD : myScopeExpanded ? NOT_FOUND_IN_PROJECT_CARD : CHECK_BOX_CARD;
      showCard(cardToShow,0);
      final boolean edt=myModel instanceof EdtSortingModel;
      final Set<Object> filtered=!edt ? filter(elements) : Collections.emptySet();
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (!myCancelled.isCanceled()) {
            LOG.assertTrue(myCalcElementsThread == CalcElementsThread.this);
            myCallback.consume(edt ? filter(elements) : filtered);
          }
        }
      }
,myModalityState);
    }
  }
,myCancelled);
}
