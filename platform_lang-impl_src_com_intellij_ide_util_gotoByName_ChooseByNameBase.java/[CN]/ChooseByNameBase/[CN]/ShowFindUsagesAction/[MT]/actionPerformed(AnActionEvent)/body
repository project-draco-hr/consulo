{
  cancelCalcElementsThread();
  cancelListUpdater();
  final UsageViewPresentation presentation=new UsageViewPresentation();
  final String pattern=myFindUsagesTitle + " \'" + myTextField.getText().trim()+ "\'";
  presentation.setCodeUsagesString(pattern);
  presentation.setTabName(pattern);
  presentation.setTabText(pattern);
  final PsiElement[] elements=getElements();
  final UsageInfo[] usages=new UsageInfo[elements.length];
  for (int i=0; i < elements.length; i++) {
    usages[i]=new UsageInfo(elements[i]);
  }
  final UsageInfoToUsageConverter.TargetElementsDescriptor descriptor=new UsageInfoToUsageConverter.TargetElementsDescriptor(elements);
  final UsageViewImpl usageView=(UsageViewImpl)UsageViewManager.getInstance(myProject).showUsages(UsageTarget.EMPTY_ARRAY,UsageInfoToUsageConverter.convert(descriptor,usages),presentation);
  if (myListModel.contains(EXTRA_ELEM)) {
    final String text=myTextField.getText();
    final boolean checkboxState=myCheckBox.isSelected();
    final HashSet<Object> elementsArray=new HashSet<Object>();
    hideHint();
    ProgressManager.getInstance().run(new Task.Modal(myProject,pattern,true){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        ensureNamesLoaded(checkboxState);
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          private ChooseByNameBase.CalcElementsThread myCalcElementsThread;
          public void run(){
            myCalcElementsThread=new CalcElementsThread(text,checkboxState,null,ModalityState.NON_MODAL,true){
              @Override protected boolean isOverflow(              Set<Object> elementsArray){
                return false;
              }
            }
;
            myCalcElementsThread.addElementsByPattern(elementsArray,text);
          }
        }
);
      }
      @Override public void onSuccess(){
        for (        Object o : elementsArray) {
          if (o instanceof PsiElement) {
            if (ArrayUtil.find(elements,(PsiElement)o) > -1) {
              continue;
            }
            usageView.appendUsage(UsageInfoToUsageConverter.convert(descriptor,new UsageInfo((PsiElement)o)));
          }
        }
      }
      @Override public void onCancel(){
        if (myCalcElementsThread != null) {
          myCalcElementsThread.cancel();
        }
        usageView.close();
      }
    }
);
  }
 else {
    hideHint();
  }
}
