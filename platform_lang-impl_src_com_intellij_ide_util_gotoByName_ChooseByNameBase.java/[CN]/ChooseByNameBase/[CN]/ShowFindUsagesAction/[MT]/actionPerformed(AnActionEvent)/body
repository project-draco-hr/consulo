{
  cancelCalcElementsThread();
  cancelListUpdater();
  final UsageViewPresentation presentation=new UsageViewPresentation();
  final String prefixPattern=myFindUsagesTitle + " \'" + myTextField.getText().trim()+ "\'";
  final String nonPrefixPattern=myFindUsagesTitle + " \'*" + myTextField.getText().trim()+ "*\'";
  presentation.setCodeUsagesString(prefixPattern);
  presentation.setDynamicUsagesString(nonPrefixPattern);
  presentation.setTabName(prefixPattern);
  presentation.setTabText(prefixPattern);
  presentation.setTargetsNodeText("Unsorted " + StringUtil.toLowerCase(prefixPattern.toLowerCase()));
  final Object[][] elements=getElements();
  final List<PsiElement> targets=new ArrayList<PsiElement>();
  final List<Usage> usages=new ArrayList<Usage>();
  fillUsages(Arrays.asList(elements[0]),usages,targets,false);
  fillUsages(Arrays.asList(elements[1]),usages,targets,true);
  if (myListModel.contains(EXTRA_ELEM)) {
    final String text=myTextField.getText();
    final boolean checkboxState=myCheckBox.isSelected();
    final LinkedHashSet<Object> prefixMatchElementsArray=new LinkedHashSet<Object>();
    final LinkedHashSet<Object> nonPrefixMatchElementsArray=new LinkedHashSet<Object>();
    hideHint();
    ProgressManager.getInstance().run(new Task.Modal(myProject,prefixPattern,true){
      private ChooseByNameBase.CalcElementsThread myCalcElementsThread;
      @Override public void run(      @NotNull final ProgressIndicator indicator){
        ensureNamesLoaded(checkboxState);
        indicator.setIndeterminate(true);
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          @Override public void run(){
            final boolean[] overFlow=new boolean[]{false};
            myCalcElementsThread=new CalcElementsThread(text,checkboxState,null,ModalityState.NON_MODAL,true){
              @Override protected boolean isOverflow(              @NotNull Set<Object> elementsArray){
                if (elementsArray.size() > UsageLimitUtil.USAGES_LIMIT - myMaximumListSizeLimit) {
                  final int ret=UsageLimitUtil.showTooManyUsagesWarning(myProject,UsageViewBundle.message("find.excessive.usage.count.prompt",elementsArray.size() + myMaximumListSizeLimit));
                  if (ret != 0) {
                    overFlow[0]=true;
                    return true;
                  }
                }
                return false;
              }
            }
;
            boolean anyPlace=isSearchInAnyPlace();
            setSearchInAnyPlace(false);
            myCalcElementsThread.addElementsByPattern(text,prefixMatchElementsArray,new Computable<Boolean>(){
              @Override @NotNull public Boolean compute(){
                return false;
              }
            }
);
            setSearchInAnyPlace(anyPlace);
            if (anyPlace && !overFlow[0]) {
              myCalcElementsThread.addElementsByPattern(text,nonPrefixMatchElementsArray,new Computable<Boolean>(){
                @Override @NotNull public Boolean compute(){
                  return false;
                }
              }
);
              nonPrefixMatchElementsArray.removeAll(prefixMatchElementsArray);
            }
            indicator.setText("Prepare...");
            fillUsages(prefixMatchElementsArray,usages,targets,false);
            fillUsages(nonPrefixMatchElementsArray,usages,targets,true);
          }
        }
);
      }
      @Override public void onSuccess(){
        showUsageView(targets,usages,presentation);
      }
      @Override public void onCancel(){
        if (myCalcElementsThread != null) {
          myCalcElementsThread.cancel();
        }
      }
    }
);
  }
 else {
    hideHint();
    showUsageView(targets,usages,presentation);
  }
}
