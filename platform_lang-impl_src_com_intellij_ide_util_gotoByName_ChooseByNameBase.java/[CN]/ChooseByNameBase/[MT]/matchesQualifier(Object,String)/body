{
  final String name=myModel.getFullName(element);
  if (name == null)   return false;
  final List<String> suspects=split(name);
  final List<Pair<String,Matcher>> patternsAndMatchers=ContainerUtil.map2List(split(qualifierPattern),new Function<String,Pair<String,Matcher>>(){
    public Pair<String,Matcher> fun(    String s){
      final String pattern=getNamePattern(s);
      final Matcher matcher=buildPatternMatcher(pattern);
      return new Pair<String,Matcher>(pattern,matcher);
    }
  }
);
  int matchPosition=0;
  try {
    patterns:     for (    Pair<String,Matcher> patternAndMatcher : patternsAndMatchers) {
      final String pattern=patternAndMatcher.first;
      final Matcher matcher=patternAndMatcher.second;
      if (pattern.length() > 0) {
        for (int j=matchPosition; j < suspects.size() - 1; j++) {
          String suspect=suspects.get(j);
          if (matches(pattern,matcher,suspect)) {
            matchPosition=j + 1;
            continue patterns;
          }
        }
        return false;
      }
    }
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
