{
  myPreviouslyFocusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);
  myActionListener=callback;
  myTextFieldPanel=new JPanelProvider();
  myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel,BoxLayout.Y_AXIS));
  final JPanel hBox=new JPanel();
  hBox.setLayout(new BoxLayout(hBox,BoxLayout.X_AXIS));
  JPanel caption2Tools=new JPanel(new BorderLayout());
  if (myModel.getPromptText() != null) {
    JLabel label=new JLabel(myModel.getPromptText());
    label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));
    caption2Tools.add(label,BorderLayout.WEST);
  }
  caption2Tools.add(hBox,BorderLayout.EAST);
  myCard=new CardLayout();
  myCardContainer=new JPanel(myCard);
  myCardContainer.setBorder(BorderFactory.createEmptyBorder(0,0,0,4));
  final String checkBoxName=myModel.getCheckBoxName();
  myCheckBox=new JCheckBox(checkBoxName != null ? checkBoxName : "");
  myCheckBox.setAlignmentX(SwingConstants.RIGHT);
  if (!SystemInfo.isMac) {
    myCheckBox.setBorder(null);
  }
  myCheckBox.setSelected(myModel.loadInitialCheckBoxState());
  if (checkBoxName == null) {
    myCheckBox.setVisible(false);
  }
  addCard(myCheckBox,CHECK_BOX_CARD);
  addCard(new HintLabel(myModel.getNotInMessage()),NOT_FOUND_IN_PROJECT_CARD);
  addCard(new HintLabel(IdeBundle.message("label.choosebyname.no.matches.found")),NOT_FOUND_CARD);
  JPanel searching=new JPanel(new BorderLayout(5,0));
  searching.add(new AsyncProcessIcon("searching"),BorderLayout.WEST);
  searching.add(new HintLabel(IdeBundle.message("label.choosebyname.searching")),BorderLayout.CENTER);
  addCard(searching,SEARCHING_CARD);
  myCard.show(myCardContainer,CHECK_BOX_CARD);
  if (isCheckboxVisible()) {
    hBox.add(myCardContainer);
  }
  final DefaultActionGroup group=new DefaultActionGroup();
  group.add(new ShowFindUsagesAction(){
    @Override public PsiElement[] getElements(){
      if (myListModel == null)       return PsiElement.EMPTY_ARRAY;
      final Object[] objects=myListModel.toArray();
      final List<PsiElement> psiElements=new ArrayList<PsiElement>();
      for (      Object object : objects) {
        if (object instanceof PsiElement) {
          psiElements.add((PsiElement)object);
        }
 else         if (object instanceof DataProvider) {
          final PsiElement psi=LangDataKeys.PSI_ELEMENT.getData((DataProvider)object);
          if (psi != null) {
            psiElements.add(psi);
          }
        }
      }
      return psiElements.toArray(new PsiElement[psiElements.size()]);
    }
  }
);
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  actionToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  final JComponent toolbarComponent=actionToolbar.getComponent();
  toolbarComponent.setBorder(null);
  hBox.add(toolbarComponent);
  if (myToolArea != null) {
    hBox.add(myToolArea);
  }
  myTextFieldPanel.add(caption2Tools);
  myHistory=new ArrayList<Pair<String,Integer>>();
  myFuture=new ArrayList<Pair<String,Integer>>();
  myTextField=new MyTextField();
  myTextField.setText(myInitialText);
  if (myPreselectInitialText) {
    myTextField.select(0,myInitialText.length());
  }
  final ActionMap actionMap=new ActionMap();
  actionMap.setParent(myTextField.getActionMap());
  actionMap.put(DefaultEditorKit.copyAction,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTextField.getSelectedText() != null) {
        actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);
        return;
      }
      final Object chosenElement=getChosenElement();
      if (chosenElement instanceof PsiElement) {
        CopyReferenceAction.doCopy((PsiElement)chosenElement,myProject);
      }
    }
  }
);
  myTextField.setActionMap(actionMap);
  myTextFieldPanel.add(myTextField);
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  Font editorFont=new Font(scheme.getEditorFontName(),Font.PLAIN,scheme.getEditorFontSize());
  myTextField.setFont(editorFont);
  if (checkBoxName != null) {
    if (myCheckBox != null) {
      new AnAction("change goto check box",null,null){
        @Override public void actionPerformed(        AnActionEvent e){
          myCheckBox.setSelected(!myCheckBox.isSelected());
        }
      }
.registerCustomShortcutSet(myCheckBoxShortcut,myTextField);
    }
  }
  if (isCloseByFocusLost()) {
    myTextField.addFocusListener(new FocusAdapter(){
      public void focusLost(      final FocusEvent e){
        myHideAlarm.addRequest(new Runnable(){
          public void run(){
            JBPopup popup=JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());
            if (popup != null) {
              popup.addListener(new JBPopupListener.Adapter(){
                @Override public void onClosed(                LightweightWindowEvent event){
                  if (event.isOk()) {
                    hideHint();
                  }
                }
              }
);
            }
 else {
              Component oppositeComponent=e.getOppositeComponent();
              if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList,oppositeComponent))) {
                return;
              }
              hideHint();
            }
          }
        }
,200);
      }
    }
);
  }
  myCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      rebuildList(false);
    }
  }
);
  myCheckBox.setFocusable(false);
  myTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      clearPosponedOkAction(false);
      rebuildList(false);
    }
  }
);
  final Set<KeyStroke> upShortcuts=getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_UP);
  final Set<KeyStroke> downShortcuts=getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN);
  myTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) {
        myClosedByShiftEnter=true;
        close(true);
      }
      if (!myListScrollPane.isVisible()) {
        return;
      }
      final int keyCode;
      KeyStroke stroke=KeyStroke.getKeyStrokeForEvent(e);
      if (upShortcuts.contains(stroke)) {
        keyCode=KeyEvent.VK_UP;
      }
 else       if (downShortcuts.contains(stroke)) {
        keyCode=KeyEvent.VK_DOWN;
      }
 else {
        keyCode=e.getKeyCode();
      }
switch (keyCode) {
case KeyEvent.VK_DOWN:
        ListScrollingUtil.moveDown(myList,e.getModifiersEx());
      break;
case KeyEvent.VK_UP:
    ListScrollingUtil.moveUp(myList,e.getModifiersEx());
  break;
case KeyEvent.VK_PAGE_UP:
ListScrollingUtil.movePageUp(myList);
break;
case KeyEvent.VK_PAGE_DOWN:
ListScrollingUtil.movePageDown(myList);
break;
case KeyEvent.VK_TAB:
close(true);
break;
case KeyEvent.VK_ENTER:
if (myList.getSelectedValue() == EXTRA_ELEM) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current(),e);
e.consume();
}
break;
}
}
}
);
myTextField.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent actionEvent){
doClose(true);
}
}
);
myListModel=new DefaultListModel();
myList=new JBList(myListModel);
myList.setFocusable(false);
myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_SELECTION);
myList.addMouseListener(new MouseAdapter(){
public void mouseClicked(MouseEvent e){
if (!myTextField.hasFocus()) {
myTextField.requestFocus();
}
if (e.getClickCount() == 2) {
if (myList.getSelectedValue() == EXTRA_ELEM) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current(),e);
e.consume();
}
 else {
doClose(true);
}
}
}
}
);
myList.setCellRenderer(myModel.getListCellRenderer());
myList.setFont(editorFont);
myList.addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
choosenElementMightChange();
updateDocumentation();
}
}
);
myListScrollPane=ScrollPaneFactory.createScrollPane(myList);
myListScrollPane.setViewportBorder(new EmptyBorder(0,0,0,0));
myTextFieldPanel.setBorder(new EmptyBorder(2,2,2,2));
showTextFieldPanel();
if (modalityState != null) {
rebuildList(myInitialIndex,0,null,modalityState,null);
}
}
