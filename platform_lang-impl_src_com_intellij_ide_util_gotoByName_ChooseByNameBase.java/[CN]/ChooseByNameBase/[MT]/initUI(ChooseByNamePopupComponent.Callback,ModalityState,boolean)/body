{
  myPreviouslyFocusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);
  myActionListener=callback;
  myTextFieldPanel=new JPanelProvider();
  myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel,BoxLayout.Y_AXIS));
  final JPanel hBox=new JPanel();
  hBox.setLayout(new BoxLayout(hBox,BoxLayout.X_AXIS));
  JPanel caption2Tools=new JPanel(new BorderLayout());
  if (myModel.getPromptText() != null) {
    JLabel label=new JLabel(myModel.getPromptText());
    label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));
    caption2Tools.add(label,BorderLayout.WEST);
  }
  GridBagLayout gb=new GridBagLayout();
  JPanel eastWrapper=new JPanel(gb);
  gb.setConstraints(hBox,new GridBagConstraints(0,0,0,0,1,1,GridBagConstraints.SOUTHEAST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  eastWrapper.add(hBox);
  caption2Tools.add(eastWrapper,BorderLayout.CENTER);
  myCard=new CardLayout();
  myCardContainer=new JPanel(myCard);
  final JPanel checkBoxPanel=new JPanel();
  myCheckBox=new JCheckBox(myModel.getCheckBoxName());
  myCheckBox.setAlignmentX(SwingConstants.RIGHT);
  myCheckBox.setSelected(myModel.loadInitialCheckBoxState());
  if (myModel.getPromptText() != null) {
    checkBoxPanel.setLayout(new BoxLayout(checkBoxPanel,BoxLayout.X_AXIS));
    checkBoxPanel.add(myCheckBox);
  }
 else {
    checkBoxPanel.setLayout(new BoxLayout(checkBoxPanel,BoxLayout.LINE_AXIS));
    checkBoxPanel.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    checkBoxPanel.add(myCheckBox);
  }
  checkBoxPanel.setVisible(myModel.getCheckBoxName() != null);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(checkBoxPanel,BorderLayout.CENTER);
  myCardContainer.add(panel,CHECK_BOX_CARD);
  myCardContainer.add(new HintLabel(myModel.getNotInMessage()),NOT_FOUND_IN_PROJECT_CARD);
  myCardContainer.add(new HintLabel(IdeBundle.message("label.choosebyname.no.matches.found")),NOT_FOUND_CARD);
  myCardContainer.add(new HintLabel(IdeBundle.message("label.choosebyname.searching")),SEARCHING_CARD);
  myCard.show(myCardContainer,CHECK_BOX_CARD);
  if (isCheckboxVisible()) {
    hBox.add(myCardContainer);
  }
  if (myToolArea != null) {
    hBox.add(Box.createHorizontalStrut(5));
    hBox.add(myToolArea);
  }
  hBox.add(Box.createHorizontalStrut(5));
  myTextFieldPanel.add(caption2Tools);
  myHistory=new ArrayList<Pair<String,Integer>>();
  myFuture=new ArrayList<Pair<String,Integer>>();
  myTextField=new MyTextField();
  myTextField.setText(myInitialText);
  if (myPreselectInitialText) {
    myTextField.select(0,myInitialText.length());
  }
  final ActionMap actionMap=new ActionMap();
  actionMap.setParent(myTextField.getActionMap());
  actionMap.put(DefaultEditorKit.copyAction,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTextField.getSelectedText() != null) {
        actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e);
        return;
      }
      final Object chosenElement=getChosenElement();
      if (chosenElement instanceof PsiElement) {
        CopyReferenceAction.doCopy((PsiElement)chosenElement,myProject);
      }
    }
  }
);
  myTextField.setActionMap(actionMap);
  myTextFieldPanel.add(myTextField);
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  Font editorFont=new Font(scheme.getEditorFontName(),Font.PLAIN,scheme.getEditorFontSize());
  myTextField.setFont(editorFont);
  if (isCloseByFocusLost()) {
    myTextField.addFocusListener(new FocusAdapter(){
      public void focusLost(      final FocusEvent e){
        myHideAlarm.addRequest(new Runnable(){
          public void run(){
            JBPopup popup=JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent());
            if (popup != null) {
              popup.addListener(new JBPopupListener.Adapter(){
                @Override public void onClosed(                LightweightWindowEvent event){
                  if (event.isOk()) {
                    hideHint();
                  }
                }
              }
);
            }
 else {
              hideHint();
            }
          }
        }
,200);
      }
    }
);
  }
  myCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      rebuildList(false);
    }
  }
);
  myCheckBox.setFocusable(false);
  myTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      clearPosponedOkAction(false);
      rebuildList(false);
    }
  }
);
  myTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
        myClosedByShiftEnter=true;
        close(true);
      }
      if (!myListScrollPane.isVisible()) {
        return;
      }
      final int keyCode=e.getKeyCode();
switch (keyCode) {
case KeyEvent.VK_DOWN:
        ListScrollingUtil.moveDown(myList,e.getModifiersEx());
      break;
case KeyEvent.VK_UP:
    ListScrollingUtil.moveUp(myList,e.getModifiersEx());
  break;
case KeyEvent.VK_PAGE_UP:
ListScrollingUtil.movePageUp(myList);
break;
case KeyEvent.VK_PAGE_DOWN:
ListScrollingUtil.movePageDown(myList);
break;
case KeyEvent.VK_TAB:
close(true);
break;
case KeyEvent.VK_ENTER:
if (myList.getSelectedValue() == EXTRA_ELEM) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current(),e);
e.consume();
}
break;
}
}
}
);
myTextField.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent actionEvent){
doClose(true);
}
}
);
myListModel=new DefaultListModel();
myList=new JBList(myListModel);
myList.setFocusable(false);
myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_SELECTION);
myList.addMouseListener(new MouseAdapter(){
public void mouseClicked(MouseEvent e){
if (!myTextField.hasFocus()) {
myTextField.requestFocus();
}
if (e.getClickCount() == 2) {
if (myList.getSelectedValue() == EXTRA_ELEM) {
myMaximumListSizeLimit+=MAXIMUM_LIST_SIZE_LIMIT;
rebuildList(myList.getSelectedIndex(),REBUILD_DELAY,null,ModalityState.current(),e);
e.consume();
}
 else {
doClose(true);
}
}
}
}
);
myList.setCellRenderer(myModel.getListCellRenderer());
myList.setFont(editorFont);
myList.addListSelectionListener(new ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
choosenElementMightChange();
updateDocumentation();
}
}
);
myListScrollPane=ScrollPaneFactory.createScrollPane(myList);
myListScrollPane.setViewportBorder(new EmptyBorder(0,0,0,0));
myTextFieldPanel.setBorder(new EmptyBorder(2,2,2,2));
showTextFieldPanel();
if (modalityState != null) {
rebuildList(myInitialIndex,0,null,modalityState,null);
}
}
