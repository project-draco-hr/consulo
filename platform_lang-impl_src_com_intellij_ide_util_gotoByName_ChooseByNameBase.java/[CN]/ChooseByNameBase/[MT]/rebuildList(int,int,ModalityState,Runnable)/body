{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (!myInitialized) {
    return;
  }
  myAlarm.cancelAllRequests();
  if (delay > 0) {
    myAlarm.addRequest(new Runnable(){
      @Override public void run(){
        rebuildList(pos,0,modalityState,postRunnable);
      }
    }
,delay,ModalityState.stateForComponent(myTextField));
    return;
  }
  myListUpdater.cancelAll();
  final CalcElementsThread calcElementsThread=myCalcElementsThread;
  if (calcElementsThread != null) {
    calcElementsThread.cancel();
  }
  final String text=getTrimmedText();
  if (!canShowListForEmptyPattern() && text.isEmpty()) {
    myListModel.clear();
    hideList();
    myTextFieldPanel.hideHint();
    myCard.show(myCardContainer,CHECK_BOX_CARD);
    return;
  }
  ListCellRenderer cellRenderer=myList.getCellRenderer();
  if (cellRenderer instanceof ExpandedItemListCellRendererWrapper) {
    cellRenderer=((ExpandedItemListCellRendererWrapper)cellRenderer).getWrappee();
  }
  if (cellRenderer instanceof MatcherHolder) {
    final String pattern=patternToLowerCase(transformPattern(text));
    final Matcher matcher=buildPatternMatcher(isSearchInAnyPlace() ? "*" + pattern : pattern);
    ((MatcherHolder)cellRenderer).setPatternMatcher(matcher);
  }
  scheduleCalcElements(text,myCheckBox.isSelected(),modalityState,new Consumer<Set<?>>(){
    @Override public void consume(    Set<?> elements){
      ApplicationManager.getApplication().assertIsDispatchThread();
      backgroundCalculationFinished(elements,pos);
      if (postRunnable != null) {
        postRunnable.run();
      }
    }
  }
);
}
