{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (!myInitialized) {
    return;
  }
  myAlarm.cancelAllRequests();
  myListUpdater.cancelAll();
  final CalcElementsThread calcElementsThread=myCalcElementsThread;
  if (calcElementsThread != null) {
    calcElementsThread.cancel();
  }
  final String text=myTextField.getText();
  if (!canShowListForEmptyPattern() && (text == null || text.trim().isEmpty())) {
    myListModel.clear();
    hideList();
    myTextFieldPanel.hideHint();
    myCard.show(myCardContainer,CHECK_BOX_CARD);
    return;
  }
  ListCellRenderer cellRenderer=myList.getCellRenderer();
  if (cellRenderer instanceof ExpandedItemListCellRendererWrapper) {
    cellRenderer=((ExpandedItemListCellRendererWrapper)cellRenderer).getWrappee();
  }
  if (cellRenderer instanceof MatcherHolder) {
    final String pattern=transformPattern(text);
    final Matcher matcher=buildPatternMatcher(isSearchInAnyPlace() ? "*" + pattern : pattern);
    ((MatcherHolder)cellRenderer).setPatternMatcher(matcher);
  }
  final Runnable request=new Runnable(){
    @Override public void run(){
      scheduleCalcElements(text,myCheckBox.isSelected(),modalityState,new Consumer<Set<?>>(){
        @Override public void consume(        Set<?> elements){
          ApplicationManager.getApplication().assertIsDispatchThread();
          if (checkDisposed()) {
            return;
          }
          backgroundCalculationFinished(elements,pos);
          if (postRunnable != null) {
            postRunnable.run();
          }
        }
      }
);
    }
  }
;
  if (delay > 0) {
    myAlarm.addRequest(request,delay,ModalityState.stateForComponent(myTextField));
  }
 else {
    request.run();
  }
}
