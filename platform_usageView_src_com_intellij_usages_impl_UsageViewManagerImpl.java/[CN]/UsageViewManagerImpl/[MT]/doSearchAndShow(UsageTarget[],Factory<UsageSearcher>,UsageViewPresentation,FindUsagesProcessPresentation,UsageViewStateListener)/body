{
  final SearchScope searchScopeToWarnOfFallingOutOf=getMaxSearchScopeToWarnOfFallingOutOf(searchFor);
  final AtomicReference<UsageViewImpl> usageViewRef=new AtomicReference<UsageViewImpl>();
  Task.Backgroundable task=new Task.Backgroundable(myProject,getProgressTitle(presentation),true,new SearchInBackgroundOption()){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      new SearchForUsagesRunnable(UsageViewManagerImpl.this,UsageViewManagerImpl.this.myProject,usageViewRef,presentation,searchFor,searcherFactory,processPresentation,searchScopeToWarnOfFallingOutOf,listener).run();
    }
    @NotNull @Override public DumbModeAction getDumbModeAction(){
      return DumbModeAction.CANCEL;
    }
    @Override @Nullable public NotificationInfo getNotificationInfo(){
      String notification=usageViewRef.get() != null ? usageViewRef.get().getUsagesCount() + " Usage(s) Found" : "No Usages Found";
      return new NotificationInfo("Find Usages","Find Usages Finished",notification);
    }
  }
;
  ProgressManager.getInstance().run(task);
  return usageViewRef.get();
}
