{
  if (tooManyUsages.get() == 1) {
    try {
      waitWhileUserClick.await(1,TimeUnit.SECONDS);
    }
 catch (    InterruptedException ignored) {
    }
  }
  boolean incrementCounter=!isSelfUsage(usage,mySearchFor);
  if (incrementCounter) {
    final int usageCount=usageCountWithoutDefinition.incrementAndGet();
    if (usageCount > UsageLimitUtil.USAGES_LIMIT && tooManyUsages.get() == 0 && tooManyUsages.compareAndSet(0,1)) {
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (searchHasBeenCancelled() || indicator != null && indicator.isCanceled())           return;
          String message=UsageViewBundle.message("find.excessive.usage.count.prompt",usageCountWithoutDefinition.get());
          int ret=UsageLimitUtil.showTooManyUsagesWarning(myProject,message);
          if (ret != 0) {
            setCurrentSearchCancelled(true);
          }
          waitWhileUserClick.countDown();
        }
      }
);
    }
    if (usageView != null) {
      usageView.appendUsageLater(usage);
    }
    return usageCount;
  }
  return -1;
}
