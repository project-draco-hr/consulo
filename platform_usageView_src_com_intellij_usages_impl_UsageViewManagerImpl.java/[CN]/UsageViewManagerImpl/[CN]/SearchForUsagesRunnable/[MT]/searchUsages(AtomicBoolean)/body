{
  ProgressIndicator indicator=ProgressWrapper.unwrap(ProgressManager.getInstance().getProgressIndicator());
  TooManyUsagesStatus.createFor(indicator);
  Alarm findUsagesStartedBalloon=new Alarm();
  findUsagesStartedBalloon.addRequest(new Runnable(){
    @Override public void run(){
      String balloon=UsageViewBundle.message("progress.searching.for",StringUtil.escapeXml(myPresentation.getUsagesString()));
      notifyByFindBalloon(null,MessageType.WARNING,myProcessPresentation,UsageViewManagerImpl.this.myProject,balloon);
      findStartedBalloonShown.set(true);
    }
  }
,300,ModalityState.NON_MODAL);
  UsageSearcher usageSearcher=mySearcherFactory.create();
  usageSearcher.generate(new Processor<Usage>(){
    @Override public boolean process(    final Usage usage){
      ProgressIndicator indicator=ProgressWrapper.unwrap(ProgressManager.getInstance().getProgressIndicator());
      if (indicator != null && indicator.isCanceled())       return false;
      TooManyUsagesStatus tooManyUsagesStatus=TooManyUsagesStatus.getFrom(indicator);
      boolean incrementCounter=!isSelfUsage(usage,mySearchFor);
      if (incrementCounter) {
        final int usageCount=myUsageCountWithoutDefinition.incrementAndGet();
        if (usageCount == 1 && !myProcessPresentation.isShowPanelIfOnlyOneUsage()) {
          myFirstUsage.compareAndSet(null,usage);
        }
        final UsageViewImpl usageView=getUsageView(indicator);
        if (usageCount > UsageLimitUtil.USAGES_LIMIT && tooManyUsagesStatus.switchTooManyUsagesStatus()) {
          showTooManyUsagesWarning(myProject,tooManyUsagesStatus,indicator,myPresentation,usageCount,usageView);
        }
        if (usageView != null) {
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              usageView.appendUsage(usage);
            }
          }
);
        }
      }
      return indicator == null || !indicator.isCanceled();
    }
  }
);
  if (getUsageView(indicator) != null) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        showToolWindow(true);
      }
    }
,myProject.getDisposed());
  }
  Disposer.dispose(findUsagesStartedBalloon);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (findStartedBalloonShown.get()) {
        Balloon balloon=ToolWindowManager.getInstance(myProject).getToolWindowBalloon(ToolWindowId.FIND);
        if (balloon != null) {
          balloon.hide();
        }
      }
    }
  }
,myProject.getDisposed());
}
