{
  UsageSearcher usageSearcher=mySearcherFactory.create();
  final AtomicInteger tooManyUsages=new AtomicInteger();
  final CountDownLatch waitWhileUserClick=new CountDownLatch(1);
  usageSearcher.generate(new Processor<Usage>(){
    public boolean process(    final Usage usage){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      if (searchHasBeenCancelled() || indicator != null && indicator.isCanceled())       return false;
      final int usageCount=appendUsageWhenNotTooMany(usage,mySearchFor,getUsageView(),indicator,tooManyUsages,waitWhileUserClick,myUsageCountWithoutDefinition);
      if (usageCount == 1 && !myProcessPresentation.isShowPanelIfOnlyOneUsage()) {
        myFirstUsage.compareAndSet(null,usage);
      }
      return indicator == null || !indicator.isCanceled();
    }
  }
);
  if (getUsageView() != null) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        showToolWindow(true);
      }
    }
,myProject.getDisposed());
  }
}
