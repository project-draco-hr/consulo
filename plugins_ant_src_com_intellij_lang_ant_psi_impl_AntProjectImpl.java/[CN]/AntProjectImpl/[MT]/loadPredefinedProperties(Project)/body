{
  Hashtable ht=project.getProperties();
  final Enumeration props=ht.keys();
  @NonNls final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  builder.append("<project name=\"fake\">");
  try {
    while (props.hasMoreElements()) {
      final String name=(String)props.nextElement();
      final String value=(String)ht.get(name);
      builder.append("<property name=\"");
      builder.append(name);
      builder.append("\" value=\"");
      builder.append(value);
      builder.append("\"/>");
    }
    final Map<String,String> envMap=System.getenv();
    for (    String name : envMap.keySet()) {
      final String value=envMap.get(name);
      builder.append("<property name=\"");
      builder.append(name);
      builder.append("\" value=\"");
      builder.append(value);
      builder.append("\"/>");
    }
    String basedir=getBaseDir();
    if (basedir == null) {
      basedir=".";
    }
    builder.append("<property name=\"basedir\" value=\"");
    builder.append(basedir);
    builder.append("\"/>");
    final VirtualFile file=getContainingFile().getVirtualFile();
    if (file != null) {
      builder.append("<property name=\"ant.file\" value=\"");
      builder.append(file.getPath());
      builder.append("\"/>");
    }
    builder.append("<property name=\"ant.version\" value=\"1.6");
    builder.append("\"/>");
    builder.append("<property name=\"ant.project.name\" value=\"");
    final String name=getName();
    builder.append((name == null) ? "" : name);
    builder.append("\"/>");
    builder.append("<property name=\"ant.java.version\" value=\"");
    builder.append(SystemInfo.JAVA_VERSION);
    builder.append("\"/>");
    builder.append("</project>");
    final PsiElementFactory elementFactory=getManager().getElementFactory();
    final XmlFile fakeFile=(XmlFile)elementFactory.createFileFromText("dummy.xml",builder.toString());
    final XmlDocument document=fakeFile.getDocument();
    if (document == null)     return;
    final XmlTag rootTag=document.getRootTag();
    if (rootTag == null)     return;
    AntTypeDefinition propertyDef=getAntFile().getBaseTypeDefinition(Property.class.getName());
    AntProject fakeProject=new AntProjectImpl(null,rootTag,myDefinition);
    for (    XmlTag tag : rootTag.getSubTags()) {
      final AntPropertyImpl property=new AntPropertyImpl(fakeProject,tag,propertyDef){
        public PsiFile getContainingFile(){
          return getSourceElement().getContainingFile();
        }
      }
;
      myPredefinedProps.add(property);
    }
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
  setPredefinedProperties();
}
