{
  if (myTaskDefinitions != null)   return myTaskDefinitions.get(taskClassName);
  myTaskDefinitions=new HashMap<String,AntTaskDefinition>();
  myTaskIdToClassMap=new HashMap<String,String>();
  Project project=new Project();
  project.init();
  final Hashtable ht=project.getTaskDefinitions();
  if (ht == null)   return null;
  final Enumeration tasks=ht.keys();
  while (tasks.hasMoreElements()) {
    final String taskName=(String)tasks.nextElement();
    final Class taskClass=(Class)ht.get(taskName);
    final IntrospectionHelper helper=IntrospectionHelper.getHelper(taskClass);
    final HashMap<String,AntAttributeType> attributes=new HashMap<String,AntAttributeType>();
    final Enumeration attrEnum=helper.getAttributes();
    while (attrEnum.hasMoreElements()) {
      String attr=(String)attrEnum.nextElement();
      final Class attrClass=helper.getAttributeType(attr);
      if (int.class.equals(attrClass)) {
        attributes.put(attr,AntAttributeType.INTEGER);
      }
 else       if (boolean.class.equals(attrClass)) {
        attributes.put(attr,AntAttributeType.BOOLEAN);
      }
 else {
        attributes.put(attr,AntAttributeType.STRING);
      }
    }
    AntTaskDefinition def=new AntTaskDefinitionImpl(this,taskName,getSourceElement().getNamespace(),taskClass.getName(),attributes);
    myTaskDefinitions.put(def.getClassName(),def);
    myTaskIdToClassMap.put(def.getNamespace() + def.getName(),def.getClassName());
  }
  for (  AntTaskDefinition def : myTaskDefinitions.values()) {
    final Class taskClass=(Class)ht.get(def.getName());
    final IntrospectionHelper helper=IntrospectionHelper.getHelper(taskClass);
    final Enumeration nestedEnum=helper.getNestedElements();
    while (nestedEnum.hasMoreElements()) {
      final String nestedElement=(String)nestedEnum.nextElement();
      def.registerNestedTask(getTaskClassByName(nestedElement,def.getNamespace()));
    }
  }
  return myTaskDefinitions.get(taskClassName);
}
