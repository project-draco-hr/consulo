{
synchronized (PsiLock.LOCK) {
    if (myImports == null) {
      myImports=new ArrayList<AntFile>();
      final XmlTag se=getSourceElement();
      final PsiFile psiFile=se.getContainingFile();
      final StringBuilder builder=StringBuilderSpinAllocator.alloc();
      try {
        for (        final XmlTag tag : se.getSubTags()) {
          if (!psiFile.equals(tag.getContainingFile())) {
            buildTagText(tag,builder);
          }
 else           if (AntFileImpl.IMPORT_TAG.equals(tag.getName())) {
            final String fileName=tag.getAttributeValue(AntFileImpl.FILE_ATTR);
            final AntFile imported=AntImportImpl.getImportedFile(fileName,this);
            if (imported != null) {
              addImportedFile(imported);
            }
 else {
              registerImportsDependentProperties(fileName);
            }
          }
        }
        if (builder.length() > 0) {
          builder.insert(0,"\">");
          final String baseDir=getBaseDir();
          if (baseDir != null && baseDir.length() > 0) {
            builder.insert(0,baseDir);
          }
          builder.insert(0,"<project basedir=\"");
          builder.append("</project>");
          final PsiElementFactory elementFactory=getManager().getElementFactory();
          final XmlFile xmlFile=(XmlFile)elementFactory.createFileFromText("dummyEntities.xml",StdFileTypes.XML,builder.toString(),LocalTimeCounter.currentTime(),false,false);
          addImportedFile(new AntFileImpl(xmlFile.getViewProvider()){
            public VirtualFile getContainingPath(){
              return AntProjectImpl.this.getAntFile().getContainingPath();
            }
          }
);
        }
      }
  finally {
        StringBuilderSpinAllocator.dispose(builder);
      }
    }
    if (myCachedImportsArray == null) {
      myCachedImportsArray=myImports.toArray(new AntFile[myImports.size()]);
    }
    return myCachedImportsArray;
  }
}
