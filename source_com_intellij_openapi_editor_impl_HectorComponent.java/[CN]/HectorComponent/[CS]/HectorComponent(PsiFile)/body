{
  super(new GridBagLayout());
  setBorder(BorderFactory.createEtchedBorder());
  myFile=file;
  mySliders=new JSlider[file instanceof JspFile ? file.getPsiRoots().length - 1 : 1];
  final Project project=myFile.getProject();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final VirtualFile virtualFile=myFile.getContainingFile().getVirtualFile();
  final boolean notInLibrary=(!fileIndex.isInLibrarySource(virtualFile) && !fileIndex.isInLibraryClasses(virtualFile)) || fileIndex.isInContent(virtualFile);
  for (int i=0; i < mySliders.length; i++) {
    final Hashtable<Integer,JLabel> sliderLabels=new Hashtable<Integer,JLabel>();
    sliderLabels.put(new Integer(1),new JLabel("None"));
    sliderLabels.put(new Integer(2),new JLabel("Syntax"));
    if (notInLibrary) {
      sliderLabels.put(new Integer(3),new JLabel("Inspections"));
    }
    final JSlider slider=new JSlider(JSlider.VERTICAL,1,notInLibrary ? 3 : 2,1);
    slider.setLabelTable(sliderLabels);
    slider.putClientProperty("JSlider.isFilled",Boolean.TRUE);
    slider.setPaintLabels(true);
    slider.setSnapToTicks(true);
    slider.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        int value=slider.getValue();
        for (Enumeration<Integer> enumeration=sliderLabels.keys(); enumeration.hasMoreElements(); ) {
          Integer key=enumeration.nextElement();
          sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : new Color(100,100,100));
        }
      }
    }
);
    final PsiFile psiRoot=myFile.getPsiRoots()[i];
    slider.setValue(getValue(HighlightUtil.isRootHighlighted(psiRoot),HighlightUtil.isRootInspected(psiRoot)));
    mySliders[i]=slider;
  }
  final DaemonCodeAnalyzer analyzer=DaemonCodeAnalyzer.getInstance(myFile.getProject());
  myImportPopupOn=analyzer.isImportHintsEnabled(myFile);
  myImportPopupCheckBox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myImportPopupOn=myImportPopupCheckBox.isSelected();
    }
  }
);
  myImportPopupCheckBox.setSelected(myImportPopupOn);
  myImportPopupCheckBox.setEnabled(analyzer.isAutohintsAvailable(myFile));
  myImportPopupCheckBox.setMnemonic('P');
  myImportPopupCheckBox.setVisible(notInLibrary);
  GridBagConstraints gc=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  add(myImportPopupCheckBox,gc);
  myClearSettingsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=myFile.getProject();
      HighlightingSettingsPerFile.getInstance(project).resetAllFilesToUseGlobalSettings();
      final DaemonCodeAnalyzer analyzer=DaemonCodeAnalyzer.getInstance(project);
      analyzer.resetImportHintsEnabledForProject();
      analyzer.restart();
      myProfilesCombo.getComboBox().setSelectedItem(DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().getName());
      myProfilesCombo.setEnabled(false);
      myUsePerFileProfile.setSelected(false);
      for (int i=0; i < mySliders.length; i++) {
        final PsiFile psiRoot=myFile.getPsiRoots()[i];
        mySliders[i].setValue(getValue(HighlightUtil.isRootHighlighted(psiRoot),HighlightUtil.isRootInspected(psiRoot)));
      }
    }
  }
);
  myClearSettingsButton.setToolTipText("Reset all per file customizations");
  myClearSettingsButton.setPreferredSize(new Dimension(GC_ICON.getIconWidth() + 4,GC_ICON.getIconHeight() + 4));
  add(myClearSettingsButton,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,2,0,2),0,0));
  gc.gridwidth=2;
  gc.weightx=1.0;
  gc.gridx=0;
  gc.gridy=1;
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.anchor=GridBagConstraints.WEST;
  final JPanel inspectionProfilePanel=createInspectionProfilePanel();
  add(inspectionProfilePanel,gc);
  inspectionProfilePanel.setVisible(notInLibrary);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorder(myTitle));
  final boolean addLabel=mySliders.length > 1;
  if (addLabel) {
    layoutVertical(panel);
  }
 else {
    layoutHorizontal(panel);
  }
  gc.gridx=0;
  gc.gridy=2;
  gc.weighty=1.0;
  gc.fill=GridBagConstraints.BOTH;
  add(panel,gc);
}
