{
  JPanel profilePanel=new JPanel(new GridBagLayout());
  myUsePerFileProfile.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myProfilesCombo.setEnabled(myUsePerFileProfile.isSelected());
    }
  }
);
  final Pair<String,Boolean> inspectionProfile=HighlightingSettingsPerFile.getInstance(myFile.getProject()).getInspectionProfile(myFile);
  myUseProfile=inspectionProfile != null && inspectionProfile.second;
  myUsePerFileProfile.setSelected(myUseProfile);
  profilePanel.add(myUsePerFileProfile,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  final InspectionProfileManager inspectionManager=InspectionProfileManager.getInstance();
  myProfilesCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myProfile=(String)myProfilesCombo.getComboBox().getSelectedItem();
    }
  }
);
  reloadProfiles(inspectionManager,inspectionProfile == null ? ((InspectionProfile)InspectionProjectProfileManager.getInstance(myFile.getProject()).getProfile(myFile)).getName() : inspectionProfile.first);
  myProfilesCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myHint != null && myHint.isVisible())       myHint.hide();
      ErrorsDialog errorsDialog=new ErrorsDialog((String)myProfilesCombo.getComboBox().getSelectedItem(),myFile.getProject());
      errorsDialog.show();
    }
  }
);
  myProfilesCombo.setEnabled(myUseProfile);
  profilePanel.add(myProfilesCombo,new GridBagConstraints(0,1,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,2),0,0));
  return profilePanel;
}
