{
  JPanel profilePanel=new JPanel(new GridBagLayout());
  myUsePerFileProfile.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final boolean selected=myUsePerFileProfile.isSelected();
      myProfilesCombo.setEnabled(selected);
      myUseProfile=selected;
    }
  }
);
  myUsePerFileProfile.setMnemonic('C');
  final boolean usePerFileProfile=HighlightingSettingsPerFile.getInstance(myFile.getProject()).getInspectionProfile(myFile) != null;
  myUsePerFileProfile.setSelected(usePerFileProfile);
  profilePanel.add(myUsePerFileProfile,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  final InspectionProfileManager inspectionManager=InspectionProfileManager.getInstance();
  myProfilesCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myProfile=(String)myProfilesCombo.getComboBox().getSelectedItem();
    }
  }
);
  reloadProfiles(inspectionManager,DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile(myFile).getName());
  myProfilesCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myHint != null && myHint.isVisible())       myHint.hide();
      ErrorsDialog errorsDialog=new ErrorsDialog(DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile(myFile).getName(),myFile.getProject());
      errorsDialog.show();
    }
  }
);
  myProfilesCombo.setEnabled(usePerFileProfile);
  profilePanel.add(myProfilesCombo,new GridBagConstraints(0,1,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,2),0,0));
  return profilePanel;
}
