{
  final PsiMethod method=(PsiMethod)parameter.getDeclarationScope();
  final PsiCodeBlock methodBody=method.getBody();
  if (methodBody == null)   return;
  final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  final String fieldName=field.getName();
  final String parameterName=parameter.getName();
  final boolean isMethodStatic=method.hasModifierProperty(PsiModifier.STATIC);
  final PsiClass targetClass=method.getContainingClass();
  if (targetClass == null)   return;
  String stmtText=fieldName + " = " + parameterName+ ";";
  if (Comparing.strEqual(fieldName,parameterName) || JavaPsiFacade.getInstance(project).getResolveHelper().resolveReferencedVariable(fieldName,methodBody) != field) {
    @NonNls String prefix=isMethodStatic ? targetClass.getName() == null ? "" : targetClass.getName() + "." : "this.";
    stmtText=prefix + stmtText;
  }
  final PsiStatement assignmentStmt=(PsiStatement)CodeStyleManager.getInstance(project).reformat(factory.createStatementFromText(stmtText,methodBody));
  final PsiStatement[] statements=methodBody.getStatements();
  final int i=FieldFromParameterUtils.findFieldAssignmentAnchor(statements,null,targetClass,parameter);
  final PsiElement inserted;
  if (i == statements.length) {
    inserted=methodBody.add(assignmentStmt);
  }
 else {
    inserted=methodBody.addAfter(assignmentStmt,i > 0 ? statements[i - 1] : null);
  }
  editor.getCaretModel().moveToOffset(inserted.getTextRange().getEndOffset());
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
