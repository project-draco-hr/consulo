{
  Modifier modifier=null;
  if (myEvaluatedField != null && (myEvaluatedQualifier instanceof ClassType || myEvaluatedQualifier instanceof ObjectReference)) {
    modifier=new Modifier(){
      public boolean canInspect(){
        return myEvaluatedQualifier instanceof ObjectReference;
      }
      public boolean canSetValue(){
        return true;
      }
      public void setValue(      Value value) throws ClassNotLoadedException, InvalidTypeException {
        if (myEvaluatedQualifier instanceof ReferenceType) {
          ClassType classType=(ClassType)myEvaluatedQualifier;
          classType.setValue(myEvaluatedField,value);
        }
 else {
          ObjectReference objRef=(ObjectReference)myEvaluatedQualifier;
          objRef.setValue(myEvaluatedField,value);
        }
      }
      public Type getExpectedType() throws ClassNotLoadedException {
        return myEvaluatedField.type();
      }
      public NodeDescriptorImpl getInspectItem(      Project project){
        if (myEvaluatedQualifier instanceof ObjectReference) {
          return new FieldDescriptorImpl(project,(ObjectReference)myEvaluatedQualifier,myEvaluatedField);
        }
 else         return null;
      }
    }
;
  }
  return modifier;
}
