{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (editor instanceof EditorWindow) {
    editor=((EditorWindow)editor).getDelegate();
    file=InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file);
  }
  final LookupEx lookup=LookupManager.getActiveLookup(editor);
  if (lookup != null) {
    lookup.showElementActions();
    return;
  }
  final DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(project);
  codeAnalyzer.autoImportReferenceAtCursor(editor,file);
  ShowIntentionsPass.IntentionsInfo intentions=new ShowIntentionsPass.IntentionsInfo();
  ShowIntentionsPass.getActionsToShow(editor,file,intentions,-1);
  IntentionHintComponent hintComponent=codeAnalyzer.getLastIntentionHint();
  if (hintComponent != null) {
    IntentionHintComponent.PopupUpdateResult result=hintComponent.isForEditor(editor) ? hintComponent.updateActions(intentions) : IntentionHintComponent.PopupUpdateResult.HIDE_AND_RECREATE;
    if (result == IntentionHintComponent.PopupUpdateResult.HIDE_AND_RECREATE) {
      hintComponent.hide();
    }
  }
  if (HintManagerImpl.getInstanceImpl().performCurrentQuestionAction())   return;
  TemplateState state=TemplateManagerImpl.getTemplateState(editor);
  if (state != null && !state.isFinished()) {
    return;
  }
  if (!intentions.isEmpty()) {
    IntentionHintComponent.showIntentionHint(project,file,editor,intentions,true);
  }
}
