{
  final Project project=file.getProject();
  final Editor editorToApply;
  final PsiFile fileToApply;
  int offset=editor.getCaretModel().getOffset();
  PsiElement injected=InjectedLanguageManager.getInstance(project).findInjectedElementAt(file,offset);
  if (injected != null) {
    PsiFile injectedFile=injected.getContainingFile();
    Editor injectedEditor=InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor,injectedFile);
    if (action.isAvailable(project,injectedEditor,injectedFile)) {
      editorToApply=injectedEditor;
      fileToApply=injectedFile;
    }
 else     if (!action.isAvailable(project,editor,file)) {
      return;
    }
 else {
      editorToApply=editor;
      fileToApply=file;
    }
  }
 else   if (!action.isAvailable(project,editor,file)) {
    return;
  }
 else {
    editorToApply=editor;
    fileToApply=file;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        action.invoke(project,editorToApply,fileToApply);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      DaemonCodeAnalyzer.getInstance(project).updateVisibleHighlighters(editor);
    }
  }
;
  if (action.startInWriteAction()) {
    final Runnable _runnable=runnable;
    runnable=new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(_runnable);
      }
    }
;
  }
  CommandProcessor.getInstance().executeCommand(project,runnable,text,null);
}
