{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  if (methodExpression.getQualifierExpression() != null) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String name=aClass.getQualifiedName();
  if (!"junit.framework.Assert".equals(name)) {
    return;
  }
  @NonNls final String newExpressionText="org.junit.Assert." + expression.getText();
  final Project project=expression.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiExpression newExpression=factory.createExpressionFromText(newExpressionText,expression);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  final PsiElement replacedExpression=expression.replace(newExpression);
  codeStyleManager.shortenClassReferences(replacedExpression);
}
