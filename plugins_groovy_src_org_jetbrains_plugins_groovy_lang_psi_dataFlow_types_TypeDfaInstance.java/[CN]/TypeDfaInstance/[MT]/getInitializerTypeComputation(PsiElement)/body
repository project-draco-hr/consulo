{
  GrExpression initializer=null;
  if (element instanceof GrReferenceExpression && ((GrReferenceExpression)element).getQualifierExpression() == null) {
    final PsiElement parent=element.getParent();
    if (parent instanceof GrAssignmentExpression) {
      initializer=((GrAssignmentExpression)parent).getRValue();
    }
 else     if (parent instanceof GrListOrMap) {
      GrListOrMap list=(GrListOrMap)parent;
      if (list.getParent() instanceof GrAssignmentExpression) {
        GrAssignmentExpression assignment=(GrAssignmentExpression)list.getParent();
        int idx=-1;
        GrExpression[] initializers=list.getInitializers();
        for (int i=0; i < initializers.length; i++) {
          if (element == initializers[i]) {
            idx=i;
            break;
          }
        }
        if (idx >= 0) {
          final GrExpression rValue=assignment.getRValue();
          if (rValue != null) {
            return getMultipleAssignmentTypeComputation(rValue,idx);
          }
        }
      }
    }
  }
 else   if (element instanceof GrVariable && !(element instanceof GrParameter)) {
    initializer=((GrVariable)element).getInitializerGroovy();
  }
  final GrExpression initializer1=initializer;
  return initializer == null ? null : new Computable<PsiType>(){
    public PsiType compute(){
      return initializer1.getType();
    }
  }
;
}
