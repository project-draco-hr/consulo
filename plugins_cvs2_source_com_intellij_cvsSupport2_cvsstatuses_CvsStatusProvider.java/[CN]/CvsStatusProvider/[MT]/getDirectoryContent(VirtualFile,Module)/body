{
  CvsInfo cvsInfo=getEntriesManager().getCvsInfoFor(directory);
  DirectoryContent result=new DirectoryContent(cvsInfo);
  VirtualFile[] children=CvsVfsUtil.getChildrenOf(directory);
  if (children == null)   children=VirtualFile.EMPTY_ARRAY;
  Collection<Entry> entries=cvsInfo.getEntries();
  HashMap<String,VirtualFile> nameToFileMap=new HashMap<String,VirtualFile>();
  for (  VirtualFile child : children) {
    nameToFileMap.put(child.getName(),child);
  }
  for (  final Entry entry : entries) {
    String fileName=entry.getFileName();
    if (entry.isDirectory()) {
      if (nameToFileMap.containsKey(fileName)) {
        VirtualFile virtualFile=nameToFileMap.get(fileName);
        if (isInContent(virtualFile,module)) {
          result.addDirectory(new VirtualFileEntry(virtualFile,entry));
        }
      }
    }
 else {
      if (nameToFileMap.containsKey(fileName) || entry.isRemoved()) {
        VirtualFile virtualFile=nameToFileMap.get(fileName);
        if (isInContent(virtualFile,module)) {
          result.addFile(new VirtualFileEntry(virtualFile,entry));
        }
      }
 else       if (!entry.isAddedFile()) {
        result.addDeletedFile(entry);
      }
    }
    nameToFileMap.remove(fileName);
  }
  for (  final String name : nameToFileMap.keySet()) {
    VirtualFile unknown=nameToFileMap.get(name);
    if (unknown.isDirectory()) {
      if (isInContent(unknown,module)) {
        result.addUnknownDirectory(unknown);
      }
    }
 else {
      if (isInContent(unknown,module)) {
        boolean isIgnored=result.getCvsInfo().getIgnoreFilter().shouldBeIgnored(unknown.getName());
        if (isIgnored) {
          result.addIgnoredFile(unknown);
        }
 else {
          result.addUnknownFile(unknown);
        }
      }
    }
  }
  return result;
}
