{
  PsiElement parentElement=_element.getParent();
  final Project project=_element.getProject();
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    if (parentElement instanceof PsiMethod) {
      PsiMethod psiMethod=(PsiMethod)parentElement;
      final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
      final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)LanguageCommenters.INSTANCE.forLanguage(parentElement.getLanguage());
      for (      PsiParameter parameter : parameters) {
        builder.append(createDocCommentLine(PARAM_TAG,project,commenter));
        builder.append(parameter.getName());
        builder.append(LINE_SEPARATOR);
      }
      final PsiTypeParameterList typeParameterList=psiMethod.getTypeParameterList();
      if (typeParameterList != null) {
        createTypeParamsListComment(builder,project,commenter,typeParameterList);
      }
      if (psiMethod.getReturnType() != null && psiMethod.getReturnType() != PsiType.VOID) {
        builder.append(createDocCommentLine(RETURN_TAG,project,commenter));
        builder.append(LINE_SEPARATOR);
      }
      final PsiJavaCodeReferenceElement[] references=psiMethod.getThrowsList().getReferenceElements();
      for (      PsiJavaCodeReferenceElement reference : references) {
        builder.append(createDocCommentLine(THROWS_TAG,project,commenter));
        builder.append(reference.getText());
        builder.append(LINE_SEPARATOR);
      }
    }
 else     if (parentElement instanceof PsiClass) {
      final PsiTypeParameterList typeParameterList=((PsiClass)parentElement).getTypeParameterList();
      if (typeParameterList != null) {
        final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)LanguageCommenters.INSTANCE.forLanguage(parentElement.getLanguage());
        createTypeParamsListComment(builder,project,commenter,typeParameterList);
      }
    }
    return builder.length() > 0 ? builder.toString() : null;
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
