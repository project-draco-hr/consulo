{
  PsiElement parentElement=_element.getParent();
  if (parentElement instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)parentElement;
    final StringBuffer buffer=new StringBuffer();
    final Project project=parentElement.getProject();
    final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
    final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)parentElement.getLanguage().getCommenter();
    for (    PsiParameter parameter : parameters) {
      buffer.append(createDocCommentLine(PARAM_TAG,project,commenter));
      buffer.append(parameter.getName());
      buffer.append(LINE_SEPARATOR);
    }
    if (psiMethod.getReturnType() != null && psiMethod.getReturnType() != PsiType.VOID) {
      buffer.append(createDocCommentLine(RETURN_TAG,project,commenter));
      buffer.append(LINE_SEPARATOR);
    }
    final PsiJavaCodeReferenceElement[] references=psiMethod.getThrowsList().getReferenceElements();
    for (    PsiJavaCodeReferenceElement reference : references) {
      buffer.append(createDocCommentLine(THROWS_TAG,project,commenter));
      buffer.append(reference.getText());
      buffer.append(LINE_SEPARATOR);
    }
    return buffer.toString();
  }
  return null;
}
