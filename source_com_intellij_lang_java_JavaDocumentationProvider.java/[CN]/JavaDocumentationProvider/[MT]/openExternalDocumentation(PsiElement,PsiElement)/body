{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.javadoc.external");
  List<String> urls=getExternalJavaDocUrl(element);
  if (urls != null && !urls.isEmpty()) {
    final JavaDocExternalFilter filter=new JavaDocExternalFilter(element.getProject());
    for (Iterator<String> it=urls.iterator(); it.hasNext(); ) {
      String url=it.next();
      if (generateExternalJavadoc(element,url,false,filter) == null)       it.remove();
    }
    final HashSet<String> set=new HashSet<String>(urls);
    if (set.size() > 1) {
      JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<String>("Choose javadoc root",set.toArray(new String[set.size()])){
        public PopupStep onChosen(        final String selectedValue,        final boolean finalChoice){
          BrowserUtil.launchBrowser(selectedValue);
          return PopupStep.FINAL_CHOICE;
        }
      }
).showInBestPositionFor(DataManager.getInstance().getDataContext());
    }
 else {
      BrowserUtil.launchBrowser(urls.get(0));
    }
  }
 else {
    final JBPopup docInfoHint=DocumentationManager.getInstance(element.getProject()).getDocInfoHint();
    if (docInfoHint != null && docInfoHint.isVisible()) {
      docInfoHint.cancel();
    }
    Messages.showMessageDialog(element.getProject(),CodeInsightBundle.message("javadoc.documentation.not.found.message"),CodeInsightBundle.message("javadoc.documentation.not.found.title"),Messages.getErrorIcon());
  }
}
