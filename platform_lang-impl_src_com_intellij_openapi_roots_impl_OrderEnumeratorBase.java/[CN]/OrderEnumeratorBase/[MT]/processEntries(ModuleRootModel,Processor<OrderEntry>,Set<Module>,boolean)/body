{
  if (processed != null && !processed.add(rootModel.getModule()))   return;
  for (  OrderEntry entry : rootModel.getOrderEntries()) {
    if (myWithoutJdk && entry instanceof JdkOrderEntry || myWithoutLibraries && entry instanceof LibraryOrderEntry || myWithoutDepModules && entry instanceof ModuleOrderEntry || myWithoutThisModuleContent && entry instanceof ModuleSourceOrderEntry)     continue;
    if (entry instanceof ExportableOrderEntry) {
      ExportableOrderEntry exportableEntry=(ExportableOrderEntry)entry;
      final DependencyScope scope=exportableEntry.getScope();
      if (myProductionOnly && !scope.isForProductionCompile() && !scope.isForProductionRuntime())       continue;
      if (myCompileOnly && !scope.isForProductionCompile() && !scope.isForTestCompile())       continue;
      if (myRuntimeOnly && !scope.isForProductionRuntime() && !scope.isForTestRuntime())       continue;
      if (!exportableEntry.isExported()) {
        if (myExportedOnly)         continue;
        if (myRecursivelyExportedOnly && !firstLevel)         continue;
      }
    }
    if (myCondition != null && !myCondition.value(entry))     continue;
    if (myRecursively && entry instanceof ModuleOrderEntry) {
      final Module module=((ModuleOrderEntry)entry).getModule();
      if (module != null) {
        processEntries(ModuleRootManager.getInstance(module),processor,processed,false);
        continue;
      }
    }
    if (!processor.process(entry)) {
      return;
    }
  }
}
