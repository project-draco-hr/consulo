{
  if (PsiUtil.getLanguageLevel(place).compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  place.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitCallExpression(    PsiCallExpression expression){
      super.visitCallExpression(expression);
      checkCall(expression);
    }
    @Override public void visitEnumConstant(    PsiEnumConstant enumConstant){
      super.visitEnumConstant(enumConstant);
      checkCall(enumConstant);
    }
    @Override public void visitClass(    PsiClass aClass){
    }
    private void checkCall(    PsiCall expression){
      final JavaResolveResult resolveResult=expression.resolveMethodGenerics();
      PsiElement element=resolveResult.getElement();
      final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
      if (element instanceof PsiMethod && ((PsiMethod)element).isVarArgs()) {
        PsiMethod method=(PsiMethod)element;
        PsiParameter[] parameters=method.getParameterList().getParameters();
        PsiExpressionList argumentList=expression.getArgumentList();
        if (argumentList != null) {
          PsiExpression[] args=argumentList.getExpressions();
          if (parameters.length == args.length) {
            PsiExpression lastArg=args[args.length - 1];
            PsiParameter lastParameter=parameters[args.length - 1];
            PsiType lastParamType=lastParameter.getType();
            LOG.assertTrue(lastParamType instanceof PsiEllipsisType);
            if (lastArg instanceof PsiNewExpression && substitutor.substitute(((PsiEllipsisType)lastParamType).toArrayType()).equals(lastArg.getType())) {
              PsiExpression[] initializers=getInitializers((PsiNewExpression)lastArg);
              if (initializers != null) {
                if (isSafeToFlatten(expression,method,initializers)) {
                  final ProblemDescriptor descriptor=manager.createProblemDescriptor(lastArg,InspectionsBundle.message("inspection.redundant.array.creation.for.varargs.call.descriptor"),myQuickFixAction,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
                  problems.add(descriptor);
                }
              }
            }
          }
        }
      }
    }
    private boolean isSafeToFlatten(    PsiCall callExpression,    PsiMethod oldRefMethod,    PsiExpression[] arrayElements){
      if (arrayElements.length == 1) {
        PsiType type=arrayElements[0].getType();
        if (PsiType.NULL.equals(type) || type instanceof PsiArrayType)         return false;
      }
      PsiCall copy=(PsiCall)callExpression.copy();
      PsiExpressionList copyArgumentList=copy.getArgumentList();
      LOG.assertTrue(copyArgumentList != null);
      PsiExpression[] args=copyArgumentList.getExpressions();
      try {
        args[args.length - 1].delete();
        if (arrayElements.length > 0) {
          copyArgumentList.addRange(arrayElements[0],arrayElements[arrayElements.length - 1]);
        }
        final JavaResolveResult resolveResult=copy.resolveMethodGenerics();
        return resolveResult.isValidResult() && resolveResult.getElement() == oldRefMethod;
      }
 catch (      IncorrectOperationException e) {
        return false;
      }
    }
  }
);
  if (problems.isEmpty())   return null;
  return problems.toArray(new ProblemDescriptor[problems.size()]);
}
