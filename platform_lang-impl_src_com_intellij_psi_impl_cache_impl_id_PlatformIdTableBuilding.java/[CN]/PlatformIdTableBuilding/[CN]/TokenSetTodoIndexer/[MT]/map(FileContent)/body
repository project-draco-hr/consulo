{
  if (IndexPatternUtil.getIndexPatternCount() > 0) {
    final CharSequence chars=inputData.getContentAsText();
    final OccurrenceConsumer occurrenceConsumer=new OccurrenceConsumer(null,true);
    EditorHighlighter highlighter;
    final EditorHighlighter editorHighlighter=inputData.getUserData(FileBasedIndexImpl.EDITOR_HIGHLIGHTER);
    if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars,editorHighlighter)) {
      highlighter=editorHighlighter;
    }
 else {
      highlighter=HighlighterFactory.createHighlighter(null,myFile);
      highlighter.setText(chars);
    }
    final int documentLength=chars.length();
    BaseFilterLexer.TodoScanningData[] todoScanningDatas=null;
    final HighlighterIterator iterator=highlighter.createIterator(0);
    while (!iterator.atEnd()) {
      final IElementType token=iterator.getTokenType();
      if (myCommentTokens.contains(token) || CommentUtilCore.isCommentToken(token,LanguageVersionUtil.findLanguageVersion(token.getLanguage(),myProject,myFile))) {
        int start=iterator.getStart();
        if (start >= documentLength)         break;
        int end=iterator.getEnd();
        todoScanningDatas=BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start,Math.min(end,documentLength)),occurrenceConsumer,todoScanningDatas);
        if (end > documentLength)         break;
      }
      iterator.advance();
    }
    final Map<TodoIndexEntry,Integer> map=new HashMap<TodoIndexEntry,Integer>();
    for (    IndexPattern pattern : IndexPatternUtil.getIndexPatterns()) {
      final int count=occurrenceConsumer.getOccurrenceCount(pattern);
      if (count > 0) {
        map.put(new TodoIndexEntry(pattern.getPatternString(),pattern.isCaseSensitive()),count);
      }
    }
    return map;
  }
  return Collections.emptyMap();
}
