{
  newExceptions=filterCheckedExceptions(newExceptions);
  PsiElement context=PsiTreeUtil.getParentOfType(ref,PsiTryStatement.class,PsiMethod.class);
  if (context instanceof PsiTryStatement) {
    PsiTryStatement tryStatement=(PsiTryStatement)context;
    PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    PsiClassType[] classes=ExceptionUtil.collectUnhandledExceptions(tryBlock,tryBlock);
    PsiParameter[] catchParameters=tryStatement.getCatchBlockParameters();
    for (    PsiParameter parameter : catchParameters) {
      final PsiType caughtType=parameter.getType();
      if (!(caughtType instanceof PsiClassType))       continue;
      if (ExceptionUtil.isUncheckedExceptionOrSuperclass((PsiClassType)caughtType))       continue;
      if (!isCatchParameterRedundant((PsiClassType)caughtType,classes))       continue;
      parameter.getParent().delete();
    }
    PsiClassType[] exceptionsToAdd=filterUnhandledExceptions(newExceptions,tryBlock);
    addExceptions(exceptionsToAdd,tryStatement);
    adjustPossibleEmptyTryStatement(tryStatement);
  }
 else {
    newExceptions=filterUnhandledExceptions(newExceptions,ref);
    if (newExceptions.length > 0) {
      PsiElementFactory elementFactory=myManager.getElementFactory();
      PsiTryStatement tryStatement=(PsiTryStatement)elementFactory.createStatementFromText("try {} catch (Exception e) {}",null);
      PsiStatement anchor=PsiTreeUtil.getParentOfType(ref,PsiStatement.class);
      LOG.assertTrue(anchor != null);
      tryStatement.getTryBlock().add(anchor);
      tryStatement=(PsiTryStatement)anchor.getParent().addAfter(tryStatement,anchor);
      addExceptions(newExceptions,tryStatement);
      anchor.delete();
      tryStatement.getCatchSections()[0].delete();
    }
  }
}
