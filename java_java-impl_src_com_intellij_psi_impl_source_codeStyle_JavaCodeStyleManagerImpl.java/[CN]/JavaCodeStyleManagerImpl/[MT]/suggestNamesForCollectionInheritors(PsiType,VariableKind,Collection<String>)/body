{
  if (!(type instanceof PsiClassType)) {
    return;
  }
  PsiClassType classType=(PsiClassType)type;
  PsiClassType.ClassResolveResult resolved=classType.resolveGenerics();
  final PsiClass element=resolved.getElement();
  if (element == null) {
    return;
  }
  final PsiManager manager=PsiManager.getInstance(myProject);
  final PsiClass collectionClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.util.Collection",element.getResolveScope());
  if (collectionClass == null) {
    return;
  }
  if (InheritanceUtil.isInheritorOrSelf(element,collectionClass,true)) {
    final PsiSubstitutor substitutor;
    if (!manager.areElementsEquivalent(element,collectionClass)) {
      substitutor=TypeConversionUtil.getClassSubstitutor(collectionClass,element,PsiSubstitutor.EMPTY);
    }
 else {
      substitutor=PsiSubstitutor.EMPTY;
    }
    PsiTypeParameterList typeParameterList=collectionClass.getTypeParameterList();
    if (typeParameterList == null) {
      return;
    }
    PsiTypeParameter[] typeParameters=typeParameterList.getTypeParameters();
    if (typeParameters.length == 0) {
      return;
    }
    PsiType componentTypeParameter=substitutor.substitute(typeParameters[0]);
    if (componentTypeParameter instanceof PsiClassType) {
      PsiClass componentClass=((PsiClassType)componentTypeParameter).resolve();
      if (componentClass instanceof PsiTypeParameter) {
        if (collectionClass.getManager().areElementsEquivalent(((PsiTypeParameter)componentClass).getOwner(),element)) {
          PsiType componentType=resolved.getSubstitutor().substitute((PsiTypeParameter)componentClass);
          if (componentType == null) {
            return;
          }
          String typeName=normalizeTypeName(getTypeName(componentType));
          if (typeName != null) {
            suggestions.addAll(Arrays.asList(getSuggestionsByName(typeName,variableKind,true)));
          }
        }
      }
    }
  }
}
