{
  final PsiImportList importList=file.getImportList();
  if (importList == null)   return null;
  final PsiImportStatementBase[] imports=importList.getAllImportStatements();
  if (imports.length == 0)   return null;
  Set<PsiImportStatementBase> allImports=new THashSet<PsiImportStatementBase>(Arrays.asList(imports));
  final Collection<PsiImportStatementBase> redundants;
  if (JspPsiUtil.isInJspFile(file)) {
    redundants=new THashSet<PsiImportStatementBase>(TObjectHashingStrategy.IDENTITY);
    ContainerUtil.addAll(redundants,imports);
    redundants.removeAll(allImports);
    for (    PsiImportStatementBase importStatement : imports) {
      if (importStatement instanceof JspxImportStatement && ((JspxImportStatement)importStatement).isForeignFileImport()) {
        redundants.remove(importStatement);
      }
    }
  }
 else {
    redundants=allImports;
    final PsiElement[] roots=file.getPsiRoots();
    for (    PsiElement root : roots) {
      root.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitReferenceElement(        PsiJavaCodeReferenceElement reference){
          if (!reference.isQualified()) {
            final JavaResolveResult resolveResult=reference.advancedResolve(false);
            if (!inTheSamePackage(file,resolveResult.getElement())) {
              final PsiElement resolveScope=resolveResult.getCurrentFileResolveScope();
              if (resolveScope instanceof PsiImportStatementBase) {
                final PsiImportStatementBase importStatementBase=(PsiImportStatementBase)resolveScope;
                redundants.remove(importStatementBase);
              }
            }
          }
          super.visitReferenceElement(reference);
        }
        private boolean inTheSamePackage(        PsiJavaFile file,        PsiElement element){
          if (element instanceof PsiClass && ((PsiClass)element).getContainingClass() == null) {
            final PsiFile containingFile=element.getContainingFile();
            if (containingFile instanceof PsiJavaFile) {
              return Comparing.strEqual(file.getPackageName(),((PsiJavaFile)containingFile).getPackageName());
            }
          }
          return false;
        }
      }
);
    }
  }
  return redundants;
}
