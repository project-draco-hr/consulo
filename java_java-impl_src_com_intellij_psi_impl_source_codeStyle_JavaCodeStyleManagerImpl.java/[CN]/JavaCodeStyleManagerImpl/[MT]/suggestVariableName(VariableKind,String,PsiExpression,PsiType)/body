{
  LinkedHashSet<String> names=new LinkedHashSet<String>();
  if (expr != null && type == null) {
    type=expr.getType();
  }
  if (propertyName != null) {
    String[] namesByName=getSuggestionsByName(propertyName,kind,false);
    sortVariableNameSuggestions(namesByName,kind,propertyName,null);
    ContainerUtil.addAll(names,namesByName);
  }
  final NamesByExprInfo namesByExpr;
  if (expr != null) {
    namesByExpr=suggestVariableNameByExpression(expr,kind);
    if (namesByExpr.propertyName != null) {
      sortVariableNameSuggestions(namesByExpr.names,kind,namesByExpr.propertyName,null);
    }
    ContainerUtil.addAll(names,namesByExpr.names);
  }
 else {
    namesByExpr=null;
  }
  if (type != null) {
    String[] namesByType=suggestVariableNameByType(type,kind);
    sortVariableNameSuggestions(namesByType,kind,null,type);
    ContainerUtil.addAll(names,namesByType);
  }
  final String _propertyName;
  if (propertyName != null) {
    _propertyName=propertyName;
  }
 else {
    _propertyName=namesByExpr != null ? namesByExpr.propertyName : null;
  }
  addNamesFromStatistics(names,kind,_propertyName,type);
  String[] namesArray=ArrayUtil.toStringArray(names);
  sortVariableNameSuggestions(namesArray,kind,_propertyName,type);
  final PsiType _type=type;
  return new SuggestedNameInfo(namesArray){
    public void nameChoosen(    String name){
      if (_propertyName != null || _type != null && _type.isValid()) {
        JavaStatisticsManager.incVariableNameUseCount(name,kind,_propertyName,_type);
      }
    }
  }
;
}
