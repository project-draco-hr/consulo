{
  if (myVcs == null) {
    return;
  }
  final VcsHistoryProvider historyProvider=myVcs.getVcsHistoryProvider();
  if (historyProvider == null)   return;
  VcsRevisionNumber revision=null;
  if (myRevisionPattern != null) {
    final Matcher matcher=myRevisionPattern.matcher(myVersionId);
    if (matcher.find()) {
      revision=myVcs.parseRevisionNumber(matcher.group(1),filePath);
      final VcsRevisionNumber finalRevision=revision;
      final Boolean[] loadedExactRevision=new Boolean[1];
      if (historyProvider instanceof VcsBaseRevisionAdviser) {
        final boolean success=VcsUtil.runVcsProcessWithProgress(new VcsRunnable(){
          public void run() throws VcsException {
            loadedExactRevision[0]=((VcsBaseRevisionAdviser)historyProvider).getBaseVersionContent(filePath,processor,finalRevision.asString(),warnings);
          }
        }
,VcsBundle.message("progress.text2.loading.revision",revision.asString()),true,myProject);
        if (!success)         return;
      }
 else {
        final DiffProvider diffProvider=myVcs.getDiffProvider();
        if (diffProvider != null && filePath.getVirtualFile() != null) {
          final ContentRevision fileContent=diffProvider.createFileContent(finalRevision,filePath.getVirtualFile());
          final boolean success=VcsUtil.runVcsProcessWithProgress(new VcsRunnable(){
            public void run() throws VcsException {
              loadedExactRevision[0]=!processor.process(fileContent.getContent());
            }
          }
,VcsBundle.message("progress.text2.loading.revision",revision.asString()),true,myProject);
          if (!success)           return;
        }
      }
      if (Boolean.TRUE.equals(loadedExactRevision[0]))       return;
    }
  }
  Date versionDate=null;
  if (revision == null) {
    try {
      final Matcher tsMatcher=ourTsPattern.matcher(myVersionId);
      if (tsMatcher.find()) {
        final Long fromTsPattern=getFromTsPattern();
        if (fromTsPattern == null)         return;
        versionDate=new Date(fromTsPattern);
      }
 else {
        versionDate=new Date(myVersionId);
      }
    }
 catch (    IllegalArgumentException ex) {
      return;
    }
  }
  try {
    final Ref<VcsHistorySession> ref=new Ref<VcsHistorySession>();
    VcsUtil.runVcsProcessWithProgress(new VcsRunnable(){
      public void run() throws VcsException {
        ref.set(historyProvider.createSessionFor(filePath));
      }
    }
,VcsBundle.message("loading.file.history.progress"),true,myProject);
    if (ref.isNull())     return;
    final VcsHistorySession session=ref.get();
    final List<VcsFileRevision> list=session.getRevisionList();
    if (list == null)     return;
    for (    VcsFileRevision fileRevision : list) {
      boolean found;
      if (revision != null) {
        found=fileRevision.getRevisionNumber().compareTo(revision) <= 0;
      }
 else {
        final Date date=fileRevision instanceof VcsFileRevisionDvcsSpecific ? ((VcsFileRevisionDvcsSpecific)fileRevision).getDateForRevisionsOrdering() : fileRevision.getRevisionDate();
        found=(date != null) && (date.before(versionDate) || date.equals(versionDate));
      }
      if (found) {
        fileRevision.loadContent();
        processor.process(LoadTextUtil.getTextByBinaryPresentation(fileRevision.getContent(),myFile,false));
        break;
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
