{
  if (ResolveUtil.findParentContextOfClass(myPlace,PsiDocComment.class,false) != null) {
    return true;
  }
  boolean accessible=true;
  if (aClass.getContainingFile() instanceof JspFile) {
    PsiFile file=ResolveUtil.getContextFile(myPlace);
    if (file instanceof JspFile) {
      return true;
    }
  }
  if (aClass instanceof PsiTypeParameter) {
    accessible=!(myStaticContext);
  }
  PsiManager manager=aClass.getManager();
  if (aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
    PsiElement parent=aClass.getParent();
    while (true) {
      PsiElement parentScope=parent.getParent();
      if (parentScope instanceof PsiJavaFile)       break;
      parent=parentScope;
      if (!(parentScope instanceof PsiClass))       break;
    }
    if (parent instanceof PsiDeclarationStatement) {
      parent=parent.getParent();
    }
    accessible=false;
    for (PsiElement placeParent=myPlace; placeParent != null; placeParent=placeParent.getContext()) {
      if (manager.areElementsEquivalent(placeParent,parent))       accessible=true;
    }
  }
  if (aClass.hasModifierProperty(PsiModifier.PROTECTED)) {
    accessible=false;
    if (manager.arePackagesTheSame(aClass,myPlace)) {
      accessible=true;
    }
 else {
      if (aClass.getContainingClass() != null) {
        if (myAccessClass != null) {
          accessible=manager.getResolveHelper().isAccessible(aClass,myPlace,myAccessClass);
        }
 else {
          accessible=true;
        }
      }
    }
  }
  if (aClass.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
    if (!manager.arePackagesTheSame(aClass,myPlace)) {
      accessible=false;
    }
  }
  return accessible;
}
