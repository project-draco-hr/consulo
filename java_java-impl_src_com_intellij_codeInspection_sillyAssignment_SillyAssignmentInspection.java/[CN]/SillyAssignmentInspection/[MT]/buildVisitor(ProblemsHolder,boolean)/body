{
  return new JavaElementVisitor(){
    @Override public void visitAssignmentExpression(    PsiAssignmentExpression expression){
      checkSillyAssignment(expression,holder);
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitVariable(    final PsiVariable variable){
      final PsiExpression initializer=PsiUtil.deparenthesizeExpression(variable.getInitializer());
      if (initializer instanceof PsiAssignmentExpression) {
        final PsiExpression lExpr=PsiUtil.deparenthesizeExpression(((PsiAssignmentExpression)initializer).getLExpression());
        checkExpression(variable,lExpr);
      }
 else {
        checkExpression(variable,initializer);
      }
    }
    private void checkExpression(    PsiVariable variable,    PsiExpression expression){
      if (!(expression instanceof PsiReferenceExpression)) {
        return;
      }
      final PsiReferenceExpression refExpr=(PsiReferenceExpression)expression;
      final PsiExpression qualifier=refExpr.getQualifierExpression();
      if (qualifier == null || qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression || variable.hasModifierProperty(PsiModifier.STATIC)) {
        if (refExpr.isReferenceTo(variable)) {
          holder.registerProblem(expression,InspectionsBundle.message("assignment.to.declared.variable.problem.descriptor",variable.getName()),ProblemHighlightType.LIKE_UNUSED_SYMBOL);
        }
      }
    }
  }
;
}
