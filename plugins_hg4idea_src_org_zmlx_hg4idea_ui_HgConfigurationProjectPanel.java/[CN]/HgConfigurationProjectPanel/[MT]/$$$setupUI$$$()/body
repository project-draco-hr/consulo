{
  panel=new JPanel();
  panel.setLayout(new GridLayoutManager(2,1,new Insets(0,0,0,0),-1,-1));
  final Spacer spacer1=new Spacer();
  panel.add(spacer1,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));
  final JPanel panel1=new JPanel();
  panel1.setLayout(new GridLayoutManager(3,1,new Insets(0,0,0,0),-1,-1));
  panel.add(panel1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Changesets"));
  checkIncomingCbx=new JCheckBox();
  checkIncomingCbx.setSelected(true);
  checkIncomingCbx.setText("Check for incoming changesets");
  checkIncomingCbx.setMnemonic('I');
  checkIncomingCbx.setDisplayedMnemonicIndex(10);
  panel1.add(checkIncomingCbx,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  final Spacer spacer2=new Spacer();
  panel1.add(spacer2,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));
  checkOutgoingCbx=new JCheckBox();
  checkOutgoingCbx.setSelected(true);
  checkOutgoingCbx.setText("Check for outgoing changesets");
  checkOutgoingCbx.setMnemonic('O');
  checkOutgoingCbx.setDisplayedMnemonicIndex(10);
  panel1.add(checkOutgoingCbx,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
}
