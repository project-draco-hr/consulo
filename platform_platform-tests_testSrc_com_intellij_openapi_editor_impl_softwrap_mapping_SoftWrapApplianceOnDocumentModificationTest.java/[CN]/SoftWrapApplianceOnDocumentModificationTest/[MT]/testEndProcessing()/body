{
  String text="class Test {\n" + "    public String s = \"this is a long string literal that is expected to be soft-wrapped into multiple visual lines\";   \n" + "}";
  init(30,text);
  myEditor.getCaretModel().moveToOffset(text.indexOf("\n") + 1);
  List<? extends SoftWrap> softWraps=new ArrayList<SoftWrap>(getSoftWrapModel().getRegisteredSoftWraps());
  assertTrue(!softWraps.isEmpty());
  CaretModel caretModel=myEditor.getCaretModel();
  int expectedVisualLine=caretModel.getVisualPosition().line;
  while (!softWraps.isEmpty()) {
    SoftWrap softWrap=softWraps.get(0);
    int caretOffsetBefore=caretModel.getOffset();
    end();
    int caretOffset=caretModel.getOffset();
    assertTrue(caretOffset > caretOffsetBefore);
    assertFalse(caretOffset > softWrap.getStart());
    if (caretOffset < softWrap.getStart()) {
      for (int i=caretOffset; i < softWrap.getStart(); i++) {
        char c=text.charAt(i);
        assertTrue(c == ' ' || c == '\t');
      }
      caretOffsetBefore=caretOffset;
      end();
      caretOffset=caretModel.getOffset();
      assertTrue(caretOffset > caretOffsetBefore);
    }
    assertEquals(softWrap.getStart(),caretOffset);
    assertEquals(new VisualPosition(expectedVisualLine,myEditor.offsetToVisualPosition(softWrap.getStart() - 1).column + 1),caretModel.getVisualPosition());
    softWraps.remove(0);
    expectedVisualLine++;
  }
  end();
  int lastNonWhiteSpaceSymbolOffset=text.indexOf("\";") + 2;
  assertEquals(lastNonWhiteSpaceSymbolOffset,caretModel.getOffset());
  assertEquals(myEditor.offsetToVisualPosition(lastNonWhiteSpaceSymbolOffset),caretModel.getVisualPosition());
  assertEquals(expectedVisualLine,caretModel.getVisualPosition().line);
  end();
  int lastSymbolOffset=myEditor.getDocument().getLineEndOffset(caretModel.getLogicalPosition().line);
  assertEquals(lastSymbolOffset,caretModel.getOffset());
  assertEquals(myEditor.offsetToVisualPosition(lastSymbolOffset),caretModel.getVisualPosition());
  assertEquals(expectedVisualLine,caretModel.getVisualPosition().line);
}
