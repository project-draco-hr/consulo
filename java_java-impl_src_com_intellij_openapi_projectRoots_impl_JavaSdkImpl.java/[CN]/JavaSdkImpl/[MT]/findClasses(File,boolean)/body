{
  FileFilter jarFileFilter=new FileFilter(){
    @SuppressWarnings({"HardCodedStringLiteral"}) public boolean accept(    File f){
      return !f.isDirectory() && f.getName().endsWith(".jar");
    }
  }
;
  File[] jarDirs;
  if (SystemInfo.isMac && !file.getName().startsWith("mockJDK")) {
    File libFile=new File(file,"lib");
    @NonNls File classesFile=new File(file,"../Classes");
    @NonNls File libExtFile=new File(libFile,"ext");
    @NonNls File libEndorsedFile=new File(libFile,"endorsed");
    jarDirs=new File[]{libEndorsedFile,libFile,classesFile,libExtFile};
  }
 else {
    @NonNls final String jre="jre";
    File jreLibFile=isJre ? new File(file,"lib") : new File(new File(file,jre),"lib");
    @NonNls File jreLibExtFile=new File(jreLibFile,"ext");
    @NonNls File jreLibEndorsedFile=new File(jreLibFile,"endorsed");
    jarDirs=new File[]{jreLibEndorsedFile,jreLibFile,jreLibExtFile};
  }
  Set<File> filter=new LinkedHashSet<File>();
  List<File> children=new ArrayList<File>();
  for (  File jarDir : jarDirs) {
    if (jarDir != null && jarDir.isDirectory()) {
      File[] jarFiles=jarDir.listFiles(jarFileFilter);
      for (      File jarFile : jarFiles) {
        try {
          if (filter.add(jarFile.getCanonicalFile()))           children.add(jarFile);
        }
 catch (        IOException e) {
        }
      }
    }
  }
  ArrayList<VirtualFile> result=new ArrayList<VirtualFile>();
  for (  File child : children) {
    String url=JarFileSystem.PROTOCOL_PREFIX + child.getAbsolutePath().replace(File.separatorChar,'/') + JarFileSystem.JAR_SEPARATOR;
    VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(url);
    if (vFile != null) {
      result.add(vFile);
    }
  }
  @NonNls File classesZipFile=new File(new File(file,"lib"),"classes.zip");
  if (!classesZipFile.isDirectory() && classesZipFile.exists()) {
    String url=JarFileSystem.PROTOCOL_PREFIX + classesZipFile.getAbsolutePath().replace(File.separatorChar,'/') + JarFileSystem.JAR_SEPARATOR;
    VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(url);
    if (vFile != null) {
      result.add(vFile);
    }
  }
  return VfsUtil.toVirtualFileArray(result);
}
