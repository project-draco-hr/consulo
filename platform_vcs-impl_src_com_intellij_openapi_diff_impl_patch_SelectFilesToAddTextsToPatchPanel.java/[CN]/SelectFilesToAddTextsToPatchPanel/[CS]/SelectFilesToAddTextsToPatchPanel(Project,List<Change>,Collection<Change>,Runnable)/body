{
  myTotalSize=changes.size();
  myBigFiles=new HashSet<String>();
  final Set<Change> exclude=getBig(changes);
  for (  Change change : exclude) {
    myBigFiles.add(ChangesUtil.getFilePath(change).getPath());
  }
  myWarningText=new JLabel("There are big files selected, which increases patch size significantly");
  myWarningText.setIcon(UIUtil.getBalloonWarningIcon());
  myInclusionListener=new Runnable(){
    @Override public void run(){
      final Collection<Change> includedChanges=myBrowser.getViewer().getIncludedChanges();
      inclusionListener.run();
      for (      Change change : includedChanges) {
        if (myBigFiles.contains(ChangesUtil.getFilePath(change).getPath())) {
          myWarningText.setVisible(true);
          return;
        }
      }
      myWarningText.setVisible(false);
    }
  }
;
  myBrowser=new ChangesBrowser(project,null,changes,null,true,false,myInclusionListener,ChangesBrowser.MyUseCase.LOCAL_CHANGES,null);
  myBrowser.getViewer().setChangeDecorator(new ChangeNodeDecorator(){
    @Override public void decorate(    Change change,    SimpleColoredComponent component,    boolean isShowFlatten){
      String path=ChangesUtil.getFilePath(change).getPath();
      if (myBigFiles.contains(path)) {
        component.append(" ");
        component.append("File size is bigger than " + VcsConfiguration.ourMaximumFileForBaseRevisionSize / 1000 + "K",SimpleTextAttributes.ERROR_ATTRIBUTES);
      }
    }
    @Override public List<Pair<String,Stress>> stressPartsOfFileName(    Change change,    String parentPath){
      return null;
    }
    @Override public void preDecorate(    Change change,    ChangesBrowserNodeRenderer renderer,    boolean showFlatten){
    }
  }
);
  myBrowser.getViewer().setChangesToDisplay(changes);
  if (selectedChanges == null) {
    myBrowser.getViewer().excludeChanges(exclude);
  }
 else {
    myBrowser.getViewer().excludeChanges(changes);
    myBrowser.getViewer().includeChanges(selectedChanges);
  }
  myWarningText.setVisible(false);
  myInclusionListener.run();
}
