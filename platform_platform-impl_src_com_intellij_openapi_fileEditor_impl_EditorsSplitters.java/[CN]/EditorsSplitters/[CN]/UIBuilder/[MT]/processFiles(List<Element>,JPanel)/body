{
  final Ref<EditorWindow> windowRef=new Ref<EditorWindow>();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      windowRef.set(context == null ? new EditorWindow(EditorsSplitters.this) : findWindowWith(context));
    }
  }
);
  final EditorWindow window=windowRef.get();
  LOG.assertTrue(window != null);
  for (int i=0; i < fileElements.size(); i++) {
    final Element file=fileElements.get(i);
    try {
      final FileEditorManagerImpl fileEditorManager=getManager();
      Element historyElement=file.getChild(HistoryEntry.TAG);
      VirtualFile virtualFile=HistoryEntry.getVirtualFile(historyElement);
      Document document=FileDocumentManager.getInstance().getDocument(virtualFile);
      final HistoryEntry entry=new HistoryEntry(fileEditorManager.getProject(),historyElement);
      final boolean isCurrentInTab=Boolean.valueOf(file.getAttributeValue(CURRENT_IN_TAB)).booleanValue();
      final int index=i;
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          fileEditorManager.openFileImpl4(window,entry.myFile,isCurrentInTab,entry,isCurrentInTab,index);
          if (fileEditorManager.isFileOpen(entry.myFile)) {
            window.setFilePinned(entry.myFile,Boolean.valueOf(file.getAttributeValue(PINNED)).booleanValue());
          }
        }
      }
);
      if (document != null) {
        document.putUserData(DUMMY_KEY,null);
      }
      updateProgress();
    }
 catch (    InvalidDataException e) {
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        LOG.error(e);
      }
    }
  }
  return window.myPanel;
}
