{
  super.paintComponent(g);
  if (myCurrentWindow == null || myCurrentWindow.getFiles().length == 0) {
    g.setColor(UIUtil.isUnderDarcula() ? UIUtil.getBorderColor() : new Color(0,0,0,50));
    g.drawLine(0,0,getWidth(),0);
  }
  boolean isDarkBackground=UIUtil.isUnderDarcula();
  if (showEmptyText()) {
    UIUtil.applyRenderingHints(g);
    GraphicsUtil.setupAntialiasing(g,true,false);
    g.setColor(new JBColor(isDarkBackground ? Gray._230 : Gray._80,Gray._160));
    g.setFont(UIUtil.getLabelFont().deriveFont(isDarkBackground ? 24f : 20f));
    final UIUtil.TextPainter painter=new UIUtil.TextPainter().withLineSpacing(1.5f);
    painter.withShadow(true,new JBColor(Gray._200.withAlpha(100),Gray._0.withAlpha(255)));
    painter.appendLine("No files are open").underlined(new JBColor(Gray._150,Gray._180));
    final Shortcut[] shortcuts=KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_SEARCH_EVERYWHERE);
    final String everywhere;
    if (shortcuts.length == 0) {
      everywhere="Search Everywhere with <shortcut>Double " + (SystemInfo.isMac ? MacKeymapUtil.SHIFT : "Shift");
    }
 else {
      everywhere="Search Everywhere <shortcut>" + KeymapUtil.getShortcutsText(shortcuts);
    }
    painter.appendLine(everywhere + "</shortcut>").smaller().withBullet();
    if (!isProjectViewVisible()) {
      painter.appendLine("Open Project View with <shortcut>" + KeymapUtil.getShortcutText(new KeyboardShortcut(KeyStroke.getKeyStroke((SystemInfo.isMac ? "meta" : "alt") + " 1"),null)) + "</shortcut>").smaller().withBullet();
    }
    painter.appendLine("Open a file by name with " + getActionShortcutText("GotoFile")).smaller().withBullet().appendLine("Open Recent files with " + getActionShortcutText(IdeActions.ACTION_RECENT_FILES)).smaller().withBullet().appendLine("Open Navigation Bar with " + getActionShortcutText("ShowNavBar")).smaller().withBullet().appendLine("Drag and Drop file(s) here from " + ShowFilePathAction.getFileManagerName()).smaller().withBullet().draw(g,new PairFunction<Integer,Integer,Pair<Integer,Integer>>(){
      @Override public Pair<Integer,Integer> fun(      Integer width,      Integer height){
        final Dimension s=getSize();
        return Pair.create((s.width - width) / 2,(s.height - height) / 2);
      }
    }
);
  }
}
