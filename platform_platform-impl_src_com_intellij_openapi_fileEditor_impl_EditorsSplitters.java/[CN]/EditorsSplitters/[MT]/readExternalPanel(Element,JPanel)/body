{
  final Element splitterElement=element.getChild("splitter");
  if (splitterElement != null) {
    LOG.info("splitter");
    final boolean orientation="vertical".equals(splitterElement.getAttributeValue("split-orientation"));
    final float proportion=Float.valueOf(splitterElement.getAttributeValue("split-proportion")).floatValue();
    final Element first=splitterElement.getChild("split-first");
    final Element second=splitterElement.getChild("split-second");
    Splitter splitter;
    if (panel == null) {
      panel=new JPanel(new BorderLayout());
      splitter=new Splitter(orientation,proportion,0.1f,0.9f);
      panel.add(splitter,BorderLayout.CENTER);
      splitter.setFirstComponent(readExternalPanel(first,null));
      splitter.setSecondComponent(readExternalPanel(second,null));
    }
 else     if (panel.getComponent(0) instanceof Splitter) {
      splitter=(Splitter)panel.getComponent(0);
      readExternalPanel(first,(JPanel)splitter.getFirstComponent());
      readExternalPanel(second,(JPanel)splitter.getSecondComponent());
    }
 else {
      readExternalPanel(first,panel);
      readExternalPanel(second,panel);
    }
    return panel;
  }
  final Element leaf=element.getChild("leaf");
  if (leaf != null) {
    EditorWindow window;
    if (panel == null) {
      window=new EditorWindow(this);
    }
 else {
      window=findWindowWith(panel);
    }
    final List<Element> children=new ArrayList<Element>(leaf.getChildren("file"));
    VirtualFile currentFile=null;
    if (UISettings.getInstance().ACTIVATE_RIGHT_EDITOR_ON_CLOSE) {
      Collections.reverse(children);
    }
    for (    final Element file : children) {
      try {
        final HistoryEntry entry=new HistoryEntry(getManager().getProject(),file.getChild(HistoryEntry.TAG));
        boolean isCurrent=Boolean.valueOf(file.getAttributeValue("current")).booleanValue();
        getManager().openFileImpl3(window,entry.myFile,false,entry,isCurrent);
        if (getManager().isFileOpen(entry.myFile)) {
          window.setFilePinned(entry.myFile,Boolean.valueOf(file.getAttributeValue("pinned")).booleanValue());
          if (Boolean.valueOf(file.getAttributeValue("current-in-tab")).booleanValue()) {
            currentFile=entry.myFile;
          }
          if (isCurrent) {
            setCurrentWindow(window,true);
          }
        }
      }
 catch (      InvalidDataException e) {
      }
    }
    if (currentFile != null) {
      final EditorComposite editor=window.findFileComposite(currentFile);
      if (editor != null) {
        window.setSelectedEditor(editor,true);
      }
    }
    return window.myPanel;
  }
  return null;
}
