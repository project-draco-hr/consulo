def __init__(self, ui, path):
    converter_sink.__init__(self, ui, path)
    self.branchnames = ui.configbool('convert', 'hg.usebranchnames', True)
    self.clonebranches = ui.configbool('convert', 'hg.clonebranches', False)
    self.tagsbranch = ui.config('convert', 'hg.tagsbranch', 'default')
    self.lastbranch = None
    if (os.path.isdir(path) and (len(os.listdir(path)) > 0)):
        try:
            self.repo = hg.repository(self.ui, path)
            if (not self.repo.local()):
                raise NoRepo((_('%s is not a local Mercurial repository') % path))
        except error.RepoError as err:
            ui.traceback()
            raise NoRepo(err.args[0])
    else:
        try:
            ui.status((_('initializing destination %s repository\n') % path))
            self.repo = hg.repository(self.ui, path, create=True)
            if (not self.repo.local()):
                raise NoRepo((_('%s is not a local Mercurial repository') % path))
            self.created.append(path)
        except error.RepoError:
            ui.traceback()
            raise NoRepo((_('could not create hg repository %s as sink') % path))
    self.lock = None
    self.wlock = None
    self.filemapmode = False
