def putcommit(self, files, copies, parents, commit, source, revmap):
    files = dict(files)

    def getfilectx(repo, memctx, f):
        v = files[f]
        data = source.getfile(f, v)
        e = source.getmode(f, v)
        if (f == '.hgtags'):
            data = self._rewritetags(source, revmap, data)
        return context.memfilectx(f, data, ('l' in e), ('x' in e), copies.get(f))
    pl = []
    for p in parents:
        if (p not in pl):
            pl.append(p)
    parents = pl
    nparents = len(parents)
    if (self.filemapmode and (nparents == 1)):
        m1node = self.repo.changelog.read(bin(parents[0]))[0]
        parent = parents[0]
    if (len(parents) < 2):
        parents.append(nullid)
    if (len(parents) < 2):
        parents.append(nullid)
    p2 = parents.pop(0)
    text = commit.desc
    extra = commit.extra.copy()
    if (self.branchnames and commit.branch):
        extra['branch'] = commit.branch
    if commit.rev:
        extra['convert_revision'] = commit.rev
    while parents:
        p1 = p2
        p2 = parents.pop(0)
        ctx = context.memctx(self.repo, (p1, p2), text, files.keys(), getfilectx, commit.author, commit.date, extra)
        self.repo.commitctx(ctx)
        text = '(octopus merge fixup)\n'
        p2 = hex(self.repo.changelog.tip())
    if (self.filemapmode and (nparents == 1)):
        man = self.repo.manifest
        mnode = self.repo.changelog.read(bin(p2))[0]
        if (not man.cmp(m1node, man.revision(mnode))):
            self.ui.status(_('filtering out empty revision\n'))
            self.repo.rollback()
            return parent
    return p2
