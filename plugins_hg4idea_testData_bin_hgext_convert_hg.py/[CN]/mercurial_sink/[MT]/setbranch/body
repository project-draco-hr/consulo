def setbranch(self, branch, pbranches):
    if (not self.clonebranches):
        return
    setbranch = (branch != self.lastbranch)
    self.lastbranch = branch
    if (not branch):
        branch = 'default'
    pbranches = [(b[0], ((b[1] and b[1]) or 'default')) for b in pbranches]
    pbranch = ((pbranches and pbranches[0][1]) or 'default')
    branchpath = os.path.join(self.path, branch)
    if setbranch:
        self.after()
        try:
            self.repo = hg.repository(self.ui, branchpath)
        except:
            self.repo = hg.repository(self.ui, branchpath, create=True)
        self.before()
    missings = {}
    for b in pbranches:
        try:
            self.repo.lookup(b[0])
        except:
            missings.setdefault(b[1], []).append(b[0])
    if missings:
        self.after()
        for (pbranch, heads) in missings.iteritems():
            pbranchpath = os.path.join(self.path, pbranch)
            prepo = hg.repository(self.ui, pbranchpath)
            self.ui.note((_('pulling from %s into %s\n') % (pbranch, branch)))
            self.repo.pull(prepo, [prepo.lookup(h) for h in heads])
        self.before()
