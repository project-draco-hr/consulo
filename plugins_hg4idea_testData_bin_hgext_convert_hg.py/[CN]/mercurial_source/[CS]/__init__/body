def __init__(self, ui, path, rev=None):
    converter_source.__init__(self, ui, path, rev)
    self.ignoreerrors = ui.configbool('convert', 'hg.ignoreerrors', False)
    self.ignored = set()
    self.saverev = ui.configbool('convert', 'hg.saverev', False)
    try:
        self.repo = hg.repository(self.ui, path)
        if (not self.repo.local()):
            raise error.RepoError()
    except error.RepoError:
        ui.traceback()
        raise NoRepo((_('%s is not a local Mercurial repository') % path))
    self.lastrev = None
    self.lastctx = None
    self._changescache = None
    self.convertfp = None
    startnode = ui.config('convert', 'hg.startrev')
    if (startnode is not None):
        try:
            startnode = self.repo.lookup(startnode)
        except error.RepoError:
            raise util.Abort((_('%s is not a valid start revision') % startnode))
        startrev = self.repo.changelog.rev(startnode)
        children = {startnode: 1, }
        for rev in self.repo.changelog.descendants(startrev):
            children[self.repo.changelog.node(rev)] = 1
        self.keep = children.__contains__
    else:
        self.keep = util.always
