{
  final TreePath path=tree.getPathForRow(row);
  if (path == null)   return;
  final int size=tree.getRowCount();
  if (size == 0) {
    tree.clearSelection();
    return;
  }
  if (top < 0) {
    top=0;
  }
  if (bottom >= size) {
    bottom=size - 1;
  }
  final Rectangle rowBounds=tree.getRowBounds(row);
  if (rowBounds == null)   return;
  Rectangle topBounds=tree.getRowBounds(top);
  if (topBounds == null) {
    topBounds=rowBounds;
  }
  Rectangle bottomBounds=tree.getRowBounds(bottom);
  if (bottomBounds == null) {
    bottomBounds=rowBounds;
  }
  Rectangle bounds=topBounds.union(bottomBounds);
  bounds.x=rowBounds.x;
  bounds.width=rowBounds.width;
  final Rectangle visible=tree.getVisibleRect();
  if (visible.contains(bounds)) {
    bounds=null;
  }
 else {
    final Component comp=tree.getCellRenderer().getTreeCellRendererComponent(tree,path.getLastPathComponent(),true,true,false,row,false);
    if (comp instanceof SimpleColoredComponent) {
      final SimpleColoredComponent renderer=((SimpleColoredComponent)comp);
      final Dimension scrollableSize=renderer.computePreferredSize(true);
      bounds.width=scrollableSize.width;
    }
  }
  if (!tree.isRowSelected(row)) {
    tree.setSelectionRow(row);
  }
  if (bounds != null) {
    final Range<Integer> range=getExpandControlRange(tree,path);
    if (range != null) {
      int delta=bounds.x - range.getFrom().intValue();
      bounds.x-=delta;
      bounds.width-=delta;
    }
    if (visible.width < bounds.width) {
      bounds.width=visible.width;
    }
    final boolean siblings=areSiblings(path,tree.getPathForRow(previous));
    boolean totallyInvisible=!visible.contains(bounds) && !visible.intersects(bounds);
    if (siblings && !totallyInvisible) {
      bounds.x=visible.x;
      bounds.width=visible.width;
    }
    tree.scrollRectToVisible(bounds);
  }
}
