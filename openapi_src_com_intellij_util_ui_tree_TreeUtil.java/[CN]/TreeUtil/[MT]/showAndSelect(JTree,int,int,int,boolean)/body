{
  final int size=tree.getRowCount();
  if (size == 0) {
    tree.clearSelection();
    return;
  }
  if (top < 0) {
    top=0;
  }
  if (bottom >= size) {
    bottom=size - 1;
  }
  final Rectangle topBounds=tree.getRowBounds(top);
  final Rectangle bottomBounds=tree.getRowBounds(bottom);
  final Rectangle bounds;
  if (topBounds == null) {
    bounds=bottomBounds;
  }
 else   if (bottomBounds == null) {
    bounds=topBounds;
  }
 else {
    bounds=topBounds.union(bottomBounds);
  }
  if (bounds != null) {
    final TreePath path=tree.getPathForRow(row);
    if (path != null && path.getParentPath() != null) {
      final Rectangle parentBounds=tree.getPathBounds(path.getParentPath());
      if (parentBounds != null) {
        bounds.x=parentBounds.x;
      }
    }
    if (!centerHorizontally) {
      bounds.x=0;
      bounds.width=tree.getWidth();
    }
 else {
      bounds.width=Math.min(bounds.width,tree.getVisibleRect().width);
    }
    tree.scrollRectToVisible(bounds);
  }
  if (!tree.isRowSelected(row)) {
    tree.setSelectionRow(row);
  }
}
