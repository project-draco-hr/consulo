{
  final VirtualFile contentRoot=getContentRoot(model);
  LOG.assertTrue(contentRoot != null);
  final String rootPath=contentRoot.getPath();
  String url=null;
  if (new File(path).exists()) {
    url=VfsUtil.pathToUrl(path);
  }
 else {
    final String relativePath=new File(rootPath,path).getPath();
    final File file=new File(relativePath);
    if (file.exists()) {
      url=VfsUtil.pathToUrl(relativePath);
    }
 else     if (path.startsWith("/")) {
      final String moduleName=getRelativeModuleName(path);
      final String relativeToRootPath=getRelativeToModulePath(path);
      final Module otherModule=ModuleManager.getInstance(model.getModule().getProject()).findModuleByName(moduleName);
      if (otherModule != null && otherModule != model.getModule()) {
        url=expandEclipseRelative2OtherModule(otherModule,relativeToRootPath);
      }
 else       if (currentRoots != null) {
        url=expandEclipseRelative2ContentRoots(currentRoots,moduleName,relativeToRootPath);
      }
    }
  }
  if (url == null) {
    url=VfsUtil.pathToUrl(path);
  }
  final VirtualFile localFile=VirtualFileManager.getInstance().findFileByUrl(url);
  if (localFile != null) {
    final VirtualFile jarFile=JarFileSystem.getInstance().getJarRootForLocalFile(localFile);
    if (jarFile != null) {
      url=jarFile.getUrl();
    }
  }
  return url;
}
