{
  final MyWorker worker=new MyWorker();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      worker.execute(line,entireLength);
    }
  }
);
  if (worker.getResult() != null) {
    final PsiMethod[] methodsByName=worker.getPsiClass().findMethodsByName(worker.getMethod(),false);
    if (methodsByName.length > 0) {
    }
    VcsContentAnnotation.Details details=VcsContentAnnotationImpl.getInstance(myProject).annotateLine(worker.getFile().getVirtualFile(),new BeforeAfter<Integer>(-1,-1),lineNumber);
    if (details != null) {
      if (details.isFileChanged()) {
        final int textStartOffset=entireLength - line.length();
        int idx=line.indexOf(':',worker.getInfo().getThird().getStartOffset());
        int endIdx=idx == -1 ? worker.getInfo().getThird().getEndOffset() : idx;
        consumer.consume(new AdditionalHighlight(textStartOffset + worker.getInfo().getThird().getStartOffset() + 1,textStartOffset + endIdx){
          @Override public TextAttributes getTextAttributes(          @Nullable TextAttributes source){
            if (source == null) {
              TextAttributes atts=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.CLASS_NAME_ATTRIBUTES).clone();
              atts.setBackgroundColor(CHANGED_BACKGROUND);
              return atts;
            }
            TextAttributes clone=source.clone();
            clone.setBackgroundColor(CHANGED_BACKGROUND);
            return clone;
          }
        }
);
      }
    }
  }
}
