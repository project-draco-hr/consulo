{
  final Trinity<String,String,TextRange> info=parseExceptionLine(line);
  if (info == null) {
    return null;
  }
  String className=info.first;
  final int dollarIndex=className.indexOf('$');
  if (dollarIndex >= 0) {
    className=className.substring(0,dollarIndex);
  }
  final int lparenthIndex=info.third.getStartOffset();
  final int rparenthIndex=info.third.getEndOffset();
  final String fileAndLine=line.substring(lparenthIndex + 1,rparenthIndex).trim();
  final int colonIndex=fileAndLine.lastIndexOf(':');
  if (colonIndex < 0)   return null;
  final String lineString=fileAndLine.substring(colonIndex + 1);
  try {
    final int lineNumber=Integer.parseInt(lineString);
    final PsiManager manager=PsiManager.getInstance(myProject);
    PsiClass aClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(className,mySearchScope);
    if (aClass == null) {
      aClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(className,GlobalSearchScope.allScope(myProject));
      if (aClass == null)       return null;
    }
    final PsiFile file=(PsiFile)aClass.getContainingFile().getNavigationElement();
    if (file == null)     return null;
    final int textStartOffset=textEndOffset - line.length();
    final int highlightStartOffset=textStartOffset + lparenthIndex + 1;
    final int highlightEndOffset=textStartOffset + rparenthIndex;
    VirtualFile virtualFile=file.getVirtualFile();
    final OpenFileHyperlinkInfo linkInfo=new OpenFileHyperlinkInfo(myProject,virtualFile,lineNumber - 1);
    TextAttributes attributes=HYPERLINK_ATTRIBUTES.clone();
    if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(virtualFile)) {
      Color color=UIUtil.getTextInactiveTextColor();
      attributes.setForegroundColor(color);
      attributes.setEffectColor(color);
    }
    return new Result(highlightStartOffset,highlightEndOffset,linkInfo,attributes);
  }
 catch (  NumberFormatException e) {
    return null;
  }
}
