{
  myIconLabel=new JLabel();
  myTextField=new JTextField(){
    public Dimension getPreferredSize(){
      Dimension prefSize=super.getPreferredSize();
      Dimension minSize=new Dimension(getColumnWidth() * 3,prefSize.height - 1);
      prefSize.width=prefSize.width + 15;
      return LayoutHelper.computeNotSmallerDimension(prefSize,minSize);
    }
  }
;
  myTextField.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
case KeyEvent.VK_TAB:
        if (stopCellEditing()) {
          myTree.stopEditing();
          myTree.requestFocusInWindow();
        }
      break;
case KeyEvent.VK_ESCAPE:
    if (myTree instanceof SimpleTree) {
      ((SimpleTree)myTree).setEscapePressed();
    }
  myTree.cancelEditing();
myTree.requestFocusInWindow();
break;
}
}
}
);
myComponent=new NonOpaquePanel(){
public void invalidate(){
super.invalidate();
Dimension size=getSize();
size.width=myTextField.getPreferredSize().width + myIconLabel.getPreferredSize().width + myIconTextGap;
myComponent.setSize(size);
myTree.revalidate();
}
}
;
myComponent.addFocusListener(new FocusAdapter(){
public void focusGained(FocusEvent e){
myTextField.requestFocus();
StringUtil.selectLastFragment(myTextField);
}
public void focusLost(FocusEvent e){
if (e.getOppositeComponent() != myTextField) {
myTree.stopEditing();
}
}
}
);
}
