{
  myProject=project;
  myConnection=myProject.getMessageBus().connect(myProject);
  myVcs=SvnVcs.getInstance(myProject);
  myCurrentInfoList=null;
  final Runnable focus=new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(myProject).requestFocus(myRefreshLabel,true);
    }
  }
;
  final Runnable refreshView=new Runnable(){
    public void run(){
      final List<WCInfo> infoList=myVcs.getAllWcInfos();
      if (myCurrentInfoList != null) {
        final List<OverrideEqualsWrapper<WCInfo>> newList=ObjectsConvertor.convert(infoList,new Convertor<WCInfo,OverrideEqualsWrapper<WCInfo>>(){
          public OverrideEqualsWrapper<WCInfo> convert(          WCInfo o){
            return new OverrideEqualsWrapper<WCInfo>(InfoEqualityPolicy.getInstance(),o);
          }
        }
,ObjectsConvertor.NOT_NULL);
        if (Comparing.haveEqualElements(newList,myCurrentInfoList)) {
          myRefreshLabel.setEnabled(true);
          return;
        }
        myCurrentInfoList=newList;
      }
      Collections.sort(infoList,WCComparator.getInstance());
      updateList(infoList);
      myRefreshLabel.setEnabled(true);
      SwingUtilities.invokeLater(focus);
    }
  }
;
  myConnection.subscribe(SvnVcs.ROOTS_RELOADED,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().invokeLater(refreshView,ModalityState.NON_MODAL);
    }
  }
);
  final JPanel holderPanel=new JPanel(new BorderLayout());
  myPanel=new JPanel(new GridBagLayout());
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(myPanel,BorderLayout.NORTH);
  holderPanel.add(panel,BorderLayout.WEST);
  myRefreshLabel=new LinkLabel("Refresh",null,new LinkListener(){
    public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      if (myRefreshLabel.isEnabled()) {
        myVcs.invokeRefreshSvnRoots(false);
        myRefreshLabel.setEnabled(false);
      }
    }
  }
);
  myHolder=ScrollPaneFactory.createScrollPane(holderPanel);
  setFocusableForLinks(myRefreshLabel);
  refreshView.run();
  initView();
}
