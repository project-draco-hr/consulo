{
  myPanel.removeAll();
  final Insets nullIndent=new Insets(1,3,1,0);
  final GridBagConstraints gb=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(2,2,0,0),0,0);
  gb.insets.left=4;
  myPanel.add(myRefreshLabel,gb);
  gb.insets.left=1;
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final Insets topIndent=new Insets(10,3,0,0);
  for (  final WCInfo wcInfo : infoList) {
    final JPanel copyPanel=new JPanel(new GridBagLayout());
    final GridBagConstraints gb1=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,nullIndent,0,0);
    gb1.insets.top=1;
    gb1.gridwidth=3;
    gb.insets=topIndent;
    gb.fill=GridBagConstraints.HORIZONTAL;
    ++gb.gridy;
    final JPanel contForCopy=new JPanel(new BorderLayout());
    contForCopy.add(copyPanel,BorderLayout.WEST);
    myPanel.add(contForCopy,gb);
    final JTextField path=createField(wcInfo.getPath());
    copyPanel.add(path,gb1);
    path.setFont(path.getFont().deriveFont(Font.BOLD));
    gb1.insets=nullIndent;
    gb1.insets.top=5;
    ++gb1.gridy;
    final JTextField url=createField("URL: " + wcInfo.getRootUrl());
    copyPanel.add(url,gb1);
    ++gb1.gridy;
    gb1.insets.top=1;
    final JTextField format=createField("Format: " + wcInfo.getFormat().getName());
    copyPanel.add(format,gb1);
    gb1.gridx=2;
    final LinkLabel changeFormatLabel=new MyLinkLabel(myTextHeight,"Change",new LinkListener(){
      public void linkSelected(      LinkLabel aSource,      Object aLinkData){
        changeFormat(wcInfo);
      }
    }
);
    copyPanel.add(changeFormatLabel,gb1);
    setFocusableForLinks(changeFormatLabel);
    gb1.gridx=0;
    ++gb1.gridy;
    final JTextField depth=createField("Depth: " + wcInfo.getStickyDepth().getName());
    copyPanel.add(depth,gb1);
    if (!SVNDepth.INFINITY.equals(wcInfo.getStickyDepth())) {
      gb1.gridx=2;
      final LinkLabel fixDepthLabel=new MyLinkLabel(myTextHeight,"Make infinity",new LinkListener(){
        public void linkSelected(        LinkLabel aSource,        Object aLinkData){
          final int result=Messages.showOkCancelDialog(myVcs.getProject(),"You are going to checkout into '" + wcInfo.getPath() + "' with 'infinity' depth.\n"+ "This will update your working copy to HEAD revision as well.","Set working copy infinity depth",Messages.getWarningIcon());
          if (result == 0) {
            SvnCheckoutProvider.checkout(myVcs.getProject(),new File(wcInfo.getPath()),wcInfo.getRootUrl(),SVNRevision.HEAD,SVNDepth.INFINITY,false,null,wcInfo.getFormat());
          }
        }
      }
);
      copyPanel.add(fixDepthLabel,gb1);
      setFocusableForLinks(fixDepthLabel);
      gb1.gridx=0;
    }
    final NestedCopyType type=wcInfo.getType();
    if (NestedCopyType.external.equals(type) || NestedCopyType.switched.equals(type)) {
      ++gb1.gridy;
      final JTextField whetherNested=createField(type.getName() + " copy");
      copyPanel.add(whetherNested,gb1);
      whetherNested.setFont(whetherNested.getFont().deriveFont(Font.ITALIC));
    }
    if (wcInfo.isIsWcRoot()) {
      ++gb1.gridy;
      final JTextField whetherRoot=createField("Working copy root");
      copyPanel.add(whetherRoot,gb1);
      whetherRoot.setFont(whetherRoot.getFont().deriveFont(Font.ITALIC));
    }
    gb1.gridwidth=1;
    gb1.insets.top=5;
    ++gb1.gridy;
    final VirtualFile vf=lfs.refreshAndFindFileByIoFile(new File(wcInfo.getPath()));
    final VirtualFile root=(vf == null) ? wcInfo.getVcsRoot() : vf;
    final LinkLabel configureBranchesLabel=new MyLinkLabel(myTextHeight,"Configure Branches",new LinkListener(){
      public void linkSelected(      LinkLabel aSource,      Object aLinkData){
        BranchConfigurationDialog.configureBranches(myProject,root,true);
      }
    }
);
    if (root == null) {
      configureBranchesLabel.setEnabled(false);
    }
    copyPanel.add(configureBranchesLabel,gb1);
    setFocusableForLinks(configureBranchesLabel);
    ++gb1.gridy;
    final LinkLabel mergeLabel=new MyLinkLabel(myTextHeight,"Merge from...",null);
    mergeLabel.setListener(new LinkListener(){
      public void linkSelected(      LinkLabel aSource,      Object aLinkData){
        mergeFrom(wcInfo,root,mergeLabel);
      }
    }
,null);
    if (root == null) {
      mergeLabel.setEnabled(false);
    }
    final Font font=mergeLabel.getFont();
    mergeLabel.setFont(font.deriveFont(Font.BOLD));
    mergeLabel.setForeground(mergeLabel.getForeground().darker());
    copyPanel.add(mergeLabel,gb1);
    setFocusableForLinks(mergeLabel);
  }
  myPanel.revalidate();
  myPanel.repaint();
}
