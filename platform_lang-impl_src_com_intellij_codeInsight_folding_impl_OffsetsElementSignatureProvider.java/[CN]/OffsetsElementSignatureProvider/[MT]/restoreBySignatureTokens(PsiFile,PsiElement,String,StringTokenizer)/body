{
  if (!TYPE_MARKER.equals(type)) {
    return null;
  }
  int start;
  int end;
  try {
    start=Integer.parseInt(tokenizer.nextToken());
    end=Integer.parseInt(tokenizer.nextToken());
  }
 catch (  NumberFormatException e) {
    return null;
  }
  PsiElement element=file.findElementAt(start);
  if (element == null) {
    return null;
  }
  TextRange range=element.getTextRange();
  while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) {
    element=element.getParent();
    range=element.getTextRange();
  }
  if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) {
    return null;
  }
  int index=0;
  if (tokenizer.hasMoreTokens()) {
    try {
      index=Integer.parseInt(tokenizer.nextToken());
    }
 catch (    NumberFormatException e) {
    }
  }
  int indexFromRoot=0;
  for (PsiElement e=element.getParent(); e != null && range.equals(e.getTextRange()); e=e.getParent()) {
    indexFromRoot++;
  }
  if (index > indexFromRoot) {
    int steps=index - indexFromRoot;
    PsiElement result=element;
    for (PsiElement e=result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e=e.getFirstChild()) {
      result=e;
    }
    return result;
  }
  int steps=indexFromRoot - index;
  PsiElement result=element;
  while (--steps >= 0) {
    result=result.getParent();
  }
  return result;
}
