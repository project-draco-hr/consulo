{
  if (!TYPE_MARKER.equals(type)) {
    if (processingInfoStorage != null) {
      processingInfoStorage.append(String.format("Stopping '%s' provider because given signature doesn't have expected type - can work with '%s' but got '%s'%n",getClass().getName(),TYPE_MARKER,type));
    }
    return null;
  }
  int start;
  int end;
  try {
    start=Integer.parseInt(tokenizer.nextToken());
    end=Integer.parseInt(tokenizer.nextToken());
  }
 catch (  NumberFormatException e) {
    return null;
  }
  if (processingInfoStorage != null) {
    processingInfoStorage.append(String.format("Parsed target offsets - [%d; %d)%n",start,end));
  }
  int index=0;
  if (tokenizer.hasMoreTokens()) {
    try {
      index=Integer.parseInt(tokenizer.nextToken());
    }
 catch (    NumberFormatException e) {
    }
  }
  PsiElement result=null;
  FileViewProvider viewProvider=file.getViewProvider();
  for (  PsiFile psiFile : viewProvider.getAllFiles()) {
    PsiElement element=viewProvider.findElementAt(start,psiFile.getLanguage());
    if (element != null) {
      result=findElement(start,end,index,element,processingInfoStorage);
      if (result != null) {
        break;
      }
 else       if (processingInfoStorage != null) {
        processingInfoStorage.append(String.format("Failed to find an element by the given offsets for language %s. Started by the element '%s' (%s)",psiFile.getLanguage(),element,element.getText()));
      }
      final PsiElement injectedStartElement=InjectedLanguageUtil.findElementAtNoCommit(psiFile,start);
      if (processingInfoStorage != null) {
        processingInfoStorage.append(String.format("Trying to find injected element starting from the '%s'%s%n",injectedStartElement,injectedStartElement == null ? "" : String.format("(%s)",injectedStartElement.getText())));
      }
      if (injectedStartElement != null && injectedStartElement != element) {
        result=findElement(start,end,index,injectedStartElement,processingInfoStorage);
      }
    }
  }
  return result;
}
