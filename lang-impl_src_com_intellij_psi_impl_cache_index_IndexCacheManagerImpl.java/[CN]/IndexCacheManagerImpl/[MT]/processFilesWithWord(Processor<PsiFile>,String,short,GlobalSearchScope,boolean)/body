{
  Processor<VirtualFile> virtualFileProcessor=new Processor<VirtualFile>(){
    public boolean process(    final VirtualFile virtualFile){
      LOG.assertTrue(virtualFile.isValid());
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          if (scope.contains(virtualFile)) {
            final PsiFile psiFile=myPsiManager.findFile(virtualFile);
            return psiFile == null || psiFileProcessor.process(psiFile);
          }
          return Boolean.TRUE;
        }
      }
);
    }
  }
;
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  final Set<VirtualFile> vFiles=new HashSet<VirtualFile>();
  final int stop=(((int)UsageSearchContext.ANY) & 0xFF) + 1;
  for (int mask=0x1; mask < stop; mask<<=1) {
    if ((mask & occurrenceMask) != 0) {
      vFiles.addAll(fileBasedIndex.getContainingFiles(IdIndex.NAME,new IdIndexEntry(word,mask,caseSensitively),myProject));
    }
  }
  for (  VirtualFile vFile : vFiles) {
    if (!virtualFileProcessor.process(vFile)) {
      return false;
    }
  }
  return true;
}
