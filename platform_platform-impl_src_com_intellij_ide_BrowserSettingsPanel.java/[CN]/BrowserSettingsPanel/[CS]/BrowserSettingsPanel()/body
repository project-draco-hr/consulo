{
  setLayout(new BorderLayout());
  final JPanel outerPanel=new JPanel();
  outerPanel.setLayout(new BoxLayout(outerPanel,BoxLayout.Y_AXIS));
  final JPanel genericPanel=new JPanel();
  genericPanel.setBorder(IdeBorderFactory.createTitledBorder("Default Web Browser",true));
  genericPanel.setLayout(new BoxLayout(genericPanel,BoxLayout.Y_AXIS));
  final JPanel innerPanel1=new JPanel(new BorderLayout());
  final ButtonGroup group=new ButtonGroup();
  myUseDefaultBrowser=new JRadioButton("Use system default browser");
  group.add(myUseDefaultBrowser);
  innerPanel1.add(myUseDefaultBrowser,BorderLayout.WEST);
  genericPanel.add(innerPanel1);
  final JPanel innerPanel2=new JPanel(new BorderLayout());
  myUseAlternativeBrowser=new JRadioButton("Use");
  group.add(myUseAlternativeBrowser);
  innerPanel2.add(myUseAlternativeBrowser,BorderLayout.WEST);
  myBrowserPathField=new TextFieldWithBrowseButton();
  innerPanel2.add(myBrowserPathField,BorderLayout.CENTER);
  genericPanel.add(innerPanel2);
  JPanel innerPanel3=new JPanel(new BorderLayout());
  myConfirmExtractFiles=new JCheckBox("Show confirmation before extracting files");
  myClearExtractedFiles=new JButton("Clear extracted files");
  myClearExtractedFiles.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BrowserUtil.clearExtractedFiles();
    }
  }
);
  innerPanel3.add(myConfirmExtractFiles,BorderLayout.CENTER);
  innerPanel3.add(myClearExtractedFiles,BorderLayout.EAST);
  genericPanel.add(innerPanel3);
  outerPanel.add(genericPanel);
  FileChooserDescriptor descriptor=SystemInfo.isMac ? new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      return file.getName().endsWith(".app");
    }
  }
 : FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
  myBrowserPathField.addBrowseFolderListener(IdeBundle.message("title.select.path.to.browser"),null,null,descriptor);
  if (BrowserUtil.canStartDefaultBrowser()) {
    ActionListener actionListener=new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        updateBrowserField();
      }
    }
;
    myUseDefaultBrowser.addActionListener(actionListener);
    myUseAlternativeBrowser.addActionListener(actionListener);
  }
 else {
    myUseDefaultBrowser.setVisible(false);
    myUseAlternativeBrowser.setVisible(false);
  }
  mySettingsProviders=AbstractConfigurableEP.createConfigurables(BrowserSettingsProviderEP.EP_NAME);
  for (  BrowserSettingsProvider settingsProvider : mySettingsProviders) {
    outerPanel.add(settingsProvider.createComponent());
  }
  add(outerPanel,BorderLayout.NORTH);
}
