{
  ConnectionSettingsImpl connectionSettings=new ConnectionSettingsImpl(settings.HOST,getPort(sshConfiguration),proxySettings.USE_PROXY,proxySettings.PROXY_HOST,proxySettings.PROXY_PORT,timeout,proxySettings.getType(),proxySettings.getLogin(),proxySettings.getPassword());
  if (sshConfiguration.USE_PPK) {
    return new SshPublicKeyMaverickConnection(connectionSettings,settings.USER,new File(sshConfiguration.PATH_TO_PPK),sshPasswordProvider.getPPKPasswordForCvsRoot(settings.getCvsRootAsString()),sshConfiguration.SSH_TYPE,new PublicKeyVerification(){
      public boolean allowsPublicKey(      String host,      int keyLength,      String fingerprint,      String algorithmName){
        return true;
      }
    }
,settings.REPOSITORY);
  }
 else {
    return new SshPasswordMaverickConnection(connectionSettings,settings.USER,sshPasswordProvider.getPasswordForCvsRoot(settings.getCvsRootAsString()),sshConfiguration.SSH_TYPE,new PublicKeyVerification(){
      public boolean allowsPublicKey(      String host,      int keyLength,      String fingerprint,      String algorithmName){
        return true;
      }
    }
,settings.REPOSITORY);
  }
}
