{
  final PsiElement[] elements=context != null ? LangDataKeys.PSI_ELEMENT_ARRAY.getData(context.getDataContext()) : null;
  if (elements != null && TestNGPatternConfigurationProducer.collectTestMembers(elements).size() > 1) {
    return false;
  }
  PsiClass psiClass=null;
  PsiElement element=context.getPsiLocation();
  while (element != null) {
    if (element instanceof PsiClass && isTestNGClass((PsiClass)element)) {
      psiClass=(PsiClass)element;
      break;
    }
 else     if (element instanceof PsiMember) {
      psiClass=((PsiMember)element).getContainingClass();
      if (isTestNGClass(psiClass)) {
        break;
      }
    }
 else     if (element instanceof PsiClassOwner) {
      final PsiClass[] classes=((PsiClassOwner)element).getClasses();
      if (classes.length == 1) {
        psiClass=classes[0];
        break;
      }
    }
    element=element.getParent();
  }
  if (!isTestNGClass(psiClass))   return false;
  myPsiElement=psiClass;
  final Project project=context.getProject();
  RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(context);
  setupConfigurationModule(context,configuration);
  final Module originalModule=configuration.getConfigurationModule().getModule();
  configuration.setClassConfiguration(psiClass);
  PsiMethod method=PsiTreeUtil.getParentOfType(context.getPsiLocation(),PsiMethod.class,false);
  while (method != null) {
    if (TestNGUtil.hasTest(method)) {
      configuration.setMethodConfiguration(PsiLocation.fromPsiElement(project,method));
      myPsiElement=method;
    }
    method=PsiTreeUtil.getParentOfType(method,PsiMethod.class);
  }
  configuration.restoreOriginalModule(originalModule);
  settings.setName(configuration.getName());
  sourceElement.set(myPsiElement);
  return true;
}
