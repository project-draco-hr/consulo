{
  if (myPsiElement instanceof PsiMethod) {
    final PsiMethod psiMethod=(PsiMethod)myPsiElement;
    final PsiClass containingClass=psiMethod.getContainingClass();
    final InheritorChooser inheritorChooser=new InheritorChooser(){
      @Override protected void runForClasses(      List<PsiClass> classes,      PsiMethod method,      ConfigurationContext context,      Runnable performRunnable){
        ((TestNGConfiguration)context.getConfiguration().getConfiguration()).bePatternConfiguration(classes,method);
        super.runForClasses(classes,method,context,performRunnable);
      }
      @Override protected void runForClass(      PsiClass aClass,      PsiMethod psiMethod,      ConfigurationContext context,      Runnable performRunnable){
        final Project project=psiMethod.getProject();
        final MethodLocation methodLocation=new MethodLocation(project,psiMethod,PsiLocation.fromPsiElement(aClass));
        ((TestNGConfiguration)context.getConfiguration().getConfiguration()).setMethodConfiguration(methodLocation);
        super.runForClass(aClass,psiMethod,context,performRunnable);
      }
    }
;
    if (inheritorChooser.runMethodInAbstractClass(context,performRunnable,psiMethod,containingClass))     return;
  }
  super.perform(context,performRunnable);
}
