{
  if (myPsiElement instanceof PsiMethod || myPsiElement instanceof PsiClass) {
    final PsiMethod psiMethod;
    final PsiClass containingClass;
    if (myPsiElement instanceof PsiMethod) {
      psiMethod=(PsiMethod)myPsiElement;
      containingClass=psiMethod.getContainingClass();
    }
 else {
      psiMethod=null;
      containingClass=(PsiClass)myPsiElement;
    }
    final InheritorChooser inheritorChooser=new InheritorChooser(){
      @Override protected void runForClasses(      List<PsiClass> classes,      PsiMethod method,      ConfigurationContext context,      Runnable performRunnable){
        ((TestNGConfiguration)context.getConfiguration().getConfiguration()).bePatternConfiguration(classes,method);
        super.runForClasses(classes,method,context,performRunnable);
      }
      @Override protected void runForClass(      PsiClass aClass,      PsiMethod psiMethod,      ConfigurationContext context,      Runnable performRunnable){
        if (myPsiElement instanceof PsiMethod) {
          final Project project=psiMethod.getProject();
          final MethodLocation methodLocation=new MethodLocation(project,psiMethod,PsiLocation.fromPsiElement(aClass));
          ((TestNGConfiguration)context.getConfiguration().getConfiguration()).setMethodConfiguration(methodLocation);
        }
 else {
          ((TestNGConfiguration)context.getConfiguration().getConfiguration()).setClassConfiguration(aClass);
        }
        super.runForClass(aClass,psiMethod,context,performRunnable);
      }
    }
;
    if (inheritorChooser.runMethodInAbstractClass(context,performRunnable,psiMethod,containingClass))     return;
  }
  super.perform(context,performRunnable);
}
