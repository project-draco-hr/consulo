{
  PsiElement element=location.getPsiElement();
  PsiClass psiClass=null;
  for (Iterator<Location<PsiClass>> iterator=location.getAncestors(PsiClass.class,false); iterator.hasNext(); ) {
    psiClass=iterator.next().getPsiElement();
    if (TestNGUtil.hasTest(psiClass))     break;
  }
  if (psiClass == null) {
    if (element instanceof PsiClassOwner) {
      PsiClass[] classes=((PsiClassOwner)element).getClasses();
      if (classes.length == 1)       psiClass=classes[0];
    }
  }
  if (psiClass == null)   return null;
  if (!PsiClassUtil.isRunnableClass(psiClass,true))   return null;
  if (!TestNGUtil.hasTest(psiClass))   return null;
  myPsiElement=psiClass;
  final Project project=location.getProject();
  RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(project,context);
  final TestNGConfiguration configuration=(TestNGConfiguration)settings.getConfiguration();
  setupConfigurationModule(context,configuration);
  final Module originalModule=configuration.getConfigurationModule().getModule();
  configuration.setClassConfiguration(psiClass);
  PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class,false);
  if (method != null && TestNGUtil.hasTest(method)) {
    configuration.setMethodConfiguration(PsiLocation.fromPsiElement(project,method));
    myPsiElement=method;
  }
  configuration.restoreOriginalModule(originalModule);
  settings.setName(configuration.getName());
  RunConfigurationExtension.patchCreatedConfiguration(configuration);
  return settings;
}
