{
  PsiClass psiClass=null;
  PsiElement element=location.getPsiElement();
  while (element != null) {
    if (element instanceof PsiClass) {
      psiClass=(PsiClass)element;
      break;
    }
 else     if (element instanceof PsiMember) {
      psiClass=((PsiMember)element).getContainingClass();
      break;
    }
 else     if (element instanceof PsiClassOwner) {
      final PsiClass[] classes=((PsiClassOwner)element).getClasses();
      if (classes.length == 1) {
        psiClass=classes[0];
        break;
      }
    }
    element=element.getParent();
  }
  if (psiClass == null || !PsiClassUtil.isRunnableClass(psiClass,true) || !TestNGUtil.hasTest(psiClass))   return null;
  myPsiElement=psiClass;
  final Project project=location.getProject();
  RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(project,context);
  final TestNGConfiguration configuration=(TestNGConfiguration)settings.getConfiguration();
  setupConfigurationModule(context,configuration);
  final Module originalModule=configuration.getConfigurationModule().getModule();
  configuration.setClassConfiguration(psiClass);
  final PsiMethod method=PsiTreeUtil.getParentOfType(location.getPsiElement(),PsiMethod.class,false);
  if (method != null && TestNGUtil.hasTest(method)) {
    configuration.setMethodConfiguration(PsiLocation.fromPsiElement(project,method));
    myPsiElement=method;
  }
  configuration.restoreOriginalModule(originalModule);
  settings.setName(configuration.getName());
  JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration,location);
  return settings;
}
