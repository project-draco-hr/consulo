{
  final PsiJavaFile file=(PsiJavaFile)createLightFile("test.java",source);
  final FileASTNode fileNode=file.getNode();
  assertNotNull(fileNode);
  assertFalse(fileNode.isParsed());
  long t1=System.nanoTime();
  final StubElement lighterTree=NEW_BUILDER.buildStubTree(file);
  t1=(System.nanoTime() - t1) / 1000;
  assertFalse(fileNode.isParsed());
  long t2=System.nanoTime();
  final StubElement originalTree=OLD_BUILDER.buildStubTree(file);
  t2=(System.nanoTime() - t2) / 1000;
  assertTrue(fileNode.isParsed());
  long t3=System.nanoTime();
  final StubElement lighterTree2=NEW_BUILDER.buildStubTree(file);
  t3=(System.nanoTime() - t3) / 1000;
  long t4=System.nanoTime();
  OLD_BUILDER.buildStubTree(file);
  t4=(System.nanoTime() - t4) / 1000;
  final String lightStr=DebugUtil.stubTreeToString(lighterTree);
  final String originalStr=DebugUtil.stubTreeToString(originalTree);
  final String lightStr2=DebugUtil.stubTreeToString(lighterTree2);
  if (tree != null) {
    System.out.println("light=" + t1 + "mks, heavy="+ t2+ "mks, gain="+ (100 * (t2 - t1) / t2)+ "%");
    System.out.println("light(2nd)=" + t3 + "mks, heavy(2nd)="+ t4+ "mks, overhead="+ (100 * (t3 - t4) / t4)+ "%");
    assertEquals("wrong test data",tree,originalStr);
    if (!"".equals(tree)) {
      assertEquals("light tree differs",tree,lightStr);
      assertEquals("light tree (2nd) differs",tree,lightStr2);
    }
  }
 else {
    assertEquals(originalStr,lightStr);
  }
}
