{
  PsiReferenceExpression ref;
  final PsiJavaCodeReferenceElement qualifier;
  final PsiManager manager=field.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  if (field.hasModifierProperty(PsiModifier.STATIC)) {
    ref=(PsiReferenceExpression)factory.createExpressionFromText("A." + name,context);
    qualifier=(PsiReferenceExpression)ref.getQualifierExpression();
    final PsiClass containingClass=field.getContainingClass();
    final PsiReferenceExpression classReference=factory.createReferenceExpression(containingClass);
    qualifier.replace(classReference);
  }
 else {
    PsiClass contextClass=PsiTreeUtil.getParentOfType(context,PsiClass.class);
    if (InheritanceUtil.isInheritorOrSelf(contextClass,field.getContainingClass(),true)) {
      ref=(PsiReferenceExpression)factory.createExpressionFromText("this." + name,context);
      return ref;
    }
    ref=(PsiReferenceExpression)factory.createExpressionFromText("A.this." + name,null);
    qualifier=((PsiThisExpression)ref.getQualifierExpression()).getQualifier();
    final PsiClass containingClass=field.getContainingClass();
    final PsiJavaCodeReferenceElement classReference=factory.createClassReferenceElement(containingClass);
    qualifier.replace(classReference);
  }
  return ref;
}
