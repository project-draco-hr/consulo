{
  int startLineNum=myDocument.getLineNumber(startOffset);
  int endLineNum=myDocument.getLineNumber(endOffset);
  if (endLineNum == startLineNum) {
    return;
  }
  int selectionIndent=-1;
  int selectionStartLine=-1;
  int selectionEndLine=-1;
  int selectionSegment=myTemplate.getVariableSegmentNumber(TemplateImpl.SELECTION);
  if (selectionSegment >= 0) {
    int selectionStart=myTemplate.getSegmentOffset(selectionSegment);
    selectionIndent=0;
    String templateText=myTemplate.getTemplateText();
    while (selectionStart > 0 && templateText.charAt(selectionStart - 1) == ' ') {
      selectionIndent++;
      selectionStart--;
    }
    selectionStartLine=myDocument.getLineNumber(mySegments.getSegmentStart(selectionSegment));
    selectionEndLine=myDocument.getLineNumber(mySegments.getSegmentEnd(selectionSegment));
  }
  int indentLineNum=startLineNum;
  int lineLength=0;
  for (; indentLineNum >= 0; indentLineNum--) {
    lineLength=myDocument.getLineEndOffset(indentLineNum) - myDocument.getLineStartOffset(indentLineNum);
    if (lineLength > 0) {
      break;
    }
  }
  if (indentLineNum < 0) {
    return;
  }
  StringBuilder buffer=new StringBuilder();
  CharSequence text=myDocument.getCharsSequence();
  for (int i=0; i < lineLength; i++) {
    char ch=text.charAt(myDocument.getLineStartOffset(indentLineNum) + i);
    if (ch != ' ' && ch != '\t') {
      break;
    }
    buffer.append(ch);
  }
  if (buffer.length() == 0 && selectionIndent <= 0) {
    return;
  }
  String stringToInsert=buffer.toString();
  for (int i=startLineNum + 1; i <= endLineNum; i++) {
    if (i > selectionStartLine && i <= selectionEndLine) {
      myDocument.insertString(myDocument.getLineStartOffset(i),StringUtil.repeatSymbol(' ',selectionIndent));
    }
 else {
      myDocument.insertString(myDocument.getLineStartOffset(i),stringToInsert);
    }
  }
}
