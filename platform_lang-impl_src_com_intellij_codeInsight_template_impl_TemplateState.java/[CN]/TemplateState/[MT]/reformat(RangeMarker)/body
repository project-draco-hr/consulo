{
  final PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  if (file != null) {
    CodeStyleManager style=CodeStyleManager.getInstance(myProject);
    for (    TemplateOptionalProcessor optionalProcessor : Extensions.getExtensions(TemplateOptionalProcessor.EP_NAME)) {
      optionalProcessor.processText(myProject,myTemplate,myDocument,myTemplateRange,myEditor);
    }
    if (myTemplate.isToIndent()) {
      if (!myTemplateIndented) {
        smartIndent(myTemplateRange.getStartOffset(),myTemplateRange.getEndOffset());
        myTemplateIndented=true;
      }
    }
    if (myTemplate.isToReformat()) {
      try {
        int endSegmentNumber=myTemplate.getEndSegmentNumber();
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        RangeMarker rangeMarker=null;
        if (endSegmentNumber >= 0) {
          int endVarOffset=mySegments.getSegmentStart(endSegmentNumber);
          PsiElement marker=CodeStyleManagerImpl.insertNewLineIndentMarker(file,endVarOffset);
          if (marker != null)           rangeMarker=myDocument.createRangeMarker(marker.getTextRange());
        }
        int startOffset=rangeMarkerToReformat != null ? rangeMarkerToReformat.getStartOffset() : myTemplateRange.getStartOffset();
        int endOffset=rangeMarkerToReformat != null ? rangeMarkerToReformat.getEndOffset() : myTemplateRange.getEndOffset();
        style.reformatText(file,startOffset,endOffset);
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        PsiDocumentManager.getInstance(myProject).doPostponedOperationsAndUnblockDocument(myDocument);
        if (rangeMarker != null && rangeMarker.isValid()) {
          mySegments.replaceSegmentAt(endSegmentNumber,rangeMarker.getStartOffset(),rangeMarker.getEndOffset());
          myDocument.deleteString(rangeMarker.getStartOffset(),rangeMarker.getEndOffset());
          PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        }
        if (endSegmentNumber >= 0) {
          final int offset=mySegments.getSegmentStart(endSegmentNumber);
          final int lineStart=myDocument.getLineStartOffset(myDocument.getLineNumber(offset));
          if (myDocument.getCharsSequence().subSequence(lineStart,offset).toString().trim().length() == 0) {
            final int adjustedOffset=style.adjustLineIndent(file,offset);
            mySegments.replaceSegmentAt(endSegmentNumber,adjustedOffset,adjustedOffset);
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
