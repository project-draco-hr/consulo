{
  final PsiFile file=getPsiFile();
  if (file != null) {
    CodeStyleManager style=CodeStyleManager.getInstance(myProject);
    for (    TemplateOptionalProcessor optionalProcessor : Extensions.getExtensions(TemplateOptionalProcessor.EP_NAME)) {
      optionalProcessor.processText(myProject,myTemplate,myDocument,myTemplateRange,myEditor);
    }
    PsiDocumentManager.getInstance(myProject).doPostponedOperationsAndUnblockDocument(myDocument);
    if (myTemplate.isToIndent()) {
      if (!myTemplateIndented) {
        LOG.assertTrue(myTemplateRange.isValid());
        smartIndent(myTemplateRange.getStartOffset(),myTemplateRange.getEndOffset());
        myTemplateIndented=true;
      }
    }
    if (myTemplate.isToReformat()) {
      try {
        int endSegmentNumber=myTemplate.getEndSegmentNumber();
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        RangeMarker dummyAdjustLineMarkerRange=null;
        int endVarOffset=-1;
        if (endSegmentNumber >= 0) {
          endVarOffset=mySegments.getSegmentStart(endSegmentNumber);
          TextRange range=CodeStyleManagerImpl.insertNewLineIndentMarker(file,myDocument,endVarOffset);
          if (range != null)           dummyAdjustLineMarkerRange=myDocument.createRangeMarker(range);
        }
        int reformatStartOffset=myTemplateRange.getStartOffset();
        int reformatEndOffset=myTemplateRange.getEndOffset();
        if (rangeMarkerToReformat != null) {
          reformatStartOffset=rangeMarkerToReformat.getStartOffset();
          reformatEndOffset=rangeMarkerToReformat.getEndOffset();
        }
        if (dummyAdjustLineMarkerRange == null && endVarOffset >= 0) {
          PsiElement whiteSpaceElement=CodeStyleManagerImpl.findWhiteSpaceNode(file,endVarOffset);
          if (whiteSpaceElement != null) {
            TextRange whiteSpaceRange=whiteSpaceElement.getTextRange();
            if (whiteSpaceElement.getContainingFile() != null) {
              whiteSpaceRange=InjectedLanguageManager.getInstance(file.getProject()).injectedToHost(whiteSpaceElement,whiteSpaceRange);
            }
            reformatStartOffset=Math.min(reformatStartOffset,whiteSpaceRange.getStartOffset());
            reformatEndOffset=Math.max(reformatEndOffset,whiteSpaceRange.getEndOffset());
          }
        }
        style.reformatText(file,reformatStartOffset,reformatEndOffset);
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        PsiDocumentManager.getInstance(myProject).doPostponedOperationsAndUnblockDocument(myDocument);
        if (dummyAdjustLineMarkerRange != null && dummyAdjustLineMarkerRange.isValid()) {
          mySegments.replaceSegmentAt(endSegmentNumber,dummyAdjustLineMarkerRange.getStartOffset(),dummyAdjustLineMarkerRange.getEndOffset());
          myDocument.deleteString(dummyAdjustLineMarkerRange.getStartOffset(),dummyAdjustLineMarkerRange.getEndOffset());
          PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        }
        if (endSegmentNumber >= 0) {
          final int offset=mySegments.getSegmentStart(endSegmentNumber);
          final int lineStart=myDocument.getLineStartOffset(myDocument.getLineNumber(offset));
          if (StringUtil.isEmptyOrSpaces(myDocument.getCharsSequence().subSequence(lineStart,offset))) {
            final int adjustedOffset=style.adjustLineIndent(file,offset);
            mySegments.replaceSegmentAt(endSegmentNumber,adjustedOffset,adjustedOffset);
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
