{
  String oldValue=getExpressionString(segmentNumber);
  int start=mySegments.getSegmentStart(segmentNumber);
  int end=mySegments.getSegmentEnd(segmentNumber);
  PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
  PsiFile psiFile=getPsiFile();
  PsiElement element=psiFile.findElementAt(start);
  if (element != null) {
    PsiUtilCore.ensureValid(element);
  }
  ExpressionContext context=createExpressionContext(start);
  Result result=isQuick ? expressionNode.calculateQuickResult(context) : expressionNode.calculateResult(context);
  if (isQuick && result == null) {
    if (!oldValue.isEmpty()) {
      return;
    }
  }
  final boolean resultIsNullOrEmpty=result == null || result.equalsToText("",element);
  if (resultIsNullOrEmpty && myCurrentSegmentNumber >= 0 && (mySegments.getSegmentStart(segmentNumber) == mySegments.getSegmentEnd(myCurrentSegmentNumber) || mySegments.getSegmentEnd(segmentNumber) == mySegments.getSegmentStart(myCurrentSegmentNumber))) {
    return;
  }
  if (defaultValue != null && resultIsNullOrEmpty) {
    result=defaultValue.calculateResult(context);
  }
  if (element != null) {
    PsiUtilCore.ensureValid(element);
  }
  if (result == null || result.equalsToText(oldValue,element))   return;
  replaceString(StringUtil.notNullize(result.toString()),start,end,segmentNumber);
  if (result instanceof RecalculatableResult) {
    IntArrayList indices=initEmptyVariables();
    shortenReferences();
    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
    ((RecalculatableResult)result).handleRecalc(psiFile,myDocument,mySegments.getSegmentStart(segmentNumber),mySegments.getSegmentEnd(segmentNumber));
    restoreEmptyVariables(indices);
  }
}
