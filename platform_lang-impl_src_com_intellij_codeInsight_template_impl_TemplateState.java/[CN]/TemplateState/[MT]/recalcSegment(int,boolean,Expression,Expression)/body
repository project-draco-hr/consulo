{
  String oldValue=getExpressionString(segmentNumber);
  int start=mySegments.getSegmentStart(segmentNumber);
  int end=mySegments.getSegmentEnd(segmentNumber);
  ExpressionContext context=createExpressionContext(start);
  Result result;
  if (isQuick) {
    result=expressionNode.calculateQuickResult(context);
  }
 else {
    result=expressionNode.calculateResult(context);
    if (expressionNode instanceof ConstantNode) {
      if (result instanceof TextResult) {
        TextResult text=(TextResult)result;
        if (text.getText().length() == 0 && defaultValue != null) {
          result=defaultValue.calculateResult(context);
        }
      }
    }
    if (result == null && defaultValue != null) {
      result=defaultValue.calculateResult(context);
    }
  }
  if (result == null)   return;
  PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  PsiElement element=psiFile.findElementAt(myTemplateRange != null ? myTemplateRange.getStartOffset() : start);
  if (result.equalsToText(oldValue,element))   return;
  String newValue=result.toString();
  if (newValue == null)   newValue="";
  if (element != null) {
    newValue=LanguageLiteralEscapers.INSTANCE.forLanguage(element.getLanguage()).getEscapedText(element,newValue);
  }
  replaceString(newValue,start,end,segmentNumber);
  if (result instanceof RecalculatableResult) {
    shortenReferences();
    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
    ((RecalculatableResult)result).handleRecalc(psiFile,myDocument,mySegments.getSegmentStart(segmentNumber),mySegments.getSegmentEnd(segmentNumber));
  }
}
