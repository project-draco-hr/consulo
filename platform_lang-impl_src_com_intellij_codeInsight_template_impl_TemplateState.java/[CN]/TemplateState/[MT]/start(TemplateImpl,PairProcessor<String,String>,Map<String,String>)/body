{
  myTemplate=template;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  myProcessor=processor;
  DocumentReference[] refs=myDocument == null ? null : new DocumentReference[]{DocumentReferenceManager.getInstance().create(myDocument)};
  UndoManager.getInstance(myProject).undoableActionPerformed(new BasicUndoableAction(refs){
    @Override public void undo(){
      if (myDocument != null) {
        fireTemplateCancelled();
        LookupManager.getInstance(myProject).hideActiveLookup();
        int oldVar=myCurrentVariableNumber;
        setCurrentVariableNumber(-1);
        currentVariableChanged(oldVar);
      }
    }
    @Override public void redo(){
    }
  }
);
  myTemplateIndented=false;
  myCurrentVariableNumber=-1;
  mySegments=new TemplateSegments(myEditor);
  myPrevTemplate=myTemplate;
  myPredefinedVariableValues=predefinedVarValues;
  if (template.isInline()) {
    int caretOffset=myEditor.getCaretModel().getOffset();
    myTemplateRange=myDocument.createRangeMarker(caretOffset,caretOffset + template.getTemplateText().length());
  }
 else {
    PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
    preprocessTemplate(file,myEditor.getCaretModel().getOffset(),myTemplate.getTemplateText());
    int caretOffset=myEditor.getCaretModel().getOffset();
    myTemplateRange=myDocument.createRangeMarker(caretOffset,caretOffset);
  }
  myTemplateRange.setGreedyToLeft(true);
  myTemplateRange.setGreedyToRight(true);
  processAllExpressions(template);
}
