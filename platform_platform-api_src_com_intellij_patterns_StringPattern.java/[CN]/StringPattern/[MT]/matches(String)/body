{
  final String escaped=StringUtil.escapeToRegexp(s);
  if (escaped.equals(s)) {
    return equalTo(s);
  }
  final Pattern pattern;
  try {
    pattern=Pattern.compile(s);
  }
 catch (  PatternSyntaxException e) {
    LOG.error(e);
    return with(new PatternCondition<String>("neverMatches"){
      @Override public boolean accepts(      @NotNull String s,      ProcessingContext context){
        return false;
      }
    }
);
  }
  return with(new ValuePatternCondition<String>("matches"){
    public boolean accepts(    @NotNull final String str,    final ProcessingContext context){
      return pattern.matcher(str).matches();
    }
    @Override public Collection<String> getValues(){
      return Collections.singleton(s);
    }
  }
);
}
