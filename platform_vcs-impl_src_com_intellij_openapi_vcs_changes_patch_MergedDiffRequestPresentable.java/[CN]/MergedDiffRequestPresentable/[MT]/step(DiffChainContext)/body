{
  if (myFile.getFileType().isBinary()) {
    final boolean nowItIsText=ChangeDiffRequestPresentable.checkAssociate(myProject,myFile.getName(),context);
    if (!nowItIsText) {
      final SimpleDiffRequest request=new SimpleDiffRequest(myProject,null);
      return new MyResult(request,DiffPresentationReturnValue.removeFromList);
    }
  }
  final ApplyPatchForBaseRevisionTexts revisionTexts=myTexts.get();
  if (revisionTexts.getBase() == null) {
    final SimpleDiffRequest badDiffRequest=createBadDiffRequest(myProject,myFile,revisionTexts,true);
    return new MyResult(badDiffRequest,DiffPresentationReturnValue.useRequest);
  }
  final MergeRequest request=DiffRequestFactory.getInstance().create3WayDiffRequest(revisionTexts.getLocal().toString(),revisionTexts.getPatched(),revisionTexts.getBase().toString(),myFile.getFileType(),myProject,null,null);
  request.setWindowTitle(VcsBundle.message("patch.apply.conflict.title",FileUtil.toSystemDependentName(myFile.getPresentableUrl())));
  request.setVersionTitles(new String[]{"Current Version","Base Version",FileUtil.toSystemDependentName(myAfterTitle)});
  return new MyResult(request,DiffPresentationReturnValue.useRequest);
}
