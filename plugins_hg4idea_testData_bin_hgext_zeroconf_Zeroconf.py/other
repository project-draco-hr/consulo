' Multicast DNS Service Discovery for Python, v0.12\n    Copyright (C) 2003, Paul Scott-Murphy\n\n    This module provides a framework for the use of DNS Service Discovery\n    using IP multicast.  It has been tested against the JRendezvous\n    implementation from <a href="http://strangeberry.com">StrangeBerry</a>,\n    and against the mDNSResponder from Mac OS X 10.3.8.\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n\n'
"0.12 update - allow selection of binding interface\n\t\t typo fix - Thanks A. M. Kuchlingi\n\t\t removed all use of word 'Rendezvous' - this is an API change"
"0.11 update - correction to comments for addListener method\n                 support for new record types seen from OS X\n\t\t\t\t  - IPv6 address\n\t\t\t\t  - hostinfo\n\t\t\t\t ignore unknown DNS record types\n\t\t\t\t fixes to name decoding\n\t\t\t\t works alongside other processes using port 5353 (e.g. on Mac OS X)\n\t\t\t\t tested against Mac OS X 10.3.2's mDNSResponder\n\t\t\t\t corrections to removal of list entries for service browser"
'0.10 update - Jonathon Paisley contributed these corrections:\n                 always multicast replies, even when query is unicast\n\t\t\t\t correct a pointer encoding problem\n\t\t\t\t can now write records in any order\n\t\t\t\t traceback shown on failure\n\t\t\t\t better TXT record parsing\n\t\t\t\t server is now separate from name\n\t\t\t\t can cancel a service browser\n\n\t\t\t\t modified some unit tests to accommodate these changes'
'0.09 update - remove all records on service unregistration\n                 fix DOS security problem with readName'
'0.08 update - changed licensing to LGPL'
'0.07 update - faster shutdown on engine\n                 pointer encoding of outgoing names\n\t\t\t\t ServiceBrowser now works\n\t\t\t\t new unit tests'
'0.06 update - small improvements with unit tests\n                 added defined exception types\n\t\t\t\t new style objects\n\t\t\t\t fixed hostname/interface problem\n\t\t\t\t fixed socket timeout problem\n\t\t\t\t fixed addServiceListener() typo bug\n\t\t\t\t using select() for socket reads\n\t\t\t\t tested on Debian unstable with Python 2.2.2'
'0.05 update - ensure case insensitivty on domain names\n                 support for unicast DNS queries'
"0.04 update - added some unit tests\n                 added __ne__ adjuncts where required\n\t\t\t\t ensure names end in '.local.'\n\t\t\t\t timeout on receiving socket for clean shutdown"
__author__ = 'Paul Scott-Murphy'
__email__ = 'paul at scott dash murphy dot com'
__version__ = '0.12'
import string
import time
import struct
import socket
import threading
import select
import traceback
__all__ = ['Zeroconf', 'ServiceInfo', 'ServiceBrowser']
globals()['_GLOBAL_DONE'] = 0
_UNREGISTER_TIME = 125
_CHECK_TIME = 175
_REGISTER_TIME = 225
_LISTENER_TIME = 200
_BROWSER_TIME = 500
_MDNS_ADDR = '224.0.0.251'
_MDNS_PORT = 5353
_DNS_PORT = 53
_DNS_TTL = (60 * 60)
_MAX_MSG_TYPICAL = 1460
_MAX_MSG_ABSOLUTE = 8972
_FLAGS_QR_MASK = 32768
_FLAGS_QR_QUERY = 0
_FLAGS_QR_RESPONSE = 32768
_FLAGS_AA = 1024
_FLAGS_TC = 512
_FLAGS_RD = 256
_FLAGS_RA = 32768
_FLAGS_Z = 64
_FLAGS_AD = 32
_FLAGS_CD = 16
_CLASS_IN = 1
_CLASS_CS = 2
_CLASS_CH = 3
_CLASS_HS = 4
_CLASS_NONE = 254
_CLASS_ANY = 255
_CLASS_MASK = 32767
_CLASS_UNIQUE = 32768
_TYPE_A = 1
_TYPE_NS = 2
_TYPE_MD = 3
_TYPE_MF = 4
_TYPE_CNAME = 5
_TYPE_SOA = 6
_TYPE_MB = 7
_TYPE_MG = 8
_TYPE_MR = 9
_TYPE_NULL = 10
_TYPE_WKS = 11
_TYPE_PTR = 12
_TYPE_HINFO = 13
_TYPE_MINFO = 14
_TYPE_MX = 15
_TYPE_TXT = 16
_TYPE_AAAA = 28
_TYPE_SRV = 33
_TYPE_ANY = 255
_CLASSES = {_CLASS_IN: 'in', _CLASS_CS: 'cs', _CLASS_CH: 'ch', _CLASS_HS: 'hs', _CLASS_NONE: 'none', _CLASS_ANY: 'any', }
_TYPES = {_TYPE_A: 'a', _TYPE_NS: 'ns', _TYPE_MD: 'md', _TYPE_MF: 'mf', _TYPE_CNAME: 'cname', _TYPE_SOA: 'soa', _TYPE_MB: 'mb', _TYPE_MG: 'mg', _TYPE_MR: 'mr', _TYPE_NULL: 'null', _TYPE_WKS: 'wks', _TYPE_PTR: 'ptr', _TYPE_HINFO: 'hinfo', _TYPE_MINFO: 'minfo', _TYPE_MX: 'mx', _TYPE_TXT: 'txt', _TYPE_AAAA: 'quada', _TYPE_SRV: 'srv', _TYPE_ANY: 'any', }
if (__name__ == '__main__'):
    print 'Multicast DNS Service Discovery for Python, version', __version__
    r = Zeroconf()
    print '1. Testing registration of a service...'
    desc = {'version': '0.10', 'a': 'test value', 'b': 'another value', }
    info = ServiceInfo('_http._tcp.local.', 'My Service Name._http._tcp.local.', socket.inet_aton('127.0.0.1'), 1234, 0, 0, desc)
    print '   Registering service...'
    r.registerService(info)
    print '   Registration done.'
    print '2. Testing query of service information...'
    print '   Getting ZOE service:', str(r.getServiceInfo('_http._tcp.local.', 'ZOE._http._tcp.local.'))
    print '   Query done.'
    print '3. Testing query of own service...'
    print '   Getting self:', str(r.getServiceInfo('_http._tcp.local.', 'My Service Name._http._tcp.local.'))
    print '   Query done.'
    print '4. Testing unregister of service information...'
    r.unregisterService(info)
    print '   Unregister done.'
    r.close()
