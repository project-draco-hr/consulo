{
  if (!myIsMethod) {
    return GroovyBundle.message("add.dynamic.property",myReferenceExpression.getName());
  }
  final PsiType[] methodArgumentsTypes=PsiUtil.getArgumentTypes(myReferenceExpression,false);
  StringBuilder builder=new StringBuilder(" '").append(myReferenceExpression.getName());
  builder.append("(");
  if (methodArgumentsTypes != null) {
    for (int i=0; i < methodArgumentsTypes.length; i++) {
      PsiType type=methodArgumentsTypes[i];
      if (i > 0) {
        builder.append(", ");
      }
      if (PsiType.NULL.equals(type)) {
        builder.append(PsiType.getJavaLangObject(myReferenceExpression.getManager(),myReferenceExpression.getProject().getAllScope()).getPresentableText());
      }
 else {
        builder.append(type.getPresentableText());
      }
    }
  }
  builder.append(")");
  builder.append("' ");
  return GroovyBundle.message("add.dynamic.method") + builder.toString();
}
