{
  LOG.debug("Downloading requested");
synchronized (myLock) {
    if (myDownloaded) {
      LOG.debug("File already downloaded: " + myLocalVirtualFile);
      listener.fileDownloaded(myLocalVirtualFile);
      return;
    }
    if (myErrorMessage != null) {
      LOG.debug("Error occured: " + myErrorMessage);
      listener.errorOccured(myErrorMessage);
      return;
    }
    myListeners.add(listener);
    if (myLocalFile != null) {
      LOG.debug("Downloading in progress");
      return;
    }
    try {
      myLocalFile=myManager.getStorage().createLocalFile(myUrl);
      LOG.debug("Local file created: " + myLocalFile.getAbsolutePath());
    }
 catch (    IOException e) {
      LOG.info(e);
      updateState(VfsBundle.message("cannot.create.local.file",e.getMessage()));
      return;
    }
    myCancelled=false;
  }
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      HttpConfigurable.getInstance().setAuthenticator();
      LOG.debug("Downloading started");
      InputStream input=null;
      OutputStream output=null;
      try {
        updateProgress(true,VfsBundle.message("download.progress.connecting",myUrl));
        HttpURLConnection connection=(HttpURLConnection)new URL(myUrl).openConnection();
        connection.setConnectTimeout(CONNECT_TIMEOUT);
        connection.setReadTimeout(READ_TIMEOUT);
        input=UrlConnectionUtil.getConnectionInputStreamWithException(connection,new EmptyProgressIndicator());
        final int responseCode=connection.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK) {
          throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",responseCode));
        }
        final int size=connection.getContentLength();
        output=new BufferedOutputStream(new FileOutputStream(myLocalFile));
        updateProgress(size == -1,VfsBundle.message("download.progress.downloading",myUrl));
        if (size != -1) {
          setProgressFraction(0);
        }
        String contentType=connection.getContentType();
        FileType fileType=RemoteFileUtil.getFileType(contentType);
        int len;
        final byte[] buf=new byte[1024];
        int count=0;
        while ((len=input.read(buf)) > 0) {
          if (myCancelled) {
            updateState(VfsBundle.message("downloading.cancelled.message"));
            return;
          }
          count+=len;
          if (size > 0) {
            setProgressFraction((double)count / size);
          }
          output.write(buf,0,len);
        }
        output.close();
        output=null;
        LOG.debug("Downloading finished, " + size + " bytes downloaded");
        updateState(fileType);
      }
 catch (      IOException e) {
        LOG.info(e);
        updateState(VfsBundle.message("cannot.load.remote.file",myUrl,e.getMessage()));
      }
 finally {
        if (input != null) {
          try {
            input.close();
          }
 catch (          IOException e) {
            LOG.info(e);
          }
        }
        if (output != null) {
          try {
            output.close();
          }
 catch (          IOException e) {
            LOG.info(e);
          }
        }
      }
    }
  }
);
}
