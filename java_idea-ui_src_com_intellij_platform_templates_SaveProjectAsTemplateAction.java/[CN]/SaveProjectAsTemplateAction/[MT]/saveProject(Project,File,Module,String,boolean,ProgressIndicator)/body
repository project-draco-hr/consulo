{
  final Map<String,String> parameters=computeParameters(project,replaceParameters);
  indicator.setText("Saving project...");
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          project.save();
        }
      }
);
    }
  }
);
  indicator.setText("Processing project files...");
  ZipOutputStream stream=null;
  try {
    FileUtil.ensureExists(zipFile.getParentFile());
    stream=new ZipOutputStream(new FileOutputStream(zipFile));
    final VirtualFile dir=getDirectoryToSave(project,moduleToSave);
    writeFile(LocalArchivedTemplate.DESCRIPTION_PATH,description,project,dir,stream,true);
    if (replaceParameters) {
      String text=getInputFieldsText(parameters);
      writeFile(LocalArchivedTemplate.IDEA_INPUT_FIELDS_XML,text,project,dir,stream,false);
    }
    FileIndex index=moduleToSave == null ? ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(moduleToSave).getFileIndex();
    final ZipOutputStream finalStream=stream;
    index.iterateContent(new ContentIterator(){
      @Override public boolean processFile(      final VirtualFile virtualFile){
        if (!virtualFile.isDirectory()) {
          final String fileName=virtualFile.getName();
          indicator.setText2(fileName);
          try {
            String relativePath=VfsUtilCore.getRelativePath(virtualFile,dir,'/');
            if (relativePath == null) {
              throw new RuntimeException("Can't find relative path for " + virtualFile);
            }
            final boolean system=".idea".equals(virtualFile.getParent().getName());
            if (system) {
              if (!fileName.equals("description.html") && !fileName.equals(PROJECT_TEMPLATE_XML) && !fileName.equals("misc.xml")&& !fileName.equals("modules.xml")&& !fileName.equals("workspace.xml")) {
                return true;
              }
            }
            ZipUtil.addFileToZip(finalStream,new File(virtualFile.getPath()),dir.getName() + "/" + relativePath,null,null,new ZipUtil.FileContentProcessor(){
              @Override public InputStream getContent(              final File file) throws IOException {
                if (virtualFile.getFileType().isBinary() || PROJECT_TEMPLATE_XML.equals(virtualFile.getName()))                 return STANDARD.getContent(file);
                String result=getEncodedContent(virtualFile,project,parameters);
                return new ByteArrayInputStream(result.getBytes(TemplateModuleBuilder.UTF_8));
              }
            }
);
          }
 catch (          IOException e) {
            LOG.error(e);
          }
        }
        indicator.checkCanceled();
        return true;
      }
    }
);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      public void run(){
        Messages.showErrorDialog(project,"Can't save project as template","Internal Error");
      }
    }
);
  }
 finally {
    StreamUtil.closeStream(stream);
  }
}
