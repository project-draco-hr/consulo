{
  AnAction closeMessageViewAction=new CloseTabToolbarAction(){
    @RequiredDispatchThread @Override public void actionPerformed(    @NotNull AnActionEvent e){
      close();
    }
  }
;
  DefaultActionGroup leftUpdateableActionGroup=new DefaultActionGroup();
  if (rerunAction != null) {
    leftUpdateableActionGroup.add(new RerunAction(rerunAction,closeMessageViewAction));
  }
  leftUpdateableActionGroup.add(new StopAction());
  if (myCreateExitAction) {
    leftUpdateableActionGroup.add(closeMessageViewAction);
  }
  leftUpdateableActionGroup.add(new PreviousOccurenceToolbarAction(this));
  leftUpdateableActionGroup.add(new NextOccurenceToolbarAction(this));
  leftUpdateableActionGroup.add(new ExportToTextFileToolbarAction(myExporterToTextFile));
  leftUpdateableActionGroup.add(new ContextHelpAction(myHelpId));
  DefaultActionGroup rightUpdateableActionGroup=new DefaultActionGroup();
  fillRightToolbarGroup(rightUpdateableActionGroup);
  JPanel toolbarPanel=new JPanel(new GridLayout(1,2));
  final ActionManager actionManager=ActionManager.getInstance();
  myLeftToolbar=actionManager.createActionToolbar(ActionPlaces.COMPILER_MESSAGES_TOOLBAR,leftUpdateableActionGroup,false);
  toolbarPanel.add(myLeftToolbar.getComponent());
  myRightToolbar=actionManager.createActionToolbar(ActionPlaces.COMPILER_MESSAGES_TOOLBAR,rightUpdateableActionGroup,false);
  toolbarPanel.add(myRightToolbar.getComponent());
  return toolbarPanel;
}
