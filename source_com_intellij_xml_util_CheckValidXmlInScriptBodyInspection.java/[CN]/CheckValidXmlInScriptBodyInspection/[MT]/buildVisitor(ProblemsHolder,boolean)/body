{
  return new PsiElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    public void visitXmlTag(    final XmlTag tag){
      if (SCRIPT_TAG_NAME.equals(tag.getName()) || (tag instanceof HtmlTag && SCRIPT_TAG_NAME.equalsIgnoreCase(tag.getLocalName()))) {
        final PsiFile psiFile=tag.getContainingFile();
        final FileType fileType=psiFile.getFileType();
        if (fileType == StdFileTypes.XHTML || fileType == StdFileTypes.JSPX) {
synchronized (CheckValidXmlInScriptBodyInspection.class) {
            if (myXmlLexer == null)             myXmlLexer=new XmlLexer();
            final XmlTagValue tagValue=tag.getValue();
            final String tagBodyText=tagValue.getText();
            if (tagBodyText.length() > 0) {
              myXmlLexer.start(tagBodyText.toCharArray());
              while (myXmlLexer.getTokenType() != null) {
                IElementType tokenType=myXmlLexer.getTokenType();
                if (tokenType == XmlTokenType.XML_CDATA_START) {
                  while (tokenType != null && tokenType != XmlTokenType.XML_CDATA_END) {
                    myXmlLexer.advance();
                    tokenType=myXmlLexer.getTokenType();
                  }
                  if (tokenType == null)                   break;
                }
                if ((tokenType == XmlTokenType.XML_BAD_CHARACTER && "&".equals(ParseUtil.getTokenText(myXmlLexer))) || tokenType == XmlTokenType.XML_START_TAG_START) {
                  final int valueStart=tagValue.getTextRange().getStartOffset();
                  final int offset=valueStart + myXmlLexer.getTokenStart();
                  final PsiElement psiElement=psiFile.findElementAt(offset);
                  final TextRange elementRange=psiElement.getTextRange();
                  final int offsetInElement=offset - elementRange.getStartOffset();
                  holder.registerProblem(psiElement,XmlBundle.message("unescaped.xml.character"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new InsertQuotedCharacterQuickFix(psiFile,psiElement,offsetInElement));
                  int endOfElementInScriptTag=elementRange.getEndOffset() - valueStart;
                  while (myXmlLexer.getTokenEnd() < endOfElementInScriptTag) {
                    myXmlLexer.advance();
                    if (myXmlLexer.getTokenType() == null)                     break;
                  }
                }
                myXmlLexer.advance();
              }
            }
          }
        }
      }
    }
  }
;
}
