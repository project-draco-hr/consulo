{
  if (!element.isValid())   return null;
  Project project=element.getProject();
  final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);
  final ProjectFileIndex fileIndex=projectRootManager == null ? null : projectRootManager.getFileIndex();
  if (element instanceof PsiDirectory) {
    final VirtualFile vFile=((PsiDirectory)element).getVirtualFile();
    if (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile)) {
      final List<OrderEntry> orderEntries=fileIndex.getOrderEntriesForFile(vFile);
      if (orderEntries.isEmpty()) {
        return null;
      }
      Set<Module> modules=new HashSet<Module>();
      for (      OrderEntry orderEntry : orderEntries) {
        modules.add(orderEntry.getOwnerModule());
      }
      final Module[] candidates=modules.toArray(new Module[modules.size()]);
      Arrays.sort(candidates,ModuleManager.getInstance(project).moduleDependencyComparator());
      return candidates[0];
    }
    return fileIndex.getModuleForFile(vFile);
  }
  PsiFile containingFile=element.getContainingFile();
  if (containingFile != null) {
    PsiElement context;
    while ((context=containingFile.getContext()) != null) {
      final PsiFile file=context.getContainingFile();
      if (file == null)       break;
      containingFile=file;
    }
    if (containingFile.getUserData(KEY_MODULE) != null) {
      return containingFile.getUserData(KEY_MODULE);
    }
    final PsiFile originalFile=containingFile.getOriginalFile();
    if (originalFile.getUserData(KEY_MODULE) != null) {
      return originalFile.getUserData(KEY_MODULE);
    }
    final VirtualFile virtualFile=originalFile.getVirtualFile();
    if (fileIndex != null && virtualFile != null) {
      return fileIndex.getModuleForFile(virtualFile);
    }
  }
  return element.getUserData(KEY_MODULE);
}
