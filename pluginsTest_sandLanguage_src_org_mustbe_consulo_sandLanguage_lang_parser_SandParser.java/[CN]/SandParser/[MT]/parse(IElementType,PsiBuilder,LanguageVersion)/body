{
  PsiBuilder.Marker mark=builder.mark();
  while (!builder.eof()) {
    boolean find=false;
    for (    Pair<IElementType,IElementType> pair : myPairs) {
      if (builder.getTokenType() == pair.getFirst()) {
        PsiBuilder.Marker defMark=builder.mark();
        builder.advanceLexer();
        if (!PsiBuilderUtil.expect(builder,SandTokens.IDENTIFIER)) {
          builder.error("Identifier expected");
        }
        defMark.done(pair.getSecond());
        find=true;
      }
    }
    if (!find) {
      builder.error("Expected start token");
      builder.advanceLexer();
    }
  }
  mark.done(root);
  return builder.getTreeBuilt();
}
