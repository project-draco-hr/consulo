{
  try {
    if (success) {
      final Document document=myEditor.getDocument();
      @Nullable final PsiVariable psiVariable=getVariable();
      if (psiVariable == null) {
        return;
      }
      LOG.assertTrue(psiVariable.isValid());
      TypeSelectorManagerImpl.typeSelected(psiVariable.getType(),myDefaultType.getType());
      if (myCanBeFinalCb != null) {
        JavaRefactoringSettings.getInstance().INTRODUCE_LOCAL_CREATE_FINALS=psiVariable.hasModifierProperty(PsiModifier.FINAL);
      }
      adjustLine(psiVariable,document);
      int startOffset=getExprMarker() != null && getExprMarker().isValid() ? getExprMarker().getStartOffset() : psiVariable.getTextOffset();
      final PsiFile file=psiVariable.getContainingFile();
      final PsiReference referenceAt=file.findReferenceAt(startOffset);
      if (referenceAt != null && referenceAt.resolve() instanceof PsiVariable) {
        startOffset=referenceAt.getElement().getTextRange().getEndOffset();
      }
 else {
        final PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(psiVariable,PsiDeclarationStatement.class);
        if (declarationStatement != null) {
          startOffset=declarationStatement.getTextRange().getEndOffset();
        }
      }
      myEditor.getCaretModel().moveToOffset(startOffset);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
      if (psiVariable.getInitializer() != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            appendTypeCasts(getOccurrenceMarkers(),file,myProject,psiVariable);
          }
        }
);
      }
    }
 else {
      RangeMarker exprMarker=getExprMarker();
      if (exprMarker != null && exprMarker.isValid()) {
        myEditor.getCaretModel().moveToOffset(exprMarker.getStartOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
      }
      if (myExpressionText != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            final PsiDeclarationStatement element=myPointer.getElement();
            if (element != null) {
              final PsiElement[] vars=element.getDeclaredElements();
              if (vars.length > 0 && vars[0] instanceof PsiVariable) {
                final PsiFile containingFile=element.getContainingFile();
                final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
                for (                RangeMarker occurrenceMarker : getOccurrenceMarkers()) {
                  if (AbstractJavaInplaceIntroducer.restoreExpression(containingFile,(PsiVariable)vars[0],elementFactory,occurrenceMarker,myExpressionText) == null)                   return;
                }
                element.delete();
              }
            }
          }
        }
);
      }
    }
  }
  finally {
    myEditor.putUserData(ReassignVariableUtil.DECLARATION_KEY,null);
    for (    RangeMarker occurrenceMarker : getOccurrenceMarkers()) {
      occurrenceMarker.dispose();
    }
    myEditor.putUserData(ReassignVariableUtil.OCCURRENCES_KEY,null);
    if (getExprMarker() != null)     getExprMarker().dispose();
  }
}
