{
  try {
    if (success) {
      final Document document=myEditor.getDocument();
      final @Nullable PsiVariable psiVariable=getVariable();
      if (psiVariable == null) {
        return;
      }
      LOG.assertTrue(psiVariable.isValid());
      saveSettings(psiVariable);
      adjustLine(psiVariable,document);
      int startOffset=myExprMarker != null && myExprMarker.isValid() ? myExprMarker.getStartOffset() : psiVariable.getTextOffset();
      final PsiFile file=psiVariable.getContainingFile();
      final PsiReference referenceAt=file.findReferenceAt(startOffset);
      if (referenceAt != null && referenceAt.resolve() instanceof PsiVariable) {
        startOffset=referenceAt.getElement().getTextRange().getEndOffset();
      }
 else {
        final PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(psiVariable,PsiDeclarationStatement.class);
        if (declarationStatement != null) {
          startOffset=declarationStatement.getTextRange().getEndOffset();
        }
      }
      myEditor.getCaretModel().moveToOffset(startOffset);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
      if (psiVariable.getInitializer() != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            appendTypeCasts(myOccurrenceMarkers,file,myProject,psiVariable);
          }
        }
);
      }
    }
 else {
      final PsiVariable variable=getVariable();
      if (variable != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            final PsiFile containingFile=variable.getContainingFile();
            for (            RangeMarker occurrenceMarker : myOccurrenceMarkers) {
              final PsiElement refVariableElement=containingFile.findElementAt(occurrenceMarker.getStartOffset());
              final PsiExpression expression=PsiTreeUtil.getParentOfType(refVariableElement,PsiReferenceExpression.class);
              if (expression instanceof PsiReferenceExpression && (((PsiReferenceExpression)expression).resolve() == variable || Comparing.strEqual(variable.getName(),((PsiReferenceExpression)expression).getReferenceName()))) {
                InlineUtil.inlineVariable(variable,variable.getInitializer(),(PsiJavaCodeReferenceElement)expression);
              }
            }
            variable.delete();
          }
        }
);
      }
      if (myExprMarker != null) {
        myEditor.getCaretModel().moveToOffset(myExprMarker.getStartOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
      }
    }
  }
  finally {
    myEditor.putUserData(ReassignVariableUtil.DECLARATION_KEY,null);
    for (    RangeMarker occurrenceMarker : myOccurrenceMarkers) {
      occurrenceMarker.dispose();
    }
    myEditor.putUserData(ReassignVariableUtil.OCCURRENCES_KEY,null);
    if (myExprMarker != null)     myExprMarker.dispose();
  }
}
