{
  super(elementToRename,editor);
  myProject=project;
  myEditor=editor;
  myElementToRename=elementToRename;
  myExpression=expression;
  myExprMarker=exprMarker;
  myOccurrenceMarkers=occurrenceMarkers;
  myDefaultType=elementToRename.getType();
  final PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(elementToRename,PsiDeclarationStatement.class);
  myPointer=declarationStatement != null ? SmartPointerManager.getInstance(project).createSmartPsiElementPointer(declarationStatement) : null;
  editor.putUserData(ReassignVariableUtil.DECLARATION_KEY,myPointer);
  editor.putUserData(ReassignVariableUtil.OCCURRENCES_KEY,occurrenceMarkers.toArray(new RangeMarker[occurrenceMarkers.size()]));
  setAdvertisementText(getAdvertisementText(declarationStatement,myDefaultType,hasTypeSuggestion));
  if (!cantChangeFinalModifier) {
    myCanBeFinal=new NonFocusableCheckBox("Declare final");
    myCanBeFinal.setSelected(createFinals());
    myCanBeFinal.setMnemonic('f');
    myCanBeFinal.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new WriteCommandAction(project){
          @Override protected void run(          com.intellij.openapi.application.Result result) throws Throwable {
            final PsiModifierList modifierList=getVariable().getModifierList();
            LOG.assertTrue(modifierList != null);
            final Document document=myEditor.getDocument();
            final int textOffset=modifierList.getTextOffset();
            if (myCanBeFinal.isSelected()) {
              if (StringUtil.isEmptyOrSpaces(document.getText(new TextRange(textOffset - 1,textOffset)))) {
                document.insertString(textOffset - 1,"final");
              }
 else {
                document.insertString(textOffset,"final ");
              }
            }
 else {
              document.deleteString(textOffset,textOffset + modifierList.getTextLength());
            }
          }
        }
.execute();
      }
    }
);
  }
}
