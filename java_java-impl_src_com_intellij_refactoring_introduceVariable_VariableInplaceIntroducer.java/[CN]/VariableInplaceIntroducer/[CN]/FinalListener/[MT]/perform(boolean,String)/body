{
  new WriteCommandAction(myProject,myCommandName,myCommandName){
    @Override protected void run(    com.intellij.openapi.application.Result result) throws Throwable {
      final Document document=myEditor.getDocument();
      PsiDocumentManager.getInstance(getProject()).commitDocument(document);
      final PsiVariable variable=getVariable();
      LOG.assertTrue(variable != null);
      final PsiModifierList modifierList=variable.getModifierList();
      LOG.assertTrue(modifierList != null);
      final int textOffset=modifierList.getTextOffset();
      final Runnable runnable=new Runnable(){
        public void run(){
          if (generateFinal) {
            final PsiTypeElement typeElement=variable.getTypeElement();
            final int typeOffset=typeElement != null ? typeElement.getTextOffset() : textOffset;
            document.insertString(typeOffset,modifier + " ");
          }
 else {
            final int idx=modifierList.getText().indexOf(modifier);
            document.deleteString(textOffset + idx,textOffset + idx + modifier.length()+ 1);
          }
        }
      }
;
      final LookupImpl lookup=(LookupImpl)LookupManager.getActiveLookup(myEditor);
      if (lookup != null) {
        lookup.performGuardedChange(runnable);
      }
 else {
        runnable.run();
      }
    }
  }
.execute();
}
