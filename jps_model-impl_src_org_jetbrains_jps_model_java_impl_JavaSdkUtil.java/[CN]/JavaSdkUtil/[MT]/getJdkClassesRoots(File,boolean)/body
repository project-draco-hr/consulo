{
  FileFilter jarFileFilter=new FileFilter(){
    @Override @SuppressWarnings({"HardCodedStringLiteral"}) public boolean accept(    File f){
      return !f.isDirectory() && f.getName().endsWith(".jar");
    }
  }
;
  File[] jarDirs;
  if (SystemInfo.isMac && !file.getName().startsWith("mockJDK")) {
    final File openJdkRtJar=new File(new File(new File(file,"jre"),"lib"),"rt.jar");
    if (openJdkRtJar.exists() && !openJdkRtJar.isDirectory()) {
      File libFile=new File(file,"lib");
      File classesFile=openJdkRtJar.getParentFile();
      File libExtFile=new File(openJdkRtJar.getParentFile(),"ext");
      File libEndorsedFile=new File(libFile,"endorsed");
      jarDirs=new File[]{libEndorsedFile,libFile,classesFile,libExtFile};
    }
 else {
      File libFile=new File(file,"lib");
      File classesFile=new File(file,"../Classes");
      File libExtFile=new File(libFile,"ext");
      File libEndorsedFile=new File(libFile,"endorsed");
      jarDirs=new File[]{libEndorsedFile,libFile,classesFile,libExtFile};
    }
  }
 else {
    File jreLibFile=isJre ? new File(file,"lib") : new File(new File(file,"jre"),"lib");
    File jreLibExtFile=new File(jreLibFile,"ext");
    File jreLibEndorsedFile=new File(jreLibFile,"endorsed");
    jarDirs=new File[]{jreLibEndorsedFile,jreLibFile,jreLibExtFile};
  }
  Set<File> filter=new LinkedHashSet<File>();
  List<File> rootFiles=new ArrayList<File>();
  for (  File jarDir : jarDirs) {
    if (jarDir != null && jarDir.isDirectory()) {
      File[] jarFiles=jarDir.listFiles(jarFileFilter);
      for (      File jarFile : jarFiles) {
        final String jarFileName=jarFile.getName();
        if (jarFileName.equals("alt-rt.jar") || jarFileName.equals("alt-string.jar"))         continue;
        try {
          if (filter.add(jarFile.getCanonicalFile()))           rootFiles.add(jarFile);
        }
 catch (        IOException e) {
        }
      }
    }
  }
  File classesZip=new File(new File(file,"lib"),"classes.zip");
  if (classesZip.isFile()) {
    rootFiles.add(classesZip);
  }
  File classesDir=new File(file,"classes");
  if (rootFiles.isEmpty() && classesDir.isDirectory()) {
    rootFiles.add(classesDir);
  }
  return rootFiles;
}
