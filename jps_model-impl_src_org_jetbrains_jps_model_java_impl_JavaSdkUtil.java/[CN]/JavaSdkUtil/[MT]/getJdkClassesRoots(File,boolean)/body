{
  FileFilter jarFileFilter=new FileFilter(){
    @Override @SuppressWarnings({"HardCodedStringLiteral"}) public boolean accept(    File f){
      return !f.isDirectory() && f.getName().endsWith(".jar");
    }
  }
;
  File[] jarDirs;
  if (SystemInfo.isMac && !home.getName().startsWith("mockJDK")) {
    File openJdkRtJar=new File(home,"jre/lib/rt.jar");
    if (openJdkRtJar.exists() && !openJdkRtJar.isDirectory()) {
      File libDir=new File(home,"lib");
      File classesDir=openJdkRtJar.getParentFile();
      File libExtDir=new File(openJdkRtJar.getParentFile(),"ext");
      File libEndorsedDir=new File(libDir,"endorsed");
      jarDirs=new File[]{libEndorsedDir,libDir,classesDir,libExtDir};
    }
 else {
      File libDir=new File(home,"lib");
      File classesDir=new File(home,"../Classes");
      File libExtDir=new File(libDir,"ext");
      File libEndorsedDir=new File(libDir,"endorsed");
      jarDirs=new File[]{libEndorsedDir,libDir,classesDir,libExtDir};
    }
  }
 else {
    File libDir=isJre ? new File(home,"lib") : new File(home,"jre/lib");
    File libExtDir=new File(libDir,"ext");
    File libEndorsedDir=new File(libDir,"endorsed");
    jarDirs=new File[]{libEndorsedDir,libDir,libExtDir};
  }
  Set<String> pathFilter=ContainerUtil.newTroveSet(FileUtil.PATH_HASHING_STRATEGY);
  List<File> rootFiles=ContainerUtil.newArrayList();
  for (  File jarDir : jarDirs) {
    if (jarDir != null && jarDir.isDirectory()) {
      File[] jarFiles=jarDir.listFiles(jarFileFilter);
      for (      File jarFile : jarFiles) {
        String jarFileName=jarFile.getName();
        if (jarFileName.equals("alt-rt.jar") || jarFileName.equals("alt-string.jar")) {
          continue;
        }
        String canonicalPath=FileSystemUtil.resolveSymLink(jarFile);
        if (canonicalPath == null || !pathFilter.add(canonicalPath)) {
          continue;
        }
        rootFiles.add(jarFile);
      }
    }
  }
  File classesZip=new File(home,"lib/classes.zip");
  if (classesZip.isFile()) {
    rootFiles.add(classesZip);
  }
  File classesDir=new File(home,"classes");
  if (rootFiles.isEmpty() && classesDir.isDirectory()) {
    rootFiles.add(classesDir);
  }
  return rootFiles;
}
