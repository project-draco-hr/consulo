{
  FindManager findManager=FindManager.getInstance(project);
  model=(FindModel)model.clone();
  int occurrences=0;
  List<Pair<TextRange,String>> rangesToChange=new ArrayList<Pair<TextRange,String>>();
  boolean replaced=false;
  int offset=caretOffset;
  while (offset >= 0 && offset < editor.getDocument().getTextLength()) {
    caretOffset=offset;
    FindResult result=doSearch(project,editor,offset,!replaced,model,toPrompt);
    if (result == null) {
      break;
    }
    int startResultOffset=result.getStartOffset();
    model.setFromCursor(true);
    int startOffset=result.getStartOffset();
    int endOffset=result.getEndOffset();
    String foundString=document.getCharsSequence().subSequence(startOffset,endOffset).toString();
    String toReplace;
    try {
      toReplace=findManager.getStringToReplace(foundString,model,startOffset,document.getText());
    }
 catch (    FindManager.MalformedReplacementStringException e) {
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        Messages.showErrorDialog(project,e.getMessage(),FindBundle.message("find.replace.invalid.replacement.string.title"));
      }
      break;
    }
    if (toPrompt) {
      int promptResult=findManager.showPromptDialog(model,FindBundle.message("find.replace.dialog.title"));
      if (promptResult == FindManager.PromptResult.SKIP) {
        offset=model.isForward() ? result.getEndOffset() : startResultOffset;
        continue;
      }
      if (promptResult == FindManager.PromptResult.CANCEL) {
        break;
      }
      if (promptResult == FindManager.PromptResult.ALL) {
        toPrompt=false;
        ((DocumentEx)document).setInBulkUpdate(true);
      }
    }
    boolean reallyReplace=toPrompt;
    TextRange textRange=doReplace(project,document,model,result,toReplace,reallyReplace,rangesToChange);
    int newOffset=model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset();
    if (newOffset == offset) {
      newOffset+=model.isForward() ? 1 : -1;
    }
    offset=newOffset;
    occurrences++;
    if (!replaced) {
      editor.getCaretModel().moveToOffset(0);
    }
    replaced=true;
  }
  if (replaced) {
    if (!toPrompt) {
      CharSequence text=document.getCharsSequence();
      final StringBuilder newText=new StringBuilder(document.getTextLength());
      Collections.sort(rangesToChange,new Comparator<Pair<TextRange,String>>(){
        public int compare(        Pair<TextRange,String> o1,        Pair<TextRange,String> o2){
          return o1.getFirst().getStartOffset() - o2.getFirst().getStartOffset();
        }
      }
);
      int offsetBefore=0;
      for (      Pair<TextRange,String> pair : rangesToChange) {
        TextRange range=pair.getFirst();
        String replace=pair.getSecond();
        newText.append(text,offsetBefore,range.getStartOffset());
        if (delegate.shouldReplace(range,replace)) {
          newText.append(replace);
        }
 else {
          newText.append(text.subSequence(range.getStartOffset(),range.getEndOffset()));
        }
        offsetBefore=range.getEndOffset();
        if (offsetBefore < caretOffset) {
          caretOffset+=replace.length() - range.getLength();
        }
      }
      newText.append(text,offsetBefore,text.length());
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              document.setText(newText);
            }
          }
);
        }
      }
,null,document);
      if (caretOffset > document.getTextLength())       caretOffset=document.getTextLength();
    }
    editor.getCaretModel().moveToOffset(caretOffset);
  }
  ReplaceInProjectManager.reportNumberReplacedOccurences(project,occurrences);
  return replaced;
}
