{
  int caretOffset=editor.getCaretModel().getOffset();
  Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  int start=0;
  int end=document.getTextLength();
  if (!editor.getSelectionModel().hasSelection()) {
    for (int i=caretOffset - 1; i >= 0; i--) {
      char c=text.charAt(i);
      if (!Character.isJavaIdentifierPart(c)) {
        start=i + 1;
        break;
      }
    }
    for (int i=caretOffset; i < document.getTextLength(); i++) {
      char c=text.charAt(i);
      if (!Character.isJavaIdentifierPart(c)) {
        end=i;
        break;
      }
    }
  }
 else {
    start=editor.getSelectionModel().getSelectionStart();
    end=editor.getSelectionModel().getSelectionEnd();
  }
  if (start >= end) {
    return;
  }
  FindManager findManager=FindManager.getInstance(project);
  String s=text.subSequence(start,end).toString();
  FindSettings.getInstance().addStringToFind(s);
  findManager.getFindInFileModel().setStringToFind(s);
  findManager.setFindWasPerformed();
  findManager.clearFindingNextUsageInFile();
  FindModel model=new FindModel();
  model.setStringToFind(s);
  model.setCaseSensitive(true);
  model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection());
  final JComponent header=editor.getHeaderComponent();
  if (header instanceof EditorSearchComponent) {
    final EditorSearchComponent searchComponent=(EditorSearchComponent)header;
    searchComponent.setTextInField(model.getStringToFind());
  }
  findManager.setFindNextModel(model);
  doSearch(project,editor,caretOffset,true,model,true);
}
