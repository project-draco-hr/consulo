{
  Project project=e.getData(PlatformDataKeys.PROJECT);
  final Change[] changes=e.getData(VcsDataKeys.CHANGES);
  if ((changes == null) || (changes.length == 0))   return;
  String commitMessage=null;
  ShelvedChangeList[] shelvedChangeLists=e.getData(ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY);
  if (shelvedChangeLists != null && shelvedChangeLists.length > 0) {
    commitMessage=shelvedChangeLists[0].DESCRIPTION;
  }
 else {
    ChangeList[] changeLists=e.getData(VcsDataKeys.CHANGE_LISTS);
    if (changeLists != null && changeLists.length > 0) {
      commitMessage=changeLists[0].getComment();
    }
  }
  if (commitMessage == null) {
    commitMessage=e.getData(VcsDataKeys.PRESET_COMMIT_MESSAGE);
  }
  if (commitMessage == null) {
    commitMessage="";
  }
  List<Change> changeCollection=new ArrayList<Change>();
  Collections.addAll(changeCollection,changes);
  project=project == null ? ProjectManager.getInstance().getDefaultProject() : project;
  final CreatePatchCommitExecutor executor=CreatePatchCommitExecutor.getInstance(project);
  CommitSession commitSession=executor.createCommitSession(new CommitContext());
  DialogWrapper sessionDialog=new SessionDialog(executor.getActionText(),project,commitSession,changeCollection,commitMessage);
  sessionDialog.show();
  if (!sessionDialog.isOK()) {
    return;
  }
  preloadContent(project,changes);
  commitSession.execute(changeCollection,commitMessage);
}
