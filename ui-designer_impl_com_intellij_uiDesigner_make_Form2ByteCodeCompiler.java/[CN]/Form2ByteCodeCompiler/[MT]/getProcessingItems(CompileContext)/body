{
  if (!GuiDesignerConfiguration.getInstance(myProject).INSTRUMENT_CLASSES) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  final ArrayList<ProcessingItem> items=new ArrayList<ProcessingItem>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final CompileScope scope=context.getCompileScope();
      final CompileScope projectScope=context.getProjectCompileScope();
      final VirtualFile[] formFiles=projectScope.getFiles(StdFileTypes.GUI_DESIGNER_FORM,true);
      if (formFiles.length == 0)       return;
      final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
      final BindingsCache bindingsCache=new BindingsCache(myProject);
      final HashMap<Module,ArrayList<VirtualFile>> module2formFiles=sortByModules(formFiles);
      try {
        for (        final Module module : module2formFiles.keySet()) {
          final HashMap<String,VirtualFile> class2form=new HashMap<String,VirtualFile>();
          final ArrayList<VirtualFile> list=module2formFiles.get(module);
          for (          final VirtualFile formFile : list) {
            if (compilerManager.isExcludedFromCompilation(formFile)) {
              continue;
            }
            final String classToBind;
            try {
              classToBind=bindingsCache.getBoundClassName(formFile);
            }
 catch (            AlienFormFileException e) {
              continue;
            }
catch (            Exception e) {
              addMessage(context,UIDesignerBundle.message("error.cannot.process.form.file",e),formFile,CompilerMessageCategory.ERROR);
              continue;
            }
            if (classToBind == null) {
              continue;
            }
            final VirtualFile classFile=findFile(context,classToBind,module);
            if (classFile == null) {
              if (scope.belongs(formFile.getUrl())) {
                addMessage(context,UIDesignerBundle.message("error.class.to.bind.does.not.exist",classToBind),formFile,CompilerMessageCategory.ERROR);
              }
              continue;
            }
            final VirtualFile alreadyProcessedForm=class2form.get(classToBind);
            if (alreadyProcessedForm != null) {
              if (belongsToCompileScope(context,formFile,classToBind)) {
                addMessage(context,UIDesignerBundle.message("error.duplicate.bind",classToBind,alreadyProcessedForm.getPresentableUrl()),formFile,CompilerMessageCategory.ERROR);
              }
              continue;
            }
            class2form.put(classToBind,formFile);
            final ProcessingItem item=new MyInstrumentationItem(classFile,formFile,classToBind);
            items.add(item);
          }
        }
      }
  finally {
        bindingsCache.close();
      }
    }
  }
);
  return items.toArray(new FileProcessingCompiler.ProcessingItem[items.size()]);
}
