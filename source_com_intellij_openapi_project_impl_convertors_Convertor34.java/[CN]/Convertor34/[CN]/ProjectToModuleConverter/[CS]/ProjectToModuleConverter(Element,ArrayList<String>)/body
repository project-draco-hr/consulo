{
  myProjectRootManager=projectRootManager;
  myModuleRootManager=new Element("component");
  myModuleRootManager.setAttribute("name","NewModuleRootManager");
  myProjectRoots=new ArrayList<String>();
  myDetectedProblems=problems;
  final Element projectPath=projectRootManager.getChild("projectPath");
  if (projectPath != null) {
    processRootTypeElement(projectPath,new ProjectRootProcessor());
  }
  Collections.sort(myProjectRoots);
  for (int i=0; i < myProjectRoots.size(); i++) {
    String path=myProjectRoots.get(i);
    final int next=i + 1;
    while (next < myProjectRoots.size() && myProjectRoots.get(next).startsWith(path)) {
      myProjectRoots.remove(next);
    }
  }
  final Element sourcePath=projectRootManager.getChild("sourcePath");
  mySourceFolders=new ArrayList<String>();
  processRootTypeElement(sourcePath,new SourceRootProcessor());
  final Element excludePath=projectRootManager.getChild("excludePath");
  myExcludeFolders=new ArrayList<String>();
  processRootTypeElement(excludePath,new ExcludeRootsProcessor());
  Element javadocPath=projectRootManager.getChild("javadocPath");
  processRootTypeElement(javadocPath,new JavaDocRootProcessor());
  final Element patternExcludeFolder=new Element("excludeFolder");
  final Element patternSourceFolder=new Element("sourceFolder");
  patternSourceFolder.setAttribute("isTestSource","false");
  Map<String,List<String>> contentToSource=dispatchFolders(myProjectRoots,mySourceFolders);
  final Map<String,List<String>> contentToExclude=dispatchFolders(myProjectRoots,myExcludeFolders);
  for (Iterator<String> iterator=myProjectRoots.iterator(); iterator.hasNext(); ) {
    String root=iterator.next();
    final Element contentElement=new Element("content");
    contentElement.setAttribute("url",root);
    createFolders(contentElement,patternSourceFolder,contentToSource.get(root));
    createFolders(contentElement,patternExcludeFolder,contentToExclude.get(root));
    myModuleRootManager.addContent(contentElement);
  }
  final Element classPath=projectRootManager.getChild("classPath");
  processRootTypeElement(classPath,new ClassPathRootProcessor());
  final Element projectElement=(Element)myProjectRootManager.getParent();
  final Element compilerConfigurationElement=findNamedChild(projectElement,"component","CompilerConfiguration");
  if (compilerConfigurationElement != null) {
    final Element option=findNamedChild(compilerConfigurationElement,"option","DEFAULT_OUTPUT_PATH");
    final String path=option == null ? null : option.getAttributeValue("value");
    if (path != null) {
      final String url="file://" + path;
      final Element outputElement=new Element("output");
      outputElement.setAttribute("url",url);
      myModuleRootManager.addContent(outputElement);
      final Element outputTestElement=new Element("output-test");
      outputTestElement.setAttribute("url",url);
      myModuleRootManager.addContent(outputTestElement);
    }
{
      final Element outputMode=findNamedChild(compilerConfigurationElement,"option","OUTPUT_MODE");
      final String attributeValue=outputMode != null ? outputMode.getAttributeValue("value") : "";
      if ("multiple".equals(attributeValue)) {
        addProblem(MULTIPLE_OUTPUT_PATHS);
      }
    }
  }
  final Element excludeOutput=myProjectRootManager.getChild("exclude_output");
  if (excludeOutput != null) {
    final String enabled=excludeOutput.getAttributeValue("enabled");
    if ("yes".equals(enabled) || "true".equals(enabled)) {
      myModuleRootManager.addContent(new Element("exclude-output"));
    }
  }
}
