{
  if (file == null) {
    throw new IllegalArgumentException("file cannot be null");
  }
  ApplicationManager.getApplication().assertIsDispatchThread();
  final FileEditorManagerEx editorManager=FileEditorManagerEx.getInstanceEx(myProject);
  final Pair<FileEditor[],FileEditorProvider[]> editorsWithProviders=editorManager.getEditorsWithProviders(file);
  final FileEditor[] editors=editorsWithProviders.getFirst();
  final FileEditorProvider[] oldProviders=editorsWithProviders.getSecond();
  if (editors.length <= 0) {
    LOG.assertTrue(false,"No editors for file " + file.getPresentableUrl());
  }
  final FileEditor selectedEditor=editorManager.getSelectedEditor(file);
  LOG.assertTrue(selectedEditor != null);
  final int selectedProviderIndex=ArrayUtil.find(editors,selectedEditor);
  LOG.assertTrue(selectedProviderIndex != -1);
  final HistoryEntry entry=getEntry(file);
  if (entry != null) {
    myEntriesList.remove(entry);
    myEntriesList.add(entry);
  }
 else {
    final FileEditorState[] states=new FileEditorState[editors.length];
    final FileEditorProvider[] providers=new FileEditorProvider[editors.length];
    for (int i=states.length - 1; i >= 0; i--) {
      final FileEditorProvider provider=oldProviders[i];
      LOG.assertTrue(provider != null);
      providers[i]=provider;
      final FileEditorState state=editors[i].getState(FileEditorStateLevel.FULL);
      states[i]=state;
      LOG.assertTrue(state != null);
    }
    myEntriesList.add(new HistoryEntry(file,providers,states,providers[selectedProviderIndex]));
    trimToSize();
  }
}
