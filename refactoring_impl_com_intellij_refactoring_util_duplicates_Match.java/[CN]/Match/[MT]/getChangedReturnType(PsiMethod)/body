{
  final PsiType returnType=psiMethod.getReturnType();
  if (returnType != null) {
    final PsiElement parent=getMatchEnd().getParent();
    if (parent instanceof PsiExpression) {
      PsiMember member=null;
      if (parent instanceof PsiMethodCallExpression) {
        member=((PsiMethodCallExpression)parent).resolveMethod();
      }
 else       if (parent instanceof PsiReferenceExpression) {
        final PsiElement resolved=((PsiReferenceExpression)parent).resolve();
        member=resolved instanceof PsiMember ? (PsiMember)resolved : null;
      }
      if (member != null) {
        final PsiImmediateClassType expressionType=new PsiImmediateClassType(member.getContainingClass(),PsiSubstitutor.EMPTY);
        if (!TypeConversionUtil.isAssignable(expressionType,returnType)) {
          return expressionType;
        }
      }
    }
 else     if (parent instanceof PsiExpressionList) {
      final PsiExpression[] expressions=((PsiExpressionList)parent).getExpressions();
      final PsiElement call=parent.getParent();
      if (call instanceof PsiMethodCallExpression) {
        final PsiMethod method=((PsiMethodCallExpression)call).resolveMethod();
        if (method != null) {
          final int idx=ArrayUtil.find(expressions,getMatchEnd());
          final PsiParameter[] psiParameters=method.getParameterList().getParameters();
          if (idx >= 0 && idx < psiParameters.length) {
            final PsiType type=psiParameters[idx].getType();
            if (!TypeConversionUtil.isAssignable(type,returnType)) {
              return type;
            }
          }
        }
      }
    }
 else     if (parent instanceof PsiLocalVariable) {
      final PsiType localVariableType=((PsiLocalVariable)parent).getType();
      if (!TypeConversionUtil.isAssignable(localVariableType,returnType)) {
        return localVariableType;
      }
    }
  }
  return null;
}
