{
  final PsiVariable psiVariable=parameter.first;
  final List<PsiElement> currentValue=myParameterValues.get(psiVariable);
  final boolean isVararg=psiVariable instanceof PsiParameter && ((PsiParameter)psiVariable).isVarArgs();
  if (!(value instanceof PsiExpression))   return false;
  final PsiType type=((PsiExpression)value).getType();
  final PsiType parameterType=parameter.second;
  if (type == null)   return false;
  if (currentValue == null) {
    if (!(parameterType instanceof PsiClassType && ((PsiClassType)parameterType).resolve() instanceof PsiTypeParameter)) {
      if (!parameterType.isAssignableFrom(type))       return false;
      if (isVararg) {
        if (!((PsiEllipsisType)psiVariable.getType()).getComponentType().isAssignableFrom(type)) {
          myChangedParams.put(psiVariable,new PsiEllipsisType(parameterType));
        }
      }
 else       if (!psiVariable.getType().isAssignableFrom(type)) {
        myChangedParams.put(psiVariable,parameterType);
      }
    }
    final List<PsiElement> values=new ArrayList<PsiElement>();
    values.add(value);
    myParameterValues.put(psiVariable,values);
    final ArrayList<PsiElement> elements=new ArrayList<PsiElement>();
    myParameterOccurences.put(psiVariable,elements);
    return true;
  }
 else {
    for (    PsiElement val : currentValue) {
      if (!isVararg && !PsiEquivalenceUtil.areElementsEquivalent(val,value)) {
        return false;
      }
    }
    if (isVararg) {
      if (!parameterType.isAssignableFrom(type))       return false;
      currentValue.add(value);
    }
    myParameterOccurences.get(psiVariable).add(value);
    return true;
  }
}
