{
  assertEquals(expected.length(),actual.length());
  for (int i=0; i < expected.length(); i++) {
    char expectedChar=expected.charAt(i);
    char actualChar=actual.charAt(i);
    if (expectedChar != actualChar) {
      fail(String.format("Detected incorrect charAt() processing for result of subSequence() with deferred changes. Original text: '%s', " + "actual subSequence text: '%s', index: %d, expected symbol: '%c', actual symbol: '%c', subSequence history: %s",myArray.toString(),expected,i,expectedChar,actualChar,history));
    }
  }
  if (!expected.equals(actual.toString())) {
    fail(String.format("Detected incorrect toString() processing for result of subSequence() with deferred changes. Original text: '%s', " + "expected subSequence text: '%s', actual subSequence text: '%s', subSequence history: %s",myArray.toString(),expected,actual.toString(),history));
  }
  assertEquals(expected,actual.toString());
  for (int start=0; start < expected.length(); start++) {
    for (int end=start; end < expected.length(); end++) {
      history.push(new Pair<Integer,Integer>(start,end));
      checkSubSequence(expected.substring(start,end),actual.subSequence(start,end),history);
      history.pop();
    }
  }
}
