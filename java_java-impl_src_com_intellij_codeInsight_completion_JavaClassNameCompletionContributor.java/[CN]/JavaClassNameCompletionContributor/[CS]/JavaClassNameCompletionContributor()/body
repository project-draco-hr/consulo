{
  extend(CompletionType.CLASS_NAME,psiElement(),new CompletionProvider<CompletionParameters>(false){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet result){
      if (shouldShowSecondSmartCompletionHint(parameters) && CompletionUtil.shouldShowFeature(parameters,CodeCompletionFeatures.SECOND_CLASS_NAME_COMPLETION)) {
        CompletionService.getCompletionService().setAdvertisementText(CompletionBundle.message("completion.class.name.hint.2",getActionShortcut(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      final PsiElement insertedElement=parameters.getPosition();
      final ElementFilter filter=AFTER_THROW_NEW.accepts(insertedElement) ? new AssignableFromFilter("java.lang.Throwable") : IN_TYPE_PARAMETER.accepts(insertedElement) ? new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)) : INSIDE_METHOD_THROWS_CLAUSE.accepts(insertedElement) ? new ThisOrAnyInnerFilter(new AssignableFromFilter("java.lang.Throwable")) : TrueFilter.INSTANCE;
      if (AFTER_NEW.accepts(insertedElement)) {
        final PsiExpression expr=PsiTreeUtil.getContextOfType(insertedElement,PsiExpression.class,true);
        for (        final ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes(expr,true)) {
          final PsiType type=info.getType();
          final PsiClass psiClass=PsiUtil.resolveClassInType(type);
          if (psiClass != null) {
            result.addElement(AllClassesGetter.createLookupItem(psiClass));
          }
          final PsiType defaultType=info.getDefaultType();
          if (!defaultType.equals(type)) {
            final PsiClass defClass=PsiUtil.resolveClassInType(defaultType);
            if (defClass != null) {
              result.addElement(AllClassesGetter.createLookupItem(defClass));
            }
          }
        }
      }
      final boolean lookingForAnnotations=PsiJavaPatterns.psiElement().afterLeaf("@").accepts(insertedElement);
      AllClassesGetter.processJavaClasses(parameters,result.getPrefixMatcher(),parameters.getInvocationCount() <= 1,new Consumer<PsiClass>(){
        @Override public void consume(        PsiClass psiClass){
          if (lookingForAnnotations && !psiClass.isAnnotationType())           return;
          if (filter.isAcceptable(psiClass,insertedElement)) {
            result.addElement(AllClassesGetter.createLookupItem(psiClass));
          }
        }
      }
);
    }
  }
);
}
