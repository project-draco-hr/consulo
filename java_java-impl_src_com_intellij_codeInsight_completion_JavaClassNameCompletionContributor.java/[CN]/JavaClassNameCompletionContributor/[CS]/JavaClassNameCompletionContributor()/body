{
  extend(CompletionType.CLASS_NAME,psiElement(),new CompletionProvider<CompletionParameters>(false){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet result){
      if (shouldShowSecondSmartCompletionHint(parameters) && CompletionUtil.shouldShowFeature(parameters,CodeCompletionFeatures.SECOND_CLASS_NAME_COMPLETION)) {
        CompletionService.getCompletionService().setAdvertisementText(CompletionBundle.message("completion.class.name.hint.2",getActionShortcut(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      PsiElement insertedElement=parameters.getPosition();
      AllClassesGetter getter=new AllClassesGetter(TrueFilter.INSTANCE);
      if (AFTER_THROW_NEW.accepts(insertedElement)) {
        getter=new AllClassesGetter(new AssignableFromFilter("java.lang.Throwable"));
      }
 else       if (IN_TYPE_PARAMETER.accepts(insertedElement)) {
        getter=new AllClassesGetter(new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)));
      }
 else       if (INSIDE_METHOD_THROWS_CLAUSE.accepts(insertedElement)) {
        getter=new AllClassesGetter(new ThisOrAnyInnerFilter(new AssignableFromFilter("java.lang.Throwable")));
      }
      if (AFTER_NEW.accepts(insertedElement)) {
        final PsiExpression expr=PsiTreeUtil.getContextOfType(insertedElement,PsiExpression.class,true);
        for (        final ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes(expr,true)) {
          final PsiType type=info.getType();
          final PsiClass psiClass=PsiUtil.resolveClassInType(type);
          if (psiClass != null) {
            result.addElement(AllClassesGetter.createLookupItem(psiClass));
          }
          final PsiType defaultType=info.getDefaultType();
          if (!defaultType.equals(type)) {
            final PsiClass defClass=PsiUtil.resolveClassInType(defaultType);
            if (defClass != null) {
              result.addElement(AllClassesGetter.createLookupItem(defClass));
            }
          }
        }
      }
      getter.getClasses(insertedElement,result,parameters.getOffset(),parameters.getInvocationCount() <= 1);
    }
  }
);
}
