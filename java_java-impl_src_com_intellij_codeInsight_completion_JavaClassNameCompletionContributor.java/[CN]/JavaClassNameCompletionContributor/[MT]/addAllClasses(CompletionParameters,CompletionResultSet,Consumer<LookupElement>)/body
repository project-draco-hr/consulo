{
  final PsiElement insertedElement=parameters.getPosition();
  final ElementFilter filter=or(JavaSmartCompletionContributor.AFTER_THROW_NEW,JavaCompletionContributor.INSIDE_METHOD_THROWS_CLAUSE,JavaCompletionContributor.IN_CATCH_TYPE,JavaCompletionContributor.IN_MULTI_CATCH_TYPE).accepts(insertedElement) ? new AssignableFromFilter(CommonClassNames.JAVA_LANG_THROWABLE) : IN_TYPE_PARAMETER.accepts(insertedElement) ? new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)) : TrueFilter.INSTANCE;
  final boolean inJavaContext=parameters.getPosition() instanceof PsiIdentifier;
  if (AFTER_NEW.accepts(insertedElement)) {
    final PsiExpression expr=PsiTreeUtil.getContextOfType(insertedElement,PsiExpression.class,true);
    for (    final ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes(expr,true)) {
      final PsiType type=info.getType();
      final PsiClass psiClass=PsiUtil.resolveClassInType(type);
      if (psiClass != null) {
        consumer.consume(createClassLookupItem(psiClass,inJavaContext));
      }
      final PsiType defaultType=info.getDefaultType();
      if (!defaultType.equals(type)) {
        final PsiClass defClass=PsiUtil.resolveClassInType(defaultType);
        if (defClass != null) {
          consumer.consume(createClassLookupItem(defClass,inJavaContext));
        }
      }
    }
  }
  final boolean lookingForAnnotations=PsiJavaPatterns.psiElement().afterLeaf("@").accepts(insertedElement);
  AllClassesGetter.processJavaClasses(parameters,result.getPrefixMatcher(),parameters.getInvocationCount() <= 1,new Consumer<PsiClass>(){
    @Override public void consume(    PsiClass psiClass){
      if (lookingForAnnotations && !psiClass.isAnnotationType())       return;
      if (filter.isAcceptable(psiClass,insertedElement)) {
        consumer.consume(createClassLookupItem(psiClass,inJavaContext));
      }
    }
  }
);
}
