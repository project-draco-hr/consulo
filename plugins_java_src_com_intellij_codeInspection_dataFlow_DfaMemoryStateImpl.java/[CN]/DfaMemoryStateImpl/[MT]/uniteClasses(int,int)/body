{
  EqClass c1=myEqClasses.get(c1Index);
  EqClass c2=myEqClasses.get(c2Index);
  Set<DfaVariableValue> vars=ContainerUtil.newTroveSet();
  Set<DfaVariableValue> negatedVars=ContainerUtil.newTroveSet();
  int[] cs=new int[c1.size() + c2.size()];
  c1.set(0,cs,0,c1.size());
  c2.set(0,cs,c1.size(),c2.size());
  int nConst=0;
  for (  int c : cs) {
    DfaValue dfaValue=unwrap(myFactory.getValue(c));
    if (dfaValue instanceof DfaConstValue)     nConst++;
    if (dfaValue instanceof DfaVariableValue) {
      DfaVariableValue variableValue=(DfaVariableValue)dfaValue;
      if (variableValue.isNegated()) {
        negatedVars.add(variableValue.createNegated());
      }
 else {
        vars.add(variableValue);
      }
    }
    if (nConst > 1)     return false;
  }
  if (ContainerUtil.intersects(vars,negatedVars))   return false;
  TLongArrayList c2Pairs=new TLongArrayList();
  long[] distincts=myDistinctClasses.toArray();
  for (  long distinct : distincts) {
    int pc1=low(distinct);
    int pc2=high(distinct);
    boolean addedToC1=false;
    if (pc1 == c1Index || pc2 == c1Index) {
      addedToC1=true;
    }
    if (pc1 == c2Index || pc2 == c2Index) {
      if (addedToC1)       return false;
      c2Pairs.add(distinct);
    }
  }
  myEqClasses.set(c1Index,c1=new EqClass(c1));
  for (int i=0; i < c2.size(); i++) {
    int c=c2.get(i);
    c1.add(c);
  }
  for (int i=0; i < c2Pairs.size(); i++) {
    long c=c2Pairs.get(i);
    myDistinctClasses.remove(c);
    myDistinctClasses.add(createPair(c1Index,low(c) == c2Index ? high(c) : low(c)));
  }
  myEqClasses.set(c2Index,null);
  return true;
}
