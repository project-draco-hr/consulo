{
  StringBuilder result=new StringBuilder();
  result.append('<');
  if (myEphemeral) {
    result.append("ephemeral, ");
  }
  for (  EqClass set : getNonTrivialEqClasses()) {
    result.append(set);
  }
  if (!myDistinctClasses.isEmpty()) {
    result.append("\n  distincts: ");
    List<String> distincts=new ArrayList<String>();
    for (    UnorderedPair<EqClass> pair : getDistinctClassPairs()) {
      distincts.add("{" + pair.first + ", "+ pair.second+ "}");
    }
    Collections.sort(distincts);
    result.append(StringUtil.join(distincts," "));
  }
  if (!myStack.isEmpty()) {
    result.append("\n  stack: ").append(StringUtil.join(myStack,","));
  }
  if (!myVariableStates.isEmpty()) {
    result.append("\n  vars: ");
    for (    Map.Entry<DfaVariableValue,DfaVariableState> entry : myVariableStates.entrySet()) {
      result.append("[").append(entry.getKey()).append("->").append(entry.getValue()).append("] ");
    }
  }
  if (!myUnknownVariables.isEmpty()) {
    result.append("\n  unknowns: ").append(new HashSet<DfaVariableValue>(myUnknownVariables));
  }
  result.append('>');
  return result.toString();
}
