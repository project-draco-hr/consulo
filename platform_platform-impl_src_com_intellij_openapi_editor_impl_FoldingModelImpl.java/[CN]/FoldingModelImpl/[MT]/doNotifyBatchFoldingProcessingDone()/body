{
  myFoldTree.rebuild();
  myEditor.updateCaretCursor();
  myEditor.recalculateSizeAndRepaint();
  if (myEditor.getGutterComponentEx().isFoldingOutlineShown()) {
    myEditor.getGutterComponentEx().repaint();
  }
  LogicalPosition caretPosition=myEditor.getCaretModel().getLogicalPosition();
  int caretOffset=myEditor.logicalPositionToOffset(caretPosition);
  boolean hasBlockSelection=myEditor.getSelectionModel().hasBlockSelection();
  int selectionStart=myEditor.getSelectionModel().getSelectionStart();
  int selectionEnd=myEditor.getSelectionModel().getSelectionEnd();
  int column=-1;
  int line=-1;
  FoldRegion collapsed=myFoldTree.fetchOutermost(caretOffset);
  if (myCaretPositionSaved) {
    int savedOffset=myEditor.logicalPositionToOffset(new LogicalPosition(mySavedCaretY,mySavedCaretX));
    FoldRegion collapsedAtSaved=myFoldTree.fetchOutermost(savedOffset);
    column=mySavedCaretX;
    line=collapsedAtSaved != null ? collapsedAtSaved.getDocument().getLineNumber(collapsedAtSaved.getStartOffset()) : mySavedCaretY;
  }
  if (collapsed != null && column == -1) {
    line=collapsed.getDocument().getLineNumber(collapsed.getStartOffset());
    column=myEditor.offsetToLogicalPosition(collapsed.getStartOffset()).column;
  }
  boolean oldCaretPositionSaved=myCaretPositionSaved;
  if (column != -1) {
    myEditor.getCaretModel().moveToLogicalPosition(new LogicalPosition(line,column));
  }
 else {
    myEditor.getCaretModel().moveToLogicalPosition(caretPosition);
  }
  myCaretPositionSaved=oldCaretPositionSaved;
  if (!hasBlockSelection) {
    myEditor.getSelectionModel().setSelection(selectionStart,selectionEnd);
  }
  if (mySavedCaretShift > 0) {
    myEditor.getScrollingModel().disableAnimation();
    int scrollTo=myEditor.visibleLineNumberToYPosition(myEditor.getCaretModel().getVisualPosition().line) - mySavedCaretShift;
    myEditor.getScrollingModel().scrollVertically(scrollTo);
    myEditor.getScrollingModel().enableAnimation();
  }
}
