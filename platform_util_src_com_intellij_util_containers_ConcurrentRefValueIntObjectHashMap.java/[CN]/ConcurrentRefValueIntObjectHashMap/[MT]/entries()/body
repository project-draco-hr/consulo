{
  final Iterator<IntEntry<IntReference<V>>> entryIterator=myMap.entries().iterator();
  return new Iterable<ConcurrentIntObjectMap.IntEntry<V>>(){
    @Override public Iterator<ConcurrentIntObjectMap.IntEntry<V>> iterator(){
      return new Iterator<IntEntry<V>>(){
        IntEntry<V> next=nextAliveEntry();
        @Override public boolean hasNext(){
          return next != null;
        }
        @Override public IntEntry<V> next(){
          if (!hasNext())           throw new NoSuchElementException();
          IntEntry<V> result=next;
          next=nextAliveEntry();
          return result;
        }
        private IntEntry<V> nextAliveEntry(){
          while (entryIterator.hasNext()) {
            IntEntry<IntReference<V>> entry=entryIterator.next();
            final V v=entry.getValue().get();
            if (v == null) {
              continue;
            }
            final int key=entry.getKey();
            return new IntEntry<V>(){
              @Override public int getKey(){
                return key;
              }
              @NotNull @Override public V getValue(){
                return v;
              }
            }
;
          }
          return null;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
