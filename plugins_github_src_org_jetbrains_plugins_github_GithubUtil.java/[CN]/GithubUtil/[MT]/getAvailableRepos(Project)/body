{
  while (!checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    if (!dialog.isOK()) {
      return null;
    }
  }
  final GithubSettings settings=GithubSettings.getInstance();
  final String validPassword=settings.getPassword();
  return accessToGithubWithModalProgress(project,new ThrowableComputable<List<RepositoryInfo>,IOException>(){
    @Override public List<RepositoryInfo> compute() throws IOException {
      ProgressManager.getInstance().getProgressIndicator().setText("Extracting info about available repositories");
      return getAvailableRepos(settings.getHost(),settings.getLogin(),validPassword);
    }
  }
);
}
