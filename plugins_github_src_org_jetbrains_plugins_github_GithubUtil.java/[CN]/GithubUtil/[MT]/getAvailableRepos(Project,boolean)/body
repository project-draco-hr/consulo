{
  while (!checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    if (!dialog.isOK()) {
      return null;
    }
  }
  try {
    final GithubSettings settings=GithubSettings.getInstance();
    return accessToGithubWithModalProgress(project,new Computable<List<RepositoryInfo>>(){
      @Override public List<RepositoryInfo> compute(){
        ProgressManager.getInstance().getProgressIndicator().setText("Extracting info about available repositories");
        return getAvailableRepos(settings.getHost(),settings.getLogin(),settings.getPassword(),ownOnly);
      }
    }
);
  }
 catch (  CancelledException e) {
    return null;
  }
}
