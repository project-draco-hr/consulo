{
  myDomManager=manager;
  myRootElement=rootElement;
  myTree=new SimpleTree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setRootVisible(isRootVisible());
  myTree.setShowsRootHandles(true);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeUtil.installActions(myTree);
  myBuilder=new LazySimpleTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),treeStructure,WeightBasedComparator.INSTANCE);
  myBuilder.setNodeDescriptorComparator(null);
  myBuilder.initRoot();
  add(myTree,BorderLayout.CENTER);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(true);
      }
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(false);
        simpleNode.update();
      }
    }
  }
);
  myDomManager.addDomEventListener(new DomChangeAdapter(){
    protected void elementChanged(    DomElement element){
      if (element.isValid()) {
        queueUpdate(element.getRoot().getFile().getVirtualFile());
      }
    }
  }
,this);
  WolfTheProblemSolver.getInstance(myDomManager.getProject()).addProblemListener(new WolfTheProblemSolver.ProblemListener(){
    public void problemsAppeared(    VirtualFile file){
      queueUpdate(file);
    }
    public void problemsChanged(    VirtualFile file){
      queueUpdate(file);
    }
    public void problemsDisappeared(    VirtualFile file){
      queueUpdate(file);
    }
  }
,this);
  myTree.setPopupGroup(getPopupActions(),DOM_MODEL_TREE_VIEW_POPUP);
}
