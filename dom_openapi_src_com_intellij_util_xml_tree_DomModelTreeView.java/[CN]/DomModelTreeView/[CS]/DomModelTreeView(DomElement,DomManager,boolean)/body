{
  myDomManager=manager;
  myRootElement=rootElement;
  myTree=new SimpleTree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setRootVisible(isRootVisible);
  myTree.setShowsRootHandles(true);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeUtil.installActions(myTree);
  final SimpleTreeStructure treeStructure=rootElement != null ? new DomModelTreeStructure(rootElement) : getTreeStructure();
  myBuilder=new LazySimpleTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),treeStructure,WeightBasedComparator.INSTANCE);
  myBuilder.setNodeDescriptorComparator(null);
  if (rootElement != null) {
    myBuilder.initRoot();
  }
  add(myTree,BorderLayout.CENTER);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(true);
      }
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      final SimpleNode simpleNode=myTree.getNodeFor(event.getPath());
      if (simpleNode instanceof AbstractDomElementNode) {
        ((AbstractDomElementNode)simpleNode).setExpanded(false);
        simpleNode.update();
      }
    }
  }
);
  final ChangeListener changeListener=new ChangeListener();
  myDomManager.addDomEventListener(changeListener,this);
  WolfTheProblemSolver.getInstance(myDomManager.getProject()).addProblemListener(changeListener,this);
  myTree.setPopupGroup(getPopupActions(),DOM_MODEL_TREE_VIEW_POPUP);
}
