{
  Pair<PsiType,PsiType> p=new Pair<PsiType,PsiType>(type1,type2);
  if (compared.contains(p))   return PsiWildcardType.createUnbounded(manager);
  compared.add(p);
  if (type1 instanceof PsiWildcardType) {
    PsiWildcardType wild1=(PsiWildcardType)type1;
    if (type2 instanceof PsiWildcardType) {
      PsiWildcardType wild2=(PsiWildcardType)type2;
      if (wild1.isExtends() == wild2.isExtends()) {
        return wild1.isExtends() ? PsiWildcardType.createExtends(manager,getLeastUpperBound(wild1.getBound(),wild2.getBound(),compared,manager)) : wild1.isSuper() ? PsiWildcardType.createSuper(manager,getGreatestLowerBound(wild1.getBound(),wild2.getBound())) : wild1;
      }
 else {
        return wild1.getBound().equals(wild2.getBound()) ? wild1.getBound() : PsiWildcardType.createUnbounded(manager);
      }
    }
 else {
      return wild1.isExtends() ? PsiWildcardType.createExtends(manager,getLeastUpperBound(wild1.getBound(),type2,compared,manager)) : wild1.isSuper() ? PsiWildcardType.createSuper(manager,getGreatestLowerBound(wild1.getBound(),type2)) : wild1;
    }
  }
 else   if (type2 instanceof PsiWildcardType) {
    return getLeastContainingTypeArgument(type2,type1,compared,manager);
  }
  if (type1.equals(type2))   return type1;
  return PsiWildcardType.createExtends(manager,getLeastUpperBound(type1,type2,compared,manager));
}
