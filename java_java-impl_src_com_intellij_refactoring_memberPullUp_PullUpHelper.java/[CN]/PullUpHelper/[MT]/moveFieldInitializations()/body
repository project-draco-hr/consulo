{
  LOG.assertTrue(myMembersAfterMove != null);
  final LinkedHashSet<PsiField> movedFields=new LinkedHashSet<PsiField>();
  for (  PsiMember member : myMembersAfterMove) {
    if (member instanceof PsiField) {
      movedFields.add((PsiField)member);
    }
  }
  if (movedFields.isEmpty())   return;
  PsiMethod[] constructors=myTargetSuperClass.getConstructors();
  if (constructors.length == 0) {
    constructors=new PsiMethod[]{null};
  }
  HashMap<PsiMethod,HashSet<PsiMethod>> constructorsToSubConstructors=buildConstructorsToSubConstructorsMap(constructors);
  for (  PsiMethod constructor : constructors) {
    HashSet<PsiMethod> subConstructors=constructorsToSubConstructors.get(constructor);
    tryToMoveInitializers(constructor,subConstructors,movedFields);
  }
}
