{
  final FileEditor[] editors=FileEditorManager.getInstance(myProject).getAllEditors(file);
  if (editors.length == 0)   return null;
  return new ReadTask(){
    private boolean isOutdated(){
      if (myProject.isDisposed() || !file.isValid() || indicator != getCurrentProgress(file)) {
        return true;
      }
      for (      FileEditor editor : editors) {
        if (!editor.isValid()) {
          return true;
        }
      }
      return false;
    }
    @Nullable @Override @RequiredReadAction public Continuation performInReadAction(    @NotNull ProgressIndicator indicator) throws ProcessCanceledException {
      if (isOutdated())       return null;
      final List<EditorNotificationProvider<?>> providers=DumbService.getInstance(myProject).filterByDumbAwareness(myProvidersValue.getValue());
      final List<Runnable> updates=ContainerUtil.newArrayList();
      for (      final FileEditor editor : editors) {
        for (        final EditorNotificationProvider<?> provider : providers) {
          final JComponent component=provider.createNotificationPanel(file,editor);
          updates.add(new Runnable(){
            @Override public void run(){
              updateNotification(editor,provider.getKey(),component);
            }
          }
);
        }
      }
      return new Continuation(new Runnable(){
        @Override public void run(){
          if (!isOutdated()) {
            file.putUserData(CURRENT_UPDATES,null);
            for (            Runnable update : updates) {
              update.run();
            }
          }
        }
      }
);
    }
    @Override public void onCanceled(    @NotNull ProgressIndicator ignored){
      if (getCurrentProgress(file) == indicator) {
        updateNotifications(file);
      }
    }
  }
;
}
