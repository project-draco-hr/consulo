{
  final PsiJavaToken token;
  if (element instanceof PsiJavaToken) {
    token=(PsiJavaToken)element;
  }
 else {
    final PsiElement prevSibling=element.getPrevSibling();
    if (prevSibling instanceof PsiJavaToken) {
      token=(PsiJavaToken)prevSibling;
    }
 else {
      throw new AssertionError();
    }
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)element.getParent();
  final PsiPolyadicExpression subexpression=ConstantSubexpressionPredicate.getSubexpression(polyadicExpression,token);
  final String text=HighlightUtil.getPresentableText(subexpression);
  return IntentionPowerPackBundle.message("constant.expression.intention.name",text);
}
