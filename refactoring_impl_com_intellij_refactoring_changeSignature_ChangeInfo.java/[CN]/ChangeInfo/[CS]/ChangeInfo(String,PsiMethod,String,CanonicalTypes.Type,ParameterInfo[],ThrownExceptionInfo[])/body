{
  this.newVisibility=newVisibility;
  this.method=method;
  this.newName=newName;
  this.newReturnType=newType;
  this.newParms=newParms;
  wasVararg=method.isVarArgs();
  this.oldName=method.getName();
  final PsiManager manager=method.getManager();
  if (!method.isConstructor()) {
    this.oldType=manager.getElementFactory().createTypeElement(method.getReturnType()).getText();
  }
 else {
    this.oldType=null;
  }
  PsiParameter[] parameters=method.getParameterList().getParameters();
  this.oldParameterNames=new String[parameters.length];
  this.oldParameterTypes=new String[parameters.length];
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    this.oldParameterNames[i]=parameter.getName();
    this.oldParameterTypes[i]=parameter.getManager().getElementFactory().createTypeElement(parameter.getType()).getText();
  }
  this.isVisibilityChanged=!method.hasModifierProperty(newVisibility);
  this.isNameChanged=!newName.equals(oldName);
  if (!method.isConstructor()) {
    try {
      this.isReturnTypeChanged=!newReturnType.getType(this.method,manager).equals(this.method.getReturnType());
    }
 catch (    IncorrectOperationException e) {
      this.isReturnTypeChanged=true;
    }
  }
  if (parameters.length != newParms.length) {
    this.isParameterSetOrOrderChanged=true;
  }
 else {
    for (int i=0; i < newParms.length; i++) {
      ParameterInfo parmInfo=newParms[i];
      PsiParameter parameter=parameters[i];
      if (i != parmInfo.oldParameterIndex) {
        this.isParameterSetOrOrderChanged=true;
        break;
      }
      if (!parmInfo.getName().equals(parameter.getName())) {
        this.isParameterNamesChanged=true;
      }
      try {
        if (!parmInfo.createType(method,manager).equals(parameter.getType())) {
          this.isParameterTypesChanged=true;
        }
      }
 catch (      IncorrectOperationException e) {
        this.isParameterTypesChanged=true;
      }
    }
  }
  setupPropagationEnabled(parameters,newParms);
  setupExceptions(newExceptions,method);
  this.toRemoveParm=new boolean[parameters.length];
  Arrays.fill(this.toRemoveParm,true);
  for (  ParameterInfo info : newParms) {
    if (info.oldParameterIndex < 0)     continue;
    this.toRemoveParm[info.oldParameterIndex]=false;
  }
  PsiElementFactory factory=manager.getElementFactory();
  this.defaultValues=new PsiExpression[newParms.length];
  for (int i=0; i < newParms.length; i++) {
    ParameterInfo info=newParms[i];
    if (info.oldParameterIndex < 0 && !info.isVarargType()) {
      try {
        this.defaultValues[i]=factory.createExpressionFromText(info.defaultValue,method);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
  if (this.newParms.length == 0) {
    retainsVarargs=false;
    obtainsVarags=false;
  }
 else {
    final ParameterInfo lastNewParm=this.newParms[this.newParms.length - 1];
    obtainsVarags=lastNewParm.isVarargType();
    retainsVarargs=lastNewParm.oldParameterIndex >= 0 && obtainsVarags;
  }
  ejbRole=EjbRolesUtil.getEjbRole(method);
}
