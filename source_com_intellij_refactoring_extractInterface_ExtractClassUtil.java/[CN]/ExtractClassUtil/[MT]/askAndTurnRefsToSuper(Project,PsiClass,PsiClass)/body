{
  final SmartPsiElementPointer classPointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(aClass);
  final SmartPsiElementPointer interfacePointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(aSuperClass);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      final PsiElement classElement=classPointer.getElement();
      final PsiElement interfaceElement=interfacePointer.getElement();
      if (classElement != null && classElement instanceof PsiClass && interfaceElement != null && interfaceElement instanceof PsiClass) {
        final PsiClass superClass=(PsiClass)interfaceElement;
        String superClassName=superClass.getName();
        String className=((PsiClass)classElement).getName();
        String createdString=superClass.isInterface() ? RefactoringBundle.message("interface.has.been.successfully.created",superClassName) : RefactoringBundle.message("class.has.been.successfully.created",superClassName);
        String message=createdString + "\n" + RefactoringBundle.message("use.super.references.prompt",ApplicationNamesInfo.getInstance().getProductName(),className,superClassName);
        YesNoPreviewUsagesDialog dialog=new YesNoPreviewUsagesDialog(RefactoringBundle.message("analyze.and.replace.usages"),message,RefactoringSettings.getInstance().EXTRACT_INTERFACE_PREVIEW_USAGES,null,project);
        dialog.show();
        if (dialog.isOK()) {
          final boolean isPreviewUsages=dialog.isPreviewUsages();
          RefactoringSettings.getInstance().EXTRACT_INTERFACE_PREVIEW_USAGES=isPreviewUsages;
          TurnRefsToSuperProcessor processor=new TurnRefsToSuperProcessor(project,(PsiClass)classElement,(PsiClass)interfaceElement,true);
          processor.setPreviewUsages(isPreviewUsages);
          processor.run();
        }
      }
    }
  }
);
}
