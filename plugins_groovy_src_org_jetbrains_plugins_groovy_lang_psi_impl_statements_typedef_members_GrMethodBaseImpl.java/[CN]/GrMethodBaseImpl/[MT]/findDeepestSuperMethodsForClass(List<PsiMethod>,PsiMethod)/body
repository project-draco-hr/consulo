{
  PsiClassType[] superClassTypes=method.getContainingClass().getSuperTypes();
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=superClassMethod.getHierarchicalMethodSignature();
      final HierarchicalMethodSignature thisMethodSignature=getHierarchicalMethodSignature();
      if (superMethodSignature.equals(thisMethodSignature) && !superClassMethod.getModifierList().hasExplicitModifier(PsiModifier.STATIC)) {
        checkForMethodOverriding(collectedMethods,superClassMethod);
      }
      findDeepestSuperMethodsForClass(collectedMethods,superClassMethod);
    }
  }
}
