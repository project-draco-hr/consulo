{
  if (isConstructor()) {
    return null;
  }
  final GrTypeElement element=getReturnTypeElementGroovy();
  if (element != null) {
    return element.getType();
  }
  if (myTakingReturnTypeFromSupers.get() == Boolean.TRUE) {
    return PsiType.getJavaLangObject(getManager(),getResolveScope());
  }
  myTakingReturnTypeFromSupers.set(Boolean.TRUE);
  try {
    final PsiMethod[] superMethods=findSuperMethods();
    if (superMethods.length == 0) {
      return PsiType.getJavaLangObject(getManager(),getResolveScope());
    }
    PsiType best=null;
    for (    PsiMethod method : superMethods) {
      PsiType type=method.getReturnType();
      final PsiClass superClass=method.getContainingClass();
      if (type != null && superClass != null && InheritanceUtil.isInheritorOrSelf(getContainingClass(),superClass,true)) {
        type=TypeConversionUtil.getSuperClassSubstitutor(superClass,getContainingClass(),PsiSubstitutor.EMPTY).substitute(type);
        if (type != null) {
          if (!(type instanceof PsiClassType && ((PsiClassType)type).resolve() instanceof PsiTypeVariable || type instanceof PsiWildcardType || type instanceof PsiCapturedWildcardType)) {
            if (best == null || best.isAssignableFrom(type)) {
              best=type;
            }
          }
        }
      }
    }
    if (best == null) {
      return PsiType.getJavaLangObject(getManager(),getResolveScope());
    }
    return best;
  }
  finally {
    myTakingReturnTypeFromSupers.set(null);
  }
}
