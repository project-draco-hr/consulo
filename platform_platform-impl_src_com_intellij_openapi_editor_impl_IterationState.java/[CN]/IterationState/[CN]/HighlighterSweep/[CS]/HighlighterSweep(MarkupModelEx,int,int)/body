{
  final List<RangeHighlighterEx> list=new ArrayList<RangeHighlighterEx>();
  markupModel.processRangeHighlightersOverlappingWith(start,end,new CommonProcessors.CollectProcessor<RangeHighlighterEx>(list));
  highlighters=list.isEmpty() ? RangeHighlighterEx.EMPTY_ARRAY : list.toArray(new RangeHighlighterEx[list.size()]);
  Arrays.sort(highlighters,RangeHighlighterEx.BY_AFFECTED_START_OFFSET);
  int skipped=0;
  while (i < highlighters.length) {
    RangeHighlighterEx highlighter=highlighters[i++];
    if (!skipHighlighter(highlighter)) {
      myNextHighlighter=highlighter;
      break;
    }
    skipped++;
  }
  if (skipped > Math.min(1000,markupModel.getDocument().getTextLength())) {
    int i=0;
  }
}
