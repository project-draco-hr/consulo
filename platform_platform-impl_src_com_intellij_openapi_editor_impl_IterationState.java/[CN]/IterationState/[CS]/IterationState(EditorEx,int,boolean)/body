{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  myDocument=(DocumentEx)editor.getDocument();
  myStartOffset=start;
  myEnd=editor.getDocument().getTextLength();
  myEditor=editor;
  LOG.assertTrue(myStartOffset <= myEnd);
  myHighlighterIterator=editor.getHighlighter().createIterator(start);
  hasSelection=useCaretAndSelection && editor.getSelectionModel().hasSelection();
  mySelectionStart=hasSelection ? editor.getSelectionModel().getSelectionStart() : -1;
  mySelectionEnd=hasSelection ? editor.getSelectionModel().getSelectionEnd() : -1;
  myFoldingModel=editor.getFoldingModel();
  myFoldTextAttributes=myFoldingModel.getPlaceholderAttributes();
  mySelectionAttributes=editor.getSelectionModel().getTextAttributes();
  myReadOnlyColor=myEditor.getColorsScheme().getColor(EditorColors.READONLY_FRAGMENT_BACKGROUND_COLOR);
  CaretModel caretModel=editor.getCaretModel();
  myCaretRowAttributes=editor.isRendererMode() ? null : caretModel.getTextAttributes();
  myDefaultBackground=editor.getColorsScheme().getDefaultBackground();
  myDefaultForeground=editor.getColorsScheme().getDefaultForeground();
  myCaretRowStart=caretModel.getVisualLineStart();
  myCaretRowEnd=caretModel.getVisualLineEnd();
  myCachedAttributesList=new ArrayList<TextAttributes>(5);
  myCurrentHighlighters=new ArrayList<RangeHighlighterEx>();
  MarkupModelEx editorMarkup=(MarkupModelEx)editor.getMarkupModel();
  myView.init(editorMarkup,start);
  final MarkupModelEx docMarkup=(MarkupModelEx)editor.getDocument().getMarkupModel(editor.getProject());
  myDoc.init(docMarkup,start);
  myEndOffset=myStartOffset;
  advance();
}
