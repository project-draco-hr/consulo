{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String methName=method.getName();
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters == null) {
    return;
  }
  final int numParameters=parameters.length;
  PsiClass ancestorClass=aClass.getSuperClass();
  final Set<PsiClass> visitedClasses=new HashSet<PsiClass>();
  while (ancestorClass != null) {
    if (!visitedClasses.add(ancestorClass)) {
      return;
    }
    final PsiMethod[] methods=ancestorClass.findMethodsByName(methName,false);
    for (    final PsiMethod testMethod : methods) {
      final PsiParameterList testParametersList=testMethod.getParameterList();
      final int numTestParameters=testParametersList.getParameters().length;
      if (numParameters != numTestParameters) {
        continue;
      }
      if (testMethod.hasModifierProperty(PsiModifier.STATIC) && !testMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
        registerMethodError(method);
        return;
      }
    }
    ancestorClass=ancestorClass.getSuperClass();
  }
}
