{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  PsiClass ancestorClass=aClass.getSuperClass();
  final Set visitedClasses=new HashSet();
  while (ancestorClass != null) {
    if (!visitedClasses.add(ancestorClass)) {
      return;
    }
    if (methodOverloads(method,ancestorClass)) {
      registerMethodError(method);
      return;
    }
    ancestorClass=ancestorClass.getSuperClass();
  }
}
