{
  try {
synchronized (myQueue) {
      while (myQueue.isEmpty()) {
        myQueue.wait(WAIT_TIMEOUT);
        if (isStopped)         return false;
      }
    }
  }
 catch (  InterruptedException e) {
    MavenLog.LOG.error(e);
    return false;
  }
  if (isStopped)   return false;
  myCurrentTaskHandler=MavenUtil.runInBackground(myProject,myTitle,myCancellable,new MavenTask(){
    public void run(    MavenProgressIndicator indicator) throws MavenProcessCanceledException {
      int counter=0;
      while (true) {
        MavenProjectsProcessorTask task;
        int queueSize;
synchronized (myQueue) {
          task=myQueue.peek();
          queueSize=myQueue.size();
        }
        if (isStopped || task == null)         return;
        try {
          indicator.checkCanceled();
          counter++;
          indicator.setFraction(counter / (double)(counter + queueSize));
          String text=myTitle;
          if (queueSize > 0)           text+=" (" + (queueSize + 1) + " in queue)";
          indicator.setText(text);
          task.perform(myProject,myEmbeddersManager,new SoutMavenConsole(),indicator);
        }
  finally {
synchronized (myQueue) {
            myQueue.poll();
          }
        }
      }
    }
  }
);
  myCurrentTaskHandler.waitFor();
  if (myCurrentTaskHandler.isCancelled()) {
    cancelAllPendingRequests();
  }
  myCurrentTaskHandler=null;
  return !isStopped;
}
