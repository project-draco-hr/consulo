{
  MavenProjectsProcessorTask task;
  try {
synchronized (myQueue) {
      while (myQueue.isEmpty()) {
        myQueue.wait(WAIT_TIMEOUT);
        if (isStopped)         return false;
      }
      task=myQueue.poll();
      myQueueSize=myQueue.size();
    }
    fireQueueChanged(myQueueSize);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (isStopped)   return false;
  if (task != null) {
    try {
      doPerform(task);
    }
 catch (    Throwable e) {
      MavenLog.LOG.error(e);
    }
  }
  return true;
}
