{
  final TestData data=config.getPersistantData();
  PsiManager psiManager=PsiManager.getInstance(project);
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    final String packageName=data.getPackageName();
    PsiPackage psiPackage=psiManager.findPackage(packageName);
    if (psiPackage == null) {
      throw CantRunException.packageNotFound(packageName);
    }
 else {
      TestClassFilter filter=getFilter(psiPackage);
      classes.putAll(calculateDependencies(data,true,TestNGUtil.getAllTestClasses(filter)));
      if (classes.size() == 0) {
        ExecutionUtil.showExecutionErrorMessage(new CantRunException("No tests found in the package \"" + packageName + '\"'),"Can't Run " + config.getName(),project);
        return false;
      }
    }
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    PsiClass psiClass=psiManager.findClass(data.getMainClassName(),data.getScope().getSourceScope(config).getGlobalSearchScope());
    if (psiClass == null) {
      ExecutionUtil.showExecutionErrorMessage(new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"'),"Can't Run " + config.getName(),project);
      return false;
    }
    classes.putAll(calculateDependencies(data,true,psiClass));
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    PsiClass psiClass=psiManager.findClass(data.getMainClassName(),data.getScope().getSourceScope(config).getGlobalSearchScope());
    if (psiClass == null) {
      ExecutionUtil.showExecutionErrorMessage(new CantRunException("No tests found in the class \"" + data.getMainClassName() + '\"'),"Can't Run " + config.getName(),project);
      return false;
    }
    classes.putAll(calculateDependencies(data,false,psiClass));
    classes.put(psiClass,Arrays.asList(psiClass.findMethodsByName(data.getMethodName(),true)));
  }
 else   if (data.TEST_OBJECT.equals(TestType.GROUP.getType())) {
    PsiClass[] testClasses=TestNGUtil.getAllTestClasses(new TestClassFilter(data.getScope().getSourceScope(config).getGlobalSearchScope(),project,true));
    for (    PsiClass c : testClasses) {
      classes.put(c,new HashSet<PsiMethod>());
    }
  }
  return true;
}
