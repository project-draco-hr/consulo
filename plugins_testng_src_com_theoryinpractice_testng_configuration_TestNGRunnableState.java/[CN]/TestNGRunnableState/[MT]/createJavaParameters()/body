{
  Project project=config.getProject();
  JavaParameters javaParameters=new JavaParameters();
  EnvironmentVariablesComponent.setupEnvs(javaParameters,config.getPersistantData().getEnvs(),config.getPersistantData().PASS_PARENT_ENVS);
  javaParameters.getVMParametersList().add("-ea");
  javaParameters.setMainClass("org.testng.remote.RemoteTestNG");
  Module module=config.getConfigurationModule().getModule();
  LanguageLevel effectiveLanguageLevel=module == null ? ProjectRootManagerEx.getInstanceEx(project).getLanguageLevel() : module.getEffectiveLanguageLevel();
  boolean is15=effectiveLanguageLevel != LanguageLevel.JDK_1_4 && effectiveLanguageLevel != LanguageLevel.JDK_1_3;
  LOGGER.info("Language level is " + effectiveLanguageLevel.toString());
  LOGGER.info("is15 is " + is15);
  javaParameters.getClassPath().add(is15 ? PathUtil.getJarPathForClass(AfterClass.class) : new File(PathManager.getPreinstalledPluginsPath(),"testng/lib-jdk14/testng-jdk14.jar").getPath());
  JavaParametersUtil.configureConfiguration(javaParameters,config);
  ProjectJdk jdk=module == null ? ProjectRootManager.getInstance(project).getProjectJdk() : ModuleRootManager.getInstance(module).getJdk();
  javaParameters.setJdk(jdk);
  final Object[] patchers=Extensions.getExtensions(ExtensionPoints.JUNIT_PATCHER);
  for (  Object patcher : patchers) {
    ((JUnitPatcher)patcher).patchJavaParameters(module,javaParameters);
  }
  PathUtilEx.addRtJar(javaParameters.getClassPath());
  if (config.isCoverageEnabled()) {
    final CoverageDataManager coverageDataManager=CoverageDataManager.getInstance(project);
    DefaultCoverageFileProvider fileProvider=new DefaultCoverageFileProvider(config.getCoverageFilePath());
    LOGGER.info("Adding coverage data from " + fileProvider.getCoverageDataFilePath());
    myCurrentCoverageSuite=coverageDataManager.addCoverageSuite(config.getGeneratedName() + " Coverage Results",fileProvider,config.getCoveragePatterns(),new Date().getTime(),config.getSuiteToMergeWith());
    LOGGER.info("Added coverage data with name '" + myCurrentCoverageSuite.getPresentableName() + "'");
    config.appendCoverageArgument(javaParameters);
  }
  LOGGER.info("Test scope is: " + config.getPersistantData().getScope());
  if (config.getPersistantData().getScope() == TestSearchScope.WHOLE_PROJECT) {
    LOGGER.info("Configuring for whole project");
    JavaParametersUtil.configureProject(config.getProject(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,config.ALTERNATIVE_JRE_PATH_ENABLED ? config.ALTERNATIVE_JRE_PATH : null);
  }
 else {
    LOGGER.info("Configuring for module:" + config.getConfigurationModule().getModuleName());
    JavaParametersUtil.configureModule(config.getConfigurationModule(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,config.ALTERNATIVE_JRE_PATH_ENABLED ? config.ALTERNATIVE_JRE_PATH : null);
  }
  calculateServerPort();
  TestData data=config.getPersistantData();
  javaParameters.getProgramParametersList().add(TestNGCommandLineArgs.PORT_COMMAND_OPT,String.valueOf(port));
  if (!is15) {
    javaParameters.getProgramParametersList().add(TestNGCommandLineArgs.ANNOTATIONS_COMMAND_OPT,"javadoc");
  }
  if (data.getOutputDirectory() != null && !"".equals(data.getOutputDirectory())) {
    javaParameters.getProgramParametersList().add(TestNGCommandLineArgs.OUTDIR_COMMAND_OPT,data.getOutputDirectory());
  }
  if (data.TEST_LISTENERS != null && !data.TEST_LISTENERS.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    for (Iterator<String> it=data.TEST_LISTENERS.iterator(); it.hasNext(); ) {
      String listenerClassName=it.next();
      if (listenerClassName != null && !"".equals(listenerClassName)) {
        sb.append(listenerClassName);
        if (it.hasNext()) {
          sb.append(";");
        }
      }
    }
    javaParameters.getProgramParametersList().add(TestNGCommandLineArgs.LISTENER_COMMAND_OPT,sb.toString());
  }
  VirtualFile[] sources;
  if ((data.getScope() == TestSearchScope.WHOLE_PROJECT && TestType.PACKAGE.getType().equals(data.TEST_OBJECT)) || module == null) {
    sources=ProjectRootManager.getInstance(project).getContentSourceRoots();
  }
 else {
    sources=ModuleRootManager.getInstance(module).getSourceRoots();
  }
  if (sources.length > 0) {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < sources.length; i++) {
      VirtualFile source=sources[i];
      sb.append(source.getPath());
      if (i < sources.length - 1) {
        sb.append(';');
      }
    }
    javaParameters.getProgramParametersList().add(TestNGCommandLineArgs.SRC_COMMAND_OPT,sb.toString());
  }
  Map<PsiClass,Collection<PsiMethod>> classes=new HashMap<PsiClass,Collection<PsiMethod>>();
  fillTestObjects(classes,project);
  if (classes.size() > 0) {
    Map<String,Collection<String>> map=new HashMap<String,Collection<String>>();
    for (    Map.Entry<PsiClass,Collection<PsiMethod>> entry : classes.entrySet()) {
      Collection<String> methods=new HashSet<String>(entry.getValue().size());
      for (      PsiMethod method : entry.getValue()) {
        methods.add(method.getName());
      }
      map.put(entry.getKey().getQualifiedName(),methods);
    }
    Collection<String> groupNames=null;
    if (TestType.GROUP.getType().equals(data.TEST_OBJECT)) {
      String groupName=data.getGroupName();
      if (groupName != null && groupName.length() > 0) {
        groupNames=new HashSet<String>(1);
        groupNames.add(groupName);
      }
    }
    Map<String,String> testParams=buildTestParameters(data);
    String annotationType=data.ANNOTATION_TYPE;
    if (annotationType == null || "".equals(annotationType)) {
      annotationType=is15 ? TestNG.JDK_ANNOTATION_TYPE : TestNG.JAVADOC_ANNOTATION_TYPE;
    }
    LOGGER.info("Using annotationType of " + annotationType);
    LaunchSuite suite=SuiteGenerator.createSuite(project.getName(),null,map,groupNames,testParams,annotationType,1);
    File xmlFile=suite.save(new File(PathManager.getSystemPath()));
    javaParameters.getProgramParametersList().add(xmlFile.getAbsolutePath());
  }
 else   if (TestType.SUITE.getType().equals(data.TEST_OBJECT)) {
    try {
      Collection<XmlSuite> suites=new Parser(data.getSuiteName()).parse();
      for (      XmlSuite suite : suites) {
        Map<String,String> params=suite.getParameters();
        params.putAll(buildTestParameters(data));
        String annotationType=data.ANNOTATION_TYPE;
        if (annotationType != null && !"".equals(annotationType)) {
          suite.setAnnotations(annotationType);
        }
        LOGGER.info("Using annotationType of " + annotationType);
        final String fileId=(project.getName() + '_' + suite.getName()+ '_'+ Integer.toHexString(suite.getName().hashCode())+ ".xml").replace(' ','_');
        final File suiteFile=new File(PathManager.getSystemPath(),fileId);
        FileWriter fileWriter=new FileWriter(suiteFile);
        fileWriter.write(suite.toXml());
        fileWriter.close();
        javaParameters.getProgramParametersList().add(suiteFile.getAbsolutePath());
      }
    }
 catch (    Exception e) {
      throw new CantRunException("Unable to parse suite: " + e.getMessage());
    }
  }
  if (runnerSettings.getData() instanceof DebuggingRunnerData) {
    ParametersList params=javaParameters.getVMParametersList();
    String hostname="localhost";
    try {
      hostname=InetAddress.getLocalHost().getHostName();
    }
 catch (    UnknownHostException e) {
    }
    params.add("-Xdebug");
    params.add("-Xrunjdwp:transport=dt_socket,address=" + hostname + ':'+ debugPort+ ",suspend=y,server=n");
  }
  return javaParameters;
}
