{
  final Project project=config.getProject();
  final JavaParameters javaParameters=new JavaParameters();
  javaParameters.setupEnvs(config.getPersistantData().getEnvs(),config.getPersistantData().PASS_PARENT_ENVS);
  javaParameters.setMainClass("org.testng.RemoteTestNGStarter");
  javaParameters.setWorkingDirectory(config.getWorkingDirectory());
  javaParameters.getClassPath().add(PathUtil.getJarPathForClass(RemoteTestNGStarter.class));
  Module module=config.getConfigurationModule().getModule();
  LanguageLevel effectiveLanguageLevel=module == null ? LanguageLevelProjectExtension.getInstance(project).getLanguageLevel() : LanguageLevelUtil.getEffectiveLanguageLevel(module);
  final boolean is15=effectiveLanguageLevel != LanguageLevel.JDK_1_4 && effectiveLanguageLevel != LanguageLevel.JDK_1_3;
  LOG.info("Language level is " + effectiveLanguageLevel.toString());
  LOG.info("is15 is " + is15);
  JavaParametersUtil.configureConfiguration(javaParameters,config);
  Sdk jdk=module == null ? ProjectRootManager.getInstance(project).getProjectSdk() : ModuleRootManager.getInstance(module).getSdk();
  javaParameters.setJdk(jdk);
  final Object[] patchers=Extensions.getExtensions(ExtensionPoints.JUNIT_PATCHER);
  for (  Object patcher : patchers) {
    ((JUnitPatcher)patcher).patchJavaParameters(module,javaParameters);
  }
  JavaSdkUtil.addRtJar(javaParameters.getClassPath());
  for (  RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
    ext.updateJavaParameters(config,javaParameters,getRunnerSettings());
  }
  LOG.info("Test scope is: " + config.getPersistantData().getScope());
  if (config.getPersistantData().getScope() == TestSearchScope.WHOLE_PROJECT) {
    LOG.info("Configuring for whole project");
    JavaParametersUtil.configureProject(config.getProject(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,config.ALTERNATIVE_JRE_PATH_ENABLED ? config.ALTERNATIVE_JRE_PATH : null);
  }
 else {
    LOG.info("Configuring for module:" + config.getConfigurationModule().getModuleName());
    JavaParametersUtil.configureModule(config.getConfigurationModule(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,config.ALTERNATIVE_JRE_PATH_ENABLED ? config.ALTERNATIVE_JRE_PATH : null);
  }
  javaParameters.getClassPath().add(is15 ? PathUtil.getJarPathForClass(AfterClass.class) : new File(PathManager.getPreinstalledPluginsPath(),"testng/lib-jdk14/testng-jdk14.jar").getPath());
  try {
    port=NetUtils.findAvailableSocketPort();
  }
 catch (  IOException e) {
    throw new ExecutionException("Unable to bind to port " + port,e);
  }
  final TestData data=config.getPersistantData();
  javaParameters.getProgramParametersList().add(supportSerializationProtocol(config) ? RemoteArgs.PORT : CommandLineArgs.PORT,String.valueOf(port));
  if (data.getOutputDirectory() != null && !"".equals(data.getOutputDirectory())) {
    javaParameters.getProgramParametersList().add(CommandLineArgs.OUTPUT_DIRECTORY,data.getOutputDirectory());
  }
  javaParameters.getProgramParametersList().add(CommandLineArgs.USE_DEFAULT_LISTENERS,String.valueOf(data.USE_DEFAULT_REPORTERS));
  @NonNls final StringBuilder buf=new StringBuilder();
  if (data.TEST_LISTENERS != null && !data.TEST_LISTENERS.isEmpty()) {
    buf.append(StringUtil.join(data.TEST_LISTENERS,";"));
  }
  for (  Object o : Extensions.getExtensions(IDEATestNGListener.EP_NAME)) {
    boolean enabled=true;
    for (    RunConfigurationExtension extension : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
      if (extension.isListenerDisabled(config,o,getRunnerSettings())) {
        enabled=false;
        break;
      }
    }
    if (enabled) {
      if (buf.length() > 0)       buf.append(";");
      buf.append(o.getClass().getName());
      javaParameters.getClassPath().add(PathUtil.getJarPathForClass(o.getClass()));
    }
  }
  if (buf.length() > 0)   javaParameters.getProgramParametersList().add(CommandLineArgs.LISTENER,buf.toString());
  try {
    myServerSocket=new ServerSocket(0,0,InetAddress.getByName("127.0.0.1"));
    javaParameters.getProgramParametersList().add("-socket" + myServerSocket.getLocalPort());
    myTempFile=FileUtil.createTempFile("idea_testng",".tmp");
    myTempFile.deleteOnExit();
    javaParameters.getProgramParametersList().add("-temp",myTempFile.getAbsolutePath());
  }
 catch (  IOException e) {
    LOG.error(e);
  }
  if (runnerSettings.getData() instanceof DebuggingRunnerData) {
    ParametersList params=javaParameters.getVMParametersList();
    String hostname="localhost";
    try {
      hostname=InetAddress.getLocalHost().getHostName();
    }
 catch (    UnknownHostException e) {
    }
    params.add("-Xdebug");
    params.add("-Xrunjdwp:transport=dt_socket,address=" + hostname + ':'+ debugPort+ ",suspend=y,server=n");
  }
  return javaParameters;
}
