{
  final TestNGConsoleView console=new TestNGConsoleView(config,runnerSettings,myConfigurationPerRunnerSettings);
  console.initUI();
  ProcessHandler processHandler=startProcess();
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      client.stopTest();
      if (myCurrentCoverageSuite != null) {
        CoverageDataManager coverageDataManager=CoverageDataManager.getInstance(config.getProject());
        coverageDataManager.coverageGathered(myCurrentCoverageSuite);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          final boolean hasFailed=!Filter.DEFECTIVE_LEAF.and(JavaAwareFilter.METHOD(config.getProject())).select(console.getModel().getRoot().getAllTests()).isEmpty();
          ToolWindowManager.getInstance(config.getProject()).notifyByBalloon(console.getProperties().isDebug() ? ToolWindowId.DEBUG : ToolWindowId.RUN,hasFailed ? MessageType.ERROR : MessageType.INFO,hasFailed ? "Tests failed" : "Tests passed",null,null);
        }
      }
);
    }
    @Override public void startNotified(    final ProcessEvent event){
      TestNGRemoteListener listener=new TestNGRemoteListener(console);
      client.startListening(listener,listener,port);
    }
    @Override public void processWillTerminate(    ProcessEvent event,    boolean willBeDestroyed){
      console.getResultsView().finish();
    }
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      console.print(event.getText(),ConsoleViewContentType.getConsoleViewType(outputType));
    }
  }
);
  console.attachToProcess(processHandler);
  RerunFailedTestsAction rerunFailedTestsAction=new RerunFailedTestsAction(console.getComponent());
  rerunFailedTestsAction.init(console.getProperties(),runnerSettings,myConfigurationPerRunnerSettings);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    public TestFrameworkRunningModel get(){
      return console.getModel();
    }
  }
);
  return new DefaultExecutionResult(console,processHandler,rerunFailedTestsAction);
}
