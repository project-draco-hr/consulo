{
  OSProcessHandler processHandler=startProcess();
  final TreeRootNode unboundOutputRoot=new TreeRootNode();
  final TestNGConsoleView console=new TestNGConsoleView(config,runnerSettings,myConfigurationPerRunnerSettings,unboundOutputRoot,executor);
  console.initUI();
  unboundOutputRoot.setPrinter(console.getPrinter());
  Disposer.register(console,unboundOutputRoot);
  JavaRunConfigurationExtensionManager.getInstance().attachExtensionsToProcess(config,processHandler,runnerSettings);
  final SearchingForTestsTask task=createSearchingForTestsTask(myServerSocket,config,myTempFile);
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      unboundOutputRoot.flush();
      if (mySearchForTestIndicator != null && !mySearchForTestIndicator.isCanceled()) {
        task.finish();
      }
      final Runnable notificationRunnable=new Runnable(){
        public void run(){
          final Project project=config.getProject();
          if (project.isDisposed())           return;
          final TestConsoleProperties consoleProperties=console.getProperties();
          if (consoleProperties == null)           return;
          final String testRunDebugId=consoleProperties.isDebug() ? ToolWindowId.DEBUG : ToolWindowId.RUN;
          final TestNGResults resultsView=console.getResultsView();
          final ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
          if (!Comparing.strEqual(toolWindowManager.getActiveToolWindowId(),testRunDebugId)) {
            final MessageType type=resultsView == null || resultsView.getStatus() == MessageHelper.SKIPPED_TEST ? MessageType.WARNING : (resultsView.getStatus() == MessageHelper.FAILED_TEST ? MessageType.ERROR : MessageType.INFO);
            final String message=resultsView == null ? "Tests were not started" : resultsView.getStatusLine();
            toolWindowManager.notifyByBalloon(testRunDebugId,type,message,null,null);
            TestsUIUtil.NOTIFICATION_GROUP.createNotification(message,type).notify(project);
          }
        }
      }
;
      SwingUtilities.invokeLater(notificationRunnable);
    }
    @Override public void startNotified(    final ProcessEvent event){
      TestNGRemoteListener listener=new TestNGRemoteListener(console,unboundOutputRoot);
      if (config.isSaveOutputToFile()) {
        unboundOutputRoot.setOutputFilePath(config.getOutputFilePath());
      }
      client.prepareListening(listener,port);
      mySearchForTestIndicator=new BackgroundableProcessIndicator(task);
      ProgressManagerImpl.runProcessWithProgressAsynchronously(task,mySearchForTestIndicator);
    }
    @Override public void processWillTerminate(    ProcessEvent event,    boolean willBeDestroyed){
      final TestNGResults resultsView=console.getResultsView();
      if (resultsView != null) {
        resultsView.finish();
      }
    }
    private int myInsertIndex=0;
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      final TestProxy currentTest=console.getCurrentTest();
      final String text=event.getText();
      final ConsoleViewContentType consoleViewType=ConsoleViewContentType.getConsoleViewType(outputType);
      final Printable printable=new Printable(){
        public void printOn(        final Printer printer){
          printer.print(text,consoleViewType);
        }
      }
;
      if (currentTest != null) {
        currentTest.addLast(printable);
      }
 else {
        unboundOutputRoot.insert(printable,myInsertIndex);
      }
      myInsertIndex++;
    }
  }
);
  console.attachToProcess(processHandler);
  RerunFailedTestsAction rerunFailedTestsAction=new RerunFailedTestsAction(console.getComponent());
  rerunFailedTestsAction.init(console.getProperties(),runnerSettings,myConfigurationPerRunnerSettings);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    public TestFrameworkRunningModel get(){
      return console.getResultsView();
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(console,processHandler);
  result.setRestartActions(rerunFailedTestsAction);
  return result;
}
