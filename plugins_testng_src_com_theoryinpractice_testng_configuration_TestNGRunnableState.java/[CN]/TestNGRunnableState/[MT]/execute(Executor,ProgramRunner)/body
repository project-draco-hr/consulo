{
  OSProcessHandler processHandler=null;
  try {
    processHandler=startProcess();
  }
 catch (  ExecutionException e) {
    if (mySearchForTestIndicator != null && !mySearchForTestIndicator.isCanceled()) {
      mySearchForTestIndicator.cancel();
    }
    throw e;
  }
  final TestNGConsoleView console=new TestNGConsoleView(config,runnerSettings,myConfigurationPerRunnerSettings);
  console.initUI();
  for (  RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
    ext.handleStartProcess(config,processHandler);
  }
  processHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      client.stopTest();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          final Project project=config.getProject();
          if (project.isDisposed())           return;
          final TestConsoleProperties consoleProperties=console.getProperties();
          if (consoleProperties == null)           return;
          final String testRunDebugId=consoleProperties.isDebug() ? ToolWindowId.DEBUG : ToolWindowId.RUN;
          final TestNGResults resultsView=console.getResultsView();
          final ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
          if (!Comparing.strEqual(toolWindowManager.getActiveToolWindowId(),testRunDebugId)) {
            toolWindowManager.notifyByBalloon(testRunDebugId,resultsView == null || resultsView.getStatus() == MessageHelper.SKIPPED_TEST ? MessageType.WARNING : (resultsView.getStatus() == MessageHelper.FAILED_TEST ? MessageType.ERROR : MessageType.INFO),resultsView == null ? "Tests were not started" : resultsView.getStatusLine(),null,null);
          }
        }
      }
);
    }
    @Override public void startNotified(    final ProcessEvent event){
      TestNGRemoteListener listener=new TestNGRemoteListener(console);
      client.startListening(listener,listener,port);
    }
    @Override public void processWillTerminate(    ProcessEvent event,    boolean willBeDestroyed){
      final TestNGResults resultsView=console.getResultsView();
      if (resultsView != null) {
        resultsView.finish();
      }
    }
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      console.print(event.getText(),ConsoleViewContentType.getConsoleViewType(outputType));
    }
  }
);
  console.attachToProcess(processHandler);
  RerunFailedTestsAction rerunFailedTestsAction=new RerunFailedTestsAction(console.getComponent());
  rerunFailedTestsAction.init(console.getProperties(),runnerSettings,myConfigurationPerRunnerSettings);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    public TestFrameworkRunningModel get(){
      return console.getResultsView();
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(console,processHandler);
  result.setRestartActions(rerunFailedTestsAction);
  return result;
}
