{
  getJavaParameters().getVMParametersList().add("-Didea.testng.sm_runner");
  getJavaParameters().getClassPath().add(PathUtil.getJarPathForClass(ServiceMessageTypes.class));
  OSProcessHandler handler=startProcess();
  TestConsoleProperties testConsoleProperties=new SMTRunnerConsoleProperties(new RuntimeConfigurationProducer.DelegatingRuntimeConfiguration<TestNGConfiguration>((TestNGConfiguration)getEnvironment().getRunProfile()),TESTNG_TEST_FRAMEWORK_NAME,executor);
  testConsoleProperties.setIfUndefined(TestConsoleProperties.HIDE_PASSED_TESTS,false);
  final BaseTestsOutputConsoleView smtConsoleView=SMTestRunnerConnectionUtil.createConsoleWithCustomLocator(TESTNG_TEST_FRAMEWORK_NAME,testConsoleProperties,getEnvironment(),null);
  Disposer.register(getEnvironment().getProject(),smtConsoleView);
  smtConsoleView.attachToProcess(handler);
  final RerunFailedTestsAction rerunFailedTestsAction=new RerunFailedTestsAction(smtConsoleView);
  rerunFailedTestsAction.init(testConsoleProperties,getEnvironment());
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    @Override public TestFrameworkRunningModel get(){
      return ((SMTRunnerConsoleView)smtConsoleView).getResultsViewer();
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(smtConsoleView,handler);
  result.setRestartActions(rerunFailedTestsAction);
  JavaRunConfigurationExtensionManager.getInstance().attachExtensionsToProcess(config,handler,runnerSettings);
  final SearchingForTestsTask task=createSearchingForTestsTask(myServerSocket,config,myTempFile);
  handler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      if (mySearchForTestIndicator != null && !mySearchForTestIndicator.isCanceled()) {
        task.finish();
      }
    }
    @Override public void startNotified(    final ProcessEvent event){
      mySearchForTestIndicator=new BackgroundableProcessIndicator(task);
      ProgressManager.getInstance().runProcessWithProgressAsynchronously(task,mySearchForTestIndicator);
    }
  }
);
  return result;
}
