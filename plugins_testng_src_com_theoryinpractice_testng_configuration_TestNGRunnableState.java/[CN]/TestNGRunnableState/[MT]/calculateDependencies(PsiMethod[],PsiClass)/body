{
  Map<PsiClass,Collection<PsiMethod>> results=new HashMap<PsiClass,Collection<PsiMethod>>();
  if (classes != null && classes.length > 0) {
    Set<String> dependencies=new HashSet<String>();
    final boolean usedJavadocTags=TestNGUtil.collectAnnotationValues(dependencies,"dependsOnGroups",methods,classes);
    if (!dependencies.isEmpty()) {
      final Project project=classes[0].getProject();
      Collection<PsiClass> allClasses;
      if (usedJavadocTags) {
        allClasses=AllClassesSearch.search(getSearchScope(),project).findAll();
        Map<PsiClass,Collection<PsiMethod>> filteredClasses=TestNGUtil.filterAnnotations("groups",dependencies,allClasses);
        results.putAll(filteredClasses);
      }
 else {
        final PsiClass testAnnotation=JavaPsiFacade.getInstance(project).findClass(TestNGUtil.TEST_ANNOTATION_FQN,GlobalSearchScope.allScope(project));
        LOG.assertTrue(testAnnotation != null);
        for (        PsiMember psiMember : AnnotatedMembersSearch.search(testAnnotation,getSearchScope())) {
          if (TestNGUtil.isAnnotatedWithParameter(AnnotationUtil.findAnnotation(psiMember,TestNGUtil.TEST_ANNOTATION_FQN),"groups",dependencies)) {
            final PsiClass psiClass=psiMember instanceof PsiClass ? ((PsiClass)psiMember) : psiMember.getContainingClass();
            Collection<PsiMethod> psiMethods=results.get(psiClass);
            if (psiMethods == null) {
              psiMethods=new LinkedHashSet<PsiMethod>();
              results.put(psiClass,psiMethods);
            }
            if (psiMember instanceof PsiMethod) {
              psiMethods.add((PsiMethod)psiMember);
            }
          }
        }
      }
    }
    if (methods == null) {
      for (      PsiClass c : classes) {
        results.put(c,new LinkedHashSet<PsiMethod>());
      }
    }
  }
  return results;
}
