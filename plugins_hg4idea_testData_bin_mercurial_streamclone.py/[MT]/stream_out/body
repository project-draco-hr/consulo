def stream_out(repo):
    'stream out all metadata files in repository.\n    writes to file-like object, must support write() and optional flush().'
    if (not allowed(repo.ui)):
        raise StreamException(1)
    entries = []
    total_bytes = 0
    try:
        lock = repo.lock()
        try:
            repo.ui.debug('scanning\n')
            for (name, ename, size) in repo.store.walk():
                entries.append((name, size))
                total_bytes += size
        finally:
            lock.release()
    except error.LockError:
        raise StreamException(2)
    yield '0\n'
    repo.ui.debug(('%d files, %d bytes to transfer\n' % (len(entries), total_bytes)))
    yield ('%d %d\n' % (len(entries), total_bytes))
    for (name, size) in entries:
        repo.ui.debug(('sending %s (%d bytes)\n' % (name, size)))
        yield ('%s\x00%d\n' % (store.encodedir(name), size))
        for chunk in util.filechunkiter(repo.sopener(name), limit=size):
            yield chunk
