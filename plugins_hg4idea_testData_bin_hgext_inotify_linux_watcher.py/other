'High-level interfaces to the Linux inotify subsystem.\n\nThe inotify subsystem provides an efficient mechanism for file status\nmonitoring and change notification.\n\nThe watcher class hides the low-level details of the inotify\ninterface, and provides a Pythonic wrapper around it.  It generates\nevents that provide somewhat more information than raw inotify makes\navailable.\n\nThe autowatcher class is more useful, as it automatically watches\nnewly-created directories on your behalf.'
__author__ = "Bryan O'Sullivan <bos@serpentine.com>"
import _inotify as inotify
import array
import errno
import fcntl
import os
import termios
_event_props = {'access': 'File was accessed', 'modify': 'File was modified', 'attrib': 'Attribute of a directory entry was changed', 'close_write': 'File was closed after being written to', 'close_nowrite': 'File was closed without being written to', 'open': 'File was opened', 'moved_from': 'Directory entry was renamed from this name', 'moved_to': 'Directory entry was renamed to this name', 'create': 'Directory entry was created', 'delete': 'Directory entry was deleted', 'delete_self': 'The watched directory entry was deleted', 'move_self': 'The watched directory entry was renamed', 'unmount': 'Directory was unmounted, and can no longer be watched', 'q_overflow': 'Kernel dropped events due to queue overflow', 'ignored': 'Directory entry is no longer being watched', 'isdir': 'Event occurred on a directory', }
for (k, v) in _event_props.iteritems():
    mask = getattr(inotify, ('IN_' + k.upper()))

    def getter(self):
        return (self.mask & mask)
    getter.__name__ = k
    getter.__doc__ = v
    setattr(event, k, property(getter, doc=v))
del _event_props
