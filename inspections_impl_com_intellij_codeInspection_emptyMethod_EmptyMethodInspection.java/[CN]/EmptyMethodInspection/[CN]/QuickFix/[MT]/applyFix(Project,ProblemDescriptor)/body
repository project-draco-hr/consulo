{
  RefElement refElement=(RefElement)getElement(descriptor);
  if (refElement.isValid() && refElement instanceof RefMethod) {
    List<RefElement> refElements=new ArrayList<RefElement>(1);
    RefMethod refMethod=(RefMethod)refElement;
    final List<PsiElement> psiElements=new ArrayList<PsiElement>();
    if (refMethod.isOnlyCallsSuper()) {
      deleteMethod(refMethod,psiElements,refElements);
    }
 else     if (refMethod.hasBody() && hasEmptySuperImplementation(refMethod)) {
      deleteMethod(refMethod,psiElements,refElements);
    }
 else     if (areAllImplementationsEmpty(refMethod)) {
      if (refMethod.hasBody()) {
        if (refMethod.getDerivedMethods().size() == 0) {
          if (refMethod.getSuperMethods().size() == 0) {
            deleteMethod(refMethod,psiElements,refElements);
          }
        }
 else {
          deleteHierarchy(refMethod,psiElements,refElements);
        }
      }
 else {
        deleteHierarchy(refMethod,psiElements,refElements);
      }
    }
    ArrayList<RefElement> deletedRefs=new ArrayList<RefElement>(1);
    for (    RefElement element : refElements) {
      RefUtil.getInstance().removeRefElement(element,deletedRefs);
    }
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        SafeDeleteHandler.invoke(getContext().getProject(),psiElements.toArray(new PsiElement[psiElements.size()]),false);
      }
    }
);
  }
}
