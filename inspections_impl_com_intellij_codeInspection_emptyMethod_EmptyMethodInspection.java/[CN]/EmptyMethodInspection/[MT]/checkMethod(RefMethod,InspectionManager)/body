{
  if (!refMethod.isBodyEmpty())   return null;
  if (refMethod.isConstructor())   return null;
  if (refMethod.isSyntheticJSP())   return null;
  for (  RefMethod refSuper : refMethod.getSuperMethods()) {
    if (checkMethod(refSuper,manager) != null)     return null;
  }
  String message=null;
  if (refMethod.isOnlyCallsSuper()) {
    RefMethod refSuper=findSuperWithBody(refMethod);
    if (refSuper == null || RefUtil.getInstance().compareAccess(refMethod.getAccessModifier(),refSuper.getAccessModifier()) <= 0) {
      message=InspectionsBundle.message("inspection.empty.method.problem.descriptor");
    }
  }
 else   if (refMethod.hasBody() && hasEmptySuperImplementation(refMethod)) {
    message=InspectionsBundle.message("inspection.empty.method.problem.descriptor1");
  }
 else   if (areAllImplementationsEmpty(refMethod)) {
    if (refMethod.hasBody()) {
      if (refMethod.getDerivedMethods().size() == 0) {
        if (refMethod.getSuperMethods().size() == 0) {
          message=InspectionsBundle.message("inspection.empty.method.problem.descriptor2");
        }
      }
 else {
        message=InspectionsBundle.message("inspection.empty.method.problem.descriptor3");
      }
    }
 else {
      if (refMethod.getDerivedMethods().size() > 0) {
        message=InspectionsBundle.message("inspection.empty.method.problem.descriptor4");
      }
    }
  }
  if (message != null) {
    return new ProblemDescriptor[]{manager.createProblemDescriptor(refMethod.getElement(),message,getFix(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
  }
  return null;
}
