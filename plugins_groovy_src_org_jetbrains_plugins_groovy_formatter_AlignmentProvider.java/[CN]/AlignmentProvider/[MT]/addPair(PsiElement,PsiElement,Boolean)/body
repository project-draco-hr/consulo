{
  LOG.assertTrue(e1 != e2);
  final Set<PsiElement> set1=myTree.get(e1);
  final Set<PsiElement> set2=myTree.get(e2);
  if (set1 != null && set2 != null) {
    LOG.assertTrue(!myAlignments.containsKey(set1) || !myAlignments.containsKey(set2));
    LOG.assertTrue(myAllowBackwardShift.get(set1).booleanValue() == myAllowBackwardShift.get(set2).booleanValue());
    if (allowBackwardShift != null) {
      LOG.assertTrue(myAllowBackwardShift.get(set1).booleanValue() == allowBackwardShift.booleanValue());
    }
    if (myAlignments.containsKey(set2)) {
      for (Iterator<PsiElement> iterator=set1.iterator(); iterator.hasNext(); ) {
        PsiElement element=iterator.next();
        iterator.remove();
        addInternal(set2,element);
      }
    }
 else {
      set1.addAll(set2);
      for (Iterator<PsiElement> iterator=set2.iterator(); iterator.hasNext(); ) {
        PsiElement element=iterator.next();
        iterator.remove();
        addInternal(set1,element);
      }
    }
  }
 else   if (set1 != null) {
    if (allowBackwardShift != null) {
      LOG.assertTrue(myAllowBackwardShift.get(set1).booleanValue() == allowBackwardShift.booleanValue());
    }
    addInternal(set1,e2);
  }
 else   if (set2 != null) {
    if (allowBackwardShift != null) {
      LOG.assertTrue(myAllowBackwardShift.get(set2).booleanValue() == allowBackwardShift.booleanValue());
    }
    addInternal(set2,e1);
  }
 else {
    final HashSet<PsiElement> set=createHashSet();
    addInternal(set,e1);
    addInternal(set,e2);
    myAllowBackwardShift.put(set,allowBackwardShift);
  }
}
