{
  final String key;
  final ClassLoader loader=aClass.getClassLoader();
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    builder.append(aClass.getName());
    if (loader != null) {
      builder.append("_");
      builder.append(loader.hashCode());
    }
    key=builder.toString();
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
  Object result=null;
synchronized (ourCache) {
    final SoftReference<Object> ref=ourCache.tryKey(key);
    result=(ref == null) ? null : ref.get();
    if (result == null && ref != null) {
      ourCache.remove(key);
    }
  }
  if (result == null) {
    final Class<?> helperClass=loader != null ? loader.loadClass(IntrospectionHelper.class.getName()) : IntrospectionHelper.class;
    final Method getHelperMethod=helperClass.getMethod("getHelper",Class.class);
    result=getHelperMethod.invoke(null,aClass);
  }
  if (result != null) {
synchronized (ourCache) {
      ourCache.cacheObject(key,new SoftReference<Object>(result));
    }
  }
  return result;
}
