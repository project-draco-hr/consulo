{
  final PsiMethod getter=PropertyUtils.findGetterForField(field);
  final PsiMethod setter=PropertyUtils.findSetterForField(field);
  if (!field.hasModifierProperty(PsiModifier.PUBLIC) && (getter == null || setter == null)) {
    return;
  }
  final String fieldName=field.getName();
  final PsiConstantEvaluationHelper evalHelper=JavaPsiFacade.getInstance(field.getProject()).getConstantEvaluationHelper();
  final PsiAnnotation attrAnno=findAnnotation(Attribute.class,field,getter,setter);
  if (attrAnno != null) {
    final String attrName=getStringAttribute(attrAnno,"value",evalHelper);
    if (attrName != null) {
      boolean isClass=withElement != null || isClassField(fieldName);
      final DomExtension extension=registrar.registerGenericAttributeValueChildExtension(new XmlName(attrName),isClass ? PsiClass.class : String.class).setDeclaringElement(field);
      markAsClass(extension,fieldName,withElement);
    }
    return;
  }
  final PsiAnnotation tagAnno=findAnnotation(Tag.class,field,getter,setter);
  final PsiAnnotation propAnno=findAnnotation(Property.class,field,getter,setter);
  final PsiAnnotation absColAnno=findAnnotation(AbstractCollection.class,field,getter,setter);
  final String tagName=tagAnno != null ? getStringAttribute(tagAnno,"value",evalHelper) : propAnno != null && getBooleanAttribute(propAnno,"surroundWithTag",evalHelper) ? Constants.OPTION : null;
  if (tagName != null) {
    if (absColAnno == null) {
      final DomExtension extension=registrar.registerFixedNumberChildExtension(new XmlName(tagName),SimpleTagValue.class).setDeclaringElement(field);
      markAsClass(extension,fieldName,withElement);
    }
 else {
      registrar.registerFixedNumberChildExtension(new XmlName(tagName),DomElement.class).addExtender(new DomExtender(){
        @Override public void registerExtensions(        @NotNull DomElement domElement,        @NotNull DomExtensionsRegistrar registrar){
          registerCollectionBinding(field.getType(),registrar,absColAnno,evalHelper);
        }
      }
);
    }
  }
 else   if (absColAnno != null) {
    registerCollectionBinding(field.getType(),registrar,absColAnno,evalHelper);
  }
}
