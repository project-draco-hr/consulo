{
  final Project project=context.getProject();
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  final SearchScope searchScope=scope.toSearchScope();
  if (!(searchScope instanceof GlobalSearchScope)) {
    return;
  }
  final GlobalSearchScope globalSearchScope=(GlobalSearchScope)searchScope;
  final PsiManager psiManager=PsiManager.getInstance(project);
  index.iterateContent(new ContentIterator(){
    @Override public boolean processFile(    final VirtualFile fileOrDir){
      if (!fileOrDir.isDirectory()) {
        return true;
      }
      if (!globalSearchScope.contains(fileOrDir)) {
        return true;
      }
      if (onlyReportDirectoriesUnderSourceRoots && !index.isInSourceContent(fileOrDir)) {
        return true;
      }
      final VirtualFile[] children=fileOrDir.getChildren();
      if (children.length != 0) {
        return true;
      }
      final Application application=ApplicationManager.getApplication();
      final PsiDirectory directory=application.runReadAction(new Computable<PsiDirectory>(){
        @Override public PsiDirectory compute(){
          return psiManager.findDirectory(fileOrDir);
        }
      }
);
      final RefElement refDirectory=context.getRefManager().getReference(directory);
      if (context.shouldCheck(refDirectory,EmptyDirectoryInspection.this)) {
        return true;
      }
      final String relativePath=getPathRelativeToModule(fileOrDir,project);
      if (relativePath == null) {
        return true;
      }
      processor.addProblemElement(refDirectory,manager.createProblemDescriptor(InspectionGadgetsBundle.message("empty.directories.problem.descriptor",relativePath),new EmptyPackageFix(fileOrDir.getUrl(),fileOrDir.getName())));
      return true;
    }
  }
);
}
