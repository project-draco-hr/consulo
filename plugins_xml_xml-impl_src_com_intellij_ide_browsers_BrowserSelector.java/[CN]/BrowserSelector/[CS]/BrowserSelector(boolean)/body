{
  myAllowDefaultBrowser=allowDefaultBrowser;
  myBrowserComboWithBrowse=new ComboboxWithBrowseButton(new ComboBox());
  myBrowserComboWithBrowse.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ShowSettingsUtil util=ShowSettingsUtil.getInstance();
      util.editConfigurable(myBrowserComboWithBrowse,new BrowserSettings());
      final BrowsersConfiguration.BrowserFamily selectedItem=getSelectedBrowser();
      initBrowsersComboModel();
      if (selectedItem != null) {
        setSelectedBrowser(selectedItem);
      }
    }
  }
);
  final JComboBox comboBox=myBrowserComboWithBrowse.getComboBox();
  comboBox.setRenderer(new ListCellRendererWrapper<BrowsersConfiguration.BrowserFamily>(){
    @Override public void customize(    JList list,    BrowsersConfiguration.BrowserFamily value,    int index,    boolean selected,    boolean hasFocus){
      final Icon baseIcon=value != null ? value.getIcon() : PlatformIcons.WEB_ICON;
      final Icon icon=myBrowserComboWithBrowse.isEnabled() ? baseIcon : IconLoader.getDisabledIcon(baseIcon);
      setIcon(icon);
      setText(value != null ? value.getName() : "Default");
    }
  }
);
  initBrowsersComboModel();
}
