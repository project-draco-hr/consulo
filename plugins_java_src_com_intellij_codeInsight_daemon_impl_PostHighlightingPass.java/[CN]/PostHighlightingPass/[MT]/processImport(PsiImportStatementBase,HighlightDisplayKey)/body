{
  if (PsiUtilCore.hasErrorElementChild(importStatement))   return null;
  boolean isRedundant=myRefCountHolder.isRedundant(importStatement);
  if (!isRedundant && !(importStatement instanceof PsiImportStaticStatement)) {
    String packageName=((PsiClassOwner)importStatement.getContainingFile()).getPackageName();
    PsiJavaCodeReferenceElement reference=importStatement.getImportReference();
    PsiElement resolved=reference == null ? null : reference.resolve();
    if (resolved instanceof PsiJavaPackage) {
      isRedundant=packageName.equals(((PsiJavaPackage)resolved).getQualifiedName());
    }
 else     if (resolved instanceof PsiClass && !importStatement.isOnDemand()) {
      String qName=((PsiClass)resolved).getQualifiedName();
      if (qName != null) {
        String name=((PsiClass)resolved).getName();
        isRedundant=qName.equals(packageName + '.' + name);
      }
    }
  }
  if (isRedundant) {
    return registerRedundantImport(importStatement,unusedImportKey);
  }
  int entryIndex=myStyleManager.findEntryIndex(importStatement);
  if (entryIndex < myCurrentEntryIndex) {
    myHasMissortedImports=true;
  }
  myCurrentEntryIndex=entryIndex;
  return null;
}
