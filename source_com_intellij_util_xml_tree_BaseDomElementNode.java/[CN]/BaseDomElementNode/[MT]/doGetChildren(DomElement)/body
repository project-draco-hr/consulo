{
  if (!element.isValid())   return NO_CHILDREN;
  List<SimpleNode> children=new ArrayList<SimpleNode>();
  List<DomFixedChildDescription> descriptions=element.getGenericInfo().getFixedChildrenDescriptions();
  for (  DomFixedChildDescription description : descriptions) {
    final List<? extends DomElement> values=description.getStableValues(element);
    if (shouldBeShown(description.getType())) {
      if (DomUtil.isGenericValueType(description.getType())) {
        for (        DomElement value : values) {
          children.add(new GenericValueNode((GenericDomValue)value,this));
        }
      }
 else {
        for (        DomElement domElement : values) {
          children.add(new BaseDomElementNode(domElement,this));
        }
      }
    }
  }
  final List<DomCollectionChildDescription> collectionChildrenDescriptions=element.getGenericInfo().getCollectionChildrenDescriptions();
  for (  DomCollectionChildDescription description : collectionChildrenDescriptions) {
    if (shouldBeShown(description.getType())) {
      DomElementsGroupNode groupNode=new DomElementsGroupNode(element,description);
      if (isMarkedType(description.getType(),CONSOLIDATED_NODES_KEY)) {
        Collections.addAll(children,groupNode.getChildren());
      }
 else {
        children.add(groupNode);
      }
    }
  }
  AbstractDomElementNode[] childrenNodes=children.toArray(new AbstractDomElementNode[children.size()]);
  final Comparator<AbstractDomElementNode> comparator=myDomElement.getRoot().getUserData(COMPARATOR_KEY);
  if (comparator != null) {
    Arrays.sort(childrenNodes,comparator);
  }
  return childrenNodes;
}
