{
  PsiExpression operand=cast.getOperand();
  PsiTypeElement castType=cast.getCastType();
  if (operand == null || castType == null)   return null;
  PsiElement parent=cast.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  if (parent instanceof PsiReferenceExpression) {
    if (IGNORE_ANNOTATED_METHODS) {
      final PsiElement gParent=parent.getParent();
      if (gParent instanceof PsiMethodCallExpression) {
        final PsiMethod psiMethod=((PsiMethodCallExpression)gParent).resolveMethod();
        if (psiMethod != null && NullableNotNullManager.isNotNull(psiMethod)) {
          final PsiClass superClass=PsiUtil.resolveClassInType(operand.getType());
          final PsiClass containingClass=psiMethod.getContainingClass();
          if (containingClass != null && superClass != null && containingClass.isInheritor(superClass,true)) {
            for (            PsiMethod method : psiMethod.findSuperMethods(superClass)) {
              if (NullableNotNullManager.isNullable(method)) {
                return null;
              }
            }
          }
        }
      }
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiElement gParent=parent.getParent();
    if (gParent instanceof PsiMethodCallExpression && IGNORE_SUSPICIOUS_METHOD_CALLS) {
      final String message=SuspiciousMethodCallUtil.getSuspiciousMethodCallMessage((PsiMethodCallExpression)gParent,operand.getType(),true,new ArrayList<PsiMethod>(),new IntArrayList());
      if (message != null) {
        return null;
      }
    }
  }
  String message=InspectionsBundle.message("inspection.redundant.cast.problem.descriptor","<code>" + operand.getText() + "</code>","<code>#ref</code> #loc");
  return manager.createProblemDescriptor(castType,message,myQuickFixAction,ProblemHighlightType.LIKE_UNUSED_SYMBOL,onTheFly);
}
