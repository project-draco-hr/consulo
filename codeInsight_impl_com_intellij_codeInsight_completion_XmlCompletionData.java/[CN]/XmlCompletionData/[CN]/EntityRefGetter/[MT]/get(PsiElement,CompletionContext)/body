{
  final XmlTag parentOfType=PsiTreeUtil.getParentOfType(context,XmlTag.class);
  if (parentOfType != null) {
    final XmlElementDescriptor descriptor=parentOfType.getDescriptor();
    final List<String> results=new ArrayList<String>();
    final XmlNSDescriptor nsDescriptor=descriptor != null ? descriptor.getNSDescriptor() : null;
    final XmlFile containingFile=(XmlFile)parentOfType.getContainingFile();
    XmlFile descriptorFile=nsDescriptor != null ? nsDescriptor.getDescriptorFile() : containingFile.getDocument().getProlog().getDoctype() != null ? containingFile : null;
    if (nsDescriptor != null && descriptorFile.getName().equals(containingFile.getName() + ".dtd")) {
      descriptorFile=containingFile;
    }
    if (descriptorFile != null) {
      final PsiElementProcessor processor=new PsiElementProcessor(){
        public boolean execute(        final PsiElement element){
          if (element instanceof XmlEntityDecl) {
            final XmlEntityDecl xmlEntityDecl=(XmlEntityDecl)element;
            if (xmlEntityDecl.isInternalReference())             results.add(xmlEntityDecl.getName());
          }
          return true;
        }
      }
;
      XmlUtil.processXmlElements(descriptorFile,processor,true);
      return results.toArray(new Object[results.size()]);
    }
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
