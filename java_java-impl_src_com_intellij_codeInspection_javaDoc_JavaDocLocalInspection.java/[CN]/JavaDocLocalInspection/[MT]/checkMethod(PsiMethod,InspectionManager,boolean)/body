{
  if (psiMethod instanceof JspHolderMethod)   return null;
  if (IGNORE_DEPRECATED && (psiMethod.isDeprecated() || psiMethod.getContainingClass().isDeprecated())) {
    return null;
  }
  PsiDocComment docComment=psiMethod.getDocComment();
  final PsiMethod[] superMethods=psiMethod.findSuperMethods();
  if (docComment == null) {
    if (isJavaDocRequired(psiMethod)) {
      if (superMethods.length > 0)       return null;
      ExtensionPoint<Condition<PsiMember>> point=Extensions.getRootArea().getExtensionPoint(ExtensionPoints.JAVADOC_LOCAL);
      final Condition<PsiMember>[] addins=point.getExtensions();
      for (      Condition<PsiMember> addin : addins) {
        if (addin.value(psiMethod))         return null;
      }
      if (superMethods.length == 0) {
        final PsiIdentifier nameIdentifier=psiMethod.getNameIdentifier();
        return nameIdentifier != null ? new ProblemDescriptor[]{createDescriptor(nameIdentifier,REQUIRED_JAVADOC_IS_ABSENT,manager,isOnTheFly)} : null;
      }
 else {
        return null;
      }
    }
 else {
      return null;
    }
  }
  final PsiElement[] descriptionElements=docComment.getDescriptionElements();
  for (  PsiElement descriptionElement : descriptionElements) {
    if (descriptionElement instanceof PsiInlineDocTag) {
      if ("inheritDoc".equals(((PsiInlineDocTag)descriptionElement).getName()))       return null;
    }
  }
  final ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>(2);
  checkInlineTags(manager,problems,descriptionElements,JavaPsiFacade.getInstance(docComment.getProject()).getJavadocManager(),isOnTheFly);
  final PsiDocTag tagByName=docComment.findTagByName("inheritDoc");
  if (tagByName != null) {
    final String tagName=tagByName.getName();
    final JavadocTagInfo tagInfo=JavaPsiFacade.getInstance(tagByName.getProject()).getJavadocManager().getTagInfo(tagName);
    if (tagInfo != null && tagInfo.isValidInContext(psiMethod)) {
      return null;
    }
  }
  PsiDocTag[] tags=docComment.getTags();
  boolean isReturnRequired=false;
  boolean isReturnAbsent=true;
  if (superMethods.length == 0 && !psiMethod.isConstructor() && PsiType.VOID != psiMethod.getReturnType() && isTagRequired(psiMethod,"return")) {
    isReturnRequired=true;
    for (    PsiDocTag tag : tags) {
      if ("return".equals(tag.getName())) {
        isReturnAbsent=false;
        break;
      }
    }
  }
  ArrayList<PsiParameter> absentParameters=null;
  if (superMethods.length == 0 && isTagRequired(psiMethod,"param")) {
    PsiParameter[] params=psiMethod.getParameterList().getParameters();
    for (    PsiParameter param : params) {
      if (!isFound(tags,param)) {
        if (absentParameters == null)         absentParameters=new ArrayList<PsiParameter>(2);
        absentParameters.add(param);
      }
    }
  }
  if (isReturnRequired && isReturnAbsent) {
    final PsiIdentifier psiIdentifier=psiMethod.getNameIdentifier();
    if (psiIdentifier != null) {
      problems.add(createMissingTagDescriptor(psiIdentifier,"return",manager,isOnTheFly));
    }
  }
  if (absentParameters != null) {
    for (    PsiParameter psiParameter : absentParameters) {
      final PsiIdentifier nameIdentifier=psiMethod.getNameIdentifier();
      if (nameIdentifier != null) {
        problems.add(createMissingParamTagDescriptor(nameIdentifier,psiParameter,manager,isOnTheFly));
      }
    }
  }
  for (  PsiDocTag tag : tags) {
    if ("param".equals(tag.getName())) {
      final PsiElement[] dataElements=tag.getDataElements();
      final PsiDocTagValue valueElement=tag.getValueElement();
      boolean hasProblemsWithTag=dataElements.length < 2;
      if (!hasProblemsWithTag) {
        final StringBuilder buf=new StringBuilder();
        for (        PsiElement element : dataElements) {
          if (element != valueElement) {
            buf.append(element.getText());
          }
        }
        hasProblemsWithTag=buf.toString().trim().length() == 0;
      }
      if (hasProblemsWithTag) {
        if (valueElement != null) {
          problems.add(createDescriptor(valueElement,InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>@param " + valueElement.getText() + "</code>"),manager,isOnTheFly));
        }
      }
    }
  }
  if (superMethods.length == 0 && isTagRequired(psiMethod,"@throws") && psiMethod.getThrowsList().getReferencedTypes().length > 0) {
    final Map<PsiClassType,PsiClass> declaredExceptions=new HashMap<PsiClassType,PsiClass>();
    final PsiClassType[] classTypes=psiMethod.getThrowsList().getReferencedTypes();
    for (    PsiClassType classType : classTypes) {
      final PsiClass psiClass=classType.resolve();
      if (psiClass != null) {
        declaredExceptions.put(classType,psiClass);
      }
    }
    processThrowsTags(tags,declaredExceptions,manager,problems,isOnTheFly);
    if (!declaredExceptions.isEmpty()) {
      for (      PsiClassType declaredException : declaredExceptions.keySet()) {
        problems.add(createMissingThrowsTagDescriptor(psiMethod,manager,declaredException,isOnTheFly));
      }
    }
  }
  ArrayList<ProblemDescriptor> tagProblems=getTagValuesProblems(psiMethod,tags,manager,isOnTheFly);
  if (tagProblems != null) {
    problems.addAll(tagProblems);
  }
  checkForPeriodInDoc(docComment,problems,manager,isOnTheFly);
  checkForBadCharacters(docComment,problems,manager,isOnTheFly);
  for (  PsiDocTag tag : tags) {
    if ("param".equals(tag.getName())) {
      if (extractTagDescription(tag).length() == 0) {
        PsiDocTagValue value=tag.getValueElement();
        if (value instanceof PsiDocParamRef) {
          PsiDocParamRef paramRef=(PsiDocParamRef)value;
          PsiParameter[] params=psiMethod.getParameterList().getParameters();
          for (          PsiParameter param : params) {
            if (paramRef.getReference().isReferenceTo(param)) {
              problems.add(createDescriptor(value,InspectionsBundle.message("inspection.javadoc.method.problem.descriptor","<code>@param</code>","<code>" + param.getName() + "</code>"),manager,isOnTheFly));
            }
          }
        }
      }
    }
 else     if ("return".equals(tag.getName())) {
      if (extractTagDescription(tag).length() == 0) {
        String message=InspectionsBundle.message("inspection.javadoc.method.problem.missing.tag.description","<code>@return</code>");
        ProblemDescriptor descriptor=manager.createProblemDescriptor(tag.getNameElement(),message,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly,true);
        problems.add(descriptor);
      }
    }
  }
  checkDuplicateTags(tags,problems,manager,isOnTheFly);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
