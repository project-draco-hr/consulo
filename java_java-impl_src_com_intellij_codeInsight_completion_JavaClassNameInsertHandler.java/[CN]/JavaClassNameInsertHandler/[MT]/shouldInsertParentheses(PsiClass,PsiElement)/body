{
  final PsiJavaCodeReferenceElement ref=PsiTreeUtil.getParentOfType(position,PsiJavaCodeReferenceElement.class);
  final PsiElement prevElement=FilterPositionUtil.searchNonSpaceNonCommentBack(ref);
  if (prevElement != null && prevElement.getParent() instanceof PsiNewExpression) {
    final PsiClassType classType=JavaPsiFacade.getElementFactory(position.getProject()).createType(psiClass);
    for (    ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes((PsiExpression)prevElement.getParent(),true)) {
      final PsiType type=info.getType();
      if (info.isArrayTypeInfo()) {
        return false;
      }
      if (type instanceof PsiClassType && ((PsiClassType)type).rawType().isAssignableFrom(classType)) {
        return true;
      }
    }
    return !JavaCompletionUtil.hasAccessibleInnerClass(psiClass,position);
  }
  return false;
}
