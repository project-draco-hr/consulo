{
  final char c=context.getCompletionChar();
  if (c != '.' && c != ' ' && c != '#') {
    context.setAddCompletionChar(false);
  }
  int offset=context.getTailOffset() - 1;
  final PsiFile file=context.getFile();
  if (PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiImportStatementBase.class,false) != null) {
    final PsiJavaCodeReferenceElement ref=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiJavaCodeReferenceElement.class,false);
    final String qname=item.getQualifiedName();
    if (qname != null && (ref == null || !qname.equals(ref.getCanonicalText()))) {
      AllClassesGetter.INSERT_FQN.handleInsert(context,item);
    }
    return;
  }
  PsiElement position=file.findElementAt(offset);
  PsiClass psiClass=item.getObject();
  final Project project=context.getProject();
  final boolean annotation=insertingAnnotation(context,item);
  final Editor editor=context.getEditor();
  if (c == '#') {
    context.setLaterRunnable(new Runnable(){
      public void run(){
        new CodeCompletionHandlerBase(CompletionType.BASIC).invoke(project,editor,file);
      }
    }
);
  }
 else   if (c == '.' && PsiTreeUtil.getParentOfType(position,PsiParameterList.class) == null) {
    AutoPopupController.getInstance(context.getProject()).autoPopupMemberLookup(context.getEditor(),null);
  }
  if (position != null) {
    PsiElement parent=position.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      final PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)parent;
      if (PsiTreeUtil.getParentOfType(position,PsiDocTag.class) != null && ref.isReferenceTo(psiClass)) {
        return;
      }
    }
  }
  if (shouldInsertParentheses(psiClass,position)) {
    if (ConstructorInsertHandler.insertParentheses(context,item,psiClass,false)) {
      AutoPopupController.getInstance(project).autoPopupParameterInfo(editor,null);
    }
  }
 else   if (insertingAnnotationWithParameters(context,item)) {
    JavaCompletionUtil.insertParentheses(context,item,false,true);
    AutoPopupController.getInstance(project).autoPopupParameterInfo(editor,null);
  }
  LOG.assertTrue(context.getTailOffset() >= 0);
  String docText=context.getDocument().getText();
  DefaultInsertHandler.addImportForItem(context,item);
  if (context.getTailOffset() < 0) {
    if (ApplicationManagerEx.getApplicationEx().isInternal()) {
      LOG.error("Tail offset degraded: " + context.getStartOffset() + "; "+ docText);
    }
 else {
      LOG.error("Tail offset degraded after insertion");
    }
  }
  if (annotation) {
    PsiElement elementAt=file.findElementAt(context.getStartOffset());
    final PsiElement parentElement=elementAt != null ? elementAt.getParent() : null;
    if (elementAt instanceof PsiIdentifier && (PsiTreeUtil.getParentOfType(elementAt,PsiAnnotationParameterList.class) != null || parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof PsiJavaFile) && isAtTokenNeeded(context)) {
      int expectedOffsetForAtToken=elementAt.getTextRange().getStartOffset();
      context.getDocument().insertString(expectedOffsetForAtToken,"@");
    }
  }
}
