{
  final BorderType borderType=container.getBorderType();
  final StringDescriptor borderTitle=container.getBorderTitle();
  final String borderFactoryMethodName=borderType.getBorderFactoryMethodName();
  final boolean borderNone=borderType.equals(BorderType.NONE);
  if (!borderNone || borderTitle != null) {
    generator.loadLocal(componentLocal);
    if (!borderNone) {
      if (borderType.equals(BorderType.LINE)) {
        if (container.getBorderColor() == null) {
          Type colorType=Type.getType(Color.class);
          generator.getStatic(colorType,"black",colorType);
        }
 else {
          pushPropValue(generator,Color.class.getName(),container.getBorderColor());
        }
        generator.invokeStatic(ourBorderFactoryType,new Method(borderFactoryMethodName,ourBorderType,new Type[]{Type.getType(Color.class)}));
      }
 else       if (borderType.equals(BorderType.EMPTY) && container.getBorderSize() != null) {
        Insets size=container.getBorderSize();
        generator.push(size.top);
        generator.push(size.left);
        generator.push(size.bottom);
        generator.push(size.right);
        generator.invokeStatic(ourBorderFactoryType,new Method(borderFactoryMethodName,ourBorderType,new Type[]{Type.INT_TYPE,Type.INT_TYPE,Type.INT_TYPE,Type.INT_TYPE}));
      }
 else {
        generator.invokeStatic(ourBorderFactoryType,new Method(borderFactoryMethodName,ourBorderType,new Type[0]));
      }
    }
 else {
      generator.push((String)null);
    }
    pushBorderProperties(container,generator,borderTitle,componentLocal);
    Type borderFactoryType=ourBorderFactoryType;
    StringDescriptor borderFactoryValue=(StringDescriptor)container.getDelegeeClientProperties().get(ourBorderFactoryClientProperty);
    if (borderFactoryValue == null && borderTitle != null && Boolean.valueOf(System.getProperty("idea.is.internal")).booleanValue()) {
      borderFactoryValue=StringDescriptor.create("com.intellij.ui.IdeBorderFactory$PlainSmallWithIndent");
      container.getDelegeeClientProperties().put(ourBorderFactoryClientProperty,borderFactoryValue);
    }
    if (borderFactoryValue != null && borderFactoryValue.getValue().length() != 0) {
      borderFactoryType=typeFromClassName(borderFactoryValue.getValue());
    }
    generator.invokeStatic(borderFactoryType,ourCreateTitledBorderMethod);
    generator.invokeVirtual(Type.getType(JComponent.class),Method.getMethod("void setBorder(javax.swing.border.Border)"));
  }
}
