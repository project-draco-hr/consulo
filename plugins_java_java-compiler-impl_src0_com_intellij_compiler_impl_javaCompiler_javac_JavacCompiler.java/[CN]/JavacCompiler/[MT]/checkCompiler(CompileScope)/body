{
  final Module[] modules=scope.getAffectedModules();
  final Set<Sdk> checkedJdks=new HashSet<Sdk>();
  for (  final Module module : modules) {
    final Sdk jdk=ModuleRootManager.getInstance(module).getSdk();
    if (jdk == null || checkedJdks.contains(jdk)) {
      continue;
    }
    checkedJdks.add(jdk);
    final SdkTypeId sdkType=jdk.getSdkType();
    if (!(sdkType instanceof JavaSdkType)) {
      continue;
    }
    final VirtualFile homeDirectory=jdk.getHomeDirectory();
    if (homeDirectory == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.jdkHomeNotFoundMessage(jdk),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String vmExecutablePath=((JavaSdkType)sdkType).getVMExecutablePath(jdk);
    if (vmExecutablePath == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.vm.executable.missing",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String toolsJarPath=((JavaSdkType)sdkType).getToolsPath(jdk);
    if (toolsJarPath == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.tools.jar.missing",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String versionString=jdk.getVersionString();
    if (versionString == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.unknown.jdk.version",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    if (CompilerUtil.isOfVersion(versionString,"1.0")) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.1_0_compilation.not.supported"),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
  }
  return true;
}
