{
  DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final DefaultListModel model=buildModel(project);
  final JLabel pathLabel=new JLabel(" ");
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  final Font font=pathLabel.getFont();
  pathLabel.setFont(font.deriveFont((float)10));
  final JList list=new JBList(model);
  final PreviewPanel previewPanel=new PreviewPanel(project);
  list.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    private String getTitle2Text(    String fullText){
      int labelWidth=pathLabel.getWidth();
      if (fullText == null || fullText.length() == 0)       return " ";
      while (pathLabel.getFontMetrics(pathLabel.getFont()).stringWidth(fullText) > labelWidth) {
        int sep=fullText.indexOf(File.separatorChar,4);
        if (sep < 0)         return fullText;
        fullText="..." + fullText.substring(sep);
      }
      return fullText;
    }
    public void valueChanged(    final ListSelectionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updatePathLabel();
        }
      }
);
    }
    private void updatePreviewPanel(    final ItemWrapper wrapper){
      myPreviewUpdateAlarm.cancelAllRequests();
      myPreviewUpdateAlarm.addRequest(new Runnable(){
        public void run(){
          previewPanel.updateWithItem(wrapper);
        }
      }
,300);
    }
    private void updatePathLabel(){
      final Object[] values=list.getSelectedValues();
      if (values != null && values.length == 1) {
        ItemWrapper wrapper=(ItemWrapper)values[0];
        pathLabel.setText(getTitle2Text(wrapper.footerText()));
        updatePreviewPanel(wrapper);
      }
 else {
        updatePreviewPanel(null);
        pathLabel.setText(" ");
      }
    }
  }
);
  Runnable runnable=new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(project).doWhenFocusSettlesDown(new Runnable(){
        public void run(){
          Object[] values=list.getSelectedValues();
          if (values.length == 1) {
            ((ItemWrapper)values[0]).execute(project);
          }
 else {
            for (            Object value : values) {
              if (value instanceof BookmarkItem) {
                ((BookmarkItem)value).execute(project);
              }
            }
          }
        }
      }
);
    }
  }
;
  if (list.getModel().getSize() == 0) {
    list.clearSelection();
  }
  list.setCellRenderer(new ItemRenderer(project));
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(pathLabel);
  DefaultActionGroup actions=new DefaultActionGroup();
  EditBookmarkDescriptionAction editDescriptionAction=new EditBookmarkDescriptionAction(project,list);
  actions.add(editDescriptionAction);
  actions.add(new DeleteBookmarkAction(project,list));
  actions.add(new MoveBookmarkUpAction(project,list));
  actions.add(new MoveBookmarkDownAction(project,list));
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar("",actions,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  actionToolbar.setMinimumButtonSize(new Dimension(16,16));
  final JComponent toolBar=actionToolbar.getComponent();
  toolBar.setOpaque(false);
  final JBPopup popup=new PopupChooserBuilder(list).setTitle("Bookmarks").setMovable(true).setAutoselectOnMouseMove(false).setSettingButton(toolBar).setSouthComponent(footerPanel).setEastComponent(previewPanel).setItemChoosenCallback(runnable).setMayBeParent(true).setFilteringEnabled(new Function<Object,String>(){
    public String fun(    Object o){
      return ((ItemWrapper)o).speedSearchText();
    }
  }
).createPopup();
  list.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        int index=list.getSelectedIndex();
        if (index == -1 || index >= list.getModel().getSize()) {
          return;
        }
        Object[] values=list.getSelectedValues();
        for (        Object value : values) {
          if (value instanceof BookmarkItem) {
            BookmarkItem item=(BookmarkItem)value;
            model.removeElement(item);
            if (model.getSize() > 0) {
              if (model.getSize() == index) {
                list.setSelectedIndex(model.getSize() - 1);
              }
 else               if (model.getSize() > index) {
                list.setSelectedIndex(index);
              }
            }
 else {
              list.clearSelection();
            }
            BookmarkManager.getInstance(project).removeBookmark(item.myBookmark);
          }
        }
      }
 else       if (e.getModifiersEx() == 0) {
        char mnemonic=e.getKeyChar();
        final Bookmark bookmark=BookmarkManager.getInstance(project).findBookmarkForMnemonic(mnemonic);
        if (bookmark != null) {
          popup.cancel();
          IdeFocusManager.getInstance(project).doWhenFocusSettlesDown(new Runnable(){
            public void run(){
              bookmark.navigate();
            }
          }
);
        }
      }
    }
  }
);
  editDescriptionAction.setPopup(popup);
  popup.showCenteredInCurrentWindow(project);
}
