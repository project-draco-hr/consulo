{
  super.visitBinaryExpression(expression);
  final IElementType tokenType=expression.getOperationSign().getTokenType();
  if (!tokenType.equals(JavaTokenType.ANDAND) && !tokenType.equals(JavaTokenType.OROR)) {
    return;
  }
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  if (parent instanceof PsiBinaryExpression) {
    final PsiBinaryExpression parentExpression=(PsiBinaryExpression)parent;
    if (tokenType.equals(parentExpression.getOperationSign().getTokenType())) {
      return;
    }
  }
  final Set<PsiExpression> conditions=new HashSet<PsiExpression>();
  collectConditions(expression,conditions,tokenType);
  final int numConditions=conditions.size();
  if (numConditions < 2) {
    return;
  }
  final PsiExpression[] conditionArray=conditions.toArray(new PsiExpression[numConditions]);
  final boolean[] matched=new boolean[conditionArray.length];
  Arrays.fill(matched,false);
  for (int i=0; i < conditionArray.length; i++) {
    if (matched[i]) {
      continue;
    }
    final PsiExpression condition=conditionArray[i];
    for (int j=i + 1; j < conditionArray.length; j++) {
      if (matched[j]) {
        continue;
      }
      final PsiExpression testCondition=conditionArray[j];
      final boolean areEquivalent=EquivalenceChecker.expressionsAreEquivalent(condition,testCondition);
      if (areEquivalent) {
        registerError(testCondition);
        if (!matched[i]) {
          registerError(condition);
        }
        matched[i]=true;
        matched[j]=true;
      }
    }
  }
}
