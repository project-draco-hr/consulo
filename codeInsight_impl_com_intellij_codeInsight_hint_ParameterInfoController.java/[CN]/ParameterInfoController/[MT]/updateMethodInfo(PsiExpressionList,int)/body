{
  int index=getCurrentParameterIndex(list,offset);
  myComponent.setCurrentParameter(index);
  Object[] candidates=myComponent.getObjects();
  PsiExpression[] args=list.getExpressions();
  for (int i=0; i < candidates.length; i++) {
    boolean enabled=true;
    CandidateInfo candidate=(CandidateInfo)candidates[i];
    PsiMethod method=(PsiMethod)candidate.getElement();
    PsiSubstitutor substitutor=candidate.getSubstitutor();
    LOG.assertTrue(substitutor != null);
    if (!method.isValid() || !substitutor.isValid()) {
      myComponent.setEnabled(i,false);
      continue;
    }
    PsiParameter[] parms=method.getParameterList().getParameters();
    if (parms.length <= index) {
      if (parms.length > 0) {
        if (method.isVarArgs()) {
          for (int j=0; j < parms.length - 1; j++) {
            PsiType parmType=substitutor.substitute(parms[j].getType());
            PsiType argType=args[j].getType();
            if (argType != null && !parmType.isAssignableFrom(argType)) {
              enabled=false;
              break;
            }
          }
          if (enabled) {
            PsiArrayType lastParmType=(PsiArrayType)substitutor.substitute(parms[parms.length - 1].getType());
            PsiType componentType=lastParmType.getComponentType();
            if (parms.length == args.length) {
              PsiType lastArgType=args[args.length - 1].getType();
              if (lastArgType != null && !lastParmType.isAssignableFrom(lastArgType) && !componentType.isAssignableFrom(lastArgType)) {
                enabled=false;
              }
            }
 else {
              for (int j=parms.length; j <= index; j++) {
                PsiExpression arg=args[j];
                PsiType argType=arg.getType();
                if (argType != null && !componentType.isAssignableFrom(argType)) {
                  enabled=false;
                  break;
                }
              }
            }
          }
        }
 else {
          enabled=false;
        }
      }
 else {
        enabled=index == 0;
      }
    }
 else {
      for (int j=0; j < index; j++) {
        PsiParameter parm=parms[j];
        PsiExpression arg=args[j];
        LOG.assertTrue(parm.isValid());
        LOG.assertTrue(arg.isValid());
        PsiType parmType=substitutor.substitute(parm.getType());
        PsiType argType=arg.getType();
        if (argType != null && !parmType.isAssignableFrom(argType)) {
          enabled=false;
          break;
        }
      }
    }
    myComponent.setEnabled(i,enabled);
  }
}
