{
  final ArrangementMatchingRulesControl control=ArrangementConstants.MATCHING_RULES_CONTROL_KEY.getData(e.getDataContext());
  if (control == null) {
    return;
  }
  final int editing=control.getEditingRow() - 1;
  control.runOperationIgnoreSelectionChange(new Runnable(){
    @Override public void run(){
      control.hideEditor();
      final List<int[]> mappings=new ArrayList<int[]>();
      TIntArrayList rows=control.getSelectedModelRows();
      rows.reverse();
      int top=-1;
      for (int i=0; i < rows.size(); i++) {
        int row=rows.get(i);
        if (row == top + 1) {
          mappings.add(new int[]{row,row});
          top++;
        }
 else {
          mappings.add(new int[]{row,row - 1});
        }
      }
      if (mappings.isEmpty()) {
        return;
      }
      int newRowToEdit=editing;
      ArrangementMatchingRulesModel model=control.getModel();
      Object value;
      int from;
      int to;
      for (      int[] pair : mappings) {
        from=pair[0];
        to=pair[1];
        if (from != to) {
          value=model.getElementAt(from);
          model.removeRow(from);
          model.insert(to,value);
          if (newRowToEdit == from) {
            newRowToEdit=to;
          }
        }
      }
      ListSelectionModel selectionModel=control.getSelectionModel();
      for (      int[] pair : mappings) {
        selectionModel.addSelectionInterval(pair[1],pair[1]);
      }
      if (newRowToEdit >= 0) {
        control.showEditor(newRowToEdit);
      }
    }
  }
);
  control.repaintRows(0,control.getModel().getSize() - 1,true);
}
