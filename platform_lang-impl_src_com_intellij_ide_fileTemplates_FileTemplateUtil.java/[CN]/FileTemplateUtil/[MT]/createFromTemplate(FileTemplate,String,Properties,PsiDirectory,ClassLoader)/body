{
  @NotNull final Project project=directory.getProject();
  if (props == null) {
    props=FileTemplateManager.getInstance().getDefaultProperties();
  }
  FileTemplateManager.getInstance().addRecentName(template.getName());
  fillDefaultProperties(props,directory);
  if (fileName != null && props.getProperty(FileTemplate.ATTRIBUTE_NAME) == null) {
    props.setProperty(FileTemplate.ATTRIBUTE_NAME,fileName);
  }
  String[] dummyRefs=calculateAttributes(template.getText(),props,true);
  for (  String dummyRef : dummyRefs) {
    props.setProperty(dummyRef,"");
  }
  final CreateFromTemplateHandler handler=findHandler(template);
  props=handler.prepareProperties(props);
  final Properties props_=props;
  String mergedText=ClassLoaderUtil.runWithClassLoader(classLoader != null ? classLoader : FileTemplateUtil.class.getClassLoader(),new ThrowableComputable<String,IOException>(){
    @Override public String compute() throws IOException {
      return template.getText(props_);
    }
  }
);
  final String templateText=StringUtil.convertLineSeparators(mergedText);
  final Exception[] commandException=new Exception[1];
  final PsiElement[] result=new PsiElement[1];
  final Properties finalProps=props;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          try {
            result[0]=handler.createFromTemplate(project,directory,fileName,template,templateText,finalProps);
          }
 catch (          Exception ex) {
            commandException[0]=ex;
          }
        }
      }
);
    }
  }
,template.isTemplateOfType(StdFileTypes.JAVA) ? IdeBundle.message("command.create.class.from.template") : IdeBundle.message("command.create.file.from.template"),null);
  if (commandException[0] != null) {
    throw commandException[0];
  }
  return result[0];
}
