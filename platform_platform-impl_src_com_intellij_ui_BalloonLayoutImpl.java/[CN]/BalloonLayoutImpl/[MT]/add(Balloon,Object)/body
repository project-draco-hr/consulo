{
  ApplicationManager.getApplication().assertIsDispatchThread();
  Balloon merge=merge(layoutData);
  if (merge == null) {
    if (NotificationsManagerImpl.newEnabled() && getVisibleCount() > 0 && layoutData instanceof BalloonLayoutData && ((BalloonLayoutData)layoutData).groupId != null) {
      int index=-1;
      int count=0;
      for (int i=0, size=myBalloons.size(); i < size; i++) {
        BalloonLayoutData ld=myLayoutData.get(myBalloons.get(i));
        if (ld != null && ld.groupId != null) {
          if (index == -1) {
            index=i;
          }
          count++;
        }
      }
      if (count > 0 && count == getVisibleCount()) {
        remove(myBalloons.get(index));
      }
    }
    myBalloons.add(balloon);
  }
 else {
    int index=myBalloons.indexOf(merge);
    remove(merge);
    myBalloons.add(index,balloon);
  }
  if (layoutData instanceof BalloonLayoutData) {
    BalloonLayoutData balloonLayoutData=(BalloonLayoutData)layoutData;
    balloonLayoutData.closeAll=myCloseAll;
    balloonLayoutData.doLayout=myLayoutRunnable;
    myLayoutData.put(balloon,balloonLayoutData);
  }
  Disposer.register(balloon,new Disposable(){
    public void dispose(){
      clearNMore(balloon);
      remove(balloon,false);
      queueRelayout();
    }
  }
);
  if (myLafListener == null && layoutData != null) {
    myLafListener=new LafManagerListener(){
      @Override public void lookAndFeelChanged(      LafManager source){
        for (        BalloonLayoutData layoutData : myLayoutData.values()) {
          if (layoutData.lafHandler != null) {
            layoutData.lafHandler.run();
          }
        }
      }
    }
;
    LafManager.getInstance().addLafManagerListener(myLafListener);
  }
  calculateSize();
  relayout();
  ((BalloonImpl)balloon).traceDispose(false);
  balloon.show(myLayeredPane);
  fireRelayout();
}
