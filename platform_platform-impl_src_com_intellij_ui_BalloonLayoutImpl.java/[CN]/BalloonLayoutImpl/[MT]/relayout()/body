{
  final Dimension size=myLayeredPane.getSize();
  JBInsets.removeFrom(size,myInsets);
  final Rectangle layoutRec=new Rectangle(new Point(myInsets.left,myInsets.top),size);
  List<ArrayList<Balloon>> columns=createColumns(layoutRec);
  while (columns.size() > 1) {
    remove(myBalloons.get(0),true);
    columns=createColumns(layoutRec);
  }
  List<Integer> columnWidths=computeWidths(columns);
  ToolWindowsPane pane=UIUtil.findComponentOfType(myParent,ToolWindowsPane.class);
  JComponent component=pane != null ? pane : myParent;
  int paneOnScreen=component.isShowing() ? component.getLocationOnScreen().y : 0;
  int layerOnScreen=myLayeredPane.isShowing() ? myLayeredPane.getLocationOnScreen().y : 0;
  int toolbarsOffset=paneOnScreen - layerOnScreen;
  JComponent layeredPane=pane != null ? pane.getMyLayeredPane() : null;
  int eachColumnX=(layeredPane == null ? myLayeredPane.getWidth() : layeredPane.getX() + layeredPane.getWidth()) - 4;
  if (NotificationsManagerImpl.newEnabled()) {
    newLayout(columns.get(0),eachColumnX + 4,(int)myLayeredPane.getBounds().getMaxY());
    return;
  }
  if (myLayoutData.isEmpty()) {
    for (int i=0; i < columns.size(); i++) {
      final ArrayList<Balloon> eachColumn=columns.get(i);
      final Integer eachWidth=columnWidths.get(i);
      eachColumnX-=eachWidth.intValue();
      int eachY=toolbarsOffset + 2;
      for (      Balloon eachBalloon : eachColumn) {
        final Rectangle eachRec=new Rectangle();
        eachRec.setSize(getSize(eachBalloon));
        if (((BalloonImpl)eachBalloon).hasShadow()) {
          final Insets shadow=((BalloonImpl)eachBalloon).getShadowBorderInsets();
          eachRec.width+=shadow.left + shadow.right;
          eachRec.height+=shadow.top + shadow.bottom;
        }
        eachY+=2;
        eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width,eachY);
        eachBalloon.setBounds(eachRec);
        eachY+=eachRec.height;
      }
    }
  }
 else {
    for (int i=0; i < columns.size(); i++) {
      final ArrayList<Balloon> eachColumn=columns.get(i);
      final Integer eachWidth=columnWidths.get(i);
      int eachY=toolbarsOffset;
      int columnSize=eachColumn.size();
      if (columnSize > 0 && !((BalloonImpl)eachColumn.get(0)).hasShadow()) {
        eachY+=4;
      }
      eachColumnX-=eachWidth.intValue();
      boolean addShadow=false;
      for (      Balloon balloon : eachColumn) {
        if (myLayoutData.get(balloon) == null) {
          addShadow=true;
          break;
        }
      }
      for (int j=0; j < columnSize; j++) {
        BalloonImpl eachBalloon=(BalloonImpl)eachColumn.get(j);
        Rectangle eachRec=new Rectangle(getSize(eachBalloon));
        eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width,eachY);
        boolean hasShadow=eachBalloon.hasShadow();
        Insets shadow=hasShadow ? eachBalloon.getShadowBorderInsets() : null;
        if (addShadow && hasShadow) {
          eachRec.width+=shadow.left + shadow.right;
          eachRec.x-=shadow.left;
        }
        eachBalloon.setBounds(eachRec);
        eachY+=eachRec.height;
        if (j + 1 < columnSize) {
          BalloonImpl next=(BalloonImpl)eachColumn.get(j + 1);
          boolean hasNextShadow=next.hasShadow();
          int space=BalloonLayoutConfiguration.NotificationSpace;
          if (hasShadow == hasNextShadow) {
            if (hasShadow) {
              eachY+=space - shadow.top - shadow.bottom;
            }
 else {
              eachY+=space;
            }
          }
 else           if (hasShadow) {
            eachY+=space - shadow.top;
          }
 else {
            eachY+=space - next.getShadowBorderInsets().bottom;
          }
        }
      }
    }
  }
}
