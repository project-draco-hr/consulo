{
  String contentPath=getContentEntryPath();
  if (StringUtil.isEmpty(contentPath)) {
    return;
  }
  File contentRootDir=new File(contentPath);
  FileUtilRt.createDirectory(contentRootDir);
  LocalFileSystem fileSystem=LocalFileSystem.getInstance();
  VirtualFile vContentRootDir=fileSystem.refreshAndFindFileByIoFile(contentRootDir);
  if (vContentRootDir == null) {
    return;
  }
  model.addContentEntry(vContentRootDir);
  VirtualFile configFile=getExternalProjectConfigFile(vContentRootDir);
  final String templateConfigName=getTemplateConfigName(myExternalProjectSettings);
  if (configFile != null && templateConfigName != null) {
    FileTemplateManager manager=FileTemplateManager.getInstance();
    FileTemplate template=manager.getInternalTemplate(templateConfigName);
    try {
      VfsUtil.saveText(configFile,template.getText());
    }
 catch (    IOException e) {
      LOG.warn(String.format("Unexpected exception on applying template %s config",myExternalSystemId.getReadableName()),e);
      throw new ConfigurationException(e.getMessage(),String.format("Can't apply %s template config text",myExternalSystemId.getReadableName()));
    }
  }
  AbstractExternalSystemSettings settings=ExternalSystemApiUtil.getSettings(model.getProject(),myExternalSystemId);
  myExternalProjectSettings.setExternalProjectPath(getContentEntryPath());
  settings.linkProject(myExternalProjectSettings);
}
