{
  boolean old=CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY;
  try {
    CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY=true;
    configureByText(StdFileTypes.JAVA,"class X { <caret>ArrayList c = new ArrayList(); }");
    ((UndoManagerImpl)UndoManagerImpl.getInstance(getProject())).flushCurrentCommandMerger();
    ((UndoManagerImpl)UndoManagerImpl.getInstance(getProject())).clearUndoRedoQueueInTests(getFile().getVirtualFile());
    type(" ");
    backspace();
    assertEquals(2,filter(doHighlighting(),HighlightSeverity.ERROR).size());
    UIUtil.dispatchAllInvocationEvents();
    int offset=myEditor.getCaretModel().getOffset();
    PsiReference ref=myFile.findReferenceAt(offset);
    assertTrue(ref instanceof PsiJavaCodeReferenceElement);
    ImportClassFixBase.Result result=new ImportClassFix((PsiJavaCodeReferenceElement)ref).doFix(getEditor(),true,false);
    assertEquals(ImportClassFixBase.Result.CLASS_AUTO_IMPORTED,result);
    UIUtil.dispatchAllInvocationEvents();
    assertEmpty(filter(doHighlighting(),HighlightSeverity.ERROR));
  }
  finally {
    CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY=old;
  }
}
