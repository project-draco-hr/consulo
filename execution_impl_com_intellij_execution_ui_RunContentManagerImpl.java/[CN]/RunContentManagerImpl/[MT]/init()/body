{
  final JavaProgramRunner[] registeredRunners=ExecutionRegistry.getInstance().getRegisteredRunners();
  for (  JavaProgramRunner registeredRunner : registeredRunners) {
    registerToolwindow(registeredRunner);
  }
  if (ApplicationManager.getApplication().isHeadlessEnvironment())   return;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      ((ToolWindowManagerEx)ToolWindowManager.getInstance(myProject)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
        public void stateChanged(){
          ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
          Set<String> currentWindows=new HashSet<String>();
          String[] toolWindowIds=toolWindowManager.getToolWindowIds();
          for (int i=0; i < toolWindowIds.length; i++) {
            currentWindows.add(toolWindowIds[i]);
          }
          myToolwindowIdZbuffer.retainAll(currentWindows);
          final String activeToolWindowId=toolWindowManager.getActiveToolWindowId();
          if (activeToolWindowId != null) {
            if (myToolwindowIdZbuffer.remove(activeToolWindowId)) {
              myToolwindowIdZbuffer.addFirst(activeToolWindowId);
            }
          }
        }
      }
);
    }
  }
);
}
