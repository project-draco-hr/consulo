{
  Method method=null;
  try {
    method=aClass.getDeclaredMethod(myMethodName,myMethodParameters);
    final Class<?> newReturnType=method.getReturnType();
    if (bestReturnType.isAssignableFrom(newReturnType) && !newReturnType.equals(bestReturnType)) {
      return method;
    }
  }
 catch (  NoSuchMethodException e) {
    final Class[] interfaces=aClass.getInterfaces();
    for (    final Class aClass1 : interfaces) {
      final Method bestMethod=findBestMethod(aClass1,bestReturnType);
      if (bestMethod != null) {
        method=bestMethod;
        bestReturnType=bestMethod.getReturnType();
      }
    }
    final Class superclass=aClass.getSuperclass();
    if (superclass != null) {
      final Method bestMethod=findBestMethod(superclass,bestReturnType);
      if (bestMethod != null) {
        return bestMethod;
      }
    }
 else     if (aClass.isInterface() && interfaces.length == 0) {
      final Method bestMethod=findBestMethod(Object.class,bestReturnType);
      if (bestMethod != null) {
        return bestMethod;
      }
    }
  }
  return method;
}
