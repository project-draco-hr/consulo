{
  myProject=project;
  myContextManager=contextManager;
  myChangeListManager=changeListManager;
  myChangeListListener=new ChangeListAdapter(){
    @Override public void changeListRemoved(    ChangeList list){
      disassociateFromTask((LocalChangeList)list);
    }
    @Override public void defaultListChanged(    ChangeList oldDefaultList,    ChangeList newDefaultList){
      final LocalTask associatedTask=getAssociatedTask((LocalChangeList)newDefaultList);
      if (associatedTask != null && !getActiveTask().equals(associatedTask)) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            activateTask(associatedTask,true,false);
          }
        }
,myProject.getDisposed());
      }
    }
  }
;
  addTaskListener(new TaskListenerAdapter(){
    @Override public void taskDeactivated(    final LocalTask task){
      task.setTimeSpent(task.getTimeSpent() + System.currentTimeMillis() - task.getActivated());
    }
    @Override public void taskActivated(    final LocalTask task){
      task.setActivated(System.currentTimeMillis());
    }
  }
);
  myProjectManagerListener=new ProjectManagerAdapter(){
    @Override public boolean canCloseProject(    final Project project){
      getState().myTotallyTimeSpent+=System.currentTimeMillis() - myProjectOpenedTime;
      myActiveTask.setTimeSpent(myActiveTask.getTimeSpent() + System.currentTimeMillis() - myActiveTask.getActivated());
      return true;
    }
  }
;
  ProjectManager.getInstance().addProjectManagerListener(myProjectManagerListener);
}
