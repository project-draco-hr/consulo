{
  List<Task> issues=null;
  for (  final TaskRepository repository : getAllRepositories()) {
    if (!repository.isConfigured() || (!forceRequest && myBadRepositories.contains(repository))) {
      continue;
    }
    try {
      final Task[] tasks=repository.getIssues(request,max,since,cancelled);
      myBadRepositories.remove(repository);
      if (issues == null)       issues=new ArrayList<Task>(tasks.length);
      ContainerUtil.addAll(issues,tasks);
    }
 catch (    ProcessCanceledException ignored) {
    }
catch (    Exception e) {
      if (e instanceof SocketTimeoutException) {
        LOG.warn("Socket timeout from " + repository);
      }
 else {
        LOG.warn("Cannot connect to " + repository,e);
      }
      myBadRepositories.add(repository);
      if (forceRequest) {
        notifyAboutConnectionFailure(repository);
      }
    }
  }
  return issues;
}
