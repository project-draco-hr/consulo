{
  Project project=file.getProject();
  Document document=editor.getDocument();
  CharSequence charSequence=document.getImmutableCharSequence();
  CaretModel caretModel=editor.getCaretModel();
  int caretOffset=caretModel.getOffset();
  LogicalPosition pos=caretModel.getLogicalPosition();
  int lineStartOffset=document.getLineStartOffset(pos.line);
  int beforeWhitespaceOffset=CharArrayUtil.shiftBackward(charSequence,caretOffset - 1," \t") + 1;
  if (beforeWhitespaceOffset != lineStartOffset) {
    myReplacement=null;
    return;
  }
  PsiDocumentManager.getInstance(project).commitDocument(document);
  CodeStyleFacade codeStyleFacade=CodeStyleFacade.getInstance(project);
  myReplacement=codeStyleFacade.getLineIndent(document,lineStartOffset);
  if (myReplacement == null) {
    return;
  }
  int tabSize=getTabSize(codeStyleFacade,document);
  int targetColumn=getWidth(myReplacement,tabSize);
  int endOffset=CharArrayUtil.shiftForward(charSequence,caretOffset," \t");
  LogicalPosition logicalPosition=caretOffset < endOffset ? editor.offsetToLogicalPosition(endOffset) : pos;
  int currentColumn=logicalPosition.column;
  if (currentColumn > targetColumn) {
    myStartOffset=lineStartOffset;
  }
 else   if (logicalPosition.line == 0) {
    myStartOffset=0;
    myReplacement="";
  }
 else {
    int prevLineEndOffset=document.getLineEndOffset(logicalPosition.line - 1);
    myStartOffset=CharArrayUtil.shiftBackward(charSequence,prevLineEndOffset - 1," \t") + 1;
    if (myStartOffset != document.getLineStartOffset(logicalPosition.line - 1)) {
      myReplacement=getSpacing(file,endOffset);
    }
  }
}
