{
  final Project project=listOwner.getProject();
  XmlFile xmlFile=findExternalAnnotationsFile(listOwner);
  if (xmlFile != null) {
    if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(xmlFile.getVirtualFile()).hasReadonlyFiles())     return;
    annotateExternally(listOwner,annotationFQName,xmlFile);
  }
 else {
    final PsiFile containingFile=listOwner.getContainingFile();
    if (containingFile instanceof PsiJavaFile) {
      final String packageName=((PsiJavaFile)containingFile).getPackageName();
      final VirtualFile virtualFile=containingFile.getVirtualFile();
      LOG.assertTrue(virtualFile != null);
      final List<OrderEntry> entries=ProjectRootManager.getInstance(project).getFileIndex().getOrderEntriesForFile(virtualFile);
      if (!entries.isEmpty()) {
        for (        final OrderEntry entry : entries) {
          if (!(entry instanceof ModuleOrderEntry)) {
            final VirtualFile[] virtualFiles=entry.getFiles(OrderRootType.ANNOTATIONS);
            if (virtualFiles.length > 0) {
              final XmlFile annotationsXml=createAnnotationsXml(virtualFiles[0],packageName);
              if (annotationsXml != null) {
                myExternalAnotations.put(virtualFile,annotationsXml);
              }
              annotateExternally(listOwner,annotationFQName,annotationsXml);
            }
 else {
              if (ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment())               return;
              SwingUtilities.invokeLater(new Runnable(){
                public void run(){
                  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
                  descriptor.setTitle(ProjectBundle.message("external.annotations.root.chooser.title",entry.getPresentableName()));
                  descriptor.setDescription(ProjectBundle.message("external.annotations.root.chooser.description"));
                  final VirtualFile[] files=FileChooser.chooseFiles(project,descriptor);
                  if (files.length > 0) {
                    new WriteCommandAction(project,null){
                      protected void run(                      final Result result) throws Throwable {
                        if (files[0] != null) {
                          appendChosenAnnotationsRoot(entry,files[0]);
                          final XmlFile xmlFile=findExternalAnnotationsFile(listOwner);
                          if (xmlFile != null) {
                            if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(xmlFile.getVirtualFile()).hasReadonlyFiles())                             return;
                            annotateExternally(listOwner,annotationFQName,xmlFile);
                          }
 else {
                            final XmlFile annotationsXml=createAnnotationsXml(files[0],packageName);
                            if (annotationsXml != null) {
                              myExternalAnotations.put(virtualFile,annotationsXml);
                            }
                            annotateExternally(listOwner,annotationFQName,annotationsXml);
                          }
                        }
                      }
                    }
.execute();
                  }
                }
              }
);
            }
            break;
          }
        }
      }
    }
  }
}
