{
  final boolean checkTrue;
  if (isAssertFalse(expression)) {
    checkTrue=true;
  }
 else   if (isAssertTrue(expression)) {
    checkTrue=false;
  }
 else {
    return false;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  if (method == null) {
    return false;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length < 1) {
    return false;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final int testPosition;
  if (paramType1.equals(stringType) && parameters.length > 1) {
    testPosition=1;
  }
 else {
    testPosition=0;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression testArgument=arguments[testPosition];
  if (testArgument == null) {
    return false;
  }
  final String testArgumentText=testArgument.getText();
  if (checkTrue) {
    return PsiKeyword.TRUE.equals(testArgumentText);
  }
 else {
    return PsiKeyword.FALSE.equals(testArgumentText);
  }
}
