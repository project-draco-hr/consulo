{
  final PsiMethod method=callExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiManager psiManager=callExpression.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int firstTestPosition;
  final int secondTestPosition;
  final PsiExpression message;
  if (paramType1.equals(stringType) && parameters.length >= 3) {
    firstTestPosition=1;
    secondTestPosition=2;
    message=arguments[0];
  }
 else {
    firstTestPosition=0;
    secondTestPosition=1;
    message=null;
  }
  final PsiExpression firstTestArgument=arguments[firstTestPosition];
  final PsiExpression secondTestArgument=arguments[secondTestPosition];
  final String literalValue;
  final String compareValue;
  if (isSimpleLiteral(firstTestArgument,secondTestArgument)) {
    literalValue=firstTestArgument.getText();
    compareValue=secondTestArgument.getText();
  }
 else {
    literalValue=secondTestArgument.getText();
    compareValue=firstTestArgument.getText();
  }
  final String uppercaseLiteralValue=Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1);
  @NonNls final StringBuilder newExpression=new StringBuilder();
  @NonNls final String methodName="assert" + uppercaseLiteralValue;
  addStaticImportIfPossible(callExpression,methodName,newExpression);
  newExpression.append(methodName);
  newExpression.append('(');
  if (message != null) {
    newExpression.append(message.getText());
    newExpression.append(',');
  }
  newExpression.append(compareValue);
  newExpression.append(')');
  replaceExpressionAndShorten(callExpression,newExpression.toString());
}
