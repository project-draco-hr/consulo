{
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  final PsiManager psiManager=callExpression.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final int firstTestPosition;
  final int secondTestPosition;
  final PsiExpression message;
  if (paramType1.equals(stringType) && parameters.length >= 3) {
    firstTestPosition=1;
    secondTestPosition=2;
    message=args[0];
  }
 else {
    firstTestPosition=0;
    secondTestPosition=1;
    message=null;
  }
  final PsiExpression firstTestArg=args[firstTestPosition];
  final PsiExpression secondTestArg=args[secondTestPosition];
  final String literalValue;
  final String compareValue;
  if (isSimpleLiteral(firstTestArg)) {
    literalValue=firstTestArg.getText();
    compareValue=secondTestArg.getText();
  }
 else {
    literalValue=secondTestArg.getText();
    compareValue=firstTestArg.getText();
  }
  final String uppercaseLiteralValue=Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1);
  final StringBuffer newExpression=new StringBuffer("assert" + uppercaseLiteralValue + '(');
  if (message != null) {
    newExpression.append(message.getText());
    newExpression.append(',');
  }
  newExpression.append(compareValue);
  newExpression.append(')');
  replaceExpression(callExpression,newExpression.toString());
}
