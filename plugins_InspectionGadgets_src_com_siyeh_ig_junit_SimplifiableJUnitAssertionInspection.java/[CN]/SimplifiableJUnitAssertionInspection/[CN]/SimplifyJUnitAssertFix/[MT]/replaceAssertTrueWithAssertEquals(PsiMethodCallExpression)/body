{
  final PsiMethod method=callExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType stringType=TypeUtils.getStringType(callExpression);
  final PsiType paramType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int testPosition;
  final PsiExpression message;
  if (paramType1.equals(stringType) && parameters.length >= 2) {
    testPosition=1;
    message=arguments[0];
  }
 else {
    testPosition=0;
    message=null;
  }
  final PsiExpression testArgument=arguments[testPosition];
  PsiExpression lhs=null;
  PsiExpression rhs=null;
  if (testArgument instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)testArgument;
    lhs=binaryExpression.getLOperand();
    rhs=binaryExpression.getROperand();
  }
 else   if (testArgument instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression call=(PsiMethodCallExpression)testArgument;
    final PsiReferenceExpression equalityMethodExpression=call.getMethodExpression();
    final PsiExpressionList equalityArgumentList=call.getArgumentList();
    final PsiExpression[] equalityArgs=equalityArgumentList.getExpressions();
    rhs=equalityArgs[0];
    lhs=equalityMethodExpression.getQualifierExpression();
  }
  if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) {
    final PsiExpression temp=lhs;
    lhs=rhs;
    rhs=temp;
  }
  if (lhs == null || rhs == null) {
    return;
  }
  @NonNls final StringBuilder newExpression=new StringBuilder();
  if (!ImportUtils.addStaticImport("org.junit.Assert","assertEquals",callExpression)) {
    newExpression.append("org.junit.Assert.");
  }
  newExpression.append("assertEquals(");
  if (message != null) {
    newExpression.append(message.getText()).append(',');
  }
  newExpression.append(lhs.getText()).append(',').append(rhs.getText());
  if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs)) {
    newExpression.append(",0.0");
  }
  newExpression.append(')');
  replaceExpressionAndShorten(callExpression,newExpression.toString());
}
