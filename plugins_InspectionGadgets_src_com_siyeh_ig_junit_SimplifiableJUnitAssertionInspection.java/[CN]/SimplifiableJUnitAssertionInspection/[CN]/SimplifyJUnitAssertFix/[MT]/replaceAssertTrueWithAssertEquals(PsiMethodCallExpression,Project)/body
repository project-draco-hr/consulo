{
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  final PsiManager psiManager=callExpression.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final int testPosition;
  final PsiExpression message;
  if (paramType1.equals(stringType) && parameters.length >= 2) {
    testPosition=1;
    message=args[0];
  }
 else {
    testPosition=0;
    message=null;
  }
  final PsiExpression testArg=args[testPosition];
  PsiExpression lhs=null;
  PsiExpression rhs=null;
  if (testArg instanceof PsiBinaryExpression) {
    lhs=((PsiBinaryExpression)testArg).getLOperand();
    rhs=((PsiBinaryExpression)testArg).getROperand();
  }
 else   if (testArg instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression call=(PsiMethodCallExpression)testArg;
    final PsiReferenceExpression equalityMethodExpression=call.getMethodExpression();
    final PsiExpressionList equalityArgumentList=call.getArgumentList();
    final PsiExpression[] equalityArgs=equalityArgumentList.getExpressions();
    rhs=equalityArgs[0];
    lhs=equalityMethodExpression.getQualifierExpression();
  }
  if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) {
    final PsiExpression temp=lhs;
    lhs=rhs;
    rhs=temp;
  }
  final StringBuffer newExpression=new StringBuffer("assertEquals(");
  if (message != null) {
    newExpression.append(message.getText());
    newExpression.append(',');
  }
  newExpression.append(lhs.getText());
  newExpression.append(',');
  newExpression.append(rhs.getText());
  if (isFloatingPoint(lhs) || isFloatingPoint(rhs)) {
    newExpression.append(",0.0");
  }
  newExpression.append(')');
  replaceExpression(project,callExpression,newExpression.toString());
}
