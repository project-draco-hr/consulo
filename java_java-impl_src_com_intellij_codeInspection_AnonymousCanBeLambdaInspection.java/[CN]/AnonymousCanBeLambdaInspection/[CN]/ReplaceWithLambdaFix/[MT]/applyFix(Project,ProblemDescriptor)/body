{
  final PsiElement element=descriptor.getPsiElement();
  if (element != null) {
    final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(element,PsiAnonymousClass.class);
    LOG.assertTrue(anonymousClass != null);
    boolean validContext=LambdaUtil.isValidLambdaContext(anonymousClass.getParent().getParent());
    final String canonicalText=anonymousClass.getBaseClassType().getCanonicalText();
    final PsiMethod method=anonymousClass.getMethods()[0];
    LOG.assertTrue(method != null);
    final String lambdaWithTypesDeclared=composeLambdaText(method,true);
    final String withoutTypesDeclared=composeLambdaText(method,false);
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
    PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)elementFactory.createExpressionFromText(withoutTypesDeclared,anonymousClass);
    final PsiNewExpression newExpression=(PsiNewExpression)anonymousClass.getParent();
    lambdaExpression=(PsiLambdaExpression)newExpression.replace(lambdaExpression);
    if (!validContext) {
      lambdaExpression.replace(elementFactory.createExpressionFromText("((" + canonicalText + ")"+ withoutTypesDeclared+ ")",lambdaExpression));
      return;
    }
    PsiType interfaceType=lambdaExpression.getFunctionalInterfaceType();
    if (isInferenced(lambdaExpression,interfaceType)) {
      lambdaExpression=(PsiLambdaExpression)lambdaExpression.replace(elementFactory.createExpressionFromText(lambdaWithTypesDeclared,lambdaExpression));
      interfaceType=lambdaExpression.getFunctionalInterfaceType();
      if (isInferenced(lambdaExpression,interfaceType)) {
        lambdaExpression.replace(elementFactory.createExpressionFromText("(" + canonicalText + ")"+ withoutTypesDeclared,lambdaExpression));
      }
    }
  }
}
