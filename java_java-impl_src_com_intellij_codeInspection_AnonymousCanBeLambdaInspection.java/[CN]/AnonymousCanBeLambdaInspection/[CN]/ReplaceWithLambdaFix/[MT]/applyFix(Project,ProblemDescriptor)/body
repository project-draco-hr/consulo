{
  final PsiElement element=descriptor.getPsiElement();
  if (element != null) {
    final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(element,PsiAnonymousClass.class);
    LOG.assertTrue(anonymousClass != null);
    final PsiMethod method=anonymousClass.getMethods()[0];
    LOG.assertTrue(method != null);
    final String lambdaWithTypesDeclared=composeLambdaText(method,true);
    PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)JavaPsiFacade.getElementFactory(project).createExpressionFromText(composeLambdaText(method,false),anonymousClass);
    final PsiNewExpression newExpression=(PsiNewExpression)anonymousClass.getParent();
    lambdaExpression=(PsiLambdaExpression)newExpression.replace(lambdaExpression);
    PsiType interfaceType=lambdaExpression.getFunctionalInterfaceType();
    if (interfaceType == null || !LambdaUtil.isLambdaFullyInferred(lambdaExpression,interfaceType)) {
      lambdaExpression.replace(JavaPsiFacade.getElementFactory(project).createExpressionFromText(lambdaWithTypesDeclared,lambdaExpression));
    }
  }
}
