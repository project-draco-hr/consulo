{
  return new JavaElementVisitor(){
    @Override public void visitAnonymousClass(    PsiAnonymousClass aClass){
      super.visitAnonymousClass(aClass);
      if (PsiUtil.getLanguageLevel(aClass).isAtLeast(LanguageLevel.JDK_1_8)) {
        final PsiClassType baseClassType=aClass.getBaseClassType();
        final String functionalInterfaceErrorMessage=LambdaUtil.checkInterfaceFunctional(baseClassType);
        if (functionalInterfaceErrorMessage == null) {
          final PsiMethod[] methods=aClass.getMethods();
          if (methods.length == 1) {
            final PsiCodeBlock body=methods[0].getBody();
            if (body != null) {
              final boolean[] recursive=new boolean[1];
              body.accept(new JavaRecursiveElementWalkingVisitor(){
                @Override public void visitMethodCallExpression(                PsiMethodCallExpression methodCallExpression){
                  super.visitMethodCallExpression(methodCallExpression);
                  if (methodCallExpression.resolveMethod() == methods[0]) {
                    recursive[0]=true;
                  }
                }
              }
);
              if (!recursive[0]) {
                holder.registerProblem(aClass.getBaseClassReference(),"Anonymous #ref #loc can be replaced with lambda",ProblemHighlightType.LIKE_UNUSED_SYMBOL,new ReplaceWithLambdaFix());
              }
            }
          }
        }
      }
    }
  }
;
}
