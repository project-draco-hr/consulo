{
  return new JavaElementVisitor(){
    @Override public void visitAnonymousClass(    PsiAnonymousClass aClass){
      super.visitAnonymousClass(aClass);
      if (PsiUtil.getLanguageLevel(aClass).isAtLeast(LanguageLevel.JDK_1_8) && LambdaUtil.isValidLambdaContext(aClass.getParent().getParent())) {
        final PsiClassType baseClassType=aClass.getBaseClassType();
        final String functionalInterfaceErrorMessage=LambdaUtil.checkInterfaceFunctional(baseClassType);
        if (functionalInterfaceErrorMessage == null) {
          final PsiMethod[] methods=aClass.getMethods();
          if (methods.length == 1 && methods[0].getBody() != null) {
            holder.registerProblem(aClass.getBaseClassReference(),"Anonymous #ref #loc can be replaced with lambda",ProblemHighlightType.LIKE_UNUSED_SYMBOL,new ReplaceWithLambdaFix());
          }
        }
      }
    }
  }
;
}
