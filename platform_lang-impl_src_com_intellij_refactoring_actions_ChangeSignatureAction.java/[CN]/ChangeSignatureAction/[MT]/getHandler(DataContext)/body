{
  Language language=LangDataKeys.LANGUAGE.getData(dataContext);
  if (language == null) {
    PsiElement psiElement=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (psiElement != null) {
      language=psiElement.getLanguage();
    }
  }
  if (language != null) {
    return new RefactoringActionHandler(){
      @Override public void invoke(      @NotNull Project project,      Editor editor,      PsiFile file,      DataContext dataContext){
        editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        final PsiElement targetMember=findTargetMember(file,editor);
        if (targetMember == null) {
          final ChangeSignatureHandler handler=getChangeSignatureHandler(file.getLanguage());
          if (handler != null) {
            final String notFoundMessage=handler.getTargetNotFoundMessage();
            if (notFoundMessage != null) {
              CommonRefactoringUtil.showErrorHint(project,editor,notFoundMessage,ChangeSignatureHandler.REFACTORING_NAME,null);
            }
          }
          return;
        }
        final ChangeSignatureHandler handler=getChangeSignatureHandler(targetMember.getLanguage());
        if (handler == null)         return;
        handler.invoke(project,new PsiElement[]{targetMember},dataContext);
      }
      @Override public void invoke(      @NotNull Project project,      @NotNull PsiElement[] elements,      DataContext dataContext){
        if (elements.length != 1)         return;
        final PsiElement targetMember=findTargetMember(elements[0]);
        if (targetMember == null)         return;
        final ChangeSignatureHandler handler=getChangeSignatureHandler(targetMember.getLanguage());
        if (handler == null)         return;
        handler.invoke(project,new PsiElement[]{targetMember},dataContext);
      }
    }
;
  }
  return null;
}
