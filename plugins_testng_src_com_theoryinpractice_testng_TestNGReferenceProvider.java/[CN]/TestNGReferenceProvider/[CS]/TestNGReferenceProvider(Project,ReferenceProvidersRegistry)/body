{
  registry.registerReferenceProvider(new TestAnnotationFilter("dependsOnMethods"),PsiLiteralExpression.class,new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final MatchingContext matchingContext){
      return new MethodReference[]{new MethodReference((PsiLiteralExpression)element)};
    }
  }
);
  registry.registerReferenceProvider(new TestAnnotationFilter("dataProvider"),PsiLiteralExpression.class,new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final MatchingContext matchingContext){
      return new DataProviderReference[]{new DataProviderReference((PsiLiteralExpression)element)};
    }
  }
);
  registry.registerReferenceProvider(new TestAnnotationFilter("groups"),PsiLiteralExpression.class,new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final MatchingContext matchingContext){
      return new GroupReference[]{new GroupReference(project,(PsiLiteralExpression)element)};
    }
  }
);
  registry.registerReferenceProvider(new TestAnnotationFilter("dependsOnGroups"),PsiLiteralExpression.class,new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final MatchingContext matchingContext){
      return new GroupReference[]{new GroupReference(project,(PsiLiteralExpression)element)};
    }
  }
);
}
