{
  Editor editor=lookup.getEditor();
  FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EDITING_COMPLETION_FINISH_BY_DOT_ETC);
  CompletionProcess process=CompletionService.getCompletionService().getCurrentCompletion();
  SelectionModel sm=editor.getSelectionModel();
  final boolean smartUndo=!sm.hasSelection() && !sm.hasBlockSelection() && process != null && process.isAutopopupCompletion();
  final Runnable restore=CodeCompletionHandlerBase.rememberDocumentState(editor);
  final ScrollingModelEx scrollingModel=(ScrollingModelEx)editor.getScrollingModel();
  scrollingModel.accumulateViewportChanges();
  try {
    final List<Pair<DocumentEvent,String>> events=new ArrayList<Pair<DocumentEvent,String>>();
    final DocumentAdapter listener=new DocumentAdapter(){
      @Override public void documentChanged(      DocumentEvent e){
        events.add(Pair.create(e,DebugUtil.currentStackTrace()));
      }
    }
;
    editor.getDocument().addDocumentListener(listener);
    if (smartUndo) {
      CommandProcessor.getInstance().executeCommand(editor.getProject(),new Runnable(){
        @Override public void run(){
          lookup.performGuardedChange(baseChange);
        }
      }
,null,"Just insert the completion char");
    }
    editor.getDocument().removeDocumentListener(listener);
    CommandProcessor.getInstance().executeCommand(editor.getProject(),new Runnable(){
      @Override public void run(){
        if (smartUndo) {
          AccessToken token=WriteAction.start();
          try {
            lookup.performGuardedChange(restore,events.toString());
          }
  finally {
            token.finish();
          }
        }
        lookup.finishLookup(charTyped);
      }
    }
,null,"Undo inserting the completion char and select the item");
  }
  finally {
    scrollingModel.flushViewportChanges();
  }
}
