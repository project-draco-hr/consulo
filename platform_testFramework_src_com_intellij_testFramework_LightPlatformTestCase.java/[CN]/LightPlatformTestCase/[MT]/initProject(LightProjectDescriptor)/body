{
  ourProjectDescriptor=descriptor;
  final File projectFile=FileUtil.createTempFile("lighttemp",ProjectFileType.DOT_DEFAULT_EXTENSION);
  new WriteCommandAction.Simple(null){
    @Override protected void run() throws Throwable {
      if (ourProject != null) {
        closeAndDeleteProject();
      }
 else {
        cleanPersistedVFSContent();
      }
      LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectFile);
      ByteArrayOutputStream buffer=new ByteArrayOutputStream();
      new Throwable(projectFile.getPath()).printStackTrace(new PrintStream(buffer));
      ourProject=PlatformTestCase.createProject(projectFile,LIGHT_PROJECT_MARK + buffer.toString());
      if (!ourHaveShutdownHook) {
        ourHaveShutdownHook=true;
        registerShutdownHook();
      }
      ourPsiManager=null;
      ourModule=createMainModule(descriptor.getModuleType());
      final VirtualFile dummyRoot=VirtualFileManager.getInstance().findFileByUrl("temp:///");
      dummyRoot.refresh(false,false);
      try {
        ourSourceRoot=dummyRoot.createChildDirectory(this,"src");
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      FileBasedIndex.getInstance().registerIndexableSet(new IndexableFileSet(){
        @Override public boolean isInSet(        @NotNull final VirtualFile file){
          return ourSourceRoot != null && file.getFileSystem() == ourSourceRoot.getFileSystem() && ourProject != null && ourProject.isOpen();
        }
        @Override public void iterateIndexableFilesIn(        @NotNull final VirtualFile file,        @NotNull final ContentIterator iterator){
          if (file.isDirectory()) {
            for (            VirtualFile child : file.getChildren()) {
              iterateIndexableFilesIn(child,iterator);
            }
          }
 else {
            iterator.processFile(file);
          }
        }
      }
,null);
      final ModuleRootManager rootManager=ModuleRootManager.getInstance(ourModule);
      final ModifiableRootModel rootModel=rootManager.getModifiableModel();
      if (descriptor.getSdk() != null) {
        rootModel.setSdk(descriptor.getSdk());
      }
      final ContentEntry contentEntry=rootModel.addContentEntry(ourSourceRoot);
      contentEntry.addSourceFolder(ourSourceRoot,false);
      descriptor.configureModule(ourModule,rootModel,contentEntry);
      rootModel.commit();
      final MessageBusConnection connection=ourProject.getMessageBus().connect();
      connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
        @Override public void beforeRootsChange(        ModuleRootEvent event){
          if (!event.isCausedByFileTypesChange()) {
          }
        }
      }
);
      connection.subscribe(ProjectTopics.MODULES,new ModuleAdapter(){
        @Override public void moduleAdded(        Project project,        Module module){
          fail("Adding modules is not permitted in LightIdeaTestCase.");
        }
      }
);
      final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(ourProject);
      startupManager.runStartupActivities();
      startupManager.startCacheUpdate();
    }
  }
.execute().throwException();
  ((VirtualFilePointerManagerImpl)VirtualFilePointerManager.getInstance()).storePointers();
}
