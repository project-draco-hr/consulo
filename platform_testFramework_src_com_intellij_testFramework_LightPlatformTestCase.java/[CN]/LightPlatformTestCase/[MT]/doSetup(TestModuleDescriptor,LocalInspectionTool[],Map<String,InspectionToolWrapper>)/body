{
  assertNull("Previous test " + ourTestCase + " hasn't called tearDown(). Probably overridden without super call.",ourTestCase);
  IdeaLogger.ourErrorsOccurred=null;
  PsiTestExtensionUtil.registerExtensionPointIfNeed(ApplicationLoadListener.EP_NAME,ApplicationLoadListener.class);
  if (ourProject == null || !ourProjectDescriptor.equals(descriptor)) {
    initProject(descriptor);
  }
  ((ProjectImpl)ourProject).setTemporarilyDisposed(false);
  ProjectManagerEx projectManagerEx=ProjectManagerEx.getInstanceEx();
  projectManagerEx.openTestProject(ourProject);
  clearUncommittedDocuments(getProject());
  for (  LocalInspectionTool tool : localInspectionTools) {
    enableInspectionTool(availableInspectionTools,new LocalInspectionToolWrapper(tool));
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(PROFILE){
    @Override @NotNull public InspectionToolWrapper[] getInspectionTools(    PsiElement element){
      final Collection<InspectionToolWrapper> tools=availableInspectionTools.values();
      return tools.toArray(new InspectionToolWrapper[tools.size()]);
    }
    @NotNull @Override public List<Tools> getAllEnabledInspectionTools(    Project project){
      List<Tools> result=new ArrayList<Tools>();
      for (      InspectionToolWrapper entry : getInspectionTools(null)) {
        result.add(new ToolsImpl(entry,entry.getDefaultLevel(),true));
      }
      return result;
    }
    @Override public boolean isToolEnabled(    HighlightDisplayKey key,    PsiElement element){
      return key != null && availableInspectionTools.containsKey(key.toString());
    }
    @Override public HighlightDisplayLevel getErrorLevel(    @NotNull HighlightDisplayKey key,    PsiElement element){
      InspectionToolWrapper localInspectionTool=availableInspectionTools.get(key.toString());
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    @Override public InspectionToolWrapper getInspectionTool(    @NotNull String shortName,    @NotNull PsiElement element){
      if (availableInspectionTools.containsKey(shortName)) {
        return availableInspectionTools.get(shortName);
      }
      return null;
    }
    @Override public InspectionToolWrapper getToolById(    @NotNull String id,    @NotNull PsiElement element){
      if (availableInspectionTools.containsKey(id)) {
        return availableInspectionTools.get(id);
      }
      return null;
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  inspectionProfileManager.setRootProfile(profile.getName());
  InspectionProjectProfileManager.getInstance(getProject()).updateProfile(profile);
  InspectionProjectProfileManager.getInstance(getProject()).setProjectProfile(profile.getName());
  assertFalse(getPsiManager().isDisposed());
  Boolean passed=null;
  try {
    passed=StartupManagerEx.getInstanceEx(getProject()).startupActivityPassed();
  }
 catch (  Exception e) {
  }
  assertTrue("open: " + getProject().isOpen() + "; disposed:"+ getProject().isDisposed()+ "; startup passed:"+ passed+ "; all open projects: "+ Arrays.asList(ProjectManager.getInstance().getOpenProjects()),getProject().isInitialized());
  CodeStyleSettingsManager.getInstance(getProject()).setTemporarySettings(new CodeStyleSettings());
  final FileDocumentManager manager=FileDocumentManager.getInstance();
  if (manager instanceof FileDocumentManagerImpl) {
    Document[] unsavedDocuments=manager.getUnsavedDocuments();
    manager.saveAllDocuments();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        ((FileDocumentManagerImpl)manager).dropAllUnsavedDocuments();
      }
    }
);
    assertEmpty(unsavedDocuments);
  }
}
