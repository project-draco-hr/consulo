{
  instantiate();
  if (element instanceof XmlComment) {
    return new AntCommentImpl(parent,element);
  }
  if (element instanceof XmlEntityRef) {
    return new AntEntityRefImpl(parent,element);
  }
  if (!(element instanceof XmlTag))   return null;
  final XmlTag tag=(XmlTag)element;
  AntTypeDefinition typeDef=null;
  String typeName=tag.getName();
  if (typeName.equals("javadoc2")) {
    typeName="javadoc";
  }
  final AntTypeId id=new AntTypeId(typeName);
  final AntFile file=parent.getAntFile();
  if (parent instanceof AntStructuredElement) {
    final AntTypeDefinition parentDef=((AntStructuredElement)parent).getTypeDefinition();
    if (parentDef != null) {
      final String className=parentDef.getNestedClassName(id);
      if (className != null) {
        typeDef=file.getBaseTypeDefinition(className);
      }
    }
  }
  if (typeDef == null) {
    for (    AntTypeDefinition def : file.getBaseTypeDefinitions()) {
      if (id.equals(def.getTypeId())) {
        typeDef=def;
        break;
      }
    }
  }
  boolean importedType=false;
  if (typeDef == null) {
    final AntProject project=parent.getAntProject();
    for (    final AntFile imported : project.getImportedFiles()) {
      final AntProject importedProject=imported.getAntProject();
      if (!project.equals(importedProject)) {
        importedProject.getChildren();
        for (        AntTypeDefinition def : imported.getBaseTypeDefinitions()) {
          if (id.equals(def.getTypeId())) {
            importedType=true;
            typeDef=def;
            break;
          }
        }
      }
    }
  }
  AntStructuredElementImpl result=null;
  if (typeDef != null) {
    AntElementCreator antElementCreator=ourAntTypeToKnownAntElementCreatorMap.get(typeDef.getClassName());
    if (antElementCreator != null) {
      result=(AntStructuredElementImpl)antElementCreator.create(parent,tag);
    }
 else     if (typeDef.isTask()) {
      result=new AntTaskImpl(parent,tag,typeDef);
    }
  }
  if (result == null) {
    result=new AntStructuredElementImpl(parent,tag,typeDef);
  }
  result.setImportedTypeDefinition(importedType);
  return result;
}
