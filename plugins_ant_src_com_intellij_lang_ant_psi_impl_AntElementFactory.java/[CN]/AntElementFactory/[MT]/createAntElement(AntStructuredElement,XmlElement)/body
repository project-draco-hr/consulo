{
  instantiate();
  if (element instanceof XmlComment) {
    return new AntCommentImpl(parent,element);
  }
  if (element instanceof XmlEntityRef) {
    return new AntEntityRefImpl(parent,element);
  }
  if (!(element instanceof XmlTag))   return null;
  final XmlTag tag=(XmlTag)element;
  AntTypeDefinition typeDef=null;
  String typeName=tag.getLocalName();
  final String nsPrefix=tag.getNamespacePrefix();
  if (nsPrefix.length() == 0) {
    if (typeName.equals(AntFileImpl.JAVADOC2_TAG)) {
      typeName=AntFileImpl.JAVADOC2_TAG;
    }
    if (typeName.equals(AntFileImpl.UNWAR_TAG) || typeName.equals(AntFileImpl.UNJAR_TAG)) {
      typeName=AntFileImpl.UNZIP_TAG;
    }
  }
  final AntTypeId id=new AntTypeId(typeName,nsPrefix);
  final AntFile file=parent.getAntFile();
  final AntTypeDefinition parentDef=parent.getTypeDefinition();
  if (parentDef != null) {
    final String className=parentDef.getNestedClassName(id);
    if (className != null && file != null) {
      typeDef=file.getBaseTypeDefinition(className);
    }
  }
  if (file != null) {
    if (typeDef == null) {
      typeDef=file.getBaseTypeDefinition(AntMacroDefImpl.createMacroClassName(typeName));
    }
    if (typeDef == null) {
      typeDef=file.getBaseTypeDefinition(AntPresetDefImpl.createPresetDefClassName(typeName));
    }
    if (typeDef == null) {
      final AntProject project=file.getAntProject();
      final AntTypeDefinition projectDef=project != null ? project.getTypeDefinition() : null;
      for (      AntTypeDefinition def : file.getBaseTypeDefinitions()) {
        if (id.equals(def.getTypeId())) {
          if (projectDef != null) {
            final boolean isRegisteredWithinProject=def.getClassName().equals(projectDef.getNestedClassName(def.getTypeId()));
            if (!isRegisteredWithinProject) {
              continue;
            }
          }
          typeDef=def;
          break;
        }
      }
    }
  }
  boolean importedType=false;
  if (typeDef == null) {
    final AntProject project=parent.getAntProject();
    for (    final AntFile imported : project.getImportedFiles()) {
      final AntProject importedProject=imported.getAntProject();
      if (!project.equals(importedProject)) {
        importedProject.getChildren();
        for (        AntTypeDefinition def : imported.getBaseTypeDefinitions()) {
          if (id.equals(def.getTypeId())) {
            importedType=true;
            typeDef=def;
            break;
          }
        }
      }
    }
  }
  AntStructuredElementImpl result=null;
  if (typeDef != null) {
    final AntElementCreator antElementCreator=ourAntTypeToKnownAntElementCreatorMap.get(typeDef.getClassName());
    if (antElementCreator != null) {
      result=(AntStructuredElementImpl)antElementCreator.create(parent,tag);
    }
 else     if (typeDef.isTask()) {
      result=new AntTaskImpl(parent,tag,typeDef);
    }
  }
  if (result == null) {
    result=(!AntFileImpl.FORMAT_TAG.equals(tag.getName())) ? new AntStructuredElementImpl(parent,tag,typeDef) : new AntStructuredElementImpl(parent,tag,typeDef,AntFileImpl.PROPERTY);
  }
  result.setImportedTypeDefinition(importedType);
  return result;
}
