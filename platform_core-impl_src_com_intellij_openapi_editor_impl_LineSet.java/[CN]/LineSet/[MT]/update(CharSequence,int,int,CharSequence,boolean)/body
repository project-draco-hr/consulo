{
  if (myLength == 0) {
    return createLineSet(replacement,!wholeTextReplaced);
  }
  int startOffset=_start;
  if (replacement.length() > 0 && replacement.charAt(0) == '\n' && startOffset > 0 && prevText.charAt(startOffset - 1) == '\r') {
    startOffset--;
  }
  int startLine=findLineIndex(startOffset);
  startOffset=getLineStart(startLine);
  int endOffset=_end;
  if (replacement.length() > 0 && replacement.charAt(replacement.length() - 1) == '\r' && endOffset < prevText.length() && prevText.charAt(endOffset) == '\n') {
    endOffset++;
  }
  int endLine=findLineIndex(endOffset);
  endOffset=getLineEnd(endLine);
  if (!isLastEmptyLine(endLine))   endLine++;
  replacement=new MergingCharSequence(new MergingCharSequence(prevText.subSequence(startOffset,_start),replacement),prevText.subSequence(_end,endOffset));
  LineSet patch=createLineSet(replacement,true);
  LineSet applied=applyPatch(startOffset,endOffset,startLine,endLine,patch);
  if (doTest) {
    final MergingCharSequence newText=new MergingCharSequence(new MergingCharSequence(prevText.subSequence(0,startOffset),replacement),prevText.subSequence(endOffset,prevText.length()));
    applied.checkEquals(createLineSet(newText));
  }
  return wholeTextReplaced ? applied.clearModificationFlags() : applied;
}
