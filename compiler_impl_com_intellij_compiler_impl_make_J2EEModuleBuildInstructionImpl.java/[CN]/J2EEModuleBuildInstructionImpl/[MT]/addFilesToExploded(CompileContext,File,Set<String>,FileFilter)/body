{
  final File target=MakeUtil.canonicalRelativePath(outputDir,getOutputRelativePath());
  final Ref<Boolean> externalDependencyFound=new Ref<Boolean>(Boolean.FALSE);
  final BuildRecipe buildRecipe=getChildInstructions(context);
  try {
    File fromFile=new File(ModuleBuilder.getOrCreateExplodedDir(myBuildProperties.getModule()));
    boolean builtAlready=ModuleBuilder.willBuildExploded(myBuildProperties);
    if (!builtAlready) {
      ModuleBuilder.getInstance(getModule()).buildExploded(fromFile,context,new ArrayList<File>());
    }
    MakeUtil.getInstance().copyFile(fromFile,target,context,writtenPaths,fileFilter);
    buildRecipe.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
      public boolean visitInstruction(      BuildInstruction instruction) throws Exception {
        if (instruction.isExternalDependencyInstruction()) {
          instruction.addFilesToExploded(context,target,writtenPaths,fileFilter);
          externalDependencyFound.set(Boolean.TRUE);
        }
        return true;
      }
    }
,false);
    if (externalDependencyFound.get().booleanValue()) {
      MakeUtilImpl.writeManifest(buildRecipe,context,target);
    }
  }
 catch (  IOException e) {
    throw e;
  }
catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
  }
}
