{
  DataContext dataContext=e.getDataContext();
  final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  final Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final TextRange selection=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  PsiElement current=file.findElementAt(selection.getStartOffset());
  int startOffset=selection.getStartOffset();
  while (current instanceof PsiWhiteSpace) {
    current=current.getNextSibling();
    if (current == null)     break;
    startOffset=current.getTextRange().getStartOffset();
  }
  if (startOffset >= selection.getEndOffset())   startOffset=selection.getStartOffset();
  final PsiElement[] psiElements=PsiTreeUtil.collectElements(file,new PsiElementFilter(){
    public boolean isAccepted(    PsiElement element){
      return selection.contains(element.getTextRange()) && element.getReferences().length > 0;
    }
  }
);
  final Document document=EditorFactory.getInstance().createDocument(editor.getDocument().getText().substring(startOffset,selection.getEndOffset()));
  final int offsetDelta=startOffset;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          Map<RangeMarker,String> rangeToText=new HashMap<RangeMarker,String>();
          for (          PsiElement element : psiElements) {
            for (            PsiReference reference : element.getReferences()) {
              if (!(reference instanceof PsiQualifiedReference) || ((PsiQualifiedReference)reference).getQualifier() == null) {
                String canonicalText=reference.getCanonicalText();
                TextRange referenceRange=reference.getRangeInElement();
                TextRange range=element.getTextRange().cutOut(referenceRange).shiftRight(-offsetDelta);
                final String oldText=document.getText(range);
                int pos=canonicalText.indexOf('<');
                if (pos > 0 && !oldText.contains("<")) {
                  canonicalText=canonicalText.substring(0,pos);
                }
                if (!canonicalText.equals(oldText)) {
                  rangeToText.put(document.createRangeMarker(range),canonicalText);
                }
              }
            }
          }
          for (          Map.Entry<RangeMarker,String> entry : rangeToText.entrySet()) {
            document.replaceString(entry.getKey().getStartOffset(),entry.getKey().getEndOffset(),entry.getValue());
          }
        }
      }
);
    }
  }
,null,null);
  final TemplateImpl template=new TemplateImpl(TemplateListPanel.ABBREVIATION,document.getText(),TemplateSettings.USER_GROUP_NAME);
  for (  TemplateContextType contextType : Extensions.getExtensions(TemplateContextType.EP_NAME)) {
    template.getTemplateContext().setEnabled(contextType,contextType.isInContext(file,startOffset));
  }
  final LiveTemplatesConfigurable configurable=new LiveTemplatesConfigurable();
  ShowSettingsUtil.getInstance().editConfigurable(project,configurable,new Runnable(){
    @Override public void run(){
      configurable.getTemplateListPanel().addTemplate(template);
    }
  }
);
}
