{
  DataContext dataContext=e.getDataContext();
  final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  final Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final TextRange selection=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  PsiElement current=file.findElementAt(selection.getStartOffset());
  int startOffset=selection.getStartOffset();
  while (current instanceof PsiWhiteSpace) {
    current=current.getNextSibling();
    if (current == null)     break;
    startOffset=current.getTextRange().getStartOffset();
  }
  if (startOffset >= selection.getEndOffset())   startOffset=selection.getStartOffset();
  final PsiElement[] psiElements=PsiTreeUtil.collectElements(file,new PsiElementFilter(){
    @Override public boolean isAccepted(    PsiElement element){
      return selection.contains(element.getTextRange()) && element.getReferences().length > 0;
    }
  }
);
  final Document document=EditorFactory.getInstance().createDocument(editor.getDocument().getText().substring(startOffset,selection.getEndOffset()));
  final int offsetDelta=startOffset;
  new WriteCommandAction.Simple(project,(String)null){
    @Override protected void run() throws Throwable {
      Map<RangeMarker,String> rangeToText=new HashMap<RangeMarker,String>();
      for (      PsiElement element : psiElements) {
        for (        PsiReference reference : element.getReferences()) {
          if (!(reference instanceof PsiQualifiedReference) || ((PsiQualifiedReference)reference).getQualifier() == null) {
            String canonicalText=reference.getCanonicalText();
            TextRange referenceRange=reference.getRangeInElement();
            final TextRange elementTextRange=element.getTextRange();
            LOG.assertTrue(elementTextRange != null,elementTextRange);
            final TextRange range=elementTextRange.cutOut(referenceRange).shiftRight(-offsetDelta);
            final String oldText=document.getText(range);
            int pos=canonicalText.indexOf('<');
            if (pos > 0 && !oldText.contains("<")) {
              canonicalText=canonicalText.substring(0,pos);
            }
            if (!canonicalText.equals(oldText)) {
              rangeToText.put(document.createRangeMarker(range),canonicalText);
            }
          }
        }
      }
      for (      Map.Entry<RangeMarker,String> entry : rangeToText.entrySet()) {
        document.replaceString(entry.getKey().getStartOffset(),entry.getKey().getEndOffset(),entry.getValue());
      }
    }
  }
.execute();
  final TemplateImpl template=new TemplateImpl(TemplateListPanel.ABBREVIATION,document.getText(),TemplateSettings.USER_GROUP_NAME);
  template.setToReformat(true);
  PsiFile copy;
  AccessToken token=WriteAction.start();
  try {
    copy=SurroundWithTemplateHandler.insertDummyIdentifier(editor,file);
  }
  finally {
    token.finish();
  }
  Set<TemplateContextType> applicable=TemplateManagerImpl.getApplicableContextTypes(copy,startOffset);
  for (  TemplateContextType contextType : TemplateManagerImpl.getAllContextTypes()) {
    template.getTemplateContext().setEnabled(contextType,applicable.contains(contextType));
  }
  final LiveTemplatesConfigurable configurable=new LiveTemplatesConfigurable();
  ShowSettingsUtil.getInstance().editConfigurable(project,configurable,new Runnable(){
    @Override public void run(){
      configurable.getTemplateListPanel().addTemplate(template);
    }
  }
);
}
