{
  if (things.isEmpty())   return true;
  final ProgressIndicator wrapper=progress == null ? new ProgressIndicatorBase() : new SensitiveProgressWrapper(progress);
  if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= 2) {
    final AtomicBoolean result=new AtomicBoolean(true);
    ProgressManager.getInstance().executeProcessUnderProgress(new Runnable(){
      @Override public void run(){
        for (int i=0; i < things.size(); i++) {
          T thing=things.get(i);
          if (!thingProcessor.process(thing)) {
            result.set(false);
            break;
          }
        }
      }
    }
,wrapper);
    return result.get();
  }
  return invokeConcurrentlyForAll(things,runInReadAction,thingProcessor,wrapper);
}
