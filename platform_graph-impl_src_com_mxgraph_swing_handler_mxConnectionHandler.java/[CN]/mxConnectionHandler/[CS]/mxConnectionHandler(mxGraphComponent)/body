{
  this.graphComponent=graphComponent;
  graphComponent.addListener(mxEvent.AFTER_PAINT,new mxIEventListener(){
    public void invoke(    Object sender,    mxEventObject evt){
      Graphics g=(Graphics)evt.getProperty("g");
      paint(g);
    }
  }
);
  connectPreview=createConnectPreview();
  mxGraphControl graphControl=graphComponent.getGraphControl();
  graphControl.addMouseListener(this);
  graphControl.addMouseMotionListener(this);
  addGraphListeners(graphComponent.getGraph());
  graphComponent.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals("graph")) {
        removeGraphListeners((mxGraph)evt.getOldValue());
        addGraphListeners((mxGraph)evt.getNewValue());
      }
    }
  }
);
  marker=new mxCellMarker(graphComponent){
    /** 
 */
    private static final long serialVersionUID=103433247310526381L;
    protected Object getCell(    MouseEvent e){
      Object cell=super.getCell(e);
      if (isConnecting()) {
        if (source != null) {
          error=validateConnection(source.getCell(),cell);
          if (error != null && error.length() == 0) {
            cell=null;
            if (createTarget) {
              error=null;
            }
          }
        }
      }
 else       if (!isValidSource(cell)) {
        cell=null;
      }
      return cell;
    }
    protected boolean isValidState(    mxCellState state){
      if (isConnecting()) {
        return error == null;
      }
 else {
        return super.isValidState(state);
      }
    }
    protected Color getMarkerColor(    MouseEvent e,    mxCellState state,    boolean isValid){
      return (isHighlighting() || isConnecting()) ? super.getMarkerColor(e,state,isValid) : null;
    }
    protected boolean intersects(    mxCellState state,    MouseEvent e){
      if (!isHighlighting() || isConnecting()) {
        return true;
      }
      return super.intersects(state,e);
    }
  }
;
  marker.setHotspotEnabled(true);
}
