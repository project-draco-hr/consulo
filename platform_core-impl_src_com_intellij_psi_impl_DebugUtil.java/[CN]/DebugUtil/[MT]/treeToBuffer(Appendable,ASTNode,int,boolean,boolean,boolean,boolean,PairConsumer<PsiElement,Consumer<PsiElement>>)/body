{
  if (skipWhiteSpaces && root.getElementType() == TokenType.WHITE_SPACE)   return;
  StringUtil.repeatSymbol(buffer,' ',indent);
  try {
    PsiElement psiElement=null;
    if (root instanceof CompositeElement) {
      if (usePsi) {
        psiElement=root.getPsi();
        if (psiElement != null) {
          buffer.append(psiElement.toString());
        }
 else {
          buffer.append(root.getElementType().toString());
        }
      }
 else {
        buffer.append(root.toString());
      }
    }
 else {
      final String text=fixWhiteSpaces(root.getText());
      buffer.append(root.toString()).append("('").append(text).append("')");
    }
    if (showRanges)     buffer.append(root.getTextRange().toString());
    buffer.append("\n");
    if (root instanceof CompositeElement) {
      ASTNode child=root.getFirstChildNode();
      if (child == null) {
        StringUtil.repeatSymbol(buffer,' ',indent + 2);
        buffer.append("<empty list>\n");
      }
 else {
        while (child != null) {
          treeToBuffer(buffer,child,indent + 2,skipWhiteSpaces,showChildrenRanges,showChildrenRanges,usePsi,extra);
          child=child.getTreeNext();
        }
      }
    }
    if (psiElement != null && extra != null) {
      extra.consume(psiElement,new Consumer<PsiElement>(){
        @Override public void consume(        PsiElement element){
          treeToBuffer(buffer,element.getNode(),indent + 2,skipWhiteSpaces,showChildrenRanges,showChildrenRanges,usePsi,null);
        }
      }
);
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
