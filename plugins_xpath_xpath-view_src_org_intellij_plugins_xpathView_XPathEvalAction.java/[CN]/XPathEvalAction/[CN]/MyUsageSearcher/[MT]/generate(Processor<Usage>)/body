{
  Runnable runnable=new Runnable(){
    @SuppressWarnings({"unchecked"}) public void run(){
      final List<?> list;
      if (myResult.size() == 0) {
        try {
          list=(List<?>)myXPath.selectNodes(myContextNode);
        }
 catch (        JaxenException e) {
          LOG.debug(e);
          Messages.showMessageDialog(myContextNode.getProject(),e.getMessage(),"XPath error",Messages.getErrorIcon());
          return;
        }
      }
 else {
        list=myResult;
      }
      final int size=list.size();
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      indicator.setText("Collecting matches...");
      Collections.sort(list,new Comparator(){
        public int compare(        Object o1,        Object o2){
          indicator.checkCanceled();
          if (o1 instanceof PsiElement && o2 instanceof PsiElement) {
            return ((PsiElement)o1).getTextRange().getStartOffset() - ((PsiElement)o2).getTextRange().getStartOffset();
          }
 else {
            return String.valueOf(o1).compareTo(String.valueOf(o2));
          }
        }
      }
);
      for (int i=0; i < size; i++) {
        indicator.checkCanceled();
        Object o=list.get(i);
        if (o instanceof PsiElement) {
          final PsiElement element=((PsiElement)o);
          processor.process(new UsageInfo2UsageAdapter(new UsageInfo(element)));
          indicator.setText2(element.getContainingFile().getName());
        }
        indicator.setFraction(i / (double)size);
      }
      list.clear();
    }
  }
;
  ApplicationManager.getApplication().runReadAction(runnable);
}
