{
  myWizardContext=context;
  mySequence=sequence;
  Messages.installHyperlinkSupport(myDescriptionPane);
  myFormatPanel=new ProjectFormatPanel();
  myNamePathComponent=initNamePathComponent(context);
  if (context.isCreatingNewProject()) {
    mySettingsPanel.add(myNamePathComponent,BorderLayout.NORTH);
    addExpertPanel(myModulePanel);
  }
 else {
    mySettingsPanel.add(myModulePanel,BorderLayout.NORTH);
  }
  bindModuleSettings();
  myExpertDecorator=new HideableDecorator(myExpertPlaceholder,"Mor&e Settings",false);
  myExpertPanel.setBorder(IdeBorderFactory.createEmptyBorder(0,IdeBorderFactory.TITLED_BORDER_INDENT,5,0));
  myExpertDecorator.setContentComponent(myExpertPanel);
  SimpleTreeStructure.Impl structure=new SimpleTreeStructure.Impl(new SimpleNode(){
    @Override public SimpleNode[] getChildren(){
      return ContainerUtil.map2Array(map.entrySet(),NO_CHILDREN,new Function<Map.Entry<String,Collection<ProjectTemplate>>,SimpleNode>(){
        @Override public SimpleNode fun(        Map.Entry<String,Collection<ProjectTemplate>> entry){
          return new GroupNode(entry.getKey(),entry.getValue());
        }
      }
);
    }
  }
);
  buildMatcher();
  myFilter=new ElementFilter.Active.Impl<SimpleNode>(){
    @Override public boolean shouldBeShowing(    SimpleNode template){
      return template instanceof TemplateNode && matches((TemplateNode)template);
    }
  }
;
  myTreeBuilder=new FilteringTreeBuilder(myTemplatesTree,myFilter,structure,new Comparator<NodeDescriptor>(){
    @Override public int compare(    NodeDescriptor o1,    NodeDescriptor o2){
      if (o1 instanceof FilteringTreeStructure.FilteringNode) {
        if (((FilteringTreeStructure.FilteringNode)o1).getDelegate() instanceof GroupNode) {
          String name=((GroupNode)((FilteringTreeStructure.FilteringNode)o1).getDelegate()).getName();
        }
      }
      return AlphaComparator.INSTANCE.compare(o1,o2);
    }
  }
){
    @Override public boolean isAutoExpandNode(    NodeDescriptor nodeDescriptor){
      return myMatchers != null && myMatchers.length > 0;
    }
    @Override public boolean isToEnsureSelectionOnFocusGained(){
      return false;
    }
  }
;
  myTemplatesTree.setRootVisible(false);
  myTemplatesTree.setCellRenderer(new ColoredTreeCellRenderer(){
    @Override public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      SimpleNode node=getSimpleNode(value);
      if (node != null) {
        String name=node.getName();
        if (name != null) {
          append(name);
        }
      }
      if (node instanceof GroupNode) {
      }
    }
  }
);
  myTemplatesTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      ProjectTemplate template=getSelectedTemplate();
      myModuleBuilder=template == null ? null : template.createModuleBuilder();
      setupPanels(template);
      mySequence.setType(myModuleBuilder == null ? null : myModuleBuilder.getBuilderId());
      myWizardContext.requestWizardButtonsUpdate();
    }
  }
);
  mySearchField.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      doFilter();
    }
  }
);
  myDescriptionPanel.setVisible(false);
  if (myWizardContext.isCreatingNewProject()) {
    addField("Project \u001bformat:",myFormatPanel.getStorageFormatComboBox(),myModulePanel);
  }
  mySplitter=new JBSplitter(false,0.3f);
  mySplitter.setSplitterProportionKey("select.template.proportion");
  mySplitter.setFirstComponent(myLeftPanel);
  mySplitter.setSecondComponent(myRightPanel);
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      InputEvent event=e.getInputEvent();
      if (event instanceof KeyEvent) {
        int row=myTemplatesTree.getMaxSelectionRow();
switch (((KeyEvent)event).getKeyCode()) {
case KeyEvent.VK_UP:
          myTemplatesTree.setSelectionRow(row == 0 ? myTemplatesTree.getRowCount() - 1 : row - 1);
        break;
case KeyEvent.VK_DOWN:
      myTemplatesTree.setSelectionRow(row < myTemplatesTree.getRowCount() - 1 ? row + 1 : 0);
    break;
}
}
}
}
.registerCustomShortcutSet(new CustomShortcutSet(KeyEvent.VK_UP,KeyEvent.VK_DOWN),mySearchField);
SwingUtilities.invokeLater(new Runnable(){
@Override public void run(){
TreeState state=SelectTemplateSettings.getInstance().getTreeState();
if (state != null && !ApplicationManager.getApplication().isUnitTestMode()) {
state.applyTo(myTemplatesTree,(DefaultMutableTreeNode)myTemplatesTree.getModel().getRoot());
}
 else {
myTreeBuilder.expandAll(new Runnable(){
  @Override public void run(){
    myTemplatesTree.setSelectionRow(1);
  }
}
);
}
}
}
);
}
