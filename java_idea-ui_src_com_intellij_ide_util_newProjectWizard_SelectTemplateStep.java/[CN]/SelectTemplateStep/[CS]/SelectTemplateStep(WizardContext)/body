{
  myContext=context;
  Messages.installHyperlinkSupport(myDescriptionPane);
  ProjectTemplatesFactory[] factories=ProjectTemplatesFactory.EP_NAME.getExtensions();
  final MultiMap<String,ProjectTemplatesFactory> groups=new MultiMap<String,ProjectTemplatesFactory>();
  for (  ProjectTemplatesFactory factory : factories) {
    for (    String string : factory.getGroups()) {
      groups.putValue(string,factory);
    }
  }
  SimpleTreeStructure.Impl structure=new SimpleTreeStructure.Impl(new SimpleNode(){
    @Override public SimpleNode[] getChildren(){
      return ContainerUtil.map2Array(groups.entrySet(),NO_CHILDREN,new Function<Map.Entry<String,Collection<ProjectTemplatesFactory>>,SimpleNode>(){
        @Override public SimpleNode fun(        Map.Entry<String,Collection<ProjectTemplatesFactory>> entry){
          return new GroupNode(entry.getKey(),entry.getValue());
        }
      }
);
    }
  }
);
  buildMatcher();
  myFilter=new ElementFilter.Active.Impl<SimpleNode>(){
    @Override public boolean shouldBeShowing(    SimpleNode template){
      return matches(template);
    }
  }
;
  myBuilder=new FilteringTreeBuilder(myTemplatesTree,myFilter,structure,new Comparator<NodeDescriptor>(){
    @Override public int compare(    NodeDescriptor o1,    NodeDescriptor o2){
      if (o1 instanceof FilteringTreeStructure.FilteringNode) {
        if (((FilteringTreeStructure.FilteringNode)o1).getDelegate() instanceof GroupNode) {
          String name=((GroupNode)((FilteringTreeStructure.FilteringNode)o1).getDelegate()).getName();
          if (name.equals(EmptyModuleTemplatesFactory.GROUP_NAME)) {
          }
 else           if (name.equals(ArchivedTemplatesFactory.CUSTOM_GROUP)) {
          }
        }
      }
      return AlphaComparator.INSTANCE.compare(o1,o2);
    }
  }
){
    @Override public boolean isAutoExpandNode(    NodeDescriptor nodeDescriptor){
      return false;
    }
    @Override public boolean isToEnsureSelectionOnFocusGained(){
      return false;
    }
  }
;
  myTemplatesTree.setRootVisible(false);
  myTemplatesTree.setCellRenderer(new ColoredTreeCellRenderer(){
    @Override public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      SimpleNode node=getSimpleNode(value);
      if (node != null) {
        String name=node.getName();
        if (name != null) {
          append(name);
        }
      }
      if (node instanceof GroupNode) {
      }
    }
  }
);
  myTemplatesTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (mySettingsPanel.getComponentCount() > 0) {
        mySettingsPanel.remove(0);
      }
      ProjectTemplate template=getSelectedTemplate();
      if (template != null) {
        JComponent settingsPanel=template.getSettingsPanel();
        if (settingsPanel != null) {
          mySettingsPanel.add(settingsPanel,BorderLayout.NORTH);
        }
        mySettingsPanel.setVisible(settingsPanel != null);
        String description=template.getDescription();
        if (description != null) {
          StringBuilder sb=new StringBuilder("<html><body><font face=\"Verdana\" ");
          sb.append(SystemInfo.isMac ? "" : "size=\"-1\"").append('>');
          sb.append(description).append("</font></body></html>");
          description=sb.toString();
        }
        myDescriptionPane.setText(description);
        myDescriptionPanel.setVisible(StringUtil.isNotEmpty(description));
      }
 else {
        mySettingsPanel.setVisible(false);
        myDescriptionPanel.setVisible(false);
      }
      mySettingsPanel.revalidate();
      mySettingsPanel.repaint();
    }
  }
);
  mySearchField.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      doFilter();
    }
  }
);
  myDescriptionPanel.setVisible(false);
  mySettingsPanel.setVisible(false);
  TreeState state=SelectTemplateSettings.getInstance().getTreeState();
  if (state != null) {
    state.applyTo(myTemplatesTree,(DefaultMutableTreeNode)myTemplatesTree.getModel().getRoot());
  }
 else {
    myBuilder.expandAll(null);
  }
}
