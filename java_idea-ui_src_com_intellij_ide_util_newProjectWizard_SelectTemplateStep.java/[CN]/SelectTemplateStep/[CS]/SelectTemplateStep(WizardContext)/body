{
  final List<ProjectTemplate> templates=new ArrayList<ProjectTemplate>();
  ProjectTemplatesFactory[] factories=ProjectTemplatesFactory.EP_NAME.getExtensions();
  for (  ProjectTemplatesFactory factory : factories) {
    templates.addAll(Arrays.asList(factory.createTemplates(context)));
  }
  Messages.installHyperlinkSupport(myDescriptionPane);
  myTemplatesList.setModel(new CollectionListModel<ProjectTemplate>(templates));
  myTemplatesList.setCellRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      ProjectTemplate template=(ProjectTemplate)value;
      append(template.getName());
    }
  }
);
  myTemplatesList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (mySettingsPanel.getComponentCount() > 0) {
        mySettingsPanel.remove(0);
      }
      ProjectTemplate template=getSelectedTemplate();
      if (template != null) {
        JComponent settingsPanel=template.getSettingsPanel();
        if (settingsPanel != null) {
          mySettingsPanel.add(settingsPanel,BorderLayout.NORTH);
        }
        mySettingsPanel.setVisible(settingsPanel != null);
        String description=template.getDescription();
        myDescriptionPane.setText(description);
        myDescriptionPanel.setVisible(StringUtil.isNotEmpty(description));
      }
      mySettingsPanel.revalidate();
      mySettingsPanel.repaint();
    }
  }
);
  if (myTemplatesList.getModel().getSize() > 0) {
    myTemplatesList.setSelectedIndex(0);
  }
  mySearchField.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      final MinusculeMatcher matcher=NameUtil.buildMatcher(mySearchField.getText(),NameUtil.MatchingCaseSensitivity.NONE);
      ProjectTemplate selectedTemplate=getSelectedTemplate();
      List<ProjectTemplate> list=ContainerUtil.filter(templates,new Condition<ProjectTemplate>(){
        @Override public boolean value(        ProjectTemplate template){
          String name=template.getName();
          String[] words=NameUtil.nameToWords(name);
          for (          String word : words) {
            if (matcher.matches(word))             return true;
          }
          return false;
        }
      }
);
      myTemplatesList.setModel(new CollectionListModel<ProjectTemplate>(list));
      if (!list.isEmpty()) {
        if (list.contains(selectedTemplate)) {
          myTemplatesList.setSelectedValue(selectedTemplate,true);
        }
 else {
          myTemplatesList.setSelectedIndex(0);
        }
      }
    }
  }
);
}
