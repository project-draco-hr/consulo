{
  File targetDir=new File(myMavenProject.getBuildDirectory());
  String generatedDir=myMavenProject.getGeneratedSourcesDirectory(false);
  String generatedDirTest=myMavenProject.getGeneratedSourcesDirectory(true);
  myModel.unregisterAll(targetDir.getPath(),true,false);
  if (myImportingSettings.getGeneratedSourcesFolder() != MavenImportingSettings.GeneratedSourcesFolder.IGNORE) {
    myModel.addSourceFolder(myMavenProject.getAnnotationProcessorDirectory(true),true,true);
    myModel.addSourceFolder(myMavenProject.getAnnotationProcessorDirectory(false),false,true);
  }
  File[] targetChildren=targetDir.listFiles();
  if (targetChildren != null) {
    for (    File f : targetChildren) {
      if (!f.isDirectory())       continue;
      if (FileUtil.pathsEqual(generatedDir,f.getPath())) {
        configGeneratedSourceFolder(f,false);
      }
 else       if (FileUtil.pathsEqual(generatedDirTest,f.getPath())) {
        configGeneratedSourceFolder(f,true);
      }
 else {
        if (myImportingSettings.isExcludeTargetFolder()) {
          if (myModel.hasRegisteredSourceSubfolder(f))           continue;
          if (myModel.isAlreadyExcluded(f))           continue;
          myModel.addExcludedFolder(f.getPath());
        }
      }
    }
  }
  List<String> facetExcludes=new ArrayList<String>();
  for (  MavenImporter each : MavenImporter.getSuitableImporters(myMavenProject)) {
    each.collectExcludedFolders(myMavenProject,facetExcludes);
  }
  for (  String eachFolder : facetExcludes) {
    myModel.unregisterAll(eachFolder,true,true);
    myModel.addExcludedFolder(eachFolder);
  }
  if (myImportingSettings.isExcludeTargetFolder()) {
    if (targetChildren == null || !myModel.hasRegisteredSourceSubfolder(targetDir)) {
      myModel.addExcludedFolder(targetDir.getPath());
    }
  }
 else {
    myModel.addExcludedFolder(myMavenProject.getOutputDirectory());
    myModel.addExcludedFolder(myMavenProject.getTestOutputDirectory());
  }
}
