{
  final Container parent=tree.getParent();
  int parentWidth=parent == null ? 100 : parent.getWidth() - 74;
  String date=", " + getDateOfChangeList(changeList.getCommitDate());
  final FontMetrics fontMetrics=tree.getFontMetrics(tree.getFont());
  final FontMetrics boldMetrics=tree.getFontMetrics(tree.getFont().deriveFont(Font.BOLD));
  int size=0;
  if (myDateWidth > 0 && (fontMetrics.getFont().getSize() == myFontSize)) {
    size+=myDateWidth;
  }
 else {
    myDateWidth=fontMetrics.stringWidth("Yesterday 00:00 ");
    myFontSize=fontMetrics.getFont().getSize();
  }
  size+=boldMetrics.stringWidth(changeList.getCommitterName());
  final Pair<String,Boolean> descriptionInfo=getDescriptionOfChangeList(changeList.getName().trim());
  boolean truncated=descriptionInfo.getSecond().booleanValue();
  String description=descriptionInfo.getFirst();
  for (  CommittedChangeListDecorator decorator : myDecorators) {
    final Icon icon=decorator.decorate(changeList);
    if (icon != null) {
      setIcon(icon);
    }
  }
  int descMaxWidth=parentWidth - size - 8;
  boolean partial=(changeList instanceof ReceivedChangeList) && ((ReceivedChangeList)changeList).isPartial();
  if (partial) {
    final String partialMarker=VcsBundle.message("committed.changes.partial.list") + " ";
    append(partialMarker,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    descMaxWidth-=boldMetrics.stringWidth(partialMarker);
  }
  int descWidth=fontMetrics.stringWidth(description);
  int numberWidth=0;
  final AbstractVcs vcs=changeList.getVcs();
  if (vcs != null) {
    final CachingCommittedChangesProvider provider=vcs.getCachingCommittedChangesProvider();
    if (provider != null && provider.getChangelistTitle() != null) {
      String number="#" + changeList.getNumber() + "  ";
      numberWidth=fontMetrics.stringWidth(number);
      descWidth+=numberWidth;
      append(number,SimpleTextAttributes.GRAY_ATTRIBUTES);
    }
  }
  if (description.length() == 0 && !truncated) {
    append(VcsBundle.message("committed.changes.empty.comment"),SimpleTextAttributes.GRAYED_ATTRIBUTES);
    appendAlign(parentWidth - size);
  }
 else   if (descMaxWidth < 0) {
    myRenderer.appendTextWithLinks(description);
  }
 else   if (descWidth < descMaxWidth && !truncated) {
    final List<String> pieces=myRenderer.appendTextWithLinks(description);
    String subString="";
    for (int i=0; i < (pieces.size() - 1); i++) {
      final String s=pieces.get(i);
      subString+=s;
    }
    final int partWidth=fontMetrics.stringWidth(subString);
    appendAlign(descMaxWidth - partWidth);
  }
 else {
    final String moreMarker=VcsBundle.message("changes.browser.details.marker");
    int moreWidth=fontMetrics.stringWidth(moreMarker);
    description=truncateDescription(description,fontMetrics,(descMaxWidth - moreWidth - numberWidth));
    myRenderer.appendTextWithLinks(description);
    final int addWidth=fontMetrics.stringWidth(description + " ");
    append(" ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
    append(moreMarker,LINK_ATTRIBUTES,new CommittedChangesTreeBrowser.MoreLauncher(myProject,changeList));
    appendAlign(descMaxWidth - addWidth);
  }
  append(changeList.getCommitterName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  append(date,SimpleTextAttributes.REGULAR_ATTRIBUTES);
}
