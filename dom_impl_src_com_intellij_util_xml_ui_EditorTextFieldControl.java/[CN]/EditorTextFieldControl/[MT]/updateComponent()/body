{
  final DomElement domElement=getDomElement();
  if (domElement == null || !domElement.isValid())   return;
  final EditorTextField textField=getEditorTextField(getComponent());
  final Project project=getProject();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (!project.isOpen())       return;
      if (!getDomWrapper().isValid())       return;
      final DomElement domElement=getDomElement();
      if (domElement == null || !domElement.isValid())       return;
      final DomElementAnnotationsManager manager=DomElementAnnotationsManager.getInstance(project);
      final DomElementsProblemsHolder holder=manager.getCachedProblemHolder(domElement);
      final List<DomElementProblemDescriptor> errorProblems=holder.getProblems(domElement);
      final List<DomElementProblemDescriptor> warningProblems=new ArrayList<DomElementProblemDescriptor>(holder.getProblems(domElement,true,HighlightSeverity.WARNING));
      warningProblems.removeAll(errorProblems);
      Color background=getDefaultBackground();
      if (errorProblems.size() > 0 && textField.getText().trim().length() == 0) {
        background=getErrorBackground();
      }
 else       if (warningProblems.size() > 0) {
        background=getWarningBackground();
      }
      final Editor editor=textField.getEditor();
      if (editor != null) {
        final MarkupModel markupModel=editor.getMarkupModel();
        markupModel.removeAllHighlighters();
        if (!errorProblems.isEmpty()) {
          final TextAttributes attributes=SimpleTextAttributes.ERROR_ATTRIBUTES.toTextAttributes();
          attributes.setEffectType(EffectType.WAVE_UNDERSCORE);
          attributes.setEffectColor(attributes.getForegroundColor());
          markupModel.addLineHighlighter(0,0,attributes);
          editor.getContentComponent().setToolTipText(errorProblems.get(0).getDescriptionTemplate());
        }
      }
      textField.setBackground(background);
    }
  }
);
}
