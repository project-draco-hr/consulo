{
  final PsiSearchHelper searchHelper=PsiSearchHelper.SERVICE.getInstance(method.getProject());
  final ProgressManager progressManager=ProgressManager.getInstance();
  final ProgressIndicator progressIndicator=progressManager.getProgressIndicator();
  final PsiSearchHelper.SearchCostResult searchCost=searchHelper.isCheapEnoughToSearch(method.getName(),method.getResolveScope(),null,progressIndicator);
  if (searchCost == PsiSearchHelper.SearchCostResult.TOO_MANY_OCCURRENCES || searchCost == PsiSearchHelper.SearchCostResult.ZERO_OCCURRENCES) {
    return onlyAccessedFromInnerClass;
  }
  final Query<PsiReference> query=ReferencesSearch.search(method);
  query.forEach(this);
  return onlyAccessedFromInnerClass;
}
