{
  final PsiElement element=reference.getElement();
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
  if (method.equals(containingMethod)) {
    return true;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(element);
  if (containingClass == null) {
    onlyAccessedFromInnerClass=false;
    return false;
  }
  if (containingClass instanceof PsiAnonymousClass) {
    final PsiAnonymousClass anonymousClass=(PsiAnonymousClass)containingClass;
    final PsiExpressionList argumentList=anonymousClass.getArgumentList();
    if (PsiTreeUtil.isAncestor(argumentList,element,true)) {
      onlyAccessedFromInnerClass=false;
      return false;
    }
    if (ignoreMethodsAccessedFromAnonymousClass) {
      onlyAccessedFromInnerClass=false;
      return false;
    }
  }
  if (cache != null) {
    if (!cache.equals(containingClass)) {
      onlyAccessedFromInnerClass=false;
      return false;
    }
  }
 else   if (!PsiTreeUtil.isAncestor(methodClass,containingClass,true)) {
    onlyAccessedFromInnerClass=false;
    return false;
  }
  onlyAccessedFromInnerClass=true;
  cache=containingClass;
  return true;
}
