{
  LOG.assertTrue(ChildRole.isUnique(role));
switch (role) {
default :
    return null;
case ChildRole.DOC_COMMENT:
  if (getFirstChildNode().getElementType() == JavaDocElementType.DOC_COMMENT) {
    return getFirstChildNode();
  }
 else {
    return null;
  }
case ChildRole.ENUM_CONSTANT_LIST_DELIMITER:
if (!isEnum()) {
  return null;
}
return findEnumConstantListDelimiter();
case ChildRole.MODIFIER_LIST:
return TreeUtil.findChild(this,MODIFIER_LIST);
case ChildRole.EXTENDS_LIST:
if (isAnnotationType() || isEnum()) return null;
return TreeUtil.findChild(this,EXTENDS_LIST);
case ChildRole.IMPLEMENTS_LIST:
return TreeUtil.findChild(this,IMPLEMENTS_LIST);
case ChildRole.TYPE_PARAMETER_LIST:
return TreeUtil.findChild(this,TYPE_PARAMETER_LIST);
case ChildRole.CLASS_OR_INTERFACE_KEYWORD:
for (ASTNode child=getFirstChildNode(); child != null; child=child.getTreeNext()) {
if (CLASS_KEYWORD_BIT_SET.contains(child.getElementType())) return child;
}
LOG.assertTrue(false);
return null;
case ChildRole.NAME:
return TreeUtil.findChild(this,IDENTIFIER);
case ChildRole.LBRACE:
return TreeUtil.findChild(this,LBRACE);
case ChildRole.RBRACE:
return TreeUtil.findChildBackward(this,RBRACE);
case ChildRole.AT:
ASTNode modifierList=findChildByRole(ChildRole.MODIFIER_LIST);
if (modifierList != null) {
ASTNode treeNext=modifierList.getTreeNext();
if (treeNext != null) {
treeNext=TreeUtil.skipElements(treeNext,WHITE_SPACE_OR_COMMENT_BIT_SET);
if (treeNext.getElementType() == AT) return treeNext;
}
}
return null;
}
}
