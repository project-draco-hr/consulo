{
  ChameleonTransforming.transformChildren(this);
  PsiClass psiClass=(PsiClass)SourceTreeToPsiMap.treeElementToPsi(this);
  if (anchor == null) {
    if (first.getElementType() != JavaDocElementType.DOC_COMMENT && first.getElementType() != JavaTokenType.DOC_COMMENT) {
      if (before == null) {
        if (first == last) {
          PsiElement firstPsi=SourceTreeToPsiMap.treeElementToPsi(first);
          PsiElement psiElement=firstPsi instanceof PsiMember ? CodeEditUtil.getDefaultAnchor(psiClass,(PsiMember)firstPsi) : null;
          anchor=psiElement != null ? SourceTreeToPsiMap.psiElementToTree(psiElement) : null;
        }
 else {
          anchor=findChildByRole(ChildRole.RBRACE);
        }
        before=Boolean.TRUE;
      }
 else       if (!before.booleanValue()) {
        anchor=findChildByRole(ChildRole.LBRACE);
      }
 else {
        anchor=findChildByRole(ChildRole.RBRACE);
      }
    }
  }
  if (isEnum()) {
    if (!ENUM_CONSTANT_LIST_ELEMENTS_BIT_SET.isInSet(first.getElementType())) {
      ASTNode semicolonPlace=findEnumConstantListDelimiterPlace();
      if (semicolonPlace == null || semicolonPlace.getElementType() != SEMICOLON) {
        final LeafElement semicolon=Factory.createSingleLeafElement(SEMICOLON,new char[]{';'},0,1,SharedImplUtil.findCharTableByTree(this),getManager());
        addInternal(semicolon,semicolon,semicolonPlace,Boolean.FALSE);
        semicolonPlace=semicolon;
      }
      for (ASTNode run=anchor; run != null; run=run.getTreeNext()) {
        if (run == semicolonPlace) {
          anchor=before.booleanValue() ? semicolonPlace.getTreeNext() : semicolonPlace;
          break;
        }
      }
    }
  }
  ASTNode afterLast=last.getTreeNext();
  ASTNode next;
  for (ASTNode child=first; child != afterLast; child=next) {
    next=child.getTreeNext();
    if (child.getElementType() == ElementType.METHOD && ((PsiMethod)SourceTreeToPsiMap.treeElementToPsi(child)).isConstructor()) {
      ASTNode oldIdentifier=((CompositeElement)child).findChildByRole(ChildRole.NAME);
      ASTNode newIdentifier=(ASTNode)findChildByRole(ChildRole.NAME).clone();
      newIdentifier.putUserData(CharTable.CHAR_TABLE_KEY,SharedImplUtil.findCharTableByTree(this));
      child.replaceChild(oldIdentifier,newIdentifier);
    }
  }
  if (psiClass.isEnum()) {
    for (ASTNode child=first; child != afterLast; child=next) {
      next=child.getTreeNext();
      if ((child.getElementType() == ElementType.METHOD && ((PsiMethod)SourceTreeToPsiMap.treeElementToPsi(child)).isConstructor()) || child.getElementType() == ElementType.ENUM_CONSTANT) {
        CompositeElement modifierList=(CompositeElement)((CompositeElement)child).findChildByRole(ChildRole.MODIFIER_LIST);
        while (true) {
          ASTNode modifier=TreeUtil.findChild(modifierList,MODIFIERS_TO_REMOVE_IN_ENUM_BIT_SET);
          if (modifier == null)           break;
          modifierList.deleteChildInternal(modifier);
        }
      }
    }
  }
 else   if (psiClass.isInterface()) {
    for (ASTNode child=first; child != afterLast; child=next) {
      next=child.getTreeNext();
      if (child.getElementType() == ElementType.METHOD || child.getElementType() == ElementType.FIELD) {
        CompositeElement modifierList=(CompositeElement)((CompositeElement)child).findChildByRole(ChildRole.MODIFIER_LIST);
        while (true) {
          ASTNode modifier=TreeUtil.findChild(modifierList,MODIFIERS_TO_REMOVE_IN_INTERFACE_BIT_SET);
          if (modifier == null)           break;
          modifierList.deleteChildInternal(modifier);
        }
      }
    }
  }
  return super.addInternal(first,last,anchor,before);
}
