{
{
    final ElementFilter position=new AndFilter(new ElementFilter[]{new NotFilter(CLASS_BODY),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new NotFilter(new ScopeFilter(new EnumFilter())),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">")))});
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.addCompletion(PsiKeyword.EXTENDS);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    variant.excludeScopeClass(PsiTypeParameter.class);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new ElementFilter[]{new NotFilter(CLASS_BODY),new NotFilter(new BeforeElementFilter(new ContentFilter(new TextFilter(PsiKeyword.EXTENDS)))),new NotFilter(new AfterElementFilter(new ContentFilter(new TextFilter(PsiKeyword.IMPLEMENTS)))),new NotFilter(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",",")))),new LeftNeighbour(new OrFilter(new ClassFilter(PsiIdentifier.class),new TextFilter(">"))),new NotFilter(new ScopeFilter(new InterfaceFilter()))});
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.addCompletion(PsiKeyword.IMPLEMENTS);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY),new OrFilter(new ElementFilter[]{new AndFilter(new LeftNeighbour(new TextFilter(PsiKeyword.EXTENDS,",")),new ScopeFilter(new InterfaceFilter())),new AndFilter(new LeftNeighbour(new TextFilter(PsiKeyword.EXTENDS,"&")),new ScopeFilter(new ClassFilter(PsiTypeParameter.class))),new LeftNeighbour(new TextFilter(PsiKeyword.IMPLEMENTS,","))}));
    final OrFilter flags=new OrFilter();
    flags.addFilter(new ThisOrAnyInnerFilter(new AndFilter(new ElementFilter[]{new ClassFilter(PsiClass.class),new NotFilter(new AssignableFromContextFilter()),new InterfaceFilter()})));
    flags.addFilter(new ClassFilter(PsiPackage.class));
    CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    variant.addCompletionFilterOnElement(flags);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new NotFilter(CLASS_BODY),new AndFilter(new ElementFilter[]{new LeftNeighbour(new TextFilter(PsiKeyword.EXTENDS)),new ScopeFilter(new NotFilter(new InterfaceFilter()))}));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiClass.class,true);
    variant.excludeScopeClass(PsiAnonymousClass.class);
    variant.addCompletionFilterOnElement(new ThisOrAnyInnerFilter(new AndFilter(new ElementFilter[]{new ClassFilter(PsiClass.class),new NotFilter(new AssignableFromContextFilter()),new NotFilter(new InterfaceFilter()),new ModifierFilter(PsiModifier.FINAL,false)})));
    variant.addCompletionFilterOnElement(new ClassFilter(PsiPackage.class));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiClass.class,new AndFilter(CLASS_BODY,new OrFilter(END_OF_BLOCK,new LeftNeighbour(new OrFilter(new TextFilter(MODIFIERS_LIST),new SuperParentFilter(new ClassFilter(PsiAnnotation.class)),new TokenTypeFilter(JavaTokenType.GT))))));
    addPrimitiveTypes(variant);
    variant.addCompletion(PsiKeyword.VOID);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    variant.addCompletionFilterOnElement(new ClassFilter(PsiPackage.class));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new LeftNeighbour(new LeftNeighbour(new TextFilter("<",","))));
    variant.includeScopeClass(PsiClass.class,true);
    variant.addCompletion(PsiKeyword.EXTENDS,TailType.SPACE);
    this.registerVariant(variant);
  }
}
