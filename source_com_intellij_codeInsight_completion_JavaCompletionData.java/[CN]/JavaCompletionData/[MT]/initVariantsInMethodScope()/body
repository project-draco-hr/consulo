{
{
    final CompletionVariant variant=new CompletionVariant(new LeftNeighbour(new OrFilter(new TextFilter(new String[]{"(",",",PsiKeyword.FINAL}),new SuperParentFilter(new ClassFilter(PsiAnnotation.class)))));
    variant.includeScopeClass(PsiParameterList.class,true);
    addPrimitiveTypes(variant);
    variant.addCompletion(PsiKeyword.FINAL);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new AndFilter(new TextFilter(")"),new ParentElementFilter(new ClassFilter(PsiParameterList.class))));
    CompletionVariant variant=new CompletionVariant(PsiMethod.class,position);
    variant.addCompletion(PsiKeyword.THROWS);
    this.registerVariant(variant);
    variant=new CompletionVariant(PsiAnnotationMethod.class,position);
    variant.addCompletion(PsiKeyword.DEFAULT);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new LeftNeighbour(new TextFilter(PsiKeyword.THROWS,",")),new InsideElementFilter(new ClassFilter(PsiReferenceList.class)));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiMethod.class,true);
    variant.addCompletionFilterOnElement(new ThisOrAnyInnerFilter(new InheritorFilter("java.lang.Throwable")));
    variant.addCompletionFilterOnElement(new ClassFilter(PsiPackage.class));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,new OrFilter(END_OF_BLOCK,new LeftNeighbour(new TextFilter(PsiKeyword.FINAL))));
    addPrimitiveTypes(variant);
    variant.addCompletion(PsiKeyword.CLASS);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,new LeftNeighbour(new AndFilter(new TextFilter("("),new ParentElementFilter(new OrFilter(new ClassFilter(PsiParenthesizedExpression.class),new ClassFilter(PsiTypeCastExpression.class))))));
    addPrimitiveTypes(variant);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new OrFilter(new ElementFilter[]{new ReferenceOnFilter(new ClassFilter(PsiVariable.class)),new TextFilter(PsiKeyword.THIS),new AndFilter(new TextFilter(")"),new ParentElementFilter(new AndFilter(new ClassFilter(PsiTypeCastExpression.class,false),new OrFilter(new ParentElementFilter(new ClassFilter(PsiExpression.class)),new ClassFilter(PsiExpression.class))))),new AndFilter(new TextFilter("]"),new ParentElementFilter(new ClassFilter(PsiArrayAccessExpression.class)))}));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiExpression.class,true);
    variant.includeScopeClass(PsiMethod.class);
    variant.addCompletionFilter(new FalseFilter());
    variant.addCompletion(PsiKeyword.INSTANCEOF);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new PreviousElementFilter(new TextFilter(PsiKeyword.INSTANCEOF));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiExpression.class,true);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new SuperParentFilter(new ClassFilter(PsiCodeBlock.class)),new LeftNeighbour(new TextFilter(PsiKeyword.FINAL)));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiDeclarationStatement.class,true);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    addPrimitiveTypes(variant);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,END_OF_BLOCK);
    variant.addCompletion(PsiKeyword.THIS,TailType.NONE);
    variant.addCompletion(PsiKeyword.SUPER,TailType.NONE);
    addKeywords(variant);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,new LeftNeighbour(new TextFilter(PsiKeyword.RETURN)));
    variant.addCompletion(PsiKeyword.THIS,TailType.NONE);
    variant.addCompletion(PsiKeyword.SUPER,TailType.NONE);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new AndFilter(new TextFilter("}"),new ParentElementFilter(new AndFilter(new LeftNeighbour(new TextFilter(PsiKeyword.TRY)),new ParentElementFilter(new ClassFilter(PsiTryStatement.class))))));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiCodeBlock.class,true);
    variant.addCompletion(PsiKeyword.CATCH,TailType.LPARENTH);
    variant.addCompletion(PsiKeyword.FINALLY,'{');
    variant.addCompletionFilter(new FalseFilter());
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new AndFilter(new TextFilter("}"),new ParentElementFilter(new AndFilter(new LeftNeighbour(new NotFilter(new TextFilter(PsiKeyword.TRY))),new OrFilter(new ParentElementFilter(new ClassFilter(PsiTryStatement.class)),new ParentElementFilter(new ClassFilter(PsiCatchSection.class)))))));
    final CompletionVariant variant=new CompletionVariant(position);
    variant.includeScopeClass(PsiCodeBlock.class,false);
    variant.addCompletion(PsiKeyword.CATCH,TailType.LPARENTH);
    variant.addCompletion(PsiKeyword.FINALLY,'{');
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiTryStatement.class,new PreviousElementFilter(new AndFilter(new ParentElementFilter(new ClassFilter(PsiTryStatement.class)),new TextFilter("("))));
    variant.includeScopeClass(PsiParameter.class);
    variant.addCompletionFilterOnElement(new ThisOrAnyInnerFilter(new InheritorFilter("java.lang.Throwable")));
    variant.addCompletionFilterOnElement(new ClassFilter(PsiPackage.class));
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new OrFilter(new AndFilter(new TextFilter("}"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class),3)),new AndFilter(new TextFilter(";"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class),2))));
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,position);
    variant.addCompletion(PsiKeyword.ELSE);
    this.registerVariant(variant);
  }
{
    final ElementFilter position=new LeftNeighbour(new AndFilter(new TextFilter("."),new LeftNeighbour(new ReferenceOnFilter(new GeneratorFilter(EqualsFilter.class,new UpWalkGetter(new ClassFilter(PsiClass.class)))))));
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,position);
    variant.includeScopeClass(PsiVariable.class);
    variant.addCompletion(PsiKeyword.SUPER,TailType.DOT);
    variant.addCompletion(PsiKeyword.THIS,TailType.DOT);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiMethod.class,new LeftNeighbour(new AndFilter(new TextFilter("."),new LeftNeighbour(new OrFilter(new ElementFilter[]{new ReferenceOnFilter(new ClassFilter(PsiClass.class)),new TextFilter(PRIMITIVE_TYPES),new TextFilter("]")})))));
    variant.includeScopeClass(PsiVariable.class);
    variant.addCompletion(PsiKeyword.CLASS,TailType.NONE);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new AndFilter(END_OF_BLOCK,new OrFilter(new ScopeFilter(new ClassFilter(PsiSwitchStatement.class)),new InsideElementFilter(new ClassFilter(PsiBlockStatement.class)))));
    variant.includeScopeClass(PsiForStatement.class,false);
    variant.includeScopeClass(PsiForeachStatement.class,false);
    variant.includeScopeClass(PsiWhileStatement.class,false);
    variant.includeScopeClass(PsiDoWhileStatement.class,false);
    variant.includeScopeClass(PsiSwitchStatement.class,false);
    variant.addCompletion(PsiKeyword.BREAK);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new AndFilter(END_OF_BLOCK,new InsideElementFilter(new ClassFilter(PsiBlockStatement.class))));
    variant.includeScopeClass(PsiForeachStatement.class,false);
    variant.includeScopeClass(PsiForStatement.class,false);
    variant.includeScopeClass(PsiWhileStatement.class,false);
    variant.includeScopeClass(PsiDoWhileStatement.class,false);
    variant.addCompletion(PsiKeyword.CONTINUE);
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new AndFilter(END_OF_BLOCK,new OrFilter(new ParentElementFilter(new ClassFilter(PsiSwitchLabelStatement.class)),new LeftNeighbour(new OrFilter(new ParentElementFilter(new ClassFilter(PsiSwitchStatement.class),2),new AndFilter(new TextFilter(";","}"),new ParentElementFilter(new ClassFilter(PsiSwitchStatement.class),3)))))));
    variant.includeScopeClass(PsiSwitchStatement.class,true);
    variant.addCompletion(PsiKeyword.CASE,TailType.SPACE);
    variant.addCompletion(PsiKeyword.DEFAULT,':');
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiExpression.class,new LeftNeighbour(new AndFilter(new TextFilter(PsiKeyword.NEW),new LeftNeighbour(new NotFilter(new TextFilter(".",PsiKeyword.THROW))))));
    variant.includeScopeClass(PsiNewExpression.class,true);
    addPrimitiveTypes(variant);
    variant.setItemProperty(LookupItem.BRACKETS_COUNT_ATTR,new Integer(1));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new LeftNeighbour(new TextFilter(PsiKeyword.NEW)));
    variant.includeScopeClass(PsiNewExpression.class,true);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new AndFilter(new ScopeFilter(new ParentElementFilter(new ClassFilter(PsiThrowStatement.class))),new ParentElementFilter(new ClassFilter(PsiNewExpression.class))));
    variant.includeScopeClass(PsiNewExpression.class,false);
    variant.addCompletionFilterOnElement(new ThisOrAnyInnerFilter(new InheritorFilter("java.lang.Throwable")));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(TrueFilter.INSTANCE);
    variant.includeScopeClass(PsiReferenceParameterList.class,true);
    variant.addCompletionFilterOnElement(new ClassFilter(PsiClass.class));
    this.registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(new NotFilter(new LeftNeighbour(new TextFilter("."))));
    variant.addCompletion(PsiKeyword.NULL,TailType.NONE);
    variant.includeScopeClass(PsiExpressionList.class);
    this.registerVariant(variant);
  }
}
