{
  final Sdk sdk=ModuleRootManager.getInstance(facet.getModule()).getSdk();
  if (sdk == null || !(sdk.getSdkType() instanceof AndroidSdkType)) {
    throw new AndroidSdkNotConfiguredException();
  }
  final AndroidSdkAdditionalData data=(AndroidSdkAdditionalData)sdk.getSdkAdditionalData();
  if (data == null) {
    throw new AndroidSdkNotConfiguredException();
  }
  final AndroidPlatform platform=data.getAndroidPlatform();
  if (platform == null) {
    throw new AndroidSdkNotConfiguredException();
  }
  config.setVersionQualifier(new VersionQualifier(target.getVersion().getApiLevel()));
  final RenderServiceFactory factory=platform.getSdk().getTargetData(target).getRenderServiceFactory(project);
  if (factory == null) {
    throw new RenderingException(AndroidBundle.message("android.layout.preview.cannot.load.library.error"));
  }
  final ProjectResources projectResources=new ProjectResources();
  final VirtualFile[] resourceDirs=facet.getLocalResourceManager().getAllResourceDirs();
  final IAbstractFolder[] resFolders=toAbstractFolders(project,resourceDirs);
  loadResources(projectResources,layoutXmlText,layoutXmlFile,resFolders);
  final int minSdkVersion=getMinSdkVersion(facet);
  final ProjectCallback callback=new ProjectCallback(factory.getLibrary(),facet.getModule(),projectResources);
  try {
    callback.loadAndParseRClass();
  }
 catch (  ClassNotFoundException e) {
    LOG.debug(e);
  }
  final RenderResources resolver=factory.createResourceResolver(facet,config,projectResources,theme.getName(),theme.isProjectTheme());
  final RenderService renderService=factory.createService(resolver,config,xdpi,ydpi,callback,minSdkVersion);
  try {
    return renderService.createRenderSession(layoutXmlText,getAppLabelToShow(facet));
  }
 catch (  XmlPullParserException e) {
    throw new RenderingException(e);
  }
}
