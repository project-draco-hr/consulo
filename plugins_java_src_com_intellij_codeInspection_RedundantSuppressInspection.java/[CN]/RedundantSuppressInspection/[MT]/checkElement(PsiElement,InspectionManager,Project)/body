{
  final Map<PsiElement,Collection<String>> suppressedScopes=new THashMap<PsiElement,Collection<String>>();
  psiElement.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitModifierList(    PsiModifierList list){
      super.visitModifierList(list);
      final PsiElement parent=list.getParent();
      if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) {
        checkElement(parent);
      }
    }
    @Override public void visitComment(    PsiComment comment){
      checkElement(comment);
    }
    @Override public void visitClass(    PsiClass aClass){
      if (aClass == psiElement) {
        super.visitClass(aClass);
        checkElement(aClass);
      }
    }
    private void checkElement(    final PsiElement owner){
      String idsString=JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner);
      if (idsString != null && !idsString.isEmpty()) {
        List<String> ids=StringUtil.split(idsString,",");
        if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))         return;
        Collection<String> suppressed=suppressedScopes.get(owner);
        if (suppressed == null) {
          suppressed=ids;
        }
 else {
          for (          String id : ids) {
            if (!suppressed.contains(id)) {
              suppressed.add(id);
            }
          }
        }
        suppressedScopes.put(owner,suppressed);
      }
    }
  }
);
  if (suppressedScopes.values().isEmpty())   return null;
  Collection<InspectionToolWrapper> suppressedTools=new THashSet<InspectionToolWrapper>();
  InspectionToolWrapper[] toolWrappers=getInspectionTools(psiElement,manager);
  for (  Collection<String> ids : suppressedScopes.values()) {
    for (Iterator<String> iterator=ids.iterator(); iterator.hasNext(); ) {
      final String shortName=iterator.next().trim();
      for (      InspectionToolWrapper toolWrapper : toolWrappers) {
        if (toolWrapper instanceof LocalInspectionToolWrapper && ((LocalInspectionToolWrapper)toolWrapper).getTool().getID().equals(shortName)) {
          if (((LocalInspectionToolWrapper)toolWrapper).isUnfair()) {
            iterator.remove();
            break;
          }
 else {
            suppressedTools.add(toolWrapper);
          }
        }
 else         if (toolWrapper.getShortName().equals(shortName)) {
          if (toolWrapper instanceof LocalInspectionToolWrapper || toolWrapper instanceof GlobalInspectionToolWrapper) {
            suppressedTools.add(toolWrapper);
          }
 else {
            iterator.remove();
            break;
          }
        }
      }
    }
  }
  PsiFile file=psiElement.getContainingFile();
  final AnalysisScope scope=new AnalysisScope(file);
  final GlobalInspectionContextBase globalContext=new GlobalInspectionContextBase(file.getProject());
  globalContext.setCurrentScope(scope);
  final RefManagerImpl refManager=(RefManagerImpl)globalContext.getRefManager();
  refManager.inspectionReadActionStarted();
  final List<ProblemDescriptor> result;
  try {
    result=new ArrayList<ProblemDescriptor>();
    for (    InspectionToolWrapper toolWrapper : suppressedTools) {
      String toolId=toolWrapper instanceof LocalInspectionToolWrapper ? ((LocalInspectionToolWrapper)toolWrapper).getTool().getID() : toolWrapper.getShortName();
      toolWrapper.initialize(globalContext);
      final Collection<CommonProblemDescriptor> descriptors;
      if (toolWrapper instanceof LocalInspectionToolWrapper) {
        LocalInspectionToolWrapper local=(LocalInspectionToolWrapper)toolWrapper;
        if (local.isUnfair())         continue;
        List<ProblemDescriptor> results=local.getTool().processFile(file,manager);
        descriptors=new ArrayList<CommonProblemDescriptor>(results);
      }
 else       if (toolWrapper instanceof GlobalInspectionToolWrapper) {
        final GlobalInspectionToolWrapper global=(GlobalInspectionToolWrapper)toolWrapper;
        GlobalInspectionTool globalTool=global.getTool();
        if (globalTool.isGraphNeeded()) {
          refManager.findAllDeclarations();
        }
        descriptors=new ArrayList<CommonProblemDescriptor>();
        globalContext.getRefManager().iterate(new RefVisitor(){
          @Override public void visitElement(          @NotNull RefEntity refEntity){
            CommonProblemDescriptor[] descriptors1=global.getTool().checkElement(refEntity,scope,manager,globalContext,new ProblemDescriptionsProcessor(){
              @Nullable @Override public CommonProblemDescriptor[] getDescriptions(              @NotNull RefEntity refEntity){
                return new CommonProblemDescriptor[0];
              }
              @Override public void ignoreElement(              @NotNull RefEntity refEntity){
              }
              @Override public void addProblemElement(              @Nullable RefEntity refEntity,              @NotNull CommonProblemDescriptor... commonProblemDescriptors){
                int i=0;
              }
              @Override public RefEntity getElement(              @NotNull CommonProblemDescriptor descriptor){
                return null;
              }
            }
);
            if (descriptors1 != null) {
              ContainerUtil.addAll(descriptors,descriptors1);
            }
          }
        }
);
      }
 else {
        continue;
      }
      for (      PsiElement suppressedScope : suppressedScopes.keySet()) {
        Collection<String> suppressedIds=suppressedScopes.get(suppressedScope);
        if (!suppressedIds.contains(toolId))         continue;
        for (        CommonProblemDescriptor descriptor : descriptors) {
          if (!(descriptor instanceof ProblemDescriptor))           continue;
          PsiElement element=((ProblemDescriptor)descriptor).getPsiElement();
          if (element == null)           continue;
          PsiElement annotation=JavaSuppressionUtil.getElementToolSuppressedIn(element,toolId);
          if (annotation != null && PsiTreeUtil.isAncestor(suppressedScope,annotation,false) || annotation == null && !PsiTreeUtil.isAncestor(suppressedScope,element,false)) {
            suppressedIds.remove(toolId);
            break;
          }
        }
      }
    }
    for (    PsiElement suppressedScope : suppressedScopes.keySet()) {
      Collection<String> suppressedIds=suppressedScopes.get(suppressedScope);
      for (      String toolId : suppressedIds) {
        PsiMember psiMember;
        String problemLine=null;
        if (suppressedScope instanceof PsiMember) {
          psiMember=(PsiMember)suppressedScope;
        }
 else {
          psiMember=PsiTreeUtil.getParentOfType(suppressedScope,PsiDocCommentOwner.class);
          final PsiStatement statement=PsiTreeUtil.getNextSiblingOfType(suppressedScope,PsiStatement.class);
          problemLine=statement != null ? statement.getText() : null;
        }
        if (psiMember != null && psiMember.isValid()) {
          String description=InspectionsBundle.message("inspection.redundant.suppression.description");
          if (myQuickFixes == null)           myQuickFixes=new BidirectionalMap<String,QuickFix>();
          final String key=toolId + (problemLine != null ? ";" + problemLine : "");
          QuickFix fix=myQuickFixes.get(key);
          if (fix == null) {
            fix=new RemoveSuppressWarningAction(toolId,problemLine);
            myQuickFixes.put(key,fix);
          }
          PsiElement identifier=null;
          if (psiMember instanceof PsiMethod) {
            identifier=((PsiMethod)psiMember).getNameIdentifier();
          }
 else           if (psiMember instanceof PsiField) {
            identifier=((PsiField)psiMember).getNameIdentifier();
          }
 else           if (psiMember instanceof PsiClass) {
            identifier=((PsiClass)psiMember).getNameIdentifier();
          }
          if (identifier == null) {
            identifier=psiMember;
          }
          result.add(manager.createProblemDescriptor(identifier,description,(LocalQuickFix)fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false));
        }
      }
    }
  }
  finally {
    refManager.inspectionReadActionFinished();
    globalContext.close(true);
  }
  return result.toArray(new ProblemDescriptor[result.size()]);
}
