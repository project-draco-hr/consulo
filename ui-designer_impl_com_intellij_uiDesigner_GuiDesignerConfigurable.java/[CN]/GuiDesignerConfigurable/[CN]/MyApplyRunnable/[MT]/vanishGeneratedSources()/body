{
  final PsiShortNamesCache cache=PsiManager.getInstance(myProject).getShortNamesCache();
  final PsiMethod[] methods=cache.getMethodsByName(AsmCodeGenerator.SETUP_METHOD_NAME,GlobalSearchScope.projectScope(myProject));
  final ArrayList<VirtualFile> vFiles=new ArrayList<VirtualFile>();
  for (  PsiMethod method : methods) {
    PsiFile file=method.getContainingFile();
    if (file != null) {
      VirtualFile vFile=file.getVirtualFile();
      if (vFile != null) {
        vFiles.add(vFile);
      }
    }
  }
  ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(vFiles.toArray(new VirtualFile[vFiles.size()]));
  for (int i=0; i < methods.length; i++) {
    final PsiMethod method=methods[i];
    final PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      try {
        final PsiFile psiFile=aClass.getContainingFile();
        LOG.assertTrue(psiFile != null);
        final VirtualFile vFile=psiFile.getVirtualFile();
        LOG.assertTrue(vFile != null);
        myProgressWindow.setText(UIDesignerBundle.message("progress.converting",vFile.getPresentableUrl()));
        myProgressWindow.setFraction(((double)i) / ((double)methods.length));
        if (vFile.isWritable()) {
          FormSourceCodeGenerator.cleanup(aClass);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
}
