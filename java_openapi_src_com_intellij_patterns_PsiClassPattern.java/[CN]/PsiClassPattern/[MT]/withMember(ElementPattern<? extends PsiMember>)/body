{
  return with(new PatternCondition<PsiClass>("withMember"){
    public boolean accepts(    @NotNull final PsiClass psiClass,    final ProcessingContext context){
      for (      PsiMethod method : psiClass.getMethods()) {
        if (memberPattern.accepts(method,context)) {
          return true;
        }
      }
      for (      PsiField field : psiClass.getFields()) {
        if (memberPattern.accepts(field,context)) {
          return true;
        }
      }
      for (      PsiClass inner : psiClass.getInnerClasses()) {
        if (memberPattern.accepts(inner,context)) {
          return true;
        }
      }
      return false;
    }
  }
);
}
