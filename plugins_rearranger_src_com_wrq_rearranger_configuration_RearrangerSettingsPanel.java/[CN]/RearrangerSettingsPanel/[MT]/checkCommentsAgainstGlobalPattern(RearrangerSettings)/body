{
  String pattern=settings.getGlobalCommentPattern();
  if (pattern == null || pattern.trim().length() == 0) {
    JOptionPane.showMessageDialog(null,"No global comment pattern exists!","Verify Comments Against Pattern",JOptionPane.WARNING_MESSAGE);
    return;
  }
  try {
    " ".matches(pattern);
  }
 catch (  PatternSyntaxException pse) {
    JOptionPane.showMessageDialog(null,"Invalid global pattern:" + pse.toString(),"Verify Comments Against Pattern",JOptionPane.ERROR_MESSAGE);
    return;
  }
  int nCommentsSeen=0;
  List<String> mismatches=new ArrayList<String>();
  nCommentsSeen=checkAttributeListForErrors(settings.getClassOrderAttributeList(),nCommentsSeen,pattern,mismatches);
  nCommentsSeen=checkAttributeListForErrors(settings.getItemOrderAttributeList(),nCommentsSeen,pattern,mismatches);
  CommentRule rule=settings.getExtractedMethodsSettings().getPrecedingComment();
  String preceding=rule.getCommentText();
  if (preceding != null && preceding.trim().length() > 0) {
    nCommentsSeen++;
    checkExtractedComment(rule,"Preceding",pattern,mismatches);
  }
  rule=settings.getExtractedMethodsSettings().getTrailingComment();
  String trailing=rule.getCommentText();
  if (preceding != null && preceding.trim().length() > 0) {
    nCommentsSeen++;
    checkExtractedComment(rule,"Trailing",pattern,mismatches);
  }
  if (nCommentsSeen == 0) {
    JOptionPane.showMessageDialog(null,"No user-defined comments have been configured","Verify Comments Against Pattern",JOptionPane.PLAIN_MESSAGE);
  }
 else   if (mismatches.size() == 0) {
    JOptionPane.showMessageDialog(null,nCommentsSeen + " user-defined comments seen; " + "all match the global comment pattern","Verify Comments Against Pattern",JOptionPane.PLAIN_MESSAGE);
  }
 else {
    mismatches.add(0,nCommentsSeen + " user-defined comments seen; following comments did not match:");
    JOptionPane.showMessageDialog(null,mismatches.toArray(),"Verify Comments Against Pattern",JOptionPane.WARNING_MESSAGE);
  }
}
