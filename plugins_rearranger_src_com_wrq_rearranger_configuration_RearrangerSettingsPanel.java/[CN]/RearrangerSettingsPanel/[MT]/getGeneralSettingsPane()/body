{
  final JPanel gsPanel=new JPanel(new GridBagLayout());
  final Border border=BorderFactory.createEtchedBorder();
  gsPanel.setBorder(border);
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.BOTH;
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.gridx=constraints.gridy=0;
  constraints.insets=new Insets(5,5,0,0);
  final JCheckBox getterSetterBox=new JCheckBox("Keep getters/setters together");
  getterSetterBox.setSelected(settings.isKeepGettersSettersTogether());
  final JCheckBox gettersSettersWithPropertyBox=new JCheckBox("Keep getters/setters with property");
  gettersSettersWithPropertyBox.setSelected(settings.isKeepGettersSettersWithProperty());
  gettersSettersWithPropertyBox.setEnabled(settings.isKeepGettersSettersTogether());
  final JCheckBox overloadedMethodsBox=new JCheckBox("Keep overloaded methods/constructors together");
  overloadedMethodsBox.setSelected(settings.isKeepOverloadedMethodsTogether());
  final JLabel overloadOrderLabel=new JLabel("Ordering of constructors and overloaded methods:");
  final JComboBox overloadOrderBox=new JComboBox(new String[]{"Retain original order","Order by number of parameters (ascending)","Order by number of parameters (descending)"});
  overloadOrderLabel.setEnabled(settings.isKeepOverloadedMethodsTogether());
  overloadOrderBox.setEnabled(settings.isKeepOverloadedMethodsTogether());
  overloadOrderBox.setSelectedIndex(settings.getOverloadedOrder());
  overloadedMethodsBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      settings.setKeepOverloadedMethodsTogether(overloadedMethodsBox.isSelected());
      overloadOrderLabel.setEnabled(settings.isKeepOverloadedMethodsTogether());
      overloadOrderBox.setEnabled(settings.isKeepOverloadedMethodsTogether());
    }
  }
);
  final JCheckBox confirmBox=new JCheckBox("Confirm before rearranging");
  confirmBox.setSelected(settings.isAskBeforeRearranging());
  confirmBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      settings.setAskBeforeRearranging(confirmBox.isSelected());
    }
  }
);
  final JCheckBox rearrangeInnerClasses=new JCheckBox("Rearrange contents of inner classes");
  rearrangeInnerClasses.setSelected(settings.isRearrangeInnerClasses());
  rearrangeInnerClasses.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      settings.setRearrangeInnerClasses(rearrangeInnerClasses.isSelected());
    }
  }
);
  gsPanel.add(getterSetterBox,constraints);
  constraints.gridy++;
  gsPanel.add(gettersSettersWithPropertyBox,constraints);
  constraints.gridy++;
  gsPanel.add(overloadedMethodsBox,constraints);
  constraints.gridy++;
  constraints.insets=new Insets(0,30,3,0);
  gsPanel.add(overloadOrderLabel,constraints);
  constraints.gridy++;
  constraints.insets=new Insets(0,30,10,0);
  constraints.fill=GridBagConstraints.NONE;
  gsPanel.add(overloadOrderBox,constraints);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridy++;
  constraints.insets=new Insets(5,5,0,0);
  gsPanel.add(confirmBox,constraints);
  constraints.gridy++;
  gsPanel.add(rearrangeInnerClasses,constraints);
  constraints.gridy++;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=1.0d;
  constraints.weighty=0.0d;
  final JPanel gsDefaultPane=settings.getDefaultGSDefinition().getGSDefinitionPanel();
  constraints.insets=new Insets(5,5,0,5);
  constraints.gridx=1;
  int oldGridy=constraints.gridy;
  constraints.gridheight=constraints.gridy;
  constraints.gridy=0;
  Border b=gsDefaultPane.getBorder();
  TitledBorder tb=BorderFactory.createTitledBorder(b,"Default Getter/Setter Definition");
  gsDefaultPane.setBorder(tb);
  gsPanel.add(gsDefaultPane,constraints);
  constraints.gridy=oldGridy;
  constraints.gridx=0;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.gridy++;
  constraints.weightx=0;
  constraints.insets=new Insets(5,5,0,0);
  final JLabel commentLabel=new JLabel("Comment pattern:");
  final JButton createPatternButton=new JButton("Generate pattern");
  final JButton verifyCommentsButton=new JButton("Verify comments against pattern");
  gsPanel.add(commentLabel,constraints);
  constraints.gridx++;
  constraints.anchor=GridBagConstraints.NORTH;
  gsPanel.add(createPatternButton,constraints);
  constraints.anchor=GridBagConstraints.NORTHEAST;
  constraints.gridx++;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.weightx=1;
  constraints.insets=new Insets(5,0,0,5);
  constraints.fill=GridBagConstraints.NONE;
  gsPanel.add(verifyCommentsButton,constraints);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridx=0;
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.insets=new Insets(5,5,5,5);
  constraints.gridy++;
  constraints.weighty=1.0d;
  constraints.gridheight=GridBagConstraints.REMAINDER;
  final JTextArea commentArea=new JTextArea(4,40);
  commentArea.setText(settings.getGlobalCommentPattern());
  constraints.gridheight=GridBagConstraints.REMAINDER;
  final JScrollPane scrollPane=new JScrollPane(commentArea);
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  gsPanel.add(scrollPane,constraints);
  getterSetterBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      settings.setKeepGettersSettersTogether(getterSetterBox.isSelected());
      gettersSettersWithPropertyBox.setEnabled(settings.isKeepGettersSettersTogether());
    }
  }
);
  gettersSettersWithPropertyBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      settings.setKeepGettersSettersWithProperty(gettersSettersWithPropertyBox.isSelected());
    }
  }
);
  overloadOrderBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      settings.setOverloadedOrder(overloadOrderBox.getSelectedIndex());
    }
  }
);
  commentArea.getDocument().addDocumentListener(new DocumentListener(){
    public void changedUpdate(    final DocumentEvent e){
      settings.setGlobalCommentPattern(commentArea.getText());
    }
    public void insertUpdate(    final DocumentEvent e){
      settings.setGlobalCommentPattern(commentArea.getText());
    }
    public void removeUpdate(    final DocumentEvent e){
      settings.setGlobalCommentPattern(commentArea.getText());
    }
  }
);
  createPatternButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String t=commentArea.getText();
      if (t.length() > 0) {
        int result=JOptionPane.showConfirmDialog(null,"This will replace the existing comment pattern with the generated pattern." + "  Are you sure?","Replace existing pattern",JOptionPane.YES_NO_CANCEL_OPTION);
        if (result != 0)         return;
      }
      String s=generateCommentPattern(settings);
      commentArea.setText(s);
    }
  }
);
  verifyCommentsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      checkCommentsAgainstGlobalPattern(settings);
    }
  }
);
  return gsPanel;
}
