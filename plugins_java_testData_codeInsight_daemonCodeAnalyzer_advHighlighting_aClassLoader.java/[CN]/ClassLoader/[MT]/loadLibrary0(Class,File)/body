{
  Boolean exists=(Boolean)AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      return new Boolean(file.exists());
    }
  }
);
  if (!exists.booleanValue()) {
    return false;
  }
  String name;
  try {
    name=file.getCanonicalPath();
  }
 catch (  IOException e) {
    return false;
  }
  ClassLoader loader=(fromClass == null) ? null : fromClass.getClassLoader();
  Vector libs=loader != null ? loader.nativeLibraries : systemNativeLibraries;
synchronized (libs) {
    int size=libs.size();
    for (int i=0; i < size; i++) {
      NativeLibrary lib=(NativeLibrary)libs.elementAt(i);
      if (name.equals(lib.name)) {
        return true;
      }
    }
synchronized (loadedLibraryNames) {
      if (loadedLibraryNames.contains(name)) {
        throw new UnsatisfiedLinkError("Native Library " + name + " already loaded in another classloader");
      }
      int n=nativeLibraryContext.size();
      for (int i=0; i < n; i++) {
        NativeLibrary lib=(NativeLibrary)nativeLibraryContext.elementAt(i);
        if (name.equals(lib.name)) {
          if (loader == lib.fromClass.getClassLoader()) {
            return true;
          }
 else {
            throw new UnsatisfiedLinkError("Native Library " + name + " is being loaded in another classloader");
          }
        }
      }
      NativeLibrary lib=new NativeLibrary(fromClass,name);
      nativeLibraryContext.push(lib);
      try {
        lib.load(name);
      }
  finally {
        nativeLibraryContext.pop();
      }
      if (lib.handle != 0) {
        loadedLibraryNames.addElement(name);
        libs.addElement(lib);
        return true;
      }
      return false;
    }
  }
}
