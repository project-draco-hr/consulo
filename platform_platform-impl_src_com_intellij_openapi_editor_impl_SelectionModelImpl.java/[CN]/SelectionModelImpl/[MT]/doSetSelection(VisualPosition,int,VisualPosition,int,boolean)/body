{
  myUnknownDirection=false;
  final Document doc=myEditor.getDocument();
  final Pair<String,String> markers=myEditor.getUserData(EditorImpl.EDITABLE_AREA_MARKER);
  if (markers != null) {
    final String text=doc.getText();
    final int start=text.indexOf(markers.first) + markers.first.length();
    final int end=text.indexOf(markers.second);
    if (startOffset < endOffset) {
      if (startOffset < start) {
        startOffset=start;
        startPosition=myEditor.offsetToVisualPosition(startOffset);
      }
      if (endOffset > end) {
        endOffset=end;
        endPosition=myEditor.offsetToVisualPosition(endOffset);
      }
    }
 else {
      if (endOffset < start) {
        endOffset=start;
        endPosition=myEditor.offsetToVisualPosition(startOffset);
      }
      if (startOffset > end) {
        startOffset=end;
        startPosition=myEditor.offsetToVisualPosition(endOffset);
      }
    }
  }
  validateContext(true);
  removeBlockSelection();
  int textLength=doc.getTextLength();
  if (startOffset < 0 || startOffset > textLength) {
    LOG.error("Wrong startOffset: " + startOffset + ", textLength="+ textLength);
  }
  if (endOffset < 0 || endOffset > textLength) {
    LOG.error("Wrong endOffset: " + endOffset + ", textLength="+ textLength);
  }
  myLastSelectionStart=startOffset;
  if (!visualPositionAware && startOffset == endOffset) {
    removeSelection();
    return;
  }
  if (startOffset > endOffset) {
    int tmp=startOffset;
    startOffset=endOffset;
    endOffset=tmp;
  }
  FoldingModelEx foldingModel=myEditor.getFoldingModel();
  FoldRegion startFold=foldingModel.getCollapsedRegionAtOffset(startOffset);
  if (startFold != null && startFold.getStartOffset() < startOffset) {
    startOffset=startFold.getStartOffset();
  }
  FoldRegion endFold=foldingModel.getCollapsedRegionAtOffset(endOffset);
  if (endFold != null && endFold.getStartOffset() < endOffset) {
    endOffset=endFold.getEndOffset();
  }
  int oldSelectionStart;
  int oldSelectionEnd;
  if (hasSelection()) {
    oldSelectionStart=getSelectionStart();
    oldSelectionEnd=getSelectionEnd();
    if (oldSelectionStart == startOffset && oldSelectionEnd == endOffset && !visualPositionAware)     return;
  }
 else {
    oldSelectionStart=oldSelectionEnd=myEditor.getCaretModel().getOffset();
  }
  MyRangeMarker marker=mySelectionMarker;
  if (marker != null) {
    marker.release();
  }
  marker=new MyRangeMarker((DocumentEx)doc,startOffset,endOffset);
  if (visualPositionAware) {
    if (endPosition.after(startPosition)) {
      marker.setStartPosition(startPosition);
      marker.setEndPosition(endPosition);
      marker.setEndPositionIsLead(false);
    }
 else {
      marker.setStartPosition(endPosition);
      marker.setEndPosition(startPosition);
      marker.setEndPositionIsLead(true);
    }
  }
  mySelectionMarker=marker;
  fireSelectionChanged(oldSelectionStart,oldSelectionEnd,startOffset,endOffset);
  updateSystemSelection();
}
