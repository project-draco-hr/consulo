{
  GitVcsSettings settings=GitVcsSettings.getInstance(myProject);
  if (!Registry.is("git.warn.about.crlf") || !SystemInfo.isWindows || !settings.warnAboutCrlf()) {
    return ReturnResult.COMMIT;
  }
  PlatformFacade platformFacade=ServiceManager.getService(myProject,PlatformFacade.class);
  Git git=ServiceManager.getService(Git.class);
  Collection<VirtualFile> files=myPanel.getVirtualFiles();
  GitCrlfProblemsDetector crlfHelper=GitCrlfProblemsDetector.detect(myProject,platformFacade,git,files);
  if (crlfHelper.shouldWarn()) {
    final GitCrlfDialog dialog=new GitCrlfDialog(myProject);
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        dialog.show();
      }
    }
);
    int decision=dialog.getExitCode();
    if (decision == GitCrlfDialog.CANCEL) {
      return ReturnResult.CANCEL;
    }
 else {
      if (decision == GitCrlfDialog.SET) {
        VirtualFile anyRoot=myPanel.getRoots().iterator().next();
        setCoreAutoCrlfAttribute(anyRoot);
      }
 else {
        if (dialog.dontWarnAgain()) {
          settings.setWarnAboutCrlf(false);
        }
      }
      return ReturnResult.COMMIT;
    }
  }
  return ReturnResult.COMMIT;
}
