{
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiLocalVariable) {
    final Integer localCount=expression.getUserData(key);
    parent.putUserData(key,localCount);
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!(lhs instanceof PsiReferenceExpression)) {
      return;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
    final PsiElement element=referenceExpression.resolve();
    if (!(element instanceof PsiLocalVariable)) {
      return;
    }
    final Integer localCount=expression.getUserData(key);
    element.putUserData(key,localCount);
  }
 else   if (parent instanceof PsiReferenceExpression) {
    final PsiElement grandParent=parent.getParent();
    if (!(grandParent instanceof PsiMethodCallExpression)) {
      return;
    }
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
    final Integer userData=grandParent.getUserData(key);
    if (userData == null) {
      return;
    }
    final int localCount=userData.intValue();
    final int newCount=localCount + count.intValue();
    if (newCount == threshold) {
      registerMethodCallError(methodCallExpression);
    }
    grandParent.putUserData(key,Integer.valueOf(newCount));
    checkParents(methodCallExpression,count);
  }
}
