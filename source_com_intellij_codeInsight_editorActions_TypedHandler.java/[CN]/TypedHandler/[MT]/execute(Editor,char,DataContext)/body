{
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  if (project == null || editor.isColumnMode()) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (file == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  if (editor.isViewer())   return;
  if (!editor.getDocument().isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(editor.getDocument(),project)) {
      return;
    }
  }
  AutoPopupController autoPopupController=AutoPopupController.getInstance(project);
  if (charTyped == '.') {
    autoPopupController.autoPopupMemberLookup(editor);
  }
  if (charTyped == '#') {
    autoPopupController.autoPopupMemberLookup(editor);
  }
  if (charTyped == '@' && file instanceof PsiJavaFile) {
    autoPopupController.autoPopupJavadocLookup(editor);
  }
  if (charTyped == '<' && file instanceof XmlFile) {
    autoPopupController.autoPopupXmlLookup(editor);
  }
  if (charTyped == ' ' && file instanceof XmlFile) {
    autoPopupController.autoPopupXmlLookup(editor);
  }
  if (charTyped == '(') {
    autoPopupController.autoPopupParameterInfo(editor,null);
  }
  if (!editor.isInsertMode()) {
    myOriginalHandler.execute(editor,charTyped,dataContext);
    return;
  }
  if (editor.getSelectionModel().hasSelection()) {
    EditorModificationUtil.deleteSelectedText(editor);
  }
  final VirtualFile virtualFile=file.getVirtualFile();
  FileType fileType;
  FileType originalFileType=null;
  if (virtualFile != null) {
    originalFileType=fileType=FileTypeManager.getInstance().getFileTypeByFile(virtualFile);
    if (fileType == StdFileTypes.ASPECT)     fileType=StdFileTypes.JAVA;
  }
 else {
    fileType=file instanceof PsiCodeFragment ? StdFileTypes.JAVA : null;
  }
  if ('>' == charTyped) {
    if (file instanceof XmlFile) {
      handleXmlGreater(project,editor,fileType);
    }
 else     if (originalFileType == StdFileTypes.JSP) {
      handleJspGreater(project,editor);
    }
  }
 else   if (')' == charTyped) {
    if (handleRParen(editor,fileType,')','('))     return;
  }
 else   if (']' == charTyped) {
    if (handleRParen(editor,fileType,']','['))     return;
  }
 else   if (';' == charTyped) {
    if (handleSemicolon(editor,fileType))     return;
  }
 else   if ('"' == charTyped || '\'' == charTyped) {
    if (handleQuote(editor,fileType,charTyped,dataContext))     return;
  }
 else   if ('}' == charTyped && originalFileType == StdFileTypes.JSPX) {
    if (handleELClosingBrace(editor,file,project))     return;
  }
  myOriginalHandler.execute(editor,charTyped,dataContext);
  if ('(' == charTyped && CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET) {
    handleAfterLParen(editor,fileType,'(');
  }
 else   if ('[' == charTyped && CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET) {
    handleAfterLParen(editor,fileType,'[');
  }
 else   if ('}' == charTyped) {
    indentClosingBrace(project,editor);
  }
 else   if ('{' == charTyped) {
    if (originalFileType == StdFileTypes.JSPX) {
      if (handleELOpeningBrace(editor,file,project))       return;
    }
    indentOpenedBrace(project,editor);
  }
 else   if ('/' == charTyped) {
    if (file instanceof XmlFile) {
      handleXmlSlash(project,editor);
    }
 else     if (originalFileType == StdFileTypes.JSP) {
      handleJspSlash(project,editor);
    }
  }
 else   if ('=' == charTyped) {
    if (originalFileType == StdFileTypes.JSP) {
      handleJspEqual(project,editor);
    }
  }
}
