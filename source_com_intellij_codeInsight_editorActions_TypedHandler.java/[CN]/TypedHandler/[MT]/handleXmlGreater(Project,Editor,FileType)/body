{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  XmlFile file=(XmlFile)PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  final int offset=editor.getCaretModel().getOffset();
  PsiElement element;
  if (offset < editor.getDocument().getTextLength()) {
    element=file.findElementAt(offset);
    if (!(element instanceof PsiWhiteSpace))     return;
    PsiElement parent=element.getParent();
    if (parent instanceof XmlText) {
      final String text=parent.getText();
      final int index=offset - parent.getTextOffset() - 1;
      if (index >= 0 && text.charAt(index) == '/') {
        return;
      }
      element=parent.getPrevSibling();
    }
 else     if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag)) {
      element=parent;
    }
  }
 else {
    element=file.findElementAt(editor.getDocument().getTextLength() - 1);
    if (element == null)     return;
    element=element.getParent();
  }
  if (element instanceof XmlAttributeValue) {
    element=element.getParent().getParent();
  }
  while (element instanceof PsiWhiteSpace)   element=element.getPrevSibling();
  if (element == null)   return;
  if (!(element instanceof XmlTag)) {
    if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) {
      editor.getDocument().insertString(offset,"</" + element.getText() + ">");
    }
    return;
  }
  XmlTag tag=(XmlTag)element;
  if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_TAG_END) != null)   return;
  if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_EMPTY_ELEMENT_END) != null)   return;
  final String name=tag.getName();
  if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))   return;
  if ("".equals(name))   return;
  int tagOffset=tag.getTextRange().getStartOffset();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(tagOffset);
  if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(),fileType,iterator,true))   return;
  editor.getDocument().insertString(offset,"</" + name + ">");
}
