{
  final List<Object> results=new ArrayList<Object>();
  if (returnType.isInterface()) {
    final List<Object> orderedPrimaryKeys=new SmartList<Object>();
    final FactoryMap<Object,List<Set<Object>>> map=new FactoryMap<Object,List<Set<Object>>>(){
      @NotNull protected List<Set<Object>> create(      final Object key){
        orderedPrimaryKeys.add(key);
        return new SmartList<Set<Object>>();
      }
    }
;
    final FactoryMap<Object,int[]> counts=new FactoryMap<Object,int[]>(){
      @NotNull protected int[] create(      final Object key){
        return new int[implementations.length];
      }
    }
;
    for (int i=0; i < implementations.length; i++) {
      Object t=implementations[i];
      final Object o=method.invoke(t,args);
      if (o instanceof Collection) {
        for (        final Object o1 : (Collection)o) {
          addToMaps(o1,counts,map,i,results,false);
        }
      }
 else       if (o != null) {
        addToMaps(o,counts,map,i,results,true);
      }
    }
    for (    final Object primaryKey : orderedPrimaryKeys) {
      for (      final Set<Object> objects : map.get(primaryKey)) {
        results.add(mergeImplementations(returnType,objects.toArray()));
      }
    }
  }
 else {
    HashSet<Object> map=new HashSet<Object>();
    for (    final Object t : implementations) {
      final Object o=method.invoke(t,args);
      if (o instanceof Collection) {
        map.addAll((Collection<Object>)o);
      }
 else       if (o != null) {
        map.add(o);
        break;
      }
    }
    results.addAll(map);
  }
  return results;
}
