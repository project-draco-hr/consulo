{
  final VcsContext context=CvsContextWrapper.createInstance(event);
  final VirtualFile selectedFile=context.getSelectedFile();
  final MigrateRootDialog dialog=new MigrateRootDialog(context.getProject(),selectedFile);
  dialog.show();
  if (!dialog.isOK())   return;
  final File directory=dialog.getSelectedDirectory();
  final boolean shouldReplaceAllRoots=dialog.shouldReplaceAllRoots();
  final List<File> rootFiles=new ArrayList<File>();
  try {
    if (shouldReplaceAllRoots) {
      collectRootFiles(directory,null,rootFiles);
    }
 else {
      collectRootFiles(directory,dialog.getCvsRoot(),rootFiles);
    }
  }
 catch (  IOException e) {
    LOG.error(e);
    return;
  }
  final CvsRootConfiguration cvsConfiguration=dialog.getSelectedCvsConfiguration();
  final String cvsRoot=cvsConfiguration.getCvsRootAsString();
  for (  final File file : rootFiles) {
    try {
      FileUtils.writeLine(file,cvsRoot);
    }
 catch (    IOException e) {
      LOG.error(e);
      break;
    }
  }
  final AccessToken token=ApplicationManager.getApplication().acquireReadActionLock();
  try {
    final VcsDirtyScopeManager dirty=VcsDirtyScopeManager.getInstance(context.getProject());
    for (    File file : rootFiles) {
      dirty.fileDirty(CvsVfsUtil.findFileByIoFile(file));
    }
    CvsVfsUtil.findFileByIoFile(directory).refresh(false,true);
  }
  finally {
    token.finish();
  }
}
