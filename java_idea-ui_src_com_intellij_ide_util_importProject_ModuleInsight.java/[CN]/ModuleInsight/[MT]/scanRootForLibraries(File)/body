{
  if (myIgnoredNames.contains(fromRoot.getName())) {
    return;
  }
  final File[] files=fromRoot.listFiles();
  if (files != null) {
    myProgress.checkCanceled();
    for (    File file : files) {
      if (file.isDirectory()) {
        scanRootForLibraries(file);
      }
 else {
        final String fileName=file.getName();
        if (isLibraryFile(fileName)) {
          if (!myJarToPackagesMap.containsKey(file)) {
            final HashSet<String> libraryPackages=new HashSet<String>();
            myJarToPackagesMap.put(file,libraryPackages);
            myProgress.pushState();
            myProgress.setText2(file.getName());
            try {
              scanLibraryForDeclaredPackages(file,new Consumer<String>(){
                public void consume(                final String s){
                  if (!libraryPackages.contains(s)) {
                    libraryPackages.add(myInterner.intern(s));
                  }
                }
              }
);
            }
 catch (            IOException e) {
              LOG.info(e);
            }
catch (            InternalError e) {
              LOG.info(e);
            }
 finally {
              myProgress.popState();
            }
          }
        }
      }
    }
  }
}
