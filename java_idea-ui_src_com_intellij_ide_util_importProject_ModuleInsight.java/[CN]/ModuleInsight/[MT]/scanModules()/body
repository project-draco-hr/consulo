{
  myProgress.setIndeterminate(true);
  final Map<File,ModuleDescriptor> contentRootToModules=new HashMap<File,ModuleDescriptor>();
  try {
    myProgress.pushState();
    List<JavaModuleSourceRoot> processedRoots=new ArrayList<JavaModuleSourceRoot>();
    for (    JavaModuleSourceRoot root : mySourceRoots) {
      final File sourceRoot=root.getDirectory();
      if (myIgnoredNames.contains(sourceRoot.getName())) {
        continue;
      }
      myProgress.setText("Scanning " + sourceRoot.getPath());
      final HashSet<String> usedPackages=new HashSet<String>();
      mySourceRootToReferencedPackagesMap.put(sourceRoot,usedPackages);
      final HashSet<String> selfPackages=new HashSet<String>();
      mySourceRootToPackagesMap.put(sourceRoot,selfPackages);
      scanSources(sourceRoot,root.getPackagePrefix(),usedPackages,selfPackages);
      usedPackages.removeAll(selfPackages);
      processedRoots.add(root);
    }
    myProgress.popState();
    myProgress.pushState();
    myProgress.setText("Building modules layout...");
    for (    JavaModuleSourceRoot sourceRoot : processedRoots) {
      final File srcRoot=sourceRoot.getDirectory();
      final File moduleContentRoot=myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile();
      ModuleDescriptor moduleDescriptor=contentRootToModules.get(moduleContentRoot);
      if (moduleDescriptor != null) {
        moduleDescriptor.addSourceRoot(moduleContentRoot,sourceRoot);
      }
 else {
        moduleDescriptor=new ModuleDescriptor(moduleContentRoot,StdModuleTypes.JAVA,sourceRoot);
        contentRootToModules.put(moduleContentRoot,moduleDescriptor);
      }
    }
    buildModuleDependencies(contentRootToModules);
    myProgress.popState();
  }
 catch (  ProcessCanceledException ignored) {
  }
  myModules=new ArrayList<ModuleDescriptor>(contentRootToModules.values());
  final Set<String> moduleNames=new HashSet<String>(myExistingModuleNames);
  for (  ModuleDescriptor module : myModules) {
    final String suggested=suggestUniqueName(moduleNames,module.getName());
    module.setName(suggested);
    moduleNames.add(suggested);
  }
}
