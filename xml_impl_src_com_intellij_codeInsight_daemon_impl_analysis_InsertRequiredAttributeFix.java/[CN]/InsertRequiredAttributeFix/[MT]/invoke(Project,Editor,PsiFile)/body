{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  ASTNode treeElement=SourceTreeToPsiMap.psiElementToTree(myTag);
  final XmlElementDescriptor descriptor=myTag.getDescriptor();
  if (descriptor == null) {
    return;
  }
  final XmlAttributeDescriptor attrDescriptor=descriptor.getAttributeDescriptor(myAttrName,myTag);
  boolean indirectSyntax=XmlExtension.getExtension((XmlFile)myTag.getContainingFile()).isIndirectSyntax(attrDescriptor);
  PsiElement anchor=SourceTreeToPsiMap.treeElementToPsi(XmlChildRole.EMPTY_TAG_END_FINDER.findChild(treeElement));
  final boolean anchorIsEmptyTag=anchor != null;
  if (anchor == null) {
    anchor=SourceTreeToPsiMap.treeElementToPsi(XmlChildRole.START_TAG_END_FINDER.findChild(treeElement));
  }
  if (anchor == null)   return;
  final Template template=TemplateManager.getInstance(project).createTemplate("","");
  if (indirectSyntax) {
    if (anchorIsEmptyTag)     template.addTextSegment(">");
    template.addTextSegment("<jsp:attribute name=\"" + myAttrName + "\">");
  }
 else {
    template.addTextSegment(" " + myAttrName + "=\"");
  }
  Expression expression=new Expression(){
    TextResult result=new TextResult("");
    public Result calculateResult(    ExpressionContext context){
      return result;
    }
    public Result calculateQuickResult(    ExpressionContext context){
      return null;
    }
    public LookupItem[] calculateLookupItems(    ExpressionContext context){
      final LookupItem[] items=new LookupItem[myValues == null ? 0 : myValues.length];
      if (myValues != null) {
        for (int i=0; i < items.length; i++) {
          items[i]=new SimpleLookupItem(myValues[i]);
        }
      }
      return items;
    }
  }
;
  template.addVariable(NAME_TEMPLATE_VARIABLE,expression,expression,true);
  if (indirectSyntax) {
    template.addTextSegment("</jsp:attribute>");
    template.addEndVariable();
    if (anchorIsEmptyTag)     template.addTextSegment("</" + myTag.getName() + ">");
  }
 else {
    template.addTextSegment("\"");
  }
  final PsiElement anchor1=anchor;
  final boolean indirectSyntax1=indirectSyntax;
  final Runnable runnable=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          int textOffset=anchor1.getTextOffset();
          if (!anchorIsEmptyTag && indirectSyntax1)           ++textOffset;
          editor.getCaretModel().moveToOffset(textOffset);
          if (anchorIsEmptyTag && indirectSyntax1) {
            editor.getDocument().deleteString(textOffset,textOffset + 2);
          }
          TemplateManager.getInstance(project).startTemplate(editor,template,null);
        }
      }
);
    }
  }
;
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    Runnable commandRunnable=new Runnable(){
      public void run(){
        CommandProcessor.getInstance().executeCommand(project,runnable,getText(),getFamilyName());
      }
    }
;
    ApplicationManager.getApplication().invokeLater(commandRunnable);
  }
 else {
    runnable.run();
  }
}
