{
  Project project=ProjectManager.getInstance().getDefaultProject();
  final LightVirtualFile lightVirtualFile=new LightVirtualFile(inputData.getFileName(),inputData.getContentAsText());
  PsiFile psiFile=null;
  final FileViewProviderFactory viewProviderFactory=LanguageFileViewProviders.INSTANCE.forLanguage(language);
  if (viewProviderFactory == null) {
    return;
  }
  final FileViewProvider viewProvider=viewProviderFactory.createFileViewProvider(lightVirtualFile,language,PsiManager.getInstance(project),false);
  if (viewProvider instanceof TemplateLanguageFileViewProvider) {
    final Language dataLanguage=((TemplateLanguageFileViewProvider)viewProvider).getTemplateDataLanguage();
    if (dataLanguage == HTMLLanguage.INSTANCE || dataLanguage == XHTMLLanguage.INSTANCE) {
      psiFile=viewProvider.getPsi(dataLanguage);
    }
  }
 else {
    psiFile=viewProvider.getPsi(viewProvider.getBaseLanguage());
  }
  if (psiFile != null) {
    final XmlRecursiveElementVisitor visitor=new XmlRecursiveElementVisitor(){
      @Override public void visitXmlTag(      XmlTag tag){
        if (LINK.equalsIgnoreCase(tag.getLocalName())) {
          final String href=getAttributeValue(tag,HREF_ATTR);
          final String media=getAttributeValue(tag,MEDIA_ATTR);
          final String type=getAttributeValue(tag,TYPE_ATTR);
          final String rel=getAttributeValue(tag,REL_ATTR);
          final String title=getAttributeValue(tag,TITLE_ATTR);
          addResult(result,tag.getTextOffset(),href,media,type,rel,title,isHrefScripted(tag));
        }
        super.visitXmlTag(tag);
      }
    }
;
    psiFile.accept(visitor);
  }
}
