{
  final List<LinkReferenceResult> result=new ArrayList<LinkReferenceResult>();
  if (!(file.getFileSystem() instanceof LocalFileSystem)) {
    return result;
  }
  FileBasedIndex.getInstance().processValues(INDEX_ID,FileBasedIndex.getFileId(file),null,new FileBasedIndex.ValueProcessor<List<LinkInfo>>(){
    public void process(    final VirtualFile file,    final List<LinkInfo> value){
      final PsiManager psiManager=PsiManager.getInstance(project);
      final PsiFile psiFile=psiManager.findFile(file);
      if (psiFile != null) {
        for (        final LinkInfo linkInfo : value) {
          if (linkInfo.value != null || linkInfo.scripted) {
            final PsiFileSystemItem[] item=new PsiFileSystemItem[]{null};
            if (linkInfo.value != null) {
              final LeafElement newValueElement=Factory.createSingleLeafElement(XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN,"\"" + linkInfo.value + "\"",0,linkInfo.value.length() + 2,null,psiManager,psiFile);
              final PsiElement element=newValueElement.getPsi();
              final FileReferenceSet set=new FileReferenceSet(StringUtil.stripQuotesAroundValue(element.getText()),element,1,null,true);
              final FileReference lastReference=set.getLastReference();
              item[0]=lastReference == null ? null : lastReference.resolve();
            }
            result.add(new MyLinkReferenceResult(item,linkInfo,psiFile));
          }
        }
      }
    }
  }
,VirtualFileFilter.ALL);
  return result;
}
