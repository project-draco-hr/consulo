{
  final List<LinkReferenceResult> result=new ArrayList<LinkReferenceResult>();
  FileBasedIndex.getInstance().processValues(INDEX_ID,FileBasedIndex.getFileId(file),null,new FileBasedIndex.ValueProcessor<List<LinkInfo>>(){
    public void process(    final VirtualFile file,    final List<LinkInfo> value){
      final PsiManager psiManager=PsiManager.getInstance(project);
      final PsiFile psiFile=psiManager.findFile(file);
      if (psiFile != null) {
        for (        LinkInfo linkInfo : value) {
          if (linkInfo.scripted) {
            result.add(new LinkReferenceResult(){
              public PsiFile getReferencedFile(){
                return null;
              }
              public boolean isScriptedReference(){
                return true;
              }
            }
);
          }
 else {
            final LeafElement newValueElement=Factory.createSingleLeafElement(XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN,"\"" + linkInfo.value + "\"",0,linkInfo.value.length() + 2,null,psiManager,psiFile);
            final PsiElement element=newValueElement.getPsi();
            final FileReferenceSet set=new FileReferenceSet(StringUtil.stripQuotesAroundValue(element.getText()),element,1,null,true);
            final FileReference lastReference=set.getLastReference();
            if (lastReference != null) {
              final PsiFileSystemItem item=lastReference.resolve();
              if (item != null) {
                result.add(new LinkReferenceResult(){
                  public PsiFile getReferencedFile(){
                    return (PsiFile)item;
                  }
                  public boolean isScriptedReference(){
                    return false;
                  }
                }
);
              }
            }
          }
        }
      }
    }
  }
,VirtualFileFilter.ALL);
  return result;
}
