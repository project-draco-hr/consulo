{
  return new DataIndexer<Integer,List<LinkInfo>,FileContent>(){
    @NotNull public Map<Integer,List<LinkInfo>> map(    final FileContent inputData){
      final VirtualFile file=inputData.getFile();
      final int id=FileBasedIndex.getFileId(file);
      final Language language=((LanguageFileType)file.getFileType()).getLanguage();
      final Map<Integer,List<LinkInfo>> result=new THashMap<Integer,List<LinkInfo>>();
      if (HTMLLanguage.INSTANCE == language || XHTMLLanguage.INSTANCE == language) {
        final Lexer original=HTMLLanguage.INSTANCE == language ? new HtmlHighlightingLexer() : new XHtmlHighlightingLexer();
        final Lexer lexer=new FilterLexer(original,new FilterLexer.Filter(){
          public boolean reject(          final IElementType type){
            return XmlElementType.XML_WHITE_SPACE == type;
          }
        }
);
        final CharSequence data=inputData.getContentAsText();
        lexer.start(data,0,data.length(),0);
        IElementType tokenType=lexer.getTokenType();
        boolean linkTag=false;
        while (tokenType != null) {
          if (XmlElementType.XML_TAG_NAME == tokenType) {
            final String tagName=data.subSequence(lexer.getTokenStart(),lexer.getTokenEnd()).toString();
            linkTag=LINK.equalsIgnoreCase(tagName);
            if (BODY_TAG.equalsIgnoreCase(tagName)) {
              break;
            }
          }
          if (linkTag && XmlElementType.XML_NAME == tokenType) {
            final String attrName=data.subSequence(lexer.getTokenStart(),lexer.getTokenEnd()).toString();
            if (HREF_ATTR.equalsIgnoreCase(attrName)) {
              lexer.advance();
              tokenType=lexer.getTokenType();
              if (XmlElementType.XML_EQ == tokenType) {
                lexer.advance();
                tokenType=lexer.getTokenType();
                if (tokenType == XmlElementType.XML_ATTRIBUTE_VALUE_START_DELIMITER) {
                  lexer.advance();
                  tokenType=lexer.getTokenType();
                  final int identOffset=lexer.getTokenStart();
                  if (XmlElementType.XML_ATTRIBUTE_VALUE_TOKEN == tokenType) {
                    final String value=data.subSequence(lexer.getTokenStart(),lexer.getTokenEnd()).toString();
                    addResult(result,id,identOffset,value,false);
                  }
                }
              }
            }
          }
          lexer.advance();
          tokenType=lexer.getTokenType();
        }
      }
 else {
        Project project=ProjectManager.getInstance().getDefaultProject();
        final LightVirtualFile lightVirtualFile=new LightVirtualFile(inputData.getFileName(),inputData.getContentAsText());
        final FileViewProviderFactory viewProviderFactory=LanguageFileViewProviders.INSTANCE.forLanguage(language);
        if (viewProviderFactory != null) {
          final FileViewProvider viewProvider=viewProviderFactory.createFileViewProvider(lightVirtualFile,language,PsiManager.getInstance(project),false);
          final PsiFile psiFile;
          if (viewProvider instanceof TemplateLanguageFileViewProvider) {
            final Language dataLanguage=((TemplateLanguageFileViewProvider)viewProvider).getTemplateDataLanguage();
            psiFile=viewProvider.getPsi(dataLanguage);
          }
 else {
            psiFile=viewProvider.getPsi(viewProvider.getBaseLanguage());
          }
          if (psiFile != null) {
            final XmlRecursiveElementVisitor visitor=new XmlRecursiveElementVisitor(){
              @Override public void visitXmlTag(              XmlTag tag){
                if (LINK.equalsIgnoreCase(tag.getLocalName())) {
                  final XmlAttribute href=tag.getAttribute(HREF_ATTR);
                  if (href != null) {
                    final XmlAttributeValue value=href.getValueElement();
                    if (value != null) {
                      if (PsiTreeUtil.getChildOfType(value,OuterLanguageElement.class) == null) {
                        final String textValue=value.getValue();
                        if (textValue != null && textValue.length() > 0) {
                          addResult(result,id,value.getTextOffset(),textValue,false);
                        }
                      }
 else {
                        addResult(result,id,value.getTextOffset(),null,true);
                      }
                    }
                  }
                }
                super.visitXmlTag(tag);
              }
            }
;
            ChameleonTransforming.transformChildrenNoLock(psiFile.getNode(),true);
            psiFile.accept(visitor);
          }
        }
      }
      return result;
    }
  }
;
}
