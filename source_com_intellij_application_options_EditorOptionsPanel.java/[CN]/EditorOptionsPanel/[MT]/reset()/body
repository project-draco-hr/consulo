{
  myTabbedPaneWrapper.getComponent().getRootPane().setGlassPane(myGlassPanel);
  EditorSettingsExternalizable editorSettings=EditorSettingsExternalizable.getInstance();
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  CodeFoldingSettings codeFoldingSettings=CodeFoldingSettings.getInstance();
  DaemonCodeAnalyzerSettings daemonSettings=DaemonCodeAnalyzerSettings.getInstance();
  UISettings uiSettings=UISettings.getInstance();
  myCbModifiedTabsMarkedWithAsterisk.setSelected(uiSettings.MARK_MODIFIED_TABS_WITH_ASTERISK);
  myCbBlinkCaret.setSelected(editorSettings.isBlinkCaret());
  myBlinkIntervalField.setText(Integer.toString(editorSettings.getBlinkPeriod()));
  myBlinkIntervalField.setEnabled(editorSettings.isBlinkCaret());
  myCbBlockCursor.setSelected(editorSettings.isBlockCursor());
  myCbRightMargin.setSelected(editorSettings.isRightMarginShown());
  myCbShowLineNumbers.setSelected(editorSettings.isLineNumbersShown());
  myCbShowMethodSeparators.setSelected(daemonSettings.SHOW_METHOD_SEPARATORS);
  myCbShowWhitespaces.setSelected(editorSettings.isWhitespacesShown());
  myCbSmoothScrolling.setSelected(editorSettings.isSmoothScrolling());
  myCbHighlightBraces.setSelected(codeInsightSettings.HIGHLIGHT_BRACES);
  myCbHighlightScope.setSelected(codeInsightSettings.HIGHLIGHT_SCOPE);
  myCbVirtualSpace.setSelected(editorSettings.isVirtualSpace());
  myCbCaretInsideTabs.setSelected(editorSettings.isCaretInsideTabs());
  myCbVirtualPageAtBottom.setSelected(editorSettings.isAdditionalPageAtBottom());
  myClipboardContentLimitTextField.setText(Integer.toString(uiSettings.MAX_CLIPBOARD_CONTENTS));
switch (codeInsightSettings.REFORMAT_ON_PASTE) {
case CodeInsightSettings.NO_REFORMAT:
    myReformatOnPasteCombo.setSelectedItem(NO_REFORMAT);
  break;
case CodeInsightSettings.INDENT_BLOCK:
myReformatOnPasteCombo.setSelectedItem(INDENT_BLOCK);
break;
case CodeInsightSettings.INDENT_EACH_LINE:
myReformatOnPasteCombo.setSelectedItem(INDENT_EACH_LINE);
break;
case CodeInsightSettings.REFORMAT_BLOCK:
myReformatOnPasteCombo.setSelectedItem(REFORMAT_BLOCK);
break;
}
switch (codeInsightSettings.ADD_IMPORTS_ON_PASTE) {
case CodeInsightSettings.YES:
mySmartPasteCombo.setSelectedItem(INSERT_IMPORTS_ALWAYS);
break;
case CodeInsightSettings.NO:
mySmartPasteCombo.setSelectedItem(INSERT_IMPORTS_NONE);
break;
case CodeInsightSettings.ASK:
mySmartPasteCombo.setSelectedItem(INSERT_IMPORTS_ASK);
break;
}
String stripTrailingSpaces=editorSettings.getStripTrailingSpaces();
if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_NONE);
}
 else if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_CHANGED.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_CHANGED);
}
 else if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_ALL);
}
myCbSmartHome.setSelected(editorSettings.isSmartHome());
myCbSmartEnd.setSelected(codeInsightSettings.SMART_END_ACTION);
myCbSmartIndentOnEnter.setSelected(codeInsightSettings.SMART_INDENT_ON_ENTER);
myCbInsertPairCurlyBraceOnEnter.setSelected(codeInsightSettings.INSERT_BRACE_ON_ENTER);
myCbInsertScriptletEndOnEnter.setSelected(codeInsightSettings.INSERT_SCRIPTLET_END_ON_ENTER);
myCbInsertJavadocStubOnEnter.setSelected(codeInsightSettings.JAVADOC_STUB_ON_ENTER);
myCbInsertPairBracket.setSelected(codeInsightSettings.AUTOINSERT_PAIR_BRACKET);
myCbInsertPairQuote.setSelected(codeInsightSettings.AUTOINSERT_PAIR_QUOTE);
myCbCamelWords.setSelected(editorSettings.isCamelWords());
myCbFolding.setSelected(editorSettings.isFoldingOutlineShown());
myCbCollapseImports.setSelected(codeFoldingSettings.isCollapseImports());
myCbCollapseJavadocComments.setSelected(codeFoldingSettings.isCollapseJavadocs());
myCbCollapseMethodBodies.setSelected(codeFoldingSettings.isCollapseMethods());
myCbCollapseAccessors.setSelected(codeFoldingSettings.isCollapseAccessors());
myCbCollapseInnerClasses.setSelected(codeFoldingSettings.isCollapseInnerClasses());
myCbCollapseXMLTags.setSelected(codeFoldingSettings.isCollapseXmlTags());
myCbCollapseAnonymousClasses.setSelected(codeFoldingSettings.isCollapseAnonymousClasses());
myCbCollapseFileHeader.setSelected(codeFoldingSettings.isCollapseFileHeader());
myCbCollapseAnnotations.setSelected(codeFoldingSettings.isCollapseAnnotations());
myCbOptimizeImports.setSelected(codeInsightSettings.OPTIMIZE_IMPORTS_ON_THE_FLY);
myCbAddUnabmigiousImports.setSelected(codeInsightSettings.ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY);
myCbEnableDnD.setSelected(editorSettings.isDndEnabled());
myCbEnableWheelFontChange.setSelected(editorSettings.isWheelFontChangeEnabled());
myCbHonorCamelHumpsWhenSelectingByClicking.setSelected(editorSettings.isMouseClickSelectionHonorsCamelWords());
myCbRenameLocalVariablesInplace.setSelected(editorSettings.isVariableInplaceRenameEnabled());
myScrollTabLayoutInEditorCheckBox.setSelected(uiSettings.SCROLL_TAB_LAYOUT_IN_EDITOR);
myEditorTabPlacement.setSelectedItem(new Integer(uiSettings.EDITOR_TAB_PLACEMENT));
myHideKnownExtensions.setSelected(uiSettings.HIDE_KNOWN_EXTENSION_IN_TABS);
if (uiSettings.CLOSE_NON_MODIFIED_FILES_FIRST) {
myCloseNonModifiedFilesFirstRadio.setSelected(true);
}
 else {
myCloseLRUFilesRadio.setSelected(true);
}
if (uiSettings.ACTIVATE_MRU_EDITOR_ON_CLOSE) {
myActivateMRUEditorOnCloseRadio.setSelected(true);
}
 else {
myActivateLeftEditorOnCloseRadio.setSelected(true);
}
myEditorTabLimitField.setText(Integer.toString(uiSettings.EDITOR_TAB_LIMIT));
myRecentFilesLimitField.setText(Integer.toString(uiSettings.RECENT_FILES_LIMIT));
myErrorHighlightingPanel.reset();
}
