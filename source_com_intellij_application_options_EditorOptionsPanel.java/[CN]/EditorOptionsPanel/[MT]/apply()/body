{
  EditorSettingsExternalizable editorSettings=EditorSettingsExternalizable.getInstance();
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  CodeFoldingSettings codeFoldingSettings=CodeFoldingSettings.getInstance();
  DaemonCodeAnalyzerSettings daemonSettings=DaemonCodeAnalyzerSettings.getInstance();
  UISettings uiSettings=UISettings.getInstance();
  boolean uiSettingsChanged=uiSettings.MARK_MODIFIED_TABS_WITH_ASTERISK != myCbModifiedTabsMarkedWithAsterisk.isSelected();
  uiSettings.MARK_MODIFIED_TABS_WITH_ASTERISK=myCbModifiedTabsMarkedWithAsterisk.isSelected();
  editorSettings.setBlinkCaret(myCbBlinkCaret.isSelected());
  try {
    editorSettings.setBlinkPeriod(Integer.parseInt(myBlinkIntervalField.getText()));
  }
 catch (  NumberFormatException e) {
  }
  editorSettings.setBlockCursor(myCbBlockCursor.isSelected());
  editorSettings.setRightMarginShown(myCbRightMargin.isSelected());
  editorSettings.setLineNumbersShown(myCbShowLineNumbers.isSelected());
  daemonSettings.SHOW_METHOD_SEPARATORS=myCbShowMethodSeparators.isSelected();
  editorSettings.setWhitespacesShown(myCbShowWhitespaces.isSelected());
  editorSettings.setSmoothScrolling(myCbSmoothScrolling.isSelected());
  codeInsightSettings.HIGHLIGHT_BRACES=myCbHighlightBraces.isSelected();
  codeInsightSettings.HIGHLIGHT_SCOPE=myCbHighlightScope.isSelected();
  editorSettings.setVirtualSpace(myCbVirtualSpace.isSelected());
  editorSettings.setCaretInsideTabs(myCbCaretInsideTabs.isSelected());
  editorSettings.setAdditionalPageAtBottom(myCbVirtualPageAtBottom.isSelected());
  String temp=myEditorTabLimitField.getText();
  if (temp.trim().length() > 0) {
    try {
      int newEditorTabLimit=new Integer(temp).intValue();
      if (newEditorTabLimit > 0 && newEditorTabLimit != uiSettings.EDITOR_TAB_LIMIT) {
        uiSettings.EDITOR_TAB_LIMIT=newEditorTabLimit;
        uiSettingsChanged=true;
      }
    }
 catch (    NumberFormatException ignored) {
    }
  }
  temp=myRecentFilesLimitField.getText();
  if (temp.trim().length() > 0) {
    try {
      int newRecentFilesLimit=new Integer(temp).intValue();
      if (newRecentFilesLimit > 0 && uiSettings.RECENT_FILES_LIMIT != newRecentFilesLimit) {
        uiSettings.RECENT_FILES_LIMIT=newRecentFilesLimit;
        uiSettingsChanged=true;
      }
    }
 catch (    NumberFormatException ignored) {
    }
  }
  uiSettings.CLOSE_NON_MODIFIED_FILES_FIRST=myCloseNonModifiedFilesFirstCheckBox.isSelected();
  int maxClipboardContents=getMaxClipboardContents();
  if (uiSettings.MAX_CLIPBOARD_CONTENTS != maxClipboardContents) {
    uiSettings.MAX_CLIPBOARD_CONTENTS=maxClipboardContents;
    uiSettingsChanged=true;
  }
  if (uiSettingsChanged) {
    uiSettings.fireUISettingsChanged();
  }
  codeInsightSettings.REFORMAT_ON_PASTE=getReformatPastedBlockValue();
  codeInsightSettings.ADD_IMPORTS_ON_PASTE=getSmartPasteValue();
  if (STRIP_NONE.equals(myStripTrailingSpacesCombo.getSelectedItem())) {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE);
  }
 else   if (STRIP_CHANGED.equals(myStripTrailingSpacesCombo.getSelectedItem())) {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_CHANGED);
  }
 else {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE);
  }
  editorSettings.setSmartHome(myCbSmartHome.isSelected());
  codeInsightSettings.SMART_END_ACTION=myCbSmartEnd.isSelected();
  codeInsightSettings.SMART_INDENT_ON_ENTER=myCbSmartIndentOnEnter.isSelected();
  codeInsightSettings.INSERT_BRACE_ON_ENTER=myCbInsertPairCurlyBraceOnEnter.isSelected();
  codeInsightSettings.INSERT_SCRIPTLET_END_ON_ENTER=myCbInsertScriptletEndOnEnter.isSelected();
  codeInsightSettings.JAVADOC_STUB_ON_ENTER=myCbInsertJavadocStubOnEnter.isSelected();
  codeInsightSettings.AUTOINSERT_PAIR_BRACKET=myCbInsertPairBracket.isSelected();
  codeInsightSettings.AUTOINSERT_PAIR_QUOTE=myCbInsertPairQuote.isSelected();
  editorSettings.setCamelWords(myCbCamelWords.isSelected());
  editorSettings.setFoldingOutlineShown(myCbFolding.isSelected());
  codeFoldingSettings.COLLAPSE_IMPORTS=myCbCollapseImports.isSelected();
  codeFoldingSettings.COLLAPSE_JAVADOCS=myCbCollapseJavadocComments.isSelected();
  codeFoldingSettings.COLLAPSE_METHODS=myCbCollapseMethodBodies.isSelected();
  codeFoldingSettings.COLLAPSE_ACCESSORS=myCbCollapseAccessors.isSelected();
  codeFoldingSettings.COLLAPSE_INNER_CLASSES=myCbCollapseInnerClasses.isSelected();
  codeFoldingSettings.COLLAPSE_XML_TAGS=myCbCollapseXMLTags.isSelected();
  codeFoldingSettings.COLLAPSE_ANONYMOUS_CLASSES=myCbCollapseAnonymousClasses.isSelected();
  codeFoldingSettings.COLLAPSE_FILE_HEADER=myCbCollapseFileHeader.isSelected();
  codeInsightSettings.OPTIMIZE_IMPORTS_ON_THE_FLY=myCbOptimizeImports.isSelected();
  codeInsightSettings.ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY=myCbAddUnabmigiousImports.isSelected();
  editorSettings.setDndEnabled(myCbEnableDnD.isSelected());
  editorSettings.setWheelFontChangeEnabled(myCbEnableWheelFontChange.isSelected());
  editorSettings.setMouseClickSelectionHonorsCamelWords(myCbHonorCamelHumpsWhenSelectingByClicking.isSelected());
  editorSettings.setNative2AsciiForPropertiesFiles(myCbNative2Ascii.isSelected());
  Editor[] editors=EditorFactory.getInstance().getAllEditors();
  for (int i=0; i < editors.length; i++) {
    ((EditorEx)editors[i]).reinitSettings();
  }
  Project[] projects=ProjectManager.getInstance().getOpenProjects();
  for (int i=0; i < projects.length; i++) {
    DaemonCodeAnalyzer.getInstance(projects[i]).settingsChanged();
  }
}
