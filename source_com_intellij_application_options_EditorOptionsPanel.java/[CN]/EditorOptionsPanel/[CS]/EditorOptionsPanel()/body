{
  myCbBlinkCaret.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myBlinkIntervalField.setEnabled(myCbBlinkCaret.isSelected());
    }
  }
);
  myReformatOnPasteCombo.addItem(NO_REFORMAT);
  myReformatOnPasteCombo.addItem(INDENT_BLOCK);
  myReformatOnPasteCombo.addItem(INDENT_EACH_LINE);
  myReformatOnPasteCombo.addItem(REFORMAT_BLOCK);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_ALWAYS);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_ASK);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_NONE);
  myCbCollapseMethodBodies.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myCbCollapseAccessors.setSelected(myCbCollapseMethodBodies.isSelected());
    }
  }
);
  myStripTrailingSpacesCombo.addItem(STRIP_CHANGED);
  myStripTrailingSpacesCombo.addItem(STRIP_ALL);
  myStripTrailingSpacesCombo.addItem(STRIP_NONE);
  final ButtonGroup editortabs=new ButtonGroup();
  editortabs.add(myActivateLeftEditorOnCloseRadio);
  editortabs.add(myActivateMRUEditorOnCloseRadio);
  final ButtonGroup closePolicy=new ButtonGroup();
  closePolicy.add(myCloseNonModifiedFilesFirstRadio);
  closePolicy.add(myCloseLRUFilesRadio);
  myEditorTabPlacement.setModel(new DefaultComboBoxModel(new Object[]{new Integer(SwingConstants.TOP),new Integer(SwingConstants.LEFT),new Integer(SwingConstants.BOTTOM),new Integer(SwingConstants.RIGHT),new Integer(UISettings.TABS_NONE)}));
  myEditorTabPlacement.setRenderer(new MyTabsPlacementComboBoxRenderer());
  myTabbedPaneWrapper=new TabbedPaneWrapper();
  myTabbedPaneWrapper.addTab("Behaviour",myBehaviourPanel);
  myTabbedPaneWrapper.addTab("Appearance",myAppearancePanel);
  myTabbedPaneWrapper.installKeyboardNavigation();
}
