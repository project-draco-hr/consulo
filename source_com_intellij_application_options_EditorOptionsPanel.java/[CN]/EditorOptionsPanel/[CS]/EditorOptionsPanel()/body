{
  myCbBlinkCaret.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myBlinkIntervalField.setEnabled(myCbBlinkCaret.isSelected());
    }
  }
);
  if (SystemInfo.isMac) {
    myCbEnableWheelFontChange.setText(ApplicationBundle.message("checkbox.enable.ctrl.mousewheel.changes.font.size.macos"));
  }
  myReformatOnPasteCombo.addItem(NO_REFORMAT);
  myReformatOnPasteCombo.addItem(INDENT_BLOCK);
  myReformatOnPasteCombo.addItem(INDENT_EACH_LINE);
  myReformatOnPasteCombo.addItem(REFORMAT_BLOCK);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_ALWAYS);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_ASK);
  mySmartPasteCombo.addItem(INSERT_IMPORTS_NONE);
  myCbCollapseMethodBodies.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myCbCollapseAccessors.setSelected(myCbCollapseMethodBodies.isSelected());
    }
  }
);
  myStripTrailingSpacesCombo.addItem(STRIP_CHANGED);
  myStripTrailingSpacesCombo.addItem(STRIP_ALL);
  myStripTrailingSpacesCombo.addItem(STRIP_NONE);
  final ButtonGroup editortabs=new ButtonGroup();
  editortabs.add(myActivateLeftEditorOnCloseRadio);
  editortabs.add(myActivateMRUEditorOnCloseRadio);
  final ButtonGroup closePolicy=new ButtonGroup();
  closePolicy.add(myCloseNonModifiedFilesFirstRadio);
  closePolicy.add(myCloseLRUFilesRadio);
  myEditorTabPlacement.setModel(new DefaultComboBoxModel(new Object[]{SwingConstants.TOP,SwingConstants.LEFT,SwingConstants.BOTTOM,SwingConstants.RIGHT,UISettings.TABS_NONE}));
  myEditorTabPlacement.setRenderer(new MyTabsPlacementComboBoxRenderer());
  myHighlightSettingsPanel.setLayout(new BorderLayout());
  myHighlightSettingsPanel.add(myErrorHighlightingPanel.getPanel(),BorderLayout.CENTER);
  myTabbedPaneWrapper=new TabbedPaneWrapper();
  myTabbedPaneWrapper.addTab(ApplicationBundle.message("tab.editor.settings.behavior"),myBehaviourPanel);
  myTabbedPaneWrapper.addTab(ApplicationBundle.message("tab.editor.settings.appearance"),myAppearancePanel);
}
