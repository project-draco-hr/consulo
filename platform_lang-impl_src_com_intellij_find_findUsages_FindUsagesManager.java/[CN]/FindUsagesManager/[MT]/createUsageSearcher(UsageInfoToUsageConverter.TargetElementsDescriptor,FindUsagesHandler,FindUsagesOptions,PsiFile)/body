{
  final FindUsagesOptions options=_options.clone();
  return new UsageSearcher(){
    @Override public void generate(    @NotNull final Processor<Usage> processor){
      if (scopeFile != null) {
        options.searchScope=new LocalSearchScope(scopeFile);
      }
      final Processor<UsageInfo> usageInfoProcessor=new CommonProcessors.UniqueProcessor<UsageInfo>(new Processor<UsageInfo>(){
        @Override public boolean process(        UsageInfo usageInfo){
          return processor.process(UsageInfoToUsageConverter.convert(descriptor,usageInfo));
        }
      }
);
      final List<? extends PsiElement> elements=ApplicationManager.getApplication().runReadAction(new Computable<List<? extends PsiElement>>(){
        @Override public List<? extends PsiElement> compute(){
          return descriptor.getAllElements();
        }
      }
);
      options.fastTrack=new SearchRequestCollector(new SearchSession());
      try {
        for (        final PsiElement element : elements) {
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              LOG.assertTrue(element.isValid());
            }
          }
);
          handler.processElementUsages(element,usageInfoProcessor,options);
          for (          CustomUsageSearcher searcher : Extensions.getExtensions(CustomUsageSearcher.EP_NAME)) {
            try {
              searcher.processElementUsages(element,processor,options);
            }
 catch (            Exception e) {
              LOG.error(e);
            }
          }
        }
        Project project=ApplicationManager.getApplication().runReadAction(new Computable<Project>(){
          @Override public Project compute(){
            return scopeFile != null ? scopeFile.getProject() : !elements.isEmpty() ? elements.get(0).getProject() : handler.getProject();
          }
        }
);
        PsiSearchHelper.SERVICE.getInstance(project).processRequests(options.fastTrack,new ReadActionProcessor<PsiReference>(){
          @Override public boolean processInReadAction(          final PsiReference ref){
            return !ref.getElement().isValid() || usageInfoProcessor.process(new UsageInfo(ref));
          }
        }
);
      }
  finally {
        options.fastTrack=null;
      }
    }
  }
;
}
