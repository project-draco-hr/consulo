{
  return new UsageSearcher(){
    public void generate(    @NotNull final Processor<Usage> processor){
      if (scopeFile != null) {
        options.searchScope=new LocalSearchScope(scopeFile);
      }
      final Processor<UsageInfo> usageInfoProcessor=new CommonProcessors.UniqueProcessor<UsageInfo>(new Processor<UsageInfo>(){
        public boolean process(        UsageInfo usageInfo){
          return processor.process(UsageInfoToUsageConverter.convert(descriptor,usageInfo));
        }
      }
);
      List<? extends PsiElement> elements=ApplicationManager.getApplication().runReadAction(new Computable<List<? extends PsiElement>>(){
        public List<? extends PsiElement> compute(){
          return descriptor.getAllElements();
        }
      }
);
      options.fastTrack=PsiSearchRequest.composite();
      for (      final PsiElement element : elements) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            LOG.assertTrue(element.isValid());
          }
        }
);
        handler.processElementUsages(element,usageInfoProcessor,options);
      }
      PsiManager.getInstance(handler.getProject()).getSearchHelper().processRequest(options.fastTrack);
    }
  }
;
}
