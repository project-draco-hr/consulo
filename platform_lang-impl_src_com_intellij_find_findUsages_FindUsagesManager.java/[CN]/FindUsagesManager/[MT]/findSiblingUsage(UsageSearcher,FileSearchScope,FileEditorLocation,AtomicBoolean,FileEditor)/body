{
  if (fileEditor.getUserData(KEY_START_USAGE_AGAIN) != null) {
    dir=dir == FileSearchScope.AFTER_CARET ? FileSearchScope.FROM_START : FileSearchScope.FROM_END;
  }
  final FileSearchScope direction=dir;
  final AtomicReference<Usage> foundUsage=new AtomicReference<Usage>();
  usageSearcher.generate(new Processor<Usage>(){
    @Override public boolean process(    Usage usage){
      usagesWereFound.set(true);
      if (direction == FileSearchScope.FROM_START) {
        foundUsage.compareAndSet(null,usage);
        return false;
      }
      if (direction == FileSearchScope.FROM_END) {
        foundUsage.set(usage);
      }
 else       if (direction == FileSearchScope.AFTER_CARET) {
        if (Comparing.compare(usage.getLocation(),currentLocation) > 0) {
          foundUsage.set(usage);
          return false;
        }
      }
 else       if (direction == FileSearchScope.BEFORE_CARET) {
        if (Comparing.compare(usage.getLocation(),currentLocation) >= 0) {
          return false;
        }
        while (true) {
          Usage found=foundUsage.get();
          if (found == null) {
            if (foundUsage.compareAndSet(null,usage))             break;
          }
 else {
            if (Comparing.compare(found.getLocation(),usage.getLocation()) < 0 && foundUsage.compareAndSet(found,usage))             break;
          }
        }
      }
      return true;
    }
  }
);
  fileEditor.putUserData(KEY_START_USAGE_AGAIN,null);
  return foundUsage.get();
}
