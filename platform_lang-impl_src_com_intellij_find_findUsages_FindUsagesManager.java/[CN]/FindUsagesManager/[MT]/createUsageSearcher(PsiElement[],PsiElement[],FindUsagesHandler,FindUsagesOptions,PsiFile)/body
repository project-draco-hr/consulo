{
  final FindUsagesOptions optionsClone=options.clone();
  return new UsageSearcher(){
    @Override public void generate(    @NotNull final Processor<Usage> processor){
      if (scopeFile != null) {
        optionsClone.searchScope=new LocalSearchScope(scopeFile);
      }
      final Processor<UsageInfo> usageInfoProcessor=new CommonProcessors.UniqueProcessor<UsageInfo>(new Processor<UsageInfo>(){
        @Override public boolean process(        final UsageInfo usageInfo){
          Usage usage=ApplicationManager.getApplication().runReadAction(new Computable<Usage>(){
            @Override public Usage compute(){
              return UsageInfoToUsageConverter.convert(primaryElements,usageInfo);
            }
          }
);
          return processor.process(usage);
        }
      }
);
      final Iterable<PsiElement> elements=ContainerUtil.concat(primaryElements,secondaryElements);
      optionsClone.fastTrack=new SearchRequestCollector(new SearchSession());
      try {
        for (        final PsiElement element : elements) {
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              LOG.assertTrue(element.isValid());
            }
          }
);
          handler.processElementUsages(element,usageInfoProcessor,optionsClone);
          for (          CustomUsageSearcher searcher : Extensions.getExtensions(CustomUsageSearcher.EP_NAME)) {
            try {
              searcher.processElementUsages(element,processor,optionsClone);
            }
 catch (            IndexNotReadyException e) {
              DumbService.getInstance(element.getProject()).showDumbModeNotification("Find usages is not available during indexing");
            }
catch (            Exception e) {
              LOG.error(e);
            }
          }
        }
        Project project=ApplicationManager.getApplication().runReadAction(new Computable<Project>(){
          @Override public Project compute(){
            return scopeFile != null ? scopeFile.getProject() : primaryElements[0].getProject();
          }
        }
);
        PsiSearchHelper.SERVICE.getInstance(project).processRequests(optionsClone.fastTrack,new Processor<PsiReference>(){
          @Override public boolean process(          final PsiReference ref){
            UsageInfo info=ApplicationManager.getApplication().runReadAction(new Computable<UsageInfo>(){
              @Override public UsageInfo compute(){
                if (!ref.getElement().isValid())                 return null;
                return new UsageInfo(ref);
              }
            }
);
            return info == null || usageInfoProcessor.process(info);
          }
        }
);
      }
  finally {
        optionsClone.fastTrack=null;
      }
    }
  }
;
}
