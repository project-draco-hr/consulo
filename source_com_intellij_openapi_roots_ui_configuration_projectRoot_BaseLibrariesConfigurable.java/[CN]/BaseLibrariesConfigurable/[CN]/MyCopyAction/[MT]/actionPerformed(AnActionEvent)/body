{
  final Object o=getSelectedObject();
  if (o instanceof LibraryImpl) {
    myPathTf.addBrowseFolderListener("Choose directory",ProjectBundle.message("directory.roots.copy.label"),myProject,BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
    mySaveAsCb.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        myPathTf.setEnabled(mySaveAsCb.isSelected());
      }
    }
);
    mySaveAsCb.setText(ProjectBundle.message("save.as.library.checkbox",getOppositeGroup().myLevel));
    mySaveAsCb.setSelected(false);
    myPathTf.setEnabled(false);
    final DialogWrapper dlg=new DialogWrapper(myTree,false){
{
        setTitle("Copy");
        init();
      }
      @Nullable protected JComponent createCenterPanel(){
        return myWholePanel;
      }
      public JComponent getPreferredFocusedComponent(){
        return myNameTf;
      }
      protected void doOKAction(){
        if (myNameTf.getText().length() == 0) {
          Messages.showErrorDialog("Enter library copy name",CommonBundle.message("title.error"));
          return;
        }
        super.doOKAction();
      }
    }
;
    dlg.show();
    if (!dlg.isOK())     return;
    BaseLibrariesConfigurable configurable=mySaveAsCb.isSelected() ? getOppositeGroup() : BaseLibrariesConfigurable.this;
    final LibraryImpl library=(LibraryImpl)myContext.getLibrary(((LibraryImpl)o).getName(),myLevel);
    LOG.assertTrue(library != null);
    final LibraryTable.ModifiableModel libsModel=configurable.getModelProvider(true).getModifiableModel();
    final Library lib=libsModel.createLibrary(myNameTf.getText());
    final Library.ModifiableModel model=((LibrariesModifiableModel)libsModel).getLibraryEditor(lib).getModel();
    for (    OrderRootType type : OrderRootType.getAllTypes()) {
      final VirtualFile[] files=library.getFiles(type);
      for (      VirtualFile file : files) {
        if (mySaveAsCb.isSelected() && myPathTf.getText().trim().length() > 0) {
          final File copy=new File(new File(myPathTf.getText()),file.getName());
          if (copy.mkdirs()) {
            try {
              final File fromFile=VfsUtil.virtualToIoFile(file);
              if (fromFile.isFile()) {
                FileUtil.copy(fromFile,copy);
              }
 else {
                FileUtil.copyDir(fromFile,copy);
              }
              model.addRoot(LocalFileSystem.getInstance().refreshAndFindFileByIoFile(copy),type);
            }
 catch (            IOException e1) {
            }
            continue;
          }
        }
        model.addRoot(file,type);
      }
    }
  }
}
