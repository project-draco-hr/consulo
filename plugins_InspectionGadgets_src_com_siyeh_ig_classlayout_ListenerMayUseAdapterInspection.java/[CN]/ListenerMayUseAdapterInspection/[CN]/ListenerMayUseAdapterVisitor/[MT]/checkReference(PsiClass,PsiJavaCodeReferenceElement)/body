{
  final PsiElement target=implementsReference.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass implementsClass=(PsiClass)target;
  final String className=implementsClass.getQualifiedName();
  if (className == null || !className.endsWith("Listener")) {
    return;
  }
  final String adapterName=className.substring(0,className.length() - 8) + "Adapter";
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(aClass.getProject());
  final GlobalSearchScope scope=implementsClass.getResolveScope();
  final PsiClass adapterClass=psiFacade.findClass(adapterName,scope);
  if (adapterClass == null) {
    return;
  }
  if (aClass.equals(adapterClass)) {
    return;
  }
  if (!adapterClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  final PsiReferenceList implementsList=adapterClass.getImplementsList();
  if (implementsList == null) {
    return;
  }
  final PsiJavaCodeReferenceElement[] referenceElements=implementsList.getReferenceElements();
  boolean adapterImplementsListener=false;
  for (  PsiJavaCodeReferenceElement referenceElement : referenceElements) {
    final PsiElement implementsTarget=referenceElement.resolve();
    if (!implementsClass.equals(implementsTarget)) {
      continue;
    }
    adapterImplementsListener=true;
  }
  if (!adapterImplementsListener) {
    return;
  }
  if (checkForEmptyMethods) {
    boolean emptyMethodFound=false;
    final PsiMethod[] methods=aClass.getMethods();
    for (    PsiMethod method : methods) {
      final PsiCodeBlock body=method.getBody();
      if (body == null) {
        continue;
      }
      final PsiStatement[] statements=body.getStatements();
      if (statements.length != 0) {
        continue;
      }
      final PsiMethod[] superMethods=method.findSuperMethods(implementsClass);
      if (superMethods.length == 0) {
        continue;
      }
      emptyMethodFound=true;
      break;
    }
    if (!emptyMethodFound) {
      return;
    }
  }
  registerError(implementsReference,aClass,adapterClass);
}
