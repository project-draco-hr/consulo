{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  final VariableKind variableKind=CodeStyleManager.getInstance(var.getProject()).getVariableKind(var);
  final CodeStyleManagerEx codeStyleManager=(CodeStyleManagerEx)CodeStyleManager.getInstance(context.project);
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,null,null,var.getType());
  final String[] suggestedNames=suggestedNameInfo.names;
  LookupItemUtil.addLookupItems(set,suggestedNames,context.prefix);
  if (set.isEmpty()) {
    suggestedNameInfo=new SuggestedNameInfo(CompletionUtil.getOverlappedNameVersions(context.prefix,suggestedNames,"")){
      public void nameChoosen(      String name){
      }
    }
;
    LookupItemUtil.addLookupItems(set,suggestedNameInfo.names,context.prefix);
  }
  LookupItemUtil.addLookupItems(set,CompletionUtil.getUnserolvedReferences(PsiTreeUtil.getParentOfType(var,PsiCodeBlock.class),false),context.prefix);
  LookupItemUtil.addLookupItems(set,StatisticsManager.getInstance().getNameSuggestions(var.getType(),StatisticsManager.getContext(var),context.prefix),context.prefix);
  return new NamePreferencePolicy(suggestedNameInfo);
}
