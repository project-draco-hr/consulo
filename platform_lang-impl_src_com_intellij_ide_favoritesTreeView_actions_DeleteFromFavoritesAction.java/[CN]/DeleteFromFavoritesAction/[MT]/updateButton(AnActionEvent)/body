{
  e.getPresentation().setText(getTemplatePresentation().getText());
  final DataContext dataContext=e.getDataContext();
  Project project=e.getProject();
  FavoritesViewTreeBuilder builder=FavoritesTreeViewPanel.FAVORITES_TREE_BUILDER_KEY.getData(dataContext);
  if (project == null || builder == null) {
    e.getPresentation().setEnabled(false);
    return;
  }
  Set<Object> selection=builder.getSelectedElements();
  String listName=FavoritesTreeViewPanel.FAVORITES_LIST_NAME_DATA_KEY.getData(dataContext);
  FavoritesManager favoritesManager=FavoritesManager.getInstance(project);
  FavoritesListProvider provider=favoritesManager.getListProvider(listName);
  if (provider != null) {
    boolean willHandle=provider.willHandle(CommonActionsPanel.Buttons.REMOVE,project,selection);
    e.getPresentation().setEnabled(willHandle);
    if (willHandle) {
      e.getPresentation().setText(provider.getCustomName(CommonActionsPanel.Buttons.REMOVE));
    }
    return;
  }
  FavoritesTreeNodeDescriptor[] roots=FavoritesTreeViewPanel.CONTEXT_FAVORITES_ROOTS_DATA_KEY.getData(dataContext);
  if (roots == null || roots.length == 0 || selection.isEmpty()) {
    e.getPresentation().setEnabled(false);
    return;
  }
  for (  Object o : selection) {
    if (o instanceof AbstractTreeNode) {
      AbstractTreeNode node=(AbstractTreeNode)o;
      int deep=getDeep(node);
      if (deep != 2 && deep != 3) {
        e.getPresentation().setEnabled(false);
        return;
      }
    }
 else {
      e.getPresentation().setEnabled(false);
      return;
    }
  }
}
