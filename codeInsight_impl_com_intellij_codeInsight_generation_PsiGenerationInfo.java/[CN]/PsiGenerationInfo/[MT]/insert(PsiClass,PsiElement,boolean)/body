{
  final PsiMember existingMember;
  if (myMember instanceof PsiField) {
    existingMember=aClass.findFieldByName(myMember.getName(),false);
  }
 else   if (myMember instanceof PsiMethod) {
    existingMember=aClass.findMethodBySignature((PsiMethod)myMember,false);
  }
 else   existingMember=null;
  if (existingMember == null) {
    PsiElement newMember=GenerateMembersUtil.insert(aClass,myMember,anchor,before);
    myMember=(T)CodeStyleManager.getInstance(aClass.getProject()).shortenClassReferences(newMember);
  }
 else {
    final PsiModifierList modifierList=myMember.getModifierList();
    final PsiModifierList existingModifierList=existingMember.getModifierList();
    if (modifierList != null && existingModifierList != null) {
      final PsiAnnotation[] psiAnnotations=modifierList.getAnnotations();
      PsiElement annoAnchor=existingModifierList.getAnnotations().length > 0 ? existingModifierList.getAnnotations()[0] : existingModifierList.getFirstChild();
      if (psiAnnotations.length > 0) {
        for (        PsiAnnotation annotation : psiAnnotations) {
          final PsiAnnotation existingAnno=existingModifierList.findAnnotation(annotation.getQualifiedName());
          if (existingAnno != null)           existingAnno.replace(annotation);
 else           existingModifierList.addBefore(annotation,annoAnchor);
        }
      }
    }
    myMember=(T)existingMember;
  }
}
