def __init__(self, ui, path):
    converter_sink.__init__(self, ui, path)
    commandline.__init__(self, ui, 'svn')
    self.delete = []
    self.setexec = []
    self.delexec = []
    self.copies = []
    self.wc = None
    self.cwd = os.getcwd()
    path = os.path.realpath(path)
    created = False
    if os.path.isfile(os.path.join(path, '.svn', 'entries')):
        self.wc = path
        self.run0('update')
    else:
        wcpath = os.path.join(os.getcwd(), (os.path.basename(path) + '-wc'))
        if os.path.isdir(os.path.dirname(path)):
            if (not os.path.exists(os.path.join(path, 'db', 'fs-type'))):
                ui.status((_('initializing svn repository %r\n') % os.path.basename(path)))
                commandline(ui, 'svnadmin').run0('create', path)
                created = path
            path = util.normpath(path)
            if (not path.startswith('/')):
                path = ('/' + path)
            path = ('file://' + path)
        ui.status((_('initializing svn working copy %r\n') % os.path.basename(wcpath)))
        self.run0('checkout', path, wcpath)
        self.wc = wcpath
    self.opener = util.opener(self.wc)
    self.wopener = util.opener(self.wc)
    self.childmap = mapfile(ui, self.join('hg-childmap'))
    self.is_exec = ((util.checkexec(self.wc) and util.is_exec) or None)
    if created:
        hook = os.path.join(created, 'hooks', 'pre-revprop-change')
        fp = open(hook, 'w')
        fp.write(pre_revprop_change)
        fp.close()
        util.set_flags(hook, False, True)
    xport = transport.SvnRaTransport(url=geturl(path))
    self.uuid = svn.ra.get_uuid(xport.ra)
