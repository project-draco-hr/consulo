def __init__(self, ui, url, rev=None):
    super(svn_source, self).__init__(ui, url, rev=rev)
    if (not (url.startswith('svn://') or url.startswith('svn+ssh://') or (os.path.exists(url) and os.path.exists(os.path.join(url, '.svn'))) or issvnurl(ui, url))):
        raise NoRepo((_('%s does not look like a Subversion repository') % url))
    try:
        SubversionException
    except NameError:
        raise MissingTool(_('Subversion python bindings could not be loaded'))
    try:
        version = (svn.core.SVN_VER_MAJOR, svn.core.SVN_VER_MINOR)
        if (version < (1, 4)):
            raise MissingTool((_('Subversion python bindings %d.%d found, 1.4 or later required') % version))
    except AttributeError:
        raise MissingTool(_('Subversion python bindings are too old, 1.4 or later required'))
    self.lastrevs = {}
    latest = None
    try:
        at = url.rfind('@')
        if (at >= 0):
            latest = int(url[(at + 1):])
            url = url[:at]
    except ValueError:
        pass
    self.url = geturl(url)
    self.encoding = 'UTF-8'
    try:
        self.transport = transport.SvnRaTransport(url=self.url)
        self.ra = self.transport.ra
        self.ctx = self.transport.client
        self.baseurl = svn.ra.get_repos_root(self.ra)
        self.module = urllib.unquote(self.url[len(self.baseurl):])
        self.prevmodule = None
        self.rootmodule = self.module
        self.commits = {}
        self.paths = {}
        self.uuid = svn.ra.get_uuid(self.ra)
    except SubversionException:
        ui.traceback()
        raise NoRepo((_('%s does not look like a Subversion repository') % self.url))
    if rev:
        try:
            latest = int(rev)
        except ValueError:
            raise util.Abort((_('svn: revision %s is not an integer') % rev))
    self.startrev = self.ui.config('convert', 'svn.startrev', default=0)
    try:
        self.startrev = int(self.startrev)
        if (self.startrev < 0):
            self.startrev = 0
    except ValueError:
        raise util.Abort((_('svn: start revision %s is not an integer') % self.startrev))
    self.head = self.latest(self.module, latest)
    if (not self.head):
        raise util.Abort((_('no revision found in module %s') % self.module))
    self.last_changed = self.revnum(self.head)
    self._changescache = None
    if os.path.exists(os.path.join(url, '.svn/entries')):
        self.wc = url
    else:
        self.wc = None
    self.convertfp = None
