def gettags(self):
    tags = {}
    if (self.tags is None):
        return tags
    pendings = []
    tagspath = self.tags
    start = svn.ra.get_latest_revnum(self.ra)
    try:
        for entry in self._getlog([self.tags], start, self.startrev):
            (origpaths, revnum, author, date, message) = entry
            copies = [(e.copyfrom_path, e.copyfrom_rev, p) for (p, e) in origpaths.iteritems() if e.copyfrom_path]
            copies.sort(reverse=True)
            srctagspath = tagspath
            if (copies and (copies[(-1)][2] == tagspath)):
                srctagspath = copies.pop()[0]
            for (source, sourcerev, dest) in copies:
                if (not dest.startswith((tagspath + '/'))):
                    continue
                for tag in pendings:
                    if tag[0].startswith(dest):
                        tagpath = (source + tag[0][len(dest):])
                        tag[:2] = [tagpath, sourcerev]
                        break
                else:
                    pendings.append([source, sourcerev, dest])
            addeds = dict(((p, e.copyfrom_path) for (p, e) in origpaths.iteritems() if ((e.action == 'A') and e.copyfrom_path)))
            badroots = set()
            for destroot in addeds:
                for (source, sourcerev, dest) in pendings:
                    if ((not dest.startswith((destroot + '/'))) or source.startswith((addeds[destroot] + '/'))):
                        continue
                    badroots.add(destroot)
                    break
            for badroot in badroots:
                pendings = [p for p in pendings if ((p[2] != badroot) and (not p[2].startswith((badroot + '/'))))]
            remainings = []
            for (source, sourcerev, dest) in pendings:
                tagname = dest.split('/')[(-1)]
                if source.startswith(srctagspath):
                    remainings.append([source, sourcerev, tagname])
                    continue
                if (tagname in tags):
                    continue
                try:
                    tagid = self.latest(source, sourcerev)
                    if (tagid and (tagname not in tags)):
                        tags[tagname] = tagid
                except SvnPathNotFound:
                    pass
            pendings = remainings
            tagspath = srctagspath
    except SubversionException:
        self.ui.note((_('no tags found at revision %d\n') % start))
    return tags
