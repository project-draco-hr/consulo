def expandpaths(self, rev, paths, parents):
    (changed, removed) = (set(), set())
    copyfrom = {}
    copies = {}
    (new_module, revnum) = self.revsplit(rev)[1:]
    if (new_module != self.module):
        self.module = new_module
        self.reparent(self.module)
    for (path, ent) in paths:
        entrypath = self.getrelpath(path)
        kind = self._checkpath(entrypath, revnum)
        if (kind == svn.core.svn_node_file):
            changed.add(self.recode(entrypath))
            if ((not ent.copyfrom_path) or (not parents)):
                continue
            (pmodule, prevnum) = self.revsplit(parents[0])[1:]
            if (ent.copyfrom_rev < prevnum):
                continue
            copyfrom_path = self.getrelpath(ent.copyfrom_path, pmodule)
            if (not copyfrom_path):
                continue
            self.ui.debug(('copied to %s from %s@%s\n' % (entrypath, copyfrom_path, ent.copyfrom_rev)))
            copies[self.recode(entrypath)] = self.recode(copyfrom_path)
        elif (kind == 0):
            self.ui.debug(('gone from %s\n' % ent.copyfrom_rev))
            (pmodule, prevnum) = self.revsplit(parents[0])[1:]
            parentpath = ((pmodule + '/') + entrypath)
            fromkind = self._checkpath(entrypath, prevnum, pmodule)
            if (fromkind == svn.core.svn_node_file):
                removed.add(self.recode(entrypath))
            elif (fromkind == svn.core.svn_node_dir):
                oroot = parentpath.strip('/')
                nroot = path.strip('/')
                children = self._find_children(oroot, prevnum)
                children = [s.replace(oroot, nroot) for s in children]
                for child in children:
                    childpath = self.getrelpath(('/' + child), pmodule)
                    if childpath:
                        removed.add(self.recode(childpath))
            else:
                self.ui.debug(('unknown path in revision %d: %s\n' % (revnum, path)))
        elif (kind == svn.core.svn_node_dir):
            if (ent.action == 'M'):
                continue
            elif ((ent.action == 'R') and parents):
                (pmodule, prevnum) = self.revsplit(parents[0])[1:]
                pkind = self._checkpath(entrypath, prevnum, pmodule)
                if (pkind == svn.core.svn_node_file):
                    removed.add(self.recode(entrypath))
            children = sorted(self._find_children(path, revnum))
            for child in children:
                entrypath = self.getrelpath(('/' + child))
                if entrypath:
                    kind = self._checkpath(entrypath, revnum)
                    if (kind != svn.core.svn_node_dir):
                        changed.add(self.recode(entrypath))
            if ((not ent.copyfrom_path) or (not parents)):
                continue
            (pmodule, prevnum) = self.revsplit(parents[0])[1:]
            if (ent.copyfrom_rev < prevnum):
                continue
            copyfrompath = self.getrelpath(ent.copyfrom_path, pmodule)
            if (not copyfrompath):
                continue
            copyfrom[path] = ent
            self.ui.debug(('mark %s came from %s:%d\n' % (path, copyfrompath, ent.copyfrom_rev)))
            children = self._find_children(ent.copyfrom_path, ent.copyfrom_rev)
            children.sort()
            for child in children:
                entrypath = self.getrelpath(('/' + child), pmodule)
                if (not entrypath):
                    continue
                copytopath = (path + entrypath[len(copyfrompath):])
                copytopath = self.getrelpath(copytopath)
                copies[self.recode(copytopath)] = self.recode(entrypath)
    changed.update(removed)
    return (list(changed), removed, copies)
