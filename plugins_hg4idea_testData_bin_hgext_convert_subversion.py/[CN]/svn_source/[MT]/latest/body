def latest(self, path, stop=0):
    'Find the latest revid affecting path, up to stop. It may return\n        a revision in a different module, since a branch may be moved without\n        a change being reported. Return None if computed module does not\n        belong to rootmodule subtree.\n        '
    if (not path.startswith(self.rootmodule)):
        self.ui.debug(('ignoring foreign branch %r\n' % path))
        return None
    if (not stop):
        stop = svn.ra.get_latest_revnum(self.ra)
    try:
        prevmodule = self.reparent('')
        dirent = svn.ra.stat(self.ra, path.strip('/'), stop)
        self.reparent(prevmodule)
    except SubversionException:
        dirent = None
    if (not dirent):
        raise SvnPathNotFound((_('%s not found up to revision %d') % (path, stop)))
    stream = self._getlog([path], stop, dirent.created_rev)
    try:
        for entry in stream:
            (paths, revnum, author, date, message) = entry
            if (revnum <= dirent.created_rev):
                break
            for p in paths:
                if ((not path.startswith(p)) or (not paths[p].copyfrom_path)):
                    continue
                newpath = (paths[p].copyfrom_path + path[len(p):])
                self.ui.debug(('branch renamed from %s to %s at %d\n' % (path, newpath, revnum)))
                path = newpath
                break
    finally:
        stream.close()
    if (not path.startswith(self.rootmodule)):
        self.ui.debug(('ignoring foreign branch %r\n' % path))
        return None
    return self.revid(dirent.created_rev, path)
