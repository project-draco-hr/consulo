def getheads(self):

    def isdir(path, revnum):
        kind = self._checkpath(path, revnum)
        return (kind == svn.core.svn_node_dir)

    def getcfgpath(name, rev):
        cfgpath = self.ui.config('convert', ('svn.' + name))
        if ((cfgpath is not None) and (cfgpath.strip() == '')):
            return None
        path = (cfgpath or name).strip('/')
        if (not self.exists(path, rev)):
            if cfgpath:
                raise util.Abort((_('expected %s to be at %r, but not found') % (name, path)))
            return None
        self.ui.note((_('found %s at %r\n') % (name, path)))
        return path
    rev = optrev(self.last_changed)
    oldmodule = ''
    trunk = getcfgpath('trunk', rev)
    self.tags = getcfgpath('tags', rev)
    branches = getcfgpath('branches', rev)
    if trunk:
        oldmodule = (self.module or '')
        self.module += ('/' + trunk)
        self.head = self.latest(self.module, self.last_changed)
        if (not self.head):
            raise util.Abort((_('no revision found in module %s') % self.module))
    self.heads = [self.head]
    if (self.tags is not None):
        self.tags = ('%s/%s' % (oldmodule, (self.tags or 'tags')))
    if branches:
        rpath = self.url.strip('/')
        branchnames = svn.client.ls(((rpath + '/') + urllib.quote(branches)), rev, False, self.ctx)
        for branch in branchnames.keys():
            module = ('%s/%s/%s' % (oldmodule, branches, branch))
            if (not isdir(module, self.last_changed)):
                continue
            brevid = self.latest(module, self.last_changed)
            if (not brevid):
                self.ui.note((_('ignoring empty branch %s\n') % branch))
                continue
            self.ui.note((_('found branch %s at %d\n') % (branch, self.revnum(brevid))))
            self.heads.append(brevid)
    if (self.startrev and self.heads):
        if (len(self.heads) > 1):
            raise util.Abort(_('svn: start revision is not supported with more than one branch'))
        revnum = self.revnum(self.heads[0])
        if (revnum < self.startrev):
            raise util.Abort((_('svn: no revision found after start revision %d') % self.startrev))
    return self.heads
