{
  DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
  if (node.getUserObject() instanceof CommittedChangeList) {
    CommittedChangeList changeList=(CommittedChangeList)node.getUserObject();
    final Container parent=tree.getParent();
    int parentWidth=parent == null ? 100 : parent.getWidth() - 44;
    String date=", " + getDateOfChangeList(changeList.getCommitDate());
    final FontMetrics fontMetrics=tree.getFontMetrics(tree.getFont());
    final FontMetrics boldMetrics=tree.getFontMetrics(tree.getFont().deriveFont(Font.BOLD));
    int size=fontMetrics.stringWidth(date);
    size+=boldMetrics.stringWidth(changeList.getCommitterName());
    final Pair<String,Boolean> descriptionInfo=getDescriptionOfChangeList(changeList.getName().trim());
    boolean truncated=descriptionInfo.getSecond().booleanValue();
    String description=descriptionInfo.getFirst();
    for (    CommittedChangeListDecorator decorator : myDecorators) {
      final Icon icon=decorator.decorate(changeList);
      if (icon != null) {
        setIcon(icon);
      }
    }
    int descMaxWidth=parentWidth - size - 8;
    boolean partial=(changeList instanceof ReceivedChangeList) && ((ReceivedChangeList)changeList).isPartial();
    if (partial) {
      final String partialMarker=VcsBundle.message("committed.changes.partial.list") + " ";
      append(partialMarker,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      descMaxWidth-=boldMetrics.stringWidth(partialMarker);
    }
    int descWidth=fontMetrics.stringWidth(description);
    int numberWidth=0;
    final AbstractVcs vcs=changeList.getVcs();
    if (vcs != null) {
      final CachingCommittedChangesProvider provider=vcs.getCachingCommittedChangesProvider();
      if (provider != null && provider.getChangelistTitle() != null) {
        String number="#" + changeList.getNumber() + "  ";
        numberWidth=fontMetrics.stringWidth(number);
        descWidth+=numberWidth;
        append(number,SimpleTextAttributes.GRAY_ATTRIBUTES);
      }
    }
    if (description.length() == 0 && !truncated) {
      append(VcsBundle.message("committed.changes.empty.comment"),SimpleTextAttributes.GRAYED_ATTRIBUTES);
      appendAlign(parentWidth - size);
    }
 else     if (descMaxWidth < 0) {
      myRenderer.appendTextWithLinks(description);
    }
 else     if (descWidth < descMaxWidth && !truncated) {
      myRenderer.appendTextWithLinks(description);
      appendAlign(parentWidth - size);
    }
 else {
      final String moreMarker=VcsBundle.message("changes.browser.details.marker");
      int moreWidth=fontMetrics.stringWidth(moreMarker);
      description=truncateDescription(description,fontMetrics,(descMaxWidth - moreWidth - numberWidth));
      myRenderer.appendTextWithLinks(description);
      append(" ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
      append(moreMarker,LINK_ATTRIBUTES,new MoreLauncher(myProject,changeList));
      appendAlign(parentWidth - size);
    }
    append(changeList.getCommitterName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    append(date,SimpleTextAttributes.REGULAR_ATTRIBUTES);
  }
 else   if (node.getUserObject() != null) {
    append(node.getUserObject().toString(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  }
}
