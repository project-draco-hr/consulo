{
  DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
  if (node.getUserObject() instanceof CommittedChangeList) {
    CommittedChangeList changeList=(CommittedChangeList)node.getUserObject();
    final Container parent=tree.getParent();
    int parentWidth=parent == null ? 100 : parent.getWidth() - 44;
    String date=", " + myDateFormat.format(changeList.getCommitDate());
    final FontMetrics fontMetrics=tree.getFontMetrics(tree.getFont());
    final FontMetrics boldMetrics=tree.getFontMetrics(tree.getFont().deriveFont(Font.BOLD));
    int size=fontMetrics.stringWidth(date);
    size+=boldMetrics.stringWidth(changeList.getCommitterName());
    boolean truncated=false;
    String description=changeList.getName().trim();
    int pos=description.indexOf("\n");
    if (pos >= 0) {
      description=description.substring(0,pos).trim();
      truncated=true;
    }
    for (    CommittedChangeListDecorator decorator : myDecorators) {
      final List<Pair<String,SimpleTextAttributes>> pairs=decorator.decorate(changeList);
      if (pairs != null) {
        for (        Pair<String,SimpleTextAttributes> pair : pairs) {
          append(pair.first + ' ',pair.second);
        }
      }
    }
    int descMaxWidth=parentWidth - size - 8;
    boolean partial=(changeList instanceof ReceivedChangeList) && ((ReceivedChangeList)changeList).isPartial();
    if (partial) {
      final String partialMarker=VcsBundle.message("committed.changes.partial.list") + " ";
      append(partialMarker,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      descMaxWidth-=boldMetrics.stringWidth(partialMarker);
    }
    int descWidth=fontMetrics.stringWidth(description);
    if (description.length() == 0 && !truncated) {
      append(VcsBundle.message("committed.changes.empty.comment"),SimpleTextAttributes.GRAYED_ATTRIBUTES);
      appendAlign(parentWidth - size);
    }
 else     if (descMaxWidth < 0) {
      myRenderer.appendTextWithLinks(description);
    }
 else     if (descWidth < descMaxWidth && !truncated) {
      myRenderer.appendTextWithLinks(description);
      appendAlign(parentWidth - size);
    }
 else {
      final String moreMarker=VcsBundle.message("changes.browser.details.marker");
      int moreWidth=fontMetrics.stringWidth(moreMarker);
      while (description.length() > 0 && descWidth + moreWidth > descMaxWidth) {
        description=trimLastWord(description);
        descWidth=fontMetrics.stringWidth(description + " ");
      }
      myRenderer.appendTextWithLinks(description);
      append(" ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
      append(moreMarker,LINK_ATTRIBUTES,MORE_TAG);
      appendAlign(parentWidth - size);
    }
    append(changeList.getCommitterName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    append(date,SimpleTextAttributes.REGULAR_ATTRIBUTES);
  }
 else   if (node.getUserObject() != null) {
    append(node.getUserObject().toString(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  }
}
