{
  myToolWindowManager=toolWindowManager;
  myChangeSupport=new PropertyChangeSupport(this);
  myId=id;
  myAvailable=true;
  final ContentFactory contentFactory=ServiceManager.getService(ContentFactory.class);
  myContentUI=new ToolWindowContentUi(this);
  myContentManager=contentFactory.createContentManager(myContentUI,canCloseContent,toolWindowManager.getProject());
  if (component != null) {
    final Content content=contentFactory.createContent(component,"",false);
    myContentManager.addContent(content);
    myContentManager.setSelectedContent(content,false);
  }
  myComponent=myContentManager.getComponent();
  UiNotifyConnector notifyConnector=new UiNotifyConnector(myComponent,new Activatable.Adapter(){
    @Override public void showNotify(){
      myShowing.onReady();
    }
  }
);
  Disposer.register(myContentManager,notifyConnector);
}
