{
  JavaResolveResult result=myCachedConstructor;
  if (result != null)   return result;
  result=JavaResolveResult.EMPTY;
  ASTNode classRef=findChildByRole(ChildRole.TYPE_REFERENCE);
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
  if (classRef != null) {
    ASTNode argumentList=TreeUtil.skipElements(classRef.getTreeNext(),StdTokenSets.WHITE_SPACE_OR_COMMENT_BIT_SET);
    if (argumentList != null && argumentList.getElementType() == EXPRESSION_LIST) {
      PsiType aClass=facade.getElementFactory().createType((PsiJavaCodeReferenceElement)SourceTreeToPsiMap.treeElementToPsi(classRef));
      result=facade.getResolveHelper().resolveConstructor((PsiClassType)aClass,(PsiExpressionList)SourceTreeToPsiMap.treeElementToPsi(argumentList),this);
    }
  }
 else {
    ASTNode anonymousClassElement=TreeUtil.findChild(this,ANONYMOUS_CLASS);
    if (anonymousClassElement != null) {
      final PsiAnonymousClass anonymousClass=(PsiAnonymousClass)SourceTreeToPsiMap.treeElementToPsi(anonymousClassElement);
      PsiType aClass=anonymousClass.getBaseClassType();
      ASTNode argumentList=TreeUtil.findChild(anonymousClassElement,EXPRESSION_LIST);
      result=facade.getResolveHelper().resolveConstructor((PsiClassType)aClass,(PsiExpressionList)SourceTreeToPsiMap.treeElementToPsi(argumentList),anonymousClass);
    }
  }
  return myCachedConstructor=result;
}
