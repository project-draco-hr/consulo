{
  myProject=project;
  myEditor=editor;
  myType=type;
  myParameterCloseChars=parameterCloseChars;
  myLbraceMarker=editor.getDocument().createRangeMarker(lbraceOffset,lbraceOffset);
  myHint=hint;
  myComponent=(ParameterInfoComponent)myHint.getComponent();
  ArrayList<ParameterInfoController> allControllers=getAllControllers(myEditor);
  allControllers.add(this);
  myEditorCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      if (myType == TYPE_XML_ATTRS) {
        myAlarm.cancelAllRequests();
        addAlarmRequest();
        return;
      }
      int oldOffset=myEditor.logicalPositionToOffset(e.getOldPosition());
      int newOffset=myEditor.logicalPositionToOffset(e.getNewPosition());
      if (newOffset <= myLbraceMarker.getStartOffset()) {
        myAlarm.cancelAllRequests();
        addAlarmRequest();
        return;
      }
      int offset1=Math.min(oldOffset,newOffset);
      int offset2=Math.max(oldOffset,newOffset);
      CharSequence chars=myEditor.getDocument().getCharsSequence();
      int offset=CharArrayUtil.shiftForwardUntil(chars,offset1,myParameterCloseChars);
      if (offset < offset2) {
        myAlarm.cancelAllRequests();
        addAlarmRequest();
      }
 else {
        if (myAlarm.cancelAllRequests() > 0) {
          addAlarmRequest();
        }
      }
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditorDocumentListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      CharSequence oldS=e.getOldFragment();
      if (CharArrayUtil.shiftForwardUntil(oldS,0,myParameterCloseChars) < oldS.length()) {
        myAlarm.cancelAllRequests();
        addAlarmRequest();
        return;
      }
      CharSequence newS=e.getNewFragment();
      if (CharArrayUtil.shiftForwardUntil(newS,0,myParameterCloseChars) < newS.length()) {
        myAlarm.cancelAllRequests();
        addAlarmRequest();
        return;
      }
      if (myAlarm.cancelAllRequests() > 0) {
        addAlarmRequest();
      }
    }
  }
;
  myEditor.getDocument().addDocumentListener(myEditorDocumentListener);
  myLookupListener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (LookupManager.PROP_ACTIVE_LOOKUP.equals(evt.getPropertyName())) {
        final Lookup lookup=(Lookup)evt.getNewValue();
        if (lookup != null) {
          adjustPositionForLookup(lookup);
        }
      }
    }
  }
;
  LookupManager.getInstance(project).addPropertyChangeListener(myLookupListener);
  updateComponent();
}
