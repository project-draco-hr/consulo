{
  final PsiMethodCallExpression methodCall=myMethodCall.getElement();
  if (methodCall == null)   return null;
  final PsiElement parent=methodCall.getParent();
  if (parent instanceof PsiVariable) {
    if (methodCall.equals(PsiResolveHelperImpl.skipParenthesizedExprDown(((PsiVariable)parent).getInitializer()))) {
      return ((PsiVariable)parent).getType();
    }
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    if (methodCall.equals(PsiResolveHelperImpl.skipParenthesizedExprDown(((PsiAssignmentExpression)parent).getRExpression()))) {
      return ((PsiAssignmentExpression)parent).getLExpression().getType();
    }
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(parent,PsiLambdaExpression.class);
    if (lambdaExpression != null) {
      return LambdaUtil.getFunctionalInterfaceReturnType(lambdaExpression.getFunctionalInterfaceType());
    }
 else {
      PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
      if (method != null) {
        return method.getReturnType();
      }
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiElement pParent=parent.getParent();
    if (pParent instanceof PsiCallExpression && parent.equals(((PsiCallExpression)pParent).getArgumentList())) {
      final JavaResolveResult resolveResult=((PsiCallExpression)pParent).resolveMethodGenerics();
      final PsiElement psiElement=resolveResult.getElement();
      if (psiElement instanceof PsiMethod) {
        final PsiParameter[] parameters=((PsiMethod)psiElement).getParameterList().getParameters();
        final int idx=ArrayUtilRt.find(((PsiExpressionList)parent).getExpressions(),methodCall);
        return idx > -1 ? resolveResult.getSubstitutor().substitute(parameters[idx].getType()) : null;
      }
    }
  }
 else   if (parent instanceof PsiLambdaExpression) {
    return LambdaUtil.getFunctionalInterfaceReturnType(((PsiLambdaExpression)parent).getFunctionalInterfaceType());
  }
  return null;
}
