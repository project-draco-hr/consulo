{
  final BaseListPopupStep<PsiMethod> step=new BaseListPopupStep<PsiMethod>(QuickFixBundle.message("class.to.import.chooser.title"),candidates){
    @Override public PopupStep onChosen(    PsiMethod selectedValue,    boolean finalChoice){
      if (selectedValue == null) {
        return FINAL_CHOICE;
      }
      if (finalChoice) {
        PsiDocumentManager.getInstance(project).commitAllDocuments();
        LOG.assertTrue(selectedValue.isValid());
        doImport(selectedValue);
        return FINAL_CHOICE;
      }
      String qname=getMemberQualifiedName(selectedValue);
      if (qname == null)       return FINAL_CHOICE;
      List<String> excludableStrings=AddImportAction.getAllExcludableStrings(qname);
      return new BaseListPopupStep<String>(null,excludableStrings){
        @NotNull @Override public String getTextFor(        String value){
          return "Exclude '" + value + "' from auto-import";
        }
        @Override public PopupStep onChosen(        String selectedValue,        boolean finalChoice){
          if (finalChoice) {
            AddImportAction.excludeFromImport(project,selectedValue);
          }
          return super.onChosen(selectedValue,finalChoice);
        }
      }
;
    }
    @Override public boolean hasSubstep(    PsiMethod selectedValue){
      return true;
    }
    @NotNull @Override public String getTextFor(    PsiMethod value){
      return ObjectUtils.assertNotNull(value.getName());
    }
    @Override public Icon getIconFor(    PsiMethod aValue){
      return aValue.getIcon(0);
    }
  }
;
  final ListPopupImpl popup=new ListPopupImpl(step){
    final PopupListElementRenderer rightArrow=new PopupListElementRenderer(this);
    @Override protected ListCellRenderer getListElementRenderer(){
      return new MethodCellRenderer(true,PsiFormatUtilBase.SHOW_NAME){
        @Override protected DefaultListCellRenderer getRightCellRenderer(){
          final DefaultListCellRenderer moduleRenderer=super.getRightCellRenderer();
          return new DefaultListCellRenderer(){
            @Override public Component getListCellRendererComponent(            JList list,            Object value,            int index,            boolean isSelected,            boolean cellHasFocus){
              Component moduleComponent=moduleRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
              rightArrow.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
              Component rightArrowComponent=rightArrow.getNextStepLabel();
              JPanel panel=new JPanel(new BorderLayout());
              panel.add(moduleComponent,BorderLayout.CENTER);
              panel.add(rightArrowComponent,BorderLayout.EAST);
              return panel;
            }
          }
;
        }
      }
;
    }
  }
;
  popup.showInBestPositionFor(editor);
}
