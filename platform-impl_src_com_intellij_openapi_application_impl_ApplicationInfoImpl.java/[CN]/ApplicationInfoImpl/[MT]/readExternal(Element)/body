{
  Element versionElement=parentNode.getChild(ELEMENT_VERSION);
  if (versionElement != null) {
    myMajorVersion=versionElement.getAttributeValue(ATTRIBUTE_MAJOR);
    myMinorVersion=versionElement.getAttributeValue(ATTRIBUTE_MINOR);
    myCodeName=versionElement.getAttributeValue(ATTRIBUTE_CODENAME);
    myEAP=Boolean.parseBoolean(versionElement.getAttributeValue(ATTRIBUTE_EAP));
  }
  Element buildElement=parentNode.getChild(ELEMENT_BUILD);
  if (buildElement != null) {
    myBuildNumber=buildElement.getAttributeValue(ATTRIBUTE_NUMBER);
    String dateString=buildElement.getAttributeValue(ATTRIBUTE_DATE);
    if (dateString.equals("__BUILD_DATE__")) {
      myBuildDate=new GregorianCalendar();
    }
 else {
      int year=0;
      int month=0;
      int day=0;
      try {
        year=Integer.parseInt(dateString.substring(0,4));
        month=Integer.parseInt(dateString.substring(4,6));
        day=Integer.parseInt(dateString.substring(6,8));
      }
 catch (      Exception ex) {
      }
      if (month > 0) {
        month--;
      }
      myBuildDate=new GregorianCalendar(year,month,day);
    }
  }
  Thread currentThread=Thread.currentThread();
  currentThread.setName(currentThread.getName() + " " + myMajorVersion+ "."+ myMinorVersion+ "#"+ myBuildNumber+ ", eap:"+ myEAP);
  Element logoElement=parentNode.getChild(ELEMENT_LOGO);
  if (logoElement != null) {
    myLogoUrl=logoElement.getAttributeValue(ATTRIBUTE_URL);
    final int rgb=Integer.parseInt(logoElement.getAttributeValue(ATTRIBUTE_TEXTCOLOR),16);
    myLogoTextColor=new Color(rgb);
  }
  Element aboutLogoElement=parentNode.getChild(ELEMENT_ABOUT);
  if (aboutLogoElement != null) {
    myAboutLogoUrl=aboutLogoElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element iconElement=parentNode.getChild(ELEMENT_ICON);
  if (iconElement != null) {
    myIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE32);
    mySmallIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE16);
    myOpaqueIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE32OPAQUE);
    final String toolWindowIcon=iconElement.getAttributeValue(ATTRIBUTE_SIZE12);
    if (toolWindowIcon != null) {
      myToolWindowIconUrl=toolWindowIcon;
    }
  }
  Element packageElement=parentNode.getChild(ELEMENT_PACKAGE);
  if (packageElement != null) {
    myPackageCode=packageElement.getAttributeValue(ATTRIBUTE_CODE);
  }
  Element showLicensee=parentNode.getChild(ELEMENT_LICENSEE);
  if (showLicensee != null) {
    myShowLicensee=Boolean.valueOf(showLicensee.getAttributeValue(ATTRIBUTE_SHOW)).booleanValue();
  }
  Element welcomeScreen=parentNode.getChild(WELCOME_SCREEN_ELEMENT_NAME);
  if (welcomeScreen != null) {
    myWelcomeScreenCaptionUrl=welcomeScreen.getAttributeValue(CAPTION_URL_ATTR);
    myWelcomeScreenDeveloperSloganUrl=welcomeScreen.getAttributeValue(SLOGAN_URL_ATTR);
  }
  Element helpElement=parentNode.getChild(HELP_ELEMENT_NAME);
  if (helpElement != null) {
    myHelpFileName=helpElement.getAttributeValue(ATTRIBUTE_HELP_FILE);
    myHelpRootName=helpElement.getAttributeValue(ATTRIBUTE_HELP_ROOT);
  }
  Element updateUrls=parentNode.getChild(UPDATE_URLS_ELEMENT_NAME);
  myUpdateUrls=new UpdateUrlsImpl(updateUrls);
  Element eapUpdateUrls=parentNode.getChild(EAP_UPDATE_URLS_ELEMENT_NAME);
  myEapUpdateUrls=new UpdateUrlsImpl(eapUpdateUrls);
  Element documentationElement=parentNode.getChild(ELEMENT_DOCUMENTATION);
  if (documentationElement != null) {
    myDocumentationUrl=documentationElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element supportElement=parentNode.getChild(ELEMENT_SUPPORT);
  if (supportElement != null) {
    mySupportUrl=supportElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element feedbackElement=parentNode.getChild(ELEMENT_FEEDBACK);
  if (feedbackElement != null) {
    myEAPFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_EAP_URL);
    myReleaseFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_RELEASE_URL);
  }
  Element pluginsElement=parentNode.getChild(ELEMENT_PLUGINS);
  if (pluginsElement != null) {
    myPluginManagerUrl=pluginsElement.getAttributeValue(ATTRIBUTE_URL);
  }
 else {
    myPluginManagerUrl="http://plugins.intellij.net";
  }
  myPluginChooserPages=new ArrayList<PluginChooserPage>();
  final List children=parentNode.getChildren(PLUGINS_PAGE_ELEMENT_NAME);
  for (  Object child : children) {
    myPluginChooserPages.add(new PluginChooserPageImpl((Element)child));
  }
}
