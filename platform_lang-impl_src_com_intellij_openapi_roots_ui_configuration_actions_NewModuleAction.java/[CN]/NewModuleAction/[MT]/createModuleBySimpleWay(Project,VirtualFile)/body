{
  final ModuleManager moduleManager=ModuleManager.getInstance(project);
  FileChooserDescriptor fileChooserDescriptor=new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      if (!super.isFileSelectable(file)) {
        return false;
      }
      for (      Module module : moduleManager.getModules()) {
        VirtualFile moduleDir=module.getModuleDir();
        if (moduleDir != null && moduleDir.equals(file)) {
          return false;
        }
      }
      return true;
    }
  }
;
  fileChooserDescriptor.setTitle(ProjectBundle.message("choose.module.home"));
  VirtualFile moduleDir=FileChooser.chooseFile(fileChooserDescriptor,project,virtualFile != null && virtualFile.isDirectory() ? virtualFile : null);
  if (moduleDir == null) {
    return null;
  }
  final ModifiableModuleModel modifiableModel=moduleManager.getModifiableModel();
  Module newModule=modifiableModel.newModule(moduleDir.getNameWithoutExtension(),moduleDir.getPath());
  ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(newModule);
  final ModifiableRootModel moduleRootManagerModifiableModel=moduleRootManager.getModifiableModel();
  moduleRootManagerModifiableModel.addContentEntry(moduleDir);
  new WriteAction<Object>(){
    @Override protected void run(    Result<Object> result) throws Throwable {
      moduleRootManagerModifiableModel.commit();
      modifiableModel.commit();
    }
  }
.execute();
  return newModule;
}
