{
  final List<String> notes=myOptions.parse(args);
  for (  String note : notes) {
    System.err.println("Warning: " + note);
  }
  final List<String> projects=myOptions.getFree();
  for (  String prj : projects) {
    final ProjectWrapper project=new ProjectWrapper(prj);
    if (doClean()) {
      System.out.println("Cleaning project \"" + prj + "\"");
      project.load();
      project.clean();
      project.save();
    }
    if (doRebuild()) {
      System.out.println("Rebuilding project \"" + prj + "\"");
      project.load();
      project.rebuild();
      project.save();
    }
    final Options.Argument make=doMake();
    if (make instanceof Options.Value) {
      final String module=((Options.Value)make).get();
      System.out.println("Making module \"" + module + "\" in project \""+ prj+ "\"");
      project.load();
      project.makeModule(module,doForce());
      project.save();
    }
 else     if (make instanceof Options.Switch) {
      System.out.println("Making project \"" + prj + "\"");
      project.load();
      project.make();
      project.save();
    }
    final Options.Argument inspect=doInspect();
    if (inspect instanceof Options.Switch) {
      project.load();
      project.report();
    }
 else     if (inspect instanceof Options.Value) {
      project.load();
      project.report(((Options.Value)inspect).get());
    }
  }
}
