{
  File projectDir=new File(projectPath);
  GradleConnector connector=GradleConnector.newConnector();
  int ttl=-1;
  if (settings != null) {
switch (settings.getDistributionType()) {
case LOCAL:
      String gradleHome=settings.getGradleHome();
    if (gradleHome != null) {
      try {
        connector.useInstallation(new File(gradleHome).getCanonicalFile());
      }
 catch (      IOException e) {
        connector.useInstallation(new File(settings.getGradleHome()));
      }
    }
  break;
case WRAPPED:
if (settings.getWrapperPropertyFile() != null) {
  File propertiesFile=new File(settings.getWrapperPropertyFile());
  Distribution distribution=new DistributionFactoryExt(StartParameter.DEFAULT_GRADLE_USER_HOME).getWrappedDistribution(propertiesFile);
  try {
    setField(connector,"distribution",distribution);
  }
 catch (  Exception e) {
    throw new ExternalSystemException(e);
  }
}
break;
}
String serviceDirectory=settings.getServiceDirectory();
if (serviceDirectory != null) {
connector.useGradleUserHomeDir(new File(serviceDirectory));
}
if (settings.isVerboseProcessing() && connector instanceof DefaultGradleConnector) {
((DefaultGradleConnector)connector).setVerboseLogging(true);
}
ttl=(int)settings.getRemoteProcessIdleTtlInMs();
}
if (ttl > 0 && connector instanceof DefaultGradleConnector) {
((DefaultGradleConnector)connector).daemonMaxIdleTime(ttl,TimeUnit.MILLISECONDS);
}
connector.forProjectDirectory(projectDir);
ProjectConnection connection=connector.connect();
if (connection == null) {
throw new IllegalStateException(String.format("Can't create connection to the target project via gradle tooling api. Project path: '%s'",projectPath));
}
return connection;
}
