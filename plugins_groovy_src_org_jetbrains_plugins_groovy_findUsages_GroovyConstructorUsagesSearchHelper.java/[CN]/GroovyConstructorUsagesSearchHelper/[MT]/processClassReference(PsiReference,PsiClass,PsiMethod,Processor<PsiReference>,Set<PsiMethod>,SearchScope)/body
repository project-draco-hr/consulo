{
  final PsiElement element=ref.getElement();
  if (element instanceof GrCodeReferenceElement) {
    if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return processGroovyConstructorUsages((GrCodeReferenceElement)element,constructor,consumer,ref);
      }
    }
)) {
      return false;
    }
  }
  final PsiMethod method=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod>(){
    public PsiMethod compute(){
      return getMethodToSearchForCallsWithLiteralArguments(element,clazz,processedMethods);
    }
  }
);
  if (method != null) {
    return MethodReferencesSearch.search(method,getGppScope(clazz.getProject()).intersectWith(scope),true).forEach(new ReadActionProcessor<PsiReference>(){
      @Override public boolean processInReadAction(      PsiReference psiReference){
        if (psiReference instanceof GrReferenceElement) {
          final PsiElement parent=((GrReferenceElement)psiReference).getParent();
          if (parent instanceof GrCall) {
            final GrArgumentList argList=((GrCall)parent).getArgumentList();
            if (argList != null) {
              boolean checkedTypedContext=false;
              for (              GrExpression argument : argList.getExpressionArguments()) {
                if (argument instanceof GrListOrMap && !((GrListOrMap)argument).isMap()) {
                  if (!checkedTypedContext) {
                    if (!GppTypeConverter.hasTypedContext(parent)) {
                      return true;
                    }
                    checkedTypedContext=true;
                  }
                  for (                  PsiType psiType : GroovyExpectedTypesProvider.getDefaultExpectedTypes(argument)) {
                    if (psiType instanceof PsiClassType && clazz.getManager().areElementsEquivalent(clazz,((PsiClassType)psiType).resolve()) && !checkListInstantiation(constructor,consumer,(GrListOrMap)argument,(PsiClassType)psiType)) {
                      return false;
                    }
                  }
                }
              }
            }
          }
        }
        return true;
      }
    }
);
  }
  return true;
}
