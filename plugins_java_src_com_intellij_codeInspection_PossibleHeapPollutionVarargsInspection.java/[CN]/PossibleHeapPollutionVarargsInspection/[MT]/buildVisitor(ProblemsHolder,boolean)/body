{
  return new HeapPollutionVisitor(){
    @Override protected void registerProblem(    PsiMethod method,    PsiIdentifier nameIdentifier){
      final LocalQuickFix quickFix;
      if (method.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.STATIC) || method.isConstructor()) {
        quickFix=new AnnotateAsSafeVarargsQuickFix();
      }
 else {
        final PsiClass containingClass=method.getContainingClass();
        LOG.assertTrue(containingClass != null);
        boolean canBeFinal=!method.hasModifierProperty(PsiModifier.ABSTRACT) && !containingClass.isInterface() && OverridingMethodsSearch.search(method).findFirst() == null;
        quickFix=canBeFinal ? new MakeFinalAndAnnotateQuickFix() : null;
      }
      holder.registerProblem(nameIdentifier,"Possible heap pollution from parameterized vararg type #loc",quickFix);
    }
  }
;
}
