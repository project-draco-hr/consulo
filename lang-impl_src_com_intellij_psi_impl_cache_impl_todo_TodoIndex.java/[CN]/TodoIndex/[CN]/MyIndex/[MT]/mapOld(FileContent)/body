{
  if (fileContent == null) {
    return Collections.emptyMap();
  }
  final int fileId=Math.abs(FileBasedIndex.getFileId(fileContent.getFile()));
  final Map<TodoIndexEntry,Integer> result=new HashMap<TodoIndexEntry,Integer>();
  final Lock lock=getReadLock();
  try {
    lock.lock();
    final IndexStorage<TodoIndexEntry,Integer> storage=getStorage();
    final Ref<StorageException> nestedException=new Ref<StorageException>();
    storage.processKeys(new Processor<TodoIndexEntry>(){
      public boolean process(      final TodoIndexEntry todoIndexEntry){
        try {
          final ValueContainer<Integer> valueContainer=storage.read(todoIndexEntry);
          final Iterator<Integer> iterator=valueContainer.getValueIterator();
          while (iterator.hasNext()) {
            final Integer value=iterator.next();
            if (valueContainer.isAssociated(value,fileId)) {
              result.put(todoIndexEntry,value);
              break;
            }
          }
          return true;
        }
 catch (        StorageException e) {
          nestedException.set(e);
          return false;
        }
      }
    }
);
    final StorageException storageException=nestedException.get();
    if (storageException != null) {
      throw storageException;
    }
  }
  finally {
    lock.unlock();
  }
  return result;
}
