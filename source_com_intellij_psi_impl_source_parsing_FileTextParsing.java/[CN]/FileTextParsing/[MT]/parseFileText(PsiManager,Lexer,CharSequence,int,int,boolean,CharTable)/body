{
  FilterLexer filterLexer=new FilterLexer(lexer,new FilterLexer.SetFilter(StdTokenSets.WHITE_SPACE_OR_COMMENT_BIT_SET));
  filterLexer.start(buffer,startOffset,endOffset,0);
  final FileElement dummyRoot=new JavaDummyHolder(manager,null,table).getTreeElement();
  JavaParsingContext context=new JavaParsingContext(dummyRoot.getCharTable(),JavaProjectExtension.getInstance(manager.getProject()).getLanguageLevel());
  if (!skipHeader) {
    TreeElement packageStatement=(TreeElement)context.getFileTextParsing().parsePackageStatement(filterLexer);
    if (packageStatement != null) {
      TreeUtil.addChildren(dummyRoot,packageStatement);
    }
    final TreeElement importList=(TreeElement)context.getFileTextParsing().parseImportList(filterLexer);
    TreeUtil.addChildren(dummyRoot,importList);
  }
  CompositeElement invalidElementsGroup=null;
  while (true) {
    if (filterLexer.getTokenType() == null)     break;
    if (filterLexer.getTokenType() == ElementType.SEMICOLON) {
      TreeUtil.addChildren(dummyRoot,ParseUtil.createTokenElement(filterLexer,dummyRoot.getCharTable()));
      filterLexer.advance();
      invalidElementsGroup=null;
      continue;
    }
    TreeElement first=context.getDeclarationParsing().parseDeclaration(filterLexer,DeclarationParsing.Context.FILE_CONTEXT);
    if (first != null) {
      TreeUtil.addChildren(dummyRoot,first);
      invalidElementsGroup=null;
      continue;
    }
    if (invalidElementsGroup == null) {
      invalidElementsGroup=Factory.createErrorElement(JavaErrorMessages.message("expected.class.or.interface"));
      TreeUtil.addChildren(dummyRoot,invalidElementsGroup);
    }
    TreeUtil.addChildren(invalidElementsGroup,ParseUtil.createTokenElement(filterLexer,context.getCharTable()));
    filterLexer.advance();
  }
  ParseUtil.insertMissingTokens(dummyRoot,lexer,startOffset,endOffset,-1,ParseUtil.WhiteSpaceAndCommentsProcessor.INSTANCE,context);
  return dummyRoot.getFirstChildNode();
}
