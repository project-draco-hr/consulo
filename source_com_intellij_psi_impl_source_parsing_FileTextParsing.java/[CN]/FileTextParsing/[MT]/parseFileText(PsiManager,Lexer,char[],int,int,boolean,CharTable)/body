{
  if (lexer == null) {
    lexer=new JavaLexer(manager.getEffectiveLanguageLevel());
  }
  FilterLexer filterLexer=new FilterLexer(lexer,new FilterLexer.SetFilter(WHITE_SPACE_OR_COMMENT_BIT_SET));
  filterLexer.start(buffer,startOffset,endOffset);
  final FileElement dummyRoot=new DummyHolder(manager,null,table).getTreeElement();
  ParsingContext context=new ParsingContext(dummyRoot.getCharTable());
  if (!skipHeader) {
    TreeElement packageStatement=context.getFileTextParsing().parsePackageStatement(filterLexer);
    if (packageStatement != null) {
      TreeUtil.addChildren(dummyRoot,packageStatement);
    }
    final TreeElement importList=context.getFileTextParsing().parseImportList(filterLexer);
    TreeUtil.addChildren(dummyRoot,importList);
  }
  CompositeElement invalidElementsGroup=null;
  while (true) {
    if (filterLexer.getTokenType() == null)     break;
    if (filterLexer.getTokenType() == ElementType.SEMICOLON) {
      TreeUtil.addChildren(dummyRoot,ParseUtil.createTokenElement(filterLexer,dummyRoot.getCharTable()));
      filterLexer.advance();
      invalidElementsGroup=null;
      continue;
    }
    TreeElement first=context.getDeclarationParsing().parseDeclaration(filterLexer,DeclarationParsing.FILE_CONTEXT);
    if (first != null) {
      TreeUtil.addChildren(dummyRoot,first);
      invalidElementsGroup=null;
      continue;
    }
    if (invalidElementsGroup == null) {
      invalidElementsGroup=Factory.createErrorElement("'class' or 'interface' expected");
      TreeUtil.addChildren(dummyRoot,invalidElementsGroup);
    }
    TreeUtil.addChildren(invalidElementsGroup,ParseUtil.createTokenElement(filterLexer,context.getCharTable()));
    filterLexer.advance();
  }
  ParseUtil.insertMissingTokens(dummyRoot,lexer,startOffset,endOffset,ParseUtil.WhiteSpaceAndCommentsProcessor.INSTANCE,context);
  return dummyRoot.firstChild;
}
