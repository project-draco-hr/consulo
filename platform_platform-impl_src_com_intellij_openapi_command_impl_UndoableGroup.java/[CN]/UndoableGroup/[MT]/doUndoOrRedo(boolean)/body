{
  final boolean wrapInBulkUpdate=myActions.size() > 50;
  final Set<DocumentEx> bulkDocuments=new THashSet<DocumentEx>();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        for (        final UndoableAction action : isUndo ? ContainerUtil.iterateBackward(myActions) : myActions) {
          final Collection<DocumentEx> newDocuments;
          if (wrapInBulkUpdate) {
            newDocuments=new THashSet<DocumentEx>();
            Set<DocumentEx> documentsToRemoveFromBulk=new THashSet<DocumentEx>(bulkDocuments);
            DocumentReference[] affectedDocuments=action.getAffectedDocuments();
            if (affectedDocuments != null) {
              for (              DocumentReference affectedDocument : affectedDocuments) {
                VirtualFile file=affectedDocument.getFile();
                if (file == null || !file.isValid())                 continue;
                DocumentEx document=(DocumentEx)affectedDocument.getDocument();
                if (document == null)                 continue;
                documentsToRemoveFromBulk.remove(document);
                if (bulkDocuments.contains(document))                 continue;
                newDocuments.add(document);
                document.setInBulkUpdate(true);
              }
            }
            for (            DocumentEx document : documentsToRemoveFromBulk) {
              document.setInBulkUpdate(false);
            }
            bulkDocuments.removeAll(documentsToRemoveFromBulk);
            bulkDocuments.addAll(newDocuments);
          }
 else {
            newDocuments=Collections.emptyList();
          }
          if (isUndo) {
            action.undo();
          }
 else {
            action.redo();
          }
        }
        for (        DocumentEx bulkDocument : bulkDocuments) {
          bulkDocument.setInBulkUpdate(false);
        }
      }
 catch (      UnexpectedUndoException e) {
        reportUndoProblem(e,isUndo);
      }
    }
  }
);
  commitAllDocuments();
}
