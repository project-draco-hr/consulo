{
  final boolean isScript=typeDefinition instanceof GroovyScriptClass;
  final GroovyFile containingFile=(GroovyFile)typeDefinition.getContainingFile();
  if (toplevel) {
    writePackageStatement(text,containingFile.getPackageDefinition());
  }
  boolean isEnum=typeDefinition.isEnum();
  boolean isAnnotationType=typeDefinition.isAnnotationType();
  boolean isInterface=!isAnnotationType && typeDefinition.isInterface();
  boolean isClassDef=!isInterface && !isEnum && !isAnnotationType&& !isScript;
  GenerationUtil.writeClassModifiers(text,typeDefinition.getModifierList(),typeDefinition.isInterface(),toplevel);
  if (isInterface) {
    text.append("interface");
  }
 else   if (isEnum) {
    text.append("enum");
  }
 else   if (isAnnotationType) {
    text.append("@interface");
  }
 else {
    text.append("class");
  }
  text.append(" ").append(typeDefinition.getName());
  GenerationUtil.writeTypeParameters(text,typeDefinition,classNameProvider);
  text.append(" ");
  if (isScript) {
    text.append("extends ").append(GroovyCommonClassNames.GROOVY_LANG_SCRIPT).append(' ');
  }
 else   if (!isEnum && !isAnnotationType) {
    writeExtendsList(text,typeDefinition);
    writeImplementsList(text,typeDefinition,isInterface);
  }
  text.append("{\n");
  if (isEnum) {
    final GrEnumConstant[] enumConstants=((GrEnumTypeDefinition)typeDefinition).getEnumConstants();
    for (    GrEnumConstant constant : enumConstants) {
      classItemGenerator.writeEnumConstant(text,constant);
      text.append(',');
    }
    if (enumConstants.length > 0) {
      text.replace(text.length() - 1,text.length(),";\n");
    }
  }
  writeAllMethods(text,classItemGenerator.collectMethods(typeDefinition,isClassDef),typeDefinition);
  if (typeDefinition instanceof GrTypeDefinition) {
    for (    GrMembersDeclaration declaration : ((GrTypeDefinition)typeDefinition).getMemberDeclarations()) {
      if (declaration instanceof GrVariableDeclaration) {
        classItemGenerator.writeVariableDeclarations(text,(GrVariableDeclaration)declaration);
      }
    }
    for (    PsiClass inner : typeDefinition.getInnerClasses()) {
      writeTypeDefinition(text,inner,false);
      text.append("\n");
    }
  }
  text.append("}");
}
