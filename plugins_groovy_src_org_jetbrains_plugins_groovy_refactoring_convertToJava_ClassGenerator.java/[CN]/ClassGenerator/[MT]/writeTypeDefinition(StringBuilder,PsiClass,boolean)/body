{
  final boolean isScript=typeDefinition instanceof GroovyScriptClass;
  final GroovyFile containingFile=(GroovyFile)typeDefinition.getContainingFile();
  writePackageStatement(text,containingFile.getPackageDefinition());
  boolean isEnum=typeDefinition.isEnum();
  boolean isAnnotationType=typeDefinition.isAnnotationType();
  boolean isInterface=!isAnnotationType && typeDefinition.isInterface();
  boolean isClassDef=!isInterface && !isEnum && !isAnnotationType&& !isScript;
  GenerationUtil.writeClassModifiers(text,typeDefinition.getModifierList(),typeDefinition.isInterface(),toplevel);
  if (isInterface) {
    text.append("interface");
  }
 else   if (isEnum) {
    text.append("enum");
  }
 else   if (isAnnotationType) {
    text.append("@interface");
  }
 else {
    text.append("class");
  }
  text.append(" ").append(typeDefinition.getName());
  appendTypeParameters(text,typeDefinition);
  text.append(" ");
  if (isScript) {
    text.append("extends groovy.lang.Script ");
  }
 else   if (!isEnum && !isAnnotationType) {
    final PsiClassType[] extendsClassesTypes=typeDefinition.getExtendsListTypes();
    if (extendsClassesTypes.length > 0) {
      text.append("extends ");
      writeType(text,extendsClassesTypes[0],typeDefinition,classNameProvider);
      text.append(" ");
    }
    final Collection<PsiClassType> implementsTypes=new LinkedHashSet<PsiClassType>();
    Collections.addAll(implementsTypes,typeDefinition.getImplementsListTypes());
    if (!implementsTypes.isEmpty()) {
      text.append(isInterface ? "extends " : "implements ");
      for (      PsiClassType implementsType : implementsTypes) {
        writeType(text,implementsType,typeDefinition,classNameProvider);
        text.append(", ");
      }
      if (implementsTypes.size() > 0)       text.delete(text.length() - 2,text.length());
      text.append(" ");
    }
  }
  text.append("{\n");
  if (isEnum) {
    writeEnumConstants(text,(GrEnumTypeDefinition)typeDefinition);
  }
  writeAllMethods(text,collectMethods(typeDefinition,isClassDef),typeDefinition);
  if (typeDefinition instanceof GrTypeDefinition) {
    for (    GrMembersDeclaration declaration : ((GrTypeDefinition)typeDefinition).getMemberDeclarations()) {
      if (declaration instanceof GrVariableDeclaration) {
        writeVariableDeclarations(text,(GrVariableDeclaration)declaration);
      }
    }
    for (    PsiClass inner : typeDefinition.getInnerClasses()) {
      writeTypeDefinition(text,inner,false);
      text.append("\n");
    }
  }
  text.append("}");
}
