{
  if (method == null)   return;
  String name=method.getName();
  if (!JavaPsiFacade.getInstance(method.getProject()).getNameHelper().isIdentifier(name)) {
    return;
  }
  boolean isAbstract=isAbstractInJava(method);
  PsiModifierList modifierList=method.getModifierList();
  GenerationUtil.writeModifiers(text,modifierList,GenerationUtil.JAVA_MODIFIERS);
  if (method.hasTypeParameters()) {
    appendTypeParameters(text,method);
    text.append(" ");
  }
  PsiType retType=findOutReturnTypeOfMethod(method);
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    final List<MethodSignatureBackedByPsiMethod> superSignatures=method.findSuperMethodSignaturesIncludingStatic(true);
    for (    MethodSignatureBackedByPsiMethod superSignature : superSignatures) {
      final PsiType superType=superSignature.getSubstitutor().substitute(superSignature.getMethod().getReturnType());
      if (superType != null && !superType.isAssignableFrom(retType) && !(PsiUtil.resolveClassInType(superType) instanceof PsiTypeParameter)) {
        retType=superType;
      }
    }
  }
  writeType(text,retType,method,classNameProvider);
  text.append(" ");
  text.append(name);
  writeParameterList(text,parameters);
  writeThrowsList(text,method);
  if (!isAbstract) {
    writeMethodBody(text,method,retType);
  }
 else {
    text.append(";");
  }
  text.append("\n");
}
