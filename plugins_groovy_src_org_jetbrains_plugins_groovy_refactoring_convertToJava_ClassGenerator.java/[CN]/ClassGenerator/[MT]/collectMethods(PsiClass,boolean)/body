{
  List<PsiMethod> methods=new ArrayList<PsiMethod>();
  ContainerUtil.addAll(methods,typeDefinition.getMethods());
  if (classDef && classNameProvider.forStubs()) {
    final Collection<MethodSignature> toOverride=OverrideImplementUtil.getMethodSignaturesToOverride(typeDefinition);
    for (    MethodSignature signature : toOverride) {
      if (signature instanceof MethodSignatureBackedByPsiMethod) {
        final PsiMethod method=((MethodSignatureBackedByPsiMethod)signature).getMethod();
        final PsiClass baseClass=method.getContainingClass();
        if (isAbstractInJava(method) && baseClass != null && typeDefinition.isInheritor(baseClass,true)) {
          methods.add(mirrorMethod(typeDefinition,method,baseClass,PsiSubstitutor.EMPTY,GenerationUtil.JAVA_MODIFIERS));
        }
      }
    }
    final PsiElementFactory factory=JavaPsiFacade.getInstance(myProject).getElementFactory();
    methods.add(factory.createMethodFromText("public groovy.lang.MetaClass getMetaClass() {}",null));
    methods.add(factory.createMethodFromText("public void setMetaClass(groovy.lang.MetaClass mc) {}",null));
    methods.add(factory.createMethodFromText("public Object invokeMethod(String name, Object args) {}",null));
    methods.add(factory.createMethodFromText("public Object getProperty(String propertyName) {}",null));
    methods.add(factory.createMethodFromText("public void setProperty(String propertyName, Object newValue) {}",null));
  }
  if (typeDefinition instanceof GrTypeDefinition) {
    for (    PsiMethod delegatedMethod : GrClassImplUtil.getDelegatedMethods((GrTypeDefinition)typeDefinition)) {
      methods.add(delegatedMethod);
    }
  }
  return methods;
}
