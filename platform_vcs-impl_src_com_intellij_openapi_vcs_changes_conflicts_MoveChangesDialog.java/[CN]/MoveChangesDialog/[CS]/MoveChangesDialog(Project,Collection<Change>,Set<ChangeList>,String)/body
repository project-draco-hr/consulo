{
  super(project,true);
  setTitle(title);
  myTreeList=new ChangesTreeList<Change>(project,selected,true,false,null,null){
    @Override protected DefaultTreeModel buildTreeModel(    List<Change> changes,    ChangeNodeDecorator changeNodeDecorator){
      TreeModelBuilder builder=new TreeModelBuilder(project,false);
      return builder.buildModel(new ArrayList<ChangeList>(changeLists));
    }
    @Override protected List<Change> getSelectedObjects(    ChangesBrowserNode<Change> node){
      return node.getAllChangesUnder();
    }
    @Override protected Change getLeadSelectedObject(    ChangesBrowserNode node){
      final Object o=node.getUserObject();
      if (o instanceof Change) {
        return (Change)o;
      }
      return null;
    }
    @Override public Dimension getPreferredSize(){
      return new Dimension(400,200);
    }
  }
;
  ArrayList<Change> changes=new ArrayList<Change>();
  for (  ChangeList list : changeLists) {
    changes.addAll(list.getChanges());
  }
  myTreeList.setChangesToDisplay(changes);
  init();
}
