{
  super(null,project);
  setScrollsOnExpand(false);
  myDescriptorManager=new NodeManagerImpl(project,this);
  TreeBuilder model=new TreeBuilder(this){
    protected void buildChildren(    TreeBuilderNode node){
      if (((DebuggerTreeNodeImpl)node).getDescriptor() instanceof DefaultNodeDescriptor)       return;
      buildNode((DebuggerTreeNodeImpl)node);
    }
    protected boolean isExpandable(    TreeBuilderNode builderNode){
      return DebuggerTree.this.isExpandable((DebuggerTreeNodeImpl)builderNode);
    }
  }
;
  model.setRoot(getNodeFactory().getDefaultNode());
  model.addTreeModelListener(new TreeModelListener(){
    public void treeNodesChanged(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeNodesInserted(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeNodesRemoved(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
    public void treeStructureChanged(    TreeModelEvent event){
      myTipManager.hideTooltip();
    }
  }
);
  setModel(model);
  myProject=project;
  new TreeSpeedSearch(this);
}
