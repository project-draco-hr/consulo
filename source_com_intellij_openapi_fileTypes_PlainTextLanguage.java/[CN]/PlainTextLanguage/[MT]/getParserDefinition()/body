{
  if (myParserDefinition == null) {
    myParserDefinition=new ParserDefinition(){
      @NotNull public Lexer createLexer(      Project project){
        return new EmptyLexer();
      }
      @NotNull public PsiParser createParser(      Project project){
        throw new UnsupportedOperationException("Not supported");
      }
      public IFileElementType getFileNodeType(){
        return new IFileElementType(PlainTextLanguage.this){
          public ASTNode parseContents(          ASTNode chameleon){
            final CharSequence chars=((CharTableBasedLeafElementImpl)chameleon).getInternedText();
            return Factory.createLeafElement(ElementType.PLAIN_TEXT,chars,0,chars.length(),0,SharedImplUtil.findCharTableByTree(chameleon));
          }
        }
;
      }
      @NotNull public TokenSet getWhitespaceTokens(){
        return TokenSet.EMPTY;
      }
      @NotNull public TokenSet getCommentTokens(){
        return StdLanguages.HTML.getParserDefinition().getCommentTokens();
      }
      @NotNull public PsiElement createElement(      ASTNode node){
        return PsiUtil.NULL_PSI_ELEMENT;
      }
      public PsiFile createFile(      FileViewProvider viewProvider){
        return new PsiPlainTextFileImpl(viewProvider);
      }
      public SpaceRequirements spaceExistanceTypeBetweenTokens(      ASTNode left,      ASTNode right){
        return SpaceRequirements.MAY;
      }
    }
;
  }
  return myParserDefinition;
}
