def colored(dag):
    'annotates a DAG with colored edge information\n\n    For each DAG node this function emits tuples::\n\n      (id, type, data, (col, color), [(col, nextcol, color)])\n\n    with the following new elements:\n\n      - Tuple (col, color) with column and color index for the current node\n      - A list of tuples indicating the edges between the current node and its\n        parents.\n    '
    seen = []
    colors = {}
    newcolor = 1
    for (cur, type, data, parents) in dag:
        if (cur not in seen):
            seen.append(cur)
            colors[cur] = newcolor
            newcolor += 1
        col = seen.index(cur)
        color = colors.pop(cur)
        next = seen[:]
        addparents = [p for p in parents if (p not in next)]
        next[col:(col + 1)] = addparents
        for (i, p) in enumerate(addparents):
            if (not i):
                colors[p] = color
            else:
                colors[p] = newcolor
                newcolor += 1
        edges = []
        for (ecol, eid) in enumerate(seen):
            if (eid in next):
                edges.append((ecol, next.index(eid), colors[eid]))
            elif (eid == cur):
                for p in parents:
                    edges.append((ecol, next.index(p), colors[p]))
        yield (cur, type, data, (col, color), edges)
        seen = next
