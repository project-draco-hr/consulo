{
  if (myChange.getAfterRevision() == null)   return createErrorResult();
  FileType type=myChange.getVirtualFile() != null ? myChange.getVirtualFile().getFileType() : null;
  if (myFile.getFileType().isBinary()) {
    final boolean nowItIsText=ChangeDiffRequestPresentable.checkAssociate(myProject,myFile.getName(),context);
    if (!nowItIsText) {
      return createErrorResult();
    }
  }
  final AbstractVcs vcs=ChangesUtil.getVcsForChange(myChange,myProject);
  if (vcs == null || vcs.getMergeProvider() == null) {
    return createErrorResult();
  }
  try {
    final MergeData mergeData=vcs.getMergeProvider().loadRevisions(myFile);
    final Charset charset=myFile.getCharset();
    final MergeRequest request=DiffRequestFactory.getInstance().create3WayDiffRequest(CharsetToolkit.bytesToString(mergeData.CURRENT,charset),CharsetToolkit.bytesToString(mergeData.LAST,charset),CharsetToolkit.bytesToString(mergeData.ORIGINAL,charset),type,myProject,null,null);
    request.setWindowTitle(FileUtil.toSystemDependentName(myFile.getPresentableUrl()));
    VcsRevisionNumber lastRevisionNumber=mergeData.LAST_REVISION_NUMBER;
    request.setVersionTitles(new String[]{myChange.getAfterRevision().getRevisionNumber().asString(),"Base Version",lastRevisionNumber != null ? lastRevisionNumber.asString() : ""});
    return new MyResult(request,DiffPresentationReturnValue.useRequest);
  }
 catch (  VcsException e) {
    LOG.info(e);
    return createErrorResult();
  }
}
