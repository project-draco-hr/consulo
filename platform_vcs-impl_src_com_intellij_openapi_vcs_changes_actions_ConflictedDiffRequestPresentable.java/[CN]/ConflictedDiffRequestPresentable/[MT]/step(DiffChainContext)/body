{
  if (myChange.getAfterRevision() == null)   return createErrorResult();
  final Getter<MergeTexts> mergeProvider=myChange.getMergeProvider();
  if (mergeProvider != null) {
    final MergeTexts texts=mergeProvider.get();
    if (texts == null) {
      return createErrorResult();
    }
    final MergeRequest request=DiffRequestFactory.getInstance().create3WayDiffRequest(texts.getLeft(),texts.getRight(),texts.getBase(),myProject,null,null);
    request.setWindowTitle(FileUtil.toSystemDependentName(myFile.getPresentableUrl()));
    request.setVersionTitles(new String[]{myChange.getAfterRevision().getRevisionNumber().asString(),"Base Version","Last Revision"});
    return new MyResult(request,DiffPresentationReturnValue.useRequest);
  }
 else {
    if (myFile.getFileType().isBinary()) {
      final boolean nowItIsText=ChangeDiffRequestPresentable.checkAssociate(myProject,new FilePathImpl(myFile),context);
      if (!nowItIsText) {
        return createErrorResult();
      }
    }
    final AbstractVcs vcs=ChangesUtil.getVcsForChange(myChange,myProject);
    if (vcs == null || vcs.getMergeProvider() == null) {
      return createErrorResult();
    }
    try {
      final MergeData mergeData=vcs.getMergeProvider().loadRevisions(myFile);
      if (mergeData == null) {
        return createErrorResult();
      }
      final Charset charset=myFile.getCharset();
      final MergeRequest request=DiffRequestFactory.getInstance().create3WayDiffRequest(CharsetToolkit.bytesToString(mergeData.CURRENT,charset),CharsetToolkit.bytesToString(mergeData.LAST,charset),CharsetToolkit.bytesToString(mergeData.ORIGINAL,charset),myProject,null,null);
      request.setWindowTitle(FileUtil.toSystemDependentName(myFile.getPresentableUrl()));
      VcsRevisionNumber lastRevisionNumber=mergeData.LAST_REVISION_NUMBER;
      request.setVersionTitles(new String[]{myChange.getAfterRevision().getRevisionNumber().asString(),"Base Version",lastRevisionNumber != null ? lastRevisionNumber.asString() : ""});
      return new MyResult(request,DiffPresentationReturnValue.useRequest);
    }
 catch (    VcsException e) {
      LOG.info(e);
      return createErrorResult();
    }
  }
}
