{
synchronized (PsiLock.LOCK) {
    if (getTreeElement() != null) {
      myCachedBaseType=null;
      return getTypeByTree();
    }
    if (myCachedBaseType == null) {
      final PsiJavaCodeReferenceElement ref;
      long repositoryId=getRepositoryId();
      String refText=getRepositoryManager().getClassView().getBaseClassReferenceText(repositoryId);
      boolean isInQualifiedNew=getRepositoryManager().getClassView().isInQualifiedNew(repositoryId);
      if (!isInQualifiedNew) {
        final DummyHolder holder=new DummyHolder(myManager,calcBasesResolveContext(PsiNameHelper.getShortClassName(refText),getExtendsList()));
        final FileElement holderElement=holder.getTreeElement();
        ref=(PsiJavaCodeReferenceElementImpl)Parsing.parseJavaCodeReferenceText(myManager,refText.toCharArray(),holderElement.getCharTable());
        TreeUtil.addChildren(holderElement,(TreeElement)ref);
        ((PsiJavaCodeReferenceElementImpl)ref).setKindWhenDummy(PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND);
      }
 else {
        return getTypeByTree();
      }
      myCachedBaseType=myManager.getElementFactory().createType(ref);
    }
    return myCachedBaseType;
  }
}
