{
  final PsiClassStub stub=getStub();
  if (stub == null) {
    myCachedBaseType=null;
    return getTypeByTree();
  }
  PsiClassType type=null;
  if (myCachedBaseType != null)   type=myCachedBaseType.get();
  if (type != null)   return type;
  if (!isInQualifiedNew()) {
    final PsiJavaCodeReferenceElement ref;
    String refText=stub.getBaseClassReferenceText();
    final DummyHolder holder=DummyHolderFactory.createHolder(getManager(),calcBasesResolveContext(PsiNameHelper.getShortClassName(refText),getExtendsList()));
    final FileElement holderElement=holder.getTreeElement();
    ref=(PsiJavaCodeReferenceElementImpl)Parsing.parseJavaCodeReferenceText(getManager(),refText,holderElement.getCharTable());
    if (ref == null) {
      type=PsiClassType.getJavaLangObject(getManager(),getResolveScope());
      myCachedBaseType=new PatchedSoftReference<PsiClassType>(type);
      return type;
    }
    TreeUtil.addChildren(holderElement,(TreeElement)ref);
    ((PsiJavaCodeReferenceElementImpl)ref).setKindWhenDummy(PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND);
    type=JavaPsiFacade.getInstance(getProject()).getElementFactory().createType(ref);
    myCachedBaseType=new PatchedSoftReference<PsiClassType>(type);
    return type;
  }
 else {
    return getTypeByTree();
  }
}
