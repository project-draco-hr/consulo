{
  final FileViewProvider viewProvider=file.getViewProvider();
  if (viewProvider.getBaseLanguage() != file.getLanguage())   return;
  if (getScopeOfInterest() != null && !getScopeOfInterest().contains(file))   return;
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    if (indicator.isCanceled()) {
      throw new ProcessCanceledException();
    }
    indicator.setText(AnalysisScopeBundle.message("package.dependencies.progress.text"));
    final VirtualFile virtualFile=file.getVirtualFile();
    if (virtualFile != null) {
      indicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,getProject()));
    }
    if (myTotalFileCount > 0) {
      indicator.setFraction(((double)++myFileCount) / myTotalFileCount);
    }
  }
  final Set<PsiFile> collectedDeps=new HashSet<PsiFile>();
  final HashSet<PsiFile> processed=new HashSet<PsiFile>();
  collectedDeps.add(file);
  do {
    if (depth++ > getTransitiveBorder())     return;
    for (    PsiFile psiFile : new HashSet<PsiFile>(collectedDeps)) {
      final Set<PsiFile> found=new HashSet<PsiFile>();
      if (!processed.contains(psiFile)) {
        processed.add(psiFile);
        analyzeFileDependencies(psiFile,new DependencyProcessor(){
          public void process(          PsiElement place,          PsiElement dependency){
            PsiFile dependencyFile=dependency.getContainingFile();
            if (dependencyFile != null) {
              if (viewProvider == dependencyFile.getViewProvider())               return;
              if (dependencyFile.isPhysical()) {
                final VirtualFile virtualFile=dependencyFile.getVirtualFile();
                if (virtualFile != null && (fileIndex.isInContent(virtualFile) || fileIndex.isInLibraryClasses(virtualFile) || fileIndex.isInLibrarySource(virtualFile))) {
                  found.add(dependencyFile);
                }
              }
            }
          }
        }
);
        Set<PsiFile> deps=getDependencies().get(file);
        if (deps == null) {
          deps=new HashSet<PsiFile>();
          getDependencies().put(file,deps);
        }
        deps.addAll(found);
        getDirectDependencies().put(psiFile,new HashSet<PsiFile>(found));
        collectedDeps.addAll(found);
        psiManager.dropResolveCaches();
        psiManager.dropFileCaches(file);
      }
    }
    collectedDeps.removeAll(processed);
  }
 while (isTransitive() && !collectedDeps.isEmpty());
}
