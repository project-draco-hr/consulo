{
  Color color=null;
  NodeDescriptor descriptor=null;
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    Object userObject=node.getUserObject();
    if (userObject instanceof NodeDescriptor) {
      descriptor=(NodeDescriptor)userObject;
      color=descriptor.getColor();
      setIcon(descriptor.getIcon());
    }
  }
  if (descriptor instanceof PresentableNodeDescriptor) {
    final PresentableNodeDescriptor node=(PresentableNodeDescriptor)descriptor;
    final PresentationData presentation=node.getPresentation();
    final List<PresentableNodeDescriptor.ColoredFragment> coloredText=presentation.getColoredText();
    if (coloredText.isEmpty()) {
      String text=tree.convertValueToText(value.toString(),selected,expanded,leaf,row,hasFocus);
      SimpleTextAttributes simpleTextAttributes=getSimpleTextAttributes(node,presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color);
      append(text,simpleTextAttributes);
    }
 else {
      boolean first=true;
      for (      PresentableNodeDescriptor.ColoredFragment each : coloredText) {
        SimpleTextAttributes simpleTextAttributes=each.getAttributes();
        if (each.getAttributes().getFgColor() == null && presentation.getForcedTextForeground() != null) {
          simpleTextAttributes=addColorToSimpleTextAttributes(each.getAttributes(),presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color);
        }
        if (first) {
          final TextAttributesKey textAttributesKey=presentation.getTextAttributesKey();
          if (textAttributesKey != null) {
            final TextAttributes forcedAttributes=getColorsScheme().getAttributes(textAttributesKey);
            if (forcedAttributes != null) {
              simpleTextAttributes=SimpleTextAttributes.merge(SimpleTextAttributes.fromTextAttributes(forcedAttributes),simpleTextAttributes);
            }
          }
          first=false;
        }
        boolean isMain=simpleTextAttributes != SimpleTextAttributes.GRAYED_ATTRIBUTES;
        append(each.getText(),simpleTextAttributes,isMain);
      }
    }
    final String location=presentation.getLocationString();
    if (!StringUtil.isEmpty(location)) {
      append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(),SimpleTextAttributes.GRAY_ATTRIBUTES,false);
    }
    setToolTipText(presentation.getTooltip());
  }
 else   if (value != null) {
    String text=value.toString();
    if (descriptor != null) {
      text=descriptor.myName;
    }
    text=tree.convertValueToText(text,selected,expanded,leaf,row,hasFocus);
    if (text == null) {
      text="";
    }
    append(text);
    setToolTipText(null);
  }
  if (!AbstractTreeUi.isLoadingNode(value)) {
    SpeedSearchUtil.applySpeedSearchHighlighting(tree,this,true,selected);
  }
}
