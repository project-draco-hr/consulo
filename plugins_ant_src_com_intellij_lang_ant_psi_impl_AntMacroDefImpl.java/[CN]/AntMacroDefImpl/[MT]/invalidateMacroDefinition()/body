{
  if (!hasNameElement()) {
    myMacroDefinition=null;
    return;
  }
  final AntFile file=getAntFile();
  final String thisClassName=toString();
  final HashMap<String,AntAttributeType> attributes=new HashMap<String,AntAttributeType>();
  final HashMap<AntTypeId,String> nestedElements=new HashMap<AntTypeId,String>();
  for (  AntElement child : getChildren()) {
    if (child instanceof AntStructuredElement) {
      AntStructuredElement se=(AntStructuredElement)child;
      final String name=se.getName();
      if (name != null) {
        final String tagName=se.getSourceElement().getName();
        if (tagName.equals("attribute")) {
          attributes.put(name,AntAttributeType.STRING);
        }
 else         if (tagName.equals("element")) {
          final AntTypeDefinitionImpl nestedDef=new AntTypeDefinitionImpl((AntTypeDefinitionImpl)file.getTargetDefinition());
          final AntTypeId typeId=new AntTypeId(name);
          nestedDef.setTypeId(typeId);
          nestedDef.setIsTask(false);
          nestedDef.setClassName(thisClassName + '.' + name);
          nestedDef.setDefiningElement(child);
          file.registerCustomType(nestedDef);
          nestedElements.put(typeId,nestedDef.getClassName());
        }
      }
    }
  }
  myMacroDefinition=new AntTypeDefinitionImpl(new AntTypeId(getName()),thisClassName,true,attributes,nestedElements,this);
  getAntParent().registerCustomType(myMacroDefinition);
}
