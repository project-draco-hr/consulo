{
  if (!hasNameElement()) {
    myMacroDefinition=null;
    return;
  }
  final AntFile file=getAntFile();
  final String thisClassName=toString();
  myMacroDefinition=(AntTypeDefinitionImpl)file.getBaseTypeDefinition(thisClassName);
  final Map<String,AntAttributeType> attributes=(myMacroDefinition == null) ? new HashMap<String,AntAttributeType>() : myMacroDefinition.getAttributesMap();
  final Map<AntTypeId,String> nestedElements=(myMacroDefinition == null) ? new HashMap<AntTypeId,String>() : myMacroDefinition.getNestedElementsMap();
  for (  AntElement child : getChildren()) {
    if (child instanceof AntStructuredElement) {
      AntStructuredElement se=(AntStructuredElement)child;
      final String name=se.getName();
      if (name != null) {
        final String tagName=se.getSourceElement().getName();
        if (tagName.equals("attribute")) {
          attributes.put(name,AntAttributeType.STRING);
        }
 else         if (tagName.equals("element")) {
          final String elementClassName=thisClassName + '$' + name;
          AntTypeDefinitionImpl nestedDef=(AntTypeDefinitionImpl)file.getBaseTypeDefinition(elementClassName);
          if (nestedDef == null) {
            nestedDef=new AntTypeDefinitionImpl((AntTypeDefinitionImpl)file.getTargetDefinition());
          }
          final AntTypeId typeId=new AntTypeId(name);
          nestedDef.setTypeId(typeId);
          nestedDef.setClassName(elementClassName);
          nestedDef.setIsTask(false);
          nestedDef.setDefiningElement(child);
          file.registerCustomType(nestedDef);
          nestedElements.put(typeId,nestedDef.getClassName());
        }
      }
    }
  }
  final AntTypeId definedTypeId=new AntTypeId(getName());
  if (myMacroDefinition == null) {
    myMacroDefinition=new AntTypeDefinitionImpl(definedTypeId,thisClassName,true,attributes,nestedElements,this);
  }
 else {
    myMacroDefinition.setTypeId(definedTypeId);
    myMacroDefinition.setClassName(thisClassName);
    myMacroDefinition.setIsTask(true);
    myMacroDefinition.setDefiningElement(this);
  }
  getAntParent().registerCustomType(myMacroDefinition);
  AntAllTasksContainerImpl sequential=PsiTreeUtil.getChildOfType(this,AntAllTasksContainerImpl.class);
  if (sequential != null) {
    final AntTypeDefinition sequentialDef=sequential.getTypeDefinition();
    if (sequentialDef != null) {
      sequentialDef.registerNestedType(definedTypeId,thisClassName);
    }
  }
}
