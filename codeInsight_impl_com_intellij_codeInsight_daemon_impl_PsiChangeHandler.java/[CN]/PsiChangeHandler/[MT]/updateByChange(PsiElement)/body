{
  final Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
  if (editor != null) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        EditorMarkupModel markupModel=(EditorMarkupModel)editor.getMarkupModel();
        markupModel.setErrorStripeRenderer(markupModel.getErrorStripeRenderer());
      }
    }
,ModalityState.stateForComponent(editor.getComponent()));
  }
  PsiFile file=child.getContainingFile();
  if (file == null) {
    myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
    return;
  }
  Document document=PsiDocumentManager.getInstance(myProject).getCachedDocument(file);
  if (document == null)   return;
  if (child instanceof PsiWhiteSpace || child instanceof PsiComment || child instanceof PsiDocToken|| PropertiesTokenTypes.PROPERTIES_TYPES_TO_IGNORE.contains(child.getNode().getElementType())) {
    return;
  }
  PsiElement parent=child;
  while (true) {
    if (parent instanceof PsiFile || parent instanceof PsiDirectory) {
      myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
      return;
    }
    PsiElement pparent=parent.getParent();
    if (parent instanceof XmlTag) {
      PsiElement dirtyScope=pparent;
      if (pparent instanceof XmlTag && "head".equals(((XmlTag)pparent).getLocalName())) {
        final PsiFile containingFile=parent.getContainingFile();
        final FileType fileType=containingFile == null ? null : containingFile.getFileType();
        if (fileType == StdFileTypes.JSP || fileType == StdFileTypes.JSPX || fileType == StdFileTypes.HTML || fileType == StdFileTypes.XHTML) {
          dirtyScope=containingFile;
        }
      }
      myDaemonCodeAnalyzer.getFileStatusMap().markFileScopeDirty(document,dirtyScope);
      return;
    }
    if (parent instanceof PsiCodeBlock && pparent instanceof PsiMethod && !((PsiMethod)pparent).isConstructor()&& pparent.getParent() instanceof PsiClass&& !(pparent.getParent() instanceof PsiAnonymousClass)) {
      myDaemonCodeAnalyzer.getFileStatusMap().markFileScopeDirty(document,pparent);
      return;
    }
    parent=pparent;
  }
}
