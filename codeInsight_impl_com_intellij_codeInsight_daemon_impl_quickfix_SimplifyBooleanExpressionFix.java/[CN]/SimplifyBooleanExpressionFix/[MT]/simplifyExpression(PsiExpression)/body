{
  final PsiExpression[] result=new PsiExpression[]{(PsiExpression)expression.copy()};
  final ExpressionVisitor expressionVisitor=new ExpressionVisitor(expression.getManager(),true);
  final IncorrectOperationException[] exception=new IncorrectOperationException[]{null};
  result[0].accept(new PsiRecursiveElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      PsiElement[] children=element.getChildren();
      for (      PsiElement child : children) {
        child.accept(this);
      }
    }
    @Override public void visitExpression(    PsiExpression expression){
      super.visitExpression(expression);
      expressionVisitor.clear();
      expression.accept(expressionVisitor);
      if (expressionVisitor.resultExpression != null) {
        LOG.assertTrue(expressionVisitor.resultExpression.isValid());
        try {
          if (expression != result[0]) {
            expression.replace(expressionVisitor.resultExpression);
          }
 else {
            result[0]=expressionVisitor.resultExpression;
          }
        }
 catch (        IncorrectOperationException e) {
          exception[0]=e;
        }
      }
    }
  }
);
  if (exception[0] != null) {
    throw exception[0];
  }
  PsiExpression newExpression=(PsiExpression)expression.replace(result[0]);
  simplifyIfStatement(newExpression);
}
