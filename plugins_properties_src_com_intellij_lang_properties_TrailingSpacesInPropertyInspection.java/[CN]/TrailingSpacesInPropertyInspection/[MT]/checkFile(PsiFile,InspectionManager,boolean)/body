{
  if (!(file instanceof PropertiesFile))   return null;
  final List<Property> properties=((PropertiesFile)file).getProperties();
  final List<ProblemDescriptor> descriptors=new SmartList<ProblemDescriptor>();
  for (  Property property : properties) {
    ProgressManager.checkCanceled();
    ASTNode keyNode=((PropertyImpl)property).getKeyNode();
    if (keyNode != null) {
      PsiElement key=keyNode.getPsi();
      TextRange textRange=getTrailingSpaces(key);
      if (textRange != null) {
        descriptors.add(manager.createProblemDescriptor(key,textRange,"Trailing Spaces",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,true,RemoveTrailingSpacesFix.INSTANCE));
      }
    }
    ASTNode valueNode=((PropertyImpl)property).getValueNode();
    if (valueNode != null) {
      PsiElement value=valueNode.getPsi();
      TextRange textRange=getTrailingSpaces(value);
      if (textRange != null) {
        descriptors.add(manager.createProblemDescriptor(value,textRange,"Trailing Spaces",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,true,RemoveTrailingSpacesFix.INSTANCE));
      }
    }
  }
  return descriptors.toArray(new ProblemDescriptor[descriptors.size()]);
}
