{
  final JavaFileObject result=super.getJavaFileForOutput(location,className,kind,fileObject);
  final String classFileName=result.toUri().toString();
  final String sourceFileName=fileObject.toUri().toString();
  return new ForwardingJavaFileObject<JavaFileObject>(result){
    @Override public OutputStream openOutputStream() throws IOException {
      final OutputStream result=super.openOutputStream();
      return new OutputStream(){
        public void flush() throws IOException {
          result.flush();
        }
        public void close() throws IOException {
          result.close();
        }
        public void write(        int b) throws IOException {
          assert(false);
        }
        public void write(        byte[] b) throws IOException {
          assert(false);
        }
        public void write(        byte[] b,        int off,        int len) throws IOException {
          if (kind.equals(JavaFileObject.Kind.CLASS) && callback != null) {
            final ClassReader reader=new ClassReader(b,off,len);
            callback.associate(classFileName,Callbacks.getDefaultLookup(sourceFileName),reader);
          }
          result.write(b,off,len);
          result.flush();
        }
      }
;
    }
  }
;
}
