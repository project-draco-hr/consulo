{
  final TreeChangeEvent changeSet=event == null ? null : (TreeChangeEvent)event.getChangeSet(((PomModel)event.getSource()).getModelAspect(TreeAspect.class));
  final CharTable charTable=SharedImplUtil.findCharTableByTree(leafElement);
  LeafElement whiteSpaceElement=Factory.createSingleLeafElement(whiteSpaceToken,whiteSpace.toCharArray(),0,whiteSpace.length(),charTable,SharedImplUtil.getManagerByTree(leafElement));
  ASTNode treePrev=getWsCandidate(leafElement);
  if (treePrev == null) {
    if (whiteSpace.length() > 0) {
      if (changeSet == null) {
        final ASTNode treeParent=leafElement.getTreeParent();
        treeParent.addChild(whiteSpaceElement,leafElement);
      }
 else {
        TreeUtil.insertBefore((TreeElement)leafElement,whiteSpaceElement);
        ((CompositeElement)leafElement.getTreeParent()).subtreeChanged();
        changeSet.addElementaryChange(whiteSpaceElement,ChangeInfoImpl.create(ChangeInfo.ADD,whiteSpaceElement,charTable));
      }
    }
  }
 else   if (!isSpaceTextElement(treePrev)) {
    if (changeSet != null) {
      TreeUtil.insertBefore((TreeElement)treePrev,whiteSpaceElement);
      ((CompositeElement)treePrev.getTreeParent()).subtreeChanged();
      changeSet.addElementaryChange(whiteSpaceElement,ChangeInfoImpl.create(ChangeInfo.ADD,whiteSpaceElement,charTable));
    }
 else {
      final ASTNode treeParent=treePrev.getTreeParent();
      treeParent.addChild(whiteSpaceElement,treePrev);
    }
  }
 else   if (!isWhiteSpaceElement(treePrev)) {
    return getWhiteSpaceBefore(leafElement);
  }
 else {
    if (changeSet != null) {
      TreeUtil.replaceWithList((TreeElement)treePrev,whiteSpaceElement);
      final ReplaceChangeInfoImpl change=(ReplaceChangeInfoImpl)ChangeInfoImpl.create(ChangeInfo.REPLACE,whiteSpaceElement,charTable);
      change.setReplaced(treePrev);
      whiteSpaceElement.getTreeParent().subtreeChanged();
      changeSet.addElementaryChange(whiteSpaceElement,change);
    }
 else {
      final CompositeElement treeParent=(CompositeElement)treePrev.getTreeParent();
      treeParent.replaceChild(treePrev,whiteSpaceElement);
      treeParent.subtreeChanged();
    }
  }
  return getWhiteSpaceBefore(leafElement);
}
