{
  boolean useOptimization=true;
  boolean hasNonTabs=false;
  boolean hasTabs=false;
  for (int i=start; i < end; i++) {
    if (text.charAt(i) == '\t') {
      hasTabs=true;
      if (hasNonTabs) {
        useOptimization=false;
        break;
      }
    }
 else {
      hasNonTabs=true;
    }
  }
  if (editor == null || useOptimization) {
    if (!hasTabs) {
      int result=start + columnNumber - currentColumn[0];
      if (result < end) {
        return result;
      }
 else {
        currentColumn[0]+=end - start;
        return -1;
      }
    }
    int shift=0;
    int offset=start;
    int prevX=x;
    for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) {
      if (text.charAt(offset) == '\t') {
        int nextX=nextTabStop(prevX,editor,tabSize);
        shift+=columnsNumber(nextX - prevX,getSpaceWidth(Font.PLAIN,editor)) - 1;
        prevX=nextX;
      }
    }
    int diff=start + columnNumber - offset - shift - currentColumn[0];
    if (diff < 0) {
      return offset - 1;
    }
 else     if (diff == 0) {
      return offset;
    }
 else {
      currentColumn[0]+=offset - start + shift;
      return -1;
    }
  }
  EditorEx editorImpl=(EditorEx)editor;
  int offset=start;
  IterationState state=new IterationState(editorImpl,start,end,false);
  int column;
  try {
    int fontType=state.getMergedAttributes().getFontType();
    column=currentColumn[0];
    int spaceSize=getSpaceWidth(fontType,editorImpl);
    for (; column < columnNumber && offset < end; offset++) {
      if (offset >= state.getEndOffset()) {
        state.advance();
        fontType=state.getMergedAttributes().getFontType();
      }
      char c=text.charAt(offset);
      if (c == '\t') {
        int prevX=x;
        x=nextTabStop(x,editorImpl);
        column+=columnsNumber(x - prevX,spaceSize);
      }
 else {
        x+=charWidth(c,fontType,editorImpl);
        column++;
      }
    }
  }
  finally {
    state.dispose();
  }
  if (column == columnNumber) {
    return offset;
  }
  if (column > columnNumber && offset > 0 && text.charAt(offset - 1) == '\t') {
    return offset - 1;
  }
  currentColumn[0]=column;
  return -1;
}
