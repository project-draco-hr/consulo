{
  boolean useOptimization=true;
  if (editor != null) {
    SoftWrap softWrap=editor.getSoftWrapModel().getSoftWrap(start);
    useOptimization=softWrap == null;
  }
  boolean hasTabs=true;
  if (useOptimization) {
    if (editor instanceof EditorImpl && !((EditorImpl)editor).hasTabs()) {
      hasTabs=false;
    }
 else {
      boolean hasNonTabs=false;
      for (int i=start; i < offset; i++) {
        if (text.charAt(i) == '\t') {
          if (hasNonTabs) {
            useOptimization=false;
            break;
          }
        }
 else {
          hasNonTabs=true;
        }
      }
    }
  }
  if (editor == null || useOptimization) {
    int shift=0;
    Document document=editor == null ? null : editor.getDocument();
    if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) {
      String editorInfo=editor instanceof EditorImpl ? ". Editor info: " + ((EditorImpl)editor).dumpState() : "";
      String documentInfo;
      if (text instanceof Dumpable) {
        documentInfo=((Dumpable)text).dumpState();
      }
 else {
        documentInfo="Text holder class: " + text.getClass();
      }
      LogMessageEx.error(LOG,"detected incorrect offset -> column number calculation","start: " + start + ", given offset: "+ offset+ ", given tab size: "+ tabSize+ ". "+ documentInfo+ editorInfo);
    }
    if (hasTabs) {
      for (int i=start; i < offset; i++) {
        char c=text.charAt(i);
        if (c == '\t') {
          shift+=getTabLength(i + shift - start,tabSize) - 1;
        }
      }
    }
    return offset - start + shift;
  }
  EditorEx editorImpl=(EditorEx)editor;
  return editorImpl.calcColumnNumber(text,start,offset,tabSize);
}
