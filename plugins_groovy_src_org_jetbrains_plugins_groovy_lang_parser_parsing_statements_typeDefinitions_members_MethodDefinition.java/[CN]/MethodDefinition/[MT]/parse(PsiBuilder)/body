{
  PsiBuilder.Marker constrMarker=builder.mark();
  if (!ParserUtils.getToken(builder,mIDENT)) {
    constrMarker.rollbackTo();
    return WRONGWAY;
  }
  if (!ParserUtils.getToken(builder,mLPAREN)) {
    constrMarker.rollbackTo();
    builder.error(GroovyBundle.message("lparen.expected"));
    return WRONGWAY;
  }
  if (ParserUtils.lookAhead(builder,kFINAL) || ParserUtils.lookAhead(builder,kDEF) || ParserUtils.lookAhead(builder,mAT)) {
    ParameterDeclarationList.parse(builder);
  }
  if (!ParserUtils.getToken(builder,mRPAREN)) {
    constrMarker.rollbackTo();
    builder.error(GroovyBundle.message("rparen.expected"));
    return WRONGWAY;
  }
  ThrowClause.parse(builder);
  NlsWarn.parse(builder);
  IElementType methodBody=MethodBody.parse(builder);
  if (METHOD_BODY.equals(methodBody)) {
    constrMarker.done(METHOD_DEFINITION);
    return METHOD_DEFINITION;
  }
 else   if (CONSTRUCTOR_BODY.equals(methodBody)) {
    constrMarker.done(CONSTRUCTOR_DEFINITION);
    return CONSTRUCTOR_DEFINITION;
  }
 else {
    constrMarker.rollbackTo();
    return WRONGWAY;
  }
}
