{
  myBuffer=new StringBuffer();
  myIsFirstParameterStack=new Stack<Boolean>();
  final HashMap<LwComponent,String> component2variable=new HashMap<LwComponent,String>();
  final TObjectIntHashMap<String> class2variableIndex=new TObjectIntHashMap<String>();
  final HashMap<String,LwComponent> id2component=new HashMap<String,LwComponent>();
  if (rootContainer.getComponentCount() != 1) {
    throw new CodeGenerationException(null,UIDesignerBundle.message("error.one.toplevel.component.required"));
  }
  final LwComponent topComponent=(LwComponent)rootContainer.getComponent(0);
  String id=Utils.findNotEmptyPanelWithXYLayout(topComponent);
  if (id != null) {
    throw new CodeGenerationException(id,UIDesignerBundle.message("error.nonempty.xy.panels.found"));
  }
  final PsiClass classToBind=FormEditingUtil.findClassToBind(module,rootContainer.getClassToBind());
  if (classToBind == null) {
    throw new ClassToBindNotFoundException(UIDesignerBundle.message("error.class.to.bind.not.found",rootContainer.getClassToBind()));
  }
  final boolean haveCustomCreateComponents=Utils.getCustomCreateComponentCount(rootContainer) > 0;
  if (haveCustomCreateComponents) {
    if (FormEditingUtil.findCreateComponentsMethod(classToBind) == null) {
      throw new CodeGenerationException(null,UIDesignerBundle.message("error.no.custom.create.method"));
    }
    myBuffer.append(AsmCodeGenerator.CREATE_COMPONENTS_METHOD_NAME).append("();");
  }
  generateSetupCodeForComponent(topComponent,component2variable,class2variableIndex,id2component,module,classToBind);
  generateComponentReferenceProperties(topComponent,component2variable,class2variableIndex,id2component,classToBind);
  generateButtonGroups(rootContainer,component2variable,class2variableIndex,id2component,classToBind);
  final String methodText=myBuffer.toString();
  final PsiManager psiManager=PsiManager.getInstance(module.getProject());
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  PsiClass newClass=(PsiClass)classToBind.copy();
  cleanup(newClass);
  final PsiClass fakeClass=elementFactory.createClassFromText("{\n" + "// GUI initializer generated by " + ApplicationNamesInfo.getInstance().getFullProductName() + " GUI Designer\n"+ "// >>> IMPORTANT!! <<<\n"+ "// DO NOT EDIT OR ADD ANY CODE HERE!\n"+ ""+ AsmCodeGenerator.SETUP_METHOD_NAME+ "();\n"+ "}\n"+ "\n"+ "/** Method generated by "+ ApplicationNamesInfo.getInstance().getFullProductName()+ " GUI Designer\n"+ " * >>> IMPORTANT!! <<<\n"+ " * DO NOT edit this method OR call it in your code!\n"+ " * @noinspection ALL\n"+ " */\n"+ "private void "+ AsmCodeGenerator.SETUP_METHOD_NAME+ "()\n"+ "{\n"+ methodText+ "}\n",null);
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(module.getProject());
  PsiMethod method=(PsiMethod)newClass.add(fakeClass.getMethods()[0]);
  boolean needInitializer=true;
  boolean needSetupUI=false;
  for (  PsiMethod constructor : newClass.getConstructors()) {
    if (containsMethodIdentifier(constructor,method)) {
      needInitializer=false;
    }
 else     if (haveCustomCreateComponents && hasCustomComponentAffectingReferences(constructor,newClass,rootContainer,null)) {
      needInitializer=false;
      needSetupUI=true;
    }
  }
  if (needSetupUI) {
    for (    PsiMethod constructor : newClass.getConstructors()) {
      addSetupUICall(constructor,rootContainer);
    }
  }
  if (needInitializer) {
    newClass.addBefore(fakeClass.getInitializers()[0],method);
  }
  @NonNls final String grcMethodText="/** @noinspection ALL */ public javax.swing.JComponent " + AsmCodeGenerator.GET_ROOT_COMPONENT_METHOD_NAME + "() { return "+ topComponent.getBinding()+ "; }";
  generateMethodIfRequired(newClass,method,AsmCodeGenerator.GET_ROOT_COMPONENT_METHOD_NAME,grcMethodText,topComponent.getBinding() != null);
  final String loadButtonTextMethodText=getLoadMethodText(AsmCodeGenerator.LOAD_BUTTON_TEXT_METHOD,AbstractButton.class,module);
  generateMethodIfRequired(newClass,method,AsmCodeGenerator.LOAD_BUTTON_TEXT_METHOD,loadButtonTextMethodText,myNeedLoadButtonText);
  final String loadLabelTextMethodText=getLoadMethodText(AsmCodeGenerator.LOAD_LABEL_TEXT_METHOD,JLabel.class,module);
  generateMethodIfRequired(newClass,method,AsmCodeGenerator.LOAD_LABEL_TEXT_METHOD,loadLabelTextMethodText,myNeedLoadLabelText);
  newClass=(PsiClass)codeStyleManager.shortenClassReferences(newClass);
  newClass=(PsiClass)codeStyleManager.reformat(newClass);
  if (!lexemsEqual(classToBind,newClass)) {
    classToBind.replace(newClass);
  }
}
