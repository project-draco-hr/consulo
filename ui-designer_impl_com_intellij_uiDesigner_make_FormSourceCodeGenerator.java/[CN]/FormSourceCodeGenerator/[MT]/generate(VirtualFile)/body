{
  final Module module=ModuleUtil.getModuleForFile(myProject,formFile);
  if (module == null) {
    return;
  }
  final PsiPropertiesProvider propertiesProvider=new PsiPropertiesProvider(module);
  final Document doc=FileDocumentManager.getInstance().getDocument(formFile);
  final LwRootContainer rootContainer;
  try {
    rootContainer=Utils.getRootContainer(doc.getText(),propertiesProvider);
  }
 catch (  AlienFormFileException ignored) {
    return;
  }
catch (  Exception e) {
    myErrors.add(UIDesignerBundle.message("error.cannot.process.form.file",e));
    return;
  }
  if (rootContainer.getClassToBind() == null) {
    return;
  }
  ErrorAnalyzer.analyzeErrors(module,formFile,null,rootContainer);
  FormEditingUtil.iterate(rootContainer,new FormEditingUtil.ComponentVisitor<LwComponent>(){
    public boolean visit(    final LwComponent iComponent){
      final ErrorInfo errorInfo=ErrorAnalyzer.getErrorForComponent(iComponent);
      if (errorInfo != null) {
        myErrors.add(errorInfo.myDescription);
      }
      return true;
    }
  }
);
  if (myErrors.size() != 0) {
    return;
  }
  if ("GridBagLayout".equals(rootContainer.getLayoutManager())) {
    myLayoutSourceGenerator=new GridBagLayoutSourceGenerator();
  }
 else {
    myLayoutSourceGenerator=new GridLayoutSourceGenerator();
  }
  try {
    _generate(rootContainer,module);
  }
 catch (  ClassToBindNotFoundException e) {
    return;
  }
catch (  CodeGenerationException e) {
    myErrors.add(e.getMessage());
  }
catch (  IncorrectOperationException e) {
    myErrors.add(e.getMessage());
  }
}
