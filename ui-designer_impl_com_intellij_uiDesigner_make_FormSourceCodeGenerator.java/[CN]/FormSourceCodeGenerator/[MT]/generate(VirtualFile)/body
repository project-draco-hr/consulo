{
  myNeedSetMnemonicLabel=false;
  myNeedSetMnemonicButton=false;
  final Module module=VfsUtil.getModuleForFile(myProject,formFile);
  if (module == null) {
    return;
  }
  ourContainerLayoutCodeGenerators.clear();
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_INTELLIJ,new GridLayoutSourceGenerator());
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_GRIDBAG,new GridBagLayoutSourceGenerator());
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_BORDER,new BorderLayoutSourceGenerator());
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_FLOW,new FlowLayoutSourceGenerator());
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_CARD,new CardLayoutSourceGenerator());
  ourContainerLayoutCodeGenerators.put(UIFormXmlConstants.LAYOUT_FORM,new FormLayoutSourceGenerator());
  final PsiPropertiesProvider propertiesProvider=new PsiPropertiesProvider(module);
  final Document doc=FileDocumentManager.getInstance().getDocument(formFile);
  final LwRootContainer rootContainer;
  try {
    rootContainer=Utils.getRootContainer(doc.getText(),propertiesProvider);
  }
 catch (  AlienFormFileException ignored) {
    return;
  }
catch (  Exception e) {
    myErrors.add(new FormErrorInfo(null,UIDesignerBundle.message("error.cannot.process.form.file",e)));
    return;
  }
  if (rootContainer.getClassToBind() == null) {
    return;
  }
  ErrorAnalyzer.analyzeErrors(module,formFile,null,rootContainer,null);
  FormEditingUtil.iterate(rootContainer,new FormEditingUtil.ComponentVisitor<LwComponent>(){
    public boolean visit(    final LwComponent iComponent){
      final ErrorInfo errorInfo=ErrorAnalyzer.getErrorForComponent(iComponent);
      if (errorInfo != null) {
        String message;
        if (iComponent.getBinding() != null) {
          message=UIDesignerBundle.message("error.for.component",iComponent.getBinding(),errorInfo.myDescription);
        }
 else {
          message=errorInfo.myDescription;
        }
        myErrors.add(new FormErrorInfo(iComponent.getId(),message));
      }
      return true;
    }
  }
);
  if (myErrors.size() != 0) {
    return;
  }
  try {
    _generate(rootContainer,module);
  }
 catch (  ClassToBindNotFoundException e) {
    return;
  }
catch (  CodeGenerationException e) {
    myErrors.add(new FormErrorInfo(e.getComponentId(),e.getMessage()));
  }
catch (  IncorrectOperationException e) {
    myErrors.add(new FormErrorInfo(null,e.getMessage()));
  }
}
