{
  id2component.put(component.getId(),component);
  GlobalSearchScope globalSearchScope=module.getModuleWithDependenciesAndLibrariesScope(false);
  final LwContainer parent=component.getParent();
  final String variable=getVariable(component,component2TempVariable,class2variableIndex,aClass);
  final String componentClass=component instanceof LwNestedForm ? getNestedFormClass(module,(LwNestedForm)component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName());
  if (component.isCustomCreate() && component.getBinding() == null) {
    throw new CodeGenerationException(component.getId(),UIDesignerBundle.message("error.custom.create.no.binding"));
  }
  if (!component.isCustomCreate()) {
    final String binding=component.getBinding();
    if (binding != null) {
      myBuffer.append(binding);
    }
 else {
      myBuffer.append("final ");
      myBuffer.append(componentClass);
      myBuffer.append(" ");
      myBuffer.append(variable);
    }
    myBuffer.append('=');
    startConstructor(componentClass);
    endConstructor();
  }
  if (component instanceof LwContainer) {
    getComponentLayoutGenerator((LwContainer)component).generateContainerLayout((LwContainer)component,this,variable);
  }
  final LwIntrospectedProperty[] introspectedProperties=component.getAssignedIntrospectedProperties();
  Arrays.sort(introspectedProperties,new Comparator<LwIntrospectedProperty>(){
    public int compare(    LwIntrospectedProperty p1,    LwIntrospectedProperty p2){
      return p1.getName().compareTo(p2.getName());
    }
  }
);
  for (  final LwIntrospectedProperty property : introspectedProperties) {
    if (property instanceof LwIntroComponentProperty) {
      continue;
    }
    Object value=component.getPropertyValue(property);
    final boolean isTextWithMnemonicProperty="text".equals(property.getName()) && (isAssignableFrom(AbstractButton.class.getName(),componentClass,globalSearchScope) || isAssignableFrom(JLabel.class.getName(),componentClass,globalSearchScope));
    if (property instanceof LwRbIntroStringProperty) {
      final StringDescriptor descriptor=(StringDescriptor)value;
      if (descriptor.getValue() == null) {
        if (isTextWithMnemonicProperty) {
          startStaticMethodCall(SupportCode.class,"setTextFromBundle");
          pushVar(variable);
          push(descriptor.getBundleName());
          push(descriptor.getKey());
          endMethod();
        }
 else {
          startMethodCall(variable,property.getWriteMethodName());
          push(descriptor);
          endMethod();
        }
        continue;
      }
 else {
        value=descriptor.getValue();
      }
    }
 else     if (property instanceof LwIntroListModelProperty) {
      generateListModelProperty(property,class2variableIndex,aClass,value,variable);
      continue;
    }
    SupportCode.TextWithMnemonic textWithMnemonic=null;
    if (isTextWithMnemonicProperty) {
      textWithMnemonic=SupportCode.parseText((String)value);
      value=textWithMnemonic.myText;
    }
    final String propertyClass=property.getPropertyClassName();
    if (propertyClass.equals(Color.class.getName())) {
      ColorDescriptor descriptor=(ColorDescriptor)value;
      if (!descriptor.isColorSet())       continue;
    }
    startMethodCall(variable,property.getWriteMethodName());
    if (propertyClass.equals(Dimension.class.getName())) {
      newDimension((Dimension)value);
    }
 else     if (propertyClass.equals(Integer.class.getName())) {
      push(((Integer)value).intValue());
    }
 else     if (propertyClass.equals(Double.class.getName())) {
      push(((Double)value).doubleValue());
    }
 else     if (propertyClass.equals(Boolean.class.getName())) {
      push(((Boolean)value).booleanValue());
    }
 else     if (propertyClass.equals(Rectangle.class.getName())) {
      newRectangle((Rectangle)value);
    }
 else     if (propertyClass.equals(Insets.class.getName())) {
      newInsets((Insets)value);
    }
 else     if (propertyClass.equals(String.class.getName())) {
      push((String)value);
    }
 else     if (propertyClass.equals(Color.class.getName())) {
      pushColor((ColorDescriptor)value);
    }
 else     if (propertyClass.equals(Font.class.getName())) {
      pushFont(variable,(FontDescriptor)value);
    }
 else     if (propertyClass.equals(Icon.class.getName())) {
      pushIcon((IconDescriptor)value);
    }
 else     if (property instanceof LwIntroEnumProperty) {
      pushVar(propertyClass.replace('$','.') + "." + value.toString());
    }
 else {
      throw new RuntimeException("unexpected property class: " + propertyClass);
    }
    endMethod();
    if (!isTextWithMnemonicProperty) {
      continue;
    }
    if (textWithMnemonic.myMnemonicIndex == -1) {
      continue;
    }
    if (isAssignableFrom(AbstractButton.class.getName(),componentClass,globalSearchScope)) {
      generateSetMnemonic(variable,textWithMnemonic,module,"setMnemonic",AbstractButton.class);
    }
 else     if (isAssignableFrom(JLabel.class.getName(),componentClass,globalSearchScope)) {
      generateSetMnemonic(variable,textWithMnemonic,module,"setDisplayedMnemonic",JLabel.class);
    }
  }
  generateClientProperties(component,variable);
  if (!(component.getParent() instanceof LwRootContainer)) {
    final String parentVariable=getVariable(parent,component2TempVariable,class2variableIndex,aClass);
    String componentVar=variable;
    if (component instanceof LwNestedForm) {
      componentVar=variable + "." + AsmCodeGenerator.GET_ROOT_COMPONENT_METHOD_NAME+ "()";
    }
    getComponentLayoutGenerator(component.getParent()).generateComponentLayout(component,this,componentVar,parentVariable);
  }
  if (component instanceof LwContainer) {
    final LwContainer container=(LwContainer)component;
    generateBorder(container,variable);
    for (int i=0; i < container.getComponentCount(); i++) {
      generateSetupCodeForComponent((LwComponent)container.getComponent(i),component2TempVariable,class2variableIndex,id2component,module,aClass);
    }
  }
}
