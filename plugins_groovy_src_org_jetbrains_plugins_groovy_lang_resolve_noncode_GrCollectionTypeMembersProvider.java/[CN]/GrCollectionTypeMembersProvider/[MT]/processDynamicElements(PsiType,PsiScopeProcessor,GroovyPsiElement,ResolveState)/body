{
  if (!(qualifierType instanceof PsiClassType))   return;
  if (!InheritanceUtil.isInheritor(qualifierType,CommonClassNames.JAVA_UTIL_COLLECTION))   return;
  final PsiType collectionType=PsiUtil.extractIterableTypeParameter(qualifierType,true);
  if (collectionType == null)   return;
  ResolveUtil.processAllDeclarations(collectionType,new PsiScopeProcessor(){
    @Override public boolean execute(    PsiElement element,    ResolveState state){
      if (element instanceof PsiField) {
        final PsiType type=((PsiField)element).getType();
        String typeText=CommonClassNames.JAVA_UTIL_COLLECTION;
        if (type instanceof PsiClassType) {
          typeText=typeText + "<" + type.getCanonicalText()+ ">";
        }
        LightFieldBuilder lightField=new LightFieldBuilder(((PsiField)element).getName(),typeText,element).setContainingClass(JavaPsiFacade.getInstance(place.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTION,place.getResolveScope()));
        return processor.execute(lightField,state);
      }
      return true;
    }
    @Override public <T>T getHint(    Key<T> hintKey){
      return processor.getHint(hintKey);
    }
    @Override public void handleEvent(    Event event,    Object associated){
      processor.handleEvent(event,associated);
    }
  }
,state,place);
}
