{
  LOG.assertTrue(myDebugProcess != null);
  if (location == null) {
    return -1;
  }
  int lineNumber;
  try {
    lineNumber=location.lineNumber() - 1;
  }
 catch (  InternalError e) {
    lineNumber=-1;
  }
  if (psiFile instanceof PsiCompiledElement || lineNumber < 0) {
    final String methodSignature=location.method().signature();
    if (methodSignature == null) {
      return -1;
    }
    final String methodName=location.method().name();
    if (methodName == null) {
      return -1;
    }
    if (location.declaringType() == null) {
      return -1;
    }
    final MethodFinder finder=new MethodFinder(location.declaringType().name(),methodSignature);
    psiFile.accept(finder);
    final PsiMethod compiledMethod=finder.getCompiledMethod();
    if (compiledMethod == null) {
      return -1;
    }
    final Document document=PsiDocumentManager.getInstance(myDebugProcess.getProject()).getDocument(psiFile);
    if (document == null) {
      return -1;
    }
    return document.getLineNumber(finder.getCompiledMethod().getTextOffset());
  }
  return lineNumber;
}
