{
  final PsiClass psiClass=JVMNameUtil.getClassAt(classPosition);
  if (psiClass == null)   return (List<ReferenceType>)Collections.EMPTY_LIST;
  return ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
        PsiClass parentNonLocal=JVMNameUtil.getTopLevelParentClass(psiClass);
        if (parentNonLocal == null && psiClass != null) {
          LOG.assertTrue(false,"Local class has no non-local parent");
          return (List<ReferenceType>)Collections.EMPTY_LIST;
        }
        String name=JVMNameUtil.getNonAnonymousClassName(parentNonLocal);
        List<ReferenceType> outer=myDebugProcess.getVirtualMachineProxy().classesByName(name);
        return findNested(outer,classPosition);
      }
 else {
        String name=JVMNameUtil.getNonAnonymousClassName(psiClass);
        return myDebugProcess.getVirtualMachineProxy().classesByName(name);
      }
    }
  }
);
}
