{
  if (myTypes != null)   return myTypes;
  if (myNames.length == 0) {
    myTypes=PsiClassType.EMPTY_ARRAY;
    return myTypes;
  }
  PsiClassType[] types=new PsiClassType[myNames.length];
  final boolean compiled=((JavaClassReferenceListElementType)getStubType()).isCompiled(this);
  if (compiled) {
    for (int i=0; i < types.length; i++) {
      types[i]=new PsiClassReferenceType(new ClsJavaCodeReferenceElementImpl(getPsi(),StringRef.toString(myNames[i])));
    }
  }
 else {
    final PsiElementFactory factory=JavaPsiFacade.getInstance(getProject()).getElementFactory();
    int nullcount=0;
    final PsiReferenceList psi=getPsi();
    PsiManager manager=psi.getManager();
    for (int i=0; i < types.length; i++) {
      PsiElement context=psi;
      if (getParentStub() instanceof PsiClassStub) {
        context=((PsiClassImpl)getParentStub().getPsi()).calcBasesResolveContext(PsiNameHelper.getShortClassName(StringRef.toString(myNames[i])),psi);
      }
      final FileElement holderElement=DummyHolderFactory.createHolder(manager,context).getTreeElement();
      final PsiJavaCodeReferenceElementImpl ref=(PsiJavaCodeReferenceElementImpl)Parsing.parseJavaCodeReferenceText(manager,StringRef.toString(myNames[i]),holderElement.getCharTable());
      if (ref != null) {
        holderElement.rawAddChildren(ref);
        ref.setKindWhenDummy(PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND);
        types[i]=factory.createType(ref);
      }
 else {
        types[i]=null;
        nullcount++;
      }
    }
    if (nullcount > 0) {
      PsiClassType[] newtypes=new PsiClassType[types.length - nullcount];
      int cnt=0;
      for (      PsiClassType type : types) {
        if (type != null)         newtypes[cnt++]=type;
      }
      types=newtypes;
    }
  }
  myTypes=types;
  return types;
}
