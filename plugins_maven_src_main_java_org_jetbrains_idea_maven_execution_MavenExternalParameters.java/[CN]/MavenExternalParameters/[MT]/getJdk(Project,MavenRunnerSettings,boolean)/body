{
  Sdk internal=null;
  for (  Sdk sdk : SdkTable.getInstance().getAllSdks()) {
    if (sdk.isBundled() && sdk.getSdkType() == JavaSdk.getInstance()) {
      internal=sdk;
      break;
    }
  }
  String name=runnerSettings.getJreName();
  if (name.equals(MavenRunnerSettings.USE_INTERNAL_JAVA)) {
    return internal;
  }
  if (name.equals(MavenRunnerSettings.USE_PROJECT_JDK)) {
    if (project != null) {
      Sdk res=ProjectRootManager.getInstance(project).getProjectSdk();
      if (res != null) {
        return res;
      }
    }
    if (project == null) {
      Sdk recent=SdkTable.getInstance().findMostRecentSdkOfType(JavaSdk.getInstance());
      if (recent != null)       return recent;
      return internal;
    }
    throw new ProjectJdkSettingsOpenerExecutionException("Project JDK is not specified. <a href='#'>Configure</a>",project);
  }
  if (name.equals(MavenRunnerSettings.USE_JAVA_HOME)) {
    final String javaHome=System.getenv(JAVA_HOME);
    if (StringUtil.isEmptyOrSpaces(javaHome)) {
      throw new ExecutionException(RunnerBundle.message("maven.java.home.undefined"));
    }
    final Sdk jdk=JavaSdk.getInstance().createJdk("",javaHome);
    if (jdk == null) {
      throw new ExecutionException(RunnerBundle.message("maven.java.home.invalid",javaHome));
    }
    return jdk;
  }
  for (  Sdk projectJdk : SdkTable.getInstance().getAllSdks()) {
    if (projectJdk.getName().equals(name)) {
      return projectJdk;
    }
  }
  if (isGlobalRunnerSettings) {
    throw new ExecutionException(RunnerBundle.message("maven.java.not.found.default.config",name));
  }
 else {
    throw new ExecutionException(RunnerBundle.message("maven.java.not.found",name));
  }
}
