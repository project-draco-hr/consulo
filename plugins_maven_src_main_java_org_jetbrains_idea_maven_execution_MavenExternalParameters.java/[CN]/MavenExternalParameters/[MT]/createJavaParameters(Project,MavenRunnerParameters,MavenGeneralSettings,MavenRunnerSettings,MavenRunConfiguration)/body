{
  final JavaParameters params=new JavaParameters();
  ApplicationManager.getApplication().assertReadAccessAllowed();
  if (coreSettings == null) {
    coreSettings=project == null ? new MavenGeneralSettings() : MavenProjectsManager.getInstance(project).getGeneralSettings();
  }
  if (runnerSettings == null) {
    runnerSettings=project == null ? new MavenRunnerSettings() : MavenRunner.getInstance(project).getState();
  }
  params.setWorkingDirectory(parameters.getWorkingDirFile());
  params.setJdk(getJdk(project,runnerSettings,project != null && MavenRunner.getInstance(project).getState() == runnerSettings));
  final String mavenHome=resolveMavenHome(coreSettings,project,runConfiguration);
  addVMParameters(params.getVMParametersList(),mavenHome,runnerSettings);
  File confFile=MavenUtil.getMavenConfFile(new File(mavenHome));
  if (!confFile.isFile()) {
    throw new ExecutionException("Configuration file is not exists in maven home: " + confFile.getAbsolutePath());
  }
  if (project != null && parameters.isResolveToWorkspace()) {
    try {
      String resolverJar=getArtifactResolverJar(MavenUtil.isMaven3(mavenHome));
      confFile=patchConfFile(confFile,resolverJar);
      File modulesPathsFile=dumpModulesPaths(project);
      params.getVMParametersList().addProperty(MavenModuleMap.PATHS_FILE_PROPERTY,modulesPathsFile.getAbsolutePath());
    }
 catch (    IOException e) {
      LOG.error(e);
      throw new ExecutionException("Failed to run maven configuration",e);
    }
  }
  params.getVMParametersList().addProperty("classworlds.conf",confFile.getPath());
  for (  String path : getMavenClasspathEntries(mavenHome)) {
    params.getClassPath().add(path);
  }
  params.setMainClass(MAVEN_LAUNCHER_CLASS);
  EncodingManager encodingManager=project == null ? EncodingProjectManager.getInstance() : EncodingProjectManager.getInstance(project);
  params.setCharset(encodingManager.getDefaultCharset());
  addMavenParameters(params.getProgramParametersList(),mavenHome,coreSettings,runnerSettings,parameters);
  return params;
}
