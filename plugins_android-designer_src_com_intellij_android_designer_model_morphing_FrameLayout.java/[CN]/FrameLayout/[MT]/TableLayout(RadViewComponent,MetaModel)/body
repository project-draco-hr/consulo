{
  final MetaModel tableRowModel=ViewsMetaManager.getInstance(component.getTag().getProject()).getModelByTag("TableRow");
  return new ComponentMorphingTool(component,new RadTableLayoutComponent(),target,new RadTableLayout()){
    @Override protected void convertChildren() throws Exception {
      RadViewComponent[] rowComponents=new RadViewComponent[3];
      Map<RadViewComponent,Map<Gravity,List<RadViewComponent>>> components=new HashMap<RadViewComponent,Map<Gravity,List<RadViewComponent>>>();
      for (int i=0; i < rowComponents.length; i++) {
        RadViewComponent newRowComponent=ModelParser.createComponent(null,tableRowModel);
        ModelParser.addComponent(myNewComponent,newRowComponent,null);
        rowComponents[i]=newRowComponent;
      }
      for (      RadComponent childComponent : new ArrayList<RadComponent>(myOldComponent.getChildren())) {
        Pair<Gravity,Gravity> sides=Gravity.getSides(childComponent);
        RadViewComponent rowComponent=rowComponents[getRowIndex(sides.second)];
        Map<Gravity,List<RadViewComponent>> rowMap=components.get(rowComponent);
        if (rowMap == null) {
          rowMap=new HashMap<Gravity,List<RadViewComponent>>();
          components.put(rowComponent,rowMap);
        }
        List<RadViewComponent> rowChildren=rowMap.get(sides.first);
        if (rowChildren == null) {
          rowChildren=new ArrayList<RadViewComponent>();
          rowMap.put(sides.first,rowChildren);
        }
        rowChildren.add((RadViewComponent)childComponent);
      }
      for (      RadViewComponent rowComponent : rowComponents) {
        Map<Gravity,List<RadViewComponent>> rowMap=components.get(rowComponent);
        boolean column=moveComponents(rowComponent,rowMap.remove(Gravity.left),-1);
        column=moveComponents(rowComponent,rowMap.remove(Gravity.center),column ? 1 : -1);
        moveComponents(rowComponent,rowMap.remove(Gravity.right),column ? 2 : -1);
        for (        List<RadViewComponent> rowChildren : rowMap.values()) {
          moveComponents(rowComponent,rowChildren,-1);
        }
      }
    }
    @Override protected void convertTag(){
      for (      RadComponent rowComponent : myNewComponent.getChildren()) {
        for (        RadComponent cellComponent : rowComponent.getChildren()) {
          XmlTag childTag=((RadViewComponent)cellComponent).getTag();
          ModelParser.deleteAttribute(childTag,"layout_gravity");
          Integer column=cellComponent.extractClientProperty(COLUMN_KEY);
          if (column != null) {
            childTag.setAttribute("layout_column",SdkConstants.NS_RESOURCES,column.toString());
          }
        }
      }
    }
    @Override protected void loadChildProperties(    PropertyParser propertyParser) throws Exception {
    }
  }
.result();
}
