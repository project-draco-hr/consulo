{
  super(project,stateManager);
  final WatchDebuggerTree watchTree=getWatchTree();
  final AnAction removeWatchesAction=ActionManager.getInstance().getAction(DebuggerActions.REMOVE_WATCH);
  removeWatchesAction.registerCustomShortcutSet(new CustomShortcutSet(myRemoveWatchAccelerator),watchTree);
  final AnAction newWatchAction=ActionManager.getInstance().getAction(DebuggerActions.NEW_WATCH);
  newWatchAction.registerCustomShortcutSet(new CustomShortcutSet(myNewWatchAccelerator),watchTree);
  final MouseAdapter mouseListener=new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
        AnAction editWatchAction=ActionManager.getInstance().getAction(DebuggerActions.EDIT_WATCH);
        Presentation presentation=(Presentation)editWatchAction.getTemplatePresentation().clone();
        DataContext context=DataManager.getInstance().getDataContext(watchTree);
        AnActionEvent actionEvent=new AnActionEvent(null,context,"WATCH_TREE",presentation,ActionManager.getInstance(),0);
        editWatchAction.actionPerformed(actionEvent);
      }
    }
  }
;
  ListenerUtil.addMouseListener(watchTree,mouseListener);
  final AnAction editWatchAction=ActionManager.getInstance().getAction(DebuggerActions.EDIT_WATCH);
  editWatchAction.registerCustomShortcutSet(new CustomShortcutSet(myEditWatchAccelerator),watchTree);
  registerDisposable(new Disposable(){
    public void dispose(){
      ListenerUtil.removeMouseListener(watchTree,mouseListener);
      removeWatchesAction.unregisterCustomShortcutSet(watchTree);
      newWatchAction.unregisterCustomShortcutSet(watchTree);
      editWatchAction.unregisterCustomShortcutSet(watchTree);
    }
  }
);
  DnDManager.getInstance().registerTarget(new DnDNativeTarget(){
    public boolean update(    final DnDEvent aEvent){
      Object object=aEvent.getAttachedObject();
      if (object == null)       return true;
      String add=DebuggerBundle.message("watchs.add.text");
      if (object.getClass().isArray()) {
        Class<?> type=object.getClass().getComponentType();
        if (DebuggerTreeNodeImpl.class.isAssignableFrom(type)) {
          aEvent.setHighlighting(myTree,DnDEvent.DropTargetHighlightingType.RECTANGLE | DnDEvent.DropTargetHighlightingType.TEXT);
          aEvent.setDropPossible(add,new DropActionHandler(){
            public void performDrop(            final DnDEvent aEvent){
              addWatchesFrom((DebuggerTreeNodeImpl[])aEvent.getAttachedObject());
            }
          }
);
        }
      }
 else       if (object instanceof EventInfo) {
        EventInfo info=(EventInfo)object;
        final String text=info.getTextForFlavor(DataFlavor.stringFlavor);
        if (text != null) {
          aEvent.setHighlighting(myTree,DnDEvent.DropTargetHighlightingType.RECTANGLE | DnDEvent.DropTargetHighlightingType.TEXT);
          aEvent.setDropPossible(add,new DropActionHandler(){
            public void performDrop(            final DnDEvent aEvent){
              addWatchesFrom(text);
            }
          }
);
        }
      }
      return true;
    }
    public void drop(    final DnDEvent aEvent){
    }
    public void cleanUpOnLeave(){
    }
    public void updateDraggedImage(    final Image image,    final Point dropPoint,    final Point imageOffset){
    }
  }
,myTree);
}
