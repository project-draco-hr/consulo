{
  Element deletedTemplatesElement=element.getChild(ELEMENT_DELETED_TEMPLATES);
  if (deletedTemplatesElement != null) {
    myDeletedTemplatesManager.readExternal(deletedTemplatesElement);
  }
  Element deletedIncludesElement=element.getChild(ELEMENT_DELETED_INCLUDES);
  if (deletedIncludesElement != null) {
    myPatternsManager.myDeletedTemplatesManager.readExternal(deletedIncludesElement);
  }
  Element recentElement=element.getChild(ELEMENT_RECENT_TEMPLATES);
  if (recentElement != null) {
    myRecentList.readExternal(recentElement);
  }
  Element templatesElement=element.getChild(ELEMENT_TEMPLATES);
  if (templatesElement != null) {
    revalidate();
    FileTemplate[] internals=getInternalTemplates();
    List children=templatesElement.getChildren();
    for (    final Object aChildren : children) {
      Element child=(Element)aChildren;
      String name=child.getAttributeValue(ATTRIBUTE_NAME);
      boolean reformat=Boolean.TRUE.toString().equals(child.getAttributeValue(ATTRIBUTE_REFORMAT));
      if (child.getName().equals(ELEMENT_INTERNAL_TEMPLATE)) {
        for (        FileTemplate internal : internals) {
          if (name.equals(internal.getName()))           internal.setAdjust(reformat);
        }
      }
 else       if (child.getName().equals(ELEMENT_TEMPLATE)) {
        FileTemplate template=getTemplate(name);
        if (template != null) {
          template.setAdjust(reformat);
        }
      }
    }
  }
}
