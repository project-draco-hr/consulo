{
  Dimension sizeToSet=null;
  if (myDimensionServiceKey != null) {
    sizeToSet=DimensionService.getInstance().getSize(myDimensionServiceKey,myProject);
  }
  if (myForcedSize != null) {
    sizeToSet=myForcedSize;
  }
  if (myMinSize == null) {
    myMinSize=myContent.getMinimumSize();
  }
  if (sizeToSet == null) {
    sizeToSet=myContent.getPreferredSize();
  }
  if (sizeToSet != null) {
    sizeToSet.width=Math.max(sizeToSet.width,myMinSize.width);
    sizeToSet.height=Math.max(sizeToSet.height,myMinSize.height);
    myContent.setSize(sizeToSet);
    myContent.setPreferredSize(sizeToSet);
  }
  Point xy=new Point(aScreenX,aScreenY);
  boolean adjustXY=true;
  if (myDimensionServiceKey != null) {
    final Point storedLocation=DimensionService.getInstance().getLocation(myDimensionServiceKey,myProject);
    if (storedLocation != null) {
      xy=storedLocation;
      adjustXY=false;
    }
  }
  if (adjustXY) {
    final Insets insets=myContent.getInsets();
    if (insets != null) {
      xy.x-=insets.left;
      xy.y-=insets.top;
    }
  }
  if (considerForcedXY && myForcedLocation != null) {
    xy=myForcedLocation;
  }
  if (myLocateByContent) {
    final Dimension captionSize=myHeaderPanel.getPreferredSize();
    xy.y-=captionSize.height;
  }
  Rectangle targetBounds=new Rectangle(xy,myContent.getPreferredSize());
  Insets insets=myPopupBorder.getBorderInsets(myContent);
  if (insets != null) {
    targetBounds.x+=insets.left;
    targetBounds.y+=insets.top;
  }
  Rectangle original=new Rectangle(targetBounds);
  if (myLocateWithinScreen) {
    ScreenUtil.moveRectangleToFitTheScreen(targetBounds);
  }
  if (myMouseOutCanceller != null) {
    myMouseOutCanceller.myEverEntered=targetBounds.equals(original);
  }
  myOwner=IdeFrameImpl.findNearestModalComponent(owner);
  if (myOwner == null) {
    myOwner=owner;
  }
  myRequestorComponent=owner;
  boolean forcedDialog=(SystemInfo.isMac && !(myOwner instanceof IdeFrame)) || myMayBeParent;
  PopupComponent.Factory factory=getFactory(myForcedHeavyweight || myResizable,forcedDialog);
  myNativePopup=factory.isNativePopup();
  myPopup=factory.getPopup(myOwner,myContent,targetBounds.x,targetBounds.y);
  if (myResizable) {
    final JRootPane root=myContent.getRootPane();
    final IdeGlassPaneImpl glass=new IdeGlassPaneImpl(root);
    root.setGlassPane(glass);
    final ResizeComponentListener resizeListener=new ResizeComponentListener(this,glass);
    glass.addMousePreprocessor(resizeListener,this);
    glass.addMouseMotionPreprocessor(resizeListener,this);
  }
  if (myCaption != null && myMovable) {
    final MoveComponentListener moveListener=new MoveComponentListener(myCaption){
      public void mousePressed(      final MouseEvent e){
        super.mousePressed(e);
        if (e.isConsumed())         return;
        if (UIUtil.isCloseClick(e)) {
          if (myCaption.isWithinPanel(e)) {
            cancel();
          }
        }
      }
    }
;
    ListenerUtil.addMouseListener(myCaption,moveListener);
    ListenerUtil.addMouseMotionListener(myCaption,moveListener);
    final MyContentPanel saved=myContent;
    Disposer.register(this,new Disposable(){
      public void dispose(){
        ListenerUtil.removeMouseListener(saved,moveListener);
        ListenerUtil.removeMouseMotionListener(saved,moveListener);
      }
    }
);
  }
  for (  JBPopupListener listener : myListeners) {
    listener.beforeShown(new LightweightWindowEvent(this));
  }
  myPopup.setRequestFocus(myRequestFocus);
  myPopup.show();
  myShown.setDone();
  final Window window=SwingUtilities.getWindowAncestor(myContent);
  myWindowListener=new MyWindowListener();
  window.addWindowListener(myWindowListener);
  if (myFocusable) {
    window.setFocusableWindowState(true);
    window.setFocusable(true);
    if (myRequestFocus) {
      window.requestFocusInWindow();
    }
  }
  myWindow=updateMaskAndAlpha(window);
  if (myWindow instanceof JWindow) {
    ((JWindow)myWindow).getRootPane().putClientProperty(KEY,this);
  }
  if (myWindow != null) {
    if (!myMayBeParent && !(myWindow instanceof Frame)) {
      WindowManager.getInstance().doNotSuggestAsParent(myWindow);
    }
  }
  getFocusManager().requestFocus(new FocusCommand(){
    @Override public ActionCallback run(){
      if (isDisposed())       return new ActionCallback.Done();
      if (myRequestFocus) {
        _requestFocus();
      }
      if (myPreferredFocusedComponent != null && myInStack) {
        myFocusTrackback.registerFocusComponent(myPreferredFocusedComponent);
      }
      afterShow();
      final ActionCallback result=new ActionCallback();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          if (myFocusable && myRequestFocus && myFocusTrackback != null) {
            myFocusTrackback.cleanParentWindow();
          }
          result.setDone();
        }
      }
);
      return result;
    }
  }
,true);
}
