{
  if (myState == State.CANCEL || myState == State.DISPOSE) {
    return;
  }
  debugState("cancel popup",State.SHOWN);
  myState=State.CANCEL;
  if (isDisposed())   return;
  if (myPopup != null) {
    if (!canClose()) {
      debugState("cannot cancel popup",State.CANCEL);
      myState=State.SHOWN;
      return;
    }
    storeDimensionSize(myContent.getSize());
    if (myUseDimServiceForXYLocation) {
      final JRootPane root=myComponent.getRootPane();
      if (root != null) {
        final Container popupWindow=root.getParent();
        if (popupWindow != null && popupWindow.isShowing()) {
          storeLocation(popupWindow.getLocationOnScreen());
        }
      }
    }
    if (e instanceof MouseEvent) {
      IdeEventQueue.getInstance().blockNextEvents((MouseEvent)e);
    }
    myPopup.hide(false);
    if (ApplicationManagerEx.getApplicationEx() != null) {
      StackingPopupDispatcher.getInstance().onPopupHidden(this);
    }
    if (myInStack) {
      if (myFocusTrackback != null) {
        myFocusTrackback.setForcedRestore(!myOk && myFocusable);
        myFocusTrackback.restoreFocus();
      }
 else       if (LOG.isDebugEnabled()) {
        LOG.debug("cancel before show @ " + Thread.currentThread());
      }
    }
    disposePopup();
    if (myListeners != null) {
      for (      JBPopupListener each : myListeners) {
        each.onClosed(new LightweightWindowEvent(this,myOk));
      }
    }
  }
  Disposer.dispose(this,false);
  if (myProjectDisposable != null) {
    Disposer.dispose(myProjectDisposable);
  }
}
