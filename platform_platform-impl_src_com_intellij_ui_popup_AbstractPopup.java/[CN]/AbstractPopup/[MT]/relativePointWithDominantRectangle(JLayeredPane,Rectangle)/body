{
  Dimension preferredSize=getComponent().getPreferredSize();
  if (myDimensionServiceKey != null) {
    final Dimension dimension=DimensionService.getInstance().getSize(myDimensionServiceKey,myProject);
    if (dimension != null) {
      preferredSize=dimension;
    }
  }
  final Point leftTopCorner=new Point(bounds.x + bounds.width,bounds.y);
  final Point leftTopCornerScreen=(Point)leftTopCorner.clone();
  SwingUtilities.convertPointToScreen(leftTopCornerScreen,layeredPane);
  final RelativePoint relativePoint;
  if (!ScreenUtil.isOutsideOnTheRightOFScreen(new Rectangle(leftTopCornerScreen.x,leftTopCornerScreen.y,preferredSize.width,preferredSize.height))) {
    relativePoint=new RelativePoint(layeredPane,leftTopCorner);
  }
 else {
    if (bounds.x > preferredSize.width) {
      relativePoint=new RelativePoint(layeredPane,new Point(bounds.x - preferredSize.width,bounds.y));
    }
 else {
      setDimensionServiceKey(null);
      Rectangle screen=ScreenUtil.getScreenRectangle(leftTopCornerScreen.x,leftTopCornerScreen.y);
      final int spaceOnTheLeft=bounds.x;
      final int spaceOnTheRight=screen.x + screen.width - leftTopCornerScreen.x;
      if (spaceOnTheLeft > spaceOnTheRight) {
        relativePoint=new RelativePoint(layeredPane,new Point(0,bounds.y));
        myComponent.setPreferredSize(new Dimension(spaceOnTheLeft,Math.max(preferredSize.height,200)));
      }
 else {
        relativePoint=new RelativePoint(layeredPane,leftTopCorner);
        myComponent.setPreferredSize(new Dimension(spaceOnTheRight,Math.max(preferredSize.height,200)));
      }
    }
  }
  return relativePoint;
}
