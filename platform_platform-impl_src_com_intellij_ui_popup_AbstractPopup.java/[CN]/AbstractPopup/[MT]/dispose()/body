{
  if (myState == State.SHOWN) {
    LOG.debug("shown popup must be cancelled");
    cancel();
  }
  if (myState == State.DISPOSE) {
    return;
  }
  debugState("dispose popup",State.INIT,State.CANCEL);
  myState=State.DISPOSE;
  if (myDisposed) {
    return;
  }
  myDisposed=true;
  if (LOG.isDebugEnabled()) {
    LOG.debug("start disposing " + myContent);
  }
  Disposer.dispose(this,false);
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (myPopup != null) {
    cancel(myDisposeEvent);
  }
  if (myContent != null) {
    myContent.removeAll();
    myContent.removeKeyListener(mySearchKeyListener);
  }
  myContent=null;
  myPreferredFocusedComponent=null;
  myComponent=null;
  myFocusTrackback=null;
  myCallBack=null;
  myListeners=null;
  if (myMouseOutCanceller != null) {
    final Toolkit toolkit=Toolkit.getDefaultToolkit();
    if (toolkit != null) {
      toolkit.removeAWTEventListener(myMouseOutCanceller);
    }
  }
  myMouseOutCanceller=null;
  resetWindow();
  if (myFinalRunnable != null) {
    final ActionCallback typeAheadDone=new ActionCallback();
    IdeFocusManager.getInstance(myProject).typeAheadUntil(typeAheadDone);
    final ModalityState modalityState=ModalityState.current();
    final Runnable finalRunnable=myFinalRunnable;
    getFocusManager().doWhenFocusSettlesDown(new Runnable(){
      @Override public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            if (ModalityState.current().equals(modalityState)) {
              ((TransactionGuardImpl)TransactionGuard.getInstance()).performUserActivity(finalRunnable);
            }
          }
        }
);
        SwingUtilities.invokeLater(typeAheadDone.createSetDoneRunnable());
        myFinalRunnable=null;
      }
    }
);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("stop disposing content");
  }
}
