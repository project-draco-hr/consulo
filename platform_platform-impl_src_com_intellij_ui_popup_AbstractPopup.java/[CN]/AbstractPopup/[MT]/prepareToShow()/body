{
  final MouseAdapter mouseAdapter=new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      Point point=(Point)e.getPoint().clone();
      SwingUtilities.convertPointToScreen(point,e.getComponent());
      final Dimension dimension=myContent.getSize();
      dimension.height+=myResizable && isToDrawMacCorner() ? ourMacCorner.getHeight(myContent) : 4;
      dimension.width+=4;
      Point locationOnScreen=myContent.getLocationOnScreen();
      final Rectangle bounds=new Rectangle(new Point(locationOnScreen.x - 2,locationOnScreen.y - 2),dimension);
      if (!bounds.contains(point)) {
        cancel();
      }
    }
  }
;
  myContent.addMouseListener(mouseAdapter);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      myContent.removeMouseListener(mouseAdapter);
    }
  }
);
  myContent.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myCancelKeyEnabled) {
        cancel();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
  mySearchKeyListener=new SpeedSearchKeyListener();
  myContent.addKeyListener(mySearchKeyListener);
  if (myCancelOnMouseOutCallback != null || myCancelOnWindow) {
    myMouseOutCanceller=new Canceller();
    Toolkit.getDefaultToolkit().addAWTEventListener(myMouseOutCanceller,AWTEvent.MOUSE_EVENT_MASK | WindowEvent.WINDOW_ACTIVATED | AWTEvent.MOUSE_MOTION_EVENT_MASK);
  }
  myFocusWatcher=new ChildFocusWatcher(myContent){
    protected void onFocusGained(    final FocusEvent event){
      setWindowActive(true);
    }
    protected void onFocusLost(    final FocusEvent event){
      setWindowActive(false);
    }
  }
;
  mySpeedSearchPatternField=new JTextField();
  if (SystemInfo.isMac) {
    Font f=mySpeedSearchPatternField.getFont();
    mySpeedSearchPatternField.setFont(f.deriveFont(f.getStyle(),f.getSize() - 2));
  }
}
