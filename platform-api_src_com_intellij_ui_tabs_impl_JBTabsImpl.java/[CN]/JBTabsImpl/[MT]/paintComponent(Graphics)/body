{
  super.paintComponent(g);
  if (myVisibleInfos.size() == 0)   return;
  final GraphicsConfig config=new GraphicsConfig(g);
  config.setAntialiasing(true);
  Graphics2D g2d=(Graphics2D)g;
  g.setColor(getBackground());
  g.fillRect(0,0,getWidth(),getHeight());
  int arc=getArcSize();
  final Color topBlickColor=getTopBlickColor();
  final Color rightBlockColor=getRightBlockColor();
  final Color boundsColor=getBoundsColor();
  Insets insets=getLayoutInsets();
  final TabInfo selected=getSelectedInfo();
  final int selectionTabVShift=getSelectionTabVShift();
  int curveArc=2;
  boolean leftGhostExists=isSingleRow();
  boolean rightGhostExists=isSingleRow();
  if (!isStealthModeEffective() && !isHideTabs()) {
    if (isSingleRow() && mySingleRowLayout.myLastSingRowLayout.rightGhostVisible) {
      int topX=mySingleRowLayout.myLastSingRowLayout.rightGhost.x - arc;
      int topY=mySingleRowLayout.myLastSingRowLayout.rightGhost.y + selectionTabVShift;
      int bottomX=(int)(mySingleRowLayout.myLastSingRowLayout.rightGhost.getMaxX() - curveArc);
      int bottomY=(int)mySingleRowLayout.myLastSingRowLayout.rightGhost.getMaxY() + 1;
      final GeneralPath path=new GeneralPath();
      path.moveTo(topX,topY);
      path.lineTo(bottomX,topY);
      path.quadTo(bottomX - curveArc,topY + (bottomY - topY) / 4,bottomX,topY + (bottomY - topY) / 2);
      path.quadTo(bottomX + curveArc,bottomY - (bottomY - topY) / 4,bottomX,bottomY);
      path.lineTo(topX,bottomY);
      path.closePath();
      g2d.setColor(getBackground());
      g2d.fill(path);
      g2d.setColor(boundsColor);
      g2d.draw(path);
      g2d.setColor(topBlickColor);
      g2d.drawLine(topX,topY + 1,bottomX - curveArc,topY + 1);
    }
    paintNonSelectedTabs(g2d,leftGhostExists);
    if (isSingleRow() && mySingleRowLayout.myLastSingRowLayout.leftGhostVisible) {
      final GeneralPath path=new GeneralPath();
      int topX=mySingleRowLayout.myLastSingRowLayout.leftGhost.x + curveArc;
      int topY=mySingleRowLayout.myLastSingRowLayout.leftGhost.y + selectionTabVShift;
      int bottomX=(int)mySingleRowLayout.myLastSingRowLayout.leftGhost.getMaxX() + 1;
      int bottomY=(int)(mySingleRowLayout.myLastSingRowLayout.leftGhost.getMaxY() + 1);
      path.moveTo(topX,topY);
      final boolean isLeftFromSelection=mySingleRowLayout.myLastSingRowLayout.toLayout.indexOf(getSelectedInfo()) == 0;
      if (isLeftFromSelection) {
        path.lineTo(bottomX,topY);
      }
 else {
        path.lineTo(bottomX - arc,topY);
        path.quadTo(bottomX,topY,bottomX,topY + arc);
      }
      path.lineTo(bottomX,bottomY);
      path.lineTo(topX,bottomY);
      path.quadTo(topX - curveArc * 2 + 1,bottomY - (bottomY - topY) / 4,topX,(bottomY - topY) / 2);
      path.quadTo(topX + curveArc - 1,topY + (bottomY - topY) / 4,topX,topY);
      path.closePath();
      g2d.setColor(getBackground());
      g2d.fill(path);
      g.setColor(boundsColor);
      g2d.draw(path);
      g.setColor(topBlickColor);
      g.drawLine(topX + 1,topY + 1,bottomX - arc,topY + 1);
      g.setColor(rightBlockColor);
      g2d.drawLine(bottomX - 1,topY + arc,bottomX - 1,bottomY - 1);
    }
  }
  if (selected == null)   return;
  final TabLabel selectedLabel=myInfo2Label.get(selected);
  if (selectedLabel == null)   return;
  Rectangle selectedTabBounds=selectedLabel.getBounds();
  final GeneralPath path=new GeneralPath();
  final int bottomY=(int)selectedTabBounds.getMaxY() + 1;
  final int topY=selectedTabBounds.y;
  int leftX=selectedTabBounds.x;
  int rightX=selectedTabBounds.x + selectedTabBounds.width;
  path.moveTo(insets.left,bottomY);
  path.lineTo(leftX,bottomY);
  path.lineTo(leftX,topY + arc);
  path.quadTo(leftX,topY,leftX + arc,topY);
  int lastX=getWidth() - insets.right - 1;
  if (isStealthModeEffective()) {
    path.lineTo(lastX - arc,topY);
    path.quadTo(lastX,topY,lastX,topY + arc);
    path.lineTo(lastX,bottomY);
  }
 else {
    path.lineTo(rightX - arc,topY);
    path.quadTo(rightX,topY,rightX,topY + arc);
    if (myLastLayoutPass.hasCurveSpaceFor(selected)) {
      path.lineTo(rightX,bottomY - arc);
      path.quadTo(rightX,bottomY,rightX + arc,bottomY);
    }
 else {
      path.lineTo(rightX,bottomY);
    }
  }
  path.lineTo(lastX,bottomY);
  if (isStealthModeEffective()) {
    path.closePath();
  }
  final GeneralPath fillPath=(GeneralPath)path.clone();
  if (!isHideTabs()) {
    fillPath.lineTo(lastX,bottomY + 1);
    fillPath.lineTo(leftX,bottomY + 1);
    fillPath.closePath();
    g2d.setColor(getBackground());
    g2d.fill(fillPath);
  }
  final Color from;
  final Color to;
  final int alpha;
  final boolean paintFocused=myPaintFocus && (myFocused || myActivePopup != null);
  if (paintFocused) {
    from=UIUtil.getFocusedFillColor();
    to=UIUtil.getFocusedFillColor();
  }
 else {
    if (isPaintFocus()) {
      alpha=150;
      from=UIUtil.toAlpha(UIUtil.getPanelBackgound().brighter(),alpha);
      to=UIUtil.toAlpha(UIUtil.getPanelBackgound(),alpha);
    }
 else {
      alpha=255;
      from=UIUtil.toAlpha(Color.white,alpha);
      to=UIUtil.toAlpha(Color.white,alpha);
    }
  }
  g2d.setPaint(new GradientPaint(selectedTabBounds.x,topY,from,selectedTabBounds.x,bottomY,to));
  if (!isHideTabs()) {
    g2d.fill(fillPath);
  }
  Color borderColor=UIUtil.getBoundsColor(paintFocused);
  g2d.setColor(borderColor);
  if (!isHideTabs()) {
    g2d.draw(path);
  }
  if (isHideTabs()) {
    paintBorder(g2d,insets.left,insets.top,getWidth() - insets.left - insets.right,getHeight() - insets.bottom - insets.top,borderColor,from,to,paintFocused);
  }
 else {
    paintBorder(g2d,insets.left,bottomY,getWidth() - insets.left - insets.right,getHeight() - bottomY - insets.bottom,borderColor,from,to,paintFocused);
  }
  config.setAntialiasing(false);
  if (isSideComponentVertical()) {
    JComponent toolbarComp=myInfo2Toolbar.get(mySelectedInfo);
    if (toolbarComp != null) {
      Rectangle toolBounds=toolbarComp.getBounds();
      g2d.setColor(CaptionPanel.CNT_ACTIVE_COLOR);
      g.drawLine((int)toolBounds.getMaxX(),toolBounds.y,(int)toolBounds.getMaxX(),(int)toolBounds.getMaxY() - 1);
    }
  }
  config.restore();
}
