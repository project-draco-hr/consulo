{
  final InspectionToolWrapper[] toolWrappers=InspectionProfileImpl.getDefaultProfile().getInspectionTools(null);
  final Map<String,Set<InspectionToolWrapper>> map=new HashMap<String,Set<InspectionToolWrapper>>();
  for (  InspectionToolWrapper toolWrapper : toolWrappers) {
    final String groupName=toolWrapper.getGroupDisplayName();
    Set<InspectionToolWrapper> groupInspections=map.get(groupName);
    if (groupInspections == null) {
      groupInspections=new HashSet<InspectionToolWrapper>();
      map.put(groupName,groupInspections);
    }
    groupInspections.add(toolWrapper);
  }
  FileWriter fw=new FileWriter(myOutputPath);
  try {
    @NonNls final PrettyPrintWriter xmlWriter=new PrettyPrintWriter(fw);
    xmlWriter.startNode(INSPECTIONS_NODE);
    if (name != null) {
      xmlWriter.addAttribute(PROFILE,name);
    }
    for (    String groupName : map.keySet()) {
      xmlWriter.startNode("group");
      xmlWriter.addAttribute("name",groupName);
      final Set<InspectionToolWrapper> entries=map.get(groupName);
      for (      InspectionToolWrapper toolWrapper : entries) {
        xmlWriter.startNode("inspection");
        xmlWriter.addAttribute("shortName",toolWrapper.getShortName());
        xmlWriter.addAttribute("displayName",toolWrapper.getDisplayName());
        final String description=toolWrapper.loadDescription();
        if (description != null) {
          xmlWriter.setValue(description);
        }
 else {
          LOG.error(toolWrapper.getShortName() + " descriptionUrl==" + toolWrapper);
        }
        xmlWriter.endNode();
      }
      xmlWriter.endNode();
    }
    xmlWriter.endNode();
  }
  finally {
    fw.close();
  }
}
