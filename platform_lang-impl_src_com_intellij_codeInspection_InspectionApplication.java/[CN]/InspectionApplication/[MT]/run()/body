{
  File tmpDir=null;
  try {
    myProjectPath=myProjectPath.replace(File.separatorChar,'/');
    VirtualFile vfsProject=LocalFileSystem.getInstance().findFileByPath(myProjectPath);
    if (vfsProject == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProjectPath));
      printHelp();
    }
    logMessage(1,InspectionsBundle.message("inspection.application.opening.project"));
    final ConversionService conversionService=ConversionService.getInstance();
    if (conversionService != null && conversionService.convertSilently(myProjectPath,createConversionListener()).openingIsCanceled()) {
      if (myErrorCodeRequired)       System.exit(1);
      return;
    }
    myProject=ProjectUtil.openOrImport(myProjectPath,null,false);
    if (myProject == null) {
      logError("Unable to open project");
      if (myErrorCodeRequired)       System.exit(1);
      return;
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        VirtualFileManager.getInstance().refreshWithoutFileWatcher(false);
      }
    }
);
    PatchProjectUtil.patchProject(myProject);
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    logMessage(1,InspectionsBundle.message("inspection.application.initializing.project"));
    Profile inspectionProfile=loadInspectionProfile();
    if (inspectionProfile == null)     return;
    final InspectionManagerEx im=(InspectionManagerEx)InspectionManager.getInstance(myProject);
    final GlobalInspectionContextImpl inspectionContext=im.createNewGlobalContext(true);
    inspectionContext.setExternalProfile((InspectionProfile)inspectionProfile);
    im.setProfile(inspectionProfile.getName());
    final AnalysisScope scope;
    if (mySourceDirectory == null) {
      scope=new AnalysisScope(myProject);
    }
 else {
      mySourceDirectory=mySourceDirectory.replace(File.separatorChar,'/');
      VirtualFile vfsDir=LocalFileSystem.getInstance().findFileByPath(mySourceDirectory);
      if (vfsDir == null) {
        logError(InspectionsBundle.message("inspection.application.directory.cannot.be.found",mySourceDirectory));
        printHelp();
      }
      PsiDirectory psiDirectory=PsiManager.getInstance(myProject).findDirectory(vfsDir);
      scope=new AnalysisScope(psiDirectory);
    }
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    if (!myRunWithEditorSettings) {
      logMessageLn(1,InspectionsBundle.message("inspection.application.chosen.profile.log message",inspectionProfile.getName()));
    }
    InspectionsReportConverter reportConverter=getReportConverter(myOutputFormat);
    if (reportConverter == null && myOutputFormat != null && myOutputFormat.endsWith(".xsl")) {
      reportConverter=new XSLTReportConverter(myOutputFormat);
    }
    final String resultsDataPath;
    if ((reportConverter == null || !reportConverter.useTmpDirForRawData()) && myOutPath != null) {
      resultsDataPath=myOutPath;
    }
 else {
      try {
        tmpDir=FileUtil.createTempDirectory("inspections","data");
        resultsDataPath=tmpDir.getPath();
      }
 catch (      IOException e) {
        LOG.error(e);
        System.err.println("Cannot create tmp directory.");
        System.exit(1);
        return;
      }
    }
    final List<File> inspectionsResults=new ArrayList<File>();
    ProgressManager.getInstance().runProcess(new Runnable(){
      @Override public void run(){
        if (!InspectionManagerEx.canRunInspections(myProject,false)) {
          if (myErrorCodeRequired)           System.exit(1);
          return;
        }
        inspectionContext.launchInspectionsOffline(scope,resultsDataPath,myRunGlobalToolsOnly,im,inspectionsResults);
        logMessageLn(1,"\n" + InspectionsBundle.message("inspection.capitalized.done") + "\n");
      }
    }
,new ProgressIndicatorBase(){
      private String lastPrefix="";
      private int myLastPercent=-1;
      @Override public void setText(      String text){
        if (myVerboseLevel == 0)         return;
        if (myVerboseLevel == 1) {
          String prefix=getPrefix(text);
          if (prefix == null)           return;
          if (prefix.equals(lastPrefix)) {
            logMessage(1,".");
            return;
          }
          lastPrefix=prefix;
          logMessageLn(1,"");
          logMessageLn(1,prefix);
          return;
        }
        if (myVerboseLevel == 3) {
          if (!isIndeterminate() && getFraction() > 0) {
            final StringBuilder buf=StringBuilderSpinAllocator.alloc();
            try {
              final int percent=(int)(getFraction() * 100);
              if (myLastPercent == percent)               return;
              myLastPercent=percent;
              buf.append(InspectionsBundle.message("inspection.display.name")).append(" ").append(percent).append("%");
              logMessageLn(2,buf.toString());
            }
  finally {
              StringBuilderSpinAllocator.dispose(buf);
            }
          }
          return;
        }
        logMessageLn(2,text);
      }
    }
);
    final String descriptionsFile=resultsDataPath + File.separatorChar + DESCRIPTIONS+ XML_EXTENSION;
    describeInspections(descriptionsFile,myRunWithEditorSettings ? null : inspectionProfile.getName());
    inspectionsResults.add(new File(descriptionsFile));
    if (reportConverter != null) {
      try {
        reportConverter.convert(resultsDataPath,myOutPath,inspectionContext.getTools(),inspectionsResults);
      }
 catch (      InspectionsReportConverter.ConversionException e) {
        logError("\n" + e.getMessage());
        printHelp();
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e);
    logError(e.getMessage());
    printHelp();
  }
catch (  Throwable e) {
    LOG.error(e);
    logError(e.getMessage());
    if (myErrorCodeRequired)     System.exit(1);
  }
 finally {
    if (tmpDir != null) {
      FileUtil.delete(tmpDir);
    }
  }
}
