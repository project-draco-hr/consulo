{
  try {
    myProjectPath=myProjectPath.replace(File.separatorChar,'/');
    VirtualFile vfsProject=LocalFileSystem.getInstance().findFileByPath(myProjectPath);
    if (vfsProject == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProjectPath));
      InspectionMain.printHelp();
    }
    logMessage(1,InspectionsBundle.message("inspection.application.opening.project"));
    if (ConversionService.getInstance().convertSilently(myProjectPath,createConversionListener()).openingIsCanceled()) {
      if (myErrorCodeRequired)       System.exit(1);
      return;
    }
    myProject=ProjectUtil.openOrImport(myProjectPath,null,false);
    if (myProject == null) {
      logError("Unable to open project");
      if (myErrorCodeRequired)       System.exit(1);
      return;
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        VirtualFileManager.getInstance().refreshWithoutFileWatcher(false);
      }
    }
);
    Profile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getProfile(myProfileName,false);
    if (inspectionProfile == null) {
      final Collection<Profile> profiles=InspectionProjectProfileManager.getInstance(myProject).getProfiles();
      for (      Profile profile : profiles) {
        if (Comparing.strEqual(profile.getName(),myProfileName)) {
          inspectionProfile=profile;
          break;
        }
      }
    }
    if (inspectionProfile == null) {
      inspectionProfile=InspectionProfileManager.getInstance().loadProfile(myProfileName);
    }
    if (inspectionProfile == null) {
      inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
    }
    PatchProjectUtil.patchProject(myProject);
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    logMessage(1,InspectionsBundle.message("inspection.application.initializing.project"));
    final InspectionManagerEx im=(InspectionManagerEx)InspectionManager.getInstance(myProject);
    final GlobalInspectionContextImpl inspectionContext=im.createNewGlobalContext(true);
    inspectionContext.setExternalProfile((InspectionProfile)inspectionProfile);
    im.setProfile(inspectionProfile.getName());
    final AnalysisScope scope;
    if (mySourceDirectory == null) {
      scope=new AnalysisScope(myProject);
    }
 else {
      mySourceDirectory=mySourceDirectory.replace(File.separatorChar,'/');
      VirtualFile vfsDir=LocalFileSystem.getInstance().findFileByPath(mySourceDirectory);
      if (vfsDir == null) {
        logError(InspectionsBundle.message("inspection.application.directory.cannot.be.found",mySourceDirectory));
        InspectionMain.printHelp();
      }
      PsiDirectory psiDirectory=PsiManager.getInstance(myProject).findDirectory(vfsDir);
      scope=new AnalysisScope(psiDirectory);
    }
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    if (!myRunWithEditorSettings) {
      logMessageLn(1,InspectionsBundle.message("inspection.application.chosen.profile.log message",inspectionProfile.getName()));
    }
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        if (!InspectionManagerEx.canRunInspections(myProject,false)) {
          if (myErrorCodeRequired)           System.exit(1);
          return;
        }
        inspectionContext.launchInspectionsOffline(scope,myOutPath,myRunGlobalToolsOnly,im);
        logMessageLn(1,"\n" + InspectionsBundle.message("inspection.capitalized.done") + "\n");
      }
    }
,new ProgressIndicatorBase(){
      private String lastPrefix="";
      private int myLastPercent=-1;
      public void setText(      String text){
        if (myVerboseLevel == 0)         return;
        if (myVerboseLevel == 1) {
          String prefix=getPrefix(text);
          if (prefix == null)           return;
          if (prefix.equals(lastPrefix)) {
            logMessage(1,".");
            return;
          }
          lastPrefix=prefix;
          logMessageLn(1,"");
          logMessageLn(1,prefix);
          return;
        }
        if (myVerboseLevel == 3) {
          if (!isIndeterminate() && getFraction() > 0) {
            final StringBuilder buf=StringBuilderSpinAllocator.alloc();
            try {
              final int percent=(int)(getFraction() * 100);
              if (myLastPercent == percent)               return;
              myLastPercent=percent;
              buf.append(InspectionsBundle.message("inspection.display.name")).append(" ").append(percent).append("%");
              logMessageLn(2,buf.toString());
            }
  finally {
              StringBuilderSpinAllocator.dispose(buf);
            }
          }
          return;
        }
        logMessageLn(2,text);
      }
    }
);
    describeInspections(myOutPath + File.separatorChar + DESCRIPTIONS+ XML_EXTENSION,myRunWithEditorSettings ? null : inspectionProfile.getName());
  }
 catch (  IOException e) {
    LOG.error(e);
    logError(e.getMessage());
    InspectionMain.printHelp();
  }
catch (  Throwable e) {
    LOG.error(e);
    logError(e.getMessage());
    if (myErrorCodeRequired)     System.exit(1);
  }
}
