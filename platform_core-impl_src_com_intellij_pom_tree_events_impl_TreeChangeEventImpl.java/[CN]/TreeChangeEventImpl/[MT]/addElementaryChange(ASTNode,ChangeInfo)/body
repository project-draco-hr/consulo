{
  LOG.assertTrue(isAncestor(element,myFileElement),element);
  final ASTNode parent=element.getTreeParent();
  if (parent == null)   return;
  ASTNode currentParent=parent;
  ASTNode prevParent=element;
  int depth=0;
  while (currentParent != null) {
    if (myChangedElements.containsKey(currentParent)) {
      final TreeChange changesByElement=getChangesByElement(currentParent);
      final boolean currentParentHasChange=changesByElement.getChangeByChild(prevParent) != null;
      if (currentParentHasChange && prevParent != element)       return;
      if (prevParent != element) {
        final ChangeInfo newChange=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,prevParent);
        if (change.getChangeType() != ChangeInfo.REMOVED) {
          ((ChangeInfoImpl)newChange).processElementaryChange(change,element);
        }
        change=newChange;
      }
      processElementaryChange(currentParent,prevParent,change,-1);
      return;
    }
    depth++;
    prevParent=currentParent;
    currentParent=currentParent.getTreeParent();
  }
  compactChanges(parent,depth - 1);
  processElementaryChange(parent,element,change,depth - 1);
}
