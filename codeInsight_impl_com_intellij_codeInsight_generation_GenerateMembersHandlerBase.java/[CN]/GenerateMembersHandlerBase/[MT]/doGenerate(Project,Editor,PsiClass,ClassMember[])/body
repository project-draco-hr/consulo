{
  int offset=editor.getCaretModel().getOffset();
  int col=editor.getCaretModel().getLogicalPosition().column;
  int line=editor.getCaretModel().getLogicalPosition().line;
  editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(0,0));
  List<? extends GenerationInfo> newMembers;
  try {
    List<? extends GenerationInfo> prototypes=generateMemberPrototypes(aClass,members);
    newMembers=GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(),offset,prototypes);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return;
  }
  if (newMembers == null)   return;
  editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(line,col));
  final ArrayList<TemplateGenerationInfo> templates=new ArrayList<TemplateGenerationInfo>();
  for (  GenerationInfo member : newMembers) {
    if (member instanceof TemplateGenerationInfo) {
      templates.add((TemplateGenerationInfo)member);
    }
  }
  if (!templates.isEmpty()) {
    PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
    runTemplates(project,editor,templates,0);
  }
 else   if (!newMembers.isEmpty()) {
    GenerateMembersUtil.positionCaret(editor,newMembers.get(0).getPsiMember(),false);
  }
}
