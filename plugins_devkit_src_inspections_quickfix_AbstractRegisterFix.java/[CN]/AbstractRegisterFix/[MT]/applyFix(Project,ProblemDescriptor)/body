{
  final Module module=VfsUtil.getModuleForFile(project,myClass.getContainingFile().getVirtualFile());
  try {
    if (PluginModuleType.isOfType(module)) {
      final XmlFile pluginXml=PluginModuleType.getPluginXml(module);
      if (pluginXml != null) {
        DescriptorUtil.patchPluginXml(this,myClass,pluginXml);
      }
    }
 else {
      List<Module> modules=PluginModuleType.getCandidateModules(module);
      if (modules.size() > 1) {
        final ChooseModulesDialog dialog=new ChooseModulesDialog(project,modules,getName());
        dialog.show();
        if (!dialog.isOK()) {
          return;
        }
        modules=dialog.getSelectedModules();
      }
      final XmlFile[] pluginXmls=new XmlFile[modules.size()];
      for (int i=0; i < pluginXmls.length; i++) {
        pluginXmls[i]=PluginModuleType.getPluginXml(modules.get(i));
      }
      DescriptorUtil.patchPluginXml(this,myClass,pluginXmls);
    }
  }
 catch (  IncorrectOperationException e) {
    Messages.showMessageDialog(project,filterMessage(e.getMessage()),DevKitBundle.message("inspections.component.not.registered.quickfix.error",getType()),Messages.getErrorIcon());
  }
}
