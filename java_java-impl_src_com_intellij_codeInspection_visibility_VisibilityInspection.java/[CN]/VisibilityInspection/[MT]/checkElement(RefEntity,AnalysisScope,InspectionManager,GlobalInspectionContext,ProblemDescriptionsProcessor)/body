{
  if (refEntity instanceof RefJavaElement) {
    final RefJavaElement refElement=(RefJavaElement)refEntity;
    if (refElement instanceof RefParameter)     return null;
    if (refElement.isSyntheticJSP())     return null;
    if (refElement.isEntry())     return null;
    if (refElement instanceof RefImplicitConstructor)     return null;
    if (refElement instanceof RefField && ((RefField)refElement).getElement() instanceof PsiEnumConstant)     return null;
    if (refElement instanceof RefMethod) {
      RefMethod refMethod=(RefMethod)refElement;
      if (refMethod.isExternalOverride())       return null;
      if (RefUtil.isEntryPoint(refMethod))       return null;
    }
    if (refElement instanceof RefClass) {
      RefClass refClass=(RefClass)refElement;
      if (refClass.isAnonymous() || RefUtil.isEntryPoint(refClass) || refClass.isTestCase()|| refClass.isServlet()|| refClass.isApplet()|| refClass.isLocalClass())       return null;
      if (isTopLevelClass(refClass) && !SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES)       return null;
    }
    if (refElement.getInReferences().isEmpty())     return null;
    if (refElement.getOwner() instanceof RefClass) {
      RefClass refClass=(RefClass)refElement.getOwner();
      if (refClass.isInterface())       return null;
    }
    @Modifier String access=getPossibleAccess(refElement);
    if (access != refElement.getAccessModifier() && access != null) {
      final PsiElement element=refElement.getElement();
      final PsiElement nameIdentifier=element != null ? HighlightUsagesHandler.getNameIdentifier(element) : null;
      if (nameIdentifier != null) {
        return new ProblemDescriptor[]{manager.createProblemDescriptor(nameIdentifier,access.equals(PsiModifier.PRIVATE) ? CAN_BE_PRIVATE : access.equals(PsiModifier.PACKAGE_LOCAL) ? CAN_BE_PACKAGE_LOCAL : CAN_BE_PROTECTED,new AcceptSuggestedAccess(globalContext.getRefManager(),access),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
      }
    }
  }
  return null;
}
