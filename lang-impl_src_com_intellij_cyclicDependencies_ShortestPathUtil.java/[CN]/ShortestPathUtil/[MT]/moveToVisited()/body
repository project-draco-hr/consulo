{
  ProcessingNode priorityNode=null;
  for (Iterator<ProcessingNode> iterator=myProcessingNodes.iterator(); iterator.hasNext(); ) {
    ProcessingNode processingNode=iterator.next();
    if (priorityNode != null) {
      if (priorityNode.getPriority() > processingNode.getPriority()) {
        priorityNode=processingNode;
      }
    }
 else {
      priorityNode=processingNode;
    }
  }
  myProcessingNodes.remove(priorityNode);
  myVisited.add(priorityNode.myToNode);
  if (priorityNode.myFromNode != null) {
    final DefaultMutableTreeNode parentNode=findNodeByUserObject(priorityNode.myFromNode);
    if (parentNode != null) {
      myShortestPathTree.insertNodeInto(new DefaultMutableTreeNode(priorityNode.myToNode),parentNode,0);
    }
  }
  moveAdjacentVerticesToProcessing(priorityNode);
}
