{
  if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) {
    final FindManager findManager=FindManager.getInstance(getScope().getProject());
    final FindModel findModel=(FindModel)findManager.getFindInFileModel().clone();
    findModel.setCaseSensitive(true);
    findModel.setStringToFind(StringUtil.stripQuotesAroundValue(myMainOccurence.getText()));
    final List<PsiExpression> results=new ArrayList<PsiExpression>();
    final PsiFile file=getScope().getContainingFile();
    final String text=getScope().getText();
    final int offset=getScope().getTextRange().getStartOffset();
    FindResult result=findManager.findString(text,0,findModel);
    while (result.isStringFound()) {
      final int startOffset=offset + result.getStartOffset();
      final int endOffset=result.getEndOffset();
      if (PsiTreeUtil.getParentOfType(file.findElementAt(startOffset),PsiLiteralExpression.class) != null) {
        results.add(IntroduceVariableBase.getSelectedExpression(file.getProject(),file,startOffset,offset + endOffset));
      }
      result=findManager.findString(text,endOffset,findModel);
    }
    return results.toArray(new PsiExpression[results.size()]);
  }
  return CodeInsightUtil.findExpressionOccurrences(myScope,myMainOccurence);
}
