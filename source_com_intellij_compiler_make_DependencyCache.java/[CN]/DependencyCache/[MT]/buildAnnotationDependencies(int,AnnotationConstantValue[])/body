{
  if (annotations == null || annotations.length == 0) {
    return;
  }
  final Cache cache=getCache();
  final int classId=cache.getClassId(classQName);
  for (int idx=0; idx < annotations.length; idx++) {
    AnnotationConstantValue annotation=annotations[idx];
    final int annotationQName=annotation.getAnnotationQName();
    final int annotationDeclarationId=cache.getClassDeclarationId(annotationQName);
    cache.addClassReferencer(annotationDeclarationId,classQName);
    cache.addReferencedClass(classId,annotationQName);
    final AnnotationNameValuePair[] memberValues=annotation.getMemberValues();
    for (int i=0; i < memberValues.length; i++) {
      final AnnotationNameValuePair nameValuePair=memberValues[i];
      final int[] annotationMembers=CacheUtils.findMethodsByName(cache,annotationDeclarationId,nameValuePair.getName());
      for (int j=0; j < annotationMembers.length; j++) {
        int annotationMember=annotationMembers[j];
        cache.addMethodReferencer(annotationMember,classQName);
      }
    }
  }
}
