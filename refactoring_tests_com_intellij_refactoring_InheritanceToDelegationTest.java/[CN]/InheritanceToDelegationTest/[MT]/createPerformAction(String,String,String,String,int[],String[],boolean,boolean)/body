{
  return new PerformAction(){
    public void performAction(    VirtualFile rootDir,    VirtualFile rootAfter) throws Exception {
      PsiClass aClass=myJavaFacade.findClass(className);
      assertNotNull("Class " + className + " not found",aClass);
      PsiClass baseClass=myJavaFacade.findClass(baseClassName);
      assertNotNull("Base class " + baseClassName + " not found",baseClass);
      final PsiMethod[] methods=baseClass.getMethods();
      final PsiMethod[] delegatedMethods=new PsiMethod[methodIndices.length];
      for (int i=0; i < methodIndices.length; i++) {
        delegatedMethods[i]=methods[methodIndices[i]];
      }
      final PsiClass[] delegatedInterfaces=new PsiClass[delegatedInterfaceNames.length];
      for (int i=0; i < delegatedInterfaceNames.length; i++) {
        String delegatedInterfaceName=delegatedInterfaceNames[i];
        PsiClass anInterface=myJavaFacade.findClass(delegatedInterfaceName);
        assertNotNull(anInterface);
        delegatedInterfaces[i]=anInterface;
      }
      new InheritanceToDelegationProcessor(myProject,aClass,baseClass,fieldName,innerClassName,delegatedInterfaces,delegatedMethods,delegateOtherMembers,generateGetter).run();
    }
  }
;
}
