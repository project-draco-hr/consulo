{
  final AddRemoveUpDownPanel.Buttons[] buttons=getButtons();
  myPanel=new AddRemoveUpDownPanel(createListener(),myTable == null ? myList : myTable,myToolbarPosition == ActionToolbarPosition.TOP || myToolbarPosition == ActionToolbarPosition.BOTTOM,myExtraActions.toArray(new AnActionButton[myExtraActions.size()]),myAddName,myRemoveName,myMoveUpName,myMoveDownName,buttons);
  myPanel.setBorder(myBorder);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTable == null ? myList : myTable);
  scrollPane.setBorder(IdeBorderFactory.createEmptyBorder(0));
  final JPanel panel=new JPanel(new BorderLayout()){
    @Override public void addNotify(){
      super.addNotify();
      if (myList != null) {
        updateListButtons(myList,myPanel);
      }
      if (myTable != null && myTableModel instanceof EditableModel) {
        updateTableButtons(myTable,(EditableModel)myTableModel,myPanel);
      }
    }
  }
;
  panel.add(scrollPane,BorderLayout.CENTER);
  panel.add(myPanel,getPlacement());
  if (myTableModel instanceof EditableModel && buttons.length > 0) {
    updateTableButtons(myTable,(EditableModel)myTableModel,myPanel);
    if (myUpAction != null && myUpActionEnabled && myDownAction != null && myDownActionEnabled && !ApplicationManager.getApplication().isHeadlessEnvironment()) {
      TableRowsDnDSupport.install(myTable,(EditableModel)myTableModel);
    }
    myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
      @Override public void valueChanged(      ListSelectionEvent e){
        updateTableButtons(myTable,(EditableModel)myTableModel,myPanel);
      }
    }
);
  }
  if (myList != null) {
    updateListButtons(myList,myPanel);
    myList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
      @Override public void valueChanged(      ListSelectionEvent e){
        updateListButtons(myList,myPanel);
      }
    }
);
  }
  panel.setBorder(new LineBorder(UIUtil.getBorderColor()));
  panel.putClientProperty(ActionToolbar.ACTION_TOOLBAR_PROPERTY_KEY,myPanel.getComponent(0));
  DataManager.registerDataProvider(panel,this);
  return panel;
}
