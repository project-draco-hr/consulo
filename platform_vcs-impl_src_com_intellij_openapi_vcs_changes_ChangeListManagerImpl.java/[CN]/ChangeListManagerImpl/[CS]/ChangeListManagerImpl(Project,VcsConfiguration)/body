{
  myProject=project;
  myConfig=config;
  myFreezeName=new AtomicReference<>(null);
  myAdditionalInfo=null;
  myChangesViewManager=myProject.isDefault() ? new DummyChangesView(myProject) : ChangesViewManager.getInstance(myProject);
  myFileStatusManager=FileStatusManager.getInstance(myProject);
  myComposite=new FileHolderComposite(project);
  myIgnoredIdeaLevel=new IgnoredFilesComponent(myProject,true);
  myUpdater=new UpdateRequestsQueue(myProject,ourUpdateAlarm,myScheduledExecutorService,new ActualUpdater());
  myWorker=new ChangeListWorker(myProject,new MyChangesDeltaForwarder(myProject,ourUpdateAlarm,myScheduledExecutorService));
  myDelayedNotificator=new DelayedNotificator(myListeners,ourUpdateAlarm,myScheduledExecutorService);
  myModifier=new Modifier(myWorker,myDelayedNotificator);
  myConflictTracker=new ChangelistConflictTracker(project,this,myFileStatusManager,EditorNotifications.getInstance(project));
  myListeners.addListener(new ChangeListAdapter(){
    @Override public void defaultListChanged(    final ChangeList oldDefaultList,    ChangeList newDefaultList){
      final LocalChangeList oldList=(LocalChangeList)oldDefaultList;
      if (oldDefaultList == null || oldList.hasDefaultName() || oldDefaultList.equals(newDefaultList))       return;
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        scheduleAutomaticChangeListDeletionIfEmpty(oldList,config);
      }
    }
  }
);
}
