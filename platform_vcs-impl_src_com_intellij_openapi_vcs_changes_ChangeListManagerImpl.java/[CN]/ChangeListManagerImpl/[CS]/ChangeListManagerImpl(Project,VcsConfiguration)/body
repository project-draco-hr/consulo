{
  myProject=project;
  myConfig=config;
  myFreezeName=new AtomicReference<String>(null);
  myAdditionalInfo=null;
  myChangesViewManager=myProject.isDefault() ? new DummyChangesView(myProject) : ChangesViewManager.getInstance(myProject);
  myVfsListener=ApplicationManager.getApplication().getComponent(VcsDirtyScopeVfsListener.class);
  myFileStatusManager=FileStatusManager.getInstance(myProject);
  myComposite=new FileHolderComposite(project);
  myIgnoredIdeaLevel=new IgnoredFilesComponent(myProject,true);
  myUpdater=new UpdateRequestsQueue(myProject,ourUpdateAlarm,new ActualUpdater());
  myWorker=new ChangeListWorker(myProject,new MyChangesDeltaForwarder(myProject,ourUpdateAlarm));
  myDelayedNotificator=new DelayedNotificator(myListeners,ourUpdateAlarm);
  myModifier=new Modifier(myWorker,myDelayedNotificator);
  myConflictTracker=new ChangelistConflictTracker(project,this,myFileStatusManager,EditorNotifications.getInstance(project));
  myListeners.addListener(new ChangeListAdapter(){
    @Override public void defaultListChanged(    final ChangeList oldDefaultList,    ChangeList newDefaultList){
      final LocalChangeList oldList=(LocalChangeList)oldDefaultList;
      if (oldDefaultList == null || oldList.hasDefaultName() || oldDefaultList.equals(newDefaultList))       return;
      if (!ApplicationManager.getApplication().isUnitTestMode() && oldDefaultList.getChanges().isEmpty() && !oldList.isReadOnly()) {
        invokeAfterUpdate(new Runnable(){
          public void run(){
            if (getChangeList(oldList.getId()) == null) {
              return;
            }
switch (config.REMOVE_EMPTY_INACTIVE_CHANGELISTS) {
case SHOW_CONFIRMATION:
              if (myModalNotificationsBlocked) {
                myListsToBeDeleted.add(oldList);
                return;
              }
            if (!showRemoveEmptyChangeListsProposal(config,Collections.singletonList(oldList))) {
              return;
            }
          break;
case DO_NOTHING_SILENTLY:
        return;
case DO_ACTION_SILENTLY:
      break;
  }
  removeChangeList(oldList);
}
}
,InvokeAfterUpdateMode.SILENT,null,null);
}
}
}
);
}
