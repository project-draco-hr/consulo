{
  final ChangeListManagerGate gate=dataHolder.getChangeListWorker().createSelfGate();
  Getter<Boolean> disposedGetter=new Getter<Boolean>(){
    @Override public Boolean get(){
      return myProject.isDisposed() || myUpdater.getIsStoppedGetter().get();
    }
  }
;
  final UpdatingChangeListBuilder builder=new UpdatingChangeListBuilder(dataHolder.getChangeListWorker(),dataHolder.getComposite(),disposedGetter,myIgnoredIdeaLevel,gate);
  for (  final VcsDirtyScope scope : scopes) {
    myUpdateChangesProgressIndicator.checkCanceled();
    final AbstractVcs vcs=scope.getVcs();
    if (vcs == null)     continue;
    scope.setWasEverythingDirty(wasEverythingDirty);
    final VcsModifiableDirtyScope adjustedScope=vcs.adjustDirtyScope((VcsModifiableDirtyScope)scope);
    myChangesViewManager.setBusy(true);
    dataHolder.notifyStartProcessingChanges(adjustedScope);
    actualUpdate(builder,adjustedScope,vcs,dataHolder,gate);
    if (myUpdateException != null)     break;
  }
synchronized (myDataLock) {
    if (myAdditionalInfo == null) {
      myAdditionalInfo=builder.getAdditionalInfo();
    }
  }
}
