{
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  ChangesUtil.processVirtualFilesByVcs(myProject,files,new ChangesUtil.PerVcsProcessor<VirtualFile>(){
    public void process(    final AbstractVcs vcs,    final List<VirtualFile> items){
      final CheckinEnvironment environment=vcs.getCheckinEnvironment();
      if (environment != null) {
        final List<VcsException> result=environment.scheduleUnversionedFilesForAddition(items);
        if (result != null) {
          exceptions.addAll(result);
        }
      }
    }
  }
);
  if (exceptions.size() > 0) {
    StringBuilder message=new StringBuilder(VcsBundle.message("error.adding.files.prompt"));
    for (    VcsException ex : exceptions) {
      message.append("\n").append(ex.getMessage());
    }
    Messages.showErrorDialog(myProject,message.toString(),VcsBundle.message("error.adding.files.title"));
  }
  for (  VirtualFile file : files) {
    myFileStatusManager.fileStatusChanged(file);
  }
  VcsDirtyScopeManager.getInstance(myProject).filesDirty(files,null);
  if (!list.isDefault()) {
    invokeAfterUpdate(new Runnable(){
      public void run(){
synchronized (myDataLock) {
          List<Change> changesToMove=new ArrayList<Change>();
          final LocalChangeList defaultList=getDefaultChangeList();
          for (          Change change : defaultList.getChanges()) {
            final ContentRevision afterRevision=change.getAfterRevision();
            if (afterRevision != null) {
              VirtualFile vFile=afterRevision.getFile().getVirtualFile();
              if (files.contains(vFile)) {
                changesToMove.add(change);
              }
            }
          }
          if (changesToMove.size() > 0) {
            moveChangesTo(list,changesToMove.toArray(new Change[changesToMove.size()]));
          }
        }
        myChangesViewManager.scheduleRefresh();
      }
    }
,InvokeAfterUpdateMode.BACKGROUND_NOT_CANCELLABLE_NOT_AWT,VcsBundle.message("change.lists.manager.add.unversioned"),null);
  }
 else {
    myChangesViewManager.scheduleRefresh();
  }
}
