{
  final Map<String,LocalChangeList> lists=new HashMap<>();
  final Map<String,List<Change>> map;
synchronized (myDataLock) {
    map=myWorker.listsForChanges(changes,lists);
  }
  return new Runnable(){
    @Override public void run(){
      final ChangeListListener multicaster=myDelayedNotificator.getProxyDispatcher();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
synchronized (myDataLock) {
            for (            Map.Entry<String,List<Change>> entry : map.entrySet()) {
              final List<Change> changes=entry.getValue();
              for (Iterator<Change> iterator=changes.iterator(); iterator.hasNext(); ) {
                final Change change=iterator.next();
                if (getChangeList(change) != null) {
                  iterator.remove();
                }
              }
              multicaster.changesRemoved(changes,lists.get(entry.getKey()));
            }
            for (            String listName : map.keySet()) {
              final LocalChangeList byName=myWorker.getCopyByName(listName);
              if (byName != null && !byName.isDefault()) {
                scheduleAutomaticChangeListDeletionIfEmpty(byName,myConfig);
              }
            }
          }
        }
      }
);
    }
  }
;
}
