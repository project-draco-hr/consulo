{
  try {
synchronized (myDataLock) {
      final RecursiveFileHolder fileHolder=(RecursiveFileHolder)myComposite.get(FileHolder.HolderType.IGNORED);
      for (Iterator<VcsDirtyScope> iterator=scopes.iterator(); iterator.hasNext(); ) {
        final VcsModifiableDirtyScope scope=(VcsModifiableDirtyScope)iterator.next();
        final VcsDirtyScopeModifier modifier=scope.getModifier();
        if (modifier != null) {
          final Iterator<FilePath> filesIterator=modifier.getDirtyFilesIterator();
          for (; filesIterator.hasNext(); ) {
            final FilePath dirtyFile=filesIterator.next();
            if ((dirtyFile.getVirtualFile() != null) && isIgnoredFile(dirtyFile.getVirtualFile())) {
              filesIterator.remove();
              fileHolder.addFile(dirtyFile.getVirtualFile());
            }
          }
          final Collection<VirtualFile> roots=modifier.getAffectedVcsRoots();
          for (          VirtualFile root : roots) {
            final Iterator<FilePath> dirIterator=modifier.getDirtyDirectoriesIterator(root);
            for (; dirIterator.hasNext(); ) {
              final FilePath dir=dirIterator.next();
              if ((dir.getVirtualFile() != null) && isIgnoredFile(dir.getVirtualFile())) {
                dirIterator.remove();
                fileHolder.addFile(dir.getVirtualFile());
              }
            }
          }
          modifier.recheckDirtyDirKeys();
          if (scope.isEmpty()) {
            iterator.remove();
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
  }
catch (  AssertionError ex) {
    LOG.error(ex);
  }
}
