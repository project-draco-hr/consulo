{
  FileHolderComposite composite;
  ChangeListWorker changeListWorker;
  final VcsDirtyScopeManagerImpl dirtyScopeManager;
  try {
    dirtyScopeManager=((VcsDirtyScopeManagerImpl)VcsDirtyScopeManager.getInstanceChecked(myProject));
  }
 catch (  ProcessCanceledException ex) {
    return;
  }
catch (  Exception ex) {
    LOG.error(ex);
    return;
  }
  final VcsInvalidated invalidated=dirtyScopeManager.retrieveScopes();
  if (invalidated == null || invalidated.isEmpty()) {
    if (invalidated != null && invalidated.isEmpty() && invalidated.isEverythingDirty()) {
      VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
    }
    return;
  }
  final boolean wasEverythingDirty=invalidated.isEverythingDirty();
  final List<VcsDirtyScope> scopes=invalidated.getScopes();
  boolean somethingChangedInView=false;
  try {
    checkIfDisposed();
synchronized (myDataLock) {
      changeListWorker=myWorker.copy();
      composite=updateUnversionedFiles ? (FileHolderComposite)myComposite.copy() : myComposite;
      myModifier.enterUpdate();
      if (wasEverythingDirty) {
        myUpdateException=null;
      }
      if (updateUnversionedFiles && wasEverythingDirty) {
        composite.cleanAll();
      }
    }
    if (wasEverythingDirty) {
      changeListWorker.notifyStartProcessingChanges(null);
    }
    final ChangeListManagerGate gate=changeListWorker.createSelfGate();
    final UpdatingChangeListBuilder builder=new UpdatingChangeListBuilder(changeListWorker,composite,new Getter<Boolean>(){
      public Boolean get(){
        return myUpdater.isStopped();
      }
    }
,updateUnversionedFiles,myIgnoredIdeaLevel,gate);
    myUpdateChangesProgressIndicator=new EmptyProgressIndicator(){
      @Override public boolean isCanceled(){
        return myUpdater.isStopped() || atomicSectionsAware.shouldExitAsap();
      }
      @Override public void checkCanceled(){
        checkIfDisposed();
        atomicSectionsAware.checkShouldExit();
      }
    }
;
    for (    final VcsDirtyScope scope : scopes) {
      atomicSectionsAware.checkShouldExit();
      final AbstractVcs vcs=scope.getVcs();
      if (vcs == null)       continue;
      final VcsAppendableDirtyScope adjustedScope=vcs.adjustDirtyScope((VcsAppendableDirtyScope)scope);
      myChangesViewManager.updateProgressText(VcsBundle.message("changes.update.progress.message",vcs.getDisplayName()),false);
      if (!wasEverythingDirty) {
        changeListWorker.notifyStartProcessingChanges(adjustedScope);
      }
      if (updateUnversionedFiles && !wasEverythingDirty) {
        composite.cleanScope(adjustedScope);
      }
      try {
        actualUpdate(wasEverythingDirty,composite,builder,adjustedScope,vcs,changeListWorker,gate);
      }
 catch (      Throwable t) {
        LOG.info(t);
        if (t instanceof Error) {
          throw (Error)t;
        }
 else         if (t instanceof RuntimeException) {
          throw (RuntimeException)t;
        }
        throw new RuntimeException(t);
      }
      if (myUpdateException != null)       break;
    }
    final boolean takeChanges=(myUpdateException == null);
synchronized (myDataLock) {
      if (wasEverythingDirty) {
        changeListWorker.notifyDoneProcessingChanges(myDelayedNotificator.getProxyDispatcher());
      }
      myModifier.exitUpdate();
      myModifier.apply(changeListWorker);
      myModifier.clearQueue();
      if (takeChanges) {
        somethingChangedInView|=myWorker.takeData(changeListWorker);
      }
      if (takeChanges && updateUnversionedFiles) {
        boolean statusChanged=!myComposite.equals(composite);
        somethingChangedInView|=statusChanged;
        myComposite=composite;
        if (statusChanged) {
          myDelayedNotificator.getProxyDispatcher().unchangedFileStatusChanged();
        }
      }
      if (takeChanges) {
        updateIgnoredFiles(false);
      }
      myShowLocalChangesInvalidated=false;
    }
  }
 catch (  DisposedException e) {
  }
catch (  ProcessCanceledException e) {
  }
catch (  Exception ex) {
    LOG.error(ex);
  }
catch (  AssertionError ex) {
    LOG.error(ex);
  }
 finally {
    dirtyScopeManager.changesProcessed();
synchronized (myDataLock) {
      myDelayedNotificator.getProxyDispatcher().changeListUpdateDone();
    }
    if (somethingChangedInView) {
      myChangesViewManager.scheduleRefresh();
    }
  }
}
