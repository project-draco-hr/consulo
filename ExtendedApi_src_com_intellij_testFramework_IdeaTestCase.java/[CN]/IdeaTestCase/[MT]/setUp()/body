{
  super.setUp();
  if (ourTestCase != null) {
    String message="Previous test " + ourTestCase + " haven't called tearDown(). Probably overriden without super call.";
    ourTestCase=null;
    assertTrue(message,false);
  }
  ourTestCase=this;
  IdeaLogger.ourErrorsOccurred=null;
  LOG.info(getClass().getName() + ".setUp()");
  initApplication();
  cleanupVfs();
  myFilesToDelete=new HashSet<File>();
  setUpProject();
  final LocalInspectionTool[] tools=configureLocalInspectionTools();
  for (  LocalInspectionTool tool : tools) {
    enableInspectionTool(tool);
  }
  DaemonCodeAnalyzerSettings.getInstance().setInspectionProfile(new InspectionProfileImpl("Configurable"){
    public LocalInspectionTool[] getHighlightingLocalInspectionTools(){
      final Collection<LocalInspectionTool> tools=myAvailableTools.values();
      return tools.toArray(new LocalInspectionTool[tools.size()]);
    }
    public boolean isToolEnabled(    HighlightDisplayKey key){
      if (key == null)       return false;
      return myAvailableTools.containsKey(key.toString()) || isNonInspectionHighlighting(key);
    }
    public HighlightDisplayLevel getErrorLevel(    HighlightDisplayKey key){
      final LocalInspectionTool localInspectionTool=myAvailableTools.get(key);
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    public InspectionTool getInspectionTool(    String shortName){
      if (myAvailableTools.containsKey(shortName)) {
        return new LocalInspectionToolWrapper(myAvailableTools.get(shortName));
      }
      return null;
    }
  }
);
}
