{
  if (isQuickFixOnReadOnlyFile(project,descriptor))   return;
  try {
    final PsiElement classIdentifier=descriptor.getPsiElement();
    final PsiClass psiClass=(PsiClass)classIdentifier.getParent();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final PsiElementFactory factory=psiManager.getElementFactory();
    final PsiMethod constructor=factory.createConstructor();
    final PsiModifierList modifierList=constructor.getModifierList();
    if (psiClass.hasModifierProperty(PsiModifier.PRIVATE)) {
      modifierList.setModifierProperty(PsiModifier.PUBLIC,false);
      modifierList.setModifierProperty(PsiModifier.PRIVATE,true);
    }
 else     if (psiClass.hasModifierProperty(PsiModifier.PROTECTED)) {
      modifierList.setModifierProperty(PsiModifier.PUBLIC,false);
      modifierList.setModifierProperty(PsiModifier.PROTECTED,true);
    }
 else     if (psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
      modifierList.setModifierProperty(PsiModifier.PUBLIC,false);
      modifierList.setModifierProperty(PsiModifier.PROTECTED,true);
    }
 else     if (!psiClass.hasModifierProperty(PsiModifier.PUBLIC)) {
      modifierList.setModifierProperty(PsiModifier.PUBLIC,false);
    }
    psiClass.add(constructor);
    final CodeStyleManager styleManager=psiManager.getCodeStyleManager();
    styleManager.reformat(constructor);
  }
 catch (  IncorrectOperationException e) {
    final Class aClass=getClass();
    final String className=aClass.getName();
    final Logger logger=Logger.getInstance(className);
    logger.error(e);
  }
}
