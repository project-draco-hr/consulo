{
  final BinaryContent content=fileObject.getContent();
  final File srcFile=fileObject.getSourceFile();
  boolean isTemp=false;
  final JavaFileObject.Kind outKind=fileObject.getKind();
  if (srcFile != null && content != null) {
    final String sourcePath=FileUtil.toSystemIndependentName(srcFile.getPath());
    final JavaSourceRootDescriptor rootDescriptor=myContext.getProjectDescriptor().getBuildRootIndex().findJavaRootDescriptor(myContext,srcFile);
    if (rootDescriptor != null) {
      isTemp=rootDescriptor.isTemp;
      if (!isTemp) {
        try {
          if (outKind == JavaFileObject.Kind.CLASS) {
            myOutputConsumer.registerCompiledClass(rootDescriptor.target,new CompiledClass(fileObject.getFile(),srcFile,fileObject.getClassName(),content));
          }
 else {
            myOutputConsumer.registerOutputFile(rootDescriptor.target,fileObject.getFile(),Collections.<String>singleton(sourcePath));
          }
        }
 catch (        IOException e) {
          myContext.processMessage(new CompilerMessage(JavaBuilder.BUILDER_NAME,e));
        }
      }
    }
    if (!isTemp && outKind == JavaFileObject.Kind.CLASS && !Utils.errorsDetected(myContext)) {
      final ClassReader reader=new ClassReader(content.getBuffer(),content.getOffset(),content.getLength());
      myMappingsCallback.associate(FileUtil.toSystemIndependentName(fileObject.getFile().getPath()),sourcePath,reader);
    }
  }
  if (!isTemp && outKind != JavaFileObject.Kind.CLASS && outKind != JavaFileObject.Kind.SOURCE) {
    try {
      FSOperations.markDirty(myContext,fileObject.getFile());
    }
 catch (    IOException e) {
      LOG.info(e);
    }
  }
  try {
    writeToDisk(fileObject,isTemp);
  }
 catch (  IOException e) {
    myContext.processMessage(new CompilerMessage(JavaBuilder.BUILDER_NAME,BuildMessage.Kind.ERROR,e.getMessage()));
  }
}
