{
  final String actual=ref.getReferenceName();
  if (expected.equals(actual))   return true;
  if (ref.getQualifier() != null)   return false;
  final PsiFile file=ref.getContainingFile();
  if (file instanceof GroovyFile) {
    CachedValue<MultiMap<String,String>> data=file.getCopyableUserData(KEY);
    if (data == null) {
      data=CachedValuesManager.getManager(ref.getProject()).createCachedValue(new CachedValueProvider<MultiMap<String,String>>(){
        @Override public Result<MultiMap<String,String>> compute(){
          MultiMap<String,String> aliases=collectAliases((GroovyFile)file);
          return Result.create(aliases,PsiDocumentManager.getInstance(file.getProject()).getDocument(file));
        }
      }
,false);
    }
    final MultiMap<String,String> map=data.getValue();
    final Collection<String> aliases=map.get(expected);
    return aliases.contains(actual);
  }
  return false;
}
