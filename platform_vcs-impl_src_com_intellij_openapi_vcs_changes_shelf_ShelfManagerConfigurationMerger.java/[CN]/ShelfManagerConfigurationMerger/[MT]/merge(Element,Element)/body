{
  Map<Date,ShelvedChangeList> result=new LinkedHashMap<Date,ShelvedChangeList>();
  Map<String,ShelvedChangeList> serverFileToChangeList=collectChanges(serverElement);
  Map<String,ShelvedChangeList> localFileToChangeList=collectChanges(localElement);
  List<String> serverFileNames=myFileProcessor.getServerFiles();
  List<String> localFileNames=myFileProcessor.getLocalFiles();
  Collection<String> serverChangeListFiles=new HashSet<String>();
  for (  String serverFileName : serverFileToChangeList.keySet()) {
    ShelvedChangeList changeList=serverFileToChangeList.get(serverFileName);
    final String newFileName;
    if (!localFileNames.contains(serverFileName)) {
      newFileName=myFileProcessor.copyFileFromServer(serverFileName,localFileNames);
    }
 else {
      ShelvedChangeList localChangeList=localFileToChangeList.get(serverFileName);
      if (localChangeList != null && localChangeList.DATE.equals(changeList.DATE)) {
        newFileName=myFileProcessor.copyFileFromServer(serverFileName,localFileNames);
      }
 else {
        newFileName=myFileProcessor.renameFileOnServer(serverFileName,serverFileNames,localFileNames);
      }
    }
    changeList.PATH=new File(myFileProcessor.getBaseIODir(),newFileName).getAbsolutePath();
    serverChangeListFiles.add(newFileName);
    result.put(changeList.DATE,changeList);
  }
  for (  ShelvedChangeList changeList : localFileToChangeList.values()) {
    result.put(changeList.DATE,changeList);
    serverChangeListFiles.remove(new File(changeList.PATH).getName());
  }
  Collection<ShelvedChangeList> resultChanges=result.values();
  for (  ShelvedChangeList resultChange : resultChanges) {
    String patchFileName=new File(resultChange.PATH).getName();
    resultChange.PATH=myConfigPath + "/" + patchFileName;
    if (serverChangeListFiles.contains(patchFileName)) {
      for (      ShelvedBinaryFile binaryFile : resultChange.getBinaryFiles()) {
        String binFileName=new File(binaryFile.SHELVED_PATH).getName();
        final String newBinFileName;
        if (localFileNames.contains(binFileName)) {
          newBinFileName=myFileProcessor.renameFileOnServer(binFileName,serverFileNames,localFileNames);
        }
 else {
          newBinFileName=myFileProcessor.copyFileFromServer(binFileName,localFileNames);
        }
        binaryFile.SHELVED_PATH=new File(myFileProcessor.getBaseIODir(),newBinFileName).getAbsolutePath();
      }
    }
  }
  Collection<ShelvedChangeList> changes=extractChanges(resultChanges,false);
  Collection<ShelvedChangeList> recycled=extractChanges(resultChanges,true);
  try {
    Element resultElement=new Element(localElement.getName());
    for (    Object attrObject : localElement.getAttributes()) {
      Attribute attr=(Attribute)attrObject;
      resultElement.setAttribute(attr.getName(),attr.getValue());
    }
    ShelvedChangeList.writeChanges(changes,recycled,resultElement);
    return resultElement;
  }
 catch (  WriteExternalException e) {
    return serverElement;
  }
}
