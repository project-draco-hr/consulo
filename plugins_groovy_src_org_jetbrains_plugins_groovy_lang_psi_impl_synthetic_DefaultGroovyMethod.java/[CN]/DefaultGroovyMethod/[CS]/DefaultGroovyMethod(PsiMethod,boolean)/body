{
  super(method.getManager(),method,null);
  myMethod=method;
  PsiElementFactory elementFactory=method.getManager().getElementFactory();
  try {
    myModifiedMethod=elementFactory.createMethod(method.getName(),method.getReturnType());
    myModifiedMethod.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
    myModifiedMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,isStatic);
    PsiParameter[] originalParameters=method.getParameterList().getParameters();
    PsiParameterList newParamList=myModifiedMethod.getParameterList();
    String[] parmNames=new String[originalParameters.length - 1];
    for (int i=1; i < originalParameters.length; i++) {
      PsiParameter originalParameter=originalParameters[i];
      String name;
      final PsiType type=originalParameter.getType();
      String[] nameSuggestions=getManager().getCodeStyleManager().suggestVariableName(VariableKind.PARAMETER,null,null,type).names;
      name="p";
      if (nameSuggestions.length > 0) {
        name=nameSuggestions[0];
      }
      int postfix=1;
      String baseName=name;
      NextName:       do {
        for (int j=1; j < i; j++) {
          if (name.equals(parmNames[j - 1])) {
            name=baseName + postfix;
            postfix++;
            continue NextName;
          }
        }
        break;
      }
 while (true);
      parmNames[i - 1]=name;
      PsiParameter parameter=elementFactory.createParameter(name,type);
      newParamList.add(parameter);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
