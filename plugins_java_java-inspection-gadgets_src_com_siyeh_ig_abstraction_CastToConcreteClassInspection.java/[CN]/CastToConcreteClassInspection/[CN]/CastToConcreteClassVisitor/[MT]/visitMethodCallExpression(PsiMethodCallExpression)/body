{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String referenceName=methodExpression.getReferenceName();
  if (!"cast".equals(referenceName)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final PsiType type=qualifier.getType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass aClass=classType.resolve();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_CLASS.equals(className)) {
    return;
  }
  final PsiType[] parameters=classType.getParameters();
  if (parameters.length != 1) {
    return;
  }
  final PsiType parameter=parameters[0];
  if (!ConcreteClassUtil.typeIsConcreteClass(parameter,ignoreAbstractClasses)) {
    return;
  }
  if (ignoreInEquals) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,true,PsiClass.class);
    if (MethodUtils.isEquals(method)) {
      return;
    }
  }
  registerMethodCallError(expression,parameter);
}
