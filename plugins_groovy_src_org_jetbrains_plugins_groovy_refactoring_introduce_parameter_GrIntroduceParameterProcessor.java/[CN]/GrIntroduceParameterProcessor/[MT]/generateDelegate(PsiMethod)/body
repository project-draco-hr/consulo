{
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(myProject);
  GrMethod result;
  if (prototype instanceof GrMethod) {
    result=(GrMethod)prototype.copy();
  }
 else {
    StringBuilder builder=new StringBuilder();
    builder.append(prototype.getModifierList().getText()).append(' ');
    if (prototype.getReturnTypeElement() != null) {
      builder.append(prototype.getReturnTypeElement().getText());
    }
    builder.append(' ').append(prototype.getName());
    builder.append(prototype.getParameterList().getText());
    builder.append("{}");
    result=factory.createMethodFromText(builder.toString());
  }
  StringBuilder call=new StringBuilder();
  call.append("def foo(){\n").append(prototype.getName()).append('(');
  final GrParameter[] parameters=result.getParameters();
  for (  GrParameter parameter : parameters) {
    call.append(parameter.getName()).append(", ");
  }
  call.append(myParameterInitializer.getText());
  call.append(");\n}");
  final GrOpenBlock block=factory.createMethodFromText(call.toString()).getBlock();
  result.getBlock().replace(block);
  final PsiElement parent=myContext.methodToReplaceIn.getParent();
  return (GrMethod)parent.addBefore(result,myContext.methodToReplaceIn);
}
