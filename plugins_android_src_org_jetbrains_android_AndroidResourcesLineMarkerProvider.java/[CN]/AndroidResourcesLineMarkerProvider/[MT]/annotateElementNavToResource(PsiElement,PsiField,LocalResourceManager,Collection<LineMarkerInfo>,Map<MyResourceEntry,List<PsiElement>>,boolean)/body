{
  final String fieldName=resField.getName();
  if (fieldName != null) {
    final String resType=AndroidResourceUtil.getResourceClassName(resField);
    if (resType != null) {
      Computable<PsiElement[]> targetProvider=new Computable<PsiElement[]>(){
        @Override public PsiElement[] compute(){
          final List<PsiElement> targets;
          if (resourceMap != null) {
            targets=new ArrayList<PsiElement>();
            if (resType.equals("id")) {
              AndroidResourceUtil.collectIdDeclarations(fieldName,manager.getModule(),targets);
            }
            List<PsiElement> resources=resourceMap.get(new MyResourceEntry(fieldName,resType));
            if (resources != null) {
              targets.addAll(resources);
            }
          }
 else {
            targets=AndroidResourceUtil.findResourcesByField(manager,resField);
          }
          return PsiUtilBase.toPsiElementArray(targets);
        }
      }
;
      if (lazy) {
        result.add(createLazyLineMarkerInfo(element,targetProvider));
      }
 else {
        PsiElement[] targets=targetProvider.compute();
        if (targets != null && targets.length > 0) {
          result.add(createLineMarkerInfo(element,targets));
        }
      }
    }
  }
}
