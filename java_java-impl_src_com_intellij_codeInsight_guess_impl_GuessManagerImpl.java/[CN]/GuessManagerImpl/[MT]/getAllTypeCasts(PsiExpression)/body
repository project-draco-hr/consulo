{
  final int start=forPlace.getTextRange().getStartOffset();
  final Map<PsiExpression,PsiType> allCasts=new THashMap<PsiExpression,PsiType>(ExpressionTypeMemoryState.EXPRESSION_HASHING_STRATEGY);
  getTopmostBlock(forPlace).accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitTypeCastExpression(    PsiTypeCastExpression expression){
      final PsiTypeElement castType=expression.getCastType();
      final PsiExpression operand=expression.getOperand();
      if (operand != null && castType != null) {
        allCasts.put(operand,castType.getType());
      }
      super.visitTypeCastExpression(expression);
    }
    @Override public void visitInstanceOfExpression(    PsiInstanceOfExpression expression){
      final PsiTypeElement castType=expression.getCheckType();
      final PsiExpression operand=expression.getOperand();
      if (castType != null) {
        allCasts.put(operand,castType.getType());
      }
      super.visitInstanceOfExpression(expression);
    }
    @Override public void visitElement(    PsiElement element){
      if (element.getTextRange().getStartOffset() > start) {
        return;
      }
      super.visitElement(element);
    }
  }
);
  return allCasts;
}
