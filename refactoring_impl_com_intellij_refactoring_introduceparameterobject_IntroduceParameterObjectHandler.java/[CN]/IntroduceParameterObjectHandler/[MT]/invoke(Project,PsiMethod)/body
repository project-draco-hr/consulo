{
  PsiMethod newMethod=SuperMethodWarningUtil.checkSuperMethod(selectedMethod,RefactoringBundle.message("to.refactor"));
  if (newMethod == null)   return;
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,newMethod))   return;
  final PsiParameter[] parameters=newMethod.getParameterList().getParameters();
  if (parameters.length == 0) {
    final String message=RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("method.selected.has.no.parameters");
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,RefactorJHelpID.IntroduceParameterObject,project);
    return;
  }
  if (newMethod instanceof PsiCompiledElement) {
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.method.cannot.be.wrapped.because.it.is.defined.in.a.non.project.class"),RefactorJHelpID.IntroduceParameterObject,project);
    return;
  }
  new IntroduceParameterObjectDialog(selectedMethod).show();
}
