{
  final ScrollingModel scrollingModel=editor.getScrollingModel();
  scrollingModel.scrollToCaret(ScrollType.MAKE_VISIBLE);
  final PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  PsiMethod selectedMethod=null;
  if (element instanceof PsiMethod) {
    selectedMethod=(PsiMethod)element;
  }
 else {
    final CaretModel caretModel=editor.getCaretModel();
    final int position=caretModel.getOffset();
    PsiElement selectedElement=file.findElementAt(position);
    while (selectedElement != null) {
      if (selectedElement instanceof PsiMethod) {
        selectedMethod=(PsiMethod)selectedElement;
        break;
      }
      selectedElement=selectedElement.getParent();
    }
  }
  if (selectedMethod == null) {
    final String message=RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.caret.should.be.positioned.at.the.name.of.the.method.to.be.refactored");
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.IntroduceParameterObject,project);
    return;
  }
  invoke(project,selectedMethod);
}
