{
  try {
    String classAndMethodName=parseClassAndMethodName();
    String className=classAndMethodName.substring(0,classAndMethodName.lastIndexOf("."));
    String methodName=classAndMethodName.substring(classAndMethodName.lastIndexOf(".") + 1);
    String allParametersSubString=serializedRepresentation.substring(serializedRepresentation.indexOf("(") + 1,serializedRepresentation.lastIndexOf(")")).trim();
    if (allParametersSubString.isEmpty()) {
      throw new IllegalArgumentException("Name should contain 1+ parameter (between opening and closing parenthesis).  " + serializedRepresentation);
    }
 else     if (allParametersSubString.contains("*") && allParametersSubString.indexOf("*") == allParametersSubString.lastIndexOf("*")) {
      throw new IllegalArgumentException("Selected Parameter should be surrounded by asterisks.  " + serializedRepresentation);
    }
    List<String> parameterClasses=new ArrayList<String>();
    List<String> parameterNames=new ArrayList<String>();
    int checkParameterIndex=-1;
    int index=0;
    for (    String parameterClassAndName : allParametersSubString.split(",")) {
      parameterClassAndName=parameterClassAndName.trim();
      if (parameterClassAndName.startsWith("*") && parameterClassAndName.endsWith("*")) {
        checkParameterIndex=index;
        parameterClassAndName=parameterClassAndName.substring(1,parameterClassAndName.length() - 1);
      }
      String[] parameterClassAndNameSplit=parameterClassAndName.split(" ");
      String parameterClass=parameterClassAndNameSplit[0];
      String parameterName=parameterClassAndNameSplit[1];
      parameterClasses.add(parameterClass);
      parameterNames.add(parameterName);
      index++;
    }
    String fullName=initFullName(className,methodName,parameterClasses,parameterNames,checkParameterIndex);
    return new ConditionChecker(className,methodName,parameterClasses,checkParameterIndex,type,fullName);
  }
 catch (  Exception e) {
    LOG.error("An Exception occurred while attempting to build ConditionCheck for Serialized String '" + serializedRepresentation + "' and Type '"+ type+ "'",e);
    return null;
  }
}
