{
  UNRESPONSIVE_THRESHOLD_SECONDS=SystemProperties.getIntProperty("performance.watcher.threshold",5);
  UNRESPONSIVE_INTERVAL_SECONDS=SystemProperties.getIntProperty("performance.watcher.interval",5);
  if (shouldWatch()) {
    final AppScheduledExecutorService service=(AppScheduledExecutorService)AppExecutorUtil.getAppScheduledExecutorService();
    service.setNewThreadListener(new Consumer<Thread>(){
      private final int ourReasonableThreadPoolSize=Registry.intValue("core.pooled.threads");
      @Override public void consume(      Thread thread){
        if (service.getBackendPoolExecutorSize() > ourReasonableThreadPoolSize && ApplicationInfoImpl.getShadowInstance().isEAP()) {
          File file=dumpThreads("newPooledThread/",true);
          LOG.info("Not enough pooled threads" + (file != null ? "; dumped threads into file '" + file.getPath() + "'" : ""));
        }
      }
    }
);
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        deleteOldThreadDumps();
      }
    }
);
    for (    MemoryPoolMXBean bean : ManagementFactory.getMemoryPoolMXBeans()) {
      if ("Code Cache".equals(bean.getName())) {
        watchCodeCache(bean);
        break;
      }
    }
  }
}
