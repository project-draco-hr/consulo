{
  myThreadMXBean=ManagementFactory.getThreadMXBean();
  if (!shouldWatch())   return;
  final String threshold=System.getProperty("performance.watcher.threshold");
  if (threshold != null) {
    try {
      UNRESPONSIVE_THRESHOLD_SECONDS=Integer.parseInt(threshold);
    }
 catch (    NumberFormatException e) {
    }
  }
  final String interval=System.getProperty("performance.watcher.interval");
  if (interval != null) {
    try {
      UNRESPONSIVE_INTERVAL_SECONDS=Integer.parseInt(interval);
    }
 catch (    NumberFormatException e) {
    }
  }
  if (UNRESPONSIVE_THRESHOLD_SECONDS == 0 || UNRESPONSIVE_INTERVAL_SECONDS == 0) {
    return;
  }
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      deleteOldThreadDumps();
    }
  }
);
  mySessionLogDir=new File(PathManager.getLogPath() + "/threadDumps-" + myDateFormat.format(new Date())+ "-"+ ApplicationInfo.getInstance().getBuild().asString());
  myCurHangLogDir=mySessionLogDir;
  try {
    myShutdownSemaphore.acquire();
  }
 catch (  InterruptedException e) {
  }
  myThread=new Thread(new Runnable(){
    @Override public void run(){
      checkEDTResponsiveness();
    }
  }
,"Performance watcher");
  myThread.setPriority(Thread.MIN_PRIORITY);
  myThread.start();
}
