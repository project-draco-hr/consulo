{
  final PsiExpression expression=assignment.getRExpression();
  final Ref<Boolean> result=new Ref<Boolean>(Boolean.TRUE);
  final List<PsiAssignmentExpression> totalUsages=new ArrayList<PsiAssignmentExpression>();
  PsiClass containingClass=field.getContainingClass();
  containingClass.accept(new PsiRecursiveElementVisitor(){
    private PsiCodeBlock currentInitializingBlock;
    public void visitCodeBlock(    PsiCodeBlock block){
      PsiElement parent=block.getParent();
      if (parent instanceof PsiClassInitializer || parent instanceof PsiMethod && ((PsiMethod)parent).isConstructor()) {
        currentInitializingBlock=block;
        super.visitCodeBlock(block);
        currentInitializingBlock=null;
      }
 else {
        super.visitCodeBlock(block);
      }
    }
    public void visitReferenceExpression(    PsiReferenceExpression reference){
      if (!result.get().booleanValue())       return;
      super.visitReferenceExpression(reference);
      if (!PsiUtil.isOnAssignmentLeftHand(reference))       return;
      PsiElement resolved=reference.resolve();
      if (resolved != field)       return;
      PsiExpression rValue=((PsiAssignmentExpression)reference.getParent()).getRExpression();
      if (currentInitializingBlock != null) {
        if (rValue == null || !PsiEquivalenceUtil.areElementsEquivalent(rValue,expression)) {
          result.set(Boolean.FALSE);
        }
        initializingAssignments.add((PsiAssignmentExpression)reference.getParent());
      }
      totalUsages.add(assignment);
    }
  }
);
  if (totalUsages.size() == 1 && initializingAssignments.isEmpty()) {
    initializingAssignments.addAll(totalUsages);
    return true;
  }
  return result.get().booleanValue();
}
