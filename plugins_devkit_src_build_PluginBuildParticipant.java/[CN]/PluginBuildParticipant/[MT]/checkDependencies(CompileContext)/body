{
  final Module[] wrongSetDependencies=PluginBuildUtil.getWrongSetDependencies(myModule);
  if (wrongSetDependencies.length != 0) {
    boolean realProblems=false;
    final String pluginId=DescriptorUtil.getPluginId(myModule);
    for (    Module dependency : wrongSetDependencies) {
      if (!PluginModuleType.isOfType(dependency)) {
        realProblems=true;
        context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("incorrect.dependency.non-plugin-module",dependency.getName(),myModule.getName()),null,-1,-1);
      }
 else {
        final XmlFile pluginXml=PluginModuleType.getPluginXml(dependency);
        boolean isDeclared=false;
        if (pluginXml != null) {
          final XmlTag rootTag=pluginXml.getDocument().getRootTag();
          final XmlTag[] dependencies=rootTag != null ? rootTag.findSubTags("depends") : XmlTag.EMPTY;
          for (          XmlTag dep : dependencies) {
            if (dep.getValue().getTrimmedText().equals(pluginId)) {
              isDeclared=true;
              break;
            }
          }
        }
        if (!isDeclared) {
          realProblems=true;
          context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("incorrect.dependency.not-declared",dependency.getName(),myModule.getName()),null,-1,-1);
        }
      }
    }
    if (realProblems)     return false;
  }
  return true;
}
