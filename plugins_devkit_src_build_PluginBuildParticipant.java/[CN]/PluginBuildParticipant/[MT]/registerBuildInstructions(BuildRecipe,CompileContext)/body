{
  Sdk jdk=IdeaJdk.findIdeaJdk(ModuleRootManager.getInstance(getModule()).getSdk());
  if (jdk != null && IdeaJdk.isFromIDEAProject(jdk.getHomePath())) {
    return;
  }
  registerDescriptorCopyingInstructions(instructions,context);
  if (jdk == null) {
    context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("jdk.type.incorrect",getModule().getName()),null,-1,-1);
    return;
  }
  final Module[] wrongSetDependencies=PluginBuildUtil.getWrongSetDependencies(getModule());
  if (wrongSetDependencies.length != 0) {
    boolean realProblems=false;
    final String pluginId=DescriptorUtil.getPluginId(getModule());
    for (    Module dependency : wrongSetDependencies) {
      if (!PluginModuleType.isOfType(dependency)) {
        realProblems=true;
        context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("incorrect.dependency.non-plugin-module",dependency.getName(),getModule().getName()),null,-1,-1);
      }
 else {
        final XmlFile pluginXml=PluginModuleType.getPluginXml(dependency);
        boolean isDeclared=false;
        if (pluginXml != null) {
          final XmlTag rootTag=pluginXml.getDocument().getRootTag();
          final XmlTag[] dependencies=rootTag != null ? rootTag.findSubTags("depends") : XmlTag.EMPTY;
          for (          XmlTag dep : dependencies) {
            if (dep.getValue().getTrimmedText().equals(pluginId)) {
              isDeclared=true;
              break;
            }
          }
        }
        if (!isDeclared) {
          realProblems=true;
          context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("incorrect.dependency.not-declared",dependency.getName(),getModule().getName()),null,-1,-1);
        }
      }
    }
    if (realProblems)     return;
  }
  final String explodedPath=myPluginBuildConfiguration.getExplodedPath();
  if (explodedPath == null)   return;
  HashSet<Module> modules=new HashSet<Module>();
  PluginBuildUtil.getDependencies(getModule(),modules);
  ModuleLink[] containingModules=new ModuleLink[modules.size()];
  int i=0;
  final DeploymentUtil makeUtil=DeploymentUtil.getInstance();
  for (  Module dep : modules) {
    ModuleLink link=makeUtil.createModuleLink(dep,getModule());
    containingModules[i++]=link;
    link.setPackagingMethod(PackagingMethod.COPY_FILES);
    link.setURI(CLASSES);
  }
  makeUtil.addModuleOutputContents(context,instructions,getModule(),getModule(),CLASSES,explodedPath,null);
  makeUtil.addJavaModuleOutputs(getModule(),containingModules,instructions,context,explodedPath,DevKitBundle.message("presentable.plugin.module.name",ModuleUtil.getModuleNameInReadAction(getModule())));
  HashSet<Library> libs=new HashSet<Library>();
  PluginBuildUtil.getLibraries(getModule(),libs);
  for (  Module dependentModule : modules) {
    PluginBuildUtil.getLibraries(dependentModule,libs);
  }
  final LibraryLink[] libraryLinks=new LibraryLink[libs.size()];
  i=0;
  for (  Library library : libs) {
    LibraryLink link=makeUtil.createLibraryLink(library,getModule());
    libraryLinks[i++]=link;
    link.setPackagingMethod(PackagingMethod.COPY_FILES);
    final boolean onlyDirs=link.hasDirectoriesOnly();
    if (onlyDirs) {
      link.setURI(CLASSES);
    }
 else {
      link.setURI(LIB);
    }
  }
  final VirtualFile libDir=jdk.getHomeDirectory().findFileByRelativePath(LIB_DIRECTORY);
  for (i=0; i < libraryLinks.length; i++) {
    LibraryLink libraryLink=libraryLinks[i];
    final Library library=libraryLink.getLibrary();
    if (library != null) {
      VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);
      for (      VirtualFile file : files) {
        if (file.getFileSystem() instanceof JarFileSystem) {
          file=((JarFileSystem)file.getFileSystem()).getVirtualFileForJar(file);
        }
        if (libDir != null && file != null && VfsUtil.isAncestor(libDir,file,false)) {
          context.addMessage(CompilerMessageCategory.ERROR,DevKitBundle.message("dont.add.idea.libs.to.classpath",file.getName()),null,-1,-1);
        }
      }
      makeUtil.addLibraryLink(context,instructions,libraryLink,getModule(),explodedPath);
    }
  }
}
