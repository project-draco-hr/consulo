{
  buildMethodMaps();
  final JavaMethodSignature signature=method.getSignature();
  final PropertyAccessor accessor=signature.findAnnotation(PropertyAccessor.class,myClass);
  if (accessor != null) {
    return new PropertyAccessorInvocation(DomReflectionUtil.getGetterMethods(accessor.value(),myClass));
  }
  if (myAttributeChildrenMethods.containsKey(signature)) {
    return new GetAttributeChildInvocation(myAttributeChildrenMethods.get(signature));
  }
  if (myFixedChildrenMethods.containsKey(signature)) {
    return new GetFixedChildInvocation(myFixedChildrenMethods.get(signature));
  }
  final Set<CollectionChildDescriptionImpl> qnames=myCompositeChildrenMethods.get(signature);
  if (qnames != null) {
    return new GetCompositeCollectionInvocation(qnames);
  }
  final Pair<CollectionChildDescriptionImpl,Set<CollectionChildDescriptionImpl>> pair=myCompositeCollectionAdditionMethods.get(signature);
  if (pair != null) {
    return new AddToCompositeCollectionInvocation(pair.first,pair.second,method.getGenericReturnType());
  }
  CollectionChildDescriptionImpl description=myCollectionChildrenGetterMethods.get(signature);
  if (description != null) {
    return new GetCollectionChildInvocation(description);
  }
  description=myCollectionChildrenAdditionMethods.get(signature);
  if (description != null) {
    return new AddChildInvocation(getTypeGetter(method),getIndexGetter(method),description,description.getType());
  }
  throw new UnsupportedOperationException("No implementation for method " + method.toString() + " in class "+ myClass);
}
