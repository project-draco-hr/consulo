{
  if (!myInitialized) {
    final StaticGenericInfoBuilder builder=new StaticGenericInfoBuilder(myDomManager,myClass);
    final JavaMethod customChildrenGetter=builder.getCustomChildrenGetter();
    if (customChildrenGetter != null) {
      myCustomDescription=new CustomDomChildrenDescriptionImpl(customChildrenGetter);
    }
    myAttributeChildrenMethods=builder.getAttributes();
    myAttributes.addDescriptions(myAttributeChildrenMethods.values());
    myFixedChildrenMethods=builder.getFixedGetters();
    for (    final Pair<FixedChildDescriptionImpl,Integer> pair : myFixedChildrenMethods.values()) {
      myFixed.addDescription(pair.first);
    }
    myCollectionChildrenGetterMethods=builder.getCollectionGetters();
    myCollections.addDescriptions(myCollectionChildrenGetterMethods.values());
    for (    final CollectionChildDescriptionImpl description : myCollectionChildrenGetterMethods.values()) {
      addAdder(description,description.getAdderMethods());
      addAdder(description,description.getIndexedAdderMethods());
      addAdder(description,description.getIndexedClassAdderMethods());
      addAdder(description,description.getInvertedIndexedClassAdderMethods());
      addAdder(description,description.getClassAdderMethods());
    }
    final NotNullFunction<String,CollectionChildDescriptionImpl> mapper=new NotNullFunction<String,CollectionChildDescriptionImpl>(){
      @NotNull public CollectionChildDescriptionImpl fun(      final String xmlName){
        return ObjectUtils.assertNotNull(myCollections.findDescription(xmlName));
      }
    }
;
    final Map<JavaMethodSignature,String[]> getters=builder.getCompositeCollectionGetters();
    for (    final JavaMethodSignature signature : getters.keySet()) {
      myCompositeChildrenMethods.put(signature,ContainerUtil.map2Set(getters.get(signature),mapper));
    }
    final Map<JavaMethodSignature,Pair<String,String[]>> adders=builder.getCompositeCollectionAdders();
    for (    final JavaMethodSignature signature : adders.keySet()) {
      final Pair<String,String[]> pair=adders.get(signature);
      myCompositeCollectionAdditionMethods.put(signature,Pair.create(myCollections.findDescription(pair.first),ContainerUtil.map2Set(pair.second,mapper)));
    }
    myNameValueGetter=builder.getNameValueGetter();
    myValueElement=builder.isValueElement();
    myInitialized=true;
  }
  return true;
}
