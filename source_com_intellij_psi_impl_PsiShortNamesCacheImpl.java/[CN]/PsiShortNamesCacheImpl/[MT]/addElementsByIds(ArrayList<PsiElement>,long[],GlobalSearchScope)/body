{
  RepositoryElementsManager repositoryElementsManager=myManager.getRepositoryElementsManager();
  GenericHashSet<PsiElement> set=new GenericHashSet<PsiElement>(new TObjectHashingStrategy<PsiElement>(){
    public int computeHashCode(    PsiElement psiElement){
      if (psiElement instanceof PsiMember) {
        PsiMember member=(PsiMember)psiElement;
        int code=0;
        if (member instanceof PsiMethod) {
          code+=((PsiMethod)member).getParameterList().getParameters().length;
        }
        PsiClass aClass=member.getContainingClass();
        if (aClass != null) {
          code+=computeHashCode(aClass);
        }
        return code;
      }
 else {
        LOG.error(psiElement.toString());
        return 0;
      }
    }
    public boolean equals(    PsiElement object,    PsiElement object1){
      return myManager.areElementsEquivalent((PsiElement)object,(PsiElement)object1);
    }
  }
);
  for (int i=0; i < ids.length; i++) {
    long id=ids[i];
    PsiElement element=repositoryElementsManager.findOrCreatePsiElementById(id);
    if (!scope.contains(element.getContainingFile().getVirtualFile()))     continue;
    if (!set.add(element))     continue;
    list.add(element);
  }
}
