{
  if (mySkipSelectionChange || e.getValueIsAdjusting()) {
    return;
  }
  ListSelectionModel selectionModel=getSelectionModel();
  if (selectionModel.isSelectionEmpty()) {
    hideEditor();
    return;
  }
  int selectedRow=selectionModel.getMinSelectionIndex();
  if (selectedRow != selectionModel.getMaxSelectionIndex()) {
    hideEditor();
    return;
  }
  if (myEditorRow >= 0) {
    if (myEditorRow == selectedRow + 1) {
      return;
    }
 else {
      hideEditor();
    }
  }
  selectedRow=selectionModel.getMinSelectionIndex();
  ArrangementListRowDecorator toEdit=myComponents.get(selectedRow);
  if (toEdit == null) {
    return;
  }
  myEditorRow=selectedRow + 1;
  ArrangementEditorComponent editor=new ArrangementEditorComponent(this,myEditorRow,myEditor);
  Container parent=getParent();
  int width=getBounds().width;
  if (parent instanceof JViewport) {
    width-=((JScrollPane)parent.getParent()).getVerticalScrollBar().getWidth();
  }
  editor.applyAvailableWidth(width);
  myComponents.shiftKeys(myEditorRow,1);
  mySkipSelectionChange=true;
  try {
    getModel().insertElementAt(editor,myEditorRow);
  }
  finally {
    mySkipSelectionChange=false;
  }
  Rectangle bounds=getCellBounds(selectedRow,myEditorRow);
  if (bounds != null) {
    myRepresentationCallback.ensureVisible(bounds);
  }
  editor.expand();
  repaintRows(selectedRow,getModel().size() - 1,false);
}
