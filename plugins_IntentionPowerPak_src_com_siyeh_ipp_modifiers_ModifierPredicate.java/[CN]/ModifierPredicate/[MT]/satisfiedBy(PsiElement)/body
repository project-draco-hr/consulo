{
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiClass || parent instanceof PsiField || parent instanceof PsiMethod)) {
    return false;
  }
  if (element instanceof PsiDocComment || element instanceof PsiCodeBlock) {
    return false;
  }
  if (parent instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)parent;
    final PsiElement brace=aClass.getLBrace();
    if (brace != null && brace.getTextOffset() < element.getTextOffset()) {
      return false;
    }
    if (aClass.getContainingClass() == null && (myModifier.equals(PsiModifier.PRIVATE) || myModifier.equals(PsiModifier.PROTECTED))) {
      return false;
    }
  }
 else   if (parent instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)parent;
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass == null || containingClass.isInterface()) {
      return false;
    }
  }
  final PsiModifierListOwner owner=(PsiModifierListOwner)parent;
  final PsiModifierList modifierList=owner.getModifierList();
  if (modifierList == null) {
    return false;
  }
  return !modifierList.hasModifierProperty(myModifier);
}
