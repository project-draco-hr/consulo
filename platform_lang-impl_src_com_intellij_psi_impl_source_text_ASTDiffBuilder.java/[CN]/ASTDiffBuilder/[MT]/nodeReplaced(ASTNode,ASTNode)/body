{
  if (oldNode instanceof FileElement && newNode instanceof FileElement) {
    BlockSupportImpl.replaceFileElement(myFile,(FileElement)oldNode,(FileElement)newNode,myPsiManager);
  }
 else {
    final ASTNode parent=oldNode.getTreeParent();
    TreeUtil.ensureParsed(oldNode);
    final PsiElement psiParent=parent.getPsi();
    final PsiElement psiChild=myIsPhysicalScope ? oldNode.getPsi() : null;
    if (psiParent != null && psiChild != null) {
      final PsiTreeChangeEventImpl event=new PsiTreeChangeEventImpl(myPsiManager);
      event.setParent(psiParent);
      event.setChild(psiChild);
      myPsiManager.beforeChildReplacement(event);
    }
    ((TreeElement)newNode).rawRemove();
    ((TreeElement)oldNode).rawReplaceWithList((TreeElement)newNode);
    final ReplaceChangeInfoImpl change=(ReplaceChangeInfoImpl)ChangeInfoImpl.create(ChangeInfo.REPLACE,newNode);
    change.setReplaced(oldNode);
    myEvent.addElementaryChange(newNode,change);
    ((TreeElement)newNode).clearCaches();
    if (!(newNode instanceof FileElement)) {
      ((CompositeElement)newNode.getTreeParent()).subtreeChanged();
    }
    if (DEBUG) {
      DebugUtil.checkTreeStructure(parent);
    }
  }
}
