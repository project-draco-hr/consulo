{
  final SubTree subTree=new SubTree(myWorkingCopyDir);
  checkin();
  moveFileInCommand(subTree.mySourceDir,subTree.myTargetDir);
  Assert.assertTrue(subTree.mySourceDir.getPath().endsWith("/target/source"));
  assertVF(subTree.myTargetDir,"source");
  editFileInCommand(myProject,subTree.myS1File,"new");
  final CharSequence text1=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals("new",text1.toString());
  sleep1000();
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  clManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{subTree.mySourceDir,subTree.myS1File,subTree.myS2File},clManager.getDefaultListName(),clManager);
  final Collection<Change> changes=clManager.getDefaultChangeList().getChanges();
  final RollbackWorker worker=new RollbackWorker(myProject,true);
  worker.doRollback(changes,false,null,null);
  subTree.mySourceDir=assertVF(subTree.myRootDir,"source");
  Assert.assertTrue(subTree.mySourceDir.getPath().endsWith("/root/source"));
  subTree.myS1File=assertVF(subTree.mySourceDir,"s1.txt");
  subTree.myS2File=assertVF(subTree.mySourceDir,"s2.txt");
  final CharSequence text=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals(SubTree.ourS1Contents,text.toString());
  clManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{},clManager.getDefaultListName(),clManager);
}
