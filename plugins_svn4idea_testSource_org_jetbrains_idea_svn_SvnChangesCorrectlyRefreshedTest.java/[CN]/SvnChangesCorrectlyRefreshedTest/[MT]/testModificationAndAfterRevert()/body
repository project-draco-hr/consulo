{
  final SubTree subTree=new SubTree(myWorkingCopyDir);
  checkin();
  sleep(100);
  editFileInCommand(myProject,subTree.myS1File,"new content");
  final CharSequence text1=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals("new content",text1.toString());
  sleep(100);
  LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(subTree.myS1File.getPath()));
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  clManager.ensureUpToDate(false);
  final VcsException updateException=((ChangeListManagerImpl)clManager).getUpdateException();
  if (updateException != null) {
    updateException.printStackTrace();
  }
  if (!SvnVcs.ourBusyExceptionProcessor.process(updateException)) {
    Assert.assertNull(updateException == null ? null : updateException.getMessage(),updateException);
  }
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{subTree.myS1File},clManager.getDefaultListName(),clManager);
  final Collection<Change> changes=clManager.getDefaultChangeList().getChanges();
  final RollbackWorker worker=new RollbackWorker(myProject);
  worker.doRollback(changes,false,null,null);
  final CharSequence text=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals(SubTree.ourS1Contents,text.toString());
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  clManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{},clManager.getDefaultListName(),clManager);
}
