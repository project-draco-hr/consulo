{
  final SubTree subTree=new SubTree(myWorkingCopyDir);
  checkin();
  try {
    Thread.sleep(30);
  }
 catch (  InterruptedException e) {
  }
  editFileInCommand(myProject,subTree.myS1File,"new");
  final CharSequence text1=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals("new",text1.toString());
  sleep1000();
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  clManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{subTree.myS1File},clManager.getDefaultListName(),clManager);
  final Collection<Change> changes=clManager.getDefaultChangeList().getChanges();
  final RollbackWorker worker=new RollbackWorker(myProject,true);
  worker.doRollback(changes,false,null,null);
  final CharSequence text=LoadTextUtil.loadText(subTree.myS1File);
  Assert.assertEquals(SubTree.ourS1Contents,text.toString());
  clManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{},clManager.getDefaultListName(),clManager);
}
