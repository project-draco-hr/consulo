{
  if (updateStack.contains(mavenProject)) {
    MavenLog.LOG.info("Recursion detected in " + mavenProject.getFile());
    return;
  }
  updateStack.push(mavenProject);
  process.setText(ProjectBundle.message("maven.reading.pom",mavenProject.getPath()));
  process.setText2("");
  List<MavenProject> prevModules=getModules(mavenProject);
  Set<MavenProject> prevInheritors=isNew ? new THashSet<MavenProject>() : findInheritors(mavenProject);
  MavenProjectTimestamp timestamp=calculateTimestamp(mavenProject,myActiveProfiles,generalSettings);
  boolean isChanged=!timestamp.equals(myTimestamps.get(mavenProject));
  if (isChanged) {
    writeLock();
    try {
      if (!isNew)       myMavenIdToProjectMapping.remove(mavenProject.getMavenId());
    }
  finally {
      writeUnlock();
    }
    mavenProject.read(generalSettings,myActiveProfiles,reader,myProjectLocator);
    writeLock();
    try {
      myVirtualFileToProjectMapping.put(mavenProject.getFile(),mavenProject);
      myMavenIdToProjectMapping.put(mavenProject.getMavenId(),mavenProject);
    }
  finally {
      writeUnlock();
    }
    timestamp=calculateTimestamp(mavenProject,myActiveProfiles,generalSettings);
    myTimestamps.put(mavenProject,timestamp);
    resolveIntermoduleDependencies(mavenProject);
  }
  boolean reconnected=reconnect(aggregator,mavenProject);
  if (isChanged || reconnected) {
    updateContext.update(mavenProject);
  }
  List<VirtualFile> existingModuleFiles=mavenProject.getExistingModuleFiles();
  List<MavenProject> modulesToRemove=new ArrayList<MavenProject>();
  List<MavenProject> modulesToBecomeRoots=new ArrayList<MavenProject>();
  for (  MavenProject each : prevModules) {
    VirtualFile moduleFile=each.getFile();
    if (!existingModuleFiles.contains(moduleFile)) {
      if (isManagedFile(moduleFile)) {
        modulesToBecomeRoots.add(each);
      }
 else {
        modulesToRemove.add(each);
      }
    }
  }
  for (  MavenProject each : modulesToRemove) {
    removeModule(mavenProject,each);
    doDelete(mavenProject,each,updateContext);
    prevInheritors.removeAll(updateContext.deletedProjects);
  }
  for (  MavenProject each : modulesToBecomeRoots) {
    if (reconnect(null,each))     updateContext.update(each);
  }
  for (  VirtualFile each : existingModuleFiles) {
    MavenProject child=findProject(each);
    boolean isNewModule=child == null;
    if (isNewModule) {
      child=new MavenProject(each);
    }
 else {
      MavenProject currentAggregator=findAggregator(child);
      if (currentAggregator != null && currentAggregator != mavenProject) {
        MavenLog.LOG.info("Module " + each + " is already included into "+ mavenProject.getFile());
        continue;
      }
    }
    if (isChanged || isNewModule || recursive) {
      doUpdate(child,mavenProject,isNewModule,recursive,updateContext,updateStack,reader,generalSettings,process);
    }
 else {
      if (reconnect(mavenProject,child)) {
        updateContext.update(child);
      }
    }
  }
  Set<MavenProject> allInheritors=findInheritors(mavenProject);
  allInheritors.addAll(prevInheritors);
  for (  MavenProject each : allInheritors) {
    doUpdate(each,findAggregator(each),false,recursive,updateContext,updateStack,reader,generalSettings,process);
  }
  updateStack.pop();
}
