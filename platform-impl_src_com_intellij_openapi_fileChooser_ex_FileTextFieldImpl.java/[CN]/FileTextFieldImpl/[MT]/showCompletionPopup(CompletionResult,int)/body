{
  if (myList == null) {
    myList=new JList();
    myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    myList.setCellRenderer(new GroupedItemsListRenderer(new ListItemDescriptor(){
      public String getTextFor(      final Object value){
        final LookupFile file=(LookupFile)value;
        if (file.getMacro() != null) {
          return file.getMacro();
        }
 else {
          return (myCurrentCompletion != null && myCurrentCompletion.myKidsAfterSeparator.contains(file) ? myFinder.getSeparator() : "") + file.getName();
        }
      }
      public String getTooltipFor(      final Object value){
        return null;
      }
      public Icon getIconFor(      final Object value){
        return null;
      }
      private Separator getSeparatorAboveOf(      Object value){
        if (myCurrentCompletion == null)         return null;
        final LookupFile file=(LookupFile)value;
        final int fileIndex=myCurrentCompletion.myToComplete.indexOf(file);
        if (fileIndex > 0 && !myCurrentCompletion.myMacros.contains(file)) {
          final LookupFile prev=myCurrentCompletion.myToComplete.get(fileIndex - 1);
          if (myCurrentCompletion.myMacros.contains(prev)) {
            return new Separator("");
          }
        }
        if (myCurrentCompletion.myKidsAfterSeparator.indexOf(file) == 0 && myCurrentCompletion.mySiblings.size() > 0) {
          final LookupFile parent=file.getParent();
          return parent == null ? new Separator("") : new Separator(parent.getName());
        }
        if (myCurrentCompletion.myMacros.size() > 0 && fileIndex == 0) {
          return new Separator("Path Variables");
        }
        return null;
      }
      public boolean hasSeparatorAboveOf(      final Object value){
        return getSeparatorAboveOf(value) != null;
      }
      public String getCaptionAboveOf(      final Object value){
        final FileTextFieldImpl.Separator separator=getSeparatorAboveOf(value);
        return separator != null ? separator.getText() : null;
      }
    }
));
  }
  if (myCurrentPopup != null) {
    closePopup();
  }
  myCurrentCompletion=result;
  myCurrentCompletionsPos=position;
  if (myCurrentCompletion.myToComplete.size() == 0)   return;
  myList.setModel(new AbstractListModel(){
    public int getSize(){
      return myCurrentCompletion.myToComplete.size();
    }
    public Object getElementAt(    final int index){
      return myCurrentCompletion.myToComplete.get(index);
    }
  }
);
  myList.getSelectionModel().clearSelection();
  final PopupChooserBuilder builder=JBPopupFactory.getInstance().createListPopupBuilder(myList);
  builder.addListener(new JBPopupListener(){
    public void beforeShown(    final Project project,    final JBPopup popup){
      myPathTextField.registerKeyboardAction(myCancelAction,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
      for (      Action each : myDisabledTextActions) {
        each.setEnabled(false);
      }
    }
    public void onClosed(    final JBPopup popup){
      myPathTextField.unregisterKeyboardAction(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0));
      for (      Action each : myDisabledTextActions) {
        each.setEnabled(true);
      }
    }
  }
);
  myCurrentPopup=builder.setRequestFocus(false).setAutoSelectIfEmpty(false).setResizable(false).setCancelCalllback(new Computable<Boolean>(){
    public Boolean compute(){
      final int caret=myPathTextField.getCaretPosition();
      myPathTextField.setSelectionStart(caret);
      myPathTextField.setSelectionEnd(caret);
      myPathTextField.setFocusTraversalKeysEnabled(true);
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          getField().requestFocus();
        }
      }
);
      return Boolean.TRUE;
    }
  }
).setItemChoosenCallback(new Runnable(){
    public void run(){
      processChosenFromCompletion(true);
    }
  }
).setCancelKeyEnabled(false).setAlpha(0.1f).setFocusOwners(new Component[]{myPathTextField}).createPopup();
  if (result.myPreselected != null) {
    myList.setSelectedValue(result.myPreselected,false);
  }
  myPathTextField.setFocusTraversalKeysEnabled(false);
  myCurrentPopup.showInScreenCoordinates(getField(),getLocationForCaret());
}
