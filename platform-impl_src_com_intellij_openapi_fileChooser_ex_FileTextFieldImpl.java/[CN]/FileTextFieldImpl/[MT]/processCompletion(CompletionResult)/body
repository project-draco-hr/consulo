{
  result.myToComplete=new ArrayList<LookupFile>();
  result.mySiblings=new ArrayList<LookupFile>();
  result.myKidsAfterSeparator=new ArrayList<LookupFile>();
  String typed=result.myCompletionBase;
  final LookupFile current=getClosestParent(typed);
  result.myClosestParent=current;
  if (current == null)   return;
  if (typed == null || typed.length() == 0)   return;
  final String typedText=myFinder.normalize(typed);
  final boolean currentParentMatch=SystemInfo.isFileSystemCaseSensitive ? typedText.equals(current.getAbsolutePath()) : typedText.equalsIgnoreCase(current.getAbsolutePath());
  final boolean closedPath=typed.endsWith(myFinder.getSeparator()) && typedText.length() > myFinder.getSeparator().length();
  final String currentParentText=current.getAbsolutePath();
  if (!typedText.toUpperCase().startsWith(currentParentText.toUpperCase()))   return;
  String prefix=typedText.substring(currentParentText.length());
  if (prefix.startsWith(myFinder.getSeparator())) {
    prefix=prefix.substring(myFinder.getSeparator().length());
  }
 else   if (typed.endsWith(myFinder.getSeparator())) {
    prefix="";
  }
  final String effectivePrefix=prefix.toUpperCase();
  final LookupFile currentGrandparent=current.getParent();
  final String[] grandparentPrefix=new String[1];
  if (currentGrandparent != null && currentParentMatch && !closedPath) {
    final String currentGrandparentText=currentGrandparent.getAbsolutePath();
    if (typedText.startsWith(currentGrandparentText + myFinder.getSeparator())) {
      grandparentPrefix[0]=currentParentText.substring(currentGrandparentText.length() + myFinder.getSeparator().length()).toUpperCase();
    }
  }
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      result.myToComplete.addAll(current.getChildren(new LookupFilter(){
        public boolean isAccepted(        final LookupFile file){
          return myFilter.isAccepted(file) && file.getName().toUpperCase().startsWith(effectivePrefix);
        }
      }
));
      if (currentParentMatch && !closedPath) {
        result.myKidsAfterSeparator.addAll(result.myToComplete);
      }
      if (grandparentPrefix[0] != null) {
        final List<LookupFile> siblings=currentGrandparent.getChildren(new LookupFilter(){
          public boolean isAccepted(          final LookupFile file){
            return !file.equals(current) && myFilter.isAccepted(file) && file.getName().toUpperCase().startsWith(grandparentPrefix[0]);
          }
        }
);
        result.myToComplete.addAll(0,siblings);
        result.mySiblings.addAll(siblings);
      }
      int currentDiff=Integer.MIN_VALUE;
      LookupFile toPreselect=result.myPreselected;
      if (toPreselect == null || !result.myToComplete.contains(toPreselect)) {
        if (effectivePrefix.length() > 0) {
          for (          LookupFile each : result.myToComplete) {
            String eachName=each.getName().toUpperCase();
            if (!eachName.startsWith(effectivePrefix))             continue;
            int diff=effectivePrefix.compareTo(eachName);
            currentDiff=Math.max(diff,currentDiff);
            if (currentDiff == diff) {
              toPreselect=each;
            }
          }
        }
 else {
          toPreselect=null;
        }
        if (toPreselect == null) {
          if (result.myToComplete.size() == 1) {
            toPreselect=result.myToComplete.get(0);
          }
 else           if (effectivePrefix.length() == 0) {
            if (result.mySiblings.size() > 0) {
              toPreselect=result.mySiblings.get(0);
            }
            if (!result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) {
              toPreselect=result.myToComplete.get(0);
            }
          }
        }
      }
      if (currentParentMatch && result.mySiblings.size() > 0) {
        toPreselect=null;
      }
      result.myPreselected=toPreselect;
    }
  }
);
}
