{
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(context,PsiClass.class);
  if (containingClass != null) {
    if (fqName.equals(containingClass.getQualifiedName())) {
      return true;
    }
    final String shortName=ClassUtil.extractClassName(fqName);
    final PsiClass[] innerClasses=containingClass.getAllInnerClasses();
    for (    PsiClass innerClass : innerClasses) {
      if (innerClass.hasModifierProperty(PsiModifier.PRIVATE)) {
        continue;
      }
      if (innerClass.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
        if (!inSamePackage(innerClass,containingClass)) {
          continue;
        }
      }
      final String className=innerClass.getName();
      if (shortName.equals(className)) {
        return false;
      }
    }
  }
  final PsiJavaFile file=PsiTreeUtil.getParentOfType(context,PsiJavaFile.class);
  if (file == null) {
    return false;
  }
  if (hasExactImportConflict(fqName,file)) {
    return false;
  }
  if (hasOnDemandImportConflict(fqName,file,true)) {
    return false;
  }
  if (containsConflictingClass(fqName,file)) {
    return false;
  }
  return !containsConflictingClassName(fqName,file);
}
