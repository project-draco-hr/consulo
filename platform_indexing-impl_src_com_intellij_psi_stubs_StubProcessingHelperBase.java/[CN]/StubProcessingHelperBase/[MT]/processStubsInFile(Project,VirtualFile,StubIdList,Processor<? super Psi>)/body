{
  StubTree stubTree=null;
  PsiFile _psifile=PsiManager.getInstance(project).findFile(file);
  PsiFileWithStubSupport psiFile=null;
  boolean customStubs=false;
  if (_psifile != null && !(_psifile instanceof PsiPlainTextFile)) {
    _psifile=_psifile.getViewProvider().getStubBindingRoot();
    if (_psifile instanceof PsiFileWithStubSupport) {
      psiFile=(PsiFileWithStubSupport)_psifile;
      stubTree=psiFile.getStubTree();
      if (stubTree == null && psiFile instanceof PsiFileImpl) {
        BinaryFileStubBuilder stubBuilder=BinaryFileStubBuilders.INSTANCE.forFileType(psiFile.getFileType());
        if (stubBuilder == null)         stubTree=((PsiFileImpl)psiFile).calcStubTree();
 else         customStubs=true;
      }
    }
  }
  if (stubTree == null && psiFile == null) {
    return true;
  }
  if (stubTree == null) {
    ObjectStubTree objectStubTree=StubTreeLoader.getInstance().readFromVFile(project,file);
    if (objectStubTree == null) {
      return true;
    }
    if (customStubs && !(objectStubTree instanceof StubTree)) {
      return processor.process((Psi)psiFile);
    }
    stubTree=(StubTree)objectStubTree;
    final List<StubElement<?>> plained=stubTree.getPlainList();
    for (int i=0, size=value.size(); i < size; i++) {
      final StubElement<?> stub=plained.get(value.get(i));
      PsiUtilCore.ensureValid(psiFile);
      final ASTNode tree=psiFile.findTreeForStub(stubTree,stub);
      if (tree != null) {
        if (tree.getElementType() == stubType(stub)) {
          Psi psi=(Psi)tree.getPsi();
          PsiUtilCore.ensureValid(psi);
          if (!processor.process(psi))           return false;
        }
 else {
          String persistedStubTree=((PsiFileStubImpl)stubTree.getRoot()).printTree();
          String stubTreeJustBuilt=((PsiFileStubImpl)((IStubFileElementType)((PsiFileImpl)psiFile).getContentElementType()).getBuilder().buildStubTree(psiFile)).printTree();
          StringBuilder builder=new StringBuilder();
          builder.append("Oops\n");
          builder.append("Recorded stub:-----------------------------------\n");
          builder.append(persistedStubTree);
          builder.append("\nAST built stub: ------------------------------------\n");
          builder.append(stubTreeJustBuilt);
          builder.append("\n");
          LOG.info(builder.toString());
          onInternalError(file);
        }
      }
    }
  }
 else {
    final List<StubElement<?>> plained=stubTree.getPlainList();
    for (int i=0, size=value.size(); i < size; i++) {
      final int stubTreeIndex=value.get(i);
      if (stubTreeIndex >= plained.size()) {
        final VirtualFile virtualFile=psiFile.getVirtualFile();
        StubTree stubTreeFromIndex=(StubTree)StubTreeLoader.getInstance().readFromVFile(project,file);
        LOG.error(stubTreeAndIndexDoNotMatch(stubTree,psiFile,plained,virtualFile,stubTreeFromIndex));
        onInternalError(file);
        break;
      }
      Psi psi=(Psi)plained.get(stubTreeIndex).getPsi();
      PsiUtilCore.ensureValid(psi);
      if (!processor.process(psi))       return false;
    }
  }
  return true;
}
