{
  try {
    final ControlFlow controlFlow=ControlFlowFactory.getInstance(body.getProject()).getControlFlow(body,AllVariablesControlFlowPolicy.getInstance());
    final List<PsiVariable> usedVars=ControlFlowUtil.getUsedVariables(controlFlow,0,controlFlow.getSize());
    for (    PsiVariable usedVariable : usedVars) {
      if (usedVariable instanceof PsiField) {
        final PsiField usedField=(PsiField)usedVariable;
        if (!usedFields.add(usedField)) {
          candidates.remove(usedField);
        }
      }
    }
    final Ref<Collection<PsiVariable>> writtenVariables=new Ref<Collection<PsiVariable>>();
    final List<PsiReferenceExpression> readBeforeWrites=ControlFlowUtil.getReadBeforeWrite(controlFlow);
    for (    final PsiReferenceExpression readBeforeWrite : readBeforeWrites) {
      final PsiElement resolved=readBeforeWrite.resolve();
      if (resolved instanceof PsiField) {
        final PsiField field=(PsiField)resolved;
        if (!(field.getType() instanceof PsiPrimitiveType) || !PsiUtil.isConstantExpression(field.getInitializer()) || getWrittenVariables(controlFlow,writtenVariables).contains(field)) {
          PsiElement parent=body.getParent();
          if (!(parent instanceof PsiMethod) || !((PsiMethod)parent).isConstructor() || field.getInitializer() == null || field.hasModifierProperty(PsiModifier.STATIC) || !PsiTreeUtil.isAncestor(((PsiMethod)parent).getContainingClass(),field,true)) {
            candidates.remove(field);
          }
        }
      }
    }
  }
 catch (  AnalysisCanceledException e) {
    candidates.clear();
  }
}
