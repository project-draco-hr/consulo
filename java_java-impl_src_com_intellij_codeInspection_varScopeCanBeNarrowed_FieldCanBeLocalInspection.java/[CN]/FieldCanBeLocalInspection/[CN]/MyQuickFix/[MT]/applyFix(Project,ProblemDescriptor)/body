{
  PsiElement element=descriptor.getPsiElement();
  PsiField myField=PsiTreeUtil.getParentOfType(element,PsiField.class);
  if (myField == null || !myField.isValid())   return;
  final PsiDocComment docComment=myField.getDocComment();
  final Collection<PsiReference> refs=ReferencesSearch.search(myField).findAll();
  if (refs.isEmpty())   return;
  Set<PsiReference> refsSet=new HashSet<PsiReference>(refs);
  PsiCodeBlock anchorBlock=findAnchorBlock(refs);
  if (anchorBlock == null)   return;
  if (!CodeInsightUtil.preparePsiElementsForWrite(anchorBlock))   return;
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
  final String propertyName=styleManager.variableNameToPropertyName(myField.getName(),VariableKind.FIELD);
  String localName=styleManager.propertyNameToVariableName(propertyName,VariableKind.LOCAL_VARIABLE);
  localName=RefactoringUtil.suggestUniqueVariableName(localName,anchorBlock,myField);
  PsiElement firstElement=getFirstElement(refs);
  boolean mayBeFinal=mayBeFinal(refsSet,firstElement);
  PsiElement newDeclaration=null;
  try {
    final PsiElement anchor=getAnchorElement(anchorBlock,firstElement);
    if (anchor instanceof PsiExpressionStatement && ((PsiExpressionStatement)anchor).getExpression() instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression expression=(PsiAssignmentExpression)((PsiExpressionStatement)anchor).getExpression();
      if (expression.getOperationTokenType() == JavaTokenType.EQ && expression.getLExpression() instanceof PsiReferenceExpression && ((PsiReference)expression.getLExpression()).isReferenceTo(myField)) {
        final PsiExpression initializer=expression.getRExpression();
        final PsiDeclarationStatement decl=elementFactory.createVariableDeclarationStatement(localName,myField.getType(),initializer);
        if (!mayBeFinal) {
          PsiUtil.setModifierProperty((PsiModifierListOwner)decl.getDeclaredElements()[0],PsiModifier.FINAL,false);
        }
        newDeclaration=anchor.replace(decl);
        refsSet.remove(expression.getLExpression());
        retargetReferences(elementFactory,localName,refsSet);
      }
 else {
        newDeclaration=addDeclarationWithFieldInitializerAndRetargetReferences(elementFactory,localName,anchorBlock,anchor,refsSet,myField);
      }
    }
 else {
      newDeclaration=addDeclarationWithFieldInitializerAndRetargetReferences(elementFactory,localName,anchorBlock,anchor,refsSet,myField);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  if (newDeclaration != null) {
    if (docComment != null) {
      final StringBuilder buf=new StringBuilder();
      for (      PsiElement psiElement : docComment.getDescriptionElements()) {
        buf.append(psiElement.getText());
      }
      if (buf.length() > 0) {
        final JavaCommenter commenter=new JavaCommenter();
        final PsiComment comment=JavaPsiFacade.getElementFactory(project).createCommentFromText(commenter.getBlockCommentPrefix() + buf.toString() + commenter.getBlockCommentSuffix(),newDeclaration);
        newDeclaration.getParent().addBefore(comment,newDeclaration);
      }
    }
    final PsiFile psiFile=myField.getContainingFile();
    final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (editor != null && IJSwingUtilities.hasFocus(editor.getComponent())) {
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
      if (file == psiFile) {
        editor.getCaretModel().moveToOffset(newDeclaration.getTextOffset());
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      }
    }
  }
  try {
    myField.normalizeDeclaration();
    myField.delete();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
