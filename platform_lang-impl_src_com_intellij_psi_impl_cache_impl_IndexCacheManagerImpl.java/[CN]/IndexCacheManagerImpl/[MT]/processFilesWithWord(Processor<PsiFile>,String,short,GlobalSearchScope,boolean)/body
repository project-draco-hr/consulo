{
  if (myProject.isDefault()) {
    return true;
  }
  final Set<VirtualFile> vFiles=new THashSet<VirtualFile>();
  final GlobalSearchScope projectScope=GlobalSearchScope.allScope(myProject).union(scope);
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        FileBasedIndex.getInstance().processValues(IdIndex.NAME,new IdIndexEntry(word,caseSensitively),null,new FileBasedIndex.ValueProcessor<Integer>(){
          public boolean process(          final VirtualFile file,          final Integer value){
            ProgressManager.checkCanceled();
            final int mask=value.intValue();
            if ((mask & occurrenceMask) != 0) {
              vFiles.add(file);
            }
            return true;
          }
        }
,projectScope);
      }
    }
);
  }
 catch (  IndexNotReadyException e) {
    throw new ProcessCanceledException();
  }
  if (vFiles.isEmpty())   return true;
  final FileIndexFacade index=FileIndexFacade.getInstance(myProject);
  final Processor<VirtualFile> virtualFileProcessor=new ReadActionProcessor<VirtualFile>(){
    @Override public boolean processInReadAction(    VirtualFile virtualFile){
      LOG.assertTrue(virtualFile.isValid());
      if (virtualFile.isValid() && scope.contains(virtualFile) && shouldBeFound(scope,virtualFile,index)) {
        final PsiFile psiFile=myPsiManager.findFile(virtualFile);
        return psiFile == null || psiFileProcessor.process(psiFile);
      }
      return true;
    }
  }
;
  for (  VirtualFile vFile : vFiles) {
    ProgressManager.checkCanceled();
    if (!virtualFileProcessor.process(vFile)) {
      return false;
    }
  }
  return true;
}
