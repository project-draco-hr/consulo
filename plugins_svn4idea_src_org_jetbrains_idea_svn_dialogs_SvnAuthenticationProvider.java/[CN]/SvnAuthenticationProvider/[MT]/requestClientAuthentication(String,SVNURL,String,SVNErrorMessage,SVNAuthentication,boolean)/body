{
  final SvnAuthenticationNotifier.AuthenticationRequest obj=new SvnAuthenticationNotifier.AuthenticationRequest(myProject,kind,url,realm);
  final boolean askInteractively=myAuthenticationNotifier.retrieveTicket(obj);
  if (!askInteractively) {
    myAuthenticationNotifier.ensureNotify(obj);
    return null;
  }
  final SVNAuthentication[] result=new SVNAuthentication[1];
  Runnable command=null;
  final String userName=previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : SystemProperties.getUserName();
  if (ISVNAuthenticationManager.PASSWORD.equals(kind)) {
    command=new Runnable(){
      public void run(){
        SimpleCredentialsDialog dialog=new SimpleCredentialsDialog(myProject);
        dialog.setup(realm,userName,authMayBeStored);
        if (previousAuth == null) {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required"));
        }
 else {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required.was.failed"));
        }
        dialog.show();
        if (dialog.isOK()) {
          result[0]=new SVNPasswordAuthentication(dialog.getUserName(),dialog.getPassword(),dialog.isSaveAllowed());
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.USERNAME.equals(kind)) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      return new SVNUserNameAuthentication(userName,false);
    }
    command=new Runnable(){
      public void run(){
        UserNameCredentialsDialog dialog=new UserNameCredentialsDialog(myProject);
        dialog.setup(realm,userName,authMayBeStored);
        if (previousAuth == null) {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required"));
        }
 else {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required.was.failed"));
        }
        dialog.show();
        if (dialog.isOK()) {
          result[0]=new SVNUserNameAuthentication(dialog.getUserName(),dialog.isSaveAllowed());
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.SSH.equals(kind)) {
    command=new Runnable(){
      public void run(){
        SSHCredentialsDialog dialog=new SSHCredentialsDialog(myProject);
        dialog.setup(realm,userName,authMayBeStored,url.getPort());
        if (previousAuth == null) {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required"));
        }
 else {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required.was.failed"));
        }
        dialog.show();
        if (dialog.isOK()) {
          int port=dialog.getPortNumber();
          if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) {
            String passphrase=dialog.getPassphrase();
            if (passphrase != null && passphrase.length() == 0) {
              passphrase=null;
            }
            result[0]=new SVNSSHAuthentication(dialog.getUserName(),new File(dialog.getKeyFile()),passphrase,port,dialog.isSaveAllowed());
          }
 else {
            result[0]=new SVNSSHAuthentication(dialog.getUserName(),dialog.getPassword(),port,dialog.isSaveAllowed());
          }
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.SSL.equals(kind)) {
    command=new Runnable(){
      public void run(){
        final SSLCredentialsDialog dialog=new SSLCredentialsDialog(myProject,realm,authMayBeStored);
        if (previousAuth == null) {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required"));
        }
 else {
          dialog.setTitle(SvnBundle.message("dialog.title.authentication.required.was.failed"));
        }
        dialog.show();
        if (dialog.isOK()) {
          result[0]=new SVNSSLAuthentication(new File(dialog.getCertificatePath()),String.valueOf(dialog.getCertificatePassword()),dialog.getSaveAuth());
        }
      }
    }
;
  }
  if (command != null) {
    try {
      GuiUtils.runOrInvokeAndWait(command);
    }
 catch (    InterruptedException e) {
    }
catch (    InvocationTargetException e) {
    }
    if (result[0] == null) {
      myAuthenticationNotifier.ensureNotify(obj);
    }
  }
  return result[0];
}
