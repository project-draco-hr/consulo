{
  if ("text".equals(property.getName()) && (AbstractButton.class.isAssignableFrom(componentClass) || JLabel.class.isAssignableFrom(componentClass))) {
    final StringDescriptor propertyValue=(StringDescriptor)lwComponent.getPropertyValue(property);
    if (propertyValue.getValue() != null) {
      final SupportCode.TextWithMnemonic textWithMnemonic=SupportCode.parseText(propertyValue.getValue());
      if (textWithMnemonic.myMnemonicIndex >= 0) {
        generator.loadLocal(componentLocal);
        generator.push(textWithMnemonic.myText);
        generator.invokeVirtual(Type.getType(componentClass),new Method(property.getWriteMethodName(),Type.VOID_TYPE,new Type[]{Type.getType(String.class)}));
        String setMnemonicMethodName;
        if (AbstractButton.class.isAssignableFrom(componentClass)) {
          setMnemonicMethodName="setMnemonic";
        }
 else {
          setMnemonicMethodName="setDisplayedMnemonic";
        }
        generator.loadLocal(componentLocal);
        generator.push(textWithMnemonic.getMnemonicChar());
        generator.invokeVirtual(Type.getType(componentClass),new Method(setMnemonicMethodName,Type.VOID_TYPE,new Type[]{Type.CHAR_TYPE}));
        generator.loadLocal(componentLocal);
        generator.push(textWithMnemonic.myMnemonicIndex);
        generator.invokeStatic(Type.getType(SupportCode.class),new Method("setDisplayedMnemonicIndex",Type.VOID_TYPE,new Type[]{Type.getType(JComponent.class),Type.INT_TYPE}));
        return true;
      }
    }
 else {
      Method method;
      if (AbstractButton.class.isAssignableFrom(componentClass)) {
        myNeedLoadButtonText=true;
        method=myLoadButtonTextMethod;
      }
 else {
        myNeedLoadLabelText=true;
        method=myLoadLabelTextMethod;
      }
      generator.loadThis();
      generator.loadLocal(componentLocal);
      generator.push(propertyValue.getBundleName());
      generator.invokeStatic(myResourceBundleType,myGetBundleMethod);
      generator.push(propertyValue.getKey());
      generator.invokeVirtual(myResourceBundleType,myGetStringMethod);
      generator.invokeVirtual(Type.getType("L" + myClassName + ";"),method);
      return true;
    }
  }
  return false;
}
