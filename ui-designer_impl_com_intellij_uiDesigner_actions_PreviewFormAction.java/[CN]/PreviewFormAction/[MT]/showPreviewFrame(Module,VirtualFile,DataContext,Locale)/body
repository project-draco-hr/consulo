{
  final String tempPath;
  try {
    final File tempDirectory=FileUtil.createTempDirectory("FormPreview","");
    tempPath=tempDirectory.getAbsolutePath();
    CopyResourcesUtil.copyFormsRuntime(tempPath,true);
  }
 catch (  IOException e) {
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.form",formFile.getPath().replace('/',File.separatorChar),e.toString()),CommonBundle.getErrorTitle());
    return;
  }
  final PathsList sources=ProjectRootsTraversing.collectRoots(module,ProjectRootsTraversing.PROJECT_SOURCES);
  final String classPath=ProjectRootsTraversing.collectRoots(module,ProjectRootsTraversing.FULL_CLASSPATH_RECURSIVE).getPathsString() + File.pathSeparator + sources.getPathsString()+ File.pathSeparator+ tempPath;
  final ClassLoader loader=Form2ByteCodeCompiler.createClassLoader(classPath);
  final Document doc=FileDocumentManager.getInstance().getDocument(formFile);
  final LwRootContainer rootContainer;
  try {
    rootContainer=Utils.getRootContainer(doc.getText(),new CompiledClassPropertiesProvider(loader));
  }
 catch (  Exception e) {
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.read.form",formFile.getPath().replace('/',File.separatorChar),e.getMessage()),CommonBundle.getErrorTitle());
    return;
  }
  if (rootContainer.getComponentCount() == 0) {
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.empty.form",formFile.getPath().replace('/',File.separatorChar)),CommonBundle.getErrorTitle());
    return;
  }
  setPreviewBindings(rootContainer,CLASS_TO_BIND_NAME);
  try {
    PreviewNestedFormLoader nestedFormLoader=new PreviewNestedFormLoader(module,tempPath,loader);
    final File tempFile=CopyResourcesUtil.copyClass(tempPath,CLASS_TO_BIND_NAME,true);
    CopyResourcesUtil.copyClass(tempPath,CLASS_TO_BIND_NAME + "$MyExitAction",true);
    CopyResourcesUtil.copyClass(tempPath,CLASS_TO_BIND_NAME + "$MyPackAction",true);
    CopyResourcesUtil.copyClass(tempPath,CLASS_TO_BIND_NAME + "$MySetLafAction",true);
    Locale locale=Locale.getDefault();
    if (locale.getCountry().length() > 0 && locale.getLanguage().length() > 0) {
      CopyResourcesUtil.copyProperties(tempPath,RUNTIME_BUNDLE_PREFIX + "_" + locale.getLanguage()+ "_"+ locale.getCountry()+ RUNTIME_BUNDLE_EXTENSION);
    }
    if (locale.getLanguage().length() > 0) {
      CopyResourcesUtil.copyProperties(tempPath,RUNTIME_BUNDLE_PREFIX + "_" + locale.getLanguage()+ RUNTIME_BUNDLE_EXTENSION);
    }
    CopyResourcesUtil.copyProperties(tempPath,RUNTIME_BUNDLE_PREFIX + "_" + locale.getLanguage()+ RUNTIME_BUNDLE_EXTENSION);
    CopyResourcesUtil.copyProperties(tempPath,RUNTIME_BUNDLE_PREFIX + RUNTIME_BUNDLE_EXTENSION);
    final AsmCodeGenerator codeGenerator=new AsmCodeGenerator(rootContainer,loader,nestedFormLoader,true,new PsiClassWriter(module));
    codeGenerator.patchFile(tempFile);
    final FormErrorInfo[] errors=codeGenerator.getErrors();
    if (errors.length != 0) {
      Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.form",formFile.getPath().replace('/',File.separatorChar),errors[0].getErrorMessage()),CommonBundle.getErrorTitle());
      return;
    }
  }
 catch (  Exception e) {
    LOG.debug(e);
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.form",formFile.getPath().replace('/',File.separatorChar),e.getMessage() != null ? e.getMessage() : e.toString()),CommonBundle.getErrorTitle());
    return;
  }
  final HashSet<String> bundleSet=new HashSet<String>();
  FormEditingUtil.iterateStringDescriptors(rootContainer,new FormEditingUtil.StringDescriptorVisitor<IComponent>(){
    public boolean visit(    final IComponent component,    final StringDescriptor descriptor){
      if (descriptor.getBundleName() != null) {
        bundleSet.add(descriptor.getDottedBundleName());
      }
      return true;
    }
  }
);
  if (bundleSet.size() > 0) {
    HashSet<VirtualFile> virtualFiles=new HashSet<VirtualFile>();
    HashSet<Module> modules=new HashSet<Module>();
    PropertiesReferenceManager manager=PropertiesReferenceManager.getInstance(module.getProject());
    for (    String bundleName : bundleSet) {
      for (      PropertiesFile propFile : manager.findPropertiesFiles(module,bundleName)) {
        virtualFiles.add(propFile.getVirtualFile());
        modules.add(VfsUtil.getModuleForFile(module.getProject(),propFile.getVirtualFile()));
      }
    }
    FileSetCompileScope scope=new FileSetCompileScope(virtualFiles.toArray(new VirtualFile[]{}),modules.toArray(new Module[]{}));
    CompilerManager.getInstance(module.getProject()).make(scope,new CompileStatusNotification(){
      public void finished(      boolean aborted,      int errors,      int warnings,      final CompileContext compileContext){
        if (!aborted && errors == 0) {
          runPreviewProcess(tempPath,sources,module,formFile,dataContext,stringDescriptorLocale);
        }
      }
    }
);
  }
 else {
    runPreviewProcess(tempPath,sources,module,formFile,dataContext,stringDescriptorLocale);
  }
}
