{
  final List<PackagingSourceItem> items=mySourceItemsTree.getSelectedItems();
  ParentElementsInfo parentsInfo=findParentAndGrandParent(myArtifactEditor.getArtifact());
  if (parentsInfo == null) {
    return;
  }
  final Artifact artifact=parentsInfo.getGrandparentArtifact();
  final PackagingEditorContext context=myArtifactEditor.getContext();
  context.ensureRootIsWritable(artifact);
  context.ensureRootIsWritable(parentsInfo.getParentArtifact());
  parentsInfo=findParentAndGrandParent(myArtifactEditor.getArtifact());
  if (parentsInfo == null) {
    return;
  }
  final CompositePackagingElement<?> grandParent=parentsInfo.getGrandparentElement();
  final List<String> classpath=new ArrayList<String>();
  for (  PackagingSourceItem item : items) {
    final List<? extends PackagingElement<?>> elements=item.createElements();
    grandParent.addOrFindChildren(elements);
    ArtifactUtil.processElements(elements,context,artifact.getArtifactType(),new Processor<PackagingElement<?>>(){
      public boolean process(      PackagingElement<?> element){
        if (element instanceof FileCopyPackagingElement) {
          classpath.add(((FileCopyPackagingElement)element).getFileName());
        }
 else         if (element instanceof ArchivePackagingElement) {
          classpath.add(((ArchivePackagingElement)element).getName());
        }
        return true;
      }
    }
);
  }
  final ArtifactEditor parentArtifactEditor=context.getOrCreateEditor(parentsInfo.getParentArtifact());
  parentArtifactEditor.addToClasspath(parentsInfo.getParentElement(),classpath);
  ((ArtifactEditorImpl)context.getOrCreateEditor(parentsInfo.getGrandparentArtifact())).rebuildTries();
}
