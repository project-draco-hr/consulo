{
  super(new BorderLayout(0,0));
  this.project=project;
  setFocusable(true);
  addKeyListener(this);
  setBorder(new EmptyBorder(0,0,0,0));
  setBackground(Color.WHITE);
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  final Font font=pathLabel.getFont();
  pathLabel.setFont(font.deriveFont((float)10));
  descriptions=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  descriptions.setBorder(BorderFactory.createEmptyBorder(1,4,1,4));
  descriptions.add(pathLabel);
  twManager=ToolWindowManager.getInstance(project);
  final DefaultListModel twModel=new DefaultListModel();
  for (  String id : twManager.getToolWindowIds()) {
    final ToolWindow tw=twManager.getToolWindow(id);
    if (tw.isAvailable()) {
      ids.put(tw,id);
    }
  }
  final ArrayList<ToolWindow> windows=new ArrayList<ToolWindow>(ids.keySet());
  twShortcuts=createShortcuts(windows);
  final Map<ToolWindow,String> map=ContainerUtil.reverseMap(twShortcuts);
  Collections.sort(windows,new Comparator<ToolWindow>(){
    @Override public int compare(    ToolWindow o1,    ToolWindow o2){
      return map.get(o1).compareTo(map.get(o2));
    }
  }
);
  for (  ToolWindow window : windows) {
    twModel.addElement(window);
  }
  toolWindows=new JBList(twModel);
  toolWindows.setBorder(IdeBorderFactory.createEmptyBorder(5,5,5,20));
  toolWindows.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  toolWindows.setCellRenderer(new ToolWindowsRenderer(ids,map){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final JComponent renderer=(JComponent)super.getListCellRendererComponent(list,value,index,selected,hasFocus);
      if (selected) {
        return renderer;
      }
      final Color bgColor=list == mouseMoveSrc && index == mouseMoveListIndex ? ON_MOUSE_OVER_BG_COLOR : Color.WHITE;
      UIUtil.changeBackGround(renderer,bgColor);
      return renderer;
    }
  }
);
  toolWindows.addKeyListener(this);
  toolWindows.addMouseListener(this);
  toolWindows.addMouseMotionListener(this);
  toolWindows.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!toolWindows.getSelectionModel().isSelectionEmpty()) {
        files.getSelectionModel().clearSelection();
      }
    }
  }
);
  separator=new JPanel(){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(SEPARATOR_COLOR);
      g.drawLine(0,0,0,getHeight());
    }
    @Override public Dimension getMaximumSize(){
      final Dimension max=super.getMaximumSize();
      return new Dimension(5,max.height);
    }
  }
;
  separator.setBackground(Color.WHITE);
  final FileEditorManager editorManager=FileEditorManager.getInstance(project);
  final FileEditor[] allEditors=editorManager.getAllEditors();
  files2editors=new HashMap<VirtualFile,FileEditor>();
  for (  FileEditor editor : allEditors) {
    files2editors.put(((FileEditorManagerImpl)editorManager).getFile(editor),editor);
  }
  final ArrayList<VirtualFile> openFiles=new ArrayList<VirtualFile>();
  final ArrayList<VirtualFile> editorFiles=new ArrayList<VirtualFile>();
  for (  EditorsSplitters splitters : ((FileEditorManagerImpl)editorManager).getAllSplitters()) {
    editorFiles.addAll(Arrays.asList(splitters.getOpenFiles()));
  }
  if (editorFiles.size() < 2) {
    final VirtualFile[] recentFiles=ArrayUtil.reverseArray(EditorHistoryManager.getInstance(project).getFiles());
    final int len=Math.min(toolWindows.getModel().getSize(),Math.max(editorFiles.size(),recentFiles.length));
    for (int i=0; i < len; i++) {
      openFiles.add(recentFiles[i]);
    }
  }
 else {
    try {
      ContainerUtil.sort(editorFiles,new RecentFilesComparator(project));
    }
 catch (    Exception e) {
    }
    for (int i=0; i < Math.min(MAX_FILES,editorFiles.size()); i++) {
      openFiles.add(editorFiles.get(i));
    }
  }
  final DefaultListModel filesModel=new DefaultListModel();
  for (  VirtualFile openFile : openFiles) {
    filesModel.addElement(openFile);
  }
  files=new JBList(filesModel);
  files.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  files.setBorder(IdeBorderFactory.createEmptyBorder(5,5,5,20));
  files.setCellRenderer(new VirtualFilesRenderer(project){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final JComponent renderer=(JComponent)super.getListCellRendererComponent(list,value,index,selected,hasFocus);
      if (selected) {
        return renderer;
      }
      final Color bgColor=list == mouseMoveSrc && index == mouseMoveListIndex ? ON_MOUSE_OVER_BG_COLOR : Color.WHITE;
      UIUtil.changeBackGround(renderer,bgColor);
      return renderer;
    }
  }
);
  files.addKeyListener(this);
  files.addMouseListener(this);
  files.addMouseMotionListener(this);
  files.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!files.getSelectionModel().isSelectionEmpty()) {
        toolWindows.getSelectionModel().clearSelection();
      }
    }
  }
);
  this.add(toolWindows,BorderLayout.WEST);
  if (filesModel.size() > 0) {
    files.setAlignmentY(1f);
    this.add(files,BorderLayout.EAST);
    this.add(separator,BorderLayout.CENTER);
  }
  this.add(descriptions,BorderLayout.SOUTH);
  files.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    private String getTitle2Text(    String fullText){
      int labelWidth=pathLabel.getWidth();
      if (fullText == null || fullText.length() == 0)       return " ";
      while (pathLabel.getFontMetrics(pathLabel.getFont()).stringWidth(fullText) > labelWidth) {
        int sep=fullText.indexOf(File.separatorChar,4);
        if (sep < 0)         return fullText;
        fullText="..." + fullText.substring(sep);
      }
      return fullText;
    }
    public void valueChanged(    final ListSelectionEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          updatePathLabel();
        }
      }
);
    }
    private void updatePathLabel(){
      final Object[] values=files.getSelectedValues();
      if (values != null && values.length == 1) {
        final VirtualFile parent=((VirtualFile)values[0]).getParent();
        if (parent != null) {
          pathLabel.setText(getTitle2Text(parent.getPresentableUrl()));
        }
 else {
          pathLabel.setText(" ");
        }
      }
 else {
        pathLabel.setText(" ");
      }
    }
  }
);
  final int modifiers=getModifiers(Switcher.this.getShortcutSet());
  final boolean isAlt=(modifiers & Event.ALT_MASK) != 0;
  ALT_KEY=isAlt ? VK_CONTROL : VK_ALT;
  CTRL_KEY=isAlt ? VK_ALT : VK_CONTROL;
  final IdeFrameImpl ideFrame=WindowManagerEx.getInstanceEx().getFrame(project);
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(this,this).setResizable(false).setModalContext(false).setFocusable(true).setRequestFocus(true).setTitle(SWITCHER_TITLE).setMovable(false).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      SWITCHER=null;
      return true;
    }
  }
).createPopup();
  Component comp=null;
  final EditorWindow result=FileEditorManagerEx.getInstanceEx(project).getActiveWindow().getResult();
  if (result != null) {
    comp=result.getOwner();
  }
  if (comp == null) {
    comp=ideFrame.getContentPane();
  }
  myPopup.showInCenterOf(comp);
}
