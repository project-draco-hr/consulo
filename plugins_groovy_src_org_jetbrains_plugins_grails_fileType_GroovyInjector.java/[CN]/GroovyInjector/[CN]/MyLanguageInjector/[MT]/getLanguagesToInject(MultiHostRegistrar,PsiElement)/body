{
  for (  PsiElement operand : operands) {
    if (!(operand instanceof PsiLanguageInjectionHost))     return;
  }
  final PsiExpressionList argList=PsiTreeUtil.getParentOfType(operands[0],PsiExpressionList.class);
  if (argList != null) {
    final PsiExpression firstArg=argList.getExpressions()[0];
    if (contains(firstArg,operands)) {
      final PsiElement parent=argList.getParent();
      if (parent instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression call=(PsiMethodCallExpression)parent;
        final String refName=call.getMethodExpression().getReferenceName();
        if (PARSE_NAME.equals(refName) || EVAL_NAME.equals(refName)) {
          final PsiMethod method=call.resolveMethod();
          if (method != null) {
            final PsiClass clazz=method.getContainingClass();
            if (clazz != null) {
              if (GROOVY_SHELL_QNAME.equals(clazz.getQualifiedName())) {
                final Language groovyLanguage=GroovyFileType.GROOVY_FILE_TYPE.getLanguage();
                registrar.startInjecting(groovyLanguage);
                for (                PsiElement operand : operands) {
                  registrar.addPlace("","",(PsiLanguageInjectionHost)operand,operand.getTextLength() > 1 ? new TextRange(1,operand.getTextLength() - 1) : new TextRange(1,1));
                }
                registrar.doneInjecting();
              }
            }
          }
        }
      }
    }
  }
}
