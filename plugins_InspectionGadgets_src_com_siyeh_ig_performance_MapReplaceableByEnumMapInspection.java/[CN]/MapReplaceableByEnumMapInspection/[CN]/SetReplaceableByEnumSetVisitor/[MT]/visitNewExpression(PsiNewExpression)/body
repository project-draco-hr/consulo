{
  super.visitNewExpression(expression);
  final PsiType type=expression.getType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)type;
  if (!classType.hasParameters()) {
    return;
  }
  final PsiType[] typeArguments=classType.getParameters();
  if (typeArguments.length != 2) {
    return;
  }
  final PsiType argumentType=typeArguments[0];
  if (!(argumentType instanceof PsiClassType)) {
    return;
  }
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,"java.util.Map")) {
    return;
  }
  if (null != TypeUtils.expressionHasTypeOrSubtype(expression,"java.util.EnumMap","java.util.concurrent.ConcurrentMap")) {
    return;
  }
  final PsiClassType argumentClassType=(PsiClassType)argumentType;
  final PsiClass argumentClass=argumentClassType.resolve();
  if (argumentClass == null || !argumentClass.isEnum()) {
    return;
  }
  registerNewExpressionError(expression);
}
