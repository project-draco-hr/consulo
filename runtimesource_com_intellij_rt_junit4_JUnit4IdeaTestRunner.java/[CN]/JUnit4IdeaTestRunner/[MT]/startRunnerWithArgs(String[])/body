{
  try {
    final JUnitCore runner=new JUnitCore();
    final Request request=JUnit4TestRunnerUtil.buildRequest(args);
    try {
      Description description=request.getRunner().getDescription();
      if (request instanceof ClassRequest) {
        description=getSuiteMethodDescription(request,description);
      }
 else       if (request instanceof FilterRequest) {
        description=getFilteredDescription(request,description);
      }
      sendTree(myRegistry,description);
    }
 catch (    Exception e) {
      System.err.println("Internal Error occured.");
      e.printStackTrace(System.err);
    }
    runner.addListener(myTestsListener);
    try {
      final Object data=Class.forName("com.intellij.rt.coverage.data.ProjectData").getMethod("getProjectData",new Class[0]).invoke(null,new Object[0]);
      if (data != null) {
        runner.addListener(new RunListener(){
          public void testStarted(          Description description){
            ((com.intellij.rt.coverage.data.ProjectData)data).testStarted(description.getClassName() + "." + description.getMethodName());
          }
          public void testFinished(          Description description){
            ((com.intellij.rt.coverage.data.ProjectData)data).testEnded(description.getClassName() + "." + description.getMethodName());
          }
        }
);
      }
    }
 catch (    Throwable e) {
    }
    long startTime=System.currentTimeMillis();
    Result result=runner.run(request.sortWith(new Comparator(){
      public int compare(      Object d1,      Object d2){
        return ((Description)d1).getDisplayName().compareTo(((Description)d2).getDisplayName());
      }
    }
));
    long endTime=System.currentTimeMillis();
    long runTime=endTime - startTime;
    new TimeSender().printHeader(runTime);
    if (!result.wasSuccessful()) {
      return -1;
    }
    return 0;
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    return -2;
  }
}
