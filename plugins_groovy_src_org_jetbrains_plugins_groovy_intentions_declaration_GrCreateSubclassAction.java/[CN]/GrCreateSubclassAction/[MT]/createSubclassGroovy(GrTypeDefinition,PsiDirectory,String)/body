{
  final Project project=psiClass.getProject();
  final Ref<GrTypeDefinition> targetClass=new Ref<GrTypeDefinition>();
  new WriteCommandAction(project,getTitle(psiClass),getTitle(psiClass)){
    @Override protected void run(    Result result) throws Throwable {
      IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
      final GrTypeParameterList oldTypeParameterList=psiClass.getTypeParameterList();
      try {
        targetClass.set(CreateClassActionBase.createClassByType(targetDirectory,className,PsiManager.getInstance(project),psiClass,GroovyTemplates.GROOVY_CLASS));
      }
 catch (      final IncorrectOperationException e) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showErrorDialog(project,CodeInsightBundle.message("intention.error.cannot.create.class.message",className) + "\n" + e.getLocalizedMessage(),CodeInsightBundle.message("intention.error.cannot.create.class.title"));
          }
        }
);
        return;
      }
      startTemplate(oldTypeParameterList,project,psiClass,targetClass.get(),false);
      JavaCodeStyleManager.getInstance(project).shortenClassReferences(targetClass.get());
    }
  }
.execute();
  if (targetClass.get() == null)   return null;
  if (!ApplicationManager.getApplication().isUnitTestMode() && !psiClass.hasTypeParameters()) {
    final Editor editor=CodeInsightUtil.positionCursor(project,targetClass.get().getContainingFile(),targetClass.get().getLBrace());
    if (editor == null)     return targetClass.get();
    chooseAndImplement(psiClass,project,targetClass.get(),editor);
  }
  return targetClass.get();
}
