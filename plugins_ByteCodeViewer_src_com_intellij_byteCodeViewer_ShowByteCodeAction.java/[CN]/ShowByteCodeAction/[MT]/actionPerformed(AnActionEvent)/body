{
  final DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  final PsiElement psiElement=getPsiElement(dataContext,project,editor);
  if (psiElement == null)   return;
  final String psiElementTitle=ByteCodeViewerManager.getInstance(project).getTitle(psiElement);
  final VirtualFile virtualFile=PsiUtilCore.getVirtualFile(psiElement);
  if (virtualFile == null)   return;
  if (TranslatingCompilerFilesMonitor.getInstance().isMarkedForCompilation(project,virtualFile)) {
    Messages.showWarningDialog(project,"Unable to show byte code for '" + psiElementTitle + "'. Class file does not exist or is out-of-date.","Class File Out-Of-Date");
    return;
  }
  final ByteCodeViewerManager codeViewerManager=ByteCodeViewerManager.getInstance(project);
  if (codeViewerManager.hasActiveDockedDocWindow()) {
    codeViewerManager.doUpdateComponent(psiElement);
  }
 else {
    final String byteCode=ByteCodeViewerManager.getByteCode(psiElement);
    if (byteCode == null)     return;
    final ByteCodeViewerComponent component=new ByteCodeViewerComponent(project,null);
    component.setText(byteCode,psiElement);
    Processor<JBPopup> pinCallback=new Processor<JBPopup>(){
      @Override public boolean process(      JBPopup popup){
        codeViewerManager.createToolWindow(psiElement,psiElement);
        popup.cancel();
        return false;
      }
    }
;
    final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,null).setRequestFocusCondition(project,NotLookupOrSearchCondition.INSTANCE).setProject(project).setDimensionServiceKey(project,DocumentationManager.JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setRequestFocus(LookupManager.getActiveLookup(editor) == null).setTitle(psiElementTitle + " Bytecode").setCouldPin(pinCallback).createPopup();
    Disposer.register(popup,component);
    PopupPositionManager.positionPopupInBestPosition(popup,editor,dataContext);
  }
}
