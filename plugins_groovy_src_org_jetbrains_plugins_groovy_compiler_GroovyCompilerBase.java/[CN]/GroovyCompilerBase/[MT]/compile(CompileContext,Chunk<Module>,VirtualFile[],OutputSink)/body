{
  Map<Module,List<VirtualFile>> mapModulesToVirtualFiles;
  if (moduleChunk.getNodes().size() == 1) {
    mapModulesToVirtualFiles=Collections.singletonMap(moduleChunk.getNodes().iterator().next(),Arrays.asList(virtualFiles));
  }
 else {
    mapModulesToVirtualFiles=CompilerUtil.buildModuleToFilesMap(compileContext,virtualFiles);
  }
  for (  final Module module : moduleChunk.getNodes()) {
    final List<VirtualFile> moduleFiles=mapModulesToVirtualFiles.get(module);
    if (moduleFiles == null) {
      continue;
    }
    final ModuleFileIndex index=ModuleRootManager.getInstance(module).getFileIndex();
    final List<VirtualFile> toCompile=new ArrayList<VirtualFile>();
    final List<VirtualFile> toCompileTests=new ArrayList<VirtualFile>();
    final CompilerConfiguration configuration=CompilerConfiguration.getInstance(myProject);
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    if (GroovyUtils.isAcceptableModuleType(ModuleType.get(module))) {
      for (      final VirtualFile file : moduleFiles) {
        if (shouldCompile(file,configuration,psiManager)) {
          (index.isInTestSourceContent(file) ? toCompileTests : toCompile).add(file);
        }
      }
    }
    if (!toCompile.isEmpty()) {
      compileFiles(compileContext,module,toCompile,sink,false);
    }
    if (!toCompileTests.isEmpty()) {
      compileFiles(compileContext,module,toCompileTests,sink,true);
    }
  }
}
