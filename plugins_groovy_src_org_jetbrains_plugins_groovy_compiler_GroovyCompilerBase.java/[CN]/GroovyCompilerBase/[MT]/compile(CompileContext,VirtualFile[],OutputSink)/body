{
  Map<Module,List<VirtualFile>> mapModulesToVirtualFiles=CompilerUtil.buildModuleToFilesMap(compileContext,virtualFiles);
  final List<Chunk<Module>> chunks=ModuleCompilerUtil.getSortedModuleChunks(myProject,new ArrayList<Module>(mapModulesToVirtualFiles.keySet()));
  for (  final Chunk<Module> chunk : chunks) {
    for (    final Module module : chunk.getNodes()) {
      final List<VirtualFile> moduleFiles=mapModulesToVirtualFiles.get(module);
      if (moduleFiles == null) {
        continue;
      }
      final ModuleFileIndex index=ModuleRootManager.getInstance(module).getFileIndex();
      final GroovyFacet facet=GroovyFacet.getInstance(module);
      final List<VirtualFile> toCompile=new ArrayList<VirtualFile>();
      final List<VirtualFile> toCompileTests=new ArrayList<VirtualFile>();
      final CompilerConfiguration configuration=CompilerConfiguration.getInstance(myProject);
      if (module.getModuleType() instanceof JavaModuleType) {
        for (        final VirtualFile file : moduleFiles) {
          final boolean shouldCompile=!configuration.isResourceFile(file) && (file.getFileType() == GroovyFileType.GROOVY_FILE_TYPE || file.getFileType() == StdFileTypes.JAVA);
          if (shouldCompile) {
            (index.isInTestSourceContent(file) ? toCompileTests : toCompile).add(file);
          }
        }
      }
      if (!toCompile.isEmpty()) {
        compileFiles(compileContext,module,toCompile,compileContext.getModuleOutputDirectory(module),sink);
      }
      if (!toCompileTests.isEmpty()) {
        compileFiles(compileContext,module,toCompileTests,compileContext.getModuleOutputDirectoryForTests(module),sink);
      }
    }
  }
}
