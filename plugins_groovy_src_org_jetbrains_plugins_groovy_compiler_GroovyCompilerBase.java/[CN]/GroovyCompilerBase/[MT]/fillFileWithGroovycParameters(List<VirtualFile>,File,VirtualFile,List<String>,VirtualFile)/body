{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Running groovyc on: " + virtualFiles.toString());
  }
  FileOutputStream stream;
  try {
    stream=new FileOutputStream(f);
  }
 catch (  FileNotFoundException e) {
    LOG.error(e);
    return;
  }
  final PrintStream printer=new PrintStream(stream);
  for (  final VirtualFile item : virtualFiles) {
    printer.println(GroovycRunner.SRC_FILE);
    printer.println(item.getPath());
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        final PsiFile file=PsiManager.getInstance(myProject).findFile(item);
        if (file instanceof GroovyFileBase) {
          for (          PsiClass psiClass : ((GroovyFileBase)file).getClasses()) {
            printer.println(psiClass.getQualifiedName());
          }
        }
      }
    }
);
    printer.println(GroovycRunner.END);
  }
  if (!patchers.isEmpty()) {
    printer.println(GroovycRunner.PATCHERS);
    for (    final String patcher : patchers) {
      printer.println(patcher);
    }
    printer.println(GroovycRunner.END);
  }
  final Charset ideCharset=EncodingProjectManager.getInstance(myProject).getDefaultCharset();
  if (!Comparing.equal(CharsetToolkit.getDefaultSystemCharset(),ideCharset)) {
    printer.println(GroovycRunner.ENCODING);
    printer.println(ideCharset.name());
  }
  printer.println(GroovycRunner.OUTPUTPATH);
  printer.println(PathUtil.getLocalPath(outputDir));
  printer.println(GroovycRunner.FINAL_OUTPUTPATH);
  printer.println(PathUtil.getLocalPath(finalOutputDir));
  printer.close();
}
