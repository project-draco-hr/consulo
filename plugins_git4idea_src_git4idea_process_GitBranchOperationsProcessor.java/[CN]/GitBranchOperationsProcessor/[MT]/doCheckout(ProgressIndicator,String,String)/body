{
  final GitWouldBeOverwrittenByCheckoutDetector checkoutListener=new GitWouldBeOverwrittenByCheckoutDetector();
  GitSimpleEventDetector unmergedDetector=new GitSimpleEventDetector(GitSimpleEventDetector.Event.UNMERGED);
  GitCommandResult result=Git.checkout(myRepository,reference,newTrackingBranch,checkoutListener,unmergedDetector);
  if (result.success()) {
    refreshRoot();
    updateRepository();
    notifySuccess(String.format("Checked out <b><code>%s</code></b>",reference));
  }
 else   if (unmergedDetector.hasHappened()) {
    GitConflictResolver gitConflictResolver=prepareConflictResolverForUnmergedFilesBeforeCheckout();
    if (gitConflictResolver.merge()) {
      doCheckout(indicator,reference,newTrackingBranch);
    }
  }
 else   if (checkoutListener.isWouldBeOverwrittenError()) {
    List<Change> affectedChanges=getChangesAffectedByCheckout(checkoutListener.getAffectedFiles());
    if (GitWouldBeOverwrittenByCheckoutDialog.showAndGetAnswer(myProject,affectedChanges)) {
      smartCheckout(reference,newTrackingBranch,indicator);
    }
  }
 else {
    showErrorMessage("Couldn't checkout " + reference,result.getErrorOutput());
  }
}
