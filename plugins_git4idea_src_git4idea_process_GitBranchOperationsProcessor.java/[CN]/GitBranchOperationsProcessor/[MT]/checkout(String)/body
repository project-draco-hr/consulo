{
  new CommonBackgroundTask(myProject,"Checking out " + reference){
    @Override public void execute(    @NotNull ProgressIndicator indicator){
      final GitWouldBeOverwrittenByCheckoutDetector checkoutListener=new GitWouldBeOverwrittenByCheckoutDetector();
      GitCommandResult result=Git.checkout(myRepository,reference,checkoutListener);
      if (result.success()) {
        refreshRoot();
        updateRepository();
        notifySuccess(String.format("Checked out <b><code>%s</code></b>",reference));
      }
 else       if (checkoutListener.isWouldBeOverwrittenError()) {
        List<Change> affectedChanges=getChangesAffectedByCheckout(checkoutListener.getAffectedFiles());
        if (GitWouldBeOverwrittenByCheckoutDialog.showAndGetAnswer(myProject,affectedChanges)) {
          smartCheckout(reference,indicator);
        }
      }
 else {
        showErrorMessage("Couldn't checkout " + reference,result.getErrorOutput());
      }
    }
  }
.runInBackground();
}
