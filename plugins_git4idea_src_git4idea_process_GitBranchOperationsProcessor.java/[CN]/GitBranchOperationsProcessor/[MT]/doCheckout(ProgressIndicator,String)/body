{
  final GitWouldBeOverwrittenByCheckoutDetector checkoutListener=new GitWouldBeOverwrittenByCheckoutDetector();
  GitUnmergedFilesDetector unmergedDetector=new GitUnmergedFilesDetector();
  GitCommandResult result=Git.checkout(myRepository,reference,checkoutListener,unmergedDetector);
  if (result.success()) {
    refreshRoot();
    updateRepository();
    notifySuccess(String.format("Checked out <b><code>%s</code></b>",reference));
  }
 else   if (unmergedDetector.isUnmergedFilesDetected()) {
    GitConflictResolver gitConflictResolver=prepareConflictResolverForUnmergedFilesBeforeCheckout();
    if (gitConflictResolver.merge()) {
      doCheckout(indicator,reference);
    }
  }
 else   if (checkoutListener.isWouldBeOverwrittenError()) {
    List<Change> affectedChanges=getChangesAffectedByCheckout(checkoutListener.getAffectedFiles());
    if (GitWouldBeOverwrittenByCheckoutDialog.showAndGetAnswer(myProject,affectedChanges)) {
      smartCheckout(reference,indicator);
    }
  }
 else {
    showErrorMessage("Couldn't checkout " + reference,result.getErrorOutput());
  }
}
