{
  final List<ZipFileSet> zipFileSetTags=new SmartList<ZipFileSet>();
  final String tempDirProperty=BuildProperties.getTempDirForModuleProperty(parameters.getContainingModule().getName());
  final File moduleBaseDir=parameters.getChunk().getBaseDir();
  instruction.accept(new BuildInstructionVisitor(){
    public boolean visitFileCopyInstruction(    FileCopyInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final File sourceFile=instruction.getFile();
      final Module instructionModule=instruction.getModule();
      final String sourceLocation=GenerationUtils.toRelativePath(sourceFile.getPath(),moduleBaseDir,instructionModule,parameters.getGenerationOptions());
      final ZipFileSet fileSet=new ZipFileSet(sourceLocation,instruction.getOutputRelativePath(),instruction.isDirectory());
      zipFileSetTags.add(fileSet);
      return true;
    }
    public boolean visitJarAndCopyBuildInstruction(    JarAndCopyBuildInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      tempDirUsed.set(true);
      final String jarName=new File(instruction.getOutputRelativePath()).getName();
      final String destJarPath=BuildProperties.propertyRef(tempDirProperty) + "/" + jarName;
      zipFileSetTags.add(new ZipFileSet(destJarPath,instruction.getOutputRelativePath(),false));
      return true;
    }
    public boolean visitCompoundBuildInstruction(    CompoundBuildInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final BuildRecipe childModuleRecipe=instruction.getChildInstructions(DummyCompileContext.getInstance());
      childModuleRecipe.visitInstructions(new BuildInstructionVisitor(){
        public boolean visitFileCopyInstruction(        FileCopyInstruction instruction) throws RuntimeException {
          if (!instruction.isExternalDependencyInstruction())           return true;
          final File file=instruction.getFile();
          final Module instructionModule=instruction.getModule();
          String sourceLocation=GenerationUtils.toRelativePath(file.getPath(),moduleBaseDir,instructionModule,parameters.getGenerationOptions());
          final String relPath=PathUtil.getCanonicalPath("/tmp/" + instruction.getOutputRelativePath()).substring(1);
          final ZipFileSet zipFileSet=new ZipFileSet(sourceLocation,relPath,false);
          zipFileSetTags.add(zipFileSet);
          return true;
        }
        public boolean visitJarAndCopyBuildInstruction(        JarAndCopyBuildInstruction instruction) throws RuntimeException {
          if (!instruction.isExternalDependencyInstruction())           return true;
          final String relPath=PathUtil.getCanonicalPath("/tmp/" + instruction.getOutputRelativePath()).substring(1);
          tempDirUsed.set(true);
          final ZipFileSet zipFileSet=new ZipFileSet(BuildProperties.propertyRef(tempDirProperty) + "/" + relPath,relPath,false);
          zipFileSetTags.add(zipFileSet);
          return true;
        }
      }
,false);
      if (instruction.getBuildProperties().isJarEnabled()) {
        final ZipFileSet zipFileSet=new ZipFileSet(BuildProperties.propertyRef(parameters.getCompoundBuildInstructionNaming().getJarPathProperty(instruction)),instruction.getOutputRelativePath(),false);
        zipFileSetTags.add(zipFileSet);
      }
 else {
        final String jarName=new File(instruction.getOutputRelativePath()).getName();
        final String destJarPath=BuildProperties.propertyRef(tempDirProperty) + "/" + jarName;
        tempDirUsed.set(true);
        zipFileSetTags.add(new ZipFileSet(destJarPath,instruction.getOutputRelativePath(),false));
      }
      return true;
    }
  }
);
  return zipFileSetTags.toArray(new ZipFileSet[zipFileSetTags.size()]);
}
