{
  final Project project=myTarget.getProject();
  final PsiElement parent=myTarget.getParent().getParent();
  final LocalInspectionsPass pass=new LocalInspectionsPass(myFile,myFile.getViewProvider().getDocument(),parent.getTextRange().getStartOffset(),parent.getTextRange().getEndOffset(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,false,HighlightInfoProcessor.getEmpty());
  final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile();
  for (  PsiLiteralExpression target : targets) {
    final Object value=target.getValue();
    if (!(value instanceof String)) {
      continue;
    }
    InspectionToolWrapper toolWrapperById=((InspectionProfileImpl)inspectionProfile).getToolById((String)value,target);
    if (!(toolWrapperById instanceof LocalInspectionToolWrapper)) {
      continue;
    }
    final LocalInspectionToolWrapper toolWrapper=((LocalInspectionToolWrapper)toolWrapperById).createCopy();
    final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(project);
    final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
    toolWrapper.initialize(context);
    ((RefManagerImpl)context.getRefManager()).inspectionReadActionStarted();
    ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
    Runnable inspect=new Runnable(){
      @Override public void run(){
        pass.doInspectInBatch(context,managerEx,Collections.<LocalInspectionToolWrapper>singletonList(toolWrapper));
      }
    }
;
    if (indicator == null) {
      ProgressManager.getInstance().executeProcessUnderProgress(inspect,new ProgressIndicatorBase());
    }
 else {
      inspect.run();
    }
    for (    HighlightInfo info : pass.getInfos()) {
      final PsiElement element=CollectHighlightsUtil.findCommonParent(myFile,info.startOffset,info.endOffset);
      if (element != null) {
        addOccurrence(element);
      }
    }
  }
}
