{
  JPanel panel=new JPanel();
  panel.setBorder(IdeBorderFactory.createRoundedBorder());
  panel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.insets=new Insets(4,8,4,8);
  gbConstraints.weighty=1;
  gbConstraints.weightx=1;
  gbConstraints.gridy=0;
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.anchor=GridBagConstraints.WEST;
  final JLabel classListLabel=new JLabel();
  panel.add(classListLabel,gbConstraints);
  mySuperClassesList=new JBList(mySuperClasses.toArray());
  mySuperClassesList.setCellRenderer(new ClassCellRenderer());
  mySuperClassesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  classListLabel.setText(RefactoringBundle.message("turnRefsToSuper.change.usages.to",mySubClass.getQualifiedName()));
  PsiClass nearestBase=RefactoringHierarchyUtil.getNearestBaseClass(mySubClass,true);
  int indexToSelect=0;
  if (nearestBase != null) {
    indexToSelect=mySuperClasses.indexOf(nearestBase);
  }
  mySuperClassesList.setSelectedIndex(indexToSelect);
  gbConstraints.gridy++;
  panel.add(ScrollPaneFactory.createScrollPane(mySuperClassesList),gbConstraints);
  gbConstraints.gridy++;
  myCbReplaceInstanceOf.setText(RefactoringBundle.message("turnRefsToSuper.use.superclass.in.instanceof"));
  myCbReplaceInstanceOf.setSelected(false);
  myCbReplaceInstanceOf.setFocusable(false);
  panel.add(myCbReplaceInstanceOf,gbConstraints);
  return panel;
}
