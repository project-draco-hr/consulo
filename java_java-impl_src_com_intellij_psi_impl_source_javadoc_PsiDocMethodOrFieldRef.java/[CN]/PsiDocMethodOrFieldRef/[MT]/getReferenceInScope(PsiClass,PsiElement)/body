{
  final String name=element.getText();
  final String[] signature=getSignature();
  if (signature == null) {
    final PsiVariable[] vars=getAllVariables(scope,this);
    for (    PsiVariable var : vars) {
      if (!var.getName().equals(name))       continue;
      return new MyReference(var);
    }
  }
  final MethodSignature methodSignature;
  if (signature != null) {
    final List<PsiType> types=Lists.newArrayListWithCapacity(signature.length);
    final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(element.getProject()).getElementFactory();
    for (    String s : signature) {
      try {
        types.add(elementFactory.createTypeFromText(s,element));
      }
 catch (      IncorrectOperationException e) {
        types.add(PsiType.NULL);
      }
    }
    methodSignature=MethodSignatureUtil.createMethodSignature(name,types.toArray(new PsiType[types.size()]),PsiTypeParameter.EMPTY_ARRAY,PsiSubstitutor.EMPTY,name.equals(scope.getName()));
  }
 else {
    methodSignature=null;
  }
  final PsiMethod[] methods=getAllMethods(scope,this);
  for (  PsiMethod method : methods) {
    if (!method.getName().equals(name) || (methodSignature != null && !MethodSignatureUtil.areSignaturesErasureEqual(methodSignature,method.getSignature(PsiSubstitutor.EMPTY))))     continue;
    return new MyReference(method){
      @NotNull public PsiElement[] getVariants(){
        final List<PsiMethod> lst=new ArrayList<PsiMethod>();
        for (        PsiMethod method : methods) {
          if (name.equals(method.getName())) {
            lst.add(method);
          }
        }
        return lst.toArray(new PsiMethod[lst.size()]);
      }
    }
;
  }
  return null;
}
