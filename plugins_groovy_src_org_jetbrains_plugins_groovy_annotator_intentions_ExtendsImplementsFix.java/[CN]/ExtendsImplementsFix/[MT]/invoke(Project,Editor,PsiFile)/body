{
  final PsiReference ref=file.findReferenceAt(editor.getCaretModel().getOffset());
  PsiElement element=ref.getElement();
  while (element.getParent() instanceof GrCodeReferenceElement)   element=element.getParent();
  final GrReferenceList oldRefList=((GrReferenceList)element.getParent());
  final GrTypeDefinition classParent=((GrTypeDefinition)oldRefList.getParent());
  GrReferenceList refList=moveToExtendsList ? classParent.getExtendsClause() : classParent.getImplementsClause();
  if (refList == null) {
    final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
    if (moveToExtendsList) {
      refList=factory.createExtendsClause();
      refList=(GrReferenceList)classParent.addAfter(refList,classParent.getNameIdentifierGroovy());
    }
 else {
      refList=factory.createImplementsClause();
      refList=(GrReferenceList)classParent.addAfter(refList,classParent.getExtendsClause());
    }
  }
  refList.add(element.copy());
  if (oldRefList.getReferenceElements().length == 1) {
    oldRefList.delete();
  }
 else {
    final PsiElement prev=PsiUtil.skipWhitespaces(element.getPrevSibling(),false);
    if (prev != null && prev.getNode().getElementType().equals(GroovyTokenTypes.mCOMMA)) {
      prev.delete();
    }
 else {
      final PsiElement next=PsiUtil.skipWhitespaces(element.getNextSibling(),false);
      if (next != null && next.getNode().getElementType().equals(GroovyTokenTypes.mCOMMA)) {
        next.delete();
      }
    }
    element.delete();
  }
}
