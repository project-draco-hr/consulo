{
  super(method.getManager(),method,null);
  myMethod=method;
  final PsiManager manager=method.getManager();
  LinkedHashSet<String> modifiers=new LinkedHashSet<String>();
  modifiers.add(PsiModifier.PUBLIC);
  if (isStatic)   modifiers.add(PsiModifier.STATIC);
  myModifierList=new LightModifierList(manager,modifiers);
  final PsiParameter[] originalParameters=method.getParameterList().getParameters();
  final String[] parmNames=new String[originalParameters.length - 1];
  for (int i=1; i < originalParameters.length; i++) {
    PsiParameter originalParameter=originalParameters[i];
    String baseName;
    final PsiType type=originalParameter.getType();
    String[] nameSuggestions=getManager().getCodeStyleManager().suggestVariableName(VariableKind.PARAMETER,null,null,type).names;
    if (nameSuggestions.length > 0) {
      baseName=nameSuggestions[0];
    }
 else {
      baseName="p";
    }
    int postfix=1;
    String name=baseName;
    NextName:     do {
      for (int j=1; j < i; j++) {
        if (name.equals(parmNames[j - 1])) {
          name=baseName + postfix;
          postfix++;
          continue NextName;
        }
      }
      break;
    }
 while (true);
    parmNames[i - 1]=name;
  }
  myParameterList=new LightParameterList(manager,new Computable<LightParameter[]>(){
    public LightParameter[] compute(){
      LightParameter[] result=new LightParameter[parmNames.length];
      for (int i=0; i < result.length; i++) {
        result[i]=new LightParameter(manager,parmNames[i],null,originalParameters[i + 1].getType(),GrGdkMethodImpl.this);
      }
      return result;
    }
  }
);
}
