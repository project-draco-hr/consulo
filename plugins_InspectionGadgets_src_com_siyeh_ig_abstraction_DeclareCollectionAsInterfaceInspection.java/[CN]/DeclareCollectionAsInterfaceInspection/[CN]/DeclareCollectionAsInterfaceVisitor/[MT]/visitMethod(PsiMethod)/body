{
  super.visitMethod(method);
  if (ignorePrivateMethodsAndFields && method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  final PsiType type=method.getReturnType();
  if (type == null || !CollectionUtils.isCollectionClass(type)) {
    return;
  }
  if (LibraryUtil.isOverrideOfLibraryMethod(method)) {
    return;
  }
  final PsiTypeElement typeElement=method.getReturnTypeElement();
  if (typeElement == null) {
    return;
  }
  final PsiJavaCodeReferenceElement referenceElement=typeElement.getInnermostComponentReferenceElement();
  if (referenceElement == null) {
    return;
  }
  final PsiElement nameElement=referenceElement.getReferenceNameElement();
  if (nameElement == null) {
    return;
  }
  final Collection<PsiClass> weaklings=WeakestTypeFinder.calculateWeakestClassesNecessary(method,false,true);
  if (weaklings.isEmpty()) {
    return;
  }
  final List<PsiClass> weaklingList=new ArrayList(weaklings);
  final PsiManager manager=method.getManager();
  final GlobalSearchScope scope=method.getResolveScope();
  final PsiClassType javaLangObject=PsiType.getJavaLangObject(manager,scope);
  final PsiClass objectClass=javaLangObject.resolve();
  weaklingList.remove(objectClass);
  if (weaklingList.isEmpty()) {
    final String typeText=type.getCanonicalText();
    final String interfaceText=CollectionUtils.getInterfaceForClass(typeText);
    registerError(nameElement,interfaceText);
  }
 else {
    final PsiClass weakling=weaklingList.get(0);
    registerError(nameElement,weakling.getQualifiedName());
  }
}
