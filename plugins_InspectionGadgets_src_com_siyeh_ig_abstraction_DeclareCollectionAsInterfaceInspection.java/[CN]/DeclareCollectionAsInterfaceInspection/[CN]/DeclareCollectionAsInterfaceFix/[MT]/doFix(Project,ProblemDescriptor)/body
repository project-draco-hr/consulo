{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiJavaCodeReferenceElement)) {
    return;
  }
  final StringBuilder newElementText=new StringBuilder(typeString);
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)parent;
  final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
  if (parameterList != null) {
    final PsiTypeElement[] typeParameterElements=parameterList.getTypeParameterElements();
    if (typeParameterElements.length > 0) {
      final PsiTypeElement typeParameterElement1=typeParameterElements[0];
      newElementText.append(typeParameterElement1.getText());
      for (int i=1; i < typeParameterElements.length; i++) {
        newElementText.append(',');
        final PsiTypeElement typeParameterElement=typeParameterElements[i];
        newElementText.append(typeParameterElement.getText());
      }
    }
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiTypeElement)) {
    return;
  }
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory factory=facade.getElementFactory();
  final PsiType type=factory.createTypeFromText(newElementText.toString(),element);
  final PsiTypeElement newTypeElement=factory.createTypeElement(type);
  final PsiElement insertedElement=grandParent.replace(newTypeElement);
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
  styleManager.shortenClassReferences(insertedElement);
}
