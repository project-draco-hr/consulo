{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiJavaCodeReferenceElement)) {
    return;
  }
  final StringBuilder newElementText=new StringBuilder(typeString);
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)parent;
  final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
  if (parameterList != null) {
    final PsiTypeElement[] typeParameterElements=parameterList.getTypeParameterElements();
    if (typeParameterElements.length > 0) {
      newElementText.append('<');
      newElementText.append(StringUtil.join(Arrays.asList(typeParameterElements),new Function<PsiTypeElement,String>(){
        public String fun(        final PsiTypeElement psiTypeElement){
          return psiTypeElement.getText();
        }
      }
,","));
      newElementText.append('>');
    }
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiTypeElement)) {
    return;
  }
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory factory=facade.getElementFactory();
  final PsiType type=factory.createTypeFromText(newElementText.toString(),element);
  final PsiTypeElement newTypeElement=factory.createTypeElement(type);
  grandParent.replace(newTypeElement);
}
