{
  new Task.Backgroundable(project,"Collecting Changes...",true){
    private Collection<Change> changes;
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        changes=getDiffChanges(project,file,compare);
      }
 catch (      VcsException e) {
        VcsNotifier.getInstance(project).notifyImportantWarning("Couldn't compare with branch",String.format("Couldn't compare " + DvcsUtil.fileOrFolder(file) + " [%s] with branch [%s];\n %s",file,compare,e.getMessage()));
      }
    }
    @RequiredDispatchThread @Override public void onSuccess(){
      if (changes != null) {
        VcsDiffUtil.showDiffFor(project,changes,VcsDiffUtil.getRevisionTitle(compare,false),VcsDiffUtil.getRevisionTitle(head,true),VcsUtil.getFilePath(file));
      }
    }
  }
.queue();
}
