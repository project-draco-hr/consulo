{
  if (!myRoots.isEmpty()) {
    initTravellingMap();
    final ISVNStatusFileProvider fileProvider=new ISVNStatusFileProvider(){
      public Map getChildrenFiles(      File parent){
        final Map<String,File> children=myTreeTravellingMap.get(FileUtil.nameToCompare(parent.getAbsolutePath()));
        return children == null ? Collections.emptyMap() : children;
      }
    }
;
    final SvnVcs17 vcs=SvnVcs17.getInstance(myProject);
    final SVNStatusClient client=vcs.createStatusClient();
    client.setFilesProvider(fileProvider);
    for (    VirtualFile parent : myRoots.keySet()) {
      try {
        client.doStatus(new File(parent.getPath()),SVNRevision.WORKING,SVNDepth.INFINITY,false,true,true,false,new ISVNStatusHandler(){
          public void handleStatus(          final SVNStatus status) throws SVNException {
            final boolean switched=status.isSwitched();
            final boolean externals=SvnVcs17.svnStatusIs(status,SVNStatusType.STATUS_EXTERNAL);
            if (switched || externals) {
              final RootUrlInfo urlInfo=mySourceItems.get(FileUtil.nameToCompare(status.getFile().getAbsolutePath()));
              if (urlInfo != null) {
                if (switched) {
                  urlInfo.setType(NestedCopyType.switched);
                }
 else {
                  urlInfo.setType(NestedCopyType.external);
                }
              }
            }
          }
        }
,null);
      }
 catch (      SVNException e) {
        LOG.debug(e);
      }
    }
  }
}
