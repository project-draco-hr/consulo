{
  PsiManager manager=PsiManager.getInstance(myProject);
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  String name=getMethodName();
  if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(name)) {
    return RefactoringMessageUtil.getIncorrectIdentifierMessage(name);
  }
  if (!myMethod.isConstructor()) {
    try {
      myReturnTypeCodeFragment.getType();
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      myReturnTypeField.requestFocus();
      return RefactoringBundle.message("changeSignature.wrong.return.type",myReturnTypeCodeFragment.getText());
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      myReturnTypeField.requestFocus();
      return RefactoringBundle.message("changeSignature.no.return.type");
    }
  }
  final List<PsiTypeCodeFragment> codeFraments=myParametersTableModel.getCodeFraments();
  final List<JavaCodeFragment> defaultValueFraments=myParametersTableModel.getDefaultValueFraments();
  ParameterInfoImpl[] parameterInfos=myParametersTableModel.getParameters();
  final int newParametersNumber=parameterInfos.length;
  LOG.assertTrue(codeFraments.size() == newParametersNumber);
  for (int i=0; i < newParametersNumber; i++) {
    ParameterInfoImpl info=parameterInfos[i];
    PsiTypeCodeFragment psiCodeFragment=codeFraments.get(i);
    PsiCodeFragment defaultValueFragment=defaultValueFraments.get(i);
    if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(info.getName())) {
      return RefactoringMessageUtil.getIncorrectIdentifierMessage(info.getName());
    }
    final PsiType type;
    try {
      type=psiCodeFragment.getType();
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      return RefactoringBundle.message("changeSignature.wrong.type.for.parameter",psiCodeFragment.getText(),info.getName());
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      return RefactoringBundle.message("changeSignature.no.type.for.parameter",info.getName());
    }
    info.setType(type);
    if (type instanceof PsiEllipsisType && i != newParametersNumber - 1) {
      return RefactoringBundle.message("changeSignature.vararg.not.last");
    }
    if (info.oldParameterIndex < 0) {
      info.defaultValue=defaultValueFragment.getText();
      String def=info.defaultValue;
      def=def.trim();
      if (!(type instanceof PsiEllipsisType)) {
        if (def.length() == 0) {
          return RefactoringBundle.message("changeSignature.no.default.value",info.getName());
        }
        try {
          factory.createExpressionFromText(info.defaultValue,null);
        }
 catch (        IncorrectOperationException e) {
          return e.getMessage();
        }
      }
    }
  }
  ThrownExceptionInfo[] exceptionInfos=myExceptionsTableModel.getThrownExceptions();
  PsiTypeCodeFragment[] typeCodeFragments=myExceptionsTableModel.getTypeCodeFragments();
  for (int i=0; i < exceptionInfos.length; i++) {
    ThrownExceptionInfo exceptionInfo=exceptionInfos[i];
    PsiTypeCodeFragment typeCodeFragment=typeCodeFragments[i];
    try {
      PsiType type=typeCodeFragment.getType();
      if (!(type instanceof PsiClassType)) {
        return RefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText());
      }
      PsiClassType throwable=JavaPsiFacade.getInstance(myMethod.getProject()).getElementFactory().createTypeByFQClassName("java.lang.Throwable",type.getResolveScope());
      if (!throwable.isAssignableFrom(type)) {
        return RefactoringBundle.message("changeSignature.not.throwable.type",typeCodeFragment.getText());
      }
      exceptionInfo.setType((PsiClassType)type);
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      return RefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText());
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      return RefactoringBundle.message("changeSignature.no.type.for.exception");
    }
  }
  return null;
}
