{
  @NonNls StringBuilder buffer=new StringBuilder();
  PsiModifierList modifierList=myMethod.getModifierList();
  String modifiers=modifierList.getText();
  String oldModifier=VisibilityUtil.getVisibilityModifier(modifierList);
  String newModifier=getVisibility();
  String newModifierStr=VisibilityUtil.getVisibilityString(newModifier);
  if (!newModifier.equals(oldModifier)) {
    int index=modifiers.indexOf(oldModifier);
    if (index >= 0) {
      StringBuilder buf=new StringBuilder(modifiers);
      buf.replace(index,index + oldModifier.length() + ("".equals(newModifierStr) ? 1 : 0),newModifierStr);
      modifiers=buf.toString();
    }
 else {
      if (!"".equals(newModifierStr))       newModifierStr+=" ";
      modifiers=newModifierStr + modifiers;
    }
  }
  buffer.append(modifiers);
  if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers,'\n') && !StringUtil.endsWithChar(modifiers,'\r') && !StringUtil.endsWithChar(modifiers,' ')) {
    buffer.append(" ");
  }
  if (!myMethod.isConstructor()) {
    final CanonicalTypes.Type returnType=getReturnType();
    if (returnType != null) {
      buffer.append(returnType.getTypeText());
    }
    buffer.append(" ");
  }
  buffer.append(getMethodName());
  buffer.append("(");
  final List<PsiTypeCodeFragment> codeFraments=myParametersTableModel.getCodeFraments();
  final ParameterInfo[] parameterInfos=myParametersTableModel.getParameters();
  LOG.assertTrue(codeFraments.size() == parameterInfos.length);
  final String indent="    ";
  for (int i=0; i < parameterInfos.length; i++) {
    ParameterInfo info=parameterInfos[i];
    if (i > 0) {
      buffer.append(",");
    }
    buffer.append("\n");
    buffer.append(indent);
    buffer.append(codeFraments.get(i).getText());
    buffer.append(" ");
    buffer.append(info.getName());
  }
  if (parameterInfos.length > 0) {
    buffer.append("\n");
  }
  buffer.append(")");
  PsiTypeCodeFragment[] thrownExceptionsFragments=myExceptionsTableModel.getTypeCodeFragments();
  if (thrownExceptionsFragments.length > 0) {
    buffer.append("\n");
    buffer.append("throws\n");
    for (    PsiTypeCodeFragment thrownExceptionsFragment : thrownExceptionsFragments) {
      String text=thrownExceptionsFragment.getText();
      buffer.append(indent);
      buffer.append(text);
      buffer.append("\n");
    }
  }
  return buffer.toString();
}
