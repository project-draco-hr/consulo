{
  myAssertDispatchThread=assertDispatchThread;
  InvocationHandler handler=new InvocationHandler(){
    @NonNls public Object invoke(    Object proxy,    final Method method,    final Object[] args) throws Throwable {
      if (method.getDeclaringClass().getName().equals("java.lang.Object")) {
        @NonNls String methodName=method.getName();
        if (methodName.equals("toString")) {
          return "Multicaster";
        }
 else         if (methodName.equals("hashCode")) {
          return new Integer(System.identityHashCode(proxy));
        }
 else         if (methodName.equals("equals")) {
          return proxy == args[0] ? Boolean.TRUE : Boolean.FALSE;
        }
 else {
          LOG.error("Incorrect Object's method invoked for proxy:" + methodName);
          return null;
        }
      }
 else {
        dispatch(method,args);
        return null;
      }
    }
  }
;
  myMulticaster=(T)Proxy.newProxyInstance(listenerClass.getClassLoader(),new Class[]{listenerClass},handler);
}
