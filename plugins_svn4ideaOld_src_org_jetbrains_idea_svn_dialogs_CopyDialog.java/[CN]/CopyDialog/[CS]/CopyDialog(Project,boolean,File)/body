{
  super(project,canBeParent);
  mySrcFile=file;
  myProject=project;
  setResizable(true);
  setTitle(SvnBundle.message("dialog.title.branch"));
  getHelpAction().setEnabled(true);
  myProjectButton.setIcon(AllIcons.Nodes.IdeaProject);
  myBranchTagBaseComboBox.setPreferredSize(new Dimension(myBranchTagBaseComboBox.getPreferredSize().width,myWorkingCopyField.getPreferredSize().height));
  myWorkingCopyField.addBrowseFolderListener("Select Working Copy Location","Select Location to Copy From:",project,FileChooserDescriptorFactory.createSingleFolderDescriptor());
  myWorkingCopyField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateControls();
    }
  }
);
  myRepositoryField.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      String url=SelectLocationDialog.selectLocation(project,myRepositoryField.getText());
      if (url != null) {
        myRepositoryField.setText(url);
      }
    }
  }
);
  myRepositoryField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateToURL();
    }
  }
);
  myToURLText.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      String url=myToURLText.getText();
      String dstName=SVNPathUtil.tail(mySrcURL);
      dstName=SVNEncodingUtil.uriDecode(dstName);
      url=SelectLocationDialog.selectCopyDestination(myProject,SVNPathUtil.removeTail(url),SvnBundle.message("label.copy.select.location.dialog.copy.as"),dstName,false);
      if (url != null) {
        myToURLText.setText(url);
      }
    }
  }
);
  VirtualFile srcVirtualFile=LocalFileSystem.getInstance().findFileByIoFile(file);
  srcVirtualFile=ProjectLevelVcsManager.getInstance(project).getVcsRootFor(srcVirtualFile);
  this.mySrcVirtualFile=srcVirtualFile;
  myRevisionPanel.setRoot(mySrcVirtualFile);
  myRevisionPanel.setProject(myProject);
  myRevisionPanel.setUrlProvider(new SvnRevisionPanel.UrlProvider(){
    public String getUrl(){
      return mySrcURL;
    }
  }
);
  updateBranchTagBases();
  myRevisionPanel.addChangeListener(new ChangeListener(){
    public void stateChanged(    final ChangeEvent e){
      getOKAction().setEnabled(isOKActionEnabled());
    }
  }
);
  init();
  ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateControls();
    }
  }
;
  myWorkingCopyRadioButton.addActionListener(listener);
  myRepositoryRadioButton.addActionListener(listener);
  myBranchOrTagRadioButton.addActionListener(listener);
  myAnyLocationRadioButton.addActionListener(listener);
  updateControls();
  myBranchTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateToURL();
    }
  }
);
  updateToURL();
  myProjectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myRepositoryField.setText(myBranchConfiguration.getBaseUrl(mySrcURL));
    }
  }
);
  myBranchTagBaseComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      BranchConfigurationDialog.configureBranches(project,mySrcVirtualFile);
      updateBranchTagBases();
      updateControls();
    }
  }
);
  myBranchTagBaseComboBox.getComboBox().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateToURL();
      updateControls();
    }
  }
);
}
