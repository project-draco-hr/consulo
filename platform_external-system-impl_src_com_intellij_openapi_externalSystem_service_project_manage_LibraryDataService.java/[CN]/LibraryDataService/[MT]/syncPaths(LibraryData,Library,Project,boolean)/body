{
  final Set<String> toRemove=ContainerUtilRt.newHashSet();
  final Set<String> toAdd=ContainerUtilRt.newHashSet(externalLibrary.getPaths(LibraryPathType.BINARY));
  for (  VirtualFile ideFile : ideLibrary.getFiles(OrderRootType.CLASSES)) {
    String idePath=ExternalSystemApiUtil.getLocalFileSystemPath(ideFile);
    if (!toAdd.remove(idePath)) {
      toRemove.add(idePath);
    }
  }
  if (toRemove.isEmpty() && toAdd.isEmpty()) {
    return;
  }
  ExternalSystemApiUtil.executeProjectChangeAction(project,externalLibrary.getOwner(),ideLibrary,synchronous,new Runnable(){
    @Override public void run(){
      Library.ModifiableModel model=ideLibrary.getModifiableModel();
      try {
        for (        String path : toRemove) {
          model.removeRoot(path,OrderRootType.CLASSES);
        }
        Map<OrderRootType,Collection<File>> roots=ContainerUtilRt.newHashMap();
        roots.put(OrderRootType.CLASSES,ContainerUtil.map(toAdd,PATH_TO_FILE));
        registerPaths(roots,model,externalLibrary.getName());
      }
  finally {
        model.commit();
      }
    }
  }
);
}
