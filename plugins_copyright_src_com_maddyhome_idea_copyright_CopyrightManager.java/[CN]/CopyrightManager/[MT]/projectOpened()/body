{
  DocumentListener listener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      final Document document=e.getDocument();
      final VirtualFile virtualFile=FileDocumentManager.getInstance().getFile(document);
      if (virtualFile == null)       return;
      if (!NewFileTracker.getInstance().poll(virtualFile))       return;
      if (!FileTypeUtil.getInstance().isSupportedFile(virtualFile))       return;
      final Module module=ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(virtualFile);
      if (module == null)       return;
      final PsiFile file=PsiManager.getInstance(myProject).findFile(virtualFile);
      if (file == null)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (myProject.isDisposed())           return;
          if (file.isValid() && file.isWritable()) {
            final CopyrightProfile opts=getCopyrightOptions(file);
            if (opts != null) {
              new UpdateCopyrightProcessor(myProject,module,file).run();
            }
          }
        }
      }
,ModalityState.NON_MODAL,myProject.getDisposed());
    }
  }
;
  final EditorFactory factory=EditorFactory.getInstance();
  if (factory != null) {
    factory.getEventMulticaster().addDocumentListener(listener,myProject);
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    Disposer.register(myProject,new Disposable(){
      @Override public void dispose(){
        NewFileTracker.getInstance().clear();
      }
    }
);
  }
}
