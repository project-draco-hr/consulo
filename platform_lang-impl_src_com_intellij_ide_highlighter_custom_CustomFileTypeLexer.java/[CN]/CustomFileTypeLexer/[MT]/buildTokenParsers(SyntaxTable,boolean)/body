{
  final LineCommentParser lineCommentParser=StringUtil.isEmpty(table.getLineComment()) ? null : new LineCommentParser(table.getLineComment(),table.lineCommentOnlyAtStart);
  final MultilineCommentParser multilineCommentParser=MultilineCommentParser.create(table.getStartComment(),table.getEndComment());
  final NumberParser numberParser=new NumberParser(table.getNumPostfixChars(),table.isIgnoreCase());
  final HexNumberParser hexNumberParser=HexNumberParser.create(table.getHexPrefix());
  final KeywordParser keywordParser=new KeywordParser(Arrays.asList(table.getKeywords1(),table.getKeywords2(),table.getKeywords3(),table.getKeywords4()),table.isIgnoreCase());
  final IdentifierParser identifierParser=new IdentifierParser();
  final QuotedStringParser quotedStringParser=new QuotedStringParser("\"",CustomHighlighterTokenType.STRING,table.isHasStringEscapes());
  final QuotedStringParser quotedStringParser2=new QuotedStringParser("\'",forHighlighting ? CustomHighlighterTokenType.SINGLE_QUOTED_STRING : CustomHighlighterTokenType.STRING,table.isHasStringEscapes());
  ArrayList<TokenParser> tokenParsers=new ArrayList<TokenParser>();
  tokenParsers.add(new WhitespaceParser());
  tokenParsers.add(quotedStringParser);
  tokenParsers.add(quotedStringParser2);
  if (lineCommentParser != null) {
    tokenParsers.add(lineCommentParser);
  }
  if (multilineCommentParser != null) {
    tokenParsers.add(multilineCommentParser);
  }
  tokenParsers.add(numberParser);
  tokenParsers.add(new PunctuationParser());
  if (hexNumberParser != null) {
    tokenParsers.add(hexNumberParser);
  }
  tokenParsers.add(keywordParser);
  tokenParsers.add(identifierParser);
  if (table.isHasBraces()) {
    tokenParsers.addAll(BraceTokenParser.getBraces());
  }
  if (table.isHasParens()) {
    tokenParsers.addAll(BraceTokenParser.getParens());
  }
  if (table.isHasBrackets()) {
    tokenParsers.addAll(BraceTokenParser.getBrackets());
  }
  return tokenParsers;
}
