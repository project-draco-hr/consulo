{
  final List<PsiVariable> allVariables=new ArrayList<PsiVariable>();
  allVariables.addAll(Arrays.asList(method.getParameterList().getParameters()));
  allVariables.addAll(Arrays.asList(method.getContainingClass().getFields()));
  boolean classTypesFound=false;
  boolean resolvableClassesFound=false;
  boolean classesInProjectFound=false;
  for (  PsiVariable variable : allVariables) {
    final PsiType type=variable.getType();
    if (type instanceof PsiClassType && !((PsiClassType)type).hasParameters()) {
      classTypesFound=true;
      final PsiClass psiClass=((PsiClassType)type).resolve();
      if (psiClass != null && !(psiClass instanceof PsiTypeParameter)) {
        resolvableClassesFound=true;
        final boolean inProject=method.getManager().isInProject(psiClass);
        if (inProject) {
          classesInProjectFound=true;
          suitableVariables.add(variable);
        }
      }
    }
  }
  if (suitableVariables.isEmpty()) {
    if (!classTypesFound) {
      return RefactoringBundle.message("there.are.no.variables.that.have.reference.type");
    }
 else     if (!resolvableClassesFound) {
      return RefactoringBundle.message("all.candidate.variables.have.unknown.types");
    }
 else     if (!classesInProjectFound) {
      return RefactoringBundle.message("all.candidate.variables.have.types.not.in.project");
    }
  }
  return null;
}
