{
  if (elements.length != 1 || !(elements[0] instanceof PsiMethod))   return;
  final PsiMethod method=(PsiMethod)elements[0];
  String message=null;
  if (method.isConstructor()) {
    message=RefactoringBundle.message("move.method.is.not.supported.for.constructors");
  }
 else   if (PsiUtil.typeParametersIterator(method.getContainingClass()).hasNext() && TypeParametersSearcher.hasTypeParameters(method)) {
    message=RefactoringBundle.message("move.method.is.not.supported.for.generic.classes");
  }
 else   if (method.findSuperMethods().length > 0 || OverridingMethodsSearch.search(method,method.getUseScope(),true).toArray(PsiMethod.EMPTY_ARRAY).length > 0) {
    message=RefactoringBundle.message("move.method.is.not.supported.when.method.is.part.of.inheritance.hierarchy");
  }
 else {
    final Set<PsiClass> classes=MoveInstanceMembersUtil.getThisClassesToMembers(method).keySet();
    for (    PsiClass aClass : classes) {
      if (aClass instanceof JspClass) {
        message=RefactoringBundle.message("synthetic.jsp.class.is.referenced.in.the.method");
        Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
        CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.MOVE_INSTANCE_METHOD);
        break;
      }
    }
  }
  if (message != null) {
    showErrorHint(project,dataContext,message);
    return;
  }
  final List<PsiVariable> suitableVariables=new ArrayList<PsiVariable>();
  message=collectSuitableVariables(method,suitableVariables);
  if (message != null) {
    final String unableToMakeStaticMessage=MakeStaticHandler.validateTarget(method);
    if (unableToMakeStaticMessage != null) {
      showErrorHint(project,dataContext,message);
    }
 else {
      final String suggestToMakeStaticMessage="Would you like to make method \'" + method.getName() + "\' static and then move?";
      if (Messages.showYesNoCancelDialog(project,message + ". " + suggestToMakeStaticMessage,REFACTORING_NAME,Messages.getErrorIcon()) == DialogWrapper.OK_EXIT_CODE) {
        MakeStaticHandler.invoke(method);
      }
    }
    return;
  }
  new MoveInstanceMethodDialog(method,suitableVariables.toArray(new PsiVariable[suitableVariables.size()])).show();
}
