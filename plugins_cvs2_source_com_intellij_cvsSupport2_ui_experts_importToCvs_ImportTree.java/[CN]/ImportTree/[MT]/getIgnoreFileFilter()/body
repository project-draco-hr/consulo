{
  final Collection<File> ignoredFiles=new HashSet<File>();
  for (Iterator iterator=myExcludedFiles.iterator(); iterator.hasNext(); ) {
    ignoredFiles.add(CvsVfsUtil.getFileFor((VirtualFile)iterator.next()));
  }
  return new IIgnoreFileFilter(){
    private final Map<File,IgnoredFilesInfo> myParentToIgnoresMap=new HashMap<File,IgnoredFilesInfo>();
    public boolean shouldBeIgnored(    AbstractFileObject abstractFileObject,    ICvsFileSystem cvsFileSystem){
      File file=cvsFileSystem.getLocalFileSystem().getFile(abstractFileObject);
      if (file.isDirectory() && file.getName().equals(CvsUtil.CVS))       return true;
      if (ignoredFiles.contains(file))       return true;
      File parentFile=file.getParentFile();
      if (parentFile == null)       return false;
      if (!myParentToIgnoresMap.containsKey(parentFile)) {
        myParentToIgnoresMap.put(parentFile,IgnoredFilesInfoImpl.createForFile(new File(parentFile,CvsUtil.CVS_IGNORE_FILE)));
      }
      return myParentToIgnoresMap.get(parentFile).shouldBeIgnored(file.getName());
    }
  }
;
}
