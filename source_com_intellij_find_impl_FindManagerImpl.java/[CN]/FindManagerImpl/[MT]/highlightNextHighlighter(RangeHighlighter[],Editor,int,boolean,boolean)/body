{
  RangeHighlighter highlighterToSelect=null;
  Object wasNotFound=editor.getUserData(HIGHLIGHTER_WAS_NOT_FOUND_KEY);
  for (int i=0; i < highlighters.length; i++) {
    RangeHighlighter highlighter=highlighters[i];
    int start=highlighter.getStartOffset();
    int end=highlighter.getEndOffset();
    if (highlighter.isValid() && start < end) {
      if (isForward && (start > offset || (start == offset && secondPass))) {
        if (highlighterToSelect == null || highlighterToSelect.getStartOffset() > start)         highlighterToSelect=highlighter;
      }
      if (!isForward && (end < offset || (end == offset && secondPass))) {
        if (highlighterToSelect == null || highlighterToSelect.getEndOffset() < end)         highlighterToSelect=highlighter;
      }
    }
  }
  if (highlighterToSelect != null) {
    editor.getSelectionModel().setSelection(highlighterToSelect.getStartOffset(),highlighterToSelect.getEndOffset());
    editor.getCaretModel().moveToOffset(highlighterToSelect.getStartOffset());
    ScrollType scrollType;
    if (!secondPass) {
      scrollType=isForward ? ScrollType.CENTER_DOWN : ScrollType.CENTER_UP;
    }
 else {
      scrollType=!isForward ? ScrollType.CENTER_DOWN : ScrollType.CENTER_UP;
    }
    editor.getScrollingModel().scrollToCaret(scrollType);
    editor.putUserData(HIGHLIGHTER_WAS_NOT_FOUND_KEY,null);
    return true;
  }
  if (wasNotFound == null) {
    editor.putUserData(HIGHLIGHTER_WAS_NOT_FOUND_KEY,Boolean.TRUE);
    String message=FindBundle.message("find.highlight.no.more.highlights.found");
    if (isForward) {
      AnAction action=ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_NEXT);
      String shortcutsText=KeymapUtil.getFirstKeyboardShortcutText(action);
      if (shortcutsText.length() > 0) {
        message=FindBundle.message("find.search.again.from.top.hotkey.message",message,shortcutsText);
      }
 else {
        message=FindBundle.message("find.search.again.from.top.action.message",message);
      }
    }
 else {
      AnAction action=ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_PREVIOUS);
      String shortcutsText=KeymapUtil.getFirstKeyboardShortcutText(action);
      if (shortcutsText.length() > 0) {
        message=FindBundle.message("find.search.again.from.bottom.hotkey.message",message,shortcutsText);
      }
 else {
        message=FindBundle.message("find.search.again.from.bottom.action.message",message);
      }
    }
    HintManager hintManager=HintManager.getInstance();
    JComponent component=HintUtil.createInformationLabel(message);
    final LightweightHint hint=new LightweightHint(component);
    hintManager.showEditorHint(hint,editor,HintManager.UNDER,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false);
    return true;
  }
 else   if (!secondPass) {
    offset=isForward ? 0 : editor.getDocument().getTextLength();
    return highlightNextHighlighter(highlighters,editor,offset,isForward,true);
  }
  return false;
}
