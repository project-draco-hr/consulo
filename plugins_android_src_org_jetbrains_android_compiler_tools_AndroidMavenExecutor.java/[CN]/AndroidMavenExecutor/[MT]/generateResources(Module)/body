{
  MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(module.getProject());
  MavenRunnerParameters parameters=new MavenRunnerParameters(true,projectsManager.findProject(module).getDirectory(),Collections.singletonList("process-resources"),projectsManager.getExplicitProfiles());
  Map<CompilerMessageCategory,List<String>> result=new HashMap<CompilerMessageCategory,List<String>>();
  result.put(CompilerMessageCategory.ERROR,new ArrayList<String>());
  try {
    JavaParameters javaParams=MavenExternalParameters.createJavaParameters(module.getProject(),parameters);
    GeneralCommandLine commandLine=CommandLineBuilder.createFromJavaParameters(javaParams);
    StringBuilder messageBuilder=new StringBuilder();
    boolean success=AndroidUtils.executeCommand(commandLine,messageBuilder,null) == ExecutionStatus.SUCCESS;
    String message=messageBuilder.toString();
    if (message != null && !success) {
      LOG.info(message);
      String lcmessage=message.toLowerCase();
      int buildErrorIndex=lcmessage.indexOf(BUILD_ERROR_INDICATOR);
      if (buildErrorIndex >= 0) {
        int failedToResolveIndex=lcmessage.indexOf(FAILED_TO_RESOLVE_ARTIFACT_INDICATOR);
        result.get(CompilerMessageCategory.ERROR).add(message.substring(buildErrorIndex));
      }
    }
  }
 catch (  ExecutionException e) {
    LOG.info(e);
    result.get(CompilerMessageCategory.ERROR).add(e.getMessage());
  }
  return result;
}
