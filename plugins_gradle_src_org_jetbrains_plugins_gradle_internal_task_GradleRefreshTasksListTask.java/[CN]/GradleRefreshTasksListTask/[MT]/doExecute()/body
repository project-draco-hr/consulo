{
  final GradleApiFacadeManager manager=ServiceManager.getService(GradleApiFacadeManager.class);
  Project project=getIdeProject();
  GradleBuildManager buildManager=manager.getFacade(project).getBuildManager();
  setState(GradleTaskState.IN_PROGRESS);
  try {
    final Collection<GradleTaskDescriptor> descriptors=buildManager.listTasks(getId(),myProjectPath);
    if (descriptors == null || descriptors.isEmpty()) {
      return;
    }
    if (project == null) {
      return;
    }
    GradleLocalSettings settings=GradleLocalSettings.getInstance(project);
    settings.setAvailableTasks(descriptors);
    final GradleTasksModel tasksModel=GradleUtil.getToolWindowElement(GradleTasksModel.class,project,GradleDataKeys.ALL_TASKS_MODEL);
    if (tasksModel == null) {
      return;
    }
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        tasksModel.setTasks(descriptors);
      }
    }
);
  }
  finally {
    setState(GradleTaskState.FINISHED);
  }
}
