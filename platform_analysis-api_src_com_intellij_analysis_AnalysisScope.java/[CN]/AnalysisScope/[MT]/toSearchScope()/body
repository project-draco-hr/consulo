{
switch (myType) {
case CUSTOM:
    return myScope;
case DIRECTORY:
  return GlobalSearchScopesCore.directoryScope((PsiDirectory)myElement,true);
case FILE:
return new LocalSearchScope(myElement);
case INVALID:
return LocalSearchScope.EMPTY;
case MODULE:
GlobalSearchScope moduleScope=GlobalSearchScope.moduleScope(myModule);
return myIncludeTestSource ? moduleScope : GlobalSearchScope.notScope(GlobalSearchScopesCore.projectTestScope(myModule.getProject())).intersectWith(moduleScope);
case MODULES:
SearchScope scope=GlobalSearchScope.EMPTY_SCOPE;
for (Module module : myModules) {
scope=scope.union(GlobalSearchScope.moduleScope(module));
}
return scope;
case PROJECT:
return myIncludeTestSource ? GlobalSearchScope.projectScope(myProject) : GlobalSearchScopesCore.projectProductionScope(myProject);
case VIRTUAL_FILES:
return new GlobalSearchScope(){
@Override public boolean contains(@NotNull VirtualFile file){
return myFilesSet.contains(file);
}
@Override public int compare(@NotNull VirtualFile file1,@NotNull VirtualFile file2){
return 0;
}
@Override public boolean isSearchInModuleContent(@NotNull Module aModule){
return false;
}
@Override public boolean isSearchInLibraries(){
return false;
}
}
;
default :
LOG.error("invalid type " + myType);
return GlobalSearchScope.EMPTY_SCOPE;
}
}
