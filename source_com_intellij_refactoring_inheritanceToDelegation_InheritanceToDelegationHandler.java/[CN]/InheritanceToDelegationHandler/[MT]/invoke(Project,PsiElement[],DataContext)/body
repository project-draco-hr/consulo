{
  if (elements.length != 1)   return;
  myClass=(PsiClass)elements[0];
  if (myClass.isInterface()) {
    String message="Cannot perform the refactoring.\n" + myClass.getQualifiedName() + " is an interface.";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return;
  }
  if (!myClass.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(project,myClass))     return;
  }
  final PsiClass[] bases=myClass.getSupers();
  if (bases.length == 0 || bases.length == 1 && "java.lang.Object".equals(bases[0].getQualifiedName())) {
    String message="Cannot perform the refactoring.\n" + "Class " + myClass.getQualifiedName() + " does not have base classes or interfaces.";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return;
  }
  final HashMap<PsiClass,MemberInfo[]> basesToMemberInfos=new HashMap<PsiClass,MemberInfo[]>();
  for (int i=0; i < bases.length; i++) {
    PsiClass base=bases[i];
    basesToMemberInfos.put(base,createBaseClassMemberInfos(base));
  }
  new InheritanceToDelegationDialog(project,myClass,bases,basesToMemberInfos).show();
}
