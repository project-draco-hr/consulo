{
  String rangeText1=hostText.substring(myHostRanges[i].getStartOffset(),myHostRanges[i].getEndOffset());
  if (i == j) {
    result[i]=rangeText1.equals(newText) ? null : newText;
    return;
  }
  if (StringUtil.startsWith(newText,rangeText1)) {
    result[i]=null;
    calculateMinEditSequence(hostText,newText.substring(rangeText1.length()),result,i + 1,j);
    return;
  }
  String rangeText2=hostText.substring(myHostRanges[j].getStartOffset(),myHostRanges[j].getEndOffset());
  if (StringUtil.endsWith(newText,rangeText2)) {
    result[j]=null;
    calculateMinEditSequence(hostText,newText.substring(rangeText2.length()),result,i,j - 1);
    return;
  }
  if (i + 1 == j) {
    String prefix=StringUtil.commonPrefix(rangeText1,newText);
    result[i]=prefix;
    result[j]=newText.substring(prefix.length());
    return;
  }
  String middleText=hostText.substring(myHostRanges[i + 1].getStartOffset(),myHostRanges[i + 1].getEndOffset());
  int m=newText.indexOf(middleText);
  if (m != -1) {
    result[i]=newText.substring(0,m);
    result[i + 1]=null;
    calculateMinEditSequence(hostText,newText.substring(m + middleText.length(),newText.length()),result,i + 2,j);
    return;
  }
  middleText=hostText.substring(myHostRanges[j - 1].getStartOffset(),myHostRanges[j - 1].getEndOffset());
  m=newText.lastIndexOf(middleText);
  if (m != -1) {
    result[j]=newText.substring(m + middleText.length());
    result[j - 1]=null;
    calculateMinEditSequence(hostText,newText.substring(0,m),result,i,j - 2);
    return;
  }
  result[i]="";
  result[j]="";
  calculateMinEditSequence(hostText,newText,result,i + 1,j - 1);
}
