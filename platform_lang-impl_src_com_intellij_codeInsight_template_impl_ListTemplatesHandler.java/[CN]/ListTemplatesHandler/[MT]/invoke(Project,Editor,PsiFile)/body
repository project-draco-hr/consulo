{
  if (!file.isWritable())   return;
  EditorUtil.fillVirtualSpaceUntilCaret(editor);
  PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
  int offset=editor.getCaretModel().getOffset();
  String prefix=getPrefix(editor.getDocument(),offset);
  ArrayList<LookupItem> array=new ArrayList<LookupItem>();
  for (  TemplateImpl template : SurroundWithTemplateHandler.getApplicableTemplates(editor,file,false)) {
    String key=template.getKey();
    if (key.startsWith(prefix)) {
      array.add(new LookupItem(template,key));
    }
  }
  LookupElement[] items=array.toArray(new LookupElement[array.size()]);
  if (items.length == 0) {
    String text=prefix.length() == 0 ? CodeInsightBundle.message("templates.no.defined") : CodeInsightBundle.message("templates.no.defined.with.prefix",prefix);
    HintManager.getInstance().showErrorHint(editor,text);
    return;
  }
  final LookupImpl lookup=(LookupImpl)LookupManager.getInstance(project).createLookup(editor,items,prefix,null);
  lookup.addLookupListener(new LookupAdapter(){
    public void itemSelected(    LookupEvent event){
      new WriteCommandAction(project){
        protected void run(        Result result) throws Throwable {
          TemplateManager.getInstance(project).startTemplate(editor,'\0');
        }
      }
.execute();
    }
  }
);
  lookup.show();
}
