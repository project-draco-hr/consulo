{
  ourMap.clear();
  ourRendererColors.clear();
  final List children=element.getChildren(INFO);
  if (children != null) {
    for (    Object child : children) {
      final Element infoElement=(Element)child;
      final SeverityBasedTextAttributes highlightInfo=new SeverityBasedTextAttributes();
      highlightInfo.readExternal(infoElement);
      Color color=null;
      final String colorStr=infoElement.getAttributeValue(COLOR);
      if (colorStr != null) {
        color=new Color(Integer.parseInt(colorStr,16));
      }
      registerSeverity(highlightInfo,color);
    }
  }
  myOrder.clear();
  myOrder.readExternal(element);
  myReadOrder=new JDOMExternalizableStringList();
  myReadOrder.addAll(myOrder);
  final List<String> knownSeverities=createCurrentSeverities();
  myOrder.retainAll(knownSeverities);
  if (myOrder.isEmpty()) {
    initOrder();
  }
  for (int i=0; i < knownSeverities.size(); i++) {
    String stdSeverity=knownSeverities.get(i);
    if (!myOrder.contains(stdSeverity)) {
      for (int oIdx=0; oIdx < myOrder.size(); oIdx++) {
        final String orderSeverity=myOrder.get(oIdx);
        final HighlightInfoType type=STANDART_SEVERITIES.get(orderSeverity);
        if (type != null && knownSeverities.indexOf(type.getSeverity(null).toString()) > i) {
          myOrder.add(oIdx,stdSeverity);
          myReadOrder=null;
          break;
        }
      }
    }
  }
}
