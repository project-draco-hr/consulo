{
  super(project,true);
  myCommitContext=new CommitContext();
  myProject=project;
  myExecutors=executors;
  myShowVcsCommit=showVcsCommit;
  myVcs=singleVcs;
  myResultHandler=customResultHandler;
  myListComments=new HashMap<String,String>();
  myAdditionalData=new PseudoMap<Object,Object>();
  myDiffDetails=new ShortDiffDetails(myProject,new Getter<Change[]>(){
    @Override public Change[] get(){
      final List<Change> selectedChanges=myBrowser.getViewer().getSelectedChanges();
      return selectedChanges.toArray(new Change[selectedChanges.size()]);
    }
  }
,VcsChangeDetailsManager.getInstance(myProject));
  if (!myShowVcsCommit && ((myExecutors == null) || myExecutors.size() == 0)) {
    throw new IllegalArgumentException("nothing found to execute commit with");
  }
  myAllOfDefaultChangeListChangesIncluded=new HashSet<Change>(changes).containsAll(new HashSet<Change>(defaultChangeList.getChanges()));
  myIsAlien=isAlien;
  if (isAlien) {
    AlienChangeListBrowser browser=new AlienChangeListBrowser(project,changeLists,changes,initialSelection,true,true,singleVcs);
    myBrowser=browser;
    myBrowserExtender=browser;
  }
 else {
    MultipleChangeListBrowser browser=new MultipleChangeListBrowser(project,changeLists,changes,getDisposable(),initialSelection,true,true,new Runnable(){
      @Override public void run(){
        updateWarning();
      }
    }
,new Runnable(){
      @Override public void run(){
        for (        CheckinHandler handler : myHandlers) {
          handler.includedChangesChanged();
        }
      }
    }
){
      @Override protected void afterDiffRefresh(){
        myBrowser.rebuildList();
        myBrowser.setDataIsDirty(false);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            IdeFocusManager.findInstance().requestFocus(myBrowser.getViewer().getPreferredFocusedComponent(),true);
          }
        }
);
      }
    }
;
    myBrowser=browser;
    myBrowser.setAlwayExpandList(false);
    myBrowserExtender=browser.getExtender();
  }
  myDiffDetails.setParent(myBrowser);
  myZipperUpdater=new ZipperUpdater(30,Alarm.ThreadToUse.SWING_THREAD,getDisposable());
  myRefreshDetails=new Runnable(){
    @Override public void run(){
      myDiffDetails.refresh();
    }
  }
;
  myListenersForShortDiff=new FileAndDocumentListenersForShortDiff(myDiffDetails){
    @Override protected void updateDetails(){
      myZipperUpdater.queue(myRefreshDetails);
    }
    @Override protected boolean updateSynchronously(){
      return false;
    }
  }
;
  myListenersForShortDiff.on();
  myBrowser.getViewer().addSelectionListener(new Runnable(){
    @Override public void run(){
      myZipperUpdater.queue(myRefreshDetails);
    }
  }
);
  myBrowserExtender.addToolbarActions(this);
  myBrowserExtender.addSelectedListChangeListener(new SelectedListChangeListener(){
    @Override public void selectedListChanged(){
      updateOnListSelection();
    }
  }
);
  myBrowser.setDiffExtendUIFactory(new DiffExtendUIFactory(){
    @Override public List<? extends AnAction> createActions(    final Change change){
      return myBrowser.createDiffActions(change);
    }
    @Override @Nullable public JComponent createBottomComponent(){
      return new DiffCommitMessageEditor(CommitChangeListDialog.this);
    }
  }
);
  myCommitMessageArea=new CommitMessage(project);
  if (!VcsConfiguration.getInstance(project).CLEAR_INITIAL_COMMIT_MESSAGE) {
    setComment(project,initialSelection,comment);
  }
  myActionName=VcsBundle.message("commit.dialog.title");
  myAdditionalOptionsPanel=new JPanel();
  myAdditionalOptionsPanel.setLayout(new BorderLayout());
  Box optionsBox=Box.createVerticalBox();
  boolean hasVcsOptions=false;
  Box vcsCommitOptions=Box.createVerticalBox();
  final List<AbstractVcs> vcses=new ArrayList<AbstractVcs>(getAffectedVcses());
  Collections.sort(vcses,new Comparator<AbstractVcs>(){
    @Override public int compare(    AbstractVcs o1,    AbstractVcs o2){
      return o1.getKeyInstanceMethod().getName().compareToIgnoreCase(o2.getKeyInstanceMethod().getName());
    }
  }
);
  myCheckinChangeListSpecificComponents=new HashMap<String,CheckinChangeListSpecificComponent>();
  for (  AbstractVcs vcs : vcses) {
    final CheckinEnvironment checkinEnvironment=vcs.getCheckinEnvironment();
    if (checkinEnvironment != null) {
      final RefreshableOnComponent options=checkinEnvironment.createAdditionalOptionsPanel(this,myAdditionalData);
      if (options != null) {
        JPanel vcsOptions=new JPanel(new BorderLayout());
        vcsOptions.add(options.getComponent(),BorderLayout.CENTER);
        vcsOptions.setBorder(IdeBorderFactory.createTitledBorder(vcs.getDisplayName(),true));
        vcsCommitOptions.add(vcsOptions);
        myPerVcsOptionsPanels.put(vcs,vcsOptions);
        myAdditionalComponents.add(options);
        if (options instanceof CheckinChangeListSpecificComponent) {
          myCheckinChangeListSpecificComponents.put(vcs.getName(),(CheckinChangeListSpecificComponent)options);
        }
        hasVcsOptions=true;
      }
    }
  }
  if (hasVcsOptions) {
    vcsCommitOptions.add(Box.createVerticalGlue());
    optionsBox.add(vcsCommitOptions);
  }
  boolean beforeVisible=false;
  boolean afterVisible=false;
  Box beforeBox=Box.createVerticalBox();
  Box afterBox=Box.createVerticalBox();
  for (  BaseCheckinHandlerFactory factory : getCheckInFactories(project)) {
    final CheckinHandler handler=factory.createHandler(this,myCommitContext);
    if (CheckinHandler.DUMMY.equals(handler))     continue;
    myHandlers.add(handler);
    final RefreshableOnComponent beforePanel=handler.getBeforeCheckinConfigurationPanel();
    if (beforePanel != null) {
      beforeBox.add(beforePanel.getComponent());
      beforeVisible=true;
      myAdditionalComponents.add(beforePanel);
    }
    final RefreshableOnComponent afterPanel=handler.getAfterCheckinConfigurationPanel(getDisposable());
    if (afterPanel != null) {
      afterBox.add(afterPanel.getComponent());
      afterVisible=true;
      myAdditionalComponents.add(afterPanel);
    }
  }
  final String actionName=getCommitActionName();
  final String borderTitleName=actionName.replace("_","").replace("&","");
  if (beforeVisible) {
    beforeBox.add(Box.createVerticalGlue());
    JPanel beforePanel=new JPanel(new BorderLayout());
    beforePanel.add(beforeBox);
    beforePanel.setBorder(IdeBorderFactory.createTitledBorder(VcsBundle.message("border.standard.checkin.options.group",borderTitleName),true));
    optionsBox.add(beforePanel);
  }
  if (afterVisible) {
    afterBox.add(Box.createVerticalGlue());
    JPanel afterPanel=new JPanel(new BorderLayout());
    afterPanel.add(afterBox);
    afterPanel.setBorder(IdeBorderFactory.createTitledBorder(VcsBundle.message("border.standard.after.checkin.options.group",borderTitleName),true));
    optionsBox.add(afterPanel);
  }
  if (hasVcsOptions || beforeVisible || afterVisible) {
    optionsBox.add(Box.createVerticalGlue());
    myAdditionalOptionsPanel.add(optionsBox,BorderLayout.NORTH);
  }
  myOkActionText=actionName;
  if (myShowVcsCommit) {
    setTitle(myActionName);
  }
 else {
    setTitle(trimEllipsis(myExecutors.get(0).getActionText()));
  }
  restoreState();
  if (myExecutors != null) {
    myExecutorActions=new CommitExecutorAction[myExecutors.size()];
    for (int i=0; i < myExecutors.size(); i++) {
      final CommitExecutor commitExecutor=myExecutors.get(i);
      myExecutorActions[i]=new CommitExecutorAction(commitExecutor,i == 0 && !myShowVcsCommit);
    }
  }
 else {
    myExecutorActions=null;
  }
  myWarningLabel=new JLabel();
  myWarningLabel.setUI(new MultiLineLabelUI());
  myWarningLabel.setForeground(Color.red);
  updateWarning();
  init();
  updateButtons();
  updateVcsOptionsVisibility();
  updateOnListSelection();
  myCommitMessageArea.requestFocusInMessage();
  for (  EditChangelistSupport support : Extensions.getExtensions(EditChangelistSupport.EP_NAME,project)) {
    support.installSearch(myCommitMessageArea.getEditorField(),myCommitMessageArea.getEditorField());
  }
  showDetailsIfSaved();
}
