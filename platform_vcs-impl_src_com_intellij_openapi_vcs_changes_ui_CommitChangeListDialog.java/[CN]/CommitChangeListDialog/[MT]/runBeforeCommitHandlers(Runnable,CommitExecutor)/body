{
  final Computable<CheckinHandler.ReturnResult> proceedRunnable=new Computable<CheckinHandler.ReturnResult>(){
    @Override public CheckinHandler.ReturnResult compute(){
      FileDocumentManager.getInstance().saveAllDocuments();
      for (      CheckinHandler handler : myHandlers) {
        if (!(handler.acceptExecutor(executor)))         continue;
        final CheckinHandler.ReturnResult result=handler.beforeCheckin(executor,myAdditionalData);
        if (result == CheckinHandler.ReturnResult.COMMIT)         continue;
        if (result == CheckinHandler.ReturnResult.CANCEL) {
          restartUpdate();
          return CheckinHandler.ReturnResult.CANCEL;
        }
        if (result == CheckinHandler.ReturnResult.CLOSE_WINDOW) {
          final ChangeList changeList=myBrowser.getSelectedChangeList();
          CommitHelper.moveToFailedList(changeList,getCommitMessage(),getIncludedChanges(),VcsBundle.message("commit.dialog.rejected.commit.template",changeList.getName()),myProject);
          doCancelAction();
          return CheckinHandler.ReturnResult.CLOSE_WINDOW;
        }
      }
      okAction.run();
      return CheckinHandler.ReturnResult.COMMIT;
    }
  }
;
  stopUpdate();
  final Ref<CheckinHandler.ReturnResult> compoundResultRef=Ref.create();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      compoundResultRef.set(proceedRunnable.compute());
    }
  }
;
  for (  final CheckinHandler handler : myHandlers) {
    if (handler instanceof CheckinMetaHandler) {
      final Runnable previousRunnable=runnable;
      runnable=new Runnable(){
        @Override public void run(){
          ((CheckinMetaHandler)handler).runCheckinHandlers(previousRunnable);
        }
      }
;
    }
  }
  runnable.run();
  return compoundResultRef.get();
}
