{
  if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(new VirtualFile[]{file.getVirtualFile()}).hasReadonlyFiles())   return;
  final PsiField field=(PsiField)findMatchingElement(file,editor);
  field.normalizeDeclaration();
  final PsiExpression initializer=field.getInitializer();
  final String initializerText=initializer.getText();
  final PsiManager psiManager=field.getManager();
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  PsiClassInitializer classInitializer=elementFactory.createClassInitializer();
  final PsiClass containingClass=field.getContainingClass();
  classInitializer=(PsiClassInitializer)containingClass.addAfter(classInitializer,field);
  final PsiCodeBlock body=classInitializer.getBody();
  final String initializationStatementText=field.getName() + " = " + initializerText+ ';';
  final PsiExpressionStatement statement=(PsiExpressionStatement)elementFactory.createStatementFromText(initializationStatementText,body);
  body.add(statement);
  if (field.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiModifierList modifierList=classInitializer.getModifierList();
    modifierList.setModifierProperty(PsiModifier.STATIC,true);
  }
  initializer.delete();
  final CodeStyleManager codeStyleManager=psiManager.getCodeStyleManager();
  codeStyleManager.reformat(field);
  codeStyleManager.reformat(classInitializer);
}
