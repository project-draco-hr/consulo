{
  StringBuilder log=new StringBuilder();
  String rootPath=FileUtil.toSystemIndependentName(workDir.getAbsolutePath()) + "/";
  final TestJavaBuilderLogger builderLogger=new TestJavaBuilderLogger(rootPath,log);
  final ProjectDescriptor pd=createProjectDescriptor(new BuildLoggingManager(new ArtifactBuilderLoggerImpl(),builderLogger,new TestProjectBuilderLogger(rootPath,log)));
  try {
    doBuild(pd,createAllModulesScope(true),false,true,false).assertSuccessful();
    BuildResult result=null;
    for (int idx=0; idx < makesCount; idx++) {
      modify(idx);
      result=doBuild(pd,createAllModulesScope(false),true,false,false);
    }
    assertNotNull(result);
    final ByteArrayOutputStream makeDump=new ByteArrayOutputStream();
    if (result.isSuccessful()) {
      final PrintStream stream=new PrintStream(makeDump);
      try {
        pd.dataManager.getMappings().toStream(stream);
      }
  finally {
        stream.close();
      }
    }
    makeDump.close();
    File logFile=new File(baseDir.getAbsolutePath() + ".log");
    if (!logFile.exists()) {
      logFile=new File(baseDir,"build.log");
    }
    final String expected=StringUtil.convertLineSeparators(FileUtil.loadFile(logFile));
    final String actual=log.toString();
    assertEquals(expected,actual);
    if (result.isSuccessful()) {
      doBuild(pd,createAllModulesScope(true),false,true,false).assertSuccessful();
      final ByteArrayOutputStream rebuildDump=new ByteArrayOutputStream();
      final PrintStream stream=new PrintStream(rebuildDump);
      try {
        pd.dataManager.getMappings().toStream(stream);
      }
  finally {
        stream.close();
      }
      rebuildDump.close();
      assertEquals(rebuildDump.toString(),makeDump.toString());
    }
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    pd.release();
  }
}
