{
  final TestJavaBuilderLogger javaBuilderLogger=new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(workDir.getAbsolutePath()) + "/");
  final ProjectDescriptor projectDescriptor=createProjectDescriptor(new BuildLoggingManager(new ArtifactBuilderLoggerImpl(),javaBuilderLogger));
  try {
    doBuild(projectDescriptor,new AllProjectScope(myJpsProject,Collections.<JpsArtifact>emptySet(),true),false,true,false).assertSuccessful();
    modify();
    if (Utils.TIMESTAMP_ACCURACY > 1) {
      try {
        Thread.sleep(Utils.TIMESTAMP_ACCURACY);
      }
 catch (      InterruptedException ignored) {
      }
    }
    BuildResult result=doBuild(projectDescriptor,new AllProjectScope(myJpsProject,Collections.<JpsArtifact>emptySet(),false),true,false,false);
    final ByteArrayOutputStream makeDump=new ByteArrayOutputStream();
    if (result.isSuccessful()) {
      projectDescriptor.dataManager.getMappings().toStream(new PrintStream(makeDump));
    }
    makeDump.close();
    File logFile=new File(baseDir.getAbsolutePath() + ".log");
    if (!logFile.exists()) {
      logFile=new File(baseDir,"build.log");
    }
    final String expected=StringUtil.convertLineSeparators(FileUtil.loadFile(logFile));
    final String actual=javaBuilderLogger.myLog.toString();
    assertEquals(expected,actual);
    if (result.isSuccessful()) {
      doBuild(projectDescriptor,new AllProjectScope(myJpsProject,Collections.<JpsArtifact>emptySet(),true),false,true,false).assertSuccessful();
      final ByteArrayOutputStream rebuildDump=new ByteArrayOutputStream();
      projectDescriptor.dataManager.getMappings().toStream(new PrintStream(rebuildDump));
      rebuildDump.close();
      assertEquals(rebuildDump.toString(),makeDump.toString());
    }
    return result;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    projectDescriptor.release();
  }
}
