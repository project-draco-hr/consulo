{
  final Properties properties=new Properties();
  properties.setProperty("log4j.rootCategory","INFO, A1");
  properties.setProperty("log4j.appender.A1","org.apache.log4j.FileAppender");
  properties.setProperty("log4j.appender.A1.file",getWorkDir() + ".log");
  properties.setProperty("log4j.appender.A1.layout","org.apache.log4j.PatternLayout");
  properties.setProperty("log4j.appender.A1.layout.ConversionPattern","%m%n");
  PropertyConfigurator.configure(properties);
  Logger.setFactory(new Logger.Factory(){
    @Override public Logger getLoggerInstance(    String category){
      final org.apache.log4j.Logger logger=org.apache.log4j.Logger.getLogger(category);
      final boolean affectedLogger=category.equals("#org.jetbrains.jps.incremental.java.JavaBuilder") || category.equals("#org.jetbrains.jps.incremental.IncProjectBuilder");
      final String root=getWorkDir() + File.separator;
      final int pos=root.length();
      return new Logger(){
        @Override public boolean isDebugEnabled(){
          return affectedLogger;
        }
        @Override public void debug(        @NonNls String message){
        }
        @Override public void debug(        @Nullable Throwable t){
        }
        @Override public void debug(        @NonNls String message,        @Nullable Throwable t){
        }
        @Override public void error(        @NonNls String message,        @Nullable Throwable t,        @NonNls String... details){
        }
        @Override public void info(        @NonNls String message){
          if (affectedLogger) {
            logger.info(stripper.strip(message));
          }
        }
        @Override public void info(        @NonNls String message,        @Nullable Throwable t){
        }
        @Override public void warn(        @NonNls String message,        @Nullable Throwable t){
        }
        @Override public void setLevel(        Level level){
        }
      }
;
    }
  }
);
}
