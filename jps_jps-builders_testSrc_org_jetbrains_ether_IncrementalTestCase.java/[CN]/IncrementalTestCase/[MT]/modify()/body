{
  final File[] files=baseDir.listFiles(new FileFilter(){
    public boolean accept(    final File pathname){
      final String name=pathname.getName();
      return name.endsWith(".java.new") || name.endsWith(".java.remove");
    }
  }
);
  FileUtil.processFilesRecursively(baseDir,new Processor<File>(){
    @Override public boolean process(    File file){
      try {
        if (file.getName().endsWith(".form.new")) {
          String relativePath=StringUtil.trimEnd(FileUtil.getRelativePath(baseDir,file),".new");
          FileUtil.copyContent(file,new File(workDir,relativePath));
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return true;
    }
  }
);
  for (  File input : files) {
    final String name=input.getName();
    final boolean copy=name.endsWith(".new");
    final String postfix=name.substring(0,name.length() - (copy ? ".new" : ".remove").length());
    final int pathSep=postfix.indexOf("$");
    final String baseName=pathSep == -1 ? postfix : postfix.substring(pathSep + 1);
    final File path=new File(workDir,(pathSep == -1 ? "src" : postfix.substring(0,pathSep).replace('-',File.separatorChar)));
    final File output=new File(path,baseName);
    if (copy) {
      FileUtil.copyContent(input,output);
    }
 else {
      FileUtil.delete(output);
    }
  }
}
