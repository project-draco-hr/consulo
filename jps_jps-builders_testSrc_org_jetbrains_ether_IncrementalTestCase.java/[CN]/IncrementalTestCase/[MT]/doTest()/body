{
  stripper.setRoot(FileUtil.toSystemIndependentName(getWorkDir() + File.separator));
  initLoggers();
  final String projectPath=getWorkDir() + File.separator + ".idea";
  final Project project=new Project();
  final Sdk jdk=project.createSdk("JavaSDK","IDEA jdk",System.getProperty("java.home"),null);
  final List<String> paths=new LinkedList<String>();
  paths.add(FileUtil.toSystemIndependentName(ClasspathBootstrap.getResourcePath(Object.class).getCanonicalPath()));
  jdk.setClasspath(paths);
  IdeaProjectLoader.loadFromPath(project,projectPath,"");
  final File dataStorageRoot=Paths.getDataStorageRoot(project);
  final ProjectDescriptor projectDescriptor=new ProjectDescriptor(project,new FSState(true),new ProjectTimestamps(dataStorageRoot),new BuildDataManager(dataStorageRoot,true));
  try {
    new IncProjectBuilder(projectDescriptor,BuilderRegistry.getInstance(),Collections.<String,String>emptyMap(),CanceledStatus.NULL).build(new AllProjectScope(project,Collections.<Artifact>emptySet(),true),false,true);
    modify();
    if (SystemInfo.isUnix) {
      Thread.sleep(1000L);
    }
    new IncProjectBuilder(projectDescriptor,BuilderRegistry.getInstance(),Collections.<String,String>emptyMap(),CanceledStatus.NULL).build(new AllProjectScope(project,Collections.<Artifact>emptySet(),false),true,false);
    final String expected=StringUtil.convertLineSeparators(FileUtil.loadFile(new File(getBaseDir() + ".log")));
    final String actual=StringUtil.convertLineSeparators(FileUtil.loadFile(new File(getWorkDir() + ".log")));
    assertEquals(expected,actual);
  }
  finally {
    projectDescriptor.release();
  }
}
