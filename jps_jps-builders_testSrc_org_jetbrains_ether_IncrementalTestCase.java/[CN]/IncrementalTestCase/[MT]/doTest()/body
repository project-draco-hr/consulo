{
  final String projectPath=getWorkDir() + File.separator + ".idea";
  initJdk("IDEA jdk");
  loadProject(projectPath);
  final TestJavaBuilderLogger javaBuilderLogger=new TestJavaBuilderLogger(FileUtil.toSystemIndependentName(getWorkDir() + File.separator));
  final ProjectDescriptor projectDescriptor=createProjectDescriptor(new BuildLoggingManager(new ArtifactBuilderLoggerImpl(),javaBuilderLogger));
  try {
    final IncProjectBuilder builder=createBuilder(projectDescriptor);
    doBuild(builder,new AllProjectScope(myProject,myJpsProject,Collections.<Artifact>emptySet(),true),false,false,true);
    modify();
    if (SystemInfo.isUnix) {
      Thread.sleep(1000L);
    }
    final IncProjectBuilder makeBuilder=createBuilder(projectDescriptor);
class MH implements MessageHandler {
      boolean myErrors=false;
      @Override public void processMessage(      final BuildMessage msg){
        if (msg.getKind() == BuildMessage.Kind.ERROR)         myErrors=true;
      }
    }
    final MH handler=new MH();
    makeBuilder.addMessageHandler(handler);
    makeBuilder.build(new AllProjectScope(myProject,myJpsProject,Collections.<Artifact>emptySet(),false),true,false,false);
    final ByteArrayOutputStream makeDump=new ByteArrayOutputStream();
    if (!handler.myErrors) {
      projectDescriptor.dataManager.getMappings().toStream(new PrintStream(makeDump));
    }
    makeDump.close();
    final String expected=StringUtil.convertLineSeparators(FileUtil.loadFile(new File(getBaseDir() + ".log")));
    final String actual=javaBuilderLogger.myLog.toString();
    assertEquals(expected,actual);
    if (!handler.myErrors) {
      createBuilder(projectDescriptor).build(new AllProjectScope(myProject,myJpsProject,Collections.<Artifact>emptySet(),true),false,true,false);
      final ByteArrayOutputStream rebuildDump=new ByteArrayOutputStream();
      projectDescriptor.dataManager.getMappings().toStream(new PrintStream(rebuildDump));
      rebuildDump.close();
      assertEquals(rebuildDump.toString(),makeDump.toString());
    }
  }
  finally {
    projectDescriptor.release();
  }
}
