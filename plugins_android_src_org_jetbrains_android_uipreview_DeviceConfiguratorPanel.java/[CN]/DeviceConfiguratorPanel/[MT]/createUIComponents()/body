{
  myQualifierOptionsPanel=new JPanel(new CardLayout());
  final JPanel leftPanel=new JPanel(new BorderLayout(5,5));
  myAvailableQualifiersList=new JBList();
  myAvailableQualifiersList.setMinimumSize(new Dimension(10,10));
  leftPanel.add(new JBLabel(AndroidBundle.message("android.layout.preview.edit.configuration.available.qualifiers.label")),BorderLayout.NORTH);
  leftPanel.add(new JBScrollPane(myAvailableQualifiersList,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER),BorderLayout.CENTER);
  final JPanel rightPabel=new JPanel(new BorderLayout(5,5));
  myChosenQualifiersList=new JBList();
  myChosenQualifiersList.setMinimumSize(new Dimension(10,10));
  rightPabel.add(new JBLabel(AndroidBundle.message("android.layout.preview.edit.configuration.choosen.qualifiers.label")),BorderLayout.NORTH);
  rightPabel.add(new JBScrollPane(myChosenQualifiersList,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER),BorderLayout.CENTER);
  final JPanel buttonsPanel=new JPanel(new VerticalFlowLayout(FlowLayout.CENTER,0,0,true,false));
  myAddQualifierButton=new JButton(">>");
  buttonsPanel.add(myAddQualifierButton);
  myRemoveQualifierButton=new JButton("<<");
  buttonsPanel.add(myRemoveQualifierButton);
  final int gap=5;
  final JPanel listsPanel=new JPanel(new AbstractLayoutManager(){
    @SuppressWarnings("NonPrivateFieldAccessedInSynchronizedContext") @Override public Dimension preferredLayoutSize(    Container target){
synchronized (target.getTreeLock()) {
        final Dimension leftPref=leftPanel.getPreferredSize();
        final Dimension rightPref=rightPabel.getPreferredSize();
        final Dimension middlePref=buttonsPanel.getPreferredSize();
        final Insets insets=target.getInsets();
        final int width=leftPref.width + middlePref.width + rightPref.width+ insets.left+ insets.right+ gap * 2;
        final int height=Math.max(leftPref.height,Math.max(rightPref.height,middlePref.height)) + insets.top + insets.bottom;
        return new Dimension(width,height);
      }
    }
    @SuppressWarnings("NonPrivateFieldAccessedInSynchronizedContext") @Override public void layoutContainer(    Container target){
synchronized (target.getTreeLock()) {
        final Insets insets=target.getInsets();
        int top=insets.top;
        int bottom=target.getHeight() - insets.bottom;
        int left=insets.left;
        int right=target.getWidth() - insets.right;
        final int middleWidth=buttonsPanel.getPreferredSize().width + gap * 2;
        final int listWidth=(right - left - middleWidth) / 2;
        final int height=bottom - top;
        leftPanel.setSize(listWidth,height);
        rightPabel.setSize(listWidth,height);
        buttonsPanel.setSize(middleWidth,height);
        leftPanel.setBounds(left,top,listWidth,height);
        rightPabel.setBounds(right - listWidth,top,listWidth,height);
        buttonsPanel.setBounds(left + listWidth + gap,top,middleWidth - gap * 2,height);
      }
    }
  }
);
  listsPanel.add(leftPanel);
  listsPanel.add(buttonsPanel);
  listsPanel.add(rightPabel);
  add(listsPanel,BorderLayout.CENTER);
  add(myQualifierOptionsPanel,BorderLayout.EAST);
}
