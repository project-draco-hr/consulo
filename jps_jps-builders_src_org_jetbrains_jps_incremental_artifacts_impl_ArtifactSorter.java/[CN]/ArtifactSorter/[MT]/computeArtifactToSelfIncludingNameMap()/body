{
  final Map<JpsArtifact,JpsArtifact> result=new HashMap<JpsArtifact,JpsArtifact>();
  final GraphGenerator<JpsArtifact> graph=createArtifactsGraph();
  for (  JpsArtifact artifact : graph.getNodes()) {
    final Iterator<JpsArtifact> in=graph.getIn(artifact);
    while (in.hasNext()) {
      JpsArtifact next=in.next();
      if (next.equals(artifact)) {
        result.put(artifact,artifact);
        break;
      }
    }
  }
  final DFSTBuilder<JpsArtifact> builder=new DFSTBuilder<JpsArtifact>(graph);
  builder.buildDFST();
  if (builder.isAcyclic() && result.isEmpty())   return Collections.emptyMap();
  final TIntArrayList sccs=builder.getSCCs();
  sccs.forEach(new TIntProcedure(){
    int myTNumber=0;
    public boolean execute(    int size){
      if (size > 1) {
        for (int j=0; j < size; j++) {
          final JpsArtifact artifact=builder.getNodeByTNumber(myTNumber + j);
          result.put(artifact,artifact);
        }
      }
      myTNumber+=size;
      return true;
    }
  }
);
  for (int i=0; i < graph.getNodes().size(); i++) {
    final JpsArtifact artifact=builder.getNodeByTNumber(i);
    if (!result.containsKey(artifact)) {
      final Iterator<JpsArtifact> in=graph.getIn(artifact);
      while (in.hasNext()) {
        final JpsArtifact next=result.get(in.next());
        if (next != null) {
          result.put(artifact,next);
        }
      }
    }
  }
  return result;
}
