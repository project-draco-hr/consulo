{
  final PsiType original=type;
  int dim=0;
  while (type instanceof PsiArrayType) {
    type=((PsiArrayType)type).getComponentType();
    dim++;
  }
  LookupItem item;
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)type).resolveGenerics();
    final PsiClass psiClass=classResolveResult.getElement();
    final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
    final String text=type.getCanonicalText();
    String typeString=text;
    if (text.indexOf('<') > 0 && text.endsWith(">")) {
      typeString=text.substring(0,text.indexOf('<'));
    }
    String s=text.substring(typeString.lastIndexOf('.') + 1);
    item=psiClass != null ? new PsiTypeLookupItem(psiClass,s) : new PsiTypeLookupItem(text,s);
    item.setAttribute(LookupItem.SUBSTITUTOR,substitutor);
  }
 else {
    item=new LookupItem(type,type.getPresentableText());
  }
  if (dim > 0) {
    final StringBuilder tail=new StringBuilder();
    for (int i=0; i < dim; i++) {
      tail.append("[]");
    }
    item.setAttribute(LookupItem.TAIL_TEXT_ATTR," " + tail.toString());
    item.setAttribute(LookupItem.TAIL_TEXT_SMALL_ATTR,"");
    item.setAttribute(LookupItem.BRACKETS_COUNT_ATTR,dim);
  }
  item.setAttribute(LookupItem.TYPE,original);
  return item;
}
