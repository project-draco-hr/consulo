{
  super(project,context,defaultPropertyValue,customization,true);
  ResourceBundleManager resourceBundleManager=null;
  try {
    resourceBundleManager=ResourceBundleManager.getManager(context);
    LOG.assertTrue(resourceBundleManager != null);
  }
 catch (  ResourceBundleManager.ResourceBundleNotFoundException e) {
    LOG.error(e);
  }
  myResourceBundleManager=resourceBundleManager;
  JavaExtensibilityData data=new JavaExtensibilityData();
  myExtensibilityPanel.setLayout(new BorderLayout());
  myExtensibilityPanel.add(data.myPanel,BorderLayout.CENTER);
  myJavaCodeInfoPanel=data.myJavaCodeInfoPanel;
  myPreviewPanel=data.myPreviewPanel;
  myHyperLinkPanel=data.myHyperLinkPanel;
  myResourceBundleSuggester=data.myResourceBundleSuggester;
  myPreviewLabel=data.myPreviewLabel;
  myLiteralExpression=literalExpression;
  myShowPreview=showPreview;
  myResourceBundleSuggester.setLayout(new BorderLayout());
  PsiManager psiManager=PsiManager.getInstance(myProject);
  PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
  PsiClass resourceBundle=myResourceBundleManager.getResourceBundle();
  myShowJavaCodeInfo=showJavaCodeInfo && myResourceBundleManager.canShowJavaCodeInfo();
  if (myShowJavaCodeInfo) {
    LOG.assertTrue(resourceBundle != null);
    myResourceBundleType=factory.createType(resourceBundle);
    @NonNls String defaultVarName="resourceBundle";
    PsiExpressionCodeFragment expressionCodeFragment=factory.createExpressionCodeFragment(defaultVarName,myLiteralExpression,myResourceBundleType,true);
    Document document=PsiDocumentManager.getInstance(myProject).getDocument(expressionCodeFragment);
    myRBEditorTextField=new EditorComboBox(document,myProject,StdFileTypes.JAVA);
    myResourceBundleSuggester.add(myRBEditorTextField,BorderLayout.CENTER);
    suggestAvailableResourceBundleExpressions();
    myRBEditorTextField.addDocumentListener(new DocumentAdapter(){
      public void documentChanged(      com.intellij.openapi.editor.event.DocumentEvent e){
        somethingChanged();
      }
    }
);
  }
  myHyperLinkPanel.setLayout(new BorderLayout());
  final String templateName=getTemplateName();
  if (templateName != null) {
    HyperlinkLabel link=new HyperlinkLabel(CodeInsightBundle.message("i18nize.dialog.template.link.label"));
    link.addHyperlinkListener(new HyperlinkListener(){
      public void hyperlinkUpdate(      HyperlinkEvent e){
        final FileTemplateConfigurable configurable=new FileTemplateConfigurable();
        final FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(templateName);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            configurable.setTemplate(template,null);
          }
        }
);
        boolean ok=ShowSettingsUtil.getInstance().editConfigurable(myPanel,configurable);
        if (ok) {
          somethingChanged();
          if (myShowJavaCodeInfo) {
            suggestAvailableResourceBundleExpressions();
          }
        }
      }
    }
);
    myHyperLinkPanel.add(link,BorderLayout.CENTER);
  }
  if (!myShowJavaCodeInfo) {
    myJavaCodeInfoPanel.setVisible(false);
  }
  if (!myShowPreview) {
    myPreviewPanel.setVisible(false);
  }
  init();
}
