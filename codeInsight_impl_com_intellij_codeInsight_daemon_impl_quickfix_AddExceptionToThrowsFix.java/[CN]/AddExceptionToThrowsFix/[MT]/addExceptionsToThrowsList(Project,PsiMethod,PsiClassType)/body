{
  final PsiMethod[] superMethods=getSuperMethods(targetMethod);
  boolean hasSuperMethodsWithoutExceptions=hasSuperMethodsWithoutExceptions(superMethods,unhandledExceptions);
  final boolean processSuperMethods;
  if (hasSuperMethodsWithoutExceptions && superMethods.length > 0) {
    int result=Messages.showYesNoCancelDialog(QuickFixBundle.message("add.exception.to.throws.inherited.method.warning.text",targetMethod.getName()),QuickFixBundle.message("add.exception.to.throws.inherited.method.warning.title"),Messages.getQuestionIcon());
    if (result == 0)     processSuperMethods=true;
 else     if (result == 1)     processSuperMethods=false;
 else     return;
  }
 else {
    processSuperMethods=false;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      if (!CodeInsightUtilBase.prepareFileForWrite(targetMethod.getContainingFile()))       return;
      if (processSuperMethods) {
        for (        PsiMethod superMethod : superMethods) {
          if (!CodeInsightUtilBase.prepareFileForWrite(superMethod.getContainingFile()))           return;
        }
      }
      try {
        processMethod(project,targetMethod,unhandledExceptions);
        if (processSuperMethods) {
          for (          PsiMethod superMethod : superMethods) {
            processMethod(project,superMethod,unhandledExceptions);
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
