{
  if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) {
    final String documentText=document.getText();
    if (ApplicationManager.getApplication().isInternal()) {
      String fileText=file.getText();
      LOG.error("commitDocument left PSI inconsistent; file len=" + myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() + "; doc len="+ document.getTextLength()+ "; doc.getText() == file.getText(): "+ Comparing.equal(fileText,documentText)+ ";\n file psi text="+ fileText+ ";\n doc text="+ documentText+ ";\n old psi file text="+ oldPsiText);
    }
 else {
      LOG.error("commitDocument left PSI inconsistent: " + file);
    }
    file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,Boolean.TRUE);
    try {
      BlockSupport blockSupport=BlockSupport.getInstance(file.getProject());
      final DiffLog diffLog=blockSupport.reparseRange(file,new TextRange(0,documentText.length()),documentText,createProgressIndicator());
      CodeStyleManager.getInstance(file.getProject()).performActionWithFormatterDisabled(new Runnable(){
        @Override public void run(){
synchronized (PsiLock.LOCK) {
            doActualPsiChange(file,diffLog);
          }
        }
      }
);
      if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) {
        LOG.error("PSI is broken beyond repair in: " + file);
      }
    }
  finally {
      file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,null);
    }
  }
}
