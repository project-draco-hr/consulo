{
  if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) {
    final String documentText=document.getText();
    String fileText=file.getText();
    LOG.error("commitDocument left PSI inconsistent: " + file + "; file len="+ myTreeElementBeingReparsedSoItWontBeCollected.getTextLength()+ "; doc len="+ document.getTextLength()+ "; doc.getText() == file.getText(): "+ Comparing.equal(fileText,documentText),new Attachment("file psi text",fileText),new Attachment("old text",documentText));
    file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,Boolean.TRUE);
    try {
      BlockSupport blockSupport=BlockSupport.getInstance(file.getProject());
      final DiffLog diffLog=blockSupport.reparseRange(file,new TextRange(0,documentText.length()),documentText,createProgressIndicator(),myTreeElementBeingReparsedSoItWontBeCollected.getText());
      doActualPsiChange(file,diffLog);
      if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) {
        LOG.error("PSI is broken beyond repair in: " + file);
      }
    }
  finally {
      file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,null);
    }
  }
}
