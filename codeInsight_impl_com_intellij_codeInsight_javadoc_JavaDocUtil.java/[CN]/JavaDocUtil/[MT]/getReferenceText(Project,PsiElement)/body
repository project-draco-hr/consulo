{
  if (element instanceof PsiPackage) {
    return ((PsiPackage)element).getQualifiedName();
  }
 else   if (element instanceof PsiClass) {
    final String refText=((PsiClass)element).getQualifiedName();
    if (refText != null)     return refText;
    return ((PsiClass)element).getName();
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    String name=field.getName();
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      return getReferenceText(project,aClass) + "#" + name;
    }
 else {
      return "#" + name;
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    String name=method.getName();
    StringBuffer buffer=new StringBuffer();
    PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      buffer.append(getReferenceText(project,aClass));
    }
    buffer.append("#");
    buffer.append(name);
    buffer.append("(");
    PsiParameter[] parms=method.getParameterList().getParameters();
    CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(project);
    boolean spaceBeforeComma=styleSettings.SPACE_BEFORE_COMMA;
    boolean spaceAfterComma=styleSettings.SPACE_AFTER_COMMA;
    for (int i=0; i < parms.length; i++) {
      PsiParameter parm=parms[i];
      String typeText=parm.getType().getCanonicalText();
      buffer.append(typeText);
      if (i < parms.length - 1) {
        if (spaceBeforeComma) {
          buffer.append(" ");
        }
        buffer.append(",");
        if (spaceAfterComma) {
          buffer.append(" ");
        }
      }
    }
    buffer.append(")");
    return buffer.toString();
  }
 else   if (element instanceof PsiParameter) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
    if (method != null) {
      return getReferenceText(project,method) + "#" + ((PsiParameterList)element.getParent()).getParameterIndex((PsiParameter)element);
    }
  }
  return null;
}
