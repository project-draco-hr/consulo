{
  int parenthIndex=memberRefText.indexOf('(');
  if (parenthIndex < 0) {
    String name=memberRefText;
    PsiField field=aClass.findFieldByName(name,true);
    if (field != null)     return field.getNavigationElement();
    PsiClass inner=aClass.findInnerClassByName(name,true);
    if (inner != null)     return inner.getNavigationElement();
    PsiMethod[] methods=aClass.getAllMethods();
    for (    PsiMethod method : methods) {
      if (method.getName().equals(name))       return method.getNavigationElement();
    }
    return null;
  }
 else {
    String name=memberRefText.substring(0,parenthIndex).trim();
    int rparenIndex=memberRefText.lastIndexOf(')');
    if (rparenIndex == -1)     return null;
    String parmsText=memberRefText.substring(parenthIndex + 1,rparenIndex).trim();
    StringTokenizer tokenizer=new StringTokenizer(parmsText.replaceAll("[*]",""),",");
    PsiType[] types=new PsiType[tokenizer.countTokens()];
    int i=0;
    PsiElementFactory factory=aClass.getManager().getElementFactory();
    while (tokenizer.hasMoreTokens()) {
      String parmText=tokenizer.nextToken().trim();
      try {
        Matcher typeMatcher=ourTypePattern.matcher(parmText);
        String typeText=parmText;
        if (typeMatcher.find()) {
          typeText=parmText.substring(0,typeMatcher.start());
        }
        PsiType type=factory.createTypeFromText(typeText,context);
        types[i++]=type;
      }
 catch (      IncorrectOperationException e) {
        LOG.info(e);
      }
    }
    PsiMethod[] methods=aClass.findMethodsByName(name,true);
    MethodsLoop:     for (    PsiMethod method : methods) {
      PsiParameter[] parms=method.getParameterList().getParameters();
      if (parms.length != types.length)       continue;
      for (int k=0; k < parms.length; k++) {
        PsiParameter parm=parms[k];
        if (types[k] != null && !TypeConversionUtil.erasure(parm.getType()).getCanonicalText().equals(types[k].getCanonicalText()) && !parm.getType().getCanonicalText().equals(types[k].getCanonicalText())) {
          continue MethodsLoop;
        }
      }
      int hashIndex=memberRefText.indexOf('#',rparenIndex);
      if (hashIndex != -1) {
        int parameterNumber=Integer.parseInt(memberRefText.substring(hashIndex + 1));
        if (parameterNumber < parms.length)         return method.getParameterList().getParameters()[parameterNumber].getNavigationElement();
      }
      return method.getNavigationElement();
    }
    return null;
  }
}
