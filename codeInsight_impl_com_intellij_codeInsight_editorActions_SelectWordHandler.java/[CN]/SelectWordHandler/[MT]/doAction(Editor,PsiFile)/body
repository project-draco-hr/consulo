{
  CharSequence text=editor.getDocument().getCharsSequence();
  if (file instanceof PsiCompiledElement) {
    file=(PsiFile)((PsiCompiledElement)file).getMirror();
  }
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.select.word");
  int caretOffset=editor.getCaretModel().getOffset();
  if (caretOffset > 0 && caretOffset < editor.getDocument().getTextLength() && !Character.isJavaIdentifierPart(text.charAt(caretOffset)) && Character.isJavaIdentifierPart(text.charAt(caretOffset - 1))) {
    caretOffset--;
  }
  PsiElement element=findElementAt(file,caretOffset);
  if (element instanceof PsiWhiteSpace && caretOffset > 0) {
    PsiElement anotherElement=findElementAt(file,caretOffset - 1);
    if (!(anotherElement instanceof PsiWhiteSpace)) {
      element=anotherElement;
    }
  }
  while (element instanceof PsiWhiteSpace) {
    nextParent:     while (element.getNextSibling() == null) {
      final PsiElement parent=element.getParent();
      final PsiElement[] children=parent.getChildren();
      if (children[children.length - 1] == element) {
        element=parent;
      }
 else {
        element=parent;
        break nextParent;
      }
    }
    element=element.getNextSibling();
    caretOffset=element.getTextRange().getStartOffset();
  }
  TextRange selectionRange=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  TextRange newRange=null;
  int textLength=editor.getDocument().getTextLength();
  while (element != null && !(element instanceof PsiFile)) {
    newRange=advance(selectionRange,element,text,caretOffset,editor);
    if (newRange != null) {
      break;
    }
    element=getUpperElement(element,selectionRange);
  }
  if (newRange == null) {
    newRange=new TextRange(0,textLength);
  }
  if (!editor.getSelectionModel().hasSelection() || newRange.contains(selectionRange)) {
    selectionRange=newRange;
  }
  editor.getSelectionModel().setSelection(selectionRange.getStartOffset(),selectionRange.getEndOffset());
}
