{
  final Map<Module,Set<Charset>> map=new THashMap<Module,Set<Charset>>();
  final Map<VirtualFile,Charset> mappings=EncodingProjectManager.getInstance(myProject).getAllMappings();
  ProjectFileIndex index=ProjectRootManager.getInstance(myProject).getFileIndex();
  final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
  for (  Map.Entry<VirtualFile,Charset> entry : mappings.entrySet()) {
    final VirtualFile file=entry.getKey();
    final Charset charset=entry.getValue();
    if (file == null || charset == null || (!file.isDirectory() && !compilerManager.isCompilableFileType(file.getFileType())) || !index.isInSourceContent(file))     continue;
    final Module module=index.getModuleForFile(file);
    if (module == null)     continue;
    Set<Charset> set=map.get(module);
    if (set == null) {
      set=new LinkedHashSet<Charset>();
      map.put(module,set);
      final VirtualFile sourceRoot=index.getSourceRootForFile(file);
      VirtualFile current=file.getParent();
      Charset parentCharset=null;
      while (current != null) {
        final Charset currentCharset=mappings.get(current);
        if (currentCharset != null) {
          parentCharset=currentCharset;
        }
        if (current.equals(sourceRoot)) {
          break;
        }
        current=current.getParent();
      }
      if (parentCharset != null) {
        set.add(parentCharset);
      }
    }
    set.add(charset);
  }
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    for (    VirtualFile file : ModuleRootManager.getInstance(module).getSourceRoots(true)) {
      Charset encoding=EncodingProjectManager.getInstance(myProject).getEncoding(file,true);
      if (encoding != null) {
        Set<Charset> charsets=map.get(module);
        if (charsets == null) {
          charsets=new LinkedHashSet<Charset>();
          map.put(module,charsets);
        }
        charsets.add(encoding);
      }
    }
  }
  return map;
}
