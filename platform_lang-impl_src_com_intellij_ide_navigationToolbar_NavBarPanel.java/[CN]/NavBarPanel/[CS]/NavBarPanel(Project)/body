{
  super(new FlowLayout(FlowLayout.LEFT,5,0),UIUtil.isUnderGTKLookAndFeel() ? Color.WHITE : UIUtil.getListBackground());
  myProject=project;
  myModel=new NavBarModel(myProject);
  myUpdateQueue=new MergingUpdateQueue("NavBar",Registry.intValue("navbar.updateMergeTime"),true,MergingUpdateQueue.ANY_COMPONENT,project,null);
  PopupHandler.installPopupHandler(this,IdeActions.GROUP_PROJECT_VIEW_POPUP,ActionPlaces.NAVIGATION_BAR);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      shiftFocus(-1);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      shiftFocus(1);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      shiftFocus(-myModel.getSelectedIndex());
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_HOME,0),WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      shiftFocus(myModel.size() - 1 - myModel.getSelectedIndex());
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_END,0),WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myModel.getSelectedIndex() != -1) {
        ctrlClick(myModel.getSelectedIndex());
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),WHEN_FOCUSED);
  final ActionListener dblClickAction=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myModel.getSelectedIndex() != -1) {
        doubleClick(myModel.getSelectedIndex());
      }
    }
  }
;
  registerKeyboardAction(dblClickAction,KeyStroke.getKeyStroke(KeyEvent.VK_F4,0),WHEN_FOCUSED);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      final Object o=myModel.getSelectedValue();
      navigateInsideBar(optimizeTarget(o));
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),WHEN_FOCUSED);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      myModel.setSelectedIndex(-1);
      ToolWindowManager.getInstance(project).activateEditorComponent();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),WHEN_FOCUSED);
  addFocusListener(new FocusListener(){
    public void focusGained(    final FocusEvent e){
      updateItems();
      if (!isInFloatingMode() && myList.size() > 0) {
        myContextObject=myList.get(myList.size() - 1);
      }
 else {
        myContextObject=null;
      }
    }
    public void focusLost(    final FocusEvent e){
      if (myProject.isDisposed()) {
        myContextObject=null;
        hideHint();
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          processFocusLost(e);
        }
      }
);
    }
  }
);
  installBorder(-1,false);
  myCopyPasteDelegator=new CopyPasteDelegator(myProject,NavBarPanel.this){
    @NotNull protected PsiElement[] getSelectedElements(){
      final PsiElement element=getSelectedElement(PsiElement.class);
      return element == null ? PsiElement.EMPTY_ARRAY : new PsiElement[]{element};
    }
  }
;
  queueModelUpdateFromFocus();
  queueRebuildUi();
}
