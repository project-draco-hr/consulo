{
  if (CommonDataKeys.PROJECT.is(dataId)) {
    return !myProject.isDisposed() ? myProject : null;
  }
  if (LangDataKeys.MODULE.is(dataId)) {
    final Module module=getSelectedElement(Module.class);
    if (module != null && !module.isDisposed())     return module;
    final PsiElement element=getSelectedElement(PsiElement.class);
    if (element != null) {
      return ModuleUtilCore.findModuleForPsiElement(element);
    }
    return null;
  }
  if (LangDataKeys.MODULE_CONTEXT.is(dataId)) {
    final PsiDirectory directory=getSelectedElement(PsiDirectory.class);
    if (directory != null) {
      final VirtualFile dir=directory.getVirtualFile();
      if (ProjectRootsUtil.isModuleContentRoot(dir,myProject)) {
        return ModuleUtilCore.findModuleForPsiElement(directory);
      }
    }
    return null;
  }
  if (LangDataKeys.PSI_ELEMENT.is(dataId)) {
    final PsiElement element=getSelectedElement(PsiElement.class);
    return element != null && element.isValid() ? element : null;
  }
  if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
    final List<PsiElement> elements=getSelectedElements(PsiElement.class);
    if (elements == null || elements.isEmpty())     return null;
    List<PsiElement> result=new ArrayList<PsiElement>();
    for (    PsiElement element : elements) {
      if (element != null && element.isValid()) {
        result.add(element);
      }
    }
    return result.isEmpty() ? null : result.toArray(new PsiElement[result.size()]);
  }
  if (PlatformDataKeys.VIRTUAL_FILE_ARRAY.is(dataId)) {
    PsiElement[] psiElements=(PsiElement[])getData(LangDataKeys.PSI_ELEMENT_ARRAY.getName());
    if (psiElements == null)     return null;
    Set<VirtualFile> files=new LinkedHashSet<VirtualFile>();
    for (    PsiElement element : psiElements) {
      PsiFile file=element.getContainingFile();
      if (file != null) {
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile != null) {
          files.add(virtualFile);
        }
      }
 else       if (element instanceof PsiFileSystemItem) {
        files.add(((PsiFileSystemItem)element).getVirtualFile());
      }
    }
    return !files.isEmpty() ? VfsUtilCore.toVirtualFileArray(files) : null;
  }
  if (PlatformDataKeys.NAVIGATABLE_ARRAY.is(dataId)) {
    final List<Navigatable> elements=getSelectedElements(Navigatable.class);
    return elements == null || elements.isEmpty() ? null : elements.toArray(new Navigatable[elements.size()]);
  }
  if (PlatformDataKeys.CONTEXT_COMPONENT.is(dataId)) {
    return this;
  }
  if (PlatformDataKeys.CUT_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (PlatformDataKeys.COPY_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (PlatformDataKeys.PASTE_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    return getSelectedElement(Module.class) != null ? myDeleteModuleProvider : new DeleteHandler.DefaultDeleteProvider();
  }
  if (LangDataKeys.IDE_VIEW.is(dataId)) {
    return myIdeView;
  }
  return null;
}
