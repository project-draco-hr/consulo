{
  if (isNodePopupShowing()) {
    cancelPopup();
    if (myModel.getSelectedIndex() == index) {
      return;
    }
  }
  final Object object=myModel.getElement(index);
  final java.util.List<Object> objects=myModel.getChildren(object);
  if (!objects.isEmpty()) {
    final Object[] siblings=new Object[objects.size()];
    final Icon[] icons=new Icon[objects.size()];
    for (int i=0; i < objects.size(); i++) {
      siblings[i]=objects.get(i);
      icons[i]=NavBarPresentation.getIcon(siblings[i],false);
    }
    final NavBarItem item=getItem(index);
    final BaseListPopupStep<Object> step;
    if (Registry.is("navbar.newpopup")) {
      myNodePopup=null;
      myNodeHint=new NavBarPopup(this,siblings,index < myModel.size() - 1 ? objects.indexOf(myModel.getElement(index + 1)) : 0);
      if (item != null && item.isShowing()) {
        myNodeHint.show(item);
      }
    }
 else {
      myNodeHint=null;
      step=new BaseListPopupStep<Object>("",siblings,icons){
        public boolean isSpeedSearchEnabled(){
          return true;
        }
        @NotNull public String getTextFor(        final Object value){
          return NavBarPresentation.getPresentableText(value,null);
        }
        public boolean isSelectable(        Object value){
          return true;
        }
        public PopupStep onChosen(        final Object selectedValue,        final boolean finalChoice){
          return doFinalStep(new Runnable(){
            public void run(){
              navigateInsideBar(optimizeTarget(selectedValue));
            }
          }
);
        }
      }
;
      step.setDefaultOptionIndex(index < myModel.size() - 1 ? objects.indexOf(myModel.getElement(index + 1)) : 0);
      myNodePopup=new ListPopupImpl(step){
        protected ListCellRenderer getListElementRenderer(){
          return new NavBarListCellRenderer(myProject,NavBarPanel.this);
        }
        @Override public void cancel(        InputEvent e){
          super.cancel(e);
        }
      }
;
      myNodePopup.registerAction("left",KeyEvent.VK_LEFT,0,new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          myNodePopup.goBack();
          shiftFocus(-1);
          restorePopup();
        }
      }
);
      myNodePopup.registerAction("right",KeyEvent.VK_RIGHT,0,new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          myNodePopup.goBack();
          shiftFocus(1);
          restorePopup();
        }
      }
);
      if (!isValid()) {
        validate();
      }
      if (item != null && item.isShowing() && step.getValues().size() > 0) {
        myNodePopup.showUnderneathOf(item);
      }
    }
  }
}
