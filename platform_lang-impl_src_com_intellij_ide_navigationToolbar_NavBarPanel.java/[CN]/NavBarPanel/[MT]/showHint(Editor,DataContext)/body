{
  myUpdateQueue.queueModelUpdate(dataContext);
  myUpdateQueue.queueAfterAll(new Runnable(){
    @Override public void run(){
      if (myModel.isEmpty())       return;
      myHint=new LightweightHint(NavBarPanel.this){
        public void hide(){
          super.hide();
          cancelPopup();
          Disposer.dispose(NavBarPanel.this);
        }
      }
;
      myHint.setForceShowAsPopup(true);
      myHint.setFocusRequestor(NavBarPanel.this);
      final KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
      if (editor == null) {
        myContextComponent=PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext);
        getHintContainerShowPoint().doWhenDone(new AsyncResult.Handler<RelativePoint>(){
          @Override public void run(          RelativePoint relativePoint){
            final Component owner=focusManager.getFocusOwner();
            final Component cmp=relativePoint.getComponent();
            if (cmp instanceof JComponent && cmp.isShowing()) {
              myHint.show((JComponent)cmp,relativePoint.getPoint().x,relativePoint.getPoint().y,owner instanceof JComponent ? (JComponent)owner : null,new HintHint(relativePoint.getComponent(),relativePoint.getPoint()));
            }
          }
        }
);
      }
 else {
        myHintContainer=editor.getContentComponent();
        getHintContainerShowPoint().doWhenDone(new AsyncResult.Handler<RelativePoint>(){
          @Override public void run(          RelativePoint rp){
            Point p=rp.getPointOn(myHintContainer).getPoint();
            final HintHint hintInfo=new HintHint(editor,p);
            HintManagerImpl.getInstanceImpl().showEditorHint(myHint,editor,p,HintManager.HIDE_BY_ESCAPE,0,true,hintInfo);
          }
        }
);
      }
      activatePopupOnLastElement();
    }
  }
,NavBarUpdateQueue.ID.SHOW_HINT);
}
