{
  updateList();
  if (myModel.isEmpty())   return;
  myHint=new LightweightHint(this){
    public void hide(){
      super.hide();
      cancelPopup();
    }
  }
;
  myHint.setForceLightweightPopup(true);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      hideHint();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),WHEN_FOCUSED);
  final KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  final Window focusedWindow=focusManager.getFocusedWindow();
  if (editor == null) {
    final RelativePoint relativePoint=JBPopupFactory.getInstance().guessBestPopupLocation(dataContext);
    final Component owner=focusManager.getFocusOwner();
    final Component cmp=relativePoint.getComponent();
    if (cmp instanceof JComponent) {
      myHint.show((JComponent)cmp,relativePoint.getPoint().x,relativePoint.getPoint().y,owner instanceof JComponent ? (JComponent)owner : null);
    }
  }
 else {
    final Container container=focusedWindow != null ? focusedWindow : editor.getContentComponent();
    final Point p=AbstractPopup.getCenterOf(container,this);
    p.y=container.getHeight() / 4;
    HintManagerImpl.getInstanceImpl().showEditorHint(myHint,editor,p,HintManagerImpl.HIDE_BY_ESCAPE,0,true);
  }
  select();
}
