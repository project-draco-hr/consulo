{
  updateModel();
  if (myModel.isEmpty())   return;
  myHint=new LightweightHint(this){
    public void hide(){
      super.hide();
      cancelPopup();
    }
  }
;
  myHint.setForceShowAsPopup(true);
  myHint.setFocusRequestor(this);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      hideHint();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),WHEN_FOCUSED);
  final KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  if (editor == null) {
    myContextComponent=PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext);
    getHintContainerShowPoint().doWhenDone(new AsyncResult.Handler<RelativePoint>(){
      @Override public void run(      RelativePoint relativePoint){
        final Component owner=focusManager.getFocusOwner();
        final Component cmp=relativePoint.getComponent();
        if (cmp instanceof JComponent && cmp.isShowing()) {
          myHint.show((JComponent)cmp,relativePoint.getPoint().x,relativePoint.getPoint().y,owner instanceof JComponent ? (JComponent)owner : null,new HintHint(relativePoint.getComponent(),relativePoint.getPoint()));
        }
      }
    }
);
  }
 else {
    myHintContainer=editor.getContentComponent();
    getHintContainerShowPoint().doWhenDone(new AsyncResult.Handler<RelativePoint>(){
      @Override public void run(      RelativePoint rp){
        Point p=rp.getPointOn(myHintContainer).getPoint();
        HintManagerImpl.getInstanceImpl().showEditorHint(myHint,editor,p,HintManagerImpl.HIDE_BY_ESCAPE,0,true,new HintHint(editor,p));
      }
    }
);
  }
  select();
}
