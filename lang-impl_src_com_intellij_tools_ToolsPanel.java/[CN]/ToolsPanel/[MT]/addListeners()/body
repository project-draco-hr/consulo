{
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      update();
    }
  }
);
  myTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2 && myTable.columnAtPoint(e.getPoint()) != 0) {
        editSelected();
      }
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ToolEditorDialog dlg=new ToolEditorDialog(ToolsPanel.this);
      Tool tool=new Tool();
      tool.setUseConsole(true);
      tool.setFilesSynchronizedAfterRun(true);
      tool.setShownInMainMenu(true);
      tool.setShownInEditor(true);
      tool.setShownInProjectViews(true);
      tool.setShownInSearchResultsPopup(true);
      tool.setEnabled(true);
      dlg.setData(tool,ToolManager.getInstance().getGroups(getTools()));
      dlg.show();
      if (dlg.isOK()) {
        addRow(new ToolWrapper(dlg.getData()));
        int lastIndex=myModel.getRowCount() - 1;
        myTable.setRowSelectionInterval(lastIndex,lastIndex);
      }
      myTable.requestFocus();
    }
  }
);
  myCopyButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int index=myTable.getSelectionModel().getMinSelectionIndex();
      if (index == -1 || myTable.getSelectionModel().getMaxSelectionIndex() != index)       return;
      ToolWrapper toolWrapper=myModel.getToolWrapper(index);
      Tool originalTool=toolWrapper.getTool();
      ToolEditorDialog dlg=new ToolEditorDialog(ToolsPanel.this);
      Tool toolCopy=new Tool();
      toolCopy.copyFrom(originalTool);
      dlg.setData(toolCopy,ToolManager.getInstance().getGroups(getTools()));
      dlg.show();
      if (dlg.isOK()) {
        addRow(new ToolWrapper(dlg.getData()));
        int lastIndex=myModel.getRowCount() - 1;
        myTable.getSelectionModel().setSelectionInterval(lastIndex,lastIndex);
      }
      myTable.requestFocus();
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      editSelected();
      myTable.requestFocus();
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      removeSelected();
    }
  }
);
  myMoveUpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myModel.setSynchronize(false);
      TableUtil.moveSelectedItemsUp(myTable);
      myModel.setSynchronize(true);
      myTable.requestFocus();
    }
  }
);
  myMoveDownButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myModel.setSynchronize(false);
      TableUtil.moveSelectedItemsDown(myTable);
      myModel.setSynchronize(true);
      myTable.requestFocus();
    }
  }
);
  InputMap inputMap=myTable.getInputMap();
  @NonNls Object o=inputMap.get(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0));
  if (o == null) {
    o="enable_disable";
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),o);
  }
  myTable.getActionMap().put(o,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing())       return;
      ListSelectionModel selectionModel=myTable.getSelectionModel();
      for (int i=0; i < myModel.getRowCount(); i++) {
        if (selectionModel.isSelectedIndex(i)) {
          Boolean aValue=(Boolean)myModel.getValueAt(i,0);
          myModel.setValueAt(aValue.booleanValue() ? Boolean.FALSE : Boolean.TRUE,i,0);
        }
      }
    }
  }
);
  o=inputMap.get(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0));
  if (o == null) {
    o="edit_selected";
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),o);
  }
  myTable.getActionMap().put(o,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      editSelected();
    }
  }
);
  o=inputMap.get(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0));
  if (o == null) {
    o="remove_selected";
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),o);
  }
  myTable.getActionMap().put(o,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      removeSelected();
    }
  }
);
}
