{
  myModifiableModel=ApplicationManager.getApplication().runReadAction(new Computable<ModifiableRootModel>(){
    public ModifiableRootModel compute(){
      return ModuleRootManager.getInstance(myModule).getModifiableModel();
    }
  }
);
  final ModuleConfigurationStateImpl moduleConfigurationState=new ModuleConfigurationStateImpl(myModule.getProject(),new DefaultModulesProvider(myModule.getProject())){
    @Override public ModifiableRootModel getRootModel(){
      return myModifiableModel;
    }
    @Override public FacetsProvider getFacetsProvider(){
      return DefaultFacetsProvider.INSTANCE;
    }
  }
;
  myEditor=new CommonContentEntriesEditor(myModule.getName(),moduleConfigurationState,myCanMarkSources,myCanMarkTestSources){
    @Override protected List<ContentEntry> addContentEntries(    VirtualFile[] files){
      List<ContentEntry> entries=super.addContentEntries(files);
      addContentEntryPanels(entries.toArray(new ContentEntry[entries.size()]));
      return entries;
    }
  }
;
  JComponent component=ApplicationManager.getApplication().runReadAction(new Computable<JComponent>(){
    public JComponent compute(){
      return myEditor.createComponent();
    }
  }
);
  myTopPanel.add(component,BorderLayout.CENTER);
}
