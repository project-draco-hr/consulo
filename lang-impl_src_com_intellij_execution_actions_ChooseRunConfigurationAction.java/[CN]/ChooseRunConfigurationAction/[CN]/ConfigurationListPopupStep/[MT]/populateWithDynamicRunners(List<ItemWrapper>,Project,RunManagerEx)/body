{
  final DataContext dataContext=DataManager.getInstance().getDataContext();
  final ConfigurationContext context=new ConfigurationContext(dataContext);
  final RunnerAndConfigurationSettingsImpl existing=context.findExisting();
  if (existing == null) {
    final List<RuntimeConfigurationProducer> producers=PreferedProducerFind.findPreferedProducers(context.getLocation(),context);
    if (producers == null)     return null;
    Collections.sort(producers,new Comparator<RuntimeConfigurationProducer>(){
      public int compare(      final RuntimeConfigurationProducer p1,      final RuntimeConfigurationProducer p2){
        return p1.getConfigurationType().getDisplayName().compareTo(p2.getConfigurationType().getDisplayName());
      }
    }
);
    int i=1;
    for (    final RuntimeConfigurationProducer producer : producers) {
      final RunnerAndConfigurationSettingsImpl configuration=producer.getConfiguration();
      if (configuration != null) {
        final ItemWrapper wrapper=new ItemWrapper(null){
          @Override public Icon getIcon(){
            return IconLoader.getTransparentIcon(ExecutionUtil.getConfigurationIcon(project,configuration),0.3f);
          }
          @Override public String getText(){
            return producers.size() == 1 ? String.format("&%s. %s",Integer.toString(getMnemonic()),configuration.getName()) : String.format("&%s. %s (%s)",Integer.toString(getMnemonic()),configuration.getName(),producer.getConfigurationType().getDisplayName());
          }
          @Override public void perform(          @NotNull Project project,          @NotNull Executor executor,          @NotNull DataContext context){
            manager.setTemporaryConfiguration(configuration);
            RunManagerEx.getInstanceEx(project).setSelectedConfiguration(configuration);
            ExecutionUtil.executeConfiguration(project,configuration,executor,DataManager.getInstance().getDataContext());
          }
          @Override public PopupStep getNextStep(          @NotNull final Project project,          @NotNull final ChooseRunConfigurationAction action){
            return new ConfigurationActionsStep(project,action,configuration);
          }
          @Override public boolean hasActions(){
            return true;
          }
        }
;
        wrapper.setDynamic(true);
        wrapper.setMnemonic(i);
        result.add(wrapper);
        i++;
      }
    }
  }
 else {
    final ItemWrapper wrapper=ItemWrapper.wrap(project,existing,true);
    wrapper.setMnemonic(1);
    result.add(wrapper);
  }
  return existing;
}
