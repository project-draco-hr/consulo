{
  for (  final VirtualFile file : files) {
    for (    final ContentEntry contentEntry : myEntryToEditorMap.keySet()) {
      final VirtualFile contentEntryFile=contentEntry.getFile();
      if (contentEntryFile == null) {
        continue;
      }
      if (contentEntryFile.equals(file)) {
        throw new Exception("Content root \"" + file.getPresentableUrl() + "\" already exists");
      }
      if (VfsUtil.isAncestor(contentEntryFile,file,true)) {
        throw new Exception("Content root being added \"" + file.getPresentableUrl() + "\"\nis located below existing content root \""+ contentEntryFile.getPresentableUrl()+ "\".\nContent entries should not intersect.");
      }
      if (VfsUtil.isAncestor(file,contentEntryFile,true)) {
        throw new Exception("Content root being added \"" + file.getPresentableUrl() + "\"\ndominates existing content root \""+ contentEntryFile.getPresentableUrl()+ "\".\nContent entries should not intersect.");
      }
    }
    final Module[] modules=myModulesProvider.getModules();
    for (    final Module module : modules) {
      if (myModuleName.equals(module.getName())) {
        continue;
      }
      ModuleRootModel rootModel=myModulesProvider.getRootModel(module);
      LOG.assertTrue(rootModel != null);
      final VirtualFile[] moduleContentRoots=rootModel.getContentRoots();
      for (      VirtualFile moduleContentRoot : moduleContentRoots) {
        if (file.equals(moduleContentRoot)) {
          throw new Exception("Content root \"" + file.getPresentableUrl() + "\" already defined for module \""+ module.getName()+ "\".\nTwo modules in a project cannot share the same content root.");
        }
      }
    }
  }
}
