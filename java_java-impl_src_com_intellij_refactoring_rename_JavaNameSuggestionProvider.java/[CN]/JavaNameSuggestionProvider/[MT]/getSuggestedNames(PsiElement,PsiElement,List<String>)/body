{
  String initialName=UsageViewUtil.getShortName(element);
  SuggestedNameInfo info=suggestNamesForElement(element);
  String parameterName=null;
  String superMethodName=null;
  if (nameSuggestionContext != null) {
    final PsiElement nameSuggestionContextParent=nameSuggestionContext.getParent();
    if (nameSuggestionContextParent != null) {
      final PsiElement parentOfParent=nameSuggestionContextParent.getParent();
      if (parentOfParent instanceof PsiExpressionList) {
        final PsiExpressionList expressionList=(PsiExpressionList)parentOfParent;
        final PsiElement parent=expressionList.getParent();
        if (parent instanceof PsiCallExpression) {
          final PsiMethod method=((PsiCallExpression)parent).resolveMethod();
          if (method != null) {
            final PsiParameter[] parameters=method.getParameterList().getParameters();
            final PsiExpression[] expressions=expressionList.getExpressions();
            for (int i=0; i < expressions.length; i++) {
              PsiExpression expression=expressions[i];
              if (expression == nameSuggestionContextParent) {
                if (i < parameters.length) {
                  parameterName=parameters[i].getName();
                }
                break;
              }
            }
          }
        }
      }
 else       if (parentOfParent instanceof PsiParameterList) {
        final PsiElement parent3=parentOfParent.getParent();
        if (parent3 instanceof PsiMethod) {
          final String propName=PropertyUtil.getPropertyName((PsiMethod)parent3);
          if (propName != null) {
            parameterName=propName;
          }
          if (nameSuggestionContextParent instanceof PsiParameter) {
            superMethodName=getSuperMethodName((PsiParameter)nameSuggestionContextParent,(PsiMethod)parent3);
          }
        }
      }
    }
  }
  final String[] strings=info != null ? info.names : ArrayUtil.EMPTY_STRING_ARRAY;
  ArrayList<String> list=new ArrayList<String>(Arrays.asList(strings));
  final Set<String> alreadyDefined=new HashSet<String>();
  final JavaRecursiveElementVisitor visitor=new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      final PsiElement psiElement=expression.resolve();
      if (psiElement instanceof PsiVariable) {
        alreadyDefined.add(((PsiVariable)psiElement).getName());
      }
      super.visitReferenceExpression(expression);
    }
  }
;
  if (element instanceof PsiLocalVariable) {
    final PsiCodeBlock block=PsiTreeUtil.getParentOfType(element,PsiCodeBlock.class);
    if (block != null) {
      block.accept(visitor);
    }
  }
 else   if (element instanceof PsiParameter) {
    ((PsiParameter)element).getDeclarationScope().accept(visitor);
  }
 else   if (element instanceof PsiField) {
    element.getParent().accept(visitor);
  }
  list.removeAll(alreadyDefined);
  final String[] properlyCased=suggestProperlyCasedName(element);
  if (!list.contains(initialName)) {
    list.add(0,initialName);
  }
 else {
    int i=list.indexOf(initialName);
    list.remove(i);
    list.add(0,initialName);
  }
  if (properlyCased != null) {
    for (    String properlyCasedSuggestion : properlyCased) {
      list.add(1,properlyCasedSuggestion);
    }
  }
  if (parameterName != null && !list.contains(parameterName)) {
    list.add(parameterName);
  }
  if (superMethodName != null && !list.contains(superMethodName)) {
    list.add(0,superMethodName);
  }
  ContainerUtil.removeDuplicates(list);
  result.addAll(list);
  return info;
}
