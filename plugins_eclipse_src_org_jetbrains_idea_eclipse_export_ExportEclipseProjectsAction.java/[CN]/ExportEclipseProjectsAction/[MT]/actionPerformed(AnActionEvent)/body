{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null)   return;
  project.save();
  List<Module> modules=new ArrayList<Module>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (!EclipseClasspathStorageProvider.ID.equals(ClasspathStorage.getStorageType(module)) && EclipseClasspathStorageProvider.isCompatible(ModuleRootManager.getInstance(module))) {
      modules.add(module);
    }
  }
  if (modules.isEmpty()) {
    Messages.showInfoMessage(project,EclipseBundle.message("eclipse.export.nothing.to.do"),EclipseBundle.message("eclipse.export.dialog.title"));
    return;
  }
  final ExportEclipseProjectsDialog dialog=new ExportEclipseProjectsDialog(project,modules);
  dialog.show();
  if (dialog.isOK()) {
    if (dialog.isLink()) {
      for (      Module module : dialog.getSelectedModules()) {
        ClasspathStorage.setStorageType(module,EclipseClasspathStorageProvider.ID);
      }
    }
 else {
      for (      Module module : dialog.getSelectedModules()) {
        final ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
        final String storageRoot=ClasspathStorage.getStorageRootFromOptions(module);
        try {
          final Element classpathEleemnt=new Element(EclipseXml.CLASSPATH_TAG);
          final EclipseClasspathWriter classpathWriter=new EclipseClasspathWriter(model);
          classpathWriter.writeClasspath(classpathEleemnt,null);
          final File classpathFile=new File(storageRoot,EclipseXml.CLASSPATH_FILE);
          if (!classpathFile.exists()) {
            if (!classpathFile.createNewFile())             continue;
          }
          EclipseJDOMUtil.output(new Document(classpathEleemnt),classpathFile);
          final Element ideaSpecific=new Element(IdeaXml.COMPONENT_TAG);
          if (classpathWriter.writeIDEASpecificClasspath(ideaSpecific)) {
            final File emlFile=new File(storageRoot,module.getName() + EclipseXml.IDEA_SETTINGS_POSTFIX);
            if (!emlFile.exists()) {
              if (!emlFile.createNewFile())               continue;
            }
            EclipseJDOMUtil.output(new Document(ideaSpecific),emlFile);
          }
          try {
            final Document doc;
            if (module.getModuleType() instanceof JavaModuleType) {
              doc=JDOMUtil.loadDocument(getClass().getResource("template.project.xml"));
            }
 else {
              doc=JDOMUtil.loadDocument(getClass().getResource("template.empty.project.xml"));
            }
            final Element nameElement=doc.getRootElement().getChild(EclipseXml.NAME_TAG);
            nameElement.setText(module.getName());
            final File projectFile=new File(storageRoot,EclipseXml.PROJECT_FILE);
            if (!projectFile.exists()) {
              if (!projectFile.createNewFile())               continue;
            }
            EclipseJDOMUtil.output(doc,projectFile);
          }
 catch (          JDOMException e1) {
            LOG.error(e1);
          }
        }
 catch (        ConversionException e1) {
          LOG.error(e1);
        }
catch (        IOException e1) {
          LOG.error(e1);
        }
catch (        WriteExternalException e1) {
          LOG.error(e1);
        }
 finally {
          model.dispose();
        }
      }
    }
    project.save();
  }
}
