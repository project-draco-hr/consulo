{
  createFileInCommand("conflicting",BASE);
  runHgOnProjectRepo("commit","-m","initial version");
  createFileInCommand("conflicting",HEAD_ONE);
  runHgOnProjectRepo("commit","-m","first head");
  runHgOnProjectRepo("up","--clean","0");
  createFileInCommand("conflicting",HEAD_TWO);
  runHgOnProjectRepo("commit","-m","second head");
  runHgOnProjectRepo("--config","ui.merge=internal:merge","merge");
  VirtualFile repoFile=makeFile(myProjectDir);
  HgResolveCommand.MergeData data=new HgResolveCommand(myProject).getResolveData(repoFile,repoFile.findChild("conflicting"));
  Assert.assertEquals(data.getBase(),BASE.getBytes(),"The base merge information should correspond to the common ancestor");
  Assert.assertEquals(data.getLocal(),HEAD_TWO.getBytes(),"The local merge information should correspond to the original parent before the merge");
  Assert.assertEquals(data.getOther(),HEAD_ONE.getBytes(),"The 'remote' merge information should correspond to the merged in head");
}
