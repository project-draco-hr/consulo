{
  JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
  String name=getImportedName();
  if (name == null)   return true;
  NameHint nameHint=processor.getHint(NameHint.KEY);
  GrCodeReferenceElement ref=getImportReference();
  if (ref == null)   return true;
  String qName=ref.getCanonicalText();
  if (isStatic()) {
    if (qName.indexOf('.') <= 0)     return true;
    final int i=qName.lastIndexOf('.');
    if (i > 0) {
      final String classQName=qName.substring(0,i);
      PsiClass clazz=facade.findClass(classQName,getResolveScope());
      if (clazz != null) {
        final String refName=ref.getReferenceName();
        if (nameHint == null || name.equals(nameHint.getName(state))) {
          final PsiField field=clazz.findFieldByName(refName,false);
          if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
            if (!processor.execute(field,state))             return false;
          }
          for (          PsiMethod method : clazz.findMethodsByName(refName,false)) {
            if (method.hasModifierProperty(PsiModifier.STATIC)) {
              if (!processor.execute(method,state))               return false;
            }
          }
        }
        final PsiMethod getter=GroovyPropertyUtils.findPropertyGetter(clazz,refName,true,true);
        if (getter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameByGetterName(nameHint.getName(state),true)))) {
          if (!processor.execute(getter,state))           return false;
        }
        final PsiMethod setter=GroovyPropertyUtils.findPropertySetter(clazz,refName,true,true);
        if (setter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameBySetterName(nameHint.getName(state))))) {
          if (!processor.execute(setter,state))           return false;
        }
      }
    }
  }
 else {
    if (nameHint == null || name.equals(nameHint.getName(state))) {
      PsiClass clazz=facade.findClass(qName,getResolveScope());
      if (clazz != null) {
        if (!processor.execute(clazz,state))         return false;
      }
    }
  }
  return true;
}
