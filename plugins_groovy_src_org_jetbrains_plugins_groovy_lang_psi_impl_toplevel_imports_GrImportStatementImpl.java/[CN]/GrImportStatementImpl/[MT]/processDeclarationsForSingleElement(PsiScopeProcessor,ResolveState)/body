{
  String name=getImportedName();
  if (name == null)   return true;
  NameHint nameHint=processor.getHint(NameHint.KEY);
  GrCodeReferenceElement ref=getImportReference();
  if (ref == null)   return true;
  if (isStatic()) {
    GrCodeReferenceElement qualifier=ref.getQualifier();
    if (qualifier == null)     return true;
    PsiElement resolved=qualifier.resolve();
    if (!(resolved instanceof PsiClass))     return true;
    PsiClass clazz=(PsiClass)resolved;
    state=state.put(ResolverProcessor.RESOLVE_CONTEXT,this);
    final String refName=ref.getReferenceName();
    if (nameHint == null || name.equals(nameHint.getName(state))) {
      final PsiField field=clazz.findFieldByName(refName,false);
      if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
        if (!processor.execute(field,state))         return false;
      }
      for (      PsiMethod method : clazz.findMethodsByName(refName,false)) {
        if (method.hasModifierProperty(PsiModifier.STATIC)) {
          if (!processor.execute(method,state))           return false;
        }
      }
    }
    final PsiMethod getter=GroovyPropertyUtils.findPropertyGetter(clazz,refName,true,true);
    if (getter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameByGetterName(nameHint.getName(state),true)))) {
      if (!processor.execute(getter,state))       return false;
    }
    final PsiMethod setter=GroovyPropertyUtils.findPropertySetter(clazz,refName,true,true);
    if (setter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameBySetterName(nameHint.getName(state))))) {
      if (!processor.execute(setter,state))       return false;
    }
  }
 else {
    if (nameHint == null || name.equals(nameHint.getName(state))) {
      final PsiElement resolved=ref.resolve();
      if (resolved instanceof PsiClass) {
        if (!isAliasedImport() && isFromSamePackage((PsiClass)resolved))         return true;
        state=state.put(ResolverProcessor.RESOLVE_CONTEXT,this);
        if (!processor.execute(resolved,state))         return false;
      }
    }
  }
  return true;
}
