{
  if (PsiTreeUtil.isAncestor(this,place,false)) {
    return true;
  }
  if (processor instanceof ResolverProcessor)   ((ResolverProcessor)processor).setCurrentFileResolveContext(this);
  try {
    JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
    if (isOnDemand()) {
      GrCodeReferenceElement ref=getImportReference();
      if (ref != null) {
        if (isStatic()) {
          final PsiElement resolved=ref.resolve();
          if (resolved instanceof PsiClass) {
            final PsiClass clazz=(PsiClass)resolved;
            if (clazz != null) {
              if (!processAllMembers(processor,clazz))               return false;
            }
          }
        }
 else {
          String qName=PsiUtil.getQualifiedReferenceText(ref);
          if (qName != null) {
            PsiPackage aPackage=facade.findPackage(qName);
            if (aPackage != null) {
              if (!aPackage.processDeclarations(processor,state,lastParent,place))               return false;
            }
          }
        }
      }
    }
 else {
      String name=getImportedName();
      if (name != null) {
        NameHint nameHint=processor.getHint(NameHint.KEY);
        GrCodeReferenceElement ref=getImportReference();
        if (ref != null) {
          String qName=ref.getCanonicalText();
          if (qName != null && qName.indexOf('.') > 0) {
            if (!isStatic()) {
              if (nameHint == null || name.equals(nameHint.getName(state))) {
                PsiClass clazz=facade.findClass(qName,getResolveScope());
                if (clazz != null && !processor.execute(clazz,state))                 return false;
              }
            }
 else {
              final int i=qName.lastIndexOf('.');
              if (i > 0) {
                final String classQName=qName.substring(0,i);
                PsiClass clazz=facade.findClass(classQName,getResolveScope());
                if (clazz != null) {
                  final String refName=ref.getReferenceName();
                  if (nameHint == null || name.equals(nameHint.getName(state))) {
                    final PsiField field=clazz.findFieldByName(refName,false);
                    if (field != null && field.hasModifierProperty(PsiModifier.STATIC) && !processor.execute(field,state)) {
                      return false;
                    }
                    for (                    PsiMethod method : clazz.findMethodsByName(refName,false)) {
                      if (method.hasModifierProperty(PsiModifier.STATIC) && !processor.execute(method,state))                       return false;
                    }
                  }
                  if (processor instanceof AccessorResolverProcessor) {
                    final PsiMethod getter=GroovyPropertyUtils.findPropertyGetter(clazz,refName,true,true);
                    if (getter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameByGetterName(nameHint.getName(state),true)))) {
                      processor.execute(getter,state);
                    }
                    final PsiMethod setter=GroovyPropertyUtils.findPropertySetter(clazz,refName,true,true);
                    if (setter != null && (nameHint == null || name.equals(GroovyPropertyUtils.getPropertyNameBySetterName(nameHint.getName(state))))) {
                      processor.execute(setter,state);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return true;
  }
  finally {
    if (processor instanceof ResolverProcessor)     ((ResolverProcessor)processor).setCurrentFileResolveContext(null);
  }
}
