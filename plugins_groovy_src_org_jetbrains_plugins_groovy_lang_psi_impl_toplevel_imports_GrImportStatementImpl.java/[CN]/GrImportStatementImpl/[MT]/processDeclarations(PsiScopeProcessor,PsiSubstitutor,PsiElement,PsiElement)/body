{
  if (isOnDemand()) {
    GrCodeReferenceElement ref=getImportReference();
    if (ref != null) {
      String qName=PsiUtil.getQualifiedReferenceText(ref);
      if (qName != null) {
        if (!isStatic()) {
          PsiPackage aPackage=getManager().findPackage(qName);
          if (aPackage != null) {
            if (!aPackage.processDeclarations(processor,substitutor,lastParent,place))             return false;
          }
        }
 else {
          PsiClass clazz=getManager().findClass(qName,getResolveScope());
          if (clazz != null) {
            if (!processAllMembers(processor,substitutor,clazz))             return false;
          }
        }
      }
    }
  }
 else {
    String name=getImportedName();
    if (name != null) {
      NameHint nameHint=processor.getHint(NameHint.class);
      if (nameHint == null || name.equals(nameHint.getName())) {
        GrCodeReferenceElement ref=getImportReference();
        if (ref != null) {
          String qName=PsiUtil.getQualifiedReferenceText(ref);
          if (qName != null) {
            if (!isStatic()) {
              PsiClass clazz=getManager().findClass(qName,getResolveScope());
              if (clazz != null && !processor.execute(clazz,substitutor))               return false;
            }
 else {
              final int i=qName.lastIndexOf('.');
              if (i > 0) {
                final String classQName=qName.substring(0,i);
                PsiClass clazz=getManager().findClass(classQName,getResolveScope());
                if (clazz != null) {
                  if (nameHint == null) {
                    return processAllMembers(processor,substitutor,clazz);
                  }
 else {
                    final String refName=ref.getReferenceName();
                    final PsiField field=clazz.findFieldByName(refName,false);
                    if (field != null && field.hasModifierProperty(PsiModifier.STATIC) && !processor.execute(field,substitutor))                     return false;
                    for (                    PsiMethod method : clazz.findMethodsByName(refName,false)) {
                      if (method.hasModifierProperty(PsiModifier.STATIC) && !processor.execute(method,substitutor))                       return false;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return true;
}
