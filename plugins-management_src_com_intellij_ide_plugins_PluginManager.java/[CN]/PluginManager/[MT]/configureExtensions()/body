{
  final List<Element> extensionPoints=new ArrayList<Element>();
  final List<Element> extensions=new ArrayList<Element>();
  try {
    final InputStream stdExtensionsStream=PluginManager.class.getResourceAsStream("/standard-extensions.xml");
    final Document stdExtensions=JDOMUtil.loadDocument(stdExtensionsStream);
    final Element root=stdExtensions.getRootElement();
    final List<Element> epRoots=JDOMUtil.getChildrenFromAllNamespaces(root,"extensionPoints");
    for (    Element epRoot : epRoots) {
      for (      Object o : epRoot.getChildren()) {
        extensionPoints.add((Element)o);
      }
    }
    final List<Element> extensionRoots=JDOMUtil.getChildrenFromAllNamespaces(root,"extensions");
    for (    Element extRoot : extensionRoots) {
      for (      Object o : extRoot.getChildren()) {
        extensions.add((Element)o);
      }
    }
  }
 catch (  JDOMException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  Extensions.setLogProvider(new IdeaLogProvider());
  Extensions.registerAreaClass(AREA_IDEA_PROJECT,null);
  Extensions.registerAreaClass(AREA_IDEA_MODULE,AREA_IDEA_PROJECT);
  Extensions.getRootArea().registerAreaExtensionsAndPoints(RootPluginDescriptor.INSTANCE,extensionPoints,extensions);
  Extensions.getRootArea().getExtensionPoint(Extensions.AREA_LISTENER_EXTENSION_POINT).registerExtension(new AreaListener(){
    public void areaCreated(    String areaClass,    AreaInstance areaInstance){
      if (AREA_IDEA_PROJECT.equals(areaClass) || AREA_IDEA_MODULE.equals(areaClass)) {
        final ExtensionsArea area=Extensions.getArea(areaInstance);
        area.registerAreaExtensionsAndPoints(RootPluginDescriptor.INSTANCE,extensionPoints,extensions);
      }
    }
    public void areaDisposing(    String areaClass,    AreaInstance areaInstance){
    }
  }
,LoadingOrder.FIRST);
}
