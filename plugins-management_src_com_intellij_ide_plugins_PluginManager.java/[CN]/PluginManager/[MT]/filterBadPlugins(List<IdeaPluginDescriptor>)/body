{
  final Map<PluginId,IdeaPluginDescriptor> idToDescriptorMap=new HashMap<PluginId,IdeaPluginDescriptor>();
  final StringBuffer message=new StringBuffer();
  boolean pluginsWithoutIdFound=false;
  for (Iterator<IdeaPluginDescriptor> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptor descriptor=it.next();
    final PluginId id=descriptor.getPluginId();
    if (idToDescriptorMap.containsKey(id)) {
      if (message.length() > 0) {
        message.append("\n");
      }
      message.append(IdeBundle.message("message.duplicate.plugin.id"));
      message.append(id);
      it.remove();
    }
 else {
      idToDescriptorMap.put(id,descriptor);
    }
  }
  for (Iterator<IdeaPluginDescriptor> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptor pluginDescriptor=it.next();
    final PluginId[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
    for (    final PluginId dependentPluginId : dependentPluginIds) {
      if (!idToDescriptorMap.containsKey(dependentPluginId)) {
        if (message.length() > 0) {
          message.append("\n");
        }
        message.append(IdeBundle.message("error.required.plugin.not.found",pluginDescriptor.getPluginId(),dependentPluginId));
        it.remove();
        break;
      }
    }
  }
  if (pluginsWithoutIdFound) {
    if (message.length() > 0) {
      message.append("\n");
    }
    message.append(IdeBundle.message("error.plugins.without.id.found"));
  }
  if (message.length() > 0) {
    message.insert(0,IdeBundle.message("error.problems.found.loading.plugins"));
    return message.toString();
  }
  for (Iterator<IdeaPluginDescriptor> iterator=result.iterator(); iterator.hasNext(); ) {
    IdeaPluginDescriptor descriptor=iterator.next();
    if (!shouldLoadPlugins() || !shouldLoadPlugin(descriptor)) {
      iterator.remove();
    }
  }
  return null;
}
