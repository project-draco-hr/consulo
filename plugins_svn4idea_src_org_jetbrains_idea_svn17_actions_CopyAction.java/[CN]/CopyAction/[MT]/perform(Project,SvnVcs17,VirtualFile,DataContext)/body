{
  CopyDialog dialog=new CopyDialog(project,true,new File(file.getPath()));
  dialog.show();
  if (dialog.isOK()) {
    final String dstURL=dialog.getToURL();
    final SVNRevision revision=dialog.getRevision();
    final String comment=dialog.getComment();
    final Ref<Exception> exception=new Ref<Exception>();
    final boolean isSrcFile=dialog.isCopyFromWorkingCopy();
    final File srcFile=new File(dialog.getCopyFromPath());
    final SVNURL srcUrl;
    final SVNURL dstSvnUrl;
    final SVNURL parentUrl;
    try {
      final SVNWCClient wcClient=activeVcs.createWCClient();
      srcUrl=SVNURL.parseURIEncoded(dialog.getCopyFromUrl());
      dstSvnUrl=SVNURL.parseURIEncoded(dstURL);
      parentUrl=dstSvnUrl.removePathTail();
      if (!dirExists(project,parentUrl,wcClient)) {
        int rc=Messages.showYesNoDialog(project,"The repository path '" + parentUrl + "' does not exist. Would you like to create it?","Branch or Tag",Messages.getQuestionIcon());
        if (rc == 1) {
          return;
        }
      }
    }
 catch (    SVNException e) {
      throw new VcsException(e);
    }
    Runnable copyCommand=new Runnable(){
      public void run(){
        try {
          ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
          SVNCopyClient client=activeVcs.createCopyClient();
          if (progress != null) {
            progress.setText(SvnBundle.message("progress.text.copy.to",dstURL));
            client.setEventHandler(new CopyEventHandler(progress));
          }
          checkCreateDir(parentUrl,activeVcs,comment);
          final SVNCopySource[] copySource=new SVNCopySource[]{isSrcFile ? new SVNCopySource(revision,revision,srcFile) : new SVNCopySource(revision,revision,srcUrl)};
          SVNCommitInfo result=client.doCopy(copySource,dstSvnUrl,false,true,true,comment,null);
          if (result != null && result != SVNCommitInfo.NULL) {
            WindowManager.getInstance().getStatusBar(project).setInfo(SvnBundle.message("status.text.comitted.revision",result.getNewRevision()));
          }
        }
 catch (        Exception e) {
          exception.set(e);
        }
      }
    }
;
    ProgressManager.getInstance().runProcessWithProgressSynchronously(copyCommand,SvnBundle.message("progress.title.copy"),false,project);
    if (!exception.isNull()) {
      throw new VcsException(exception.get());
    }
  }
}
