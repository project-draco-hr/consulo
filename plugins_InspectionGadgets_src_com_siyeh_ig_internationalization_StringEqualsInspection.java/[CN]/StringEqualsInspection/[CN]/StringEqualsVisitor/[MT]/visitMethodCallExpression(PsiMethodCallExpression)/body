{
  super.visitMethodCallExpression(expression);
  if (!MethodCallUtils.isEqualsCall(expression)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  final PsiType parameterType=parameters[0].getType();
  if (!TypeUtils.isJavaLangObject(parameterType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (!"java.lang.String".equals(className)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (NonNlsUtils.isNonNlsAnnotated(qualifier)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  if (NonNlsUtils.isNonNlsAnnotated(arguments[0])) {
    return;
  }
  registerMethodCallError(expression);
}
