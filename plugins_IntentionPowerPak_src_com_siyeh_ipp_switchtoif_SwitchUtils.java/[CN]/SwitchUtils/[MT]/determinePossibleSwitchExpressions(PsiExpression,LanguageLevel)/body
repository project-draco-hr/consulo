{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (expression == null) {
    return null;
  }
  if (languageLevel.compareTo(LanguageLevel.JDK_1_7) >= 0) {
    final PsiExpression jdk17Expression=determinePossibleStringSwitchExpression(expression);
    if (jdk17Expression != null) {
      return jdk17Expression;
    }
  }
  if (!(expression instanceof PsiBinaryExpression)) {
    return null;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
  final PsiJavaToken sign=binaryExpression.getOperationSign();
  final IElementType operation=sign.getTokenType();
  final PsiExpression lhs=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return determinePossibleSwitchExpressions(lhs,languageLevel);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    if (canBeCaseLabel(lhs,languageLevel)) {
      return rhs;
    }
 else     if (canBeCaseLabel(rhs,languageLevel)) {
      return lhs;
    }
  }
  return null;
}
