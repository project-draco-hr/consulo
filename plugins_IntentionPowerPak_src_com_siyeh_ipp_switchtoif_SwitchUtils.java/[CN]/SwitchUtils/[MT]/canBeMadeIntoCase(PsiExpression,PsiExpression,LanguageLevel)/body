{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (languageLevel.compareTo(LanguageLevel.JDK_1_7) >= 0) {
    final PsiExpression stringCaseExpression=determinePossibleStringSwitchExpression(expression);
    if (EquivalenceChecker.expressionsAreEquivalent(caseExpression,stringCaseExpression)) {
      return true;
    }
  }
  if (!(expression instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
  final PsiJavaToken sign=binaryExpression.getOperationSign();
  final IElementType operation=sign.getTokenType();
  final PsiExpression lOperand=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return canBeMadeIntoCase(lOperand,caseExpression,languageLevel) && canBeMadeIntoCase(rhs,caseExpression,languageLevel);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    return (canBeCaseLabel(lOperand,languageLevel) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,rhs)) || (canBeCaseLabel(rhs,languageLevel) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,lOperand));
  }
 else {
    return false;
  }
}
