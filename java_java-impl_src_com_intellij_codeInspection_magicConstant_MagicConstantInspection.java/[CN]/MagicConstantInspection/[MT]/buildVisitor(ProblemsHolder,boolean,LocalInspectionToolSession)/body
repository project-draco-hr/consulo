{
  checkAnnotationsJarAttached(session);
  return new JavaElementVisitor(){
    @Override public void visitCallExpression(    PsiCallExpression callExpression){
      checkCall(callExpression,holder);
    }
    @Override public void visitAssignmentExpression(    PsiAssignmentExpression expression){
      PsiExpression r=expression.getRExpression();
      if (r == null)       return;
      PsiExpression l=expression.getLExpression();
      if (!(l instanceof PsiReferenceExpression))       return;
      PsiElement resolved=((PsiReferenceExpression)l).resolve();
      if (!(resolved instanceof PsiModifierListOwner))       return;
      PsiModifierListOwner owner=(PsiModifierListOwner)resolved;
      PsiType type=expression.getType();
      checkExpression(r,owner,type,holder);
    }
    @Override public void visitReturnStatement(    PsiReturnStatement statement){
      PsiExpression value=statement.getReturnValue();
      if (value == null)       return;
      PsiMethod method=PsiTreeUtil.getParentOfType(statement,PsiMethod.class);
      if (method == null)       return;
      checkExpression(value,method,value.getType(),holder);
    }
    @Override public void visitNameValuePair(    PsiNameValuePair pair){
      PsiAnnotationMemberValue value=pair.getValue();
      if (!(value instanceof PsiExpression))       return;
      PsiReference ref=pair.getReference();
      if (ref == null)       return;
      PsiMethod method=(PsiMethod)ref.resolve();
      if (method == null)       return;
      checkExpression((PsiExpression)value,method,method.getReturnType(),holder);
    }
    @Override public void visitBinaryExpression(    PsiBinaryExpression expression){
      IElementType tokenType=expression.getOperationTokenType();
      if (tokenType != JavaTokenType.EQEQ && tokenType != JavaTokenType.NE)       return;
      PsiExpression l=expression.getLOperand();
      PsiExpression r=expression.getROperand();
      if (r == null)       return;
      checkBinary(l,r);
      checkBinary(r,l);
    }
    private void checkBinary(    PsiExpression l,    PsiExpression r){
      if (l instanceof PsiReference) {
        PsiElement resolved=((PsiReference)l).resolve();
        if (resolved instanceof PsiModifierListOwner) {
          checkExpression(r,(PsiModifierListOwner)resolved,getType((PsiModifierListOwner)resolved),holder);
        }
      }
 else       if (l instanceof PsiMethodCallExpression) {
        PsiMethod method=((PsiMethodCallExpression)l).resolveMethod();
        if (method != null) {
          checkExpression(r,method,method.getReturnType(),holder);
        }
      }
    }
  }
;
}
