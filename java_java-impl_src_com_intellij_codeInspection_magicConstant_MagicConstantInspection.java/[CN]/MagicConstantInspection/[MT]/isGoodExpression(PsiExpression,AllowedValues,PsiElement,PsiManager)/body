{
  expression=PsiUtil.deparenthesizeExpression(expression);
  if (expression == null)   return true;
  if (expression instanceof PsiConditionalExpression) {
    PsiExpression thenExpression=((PsiConditionalExpression)expression).getThenExpression();
    boolean thenAllowed=thenExpression == null || isAllowed(scope,thenExpression,allowedValues,manager);
    if (!thenAllowed)     return false;
    PsiExpression elseExpression=((PsiConditionalExpression)expression).getElseExpression();
    return elseExpression == null || isAllowed(scope,elseExpression,allowedValues,manager);
  }
  if (isOneOf(expression,allowedValues,manager))   return true;
  if (allowedValues.canBeOred) {
    PsiExpression zero=getLiteralExpression(expression,manager,"0");
    if (same(expression,zero,manager))     return true;
    PsiExpression mOne=getLiteralExpression(expression,manager,"-1");
    if (same(expression,mOne,manager))     return true;
    if (expression instanceof PsiPolyadicExpression) {
      IElementType tokenType=((PsiPolyadicExpression)expression).getOperationTokenType();
      if (JavaTokenType.OR.equals(tokenType) || JavaTokenType.AND.equals(tokenType)) {
        for (        PsiExpression operand : ((PsiPolyadicExpression)expression).getOperands()) {
          if (!isAllowed(scope,operand,allowedValues,manager))           return false;
        }
        return true;
      }
    }
    if (expression instanceof PsiPrefixExpression && JavaTokenType.TILDE.equals(((PsiPrefixExpression)expression).getOperationTokenType())) {
      PsiExpression operand=((PsiPrefixExpression)expression).getOperand();
      return operand == null || isAllowed(scope,operand,allowedValues,manager);
    }
  }
  PsiElement resolved=null;
  if (expression instanceof PsiReference) {
    resolved=((PsiReference)expression).resolve();
  }
 else   if (expression instanceof PsiCallExpression) {
    resolved=((PsiCallExpression)expression).resolveMethod();
  }
  AllowedValues allowedForRef;
  if (resolved instanceof PsiModifierListOwner && (allowedForRef=getAllowedValues((PsiModifierListOwner)resolved,getType((PsiModifierListOwner)resolved),null)) != null && allowedForRef.isSubsetOf(allowedValues,manager))   return true;
  return PsiType.NULL.equals(expression.getType());
}
