{
  expression=PsiUtil.deparenthesizeExpression(expression);
  if (expression == null)   return true;
  if (expression instanceof PsiConditionalExpression) {
    PsiExpression thenExpression=((PsiConditionalExpression)expression).getThenExpression();
    boolean thenAllowed=thenExpression == null || isAllowed(scope,thenExpression,allowedValues,manager);
    if (!thenAllowed)     return false;
    PsiExpression elseExpression=((PsiConditionalExpression)expression).getElseExpression();
    return elseExpression == null || isAllowed(scope,elseExpression,allowedValues,manager);
  }
  if (isOneOf(expression,allowedValues,manager))   return true;
  if (allowedValues.canBeOred) {
    if (expression instanceof PsiPolyadicExpression && JavaTokenType.OR.equals(((PsiPolyadicExpression)expression).getOperationTokenType())) {
      for (      PsiExpression operand : ((PsiPolyadicExpression)expression).getOperands()) {
        if (!isAllowed(scope,operand,allowedValues,manager))         return false;
      }
      return true;
    }
    PsiExpression zero=JavaPsiFacade.getElementFactory(manager.getProject()).createExpressionFromText("0",expression);
    if (same(expression,zero,manager))     return true;
    PsiExpression mOne=JavaPsiFacade.getElementFactory(manager.getProject()).createExpressionFromText("-1",expression);
    if (same(expression,mOne,manager))     return true;
  }
  PsiElement resolved=null;
  if (expression instanceof PsiReference) {
    resolved=((PsiReference)expression).resolve();
  }
 else   if (expression instanceof PsiCallExpression) {
    resolved=((PsiCallExpression)expression).resolveMethod();
  }
  AllowedValues allowedForRef;
  if (resolved instanceof PsiModifierListOwner && (allowedForRef=getAllowedValues((PsiModifierListOwner)resolved,getType((PsiModifierListOwner)resolved),null)) != null && Comparing.equal(allowedValues,allowedForRef))   return true;
  return PsiType.NULL.equals(expression.getType());
}
