{
  final Project project=file.getProject();
  PsiClass event=JavaPsiFacade.getInstance(project).findClass("java.awt.event.InputEvent",GlobalSearchScope.allScope(project));
  if (event == null)   return;
  PsiMethod[] methods=event.findMethodsByName("getModifiers",false);
  if (methods.length != 1)   return;
  PsiMethod getModifiers=methods[0];
  PsiAnnotation annotation=ExternalAnnotationsManager.getInstance(project).findExternalAnnotation(getModifiers,MagicConstant.class.getName());
  if (annotation != null)   return;
  final VirtualFile virtualFile=PsiUtilCore.getVirtualFile(getModifiers);
  if (virtualFile == null)   return;
  final List<OrderEntry> entries=ProjectRootManager.getInstance(project).getFileIndex().getOrderEntriesForFile(virtualFile);
  Sdk jdk=null;
  for (  OrderEntry orderEntry : entries) {
    if (orderEntry instanceof JdkOrderEntry) {
      jdk=((JdkOrderEntry)orderEntry).getJdk();
      if (jdk != null)       break;
    }
  }
  if (jdk == null)   return;
  final Sdk finalJdk=jdk;
  String path=finalJdk.getHomePath();
  String text="No IDEA annotations attached to the JDK " + finalJdk.getName() + (path == null ? "" : " (" + FileUtil.toSystemDependentName(path) + ")")+ ", some issues will not be found";
  holder.registerProblem(file,text,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new LocalQuickFix(){
    @NotNull @Override public String getName(){
      return "Attach annotations";
    }
    @NotNull @Override public String getFamilyName(){
      return getName();
    }
    @Override public void applyFix(    @NotNull Project project,    @NotNull ProblemDescriptor descriptor){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          SdkModificator modificator=finalJdk.getSdkModificator();
          JavaSdkImpl.attachJdkAnnotations(modificator);
          modificator.commitChanges();
        }
      }
);
    }
  }
);
}
