{
  PsiAnnotationMemberValue[] allowedValues;
  final boolean canBeOred;
  if (TypeConversionUtil.getTypeRank(type) <= TypeConversionUtil.LONG_RANK) {
    PsiAnnotationMemberValue intValues=magic.findAttributeValue("intValues");
    allowedValues=intValues instanceof PsiArrayInitializerMemberValue ? ((PsiArrayInitializerMemberValue)intValues).getInitializers() : PsiAnnotationMemberValue.EMPTY_ARRAY;
    if (allowedValues.length == 0) {
      PsiAnnotationMemberValue orValue=magic.findAttributeValue("flags");
      allowedValues=orValue instanceof PsiArrayInitializerMemberValue ? ((PsiArrayInitializerMemberValue)orValue).getInitializers() : PsiAnnotationMemberValue.EMPTY_ARRAY;
      canBeOred=true;
    }
 else {
      canBeOred=false;
    }
  }
 else   if (type.equals(PsiType.getJavaLangString(element.getManager(),GlobalSearchScope.allScope(element.getProject())))) {
    PsiAnnotationMemberValue strValuesAttr=magic.findAttributeValue("stringValues");
    allowedValues=strValuesAttr instanceof PsiArrayInitializerMemberValue ? ((PsiArrayInitializerMemberValue)strValuesAttr).getInitializers() : PsiAnnotationMemberValue.EMPTY_ARRAY;
    canBeOred=false;
  }
 else {
    return null;
  }
  if (allowedValues.length != 0) {
    return new AllowedValues(allowedValues,canBeOred);
  }
  PsiAnnotationMemberValue[] values=readFromClass("valuesFromClass",magic,type);
  boolean ored=false;
  if (values == null) {
    values=readFromClass("flagsFromClass",magic,type);
    ored=true;
  }
  if (values == null)   return null;
  return new AllowedValues(values,ored);
}
