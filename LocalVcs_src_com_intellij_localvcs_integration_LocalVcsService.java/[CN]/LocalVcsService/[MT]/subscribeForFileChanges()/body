{
  myFileListener=new VirtualFileAdapter(){
    @Override public void fileCreated(    VirtualFileEvent e){
      if (notInteresting(e))       return;
      create(e.getFile());
    }
    @Override public void contentsChanged(    VirtualFileEvent e){
      if (notInteresting(e))       return;
      changeFileContent(e.getFile());
    }
    @Override public void beforePropertyChange(    VirtualFilePropertyEvent e){
      if (notInteresting(e))       return;
      if (!e.getPropertyName().equals(VirtualFile.PROP_NAME))       return;
      rename(e.getFile(),(String)e.getNewValue());
    }
    @Override public void fileMoved(    VirtualFileMoveEvent e){
      if (isMovedFromOutside(e) && isMovedToOutside(e))       return;
      if (isMovedFromOutside(e)) {
        if (notInteresting(e))         return;
        create(e.getFile());
      }
 else {
        VirtualFile f=new VirtualFileWithParent(e.getOldParent(),e.getFile());
        if (isMovedToOutside(e)) {
          delete(f);
        }
 else {
          move(f,e.getNewParent());
        }
      }
    }
    @Override public void beforeFileDeletion(    VirtualFileEvent e){
      if (notInteresting(e))       return;
      delete(e.getFile());
    }
    private boolean notInteresting(    VirtualFileEvent e){
      return !myFileFilter.isFileAllowed(e.getFile());
    }
    private boolean isMovedFromOutside(    VirtualFileMoveEvent e){
      return !myFileFilter.isUnderContentRoots(e.getOldParent());
    }
    private boolean isMovedToOutside(    final VirtualFileMoveEvent e){
      return !myFileFilter.isUnderContentRoots(e.getNewParent());
    }
  }
;
  myFileManager.addVirtualFileListener(myFileListener);
}
