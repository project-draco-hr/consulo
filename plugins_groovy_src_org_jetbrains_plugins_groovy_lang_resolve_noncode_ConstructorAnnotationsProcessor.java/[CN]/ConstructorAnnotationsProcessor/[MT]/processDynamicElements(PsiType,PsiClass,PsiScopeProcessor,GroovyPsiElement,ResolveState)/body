{
  if (!(psiClass instanceof GrTypeDefinition) || psiClass.getName() == null)   return;
  PsiModifierList modifierList=psiClass.getModifierList();
  if (modifierList == null)   return;
  final PsiAnnotation tupleConstructor=modifierList.findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_TUPLE_CONSTRUCTOR);
  final boolean immutable=modifierList.findAnnotation(GroovyImmutableAnnotationInspection.IMMUTABLE) != null || modifierList.findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_IMMUTABLE) != null;
  final PsiAnnotation canonical=modifierList.findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_CANONICAL);
  if (!immutable && canonical == null && tupleConstructor == null) {
    return;
  }
  final GrTypeDefinition typeDefinition=(GrTypeDefinition)psiClass;
  if (tupleConstructor != null && typeDefinition.getConstructors().length > 0 && !PsiUtil.getAnnoAttributeValue(tupleConstructor,"force",false)) {
    return;
  }
  final LightMethodBuilder fieldsConstructor=new LightMethodBuilder(psiClass,GroovyFileType.GROOVY_LANGUAGE);
  fieldsConstructor.setConstructor(true).setNavigationElement(psiClass);
  Set<String> excludes=new HashSet<String>();
  if (tupleConstructor != null) {
    for (    String s : PsiUtil.getAnnoAttributeValue(tupleConstructor,"excludes","").split(",")) {
      final String name=s.trim();
      if (StringUtil.isNotEmpty(name)) {
        excludes.add(name);
      }
    }
  }
  if (tupleConstructor != null) {
    final boolean superFields=PsiUtil.getAnnoAttributeValue(tupleConstructor,"includeSuperFields",false);
    final boolean superProperties=PsiUtil.getAnnoAttributeValue(tupleConstructor,"includeSuperProperties",false);
    if (superFields || superProperties) {
      addParametersForSuper(typeDefinition,fieldsConstructor,superFields,superProperties,new HashSet<PsiClass>(),excludes);
    }
  }
  addParameters(typeDefinition,fieldsConstructor,tupleConstructor == null || PsiUtil.getAnnoAttributeValue(tupleConstructor,"includeProperties",true),tupleConstructor != null ? PsiUtil.getAnnoAttributeValue(tupleConstructor,"includeFields",false) : canonical == null,!immutable,excludes);
  if (!processor.execute(fieldsConstructor,state))   return;
  final LightMethodBuilder defaultConstructor=new LightMethodBuilder(psiClass,GroovyFileType.GROOVY_LANGUAGE);
  defaultConstructor.setConstructor(true);
  processor.execute(defaultConstructor,state);
}
