{
  if (myPropertyChangeListener == null) {
    myPropertyChangeListener=new MyPropertyChangeListener();
    myAppender1.getEditor().addPropertyChangeListener(myPropertyChangeListener);
  }
  final MultiMap<Integer,Pair<Integer,TextDiffTypeEnum>> leftMap=new MultiMap<Integer,Pair<Integer,TextDiffTypeEnum>>();
  final MultiMap<Integer,Pair<Integer,TextDiffTypeEnum>> rightMap=new MultiMap<Integer,Pair<Integer,TextDiffTypeEnum>>();
  int cnt=1;
  for (  LineFragment line : lines) {
    if (line.getType() == null || TextDiffTypeEnum.NONE.equals(line.getType()))     continue;
    final Iterator<Fragment> iterator=line.getChildrenIterator();
    if (iterator == null) {
      TextRange left=line.getRange(FragmentSide.SIDE1);
      TextRange right=line.getRange(FragmentSide.SIDE2);
      leftMap.putValue(myAppender1.getDocument().getLineNumber(left.getStartOffset()),new Pair<Integer,TextDiffTypeEnum>(cnt,line.getType()));
      rightMap.putValue(myAppender2.getDocument().getLineNumber(right.getStartOffset()),new Pair<Integer,TextDiffTypeEnum>(cnt,line.getType()));
      ++cnt;
      continue;
    }
    while (iterator.hasNext()) {
      final Fragment next=iterator.next();
      if (next.getType() == null || TextDiffTypeEnum.NONE.equals(next.getType()))       continue;
      TextRange left=next.getRange(FragmentSide.SIDE1);
      TextRange right=next.getRange(FragmentSide.SIDE2);
      leftMap.putValue(myAppender1.getDocument().getLineNumber(left.getStartOffset()),new Pair<Integer,TextDiffTypeEnum>(cnt,next.getType()));
      rightMap.putValue(myAppender2.getDocument().getLineNumber(right.getStartOffset()),new Pair<Integer,TextDiffTypeEnum>(cnt,next.getType()));
      ++cnt;
    }
  }
  merge(leftMap,myLeftPrecalculated);
  merge(rightMap,myRightPrecalculated);
}
