{
  super(project,debuggerEditorsProvider,multiline ? EvaluationMode.CODE_FRAGMENT : EvaluationMode.EXPRESSION,historyId,sourcePosition);
  myExpression=XExpressionImpl.changeMode(text,getMode());
  myEditorTextField=new EditorTextField(createDocument(myExpression),project,debuggerEditorsProvider.getFileType(),false,!multiline){
    @Override protected EditorEx createEditor(){
      final EditorEx editor=super.createEditor();
      editor.setVerticalScrollbarVisible(multiline);
      editor.getColorsScheme().setEditorFontName(getFont().getFontName());
      editor.getColorsScheme().setEditorFontSize(getFont().getSize());
      return editor;
    }
    @Override public Object getData(    String dataId){
      if (LangDataKeys.CONTEXT_LANGUAGES.is(dataId)) {
        return new Language[]{myExpression.getLanguage()};
      }
 else       if (CommonDataKeys.PSI_FILE.is(dataId)) {
        return PsiDocumentManager.getInstance(getProject()).getPsiFile(getDocument());
      }
      return super.getData(dataId);
    }
  }
;
  if (editorFont) {
    myEditorTextField.setFontInheritedFromLAF(false);
    myEditorTextField.setFont(EditorUtil.getEditorFont());
  }
  myComponent=addChooseFactoryLabel(myEditorTextField,multiline);
}
