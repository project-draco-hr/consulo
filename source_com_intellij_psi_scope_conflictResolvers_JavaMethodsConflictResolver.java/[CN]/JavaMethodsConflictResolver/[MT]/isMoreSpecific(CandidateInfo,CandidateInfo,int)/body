{
  PsiMethod method1=(PsiMethod)info1.getElement();
  PsiMethod method2=(PsiMethod)info2.getElement();
  final PsiClass class1=method1.getContainingClass();
  final PsiClass class2=method2.getContainingClass();
  final PsiParameter[] params1=method1.getParameterList().getParameters();
  final PsiParameter[] params2=method2.getParameterList().getParameters();
  PsiExpression[] args=myArgumentsList.getExpressions();
  final PsiTypeParameter[] typeParameters1=method1.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=method2.getTypeParameters();
  final PsiSubstitutor classSubstitutor1=info1.getSubstitutor();
  final PsiSubstitutor classSubstitutor2=info2.getSubstitutor();
  PsiSubstitutor methodSubstitutor1=PsiSubstitutor.EMPTY;
  PsiSubstitutor methodSubstitutor2=PsiSubstitutor.EMPTY;
  final int max=Math.max(params1.length,params2.length);
  PsiType[] types1=new PsiType[max];
  PsiType[] types2=new PsiType[max];
  for (int i=0; i < max; i++) {
    PsiType type1=params1[Math.min(i,params1.length - 1)].getType();
    PsiType type2=params2[Math.min(i,params2.length - 1)].getType();
    if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.VARARGS) {
      if (type1 instanceof PsiEllipsisType && type2 instanceof PsiEllipsisType) {
        type1=((PsiEllipsisType)type1).toArrayType();
        type2=((PsiEllipsisType)type2).toArrayType();
      }
 else {
        type1=type1 instanceof PsiEllipsisType ? ((PsiArrayType)type1).getComponentType() : type1;
        type2=type2 instanceof PsiEllipsisType ? ((PsiArrayType)type2).getComponentType() : type2;
      }
    }
    types1[i]=type1;
    types2[i]=type2;
  }
  if (typeParameters1.length == 0 || typeParameters2.length == 0) {
    if (typeParameters1.length > 0) {
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(myArgumentsList.getProject()).getResolveHelper();
      methodSubstitutor1=calculateMethodSubstitutor(typeParameters1,types1,types2,resolveHelper);
    }
 else     if (typeParameters2.length > 0) {
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(myArgumentsList.getProject()).getResolveHelper();
      methodSubstitutor2=calculateMethodSubstitutor(typeParameters2,types2,types1,resolveHelper);
    }
  }
 else {
    methodSubstitutor1=createRawSubstitutor(typeParameters1);
    methodSubstitutor2=createRawSubstitutor(typeParameters2);
  }
  Specifics isLessBoxing=null;
  Specifics isMoreSpecific=null;
  for (int i=0; i < types1.length; i++) {
    PsiType type1=classSubstitutor1.substitute(methodSubstitutor1.substitute(types1[i]));
    PsiType type2=classSubstitutor2.substitute(methodSubstitutor2.substitute(types2[i]));
    PsiType argType=i < args.length ? args[i].getType() : null;
    final Boolean boxing=isLessBoxing(argType,type1,type2);
    if (boxing == Boolean.TRUE) {
      if (isLessBoxing == Specifics.FALSE)       return Specifics.CONFLICT;
      isLessBoxing=Specifics.TRUE;
    }
 else     if (boxing == Boolean.FALSE) {
      if (isLessBoxing == Specifics.TRUE)       return Specifics.CONFLICT;
      isLessBoxing=Specifics.FALSE;
    }
 else {
      final Specifics specifics=checkSubtyping(type1,type2,argType);
      if (specifics == null)       continue;
switch (specifics) {
case TRUE:
        if (isMoreSpecific == Specifics.FALSE)         return Specifics.CONFLICT;
      isMoreSpecific=specifics;
    break;
case FALSE:
  if (isMoreSpecific == Specifics.TRUE)   return Specifics.CONFLICT;
isMoreSpecific=specifics;
break;
case CONFLICT:
return Specifics.CONFLICT;
}
}
}
if (isLessBoxing != null) return isLessBoxing;
if (isMoreSpecific == null) {
if (class1 != class2) {
if (class2.isInheritor(class1,true) || class1.isInterface() && !class2.isInterface()) {
isMoreSpecific=Specifics.FALSE;
}
 else if (class1.isInheritor(class2,true) || class2.isInterface()) {
isMoreSpecific=Specifics.TRUE;
}
}
}
if (isMoreSpecific == null) {
if (typeParameters1.length < typeParameters2.length) return Specifics.TRUE;
if (typeParameters1.length > typeParameters2.length) return Specifics.FALSE;
return Specifics.CONFLICT;
}
return isMoreSpecific;
}
