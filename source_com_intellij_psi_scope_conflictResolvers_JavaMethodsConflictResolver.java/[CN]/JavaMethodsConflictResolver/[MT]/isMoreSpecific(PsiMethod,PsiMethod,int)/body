{
  final PsiClass class1=method1.getContainingClass();
  final PsiClass class2=method2.getContainingClass();
  Specifics isMoreSpecific=null;
  final PsiParameter[] params1=method1.getParameterList().getParameters();
  final PsiParameter[] params2=method2.getParameterList().getParameters();
  PsiExpression[] args=myArgumentsList.getExpressions();
  if (params1.length == args.length && params2.length != args.length)   return Specifics.TRUE;
  if (params2.length == args.length && params1.length != args.length)   return Specifics.FALSE;
  final PsiTypeParameter[] typeParameters1=method1.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=method2.getTypeParameters();
  PsiSubstitutor substitutor1=PsiSubstitutor.EMPTY;
  PsiSubstitutor substitutor2=PsiSubstitutor.EMPTY;
  final int max=Math.max(params1.length,params2.length);
  PsiType[] types1=new PsiType[max];
  PsiType[] types2=new PsiType[max];
  for (int i=0; i < max; i++) {
    PsiType type1=params1[Math.min(i,params1.length - 1)].getType();
    PsiType type2=params2[Math.min(i,params2.length - 1)].getType();
    if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.VARARGS) {
      type1=type1 instanceof PsiEllipsisType ? ((PsiArrayType)type1).getComponentType() : type1;
      type2=type2 instanceof PsiEllipsisType ? ((PsiArrayType)type2).getComponentType() : type2;
    }
    types1[i]=type1;
    types2[i]=type2;
  }
  if (typeParameters1.length == 0 || typeParameters2.length == 0) {
    if (typeParameters1.length > 0) {
      final PsiResolveHelper resolveHelper=myArgumentsList.getManager().getResolveHelper();
      substitutor1=resolveHelper.inferTypeArguments(typeParameters1,types1,types2,PsiUtil.getLanguageLevel(myArgumentsList));
    }
    if (typeParameters2.length > 0) {
      final PsiResolveHelper resolveHelper=myArgumentsList.getManager().getResolveHelper();
      substitutor2=resolveHelper.inferTypeArguments(typeParameters2,types2,types1,PsiUtil.getLanguageLevel(myArgumentsList));
    }
  }
 else {
    substitutor1=createRawSubstitutor(typeParameters1);
    substitutor2=createRawSubstitutor(typeParameters2);
  }
  for (int i=0; i < types1.length; i++) {
    PsiType type1=substitutor1.substitute(types1[i]);
    PsiType type2=substitutor2.substitute(types2[i]);
    PsiType argType=i < args.length ? args[i].getType() : null;
    final Specifics specifics=checkSubtyping(type1,type2,argType);
    if (specifics == null)     continue;
switch (specifics) {
case TRUE:
      if (isMoreSpecific == Specifics.FALSE)       return Specifics.CONFLICT;
    isMoreSpecific=specifics;
  break;
case FALSE:
if (isMoreSpecific == Specifics.TRUE) return Specifics.CONFLICT;
isMoreSpecific=specifics;
break;
case CONFLICT:
return Specifics.CONFLICT;
}
}
if (isMoreSpecific == null) {
if (class1 != class2) {
if (class2.isInheritor(class1,true) || class1.isInterface() && !class2.isInterface()) {
isMoreSpecific=Specifics.FALSE;
}
 else if (class1.isInheritor(class2,true) || class2.isInterface()) {
isMoreSpecific=Specifics.TRUE;
}
}
}
if (isMoreSpecific == null) {
return Specifics.CONFLICT;
}
return isMoreSpecific;
}
