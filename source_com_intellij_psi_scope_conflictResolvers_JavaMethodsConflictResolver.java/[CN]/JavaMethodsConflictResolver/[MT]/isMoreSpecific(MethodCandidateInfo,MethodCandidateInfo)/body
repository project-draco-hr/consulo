{
  PsiMethod method1=info1.getElement();
  PsiMethod method2=info2.getElement();
  final PsiClass class1=method1.getContainingClass();
  final PsiClass class2=method2.getContainingClass();
  Boolean isMoreSpecific=null;
  final PsiParameter[] params1=method1.getParameterList().getParameters();
  final PsiParameter[] params2=method2.getParameterList().getParameters();
  PsiExpression[] args=myArgumentsList.getExpressions();
  for (int i=0; i < args.length; i++) {
    if (i >= params1.length || i >= params2.length)     break;
    boolean varArgs1=params1[i].isVarArgs();
    boolean varArgs2=params2[i].isVarArgs();
    if (!varArgs1 && varArgs2)     return Specifics.TRUE;
    if (varArgs1 && !varArgs2)     return Specifics.FALSE;
    final PsiType type1=info1.getSubstitutor().substitute(params1[i].getType());
    final PsiType type2=info2.getSubstitutor().substitute(params2[i].getType());
    final PsiType argType=args[i].getType();
    Boolean lessBoxing=isLessBoxing(argType,type1,type2);
    if (lessBoxing != null) {
      if (isMoreSpecific != null && !lessBoxing.equals(isMoreSpecific))       return Specifics.CONFLICT;
      isMoreSpecific=lessBoxing;
      continue;
    }
    final boolean assignable2From1=type1 != null && type2 != null && type2.isAssignableFrom(type1);
    final boolean assignable1From2=type1 != null && type2 != null && type1.isAssignableFrom(type2);
    if (assignable1From2 && assignable2From1) {
      PsiType erased1=TypeConversionUtil.erasure(params1[i].getType());
      PsiType erased2=TypeConversionUtil.erasure(params2[i].getType());
      if (!erased2.isAssignableFrom(erased1)) {
        if (isMoreSpecific == Boolean.TRUE)         return Specifics.CONFLICT;
        isMoreSpecific=Boolean.FALSE;
      }
      if (!erased1.isAssignableFrom(erased2)) {
        if (isMoreSpecific == Boolean.FALSE)         return Specifics.CONFLICT;
        isMoreSpecific=Boolean.TRUE;
      }
    }
 else     if (assignable1From2) {
      if (isMoreSpecific == Boolean.TRUE)       return Specifics.CONFLICT;
      isMoreSpecific=Boolean.FALSE;
    }
 else     if (assignable2From1) {
      if (isMoreSpecific == Boolean.FALSE)       return Specifics.CONFLICT;
      isMoreSpecific=Boolean.TRUE;
    }
 else {
      return Specifics.CONFLICT;
    }
  }
  if (isMoreSpecific == null) {
    if (method1.isVarArgs() && !method2.isVarArgs())     return Specifics.FALSE;
    if (method2.isVarArgs() && !method1.isVarArgs())     return Specifics.TRUE;
  }
  if (isMoreSpecific == null) {
    if (class1 != class2) {
      if (class2.isInheritor(class1,true) || class1.isInterface() && !class2.isInterface()) {
        isMoreSpecific=Boolean.FALSE;
      }
 else       if (class1.isInheritor(class2,true) || class2.isInterface()) {
        isMoreSpecific=Boolean.TRUE;
      }
    }
  }
  if (isMoreSpecific == null) {
    return Specifics.CONFLICT;
  }
  return isMoreSpecific.booleanValue() ? Specifics.TRUE : Specifics.FALSE;
}
