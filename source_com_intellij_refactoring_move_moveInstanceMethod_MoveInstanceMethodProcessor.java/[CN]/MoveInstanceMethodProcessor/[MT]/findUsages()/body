{
  final PsiManager manager=myMethod.getManager();
  final GlobalSearchScope searchScope=GlobalSearchScope.allScope(manager.getProject());
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final PsiReference[] refs=searchHelper.findReferences(myMethod,searchScope,false);
  final List<UsageInfo> usages=new ArrayList<UsageInfo>();
  for (  PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    if (element instanceof PsiReferenceExpression) {
      usages.add(new MethodCallUsageInfo((PsiReferenceExpression)element));
    }
 else     if (element instanceof PsiDocTagValue) {
      usages.add(new JavadocUsageInfo(((PsiDocTagValue)element)));
    }
 else {
      LOG.assertTrue(false,"Unknown reference found");
    }
  }
  if (myTargetClass.isInterface()) {
    addInheritorUsages(myTargetClass,searchHelper,searchScope,usages);
  }
  final PsiCodeBlock body=myMethod.getBody();
  if (body != null) {
    body.accept(new PsiRecursiveElementVisitor(){
      public void visitNewExpression(      PsiNewExpression expression){
        if (MoveMethodUtil.getClassReferencedByThis(expression) != null) {
          usages.add(new InternalUsageInfo(expression));
        }
        super.visitNewExpression(expression);
      }
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        if (MoveMethodUtil.getClassReferencedByThis(expression) != null) {
          usages.add(new InternalUsageInfo(expression));
        }
 else         if (!expression.isQualified()) {
          final PsiElement resolved=expression.resolve();
          if (myTargetVariable.equals(resolved)) {
            usages.add(new InternalUsageInfo(expression));
          }
        }
        super.visitReferenceExpression(expression);
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
