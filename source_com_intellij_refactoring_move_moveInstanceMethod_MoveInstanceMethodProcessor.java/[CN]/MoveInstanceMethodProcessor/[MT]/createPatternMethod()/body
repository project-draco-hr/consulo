{
  ChangeContextUtil.encodeContextInfo(myMethod,true);
  final PsiMethod methodCopy=(PsiMethod)myMethod.copy();
  final PsiElement elementAt=methodCopy.getContainingFile().findElementAt(myTargetVariable.getTextRange().getStartOffset());
  final PsiVariable variableCopy=PsiTreeUtil.getParentOfType(elementAt,PsiVariable.class);
  try {
    final PsiManager manager=myMethod.getManager();
    final PsiElementFactory factory=manager.getElementFactory();
    final PsiCodeBlock body=methodCopy.getBody();
    if (body != null) {
      body.accept(new PsiRecursiveElementVisitor(){
        public void visitReferenceExpression(        PsiReferenceExpression expression){
          try {
            final PsiExpression qualifier=expression.getQualifierExpression();
            if (qualifier instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifier).isReferenceTo(variableCopy)) {
              qualifier.delete();
            }
 else {
              final PsiElement resolved=expression.resolve();
              if (variableCopy.equals(resolved)) {
                PsiThisExpression thisExpression=(PsiThisExpression)factory.createExpressionFromText("this",null);
                expression.replace(thisExpression);
              }
 else               if (MoveMethodUtil.isClassInstanceReference(expression,methodCopy.getContainingClass())) {
                PsiReferenceExpression qualified=(PsiReferenceExpression)factory.createExpressionFromText(myOldClassParameterName + ".f",null);
                qualified.getReferenceNameElement().replace(expression.getReferenceNameElement());
                expression.replace(qualified);
              }
            }
            super.visitReferenceExpression(expression);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        public void visitNewExpression(        PsiNewExpression expression){
          try {
            final PsiExpression qualifier=expression.getQualifier();
            if (qualifier instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifier).isReferenceTo(variableCopy)) {
              qualifier.delete();
            }
 else {
              if (MoveMethodUtil.isClassInstanceReference(expression,methodCopy.getContainingClass())) {
                if (qualifier != null)                 qualifier.delete();
                final PsiExpression newExpression=factory.createExpressionFromText(myOldClassParameterName + "." + expression.getText(),null);
                expression.replace(newExpression);
              }
            }
            super.visitNewExpression(expression);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        public void visitMethodCallExpression(        PsiMethodCallExpression expression){
          if (expression.getMethodExpression().isReferenceTo(myMethod)) {
            correctMethodCall(expression,true);
          }
          super.visitMethodCallExpression(expression);
        }
      }
);
    }
    methodCopy.getModifierList().setModifierProperty(myTargetClass.isInterface() ? PsiModifier.PUBLIC : myNewVisibility,true);
    if (myTargetVariable instanceof PsiParameter) {
      final int index=myMethod.getParameterList().getParameterIndex((PsiParameter)myTargetVariable);
      methodCopy.getParameterList().getParameters()[index].delete();
    }
    if (myOldThisNeeded) {
      final PsiClassType type=factory.createType(myMethod.getContainingClass());
      final PsiParameter parameter=factory.createParameter(myOldClassParameterName,type);
      methodCopy.getParameterList().add(parameter);
    }
    final List<PsiParameter> newParameters=Arrays.asList(methodCopy.getParameterList().getParameters());
    RefactoringUtil.fixJavadocsForParams(methodCopy,new HashSet<PsiParameter>(newParameters));
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return methodCopy;
}
