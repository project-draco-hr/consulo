{
  ChangeContextUtil.encodeContextInfo(myMethod,true);
  try {
    final PsiManager manager=myMethod.getManager();
    final PsiElementFactory factory=manager.getElementFactory();
    final PsiCodeBlock body=myMethod.getBody();
    if (body != null) {
      body.accept(new PsiRecursiveElementVisitor(){
        public void visitThisExpression(        PsiThisExpression expression){
          final PsiClass classReferencedByThis=MoveMethodUtil.getClassReferencedByThis(expression);
          if (classReferencedByThis != null) {
            final PsiElementFactory factory=PsiManager.getInstance(myProject).getElementFactory();
            String paramName=getParameterNameToCreate(classReferencedByThis);
            try {
              final PsiExpression refExpression=factory.createExpressionFromText(paramName,null);
              expression.replace(refExpression);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
        }
        public void visitReferenceExpression(        PsiReferenceExpression expression){
          try {
            final PsiExpression qualifier=expression.getQualifierExpression();
            if (qualifier instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifier).isReferenceTo(myTargetVariable)) {
              qualifier.delete();
              return;
            }
 else {
              final PsiElement resolved=expression.resolve();
              if (myTargetVariable.equals(resolved)) {
                PsiThisExpression thisExpression=(PsiThisExpression)factory.createExpressionFromText("this",null);
                expression.replace(thisExpression);
                return;
              }
 else {
                PsiClass classReferencedByThis=MoveMethodUtil.getClassReferencedByThis(expression);
                if (classReferencedByThis != null) {
                  final String paramName=getParameterNameToCreate(classReferencedByThis);
                  PsiReferenceExpression qualified=(PsiReferenceExpression)factory.createExpressionFromText(paramName + ".f",null);
                  qualified.getReferenceNameElement().replace(expression.getReferenceNameElement());
                  expression.replace(qualified);
                  return;
                }
              }
            }
            super.visitReferenceExpression(expression);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        public void visitNewExpression(        PsiNewExpression expression){
          try {
            final PsiExpression qualifier=expression.getQualifier();
            if (qualifier instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifier).isReferenceTo(myTargetVariable)) {
              qualifier.delete();
            }
 else {
              final PsiClass classReferencedByThis=MoveMethodUtil.getClassReferencedByThis(expression);
              if (classReferencedByThis != null) {
                if (qualifier != null)                 qualifier.delete();
                final String paramName=getParameterNameToCreate(classReferencedByThis);
                final PsiExpression newExpression=factory.createExpressionFromText(paramName + "." + expression.getText(),null);
                expression=(PsiNewExpression)expression.replace(newExpression);
              }
            }
            super.visitNewExpression(expression);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        public void visitMethodCallExpression(        PsiMethodCallExpression expression){
          correctMethodCall(expression,true);
          super.visitMethodCallExpression(expression);
        }
      }
);
    }
    final PsiMethod methodCopy=(PsiMethod)myMethod.copy();
    methodCopy.getModifierList().setModifierProperty(myTargetClass.isInterface() ? PsiModifier.PUBLIC : myNewVisibility,true);
    if (myTargetVariable instanceof PsiParameter) {
      final int index=myMethod.getParameterList().getParameterIndex((PsiParameter)myTargetVariable);
      methodCopy.getParameterList().getParameters()[index].delete();
    }
    addParameters(factory,methodCopy);
    final List<PsiParameter> newParameters=Arrays.asList(methodCopy.getParameterList().getParameters());
    RefactoringUtil.fixJavadocsForParams(methodCopy,new HashSet<PsiParameter>(newParameters));
    return methodCopy;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return myMethod;
  }
}
