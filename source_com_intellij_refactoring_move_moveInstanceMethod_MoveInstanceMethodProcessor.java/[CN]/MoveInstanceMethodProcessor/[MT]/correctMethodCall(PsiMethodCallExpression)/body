{
  try {
    final PsiManager manager=myMethod.getManager();
    PsiReferenceExpression methodExpression=expression.getMethodExpression();
    if (!methodExpression.isReferenceTo(myMethod))     return;
    final PsiExpression oldQualifier=methodExpression.getQualifierExpression();
    PsiExpression newQualifier=null;
    if (myTargetVariable instanceof PsiParameter) {
      final int index=myMethod.getParameterList().getParameterIndex((PsiParameter)myTargetVariable);
      final PsiExpression[] arguments=expression.getArgumentList().getExpressions();
      if (index < arguments.length) {
        newQualifier=(PsiExpression)arguments[index].copy();
        arguments[index].delete();
      }
    }
 else {
      VisibilityUtil.escalateVisibility((PsiField)myTargetVariable,expression);
      newQualifier=manager.getElementFactory().createExpressionFromText(myTargetVariable.getName(),null);
    }
    final PsiClass classReferencedByThis=MoveInstanceMembersUtil.getClassReferencedByThis(methodExpression);
    if (classReferencedByThis != null) {
      @NonNls String thisArgumentText=null;
      if (manager.areElementsEquivalent(myMethod.getContainingClass(),classReferencedByThis)) {
        if (myOldClassParameterNames.containsKey(myMethod.getContainingClass())) {
          thisArgumentText="this";
        }
      }
 else {
        thisArgumentText=classReferencedByThis.getName() + ".this";
      }
      if (thisArgumentText != null) {
        final PsiExpression newArgument=manager.getElementFactory().createExpressionFromText(thisArgumentText,null);
        expression.getArgumentList().add(newArgument);
      }
    }
    if (newQualifier != null) {
      if (newQualifier instanceof PsiThisExpression && ((PsiThisExpression)newQualifier).getQualifier() == null) {
        if (oldQualifier != null)         oldQualifier.delete();
      }
 else {
        final PsiReferenceExpression refExpr=(PsiReferenceExpression)manager.getElementFactory().createExpressionFromText("q." + myMethod.getName(),null);
        refExpr.getQualifierExpression().replace(newQualifier);
        methodExpression.replace(refExpr);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
