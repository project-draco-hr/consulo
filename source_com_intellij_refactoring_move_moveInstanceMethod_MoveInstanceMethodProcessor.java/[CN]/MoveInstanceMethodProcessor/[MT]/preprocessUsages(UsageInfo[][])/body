{
  final UsageInfo[] usages=refUsages[0];
  ArrayList<String> conflicts=new ArrayList<String>();
  final Set<PsiMember> methods=Collections.singleton(((PsiMember)myMethod));
  if (!myTargetClass.isInterface()) {
    conflicts.addAll(Arrays.asList(MoveMembersProcessor.analyzeAccessibilityConflicts(methods,myTargetClass,new LinkedHashSet<String>(),myNewVisibility)));
  }
 else {
    for (int i=0; i < usages.length; i++) {
      final UsageInfo usage=usages[i];
      if (usage instanceof InheritorUsageInfo) {
        conflicts.addAll(Arrays.asList(MoveMembersProcessor.analyzeAccessibilityConflicts(methods,((InheritorUsageInfo)usage).getInheritor(),new LinkedHashSet<String>(),myNewVisibility)));
      }
    }
  }
  if (myTargetVariable instanceof PsiParameter) {
    PsiParameter parameter=(PsiParameter)myTargetVariable;
    for (int i=0; i < usages.length; i++) {
      final UsageInfo usageInfo=usages[i];
      if (usageInfo instanceof MethodCallUsageInfo) {
        final PsiMethodCallExpression methodCall=((MethodCallUsageInfo)usageInfo).getMethodCallExpression();
        final PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
        final int index=myMethod.getParameterList().getParameterIndex(parameter);
        if (index < expressions.length) {
          PsiExpression instanceValue=expressions[index];
          instanceValue=RefactoringUtil.unparenthesizeExpression(instanceValue);
          if (instanceValue instanceof PsiLiteralExpression && ((PsiLiteralExpression)instanceValue).getValue() == null) {
            String message=ConflictsUtil.getDescription(ConflictsUtil.getContainer(methodCall),true) + " contains call with null argument for parameter " + ConflictsUtil.htmlEmphasize(parameter.getName());
            conflicts.add(message);
          }
        }
      }
    }
  }
  if (conflicts.size() != 0) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(conflicts.toArray(new String[conflicts.size()]),myProject);
    conflictsDialog.show();
    if (!conflictsDialog.isOK())     return false;
  }
  return super.preprocessUsages(refUsages);
}
