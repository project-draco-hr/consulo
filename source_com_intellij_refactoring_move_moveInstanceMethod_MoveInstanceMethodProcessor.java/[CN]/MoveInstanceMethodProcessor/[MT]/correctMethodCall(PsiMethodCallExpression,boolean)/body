{
  try {
    final PsiManager manager=myMethod.getManager();
    PsiReferenceExpression methodExpression=expression.getMethodExpression();
    if (!methodExpression.isReferenceTo(myMethod))     return;
    final PsiExpression oldQualifier=methodExpression.getQualifierExpression();
    PsiExpression newQualifier=null;
    if (myTargetVariable instanceof PsiParameter) {
      final int index=myMethod.getParameterList().getParameterIndex((PsiParameter)myTargetVariable);
      final PsiExpression[] arguments=expression.getArgumentList().getExpressions();
      if (index < arguments.length) {
        final PsiClass classReferencedByThis=MoveMethodUtil.getClassReferencedByThis(methodExpression);
        if (isInternalCall && classReferencedByThis != null) {
          final String paramName=getParameterNameToCreate(classReferencedByThis);
          newQualifier=manager.getElementFactory().createExpressionFromText(paramName,null);
        }
 else {
          newQualifier=(PsiExpression)arguments[index].copy();
        }
        arguments[index].delete();
      }
    }
 else {
      VisibilityUtil.escalateVisibility((PsiField)myTargetVariable,expression);
      newQualifier=manager.getElementFactory().createExpressionFromText(myTargetVariable.getName(),null);
    }
    PsiExpression qualifier=methodExpression.getQualifierExpression();
    if (qualifier == null) {
      final PsiElement resolved=methodExpression.resolve();
      String thisArgumentText="this";
      if (resolved instanceof PsiMember) {
        final PsiClass containingClass=((PsiMember)resolved).getContainingClass();
        if (containingClass != null) {
          if (isInternalCall) {
            thisArgumentText=myTargetVariable.getName();
          }
 else           if (!manager.areElementsEquivalent(myMethod.getContainingClass(),containingClass)) {
            thisArgumentText=containingClass.getName() + ".this";
          }
        }
      }
      qualifier=manager.getElementFactory().createExpressionFromText(thisArgumentText,null);
    }
    expression.getArgumentList().add(qualifier);
    if (newQualifier != null) {
      if (newQualifier instanceof PsiThisExpression && ((PsiThisExpression)newQualifier).getQualifier() == null) {
        if (oldQualifier != null)         oldQualifier.delete();
      }
 else {
        final PsiReferenceExpression refExpr=(PsiReferenceExpression)manager.getElementFactory().createExpressionFromText("q." + myMethod.getName(),null);
        refExpr.getQualifierExpression().replace(newQualifier);
        methodExpression.replace(refExpr);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
