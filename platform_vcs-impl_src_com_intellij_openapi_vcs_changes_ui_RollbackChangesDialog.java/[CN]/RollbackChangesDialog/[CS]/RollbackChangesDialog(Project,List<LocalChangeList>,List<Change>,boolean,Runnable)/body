{
  super(project,true);
  myProject=project;
  myRefreshSynchronously=refreshSynchronously;
  myAfterVcsRefreshInAwt=afterVcsRefreshInAwt;
  myInvokedFromModalContext=LaterInvocator.isInModalContext();
  myInfoCalculator=new ChangeInfoCalculator();
  myCommitLegendPanel=new CommitLegendPanel(myInfoCalculator);
  myListChangeListener=new Runnable(){
    @Override public void run(){
      if (myBrowser != null) {
        List<Change> allChanges=getAllChanges(changeLists);
        Collection<Change> includedChanges=myBrowser.getViewer().getIncludedChanges();
        myInfoCalculator.update(allChanges,ContainerUtil.newArrayList(includedChanges));
        myCommitLegendPanel.update();
        boolean hasNewFiles=ContainerUtil.exists(includedChanges,new Condition<Change>(){
          @Override public boolean value(          Change change){
            return change.getType() == Change.Type.NEW;
          }
        }
);
        myDeleteLocallyAddedFiles.setEnabled(hasNewFiles);
      }
    }
  }
;
  myBrowser=new ChangesBrowser(project,changeLists,changes,null,true,true,myListChangeListener,ChangesBrowser.MyUseCase.LOCAL_CHANGES,null){
    @NotNull @Override protected DefaultTreeModel buildTreeModel(    List<Change> changes,    ChangeNodeDecorator changeNodeDecorator,    boolean showFlatten){
      TreeModelBuilder builder=new TreeModelBuilder(myProject,showFlatten);
      return builder.setChangeLists(changeLists).build();
    }
  }
;
  Disposer.register(getDisposable(),myBrowser);
  myOperationName=operationNameByChanges(project,getAllChanges(changeLists));
  setOKButtonText(myOperationName);
  myOperationName=UIUtil.removeMnemonic(myOperationName);
  setTitle(VcsBundle.message("changes.action.rollback.custom.title",myOperationName));
  setCancelButtonText(CommonBundle.getCloseButtonText());
  myBrowser.setToggleActionTitle("&Include in " + myOperationName.toLowerCase());
  myDeleteLocallyAddedFiles=new JCheckBox(VcsBundle.message("changes.checkbox.delete.locally.added.files"));
  myDeleteLocallyAddedFiles.setSelected(PropertiesComponent.getInstance().isTrueValue(DELETE_LOCALLY_ADDED_FILES_KEY));
  myDeleteLocallyAddedFiles.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PropertiesComponent.getInstance().setValue(DELETE_LOCALLY_ADDED_FILES_KEY,myDeleteLocallyAddedFiles.isSelected());
    }
  }
);
  init();
  myListChangeListener.run();
}
