{
  super(project,true);
  myProject=project;
  myRefreshSynchronously=refreshSynchronously;
  myAfterVcsRefreshInAwt=afterVcsRefreshInAwt;
  myInfoCalculator=new ChangeInfoCalculator();
  myCommitLegendPanel=new CommitLegendPanel(myInfoCalculator);
  myListChangeListener=new Runnable(){
    @Override public void run(){
      if (myBrowser != null) {
        myInfoCalculator.update(changes,new ArrayList<Change>(myBrowser.getChangesIncludedInAllLists()));
        myCommitLegendPanel.update();
      }
    }
  }
;
  myBrowser=new MultipleChangeListBrowser(project,changeLists,changes,null,true,true,myListChangeListener,myListChangeListener);
  Set<AbstractVcs> affectedVcs=new HashSet<AbstractVcs>();
  for (  Change c : changes) {
    final AbstractVcs vcs=ChangesUtil.getVcsForChange(c,project);
    if (vcs != null) {
      affectedVcs.add(vcs);
    }
  }
  String operationName=RollbackUtil.getRollbackOperationName(affectedVcs);
  setOKButtonText(operationName);
  operationName=UIUtil.removeMnemonic(operationName);
  setTitle(VcsBundle.message("changes.action.rollback.custom.title",operationName));
  setCancelButtonText(CommonBundle.getCloseButtonText());
  myBrowser.setToggleActionTitle("Include in " + operationName.toLowerCase());
  for (  Change c : changes) {
    if (c.getType() == Change.Type.NEW) {
      myDeleteLocallyAddedFiles=new JCheckBox(VcsBundle.message("changes.checkbox.delete.locally.added.files"));
      break;
    }
  }
  init();
  myListChangeListener.run();
}
