{
  super(project,true);
  myProject=project;
  myRefreshSynchronously=refreshSynchronously;
  myAfterVcsRefreshInAwt=afterVcsRefreshInAwt;
  myInfoCalculator=new ChangeInfoCalculator();
  myCommitLegendPanel=new CommitLegendPanel(myInfoCalculator);
  myListChangeListener=new Runnable(){
    @Override public void run(){
      if (myBrowser != null) {
        myInfoCalculator.update(changes,new ArrayList<Change>(myBrowser.getChangesIncludedInAllLists()));
        myCommitLegendPanel.update();
      }
    }
  }
;
  myBrowser=new MultipleChangeListBrowser(project,changeLists,changes,null,true,true,myListChangeListener,myListChangeListener);
  myOperationName=operationNameByChanges(project,changes);
  setOKButtonText(myOperationName);
  myOperationName=UIUtil.removeMnemonic(myOperationName);
  setTitle(VcsBundle.message("changes.action.rollback.custom.title",myOperationName));
  setCancelButtonText(CommonBundle.getCloseButtonText());
  myBrowser.setToggleActionTitle("Include in " + myOperationName.toLowerCase());
  for (  Change c : changes) {
    if (c.getType() == Change.Type.NEW) {
      myDeleteLocallyAddedFiles=new JCheckBox(VcsBundle.message("changes.checkbox.delete.locally.added.files"));
      myDeleteLocallyAddedFiles.setSelected(PropertiesComponent.getInstance().isTrueValue(DELETE_LOCALLY_ADDED_FILES_KEY));
      myDeleteLocallyAddedFiles.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final boolean value=myDeleteLocallyAddedFiles.isSelected();
          PropertiesComponent.getInstance().setValue(DELETE_LOCALLY_ADDED_FILES_KEY,String.valueOf(value));
        }
      }
);
      break;
    }
  }
  init();
  myListChangeListener.run();
}
