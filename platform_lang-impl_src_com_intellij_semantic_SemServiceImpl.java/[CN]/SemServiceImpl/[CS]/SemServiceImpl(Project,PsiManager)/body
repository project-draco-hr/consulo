{
  myProject=project;
  final MessageBusConnection connection=project.getMessageBus().connect();
  connection.subscribe(PsiModificationTracker.TOPIC,new PsiModificationTracker.Listener(){
    @Override public void modificationCountChanged(){
      if (!isInsideAtomicChange()) {
        clearCache();
      }
    }
  }
);
  ((PsiManagerEx)psiManager).registerRunnableToRunOnChange(new Runnable(){
    @Override public void run(){
      if (!isInsideAtomicChange()) {
        clearCache();
      }
    }
  }
);
  myProducers=collectProducers();
  myInheritors=cacheKeyHierarchy(myProducers.keySet());
  final LowMemoryWatcher watcher=LowMemoryWatcher.register(new Runnable(){
    @Override public void run(){
      if (myCreatingSem.get() == 0) {
        clearCache();
      }
    }
  }
);
  ProjectManager.getInstance().addProjectManagerListener(project,new ProjectManagerAdapter(){
    @Override public void projectClosing(    Project project){
      watcher.stop();
    }
  }
);
}
