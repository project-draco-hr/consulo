{
  final MultiMap<SemKey,NullableFunction<PsiElement,? extends SemElement>> map=new MultiMap<SemKey,NullableFunction<PsiElement,? extends SemElement>>();
  final SemRegistrar registrar=new SemRegistrar(){
    public <T extends SemElement,V extends PsiElement>void registerSemElementProvider(    SemKey<T> key,    final ElementPattern<? extends V> place,    final NullableFunction<V,T> provider){
      map.putValue(key,new NullableFunction<PsiElement,SemElement>(){
        public SemElement fun(        PsiElement element){
          if (place.accepts(element)) {
            return provider.fun((V)element);
          }
          return null;
        }
      }
);
    }
  }
;
  for (  SemContributor contributor : myProject.getExtensions(SemContributor.EP_NAME)) {
    contributor.registerSemProviders(registrar);
  }
  SemKey[] allKeys=map.keySet().toArray(new SemKey[map.size()]);
  for (  final SemKey key : allKeys) {
    myProducers.put(key,map.get(key));
  }
  return allKeys;
}
