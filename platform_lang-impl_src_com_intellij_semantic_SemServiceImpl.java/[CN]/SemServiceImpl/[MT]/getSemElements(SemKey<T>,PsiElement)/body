{
  List<T> cached=_getCachedSemElements(key,true,psi);
  if (cached != null) {
    return cached;
  }
  ensureInitialized();
  RecursionGuard.StackStamp stamp=RecursionManager.createGuard("semService").markStack();
  LinkedHashSet<T> result=new LinkedHashSet<T>();
  final Map<SemKey,List<SemElement>> map=new THashMap<SemKey,List<SemElement>>();
  for (  final SemKey each : myInheritors.get(key)) {
    List<SemElement> list=createSemElements(each,psi);
    map.put(each,list);
    result.addAll((List<T>)list);
  }
  if (stamp.mayCacheNow()) {
    final SemCacheChunk persistent=getOrCreateChunk(psi);
    for (    SemKey semKey : map.keySet()) {
      persistent.putSemElements(semKey,map.get(semKey));
    }
  }
  return new ArrayList<T>(result);
}
