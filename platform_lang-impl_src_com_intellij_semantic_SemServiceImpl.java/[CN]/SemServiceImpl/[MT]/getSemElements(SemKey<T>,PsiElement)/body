{
  final PsiElement root=getRootElement(psi);
  if (root == null) {
    return Collections.emptyList();
  }
  List<T> cached=_getCachedSemElements(key,true,psi,root);
  if (cached != null) {
    return cached;
  }
  final Map<SemKey,List<SemElement>> map=new THashMap<SemKey,List<SemElement>>();
  LinkedHashSet<T> result=null;
  for (  final SemKey each : myInheritors.get(key)) {
    List<SemElement> list=createSemElements(each,psi);
    map.put(each,list);
    if (!list.isEmpty()) {
      if (result == null)       result=new LinkedHashSet<T>();
      result.addAll((List<T>)list);
    }
  }
  final ConcurrentMap<SemKey,List<SemElement>> persistent=cacheOrGetMap(psi,root);
  for (  SemKey semKey : map.keySet()) {
    persistent.putIfAbsent(semKey,map.get(semKey));
  }
  return result == null ? Collections.<T>emptyList() : new ArrayList<T>(result);
}
