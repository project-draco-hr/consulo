{
  if (myStopExecuting) {
    return false;
  }
  PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() != myIsConstructor)     return true;
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    substitutor=obtainSubstitutor(substitutor,method);
    boolean isAccessible=isAccessible(method);
    GroovyPsiElement fileResolveContext=state.get(RESOLVE_CONTEXT);
    boolean isStaticsOK=isStaticsOK(method,fileResolveContext);
    if (PsiUtil.isApplicable(myArgumentTypes,method,substitutor,fileResolveContext instanceof GrMethodCallExpression,(GroovyPsiElement)myPlace)) {
      myCandidates.add(new GroovyResolveResultImpl(method,fileResolveContext,substitutor,isAccessible,isStaticsOK));
    }
 else {
      myInapplicableCandidates.add(new GroovyResolveResultImpl(method,fileResolveContext,substitutor,isAccessible,isStaticsOK));
    }
    return true;
  }
  return true;
}
