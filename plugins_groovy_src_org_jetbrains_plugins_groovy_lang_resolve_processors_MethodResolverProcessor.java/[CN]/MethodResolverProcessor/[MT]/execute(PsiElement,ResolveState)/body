{
  if (myStopExecuting) {
    return false;
  }
  PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (myName != null && !(element instanceof GrAccessorMethod)) {
      if (GroovyPropertyUtils.isSimplePropertyGetter(method,myName)) {
        if (!(method instanceof GrMethod) || !isFieldReferenceInSameClass(method,myName)) {
          final PsiType type=method.getReturnType();
          if (type instanceof GrClosureType) {
            if (PsiUtil.isApplicable(myArgumentTypes,(GrClosureType)type,element.getManager())) {
              myCandidates.add(new GroovyResolveResultImpl(method,myCurrentFileResolveContext,substitutor,isAccessible(method),isStaticsOK(method)));
            }
 else {
              myInapplicableCandidates.add(new GroovyResolveResultImpl(method,myCurrentFileResolveContext,substitutor,isAccessible(method),isStaticsOK(method)));
            }
            return true;
          }
        }
      }
    }
    if (myName != null && !myName.equals(method.getName()))     return true;
    if (method.isConstructor() != myIsConstructor)     return true;
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    substitutor=obtainSubstitutor(substitutor,method);
    boolean isAccessible=isAccessible(method);
    boolean isStaticsOK=isStaticsOK(method);
    if (PsiUtil.isApplicable(myArgumentTypes,method,substitutor,myCurrentFileResolveContext instanceof GrMethodCallExpression)) {
      myCandidates.add(new GroovyResolveResultImpl(method,myCurrentFileResolveContext,substitutor,isAccessible,isStaticsOK));
    }
 else {
      myInapplicableCandidates.add(new GroovyResolveResultImpl(method,myCurrentFileResolveContext,substitutor,isAccessible,isStaticsOK));
    }
    return true;
  }
 else   if (element instanceof PsiVariable) {
    if (myName != null && !myName.equals(((PsiVariable)element).getName()))     return true;
    if (isApplicableClosure((PsiVariable)element)) {
      myCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiVariable)element),isStaticsOK((PsiVariable)element)));
    }
 else {
      myInapplicableCandidates.add(new GroovyResolveResultImpl(element,myCurrentFileResolveContext,substitutor,isAccessible((PsiVariable)element),isStaticsOK((PsiVariable)element)));
    }
  }
  return true;
}
