{
  List<GroovyResolveResult> array=getCandidatesInternal();
  if (array.size() == 1)   return array.toArray(new GroovyResolveResult[array.size()]);
  List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
  Iterator<GroovyResolveResult> itr=array.iterator();
  result.add(itr.next());
  Outer:   while (itr.hasNext()) {
    GroovyResolveResult resolveResult=itr.next();
    PsiElement currentElement=resolveResult.getElement();
    if (currentElement instanceof PsiMethod) {
      PsiMethod currentMethod=(PsiMethod)currentElement;
      for (Iterator<GroovyResolveResult> iterator=result.iterator(); iterator.hasNext(); ) {
        final GroovyResolveResult otherResolveResult=iterator.next();
        PsiElement element=otherResolveResult.getElement();
        if (element instanceof PsiMethod) {
          PsiMethod method=(PsiMethod)element;
          final int res=compareMethods(currentMethod,resolveResult.getSubstitutor(),method,otherResolveResult.getSubstitutor());
          if (res > 0) {
            continue Outer;
          }
 else           if (res < 0) {
            iterator.remove();
          }
        }
      }
    }
    result.add(resolveResult);
  }
  return result.toArray(new GroovyResolveResult[result.size()]);
}
