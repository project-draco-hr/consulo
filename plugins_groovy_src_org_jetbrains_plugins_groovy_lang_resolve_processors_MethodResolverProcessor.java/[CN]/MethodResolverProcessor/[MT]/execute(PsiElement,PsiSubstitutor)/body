{
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() != myIsConstructor)     return true;
    if (!isAccessible((PsiNamedElement)element))     return true;
    substitutor=inferMethodTypeParameters(method,substitutor);
    String name=myName;
    if (myCurrentFileResolveContext instanceof GrImportStatement) {
      GrImportStatement importStatement=(GrImportStatement)myCurrentFileResolveContext;
      GrCodeReferenceElement reference=((GrImportStatement)myCurrentFileResolveContext).getImportReference();
      if (reference != null && importStatement.isAliasedImport()) {
        name=reference.getReferenceName();
      }
    }
    if (myForCompletion || (PsiUtil.isApplicable(myArgumentTypes,method,substitutor,myCurrentFileResolveContext instanceof GrMethodCallExpression)) && name != null && name.equals(method.getName())) {
      myCandidates.add(new GroovyResolveResultImpl(method,true,myCurrentFileResolveContext,substitutor));
    }
 else {
      myInapplicableCandidates.add(new GroovyResolveResultImpl(method,true,myCurrentFileResolveContext,substitutor));
    }
    return true;
  }
 else   if (element instanceof PsiVariable) {
    if (myForCompletion || element instanceof GrField && ((GrField)element).isProperty() || isClosure((PsiVariable)element)) {
      return super.execute(element,substitutor);
    }
  }
  return true;
}
