{
  if (!method1.getName().equals(method2.getName()))   return false;
  if (method1 instanceof DominanceAwareMethod && ((DominanceAwareMethod)method1).dominates(substitutor1,method2,substitutor2,(GroovyPsiElement)myPlace)) {
    return true;
  }
  if (method1 instanceof GrGdkMethod && method2 instanceof GrGdkMethod) {
    method1=((GrGdkMethod)method1).getStaticMethod();
    method2=((GrGdkMethod)method2).getStaticMethod();
  }
  if (myIsConstructor && myArgumentTypes != null && myArgumentTypes.length == 1) {
    if (method1.getParameterList().getParametersCount() == 0)     return true;
    if (method2.getParameterList().getParametersCount() == 0)     return false;
  }
  PsiParameter[] params1=method1.getParameterList().getParameters();
  PsiParameter[] params2=method2.getParameterList().getParameters();
  if (myArgumentTypes == null && params1.length != params2.length)   return false;
  if (params1.length < params2.length) {
    if (params1.length == 0)     return false;
    final PsiType lastType=params1[params1.length - 1].getType();
    return lastType instanceof PsiArrayType;
  }
  for (int i=0; i < params2.length; i++) {
    PsiType type1=substitutor1.substitute(params1[i].getType());
    PsiType type2=substitutor2.substitute(params2[i].getType());
    if (myArgumentTypes != null && myArgumentTypes.length > i) {
      PsiType argType=myArgumentTypes[i];
      if (argType != null) {
        final boolean converts1=TypesUtil.isAssignable(type1,argType,manager,scope,false);
        final boolean converts2=TypesUtil.isAssignable(type2,argType,manager,scope,false);
        if (converts1 != converts2) {
          return converts2;
        }
      }
    }
    if (!typesAgree(manager,scope,type1,type2))     return false;
  }
  return true;
}
