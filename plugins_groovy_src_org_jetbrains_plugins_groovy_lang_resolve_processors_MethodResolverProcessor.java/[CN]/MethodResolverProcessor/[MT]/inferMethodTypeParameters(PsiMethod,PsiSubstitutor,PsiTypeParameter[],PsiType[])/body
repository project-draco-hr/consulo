{
  if (typeParameters.length == 0)   return partialSubstitutor;
  if (argumentsSupplied()) {
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    final int max=Math.max(parameters.length,argTypes.length);
    PsiType[] parameterTypes=new PsiType[max];
    PsiType[] argumentTypes=new PsiType[max];
    for (int i=0; i < parameterTypes.length; i++) {
      final PsiType paramType=handleVarargs(argTypes,parameters,i);
      parameterTypes[i]=paramType;
      argumentTypes[i]=handleConversion(paramType,argTypes,i);
    }
    final PsiResolveHelper helper=JavaPsiFacade.getInstance(method.getProject()).getResolveHelper();
    PsiSubstitutor substitutor=helper.inferTypeArguments(typeParameters,parameterTypes,argumentTypes,LanguageLevel.HIGHEST);
    for (    PsiTypeParameter typeParameter : typeParameters) {
      if (!substitutor.getSubstitutionMap().containsKey(typeParameter)) {
        substitutor=inferFromContext(typeParameter,PsiUtil.getSmartReturnType(method),substitutor,helper);
      }
    }
    return partialSubstitutor.putAll(substitutor);
  }
  return partialSubstitutor;
}
