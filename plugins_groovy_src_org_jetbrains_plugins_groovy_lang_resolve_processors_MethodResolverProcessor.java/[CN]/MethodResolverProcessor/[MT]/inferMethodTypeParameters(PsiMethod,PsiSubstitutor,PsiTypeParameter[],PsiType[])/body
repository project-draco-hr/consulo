{
  if (typeParameters.length == 0)   return partialSubstitutor;
  if (argumentsSupplied()) {
    final GrClosureSignature erasedSignature=GrClosureSignatureUtil.createSignatureWithErasedParameterTypes(method);
    final GrClosureSignature signature=GrClosureSignatureUtil.createSignature(method,partialSubstitutor);
    final GrClosureParameter[] params=signature.getParameters();
    final GrClosureSignatureUtil.ArgInfo<PsiType>[] argInfos=GrClosureSignatureUtil.mapArgTypesToParameters(erasedSignature,argTypes,(GroovyPsiElement)myPlace);
    if (argInfos == null)     return partialSubstitutor;
    int max=Math.max(params.length,argTypes.length);
    PsiType[] parameterTypes=new PsiType[max];
    PsiType[] argumentTypes=new PsiType[max];
    int i=0;
    for (int paramIndex=0; paramIndex < argInfos.length; paramIndex++) {
      GrClosureSignatureUtil.ArgInfo<PsiType> argInfo=argInfos[paramIndex];
      final List<PsiType> psiTypes=argInfo.args;
      PsiType paramType=params[paramIndex].getType();
      if (argInfo.isMultiArg) {
        if (paramType instanceof PsiArrayType)         paramType=((PsiArrayType)paramType).getComponentType();
      }
      for (      PsiType type : psiTypes) {
        parameterTypes[i]=paramType;
        argumentTypes[i]=handleConversion(paramType,type);
        i++;
      }
    }
    final PsiResolveHelper helper=JavaPsiFacade.getInstance(method.getProject()).getResolveHelper();
    PsiSubstitutor substitutor=helper.inferTypeArguments(typeParameters,parameterTypes,argumentTypes,LanguageLevel.HIGHEST);
    for (    PsiTypeParameter typeParameter : typeParameters) {
      if (!substitutor.getSubstitutionMap().containsKey(typeParameter)) {
        substitutor=inferFromContext(typeParameter,PsiUtil.getSmartReturnType(method),substitutor,helper);
      }
    }
    return partialSubstitutor.putAll(substitutor);
  }
  return partialSubstitutor;
}
