{
  final JPanel panel=new JPanel(new BorderLayout());
  final JComponent optionsPanel=createOptionsPanel();
  final JPanel subPanel=new JPanel(new BorderLayout());
  final List<Pair<String,JPanel>> panels=createAdditionalPanels();
  if (myMethod.canChangeParameters()) {
    final JPanel parametersPanel=createParametersPanel(!panels.isEmpty());
    if (!panels.isEmpty()) {
      parametersPanel.setBorder(IdeBorderFactory.createEmptyBorder());
    }
    subPanel.add(parametersPanel,BorderLayout.CENTER);
  }
  if (myMethod.canChangeVisibility() && !(myVisibilityPanel instanceof ComboBoxVisibilityPanel)) {
    subPanel.add(myVisibilityPanel,myMethod.canChangeParameters() ? BorderLayout.EAST : BorderLayout.CENTER);
  }
  panel.add(subPanel,BorderLayout.CENTER);
  final JPanel main;
  if (panels.isEmpty()) {
    main=panel;
  }
 else {
    final TabbedPaneWrapper tabbedPane=new TabbedPaneWrapper(getDisposable());
    tabbedPane.addTab(RefactoringBundle.message("parameters.border.title"),panel);
    for (    Pair<String,JPanel> extraPanel : panels) {
      tabbedPane.addTab(extraPanel.first,extraPanel.second);
    }
    main=new JPanel(new BorderLayout());
    final JComponent tabs=tabbedPane.getComponent();
    main.add(tabs,BorderLayout.CENTER);
    for (    JComponent c : UIUtil.findComponentsOfType(tabs,JComponent.class)) {
      c.setFocusCycleRoot(false);
      c.setFocusTraversalPolicy(null);
    }
  }
  final JPanel bottom=new JPanel(new BorderLayout());
  bottom.add(optionsPanel,BorderLayout.NORTH);
  bottom.add(createSignaturePanel(),BorderLayout.SOUTH);
  main.add(bottom,BorderLayout.SOUTH);
  main.setBorder(IdeBorderFactory.createEmptyBorder(5,0,0,0));
  return main;
}
