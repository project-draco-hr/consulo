{
  JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  JPanel top=new JPanel(new BorderLayout());
  if (myAllowDelegation) {
    myDelegationPanel=createDelegationPanel();
    top.add(myDelegationPanel,BorderLayout.WEST);
  }
  myPropagateParamChangesButton=new JButton(RefactoringBundle.message("changeSignature.propagate.parameters.title"));
  myPropagateParamChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Ref<CallerChooserBase<M>> chooser=new Ref<CallerChooserBase<M>>();
      Consumer<Set<M>> callback=new Consumer<Set<M>>(){
        @Override public void consume(        Set<M> callers){
          myMethodsToPropagateParameters=callers;
          myParameterPropagationTreeToReuse=chooser.get().getTree();
        }
      }
;
      chooser.set(createCallerChooser(RefactoringBundle.message("changeSignature.parameter.caller.chooser"),myParameterPropagationTreeToReuse,callback));
      chooser.get().show();
    }
  }
);
  myPropagatePanel=new JPanel();
  myPropagatePanel.add(myPropagateParamChangesButton);
  top.add(myPropagatePanel,BorderLayout.EAST);
  panel.add(top);
  if (!myMethod.isConstructor()) {
    JLabel namePrompt=new JLabel();
    myNameField=new EditorTextField(myMethod.getName());
    namePrompt.setText(RefactoringBundle.message("name.prompt"));
    namePrompt.setLabelFor(myNameField);
    panel.add(namePrompt);
    panel.add(myNameField);
    JLabel typePrompt=new JLabel();
    panel.add(typePrompt);
    final String returnTypeText=myMethod.getReturnTypeText();
    if (returnTypeText == null) {
      LOG.error(myMethod.getClass().getName());
      return panel;
    }
    myReturnTypeCodeFragment=createReturnTypeCodeFragment();
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myReturnTypeCodeFragment);
    myReturnTypeField=new EditorTextField(document,myProject,getFileType());
    typePrompt.setText(RefactoringBundle.message("changeSignature.return.type.prompt"));
    typePrompt.setLabelFor(myReturnTypeField);
    panel.add(myReturnTypeField);
    final DocumentListener documentListener=new DocumentListener(){
      public void beforeDocumentChange(      DocumentEvent event){
      }
      public void documentChanged(      DocumentEvent event){
        updateSignature();
      }
    }
;
    myNameField.addDocumentListener(documentListener);
    myReturnTypeField.addDocumentListener(documentListener);
  }
  return panel;
}
