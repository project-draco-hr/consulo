{
  JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  final JPanel methodPanel=new JPanel(new BorderLayout());
  final JPanel typePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  final JPanel namePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  final DocumentListener documentListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent event){
      updateSignature();
    }
  }
;
  final JLabel nameLabel=new JLabel(RefactoringBundle.message("name.prompt"));
  myNameField=new EditorTextField(myMethod.getName());
  nameLabel.setLabelFor(myNameField);
  namePanel.add(nameLabel);
  namePanel.add(myNameField);
  myNameField.setEnabled(myMethod.canChangeName());
  if (myMethod.canChangeName()) {
    myNameField.addDocumentListener(documentListener);
  }
  createVisibilityPanel();
  if (myMethod.canChangeReturnType() != MethodDescriptor.ReadWriteOption.None) {
    final JLabel typeLabel=new JLabel(RefactoringBundle.message("changeSignature.return.type.prompt"));
    typePanel.add(typeLabel);
    myReturnTypeCodeFragment=createReturnTypeCodeFragment();
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myReturnTypeCodeFragment);
    myReturnTypeField=createReturnTypeTextField(document);
    typeLabel.setLabelFor(myReturnTypeField);
    typePanel.add(myReturnTypeField);
    if (myMethod.canChangeReturnType() == MethodDescriptor.ReadWriteOption.ReadWrite) {
      typePanel.setPreferredSize(new Dimension(200,-1));
      myReturnTypeField.addDocumentListener(documentListener);
    }
 else {
      myReturnTypeField.setEnabled(false);
    }
  }
  final JPanel p=new JPanel(new BorderLayout());
  if (myMethod.canChangeVisibility() && myVisibilityPanel instanceof ComboBoxVisibilityPanel) {
    p.add(myVisibilityPanel,BorderLayout.WEST);
  }
  p.add(typePanel,BorderLayout.EAST);
  methodPanel.add(p,BorderLayout.WEST);
  methodPanel.add(namePanel,BorderLayout.CENTER);
  panel.add(methodPanel);
  return panel;
}
