{
  myParametersTable=new TableView<ParameterTableModelItemBase<P>>(myParametersTableModel){
    public void removeEditor(){
      clearEditorListeners();
      super.removeEditor();
    }
    @Override public void editingStopped(    ChangeEvent e){
      super.editingStopped(e);
      repaint();
    }
    private void clearEditorListeners(){
      final TableCellEditor editor=getCellEditor();
      if (editor instanceof StringTableCellEditor) {
        final StringTableCellEditor ed=(StringTableCellEditor)editor;
        ed.clearListeners();
      }
 else       if (editor instanceof CodeFragmentTableCellEditorBase) {
        ((CodeFragmentTableCellEditorBase)editor).clearListeners();
      }
    }
    public Component prepareEditor(    final TableCellEditor editor,    final int row,    final int column){
      final DocumentAdapter listener=new DocumentAdapter(){
        @Override public void documentChanged(        DocumentEvent e){
          final TableCellEditor ed=myParametersTable.getCellEditor();
          if (ed != null) {
            Object editorValue=ed.getCellEditorValue();
            myParametersTableModel.setValueAtWithoutUpdate(editorValue,row,column);
            updateSignature();
          }
        }
      }
;
      if (editor instanceof StringTableCellEditor) {
        final StringTableCellEditor ed=(StringTableCellEditor)editor;
        ed.addDocumentListener(listener);
      }
 else       if (editor instanceof CodeFragmentTableCellEditorBase) {
        ((CodeFragmentTableCellEditorBase)editor).addDocumentListener(listener);
      }
      return super.prepareEditor(editor,row,column);
    }
  }
;
  myParametersTable.setCellSelectionEnabled(true);
  myParametersTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myParametersTable.getSelectionModel().setSelectionInterval(0,0);
  myParametersTable.setSurrendersFocusOnKeystroke(true);
  myPropagateParamChangesButton.setShortcut(CustomShortcutSet.fromString("alt G"));
  if (isListTableViewSupported() && Registry.is("change.signature.awesome.mode")) {
    myParametersList=new JBListTable(myParametersTable){
      @Override protected JComponent getRowRenderer(      JTable table,      int row,      boolean selected,      boolean focused){
        final List<ParameterTableModelItemBase<P>> items=myParametersTable.getItems();
        final JComponent component=getRowPresentation(items.get(row),selected,focused);
        for (        EditorTextField editorTextField : UIUtil.findComponentsOfType(component,EditorTextField.class)) {
          editorTextField.addSettingsProvider(new EditorSettingsProvider(){
            @Override public void customizeSettings(            EditorEx editor){
              editor.getSettings().setWhitespacesShown(false);
            }
          }
);
        }
        return component;
      }
      @Override protected boolean isRowEmpty(      int row){
        final List<ParameterTableModelItemBase<P>> items=myParametersTable.getItems();
        return isEmptyRow(items.get(row));
      }
      @Override protected JBTableRowEditor getRowEditor(      final int row){
        final List<ParameterTableModelItemBase<P>> items=myParametersTable.getItems();
        JBTableRowEditor editor=getTableEditor(myParametersList.getTable(),items.get(row));
        LOG.assertTrue(editor != null);
        editor.addDocumentListener(new JBTableRowEditor.RowDocumentListener(){
          @Override public void documentChanged(          DocumentEvent e,          int column){
            if (myParametersTableModel.getColumnClass(column).equals(String.class)) {
              myParametersTableModel.setValueAtWithoutUpdate(e.getDocument().getText(),row,column);
            }
            updateSignature();
          }
        }
);
        return editor;
      }
      @Override protected JBTableRow getRowAt(      final int row){
        return new JBTableRow(){
          @Override public Object getValueAt(          int column){
            return myInternalTable.getValueAt(row,column);
          }
        }
;
      }
    }
;
    final JPanel buttonsPanel=ToolbarDecorator.createDecorator(myParametersList.getTable()).addExtraAction(myPropagateParamChangesButton).createPanel();
    myParametersList.getTable().getModel().addTableModelListener(mySignatureUpdater);
    return buttonsPanel;
  }
 else {
    final JPanel buttonsPanel=ToolbarDecorator.createDecorator(getTableComponent()).addExtraAction(myPropagateParamChangesButton).createPanel();
    myPropagateParamChangesButton.setEnabled(false);
    myPropagateParamChangesButton.setVisible(false);
    myParametersTable.setStriped(true);
    myParametersTableModel.addTableModelListener(mySignatureUpdater);
    customizeParametersTable(myParametersTable);
    return buttonsPanel;
  }
}
