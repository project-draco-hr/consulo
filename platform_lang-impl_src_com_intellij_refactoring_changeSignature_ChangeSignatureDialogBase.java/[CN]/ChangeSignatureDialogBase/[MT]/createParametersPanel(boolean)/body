{
  myParametersTable=new TableView<ParameterTableModelItemBase<P>>(myParametersTableModel){
    @Override public void editingStopped(    ChangeEvent e){
      super.editingStopped(e);
      repaint();
    }
    @Nullable @Override public TableCellEditor getCellEditor(    int row,    int column){
      final TableCellEditor editor=super.getCellEditor(row,column);
      final DocumentAdapter listener=new DocumentAdapter(){
        @Override public void documentChanged(        DocumentEvent e){
          final TableCellEditor ed=myParametersTable.getCellEditor();
          if (ed != null) {
            Object editorValue=ed.getCellEditorValue();
            myParametersTableModel.setValueAtWithoutUpdate(editorValue,myParametersTable.getSelectedRow(),myParametersTable.getSelectedColumn());
            updateSignature();
          }
        }
      }
;
      if (editor instanceof StringTableCellEditor) {
        final StringTableCellEditor ed=(StringTableCellEditor)editor;
        ed.addDocumentListener(listener);
      }
 else       if (editor instanceof CodeFragmentTableCellEditorBase) {
        ((CodeFragmentTableCellEditorBase)editor).addDocumentListener(listener);
      }
      return editor;
    }
  }
;
  myParametersTable.setCellSelectionEnabled(true);
  myParametersTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myParametersTable.getSelectionModel().setSelectionInterval(0,0);
  myParametersTable.setSurrendersFocusOnKeystroke(true);
  myPropagateParamChangesButton.setShortcut(CustomShortcutSet.fromString("alt G"));
  if (Registry.is("change.signature.awesome.mode") && isListTableViewSupported()) {
    myParametersList=new JBListTable(myParametersTable){
      @Override protected JComponent getRowRenderer(      JTable table,      int row,      boolean selected,      boolean focused){
        final List<ParameterTableModelItemBase<P>> items=myParametersTable.getItems();
        return getRowPresentation(items.get(row),selected,focused);
      }
      @Override protected JBTableRowEditor getRowEditor(      int row){
        final List<ParameterTableModelItemBase<P>> items=myParametersTable.getItems();
        return getTableEditor(myParametersList.getTable(),items.get(row));
      }
      @Override protected JBTableRow getRowAt(      final int row){
        return new JBTableRow(){
          @Override public Object getValueAt(          int column){
            return myInternalTable.getValueAt(row,column);
          }
        }
;
      }
    }
;
    final JPanel buttonsPanel=ToolbarDecorator.createDecorator(myParametersList.getTable()).addExtraAction(myPropagateParamChangesButton).createPanel();
    myParametersList.getTable().getModel().addTableModelListener(mySignatureUpdater);
    return buttonsPanel;
  }
 else {
    final JPanel buttonsPanel=ToolbarDecorator.createDecorator(getTableComponent()).addExtraAction(myPropagateParamChangesButton).createPanel();
    myPropagateParamChangesButton.setEnabled(false);
    myPropagateParamChangesButton.setVisible(false);
    myParametersTable.setStriped(true);
    myParametersTableModel.addTableModelListener(mySignatureUpdater);
    customizeParametersTable(myParametersTable);
    return buttonsPanel;
  }
}
