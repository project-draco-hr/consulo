{
  final JPanel panel=new JPanel(new BorderLayout());
  if (myAllowDelegation) {
    myDelegationPanel=createDelegationPanel();
    panel.add(myDelegationPanel,BorderLayout.WEST);
  }
  myPropagateParamChangesButton=new JButton(RefactoringBundle.message("changeSignature.propagate.parameters.title"));
  myPropagateParamChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Ref<CallerChooserBase<M>> chooser=new Ref<CallerChooserBase<M>>();
      Consumer<Set<M>> callback=new Consumer<Set<M>>(){
        @Override public void consume(        Set<M> callers){
          myMethodsToPropagateParameters=callers;
          myParameterPropagationTreeToReuse=chooser.get().getTree();
        }
      }
;
      try {
        chooser.set(createCallerChooser(RefactoringBundle.message("changeSignature.parameter.caller.chooser"),myParameterPropagationTreeToReuse,callback));
      }
 catch (      ProcessCanceledException ex) {
        return;
      }
      chooser.get().show();
    }
  }
);
  myPropagatePanel=new JPanel();
  myPropagatePanel.add(myPropagateParamChangesButton);
  panel.add(myPropagatePanel,BorderLayout.EAST);
  final JPanel result=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  result.add(panel);
  return result;
}
