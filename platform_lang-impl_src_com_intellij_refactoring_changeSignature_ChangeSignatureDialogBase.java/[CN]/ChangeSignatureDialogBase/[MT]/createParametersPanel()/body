{
  myParametersTable=new TableView<ParameterTableModelItemBase<P>>(myParametersTableModel){
    @Override public void editingStopped(    ChangeEvent e){
      super.editingStopped(e);
      repaint();
    }
    @Nullable @Override public TableCellEditor getCellEditor(    int row,    int column){
      final TableCellEditor editor=super.getCellEditor(row,column);
      final DocumentAdapter listener=new DocumentAdapter(){
        @Override public void documentChanged(        DocumentEvent e){
          final TableCellEditor ed=myParametersTable.getCellEditor();
          if (ed != null) {
            Object editorValue=ed.getCellEditorValue();
            myParametersTableModel.setValueAtWithoutUpdate(editorValue,myParametersTable.getSelectedRow(),myParametersTable.getSelectedColumn());
            updateSignature();
          }
        }
      }
;
      if (editor instanceof StringTableCellEditor) {
        final StringTableCellEditor ed=(StringTableCellEditor)editor;
        ed.addDocumentListener(listener);
      }
 else       if (editor instanceof CodeFragmentTableCellEditorBase) {
        ((CodeFragmentTableCellEditorBase)editor).addDocumentListener(listener);
      }
      return editor;
    }
  }
;
  UIUtil.setTableDecorationEnabled(myParametersTable);
  myParametersTable.setCellSelectionEnabled(true);
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorder(RefactoringBundle.message("parameters.border.title")));
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myParametersTable);
  JPanel tablePanel=new JPanel(new BorderLayout());
  tablePanel.add(scrollPane,BorderLayout.CENTER);
  tablePanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  panel.add(tablePanel,BorderLayout.CENTER);
  myParametersTable.setPreferredScrollableViewportSize(new Dimension(450,myParametersTable.getRowHeight() * 8));
  myParametersTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myParametersTable.getSelectionModel().setSelectionInterval(0,0);
  myParametersTable.setSurrendersFocusOnKeystroke(true);
  myPropagateParamChangesButton.setShortcut(KeyboardShortcut.fromString("alt G"));
  final JPanel buttonsPanel=EditableRowTable.createButtonsTable(myParametersTable,myParametersTableModel,false,true,false,myPropagateParamChangesButton);
  myPropagateParamChangesButton.setEnabled(false);
  myPropagateParamChangesButton.setVisible(false);
  panel.add(buttonsPanel,BorderLayout.EAST);
  myParametersTableModel.addTableModelListener(new TableModelListener(){
    public void tableChanged(    TableModelEvent e){
      updateSignature();
    }
  }
);
  customizeParametersTable(myParametersTable);
  return panel;
}
