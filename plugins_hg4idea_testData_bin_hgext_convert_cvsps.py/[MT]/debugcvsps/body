def debugcvsps(ui, *args, **opts):
    'Read CVS rlog for current directory or named path in\n    repository, and convert the log to changesets based on matching\n    commit log entries and dates.\n    '
    if opts['new_cache']:
        cache = 'write'
    elif opts['update_cache']:
        cache = 'update'
    else:
        cache = None
    revisions = opts['revisions']
    try:
        if args:
            log = []
            for d in args:
                log += createlog(ui, d, root=opts['root'], cache=cache)
        else:
            log = createlog(ui, root=opts['root'], cache=cache)
    except logerror as e:
        ui.write(('%r\n' % e))
        return
    changesets = createchangeset(ui, log, opts['fuzz'])
    del log
    off = len(revisions)
    branches = {}
    ancestors = {}
    for cs in changesets:
        if opts['ancestors']:
            if ((cs.branch not in branches) and cs.parents and cs.parents[0].id):
                ancestors[cs.branch] = (changesets[(cs.parents[0].id - 1)].branch, cs.parents[0].id)
            branches[cs.branch] = cs.id
        if (opts['branches'] and ((cs.branch or 'HEAD') not in opts['branches'])):
            continue
        if (not off):
            ui.write('---------------------\n')
            ui.write(('PatchSet %d \n' % cs.id))
            ui.write(('Date: %s\n' % util.datestr(cs.date, '%Y/%m/%d %H:%M:%S %1%2')))
            ui.write(('Author: %s\n' % cs.author))
            ui.write(('Branch: %s\n' % (cs.branch or 'HEAD')))
            ui.write(('Tag%s: %s \n' % (['', 's'][(len(cs.tags) > 1)], (','.join(cs.tags) or '(none)'))))
            branchpoints = getattr(cs, 'branchpoints', None)
            if branchpoints:
                ui.write(('Branchpoints: %s \n' % ', '.join(branchpoints)))
            if (opts['parents'] and cs.parents):
                if (len(cs.parents) > 1):
                    ui.write(('Parents: %s\n' % ','.join([str(p.id) for p in cs.parents])))
                else:
                    ui.write(('Parent: %d\n' % cs.parents[0].id))
            if opts['ancestors']:
                b = cs.branch
                r = []
                while b:
                    (b, c) = ancestors[b]
                    r.append(('%s:%d:%d' % ((b or 'HEAD'), c, branches[b])))
                if r:
                    ui.write(('Ancestors: %s\n' % ','.join(r)))
            ui.write('Log:\n')
            ui.write(('%s\n\n' % cs.comment))
            ui.write('Members: \n')
            for f in cs.entries:
                fn = f.file
                if fn.startswith(opts['prefix']):
                    fn = fn[len(opts['prefix']):]
                ui.write(('\t%s:%s->%s%s \n' % (fn, ('.'.join([str(x) for x in f.parent]) or 'INITIAL'), '.'.join([str(x) for x in f.revision]), ['', '(DEAD)'][f.dead])))
            ui.write('\n')
        if (revisions and off):
            if ((revisions[0] == str(cs.id)) or (revisions[0] in cs.tags)):
                off = False
        if ((len(revisions) > 1) and (not off)):
            if ((revisions[1] == str(cs.id)) or (revisions[1] in cs.tags)):
                break
