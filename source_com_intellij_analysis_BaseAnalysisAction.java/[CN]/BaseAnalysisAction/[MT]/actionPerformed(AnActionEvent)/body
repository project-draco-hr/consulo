{
  DataContext dataContext=e.getDataContext();
  final Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  final Module module=(Module)dataContext.getData(DataConstants.MODULE);
  if (project != null) {
    AnalysisScope scope;
    PsiFile psiFile=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
    if (psiFile != null) {
      scope=new AnalysisScope(psiFile);
    }
 else {
      scope=getInspectionScope(dataContext);
    }
    LOG.assertTrue(scope != null);
    if (scope.getScopeType() == AnalysisScope.VIRTUAL_FILES) {
      FileDocumentManager.getInstance().saveAllDocuments();
      analyze(project,scope);
      return;
    }
    final boolean rememberScope=e.getPlace().equals(ActionPlaces.MAIN_MENU);
    final UIOptions uiOptions=((InspectionManagerEx)InspectionManagerEx.getInstance(project)).getUIOptions();
    BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(AnalysisScopeBundle.message("specify.analysis.scope",myTitle),AnalysisScopeBundle.message("analysis.scope.title",myAnalysisNoon),project,scope.getShortenName(),module != null && scope.getScopeType() != AnalysisScope.MODULE ? ModuleUtil.getModuleNameInReadAction(module) : null,rememberScope){
      @Nullable protected JComponent getAdditionalActionSettings(      final Project project){
        return BaseAnalysisAction.this.getAdditionalActionSettings(project,this);
      }
    }
;
    dlg.show();
    if (!dlg.isOK())     return;
    final int oldScopeType=uiOptions.SCOPE_TYPE;
    scope=dlg.getScope(uiOptions,scope,project,module);
    if (!rememberScope) {
      uiOptions.SCOPE_TYPE=oldScopeType;
    }
    uiOptions.ANALYZE_TEST_SOURCES=dlg.isInspectTestSources();
    scope.setIncludeTestSource(dlg.isInspectTestSources());
    FileDocumentManager.getInstance().saveAllDocuments();
    analyze(project,scope);
  }
}
