{
  DataContext dataContext=e.getDataContext();
  final Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  final Module module=(Module)dataContext.getData(DataConstants.MODULE);
  if (project != null) {
    AnalysisScope scope;
    PsiFile psiFile=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
    if (psiFile != null && !(psiFile instanceof PsiJavaFile)) {
      scope=new AnalysisScope(psiFile);
    }
 else {
      scope=getInspectionScope(dataContext);
    }
    final InspectionManagerEx.UIOptions uiOptions=((InspectionManagerEx)InspectionManagerEx.getInstance(project)).getUIOptions();
    FileProjectOrModuleDialog dlg=new FileProjectOrModuleDialog(project,scope.getDisplayName(),module != null && scope.getScopeType() != AnalysisScope.MODULE ? ModuleUtil.getModuleNameInReadAction(module) : null,scope.getScopeType() == AnalysisScope.PROJECT);
    dlg.show();
    if (!dlg.isOK())     return;
    if (dlg.isProjectScopeSelected()) {
      scope=getProjectScope(dataContext);
      uiOptions.SCOPE_TYPE=AnalysisScope.PROJECT;
    }
 else {
      if (dlg.isModuleScopeSelected()) {
        scope=getModuleScope(dataContext);
        uiOptions.SCOPE_TYPE=AnalysisScope.MODULE;
      }
 else {
        uiOptions.SCOPE_TYPE=AnalysisScope.FILE;
      }
    }
    uiOptions.ANALYZE_TEST_SOURCES=dlg.isInspectTestSources();
    scope.setIncludeTestSource(dlg.isInspectTestSources());
    FileDocumentManager.getInstance().saveAllDocuments();
    analyze(project,scope);
  }
}
