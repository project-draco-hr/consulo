{
  Project projectContext=(Project)dataContext.getData(DataConstantsEx.PROJECT_CONTEXT);
  if (projectContext != null) {
    return new AnalysisScope(projectContext);
  }
  Module moduleContext=(Module)dataContext.getData(DataConstantsEx.MODULE_CONTEXT);
  if (moduleContext != null) {
    return new AnalysisScope(moduleContext);
  }
  Module[] modulesArray=(Module[])dataContext.getData(DataConstantsEx.MODULE_CONTEXT_ARRAY);
  if (modulesArray != null) {
    return new AnalysisScope(modulesArray);
  }
  PsiFile psiFile=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
  if (psiFile != null) {
    return psiFile instanceof PsiJavaFile ? new AnalysisScope(psiFile) : null;
  }
  PsiElement psiTarget=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  if (psiTarget instanceof PsiDirectory) {
    PsiDirectory psiDirectory=(PsiDirectory)psiTarget;
    if (!psiDirectory.getManager().isInProject(psiDirectory))     return null;
    return new AnalysisScope(psiDirectory);
  }
 else   if (psiTarget instanceof PsiPackage) {
    PsiPackage pack=(PsiPackage)psiTarget;
    PsiDirectory[] dirs=pack.getDirectories(GlobalSearchScope.projectScope(pack.getProject()));
    if (dirs.length == 0)     return null;
    return new AnalysisScope(pack);
  }
 else   if (psiTarget != null) {
    return null;
  }
  final VirtualFile[] virtualFiles=(VirtualFile[])dataContext.getData(DataConstantsEx.VIRTUAL_FILE_ARRAY);
  if (virtualFiles != null) {
    Set<VirtualFile> files=new HashSet<VirtualFile>();
    for (    VirtualFile vFile : virtualFiles) {
      traverseDirectory(vFile,files);
    }
    return new AnalysisScope((Project)dataContext.getData(DataConstants.PROJECT),files);
  }
  return getProjectScope(dataContext);
}
