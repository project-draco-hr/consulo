{
  if (myCompound == null) {
    myCompound=new SettingsEditorGroup<RunnerAndConfigurationSettingsImpl>();
    Disposer.register(this,myCompound);
    if (myConfigurationEditor instanceof SettingsEditorGroup) {
      SettingsEditorGroup<RunConfiguration> group=(SettingsEditorGroup<RunConfiguration>)myConfigurationEditor;
      List<Pair<String,SettingsEditor<RunConfiguration>>> editors=group.getEditors();
      for (      Pair<String,SettingsEditor<RunConfiguration>> pair : editors) {
        myCompound.addEditor(pair.getFirst(),new ConfigToSettingsWrapper(pair.getSecond()));
      }
    }
 else {
      myCompound.addEditor(ExecutionBundle.message("run.configuration.configuration.tab.title"),new ConfigToSettingsWrapper(myConfigurationEditor));
    }
    myRunnersComponent=new RunnersEditorComponent();
    ProgramRunner[] runners=RunnerRegistry.getInstance().getRegisteredRunners();
    final Executor[] executors=ExecutorRegistry.getInstance().getRegisteredExecutors();
    for (    final Executor executor : executors) {
      for (      ProgramRunner runner : runners) {
        if (runner.canRun(executor.getId(),myConfiguration)) {
          JComponent perRunnerSettings=createCompositePerRunnerSettings(runner);
          if (perRunnerSettings != null) {
            myRunnersComponent.addRunnerComponent(runner,perRunnerSettings);
          }
        }
      }
    }
    if (myRunnerEditors.size() > 0) {
      myCompound.addEditor(ExecutionBundle.message("run.configuration.startup.connection.rab.title"),new CompositeSettingsEditor<RunnerAndConfigurationSettingsImpl>(getFactory()){
        public CompositeSettingsBuilder<RunnerAndConfigurationSettingsImpl> getBuilder(){
          return new CompositeSettingsBuilder<RunnerAndConfigurationSettingsImpl>(){
            public Collection<SettingsEditor<RunnerAndConfigurationSettingsImpl>> getEditors(){
              return myRunnerEditors;
            }
            public JComponent createCompoundEditor(){
              return myRunnersComponent.getComponent();
            }
          }
;
        }
      }
);
    }
  }
}
