{
  final FileType fileType=myHelper.getFileType();
  final PsiElement psiElement=SourceTreeToPsiMap.treeElementToPsi(element);
  final FormattingModelBuilder builder=SourceTreeToPsiMap.treeElementToPsi(element).getContainingFile().getLanguage().getFormattingModelBuilder();
  if (builder != null) {
    TextRange range=formatComments(element,startOffset,endOffset);
    final SmartPsiElementPointer pointer=SmartPointerManager.getInstance(psiElement.getProject()).createSmartPsiElementPointer(psiElement);
    final PsiFile containingFile=psiElement.getContainingFile();
    final FormattingModel model=builder.createModel(containingFile,mySettings);
    if (containingFile.getTextLength() > 0) {
      try {
        Formatter.getInstance().format(model,mySettings,mySettings.getIndentOptions(fileType),range);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    return SourceTreeToPsiMap.psiElementToTree(pointer.getElement());
  }
  final TextRange range=element.getTextRange();
  final int elementStartOffset=range.getStartOffset();
  return processRange(element,new int[]{startOffset - elementStartOffset,endOffset - elementStartOffset});
}
