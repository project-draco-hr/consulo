{
  final FileType fileType=myHelper.getFileType();
  if (useNewFormatter(fileType)) {
    PseudoTextBuilder pseudoTextBuilder=((LanguageFileType)fileType).getLanguage().getFormatter();
    if (pseudoTextBuilder == null) {
      return element;
    }
 else {
      try {
        final PseudoText pseudoText=pseudoTextBuilder.build(myHelper.getProject(),mySettings,SourceTreeToPsiMap.treeElementToPsi(element));
        final PomModel model=myHelper.getProject().getModel();
        model.runTransaction(new PomTransactionBase(SourceTreeToPsiMap.treeElementToPsi(element)){
          public PomModelEvent run() throws IncorrectOperationException {
            final PomModelEvent result=new PomModelEvent(model);
            GeneralCodeFormatter.createSimpleInstance(pseudoText,mySettings,fileType,startOffset,endOffset,result).format();
            return result;
          }
        }
,new PsiEventWrapperAspect(model,new TreeAspect(model)));
      }
 catch (      ProcessCanceledException processCanceledException) {
        throw processCanceledException;
      }
catch (      Exception e) {
        LOG.error(e);
      }
      formatComments(element,startOffset,endOffset);
      return element;
    }
  }
  final TextRange range=element.getTextRange();
  final int elementStartOffset=range.getStartOffset();
  return processRange(element,new int[]{startOffset - elementStartOffset,endOffset - elementStartOffset});
}
