{
  final FileType fileType=myHelper.getFileType();
  if (useBlockFormatter(fileType)) {
    TextRange range=element.getTextRange();
    final PsiFile containingFile=SourceTreeToPsiMap.treeElementToPsi(element).getContainingFile();
    final PsiBasedFormattingModel model=new PsiBasedFormattingModel(containingFile);
    try {
      Formatter.getInstance().format(model,createBlock(containingFile),mySettings,mySettings.getIndentOptions(fileType),range);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
    return element;
  }
  if (useNewFormatter(myHelper.getFileType())) {
    TextRange range=element.getTextRange();
    int startOffset=range.getStartOffset();
    int endOffset=range.getEndOffset();
    processRange(element,startOffset,endOffset);
    return element;
  }
  if (element instanceof CompositeElement) {
    ASTNode parent=element;
    ChameleonTransforming.transformChildren(parent);
    child1=null;
    child2=Helper.shiftForwardToNonSpace(parent.getFirstChildNode());
    int indent=-1;
    for (; child2 != null; child1=child2, child2=Helper.shiftForwardToNonSpace(child2.getTreeNext())) {
      if (child1 != null || SourceTreeToPsiMap.treeElementToPsi(parent) instanceof PsiFile) {
        child2=myCodeFormatter.format(SourceTreeToPsiMap.treeElementToPsi(parent),child1,child2,mySettings,myHelper);
      }
      if (indent < 0) {
        indent=myIndentAdjuster.calculateIndent(child2,-1);
      }
      if (child2 != null) {
        child2=myIndentAdjuster.adjustIndent(child2,indent);
      }
    }
    element=myWrapper.wrap(element);
    element=myIndentAdjuster.adjustIndent(element,parent_indent);
    myCommentFormatter.process(element);
    indent=-1;
    for (ASTNode child=element.getFirstChildNode(); child != null; child=child.getTreeNext()) {
      if (indent < 0) {
        indent=myIndentAdjuster.calculateIndent(child,-1);
      }
      child=process(child,indent);
    }
  }
  return element;
}
