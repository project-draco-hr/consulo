{
  final PsiElement psi=node.getPsi();
  final Project project=psi.getProject();
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  final PsiFile file=documentManager.getPsiFile(document);
  documentManager.commitDocument(document);
  CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  final Language baseLanguage=file.getViewProvider().getBaseLanguage();
  final FormattingModelBuilder builder=baseLanguage.getEffectiveFormattingModelBuilder(file.getViewProvider().getPsi(baseLanguage));
  final FormattingModelBuilder elementBuilder=psi.getLanguage().getEffectiveFormattingModelBuilder(psi);
  if (builder != null && elementBuilder != null) {
    ASTNode firstNonSpaceLeaf=TreeUtil.findFirstLeaf(node);
    while (firstNonSpaceLeaf != null && firstNonSpaceLeaf.getElementType() == ElementType.WHITE_SPACE) {
      firstNonSpaceLeaf=TreeUtil.nextLeaf(firstNonSpaceLeaf);
    }
    if (firstNonSpaceLeaf != null) {
      final int startOffset=firstNonSpaceLeaf.getStartOffset();
      final int endOffset=node.getTextRange().getEndOffset();
      if (startOffset < endOffset) {
        FormattingModel model=builder.createModel(file,settings);
        if (model instanceof PsiBasedFormattingModel) {
          ((PsiBasedFormattingModel)model).doNotUseallTrees();
        }
        Block block=model.getRootBlock();
        if (block instanceof XmlBlock && file.getLanguage() != StdLanguages.JAVA) {
          ((XmlBlock)block).getPolicy().dontProcessJavaTree();
        }
        final DocumentBasedFormattingModel documentModelWrapper=new DocumentBasedFormattingModel(model.getRootBlock(),document,project,settings,file.getFileType(),file);
        FormatterEx.getInstanceEx().adjustTextRange(documentModelWrapper,settings,settings.getIndentOptions(file.getFileType()),new TextRange(startOffset,endOffset));
      }
    }
  }
}
