{
  IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
  final PsiType type=FieldFromParameterUtils.getSubstitutedType(myParameter);
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
  final String parameterName=myParameter.getName();
  String propertyName=styleManager.variableNameToPropertyName(parameterName,VariableKind.PARAMETER);
  final PsiClass targetClass=PsiTreeUtil.getParentOfType(myParameter,PsiClass.class);
  final PsiMethod method=(PsiMethod)myParameter.getDeclarationScope();
  final boolean isMethodStatic=method.hasModifierProperty(PsiModifier.STATIC);
  VariableKind kind=isMethodStatic ? VariableKind.STATIC_FIELD : VariableKind.FIELD;
  SuggestedNameInfo suggestedNameInfo=styleManager.suggestVariableName(kind,propertyName,null,type);
  String[] names=suggestedNameInfo.names;
  final boolean isFinal=!isMethodStatic && method.isConstructor();
  String name=names[0];
  if (targetClass != null) {
    for (    String curName : names) {
      if (!usedNames.contains(curName) && targetClass.findFieldByName(curName,false) != null) {
        name=curName;
        break;
      }
    }
  }
  final String fieldName=usedNames.add(name) ? name : JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName(name,myParameter,true);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        FieldFromParameterUtils.createFieldAndAddAssignment(project,targetClass,method,myParameter,type,fieldName,isMethodStatic,isFinal);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
