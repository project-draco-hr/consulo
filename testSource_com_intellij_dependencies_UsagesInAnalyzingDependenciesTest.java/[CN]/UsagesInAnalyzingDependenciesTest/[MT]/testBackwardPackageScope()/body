{
  final PsiPackage bPackage=myPsiManager.findPackage("com.a");
  final DependenciesBuilder builder=new BackwardDependenciesBuilder(myProject,new AnalysisScope(bPackage,AnalysisScope.SOURCE_JAVA_FILES));
  builder.analyze();
  final Set<PsiFile> searchFor=new HashSet<PsiFile>();
  searchFor.add(myPsiManager.findClass("com.a.A",GlobalSearchScope.allScope(myProject)).getContainingFile());
  final Set<PsiFile> searchIn=new HashSet<PsiFile>();
  final PsiClass bClass=myPsiManager.findClass("com.b.B",GlobalSearchScope.allScope(myProject));
  searchIn.add(bClass.getContainingFile());
  final PsiClass cClass=myPsiManager.findClass("com.a.C",GlobalSearchScope.allScope(myProject));
  searchFor.add(cClass.getContainingFile());
  final UsageInfo[] usagesInfos=FindDependencyUtil.findBackwardDependencies(builder,searchIn,searchFor);
  final String[] psiUsages=new String[usagesInfos.length];
  for (int i=0; i < usagesInfos.length; i++) {
    final PsiFile psiFile=usagesInfos[i].getElement().getContainingFile();
    final Document document=getDocument(psiFile);
    final LexerEditorHighlighter highlighter=getHighlighter(psiFile,document);
    psiUsages[i]=new UTUsageNode(usagesInfos[i],psiFile,highlighter,document,false,false).toString();
  }
  checkResult(new String[]{"(4, 3) A myA = new A();","(4, 15) A myA = new A();","(5, 3) C myC = new C();","(5, 15) C myC = new C();","(7, 9) myA.aa();","(8, 9) myC.cc();"},psiUsages);
}
