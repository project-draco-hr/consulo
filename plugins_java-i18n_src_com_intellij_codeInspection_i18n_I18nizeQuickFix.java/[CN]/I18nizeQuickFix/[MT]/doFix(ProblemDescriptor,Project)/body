{
  final PsiLiteralExpression literalExpression=(PsiLiteralExpression)descriptor.getPsiElement();
  final PsiFile psiFile=literalExpression.getContainingFile();
  if (!JavaI18nizeQuickFixDialog.isAvailable(psiFile)) {
    return;
  }
  final JavaI18nizeQuickFixDialog dialog=createDialog(project,psiFile,literalExpression);
  dialog.show();
  if (!dialog.isOK())   return;
  final Collection<PropertiesFile> propertiesFiles=dialog.getAllPropertiesFiles();
  if (!CodeInsightUtilBase.preparePsiElementForWrite(literalExpression))   return;
  for (  PropertiesFile file : propertiesFiles) {
    if (file.findPropertyByKey(dialog.getKey()) == null && !CodeInsightUtilBase.prepareFileForWrite(file))     return;
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          try {
            performI18nization(psiFile,getEditorForFile(psiFile),dialog.getLiteralExpression(),propertiesFiles,dialog.getKey(),dialog.getValue(),dialog.getI18nizedText(),dialog.getParameters(),dialog.getPropertyCreationHandler());
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
);
    }
  }
,CodeInsightBundle.message("quickfix.i18n.command.name"),project);
}
