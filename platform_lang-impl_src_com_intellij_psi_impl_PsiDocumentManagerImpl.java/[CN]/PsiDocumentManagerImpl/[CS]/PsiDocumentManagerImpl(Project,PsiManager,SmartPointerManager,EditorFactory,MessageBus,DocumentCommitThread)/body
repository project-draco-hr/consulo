{
  myProject=project;
  myPsiManager=psiManager;
  myDocumentCommitThread=documentCommitThread;
  mySmartPointerManager=(SmartPointerManagerImpl)smartPointerManager;
  mySynchronizer=new PsiToDocumentSynchronizer(this,bus);
  if (!project.isDefault()) {
    myPsiManager.addPsiTreeChangeListener(mySynchronizer);
    editorFactory.getEventMulticaster().addDocumentListener(this,myProject);
    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC,new FileDocumentManagerAdapter(){
      @Override public void fileContentLoaded(      @NotNull final VirtualFile virtualFile,      @NotNull Document document){
        PsiFile psiFile=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
          @Override public PsiFile compute(){
            return getCachedPsiFile(virtualFile);
          }
        }
);
        fireDocumentCreated(document,psiFile);
      }
    }
);
    bus.connect().subscribe(DocumentBulkUpdateListener.TOPIC,new DocumentBulkUpdateListener.Adapter(){
      @Override public void updateFinished(      @NotNull Document doc){
        documentCommitThread.queueCommit(project,doc,"Bulk update finished");
      }
    }
);
    ApplicationManager.getApplication().addApplicationListener(new ApplicationAdapter(){
      @Override public void beforeWriteActionStart(      Object action){
        documentCommitThread.disable("Write action started: " + action);
      }
      @Override public void writeActionFinished(      Object action){
        documentCommitThread.enable("Write action finished: " + action);
      }
    }
,myProject);
    documentCommitThread.enable("project open");
  }
}
