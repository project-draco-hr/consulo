{
  document.putUserData(TEMP_TREE_IN_DOCUMENT_KEY,null);
  TextBlock textBlock=getTextBlock(document,file);
  if (textBlock.isEmpty())   return false;
  ((DocumentImpl)document).normalizeRangeMarkers();
  myIsCommitInProgress=true;
  try {
    if (mySmartPointerManager != null) {
      SmartPointerManagerImpl.synchronizePointers(file);
    }
    myTreeElementBeingReparsedSoItWontBeCollected=((PsiFileImpl)file).calcTreeElement();
    if (textBlock.isEmpty())     return false;
    textBlock.lock();
    final CharSequence chars=document.getCharsSequence();
    final Boolean data=document.getUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY);
    if (data != null) {
      document.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,null);
      file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,data);
    }
    final String oldText=ApplicationManagerEx.getApplicationEx().isInternal() && !ApplicationManagerEx.getApplicationEx().isUnitTestMode() ? myTreeElementBeingReparsedSoItWontBeCollected.getText() : null;
    int startOffset;
    int endOffset;
    int lengthShift;
    if (file.getViewProvider().supportsIncrementalReparse(file.getLanguage())) {
      startOffset=textBlock.getStartOffset();
      int psiEndOffset=textBlock.getPsiEndOffset();
      endOffset=psiEndOffset;
      lengthShift=textBlock.getTextEndOffset() - psiEndOffset;
      if (oldText != null) {
        String psiPrefix=oldText.substring(0,startOffset);
        String docPrefix=chars.subSequence(0,startOffset).toString();
        String psiSuffix=oldText.substring(psiEndOffset);
        String docSuffix=chars.subSequence(textBlock.getTextEndOffset(),chars.length()).toString();
        if (!psiPrefix.equals(docPrefix) || !psiSuffix.equals(docSuffix)) {
          String msg="PSI/document inconsistency before reparse: ";
          if (!psiPrefix.equals(docPrefix)) {
            msg=msg + "psiPrefix=" + psiPrefix+ "; docPrefix="+ docPrefix+ ";";
          }
          if (!psiSuffix.equals(docSuffix)) {
            msg=msg + "psiSuffix=" + psiSuffix+ "; docSuffix="+ docSuffix+ ";";
          }
          throw new AssertionError(msg);
        }
      }
 else       if (document.getTextLength() - textBlock.getTextEndOffset() != file.getTextLength() - psiEndOffset) {
        throw new AssertionError("PSI/document inconsistency before reparse: file=" + file);
      }
    }
 else {
      startOffset=0;
      endOffset=document.getTextLength();
      lengthShift=document.getTextLength() - file.getTextLength();
    }
    myBlockSupport.reparseRange(file,startOffset,endOffset,lengthShift,chars);
    textBlock.unlock();
    textBlock.clear();
    if (file.getTextLength() != document.getTextLength()) {
      if (ApplicationManagerEx.getApplicationEx().isInternal()) {
        boolean x=false;
        if (x) {
          myBlockSupport.reparseRange(file,startOffset,endOffset,lengthShift,chars);
        }
        throw new AssertionError("commitDocument left PSI inconsistent; file len=" + file.getTextLength() + "; doc len="+ document.getTextLength()+ "; file text="+ file.getText()+ "; doc text="+ document.getText()+ "; old file text="+ oldText);
      }
      throw new AssertionError("commitDocument left PSI inconsistent: " + file);
    }
  }
  finally {
    myTreeElementBeingReparsedSoItWontBeCollected=null;
    myIsCommitInProgress=false;
  }
  return true;
}
