{
  final PsiElement element=descriptor.getPsiElement().getParent().getParent();
  if (!(element instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression formatArgument=FormatUtils.getFormatArgument(argumentList);
  if (!(formatArgument instanceof PsiPolyadicExpression)) {
    return;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)formatArgument;
  final StringBuilder newExpression=new StringBuilder();
  final PsiExpression[] operands=polyadicExpression.getOperands();
  for (  PsiExpression operand : operands) {
    if (operand instanceof PsiReferenceExpression) {
      argumentList.add(operand);
      continue;
    }
    final PsiJavaToken token=polyadicExpression.getTokenBeforeOperand(operand);
    if (token != null) {
      newExpression.append(token.getText());
    }
    newExpression.append(operand.getText());
  }
  replaceExpression(polyadicExpression,newExpression.toString());
}
