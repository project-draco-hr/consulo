{
  HashMap<PsiElement,HashSet<PsiElement>> reportedNonDelegatedUsages=new HashMap<PsiElement,HashSet<PsiElement>>();
  HashMap<PsiClass,HashSet<PsiElement>> reportedUpcasts=new HashMap<PsiClass,HashSet<PsiElement>>();
  final String classDescription=RefactoringUIUtil.getDescription(myClass,false);
  for (  UsageInfo aUsage : usage) {
    final PsiElement element=aUsage.getElement();
    if (aUsage instanceof InheritanceToDelegationUsageInfo) {
      InheritanceToDelegationUsageInfo usageInfo=(InheritanceToDelegationUsageInfo)aUsage;
      if (!myIsDelegateOtherMembers && !usageInfo.getDelegateFieldAccessible().isAccessible()) {
        if (usageInfo instanceof NonDelegatedMemberUsageInfo) {
          final PsiElement nonDelegatedMember=((NonDelegatedMemberUsageInfo)usageInfo).nonDelegatedMember;
          HashSet<PsiElement> reportedContainers=reportedNonDelegatedUsages.get(nonDelegatedMember);
          if (reportedContainers == null) {
            reportedContainers=new HashSet<PsiElement>();
            reportedNonDelegatedUsages.put(nonDelegatedMember,reportedContainers);
          }
          final PsiElement container=ConflictsUtil.getContainer(element);
          if (!reportedContainers.contains(container)) {
            String message=RefactoringBundle.message("0.uses.1.of.an.instance.of.a.2",RefactoringUIUtil.getDescription(container,true),RefactoringUIUtil.getDescription(nonDelegatedMember,true),classDescription);
            conflicts.add(ConflictsUtil.capitalize(message));
            reportedContainers.add(container);
          }
        }
 else         if (usageInfo instanceof UpcastedUsageInfo) {
          final PsiClass upcastedTo=((UpcastedUsageInfo)usageInfo).upcastedTo;
          HashSet<PsiElement> reportedContainers=reportedUpcasts.get(upcastedTo);
          if (reportedContainers == null) {
            reportedContainers=new HashSet<PsiElement>();
            reportedUpcasts.put(upcastedTo,reportedContainers);
          }
          final PsiElement container=ConflictsUtil.getContainer(element);
          if (container != null && !reportedContainers.contains(container)) {
            String message=RefactoringBundle.message("0.upcasts.an.instance.of.1.to.2",RefactoringUIUtil.getDescription(container,true),classDescription,RefactoringUIUtil.getDescription(upcastedTo,false));
            conflicts.add(ConflictsUtil.capitalize(message));
            reportedContainers.add(container);
          }
        }
      }
    }
 else     if (aUsage instanceof NoLongerOverridingSubClassMethodUsageInfo) {
      NoLongerOverridingSubClassMethodUsageInfo info=(NoLongerOverridingSubClassMethodUsageInfo)aUsage;
      String message=RefactoringBundle.message("0.will.no.longer.override.1",RefactoringUIUtil.getDescription(info.getSubClassMethod(),true),RefactoringUIUtil.getDescription(info.getOverridenMethod(),true));
      conflicts.add(message);
    }
  }
}
