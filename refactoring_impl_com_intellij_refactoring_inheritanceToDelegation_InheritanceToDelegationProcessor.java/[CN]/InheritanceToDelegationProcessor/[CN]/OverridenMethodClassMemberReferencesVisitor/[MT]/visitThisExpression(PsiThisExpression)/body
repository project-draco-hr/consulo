{
class Visitor implements ClassInstanceScanner.ClassInstanceReferenceVisitor {
    public void visitQualifier(    PsiReferenceExpression qualified,    PsiExpression instanceRef,    PsiElement referencedInstance){
      LOG.assertTrue(false);
    }
    public void visitTypeCast(    PsiTypeCastExpression typeCastExpression,    PsiExpression instanceRef,    PsiElement referencedInstance){
      processType(typeCastExpression.getCastType().getType());
    }
    public void visitReadUsage(    PsiExpression instanceRef,    PsiType expectedType,    PsiElement referencedInstance){
      processType(expectedType);
    }
    public void visitWriteUsage(    PsiExpression instanceRef,    PsiType assignedType,    PsiElement referencedInstance){
      LOG.assertTrue(false);
    }
    private void processType(    PsiType type){
      final PsiClass resolved=PsiUtil.resolveClassInType(type);
      if (resolved != null && !myBaseClassBases.contains(resolved)) {
        myPsiActions.add(new QualifyThis(expression));
      }
    }
  }
  Visitor visitor=new Visitor();
  ClassInstanceScanner.processNonArrayExpression(visitor,expression,null);
}
