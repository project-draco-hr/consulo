{
  final TreePath[] treePaths=tree.getSelectionPaths();
  final List<RefEntity> selectedElements=new ArrayList<RefEntity>();
  final Map<RefEntity,Set<QuickFix>> actions=new HashMap<RefEntity,Set<QuickFix>>();
  for (  TreePath selectionPath : treePaths) {
    TreeUtil.traverseDepth((TreeNode)selectionPath.getLastPathComponent(),new TreeUtil.Traverse(){
      @Override public boolean accept(      final Object node){
        if (!((InspectionTreeNode)node).isValid())         return true;
        if (node instanceof OfflineProblemDescriptorNode) {
          final OfflineProblemDescriptorNode descriptorNode=(OfflineProblemDescriptorNode)node;
          final RefEntity element=descriptorNode.getElement();
          selectedElements.add(element);
          Set<QuickFix> quickFixes=actions.get(element);
          if (quickFixes == null) {
            quickFixes=new HashSet<QuickFix>();
            actions.put(element,quickFixes);
          }
          final CommonProblemDescriptor descriptor=descriptorNode.getDescriptor();
          if (descriptor != null) {
            final QuickFix[] fixes=descriptor.getFixes();
            if (fixes != null) {
              ContainerUtil.addAll(quickFixes,fixes);
            }
          }
        }
 else         if (node instanceof RefElementNode) {
          selectedElements.add(((RefElementNode)node).getElement());
        }
        return true;
      }
    }
);
  }
  if (selectedElements.isEmpty())   return null;
  final RefEntity[] selectedRefElements=selectedElements.toArray(new RefEntity[selectedElements.size()]);
  GlobalInspectionContextImpl context=tree.getContext();
  InspectionToolPresentation presentation=context.getPresentation(toolWrapper);
  return presentation.extractActiveFixes(selectedRefElements,actions);
}
