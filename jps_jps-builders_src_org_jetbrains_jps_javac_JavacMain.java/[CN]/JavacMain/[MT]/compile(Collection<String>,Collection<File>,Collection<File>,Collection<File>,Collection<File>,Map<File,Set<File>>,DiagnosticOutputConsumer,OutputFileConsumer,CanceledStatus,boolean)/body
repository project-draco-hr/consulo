{
  JavaCompiler compiler=null;
  if (useEclipseCompiler) {
    for (    JavaCompiler javaCompiler : ServiceLoader.load(JavaCompiler.class)) {
      compiler=javaCompiler;
      break;
    }
    if (compiler == null) {
      compiler=SYSTEM_JAVA_COMPILER;
    }
  }
 else {
    compiler=SYSTEM_JAVA_COMPILER;
  }
  final boolean nowUsingJavac=compiler == SYSTEM_JAVA_COMPILER;
  for (  File outputDir : outputDirToRoots.keySet()) {
    outputDir.mkdirs();
  }
  final JavacFileManager fileManager=new JavacFileManager(new ContextImpl(compiler,outConsumer,outputSink,canceledStatus));
  if (nowUsingJavac && useEclipseCompiler) {
    final String message="Eclipse Batch Compiler was not found in classpath, using Javac instead";
    fileManager.getContext().reportMessage(Diagnostic.Kind.WARNING,message);
    System.err.println(message);
  }
  fileManager.handleOption("-bootclasspath",Collections.singleton("").iterator());
  fileManager.handleOption("-extdirs",Collections.singleton("").iterator());
  try {
    fileManager.setOutputDirectories(outputDirToRoots);
  }
 catch (  IOException e) {
    fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
    return false;
  }
  if (!classpath.isEmpty()) {
    try {
      fileManager.setLocation(StandardLocation.CLASS_PATH,classpath);
    }
 catch (    IOException e) {
      fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
      return false;
    }
  }
  if (!platformClasspath.isEmpty()) {
    try {
      fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH,platformClasspath);
    }
 catch (    IOException e) {
      fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
      return false;
    }
  }
  if (!sourcePath.isEmpty()) {
    try {
      fileManager.setLocation(StandardLocation.SOURCE_PATH,sourcePath);
    }
 catch (    IOException e) {
      fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
      return false;
    }
  }
  final LineOutputWriter out=new LineOutputWriter(){
    protected void lineAvailable(    String line){
      if (nowUsingJavac) {
        outConsumer.outputLineAvailable(line);
      }
 else {
      }
    }
  }
;
  try {
    final Collection<String> _options=prepareOptions(options,compiler);
    final JavaCompiler.CompilationTask task=compiler.getTask(out,fileManager,outConsumer,_options,null,fileManager.toJavaFileObjects(sources));
    return task.call();
  }
 catch (  IllegalArgumentException e) {
    outConsumer.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR,e.getMessage()));
  }
 finally {
    fileManager.close();
  }
  return false;
}
