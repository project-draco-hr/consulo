{
  final JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  for (  File outputDir : outputDirToRoots.keySet()) {
    outputDir.mkdirs();
  }
  final JavacFileManager fileManager=new JavacFileManager(new ContextImpl(compiler,outConsumer,outputSink,canceledStatus));
  fileManager.handleOption("-bootclasspath",Collections.singleton("").iterator());
  fileManager.handleOption("-extdirs",Collections.singleton("").iterator());
  fileManager.setOutputDirectories(outputDirToRoots);
  if (!classpath.isEmpty()) {
    if (!fileManager.setLocation(StandardLocation.CLASS_PATH,classpath)) {
      return false;
    }
  }
  if (!platformClasspath.isEmpty()) {
    if (!fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH,platformClasspath)) {
      return false;
    }
  }
  if (!sourcePath.isEmpty()) {
    if (!fileManager.setLocation(StandardLocation.SOURCE_PATH,sourcePath)) {
      return false;
    }
  }
  final LineOutputWriter out=new LineOutputWriter(){
    protected void lineAvailable(    String line){
      outConsumer.outputLineAvailable(line);
    }
  }
;
  try {
    final Collection<String> _options=prepareOptions(options);
    final JavaCompiler.CompilationTask task=compiler.getTask(out,fileManager,outConsumer,_options,null,fileManager.toJavaFileObjects(sources));
    final JavacASTAnalyser analyzer=new JavacASTAnalyser(outConsumer,shouldSuppressAnnotationProcessing(options));
    task.setProcessors(Collections.singleton(analyzer));
    return task.call();
  }
  finally {
    fileManager.close();
  }
}
