{
  super.visitAssignmentExpression(assignment);
  final PsiJavaToken sign=assignment.getOperationSign();
  if (sign == null) {
    return;
  }
  if (sign.getTokenType() != JavaTokenType.EQ) {
    return;
  }
  final PsiExpression lhs=assignment.getLExpression();
  final PsiExpression rhs=assignment.getRExpression();
  if (lhs == null || rhs == null) {
    return;
  }
  if (!(rhs instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryRhs=(PsiBinaryExpression)rhs;
  final PsiJavaToken operatorSign=binaryRhs.getOperationSign();
  if (operatorSign.getTokenType() == JavaTokenType.OROR || operatorSign.getTokenType() == JavaTokenType.ANDAND) {
    return;
  }
  final PsiExpression lOperand=binaryRhs.getLOperand();
  if (lOperand == null) {
    return;
  }
  final PsiExpression rOperand=binaryRhs.getROperand();
  if (rOperand == null) {
    return;
  }
  if (SideEffectChecker.mayHaveSideEffects(lhs)) {
    return;
  }
  if (!ExpressionEquivalenceChecker.expressionsAreEquivalent(lhs,lOperand)) {
    return;
  }
  registerError(assignment);
}
