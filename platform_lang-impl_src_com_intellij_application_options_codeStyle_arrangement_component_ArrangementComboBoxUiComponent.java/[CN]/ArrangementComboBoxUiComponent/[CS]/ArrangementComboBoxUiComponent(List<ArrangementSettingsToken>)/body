{
  super(tokens);
  ArrangementSettingsToken[] tokensArray=tokens.toArray(new ArrangementSettingsToken[tokens.size()]);
  Arrays.sort(tokensArray,new Comparator<ArrangementSettingsToken>(){
    @Override public int compare(    ArrangementSettingsToken t1,    ArrangementSettingsToken t2){
      return t1.getRepresentationValue().compareTo(t2.getRepresentationValue());
    }
  }
);
  myComboBox=new JComboBox(tokensArray);
  myComboBox.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setText(((ArrangementSettingsToken)value).getRepresentationValue());
    }
  }
);
  myComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        fireStateChanged();
      }
    }
  }
);
  int minWidth=0;
  ListCellRenderer renderer=myComboBox.getRenderer();
  JBList dummyList=new JBList();
  for (int i=0, max=myComboBox.getItemCount(); i < max; i++) {
    Component rendererComponent=renderer.getListCellRendererComponent(dummyList,myComboBox.getItemAt(i),i,false,true);
    minWidth=Math.max(minWidth,rendererComponent.getPreferredSize().width);
  }
  myComboBox.setPreferredSize(new Dimension(minWidth * 5 / 3,myComboBox.getPreferredSize().height));
}
