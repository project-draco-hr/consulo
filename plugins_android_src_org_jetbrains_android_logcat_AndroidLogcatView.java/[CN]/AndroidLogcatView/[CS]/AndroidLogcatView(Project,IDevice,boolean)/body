{
  myProject=project;
  myPreselectedDevice=preselectedDevice;
  Disposer.register(myProject,this);
  mySplitter=new Splitter();
  mySplitter.setFirstComponent(myLeftPanel);
  mySplitter.setSecondComponent(myRightPanel);
  mySplitter.setProportion(0.2f);
  if (addBorderToScrollPane) {
    myFiltersListScrollPane.setViewportBorder(IdeBorderFactory.createBorder());
  }
 else {
    myFiltersList.setBorder(BorderFactory.createEmptyBorder());
  }
  if (preselectedDevice == null) {
    myDeviceCombo.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        updateLogConsole();
      }
    }
);
    myDeviceCombo.setRenderer(new ListCellRendererWrapper(){
      @Override public void customize(      JList list,      Object value,      int index,      boolean selected,      boolean hasFocus){
        if (value == null) {
          setText("<html><font color='red'>[none]</font></html>");
        }
 else         if (value instanceof IDevice) {
          setText(((IDevice)value).getSerialNumber());
        }
      }
    }
);
  }
 else {
    myTopPanel.setVisible(false);
  }
  final AndroidLogFilterModel logFilterModel=new AndroidLogFilterModel(){
    private ConfiguredFilter myConfiguredFilter;
    @Override protected void setCustomFilter(    String filter){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER=filter;
    }
    @Override protected void saveLogLevel(    String logLevelName){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL=logLevelName;
    }
    @Override public String getSelectedLogLevelName(){
      return AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL;
    }
    @Override public String getCustomFilter(){
      return AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER;
    }
    @Override protected void setConfiguredFilter(    ConfiguredFilter filter){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CONFIGURED_FILTER=filter != null ? filter.getName() : "";
      myConfiguredFilter=filter;
    }
    @Nullable @Override protected ConfiguredFilter getConfiguredFilter(){
      if (myConfiguredFilter == null) {
        final String name=AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CONFIGURED_FILTER;
        myConfiguredFilter=compileConfiguredFilter(name);
      }
      return myConfiguredFilter;
    }
  }
;
  myLogConsole=new MyLogConsole(project,logFilterModel);
  myLogConsole.addListener(new LogConsoleListener(){
    @Override public void loggingWillBeStopped(){
      if (myCurrentWriter != null) {
        try {
          myCurrentWriter.close();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
  }
);
  if (preselectedDevice == null) {
    mySearchComponentWrapper.add(createSearchComponent(project));
  }
  JComponent consoleComponent=myLogConsole.getComponent();
  final DefaultActionGroup group1=new DefaultActionGroup();
  group1.addAll(myLogConsole.getToolbarActions());
  group1.add(new MyRestartAction());
  final JComponent tbComp1=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group1,false).getComponent();
  myConsoleWrapper.add(tbComp1,BorderLayout.EAST);
  final DefaultActionGroup group2=new DefaultActionGroup();
  group2.add(new MyAddFilterAction());
  group2.add(new MyRemoveFilterAction());
  group2.add(new MyEditFilterAction());
  final JComponent tbComp2=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group2,true).getComponent();
  myFiltersToolbarPanel.add(tbComp2,BorderLayout.CENTER);
  myFiltersList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final String filterName=(String)myFiltersList.getSelectedValue();
      if (filterName == null) {
        return;
      }
      final ConfiguredFilter filter=compileConfiguredFilter(filterName);
      ProgressManager.getInstance().run(new Task.Backgroundable(myProject,LogConsoleBase.APPLYING_FILTER_TITLE){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          logFilterModel.updateConfiguredFilter(filter);
        }
      }
);
    }
  }
);
  myConsoleWrapper.add(consoleComponent,BorderLayout.CENTER);
  Disposer.register(this,myLogConsole);
  AndroidDebugBridge.addDeviceChangeListener(myDeviceChangeListener);
  updateDevices();
  updateLogConsole();
  updateConfiguredFilters(AndroidLogcatFiltersPreferences.getInstance(myProject).TOOL_WINDOW_CONFIGURED_FILTER);
  if (myFiltersList.getSelectedValue() == null && myFiltersList.getItemsCount() > 0) {
    myFiltersList.setSelectedIndex(0);
  }
}
