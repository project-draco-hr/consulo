{
  PsiClass superclass;
  PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
  superclass=targetDirectory.createClass(superclassName);
  copyPsiReferenceList(subclass.getExtendsList(),superclass.getExtendsList());
  PsiMethod[] constructors=getCalledBaseConstructors(subclass);
  if (constructors.length > 0) {
    createConstructorsByPattern(project,superclass,constructors);
  }
  clearPsiReferenceList(subclass.getExtendsList());
  PsiJavaCodeReferenceElement ref=factory.createClassReferenceElement(superclass);
  subclass.getExtendsList().add(ref);
  PullUpHelper pullUpHelper=new PullUpHelper(subclass,superclass,selectedMemberInfos,javaDocPolicy);
  pullUpHelper.moveMembersToBase();
  pullUpHelper.moveFieldInitializations();
  MethodSignature[] toImplement=OverrideImplementUtil.getMethodSignaturesToImplement(superclass);
  if (toImplement.length > 0) {
    superclass.getModifierList().setModifierProperty(PsiModifier.ABSTRACT,true);
  }
  return superclass;
}
