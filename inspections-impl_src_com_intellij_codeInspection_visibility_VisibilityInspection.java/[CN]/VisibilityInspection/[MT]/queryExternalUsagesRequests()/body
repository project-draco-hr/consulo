{
  getRefManager().iterate(new RefManager.RefIterator(){
    public void accept(    RefElement refElement){
      if (getFilter().accepts(refElement)) {
        refElement.accept(new RefVisitor(){
          public void visitField(          final RefField refField){
            if (refField.getAccessModifier() != PsiModifier.PRIVATE) {
              getManager().enqueueFieldUsagesProcessor(refField,new InspectionManagerEx.UsagesProcessor(){
                public boolean process(                PsiReference psiReference){
                  getFilter().addIgnoreList(refField);
                  return false;
                }
              }
);
            }
          }
          public void visitMethod(          final RefMethod refMethod){
            if (refMethod.isAppMain()) {
              getFilter().addIgnoreList(refMethod);
            }
 else             if (!refMethod.isLibraryOverride() && refMethod.getAccessModifier() != PsiModifier.PRIVATE && !(refMethod instanceof RefImplicitConstructor)) {
              getManager().enqueueDerivedMethodsProcessing(refMethod,new InspectionManagerEx.DerivedMethodsProcessor(){
                public boolean process(                PsiMethod derivedMethod){
                  getFilter().addIgnoreList(refMethod);
                  return false;
                }
              }
);
              getManager().enqueueMethodUsagesProcessor(refMethod,new InspectionManagerEx.UsagesProcessor(){
                public boolean process(                PsiReference psiReference){
                  getFilter().addIgnoreList(refMethod);
                  return false;
                }
              }
);
            }
          }
          public void visitClass(          final RefClass refClass){
            if (!refClass.isAnonymous()) {
              getManager().enqueueDerivedClassesProcessing(refClass,new InspectionManagerEx.DerivedClassesProcessor(){
                public boolean process(                PsiClass inheritor){
                  getFilter().addIgnoreList(refClass);
                  return false;
                }
              }
);
              getManager().enqueueClassUsagesProcessing(refClass,new InspectionManagerEx.UsagesProcessor(){
                public boolean process(                PsiReference psiReference){
                  getFilter().addIgnoreList(refClass);
                  return false;
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  return false;
}
