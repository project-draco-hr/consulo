{
  final AtomicInteger alive=new AtomicInteger();
  node.processAliveKeys(new Processor<Object>(){
    @Override public boolean process(    Object t){
      alive.incrementAndGet();
      return true;
    }
  }
);
  if (alive.get() > DUPLICATE_LIMIT) {
    return "Too many range markers (" + alive + ") registered for interval "+ node;
  }
  return null;
}
