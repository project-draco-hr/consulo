{
synchronized (PsiLock.LOCK) {
    if (myInitialized || myInitializing)     return;
    myInitializing=true;
    try {
      final HashSet<XmlTag> usedTags=new HashSet<XmlTag>();
      final XmlTag tag=getXmlTag();
      for (      Map.Entry<Method,Pair<String,Integer>> entry : myMethodsMap.getFixedChildrenEntries()) {
        Method method=entry.getKey();
        final String qname=entry.getValue().getFirst();
        final Integer index=entry.getValue().getSecond();
        XmlTag subTag=findSubTag(tag,qname,index);
        final Class aClass=method.getReturnType();
        final IndexedElementInvocationHandler handler=new IndexedElementInvocationHandler(aClass,subTag,this,qname,index);
        final DomElement element=myManager.createDomElement(aClass,subTag,handler);
        myMethod2Children.put(method,element);
        usedTags.add(subTag);
      }
      if (tag != null) {
        for (        Map.Entry<Method,String> entry : myMethodsMap.getVariableChildrenEntries()) {
          String qname=entry.getValue();
          for (          XmlTag subTag : tag.findSubTags(qname)) {
            if (!usedTags.contains(subTag)) {
              createCollectionElement(myMethodsMap.getVariableChildrenClass(qname),subTag);
              usedTags.add(subTag);
            }
          }
        }
      }
    }
  finally {
      myInitializing=false;
      myInitialized=true;
    }
  }
}
