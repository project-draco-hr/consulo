{
  final PsiElement resolve=methodRef.resolve();
  if (resolve == null)   return null;
  final PsiClass containingClass=resolve instanceof PsiMethod ? ((PsiMethod)resolve).getContainingClass() : (PsiClass)resolve;
  final boolean isStaticSelector=isStaticallyReferenced(methodRef);
  final PsiElement qualifier=methodRef.getQualifier();
  boolean isMethodStatic=false;
  boolean receiverReferenced=false;
  boolean isConstructor=true;
  if (resolve instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)resolve;
    isMethodStatic=method.hasModifierProperty(PsiModifier.STATIC);
    isConstructor=method.isConstructor();
    receiverReferenced=hasReceiver(methodRef,method);
    if (method.hasModifierProperty(PsiModifier.ABSTRACT) && qualifier instanceof PsiSuperExpression) {
      return "Abstract method '" + method.getName() + "' cannot be accessed directly";
    }
  }
  if (!receiverReferenced && isStaticSelector && !isMethodStatic&& !isConstructor) {
    return "Non-static method cannot be referenced from a static context";
  }
  if (!receiverReferenced && !isStaticSelector && isMethodStatic) {
    return "Static method referenced through non-static qualifier";
  }
  if (receiverReferenced && isStaticSelector && isMethodStatic&& !isConstructor) {
    return "Static method referenced through receiver";
  }
  if (isMethodStatic && isStaticSelector && qualifier instanceof PsiTypeElement) {
    final PsiJavaCodeReferenceElement referenceElement=PsiTreeUtil.getChildOfType(qualifier,PsiJavaCodeReferenceElement.class);
    if (referenceElement != null) {
      final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
      if (parameterList != null && parameterList.getTypeArguments().length > 0) {
        return "Parameterized qualifier on static method reference";
      }
    }
  }
  if (isConstructor) {
    if (containingClass != null && PsiUtil.isInnerClass(containingClass) && containingClass.isPhysical()) {
      PsiClass outerClass=containingClass.getContainingClass();
      if (outerClass != null && !InheritanceUtil.hasEnclosingInstanceInScope(outerClass,methodRef,true,false)) {
        return "An enclosing instance of type " + PsiFormatUtil.formatClass(outerClass,PsiFormatUtilBase.SHOW_NAME) + " is not in scope";
      }
    }
  }
  return null;
}
