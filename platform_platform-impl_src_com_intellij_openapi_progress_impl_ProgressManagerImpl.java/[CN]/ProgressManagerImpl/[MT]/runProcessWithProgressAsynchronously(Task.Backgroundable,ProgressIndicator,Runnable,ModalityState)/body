{
  if (progressIndicator instanceof Disposable) {
    Disposer.register(ApplicationManager.getApplication(),(Disposable)progressIndicator);
  }
  final Runnable process=new TaskRunnable(task,progressIndicator,continuation);
  TaskContainer action=new TaskContainer(task){
    @Override public void run(){
      boolean canceled=false;
      final long start=System.currentTimeMillis();
      try {
        ProgressManager.getInstance().runProcess(process,progressIndicator);
      }
 catch (      ProcessCanceledException e) {
        canceled=true;
      }
      final long end=System.currentTimeMillis();
      final long time=end - start;
      if (canceled || progressIndicator.isCanceled()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            task.onCancel();
          }
        }
,modalityState);
      }
 else {
        final Task.NotificationInfo notificationInfo=task.notifyFinished();
        if (notificationInfo != null && time > 5000) {
          final Component window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
          if (window == null || notificationInfo.isShowWhenFocused()) {
            systemNotify(notificationInfo);
          }
        }
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            task.onSuccess();
          }
        }
,modalityState);
      }
    }
  }
;
  return ApplicationManager.getApplication().executeOnPooledThread(action);
}
