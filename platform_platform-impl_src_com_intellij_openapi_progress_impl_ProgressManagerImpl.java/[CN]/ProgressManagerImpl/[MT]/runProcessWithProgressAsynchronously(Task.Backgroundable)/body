{
  final ProgressIndicator progressIndicator;
  if (ApplicationManager.getApplication().isHeadlessEnvironment()) {
    progressIndicator=new EmptyProgressIndicator();
  }
 else {
    final BackgroundableProcessIndicator indicator=new BackgroundableProcessIndicator(task);
    Disposer.register(ApplicationManager.getApplication(),indicator);
    progressIndicator=indicator;
  }
  final Runnable process=new TaskRunnable(task,progressIndicator);
  TaskContainer action=new TaskContainer(task){
    public void run(){
      boolean canceled=false;
      final long start=System.currentTimeMillis();
      try {
        ProgressManager.getInstance().runProcess(process,progressIndicator);
      }
 catch (      ProcessCanceledException e) {
        canceled=true;
      }
      final long end=System.currentTimeMillis();
      if (canceled || progressIndicator.isCanceled()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            task.onCancel();
          }
        }
,ModalityState.NON_MODAL);
      }
 else       if (!canceled) {
        final Task.NotificationInfo notificationInfo=task.getNotificationInfo();
        if (notificationInfo != null && end - start > 5000) {
          final Component window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
          if (window == null || notificationInfo.isShowWhenFocused()) {
            systemNotify(notificationInfo);
          }
        }
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            task.onSuccess();
          }
        }
,ModalityState.NON_MODAL);
      }
    }
  }
;
synchronized (process) {
    ApplicationManager.getApplication().executeOnPooledThread(action);
    try {
      process.wait();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}
