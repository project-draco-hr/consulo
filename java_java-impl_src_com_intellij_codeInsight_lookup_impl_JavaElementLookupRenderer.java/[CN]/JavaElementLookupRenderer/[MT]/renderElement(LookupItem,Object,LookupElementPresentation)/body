{
  presentation.setIcon(DefaultLookupItemRenderer.getRawIcon(item,presentation.isReal()));
  final boolean bold=item.getAttribute(LookupItem.HIGHLIGHTED_ATTR) != null;
  boolean strikeout=isToStrikeout(item);
  presentation.setItemText(getName(element,item));
  presentation.setStrikeout(strikeout);
  presentation.setItemTextBold(bold);
  String tailText=StringUtil.notNullize(getTailText(element,item));
  boolean grayed=item.getAttribute(LookupItem.TAIL_TEXT_SMALL_ATTR) != null;
  PsiSubstitutor substitutor=(PsiSubstitutor)item.getAttribute(LookupItem.SUBSTITUTOR);
  if (element instanceof PsiClass) {
    final PsiClass psiClass=(PsiClass)element;
    if (item.getAttribute(LookupItem.INDICATE_ANONYMOUS) != null && (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT))) {
      tailText="{...}" + tailText;
    }
    if (substitutor == null && psiClass.getTypeParameters().length > 0) {
      tailText="<" + StringUtil.join(psiClass.getTypeParameters(),new Function<PsiTypeParameter,String>(){
        public String fun(        PsiTypeParameter psiTypeParameter){
          return psiTypeParameter.getName();
        }
      }
,"," + (showSpaceAfterComma(psiClass) ? " " : "")) + ">"+ tailText;
    }
    grayed=true;
  }
  presentation.setTailText(tailText,grayed);
  final String typeText=getTypeText(element,item);
  presentation.setTypeText(typeText != null ? typeText : "");
}
