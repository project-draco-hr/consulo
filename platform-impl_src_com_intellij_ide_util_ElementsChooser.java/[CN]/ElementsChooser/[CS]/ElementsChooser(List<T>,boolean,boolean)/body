{
  super(new BorderLayout());
  myTableModel=new MyTableModel(elementsCanBeMarked);
  myTable=new Table(myTableModel);
  myTable.setShowGrid(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  myTable.setTableHeader(null);
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  myTable.setColumnSelectionAllowed(false);
  JScrollPane pane=ScrollPaneFactory.createScrollPane(myTable);
  pane.setPreferredSize(new Dimension(100,155));
  int width=new JCheckBox().getPreferredSize().width;
  TableColumnModel columnModel=myTable.getColumnModel();
  if (elementsCanBeMarked) {
    TableColumn checkMarkColumn=columnModel.getColumn(myTableModel.CHECK_MARK_COLUM_INDEX);
    checkMarkColumn.setPreferredWidth(width);
    checkMarkColumn.setMaxWidth(width);
    checkMarkColumn.setCellRenderer(new CheckMarkColumnCellRenderer(myTable.getDefaultRenderer(Boolean.class)));
  }
  columnModel.getColumn(myTableModel.ELEMENT_COLUMN_INDEX).setCellRenderer(new MyElementColumnCellRenderer());
  add(pane,BorderLayout.CENTER);
  myTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final int[] selectedRows=myTable.getSelectedRows();
      boolean currentlyMarked=true;
      for (      int selectedRow : selectedRows) {
        currentlyMarked=myTableModel.isElementMarked(selectedRow);
        if (!currentlyMarked) {
          break;
        }
      }
      myTableModel.setMarked(selectedRows,!currentlyMarked);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  final SpeedSearchBase<Table> speedSearch=new SpeedSearchBase<Table>(myTable){
    public int getSelectedIndex(){
      return myTable.getSelectedRow();
    }
    public Object[] getAllElements(){
      final int count=myTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myTableModel.getElementAt(idx);
      }
      return elements;
    }
    public String getElementText(    Object element){
      return getItemText((T)element);
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myTableModel.getElementAt(row))) {
          myTable.getSelectionModel().setSelectionInterval(row,row);
          TableUtil.scrollSelectionToVisible(myTable);
          break;
        }
      }
    }
  }
;
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(){
    public void translatePattern(    final StringBuilder buf,    final String pattern){
      final int len=pattern.length();
      for (int i=0; i < len; ++i) {
        translateCharacter(buf,pattern.charAt(i));
      }
    }
  }
);
  setElements(elements,marked);
}
