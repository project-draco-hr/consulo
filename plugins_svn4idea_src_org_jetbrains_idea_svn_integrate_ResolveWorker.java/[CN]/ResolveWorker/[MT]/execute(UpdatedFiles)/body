{
  final List<VirtualFile> conflictedVirtualFiles=new ArrayList<VirtualFile>();
  if (myChangesUnderProjectRoot) {
    UpdateFilesHelper.iterateFileGroupFiles(updatedFiles,new UpdateFilesHelper.Callback(){
      public void onFile(      final String filePath,      final String groupId){
        final VirtualFile vf=SvnUtil.getVirtualFile(filePath);
        if (vf != null) {
          vf.getParent().refresh(false,false);
          myDirtyScopeManager.fileDirty(vf);
        }
        if (FileGroup.MERGED_WITH_CONFLICT_ID.equals(groupId)) {
          conflictedVirtualFiles.add(vf);
        }
      }
    }
);
  }
 else {
    final FileGroup conflictedGroup=updatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID);
    for (    String filename : conflictedGroup.getFiles()) {
      final VirtualFile vf=SvnUtil.getVirtualFile(filename);
      conflictedVirtualFiles.add(vf);
    }
  }
  if ((!conflictedVirtualFiles.isEmpty()) && (!SvnConfiguration.getInstance(myProject).MERGE_DRY_RUN)) {
    final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(myProject);
    List<VirtualFile> mergedFiles=vcsHelper.showMergeDialog(conflictedVirtualFiles,new SvnMergeProvider(myProject));
    final FileGroup mergedGroup=updatedFiles.getGroupById(FileGroup.MERGED_ID);
    final FileGroup conflictedGroup=updatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID);
    for (    final VirtualFile mergedFile : mergedFiles) {
      String path=FileUtil.toSystemDependentName(mergedFile.getPresentableUrl());
      conflictedGroup.remove(path);
      mergedGroup.add(path);
      mergedFile.refresh(false,false);
      mergedFile.getParent().refresh(false,false);
      if (myChangesUnderProjectRoot) {
        mergedFile.getParent().refresh(true,false);
        myDirtyScopeManager.fileDirty(mergedFile);
      }
    }
  }
}
