{
  if (element instanceof MetadataPsiElementBase)   return null;
  if (myContext == null)   return null;
  Module contextModule=ModuleUtil.findModuleForPsiElement(myContext);
  if (contextModule == null)   return null;
  final PsiElement commonContext=PsiTreeUtil.findCommonContext(myContext,element);
  if (PsiTreeUtil.getContextOfType(commonContext,PsiMethod.class,false) != null)   return PsiProximity.SAME_METHOD;
  if (PsiTreeUtil.getContextOfType(commonContext,PsiClass.class,false) != null)   return PsiProximity.SAME_CLASS;
  final VirtualFile virtualFile=PsiUtil.getVirtualFile(element);
  if (isOpenedInEditor(virtualFile))   return PsiProximity.OPENED_IN_EDITOR;
  if (element instanceof PsiClass) {
    final String qname=((PsiClass)element).getQualifiedName();
    if (qname != null) {
      final PsiJavaFile psiJavaFile=PsiTreeUtil.getContextOfType(myContext,PsiJavaFile.class,false);
      if (psiJavaFile != null) {
        final PsiImportList importList=psiJavaFile.getImportList();
        if (importList != null) {
          for (          final PsiImportStatement importStatement : importList.getImportStatements()) {
            if (!importStatement.isOnDemand() && qname.equals(importStatement.getQualifiedName())) {
              return PsiProximity.EXPLICITLY_IMPORTED;
            }
          }
        }
      }
    }
  }
  PsiClass placeClass=PsiTreeUtil.getContextOfType(element,PsiClass.class,false);
  if (myContext.getParent() instanceof PsiReferenceExpression) {
    final PsiExpression qualifierExpression=((PsiReferenceExpression)myContext.getParent()).getQualifierExpression();
    if (qualifierExpression != null) {
      final PsiType type=qualifierExpression.getType();
      if (type instanceof PsiClassType) {
        final PsiClass psiClass=((PsiClassType)type).resolve();
        if (psiClass != null) {
          placeClass=psiClass;
        }
      }
    }
  }
  PsiClass contextClass=PsiTreeUtil.getContextOfType(myContext,PsiClass.class,false);
  while (contextClass != null) {
    PsiClass elementClass=placeClass;
    while (elementClass != null) {
      if (contextClass.isInheritor(elementClass,true))       return PsiProximity.SUPERCLASS;
      elementClass=elementClass.getContainingClass();
    }
    contextClass=contextClass.getContainingClass();
  }
  Module elementModule=ModuleUtil.findModuleForPsiElement(element);
  if (contextModule == elementModule) {
    final PsiPackage psiPackage=PsiTreeUtil.getContextOfType(myContext,PsiPackage.class,false);
    if (psiPackage != null && psiPackage.equals(PsiTreeUtil.getContextOfType(element,PsiPackage.class,false)))     return PsiProximity.SAME_MODULE_AND_PACKAGE;
    return PsiProximity.SAME_MODULE;
  }
  if (elementModule != null) {
    return elementModule.getProject() == contextModule.getProject() ? PsiProximity.SAME_PROJECT : PsiProximity.OTHER_PROJECT;
  }
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  List<OrderEntry> orderEntries=virtualFile == null ? Collections.<OrderEntry>emptyList() : fileIndex.getOrderEntriesForFile(virtualFile);
  if (orderEntries.isEmpty())   return null;
  OrderEntry orderEntry=orderEntries.get(0);
  return orderEntry instanceof JdkOrderEntry ? PsiProximity.JDK : PsiProximity.LIBRARY;
}
