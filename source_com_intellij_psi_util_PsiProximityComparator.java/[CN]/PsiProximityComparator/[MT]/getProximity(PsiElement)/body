{
  if (myContext == null)   return -1;
  Module contextModule=ModuleUtil.findModuleForPsiElement(myContext);
  if (contextModule == null)   return -1;
  final PsiElement context=PsiTreeUtil.findCommonContext(myContext,element);
  if (PsiTreeUtil.getContextOfType(context,PsiMethod.class,false) != null)   return 0;
  if (PsiTreeUtil.getContextOfType(context,PsiClass.class,false) != null)   return 1;
  VirtualFile virtualFile=PsiUtil.getVirtualFile(element);
  if (isOpenedInEditor(virtualFile))   return 2;
  PsiClass contextClass=PsiTreeUtil.getContextOfType(myContext,PsiClass.class,false);
  while (contextClass != null) {
    PsiClass elementClass=PsiTreeUtil.getContextOfType(element,PsiClass.class,false);
    while (elementClass != null) {
      if (contextClass.isInheritor(elementClass,true))       return 3;
      elementClass=elementClass.getContainingClass();
    }
    contextClass=contextClass.getContainingClass();
  }
  Module elementModule=ModuleUtil.findModuleForPsiElement(element);
  if (contextModule == elementModule) {
    final PsiPackage psiPackage=PsiTreeUtil.getContextOfType(context,PsiPackage.class,false);
    if (psiPackage != null && psiPackage.equals(PsiTreeUtil.getContextOfType(element,PsiPackage.class,false)))     return 4;
    return 5;
  }
  if (elementModule != null) {
    return elementModule.getProject() == contextModule.getProject() ? 6 : 7;
  }
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  List<OrderEntry> orderEntries=virtualFile == null ? Collections.<OrderEntry>emptyList() : fileIndex.getOrderEntriesForFile(virtualFile);
  if (orderEntries.isEmpty())   return 10;
  OrderEntry orderEntry=orderEntries.get(0);
  return orderEntry instanceof JdkOrderEntry ? 9 : 8;
}
