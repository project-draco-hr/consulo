{
  final TreeSet<TextRange> ranges=new TreeSet<TextRange>(new Comparator<TextRange>(){
    public int compare(    final TextRange o1,    final TextRange o2){
      if (o1.intersects(o2))       return 0;
      return o1.getStartOffset() - o2.getStartOffset();
    }
  }
);
  myInjector.getInjectedLanguage(host,new PairProcessor<Language,List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>>(){
    public boolean process(    final Language language,    List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list){
      if (language != null) {
        try {
          for (          Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> pair : list) {
            if (ranges.contains(pair.third))             return true;
          }
          registrar.startInjecting(language);
          for (          Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> pair : list) {
            final PsiLanguageInjectionHost host=pair.first;
            final TextRange textRange=pair.third;
            final InjectedLanguage injectedLanguage=pair.second;
            ranges.add(textRange);
            if (injectedLanguage.isDynamic()) {
              final StringBuilder prefix=new StringBuilder(injectedLanguage.getPrefix());
              final StringBuilder suffix=new StringBuilder(injectedLanguage.getSuffix());
              adjustPrefixAndSuffix(getUnescapedText(host,textRange.substring(host.getText())),prefix,suffix);
              addPlaceSafe(registrar,language,host,textRange,prefix.toString(),suffix.toString());
            }
 else {
              addPlaceSafe(registrar,language,host,textRange,injectedLanguage.getPrefix(),injectedLanguage.getSuffix());
            }
          }
        }
  finally {
          registrar.doneInjecting();
        }
      }
      return true;
    }
  }
);
}
