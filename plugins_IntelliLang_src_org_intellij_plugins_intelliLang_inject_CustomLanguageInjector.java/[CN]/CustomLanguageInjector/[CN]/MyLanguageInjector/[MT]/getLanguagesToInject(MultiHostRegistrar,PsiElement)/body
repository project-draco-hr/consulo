{
  final TreeSet<TextRange> ranges=new TreeSet<TextRange>(RANGE_COMPARATOR);
  final PsiFile containingFile=host.getContainingFile();
  myInjector.getInjectedLanguage(host,new PairProcessor<Language,List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>>(){
    public boolean process(    final Language language,    List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list){
      if (language == null) {
        return true;
      }
      for (      Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : list) {
        if (ranges.contains(trinity.third.shiftRight(trinity.first.getTextRange().getStartOffset())))         return true;
      }
      boolean injectionStarted=false;
      for (      Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : list) {
        final PsiLanguageInjectionHost host=trinity.first;
        if (host.getContainingFile() != containingFile)         continue;
        final TextRange textRange=trinity.third;
        final InjectedLanguage injectedLanguage=trinity.second;
        ranges.add(textRange.shiftRight(host.getTextRange().getStartOffset()));
        if (!injectionStarted) {
          registrar.startInjecting(language);
          injectionStarted=true;
        }
        if (injectedLanguage.isDynamic()) {
          final StringBuilder prefix=new StringBuilder(injectedLanguage.getPrefix());
          final StringBuilder suffix=new StringBuilder(injectedLanguage.getSuffix());
          adjustPrefixAndSuffix(getUnescapedText(host,textRange.substring(host.getText())),prefix,suffix);
          addPlaceSafe(registrar,prefix.toString(),suffix.toString(),host,textRange,language);
        }
 else {
          addPlaceSafe(registrar,injectedLanguage.getPrefix(),injectedLanguage.getSuffix(),host,textRange,language);
        }
      }
      if (injectionStarted) {
        registrar.doneInjecting();
      }
      return true;
    }
  }
);
}
