{
synchronized (myTempPlaces) {
    for (Iterator<Pair<SmartPsiElementPointer<PsiLanguageInjectionHost>,InjectedLanguage>> it=myTempPlaces.iterator(); it.hasNext(); ) {
      final Pair<SmartPsiElementPointer<PsiLanguageInjectionHost>,InjectedLanguage> pair=it.next();
      final PsiLanguageInjectionHost element=pair.first.getElement();
      if (element == null) {
        it.remove();
      }
 else       if (element == place) {
        if (element instanceof XmlAttributeValue || element instanceof PsiLiteralExpression) {
          return Collections.singletonList(Pair.create(pair.second,TextRange.from(1,element.getTextLength() - 2)));
        }
 else {
          return Collections.singletonList(Pair.create(pair.second,TextRange.from(0,element.getTextLength())));
        }
      }
    }
  }
  final PsiElement child=place.getFirstChild();
  if (child != null && child instanceof PsiJavaToken) {
    if (((PsiJavaToken)child).getTokenType() == JavaTokenType.STRING_LITERAL) {
      final PsiLiteralExpression psiExpression=(PsiLiteralExpression)place;
      final List<Pair<InjectedLanguage,TextRange>> list=getAnnotationInjections(psiExpression,place);
      if (list != null) {
        return list;
      }
      final List<MethodParameterInjection> injections=myInjectionConfiguration.getParameterInjections();
      for (      MethodParameterInjection injection : injections) {
        if (injection.isApplicable(psiExpression)) {
          return convertInjection(injection,psiExpression);
        }
      }
    }
  }
 else   if (place instanceof XmlText) {
    final XmlText xmlText=(XmlText)place;
    List<Pair<InjectedLanguage,TextRange>> list=null;
    for (    XmlTagInjection injection : myInjectionConfiguration.getTagInjections()) {
      if (injection.isApplicable(xmlText)) {
        final List<Pair<InjectedLanguage,TextRange>> l=convertInjection(injection,xmlText);
        if (list == null) {
          list=l;
        }
 else {
          list=addInjections(list,l);
        }
        if (injection.isTerminal()) {
          break;
        }
      }
    }
    return list;
  }
 else   if (place instanceof XmlAttributeValue) {
    final XmlAttributeValue value=(XmlAttributeValue)place;
    final PsiElement[] children=value.getChildren();
    if (children.length < 3 || !(children[1] instanceof XmlToken) || ((XmlToken)children[1]).getTokenType() != XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN) {
      return null;
    }
    List<Pair<InjectedLanguage,TextRange>> list=null;
    for (    XmlAttributeInjection injection : myInjectionConfiguration.getAttributeInjections()) {
      if (injection.isApplicable(value)) {
        final List<Pair<InjectedLanguage,TextRange>> l=convertInjection(injection,value);
        if (list == null) {
          list=l;
        }
 else {
          list=addInjections(list,l);
        }
        if (injection.isTerminal()) {
          break;
        }
      }
    }
    return list;
  }
  return null;
}
