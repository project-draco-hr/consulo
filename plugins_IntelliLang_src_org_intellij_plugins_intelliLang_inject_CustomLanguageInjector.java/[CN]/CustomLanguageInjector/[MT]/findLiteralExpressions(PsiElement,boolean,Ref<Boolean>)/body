{
  if (place instanceof PsiReferenceExpression) {
    if (resolveReferences) {
      final ArrayList<PsiLiteralExpression> list=new ArrayList<PsiLiteralExpression>();
      final JavaResolveResult[] results=((PsiReferenceExpression)place).multiResolve(true);
      for (      JavaResolveResult result : results) {
        final PsiElement element=result.getElement();
        if (element instanceof PsiVariable) {
          final PsiVariable psiVariable=(PsiVariable)element;
          final PsiType type=psiVariable.getType();
          if (!PsiUtilEx.isStringOrStringArray(type))           continue;
          boolean isArray=type instanceof PsiArrayType;
          for (          PsiExpression expression : getVariableAssignmentsInFile(psiVariable,concatFlag)) {
            if (isArray) {
              if (expression instanceof PsiNewExpression) {
                final PsiArrayInitializerExpression arrayInit=((PsiNewExpression)expression).getArrayInitializer();
                if (arrayInit != null) {
                  for (                  PsiExpression psiExpression : arrayInit.getInitializers()) {
                    ContainerUtil.addIfNotNull(findFirstLiteralExpression(psiExpression),list);
                  }
                }
              }
            }
 else {
              ContainerUtil.addIfNotNull(findFirstLiteralExpression(expression),list);
            }
          }
        }
      }
      return list;
    }
  }
 else   if (place instanceof PsiNewExpression) {
    final ArrayList<PsiLiteralExpression> list=new ArrayList<PsiLiteralExpression>();
    final PsiArrayInitializerExpression arrayInit=((PsiNewExpression)place).getArrayInitializer();
    if (arrayInit != null) {
      for (      PsiExpression psiExpression : arrayInit.getInitializers()) {
        ContainerUtil.addIfNotNull(findFirstLiteralExpression(psiExpression),list);
      }
    }
    return list;
  }
 else   if (place instanceof PsiExpression) {
    final PsiLiteralExpression expression=findFirstLiteralExpression((PsiExpression)place);
    if (expression != null)     return Collections.singletonList(expression);
  }
  return Collections.emptyList();
}
