{
  final TreeSet<TextRange> ranges=new TreeSet<TextRange>(RANGE_COMPARATOR);
  final List<PsiElement> otherReferences=new ArrayList<PsiElement>();
  final List<PsiExpression> list=ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable,new LocalSearchScope(new PsiElement[]{psiVariable.getContainingFile()},null,true)).findAll(),new NullableFunction<PsiReference,PsiExpression>(){
    public PsiExpression fun(    final PsiReference psiReference){
      final PsiElement element=psiReference.getElement();
      final PsiElement parent=element.getParent();
      if (parent instanceof PsiAssignmentExpression) {
        final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
        final IElementType operation=assignmentExpression.getOperationTokenType();
        if (assignmentExpression.getLExpression() == psiReference) {
          ranges.add(assignmentExpression.getTextRange());
          if (JavaTokenType.PLUSEQ.equals(operation)) {
            concatenationFlag.set(Boolean.TRUE);
          }
          return assignmentExpression.getRExpression();
        }
      }
 else {
        otherReferences.add(element);
      }
      return null;
    }
  }
);
  if (!concatenationFlag.get().booleanValue()) {
    for (    PsiElement element : otherReferences) {
      if (ranges.contains(element.getTextRange())) {
        concatenationFlag.set(Boolean.TRUE);
        break;
      }
    }
  }
  ContainerUtil.addIfNotNull(psiVariable.getInitializer(),list);
  return list;
}
