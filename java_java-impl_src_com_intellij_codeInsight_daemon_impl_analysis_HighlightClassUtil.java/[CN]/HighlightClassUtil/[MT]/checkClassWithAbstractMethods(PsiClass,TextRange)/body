{
  PsiMethod abstractMethod=ClassUtil.getAnyAbstractMethod(aClass);
  if (abstractMethod == null || abstractMethod.getContainingClass() == null) {
    return null;
  }
  String baseClassName=HighlightUtil.formatClass(aClass,false);
  String methodName=HighlightUtil.formatMethod(abstractMethod);
  String message=JavaErrorMessages.message("class.must.be.abstract",baseClassName,methodName,HighlightUtil.formatClass(abstractMethod.getContainingClass(),false));
  HighlightInfo errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
  if (ClassUtil.getAnyMethodToImplement(aClass) != null) {
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createImplementMethodsFix(aClass));
  }
  if (!(aClass instanceof PsiAnonymousClass) && HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,aClass.getModifierList()) == null) {
    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.ABSTRACT,true,false);
    QuickFixAction.registerQuickFixAction(errorResult,fix);
  }
  return errorResult;
}
