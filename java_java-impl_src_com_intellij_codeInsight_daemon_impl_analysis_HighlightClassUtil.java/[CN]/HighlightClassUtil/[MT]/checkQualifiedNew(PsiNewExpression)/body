{
  PsiExpression qualifier=expression.getQualifier();
  if (qualifier == null)   return null;
  PsiType type=expression.getType();
  if (type instanceof PsiArrayType) {
    HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,JavaErrorMessages.message("invalid.qualified.new"));
    QuickFixAction.registerQuickFixAction(info,new RemoveNewQualifierFix(expression,null));
    return info;
  }
  PsiClass aClass=PsiUtil.resolveClassInType(type);
  HighlightInfo info=null;
  if (aClass != null) {
    if (aClass.hasModifierProperty(PsiModifier.STATIC)) {
      info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,JavaErrorMessages.message("qualified.new.of.static.class"));
      if (!aClass.isEnum()) {
        IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.STATIC,false,false);
        QuickFixAction.registerQuickFixAction(info,fix);
      }
    }
 else     if (aClass instanceof PsiAnonymousClass) {
      final PsiClass baseClass=PsiUtil.resolveClassInType(((PsiAnonymousClass)aClass).getBaseClassType());
      if (baseClass != null && baseClass.isInterface()) {
        info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,"Anonymous class implements interface; cannot have qualifier for new");
      }
    }
    QuickFixAction.registerQuickFixAction(info,new RemoveNewQualifierFix(expression,aClass));
  }
  return info;
}
