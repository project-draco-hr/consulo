{
  PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0)   return false;
  for (  PsiMethod constructor : constructors) {
    PsiCodeBlock body=constructor.getBody();
    if (body == null)     return false;
    PsiStatement[] statements=body.getStatements();
    if (statements.length == 0)     return false;
    PsiStatement firstStatement=statements[0];
    if (!(firstStatement instanceof PsiExpressionStatement))     return false;
    PsiExpression expression=((PsiExpressionStatement)firstStatement).getExpression();
    if (!HighlightUtil.isSuperOrThisMethodCall(expression))     return false;
    PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    if (PsiKeyword.THIS.equals(methodCallExpression.getMethodExpression().getReferenceName()))     continue;
    PsiReferenceExpression referenceExpression=methodCallExpression.getMethodExpression();
    PsiExpression qualifierExpression=PsiUtil.skipParenthesizedExprDown(referenceExpression.getQualifierExpression());
    if (!(qualifierExpression instanceof PsiReferenceExpression) && !(qualifierExpression instanceof PsiNewExpression))     return false;
    PsiType type=qualifierExpression.getType();
    if (!(type instanceof PsiClassType))     return false;
    PsiClass resolved=((PsiClassType)type).resolve();
    if (resolved != baseClass)     return false;
  }
  return true;
}
