{
  final PsiFile containingFile=startElement.getContainingFile();
  if (editor == null || !CodeInsightUtilBase.prepareFileForWrite(containingFile))   return;
  PsiJavaCodeReferenceElement classReference=((PsiNewExpression)startElement).getClassReference();
  final MemberChooser<PsiMethodMember> chooser=chooseMethodsToImplement(editor,startElement,(PsiClass)classReference.resolve());
  if (chooser == null)   return;
  final List<PsiMethodMember> selectedElements=chooser.getSelectedElements();
  if (selectedElements == null || selectedElements.isEmpty())   return;
  new WriteCommandAction(project,file){
    @Override protected void run(    final Result result) throws Throwable {
      PsiNewExpression newExpression=(PsiNewExpression)JavaPsiFacade.getElementFactory(project).createExpressionFromText(startElement.getText() + "{}",startElement);
      newExpression=(PsiNewExpression)startElement.replace(newExpression);
      final PsiClass psiClass=newExpression.getAnonymousClass();
      PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(((PsiAnonymousClass)psiClass).getBaseClassType().resolve(),psiClass,PsiSubstitutor.EMPTY);
      for (      PsiMethodMember selectedElement : selectedElements) {
        selectedElement.setSubstitutor(superClassSubstitutor);
      }
      OverrideImplementUtil.overrideOrImplementMethodsInRightPlace(editor,psiClass,selectedElements,chooser.isCopyJavadoc(),chooser.isInsertOverrideAnnotation());
    }
  }
.execute();
}
