{
  final JsonElement id=issueObject.get("number");
  if (id == null) {
    return null;
  }
  final JsonElement summary=issueObject.get("title");
  if (summary == null) {
    return null;
  }
  JsonElement state=issueObject.get("state");
  if (state == null) {
    return null;
  }
  final boolean isClosed=!"open".equals(state.getAsString());
  final JsonElement description=issueObject.get("body");
  final Ref<Date> updated=new Ref<Date>();
  final Ref<Date> created=new Ref<Date>();
  try {
    JsonElement updatedAt=issueObject.get("updated_at");
    if (updatedAt != null) {
      updated.set(TaskUtil.parseDate(updatedAt.getAsString()));
    }
 else {
      LOG.warn("Couldn't find 'updated-at' field for the issue: " + issueObject);
    }
    JsonElement createdAt=issueObject.get("created_at");
    if (createdAt != null) {
      created.set(TaskUtil.parseDate(createdAt.getAsString()));
    }
 else {
      LOG.warn("Couldn't find 'created-at' field for the issue: " + issueObject);
    }
  }
 catch (  ParseException e) {
    LOG.warn(e);
  }
  return new Task(){
    @Override public boolean isIssue(){
      return true;
    }
    @Override public String getIssueUrl(){
      final String id=getRealId(getId());
      return id != null ? getUrl() + "/" + getRepoAuthor()+ "/"+ myRepoName+ "/issues/issue/"+ id : null;
    }
    @NotNull @Override public String getId(){
      return myRepoName + "-" + id;
    }
    @NotNull @Override public String getSummary(){
      return summary.getAsString();
    }
    public String getDescription(){
      return description.getAsString();
    }
    @NotNull @Override public Comment[] getComments(){
      try {
        return fetchComments(id.getAsString());
      }
 catch (      Exception e) {
        LOG.warn("Error fetching comments for " + id,e);
      }
      return Comment.EMPTY_ARRAY;
    }
    @Override public Icon getIcon(){
      return TasksIcons.Github;
    }
    @NotNull @Override public TaskType getType(){
      return TaskType.BUG;
    }
    @Override public Date getUpdated(){
      return updated.get();
    }
    @Override public Date getCreated(){
      return created.get();
    }
    @Override public boolean isClosed(){
      return isClosed;
    }
    @Override public TaskRepository getRepository(){
      return GitHubRepository.this;
    }
    @Override public String getPresentableName(){
      return getId() + ": " + getSummary();
    }
  }
;
}
