{
  final String id=element.getChildText("number");
  if (id == null) {
    return null;
  }
  final String summary=element.getChildText("title");
  if (summary == null) {
    return null;
  }
  final boolean isClosed=!"open".equals(element.getChildText("state"));
  final String description=element.getChildText("body");
  final Ref<Date> updated=new Ref<Date>();
  final Ref<Date> created=new Ref<Date>();
  try {
    updated.set(PivotalTrackerRepository.parseDate(element,"updated-at"));
    created.set(PivotalTrackerRepository.parseDate(element,"created-at"));
  }
 catch (  ParseException e) {
    LOG.warn(e);
  }
  return new Task(){
    @Override public boolean isIssue(){
      return true;
    }
    @Override public String getIssueUrl(){
      final String id=getRealId(getId());
      return id != null ? getUrl() + "/" + getRepoAuthor()+ "/"+ myRepoName+ "/issues/issue/"+ id : null;
    }
    @NotNull @Override public String getId(){
      return myRepoName + "-" + id;
    }
    @NotNull @Override public String getSummary(){
      return summary;
    }
    public String getDescription(){
      return description;
    }
    @NotNull @Override public Comment[] getComments(){
      try {
        return fetchComments(id);
      }
 catch (      Exception e) {
        LOG.warn("Error fetching comments for " + id,e);
      }
      return Comment.EMPTY_ARRAY;
    }
    @Override public Icon getIcon(){
      return GitHubRepositoryType.ICON;
    }
    @NotNull @Override public TaskType getType(){
      return TaskType.BUG;
    }
    @Override public Date getUpdated(){
      return updated.get();
    }
    @Override public Date getCreated(){
      return created.get();
    }
    @Override public boolean isClosed(){
      return isClosed;
    }
    @Override public TaskRepository getRepository(){
      return GitHubRepository.this;
    }
    @Override public String getPresentableName(){
      return getId() + ": " + getSummary();
    }
    @Override public String getCustomIcon(){
      return null;
    }
  }
;
}
