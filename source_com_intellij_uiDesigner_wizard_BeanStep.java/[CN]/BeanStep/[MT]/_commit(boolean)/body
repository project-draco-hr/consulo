{
  final boolean newBindToNewBean=myRbBindToNewBean.isSelected();
  if (myData.myBindToNewBean != newBindToNewBean) {
    resetBindings();
  }
  myData.myBindToNewBean=newBindToNewBean;
  if (myData.myBindToNewBean) {
    final String oldShortClassName=myData.myShortClassName;
    final String oldPackageName=myData.myPackageName;
    final String shortClassName=myTfShortClassName.getText().trim();
    if (shortClassName.length() == 0) {
      throw new CommitStepException(UIDesignerBundle.message("error.please.specify.class.name.of.the.bean.to.be.created"));
    }
    final PsiManager psiManager=PsiManager.getInstance(myData.myProject);
    if (!psiManager.getNameHelper().isIdentifier(shortClassName)) {
      throw new CommitStepException(UIDesignerBundle.message("error.X.is.not.a.valid.class.name",shortClassName));
    }
    final String packageName=myTfWithBtnChoosePackage.getText().trim();
    if (packageName.length() != 0 && psiManager.findPackage(packageName) == null) {
      throw new CommitStepException(UIDesignerBundle.message("error.package.with.name.X.does.not.exist",packageName));
    }
    myData.myShortClassName=shortClassName;
    myData.myPackageName=packageName;
{
      final String fullClassName=packageName.length() != 0 ? packageName + "." + shortClassName : shortClassName;
      final Module module=ModuleUtil.getModuleForFile(myData.myProject,myData.myFormFile);
      if (psiManager.findClass(fullClassName,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module)) != null) {
        throw new CommitStepException(UIDesignerBundle.message("error.cannot.create.class.X.because.it.already.exists",fullClassName));
      }
    }
    if (!Comparing.equal(oldShortClassName,shortClassName) || !Comparing.equal(oldPackageName,packageName)) {
      resetBindings();
    }
  }
 else {
    final String oldFqClassName=myData.myBeanClass != null ? myData.myBeanClass.getQualifiedName() : null;
    final String newFqClassName=myTfWitgBtnChooseClass.getText().trim();
    if (newFqClassName.length() == 0) {
      throw new CommitStepException(UIDesignerBundle.message("error.please.specify.fully.qualified.name.of.bean.class"));
    }
    final PsiClass aClass=PsiManager.getInstance(myData.myProject).findClass(newFqClassName,GlobalSearchScope.allScope(myData.myProject));
    if (aClass == null) {
      throw new CommitStepException(UIDesignerBundle.message("error.class.with.name.X.does.not.exist",newFqClassName));
    }
    myData.myBeanClass=aClass;
    if (!Comparing.equal(oldFqClassName,newFqClassName)) {
      resetBindings();
    }
  }
}
