{
  final ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  final String projectFilePath=dialog.getNewProjectFilePath();
  final ProjectBuilder projectBuilder=dialog.getProjectBuilder();
  try {
    File projectDir=new File(projectFilePath).getParentFile();
    FileUtil.ensureExists(projectDir);
    if (StorageScheme.DIRECTORY_BASED == dialog.getStorageScheme()) {
      final File ideaDir=new File(projectFilePath,Project.DIRECTORY_STORE_FOLDER);
      FileUtil.ensureExists(ideaDir);
    }
    final Project newProject;
    if (projectBuilder == null || !projectBuilder.isUpdate()) {
      String name=dialog.getProjectName();
      newProject=projectBuilder == null ? projectManager.newProject(name,projectFilePath,true,false) : projectBuilder.createProject(name,projectFilePath);
    }
 else {
      newProject=projectToClose;
    }
    if (newProject == null)     return projectToClose;
    final Sdk jdk=dialog.getNewProjectJdk();
    if (jdk != null) {
      CommandProcessor.getInstance().executeCommand(newProject,new Runnable(){
        public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              applyJdkToProject(newProject,jdk);
            }
          }
);
        }
      }
,null,null);
    }
    final String compileOutput=dialog.getNewCompileOutput();
    CommandProcessor.getInstance().executeCommand(newProject,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            String canonicalPath=compileOutput;
            try {
              canonicalPath=FileUtil.resolveShortWindowsName(compileOutput);
            }
 catch (            IOException e) {
            }
            canonicalPath=FileUtil.toSystemIndependentName(canonicalPath);
            CompilerProjectExtension.getInstance(newProject).setCompilerOutputUrl(VfsUtilCore.pathToUrl(canonicalPath));
          }
        }
);
      }
    }
,null,null);
    if (!ApplicationManager.getApplication().isUnitTestMode()) {
      newProject.save();
    }
    if (projectBuilder != null && !projectBuilder.validate(projectToClose,newProject)) {
      return projectToClose;
    }
    if (newProject != projectToClose && !ApplicationManager.getApplication().isUnitTestMode()) {
      closePreviousProject(projectToClose);
    }
    if (projectBuilder != null) {
      projectBuilder.commit(newProject,null,ModulesProvider.EMPTY_MODULES_PROVIDER);
    }
    final boolean need2OpenProjectStructure=projectBuilder == null || projectBuilder.isOpenProjectSettingsAfter();
    StartupManager.getInstance(newProject).registerPostStartupActivity(new Runnable(){
      public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            if (newProject.isDisposed())             return;
            if (need2OpenProjectStructure) {
              ModulesConfigurator.showDialog(newProject,null,null);
            }
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                if (newProject.isDisposed())                 return;
                final ToolWindow toolWindow=ToolWindowManager.getInstance(newProject).getToolWindow(ToolWindowId.PROJECT_VIEW);
                if (toolWindow != null) {
                  toolWindow.activate(null);
                }
              }
            }
,ModalityState.NON_MODAL);
          }
        }
);
      }
    }
);
    if (newProject != projectToClose) {
      ProjectUtil.updateLastProjectLocation(projectFilePath);
      if (SystemInfo.isMacOSLion) {
        IdeFocusManager instance=IdeFocusManager.findInstance();
        IdeFrame lastFocusedFrame=instance.getLastFocusedFrame();
        if (lastFocusedFrame != null) {
          boolean fullScreen=WindowManagerEx.getInstanceEx().isFullScreen((Frame)lastFocusedFrame);
          if (fullScreen) {
            newProject.putUserData(MacMainFrameDecorator.SHOULD_OPEN_IN_FULLSCREEN,Boolean.TRUE);
          }
        }
      }
      projectManager.openProject(newProject);
    }
    if (!ApplicationManager.getApplication().isUnitTestMode()) {
      newProject.save();
    }
    return newProject;
  }
  finally {
    if (projectBuilder != null) {
      projectBuilder.cleanup();
    }
  }
}
