{
  Map<String,String> result=myCachedProperties;
  if (result != null) {
    return result;
  }
  result=Collections.emptyMap();
  final String propertyName=getName().getRawText();
  if (propertyName != null) {
    final String propertyValue=getValue().getRawText();
    if (propertyValue != null) {
      result=Collections.singletonMap(propertyName,propertyValue);
    }
 else {
      String locValue=getLocation().getStringValue();
      if (locValue != null) {
        final File file=new File(locValue);
        if (!file.isAbsolute()) {
          final String baseDir=getContextAntProject().getProjectBasedirPath();
          if (baseDir != null) {
            locValue=PathUtil.getCanonicalPath(new File(baseDir,locValue).getPath());
          }
        }
        result=Collections.singletonMap(propertyName,FileUtil.toSystemDependentName(locValue));
      }
 else {
        final String tagText=getXmlTag().getText();
        result=Collections.singletonMap(propertyName,tagText);
      }
    }
  }
 else {
    final PsiFileSystemItem psiFile=getFile().getValue();
    if (psiFile != null) {
      if (psiFile instanceof PropertiesFile) {
        result=new HashMap<String,String>();
        for (        final IProperty property : ((PropertiesFile)psiFile).getProperties()) {
          result.put(property.getUnescapedKey(),property.getValue());
        }
      }
    }
 else     if (getEnvironment().getRawText() != null) {
      String prefix=getEnvironment().getRawText();
      if (!prefix.endsWith(".")) {
        prefix+=".";
      }
      result=new HashMap<String,String>();
      for (      Map.Entry<String,String> entry : System.getenv().entrySet()) {
        result.put(prefix + entry.getKey(),entry.getValue());
      }
    }
 else {
      final String resource=getResource().getStringValue();
      if (resource != null) {
        final ClassLoader loader=getClassLoader();
        if (loader != null) {
          final InputStream stream=loader.getResourceAsStream(resource);
          if (stream != null) {
            try {
              final PropertiesFile propFile=(PropertiesFile)CustomAntElementsRegistry.loadContentAsFile(getXmlTag().getProject(),stream,StdFileTypes.PROPERTIES);
              result=new HashMap<String,String>();
              for (              final IProperty property : propFile.getProperties()) {
                result.put(property.getUnescapedKey(),property.getValue());
              }
            }
 catch (            IOException ignored) {
            }
          }
        }
      }
    }
  }
  return (myCachedProperties=result);
}
