{
  CheckUtil.checkWritable(this);
  ASTNode type=SourceTreeToPsiMap.psiElementToTree(getTypeElement());
  ASTNode modifierList=SourceTreeToPsiMap.psiElementToTree(getModifierList());
  ASTNode field=type.getTreeParent();
  while (true) {
    ASTNode comma=TreeUtil.skipElements(field.getTreeNext(),ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);
    if (comma == null || comma.getElementType() != JavaTokenType.COMMA)     break;
    ASTNode nextField=TreeUtil.skipElements(comma.getTreeNext(),ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);
    if (nextField == null || nextField.getElementType() != JavaElementType.FIELD)     break;
    TreeElement semicolon=Factory.createSingleLeafElement(JavaTokenType.SEMICOLON,new char[]{';'},0,1,null,getManager());
    CodeEditUtil.addChild((CompositeElement)field,semicolon,null);
    CodeEditUtil.removeChild((CompositeElement)comma.getTreeParent(),(TreeElement)comma);
    TreeElement typeClone=(TreeElement)type.clone();
    final CharTable charTableByTree=SharedImplUtil.findCharTableByTree(type);
    typeClone.putUserData(CharTable.CHAR_TABLE_KEY,charTableByTree);
    CodeEditUtil.addChild((CompositeElement)nextField,typeClone,(TreeElement)nextField.getFirstChildNode());
    TreeElement modifierListClone=(TreeElement)modifierList.clone();
    modifierListClone.putUserData(CharTable.CHAR_TABLE_KEY,charTableByTree);
    CodeEditUtil.addChild((CompositeElement)nextField,modifierListClone,(TreeElement)nextField.getFirstChildNode());
    field=nextField;
  }
  SharedImplUtil.normalizeBrackets(this);
}
