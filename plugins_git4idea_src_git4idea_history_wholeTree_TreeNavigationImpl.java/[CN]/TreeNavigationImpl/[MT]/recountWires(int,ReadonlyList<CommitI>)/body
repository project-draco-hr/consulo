{
  final Map<Integer,Integer> recalculateMap=new HashMap<Integer,Integer>();
  Ring<Integer> usedWires=getUsedWires(fromIdx,commits);
  final Ring.IntegerRing ring=new Ring.IntegerRing(usedWires.getUsed());
  int runningCommitNumber=0;
  final Iterator<WireEvent> iterator=createWireEventsIterator(fromIdx);
  for (; iterator.hasNext(); ) {
    final WireEvent we=iterator.next();
    recountFragmentZwichem(commits,recalculateMap,runningCommitNumber,we.getCommitIdx());
    runningCommitNumber=we.getCommitIdx() + 1;
    final int[] wireEnds=we.getWireEnds();
    if (wireEnds != null) {
      for (      int wireEnd : wireEnds) {
        ring.back(wireEnd);
      }
    }
    if (we.isStart()) {
      final CommitI thisCommit=commits.get(we.getCommitIdx());
      final int thisWireNum=thisCommit.getWireNumber();
      final Integer newNum=ring.getFree();
      if (newNum != thisWireNum) {
        recalculateMap.put(thisWireNum,newNum);
        thisCommit.setWireNumber(newNum);
      }
    }
    if (we.isEnd()) {
      ring.back(commits.get(we.getCommitIdx()).getWireNumber());
    }
    final int[] commitsStarts=we.getCommitsStarts();
    if (commitsStarts.length > 0 && (!we.isEnd())) {
      for (      int commitStart : commitsStarts) {
        Integer corrected=recalculateMap.get(commitStart);
        int wasWireNumber=commits.get(commitStart).getWireNumber();
        corrected=(corrected == null) ? wasWireNumber : corrected;
        if (!ring.isNumUsed(corrected)) {
          final Integer newNum=ring.getFree();
          recalculateMap.put(wasWireNumber,newNum);
        }
      }
    }
  }
  recountFragmentZwichem(commits,recalculateMap,runningCommitNumber,commits.getSize() - 1);
}
