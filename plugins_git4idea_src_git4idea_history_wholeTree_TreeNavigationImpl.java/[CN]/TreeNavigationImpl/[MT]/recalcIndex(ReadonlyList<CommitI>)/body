{
  if (myWireEvents.isEmpty())   return;
  Integer lastIndexKey=myRingIndex.isEmpty() ? null : myRingIndex.lastKey();
  final SortedMap<Integer,WireEvent> tail;
  final Ring<Integer> ring;
  if (lastIndexKey != null) {
    tail=myWireEvents.tailMap(lastIndexKey,false);
    final int size=tail.size();
    if (size == 1)     return;
    final Integer lastKey=myWireEvents.lastKey();
    if (lastKey - lastIndexKey < myCommitIndexInterval || size < myNumWiresInGroup) {
      return;
    }
    ring=myRingIndex.lastEntry().getValue().getUsedInRing();
  }
 else {
    lastIndexKey=myWireEvents.firstKey();
    ring=new Ring.IntegerRing();
    final List<Integer> used=ring.getUsed();
    myRingIndex.put(lastIndexKey,new RingIndex(used.toArray(new Integer[used.size()])));
    performOnRing(ring,myWireEvents.firstEntry().getValue(),commits);
    tail=myWireEvents.tailMap(lastIndexKey,false);
  }
  int cnt=0;
  int recordCommitIdx=myCommitIndexInterval + myWireEvents.floorKey(lastIndexKey);
  for (  Integer integer : tail.keySet()) {
    ++cnt;
    if ((cnt >= myNumWiresInGroup) || (integer >= recordCommitIdx)) {
      final List<Integer> used=ring.getUsed();
      myRingIndex.put(integer,new RingIndex(used.toArray(new Integer[used.size()])));
      cnt=0;
      recordCommitIdx+=myCommitIndexInterval;
    }
    performOnRing(ring,tail.get(integer),commits);
  }
}
