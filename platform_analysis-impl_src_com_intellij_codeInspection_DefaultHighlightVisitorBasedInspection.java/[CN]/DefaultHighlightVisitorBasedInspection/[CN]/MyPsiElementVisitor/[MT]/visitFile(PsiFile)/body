{
  final VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile == null) {
    return;
  }
  final Project project=file.getProject();
  Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  if (document == null)   return;
  DaemonProgressIndicator progress=new DaemonProgressIndicator();
  progress.start();
  try {
    TextEditorHighlightingPassRegistrarEx passRegistrarEx=TextEditorHighlightingPassRegistrarEx.getInstanceEx(project);
    List<TextEditorHighlightingPass> passes=passRegistrarEx.instantiateMainPasses(file,document,HighlightInfoProcessor.getEmpty());
    List<GeneralHighlightingPass> gpasses=ContainerUtil.collect(passes.iterator(),FilteringIterator.instanceOf(GeneralHighlightingPass.class));
    for (    final GeneralHighlightingPass gpass : gpasses) {
      gpass.setHighlightVisitorProducer(new NotNullProducer<HighlightVisitor[]>(){
        @NotNull @Override public HighlightVisitor[] produce(){
          gpass.incVisitorUsageCount(1);
          return new HighlightVisitor[]{new DefaultHighlightVisitor(project,highlightErrorElements,runAnnotators,true)};
        }
      }
);
    }
    for (    TextEditorHighlightingPass pass : gpasses) {
      pass.doCollectInformation(progress);
      List<HighlightInfo> infos=pass.getInfos();
      for (      HighlightInfo info : infos) {
        if (info == null)         continue;
        if (info.getSeverity().compareTo(HighlightSeverity.INFORMATION) <= 0)         continue;
        result.add(Pair.create(file,info));
      }
    }
  }
  finally {
    progress.stop();
  }
}
