{
  for (  InspectionProfileEntry tool : tools) {
    enableInspectionTool(tool);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(PROFILE){
    @Override @NotNull public ModifiableModel getModifiableModel(){
      mySource=this;
      return this;
    }
    @Override @NotNull public InspectionToolWrapper[] getInspectionTools(    PsiElement element){
      final Collection<InspectionToolWrapper> tools=myAvailableTools.values();
      return tools.toArray(new InspectionToolWrapper[tools.size()]);
    }
    @Override public InspectionToolWrapper getToolById(    @NotNull String id,    @NotNull PsiElement element){
      if (myAvailableTools.containsKey(id)) {
        return myAvailableTools.get(id);
      }
      return super.getToolById(id,element);
    }
    @NotNull @Override public List<Tools> getAllEnabledInspectionTools(    Project project){
      List<Tools> result=new ArrayList<Tools>();
      for (      InspectionToolWrapper toolWrapper : getInspectionTools(getFile())) {
        result.add(new ToolsImpl(toolWrapper,toolWrapper.getDefaultLevel(),true));
      }
      return result;
    }
    @Override public boolean isToolEnabled(    HighlightDisplayKey key,    PsiElement element){
      return key != null && key.toString() != null && myAvailableTools.containsKey(key.toString());
    }
    @Override public InspectionToolWrapper getInspectionTool(    @NotNull String shortName,    Project project){
      return myAvailableTools.get(shortName);
    }
    @Override public HighlightDisplayLevel getErrorLevel(    @NotNull HighlightDisplayKey key,    PsiElement element){
      final InspectionToolWrapper toolWrapper=myAvailableTools.get(key.toString());
      return toolWrapper == null ? HighlightDisplayLevel.WARNING : toolWrapper.getDefaultLevel();
    }
    @Override public InspectionToolWrapper getInspectionTool(    @NotNull String shortName,    @NotNull PsiElement element){
      return myAvailableTools.get(shortName);
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  Disposer.register(getTestRootDisposable(),new Disposable(){
    @Override public void dispose(){
      inspectionProfileManager.deleteProfile(PROFILE);
    }
  }
);
  inspectionProfileManager.setRootProfile(profile.getName());
  InspectionProjectProfileManager.getInstance(getProject()).updateProfile(profile);
  InspectionProjectProfileManager.getInstance(getProject()).setProjectProfile(profile.getName());
}
