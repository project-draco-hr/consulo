{
  final List<Trinity<PsiFile,Editor,ExpectedHighlightingData>> datas=ContainerUtil.map2List(files,new Function<VirtualFile,Trinity<PsiFile,Editor,ExpectedHighlightingData>>(){
    @Override public Trinity<PsiFile,Editor,ExpectedHighlightingData> fun(    final VirtualFile file){
      final PsiFile psiFile=myPsiManager.findFile(file);
      Assert.assertNotNull(psiFile);
      final Document document=PsiDocumentManager.getInstance(getProject()).getDocument(psiFile);
      Assert.assertNotNull(document);
      ExpectedHighlightingData data=new ExpectedHighlightingData(document,checkWarnings,checkWeakWarnings,checkInfos,psiFile);
      data.init();
      return Trinity.create(psiFile,createEditor(file),data);
    }
  }
);
  long elapsed=0;
  for (  Trinity<PsiFile,Editor,ExpectedHighlightingData> trinity : datas) {
    myEditor=trinity.second;
    myFile=trinity.first;
    elapsed+=collectAndCheckHighlighting(trinity.third);
  }
  return elapsed;
}
