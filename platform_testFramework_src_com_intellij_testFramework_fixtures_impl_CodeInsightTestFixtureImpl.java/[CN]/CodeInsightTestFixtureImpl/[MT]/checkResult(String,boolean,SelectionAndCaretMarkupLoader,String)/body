{
  assertInitialized();
  Project project=getProject();
  PsiFile file=getFile();
  Editor editor=getEditor();
  if (editor instanceof EditorWindow) {
    editor=((EditorWindow)editor).getDelegate();
    file=InjectedLanguageUtil.getTopLevelFile(file);
  }
  project.getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
  if (stripTrailingSpaces) {
    actualText=stripTrailingSpaces(actualText);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  String newFileText1=loader.newFileText;
  if (stripTrailingSpaces) {
    newFileText1=stripTrailingSpaces(newFileText1);
  }
  actualText=StringUtil.convertLineSeparators(actualText);
  if (!Comparing.equal(newFileText1,actualText)) {
    if (loader.filePath != null) {
      throw new FileComparisonFailure(expectedFile,newFileText1,actualText,loader.filePath);
    }
 else {
      throw new ComparisonFailure(expectedFile,newFileText1,actualText);
    }
  }
  if (loader.caretMarker != null) {
    final int tabSize=CodeStyleSettingsManager.getSettings(getProject()).getIndentOptions(StdFileTypes.JAVA).TAB_SIZE;
    int caretLine=StringUtil.offsetToLineNumber(loader.newFileText,loader.caretMarker.getStartOffset());
    int caretCol=EditorUtil.calcColumnNumber(null,loader.newFileText,StringUtil.lineColToOffset(loader.newFileText,caretLine,0),loader.caretMarker.getStartOffset(),tabSize);
    final int actualLine=editor.getCaretModel().getLogicalPosition().line;
    final int actualCol=editor.getCaretModel().getLogicalPosition().column;
    boolean caretPositionEquals=caretLine == actualLine && caretCol == actualCol;
    Assert.assertTrue("Caret position in " + expectedFile + " differs. Expected "+ genCaretPositionPresentation(caretLine,caretCol)+ ". Actual "+ genCaretPositionPresentation(actualLine,actualCol),caretPositionEquals);
  }
  if (loader.selStartMarker != null && loader.selEndMarker != null) {
    int selStartLine=StringUtil.offsetToLineNumber(loader.newFileText,loader.selStartMarker.getStartOffset());
    int selStartCol=loader.selStartMarker.getStartOffset() - StringUtil.lineColToOffset(loader.newFileText,selStartLine,0);
    int selEndLine=StringUtil.offsetToLineNumber(loader.newFileText,loader.selEndMarker.getEndOffset());
    int selEndCol=loader.selEndMarker.getEndOffset() - StringUtil.lineColToOffset(loader.newFileText,selEndLine,0);
    int selectionStart;
    int selectionEnd;
    if (editor.getSelectionModel().hasBlockSelection()) {
      int[] starts=editor.getSelectionModel().getBlockSelectionStarts();
      int[] ends=editor.getSelectionModel().getBlockSelectionEnds();
      selectionStart=starts[starts.length - 1];
      selectionEnd=ends[ends.length - 1];
    }
 else {
      selectionStart=editor.getSelectionModel().getSelectionStart();
      selectionEnd=editor.getSelectionModel().getSelectionEnd();
    }
    final int selStartLineActual=StringUtil.offsetToLineNumber(loader.newFileText,selectionStart);
    final int selStartColActual=selectionStart - StringUtil.lineColToOffset(loader.newFileText,selStartLineActual,0);
    final int selEndLineActual=StringUtil.offsetToLineNumber(loader.newFileText,selectionEnd);
    final int selEndColActual=selectionEnd - StringUtil.lineColToOffset(loader.newFileText,selEndLineActual,0);
    final boolean selectionEquals=selStartCol == selStartColActual && selStartLine == selStartLineActual && selEndCol == selEndColActual && selEndLine == selEndLineActual;
    Assert.assertTrue("selection in " + expectedFile + " differs. Expected "+ genSelectionPresentation(selStartLine,selStartCol,selEndLine,selEndCol)+ ". Actual "+ genSelectionPresentation(selStartLineActual,selStartColActual,selEndLineActual,selEndColActual),selectionEquals);
  }
 else   if (editor != null) {
    Assert.assertTrue("has no selection in " + expectedFile,!editor.getSelectionModel().hasSelection());
  }
}
