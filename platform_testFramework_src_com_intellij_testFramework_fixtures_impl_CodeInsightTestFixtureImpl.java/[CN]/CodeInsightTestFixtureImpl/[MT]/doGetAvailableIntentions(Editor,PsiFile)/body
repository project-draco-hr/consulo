{
  ShowIntentionsPass.IntentionsInfo intentions=new ShowIntentionsPass.IntentionsInfo();
  ShowIntentionsPass.getActionsToShow(editor,file,intentions,-1);
  List<HighlightInfo.IntentionActionDescriptor> descriptors=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  descriptors.addAll(intentions.intentionsToShow);
  descriptors.addAll(intentions.errorFixesToShow);
  descriptors.addAll(intentions.inspectionFixesToShow);
  descriptors.addAll(intentions.guttersToShow);
  PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  List<IntentionAction> result=new ArrayList<IntentionAction>();
  List<HighlightInfo> infos=DaemonCodeAnalyzerEx.getInstanceEx(file.getProject()).getFileLevelHighlights(file.getProject(),file);
  for (  HighlightInfo info : infos) {
    for (    Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
      HighlightInfo.IntentionActionDescriptor actionInGroup=pair.first;
      if (actionInGroup.getAction().isAvailable(file.getProject(),editor,file)) {
        descriptors.add(actionInGroup);
      }
    }
  }
  for (  HighlightInfo.IntentionActionDescriptor descriptor : descriptors) {
    result.add(descriptor.getAction());
    List<IntentionAction> options=descriptor.getOptions(element,editor);
    if (options != null) {
      for (      IntentionAction option : options) {
        if (option.isAvailable(file.getProject(),editor,file)) {
          result.add(option);
        }
      }
    }
  }
  return result;
}
