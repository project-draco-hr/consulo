{
  InspectionToolRegistrar registrar=new InspectionToolRegistrar(null){
    @Override public List<InspectionToolWrapper> createTools(){
      return ContainerUtil.map(tools,new Function<InspectionTool,InspectionToolWrapper>(){
        @Override public InspectionToolWrapper fun(        InspectionTool tool){
          return tool instanceof InspectionToolWrapper ? (InspectionToolWrapper)tool : wrapTool(tool);
        }
      }
);
    }
  }
;
  final InspectionProfileImpl profile=new InspectionProfileImpl("test",registrar,InspectionProfileManager.getInstance());
  GlobalInspectionContextImpl globalContext=new GlobalInspectionContextImpl(project,inspectionManager.getContentManager()){
    @Override protected List<ToolsImpl> getUsedTools(){
      try {
        InspectionProfileImpl.INIT_INSPECTIONS=true;
        for (        InspectionTool tool : tools) {
          profile.enableTool(tool.getShortName());
        }
        return profile.getAllEnabledInspectionTools(project);
      }
  finally {
        InspectionProfileImpl.INIT_INSPECTIONS=false;
      }
    }
  }
;
  globalContext.setCurrentScope(scope);
  return globalContext;
}
