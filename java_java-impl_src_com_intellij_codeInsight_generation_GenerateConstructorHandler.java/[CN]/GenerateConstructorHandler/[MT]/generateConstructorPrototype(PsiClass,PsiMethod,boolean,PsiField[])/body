{
  PsiManager manager=aClass.getManager();
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(manager.getProject());
  PsiMethod constructor=factory.createConstructor();
  constructor.setName(aClass.getName());
  String modifier=getConstructorModifier(aClass);
  if (modifier != null) {
    PsiUtil.setModifierProperty(constructor,modifier,true);
  }
  if (baseConstructor != null) {
    PsiJavaCodeReferenceElement[] throwRefs=baseConstructor.getThrowsList().getReferenceElements();
    for (    PsiJavaCodeReferenceElement ref : throwRefs) {
      constructor.getThrowsList().add(ref);
    }
    if (copyJavaDoc) {
      final PsiDocComment docComment=((PsiMethod)baseConstructor.getNavigationElement()).getDocComment();
      if (docComment != null) {
        constructor.addAfter(docComment,null);
      }
    }
  }
  @NonNls StringBuilder body=new StringBuilder();
  body.append("{\n");
  if (baseConstructor != null) {
    PsiClass superClass=aClass.getSuperClass();
    LOG.assertTrue(superClass != null);
    if (!CommonClassNames.JAVA_LANG_ENUM.equals(superClass.getQualifiedName())) {
      if (baseConstructor instanceof PsiCompiledElement) {
        PsiClass dummyClass=factory.createClass("Dummy");
        baseConstructor=(PsiMethod)dummyClass.add(baseConstructor);
      }
      PsiParameter[] parms=baseConstructor.getParameterList().getParameters();
      for (      PsiParameter parm : parms) {
        constructor.getParameterList().add(parm);
      }
      if (parms.length > 0) {
        body.append("super(");
        for (int j=0; j < parms.length; j++) {
          PsiParameter parm=parms[j];
          if (j > 0) {
            body.append(",");
          }
          body.append(parm.getName());
        }
        body.append(");\n");
      }
    }
  }
  JavaCodeStyleManager javaStyle=JavaCodeStyleManager.getInstance(aClass.getProject());
  for (  PsiField field : fields) {
    String fieldName=field.getName();
    String name=javaStyle.variableNameToPropertyName(fieldName,VariableKind.FIELD);
    String parmName=javaStyle.propertyNameToVariableName(name,VariableKind.PARAMETER);
    parmName=javaStyle.suggestUniqueVariableName(parmName,constructor,true);
    PsiParameter parm=factory.createParameter(parmName,field.getType());
    final NullableNotNullManager nullableManager=NullableNotNullManager.getInstance(field.getProject());
    final String notNull=nullableManager.getNotNull(field);
    if (notNull != null) {
      parm.getModifierList().addAfter(factory.createAnnotationFromText("@" + notNull,field),null);
    }
    constructor.getParameterList().add(parm);
    if (fieldName.equals(parmName)) {
      body.append("this.");
    }
    body.append(fieldName);
    body.append("=");
    body.append(parmName);
    body.append(";\n");
  }
  body.append("}");
  PsiCodeBlock bodyBlock=factory.createCodeBlockFromText(body.toString(),null);
  constructor.getBody().replace(bodyBlock);
  constructor=(PsiMethod)codeStyleManager.reformat(constructor);
  return constructor;
}
