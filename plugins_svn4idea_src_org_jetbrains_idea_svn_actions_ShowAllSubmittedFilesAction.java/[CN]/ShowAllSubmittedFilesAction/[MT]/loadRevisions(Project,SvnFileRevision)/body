{
  final SvnRevisionNumber number=((SvnRevisionNumber)svnRevision.getRevisionNumber());
  final ArrayList<AbstractRevisions> revisions=new ArrayList<AbstractRevisions>();
  final SVNRevision targetRevision=((SvnRevisionNumber)svnRevision.getRevisionNumber()).getRevision();
  final SvnVcs vcs=SvnVcs.getInstance(project);
  try {
    final Exception[] ex=new Exception[1];
    final String url=svnRevision.getURL();
    final SVNLogEntry[] logEntry=new SVNLogEntry[1];
    final SVNRepository repos=vcs.createRepository(url);
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        try {
          ProgressManager.getInstance().getProgressIndicator().setText(SvnBundle.message("progress.text.loading.log"));
          repos.log(new String[]{"/"},targetRevision.getNumber(),targetRevision.getNumber(),true,true,0,new ISVNLogEntryHandler(){
            public void handleLogEntry(            SVNLogEntry currentLogEntry){
              logEntry[0]=currentLogEntry;
            }
          }
);
          if (logEntry[0] == null) {
            throw new VcsException(SvnBundle.message("exception.text.cannot.load.version",number));
          }
          ProgressManager.getInstance().getProgressIndicator().setText(SvnBundle.message("progress.text.processing.changes"));
          AbstractSvnRevisionsFactory<SVNLogEntryPath> factory=new EntryRevisionsFactory(vcs,logEntry[0],repos);
          revisions.addAll(factory.createRevisionsListOn(new String[]{File.separator}));
        }
 catch (        Exception e) {
          ex[0]=e;
        }
      }
    }
,getTitle(targetRevision.getNumber()),false,project);
    if (ex[0] != null)     throw ex[0];
  }
 catch (  Exception e1) {
    Messages.showErrorDialog(SvnBundle.message("message.text.cannot.load.version",number,e1.getLocalizedMessage()),SvnBundle.message("message.title.error.fetching.affected.paths"));
    return null;
  }
  return revisions;
}
