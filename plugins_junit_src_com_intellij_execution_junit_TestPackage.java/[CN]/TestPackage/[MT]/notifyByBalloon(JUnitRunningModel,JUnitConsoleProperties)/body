{
  if (myFoundTests) {
    super.notifyByBalloon(model,consoleProperties);
  }
 else {
    final String packageName=myConfiguration.getPackage();
    if (packageName == null)     return;
    final Project project=myConfiguration.getProject();
    final PsiPackage aPackage=JavaPsiFacade.getInstance(project).findPackage(packageName);
    if (aPackage == null)     return;
    final Module module=myConfiguration.getConfigurationModule().getModule();
    if (module == null)     return;
    final Set<Module> modulesWithPackage=new HashSet<Module>();
    final PsiDirectory[] directories=aPackage.getDirectories();
    for (    PsiDirectory directory : directories) {
      final Module currentModule=ModuleUtil.findModuleForFile(directory.getVirtualFile(),project);
      if (module != currentModule && currentModule != null) {
        modulesWithPackage.add(currentModule);
      }
    }
    if (!modulesWithPackage.isEmpty()) {
      final String testRunDebugId=consoleProperties.isDebug() ? ToolWindowId.DEBUG : ToolWindowId.RUN;
      final ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
      final Function<Module,String> moduleNameRef=new Function<Module,String>(){
        @Override public String fun(        Module module){
          final String moduleName=module.getName();
          return "<a href=\"" + moduleName + "\">"+ moduleName+ "</a>";
        }
      }
;
      String message="Tests were not found in module \"" + module.getName() + "\".\n"+ "Use ";
      if (modulesWithPackage.size() == 1) {
        message+="module \"" + moduleNameRef.fun(modulesWithPackage.iterator().next()) + "\" ";
      }
 else {
        message+="one of\n" + StringUtil.join(modulesWithPackage,moduleNameRef,"\n") + "\n";
      }
      message+="instead";
      toolWindowManager.notifyByBalloon(testRunDebugId,MessageType.WARNING,message,null,new ResetConfigurationModuleAdapter(project,consoleProperties,toolWindowManager,testRunDebugId));
    }
  }
}
