{
  super.initialize();
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  final TestClassFilter filter=getClassFilter(data);
  final ExecutionException[] exception=new ExecutionException[1];
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        myConfiguration.configureClasspath(myJavaParameters);
      }
 catch (      CantRunException e) {
        exception[0]=e;
      }
    }
  }
);
  if (exception[0] != null) {
    throw exception[0];
  }
  try {
    myTempFile=FileUtil.createTempFile("idea_junit",".tmp");
    myTempFile.deleteOnExit();
    myJavaParameters.getProgramParametersList().add("@" + myTempFile.getAbsolutePath());
  }
 catch (  IOException e) {
    LOG.error(e);
  }
  try {
    final ServerSocket serverSocket=new ServerSocket(0,0,InetAddress.getByName(null));
    myJavaParameters.getProgramParametersList().add("-socket" + serverSocket.getLocalPort());
    findTestsWithProgress(new FindCallback(){
      public void found(      @NotNull final Collection<PsiClass> classes,      final boolean isJunit4){
        addClassesListToJavaParameters(classes,new Function<PsiElement,String>(){
          @Nullable public String fun(          PsiElement element){
            if (element instanceof PsiClass) {
              return JavaExecutionUtil.getRuntimeQualifiedName((PsiClass)element);
            }
 else             if (element instanceof PsiMethod) {
              PsiMethod method=(PsiMethod)element;
              return JavaExecutionUtil.getRuntimeQualifiedName(method.getContainingClass()) + "," + method.getName();
            }
 else {
              return null;
            }
          }
        }
,data.getPackageName(),false,isJunit4);
      }
    }
,filter,serverSocket);
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
