{
  if (isSyncSearch()) {
    THashSet<PsiClass> classes=new THashSet<PsiClass>();
    boolean isJUnit4=ConfigurationUtil.findAllTestClasses(classFilter,classes);
    callback.found(classes,isJUnit4);
    return;
  }
  final THashSet<PsiClass> classes=new THashSet<PsiClass>();
  final boolean[] isJunit4=new boolean[1];
  final Task.Backgroundable task=new Task.Backgroundable(classFilter.getProject(),ExecutionBundle.message("seaching.test.progress.title"),true){
    int myPort=-1;
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        final Socket socket=serverSocket.accept();
        final DataInputStream is=new DataInputStream(socket.getInputStream());
        try {
          myPort=is.readInt();
        }
  finally {
          is.close();
        }
      }
 catch (      IOException e) {
        LOG.info(e);
      }
      isJunit4[0]=ConfigurationUtil.findAllTestClasses(classFilter,classes);
    }
    @Override public void onSuccess(){
      callback.found(classes,isJunit4[0]);
      connect();
    }
    @Override public void onCancel(){
      connect();
    }
    @Override public DumbModeAction getDumbModeAction(){
      return DumbModeAction.WAIT;
    }
    private void connect(){
      Socket socket=null;
      try {
        socket=new Socket(InetAddress.getLocalHost(),myPort);
      }
 catch (      Throwable e) {
        LOG.info(e);
      }
 finally {
        try {
          if (socket != null)           socket.close();
        }
 catch (        Throwable e) {
          LOG.info(e);
        }
        try {
          serverSocket.close();
        }
 catch (        Throwable e) {
          LOG.info(e);
        }
      }
    }
  }
;
  ProgressManagerImpl.runProcessWithProgressAsynchronously(task,new BackgroundableProcessIndicator(task){
    @Override public void cancel(){
      try {
        if (!serverSocket.isClosed()) {
          new Socket(InetAddress.getLocalHost(),serverSocket.getLocalPort());
        }
      }
 catch (      Throwable e) {
        LOG.info(e);
      }
      super.cancel();
    }
  }
);
}
