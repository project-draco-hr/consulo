{
  if (isSyncSearch()) {
    THashSet<PsiClass> classes=new THashSet<PsiClass>();
    boolean isJUnit4=ConfigurationUtil.findAllTestClasses(classFilter,classes);
    callback.found(classes,isJUnit4);
    return;
  }
  final THashSet<PsiClass> classes=new THashSet<PsiClass>();
  final boolean[] isJunit4=new boolean[1];
  final Task.Backgroundable task=new Task.Backgroundable(classFilter.getProject(),ExecutionBundle.message("seaching.test.progress.title"),true){
    private Socket mySocket;
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        mySocket=serverSocket.accept();
      }
 catch (      IOException e) {
        LOG.info(e);
      }
      isJunit4[0]=ConfigurationUtil.findAllTestClasses(classFilter,classes);
    }
    @Override public void onSuccess(){
      callback.found(classes,isJunit4[0]);
      connect();
    }
    @Override public void onCancel(){
      connect();
    }
    @Override public DumbModeAction getDumbModeAction(){
      return DumbModeAction.WAIT;
    }
    private void connect(){
      DataOutputStream os=null;
      try {
        os=new DataOutputStream(mySocket.getOutputStream());
        os.writeBoolean(true);
      }
 catch (      Throwable e) {
        LOG.info(e);
      }
 finally {
        try {
          if (os != null)           os.close();
        }
 catch (        Throwable e) {
          LOG.info(e);
        }
        try {
          serverSocket.close();
        }
 catch (        Throwable e) {
          LOG.info(e);
        }
      }
    }
  }
;
  ProgressManagerImpl.runProcessWithProgressAsynchronously(task,new BackgroundableProcessIndicator(task){
    @Override public void cancel(){
      try {
        if (!serverSocket.isClosed()) {
          new Socket(InetAddress.getLocalHost(),serverSocket.getLocalPort());
        }
      }
 catch (      Throwable e) {
        LOG.info(e);
      }
      super.cancel();
    }
  }
);
}
