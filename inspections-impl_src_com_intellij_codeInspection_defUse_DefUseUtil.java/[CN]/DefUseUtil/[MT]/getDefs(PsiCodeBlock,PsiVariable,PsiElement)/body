{
  try {
    return new RefsDefs(body){
      final InstructionState[] states=getStates(instructions);
      protected int nNext(      int index){
        return states[index].getBackwardTraces().size();
      }
      protected int getNext(      int index,      int no){
        return states[index].getBackwardTraces().get(no);
      }
      protected boolean defs(){
        return true;
      }
      protected void processInstruction(      final Set<PsiElement> res,      final Instruction instruction,      int index){
        if (instruction instanceof WriteVariableInstruction) {
          WriteVariableInstruction instructionW=(WriteVariableInstruction)instruction;
          if (instructionW.variable == def) {
            final PsiElement element=flow.getElement(index);
            element.accept(new PsiRecursiveElementVisitor(){
              public void visitReferenceExpression(              PsiReferenceExpression ref){
                if (PsiUtil.isAccessedForWriting(ref)) {
                  if (ref.resolve() == def) {
                    res.add(ref);
                  }
                }
              }
              public void visitVariable(              PsiVariable var){
                if (var == def && (var instanceof PsiParameter || var.hasInitializer())) {
                  res.add(var.getNameIdentifier());
                }
              }
            }
);
          }
        }
      }
    }
.get(def,ref);
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
}
