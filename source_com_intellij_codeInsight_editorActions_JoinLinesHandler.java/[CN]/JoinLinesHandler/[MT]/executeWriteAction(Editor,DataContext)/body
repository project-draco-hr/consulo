{
  final DocumentEx doc=(DocumentEx)editor.getDocument();
  final Project project=(Project)DataManager.getInstance().getDataContext(editor.getContentComponent()).getData(DataConstants.PROJECT);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      LogicalPosition caretPosition=editor.getCaretModel().getLogicalPosition();
      PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(doc);
      if (psiFile == null) {
        myOriginalHandler.execute(editor,dataContext);
        return;
      }
      int startLine=caretPosition.line;
      int endLine=startLine + 1;
      if (editor.getSelectionModel().hasSelection()) {
        startLine=doc.getLineNumber(editor.getSelectionModel().getSelectionStart());
        endLine=doc.getLineNumber(editor.getSelectionModel().getSelectionEnd());
        if (doc.getLineStartOffset(endLine) == editor.getSelectionModel().getSelectionEnd())         endLine--;
      }
      int caretRestoreOffset=-1;
      for (int i=startLine; i < endLine; i++) {
        if (i >= doc.getLineCount() - 1)         break;
        int lineEndOffset=doc.getLineEndOffset(startLine);
        PsiDocumentManager.getInstance(project).commitDocument(doc);
        CharSequence text=doc.getCharsSequence();
        int firstNonSpaceOffsetInNextLine=doc.getLineStartOffset(startLine + 1);
        while (text.charAt(firstNonSpaceOffsetInNextLine) == ' ' || text.charAt(firstNonSpaceOffsetInNextLine) == '\t')         firstNonSpaceOffsetInNextLine++;
        PsiElement elementAtNextLineStart=psiFile.findElementAt(firstNonSpaceOffsetInNextLine);
        boolean isNextLineStartsWithComment=elementAtNextLineStart instanceof PsiComment || elementAtNextLineStart != null && PsiTreeUtil.getParentOfType(elementAtNextLineStart,PsiDocComment.class) != null;
        int lastNonSpaceOffsetInStartLine=lineEndOffset;
        while (lastNonSpaceOffsetInStartLine > 0 && (text.charAt(lastNonSpaceOffsetInStartLine - 1) == ' ' || text.charAt(lastNonSpaceOffsetInStartLine - 1) == '\t')) {
          lastNonSpaceOffsetInStartLine--;
        }
        int elemOffset=lastNonSpaceOffsetInStartLine > doc.getLineStartOffset(startLine) ? lastNonSpaceOffsetInStartLine - 1 : -1;
        PsiElement elementAtStartLineEnd=elemOffset == -1 ? null : psiFile.findElementAt(elemOffset);
        boolean isStartLineEndsWithComment=elementAtStartLineEnd instanceof PsiComment || elementAtStartLineEnd != null && PsiTreeUtil.getParentOfType(elementAtStartLineEnd,PsiDocComment.class) != null;
        if (lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) {
          doc.deleteString(doc.getLineStartOffset(startLine),firstNonSpaceOffsetInNextLine);
          int indent=-1;
          try {
            PsiDocumentManager.getInstance(project).commitDocument(doc);
            indent=CodeStyleManager.getInstance(project).adjustLineIndent(psiFile,startLine == 0 ? 0 : doc.getLineStartOffset(startLine));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
          if (caretRestoreOffset == -1) {
            caretRestoreOffset=indent;
          }
          continue;
        }
        doc.deleteString(lineEndOffset,lineEndOffset + doc.getLineSeparatorLength(startLine));
        text=doc.getCharsSequence();
        int start=lineEndOffset - 1;
        int end=lineEndOffset;
        while (start > 0 && (text.charAt(start) == ' ' || text.charAt(start) == '\t'))         start--;
        while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))         end++;
        PsiDocumentManager.getInstance(project).commitDocument(doc);
        int rc=tryJoinStringLiteral(doc,psiFile,start);
        if (rc == -1) {
          PsiElement psiAtStartLineEnd=psiFile.findElementAt(start);
          PsiElement psiAtNextLineStart=psiFile.findElementAt(end);
          rc=tryJoinDeclaration(psiAtStartLineEnd,psiAtNextLineStart);
          if (rc == -1) {
            rc=tryUnwrapBlockStatement(psiAtStartLineEnd,psiAtNextLineStart);
          }
        }
        if (rc != -1) {
          if (caretRestoreOffset == -1)           caretRestoreOffset=rc;
          continue;
        }
        if (caretRestoreOffset == -1)         caretRestoreOffset=start == lineEndOffset ? start : start + 1;
        if (isStartLineEndsWithComment && isNextLineStartsWithComment) {
          if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') {
            end++;
            while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))             end++;
          }
 else           if (text.charAt(end) == '/') {
            end+=2;
            while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))             end++;
          }
          doc.replaceString(start == lineEndOffset ? start : start + 1,end," ");
          continue;
        }
        while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))         end++;
        doc.replaceString(start == lineEndOffset ? start : start + 1,end," ");
        if (start <= doc.getLineStartOffset(startLine)) {
          try {
            PsiDocumentManager.getInstance(project).commitDocument(doc);
            CodeStyleManager.getInstance(project).adjustLineIndent(psiFile,doc.getLineStartOffset(startLine));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        int prevLineCount=doc.getLineCount();
        PsiDocumentManager.getInstance(project).commitDocument(doc);
        try {
          CodeStyleManager.getInstance(project).reformatRange(psiFile,start,end,true);
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
        if (prevLineCount < doc.getLineCount()) {
          end=doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine);
          start=end - doc.getLineSeparatorLength(startLine);
          int addedLinesCount=doc.getLineCount() - prevLineCount - 1;
          while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) {
            if (text.charAt(end) == '\n')             addedLinesCount--;
            end++;
          }
          doc.replaceString(start,end," ");
        }
        PsiDocumentManager.getInstance(project).commitDocument(doc);
      }
      if (editor.getSelectionModel().hasSelection()) {
        editor.getCaretModel().moveToOffset(editor.getSelectionModel().getSelectionEnd());
      }
 else       if (caretRestoreOffset != -1) {
        editor.getCaretModel().moveToOffset(caretRestoreOffset);
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        editor.getSelectionModel().removeSelection();
      }
    }
  }
);
}
