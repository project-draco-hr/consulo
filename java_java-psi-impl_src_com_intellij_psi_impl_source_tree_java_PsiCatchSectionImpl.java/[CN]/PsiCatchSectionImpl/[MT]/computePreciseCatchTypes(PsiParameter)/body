{
  if (parameter == null) {
    return ContainerUtil.emptyList();
  }
  final PsiType declaredType=parameter.getType();
  if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter,getCatchBlock())) {
    final PsiCodeBlock tryBlock=getTryStatement().getTryBlock();
    if (tryBlock != null) {
      final List<PsiClassType> thrownTypes=ExceptionUtil.getThrownExceptions(tryBlock);
      if (!thrownTypes.isEmpty()) {
        final PsiParameter[] parameters=getTryStatement().getCatchBlockParameters();
        final List<PsiType> uncaughtTypes=ContainerUtil.mapNotNull(thrownTypes,new NullableFunction<PsiClassType,PsiType>(){
          @Override public PsiType fun(          final PsiClassType thrownType){
            for (int i=0; i < parameters.length && parameters[i] != parameter; i++) {
              final PsiType catchType=parameters[i].getType();
              if (catchType.isAssignableFrom(thrownType))               return null;
            }
            return thrownType;
          }
        }
);
        if (!uncaughtTypes.isEmpty()) {
          boolean passed=true;
          for (          PsiType type : uncaughtTypes) {
            if (!declaredType.isAssignableFrom(type)) {
              passed=false;
              break;
            }
          }
          if (passed)           return uncaughtTypes;
        }
      }
    }
  }
  return Arrays.asList(declaredType);
}
