{
  if (parameter == null) {
    return ContainerUtil.emptyList();
  }
  PsiType declaredType=parameter.getType();
  if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter,getCatchBlock())) {
    PsiTryStatement statement=getTryStatement();
    Collection<PsiClassType> thrownTypes=getThrownTypes(statement);
    if (thrownTypes.isEmpty())     return Collections.emptyList();
    final PsiParameter[] parameters=statement.getCatchBlockParameters();
    List<PsiType> uncaughtTypes=ContainerUtil.mapNotNull(thrownTypes,new NullableFunction<PsiClassType,PsiType>(){
      @Override public PsiType fun(      final PsiClassType thrownType){
        for (int i=0; i < parameters.length && parameters[i] != parameter; i++) {
          final PsiType catchType=parameters[i].getType();
          if (catchType.isAssignableFrom(thrownType))           return null;
        }
        return thrownType;
      }
    }
);
    boolean passed=true;
    for (    PsiType type : uncaughtTypes) {
      if (!declaredType.isAssignableFrom(type)) {
        passed=false;
        break;
      }
    }
    if (passed)     return uncaughtTypes;
  }
  return Collections.singletonList(declaredType);
}
