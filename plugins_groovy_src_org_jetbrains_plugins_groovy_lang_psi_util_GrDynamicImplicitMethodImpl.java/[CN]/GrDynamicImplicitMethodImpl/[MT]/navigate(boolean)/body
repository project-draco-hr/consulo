{
  final Project myProject=myNameIdentifier.getProject();
  final ToolWindow window=ToolWindowManager.getInstance(myProject).getToolWindow(DynamicToolWindowWrapper.DYNAMIC_TOOLWINDOW_ID);
  window.activate(new Runnable(){
    public void run(){
      final TreeTable treeTable=DynamicToolWindowWrapper.getTreeTable(window,myProject);
      final ListTreeTableModelOnColumns model=DynamicToolWindowWrapper.getTreeTableModel(window,myProject);
      Object root=model.getRoot();
      if (root == null || !(root instanceof DefaultMutableTreeNode))       return;
      DefaultMutableTreeNode treeRoot=((DefaultMutableTreeNode)root);
      if (!(myScope instanceof GrReferenceExpression))       return;
      final GrReferenceExpression refExpression=(GrReferenceExpression)myScope;
      final PsiClass expression=QuickfixUtil.findTargetClass(refExpression);
      final String className;
      if (expression == null)       return;
      className=expression.getQualifiedName();
      if (className == null)       return;
      final Module module=DynamicToolWindowWrapper.getActiveModule(myProject);
      if (module == null)       return;
      DefaultMutableTreeNode desiredNode=null;
      final PsiElement method=myScope.getParent();
      final String[] argumentTypes=QuickfixUtil.getMethodArgumentsTypes(((GrCallExpression)method));
      final String[] argumentNames=QuickfixUtil.getMethodArgumentsNames(((GrCallExpression)method));
      final List<MyPair> pairs=QuickfixUtil.swapArgumentsAndTypes(argumentNames,argumentTypes);
      if (pairs == null)       return;
      final PsiClassType fqClassName=PsiManager.getInstance(myProject).getElementFactory().createTypeByFQClassName(className,myProject.getAllScope());
      final PsiClass psiClass=fqClassName.resolve();
      if (psiClass == null)       return;
      final Iterable<PsiClass> classes=GroovyUtils.findAllSupers(psiClass,new HashSet<PsiClassType>());
      PsiClass aClass=psiClass;
      PsiClass trueClass=null;
      DMethodElement methodElement=null;
      Iterator<PsiClass> it=classes.iterator();
      if (it.hasNext()) {
        do {
          methodElement=DynamicManager.getInstance(myProject).findConcreteDynamicMethod(aClass.getQualifiedName(),((GrReferenceExpression)myScope).getName(),QuickfixUtil.getArgumentsTypes(pairs));
          if (methodElement != null) {
            trueClass=aClass;
            break;
          }
          aClass=it.next();
        }
 while (it.hasNext());
      }
      if (trueClass == null)       return;
      final DefaultMutableTreeNode classNode=TreeUtil.findNodeWithObject(treeRoot,new DClassElement(module,trueClass.getQualifiedName(),false));
      if (classNode == null)       return;
      desiredNode=TreeUtil.findNodeWithObject(classNode,methodElement);
      if (desiredNode == null)       return;
      final TreePath path=TreeUtil.getPathFromRoot(desiredNode);
      treeTable.getTree().expandPath(path);
      treeTable.getTree().setSelectionPath(path);
      treeTable.getTree().fireTreeExpanded(path);
      treeTable.requestFocus();
      treeTable.revalidate();
      treeTable.repaint();
    }
  }
,true);
}
