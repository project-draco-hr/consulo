{
  final Project myProject=myNameIdentifier.getProject();
  final ToolWindow window=ToolWindowManager.getInstance(myProject).getToolWindow(DynamicToolWindowWrapper.DYNAMIC_TOOLWINDOW_ID);
  window.activate(new Runnable(){
    public void run(){
      final TreeTable treeTable=DynamicToolWindowWrapper.getTreeTable(window,myProject);
      final ListTreeTableModelOnColumns model=DynamicToolWindowWrapper.getTreeTableModel(window,myProject);
      Object root=model.getRoot();
      if (root == null || !(root instanceof DefaultMutableTreeNode))       return;
      DefaultMutableTreeNode treeRoot=((DefaultMutableTreeNode)root);
      if (!(myScope instanceof GrReferenceExpression))       return;
      final GrReferenceExpression refExpression=(GrReferenceExpression)myScope;
      final PsiClass expression=QuickfixUtil.findTargetClass(refExpression);
      final String className=expression.getQualifiedName();
      final Module module=DynamicToolWindowWrapper.getModule(myProject);
      if (module == null)       return;
      DefaultMutableTreeNode desiredNode=null;
      final PsiElement method=myScope.getParent();
      final PsiType[] argumentTypes=QuickfixUtil.getMethodArgumentsTypes(((GrCallExpression)method));
      final String[] argumentNames=QuickfixUtil.getMethodArgumentsNames(((GrCallExpression)method));
      final List<Pair<String,PsiType>> pairs=QuickfixUtil.swapArgumentsAndTypes(argumentNames,argumentTypes);
      final PsiClassType fqClassName=PsiManager.getInstance(myProject).getElementFactory().createTypeByFQClassName(className,myProject.getAllScope());
      final PsiClass psiClass=fqClassName.resolve();
      if (psiClass == null)       return;
      final Set<PsiClass> classes=GroovyUtils.findAllSupers(psiClass);
      classes.add(psiClass);
      for (      PsiClass aClass : classes) {
        final String returnType=DynamicManager.getInstance(myProject).getMethodReturnType(module.getName(),aClass.getQualifiedName(),((GrReferenceExpression)myScope).getName(),argumentTypes);
        if (returnType == null)         continue;
        final DefaultMutableTreeNode classNode=TreeUtil.findNodeWithObject(treeRoot,new DPClassNode(new DContainingClassElement(aClass.getQualifiedName())));
        if (classNode == null)         return;
        desiredNode=TreeUtil.findNodeWithObject(classNode,new DMethodNode(new DMethodElement(new DynamicVirtualMethod(refExpression.getName(),aClass.getQualifiedName(),module.getName(),returnType,pairs))));
      }
      if (desiredNode == null)       return;
      final TreePath path=TreeUtil.getPathFromRoot(desiredNode);
      treeTable.getTree().expandPath(path);
      treeTable.getTree().setSelectionPath(path);
      treeTable.getTree().fireTreeExpanded(path);
      treeTable.requestFocus();
      treeTable.revalidate();
      treeTable.repaint();
    }
  }
,true);
}
