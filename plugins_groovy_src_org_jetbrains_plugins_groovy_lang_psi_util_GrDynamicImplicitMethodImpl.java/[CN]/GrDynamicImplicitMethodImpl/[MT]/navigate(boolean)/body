{
  final Project myProject=myNameIdentifier.getProject();
  final ToolWindow window=ToolWindowManager.getInstance(myProject).getToolWindow(DynamicToolWindowWrapper.DYNAMIC_TOOLWINDOW_ID);
  window.activate(new Runnable(){
    public void run(){
      final TreeTable treeTable=DynamicToolWindowWrapper.getTreeTable(window,myProject);
      final ListTreeTableModelOnColumns model=DynamicToolWindowWrapper.getTreeTableModel(window,myProject);
      Object root=model.getRoot();
      if (root == null || !(root instanceof DefaultMutableTreeNode))       return;
      DefaultMutableTreeNode treeRoot=((DefaultMutableTreeNode)root);
      DefaultMutableTreeNode desiredNode;
      final PsiClassType fqClassName=myManager.getElementFactory().createTypeByFQClassName(getContainingClassName(),myProject.getAllScope());
      final PsiClass psiClass=fqClassName.resolve();
      if (psiClass == null)       return;
      PsiClass trueClass=null;
      DMethodElement methodElement=null;
      for (      PsiClass aSuper : PsiUtil.iterateSupers(psiClass,true)) {
        methodElement=DynamicManager.getInstance(myProject).findConcreteDynamicMethod(aSuper.getQualifiedName(),getName(),QuickfixUtil.getArgumentsTypes(myPairs));
        if (methodElement != null) {
          trueClass=aSuper;
          break;
        }
      }
      if (trueClass == null)       return;
      final DefaultMutableTreeNode classNode=TreeUtil.findNodeWithObject(treeRoot,new DClassElement(myProject,trueClass.getQualifiedName(),false));
      if (classNode == null)       return;
      desiredNode=TreeUtil.findNodeWithObject(classNode,methodElement);
      if (desiredNode == null)       return;
      final TreePath path=TreeUtil.getPathFromRoot(desiredNode);
      treeTable.getTree().expandPath(path);
      treeTable.getTree().setSelectionPath(path);
      treeTable.getTree().fireTreeExpanded(path);
      treeTable.requestFocus();
      treeTable.revalidate();
      treeTable.repaint();
    }
  }
,true);
}
