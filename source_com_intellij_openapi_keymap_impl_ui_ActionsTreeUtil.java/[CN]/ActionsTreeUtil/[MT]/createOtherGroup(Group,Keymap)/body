{
  addedActions.initIds();
  ArrayList<String> result=new ArrayList<String>();
  if (keymap != null) {
    String[] actionIds=keymap.getActionIds();
    for (int i=0; i < actionIds.length; i++) {
      String id=actionIds[i];
      if (id.startsWith("Editor")) {
        AnAction action=ActionManager.getInstance().getAction("$" + id.substring(6));
        if (action != null)         continue;
      }
      if (!id.startsWith(QuickList.QUICK_LIST_PREFIX) && !addedActions.containsId(id)) {
        result.add(id);
      }
    }
  }
  final ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
  String[] registeredActionIds=actionManager.getActionIds("");
  for (int i=0; i < registeredActionIds.length; i++) {
    String id=registeredActionIds[i];
    if (actionManager.getAction(id) instanceof ActionGroup) {
      continue;
    }
    if (!id.startsWith(QuickList.QUICK_LIST_PREFIX) && !addedActions.containsId(id) && !result.contains(id)) {
      result.add(id);
    }
  }
  filterOtherActionsGroup(result);
  Collections.sort(result,new Comparator<String>(){
    public int compare(    String id1,    String id2){
      return getTextToCompare(id1).compareToIgnoreCase(getTextToCompare(id2));
    }
    private String getTextToCompare(    String id){
      AnAction action=actionManager.getAction(id);
      if (action == null) {
        return id;
      }
      String text=action.getTemplatePresentation().getText();
      return text != null ? text : id;
    }
  }
);
  Group group=new Group("Other",OTHER_ICON,OTHER_ICON);
  for (int i=0; i < result.size(); i++) {
    group.addActionId(result.get(i));
  }
  return group;
}
