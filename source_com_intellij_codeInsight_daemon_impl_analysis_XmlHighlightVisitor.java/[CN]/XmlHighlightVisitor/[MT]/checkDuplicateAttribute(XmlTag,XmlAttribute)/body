{
  XmlAttribute[] attributes=tag.getAttributes();
  for (  XmlAttribute tagAttribute : attributes) {
    if (attribute != tagAttribute && Comparing.strEqual(attribute.getName(),tagAttribute.getName())) {
      String localName=attribute.getLocalName();
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),"Duplicate attribute " + localName);
      myResult.add(highlightInfo);
      IntentionAction intentionAction=new IntentionAction(){
        public String getText(){
          return "Remove Duplicated Attribute";
        }
        public String getFamilyName(){
          return "Remove Duplicated Attribute";
        }
        public boolean isAvailable(        Project project,        Editor editor,        PsiFile file){
          return true;
        }
        public void invoke(        Project project,        Editor editor,        PsiFile file) throws IncorrectOperationException {
          PsiElement next=findNextAttribute(attribute);
          attribute.delete();
          if (next != null) {
            editor.getCaretModel().moveToOffset(next.getTextRange().getStartOffset());
          }
        }
        private PsiElement findNextAttribute(        final XmlAttribute attribute){
          PsiElement nextSibling=attribute.getNextSibling();
          while (nextSibling != null) {
            if (nextSibling instanceof XmlAttribute)             return nextSibling;
            nextSibling=nextSibling.getNextSibling();
          }
          return null;
        }
        public boolean startInWriteAction(){
          return true;
        }
      }
;
      QuickFixAction.registerQuickFixAction(highlightInfo,intentionAction,null);
    }
  }
}
