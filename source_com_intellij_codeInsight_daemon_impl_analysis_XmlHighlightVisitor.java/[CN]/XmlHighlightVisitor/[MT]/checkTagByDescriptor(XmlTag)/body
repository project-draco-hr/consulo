{
  String name=tag.getName();
  if (tag instanceof JspDirective) {
    checkDirective(name,tag);
  }
  XmlElementDescriptor elementDescriptor=null;
  final PsiElement parent=tag.getParent();
  if (parent instanceof XmlTag) {
    XmlTag parentTag=(XmlTag)parent;
    final XmlElementDescriptor parentDescriptor=parentTag.getDescriptor();
    if (parentDescriptor != null) {
      elementDescriptor=parentDescriptor.getElementDescriptor(tag);
    }
    if (parentDescriptor != null && elementDescriptor == null) {
      addElementsForTag(tag,"Element " + name + " is not allowed here",myResult,getTagProblemInfoType(tag),null);
      return;
    }
    if (elementDescriptor instanceof AnyXmlElementDescriptor || parentDescriptor == null) {
      elementDescriptor=tag.getDescriptor();
    }
    if (elementDescriptor == null)     return;
  }
 else {
    elementDescriptor=tag.getDescriptor();
    if (elementDescriptor == null) {
      addElementsForTag(tag,"Element " + name + " must be declared",myResult,HighlightInfoType.WRONG_REF,null);
      return;
    }
  }
  XmlAttributeDescriptor[] attributeDescriptors=elementDescriptor.getAttributesDescriptors();
  Set<String> requiredAttributes=null;
  for (  XmlAttributeDescriptor attribute : attributeDescriptors) {
    if (attribute != null && attribute.isRequired()) {
      if (requiredAttributes == null) {
        requiredAttributes=new HashSet<String>();
      }
      requiredAttributes.add(attribute.getDefaultName());
    }
  }
  if (requiredAttributes != null) {
    for (    final String attrName : requiredAttributes) {
      if (tag.getAttribute(attrName,tag.getNamespace()) == null) {
        if (!(elementDescriptor instanceof JspElementDescriptor) || !((JspElementDescriptor)elementDescriptor).isRequiredAttributeImplicitlyPresent(tag,attrName)) {
          addElementsForTag(tag,"Element " + name + " doesn't have required attribute "+ attrName,myResult,getTagProblemInfoType(tag),new InsertRequiredAttributeIntentionAction(tag,attrName,null));
          return;
        }
      }
    }
  }
  if (elementDescriptor instanceof Validator) {
    ((Validator)elementDescriptor).validate(tag,this);
  }
}
