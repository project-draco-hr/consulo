{
  XmlTag tag=attribute.getParent();
  if (attribute.isNamespaceDeclaration()) {
    checkNamespaceAttribute(attribute);
    return;
  }
 else   if (attribute.getName().endsWith("Location")) {
    String namespace=attribute.getNamespace();
    if (namespace.equals(XmlUtil.XML_SCHEMA_INSTANCE_URI)) {
      checkSchemaLocationAttribute(attribute);
      return;
    }
  }
  XmlElementDescriptor elementDescriptor=tag.getDescriptor();
  if (elementDescriptor == null || ourDoJaxpTesting)   return;
  XmlAttributeDescriptor attributeDescriptor=elementDescriptor.getAttributeDescriptor(attribute);
  String localName=attribute.getLocalName();
  if (attributeDescriptor == null) {
    myResult.add(HighlightInfo.createHighlightInfo(getTagProblemInfoType(tag),XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),"Attribute " + localName + " is not allowed here"));
  }
 else {
    checkDuplicateAttribute(tag,attribute);
    if (tag instanceof HtmlTag && attribute.getValueElement() == null && !HtmlUtil.isSingleHtmlAttribute(attribute.getName())) {
      myResult.add(HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),"Empty attribute " + localName + " is not allowed"));
    }
  }
}
