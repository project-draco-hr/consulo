{
  PsiLanguageInjectionHost host=findInjectionHost(editor,file);
  final Configuration configuration=Configuration.getInstance();
  if (host instanceof XmlAttributeValue) {
    for (Iterator<XmlAttributeInjection> it=configuration.getAttributeInjections().iterator(); it.hasNext(); ) {
      XmlAttributeInjection injection=it.next();
      if (injection.isApplicable((XmlAttributeValue)host)) {
        it.remove();
        break;
      }
    }
  }
 else   if (host instanceof XmlTag) {
    for (Iterator<XmlTagInjection> it=configuration.getTagInjections().iterator(); it.hasNext(); ) {
      XmlTagInjection injection=it.next();
      if (injection.isApplicable((XmlTag)host)) {
        it.remove();
        break;
      }
    }
  }
 else   if (host instanceof PsiLiteralExpression) {
    final ArrayList<PsiAnnotation> annotationsToRemove=new ArrayList<PsiAnnotation>();
    final ArrayList<MethodParameterInjection> injectionsToRemove=new ArrayList<MethodParameterInjection>();
    ConcatenationInjector.processLiteralExpressionInjectionsInner(configuration,new Processor<ConcatenationInjector.Info>(){
      public boolean process(      final ConcatenationInjector.Info info){
        final PsiAnnotation[] annotations=AnnotationUtilEx.getAnnotationFrom(info.owner,configuration.getLanguageAnnotationPair(),true);
        annotationsToRemove.addAll(Arrays.asList(annotations));
        for (        MethodParameterInjection injection : info.injections) {
          if (injection.isApplicable(info.method)) {
            injectionsToRemove.add(injection);
          }
        }
        return true;
      }
    }
,host);
    if (!injectionsToRemove.isEmpty()) {
      new WriteCommandAction.Simple(project){
        public void run(){
          for (          MethodParameterInjection injection : injectionsToRemove) {
            configuration.getParameterInjections().remove(injection);
          }
        }
      }
.execute();
    }
    if (!annotationsToRemove.isEmpty()) {
      final List<PsiFile> psiFiles=ContainerUtil.mapNotNull(annotationsToRemove,new NullableFunction<PsiAnnotation,PsiFile>(){
        public PsiFile fun(        final PsiAnnotation psiAnnotation){
          return psiAnnotation instanceof PsiCompiledElement ? null : psiAnnotation.getContainingFile();
        }
      }
);
      new WriteCommandAction.Simple(project,psiFiles.toArray(new PsiFile[psiFiles.size()])){
        protected void run() throws Throwable {
          for (          PsiAnnotation annotation : annotationsToRemove) {
            annotation.delete();
          }
        }
      }
.execute();
    }
  }
  configuration.configurationModified();
  FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
}
