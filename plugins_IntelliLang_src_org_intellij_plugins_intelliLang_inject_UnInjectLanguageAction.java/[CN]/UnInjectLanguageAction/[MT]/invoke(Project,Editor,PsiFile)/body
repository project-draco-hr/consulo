{
  final PsiLanguageInjectionHost host=findInjectionHost(editor,file);
  final Configuration configuration=Configuration.getInstance();
  final ArrayList<BaseInjection> injectionsToRemove=new ArrayList<BaseInjection>();
  final ArrayList<PsiAnnotation> annotationsToRemove=new ArrayList<PsiAnnotation>();
  if (host instanceof XmlAttributeValue) {
    for (    final XmlAttributeInjection injection : configuration.getAttributeInjections()) {
      if (injection.isApplicable((XmlAttributeValue)host)) {
        injectionsToRemove.add(injection);
      }
    }
  }
 else   if (host instanceof XmlText) {
    final XmlTag tag=((XmlText)host).getParentTag();
    if (tag != null) {
      for (      XmlTagInjection injection : configuration.getTagInjections()) {
        if (injection.isApplicable(tag)) {
          injectionsToRemove.add(injection);
        }
      }
    }
  }
 else   if (host instanceof PsiLiteralExpression) {
    ConcatenationInjector.processLiteralExpressionInjectionsInner(configuration,new Processor<ConcatenationInjector.Info>(){
      public boolean process(      final ConcatenationInjector.Info info){
        final PsiAnnotation[] annotations=AnnotationUtilEx.getAnnotationFrom(info.owner,configuration.getLanguageAnnotationPair(),true);
        annotationsToRemove.addAll(Arrays.asList(annotations));
        for (        MethodParameterInjection injection : info.injections) {
          if (injection.isApplicable(info.method)) {
            injectionsToRemove.add(injection);
          }
        }
        return true;
      }
    }
,host);
  }
  if (!injectionsToRemove.isEmpty() || !annotationsToRemove.isEmpty()) {
    final List<PsiFile> psiFiles=ContainerUtil.mapNotNull(annotationsToRemove,new NullableFunction<PsiAnnotation,PsiFile>(){
      public PsiFile fun(      final PsiAnnotation psiAnnotation){
        return psiAnnotation instanceof PsiCompiledElement ? null : psiAnnotation.getContainingFile();
      }
    }
);
    final UndoableAction action=new UndoableAction(){
      public void undo() throws UnexpectedUndoException {
        for (        BaseInjection injection : injectionsToRemove) {
          if (injection instanceof XmlTagInjection) {
            configuration.getTagInjections().add((XmlTagInjection)injection);
          }
 else           if (injection instanceof XmlAttributeInjection) {
            configuration.getAttributeInjections().add((XmlAttributeInjection)injection);
          }
 else           if (injection instanceof MethodParameterInjection) {
            configuration.getParameterInjections().add((MethodParameterInjection)injection);
          }
        }
        configuration.configurationModified();
        FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
      }
      public void redo() throws UnexpectedUndoException {
        configuration.getTagInjections().removeAll(injectionsToRemove);
        configuration.getAttributeInjections().removeAll(injectionsToRemove);
        configuration.getParameterInjections().removeAll(injectionsToRemove);
        configuration.configurationModified();
        FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
      }
      public DocumentReference[] getAffectedDocuments(){
        return DocumentReference.EMPTY_ARRAY;
      }
      public boolean isComplex(){
        return true;
      }
    }
;
    new WriteCommandAction(project,psiFiles.toArray(new PsiFile[psiFiles.size()])){
      @Override protected void run(      final Result result) throws Throwable {
        for (        PsiAnnotation annotation : annotationsToRemove) {
          annotation.delete();
        }
        action.redo();
        UndoManager.getInstance(project).undoableActionPerformed(action);
      }
    }
.execute();
  }
}
