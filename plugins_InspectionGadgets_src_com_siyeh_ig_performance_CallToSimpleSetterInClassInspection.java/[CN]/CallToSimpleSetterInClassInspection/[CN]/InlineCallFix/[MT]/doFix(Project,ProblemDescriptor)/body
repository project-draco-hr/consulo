{
  final PsiElement methodIdentifier=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)methodIdentifier.getParent();
  if (methodExpression == null) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)methodExpression.getParent();
  if (call == null) {
    return;
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression argument=arguments[0];
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  final PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)statements[0];
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)assignmentStatement.getExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiReferenceExpression lhs=(PsiReferenceExpression)assignment.getLExpression();
  final PsiField field=(PsiField)lhs.resolve();
  if (field == null) {
    return;
  }
  final String fieldName=field.getName();
  if (qualifier == null) {
    final PsiManager manager=call.getManager();
    final PsiResolveHelper resolveHelper=manager.getResolveHelper();
    final PsiVariable variable=resolveHelper.resolveReferencedVariable(fieldName,call);
    if (variable == null) {
      return;
    }
    @NonNls final String newExpression;
    if (variable.equals(field)) {
      newExpression=fieldName + " = " + argument.getText();
    }
 else {
      newExpression="this." + fieldName + " = "+ argument.getText();
    }
    replaceExpression(call,newExpression);
  }
 else {
    final String newExpression=qualifier.getText() + '.' + fieldName+ " = "+ argument.getText();
    replaceExpression(call,newExpression);
  }
}
