{
  if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
    return false;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return false;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length != 1) {
    return false;
  }
  final PsiStatement statement=statements[0];
  if (!(statement instanceof PsiExpressionStatement)) {
    return false;
  }
  final PsiExpressionStatement possibleAssignmentStatement=(PsiExpressionStatement)statement;
  final PsiExpression possibleAssignment=possibleAssignmentStatement.getExpression();
  if (possibleAssignment == null) {
    return false;
  }
  if (!(possibleAssignment instanceof PsiAssignmentExpression)) {
    return false;
  }
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)possibleAssignment;
  final PsiJavaToken sign=assignment.getOperationSign();
  if (!sign.getTokenType().equals(JavaTokenType.EQ)) {
    return false;
  }
  final PsiExpression lhs=assignment.getLExpression();
  if (!(lhs instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)lhs;
  final PsiExpression qualifier=reference.getQualifierExpression();
  if (qualifier != null && !PsiKeyword.THIS.equals(qualifier.getText())) {
    return false;
  }
  final PsiElement referent=reference.resolve();
  if (referent == null) {
    return false;
  }
  if (!(referent instanceof PsiField)) {
    return false;
  }
  final PsiField field=(PsiField)referent;
  if (!field.getContainingClass().equals(method.getContainingClass())) {
    return false;
  }
  final PsiExpression rhs=assignment.getRExpression();
  if (!(rhs instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression rReference=(PsiReferenceExpression)rhs;
  final PsiExpression rQualifier=rReference.getQualifierExpression();
  if (rQualifier != null) {
    return false;
  }
  final PsiElement rReferent=rReference.resolve();
  if (rReferent == null) {
    return false;
  }
  if (!(rReferent instanceof PsiParameter)) {
    return false;
  }
  final PsiType fieldType=field.getType();
  final PsiType parameterType=((PsiVariable)rReferent).getType();
  if (fieldType == null || parameterType == null) {
    return false;
  }
  return fieldType.getCanonicalText().equals(parameterType.getCanonicalText());
}
