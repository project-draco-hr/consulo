{
  String srcPath=JavaTestUtil.getJavaTestDataPath() + BASE_PATH + "Clazz.class";
  final File srcFile=new File(srcPath);
  final File dstFile=new File(myRoot,"Clazz.class");
  assertFalse(dstFile.exists());
  FileUtil.copy(srcFile,dstFile);
  final VirtualFile rootVFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(myRoot);
  assertNotNull(rootVFile);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      Module module=myModule;
      final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
      final ModifiableRootModel rootModel=rootManager.getModifiableModel();
      final Library library=rootModel.getModuleLibraryTable().createLibrary();
      final Library.ModifiableModel libraryModel=library.getModifiableModel();
      libraryModel.addRoot(rootVFile.getUrl(),OrderRootType.CLASSES);
      libraryModel.commit();
      rootModel.commit();
    }
  }
);
  PsiClass clazz=getJavaFacade().findClass("Clazz",GlobalSearchScope.allScope(myProject));
  assertNotNull(clazz);
  final boolean[] notified=new boolean[]{false};
  final PsiTreeChangeAdapter listener=new PsiTreeChangeAdapter(){
    @Override public void childRemoved(    PsiTreeChangeEvent event){
      notified[0]=true;
    }
    @Override public void childrenChanged(    PsiTreeChangeEvent event){
      notified[0]=true;
    }
  }
;
  getPsiManager().addPsiTreeChangeListener(listener);
  try {
    dstFile.setLastModified(System.currentTimeMillis());
    VirtualFileManager.getInstance().refresh(false);
    assertTrue("No event sent!",notified[0]);
  }
  finally {
    getPsiManager().removePsiTreeChangeListener(listener);
  }
  assertFalse(clazz.isValid());
  assertNotNull(getJavaFacade().findClass("Clazz",GlobalSearchScope.allScope(myProject)));
}
