{
  PsiExpression operand=expression.getOperand();
  Object operandValue=getStoredValue(operand);
  if (operandValue == null) {
    myResult=null;
    return;
  }
  IElementType tokenType=expression.getOperationSign().getTokenType();
  Object value=null;
  if (tokenType == JavaTokenType.MINUS) {
    if (operandValue instanceof Character)     operandValue=Integer.valueOf(((Character)operandValue).charValue());
    if (operandValue instanceof Number) {
      if (operandValue instanceof Double) {
        value=new Double(-((Number)operandValue).doubleValue());
        checkRealNumberOverflow(value,null,null,expression);
      }
 else       if (operandValue instanceof Float) {
        value=new Float(-((Number)operandValue).floatValue());
        checkRealNumberOverflow(value,null,null,expression);
      }
 else       if (operandValue instanceof Long) {
        value=Long.valueOf(-((Number)operandValue).longValue());
        if (myThrowExceptionOnOverflow && !(operand instanceof PsiLiteralExpression) && ((Number)operandValue).longValue() == Long.MIN_VALUE) {
          throw new ConstantEvaluationOverflowException(expression);
        }
      }
 else {
        value=Integer.valueOf(-((Number)operandValue).intValue());
        if (myThrowExceptionOnOverflow && !(operand instanceof PsiLiteralExpression) && ((Number)operandValue).intValue() == Integer.MIN_VALUE) {
          throw new ConstantEvaluationOverflowException(expression);
        }
      }
    }
  }
 else   if (tokenType == JavaTokenType.PLUS) {
    if (operandValue instanceof Character)     operandValue=Integer.valueOf(((Character)operandValue).charValue());
    if (operandValue instanceof Number) {
      value=operandValue;
    }
  }
 else   if (tokenType == JavaTokenType.TILDE) {
    if (operandValue instanceof Character)     operandValue=Integer.valueOf(((Character)operandValue).charValue());
    if (isIntegral(operandValue)) {
      value=operandValue instanceof Long ? Long.valueOf(~((Number)operandValue).longValue()) : Integer.valueOf(~((Number)operandValue).intValue());
    }
  }
 else   if (tokenType == JavaTokenType.EXCL) {
    if (operandValue instanceof Boolean) {
      value=Boolean.valueOf(!((Boolean)operandValue).booleanValue());
    }
  }
  myResult=value;
}
