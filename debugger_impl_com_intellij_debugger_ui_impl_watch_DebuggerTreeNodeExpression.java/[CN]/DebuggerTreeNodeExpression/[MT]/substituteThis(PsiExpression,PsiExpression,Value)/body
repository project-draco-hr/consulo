{
  PsiExpression result=(PsiExpression)expressionWithThis.copy();
  PsiClass thisClass=PsiTreeUtil.getContextOfType(result,PsiClass.class,true);
  boolean castNeeded=true;
  if (thisClass != null) {
    PsiType type=howToEvaluateThis.getType();
    if (type != null) {
      if (type instanceof PsiClassType) {
        PsiClass psiClass=((PsiClassType)type).resolve();
        if (psiClass != null && (psiClass == thisClass || psiClass.isInheritor(thisClass,true))) {
          castNeeded=false;
        }
      }
 else       if (type instanceof PsiArrayType) {
        LanguageLevel languageLevel=PsiUtil.getLanguageLevel(expressionWithThis);
        if (thisClass == expressionWithThis.getManager().getElementFactory().getArrayClass(languageLevel)) {
          castNeeded=false;
        }
      }
    }
  }
  if (castNeeded) {
    howToEvaluateThis=castToRuntimeType(howToEvaluateThis,howToEvaluateThisValue,howToEvaluateThis.getContext());
  }
  ChangeContextUtil.encodeContextInfo(result,false);
  PsiExpression psiExpression;
  try {
    psiExpression=(PsiExpression)ChangeContextUtil.decodeContextInfo(result,thisClass,howToEvaluateThis);
  }
 catch (  IncorrectOperationException e) {
    throw new EvaluateException(DebuggerBundle.message("evaluation.error.invalid.this.expression",result.getText(),howToEvaluateThis.getText()),null);
  }
  try {
    return howToEvaluateThis.getManager().getElementFactory().createExpressionFromText(psiExpression.getText(),howToEvaluateThis.getContext());
  }
 catch (  IncorrectOperationException e) {
    throw new EvaluateException(e.getMessage(),e);
  }
}
