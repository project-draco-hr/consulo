{
  final PsiElement position=parameters.getPosition();
  if (GroovySmartCompletionContributor.AFTER_NEW.accepts(position)) {
    GroovySmartCompletionContributor.generateInheritorVariants(parameters,result.getPrefixMatcher(),inheritorsHolder);
  }
  final int invocationCount=parameters.getInvocationCount();
  final boolean firstCompletionInvoked=invocationCount < 2;
  final String prefix=result.getPrefixMatcher().getPrefix();
  final boolean skipAccessors=firstCompletionInvoked && !prefix.startsWith("g") && !prefix.startsWith("s")&& !prefix.startsWith("i");
  result.restartCompletionOnPrefixChange("g");
  result.restartCompletionOnPrefixChange("i");
  result.restartCompletionOnPrefixChange("s");
  final Map<PsiModifierListOwner,LookupElement> staticMembers=hashMap();
  final PsiElement qualifier=reference.getQualifier();
  final PsiType qualifierType=qualifier instanceof GrExpression ? ((GrExpression)qualifier).getType() : null;
  final ElementFilter classFilter=getClassFilter(position);
  reference.processVariants(result.getPrefixMatcher(),parameters,new Consumer<Object>(){
    public void consume(    Object element){
      if (element instanceof PsiClass && inheritorsHolder.alreadyProcessed((PsiClass)element)) {
        return;
      }
      if (element instanceof LookupElement && inheritorsHolder.alreadyProcessed((LookupElement)element)) {
        return;
      }
      final LookupElement lookupElement=element instanceof PsiClass ? GroovyCompletionUtil.createClassLookupItem((PsiClass)element) : GroovyCompletionUtil.getLookupElement(element);
      Object object=lookupElement.getObject();
      PsiSubstitutor substitutor=null;
      GroovyResolveResult resolveResult=null;
      if (object instanceof GroovyResolveResult) {
        resolveResult=(GroovyResolveResult)object;
        substitutor=resolveResult.getSubstitutor();
        object=((GroovyResolveResult)object).getElement();
      }
      if (object instanceof PsiMember && JavaCompletionUtil.isInExcludedPackage((PsiMember)object)) {
        return;
      }
      final boolean autopopup=parameters.getInvocationCount() == 0;
      if (firstCompletionInvoked && object instanceof GrGdkMethod && GroovyCompletionUtil.skipDefGroovyMethod((GrGdkMethod)object,substitutor,qualifierType)) {
        if (!autopopup) {
          showInfo();
        }
        return;
      }
      if (firstCompletionInvoked && object instanceof PsiMethod && GroovyCompletionUtil.OPERATOR_METHOD_NAMES.contains(((PsiMethod)object).getName())) {
        if (!checkForIterator((PsiMethod)object)) {
          if (!autopopup) {
            showInfo();
          }
          return;
        }
      }
      if (skipAccessors && object instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyAccessor((PsiMethod)object)) {
        if (!autopopup) {
          showInfo();
        }
        return;
      }
      if (firstCompletionInvoked && resolveResult != null && !resolveResult.isAccessible()) {
        if (!autopopup) {
          showInfo();
        }
        return;
      }
      if ((object instanceof PsiMethod || object instanceof PsiField) && ((PsiModifierListOwner)object).hasModifierProperty(PsiModifier.STATIC)) {
        if (lookupElement.getLookupString().equals(((PsiMember)object).getName())) {
          staticMembers.put((PsiModifierListOwner)object,lookupElement);
          return;
        }
      }
      if (object instanceof PsiClass && !classFilter.isAcceptable(object,position)) {
        return;
      }
      result.addElement(JavaCompletionUtil.highlightIfNeeded(qualifierType,lookupElement,object));
    }
  }
);
  if (qualifier == null) {
    completeStaticMembers(parameters).processMembersOfRegisteredClasses(null,new PairConsumer<PsiMember,PsiClass>(){
      @Override public void consume(      PsiMember member,      PsiClass psiClass){
        if (member instanceof GrAccessorMethod) {
          member=((GrAccessorMethod)member).getProperty();
        }
        final String name=member.getName();
        if (name == null || !result.getPrefixMatcher().prefixMatches(name)) {
          staticMembers.remove(member);
          return;
        }
        staticMembers.put(member,createGlobalMemberElement(member,psiClass,true));
      }
    }
);
  }
  result.addAllElements(staticMembers.values());
}
