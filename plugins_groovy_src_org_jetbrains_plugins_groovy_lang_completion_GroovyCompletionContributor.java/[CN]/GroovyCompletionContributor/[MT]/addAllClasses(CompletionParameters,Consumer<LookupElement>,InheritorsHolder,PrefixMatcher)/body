{
  final PsiElement position=parameters.getPosition();
  final boolean afterNew=JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);
  AllClassesGetter.processJavaClasses(parameters,matcher,parameters.getInvocationCount() <= 1,new Consumer<PsiClass>(){
    @Override public void consume(    PsiClass psiClass){
      for (      JavaPsiClassReferenceElement element : JavaClassNameCompletionContributor.createClassLookupItems(psiClass,afterNew,new GroovyClassNameInsertHandler(),new Condition<PsiClass>(){
        @Override public boolean value(        PsiClass psiClass){
          return !inheritors.alreadyProcessed(psiClass);
        }
      }
)) {
        consumer.consume(element);
      }
    }
  }
);
}
