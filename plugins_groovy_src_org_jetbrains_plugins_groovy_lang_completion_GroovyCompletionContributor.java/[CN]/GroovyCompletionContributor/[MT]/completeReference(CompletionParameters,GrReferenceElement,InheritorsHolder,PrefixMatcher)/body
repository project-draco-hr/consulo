{
  final PsiElement position=parameters.getPosition();
  final Map<PsiModifierListOwner,LookupElement> staticMembers=hashMap();
  final PsiElement qualifier=reference.getQualifier();
  final PsiType qualifierType=qualifier instanceof GrExpression ? ((GrExpression)qualifier).getType() : null;
  LinkedHashSet<LookupElement> result=new LinkedHashSet<LookupElement>();
  final Set<String> unresolvedProps;
  if (reference instanceof GrReferenceExpression && (qualifier instanceof GrExpression || qualifier == null)) {
    unresolvedProps=CompleteReferenceExpression.getVariantsWithSameQualifier(matcher,(GrExpression)qualifier,(GrReferenceExpression)reference);
    for (    String string : unresolvedProps) {
      result.add(LookupElementBuilder.create(string).withItemTextUnderlined(true));
    }
    if (parameters.getInvocationCount() < 2 && qualifier != null && qualifierType == null && !(qualifier instanceof GrReferenceExpression && ((GrReferenceExpression)qualifier).resolve() instanceof PsiPackage)) {
      if (parameters.getInvocationCount() == 1) {
        showInfo();
      }
      return result;
    }
  }
 else {
    unresolvedProps=Collections.emptySet();
  }
  final ElementFilter classFilter=getClassFilter(position);
  final List<LookupElement> items=arrayList();
  reference.processVariants(matcher,parameters,new Consumer<LookupElement>(){
    public void consume(    LookupElement lookupElement){
      Object object=lookupElement.getObject();
      if (object instanceof GroovyResolveResult) {
        object=((GroovyResolveResult)object).getElement();
      }
      if (!(lookupElement instanceof LookupElementBuilder) && inheritorsHolder.alreadyProcessed(lookupElement)) {
        return;
      }
      if (object instanceof GrReferenceExpression && unresolvedProps.contains(((GrReferenceExpression)object).getName())) {
        return;
      }
      if (object instanceof PsiMember && JavaCompletionUtil.isInExcludedPackage((PsiMember)object,true)) {
        return;
      }
      if (!(object instanceof PsiClass)) {
        int priority=assignPriority(lookupElement,qualifierType);
        lookupElement=JavaCompletionUtil.highlightIfNeeded(qualifierType,PrioritizedLookupElement.withPriority(lookupElement,priority),object);
      }
      if ((object instanceof PsiMethod || object instanceof PsiField) && ((PsiModifierListOwner)object).hasModifierProperty(PsiModifier.STATIC)) {
        if (lookupElement.getLookupString().equals(((PsiMember)object).getName())) {
          staticMembers.put(CompletionUtil.getOriginalOrSelf((PsiModifierListOwner)object),lookupElement);
          return;
        }
      }
      if (object instanceof PsiClass && !classFilter.isAcceptable(object,position)) {
        return;
      }
      items.add(lookupElement);
    }
  }
);
  if (qualifier == null) {
    addStaticMembers(parameters,matcher,staticMembers);
  }
  items.addAll(staticMembers.values());
  for (Iterator<LookupElement> iterator=items.iterator(); iterator.hasNext(); ) {
    LookupElement element=iterator.next();
    PrioritizedLookupElement prio=element.as(PrioritizedLookupElement.CLASS_CONDITION_KEY);
    if (prio == null || prio.getPriority() >= 0) {
      result.add(element);
      iterator.remove();
    }
  }
  result.addAll(items);
  return result;
}
