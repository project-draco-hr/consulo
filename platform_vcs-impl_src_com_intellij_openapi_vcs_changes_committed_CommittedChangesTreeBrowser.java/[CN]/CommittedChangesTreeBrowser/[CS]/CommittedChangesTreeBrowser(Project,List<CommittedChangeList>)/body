{
  super(new BorderLayout());
  myProject=project;
  myDecorators=new LinkedList<CommittedChangeListDecorator>();
  myChangeLists=changeLists;
  myChangesTree=new ChangesBrowserTree();
  myChangesTree.setRootVisible(false);
  myChangesTree.setShowsRootHandles(true);
  myChangesTree.setCellRenderer(new CommittedChangeListRenderer(project,myDecorators));
  TreeUtil.expandAll(myChangesTree);
  myDetailsView=new RepositoryChangesBrowser(project,changeLists);
  myDetailsView.getViewer().setScrollPaneBorder(RIGHT_BORDER);
  myChangesTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updateBySelectionChange();
    }
  }
);
  final TreeLinkMouseListener linkMouseListener=new TreeLinkMouseListener(new CommittedChangeListRenderer(project,myDecorators));
  linkMouseListener.install(myChangesTree);
  myLeftPanel=new JPanel(new BorderLayout());
  final Splitter filterSplitter=new Splitter(false,0.5f);
  filterSplitter.setSecondComponent(new JScrollPane(myChangesTree));
  myLeftPanel.add(filterSplitter,BorderLayout.CENTER);
  final Splitter mainSplitter=new Splitter(false,0.7f);
  mainSplitter.setFirstComponent(myLeftPanel);
  mainSplitter.setSecondComponent(myDetailsView);
  add(mainSplitter,BorderLayout.CENTER);
  myInnerSplitter=new WiseSplitter(new Runnable(){
    public void run(){
      filterSplitter.doLayout();
      updateModel();
    }
  }
,filterSplitter);
  mySplitterProportionsData.externalizeFromDimensionService("CommittedChanges.SplitterProportions");
  mySplitterProportionsData.restoreSplitterProportions(this);
  updateBySelectionChange();
  ActionManager.getInstance().getAction("CommittedChanges.Details").registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_QUICK_JAVADOC)),this);
  myCopyProvider=new TreeCopyProvider(myChangesTree);
  myTreeExpander=new DefaultTreeExpander(myChangesTree);
  myDetailsView.addToolbarAction(ActionManager.getInstance().getAction("Vcs.ShowTabbedFileHistory"));
  myHelpId=ourHelpId;
  myDetailsView.getDiffAction().registerCustomShortcutSet(CommonShortcuts.getDiff(),myChangesTree);
  myConnection=myProject.getMessageBus().connect();
  myConnection.subscribe(ITEMS_RELOADED,new CommittedChangesReloadListener(){
    public void itemsReloaded(){
    }
    public void emptyRefresh(){
      updateGrouping();
    }
  }
);
}
