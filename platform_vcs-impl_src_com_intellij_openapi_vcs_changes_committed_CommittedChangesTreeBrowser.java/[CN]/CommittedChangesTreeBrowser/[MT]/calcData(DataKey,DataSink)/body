{
  if (key.equals(VcsDataKeys.CHANGES)) {
    final Collection<Change> changes=collectChanges(getSelectedChangeLists(),false);
    sink.put(VcsDataKeys.CHANGES,changes.toArray(new Change[changes.size()]));
  }
 else   if (key.equals(VcsDataKeys.HAVE_SELECTED_CHANGES)) {
    final int count=myChangesTree.getSelectionCount();
    sink.put(VcsDataKeys.HAVE_SELECTED_CHANGES,count > 0 ? Boolean.TRUE : Boolean.FALSE);
  }
 else   if (key.equals(VcsDataKeys.CHANGES_WITH_MOVED_CHILDREN)) {
    final Collection<Change> changes=collectChanges(getSelectedChangeLists(),true);
    sink.put(VcsDataKeys.CHANGES_WITH_MOVED_CHILDREN,changes.toArray(new Change[changes.size()]));
  }
 else   if (key.equals(VcsDataKeys.CHANGE_LISTS)) {
    final List<CommittedChangeList> lists=getSelectedChangeLists();
    if (!lists.isEmpty()) {
      sink.put(VcsDataKeys.CHANGE_LISTS,lists.toArray(new CommittedChangeList[lists.size()]));
    }
  }
 else   if (key.equals(PlatformDataKeys.NAVIGATABLE_ARRAY)) {
    final Collection<Change> changes=collectChanges(getSelectedChangeLists(),false);
    Navigatable[] result=ChangesUtil.getNavigatableArray(myProject,ChangesUtil.getFilesFromChanges(changes));
    sink.put(PlatformDataKeys.NAVIGATABLE_ARRAY,result);
  }
 else   if (key.equals(PlatformDataKeys.HELP_ID)) {
    sink.put(PlatformDataKeys.HELP_ID,myHelpId);
  }
 else   if (VcsDataKeys.SELECTED_CHANGES_IN_DETAILS.equals(key)) {
    final List<Change> selectedChanges=myDetailsView.getSelectedChanges();
    sink.put(VcsDataKeys.SELECTED_CHANGES_IN_DETAILS,selectedChanges.toArray(new Change[selectedChanges.size()]));
  }
}
