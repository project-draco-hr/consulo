{
  final PsiFile file=place.getContainingFile();
  if (!(file instanceof GroovyFile)) {
    return Collections.emptySet();
  }
  return CachedValuesManager.getManager(file.getProject()).getCachedValue(file,GANT_METHODS,new CachedValueProvider<Set<LightMethodBuilder>>(){
    @Override public Result<Set<LightMethodBuilder>> compute(){
      Map<String,Class> antObjects=getAntObjects((GroovyFile)file);
      final Set<LightMethodBuilder> methods=new HashSet<LightMethodBuilder>();
      final Project project=file.getProject();
      final PsiType closureType=TypesUtil.createType(GroovyCommonClassNames.GROOVY_LANG_CLOSURE,file);
      final PsiClassType stringType=TypesUtil.createType(CommonClassNames.JAVA_LANG_STRING,file);
      for (      String name : antObjects.keySet()) {
        methods.add(new AntBuilderMethod(file,name,closureType,antObjects.get(name),stringType));
      }
      final Result<Set<LightMethodBuilder>> result=Result.create(methods,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,ProjectRootManager.getInstance(project));
      result.setLockValue(true);
      return result;
    }
  }
,false);
}
