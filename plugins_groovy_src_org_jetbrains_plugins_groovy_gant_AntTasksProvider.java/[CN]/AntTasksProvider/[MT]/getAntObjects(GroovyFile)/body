{
  return CachedValuesManager.getManager(groovyFile.getProject()).getCachedValue(groovyFile,ANT_OBJECTS,new CachedValueProvider<Map<String,Class>>(){
    @Override public Result<Map<String,Class>> compute(){
      final Module module=ModuleUtil.findModuleForPsiElement(groovyFile);
      Set<VirtualFile> jars=new HashSet<VirtualFile>();
      if (module != null) {
        ContainerUtil.addAll(jars,OrderEnumerator.orderEntries(module).getAllLibrariesAndSdkClassesRoots());
      }
      if (groovyFile.isScript() && GroovyScriptTypeDetector.getScriptType(groovyFile) instanceof GantScriptType) {
        jars.addAll(GantScriptType.additionalScopeFiles(groovyFile));
      }
      final ArrayList<URL> urls=new ArrayList<URL>();
      for (      VirtualFile jar : jars) {
        urls.add(VfsUtil.convertToURL(PathUtil.getLocalFile(jar).getUrl()));
      }
      final ClassLoader loader=new UrlClassLoader(urls,null,false,false,true);
      Future<ReflectedProject> future=ApplicationManager.getApplication().executeOnPooledThread(new Callable<ReflectedProject>(){
        @Override public ReflectedProject call() throws Exception {
          try {
            return ReflectedProject.getProject(loader);
          }
 catch (          Exception e) {
            LOG.error(e);
            return null;
          }
        }
      }
);
      ReflectedProject antProject=null;
      while (true) {
        try {
          antProject=future.get(100,TimeUnit.MILLISECONDS);
          break;
        }
 catch (        TimeoutException ignore) {
        }
catch (        Exception e) {
          LOG.error(e);
          break;
        }
        ProgressManager.checkCanceled();
      }
      final Map<String,Class> result=new HashMap<String,Class>();
      if (antProject != null) {
        final Map<String,Class> taskDefinitions=antProject.getTaskDefinitions();
        if (taskDefinitions != null) {
          result.putAll(taskDefinitions);
        }
        final Map<String,Class> dataTypeDefinitions=antProject.getDataTypeDefinitions();
        if (dataTypeDefinitions != null) {
          result.putAll(dataTypeDefinitions);
        }
      }
      return Result.create(result,ProjectRootManager.getInstance(groovyFile.getProject()));
    }
  }
,false);
}
