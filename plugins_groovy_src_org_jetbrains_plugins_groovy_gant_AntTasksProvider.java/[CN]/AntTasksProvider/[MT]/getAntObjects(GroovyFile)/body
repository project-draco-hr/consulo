{
  return CachedValuesManager.getManager(groovyFile.getProject()).getCachedValue(groovyFile,ANT_OBJECTS,new CachedValueProvider<Map<String,Class>>(){
    @Override public Result<Map<String,Class>> compute(){
      final Module module=ModuleUtil.findModuleForPsiElement(groovyFile);
      Set<VirtualFile> jars=new HashSet<VirtualFile>();
      if (module != null) {
        jars.addAll(Arrays.asList(OrderEnumerator.orderEntries(module).getAllLibrariesAndSdkClassesRoots()));
      }
      if (groovyFile.isScript() && GroovyScriptType.getScriptType(groovyFile) instanceof GantScriptType) {
        jars.addAll(GantScriptType.additionalScopeFiles(groovyFile));
      }
      final ArrayList<URL> urls=new ArrayList<URL>();
      for (      VirtualFile jar : jars) {
        urls.add(VfsUtil.convertToURL(PathUtil.getLocalFile(jar).getUrl()));
      }
      final ClassLoader loader=new UrlClassLoader(urls,null);
      final ReflectedProject antProject=ReflectedProject.getProject(loader);
      final Map<String,Class> result=new HashMap<String,Class>();
      result.putAll(antProject.getTaskDefinitions());
      result.putAll(antProject.getDataTypeDefinitions());
      return Result.create(result,ProjectRootManager.getInstance(groovyFile.getProject()));
    }
  }
,false);
}
