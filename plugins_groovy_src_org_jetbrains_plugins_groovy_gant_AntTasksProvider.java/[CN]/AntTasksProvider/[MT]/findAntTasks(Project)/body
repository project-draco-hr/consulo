{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiClass taskClass=facade.findClass(ANT_TASK_CLASS,GlobalSearchScope.allScope(project));
  if (taskClass != null) {
    final Set<LightMethodBuilder> classNames=new HashSet<LightMethodBuilder>();
    for (    PsiClass inheritor : SearchUtils.findClassInheritors(taskClass,true)) {
      if (!inheritor.hasModifierProperty(PsiModifier.ABSTRACT) && !inheritor.hasModifierProperty(PsiModifier.PRIVATE)) {
        final String name=inheritor.getName();
        if (name != null) {
          final LightMethodBuilder taskMethod=new LightMethodBuilder(inheritor.getManager(),GroovyFileType.GROOVY_LANGUAGE,StringUtil.decapitalize(name)).setModifiers(PsiModifier.PUBLIC).addParameter("args",CommonClassNames.JAVA_UTIL_MAP).setNavigationElement(inheritor).setBaseIcon(GantIcons.ANT_TASK);
          final PsiType closureType=JavaPsiFacade.getElementFactory(project).createTypeFromText(GrClosableBlock.GROOVY_LANG_CLOSURE,taskMethod);
          final GrLightParameter bodyParameter=new GrLightParameter("body",closureType,taskMethod);
          classNames.add(taskMethod.addParameter(bodyParameter.setOptional(true)));
        }
      }
    }
    return classNames;
  }
  return Collections.emptySet();
}
