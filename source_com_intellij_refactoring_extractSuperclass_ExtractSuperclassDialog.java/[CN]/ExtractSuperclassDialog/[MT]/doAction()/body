{
  final String[] errorString=new String[]{null};
  final String superclassName=getSuperclassName();
  final String packageName=myTfPackageName.getText().trim();
  final PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(superclassName)) {
    errorString[0]=RefactoringBundle.message("no.superclass.name.specified");
    mySourceClassField.requestFocusInWindow();
  }
 else   if (!manager.getNameHelper().isIdentifier(superclassName)) {
    errorString[0]=RefactoringMessageUtil.getIncorrectIdentifierMessage(superclassName);
    mySourceClassField.requestFocusInWindow();
  }
 else {
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      public void run(){
        try {
          myTargetDirectory=PackageUtil.findOrCreateDirectoryForPackage(myProject,packageName,myTargetDirectory,true);
          if (myTargetDirectory == null) {
            errorString[0]="";
            return;
          }
          errorString[0]=RefactoringMessageUtil.checkCanCreateClass(myTargetDirectory,superclassName);
        }
 catch (        IncorrectOperationException e) {
          errorString[0]=e.getMessage();
          myTfPackageName.requestFocusInWindow();
        }
      }
    }
,RefactoringBundle.message("create.directory"),null);
  }
  if (errorString[0] != null) {
    if (errorString[0].length() > 0) {
      CommonRefactoringUtil.showErrorMessage(ExtractSuperclassHandler.REFACTORING_NAME,errorString[0],HelpID.EXTRACT_SUPERCLASS,myProject);
    }
    return;
  }
  if (!myCallback.checkConflicts(this)) {
    return;
  }
  RefactoringSettings.getInstance().EXTRACT_SUPERCLASS_JAVADOC=getJavaDocPolicy();
  if (!isExtractSuperclass()) {
    final ExtractSuperClassProcessor processor=new ExtractSuperClassProcessor(myProject,getTargetDirectory(),getSuperclassName(),mySourceClass,getSelectedMemberInfos(),false,new JavaDocPolicy(getJavaDocPolicy()));
    invokeRefactoring(processor);
  }
 else {
    closeOKAction();
  }
}
