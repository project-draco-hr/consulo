{
  if (!(element instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 2) {
    return false;
  }
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiElement resolvee=methodExpression.resolve();
  if (!(resolvee instanceof PsiMethod)) {
    return false;
  }
  final PsiMethod method=(PsiMethod)resolvee;
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length != 2) {
    return false;
  }
  final PsiParameter firstParameter=parameters[0];
  final PsiParameter secondParameter=parameters[1];
  final PsiType firstType=firstParameter.getType();
  final PsiType secondType=secondParameter.getType();
  return firstType.equals(secondType);
}
