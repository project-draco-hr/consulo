{
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  SmartExpander.installOn(myTree);
  TreeUtil.installActions(myTree);
  EditSourceOnDoubleClickHandler.install(myTree);
  myTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode()) {
        TreePath leadSelectionPath=myTree.getLeadSelectionPath();
        if (leadSelectionPath == null)         return;
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)leadSelectionPath.getLastPathComponent();
        if (node instanceof UsageNode) {
          final Usage usage=((UsageNode)node).getUsage();
          usage.navigate(false);
          usage.highlightInEditor();
        }
 else         if (node.isLeaf()) {
          Navigatable navigatable=getNavigatableForNode(node);
          if (navigatable != null && navigatable.canNavigate()) {
            navigatable.navigate(false);
          }
        }
      }
    }
  }
);
  TreeUtil.selectFirstNode(myTree);
  PopupHandler.installPopupHandler(myTree,IdeActions.GROUP_USAGE_VIEW_POPUP,ActionPlaces.USAGE_VIEW_POPUP);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    @Override public void treeExpanded(    TreeExpansionEvent event){
      TreePath path=event.getPath();
      Object component=path.getLastPathComponent();
      if (!(component instanceof Node))       return;
      Node node=(Node)component;
      if (node.needsUpdate()) {
        checkNodeValidity(node,path);
      }
    }
    @Override public void treeCollapsed(    TreeExpansionEvent event){
    }
  }
);
}
