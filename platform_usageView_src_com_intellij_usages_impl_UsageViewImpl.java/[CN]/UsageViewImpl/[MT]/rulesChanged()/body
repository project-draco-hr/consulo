{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final ArrayList<UsageState> states=new ArrayList<UsageState>();
  captureUsagesExpandState(new TreePath(myTree.getModel().getRoot()),states);
  final List<Usage> allUsages=new ArrayList<Usage>(myUsageNodes.keySet());
  Collections.sort(allUsages,USAGE_COMPARATOR);
  final Set<Usage> excludedUsages=getExcludedUsages();
  reset();
  myBuilder.setGroupingRules(getActiveGroupingRules(myProject));
  myBuilder.setFilteringRules(getActiveFilteringRules(myProject));
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      for (      Usage usage : allUsages) {
        if (!usage.isValid()) {
          continue;
        }
        if (usage instanceof MergeableUsage) {
          ((MergeableUsage)usage).reset();
        }
        appendUsage(usage);
      }
    }
  }
);
  excludeUsages(excludedUsages.toArray(new Usage[excludedUsages.size()]));
  if (myCentralPanel != null) {
    setupCentralPanel();
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (isDisposed)       return;
      restoreUsageExpandState(states);
      updateImmediately();
    }
  }
);
}
