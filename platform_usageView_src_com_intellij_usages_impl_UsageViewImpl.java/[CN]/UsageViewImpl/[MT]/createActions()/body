{
  final TreeExpander treeExpander=new TreeExpander(){
    @Override public void expandAll(){
      UsageViewImpl.this.expandAll();
      UsageViewSettings.getInstance().setExpanded(true);
    }
    @Override public boolean canExpand(){
      return true;
    }
    @Override public void collapseAll(){
      UsageViewImpl.this.collapseAll();
      UsageViewSettings.getInstance().setExpanded(false);
    }
    @Override public boolean canCollapse(){
      return true;
    }
  }
;
  CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  final JComponent component=getComponent();
  final AnAction expandAllAction=actionsManager.createExpandAllAction(treeExpander,component);
  final AnAction collapseAllAction=actionsManager.createCollapseAllAction(treeExpander,component);
  scheduleDisposeOnClose(new Disposable(){
    @Override public void dispose(){
      expandAllAction.unregisterCustomShortcutSet(component);
      collapseAllAction.unregisterCustomShortcutSet(component);
    }
  }
);
  return new AnAction[]{canShowSettings() ? showSettings() : null,canPerformReRun() ? new ReRunAction() : null,new CloseAction(),ActionManager.getInstance().getAction("PinToolwindowTab"),createRecentFindUsagesAction(),expandAllAction,collapseAllAction,actionsManager.createPrevOccurenceAction(myRootPanel),actionsManager.createNextOccurenceAction(myRootPanel),actionsManager.installAutoscrollToSourceHandler(myProject,myTree,new MyAutoScrollToSourceOptionProvider()),actionsManager.createExportToTextFileAction(myTextFileExporter),actionsManager.createHelpAction(HELP_ID)};
}
