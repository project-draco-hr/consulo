{
  myPresentation=presentation;
  myTargets=targets;
  myUsageSearcherFactory=usageSearcherFactory;
  myProject=project;
  myTree=new Tree(){
{
      ToolTipManager.sharedInstance().registerComponent(this);
    }
    @Override public String getToolTipText(    MouseEvent e){
      TreePath path=getPathForLocation(e.getX(),e.getY());
      if (path != null) {
        if (getCellRenderer() instanceof UsageViewTreeCellRenderer) {
          return UsageViewTreeCellRenderer.getTooltipText(path.getLastPathComponent());
        }
      }
      return null;
    }
    @Override public boolean isPathEditable(    final TreePath path){
      return path.getLastPathComponent() instanceof UsageViewTreeModelBuilder.TargetsRootNode;
    }
  }
;
  myRootPanel=new MyPanel(myTree);
  Disposer.register(this,myRootPanel);
  myModelTracker=new UsageModelTracker(project);
  Disposer.register(this,myModelTracker);
  myModel=new UsageViewTreeModelBuilder(myPresentation,targets);
  myRoot=(GroupNode)myModel.getRoot();
  myBuilder=new UsageNodeTreeBuilder(myTargets,getActiveGroupingRules(project),getActiveFilteringRules(project),myRoot);
  final MessageBusConnection messageBusConnection=myProject.getMessageBus().connect(this);
  messageBusConnection.subscribe(UsageFilteringRuleProvider.RULES_CHANGED,new Runnable(){
    @Override public void run(){
      rulesChanged();
    }
  }
);
  if (!myPresentation.isDetachedMode()) {
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
synchronized (lock) {
          if (isDisposed)           return;
          myTree.setModel(myModel);
          myRootPanel.setLayout(new BorderLayout());
          SimpleToolWindowPanel toolWindowPanel=new SimpleToolWindowPanel(false,true);
          myRootPanel.add(toolWindowPanel,BorderLayout.CENTER);
          JPanel toolbarPanel=new JPanel(new BorderLayout());
          toolbarPanel.add(createActionsToolbar(),BorderLayout.WEST);
          toolbarPanel.add(createFiltersToolbar(),BorderLayout.CENTER);
          toolWindowPanel.setToolbar(toolbarPanel);
          myCentralPanel=new JPanel(new BorderLayout());
          setupCentralPanel();
          initTree();
          toolWindowPanel.setContent(myCentralPanel);
          myTree.setCellRenderer(new UsageViewTreeCellRenderer(UsageViewImpl.this));
          collapseAll();
          myModelTracker.addListener(UsageViewImpl.this);
          if (myPresentation.isShowCancelButton()) {
            addButtonToLowerPane(new Runnable(){
              @Override public void run(){
                close();
              }
            }
,UsageViewBundle.message("usage.view.cancel.button"));
          }
          myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
            @Override public void valueChanged(            final TreeSelectionEvent e){
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  if (isDisposed || myProject.isDisposed())                   return;
                  updateOnSelectionChanged();
                }
              }
);
            }
          }
);
        }
      }
    }
);
  }
  myTransferToEDTQueue=new TransferToEDTQueue<Runnable>("Insert usages",new Processor<Runnable>(){
    @Override public boolean process(    Runnable runnable){
      runnable.run();
      return true;
    }
  }
,new Condition<Object>(){
    @Override public boolean value(    Object o){
      return isDisposed || project.isDisposed() || searchHasBeenCancelled();
    }
  }
,200);
}
