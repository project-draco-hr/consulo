{
  final GradleApiFacadeManager manager=ServiceManager.getService(GradleApiFacadeManager.class);
  Project ideProject=getIdeProject();
  GradleProjectResolver resolver=manager.getFacade(ideProject).getResolver();
  setState(GradleTaskState.IN_PROGRESS);
  ProjectStructureChangesModel model=null;
  if (ideProject != null && !ideProject.isDisposed()) {
    model=ServiceManager.getService(ideProject,ProjectStructureChangesModel.class);
  }
  final ExternalProject project;
  try {
    project=resolver.resolveProjectInfo(getId(),myProjectPath,myResolveLibraries);
  }
 catch (  Exception e) {
    if (model != null) {
      model.clearChanges();
    }
    throw e;
  }
  if (project == null) {
    return;
  }
  myGradleProject.set(project);
  setState(GradleTaskState.FINISHED);
  if (model != null) {
    model.update(project);
  }
}
