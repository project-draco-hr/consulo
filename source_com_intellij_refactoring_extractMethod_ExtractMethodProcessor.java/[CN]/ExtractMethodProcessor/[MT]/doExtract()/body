{
  renameInputVariables();
  PsiMethod newMethod=generateEmptyMethod(myThrownExceptions,myStatic);
  LOG.assertTrue(myElements[0].isValid());
  PsiCodeBlock body=newMethod.getBody();
  PsiMethodCallExpression methodCall=generateMethodCall(null);
  LOG.assertTrue(myElements[0].isValid());
  if (myExpression == null) {
    String outVariableName=myOutputVariable != null ? getNewVariableName(myOutputVariable) : null;
    PsiReturnStatement returnStatement;
    if (myOutputVariable != null) {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return " + outVariableName + ";",null);
    }
 else {
      returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return;",null);
    }
    boolean hasNormalExit=false;
    PsiElement lastElement=myElements[myElements.length - 1];
    if (!(lastElement instanceof PsiReturnStatement || lastElement instanceof PsiBreakStatement || lastElement instanceof PsiContinueStatement)) {
      hasNormalExit=true;
    }
    PsiStatement exitStatementCopy=null;
    for (int i=0; i < myExitStatements.size(); i++) {
      PsiStatement exitStatement=myExitStatements.get(i);
      if (exitStatement instanceof PsiReturnStatement) {
        continue;
      }
 else       if (exitStatement instanceof PsiBreakStatement) {
        PsiStatement statement=((PsiBreakStatement)exitStatement).findExitedStatement();
        if (statement == null)         continue;
        int startOffset=myControlFlow.getStartOffset(statement);
        int endOffset=myControlFlow.getEndOffset(statement);
        if (myFlowStart <= startOffset && endOffset <= myFlowEnd)         continue;
      }
 else       if (exitStatement instanceof PsiContinueStatement) {
        PsiStatement statement=((PsiContinueStatement)exitStatement).findContinuedStatement();
        if (statement == null)         continue;
        int startOffset=myControlFlow.getStartOffset(statement);
        int endOffset=myControlFlow.getEndOffset(statement);
        if (myFlowStart <= startOffset && endOffset <= myFlowEnd)         continue;
      }
 else {
        LOG.assertTrue(false,exitStatement.toString());
        continue;
      }
      int index=-1;
      for (int j=0; j < myElements.length; j++) {
        if (exitStatement.equals(myElements[j])) {
          index=j;
          break;
        }
      }
      if (exitStatementCopy == null) {
        exitStatementCopy=(PsiStatement)exitStatement.copy();
      }
      PsiElement result=exitStatement.replace(returnStatement);
      if (index >= 0) {
        myElements[index]=result;
      }
    }
    declareNecessaryVariablesInsideBody(myFlowStart,myFlowEnd,body);
    if (myNeedChangeContext) {
      for (      PsiElement element : myElements) {
        ChangeContextUtil.encodeContextInfo(element,false);
      }
    }
    body.addRange(myElements[0],myElements[myElements.length - 1]);
    if (!myHasReturnStatement && hasNormalExit && myOutputVariable != null) {
      body.add(returnStatement);
    }
    if (myOutputVariable != null) {
      String name=myOutputVariable.getName();
      boolean toDeclare=isDeclaredInside(myOutputVariable);
      if (!toDeclare) {
        PsiExpressionStatement statement=(PsiExpressionStatement)myElementFactory.createStatementFromText(name + "=x;",null);
        statement=(PsiExpressionStatement)myStyleManager.reformat(statement);
        statement=(PsiExpressionStatement)addToMethodCallLocation(statement);
        PsiAssignmentExpression assignment=(PsiAssignmentExpression)statement.getExpression();
        methodCall=(PsiMethodCallExpression)assignment.getRExpression().replace(methodCall);
      }
 else {
        PsiDeclarationStatement statement=myElementFactory.createVariableDeclarationStatement(name,myOutputVariable.getType(),methodCall);
        statement=(PsiDeclarationStatement)addToMethodCallLocation(statement);
        PsiVariable var=(PsiVariable)statement.getDeclaredElements()[0];
        methodCall=(PsiMethodCallExpression)var.getInitializer();
        var.getModifierList().replace(myOutputVariable.getModifierList());
      }
    }
 else     if (myHasReturnStatementOutput) {
      PsiStatement statement=myElementFactory.createStatementFromText("return x;",null);
      statement=(PsiStatement)addToMethodCallLocation(statement);
      methodCall=(PsiMethodCallExpression)((PsiReturnStatement)statement).getReturnValue().replace(methodCall);
    }
 else {
      PsiStatement statement=myElementFactory.createStatementFromText("x();",null);
      statement=(PsiStatement)addToMethodCallLocation(statement);
      methodCall=(PsiMethodCallExpression)((PsiExpressionStatement)statement).getExpression().replace(methodCall);
    }
    if (myHasReturnStatement && !myHasReturnStatementOutput && !hasNormalExit) {
      PsiStatement statement=myElementFactory.createStatementFromText("return;",null);
      addToMethodCallLocation(statement);
    }
 else     if (exitStatementCopy != null) {
      addToMethodCallLocation(exitStatementCopy);
    }
    declareNecessaryVariablesAfterCall(myFlowEnd,myOutputVariable);
    deleteExtracted();
  }
 else {
    if (myHasExpressionOutput) {
      PsiReturnStatement returnStatement=(PsiReturnStatement)myElementFactory.createStatementFromText("return x;",null);
      final PsiExpression returnValue;
      returnValue=RefactoringUtil.convertInitializerToNormalExpression(myExpression,myForcedReturnType);
      returnStatement.getReturnValue().replace(returnValue);
      body.add(returnStatement);
    }
 else {
      PsiExpressionStatement statement=(PsiExpressionStatement)myElementFactory.createStatementFromText("x;",null);
      statement.getExpression().replace(myExpression);
      body.add(statement);
    }
    methodCall=(PsiMethodCallExpression)myExpression.replace(methodCall);
  }
  if (myAnchor instanceof PsiField) {
    ((PsiField)myAnchor).normalizeDeclaration();
  }
  newMethod=(PsiMethod)myTargetClass.addAfter(newMethod,myAnchor);
  if (myNeedChangeContext) {
    ChangeContextUtil.decodeContextInfo(newMethod,myTargetClass,RefactoringUtil.createThisExpression(myManager,null));
  }
  return methodCall;
}
