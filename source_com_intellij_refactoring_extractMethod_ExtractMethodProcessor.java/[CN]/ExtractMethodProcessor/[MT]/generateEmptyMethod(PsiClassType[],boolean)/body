{
  PsiMethod newMethod=myElementFactory.createMethod(myMethodName,myReturnType);
  newMethod.getModifierList().setModifierProperty(myMethodVisibility,true);
  newMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,isStatic);
  if (myTypeParameterList != null) {
    newMethod.getTypeParameterList().replace(myTypeParameterList);
  }
  PsiCodeBlock body=newMethod.getBody();
  PsiParameterList list=newMethod.getParameterList();
  for (int i=0; i < myVariableDatas.length; i++) {
    ParameterTablePanel.VariableData data=myVariableDatas[i];
    boolean isFinal=data.variable.hasModifierProperty(PsiModifier.FINAL);
    if (data.passAsParameter) {
      PsiParameter parm=myElementFactory.createParameter(data.name,data.variable.getType());
      if (isFinal) {
        parm.getModifierList().setModifierProperty(PsiModifier.FINAL,true);
      }
      list.add(parm);
    }
 else {
      StringBuffer buffer=new StringBuffer();
      if (isFinal) {
        buffer.append("final ");
      }
      buffer.append("int ");
      buffer.append(data.name);
      buffer.append("=x;");
      String text=buffer.toString();
      PsiDeclarationStatement declaration=(PsiDeclarationStatement)myElementFactory.createStatementFromText(text,null);
      declaration=(PsiDeclarationStatement)myStyleManager.reformat(declaration);
      ((PsiVariable)declaration.getDeclaredElements()[0]).getTypeElement().replace(data.variable.getTypeElement());
      declaration=(PsiDeclarationStatement)body.add(declaration);
      PsiExpression initializer=((PsiVariable)declaration.getDeclaredElements()[0]).getInitializer();
      TextRange range=initializer.getTextRange();
      BlockSupport blockSupport=myProject.getComponent(BlockSupport.class);
      blockSupport.reparseRange(body.getContainingFile(),range.getStartOffset(),range.getEndOffset(),"...");
    }
  }
  PsiReferenceList throwsList=newMethod.getThrowsList();
  for (int i=0; i < exceptions.length; i++) {
    PsiClassType exception=exceptions[i];
    throwsList.add(myManager.getElementFactory().createReferenceElementByType(exception));
  }
  return (PsiMethod)myStyleManager.reformat(newMethod);
}
