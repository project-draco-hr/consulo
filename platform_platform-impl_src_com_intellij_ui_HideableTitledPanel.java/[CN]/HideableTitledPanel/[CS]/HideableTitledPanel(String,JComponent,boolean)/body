{
  super(new BorderLayout());
  myContent=content;
  add(myContent,BorderLayout.CENTER);
  myTitledSeparator=new TitledSeparatorWithMnemonic("",null);
  add(myTitledSeparator,BorderLayout.NORTH);
  myTitledSeparator.getLabel().setIcon(OFF_ICON);
  myTitledSeparator.getLabel().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  myTitledSeparator.getLabel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (myOn) {
        off();
      }
 else {
        on();
      }
    }
  }
);
  setOn(on);
  setTitle(title);
  addHierarchyListener(new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      final JComponent rootPane=getRootPane();
      if (rootPane != null && !myMnemonicActionRegistered) {
        final int mnemonicIndex=UIUtil.getDisplayMnemonicIndex(getTitle());
        if (mnemonicIndex != -1) {
          AnAction action=new AnAction(){
            public void actionPerformed(            AnActionEvent e){
              if (myOn) {
                off();
              }
 else {
                on();
              }
            }
          }
;
          final Character mnemonicCharacter=UIUtil.removeMnemonic(getTitle()).toLowerCase().charAt(mnemonicIndex);
          action.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(mnemonicCharacter,InputEvent.ALT_MASK)),rootPane);
          myMnemonicActionRegistered=true;
        }
      }
    }
  }
);
}
