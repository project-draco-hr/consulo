{
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(context.getProject());
  final GroovyFile toEval=factory.createGroovyFile(text,false,context);
  final GrClosableBlock closure=PsiTreeUtil.getParentOfType(context,GrClosableBlock.class);
  final Map<String,String> parameters=new THashMap<String,String>();
  final Map<GrExpression,String> replacements=new HashMap<GrExpression,String>();
  toEval.accept(new GroovyRecursiveElementVisitor(){
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      super.visitReferenceExpression(referenceExpression);
      if (PsiUtil.isThisReference(referenceExpression) || PsiUtil.isSuperReference(referenceExpression)) {
        replaceWithReference(referenceExpression,"delegate");
        return;
      }
      PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof PsiMember && (resolved instanceof PsiClass || ((PsiMember)resolved).hasModifierProperty(PsiModifier.STATIC))) {
        String qName=StaticImportMethodFix.getMemberQualifiedName((PsiMember)resolved);
        if (qName != null && qName.contains(".") && !referenceExpression.isQualified()) {
          replaceWithReference(referenceExpression,qName);
          return;
        }
      }
      if (shouldDelegate(referenceExpression,resolved)) {
        replaceWithReference(referenceExpression,"delegate." + referenceExpression.getReferenceName());
        return;
      }
      if (resolved instanceof GrVariable && !(resolved instanceof GrField) && !PsiTreeUtil.isAncestor(toEval,resolved,false)) {
        final String name=((GrVariable)resolved).getName();
        if (resolved instanceof ClosureSyntheticParameter && PsiTreeUtil.isAncestor(toEval,((ClosureSyntheticParameter)resolved).getClosure(),false)) {
          return;
        }
        String value;
        if (closure != null && PsiTreeUtil.findCommonParent(resolved,closure) != closure && !(resolved instanceof ClosureSyntheticParameter)) {
          value="this." + name;
        }
 else {
          value=name;
        }
        parameters.put(name,value);
      }
    }
    private boolean shouldDelegate(    GrReferenceExpression referenceExpression,    @Nullable PsiElement resolved){
      if (referenceExpression.isQualified()) {
        return false;
      }
      if (resolved instanceof GrField) {
        return true;
      }
      if (resolved instanceof PsiMethod && !referenceExpression.isQualified()) {
        String methodName=((PsiMethod)resolved).getName();
        if (closure != null && "getDelegate".equals(methodName) || "call".equals(methodName)) {
          return true;
        }
      }
      return closure != null && resolved instanceof GrLightVariable && "owner".equals(((GrLightVariable)resolved).getName());
    }
    private void replaceWithReference(    GrExpression expr,    final String exprText){
      replacements.put(expr,exprText);
    }
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      super.visitCodeReferenceElement(refElement);
      if (refElement.getQualifier() == null) {
        PsiElement resolved=refElement.resolve();
        if (resolved instanceof PsiClass) {
          String qName=((PsiClass)resolved).getQualifiedName();
          if (qName != null) {
            int dotIndex=qName.lastIndexOf(".");
            if (dotIndex < 0)             return;
            String packageName=qName.substring(0,dotIndex);
            refElement.setQualifier(factory.createReferenceElementFromText(packageName));
          }
        }
      }
    }
  }
);
  for (  GrExpression expression : replacements.keySet()) {
    expression.replaceWithExpression(factory.createExpressionFromText(replacements.get(expression)),false);
  }
  return Pair.create(parameters,toEval);
}
