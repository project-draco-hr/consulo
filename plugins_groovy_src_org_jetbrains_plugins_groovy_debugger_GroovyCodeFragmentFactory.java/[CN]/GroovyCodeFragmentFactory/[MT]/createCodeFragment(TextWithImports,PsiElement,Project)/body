{
  String text=textWithImports.getText();
  String imports=textWithImports.getImports();
  final Pair<Map<String,String>,GroovyFile> pair=externalParameters(text,context);
  GroovyFile toEval=pair.second;
  final Map<String,String> parameters=pair.first;
  List<String> names=new ArrayList<String>(parameters.keySet());
  List<String> values=ContainerUtil.map(names,new Function<String,String>(){
    public String fun(    String name){
      return parameters.get(name);
    }
  }
);
  text=toEval.getText();
  PsiClass contextClass=PsiUtil.getContextClass(context);
  boolean isStatic=isStaticContext(context);
  StringBuffer javaText=new StringBuffer();
  javaText.append("groovy.lang.MetaClass mc;\n");
  javaText.append("java.lang.Class clazz;\n");
  if (!isStatic) {
    javaText.append("clazz = ((java.lang.Object)this).getClass();\n");
    javaText.append("mc = ((groovy.lang.GroovyObject)this).getMetaClass();\n");
  }
 else {
    javaText.append("clazz = java.lang.Class.forName(\"").append(contextClass.getQualifiedName()).append("\");\n");
    javaText.append("mc = groovy.lang.GroovySystem.getMetaClassRegistry().getMetaClass(clazz);\n");
  }
  javaText.append(createProperty(StringUtil.join(names,", ") + "->" + stripImports(text,toEval),imports));
  javaText.append("groovy.lang.ExpandoMetaClass emc = new groovy.lang.ExpandoMetaClass(clazz);\n");
  if (!isStatic) {
    javaText.append("emc.setProperty(\"").append(EVAL_NAME).append("\", closure);\n");
    javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(emc);\n");
  }
 else {
    javaText.append("((groovy.lang.GroovyObject)emc.getProperty(\"static\")).setProperty(\"").append(EVAL_NAME).append("\", closure);\n");
    javaText.append("groovy.lang.GroovySystem.getMetaClassRegistry().setMetaClass(clazz, emc);\n");
  }
  javaText.append("emc.initialize();\n");
  javaText.append(unwrapVals(values));
  if (!isStatic) {
    javaText.append("java.lang.Object res = ((groovy.lang.MetaClassImpl)emc).invokeMethod(this, \"").append(EVAL_NAME).append("\", ").append("resVals").append(");\n");
    javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(mc);");
  }
 else {
    javaText.append("java.lang.Object res = ((groovy.lang.MetaClassImpl)emc).invokeStaticMethod(clazz, \"").append(EVAL_NAME).append("\", ").append("resVals").append(");\n");
    javaText.append("groovy.lang.GroovySystem.getMetaClassRegistry().setMetaClass(clazz, mc);\n");
  }
  javaText.append("res");
  final PsiElementFactory factory=JavaPsiFacade.getInstance(toEval.getProject()).getElementFactory();
  JavaCodeFragment result=factory.createCodeBlockCodeFragment(javaText.toString(),null,true);
  hideInternalJavaVariables(factory,result);
  if (contextClass != null) {
    result.setThisType(factory.createType(contextClass));
  }
  return result;
}
