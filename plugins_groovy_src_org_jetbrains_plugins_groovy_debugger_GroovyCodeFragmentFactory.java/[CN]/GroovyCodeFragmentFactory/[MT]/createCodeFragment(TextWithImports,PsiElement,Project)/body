{
  String text=textWithImports.getText();
  String imports=textWithImports.getImports();
  final GroovyPsiElement toEval;
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
  toEval=factory.createGroovyFile(text,false,context);
  final Set<String> namesList=new HashSet<String>();
  toEval.accept(new GroovyRecursiveElementVisitor(){
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      super.visitReferenceExpression(referenceExpression);
      PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof GrVariable && !(resolved instanceof GrField) && !PsiTreeUtil.isAncestor(toEval,resolved,false)) {
        namesList.add(((GrVariable)resolved).getName());
      }
    }
  }
);
  String[] names=namesList.toArray(new String[namesList.size()]);
  PsiClass contextClass=getContextClass(context);
  boolean isStatic=isStaticContext(context);
  StringBuffer javaText=new StringBuffer();
  javaText.append("groovy.lang.MetaClass mc;\n");
  javaText.append("java.lang.Class clazz;\n");
  if (!isStatic) {
    javaText.append("clazz = this.getClass();\n");
    javaText.append("mc = ((groovy.lang.GroovyObject)this).getMetaClass();\n");
  }
 else {
    javaText.append("clazz = java.lang.Class.forName(\"").append(contextClass.getQualifiedName()).append("\");\n");
    javaText.append("mc = groovy.lang.GroovySystem.getMetaClassRegistry().getMetaClass(clazz);\n");
  }
  javaText.append(createProperty(StringUtil.escapeStringCharacters(text),imports,names));
  javaText.append("groovy.lang.ExpandoMetaClass emc = new groovy.lang.ExpandoMetaClass(clazz);\n");
  if (!isStatic) {
    javaText.append("emc.setProperty(\"").append(EVAL_NAME).append("\", closure);\n");
    javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(emc);\n");
  }
 else {
    javaText.append("((groovy.lang.GroovyObject)emc.getProperty(\"static\")).setProperty(\"").append(EVAL_NAME).append("\", closure);\n");
    javaText.append("groovy.lang.GroovySystem.getMetaClassRegistry().setMetaClass(clazz, emc);\n");
  }
  javaText.append("emc.initialize();\n");
  if (!isStatic) {
    javaText.append("Object res = ((groovy.lang.MetaClassImpl)emc).invokeMethod(this, \"").append(EVAL_NAME).append("\", new Object[]{").append(getCommaSeparatedNamesList(names)).append("});\n");
    javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(mc);");
  }
 else {
    javaText.append("Object res = ((groovy.lang.MetaClassImpl)emc).invokeStaticMethod(clazz, \"").append(EVAL_NAME).append("\", new Object[]{").append(getCommaSeparatedNamesList(names)).append("});\n");
    javaText.append("groovy.lang.GroovySystem.getMetaClassRegistry().setMetaClass(clazz, mc);\n");
  }
  javaText.append("res");
  PsiElementFactory elementFactory=toEval.getManager().getElementFactory();
  PsiCodeFragment result=elementFactory.createCodeBlockCodeFragment(javaText.toString(),null,true);
  result.setThisType(elementFactory.createType(contextClass));
  return result;
}
