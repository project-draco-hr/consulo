{
  String text=textWithImports.getText();
  String imports=textWithImports.getImports();
  final GroovyPsiElement toEval;
  GroovyElementFactory factory=GroovyElementFactory.getInstance(project);
  toEval=factory.createGroovyFile(text,false,context);
  final Set<String> namesList=new HashSet<String>();
  toEval.accept(new GroovyRecursiveElementVisitor(){
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      super.visitReferenceExpression(referenceExpression);
      PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof GrVariable && !(resolved instanceof GrField) && !PsiTreeUtil.isAncestor(toEval,resolved,false)) {
        namesList.add(((GrVariable)resolved).getName());
      }
    }
  }
);
  String[] names=namesList.toArray(new String[namesList.size()]);
  PsiClass contextClass=getContextClass(context);
  boolean isStatic=isStaticContext(context);
  StringBuffer javaText=new StringBuffer();
  javaText.append(createProperty(StringUtil.escapeStringCharacters(text),imports,names));
  javaText.append("groovy.lang.MetaClass mc = ((groovy.lang.GroovyObject)this).getMetaClass();\n");
  javaText.append("groovy.lang.ExpandoMetaClass emc = new groovy.lang.ExpandoMetaClass(this.getClass());\n");
  javaText.append("emc.setProperty(\"").append(EVAL_NAME).append("\", closure);\n");
  javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(emc);\n");
  javaText.append("emc.initialize();\n");
  javaText.append("Object res = ((groovy.lang.MetaClassImpl)((groovy.lang.GroovyObject)this).getMetaClass()).invokeMethod(this, \"").append(EVAL_NAME).append("\", new Object[]{").append(getCommaSeparatedNamesList(names)).append("});\n");
  javaText.append("((groovy.lang.GroovyObject)this).setMetaClass(mc);");
  javaText.append("res");
  PsiElementFactory elementFactory=toEval.getManager().getElementFactory();
  PsiCodeFragment result=elementFactory.createCodeBlockCodeFragment(javaText.toString(),null,true);
  result.setThisType(elementFactory.createType(contextClass));
  return result;
}
