{
  if (!(file instanceof XmlFile)) {
    return false;
  }
  if (!super.checkAvailable(editor,file,info,down))   return false;
  final Document document=editor.getDocument();
  int movedLineStart=document.getLineStartOffset(info.toMove.startLine);
  final int movedLineEnd=document.getLineEndOffset(info.toMove.endLine - 1);
  PsiElement movedEndElement=file.findElementAt(movedLineEnd);
  if (movedEndElement instanceof PsiWhiteSpace)   movedEndElement=PsiTreeUtil.prevLeaf(movedEndElement);
  PsiElement movedStartElement=file.findElementAt(movedLineStart);
  if (movedStartElement instanceof PsiWhiteSpace)   movedStartElement=PsiTreeUtil.nextLeaf(movedStartElement);
  if (movedEndElement == null || movedStartElement == null)   return false;
  final PsiNamedElement namedParentAtEnd=PsiTreeUtil.getParentOfType(movedEndElement,PsiNamedElement.class);
  final PsiNamedElement namedParentAtStart=PsiTreeUtil.getParentOfType(movedStartElement,PsiNamedElement.class);
  if (checkInjections(movedEndElement,movedStartElement))   return false;
  XmlTag nearestTag=PsiTreeUtil.getParentOfType(movedStartElement,XmlTag.class);
  if (nearestTag != null && ("script".equals(nearestTag.getLocalName()) || (nearestTag instanceof HtmlTag && "script".equalsIgnoreCase(nearestTag.getLocalName())))) {
    return false;
  }
  PsiNamedElement movedParent=null;
  if (namedParentAtEnd == namedParentAtStart)   movedParent=namedParentAtEnd;
 else   if (namedParentAtEnd instanceof XmlAttribute && namedParentAtStart instanceof XmlTag && namedParentAtEnd.getParent() == namedParentAtStart) {
    movedParent=namedParentAtStart;
  }
 else   if (namedParentAtStart instanceof XmlAttribute && namedParentAtEnd instanceof XmlTag && namedParentAtStart.getParent() == namedParentAtEnd) {
    movedParent=namedParentAtEnd;
  }
  if (movedParent == null) {
    return false;
  }
  final TextRange textRange=movedParent.getTextRange();
  if (movedParent instanceof XmlTag) {
    final XmlTag tag=(XmlTag)movedParent;
    final TextRange valueRange=tag.getValue().getTextRange();
    final int valueStart=valueRange.getStartOffset();
    if (movedLineStart < valueStart && valueStart + 1 < document.getTextLength()) {
      movedLineStart=updateMovedRegionEnd(document,movedLineStart,valueStart + 1,info,down);
    }
    if (movedLineStart < valueStart) {
      movedLineStart=updateMovedRegionStart(document,movedLineStart,tag.getTextRange().getStartOffset(),info,down);
    }
  }
 else   if (movedParent instanceof XmlAttribute) {
    final int endOffset=textRange.getEndOffset() + 1;
    if (endOffset < document.getTextLength())     movedLineStart=updateMovedRegionEnd(document,movedLineStart,endOffset,info,down);
    movedLineStart=updateMovedRegionStart(document,movedLineStart,textRange.getStartOffset(),info,down);
  }
  final TextRange moveDestinationRange=new TextRange(document.getLineStartOffset(info.toMove2.startLine),document.getLineStartOffset(info.toMove2.endLine) - 1);
  if (movedParent instanceof XmlAttribute) {
    final XmlTag parent=((XmlAttribute)movedParent).getParent();
    if (parent != null) {
      final TextRange valueRange=parent.getValue().getTextRange();
      if ((down && moveDestinationRange.getEndOffset() >= valueRange.getStartOffset()) || (!down && moveDestinationRange.getStartOffset() <= parent.getTextRange().getStartOffset())) {
        info.toMove2=null;
      }
    }
  }
  if (down) {
    PsiElement updatedElement=file.findElementAt(moveDestinationRange.getEndOffset());
    if (updatedElement instanceof PsiWhiteSpace)     updatedElement=PsiTreeUtil.prevLeaf(updatedElement);
    if (updatedElement != null) {
      final PsiNamedElement namedParent=PsiTreeUtil.getParentOfType(updatedElement,movedParent.getClass());
      if (namedParent instanceof XmlTag) {
        if (checkParents(info,movedParent,namedParent,file,document))         return true;
        final XmlTag tag=(XmlTag)namedParent;
        final int offset=tag.isEmpty() ? tag.getTextRange().getStartOffset() : tag.getValue().getTextRange().getStartOffset();
        updatedMovedIntoEnd(document,info,offset);
        if (tag.isEmpty()) {
          info.toMove2=new LineRange(namedParent);
        }
      }
 else       if (namedParent instanceof XmlAttribute) {
        updatedMovedIntoEnd(document,info,namedParent.getTextRange().getEndOffset());
      }
    }
  }
 else {
    PsiElement updatedElement=file.findElementAt(moveDestinationRange.getStartOffset());
    if (updatedElement instanceof PsiWhiteSpace)     updatedElement=PsiTreeUtil.nextLeaf(updatedElement);
    if (updatedElement != null) {
      final PsiNamedElement namedParent=PsiTreeUtil.getParentOfType(updatedElement,movedParent.getClass());
      if (namedParent instanceof XmlTag) {
        final XmlTag tag=(XmlTag)namedParent;
        final TextRange tagValueRange=tag.getValue().getTextRange();
        final XmlTag[] subtags=tag.getSubTags();
        if ((tagValueRange.contains(movedLineStart) && subtags.length > 0 && subtags[0] == movedParent) || (tagValueRange.getLength() == 0 && tag.getTextRange().intersects(moveDestinationRange))) {
          final int line=document.getLineNumber(tag.getTextRange().getStartOffset());
          final LineRange toMove2=info.toMove2;
          info.toMove2=new LineRange(Math.min(line,toMove2.startLine),toMove2.endLine);
        }
        checkParents(info,movedParent,namedParent,file,document);
      }
 else       if (namedParent instanceof XmlAttribute) {
        final int line=document.getLineNumber(namedParent.getTextRange().getStartOffset());
        final LineRange toMove2=info.toMove2;
        info.toMove2=new LineRange(Math.min(line,toMove2.startLine),toMove2.endLine);
      }
    }
  }
  return true;
}
