{
  final PsiFile file=_context.file;
  final PsiManager manager=file.getManager();
  final PsiElement lastElement=file.findElementAt(_context.startOffset - 1);
  final Pair<CompletionContext,PsiElement> insertedInfo=ApplicationManager.getApplication().runWriteAction(new Computable<Pair<CompletionContext,PsiElement>>(){
    public Pair<CompletionContext,PsiElement> compute(){
      return insertDummyIdentifier(_context);
    }
  }
);
  PsiElement insertedElement=insertedInfo.getSecond();
  final CompletionContext context=insertedInfo.getFirst();
  CompletionData completionData=getCompletionData(context,lastElement);
  context.setPrefix(insertedElement,context.startOffset,completionData);
  if (completionData == null) {
    completionData=getCompletionData(context,lastElement);
  }
  if (completionData == null)   return new LookupData(LookupItem.EMPTY_ARRAY,context.getPrefix());
  final Set<LookupItem> lookupSet=new LinkedHashSet<LookupItem>();
  complete(context,insertedElement,completionData,lookupSet);
  if (lookupSet.isEmpty() || !CodeInsightUtil.isAntFile(file)) {
    final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
    completionData.addKeywordVariants(keywordVariants,context,insertedElement);
    CompletionData.completeKeywordsBySet(lookupSet,keywordVariants,context,insertedElement);
    CompletionUtil.highlightMembersOfContainer(lookupSet);
  }
  final LookupItem[] items=lookupSet.toArray(new LookupItem[lookupSet.size()]);
  final LookupData data=new LookupData(items,context.getPrefix());
  if (myPreferencePolicy == null) {
    myPreferencePolicy=new CompletionPreferencePolicy(manager,items,null,context.getPrefix(),insertedElement);
  }
  data.itemPreferencePolicy=myPreferencePolicy;
  myPreferencePolicy=null;
  return data;
}
