{
  if (element instanceof PsiMethod) {
    PsiCodeBlock body=((PsiMethod)element).getBody();
    if (body == null)     return null;
    return body.getTextRange();
  }
 else   if (element instanceof PsiClassInitializer) {
    return ((PsiClassInitializer)element).getBody().getTextRange();
  }
 else   if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    PsiJavaToken lBrace=aClass.getLBrace();
    if (lBrace == null)     return null;
    PsiJavaToken rBrace=aClass.getRBrace();
    if (rBrace == null)     return null;
    return new TextRange(lBrace.getTextOffset(),rBrace.getTextOffset() + 1);
  }
 else   if (element instanceof PsiJavaFile) {
    return getFileHeader((PsiJavaFile)element);
  }
 else   if (element instanceof PsiImportList) {
    PsiImportList list=(PsiImportList)element;
    PsiImportStatementBase[] statements=list.getAllImportStatements();
    if (statements.length == 0)     return null;
    final PsiElement importKeyword=statements[0].getFirstChild();
    if (importKeyword == null)     return null;
    int startOffset=importKeyword.getTextRange().getEndOffset() + 1;
    int endOffset=statements[statements.length - 1].getTextRange().getEndOffset();
    return new TextRange(startOffset,endOffset);
  }
 else   if (element instanceof PsiDocComment) {
    return element.getTextRange();
  }
 else   if (element instanceof XmlTag) {
    final FoldingBuilder foldingBuilder=element.getLanguage().getFoldingBuilder();
    if (foldingBuilder instanceof XmlFoldingBuilder) {
      return ((XmlFoldingBuilder)foldingBuilder).getRangeToFold(element);
    }
  }
 else   if (element instanceof PsiAnnotation) {
    int startOffset=element.getTextRange().getStartOffset();
    PsiElement last=element;
    while (element instanceof PsiAnnotation) {
      last=element;
      element=PsiTreeUtil.skipSiblingsForward(element,PsiWhiteSpace.class,PsiComment.class);
    }
    return new TextRange(startOffset,last.getTextRange().getEndOffset());
  }
  return null;
}
