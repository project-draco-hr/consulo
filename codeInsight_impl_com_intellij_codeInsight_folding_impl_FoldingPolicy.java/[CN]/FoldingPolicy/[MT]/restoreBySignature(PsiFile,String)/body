{
  int semicolonIndex=signature.indexOf(';');
  PsiElement parent;
  if (semicolonIndex >= 0) {
    String parentSignature=signature.substring(semicolonIndex + 1);
    parent=restoreBySignature(file,parentSignature);
    if (parent == null)     return null;
    signature=signature.substring(0,semicolonIndex);
  }
 else {
    parent=file;
  }
  StringTokenizer tokenizer=new StringTokenizer(signature,"#");
  String type=tokenizer.nextToken();
  if (type.equals("imports")) {
    if (!(file instanceof PsiJavaFile))     return null;
    return ((PsiJavaFile)file).getImportList();
  }
 else   if (type.equals("method")) {
    String name=tokenizer.nextToken();
    try {
      int index=Integer.parseInt(tokenizer.nextToken());
      return restoreElementInternal(parent,name,index,PsiMethod.class);
    }
 catch (    NumberFormatException e) {
      LOG.error(e);
      return null;
    }
  }
 else   if (type.equals("class")) {
    String name=tokenizer.nextToken();
    PsiNameHelper nameHelper=file.getManager().getNameHelper();
    if (nameHelper.isIdentifier(name)) {
      int index=0;
      try {
        index=Integer.parseInt(tokenizer.nextToken());
      }
 catch (      NoSuchElementException e) {
      }
      return restoreElementInternal(parent,name,index,PsiClass.class);
    }
    StringTokenizer tok1=new StringTokenizer(name,":");
    int start=Integer.parseInt(tok1.nextToken());
    int end=Integer.parseInt(tok1.nextToken());
    PsiElement element=file.findElementAt(start);
    if (element != null) {
      TextRange range=element.getTextRange();
      while (range != null && range.getEndOffset() < end) {
        element=element.getParent();
        range=element.getTextRange();
      }
      if (range != null && range.getEndOffset() == end && element instanceof PsiClass) {
        return element;
      }
    }
    return null;
  }
 else   if (type.equals("initializer")) {
    try {
      int index=Integer.parseInt(tokenizer.nextToken());
      PsiElement[] children=parent.getChildren();
      for (      PsiElement child : children) {
        if (child instanceof PsiClassInitializer) {
          if (index == 0) {
            return child;
          }
          index--;
        }
      }
      return null;
    }
 catch (    NumberFormatException e) {
      LOG.error(e);
      return null;
    }
  }
 else   if (type.equals("field")) {
    String name=tokenizer.nextToken();
    try {
      int index=0;
      try {
        index=Integer.parseInt(tokenizer.nextToken());
      }
 catch (      NoSuchElementException e) {
      }
      return restoreElementInternal(parent,name,index,PsiField.class);
    }
 catch (    NumberFormatException e) {
      LOG.error(e);
      return null;
    }
  }
 else   if (type.equals("docComment")) {
    if (parent instanceof PsiClass) {
      return ((PsiClass)parent).getDocComment();
    }
 else     if (parent instanceof PsiMethod) {
      return ((PsiMethod)parent).getDocComment();
    }
 else     if (parent instanceof PsiField) {
      return ((PsiField)parent).getDocComment();
    }
 else {
      return null;
    }
  }
 else   if (type.equals("tag")) {
    String name=tokenizer.nextToken();
    if (parent instanceof XmlFile) {
      parent=((XmlFile)parent).getDocument();
    }
    try {
      int index=Integer.parseInt(tokenizer.nextToken());
      PsiElement result=restoreElementInternal(parent,name,index,XmlTag.class);
      if (result == null && file.getFileType() == StdFileTypes.JSP) {
        if (parent instanceof XmlDocument) {
          result=restoreElementInternal(HtmlUtil.getRealXmlDocument((XmlDocument)parent),name,index,XmlTag.class);
        }
 else         if (name.equals("<unnamed>")) {
          result=restoreElementInternal(parent,"",index,XmlTag.class);
        }
      }
      return result;
    }
 catch (    NumberFormatException e) {
      LOG.error(e);
      return null;
    }
  }
 else {
    return null;
  }
}
