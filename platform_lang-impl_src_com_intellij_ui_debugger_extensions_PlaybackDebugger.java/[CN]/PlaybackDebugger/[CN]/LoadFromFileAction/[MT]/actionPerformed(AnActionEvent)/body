{
  final Component c=e.getInputEvent().getComponent();
  final File scriptsFile=getScriptsFile();
  final FilenameFilter filter=new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.toLowerCase().endsWith(DOT_EXT) || new File(dir,name).isDirectory();
    }
  }
;
  final File[] kids=scriptsFile != null ? scriptsFile.listFiles(filter) : null;
  if (kids == null || kids.length == 0) {
    JBPopupFactory.getInstance().createMessage("No scripts found in the given directory").showUnderneathOf(c);
  }
 else {
    final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,false,false,false,false){
      @Override public boolean isFileVisible(      VirtualFile file,      boolean showHiddenFiles){
        final boolean fileVisible=super.isFileVisible(file,showHiddenFiles);
        if (fileVisible && file.getParent() != null) {
          return filter.accept(new File(file.getParent().getPresentableUrl()),file.getName());
        }
 else {
          return false;
        }
      }
    }
;
    descriptor.setRoot(LocalFileSystem.getInstance().findFileByIoFile(scriptsFile));
    JBPopupFactory.getInstance().createTree(new BaseTreePopupStep<FileElement>(null,"Choose Script To Load",new FileTreeStructure(null,descriptor)){
      @Override public PopupStep onChosen(      FileElement selectedValue,      boolean finalChoice){
        loadFrom(selectedValue.getFile());
        return FINAL_CHOICE;
      }
    }
).showUnderneathOf(c);
  }
}
