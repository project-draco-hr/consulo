{
  if (!KEY_MAP.equals(keymapElement.getName())) {
    throw new IllegalArgumentException(UNKNOWN_ELEMENT + keymapElement);
  }
  String version=keymapElement.getAttributeValue(VERSION);
  if (version != null) {
    throw new InvalidDataException(UNKNOWN_VERSION + version);
  }
  keymapElement.setAttribute(VERSION,Integer.toString(1));
  boolean disableMnemonics=Boolean.valueOf(DISABLE_MNEMONICS).booleanValue();
  keymapElement.removeAttribute(DISABLE_MNEMONICS);
  keymapElement.setAttribute(DISABLE_MNEMONICS_ATTRIBUTE,Boolean.toString(disableMnemonics));
  String name=keymapElement.getAttributeValue(NAME_ATTRIBUTE);
  if (name == null) {
    throw new InvalidDataException("Attribute 'name' of <keymap> must be specified");
  }
  HashMap id2elements=new HashMap();
  for (Iterator i=keymapElement.getChildren().iterator(); i.hasNext(); ) {
    Element oldChild=(Element)i.next();
    if (BINDING.equals(oldChild.getName())) {
      String id=oldChild.getAttributeValue(ID_ATTRIBUTE);
      if (id == null) {
        throw new InvalidDataException("attribute 'id' must be specified");
      }
      String keystroke=oldChild.getAttributeValue(KEYSTROKE_ATTRIBUTE);
      String suffix=oldChild.getAttributeValue(SUFFIX_ATTRIBUTE);
      if (keystroke != null) {
        Element newChild=new Element(KEYBOARD_SHORTCUT);
        newChild.setAttribute(FIRST_KEYSTROKE_ATTRIBUTE,keystroke);
        if (suffix != null) {
          newChild.setAttribute(SECOND_KEYSTROKE_ATTRIBUTE,suffix);
        }
        ArrayList elements=(ArrayList)id2elements.get(id);
        if (elements == null) {
          elements=new ArrayList(2);
          id2elements.put(id,elements);
        }
        elements.add(newChild);
      }
 else {
        id2elements.put(id,new ArrayList(0));
      }
      i.remove();
    }
 else     if (MOUSE_SHORTCUT.equals(oldChild.getName())) {
      String id=oldChild.getAttributeValue(ID_ATTRIBUTE);
      if (id == null) {
        throw new InvalidDataException("Attribute 'id' of <mouse-shortcut> must be specified; keymap name=" + name);
      }
      oldChild.removeAttribute(ID_ATTRIBUTE);
      i.remove();
      ArrayList elements=(ArrayList)id2elements.get(id);
      if (elements == null) {
        elements=new ArrayList(2);
        id2elements.put(id,elements);
      }
      elements.add(oldChild);
    }
 else {
      throw new InvalidDataException("unknown element : " + oldChild.getName());
    }
  }
  for (Iterator i=id2elements.keySet().iterator(); i.hasNext(); ) {
    String id=(String)i.next();
    Element actionElement=new Element(ACTION);
    actionElement.setAttribute(ID_ATTRIBUTE,id);
    ArrayList elements=(ArrayList)id2elements.get(id);
    for (Iterator j=elements.iterator(); j.hasNext(); ) {
      Element newChild=(Element)j.next();
      actionElement.addContent(newChild);
    }
    keymapElement.addContent(actionElement);
  }
}
