{
  handler.addListener(new GitHandlerListener(){
    public void processTerminted(    final int exitCode){
      if (exitCode != 0) {
        EventQueue.invokeLater(new Runnable(){
          public void run(){
            String text=handler.getStderr();
            if (text.length() == 0) {
              text=handler.getStdout();
            }
            if (text.length() == 0) {
              text="The git process exited with the code " + exitCode;
            }
            GitUtil.showOperationError(handler.project(),operationName,text);
          }
        }
);
      }
    }
    public void startFailed(    final Throwable exception){
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          GitUtil.showOperationError(handler.project(),exception.getMessage(),operationName);
        }
      }
);
    }
  }
);
  ProgressManager manager=ProgressManager.getInstance();
  manager.runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      handler.start();
      if (handler.isStarted()) {
        handler.waitFor();
      }
    }
  }
,operationTitle,false,handler.project());
  if (!handler.isStarted() || handler.getExitCode() != 0) {
    return null;
  }
  return handler.getStdout();
}
