{
  if (from instanceof PsiLocalVariable) {
    return searchReferencesAndProcessAssignmentTarget(from,context,parent,processor);
  }
  if (from instanceof PsiParameter) {
    PsiParameter parameter=(PsiParameter)from;
    PsiElement scope=parameter.getDeclarationScope();
    Collection<PsiParameter> parametersToAnalyze=new THashSet<PsiParameter>();
    if (scope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)scope;
      int index=method.getParameterList().getParameterIndex(parameter);
      Collection<PsiMethod> superMethods=new THashSet<PsiMethod>(Arrays.asList(method.findDeepestSuperMethods()));
      superMethods.add(method);
      for (Iterator<PsiMethod> iterator=superMethods.iterator(); iterator.hasNext(); ) {
        SliceManager.getInstance(method.getProject()).checkCanceled();
        PsiMethod superMethod=iterator.next();
        if (!parent.params.scope.contains(superMethod)) {
          iterator.remove();
        }
      }
      final THashSet<PsiMethod> implementors=new THashSet<PsiMethod>(superMethods);
      for (      PsiMethod superMethod : superMethods) {
        SliceManager.getInstance(method.getProject()).checkCanceled();
        if (!OverridingMethodsSearch.search(superMethod,parent.getScope().toSearchScope(),true).forEach(new Processor<PsiMethod>(){
          @Override public boolean process(          PsiMethod sub){
            SliceManager.getInstance(method.getProject()).checkCanceled();
            implementors.add(sub);
            return true;
          }
        }
))         return false;
      }
      for (      PsiMethod implementor : implementors) {
        SliceManager.getInstance(method.getProject()).checkCanceled();
        if (!parent.params.scope.contains(implementor))         continue;
        if (implementor instanceof PsiCompiledElement)         implementor=(PsiMethod)implementor.getNavigationElement();
        PsiParameter[] parameters=implementor.getParameterList().getParameters();
        if (index != -1 && index < parameters.length) {
          parametersToAnalyze.add(parameters[index]);
        }
      }
    }
 else {
      parametersToAnalyze.add(parameter);
    }
    for (    final PsiParameter psiParameter : parametersToAnalyze) {
      SliceManager.getInstance(from.getProject()).checkCanceled();
      if (!searchReferencesAndProcessAssignmentTarget(psiParameter,null,parent,processor))       return false;
    }
    return true;
  }
  if (from instanceof PsiField) {
    return searchReferencesAndProcessAssignmentTarget(from,null,parent,processor);
  }
  if (from instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)from;
    Collection<PsiMethod> superMethods=new THashSet<PsiMethod>(Arrays.asList(method.findDeepestSuperMethods()));
    superMethods.add(method);
    final Set<PsiReference> processed=new THashSet<PsiReference>();
    for (    final PsiMethod containingMethod : superMethods) {
      if (!MethodReferencesSearch.search(containingMethod,parent.getScope().toSearchScope(),true).forEach(new Processor<PsiReference>(){
        @Override public boolean process(        final PsiReference reference){
          SliceManager.getInstance(from.getProject()).checkCanceled();
synchronized (processed) {
            if (!processed.add(reference))             return true;
          }
          PsiElement element=reference.getElement().getParent();
          return processAssignmentTarget(element,parent,processor);
        }
      }
)) {
        return false;
      }
    }
  }
  return true;
}
