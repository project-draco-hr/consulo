def do_hgweb(self):
    (path, query) = _splitURI(self.path)
    env = {}
    env['GATEWAY_INTERFACE'] = 'CGI/1.1'
    env['REQUEST_METHOD'] = self.command
    env['SERVER_NAME'] = self.server.server_name
    env['SERVER_PORT'] = str(self.server.server_port)
    env['REQUEST_URI'] = self.path
    env['SCRIPT_NAME'] = self.server.prefix
    env['PATH_INFO'] = path[len(self.server.prefix):]
    env['REMOTE_HOST'] = self.client_address[0]
    env['REMOTE_ADDR'] = self.client_address[0]
    if query:
        env['QUERY_STRING'] = query
    if (self.headers.typeheader is None):
        env['CONTENT_TYPE'] = self.headers.type
    else:
        env['CONTENT_TYPE'] = self.headers.typeheader
    length = self.headers.getheader('content-length')
    if length:
        env['CONTENT_LENGTH'] = length
    for header in [h for h in self.headers.keys() if (h not in ('content-type', 'content-length'))]:
        hkey = ('HTTP_' + header.replace('-', '_').upper())
        hval = self.headers.getheader(header)
        hval = hval.replace('\n', '').strip()
        if hval:
            env[hkey] = hval
    env['SERVER_PROTOCOL'] = self.request_version
    env['wsgi.version'] = (1, 0)
    env['wsgi.url_scheme'] = self.url_scheme
    env['wsgi.input'] = self.rfile
    env['wsgi.errors'] = _error_logger(self)
    env['wsgi.multithread'] = isinstance(self.server, SocketServer.ThreadingMixIn)
    env['wsgi.multiprocess'] = isinstance(self.server, SocketServer.ForkingMixIn)
    env['wsgi.run_once'] = 0
    self.close_connection = True
    self.saved_status = None
    self.saved_headers = []
    self.sent_headers = False
    self.length = None
    for chunk in self.server.application(env, self._start_response):
        self._write(chunk)
