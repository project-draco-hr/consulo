{
  final ArrayList<String> result=new ArrayList<String>();
  final Set<SymbolicName> processedSymbolicNames=new HashSet<SymbolicName>();
  final String branches=myCvsRevision.getBranches();
  if (branches != null && branches.length() != 0) {
    final String[] branchNames=branches.split(";");
    for (    String branchName : branchNames) {
      final CvsRevisionNumber revisionNumber=new CvsRevisionNumber(branchName.trim());
      final List<SymbolicName> symNames=getSymbolicNames(revisionNumber);
      if (!symNames.isEmpty()) {
        for (        final SymbolicName symName : symNames) {
          processedSymbolicNames.add(symName);
          if (includeRevisionNumbers) {
            result.add(symName.getName() + " (" + revisionNumber.asString()+ ")");
          }
 else {
            result.add(symName.getName());
          }
        }
      }
    }
  }
  final List<SymbolicName> symNames=myLogInformation.getAllSymbolicNames();
  for (  final SymbolicName symName : symNames) {
    if (symName.getRevision().startsWith(myCvsRevision.getNumber() + ".") && !processedSymbolicNames.contains(symName)) {
      CvsRevisionNumber number=new CvsRevisionNumber(symName.getRevision().trim());
      final int[] subRevisions=number.getSubRevisions();
      if (subRevisions.length == 4) {
        int lastSubRevision=subRevisions[subRevisions.length - 1];
        number=number.removeTailVersions(2);
        number=number.addTailVersions(lastSubRevision);
      }
      if (includeRevisionNumbers) {
        result.add(symName.getName() + " (" + number.asString()+ ")");
      }
 else {
        result.add(symName.getName());
      }
    }
  }
  return result;
}
