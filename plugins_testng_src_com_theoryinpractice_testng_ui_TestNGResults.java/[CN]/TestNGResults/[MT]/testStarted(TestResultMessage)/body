{
  boolean flattenPackages=true;
  TestProxy classNode;
  if (flattenPackages) {
    classNode=getPackageClassNodeFor(result);
  }
 else {
    classNode=getClassNodeFor(result);
  }
  TestProxy proxy=new TestProxy();
  proxy.setParent(classNode);
  proxy.setResultMessage(result);
synchronized (started) {
    List<TestProxy> dups=started.get(result);
    if (dups == null) {
      dups=new ArrayList<TestProxy>();
      started.put(result,dups);
    }
    dups.add(proxy);
  }
  final String testMethodDescriptor=result.getTestClass() + result.getMethod();
  if (startedMethods.contains(testMethodDescriptor)) {
    total++;
  }
 else {
    startedMethods.add(testMethodDescriptor);
  }
  animator.setCurrentTestCase(proxy);
  treeBuilder.addItem(classNode,proxy);
  treeBuilder.repaintWithParents(proxy);
  count++;
  if (count > total)   total=count;
  if (TestNGConsoleProperties.TRACK_RUNNING_TEST.value(myProperties)) {
    selectTest(proxy);
  }
  return proxy;
}
