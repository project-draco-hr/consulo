{
  TestProxy classNode=getPackageClassNodeFor(result);
  TestProxy proxy=new TestProxy();
  proxy.setParent(classNode);
  proxy.setResultMessage(result);
synchronized (started) {
    if (registerDups) {
      List<TestProxy> dups=started.get(result);
      if (dups == null) {
        dups=new ArrayList<TestProxy>();
        started.put(result,dups);
      }
      dups.add(proxy);
    }
  }
  final String testMethodDescriptor=TestProxy.toDisplayText(result,project);
  if (startedMethods.contains(testMethodDescriptor)) {
    total++;
  }
 else {
    startedMethods.add(testMethodDescriptor);
  }
  animator.setCurrentTestCase(proxy);
  treeBuilder.addItem(classNode,proxy);
  treeBuilder.repaintWithParents(proxy);
  count++;
  if (count > total)   total=count;
  if (myLastSelected == proxy) {
    myLastSelected=null;
  }
  if (myLastSelected == null && TestConsoleProperties.TRACK_RUNNING_TEST.value(myProperties)) {
    selectTest(proxy);
  }
  return proxy;
}
