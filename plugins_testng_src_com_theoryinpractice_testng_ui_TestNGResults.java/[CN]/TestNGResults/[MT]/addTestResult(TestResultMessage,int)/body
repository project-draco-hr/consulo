{
  TestProxy testCase;
synchronized (started) {
    final List<TestProxy> dups=started.get(result);
    testCase=dups == null || dups.isEmpty() ? null : dups.remove(0);
  }
  if (testCase == null) {
    final PsiElement element=getPackageClassNodeFor(result).getPsiElement();
    if (element instanceof PsiClass) {
      final PsiMethod[] methods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
        public PsiMethod[] compute(){
          return ((PsiClass)element).findMethodsByName(result.getMethod(),true);
        }
      }
);
      if (methods.length > 0 && methods[0] != null && !AnnotationUtil.isAnnotated(methods[0],Arrays.asList(TestNGUtil.CONFIG_ANNOTATIONS_FQN))) {
        for (        List<TestProxy> proxies : started.values()) {
          if (proxies != null) {
            for (            TestProxy proxy : proxies) {
              if (methods[0].equals(proxy.getPsiElement())) {
                testCase=proxy;
                break;
              }
            }
          }
        }
        if (testCase == null) {
          testCase=testStarted(result);
          testCase.appendStacktrace(result);
        }
      }
    }
  }
  if (testCase != null) {
    testCase.setResultMessage(result);
    testCase.setTearDownFailure(failedToStart != null);
    failedToStart=null;
    if (result.getResult() == MessageHelper.FAILED_TEST) {
      failed.add(testCase);
    }
    model.addTestResult(result);
  }
 else {
    testCase=new TestProxy(TestProxy.toDisplayText(result,project));
    testCase.appendStacktrace(result);
    if (failedToStart != null) {
      failedToStart.addChild(testCase);
      failedToStart.setTearDownFailure(true);
    }
 else {
      failedToStart=testCase;
    }
  }
  testCase.setExceptionMark(exceptionMark);
  AbstractTestProxy.flushOutput(testCase);
  if (result.getResult() == MessageHelper.FAILED_TEST) {
    myStatusLine.setStatusColor(ColorProgressBar.RED);
    myStatus=MessageHelper.FAILED_TEST;
  }
 else   if (result.getResult() == MessageHelper.SKIPPED_TEST && myStatus == MessageHelper.PASSED_TEST) {
    myStatus=MessageHelper.SKIPPED_TEST;
  }
  myStatusLine.setFraction((double)count / total);
  updateStatusLine();
}
