{
  final Sdk projectJdk=JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk();
  final GeneralCommandLine cmdLine=new GeneralCommandLine();
  cmdLine.setExePath(((JavaSdkType)projectJdk.getSdkType()).getVMExecutablePath(projectJdk));
  cmdLine.addParameter("-server");
  cmdLine.addParameter("-ea");
  cmdLine.addParameter("-XX:MaxPermSize=150m");
  cmdLine.addParameter("-XX:ReservedCodeCacheSize=64m");
  cmdLine.addParameter("-Djava.awt.headless=true");
  if (SystemInfo.is64Bit) {
    cmdLine.addParameter("-Xmx700m");
  }
 else {
    cmdLine.addParameter("-Xmx512m");
  }
  cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError");
  cmdLine.addParameter("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5008");
  final String lang=System.getProperty("user.language");
  if (lang != null) {
    cmdLine.addParameter("-Duser.language=" + lang);
  }
  final String country=System.getProperty("user.country");
  if (country != null) {
    cmdLine.addParameter("-Duser.country=" + country);
  }
  final String region=System.getProperty("user.region");
  if (region != null) {
    cmdLine.addParameter("-Duser.region=" + region);
  }
  cmdLine.addParameter("-classpath");
  final List<File> cp=ClasspathBootstrap.getApplicationClasspath();
  final JavaCompiler systemCompiler=ToolProvider.getSystemJavaCompiler();
  if (systemCompiler == null) {
    throw new ExecutionException("No system java compiler is provided by the JRE. Make sure tools.jar is present in IntelliJ IDEA classpath.");
  }
  try {
    cp.add(ClasspathBootstrap.getResourcePath(systemCompiler.getClass()));
  }
 catch (  Throwable ignored) {
  }
  cmdLine.addParameter(classpathToString(cp));
  cmdLine.addParameter(org.jetbrains.jps.server.Server.class.getName());
  cmdLine.addParameter(Integer.toString(port));
  final File workDirectory=new File(mySystemDirectory,COMPILE_SERVER_SYSTEM_ROOT);
  workDirectory.mkdirs();
  cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()));
  cmdLine.setWorkDirectory(workDirectory);
  return cmdLine.createProcess();
}
