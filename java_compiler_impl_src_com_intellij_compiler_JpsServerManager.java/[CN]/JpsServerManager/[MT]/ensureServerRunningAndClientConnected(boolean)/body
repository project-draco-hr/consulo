{
  final OSProcessHandler ph=myProcessHandler;
  final Client cl=myClient;
  final boolean processNotRunning=ph == null || ph.isProcessTerminated() || ph.isProcessTerminating();
  final boolean clientNotConnected=cl == null || !cl.isConnected();
  if (processNotRunning || clientNotConnected) {
    shutdownServer(cl,ph);
    myProcessHandler=null;
    myClient=null;
    if (!forceRestart) {
      return null;
    }
    final int port=NetUtils.findAvailableSocketPort();
    final Process process=launchServer(port);
    final OSProcessHandler processHandler=new OSProcessHandler(process,null);
    final Ref<String> serverStartMessage=new Ref<String>(null);
    final Semaphore semaphore=new Semaphore();
    semaphore.down();
    processHandler.addProcessListener(new ProcessAdapter(){
      public void onTextAvailable(      ProcessEvent event,      Key outputType){
        LOG.info("COMPILE_SERVER [" + outputType.toString() + "]: "+ event.getText());
      }
    }
);
    processHandler.addProcessListener(new ProcessAdapter(){
      public void processTerminated(      ProcessEvent event){
        try {
          processHandler.removeProcessListener(this);
        }
  finally {
          semaphore.up();
        }
      }
      public void onTextAvailable(      ProcessEvent event,      Key outputType){
        if (outputType == ProcessOutputTypes.STDERR) {
          try {
            final String text=event.getText();
            if (text != null) {
              if (text.contains(Server.SERVER_SUCCESS_START_MESSAGE) || text.contains(Server.SERVER_ERROR_START_MESSAGE)) {
                processHandler.removeProcessListener(this);
                serverStartMessage.set(text);
              }
            }
          }
  finally {
            semaphore.up();
          }
        }
      }
    }
);
    processHandler.startNotify();
    semaphore.waitFor();
    final String startupMsg=serverStartMessage.get();
    if (startupMsg == null || !startupMsg.contains(Server.SERVER_SUCCESS_START_MESSAGE)) {
      throw new Exception("Server startup failed: " + startupMsg);
    }
    Client client=new Client();
    boolean connected=false;
    try {
      connected=client.connect(NetUtils.getLocalHostString(),port);
      if (connected) {
        final RequestFuture setupFuture=sendSetupRequest(client);
        setupFuture.get();
        myProcessHandler=processHandler;
        myClient=client;
      }
    }
  finally {
      if (!connected) {
        shutdownServer(cl,processHandler);
      }
    }
  }
  return myClient;
}
