{
  Set<String> commonModuleNames=ContainerUtilRt.newHashSet(context.currentModules.keySet());
  commonModuleNames.retainAll(context.oldModules.keySet());
  for (  final String moduleName : commonModuleNames) {
    final Map<String,ExternalModuleDependency> currentModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,ExternalModuleDependency> oldModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,ExternalLibraryDependency> currentLibraryDependencies=ContainerUtilRt.newHashMap();
    final Map<String,ExternalLibraryDependency> oldLibraryDependencies=ContainerUtilRt.newHashMap();
    ExternalEntityVisitor oldStateVisitor=new ExternalEntityVisitorAdapter(){
      @Override public void visit(      @NotNull ExternalModuleDependency dependency){
        oldModuleDependencies.put(dependency.getTarget().getName(),dependency);
      }
      @Override public void visit(      @NotNull ExternalLibraryDependency dependency){
        oldLibraryDependencies.put(dependency.getTarget().getName(),dependency);
      }
    }
;
    for (    ExternalDependency dependency : context.oldModules.get(moduleName).getDependencies()) {
      dependency.invite(oldStateVisitor);
    }
    ExternalEntityVisitor currentStateVisitor=new ExternalEntityVisitorAdapter(){
      @Override public void visit(      @NotNull ExternalModuleDependency dependency){
        currentModuleDependencies.put(dependency.getTarget().getName(),dependency);
      }
      @Override public void visit(      @NotNull ExternalLibraryDependency dependency){
        currentLibraryDependencies.put(dependency.getTarget().getName(),dependency);
      }
    }
;
    for (    ExternalDependency dependency : context.currentModules.get(moduleName).getDependencies()) {
      dependency.invite(currentStateVisitor);
    }
    Function<String,UserProjectChange<?>> addedModuleDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new AddModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> removedModuleDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new RemoveModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> addedLibraryDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new AddLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> removedLibraryDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new RemoveLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    buildPresenceChanges(oldModuleDependencies.keySet(),currentModuleDependencies.keySet(),addedModuleDependency,removedModuleDependency,context);
    buildPresenceChanges(oldLibraryDependencies.keySet(),currentLibraryDependencies.keySet(),addedLibraryDependency,removedLibraryDependency,context);
    NullableFunction<Pair<ExternalModuleDependency,ExternalModuleDependency>,UserProjectChange<?>> exportedModuleDependencyBuilder=new NullableFunction<Pair<ExternalModuleDependency,ExternalModuleDependency>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ExternalModuleDependency,ExternalModuleDependency> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new ModuleDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<ExternalModuleDependency,ExternalModuleDependency>,UserProjectChange<?>> scopeModuleDependencyBuilder=new NullableFunction<Pair<ExternalModuleDependency,ExternalModuleDependency>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ExternalModuleDependency,ExternalModuleDependency> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new ModuleDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<ExternalLibraryDependency,ExternalLibraryDependency>,UserProjectChange<?>> exportedLibDependencyBuilder=new NullableFunction<Pair<ExternalLibraryDependency,ExternalLibraryDependency>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ExternalLibraryDependency,ExternalLibraryDependency> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new LibraryDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<ExternalLibraryDependency,ExternalLibraryDependency>,UserProjectChange<?>> scopeLibDependencyBuilder=new NullableFunction<Pair<ExternalLibraryDependency,ExternalLibraryDependency>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ExternalLibraryDependency,ExternalLibraryDependency> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new LibraryDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,exportedModuleDependencyBuilder,context);
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,scopeModuleDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,exportedLibDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,scopeLibDependencyBuilder,context);
  }
}
