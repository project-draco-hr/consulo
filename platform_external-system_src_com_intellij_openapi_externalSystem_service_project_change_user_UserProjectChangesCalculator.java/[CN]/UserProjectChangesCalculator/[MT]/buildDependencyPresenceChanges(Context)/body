{
  Set<String> commonModuleNames=ContainerUtilRt.newHashSet(context.currentModules.keySet());
  commonModuleNames.retainAll(context.oldModules.keySet());
  for (  final String moduleName : commonModuleNames) {
    final Map<String,ModuleDependencyData> currentModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,ModuleDependencyData> oldModuleDependencies=ContainerUtilRt.newHashMap();
    final Map<String,LibraryDependencyData> currentLibraryDependencies=ContainerUtilRt.newHashMap();
    final Map<String,LibraryDependencyData> oldLibraryDependencies=ContainerUtilRt.newHashMap();
    Function<String,UserProjectChange<?>> addedModuleDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new AddModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> removedModuleDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new RemoveModuleDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> addedLibraryDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new AddLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    Function<String,UserProjectChange<?>> removedLibraryDependency=new Function<String,UserProjectChange<?>>(){
      @Override public UserProjectChange<?> fun(      String s){
        return new RemoveLibraryDependencyUserChange(moduleName,s);
      }
    }
;
    buildPresenceChanges(oldModuleDependencies.keySet(),currentModuleDependencies.keySet(),addedModuleDependency,removedModuleDependency,context);
    buildPresenceChanges(oldLibraryDependencies.keySet(),currentLibraryDependencies.keySet(),addedLibraryDependency,removedLibraryDependency,context);
    NullableFunction<Pair<ModuleDependencyData,ModuleDependencyData>,UserProjectChange<?>> exportedModuleDependencyBuilder=new NullableFunction<Pair<ModuleDependencyData,ModuleDependencyData>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ModuleDependencyData,ModuleDependencyData> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new ModuleDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<ModuleDependencyData,ModuleDependencyData>,UserProjectChange<?>> scopeModuleDependencyBuilder=new NullableFunction<Pair<ModuleDependencyData,ModuleDependencyData>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<ModuleDependencyData,ModuleDependencyData> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new ModuleDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<LibraryDependencyData,LibraryDependencyData>,UserProjectChange<?>> exportedLibDependencyBuilder=new NullableFunction<Pair<LibraryDependencyData,LibraryDependencyData>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<LibraryDependencyData,LibraryDependencyData> pair){
        if (pair.first.isExported() != pair.second.isExported()) {
          return new LibraryDependencyExportedChange(moduleName,pair.second.getName(),pair.second.isExported());
        }
        return null;
      }
    }
;
    NullableFunction<Pair<LibraryDependencyData,LibraryDependencyData>,UserProjectChange<?>> scopeLibDependencyBuilder=new NullableFunction<Pair<LibraryDependencyData,LibraryDependencyData>,UserProjectChange<?>>(){
      @Nullable @Override public UserProjectChange<?> fun(      Pair<LibraryDependencyData,LibraryDependencyData> pair){
        if (pair.first.getScope() != pair.second.getScope()) {
          return new LibraryDependencyScopeUserChange(moduleName,pair.second.getName(),pair.second.getScope());
        }
        return null;
      }
    }
;
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,exportedModuleDependencyBuilder,context);
    buildSettingsChanges(oldModuleDependencies,currentModuleDependencies,scopeModuleDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,exportedLibDependencyBuilder,context);
    buildSettingsChanges(oldLibraryDependencies,currentLibraryDependencies,scopeLibDependencyBuilder,context);
  }
}
