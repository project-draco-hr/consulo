{
  myLayoutTreeComponent.initTree();
  myMainPanel.putClientProperty(DataManager.CLIENT_PROPERTY_DATA_PROVIDER,new TypeSafeDataProviderAdapter(new MyDataProvider()));
  mySplitter=new Splitter(false);
  final JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(myLayoutTreeComponent.getTreePanel(),BorderLayout.CENTER);
  final Border border=BorderFactory.createEmptyBorder(3,3,3,3);
  leftPanel.setBorder(border);
  mySplitter.setFirstComponent(leftPanel);
  final JPanel rightPanel=new JPanel(new BorderLayout());
  final JPanel rightTopPanel=new JPanel(new BorderLayout());
  rightTopPanel.add(new JLabel("Available Elements (drag'n'drop to layout tree)"),BorderLayout.SOUTH);
  rightPanel.add(rightTopPanel,BorderLayout.NORTH);
  rightPanel.add(ScrollPaneFactory.createScrollPane(mySourceItemsTree.getTree()),BorderLayout.CENTER);
  rightPanel.setBorder(border);
  mySplitter.setSecondComponent(rightPanel);
  myShowIncludedCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myShowIncludedCheckBox.isSelected()) {
        mySubstitutionParameters.setSubstituteAll();
      }
 else {
        mySubstitutionParameters.setSubstituteNone();
      }
      rebuildTries();
    }
  }
);
  final DefaultActionGroup toolbarActionGroup=new DefaultActionGroup();
  final List<AnAction> createActions2=new ArrayList<AnAction>();
  AddCompositeElementActionGroup.addCompositeCreateActions(createActions2,this);
  for (  AnAction createAction : createActions2) {
    toolbarActionGroup.add(createAction);
  }
  toolbarActionGroup.add(createAddAction(false));
  toolbarActionGroup.add(new RemovePackagingElementAction(this));
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActionGroup,true);
  leftPanel.add(toolbar.getComponent(),BorderLayout.NORTH);
  rightTopPanel.setPreferredSize(new Dimension(-1,toolbar.getComponent().getPreferredSize().height));
  myTabbedPane=new TabbedPaneWrapper();
  myTabbedPane.addTab("Output Layout",mySplitter);
  myTabbedPane.addTab("Validation",myPostprocessingPanel.getMainPanel());
  myEditorPanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  DefaultActionGroup popupActionGroup=new DefaultActionGroup();
  final List<AnAction> createActions=new ArrayList<AnAction>();
  AddCompositeElementActionGroup.addCompositeCreateActions(createActions,this);
  for (  AnAction createAction : createActions) {
    popupActionGroup.add(createAction);
  }
  popupActionGroup.add(createAddAction(true));
  final RemovePackagingElementAction removeAction=new RemovePackagingElementAction(this);
  removeAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myLayoutTreeComponent.getTreePanel());
  popupActionGroup.add(removeAction);
  popupActionGroup.add(new ExtractArtifactAction(this));
  popupActionGroup.add(new InlineArtifactAction(this));
  popupActionGroup.add(new RenameCompositeElementAction(this));
  popupActionGroup.add(new ArtifactEditorNavigateAction(myLayoutTreeComponent));
  popupActionGroup.add(new ArtifactEditorFindUsagesAction(myLayoutTreeComponent,myProject));
  popupActionGroup.add(Separator.getInstance());
  CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  DefaultTreeExpander treeExpander=new DefaultTreeExpander(myLayoutTreeComponent.getTree());
  popupActionGroup.add(actionsManager.createExpandAllAction(treeExpander,myLayoutTreeComponent.getTree()));
  popupActionGroup.add(actionsManager.createCollapseAllAction(treeExpander,myLayoutTreeComponent.getTree()));
  PopupHandler.installPopupHandler(myLayoutTreeComponent.getTree(),popupActionGroup,ActionPlaces.UNKNOWN,ActionManager.getInstance());
  TreeToolTipHandler.install(myLayoutTreeComponent.getTree());
  ToolTipManager.sharedInstance().registerComponent(myLayoutTreeComponent.getTree());
  rebuildTries();
  return getMainComponent();
}
