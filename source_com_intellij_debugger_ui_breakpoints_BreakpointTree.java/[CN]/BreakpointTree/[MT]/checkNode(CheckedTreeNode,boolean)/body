{
  TreeUtil.traverseDepth(node,new TreeUtil.Traverse(){
    public boolean accept(    Object _node){
      CheckedTreeNode node=(CheckedTreeNode)_node;
      doCheckNode(node,checked);
      return true;
    }
  }
);
  boolean parentChecked=checked;
  for (CheckedTreeNode parent=(CheckedTreeNode)node.getParent(); parent != null; parent=(CheckedTreeNode)parent.getParent()) {
    if (!parentChecked) {
      final int childCount=parent.getChildCount();
      for (int idx=0; idx < childCount && !parentChecked; idx++) {
        parentChecked=((CheckedTreeNode)parent.getChildAt(idx)).isChecked();
      }
    }
    if (parentChecked == parent.isChecked()) {
      break;
    }
    doCheckNode(parent,parentChecked);
  }
}
