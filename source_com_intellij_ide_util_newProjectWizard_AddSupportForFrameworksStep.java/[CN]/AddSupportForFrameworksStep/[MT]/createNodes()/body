{
  final List<FrameworkSupportProvider> frameworkSupportProviders=getProviders(myBuilder.getModuleType());
  Map<String,FrameworkSupportSettings> nodes=new HashMap<String,FrameworkSupportSettings>();
  for (  FrameworkSupportProvider frameworkSupport : frameworkSupportProviders) {
    createNode(frameworkSupport,nodes);
  }
  myRoots=new ArrayList<FrameworkSupportSettings>();
  for (  FrameworkSupportSettings settings : nodes.values()) {
    if (settings.getParentNode() == null) {
      myRoots.add(settings);
    }
  }
  DFSTBuilder<FrameworkSupportProvider> builder=new DFSTBuilder<FrameworkSupportProvider>(GraphGenerator.create(CachingSemiGraph.create(new ProvidersGraph(frameworkSupportProviders))));
  if (!builder.isAcyclic()) {
    Pair<FrameworkSupportProvider,FrameworkSupportProvider> pair=builder.getCircularDependency();
    LOG.error("Circular dependency between providers '" + pair.getFirst().getId() + "' and '"+ pair.getSecond().getId()+ "' was found.");
  }
  final Comparator<FrameworkSupportProvider> comparator=builder.comparator();
  sortNodes(myRoots,new Comparator<FrameworkSupportSettings>(){
    public int compare(    final FrameworkSupportSettings o1,    final FrameworkSupportSettings o2){
      return comparator.compare(o1.getProvider(),o2.getProvider());
    }
  }
);
}
