{
  return with(new PatternCondition<T>(){
    public boolean accepts(    @NotNull final T t,    final MatchingContext matchingContext,    @NotNull final TraverseContext traverseContext){
      ParentType parent=t;
      for (int i=0; i < level; i++) {
        if (parent == null)         return false;
        parent=getParent(parent);
      }
      return pattern.accepts(parent,matchingContext,traverseContext);
    }
    public String toString(){
      return "withSuperParent(" + level + ", "+ pattern+ ")";
    }
  }
);
}
