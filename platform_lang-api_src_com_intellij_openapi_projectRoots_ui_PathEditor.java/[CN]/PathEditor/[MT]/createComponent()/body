{
  myList=new JBList(getListModel());
  myList.setCellRenderer(createListCellRenderer(myList));
  ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(myList).disableUpDownActions();
  toolbarDecorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final VirtualFile[] added=doAdd();
      if (added.length > 0) {
        setModified(true);
      }
      requestDefaultFocus();
      setSelectedRoots(added);
    }
  }
);
  toolbarDecorator.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      int[] idxs=myList.getSelectedIndices();
      doRemoveItems(idxs,myList);
    }
  }
);
  if (isShowUrlButton()) {
    AnActionButton specifyUrlButton=new AnActionButton(ProjectBundle.message("sdk.paths.specify.url.button"),PlatformIcons.TABLE_URL){
      @Override public void actionPerformed(      AnActionEvent e){
        onSpecifyUrlButtonClicked();
      }
    }
;
    specifyUrlButton.setShortcut(CustomShortcutSet.fromString("alt S"));
    specifyUrlButton.addCustomUpdater(new AnActionButtonUpdater(){
      @Override public boolean isEnabled(      AnActionEvent e){
        return myEnabled && !isUrlInserted();
      }
    }
);
    toolbarDecorator.addExtraAction(specifyUrlButton);
  }
  myPanel=toolbarDecorator.createPanel();
  myPanel.setBorder(null);
  ToolbarDecorator.findAddButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return myEnabled;
    }
  }
);
  ToolbarDecorator.findRemoveButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      Object[] values=getSelectedRoots();
      return values.length > 0 && myEnabled;
    }
  }
);
  return myPanel;
}
