{
  final SymbolicRefs refs=new SymbolicRefs();
  final GitRepository repositoryForRoot=GitRepositoryManager.getInstance(myProject).getRepositoryForRoot(myRoot);
  if (repositoryForRoot != null) {
    final GitBranchesCollection branches=repositoryForRoot.getBranches();
    final Set<GitBranch> localBranches=branches.getLocalBranches();
    for (    GitBranch localBranch : localBranches) {
      refs.addLocal(localBranch.getName());
    }
    final Set<GitBranch> remoteBranches=branches.getRemoteBranches();
    for (    GitBranch remoteBranch : remoteBranches) {
      String name=remoteBranch.getName();
      name=name.startsWith("remotes/") ? name.substring("remotes/".length()) : name;
      refs.addRemote(name);
      final GitBranch current=branches.getCurrentBranch();
      refs.setCurrent(current);
      if (current != null) {
        GitBranch tracked=current.tracked(myProject,myRoot);
        String fullName=tracked == null ? null : tracked.getFullName();
        fullName=fullName != null && fullName.startsWith(GitBranch.REFS_REMOTES_PREFIX) ? fullName.substring(GitBranch.REFS_REMOTES_PREFIX.length()) : fullName;
        refs.setTrackedRemote(fullName);
      }
      refs.setUsername(GitConfigUtil.getValue(myProject,myRoot,GitConfigUtil.USER_NAME));
    }
  }
 else {
    LOG.info("Can not load cached branches information");
  }
  return refs;
}
