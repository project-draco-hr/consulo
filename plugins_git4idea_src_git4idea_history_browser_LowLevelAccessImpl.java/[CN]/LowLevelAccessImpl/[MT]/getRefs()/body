{
  final CachedRefs refs=new CachedRefs();
  GitRepository repository=GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(myRoot);
  if (repository == null) {
    final File child=new File(myRoot.getPath(),GitUtil.DOT_GIT);
    if (!child.exists()) {
      throw new VcsException("No git repository in " + myRoot.getPath());
    }
    repository=GitRepositoryImpl.getLightInstance(myRoot,myProject,myProject);
    repository.getBranches();
  }
  GitBranchesCollection branches=repository.getBranches();
  refs.setCollection(branches);
  final GitBranch current=repository.getCurrentBranch();
  refs.setCurrentBranch(current);
  if (current != null) {
    GitBranch tracked=current.tracked(myProject,myRoot);
    String fullName=tracked == null ? null : tracked.getFullName();
    fullName=fullName != null && fullName.startsWith(GitBranch.REFS_REMOTES_PREFIX) ? fullName.substring(GitBranch.REFS_REMOTES_PREFIX.length()) : fullName;
    refs.setTrackedRemoteName(fullName);
  }
  refs.setUsername(GitConfigUtil.getValue(myProject,myRoot,GitConfigUtil.USER_NAME));
  final VcsRevisionNumber head=GitHistoryUtils.getCurrentRevision(myProject,new FilePathImpl(myRoot),"HEAD",true);
  refs.setHeadHash(AbstractHash.create(head.asString()));
  return refs;
}
