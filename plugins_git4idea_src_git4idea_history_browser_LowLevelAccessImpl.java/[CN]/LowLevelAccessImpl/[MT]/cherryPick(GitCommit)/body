{
  final GitLineHandler handler=new GitLineHandler(myProject,myRoot,GitCommand.CHERRY_PICK);
  handler.addParameters("-x","-n",commit.getHash().getValue());
  handler.endOptions();
  handler.setNoSSH(true);
  final AtomicBoolean conflict=new AtomicBoolean();
  handler.addLineListener(new GitLineHandlerAdapter(){
    public void onLineAvailable(    String line,    Key outputType){
      if (line.contains("after resolving the conflicts, mark the corrected paths")) {
        conflict.set(true);
      }
    }
  }
);
  handler.runInCurrentThread(null);
  if (conflict.get()) {
    new CherryPickConflictResolver(myProject,commit.getShortHash().getString(),commit.getAuthor(),commit.getSubject()).merge(Collections.singleton(myRoot));
  }
 else {
    final List<VcsException> errors=handler.errors();
    if (!errors.isEmpty()) {
      throw errors.get(0);
    }
  }
}
