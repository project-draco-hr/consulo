{
  final File ioFile=new File(myWorkingCopyRoot,filename);
  ioFile.getParentFile().mkdirs();
  ioFile.createNewFile();
  try {
    final SVNStatusClient readClient=new SVNStatusClient((ISVNRepositoryPool)null,new DefaultSVNOptions());
    final Semaphore semaphore=new Semaphore();
    final Semaphore semaphoreMain=new Semaphore();
    final Semaphore semaphoreWokeUp=new Semaphore();
    final AtomicReference<Boolean> wasUp=new AtomicReference<Boolean>(false);
    final ISVNStatusHandler handler=new ISVNStatusHandler(){
      @Override public void handleStatus(      SVNStatus status) throws SVNException {
        semaphore.waitFor();
        wasUp.set(true);
      }
    }
;
    semaphore.down();
    semaphoreMain.down();
    semaphoreWokeUp.down();
    final SVNException[] exception=new SVNException[1];
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          semaphoreMain.up();
          readClient.doStatus(myWorkingCopyRoot,true,false,true,false,handler);
          semaphoreWokeUp.up();
        }
 catch (        SVNException e) {
          exception[0]=e;
        }
      }
    }
).start();
    semaphoreMain.waitFor();
    try {
      Thread.sleep(5);
    }
 catch (    InterruptedException e) {
    }
    SVNWCClient client=new SVNWCClient((ISVNRepositoryPool)null,new DefaultSVNOptions());
    client.doAdd(ioFile.getParentFile(),true,false,true,true);
    semaphore.up();
    semaphoreWokeUp.waitFor();
    Assert.assertEquals(true,wasUp.get().booleanValue());
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    ioFile.delete();
  }
}
