{
  final Project project=getProject();
  final PsiDirectory psiDirectory=getValue();
  final VirtualFile directoryFile=psiDirectory.getVirtualFile();
  if (ProjectRootsUtil.isModuleContentRoot(directoryFile,project)) {
    ProjectFileIndex fi=ProjectRootManager.getInstance(project).getFileIndex();
    Module module=fi.getModuleForFile(directoryFile);
    data.setPresentableText(directoryFile.getName());
    if (module != null) {
      data.setOpenIcon(module.getModuleType().getNodeIcon(true));
      data.setClosedIcon(module.getModuleType().getNodeIcon(false));
      StringBuilder location=new StringBuilder();
      if (getParentValue() instanceof Project) {
        location.append(directoryFile.getPresentableUrl());
      }
      if (!Comparing.equal(module.getName(),directoryFile.getName())) {
        if (location.length() > 0) {
          location.append(", ");
        }
        location.append("Module '").append(module.getName()).append("'");
      }
      if (location.length() > 0) {
        data.setLocationString(location.toString());
      }
      return;
    }
  }
  final String name=getParentValue() instanceof Project ? psiDirectory.getVirtualFile().getPresentableUrl() : ProjectViewDirectoryHelper.getInstance(psiDirectory.getProject()).getNodeName(getSettings(),getParentValue(),psiDirectory);
  if (name == null) {
    setValue(null);
    return;
  }
  final VirtualFile virtualFile=psiDirectory.getVirtualFile();
  final boolean isWritable=virtualFile.isWritable();
  data.setPresentableText(name);
  if (ProjectRootsUtil.isModuleContentRoot(directoryFile,project) || ProjectRootsUtil.isLibraryRoot(directoryFile,project)) {
    final String locationString=directoryFile.getPresentableUrl();
    if (!locationString.equals(name)) {
      data.setLocationString(locationString);
    }
  }
 else {
    data.setLocationString(ProjectViewDirectoryHelper.getInstance(project).getLocationString(psiDirectory));
  }
  for (  final IconProvider provider : Extensions.getExtensions(IconProvider.EXTENSION_POINT_NAME)) {
    final Icon openIcon=provider.getIcon(psiDirectory,Iconable.ICON_FLAG_OPEN);
    if (openIcon != null) {
      final Icon closedIcon=provider.getIcon(psiDirectory,Iconable.ICON_FLAG_CLOSED);
      if (closedIcon != null) {
        data.setOpenIcon(addReadMark(openIcon,isWritable));
        data.setClosedIcon(addReadMark(closedIcon,isWritable));
        return;
      }
    }
  }
}
