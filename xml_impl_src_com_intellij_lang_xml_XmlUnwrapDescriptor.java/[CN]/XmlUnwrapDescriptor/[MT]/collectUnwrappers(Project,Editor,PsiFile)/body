{
  int offset=editor.getCaretModel().getOffset();
  PsiElement e1=file.findElementAt(offset);
  if (e1 != null) {
    Language language=e1.getParent().getLanguage();
    if (language != file.getLanguage()) {
      UnwrapDescriptor unwrapDescriptor=LanguageUnwrappers.INSTANCE.forLanguage(language);
      if (unwrapDescriptor != null && !(unwrapDescriptor instanceof XmlUnwrapDescriptor)) {
        return unwrapDescriptor.collectUnwrappers(project,editor,file);
      }
    }
  }
  List<Pair<PsiElement,Unwrapper>> result=new ArrayList<Pair<PsiElement,Unwrapper>>();
  FileViewProvider viewProvider=file.getViewProvider();
  for (  Language language : viewProvider.getLanguages()) {
    UnwrapDescriptor unwrapDescriptor=LanguageUnwrappers.INSTANCE.forLanguage(language);
    if (unwrapDescriptor instanceof XmlUnwrapDescriptor) {
      PsiElement e=viewProvider.findElementAt(offset,language);
      PsiElement tag=PsiTreeUtil.getParentOfType(e,XmlTag.class);
      while (tag != null) {
        if (XmlChildRole.START_TAG_END_FINDER.findChild(tag.getNode()) != null) {
          result.add(new Pair<PsiElement,Unwrapper>(tag,new XmlEnclosingTagUnwrapper()));
        }
        tag=PsiTreeUtil.getParentOfType(tag,XmlTag.class);
      }
    }
  }
  Collections.sort(result,new Comparator<Pair<PsiElement,Unwrapper>>(){
    @Override public int compare(    Pair<PsiElement,Unwrapper> o1,    Pair<PsiElement,Unwrapper> o2){
      return o2.first.getTextOffset() - o1.first.getTextOffset();
    }
  }
);
  return result;
}
