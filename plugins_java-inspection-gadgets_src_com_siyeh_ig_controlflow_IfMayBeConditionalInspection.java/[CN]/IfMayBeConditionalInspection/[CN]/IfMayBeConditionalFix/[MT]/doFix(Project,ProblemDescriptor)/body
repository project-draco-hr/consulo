{
  final PsiElement element=descriptor.getPsiElement();
  final PsiIfStatement ifStatement=(PsiIfStatement)element.getParent();
  final PsiStatement thenBranch=ifStatement.getThenBranch();
  final PsiStatement thenStatement=ControlFlowUtils.stripBraces(thenBranch);
  final PsiStatement elseBranch=ifStatement.getElseBranch();
  final PsiStatement elseStatement=ControlFlowUtils.stripBraces(elseBranch);
  final PsiExpression condition=ifStatement.getCondition();
  @NonNls final StringBuilder replacementText=new StringBuilder();
  if (thenStatement instanceof PsiReturnStatement) {
    final PsiReturnStatement elseReturn=(PsiReturnStatement)elseStatement;
    final PsiReturnStatement thenReturn=(PsiReturnStatement)thenStatement;
    replacementText.append("return ");
    appendExpressionText(condition,replacementText);
    replacementText.append('?');
    final PsiExpression thenReturnValue=thenReturn.getReturnValue();
    appendExpressionText(thenReturnValue,replacementText);
    replacementText.append(':');
    if (elseReturn != null) {
      final PsiExpression elseReturnValue=elseReturn.getReturnValue();
      appendExpressionText(elseReturnValue,replacementText);
    }
    replacementText.append(';');
  }
 else   if (thenStatement instanceof PsiExpressionStatement && elseStatement instanceof PsiExpressionStatement) {
    final PsiExpressionStatement thenExpressionStatement=(PsiExpressionStatement)thenStatement;
    final PsiExpressionStatement elseExpressionStatement=(PsiExpressionStatement)elseStatement;
    final PsiExpression thenExpression=thenExpressionStatement.getExpression();
    final PsiExpression elseExpression=elseExpressionStatement.getExpression();
    if (thenExpression instanceof PsiAssignmentExpression && elseExpression instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression thenAssignmentExpression=(PsiAssignmentExpression)thenExpression;
      final PsiExpression lhs=thenAssignmentExpression.getLExpression();
      replacementText.append(lhs.getText());
      final PsiJavaToken token=thenAssignmentExpression.getOperationSign();
      replacementText.append(token.getText());
      appendExpressionText(condition,replacementText);
      replacementText.append('?');
      final PsiExpression thenRhs=thenAssignmentExpression.getRExpression();
      appendExpressionText(thenRhs,replacementText);
      replacementText.append(':');
      final PsiAssignmentExpression elseAssignmentExpression=(PsiAssignmentExpression)elseExpression;
      final PsiExpression elseRhs=elseAssignmentExpression.getRExpression();
      appendExpressionText(elseRhs,replacementText);
      replacementText.append(';');
    }
 else     if (thenExpression instanceof PsiMethodCallExpression && elseExpression instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression thenMethodCallExpression=(PsiMethodCallExpression)thenExpression;
      final PsiMethodCallExpression elseMethodCallExpression=(PsiMethodCallExpression)elseExpression;
      final PsiReferenceExpression thenMethodExpression=thenMethodCallExpression.getMethodExpression();
      replacementText.append(thenMethodExpression.getText());
      replacementText.append('(');
      final PsiExpressionList thenArgumentList=thenMethodCallExpression.getArgumentList();
      final PsiExpression[] thenArguments=thenArgumentList.getExpressions();
      final PsiExpressionList elseArgumentList=elseMethodCallExpression.getArgumentList();
      final PsiExpression[] elseArguments=elseArgumentList.getExpressions();
      for (int i=0, length=thenArguments.length; i < length; i++) {
        if (i > 0) {
          replacementText.append(',');
        }
        final PsiExpression thenArgument=thenArguments[i];
        final PsiExpression elseArgument=elseArguments[i];
        if (EquivalenceChecker.expressionsAreEquivalent(thenArgument,elseArgument)) {
          replacementText.append(thenArgument.getText());
        }
 else {
          appendExpressionText(condition,replacementText);
          replacementText.append('?');
          appendExpressionText(thenArgument,replacementText);
          replacementText.append(':');
          appendExpressionText(elseArgument,replacementText);
        }
      }
      replacementText.append(");");
    }
 else {
      return;
    }
  }
  replaceStatement(ifStatement,replacementText.toString());
}
