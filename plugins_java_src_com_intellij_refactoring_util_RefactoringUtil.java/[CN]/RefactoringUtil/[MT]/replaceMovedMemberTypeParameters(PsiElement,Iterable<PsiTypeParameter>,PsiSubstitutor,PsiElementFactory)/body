{
  final Map<PsiElement,PsiElement> replacement=new LinkedHashMap<PsiElement,PsiElement>();
  for (  PsiTypeParameter parameter : parametersIterable) {
    PsiType substitutedType=substitutor.substitute(parameter);
    if (substitutedType == null) {
      substitutedType=TypeConversionUtil.erasure(factory.createType(parameter));
    }
    for (    PsiReference reference : ReferencesSearch.search(parameter,new LocalSearchScope(member))) {
      final PsiElement element=reference.getElement();
      final PsiElement parent=element.getParent();
      if (parent instanceof PsiTypeElement) {
        replacement.put(parent,factory.createTypeElement(substitutedType));
      }
 else       if (element instanceof PsiJavaCodeReferenceElement && substitutedType instanceof PsiClassType) {
        replacement.put(element,factory.createReferenceElementByType((PsiClassType)substitutedType));
      }
    }
  }
  for (  PsiElement element : replacement.keySet()) {
    if (element.isValid()) {
      element.replace(replacement.get(element));
    }
  }
}
