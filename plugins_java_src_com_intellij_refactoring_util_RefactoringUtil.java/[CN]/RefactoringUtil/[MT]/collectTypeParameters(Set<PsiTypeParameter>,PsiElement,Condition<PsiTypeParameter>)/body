{
  element.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      if (!reference.isQualified()) {
        final PsiElement resolved=reference.resolve();
        if (resolved instanceof PsiTypeParameter) {
          final PsiTypeParameter typeParameter=(PsiTypeParameter)resolved;
          if (PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,false) && filter.value(typeParameter)) {
            used.add(typeParameter);
          }
        }
      }
    }
    @Override public void visitExpression(    final PsiExpression expression){
      super.visitExpression(expression);
      final PsiType type=expression.getType();
      if (type != null) {
        final TypeParameterSearcher searcher=new TypeParameterSearcher();
        type.accept(searcher);
        for (        PsiTypeParameter typeParam : searcher.myTypeParams) {
          if (PsiTreeUtil.isAncestor(typeParam.getOwner(),element,false) && filter.value(typeParam)) {
            used.add(typeParam);
          }
        }
      }
    }
class TypeParameterSearcher extends PsiTypeVisitor<Boolean> {
      private final Set<PsiTypeParameter> myTypeParams=new java.util.HashSet<PsiTypeParameter>();
      public Boolean visitType(      final PsiType type){
        return false;
      }
      public Boolean visitArrayType(      final PsiArrayType arrayType){
        return arrayType.getComponentType().accept(this);
      }
      public Boolean visitClassType(      final PsiClassType classType){
        final PsiClass aClass=classType.resolve();
        if (aClass instanceof PsiTypeParameter) {
          myTypeParams.add((PsiTypeParameter)aClass);
        }
        final PsiType[] types=classType.getParameters();
        for (        final PsiType psiType : types) {
          psiType.accept(this);
        }
        return false;
      }
      public Boolean visitWildcardType(      final PsiWildcardType wildcardType){
        final PsiType bound=wildcardType.getBound();
        if (bound != null) {
          bound.accept(this);
        }
        return false;
      }
    }
  }
);
}
