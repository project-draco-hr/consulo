{
  AntElement element=(AntElement)psiElement;
  if (element instanceof AntStructuredElement) {
    final AntStructuredElement se=(AntStructuredElement)element;
    AntElement parent=se.getAntParent();
    AntTypeDefinition def=se.getTypeDefinition();
    final String name=se.getSourceElement().getName();
    if (def == null) {
      final Annotation annotation=holder.createErrorAnnotation(se,AntBundle.getMessage("undefined.element",name));
      boolean macroDefined=false;
      while (!(parent instanceof AntFile)) {
        if (parent instanceof AntTask && ((AntTask)parent).isMacroDefined()) {
          macroDefined=true;
          break;
        }
        parent=parent.getAntParent();
      }
      if (!macroDefined) {
        addMacrodefQuickFixes(annotation,se);
      }
    }
 else {
      checkValidAttributes(se,def,holder);
      if (!se.hasImportedTypeDefinition() && parent instanceof AntStructuredElement) {
        final AntStructuredElement pe=(AntStructuredElement)parent;
        final AntTypeDefinition parentDef=pe.getTypeDefinition();
        if (parentDef != null && parentDef.getNestedClassName(def.getTypeId()) == null) {
          final TextRange textRange=new TextRange(0,name.length()).shiftRight(se.getSourceElement().getTextOffset());
          holder.createErrorAnnotation(textRange,AntBundle.getMessage("nested.element.is.not.allowed.here",name));
        }
      }
    }
  }
  checkReferences(element,holder);
}
