{
  AntDomElement antElement=null;
  final XmlTag xmlTag=PsiTreeUtil.getParentOfType(psiElement,XmlTag.class,false);
  if (xmlTag != null) {
    antElement=AntSupport.getAntDomElement((xmlTag));
  }
  if (antElement == null) {
    return;
  }
  antElement.accept(new AntDomRecursiveVisitor(){
    public void visitTypeDef(    AntDomTypeDef typedef){
      if (typedef.hasTypeLoadingErrors()) {
        createAnnotationOnTag(typedef,AntBundle.message("failed.to.load.types"),holder);
      }
      super.visitTypeDef(typedef);
    }
    public void visitAntDomCustomElement(    AntDomCustomElement custom){
      if (custom.getDefinitionClass() == null) {
        final AntDomNamedElement declaringElement=custom.getDeclaringElement();
        if (declaringElement instanceof AntDomTypeDef) {
          String failedMessage=AntBundle.message("using.definition.which.type.failed.to.load");
          final String error=custom.getLoadError();
          if (error != null) {
            failedMessage=failedMessage + ": " + error;
          }
          createAnnotationOnTag(custom,failedMessage,holder);
        }
      }
      super.visitAntDomCustomElement(custom);
    }
    public void visitAntDomElement(    AntDomElement element){
      for (      GenericDomValue child : DomUtil.getDefinedChildrenOfType(element,GenericDomValue.class,false,true)) {
        final XmlElement valueElement=DomUtil.getValueElement(child);
        if (valueElement != null) {
          checkReferences(valueElement,holder);
        }
      }
      super.visitAntDomElement(element);
    }
  }
);
}
