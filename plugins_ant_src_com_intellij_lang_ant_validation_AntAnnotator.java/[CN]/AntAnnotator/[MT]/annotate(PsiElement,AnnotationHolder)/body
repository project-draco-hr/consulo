{
  if (!(psiElement instanceof AntElement))   return;
  AntElement element=(AntElement)psiElement;
  if (element instanceof AntStructuredElement) {
    final AntStructuredElement se=(AntStructuredElement)element;
    AntElement parent=se.getAntParent();
    AntTypeDefinition def=se.getTypeDefinition();
    final String name=se.getSourceElement().getName();
    final TextRange absoluteRange=new TextRange(0,name.length()).shiftRight(se.getSourceElement().getTextOffset() + 1);
    if (def == null) {
      final Annotation annotation=holder.createErrorAnnotation(absoluteRange,AntBundle.message("undefined.element",name));
      boolean defined=false;
      while (parent != null) {
        if (parent instanceof AntTask && ((AntTask)parent).isMacroDefined()) {
          defined=true;
          break;
        }
        parent=parent.getAntParent();
      }
      if (!defined) {
        addDefinitionQuickFixes(annotation,se);
      }
    }
 else {
      checkValidAttributes(se,def,holder);
      if (!se.hasImportedTypeDefinition() && parent instanceof AntStructuredElement) {
        final AntStructuredElement pe=(AntStructuredElement)parent;
        final AntTypeDefinition parentDef=pe.getTypeDefinition();
        if (parentDef != null && parentDef.getNestedClassName(def.getTypeId()) == null) {
          holder.createErrorAnnotation(absoluteRange,AntBundle.message("nested.element.is.not.allowed.here",name));
        }
      }
      if (se instanceof AntTypeDef) {
        final AntTypeDef td=(AntTypeDef)se;
        if (!td.typesLoaded()) {
          holder.createErrorAnnotation(absoluteRange,AntBundle.message("failed.to.load.types",name));
        }
      }
 else       if (se.isTypeDefined()) {
        final PsiElement de=def.getDefiningElement();
        if (de != null) {
          AntTypeDef td=(AntTypeDef)de;
          if (!td.typesLoaded()) {
            holder.createWarningAnnotation(absoluteRange,AntBundle.message("using.definition.which.type.failed.to.load",name));
          }
        }
      }
    }
  }
  checkReferences(element,holder);
}
