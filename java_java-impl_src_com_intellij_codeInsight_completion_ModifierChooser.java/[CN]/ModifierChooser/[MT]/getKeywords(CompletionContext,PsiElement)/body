{
  if (JavaCompletionData.INSIDE_SWITCH.isAcceptable(position,position)) {
    return ArrayUtil.EMPTY_STRING_ARRAY;
  }
  final List<String> ret=new ArrayList<String>();
  try {
    PsiElement scope;
    if (position == null) {
      scope=context.file;
    }
 else {
      scope=position.getParent();
    }
    final PsiModifierList list=getModifierList(position);
    scopes:     while (scope != null) {
      for (      final Object o : myMap.keySet()) {
        final ElementFilter filter=(ElementFilter)o;
        if (filter.isClassAcceptable(scope.getClass()) && filter.isAcceptable(scope,scope.getParent())) {
          final String[][] keywordSets=myMap.get(filter);
          for (int i=0; i < keywordSets.length; i++) {
            final String[] keywords=keywordSets[keywordSets.length - i - 1];
            boolean containModifierFlag=false;
            if (list != null) {
              for (              @Modifier String keyword : keywords) {
                if (list.hasExplicitModifier(keyword)) {
                  containModifierFlag=true;
                  break;
                }
              }
            }
            if (!containModifierFlag) {
              ContainerUtil.addAll(ret,keywords);
            }
          }
          break scopes;
        }
      }
      scope=scope.getParent();
      if (scope instanceof JspClassLevelDeclarationStatement) {
        scope=scope.getContext();
      }
      if (scope instanceof PsiDirectory)       break;
    }
  }
 catch (  Exception e) {
  }
  return ArrayUtil.toStringArray(ret);
}
