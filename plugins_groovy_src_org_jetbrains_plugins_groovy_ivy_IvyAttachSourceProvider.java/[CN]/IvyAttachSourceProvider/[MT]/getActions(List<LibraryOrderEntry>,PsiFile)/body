{
  VirtualFile jar=getJarByPsiFile(psiFile);
  if (jar == null)   return Collections.emptyList();
  VirtualFile jarsDir=jar.getParent();
  if (jarsDir == null || !jarsDir.getName().equals("jars"))   return Collections.emptyList();
  String jarNameWithoutExt=jar.getNameWithoutExtension();
  final VirtualFile artifactDir=jarsDir.getParent();
  if (artifactDir == null)   return Collections.emptyList();
  String artifactName=artifactDir.getName();
  if (!jarNameWithoutExt.startsWith(artifactName) || !jarNameWithoutExt.substring(artifactName.length()).startsWith("-")) {
    return Collections.emptyList();
  }
  String version=jarNameWithoutExt.substring(artifactName.length() + 1);
  VirtualFile propertiesFile=artifactDir.findChild("ivydata-" + version + ".properties");
  if (propertiesFile == null)   return Collections.emptyList();
  final Library library=getLibraryFromOrderEntriesList(orderEntries);
  if (library == null)   return null;
  final String sourceFileName=artifactName + '-' + version+ "-sources.jar";
  final VirtualFile sources=artifactDir.findChild("sources");
  if (sources != null) {
    VirtualFile srcFile=sources.findChild(sourceFileName);
    if (srcFile != null) {
      VirtualFile jarRoot=JarFileSystem.getInstance().getJarRootForLocalFile(srcFile);
      if (jarRoot == null || ArrayUtil.contains(jarRoot,library.getFiles(OrderRootType.SOURCES))) {
        return Collections.emptyList();
      }
      return Collections.<AttachSourcesAction>singleton(new AttachExistingSourceAction(jarRoot,library));
    }
  }
  PsiFile propertiesFileFile=psiFile.getManager().findFile(propertiesFile);
  if (!(propertiesFileFile instanceof PropertiesFile))   return Collections.emptyList();
  final String url=extractUrl((PropertiesFile)propertiesFileFile,artifactName);
  if (StringUtil.isEmptyOrSpaces(url))   return Collections.emptyList();
  return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction(){
    @Override public String getName(){
      return "Download Sources";
    }
    @Override public String getBusyText(){
      return "Downloading Sources...";
    }
    @Override public ActionCallback perform(    List<LibraryOrderEntry> orderEntriesContainingFile){
      final ActionCallback callback=new ActionCallback();
      Task task=new Task.Backgroundable(psiFile.getProject(),"Downloading sources...",true){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          final ByteArrayOutputStream out;
          try {
            LOG.info("Downloading sources jar: " + url);
            HttpConfigurable.getInstance().prepareURL(url);
            indicator.checkCanceled();
            HttpURLConnection urlConnection=(HttpURLConnection)new URL(url).openConnection();
            int contentLength=urlConnection.getContentLength();
            out=new ByteArrayOutputStream(contentLength > 0 ? contentLength : 100 * 1024);
            InputStream in=urlConnection.getInputStream();
            try {
              NetUtils.copyStreamContent(indicator,in,out,contentLength);
            }
  finally {
              in.close();
            }
          }
 catch (          IOException e) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                new Notification("Downloading Ivy Sources","Downloading failed","Failed to download sources: " + url,NotificationType.ERROR).notify(getProject());
                callback.setDone();
              }
            }
);
            return;
          }
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              AccessToken accessToken=WriteAction.start();
              try {
                VirtualFile existingSourcesFolder=sources;
                if (existingSourcesFolder == null) {
                  existingSourcesFolder=artifactDir.createChildDirectory(this,"sources");
                }
                VirtualFile srcFile=existingSourcesFolder.createChildData(this,sourceFileName);
                srcFile.setBinaryContent(out.toByteArray());
                addSourceFile(JarFileSystem.getInstance().getJarRootForLocalFile(srcFile),library);
              }
 catch (              IOException e) {
                new Notification("Downloading Ivy Sources","IO Error","Failed to save " + artifactDir.getPath() + "/sources/"+ sourceFileName,NotificationType.ERROR).notify(getProject());
              }
 finally {
                accessToken.finish();
                callback.setDone();
              }
            }
          }
);
        }
        @Override public void onCancel(){
          callback.setRejected();
        }
      }
;
      task.queue();
      return callback;
    }
  }
);
}
