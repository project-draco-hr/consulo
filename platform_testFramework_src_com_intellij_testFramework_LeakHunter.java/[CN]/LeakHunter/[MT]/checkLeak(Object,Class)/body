{
  if (SwingUtilities.isEventDispatchThread()) {
    UIUtil.dispatchAllInvocationEvents();
  }
 else {
    UIUtil.pump();
  }
  PersistentEnumerator.clearCacheForTests();
  toVisit.clear();
  visited.clear();
  toVisit.push(new BackLink(root.getClass(),root,null,null));
  try {
    walkObjects(new Processor<BackLink>(){
      @Override public boolean process(      BackLink backLink){
        UserDataHolder leaked=(UserDataHolder)backLink.value;
        if (leaked.getUserData(REPORTED_LEAKED) == null) {
          String place=leaked instanceof Project ? PlatformTestCase.getCreationPlace((Project)leaked) : "";
          System.out.println("LEAK: hash: " + System.identityHashCode(leaked) + "; place: "+ place);
          while (backLink != null) {
            String valueStr;
            try {
              valueStr=String.valueOf(backLink.value);
            }
 catch (            Exception e) {
              valueStr="(" + e.getMessage() + " while computing .toString())";
            }
            System.out.println("-->" + backLink.field + "; Value: "+ valueStr+ "; "+ backLink.aClass);
            backLink=backLink.backLink;
          }
          System.out.println(";-----");
          leaked.putUserData(REPORTED_LEAKED,Boolean.TRUE);
          throw new RuntimeException();
        }
        return true;
      }
    }
,suspectClass);
  }
  finally {
    visited.clear();
    ((THashSet)visited).compact();
    toVisit.clear();
    toVisit.trimToSize();
  }
}
