{
  while (true) {
    if (toVisit.isEmpty())     return;
    BackLink backLink=toVisit.pop();
    Object root=backLink.value;
    if (!visited.add(root))     continue;
    Class rootClass=backLink.aClass;
    for (    Field field : getAllFields(rootClass)) {
      String fieldName=field.getName();
      if (root instanceof Reference && "referent".equals(fieldName))       continue;
      Object value;
      try {
        value=field.get(root);
      }
 catch (      IllegalArgumentException e) {
        throw new RuntimeException(e);
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
      if (value == null)       continue;
      if (value instanceof PsiElement || value instanceof TreeElement) {
        int i=0;
      }
      Class valueClass=value.getClass();
      if (lookFor.isAssignableFrom(valueClass) && isReallyLeak(field,fieldName,value,valueClass)) {
        BackLink newBackLink=new BackLink(valueClass,value,field,backLink);
        leakProcessor.process(newBackLink);
      }
 else {
        BackLink newBackLink=new BackLink(valueClass,value,field,backLink);
        if (toFollow(valueClass)) {
          toVisit.push(newBackLink);
        }
      }
    }
    if (rootClass.isArray()) {
      if (toFollow(rootClass.getComponentType())) {
        try {
          for (          Object o : (Object[])root) {
            if (o == null)             continue;
            Class oClass=o.getClass();
            toVisit.push(new BackLink(oClass,o,null,backLink));
          }
        }
 catch (        ClassCastException ignored) {
        }
      }
    }
  }
}
