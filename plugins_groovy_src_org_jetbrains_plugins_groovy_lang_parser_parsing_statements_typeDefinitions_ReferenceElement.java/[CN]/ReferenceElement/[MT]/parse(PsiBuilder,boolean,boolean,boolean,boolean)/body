{
  PsiBuilder.Marker internalTypeMarker=builder.mark();
  String lastIdentifier=builder.getTokenText();
  if (!ParserUtils.getToken(builder,mIDENT)) {
    internalTypeMarker.rollbackTo();
    return WRONGWAY;
  }
  if (parseTypeArgs)   TypeArguments.parse(builder);
  internalTypeMarker.done(REFERENCE_ELEMENT);
  internalTypeMarker=internalTypeMarker.precede();
  while (mDOT.equals(builder.getTokenType())) {
    if ((ParserUtils.lookAhead(builder,mDOT,mSTAR) || ParserUtils.lookAhead(builder,mDOT,mNLS,mSTAR)) && forImport) {
      internalTypeMarker.drop();
      return REFERENCE_ELEMENT;
    }
    ParserUtils.getToken(builder,mDOT);
    if (forImport) {
      ParserUtils.getToken(builder,mNLS);
    }
    lastIdentifier=builder.getTokenText();
    if (!ParserUtils.getToken(builder,mIDENT)) {
      internalTypeMarker.rollbackTo();
      return WRONGWAY;
    }
    TypeArguments.parse(builder);
    internalTypeMarker.done(REFERENCE_ELEMENT);
    internalTypeMarker=internalTypeMarker.precede();
  }
  char firstChar;
  if (lastIdentifier != null)   firstChar=lastIdentifier.charAt(0);
 else   return WRONGWAY;
  if (checkUpperCase && (!Character.isUpperCase(firstChar) || DUMMY_IDENTIFIER.equals(lastIdentifier))) {
    internalTypeMarker.rollbackTo();
    return WRONGWAY;
  }
  if (forPackage || forImport) {
    internalTypeMarker.drop();
    return REFERENCE_ELEMENT;
  }
  internalTypeMarker.drop();
  return REFERENCE_ELEMENT;
}
