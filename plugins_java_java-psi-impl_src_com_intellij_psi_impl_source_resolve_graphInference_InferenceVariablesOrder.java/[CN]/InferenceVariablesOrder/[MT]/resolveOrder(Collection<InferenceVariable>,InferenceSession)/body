{
  Map<InferenceVariable,InferenceGraphNode<InferenceVariable>> nodes=new HashMap<InferenceVariable,InferenceGraphNode<InferenceVariable>>();
  for (  InferenceVariable var : vars) {
    nodes.put(var,new InferenceGraphNode<InferenceVariable>(var));
  }
  for (  InferenceVariable var : vars) {
    if (var.getInstantiation() != PsiType.NULL)     continue;
    final InferenceGraphNode<InferenceVariable> node=nodes.get(var);
    final Set<InferenceVariable> dependencies=var.getDependencies(session);
    for (    InferenceVariable dependentVariable : dependencies) {
      final InferenceGraphNode<InferenceVariable> dependency=nodes.get(dependentVariable);
      if (dependency != null) {
        node.addDependency(dependency);
      }
    }
  }
  final ArrayList<InferenceGraphNode<InferenceVariable>> acyclicNodes=initNodes(nodes.values());
  return ContainerUtil.map(acyclicNodes,new Function<InferenceGraphNode<InferenceVariable>,List<InferenceVariable>>(){
    @Override public List<InferenceVariable> fun(    InferenceGraphNode<InferenceVariable> node){
      return node.getValue();
    }
  }
);
}
