{
  currentNode.index=index;
  currentNode.lowlink=index;
  index++;
  currentStack.push(currentNode);
  for (  InferenceGraphNode<T> dependantNode : currentNode.getDependencies()) {
    if (dependantNode.index == -1) {
      strongConnect(dependantNode,index,currentStack,result);
      currentNode.lowlink=Math.min(currentNode.lowlink,dependantNode.lowlink);
    }
 else     if (currentStack.contains(dependantNode)) {
      currentNode.lowlink=Math.min(currentNode.lowlink,dependantNode.index);
    }
  }
  if (currentNode.lowlink == currentNode.index) {
    final ArrayList<InferenceGraphNode<T>> arrayList=new ArrayList<InferenceGraphNode<T>>();
    InferenceGraphNode<T> cyclicNode;
    do {
      cyclicNode=currentStack.pop();
      arrayList.add(cyclicNode);
    }
 while (cyclicNode != currentNode);
    result.add(arrayList);
  }
  return index;
}
