{
  final ClassFilter filter;
  if (ancestorClasses.length == 0) {
    filter=ClassFilter.ALL;
  }
 else {
    filter=new SubclassFilter(ancestorClasses);
  }
  final JPanel optionsPanel=new JPanel(new BorderLayout());
  final JBList list=new JBList(collection);
  final JPanel panel=ToolbarDecorator.createDecorator(list).disableUpDownActions().setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      final DataContext dataContext=DataManager.getInstance().getDataContext(list);
      final Project project=DataKeys.PROJECT.getData(dataContext);
      if (project == null) {
        return;
      }
      final TreeClassChooser chooser=TreeClassChooserFactory.getInstance(project).createNoInnerClassesScopeChooser(chooserTitle,GlobalSearchScope.allScope(project),filter,null);
      chooser.showDialog();
      final PsiClass selected=chooser.getSelected();
      if (selected == null) {
        return;
      }
      final String qualifiedName=selected.getQualifiedName();
      final DefaultListModel model=(DefaultListModel)list.getModel();
      final int index=model.indexOf(qualifiedName);
      if (index < 0) {
        model.addElement(qualifiedName);
        collection.add(qualifiedName);
      }
 else {
        list.setSelectedIndex(index);
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      final Object selectedValue=list.getSelectedValue();
      collection.remove(selectedValue);
      ListUtil.removeSelectedItems(list);
    }
  }
).createPanel();
  optionsPanel.setBorder(IdeBorderFactory.createTitledBorder(borderTitle,false,false,true,new Insets(10,0,0,0)));
  optionsPanel.add(panel);
  return optionsPanel;
}
