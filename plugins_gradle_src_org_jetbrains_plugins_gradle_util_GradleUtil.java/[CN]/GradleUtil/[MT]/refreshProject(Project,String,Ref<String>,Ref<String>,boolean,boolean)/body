{
  final Ref<ProjectData> gradleProject=new Ref<ProjectData>();
  final TaskUnderProgress refreshProjectStructureTask=new TaskUnderProgress(){
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored","IOResourceOpenedButNotSafelyClosed"}) @Override public void execute(    @NotNull ProgressIndicator indicator){
      GradleResolveProjectTask task=new GradleResolveProjectTask(project,gradleProjectPath,resolveLibraries);
      task.execute(indicator);
      gradleProject.set(task.getGradleProject());
      final Throwable error=task.getError();
      if (error == null) {
        return;
      }
      final String message=buildErrorMessage(error);
      if (StringUtil.isEmpty(message)) {
        errorMessageHolder.set(String.format("Can't resolve gradle project at '%s'. Reason: %s",gradleProjectPath,message));
      }
 else {
        errorMessageHolder.set(message);
      }
      errorDetailsHolder.set(extractDetails(error));
    }
  }
;
  final TaskUnderProgress refreshTasksTask=new TaskUnderProgress(){
    @Override public void execute(    @NotNull ProgressIndicator indicator){
      final GradleRefreshTasksListTask task=new GradleRefreshTasksListTask(project,gradleProjectPath);
      task.execute(indicator);
    }
  }
;
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      if (modal) {
        ProgressManager.getInstance().run(new Task.Modal(project,ExternalSystemBundle.message("gradle.import.progress.text"),false){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            refreshProjectStructureTask.execute(indicator);
            setTitle(ExternalSystemBundle.message("gradle.task.progress.initial.text"));
            refreshTasksTask.execute(indicator);
          }
        }
);
      }
 else {
        ProgressManager.getInstance().run(new Task.Backgroundable(project,ExternalSystemBundle.message("gradle.sync.progress.initial.text")){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            refreshProjectStructureTask.execute(indicator);
            setTitle(ExternalSystemBundle.message("gradle.task.progress.initial.text"));
            refreshTasksTask.execute(indicator);
          }
        }
);
      }
    }
  }
);
  return gradleProject.get();
}
