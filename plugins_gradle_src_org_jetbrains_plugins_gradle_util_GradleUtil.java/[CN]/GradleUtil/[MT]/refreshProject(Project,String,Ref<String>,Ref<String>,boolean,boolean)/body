{
  final Ref<ProjectData> gradleProject=new Ref<ProjectData>();
  final TaskUnderProgress refreshProjectStructureTask=new TaskUnderProgress(){
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored","IOResourceOpenedButNotSafelyClosed"}) @Override public void execute(    @NotNull ProgressIndicator indicator){
      GradleResolveProjectTask task=new GradleResolveProjectTask(project,gradleProjectPath,resolveLibraries);
      task.execute(indicator);
      gradleProject.set(task.getGradleProject());
      final Throwable error=task.getError();
      if (error == null) {
        return;
      }
    }
  }
;
  final TaskUnderProgress refreshTasksTask=new TaskUnderProgress(){
    @Override public void execute(    @NotNull ProgressIndicator indicator){
      final GradleRefreshTasksListTask task=new GradleRefreshTasksListTask(project,gradleProjectPath);
      task.execute(indicator);
    }
  }
;
  return gradleProject.get();
}
