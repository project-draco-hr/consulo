{
  final Ref<GradleProject> gradleProject=new Ref<GradleProject>();
  final TaskUnderProgress task=new TaskUnderProgress(){
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored","IOResourceOpenedButNotSafelyClosed"}) @Override public void execute(    @NotNull ProgressIndicator indicator){
      GradleResolveProjectTask task=new GradleResolveProjectTask(project,gradleProjectPath,resolveLibraries);
      task.execute(indicator);
      gradleProject.set(task.getProject());
      final Throwable error=task.getError();
      if (error == null) {
        return;
      }
      final String message=buildErrorMessage(error);
      errorHolder.set(String.format("Can't resolve gradle project at '%s'. Reason: %s",gradleProjectPath,message));
    }
  }
;
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      if (modal) {
        ProgressManager.getInstance().run(new Task.Modal(project,GradleBundle.message("gradle.import.progress.text"),true){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            task.execute(indicator);
          }
        }
);
      }
 else {
        ProgressManager.getInstance().run(new Task.Backgroundable(project,GradleBundle.message("gradle.sync.progress.text")){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            task.execute(indicator);
          }
        }
);
      }
    }
  }
);
  return gradleProject.get();
}
