{
  if (ApplicationManager.getApplication().isUnitTestMode())   return new Point();
  final int offset=editor.getCaretModel().getOffset();
  final VisualPosition pos=editor.offsetToVisualPosition(offset);
  int line=pos.line;
  final Point position=editor.visualPositionToXY(new VisualPosition(line,0));
  LOG.assertTrue(editor.getComponent().isDisplayable());
  JComponent convertComponent=editor.getContentComponent();
  Point realPoint;
  final boolean oneLineEditor=editor.isOneLineMode();
  if (oneLineEditor) {
    final JComponent contentComponent=editor.getContentComponent();
    Container ancestorOfClass=SwingUtilities.getAncestorOfClass(JComboBox.class,contentComponent);
    if (ancestorOfClass != null) {
      convertComponent=(JComponent)ancestorOfClass;
    }
 else {
      ancestorOfClass=SwingUtilities.getAncestorOfClass(JTextField.class,contentComponent);
      if (ancestorOfClass != null) {
        convertComponent=(JComponent)ancestorOfClass;
      }
    }
    realPoint=new Point(-(AllIcons.Actions.RealIntentionBulb.getIconWidth() / 2) - 4,-(AllIcons.Actions.RealIntentionBulb.getIconHeight() / 2));
  }
 else {
    int yShift=-(NORMAL_BORDER_SIZE + AllIcons.Actions.RealIntentionBulb.getIconHeight());
    if (canPlaceBulbOnTheSameLine(editor)) {
      final int borderHeight=NORMAL_BORDER_SIZE;
      yShift=-(borderHeight + (AllIcons.Actions.RealIntentionBulb.getIconHeight() - editor.getLineHeight()) / 2 + 3);
    }
    final int xShift=AllIcons.Actions.RealIntentionBulb.getIconWidth();
    Rectangle visibleArea=editor.getScrollingModel().getVisibleArea();
    realPoint=new Point(Math.max(0,visibleArea.x - xShift),position.y + yShift);
  }
  Point location=SwingUtilities.convertPoint(convertComponent,realPoint,editor.getComponent().getRootPane().getLayeredPane());
  return new Point(location.x,location.y);
}
