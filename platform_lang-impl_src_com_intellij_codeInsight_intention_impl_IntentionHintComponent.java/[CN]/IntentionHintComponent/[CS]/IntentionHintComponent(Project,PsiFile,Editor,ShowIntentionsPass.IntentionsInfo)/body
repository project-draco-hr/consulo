{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  myFile=file;
  myEditor=editor;
  setLayout(new BorderLayout());
  setOpaque(false);
  boolean showFix=false;
  for (  final HighlightInfo.IntentionActionDescriptor pairs : intentions.errorFixesToShow) {
    IntentionAction fix=pairs.getAction();
    if (IntentionManagerSettings.getInstance().isShowLightBulb(fix)) {
      showFix=true;
      break;
    }
  }
  Icon smartTagIcon=showFix ? ourQuickFixIcon : ourBulbIcon;
  myHighlightedIcon=new RowIcon(2);
  myHighlightedIcon.setIcon(smartTagIcon,0);
  myHighlightedIcon.setIcon(ourArrowIcon,1);
  myInactiveIcon=new RowIcon(2);
  myInactiveIcon.setIcon(smartTagIcon,0);
  myInactiveIcon.setIcon(ourInactiveArrowIcon,1);
  myIconLabel=new JLabel(myInactiveIcon);
  myIconLabel.setOpaque(false);
  add(myIconLabel,BorderLayout.CENTER);
  setBorder(editor.isOneLineMode() ? INACTIVE_BORDER_SMALL : INACTIVE_BORDER);
  myIconLabel.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (!e.isPopupTrigger() && e.getButton() == MouseEvent.BUTTON1) {
        showPopup();
      }
    }
    @Override public void mouseEntered(    MouseEvent e){
      onMouseEnter(editor.isOneLineMode());
    }
    @Override public void mouseExited(    MouseEvent e){
      onMouseExit(editor.isOneLineMode());
    }
  }
);
  myComponentHint=new MyComponentHint(this);
  IntentionListStep step=new IntentionListStep(this,intentions,myEditor,myFile,project);
  recreateMyPopup(step);
  EditorFactory.getInstance().addEditorFactoryListener(new EditorFactoryAdapter(){
    @Override public void editorReleased(    EditorFactoryEvent event){
      if (event.getEditor() == myEditor) {
        hide();
      }
    }
  }
,this);
}
