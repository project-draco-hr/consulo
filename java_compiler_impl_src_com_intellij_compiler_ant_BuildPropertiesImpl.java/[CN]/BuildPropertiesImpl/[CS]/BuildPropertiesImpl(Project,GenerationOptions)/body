{
  add(new Property(getPropertyFileName(project)));
  add(new Comment(CompilerBundle.message("generated.ant.build.disable.tests.property.comment"),new Property(PROPERTY_SKIP_TESTS,"true")));
  final JavacSettings javacSettings=JavacSettings.getInstance(project);
  if (genOptions.enableFormCompiler) {
    add(new Property(PROPERTY_JAVAC2_HOME,propertyRelativePath(PROPERTY_IDEA_HOME,"lib")));
    Path javac2=new Path(PROPERTY_JAVAC2_CLASSPATH_ID);
    javac2.add(new PathElement(propertyRelativePath(PROPERTY_JAVAC2_HOME,"javac2.jar")));
    javac2.add(new PathElement(propertyRelativePath(PROPERTY_JAVAC2_HOME,"jdom.jar")));
    javac2.add(new PathElement(propertyRelativePath(PROPERTY_JAVAC2_HOME,"asm.jar")));
    javac2.add(new PathElement(propertyRelativePath(PROPERTY_JAVAC2_HOME,"asm-commons.jar")));
    javac2.add(new PathElement(propertyRelativePath(PROPERTY_JAVAC2_HOME,"jgoodies-forms.jar")));
    add(javac2);
    add(new Tag("taskdef",Pair.create("name","javac2"),Pair.create("classname","com.intellij.ant.Javac2"),Pair.create("classpathref",PROPERTY_JAVAC2_CLASSPATH_ID)));
    add(new Tag("taskdef",Pair.create("name","instrumentIdeaExtensions"),Pair.create("classname","com.intellij.ant.InstrumentIdeaExtensions"),Pair.create("classpathref",PROPERTY_JAVAC2_CLASSPATH_ID)));
  }
  add(new Comment(CompilerBundle.message("generated.ant.build.compiler.options.comment")),1);
  add(new Property(PROPERTY_COMPILER_GENERATE_DEBUG_INFO,javacSettings.DEBUGGING_INFO ? "on" : "off"),1);
  add(new Property(PROPERTY_COMPILER_GENERATE_NO_WARNINGS,javacSettings.GENERATE_NO_WARNINGS ? "on" : "off"));
  add(new Property(PROPERTY_COMPILER_ADDITIONAL_ARGS,javacSettings.ADDITIONAL_OPTIONS_STRING));
  add(new Property(PROPERTY_COMPILER_MAX_MEMORY,Integer.toString(javacSettings.MAXIMUM_HEAP_SIZE) + "m"));
  add(new IgnoredFiles());
  if (CompilerExcludes.isAvailable(project)) {
    add(new CompilerExcludes(project,genOptions));
  }
  if (!genOptions.expandJarDirectories) {
    add(new LibraryPatterns(project,genOptions));
  }
  add(new CompilerResourcePatterns(project));
  if (genOptions.forceTargetJdk) {
    createJdkGenerators(project);
  }
  LibraryDefinitionsGeneratorFactory factory=new LibraryDefinitionsGeneratorFactory((ProjectEx)project,genOptions);
  final LibraryTablesRegistrar registrar=LibraryTablesRegistrar.getInstance();
  final Generator projectLibs=factory.create(registrar.getLibraryTable(project),getProjectBaseDir(project),CompilerBundle.message("generated.ant.build.project.libraries.comment"));
  if (projectLibs != null) {
    add(projectLibs);
  }
  final Generator globalLibs=factory.create(registrar.getLibraryTable(),null,CompilerBundle.message("generated.ant.build.global.libraries.comment"));
  if (globalLibs != null) {
    add(globalLibs);
  }
  for (  final LibraryTable table : registrar.getCustomLibraryTables()) {
    if (table.getLibraries().length != 0) {
      final Generator appServerLibs=factory.create(table,null,table.getPresentation().getDisplayName(true));
      if (appServerLibs != null) {
        add(appServerLibs);
      }
    }
  }
  final ChunkCustomCompilerExtension[] customCompilers=genOptions.getCustomCompilers();
  if (customCompilers.length > 0) {
    add(new Comment(CompilerBundle.message("generated.ant.build.custom.compilers.comment")),1);
    for (    ChunkCustomCompilerExtension ext : customCompilers) {
      ext.generateCustomCompilerTaskRegistration(project,genOptions,this);
    }
  }
}
