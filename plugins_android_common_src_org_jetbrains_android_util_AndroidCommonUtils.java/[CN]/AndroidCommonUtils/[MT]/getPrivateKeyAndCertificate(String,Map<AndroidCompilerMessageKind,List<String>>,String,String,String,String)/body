{
  if (keyStoreFilePath == null || keyStoreFilePath.length() == 0) {
    messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + "Key store file is not specified");
    return null;
  }
  if (keyStorePasswordStr == null) {
    messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + "Key store password is not specified");
    return null;
  }
  if (keyAlias == null || keyAlias.length() == 0) {
    messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + "Key alias is not specified");
    return null;
  }
  if (keyPasswordStr == null) {
    messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + "Key password is not specified");
    return null;
  }
  final File keyStoreFile=new File(keyStoreFilePath);
  final char[] keystorePassword=keyStorePasswordStr.toCharArray();
  final char[] plainKeyPassword=keyPasswordStr.toCharArray();
  final KeyStore keyStore;
  InputStream is=null;
  try {
    is=new FileInputStream(keyStoreFile);
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    keyStore.load(is,keystorePassword);
    final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(keyAlias,new KeyStore.PasswordProtection(plainKeyPassword));
    if (entry == null) {
      messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + AndroidCommonBundle.message("android.artifact.building.cannot.find.key.error",keyAlias));
      return null;
    }
    final PrivateKey privateKey=entry.getPrivateKey();
    final Certificate certificate=entry.getCertificate();
    if (privateKey == null || certificate == null) {
      messages.get(AndroidCompilerMessageKind.ERROR).add(errorPrefix + AndroidCommonBundle.message("android.artifact.building.cannot.find.key.error",keyAlias));
      return null;
    }
    return Pair.create(privateKey,(X509Certificate)certificate);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        LOG.info(e);
      }
    }
  }
}
