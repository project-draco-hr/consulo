{
  final BaseOSProcessHandler handler=new BaseOSProcessHandler(process,null,null);
  handler.addProcessListener(new ProcessAdapter(){
    private AndroidCompilerMessageKind myCategory=null;
    @Override public void onTextAvailable(    ProcessEvent event,    Key outputType){
      String[] msgs=event.getText().split("\\n");
      for (      String msg : msgs) {
        msg=msg.trim();
        String msglc=msg.toLowerCase();
        if (outputType == ProcessOutputTypes.STDERR) {
          if (WARNING_PATTERN.matcher(msglc).matches()) {
            myCategory=AndroidCompilerMessageKind.WARNING;
          }
          if (ERROR_PATTERN.matcher(msglc).matches() || EXCEPTION_PATTERN.matcher(msglc).matches() || myCategory == null) {
            myCategory=AndroidCompilerMessageKind.ERROR;
          }
          messages.get(myCategory).add(msg);
        }
 else         if (outputType == ProcessOutputTypes.STDOUT) {
          if (!msglc.startsWith("processing")) {
            messages.get(AndroidCompilerMessageKind.INFORMATION).add(msg);
          }
        }
        LOG.debug(msg);
      }
    }
  }
);
  handler.startNotify();
  handler.waitFor();
  final List<String> errors=messages.get(AndroidCompilerMessageKind.ERROR);
  if (new File(outputFilePath).isFile()) {
    messages.get(AndroidCompilerMessageKind.WARNING).addAll(errors);
    errors.clear();
  }
 else   if (errors.size() == 0) {
    errors.add("Cannot create classes.dex file");
  }
}
