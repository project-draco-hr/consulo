{
  final JavaResolveResult resolveResult=expression.advancedResolve(true);
  final boolean staticImported=resolveResult.getCurrentFileResolveScope() instanceof PsiImportStaticStatement;
  final PsiElement qualifier=expression.getQualifier();
  if (qualifier == null || qualifier instanceof PsiThisExpression) {
    final PsiElement referent=resolveResult.getElement();
    if (referent instanceof PsiField) {
      final PsiField field=(PsiField)referent;
      if (fieldIsExtracted(field)) {
        final String name=field.getName();
        if (enumConstantFields.contains(field)) {
          out.append(name).append(".").append(getterName()).append("()");
        }
 else {
          if (qualifier != null && name.equals(expression.getReferenceName())) {
            out.append("this.");
          }
          out.append(name);
        }
      }
 else {
        if (field.hasModifierProperty(PsiModifier.STATIC)) {
          if (field instanceof PsiEnumConstant) {
            out.append(field.getName());
          }
 else           if (staticImported) {
            final PsiImportStaticStatement importStaticStatement=(PsiImportStaticStatement)resolveResult.getCurrentFileResolveScope();
            final PsiClass targetClass=importStaticStatement.resolveTargetClass();
            out.append(targetClass != null ? targetClass.getQualifiedName() : "").append(".").append(field.getName());
          }
 else {
            out.append(originalClassName + '.' + field.getName());
          }
        }
 else {
          out.append(backPointerName + '.' + PropertyUtil.suggestGetterName(field.getProject(),field)+ "()");
        }
      }
    }
 else {
      visitElement(expression);
    }
  }
 else {
    visitElement(expression);
  }
}
