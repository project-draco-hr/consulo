{
  final List urls=new ArrayList();
  final File file=new File(args[0]);
  final BufferedReader reader=new BufferedReader(new FileReader(file));
  try {
    while (reader.ready()) {
      final String fileName=reader.readLine();
      try {
        urls.add(new File(fileName).toURI().toURL());
      }
 catch (      NoSuchMethodError e) {
        urls.add(new File(fileName).toURL());
      }
    }
  }
  finally {
    reader.close();
  }
  if (!file.delete())   file.deleteOnExit();
  int startArgsIdx=2;
  if (args[1].equals("@vm_params")) {
    startArgsIdx=4;
    final File vmParamsFile=new File(args[2]);
    final BufferedReader vmParamsReader=new BufferedReader(new FileReader(vmParamsFile));
    try {
      while (vmParamsReader.ready()) {
        final String vmParam=vmParamsReader.readLine().trim();
        final int eqIdx=vmParam.indexOf("=");
        String vmParamName;
        String vmParamValue;
        if (eqIdx > -1 && eqIdx < vmParam.length() - 1) {
          vmParamName=vmParam.substring(0,eqIdx);
          vmParamValue=vmParam.substring(eqIdx + 1);
        }
 else {
          vmParamName=vmParam;
          vmParamValue="";
        }
        vmParamName=vmParamName.trim();
        if (vmParamName.startsWith(PREFIX)) {
          vmParamName=vmParamName.substring(PREFIX.length());
          System.setProperty(vmParamName,vmParamValue);
        }
      }
    }
  finally {
      vmParamsReader.close();
    }
    if (!vmParamsFile.delete())     vmParamsFile.deleteOnExit();
  }
  String mainClassName=args[startArgsIdx - 1];
  String[] mainArgs=new String[args.length - startArgsIdx];
  System.arraycopy(args,startArgsIdx,mainArgs,0,mainArgs.length);
  ClassLoader loader=new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]),null);
  final String classLoader=System.getProperty("java.system.class.loader");
  if (classLoader != null) {
    try {
      loader=(ClassLoader)Class.forName(classLoader).getConstructor(new Class[]{ClassLoader.class}).newInstance(new Object[]{loader});
    }
 catch (    Exception e) {
    }
  }
  Class mainClass=loader.loadClass(mainClassName);
  Thread.currentThread().setContextClassLoader(loader);
  Class mainArgType=(new String[0]).getClass();
  Method main=mainClass.getMethod("main",new Class[]{mainArgType});
  ensureAccess(main);
  main.invoke(null,new Object[]{mainArgs});
}
