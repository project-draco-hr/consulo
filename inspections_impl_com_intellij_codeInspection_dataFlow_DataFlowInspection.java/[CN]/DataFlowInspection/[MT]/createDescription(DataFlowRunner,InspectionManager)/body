{
  HashSet<Instruction>[] constConditions=runner.getConstConditionalExpressions();
  HashSet<Instruction> trueSet=constConditions[0];
  HashSet<Instruction> falseSet=constConditions[1];
  Set<Instruction> npeSet=runner.getNPEInstructions();
  Set<Instruction> cceSet=runner.getCCEInstructions();
  Set<Instruction> redundantInstanceofs=runner.getRedundantInstanceofs();
  ArrayList<Instruction> allProblems=new ArrayList<Instruction>();
  allProblems.addAll(trueSet);
  allProblems.addAll(falseSet);
  allProblems.addAll(npeSet);
  allProblems.addAll(cceSet);
  allProblems.addAll(redundantInstanceofs);
  Collections.sort(allProblems,new Comparator(){
    public int compare(    Object o1,    Object o2){
      int i1=((Instruction)o1).getIndex();
      int i2=((Instruction)o2).getIndex();
      if (i1 == i2)       return 0;
      if (i1 > i2)       return 1;
      return -1;
    }
  }
);
  ArrayList<ProblemDescriptor> descriptions=new ArrayList<ProblemDescriptor>(allProblems.size());
  HashSet<PsiElement> reportedAnchors=new HashSet<PsiElement>();
  for (  Instruction instruction : allProblems) {
    if (instruction instanceof MethodCallInstruction) {
      MethodCallInstruction mcInstruction=(MethodCallInstruction)instruction;
      if (mcInstruction.getCallExpression() instanceof PsiMethodCallExpression) {
        PsiMethodCallExpression callExpression=(PsiMethodCallExpression)mcInstruction.getCallExpression();
        LocalQuickFix[] fix=createNPEFixes(callExpression.getMethodExpression().getQualifierExpression());
        descriptions.add(manager.createProblemDescriptor(mcInstruction.getCallExpression(),InspectionsBundle.message("dataflow.message.npe.method.invocation"),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
    }
 else     if (instruction instanceof FieldReferenceInstruction) {
      FieldReferenceInstruction frInstruction=(FieldReferenceInstruction)instruction;
      PsiElement elementToAssert=frInstruction.getElementToAssert();
      PsiExpression expression=frInstruction.getExpression();
      if (expression instanceof PsiArrayAccessExpression) {
        LocalQuickFix[] fix=createNPEFixes((PsiExpression)elementToAssert);
        descriptions.add(manager.createProblemDescriptor(expression,InspectionsBundle.message("dataflow.message.npe.array.access"),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
 else {
        LocalQuickFix[] fix=createNPEFixes((PsiExpression)elementToAssert);
        descriptions.add(manager.createProblemDescriptor(expression,InspectionsBundle.message("dataflow.message.npe.field.access"),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
    }
 else     if (instruction instanceof TypeCastInstruction) {
      TypeCastInstruction tcInstruction=(TypeCastInstruction)instruction;
      PsiTypeCastExpression typeCast=tcInstruction.getCastExpression();
      descriptions.add(manager.createProblemDescriptor(typeCast.getCastType(),InspectionsBundle.message("dataflow.message.cce",typeCast.getOperand().getText()),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
 else     if (instruction instanceof BranchingInstruction) {
      PsiElement psiAnchor=((BranchingInstruction)instruction).getPsiAnchor();
      if (instruction instanceof BinopInstruction && ((BinopInstruction)instruction).isInstanceofRedundant()) {
        if (((BinopInstruction)instruction).canBeNull()) {
          descriptions.add(manager.createProblemDescriptor(psiAnchor,InspectionsBundle.message("dataflow.message.redundant.instanceof"),new RedundantInstanceofFix(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
 else {
          final LocalQuickFix localQuickFix=createSimplifyBooleanExpressionFix(psiAnchor,true);
          descriptions.add(manager.createProblemDescriptor(psiAnchor,InspectionsBundle.message("dataflow.message.constant.condition",Boolean.toString(true)),localQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
 else       if (psiAnchor instanceof PsiSwitchLabelStatement) {
        if (falseSet.contains(instruction)) {
          descriptions.add(manager.createProblemDescriptor(psiAnchor,InspectionsBundle.message("dataflow.message.unreachable.switch.label"),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
 else       if (psiAnchor != null) {
        if (!reportedAnchors.contains(psiAnchor)) {
          if (onTheLeftSideOfConditionalAssignemnt(psiAnchor)) {
            descriptions.add(manager.createProblemDescriptor(psiAnchor,InspectionsBundle.message("dataflow.message.pointless.assignment.expression",Boolean.toString(trueSet.contains(instruction))),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
 else {
            final LocalQuickFix localQuickFix=createSimplifyBooleanExpressionFix(psiAnchor,trueSet.contains(instruction));
            descriptions.add(manager.createProblemDescriptor(psiAnchor,InspectionsBundle.message("dataflow.message.constant.condition",Boolean.toString(trueSet.contains(instruction))),localQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
          reportedAnchors.add(psiAnchor);
        }
      }
    }
  }
  Set<PsiExpression> exprs=runner.getNullableArguments();
  for (  PsiExpression expr : exprs) {
    final String text=isNullLiteralExpression(expr) ? InspectionsBundle.message("dataflow.message.passing.null.argument") : InspectionsBundle.message("dataflow.message.passing.nullable.argument");
    descriptions.add(manager.createProblemDescriptor(expr,text,(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
  }
  exprs=runner.getNullableAssignments();
  for (  PsiExpression expr : exprs) {
    final String text=isNullLiteralExpression(expr) ? InspectionsBundle.message("dataflow.message.assigning.null") : InspectionsBundle.message("dataflow.message.assigning.nullable");
    descriptions.add(manager.createProblemDescriptor(expr,text,(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
  }
  final HashSet<PsiReturnStatement> statements=runner.getNullableReturns();
  for (  PsiReturnStatement statement : statements) {
    final PsiExpression expr=statement.getReturnValue();
    if (runner.isInNotNullMethod()) {
      final String text=isNullLiteralExpression(expr) ? InspectionsBundle.message("dataflow.message.return.null.from.notnull") : InspectionsBundle.message("dataflow.message.return.nullable.from.notnull");
      descriptions.add(manager.createProblemDescriptor(expr,text,(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
 else     if (AnnotationUtil.isAnnotatingApplicable(statement)) {
      final String text=isNullLiteralExpression(expr) ? InspectionsBundle.message("dataflow.message.return.null.from.notnullable") : InspectionsBundle.message("dataflow.message.return.nullable.from.notnullable");
      descriptions.add(manager.createProblemDescriptor(expr,text,new AnnotateMethodFix(AnnotationUtil.NULLABLE),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
  }
  return descriptions.toArray(new ProblemDescriptor[descriptions.size()]);
}
