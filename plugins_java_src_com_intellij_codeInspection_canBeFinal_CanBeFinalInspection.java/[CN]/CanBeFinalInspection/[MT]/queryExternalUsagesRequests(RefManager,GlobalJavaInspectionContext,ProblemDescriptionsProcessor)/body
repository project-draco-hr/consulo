{
  for (  RefElement entryPoint : globalContext.getEntryPointsManager(manager).getEntryPoints()) {
    problemsProcessor.ignoreElement(entryPoint);
  }
  manager.iterate(new RefJavaVisitor(){
    @Override public void visitElement(    @NotNull RefEntity refEntity){
      if (problemsProcessor.getDescriptions(refEntity) == null)       return;
      refEntity.accept(new RefJavaVisitor(){
        @Override public void visitMethod(        @NotNull final RefMethod refMethod){
          if (!refMethod.isStatic() && !PsiModifier.PRIVATE.equals(refMethod.getAccessModifier()) && !(refMethod instanceof RefImplicitConstructor)) {
            globalContext.enqueueDerivedMethodsProcessor(refMethod,new GlobalJavaInspectionContext.DerivedMethodsProcessor(){
              @Override public boolean process(              PsiMethod derivedMethod){
                ((RefElementImpl)refMethod).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                problemsProcessor.ignoreElement(refMethod);
                return false;
              }
            }
);
          }
        }
        @Override public void visitClass(        @NotNull final RefClass refClass){
          if (!refClass.isAnonymous()) {
            globalContext.enqueueDerivedClassesProcessor(refClass,new GlobalJavaInspectionContext.DerivedClassesProcessor(){
              @Override public boolean process(              PsiClass inheritor){
                ((RefClassImpl)refClass).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                problemsProcessor.ignoreElement(refClass);
                return false;
              }
            }
);
          }
        }
        @Override public void visitField(        @NotNull final RefField refField){
          globalContext.enqueueFieldUsagesProcessor(refField,new GlobalJavaInspectionContext.UsagesProcessor(){
            @Override public boolean process(            PsiReference psiReference){
              PsiElement expression=psiReference.getElement();
              if (expression instanceof PsiReferenceExpression && PsiUtil.isAccessedForWriting((PsiExpression)expression)) {
                ((RefFieldImpl)refField).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                problemsProcessor.ignoreElement(refField);
                return false;
              }
              return true;
            }
          }
);
        }
      }
);
    }
  }
);
  return false;
}
