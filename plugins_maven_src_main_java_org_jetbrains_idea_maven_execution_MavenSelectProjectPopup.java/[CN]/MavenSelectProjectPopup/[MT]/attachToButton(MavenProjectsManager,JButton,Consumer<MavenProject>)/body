{
  button.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      List<MavenProject> projectList=projectsManager.getProjects();
      if (projectList.isEmpty()) {
        JBPopupFactory.getInstance().createMessage("Maven modules not found").showUnderneathOf(button);
        return;
      }
      DefaultMutableTreeNode root=buildTree(projectList);
      final Map<MavenProject,String> projectsNameMap=MavenProjectNamer.generateNameMap(projectList);
      final Tree projectTree=new Tree(root);
      projectTree.setRootVisible(false);
      projectTree.setCellRenderer(new NodeRenderer(){
        @Override public void customizeCellRenderer(        JTree tree,        Object value,        boolean selected,        boolean expanded,        boolean leaf,        int row,        boolean hasFocus){
          if (value instanceof DefaultMutableTreeNode) {
            MavenProject mavenProject=(MavenProject)((DefaultMutableTreeNode)value).getUserObject();
            value=projectsNameMap.get(mavenProject);
            setIcon(MavenIcons.MavenProject);
          }
          super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
        }
      }
);
      new TreeSpeedSearch(projectTree,new Convertor<TreePath,String>(){
        @Override public String convert(        TreePath o){
          Object lastPathComponent=o.getLastPathComponent();
          if (!(lastPathComponent instanceof DefaultMutableTreeNode))           return null;
          Object userObject=((DefaultMutableTreeNode)lastPathComponent).getUserObject();
          return projectsNameMap.get(userObject);
        }
      }
);
      final Ref<JBPopup> popupRef=new Ref<JBPopup>();
      Runnable clickCallBack=new Runnable(){
        @Override public void run(){
          TreePath path=projectTree.getSelectionPath();
          if (path == null)           return;
          Object lastPathComponent=path.getLastPathComponent();
          if (!(lastPathComponent instanceof DefaultMutableTreeNode))           return;
          Object object=((DefaultMutableTreeNode)lastPathComponent).getUserObject();
          if (object == null)           return;
          callback.consume((MavenProject)object);
          popupRef.get().closeOk(null);
        }
      }
;
      JBPopup popup=new PopupChooserBuilder(projectTree).setTitle("Select maven module").setResizable(true).setItemChoosenCallback(clickCallBack).setAutoselectOnMouseMove(true).setCloseOnEnter(false).createPopup();
      popupRef.set(popup);
      popup.showUnderneathOf(button);
    }
    private DefaultMutableTreeNode buildTree(    List<MavenProject> projectList){
      MavenProject[] projects=projectList.toArray(new MavenProject[projectList.size()]);
      Arrays.sort(projects,new MavenProjectNamer.MavenProjectComparator());
      Map<MavenProject,DefaultMutableTreeNode> projectsToNode=new HashMap<MavenProject,DefaultMutableTreeNode>();
      for (      MavenProject mavenProject : projects) {
        projectsToNode.put(mavenProject,new DefaultMutableTreeNode(mavenProject));
      }
      DefaultMutableTreeNode root=new DefaultMutableTreeNode();
      for (      MavenProject mavenProject : projects) {
        DefaultMutableTreeNode parent;
        MavenProject aggregator=projectsManager.findAggregator(mavenProject);
        if (aggregator != null) {
          parent=projectsToNode.get(aggregator);
        }
 else {
          parent=root;
        }
        parent.add(projectsToNode.get(mavenProject));
      }
      return root;
    }
  }
);
}
