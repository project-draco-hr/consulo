{
  myProgressButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (myProgressButton.getText().equals("Start")) {
        myProgressBar1.setIndeterminate(true);
        myProgressButton.setText("Stop");
      }
 else {
        myProgressBar1.setIndeterminate(false);
        myProgressButton.setText("Start");
      }
    }
  }
);
  myComboBox1.setRenderer(new ColoredListCellRendererWrapper<Object>(){
    @Override protected void doCustomize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      append(value.toString());
    }
  }
);
  myStartButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myStartButton.setEnabled(false);
      new Thread(){
        @Override public void run(){
          while (myProgressBar2.getValue() < 100) {
            try {
              sleep(20);
            }
 catch (            InterruptedException e1) {
            }
            myProgressBar2.setValue(myProgressBar2.getValue() + 1);
          }
          try {
            sleep(1000);
          }
 catch (          InterruptedException e1) {
          }
          myProgressBar2.setValue(0);
          myStartButton.setEnabled(true);
        }
      }
.start();
    }
  }
);
  List<String> items=new ArrayList<String>();
  for (int i=0; i < 100; i++) {
    items.add("Item" + i);
  }
  myList1.setModel(new CollectionListModel<String>(items));
  myList2.setModel(new CollectionListModel<String>(items));
  myList2.setCellRenderer(new ColoredListCellRendererWrapper<String>(){
    @Override protected void doCustomize(    JList list,    String value,    int index,    boolean selected,    boolean hasFocus){
      append(value,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    }
  }
);
}
