{
  final Set<GrAnnotation> grabs=new LinkedHashSet<GrAnnotation>();
  final Set<GrAnnotation> excludes=new THashSet<GrAnnotation>();
  final Set<GrAnnotation> resolvers=new THashSet<GrAnnotation>();
  file.acceptChildren(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element instanceof GrAnnotation) {
        GrAnnotation anno=(GrAnnotation)element;
        String qname=anno.getQualifiedName();
        if (GRAB_ANNO.equals(qname))         grabs.add(anno);
 else         if (GRAB_EXCLUDE_ANNO.equals(qname))         excludes.add(anno);
 else         if (GRAB_RESOLVER_ANNO.equals(qname))         resolvers.add(anno);
      }
      super.visitElement(element);
    }
  }
);
  Function<GrAnnotation,String> mapper=new Function<GrAnnotation,String>(){
    @Override public String fun(    GrAnnotation grAnnotation){
      return grAnnotation.getText();
    }
  }
;
  String common=StringUtil.join(excludes,mapper," ") + " " + StringUtil.join(resolvers,mapper," ");
  LinkedHashMap<String,String> result=new LinkedHashMap<String,String>();
  for (  GrAnnotation grab : grabs) {
    String grabText=grab.getText();
    result.put(grabText,(grabText + " " + common).trim());
  }
  return result;
}
