{
  myEditor=editor;
  myParameters=parameters;
  myHandler=handler;
  myContextOriginal=contextOriginal;
  myFreezeSemaphore=freezeSemaphore;
  myLookup=(LookupImpl)LookupManager.getInstance(editor.getProject()).createLookup(editor,LookupElement.EMPTY_ARRAY,"",new CompletionLookupArranger(parameters));
  if (editor.isOneLineMode()) {
    myLookup.setForceShowAsPopup(true);
    myLookup.setCancelOnClickOutside(true);
    myLookup.setCancelOnOtherWindowOpen(true);
    myLookup.setResizable(false);
    myLookup.setForceLightweightPopup(false);
  }
  myLookup.setFocused(handler.focusLookup);
  myLookup.addLookupListener(new LookupAdapter(){
    public void itemSelected(    LookupEvent event){
      lookupClosed();
      LookupElement item=event.getItem();
      if (item == null)       return;
      setMergeCommand();
      contextOriginal.setStartOffset(myEditor.getCaretModel().getOffset() - item.getLookupString().length());
      CodeCompletionHandlerBase.selectLookupItem(item,event.getCompletionChar(),contextOriginal,myLookup.getItems());
    }
    public void lookupCanceled(    final LookupEvent event){
      lookupClosed();
    }
  }
);
  myLookup.setCalculating(true);
  myQueue=new MergingUpdateQueue("completion lookup progress",200,true,myEditor.getContentComponent());
  ApplicationManager.getApplication().assertIsDispatchThread();
  registerItself();
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    scheduleAdvertising();
  }
  trackModifiers();
}
