{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (ApplicationManager.getApplication().isUnitTestMode() && !CompletionAutoPopupHandler.ourTestingAutopopup) {
    closeAndFinish(true);
    PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
    new CodeCompletionHandlerBase(myParameters.getCompletionType()).invokeCompletion(getProject(),myEditor,myParameters.getInvocationCount());
    return;
  }
  cancel();
  final CompletionProgressIndicator current=CompletionServiceImpl.getCompletionService().getCurrentCompletion();
  if (this != current) {
    LOG.error(current + "!=" + this);
  }
  hideAutopopupIfMeaningless();
  CompletionPhase oldPhase=CompletionServiceImpl.getCompletionPhase();
  if (oldPhase instanceof CompletionPhase.CommittingDocuments) {
    ((CompletionPhase.CommittingDocuments)oldPhase).replaced=true;
  }
  final CompletionPhase.CommittingDocuments phase=new CompletionPhase.CommittingDocuments(this,myEditor);
  CompletionServiceImpl.setCompletionPhase(phase);
  phase.ignoreCurrentDocumentChange();
  final Project project=getProject();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      CompletionAutoPopupHandler.runLaterWithCommitted(project,myEditor.getDocument(),new Runnable(){
        @Override public void run(){
          if (phase.checkExpired())           return;
          CompletionAutoPopupHandler.invokeCompletion(myParameters.getCompletionType(),isAutopopupCompletion(),project,myEditor,myParameters.getInvocationCount(),true);
        }
      }
);
    }
  }
,project.getDisposed());
}
