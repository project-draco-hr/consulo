{
  myState.assertDisposed();
  if (myState.areModifiersChanged() || ApplicationManager.getApplication().isUnitTestMode()) {
    return;
  }
  registerItself();
  final HintListener hintListener=new HintListener(){
    public void hintHidden(    final EventObject event){
      unregisterItself(true);
    }
  }
;
  final DocumentAdapter documentListener=new DocumentAdapter(){
    @Override public void beforeDocumentChange(    DocumentEvent e){
      unregisterItself(true);
    }
  }
;
  final SelectionListener selectionListener=new SelectionListener(){
    public void selectionChanged(    SelectionEvent e){
      unregisterItself(true);
    }
  }
;
  final CaretListener caretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      unregisterItself(true);
    }
  }
;
  final Document document=myEditor.getDocument();
  final SelectionModel selectionModel=myEditor.getSelectionModel();
  final CaretModel caretModel=myEditor.getCaretModel();
  if (hint != null) {
    hint.addHintListener(hintListener);
  }
  document.addDocumentListener(documentListener);
  selectionModel.addSelectionListener(selectionListener);
  caretModel.addCaretListener(caretListener);
  myState.goZombie(hint,new Runnable(){
    @Override public void run(){
      if (hint != null) {
        hint.removeHintListener(hintListener);
      }
      document.removeDocumentListener(documentListener);
      selectionModel.removeSelectionListener(selectionListener);
      caretModel.removeCaretListener(caretListener);
    }
  }
);
}
