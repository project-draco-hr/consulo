{
  if (modifiedClasses == null || modifiedClasses.size() == 0) {
    myProgress.addMessage(MessageCategory.INFORMATION,DebuggerBundle.message("status.hotswap.loaded.classes.up.to.date"));
    return;
  }
  VirtualMachineProxyImpl virtualMachineProxy=getDebugProcess().getVirtualMachineProxy();
  if (virtualMachineProxy == null)   return;
  virtualMachineProxy.suspend();
  final Project project=getDebugProcess().getProject();
  try {
    Map<ThreadReferenceProxyImpl,PsiMethod[]> methodsOnTheStack=getMethodsOnTheStack();
    Map redefineMap=new HashMap();
    int classN=0;
    for (Iterator iterator=modifiedClasses.keySet().iterator(); iterator.hasNext(); ) {
      classN++;
      String qualifiedName=(String)iterator.next();
      if (qualifiedName != null) {
        myProgress.setText(qualifiedName);
        myProgress.setFraction(classN / (double)modifiedClasses.size());
      }
      final HotSwapFile fileDescr=modifiedClasses.get(qualifiedName);
      byte[] buffer=ApplicationManager.getApplication().runReadAction(new Computable<byte[]>(){
        public byte[] compute(){
          return loadFile(fileDescr.file);
        }
      }
);
      redefineMap.clear();
      List classes=virtualMachineProxy.classesByName(qualifiedName);
      for (Iterator i=classes.iterator(); i.hasNext(); ) {
        ReferenceType reference=(ReferenceType)i.next();
        if (buffer == null) {
          myProgress.addMessage(MessageCategory.ERROR,DebuggerBundle.message("error.io.error"));
        }
        redefineMap.put(reference,buffer);
      }
      getDebugProcess().getVirtualMachineProxy().redefineClasses(redefineMap);
    }
    myProgress.setFraction(1);
    myProgress.addMessage(MessageCategory.INFORMATION,DebuggerBundle.message("status.classes.reloaded",modifiedClasses.size()));
    if (LOG.isDebugEnabled()) {
      LOG.debug("classes reloaded");
    }
    reportObsoleteFrames(methodsOnTheStack);
    if (LOG.isDebugEnabled()) {
      LOG.debug("obsolete frames reported");
    }
  }
 catch (  Throwable e) {
    processException(e);
  }
  DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
    public void run(){
      final BreakpointManager breakpointManager=(DebuggerManagerEx.getInstanceEx(project)).getBreakpointManager();
      breakpointManager.reloadBreakpoints();
      breakpointManager.updateAllRequests();
      if (LOG.isDebugEnabled()) {
        LOG.debug("requests updated");
        LOG.debug("time stamp set");
      }
      myDebuggerSession.refresh();
      getDebugProcess().getManagerThread().invokeLater(new DebuggerCommandImpl(){
        protected void action() throws Exception {
          try {
            getDebugProcess().getVirtualMachineProxy().resume();
          }
 catch (          Exception e) {
            processException(e);
          }
        }
      }
);
    }
  }
);
}
