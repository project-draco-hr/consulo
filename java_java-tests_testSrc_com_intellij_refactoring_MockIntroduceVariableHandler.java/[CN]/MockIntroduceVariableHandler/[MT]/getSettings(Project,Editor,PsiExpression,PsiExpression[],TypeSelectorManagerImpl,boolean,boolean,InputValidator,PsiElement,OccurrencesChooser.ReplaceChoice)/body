{
  final PsiType type=myLookForType ? findType(typeSelectorManager.getTypesForAll(),typeSelectorManager.getDefaultType()) : typeSelectorManager.getDefaultType();
  Assert.assertTrue(type.getInternalCanonicalText(),type.getInternalCanonicalText().equals(myExpectedTypeCanonicalName));
  IntroduceVariableSettings introduceVariableSettings=new IntroduceVariableSettings(){
    @Override public String getEnteredName(){
      return myName;
    }
    @Override public boolean isReplaceAllOccurrences(){
      return myReplaceAll && occurrences.length > 1;
    }
    @Override public boolean isDeclareFinal(){
      return myDeclareFinal || isReplaceAllOccurrences() && declareFinalIfAll;
    }
    @Override public boolean isReplaceLValues(){
      return myReplaceLValues;
    }
    @Override public PsiType getSelectedType(){
      return type;
    }
    @Override public boolean isOK(){
      return true;
    }
  }
;
  final boolean validationResult=validator.isOK(introduceVariableSettings);
  assertValidationResult(validationResult);
  return introduceVariableSettings;
}
