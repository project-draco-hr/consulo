{
  final PsiFile containingFile=element.getContainingFile();
  if (!JavaFxFileTypeFactory.isFxml(containingFile))   return;
  if (element instanceof XmlAttributeValue) {
    final PsiReference[] references=element.getReferences();
    if (!JavaFxPsiUtil.isExpressionBinding(((XmlAttributeValue)element).getValue())) {
      for (      PsiReference reference : references) {
        final PsiElement resolve=reference.resolve();
        if (resolve instanceof PsiMember) {
          if (!JavaFxPsiUtil.isVisibleInFxml((PsiMember)resolve)) {
            final String symbolPresentation="'" + SymbolPresentationUtil.getSymbolPresentableText(resolve) + "'";
            final Annotation annotation=holder.createErrorAnnotation(element,symbolPresentation + (resolve instanceof PsiClass ? " should be public" : " should be public or annotated with @FXML"));
            if (!(resolve instanceof PsiClass)) {
              annotation.registerUniversalFix(new AddAnnotationFix(JavaFxCommonClassNames.JAVAFX_FXML_ANNOTATION,(PsiMember)resolve,ArrayUtil.EMPTY_STRING_ARRAY),null,null);
            }
          }
        }
      }
    }
    if (references.length == 1 && references[0] instanceof JavaFxColorReference) {
      attachColorIcon(element,holder,StringUtil.stripQuotesAroundValue(element.getText()));
    }
  }
 else   if (element instanceof XmlAttribute) {
    final String attributeName=((XmlAttribute)element).getName();
    if (!FxmlConstants.FX_DEFAULT_PROPERTIES.contains(attributeName) && !((XmlAttribute)element).isNamespaceDeclaration() && JavaFxPsiUtil.isReadOnly(attributeName,((XmlAttribute)element).getParent())) {
      holder.createErrorAnnotation(element.getNavigationElement(),"Property '" + attributeName + "' is read-only");
    }
  }
}
