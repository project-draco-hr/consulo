{
  super(project,true);
  myProject=project;
  myLayoutDeviceManager=layoutDeviceManager;
  if (selectedConfig != null) {
    mySelectedDeviceConfigName=selectedConfig.getName();
    mySelectedDeviceName=selectedConfig.getDevice().getName();
  }
  setTitle(AndroidBundle.message("android.layout.preview.device.configurations.dialog.title"));
  myTable=new TreeTable(new ListTreeTableModel(new DefaultMutableTreeNode(),ColumnInfo.EMPTY_ARRAY));
  final ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTable);
  AnActionButton addButton=new AnActionButton(AndroidBundle.message("android.layout.preview.device.configurations.dialog.add.button"),null,IconUtil.getAddIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      doAdd();
    }
  }
;
  addButton.setShortcut(CustomShortcutSet.fromString("alt A","INSERT"));
  myEditButton=new AnActionButton(AndroidBundle.message("android.layout.preview.device.configurations.dialog.edit.button"),null,IconUtil.getEditIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      doEdit();
    }
  }
;
  myEditButton.setShortcut(CustomShortcutSet.fromString("alt E"));
  myRemoveButton=new AnActionButton(AndroidBundle.message("android.layout.preview.device.configurations.dialog.remove.button"),null,IconUtil.getRemoveIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      doRemove();
    }
  }
;
  myRemoveButton.setShortcut(CustomShortcutSet.fromString("alt DELETE"));
  decorator.addExtraAction(addButton);
  decorator.addExtraAction(myEditButton);
  decorator.addExtraAction(myRemoveButton);
  myContentPanel=new JPanel(new BorderLayout());
  myContentPanel.add(decorator.createPanel(),BorderLayout.CENTER);
  myContentPanel.setPreferredSize(new Dimension(750,750));
  updateTable(selectedConfig);
  final TreeTableTree tree=myTable.getTree();
  tree.setCellRenderer(new JBDefaultTreeCellRenderer(tree){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value != null) {
        final Object obj=((DefaultMutableTreeNode)value).getUserObject();
        if (obj instanceof LayoutDevice) {
          value=((LayoutDevice)obj).getName();
        }
 else         if (obj instanceof LayoutDeviceConfiguration) {
          value=((LayoutDeviceConfiguration)obj).getName();
        }
      }
      setLeafIcon(null);
      setOpenIcon(null);
      setClosedIcon(null);
      return super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
    }
  }
);
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  myTable.getColumn(CONFIGURATION_COLUMN_NAME).setPreferredWidth(400);
  myTable.setRowHeight(23);
  myTable.getColumn(CONFIGURATION_COLUMN_NAME).setCellRenderer(new DefaultTableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      if (value instanceof LayoutDeviceConfiguration) {
        value=((LayoutDeviceConfiguration)value).getConfiguration().toDisplayString();
      }
      return super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
    }
  }
);
  myTable.setRootVisible(false);
  tree.setShowsRootHandles(true);
  myTable.setEnableAntialiasing(true);
  updateButtons();
  init();
}
