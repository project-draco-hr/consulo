{
  Component focusOwner=myContext.getFocusOwner();
  boolean isModalContext=myContext.isModalContext();
  DataContext dataContext=myContext.getDataContext();
  KeyEvent e=myContext.getInputEvent();
  if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) {
    final InputContext inputContext=focusOwner.getInputContext();
    if (inputContext != null) {
      @NonNls final String language=inputContext.getLocale().getLanguage();
      if (ALT_GR_LAYOUTS.contains(language)) {
        return false;
      }
    }
  }
  KeyStroke originalKeyStroke=KeyStroke.getKeyStrokeForEvent(e);
  KeyStroke keyStroke=getKeyStrokeWithoutMouseModifiers(originalKeyStroke);
  if (myKeyGestureProcessor.processInitState()) {
    return true;
  }
  if (SystemInfo.isMac) {
    if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (e.getID() == KeyEvent.KEY_PRESSED && hasMnemonicInWindow(focusOwner,e.getKeyCode()) || e.getID() == KeyEvent.KEY_TYPED && hasMnemonicInWindow(focusOwner,e.getKeyChar()))) {
      setPressedWasProcessed(true);
      setState(KeyState.STATE_PROCESSED);
      return false;
    }
  }
  updateCurrentContext(focusOwner,new KeyboardShortcut(keyStroke,null),isModalContext);
  if (myContext.getActions().isEmpty()) {
    return false;
  }
  if (myContext.isHasSecondStroke()) {
    myFirstKeyStroke=keyStroke;
    final ArrayList<Pair<AnAction,KeyStroke>> secondKeyStrokes=getSecondKeystrokeActions();
    final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
    StringBuilder message=new StringBuilder();
    message.append(KeyMapBundle.message("prefix.key.pressed.message"));
    message.append(' ');
    for (int i=0; i < secondKeyStrokes.size(); i++) {
      Pair<AnAction,KeyStroke> pair=secondKeyStrokes.get(i);
      if (i > 0)       message.append(", ");
      message.append(pair.getFirst().getTemplatePresentation().getText());
      message.append(" (");
      message.append(KeymapUtil.getKeystrokeText(pair.getSecond()));
      message.append(")");
    }
    StatusBar.Info.set(message.toString(),project);
    mySecondStrokeTimeout.cancelAllRequests();
    mySecondStrokeTimeout.addRequest(mySecondStrokeTimeoutRunnable,Registry.intValue("actionSystem.secondKeystrokeTimout"));
    if (Registry.is("actionSystem.secondKeystrokeAutoPopupEnabled")) {
      mySecondKeystrokePopupTimeout.cancelAllRequests();
      if (secondKeyStrokes.size() > 1) {
        final DataContext oldContext=myContext.getDataContext();
        mySecondKeystrokePopupTimeout.addRequest(new Runnable(){
          @Override public void run(){
            if (myState == KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE) {
              StatusBar.Info.set(null,PlatformDataKeys.PROJECT.getData(oldContext));
              new SecondaryKeystrokePopup(myFirstKeyStroke,secondKeyStrokes,oldContext).showInBestPositionFor(oldContext);
            }
          }
        }
,Registry.intValue("actionSystem.secondKeystrokePopupTimeout"));
      }
    }
    setState(KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE);
    return true;
  }
 else {
    return processAction(e,myActionProcessor);
  }
}
