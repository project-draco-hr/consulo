{
  Component focusOwner=myContext.getFocusOwner();
  boolean isModalContext=myContext.isModalContext();
  DataContext dataContext=myContext.getDataContext();
  KeyEvent e=myContext.getInputEvent();
  if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) {
    final InputContext inputContext=focusOwner.getInputContext();
    if (inputContext != null) {
      @NonNls final String language=inputContext.getLocale().getLanguage();
      if (language.equals("pl") || language.equals("de") || language.equals("fi")|| language.equals("fr")|| language.equals("no")|| language.equals("da")|| language.equals("se")|| language.equals("pt")|| language.equals("nl")|| language.equals("tr")|| language.equals("sl")|| language.equals("hu")) {
        return false;
      }
    }
  }
  KeyStroke originalKeyStroke=KeyStroke.getKeyStrokeForEvent(e);
  KeyStroke keyStroke=getKeyStrokeWithoutMouseModifiers(originalKeyStroke);
  if (myKeyGestureProcessor.processInitState())   return true;
  if (SystemInfo.isMac) {
    if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (e.getID() == KeyEvent.KEY_PRESSED && hasMnemonicInWindow(focusOwner,e.getKeyCode()) || e.getID() == KeyEvent.KEY_TYPED && hasMnemonicInWindow(focusOwner,e.getKeyChar()))) {
      setPressedWasProcessed(true);
      setState(STATE_PROCESSED);
      return false;
    }
  }
  updateCurrentContext(focusOwner,new KeyboardShortcut(keyStroke,null),isModalContext);
  if (myContext.getActions().isEmpty()) {
    return false;
  }
  if (myContext.isHasSecondStroke()) {
    myFirstKeyStroke=keyStroke;
    ArrayList<Pair<AnAction,KeyStroke>> secondKeyStorkes=new ArrayList<Pair<AnAction,KeyStroke>>();
    for (    AnAction action : myContext.getActions()) {
      Shortcut[] shortcuts=action.getShortcutSet().getShortcuts();
      for (      Shortcut shortcut : shortcuts) {
        if (shortcut instanceof KeyboardShortcut) {
          KeyboardShortcut keyShortcut=(KeyboardShortcut)shortcut;
          if (keyShortcut.getFirstKeyStroke().equals(myFirstKeyStroke)) {
            secondKeyStorkes.add(new Pair<AnAction,KeyStroke>(action,keyShortcut.getSecondKeyStroke()));
          }
        }
      }
    }
    Project project=PlatformDataKeys.PROJECT.getData(dataContext);
    StringBuilder message=new StringBuilder();
    message.append(KeyMapBundle.message("prefix.key.pressed.message"));
    message.append(' ');
    for (int i=0; i < secondKeyStorkes.size(); i++) {
      Pair<AnAction,KeyStroke> pair=secondKeyStorkes.get(i);
      if (i > 0)       message.append(", ");
      message.append(pair.getFirst().getTemplatePresentation().getText());
      message.append(" (");
      message.append(KeymapUtil.getKeystrokeText(pair.getSecond()));
      message.append(")");
    }
    WindowManager.getInstance().getStatusBar(project).setInfo(message.toString());
    setState(STATE_WAIT_FOR_SECOND_KEYSTROKE);
    return true;
  }
 else {
    return processAction(e,myActionProcessor);
  }
}
