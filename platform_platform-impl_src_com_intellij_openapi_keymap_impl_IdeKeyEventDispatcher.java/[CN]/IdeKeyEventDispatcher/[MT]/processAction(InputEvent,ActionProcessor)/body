{
  ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
  final Project project=CommonDataKeys.PROJECT.getData(myContext.getDataContext());
  final boolean dumb=project != null && DumbService.getInstance(project).isDumb();
  List<AnActionEvent> nonDumbAwareAction=new ArrayList<AnActionEvent>();
  List<AnAction> actions=myContext.getActions();
  for (  final AnAction action : actions) {
    Presentation presentation=myPresentationFactory.getPresentation(action);
    final AnActionEvent actionEvent=processor.createEvent(e,myContext.getDataContext(),ActionPlaces.MAIN_MENU,presentation,ActionManager.getInstance());
    ActionUtil.performDumbAwareUpdate(action,actionEvent,true);
    if (dumb && !action.isDumbAware()) {
      if (!Boolean.FALSE.equals(presentation.getClientProperty(ActionUtil.WOULD_BE_ENABLED_IF_NOT_DUMB_MODE))) {
        nonDumbAwareAction.add(actionEvent);
      }
      continue;
    }
    if (!presentation.isEnabled()) {
      continue;
    }
    processor.onUpdatePassed(e,action,actionEvent);
    ((DataManagerImpl.MyDataContext)myContext.getDataContext()).setEventCount(IdeEventQueue.getInstance().getEventCount(),this);
    actionManager.fireBeforeActionPerformed(action,actionEvent.getDataContext(),actionEvent);
    Component component=PlatformDataKeys.CONTEXT_COMPONENT.getData(actionEvent.getDataContext());
    if (component != null && !component.isShowing()) {
      return true;
    }
    processor.performAction(e,action,actionEvent);
    actionManager.fireAfterActionPerformed(action,actionEvent.getDataContext(),actionEvent);
    return true;
  }
  if (!nonDumbAwareAction.isEmpty()) {
    showDumbModeWarningLaterIfNobodyConsumesEvent(e,nonDumbAwareAction.toArray(new AnActionEvent[nonDumbAwareAction.size()]));
  }
  return false;
}
