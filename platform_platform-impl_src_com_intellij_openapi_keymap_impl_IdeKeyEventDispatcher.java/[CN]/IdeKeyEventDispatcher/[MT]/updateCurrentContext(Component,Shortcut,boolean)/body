{
  myContext.setFoundComponent(null);
  myContext.getActions().clear();
  if (isControlEnterOnDialog(component,sc))   return myContext;
  boolean hasSecondStroke=false;
  for (; component != null; component=component.getParent()) {
    if (!(component instanceof JComponent)) {
      continue;
    }
    List<AnAction> listOfActions=ActionUtil.getActions((JComponent)component);
    if (listOfActions.isEmpty()) {
      continue;
    }
    for (    Object listOfAction : listOfActions) {
      if (!(listOfAction instanceof AnAction)) {
        continue;
      }
      AnAction action=(AnAction)listOfAction;
      hasSecondStroke|=addAction(action,sc);
    }
    if (!myContext.getActions().isEmpty()) {
      myContext.setFoundComponent((JComponent)component);
      break;
    }
  }
  Keymap keymap=KeymapManager.getInstance().getActiveKeymap();
  String[] actionIds=keymap.getActionIds(sc);
  ActionManager actionManager=ActionManager.getInstance();
  for (  String actionId : actionIds) {
    AnAction action=actionManager.getAction(actionId);
    if (action != null) {
      if (isModalContext && !action.isEnabledInModalContext()) {
        continue;
      }
      hasSecondStroke|=addAction(action,sc);
    }
  }
  if (!hasSecondStroke && sc instanceof KeyboardShortcut) {
    final KeyboardShortcut keyboardShortcut=(KeyboardShortcut)sc;
    final KeyStroke firstKeyStroke=keyboardShortcut.getFirstKeyStroke();
    final KeyStroke secondKeyStroke=keyboardShortcut.getSecondKeyStroke();
    if (secondKeyStroke != null && secondKeyStroke.getModifiers() != 0 && firstKeyStroke.getModifiers() != 0) {
      final KeyboardShortcut altShortCut=new KeyboardShortcut(firstKeyStroke,KeyStroke.getKeyStroke(secondKeyStroke.getKeyCode(),0));
      final String[] additionalActions=keymap.getActionIds(altShortCut);
      for (      final String actionId : additionalActions) {
        AnAction action=actionManager.getAction(actionId);
        if (action != null) {
          if (isModalContext && !action.isEnabledInModalContext()) {
            continue;
          }
          hasSecondStroke|=addAction(action,altShortCut);
        }
      }
    }
  }
  myContext.setHasSecondStroke(hasSecondStroke);
  final List<AnAction> actions=myContext.getActions();
  if (actions.size() > 1) {
    final List<AnAction> readOnlyActions=Collections.unmodifiableList(actions);
    for (    ActionPromoter promoter : ActionPromoter.EP_NAME.getExtensions()) {
      final List<AnAction> promoted=promoter.promote(readOnlyActions,myContext.getDataContext());
      if (promoted.isEmpty())       continue;
      actions.removeAll(promoted);
      actions.addAll(0,promoted);
    }
  }
  return myContext;
}
