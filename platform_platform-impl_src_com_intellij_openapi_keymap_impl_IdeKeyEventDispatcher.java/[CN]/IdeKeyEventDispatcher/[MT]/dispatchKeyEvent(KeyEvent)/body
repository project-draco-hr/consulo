{
  if (myDisposed)   return false;
  if (e.isConsumed()) {
    return false;
  }
  if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
    if (e.getID() == KeyEvent.KEY_PRESSED) {
      myLeftCtrlPressed=e.getKeyLocation() == KeyEvent.KEY_LOCATION_LEFT;
    }
 else     if (e.getID() == KeyEvent.KEY_RELEASED) {
      myLeftCtrlPressed=false;
    }
  }
 else   if (e.getKeyCode() == KeyEvent.VK_ALT) {
    if (e.getID() == KeyEvent.KEY_PRESSED) {
      myRightAltPressed=e.getKeyLocation() == KeyEvent.KEY_LOCATION_RIGHT;
    }
 else     if (e.getID() == KeyEvent.KEY_RELEASED) {
      myRightAltPressed=false;
    }
  }
  KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  Component focusOwner=focusManager.getFocusOwner();
  if (focusOwner instanceof ShortcutTextField) {
    return false;
  }
  MenuSelectionManager menuSelectionManager=MenuSelectionManager.defaultManager();
  MenuElement[] selectedPath=menuSelectionManager.getSelectedPath();
  if (selectedPath.length > 0) {
    if (!(selectedPath[0] instanceof ComboPopup)) {
      setState(STATE_PROCESSED);
      setPressedWasProcessed(true);
      return false;
    }
  }
  Window focusedWindow=focusManager.getFocusedWindow();
  boolean isModalContext=focusedWindow != null && isModalContext(focusedWindow);
  final DataManager dataManager=DataManager.getInstance();
  if (dataManager == null)   return false;
  DataContext dataContext=dataManager.getDataContext();
  myContext.setDataContext(dataContext);
  myContext.setFocusOwner(focusOwner);
  myContext.setModalContext(isModalContext);
  myContext.setInputEvent(e);
  if (getState() == STATE_INIT) {
    return inInitState();
  }
 else   if (getState() == STATE_PROCESSED) {
    return inProcessedState();
  }
 else   if (getState() == STATE_WAIT_FOR_SECOND_KEYSTROKE) {
    return inWaitForSecondStrokeState();
  }
 else   if (getState() == STATE_SECOND_STROKE_IN_PROGRESS) {
    return inSecondStrokeInProgressState();
  }
 else   if (getState() == STATE_KEY_GESTURE_PROCESSOR) {
    return myKeyGestureProcessor.process();
  }
 else {
    throw new IllegalStateException("state = " + getState());
  }
}
