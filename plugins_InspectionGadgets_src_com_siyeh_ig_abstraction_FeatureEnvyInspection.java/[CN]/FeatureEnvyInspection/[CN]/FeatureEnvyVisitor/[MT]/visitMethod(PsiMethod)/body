{
  final PsiIdentifier nameIdentifier=method.getNameIdentifier();
  if (nameIdentifier == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final ClassAccessVisitor visitor=new ClassAccessVisitor(containingClass);
  method.accept(visitor);
  final Set overaccessedClasses=visitor.getOveraccessedClasses();
  for (Iterator iterator=overaccessedClasses.iterator(); iterator.hasNext(); ) {
    final PsiClass aClass=(PsiClass)iterator.next();
    registerError(nameIdentifier,aClass);
  }
}
