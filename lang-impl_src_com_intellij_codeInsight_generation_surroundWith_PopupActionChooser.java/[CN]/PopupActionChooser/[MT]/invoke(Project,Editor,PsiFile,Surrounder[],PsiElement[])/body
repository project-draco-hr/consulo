{
  final DefaultActionGroup applicable=new DefaultActionGroup();
  hasEnabledSurrounders=false;
  Set<Character> usedMnemonicsSet=new HashSet<Character>();
  int index=0;
  for (  Surrounder surrounder : surrounders) {
    if (surrounder.isApplicable(elements)) {
      char mnemonic;
      if (index < 9) {
        mnemonic=(char)('0' + index + 1);
      }
 else       if (index == 9) {
        mnemonic='0';
      }
 else {
        mnemonic=(char)('A' + index - 10);
      }
      index++;
      usedMnemonicsSet.add(Character.toUpperCase(mnemonic));
      applicable.add(new InvokeSurrounderAction(surrounder,project,editor,elements,mnemonic));
      hasEnabledSurrounders=true;
    }
  }
  int offset=editor.getCaretModel().getOffset();
  TemplateContextType contextType=TemplateManager.getInstance(project).getContextType(file,offset);
  TemplateImpl[] templates=TemplateSettings.getInstance().getTemplates();
  ArrayList<TemplateImpl> array=new ArrayList<TemplateImpl>();
  for (  TemplateImpl template : templates) {
    if (template.isDeactivated())     continue;
    if (template.getTemplateContext().isEnabled(contextType) && template.isSelectionTemplate()) {
      array.add(template);
    }
  }
  Collections.sort(array,new Comparator<TemplateImpl>(){
    public int compare(    TemplateImpl o1,    TemplateImpl o2){
      return o1.getKey().compareTo(o2.getKey());
    }
  }
);
  if (!array.isEmpty()) {
    applicable.addSeparator("Live templates");
  }
  for (  TemplateImpl template : array) {
    applicable.add(new InvokeTemplateAction(template,editor,project,usedMnemonicsSet));
    hasEnabledSurrounders=true;
  }
  if (hasEnabledSurrounders) {
    DataContext context=DataManager.getInstance().getDataContext(editor.getContentComponent());
    final ListPopup popup=JBPopupFactory.getInstance().createActionGroupPopup(myTitle,applicable,context,JBPopupFactory.ActionSelectionAid.MNEMONICS,true);
    popup.showInBestPositionFor(editor);
  }
}
