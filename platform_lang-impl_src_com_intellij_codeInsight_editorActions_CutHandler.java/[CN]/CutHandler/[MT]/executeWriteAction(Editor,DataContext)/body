{
  Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getContentComponent()));
  if (project == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,dataContext);
    }
    return;
  }
  final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (file == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,dataContext);
    }
    return;
  }
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (!selectionModel.hasSelection(true) && !selectionModel.hasBlockSelection()) {
    if (Registry.is(CopyAction.SKIP_COPY_AND_CUT_FOR_EMPTY_SELECTION_KEY)) {
      return;
    }
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        selectionModel.selectLineAtCaret();
      }
    }
);
    if (!selectionModel.hasSelection(true))     return;
  }
  int start=selectionModel.getSelectionStart();
  int end=selectionModel.getSelectionEnd();
  final List<TextRange> selections=new ArrayList<TextRange>();
  if (editor.getCaretModel().supportsMultipleCarets()) {
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        selections.add(new TextRange(selectionModel.getSelectionStart(),selectionModel.getSelectionEnd()));
      }
    }
);
  }
  EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_COPY).execute(editor,dataContext);
  if (editor.getCaretModel().supportsMultipleCarets()) {
    Collections.reverse(selections);
    final Iterator<TextRange> it=selections.iterator();
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        TextRange range=it.next();
        editor.getCaretModel().moveToOffset(range.getStartOffset());
        selectionModel.removeSelection();
        editor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
      }
    }
);
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
 else {
    if (start != end) {
      editor.getDocument().deleteString(start,end);
    }
 else {
      EditorModificationUtil.deleteSelectedText(editor);
    }
  }
}
