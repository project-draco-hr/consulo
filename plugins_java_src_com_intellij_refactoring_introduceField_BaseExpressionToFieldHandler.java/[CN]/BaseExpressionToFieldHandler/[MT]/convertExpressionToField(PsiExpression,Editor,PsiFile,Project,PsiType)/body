{
  if (!validClass(myParentClass,editor)) {
    return true;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return true;
  final OccurrenceManager occurrenceManager=createOccurrenceManager(selectedExpr,myParentClass);
  final PsiExpression[] occurrences=occurrenceManager.getOccurrences();
  final PsiElement anchorStatementIfAll=occurrenceManager.getAnchorStatementForAll();
  List<RangeHighlighter> highlighters=null;
  if (editor != null) {
    highlighters=RefactoringUtil.highlightAllOccurrences(project,occurrences,editor);
  }
  PsiElement tempAnchorElement=RefactoringUtil.getParentExpressionAnchorElement(selectedExpr);
  if (!Comparing.strEqual(IntroduceConstantHandler.REFACTORING_NAME,getRefactoringName()) && IntroduceVariableBase.checkAnchorBeforeThisOrSuper(project,editor,tempAnchorElement,getRefactoringName(),getHelpID()))   return true;
  final Settings settings=showRefactoringDialog(project,editor,myParentClass,selectedExpr,tempType,occurrences,tempAnchorElement,anchorStatementIfAll);
  if (settings == null)   return true;
  if (settings.getForcedType() != null) {
    tempType=settings.getForcedType();
  }
  final PsiType type=tempType;
  if (editor != null) {
    HighlightManager highlightManager=HighlightManager.getInstance(project);
    for (    RangeHighlighter highlighter : highlighters) {
      highlightManager.removeSegmentHighlighter(editor,highlighter);
    }
  }
  final Runnable runnable=new ConvertToFieldRunnable(settings.getSelectedExpr(),settings,type,settings.getOccurrences(),occurrenceManager,anchorStatementIfAll,tempAnchorElement,editor,myParentClass);
  new WriteCommandAction(project,getRefactoringName()){
    @Override protected void run(    Result result) throws Throwable {
      runnable.run();
    }
  }
.execute();
  return false;
}
