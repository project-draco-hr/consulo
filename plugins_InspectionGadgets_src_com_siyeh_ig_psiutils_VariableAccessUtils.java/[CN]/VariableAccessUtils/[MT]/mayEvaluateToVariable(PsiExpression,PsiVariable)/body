{
  if (expression == null) {
    return false;
  }
  if (expression instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    PsiExpression lOperand=binaryExpression.getLOperand();
    PsiExpression rOperand=binaryExpression.getROperand();
    while (lOperand instanceof PsiBinaryExpression) {
      final PsiBinaryExpression innerBinaryExpression=(PsiBinaryExpression)lOperand;
      if (mayEvaluateToVariable(rOperand,variable)) {
        return true;
      }
      lOperand=innerBinaryExpression.getLOperand();
      rOperand=innerBinaryExpression.getROperand();
    }
    return mayEvaluateToVariable(lOperand,variable) || mayEvaluateToVariable(rOperand,variable);
  }
  if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression containedExpression=parenthesizedExpression.getExpression();
    return mayEvaluateToVariable(containedExpression,variable);
  }
  if (expression instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression typeCastExpression=(PsiTypeCastExpression)expression;
    final PsiExpression containedExpression=typeCastExpression.getOperand();
    return mayEvaluateToVariable(containedExpression,variable);
  }
  if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditional=(PsiConditionalExpression)expression;
    final PsiExpression thenExpression=conditional.getThenExpression();
    final PsiExpression elseExpression=conditional.getElseExpression();
    return mayEvaluateToVariable(thenExpression,variable) || mayEvaluateToVariable(elseExpression,variable);
  }
  if (expression instanceof PsiArrayAccessExpression) {
    final PsiElement parent=expression.getParent();
    if (parent instanceof PsiArrayAccessExpression) {
      return false;
    }
    final PsiType type=variable.getType();
    if (!(type instanceof PsiArrayType)) {
      return false;
    }
    final PsiArrayType arrayType=(PsiArrayType)type;
    final int dimensions=arrayType.getArrayDimensions();
    if (dimensions <= 1) {
      return false;
    }
    PsiArrayAccessExpression arrayAccessExpression=(PsiArrayAccessExpression)expression;
    PsiExpression arrayExpression=arrayAccessExpression.getArrayExpression();
    int count=1;
    while (arrayExpression instanceof PsiArrayAccessExpression) {
      arrayAccessExpression=(PsiArrayAccessExpression)arrayExpression;
      arrayExpression=arrayAccessExpression.getArrayExpression();
      count++;
    }
    return count != dimensions && mayEvaluateToVariable(arrayExpression,variable);
  }
  return evaluatesToVariable(expression,variable);
}
