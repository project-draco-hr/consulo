{
  if (!(statement instanceof PsiExpressionStatement)) {
    return false;
  }
  final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)statement;
  PsiExpression expression=expressionStatement.getExpression();
  expression=ParenthesesUtils.stripParentheses(expression);
  if (expression instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    final IElementType tokenType=prefixExpression.getOperationTokenType();
    if (!tokenType.equals(JavaTokenType.PLUSPLUS)) {
      return false;
    }
    final PsiExpression operand=prefixExpression.getOperand();
    return evaluatesToVariable(operand,variable);
  }
 else   if (expression instanceof PsiPostfixExpression) {
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)expression;
    final IElementType tokenType=postfixExpression.getOperationTokenType();
    if (!tokenType.equals(JavaTokenType.PLUSPLUS)) {
      return false;
    }
    final PsiExpression operand=postfixExpression.getOperand();
    return evaluatesToVariable(operand,variable);
  }
 else   if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    final IElementType tokenType=assignmentExpression.getOperationTokenType();
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!evaluatesToVariable(lhs,variable)) {
      return false;
    }
    PsiExpression rhs=assignmentExpression.getRExpression();
    rhs=ParenthesesUtils.stripParentheses(rhs);
    if (tokenType == JavaTokenType.EQ) {
      if (!(rhs instanceof PsiBinaryExpression)) {
        return false;
      }
      final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)rhs;
      final IElementType binaryTokenType=binaryExpression.getOperationTokenType();
      if (binaryTokenType != JavaTokenType.PLUS) {
        return false;
      }
      final PsiExpression lOperand=binaryExpression.getLOperand();
      final PsiExpression rOperand=binaryExpression.getROperand();
      if (ExpressionUtils.isOne(lOperand)) {
        if (evaluatesToVariable(rOperand,variable)) {
          return true;
        }
      }
 else       if (ExpressionUtils.isOne(rOperand)) {
        if (evaluatesToVariable(lOperand,variable)) {
          return true;
        }
      }
    }
 else     if (tokenType == JavaTokenType.PLUSEQ) {
      if (ExpressionUtils.isOne(rhs)) {
        return true;
      }
    }
  }
  return false;
}
