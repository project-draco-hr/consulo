{
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(oldExpr.getProject());
  int parentPriorityLevel=getExprPriorityLevel(oldParent);
  int newPriorityLevel=getExprPriorityLevel(newExpr);
  boolean isReplaced=false;
  if (parentPriorityLevel > newPriorityLevel) {
    newExpr=factory.createParenthesizedExpr(newExpr);
    isReplaced=true;
  }
 else   if (parentPriorityLevel == newPriorityLevel && parentPriorityLevel != 0) {
    if (oldParent instanceof GrBinaryExpression) {
      GrBinaryExpression binaryExpression=(GrBinaryExpression)oldParent;
      if (isNotAssociative(binaryExpression) && oldExpr.equals(binaryExpression.getRightOperand())) {
        newExpr=factory.createParenthesizedExpr(newExpr);
        isReplaced=true;
      }
    }
  }
  if (isReplaced) {
    newExpr=(GrExpression)oldExpr.replace(newExpr);
    final GrCommandArgumentList commandArgList=PsiTreeUtil.getParentOfType(oldParent,GrCommandArgumentList.class,true,GrCodeBlock.class,GrParenthesizedExpression.class);
    if (commandArgList == null)     return newExpr;
    final PsiElement[] args=commandArgList.getAllArguments();
    if (PsiTreeUtil.isAncestor(args[0],newExpr,true)) {
      final PsiElement parent=commandArgList.getParent();
      LOG.assertTrue(parent instanceof GrApplicationStatement);
      return (GrExpression)parent.replace(factory.createExpressionFromText(((GrApplicationStatement)parent).getInvokedExpression().getText() + "(" + commandArgList.getText()+ ")"));
    }
 else {
      return newExpr;
    }
  }
  return null;
}
