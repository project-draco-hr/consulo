{
  PsiElement oldParent=oldExpr.getParent();
  if (oldParent == null)   throw new PsiInvalidElementAccessException(oldExpr);
  ASTNode parentNode=oldParent.getNode();
  if (newExpr instanceof GrApplicationStatement && !(oldExpr instanceof GrApplicationStatement)) {
    GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(oldExpr.getProject());
    newExpr=factory.createMethodCallByAppCall(((GrApplicationStatement)newExpr));
  }
  if (removeUnnecessaryParentheses && oldParent instanceof GrParenthesizedExpression) {
    return ((GrExpression)oldParent).replaceWithExpression(newExpr,removeUnnecessaryParentheses);
  }
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(oldExpr.getProject());
  if (GrStringUtil.isReplacedExpressionInGStringInjection(oldExpr)) {
    if (!(newExpr instanceof GrReferenceExpression)) {
      newExpr=factory.createExpressionFromText("{" + newExpr.getText() + "}");
    }
  }
 else   if (oldParent instanceof GrExpression && !(oldParent instanceof GrParenthesizedExpression)) {
    GrExpression result=addParenthesesIfNeeded(newExpr,oldExpr,(GrExpression)oldParent);
    if (result != null)     return result;
  }
  if (oldExpr instanceof GrClosableBlock && !(newExpr instanceof GrClosableBlock) && oldParent instanceof GrCall&& ArrayUtil.contains(oldExpr,((GrCall)oldParent).getClosureArguments())) {
    final GrClosableBlock[] closureArguments=((GrCall)oldParent).getClosureArguments();
    final int i=ArrayUtil.find(closureArguments,oldExpr);
    GrArgumentList argList=((GrCall)oldParent).getArgumentList();
    if (argList.getText().length() == 0)     argList=(GrArgumentList)argList.replace(factory.createArgumentList());
    for (int j=0; j < i; j++) {
      argList.add(closureArguments[j]);
      closureArguments[j].delete();
    }
    final GrExpression result=(GrExpression)argList.add(newExpr);
    oldExpr.delete();
    return result;
  }
 else {
    return (GrExpression)oldExpr.replace(newExpr);
  }
}
