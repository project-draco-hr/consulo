{
  PsiElement oldParent=oldExpr.getParent();
  if (oldParent == null)   throw new PsiInvalidElementAccessException(oldExpr);
  if (newExpr instanceof GrApplicationStatement && !(oldExpr instanceof GrApplicationStatement)) {
    GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(oldExpr.getProject());
    newExpr=factory.createMethodCallByAppCall(((GrApplicationStatement)newExpr));
  }
  if (removeUnnecessaryParentheses && oldParent instanceof GrParenthesizedExpression && !(oldParent.getParent() instanceof GrArgumentLabel)) {
    return ((GrExpression)oldParent).replaceWithExpression(newExpr,removeUnnecessaryParentheses);
  }
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(oldExpr.getProject());
  if (oldParent instanceof GrStringInjection) {
    if (newExpr instanceof GrString || newExpr instanceof GrLiteral && ((GrLiteral)newExpr).getValue() instanceof String) {
      return GrStringUtil.replaceStringInjectionByLiteral((GrStringInjection)oldParent,(GrLiteral)newExpr);
    }
 else {
      newExpr=factory.createExpressionFromText("{" + newExpr.getText() + "}");
      oldParent.getNode().replaceChild(oldExpr.getNode(),newExpr.getNode());
      return newExpr;
    }
  }
 else   if (PsiTreeUtil.getParentOfType(oldExpr,GrStringInjection.class,false,GrCodeBlock.class) != null) {
    final PsiElement replaced=oldExpr.replace(newExpr);
    final GrStringInjection stringInjection=PsiTreeUtil.getParentOfType(replaced,GrStringInjection.class);
    GrStringUtil.wrapInjection(stringInjection);
    return stringInjection.getClosableBlock();
  }
 else   if (oldParent instanceof GrExpression && !(oldParent instanceof GrParenthesizedExpression)) {
    GrExpression result=addParenthesesIfNeeded(newExpr,oldExpr,(GrExpression)oldParent);
    if (result != null)     return result;
  }
  if (oldExpr instanceof GrClosableBlock && !(newExpr instanceof GrClosableBlock) && oldParent instanceof GrMethodCallExpression&& ArrayUtil.contains(oldExpr,((GrMethodCallExpression)oldParent).getClosureArguments())) {
    return ((GrMethodCallExpression)oldParent).replaceClosureArgument((GrClosableBlock)oldExpr,newExpr);
  }
 else {
    return (GrExpression)oldExpr.replace(newExpr);
  }
}
