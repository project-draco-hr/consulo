{
  final PatchChange change=getChange();
  final FilePatch patch=getPatch();
  final String path=patch.getBeforeName() == null ? patch.getAfterName() : patch.getBeforeName();
  final Getter<CharSequence> baseContentGetter=new Getter<CharSequence>(){
    @Override public CharSequence get(){
      return patchReader.getBaseRevision(project,path);
    }
  }
;
  return new DiffRequestProducer(){
    @NotNull @Override public DiffRequest process(    @NotNull UserDataHolder context,    @NotNull ProgressIndicator indicator) throws DiffRequestProducerException, ProcessCanceledException {
      if (myCurrentBase != null && myCurrentBase.getFileType() == UnknownFileType.INSTANCE) {
        return new UnknownFileTypeDiffRequest(myCurrentBase,getName());
      }
      if (isConflictingChange()) {
        final VirtualFile file=getCurrentBase();
        Getter<ApplyPatchForBaseRevisionTexts> getter=new Getter<ApplyPatchForBaseRevisionTexts>(){
          @Override public ApplyPatchForBaseRevisionTexts get(){
            return ApplyPatchForBaseRevisionTexts.create(project,file,VcsUtil.getFilePath(file),getPatch(),baseContentGetter);
          }
        }
;
        String afterTitle=getPatch().getAfterVersionId();
        if (afterTitle == null)         afterTitle="Patched Version";
        return PatchDiffRequestFactory.createConflictDiffRequest(project,file,getPatch(),afterTitle,getter,getName(),context,indicator);
      }
 else {
        return PatchDiffRequestFactory.createDiffRequest(project,change,getName(),context,indicator);
      }
    }
    @NotNull @Override public String getName(){
      final File ioCurrentBase=getIoCurrentBase();
      return ioCurrentBase == null ? getCurrentPath() : ioCurrentBase.getPath();
    }
  }
;
}
