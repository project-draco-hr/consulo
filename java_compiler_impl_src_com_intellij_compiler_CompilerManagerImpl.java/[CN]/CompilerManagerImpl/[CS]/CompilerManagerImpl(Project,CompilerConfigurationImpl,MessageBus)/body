{
  myProject=project;
  myEventPublisher=messageBus.syncPublisher(CompilerTopics.COMPILATION_STATUS);
  addTranslatingCompiler(new AnnotationProcessingCompiler(project),new HashSet<FileType>(Arrays.asList(StdFileTypes.JAVA)),new HashSet<FileType>(Arrays.asList(StdFileTypes.JAVA,StdFileTypes.CLASS)));
  addTranslatingCompiler(new JavaCompiler(project),new HashSet<FileType>(Arrays.asList(StdFileTypes.JAVA)),new HashSet<FileType>(Arrays.asList(StdFileTypes.CLASS)));
  addCompiler(new ResourceCompiler(project,compilerConfiguration));
  addCompiler(new RmicCompiler());
  for (  Compiler compiler : Extensions.getExtensions(Compiler.EP_NAME,myProject)) {
    addCompiler(compiler);
  }
  for (  CompilerFactory factory : Extensions.getExtensions(CompilerFactory.EP_NAME,myProject)) {
    Compiler[] compilers=factory.createCompilers(this);
    for (    Compiler compiler : compilers) {
      addCompiler(compiler);
    }
  }
  addCompilableFileType(StdFileTypes.JAVA);
  final File projectGeneratedSrcRoot=CompilerPaths.getGeneratedDataDirectory(project);
  projectGeneratedSrcRoot.mkdirs();
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  myWatchRoots=lfs.addRootsToWatch(Collections.singletonList(FileUtil.toCanonicalPath(projectGeneratedSrcRoot.getPath())),true);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      lfs.removeWatchedRoots(myWatchRoots);
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        FileUtil.delete(CompilerPaths.getCompilerSystemDirectory(project));
      }
    }
  }
);
}
