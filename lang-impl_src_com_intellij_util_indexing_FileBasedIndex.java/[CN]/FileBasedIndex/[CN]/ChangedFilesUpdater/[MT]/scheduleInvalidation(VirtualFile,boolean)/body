{
  if (file.isDirectory()) {
    if (isMock(file) || myManagingFS.wereChildrenAccessed(file)) {
      for (      VirtualFile child : file.getChildren()) {
        scheduleInvalidation(child,saveContent);
      }
    }
  }
 else {
    if (SingleRootFileViewProvider.isTooLarge(file))     return;
    final List<ID<?,?>> affectedIndices=new ArrayList<ID<?,?>>(myIndices.size());
    FileContent fileContent=null;
    for (    ID<?,?> indexId : myIndices.keySet()) {
      if (shouldUpdateIndex(file,indexId)) {
        if (myNeedContentLoading.contains(indexId)) {
          affectedIndices.add(indexId);
        }
 else {
          try {
            if (fileContent == null) {
              fileContent=new FileContent(file,(byte[])null);
            }
            updateSingleIndex(indexId,file,null,fileContent);
          }
 catch (          StorageException e) {
            LOG.info(e);
            requestRebuild(indexId);
          }
        }
      }
    }
    IndexingStamp.flushCache();
    if (!affectedIndices.isEmpty()) {
      if (saveContent) {
        myFileContentAttic.offer(file);
      }
 else {
        byte[] content=myFileContentAttic.remove(file);
        try {
          if (content == null) {
            content=file.contentsToByteArray();
          }
        }
 catch (        IOException e) {
          content=ArrayUtil.EMPTY_BYTE_ARRAY;
        }
        final FileContent fc=new FileContent(file,content);
synchronized (myFutureInvalidations) {
          final FutureTask<?> future=(FutureTask<?>)myInvalidationService.submit(new Runnable(){
            public void run(){
              for (              ID<?,?> indexId : affectedIndices) {
                try {
                  updateSingleIndex(indexId,file,null,fc);
                }
 catch (                StorageException e) {
                  LOG.info(e);
                  requestRebuild(indexId);
                }
              }
              IndexingStamp.flushCache();
            }
          }
);
          myFutureInvalidations.offer(future);
        }
      }
      iterateIndexableFiles(file,new Processor<VirtualFile>(){
        public boolean process(        final VirtualFile file){
          myFilesToUpdate.add(file);
          return true;
        }
      }
);
    }
  }
}
