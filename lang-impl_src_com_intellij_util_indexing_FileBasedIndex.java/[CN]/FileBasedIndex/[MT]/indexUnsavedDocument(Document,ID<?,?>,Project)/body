{
  final VirtualFile vFile=myFileDocumentManager.getFile(document);
  if (!(vFile instanceof VirtualFileWithId) || !vFile.isValid()) {
    return;
  }
  final PsiFile dominantContentFile=findDominantPsiForDocument(document,project);
  DocumentContent content;
  if (dominantContentFile != null && dominantContentFile.getModificationStamp() != document.getModificationStamp()) {
    content=new PsiContent(document,dominantContentFile);
  }
 else {
    content=new AuthenticContent(document);
  }
  final long currentDocStamp=content.getModificationStamp();
  if (currentDocStamp != myLastIndexedDocStamps.getAndSet(document,requestedIndexId,currentDocStamp).longValue()) {
    final FileContent newFc=new FileContent(vFile,content.getText(),vFile.getCharset());
    if (dominantContentFile != null) {
      dominantContentFile.putUserData(PsiFileImpl.BUILDING_STUB,true);
      newFc.putUserData(PSI_FILE,dominantContentFile);
    }
    if (content instanceof AuthenticContent) {
      newFc.putUserData(EDITOR_HIGHLIGHTER,document instanceof DocumentImpl ? ((DocumentImpl)document).getEditorHighlighterForCachesBuilding() : null);
    }
    CharSequence lastIndexed=myLastIndexedUnsavedContent.get(document,requestedIndexId);
    final FileContent oldFc=new FileContent(vFile,lastIndexed,vFile.getCharset());
    if (getInputFilter(requestedIndexId).acceptInput(vFile)) {
      oldFc.putUserData(PROJECT,project);
      newFc.putUserData(PROJECT,project);
      final int inputId=Math.abs(getFileId(vFile));
      getIndex(requestedIndexId).update(inputId,newFc,oldFc);
    }
    if (dominantContentFile != null) {
      dominantContentFile.putUserData(PsiFileImpl.BUILDING_STUB,null);
    }
    myLastIndexedUnsavedContent.put(document,requestedIndexId,newFc.getContentAsText());
  }
}
