{
  myVfManager=vfManager;
  final MessageBusConnection connection=bus.connect();
  connection.subscribe(PsiDocumentTransactionListener.TOPIC,new PsiDocumentTransactionListener(){
    public void transactionStarted(    final Document doc,    final PsiFile file){
      if (file != null) {
        myTransactionMap.put(doc,file);
      }
    }
    public void transactionCompleted(    final Document doc,    final PsiFile file){
      myTransactionMap.remove(doc);
    }
  }
);
  connection.subscribe(AppTopics.FILE_TYPES,new FileTypeListener(){
    public void beforeFileTypesChanged(    final FileTypeEvent event){
      final VirtualFile[] roots=ManagingFS.getInstance().getRoots();
      for (      VirtualFile root : roots) {
        cleanProcessedFlag(root);
      }
    }
    private void cleanProcessedFlag(    final VirtualFile file){
      final NewVirtualFile nvf=(NewVirtualFile)file;
      if (file.isDirectory()) {
        for (        VirtualFile child : nvf.getCachedChildren()) {
          cleanProcessedFlag(child);
        }
      }
 else {
        nvf.setFlag(ALREADY_PROCESSED,false);
      }
    }
    public void fileTypesChanged(    final FileTypeEvent event){
    }
  }
);
  final File workInProgressFile=getMarkerFile();
  if (workInProgressFile.exists()) {
    FileUtil.delete(PathManager.getIndexRoot());
  }
  try {
    final FileBasedIndexExtension[] extensions=Extensions.getExtensions(FileBasedIndexExtension.EXTENSION_POINT_NAME);
    for (    FileBasedIndexExtension<?,?> extension : extensions) {
      myRebuildStatus.put(extension.getName(),new AtomicInteger(OK));
    }
    for (    FileBasedIndexExtension<?,?> extension : extensions) {
      registerIndexer(extension);
    }
    dropUnregisteredIndices();
    for (    ID<?,?> indexId : myIndices.keySet()) {
      if (myRebuildStatus.get(indexId).compareAndSet(REQUIRES_REBUILD,OK)) {
        try {
          clearIndex(indexId);
        }
 catch (        StorageException e) {
          requestRebuild(indexId);
          LOG.error(e);
        }
      }
    }
    myChangedFilesUpdater=new ChangedFilesUpdater();
    vfManager.addVirtualFileListener(myChangedFilesUpdater);
    vfManager.registerRefreshUpdater(myChangedFilesUpdater);
    myFileContentAttic=new FileContentStorage(new File(PathManager.getIndexRoot(),"updates.tmp"));
  }
  finally {
    workInProgressFile.createNewFile();
    saveRegisteredInices(myIndices.keySet());
  }
}
