{
  final CharSequence result=myMockery.mock(CharSequence.class);
  myMockery.checking(new Expectations(){
{
      allowing(result).charAt(with(any(int.class)));
      will(new CustomAction("charAt()"){
        @Override public Object invoke(        Invocation invocation) throws Throwable {
          Integer index=(Integer)invocation.getParameter(0);
          return (char)(index.intValue() + shift);
        }
      }
);
      allowing(result).length();
      will(returnValue(length));
      allowing(result).subSequence(with(any(int.class)),with(any(int.class)));
      will(new CustomAction("subSequence"){
        @Override public Object invoke(        Invocation invocation) throws Throwable {
          int start=(Integer)invocation.getParameter(0);
          int end=(Integer)invocation.getParameter(1);
          return createText(end - start,shift + start);
        }
      }
);
    }
  }
);
  return result;
}
