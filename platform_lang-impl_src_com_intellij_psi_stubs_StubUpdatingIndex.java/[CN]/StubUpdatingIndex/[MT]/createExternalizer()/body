{
  return new DataExternalizer<Collection<Integer>>(){
    @Override public void save(    @NotNull DataOutput out,    Collection<Integer> value) throws IOException {
      DataInputOutputUtil.writeINT(out,value.iterator().next());
      Map<StubIndexKey,Map<Object,StubIdList>> stubIndicesValueMap=((StubUpdatingIndexKeys)value).myStubIndicesValueMap;
      DataInputOutputUtil.writeINT(out,stubIndicesValueMap != null ? stubIndicesValueMap.size() : 0);
      if (stubIndicesValueMap != null && stubIndicesValueMap.size() > 0) {
        StubIndexImpl stubIndex=StubIndexImpl.getInstanceOrInvalidate();
        for (        StubIndexKey stubIndexKey : stubIndicesValueMap.keySet()) {
          DataInputOutputUtil.writeINT(out,stubIndexKey.getUniqueId());
          Map<Object,StubIdList> map=stubIndicesValueMap.get(stubIndexKey);
          stubIndex.serializeIndexValue(out,stubIndexKey,map);
        }
      }
    }
    @Override public Collection<Integer> read(    @NotNull DataInput in) throws IOException {
      int fileId=DataInputOutputUtil.readINT(in);
      StubUpdatingIndexKeys integers=new StubUpdatingIndexKeys(ContainerUtil.set(fileId));
      int stubIndicesValueMapSize=DataInputOutputUtil.readINT(in);
      if (stubIndicesValueMapSize > 0) {
        THashMap<StubIndexKey,Map<Object,StubIdList>> stubIndicesValueMap=new THashMap<StubIndexKey,Map<Object,StubIdList>>(stubIndicesValueMapSize);
        StubIndexImpl stubIndex=StubIndexImpl.getInstanceOrInvalidate();
        for (int i=0; i < stubIndicesValueMapSize; ++i) {
          int stubIndexId=DataInputOutputUtil.readINT(in);
          ID<Object,?> indexKey=(ID<Object,?>)StubIndexKey.findById(stubIndexId);
          if (indexKey instanceof StubIndexKey) {
            StubIndexKey<Object,?> stubIndexKey=(StubIndexKey<Object,?>)indexKey;
            stubIndicesValueMap.put(stubIndexKey,stubIndex.deserializeIndexValue(in,stubIndexKey));
          }
        }
        integers.myStubIndicesValueMap=stubIndicesValueMap;
      }
      return integers;
    }
  }
;
}
