{
  super.visitReferenceExpression(expression);
  final PsiElement element=expression.resolve();
  if (!(element instanceof PsiMethod || element instanceof PsiField)) {
    return;
  }
  final PsiMember member=(PsiMember)element;
  if (member == null || !member.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  final PsiElement containingClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  if (containingClass == null) {
    return;
  }
  final PsiClass memberClass=(PsiClass)PsiTreeUtil.getParentOfType(member,PsiClass.class);
  if (memberClass.equals(containingClass)) {
    return;
  }
  final String memberClassName=memberClass.getName();
  registerError(expression,memberClassName);
}
