{
  List<TextRange> result=new ArrayList<TextRange>();
  PsiElement endElement=e;
  while (endElement.getNextSibling() != null && endElement instanceof PsiJavaCodeReferenceElement) {
    endElement=endElement.getNextSibling();
  }
  if (!(endElement instanceof PsiJavaCodeReferenceElement) && !(endElement.getPrevSibling() instanceof PsiReferenceExpression && endElement instanceof PsiExpressionList)) {
    endElement=endElement.getPrevSibling();
  }
  PsiElement element=e;
  while (element instanceof PsiJavaCodeReferenceElement) {
    PsiElement firstChild=element.getFirstChild();
    PsiElement referenceName=((PsiJavaCodeReferenceElement)element).getReferenceNameElement();
    if (referenceName != null) {
      result.addAll(expandToWholeLine(editorText,new TextRange(referenceName.getTextRange().getStartOffset(),endElement.getTextRange().getEndOffset())));
      if (endElement instanceof PsiJavaCodeReferenceElement) {
        final PsiElement endReferenceName=((PsiJavaCodeReferenceElement)endElement).getReferenceNameElement();
        if (endReferenceName != null) {
          result.addAll(expandToWholeLine(editorText,new TextRange(referenceName.getTextRange().getStartOffset(),endReferenceName.getTextRange().getEndOffset())));
        }
      }
    }
    element=firstChild;
  }
  result.addAll(expandToWholeLine(editorText,new TextRange(element.getTextRange().getStartOffset(),endElement.getTextRange().getEndOffset())));
  if (!(e.getParent() instanceof PsiJavaCodeReferenceElement)) {
    if (e.getNextSibling() instanceof PsiJavaToken || e.getNextSibling() instanceof PsiWhiteSpace || e.getNextSibling() instanceof PsiExpressionList) {
      result.addAll(super.select(e,editorText,cursorOffset,editor));
    }
  }
  return result;
}
