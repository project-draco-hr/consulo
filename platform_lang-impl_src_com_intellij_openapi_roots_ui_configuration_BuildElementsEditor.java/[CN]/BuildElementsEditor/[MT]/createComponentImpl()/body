{
  final CompilerPathsManager compilerPathsManager=CompilerPathsManager.getInstance(myProject);
  myInheritCompilerOutput=new JRadioButton(ProjectBundle.message("project.inherit.compile.output.path"));
  myPerModuleCompilerOutput=new JRadioButton(ProjectBundle.message("project.module.compile.output.path"));
  ButtonGroup group=new ButtonGroup();
  group.add(myInheritCompilerOutput);
  group.add(myPerModuleCompilerOutput);
  final ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      enableCompilerSettings(!myInheritCompilerOutput.isSelected());
    }
  }
;
  myInheritCompilerOutput.addActionListener(listener);
  myPerModuleCompilerOutput.addActionListener(listener);
  myOutputPathPanel=createOutputPathPanel(ProjectBundle.message("module.paths.output.title"),new CommitPathRunnable(){
    @Override public void saveUrl(    String url){
      if (compilerPathsManager.isInheritedCompilerOutput(getModule())) {
        return;
      }
      compilerPathsManager.setCompilerOutputUrl(getModule(),ProductionContentFolderTypeProvider.getInstance(),url);
    }
  }
);
  myTestsOutputPathPanel=createOutputPathPanel(ProjectBundle.message("module.paths.test.output.title"),new CommitPathRunnable(){
    @Override public void saveUrl(    String url){
      if (compilerPathsManager.isInheritedCompilerOutput(getModule())) {
        return;
      }
      compilerPathsManager.setCompilerOutputUrl(getModule(),TestContentFolderTypeProvider.getInstance(),url);
    }
  }
);
  myResourcesOutputPathPanel=createOutputPathPanel(ProjectBundle.message("module.paths.resource.output.title"),new CommitPathRunnable(){
    @Override public void saveUrl(    String url){
      if (compilerPathsManager.isInheritedCompilerOutput(getModule())) {
        return;
      }
      compilerPathsManager.setCompilerOutputUrl(getModule(),ProductionResourceContentFolderTypeProvider.getInstance(),url);
    }
  }
);
  myCbExcludeOutput=new JCheckBox(ProjectBundle.message("module.paths.exclude.output.checkbox"),compilerPathsManager.isExcludeOutput(getModule()));
  myCbExcludeOutput.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      compilerPathsManager.setExcludeOutput(getModule(),myCbExcludeOutput.isSelected());
    }
  }
);
  final JPanel outputPathsPanel=new JPanel(new GridBagLayout());
  outputPathsPanel.add(myInheritCompilerOutput,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(6,0,0,4),0,0));
  outputPathsPanel.add(myPerModuleCompilerOutput,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(6,0,0,4),0,0));
  myOutputLabel=new JLabel(ProjectBundle.message("module.paths.output.label"));
  outputPathsPanel.add(myOutputLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(6,12,0,4),0,0));
  outputPathsPanel.add(myOutputPathPanel,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(6,4,0,0),0,0));
  myTestOutputLabel=new JLabel(ProjectBundle.message("module.paths.test.output.label"));
  outputPathsPanel.add(myTestOutputLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(6,16,0,4),0,0));
  outputPathsPanel.add(myTestsOutputPathPanel,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(6,4,0,0),0,0));
  myResourceOutputLabel=new JLabel(ProjectBundle.message("module.paths.resource.output.label"));
  outputPathsPanel.add(myResourceOutputLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(6,16,0,4),0,0));
  outputPathsPanel.add(myResourcesOutputPathPanel,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(6,4,0,0),0,0));
  outputPathsPanel.add(myCbExcludeOutput,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(6,16,0,0),0,0));
  updateOutputPathPresentation();
  final boolean outputPathInherited=compilerPathsManager.isInheritedCompilerOutput(getModule());
  myInheritCompilerOutput.setSelected(outputPathInherited);
  myPerModuleCompilerOutput.setSelected(!outputPathInherited);
  enableCompilerSettings(!outputPathInherited);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorder(ProjectBundle.message("project.roots.output.compiler.title"),true));
  panel.add(outputPathsPanel,BorderLayout.NORTH);
  return panel;
}
