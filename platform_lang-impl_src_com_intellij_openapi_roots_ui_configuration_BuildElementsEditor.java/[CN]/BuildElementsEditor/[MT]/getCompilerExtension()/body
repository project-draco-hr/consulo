{
  return new CompilerModuleExtension(){
    @Nullable @Override public VirtualFile getCompilerOutputPath(){
      return null;
    }
    @Override public void setCompilerOutputPath(    VirtualFile file){
    }
    @Nullable @Override public String getCompilerOutputUrl(){
      return null;
    }
    @Override public void setCompilerOutputPath(    String url){
    }
    @Nullable @Override public VirtualFile getCompilerOutputPathForTests(){
      return null;
    }
    @Override public void setCompilerOutputPathForTests(    VirtualFile file){
    }
    @Nullable @Override public String getCompilerOutputUrlForTests(){
      return null;
    }
    @Override public void setCompilerOutputPathForTests(    String url){
    }
    @Override public void inheritCompilerOutputPath(    boolean inherit){
    }
    @Override public boolean isCompilerOutputPathInherited(){
      return false;
    }
    @Override public VirtualFilePointer getCompilerOutputPointer(){
      return null;
    }
    @Override public VirtualFilePointer getCompilerOutputForTestsPointer(){
      return null;
    }
    @Override public void setExcludeOutput(    boolean exclude){
    }
    @Override public boolean isExcludeOutput(){
      return false;
    }
    @Override public VirtualFile[] getOutputRoots(    boolean includeTests){
      return new VirtualFile[0];
    }
    @Override public String[] getOutputRootUrls(    boolean includeTests){
      return new String[0];
    }
    @Override public ModuleExtension0 getModifiableModel(    boolean writable){
      return null;
    }
    @Override public void commit(){
    }
    @Override public boolean isChanged(){
      return false;
    }
    @Override public int compareTo(    Object o){
      return 0;
    }
    @Override public void dispose(){
    }
    @Override public void readExternal(    Element element) throws InvalidDataException {
    }
    @Override public void writeExternal(    Element element) throws WriteExternalException {
    }
  }
;
}
