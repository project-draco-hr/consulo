{
  final Set<ExternalizableString> keys=myOrderInfo.keySet();
  for (Iterator iterator=keys.iterator(); iterator.hasNext(); ) {
    ExternalizableString key=(ExternalizableString)iterator.next();
    final OrderEntryInfo orderEntryInfo=myOrderInfo.get(key);
    if (!orderEntryInfo.copy)     continue;
    final OrderEntry orderEntry=myModuleRootsWatcher.find(getModule(),key);
    if (orderEntry == null)     continue;
    final ContainerElement containerElement;
    if (orderEntry instanceof ModuleOrderEntry) {
      final Module module=((ModuleOrderEntry)orderEntry).getModule();
      if (module == null)       continue;
      containerElement=new ModuleLinkImpl(module,getModule());
      containerElement.setPackagingMethod(getModule().getModuleType().equals(ModuleType.EJB) ? J2EEPackagingMethod.COPY_FILES_AND_LINK_VIA_MANIFEST : J2EEPackagingMethod.COPY_FILES);
    }
 else     if (orderEntry instanceof LibraryOrderEntry) {
      final Library library=((LibraryOrderEntry)orderEntry).getLibrary();
      if (library == null)       continue;
      containerElement=new LibraryLinkImpl(library,getModule());
      containerElement.setPackagingMethod(getModule().getModuleType().equals(ModuleType.EJB) ? J2EEPackagingMethod.COPY_FILES_AND_LINK_VIA_MANIFEST : J2EEPackagingMethod.COPY_FILES);
    }
 else {
      LOG.error("invalid type " + orderEntry);
      continue;
    }
    containerElement.setURI(orderEntryInfo.URI);
    final Map<String,String> attributes=orderEntryInfo.getAttributes();
    for (Iterator iterator1=attributes.keySet().iterator(); iterator1.hasNext(); ) {
      String name=(String)iterator1.next();
      String value=attributes.get(name);
      containerElement.setAttribute(name,value);
    }
    containerElement.setURI(orderEntryInfo.URI);
    addElement(containerElement);
  }
}
