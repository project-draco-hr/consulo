{
  JPanel panel=new MyPanel();
  myUiUpdater=new MergingUpdateQueue("FileChooserUpdater",200,false,panel);
  Disposer.register(myDisposable,myUiUpdater);
  new UiNotifyConnector(panel,myUiUpdater);
  panel.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  createTree();
  final DefaultActionGroup group=createActionGroup();
  ActionToolbar toolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  toolBar.setTargetComponent(panel);
  final JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(toolBar.getComponent(),BorderLayout.CENTER);
  myTextFieldAction=new TextFieldAction();
  toolbarPanel.add(myTextFieldAction,BorderLayout.EAST);
  myPathTextFieldWrapper=new JPanel(new BorderLayout());
  myPathTextFieldWrapper.setBorder(new EmptyBorder(0,0,2,0));
  myPathTextField=new FileTextFieldImpl.Vfs(FileChooserFactoryImpl.getMacroMap(),getDisposable(),new LocalFsFinder.FileChooserFilter(myChooserDescriptor,myFileSystemTree)){
    protected void onTextChanged(    final String newValue){
      myUiUpdater.cancelAllUpdates();
      updateTreeFromPath(newValue);
    }
  }
;
  Disposer.register(myDisposable,myPathTextField);
  myPathTextFieldWrapper.add(myPathTextField.getField(),BorderLayout.CENTER);
  if (getRecentFiles().length > 0) {
    myPathTextFieldWrapper.add(createHistoryButton(),BorderLayout.EAST);
  }
  myNorthPanel=new JPanel(new BorderLayout());
  myNorthPanel.add(toolbarPanel,BorderLayout.NORTH);
  updateTextFieldShowing();
  panel.add(myNorthPanel,BorderLayout.NORTH);
  registerMouseListener(group);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myFileSystemTree.getTree());
  panel.add(scrollPane,BorderLayout.CENTER);
  panel.setPreferredSize(new Dimension(400,400));
  panel.add(new JLabel("<html><center><small><font color=gray>Drag and drop a file into the space above to quickly locate it in the tree.</font></small></center></html>",SwingConstants.CENTER),BorderLayout.SOUTH);
  ApplicationManager.getApplication().getMessageBus().connect(getDisposable()).subscribe(ApplicationActivationListener.TOPIC,new ApplicationActivationListener(){
    @Override public void applicationActivated(    IdeFrame ideFrame){
      SaveAndSyncHandlerImpl.getInstance().maybeRefresh(ModalityState.current());
    }
    @Override public void applicationDeactivated(    IdeFrame ideFrame){
    }
  }
);
  return panel;
}
