{
  JPanel panel=new MyPanel();
  myUiUpdater=new MergingUpdateQueue("FileChooserUpdater",200,false,panel);
  Disposer.register(myDisposable,myUiUpdater);
  new UiNotifyConnector(panel,myUiUpdater);
  panel.setBorder(JBUI.Borders.empty());
  createTree();
  final DefaultActionGroup group=createActionGroup();
  ActionToolbar toolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  toolBar.setTargetComponent(panel);
  final JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(toolBar.getComponent(),BorderLayout.CENTER);
  myTextFieldAction=new TextFieldAction(){
    public void linkSelected(    final LinkLabel aSource,    final Object aLinkData){
      toggleShowTextField();
    }
  }
;
  toolbarPanel.add(myTextFieldAction,BorderLayout.EAST);
  JPanel extraToolbarPanel=createExtraToolbarPanel();
  if (extraToolbarPanel != null) {
    toolbarPanel.add(extraToolbarPanel,BorderLayout.SOUTH);
  }
  myPathTextFieldWrapper=new JPanel(new BorderLayout());
  myPathTextFieldWrapper.setBorder(JBUI.Borders.emptyBottom(2));
  myPathTextField=new FileTextFieldImpl.Vfs(FileChooserFactoryImpl.getMacroMap(),getDisposable(),new LocalFsFinder.FileChooserFilter(myChooserDescriptor,myFileSystemTree)){
    protected void onTextChanged(    final String newValue){
      myUiUpdater.cancelAllUpdates();
      updateTreeFromPath(newValue);
    }
  }
;
  Disposer.register(myDisposable,myPathTextField);
  myPathTextFieldWrapper.add(myPathTextField.getField(),BorderLayout.CENTER);
  if (getRecentFiles().length > 0) {
    myPathTextFieldWrapper.add(createHistoryButton(),BorderLayout.EAST);
  }
  myNorthPanel=new JPanel(new BorderLayout());
  myNorthPanel.add(toolbarPanel,BorderLayout.NORTH);
  updateTextFieldShowing();
  panel.add(myNorthPanel,BorderLayout.NORTH);
  registerMouseListener(group);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myFileSystemTree.getTree());
  panel.add(scrollPane,BorderLayout.CENTER);
  panel.setPreferredSize(JBUI.size(400));
  panel.add(new JLabel(DRAG_N_DROP_HINT,SwingConstants.CENTER),BorderLayout.SOUTH);
  ApplicationManager.getApplication().getMessageBus().connect(getDisposable()).subscribe(ApplicationActivationListener.TOPIC,new ApplicationActivationListener.Adapter(){
    @Override public void applicationActivated(    IdeFrame ideFrame){
      DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_MODAL,new Runnable(){
        @Override public void run(){
          ((SaveAndSyncHandlerImpl)SaveAndSyncHandler.getInstance()).maybeRefresh(ModalityState.current());
        }
      }
);
    }
  }
);
  return panel;
}
