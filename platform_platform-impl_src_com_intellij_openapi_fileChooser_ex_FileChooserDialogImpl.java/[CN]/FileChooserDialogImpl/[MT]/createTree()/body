{
  myFileSystemTree=new FileSystemTreeImpl(myProject,myChooserDescriptor);
  Disposer.register(myDisposable,myFileSystemTree);
  myFileSystemTree.addOkAction(new Runnable(){
    public void run(){
      doOKAction();
    }
  }
);
  JTree tree=myFileSystemTree.getTree();
  tree.setCellRenderer(new NodeRenderer());
  tree.getSelectionModel().addTreeSelectionListener(new FileTreeSelectionListener());
  tree.addTreeExpansionListener(new FileTreeExpansionListener());
  setOKActionEnabled(false);
  myFileSystemTree.addListener(new FileSystemTree.Listener(){
    public void selectionChanged(    final List<VirtualFile> selection){
      updatePathFromTree(selection,false);
    }
  }
,myDisposable);
  new FileDrop(tree,new FileDrop.Target(){
    public FileChooserDescriptor getDescriptor(){
      return myChooserDescriptor;
    }
    public boolean isHiddenShown(){
      return myFileSystemTree.areHiddensShown();
    }
    public void dropFiles(    final List<VirtualFile> files){
      if (!myChooserDescriptor.isChooseMultiple() && files.size() > 0) {
        selectInTree(new VirtualFile[]{files.get(0)},true);
      }
 else {
        selectInTree(VfsUtilCore.toVirtualFileArray(files),true);
      }
    }
  }
);
  return tree;
}
