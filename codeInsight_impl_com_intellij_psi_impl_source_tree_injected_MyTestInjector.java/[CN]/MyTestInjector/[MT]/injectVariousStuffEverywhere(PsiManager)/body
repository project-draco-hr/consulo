{
  final Language ql=findLanguageByID("JPAQL");
  final Language js=findLanguageByID("JavaScript");
  myMultiHostInjector=new MultiHostInjector(){
    public void getLanguagesToInject(    @NotNull MultiHostRegistrar registrar,    @NotNull PsiElement context){
      XmlAttributeValue value=(XmlAttributeValue)context;
      PsiElement parent=value.getParent();
      if (parent instanceof XmlAttribute) {
        @NonNls String attrName=((XmlAttribute)parent).getLocalName();
        if ("jsInBraces".equals(attrName)) {
          registrar.startInjecting(js);
          String text=value.getText();
          int index=0;
          while (text.indexOf('{',index) != -1) {
            int lbrace=text.indexOf('{',index);
            int rbrace=text.indexOf('}',index);
            registrar.addPlace("","",(PsiLanguageInjectionHost)value,new TextRange(lbrace + 1,rbrace));
            index=rbrace + 1;
          }
          registrar.doneInjecting();
        }
      }
    }
    @NotNull public List<? extends Class<? extends PsiElement>> elementsToInjectIn(){
      return Arrays.asList(XmlAttributeValue.class);
    }
  }
;
  InjectedLanguageManager.getInstance(psiManager.getProject()).registerMultiHostInjector(myMultiHostInjector);
  LanguageInjector myInjector=new LanguageInjector(){
    public void getLanguagesToInject(    @NotNull PsiLanguageInjectionHost host,    @NotNull InjectedLanguagePlaces placesToInject){
      if (host instanceof XmlAttributeValue) {
        XmlAttributeValue value=(XmlAttributeValue)host;
        PsiElement parent=value.getParent();
        if (parent instanceof XmlAttribute) {
          @NonNls String attrName=((XmlAttribute)parent).getLocalName();
          if ("ql".equals(attrName)) {
            inject(host,placesToInject,ql);
            return;
          }
          if ("js".equals(attrName)) {
            inject(host,placesToInject,js);
            return;
          }
          if ("jsprefix".equals(attrName)) {
            inject(host,placesToInject,js,"function foo(doc, window){","}");
            return;
          }
        }
      }
      if (host instanceof XmlText) {
        final XmlText xmlText=(XmlText)host;
        XmlTag tag=xmlText.getParentTag();
        if (tag == null)         return;
        if ("ql".equals(tag.getLocalName())) {
          inject(host,placesToInject,ql);
          return;
        }
        if ("js".equals(tag.getLocalName())) {
          inject(host,placesToInject,js);
          return;
        }
        if ("jsprefix".equals(tag.getLocalName())) {
          inject(host,placesToInject,js,"function foo(doc, window){","}");
          return;
        }
        if ("jsInHash".equals(tag.getLocalName())) {
          String text=xmlText.getText();
          if (text.contains("#")) {
            int start=text.indexOf('#');
            int end=text.lastIndexOf('#');
            if (start != end && start != -1) {
              placesToInject.addPlace(js,new TextRange(start + 1,end),null,null);
              return;
            }
          }
        }
      }
      if (host instanceof PsiCommentImpl) {
        String text=host.getText();
        if (text.startsWith("/*-{") && text.endsWith("}-*/")) {
          TextRange textRange=new TextRange(4,text.length() - 4);
          if (!(host.getParent() instanceof PsiMethod))           return;
          PsiMethod method=(PsiMethod)host.getParent();
          if (!method.hasModifierProperty(PsiModifier.NATIVE) || !method.hasModifierProperty(PsiModifier.PUBLIC))           return;
          String paramList="";
          for (          PsiParameter parameter : method.getParameterList().getParameters()) {
            if (paramList.length() != 0)             paramList+=",";
            paramList+=parameter.getName();
          }
          @NonNls String header="function " + method.getName() + "("+ paramList+ ") {";
          Language gwt=findLanguageByID("GWT JavaScript");
          placesToInject.addPlace(gwt,textRange,header,"}");
          return;
        }
      }
      if (host instanceof PsiLiteralExpression && ((PsiLiteralExpression)host).getValue() instanceof String) {
        PsiVariable variable=PsiTreeUtil.getParentOfType(host,PsiVariable.class);
        if (variable == null)         return;
        if (host.getParent() instanceof PsiBinaryExpression)         return;
        if ("ql".equals(variable.getName())) {
          placesToInject.addPlace(ql,textRangeToInject(host),null,null);
        }
        if ("xml".equals(variable.getName())) {
          placesToInject.addPlace(StdLanguages.XML,textRangeToInject(host),null,null);
        }
        if ("js".equals(variable.getName())) {
          placesToInject.addPlace(js,textRangeToInject(host),"function foo(doc,window) {","}");
        }
        if ("lang".equals(variable.getName())) {
          PsiClass aClass=PsiTreeUtil.getParentOfType(variable,PsiClass.class);
          aClass=aClass.findInnerClassByName("Language",false);
          String text=aClass.getInitializers()[0].getBody().getFirstBodyElement().getNextSibling().getText().substring(2);
          Language language=findLanguageByID(text);
          if (language != null) {
            placesToInject.addPlace(language,textRangeToInject(host),"","");
          }
        }
      }
    }
  }
;
  psiManager.registerLanguageInjector(myInjector);
  return myInjector;
}
