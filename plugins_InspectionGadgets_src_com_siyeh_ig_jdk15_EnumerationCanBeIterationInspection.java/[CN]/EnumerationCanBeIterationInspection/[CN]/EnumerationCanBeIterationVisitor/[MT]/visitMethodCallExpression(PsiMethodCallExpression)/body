{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if ("elements".equals(methodName)) {
    if (!TypeUtils.expressionHasTypeOrSubtype(qualifierExpression,"java.util.Vector")) {
      return;
    }
  }
 else   if ("keys".equals(methodName)) {
    if (!TypeUtils.expressionHasTypeOrSubtype(qualifierExpression,"java.util.Hashtable")) {
      return;
    }
  }
 else   if ("values".equals(methodName)) {
    if (!TypeUtils.expressionHasTypeOrSubtype(qualifierExpression,"java.util.Hashtable")) {
      return;
    }
  }
 else {
    return;
  }
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,"java.util.Enumeration")) {
    return;
  }
  registerMethodCallError(expression);
}
