{
  super.visitMethodCallExpression(expression);
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiLocalVariable)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  final boolean isElements;
  if ("elements".equals(methodName)) {
    isElements=true;
  }
 else   if ("keys".equals(methodName)) {
    isElements=false;
  }
 else {
    return;
  }
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,"java.util.Enumeration")) {
    return;
  }
  final PsiVariable variable=(PsiVariable)parent;
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(variable,PsiMethod.class);
  if (containingMethod == null) {
    return;
  }
  if (isEnumerationMethodCalled(variable,containingMethod)) {
    return;
  }
  if (isElements) {
    final PsiMethod method=expression.resolveMethod();
    if (method == null) {
      return;
    }
    final PsiClass containingClass=method.getContainingClass();
    if (ClassUtils.isSubclass(containingClass,"java.util.Vector")) {
      registerMethodCallError(expression,ITERATOR_TEXT);
    }
 else     if (ClassUtils.isSubclass(containingClass,"java.util.Hashtable")) {
      registerMethodCallError(expression,VALUES_ITERATOR_TEXT);
    }
  }
 else {
    final PsiMethod method=expression.resolveMethod();
    if (method == null) {
      return;
    }
    final PsiClass containingClass=method.getContainingClass();
    if (ClassUtils.isSubclass(containingClass,"java.util.Hashtable")) {
      registerMethodCallError(expression,KEY_SET_ITERATOR_TEXT);
    }
  }
}
