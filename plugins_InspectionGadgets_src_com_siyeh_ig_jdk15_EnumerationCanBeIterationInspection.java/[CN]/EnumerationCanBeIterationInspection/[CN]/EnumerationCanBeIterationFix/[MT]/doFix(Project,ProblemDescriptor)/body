{
  final PsiElement element=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)element.getParent();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)methodExpression.getParent();
  @NonNls final String methodName=methodExpression.getReferenceName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiManager manager=element.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  if ("elements".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Vector")) {
      final String qualifierText;
      if (qualifier == null) {
        qualifierText="";
      }
 else {
        qualifierText=qualifier.getText() + '.';
      }
      final PsiExpression expression=factory.createExpressionFromText(qualifierText + "iterator()",element);
      methodCallExpression.replace(expression);
    }
 else     if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
    }
  }
 else   if ("keys".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
    }
  }
}
