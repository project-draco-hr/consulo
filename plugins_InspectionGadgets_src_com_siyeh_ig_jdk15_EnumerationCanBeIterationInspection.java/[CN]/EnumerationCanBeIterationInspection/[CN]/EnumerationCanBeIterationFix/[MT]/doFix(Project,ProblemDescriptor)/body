{
  final PsiElement element=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)element.getParent();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)methodExpression.getParent();
  final PsiElement parent=methodCallExpression.getParent();
  boolean deleteEnumerationVariable=true;
  final PsiVariable variable;
  if (parent instanceof PsiVariable) {
    variable=(PsiVariable)parent;
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!(lhs instanceof PsiReferenceExpression)) {
      return;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiVariable)) {
      return;
    }
    variable=(PsiVariable)target;
    if (!(variable instanceof PsiLocalVariable)) {
      deleteEnumerationVariable=false;
    }
  }
 else {
    return;
  }
  final String variableName=createVariableName(element);
  final Query<PsiReference> query=ReferencesSearch.search(variable,variable.getUseScope());
  final int elementOffset=element.getTextOffset();
  boolean checkReassignment=false;
  for (  PsiReference reference : query) {
    final PsiElement referenceElement=reference.getElement();
    final PsiElement referenceParent=referenceElement.getParent();
    if (referenceParent instanceof PsiMethodCallExpression) {
      if (elementOffset < referenceParent.getTextOffset()) {
      }
    }
  }
  @NonNls final String methodName=methodExpression.getReferenceName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiManager manager=element.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  if ("elements".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Vector")) {
      final String qualifierText;
      if (qualifier == null) {
        qualifierText="";
      }
 else {
        qualifierText=qualifier.getText() + '.';
      }
      final PsiStatement newStatement=factory.createStatementFromText("Iterator " + variableName + ' '+ qualifierText+ "iterator()",element);
      element.replace(newStatement);
    }
 else     if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
    }
  }
 else   if ("keys".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
    }
  }
}
