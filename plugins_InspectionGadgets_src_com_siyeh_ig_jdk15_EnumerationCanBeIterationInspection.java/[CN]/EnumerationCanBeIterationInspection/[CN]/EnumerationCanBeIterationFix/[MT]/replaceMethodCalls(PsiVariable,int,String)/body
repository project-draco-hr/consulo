{
  final PsiManager manager=enumerationVariable.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  boolean deleteInitialization=true;
  final Query<PsiReference> query=ReferencesSearch.search(enumerationVariable);
  for (  PsiReference reference : query) {
    final PsiElement referenceElement=reference.getElement();
    if (!(referenceElement instanceof PsiReferenceExpression)) {
      deleteInitialization=false;
      continue;
    }
    if (referenceElement.getTextOffset() <= startOffset) {
      continue;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)referenceElement;
    final PsiElement referenceParent=referenceExpression.getParent();
    if (!(referenceParent instanceof PsiReferenceExpression)) {
      if (referenceParent instanceof PsiAssignmentExpression) {
        break;
      }
      deleteInitialization=false;
      continue;
    }
    final PsiElement referenceGrandParent=referenceParent.getParent();
    if (!(referenceGrandParent instanceof PsiMethodCallExpression)) {
      deleteInitialization=false;
      continue;
    }
    final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)referenceGrandParent;
    final PsiReferenceExpression foundReferenceExpression=callExpression.getMethodExpression();
    final String foundName=foundReferenceExpression.getReferenceName();
    final String newExpressionText;
    if ("hasMoreElements".equals(foundName)) {
      newExpressionText=newVariableName + ".hasNext()";
    }
 else     if ("nextElement".equals(foundName)) {
      newExpressionText=newVariableName + ".next()";
    }
 else {
      deleteInitialization=false;
      continue;
    }
    final PsiExpression newExpression=factory.createExpressionFromText(newExpressionText,callExpression);
    callExpression.replace(newExpression);
  }
  return deleteInitialization;
}
