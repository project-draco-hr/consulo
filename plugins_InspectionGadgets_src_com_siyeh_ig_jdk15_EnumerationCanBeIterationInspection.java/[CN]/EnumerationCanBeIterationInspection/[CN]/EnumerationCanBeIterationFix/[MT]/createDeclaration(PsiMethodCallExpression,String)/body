{
  final StringBuilder newStatementText=new StringBuilder();
  final Project project=methodCallExpression.getProject();
  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
  if (codeStyleSettings.GENERATE_FINAL_LOCALS) {
    newStatementText.append("final ");
  }
  newStatementText.append("Iterator ");
  newStatementText.append(variableName);
  newStatementText.append('=');
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final String qualifierText;
  if (qualifier == null) {
    qualifierText="";
  }
 else {
    qualifierText=qualifier.getText() + '.';
  }
  newStatementText.append(qualifierText);
  @NonNls final String methodName=methodExpression.getReferenceName();
  if ("elements".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Vector")) {
      newStatementText.append(ITERATOR_TEXT);
    }
 else     if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
      newStatementText.append(VALUES_ITERATOR_TEXT);
    }
 else {
      return null;
    }
  }
 else   if ("keys".equals(methodName)) {
    if (TypeUtils.expressionHasTypeOrSubtype(qualifier,"java.util.Hashtable")) {
      newStatementText.append(KEY_SET_ITERATOR_TEXT);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
  newStatementText.append(';');
  final PsiManager manager=methodCallExpression.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  return factory.createStatementFromText(newStatementText.toString(),methodExpression);
}
