{
  final PsiExpression[] args=instruction.getArgs();
  Map<PsiExpression,Nullness> map=myParametersNullability.get(instruction);
  for (int i=0; i < args.length; i++) {
    final DfaValue arg=memState.pop();
    PsiExpression expr=args[(args.length - i - 1)];
    if (map.get(expr) == Nullness.NOT_NULL) {
      if (!checkNotNullable(memState,arg,NullabilityProblem.passingNullableToNotNullParameter,expr)) {
        if (arg instanceof DfaVariableValue) {
          memState.setVarValue((DfaVariableValue)arg,runner.getFactory().createTypeValue(((DfaVariableValue)arg).getVariableType(),Nullness.NOT_NULL));
        }
      }
    }
 else     if (map.get(expr) == Nullness.UNKNOWN) {
      checkNotNullable(memState,arg,NullabilityProblem.passingNullableArgumentToNonAnnotatedParameter,expr);
    }
  }
  @NotNull final DfaValue qualifier=memState.pop();
  try {
    boolean unboxing=instruction.getMethodType() == MethodCallInstruction.MethodType.UNBOXING;
    NullabilityProblem problem=unboxing ? NullabilityProblem.unboxingNullable : NullabilityProblem.callNPE;
    PsiExpression anchor=unboxing ? instruction.getContext() : instruction.getCallExpression();
    if (!checkNotNullable(memState,qualifier,problem,anchor)) {
      if (qualifier instanceof DfaVariableValue) {
        memState.setVarValue((DfaVariableValue)qualifier,runner.getFactory().createTypeValue(((DfaVariableValue)qualifier).getVariableType(),Nullness.NOT_NULL));
      }
    }
    return nextInstruction(instruction,runner,memState);
  }
  finally {
    memState.push(getMethodResultValue(instruction,qualifier,runner.getFactory()));
    if (instruction.shouldFlushFields()) {
      memState.flushFields(runner.getFields());
    }
  }
}
