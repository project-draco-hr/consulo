{
  final String ownerClassName=task.getOwnerClassName();
  final String fieldName=task.getFieldName();
  final int accessFlags=task.getAccessFlags();
  final boolean accessChanged=task.getIsAccessChanged();
  final boolean isRemoved=task.getIsFieldRemoved();
  final Ref<Boolean> isSuccess=Ref.create(Boolean.TRUE);
  final Set<String> affectedPaths=new HashSet<String>();
  try {
    if (isDumbMode()) {
      isSuccess.set(Boolean.FALSE);
      LOG.debug("Constant search task: cannot search in dumb mode");
    }
 else {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          try {
            String qualifiedName=ownerClassName.replace('$','.');
            final PsiClass[] classes=JavaPsiFacade.getInstance(myProject).findClasses(qualifiedName,GlobalSearchScope.allScope(myProject));
            if (isRemoved) {
              if (classes.length > 0) {
                for (                PsiClass aClass : classes) {
                  final boolean success=performRemovedConstantSearch(aClass,fieldName,accessFlags,affectedPaths);
                  if (!success) {
                    isSuccess.set(Boolean.FALSE);
                    break;
                  }
                }
              }
 else {
                isSuccess.set(performRemovedConstantSearch(null,fieldName,accessFlags,affectedPaths));
              }
            }
 else {
              if (classes.length > 0) {
                boolean foundAtLeastOne=false;
                for (                PsiClass aClass : classes) {
                  PsiField changedField=null;
                  for (                  PsiField psiField : aClass.getFields()) {
                    if (fieldName.equals(psiField.getName())) {
                      changedField=psiField;
                      break;
                    }
                  }
                  if (changedField == null) {
                    continue;
                  }
                  foundAtLeastOne=true;
                  final boolean sucess=performChangedConstantSearch(aClass,changedField,accessFlags,accessChanged,affectedPaths);
                  if (!sucess) {
                    isSuccess.set(Boolean.FALSE);
                    break;
                  }
                }
                if (!foundAtLeastOne) {
                  isSuccess.set(Boolean.FALSE);
                  LOG.debug("Constant search task: field " + fieldName + " not found in classes "+ qualifiedName);
                }
              }
 else {
                isSuccess.set(Boolean.FALSE);
                LOG.debug("Constant search task: class " + qualifiedName + " not found");
              }
            }
          }
 catch (          Throwable e) {
            isSuccess.set(Boolean.FALSE);
            LOG.debug("Constant search task: failed with message " + e.getMessage());
          }
        }
      }
);
    }
  }
  finally {
    final CmdlineRemoteProto.Message.ControllerMessage.ConstantSearchResult.Builder builder=CmdlineRemoteProto.Message.ControllerMessage.ConstantSearchResult.newBuilder();
    builder.setOwnerClassName(ownerClassName);
    builder.setFieldName(fieldName);
    if (isSuccess.get()) {
      builder.setIsSuccess(true);
      builder.addAllPath(affectedPaths);
      LOG.debug("Constant search task: " + affectedPaths.size() + " affected files found");
    }
 else {
      builder.setIsSuccess(false);
      LOG.debug("Constant search task: unsuccessful");
    }
    Channels.write(channel,CmdlineProtoUtil.toMessage(sessionId,CmdlineRemoteProto.Message.ControllerMessage.newBuilder().setType(CmdlineRemoteProto.Message.ControllerMessage.Type.CONSTANT_SEARCH_RESULT).setConstantSearchResult(builder.build()).build()));
  }
}
