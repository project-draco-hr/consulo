{
  SearchScope searchScope=GlobalSearchScope.projectScope(myProject);
  if (aClass != null && ClsUtil.isPackageLocal(accessFlags)) {
    final PsiFile containingFile=aClass.getContainingFile();
    if (containingFile instanceof PsiJavaFile) {
      final String packageName=((PsiJavaFile)containingFile).getPackageName();
      final PsiPackage aPackage=JavaPsiFacade.getInstance(myProject).findPackage(packageName);
      if (aPackage != null) {
        searchScope=PackageScope.packageScope(aPackage,false);
        searchScope=searchScope.intersectWith(aClass.getUseScope());
      }
    }
  }
  final PsiSearchHelper psiSearchHelper=PsiSearchHelper.SERVICE.getInstance(myProject);
  final Ref<Boolean> result=new Ref<Boolean>(Boolean.TRUE);
  processIdentifiers(psiSearchHelper,new PsiElementProcessor<PsiIdentifier>(){
    @Override public boolean execute(    @NotNull PsiIdentifier identifier){
      try {
        final PsiElement parent=identifier.getParent();
        if (parent instanceof PsiReferenceExpression) {
          final PsiClass ownerClass=getOwnerClass(parent);
          if (ownerClass != null) {
            if (ownerClass.getQualifiedName() != null) {
              affect(ownerClass,affectedPaths);
            }
          }
        }
        return true;
      }
 catch (      PsiInvalidElementAccessException e) {
        result.set(Boolean.FALSE);
        return false;
      }
    }
  }
,fieldName,searchScope,UsageSearchContext.IN_CODE);
  return result.get();
}
