{
  final TestNGConfiguration configuration=(TestNGConfiguration)getModel().getProperties().getConfiguration();
  final List<AbstractTestProxy> failedTests=getFailedTests(configuration.getProject());
  return new MyRunProfile(configuration){
    @NotNull public Module[] getModules(){
      return Module.EMPTY_ARRAY;
    }
    public RunProfileState getState(    @NotNull Executor executor,    @NotNull ExecutionEnvironment env) throws ExecutionException {
      return new TestNGRunnableState(env,configuration){
        @Override protected SearchingForTestsTask createSearchingForTestsTask(        ServerSocket serverSocket,        boolean is15,        final TestNGConfiguration config,        final File tempFile){
          return new SearchingForTestsTask(serverSocket,is15,config,tempFile,client){
            @Override protected void fillTestObjects(            final Map<PsiClass,Collection<PsiMethod>> classes) throws CantRunException {
              for (              AbstractTestProxy proxy : failedTests) {
                final Location location=proxy.getLocation(config.getProject());
                if (location != null) {
                  final PsiElement element=location.getPsiElement();
                  if (element instanceof PsiMethod && element.isValid()) {
                    final PsiMethod psiMethod=(PsiMethod)element;
                    final PsiClass psiClass=psiMethod.getContainingClass();
                    Collection<PsiMethod> psiMethods=classes.get(psiClass);
                    if (psiMethods == null) {
                      psiMethods=new ArrayList<PsiMethod>();
                      classes.put(psiClass,psiMethods);
                    }
                    psiMethods.add(psiMethod);
                  }
                }
              }
            }
          }
;
        }
      }
;
    }
  }
;
}
