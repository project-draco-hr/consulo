{
  final List<AbstractTestProxy> failed=getFailedTests();
  final DataContext dataContext=e.getDataContext();
  final TestNGConfiguration configuration=myConsoleProperties.getConfiguration();
  boolean isDebug=myConsoleProperties.isDebug();
  try {
    final RunProfile profile=new ModuleRunProfile(){
      public RunProfileState getState(      DataContext context,      Executor executor,      RunnerSettings runnerSettings,      ConfigurationPerRunnerSettings configurationSettings) throws ExecutionException {
        return new TestNGRunnableState(runnerSettings,configurationSettings,configuration){
          protected void fillTestObjects(          final Map<PsiClass,Collection<PsiMethod>> classes,          final Project project) throws CantRunException {
            for (            AbstractTestProxy proxy : failed) {
              final Location location=proxy.getLocation(project);
              if (location != null) {
                final PsiElement element=location.getPsiElement();
                if (element instanceof PsiMethod) {
                  final PsiMethod psiMethod=(PsiMethod)element;
                  final PsiClass psiClass=psiMethod.getContainingClass();
                  Collection<PsiMethod> psiMethods=classes.get(psiClass);
                  if (psiMethods == null) {
                    psiMethods=new ArrayList<PsiMethod>();
                    classes.put(psiClass,psiMethods);
                  }
                  psiMethods.add(psiMethod);
                }
              }
            }
          }
        }
;
      }
      public String getName(){
        return ExecutionBundle.message("rerun.failed.tests.action.name");
      }
      public void checkConfiguration() throws RuntimeConfigurationException {
      }
      public Module[] getModules(){
        return Module.EMPTY_ARRAY;
      }
    }
;
    final Executor executor=isDebug ? DefaultDebugExecutor.getDebugExecutorInstance() : DefaultRunExecutor.getRunExecutorInstance();
    final ProgramRunner runner=RunnerRegistry.getInstance().getRunner(executor.getId(),profile);
    LOG.assertTrue(runner != null);
    runner.execute(executor,profile,dataContext,myRunnerSettings,myConfigurationPerRunnerSettings);
  }
 catch (  ExecutionException e1) {
    LOG.error(e1);
  }
}
