{
  Disposer.register(parentDisposable,this);
  myProject=project;
  myLogProviders=logProviders;
  myDataLoaderQueue=new BackgroundTaskQueue(project,"Loading history...");
  myMiniDetailsGetter=new MiniDetailsGetter(this,logProviders);
  myDetailsGetter=new CommitDetailsGetter(this,logProviders);
  mySettings=settings;
  myUserRegistry=(VcsUserRegistryImpl)ServiceManager.getService(project,VcsUserRegistry.class);
  try {
    myHashMap=new VcsLogHashMap(myProject,logProviders);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  myContainingBranchesGetter=new ContainingBranchesGetter(this,this);
  myFilterer=new VcsLogFiltererImpl(myProject,myLogProviders,myHashMap,myTopCommitsDetailsCache,myDetailsGetter,uiProperties.isBek() ? PermanentGraph.SortType.Bek : PermanentGraph.SortType.Normal,visiblePackConsumer);
  myDataPackUpdateHandler=new Consumer<DataPack>(){
    @Override public void consume(    DataPack dataPack){
      myFilterer.onRefresh(dataPack);
    }
  }
;
  myRefresher=new VcsLogRefresherImpl(myProject,myHashMap,myLogProviders,myUserRegistry,myTopCommitsDetailsCache,myDataPackUpdateHandler,new Consumer<Exception>(){
    @Override public void consume(    Exception e){
      if (!(e instanceof ProcessCanceledException)) {
        LOG.error(e);
      }
    }
  }
,mySettings.getRecentCommitsCount());
}
