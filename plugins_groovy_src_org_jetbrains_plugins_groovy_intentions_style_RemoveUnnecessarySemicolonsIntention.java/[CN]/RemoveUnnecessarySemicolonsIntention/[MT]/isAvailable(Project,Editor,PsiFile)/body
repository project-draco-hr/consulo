{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (!(file instanceof GroovyFileBase))   return false;
  if (selectionModel.hasBlockSelection())   return false;
  if (selectionModel.hasSelection()) {
    final HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(selectionModel.getSelectionStart());
    final int end=selectionModel.getSelectionEnd();
    while (!iterator.atEnd()) {
      if (iterator.getTokenType() == GroovyTokenTypes.mSEMI)       return true;
      if (iterator.getStart() > end)       return false;
      iterator.advance();
    }
    return false;
  }
  int offset=editor.getCaretModel().getOffset();
  if (offset >= editor.getDocument().getTextLength())   offset=editor.getDocument().getTextLength() - 1;
  final PsiElement element=file.findElementAt(offset);
  if (element == null)   return false;
  if (element.getNode().getElementType() == GroovyTokenTypes.mSEMI)   return true;
  final PsiElement next=PsiTreeUtil.nextLeaf(element);
  if (next != null && next.getNode().getElementType() == GroovyTokenTypes.mSEMI)   return true;
  final PsiElement prev=PsiTreeUtil.prevLeaf(element);
  if (prev != null && prev.getNode().getElementType() == GroovyTokenTypes.mSEMI)   return true;
  return false;
}
