{
  if (myBuilder.isSelectionBeingAdjusted()) {
    return new ActionCallback.Rejected();
  }
  final ActionCallback callback=new ActionCallback();
  myQueuedConfigurable=configurable;
  final Update update=new Update(this){
    public void run(){
      if (configurable != myQueuedConfigurable)       return;
      if (configurable == null) {
        myTree.getSelectionModel().clearSelection();
        myContext.fireSelected(null,OptionsTree.this);
      }
 else {
        myBuilder.getReady(this).doWhenDone(new Runnable(){
          @Override public void run(){
            if (configurable != myQueuedConfigurable)             return;
            final EditorNode editorNode=myConfigurable2Node.get(configurable);
            FilteringTreeStructure.FilteringNode editorUiNode=myBuilder.getVisibleNodeFor(editorNode);
            if (editorUiNode == null)             return;
            if (!myBuilder.getSelectedElements().contains(editorUiNode)) {
              myBuilder.select(editorUiNode,new Runnable(){
                public void run(){
                  fireSelected(configurable,callback);
                }
              }
);
            }
 else {
              myBuilder.scrollSelectionToVisible(new Runnable(){
                public void run(){
                  fireSelected(configurable,callback);
                }
              }
,false);
            }
          }
        }
);
      }
    }
    @Override public void setRejected(){
      super.setRejected();
      callback.setRejected();
    }
  }
;
  mySelection.queue(update);
  return callback;
}
