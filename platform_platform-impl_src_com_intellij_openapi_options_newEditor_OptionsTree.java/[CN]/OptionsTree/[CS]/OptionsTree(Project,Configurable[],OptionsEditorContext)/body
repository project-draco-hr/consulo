{
  super(new BorderLayout());
  myProject=project;
  myConfigurables=configurables;
  myContext=context;
  myRoot=new Root();
  final SimpleTreeStructure structure=new SimpleTreeStructure(){
    @Override public Object getRootElement(){
      return myRoot;
    }
  }
;
  myTree=new SimpleTree(){
    @Override protected boolean paintNodes(){
      return false;
    }
  }
;
  TreeUtil.installActions(myTree);
  myTree.setBorder(JBUI.Borders.empty());
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setFont(UIUtil.getLabelFont(UIUtil.FontSize.BIGGER));
  myBuilder=new MyBuilder(structure);
  myBuilder.setFilteringMerge(300,null);
  Disposer.register(this,myBuilder);
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    final ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentMoved(    final ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentShown(    final ComponentEvent e){
      myBuilder.revalidateTree();
    }
  }
);
  final JScrollPane scrolls=ScrollPaneFactory.createScrollPane(myTree,true);
  scrolls.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  add(scrolls,BorderLayout.CENTER);
  mySelection=new MergingUpdateQueue("OptionsTree",150,false,this,this,this).setRestartTimerOnAdd(true);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    final TreeSelectionEvent e){
      final TreePath path=e.getNewLeadSelectionPath();
      if (path == null) {
        queueSelection(null);
      }
 else {
        final Base base=extractNode(path.getLastPathComponent());
        queueSelection(base != null ? base.getConfigurable() : null);
      }
    }
  }
);
  myTree.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
    @Override public void keyPressed(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
    @Override public void keyReleased(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
  }
);
}
