{
  JComponent result;
  Color fg=UIUtil.getTreeTextForeground();
  final Base base=extractNode(value);
  if (base instanceof EditorNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    final EditorNode editor=(EditorNode)base;
    ConfigurableGroup group=null;
    if (editor.getParent() == myRoot) {
      final DefaultMutableTreeNode prevValue=((DefaultMutableTreeNode)value).getPreviousSibling();
      if (prevValue == null || prevValue instanceof LoadingNode) {
        group=editor.getGroup();
      }
 else {
        final Base prevBase=extractNode(prevValue);
        if (prevBase instanceof EditorNode) {
          final EditorNode prevEditor=(EditorNode)prevBase;
          if (prevEditor.getGroup() != editor.getGroup()) {
            group=editor.getGroup();
          }
        }
      }
    }
    int forcedWidth=2000;
    TreePath path=tree.getPathForRow(row);
    if (path == null) {
      if (value instanceof DefaultMutableTreeNode) {
        path=new TreePath(((DefaultMutableTreeNode)value).getPath());
      }
    }
    final boolean toStretch=tree.isVisible() && path != null;
    if (toStretch) {
      final Rectangle visibleRect=tree.getVisibleRect();
      int nestingLevel=tree.isRootVisible() ? path.getPathCount() - 1 : path.getPathCount() - 2;
      final int left=UIManager.getInt("Tree.leftChildIndent");
      final int right=UIManager.getInt("Tree.rightChildIndent");
      final Insets treeInsets=tree.getInsets();
      int indent=(left + right) * nestingLevel + (treeInsets != null ? treeInsets.left + treeInsets.right : 0);
      forcedWidth=visibleRect.width > 0 ? visibleRect.width - indent : forcedWidth;
    }
    result=configureComponent(base.getText(),base.getText(),null,null,row == -1 ? true : selected,group != null,group != null ? group.getDisplayName() : null,forcedWidth - 4);
    if (base.isError()) {
      fg=Color.red;
    }
 else     if (base.isModified()) {
      fg=Color.blue;
    }
  }
 else {
    result=configureComponent(value.toString(),null,null,null,selected,false,null,-1);
  }
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    TreePath nodePath=new TreePath(node.getPath());
    myHandle.setIcon(((SimpleTree)tree).getHandleIcon(node,nodePath));
  }
 else {
    myHandle.setIcon(null);
  }
  myTextLabel.setForeground(selected ? UIUtil.getTreeSelectionForeground() : fg);
  myTextLabel.setOpaque(selected);
  return result;
}
