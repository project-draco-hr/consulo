{
  if (projectsWithInconsistentModuleType.isEmpty()) {
    return;
  }
  final int[] result=new int[1];
  MavenUtil.invokeAndWait(myProject,ModalityState.NON_MODAL,new Runnable(){
    public void run(){
      result[0]=Messages.showDialog(myProject,ProjectBundle.message("maven.import.message.remove.modules",formatModules(projectsWithInconsistentModuleType.values()),ProjectBundle.message("maven.continue.button"),ProjectBundle.message("maven.skip.button"),formatProjects(projectsWithInconsistentModuleType.keySet())),ProjectBundle.message("maven.tab.importing"),new String[]{ProjectBundle.message("maven.continue.button"),ProjectBundle.message("maven.skip.button")},0,Messages.getQuestionIcon());
    }
  }
);
  if (result[0] == 0) {
    for (    Map.Entry<MavenProject,Module> entry : projectsWithInconsistentModuleType.entrySet()) {
      myFileToModuleMapping.remove(entry.getKey().getFile());
      final Module module=entry.getValue();
      if (!module.isDisposed()) {
        myModuleModel.disposeModule(module);
      }
    }
  }
 else {
    myProjectsTree.setIgnoredStateDoNotFireEvent(projectsWithInconsistentModuleType.keySet(),true);
  }
}
