{
  final List<Pair<MavenProject,Module>> incompatible=collectIncompatibleModulesWithProjects();
  if (incompatible.isEmpty())   return false;
  final int[] result=new int[1];
  MavenUtil.invokeAndWait(myProject,myModelsProvider.getModalityStateForQuestionDialogs(),new Runnable(){
    public void run(){
      String message=ProjectBundle.message("maven.import.incompatible.modules",formatProjectsWithModules(incompatible),incompatible.size() == 1 ? "" : "s");
      String[] options={ProjectBundle.message("maven.import.incompatible.modules.recreate"),ProjectBundle.message("maven.import.incompatible.modules.ignore")};
      result[0]=Messages.showOkCancelDialog(myProject,message,ProjectBundle.message("maven.tab.importing"),options[0],options[1],Messages.getQuestionIcon());
    }
  }
);
  if (result[0] == 0) {
    for (    Pair<MavenProject,Module> each : incompatible) {
      myFileToModuleMapping.remove(each.first.getFile());
      myModuleModel.disposeModule(each.second);
    }
    return true;
  }
 else {
    myProjectsTree.setIgnoredState(MavenUtil.collectFirsts(incompatible),true,true);
    return false;
  }
}
