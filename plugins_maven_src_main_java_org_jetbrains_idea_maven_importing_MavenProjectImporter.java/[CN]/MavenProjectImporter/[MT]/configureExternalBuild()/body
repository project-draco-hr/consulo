{
  final File projectSystemDir=BuildManager.getInstance().getProjectSystemDirectory(myProject);
  if (projectSystemDir == null) {
    return;
  }
  final File mavenConfigFile=new File(projectSystemDir,MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH);
  final MavenProjectConfiguration projectConfig=new MavenProjectConfiguration();
  for (  Map.Entry<MavenProject,Module> entry : myMavenProjectToModule.entrySet()) {
    final Module module=entry.getValue();
    final MavenProject mavenProject=entry.getKey();
    if (module == null || mavenProject == null) {
      continue;
    }
    final MavenModuleResourceConfiguration resourceConfig=new MavenModuleResourceConfiguration();
    addResources(resourceConfig.myResources,mavenProject.getResources());
    addResources(resourceConfig.myTestResources,mavenProject.getTestResources());
    resourceConfig.myFilteringExcludedExtensions.addAll(getFilterExclusions(mavenProject));
    final Properties properties=getFilteringProperties(mavenProject);
    for (    Map.Entry<Object,Object> propEntry : properties.entrySet()) {
      resourceConfig.myProperties.put((String)propEntry.getKey(),(String)propEntry.getValue());
    }
    resourceConfig.escapeString=MavenJDOMUtil.findChildValueByPath(mavenProject.getPluginConfiguration("org.apache.maven.plugins","maven-resources-plugin"),"escapeString","\\");
    projectConfig.moduleConfigurations.put(module.getName(),resourceConfig);
  }
  try {
    final Document document=new Document(new Element("maven-project-configuration"));
    XmlSerializer.serializeInto(projectConfig,document.getRootElement());
    FileUtil.createIfDoesntExist(mavenConfigFile);
    JDOMUtil.writeDocument(document,mavenConfigFile,"\n");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
