{
  Map<MavenProject,MavenProjectChanges> projectsWithChanges=myProjectsToImportWithChanges;
  Set<MavenProject> projects=projectsWithChanges.keySet();
  Set<MavenProject> projectsWithNewlyCreatedModules=new THashSet<MavenProject>();
  for (  MavenProject each : projects) {
    if (ensureModuleCreated(each)) {
      projectsWithNewlyCreatedModules.add(each);
    }
  }
  final Map<Module,MavenModuleImporter> moduleImporters=new THashMap<Module,MavenModuleImporter>();
  for (  Map.Entry<MavenProject,MavenProjectChanges> each : projectsWithChanges.entrySet()) {
    MavenProject project=each.getKey();
    Module module=myMavenProjectToModule.get(project);
    boolean isNewModule=projectsWithNewlyCreatedModules.contains(project);
    MavenModuleImporter moduleImporter=createModuleImporter(module,Pair.create(project,each.getValue()));
    moduleImporters.put(module,moduleImporter);
    moduleImporter.config(isNewModule);
  }
  for (  MavenProject each : projects) {
    moduleImporters.get(myMavenProjectToModule.get(each)).preConfigFacets();
  }
  for (  MavenProject each : projects) {
    moduleImporters.get(myMavenProjectToModule.get(each)).configFacets(postTasks);
  }
  setMavenizedModules(moduleImporters.keySet(),true);
}
