{
  Map<MavenProject,MavenProjectChanges> projectsWithChanges=myProjectsToImportWithChanges;
  Set<MavenProject> projectsWithNewlyCreatedModules=new THashSet<MavenProject>();
  for (  MavenProject each : projectsWithChanges.keySet()) {
    if (ensureModuleCreated(each)) {
      projectsWithNewlyCreatedModules.add(each);
    }
  }
  List<Module> modulesToMavenize=new ArrayList<Module>();
  List<MavenModuleImporter> importers=new ArrayList<MavenModuleImporter>();
  for (  Map.Entry<MavenProject,MavenProjectChanges> each : projectsWithChanges.entrySet()) {
    MavenProject project=each.getKey();
    Module module=myMavenProjectToModule.get(project);
    boolean isNewModule=projectsWithNewlyCreatedModules.contains(project);
    MavenModuleImporter moduleImporter=createModuleImporter(module,project,each.getValue());
    modulesToMavenize.add(module);
    importers.add(moduleImporter);
    moduleImporter.config(isNewModule);
  }
  for (  MavenProject project : myAllProjects) {
    if (!projectsWithChanges.containsKey(project)) {
      Module module=myMavenProjectToModule.get(project);
      if (module == null)       continue;
      importers.add(createModuleImporter(module,project,null));
    }
  }
  for (  MavenModuleImporter importer : importers) {
    importer.preConfigFacets();
  }
  for (  MavenModuleImporter importer : importers) {
    importer.configFacets(postTasks);
  }
  setMavenizedModules(modulesToMavenize,true);
}
