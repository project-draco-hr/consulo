{
  List<MavenProjectsProcessorTask> postTasks=new ArrayList<MavenProjectsProcessorTask>();
  boolean hasChanges;
  myAllProjects=new LinkedHashSet<MavenProject>(myProjectsTree.getProjects());
  myAllProjects.addAll(myProjectsToImportWithChanges.keySet());
  hasChanges=deleteIncompatibleModules();
  myProjectsToImportWithChanges=collectProjectsToImport(myProjectsToImportWithChanges);
  mapMavenProjectsToModulesAndNames();
  if (myProject.isDisposed())   return null;
  final boolean projectsHaveChanges=projectsToImportHaveChanges();
  if (projectsHaveChanges) {
    hasChanges=true;
    importModules(postTasks);
    scheduleRefreshResolvedArtifacts(postTasks);
  }
  if (projectsHaveChanges || myImportModuleGroupsRequired) {
    hasChanges=true;
    configModuleGroups();
  }
  if (myProject.isDisposed())   return null;
  boolean modulesDeleted=deleteObsoleteModules();
  hasChanges|=modulesDeleted;
  if (hasChanges) {
    removeUnusedProjectLibraries();
  }
  final boolean finalHasChanges=hasChanges;
  MavenUtil.invokeAndWaitWriteAction(myProject,new Runnable(){
    public void run(){
      if (finalHasChanges) {
        myModelsProvider.commit();
        if (projectsHaveChanges) {
          removeOutdatedCompilerConfigSettings();
          for (          MavenProject mavenProject : myAllProjects) {
            Module module=myMavenProjectToModule.get(mavenProject);
            for (            MavenModuleConfigurer configurer : MavenModuleConfigurer.getConfigurers()) {
              configurer.configure(mavenProject,myProject,module);
            }
          }
        }
      }
 else {
        myModelsProvider.dispose();
      }
    }
  }
);
  return postTasks;
}
