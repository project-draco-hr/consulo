{
  if (!myImportingSettings.isCreateModuleGroups())   return;
  final Stack<String> groups=new Stack<String>();
  final boolean createTopLevelGroup=myProjectsTree.getRootProjects().size() > 1;
  myProjectsTree.visit(new MavenProjectsTree.SimpleVisitor(){
    int depth=0;
    public void visit(    MavenProject each){
      depth++;
      String name=myMavenProjectToModuleName.get(each);
      if (shouldCreateGroup(each)) {
        groups.push(ProjectBundle.message("module.group.name",name));
      }
      if (!shouldCreateModuleFor(each)) {
        return;
      }
      Module module=myModuleModel.findModuleByName(name);
      if (module == null) {
        String message="Module " + name + "not found.";
        message+="\nmavenProject=" + each.getFile();
        module=myMavenProjectToModule.get(each);
        message+="\nmyMavenProjectToModule=" + (module == null ? null : module.getName());
        message+="\nmyMavenProjectToModuleName=" + myMavenProjectToModuleName.get(each);
        message+="\nmyMavenProjectToModulePath=" + myMavenProjectToModulePath.get(each);
        MavenLog.LOG.warn(message);
        return;
      }
      myModuleModel.setModuleGroupPath(module,groups.isEmpty() ? null : groups.toArray(new String[groups.size()]));
    }
    public void leave(    MavenProject each){
      if (shouldCreateGroup(each)) {
        groups.pop();
      }
      depth--;
    }
    private boolean shouldCreateGroup(    MavenProject project){
      return !myProjectsTree.getModules(project).isEmpty() && (createTopLevelGroup || depth > 1);
    }
  }
);
}
