{
  if (isFileReadOnly(project,file)) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)findMatchingElement(file,editor);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final String fromMethodName=methodExpression.getReferenceName();
  final String toMethodName;
  if ("assertTrue".equals(fromMethodName)) {
    toMethodName="assertFalse";
  }
 else {
    toMethodName="assertTrue";
  }
  final PsiExpression qualifierExp=methodExpression.getQualifierExpression();
  final String qualifier;
  if (qualifierExp == null) {
    qualifier="";
  }
 else {
    qualifier=qualifierExp.getText() + '.';
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final String callString;
  if (args.length == 1) {
    final PsiExpression arg=args[0];
    callString=qualifier + toMethodName + '('+ BoolUtils.getNegatedExpressionText(arg)+ ')';
  }
 else {
    final PsiExpression arg=args[1];
    callString=qualifier + toMethodName + '('+ args[0].getText()+ ','+ BoolUtils.getNegatedExpressionText(arg)+ ')';
  }
  replaceExpression(project,callString,call);
}
