{
  if (refEntity instanceof RefMethod) {
    final RefMethod refMethod=(RefMethod)refEntity;
    if (refMethod.isSyntheticJSP())     return null;
    if (refMethod.hasSuperMethods())     return null;
    if (refMethod.isEntry())     return null;
    PsiClass[] unThrown=refMethod.getUnThrownExceptions();
    if (unThrown == null)     return null;
    PsiMethod psiMethod=(PsiMethod)refMethod.getElement();
    PsiClassType[] throwsList=psiMethod.getThrowsList().getReferencedTypes();
    PsiJavaCodeReferenceElement[] throwsRefs=psiMethod.getThrowsList().getReferenceElements();
    ArrayList<ProblemDescriptor> problems=null;
    final PsiManager psiManager=psiMethod.getManager();
    for (int i=0; i < throwsList.length; i++) {
      final PsiClassType throwsType=throwsList[i];
      final String throwsClassName=throwsType.getClassName();
      final PsiJavaCodeReferenceElement throwsRef=throwsRefs[i];
      if (ExceptionUtil.isUncheckedException(throwsType))       continue;
      if (declaredInRemotableMethod(psiMethod,throwsType))       continue;
      for (      PsiClass s : unThrown) {
        final PsiClass throwsResolvedType=throwsType.resolve();
        if (psiManager.areElementsEquivalent(s,throwsResolvedType)) {
          if (problems == null)           problems=new ArrayList<ProblemDescriptor>(1);
          if (refMethod.isAbstract() || refMethod.getOwnerClass().isInterface()) {
            problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor","<code>#ref</code>"),getFix(processor,throwsClassName),ProblemHighlightType.LIKE_UNUSED_SYMBOL,false));
          }
 else           if (!refMethod.getDerivedMethods().isEmpty()) {
            problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor1","<code>#ref</code>"),getFix(processor,throwsClassName),ProblemHighlightType.LIKE_UNUSED_SYMBOL,false));
          }
 else {
            problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor2","<code>#ref</code>"),getFix(processor,throwsClassName),ProblemHighlightType.LIKE_UNUSED_SYMBOL,false));
          }
        }
      }
    }
    if (problems != null) {
      return problems.toArray(new ProblemDescriptorImpl[problems.size()]);
    }
  }
  return null;
}
