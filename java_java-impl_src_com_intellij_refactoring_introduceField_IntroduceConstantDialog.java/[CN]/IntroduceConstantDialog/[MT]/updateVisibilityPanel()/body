{
  if (myTargetClass != null && myTargetClass.isInterface()) {
    myVPanel.disableAllButPublic();
  }
 else {
    UIUtil.setEnabled(myVisibilityPanel,true,true);
    final Set<String> visible=new THashSet<String>();
    visible.add(PsiModifier.PRIVATE);
    visible.add(PsiModifier.PROTECTED);
    visible.add(PsiModifier.PACKAGE_LOCAL);
    visible.add(PsiModifier.PUBLIC);
    for (    PsiExpression occurrence : myOccurrences) {
      final PsiManager psiManager=PsiManager.getInstance(myProject);
      for (Iterator<String> iterator=visible.iterator(); iterator.hasNext(); ) {
        String modifier=iterator.next();
        try {
          final String modifierText=PsiModifier.PACKAGE_LOCAL.equals(modifier) ? "" : modifier + " ";
          final PsiField field=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createFieldFromText(modifierText + "int xxx;",myTargetClass);
          if (!JavaResolveUtil.isAccessible(field,myTargetClass,field.getModifierList(),occurrence,myTargetClass,null)) {
            iterator.remove();
          }
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
    if (!visible.contains(getFieldVisibility())) {
      if (visible.contains(PsiModifier.PUBLIC))       myVPanel.setVisibility(PsiModifier.PUBLIC);
      if (visible.contains(PsiModifier.PACKAGE_LOCAL))       myVPanel.setVisibility(PsiModifier.PACKAGE_LOCAL);
      if (visible.contains(PsiModifier.PROTECTED))       myVPanel.setVisibility(PsiModifier.PROTECTED);
      if (visible.contains(PsiModifier.PRIVATE))       myVPanel.setVisibility(PsiModifier.PRIVATE);
    }
  }
}
