{
  final MavenArtifact[] artifact=new MavenArtifact[1];
  try {
    MavenUtil.run(myProject,"Downloading dependency...",new MavenTask(){
      public void run(      MavenProgressIndicator indicator) throws MavenProcessCanceledException {
        artifact[0]=MavenProjectsTree.downloadArtifact(mavenProject,id,myEmbeddersManager,new SoutMavenConsole(),indicator);
      }
    }
);
  }
 catch (  MavenProcessCanceledException ignore) {
    return null;
  }
  VirtualFile file=mavenProject.getFile();
  PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  MavenDomDependency result=new WriteCommandAction<MavenDomDependency>(myProject,"Add Maven Dependency",psiFile){
    protected void run(    Result<MavenDomDependency> result) throws Throwable {
      MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(myProject,mavenProject.getFile());
      Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
      MavenDomDependency domDependency=MavenDomUtil.createDomDependency(model,artifact[0],editor,overridden);
      mavenProject.addDependency(artifact[0]);
      result.setResult(domDependency);
    }
  }
.execute().getResultObject();
  scheduleForNextImport(Collections.singletonList(Pair.create(mavenProject,MavenProjectChanges.DEPENDENCIES)));
  return result;
}
