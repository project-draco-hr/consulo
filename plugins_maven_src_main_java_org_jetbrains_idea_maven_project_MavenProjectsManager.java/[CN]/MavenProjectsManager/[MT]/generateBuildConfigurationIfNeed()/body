{
  final BuildManager buildManager=BuildManager.getInstance();
  final File projectSystemDir=buildManager.getProjectSystemDirectory(myProject);
  if (projectSystemDir == null) {
    return;
  }
  final File mavenConfigFile=new File(projectSystemDir,MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH);
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  final int crc=myProjectsTree.getFilterConfigCrc(fileIndex);
  final File crcFile=new File(mavenConfigFile.getParent(),"configuration.crc");
  try {
    DataInputStream crcInput=new DataInputStream(new FileInputStream(crcFile));
    try {
      if (crcInput.readInt() == crc)       return;
    }
  finally {
      crcInput.close();
    }
  }
 catch (  IOException ignored) {
  }
  MavenProjectConfiguration projectConfig=new MavenProjectConfiguration();
  for (  MavenProject mavenProject : getProjects()) {
    VirtualFile pomXml=mavenProject.getFile();
    Module module=fileIndex.getModuleForFile(pomXml);
    if (module == null)     continue;
    if (mavenProject.getDirectoryFile() != fileIndex.getContentRootForFile(pomXml))     continue;
    MavenModuleResourceConfiguration resourceConfig=new MavenModuleResourceConfiguration();
    MavenId projectId=mavenProject.getMavenId();
    resourceConfig.id=new MavenIdBean(projectId.getGroupId(),projectId.getArtifactId(),projectId.getVersion());
    MavenId parentId=mavenProject.getParentId();
    if (parentId != null) {
      resourceConfig.parentId=new MavenIdBean(parentId.getGroupId(),parentId.getArtifactId(),parentId.getVersion());
    }
    resourceConfig.directory=FileUtil.toSystemIndependentName(mavenProject.getDirectory());
    resourceConfig.delimitersPattern=MavenFilteredPropertyPsiReferenceProvider.getDelimitersPattern(mavenProject).pattern();
    for (    Map.Entry<String,String> entry : mavenProject.getModelMap().entrySet()) {
      String key=entry.getKey();
      String value=entry.getValue();
      if (value != null) {
        resourceConfig.modelMap.put(key,value);
      }
    }
    addResources(resourceConfig.resources,mavenProject.getResources());
    addResources(resourceConfig.testResources,mavenProject.getTestResources());
    resourceConfig.filteringExclusions.addAll(MavenProjectsTree.getFilterExclusions(mavenProject));
    final Properties properties=getFilteringProperties(mavenProject);
    for (    Map.Entry<Object,Object> propEntry : properties.entrySet()) {
      resourceConfig.properties.put((String)propEntry.getKey(),(String)propEntry.getValue());
    }
    resourceConfig.escapeString=MavenProjectsTree.getEscapeString(mavenProject);
    projectConfig.moduleConfigurations.put(module.getName(),resourceConfig);
  }
  final Document document=new Document(new Element("maven-project-configuration"));
  XmlSerializer.serializeInto(projectConfig,document.getRootElement());
  buildManager.runCommand(new Runnable(){
    @Override public void run(){
      buildManager.clearState(myProject);
      FileUtil.createIfDoesntExist(mavenConfigFile);
      try {
        JDOMUtil.writeDocument(document,mavenConfigFile,"\n");
        DataOutputStream crcOutput=new DataOutputStream(new FileOutputStream(crcFile));
        try {
          crcOutput.writeInt(crc);
        }
  finally {
          crcOutput.close();
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
}
