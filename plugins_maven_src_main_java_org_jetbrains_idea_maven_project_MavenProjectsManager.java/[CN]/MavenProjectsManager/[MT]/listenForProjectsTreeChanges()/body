{
  myProjectsTree.addListener(new MavenProjectsTree.ListenerAdapter(){
    @Override public void projectsIgnoredStateChanged(    List<MavenProject> ignored,    List<MavenProject> unignored,    boolean fromImport){
      if (!fromImport)       scheduleImport();
    }
    @Override public void projectsUpdated(    List<MavenProject> updated,    List<MavenProject> deleted){
      myEmbeddersManager.clearCaches();
      unscheduleAllTasks(deleted);
      Set<MavenProject> toResolve=new THashSet<MavenProject>(updated);
      for (      MavenProject each : ContainerUtil.concat(updated,deleted)) {
        toResolve.addAll(myProjectsTree.getDependentProjects(each));
      }
      Set<MavenProject> toImport=new THashSet<MavenProject>(updated);
      for (      MavenProject each : updated) {
        toImport.addAll(myProjectsTree.getDependentProjects(each));
      }
      scheduleImport(toImport);
      scheduleResolve(new ArrayList<MavenProject>(toResolve));
    }
    @Override public void projectResolved(    MavenProject project,    org.apache.maven.project.MavenProject nativeMavenProject){
      if (project.hasErrors())       return;
      if (project.hasUnresolvedPlugins()) {
        schedulePluginsResolving(project,nativeMavenProject);
      }
      scheduleImport(project);
    }
    @Override public void foldersResolved(    MavenProject project){
      scheduleImport(project);
    }
  }
);
}
