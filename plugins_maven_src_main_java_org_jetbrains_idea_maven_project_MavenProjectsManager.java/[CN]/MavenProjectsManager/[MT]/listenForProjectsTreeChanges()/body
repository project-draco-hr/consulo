{
  myProjectsTree.addListener(new MavenProjectsTree.ListenerAdapter(){
    @Override public void projectsIgnoredStateChanged(    List<MavenProject> ignored,    List<MavenProject> unignored,    boolean fromImport){
      if (!fromImport)       scheduleImport();
    }
    @Override public void projectsUpdated(    List<Pair<MavenProject,MavenProjectChanges>> updated,    List<MavenProject> deleted){
      myEmbeddersManager.clearCaches();
      unscheduleAllTasks(deleted);
      List<MavenProject> updatedProjects=MavenUtil.collectFirsts(updated);
      List<Pair<MavenProject,MavenProjectChanges>> toImport=new ArrayList<Pair<MavenProject,MavenProjectChanges>>(updated);
      for (      MavenProject each : updatedProjects) {
        for (        MavenProject eachDependent : myProjectsTree.getDependentProjects(each)) {
          toImport.add(Pair.create(eachDependent,MavenProjectChanges.DEPENDENCIES));
        }
      }
      Set<MavenProject> toResolve=new THashSet<MavenProject>(updatedProjects);
      for (      MavenProject each : ContainerUtil.concat(updatedProjects,deleted)) {
        toResolve.addAll(myProjectsTree.getDependentProjects(each));
      }
      Iterator<MavenProject> it=toResolve.iterator();
      while (it.hasNext()) {
        MavenProject each=it.next();
        if (each.hasReadingProblems())         it.remove();
      }
      if (haveChanges(toImport) || !deleted.isEmpty()) {
        scheduleForNextImport(toImport);
      }
      scheduleForNextResolve(toResolve);
      fireProjectScheduled();
    }
    private boolean haveChanges(    List<Pair<MavenProject,MavenProjectChanges>> projectsWithChanges){
      for (      MavenProjectChanges each : MavenUtil.collectSeconds(projectsWithChanges)) {
        if (each.hasChanges())         return true;
      }
      return false;
    }
    @Override public void projectResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges,    @Nullable NativeMavenProjectHolder nativeMavenProject){
      if (nativeMavenProject != null) {
        if (shouldScheduleProject(projectWithChanges)) {
          scheduleForNextImport(projectWithChanges);
          MavenImportingSettings importingSettings;
          AccessToken token=ReadAction.start();
          try {
            if (myProject.isDisposed())             return;
            importingSettings=getImportingSettings();
          }
  finally {
            token.finish();
          }
          scheduleArtifactsDownloading(Collections.singleton(projectWithChanges.first),null,importingSettings.isDownloadSourcesAutomatically(),importingSettings.isDownloadDocsAutomatically(),null);
        }
        if (!projectWithChanges.first.hasReadingProblems() && projectWithChanges.first.hasUnresolvedPlugins()) {
          schedulePluginsResolve(projectWithChanges.first,nativeMavenProject);
        }
      }
    }
    @Override public void foldersResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges){
      if (shouldScheduleProject(projectWithChanges)) {
        scheduleForNextImport(projectWithChanges);
      }
    }
    private boolean shouldScheduleProject(    Pair<MavenProject,MavenProjectChanges> projectWithChanges){
      return !projectWithChanges.first.hasReadingProblems() && projectWithChanges.second.hasChanges();
    }
  }
);
}
