{
  FileElement fileElement=calcTreeElement();
synchronized (myStubFromTreeLock) {
    SoftReference<StubTree> ref=fileElement.getUserData(STUB_TREE_IN_PARSED_TREE);
    StubTree tree=SoftReference.dereference(ref);
    if (tree == null) {
      ApplicationManager.getApplication().assertReadAccessAllowed();
      IStubFileElementType contentElementType=getElementTypeForStubBuilder();
      if (contentElementType == null) {
        VirtualFile vFile=getVirtualFile();
        String message="ContentElementType: " + getContentElementType() + "; file: "+ this+ "\n\t"+ "Boolean.TRUE.equals(getUserData(BUILDING_STUB)) = "+ Boolean.TRUE.equals(getUserData(BUILDING_STUB))+ "\n\t"+ "getTreeElement() = "+ getTreeElement()+ "\n\t"+ "vFile instanceof VirtualFileWithId = "+ (vFile instanceof VirtualFileWithId)+ "\n\t"+ "StubUpdatingIndex.canHaveStub(vFile) = "+ StubTreeLoader.getInstance().canHaveStub(vFile);
        rebuildStub();
        throw new AssertionError(message);
      }
      StubElement currentStubTree=contentElementType.getBuilder().buildStubTree(this);
      if (currentStubTree == null) {
        throw new AssertionError("Stub tree wasn't built for " + contentElementType + "; file: "+ this);
      }
      tree=new StubTree((PsiFileStub)currentStubTree);
      tree.setDebugInfo("created in calcStubTree");
      try {
        TreeUtil.bindStubsToTree(this,tree);
      }
 catch (      TreeUtil.StubBindingException e) {
        rebuildStub();
        throw new RuntimeException("Stub and PSI element type mismatch in " + getName(),e);
      }
      fileElement.putUserData(STUB_TREE_IN_PARSED_TREE,new SoftReference<StubTree>(tree));
    }
    return tree;
  }
}
