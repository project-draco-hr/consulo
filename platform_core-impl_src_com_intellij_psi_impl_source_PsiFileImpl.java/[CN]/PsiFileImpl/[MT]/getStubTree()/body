{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  if (Boolean.TRUE.equals(getUserData(BUILDING_STUB)))   return null;
  final StubTree derefd=derefStub();
  if (derefd != null)   return derefd;
  if (getTreeElement() != null)   return null;
  final VirtualFile vFile=getVirtualFile();
  if (!(vFile instanceof VirtualFileWithId))   return null;
  ObjectStubTree tree=StubTreeLoader.getInstance().readOrBuild(getProject(),vFile,this);
  if (!(tree instanceof StubTree))   return null;
  StubTree stubHolder=(StubTree)tree;
  final IElementType contentElementType=getContentElementType();
  if (!(contentElementType instanceof IStubFileElementType)) {
    final FileViewProvider viewProvider=getViewProvider();
    throw new AssertionError("A stub in a non-stub file '" + vFile + "'; isValid()="+ vFile.isValid()+ "; IndexStamp="+ StubTreeLoader.getInstance().getStubTreeTimestamp(vFile)+ "; Type: "+ contentElementType+ "; "+ "Psi roots: "+ viewProvider.getAllFiles()+ "; "+ " StubUpdatingIndex.canHaveStub(vFile)="+ StubTreeLoader.getInstance().canHaveStub(vFile)+ " content:<<<\n"+ StringUtil.first(viewProvider.getContents(),200,true)+ "\n>>>; stubs="+ stubHolder.getPlainList());
  }
synchronized (myStubLock) {
    if (getTreeElement() != null)     return null;
    final StubTree derefdOnLock=derefStub();
    if (derefdOnLock != null)     return derefdOnLock;
    myStub=new SoftReference<StubTree>(stubHolder);
    StubBase<PsiFile> base=(StubBase)stubHolder.getRoot();
    base.setPsi(this);
    return stubHolder;
  }
}
