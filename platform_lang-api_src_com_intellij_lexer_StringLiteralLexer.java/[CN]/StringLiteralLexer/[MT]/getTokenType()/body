{
  if (myStart >= myEnd)   return null;
  if (myBuffer.charAt(myStart) != '\\') {
    mySeenEscapedSpacesOnly=false;
    return myOriginalLiteralToken;
  }
  if (myStart + 1 >= myEnd)   return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
  char nextChar=myBuffer.charAt(myStart + 1);
  mySeenEscapedSpacesOnly&=nextChar == ' ';
  if (myCanEscapeEolOrFramingSpaces && (nextChar == '\n' || nextChar == ' ' && (mySeenEscapedSpacesOnly || isTrailingSpace(myStart + 2)))) {
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
  if (nextChar == 'u') {
    for (int i=myStart + 2; i < myStart + 6; i++) {
      if (i >= myEnd || !StringUtil.isHexDigit(myBuffer.charAt(i)))       return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    }
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
  if (nextChar == 'x' && myAllowHex) {
    for (int i=myStart + 2; i < myStart + 4; i++) {
      if (i >= myEnd || !StringUtil.isHexDigit(myBuffer.charAt(i)))       return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    }
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
switch (nextChar) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
    if (!myAllowOctal)     return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
case 'n':
case 'r':
case 'b':
case 't':
case 'f':
case '\'':
case '\"':
case '\\':
  return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
}
if (myAdditionalValidEscapes != null && myAdditionalValidEscapes.indexOf(nextChar) != -1) {
return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
}
return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
}
