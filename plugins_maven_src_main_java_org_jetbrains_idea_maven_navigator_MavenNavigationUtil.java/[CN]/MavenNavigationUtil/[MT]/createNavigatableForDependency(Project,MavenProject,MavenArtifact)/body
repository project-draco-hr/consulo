{
  final MavenProjectsManager myProjectsManager=MavenProjectsManager.getInstance(project);
  final Module m=myProjectsManager.findModule(mavenProject);
  if (m == null)   return null;
  final File pom=MavenArtifactUtil.getArtifactFile(myProjectsManager.getLocalRepository(),artifact.getMavenId());
  final VirtualFile vPom;
  if (pom.exists()) {
    vPom=LocalFileSystem.getInstance().findFileByIoFile(pom);
  }
 else {
    final MavenProject mp=myProjectsManager.findProject(artifact);
    vPom=mp == null ? null : mp.getFile();
  }
  if (vPom != null) {
    return new Navigatable.Adapter(){
      public void navigate(      boolean requestFocus){
        int offset=0;
        try {
          int index=new String(vPom.contentsToByteArray()).indexOf("<artifactId>" + artifact.getArtifactId() + "</artifactId>");
          if (index != -1) {
            offset+=index + 12;
          }
        }
 catch (        IOException e) {
        }
        new OpenFileDescriptor(project,vPom,offset).navigate(requestFocus);
      }
    }
;
  }
  final OrderEntry e=MavenRootModelAdapter.findLibraryEntry(m,artifact);
  if (e == null)   return null;
  return new Navigatable.Adapter(){
    public void navigate(    boolean requestFocus){
      ProjectSettingsService.getInstance(project).openProjectLibrarySettings(new NamedLibraryElement(m,e));
    }
  }
;
}
