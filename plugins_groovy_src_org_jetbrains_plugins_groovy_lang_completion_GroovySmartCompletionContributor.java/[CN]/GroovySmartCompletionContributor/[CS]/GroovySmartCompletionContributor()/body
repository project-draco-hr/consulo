{
  extend(CompletionType.SMART,INSIDE_EXPRESSION,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters params,    ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=params.getPosition();
      if (position.getParent() instanceof GrLiteral)       return;
      final Set<TypeConstraint> infos=getExpectedTypeInfos(params);
      final PsiElement reference=position.getParent();
      if (reference == null)       return;
      if (reference instanceof GrReferenceElement) {
        ((GrReferenceElement)reference).processVariants(new Consumer<Object>(){
          public void consume(          Object variant){
            PsiType type=null;
            final Object o;
            if (variant instanceof LookupElement) {
              o=((LookupElement)variant).getObject();
            }
 else {
              o=variant;
            }
            if (o instanceof PsiElement) {
              type=getTypeByElement((PsiElement)o,position);
            }
 else             if (o instanceof GroovyResolveResult) {
              type=getTypeByElement(((GroovyResolveResult)o).getElement(),position);
            }
 else             if (o instanceof String) {
              if ("true".equals(o) || "false".equals(o)) {
                type=PsiType.BOOLEAN;
              }
            }
            if (type == null)             return;
            for (            TypeConstraint info : infos) {
              if (info.satisfied(type,position.getManager(),GlobalSearchScope.allScope(position.getProject()))) {
                final LookupElement lookupElement=variant instanceof LookupElement ? (LookupElement)variant : GroovyCompletionUtil.getLookupElement(o);
                result.addElement(lookupElement);
                break;
              }
            }
          }
        }
);
      }
    }
  }
);
  extend(CompletionType.SMART,IN_CAST_PARENTHESES,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      final GrTypeCastExpression parenthesizedExpression=((GrTypeCastExpression)position.getParent().getParent().getParent());
      final PsiElement assignment=parenthesizedExpression.getParent();
      if (assignment instanceof GrAssignmentExpression && ((GrAssignmentExpression)assignment).getLValue() == parenthesizedExpression) {
        return;
      }
      final boolean overwrite=PlatformPatterns.psiElement().afterLeaf(PlatformPatterns.psiElement().withText("(").withParent(GrTypeCastExpression.class)).accepts(parameters.getOriginalPosition());
      final Set<TypeConstraint> typeConstraints=getExpectedTypeInfos(parameters);
      for (      TypeConstraint typeConstraint : typeConstraints) {
        final PsiType type=typeConstraint.getType();
        final LookupItem item=PsiTypeLookupItem.createLookupItem(type,position);
        JavaCompletionUtil.setShowFQN(item);
        item.setInsertHandler(new InsertHandler<LookupElement>(){
          @Override public void handleInsert(          InsertionContext context,          LookupElement item){
            FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.smarttype.casting");
            final Editor editor=context.getEditor();
            final Document document=editor.getDocument();
            if (overwrite) {
              document.deleteString(context.getSelectionEndOffset(),context.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET));
            }
            final CodeStyleSettings csSettings=CodeStyleSettingsManager.getSettings(context.getProject());
            final int oldTail=context.getTailOffset();
            context.setTailOffset(GroovyCompletionUtil.addRParenth(editor,oldTail,csSettings.SPACE_WITHIN_CAST_PARENTHESES));
            if (csSettings.SPACE_AFTER_TYPE_CAST) {
              context.setTailOffset(TailType.insertChar(editor,context.getTailOffset(),' '));
            }
            editor.getCaretModel().moveToOffset(context.getTailOffset());
            editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
            GroovyCompletionUtil.addImportForItem(context.getFile(),context.getStartOffset(),((LookupItem)item));
          }
        }
);
        result.addElement(item);
      }
    }
  }
);
}
