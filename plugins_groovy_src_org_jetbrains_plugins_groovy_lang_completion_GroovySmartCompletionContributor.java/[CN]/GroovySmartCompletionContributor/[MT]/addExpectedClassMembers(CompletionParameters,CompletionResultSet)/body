{
  for (  final TypeConstraint info : getExpectedTypeInfos(params)) {
    Consumer<LookupElement> consumer=new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement element){
        result.addElement(element);
      }
    }
;
    PsiType type=info.getType();
    PsiType defType=info.getDefaultType();
    boolean searchInheritors=params.getInvocationCount() > 1;
    if (type instanceof PsiClassType) {
      new GroovyMembersGetter((PsiClassType)type,params).processMembers(searchInheritors,consumer);
    }
    if (!defType.equals(type) && defType instanceof PsiClassType) {
      new GroovyMembersGetter((PsiClassType)defType,params).processMembers(searchInheritors,consumer);
    }
  }
}
