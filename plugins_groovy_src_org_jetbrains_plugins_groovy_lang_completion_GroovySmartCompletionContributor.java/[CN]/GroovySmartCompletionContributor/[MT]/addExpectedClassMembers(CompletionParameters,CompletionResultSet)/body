{
  PsiElement reference=params.getPosition().getParent();
  for (  TypeConstraint info : getExpectedTypeInfos(params)) {
    Consumer<LookupElement> consumer=new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement element){
        result.addElement(element);
      }
    }
;
    PsiType type=info.getType();
    PsiType defType=info.getDefaultType();
    if (type instanceof PsiClassType) {
      new GroovyMembersGetter((PsiClassType)type,reference).processMembers(consumer);
    }
    if (!defType.equals(type) && defType instanceof PsiClassType) {
      new GroovyMembersGetter((PsiClassType)defType,reference).processMembers(consumer);
    }
  }
}
