{
  final PsiElement identifierCopy=parameters.getPosition();
  final GrExpression expression=PsiTreeUtil.getParentOfType(identifierCopy,GrExpression.class);
  if (expression == null)   return;
  final Set<PsiType> types=GroovyExpectedTypesProvider.getDefaultExpectedTypes(expression);
  for (  PsiType type : types) {
    if (type instanceof PsiArrayType) {
      final LookupItem item=PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type),identifierCopy);
      if (item.getObject() instanceof PsiClass) {
        JavaCompletionUtil.setShowFQN(item);
      }
      item.setInsertHandler(new ArrayInsertHandler());
      consumer.consume(item);
    }
  }
  final List<PsiClassType> expectedClassTypes=new SmartList<PsiClassType>();
  for (  PsiType psiType : types) {
    if (psiType instanceof PsiClassType) {
      PsiType type=JavaCompletionUtil.eliminateWildcards(JavaCompletionUtil.originalize(psiType));
      final PsiClassType classType=(PsiClassType)type;
      if (classType.resolve() != null) {
        expectedClassTypes.add(classType);
      }
    }
  }
  JavaInheritorsGetter.processInheritors(parameters,expectedClassTypes,matcher,new Consumer<PsiType>(){
    public void consume(    final PsiType type){
      final LookupElement element=addExpectedType(type,identifierCopy);
      if (element != null) {
        consumer.consume(element);
      }
    }
  }
);
}
