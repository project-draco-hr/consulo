{
  myProjectRootManager=projectRootManager;
  myFilePointerManager=filePointerManager;
  myModuleRootManager=moduleRootManager;
  myModuleLibraryTable=new ModuleLibraryTable(this,myProjectRootManager,myFilePointerManager);
  myVirtualFilePointerListener=null;
  final List contentChildren=element.getChildren(ContentEntryImpl.ELEMENT_NAME);
  for (  Object aContentChildren : contentChildren) {
    Element child=(Element)aContentChildren;
    ContentEntryImpl contentEntry=new ContentEntryImpl(child,this);
    myContent.add(contentEntry);
  }
  final List orderElements=element.getChildren(OrderEntryFactory.ORDER_ENTRY_ELEMENT_NAME);
  boolean moduleSourceAdded=false;
  for (  Object orderElement : orderElements) {
    Element child=(Element)orderElement;
    final OrderEntry orderEntry=OrderEntryFactory.createOrderEntryByElement(child,this,myProjectRootManager,myFilePointerManager);
    if (orderEntry instanceof ModuleSourceOrderEntry) {
      if (moduleSourceAdded)       continue;
      moduleSourceAdded=true;
    }
    myOrder.add(orderEntry);
  }
  if (!moduleSourceAdded) {
    myOrder.add(new ModuleSourceOrderEntryImpl(this));
  }
  myExcludeOutput=element.getChild(EXCLUDE_OUTPUT_TAG) != null;
  myExcludeExploded=element.getChild(EXCLUDE_EXPLODED_TAG) != null;
  myCompilerOutputPath=getOutputPathValue(element,OUTPUT_TAG);
  myCompilerOutputPathForTests=getOutputPathValue(element,TEST_OUTPUT_TAG);
  myExplodedDirectory=getOutputPathValue(element,EXPLODED_TAG);
  myWritable=false;
  myOrderEntryProperties=new OrderEntryProperties();
  final Element propertiesChild=element.getChild(PROPERTIES_CHILD_NAME);
  if (propertiesChild != null) {
    myOrderEntryProperties.readExternal(propertiesChild);
  }
  myJavadocPointerContainer=myFilePointerManager.createContainer(myVirtualFilePointerFactory);
  final Element javaDocPaths=element.getChild(JAVADOC_PATHS_NAME);
  if (javaDocPaths != null) {
    myJavadocPointerContainer.readExternal(javaDocPaths,JAVADOC_ROOT_ELEMENT);
  }
}
