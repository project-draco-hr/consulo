{
  if (!RmicConfiguration.getSettings(context.getProject()).IS_EANABLED) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  final Project project=context.getProject();
  final List<ProcessingItem> items=new ArrayList<ProcessingItem>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      DependencyCache dependencyCache=((CompileContextEx)context).getDependencyCache();
      try {
        final Cache cache=dependencyCache.getCache();
        final int[] allClassNames=cache.getAllClassNames();
        final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
        final LocalFileSystem lfs=LocalFileSystem.getInstance();
        for (        final int className : allClassNames) {
          final boolean isRemoteObject=cache.isRemote(className) && !MakeUtil.isInterface(cache.getFlags(className));
          if (!isRemoteObject && !dependencyCache.wasRemote(className)) {
            continue;
          }
          final String outputPath=cache.getPath(className);
          if (outputPath == null) {
            continue;
          }
          final VirtualFile outputClassFile=lfs.findFileByPath(outputPath.replace(File.separatorChar,'/'));
          if (outputClassFile == null) {
            continue;
          }
          final VirtualFile sourceFile=((CompileContextEx)context).getSourceFileByOutputFile(outputClassFile);
          if (sourceFile == null) {
            continue;
          }
          final Module module=context.getModuleByFile(sourceFile);
          if (module == null) {
            continue;
          }
          final VirtualFile outputDir=fileIndex.isInTestSourceContent(sourceFile) ? context.getModuleOutputDirectoryForTests(module) : context.getModuleOutputDirectory(module);
          if (outputDir == null) {
            continue;
          }
          if (!VfsUtil.isAncestor(outputDir,outputClassFile,true)) {
            LOG.error(outputClassFile.getPath() + " should be located under the output root " + outputDir.getPath());
          }
          final ProcessingItem item=createProcessingItem(module,outputClassFile,outputDir,isRemoteObject,dependencyCache.resolve(className));
          items.add(item);
        }
      }
 catch (      CacheCorruptedException e) {
        context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
        LOG.info(e);
      }
    }
  }
);
  return items.toArray(new ProcessingItem[items.size()]);
}
