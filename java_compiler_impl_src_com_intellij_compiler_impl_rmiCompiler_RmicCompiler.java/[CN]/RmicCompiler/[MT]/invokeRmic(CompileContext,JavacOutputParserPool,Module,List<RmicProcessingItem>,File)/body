{
  final Sdk jdk=ModuleRootManager.getInstance(module).getSdk();
  final Map<String,RmicProcessingItem> pathToItemMap=new HashMap<String,RmicProcessingItem>();
  final String[] cmdLine=ApplicationManager.getApplication().runReadAction(new Computable<String[]>(){
    public String[] compute(){
      for (      final RmicProcessingItem item : dirItems) {
        pathToItemMap.put(item.myStub.getPath().replace(File.separatorChar,'/'),item);
        pathToItemMap.put(item.mySkel.getPath().replace(File.separatorChar,'/'),item);
        pathToItemMap.put(item.myTie.getPath().replace(File.separatorChar,'/'),item);
      }
      return createStartupCommand(module,outputDir.getPath(),dirItems.toArray(new RmicProcessingItem[dirItems.size()]));
    }
  }
);
  if (LOG.isDebugEnabled()) {
    StringBuilder buf=new StringBuilder();
    for (int idx=0; idx < cmdLine.length; idx++) {
      if (idx > 0) {
        buf.append(" ");
      }
      buf.append(cmdLine[idx]);
    }
    LOG.debug(buf.toString());
  }
  final OutputParser outputParser=parserPool.getJavacOutputParser(jdk);
  final Process process=Runtime.getRuntime().exec(cmdLine);
  final Set<RmicProcessingItem> successfullyCompiledItems=new HashSet<RmicProcessingItem>();
  final CompilerParsingThread parsingThread=new CompilerParsingThread(process,outputParser,false,true,context){
    protected void processCompiledClass(    FileObject classFileToProcess){
      String key=classFileToProcess.getFile().getPath().replace(File.separatorChar,'/');
      final RmicProcessingItem item=pathToItemMap.get(key);
      if (item != null) {
        successfullyCompiledItems.add(item);
      }
    }
  }
;
  final Future<?> parsingThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(parsingThread);
  try {
    process.waitFor();
  }
 catch (  InterruptedException ignored) {
  }
 finally {
    parsingThread.setProcessTerminated(true);
  }
  try {
    parsingThreadFuture.get();
  }
 catch (  InterruptedException ignored) {
  }
catch (  ExecutionException ignored) {
  }
  return successfullyCompiledItems.toArray(new RmicProcessingItem[successfullyCompiledItems.size()]);
}
