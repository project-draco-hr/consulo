{
  LOG.assertTrue(parent != null);
  LOG.assertTrue(previousEntry != null);
  File conflictsFile=getConflictsFile(new File(CvsVfsUtil.getFileFor(parent),previousEntry.getFileName()));
  try {
    Conflicts conflicts=Conflicts.readFrom(conflictsFile);
    LOG.assertTrue(conflicts != null);
    Date lastModified=previousEntry.getLastModified();
    String originalRevision=previousEntry.getRevision();
    ArrayList<String> sortedRevisions=new ArrayList<String>();
    sortedRevisions.add(originalRevision);
    if (revisions != null) {
      for (Iterator<String> iterator=revisions.iterator(); iterator.hasNext(); ) {
        String s=iterator.next();
        if (!sortedRevisions.contains(s)) {
          sortedRevisions.add(s);
        }
      }
    }
    conflicts.setRevisionAndDateForFile(previousEntry.getFileName(),sortedRevisions.toArray(new String[sortedRevisions.size()]),lastModified == null ? new Date().getTime() : lastModified.getTime());
    conflicts.saveTo(conflictsFile);
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
