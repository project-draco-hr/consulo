{
  List<FoldRegion> toRemove=newArrayList();
  InjectedLanguageManager injectedManager=InjectedLanguageManager.getInstance(myProject);
  for (  FoldRegion region : foldingModel.getAllFoldRegions()) {
    if (myKeepCollapsedRegions && !region.isExpanded() && !regionOrGroupCanBeRemovedWhenCollapsed(region))     continue;
    PsiElement element=info.getPsiElement(region);
    if (element != null) {
      PsiFile containingFile=element.getContainingFile();
      boolean isInjected=injectedManager.isInjectedFragment(containingFile);
      if (isInjected != myForInjected)       continue;
    }
    final Collection<FoldingDescriptor> descriptors;
    if (element != null && !(descriptors=elementsToFold.get(element)).isEmpty()) {
      boolean matchingDescriptorFound=false;
      FoldingDescriptor[] array=descriptors.toArray(new FoldingDescriptor[descriptors.size()]);
      for (      FoldingDescriptor descriptor : array) {
        TextRange range=descriptor.getRange();
        if (TextRange.areSegmentsEqual(region,range)) {
          matchingDescriptorFound=true;
          if (!region.isValid() || region.getGroup() != null || descriptor.getGroup() != null || !region.getPlaceholderText().equals(descriptor.getPlaceholderText()) || range.getLength() < 2) {
            rangeToExpandStatusMap.put(range,region.isExpanded());
            toRemove.add(region);
            break;
          }
 else {
            elementsToFold.remove(element,descriptor);
          }
        }
      }
      if (!matchingDescriptorFound) {
        if (Registry.is("editor.durable.folding.state")) {
          for (          FoldingDescriptor descriptor : descriptors) {
            rangeToExpandStatusMap.put(descriptor.getRange(),region.isExpanded());
          }
        }
        toRemove.add(region);
      }
    }
 else     if (region.isValid() && info.isLightRegion(region)) {
      boolean isExpanded=region.isExpanded();
      rangeToExpandStatusMap.put(TextRange.create(region),isExpanded);
    }
 else {
      toRemove.add(region);
    }
  }
  for (  final FoldRegion region : toRemove) {
    foldingModel.removeFoldRegion(region);
    info.removeRegion(region);
  }
}
