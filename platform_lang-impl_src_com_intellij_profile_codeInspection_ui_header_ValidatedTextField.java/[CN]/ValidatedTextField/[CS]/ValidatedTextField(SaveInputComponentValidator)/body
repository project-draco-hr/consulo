{
  myInputValidator=inputValidator;
  getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      changedUpdate(e);
    }
    @Override public void removeUpdate(    DocumentEvent e){
      changedUpdate(e);
    }
    @Override public void changedUpdate(    DocumentEvent e){
      final boolean isValid=myInputValidator.checkValid(getText());
      final Color color=isValid ? UIUtil.getTextAreaForeground() : JBColor.RED;
      if (!color.equals(getForeground())) {
        setForeground(color);
      }
    }
  }
);
  addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      if (!myIgnoreFocus) {
        checkAndApply();
      }
    }
  }
);
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        e.consume();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        checkAndApply();
        e.consume();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        myIgnoreFocus=true;
        myInputValidator.cancel();
        e.consume();
      }
    }
  }
);
  myHintPanel=new JPanel();
  final CardLayout cardLayout=new CardLayout();
  myHintPanel.setLayout(cardLayout);
  JLabel hintLabel=new JLabel("Save: Enter, Cancel: Esc");
  UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,hintLabel);
  hintLabel.setForeground(UIUtil.getLabelDisabledForeground());
  myHintPanel.add(hintLabel,LABEL_CARD);
  myHintPanel.add(new JPanel(),NO_LABEL_CARD);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentShown(    ComponentEvent e){
      cardLayout.show(myHintPanel,LABEL_CARD);
      myIgnoreFocus=false;
    }
    @Override public void componentHidden(    ComponentEvent e){
      cardLayout.show(myHintPanel,NO_LABEL_CARD);
    }
  }
);
  cardLayout.show(myHintPanel,NO_LABEL_CARD);
}
