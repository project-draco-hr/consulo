{
  super(initialInfo.getProject());
  myInitialInfo=initialInfo;
  myHelper=new ExtractClosureHelper(initialInfo,owner,toSearchFor,"",false);
  setTitle(ExtractClosureHandler.EXTRACT_CLOSURE);
  myTable=new ParameterTablePanel(){
    @Override protected void updateSignature(){
      ExtractClosureDialog.this.updateSignature();
    }
    @Override protected void doEnterAction(){
      clickDefaultButton();
    }
    @Override protected void doCancelAction(){
      ExtractClosureDialog.this.doCancelAction();
    }
  }
;
  mySignature=new GrMethodSignatureComponent("",initialInfo.getProject());
  myNameField=new EditorTextField("",initialInfo.getProject(),GroovyFileType.GROOVY_FILE_TYPE);
  myFinalCB=new JBCheckBox(UIUtil.replaceMnemonicAmpersand("Declare &final"));
  myFinalCB.setFocusable(false);
  myGenerateDelegateCB=new JBCheckBox(UIUtil.replaceMnemonicAmpersand("De&legate via overloading method"));
  myGenerateDelegateCB.setFocusable(false);
  TObjectIntHashMap<GrParameter> parametersToRemove=findParametersToRemove(myHelper);
  toRemoveCBs=new TObjectIntHashMap<JBCheckBox>(parametersToRemove.size());
  for (  Object p : parametersToRemove.keys()) {
    JBCheckBox cb=new JBCheckBox(GroovyRefactoringBundle.message("remove.parameter.0.no.longer.used",((GrParameter)p).getName()));
    cb.setFocusable(false);
    cb.setSelected(false);
    toRemoveCBs.put(cb,parametersToRemove.get((GrParameter)p));
  }
  init();
}
