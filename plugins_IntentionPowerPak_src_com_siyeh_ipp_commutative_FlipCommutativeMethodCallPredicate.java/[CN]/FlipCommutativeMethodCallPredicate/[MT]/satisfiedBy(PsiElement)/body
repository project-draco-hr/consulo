{
  if (!(element instanceof PsiMethodCallExpression)) {
    return false;
  }
  if (ErrorUtil.containsError(element)) {
    return false;
  }
  final PsiMethodCallExpression expression=(PsiMethodCallExpression)element;
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  if (args.length != 1) {
    return false;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return false;
  }
  final String methodName=methodExpression.getReferenceName();
  final PsiType callerType=qualifier.getType();
  final PsiType argumentType=args[0].getType();
  if (argumentType == null || !(argumentType instanceof PsiClassType)) {
    return false;
  }
  if (callerType == null || !(callerType instanceof PsiClassType)) {
    return false;
  }
  final PsiClass argumentClass=((PsiClassType)argumentType).resolve();
  if (argumentClass == null) {
    return false;
  }
  final PsiMethod[] methods=argumentClass.findMethodsByName(methodName,true);
  for (  final PsiMethod testMethod : methods) {
    final String testMethodName=testMethod.getName();
    if (testMethodName.equals(methodName)) {
      final PsiParameterList parameterList=testMethod.getParameterList();
      final PsiParameter[] parameters=parameterList.getParameters();
      if (parameters.length == 1) {
        final PsiParameter parameter=parameters[0];
        final PsiType type=parameter.getType();
        if (type.isAssignableFrom(callerType)) {
          return true;
        }
      }
    }
  }
  return false;
}
