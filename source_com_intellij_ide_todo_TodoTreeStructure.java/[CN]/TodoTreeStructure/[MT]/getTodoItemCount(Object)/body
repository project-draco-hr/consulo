{
  int count=0;
  if (element instanceof PsiFile) {
    PsiFile psiFile=(PsiFile)element;
    if (myTodoFilter != null) {
      for (Iterator i=myTodoFilter.iterator(); i.hasNext(); ) {
        TodoPattern pattern=(TodoPattern)i.next();
        count+=mySearchHelper.getTodoItemsCount(psiFile,pattern);
      }
    }
 else {
      count=mySearchHelper.getTodoItemsCount(psiFile);
    }
  }
 else   if (element instanceof PsiDirectory) {
    if (((PsiDirectory)element).getPackage() != null) {
      return 0;
    }
    Iterator<PsiFile> iterator=myBuilder.getFiles((PsiDirectory)element);
    while (iterator.hasNext()) {
      PsiFile psiFile=iterator.next();
      count+=getTodoItemCount(psiFile);
    }
  }
 else   if (element instanceof ToDoSummary) {
    for (Iterator i=myBuilder.getAllFiles(); i.hasNext(); ) {
      count+=getTodoItemCount(i.next());
    }
  }
 else   if (element instanceof Module) {
    Iterator<PsiFile> iterator=myBuilder.getFiles((Module)element);
    while (iterator.hasNext()) {
      PsiFile psiFile=iterator.next();
      count+=getTodoItemCount(psiFile);
    }
  }
 else   if (element instanceof PackageElement) {
    final PackageElement packageElement=(PackageElement)element;
    if (getIsFlattenPackages()) {
      final PsiPackage aPackage=packageElement.getPackage();
      final Module module=packageElement.getModule();
      GlobalSearchScope scope=module != null ? GlobalSearchScope.moduleScope(module) : GlobalSearchScope.projectScope(aPackage.getProject());
      final PsiDirectory[] directories=aPackage.getDirectories(scope);
      for (      PsiDirectory directory : directories) {
        Iterator<PsiFile> iterator=myBuilder.getFilesUnderDirectory(directory);
        while (iterator.hasNext()) {
          PsiFile psiFile=iterator.next();
          count+=getTodoItemCount(psiFile);
        }
      }
    }
 else {
      Iterator<PsiFile> iterator=myBuilder.getFiles(packageElement);
      while (iterator.hasNext()) {
        PsiFile psiFile=iterator.next();
        count+=getTodoItemCount(psiFile);
      }
    }
  }
 else {
    throw new IllegalArgumentException("unknown element: " + element);
  }
  return count;
}
