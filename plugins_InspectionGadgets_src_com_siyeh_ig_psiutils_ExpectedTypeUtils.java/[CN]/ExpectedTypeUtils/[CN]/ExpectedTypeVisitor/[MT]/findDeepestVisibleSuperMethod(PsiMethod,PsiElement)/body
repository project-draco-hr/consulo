{
  if (method.isConstructor()) {
    return null;
  }
  if (method.hasModifierProperty(PsiModifier.STATIC)) {
    return null;
  }
  if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return null;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return null;
  }
  final PsiClass referencingClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (referencingClass == null) {
    return null;
  }
  final PsiMethod[] allMethods=aClass.getAllMethods();
  PsiMethod topSuper=null;
  for (  PsiMethod superMethod : allMethods) {
    final PsiClass superClass=superMethod.getContainingClass();
    if (!isVisibleFrom(superMethod,referencingClass)) {
      continue;
    }
    if (superClass.equals(aClass)) {
      continue;
    }
    PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getClassSubstitutor(superClass,aClass,PsiSubstitutor.EMPTY);
    if (superClassSubstitutor == null) {
      superClassSubstitutor=PsiSubstitutor.EMPTY;
    }
    final boolean looksLikeSuperMethod=method.getName().equals(superMethod.getName()) && !superMethod.hasModifierProperty(PsiModifier.STATIC) && PsiUtil.isAccessible(superMethod,aClass,aClass)&& method.getSignature(PsiSubstitutor.EMPTY).equals(superMethod.getSignature(superClassSubstitutor));
    if (looksLikeSuperMethod) {
      if (topSuper != null && superClass.isInheritor(topSuper.getContainingClass(),true)) {
        continue;
      }
      topSuper=superMethod;
    }
  }
  return topSuper;
}
