{
  final PsiMethod method=(PsiMethod)result.getElement();
  if (method == null) {
    return null;
  }
  final PsiSubstitutor substitutor=result.getSubstitutor();
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterPosition < 0) {
    return null;
  }
  final int parametersCount=parameterList.getParametersCount();
  final PsiParameter[] parameters;
  if (parameterPosition >= parametersCount) {
    final int lastParameterPosition=parametersCount - 1;
    if (lastParameterPosition < 0) {
      return null;
    }
    parameters=parameterList.getParameters();
    final PsiParameter lastParameter=parameters[lastParameterPosition];
    if (lastParameter.isVarArgs()) {
      final PsiArrayType arrayType=(PsiArrayType)lastParameter.getType();
      return substitutor.substitute(arrayType.getComponentType());
    }
    return null;
  }
 else {
    parameters=parameterList.getParameters();
  }
  final PsiParameter parameter=parameters[parameterPosition];
  final PsiType parameterType=parameter.getType();
  if (parameter.isVarArgs()) {
    final PsiArrayType arrayType=(PsiArrayType)parameterType;
    return substitutor.substitute(arrayType.getComponentType());
  }
  final PsiType type=substitutor.substitute(parameterType);
  final TypeStringCreator typeStringCreator=new TypeStringCreator();
  type.accept(typeStringCreator);
  if (typeStringCreator.isModified()) {
    final PsiManager manager=method.getManager();
    final Project project=manager.getProject();
    final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
    try {
      final String typeString=typeStringCreator.getTypeString();
      return factory.createTypeFromText(typeString,method);
    }
 catch (    IncorrectOperationException e) {
      throw new AssertionError(e);
    }
  }
  return type;
}
