{
  if (calculateTypeForComplexReferences) {
    final Project project=referenceExpression.getProject();
    final JavaResolveResult resolveResult=referenceExpression.advancedResolve(false);
    final PsiElement element=resolveResult.getElement();
    PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
    if (element instanceof PsiField) {
      final PsiField field=(PsiField)element;
      if (!isAccessibleFrom(field,referenceExpression)) {
        return;
      }
      final PsiClass aClass=field.getContainingClass();
      final PsiElementFactory factory=psiFacade.getElementFactory();
      expectedType=factory.createType(aClass,substitutor);
    }
 else     if (element instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)element;
      final PsiMethod superMethod=findDeepestVisibleSuperMethod(method,referenceExpression);
      final PsiClass aClass;
      if (superMethod != null) {
        aClass=superMethod.getContainingClass();
        substitutor=TypeConversionUtil.getSuperClassSubstitutor(superMethod.getContainingClass(),method.getContainingClass(),substitutor);
      }
 else {
        aClass=method.getContainingClass();
      }
      final PsiElementFactory factory=psiFacade.getElementFactory();
      expectedType=factory.createType(aClass,substitutor);
    }
 else {
      expectedType=null;
    }
  }
}
