{
  if (calculateTypeForComplexReferences) {
    final Project project=referenceExpression.getProject();
    final JavaResolveResult resolveResult=referenceExpression.advancedResolve(false);
    final PsiElement element=resolveResult.getElement();
    PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
    if (element instanceof PsiField) {
      final PsiField field=(PsiField)element;
      if (!isAccessibleFrom(field,referenceExpression)) {
        return;
      }
      final PsiClass aClass=field.getContainingClass();
      if (aClass == null) {
        return;
      }
      final PsiElementFactory factory=psiFacade.getElementFactory();
      expectedType=factory.createType(aClass,substitutor);
    }
 else     if (element instanceof PsiMethod) {
      final PsiElement parent=referenceExpression.getParent();
      final PsiType returnType;
      if (parent instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)parent;
        final PsiType type=methodCallExpression.getType();
        if (!PsiType.VOID.equals(type)) {
          returnType=findExpectedType(methodCallExpression,true);
        }
 else {
          returnType=null;
        }
      }
 else {
        returnType=null;
      }
      final PsiMethod method=(PsiMethod)element;
      final PsiMethod superMethod=findDeepestVisibleSuperMethod(method,returnType,referenceExpression);
      final PsiClass aClass;
      if (superMethod != null) {
        aClass=superMethod.getContainingClass();
        if (aClass == null) {
          return;
        }
        substitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,method.getContainingClass(),substitutor);
      }
 else {
        aClass=method.getContainingClass();
        if (aClass == null) {
          return;
        }
      }
      final PsiElementFactory factory=psiFacade.getElementFactory();
      expectedType=factory.createType(aClass,substitutor);
    }
 else {
      expectedType=null;
    }
  }
}
