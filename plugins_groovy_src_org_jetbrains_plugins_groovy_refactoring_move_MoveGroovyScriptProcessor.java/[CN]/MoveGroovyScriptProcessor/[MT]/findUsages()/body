{
  List<UsageInfo> allUsages=new ArrayList<UsageInfo>();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  final List<PsiElement> elements=getElements();
  for (  PsiElement element : elements) {
    final GroovyFile groovyFile=(GroovyFile)element;
    final PsiClass scriptClass=groovyFile.getClasses()[0];
    String newName=getTargetPackage().getQualifiedName() + scriptClass.getName();
    final UsageInfo[] usages=MoveClassesOrPackagesUtil.findUsages(scriptClass,isSearchInComments(),isSearchInNonJavaFiles(),newName);
    allUsages.addAll(new ArrayList<UsageInfo>(Arrays.asList(usages)));
  }
  myMoveDestination.analyzeModuleConflicts(elements,conflicts,allUsages.toArray(new UsageInfo[allUsages.size()]));
  if (!conflicts.isEmpty()) {
    for (    PsiElement element : conflicts.keySet()) {
      allUsages.add(new ConflictsUsageInfo(element,conflicts.get(element)));
    }
  }
  return UsageViewUtil.removeDuplicatedUsages(allUsages.toArray(new UsageInfo[allUsages.size()]));
}
