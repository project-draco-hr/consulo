{
  try {
    Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    final List<PsiElement> elements=getElements();
    for (    PsiElement element : elements) {
      GroovyFile file=(GroovyFile)element;
      final RefactoringElementListener elementListener=getTransaction().getElementListener(file);
      PsiClass oldScriptClass=file.getClasses()[0];
      GroovyChangeContextUtil.encodeContextInfo(file);
      PsiManager.getInstance(myProject).moveFile(file,myMoveDestination.getTargetDirectory(file));
      file.setPackageName(getTargetPackage().getQualifiedName());
      PsiClass newScriptClass=file.getClasses()[0];
      oldToNewElementsMapping.put(oldScriptClass,newScriptClass);
      elementListener.elementMoved(file);
    }
    for (    PsiElement element : elements) {
      GroovyChangeContextUtil.decodeContextInfo(element,null,null);
    }
    myNonCodeUsages=retargetUsages(usages,oldToNewElementsMapping);
  }
 catch (  IncorrectOperationException e) {
    myNonCodeUsages=new NonCodeUsageInfo[0];
    RefactoringUIUtil.processIncorrectOperation(myProject,e);
  }
}
