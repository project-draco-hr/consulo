{
  if (document instanceof DocumentWindow) {
    document=((DocumentWindow)document).getDelegate();
  }
  if (!(document instanceof DocumentImpl)) {
    return;
  }
  Component focusOwner=IdeFocusManager.getGlobalInstance().getFocusOwner();
  DataContext dataContext=DataManager.getInstance().getDataContext(focusOwner);
  boolean isDisposeInProgress=ApplicationManager.getApplication().isDisposeInProgress();
  Editor activeEditor=isDisposeInProgress ? null : CommonDataKeys.EDITOR.getData(dataContext);
  boolean isVirtualSpaceEnabled=activeEditor == null || activeEditor.getSettings().isVirtualSpace();
  final EditorSettingsExternalizable settings=EditorSettingsExternalizable.getInstance();
  if (settings == null)   return;
  String stripTrailingSpaces=settings.getStripTrailingSpaces();
  final boolean doStrip=!stripTrailingSpaces.equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE);
  final boolean inChangedLinesOnly=!stripTrailingSpaces.equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE);
  List<Integer> caretLines=new ArrayList<Integer>();
  if (activeEditor != null && inChangedLinesOnly && doStrip && !isVirtualSpaceEnabled) {
    List<Caret> carets=activeEditor.getCaretModel().getAllCarets();
    for (    Caret caret : carets) {
      caretLines.add(caret.getLogicalPosition().line);
    }
  }
  ((DocumentImpl)document).clearLineModificationFlagsExcept(caretLines);
}
