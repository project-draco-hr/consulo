{
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement firstStatement=getFirstStatement(body);
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration == null) {
    return;
  }
  final PsiElement declaredElement=declaration.getDeclaredElements()[0];
  if (!(declaredElement instanceof PsiLocalVariable)) {
    return;
  }
  final PsiLocalVariable iterator=(PsiLocalVariable)declaredElement;
  final PsiMethodCallExpression initializer=(PsiMethodCallExpression)iterator.getInitializer();
  if (initializer == null) {
    return;
  }
  final PsiReferenceExpression methodExpression=initializer.getMethodExpression();
  final PsiExpression collection=methodExpression.getQualifierExpression();
  if (collection == null) {
    return;
  }
  final PsiClassType type=(PsiClassType)collection.getType();
  if (type == null) {
    return;
  }
  final PsiType[] parameters=type.getParameters();
  final String contentTypeString;
  if (parameters.length == 1) {
    final PsiType parameterType=parameters[0];
    if (parameterType instanceof PsiWildcardType) {
      final PsiWildcardType wildcardType=(PsiWildcardType)parameterType;
      final PsiType bound=wildcardType.getBound();
      if (bound == null) {
        contentTypeString="java.lang.Object";
      }
 else {
        contentTypeString=bound.getCanonicalText();
      }
    }
 else     if (parameterType != null) {
      contentTypeString=parameterType.getCanonicalText();
    }
 else {
      contentTypeString="java.lang.Object";
    }
  }
 else {
    contentTypeString="java.lang.Object";
  }
  final Project project=whileStatement.getProject();
  final PsiManager psiManager=PsiManager.getInstance(project);
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiType contentType=elementFactory.createTypeFromText(contentTypeString,whileStatement);
  final String iteratorName=iterator.getName();
  final boolean isDeclaration=isIteratorNextDeclaration(firstStatement,iteratorName,contentTypeString);
  final PsiStatement statementToSkip;
  final String contentVariableName;
  if (isDeclaration) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)firstStatement;
    if (declarationStatement == null) {
      return;
    }
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    final PsiLocalVariable localVar=(PsiLocalVariable)declaredElements[0];
    contentVariableName=localVar.getName();
    statementToSkip=declarationStatement;
  }
 else {
    if (collection instanceof PsiReferenceExpression) {
      final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)collection;
      final String collectionName=referenceElement.getReferenceName();
      contentVariableName=createNewVarName(whileStatement,contentType,collectionName);
    }
 else {
      contentVariableName=createNewVarName(whileStatement,contentType,null);
    }
    statementToSkip=null;
  }
  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
  @NonNls final String finalString;
  if (codeStyleSettings.GENERATE_FINAL_PARAMETERS) {
    finalString="final ";
  }
 else {
    finalString="";
  }
  @NonNls final StringBuilder out=new StringBuilder(64);
  out.append("for(");
  out.append(finalString);
  out.append(contentTypeString);
  out.append(' ');
  out.append(contentVariableName);
  out.append(": ");
  out.append(collection.getText());
  out.append(')');
  replaceIteratorNext(body,contentVariableName,iteratorName,statementToSkip,out,contentTypeString);
  final Query<PsiReference> query=ReferencesSearch.search(iterator,iterator.getUseScope());
  final Collection<PsiReference> usages=query.findAll();
  for (  PsiReference usage : usages) {
    final PsiElement element=usage.getElement();
    if (!PsiTreeUtil.isAncestor(whileStatement,element,true)) {
      final PsiAssignmentExpression assignment=PsiTreeUtil.getParentOfType(element,PsiAssignmentExpression.class);
      if (assignment == null) {
        return;
      }
      final PsiExpression expression=assignment.getRExpression();
      initializer.delete();
      iterator.setInitializer(expression);
      final PsiElement statement=assignment.getParent();
      final PsiElement lastChild=statement.getLastChild();
      if (lastChild instanceof PsiComment) {
        iterator.add(lastChild);
      }
      statement.replace(iterator);
      iterator.delete();
      break;
    }
  }
  final String result=out.toString();
  replaceStatementAndShortenClassNames(whileStatement,result);
}
