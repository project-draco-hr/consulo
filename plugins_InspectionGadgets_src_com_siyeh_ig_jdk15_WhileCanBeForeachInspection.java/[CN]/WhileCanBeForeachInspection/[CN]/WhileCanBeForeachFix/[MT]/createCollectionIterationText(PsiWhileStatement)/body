{
  System.out.println("createCollectionIterationText()");
  final String text=whileStatement.getText();
  final int length=text.length();
  @NonNls final StringBuffer out=new StringBuffer(length);
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return null;
  }
  final PsiStatement firstStatement=getFirstStatement(body);
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration == null) {
    return null;
  }
  final PsiElement element=declaration.getDeclaredElements()[0];
  if (!(element instanceof PsiLocalVariable)) {
    return null;
  }
  final PsiLocalVariable iterator=(PsiLocalVariable)element;
  final PsiMethodCallExpression initializer=(PsiMethodCallExpression)iterator.getInitializer();
  if (initializer == null) {
    return null;
  }
  final PsiReferenceExpression methodExpression=initializer.getMethodExpression();
  final PsiExpression collection=methodExpression.getQualifierExpression();
  if (collection == null) {
    return null;
  }
  final PsiClassType type=(PsiClassType)collection.getType();
  if (type == null) {
    return null;
  }
  final PsiType[] parameters=type.getParameters();
  final String contentTypeString;
  if (parameters.length == 1) {
    final PsiType parameterType=parameters[0];
    if (parameterType instanceof PsiWildcardType) {
      final PsiWildcardType wildcardType=(PsiWildcardType)parameterType;
      final PsiType bound=wildcardType.getBound();
      if (bound == null) {
        contentTypeString="java.lang.Object";
      }
 else {
        contentTypeString=bound.getCanonicalText();
      }
    }
 else     if (parameterType != null) {
      contentTypeString=parameterType.getCanonicalText();
    }
 else {
      contentTypeString="java.lang.Object";
    }
  }
 else {
    contentTypeString="java.lang.Object";
  }
  final Project project=whileStatement.getProject();
  final PsiManager psiManager=PsiManager.getInstance(project);
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiType contentType=elementFactory.createTypeFromText(contentTypeString,whileStatement);
  final String iteratorName=iterator.getName();
  final boolean isDeclaration=isIteratorNextDeclaration(firstStatement,iteratorName,contentTypeString);
  final PsiStatement statementToSkip;
  @NonNls final String finalString;
  final String contentVariableName;
  if (isDeclaration) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)firstStatement;
    if (declarationStatement == null) {
      return null;
    }
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    final PsiLocalVariable localVar=(PsiLocalVariable)declaredElements[0];
    contentVariableName=localVar.getName();
    statementToSkip=declarationStatement;
    if (localVar.hasModifierProperty(PsiModifier.FINAL)) {
      finalString="final ";
    }
 else {
      finalString="";
    }
  }
 else {
    if (collection instanceof PsiReferenceExpression) {
      final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)collection;
      final String collectionName=referenceElement.getReferenceName();
      contentVariableName=createNewVarName(whileStatement,contentType,collectionName);
    }
 else {
      contentVariableName=createNewVarName(whileStatement,contentType,null);
    }
    final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
    if (codeStyleSettings.GENERATE_FINAL_LOCALS) {
      finalString="final ";
    }
 else {
      finalString="";
    }
    statementToSkip=null;
  }
  out.append("for(");
  out.append(finalString);
  out.append(contentTypeString);
  out.append(' ');
  out.append(contentVariableName);
  out.append(": ");
  out.append(collection.getText());
  out.append(')');
  replaceIteratorNext(body,contentVariableName,iteratorName,statementToSkip,out,contentTypeString);
  return out.toString();
}
