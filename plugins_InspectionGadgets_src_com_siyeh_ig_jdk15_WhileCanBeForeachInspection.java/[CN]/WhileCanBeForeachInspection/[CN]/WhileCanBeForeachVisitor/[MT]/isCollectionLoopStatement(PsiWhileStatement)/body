{
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  if (initialization == null) {
    return false;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  if (declaredElements.length != 1) {
    return false;
  }
  final PsiElement declaredElement=declaredElements[0];
  if (!(declaredElement instanceof PsiLocalVariable)) {
    return false;
  }
  final PsiLocalVariable declaredVariable=(PsiLocalVariable)declaredElement;
  final PsiType declaredVariableType=declaredVariable.getType();
  if (!(declaredVariableType instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)declaredVariableType;
  final PsiClass declaredClass=classType.resolve();
  if (declaredClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(declaredClass,"java.util.Iterator")) {
    return false;
  }
  final PsiExpression initialValue=declaredVariable.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  @NonNls final String initialCallName=initialMethodExpression.getReferenceName();
  if (!"iterator".equals(initialCallName)) {
    return false;
  }
  final PsiExpression qualifier=initialMethodExpression.getQualifierExpression();
  if (qualifier == null) {
    return false;
  }
  final PsiType qualifierType=qualifier.getType();
  if (!(qualifierType instanceof PsiClassType)) {
    return false;
  }
  final PsiClass qualifierClass=((PsiClassType)qualifierType).resolve();
  if (qualifierClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(qualifierClass,"java.lang.Iterable") && !ClassUtils.isSubclass(qualifierClass,"java.util.Collection")) {
    return false;
  }
  final PsiExpression condition=whileStatement.getCondition();
  if (!isHasNextCalled(declaredVariable,condition)) {
    return false;
  }
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return false;
  }
  if (calculateCallsToIteratorNext(declaredVariable,body) != 1) {
    return false;
  }
  if (isIteratorRemoveCalled(declaredVariable,body)) {
    return false;
  }
  if (isIteratorHasNextCalled(declaredVariable,body)) {
    return false;
  }
  return !VariableAccessUtils.variableIsAssigned(declaredVariable,body);
}
