{
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  if (declaredElements.length != 1) {
    return false;
  }
  final PsiElement declaredElement=declaredElements[0];
  if (!(declaredElement instanceof PsiVariable)) {
    return false;
  }
  final PsiVariable variable=(PsiVariable)declaredElement;
  final PsiType variableType=variable.getType();
  final PsiType iteratorType=TypeUtils.getType("java.util.Iterator",whileStatement);
  if (iteratorType == null) {
    return false;
  }
  if (!iteratorType.isAssignableFrom(variableType)) {
    return false;
  }
  final PsiExpression initialValue=variable.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  @NonNls final String initialCallName=initialMethodExpression.getReferenceName();
  if (!"iterator".equals(initialCallName)) {
    return false;
  }
  final PsiExpression qualifier=initialMethodExpression.getQualifierExpression();
  if (qualifier == null) {
    return false;
  }
  final PsiType qualifierType=qualifier.getType();
  if (!(qualifierType instanceof PsiClassType)) {
    return false;
  }
  final PsiClass qualifierClass=((PsiClassType)qualifierType).resolve();
  if (qualifierClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(qualifierClass,"java.lang.Iterable") && !ClassUtils.isSubclass(qualifierClass,"java.util.Collection")) {
    return false;
  }
  final PsiExpression condition=whileStatement.getCondition();
  if (!isHasNextCalled(variable,condition)) {
    return false;
  }
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return false;
  }
  if (calculateCallsToIteratorNext(variable,body) != 1) {
    return false;
  }
  if (isIteratorRemoveCalled(variable,body)) {
    return false;
  }
  if (isIteratorHasNextCalled(variable,body)) {
    return false;
  }
  if (VariableAccessUtils.variableIsAssigned(variable,body)) {
    return false;
  }
  if (VariableAccessUtils.variableIsPassedAsMethodArgument(variable,body)) {
    return false;
  }
  PsiElement nextSibling=whileStatement.getNextSibling();
  while (nextSibling != null) {
    if (VariableAccessUtils.variableValueIsUsed(variable,nextSibling)) {
      return false;
    }
    nextSibling=nextSibling.getNextSibling();
  }
  return true;
}
