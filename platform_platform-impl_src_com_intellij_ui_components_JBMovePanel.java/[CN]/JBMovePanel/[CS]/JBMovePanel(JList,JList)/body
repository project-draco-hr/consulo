{
  super(new GridBagLayout());
  assertModelIsEditable(left);
  assertModelIsEditable(right);
  myLeftList=left;
  myRightList=right;
  final JPanel leftRightButtonsPanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.MIDDLE));
  leftRightButtonsPanel.add(myRightButton=createButton(ButtonType.RIGHT));
  leftRightButtonsPanel.add(myAllRightButton=createButton(ButtonType.ALL_RIGHT));
  leftRightButtonsPanel.add(myLeftButton=createButton(ButtonType.LEFT));
  leftRightButtonsPanel.add(myAllLeftButton=createButton(ButtonType.ALL_LEFT));
  myUpButton=createButton(new UpAction());
  myDownButton=createButton(new DownAction());
  final JPanel upDownButtonsPanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.MIDDLE));
  upDownButtonsPanel.add(myUpButton);
  upDownButtonsPanel.add(myDownButton);
  MouseListener mouseListener=new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() != 2 || e.getButton() != MouseEvent.BUTTON1) {
        return;
      }
      if (e.getSource() == myLeftList) {
        doRight();
      }
 else       if (e.getSource() == myRightList) {
        doLeft();
      }
    }
  }
;
  myLeftList.addMouseListener(mouseListener);
  myRightList.addMouseListener(mouseListener);
  GridBag listConstraints=new GridBag().weightx(1).weighty(1).fillCell();
  GridBag buttonConstraints=new GridBag().anchor(GridBagConstraints.CENTER);
  myLeftPanel.add(ScrollPaneFactory.createScrollPane(left),listConstraints);
  add(myLeftPanel,listConstraints);
  add(leftRightButtonsPanel,buttonConstraints);
  myRightPanel.add(ScrollPaneFactory.createScrollPane(right),listConstraints);
  add(myRightPanel,listConstraints);
  add(upDownButtonsPanel,buttonConstraints);
}
