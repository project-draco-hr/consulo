{
  List<PsiElement> elements=ContainerUtil.newArrayList();
  if (editor != null) {
    PsiReference reference=TargetElementUtil.findReference(editor);
    if (reference != null) {
      ContainerUtil.addIfNotNull(elements,reference.getElement());
    }
  }
  if (elements.isEmpty()) {
    ContainerUtil.addIfNotNull(elements,CommonDataKeys.PSI_ELEMENT.getData(dataContext));
  }
  if (elements.isEmpty() && editor == null) {
    final Project project=CommonDataKeys.PROJECT.getData(dataContext);
    VirtualFile[] files=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
    if (project != null && files != null) {
      for (      VirtualFile file : files) {
        ContainerUtil.addIfNotNull(elements,PsiManager.getInstance(project).findFile(file));
      }
    }
  }
  return ContainerUtil.mapNotNull(elements,new Function<PsiElement,PsiElement>(){
    @Override public PsiElement fun(    PsiElement element){
      return element instanceof PsiFile && !((PsiFile)element).getViewProvider().isPhysical() ? null : adjustElement(element);
    }
  }
);
}
