{
  LOG.assertTrue(ApplicationManager.getApplication().isReadAccessAllowed());
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (psiManager.isDisposed())   return;
  if (!myFile.isValid())   return;
  final PsiFile psiFile=psiManager.findFile(myFile);
  if (psiFile == null)   return;
  Map<PsiElement,FoldingDescriptor> ranges=null;
  for (int i=0; i < myPsiElementsOrRangeMarkers.size(); i++) {
    Object o=myPsiElementsOrRangeMarkers.get(i);
    if (o instanceof PsiElement) {
      PsiElement element=(PsiElement)o;
      if (!element.isValid())       continue;
      if (ranges == null)       ranges=buildRanges(editor,psiFile);
      FoldingDescriptor descriptor=ranges.get(element);
      if (descriptor == null)       continue;
      TextRange range=descriptor.getRange();
      FoldRegion region=FoldingUtil.findFoldRegion(editor,range.getStartOffset(),range.getEndOffset());
      if (region != null) {
        boolean state=myExpandedStates.get(i).booleanValue();
        region.setExpanded(state);
      }
    }
 else     if (o instanceof RangeMarker) {
      RangeMarker marker=(RangeMarker)o;
      if (!marker.isValid())       continue;
      FoldRegion region=FoldingUtil.findFoldRegion(editor,marker.getStartOffset(),marker.getEndOffset());
      if (region == null) {
        String placeHolderText=myPlaceholderTexts.get(marker);
        region=editor.getFoldingModel().addFoldRegion(marker.getStartOffset(),marker.getEndOffset(),placeHolderText);
        if (region == null)         return;
      }
      boolean state=myExpandedStates.get(i).booleanValue();
      region.setExpanded(state);
    }
 else {
      LOG.error("o = " + o);
    }
  }
}
