{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (psiManager.isDisposed())   return;
  if (!myFile.isValid())   return;
  final PsiFile psiFile=psiManager.findFile(myFile);
  if (psiFile == null)   return;
  Map<PsiElement,FoldingDescriptor> ranges=null;
  for (  SmartPsiElementPointer<PsiElement> ptr : myPsiElements) {
    PsiElement element=ptr.getElement();
    if (element == null || !element.isValid()) {
      continue;
    }
    if (ranges == null) {
      ranges=buildRanges(editor,psiFile);
    }
    FoldingDescriptor descriptor=ranges.get(element);
    if (descriptor == null) {
      continue;
    }
    TextRange range=descriptor.getRange();
    FoldRegion region=FoldingUtil.findFoldRegion(editor,range.getStartOffset(),range.getEndOffset());
    if (region != null) {
      FoldingInfo fi=element.getUserData(FOLDING_INFO_KEY);
      boolean state=fi != null && fi.expanded;
      region.setExpanded(state);
    }
  }
  for (  RangeMarker marker : myRangeMarkers) {
    if (!marker.isValid()) {
      continue;
    }
    FoldRegion region=FoldingUtil.findFoldRegion(editor,marker.getStartOffset(),marker.getEndOffset());
    if (region == null) {
      FoldingInfo info=marker.getUserData(FOLDING_INFO_KEY);
      region=editor.getFoldingModel().addFoldRegion(marker.getStartOffset(),marker.getEndOffset(),info.placeHolder);
      if (region == null) {
        return;
      }
    }
    FoldingInfo fi=region.getUserData(FOLDING_INFO_KEY);
    boolean state=fi != null && fi.expanded;
    region.setExpanded(state);
  }
}
