{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  if (myPsiElements.isEmpty() && myRangeMarkers.isEmpty() && mySerializedElements.isEmpty()) {
    throw new WriteExternalException();
  }
  if (mySerializedElements.isEmpty()) {
    for (    SmartPsiElementPointer<PsiElement> ptr : myPsiElements) {
      PsiElement psiElement=ptr.getElement();
      if (psiElement == null || !psiElement.isValid()) {
        continue;
      }
      FoldingInfo fi=psiElement.getUserData(FOLDING_INFO_KEY);
      boolean state=fi != null && fi.expanded;
      String signature=FoldingPolicy.getSignature(psiElement);
      if (signature == null) {
        continue;
      }
      PsiFile containingFile=psiElement.getContainingFile();
      PsiElement restoredElement=FoldingPolicy.restoreBySignature(containingFile,signature);
      if (!psiElement.equals(restoredElement)) {
        StringBuilder trace=new StringBuilder();
        PsiElement restoredAgain=FoldingPolicy.restoreBySignature(containingFile,signature,trace);
        LOG.error("element: " + psiElement + "("+ psiElement.getText()+ "); restoredElement: "+ restoredElement+ "; signature: '"+ signature+ "'; file: "+ containingFile+ "; injected: "+ InjectedLanguageManager.getInstance(myProject).isInjectedFragment(containingFile)+ "; languages: "+ containingFile.getViewProvider().getLanguages()+ "; restored again: "+ restoredAgain+ "; restore produces same results: "+ (restoredAgain == restoredElement)+ "; trace:\n"+ trace);
      }
      Element e=new Element(ELEMENT_TAG);
      e.setAttribute(SIGNATURE_ATT,signature);
      e.setAttribute(EXPANDED_ATT,Boolean.toString(state));
      element.addContent(e);
    }
  }
 else {
    for (    SerializedPsiElement entry : mySerializedElements) {
      Element e=new Element(ELEMENT_TAG);
      e.setAttribute(SIGNATURE_ATT,entry.mySerializedElement);
      e.setAttribute(EXPANDED_ATT,Boolean.toString(entry.myFoldingInfo.getExpanded()));
      element.addContent(e);
    }
  }
  String date=null;
  for (  RangeMarker marker : myRangeMarkers) {
    FoldingInfo fi=marker.getUserData(FOLDING_INFO_KEY);
    boolean state=fi != null && fi.expanded;
    Element e=new Element(MARKER_TAG);
    if (date == null) {
      date=getTimeStamp();
    }
    if (date.isEmpty()) {
      continue;
    }
    e.setAttribute(DATE_ATT,date);
    e.setAttribute(EXPANDED_ATT,Boolean.toString(state));
    String signature=Integer.valueOf(marker.getStartOffset()) + ":" + Integer.valueOf(marker.getEndOffset());
    e.setAttribute(SIGNATURE_ATT,signature);
    String placeHolderText=fi == null ? DEFAULT_PLACEHOLDER : fi.placeHolder;
    e.setAttribute(PLACEHOLDER_ATT,placeHolderText);
    element.addContent(e);
  }
}
