{
  if (oldText.equals(newText))   return;
  PsiToDocumentSynchronizer synchronizer=((PsiDocumentManagerBase)PsiDocumentManager.getInstance(myProject)).getSynchronizer();
  int changeStart=StringUtil.commonPrefixLength(oldText,newText);
  int changeEnd=oldText.length() - StringUtil.commonSuffixLength(oldText,newText);
  TextRange changedPsiRange=DocumentCommitProcessor.getChangedPsiRange(file,changeStart,changeEnd,newText.length());
  final DiffLog log=BlockSupport.getInstance(myProject).reparseRange(file,changedPsiRange,newText,new EmptyProgressIndicator());
  synchronizer.setIgnorePsiEvents(true);
  try {
    CodeStyleManager.getInstance(file.getProject()).performActionWithFormatterDisabled(new Runnable(){
      @Override public void run(){
        runTransaction(new PomTransactionBase(file,getModelAspect(TreeAspect.class)){
          @Nullable @Override public PomModelEvent runInner() throws IncorrectOperationException {
            return new TreeAspectEvent(PomModelImpl.this,log.performActualPsiChange(file));
          }
        }
);
      }
    }
);
  }
  finally {
    synchronizer.setIgnorePsiEvents(false);
  }
}
