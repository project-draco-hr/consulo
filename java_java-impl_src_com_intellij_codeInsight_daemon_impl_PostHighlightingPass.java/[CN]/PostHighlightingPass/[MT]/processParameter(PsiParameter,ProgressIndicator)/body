{
  PsiElement declarationScope=parameter.getDeclarationScope();
  if (declarationScope instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)declarationScope;
    if (PsiUtilBase.hasErrorElementChild(method))     return null;
    if ((method.isConstructor() || method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)|| !method.hasModifierProperty(PsiModifier.ABSTRACT) && myUnusedSymbolInspection.REPORT_PARAMETER_FOR_PUBLIC_METHODS && !isOverriddenOrOverrides(method)) && !method.hasModifierProperty(PsiModifier.NATIVE) && !HighlightMethodUtil.isSerializationRelatedMethod(method,method.getContainingClass())&& !PsiClassImplUtil.isMainMethod(method)) {
      HighlightInfo highlightInfo=checkUnusedParameter(parameter,progress);
      if (highlightInfo != null) {
        final ArrayList<IntentionAction> options=new ArrayList<IntentionAction>();
        options.addAll(IntentionManager.getInstance().getStandardIntentionOptions(myUnusedSymbolKey,myFile));
        if (myUnusedParametersInspection != null) {
          Collections.addAll(options,myUnusedParametersInspection.getSuppressActions(parameter));
        }
        QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedParameterFix(parameter),options,HighlightDisplayKey.getDisplayNameByKey(myUnusedSymbolKey));
        return highlightInfo;
      }
    }
  }
 else   if (declarationScope instanceof PsiForeachStatement) {
    HighlightInfo highlightInfo=checkUnusedParameter(parameter,progress);
    if (highlightInfo != null) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(UnusedSymbolLocalInspection.DISPLAY_NAME),myUnusedSymbolKey);
      return highlightInfo;
    }
  }
  return null;
}
