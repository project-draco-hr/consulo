{
  if (isClassUsed(aClass,progress,helper))   return null;
  String pattern;
  HighlightDisplayKey highlightDisplayKey;
  HighlightInfoType highlightInfoType;
  if (aClass.getContainingClass() != null && aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
    pattern=aClass.isInterface() ? "private.inner.interface.is.not.used" : "private.inner.class.is.not.used";
    highlightDisplayKey=myUnusedSymbolKey;
    highlightInfoType=HighlightInfoType.UNUSED_SYMBOL;
  }
 else   if (aClass.getParent() instanceof PsiDeclarationStatement) {
    pattern="local.class.is.not.used";
    highlightDisplayKey=myUnusedSymbolKey;
    highlightInfoType=HighlightInfoType.UNUSED_SYMBOL;
  }
 else   if (aClass instanceof PsiTypeParameter) {
    pattern="type.parameter.is.not.used";
    highlightDisplayKey=myUnusedSymbolKey;
    highlightInfoType=HighlightInfoType.UNUSED_SYMBOL;
  }
 else {
    pattern="class.is.not.used";
    highlightDisplayKey=myDeadCodeKey;
    highlightInfoType=myDeadCodeInfoType;
  }
  return formatUnusedSymbolHighlightInfo(pattern,aClass,"classes",highlightDisplayKey,highlightInfoType);
}
