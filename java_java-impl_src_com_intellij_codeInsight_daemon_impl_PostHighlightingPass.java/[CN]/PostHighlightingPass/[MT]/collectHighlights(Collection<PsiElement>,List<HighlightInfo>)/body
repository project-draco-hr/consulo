{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
  myUnusedSymbolKey=HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME);
  boolean unusedSymbolEnabled=profile.isToolEnabled(myUnusedSymbolKey,myFile);
  HighlightDisplayKey unusedImportKey=HighlightDisplayKey.find(UnusedImportLocalInspection.SHORT_NAME);
  boolean unusedImportEnabled=profile.isToolEnabled(unusedImportKey,myFile);
  LocalInspectionToolWrapper unusedSymbolTool=(LocalInspectionToolWrapper)profile.getInspectionTool(UnusedSymbolLocalInspection.SHORT_NAME,myFile);
  myUnusedSymbolInspection=unusedSymbolTool == null ? null : (UnusedSymbolLocalInspection)unusedSymbolTool.getTool();
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || myUnusedSymbolInspection != null);
  myDeadCodeKey=HighlightDisplayKey.find(DeadCodeInspection.SHORT_NAME);
  myDeadCodeInspection=(DeadCodeInspection)profile.getInspectionTool(DeadCodeInspection.SHORT_NAME,myFile);
  myDeadCodeEnabled=profile.isToolEnabled(myDeadCodeKey,myFile);
  if (unusedImportEnabled && JspPsiUtil.isInJspFile(myFile)) {
    final JspFile jspFile=JspPsiUtil.getJspFile(myFile);
    if (jspFile != null) {
      unusedImportEnabled=!JspSpiUtil.isIncludedOrIncludesSomething(jspFile);
    }
  }
  myDeadCodeInfoType=myDeadCodeKey == null ? null : new HighlightInfoType.HighlightInfoTypeImpl(profile.getErrorLevel(myDeadCodeKey,myFile).getSeverity(),HighlightInfoType.UNUSED_SYMBOL.getAttributesKey());
  if (!unusedSymbolEnabled && !unusedImportEnabled) {
    return;
  }
  for (  PsiElement element : elements) {
    ProgressManager.checkCanceled();
    if (unusedSymbolEnabled && element instanceof PsiIdentifier) {
      PsiIdentifier identifier=(PsiIdentifier)element;
      HighlightInfo info=processIdentifier(identifier);
      if (info != null) {
        result.add(info);
      }
    }
 else     if (unusedImportEnabled && element instanceof PsiImportList) {
      final PsiImportStatementBase[] imports=((PsiImportList)element).getAllImportStatements();
      for (      PsiImportStatementBase statement : imports) {
        ProgressManager.checkCanceled();
        final HighlightInfo info=processImport(statement,unusedImportKey);
        if (info != null) {
          result.add(info);
        }
      }
    }
  }
}
