{
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  final FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  final List<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
  final FileViewProvider viewProvider=myFile.getViewProvider();
  final Set<Language> relevantLanguages=viewProvider.getLanguages();
  final Set<PsiElement> elementSet=new THashSet<PsiElement>();
  for (  Language language : relevantLanguages) {
    PsiElement psiRoot=viewProvider.getPsi(language);
    if (!HighlightLevelUtil.shouldHighlight(psiRoot))     continue;
    List<PsiElement> elements=CollectHighlightsUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
    elementSet.addAll(elements);
  }
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  VirtualFile virtualFile=viewProvider.getVirtualFile();
  myInLibrary=fileIndex.isInLibraryClasses(virtualFile) || fileIndex.isInLibrarySource(virtualFile);
  myRefCountHolder=RefCountHolder.endUsing(myFile);
  if (myRefCountHolder == null || !myRefCountHolder.retrieveUnusedReferencesInfo(new Runnable(){
    @Override public void run(){
      boolean errorFound=collectHighlights(elementSet,highlights,progress);
      myHighlights=highlights;
      if (errorFound) {
        fileStatusMap.setErrorFoundFlag(myDocument,true);
      }
    }
  }
)) {
    fileStatusMap.markFileScopeDirty(getDocument(),Pass.UPDATE_ALL);
    GeneralHighlightingPass.cancelAndRestartDaemonLater(progress,myProject,this);
  }
}
