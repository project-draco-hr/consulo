{
  if (!helper.shouldCheckUsages(member))   return false;
  String name=member.getName();
  if (name == null)   return false;
  SearchScope useScope=member.getUseScope();
  Project project=member.getProject();
  if (useScope instanceof GlobalSearchScope) {
    if (member instanceof PsiClass) {
      useScope=GlobalSearchScope.projectScope(project).uniteWith((GlobalSearchScope)useScope);
    }
    PsiSearchHelper.SearchCostResult cheapEnough=PsiSearchHelper.SERVICE.getInstance(project).isCheapEnoughToSearch(name,(GlobalSearchScope)useScope,helper.isCurrentFileAlreadyChecked() ? member.getContainingFile() : null,progress);
    if (cheapEnough == PsiSearchHelper.SearchCostResult.TOO_MANY_OCCURRENCES)     return false;
    if (cheapEnough == PsiSearchHelper.SearchCostResult.ZERO_OCCURRENCES) {
      if (!canBeReferencedViaWeirdNames(member))       return true;
    }
  }
  FindUsagesManager findUsagesManager=((FindManagerImpl)FindManager.getInstance(project)).getFindUsagesManager();
  FindUsagesHandler handler=new JavaFindUsagesHandler(member,new JavaFindUsagesHandlerFactory(project));
  FindUsagesOptions findUsagesOptions=handler.getFindUsagesOptions().clone();
  findUsagesOptions.searchScope=useScope;
  findUsagesOptions.isSearchForTextOccurrences=true;
  return !findUsagesManager.isUsed(member,findUsagesOptions);
}
