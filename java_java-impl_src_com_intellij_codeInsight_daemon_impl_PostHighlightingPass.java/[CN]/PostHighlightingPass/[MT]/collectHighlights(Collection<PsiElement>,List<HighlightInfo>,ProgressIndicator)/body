{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
  myUnusedSymbolKey=HighlightDisplayKey.find(UnusedSymbolLocalInspection.SHORT_NAME);
  boolean unusedSymbolEnabled=profile.isToolEnabled(myUnusedSymbolKey,myFile);
  HighlightDisplayKey unusedImportKey=HighlightDisplayKey.find(UnusedImportLocalInspection.SHORT_NAME);
  boolean unusedImportEnabled=profile.isToolEnabled(unusedImportKey,myFile);
  LocalInspectionToolWrapper unusedSymbolTool=(LocalInspectionToolWrapper)profile.getInspectionTool(UnusedSymbolLocalInspection.SHORT_NAME,myFile);
  myUnusedSymbolInspection=unusedSymbolTool == null ? null : (UnusedSymbolLocalInspection)unusedSymbolTool.getTool();
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || myUnusedSymbolInspection != null);
  myDeadCodeKey=HighlightDisplayKey.find(UnusedDeclarationInspection.SHORT_NAME);
  myDeadCodeInspection=(UnusedDeclarationInspection)profile.getInspectionTool(UnusedDeclarationInspection.SHORT_NAME,myFile);
  myDeadCodeEnabled=profile.isToolEnabled(myDeadCodeKey,myFile);
  final InspectionProfileEntry inspectionTool=profile.getInspectionTool(UnusedParametersInspection.SHORT_NAME,myFile);
  myUnusedParametersInspection=inspectionTool != null ? (UnusedParametersInspection)((GlobalInspectionToolWrapper)inspectionTool).getTool() : null;
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || myUnusedParametersInspection != null);
  if (unusedImportEnabled && JspPsiUtil.isInJspFile(myFile)) {
    final JspFile jspFile=JspPsiUtil.getJspFile(myFile);
    if (jspFile != null) {
      unusedImportEnabled=!JspSpiUtil.isIncludedOrIncludesSomething(jspFile);
    }
  }
  myDeadCodeInfoType=myDeadCodeKey == null ? null : new HighlightInfoType.HighlightInfoTypeImpl(profile.getErrorLevel(myDeadCodeKey,myFile).getSeverity(),HighlightInfoType.UNUSED_SYMBOL.getAttributesKey());
  GlobalUsageHelper helper=new GlobalUsageHelper(){
    @Override public boolean shouldCheckUsages(    @NotNull PsiMember member){
      if (myInLibrary)       return false;
      if (!myDeadCodeEnabled)       return false;
      if (myDeadCodeInspection.isEntryPoint(member))       return false;
      return true;
    }
    @Override public boolean shouldIgnoreUsagesInCurrentFile(){
      return true;
    }
    @Override public boolean isLocallyUsed(    @NotNull PsiNamedElement member){
      return myRefCountHolder.isReferenced(member);
    }
  }
;
  boolean errorFound=false;
  if (unusedSymbolEnabled) {
    for (    PsiElement element : elements) {
      progress.checkCanceled();
      if (element instanceof PsiIdentifier) {
        PsiIdentifier identifier=(PsiIdentifier)element;
        HighlightInfo info=processIdentifier(identifier,progress,helper);
        if (info != null) {
          errorFound|=info.getSeverity() == HighlightSeverity.ERROR;
          result.add(info);
        }
      }
    }
  }
  if (unusedImportEnabled && myFile instanceof PsiJavaFile && HighlightLevelUtil.shouldHighlight(myFile)) {
    PsiImportList importList=((PsiJavaFile)myFile).getImportList();
    if (importList != null) {
      final PsiImportStatementBase[] imports=importList.getAllImportStatements();
      for (      PsiImportStatementBase statement : imports) {
        progress.checkCanceled();
        final HighlightInfo info=processImport(statement,unusedImportKey);
        if (info != null) {
          errorFound|=info.getSeverity() == HighlightSeverity.ERROR;
          result.add(info);
        }
      }
    }
  }
  return errorFound;
}
