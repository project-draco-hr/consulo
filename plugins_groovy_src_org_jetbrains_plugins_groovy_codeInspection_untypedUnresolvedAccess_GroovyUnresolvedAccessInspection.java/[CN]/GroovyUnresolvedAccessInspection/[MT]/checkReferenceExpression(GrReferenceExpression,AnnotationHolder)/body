{
  PsiElement refNameElement=referenceExpression.getReferenceNameElement();
  if (refNameElement == null)   return;
  if (!isInspectionEnabled(referenceExpression.getContainingFile(),referenceExpression.getProject()))   return;
  GroovyUnresolvedAccessInspection inspection=getInstance(referenceExpression.getContainingFile(),referenceExpression.getProject());
  boolean cannotBeDynamic=PsiUtil.isCompileStatic(referenceExpression) || isPropertyAccessInStaticMethod(referenceExpression);
  GroovyResolveResult resolveResult=getBestResolveResult(referenceExpression);
  if (resolveResult.getElement() != null) {
    if (!isStaticOk(resolveResult)) {
      createAnnotationForRef(holder,referenceExpression,cannotBeDynamic,GroovyBundle.message("cannot.reference.nonstatic",referenceExpression.getReferenceName()));
    }
    return;
  }
  if (ResolveUtil.isKeyOfMap(referenceExpression)) {
    Annotation annotation=holder.createInfoAnnotation(refNameElement,null);
    annotation.setTextAttributes(DefaultHighlighter.MAP_KEY);
    return;
  }
  if (GrHighlightUtil.shouldHighlightAsUnresolved(referenceExpression)) {
    Annotation annotation=createAnnotationForRef(holder,referenceExpression,cannotBeDynamic,GroovyBundle.message("cannot.resolve",referenceExpression.getReferenceName()));
    if (isCall(referenceExpression)) {
      registerStaticImportFix(referenceExpression,annotation);
    }
 else {
      registerCreateClassByTypeFix(referenceExpression,annotation);
      registerAddImportFixes(referenceExpression,annotation);
    }
    registerReferenceFixes(referenceExpression,annotation,cannotBeDynamic);
    UnresolvedReferenceQuickFixProvider.registerReferenceFixes(referenceExpression,new QuickFixActionRegistrarAdapter(annotation));
    OrderEntryFix.registerFixes(new QuickFixActionRegistrarAdapter(annotation),referenceExpression);
  }
}
