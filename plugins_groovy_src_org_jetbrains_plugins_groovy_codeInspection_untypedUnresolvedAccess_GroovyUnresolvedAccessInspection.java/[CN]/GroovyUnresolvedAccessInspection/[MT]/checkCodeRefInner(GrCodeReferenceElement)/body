{
  if (PsiTreeUtil.getParentOfType(refElement,GroovyDocPsiElement.class) != null)   return null;
  PsiElement nameElement=refElement.getReferenceNameElement();
  if (nameElement == null)   return null;
  if (!isInspectionEnabled(refElement.getContainingFile(),refElement.getProject()))   return null;
  GroovyUnresolvedAccessInspection inspection=getInstance(refElement.getContainingFile(),refElement.getProject());
  if (isResolvedStaticImport(refElement))   return null;
  GroovyResolveResult resolveResult=refElement.advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  if (!(refElement.getParent() instanceof GrPackageDefinition) && resolved == null) {
    String message=GroovyBundle.message("cannot.resolve",refElement.getReferenceName());
    HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,nameElement,message);
    HighlightDisplayKey displayKey=HighlightDisplayKey.find(SHORT_NAME);
    registerCreateClassByTypeFix(refElement,info,displayKey);
    registerAddImportFixes(refElement,info,displayKey);
    UnresolvedReferenceQuickFixProvider.registerReferenceFixes(refElement,new QuickFixActionRegistrarAdapter(info,displayKey));
    OrderEntryFix.registerFixes(new QuickFixActionRegistrarAdapter(info,displayKey),refElement);
    return info;
  }
  return null;
}
