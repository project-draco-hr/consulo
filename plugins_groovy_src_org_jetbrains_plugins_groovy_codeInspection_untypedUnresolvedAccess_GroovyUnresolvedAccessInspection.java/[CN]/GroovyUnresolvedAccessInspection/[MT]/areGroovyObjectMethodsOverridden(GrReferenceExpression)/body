{
  PsiType qualifierType=GrReferenceResolveUtil.getQualifierType(ref);
  if (!(qualifierType instanceof PsiClassType))   return false;
  PsiClass resolved=((PsiClassType)qualifierType).resolve();
  if (resolved == null)   return false;
  PsiClass groovyObject=JavaPsiFacade.getInstance(ref.getProject()).findClass(GroovyCommonClassNames.GROOVY_OBJECT,ref.getResolveScope());
  if (groovyObject == null)   return false;
  String methodName;
  if (ref.getParent() instanceof GrCall) {
    methodName="invokeMethod";
  }
 else   if (PsiUtil.isLValue(ref)) {
    methodName="setProperty";
  }
 else {
    methodName="getProperty";
  }
  PsiMethod[] patternMethods=groovyObject.findMethodsByName(methodName,false);
  if (patternMethods.length != 1)   return false;
  PsiMethod patternMethod=patternMethods[0];
  PsiMethod found=resolved.findMethodBySignature(patternMethod,true);
  if (found == null)   return false;
  PsiClass aClass=found.getContainingClass();
  if (aClass == null)   return false;
  String qname=aClass.getQualifiedName();
  if (GroovyCommonClassNames.GROOVY_OBJECT.equals(qname))   return false;
  if (GroovyCommonClassNames.GROOVY_OBJECT_SUPPORT.equals(qname))   return false;
  return true;
}
