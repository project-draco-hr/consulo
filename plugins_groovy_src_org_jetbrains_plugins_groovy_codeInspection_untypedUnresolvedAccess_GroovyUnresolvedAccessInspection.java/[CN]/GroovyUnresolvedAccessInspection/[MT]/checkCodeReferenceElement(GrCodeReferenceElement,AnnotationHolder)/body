{
  if (PsiTreeUtil.getParentOfType(refElement,GroovyDocPsiElement.class) != null)   return;
  if (!isInspectionEnabled(refElement.getContainingFile(),refElement.getProject()))   return;
  GroovyUnresolvedAccessInspection inspection=getInstance(refElement.getContainingFile(),refElement.getProject());
  PsiElement nameElement=refElement.getReferenceNameElement();
  if (nameElement == null)   return;
  if (isResolvedStaticImport(refElement))   return;
  GroovyResolveResult resolveResult=refElement.advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  if (refElement.getParent() instanceof GrPackageDefinition) {
    checkPackage((GrPackageDefinition)refElement.getParent(),holder);
  }
 else   if (resolved == null) {
    final Annotation annotation=holder.createErrorAnnotation(nameElement,GroovyBundle.message("cannot.resolve",refElement.getReferenceName()));
    annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
    registerCreateClassByTypeFix(refElement,annotation);
    registerAddImportFixes(refElement,annotation);
    UnresolvedReferenceQuickFixProvider.registerReferenceFixes(refElement,new QuickFixActionRegistrarAdapter(annotation));
    OrderEntryFix.registerFixes(new QuickFixActionRegistrarAdapter(annotation),refElement);
  }
}
