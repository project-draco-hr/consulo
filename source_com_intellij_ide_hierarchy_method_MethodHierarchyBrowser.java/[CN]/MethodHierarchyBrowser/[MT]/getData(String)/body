{
  if (DataConstants.PSI_ELEMENT.equals(dataId)) {
    return getSelectedElement();
  }
 else   if (DataConstantsEx.DELETE_ELEMENT_PROVIDER.equals(dataId)) {
    return null;
  }
 else   if (METHOD_HIERARCHY_BROWSER_DATA_CONSTANT.equals(dataId)) {
    return this;
  }
 else   if (DataConstantsEx.HELP_ID.equals(dataId)) {
    return HELP_ID;
  }
 else   if (DataConstantsEx.PSI_ELEMENT_ARRAY.equals(dataId)) {
    return getSelectedMethods();
  }
 else   if (DataConstants.NAVIGATABLE_ARRAY.equals(dataId)) {
    final PsiElement[] selectedElements=getSelectedElements();
    if (selectedElements == null || selectedElements.length == 0)     return null;
    final ArrayList<Navigatable> navigatables=new ArrayList<Navigatable>();
    for (    PsiElement selectedElement : selectedElements) {
      if (selectedElement instanceof Navigatable && selectedElement.isValid()) {
        navigatables.add((Navigatable)selectedElement);
      }
    }
    return navigatables.toArray(new Navigatable[navigatables.size()]);
  }
  return null;
}
