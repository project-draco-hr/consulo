{
  if (mySearchResults.getEditor() == null)   return;
  final SelectionModel selectionModel=mySearchResults.getEditor().getSelectionModel();
  int[] starts=selectionModel.getBlockSelectionStarts();
  int[] ends=selectionModel.getBlockSelectionEnds();
  final HashSet<RangeHighlighter> toRemove=new HashSet<RangeHighlighter>();
  Set<RangeHighlighter> toAdd=new HashSet<RangeHighlighter>();
  for (  RangeHighlighter highlighter : myHighlighters) {
    boolean intersectsWithSelection=false;
    for (int i=0; i < starts.length; ++i) {
      TextRange selectionRange=new TextRange(starts[i],ends[i]);
      intersectsWithSelection=selectionRange.intersects(highlighter.getStartOffset(),highlighter.getEndOffset()) && selectionRange.getEndOffset() != highlighter.getStartOffset() && highlighter.getEndOffset() != selectionRange.getStartOffset();
      if (intersectsWithSelection)       break;
    }
    final Object userData=highlighter.getUserData(IN_SELECTION_KEY);
    if (userData != null) {
      if (!intersectsWithSelection) {
        if (userData == IN_SELECTION2) {
          HighlightManager.getInstance(mySearchResults.getProject()).removeSegmentHighlighter(mySearchResults.getEditor(),highlighter);
          toRemove.add(highlighter);
        }
 else {
          highlighter.putUserData(IN_SELECTION_KEY,null);
        }
      }
    }
 else     if (intersectsWithSelection) {
      TextRange cursor=mySearchResults.getCursor();
      if (cursor != null && highlighter.getStartOffset() == cursor.getStartOffset() && highlighter.getEndOffset() == cursor.getEndOffset())       continue;
      final RangeHighlighter toAnnotate=highlightRange(new TextRange(highlighter.getStartOffset(),highlighter.getEndOffset()),new TextAttributes(null,null,Color.WHITE,EffectType.ROUNDED_BOX,0),toAdd);
      highlighter.putUserData(IN_SELECTION_KEY,IN_SELECTION1);
      toAnnotate.putUserData(IN_SELECTION_KEY,IN_SELECTION2);
    }
  }
  myHighlighters.removeAll(toRemove);
  myHighlighters.addAll(toAdd);
}
