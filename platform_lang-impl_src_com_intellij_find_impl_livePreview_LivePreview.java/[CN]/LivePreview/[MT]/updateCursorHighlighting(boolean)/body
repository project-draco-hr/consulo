{
  hideBalloon();
  if (myCursorHighlighter != null) {
    HighlightManager.getInstance(mySearchResults.getProject()).removeSegmentHighlighter(mySearchResults.getEditor(),myCursorHighlighter);
    myCursorHighlighter=null;
  }
  final FindResult cursor=mySearchResults.getCursor();
  Editor editor=mySearchResults.getEditor();
  SelectionModel selection=editor.getSelectionModel();
  if (cursor != null) {
    Set<RangeHighlighter> dummy=new HashSet<RangeHighlighter>();
    highlightRange(cursor,new TextAttributes(null,null,Color.BLACK,EffectType.ROUNDED_BOX,0),dummy);
    if (!dummy.isEmpty()) {
      myCursorHighlighter=dummy.iterator().next();
    }
    if (scroll) {
      if (mySearchResults.getFindModel().isGlobal()) {
        FoldingModel foldingModel=editor.getFoldingModel();
        final FoldRegion[] allRegions=editor.getFoldingModel().getAllFoldRegions();
        foldingModel.runBatchFoldingOperation(new Runnable(){
          @Override public void run(){
            for (            FoldRegion region : allRegions) {
              if (cursor.intersects(TextRange.create(region))) {
                region.setExpanded(true);
              }
            }
          }
        }
);
        selection.setSelection(cursor.getStartOffset(),cursor.getEndOffset());
        editor.getCaretModel().moveToOffset(cursor.getEndOffset());
        editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
      }
 else {
        if (!SearchResults.insideVisibleArea(editor,cursor)) {
          LogicalPosition pos=editor.offsetToLogicalPosition(cursor.getStartOffset());
          editor.getScrollingModel().scrollTo(pos,ScrollType.CENTER);
        }
      }
    }
    editor.getScrollingModel().runActionOnScrollingFinished(new Runnable(){
      @Override public void run(){
        showReplacementPreview();
      }
    }
);
  }
}
