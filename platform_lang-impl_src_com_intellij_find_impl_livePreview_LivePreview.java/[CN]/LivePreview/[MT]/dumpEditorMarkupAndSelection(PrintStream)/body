{
  dumpStream.println(mySearchResults.getFindModel());
  if (myReplacementPreviewText != null) {
    dumpStream.println("--");
    dumpStream.println("Replacement Preview: " + myReplacementPreviewText);
  }
  dumpStream.println("--");
  Editor editor=mySearchResults.getEditor();
  RangeHighlighter[] highlighters=editor.getMarkupModel().getAllHighlighters();
  List<Pair<Integer,Character>> ranges=new ArrayList<Pair<Integer,Character>>();
  for (  RangeHighlighter highlighter : highlighters) {
    ranges.add(new Pair<Integer,Character>(highlighter.getStartOffset(),'['));
    ranges.add(new Pair<Integer,Character>(highlighter.getEndOffset(),']'));
  }
  SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.getSelectionStart() != selectionModel.getSelectionEnd()) {
    ranges.add(new Pair<Integer,Character>(selectionModel.getSelectionStart(),'<'));
    ranges.add(new Pair<Integer,Character>(selectionModel.getSelectionEnd(),'>'));
  }
  ranges.add(new Pair<Integer,Character>(-1,'\n'));
  ranges.add(new Pair<Integer,Character>(editor.getDocument().getTextLength() + 1,'\n'));
  ContainerUtil.sort(ranges,new Comparator<Pair<Integer,Character>>(){
    @Override public int compare(    Pair<Integer,Character> pair,    Pair<Integer,Character> pair2){
      int res=pair.first - pair2.first;
      if (res == 0) {
        Character c1=pair.second;
        Character c2=pair2.second;
        if (c1 == '<' && c2 == '[') {
          return 1;
        }
 else         if (c1 == '[' && c2 == '<') {
          return -1;
        }
        return c1.compareTo(c2);
      }
      return res;
    }
  }
);
  Document document=editor.getDocument();
  for (int i=0; i < ranges.size() - 1; ++i) {
    Pair<Integer,Character> pair=ranges.get(i);
    Pair<Integer,Character> pair1=ranges.get(i + 1);
    dumpStream.print(pair.second + document.getText(TextRange.create(Math.max(pair.first,0),Math.min(pair1.first,document.getTextLength()))));
  }
  dumpStream.println("\n--");
  if (NotFound) {
    dumpStream.println("Not Found");
    dumpStream.println("--");
    NotFound=false;
  }
  for (  RangeHighlighter highlighter : highlighters) {
    dumpStream.println(highlighter + " : " + highlighter.getTextAttributes());
  }
  dumpStream.println("------------");
}
