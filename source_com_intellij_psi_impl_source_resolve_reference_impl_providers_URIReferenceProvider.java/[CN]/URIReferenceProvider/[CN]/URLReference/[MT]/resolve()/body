{
  final String canonicalText=getCanonicalText();
  if (canonicalText.length() == 0) {
    final XmlAttribute attr=PsiTreeUtil.getParentOfType(getElement(),XmlAttribute.class);
    if (attr != null && attr.isNamespaceDeclaration() && attr.getNamespacePrefix().length() == 0) {
      return myElement;
    }
    return null;
  }
  if (ExternalResourceManagerEx.getInstanceEx().isIgnoredResource(canonicalText))   return myElement;
  VirtualFile relativeFile=VfsUtil.findRelativeFile(canonicalText,myElement.getContainingFile().getVirtualFile());
  if (relativeFile != null)   return myElement.getManager().findFile(relativeFile);
  final XmlTag tag=PsiTreeUtil.getParentOfType(myElement,XmlTag.class);
  if (tag != null && canonicalText.equals(tag.getAttributeValue(TARGET_NAMESPACE_ATTR_NAME)))   return tag;
  final PsiFile containingFile=myElement.getContainingFile();
  if (containingFile instanceof XmlFile) {
    final XmlTag rootTag=((XmlFile)containingFile).getDocument().getRootTag();
    if (rootTag == null)     return null;
    final XmlNSDescriptor nsDescriptor=rootTag.getNSDescriptor(canonicalText,true);
    if (nsDescriptor != null)     return nsDescriptor.getDescriptorFile();
    final PsiElement[] result=new PsiElement[1];
    processWsdlSchemas(rootTag,new Processor<XmlTag>(){
      public boolean process(      final XmlTag t){
        if (canonicalText.equals(t.getAttributeValue(TARGET_NAMESPACE_ATTR_NAME))) {
          result[0]=t;
          return false;
        }
        return true;
      }
    }
);
    return result[0];
  }
  return null;
}
