{
  String[] resourceUrls=ExternalResourceManager.getInstance().getResourceUrls(null,true);
  final PsiFile containingFile=myElement.getContainingFile();
  if (PsiUtil.isInJspFile(containingFile)) {
    final JspManager jspManager=JspManager.getInstance(containingFile.getProject());
    if (jspManager != null) {
      final Object[] possibleTldUris=jspManager.getPossibleTldUris(PsiUtil.getJspFile(containingFile));
      Object[] result=new Object[resourceUrls.length + possibleTldUris.length + 1];
      System.arraycopy(resourceUrls,0,result,0,resourceUrls.length);
      System.arraycopy(possibleTldUris,0,result,resourceUrls.length,possibleTldUris.length);
      result[result.length - 1]=JspManager.TAG_DIR_NS_PREFIX + "/WEB-INF/tags";
      return result;
    }
  }
 else   if (containingFile instanceof XmlFile) {
    XmlTag rootTag=((XmlFile)containingFile).getDocument().getRootTag();
    final ArrayList<String> additionalNs=new ArrayList<String>();
    processWsdlSchemas(rootTag,new Processor<XmlTag>(){
      public boolean process(      final XmlTag xmlTag){
        final String s=xmlTag.getAttributeValue(TARGET_NAMESPACE_ATTR_NAME);
        if (s != null) {
          additionalNs.add(s);
        }
        return true;
      }
    }
);
    resourceUrls=ArrayUtil.mergeArrays(resourceUrls,additionalNs.toArray(new String[additionalNs.size()]),String.class);
  }
  return resourceUrls;
}
