{
  for (  TreeConflictData.FileData data : myData.getLeftFiles()) {
    applyFileData(myMineDir,data);
  }
  final PatchReader reader=new PatchReader(myData.getTheirsPatch());
  final List<TextFilePatch> patches=reader.readAllPatches();
  final List<FilePatch> filePatchList=new ArrayList<FilePatch>(patches);
  for (Iterator<FilePatch> iterator=filePatchList.iterator(); iterator.hasNext(); ) {
    final FilePatch patch=iterator.next();
    if (patch.isDeletedFile()) {
      myClientRunner.delete(myTheirsDir,patch.getBeforeName());
      iterator.remove();
    }
  }
  if (!filePatchList.isEmpty()) {
    PatchApplier<BinaryFilePatch> applier=new PatchApplier<BinaryFilePatch>(myProject,myTheirsDir,filePatchList,(LocalChangeList)null,null,null);
    applier.setIgnoreContentRootsCheck();
    applier.execute();
    Assert.assertEquals(0,applier.getRemainingPatches().size());
  }
  try {
    Thread.sleep(10);
  }
 catch (  InterruptedException e) {
  }
  SvnVcs vcs=SvnVcs.getInstance(myProject);
  for (  TextFilePatch patch : patches) {
    if (patch.isNewFile() || !Comparing.equal(patch.getAfterName(),patch.getBeforeName())) {
      final String afterName=patch.getAfterName();
      final String[] parts=afterName.split("/");
      String subPath="";
      for (      String part : parts) {
        final String path=subPath + part;
        SVNInfo info=vcs.getInfo(new File(myTheirsDir.getPath(),path));
        if (info == null || info.getURL() == null) {
          myClientRunner.add(myTheirsDir,path);
        }
        subPath+=part + "/";
      }
      if (!patch.isNewFile()) {
        myClientRunner.delete(myTheirsDir,patch.getBeforeName());
      }
    }
  }
  final IOException[] ioe=new IOException[1];
  VfsUtil.processFilesRecursively(myTheirsDir,new Processor<VirtualFile>(){
    @Override public boolean process(    VirtualFile file){
      if (myTheirsDir.equals(file))       return true;
      if (file.isDirectory() && file.getChildren().length == 0) {
        try {
          myClientRunner.delete(myTheirsDir,file.getPath());
        }
 catch (        IOException e) {
          ioe[0]=e;
        }
      }
      return true;
    }
  }
,new Convertor<VirtualFile,Boolean>(){
    @Override public Boolean convert(    VirtualFile o){
      return !SvnUtil.isAdminDirectory(o);
    }
  }
);
  if (ioe[0] != null) {
    throw ioe[0];
  }
  myClientRunner.checkin(myTheirsDir);
  myClientRunner.update(myMineDir);
  myClientRunner.update(myTheirsDir);
}
