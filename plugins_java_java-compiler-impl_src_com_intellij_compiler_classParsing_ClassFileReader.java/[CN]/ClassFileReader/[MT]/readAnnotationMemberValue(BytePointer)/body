{
  final char tag=(char)ClsUtil.readU1(ptr);
switch (tag) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
{
      final int valueIndex=ClsUtil.readU2(ptr);
      return new AnnotationPrimitiveConstantValue(tag,readConstant(new BytePointer(ptr.bytes,getOffsetInConstantPool(valueIndex))));
    }
case 's':
{
    final int valueIndex=ClsUtil.readU2(ptr);
    return new StringConstantValue(ClsUtil.readUtf8Info(ptr.bytes,getOffsetInConstantPool(valueIndex)));
  }
case 'e':
{
  final int typeNameIndex=ClsUtil.readU2(ptr);
  final int constantNameIndex=ClsUtil.readU2(ptr);
  final String typeName=ClsUtil.readUtf8Info(ptr.bytes,getOffsetInConstantPool(typeNameIndex));
  final String constantName=ClsUtil.readUtf8Info(ptr.bytes,getOffsetInConstantPool(constantNameIndex));
  return new EnumConstantValue(getSymbolId(typeName),getSymbolId(constantName));
}
case 'c':
{
final int classInfoIndex=ClsUtil.readU2(ptr);
BytePointer p=new BytePointer(ptr.bytes,getOffsetInConstantPool(classInfoIndex));
final int recordTag=ClsUtil.readU1(p);
if (recordTag != ClsUtil.CONSTANT_Utf8) {
  throw new ClsFormatException(CompilerBundle.message("class.parsing.error.wrong.record.tag.expected.another",recordTag,ClsUtil.CONSTANT_Utf8));
}
p.offset+=2;
final String className=ClsUtil.getTypeText(p.bytes,p.offset);
return new ClassInfoConstantValue(getSymbolId(className));
}
case '@':
{
return readAnnotation(ptr);
}
case '[':
{
final int numberOfValues=ClsUtil.readU2(ptr);
final ConstantValue[] values=new ConstantValue[numberOfValues];
for (int idx=0; idx < numberOfValues; idx++) {
values[idx]=readAnnotationMemberValue(ptr);
}
return new ConstantValueArray(values);
}
default :
throw new ClsFormatException(CompilerBundle.message("class.parsing.error.wrong.tag.annotation.member.value",tag));
}
}
