{
  if (element instanceof PsiField) {
    final PsiField field=(PsiField)element;
    if (JavaFxPsiUtil.isVisibleInFxml(field) && !field.hasModifierProperty(PsiModifier.STATIC) && !field.hasModifierProperty(PsiModifier.FINAL)) {
      final PsiClass containingClass=field.getContainingClass();
      if (containingClass != null && containingClass.hasModifierProperty(PsiModifier.PUBLIC)) {
        final PsiMethod[] constructors=containingClass.getConstructors();
        boolean defaultConstructor=constructors.length == 0;
        for (        PsiMethod constructor : constructors) {
          if (constructor.getParameterList().getParametersCount() == 0) {
            defaultConstructor=true;
            break;
          }
        }
        if (!defaultConstructor)         return;
        if (containingClass.getContainingClass() != null)         return;
        final ArrayList<GotoRelatedItem> targets=new ArrayList<GotoRelatedItem>();
        collectTargets(field,targets,new Function<PsiElement,GotoRelatedItem>(){
          @Override public GotoRelatedItem fun(          PsiElement element){
            return new GotoRelatedItem(element);
          }
        }
,true);
        if (targets.isEmpty())         return;
        result.add(new RelatedItemLineMarkerInfo<PsiField>(field,field.getNameIdentifier().getTextRange(),AllIcons.FileTypes.Xml,Pass.UPDATE_OVERRIDEN_MARKERS,null,new JavaFXIdIconNavigationHandler(),GutterIconRenderer.Alignment.LEFT,targets));
      }
    }
  }
}
