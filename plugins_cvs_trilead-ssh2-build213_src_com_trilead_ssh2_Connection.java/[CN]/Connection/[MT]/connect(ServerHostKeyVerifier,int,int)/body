{
final class TimeoutState {
    boolean isCancelled=false;
    boolean timeoutSocketClosed=false;
  }
  if (tm != null)   throw new IOException("Connection to " + hostname + " is already in connected state!");
  if (connectTimeout < 0)   throw new IllegalArgumentException("connectTimeout must be non-negative!");
  if (kexTimeout < 0)   throw new IllegalArgumentException("kexTimeout must be non-negative!");
  final TimeoutState state=new TimeoutState();
  tm=new TransportManager(hostname,port);
  tm.setConnectionMonitors(connectionMonitors);
synchronized (tm) {
  }
  try {
    TimeoutToken token=null;
    if (kexTimeout > 0) {
      final Runnable timeoutHandler=new Runnable(){
        public void run(){
synchronized (state) {
            if (state.isCancelled)             return;
            state.timeoutSocketClosed=true;
            tm.close(new SocketTimeoutException("The connect timeout expired"),false);
          }
        }
      }
;
      long timeoutHorizont=System.currentTimeMillis() + kexTimeout;
      token=TimeoutService.addTimeoutHandler(timeoutHorizont,timeoutHandler);
    }
    try {
      tm.initialize(cryptoWishList,verifier,dhgexpara,connectTimeout,getOrCreateSecureRND(),proxyData);
    }
 catch (    SocketTimeoutException se) {
      throw (SocketTimeoutException)new SocketTimeoutException("The connect() operation on the socket timed out.").initCause(se);
    }
    tm.setTcpNoDelay(tcpNoDelay);
    ConnectionInfo ci=tm.getConnectionInfo(1);
    if (token != null) {
      TimeoutService.cancelTimeoutHandler(token);
synchronized (state) {
        if (state.timeoutSocketClosed)         throw new IOException("This exception will be replaced by the one below =)");
        state.isCancelled=true;
      }
    }
    return ci;
  }
 catch (  SocketTimeoutException ste) {
    throw ste;
  }
catch (  IOException e1) {
    close(new Throwable("There was a problem during connect."),false);
synchronized (state) {
      if (state.timeoutSocketClosed)       throw new SocketTimeoutException("The kexTimeout (" + kexTimeout + " ms) expired.");
    }
    if (e1 instanceof HTTPProxyException)     throw e1;
    throw (IOException)new IOException("There was a problem while connecting to " + hostname + ":"+ port).initCause(e1);
  }
}
