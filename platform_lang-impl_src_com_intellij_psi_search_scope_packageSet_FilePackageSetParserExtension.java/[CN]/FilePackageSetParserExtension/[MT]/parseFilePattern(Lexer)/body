{
  StringBuffer pattern=new StringBuffer();
  boolean wasIdentifier=false;
  while (true) {
    if (lexer.getTokenType() == ScopeTokenTypes.DIV) {
      wasIdentifier=false;
      pattern.append("/");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) {
      if (wasIdentifier)       error(lexer,AnalysisScopeBundle.message("error.packageset.token.expectations",getTokenText(lexer)));
      wasIdentifier=lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER;
      pattern.append(getTokenText(lexer));
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) {
      wasIdentifier=false;
      pattern.append("*");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.DOT) {
      wasIdentifier=false;
      pattern.append(".");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.WHITE_SPACE) {
      wasIdentifier=false;
      pattern.append(" ");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.MINUS) {
      wasIdentifier=false;
      pattern.append("-");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.TILDE) {
      wasIdentifier=false;
      pattern.append("~");
    }
 else     if (lexer.getTokenType() == ScopeTokenTypes.SHARP) {
      wasIdentifier=false;
      pattern.append("#");
    }
 else {
      break;
    }
    lexer.advance();
  }
  if (pattern.length() == 0) {
    error(lexer,AnalysisScopeBundle.message("error.packageset.pattern.expectations"));
  }
  return pattern.toString();
}
