{
  if (o.getContainingFile().getLanguage() == XPathFileType.XPATH2.getLanguage()) {
    final XPathExpression operand=o.getLOperand();
    final XPathElementType operator=o.getOperator();
    if (operand instanceof XPathNumber) {
      if (operator != XPathTokenTypes.STAR && XPath2TokenTypes.KEYWORDS.contains(operator)) {
        final String op=o.getOperationSign();
        if (o.getText().startsWith(operand.getText() + op)) {
          final Annotation annotation=myHolder.createErrorAnnotation(o,"Number literal must be followed by whitespace in XPath 2");
          final XPathExpression rOperand=o.getROperand();
          if (rOperand != null) {
            final String replacement=operand.getText() + " " + op+ " "+ rOperand.getText();
            annotation.registerFix(new ExpressionReplacementFix(replacement,o));
          }
        }
      }
    }
    if (XPath2TokenTypes.COMP_OPS.contains(operator)) {
      if (operand instanceof XPathBinaryExpression && XPath2TokenTypes.COMP_OPS.contains(((XPathBinaryExpression)operand).getOperator())) {
        final Annotation annotation=myHolder.createErrorAnnotation(o,"Consecutive comparison is not allowed in XPath 2");
        final XPathExpression rOperand=o.getROperand();
        if (rOperand != null) {
          final String replacement="(" + operand.getText() + ") "+ o.getOperationSign()+ " "+ rOperand.getText();
          annotation.registerFix(new ExpressionReplacementFix(replacement,o));
        }
      }
    }
  }
  checkExpression(myHolder,o);
  super.visitXPathBinaryExpression(o);
}
