{
  super(tree);
  final TreeSelectionListener selectionListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      try {
        updateSelection(tree);
      }
 catch (      Exception e1) {
      }
    }
  }
;
  tree.getSelectionModel().addTreeSelectionListener(selectionListener);
  tree.addPropertyChangeListener(JTree.SELECTION_MODEL_PROPERTY,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      updateSelection(tree);
      if (evt.getOldValue() != null) {
        ((TreeSelectionModel)evt.getOldValue()).removeTreeSelectionListener(selectionListener);
      }
      if (evt.getNewValue() != null) {
        ((TreeSelectionModel)evt.getNewValue()).addTreeSelectionListener(selectionListener);
      }
    }
  }
);
  final TreeModelListener modelListener=new TreeModelListener(){
    @Override public void treeNodesChanged(    TreeModelEvent e){
      updateSelection(tree);
    }
    @Override public void treeNodesInserted(    TreeModelEvent e){
      updateSelection(tree);
    }
    @Override public void treeNodesRemoved(    TreeModelEvent e){
      updateSelection(tree);
    }
    @Override public void treeStructureChanged(    TreeModelEvent e){
      updateSelection(tree);
    }
  }
;
  tree.getModel().addTreeModelListener(modelListener);
  tree.addPropertyChangeListener("model",new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      updateSelection(tree);
      if (evt.getOldValue() != null) {
        ((TreeModel)evt.getOldValue()).removeTreeModelListener(modelListener);
      }
      if (evt.getNewValue() != null) {
        ((TreeModel)evt.getNewValue()).addTreeModelListener(modelListener);
      }
    }
  }
);
}
