{
  final Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
  if (editor != null) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        if (myProject.isDisposed())         return;
        EditorMarkupModel markupModel=(EditorMarkupModel)editor.getMarkupModel();
        markupModel.setErrorStripeRenderer(markupModel.getErrorStripeRenderer());
      }
    }
,ModalityState.stateForComponent(editor.getComponent()));
  }
  PsiFile file=child.getContainingFile();
  if (file == null || file instanceof PsiCompiledElement) {
    myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
    return;
  }
  Document document=PsiDocumentManager.getInstance(myProject).getCachedDocument(file);
  if (document == null)   return;
  if (whitespaceOptimizationAllowed && UpdateHighlightersUtil.isWhitespaceOptimizationAllowed(document)) {
    final ASTNode node=child.getNode();
    if (child instanceof PsiWhiteSpace || child instanceof PsiComment || child instanceof PsiDocToken) {
      myDaemonCodeAnalyzer.getFileStatusMap().markFileScopeDirty(document,child);
      return;
    }
  }
  if (file instanceof XmlFile) {
    final FileViewProvider provider=file.getViewProvider();
    if (provider instanceof XmlFileViewProvider && ((XmlFileViewProvider)provider).getLanguageExtensions().length > 0) {
      myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
      return;
    }
  }
  Language language=file.getLanguage();
  if (language == StdLanguages.JSPX || language == StdLanguages.JSP) {
    myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
    return;
  }
  PsiElement parent=child;
  while (true) {
    if (parent instanceof PsiFile || parent instanceof PsiDirectory) {
      myDaemonCodeAnalyzer.getFileStatusMap().markAllFilesDirty();
      return;
    }
    PsiElement pparent=parent.getParent();
    if (parent instanceof PsiCodeBlock && pparent instanceof PsiMethod && !((PsiMethod)pparent).isConstructor()&& pparent.getParent() instanceof PsiClass&& !(pparent.getParent() instanceof PsiAnonymousClass)) {
      myDaemonCodeAnalyzer.getFileStatusMap().markFileScopeDirty(document,pparent);
      return;
    }
    parent=pparent;
  }
}
