{
  final LinkedList<Pair<PsiType,Binding>> list=new LinkedList<Pair<PsiType,Binding>>();
  new Object(){
    void intersect(    final PsiType x,    final PsiType y,    final LinkedList<Pair<PsiType,Binding>> list){
      if (x instanceof PsiWildcardType || y instanceof PsiWildcardType) {
        final PsiType xType=x instanceof PsiWildcardType ? ((PsiWildcardType)x).getBound() : x;
        final PsiType yType=y instanceof PsiWildcardType ? ((PsiWildcardType)y).getBound() : y;
        intersect(xType,yType,list);
      }
      if (x instanceof PsiArrayType || y instanceof PsiArrayType) {
        if (x instanceof PsiClassType || y instanceof PsiClassType) {
          try {
            final PsiElementFactory f=PsiManager.getInstance(myProject).getElementFactory();
            final PsiType keyType=x instanceof PsiClassType ? x : y;
            final PsiType object=f.createTypeFromText("java.lang.Object",null);
            final PsiType cloneable=f.createTypeFromText("java.lang.Cloneable",null);
            final PsiType serializable=f.createTypeFromText("java.io.Serializable",null);
            intersect(keyType,object,list);
            intersect(keyType,cloneable,list);
            intersect(keyType,serializable,list);
          }
 catch (          IncorrectOperationException e) {
            LOG.error("Exception " + e);
          }
        }
 else         if (x instanceof PsiArrayType && y instanceof PsiArrayType) {
          intersect(((PsiArrayType)x).getComponentType(),((PsiArrayType)y).getComponentType(),list);
        }
      }
 else       if (x instanceof PsiClassType && y instanceof PsiClassType) {
        final PsiClassType.ClassResolveResult xResult=Util.resolveType(x);
        final PsiClassType.ClassResolveResult yResult=Util.resolveType(y);
        final PsiClass xClass=xResult.getElement();
        final PsiClass yClass=yResult.getElement();
        final PsiSubstitutor xSubst=xResult.getSubstitutor();
        final PsiSubstitutor ySubst=yResult.getSubstitutor();
        if (xClass == null || yClass == null) {
          return;
        }
        if (xClass.equals(yClass)) {
          final Binding risen=rise(x,y,null);
          if (risen == null) {
            final PsiElementFactory factory=xClass.getManager().getElementFactory();
            list.addFirst(new Pair<PsiType,Binding>(Util.banalize(factory.createType(xClass,factory.createRawSubstitutor(xClass))),create()));
          }
 else {
            list.addFirst(new Pair<PsiType,Binding>(risen.apply(x),risen));
          }
        }
 else {
          final PsiClass[] ancestors=GenericsUtil.getLeastUpperClasses(xClass,yClass);
          for (int i=0; i < ancestors.length; i++) {
            final PsiClass ancestor=ancestors[i];
            if (ancestor.getQualifiedName().equals("java.lang.Object") && ancestors.length > 1) {
              continue;
            }
            final PsiSubstitutor x2aSubst=TypeConversionUtil.getSuperClassSubstitutor(ancestor,xClass,xSubst);
            final PsiSubstitutor y2aSubst=TypeConversionUtil.getSuperClassSubstitutor(ancestor,yClass,ySubst);
            final PsiElementFactory factory=xClass.getManager().getElementFactory();
            intersect(factory.createType(ancestor,x2aSubst),factory.createType(ancestor,y2aSubst),list);
          }
        }
      }
    }
  }
.intersect(x,y,list);
  return list;
}
