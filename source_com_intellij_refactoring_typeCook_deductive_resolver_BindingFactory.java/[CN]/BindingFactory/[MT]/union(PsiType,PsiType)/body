{
  final LinkedList<Pair<PsiType,Binding>> list=new LinkedList<Pair<PsiType,Binding>>();
  new Object(){
    void union(    final PsiType x,    final PsiType y,    final LinkedList<Pair<PsiType,Binding>> list){
      if (x instanceof PsiArrayType && y instanceof PsiArrayType) {
        union(((PsiArrayType)x).getComponentType(),((PsiArrayType)y).getComponentType(),list);
      }
 else       if (x instanceof PsiClassType && y instanceof PsiClassType) {
        final PsiClassType.ClassResolveResult xResult=Util.resolveType(x);
        final PsiClassType.ClassResolveResult yResult=Util.resolveType(y);
        final PsiClass xClass=xResult.getElement();
        final PsiClass yClass=yResult.getElement();
        final PsiSubstitutor xSubst=xResult.getSubstitutor();
        final PsiSubstitutor ySubst=yResult.getSubstitutor();
        if (xClass == null || yClass == null) {
          return;
        }
        if (xClass.equals(yClass)) {
          final Binding risen=rise(x,y,null);
          if (risen == null) {
            return;
          }
          list.addFirst(new Pair<PsiType,Binding>(risen.apply(x),risen));
        }
 else {
          final PsiClass[] descendants=getGreatestLowerClasses(xClass,yClass);
          for (int i=0; i < descendants.length; i++) {
            final PsiClass descendant=descendants[i];
            final PsiSubstitutor x2aSubst=TypeConversionUtil.getClassSubstitutor(xClass,descendant,xSubst);
            final PsiSubstitutor y2aSubst=TypeConversionUtil.getClassSubstitutor(yClass,descendant,ySubst);
            LOG.assertTrue(x2aSubst != null && y2aSubst != null);
            final PsiElementFactory factory=xClass.getManager().getElementFactory();
            union(factory.createType(descendant,x2aSubst),factory.createType(descendant,y2aSubst),list);
          }
        }
      }
    }
  }
.union(x,y,list);
  return list;
}
