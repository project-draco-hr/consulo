{
  LOG.assertTrue(b instanceof BindingImpl);
  final BindingImpl b1=this;
  final BindingImpl b2=(BindingImpl)b;
  LOG.assertTrue(b1.myBindings.length == b2.myBindings.length);
  final BindingImpl b3=new BindingImpl(b1.myBindings.length);
  for (int i=0; i < myBindings.length; i++) {
    final PsiType b1i=b1.myBindings[i];
    final PsiType b2i=b2.myBindings[i];
    final int flag=(b1i == null ? 0 : 1) + (b2i == null ? 0 : 2);
switch (flag) {
case 0:
      break;
case 1:
{
      final PsiType type=b2.apply(b1i);
      b3.myBindings[i]=type;
      b3.myCyclic=type instanceof PsiTypeVariable;
    }
  break;
case 2:
{
  final PsiType type=b1.apply(b2i);
  b3.myBindings[i]=type;
  b3.myCyclic=type instanceof PsiTypeVariable;
}
break;
case 3:
final Binding common=rise(b1i,b2i);
if (common == null) {
return null;
}
final PsiType type=b2.apply(common.apply(b1i));
b3.myBindings[i]=type;
b3.myCyclic=type instanceof PsiTypeVariable;
}
}
return b3;
}
