{
  disposeRenderer();
  ApplicationManager.getApplication().saveAll();
  mySessionAlarm.addRequest(new Runnable(){
    @Override public void run(){
      if (mySession == null) {
        showProgress("Creating RenderLib...");
      }
    }
  }
,500);
  final long sessionId=++mySessionId;
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    private void cancel(){
      mySessionAlarm.cancelAllRequests();
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (!isProjectClosed()) {
            hideProgress();
          }
        }
      }
);
    }
    @Override public void run(){
      try {
        long time=System.currentTimeMillis();
        myProfileLastVersion=myProfileAction.getVersion();
        AndroidPlatform platform=AndroidPlatform.getInstance(getModule());
        if (platform == null) {
          throw new AndroidSdkNotConfiguredException();
        }
        AndroidFacet facet=AndroidFacet.getInstance(getModule());
        ProfileManager manager=myProfileAction.getProfileManager();
        State deviceConfiguration=manager.getSelectedDeviceConfiguration();
        if (deviceConfiguration == null) {
          throw new DeviceIsNotSpecifiedException();
        }
        myLastRenderedConfiguration=new FolderConfiguration();
        myLastRenderedConfiguration.set(DeviceConfigHelper.getFolderConfig(deviceConfiguration));
        myLastRenderedConfiguration.setUiModeQualifier(new UiModeQualifier(manager.getSelectedDockMode()));
        myLastRenderedConfiguration.setNightModeQualifier(new NightModeQualifier(manager.getSelectedNightMode()));
        LocaleData locale=manager.getSelectedLocale();
        if (locale == null) {
          throw new RenderingException("Locale is not specified");
        }
        myLastRenderedConfiguration.setLanguageQualifier(new LanguageQualifier(locale.getLanguage()));
        myLastRenderedConfiguration.setRegionQualifier(new RegionQualifier(locale.getRegion()));
        double xdpi=deviceConfiguration.getHardware().getScreen().getXdpi();
        double ydpi=deviceConfiguration.getHardware().getScreen().getYdpi();
        final boolean updatePalette=!Comparing.equal(myProfileAction.getProfileManager().getSelectedTarget(),myLastTarget);
        myLastTarget=manager.getSelectedTarget();
        ThemeData theme=manager.getSelectedTheme();
        if (myLastTarget == null || theme == null) {
          throw new RenderingException();
        }
        if (sessionId != mySessionId) {
          cancel();
          return;
        }
        RenderingResult result=null;
        if (myRendererLock.tryLock()) {
          try {
            result=RenderUtil.renderLayout(getModule(),layoutXmlText,myFile,null,myLastTarget,facet,myLastRenderedConfiguration,xdpi,ydpi,theme,10000,true);
          }
  finally {
            myRendererLock.unlock();
          }
        }
 else {
          cancel();
          return;
        }
        if (sessionId != mySessionId) {
          cancel();
          return;
        }
        if (ApplicationManagerEx.getApplicationEx().isInternal()) {
          System.out.println("Render time: " + (System.currentTimeMillis() - time));
        }
        if (result == null) {
          throw new RenderingException();
        }
        final RenderSession session=mySession=result.getSession();
        mySessionAlarm.cancelAllRequests();
        final List<FixableIssueMessage> warnMessages=result.getWarnMessages();
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            try {
              if (!isProjectClosed()) {
                hideProgress();
                if (sessionId == mySessionId) {
                  runnable.consume(session);
                  if (updatePalette) {
                    updatePalette(myLastTarget);
                  }
                  showWarnings(warnMessages);
                }
              }
            }
 catch (            Throwable e) {
              myPSIChangeListener.clear();
              showError("Parsing error",throwable.wrap(e));
              myParseTime=false;
            }
          }
        }
);
      }
 catch (      final Throwable e) {
        myPSIChangeListener.clear();
        mySessionAlarm.cancelAllRequests();
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            myPSIChangeListener.clear();
            showError("Render error",throwable.wrap(e));
            myParseTime=false;
          }
        }
);
      }
    }
  }
);
}
