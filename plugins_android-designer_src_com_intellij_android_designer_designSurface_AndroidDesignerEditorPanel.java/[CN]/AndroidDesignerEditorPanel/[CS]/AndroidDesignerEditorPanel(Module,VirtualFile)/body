{
  super(module,file);
  myXmlFile=(XmlFile)ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>(){
    @Override public PsiFile compute(){
      return PsiManager.getInstance(myModule.getProject()).findFile(myFile);
    }
  }
);
  myPSIChangeListener=new ExternalPSIChangeListener(this,myXmlFile,100,new Runnable(){
    @Override public void run(){
      reparseFile();
    }
  }
);
  myPSIChangeListener.start();
  try {
    parseFile();
    showDesignerCard();
  }
 catch (  Throwable e) {
    showError("Parse error: ",e);
  }
  myGlassLayer.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent event){
      if (event.getKeyCode() == KeyEvent.VK_F2) {
        myToolProvider.setActiveTool(new CreationTool(true,new ComponentCreationFactory(){
          @Override @NotNull public RadComponent create() throws Exception {
            return new RadViewComponent(null,event.isControlDown() ? "swing" : "android");
          }
        }
));
      }
    }
  }
);
}
