{
  final List<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiManager manager=element.getManager();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(manager.getProject());
  RenamePsiElementProcessor processor=RenamePsiElementProcessor.forElement(element);
  Collection<PsiReference> refs=processor.findReferences(element);
  for (  PsiReference ref : refs) {
    PsiElement referenceElement=ref.getElement();
    result.add(new MoveRenameUsageInfo(referenceElement,ref,ref.getRangeInElement().getStartOffset(),ref.getRangeInElement().getEndOffset(),element,false));
  }
  processor.findCollisions(element,newName,allRenames,result);
  if (searchInStringsAndComments && !(element instanceof PsiDirectory)) {
    String stringToSearch=ElementDescriptionUtil.getElementDescription(element,false ? NonCodeSearchDescriptionLocation.NON_JAVA : NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,false,processor);
      TextOccurrencesUtil.UsageInfoFactory factory=new NonCodeUsageInfoFactory(element,stringToReplace);
      TextOccurrencesUtil.addUsagesInStringsAndComments(element,stringToSearch,result,factory);
    }
  }
  if (searchForTextOccurences && !(element instanceof PsiDirectory)) {
    String stringToSearch=ElementDescriptionUtil.getElementDescription(element,true ? NonCodeSearchDescriptionLocation.NON_JAVA : NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,true,processor);
      addTextOccurence(element,result,projectScope,stringToSearch,stringToReplace);
      if (processor != null) {
        Pair<String,String> additionalStringToSearch=processor.getTextOccurrenceSearchStrings(element,newName);
        if (additionalStringToSearch != null) {
          addTextOccurence(element,result,projectScope,additionalStringToSearch.first,additionalStringToSearch.second);
        }
      }
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
