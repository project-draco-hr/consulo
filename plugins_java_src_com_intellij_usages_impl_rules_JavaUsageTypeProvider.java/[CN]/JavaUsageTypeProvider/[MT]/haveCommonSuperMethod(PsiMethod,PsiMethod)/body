{
  final Queue<PsiMethod> supers1Q=new ArrayDeque<PsiMethod>();
  supers1Q.add(m1);
  final Queue<PsiMethod> supers2Q=new ArrayDeque<PsiMethod>();
  supers2Q.add(m2);
  Set<PsiMethod> supers1=new THashSet<PsiMethod>();
  Set<PsiMethod> supers2=new THashSet<PsiMethod>();
  while (true) {
    PsiMethod me1;
    if ((me1=supers1Q.poll()) != null) {
      if (supers2.contains(me1))       return true;
      supers1.add(me1);
      PsiSuperMethodImplUtil.processDirectSuperMethodsSmart(me1,new Processor<PsiMethod>(){
        @Override public boolean process(        PsiMethod psiMethod){
          supers1Q.add(psiMethod);
          return true;
        }
      }
);
    }
    PsiMethod me2;
    if ((me2=supers2Q.poll()) != null) {
      if (supers1.contains(me2))       return true;
      supers2.add(me2);
      PsiSuperMethodImplUtil.processDirectSuperMethodsSmart(me2,new Processor<PsiMethod>(){
        @Override public boolean process(        PsiMethod psiMethod){
          supers2Q.add(psiMethod);
          return true;
        }
      }
);
    }
    if (me1 == null && me2 == null)     break;
  }
  return false;
}
