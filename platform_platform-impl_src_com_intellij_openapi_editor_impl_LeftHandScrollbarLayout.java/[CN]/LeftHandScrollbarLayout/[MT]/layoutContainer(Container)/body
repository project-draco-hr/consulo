{
  JBScrollPane scrollPane=(JBScrollPane)parent;
  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();
  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();
  Rectangle availR=scrollPane.getBounds();
  availR.x=availR.y=0;
  Insets insets=parent.getInsets();
  availR.x=insets.left;
  availR.y=insets.top;
  availR.width-=insets.left + insets.right;
  availR.height-=insets.top + insets.bottom;
  boolean leftToRight=false;
  Rectangle colHeadR=new Rectangle(0,availR.y,0,0);
  if ((colHead != null) && (colHead.isVisible())) {
    int colHeadHeight=Math.min(availR.height,colHead.getPreferredSize().height);
    colHeadR.height=colHeadHeight;
    availR.y+=colHeadHeight;
    availR.height-=colHeadHeight;
  }
  Rectangle rowHeadR=new Rectangle(0,0,0,0);
  if ((rowHead != null) && (rowHead.isVisible())) {
    int rowHeadWidth=Math.min(availR.width,rowHead.getPreferredSize().width);
    rowHeadR.width=rowHeadWidth;
    availR.width-=rowHeadWidth;
    if (leftToRight) {
      rowHeadR.x=availR.x;
      availR.x+=rowHeadWidth;
    }
 else {
      rowHeadR.x=availR.x + availR.width;
    }
  }
  Border viewportBorder=scrollPane.getViewportBorder();
  Insets vpbInsets;
  if (viewportBorder != null) {
    vpbInsets=viewportBorder.getBorderInsets(parent);
    availR.x+=vpbInsets.left;
    availR.y+=vpbInsets.top;
    availR.width-=vpbInsets.left + vpbInsets.right;
    availR.height-=vpbInsets.top + vpbInsets.bottom;
  }
 else {
    vpbInsets=new Insets(0,0,0,0);
  }
  Component view=(viewport != null) ? viewport.getView() : null;
  Dimension viewPrefSize=(view != null) ? view.getPreferredSize() : new Dimension(0,0);
  Dimension extentSize=(viewport != null) ? viewport.toViewCoordinates(availR.getSize()) : new Dimension(0,0);
  boolean viewTracksViewportWidth=false;
  boolean viewTracksViewportHeight=false;
  boolean isEmpty=(availR.width < 0 || availR.height < 0);
  Scrollable sv;
  if (!isEmpty && view instanceof Scrollable) {
    sv=(Scrollable)view;
    viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();
    viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();
  }
 else {
    sv=null;
  }
  Rectangle vsbR=new Rectangle(0,availR.y - vpbInsets.top,0,0);
  boolean vsbNeeded;
  if (isEmpty) {
    vsbNeeded=false;
  }
 else   if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {
    vsbNeeded=true;
  }
 else   if (vsbPolicy == VERTICAL_SCROLLBAR_NEVER) {
    vsbNeeded=false;
  }
 else {
    vsbNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);
  }
  if ((vsb != null) && vsbNeeded) {
    adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);
    extentSize=viewport.toViewCoordinates(availR.getSize());
  }
  Rectangle hsbR=new Rectangle(availR.x - vpbInsets.left,0,0,0);
  boolean hsbNeeded;
  if (isEmpty) {
    hsbNeeded=false;
  }
 else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {
    hsbNeeded=true;
  }
 else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_NEVER) {
    hsbNeeded=false;
  }
 else {
    hsbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);
  }
  if ((hsb != null) && hsbNeeded) {
    adjustForHSB(true,availR,hsbR,vpbInsets);
    if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {
      extentSize=viewport.toViewCoordinates(availR.getSize());
      vsbNeeded=viewPrefSize.height > extentSize.height;
      if (vsbNeeded) {
        adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);
      }
    }
  }
  if (viewport != null) {
    viewport.setBounds(availR);
    if (sv != null) {
      extentSize=viewport.toViewCoordinates(availR.getSize());
      boolean oldHSBNeeded=hsbNeeded;
      boolean oldVSBNeeded=vsbNeeded;
      viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();
      viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();
      if (vsb != null && vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {
        boolean newVSBNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);
        if (newVSBNeeded != vsbNeeded) {
          vsbNeeded=newVSBNeeded;
          adjustForVSB(vsbNeeded,availR,vsbR,vpbInsets,leftToRight);
          extentSize=viewport.toViewCoordinates(availR.getSize());
        }
      }
      if (hsb != null && hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {
        boolean newHSBbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);
        if (newHSBbNeeded != hsbNeeded) {
          hsbNeeded=newHSBbNeeded;
          adjustForHSB(hsbNeeded,availR,hsbR,vpbInsets);
          if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {
            extentSize=viewport.toViewCoordinates(availR.getSize());
            vsbNeeded=viewPrefSize.height > extentSize.height;
            if (vsbNeeded) {
              adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);
            }
          }
        }
      }
      if (oldHSBNeeded != hsbNeeded || oldVSBNeeded != vsbNeeded) {
        viewport.setBounds(availR);
      }
    }
  }
  vsbR.height=availR.height + vpbInsets.top + vpbInsets.bottom;
  hsbR.width=availR.width + vpbInsets.left + vpbInsets.right;
  rowHeadR.height=availR.height + vpbInsets.top + vpbInsets.bottom;
  rowHeadR.y=availR.y - vpbInsets.top;
  colHeadR.width=availR.width + vpbInsets.left + vpbInsets.right;
  colHeadR.x=availR.x - vpbInsets.left;
  if (rowHead != null) {
    rowHead.setBounds(rowHeadR);
  }
  if (colHead != null) {
    colHead.setBounds(colHeadR);
  }
  if (vsb != null) {
    if (vsbNeeded) {
      vsb.setVisible(true);
      vsb.setBounds(vsbR);
    }
 else {
      vsb.setVisible(false);
    }
  }
  if (hsb != null) {
    if (hsbNeeded) {
      hsb.setVisible(true);
      hsb.setBounds(hsbR);
    }
 else {
      hsb.setVisible(false);
    }
  }
  if (lowerLeft != null) {
    lowerLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,hsbR.y,leftToRight ? rowHeadR.width : vsbR.width,hsbR.height);
  }
  if (lowerRight != null) {
    lowerRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,hsbR.y,leftToRight ? vsbR.width : rowHeadR.width,hsbR.height);
  }
  if (upperLeft != null) {
    upperLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,colHeadR.y,leftToRight ? rowHeadR.width : vsbR.width,colHeadR.height);
  }
  if (upperRight != null) {
    upperRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,colHeadR.y,leftToRight ? vsbR.width : rowHeadR.width,colHeadR.height);
  }
}
