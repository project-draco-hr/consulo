{
  final Map<ResourceType,Map<String,ResourceValue>> configedProjectRes=projectResources.getConfiguredResources(config);
  DumbService.getInstance(facet.getModule().getProject()).waitForSmartMode();
  final Collection<String> ids=ApplicationManager.getApplication().runReadAction(new Computable<Collection<String>>(){
    @Override public Collection<String> compute(){
      return facet.getLocalResourceManager().getIds();
    }
  }
);
  final Map<String,ResourceValue> map=configedProjectRes.get(ResourceType.ID);
  for (  String id : ids) {
    if (!map.containsKey(id)) {
      map.put(id,new ResourceValue(ResourceType.ID,id,false));
    }
  }
  final Map<ResourceType,Map<String,ResourceValue>> configedFrameworkRes=myResources.getConfiguredResources(config);
  final ResourceResolver resolver=ResourceResolver.create(configedProjectRes,configedFrameworkRes,themeName,isProjectTheme);
  return new ResourceResolverDecorator(resolver);
}
