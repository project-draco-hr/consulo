{
  int startLineNumber=myEditor.yToVisibleLine(clip.y);
  int endLineNumber=myEditor.yToVisibleLine(clip.y + clip.height) + 1;
  int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(),0)).line;
  endLineNumber=Math.min(endLineNumber,lastLine + 1);
  if (startLineNumber >= endLineNumber) {
    return;
  }
  Color color=myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);
  g.setColor(color != null ? color : JBColor.blue);
  Font font=getFontForLineNumbers();
  g.setFont(font);
  AffineTransform old=setMirrorTransformIfNeeded(g,getLineNumberAreaOffset(),getLineNumberAreaWidth());
  try {
    for (int i=startLineNumber; i < endLineNumber; i++) {
      LogicalPosition logicalPosition=myEditor.visualToLogicalPosition(new VisualPosition(i,0));
      if (EditorUtil.getSoftWrapCountAfterLineStart(myEditor,logicalPosition) > 0) {
        continue;
      }
      int logLine=convertor.execute(logicalPosition.line);
      if (logLine >= 0) {
        String s=String.valueOf(logLine + 1);
        int startY=myEditor.visibleLineToY(i);
        if (myEditor.isInDistractionFreeMode()) {
          Color fgColor=myTextFgColors.get(i);
          g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue);
        }
        int textOffset=isMirrored() ? offset - getLineNumberAreaWidth() - 1 : offset - g.getFontMetrics().stringWidth(s);
        g.drawString(s,textOffset,startY + myEditor.getAscent());
      }
    }
  }
  finally {
    if (old != null)     g.setTransform(old);
  }
}
