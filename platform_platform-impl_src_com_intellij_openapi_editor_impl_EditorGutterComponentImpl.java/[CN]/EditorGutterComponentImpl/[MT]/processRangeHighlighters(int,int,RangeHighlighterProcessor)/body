{
  Document document=myEditor.getDocument();
  MarkupIterator<RangeHighlighterEx> docHighlighters=myEditor.getFilteredDocumentMarkupModel().overlappingIterator(startOffset,endOffset);
  MarkupIterator<RangeHighlighterEx> editorHighlighters=myEditor.getMarkupModel().overlappingIterator(startOffset,endOffset);
  try {
    RangeHighlighterEx lastDocHighlighter=null;
    RangeHighlighterEx lastEditorHighlighter=null;
    while (true) {
      if (lastDocHighlighter == null && docHighlighters.hasNext()) {
        lastDocHighlighter=docHighlighters.next();
        if (!lastDocHighlighter.isValid() || lastDocHighlighter.getAffectedAreaStartOffset() > endOffset) {
          lastDocHighlighter=null;
          continue;
        }
        if (lastDocHighlighter.getAffectedAreaEndOffset() < startOffset) {
          lastDocHighlighter=null;
          continue;
        }
      }
      if (lastEditorHighlighter == null && editorHighlighters.hasNext()) {
        lastEditorHighlighter=editorHighlighters.next();
        if (!lastEditorHighlighter.isValid() || lastEditorHighlighter.getAffectedAreaStartOffset() > endOffset) {
          lastEditorHighlighter=null;
          continue;
        }
        if (lastEditorHighlighter.getAffectedAreaEndOffset() < startOffset) {
          lastEditorHighlighter=null;
          continue;
        }
      }
      if (lastDocHighlighter == null && lastEditorHighlighter == null)       return;
      final RangeHighlighterEx lowerHighlighter;
      if (less(lastDocHighlighter,lastEditorHighlighter)) {
        lowerHighlighter=lastDocHighlighter;
        lastDocHighlighter=null;
      }
 else {
        lowerHighlighter=lastEditorHighlighter;
        lastEditorHighlighter=null;
      }
      if (!lowerHighlighter.isValid())       continue;
      int startLineIndex=lowerHighlighter.getDocument().getLineNumber(startOffset);
      if (!isValidLine(document,startLineIndex))       continue;
      int endLineIndex=lowerHighlighter.getDocument().getLineNumber(endOffset);
      if (!isValidLine(document,endLineIndex))       continue;
      processor.process(lowerHighlighter);
    }
  }
  finally {
    docHighlighters.dispose();
    editorHighlighters.dispose();
  }
}
