{
  String toolTip=null;
  final GutterIconRenderer renderer=getGutterRenderer(e);
  TooltipController controller=TooltipController.getInstance();
  if (renderer != null) {
    toolTip=renderer.getTooltipText();
    if (renderer.isNavigateAction()) {
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
  }
 else {
    ActiveGutterRenderer lineRenderer=getActiveRendererByMouseEvent(e);
    if (lineRenderer != null) {
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
 else {
      TextAnnotationGutterProvider provider=getProviderAtPoint(e.getPoint());
      if (provider != null) {
        final int line=getLineNumAtPoint(e.getPoint());
        toolTip=provider.getToolTip(line,myEditor);
        if (!Comparing.equal(toolTip,myLastGutterToolTip)) {
          controller.cancelTooltip(GUTTER_TOOLTIP_GROUP,e,true);
          myLastGutterToolTip=toolTip;
        }
        if (myProviderToListener.containsKey(provider)) {
          final EditorGutterAction action=myProviderToListener.get(provider);
          if (action != null) {
            setCursor(action.getCursor(line));
          }
        }
      }
    }
  }
  if (toolTip != null && !toolTip.isEmpty()) {
    final Ref<Point> t=new Ref<Point>(e.getPoint());
    int line=myEditor.yPositionToLogicalLine(e.getY());
    ArrayList<GutterMark> row=myLineToGutterRenderers.get(line);
    Balloon.Position ballPosition=Balloon.Position.atRight;
    if (row != null) {
      final TreeMap<Integer,GutterMark> xPos=new TreeMap<Integer,GutterMark>();
      final int[] currentPos={0};
      processIconsRow(line,row,new LineGutterIconRendererProcessor(){
        @Override public void process(        int x,        int y,        GutterMark r){
          xPos.put(x,r);
          if (renderer == r && r != null) {
            currentPos[0]=x;
            Icon icon=r.getIcon();
            t.set(new Point(x + icon.getIconWidth() / 2,y + icon.getIconHeight() / 2));
          }
        }
      }
);
      List<Integer> xx=new ArrayList<Integer>(xPos.keySet());
      int posIndex=xx.indexOf(currentPos[0]);
      if (xPos.size() > 1 && posIndex == 0) {
        ballPosition=Balloon.Position.below;
      }
    }
    RelativePoint showPoint=new RelativePoint(this,t.get());
    controller.showTooltipByMouseMove(myEditor,showPoint,((EditorMarkupModel)myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip),false,GUTTER_TOOLTIP_GROUP,new HintHint(this,t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition));
  }
 else {
    controller.cancelTooltip(GUTTER_TOOLTIP_GROUP,e,false);
  }
}
