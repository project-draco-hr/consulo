{
  String toolTip=null;
  final GutterIconRenderer renderer=getGutterRenderer(e);
  TooltipController controller=TooltipController.getInstance();
  if (renderer != null) {
    toolTip=renderer.getTooltipText();
    if (renderer.isNavigateAction()) {
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
  }
 else {
    ActiveGutterRenderer lineRenderer=getActiveRendererByMouseEvent(e);
    if (lineRenderer != null) {
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
 else {
      TextAnnotationGutterProvider provider=getProviderAtPoint(e.getPoint());
      if (provider != null) {
        final int line=getLineNumAtPoint(e.getPoint());
        toolTip=provider.getToolTip(line,myEditor);
        if (!Comparing.equal(toolTip,myLastGutterToolTip)) {
          controller.cancelTooltip(GUTTER_TOOLTIP_GROUP);
          myLastGutterToolTip=toolTip;
        }
        if (myProviderToListener.containsKey(provider)) {
          final EditorGutterAction action=myProviderToListener.get(provider);
          if (action != null) {
            setCursor(action.getCursor(line));
          }
        }
      }
    }
  }
  if (toolTip != null && toolTip.length() != 0) {
    LogicalPosition pos=myEditor.xyToLogicalPosition(new Point(0,(int)e.getY()));
    int line=pos.line;
    ArrayList<GutterIconRenderer> lineRenderers=myLineToGutterRenderers.get(line);
    int row=lineRenderers.indexOf(renderer);
    Balloon.Position ballPosition=Balloon.Position.atRight;
    if (lineRenderers.size() > 1) {
      if (row == lineRenderers.size() - 1) {
        ballPosition=Balloon.Position.below;
      }
    }
    final Ref<Point> t=new Ref<Point>(e.getPoint());
    processIconsRow(pos.line,myLineToGutterRenderers.get(pos.line),new LineGutterIconRendererProcessor(){
      @Override public void process(      int x,      int y,      GutterIconRenderer r){
        if (renderer == r) {
          Icon icon=r.getIcon();
          t.set(new Point(x + icon.getIconWidth() / 2,y + icon.getIconHeight() / 2));
        }
      }
    }
);
    RelativePoint showPoint=new RelativePoint(this,t.get());
    controller.showTooltipByMouseMove(myEditor,showPoint,((EditorMarkupModel)myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip),false,GUTTER_TOOLTIP_GROUP,new HintHint(this,t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition));
  }
 else {
    controller.cancelTooltip(GUTTER_TOOLTIP_GROUP);
  }
}
