{
  if (findFoldingAnchorAt(e.getX(),e.getY()) != null) {
    return null;
  }
  if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset()) {
    return null;
  }
  final ActiveGutterRenderer[] gutterRenderer={null};
  final int[] layer={-1};
  Rectangle clip=myEditor.getScrollingModel().getVisibleArea();
  int firstVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y - myEditor.getLineHeight())));
  int lastVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y + clip.height + myEditor.getLineHeight())));
  processRangeHighlighters(firstVisibleOffset,lastVisibleOffset,new RangeHighlighterProcessor(){
    @Override public void process(    @NotNull RangeHighlighter highlighter){
      LineMarkerRenderer renderer=highlighter.getLineMarkerRenderer();
      if (renderer == null)       return;
      if (gutterRenderer[0] != null && layer[0] >= highlighter.getLayer())       return;
      Rectangle rectangle=getLineRendererRectangle(highlighter);
      if (rectangle == null)       return;
      int startY=rectangle.y;
      int endY=startY + rectangle.height;
      if (startY == endY) {
        endY+=myEditor.getLineHeight();
      }
      if (startY < e.getY() && e.getY() <= endY) {
        if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer)renderer).canDoAction(e)) {
          gutterRenderer[0]=(ActiveGutterRenderer)renderer;
          layer[0]=highlighter.getLayer();
        }
      }
    }
  }
);
  return gutterRenderer[0];
}
