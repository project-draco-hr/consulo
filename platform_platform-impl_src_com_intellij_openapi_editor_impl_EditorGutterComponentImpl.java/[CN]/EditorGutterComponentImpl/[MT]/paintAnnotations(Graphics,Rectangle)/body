{
  int x=getAnnotationsAreaOffset();
  int w=getAnnotationsAreaWidth();
  if (w == 0)   return;
  final Color background=isDistractionFreeMode() ? myEditor.getBackgroundColor() : getBackground();
  paintBackground(g,clip,getAnnotationsAreaOffset(),w,background);
  Color color=myEditor.getColorsScheme().getColor(EditorColors.ANNOTATIONS_COLOR);
  g.setColor(color != null ? color : JBColor.blue);
  g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));
  for (int i=0; i < myTextAnnotationGutters.size(); i++) {
    TextAnnotationGutterProvider gutterProvider=myTextAnnotationGutters.get(i);
    int lineHeight=myEditor.getLineHeight();
    int startLineNumber=clip.y / lineHeight;
    int endLineNumber=(clip.y + clip.height) / lineHeight + 1;
    int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(),0)).line;
    endLineNumber=Math.min(endLineNumber,lastLine + 1);
    if (startLineNumber >= endLineNumber) {
      break;
    }
    for (int j=startLineNumber; j < endLineNumber; j++) {
      int logLine=myEditor.visualToLogicalPosition(new VisualPosition(j,0)).line;
      String s=gutterProvider.getLineText(logLine,myEditor);
      final EditorFontType style=gutterProvider.getStyle(logLine,myEditor);
      final Color bg=gutterProvider.getBgColor(logLine,myEditor);
      if (bg != null) {
        g.setColor(bg);
        g.fillRect(x,j * lineHeight,w,lineHeight);
      }
      g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine,myEditor)));
      g.setFont(myEditor.getColorsScheme().getFont(style));
      if (s != null) {
        g.drawString(s,x,(j + 1) * lineHeight - myEditor.getDescent());
      }
    }
    x+=myTextAnnotationGutterSizes.get(i);
  }
  if (!isDistractionFreeMode()) {
    UIUtil.drawVDottedLine((Graphics2D)g,getAnnotationsAreaOffset() + w - 1,clip.y,clip.y + clip.height,null,getOutlineColor(false));
  }
}
