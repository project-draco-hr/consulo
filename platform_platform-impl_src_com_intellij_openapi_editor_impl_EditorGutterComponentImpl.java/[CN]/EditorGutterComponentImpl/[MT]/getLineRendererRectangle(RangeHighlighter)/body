{
  if (!isLineMarkerVisible(highlighter))   return null;
  int startOffset=highlighter.getStartOffset();
  int endOffset=highlighter.getEndOffset();
  int startY=myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(startOffset)).y;
  int endY=myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(endOffset)).y;
  DocumentEx document=myEditor.getDocument();
  if (document.getLineStartOffset(document.getLineNumber(endOffset)) != endOffset) {
    endY+=myEditor.getLineHeight();
  }
  LineMarkerRenderer renderer=ObjectUtils.assertNotNull(highlighter.getLineMarkerRenderer());
  LineMarkerRendererEx.Position position=getLineMarkerPosition(renderer);
  int w;
  int x;
switch (position) {
case LEFT:
    w=getLeftFreePaintersAreaWidth();
  x=getLeftFreePaintersAreaOffset();
break;
case RIGHT:
w=getRightFreePaintersAreaWidth();
x=getLineMarkerFreePaintersAreaOffset() - 1;
break;
case CUSTOM:
w=getWidth();
x=0;
break;
default :
throw new IllegalArgumentException(position.name());
}
int height=endY - startY;
return new Rectangle(x,startY,w,height);
}
