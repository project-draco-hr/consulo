{
  myLineToGutterRenderers=new TIntObjectHashMap<ArrayList<GutterIconRenderer>>();
  processRangeHighlighters(0,myEditor.getDocument().getTextLength(),new RangeHighlighterProcessor(){
    @Override public void process(    RangeHighlighter highlighter){
      GutterIconRenderer renderer=highlighter.getGutterIconRenderer();
      if (renderer == null)       return;
      int startOffset=highlighter.getStartOffset();
      int line=myEditor.getDocument().getLineNumber(startOffset);
      ArrayList<GutterIconRenderer> renderers=myLineToGutterRenderers.get(line);
      if (renderers == null) {
        renderers=new ArrayList<GutterIconRenderer>();
        myLineToGutterRenderers.put(line,renderers);
      }
      if (renderers.size() < 5) {
        renderers.add(renderer);
      }
    }
  }
);
  myIconsAreaWidth=START_ICON_AREA_WIDTH;
  myLineToGutterRenderers.forEachValue(new TObjectProcedure<ArrayList<GutterIconRenderer>>(){
    @Override public boolean execute(    ArrayList<GutterIconRenderer> renderers){
      int width=1;
      for (int i=0; i < renderers.size(); i++) {
        GutterIconRenderer renderer=renderers.get(i);
        width+=renderer.getIcon().getIconWidth();
        if (i > 0)         width+=GAP_BETWEEN_ICONS;
      }
      if (myIconsAreaWidth < width) {
        myIconsAreaWidth=width;
      }
      return true;
    }
  }
);
  myLineMarkerAreaWidth=myIconsAreaWidth + FREE_PAINTERS_AREA_WIDTH + (isFoldingOutlineShown() ? getFoldingAnchorWidth() / 2 : 0);
}
