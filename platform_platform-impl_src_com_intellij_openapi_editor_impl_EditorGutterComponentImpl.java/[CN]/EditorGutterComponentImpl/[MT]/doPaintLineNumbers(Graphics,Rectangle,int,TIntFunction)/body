{
  if (!isLineNumbersShown()) {
    return;
  }
  int lineHeight=myEditor.getLineHeight();
  int startLineNumber=clip.y / lineHeight;
  int endLineNumber=(clip.y + clip.height) / lineHeight + 1;
  int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(),0)).line;
  endLineNumber=Math.min(endLineNumber,lastLine + 1);
  if (startLineNumber >= endLineNumber) {
    return;
  }
  Color color=myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);
  g.setColor(color != null ? color : JBColor.blue);
  g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));
  Graphics2D g2=(Graphics2D)g;
  AffineTransform old=g2.getTransform();
  if (isMirrored()) {
    AffineTransform originalTransform=new AffineTransform(old);
    originalTransform.scale(-1,1);
    originalTransform.translate(-getLineNumberAreaWidth() - 1,0);
    g2.setTransform(originalTransform);
  }
  for (int i=startLineNumber; i < endLineNumber; i++) {
    LogicalPosition logicalPosition=myEditor.visualToLogicalPosition(new VisualPosition(i,0));
    if (EditorUtil.getSoftWrapCountAfterLineStart(myEditor,logicalPosition) > 0) {
      continue;
    }
    int logLine=convertor.execute(logicalPosition.line);
    if (logLine >= 0) {
      String s=String.valueOf(logLine + 1);
      int startY=(i + 1) * lineHeight;
      if (myEditor.isInDistractionFreeMode()) {
        Color fgColor=myTextFgColors.get(i);
        g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue);
      }
      int textOffset=isMirrored() ? offset - getLineNumberAreaWidth() + GAP_AFTER_LINE_NUMBERS : offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s) - GAP_AFTER_LINE_NUMBERS;
      g.drawString(s,textOffset,startY - myEditor.getDescent());
    }
  }
  g2.setTransform(old);
}
