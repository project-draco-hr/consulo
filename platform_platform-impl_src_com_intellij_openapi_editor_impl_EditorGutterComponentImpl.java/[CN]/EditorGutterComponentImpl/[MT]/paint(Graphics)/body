{
  if (UISettings.getInstance().PRESENTATION_MODE) {
    g.setColor(myEditor.getColorsScheme().getDefaultBackground());
    final Rectangle clip=g.getClipBounds();
    if (clip.height >= 0) {
      g.fillRect(clip.x,clip.y,clip.width,clip.height);
    }
    paintCaretRowBackground(g,clip.x,clip.width);
    if (isLineNumbersShown()) {
      UISettings.setupAntialiasing(g);
      paintLineNumbers(g,clip);
    }
    return;
  }
  ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();
  try {
    Rectangle clip=g.getClipBounds();
    if (clip.height < 0)     return;
    final Graphics2D g2=(Graphics2D)g;
    final AffineTransform old=g2.getTransform();
    if (isMirrored()) {
      final AffineTransform transform=new AffineTransform(old);
      transform.scale(-1,1);
      transform.translate(-getWidth(),0);
      g2.setTransform(transform);
    }
    UISettings.setupAntialiasing(g);
    paintLineNumbersBackground(g,clip);
    paintAnnotations(g,clip);
    Object hint=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
    if (!UIUtil.isRetina())     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    try {
      int firstVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y - myEditor.getLineHeight())));
      int lastVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y + clip.height + myEditor.getLineHeight())));
      paintFoldingBackground(g,clip,firstVisibleOffset,lastVisibleOffset);
      paintLineMarkers(g,clip,firstVisibleOffset,lastVisibleOffset);
      paintFoldingTree(g,clip,firstVisibleOffset,lastVisibleOffset);
      paintLineNumbers(g,clip);
    }
  finally {
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,hint);
    }
    g2.setTransform(old);
  }
  finally {
    ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();
  }
}
