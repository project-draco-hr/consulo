{
  ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();
  try {
    Rectangle clip=g_.getClipBounds();
    if (clip.height < 0)     return;
    Graphics2D g=(Graphics2D)getComponentGraphics(g_);
    AffineTransform old=setMirrorTransformIfNeeded(g,0,getWidth());
    EditorUIUtil.setupAntialiasing(g);
    Color backgroundColor=getBackground();
    if (myEditor.isDisposed()) {
      g.setColor(myEditor.getDisposedBackground());
      g.fillRect(clip.x,clip.y,clip.width,clip.height);
      return;
    }
    int gutterSeparatorX=getWhitespaceSeparatorOffset();
    paintBackground(g,clip,0,gutterSeparatorX,backgroundColor);
    paintBackground(g,clip,gutterSeparatorX,getFoldingAreaWidth(),myEditor.getBackgroundColor());
    int firstVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y - myEditor.getLineHeight())));
    int lastVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y + clip.height + myEditor.getLineHeight())));
    paintEditorBackgrounds(g,firstVisibleOffset,lastVisibleOffset);
    Object hint=g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
    if (!UIUtil.isRetina())     g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    try {
      paintAnnotations(g,clip);
      paintLineMarkers(g,firstVisibleOffset,lastVisibleOffset);
      paintFoldingLines(g,clip);
      paintFoldingTree(g,clip,firstVisibleOffset,lastVisibleOffset);
      paintLineNumbers(g,clip);
    }
  finally {
      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,hint);
    }
    if (old != null)     g.setTransform(old);
  }
  finally {
    ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();
  }
}
