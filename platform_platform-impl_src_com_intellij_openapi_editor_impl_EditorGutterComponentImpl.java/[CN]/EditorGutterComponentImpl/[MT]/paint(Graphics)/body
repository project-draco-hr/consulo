{
  ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();
  try {
    Rectangle clip=g_.getClipBounds();
    if (clip.height < 0)     return;
    Graphics2D g=IdeBackgroundUtil.withEditorBackground(g_,this);
    AffineTransform old=g.getTransform();
    if (isMirrored()) {
      final AffineTransform transform=new AffineTransform(old);
      transform.scale(-1,1);
      transform.translate(-getWidth(),0);
      g.setTransform(transform);
    }
    EditorUIUtil.setupAntialiasing(g);
    Color backgroundColor=getBackground();
    paintLineNumbersBackground(g,clip,backgroundColor);
    paintAnnotationsBackground(g,clip,backgroundColor);
    Object hint=g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
    if (!UIUtil.isRetina())     g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    try {
      int firstVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y - myEditor.getLineHeight())));
      int lastVisibleOffset=myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0,clip.y + clip.height + myEditor.getLineHeight())));
      paintFoldingBackground(g,clip,backgroundColor);
      paintLineMarkersBackground(g,clip,backgroundColor);
      paintEditorBackgrounds(g,firstVisibleOffset,lastVisibleOffset);
      paintAnnotations(g,clip);
      paintLineMarkers(g,firstVisibleOffset,lastVisibleOffset);
      paintFoldingLines(g,clip);
      paintFoldingTree(g,clip,firstVisibleOffset,lastVisibleOffset);
      paintLineNumbers(g,clip);
    }
  finally {
      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,hint);
    }
    g.setTransform(old);
  }
  finally {
    ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();
  }
}
