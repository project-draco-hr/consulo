{
  myLineToGutterRenderers=new TIntObjectHashMap<List<GutterMark>>();
  myLeftFreePaintersAreaShown=false;
  processRangeHighlighters(0,myEditor.getDocument().getTextLength(),new RangeHighlighterProcessor(){
    @Override public void process(    @NotNull RangeHighlighter highlighter){
      LineMarkerRenderer lineMarkerRenderer=highlighter.getLineMarkerRenderer();
      if (lineMarkerRenderer instanceof LineMarkerRendererEx && ((LineMarkerRendererEx)lineMarkerRenderer).getPosition() == LineMarkerRendererEx.Position.LEFT && isLineMarkerVisible(highlighter)) {
        myLeftFreePaintersAreaShown=true;
      }
      GutterMark renderer=highlighter.getGutterIconRenderer();
      if (renderer == null) {
        return;
      }
      if (!isHighlighterVisible(highlighter)) {
        return;
      }
      int lineStartOffset=EditorUtil.getNotFoldedLineStartOffset(myEditor,highlighter.getStartOffset());
      int line=myEditor.getDocument().getLineNumber(lineStartOffset);
      List<GutterMark> renderers=myLineToGutterRenderers.get(line);
      if (renderers == null) {
        renderers=new SmartList<GutterMark>();
        myLineToGutterRenderers.put(line,renderers);
      }
      if (renderers.size() < 5) {
        renderers.add(renderer);
      }
    }
  }
);
  myIconsAreaWidth=START_ICON_AREA_WIDTH;
  myLineToGutterRenderers.forEachValue(new TObjectProcedure<List<GutterMark>>(){
    @Override public boolean execute(    List<GutterMark> renderers){
      int width=1;
      for (int i=0; i < renderers.size(); i++) {
        GutterMark renderer=renderers.get(i);
        if (!checkDumbAware(renderer,myEditor.getProject()))         continue;
        width+=scaleIcon(renderer.getIcon()).getIconWidth();
        if (i > 0)         width+=GAP_BETWEEN_ICONS;
      }
      if (myIconsAreaWidth < width) {
        myIconsAreaWidth=width + 1;
      }
      return true;
    }
  }
);
}
