{
  super.visitReferenceExpression(expression);
  if (expression.isQualified()) {
    return;
  }
  PsiClass containingClass=ClassUtils.getContainingClass(expression);
  if (containingClass == null) {
    return;
  }
  final PsiElement target=expression.resolve();
  if (target == null) {
    return;
  }
  if (!(target instanceof PsiField)) {
    return;
  }
  final PsiField field=(PsiField)target;
  final PsiClass fieldClass=field.getContainingClass();
  if (fieldClass == null || !containingClass.isInheritor(fieldClass,true)) {
    return;
  }
  final PsiElement parent=containingClass.getParent();
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper();
  final String referenceText=expression.getText();
  final PsiVariable variable=resolveHelper.resolveAccessibleReferencedVariable(referenceText,parent);
  if (variable == null || field == variable) {
    return;
  }
  final PsiElement commonParent=PsiTreeUtil.findCommonParent(variable,containingClass);
  if (commonParent == null) {
    return;
  }
  registerError(expression,fieldClass,variable);
}
