{
  Entry rootCopy=r.copy();
  Entry e=rootCopy.getEntry(path);
  List<Change> result=new ArrayList<Change>();
  IdPath idPath=e.getIdPath();
  boolean exists=true;
  for (  Change c : Reversed.list(myChanges)) {
    for (    Change cc : Reversed.list(c.getChanges())) {
      if (!exists) {
        if (cc instanceof DeleteChange) {
          DeleteChange ccc=(DeleteChange)cc;
          if (idPath.startsWith(ccc.getAffectedIdPaths()[0])) {
            result.remove(result.size() - 1);
            exists=true;
          }
        }
        cc.revertOn(rootCopy);
        if (exists)         e=rootCopy.getEntry(idPath);
      }
 else {
        if (cc.affects(idPath))         result.add(c);
        if (cc instanceof CreateEntryChange) {
          CreateEntryChange ccc=(CreateEntryChange)cc;
          if (ccc.getAffectedIdPaths()[0].equals(idPath)) {
            exists=false;
          }
          cc.revertOn(rootCopy);
        }
 else {
          cc.revertOn(rootCopy);
          idPath=e.getIdPath();
        }
      }
    }
  }
  return new ArrayList<Change>(new LinkedHashSet<Change>(result));
}
