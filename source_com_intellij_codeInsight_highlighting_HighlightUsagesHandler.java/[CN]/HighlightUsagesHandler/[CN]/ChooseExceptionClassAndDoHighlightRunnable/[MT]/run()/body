{
  final PsiElementFactory factory=PsiManager.getInstance(myProject).getElementFactory();
  if (myExceptionClasses.length == 1) {
    ArrayList<PsiReference> refs=new ArrayList<PsiReference>();
    findExceptionThrownPlaces(refs,factory.createType(myExceptionClasses[0]),myHighlightInPlace,myTypeFilter);
    new DoHighlightRunnable(refs.toArray(new PsiReference[refs.size()]),myProject,myTarget,myEditor,myFile).run();
  }
 else   if (myExceptionClasses.length > 0) {
    PsiElementListCellRenderer renderer=new PsiClassListCellRenderer();
    Arrays.sort(myExceptionClasses,renderer.getComparator());
    Vector<Object> model=new Vector<Object>(Arrays.asList(myExceptionClasses));
    model.insertElementAt("All listed",0);
    myList=new JList(model);
    myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    myList.setCellRenderer(renderer);
    renderer.installSpeedSearch(myList);
    final Runnable callback=new Runnable(){
      public void run(){
        int idx=myList.getSelectedIndex();
        if (idx < 0)         return;
        ArrayList<PsiReference> refs=new ArrayList<PsiReference>();
        if (idx > 0) {
          findExceptionThrownPlaces(refs,factory.createType(myExceptionClasses[idx - 1]),myHighlightInPlace,myTypeFilter);
        }
 else {
          for (int i=0; i < myExceptionClasses.length; i++) {
            findExceptionThrownPlaces(refs,factory.createType(myExceptionClasses[i]),myHighlightInPlace,myTypeFilter);
          }
        }
        new DoHighlightRunnable(refs.toArray(new PsiReference[refs.size()]),myProject,myTarget,myEditor,myFile).run();
      }
    }
;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        String title=" Choose Exception Classes to Highlight";
        ListPopup listPopup=new ListPopup(title,myList,callback,myProject);
        LogicalPosition caretPosition=myEditor.getCaretModel().getLogicalPosition();
        Point caretLocation=myEditor.logicalPositionToXY(caretPosition);
        int x=caretLocation.x;
        int y=caretLocation.y;
        Point location=myEditor.getContentComponent().getLocationOnScreen();
        x+=location.x;
        y+=location.y;
        listPopup.show(x,y);
      }
    }
);
  }
}
