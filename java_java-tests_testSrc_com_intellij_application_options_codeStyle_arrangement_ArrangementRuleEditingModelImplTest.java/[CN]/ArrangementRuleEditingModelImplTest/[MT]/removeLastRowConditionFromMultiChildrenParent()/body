{
  configure(and(atom(FIELD),atom(PUBLIC)));
  configure(and(atom(FIELD),atom(STATIC)));
  ArrangementRuleEditingModel siblingModel=myRowMappings.get(2);
  assertNotNull(siblingModel);
  ArrangementRuleEditingModel modelToChange=myRowMappings.get(3);
  assertNotNull(modelToChange);
  assertEquals(2,myRowMappings.size());
  modelToChange.removeAndCondition(atom(STATIC));
  assertEquals(2,myRowMappings.size());
  assertSame(siblingModel,myRowMappings.get(2));
  assertEquals(and(atom(FIELD),atom(PUBLIC)),siblingModel.getSettingsNode());
  assertSame(modelToChange,myRowMappings.get(3));
  assertEquals(atom(FIELD),modelToChange.getSettingsNode());
  DefaultMutableTreeNode compositeFieldNode=(DefaultMutableTreeNode)myRoot.getFirstChild();
  assertNotNull(compositeFieldNode);
  assertEquals(atom(FIELD),compositeFieldNode.getUserObject());
  DefaultMutableTreeNode publicNode=(DefaultMutableTreeNode)compositeFieldNode.getFirstChild();
  assertNotNull(publicNode);
  assertEquals(atom(PUBLIC),publicNode.getUserObject());
  DefaultMutableTreeNode atomFieldNode=compositeFieldNode.getNextSibling();
  assertNotNull(atomFieldNode);
  assertEquals(atom(FIELD),atomFieldNode.getUserObject());
  checkTreeNodesConsistency();
}
