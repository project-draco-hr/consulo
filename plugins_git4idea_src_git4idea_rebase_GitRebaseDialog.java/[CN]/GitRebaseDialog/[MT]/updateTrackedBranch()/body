{
  try {
    final VirtualFile root=gitRoot();
    String currentBranch=(String)myBranchComboBox.getSelectedItem();
    GitBranch trackedBranch=null;
    if (currentBranch != null) {
      String remote=GitConfigUtil.getValue(myProject,root,"branch." + currentBranch + ".remote");
      String mergeBranch=GitConfigUtil.getValue(myProject,root,"branch." + currentBranch + ".merge");
      if (remote == null || mergeBranch == null) {
        trackedBranch=null;
      }
 else {
        mergeBranch=GitBranchUtil.stripRefsPrefix(mergeBranch);
        if (remote.equals(".")) {
          trackedBranch=new GitSvnRemoteBranch(mergeBranch,GitBranch.DUMMY_HASH);
        }
 else {
          GitRemote r=GitBranchUtil.findRemoteByNameOrLogError(myProject,root,remote);
          if (r != null) {
            trackedBranch=new GitStandardRemoteBranch(r,mergeBranch,GitBranch.DUMMY_HASH);
          }
        }
      }
    }
    if (trackedBranch != null) {
      myOntoComboBox.setSelectedItem(trackedBranch);
    }
 else {
      GitUIUtil.getTextField(myOntoComboBox).setText("");
    }
    GitUIUtil.getTextField(myFromComboBox).setText("");
  }
 catch (  VcsException e) {
    GitUIUtil.showOperationError(myProject,e,"git config");
  }
}
