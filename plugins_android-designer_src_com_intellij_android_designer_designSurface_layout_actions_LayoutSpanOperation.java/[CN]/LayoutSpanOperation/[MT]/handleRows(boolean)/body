{
  calculateRows(bottom);
  Rectangle bounds=myContext.getTransformedRectangle(myBounds);
  int location=bottom ? bounds.y + bounds.height : bounds.y;
  if (location < myOffsets[0]) {
    myIndex=0;
  }
 else {
    myIndex=-1;
    for (int i=0; i < myOffsets.length - 1; i++) {
      if (myOffsets[i] <= location && location <= myOffsets[i + 1]) {
        int delta1=location - myOffsets[i];
        int delta2=myOffsets[i + 1] - location;
        myIndex=delta2 >= delta1 ? i : i + 1;
        break;
      }
    }
    if (myIndex == -1) {
      myIndex=myOffsets.length - 1;
    }
  }
  if (bottom) {
    myFeedback.setBounds(myBounds.x,myBounds.y,myBounds.width,myOffsets[myIndex] - myBounds.y);
  }
 else {
    myFeedback.setBounds(myBounds.x,myOffsets[myIndex],myBounds.width,myBounds.y + myBounds.height - myOffsets[myIndex]);
  }
  myTextFeedback.clear();
  if (!bottom) {
    myTextFeedback.append(getRowAttribute(true));
    myTextFeedback.append(" ");
    myTextFeedback.append(Integer.toString(myCells[myIndex]));
    myTextFeedback.append(", ");
  }
  myTextFeedback.append(getRowSpanAttribute(true));
  myTextFeedback.append(" ");
  myTextFeedback.append(Integer.toString(mySpans[myIndex]));
  myTextFeedback.centerTop(myContainerBounds);
}
