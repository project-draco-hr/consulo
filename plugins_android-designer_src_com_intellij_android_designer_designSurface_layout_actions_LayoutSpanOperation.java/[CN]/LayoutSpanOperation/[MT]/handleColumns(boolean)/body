{
  calculateColumns(right);
  Rectangle bounds=myContext.getTransformedRectangle(myBounds);
  int location=right ? bounds.x + bounds.width : bounds.x;
  if (location < myOffsets[0]) {
    myIndex=0;
    myErrorFeedback.setVisible(!right && myShowErrorFeedback);
  }
 else {
    myIndex=-1;
    for (int i=0; i < myOffsets.length - 1; i++) {
      if (myOffsets[i] <= location && location <= myOffsets[i + 1]) {
        int delta1=location - myOffsets[i];
        int delta2=myOffsets[i + 1] - location;
        myIndex=delta2 >= delta1 ? i : i + 1;
        break;
      }
    }
    if (myIndex == -1) {
      myIndex=myOffsets.length - 1;
      myErrorFeedback.setVisible(right && myShowErrorFeedback);
    }
 else {
      myErrorFeedback.setVisible(false);
    }
  }
  if (right) {
    myFeedback.setBounds(myBounds.x,myBounds.y,myOffsets[myIndex] - myBounds.x,myBounds.height);
  }
 else {
    myFeedback.setBounds(myOffsets[myIndex],myBounds.y,myBounds.x + myBounds.width - myOffsets[myIndex],myBounds.height);
  }
  myTextFeedback.clear();
  if (!right) {
    myTextFeedback.append(getColumnAttribute(true));
    myTextFeedback.append(" ");
    myTextFeedback.append(Integer.toString(myCells[myIndex]));
    myTextFeedback.append(", ");
  }
  myTextFeedback.append(getColumnSpanAttribute(true));
  myTextFeedback.append(" ");
  myTextFeedback.append(Integer.toString(mySpans[myIndex]));
  myTextFeedback.centerTop(myContainerBounds);
}
