{
  IFileSystem localFileSystem=myClientEnvironment.getCvsFileSystem().getLocalFileSystem();
  File file=localFileSystem.getFile(fileObject);
  if (myUpdatedFilesManager.fileIsNotUpdated(file)) {
    return;
  }
  File parent=file.getParentFile();
  VirtualFile virtualParent=CvsVfsUtil.findFileByIoFile(parent);
  if (entry != null) {
    Entry previousEntry=myFileToPreviousEntryMap.containsKey(file) ? myFileToPreviousEntryMap.get(file) : CvsEntriesManager.getInstance().getCashedEntry(virtualParent,entry.getFileName());
    if (previousEntry != null) {
      myFileToPreviousEntryMap.put(file,previousEntry);
      if (entry.isResultOfMerge()) {
        Collection<String> revisionsForFile=new ArrayList<String>(myUpdatedFilesManager.getRevisionsForFile(file));
        String newRevision=entry.getRevision();
        if (!revisionsForFile.contains(newRevision)) {
          revisionsForFile.add(newRevision);
        }
        CvsUtil.saveRevisionForMergedFile(virtualParent,previousEntry,revisionsForFile);
      }
    }
  }
 else {
    myCvsEntriesManager.removeEntryForFile(parent,fileObject.getName());
  }
  if (entry != null) {
    myCvsEntriesManager.setEntryForFile(virtualParent,entry);
  }
  if (entry == null || !entry.isResultOfMerge()) {
    CvsUtil.removeConflict(file);
  }
}
