{
  final StringBuilder buf=new StringBuilder();
  final HashSet<ParameterInfoImpl> newParams=new HashSet<ParameterInfoImpl>();
  final HashSet<ParameterInfoImpl> removedParams=new HashSet<ParameterInfoImpl>();
  final HashSet<ParameterInfoImpl> changedParams=new HashSet<ParameterInfoImpl>();
  getNewParametersInfo(myExpressions,myTargetMethod,mySubstitutor,buf,newParams,removedParams,changedParams);
  final String targetMethodName=myTargetMethod.getName();
  if (myTargetMethod.getContainingClass().findMethodsByName(targetMethodName,true).length == 1) {
    if (newParams.size() == 1) {
      final ParameterInfoImpl p=newParams.iterator().next();
      return QuickFixBundle.message("add.parameter.from.usage.text",p.getTypeText(),(ArrayUtil.find(myNewParametersInfo,p) + 1),targetMethodName);
    }
    if (removedParams.size() == 1) {
      final ParameterInfoImpl p=removedParams.iterator().next();
      return QuickFixBundle.message("remove.parameter.from.usage.text",(p.getOldIndex() + 1),targetMethodName);
    }
    if (changedParams.size() == 1) {
      final ParameterInfoImpl p=changedParams.iterator().next();
      return QuickFixBundle.message("change.parameter.from.usage.text",(p.getOldIndex() + 1),targetMethodName,myTargetMethod.getParameterList().getParameters()[p.getOldIndex()].getType().getPresentableText(),p.getTypeText());
    }
  }
  return "<html> Change signature of " + targetMethodName + "("+ buf.toString()+ ")</html>";
}
