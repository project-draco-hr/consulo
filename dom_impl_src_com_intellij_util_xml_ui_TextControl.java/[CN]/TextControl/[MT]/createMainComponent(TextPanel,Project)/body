{
  if (boundedComponent == null) {
    boundedComponent=new TextPanel();
  }
  boundedComponent.removeAll();
  final Function<String,Document> factory=new Function<String,Document>(){
    public Document fun(    final String s){
      return PsiDocumentManager.getInstance(project).getDocument(new PsiCodeFragmentImpl(project,ElementType.PLAIN_TEXT,true,"a.txt",s));
    }
  }
;
  final TextPanel boundedComponent1=boundedComponent;
  final EditorTextField editorTextField=new EditorTextField(factory.fun(""),project,StdFileTypes.PLAIN_TEXT){
    protected EditorEx createEditor(){
      final EditorEx editor=super.createEditor();
      return boundedComponent1 instanceof MultiLineTextPanel ? makeBigEditor(editor) : editor;
    }
  }
;
  if (boundedComponent instanceof BigTextPanel) {
    final ReferenceEditorWithBrowseButton editor=new ReferenceEditorWithBrowseButton(null,editorTextField,factory);
    boundedComponent.add(editor);
    editor.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        EditorTextField textArea=new EditorTextField(editorTextField.getDocument(),project,StdFileTypes.PLAIN_TEXT){
          protected EditorEx createEditor(){
            final EditorEx editor=super.createEditor();
            editor.setEmbeddedIntoDialogWrapper(true);
            return makeBigEditor(editor);
          }
        }
;
        DialogBuilder builder=new DialogBuilder(project);
        builder.setDimensionServiceKey("TextControl");
        builder.setCenterPanel(textArea);
        builder.setPreferedFocusComponent(textArea);
        builder.setTitle(UIBundle.message("big.text.control.window.title"));
        builder.addCloseButton();
        builder.show();
      }
    }
);
    return boundedComponent;
  }
  boundedComponent.add(editorTextField);
  return boundedComponent;
}
