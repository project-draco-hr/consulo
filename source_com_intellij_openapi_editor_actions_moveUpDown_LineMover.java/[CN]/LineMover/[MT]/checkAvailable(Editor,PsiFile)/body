{
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int startLine;
  final int endLine;
  LineRange range;
  if (selectionModel.hasSelection()) {
    startLine=editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).line;
    final LogicalPosition endPos=editor.offsetToLogicalPosition(selectionModel.getSelectionEnd());
    endLine=endPos.column == 0 ? endPos.line : endPos.line + 1;
    range=new LineRange(startLine,endLine);
  }
 else {
    startLine=editor.getCaretModel().getLogicalPosition().line;
    endLine=startLine + 1;
    range=new LineRange(startLine,endLine);
  }
  final int maxLine=editor.offsetToLogicalPosition(editor.getDocument().getTextLength()).line;
  if (range.startLine <= 1 && !isDown)   return false;
  if (range.endLine >= maxLine && isDown)   return false;
  toMove=range;
  int nearLine=isDown ? range.endLine : range.startLine - 1;
  toMove2=new LineRange(nearLine,nearLine + 1);
  return true;
}
