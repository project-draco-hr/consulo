{
  final PsiType type=expression.getType();
  if (type == null || !PsiUtilEx.isStringOrStringArray(type)) {
    return;
  }
  final PsiModifierListOwner contextOwner=AnnotationUtilEx.getAnnotatedElementFor(expression,AnnotationUtilEx.LookupType.CONTEXT_ONLY);
  if (contextOwner != null && PsiUtilEx.isLanguageAnnotationTarget(contextOwner)) {
    final PsiAnnotation[] annotations=AnnotationUtilEx.getAnnotationFrom(contextOwner,annotationName,true);
    if (annotations.length > 0) {
      final String expected=AnnotationUtilEx.calcAnnotationValue(annotations,"value");
      if (expected != null) {
        final PsiModifierListOwner declOwner=AnnotationUtilEx.getAnnotatedElementFor(expression,AnnotationUtilEx.LookupType.PREFER_DECLARATION);
        if (declOwner != null && PsiUtilEx.isLanguageAnnotationTarget(declOwner)) {
          final PsiAnnotation[] as=AnnotationUtilEx.getAnnotationFrom(declOwner,annotationName,true);
          if (as.length > 0) {
            final String actual=AnnotationUtilEx.calcAnnotationValue(as,"value");
            if (!expected.equals(actual)) {
              holder.registerProblem(expression,"Language mismatch: Expected '" + expected + "', got '"+ actual+ "'");
            }
          }
 else           if (CHECK_NON_ANNOTATED_REFERENCES) {
            final PsiElement var=PsiTreeUtil.getParentOfType(expression,PsiVariable.class,PsiExpressionList.class,PsiAssignmentExpression.class);
            if (var instanceof PsiVariable) {
              if (((PsiVariable)var).getInitializer() != expression) {
                return;
              }
            }
 else             if (var instanceof PsiExpressionList) {
              final PsiExpressionList list=(PsiExpressionList)var;
              if (Arrays.asList(list.getExpressions()).indexOf(expression) == -1) {
                return;
              }
            }
 else             if (var instanceof PsiAssignmentExpression) {
              final PsiAssignmentExpression a=(PsiAssignmentExpression)var;
              if (a.getRExpression() != expression) {
                return;
              }
            }
            final PsiAnnotation annotation=annotations[annotations.length - 1];
            final String initializer=annotation.getParameterList().getText();
            final AnnotateFix fix=new AnnotateFix(declOwner,annotation.getQualifiedName(),initializer){
              @NotNull public String getName(){
                return initializer == null ? super.getName() : super.getName() + initializer;
              }
            }
;
            if (fix.canApply()) {
              holder.registerProblem(expression,"Language problem: Found non-annotated reference where '" + expected + "' is expected",fix);
            }
 else {
              holder.registerProblem(expression,"Language problem: Found non-annotated reference where '" + expected + "' is expected");
            }
          }
        }
      }
    }
  }
}
