{
  myProject=project;
  myTemporaryEntryPoints=new HashSet<RefElement>();
  myPersistentEntryPoints=new LinkedHashMap<String,SmartRefElementPointer>();
  final ExtensionPoint<EntryPoint> point=Extensions.getRootArea().getExtensionPoint(ExtensionPoints.DEAD_CODE_TOOL);
  point.addExtensionPointListener(new ExtensionPointListener<EntryPoint>(){
    @Override public void extensionAdded(    @NotNull EntryPoint extension,    @Nullable PluginDescriptor pluginDescriptor){
      extensionRemoved(extension,pluginDescriptor);
    }
    @Override public void extensionRemoved(    @NotNull EntryPoint extension,    @Nullable PluginDescriptor pluginDescriptor){
      if (ADDITIONAL_ANNOS != null) {
        ADDITIONAL_ANNOS=null;
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          @Override public void run(){
            if (ApplicationManager.getApplication().isDisposed())             return;
            InspectionProfileManager.getInstance().fireProfileChanged(null);
          }
        }
);
      }
    }
  }
,project);
}
