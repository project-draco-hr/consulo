{
  final boolean[] flag=new boolean[]{false};
  MetaRegistry.addMetadataBinding(new ElementFilter(){
    @Override public boolean isAcceptable(    Object element,    PsiElement context){
      return flag[0];
    }
    @Override public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
,MyTrueMetaData.class,myTestRootDisposable);
  MetaRegistry.addMetadataBinding(new ElementFilter(){
    @Override public boolean isAcceptable(    Object element,    PsiElement context){
      return !flag[0];
    }
    @Override public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
,MyFalseMetaData.class,myTestRootDisposable);
  final XmlTag tag=((XmlFile)LightPlatformTestCase.createFile("a.xml","<a/>")).getDocument().getRootTag();
  UsefulTestCase.assertInstanceOf(tag.getMetaData(),MyFalseMetaData.class);
  flag[0]=true;
  new WriteCommandAction(LightPlatformTestCase.getProject()){
    @Override protected void run(    Result result) throws Throwable {
      tag.setName("b");
    }
  }
.execute();
  UsefulTestCase.assertInstanceOf(tag.getMetaData(),MyTrueMetaData.class);
}
