{
  if (!classObjectAccessExpression) {
    final MemberSignature syntheticMethod=MemberSignature.getClassAccessMethodMemberSignature();
    nonPrivateMethods.add(syntheticMethod);
  }
  PsiType unwrappedType=type;
  @NonNls final StringBuffer fieldNameBuffer;
  if (type instanceof PsiArrayType) {
    fieldNameBuffer=new StringBuffer();
    fieldNameBuffer.append("array");
    while (unwrappedType instanceof PsiArrayType) {
      final PsiArrayType arrayType=(PsiArrayType)unwrappedType;
      unwrappedType=arrayType.getComponentType();
      fieldNameBuffer.append("$");
    }
  }
 else {
    fieldNameBuffer=new StringBuffer(CLASS_ACCESS_METHOD_PREFIX);
  }
  if (unwrappedType instanceof PsiPrimitiveType) {
    final PsiPrimitiveType primitiveType=(PsiPrimitiveType)unwrappedType;
    fieldNameBuffer.append(MemberSignature.createPrimitiveType(primitiveType));
  }
 else {
    final String text=unwrappedType.getCanonicalText().replace('.','$');
    fieldNameBuffer.append(text);
  }
  final String fieldName=fieldNameBuffer.toString();
  final MemberSignature memberSignature=new MemberSignature(fieldName,Modifier.STATIC,"Ljava/lang/Class;");
  if (!nonPrivateFields.contains(memberSignature)) {
    nonPrivateFields.add(memberSignature);
  }
  classObjectAccessExpression=true;
}
