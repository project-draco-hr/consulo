{
  super();
  this.clazz=clazz;
  nonPrivateMethods=new HashSet();
  final PsiMethod[] methods=clazz.getMethods();
  for (int i=0; i < methods.length; i++) {
    final PsiMethod method=methods[i];
    if (!method.isConstructor() && !method.hasModifierProperty(PsiModifier.PRIVATE)) {
      final MemberSignature methodSignature=new MemberSignature(method);
      nonPrivateMethods.add(methodSignature);
    }
  }
  nonPrivateFields=new HashSet();
  final PsiField[] fields=clazz.getFields();
  for (int i=0; i < fields.length; i++) {
    final PsiField field=fields[i];
    if (!field.hasModifierProperty(PsiModifier.PRIVATE) || !(field.hasModifierProperty(PsiModifier.STATIC) | field.hasModifierProperty(PsiModifier.TRANSIENT))) {
      final MemberSignature fieldSignature=new MemberSignature(field);
      nonPrivateFields.add(fieldSignature);
    }
  }
  staticInitializers=new ArrayList();
  final PsiClassInitializer[] initializers=clazz.getInitializers();
  if (initializers.length > 0) {
    for (int i=0; i < initializers.length; i++) {
      final PsiClassInitializer initializer=initializers[i];
      final PsiModifierList modifierList=initializer.getModifierList();
      if (modifierList.hasModifierProperty(PsiModifier.STATIC)) {
        final MemberSignature initializerSignature=MemberSignature.getStaticInitializerMemberSignature();
        staticInitializers.add(initializerSignature);
        break;
      }
    }
  }
  if (staticInitializers.isEmpty()) {
    final PsiField[] psiFields=clazz.getFields();
    for (int i=0; i < psiFields.length; i++) {
      final PsiField field=psiFields[i];
      if (hasStaticInitializer(field)) {
        final MemberSignature initializerSignature=MemberSignature.getStaticInitializerMemberSignature();
        staticInitializers.add(initializerSignature);
        break;
      }
    }
  }
  nonPrivateConstructors=new HashSet();
  final PsiMethod[] constructors=clazz.getConstructors();
  if (constructors.length == 0 && !clazz.isInterface()) {
    final MemberSignature constructorSignature;
    if (clazz.hasModifierProperty(PsiModifier.PUBLIC)) {
      constructorSignature=MemberSignature.getPublicConstructor();
    }
 else {
      constructorSignature=MemberSignature.getPackagePrivateConstructor();
    }
    nonPrivateConstructors.add(constructorSignature);
  }
  for (int i=0; i < constructors.length; i++) {
    final PsiMethod constructor=constructors[i];
    if (!constructor.hasModifierProperty(PsiModifier.PRIVATE)) {
      final MemberSignature constructorSignature=new MemberSignature(constructor);
      nonPrivateConstructors.add(constructorSignature);
    }
  }
}
