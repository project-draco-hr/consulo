{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  PsiClass aClass=getField().getContainingClass();
  PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0) {
    final AddDefaultConstructorFix defaultConstructorFix=new AddDefaultConstructorFix(aClass);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        defaultConstructorFix.invoke(project,editor,file);
      }
    }
);
    aClass=getField().getContainingClass();
    constructors=aClass.getConstructors();
  }
  Arrays.sort(constructors,new Comparator<PsiMethod>(){
    @Override public int compare(    PsiMethod c1,    PsiMethod c2){
      final PsiMethod cc1=RefactoringUtil.getChainedConstructor(c1);
      final PsiMethod cc2=RefactoringUtil.getChainedConstructor(c2);
      if (cc1 == c2)       return 1;
      if (cc2 == c1)       return -1;
      if (cc1 == null) {
        return cc2 == null ? 0 : compare(c1,cc2);
      }
 else {
        return cc2 == null ? compare(cc1,c2) : compare(cc1,cc2);
      }
    }
  }
);
  for (  PsiMethod constructor : constructors) {
    if (!addParameterToConstructor(project,file,editor,constructor))     break;
  }
}
