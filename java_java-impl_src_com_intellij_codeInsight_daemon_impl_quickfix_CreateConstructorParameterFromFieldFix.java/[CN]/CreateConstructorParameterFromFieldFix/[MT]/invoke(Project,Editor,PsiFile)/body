{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  PsiMethod[] constructors=myClass.getConstructors();
  if (constructors.length == 0) {
    final AddDefaultConstructorFix defaultConstructorFix=new AddDefaultConstructorFix(myClass);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        defaultConstructorFix.invoke(project,editor,file);
      }
    }
);
    constructors=myClass.getConstructors();
  }
  Arrays.sort(constructors,new Comparator<PsiMethod>(){
    @Override public int compare(    PsiMethod c1,    PsiMethod c2){
      final PsiMethod cc1=RefactoringUtil.getChainedConstructor(c1);
      final PsiMethod cc2=RefactoringUtil.getChainedConstructor(c2);
      if (cc1 == c2)       return 1;
      if (cc2 == c1)       return -1;
      if (cc1 == null) {
        return cc2 == null ? 0 : compare(c1,cc2);
      }
 else {
        return cc2 == null ? compare(cc1,c2) : compare(cc1,cc2);
      }
    }
  }
);
  final ArrayList<PsiMethod> constrs=filterConstructorsIfFieldAlreadyAssigned(constructors);
  if (constrs.size() > 1) {
    final PsiMethodMember[] members=new PsiMethodMember[constrs.size()];
    int i=0;
    for (    PsiMethod constructor : constrs) {
      members[i++]=new PsiMethodMember(constructor);
    }
    final List<PsiMethodMember> elements;
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      elements=Arrays.asList(members);
    }
 else {
      final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(members,false,true,project);
      chooser.setTitle("Choose constructors to add parameter to");
      chooser.show();
      elements=chooser.getSelectedElements();
      if (elements == null)       return;
    }
    for (    PsiMethodMember member : elements) {
      if (!addParameterToConstructor(project,file,editor,member.getElement(),new PsiField[]{getField()}))       break;
    }
  }
 else   if (!constrs.isEmpty()) {
    final Collection<SmartPsiElementPointer<PsiField>> fieldsToFix=getFieldsToFix();
    final List<PsiField> fields=new ArrayList<PsiField>();
    for (    SmartPsiElementPointer<PsiField> elementPointer : fieldsToFix) {
      final PsiField field=elementPointer.getElement();
      if (field != null) {
        fields.add(field);
      }
    }
    addParameterToConstructor(project,file,editor,constrs.get(0),constrs.size() == constructors.length ? fields.toArray(new PsiField[fields.size()]) : new PsiField[]{getField()});
  }
}
