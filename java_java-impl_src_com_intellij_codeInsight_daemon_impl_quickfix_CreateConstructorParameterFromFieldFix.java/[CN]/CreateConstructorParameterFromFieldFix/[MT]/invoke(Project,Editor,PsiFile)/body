{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  PsiClass aClass=getField().getContainingClass();
  PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0) {
    final AddDefaultConstructorFix defaultConstructorFix=new AddDefaultConstructorFix(aClass);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        defaultConstructorFix.invoke(project,editor,file);
      }
    }
);
    aClass=getField().getContainingClass();
    constructors=aClass.getConstructors();
  }
  Arrays.sort(constructors,new Comparator<PsiMethod>(){
    @Override public int compare(    PsiMethod c1,    PsiMethod c2){
      final PsiMethod cc1=RefactoringUtil.getChainedConstructor(c1);
      final PsiMethod cc2=RefactoringUtil.getChainedConstructor(c2);
      if (cc1 == c2)       return 1;
      if (cc2 == c1)       return -1;
      if (cc1 == null) {
        return cc2 == null ? 0 : compare(c1,cc2);
      }
 else {
        return cc2 == null ? compare(cc1,c2) : compare(cc1,cc2);
      }
    }
  }
);
  if (constructors.length > 1) {
    final PsiMethodMember[] members=new PsiMethodMember[constructors.length];
    for (int i=0, constructorsLength=constructors.length; i < constructorsLength; i++) {
      members[i]=new PsiMethodMember(constructors[i]);
    }
    final List<PsiMethodMember> elements;
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      elements=Arrays.asList(members);
    }
 else {
      final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(members,false,true,project);
      chooser.setTitle("Choose constructors to add parameter to");
      chooser.show();
      elements=chooser.getSelectedElements();
      if (elements == null)       return;
    }
    for (    PsiMethodMember member : elements) {
      if (!addParameterToConstructor(project,file,editor,member.getElement()))       break;
    }
  }
 else {
    addParameterToConstructor(project,file,editor,constructors[0]);
  }
}
