{
  final PsiParameter[] parameters=constructor.getParameterList().getParameters();
  PsiExpression[] expressions=new PsiExpression[parameters.length + 1];
  PsiElementFactory factory=JavaPsiFacade.getInstance(file.getProject()).getElementFactory();
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    String value=PsiTypesUtil.getDefaultValueOfType(parameter.getType());
    expressions[i]=factory.createExpressionFromText(value,parameter);
  }
  expressions[parameters.length]=factory.createExpressionFromText(getField().getName(),constructor);
  final SmartPointerManager manager=SmartPointerManager.getInstance(getField().getProject());
  final SmartPsiElementPointer constructorPointer=manager.createSmartPsiElementPointer(constructor);
  final ChangeMethodSignatureFromUsageFix addParamFix=new ChangeMethodSignatureFromUsageFix(constructor,expressions,PsiSubstitutor.EMPTY,constructor,true,1);
  addParamFix.invoke(project,editor,file);
  return ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
    public Boolean compute(){
      return doCreate(project,editor,parameters,constructorPointer,addParamFix);
    }
  }
);
}
