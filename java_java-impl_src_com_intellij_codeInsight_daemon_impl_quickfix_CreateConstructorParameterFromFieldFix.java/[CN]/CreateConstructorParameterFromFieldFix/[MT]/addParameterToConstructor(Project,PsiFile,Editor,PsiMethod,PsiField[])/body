{
  final PsiParameter[] parameters=constructor.getParameterList().getParameters();
  PsiExpression[] expressions=new PsiExpression[parameters.length + fields.length];
  PsiElementFactory factory=JavaPsiFacade.getInstance(file.getProject()).getElementFactory();
  int i=0;
  for (; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    String value=PsiTypesUtil.getDefaultValueOfType(parameter.getType());
    expressions[i]=factory.createExpressionFromText(value,parameter);
  }
  for (  PsiField field : fields) {
    expressions[i++]=factory.createExpressionFromText(field.getName(),constructor);
  }
  if (constructor.isVarArgs()) {
    ArrayUtil.swap(expressions,parameters.length - 1,expressions.length - 1);
  }
  final SmartPointerManager manager=SmartPointerManager.getInstance(project);
  final SmartPsiElementPointer constructorPointer=manager.createSmartPsiElementPointer(constructor);
  final ChangeMethodSignatureFromUsageFix addParamFix=new ChangeMethodSignatureFromUsageFix(constructor,expressions,PsiSubstitutor.EMPTY,constructor,true,1);
  if (addParamFix.isAvailable(project,editor,file)) {
    addParamFix.invoke(project,editor,file);
  }
 else   if (addParamFix.isMethodSignatureExists() && !ApplicationManager.getApplication().isUnitTestMode()) {
    HintManager.getInstance().showErrorHint(editor,"Constructor with corresponding signature already exist");
  }
  return ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
    public Boolean compute(){
      return doCreate(project,editor,parameters,constructorPointer,addParamFix,fields);
    }
  }
);
}
