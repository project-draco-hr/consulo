{
  log(updateProgress,null,"---------------------------------------------");
  final AtomicInteger threadsToStartCountdown=new AtomicInteger(0);
  int id=1;
  List<ScheduledPass> freePasses=new ArrayList<ScheduledPass>();
  Map<Pair<FileEditor,Integer>,ScheduledPass> toBeSubmitted=new THashMap<Pair<FileEditor,Integer>,ScheduledPass>();
  for (  FileEditor fileEditor : passesMap.keySet()) {
    Document document=null;
    if (fileEditor instanceof TextEditor) {
      Editor editor=((TextEditor)fileEditor).getEditor();
      document=editor.getDocument();
    }
    HighlightingPass[] passes=passesMap.get(fileEditor);
    TextEditorHighlightingPass[] passesToAdd=new TextEditorHighlightingPass[passes.length];
    for (int i=0; i < passes.length; i++) {
      final HighlightingPass pass=passes[i];
      TextEditorHighlightingPass textEditorHighlightingPass;
      if (pass instanceof TextEditorHighlightingPass) {
        textEditorHighlightingPass=(TextEditorHighlightingPass)pass;
      }
 else {
        textEditorHighlightingPass=new TextEditorHighlightingPass(myProject,document){
          public void doCollectInformation(          ProgressIndicator progress){
            pass.collectInformation(progress);
          }
          public void doApplyInformationToEditor(){
            pass.applyInformationToEditor();
          }
        }
;
        textEditorHighlightingPass.setId(id++);
        if (i > 0) {
          textEditorHighlightingPass.setCompletionPredecessorIds(new int[]{i - 1});
        }
      }
      passesToAdd[i]=textEditorHighlightingPass;
    }
    threadsToStartCountdown.addAndGet(passesToAdd.length);
    for (    final TextEditorHighlightingPass pass : passesToAdd) {
      createScheduledPass(fileEditor,pass,toBeSubmitted,passesToAdd,freePasses,updateProgress,threadsToStartCountdown,jobPriority);
    }
  }
  for (  ScheduledPass freePass : freePasses) {
    submit(freePass);
  }
}
