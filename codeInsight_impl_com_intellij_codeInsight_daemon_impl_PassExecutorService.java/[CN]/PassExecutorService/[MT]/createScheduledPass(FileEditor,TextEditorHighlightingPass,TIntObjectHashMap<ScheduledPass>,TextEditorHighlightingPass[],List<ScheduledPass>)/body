{
  int passId=pass.getId();
  ScheduledPass scheduledPass=toBeSubmitted.get(passId);
  if (scheduledPass != null)   return scheduledPass;
  int[] completionPredecessorIds=pass.getCompletionPredecessorIds();
  scheduledPass=new ScheduledPass(fileEditor,pass);
  toBeSubmitted.put(passId,scheduledPass);
  for (  int predecessorId : completionPredecessorIds) {
    ScheduledPass predecessor=toBeSubmitted.get(predecessorId);
    if (predecessor == null) {
      TextEditorHighlightingPass textEditorPass=findPassById(predecessorId,textEditorHighlightingPasses);
      predecessor=textEditorPass == null ? null : createScheduledPass(fileEditor,textEditorPass,toBeSubmitted,textEditorHighlightingPasses,freePasses);
    }
    if (predecessor != null) {
      predecessor.mySuccessorsOnCompletion.add(scheduledPass);
      scheduledPass.myRunningPredecessorsCount.incrementAndGet();
    }
  }
  int[] startingPredecessorIds=pass.getStartingPredecessorIds();
  for (  int predecessorId : startingPredecessorIds) {
    ScheduledPass predecessor=toBeSubmitted.get(predecessorId);
    if (predecessor == null) {
      TextEditorHighlightingPass textEditorPass=findPassById(predecessorId,textEditorHighlightingPasses);
      predecessor=textEditorPass == null ? null : createScheduledPass(fileEditor,textEditorPass,toBeSubmitted,textEditorHighlightingPasses,freePasses);
    }
    if (predecessor != null) {
      predecessor.mySuccessorsOnSubmit.add(scheduledPass);
      scheduledPass.myRunningPredecessorsCount.incrementAndGet();
    }
  }
  if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) {
    freePasses.add(scheduledPass);
  }
  return scheduledPass;
}
