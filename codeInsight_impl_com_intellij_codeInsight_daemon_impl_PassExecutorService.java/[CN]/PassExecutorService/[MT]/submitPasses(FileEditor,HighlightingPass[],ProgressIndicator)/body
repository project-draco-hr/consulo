{
  myThreadsToStartCountdown.addAndGet(passes.length);
  final TextEditorHighlightingPass[] textEditorHighlightingPasses;
  if (passes instanceof TextEditorHighlightingPass[]) {
    textEditorHighlightingPasses=(TextEditorHighlightingPass[])passes;
  }
 else {
    textEditorHighlightingPasses=new TextEditorHighlightingPass[passes.length];
    for (int i=0; i < passes.length; i++) {
      final HighlightingPass pass=passes[i];
      TextEditorHighlightingPass textEditorHighlightingPass=new TextEditorHighlightingPass(myProject,null){
        public void doCollectInformation(        ProgressIndicator progress){
          pass.collectInformation(updateProgress);
        }
        public void doApplyInformationToEditor(){
          pass.applyInformationToEditor();
        }
      }
;
      textEditorHighlightingPass.setId(i);
      if (i > 0) {
        textEditorHighlightingPass.setCompletionPredecessorIds(new int[]{i - 1});
      }
      textEditorHighlightingPasses[i]=textEditorHighlightingPass;
    }
  }
  TIntObjectHashMap<ScheduledPass> toBeSubmitted=new TIntObjectHashMap<ScheduledPass>();
  List<ScheduledPass> freePasses=new ArrayList<ScheduledPass>();
  for (  final TextEditorHighlightingPass pass : textEditorHighlightingPasses) {
    createScheduledPass(fileEditor,pass,toBeSubmitted,textEditorHighlightingPasses,freePasses,updateProgress);
  }
  for (  ScheduledPass freePass : freePasses) {
    submit(freePass);
  }
}
