{
  final AtomicInteger threadsToStartCountdown=new AtomicInteger(0);
  List<ScheduledPass> freePasses=new ArrayList<ScheduledPass>();
  TIntObjectHashMap<ScheduledPass> toBeSubmitted=new TIntObjectHashMap<ScheduledPass>();
  for (  FileEditor fileEditor : passesMap.keySet()) {
    HighlightingPass[] passes=passesMap.get(fileEditor);
    TextEditorHighlightingPass[] passesToAdd;
    if (passes instanceof TextEditorHighlightingPass[]) {
      passesToAdd=(TextEditorHighlightingPass[])passes;
    }
 else {
      passesToAdd=new TextEditorHighlightingPass[passes.length];
      for (int i=0; i < passes.length; i++) {
        final HighlightingPass pass=passes[i];
        TextEditorHighlightingPass textEditorHighlightingPass=new TextEditorHighlightingPass(myProject,null){
          public void doCollectInformation(          ProgressIndicator progress){
            pass.collectInformation(updateProgress);
          }
          public void doApplyInformationToEditor(){
            pass.applyInformationToEditor();
          }
        }
;
        textEditorHighlightingPass.setId(i);
        if (i > 0) {
          textEditorHighlightingPass.setCompletionPredecessorIds(new int[]{i - 1});
        }
        passesToAdd[i]=textEditorHighlightingPass;
      }
    }
    threadsToStartCountdown.addAndGet(passesToAdd.length);
    for (    final TextEditorHighlightingPass pass : passesToAdd) {
      createScheduledPass(fileEditor,pass,toBeSubmitted,passesToAdd,freePasses,updateProgress,threadsToStartCountdown);
    }
  }
  for (  ScheduledPass freePass : freePasses) {
    submit(freePass);
  }
}
