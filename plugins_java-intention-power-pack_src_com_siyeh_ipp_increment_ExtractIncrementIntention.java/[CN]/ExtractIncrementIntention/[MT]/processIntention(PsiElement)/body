{
  final PsiExpression operand;
  if (element instanceof PsiPostfixExpression) {
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)element;
    operand=postfixExpression.getOperand();
  }
 else {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)element;
    operand=prefixExpression.getOperand();
  }
  if (operand == null) {
    return;
  }
  final PsiStatement statement=PsiTreeUtil.getParentOfType(element,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final PsiElement parent=statement.getParent();
  if (parent == null) {
    return;
  }
  final Project project=element.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  final String newStatementText=element.getText() + ';';
  final String operandText=operand.getText();
  if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) {
    final StringBuilder text=new StringBuilder();
    text.append('{');
    final String elementText=getElementText(statement,element,operandText);
    if (element instanceof PsiPostfixExpression) {
      text.append(elementText);
      text.append(newStatementText);
    }
 else {
      text.append(newStatementText);
      text.append(elementText);
    }
    text.append('}');
    final PsiCodeBlock codeBlock=factory.createCodeBlockFromText(text.toString(),parent);
    statement.replace(codeBlock);
    return;
  }
  final PsiStatement newStatement=factory.createStatementFromText(newStatementText,element);
  if (statement instanceof PsiReturnStatement) {
    if (element instanceof PsiPostfixExpression) {
      final PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
      final PsiExpression returnValue=returnStatement.getReturnValue();
      if (returnValue == null) {
        return;
      }
      final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
      final String variableName=javaCodeStyleManager.suggestUniqueVariableName("result",returnValue,true);
      final PsiType type=returnValue.getType();
      if (type == null) {
        return;
      }
      final String newReturnValueText=getElementText(returnValue,element,operandText);
      final String declarationStatementText=type.getCanonicalText() + ' ' + variableName+ '='+ newReturnValueText+ ';';
      final PsiStatement declarationStatement=factory.createStatementFromText(declarationStatementText,returnStatement);
      parent.addBefore(declarationStatement,statement);
      parent.addBefore(newStatement,statement);
      final PsiStatement newReturnStatement=factory.createStatementFromText("return " + variableName + ';',returnStatement);
      returnStatement.replace(newReturnStatement);
      return;
    }
 else {
      parent.addBefore(newStatement,statement);
    }
  }
 else   if (statement instanceof PsiThrowStatement) {
    if (element instanceof PsiPostfixExpression) {
      final PsiThrowStatement returnStatement=(PsiThrowStatement)statement;
      final PsiExpression exception=returnStatement.getException();
      if (exception == null) {
        return;
      }
      final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
      final String variableName=javaCodeStyleManager.suggestUniqueVariableName("e",exception,true);
      final PsiType type=exception.getType();
      if (type == null) {
        return;
      }
      final String newReturnValueText=getElementText(exception,element,operandText);
      final String declarationStatementText=type.getCanonicalText() + ' ' + variableName+ '='+ newReturnValueText+ ';';
      final PsiStatement declarationStatement=factory.createStatementFromText(declarationStatementText,returnStatement);
      parent.addBefore(declarationStatement,statement);
      parent.addBefore(newStatement,statement);
      final PsiStatement newReturnStatement=factory.createStatementFromText("throw " + variableName + ';',returnStatement);
      returnStatement.replace(newReturnStatement);
      return;
    }
 else {
      parent.addBefore(newStatement,statement);
    }
  }
 else   if (!(statement instanceof PsiForStatement)) {
    if (element instanceof PsiPostfixExpression) {
      parent.addAfter(newStatement,statement);
    }
 else {
      parent.addBefore(newStatement,statement);
    }
  }
 else   if (operand instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)operand;
    final PsiElement target=referenceExpression.resolve();
    if (target != null) {
      final SearchScope useScope=target.getUseScope();
      if (!new LocalSearchScope(statement).equals(useScope)) {
        if (element instanceof PsiPostfixExpression) {
          parent.addAfter(newStatement,statement);
        }
 else {
          parent.addBefore(newStatement,statement);
        }
      }
    }
  }
  if (statement instanceof PsiLoopStatement) {
    final PsiLoopStatement loopStatement=(PsiLoopStatement)statement;
    final PsiStatement body=loopStatement.getBody();
    if (body instanceof PsiBlockStatement) {
      final PsiBlockStatement blockStatement=(PsiBlockStatement)body;
      final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
      if (element instanceof PsiPostfixExpression) {
        final PsiElement firstElement=codeBlock.getFirstBodyElement();
        codeBlock.addBefore(newStatement,firstElement);
      }
 else {
        codeBlock.add(newStatement);
      }
    }
 else {
      final StringBuilder blockText=new StringBuilder();
      blockText.append('{');
      if (element instanceof PsiPostfixExpression) {
        blockText.append(newStatementText);
        if (body != null) {
          blockText.append(body.getText());
        }
      }
 else {
        if (body != null) {
          blockText.append(body.getText());
        }
        blockText.append(newStatementText);
      }
      blockText.append('}');
      final PsiStatement blockStatement=factory.createStatementFromText(blockText.toString(),statement);
      if (body == null) {
        loopStatement.add(blockStatement);
      }
 else {
        body.replace(blockStatement);
      }
    }
  }
  replaceExpression(operandText,(PsiExpression)element);
}
