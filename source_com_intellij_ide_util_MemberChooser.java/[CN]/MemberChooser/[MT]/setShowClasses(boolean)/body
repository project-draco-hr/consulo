{
  myShowClasses=showClasses;
  Pair<ElementNode,List<ElementNode>> selection=storeSelection();
  DefaultMutableTreeNode root=getRootNode();
  if (!myShowClasses || myClassNodes.size() == 0) {
    List<ParentNode> otherObjects=new ArrayList<ParentNode>();
    Enumeration<ParentNode<T>> children=getRootNodeChildren();
    ParentNode<T> newRoot=new ParentNode<T>(root,new MemberChooserObjectBase(IdeBundle.message("node.memberchooser.all.classes")),new Ref<Integer>(0));
    while (children.hasMoreElements()) {
      final ParentNode nextElement=children.nextElement();
      if (nextElement instanceof ClassNode) {
        final ClassNode<T> classNode=(ClassNode<T>)nextElement;
        Enumeration<MemberNode<T>> memberNodes=classNode.children();
        while (memberNodes.hasMoreElements()) {
          newRoot.add(memberNodes.nextElement());
        }
      }
 else {
        otherObjects.add(nextElement);
      }
    }
    replaceChildren(root,otherObjects);
    sortNode(newRoot,mySorted);
    if (!newRoot.children().hasMoreElements())     root.remove(newRoot);
  }
 else {
    Enumeration<ParentNode<T>> children=getRootNodeChildren();
    if (children.hasMoreElements()) {
      ParentNode<T> allClassesNode=children.nextElement();
      Enumeration<MemberNode<T>> memberNodes=allClassesNode.children();
      ArrayList<MemberNode> arrayList=new ArrayList<MemberNode>();
      while (memberNodes.hasMoreElements()) {
        arrayList.add(memberNodes.nextElement());
      }
      for (      MemberNode memberNode : arrayList) {
        myNodeToParentMap.get(memberNode).add(memberNode);
      }
    }
    replaceChildren(root,myClassNodes);
  }
  myTreeModel.nodeStructureChanged(root);
  TreeUtil.expandAll(myTree);
  restoreSelection(selection);
}
