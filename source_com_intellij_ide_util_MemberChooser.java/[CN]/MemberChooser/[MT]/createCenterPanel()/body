{
  JPanel panel=new JPanel(new BorderLayout());
  DefaultActionGroup group=new DefaultActionGroup();
  SortEmAction sortAction=new SortEmAction();
  sortAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.ALT_MASK)),myTree);
  setSorted(PropertiesComponent.getInstance().isTrueValue(PROP_SORTED));
  group.add(sortAction);
  ShowClassesAction showClassesAction=new ShowClassesAction();
  showClassesAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.ALT_MASK)),myTree);
  setShowClasses(PropertiesComponent.getInstance().isTrueValue(PROP_SHOWCLASSES));
  group.add(showClassesAction);
  ExpandAllAction expandAllAction=new ExpandAllAction();
  expandAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK)),myTree);
  group.add(expandAllAction);
  CollapseAllAction collapseAllAction=new CollapseAllAction();
  collapseAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK)),myTree);
  group.add(collapseAllAction);
  panel.add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent(),BorderLayout.NORTH);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof ElementNode) {
        ((ElementNode)value).getDelegate().renderTreeNode(this,tree);
      }
    }
  }
);
  UIUtil.setLineStyleAngled(myTree);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.addKeyListener(new TreeKeyListener());
  myTree.addTreeSelectionListener(new MyTreeSelectionListener());
  if (!myAllowMultiSelection) {
    myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  }
  if ((getRootNode()).getChildCount() > 0) {
    myTree.expandRow(0);
    myTree.setSelectionRow(1);
  }
  TreeUtil.expandAll(myTree);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    @Nullable public String convert(    TreePath path){
      final MemberChooserObject delegate=((ElementNode)path.getLastPathComponent()).getDelegate();
      return delegate instanceof ClassMember ? null : delegate.getText();
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        if (myTree.getPathForLocation(e.getX(),e.getY()) != null) {
          doOKAction();
        }
      }
    }
  }
);
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  JScrollPane scrollPane=new JScrollPane(myTree);
  scrollPane.setPreferredSize(new Dimension(350,450));
  panel.add(scrollPane,BorderLayout.CENTER);
  return panel;
}
