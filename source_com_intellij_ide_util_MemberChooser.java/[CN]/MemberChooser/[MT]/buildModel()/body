{
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode();
  Map map=new HashMap();
  for (int i=0; i < myElements.length; i++) {
    Object object=myElements[i];
    if (object instanceof PsiElement) {
      final PsiElement psiElement=(PsiElement)object;
      LOG.assertTrue(psiElement instanceof PsiMember);
      final PsiClass psiClass=((PsiMember)psiElement).getContainingClass();
      ElementNode classNode=(ElementNode)map.get(psiClass);
      if (classNode == null) {
        classNode=new ElementNode(psiClass,myClassNodes.size() * (i + 1));
        formatNode(classNode);
        rootNode.add(classNode);
        map.put(psiClass,classNode);
        myClassNodes.add(classNode);
      }
      ElementNode memberNode=new ElementNode(psiElement,myClassNodes.size() * (i + 1) + classNode.getChildCount());
      formatNode(memberNode);
      classNode.add(memberNode);
      myNodeToParentMap.put(memberNode,classNode);
      myElementToNodeMap.put(psiElement,memberNode);
    }
 else     if (object instanceof CandidateInfo) {
      PsiElement element=((CandidateInfo)object).getElement();
      PsiClass aClass=(PsiClass)element.getParent();
      ElementNode classNode=(ElementNode)map.get(aClass);
      if (classNode == null) {
        PsiSubstitutor substitutor=((CandidateInfo)object).getSubstitutor();
        CandidateInfo info=new CandidateInfo(aClass,substitutor);
        classNode=new GenericElementNode(info,myClassNodes.size() * (i + 1));
        formatNode(classNode);
        rootNode.add(classNode);
        map.put(aClass,classNode);
        myClassNodes.add(classNode);
      }
      ElementNode memberNode=new GenericElementNode((CandidateInfo)object,myClassNodes.size() * (i + 1) + classNode.getChildCount());
      formatNode(memberNode);
      classNode.add(memberNode);
      myNodeToParentMap.put(memberNode,classNode);
      myElementToNodeMap.put(object,memberNode);
    }
 else     if (object instanceof CmpField) {
      CmpField field=(CmpField)object;
      final EntityBean bean=field.getEntityBean();
      EntityBeanNode beanNode=(EntityBeanNode)map.get(bean);
      if (beanNode == null) {
        beanNode=new EntityBeanNode(bean);
        rootNode.add(beanNode);
        map.put(bean,beanNode);
      }
      CmpFieldNode fieldNode=new CmpFieldNode(field);
      beanNode.add(fieldNode);
      myNodeToParentMap.put(fieldNode,beanNode);
      myElementToNodeMap.put(field,fieldNode);
    }
 else     if (object instanceof CmrField) {
      CmrField field=(CmrField)object;
      final EntityBean bean=field.getOppositeField().getOppositeEntity();
      EntityBeanNode beanNode=(EntityBeanNode)map.get(bean);
      if (beanNode == null) {
        beanNode=new EntityBeanNode(bean);
        rootNode.add(beanNode);
        map.put(bean,beanNode);
      }
      CmrFieldNode fieldNode=new CmrFieldNode(field);
      beanNode.add(fieldNode);
      myNodeToParentMap.put(fieldNode,beanNode);
      myElementToNodeMap.put(field,fieldNode);
    }
  }
  return new DefaultTreeModel(rootNode);
}
