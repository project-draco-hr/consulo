{
  UIUtil.applyRenderingHints(g);
  JMenuItem jmenuitem=(JMenuItem)comp;
  ButtonModel buttonmodel=jmenuitem.getModel();
  int mnemonicIndex=jmenuitem.getDisplayedMnemonicIndex();
  Icon icon1=getIcon();
  Icon icon2=getAllowedIcon();
  int j1=jmenuitem.getWidth();
  int k1=jmenuitem.getHeight();
  Insets insets=comp.getInsets();
  initBounds();
  f.setBounds(0,0,j1,k1);
  f.x+=insets.left;
  f.y+=insets.top;
  f.width-=insets.right + f.x;
  f.height-=insets.bottom + f.y;
  Font font=g.getFont();
  Font font1=comp.getFont();
  g.setFont(font1);
  FontMetrics fontmetrics=g.getFontMetrics(font1);
  FontMetrics fontmetrics1=g.getFontMetrics(acceleratorFont);
  String keyStrokeText;
  if (jmenuitem instanceof ActionMenuItem) {
    keyStrokeText=((ActionMenuItem)jmenuitem).getFirstShortcutText();
  }
 else {
    keyStrokeText=getKeyStrokeText(jmenuitem.getAccelerator());
  }
  String s1=layoutMenuItem(fontmetrics,jmenuitem.getText(),fontmetrics1,keyStrokeText,icon1,icon2,arrowIcon,jmenuitem.getVerticalAlignment(),jmenuitem.getHorizontalAlignment(),jmenuitem.getVerticalTextPosition(),jmenuitem.getHorizontalTextPosition(),f,l,j,c,h,d,jmenuitem.getText() != null ? defaultTextIconGap : 0,defaultTextIconGap);
  Color color2=g.getColor();
  if (comp.isOpaque()) {
    g.setColor(jmenuitem.getBackground());
    g.fillRect(0,0,j1,k1);
    if (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected()) {
      if (UIUtil.isUnderAquaLookAndFeel()) {
        myAquaSelectedBackgroundPainter.paintBorder(comp,g,0,0,j1,k1);
      }
 else {
        g.setColor(selectionBackground);
        if (icon2 != null) {
          g.fillRect(k,0,j1 - k,k1);
        }
 else {
          g.fillRect(0,0,j1,k1);
          g.setColor(selectionBackground);
        }
      }
    }
    g.setColor(color2);
  }
  if (icon2 != null) {
    if (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected()) {
      g.setColor(selectionForeground);
    }
 else {
      g.setColor(jmenuitem.getForeground());
    }
    if (useCheckAndArrow()) {
      icon2.paintIcon(comp,g,h.x,h.y);
    }
    g.setColor(color2);
    if (menuItem.isArmed()) {
      drawIconBorder(g);
    }
  }
  if (icon1 != null) {
    if (!buttonmodel.isEnabled()) {
      icon1=jmenuitem.getDisabledIcon();
    }
 else     if (buttonmodel.isPressed() && buttonmodel.isArmed()) {
      icon1=jmenuitem.getPressedIcon();
      if (icon1 == null) {
        icon1=jmenuitem.getIcon();
      }
    }
    if (icon1 != null) {
      icon1.paintIcon(comp,g,l.x,l.y);
    }
  }
  if (s1 != null && s1.length() > 0) {
    if (buttonmodel.isEnabled()) {
      if (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected()) {
        g.setColor(selectionForeground);
      }
 else {
        g.setColor(jmenuitem.getForeground());
      }
      BasicGraphicsUtils.drawStringUnderlineCharAt(g,s1,mnemonicIndex,j.x,j.y + fontmetrics.getAscent());
    }
 else {
      final Object disabledForeground=UIUtil.getMenuItemDisabledForegroundObject();
      if (disabledForeground instanceof Color) {
        g.setColor((Color)disabledForeground);
        BasicGraphicsUtils.drawStringUnderlineCharAt(g,s1,mnemonicIndex,j.x,j.y + fontmetrics.getAscent());
      }
 else {
        g.setColor(jmenuitem.getBackground().brighter());
        BasicGraphicsUtils.drawStringUnderlineCharAt(g,s1,mnemonicIndex,j.x,j.y + fontmetrics.getAscent());
        g.setColor(jmenuitem.getBackground().darker());
        BasicGraphicsUtils.drawStringUnderlineCharAt(g,s1,mnemonicIndex,j.x - 1,(j.y + fontmetrics.getAscent()) - 1);
      }
    }
  }
  if (keyStrokeText != null && !keyStrokeText.isEmpty()) {
    g.setFont(acceleratorFont);
    if (buttonmodel.isEnabled()) {
      if (UIUtil.isUnderAquaBasedLookAndFeel() && (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected())) {
        g.setColor(selectionForeground);
      }
 else {
        if (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected()) {
          g.setColor(acceleratorSelectionForeground);
        }
 else {
          g.setColor(acceleratorForeground);
        }
      }
      BasicGraphicsUtils.drawString(g,keyStrokeText,0,c.x,c.y + fontmetrics.getAscent());
    }
 else     if (disabledForeground != null) {
      g.setColor(disabledForeground);
      BasicGraphicsUtils.drawString(g,keyStrokeText,0,c.x,c.y + fontmetrics.getAscent());
    }
 else {
      g.setColor(jmenuitem.getBackground().brighter());
      BasicGraphicsUtils.drawString(g,keyStrokeText,0,c.x,c.y + fontmetrics.getAscent());
      g.setColor(jmenuitem.getBackground().darker());
      BasicGraphicsUtils.drawString(g,keyStrokeText,0,c.x - 1,(c.y + fontmetrics.getAscent()) - 1);
    }
  }
  if (arrowIcon != null) {
    if (buttonmodel.isArmed() || (comp instanceof JMenu) && buttonmodel.isSelected()) {
      g.setColor(selectionForeground);
    }
    if (useCheckAndArrow()) {
      arrowIcon.paintIcon(comp,g,d.x,d.y);
    }
  }
  g.setColor(color2);
  g.setFont(font);
}
