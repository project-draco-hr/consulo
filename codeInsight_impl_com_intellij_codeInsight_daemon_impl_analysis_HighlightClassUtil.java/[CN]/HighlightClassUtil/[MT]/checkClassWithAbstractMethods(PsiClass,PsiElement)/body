{
  Collection<HierarchicalMethodSignature> allMethods=aClass.getVisibleSignatures();
  PsiMethod abstractMethod=ClassUtil.getAnyAbstractMethod(aClass,allMethods);
  if (abstractMethod != null && abstractMethod.getContainingClass() != null) {
    String baseClassName=HighlightUtil.formatClass(aClass,false);
    String methodName=HighlightUtil.formatMethod(abstractMethod);
    String message=JavaErrorMessages.message("class.must.be.abstract",baseClassName,methodName,HighlightUtil.formatClass(abstractMethod.getContainingClass(),false));
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,highlightElement,message);
    if (ClassUtil.getAnyMethodToImplement(aClass,allMethods) != null) {
      QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createImplementMethodsFix(aClass),null);
    }
    return highlightInfo;
  }
  return null;
}
