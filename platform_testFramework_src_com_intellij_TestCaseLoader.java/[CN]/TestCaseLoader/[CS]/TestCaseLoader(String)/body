{
  InputStream excludedStream=getClass().getClassLoader().getResourceAsStream(classFilterName);
  String preconfiguredGroup=System.getProperty(TARGET_TEST_GROUP);
  if (preconfiguredGroup == null || "".equals(preconfiguredGroup.trim())) {
    myTestGroupName="";
  }
 else {
    myTestGroupName=preconfiguredGroup.trim();
  }
  if (excludedStream != null) {
    try {
      myTestClassesFilter=GroupBasedTestClassFilter.createOn(new InputStreamReader(excludedStream),myTestGroupName);
    }
  finally {
      try {
        excludedStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    String patterns=System.getProperty(TARGET_TEST_PATTERNS);
    if (patterns != null) {
      myTestClassesFilter=new PatternListTestClassFilter(StringUtil.split(patterns,";"));
    }
 else {
      myTestClassesFilter=TestClassesFilter.ALL_CLASSES;
    }
  }
  String[] names;
  try {
    InputStream stream=getClass().getClassLoader().getResourceAsStream("tests/slowTests.txt");
    names=FileUtil.loadTextAndClose(new InputStreamReader(stream)).split("\\s");
  }
 catch (  Exception e) {
    names=new String[0];
  }
  slowTestNames=names;
  if (Comparing.equal(System.getProperty(FAST_TESTS_ONLY_FLAG),"true")) {
    blockedTests.addAll(Arrays.asList(slowTestNames));
  }
 else {
    checkClassesExist();
  }
  System.out.println("Using test group: [" + myTestGroupName + "]");
}
