{
  final Project project=myProjectFixture.getProject();
  final SortedMap<HighlightInfo,List<GutterIconRenderer>> result=new TreeMap<HighlightInfo,List<GutterIconRenderer>>(new Comparator<HighlightInfo>(){
    public int compare(    final HighlightInfo o1,    final HighlightInfo o2){
      return o1.startOffset - o2.startOffset;
    }
  }
);
  new WriteCommandAction.Simple(project){
    protected void run() throws Throwable {
      configureByFilesInner(filePath);
      final Collection<HighlightInfo> infos=doHighlighting();
      for (      HighlightInfo info : infos) {
        final GutterIconRenderer renderer=info.getGutterIconRenderer();
        if (renderer != null) {
          List<GutterIconRenderer> renderers=result.get(info);
          if (renderers == null) {
            result.put(info,renderers=new SmartList<GutterIconRenderer>());
          }
          renderers.add(renderer);
        }
      }
    }
  }
.execute().throwException();
  return ContainerUtil.concat(result.values());
}
