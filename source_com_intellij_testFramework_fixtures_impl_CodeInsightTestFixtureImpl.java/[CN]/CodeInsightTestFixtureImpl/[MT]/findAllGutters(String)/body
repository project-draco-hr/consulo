{
  assertInitialized();
  final Project project=myProjectFixture.getProject();
  final SortedMap<Integer,List<GutterIconRenderer>> result=new TreeMap<Integer,List<GutterIconRenderer>>();
  new WriteCommandAction.Simple(project){
    protected void run() throws Throwable {
      configureByFilesInner(filePath);
      for (      HighlightInfo info : doHighlighting()) {
        addGutterIconRenderer(info.getGutterIconRenderer(),info.startOffset);
      }
      LineMarkersPass markersPass=new LineMarkersPass(project,myFile,myEditor.getDocument(),0,myFile.getTextLength(),true);
      markersPass.doCollectInformation(new MockProgressIndicator());
      markersPass.doApplyInformationToEditor();
      SlowLineMarkersPass slowMarkers=new SlowLineMarkersPass(project,myFile,myEditor.getDocument(),0,myFile.getTextLength());
      slowMarkers.doCollectInformation(new MockProgressIndicator());
      slowMarkers.doApplyInformationToEditor();
      for (      final RangeHighlighter highlighter : myEditor.getDocument().getMarkupModel(project).getAllHighlighters()) {
        addGutterIconRenderer(highlighter.getGutterIconRenderer(),highlighter.getStartOffset());
      }
    }
    private void addGutterIconRenderer(    final GutterIconRenderer renderer,    final int offset){
      if (renderer == null)       return;
      List<GutterIconRenderer> renderers=result.get(offset);
      if (renderers == null) {
        result.put(offset,renderers=new SmartList<GutterIconRenderer>());
      }
      renderers.add(renderer);
    }
  }
.execute().throwException();
  return ContainerUtil.concat(result.values());
}
