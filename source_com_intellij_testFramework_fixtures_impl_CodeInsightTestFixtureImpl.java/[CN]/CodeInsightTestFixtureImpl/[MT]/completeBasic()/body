{
  return new WriteCommandAction<LookupItem[]>(getProject()){
    boolean empty=false;
    protected void run(    final Result<LookupItem[]> result) throws Throwable {
      new CodeCompletionAction(){
        public CodeInsightActionHandler getHandler(){
          return new CodeCompletionHandler(){
            protected PsiFile createFileCopy(            final PsiFile file){
              final PsiFile copy=super.createFileCopy(file);
              if (myFileContext != null) {
                final PsiElement contextCopy=myFileContext.copy();
                final PsiFile containingFile=contextCopy.getContainingFile();
                if (containingFile instanceof PsiFileImpl) {
                  ((PsiFileImpl)containingFile).setOriginalFile(myFileContext.getContainingFile());
                }
                setContext(copy,contextCopy);
              }
              return copy;
            }
            protected void handleEmptyLookup(            final CompletionContext context,            final LookupData lookupData,            final CompletionParameters parameters){
              empty=true;
              super.handleEmptyLookup(context,lookupData,parameters);
            }
          }
;
        }
      }
.actionPerformedImpl(getProject(),InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(myEditor,myFile));
      LookupImpl lookup=(LookupImpl)LookupManager.getActiveLookup(myEditor);
      result.setResult(lookup == null ? (empty ? LookupItem.EMPTY_ARRAY : null) : lookup.getSortedItems());
    }
  }
.execute().getResultObject();
}
