{
  return new WriteCommandAction<LookupItem[]>(getProject()){
    protected void run(    final Result<LookupItem[]> result) throws Throwable {
      new CodeCompletionAction(){
        public CodeInsightActionHandler getHandler(){
          return new CodeCompletionHandler(){
            protected PsiFile createFileCopy(            final PsiFile file){
              final PsiFile copy=super.createFileCopy(file);
              if (myFileContext != null) {
                final PsiElement contextCopy=myFileContext.copy();
                final PsiFile containingFile=contextCopy.getContainingFile();
                if (containingFile instanceof PsiFileImpl) {
                  ((PsiFileImpl)containingFile).setOriginalFile(myFileContext.getContainingFile());
                }
                setContext(copy,contextCopy);
              }
              return copy;
            }
            protected void computingFinished(            final LookupData data,            final LookupItem[] items,            final String prefix,            final String uniqueText,            final LookupItem item,            final boolean doNotAutocomplete,            final CompletionProgressIndicator indicator,            final int offset2,            final CompletionContext context,            final int offset1){
              super.computingFinished(data,items,prefix,uniqueText,item,doNotAutocomplete,indicator,offset2,context,offset1);
              result.setResult(items);
            }
          }
;
        }
      }
.actionPerformedImpl(getProject(),InjectedLanguageUtil.getEditorForInjectedLanguage(myEditor,myFile));
    }
  }
.execute().getResultObject();
}
