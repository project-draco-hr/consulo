{
  Project project=myProjectFixture.getProject();
  project.getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
  if (stripTrailingSpaces) {
    ((DocumentEx)myEditor.getDocument()).stripTrailingSpaces(false);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  String fullPath=getTestDataPath() + filePath;
  final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'));
  TestCase.assertNotNull("Cannot find file " + fullPath,vFile);
  String fileText=null;
  try {
    fileText=StringUtil.convertLineSeparators(VfsUtil.loadText(vFile),"\n");
  }
 catch (  IOException e) {
    TestCase.fail("Cannot load " + vFile);
  }
  Document document=EditorFactory.getInstance().createDocument(fileText);
  int caretIndex=fileText.indexOf(CARET_MARKER);
  int selStartIndex=fileText.indexOf(SELECTION_START_MARKER);
  int selEndIndex=fileText.indexOf(SELECTION_END_MARKER);
  final RangeMarker caretMarker=caretIndex >= 0 ? document.createRangeMarker(caretIndex,caretIndex) : null;
  final RangeMarker selStartMarker=selStartIndex >= 0 ? document.createRangeMarker(selStartIndex,selStartIndex) : null;
  final RangeMarker selEndMarker=selEndIndex >= 0 ? document.createRangeMarker(selEndIndex,selEndIndex) : null;
  if (caretMarker != null) {
    document.deleteString(caretMarker.getStartOffset(),caretMarker.getStartOffset() + CARET_MARKER.length());
  }
  if (selStartMarker != null) {
    document.deleteString(selStartMarker.getStartOffset(),selStartMarker.getStartOffset() + SELECTION_START_MARKER.length());
  }
  if (selEndMarker != null) {
    document.deleteString(selEndMarker.getStartOffset(),selEndMarker.getStartOffset() + SELECTION_END_MARKER.length());
  }
  String newFileText=document.getText();
  String newFileText1=newFileText;
  if (stripTrailingSpaces) {
    Document document1=EditorFactory.getInstance().createDocument(newFileText);
    ((DocumentEx)document1).stripTrailingSpaces(false);
    newFileText1=document1.getText();
  }
  String text=myFile.getText();
  text=StringUtil.convertLineSeparators(text,"\n");
  TestCase.assertEquals("Text mismatch in file " + filePath,newFileText1,text);
  if (caretMarker != null) {
    int caretLine=StringUtil.offsetToLineNumber(newFileText,caretMarker.getStartOffset());
    int caretCol=caretMarker.getStartOffset() - StringUtil.lineColToOffset(newFileText,caretLine,0);
    TestCase.assertEquals("caretLine",caretLine + 1,myEditor.getCaretModel().getLogicalPosition().line + 1);
    TestCase.assertEquals("caretColumn",caretCol + 1,myEditor.getCaretModel().getLogicalPosition().column + 1);
  }
  if (selStartMarker != null && selEndMarker != null) {
    int selStartLine=StringUtil.offsetToLineNumber(newFileText,selStartMarker.getStartOffset());
    int selStartCol=selStartMarker.getStartOffset() - StringUtil.lineColToOffset(newFileText,selStartLine,0);
    int selEndLine=StringUtil.offsetToLineNumber(newFileText,selEndMarker.getEndOffset());
    int selEndCol=selEndMarker.getEndOffset() - StringUtil.lineColToOffset(newFileText,selEndLine,0);
    TestCase.assertEquals("selectionStartLine",selStartLine + 1,StringUtil.offsetToLineNumber(newFileText,myEditor.getSelectionModel().getSelectionStart()) + 1);
    TestCase.assertEquals("selectionStartCol",selStartCol + 1,myEditor.getSelectionModel().getSelectionStart() - StringUtil.lineColToOffset(newFileText,selStartLine,0) + 1);
    TestCase.assertEquals("selectionEndLine",selEndLine + 1,StringUtil.offsetToLineNumber(newFileText,myEditor.getSelectionModel().getSelectionEnd()) + 1);
    TestCase.assertEquals("selectionEndCol",selEndCol + 1,myEditor.getSelectionModel().getSelectionEnd() - StringUtil.lineColToOffset(newFileText,selEndLine,0) + 1);
  }
 else {
    TestCase.assertTrue("has no selection",!myEditor.getSelectionModel().hasSelection());
  }
}
