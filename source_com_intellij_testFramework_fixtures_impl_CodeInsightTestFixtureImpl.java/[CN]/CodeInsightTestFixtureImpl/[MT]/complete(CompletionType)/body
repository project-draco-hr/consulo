{
  myEmptyLookup=false;
  new WriteCommandAction(getProject()){
    protected void run(    Result result) throws Throwable {
      final CodeInsightActionHandler handler;
switch (type) {
case BASIC:
        handler=new CodeCompletionHandler(){
          protected PsiFile createFileCopy(          final PsiFile file){
            final PsiFile copy=super.createFileCopy(file);
            if (myFileContext != null) {
              final PsiElement contextCopy=myFileContext.copy();
              final PsiFile containingFile=contextCopy.getContainingFile();
              if (containingFile instanceof PsiFileImpl) {
                ((PsiFileImpl)containingFile).setOriginalFile(myFileContext.getContainingFile());
              }
              setContext(copy,contextCopy);
            }
            return copy;
          }
          protected void handleEmptyLookup(          final CompletionContext context,          final CompletionParameters parameters,          final CompletionProgressIndicator indicator){
            myEmptyLookup=true;
            super.handleEmptyLookup(context,parameters,indicator);
          }
        }
;
      break;
case SMART:
    handler=new SmartCodeCompletionHandler(){
      protected void handleEmptyLookup(      final CompletionContext context,      final CompletionParameters parameters,      final CompletionProgressIndicator indicator){
        myEmptyLookup=true;
        super.handleEmptyLookup(context,parameters,indicator);
      }
    }
;
  break;
case CLASS_NAME:
default :
handler=new ClassNameCompletionHandler(){
  protected void handleEmptyLookup(  final CompletionContext context,  final CompletionParameters parameters,  final CompletionProgressIndicator indicator){
    myEmptyLookup=true;
    super.handleEmptyLookup(context,parameters,indicator);
  }
}
;
}
Editor editor=getCompletionEditor();
handler.invoke(getProject(),editor,PsiUtilBase.getPsiFileInEditor(editor,getProject()));
}
}
.execute();
return getLookupElements();
}
