{
  LanguageLevel languageLevel=chunk.getLanguageLevel();
  CompilerUtil.addSourceCommandLineSwitch(jdk,languageLevel,commandLine);
  commandLine.add("-verbose");
  final String cp=chunk.getCompilationClasspath();
  final String bootCp=chunk.getCompilationBootClasspath();
  final String classPath;
  if (version1_0 || version1_1) {
    classPath=bootCp + File.pathSeparator + cp;
  }
 else {
    classPath=cp;
    commandLine.add("-bootclasspath");
    addClassPathValue(jdk,false,commandLine,bootCp,"javac_bootcp",tempFiles,useTempFile);
  }
  commandLine.add("-classpath");
  addClassPathValue(jdk,version1_0,commandLine,classPath,"javac_cp",tempFiles,useTempFile);
  if (!version1_1 && !version1_0 && addSourcePath) {
    commandLine.add("-sourcepath");
    commandLine.add("\"\"");
  }
  if (isAnnotationProcessingMode) {
    commandLine.add("-s");
    commandLine.add(outputPath.replace('/',File.separatorChar));
    commandLine.add("-d");
    commandLine.add(outputPath.replace('/',File.separatorChar));
  }
 else {
    commandLine.add("-d");
    commandLine.add(outputPath.replace('/',File.separatorChar));
  }
}
