{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Received from groovyc: " + text);
  }
  text=text.trim();
  if (text.startsWith(GroovycRunner.PRESENTABLE_MESSAGE)) {
    myContext.getProgressIndicator().setText(text.substring(GroovycRunner.PRESENTABLE_MESSAGE.length()));
    return;
  }
  if (GroovycRunner.CLEAR_PRESENTABLE.equals(text)) {
    myContext.getProgressIndicator().setText("Groovy compiler in operation...");
    return;
  }
  if (StringUtil.isNotEmpty(text)) {
    outputBuffer.append(text);
    if (outputBuffer.indexOf(GroovycRunner.COMPILED_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.COMPILED_END) != -1)) {
        return;
      }
{
        text=handleOutputBuffer(GroovycRunner.COMPILED_START,GroovycRunner.COMPILED_END);
        StringTokenizer tokenizer=new StringTokenizer(text,GroovycRunner.SEPARATOR,false);
        String token;
        String outputPath="";
        String sourceFile="";
        String outputRootDirectory="";
        if (tokenizer.hasMoreTokens()) {
          token=tokenizer.nextToken();
          outputPath=token;
        }
        if (tokenizer.hasMoreTokens()) {
          token=tokenizer.nextToken();
          sourceFile=token;
        }
        LocalFileSystem.getInstance().refreshAndFindFileByPath(outputPath);
        final TranslatingCompiler.OutputItem item=getOutputItem(outputPath,sourceFile);
        if (item != null) {
          myCompiledItems.add(item);
        }
      }
    }
 else     if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_END) != -1)) {
        return;
      }
      if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_END) != -1) {
        text=handleOutputBuffer(GroovycRunner.TO_RECOMPILE_START,GroovycRunner.TO_RECOMPILE_END);
        myContext.getProgressIndicator().setText(text);
        toRecompileFiles.add(new File(text));
      }
    }
 else     if (outputBuffer.indexOf(GroovycRunner.MESSAGES_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.MESSAGES_END) != -1)) {
        return;
      }
      text=handleOutputBuffer(GroovycRunner.MESSAGES_START,GroovycRunner.MESSAGES_END);
      String category;
      String message;
      String url;
      String linenum;
      String colomnnum;
      List<String> tokens=StringUtil.split(text,GroovycRunner.SEPARATOR);
      LOG.assertTrue(tokens.size() > 4,"Wrong number of output params");
      category=tokens.get(0);
      message=tokens.get(1);
      url=tokens.get(2);
      linenum=tokens.get(3);
      colomnnum=tokens.get(4);
      int linenumInt;
      int colomnnumInt;
      try {
        linenumInt=Integer.parseInt(linenum);
        colomnnumInt=Integer.parseInt(colomnnum);
      }
 catch (      NumberFormatException e) {
        LOG.error(e);
        linenumInt=0;
        colomnnumInt=0;
      }
      myContext.getProgressIndicator().setText(url);
      compilerMessages.add(new CompilerMessage(category,message,url,linenumInt,colomnnumInt));
    }
 else {
      if (error)       unparsedOutput.append(outputBuffer).append("\n");
      outputBuffer.setLength(0);
    }
  }
}
