{
  InputStream inputStream;
  ObjectInput objectInput=null;
  TranslatingCompiler.ExitStatus exitStatus=null;
  text=text.trim();
  if (text != null && !"".equals(text)) {
    outputBuffer.append(text);
    if (outputBuffer.indexOf(GroovycRunner.COMPILED_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.COMPILED_END) != -1)) {
        return;
      }
{
        text=handleOutputBuffer(GroovycRunner.COMPILED_START,GroovycRunner.COMPILED_END);
        StringTokenizer tokenizer=new StringTokenizer(text,GroovycRunner.SEPARATOR,false);
        String token="";
        String outputPath="";
        String sourceFile="";
        String outputRootDirectory="";
        if (tokenizer.hasMoreTokens()) {
          token=tokenizer.nextToken();
          outputPath=token;
        }
        if (tokenizer.hasMoreTokens()) {
          token=tokenizer.nextToken();
          sourceFile=token;
        }
        if (tokenizer.hasMoreTokens()) {
          token=tokenizer.nextToken();
          outputRootDirectory=token;
        }
        try {
          compiledFilesNames.add(getOutputItem(outputPath,sourceFile,outputRootDirectory));
        }
 catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
 else     if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_END) != -1)) {
        return;
      }
      if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_END) != -1) {
        text=handleOutputBuffer(GroovycRunner.TO_RECOMPILE_START,GroovycRunner.TO_RECOMPILE_END);
        toRecompileFiles.add(new File(text));
      }
    }
 else     if (outputBuffer.indexOf(GroovycRunner.MESSAGES_START) != -1) {
      unparsedOutput.setLength(0);
      if (!(outputBuffer.indexOf(GroovycRunner.MESSAGES_END) != -1)) {
        return;
      }
      text=handleOutputBuffer(GroovycRunner.MESSAGES_START,GroovycRunner.MESSAGES_END);
      String cathegory="";
      String message="";
      String url="";
      String linenum="";
      String colomnnum="";
      String token;
      final StringTokenizer compilerMessageTokenizer=new StringTokenizer(text,GroovycRunner.SEPARATOR,false);
      if (compilerMessageTokenizer.hasMoreTokens()) {
        token=compilerMessageTokenizer.nextToken();
        cathegory=token;
      }
      if (compilerMessageTokenizer.hasMoreTokens()) {
        token=compilerMessageTokenizer.nextToken();
        message=token;
      }
      if (compilerMessageTokenizer.hasMoreTokens()) {
        token=compilerMessageTokenizer.nextToken();
        url=token;
      }
      if (compilerMessageTokenizer.hasMoreTokens()) {
        token=compilerMessageTokenizer.nextToken();
        linenum=token;
      }
      if (compilerMessageTokenizer.hasMoreTokens()) {
        token=compilerMessageTokenizer.nextToken();
        colomnnum=token;
      }
      int linenumInt;
      int colomnnumInt;
      try {
        linenumInt=Integer.parseInt(linenum);
        colomnnumInt=Integer.parseInt(colomnnum);
      }
 catch (      NumberFormatException e) {
        e.printStackTrace();
        linenumInt=0;
        colomnnumInt=0;
      }
      compilerMessages.add(new CompilerMessage(cathegory,message,url,linenumInt,colomnnumInt));
    }
 else {
      if (outputBuffer.indexOf("Exception") != -1)       unparsedOutput.append(outputBuffer);
      outputBuffer.setLength(0);
    }
  }
}
