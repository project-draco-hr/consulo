{
  final StringBuffer classPathBuffer=new StringBuffer();
  final Project project=getProject();
  final Path cp=new Path(project);
  appendPath(cp,getBootclasspath());
  cp.setLocation(getDestdir().getAbsoluteFile());
  appendPath(cp,getClasspath());
  appendPath(cp,getSourcepath());
  appendPath(cp,getSrcdir());
  if (getIncludeantruntime()) {
    cp.addExisting(cp.concatSystemClasspath("last"));
  }
  boolean shouldInclude=getIncludejavaruntime();
  if (!shouldInclude) {
    if (project != null) {
      final String propValue=project.getProperty(PROPERTY_INSTRUMENTATION_INCLUDE_JAVA_RUNTIME);
      shouldInclude=!("false".equalsIgnoreCase(propValue) || "no".equalsIgnoreCase(propValue));
    }
 else {
      shouldInclude=true;
    }
  }
  if (shouldInclude) {
    cp.addJavaRuntime();
  }
  cp.addExtdirs(getExtdirs());
  final String[] pathElements=cp.list();
  for (int i=0; i < pathElements.length; i++) {
    final String pathElement=pathElements[i];
    classPathBuffer.append(File.pathSeparator);
    classPathBuffer.append(pathElement);
  }
  final String classPath=classPathBuffer.toString();
  log("classpath=" + classPath,Project.MSG_VERBOSE);
  try {
    return createInstrumentationClassFinder(classPath);
  }
 catch (  MalformedURLException e) {
    fireError(e.getMessage());
    return null;
  }
}
