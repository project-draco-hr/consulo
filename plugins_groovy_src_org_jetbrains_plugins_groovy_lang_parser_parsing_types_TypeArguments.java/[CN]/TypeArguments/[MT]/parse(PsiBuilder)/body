{
  PsiBuilder.Marker marker=builder.mark();
  if (!ParserUtils.getToken(builder,mLT)) {
    marker.rollbackTo();
    return false;
  }
  ParserUtils.getToken(builder,mNLS);
  if (!TypeArgument.parse(builder)) {
    marker.rollbackTo();
    return false;
  }
  boolean hasComma=ParserUtils.lookAhead(builder,mCOMMA);
  while (ParserUtils.getToken(builder,mCOMMA)) {
    ParserUtils.getToken(builder,mNLS);
    if (!TypeArgument.parse(builder)) {
      builder.error("type.argument.expected");
    }
  }
  PsiBuilder.Marker rb=builder.mark();
  ParserUtils.getToken(builder,mNLS);
  if (ParserUtils.getToken(builder,mGT)) {
    rb.drop();
  }
 else   if (hasComma) {
    rb.rollbackTo();
    builder.error(GroovyBundle.message("gt.expected"));
  }
 else {
    rb.drop();
    marker.rollbackTo();
    return false;
  }
  marker.done(TYPE_ARGUMENTS);
  return true;
}
