{
  myParentDisposable=parentDisposable;
  myEnvironment=applicationEnvironment;
  myProject=new MockProject(myEnvironment.getApplication().getPicoContainer(),myParentDisposable);
  preregisterServices();
  myFileIndexFacade=createFileIndexFacade();
  myMessageBus=new MessageBusImpl();
  PsiModificationTrackerImpl modificationTracker=new PsiModificationTrackerImpl(myProject);
  myProject.registerService(PsiModificationTracker.class,modificationTracker);
  myProject.registerService(FileIndexFacade.class,myFileIndexFacade);
  myProject.registerService(ResolveCache.class,new ResolveCache(myMessageBus));
  registerProjectExtensionPoint(PsiTreeChangePreprocessor.EP_NAME,PsiTreeChangePreprocessor.class);
  myPsiManager=new PsiManagerImpl(myProject,null,null,myFileIndexFacade,myMessageBus,modificationTracker);
  ((FileManagerImpl)myPsiManager.getFileManager()).markInitialized();
  registerProjectComponent(PsiManager.class,myPsiManager);
  myProject.registerService(ResolveScopeManager.class,createResolveScopeManager(myPsiManager));
  myProject.registerService(PsiFileFactory.class,new PsiFileFactoryImpl(myPsiManager));
  myProject.registerService(CachedValuesManager.class,new CachedValuesManagerImpl(myProject,new PsiCachedValuesFactory(myPsiManager)));
  myProject.registerService(PsiDirectoryFactory.class,new PsiDirectoryFactoryImpl(myPsiManager));
  myProject.registerService(ProjectScopeBuilder.class,createProjectScopeBuilder());
  myProject.registerService(DumbService.class,new MockDumbService(myProject));
}
