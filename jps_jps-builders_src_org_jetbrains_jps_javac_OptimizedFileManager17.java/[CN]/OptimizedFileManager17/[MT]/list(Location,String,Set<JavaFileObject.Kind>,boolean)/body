{
  Iterable<? extends File> locationRoots=getLocation(location);
  if (locationRoots == null) {
    return List.nil();
  }
  RelativePath.RelativeDirectory subdirectory=new RelativePath.RelativeDirectory(packageName.replace('.','/'));
  ListBuffer<JavaFileObject> results=new ListBuffer<JavaFileObject>();
  for (  File root : locationRoots) {
    Archive archive=myArchives.get(root);
    final boolean isFile;
    if (archive != null) {
      isFile=true;
    }
 else {
      isFile=isFile(root);
    }
    if (isFile) {
      try {
        if (archive == null) {
          archive=openArchive(root);
        }
        listArchive(archive,subdirectory,kinds,recurse,results);
      }
 catch (      IOException ex) {
        log.error("error.reading.file",root,getMessage(ex));
      }
    }
 else {
      final File dir=subdirectory.getFile(root);
      if (recurse) {
        listDirectoryRecursively(dir,kinds,results,true,!location.isOutputLocation());
      }
 else {
        listDirectory(dir,kinds,results,!location.isOutputLocation());
      }
    }
  }
  return results.toList();
}
