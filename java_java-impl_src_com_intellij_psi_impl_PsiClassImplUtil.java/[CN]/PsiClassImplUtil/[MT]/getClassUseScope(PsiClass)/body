{
  final GlobalSearchScope maximalUseScope=((PsiManagerEx)aClass.getManager()).getFileManager().getUseScope(aClass);
  if (aClass instanceof PsiAnonymousClass) {
    return new LocalSearchScope(aClass);
  }
  PsiFile file=aClass.getContainingFile();
  if (JspPsiUtil.isInJspFile(file))   return maximalUseScope;
  final PsiClass containingClass=aClass.getContainingClass();
  if (aClass.hasModifierProperty(PsiModifier.PUBLIC)) {
    return containingClass != null ? containingClass.getUseScope() : maximalUseScope;
  }
 else   if (aClass.hasModifierProperty(PsiModifier.PROTECTED)) {
    return containingClass != null ? containingClass.getUseScope() : maximalUseScope;
  }
 else   if (aClass.hasModifierProperty(PsiModifier.PRIVATE) || aClass instanceof PsiTypeParameter) {
    PsiClass topClass=PsiUtil.getTopLevelClass(aClass);
    return new LocalSearchScope(topClass == null ? aClass.getContainingFile() : topClass);
  }
 else {
    PsiPackage aPackage=null;
    if (file instanceof PsiJavaFile) {
      aPackage=JavaPsiFacade.getInstance(aClass.getProject()).findPackage(((PsiJavaFile)file).getPackageName());
    }
    if (aPackage == null) {
      PsiDirectory dir=file.getContainingDirectory();
      if (dir != null) {
        aPackage=JavaDirectoryService.getInstance().getPackage(dir);
      }
    }
    if (aPackage != null) {
      SearchScope scope=PackageScope.packageScope(aPackage,false);
      scope=scope.intersectWith(maximalUseScope);
      return scope;
    }
    return new LocalSearchScope(file);
  }
}
