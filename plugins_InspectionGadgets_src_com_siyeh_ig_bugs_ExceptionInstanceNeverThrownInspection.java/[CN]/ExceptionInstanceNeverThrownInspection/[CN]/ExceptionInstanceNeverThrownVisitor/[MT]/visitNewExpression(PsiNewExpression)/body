{
  super.visitNewExpression(expression);
  final PsiJavaCodeReferenceElement referenceElement=expression.getClassOrAnonymousClassReference();
  if (referenceElement == null) {
    return;
  }
  final PsiElement element=referenceElement.resolve();
  if (!(element instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)element;
  if (!ClassUtils.isSubclass(aClass,"java.lang.Throwable")) {
    return;
  }
  final PsiThrowStatement throwStatement=PsiTreeUtil.getParentOfType(expression,PsiThrowStatement.class);
  if (throwStatement != null) {
    return;
  }
  final PsiAssignmentExpression assignmentExpression=PsiTreeUtil.getParentOfType(expression,PsiAssignmentExpression.class);
  if (assignmentExpression == null) {
    return;
  }
  final PsiExpression rhs=assignmentExpression.getRExpression();
  if (!PsiTreeUtil.isAncestor(rhs,expression,false)) {
    return;
  }
  final PsiExpression lhs=assignmentExpression.getLExpression();
  if (!(lhs instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiLocalVariable)) {
    return;
  }
  final Query<PsiReference> query=ReferencesSearch.search(target,target.getUseScope());
  for (  PsiReference reference : query) {
    final PsiElement usage=reference.getElement();
    if (PsiTreeUtil.getParentOfType(usage,PsiThrowStatement.class) != null) {
      return;
    }
  }
  registerError(expression);
}
