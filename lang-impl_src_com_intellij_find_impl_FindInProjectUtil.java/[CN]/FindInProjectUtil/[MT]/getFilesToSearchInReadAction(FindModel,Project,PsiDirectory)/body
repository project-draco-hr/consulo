{
  String moduleName=findModel.getModuleName();
  Module module=moduleName == null ? null : ModuleManager.getInstance(project).findModuleByName(moduleName);
  final FileIndex fileIndex=module == null ? ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(module).getFileIndex();
  if (psiDirectory == null || findModel.isWithSubdirectories() && fileIndex.isInContent(psiDirectory.getVirtualFile())) {
    final Pattern fileMaskRegExp=createFileMaskRegExp(findModel);
    Collection<PsiFile> filesForFastWordSearch=null;
    if (canOptimizeForFastWordSearch(findModel)) {
      filesForFastWordSearch=getFilesForFastWordSearch(findModel,project,psiDirectory,fileMaskRegExp,module);
      if (filesForFastWordSearch != null)       return filesForFastWordSearch;
    }
class EnumContentIterator implements ContentIterator {
      final List<PsiFile> myFiles=new ArrayList<PsiFile>(filesForFastWordSearch == null ? Collections.<PsiFile>emptyList() : filesForFastWordSearch);
      final PsiManager psiManager=PsiManager.getInstance(project);
      public boolean processFile(      VirtualFile virtualFile){
        if (!virtualFile.isDirectory() && (fileMaskRegExp == null || fileMaskRegExp.matcher(virtualFile.getName()).matches())) {
          final PsiFile psiFile=psiManager.findFile(virtualFile);
          if (psiFile != null && (filesForFastWordSearch == null || !filesForFastWordSearch.contains(psiFile))) {
            myFiles.add(psiFile);
          }
        }
        return true;
      }
      private Collection<PsiFile> getFiles(){
        return myFiles;
      }
    }
    final EnumContentIterator iterator=new EnumContentIterator();
    if (psiDirectory == null) {
      boolean success=fileIndex.iterateContent(iterator);
      SearchScope customScope=findModel.getCustomScope();
      if (success && customScope instanceof GlobalSearchScope && ((GlobalSearchScope)customScope).isSearchInLibraries()) {
        final Collection<VirtualFile> librarySources=new THashSet<VirtualFile>();
        Module[] modules=module == null ? ModuleManager.getInstance(project).getModules() : new Module[]{module};
        for (        Module mod : modules) {
          ModuleRootManager.getInstance(mod).processOrder(new RootPolicy<Object>(){
            public Object visitLibraryOrderEntry(            final LibraryOrderEntry libraryOrderEntry,            final Object value){
              VirtualFile[] sources=libraryOrderEntry.getFiles(OrderRootType.SOURCES);
              librarySources.addAll(Arrays.asList(sources));
              return null;
            }
            public Object visitJdkOrderEntry(            final JdkOrderEntry jdkOrderEntry,            final Object value){
              VirtualFile[] sources=jdkOrderEntry.getFiles(OrderRootType.SOURCES);
              librarySources.addAll(Arrays.asList(sources));
              return null;
            }
          }
,null);
        }
        iterateAll(librarySources,(GlobalSearchScope)customScope,iterator);
      }
    }
 else {
      fileIndex.iterateContentUnderDirectory(psiDirectory.getVirtualFile(),iterator);
    }
    return iterator.getFiles();
  }
 else {
    Collection<PsiFile> fileList=new THashSet<PsiFile>();
    addFilesUnderDirectory(psiDirectory,fileList,findModel.isWithSubdirectories(),createFileMaskRegExp(findModel));
    return fileList;
  }
}
