{
  final SmartPsiElementPointer classPointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(aClass);
  final SmartPsiElementPointer interfacePointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(aSuperClass);
  final PsiElement classElement=classPointer.getElement();
  final PsiElement interfaceElement=interfacePointer.getElement();
  if (classElement instanceof PsiClass && classElement.isValid() && interfaceElement instanceof PsiClass&& interfaceElement.isValid()) {
    final PsiClass superClass=(PsiClass)interfaceElement;
    String superClassName=superClass.getName();
    String className=((PsiClass)classElement).getName();
    String createdString=superClass.isInterface() ? RefactoringBundle.message("interface.has.been.successfully.created",superClassName) : RefactoringBundle.message("class.has.been.successfully.created",superClassName);
    String message=createdString + "\n" + RefactoringBundle.message("use.super.references.prompt",ApplicationNamesInfo.getInstance().getProductName(),className,superClassName);
    YesNoPreviewUsagesDialog dialog=new YesNoPreviewUsagesDialog(RefactoringBundle.message("analyze.and.replace.usages"),message,JavaRefactoringSettings.getInstance().EXTRACT_INTERFACE_PREVIEW_USAGES,null,project);
    dialog.show();
    if (dialog.isOK()) {
      final boolean isPreviewUsages=dialog.isPreviewUsages();
      JavaRefactoringSettings.getInstance().EXTRACT_INTERFACE_PREVIEW_USAGES=isPreviewUsages;
      TurnRefsToSuperProcessor processor=new TurnRefsToSuperProcessor(project,(PsiClass)classElement,superClass,true);
      processor.setPreviewUsages(isPreviewUsages);
      processor.run();
    }
  }
}
