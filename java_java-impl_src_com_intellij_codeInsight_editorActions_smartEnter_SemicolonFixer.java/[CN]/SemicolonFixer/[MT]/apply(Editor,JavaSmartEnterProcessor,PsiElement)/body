{
  if (psiElement instanceof PsiReturnStatement) {
    PsiMethod method=PsiTreeUtil.getParentOfType(psiElement,PsiMethod.class);
    if (method != null && PsiType.VOID.equals(method.getReturnType())) {
      PsiReturnStatement stmt=(PsiReturnStatement)psiElement;
      if (stmt.getReturnValue() != null) {
        Document doc=editor.getDocument();
        doc.insertString(stmt.getTextRange().getStartOffset() + "return".length(),";");
        return;
      }
    }
  }
  if (psiElement instanceof PsiExpressionStatement || psiElement instanceof PsiDeclarationStatement || psiElement instanceof PsiImportStatementBase|| psiElement instanceof PsiDoWhileStatement|| psiElement instanceof PsiReturnStatement|| psiElement instanceof PsiThrowStatement|| psiElement instanceof PsiBreakStatement|| psiElement instanceof PsiContinueStatement|| psiElement instanceof PsiAssertStatement|| psiElement instanceof PsiField && !(psiElement instanceof PsiEnumConstant) || psiElement instanceof PsiMethod && (((PsiMethod)psiElement).getContainingClass().isInterface() || ((PsiMethod)psiElement).hasModifierProperty(PsiModifier.ABSTRACT))) {
    String text=psiElement.getText();
    int tailLength=0;
    ASTNode leaf=TreeUtil.findLastLeaf(psiElement.getNode());
    while (leaf != null && ElementType.JAVA_COMMENT_OR_WHITESPACE_BIT_SET.contains(leaf.getElementType())) {
      tailLength+=leaf.getTextLength();
      leaf=TreeUtil.prevLeaf(leaf);
    }
    if (tailLength > 0) {
      text=text.substring(0,text.length() - tailLength);
    }
    if (leaf == null) {
      return;
    }
    int insertionOffset=leaf.getTextRange().getEndOffset();
    Document doc=editor.getDocument();
    if (psiElement instanceof PsiField && ((PsiField)psiElement).hasModifierProperty(PsiModifier.ABSTRACT)) {
      doc.insertString(insertionOffset,"()");
      insertionOffset+="()".length();
    }
    if (!StringUtil.endsWithChar(text,';')) {
      final PsiElement parent=psiElement.getParent();
      String toInsert=";";
      if (parent instanceof PsiForStatement) {
        if (((PsiForStatement)parent).getUpdate() == psiElement) {
          return;
        }
 else {
          final Project project=editor.getProject();
          if (project != null && CodeStyleSettingsManager.getSettings(project).SPACE_AFTER_SEMICOLON) {
            toInsert+=" ";
          }
        }
      }
      doc.insertString(insertionOffset,toInsert);
    }
  }
}
