{
  final LinkedHashSet<PsiDirectory> targetDirectories=new LinkedHashSet<PsiDirectory>();
  final HashMap<PsiDirectory,String> pathsToCreate=new HashMap<PsiDirectory,String>();
  MoveClassesOrPackagesUtil.buildDirectoryList(new PackageWrapper(PsiManager.getInstance(project),getTargetPackage()),sourceRoots,targetDirectories,pathsToCreate);
  if (!forceIncludeAll && targetDirectories.size() > pathsToCreate.size()) {
    targetDirectories.removeAll(pathsToCreate.keySet());
  }
  final ArrayList<DirectoryChooser.ItemWrapper> items=new ArrayList<DirectoryChooser.ItemWrapper>();
  DirectoryChooser.ItemWrapper initial=null;
  for (  PsiDirectory targetDirectory : targetDirectories) {
    DirectoryChooser.ItemWrapper itemWrapper=new DirectoryChooser.ItemWrapper(targetDirectory,pathsToCreate.get(targetDirectory));
    items.add(itemWrapper);
    if (fileIndex.getSourceRootForFile(targetDirectory.getVirtualFile()) == initialTargetDirectorySourceRoot) {
      initial=itemWrapper;
    }
  }
  if (initialTargetDirectorySourceRoot == null) {
    items.add(null);
  }
  final DirectoryChooser.ItemWrapper selection=initial != null || items.contains(null) || items.isEmpty() ? initial : items.get(0);
  final ComboBoxModel model=comboBox.getModel();
  if (model instanceof CollectionComboBoxModel) {
    boolean sameModel=model.getSize() == items.size();
    if (sameModel) {
      for (int i=0; i < items.size(); i++) {
        final DirectoryChooser.ItemWrapper oldItem=(DirectoryChooser.ItemWrapper)model.getElementAt(i);
        final DirectoryChooser.ItemWrapper itemWrapper=items.get(i);
        if (!areItemsEquivalent(oldItem,itemWrapper)) {
          sameModel=false;
          break;
        }
      }
    }
    if (sameModel) {
      if (areItemsEquivalent((DirectoryChooser.ItemWrapper)comboBox.getSelectedItem(),selection)) {
        return;
      }
    }
  }
  updateErrorMessage(updateErrorMessage,fileIndex,selection);
  Collections.sort(items,new Comparator<DirectoryChooser.ItemWrapper>(){
    @Override public int compare(    DirectoryChooser.ItemWrapper o1,    DirectoryChooser.ItemWrapper o2){
      if (o1 == null)       return -1;
      if (o2 == null)       return 1;
      return getPresentableText(o1,project).compareToIgnoreCase(getPresentableText(o2,project));
    }
  }
);
  comboBox.setModel(new CollectionComboBoxModel(items,selection));
}
