{
  final PsiManager psiManager=PsiManager.getInstance(project);
  final List<VirtualFile> roots=new ArrayList<VirtualFile>();
  final List<VirtualFile> sourceRoots=new ArrayList<VirtualFile>();
  if (module == null) {
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);
    roots.addAll(Arrays.asList(projectRootManager.getContentRoots()));
    sourceRoots.addAll(Arrays.asList(projectRootManager.getContentSourceRoots()));
  }
 else {
    ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    roots.addAll(Arrays.asList(moduleRootManager.getContentRoots()));
    sourceRoots.addAll(Arrays.asList(moduleRootManager.getSourceRoots()));
  }
  final Set<PsiPackage> topLevelPackages=new HashSet<PsiPackage>();
  for (  final VirtualFile root : sourceRoots) {
    final PsiDirectory directory=psiManager.findDirectory(root);
    if (directory == null) {
      continue;
    }
    final PsiPackage directoryPackage=directory.getPackage();
    if (directoryPackage == null || PackageUtil.isPackageDefault(directoryPackage)) {
      final PsiDirectory[] subdirectories=directory.getSubdirectories();
      for (      PsiDirectory subdirectory : subdirectories) {
        final PsiPackage aPackage=subdirectory.getPackage();
        if (aPackage != null && !PackageUtil.isPackageDefault(aPackage)) {
          topLevelPackages.add(aPackage);
        }
 else {
          final Iterator<PsiFile> files=builder.getFiles(subdirectory);
          if (!files.hasNext())           continue;
          TodoDirNode dirNode=new TodoDirNode(project,subdirectory,builder);
          if (!children.contains(dirNode)) {
            children.add(dirNode);
          }
        }
      }
      final Iterator<PsiFile> filesUnderDirectory=builder.getFilesUnderDirectory(directory);
      for (; filesUnderDirectory.hasNext(); ) {
        final PsiFile file=filesUnderDirectory.next();
        TodoFileNode todoFileNode=new TodoFileNode(project,file,builder,false);
        if (!children.contains(todoFileNode)) {
          children.add(todoFileNode);
        }
      }
    }
 else {
      PackageElement element=new PackageElement(module,directoryPackage,false);
      TodoPackageNode packageNode=new TodoPackageNode(project,element,builder,directoryPackage.getQualifiedName());
      if (!children.contains(packageNode)) {
        children.add(packageNode);
      }
    }
  }
  GlobalSearchScope scope=module != null ? GlobalSearchScope.moduleScope(module) : GlobalSearchScope.projectScope(project);
  ArrayList<PsiPackage> packages=new ArrayList<PsiPackage>();
  for (  PsiPackage psiPackage : topLevelPackages) {
    final PsiPackage aPackage=findNonEmptyPackage(psiPackage,module,project,builder,scope);
    if (aPackage != null) {
      packages.add(aPackage);
    }
  }
  for (  PsiPackage psiPackage : packages) {
    PackageElement element=new PackageElement(module,psiPackage,false);
    TodoPackageNode packageNode=new TodoPackageNode(project,element,builder,psiPackage.getQualifiedName());
    if (!children.contains(packageNode)) {
      children.add(packageNode);
    }
  }
  roots.removeAll(sourceRoots);
  for (  VirtualFile dir : roots) {
    final PsiDirectory directory=psiManager.findDirectory(dir);
    if (directory == null) {
      continue;
    }
    final Iterator<PsiFile> files=builder.getFiles(directory);
    if (!files.hasNext())     continue;
    TodoDirNode dirNode=new TodoDirNode(project,directory,builder);
    if (!children.contains(dirNode)) {
      children.add(dirNode);
    }
  }
}
