{
  if (!isPackageEmpty(new PackageElement(module,psiPackage,false),builder,project)) {
    return psiPackage;
  }
  final PsiPackage[] subPackages=psiPackage.getSubPackages(scope);
  ArrayList<PsiPackage> nonEmptyPackages=new ArrayList<PsiPackage>();
  for (  PsiPackage aPackage : subPackages) {
    if (!isPackageEmpty(new PackageElement(module,aPackage,false),builder,project)) {
      nonEmptyPackages.add(aPackage);
    }
  }
  if (nonEmptyPackages.size() > 1) {
    return psiPackage;
  }
 else {
    int count=nonEmptyPackages.size();
    PsiPackage pack=count > 0 ? nonEmptyPackages.get(0) : null;
    for (    PsiPackage aPackage : subPackages) {
      if (!nonEmptyPackages.contains(aPackage)) {
        PsiPackage pack1=findNonEmptyPackages(aPackage,module,project,builder,scope,packages);
        if (pack1 != null) {
          if (count > 0) {
            return psiPackage;
          }
 else {
            count++;
            pack=pack1;
          }
        }
      }
    }
    return pack;
  }
}
