{
  super(name);
  int testClassCount=0;
  final Set allNames=new HashSet(Arrays.asList(classMethodNames));
  for (int i=0; i < classMethodNames.length; i++) {
    String classMethodName=classMethodNames[i];
    Test suite=TestRunnerUtil.createClassOrMethodSuite(runner,classMethodName);
    if (suite != null) {
      skipSuiteComponents(allNames,suite);
    }
  }
  for (int i=0; i < classMethodNames.length; i++) {
    String classMethodName=classMethodNames[i];
    Test suite=TestRunnerUtil.createClassOrMethodSuite(runner,classMethodName);
    if (suite != null) {
      boolean skip;
      if (suite instanceof TestSuite) {
        skip=!allNames.contains(((TestSuite)suite).getName());
      }
 else       if (suite instanceof TestRunnerUtil.SuiteMethodWrapper) {
        skip=!allNames.contains(((TestRunnerUtil.SuiteMethodWrapper)suite).getClassName());
      }
 else {
        skip=false;
      }
      if (!skip) {
        if (suite instanceof TestSuite && ((TestSuite)suite).getName() == null) {
          attachSuiteInfo(suite,classMethodName);
        }
        addTest(suite);
        testClassCount++;
      }
    }
  }
  String message=TestRunnerUtil.testsFoundInPackageMesage(testClassCount,name);
  System.out.println(message);
}
