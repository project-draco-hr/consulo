{
  final Set<PsiType> exceptionsHandled=getExceptionTypesHandled(statement);
  final PsiResourceList resourceList=statement.getResourceList();
  if (resourceList != null) {
    final List<PsiResourceVariable> resourceVariables=resourceList.getResourceVariables();
    for (    PsiResourceVariable resourceVariable : resourceVariables) {
      final Set<PsiClassType> resourceExceptions=calculateExceptionsThrown(resourceVariable);
      final PsiType type=resourceVariable.getType();
      if (type instanceof PsiClassType) {
        final PsiClassType classType=(PsiClassType)type;
        collectExceptionsThrown(findAutoCloseableCloseMethod(classType.resolve()),resourceExceptions);
      }
      for (      PsiClassType resourceException : resourceExceptions) {
        if (!isExceptionHandled(exceptionsHandled,resourceException)) {
          m_exceptionsThrown.add(resourceException);
        }
      }
    }
  }
  final PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock != null) {
    final Set<PsiClassType> tryExceptions=calculateExceptionsThrown(tryBlock);
    for (    PsiClassType tryException : tryExceptions) {
      if (!isExceptionHandled(exceptionsHandled,tryException)) {
        m_exceptionsThrown.add(tryException);
      }
    }
  }
  final PsiCodeBlock finallyBlock=statement.getFinallyBlock();
  if (finallyBlock != null) {
    final Set<PsiClassType> finallyExceptions=calculateExceptionsThrown(finallyBlock);
    m_exceptionsThrown.addAll(finallyExceptions);
  }
  final PsiCodeBlock[] catchBlocks=statement.getCatchBlocks();
  for (  PsiCodeBlock catchBlock : catchBlocks) {
    final Set<PsiClassType> catchExceptions=calculateExceptionsThrown(catchBlock);
    m_exceptionsThrown.addAll(catchExceptions);
  }
}
