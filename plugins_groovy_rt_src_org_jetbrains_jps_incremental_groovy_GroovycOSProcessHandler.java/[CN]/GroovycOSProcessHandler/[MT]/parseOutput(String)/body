{
  final String trimmed=text.trim();
  if (trimmed.startsWith(GroovycRunner.PRESENTABLE_MESSAGE)) {
    updateStatus(trimmed.substring(GroovycRunner.PRESENTABLE_MESSAGE.length()));
    return;
  }
  if (GroovycRunner.CLEAR_PRESENTABLE.equals(trimmed)) {
    updateStatus(null);
    return;
  }
  if (StringUtil.isNotEmpty(text)) {
    outputBuffer.append(text);
    if (outputBuffer.indexOf(GroovycRunner.COMPILED_START) != -1) {
      if (outputBuffer.indexOf(GroovycRunner.COMPILED_END) == -1) {
        return;
      }
      final String compiled=handleOutputBuffer(GroovycRunner.COMPILED_START,GroovycRunner.COMPILED_END);
      final List<String> list=StringUtil.split(compiled,GroovycRunner.SEPARATOR);
      String outputPath=list.get(0);
      String sourceFile=list.get(1);
      ContainerUtil.addIfNotNull(getOutputItem(outputPath,sourceFile),myCompiledItems);
    }
 else     if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_START) != -1) {
      if (outputBuffer.indexOf(GroovycRunner.TO_RECOMPILE_END) != -1) {
        String url=handleOutputBuffer(GroovycRunner.TO_RECOMPILE_START,GroovycRunner.TO_RECOMPILE_END);
        toRecompileFiles.add(new File(url));
      }
    }
 else     if (outputBuffer.indexOf(GroovycRunner.MESSAGES_START) != -1) {
      if (!(outputBuffer.indexOf(GroovycRunner.MESSAGES_END) != -1)) {
        return;
      }
      text=handleOutputBuffer(GroovycRunner.MESSAGES_START,GroovycRunner.MESSAGES_END);
      List<String> tokens=StringUtil.split(text,GroovycRunner.SEPARATOR);
      LOG.assertTrue(tokens.size() > 4,"Wrong number of output params");
      String category=tokens.get(0);
      String message=tokens.get(1);
      String url=tokens.get(2);
      String lineNum=tokens.get(3);
      String columnNum=tokens.get(4);
      int lineInt;
      int columnInt;
      try {
        lineInt=Integer.parseInt(lineNum);
        columnInt=Integer.parseInt(columnNum);
      }
 catch (      NumberFormatException e) {
        LOG.error(e);
        lineInt=0;
        columnInt=0;
      }
      BuildMessage.Kind kind=category.equals(org.jetbrains.groovy.compiler.rt.CompilerMessage.ERROR) ? BuildMessage.Kind.ERROR : category.equals(org.jetbrains.groovy.compiler.rt.CompilerMessage.WARNING) ? BuildMessage.Kind.WARNING : BuildMessage.Kind.INFO;
      compilerMessages.add(new CompilerMessage("Groovyc",kind,message,url,-1,-1,-1,lineInt,columnInt));
    }
  }
}
