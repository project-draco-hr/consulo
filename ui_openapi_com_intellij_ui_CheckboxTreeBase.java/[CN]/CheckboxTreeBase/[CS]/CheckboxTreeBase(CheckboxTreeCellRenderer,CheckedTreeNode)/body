{
  setCellRenderer(cellRenderer);
  setRootVisible(false);
  setShowsRootHandles(true);
  setLineStyleAngled();
  TreeUtil.installActions(this);
  addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      int row=getRowForLocation(e.getX(),e.getY());
      if (row >= 0) {
        Rectangle rowBounds=getRowBounds(row);
        cellRenderer.setBounds(rowBounds);
        Rectangle checkBounds=cellRenderer.myCheckbox.getBounds();
        checkBounds.setLocation(rowBounds.getLocation());
        if (checkBounds.contains(e.getPoint())) {
          final CheckedTreeNode node=(CheckedTreeNode)getPathForRow(row).getLastPathComponent();
          if (node.isEnabled()) {
            toggleNode(node);
            setSelectionRow(row);
          }
          e.consume();
        }
      }
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (isToggleEvent(e)) {
        TreePath treePath=getLeadSelectionPath();
        CheckedTreeNode firstNode=(CheckedTreeNode)treePath.getLastPathComponent();
        boolean checked=toggleNode(firstNode);
        TreePath[] selectionPaths=getSelectionPaths();
        for (int i=0; selectionPaths != null && i < selectionPaths.length; i++) {
          final TreePath selectionPath=selectionPaths[i];
          CheckedTreeNode node=(CheckedTreeNode)selectionPath.getLastPathComponent();
          checkNode(node,checked);
        }
        e.consume();
      }
    }
  }
);
  setSelectionRow(0);
  setModel(new DefaultTreeModel(root));
  customize();
}
