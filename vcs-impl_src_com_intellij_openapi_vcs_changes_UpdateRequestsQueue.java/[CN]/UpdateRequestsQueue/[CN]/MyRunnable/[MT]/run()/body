{
  boolean updateUnversioned;
  final List<Runnable> copy=new ArrayList<Runnable>(myWaitingUpdateCompletionQueue.size());
synchronized (myLock) {
    myTask=null;
    if ((!myStopped) && ((!myStarted) || myPlVcsManager.isBackgroundVcsOperationRunning())) {
      LOG.debug("MyRunnable: not started, not stopped, reschedule, project: " + myProject.getName() + ", runnable: "+ hashCode());
      schedule(myUpdateUnversionedRequested);
      return;
    }
    if (myStopped) {
      LOG.debug("MyRunnable: STOPPED, project: " + myProject.getName() + ", runnable: "+ hashCode());
      return;
    }
    copy.addAll(myWaitingUpdateCompletionQueue);
    updateUnversioned=myUpdateUnversionedRequested;
    myUpdateUnversionedRequested=false;
  }
  try {
    LOG.debug("MyRunnable: INVOKE, project: " + myProject.getName() + ", runnable: "+ hashCode());
    myAction.consume(updateUnversioned);
    LOG.debug("MyRunnable: invokeD, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
  finally {
synchronized (myLock) {
      LOG.debug("MyRunnable: delete executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
      if (!copy.isEmpty()) {
        myWaitingUpdateCompletionQueue.removeAll(copy);
      }
    }
    for (    Runnable runnable : copy) {
      runnable.run();
    }
    LOG.debug("MyRunnable: Runnables executed, project: " + myProject.getName() + ", runnable: "+ hashCode());
  }
}
