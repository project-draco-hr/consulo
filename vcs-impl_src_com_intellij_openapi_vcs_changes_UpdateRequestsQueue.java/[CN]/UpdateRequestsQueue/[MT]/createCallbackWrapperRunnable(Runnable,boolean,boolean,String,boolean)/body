{
  if (silently) {
    return new CallbackData(new Runnable(){
      public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            LOG.debug("invokeAfterUpdate: silent wrapper called for project: " + myProject.getName());
            if (myProject.isDisposed())             return;
            afterUpdate.run();
            ChangesViewManager.getInstance(myProject).refreshView();
          }
        }
);
      }
    }
,null);
  }
 else {
    if (synchronously) {
      final Waiter waiter=new Waiter(myProject,afterUpdate);
      return new CallbackData(new Runnable(){
        public void run(){
          LOG.debug("invokeAfterUpdate: NOT silent SYNCHRONOUS wrapper called for project: " + myProject.getName());
          waiter.done();
        }
      }
,new Runnable(){
        public void run(){
          ProgressManager.getInstance().runProcessWithProgressSynchronously(waiter,VcsBundle.message("change.list.manager.wait.lists.synchronization",title),false,myProject);
        }
      }
);
    }
 else {
      final FictiveBackgroundable fictiveBackgroundable=new FictiveBackgroundable(myProject,afterUpdate,cancellable,title);
      return new CallbackData(new Runnable(){
        public void run(){
          LOG.debug("invokeAfterUpdate: NOT silent wrapper called for project: " + myProject.getName());
          fictiveBackgroundable.done();
        }
      }
,new Runnable(){
        public void run(){
          ProgressManager.getInstance().run(fictiveBackgroundable);
        }
      }
);
    }
  }
}
