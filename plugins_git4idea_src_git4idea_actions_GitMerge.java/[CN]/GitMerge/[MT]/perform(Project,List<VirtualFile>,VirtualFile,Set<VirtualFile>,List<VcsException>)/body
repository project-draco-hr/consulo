{
  GitVcs vcs=GitVcs.getInstance(project);
  if (vcs == null) {
    return;
  }
  GitMergeDialog dialog=new GitMergeDialog(project,gitRoots,defaultRoot);
  try {
    dialog.updateBranches();
  }
 catch (  VcsException e) {
    if (vcs.getExecutableValidator().checkExecutableAndShowMessageIfNeeded(null)) {
      vcs.showErrors(Collections.singletonList(e),GitBundle.getString("merge.retrieving.branches"));
    }
    return;
  }
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  Label beforeLabel=LocalHistory.getInstance().putSystemLabel(project,"Before update");
  GitLineHandler h=dialog.handler();
  final VirtualFile root=dialog.getSelectedRoot();
  affectedRoots.add(root);
  GitRevisionNumber currentRev=GitRevisionNumber.resolve(project,root,"HEAD");
  try {
    GitHandlerUtil.doSynchronously(h,GitBundle.message("merging.title",dialog.getSelectedRoot().getPath()),h.printableCommandLine());
  }
  finally {
    exceptions.addAll(h.errors());
    GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
    manager.updateRepository(root);
  }
  if (exceptions.size() != 0) {
    return;
  }
  GitMergeUtil.showUpdates(this,project,exceptions,root,currentRev,beforeLabel,getActionName(),ActionInfo.INTEGRATE);
}
