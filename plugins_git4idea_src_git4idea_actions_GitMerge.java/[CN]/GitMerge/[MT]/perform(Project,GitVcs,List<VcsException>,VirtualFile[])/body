{
  saveAll();
  final VirtualFile[] roots=ProjectLevelVcsManager.getInstance(project).getRootsUnderVcs(vcs);
  List<GitBranch> branches;
  for (  VirtualFile root : roots) {
    GitCommand command=new GitCommand(project,vcs.getSettings(),root);
    String currBranch=command.currentBranch();
    branches=command.branchList();
    String[] branchesList=new String[branches.size()];
    GitBranch selectedBranch=null;
    int i=0;
    for (    GitBranch b : branches) {
      branchesList[i++]=b.getName();
      if (!b.isActive() && selectedBranch == null)       selectedBranch=b;
    }
    if (selectedBranch == null)     return;
    int branchNum=Messages.showChooseDialog(GitBundle.message("merge.branch.message",currBranch),GitBundle.getString("merge.branch.title"),branchesList,selectedBranch.getName(),Messages.getQuestionIcon());
    if (branchNum < 0)     return;
    selectedBranch=branches.get(branchNum);
    GitCommandRunnable cmdr=new GitCommandRunnable(project,vcs.getSettings(),root);
    cmdr.setCommand(GitCommand.MERGE_CMD);
    cmdr.setArgs(new String[]{selectedBranch.getName()});
    ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.message("merging.branch",selectedBranch.getName()),false,project);
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"}) VcsException ex=cmdr.getException();
    if (ex != null) {
      GitUtil.showOperationError(project,ex,"git merge");
      return;
    }
  }
}
