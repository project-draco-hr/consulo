{
  node.color=Color.RED;
  node.setParent(null);
  node.setValid(true);
  node.maxEnd=0;
  node.delta=0;
  node.setLeft(null);
  node.setRight(null);
  List<IntervalNode> gced=new ArrayList<IntervalNode>();
  if (root == null) {
    root=node;
  }
 else {
    IntervalNode current=(IntervalNode)root;
    int delta=0;
    loop:     while (true) {
      delta+=current.delta;
      int compResult=compareNodes(node,0,current,delta,gced);
      if (compResult == 0) {
        return (MyNode)current;
      }
      if (compResult < 0) {
        if (current.getLeft() == null) {
          current.setLeft(node);
          break loop;
        }
        current=current.getLeft();
      }
 else {
        if (current.getRight() == null) {
          current.setRight(node);
          break loop;
        }
        current=current.getRight();
      }
    }
    node.delta=-delta;
    node.setParent(current);
  }
  correctMaxUp(node);
  onInsertNode();
  keySize+=((MyNode)node).intervals.size();
  insertCase1(node);
  verifyProperties();
  deleteNodes(gced);
  return (MyNode)node;
}
