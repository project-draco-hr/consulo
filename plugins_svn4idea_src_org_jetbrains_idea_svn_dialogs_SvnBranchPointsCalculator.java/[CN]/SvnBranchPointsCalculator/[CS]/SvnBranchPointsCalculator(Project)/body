{
  final File vcs=new File(PathManager.getSystemPath(),"vcs");
  File file=new File(vcs,"svn_copy_sources");
  file.mkdirs();
  file=new File(file,project.getLocationHash());
  ValueHolder<WrapperInvertor<BranchCopyData>,KeyData> cache=null;
  try {
    myPersistentHolder=new PersistentHolder(file);
    cache=new ValueHolder<WrapperInvertor<BranchCopyData>,KeyData>(){
      public WrapperInvertor<BranchCopyData> getValue(      KeyData dataHolder){
        try {
          return myPersistentHolder.getBestHit(dataHolder.getRepoUrl(),dataHolder.getSourceUrl(),dataHolder.getTargetUrl());
        }
 catch (        IOException e) {
        }
        return null;
      }
      public void setValue(      WrapperInvertor<BranchCopyData> value,      KeyData dataHolder){
        try {
          myPersistentHolder.put(dataHolder.getRepoUrl(),value.isInvertedSense() ? dataHolder.getSourceUrl() : dataHolder.getTargetUrl(),value.getWrapped());
        }
 catch (        IOException e) {
        }
      }
    }
;
  }
 catch (  IOException e) {
    cache=new ValueHolder<WrapperInvertor<BranchCopyData>,KeyData>(){
      public WrapperInvertor<BranchCopyData> getValue(      KeyData dataHolder){
        return null;
      }
      public void setValue(      WrapperInvertor<BranchCopyData> value,      KeyData dataHolder){
      }
    }
;
  }
  myCalculator=new FactsCalculator<KeyData,WrapperInvertor<BranchCopyData>>(project,"Looking for branch origin",cache,new Loader(project));
}
