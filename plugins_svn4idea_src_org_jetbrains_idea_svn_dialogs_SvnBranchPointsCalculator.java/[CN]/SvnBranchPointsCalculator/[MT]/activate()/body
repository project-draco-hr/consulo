{
  ValueHolder<WrapperInvertor<BranchCopyData>,KeyData> cache=null;
  try {
    myPersistentHolder=new PersistentHolder(myFile);
    cache=new ValueHolder<WrapperInvertor<BranchCopyData>,KeyData>(){
      public WrapperInvertor<BranchCopyData> getValue(      KeyData dataHolder){
        try {
          final WrapperInvertor<BranchCopyData> result=myPersistentHolder.getBestHit(dataHolder.getRepoUrl(),dataHolder.getSourceUrl(),dataHolder.getTargetUrl());
          if (LOG.isDebugEnabled()) {
            LOG.debug("Persistent for: " + dataHolder.toString() + " returned: "+ (result == null ? null : result.toString()));
          }
          return result;
        }
 catch (        IOException e) {
        }
        return null;
      }
      public void setValue(      WrapperInvertor<BranchCopyData> value,      KeyData dataHolder){
        try {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Put into persistent: key: " + dataHolder.toString() + " value: "+ value.toString());
          }
          myPersistentHolder.put(dataHolder.getRepoUrl(),value.getWrapped().getTarget(),value.getWrapped());
        }
 catch (        IOException e) {
        }
      }
    }
;
  }
 catch (  IOException e) {
    cache=new ValueHolder<WrapperInvertor<BranchCopyData>,KeyData>(){
      public WrapperInvertor<BranchCopyData> getValue(      KeyData dataHolder){
        return null;
      }
      public void setValue(      WrapperInvertor<BranchCopyData> value,      KeyData dataHolder){
      }
    }
;
  }
  myCalculator=new FactsCalculator<KeyData,WrapperInvertor<BranchCopyData>>(myProject,"Looking for branch origin",cache,new Loader(myProject));
}
