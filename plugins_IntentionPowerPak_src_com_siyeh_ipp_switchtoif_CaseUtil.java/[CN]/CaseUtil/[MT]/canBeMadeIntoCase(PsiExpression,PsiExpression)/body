{
  PsiExpression expressionToCheck=expression;
  while (expressionToCheck instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expressionToCheck;
    expressionToCheck=parenthesizedExpression.getExpression();
  }
  if (!(expressionToCheck instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expressionToCheck;
  final PsiJavaToken sign=binaryExpression.getOperationSign();
  final IElementType operation=sign.getTokenType();
  final PsiExpression lOperand=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return canBeMadeIntoCase(lOperand,caseExpression) && canBeMadeIntoCase(rhs,caseExpression);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    if (canBeCaseLabel(lOperand) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,rhs)) {
      return true;
    }
 else     if (canBeCaseLabel(rhs) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,lOperand)) {
      return true;
    }
    return false;
  }
 else {
    return false;
  }
}
