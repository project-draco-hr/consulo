{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (stringSwitch) {
    final PsiExpression stringCaseExpression=determinePossibleStringCaseExpression(expression);
    if (EquivalenceChecker.expressionsAreEquivalent(caseExpression,stringCaseExpression)) {
      return true;
    }
  }
  if (!(expression instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
  final PsiJavaToken sign=binaryExpression.getOperationSign();
  final IElementType operation=sign.getTokenType();
  final PsiExpression lOperand=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return canBeMadeIntoCase(lOperand,caseExpression,stringSwitch) && canBeMadeIntoCase(rhs,caseExpression,stringSwitch);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    if (canBeCaseLabel(lOperand) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,rhs)) {
      return true;
    }
 else     if (canBeCaseLabel(rhs) && EquivalenceChecker.expressionsAreEquivalent(caseExpression,lOperand)) {
      return true;
    }
    return false;
  }
 else {
    return false;
  }
}
