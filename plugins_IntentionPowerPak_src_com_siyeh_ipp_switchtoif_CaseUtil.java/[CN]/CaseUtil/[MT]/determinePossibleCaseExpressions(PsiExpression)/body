{
  PsiExpression expressionToCheck=expression;
  while (expressionToCheck instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expressionToCheck;
    expressionToCheck=parenthesizedExpression.getExpression();
  }
  final List<PsiExpression> out=new ArrayList<PsiExpression>(10);
  if (!(expressionToCheck instanceof PsiBinaryExpression)) {
    return out;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expressionToCheck;
  final PsiJavaToken sign=binaryExpression.getOperationSign();
  final IElementType operation=sign.getTokenType();
  final PsiExpression lhs=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return determinePossibleCaseExpressions(lhs);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    if (canBeCaseLabel(lhs)) {
      out.add(rhs);
    }
    if (canBeCaseLabel(rhs)) {
      out.add(lhs);
    }
  }
  return out;
}
