{
  final PsiElement parent=myElement.getParent();
  if (parent instanceof PsiReferenceExpression && ((PsiReferenceExpression)parent).getQualifierExpression() != null)   return;
  final PsiClass collectionsClass=JavaPsiFacade.getInstance(myElement.getProject()).findClass(JAVA_UTIL_COLLECTIONS,myElement.getResolveScope());
  if (collectionsClass == null)   return;
  final PsiElement pparent=parent.getParent();
  if (showAll || pparent instanceof PsiReturnStatement || pparent instanceof PsiConditionalExpression && pparent.getParent() instanceof PsiReturnStatement) {
    addCollectionMethod(JAVA_UTIL_LIST,"emptyList",collectionsClass);
    addCollectionMethod(JAVA_UTIL_SET,"emptySet",collectionsClass);
    addCollectionMethod(JAVA_UTIL_MAP,"emptyMap",collectionsClass);
  }
  if (showAll) {
    addCollectionMethod(JAVA_UTIL_LIST,"singletonList",collectionsClass);
    addCollectionMethod(JAVA_UTIL_SET,"singleton",collectionsClass);
    addCollectionMethod(JAVA_UTIL_MAP,"singletonMap",collectionsClass);
    addCollectionMethod(JAVA_UTIL_COLLECTION,"unmodifiableCollection",collectionsClass);
    addCollectionMethod(JAVA_UTIL_LIST,"unmodifiableList",collectionsClass);
    addCollectionMethod(JAVA_UTIL_SET,"unmodifiableSet",collectionsClass);
    addCollectionMethod(JAVA_UTIL_MAP,"unmodifiableMap",collectionsClass);
    addCollectionMethod("java.util.SortedSet","unmodifiableSortedSet",collectionsClass);
    addCollectionMethod("java.util.SortedMap","unmodifiableSortedMap",collectionsClass);
  }
}
