{
  Map<String,Object> style=state.getStyle();
  Element elem=null;
  if (state.getAbsolutePointCount() > 1) {
    List<mxPoint> pts=state.getAbsolutePoints();
    pts=mxUtils.translatePoints(pts,translate.x,translate.y);
    elem=drawLine(pts,style);
    Element strokeNode=document.createElement("v:stroke");
    String start=mxUtils.getString(style,mxConstants.STYLE_STARTARROW);
    String end=mxUtils.getString(style,mxConstants.STYLE_ENDARROW);
    if (start != null || end != null) {
      if (start != null) {
        strokeNode.setAttribute("startarrow",start);
        String startWidth="medium";
        String startLength="medium";
        double startSize=mxUtils.getFloat(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE) * scale;
        if (startSize < 6) {
          startWidth="narrow";
          startLength="short";
        }
 else         if (startSize > 10) {
          startWidth="wide";
          startLength="long";
        }
        strokeNode.setAttribute("startarrowwidth",startWidth);
        strokeNode.setAttribute("startarrowlength",startLength);
      }
      if (end != null) {
        strokeNode.setAttribute("endarrow",end);
        String endWidth="medium";
        String endLength="medium";
        double endSize=mxUtils.getFloat(style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE) * scale;
        if (endSize < 6) {
          endWidth="narrow";
          endLength="short";
        }
 else         if (endSize > 10) {
          endWidth="wide";
          endLength="long";
        }
        strokeNode.setAttribute("endarrowwidth",endWidth);
        strokeNode.setAttribute("endarrowlength",endLength);
      }
    }
    if (mxUtils.isTrue(style,mxConstants.STYLE_DASHED)) {
      strokeNode.setAttribute("dashstyle","2 2");
    }
    elem.appendChild(strokeNode);
  }
 else {
    int x=(int)state.getX() + translate.x;
    int y=(int)state.getY() + translate.y;
    int w=(int)state.getWidth();
    int h=(int)state.getHeight();
    if (!mxUtils.getString(style,mxConstants.STYLE_SHAPE,"").equals(mxConstants.SHAPE_SWIMLANE)) {
      elem=drawShape(x,y,w,h,style);
      if (mxUtils.isTrue(style,mxConstants.STYLE_DASHED)) {
        Element strokeNode=document.createElement("v:stroke");
        strokeNode.setAttribute("dashstyle","2 2");
        elem.appendChild(strokeNode);
      }
    }
 else {
      int start=(int)Math.round(mxUtils.getInt(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE) * scale);
      Map<String,Object> cloned=new Hashtable<String,Object>(style);
      cloned.remove(mxConstants.STYLE_FILLCOLOR);
      cloned.remove(mxConstants.STYLE_ROUNDED);
      if (mxUtils.isTrue(style,mxConstants.STYLE_HORIZONTAL,true)) {
        elem=drawShape(x,y,w,start,style);
        drawShape(x,y + start,w,h - start,cloned);
      }
 else {
        elem=drawShape(x,y,start,h,style);
        drawShape(x + start,y,w - start,h,cloned);
      }
    }
  }
  return elem;
}
