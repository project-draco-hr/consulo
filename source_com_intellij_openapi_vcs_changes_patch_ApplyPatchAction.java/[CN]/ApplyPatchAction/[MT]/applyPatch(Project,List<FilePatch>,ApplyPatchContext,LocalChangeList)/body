{
  List<VirtualFile> filesToMakeWritable=new ArrayList<VirtualFile>();
  if (!prepareFiles(project,patches,context,filesToMakeWritable)) {
    return ApplyPatchStatus.FAILURE;
  }
  final VirtualFile[] fileArray=filesToMakeWritable.toArray(new VirtualFile[filesToMakeWritable.size()]);
  final ReadonlyStatusHandler.OperationStatus readonlyStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(fileArray);
  if (readonlyStatus.hasReadonlyFiles()) {
    return ApplyPatchStatus.FAILURE;
  }
  final List<FilePath> affectedPaths=new ArrayList<FilePath>();
  final ApplyPatchStatus patchStatus=applyFilePatches(project,patches,context,affectedPaths);
  if (patchStatus != ApplyPatchStatus.FAILURE) {
    moveChangesToList(project,affectedPaths,targetChangeList);
  }
  return patchStatus;
}
