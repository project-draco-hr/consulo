{
  final Project project=e.getData(DataKeys.PROJECT);
  final ApplyPatchDialog dialog=new ApplyPatchDialog(project);
  dialog.show();
  if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final List<FilePatch> patches=dialog.getPatches();
  for (  FilePatch patch : patches) {
    VirtualFile fileToPatch=patch.findFileToPatch(dialog.getBaseDirectory(),dialog.getStripLeadingDirectories());
    if (fileToPatch != null) {
      FileType fileType=fileToPatch.getFileType();
      if (fileType == StdFileTypes.UNKNOWN) {
        fileType=FileTypeChooser.associateFileType(fileToPatch.getPresentableName());
        if (fileType == null) {
          return;
        }
      }
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          ApplyPatchStatus status=null;
          for (          FilePatch patch : patches) {
            final ApplyPatchStatus patchStatus=applySinglePatch(project,patch,dialog.getBaseDirectory(),dialog.getStripLeadingDirectories());
            status=ApplyPatchStatus.and(status,patchStatus);
          }
          if (status == ApplyPatchStatus.ALREADY_APPLIED) {
            Messages.showInfoMessage(project,"All of the changes in the specified patch are already contained in the code","Apply Patch");
          }
 else           if (status == ApplyPatchStatus.PARTIAL) {
            Messages.showInfoMessage(project,"Some of the changes in the specified patch were skipped because are already contained in the code","Apply Patch");
          }
        }
      }
,"apply patch",null);
    }
  }
);
}
