{
  myQueue=new MergingUpdateQueue(getClass().getSimpleName(),1000,true,MergingUpdateQueue.ANY_COMPONENT,myProject);
  MavenProjectsManager m=MavenProjectsManager.getInstance(myProject);
  m.addManagerListener(new MavenProjectsManager.Listener(){
    public void activated(){
      rehighlight(myProject);
    }
    public void projectsScheduled(){
    }
    @Override public void importAndResolveScheduled(){
    }
  }
);
  m.addProjectsTreeListener(new MavenProjectsTree.ListenerAdapter(){
    public void projectsUpdated(    List<Pair<MavenProject,MavenProjectChanges>> updated,    List<MavenProject> deleted){
      for (      Pair<MavenProject,MavenProjectChanges> each : updated) {
        rehighlight(myProject,each.first);
      }
    }
    public void projectResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges,    NativeMavenProjectHolder nativeMavenProject){
      rehighlight(myProject,projectWithChanges.first);
    }
    public void pluginsResolved(    MavenProject project){
      rehighlight(myProject,project);
    }
    public void foldersResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges){
      rehighlight(myProject,projectWithChanges.first);
    }
    public void artifactsDownloaded(    MavenProject project){
      rehighlight(myProject,project);
    }
  }
);
}
