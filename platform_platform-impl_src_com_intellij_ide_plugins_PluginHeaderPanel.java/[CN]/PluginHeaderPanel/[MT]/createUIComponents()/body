{
  myInstallButton=new JButton(){
{
      setOpaque(false);
      setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
    @Override public Dimension getPreferredSize(){
      final FontMetrics metrics=getFontMetrics(getFont());
      final int textWidth=metrics.stringWidth(getText());
      final int width=8 + 16 + 4+ textWidth+ 8;
      final int height=2 + Math.max(16,metrics.getHeight()) + 2;
      return new Dimension(width,height);
    }
    @Override public void paint(    Graphics g2){
      final Graphics2D g=(Graphics2D)g2;
      final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
      final int w=g.getClipBounds().width;
      final int h=g.getClipBounds().height;
      g.setPaint(getBackgroundBorderPaint());
      g.fillRoundRect(0,0,w,h,7,7);
      g.setPaint(getBackgroundPaint());
      g.fillRoundRect(1,1,w - 2,h - 2,6,6);
      g.setColor(getButtonForeground());
      g.drawString(getText(),8 + 16 + 4,getBaseline(w,h));
      getIcon().paintIcon(this,g,8,(getHeight() - getIcon().getIconHeight()) / 2);
      config.restore();
    }
    private Color getButtonForeground(){
switch (myActionId) {
case UPDATE:
        return new JBColor(Gray._0,Gray._210);
case INSTALL:
      return new JBColor(Gray._255,Gray._210);
case UNINSTALL:
    return new JBColor(Gray._0,Gray._140);
case RESTART:
  break;
}
return new JBColor(Gray._80,Gray._60);
}
private Paint getBackgroundPaint(){
switch (myActionId) {
case UPDATE:
return new JBColor(new Color(209,190,114),new Color(49,98,49));
case INSTALL:
return new JBColor(new Color(0x4DA864),new Color(49,98,49));
case UNINSTALL:
return UIUtil.isUnderDarcula() ? new GradientPaint(0,0,UIManager.getColor("Button.darcula.color1"),0,getHeight(),UIManager.getColor("Button.darcula.color2")) : Gray._240;
case RESTART:
break;
}
return Gray._238;
}
private Paint getBackgroundBorderPaint(){
switch (myActionId) {
case UPDATE:
return new JBColor(new Color(164,145,82),Gray._85);
case INSTALL:
return new JBColor(new Color(0x337043),Gray._80);
case UNINSTALL:
return new JBColor(Gray._220,Gray._100.withAlpha(180));
case RESTART:
}
return Gray._208;
}
@Override public String getText(){
switch (myActionId) {
case UPDATE:
return "Update plugin";
case INSTALL:
return "Install plugin";
case UNINSTALL:
return "Uninstall plugin";
case RESTART:
return "Restart " + ApplicationNamesInfo.getInstance().getFullProductName();
}
return super.getText();
}
@Override public Icon getIcon(){
switch (myActionId) {
case UPDATE:
return AllIcons.General.DownloadPlugin;
case INSTALL:
return AllIcons.General.DownloadPlugin;
case UNINSTALL:
return AllIcons.Actions.Delete;
case RESTART:
return AllIcons.Actions.Restart;
}
return super.getIcon();
}
}
;
myInstallButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
switch (myActionId) {
case UPDATE:
case INSTALL:
new InstallPluginAction(myManager.getAvailable(),myManager.getInstalled()).install(new Runnable(){
@Override public void run(){
setPlugin(myPlugin);
}
}
);
break;
case UNINSTALL:
UninstallPluginAction.uninstall(myManager.getInstalled(),myPlugin);
break;
case RESTART:
if (myManager != null) {
myManager.apply();
}
break;
}
setPlugin(myPlugin);
}
}
);
}
