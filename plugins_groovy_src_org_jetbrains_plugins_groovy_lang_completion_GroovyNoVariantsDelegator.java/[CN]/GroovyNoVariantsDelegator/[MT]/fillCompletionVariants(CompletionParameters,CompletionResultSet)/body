{
  final Ref<Boolean> empty=Ref.create(true);
  Consumer<CompletionResult> passResult=new Consumer<CompletionResult>(){
    public void consume(    final CompletionResult lookupElement){
      empty.set(false);
      result.passResult(lookupElement);
    }
  }
;
  result.runRemainingContributors(parameters,passResult);
  if (!empty.get() && parameters.getInvocationCount() == 0) {
    result.restartCompletionWhenNothingMatches();
  }
  if (empty.get()) {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() <= 1 && JavaCompletionContributor.mayStartClassName(result,false) && GroovyCompletionContributor.isClassNamePossible(parameters.getPosition())) {
      final ClassByNameMerger merger=new ClassByNameMerger(parameters.getInvocationCount() == 0,result);
      GroovyCompletionContributor.addAllClasses(parameters,result,new Consumer<LookupElement>(){
        @Override public void consume(        LookupElement element){
          JavaPsiClassReferenceElement classElement=element.as(JavaPsiClassReferenceElement.CLASS_CONDITION_KEY);
          if (classElement != null) {
            classElement.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
          }
          merger.consume(classElement);
        }
      }
,new InheritorsHolder(parameters.getPosition(),result));
      merger.finishedClassProcessing();
    }
  }
}
