{
  JavaElementArrangementEntry entry=myMethodEntriesMap.get(method);
  if (entry == null) {
    return null;
  }
  JavaArrangementMethodDependencyInfo result=new JavaArrangementMethodDependencyInfo(entry);
  Stack<Pair<PsiMethod,JavaArrangementMethodDependencyInfo>> toProcess=new Stack<Pair<PsiMethod,JavaArrangementMethodDependencyInfo>>();
  toProcess.push(Pair.create(method,result));
  while (!toProcess.isEmpty()) {
    Pair<PsiMethod,JavaArrangementMethodDependencyInfo> pair=toProcess.pop();
    Set<PsiMethod> dependentMethods=myMethodDependencies.get(pair.first);
    if (dependentMethods == null) {
      continue;
    }
    for (    PsiMethod dependentMethod : dependentMethods) {
      if (dependentMethod == method) {
        return null;
      }
      JavaElementArrangementEntry dependentEntry=myMethodEntriesMap.get(dependentMethod);
      if (dependentEntry == null) {
        continue;
      }
      JavaArrangementMethodDependencyInfo dependentMethodInfo=cache.get(dependentMethod);
      if (dependentMethodInfo == null) {
        cache.put(dependentMethod,dependentMethodInfo=new JavaArrangementMethodDependencyInfo(dependentEntry));
      }
      Pair<PsiMethod,JavaArrangementMethodDependencyInfo> dependentPair=Pair.create(dependentMethod,dependentMethodInfo);
      pair.second.addDependentMethodInfo(dependentPair.second);
      toProcess.push(dependentPair);
    }
  }
  return result;
}
