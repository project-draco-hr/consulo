{
  myRoot=new DefaultMutableTreeNode(ROOT);
  myShortcutColumnCellRenderer=new ShortcutColumnCellRenderer();
  myTreeTable=new TreeTable(new MyModel(myRoot)){
    public TreeTableCellRenderer createTableRenderer(    TreeTableModel treeTableModel){
      TreeTableCellRenderer tableRenderer=super.createTableRenderer(treeTableModel);
      UIUtil.setLineStyleAngled(tableRenderer);
      return tableRenderer;
    }
    public TableCellRenderer getCellRenderer(    int row,    int column){
      if (convertColumnIndexToModel(column) == 1) {
        return myShortcutColumnCellRenderer;
      }
      return super.getCellRenderer(row,column);
    }
  }
;
  myTreeTable.getTree().setCellRenderer(new DefaultTreeCellRenderer(){
    public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      setBorderSelectionColor(null);
      Icon icon=null;
      if (value instanceof DefaultMutableTreeNode) {
        Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        boolean changed;
        if (userObject instanceof Group) {
          Group group=(Group)userObject;
          setText(group.getName());
          Keymap originalKeymap=myKeymap.getParent();
          changed=originalKeymap != null && isGroupChanged(group,originalKeymap,myKeymap);
          icon=expanded ? group.getOpenIcon() : group.getIcon();
          if (icon == null) {
            icon=expanded ? getOpenIcon() : getClosedIcon();
          }
        }
 else         if (userObject instanceof String) {
          String actionId=(String)userObject;
          AnAction action=ActionManager.getInstance().getAction(actionId);
          setText(action != null ? action.getTemplatePresentation().getText() : actionId);
          if (action != null) {
            Icon actionIcon=action.getTemplatePresentation().getIcon();
            if (actionIcon != null) {
              icon=actionIcon;
            }
          }
          Keymap originalKeymap=myKeymap.getParent();
          changed=originalKeymap != null && isActionChanged(actionId,originalKeymap,myKeymap);
        }
 else         if (userObject instanceof QuickList) {
          QuickList list=(QuickList)userObject;
          icon=QUICK_LIST_ICON;
          setText(list.getDisplayName());
          Keymap originalKeymap=myKeymap.getParent();
          changed=originalKeymap != null && isActionChanged(list.getActionId(),originalKeymap,myKeymap);
        }
 else         if (userObject instanceof Separator) {
          changed=false;
          setText("-------------");
        }
 else {
          throw new IllegalArgumentException("unknown userObject: " + userObject);
        }
        LayeredIcon layeredIcon=new LayeredIcon(2);
        layeredIcon.setIcon(EMPTY_ICON,0);
        if (icon != null) {
          layeredIcon.setIcon(icon,1,(-icon.getIconWidth() + EMPTY_ICON.getIconWidth()) / 2,(EMPTY_ICON.getIconHeight() - icon.getIconHeight()) / 2);
        }
        setIcon(layeredIcon);
        if (sel) {
          setForeground(UIUtil.getTreeSelectionForeground());
        }
 else {
          if (changed) {
            setForeground(Color.BLUE);
          }
 else {
            setForeground(UIUtil.getTreeForeground());
          }
        }
      }
      return this;
    }
  }
);
  myTreeTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTreeTable.getColumnModel().getColumn(0).setPreferredWidth(200);
  myTreeTable.getColumnModel().getColumn(1).setPreferredWidth(100);
  myComponent=ScrollPaneFactory.createScrollPane(myTreeTable);
}
