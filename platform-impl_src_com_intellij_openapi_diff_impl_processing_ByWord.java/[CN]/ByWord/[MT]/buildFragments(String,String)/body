{
  Word[] words1=buildWords(text1,myComparisonPolicy);
  Word[] words2=buildWords(text2,myComparisonPolicy);
  Diff.Change change=Diff.buildChanges(words1,words2);
  change=Util.concatEquals(change,words1,words2);
  if (Math.max(countNotWhitespaces(words1),countNotWhitespaces(words2)) > 0 && countEqual(change,words1,words2) == 0)   return new DiffFragment[]{myComparisonPolicy.createFragment(text1,text2)};
  FragmentBuilder result=new FragmentBuilder(words1,words2,myComparisonPolicy,text1,text2);
  FragmentBuilder.Version version1=result.getVersion1();
  FragmentBuilder.Version version2=result.getVersion2();
  while (change != null) {
    if (change.line0 > version1.getCurrentWordIndex()) {
      processEquals(change.line0,change.line1,result);
    }
    if (change.inserted == 0) {
      processOneside(version1,change.deleted);
    }
 else     if (change.deleted == 0) {
      processOneside(version2,change.inserted);
    }
 else {
      String prefix1=version1.getCurrentWordPrefix();
      String prefix2=version2.getCurrentWordPrefix();
      if (prefix1.length() > 0 || prefix2.length() > 0)       result.add(myComparisonPolicy.createFragment(prefix1,prefix2));
      result.addChangedWords(change.deleted,change.inserted);
    }
    change=change.link;
  }
  processEquals(words1.length,words2.length,result);
  result.addTails();
  DiffFragment[] fragments=result.getFragments();
  DiffFragment firstFragment=fragments[0];
  if (DiffUtil.isEmpty(firstFragment)) {
    DiffFragment[] newFragments=new DiffFragment[fragments.length - 1];
    System.arraycopy(fragments,1,newFragments,0,newFragments.length);
    fragments=newFragments;
  }
  return fragments;
}
