def ancestor(self, fc2):
    '\n        find the common ancestor file context, if any, of self, and fc2\n        '
    actx = self.changectx().ancestor(fc2.changectx())
    if (not actx):
        return None
    if ((fc2.path() == self.path()) and (self.path() in actx)):
        return actx[self.path()]
    acache = {}
    for c in (self, fc2):
        if (c._filerev is None):
            pl = [(n.path(), n.filenode()) for n in c.parents()]
            acache[(c._path, None)] = pl
    flcache = {self._repopath: self._filelog, fc2._repopath: fc2._filelog, }

    def parents(vertex):
        if (vertex in acache):
            return acache[vertex]
        (f, n) = vertex
        if (f not in flcache):
            flcache[f] = self._repo.file(f)
        fl = flcache[f]
        pl = [(f, p) for p in fl.parents(n) if (p != nullid)]
        re = fl.renamed(n)
        if re:
            pl.append(re)
        acache[vertex] = pl
        return pl
    (a, b) = ((self._path, self._filenode), (fc2._path, fc2._filenode))
    v = ancestor.ancestor(a, b, parents)
    if v:
        (f, n) = v
        return filectx(self._repo, f, fileid=n, filelog=flcache[f])
    return None
