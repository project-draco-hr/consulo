{
  GrExpression selected=getSelectedExpression();
  PsiType thisType=selected.getType();
  if (thisType == null)   return null;
  GrArgumentList argList=getArgumentList();
  if (argList == null)   return null;
  PsiType[] argTypes=getArgumentTypes(argList);
  if (isSimpleArrayAccess(thisType,argTypes)) {
    return TypesUtil.boxPrimitiveType(((PsiArrayType)thisType).getComponentType(),getManager(),getResolveScope());
  }
  if (isSimpleTupleAccess(thisType,argTypes)) {
    PsiType[] types=((GrTupleType)thisType).getParameters();
    return types.length == 1 ? types[0] : null;
  }
  PsiType overloadedOperatorType=null;
  GroovyResolveResult[] candidates=ResolveUtil.getMethodCandidates(thisType,"getAt",this,argTypes);
  if (candidates.length != 1) {
    final GrTupleType tupleType=new GrTupleType(argTypes,JavaPsiFacade.getInstance(getProject()),getResolveScope());
    candidates=ResolveUtil.getMethodCandidates(thisType,"getAt",this,tupleType);
  }
  if (candidates.length == 1) {
    final PsiElement element=candidates[0].getElement();
    if (element instanceof PsiMethod) {
      overloadedOperatorType=candidates[0].getSubstitutor().substitute(getSmartReturnType((PsiMethod)element));
    }
  }
  PsiType componentType=extractMapValueType(thisType,argTypes);
  if (overloadedOperatorType != null && (componentType == null || !TypesUtil.isAssignable(overloadedOperatorType,componentType,getManager(),getResolveScope()))) {
    return TypesUtil.boxPrimitiveType(overloadedOperatorType,getManager(),getResolveScope());
  }
  return componentType;
}
