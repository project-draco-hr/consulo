{
switch (messageType) {
case FileMessage.MODIFIED:
    return myUpdatedFiles.getGroupById(FileGroup.MODIFIED_ID);
case FileMessage.MERGED:
  return getMergedFileGroup(vFile);
case FileMessage.MERGED_WITH_CONFLICTS:
return getMergedFileGroup(vFile);
case FileMessage.CREATED_BY_SECOND_PARTY:
return myUpdatedFiles.getGroupById(CvsUpdatePolicy.CREATED_BY_SECOND_PARTY_ID);
case FileMessage.NOT_IN_REPOSITORY:
return myUpdatedFiles.getGroupById(FileGroup.UNKNOWN_ID);
case FileMessage.LOCALLY_ADDED:
return myUpdatedFiles.getGroupById(FileGroup.LOCALLY_ADDED_ID);
case FileMessage.LOCALLY_REMOVED:
return myUpdatedFiles.getGroupById(FileGroup.LOCALLY_REMOVED_ID);
case FileMessage.REMOVED_FROM_REPOSITORY:
return myUpdatedFiles.getGroupById(FileGroup.REMOVED_FROM_REPOSITORY_ID);
case FileMessage.CREATED:
{
return myUpdatedFiles.getGroupById(FileGroup.CREATED_ID);
}
case FileMessage.UPDATING:
{
if (vFile == null) {
return myUpdatedFiles.getGroupById(FileGroup.RESTORED_ID);
}
 else {
return myUpdatedFiles.getGroupById(FileGroup.UPDATED_ID);
}
}
case FileMessage.PATCHED:
return myUpdatedFiles.getGroupById(FileGroup.UPDATED_ID);
case FileMessage.REMOVED_FROM_SERVER_CONFLICT:
return myUpdatedFiles.getGroupById(CvsUpdatePolicy.MODIFIED_REMOVED_FROM_SERVER_ID);
case FileMessage.LOCALLY_REMOVED_CONFLICT:
return myUpdatedFiles.getGroupById(CvsUpdatePolicy.LOCALLY_REMOVED_MODIFIED_ON_SERVER_ID);
}
return myUpdatedFiles.getGroupById(FileGroup.UNKNOWN_ID);
}
