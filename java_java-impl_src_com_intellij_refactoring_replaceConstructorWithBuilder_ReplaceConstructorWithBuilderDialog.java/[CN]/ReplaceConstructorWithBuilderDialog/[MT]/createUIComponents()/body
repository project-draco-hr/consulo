{
  final com.intellij.openapi.editor.event.DocumentAdapter adapter=new com.intellij.openapi.editor.event.DocumentAdapter(){
    public void documentChanged(    com.intellij.openapi.editor.event.DocumentEvent e){
      validateButtons();
    }
  }
;
  myPackageTextField=new PackageNameReferenceEditorCombo(((PsiJavaFile)myConstructors[0].getContainingFile()).getPackageName(),myProject,RECENT_KEYS,RefactoringBundle.message("choose.destination.package"));
  myPackageTextField.getChildComponent().getDocument().addDocumentListener(adapter);
  myExistentClassTF=new ReferenceEditorComboWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final TreeClassChooser chooser=TreeClassChooserFactory.getInstance(getProject()).createWithInnerClassesScopeChooser("Select Builder Class",GlobalSearchScope.projectScope(myProject),null,null);
      final String classText=myExistentClassTF.getText();
      final PsiClass currentClass=JavaPsiFacade.getInstance(myProject).findClass(classText,GlobalSearchScope.allScope(myProject));
      if (currentClass != null) {
        chooser.select(currentClass);
      }
      chooser.showDialog();
      final PsiClass selectedClass=chooser.getSelected();
      if (selectedClass != null) {
        myExistentClassTF.setText(selectedClass.getQualifiedName());
      }
    }
  }
,"",PsiManager.getInstance(myProject),true,RECENT_KEYS);
  myExistentClassTF.getChildComponent().getDocument().addDocumentListener(adapter);
}
