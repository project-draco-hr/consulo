{
  PsiClassType.ClassResolveResult classResolveResult=type.resolveGenerics();
  PsiClass aClass=classResolveResult.getElement();
  if (aClass == null) {
    return JavaResolveResult.EMPTY_ARRAY;
  }
  final MethodResolverProcessor processor;
  PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
  if (argumentList.getParent() instanceof PsiAnonymousClass) {
    final PsiAnonymousClass anonymous=(PsiAnonymousClass)argumentList.getParent();
    processor=new MethodResolverProcessor(anonymous,argumentList,place);
    aClass=anonymous.getBaseClassType().resolve();
    if (aClass == null)     return JavaResolveResult.EMPTY_ARRAY;
    substitutor=substitutor.putAll(TypeConversionUtil.getSuperClassSubstitutor(aClass,anonymous,substitutor));
  }
 else {
    processor=new MethodResolverProcessor(aClass,argumentList,place);
  }
  for (  PsiMethod constructor : aClass.getConstructors()) {
    if (!processor.execute(constructor,substitutor))     break;
  }
  return processor.getResult();
}
