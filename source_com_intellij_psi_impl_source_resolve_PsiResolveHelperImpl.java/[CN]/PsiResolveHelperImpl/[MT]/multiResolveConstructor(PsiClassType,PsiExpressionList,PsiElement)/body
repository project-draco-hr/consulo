{
  PsiClassType.ClassResolveResult classResolveResult=type.resolveGenerics();
  PsiClass aClass=classResolveResult.getElement();
  if (aClass == null) {
    return JavaResolveResult.EMPTY_ARRAY;
  }
 else {
    final MethodResolverProcessor processor;
    PsiSubstitutor substitutor;
    if (argumentList.getParent() instanceof PsiAnonymousClass) {
      final PsiClass anonymous=(PsiClass)argumentList.getParent();
      processor=new MethodResolverProcessor(anonymous,argumentList,place);
      aClass=anonymous.getSuperClass();
      if (aClass == null)       return JavaResolveResult.EMPTY_ARRAY;
      substitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,anonymous,classResolveResult.getSubstitutor());
    }
 else {
      processor=new MethodResolverProcessor(aClass,argumentList,place);
      substitutor=classResolveResult.getSubstitutor();
    }
    for (    PsiMethod constructor : aClass.getConstructors()) {
      if (!processor.execute(constructor,substitutor))       break;
    }
    return processor.getResult();
  }
}
