{
  PsiType type=null;
  if (parent instanceof PsiVariable && methodCall.equals(((PsiVariable)parent).getInitializer())) {
    type=((PsiVariable)parent).getType();
  }
 else   if (parent instanceof PsiAssignmentExpression && methodCall.equals(((PsiAssignmentExpression)parent).getRExpression())) {
    type=((PsiAssignmentExpression)parent).getLExpression().getType();
  }
 else   if (parent instanceof PsiReturnStatement) {
    PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    if (method != null) {
      type=method.getReturnType();
    }
  }
  final PsiManager manager=methodCall.getManager();
  if (type == null) {
    type=forCompletion ? PsiType.NULL : PsiType.getJavaLangObject(methodCall.getManager(),methodCall.getResolveScope());
  }
  PsiType returnType=((PsiMethod)typeParameter.getOwner()).getReturnType();
  PsiType guess=getSubstitutionForTypeParameter(typeParameter,returnType,type,false,PsiUtil.getLanguageLevel(parent));
  if (guess == PsiType.NULL) {
    PsiType superType=substitutor.substitute(typeParameter.getSuperTypes()[0]);
    if (superType == null)     superType=PsiType.getJavaLangObject(manager,methodCall.getResolveScope());
    if (forCompletion) {
      return PsiWildcardType.createExtends(manager,superType);
    }
 else {
      return superType;
    }
  }
 else {
    if (forCompletion && !(guess instanceof PsiWildcardType))     guess=PsiWildcardType.createExtends(manager,guess);
  }
  if (returnType instanceof PsiClassType && typeParameter.equals(((PsiClassType)returnType).resolve())) {
    PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
    PsiSubstitutor newSubstitutor=substitutor.put(typeParameter,guess);
    for (    PsiClassType extendsType1 : extendsTypes) {
      PsiType extendsType=newSubstitutor.substitute(extendsType1);
      if (!extendsType.isAssignableFrom(guess)) {
        if (guess.isAssignableFrom(extendsType)) {
          guess=extendsType;
          newSubstitutor=substitutor.put(typeParameter,guess);
        }
 else {
          break;
        }
      }
    }
  }
  return guess;
}
