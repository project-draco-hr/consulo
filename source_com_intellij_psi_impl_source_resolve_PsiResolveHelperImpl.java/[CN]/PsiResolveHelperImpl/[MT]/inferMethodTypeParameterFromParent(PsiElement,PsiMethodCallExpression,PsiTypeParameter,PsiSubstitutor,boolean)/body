{
  PsiType type=null;
  if (parent instanceof PsiVariable && methodCall.equals(((PsiVariable)parent).getInitializer())) {
    type=((PsiVariable)parent).getType();
  }
 else   if (parent instanceof PsiAssignmentExpression && methodCall.equals(((PsiAssignmentExpression)parent).getRExpression())) {
    type=((PsiAssignmentExpression)parent).getLExpression().getType();
  }
 else   if (parent instanceof PsiReturnStatement) {
    PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    if (method != null) {
      type=method.getReturnType();
    }
  }
  final PsiManager manager=methodCall.getManager();
  if (type == null) {
    type=forCompletion ? PsiType.NULL : PsiType.getJavaLangObject(methodCall.getManager(),methodCall.getResolveScope());
  }
  PsiType returnType=((PsiMethod)typeParameter.getOwner()).getReturnType();
  final Pair<PsiType,ConstraintType> constraint=getSubstitutionForTypeParameterConstraint(typeParameter,returnType,type,false,PsiUtil.getLanguageLevel(parent));
  if (constraint == null) {
    PsiType superType=substitutor.substitute(typeParameter.getSuperTypes()[0]);
    if (superType == null)     superType=PsiType.getJavaLangObject(manager,methodCall.getResolveScope());
    if (forCompletion && !(superType instanceof PsiWildcardType)) {
      return new Pair<PsiType,ConstraintType>(PsiWildcardType.createExtends(manager,superType),ConstraintType.EQUALS);
    }
 else {
      return new Pair<PsiType,ConstraintType>(superType,ConstraintType.SUBTYPE);
    }
  }
 else {
    PsiType guess=constraint.getFirst();
    if (forCompletion && !(guess instanceof PsiWildcardType))     guess=PsiWildcardType.createExtends(manager,guess);
    if (returnType instanceof PsiClassType && typeParameter.equals(((PsiClassType)returnType).resolve())) {
      PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
      PsiSubstitutor newSubstitutor=substitutor.put(typeParameter,guess);
      for (      PsiClassType extendsType1 : extendsTypes) {
        PsiType extendsType=newSubstitutor.substitute(extendsType1);
        if (!extendsType.isAssignableFrom(guess)) {
          if (guess.isAssignableFrom(extendsType)) {
            guess=extendsType;
            newSubstitutor=substitutor.put(typeParameter,guess);
          }
 else {
            break;
          }
        }
      }
    }
    return new Pair<PsiType,ConstraintType>(guess,constraint.getSecond());
  }
}
