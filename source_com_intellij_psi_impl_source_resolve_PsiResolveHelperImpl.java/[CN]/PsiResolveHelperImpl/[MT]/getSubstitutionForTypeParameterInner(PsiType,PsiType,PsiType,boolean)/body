{
  if (patternType.equals(param)) {
    return processArgType(arg,captureWildcard);
  }
  if (param instanceof PsiWildcardType) {
    final PsiWildcardType wildcardParam=(PsiWildcardType)param;
    final PsiType paramBound=wildcardParam.getBound();
    if (arg instanceof PsiWildcardType && ((PsiWildcardType)arg).isExtends() == wildcardParam.isExtends()) {
      PsiType res=getSubstitutionForTypeParameterInner(paramBound,((PsiWildcardType)arg).getBound(),patternType,captureWildcard);
      if (res != PsiType.NULL)       return res;
    }
 else     if (patternType.equals(paramBound)) {
      if (!(arg instanceof PsiWildcardType) || ((PsiWildcardType)arg).isExtends() == wildcardParam.isExtends()) {
        if (wildcardParam.isExtends()) {
          return processArgType(arg,captureWildcard);
        }
 else {
          if (arg instanceof PsiWildcardType)           arg=((PsiWildcardType)arg).getBound();
          if (arg != null)           return PsiWildcardType.createExtends(wildcardParam.getManager(),arg);
        }
      }
    }
 else     if (paramBound instanceof PsiClassType && arg instanceof PsiClassType) {
      final PsiClassType.ClassResolveResult boundResult=((PsiClassType)paramBound).resolveGenerics();
      final PsiClass boundClass=boundResult.getElement();
      if (boundClass != null) {
        final PsiClassType.ClassResolveResult argResult=((PsiClassType)arg).resolveGenerics();
        final PsiClass argClass=argResult.getElement();
        if (argClass != null) {
          if (wildcardParam.isExtends()) {
            PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(boundClass,argClass,argResult.getSubstitutor());
            if (superSubstitutor != null) {
              final Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator(boundClass);
              while (iterator.hasNext()) {
                final PsiTypeParameter typeParameter=iterator.next();
                final PsiType guess=getSubstitutionForTypeParameterInner(boundResult.getSubstitutor().substitute(typeParameter),superSubstitutor.substitute(typeParameter),patternType,captureWildcard);
                if (guess != PsiType.NULL)                 return guess;
              }
            }
          }
 else {
            PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(argClass,boundClass,boundResult.getSubstitutor());
            if (superSubstitutor != null) {
              final Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator(argClass);
              while (iterator.hasNext()) {
                final PsiTypeParameter typeParameter=iterator.next();
                final PsiType guess=getSubstitutionForTypeParameterInner(superSubstitutor.substitute(typeParameter),argResult.getSubstitutor().substitute(typeParameter),patternType,captureWildcard);
                if (guess != PsiType.NULL)                 return guess;
              }
            }
          }
        }
      }
    }
  }
  if (param instanceof PsiArrayType && arg instanceof PsiArrayType) {
    return getSubstitutionForTypeParameterInner(((PsiArrayType)param).getComponentType(),((PsiArrayType)arg).getComponentType(),patternType,captureWildcard);
  }
  if (param instanceof PsiClassType && arg instanceof PsiClassType) {
    PsiClass paramClass=((PsiClassType)param).resolve();
    if (paramClass == null)     return PsiType.NULL;
    PsiClass argClass=((PsiClassType)arg).resolve();
    if (argClass != paramClass)     return PsiType.NULL;
    PsiType[] paramTypes=((PsiClassType)param).getParameters();
    PsiType[] argTypes=((PsiClassType)arg).getParameters();
    if (paramTypes.length != argTypes.length)     return PsiType.NULL;
    PsiType capturedWildcard=PsiType.NULL;
    for (int i=0; i < argTypes.length; i++) {
      PsiType res=getSubstitutionForTypeParameterInner(paramTypes[i],argTypes[i],patternType,captureWildcard);
      if (res != PsiType.NULL) {
        if (!captureWildcard) {
          return res;
        }
 else {
          if (capturedWildcard != PsiType.NULL) {
            return PsiType.NULL;
          }
 else {
            capturedWildcard=res;
          }
        }
      }
    }
    return capturedWildcard;
  }
  return PsiType.NULL;
}
