{
  if (modifierList == null)   return true;
  final PsiFile placeContainingFile=place.getContainingFile();
  final PsiManager manager=placeContainingFile.getManager();
  if (placeContainingFile instanceof PsiCodeFragment) {
    PsiCodeFragment fragment=(PsiCodeFragment)placeContainingFile;
    PsiCodeFragment.VisibilityChecker visibilityChecker=fragment.getVisibilityChecker();
    if (visibilityChecker != null) {
      PsiCodeFragment.VisibilityChecker.Visibility visibility=visibilityChecker.isDeclarationVisible(member,place);
      if (visibility == PsiCodeFragment.VisibilityChecker.Visibility.VISIBLE)       return true;
      if (visibility == PsiCodeFragment.VisibilityChecker.Visibility.NOT_VISIBLE)       return false;
    }
  }
 else   if (placeContainingFile instanceof XmlFile)   return true;
  if (ResolveUtil.findParentContextOfClass(place,PsiDocComment.class,false) != null)   return true;
  if (accessObjectClass != null && !isAccessible(accessObjectClass,place,null))   return false;
  int effectiveAccessLevel=PsiUtil.getAccessLevel(modifierList);
  PsiFile file=ResolveUtil.getContextFile(place);
  if (file instanceof JspFile && (member.getContainingFile() instanceof JspFile || member instanceof JspImplicitVariable))   return true;
  if (file instanceof XmlFile)   return true;
  if (effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PUBLIC) {
    return true;
  }
 else   if (effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PROTECTED) {
    if (manager.arePackagesTheSame(member,place))     return true;
    PsiClass memberClass=member.getContainingClass();
    if (memberClass == null)     return false;
    for (PsiElement placeParent=place; placeParent != null; placeParent=placeParent.getContext()) {
      if (placeParent instanceof PsiClass && InheritanceUtil.isInheritorOrSelf((PsiClass)placeParent,memberClass,true)) {
        if (member instanceof PsiClass || modifierList.hasModifierProperty(PsiModifier.STATIC))         return true;
        if (accessObjectClass == null)         return true;
        if (manager.areElementsEquivalent(accessObjectClass,placeParent) || accessObjectClass.isInheritor((PsiClass)placeParent,true)) {
          return true;
        }
      }
      if (placeParent instanceof JspFileImpl && InheritanceUtil.isInheritorOrSelf(((JspFileImpl)placeParent).getBaseClass(),memberClass,true)) {
        if (accessObjectClass == null)         return true;
        if (accessObjectClass.isInheritor(((JspFileImpl)placeParent).getBaseClass(),true))         return true;
      }
    }
    return false;
  }
 else   if (effectiveAccessLevel == PsiUtil.ACCESS_LEVEL_PRIVATE) {
    final PsiClass memberClass=member.getContainingClass();
    if (accessObjectClass != null) {
      PsiClass topMemberClass=getPlaceTopLevelClass(memberClass,accessObjectClass,false);
      PsiClass topAccessClass=getPlaceTopLevelClass(accessObjectClass,memberClass,false);
      if (!manager.areElementsEquivalent(topMemberClass,topAccessClass))       return false;
    }
    boolean isConstructor=member instanceof PsiMethod && ((PsiMethod)member).isConstructor();
    PsiClass placeClass=getPlaceTopLevelClass(place,memberClass,isConstructor);
    if (placeClass != null) {
      for (PsiElement memberClassParent=memberClass; memberClassParent != null; memberClassParent=memberClassParent.getContext()) {
        if (manager.areElementsEquivalent(placeClass,memberClassParent))         return true;
      }
      for (PsiElement placeClassParent=placeClass; placeClassParent != null; placeClassParent=placeClassParent.getContext()) {
        if (manager.areElementsEquivalent(memberClass,placeClassParent))         return true;
      }
    }
    return false;
  }
 else {
    if (!manager.arePackagesTheSame(member,place))     return false;
    if (modifierList.hasModifierProperty(PsiModifier.STATIC))     return true;
    final PsiClass memberClass=member.getContainingClass();
    final PsiClass placeClass=ResolveUtil.getContextClass(place);
    if (memberClass == null || placeClass == null)     return true;
    if (memberClass.isInterface() || placeClass.isInterface())     return true;
    if (placeClass.isInheritor(memberClass,true)) {
      PsiClass superClass=placeClass.getSuperClass();
      while (!manager.areElementsEquivalent(superClass,memberClass)) {
        if (!manager.arePackagesTheSame(superClass,memberClass))         return false;
        superClass=superClass.getSuperClass();
      }
    }
    return true;
  }
}
