{
  PsiType[] substitutions=new PsiType[typeParameters.length];
  for (int i=0; i < typeParameters.length; i++) {
    substitutions[i]=inferTypeForMethodTypeParameter(typeParameters[i],parameters,arguments,partialSubstitutor,null,forCompletion);
  }
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(parent);
  final PsiManager manager=parent.getManager();
  for (int i=0; i < typeParameters.length; i++) {
    PsiTypeParameter typeParameter=typeParameters[i];
    if (substitutions[i] == PsiType.NULL) {
      PsiType substitutionFromBounds=PsiType.NULL;
      OtherParameters:       for (int j=0; j < typeParameters.length; j++) {
        if (i != j) {
          PsiTypeParameter other=typeParameters[j];
          final PsiType otherSubstitution=substitutions[j];
          if (otherSubstitution == PsiType.NULL)           continue;
          final PsiClassType[] bounds=other.getExtendsListTypes();
          for (          PsiClassType bound : bounds) {
            final PsiType substitutedBound=partialSubstitutor.substitute(bound);
            final Pair<PsiType,ConstraintType> currentConstraint=getSubstitutionForTypeParameterConstraint(typeParameter,substitutedBound,otherSubstitution,true,languageLevel);
            if (currentConstraint == null)             continue;
            final PsiType currentSubstitution=currentConstraint.getFirst();
            final ConstraintType currentConstraintType=currentConstraint.getSecond();
            if (currentConstraintType == ConstraintType.EQUALS) {
              substitutionFromBounds=currentSubstitution;
              break OtherParameters;
            }
 else             if (currentConstraintType == ConstraintType.SUPERTYPE) {
              if (substitutionFromBounds == PsiType.NULL) {
                substitutionFromBounds=currentSubstitution;
              }
 else {
                substitutionFromBounds=GenericsUtil.getLeastUpperBound(substitutionFromBounds,currentSubstitution,manager);
              }
            }
          }
        }
      }
      if (substitutionFromBounds != PsiType.NULL)       substitutions[i]=substitutionFromBounds;
    }
  }
  for (int i=0; i < typeParameters.length; i++) {
    PsiTypeParameter typeParameter=typeParameters[i];
    PsiType substitution=substitutions[i];
    if (substitution == PsiType.NULL) {
      substitution=inferMethodTypeParameterFromParent(typeParameter,partialSubstitutor,parent,forCompletion);
    }
    if (substitution == null) {
      return createRawSubstitutor(partialSubstitutor,typeParameters);
    }
 else     if (substitution != PsiType.NULL) {
      partialSubstitutor=partialSubstitutor.put(typeParameter,substitution);
    }
  }
  return partialSubstitutor;
}
