{
  if (targetContainer == null && canMoveOrRearrangePackages(elements)) {
    PsiDirectory[] directories=new PsiDirectory[elements.length];
    System.arraycopy(elements,0,directories,0,directories.length);
    SelectMoveOrRearrangePackageDialog dialog=new SelectMoveOrRearrangePackageDialog(project,directories);
    dialog.show();
    if (!dialog.isOK())     return;
    if (dialog.isPackageRearrageSelected()) {
      MoveClassesOrPackagesImpl.doRearrangePackage(project,directories);
      return;
    }
    if (dialog.isMoveDirectory()) {
      final ArrayList<MoveRenameUsageInfo> usages=new ArrayList<MoveRenameUsageInfo>();
      for (      PsiDirectory directory : directories) {
        final PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(directory);
        if (aPackage != null) {
          for (          PsiReference reference : ReferencesSearch.search(aPackage,directory.getUseScope())) {
            usages.add(new MoveRenameUsageInfo(reference,aPackage));
          }
        }
      }
      final PsiElement[] targetDirectory=new PsiElement[]{targetContainer};
      MoveFilesOrDirectoriesUtil.doMove(project,elements,targetDirectory,new MoveCallback(){
        public void refactoringCompleted(){
          if (callback != null)           callback.refactoringCompleted();
          if (targetDirectory[0] instanceof PsiDirectory) {
            final PsiPackage destPackage=JavaDirectoryService.getInstance().getPackage((PsiDirectory)targetDirectory[0]);
            if (destPackage != null) {
              for (              MoveRenameUsageInfo usage : usages) {
                final PsiPackage aPackage=(PsiPackage)usage.getReferencedElement();
                if (aPackage != null) {
                  final PsiReference reference=usage.getReference();
                  if (reference != null) {
                    final PsiPackage pack=JavaPsiFacade.getInstance(project).findPackage(StringUtil.getQualifiedName(destPackage.getQualifiedName(),aPackage.getName()));
                    if (pack != null) {
                      reference.bindToElement(pack);
                    }
                  }
                }
              }
            }
          }
        }
      }
);
      return;
    }
  }
  super.doMove(project,elements,targetContainer,callback);
}
