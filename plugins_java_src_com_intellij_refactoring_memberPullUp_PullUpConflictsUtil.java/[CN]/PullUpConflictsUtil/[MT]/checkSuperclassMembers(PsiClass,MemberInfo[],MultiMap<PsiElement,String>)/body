{
  for (  MemberInfo info : infos) {
    PsiMember member=info.getMember();
    boolean isConflict=false;
    if (member instanceof PsiField) {
      String name=member.getName();
      isConflict=superClass.findFieldByName(name,false) != null;
    }
 else     if (member instanceof PsiMethod) {
      PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,member.getContainingClass(),PsiSubstitutor.EMPTY);
      MethodSignature signature=((PsiMethod)member).getSignature(superSubstitutor);
      final PsiMethod superClassMethod=MethodSignatureUtil.findMethodBySignature(superClass,signature,false);
      isConflict=superClassMethod != null;
    }
    if (isConflict) {
      String message=RefactoringBundle.message("0.already.contains.a.1",RefactoringUIUtil.getDescription(superClass,false),RefactoringUIUtil.getDescription(member,false));
      message=CommonRefactoringUtil.capitalize(message);
      conflictsList.putValue(superClass,message);
    }
    if (member instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)member;
      final PsiModifierList modifierList=method.getModifierList();
      if (!modifierList.hasModifierProperty(PsiModifier.PRIVATE)) {
        for (        PsiClass subClass : ClassInheritorsSearch.search(superClass)) {
          if (method.getContainingClass() != subClass) {
            MethodSignature signature=((PsiMethod)member).getSignature(TypeConversionUtil.getSuperClassSubstitutor(superClass,subClass,PsiSubstitutor.EMPTY));
            final PsiMethod wouldBeOverriden=MethodSignatureUtil.findMethodBySignature(subClass,signature,false);
            if (wouldBeOverriden != null && VisibilityUtil.compare(VisibilityUtil.getVisibilityModifier(wouldBeOverriden.getModifierList()),VisibilityUtil.getVisibilityModifier(modifierList)) > 0) {
              conflictsList.putValue(wouldBeOverriden,CommonRefactoringUtil.capitalize(RefactoringUIUtil.getDescription(method,true) + " in super class would clash with local method from " + RefactoringUIUtil.getDescription(subClass,true)));
            }
          }
        }
      }
    }
  }
}
