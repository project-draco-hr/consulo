{
  if (classMember != null && !willBeMoved(classMember,myMovedMembers)) {
    final PsiClass containingClass=classMember.getContainingClass();
    if (containingClass != null) {
      if (!PsiUtil.isAccessibleFromPackage(classMember,myTargetPackage)) {
        if (classMember.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
          myConflicts.putValue(myMember,RefactoringUIUtil.getDescription(classMember,true) + " won't be accessible");
        }
 else         if (classMember.hasModifierProperty(PsiModifier.PROTECTED) && !mySubClass.isInheritor(containingClass,true)) {
          myConflicts.putValue(myMember,RefactoringUIUtil.getDescription(classMember,true) + " won't be accessible");
        }
      }
    }
  }
}
