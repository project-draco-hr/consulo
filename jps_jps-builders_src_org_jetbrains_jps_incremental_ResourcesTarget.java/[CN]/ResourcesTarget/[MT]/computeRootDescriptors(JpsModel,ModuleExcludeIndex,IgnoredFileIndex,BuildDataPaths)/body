{
  List<ResourceRootDescriptor> roots=new ArrayList<ResourceRootDescriptor>();
  JavaSourceRootType type=isTests() ? JavaSourceRootType.TEST_SOURCE : JavaSourceRootType.SOURCE;
  Iterable<ExcludedJavaSourceRootProvider> excludedRootProviders=JpsServiceManager.getInstance().getExtensions(ExcludedJavaSourceRootProvider.class);
  final THashSet<File> addedRoots=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  roots_loop:   for (  JpsTypedModuleSourceRoot<JpsSimpleElement<JavaSourceRootProperties>> sourceRoot : myModule.getSourceRoots(type)) {
    for (    ExcludedJavaSourceRootProvider provider : excludedRootProviders) {
      if (provider.isExcludedFromCompilation(myModule,sourceRoot)) {
        continue roots_loop;
      }
    }
    final String packagePrefix=sourceRoot.getProperties().getData().getPackagePrefix();
    final File rootFile=sourceRoot.getFile();
    roots.add(new ResourceRootDescriptor(rootFile,this,false,packagePrefix,computeRootExcludes(rootFile,index)));
    addedRoots.add(rootFile);
  }
  final ProcessorConfigProfile profile=findAnnotationProcessingProfile(model);
  if (profile != null) {
    final File annotationOut=new ProjectPaths(model.getProject()).getAnnotationProcessorGeneratedSourcesOutputDir(getModule(),isTests(),profile);
    if (annotationOut != null && !addedRoots.contains(annotationOut) && !FileUtil.filesEqual(annotationOut,getOutputDir())) {
      roots.add(new ResourceRootDescriptor(annotationOut,this,true,"",computeRootExcludes(annotationOut,index)));
    }
  }
  return roots;
}
