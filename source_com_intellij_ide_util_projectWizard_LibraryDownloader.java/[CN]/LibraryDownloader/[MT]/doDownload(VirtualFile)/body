{
  HttpConfigurable.getInstance().setAuthenticator();
  final List<Pair<LibraryInfo,File>> downloadedFiles=new ArrayList<Pair<LibraryInfo,File>>();
  final List<VirtualFile> existingFiles=new ArrayList<VirtualFile>();
  final Exception[] exception=new Exception[]{null};
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      try {
        for (int i=0; i < myLibraryInfos.length; i++) {
          LibraryInfo info=myLibraryInfos[i];
          indicator.checkCanceled();
          indicator.setText(J2EEBundle.message("progress.0.of.1.file.downloaded.text",i,myLibraryInfos.length));
          final VirtualFile existing=dir.findChild(getExpectedFileName(info));
          long size=existing != null ? existing.getLength() : -1;
          if (!download(info,size,downloadedFiles)) {
            existingFiles.add(existing);
          }
        }
      }
 catch (      ProcessCanceledException e) {
        exception[0]=e;
      }
catch (      IOException e) {
        exception[0]=e;
      }
    }
  }
,J2EEBundle.message("progress.download.libraries.title"),true,myProject);
  if (exception[0] == null) {
    try {
      return moveToDir(existingFiles,downloadedFiles,dir);
    }
 catch (    IOException e) {
      final String title=J2EEBundle.message("progress.download.libraries.title");
      if (myProject != null) {
        Messages.showErrorDialog(myProject,title,e.getMessage());
      }
 else {
        Messages.showErrorDialog(myParent,title,e.getMessage());
      }
      return VirtualFile.EMPTY_ARRAY;
    }
  }
  deleteFiles(downloadedFiles);
  if (exception[0] instanceof IOException) {
    final boolean tryAgain=IOExceptionDialog.showErrorDialog((IOException)exception[0],J2EEBundle.message("progress.download.libraries.title"),J2EEBundle.message("error.library.download.failed"));
    if (tryAgain) {
      return doDownload(dir);
    }
  }
  return VirtualFile.EMPTY_ARRAY;
}
