{
  LOG.assertTrue(myDocument != null);
  final EditorFactory factory=EditorFactory.getInstance();
  EditorEx editor;
  if (!myIsViewer) {
    editor=myProject != null ? (EditorEx)factory.createEditor(myDocument,myProject) : (EditorEx)factory.createEditor(myDocument);
  }
 else {
    editor=myProject != null ? (EditorEx)factory.createViewer(myDocument,myProject) : (EditorEx)factory.createViewer(myDocument);
  }
  final EditorSettings settings=editor.getSettings();
  settings.setAdditionalLinesCount(0);
  settings.setAdditionalColumnsCount(1);
  settings.setRightMarginShown(false);
  settings.setFoldingOutlineShown(false);
  settings.setLineNumbersShown(false);
  settings.setLineMarkerAreaShown(false);
  settings.setVirtualSpace(false);
  editor.setHorizontalScrollbarVisible(false);
  editor.setVerticalScrollbarVisible(false);
  settings.setLineCursorWidth(1);
  setupEditorFont(editor);
  if (myProject != null) {
    editor.setHighlighter(HighlighterFactory.createHighlighter(myProject,myFileType));
  }
  editor.getColorsScheme().setColor(EditorColors.CARET_ROW_COLOR,null);
  editor.setOneLineMode(true);
  editor.getCaretModel().moveToOffset(myDocument.getTextLength());
  if (!shouldHaveBorder()) {
    editor.getScrollPane().setBorder(null);
  }
  if (myIsViewer) {
    editor.getSelectionModel().removeSelection();
  }
 else   if (myWholeTextSelected) {
    editor.getSelectionModel().setSelection(0,myDocument.getTextLength());
  }
  editor.setBackgroundColor(getBackgroundColor(!myIsViewer));
  if (myUseTextFieldPreferredSize && !UIUtil.isUnderQuaquaLookAndFeel()) {
    editor.getComponent().setPreferredSize(new JTextField().getPreferredSize());
  }
  editor.putUserData(SUPPLEMENTARY_KEY,myIsSupplementary);
  editor.getContentComponent().setFocusCycleRoot(false);
  return editor;
}
