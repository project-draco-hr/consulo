{
  final String path=myDestDirectoryField.getText();
  PsiDirectory directory;
  final Project project=myDirectory.getProject();
  directory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
    public PsiDirectory compute(){
      try {
        return DirectoryUtil.mkdirs(PsiManager.getInstance(project),path);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return null;
      }
    }
  }
);
  if (directory == null) {
    Messages.showErrorDialog(project,RefactoringBundle.message("cannot.find.or.create.destination.directory"),RefactoringBundle.message("cannot.move"));
    return;
  }
  super.doOKAction();
  final PsiPackage aPackage=directory.getPackage();
  if (aPackage == null) {
    Messages.showErrorDialog(project,RefactoringBundle.message("destination.directory.does.not.correspond.to.any.package"),RefactoringBundle.message("cannot.move"));
    return;
  }
  final VirtualFile sourceRoot=ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(directory.getVirtualFile());
  final RefactoringFactory factory=RefactoringFactory.getInstance(project);
  final MoveDestination destination=factory.createSourceRootMoveDestination(aPackage.getQualifiedName(),sourceRoot);
  factory.createMoveClassesOrPackages(myElementsToMove,destination).run();
}
