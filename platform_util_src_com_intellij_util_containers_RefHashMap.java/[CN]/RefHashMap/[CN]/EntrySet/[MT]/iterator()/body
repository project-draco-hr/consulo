{
  return new Iterator<Entry<K,V>>(){
    private final Iterator<Entry<Key<K>,V>> hashIterator=hashEntrySet.iterator();
    private MyEntry<K,V> next=null;
    @Override public boolean hasNext(){
      while (hashIterator.hasNext()) {
        Entry<Key<K>,V> ent=hashIterator.next();
        Key<K> wk=ent.getKey();
        K k=null;
        if (wk != null && (k=wk.get()) == null) {
          continue;
        }
        next=new MyEntry<K,V>(ent,k);
        return true;
      }
      return false;
    }
    @Override public Entry<K,V> next(){
      if (next == null && !hasNext()) {
        throw new NoSuchElementException();
      }
      Entry<K,V> e=next;
      next=null;
      return e;
    }
    @Override public void remove(){
      hashIterator.remove();
    }
  }
;
}
