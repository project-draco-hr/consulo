{
  final Ref<VcsException> exceptionRef=new Ref<>();
  final Ref<DiffRequest> requestRef=new Ref<>();
  final Task.Backgroundable task=new Task.Backgroundable(myProject,VcsBundle.message("show.diff.progress.title.detailed",mySelectedFile.getPresentableUrl()),true){
    public void run(    @NotNull ProgressIndicator indicator){
      final VcsRevisionNumber revisionNumber=getRevisionNumber();
      try {
        if (revisionNumber == null) {
          return;
        }
        DiffContent content1=createRemote(revisionNumber);
        if (content1 == null)         return;
        DiffContent content2=DiffContentFactory.getInstance().create(myProject,mySelectedFile);
        String title=DiffRequestFactory.getInstance().getTitle(mySelectedFile);
        boolean inverted=false;
        String title1;
        String title2;
        final FileStatus status=FileStatusManager.getInstance(myProject).getStatus(mySelectedFile);
        if (status == null || FileStatus.NOT_CHANGED.equals(status) || FileStatus.UNKNOWN.equals(status) || FileStatus.IGNORED.equals(status)) {
          final VcsRevisionNumber currentRevision=myDiffProvider.getCurrentRevision(mySelectedFile);
          inverted=revisionNumber.compareTo(currentRevision) > 0;
          title1=revisionNumber.asString();
          title2=VcsBundle.message("diff.title.local.with.number",currentRevision.asString());
        }
 else {
          title1=revisionNumber.asString();
          title2=VcsBundle.message("diff.title.local");
        }
        Integer line=null;
        if (content2 instanceof DocumentContent) {
          Editor[] editors=EditorFactory.getInstance().getEditors(((DocumentContent)content2).getDocument(),myProject);
          if (editors.length != 0)           line=editors[0].getCaretModel().getLogicalPosition().line;
        }
        if (inverted) {
          SimpleDiffRequest request=new SimpleDiffRequest(title,content2,content1,title2,title1);
          if (line != null)           request.putUserData(DiffUserDataKeys.SCROLL_TO_LINE,Pair.create(Side.LEFT,line));
          request.putUserData(DiffUserDataKeys.MASTER_SIDE,Side.LEFT);
          requestRef.set(request);
        }
 else {
          SimpleDiffRequest request=new SimpleDiffRequest(title,content1,content2,title1,title2);
          if (line != null)           request.putUserData(DiffUserDataKeys.SCROLL_TO_LINE,Pair.create(Side.RIGHT,line));
          request.putUserData(DiffUserDataKeys.MASTER_SIDE,Side.RIGHT);
          requestRef.set(request);
        }
      }
 catch (      ProcessCanceledException e) {
      }
catch (      VcsException e) {
        exceptionRef.set(e);
      }
catch (      IOException e) {
        exceptionRef.set(new VcsException(e));
      }
    }
    @RequiredDispatchThread @Override public void onCancel(){
      onSuccess();
    }
    @RequiredDispatchThread @Override public void onSuccess(){
      myHandler.completed(VcsBackgroundableActions.keyFrom(mySelectedFile));
      if (!exceptionRef.isNull()) {
        AbstractVcsHelper.getInstance(myProject).showError(exceptionRef.get(),VcsBundle.message("message.title.diff"));
        return;
      }
      if (!requestRef.isNull()) {
        DiffManager.getInstance().showDiff(myProject,requestRef.get());
      }
    }
  }
;
  myHandler.register(VcsBackgroundableActions.keyFrom(mySelectedFile));
  ProgressManager.getInstance().run(task);
}
