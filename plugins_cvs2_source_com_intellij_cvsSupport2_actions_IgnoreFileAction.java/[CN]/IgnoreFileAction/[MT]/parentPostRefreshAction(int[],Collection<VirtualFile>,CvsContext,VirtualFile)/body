{
  return new Runnable(){
    public void run(){
      try {
        VirtualFile cvsIgnoreFile=CvsVfsUtil.refreshAndfFindChild(parent,CvsUtil.CVS_IGNORE_FILE);
        if (cvsIgnoreFile == null) {
          String path=parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE;
          LOG.assertTrue(false,String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath()+ " "+ new File(VfsUtil.virtualToIoFile(parent),CvsUtil.CVS_IGNORE_FILE).isFile());
          return;
        }
        if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile)) {
          createdCvsIgnoreFiles.add(cvsIgnoreFile);
        }
        Set filesToUpdateStatus=myParentToSelectedChildren.get(parent);
        for (Iterator iterator=filesToUpdateStatus.iterator(); iterator.hasNext(); ) {
          FileStatusManager.getInstance(context.getProject()).fileStatusChanged((VirtualFile)iterator.next());
        }
      }
  finally {
        refreshedParents[0]++;
        if (allParentsWasRefreshed(refreshedParents)) {
          if (createdCvsIgnoreFiles.isEmpty()) {
            refreshPanel(context);
          }
 else {
            addCvsIgnoreFilesToCvsAndRefreshPanel();
          }
        }
      }
    }
    private void addCvsIgnoreFilesToCvsAndRefreshPanel(){
      createAddFilesAction().actionPerformed(createContext(createdCvsIgnoreFiles,context));
    }
    private AddFileOrDirectoryAction createAddFilesAction(){
      return new AddFileOrDirectoryAction(CvsBundle.message("adding.cvsignore.files.to.cvs.action.name"),Options.ON_FILE_ADDING,true){
        protected void onActionPerformed(        CvsContext context,        CvsTabbedWindow tabbedWindow,        boolean successfully,        CvsHandler handler){
          refreshPanel(context);
        }
      }
;
    }
  }
;
}
