{
  final List<ModuleOrderEntry> intellijModuleDependencies=new ArrayList<ModuleOrderEntry>();
  final List<LibraryOrderEntry> intellijLibraryDependencies=new ArrayList<LibraryOrderEntry>();
  RootPolicy<Object> policy=new RootPolicy<Object>(){
    @Override public Object visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    Object value){
      intellijModuleDependencies.add(moduleOrderEntry);
      return moduleOrderEntry;
    }
    @Override public Object visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    Object value){
      intellijLibraryDependencies.add(libraryOrderEntry);
      return libraryOrderEntry;
    }
  }
;
  for (  OrderEntry orderEntry : context.getPlatformFacade().getOrderEntries(intellijModule)) {
    orderEntry.accept(policy,null);
  }
  final List<ModuleDependencyData> gradleModuleDependencies=new ArrayList<ModuleDependencyData>();
  final List<LibraryDependencyData> gradleLibraryDependencies=new ArrayList<LibraryDependencyData>();
  ExternalEntityVisitor visitor=new ExternalEntityVisitorAdapter(){
    @Override public void visit(    @NotNull ModuleDependencyData dependency){
      gradleModuleDependencies.add(dependency);
    }
    @Override public void visit(    @NotNull LibraryDependencyData dependency){
      gradleLibraryDependencies.add(dependency);
    }
  }
;
  for (  DependencyData dependency : gradleModule.getDependencies()) {
    dependency.invite(visitor);
  }
  GradleDiffUtil.calculate(myLibraryDependencyCalculator,gradleLibraryDependencies,intellijLibraryDependencies,context);
  GradleDiffUtil.calculate(myModuleDependencyCalculator,gradleModuleDependencies,intellijModuleDependencies,context);
}
