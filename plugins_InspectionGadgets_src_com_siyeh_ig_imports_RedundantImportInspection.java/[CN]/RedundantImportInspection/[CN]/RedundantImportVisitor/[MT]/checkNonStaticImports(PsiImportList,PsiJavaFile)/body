{
  final PsiImportStatement[] importStatements=importList.getImportStatements();
  final Set<String> imports=new HashSet<String>(importStatements.length);
  for (  final PsiImportStatement importStatement : importStatements) {
    final String text=importStatement.getQualifiedName();
    if (text == null) {
      continue;
    }
    if (imports.contains(text)) {
      registerError(importStatement);
      continue;
    }
    if (!importStatement.isOnDemand()) {
      final PsiElement element=importStatement.resolve();
      if (!(element instanceof PsiClass)) {
        continue;
      }
      final PsiClass targetClass=(PsiClass)element;
      final PsiNamedElement namedElement=PsiTreeUtil.getParentOfType(targetClass,PsiPackage.class,PsiClass.class);
      if (namedElement == null) {
        continue;
      }
      final String parentName;
      if (namedElement instanceof PsiPackage) {
        final PsiPackage aPackage=(PsiPackage)namedElement;
        parentName=aPackage.getQualifiedName();
      }
 else       if (namedElement instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)namedElement;
        parentName=aClass.getQualifiedName();
      }
 else {
        continue;
      }
      if (imports.contains(parentName) && !ImportUtils.hasOnDemandImportConflict(text,javaFile)) {
        registerError(importStatement);
      }
    }
    imports.add(text);
  }
}
