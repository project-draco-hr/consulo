{
  myProject=project;
  myProfilesModel=profilesModel;
  myProfilesModel.addItemsChangeListener(new Runnable(){
    public void run(){
      final Object selectedItem=myProfilesComboBox.getSelectedItem();
      fillCopyrightProfiles();
      myProfilesComboBox.setSelectedItem(selectedItem);
      final ArrayList<ScopeSetting> toRemove=new ArrayList<ScopeSetting>();
      for (      ScopeSetting setting : myScopeMappingModel.getItems()) {
        if (setting.getProfile() == null) {
          toRemove.add(setting);
        }
      }
      for (      ScopeSetting setting : toRemove) {
        myScopeMappingModel.removeRow(myScopeMappingModel.indexOf(setting));
      }
    }
  }
);
  myManager=CopyrightManager.getInstance(project);
  ColumnInfo[] columns={new ScopeColumn(),new SettingColumn()};
  myScopeMappingModel=new ListTableModel<ScopeSetting>(columns,new ArrayList<ScopeSetting>(),0);
  myScopeMappingTable=new TableView<ScopeSetting>(myScopeMappingModel);
  fillCopyrightProfiles();
  myProfilesComboBox.setRenderer(new ListCellRendererWrapper<CopyrightProfile>(myProfilesComboBox.getRenderer()){
    @Override public void customize(    JList list,    CopyrightProfile value,    int index,    boolean selected,    boolean hasFocus){
      if (value == null) {
        setText("No copyright");
      }
 else {
        setText(value.getName());
      }
    }
  }
);
  myScopesLink.setVisible(!myProject.isDefault());
  myScopesLink.setHyperlinkText("Select Scopes to add new scopes or modify existing ones");
  myScopesLink.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    final HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        final DataContext dataContext=DataManager.getInstance().getDataContextFromFocus().getResult();
        final OptionsEditor optionsEditor=OptionsEditor.KEY.getData(dataContext);
        if (optionsEditor != null) {
          optionsEditor.select(ScopeChooserConfigurable.class);
        }
      }
    }
  }
);
}
