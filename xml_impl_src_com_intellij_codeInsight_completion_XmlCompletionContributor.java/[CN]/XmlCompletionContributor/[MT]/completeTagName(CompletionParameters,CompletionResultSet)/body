{
  PsiElement element=parameters.getPosition();
  if (!isXmlNameCompletion(parameters))   return;
  result.stopHere();
  if (!(element.getParent() instanceof XmlTag) || !(parameters.getOriginalFile() instanceof XmlFile)) {
    return;
  }
  final XmlTag parent=(XmlTag)element.getParent();
  final String namespace=parent.getNamespace();
  final XmlElementDescriptor parentDescriptor=parent.getDescriptor();
  final String prefix=result.getPrefixMatcher().getPrefix();
  final int pos=prefix.indexOf(':');
  final String namespacePrefix=pos > 0 ? prefix.substring(0,pos) : null;
  final PsiReference reference=parent.getReference();
  if (reference != null && namespace.length() > 0 && parentDescriptor != null && !(parentDescriptor instanceof AnyXmlElementDescriptor)) {
    final Set<LookupElement> set=new HashSet<LookupElement>();
    new XmlCompletionData().completeReference(reference,set,element,parameters.getOriginalFile(),parameters.getOffset());
    for (    final LookupElement item : set) {
      result.addElement(item);
    }
  }
 else {
    final CompletionResultSet newResult=result.withPrefixMatcher(pos >= 0 ? prefix.substring(pos + 1) : prefix);
    final XmlFile file=(XmlFile)parameters.getOriginalFile();
    final List<Pair<String,String>> names=XmlExtension.getExtension(file).getAvailableTagNames(file,parent);
    for (    Pair<String,String> pair : names) {
      final String name=pair.getFirst();
      final String ns=pair.getSecond();
      final LookupElement item=createLookupElement(name,ns,ns,namespacePrefix);
      newResult.addElement(item);
    }
  }
}
