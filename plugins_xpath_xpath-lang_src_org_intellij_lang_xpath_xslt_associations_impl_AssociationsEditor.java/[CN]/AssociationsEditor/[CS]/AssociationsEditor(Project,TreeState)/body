{
  myManager=((FileAssociationsManagerImpl)FileAssociationsManager.getInstance(project)).getTempManager();
  final DefaultActionGroup group=new DefaultActionGroup();
  group.add(new AddAssociationActionWrapper());
  group.add(new RemoveAssociationAction());
  final ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar("AssociationsEditor",group,true);
  myToolbar.add(toolbar.getComponent(),new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
  final DefaultTreeModel treeModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myBuilder=new ProjectTreeBuilder(project,myTree,treeModel,new MyGroupByTypeComparator(),new MyProjectStructure(project));
  myTree.setModel(treeModel);
  myTree.setCellRenderer(new MyNodeRenderer(myManager));
  if (oldState == null) {
    expandTree(treeModel,project,myBuilder);
  }
 else {
    oldState.applyTo(myTree);
  }
  myListModel=new AssociationsModel(myTree,myManager);
  myListModel.addListDataListener(new ListDataListener(){
    public void intervalAdded(    ListDataEvent listDataEvent){
      myTree.invalidate();
      myTree.repaint();
    }
    public void intervalRemoved(    ListDataEvent listDataEvent){
      myTree.invalidate();
      myTree.repaint();
    }
    public void contentsChanged(    ListDataEvent listDataEvent){
    }
  }
);
  myList.setModel(myListModel);
  myList.setCellRenderer(new MyCellRenderer());
  myList.setMinimumSize(new Dimension(120,200));
  final int location=DimensionService.getInstance().getExtendedState(KEY);
  if (location == -1) {
    myList.setPreferredSize(myList.getMinimumSize());
    mySplitPane.resetToPreferredSizes();
  }
 else {
    mySplitPane.setDividerLocation(location);
  }
}
