{
  TextRange textRange=FileStatusMap.getDirtyTextRange(editor,Pass.LOCAL_INSPECTIONS);
  if (textRange == null || !InspectionProjectProfileManager.getInstance(file.getProject()).isProfileLoaded() || myFileTools.containsKey(file) && !myFileTools.get(file)) {
    return null;
  }
  return new LocalInspectionsPass(file,editor.getDocument(),0,file.getTextLength(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,true){
    List<LocalInspectionTool> getInspectionTools(    InspectionProfileWrapper profile){
      List<LocalInspectionTool> tools=super.getInspectionTools(profile);
      List<LocalInspectionTool> result=new ArrayList<LocalInspectionTool>();
      for (      LocalInspectionTool tool : tools) {
        if (tool.runForWholeFile())         result.add(tool);
      }
      myFileTools.put(file,!result.isEmpty());
      return result;
    }
    @Override protected String getPresentableName(){
      return DaemonBundle.message("pass.whole.inspections");
    }
    void inspectInjectedPsi(    PsiElement[] elements,    List<LocalInspectionTool> tools){
    }
  }
;
}
