{
  List<Evaluator> evaluators=new ArrayList<Evaluator>();
  PsiElement[] declaredElements=statement.getDeclaredElements();
  for (  PsiElement declaredElement : declaredElements) {
    if (declaredElement instanceof PsiLocalVariable) {
      if (myCurrentFragmentEvaluator != null) {
        PsiLocalVariable localVariable=((PsiLocalVariable)declaredElement);
        PsiType type=localVariable.getType();
        if (type == null) {
          throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",localVariable.getName())));
        }
        PsiElementFactory elementFactory=localVariable.getManager().getElementFactory();
        try {
          PsiExpression initialValue=elementFactory.createExpressionFromText(CodeInsightUtil.getDefaultValueOfType(type),null);
          Object value=ConstantExpressionEvaluator.computeConstantExpression(initialValue,null,true);
          myCurrentFragmentEvaluator.setInitialValue(localVariable.getName(),value);
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
catch (        EvaluateException e) {
          throw new EvaluateRuntimeException(e);
        }
        PsiExpression initializer=localVariable.getInitializer();
        if (initializer != null) {
          try {
            if (!TypeConversionUtil.areTypesAssignmentCompatible(localVariable.getType(),initializer)) {
              throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.incompatible.variable.initializer.type",localVariable.getName())));
            }
            initializer.accept(this);
            Evaluator rEvaluator=myResult;
            PsiExpression localVarReference=elementFactory.createExpressionFromText(localVariable.getName(),initializer);
            localVarReference.accept(this);
            Evaluator lEvaluator=myResult;
            evaluators.add(new AssignmentEvaluator(lEvaluator,rEvaluator));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
 else {
        throw new EvaluateRuntimeException(new EvaluateException(DebuggerBundle.message("evaluation.error.local.variable.declarations.not.supported"),null));
      }
    }
 else {
      throw new EvaluateRuntimeException(new EvaluateException(DebuggerBundle.message("evaluation.error.unsupported.declaration",declaredElement.getText()),null));
    }
  }
  if (evaluators.size() > 0) {
    CodeFragmentEvaluator codeFragmentEvaluator=new CodeFragmentEvaluator(myCurrentFragmentEvaluator);
    codeFragmentEvaluator.setStatements(evaluators.toArray(new Evaluator[0]));
    myResult=codeFragmentEvaluator;
  }
 else {
    myResult=null;
  }
}
