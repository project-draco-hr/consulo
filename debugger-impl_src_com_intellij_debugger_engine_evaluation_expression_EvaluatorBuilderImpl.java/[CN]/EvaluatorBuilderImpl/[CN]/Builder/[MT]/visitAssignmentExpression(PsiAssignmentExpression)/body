{
  PsiExpression rExpression=expression.getRExpression();
  if (rExpression == null)   throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.invalid.expression",expression.getText())));
  rExpression.accept(this);
  Evaluator rEvaluator=myResult;
  if (expression.getOperationSign().getTokenType() != JavaTokenType.EQ) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.operation.not.supported",expression.getOperationSign().getText())));
  }
  PsiExpression lExpression=expression.getLExpression();
  if (lExpression.getType() == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",lExpression.getText())));
  }
  if (!TypeConversionUtil.areTypesAssignmentCompatible(lExpression.getType(),rExpression)) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.incompatible.types",expression.getOperationSign().getText())));
  }
  lExpression.accept(this);
  Evaluator lEvaluator=myResult;
  myResult=new AssignmentEvaluator(lEvaluator,rEvaluator);
}
