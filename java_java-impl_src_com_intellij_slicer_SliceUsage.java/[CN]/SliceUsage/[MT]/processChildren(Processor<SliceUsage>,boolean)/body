{
  PsiElement element=getElement();
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  indicator.checkCanceled();
  Processor<SliceUsage> uniqueProcessor=new CommonProcessors.UniqueProcessor<SliceUsage>(processor,new TObjectHashingStrategy<SliceUsage>(){
    public int computeHashCode(    final SliceUsage object){
      return object.getUsageInfo().hashCode();
    }
    public boolean equals(    final SliceUsage o1,    final SliceUsage o2){
      return o1.getUsageInfo().equals(o2.getUsageInfo());
    }
  }
);
  if (dataFlowToThis) {
    SliceUtil.processUsagesFlownDownTo(element,uniqueProcessor,this,mySubstitutor);
  }
 else {
    SliceFUtil.processUsagesFlownFromThe(element,uniqueProcessor,this);
  }
}
