{
  if (!memberToRename.isPhysical()) {
    return;
  }
  final List<PsiReference> potentialConflicts=new ArrayList<PsiReference>();
  final PsiFile containingFile=memberToRename.getContainingFile();
  if (containingFile instanceof PsiJavaFile) {
    final PsiImportList importList=((PsiJavaFile)containingFile).getImportList();
    if (importList != null) {
      for (      PsiImportStaticStatement staticImport : importList.getImportStaticStatements()) {
        final String referenceName=staticImport.getReferenceName();
        if (referenceName != null && !referenceName.equals(newName)) {
          continue;
        }
        final PsiClass targetClass=staticImport.resolveTargetClass();
        if (targetClass != null) {
          final Set<PsiMember> importedMembers=new HashSet<PsiMember>();
          if (memberToRename instanceof PsiMethod) {
            for (            PsiMethod method : targetClass.findMethodsByName(newName,true)) {
              if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) {
                importedMembers.add(method);
              }
            }
          }
 else           if (memberToRename instanceof PsiField) {
            final PsiField fieldByName=targetClass.findFieldByName(newName,true);
            if (fieldByName != null) {
              importedMembers.add(fieldByName);
            }
          }
          for (          PsiMember member : importedMembers) {
            ReferencesSearch.search(member,new LocalSearchScope(containingFile),true).forEach(new Processor<PsiReference>(){
              public boolean process(              final PsiReference psiReference){
                potentialConflicts.add(psiReference);
                return true;
              }
            }
);
          }
        }
      }
    }
  }
  for (  PsiReference potentialConflict : potentialConflicts) {
    if (potentialConflict instanceof PsiJavaReference) {
      final JavaResolveResult resolveResult=((PsiJavaReference)potentialConflict).advancedResolve(false);
      final PsiElement conflictElement=resolveResult.getElement();
      if (conflictElement != null) {
        final PsiElement scope=resolveResult.getCurrentFileResolveScope();
        if (scope instanceof PsiImportStaticStatement) {
          result.add(new MemberHidesStaticImportUsageInfo(potentialConflict.getElement(),conflictElement,memberToRename));
        }
      }
    }
  }
}
