{
  IListManagerObjectFactory lmof=new IListManagerObjectFactory(){
    public IListManagerObject create(    String name){
      SecondaryMethodSetting sms=new SecondaryMethodSetting();
      sms.setDescription(name);
      return sms;
    }
    public List getObjectList(){
      return secondaryMethodList;
    }
  }
;
  ListManager Lmgr=new ListManager(lmof,"Description:");
  JPanel pmsPanel=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.fill=GridBagConstraints.NONE;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weightx=0.0d;
  constraints.weighty=0.0d;
  constraints.gridy=constraints.gridx=0;
  constraints.insets=new Insets(3,3,3,3);
  pmsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Primary (\"Getter\") Method Criteria"));
  constraints.gridwidth=1;
  constraints.gridy++;
  JLabel methodNamePatternLabel=new JLabel("Method name:");
  methodNamePatternLabel.setToolTipText("Regular expression which method name must match.  " + "If the method is to be matched to a field, there must be\n" + " at least one capture group (parenthesized subexpression) which will be treated as the field.\n"+ " In the case of a traditional getter method, this pattern is \"get(\\w+)\".");
  pmsPanel.add(methodNamePatternLabel,constraints);
  constraints.gridx++;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.weightx=.5;
  StringTextField primaryPrefixText=new StringTextField(){
    public void setValue(    String value){
      setMethodNamePattern(value);
    }
    public String getValue(){
      return getMethodNamePattern();
    }
  }
;
  pmsPanel.add(primaryPrefixText,constraints);
  constraints.fill=GridBagConstraints.NONE;
  constraints.weightx=0;
  constraints.gridx++;
  JLabel fieldCaptureGroupLabel=new JLabel("Field capture group:");
  fieldCaptureGroupLabel.setToolTipText("The number of the capture group in methodNamePattern which corresponds to the field name.  If the\n" + " methodNamePattern is \"get(\\w+)\", then the fieldCaptureGroupNumber is 1.");
  pmsPanel.add(fieldCaptureGroupLabel,constraints);
  IntTextField itf=new IntTextField(new IntTextField.IGetSet(){
    public void set(    int value){
      fieldCaptureGroupNumber=value;
    }
    public int get(){
      return fieldCaptureGroupNumber;
    }
  }
,null,null);
  constraints.gridx++;
  pmsPanel.add(itf,constraints);
  constraints.gridx++;
  JLabel nParamLabel=new JLabel("Number of parameters:");
  nParamLabel.setToolTipText("number of parameters the primary method must have.\n" + "In the case of a traditional getter method, this is zero.");
  pmsPanel.add(nParamLabel,constraints);
  constraints.gridx++;
  IntTextField nParamText=new IntTextField(new IntTextField.IGetSet(){
    public void set(    int value){
      numParameters=value;
    }
    public int get(){
      return numParameters;
    }
  }
,null,null);
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  pmsPanel.add(nParamText,constraints);
  constraints.gridx=0;
  constraints.gridy++;
  constraints.gridwidth=1;
  constraints.weightx=0;
  constraints.fill=GridBagConstraints.NONE;
  JLabel returnTypeLabel=new JLabel("Return type:");
  returnTypeLabel.setToolTipText("regular expression pattern of the type which primary method must return.\n" + " In the case of a traditional getter method, this is the field type.  One substitution is available:\n" + "     * %FT%  field type");
  pmsPanel.add(returnTypeLabel,constraints);
  constraints.gridx++;
  constraints.weightx=.5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  StringTextField returnTypeField=new StringTextField(){
    public void setValue(    String value){
      methodTypePattern=value;
    }
    public String getValue(){
      return methodTypePattern;
    }
  }
;
  pmsPanel.add(returnTypeField,constraints);
  constraints.fill=GridBagConstraints.NONE;
  constraints.gridx++;
  constraints.weightx=0;
  JLabel methodAttributeLabel=new JLabel("Method attributes:");
  methodAttributeLabel.setToolTipText("Protection level or other attributes for the method.\n" + "In the case of a getter method, this is usually \".*public.*\".");
  pmsPanel.add(methodAttributeLabel,constraints);
  StringTextField methodAttributeField=new StringTextField(){
    public void setValue(    String value){
      methodAttributePattern=value;
    }
    public String getValue(){
      return methodAttributePattern;
    }
  }
;
  constraints.gridx++;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.weightx=.5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  pmsPanel.add(methodAttributeField,constraints);
  constraints.gridx++;
  constraints.weightx=0;
  constraints.fill=GridBagConstraints.NONE;
  constraints.gridy++;
  constraints.gridx=0;
  JLabel bodyLabel=new JLabel("Body:");
  bodyLabel.setToolTipText("regular expression pattern of method body (excluding comments and newline characters).\n" + "Substitutions are available as follows:\n" + " %FN%  field name\n"+ " %FT%  field type (if field is valid field, else empty string)\n"+ " %MT%  method return type\n"+ " %P1%  parameter 1 name (%P2%, %P3% etc for additional parameters)\n"+ " %T1%  parameter 1 type name");
  constraints.gridwidth=1;
  constraints.weightx=0;
  constraints.fill=GridBagConstraints.NONE;
  pmsPanel.add(bodyLabel,constraints);
  constraints.gridx++;
  StringTextArea bodyField=new StringTextArea(){
    public void setValue(    String value){
      body=value;
    }
    public String getValue(){
      return body;
    }
  }
;
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.weightx=1;
  constraints.weighty=.35;
  constraints.fill=GridBagConstraints.BOTH;
  JScrollPane sp=new JScrollPane(bodyField);
  pmsPanel.add(sp,constraints);
  constraints.gridx=0;
  constraints.gridy++;
  constraints.gridheight=GridBagConstraints.REMAINDER;
  constraints.fill=GridBagConstraints.NONE;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=1;
  constraints.weighty=.65;
  final JPanel pane=Lmgr.getPane();
  pane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Related Methods"));
  pmsPanel.add(pane,constraints);
  return pmsPanel;
}
