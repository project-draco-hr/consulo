{
  final EclipseResolver eclipseResolver=new EclipseResolver(){
    final Map<String,String> existingModuleRoots=ClasspathStorage.getStorageRootMap(dstProject,null);
    @Nullable public String getProjectNameByPluginId(    final String id){
      return Util.getProjectNameByPluginId(getParameters().projectsToConvert,id);
    }
    @Nullable public String getRootByName(    final String name){
      String root=Util.getRootByName(getParameters().projectsToConvert,name);
      return root != null ? root : existingModuleRoots.get(name);
    }
  }
;
  final Ref<Exception> refEx=new Ref<Exception>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        ideaProjectModel=EclipseToIdeaConverter.convert(getParameters().projectsToConvert,eclipseResolver,EclipseClasspathStorageProvider.createLibraryResolver(dstProject),getParameters().converterOptions);
      }
 catch (      ConversionException e) {
        refEx.set(e);
      }
catch (      IOException e) {
        refEx.set(e);
      }
    }
  }
,EclipseBundle.message("eclipse.import.converting"),false,currentProject);
  if (!refEx.isNull()) {
    Messages.showErrorDialog(dstProject,refEx.get().getMessage(),getTitle());
    return false;
  }
  final HashMap<String,String> map=new HashMap<String,String>();
  for (  String v : ideaProjectModel.getVariables()) {
    map.put(v,null);
  }
  if (!ProjectMacrosUtil.checkMacros(dstProject,map)) {
    return false;
  }
  return true;
}
