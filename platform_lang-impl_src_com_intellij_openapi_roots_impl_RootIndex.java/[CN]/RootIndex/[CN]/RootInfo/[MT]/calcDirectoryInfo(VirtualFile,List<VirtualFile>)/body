{
  VirtualFile moduleContentRoot=findModuleRootInfo(hierarchy);
  VirtualFile libraryClassRoot=findLibraryRootInfo(hierarchy,false);
  VirtualFile librarySourceRoot=findLibraryRootInfo(hierarchy,true);
  if (moduleContentRoot == null && libraryClassRoot == null && librarySourceRoot == null) {
    return new Pair<DirectoryInfo,String>(null,null);
  }
  VirtualFile sourceRoot=findPackageRootInfo(hierarchy,moduleContentRoot,null,librarySourceRoot);
  VirtualFile moduleSourceRoot=findPackageRootInfo(hierarchy,moduleContentRoot,null,null);
  boolean inModuleSources=moduleSourceRoot != null;
  boolean inLibrarySource=librarySourceRoot != null;
  int typeId=moduleSourceRoot != null ? rootTypeId.get(moduleSourceRoot) : 0;
  OrderEntry[] entries=getOrderEntries(hierarchy,moduleContentRoot,libraryClassRoot,librarySourceRoot);
  DirectoryInfo directoryInfo=new DirectoryInfo(contentRootOf.get(moduleContentRoot),moduleContentRoot,sourceRoot,libraryClassRoot,(byte)DirectoryInfo.createSourceRootTypeData(inModuleSources,inLibrarySource,typeId),entries);
  String packagePrefix=calcPackagePrefix(root,hierarchy,moduleContentRoot,libraryClassRoot,librarySourceRoot);
  return Pair.create(directoryInfo,packagePrefix);
}
