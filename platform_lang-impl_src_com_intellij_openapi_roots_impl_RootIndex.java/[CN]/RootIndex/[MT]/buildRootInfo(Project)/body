{
  final RootInfo info=new RootInfo();
  for (  final Module module : ModuleManager.getInstance(project).getModules()) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    final ContentEntry[] contentEntries=moduleRootManager.getContentEntries();
    final VirtualFile[] contentRoots=moduleRootManager.getContentRoots();
    for (    final VirtualFile contentRoot : contentRoots) {
      if (!info.contentRootOf.containsKey(contentRoot)) {
        info.contentRootOf.put(contentRoot,module);
      }
    }
    for (    ContentEntry contentEntry : contentEntries) {
      for (      VirtualFile excludeRoot : contentEntry.getFolderFiles(ContentFolderScopes.excluded())) {
        info.excludedFromModule.put(excludeRoot,module);
      }
      ContentFolder[] sourceFolders=contentEntry.getFolders(ContentFolderScopes.all(false));
      for (      final ContentFolder sourceFolder : sourceFolders) {
        final VirtualFile sourceFolderRoot=sourceFolder.getFile();
        if (sourceFolderRoot != null) {
          info.rootTypeId.put(sourceFolderRoot,getRootTypeId(sourceFolder.getType()));
          info.classAndSourceRoots.add(sourceFolderRoot);
          info.sourceRootOf.putValue(sourceFolderRoot,module);
          info.packagePrefix.put(sourceFolderRoot,"");
        }
      }
    }
    for (    OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof ModuleOrderEntry) {
        final Module depModule=((ModuleOrderEntry)orderEntry).getModule();
        if (depModule != null) {
          VirtualFile[] importedClassRoots=OrderEnumerator.orderEntries(depModule).exportedOnly().recursively().classes().usingCache().getRoots();
          for (          VirtualFile importedClassRoot : importedClassRoots) {
            info.depEntries.putValue(importedClassRoot,orderEntry);
          }
        }
        for (        VirtualFile sourceRoot : orderEntry.getFiles(OrderRootType.SOURCES)) {
          info.depEntries.putValue(sourceRoot,orderEntry);
        }
      }
 else       if (orderEntry instanceof LibraryOrSdkOrderEntry) {
        final LibraryOrSdkOrderEntry entry=(LibraryOrSdkOrderEntry)orderEntry;
        final VirtualFile[] sourceRoots=entry.getRootFiles(OrderRootType.SOURCES);
        final VirtualFile[] classRoots=entry.getRootFiles(OrderRootType.CLASSES);
        for (        final VirtualFile sourceRoot : sourceRoots) {
          info.classAndSourceRoots.add(sourceRoot);
          info.libSourceRootEntries.putValue(sourceRoot,orderEntry);
          info.packagePrefix.put(sourceRoot,"");
        }
        for (        final VirtualFile classRoot : classRoots) {
          info.classAndSourceRoots.add(classRoot);
          info.libClassRootEntries.putValue(classRoot,orderEntry);
          info.packagePrefix.put(classRoot,"");
        }
        if (orderEntry instanceof LibraryOrderEntry) {
          Library library=((LibraryOrderEntry)orderEntry).getLibrary();
          if (library != null) {
            for (            VirtualFile root : ((LibraryEx)library).getExcludedRoots()) {
              info.excludedFromLibraries.putValue(root,library);
            }
            for (            VirtualFile root : sourceRoots) {
              info.sourceOfLibraries.putValue(root,library);
            }
            for (            VirtualFile root : classRoots) {
              info.classOfLibraries.putValue(root,library);
            }
          }
        }
      }
    }
  }
  for (  DirectoryIndexExcludePolicy policy : Extensions.getExtensions(DirectoryIndexExcludePolicy.EP_NAME,project)) {
    Collections.addAll(info.excludedFromProject,policy.getExcludeRootsForProject());
  }
  return info;
}
