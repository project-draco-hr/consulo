{
  List<VirtualFile> result=myDirectoriesByPackageNameCache.get(packageName);
  if (result == null) {
    if (myNonExistentPackages.contains(packageName))     return EmptyQuery.getEmptyQuery();
    result=ContainerUtil.newSmartList();
    if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName,'.')) {
      int i=packageName.lastIndexOf('.');
      while (true) {
        String shortName=packageName.substring(i + 1);
        String parentPackage=i > 0 ? packageName.substring(0,i) : "";
        for (        VirtualFile parentDir : getDirectoriesByPackageName(parentPackage,true)) {
          VirtualFile child=parentDir.findChild(shortName);
          if (child != null && child.isDirectory() && getInfoForFile(child).isInProject() && packageName.equals(getPackageName(child))) {
            result.add(child);
          }
        }
        if (i < 0)         break;
        i=packageName.lastIndexOf('.',i - 1);
      }
    }
    for (    VirtualFile file : myPackagePrefixRoots.get(packageName)) {
      if (file.isDirectory()) {
        result.add(file);
      }
    }
    if (!result.isEmpty()) {
      myDirectoriesByPackageNameCache.put(packageName,result);
    }
 else {
      myNonExistentPackages.add(packageName);
    }
  }
  if (!includeLibrarySources) {
    result=ContainerUtil.filter(result,new Condition<VirtualFile>(){
      @Override public boolean value(      VirtualFile file){
        DirectoryInfo info=getInfoForFile(file);
        return info.isInProject() && (!info.isInLibrarySource() || info.isInModuleSource() || info.hasLibraryClassRoot());
      }
    }
);
  }
  return new CollectionQuery<VirtualFile>(result);
}
