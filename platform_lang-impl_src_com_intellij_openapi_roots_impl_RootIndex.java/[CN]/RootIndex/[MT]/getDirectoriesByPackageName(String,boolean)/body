{
  List<VirtualFile> result=myDirectoriesByPackageNameCache.get(packageName);
  if (result == null) {
    result=ContainerUtil.newSmartList();
    if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName,'.')) {
      String shortName=StringUtil.getShortName(packageName);
      for (      VirtualFile parentDir : getDirectoriesByPackageName(StringUtil.getPackageName(packageName),true)) {
        VirtualFile child=parentDir.findChild(shortName);
        if (child != null && child.isDirectory() && getInfoForDirectory(child) != null && packageName.equals(getPackageName(child))) {
          result.add(child);
        }
      }
    }
    result.addAll(myPackagePrefixRoots.get(packageName));
    if (!result.isEmpty()) {
      myDirectoriesByPackageNameCache.put(packageName,result);
    }
  }
  if (!includeLibrarySources) {
    result=ContainerUtil.filter(result,new Condition<VirtualFile>(){
      @Override public boolean value(      VirtualFile file){
        DirectoryInfo info=getInfoForDirectory(file);
        return info != null && (!info.isInLibrarySource() || info.isInModuleSource() || info.hasLibraryClassRoot());
      }
    }
);
  }
  return new CollectionQuery<VirtualFile>(result);
}
