{
  VirtualFile moduleContentRoot=info.findModuleRootInfo(hierarchy);
  VirtualFile libraryClassRoot=info.findLibraryRootInfo(hierarchy,false);
  VirtualFile librarySourceRoot=info.findLibraryRootInfo(hierarchy,true);
  if (moduleContentRoot == null && libraryClassRoot == null && librarySourceRoot == null) {
    return new Pair<DirectoryInfo,String>(null,null);
  }
  VirtualFile sourceRoot=info.findPackageRootInfo(hierarchy,moduleContentRoot,null,librarySourceRoot);
  VirtualFile moduleSourceRoot=info.findPackageRootInfo(hierarchy,moduleContentRoot,null,null);
  boolean inModuleSources=moduleSourceRoot != null;
  boolean inLibrarySource=librarySourceRoot != null;
  int typeId=moduleSourceRoot != null ? info.rootTypeId.get(moduleSourceRoot) : 0;
  DirectoryInfo directoryInfo=new DirectoryInfo(info.contentRootOf.get(moduleContentRoot),moduleContentRoot,sourceRoot,libraryClassRoot,(byte)DirectoryInfo.createSourceRootTypeData(inModuleSources,inLibrarySource,typeId),null){
    @NotNull @Override public OrderEntry[] getOrderEntries(){
      OrderEntry[] entries=RootIndex.this.getOrderEntries().get(root);
      return entries == null ? OrderEntry.EMPTY_ARRAY : entries;
    }
  }
;
  String packagePrefix=info.calcPackagePrefix(root,hierarchy,moduleContentRoot,libraryClassRoot,librarySourceRoot);
  return Pair.create(directoryInfo,packagePrefix);
}
