{
  VirtualFile moduleContentRoot=info.findModuleRootInfo(hierarchy);
  VirtualFile libraryClassRoot=info.findLibraryRootInfo(hierarchy,false);
  VirtualFile librarySourceRoot=info.findLibraryRootInfo(hierarchy,true);
  boolean inProject=moduleContentRoot != null || libraryClassRoot != null || librarySourceRoot != null;
  VirtualFile nearestContentRoot;
  if (inProject) {
    nearestContentRoot=moduleContentRoot;
  }
 else {
    nearestContentRoot=info.findNearestContentRootForExcluded(hierarchy);
    if (nearestContentRoot == null) {
      return new Pair<DirectoryInfo,String>(NonProjectDirectoryInfo.EXCLUDED,null);
    }
  }
  VirtualFile sourceRoot=info.findPackageRootInfo(hierarchy,moduleContentRoot,null,librarySourceRoot);
  VirtualFile moduleSourceRoot=info.findPackageRootInfo(hierarchy,moduleContentRoot,null,null);
  boolean inModuleSources=moduleSourceRoot != null;
  boolean inLibrarySource=librarySourceRoot != null;
  int typeId=moduleSourceRoot != null ? info.rootTypeId.get(moduleSourceRoot) : 0;
  Module module=info.contentRootOf.get(nearestContentRoot);
  DirectoryInfo directoryInfo=new DirectoryInfoImpl(root,module,nearestContentRoot,sourceRoot,libraryClassRoot,inModuleSources,inLibrarySource,!inProject,typeId);
  String packagePrefix=info.calcPackagePrefix(root,hierarchy,moduleContentRoot,libraryClassRoot,librarySourceRoot);
  return Pair.create(directoryInfo,packagePrefix);
}
