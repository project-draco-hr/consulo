{
  for (  final Module module : ModuleManager.getInstance(project).getModules()) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    final ContentEntry[] contentEntries=moduleRootManager.getContentEntries();
    final VirtualFile[] contentRoots=moduleRootManager.getContentRoots();
    for (    final VirtualFile contentRoot : contentRoots) {
      RootInfo info=getOrCreateRootInfo(contentRoot);
      if (info.contentRootOf == null) {
        info.contentRootOf=module;
      }
    }
    for (    ContentEntry contentEntry : contentEntries) {
      for (      VirtualFile excludeRoot : contentEntry.getFolderFiles(ContentFolderScopes.excluded())) {
        RootInfo info=getOrCreateRootInfo(excludeRoot);
        info.excludedFromModule=module;
      }
      ContentFolder[] sourceFolders=contentEntry.getFolders(ContentFolderScopes.all(false));
      for (      final ContentFolder sourceFolder : sourceFolders) {
        final VirtualFile sourceFolderRoot=sourceFolder.getFile();
        if (sourceFolderRoot != null) {
          final RootInfo info=getOrCreateRootInfo(sourceFolderRoot);
          info.rootTypeId=getRootTypeId(sourceFolder.getType());
          info.sourceRootOf.add(module);
        }
      }
    }
    for (    OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof ModuleOrderEntry) {
        final Module depModule=((ModuleOrderEntry)orderEntry).getModule();
        if (depModule != null) {
          VirtualFile[] importedClassRoots=OrderEnumerator.orderEntries(depModule).exportedOnly().recursively().classes().usingCache().getRoots();
          for (          VirtualFile importedClassRoot : importedClassRoots) {
            getOrCreateRootInfo(importedClassRoot).depEntries.add(orderEntry);
          }
        }
        for (        VirtualFile sourceRoot : orderEntry.getFiles(OrderRootType.SOURCES)) {
          getOrCreateRootInfo(sourceRoot).depEntries.add(orderEntry);
        }
      }
 else       if (orderEntry instanceof LibraryOrSdkOrderEntry) {
        final LibraryOrSdkOrderEntry entry=(LibraryOrSdkOrderEntry)orderEntry;
        final VirtualFile[] sourceRoots=entry.getRootFiles(OrderRootType.SOURCES);
        final VirtualFile[] classRoots=entry.getRootFiles(OrderRootType.CLASSES);
        for (        final VirtualFile sourceRoot : sourceRoots) {
          final RootInfo info=getOrCreateRootInfo(sourceRoot);
          info.libSourceRootEntries.add(orderEntry);
        }
        for (        final VirtualFile classRoot : classRoots) {
          final RootInfo info=getOrCreateRootInfo(classRoot);
          info.libClassRootEntries.add(orderEntry);
        }
        if (orderEntry instanceof LibraryOrderEntry) {
          Library library=((LibraryOrderEntry)orderEntry).getLibrary();
          if (library != null) {
            for (            VirtualFile root : ((LibraryEx)library).getExcludedRoots()) {
              getOrCreateRootInfo(root).excludedFromLibraries.add(library);
            }
            for (            VirtualFile root : sourceRoots) {
              getOrCreateRootInfo(root).sourceOfLibraries.add(library);
            }
            for (            VirtualFile root : classRoots) {
              getOrCreateRootInfo(root).classOfLibraries.add(library);
            }
          }
        }
      }
    }
  }
  for (  DirectoryIndexExcludePolicy policy : Extensions.getExtensions(DirectoryIndexExcludePolicy.EP_NAME,project)) {
    for (    VirtualFile root : policy.getExcludeRootsForProject()) {
      getOrCreateRootInfo(root).excludedFromProject=true;
    }
  }
  for (  RootInfo info : myRoots.values()) {
    List<RootInfo> hierarchy=getHierarchy(info);
    Pair<DirectoryInfo,String> pair=hierarchy == null ? new Pair<DirectoryInfo,String>(null,null) : calcDirectoryInfo(info,hierarchy);
    cacheInfos(info.root,info.root,pair.first);
    myPackagePrefixRoots.putValue(pair.second,info.root);
    if (shouldMarkAsProjectExcluded(info,hierarchy)) {
      myProjectExcludedRoots.add(info.root);
    }
  }
}
