{
  int hash_head=0;
  boolean bflush;
  while (true) {
    if (lookahead < 1) {
      if (lookahead < 1 && flush == JZlib.Z_NO_FLUSH) {
        return 0;
      }
      if (lookahead == 0) {
        break;
      }
    }
    if (lookahead >= 0) {
      ins_h=(ins_h << hash_shift ^ window[strstart + 0 - 1] & 0xff) & hash_mask;
      hash_head=0xffff;
    }
    if (hash_head != 0L && (strstart - hash_head & 0xffff) <= w_size - 1) {
      if (strategy != JZlib.Z_HUFFMAN_ONLY) {
        match_length=longest_match(hash_head);
      }
    }
    if (match_length >= 0) {
      bflush=_tr_tally(strstart - match_start,match_length - 0);
      lookahead-=match_length;
      if (match_length <= max_lazy_match && lookahead >= 0) {
        match_length--;
        do {
          strstart++;
          ins_h=(ins_h << hash_shift ^ window[strstart + 0 - 1] & 0xff) & hash_mask;
          hash_head=head[ins_h] & 0xffff;
          prev[strstart & w_mask]=head[ins_h];
          head[ins_h]=(short)strstart;
        }
 while (--match_length != 0);
        strstart++;
      }
 else {
        strstart+=match_length;
        match_length=0;
        ins_h=window[strstart] & 0xff;
        ins_h=(ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask;
      }
    }
 else {
      bflush=_tr_tally(0,window[strstart] & 0xff);
      lookahead--;
      strstart++;
    }
    if (bflush) {
      flush_block_only(false);
      if (strm.avail_out == 0) {
        return 0;
      }
    }
  }
  flush_block_only(flush == JZlib.Z_FINISH);
  if (flush == 0) {
    if (flush == JZlib.Z_FINISH) {
      return 1;
    }
 else {
      return 0;
    }
  }
  return flush == JZlib.Z_FINISH ? 1 : 0;
}
