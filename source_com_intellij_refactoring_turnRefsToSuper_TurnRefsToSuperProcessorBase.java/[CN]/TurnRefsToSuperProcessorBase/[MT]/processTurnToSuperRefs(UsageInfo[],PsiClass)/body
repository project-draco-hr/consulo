{
  HashSet<PsiFile> fileSet=new HashSet<PsiFile>();
  for (int i=0; i < usages.length; i++) {
    UsageInfo usage=usages[i];
    if (usage.getElement() == null || !usage.getElement().isValid())     continue;
    if (!(usage instanceof TurnToSuperReferenceUsageInfo))     continue;
    fileSet.add(usage.getElement().getContainingFile());
    PsiElement newElement=usage.getElement().getReference().bindToElement(aSuper);
    if (newElement.getParent() instanceof PsiTypeElement) {
      if (newElement.getParent().getParent() instanceof PsiTypeCastExpression) {
        fixPossiblyRedundantCast((PsiTypeCastExpression)newElement.getParent().getParent());
      }
    }
  }
  for (Iterator<PsiFile> iterator=fileSet.iterator(); iterator.hasNext(); ) {
    PsiFile file=iterator.next();
    PsiReference[] refs=mySearchHelper.findReferences(myClass,new LocalSearchScope(file),false);
    if (refs.length == 1 && refs[0].getElement().getParent() instanceof PsiImportStatement) {
      refs[0].getElement().getParent().delete();
    }
  }
}
