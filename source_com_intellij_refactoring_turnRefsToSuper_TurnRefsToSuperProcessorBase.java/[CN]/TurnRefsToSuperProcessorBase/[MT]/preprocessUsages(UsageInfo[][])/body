{
  UsageInfo[] usages=usagesRef[0];
  List<UsageInfo> filtered=new ArrayList<UsageInfo>();
  for (int i=0; i < usages.length; i++) {
    UsageInfo usage=usages[i];
    if (usage instanceof TurnToSuperReferenceUsageInfo) {
      filtered.add(usage);
    }
  }
  myVariableRenamer=new AutomaticVariableRenamer(myClass,mySuperClassName,filtered);
  if (myVariableRenamer.hasAnythingToRename()) {
    final AutomaticRenamingDialog dialog=new AutomaticRenamingDialog(myProject,myVariableRenamer);
    dialog.show();
    if (!dialog.isOK())     return false;
    final List<? extends PsiVariable> variables=myVariableRenamer.getElements();
    for (Iterator<? extends PsiVariable> iterator1=variables.iterator(); iterator1.hasNext(); ) {
      final PsiVariable variable=iterator1.next();
      myVariablesRenames.put(variable,myVariableRenamer.getNewName(variable));
    }
    Runnable runnable=new Runnable(){
      public void run(){
        myVariableRenamer.findUsages(myVariablesUsages,false,false);
      }
    }
;
    if (!ApplicationManager.getApplication().runProcessWithProgressSynchronously(runnable,"Searching for variables",true,myProject)) {
      return false;
    }
  }
  prepareSuccessful();
  return true;
}
