{
  final List<PluginId> ids=new ArrayList<PluginId>(idToDescriptorMap.keySet());
  Collections.sort(ids,new Comparator<PluginId>(){
    @Override public int compare(    PluginId o1,    PluginId o2){
      return o2.getIdString().compareTo(o1.getIdString());
    }
  }
);
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<PluginId>(){
    @Override public Collection<PluginId> getNodes(){
      return ids;
    }
    @Override public Iterator<PluginId> getIn(    PluginId pluginId){
      final IdeaPluginDescriptor descriptor=idToDescriptorMap.get(pluginId);
      ArrayList<PluginId> plugins=new ArrayList<PluginId>();
      for (      PluginId dependentPluginId : descriptor.getDependentPluginIds()) {
        if (idToDescriptorMap.containsKey(dependentPluginId)) {
          plugins.add(dependentPluginId);
        }
      }
      return plugins.iterator();
    }
  }
));
}
