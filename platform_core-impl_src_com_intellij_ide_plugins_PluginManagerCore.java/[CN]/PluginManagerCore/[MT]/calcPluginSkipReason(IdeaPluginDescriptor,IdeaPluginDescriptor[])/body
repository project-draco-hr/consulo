{
  final String idString=descriptor.getPluginId().getIdString();
  if (descriptor.getPluginId().equals(CORE_PLUGIN)) {
    return PluginSkipReason.NO;
  }
  final String pluginId=System.getProperty("idea.load.plugins.id");
  if (pluginId == null) {
    if (descriptor instanceof IdeaPluginDescriptorImpl && !descriptor.isEnabled())     return PluginSkipReason.DISABLED;
    if (!shouldLoadPlugins())     return PluginSkipReason.DISABLED;
  }
  final List<String> pluginIds=pluginId == null ? null : StringUtil.split(pluginId,",");
  boolean shouldLoad;
  final String loadPluginCategory=System.getProperty("idea.load.plugins.category");
  if (loadPluginCategory != null) {
    shouldLoad=loadPluginCategory.equals(descriptor.getCategory());
  }
 else {
    if (pluginIds != null) {
      shouldLoad=pluginIds.contains(idString);
      if (!shouldLoad) {
        Map<PluginId,IdeaPluginDescriptor> map=new HashMap<PluginId,IdeaPluginDescriptor>();
        for (        final IdeaPluginDescriptor pluginDescriptor : loaded) {
          map.put(pluginDescriptor.getPluginId(),pluginDescriptor);
        }
        final IdeaPluginDescriptor descriptorFromProperty=map.get(PluginId.getId(pluginId));
        shouldLoad=descriptorFromProperty != null && isDependent(descriptorFromProperty,descriptor.getPluginId(),map);
      }
    }
 else {
      shouldLoad=!getDisabledPlugins().contains(idString);
    }
    if (shouldLoad && descriptor instanceof IdeaPluginDescriptorImpl) {
      if (isIncompatible(descriptor))       return PluginSkipReason.INCOMPATIBLE;
    }
  }
  return !shouldLoad ? PluginSkipReason.DEPENDENCY_IS_NOT_RESOLVED : PluginSkipReason.NO;
}
