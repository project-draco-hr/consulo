{
  if (ClassUtilCore.isLoadingOfExternalPluginsDisabled()) {
    return IdeaPluginDescriptorImpl.EMPTY_ARRAY;
  }
  final List<IdeaPluginDescriptorImpl> result=new ArrayList<IdeaPluginDescriptorImpl>();
  int pluginsCount=countPlugins(PathManager.getPluginsPath()) + countPlugins(PathManager.getPreInstalledPluginsPath());
  loadDescriptors(PathManager.getPluginsPath(),result,progress,pluginsCount);
  loadDescriptors(PathManager.getPreInstalledPluginsPath(),result,progress,pluginsCount);
  loadDescriptorsFromProperty(result);
  loadDescriptorsFromClassPath(result,null);
  IdeaPluginDescriptorImpl[] pluginDescriptors=result.toArray(new IdeaPluginDescriptorImpl[result.size()]);
  try {
    Arrays.sort(pluginDescriptors,new PluginDescriptorComparator(pluginDescriptors));
  }
 catch (  Exception e) {
    prepareLoadingPluginsErrorMessage(IdeBundle.message("error.plugins.were.not.loaded",e.getMessage()));
    getLogger().info(e);
    return findCorePlugin(pluginDescriptors);
  }
  return pluginDescriptors;
}
