{
  final List<IdeaPluginDescriptorImpl> result=new ArrayList<IdeaPluginDescriptorImpl>();
  int pluginsCount=countPlugins(PathManager.getPluginsPath()) + countPlugins(PathManager.getPreInstalledPluginsPath());
  loadDescriptors(PathManager.getPluginsPath(),result,progress,pluginsCount);
  loadDescriptors(PathManager.getPreInstalledPluginsPath(),result,progress,pluginsCount);
  loadDescriptorsFromProperty(result);
  if (Boolean.getBoolean(ApplicationProperties.CONSULO_IN_UNIT_TEST)) {
    IdeaPluginDescriptorImpl pluginDescriptor=new IdeaPluginDescriptorImpl(new File(PathManager.getPreInstalledPluginsPath(),"unittest"));
    pluginDescriptor.setId(UNIT_TEST_PLUGIN);
    List<PluginId> map=ContainerUtil.map(result,new Function<IdeaPluginDescriptorImpl,PluginId>(){
      @Override public PluginId fun(      IdeaPluginDescriptorImpl ideaPluginDescriptor){
        return ideaPluginDescriptor.getPluginId();
      }
    }
);
    pluginDescriptor.setDependencies(ContainerUtil.toArray(map,PluginId.EMPTY_ARRAY));
    result.add(pluginDescriptor);
  }
  IdeaPluginDescriptorImpl[] pluginDescriptors=result.toArray(new IdeaPluginDescriptorImpl[result.size()]);
  final Map<PluginId,IdeaPluginDescriptorImpl> idToDescriptorMap=new THashMap<PluginId,IdeaPluginDescriptorImpl>();
  for (  IdeaPluginDescriptorImpl descriptor : pluginDescriptors) {
    idToDescriptorMap.put(descriptor.getPluginId(),descriptor);
  }
  Arrays.sort(pluginDescriptors,getPluginDescriptorComparator(idToDescriptorMap));
  return pluginDescriptors;
}
