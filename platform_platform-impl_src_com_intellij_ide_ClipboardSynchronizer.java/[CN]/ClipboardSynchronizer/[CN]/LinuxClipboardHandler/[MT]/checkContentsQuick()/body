{
  final Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
  final Class<? extends Clipboard> aClass=clipboard.getClass();
  if (!"sun.awt.X11.XClipboard".equals(aClass.getName()))   return null;
  final Method getClipboardFormats;
  try {
    getClipboardFormats=aClass.getDeclaredMethod("getClipboardFormats");
    getClipboardFormats.setAccessible(true);
  }
 catch (  Exception ignore) {
    return null;
  }
  final String timeout=System.getProperty(DATA_TRANSFER_TIMEOUT_PROPERTY);
  System.setProperty(DATA_TRANSFER_TIMEOUT_PROPERTY,SHORT_TIMEOUT);
  try {
    final long[] formats=(long[])getClipboardFormats.invoke(clipboard);
    if (formats == null || formats.length == 0) {
      return Collections.emptySet();
    }
    for (int i=0, length=formats.length; i < length; i++) {
      if (formats[i] == 0)       return Collections.emptySet();
    }
    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) final Set<DataFlavor> set=DataTransferer.getInstance().getFlavorsForFormats(formats,FLAVOR_MAP).keySet();
    return set;
  }
 catch (  IllegalAccessException ignore) {
  }
catch (  IllegalArgumentException ignore) {
  }
catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof IllegalStateException) {
      throw (IllegalStateException)cause;
    }
  }
 finally {
    System.setProperty(DATA_TRANSFER_TIMEOUT_PROPERTY,timeout);
  }
  return null;
}
