{
  final InspectionManagerEx managerEx=((InspectionManagerEx)InspectionManagerEx.getInstance(project));
  final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(project);
  final InspectionProfileImpl profile=new InspectionProfileImpl(profileManager.getProfileName(file));
  final ModifiableModel model=profile.getModifiableModel();
  final InspectionProfileEntry[] profileEntries=model.getInspectionTools();
  model.patchTool(profileManager.getInspectionProfile(file).getInspectionTool(myTool.getShortName()));
  for (  InspectionProfileEntry entry : profileEntries) {
    model.disableTool(entry.getShortName());
  }
  model.enableTool(myTool.getShortName());
  model.setEditable(myTool.getDisplayName());
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  final BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(AnalysisScopeBundle.message("specify.analysis.scope",InspectionsBundle.message("inspection.action.title")),AnalysisScopeBundle.message("analysis.scope.title",InspectionsBundle.message("inspection.action.noun")),project,AnalysisScopeBundle.message("scope.file",VfsUtil.calcRelativeToProjectPath(file.getVirtualFile(),file.getProject())),module != null ? module.getName() : null,true);
  AnalysisScope scope=new AnalysisScope(file);
  dlg.show();
  if (!dlg.isOK())   return;
  final UIOptions uiOptions=((InspectionManagerEx)InspectionManagerEx.getInstance(project)).getUIOptions();
  scope=dlg.getScope(uiOptions,scope,project,module);
  final GlobalInspectionContextImpl inspectionContext=managerEx.createNewGlobalContext(false);
  inspectionContext.setExternalProfile((InspectionProfile)model);
  inspectionContext.RUN_WITH_EDITOR_PROFILE=false;
  inspectionContext.doInspections(scope,managerEx);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      inspectionContext.setExternalProfile(null);
    }
  }
);
}
