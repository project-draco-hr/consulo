{
  final Set<String> namespaces=new HashSet<String>(Arrays.asList(context.knownNamespaces()));
  final List<XmlSchemaProvider> providers=XmlSchemaProvider.getAvailableProviders(file);
  for (  XmlSchemaProvider provider : providers) {
    namespaces.addAll(provider.getAvailableNamespaces(file,null));
  }
  List<String> nsInfo=new ArrayList<String>();
  List<XmlElementDescriptor> descriptors=TagNameVariantCollector.getTagDescriptors(context,namespaces,nsInfo);
  final List<TagInfo> set=new ArrayList<TagInfo>();
  for (int i=0; i < descriptors.size(); i++) {
    final XmlElementDescriptor descriptor=descriptors.get(i);
    String qualifiedName=descriptor.getName(context);
    final int pos=qualifiedName.indexOf(':');
    final String name=pos >= 0 ? qualifiedName.substring(pos + 1) : qualifiedName;
    set.add(new TagInfo(name,nsInfo.get(i)){
      @Nullable @Override public PsiElement getDeclaration(){
        return descriptor.getDeclaration();
      }
    }
);
  }
  return set;
}
