@monkeypatch_method(passwordmgr)
def find_user_password(self, realm, authuri):
    try:
        return original_retrievepass(self, realm, authuri)
    except util.Abort:
        if getattr(self, 'readauthtoken', None):

            def read_hgrc_authtoken(ui, authuri):
                return self.readauthtoken(authuri)
        else:

            def read_hgrc_authtoken(ui, authuri):
                from mercurial.url import readauthforuri
                res = readauthforuri(self.ui, authuri)
                if res:
                    (group, auth) = res
                    return auth
                else:
                    return None
        (user, password) = urllib2.HTTPPasswordMgrWithDefaultRealm.find_user_password(self, realm, authuri)
        if (user is None):
            auth = read_hgrc_authtoken(self.ui, authuri)
            if auth:
                user = auth.get('username')
        (reduced_uri, path) = self.reduce_uri(authuri, False)
        retrievedPass = retrieve_pass_from_server(self.ui, reduced_uri, path, user)
        if (retrievedPass is None):
            raise util.Abort(_('http authorization required'))
        (user, passwd) = retrievedPass
        self.add_password(realm, authuri, user, passwd)
        return retrievedPass
