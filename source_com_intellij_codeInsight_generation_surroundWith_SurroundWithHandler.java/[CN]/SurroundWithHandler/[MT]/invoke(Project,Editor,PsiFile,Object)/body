{
  if (!file.isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(editor.getDocument(),project)) {
      return;
    }
  }
  if (!editor.getSelectionModel().hasSelection()) {
    editor.getSelectionModel().selectLineAtCaret();
  }
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PopupActionChooser chooser=null;
  final PsiElement[] elements;
  final PsiElement container;
  final PsiExpression expr;
  expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
  if (expr != null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.surroundwith.expression");
    chooser=ourExpressionActionChooser;
    elements=null;
    container=null;
  }
 else {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.surroundwith.statement");
    elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
    if (elements != null && elements.length > 0) {
      container=elements[0].getParent();
      chooser=ourStatementActionChooser;
    }
 else {
      container=null;
    }
  }
  if (chooser == null)   return;
  chooser.setShowNumbers(true);
  PopupActionChooser.Callback callback=new PopupActionChooser.Callback(){
    public boolean isApplicable(    Object actionObject){
      if (actionObject instanceof SurroundStatementsHandler) {
        return true;
      }
 else       if (actionObject instanceof SurroundExpressionHandler) {
        SurroundExpressionHandler handler=(SurroundExpressionHandler)actionObject;
        return handler.isApplicable(expr);
      }
 else {
        return false;
      }
    }
    public void execute(    Object actionObject){
      PsiDocumentManager.getInstance(project).commitAllDocuments();
      int col=editor.getCaretModel().getLogicalPosition().column;
      int line=editor.getCaretModel().getLogicalPosition().line;
      LogicalPosition pos=new LogicalPosition(0,0);
      editor.getCaretModel().moveToLogicalPosition(pos);
      TextRange range=null;
      try {
        if (actionObject instanceof SurroundStatementsHandler) {
          SurroundStatementsHandler handler=(SurroundStatementsHandler)actionObject;
          range=handler.surroundStatements(project,editor,container,elements);
        }
 else         if (actionObject instanceof SurroundExpressionHandler) {
          SurroundExpressionHandler handler=(SurroundExpressionHandler)actionObject;
          range=handler.surroundExpression(project,editor,expr);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      LogicalPosition pos1=new LogicalPosition(line,col);
      editor.getCaretModel().moveToLogicalPosition(pos1);
      if (range != null) {
        int offset=range.getStartOffset();
        editor.getCaretModel().moveToOffset(offset);
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
      }
    }
  }
;
  if (handler == null) {
    chooser.invoke(project,editor,callback);
  }
 else {
    callback.execute(handler);
  }
}
