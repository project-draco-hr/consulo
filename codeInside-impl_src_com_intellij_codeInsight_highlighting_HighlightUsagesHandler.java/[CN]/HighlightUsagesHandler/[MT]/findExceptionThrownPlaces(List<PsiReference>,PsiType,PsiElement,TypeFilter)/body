{
  if (type instanceof PsiClassType) {
    block.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      public void visitThrowStatement(      PsiThrowStatement statement){
        super.visitThrowStatement(statement);
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(statement,block);
        if (exceptionTypes != null) {
          for (          final PsiClassType actualType : exceptionTypes) {
            if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
              if (!(statement.getException() instanceof PsiNewExpression))               continue;
              PsiJavaCodeReferenceElement ref=((PsiNewExpression)statement.getException()).getClassReference();
              if (refs.contains(ref))               continue;
              refs.add(ref);
            }
          }
        }
      }
      public void visitMethodCallExpression(      PsiMethodCallExpression expression){
        super.visitMethodCallExpression(expression);
        if (refs.contains(expression.getMethodExpression().getReference()))         return;
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,block);
        for (        final PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
            refs.add(expression.getMethodExpression().getReference());
          }
        }
      }
      public void visitNewExpression(      PsiNewExpression expression){
        super.visitNewExpression(expression);
        if (refs.contains(expression.getClassReference()))         return;
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,block);
        for (        PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
            refs.add(expression.getClassReference());
          }
        }
      }
    }
);
  }
}
