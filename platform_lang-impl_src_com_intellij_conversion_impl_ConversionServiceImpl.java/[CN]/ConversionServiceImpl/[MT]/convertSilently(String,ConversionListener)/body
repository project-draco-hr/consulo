{
  try {
    if (!isConversionNeeded(projectPath)) {
      return ConversionResultImpl.CONVERSION_NOT_NEEDED;
    }
    listener.conversionNeeded();
    ConversionContextImpl context=new ConversionContextImpl(projectPath);
    final List<ConversionRunner> runners=getConversionRunners(context);
    Set<File> affectedFiles=new HashSet<File>();
    for (    ConversionRunner runner : runners) {
      affectedFiles.addAll(runner.getAffectedFiles());
    }
    final List<File> readOnlyFiles=ConversionRunner.getReadOnlyFiles(affectedFiles);
    if (!readOnlyFiles.isEmpty()) {
      listener.cannotWriteToFiles(readOnlyFiles);
      return ConversionResultImpl.ERROR_OCCURRED;
    }
    final File backupDir=ProjectConversionUtil.backupFiles(affectedFiles,context.getProjectBaseDir());
    List<ConversionRunner> usedRunners=new ArrayList<ConversionRunner>();
    for (    ConversionRunner runner : runners) {
      if (runner.isConversionNeeded()) {
        runner.preProcess();
        runner.process();
        runner.postProcess();
        usedRunners.add(runner);
      }
    }
    context.saveFiles(affectedFiles,usedRunners);
    listener.successfullyConverted(backupDir);
    saveConversionResult(context);
    return new ConversionResultImpl(runners);
  }
 catch (  CannotConvertException e) {
    listener.error(e.getMessage());
  }
catch (  IOException e) {
    listener.error(e.getMessage());
  }
  return ConversionResultImpl.ERROR_OCCURRED;
}
