{
  Reindexer reindexer=new Reindexer();
  int[][] discarded=reindexer.discardUnique(ints1,ints2);
  if (discarded[0].length == 0 && discarded[1].length == 0) {
    builder.addChange(ints1.length,ints2.length);
    return builder.getFirstChange();
  }
  BitSet[] changes;
  if (Registry.is("diff.patience.alg")) {
    PatienceIntLCS patienceIntLCS=new PatienceIntLCS(discarded[0],discarded[1]);
    patienceIntLCS.execute();
    changes=patienceIntLCS.getChanges();
  }
 else {
    try {
      IntLCS intLCS=new IntLCS(discarded[0],discarded[1]);
      intLCS.execute();
      changes=intLCS.getChanges();
    }
 catch (    FilesTooBigForDiffException e) {
      PatienceIntLCS patienceIntLCS=new PatienceIntLCS(discarded[0],discarded[1]);
      patienceIntLCS.failOnSmallSizeReduction();
      patienceIntLCS.execute();
      changes=patienceIntLCS.getChanges();
      LOG.info("Successful fallback to patience diff");
    }
  }
  reindexer.reindex(changes,builder);
  return builder.getFirstChange();
}
