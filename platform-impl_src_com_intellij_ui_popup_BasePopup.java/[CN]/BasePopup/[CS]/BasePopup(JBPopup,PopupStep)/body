{
  myParent=(BasePopup)aParent;
  myStep=aStep;
  if (myStep.isSpeedSearchEnabled() && myStep.isMnemonicsNavigationEnabled()) {
    throw new IllegalArgumentException("Cannot have both options enabled at the same time: speed search and mnemonics navigation");
  }
  mySpeedSearch.setEnabled(myStep.isSpeedSearchEnabled());
  myContainer=new MyContainer();
  mySpeedSearchPane=new SpeedSearchPane(this);
  myContent=createContent();
  myScrollPane=new JScrollPane(myContent);
  myScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  myScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  myScrollPane.getHorizontalScrollBar().setBorder(null);
  myScrollPane.getActionMap().get("unitScrollLeft").setEnabled(false);
  myScrollPane.getActionMap().get("unitScrollRight").setEnabled(false);
  myScrollPane.setBorder(null);
  myContainer.add(myScrollPane,BorderLayout.CENTER);
  if (!SystemInfo.isMac) {
    myContainer.setBorder(new BlockBorder());
  }
  final String title=aStep.getTitle();
  if (title == null) {
    myTitle=new JLabel();
  }
 else {
    myTitle=new BoldLabel(title);
    myTitle.setHorizontalAlignment(SwingConstants.CENTER);
    myTitle.setBorder(BorderFactory.createEmptyBorder(2,4,2,4));
  }
  myTitle.setOpaque(true);
  myContainer.add(myTitle,BorderLayout.NORTH);
  registerAction("disposeAll",KeyEvent.VK_ESCAPE,InputEvent.SHIFT_MASK,new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (mySpeedSearch.isHoldingFilter()) {
        mySpeedSearch.reset();
      }
 else {
        disposeAll();
      }
    }
  }
);
  AbstractAction goBackAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      goBack();
    }
  }
;
  registerAction("goBack3",KeyEvent.VK_ESCAPE,0,goBackAction);
  myMnemonicsSearch=new MnemonicsSearch(this){
    protected void select(    Object value){
      onSelectByMnemonic(value);
    }
  }
;
}
