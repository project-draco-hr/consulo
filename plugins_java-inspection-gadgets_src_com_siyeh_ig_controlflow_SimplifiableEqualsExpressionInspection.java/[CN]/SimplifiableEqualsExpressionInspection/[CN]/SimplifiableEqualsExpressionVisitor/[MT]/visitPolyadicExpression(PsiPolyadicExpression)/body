{
  super.visitPolyadicExpression(expression);
  final IElementType tokenType=expression.getOperationTokenType();
  if (JavaTokenType.ANDAND.equals(tokenType)) {
    final PsiExpression[] operands=expression.getOperands();
    if (operands.length != 2) {
      return;
    }
    final PsiExpression lhs=ParenthesesUtils.stripParentheses(operands[0]);
    if (lhs == null) {
      return;
    }
    final PsiVariable variable=getVariableFromNullComparison(lhs,false);
    if (variable == null) {
      return;
    }
    final PsiExpression rhs=ParenthesesUtils.stripParentheses(operands[1]);
    if (!isEqualsConstant(rhs,variable)) {
      return;
    }
    registerError(lhs,getMethodName((PsiMethodCallExpression)rhs));
  }
 else   if (JavaTokenType.OROR.equals(tokenType)) {
    final PsiExpression[] operands=expression.getOperands();
    if (operands.length != 2) {
      return;
    }
    final PsiExpression lhs=ParenthesesUtils.stripParentheses(operands[0]);
    if (lhs == null) {
      return;
    }
    final PsiVariable variable=getVariableFromNullComparison(lhs,true);
    if (variable == null) {
      return;
    }
    final PsiExpression rhs=ParenthesesUtils.stripParentheses(operands[1]);
    if (!(rhs instanceof PsiPrefixExpression)) {
      return;
    }
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)rhs;
    if (!JavaTokenType.EXCL.equals(prefixExpression.getOperationTokenType())) {
      return;
    }
    final PsiExpression operand=ParenthesesUtils.stripParentheses(prefixExpression.getOperand());
    if (!isEqualsConstant(operand,variable)) {
      return;
    }
    registerError(lhs,getMethodName((PsiMethodCallExpression)operand));
  }
}
