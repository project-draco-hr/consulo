{
  if (!clientEnvironment.getLocalFileReader().exists(directoryObject,clientEnvironment.getCvsFileSystem())) {
    return Collections.EMPTY_LIST;
  }
  cvsFiles.add(CvsFile.createCvsDirectory(directoryObject));
  final Set<String> subDirectoryNames=new HashSet<String>();
  final LocalFiles localFiles=new LocalFiles(directoryObject,clientEnvironment);
  final Collection<Entry> entries=clientEnvironment.getAdminReader().getEntries(directoryObject,clientEnvironment.getCvsFileSystem());
  for (  final Entry entry : entries) {
    if (entry.isDirectory()) {
      subDirectoryNames.add(entry.getFileName());
    }
 else {
      final FileObject fileObject=FileObject.createInstance(directoryObject,entry.getFileName());
      final boolean fileExists=clientEnvironment.getLocalFileReader().exists(fileObject,clientEnvironment.getCvsFileSystem());
      cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject,entry,fileExists));
      localFiles.removeFile(entry.getFileName());
    }
  }
  for (  final String fileName : localFiles.getFileNames()) {
    cvsFiles.add(CvsFile.createCvsFileForExistingFile(FileObject.createInstance(directoryObject,fileName)));
  }
  final List<DirectoryObject> subDirectories=new ArrayList<DirectoryObject>(subDirectoryNames.size());
  for (  final String directoryName : subDirectoryNames) {
    subDirectories.add(DirectoryObject.createInstance(directoryObject,directoryName));
  }
  return subDirectories;
}
