{
  if (File.separatorChar != '/') {
    if (path.indexOf(File.separatorChar) != -1) {
      throw new IllegalArgumentException("separators must be '/'; path is " + path);
    }
  }
  String existingPath=path;
  PsiDirectory directory=null;
  while (existingPath.length() > 0) {
    VirtualFile file=LocalFileSystem.getInstance().findFileByPath(existingPath);
    if (file != null) {
      directory=manager.findDirectory(file);
      if (directory == null) {
        return null;
      }
      break;
    }
    if (StringUtil.endsWithChar(existingPath,'/')) {
      existingPath=existingPath.substring(0,existingPath.length() - 1);
      if (SystemInfo.isWindows && existingPath.length() == 2 && existingPath.charAt(1) == ':') {
        return null;
      }
    }
    int index=existingPath.lastIndexOf('/');
    if (index == -1) {
      return null;
    }
    existingPath=existingPath.substring(0,index);
  }
  if (directory == null) {
    return null;
  }
  if (existingPath.equals(path)) {
    return directory;
  }
  String postfix=path.substring(existingPath.length() + 1,path.length());
  StringTokenizer tokenizer=new StringTokenizer(postfix,"/");
  while (tokenizer.hasMoreTokens()) {
    String name=tokenizer.nextToken();
    PsiDirectory subdirectory=directory.createSubdirectory(name);
    if (subdirectory == null) {
      return null;
    }
    directory=subdirectory;
  }
  return directory;
}
