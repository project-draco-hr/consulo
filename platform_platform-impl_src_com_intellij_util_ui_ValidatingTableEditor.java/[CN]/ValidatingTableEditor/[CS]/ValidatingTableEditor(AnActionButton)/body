{
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTable).disableRemoveAction().disableUpAction().disableDownAction();
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      addItem();
    }
  }
);
  myRemoveButton=new AnActionButton(ApplicationBundle.message("button.remove"),IconUtil.getRemoveRowIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      removeSelected();
    }
  }
;
  myRemoveButton.setShortcut(CustomShortcutSet.fromString("alt DELETE"));
  decorator.addExtraAction(myRemoveButton);
  if (extraButton != null) {
    decorator.addExtraAction(extraButton);
  }
  myTablePanel.add(decorator.createPanel(),BorderLayout.CENTER);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  myTable.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),REMOVE_KEY);
  myTable.getActionMap().put(REMOVE_KEY,new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      removeSelected();
    }
  }
);
  myFixLink.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && myFixRunnable != null) {
        myFixRunnable.run();
      }
    }
  }
);
}
