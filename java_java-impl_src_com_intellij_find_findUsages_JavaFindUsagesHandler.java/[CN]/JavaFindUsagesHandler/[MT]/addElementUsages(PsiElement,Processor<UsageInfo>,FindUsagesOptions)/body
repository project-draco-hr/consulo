{
  final SearchScope searchScope=options.searchScope;
  if (element instanceof PsiMethod && ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return ((PsiMethod)element).isConstructor();
    }
  }
)) {
    PsiMethod method=(PsiMethod)element;
    final PsiClass parentClass=method.getContainingClass();
    if (parentClass != null) {
      MethodReferencesSearch.search(new MethodReferencesSearch.SearchParameters(method,searchScope,options instanceof JavaMethodFindUsagesOptions ? !((JavaMethodFindUsagesOptions)options).isIncludeOverloadUsages : true,options.fastTrack)).forEach(new ReadActionProcessor<PsiReference>(){
        @Override public boolean processInReadAction(        final PsiReference ref){
          return addResult(result,ref,options);
        }
      }
);
    }
    return;
  }
  final ReadActionProcessor<PsiReference> consumer=new ReadActionProcessor<PsiReference>(){
    @Override public boolean processInReadAction(    final PsiReference ref){
      return addResult(result,ref,options);
    }
  }
;
  if (element instanceof PsiMethod) {
    final boolean strictSignatureSearch=!(options instanceof JavaMethodFindUsagesOptions) || !((JavaMethodFindUsagesOptions)options).isIncludeOverloadUsages;
    MethodReferencesSearch.search(new MethodReferencesSearch.SearchParameters((PsiMethod)element,searchScope,strictSignatureSearch,options.fastTrack)).forEach(consumer);
  }
 else {
    ReferencesSearch.search(new ReferencesSearch.SearchParameters(element,searchScope,false,options.fastTrack)).forEach(consumer);
  }
}
