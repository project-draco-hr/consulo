{
  final SearchScope searchScope=options.searchScope;
  if (element instanceof PsiMethod && ((PsiMethod)element).isConstructor()) {
    PsiMethod method=(PsiMethod)element;
    if (options.isIncludeOverloadUsages) {
      for (      PsiMethod constructor : method.getContainingClass().getConstructors()) {
        addConstructorUsages(constructor,searchScope,result,options);
      }
    }
 else {
      addConstructorUsages(method,searchScope,result,options);
    }
    return;
  }
  final ReadActionProcessor<PsiReference> consumer=new ReadActionProcessor<PsiReference>(){
    public boolean processInReadAction(    final PsiReference ref){
      return addResult(result,ref,options,element);
    }
  }
;
  if (options.fastTrack != null) {
    SearchRequestor.contributeTargets(element,options,options.fastTrack,consumer);
    return;
  }
  if (element instanceof PsiMethod) {
    MethodReferencesSearch.search((PsiMethod)element,searchScope,!options.isIncludeOverloadUsages).forEach(consumer);
  }
 else {
    ReferencesSearch.search(element,searchScope,false).forEach(consumer);
  }
}
