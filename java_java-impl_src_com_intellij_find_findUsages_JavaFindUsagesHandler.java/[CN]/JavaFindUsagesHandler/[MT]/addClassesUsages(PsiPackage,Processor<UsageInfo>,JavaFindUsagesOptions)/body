{
  final HashSet<PsiFile> filesSet=new HashSet<PsiFile>();
  final ArrayList<PsiFile> files=new ArrayList<PsiFile>();
  ReferencesSearch.search(new ReferencesSearch.SearchParameters(aPackage,options.searchScope,false,options.fastTrack)).forEach(new ReadActionProcessor<PsiReference>(){
    public boolean processInReadAction(    final PsiReference psiReference){
      PsiElement ref=psiReference.getElement();
      PsiFile file=ref.getContainingFile();
      if (filesSet.add(file)) {
        files.add(file);
      }
      return true;
    }
  }
);
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
  }
  ArrayList<PsiClass> classes=new ArrayList<PsiClass>();
  addClassesInPackage(aPackage,options.isIncludeSubpackages,classes);
  for (  final PsiClass aClass : classes) {
    if (progress != null) {
      progress.setText(FindBundle.message("find.searching.for.references.to.class.progress",aClass.getName()));
    }
    for (    PsiFile file : files) {
      if (progress != null) {
        progress.checkCanceled();
      }
      ReferencesSearch.search(new ReferencesSearch.SearchParameters(aClass,new LocalSearchScope(file),false,options.fastTrack)).forEach(new ReadActionProcessor<PsiReference>(){
        public boolean processInReadAction(        final PsiReference psiReference){
          return addResult(results,psiReference,options,aClass);
        }
      }
);
    }
  }
  if (progress != null) {
    progress.popState();
  }
}
