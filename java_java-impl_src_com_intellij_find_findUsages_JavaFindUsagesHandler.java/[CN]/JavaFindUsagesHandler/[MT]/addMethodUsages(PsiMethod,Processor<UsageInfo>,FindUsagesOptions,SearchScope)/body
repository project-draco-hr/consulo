{
  if (method.isConstructor()) {
    if (options.isIncludeOverloadUsages) {
      for (      PsiMethod constructor : method.getContainingClass().getConstructors()) {
        addConstructorUsages(constructor,searchScope,result,options);
      }
    }
 else {
      addConstructorUsages(method,searchScope,result,options);
    }
  }
 else {
    final boolean strictSignatureSearch=!options.isIncludeOverloadUsages;
    final PsiReferenceProcessorAdapter processor=new PsiReferenceProcessorAdapter(new PsiReferenceProcessor(){
      public boolean execute(      PsiReference ref){
        return addResult(result,ref,options,method);
      }
    }
);
    if (options.fastTrack != null) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          MethodUsagesSearcher.contributeSearchTargets(method,options,options.fastTrack,processor,strictSignatureSearch,true);
        }
      }
);
      return;
    }
    MethodReferencesSearch.search(method,searchScope,strictSignatureSearch).forEach(processor);
  }
}
