{
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  if (progress != null) {
    progress.pushState();
  }
  List<PsiClass> classes=new ArrayList<PsiClass>();
  addClassesInPackage(aPackage,options.isIncludeSubpackages,classes);
  for (  final PsiClass aClass : classes) {
    if (progress != null) {
      progress.setText(FindBundle.message("find.searching.for.references.to.class.progress",ApplicationManager.getApplication().runReadAction(new Computable<String>(){
        @Override public String compute(){
          return aClass.getName();
        }
      }
)));
      progress.checkCanceled();
    }
    boolean success=ReferencesSearch.search(new ReferencesSearch.SearchParameters(aClass,options.searchScope,false,options.fastTrack)).forEach(new ReadActionProcessor<PsiReference>(){
      @Override public boolean processInReadAction(      final PsiReference psiReference){
        return addResult(processor,psiReference,options);
      }
    }
);
    if (!success)     return false;
  }
  if (progress != null) {
    progress.popState();
  }
  return true;
}
