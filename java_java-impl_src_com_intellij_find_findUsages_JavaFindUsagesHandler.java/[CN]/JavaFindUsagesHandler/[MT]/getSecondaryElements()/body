{
  PsiElement element=getPsiElement();
  if (ApplicationManager.getApplication().isUnitTestMode())   return PsiElement.EMPTY_ARRAY;
  if (element instanceof PsiField) {
    final PsiField field=(PsiField)element;
    PsiClass containingClass=field.getContainingClass();
    if (containingClass != null) {
      String fieldName=field.getName();
      final String propertyName=JavaCodeStyleManager.getInstance(getProject()).variableNameToPropertyName(fieldName,VariableKind.FIELD);
      Set<PsiMethod> accessors=new THashSet<PsiMethod>();
      boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
      PsiMethod getter=PropertyUtil.findPropertyGetterWithType(propertyName,isStatic,field.getType(),ContainerUtil.iterate(containingClass.getMethods()));
      if (getter != null)       accessors.add(getter);
      PsiMethod setter=PropertyUtil.findPropertySetterWithType(propertyName,isStatic,field.getType(),ContainerUtil.iterate(containingClass.getMethods()));
      if (setter != null)       accessors.add(setter);
      accessors.addAll(PropertyUtil.getAccessors(containingClass,fieldName));
      if (!accessors.isEmpty()) {
        final boolean doSearch;
        boolean containsPhysical=ContainerUtil.find(accessors,new Condition<PsiMethod>(){
          @Override public boolean value(          PsiMethod psiMethod){
            return psiMethod.isPhysical();
          }
        }
) != null;
        if (!containsPhysical) {
          doSearch=true;
        }
 else {
          doSearch=Messages.showDialog(FindBundle.message("find.field.accessors.prompt",fieldName),FindBundle.message("find.field.accessors.title"),new String[]{CommonBundle.getYesButtonText(),CommonBundle.getNoButtonText()},0,Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE;
        }
        if (doSearch) {
          final Set<PsiElement> elements=new THashSet<PsiElement>();
          for (          PsiMethod accessor : accessors) {
            ContainerUtil.addAll(elements,SuperMethodWarningUtil.checkSuperMethods(accessor,ACTION_STRING));
          }
          return elements.toArray(new PsiElement[elements.size()]);
        }
      }
    }
  }
  return super.getSecondaryElements();
}
