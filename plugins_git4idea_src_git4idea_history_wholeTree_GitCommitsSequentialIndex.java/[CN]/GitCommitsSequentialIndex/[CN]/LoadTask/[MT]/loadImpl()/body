{
  final AbstractHash[] latestWrittenHash=new AbstractHash[1];
  final Long[] latestWrittenTime=new Long[1];
  iterateDescending(myFile,-1,new Processor<Pair<AbstractHash,Long>>(){
    @Override public boolean process(    Pair<AbstractHash,Long> abstractHashLongPair){
      latestWrittenHash[0]=abstractHashLongPair.getFirst();
      latestWrittenTime[0]=abstractHashLongPair.getSecond();
      return false;
    }
  }
);
  if (latestWrittenHash[0] != null) {
    ItemLatestState lastRevision=GitHistoryUtils.getLastRevision(myProject,new FilePathImpl(myFile));
    if (lastRevision == null) {
      return;
    }
    if (lastRevision.isItemExists() && ((GitRevisionNumber)lastRevision.getNumber()).getRev().equals(latestWrittenHash[0].getString())) {
      return;
    }
    appendHistory(latestWrittenTime[0],latestWrittenHash[0]);
  }
 else {
    initHistory();
  }
}
