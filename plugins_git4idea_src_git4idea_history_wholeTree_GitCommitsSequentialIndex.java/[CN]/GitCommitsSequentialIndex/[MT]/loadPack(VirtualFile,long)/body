{
  final ArrayList<Pair<AbstractHash,Long>> data=new ArrayList<Pair<AbstractHash,Long>>();
synchronized (myLock) {
    String key=FilePathsHelper.convertPath(file);
    String outFileName=myState.get(key);
    RandomAccessFile raf=null;
    try {
      raf=new RandomAccessFile(outFileName,"r");
      long len=raf.length();
      long offset=len - packNumber * ourInterval * ourRecordSize;
      long recordsInPiece=offset / ourRecordSize;
      long size=recordsInPiece >= ourInterval ? ourInterval : recordsInPiece;
      ((ArrayList)data).ensureCapacity((int)size);
      raf.seek(offset - size * ourRecordSize);
      for (int i=0; i < size && i < len / ourRecordSize; i++) {
        String line=raf.readLine();
        data.add(parseRecord(line));
      }
    }
 catch (    FileNotFoundException e) {
      throw new VcsException(e);
    }
catch (    IOException e) {
      throw new VcsException(e);
    }
 finally {
      try {
        if (raf != null) {
          raf.close();
        }
      }
 catch (      IOException e) {
        throw new VcsException(e);
      }
    }
    Collections.reverse(data);
    myCache.put(new Pair<Long,VirtualFile>(packNumber,file),data);
  }
  return data;
}
