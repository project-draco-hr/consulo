{
  myTypeSelector=myTypeSelectorManager.getTypeSelector();
  myTypePanel.setLayout(new BorderLayout());
  myTypePanel.add(myTypeSelector.getComponent(),BorderLayout.CENTER);
  if (myTypeSelector.getFocusableComponent() != null) {
    myTypeLabel.setLabelFor(myTypeSelector.getFocusableComponent());
  }
  myNameField=new NameSuggestionsField(myProject);
  myNameSuggestionPanel.setLayout(new BorderLayout());
  myNameSuggestionPanel.add(myNameField.getComponent(),BorderLayout.CENTER);
  myNameSuggestionLabel.setLabelFor(myNameField.getFocusableComponent());
  Set<String> possibleClassNames=new LinkedHashSet<String>();
  for (  final PsiExpression occurrence : myOccurrences) {
    final PsiClass parentClass=new IntroduceConstantHandler().getParentClass(occurrence);
    if (parentClass != null && parentClass.getQualifiedName() != null) {
      possibleClassNames.add(parentClass.getQualifiedName());
    }
  }
  if (possibleClassNames.size() > 1) {
    ReferenceEditorComboWithBrowseButton targetClassName=new ReferenceEditorComboWithBrowseButton(new ChooseClassAction(),"",PsiManager.getInstance(myProject),true,RECENTS_KEY);
    myTargetClassNamePanel.setLayout(new BorderLayout());
    myTargetClassNamePanel.add(targetClassName,BorderLayout.CENTER);
    myTargetClassNameLabel.setLabelFor(targetClassName);
    targetClassName.setHistory(possibleClassNames.toArray(new String[possibleClassNames.size()]));
    myTfTargetClassName=targetClassName;
    targetClassName.getChildComponent().addDocumentListener(new DocumentAdapter(){
      public void documentChanged(      DocumentEvent e){
        targetClassChanged();
      }
    }
);
  }
 else {
    ReferenceEditorWithBrowseButton targetClassName=JavaReferenceEditorUtil.createReferenceEditorWithBrowseButton(new ChooseClassAction(),"",PsiManager.getInstance(myProject),true);
    myTargetClassNamePanel.setLayout(new BorderLayout());
    myTargetClassNamePanel.add(targetClassName,BorderLayout.CENTER);
    myTargetClassNameLabel.setLabelFor(targetClassName);
    myTfTargetClassName=targetClassName;
    targetClassName.addDocumentListener(new DocumentAdapter(){
      public void documentChanged(      DocumentEvent e){
        targetClassChanged();
      }
    }
);
  }
  myIntroduceEnumConstantCb.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      enableEnumDependant(introduceEnumConstant());
    }
  }
);
  enableEnumDependant(introduceEnumConstant());
  final JPanel enumPanel=new JPanel(new BorderLayout());
  enumPanel.add(myIntroduceEnumConstantCb,BorderLayout.EAST);
  myTargetClassNamePanel.add(enumPanel,BorderLayout.SOUTH);
  final String propertyName;
  if (myLocalVariable != null) {
    propertyName=myCodeStyleManager.variableNameToPropertyName(myLocalVariable.getName(),VariableKind.LOCAL_VARIABLE);
  }
 else {
    propertyName=null;
  }
  final NameSuggestionsManager nameSuggestionsManager=new NameSuggestionsManager(myTypeSelector,myNameField,new NameSuggestionsGenerator(){
    public SuggestedNameInfo getSuggestedNameInfo(    PsiType type){
      final SuggestedNameInfo nameInfo=myCodeStyleManager.suggestVariableName(VariableKind.STATIC_FINAL_FIELD,propertyName,myInitializerExpression,type);
      final String[] strings=JavaCompletionUtil.completeVariableNameForRefactoring(myCodeStyleManager,type,VariableKind.LOCAL_VARIABLE,nameInfo);
      return new SuggestedNameInfo.Delegate(strings,nameInfo);
    }
  }
);
  nameSuggestionsManager.setLabelsFor(myTypeLabel,myNameSuggestionLabel);
  if (myOccurrencesCount > 1) {
    myCbReplaceAll.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        updateTypeSelector();
        myNameField.requestFocusInWindow();
      }
    }
);
    myCbReplaceAll.setText(RefactoringBundle.message("replace.all.occurences",myOccurrencesCount));
  }
 else {
    myCbReplaceAll.setVisible(false);
  }
  if (myLocalVariable != null) {
    if (myInvokedOnDeclaration) {
      myCbDeleteVariable.setEnabled(false);
      myCbDeleteVariable.setSelected(true);
    }
 else     if (myCbReplaceAll != null) {
      updateCbDeleteVariable();
      myCbReplaceAll.addItemListener(new ItemListener(){
        public void itemStateChanged(        ItemEvent e){
          updateCbDeleteVariable();
        }
      }
);
    }
  }
 else {
    myCbDeleteVariable.setVisible(false);
  }
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (myTypeSelectorManager.isSuggestedType("java.lang.String") && LanguageLevelProjectExtension.getInstance(psiManager.getProject()).getLanguageLevel().hasEnumKeywordAndAutoboxing() && JavaPsiFacade.getInstance(psiManager.getProject()).findClass(AnnotationUtil.NON_NLS,myParentClass.getResolveScope()) != null) {
    final PropertiesComponent component=PropertiesComponent.getInstance(myProject);
    myCbNonNls.setSelected(component.isTrueValue(NONNLS_SELECTED_PROPERTY));
    myCbNonNls.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        component.setValue(NONNLS_SELECTED_PROPERTY,Boolean.toString(myCbNonNls.isSelected()));
      }
    }
);
  }
 else {
    myCbNonNls.setVisible(false);
  }
  updateTypeSelector();
  ButtonGroup bg=new ButtonGroup();
  bg.add(myRbPrivate);
  bg.add(myRbpackageLocal);
  bg.add(myRbProtected);
  bg.add(myRbPublic);
  return myPanel;
}
