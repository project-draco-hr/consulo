{
  if (myTargetClass == null)   return;
  if (myTargetClass.isInterface()) {
    myRbPrivate.setEnabled(false);
    myRbProtected.setEnabled(false);
    myRbpackageLocal.setEnabled(false);
    myRbPublic.setEnabled(true);
    myRbPublic.setSelected(true);
  }
 else {
    myRbPrivate.setEnabled(true);
    myRbProtected.setEnabled(true);
    myRbpackageLocal.setEnabled(true);
    myRbPublic.setEnabled(true);
    final Set<String> visible=new THashSet<String>();
    visible.add(PsiModifier.PRIVATE);
    visible.add(PsiModifier.PROTECTED);
    visible.add(PsiModifier.PACKAGE_LOCAL);
    visible.add(PsiModifier.PUBLIC);
    for (    PsiExpression occurrence : myOccurrences) {
      final PsiManager psiManager=PsiManager.getInstance(myProject);
      for (Iterator<String> iterator=visible.iterator(); iterator.hasNext(); ) {
        String modifier=iterator.next();
        try {
          final String modifierText=PsiModifier.PACKAGE_LOCAL.equals(modifier) ? "" : modifier;
          final PsiField field=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createFieldFromText(modifierText + " int xxx;",myTargetClass);
          if (!ResolveUtil.isAccessible(field,myTargetClass,field.getModifierList(),occurrence,myTargetClass,null)) {
            iterator.remove();
          }
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
    if (visible.contains(PsiModifier.PUBLIC))     myRbPublic.setSelected(true);
    if (visible.contains(PsiModifier.PACKAGE_LOCAL))     myRbpackageLocal.setSelected(true);
    if (visible.contains(PsiModifier.PROTECTED))     myRbProtected.setSelected(true);
    if (visible.contains(PsiModifier.PRIVATE))     myRbPrivate.setSelected(true);
  }
}
