{
  final List<PsiParameter> params=getParametersToExtract();
  final boolean useExistingClass=useExistingClass();
  final boolean keepMethod=keepMethodAsDelegate();
  final String className;
  final String packageName;
  final List<String> getterNames;
  final boolean createInnerClass=myCreateInnerClassRadioButton.isSelected();
  if (createInnerClass) {
    className=getInnerClassName();
    packageName="";
    getterNames=null;
  }
 else   if (useExistingClass) {
    final String existingClassName=getExistingClassName();
    getterNames=new ArrayList<String>();
    className=StringUtil.getShortName(existingClassName);
    packageName=StringUtil.getPackageName(existingClassName);
  }
 else {
    packageName=getPackageName();
    className=getClassName();
    getterNames=null;
  }
  invokeRefactoring(new IntroduceParameterObjectProcessor(className,packageName,sourceMethod,parameterInfo,getterNames,keepMethod,useExistingClass,createInnerClass));
}
