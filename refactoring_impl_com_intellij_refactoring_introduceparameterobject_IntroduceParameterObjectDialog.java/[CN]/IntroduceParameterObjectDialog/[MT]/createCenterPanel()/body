{
  sourceMethodTextField.setEditable(false);
  existingClassField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      final TreeClassChooserDialog chooser=new TreeClassChooserDialog(RefactorJBundle.message("select.wrapper.class"),project,scope,null,null);
      final String classText=existingClassField.getText();
      final PsiClass currentClass=JavaPsiFacade.getInstance(project).findClass(classText,GlobalSearchScope.allScope(project));
      if (currentClass != null) {
        chooser.selectClass(currentClass);
      }
      chooser.show();
      final PsiClass selectedClass=chooser.getSelectedClass();
      if (selectedClass != null) {
        final String className=selectedClass.getQualifiedName();
        existingClassField.setText(className);
      }
    }
  }
);
  packageTextField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final PackageChooserDialog chooser=new PackageChooserDialog(RefactorJBundle.message("choose.destination.package.label"),project);
      final String packageText=packageTextField.getText();
      chooser.selectPackage(packageText);
      chooser.show();
      final PsiPackage aPackage=chooser.getSelectedPackage();
      if (aPackage != null) {
        final String packageName=aPackage.getQualifiedName();
        packageTextField.setText(packageName);
      }
    }
  }
);
  final ParameterTablePanel paramsPanel=new ParameterTablePanel(myProject,parameterInfo,sourceMethod){
    protected void updateSignature(){
    }
    protected void doEnterAction(){
    }
    protected void doCancelAction(){
      IntroduceParameterObjectDialog.this.doCancelAction();
    }
  }
;
  myParamsPanel.add(paramsPanel,BorderLayout.CENTER);
  return myWholePanel;
}
