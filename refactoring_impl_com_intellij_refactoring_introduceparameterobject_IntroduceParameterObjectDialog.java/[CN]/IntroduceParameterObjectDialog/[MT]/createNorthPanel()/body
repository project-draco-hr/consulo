{
  final Box box=Box.createVerticalBox();
  sourceMethodTextField.setEditable(false);
  final JPanel _panel=new JPanel(new BorderLayout());
  _panel.add(new JLabel(RefactorJBundle.message("method.to.extract.parameters.from.label")),BorderLayout.NORTH);
  _panel.add(sourceMethodTextField,BorderLayout.CENTER);
  box.add(_panel);
  box.add(Box.createVerticalStrut(10));
  final JPanel existingClassPanel=new JPanel(new BorderLayout());
  final JLabel existingClassLabel=new JLabel();
  existingClassLabel.setLabelFor(classNameField);
  existingClassLabel.setDisplayedMnemonic('N');
  existingClassPanel.add(existingClassLabel,BorderLayout.WEST);
  existingClassPanel.add(existingClassField,BorderLayout.CENTER);
  existingClassPanel.add(existingClassChooserButton,BorderLayout.EAST);
  existingClassChooserButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      final TreeClassChooserDialog chooser=new TreeClassChooserDialog(RefactorJBundle.message("select.wrapper.class"),project,scope,null,null);
      final String classText=existingClassField.getText();
      final PsiClass currentClass=JavaPsiFacade.getInstance(project).findClass(classText,GlobalSearchScope.allScope(project));
      if (currentClass != null) {
        chooser.selectClass(currentClass);
      }
      chooser.show();
      final PsiClass selectedClass=chooser.getSelectedClass();
      if (selectedClass != null) {
        final String className=selectedClass.getQualifiedName();
        existingClassField.setText(className);
      }
    }
  }
);
  box.add(Box.createVerticalStrut(10));
  final JPanel classNamePanel=new JPanel(new GridBagLayout());
  final TitledBorder newClassBorder=IdeBorderFactory.createTitledBorder("Parameter Class");
  classNamePanel.setBorder(newClassBorder);
  final GridBagConstraints gc=new GridBagConstraints();
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.weighty=0.0;
  gc.gridx=0;
  gc.gridy=0;
  gc.gridwidth=1;
  gc.weightx=0;
  gc.insets.left=5;
  createNewClassButton.setMnemonic('C');
  classNamePanel.add(createNewClassButton,gc);
  gc.gridy=1;
  gc.gridwidth=1;
  classNameLabel.setLabelFor(classNameField);
  classNameLabel.setDisplayedMnemonic('N');
  gc.insets.left=25;
  classNamePanel.add(classNameLabel,gc);
  gc.insets.left=5;
  gc.gridx=1;
  gc.gridwidth=2;
  classNamePanel.add(classNameField,gc);
  packageChooserButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final PackageChooserDialog chooser=new PackageChooserDialog(RefactorJBundle.message("choose.destination.package.label"),project);
      final String packageText=packageTextField.getText();
      chooser.selectPackage(packageText);
      chooser.show();
      final PsiPackage aPackage=chooser.getSelectedPackage();
      if (aPackage != null) {
        final String packageName=aPackage.getQualifiedName();
        packageTextField.setText(packageName);
      }
    }
  }
);
  packageLabel.setLabelFor(packageTextField);
  packageLabel.setDisplayedMnemonic('P');
  gc.gridx=0;
  gc.gridy=2;
  gc.gridwidth=1;
  gc.insets.left=25;
  classNamePanel.add(packageLabel,gc);
  gc.insets.left=5;
  gc.weightx=1;
  gc.gridx=1;
  classNamePanel.add(packageTextField,gc);
  gc.gridx=2;
  gc.weightx=0;
  gc.insets.left=2;
  gc.fill=GridBagConstraints.NONE;
  classNamePanel.add(packageChooserButton,gc);
  gc.weightx=0.0;
  gc.gridwidth=3;
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.gridx=0;
  gc.gridy=3;
  gc.insets.left=5;
  useExistingClassButton.setMnemonic('U');
  classNamePanel.add(useExistingClassButton,gc);
  gc.gridx=0;
  gc.gridy=4;
  gc.insets.left=25;
  gc.weightx=1;
  classNamePanel.add(existingClassPanel,gc);
  box.add(classNamePanel);
  box.add(Box.createVerticalStrut(10));
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(box,BorderLayout.CENTER);
  return panel;
}
