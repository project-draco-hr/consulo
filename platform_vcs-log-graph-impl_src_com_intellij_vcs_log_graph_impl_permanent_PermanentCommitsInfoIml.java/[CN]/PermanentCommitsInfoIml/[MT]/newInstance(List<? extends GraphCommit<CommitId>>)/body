{
  TimestampGetter timestampGetter=IntTimestampGetter.newInstance(new TimestampGetter(){
    @Override public int size(){
      return graphCommits.size();
    }
    @Override public long getTimestamp(    int index){
      return graphCommits.get(index).getTimestamp();
    }
  }
);
  boolean isIntegerCase=!graphCommits.isEmpty() && graphCommits.get(0).getId().getClass() == Integer.class;
  List<CommitId> commitIdIndex;
  if (isIntegerCase) {
    commitIdIndex=(List<CommitId>)createCompressedIntList((List<? extends GraphCommit<Integer>>)graphCommits);
  }
 else {
    commitIdIndex=ContainerUtil.map(graphCommits,new Function<GraphCommit<CommitId>,CommitId>(){
      @Override public CommitId fun(      GraphCommit<CommitId> graphCommit){
        return graphCommit.getId();
      }
    }
);
  }
  return new PermanentCommitsInfoIml<CommitId>(timestampGetter,commitIdIndex);
}
