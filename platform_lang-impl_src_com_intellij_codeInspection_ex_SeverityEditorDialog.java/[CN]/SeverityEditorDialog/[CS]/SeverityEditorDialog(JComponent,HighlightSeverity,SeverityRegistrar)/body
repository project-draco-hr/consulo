{
  super(parent,true);
  mySeverityRegistrar=severityRegistrar;
  myOptionsList.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof SeverityBasedTextAttributes) {
        setText(((SeverityBasedTextAttributes)value).getSeverity().toString());
      }
      return rendererComponent;
    }
  }
);
  myOptionsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (myCurrentSelection != null) {
        apply(myCurrentSelection);
      }
      myCurrentSelection=(SeverityBasedTextAttributes)myOptionsList.getSelectedValue();
      if (myCurrentSelection != null) {
        reset(myCurrentSelection);
        myCard.show(myRightPanel,mySeverityRegistrar.isDefaultSeverity(myCurrentSelection.getSeverity()) ? DEFAULT : EDITABLE);
      }
    }
  }
);
  myOptionsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  JPanel leftPanel=ToolbarDecorator.createDecorator(myOptionsList).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final String name=Messages.showInputDialog(myPanel,InspectionsBundle.message("highlight.severity.create.dialog.name.label"),InspectionsBundle.message("highlight.severity.create.dialog.title"),Messages.getQuestionIcon(),"",new InputValidator(){
        @Override public boolean checkInput(        final String inputString){
          final ListModel listModel=myOptionsList.getModel();
          for (int i=0; i < listModel.getSize(); i++) {
            final String severityName=((SeverityBasedTextAttributes)listModel.getElementAt(i)).getSeverity().myName;
            if (Comparing.strEqual(severityName,inputString))             return false;
          }
          return true;
        }
        @Override public boolean canClose(        final String inputString){
          return checkInput(inputString);
        }
      }
);
      if (name == null)       return;
      final TextAttributes textAttributes=CodeInsightColors.WARNINGS_ATTRIBUTES.getDefaultAttributes();
      HighlightInfoType.HighlightInfoTypeImpl info=new HighlightInfoType.HighlightInfoTypeImpl(new HighlightSeverity(name,50),TextAttributesKey.createTextAttributesKey(name));
      SeverityBasedTextAttributes newSeverityBasedTextAttributes=new SeverityBasedTextAttributes(textAttributes.clone(),info);
      ((DefaultListModel)myOptionsList.getModel()).addElement(newSeverityBasedTextAttributes);
      myOptionsList.clearSelection();
      ListScrollingUtil.selectItem(myOptionsList,newSeverityBasedTextAttributes);
    }
  }
).setUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      apply(myCurrentSelection);
      ListUtil.moveSelectedItemsUp(myOptionsList);
    }
  }
).setDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      apply(myCurrentSelection);
      ListUtil.moveSelectedItemsDown(myOptionsList);
    }
  }
).createPanel();
  ToolbarDecorator.findRemoveButton(leftPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !mySeverityRegistrar.isDefaultSeverity(((SeverityBasedTextAttributes)myOptionsList.getSelectedValue()).getSeverity());
    }
  }
);
  ToolbarDecorator.findUpButton(leftPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      boolean canMove=ListUtil.canMoveSelectedItemsUp(myOptionsList);
      if (canMove) {
        SeverityBasedTextAttributes pair=(SeverityBasedTextAttributes)myOptionsList.getSelectedValue();
        if (pair != null && mySeverityRegistrar.isDefaultSeverity(pair.getSeverity())) {
          final int newPosition=myOptionsList.getSelectedIndex() - 1;
          pair=(SeverityBasedTextAttributes)myOptionsList.getModel().getElementAt(newPosition);
          if (mySeverityRegistrar.isDefaultSeverity(pair.getSeverity())) {
            canMove=false;
          }
        }
      }
      return canMove;
    }
  }
);
  ToolbarDecorator.findDownButton(leftPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      boolean canMove=ListUtil.canMoveSelectedItemsDown(myOptionsList);
      if (canMove) {
        SeverityBasedTextAttributes pair=(SeverityBasedTextAttributes)myOptionsList.getSelectedValue();
        if (pair != null && mySeverityRegistrar.isDefaultSeverity(pair.getSeverity())) {
          final int newPosition=myOptionsList.getSelectedIndex() + 1;
          pair=(SeverityBasedTextAttributes)myOptionsList.getModel().getElementAt(newPosition);
          if (mySeverityRegistrar.isDefaultSeverity(pair.getSeverity())) {
            canMove=false;
          }
        }
      }
      return canMove;
    }
  }
);
  myPanel=new JPanel(new BorderLayout());
  myPanel.add(leftPanel,BorderLayout.CENTER);
  myCard=new CardLayout();
  myRightPanel=new JPanel(myCard);
  final JPanel disabled=new JPanel(new GridBagLayout());
  final JButton button=new JButton(InspectionsBundle.message("severities.default.settings.message"));
  button.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      editColorsAndFonts();
    }
  }
);
  disabled.add(button,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  myRightPanel.add(DEFAULT,disabled);
  myRightPanel.add(EDITABLE,myOptionsPanel);
  myCard.show(myRightPanel,EDITABLE);
  myPanel.add(myRightPanel,BorderLayout.EAST);
  fillList(severity);
  init();
  setTitle(InspectionsBundle.message("severities.editor.dialog.title"));
  reset((SeverityBasedTextAttributes)myOptionsList.getSelectedValue());
}
