{
  if (myOnValidateAttempt) {
    myOnValidateAttempt=false;
    return;
  }
  clear();
  GradleProjectImportBuilder builder=getBuilder();
  if (builder == null) {
    return;
  }
  ProjectData project=builder.getGradleProject();
  if (project == null) {
    throw new IllegalStateException(String.format("Can't init 'adjust importing settings' step. Reason: no project is defined. Context: '%s', builder: '%s'",getWizardContext(),getBuilder()));
  }
  Map<ProjectEntityData,Pair<String,Collection<ProjectStructureNode>>> entity2nodes=new HashMap<ProjectEntityData,Pair<String,Collection<ProjectStructureNode>>>();
  int counter=0;
  ProjectStructureNode<ProjectEntityId> root=buildNode(project,entity2nodes,counter++);
  List<ModuleData> modules=new ArrayList<ModuleData>(project.getModules());
  Collections.sort(modules,Named.COMPARATOR);
  List<MutableTreeNode> moduleNodes=new ArrayList<MutableTreeNode>();
  for (  ModuleData module : modules) {
    ProjectStructureNode<ProjectEntityId> moduleNode=buildNode(module,entity2nodes,counter++);
    moduleNodes.add(moduleNode);
    for (    ContentRootData contentRoot : module.getContentRoots()) {
      moduleNode.add(buildNode(contentRoot,entity2nodes,counter++));
    }
    Collection<DependencyData> dependencies=module.getDependencies();
    if (!dependencies.isEmpty()) {
      ProjectStructureNode<GradleSyntheticId> dependenciesNode=new ProjectStructureNode<GradleSyntheticId>(GradleConstants.DEPENDENCIES_NODE_DESCRIPTOR);
      final List<ModuleDependencyData> moduleDependencies=new ArrayList<ModuleDependencyData>();
      final List<LibraryDependencyData> libraryDependencies=new ArrayList<LibraryDependencyData>();
      ExternalEntityVisitor visitor=new ExternalEntityVisitorAdapter(){
        @Override public void visit(        @NotNull ModuleDependencyData dependency){
          moduleDependencies.add(dependency);
        }
        @Override public void visit(        @NotNull LibraryDependencyData dependency){
          libraryDependencies.add(dependency);
        }
      }
;
      for (      DependencyData dependency : dependencies) {
        dependency.invite(visitor);
      }
      Collections.sort(moduleDependencies,ModuleDependencyData.COMPARATOR);
      Collections.sort(libraryDependencies,Named.COMPARATOR);
      for (      ModuleDependencyData dependency : moduleDependencies) {
        dependenciesNode.add(buildNode(dependency,entity2nodes,counter++));
      }
      for (      LibraryDependencyData dependency : libraryDependencies) {
        dependenciesNode.add(buildNode(dependency,entity2nodes,counter++));
      }
      moduleNode.add(dependenciesNode);
    }
  }
  myTreeModel.setRoot(root);
  myTree.setSelectionPath(new TreePath(root));
  Collection<? extends LibraryData> libraries=project.getLibraries();
  if (libraries.isEmpty()) {
    for (    MutableTreeNode node : moduleNodes) {
      root.add(node);
    }
  }
 else {
    ProjectStructureNode<GradleSyntheticId> modulesNode=new ProjectStructureNode<GradleSyntheticId>(GradleConstants.MODULES_NODE_DESCRIPTOR);
    for (    MutableTreeNode node : moduleNodes) {
      modulesNode.add(node);
    }
    root.add(modulesNode);
    List<LibraryData> sortedLibraries=new ArrayList<LibraryData>(libraries);
    Collections.sort(sortedLibraries,Named.COMPARATOR);
    ProjectStructureNode<GradleSyntheticId> librariesNode=new ProjectStructureNode<GradleSyntheticId>(GradleConstants.LIBRARIES_NODE_DESCRIPTOR);
    for (    LibraryData library : sortedLibraries) {
      librariesNode.add(buildNode(library,entity2nodes,counter++));
    }
    root.add(librariesNode);
    myTree.expandPath(new TreePath(modulesNode.getPath()));
    myTree.expandPath(new TreePath(librariesNode.getPath()));
  }
  myTree.expandPath(new TreePath(root.getPath()));
}
