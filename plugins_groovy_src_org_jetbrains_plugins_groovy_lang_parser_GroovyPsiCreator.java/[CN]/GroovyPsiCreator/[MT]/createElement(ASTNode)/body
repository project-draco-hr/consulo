{
  IElementType elem=node.getElementType();
  if (elem.equals(LITERAL))   return new GrLiteralImpl(node);
  if (elem.equals(LABEL))   return new GrLabelImpl(node);
  if (elem.equals(LIST_OR_MAP))   return new GrListOrMapImpl(node);
  if (elem.equals(MODIFIERS))   return new GrModifierListImpl(node);
  if (elem.equals(ANNOTATION))   return new GrAnnotationImpl(node);
  if (elem.equals(ANNOTATION_ARGUMENTS))   return new GrAnnotationArgumentListImpl(node);
  if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIR))   return new GrAnnotationNameValuePairImpl(node);
  if (elem.equals(ANNOTATION_MEMBER_VALUE_PAIRS))   return new GrAnnotationNameValuePairsImpl(node);
  if (elem.equals(DEFAULT_ANNOTATION_VALUE))   return new GrDefaultAnnotationValueImpl(node);
  if (elem.equals(THROW_CLAUSE))   return new GrThrowsClauseImpl(node);
  if (elem.equals(IMPORT_STATEMENT))   return new GrImportStatementImpl(node);
  if (elem.equals(PACKAGE_DEFINITION))   return new GrPackageDefinitionImpl(node);
  if (elem.equals(LABELED_STATEMENT))   return new GrLabeledStatementImpl(node);
  if (elem.equals(IF_STATEMENT))   return new GrIfStatementImpl(node);
  if (elem.equals(FOR_STATEMENT))   return new GrForStatementImpl(node);
  if (elem.equals(FOR_IN_CLAUSE))   return new GrForInClauseImpl(node);
  if (elem.equals(FOR_TRADITIONAL_CLAUSE))   return new GrTraditionalForClauseImpl(node);
  if (elem.equals(WHILE_STATEMENT))   return new GrWhileStatementImpl(node);
  if (elem.equals(TRY_BLOCK_STATEMENT))   return new GrTryCatchStatementImpl(node);
  if (elem.equals(CATCH_CLAUSE))   return new GrCatchClauseImpl(node);
  if (elem.equals(FINALLY_CLAUSE))   return new GrFinallyClauseImpl(node);
  if (elem.equals(SYNCHRONIZED_STATEMENT))   return new GrSynchronizedStatementImpl(node);
  if (elem.equals(SWITCH_STATEMENT))   return new GrSwitchStatementImpl(node);
  if (elem.equals(CASE_LABEL))   return new GrCaseLabelImpl(node);
  if (elem.equals(CASE_SECTION))   return new GrCaseSectionImpl(node);
  if (elem.equals(VARIABLE_DEFINITION) || elem.equals(VARIABLE_DEFINITION_ERROR))   return new GrVariableDeclarationImpl(node);
  if (elem.equals(VARIABLE))   return new GrVariableImpl(node);
  if (elem.equals(FIELD))   return new GrFieldImpl(node);
  if (elem.equals(CLASS_DEFINITION))   return new GrClassDefinitionImpl(node);
  if (elem.equals(INTERFACE_DEFINITION))   return new GrInterfaceDefinitionImpl(node);
  if (elem.equals(ENUM_DEFINITION))   return new GrEnumTypeDefinitionImpl(node);
  if (elem.equals(ANNOTATION_DEFINITION))   return new GrAnnotationTypeDefinitionImpl(node);
  if (elem.equals(DEFAULT_ANNOTATION_MEMBER))   return new GrDefaultAnnotationMemberImpl(node);
  if (elem.equals(REFERENCE_ELEMENT))   return new GrCodeReferenceElementImpl(node);
  if (elem.equals(CLASS_TYPE_ELEMENT))   return new GrClassTypeElementImpl(node);
  if (elem.equals(IMPLEMENTS_CLAUSE))   return new GrImplementsClauseImpl(node);
  if (elem.equals(EXTENDS_CLAUSE))   return new GrExtendsClauseImpl(node);
  if (elem.equals(CLASS_BODY))   return new GrTypeDefinitionBodyImpl(node);
  if (elem.equals(ENUM_BODY))   return new GrEnumDefinitionBodyImpl(node);
  if (elem.equals(CLOSABLE_BLOCK))   return new GrClosableBlockImpl(node);
  if (elem.equals(OPEN_BLOCK))   return new GrOpenBlockImpl(node);
  if (elem.equals(BLOCK_STATEMENT))   return new GrBlockStatementImpl(node);
  if (elem.equals(EXPLICIT_CONSTRUCTOR))   return new GrConstructorInvocationImpl(node);
  if (elem.equals(ENUM_CONSTANTS))   return new GrEnumConstantListImpl(node);
  if (elem.equals(ENUM_CONSTANT))   return new GrEnumConstantImpl(node);
  if (elem.equals(CONSTRUCTOR_DEFINITION))   return new GrConstructorDefinitionImpl(node);
  if (elem.equals(METHOD_DEFINITION))   return new GrMethodDefinitionImpl(node);
  if (elem.equals(PARAMETERS_LIST))   return new GrParameterListImpl(node);
  if (elem.equals(PARAMETER))   return new GrParameterImpl(node);
  if (elem.equals(TYPE_ARGUMENT))   return new GrWildcardTypeArgumentImpl(node);
  if (elem.equals(TYPE_ARGUMENTS))   return new GrTypeArgumentListImpl(node);
  if (elem.equals(TYPE_PARAMETER_LIST))   return new GrTypeParameterListImpl(node);
  if (elem.equals(TYPE_PARAMETER))   return new GrTypeParameterImpl(node);
  if (elem.equals(TYPE_PARAMETER_EXTENDS_BOUND_LIST))   return new GrTypeParameterParameterExtendsListImpl(node);
  if (elem.equals(RETURN_STATEMENT))   return new GrReturnStatementImpl(node);
  if (elem.equals(THROW_STATEMENT))   return new GrThrowStatementImpl(node);
  if (elem.equals(ASSERT_STATEMENT))   return new GrAssertStatementImpl(node);
  if (elem.equals(BREAK_STATEMENT))   return new GrBreakStatementImpl(node);
  if (elem.equals(CONTINUE_STATEMENT))   return new GrContinueStatementImpl(node);
  if (elem.equals(CALL_EXPRESSION))   return new GrApplicationStatementImpl(node);
  if (elem.equals(COMMAND_ARGUMENTS))   return new GrCommandArgumentListImpl(node);
  if (elem.equals(COMMAND_ARGUMENT))   return new GrCommandArgumentImpl(node);
  if (elem.equals(CONDITIONAL_EXPRESSION))   return new GrConditionalExprImpl(node);
  if (elem.equals(ELVIS_EXPRESSION))   return new GrElvisExprImpl(node);
  if (elem.equals(ASSIGNMENT_EXPRESSION))   return new GrAssignmentExpressionImpl(node);
  if (elem.equals(LOGICAL_OR_EXPRESSION))   return new GrLogicalOrExpressionImpl(node);
  if (elem.equals(LOGICAL_AND_EXPRESSION))   return new GrLogicalAndExpressionImpl(node);
  if (elem.equals(EXCLUSIVE_OR_EXPRESSION))   return new GrExclusiveOrExpressionImpl(node);
  if (elem.equals(INCLUSIVE_OR_EXPRESSION))   return new GrInclusiveOrExpressionImpl(node);
  if (elem.equals(AND_EXPRESSION))   return new GrAndExpressionImpl(node);
  if (elem.equals(REGEX_EXPRESSION))   return new GrRegexExpressionImpl(node);
  if (elem.equals(EQUALITY_EXPRESSION))   return new GrEqualityExpressionImpl(node);
  if (elem.equals(RELATIONAL_EXPRESSION))   return new GrRelationalExpressionImpl(node);
  if (elem.equals(SHIFT_EXPRESSION))   return new GrShiftExpressionImpl(node);
  if (elem.equals(RANGE_EXPRESSION))   return new GrRangeExpressionImpl(node);
  if (elem.equals(COMPOSITE_SHIFT_SIGN))   return new GrOperationSignImpl(node);
  if (elem.equals(ADDITIVE_EXPRESSION))   return new GrAdditiveExpressionImpl(node);
  if (elem.equals(MULTIPLICATIVE_EXPRESSION))   return new GrMultiplicativeExpressionImpl(node);
  if (elem.equals(POWER_EXPRESSION))   return new GrPowerExpressionImpl(node);
  if (elem.equals(POWER_EXPRESSION_SIMPLE))   return new GrPowerExpressionImpl(node);
  if (elem.equals(UNARY_EXPRESSION))   return new GrUnaryExpressionImpl(node);
  if (elem.equals(POSTFIX_EXPRESSION))   return new GrPostfixExprImpl(node);
  if (elem.equals(CAST_EXPRESSION))   return new GrTypeCastExpressionImpl(node);
  if (elem.equals(SAFE_CAST_EXPRESSION))   return new GrSafeCastExpressionImpl(node);
  if (elem.equals(INSTANCEOF_EXPRESSION))   return new GrInstanceofExpressionImpl(node);
  if (elem.equals(ARRAY_TYPE))   return new GrArrayTypeElementImpl(node);
  if (elem.equals(BUILT_IN_TYPE))   return new GrBuiltInTypeElementImpl(node);
  if (elem.equals(GSTRING))   return new GrStringImpl(node);
  if (elem.equals(REGEX))   return new GrRegexImpl(node);
  if (elem.equals(REFERENCE_EXPRESSION))   return new GrReferenceExpressionImpl(node);
  if (elem.equals(THIS_REFERENCE_EXPRESSION))   return new GrThisReferenceExpressionImpl(node);
  if (elem.equals(SUPER_REFERENCE_EXPRESSION))   return new GrSuperReferenceExpressionImpl(node);
  if (elem.equals(PARENTHESIZED_EXPRESSION))   return new GrParenthesizedExpressionImpl(node);
  if (elem.equals(NEW_EXPRESSION))   return new GrNewExpressionImpl(node);
  if (elem.equals(ARRAY_DECLARATOR))   return new GrArrayDeclarationImpl(node);
  if (elem.equals(PATH_PROPERTY))   return new GrPropertySelectorImpl(node);
  if (elem.equals(PATH_PROPERTY_REFERENCE))   return new GrPropertySelectionImpl(node);
  if (elem.equals(PATH_METHOD_CALL))   return new GrMethodCallExpressionImpl(node);
  if (elem.equals(PATH_INDEX_PROPERTY))   return new GrIndexPropertyImpl(node);
  if (elem.equals(ARGUMENTS))   return new GrArgumentListImpl(node);
  if (elem.equals(ARGUMENT))   return new GrNamedArgumentImpl(node);
  if (elem.equals(ARGUMENT_LABEL))   return new GrArgumentLabelImpl(node);
  if (elem.equals(BALANCED_BRACKETS))   return new GrBalancedBracketsImpl(node);
  if (GROOVY_EXPR_CODE.equals(elem))   return new GrGspExprInjectionImpl();
  if (GROOVY_DECLARATION.equals(elem))   return new GrGspDeclarationHolderImpl();
  if (GSP_CLASS.equals(elem))   return new GrGspClassImpl(node);
  if (GSP_RUN_METHOD.equals(elem))   return new GrGspRunMethodImpl(node);
  if (GSP_RUN_BLOCK.equals(elem))   return new GrGspRunBlockImpl(node);
  return new ASTWrapperPsiElement(node);
}
