{
  if (!project.isInitialized()) {
    myAlarm.addRequest(new ImportModulesTask(project,modules,recursive),PROJECT_INITIALISATION_DELAY_MS);
    return;
  }
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      removeExistingModulesConfigs(modules);
      Application application=ApplicationManager.getApplication();
      final Map<GradleModule,Module> moduleMappings=new HashMap<GradleModule,Module>();
      application.runWriteAction(new Runnable(){
        @Override public void run(){
          final ModuleManager moduleManager=ModuleManager.getInstance(project);
          final GradleProjectEntityImportListener publisher=project.getMessageBus().syncPublisher(GradleProjectEntityImportListener.TOPIC);
          for (          GradleModule module : modules) {
            publisher.onImportStart(module);
            try {
              importModule(moduleManager,module);
            }
  finally {
              publisher.onImportEnd(module);
            }
          }
        }
        private void importModule(        @NotNull ModuleManager moduleManager,        @NotNull GradleModule module){
          final Module created=moduleManager.newModule(module.getModuleFilePath(),StdModuleTypes.JAVA);
          ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(created);
          final ModifiableRootModel moduleRootModel=moduleRootManager.getModifiableModel();
          RootPolicy<Object> visitor=new RootPolicy<Object>(){
            @Override public Object visitLibraryOrderEntry(            LibraryOrderEntry libraryOrderEntry,            Object value){
              moduleRootModel.removeOrderEntry(libraryOrderEntry);
              return value;
            }
            @Override public Object visitModuleOrderEntry(            ModuleOrderEntry moduleOrderEntry,            Object value){
              moduleRootModel.removeOrderEntry(moduleOrderEntry);
              return value;
            }
          }
;
          try {
            for (            OrderEntry orderEntry : moduleRootModel.getOrderEntries()) {
              orderEntry.accept(visitor,null);
            }
          }
  finally {
            moduleRootModel.commit();
          }
          moduleMappings.put(module,created);
        }
      }
);
      if (!recursive) {
        return;
      }
      for (      GradleModule gradleModule : modules) {
        final Module intellijModule=moduleMappings.get(gradleModule);
        myContentRootImporter.importContentRoots(gradleModule.getContentRoots(),intellijModule);
        myDependencyImporter.importDependencies(gradleModule.getDependencies(),intellijModule);
      }
    }
  }
);
}
