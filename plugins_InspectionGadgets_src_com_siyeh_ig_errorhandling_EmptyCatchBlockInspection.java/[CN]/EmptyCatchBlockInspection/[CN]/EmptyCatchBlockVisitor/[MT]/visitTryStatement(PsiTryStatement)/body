{
  super.visitTryStatement(statement);
  if (m_ignoreTestCases) {
    final PsiClass aClass=ClassUtils.getContainingClass(statement);
    if (aClass != null && ClassUtils.isSubclass(aClass,"junit.framework.TestCase")) {
      return;
    }
  }
  final PsiCodeBlock[] catchBlocks=statement.getCatchBlocks();
  for (int i=0; i < catchBlocks.length; i++) {
    final PsiCodeBlock block=catchBlocks[i];
    if (catchBlockIsEmpty(block)) {
      final PsiElement catchToken=getCatchToken(statement,i);
      registerError(catchToken);
    }
  }
}
