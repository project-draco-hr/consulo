{
  final List<Change> textChanges=new ArrayList<Change>();
  final List<ShelvedBinaryFile> binaryFiles=new ArrayList<ShelvedBinaryFile>();
  for (  Change change : changes) {
    if (ChangesUtil.getFilePath(change).isDirectory()) {
      continue;
    }
    if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) {
      binaryFiles.add(shelveBinaryFile(change));
    }
 else {
      textChanges.add(change);
    }
  }
  File patchPath=getPatchPath(commitMessage);
  final List<FilePatch> patches=PatchBuilder.buildPatch(textChanges,myProject.getBaseDir().getPresentableUrl(),true,false);
  myFileProcessor.savePathFile(new CompoundShelfFileProcesor.ContentProvider(){
    public void writeContentTo(    final Writer writer) throws IOException {
      UnifiedDiffWriter.write(patches,writer,"\n");
    }
  }
,patchPath);
  RollbackChangesDialog.doRollback(myProject,changes,true,false,null,VcsBundle.message("shelve.changes.action"));
  final ShelvedChangeList changeList=new ShelvedChangeList(patchPath.toString(),commitMessage.replace('\n',' '),binaryFiles);
  myShelvedChangeLists.add(changeList);
  notifyStateChanged();
  return changeList;
}
