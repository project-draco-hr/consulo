{
  final String beforePath=file.BEFORE_PATH == null ? null : file.BEFORE_PATH.replace(File.separatorChar,'/');
  final String afterPath=file.AFTER_PATH == null ? null : file.AFTER_PATH.replace(File.separatorChar,'/');
  final boolean isNewFile=beforePath == null;
  final Ref<FilePath> result=new Ref<FilePath>();
  final Ref<IOException> ex=new Ref<IOException>();
  final Ref<VirtualFile> patchedFileRef=new Ref<VirtualFile>();
  final File shelvedFile=file.SHELVED_PATH == null ? null : new File(file.SHELVED_PATH);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        ApplyPatchContext context=new ApplyPatchContext(myProject.getBaseDir(),0,true,true);
        VirtualFile patchTarget=FilePatch.findPatchTarget(context,beforePath,afterPath,isNewFile);
        if (patchTarget != null) {
          result.set(new FilePathImpl(patchTarget));
          if (shelvedFile == null) {
            patchTarget.delete(this);
          }
 else {
            if (isNewFile) {
              patchTarget=patchTarget.createChildData(this,new File(afterPath).getName());
            }
            patchTarget.setBinaryContent(FileUtil.loadFileBytes(shelvedFile));
            patchedFileRef.set(patchTarget);
          }
        }
      }
 catch (      IOException e) {
        ex.set(e);
      }
    }
  }
);
  if (!ex.isNull()) {
    throw ex.get();
  }
  if (shelvedFile != null) {
    FileUtil.delete(shelvedFile);
  }
  return result.get();
}
