{
  super(PluginDownloader.class);
  final JTable entryTable=getEntryTable();
  entryTable.setTableHeader(null);
  entryTable.setDefaultRenderer(PluginDownloader.class,new ColoredTableCellRenderer(){
    protected void customizeCellRenderer(    final JTable table,    final Object value,    final boolean selected,    final boolean hasFocus,    final int row,    final int column){
      final PluginDownloader downloader=(PluginDownloader)value;
      if (downloader != null) {
        final String pluginName=downloader.getPluginName();
        append(pluginName,SimpleTextAttributes.REGULAR_ATTRIBUTES);
        final IdeaPluginDescriptor ideaPluginDescriptor=PluginManager.getPlugin(PluginId.getId(downloader.getPluginId()));
        if (ideaPluginDescriptor != null) {
          final String oldPluginName=ideaPluginDescriptor.getName();
          if (!Comparing.strEqual(pluginName,oldPluginName)) {
            append(" - " + oldPluginName,SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
        final String loadedVersion=downloader.getPluginVersion();
        if (loadedVersion != null || (ideaPluginDescriptor != null && ideaPluginDescriptor.getVersion() != null)) {
          final String installedVersion=ideaPluginDescriptor != null && ideaPluginDescriptor.getVersion() != null ? "v. " + ideaPluginDescriptor.getVersion() + (loadedVersion != null ? " -> " : "") : "";
          final String availableVersion=loadedVersion != null ? loadedVersion : "";
          append(" (" + installedVersion + availableVersion+ ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
        }
      }
    }
  }
);
  entryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final int selectedRow=entryTable.getSelectedRow();
      if (selectedRow != -1) {
        final PluginDownloader selection=getValueAt(selectedRow);
        final IdeaPluginDescriptor descriptor=selection.getDescriptor();
        if (descriptor != null) {
          PluginManagerMain.pluginInfoUpdate(descriptor,null,myDescriptionPanel);
        }
      }
    }
  }
);
  setCheckboxColumnName("");
  myDescriptionPanel.setPreferredSize(new Dimension(400,-1));
  myDescriptionPanel.setEditable(false);
  myDescriptionPanel.setContentType(UIUtil.HTML_MIME);
  myDescriptionPanel.addHyperlinkListener(new PluginManagerMain.MyHyperlinkListener());
  removeAll();
  final Splitter splitter=new Splitter(false);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(entryTable));
  splitter.setSecondComponent(ScrollPaneFactory.createScrollPane(myDescriptionPanel));
  add(splitter,BorderLayout.CENTER);
}
