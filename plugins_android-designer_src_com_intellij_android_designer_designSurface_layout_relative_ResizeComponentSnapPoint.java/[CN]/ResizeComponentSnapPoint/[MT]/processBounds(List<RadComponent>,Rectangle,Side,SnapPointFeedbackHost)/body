{
  super.processBounds(components,bounds,resizeSide,feedback);
  mySide=resizeSide;
  if (mySnapPoint == null) {
    mySnapPoint=new ComponentSnapPoint(myComponent,myHorizontal){
      @Override protected boolean processLeftLeft(      int startX,      int endX,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.left && super.processLeftLeft(startX,endX,targetBounds,feedback);
      }
      @Override protected boolean processLeftRight(      int startX,      int endX,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.right && super.processLeftRight(startX,endX,targetBounds,feedback);
      }
      @Override protected boolean processRightLeft(      int startX,      int endX,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.left && super.processRightLeft(startX,endX,targetBounds,feedback);
      }
      @Override protected boolean processRightRight(      int startX,      int endX,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.right && super.processRightRight(startX,endX,targetBounds,feedback);
      }
      @Override protected boolean processTopTop(      int startY,      int endY,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.top && super.processTopTop(startY,endY,targetBounds,feedback);
      }
      @Override protected boolean processTopBottom(      int startY,      int endY,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.bottom && super.processTopBottom(startY,endY,targetBounds,feedback);
      }
      @Override protected boolean processBottomTop(      int startY,      int endY,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.top && super.processBottomTop(startY,endY,targetBounds,feedback);
      }
      @Override protected boolean processBottomBottom(      int startY,      int endY,      Rectangle targetBounds,      SnapPointFeedbackHost feedback){
        return mySide == Side.bottom && super.processBottomBottom(startY,endY,targetBounds,feedback);
      }
    }
;
  }
  return mySnapPoint.processBounds(components,bounds,feedback);
}
