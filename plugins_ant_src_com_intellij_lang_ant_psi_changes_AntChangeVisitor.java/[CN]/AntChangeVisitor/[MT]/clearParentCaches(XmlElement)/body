{
  final TextRange textRange=el.getTextRange();
  final AntFile file=getAntFile(el);
  if (file == null) {
    return;
  }
  AntElement element=file.lightFindElementAt(textRange.getStartOffset());
  while (element != null && !(element instanceof AntFile) && (!element.isValid() || element.getTextLength() <= textRange.getLength() || element instanceof AntOuterProjectElement)) {
    element=element.getAntParent();
  }
  if (element == null) {
    element=file;
  }
synchronized (PsiLock.LOCK) {
    element.clearCaches();
    final AntMacroDef macrodef=PsiTreeUtil.getParentOfType(element,AntMacroDef.class);
    if (macrodef != null) {
      macrodef.clearCaches();
    }
    final AntPresetDef presetdef=PsiTreeUtil.getParentOfType(element,AntPresetDef.class);
    if (presetdef != null) {
      presetdef.clearCaches();
    }
    final AntTypeDef typeDef=PsiTreeUtil.getParentOfType(element,AntTypeDef.class);
    if (typeDef != null) {
      typeDef.clearCaches();
    }
  }
  updateBuildFile(file);
}
