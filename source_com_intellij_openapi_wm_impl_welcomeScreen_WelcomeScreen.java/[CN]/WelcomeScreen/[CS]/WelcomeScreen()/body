{
  myPluginsPanel=new JPanel(new GridBagLayout());
  myPluginsPanel.setBackground(PLUGINS_PANEL_COLOR);
  JLabel pluginsCaption=new JLabel("Plugins");
  pluginsCaption.setFont(CAPTION_FONT);
  pluginsCaption.setForeground(CAPTION_COLOR);
  JLabel installedPluginsCaption=new JLabel("Installed Plugins");
  installedPluginsCaption.setFont(LINK_FONT);
  installedPluginsCaption.setForeground(CAPTION_COLOR);
  JPanel pluginsListPanel=new JPanel(new GridBagLayout());
  pluginsListPanel.setBackground(PLUGINS_PANEL_COLOR);
  JPanel topPluginsPanel=new JPanel(new GridBagLayout());
  topPluginsPanel.setBackground(PLUGINS_PANEL_COLOR);
  PluginDescriptor[] myInstalledPlugins=PluginManager.getPlugins();
  if (myInstalledPlugins == null || myInstalledPlugins.length == 0) {
    addListItemToPlugins(pluginsListPanel,"<html><i>No plugins currently installed.</i></html>",null,null,null);
  }
 else {
    for (int i=0; i < myInstalledPlugins.length; i++) {
      PluginDescriptor plugin=myInstalledPlugins[i];
      addListItemToPlugins(pluginsListPanel,plugin.getName(),plugin.getDescription(),plugin.getVendorLogoPath(),plugin.getUrl());
    }
  }
  GridBagConstraints gBC=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(17,25,0,0),0,0);
  topPluginsPanel.add(pluginsCaption,gBC);
  JLabel emptyLabel_1=new JLabel();
  emptyLabel_1.setBackground(PLUGINS_PANEL_COLOR);
  gBC=new GridBagConstraints(1,0,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  topPluginsPanel.add(emptyLabel_1,gBC);
  gBC=new GridBagConstraints(2,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(13,0,0,10),0,0);
  MyActionButton openPluginManager=new PluginsActionButton(null,OPEN_PLUGINS_ICON,null){
    protected void onPress(    InputEvent e){
      new SingleConfigurableEditor(myPluginsPanel,PluginManagerConfigurable.getInstance(),null).show();
    }
    public Dimension getMaximumSize(){
      return OPEN_PLUGIN_MANAGER_SIZE;
    }
    public Dimension getMinimumSize(){
      return OPEN_PLUGIN_MANAGER_SIZE;
    }
    public Dimension getPreferredSize(){
      return OPEN_PLUGIN_MANAGER_SIZE;
    }
  }
;
  openPluginManager.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  topPluginsPanel.add(openPluginManager,gBC);
  openPluginManager.setupWithinPanel(myPluginsPanel,PLUGINS_GROUP,myPluginsButtonsCount,0);
  myPluginsButtonsCount++;
  gBC=new GridBagConstraints(0,1,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(15,25,0,0),0,0);
  topPluginsPanel.add(installedPluginsCaption,gBC);
  JLabel emptyLabel_2=new JLabel();
  emptyLabel_2.setBackground(PLUGINS_PANEL_COLOR);
  gBC=new GridBagConstraints(1,1,2,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  topPluginsPanel.add(emptyLabel_2,gBC);
  gBC=new GridBagConstraints(0,0,1,1,0.5,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  myPluginsPanel.add(topPluginsPanel,gBC);
  gBC=new GridBagConstraints(0,1,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,5,0,0),0,0);
  myPluginsPanel.add(pluginsListPanel,gBC);
  JPanel emptyPanel_1=new JPanel();
  emptyPanel_1.setBackground(PLUGINS_PANEL_COLOR);
  gBC=new GridBagConstraints(0,2,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0);
  myPluginsPanel.add(emptyPanel_1,gBC);
  JScrollPane myPluginsScrollPane=ScrollPaneFactory.createScrollPane(myPluginsPanel);
  myPluginsScrollPane.setBorder(BorderFactory.createLineBorder(GRAY_BORDER_COLOR));
  myPluginsScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  myPluginsScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  myMainPanel=new JPanel(new GridBagLayout());
  myMainPanel.setBackground(MAIN_PANEL_COLOR);
  JPanel quickStartPanel=new JPanel(new GridBagLayout());
  quickStartPanel.setBackground(MAIN_PANEL_COLOR);
  JLabel quickStartCaption=new JLabel("Quick Start");
  quickStartCaption.setFont(CAPTION_FONT);
  quickStartCaption.setForeground(CAPTION_COLOR);
  gBC=new GridBagConstraints(0,0,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(20,0,5,0),0,0);
  quickStartPanel.add(quickStartCaption,gBC);
  MyActionButton newProject=new MyActionButton(null,NEW_PROJECT_ICON,null){
    protected void onPress(    InputEvent e){
      ProjectUtil.createNewProject(null);
    }
  }
;
  addButtonToQuickStart(quickStartPanel,newProject,"Create New Project","Start the \"New Project\" Wizard that will lead you through " + "the steps necessary for new project creation.");
  MyActionButton openRecentProject=new ButtonWithExtension(null,REOPEN_RECENT_ICON,null){
    protected void onPress(    InputEvent e,    final MyActionButton button){
      final ActionManager actionManager=ActionManager.getInstance();
      final AnAction action=new RecentProjectsAction();
      action.actionPerformed(new AnActionEvent(e,new DataContext(){
        public Object getData(        String dataId){
          if (DataConstants.PROJECT.equals(dataId)) {
            return null;
          }
          return button;
        }
      }
,ActionPlaces.UNKNOWN,new PresentationFactory().getPresentation(action),actionManager,0));
    }
  }
;
  addButtonToQuickStart(quickStartPanel,openRecentProject,"Reopen Recent Project...","You can open one of the most recent " + "projects you were working with. Click the icon " + "or link to select project from the list.");
  MyActionButton getFromVCS=new ButtonWithExtension(null,FROM_VCS_ICON,null){
    protected void onPress(    InputEvent e,    final MyActionButton button){
      final ActionManager actionManager=ActionManager.getInstance();
      final AnAction action=new GetFromVcsAction();
      action.actionPerformed(new AnActionEvent(e,new DataContext(){
        public Object getData(        String dataId){
          if (DataConstants.PROJECT.equals(dataId)) {
            return null;
          }
          return button;
        }
      }
,ActionPlaces.UNKNOWN,new PresentationFactory().getPresentation(action),actionManager,0));
    }
  }
;
  addButtonToQuickStart(quickStartPanel,getFromVCS,"Get Project From Version Control...","You can check out the entire project from one of " + "the supported Version Control Systems, namely " + "CVS or Subversion.");
  JPanel docsPanel=new JPanel(new GridBagLayout());
  docsPanel.setBackground(MAIN_PANEL_COLOR);
  JLabel docsCaption=new JLabel("Documentation");
  docsCaption.setFont(CAPTION_FONT);
  docsCaption.setForeground(CAPTION_COLOR);
  gBC=new GridBagConstraints(0,0,2,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(20,0,5,0),0,0);
  docsPanel.add(docsCaption,gBC);
  MyActionButton readHelp=new MyActionButton(null,READ_HELP_ICON,null){
    protected void onPress(    InputEvent e){
      HelpManagerImpl.getInstance().invokeHelp("");
    }
  }
;
  addButtonToDocs(docsPanel,readHelp,"Read Help","Open IntelliJ IDEA \"Help Topics\" in the devoted window.");
  MyActionButton defaultKeymap=new MyActionButton(null,KEYMAP_ICON,null){
    protected void onPress(    InputEvent e){
      try {
        BrowserUtil.launchBrowser(KEYMAP_URL);
      }
 catch (      IllegalThreadStateException ex) {
      }
    }
  }
;
  addButtonToDocs(docsPanel,defaultKeymap,"Default Keymap","Open PDF file with the default keymap reference card (27 Kb).");
  JPanel emptyPanel_2=new JPanel();
  emptyPanel_2.setBackground(MAIN_PANEL_COLOR);
  quickStartPanel.add(emptyPanel_2,new GridBagConstraints(0,myQuickStartIdx + 2,2,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  JPanel emptyPanel_3=new JPanel();
  emptyPanel_3.setBackground(MAIN_PANEL_COLOR);
  docsPanel.add(emptyPanel_3,new GridBagConstraints(0,myDocsIdx + 2,2,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  gBC=new GridBagConstraints(0,0,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,30,0,0),0,0);
  myMainPanel.add(quickStartPanel,gBC);
  gBC=new GridBagConstraints(1,0,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,15,0,0),0,0);
  myMainPanel.add(docsPanel,gBC);
  myMainPanel.setPreferredSize(new Dimension(650,450));
  JScrollPane myMainScrollPane=ScrollPaneFactory.createScrollPane(myMainPanel);
  myMainScrollPane.setBorder(null);
  myMainScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  myMainScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  JPanel topPanel=new JPanel(new GridBagLayout()){
    public void paint(    Graphics g){
      Icon welcome=IconLoader.getIcon(CAPTION_IMAGE);
      welcome.paintIcon(null,g,0,0);
      g.setColor(CAPTION_BACKGROUND);
      g.fillRect(welcome.getIconWidth(),0,this.getWidth() - welcome.getIconWidth(),welcome.getIconHeight());
      super.paint(g);
    }
  }
;
  topPanel.setOpaque(false);
  JPanel transparentTopPanel=new JPanel();
  transparentTopPanel.setOpaque(false);
  topPanel.add(transparentTopPanel,new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  topPanel.add(new JLabel(IconLoader.getIcon(DEVELOP_SLOGAN)),new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.SOUTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,10),0,0));
  myWelcomePanel=new JPanel(new GridBagLayout());
  myWelcomePanel.setBackground(MAIN_PANEL_BACKGROUND);
  gBC=new GridBagConstraints(0,0,3,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,5),0,0);
  myWelcomePanel.add(topPanel,gBC);
  gBC=new GridBagConstraints(0,1,2,1,1.4,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,0),0,0);
  myWelcomePanel.add(myMainScrollPane,gBC);
  gBC=new GridBagConstraints(2,1,1,1,0.6,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,15),0,0);
  myWelcomePanel.add(myPluginsScrollPane,gBC);
}
