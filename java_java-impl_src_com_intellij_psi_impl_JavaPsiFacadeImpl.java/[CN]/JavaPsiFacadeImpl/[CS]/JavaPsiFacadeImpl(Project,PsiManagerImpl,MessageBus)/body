{
  myProject=project;
  myResolveHelper=new PsiResolveHelperImpl(PsiManager.getInstance(project));
  myNameHelper=new PsiNameHelperImpl(this);
  myConstantEvaluationHelper=new PsiConstantEvaluationHelperImpl();
  List<PsiElementFinder> elementFinders=new ArrayList<PsiElementFinder>();
  elementFinders.add(new PsiElementFinderImpl());
  ContainerUtil.addAll(elementFinders,myProject.getExtensions(PsiElementFinder.EP_NAME));
  myElementFinders=elementFinders.toArray(new PsiElementFinder[elementFinders.size()]);
  final PsiModificationTrackerImpl modificationTracker=(PsiModificationTrackerImpl)psiManager.getModificationTracker();
  psiManager.addTreeChangePreprocessor(new JavaCodeBlockModificationListener(modificationTracker));
  bus.connect().subscribe(PsiModificationTracker.TOPIC,new PsiModificationTracker.Listener(){
    private long lastTimeSeen=-1L;
    public void modificationCountChanged(){
      final long now=modificationTracker.getJavaStructureModificationCount();
      if (lastTimeSeen != now) {
        lastTimeSeen=now;
        myPackageCache.clear();
      }
    }
  }
);
  DummyHolderFactory.setFactory(new JavaDummyHolderFactory());
  JavaElementType.ANNOTATION.getIndex();
}
