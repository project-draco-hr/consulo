{
  myProject=project;
  myResolveHelper=new PsiResolveHelperImpl(PsiManager.getInstance(project));
  myJavadocManager=new JavadocManagerImpl(project);
  myNameHelper=new PsiNameHelperImpl(this);
  myConstantEvaluationHelper=new PsiConstantEvaluationHelperImpl();
  List<PsiElementFinder> elementFinders=new ArrayList<PsiElementFinder>();
  elementFinders.add(new PsiElementFinderImpl());
  ContainerUtil.addAll(elementFinders,myProject.getExtensions(PsiElementFinder.EP_NAME));
  myElementFinders=elementFinders.toArray(new PsiElementFinder[elementFinders.size()]);
  myPackagePrefixIndex=new PackagePrefixIndex(myProject);
  boolean isProjectDefault=project.isDefault();
  if (isProjectDefault) {
    myShortNamesCache=new EmptyShortNamesCacheImpl();
  }
 else {
    myShortNamesCache=new PsiShortNamesCacheImpl((PsiManagerEx)PsiManager.getInstance(project));
    for (    final PsiShortNamesCache cache : project.getExtensions(PsiShortNamesCache.EP_NAME)) {
      _registerShortNamesCache(cache);
    }
  }
  myFileManager=new JavaFileManagerImpl(psiManager,projectRootManagerEx,psiManager.getFileManager(),bus);
  final PsiModificationTrackerImpl modificationTracker=(PsiModificationTrackerImpl)psiManager.getModificationTracker();
  psiManager.addTreeChangePreprocessor(new JavaCodeBlockModificationListener(modificationTracker));
  bus.connect().subscribe(PsiModificationTracker.TOPIC,new PsiModificationTracker.Listener(){
    private long lastTimeSeen=-1L;
    public void modificationCountChanged(){
      final long now=modificationTracker.getJavaStructureModificationCount();
      if (lastTimeSeen != now) {
        lastTimeSeen=now;
        myPackageCache.clear();
      }
    }
  }
);
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      runStartupActivity();
    }
  }
);
  JavaChangeUtilSupport.setup();
  DummyHolderFactory.setFactory(new JavaDummyHolderFactory());
  JavaElementType.ANNOTATION.getIndex();
  Disposer.register(project,this);
}
