{
  myComponentPanel=new JPanel(new BorderLayout());
  myOptionsPanel=new JPanel(new BorderLayout()){
    public void updateUI(){
      super.updateUI();
      for (      Configurable configurable : myInitializedConfigurables2Component.keySet()) {
        if (configurable.equals(mySelectedConfigurable)) {
          continue;
        }
        JComponent component=myInitializedConfigurables2Component.get(configurable);
        SwingUtilities.updateComponentTreeUI(component);
      }
    }
  }
;
  initTree();
  initToolbar();
  final JBScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  TreeUtil.expandAll(myTree);
  final Dimension preferredSize=new Dimension(myTree.getPreferredSize().width + 20,scrollPane.getPreferredSize().height);
  scrollPane.setPreferredSize(preferredSize);
  scrollPane.setMinimumSize(preferredSize);
  TreeUtil.collapseAll(myTree,1);
  final JPanel leftPane=new JPanel(new BorderLayout());
  leftPane.setBorder(BorderFactory.createRaisedBevelBorder());
  leftPane.add(scrollPane,BorderLayout.CENTER);
  myComponentPanel.add(leftPane,BorderLayout.WEST);
  myOptionsPanel.setBorder(BorderFactory.createEmptyBorder(15,5,2,5));
  JBScrollPane optionsScrollForTinyScreens=new JBScrollPane(myOptionsPanel);
  optionsScrollForTinyScreens.setBorder(null);
  myComponentPanel.add(optionsScrollForTinyScreens,BorderLayout.CENTER);
  optionsScrollForTinyScreens.setPreferredSize(myPreferredSize);
  myComponentPanel.setFocusable(true);
  final KeyAdapter keyAdapter=new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      Configurable[] configurables=mySelectedGroup.getConfigurables();
      int index=myKeySelectedConfigurableIndex;
      if (index == -1)       return;
      int keyCode=e.getKeyCode();
      if (keyCode == KeyEvent.VK_UP) {
        index--;
        if (index == -1) {
          final int groupIdx=ArrayUtil.find(myGroups,mySelectedGroup);
          if (groupIdx > 0) {
            selectGroup(groupIdx - 1,myGroups[groupIdx - 1].getConfigurables().length - 1);
            return;
          }
        }
      }
 else       if (keyCode == KeyEvent.VK_DOWN) {
        index++;
        if (index == configurables.length) {
          final int groupIdx=ArrayUtil.find(myGroups,mySelectedGroup);
          if (groupIdx < myGroups.length - 1) {
            selectGroup(groupIdx + 1,0);
            return;
          }
        }
      }
 else {
        Configurable configurableFromMnemonic=ControlPanelMnemonicsUtil.getConfigurableFromMnemonic(e,myGroups);
        if (configurableFromMnemonic == null)         return;
        int keyGroupIndex=-1;
        ConfigurableGroup keyGroup=null;
        int keyIndexInGroup=0;
        for (int i=0; i < myGroups.length; i++) {
          ConfigurableGroup group=myGroups[i];
          int ingroupIdx=ArrayUtil.find(group.getConfigurables(),configurableFromMnemonic);
          if (ingroupIdx != -1) {
            keyGroupIndex=i;
            keyGroup=group;
            keyIndexInGroup=ingroupIdx;
            break;
          }
        }
        if (mySelectedGroup != keyGroup) {
          selectGroup(keyGroupIndex,keyIndexInGroup);
          return;
        }
        index=ControlPanelMnemonicsUtil.getIndexFromKeycode(keyCode,mySelectedGroup == myGroups[0]);
      }
      if (index == -1 || index >= configurables.length)       return;
      final TreeNode groupNode=myRoot.getChildAt(ArrayUtil.find(myGroups,mySelectedGroup));
      TreeUtil.selectPath(myTree,new TreePath(new TreeNode[]{myRoot,groupNode,groupNode.getChildAt(index)}));
    }
  }
;
  myComponentPanel.addKeyListener(keyAdapter);
  Disposer.register(myDisposable,new Disposable(){
    public void dispose(){
      myComponentPanel.removeKeyListener(keyAdapter);
    }
  }
);
  return myComponentPanel;
}
