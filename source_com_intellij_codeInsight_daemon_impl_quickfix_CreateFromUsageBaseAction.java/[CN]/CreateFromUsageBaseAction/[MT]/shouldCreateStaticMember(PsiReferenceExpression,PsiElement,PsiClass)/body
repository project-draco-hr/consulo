{
  if (targetClass.isInterface()) {
    return false;
  }
  PsiExpression qualifierExpression=ref.getQualifierExpression();
  while (qualifierExpression instanceof PsiParenthesizedExpression) {
    qualifierExpression=((PsiParenthesizedExpression)qualifierExpression).getExpression();
  }
  if (qualifierExpression instanceof PsiReferenceExpression) {
    PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifierExpression;
    PsiElement resolvedElement=referenceExpression.resolve();
    return resolvedElement instanceof PsiClass;
  }
 else   if (qualifierExpression instanceof PsiTypeCastExpression) {
    return false;
  }
 else   if (qualifierExpression instanceof PsiCallExpression) {
    return false;
  }
 else {
    if (enclosingContext instanceof PsiMethod) {
      PsiMethodCallExpression callExpression;
      if (ref.getParent() instanceof PsiMethodCallExpression) {
        callExpression=PsiTreeUtil.getParentOfType(ref.getParent(),PsiMethodCallExpression.class);
      }
 else {
        callExpression=PsiTreeUtil.getParentOfType(ref,PsiMethodCallExpression.class);
      }
      if (callExpression != null && callExpression.getMethodExpression().getText().equals("super")) {
        return true;
      }
      PsiMethod method=(PsiMethod)enclosingContext;
      return method.hasModifierProperty(PsiModifier.STATIC);
    }
 else     if (enclosingContext instanceof PsiField) {
      PsiField field=(PsiField)enclosingContext;
      return field.hasModifierProperty(PsiModifier.STATIC);
    }
 else     if (enclosingContext instanceof PsiClassInitializer) {
      PsiClassInitializer initializer=(PsiClassInitializer)enclosingContext;
      return initializer.hasModifierProperty(PsiModifier.STATIC);
    }
  }
  return false;
}
