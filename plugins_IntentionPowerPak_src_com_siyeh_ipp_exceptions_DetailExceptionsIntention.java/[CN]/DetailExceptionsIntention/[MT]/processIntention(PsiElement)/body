{
  final PsiJavaToken token=(PsiJavaToken)element;
  final PsiTryStatement tryStatement=(PsiTryStatement)token.getParent();
  if (tryStatement == null) {
    return;
  }
  final String text=tryStatement.getText();
  final int length=text.length();
  @NonNls final StringBuilder newTryStatement=new StringBuilder(length);
  newTryStatement.append("try");
  final Set<PsiType> exceptionsThrown=new HashSet<PsiType>();
  final PsiResourceList resourceList=tryStatement.getResourceList();
  if (resourceList != null) {
    newTryStatement.append(resourceList.getText());
    ExceptionUtils.calculateExceptionsThrownForResourceList(resourceList,exceptionsThrown);
  }
  final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
  if (tryBlock == null) {
    return;
  }
  final String tryBlockText=tryBlock.getText();
  newTryStatement.append(tryBlockText);
  ExceptionUtils.calculateExceptionsThrownForCodeBlock(tryBlock,exceptionsThrown);
  final Comparator<PsiType> comparator=new HierarchicalTypeComparator();
  final List<PsiType> exceptionsAlreadyEmitted=new ArrayList<PsiType>();
  final PsiCatchSection[] catchSections=tryStatement.getCatchSections();
  for (  PsiCatchSection catchSection : catchSections) {
    final PsiParameter parameter=catchSection.getParameter();
    final PsiCodeBlock block=catchSection.getCatchBlock();
    if (parameter != null && block != null) {
      final PsiType caughtType=parameter.getType();
      final List<PsiType> exceptionsToExpand=new ArrayList<PsiType>(10);
      for (      Object aExceptionsThrown : exceptionsThrown) {
        final PsiType thrownType=(PsiType)aExceptionsThrown;
        if (caughtType.isAssignableFrom(thrownType)) {
          exceptionsToExpand.add(thrownType);
        }
      }
      exceptionsToExpand.removeAll(exceptionsAlreadyEmitted);
      Collections.sort(exceptionsToExpand,comparator);
      for (      PsiType thrownType : exceptionsToExpand) {
        newTryStatement.append("catch(");
        final String exceptionType=thrownType.getCanonicalText();
        newTryStatement.append(exceptionType);
        newTryStatement.append(' ');
        final String parameterName=parameter.getName();
        newTryStatement.append(parameterName);
        newTryStatement.append(')');
        final String blockText=block.getText();
        newTryStatement.append(blockText);
        exceptionsAlreadyEmitted.add(thrownType);
      }
    }
  }
  final PsiCodeBlock finallyBlock=tryStatement.getFinallyBlock();
  if (finallyBlock != null) {
    newTryStatement.append("finally");
    final String finallyBlockText=finallyBlock.getText();
    newTryStatement.append(finallyBlockText);
  }
  final String newStatement=newTryStatement.toString();
  replaceStatementAndShorten(newStatement,tryStatement);
}
