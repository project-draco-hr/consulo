{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Ref<EditorWithProviderComposite> compositeRef=new Ref<EditorWithProviderComposite>();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      compositeRef.set(window.findFileComposite(file));
    }
  }
);
  final FileEditorProvider[] newProviders;
  final AsyncFileEditorProvider.Builder[] builders;
  if (compositeRef.isNull()) {
    newProviders=getAvailableProviders(file);
    if (newProviders.length == 0) {
      return Pair.create(EMPTY_EDITOR_ARRAY,EMPTY_PROVIDER_ARRAY);
    }
    builders=new AsyncFileEditorProvider.Builder[newProviders.length];
    for (int i=0; i < newProviders.length; i++) {
      try {
        final FileEditorProvider provider=newProviders[i];
        LOG.assertTrue(provider != null,"Provider for file " + file + " is null. All providers: "+ Arrays.asList(newProviders));
        LOG.assertTrue(provider.accept(myProject,file),"Provider " + provider + " doesn't accept file "+ file);
        if ((provider instanceof AsyncFileEditorProvider)) {
          builders[i]=((AsyncFileEditorProvider)provider).createEditorAsync(myProject,file);
        }
      }
 catch (      Exception e) {
        LOG.error(e);
      }
catch (      AssertionError e) {
        LOG.error(e);
      }
    }
  }
 else {
    newProviders=null;
    builders=null;
  }
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed() || !file.isValid()) {
        return;
      }
      compositeRef.set(window.findFileComposite(file));
      boolean newEditor=compositeRef.isNull();
      if (newEditor) {
        clearWindowIfNeeded(window);
        getProject().getMessageBus().syncPublisher(FileEditorManagerListener.Before.FILE_EDITOR_MANAGER).beforeFileOpened(FileEditorManagerImpl.this,file);
        FileEditor[] newEditors=new FileEditor[newProviders.length];
        for (int i=0; i < newProviders.length; i++) {
          try {
            final FileEditorProvider provider=newProviders[i];
            final FileEditor editor=builders[i] == null ? provider.createEditor(myProject,file) : builders[i].build();
            LOG.assertTrue(editor.isValid());
            newEditors[i]=editor;
            editor.addPropertyChangeListener(myEditorPropertyChangeListener);
            editor.putUserData(DUMB_AWARE,DumbService.isDumbAware(provider));
          }
 catch (          Exception e) {
            LOG.error(e);
          }
catch (          AssertionError e) {
            LOG.error(e);
          }
        }
        EditorWithProviderComposite composite=new EditorWithProviderComposite(file,newEditors,newProviders,FileEditorManagerImpl.this);
        if (index >= 0) {
          composite.getFile().putUserData(EditorWindow.INITIAL_INDEX_KEY,index);
        }
        compositeRef.set(composite);
      }
      final EditorWithProviderComposite composite=compositeRef.get();
      FileEditor[] editors=composite.getEditors();
      FileEditorProvider[] providers=composite.getProviders();
      window.setEditor(composite,current,focusEditor);
      for (int i=0; i < editors.length; i++) {
        restoreEditorState(file,providers[i],editors[i],entry,newEditor);
      }
      final FileEditorProvider selectedProvider;
      if (entry == null) {
        selectedProvider=((FileEditorProviderManagerImpl)FileEditorProviderManager.getInstance()).getSelectedFileEditorProvider(myEditorHistoryManager,file,providers);
      }
 else {
        selectedProvider=entry.mySelectedProvider;
      }
      if (selectedProvider != null) {
        for (int i=editors.length - 1; i >= 0; i--) {
          final FileEditorProvider provider=providers[i];
          if (provider.equals(selectedProvider)) {
            composite.setSelectedEditor(i);
            break;
          }
        }
      }
      window.getOwner().setCurrentWindow(window,focusEditor);
      window.getOwner().afterFileOpen(file);
      addSelectionRecord(file,window);
      composite.getSelectedEditor().selectNotify();
      if (!ApplicationManagerEx.getApplicationEx().isUnitTestMode()) {
        if (focusEditor) {
          window.setAsCurrentWindow(true);
          ToolWindowManager.getInstance(myProject).activateEditorComponent();
          IdeFocusManager.getInstance(myProject).toFront(window.getOwner());
        }
      }
      if (newEditor) {
        if (window.isShowing()) {
          window.setPaintBlocked(true);
        }
        notifyPublisher(new Runnable(){
          @Override public void run(){
            window.setPaintBlocked(false);
            if (isFileOpen(file)) {
              getProject().getMessageBus().syncPublisher(FileEditorManagerListener.FILE_EDITOR_MANAGER).fileOpened(FileEditorManagerImpl.this,file);
            }
          }
        }
);
      }
      ((IdeDocumentHistoryImpl)IdeDocumentHistory.getInstance(myProject)).onSelectionChanged();
      updateFileName(file);
      IdeDocumentHistory.getInstance(myProject).includeCurrentCommandAsNavigation();
      if (pin != null) {
        window.setFilePinned(file,pin);
      }
    }
  }
);
  return Pair.create(compositeRef.get().getEditors(),compositeRef.get().getProviders());
}
