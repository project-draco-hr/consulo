{
  FileEditor[] editors;
  FileEditorProvider[] providers;
  final EditorWithProviderComposite newSelectedComposite;
  boolean newEditorCreated=false;
  final boolean open=window.isFileOpen(file);
  if (open) {
    newSelectedComposite=window.findFileComposite(file);
    LOG.assertTrue(newSelectedComposite != null);
    editors=newSelectedComposite.getEditors();
    providers=newSelectedComposite.getProviders();
  }
 else {
    final FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
    providers=editorProviderManager.getProviders(myProject,file);
    if (DumbService.getInstance(myProject).isDumb()) {
      final List<FileEditorProvider> dumbAware=ContainerUtil.findAll(providers,new Condition<FileEditorProvider>(){
        public boolean value(        FileEditorProvider fileEditorProvider){
          return DumbService.isDumbAware(fileEditorProvider);
        }
      }
);
      providers=dumbAware.toArray(new FileEditorProvider[dumbAware.size()]);
    }
    if (providers.length == 0) {
      return Pair.create(EMPTY_EDITOR_ARRAY,EMPTY_PROVIDER_ARRAY);
    }
    newEditorCreated=true;
    getProject().getMessageBus().syncPublisher(FileEditorManagerListener.Before.FILE_EDITOR_MANAGER).beforeFileOpened(this,file);
    editors=new FileEditor[providers.length];
    for (int i=0; i < providers.length; i++) {
      try {
        final FileEditorProvider provider=providers[i];
        LOG.assertTrue(provider != null);
        LOG.assertTrue(provider.accept(myProject,file));
        final FileEditor editor=provider.createEditor(myProject,file);
        LOG.assertTrue(editor != null);
        LOG.assertTrue(editor.isValid());
        editors[i]=editor;
        editor.addPropertyChangeListener(myEditorPropertyChangeListener);
        editor.putUserData(DUMB_AWARE,DumbService.isDumbAware(provider));
        if (current && editor instanceof TextEditorImpl) {
          ((TextEditorImpl)editor).initFolding();
        }
      }
 catch (      Exception e) {
        LOG.error(e);
      }
catch (      AssertionError e) {
        LOG.error(e);
      }
    }
    newSelectedComposite=new EditorWithProviderComposite(file,editors,providers,this);
  }
  window.setEditor(newSelectedComposite,focusEditor);
  final EditorHistoryManager editorHistoryManager=EditorHistoryManager.getInstance(myProject);
  for (int i=0; i < editors.length; i++) {
    final FileEditor editor=editors[i];
    if (editor instanceof TextEditor) {
      ((EditorEx)((TextEditor)editor).getEditor()).stopOptimizedScrolling();
    }
    final FileEditorProvider provider=providers[i];
    FileEditorState state=null;
    if (entry != null) {
      state=entry.getState(provider);
    }
    if (state == null && !open) {
      state=editorHistoryManager.getState(file,provider);
    }
    if (state != null) {
      editor.setState(state);
    }
  }
  final FileEditorProvider selectedProvider=editorHistoryManager.getSelectedProvider(file);
  if (selectedProvider != null) {
    final FileEditor[] _editors=newSelectedComposite.getEditors();
    final FileEditorProvider[] _providers=newSelectedComposite.getProviders();
    for (int i=_editors.length - 1; i >= 0; i--) {
      final FileEditorProvider provider=_providers[i];
      if (provider.equals(selectedProvider)) {
        newSelectedComposite.setSelectedEditor(i);
        break;
      }
    }
  }
  window.getOwner().setCurrentWindow(window,false);
  window.getOwner().afterFileOpen(file);
  newSelectedComposite.getSelectedEditor().selectNotify();
  if (newEditorCreated) {
    IdeFocusManager.getInstance(myProject).doWhenFocusSettlesDown(new Runnable(){
      @Override public void run(){
        getProject().getMessageBus().syncPublisher(FileEditorManagerListener.FILE_EDITOR_MANAGER).fileOpened(FileEditorManagerImpl.this,file);
      }
    }
);
    final VirtualFile parentDir=file.getParent();
    if (parentDir != null) {
      final LocalFileSystem.WatchRequest request=LocalFileSystem.getInstance().addRootToWatch(parentDir.getPath(),false);
      file.putUserData(WATCH_REQUEST_KEY,request);
    }
  }
  ((IdeDocumentHistoryImpl)IdeDocumentHistory.getInstance(myProject)).onSelectionChanged();
  if (!ApplicationManagerEx.getApplicationEx().isUnitTestMode()) {
    if (focusEditor) {
      window.setAsCurrentWindow(true);
      ToolWindowManager.getInstance(myProject).activateEditorComponent();
    }
  }
  updateFileName(file);
  IdeDocumentHistory.getInstance(myProject).includeCurrentCommandAsNavigation();
  return Pair.create(editors,providers);
}
