{
  getSplitters().startListeningFocus();
  MessageBusConnection connection=myProject.getMessageBus().connect(myProject);
  final FileStatusManager fileStatusManager=FileStatusManager.getInstance(myProject);
  if (fileStatusManager != null) {
    final MyFileStatusListener myFileStatusListener=new MyFileStatusListener();
    fileStatusManager.addFileStatusListener(myFileStatusListener,myProject);
  }
  connection.subscribe(AppTopics.FILE_TYPES,new MyFileTypeListener());
  final MyVirtualFileListener myVirtualFileListener=new MyVirtualFileListener();
  VirtualFileManager.getInstance().addVirtualFileListener(myVirtualFileListener,myProject);
  final MyUISettingsListener myUISettingsListener=new MyUISettingsListener();
  UISettings.getInstance().addUISettingsListener(myUISettingsListener);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      UISettings.getInstance().removeUISettingsListener(myUISettingsListener);
    }
  }
);
  StartupManager.getInstance(myProject).registerPostStartupActivity(new DumbAwareRunnable(){
    public void run(){
      ToolWindowManager.getInstance(myProject).invokeLater(new Runnable(){
        public void run(){
          CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
            public void run(){
              setTabsMode(UISettings.getInstance().EDITOR_TAB_PLACEMENT != UISettings.TABS_NONE);
              getSplitters().openFiles();
              LaterInvocator.invokeLater(new Runnable(){
                public void run(){
                  long currentTime=System.nanoTime();
                  Long startTime=myProject.getUserData(ProjectImpl.CREATION_TIME);
                  if (startTime != null) {
                    LOG.info("Project opening took " + (currentTime - startTime.longValue()) / 1000000 + " ms");
                    PluginManager.dumpPluginClassStatistics();
                  }
                }
              }
);
            }
          }
,"",null);
        }
      }
);
    }
  }
);
}
