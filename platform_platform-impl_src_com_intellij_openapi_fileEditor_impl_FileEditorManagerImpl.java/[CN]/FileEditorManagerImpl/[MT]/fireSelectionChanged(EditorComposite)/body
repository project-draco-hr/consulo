{
  final Trinity<VirtualFile,FileEditor,FileEditorProvider> oldData=extract(SoftReference.dereference(myLastSelectedComposite));
  final Trinity<VirtualFile,FileEditor,FileEditorProvider> newData=extract(newSelectedComposite);
  myLastSelectedComposite=newSelectedComposite == null ? null : new WeakReference<EditorComposite>(newSelectedComposite);
  final boolean filesEqual=oldData.first == null ? newData.first == null : oldData.first.equals(newData.first);
  final boolean editorsEqual=oldData.second == null ? newData.second == null : oldData.second.equals(newData.second);
  if (!filesEqual || !editorsEqual) {
    if (oldData.first != null && newData.first != null) {
      for (      FileEditorAssociateFinder finder : Extensions.getExtensions(FileEditorAssociateFinder.EP_NAME)) {
        VirtualFile associatedFile=finder.getAssociatedFileToOpen(myProject,oldData.first);
        if (Comparing.equal(associatedFile,newData.first)) {
          return;
        }
      }
    }
    final FileEditorManagerEvent event=new FileEditorManagerEvent(this,oldData.first,oldData.second,oldData.third,newData.first,newData.second,newData.third);
    final FileEditorManagerListener publisher=getProject().getMessageBus().syncPublisher(FileEditorManagerListener.FILE_EDITOR_MANAGER);
    if (newData.first != null) {
      final JComponent component=newData.second.getComponent();
      final EditorWindowHolder holder=UIUtil.getParentOfType(EditorWindowHolder.class,component);
      if (holder != null) {
        addSelectionRecord(newData.first,holder.getEditorWindow());
      }
    }
    notifyPublisher(new Runnable(){
      @Override public void run(){
        publisher.selectionChanged(event);
      }
    }
);
  }
}
