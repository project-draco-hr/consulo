{
  JTextComponent oldComponent=search ? mySearchTextComponent : myReplaceTextComponent;
  Color oldBackground=oldComponent != null ? oldComponent.getBackground() : null;
  final MyTextComponentWrapper wrapper=search ? mySearchFieldWrapper : myReplaceFieldWrapper;
  if (isMultiline() && oldComponent instanceof JTextArea)   return false;
  if (!isMultiline() && oldComponent instanceof JTextField)   return false;
  final JTextComponent textComponent;
  if (isMultiline()) {
    SearchTextArea textArea=new SearchTextArea(search);
    textComponent=textArea.getTextArea();
    ((JTextArea)textComponent).setColumns(25);
    ((JTextArea)textComponent).setRows(2);
    wrapper.setContent(textArea);
  }
 else {
    SearchTextField searchTextField=new SearchTextField(true);
    searchTextField.setOpaque(false);
    textComponent=searchTextField.getTextEditor();
    searchTextField.getTextEditor().setColumns(25);
    if (UIUtil.isUnderGTKLookAndFeel()) {
      textComponent.setOpaque(false);
    }
    searchTextField.setHistorySize(20);
    searchTextField.setHistory(ContainerUtil.reverse(Arrays.asList(search ? FindSettings.getInstance().getRecentFindStrings() : FindSettings.getInstance().getRecentReplaceStrings())));
    textComponent.registerKeyboardAction(new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        final String text=textComponent.getText();
        setMultilineInternal(true);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            ObjectUtils.assertNotNull(wrapper.getTextComponent()).setText(text + "\n");
          }
        }
);
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.ALT_DOWN_MASK),JComponent.WHEN_FOCUSED);
    wrapper.setContent(searchTextField);
  }
  UIUtil.addUndoRedoActions(textComponent);
  Utils.setSmallerFont(textComponent);
  textComponent.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  if (oldBackground != null) {
    textComponent.setBackground(oldBackground);
  }
  textComponent.addFocusListener(new FocusListener(){
    @Override public void focusGained(    final FocusEvent e){
      textComponent.repaint();
    }
    @Override public void focusLost(    final FocusEvent e){
      textComponent.repaint();
    }
  }
);
  installCloseOnEscapeAction(textComponent);
  return true;
}
