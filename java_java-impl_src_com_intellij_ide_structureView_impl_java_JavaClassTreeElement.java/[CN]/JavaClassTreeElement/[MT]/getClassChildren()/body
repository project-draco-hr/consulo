{
  final PsiClass aClass=getElement();
  if (aClass == null)   return Collections.emptyList();
  List<PsiElement> children=Arrays.asList(aClass.getChildren());
  Collection<PsiElement> ownChildren=new THashSet<PsiElement>();
  ContainerUtil.addAll(ownChildren,aClass.getFields());
  ContainerUtil.addAll(ownChildren,aClass.getMethods());
  ContainerUtil.addAll(ownChildren,aClass.getInnerClasses());
  ContainerUtil.addAll(ownChildren,aClass.getInitializers());
  Collection<PsiElement> inherited=new LinkedHashSet<PsiElement>(children);
  List<StructureViewTreeElement> array=new ArrayList<StructureViewTreeElement>(inherited.size());
  aClass.processDeclarations(new AddAllMembersProcessor(inherited,aClass),ResolveState.initial(),null,aClass);
  for (  PsiElement child : inherited) {
    if (!child.isValid())     continue;
    boolean isInherited=!ownChildren.contains(child);
    if (child instanceof PsiClass) {
      array.add(new JavaClassTreeElement((PsiClass)child,isInherited));
    }
 else     if (child instanceof PsiField) {
      array.add(new PsiFieldTreeElement((PsiField)child,isInherited));
    }
 else     if (child instanceof PsiMethod) {
      array.add(new PsiMethodTreeElement((PsiMethod)child,isInherited));
    }
 else     if (child instanceof PsiClassInitializer) {
      array.add(new ClassInitializerTreeElement((PsiClassInitializer)child));
    }
  }
  return array;
}
