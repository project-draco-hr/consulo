{
  getSettings().KEEP_CONTROL_STATEMENT_IN_ONE_LINE=false;
  getSettings().WHILE_ON_NEW_LINE=true;
  final JavaPsiFacade facade=getJavaFacade();
  final LanguageLevel stored=LanguageLevelProjectExtension.getInstance(facade.getProject()).getLanguageLevel();
  LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(LanguageLevel.JDK_1_5);
  try {
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        if (a) foo();\n"+ "        else bar();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        if (a)\n"+ "            foo();\n"+ "        else\n"+ "            bar();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++)\n"+ "            foo();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int var : vars) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int var : vars)\n"+ "            foo();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        do foo(); while (true);\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        do\n"+ "            foo();\n"+ "        while (true);\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        while(true) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        while (true)\n"+ "            foo();\n"+ "    }\n"+ "}");
    getSettings().KEEP_CONTROL_STATEMENT_IN_ONE_LINE=true;
    getSettings().WHILE_ON_NEW_LINE=false;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        if (a) foo();\n"+ "        else bar();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        if (a) foo();\n"+ "        else bar();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++) foo();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int var : vars) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int var : vars) foo();\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        do foo(); while (true);\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        do foo(); while (true);\n"+ "    }\n"+ "}");
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        while(true) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        while (true) foo();\n"+ "    }\n"+ "}");
    getSettings().RIGHT_MARGIN=17;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        if (a) foo();\n"+ "        else bar();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        if (a)\n"+ "            foo();\n"+ "        else\n"+ "            bar();\n"+ "    }\n"+ "}");
    getSettings().RIGHT_MARGIN=30;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++)\n"+ "            foo();\n"+ "    }\n"+ "}");
    getSettings().RIGHT_MARGIN=32;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        for (int var : vars) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int var : vars)\n"+ "            foo();\n"+ "    }\n"+ "}");
    getSettings().RIGHT_MARGIN=12;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        do foo(); while (true);\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        do\n"+ "            foo();\n"+ "        while (true);\n"+ "    }\n"+ "}");
    getSettings().RIGHT_MARGIN=23;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        while(true) foo();\n"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        while (true)\n"+ "            foo();\n"+ "    }\n"+ "}");
  }
  finally {
    LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(stored);
  }
}
