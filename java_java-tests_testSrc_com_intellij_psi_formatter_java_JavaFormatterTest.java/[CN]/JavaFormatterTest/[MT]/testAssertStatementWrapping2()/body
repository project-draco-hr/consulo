{
  getSettings().BINARY_OPERATION_WRAP=CommonCodeStyleSettings.DO_NOT_WRAP;
  getSettings().ASSERT_STATEMENT_WRAP=CommonCodeStyleSettings.WRAP_AS_NEEDED;
  getSettings().getRootSettings().RIGHT_MARGIN=37;
  final CodeStyleSettings.IndentOptions options=getSettings().getRootSettings().getIndentOptions(StdFileTypes.JAVA);
  options.INDENT_SIZE=2;
  options.CONTINUATION_INDENT_SIZE=2;
  getSettings().ASSERT_STATEMENT_COLON_ON_NEXT_LINE=true;
  final JavaPsiFacade facade=getJavaFacade();
  final LanguageLevel effectiveLanguageLevel=LanguageLevelProjectExtension.getInstance(facade.getProject()).getLanguageLevel();
  LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(LanguageLevel.JDK_1_5);
  try {
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        assert i + j + k + l + n + m <= 2 : \"assert description\";"+ "    }\n"+ "}","class Foo {\n" + "  void foo() {\n" + "    assert i + j + k + l + n + m <= 2\n"+ "      : \"assert description\";\n"+ "  }\n"+ "}");
    getSettings().ASSERT_STATEMENT_COLON_ON_NEXT_LINE=false;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        assert i + j + k + l + n + m <= 2 : \"assert description\";"+ "    }\n"+ "}","class Foo {\n" + "  void foo() {\n" + "    assert\n"+ "      i + j + k + l + n + m <= 2 :\n"+ "      \"assert description\";\n"+ "  }\n"+ "}");
  }
  finally {
    LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(effectiveLanguageLevel);
  }
}
