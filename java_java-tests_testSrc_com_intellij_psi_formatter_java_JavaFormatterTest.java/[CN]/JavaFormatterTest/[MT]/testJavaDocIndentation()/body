{
  getSettings().getIndentOptions(StdFileTypes.JAVA).INDENT_SIZE=2;
  getSettings().getIndentOptions(StdFileTypes.JAVA).CONTINUATION_INDENT_SIZE=2;
  getSettings().getIndentOptions(StdFileTypes.JAVA).TAB_SIZE=4;
  getSettings().ENABLE_JAVADOC_FORMATTING=false;
  doTextTest("public interface PsiParser {\n" + "  /**\n" + "   * Parses the contents of the specified PSI builder and returns an AST tree with the\n"+ "   * specified type of root element. The PSI builder contents is the entire file\n"+ "   * or (if chameleon tokens are used) the text of a chameleon token which needs to\n"+ "   * be reparsed.\n"+ "   * @param root the type of the root element in the AST tree.\n"+ "   * @param builder the builder which is used to retrieve the original file tokens and build the AST tree.\n"+ "   * @return the root of the resulting AST tree.\n"+ "   */\n"+ "  ASTNode parse(IElementType root, PsiBuilder builder);\n"+ "}","public interface PsiParser {\n" + "  /**\n" + "   * Parses the contents of the specified PSI builder and returns an AST tree with the\n"+ "   * specified type of root element. The PSI builder contents is the entire file\n"+ "   * or (if chameleon tokens are used) the text of a chameleon token which needs to\n"+ "   * be reparsed.\n"+ "   * @param root the type of the root element in the AST tree.\n"+ "   * @param builder the builder which is used to retrieve the original file tokens and build the AST tree.\n"+ "   * @return the root of the resulting AST tree.\n"+ "   */\n"+ "  ASTNode parse(IElementType root, PsiBuilder builder);\n"+ "}");
}
