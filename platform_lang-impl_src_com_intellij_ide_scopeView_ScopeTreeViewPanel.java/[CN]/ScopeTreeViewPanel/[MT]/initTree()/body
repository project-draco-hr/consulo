{
  myTree.setCellRenderer(new MyTreeCellRenderer());
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myTree);
  TreeUtil.installActions(myTree);
  EditSourceOnDoubleClickHandler.install(myTree);
  new TreeSpeedSearch(myTree);
  myCopyPasteDelegator=new CopyPasteDelegator(myProject,this){
    @NotNull protected PsiElement[] getSelectedElements(){
      return getSelectedPsiElements();
    }
  }
;
  myTreeExpansionMonitor=PackageTreeExpansionMonitor.install(myTree,myProject);
  final ScopeTreeStructureExpander[] extensions=Extensions.getExtensions(ScopeTreeStructureExpander.EP_NAME,myProject);
  for (  ScopeTreeStructureExpander expander : extensions) {
    myTree.addTreeWillExpandListener(expander);
  }
  if (extensions.length == 0) {
    myTree.addTreeWillExpandListener(new SortingExpandListener());
  }
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode()) {
        final Object component=myTree.getLastSelectedPathComponent();
        if (component instanceof DefaultMutableTreeNode) {
          final DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)component;
          if (selectedNode.isLeaf()) {
            OpenSourceUtil.openSourcesFrom(DataManager.getInstance().getDataContext(myTree),false);
          }
        }
      }
    }
  }
);
  CustomizationUtil.installPopupHandler(myTree,IdeActions.GROUP_PROJECT_VIEW_POPUP,ActionPlaces.PROJECT_VIEW_POPUP);
}
