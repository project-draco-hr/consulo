{
  if (LangDataKeys.MODULE_CONTEXT.is(dataId)) {
    final TreePath selectionPath=myTree.getSelectionPath();
    if (selectionPath != null) {
      PackageDependenciesNode node=(PackageDependenciesNode)selectionPath.getLastPathComponent();
      if (node instanceof ModuleNode) {
        return ((ModuleNode)node).getModule();
      }
    }
  }
  if (LangDataKeys.PSI_ELEMENT.is(dataId)) {
    final TreePath selectionPath=myTree.getSelectionPath();
    if (selectionPath != null) {
      PackageDependenciesNode node=(PackageDependenciesNode)selectionPath.getLastPathComponent();
      return node != null && node.isValid() ? node.getPsiElement() : null;
    }
  }
  final TreePath[] treePaths=myTree.getSelectionPaths();
  if (treePaths != null) {
    if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
      Set<PsiElement> psiElements=new HashSet<PsiElement>();
      for (      TreePath treePath : treePaths) {
        final PackageDependenciesNode node=(PackageDependenciesNode)treePath.getLastPathComponent();
        if (node.isValid()) {
          final PsiElement psiElement=node.getPsiElement();
          if (psiElement != null) {
            psiElements.add(psiElement);
          }
        }
      }
      return psiElements.isEmpty() ? null : PsiUtilBase.toPsiElementArray(psiElements);
    }
  }
  if (LangDataKeys.IDE_VIEW.is(dataId)) {
    return myIdeView;
  }
  if (PlatformDataKeys.CUT_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (PlatformDataKeys.COPY_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (PlatformDataKeys.PASTE_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    if (getSelectedModules() != null) {
      return myDeleteModuleProvider;
    }
    return myDeletePSIElementProvider;
  }
  if (LangDataKeys.PASTE_TARGET_PSI_ELEMENT.is(dataId)) {
    final TreePath selectionPath=myTree.getSelectionPath();
    if (selectionPath != null) {
      final Object pathComponent=selectionPath.getLastPathComponent();
      if (pathComponent instanceof DirectoryNode) {
        return ((DirectoryNode)pathComponent).getTargetDirectory();
      }
    }
  }
  return null;
}
