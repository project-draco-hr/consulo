{
  final DefaultTreeModel treeModel=(DefaultTreeModel)myTree.getModel();
  if (rootToReload != null && rootToReload != treeModel.getRoot()) {
    final List<TreePath> treePaths=TreeUtil.collectExpandedPaths(myTree,new TreePath(rootToReload.getPath()));
    final List<TreePath> selectionPaths=TreeUtil.collectSelectedPaths(myTree,new TreePath(rootToReload.getPath()));
    final TreePath path=new TreePath(rootToReload.getPath());
    final boolean wasCollapsed=myTree.isCollapsed(path);
    final Runnable runnable=new Runnable(){
      @Override public void run(){
        if (!isTreeShowing() || rootToReload.getParent() == null)         return;
        TreeUtil.sort(rootToReload,getNodeComparator());
        treeModel.reload(rootToReload);
        if (!wasCollapsed) {
          myTree.collapsePath(path);
          for (          TreePath treePath : treePaths) {
            myTree.expandPath(treePath);
          }
          for (          TreePath selectionPath : selectionPaths) {
            TreeUtil.selectPath(myTree,selectionPath);
          }
        }
      }
    }
;
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      runnable.run();
    }
 else {
      SwingUtilities.invokeLater(runnable);
    }
  }
 else {
    TreeUtil.sort(treeModel,getNodeComparator());
    treeModel.reload();
  }
}
