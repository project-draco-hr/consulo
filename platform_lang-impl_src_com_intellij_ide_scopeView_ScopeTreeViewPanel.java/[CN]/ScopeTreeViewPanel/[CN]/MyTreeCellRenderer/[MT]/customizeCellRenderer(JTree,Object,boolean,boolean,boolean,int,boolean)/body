{
  if (value instanceof PackageDependenciesNode) {
    PackageDependenciesNode node=(PackageDependenciesNode)value;
    try {
      setIcon(node.getIcon());
    }
 catch (    IndexNotReadyException ignore) {
    }
    final SimpleTextAttributes regularAttributes=SimpleTextAttributes.REGULAR_ATTRIBUTES;
    TextAttributes textAttributes=regularAttributes.toTextAttributes();
    if (node instanceof BasePsiNode && ((BasePsiNode)node).isDeprecated()) {
      textAttributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES).clone();
    }
    final PsiElement psiElement=node.getPsiElement();
    textAttributes.setForegroundColor(CopyPasteManager.getInstance().isCutElement(psiElement) ? CopyPasteManager.CUT_COLOR : node.getColor());
    append(node.toString(),SimpleTextAttributes.fromTextAttributes(textAttributes));
    String oldToString=toString();
    if (!myProject.isDisposed()) {
      for (      ProjectViewNodeDecorator decorator : Extensions.getExtensions(ProjectViewNodeDecorator.EP_NAME,myProject)) {
        decorator.decorate(node,this);
      }
    }
    if (toString().equals(oldToString)) {
      final String locationString=node.getComment();
      if (locationString != null && locationString.length() > 0) {
        append(" (" + locationString + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
      }
    }
  }
}
