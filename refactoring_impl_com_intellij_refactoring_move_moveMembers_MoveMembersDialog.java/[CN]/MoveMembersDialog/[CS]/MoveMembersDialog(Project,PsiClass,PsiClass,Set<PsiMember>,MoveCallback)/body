{
  super(project,true);
  myProject=project;
  mySourceClass=sourceClass;
  myMoveCallback=moveCallback;
  setTitle(MoveMembersImpl.REFACTORING_NAME);
  mySourceClassName=mySourceClass.getQualifiedName();
  PsiField[] fields=mySourceClass.getFields();
  PsiMethod[] methods=mySourceClass.getMethods();
  PsiClass[] innerClasses=mySourceClass.getInnerClasses();
  ArrayList<MemberInfo> memberList=new ArrayList<MemberInfo>(fields.length + methods.length);
  for (  PsiClass innerClass : innerClasses) {
    if (!innerClass.hasModifierProperty(PsiModifier.STATIC))     continue;
    MemberInfo info=new MemberInfo(innerClass);
    if (preselectMembers.contains(innerClass)) {
      info.setChecked(true);
    }
    memberList.add(info);
  }
  boolean hasConstantFields=false;
  for (  PsiField field : fields) {
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      MemberInfo info=new MemberInfo(field);
      if (preselectMembers.contains(field)) {
        info.setChecked(true);
      }
      memberList.add(info);
      hasConstantFields=true;
    }
  }
  if (!hasConstantFields)   myIntroduceEnumConstants.setVisible(false);
  for (  PsiMethod method : methods) {
    if (method.hasModifierProperty(PsiModifier.STATIC)) {
      MemberInfo info=new MemberInfo(method);
      if (preselectMembers.contains(method)) {
        info.setChecked(true);
      }
      memberList.add(info);
    }
  }
  myMemberInfos=memberList;
  String fqName=initialTargetClass != null && !sourceClass.equals(initialTargetClass) ? initialTargetClass.getQualifiedName() : "";
  myTfTargetClassName=new ReferenceEditorComboWithBrowseButton(new ChooseClassAction(),fqName,PsiManager.getInstance(myProject),true,RECENTS_KEY);
  init();
}
