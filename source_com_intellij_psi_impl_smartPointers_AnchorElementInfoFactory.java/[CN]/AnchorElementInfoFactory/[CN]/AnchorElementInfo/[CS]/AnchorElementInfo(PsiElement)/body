{
  LOG.assertTrue(anchor.isPhysical());
  LOG.assertTrue(anchor.isValid());
  myFile=anchor.getContainingFile();
  TextRange range=anchor.getTextRange();
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myFile.getProject());
  Document document=documentManager.getDocument(myFile);
  LOG.assertTrue(!documentManager.isUncommited(document));
  if (myFile.getTextLength() != document.getTextLength()) {
    final String docText=document.getText();
    myFile.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitElement(      PsiElement element){
        super.visitElement(element);
        final String rangeText=element.getTextRange().substring(docText);
        final String elemText=element.getText();
        if (!rangeText.equals(elemText)) {
          throw new AssertionError("PSI text doesn't equal to the document's one: element" + element + "\ndocText="+ rangeText+ "\npsiText"+ elemText);
        }
      }
    }
);
    LOG.assertTrue(false,"File=" + myFile);
  }
  myMarker=document.createRangeMarker(range.getStartOffset(),range.getEndOffset(),true);
  mySyncStartOffset=range.getStartOffset();
  mySyncEndOffset=range.getEndOffset();
  mySyncMarkerIsValid=true;
}
