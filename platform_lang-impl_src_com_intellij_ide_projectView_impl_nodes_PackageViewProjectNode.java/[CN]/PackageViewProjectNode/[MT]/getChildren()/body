{
  if (getSettings().isShowModules()) {
    final List<Module> allModules=new ArrayList<Module>(Arrays.asList(ModuleManager.getInstance(getProject()).getModules()));
    for (Iterator<Module> it=allModules.iterator(); it.hasNext(); ) {
      final Module module=it.next();
      final VirtualFile[] sourceRoots=ModuleRootManager.getInstance(module).getSourceRoots();
      if (sourceRoots.length == 0) {
        it.remove();
      }
    }
    return modulesAndGroups(allModules.toArray(new Module[allModules.size()]));
  }
 else {
    final List<VirtualFile> sourceRoots=new ArrayList<VirtualFile>();
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(myProject);
    ContainerUtil.addAll(sourceRoots,projectRootManager.getContentSourceRoots());
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    final List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
    final Set<PsiPackage> topLevelPackages=new HashSet<PsiPackage>();
    for (    final VirtualFile root : sourceRoots) {
      final PsiDirectory directory=psiManager.findDirectory(root);
      if (directory == null) {
        continue;
      }
      final PsiPackage directoryPackage=PsiPackageManager.getInstance(myProject).findAnyPackage(directory);
      if (directoryPackage == null || PackageNodeUtil.isPackageDefault(directoryPackage)) {
        final PsiDirectory[] subdirectories=directory.getSubdirectories();
        for (        PsiDirectory subdirectory : subdirectories) {
          final PsiPackage aPackage=PsiPackageManager.getInstance(myProject).findAnyPackage(subdirectory);
          if (aPackage != null && !PackageNodeUtil.isPackageDefault(aPackage)) {
            topLevelPackages.add(aPackage);
          }
        }
        children.addAll(BaseProjectViewDirectoryHelper.getInstance(myProject).getDirectoryChildren(directory,getSettings(),false));
      }
 else {
        topLevelPackages.add(directoryPackage);
      }
    }
    for (    final PsiPackage psiPackage : topLevelPackages) {
      PackageNodeUtil.addPackageAsChild(children,psiPackage,null,getSettings(),false);
    }
    if (getSettings().isShowLibraryContents()) {
      children.add(new PackageViewLibrariesNode(getProject(),null,getSettings()));
    }
    return children;
  }
}
