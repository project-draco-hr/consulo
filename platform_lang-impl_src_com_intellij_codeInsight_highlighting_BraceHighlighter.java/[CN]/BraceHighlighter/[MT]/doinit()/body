{
  final EditorEventMulticaster eventMulticaster=EditorFactory.getInstance().getEventMulticaster();
  CaretListener myCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      myAlarm.cancelAllRequests();
      Editor editor=e.getEditor();
      if (editor.getProject() == myProject) {
        updateBraces(editor,myAlarm);
      }
    }
  }
;
  eventMulticaster.addCaretListener(myCaretListener,myProject);
  final SelectionListener mySelectionListener=new SelectionListener(){
    public void selectionChanged(    SelectionEvent e){
      myAlarm.cancelAllRequests();
      Editor editor=e.getEditor();
      if (editor.getProject() == myProject) {
        updateBraces(editor,myAlarm);
      }
    }
  }
;
  eventMulticaster.addSelectionListener(mySelectionListener);
  DocumentListener documentListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      myAlarm.cancelAllRequests();
      Editor[] editors=EditorFactory.getInstance().getEditors(e.getDocument(),myProject);
      for (      Editor editor : editors) {
        updateBraces(editor,myAlarm);
      }
    }
  }
;
  eventMulticaster.addDocumentListener(documentListener,myProject);
  final FocusChangeListener myFocusChangeListener=new FocusChangeListener(){
    public void focusLost(    Editor editor){
      clearBraces(editor);
    }
    public void focusGained(    Editor editor){
      updateBraces(editor,myAlarm);
    }
  }
;
  ((EditorEventMulticasterEx)eventMulticaster).addFocusChangeListner(myFocusChangeListener);
  final FileEditorManager fileEditorManager=FileEditorManager.getInstance(myProject);
  fileEditorManager.addFileEditorManagerListener(new FileEditorManagerAdapter(){
    public void selectionChanged(    FileEditorManagerEvent e){
      myAlarm.cancelAllRequests();
    }
  }
,myProject);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      EditorEventMulticaster eventMulticaster=EditorFactory.getInstance().getEventMulticaster();
      ((EditorEventMulticasterEx)eventMulticaster).removeFocusChangeListner(myFocusChangeListener);
      eventMulticaster.removeSelectionListener(mySelectionListener);
    }
  }
);
}
