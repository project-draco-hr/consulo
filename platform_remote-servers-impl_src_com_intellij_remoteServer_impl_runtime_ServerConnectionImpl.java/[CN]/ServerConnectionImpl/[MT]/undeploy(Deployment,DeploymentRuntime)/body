{
  final String deploymentName=deployment.getName();
  final DeploymentImpl localDeployment;
synchronized (myLocalDeployments) {
    localDeployment=myLocalDeployments.get(deploymentName);
    if (localDeployment != null) {
      localDeployment.changeState(DeploymentStatus.DEPLOYED,DeploymentStatus.UNDEPLOYING,null,null);
    }
  }
  myEventDispatcher.queueDeploymentsChanged(this);
  final LoggingHandlerImpl loggingHandler=myLogManagers.get(deploymentName).getMainLoggingHandler();
  loggingHandler.printlnSystemMessage("Undeploying '" + deploymentName + "'...");
  runtime.undeploy(new DeploymentRuntime.UndeploymentTaskCallback(){
    @Override public void succeeded(){
      loggingHandler.printlnSystemMessage("'" + deploymentName + "' has been undeployed successfully.");
synchronized (myLocalDeployments) {
        if (localDeployment != null && localDeployment.changeState(DeploymentStatus.UNDEPLOYING,DeploymentStatus.NOT_DEPLOYED,null,null)) {
          myLocalDeployments.remove(deploymentName);
        }
      }
      myLogManagers.remove(deploymentName);
      myEventDispatcher.queueDeploymentsChanged(ServerConnectionImpl.this);
    }
    @Override public void errorOccurred(    @NotNull String errorMessage){
      loggingHandler.printlnSystemMessage("Failed to undeploy '" + deploymentName + "': "+ errorMessage);
synchronized (myLocalDeployments) {
        if (localDeployment != null) {
          localDeployment.changeState(DeploymentStatus.UNDEPLOYING,DeploymentStatus.DEPLOYED,errorMessage,runtime);
        }
      }
      myEventDispatcher.queueDeploymentsChanged(ServerConnectionImpl.this);
    }
  }
);
}
