{
  final DebuggerContextImpl context=getDebuggerContext();
  final ThreadReferenceProxyImpl threadToSelect=context.getThreadProxy();
  if (threadToSelect == null) {
    return;
  }
  final SuspendContextImpl threadContext=SuspendManagerUtil.getSuspendContextForThread(context.getSuspendContext(),threadToSelect);
  final ThreadDescriptorImpl currentThreadDescriptor=(ThreadDescriptorImpl)myThreadsCombo.getSelectedItem();
  final ThreadReferenceProxyImpl currentThread=currentThreadDescriptor != null ? currentThreadDescriptor.getThreadReference() : null;
  if (myRefreshOnly && threadToSelect.equals(currentThread)) {
    context.getDebugProcess().getManagerThread().invokeLater(new UpdateFramesListCommand(context,threadContext));
  }
 else {
    context.getDebugProcess().getManagerThread().invokeLater(new RebuildFramesListCommand(context,threadContext));
  }
  if (myRefreshOnly) {
    final DefaultComboBoxModel model=(DefaultComboBoxModel)myThreadsCombo.getModel();
    final int size=model.getSize();
    final EvaluationContextImpl evaluationContext=context.createEvaluationContext();
    for (int idx=0; idx < size; idx++) {
      final ThreadDescriptorImpl descriptor=(ThreadDescriptorImpl)model.getElementAt(idx);
      descriptor.setContext(evaluationContext);
      descriptor.updateRepresentation(evaluationContext,DescriptorLabelListener.DUMMY_LISTENER);
    }
    DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
      public void run(){
        try {
          myThreadsListener.setEnabled(false);
          selectThread(threadToSelect);
          myFramesList.repaint();
        }
  finally {
          myThreadsListener.setEnabled(true);
        }
      }
    }
);
  }
 else {
    final java.util.List<ThreadDescriptorImpl> threadItems=createThreadDescriptorsList();
    DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
      public void run(){
        try {
          myThreadsListener.setEnabled(false);
          myThreadsCombo.removeAllItems();
          for (          final ThreadDescriptorImpl threadItem : threadItems) {
            myThreadsCombo.addItem(threadItem);
          }
          selectThread(threadToSelect);
        }
  finally {
          myThreadsListener.setEnabled(true);
        }
      }
    }
);
  }
}
