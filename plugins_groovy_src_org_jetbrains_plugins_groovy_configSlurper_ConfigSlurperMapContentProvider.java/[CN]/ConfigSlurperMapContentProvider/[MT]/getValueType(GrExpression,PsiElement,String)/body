{
  Pair<ConfigSlurperSupport.PropertiesProvider,List<String>> info=getInfo(qualifier,resolve);
  if (info == null)   return null;
  final Ref<Boolean> res=new Ref<Boolean>();
  info.first.collectVariants(info.second,new PairConsumer<String,Boolean>(){
    @Override public void consume(    String variant,    Boolean isFinal){
      if (variant.equals(key)) {
        res.set(isFinal);
      }
 else       if (variant.startsWith(key) && variant.length() > key.length() && variant.charAt(key.length()) == '.') {
        res.set(false);
      }
    }
  }
);
  if (res.get() != null && !res.get()) {
    return JavaPsiFacade.getElementFactory(qualifier.getProject()).createTypeByFQClassName(GroovyCommonClassNames.GROOVY_UTIL_CONFIG_OBJECT,qualifier.getResolveScope());
  }
  return null;
}
