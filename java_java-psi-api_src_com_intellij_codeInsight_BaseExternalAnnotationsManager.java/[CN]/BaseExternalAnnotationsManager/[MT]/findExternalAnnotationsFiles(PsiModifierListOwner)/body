{
  final PsiFile containingFile=listOwner.getContainingFile();
  if (!(containingFile instanceof PsiJavaFile)) {
    return null;
  }
  final PsiJavaFile javaFile=(PsiJavaFile)containingFile;
  final String packageName=javaFile.getPackageName();
  final VirtualFile virtualFile=containingFile.getVirtualFile();
  String fqn=getFQN(packageName,containingFile);
  if (fqn == null)   return null;
  final List<PsiFile> files=myExternalAnnotations.get(fqn);
  if (files == NULL)   return null;
  if (files != null) {
    boolean allValid=true;
    for (    PsiFile file : files) {
      allValid&=file.isValid();
    }
    if (allValid) {
      return files;
    }
  }
  if (virtualFile == null) {
    return null;
  }
  ArrayList<PsiFile> possibleAnnotationsXmls=new ArrayList<PsiFile>();
  for (  VirtualFile root : getExternalAnnotationsRoots(virtualFile)) {
    final VirtualFile ext=root.findFileByRelativePath(packageName.replace(".","/") + "/" + ANNOTATIONS_XML);
    if (ext == null)     continue;
    final PsiFile psiFile=myPsiManager.findFile(ext);
    if (psiFile == null)     continue;
    possibleAnnotationsXmls.add(psiFile);
  }
  if (!possibleAnnotationsXmls.isEmpty()) {
    possibleAnnotationsXmls.trimToSize();
    Collections.sort(possibleAnnotationsXmls,new Comparator<PsiFile>(){
      @Override public int compare(      PsiFile f1,      PsiFile f2){
        boolean w1=f1.isWritable();
        boolean w2=f2.isWritable();
        if (w1 == w2) {
          return 0;
        }
        return w1 ? -1 : 1;
      }
    }
);
    myExternalAnnotations.put(fqn,possibleAnnotationsXmls);
    return possibleAnnotationsXmls;
  }
  myExternalAnnotations.put(fqn,NULL);
  return null;
}
