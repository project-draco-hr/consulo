{
synchronized (myLock) {
    final Set<Pair<VirtualFile,AbstractHash>> forDeletion=new HashSet<Pair<VirtualFile,AbstractHash>>();
    final Set<String> hashes=new HashSet<String>();
    AbstractHash headHash=refs.getHeadHash();
    Collection<? extends GitBranch> local=refs.getLocal();
    for (    GitBranch branch : local) {
      hashes.add(branch.getHash());
    }
    Collection<? extends GitBranch> remote=refs.getRemote();
    for (    GitBranch branch : remote) {
      hashes.add(branch.getHash());
    }
    for (    Map.Entry<Pair<VirtualFile,AbstractHash>,GitHeavyCommit> entry : myCache.entrySet()) {
      final GitHeavyCommit value=entry.getValue();
      if (!root.equals(entry.getKey().getFirst()))       continue;
      AbstractHash hash=value.getShortHash();
      if (hash.equals(headHash) || hashes.contains(value.getHash().getValue())) {
        forDeletion.add(new Pair<VirtualFile,AbstractHash>(entry.getKey().getFirst(),entry.getKey().getSecond()));
      }
    }
    for (    Pair<VirtualFile,AbstractHash> pair : forDeletion) {
      myCache.remove(pair);
    }
  }
}
