{
synchronized (myLock) {
    myBranches.clear();
    myStash.clear();
    final Set<Pair<VirtualFile,AbstractHash>> forDeletion=new HashSet<Pair<VirtualFile,AbstractHash>>();
    for (    Map.Entry<Pair<VirtualFile,AbstractHash>,GitHeavyCommit> entry : myCache.entrySet()) {
      final GitHeavyCommit value=entry.getValue();
      if (!value.getLocalBranches().isEmpty() || !value.getRemoteBranches().isEmpty() || !value.getTags().isEmpty()) {
        forDeletion.add(new Pair<VirtualFile,AbstractHash>(entry.getKey().getFirst(),entry.getKey().getSecond()));
      }
    }
    for (    Pair<VirtualFile,AbstractHash> pair : forDeletion) {
      myCache.remove(pair);
    }
  }
}
