{
  final String filter=searchField.getText();
  if (filter == null || filter.length() == 0)   return null;
  final Map<String,Set<String>> hints=SearchableOptionsRegistrar.getInstance().findPossibleExtension(filter,project);
  final DefaultListModel model=new DefaultListModel();
  final JList list=new JBList(model);
  for (  String groupName : hints.keySet()) {
    model.addElement(groupName);
    final Set<String> descriptions=hints.get(groupName);
    if (descriptions != null) {
      for (      String hit : descriptions) {
        if (hit == null)         continue;
        model.addElement(new OptionDescription(null,groupName,hit,null));
      }
    }
  }
  list.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof String) {
        setText("------ " + value + " ------");
      }
 else       if (value instanceof OptionDescription) {
        setText(((OptionDescription)value).getHit());
      }
      return rendererComponent;
    }
  }
);
  if (model.size() > 0) {
    final Runnable onChosen=new Runnable(){
      public void run(){
        final Object selectedValue=list.getSelectedValue();
        if (selectedValue instanceof OptionDescription) {
          final OptionDescription description=((OptionDescription)selectedValue);
          searchField.setText(description.getHit());
          searchField.addCurrentTextToHistory();
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              showHintAlarm.cancelAllRequests();
              selectConfigurable.consume(description.getConfigurableId());
            }
          }
);
        }
      }
    }
;
    final JBPopup popup=JBPopupFactory.getInstance().createListPopupBuilder(list).setItemChoosenCallback(onChosen).setRequestFocus(down != 0).createPopup();
    list.addKeyListener(new KeyAdapter(){
      public void keyPressed(      final KeyEvent e){
        if (e.getKeyCode() != KeyEvent.VK_ENTER && e.getKeyCode() != KeyEvent.VK_UP && e.getKeyCode() != KeyEvent.VK_DOWN && e.getKeyCode() != KeyEvent.VK_PAGE_UP && e.getKeyCode() != KeyEvent.VK_PAGE_DOWN) {
          searchField.requestFocusInWindow();
          if (cancelPopups(activePopup) && e.getKeyCode() == KeyEvent.VK_ESCAPE) {
            return;
          }
          if (e.getKeyChar() != KeyEvent.CHAR_UNDEFINED) {
            searchField.process(new KeyEvent(searchField,KeyEvent.KEY_TYPED,e.getWhen(),e.getModifiers(),KeyEvent.VK_UNDEFINED,e.getKeyChar()));
          }
        }
      }
    }
);
    if (down > 0) {
      if (list.getSelectedIndex() < list.getModel().getSize() - 1) {
        list.setSelectedIndex(list.getSelectedIndex() + 1);
      }
    }
 else     if (down < 0) {
      if (list.getSelectedIndex() > 0) {
        list.setSelectedIndex(list.getSelectedIndex() - 1);
      }
    }
    return popup;
  }
  return null;
}
