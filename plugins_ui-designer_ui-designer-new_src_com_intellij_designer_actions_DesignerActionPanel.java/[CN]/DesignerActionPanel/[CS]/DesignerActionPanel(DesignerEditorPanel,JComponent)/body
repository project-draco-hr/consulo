{
  myDesigner=designer;
  myCommonEditActionsProvider=new CommonEditActionsProvider(designer);
  myShortcuts=shortcuts;
  myActionGroup.add(myStaticGroup);
  myActionGroup.add(myDynamicGroup);
  ActionManager actionManager=ActionManager.getInstance();
  ActionToolbar actionToolbar=actionManager.createActionToolbar(TOOLBAR,myActionGroup,true);
  actionToolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
  myToolbar=actionToolbar.getComponent();
  myToolbar.setBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM));
  myToolbar.setVisible(false);
  AnAction selectParent=new AnAction("Select Parent","Select Parent",null){
    @Override public void actionPerformed(    AnActionEvent e){
      myDesigner.getToolProvider().processKeyEvent(new KeyEvent(myDesigner.getSurfaceArea().getNativeComponent(),KeyEvent.KEY_PRESSED,0,0,KeyEvent.VK_ESCAPE,(char)KeyEvent.VK_ESCAPE),myDesigner.getSurfaceArea());
    }
  }
;
  selectParent.registerCustomShortcutSet(KeyEvent.VK_ESCAPE,0,null);
  SelectAllAction selectAllAction=new SelectAllAction(designer.getSurfaceArea());
  registerAction(selectAllAction,"$SelectAll");
  myPopupGroup.add(actionManager.getAction("$Cut"));
  myPopupGroup.add(actionManager.getAction("$Copy"));
  myPopupGroup.add(actionManager.getAction("$Paste"));
  myPopupGroup.addSeparator();
  myPopupGroup.add(actionManager.getAction("$Delete"));
  myPopupGroup.addSeparator();
  myPopupGroup.add(selectParent);
  myPopupGroup.add(selectAllAction);
  designer.getSurfaceArea().addSelectionListener(new ComponentSelectionListener(){
    @Override public void selectionChanged(    EditableArea area){
      updateSelectionActions(area.getSelection());
    }
  }
);
}
