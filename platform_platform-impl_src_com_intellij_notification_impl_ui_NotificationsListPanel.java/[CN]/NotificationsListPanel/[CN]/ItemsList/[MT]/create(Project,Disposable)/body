{
  final NotificationsListModel model=new NotificationsListModel(project);
  Disposer.register(parentDisposable,model);
  final ItemsList list=new ItemsList(model);
  list.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      list.setCellRenderer(new NotificationsListRenderer());
    }
  }
);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(list);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setBorder(null);
  scrollPane.getViewport().setBackground(UIUtil.getPanelBackgound());
  final JComponent buttonBar=buildFilterBar(list,project);
  model.addListDataListener(new ListDataListener(){
    public void intervalAdded(    ListDataEvent e){
      updateButtons(buttonBar);
    }
    public void intervalRemoved(    ListDataEvent e){
      updateButtons(buttonBar);
    }
    public void contentsChanged(    ListDataEvent e){
      updateButtons(buttonBar);
    }
  }
);
  final JPanel panel=new JPanel(new BorderLayout()){
    @Override public void requestFocus(){
      updateButtons(buttonBar);
      list.requestFocus();
    }
  }
;
  panel.add(buttonBar,BorderLayout.NORTH);
  panel.add(scrollPane,BorderLayout.CENTER);
  return panel;
}
