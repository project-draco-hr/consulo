{
  PsiClass containingClass=null;
  PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
  final PsiExpression expression=methodReferenceExpression.getQualifierExpression();
  if (expression != null) {
    final PsiType expressionType=getExpandedType(expression.getType(),expression);
    PsiClassType.ClassResolveResult result=PsiUtil.resolveGenericsClassInType(expressionType);
    containingClass=result.getElement();
    if (containingClass != null) {
      substitutor=result.getSubstitutor();
    }
    if (containingClass == null && expression instanceof PsiReferenceExpression) {
      final JavaResolveResult resolveResult=((PsiReferenceExpression)expression).advancedResolve(false);
      final PsiElement resolve=resolveResult.getElement();
      if (resolve instanceof PsiClass) {
        containingClass=(PsiClass)resolve;
        substitutor=resolveResult.getSubstitutor();
        return new QualifierResolveResult(containingClass,substitutor,true);
      }
    }
  }
 else {
    final PsiTypeElement typeElement=methodReferenceExpression.getQualifierType();
    if (typeElement != null) {
      PsiType type=getExpandedType(typeElement.getType(),typeElement);
      PsiClassType.ClassResolveResult result=PsiUtil.resolveGenericsClassInType(type);
      containingClass=result.getElement();
      if (containingClass != null) {
        substitutor=result.getSubstitutor();
      }
    }
  }
  return new QualifierResolveResult(containingClass,substitutor,false);
}
