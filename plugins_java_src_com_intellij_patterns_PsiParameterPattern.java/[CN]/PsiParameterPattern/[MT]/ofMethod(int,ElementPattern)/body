{
  return with(new PatternConditionPlus<PsiParameter,PsiMethod>("ofMethod",pattern){
    @Override public boolean processValues(    PsiParameter t,    ProcessingContext context,    PairProcessor<PsiMethod,ProcessingContext> processor){
      PsiElement scope=t.getDeclarationScope();
      if (!(scope instanceof PsiMethod))       return true;
      return processor.process((PsiMethod)scope,context);
    }
    public boolean accepts(    @NotNull final PsiParameter t,    final ProcessingContext context){
      if (!super.accepts(t,context))       return false;
      final PsiMethod psiMethod=(PsiMethod)t.getDeclarationScope();
      final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
      if (index < 0 || index >= parameters.length || !t.equals(parameters[index]))       return false;
      return true;
    }
  }
);
}
