{
  PsiClass aClass=myPsiManager.findClass(className);
  assertNotNull("Class " + className + " not found",aClass);
  SystemBuilder b=new SystemBuilder(myPsiManager.getProject(),new Settings(){
    public boolean dropObsoleteCasts(){
      return true;
    }
    public boolean preserveRawArrays(){
      return false;
    }
    public boolean leaveObjectParameterizedTypesRaw(){
      return false;
    }
    public boolean exhaustive(){
      return false;
    }
    public boolean cookObjects(){
      return false;
    }
  }
);
  final com.intellij.refactoring.typeCook.deductive.builder.System commonSystem=b.build(new PsiElement[]{aClass});
  System.out.println("System built:\n" + commonSystem);
  final com.intellij.refactoring.typeCook.deductive.builder.System[] systems=commonSystem.isolate();
  System.out.println("Systems isolated:\n" + commonSystem);
  com.intellij.refactoring.typeCook.deductive.builder.System system=null;
  for (int i=0; i < systems.length; i++) {
    com.intellij.refactoring.typeCook.deductive.builder.System s=systems[i];
    if (s != null && system == null) {
      System.out.println(s);
      system=s;
    }
  }
  Binding binding=null;
  if (system != null) {
    final ResolverTree tree=new ResolverTree(system);
    tree.resolve();
    binding=tree.getBestSolution();
  }
  String itemRepr=system != null ? system.dumpString() : commonSystem.dumpString();
  String itemName=className + ".items";
  String patternName=PathManagerEx.getTestDataPath() + getTestRoot() + getTestName(true)+ "/after/"+ itemName;
  File patternFile=new File(patternName);
  if (!patternFile.exists()) {
    PrintWriter writer=new PrintWriter(new FileOutputStream(patternFile));
    writer.print(itemRepr);
    writer.close();
    System.out.println("Pattern not found, file " + patternName + " created.");
    LocalFileSystem.getInstance().refreshAndFindFileByIoFile(patternFile);
  }
  File graFile=new File(FileUtil.getTempDirectory() + File.separator + rootDir+ File.separator+ itemName);
  PrintWriter writer=new PrintWriter(new FileOutputStream(graFile));
  writer.print(itemRepr);
  writer.close();
  LocalFileSystem.getInstance().refreshAndFindFileByIoFile(graFile);
  itemRepr=system != null ? system.dumpResult(binding) : commonSystem.dumpString();
  itemName=className + ".1.items";
  patternName=PathManagerEx.getTestDataPath() + getTestRoot() + getTestName(true)+ "/after/"+ itemName;
  patternFile=new File(patternName);
  if (!patternFile.exists()) {
    writer=new PrintWriter(new FileOutputStream(patternFile));
    writer.print(itemRepr);
    writer.close();
    System.out.println("Pattern not found, file " + patternName + " created.");
    LocalFileSystem.getInstance().refreshAndFindFileByIoFile(patternFile);
  }
  graFile=new File(FileUtil.getTempDirectory() + File.separator + rootDir+ File.separator+ itemName);
  writer=new PrintWriter(new FileOutputStream(graFile));
  writer.print(itemRepr);
  writer.close();
  LocalFileSystem.getInstance().refreshAndFindFileByIoFile(graFile);
  FileDocumentManager.getInstance().saveAllDocuments();
}
