{
  boolean isDeclaredNotNull=AnnotationUtil.isAnnotated(method,AnnotationUtil.NOT_NULL,false);
  boolean isDeclaredNullable=AnnotationUtil.isAnnotated(method,AnnotationUtil.NULLABLE,false);
  if (isDeclaredNullable && isDeclaredNotNull) {
    reportNullableNotNullConflict(holder,method.getNameIdentifier());
  }
  PsiType returnType=method.getReturnType();
  if ((isDeclaredNotNull || isDeclaredNullable) && returnType != null && TypeConversionUtil.isPrimitive(returnType.getCanonicalText())) {
    reportPrimitiveType(holder,method.getReturnTypeElement());
  }
  PsiParameter[] parameters=method.getParameterList().getParameters();
  List<MethodSignatureBackedByPsiMethod> superMethodSignatures=method.findSuperMethodSignaturesIncludingStatic(true);
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    if (REPORT_NULLABLE_METHOD_OVERRIDES_NOTNULL && isDeclaredNullable && AnnotationUtil.isNotNull(superMethod)) {
      holder.registerProblem(method.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.Nullable.method.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    if (REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL && !isDeclaredNullable && !isDeclaredNotNull&& AnnotationUtil.isNotNull(superMethod)) {
      holder.registerProblem(method.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.method.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new AnnotateMethodFix(AnnotationUtil.NOT_NULL){
        protected int askUserWhetherToAnnotateBaseMethod(        final PsiMethod method,        final PsiMethod superMethod,        final Project project){
          return NullableStuffInspection.this.askUserWhetherToAnnotateBaseMethod(method,superMethod,project);
        }
      }
);
    }
    if (REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE || REPORT_NOT_ANNOTATED_PARAMETER_OVERRIDES_NOTNULL) {
      PsiParameter[] superParameters=superMethod.getParameterList().getParameters();
      if (superParameters.length != parameters.length) {
        continue;
      }
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        PsiParameter superParameter=superParameters[i];
        if (REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE && AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NOT_NULL,false) && AnnotationUtil.isAnnotated(superParameter,AnnotationUtil.NULLABLE,false)) {
          holder.registerProblem(parameter.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.NotNull.parameter.overrides.Nullable"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
        if (REPORT_NOT_ANNOTATED_PARAMETER_OVERRIDES_NOTNULL && !AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NOT_NULL,false) && !AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NULLABLE,false)&& AnnotationUtil.isAnnotated(superParameter,AnnotationUtil.NOT_NULL,false)) {
          holder.registerProblem(parameter.getNameIdentifier(),InspectionsBundle.message("inspection.nullable.problems.parameter.overrides.NotNull"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new AnnotateQuickFix(parameter,AnnotationUtil.NOT_NULL));
        }
      }
    }
  }
}
