{
  return new PsiElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    public void visitMethod(    PsiMethod method){
      checkNullableStuffForMethod(method,holder);
    }
    public void visitField(    PsiField field){
      boolean isDeclaredNotNull=AnnotationUtil.isAnnotated(field,AnnotationUtil.NOT_NULL,false);
      boolean isDeclaredNullable=AnnotationUtil.isAnnotated(field,AnnotationUtil.NULLABLE,false);
      if (isDeclaredNullable && isDeclaredNotNull) {
        reportNullableNotNullConflict(holder,field.getNameIdentifier());
      }
      if ((isDeclaredNotNull || isDeclaredNullable) && TypeConversionUtil.isPrimitive(field.getType().getCanonicalText())) {
        reportPrimitiveType(holder,field.getNameIdentifier());
      }
    }
    public void visitParameter(    PsiParameter parameter){
      boolean isDeclaredNotNull=AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NOT_NULL,false);
      boolean isDeclaredNullable=AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NULLABLE,false);
      if (isDeclaredNullable && isDeclaredNotNull) {
        reportNullableNotNullConflict(holder,parameter.getNameIdentifier());
      }
      if ((isDeclaredNotNull || isDeclaredNullable) && TypeConversionUtil.isPrimitive(parameter.getType().getCanonicalText())) {
        reportPrimitiveType(holder,parameter.getNameIdentifier());
      }
    }
  }
;
}
