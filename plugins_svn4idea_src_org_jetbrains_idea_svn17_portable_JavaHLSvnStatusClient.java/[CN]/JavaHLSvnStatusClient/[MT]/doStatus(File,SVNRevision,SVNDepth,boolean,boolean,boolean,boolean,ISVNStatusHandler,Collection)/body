{
  final SVNException[] exc=new SVNException[1];
  SVNClient client=new SVNClient();
  try {
    client.status(path.getPath(),DepthConvertor.convert(depth),remote,reportAll,!includeIgnored,!collectParentExternals,changeLists,StatusCallbackConvertor.create(handler,new Convertor<String,SVNInfo>(){
      @Override public SVNInfo convert(      String o){
        final SVNInfo[] infoArr=new SVNInfo[1];
        try {
          new SVNClient().info2(o,Revision.START,Revision.START,Depth.empty,null,new InfoCallback(){
            @Override public void singleInfo(            Info info){
              try {
                infoArr[0]=InfoConvertor.convert(info);
              }
 catch (              SVNException e) {
                throw new SvnExceptionWrapper(e);
              }
            }
          }
);
        }
 catch (        ClientException e) {
          throw new SvnExceptionWrapper(ExceptionConvertor.convert(e));
        }
        return infoArr[0];
      }
    }
,new Consumer<SVNException>(){
      @Override public void consume(      SVNException e){
        exc[0]=e;
      }
    }
));
  }
 catch (  ClientException e) {
    throw ExceptionConvertor.convert(e);
  }
  if (exc[0] != null) {
    throw exc[0];
  }
  return -1;
}
