{
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  psiManager.startBatchFilesProcessingMode();
  try {
    getScope().accept(new PsiRecursiveElementVisitor(){
      public void visitFile(      final PsiFile file){
        ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          if (indicator.isCanceled()) {
            throw new ProcessCanceledException();
          }
          indicator.setText("Analyzing package dependencies");
          indicator.setText2(file.getVirtualFile().getPresentableUrl());
          indicator.setFraction(((double)++myFileCount) / myTotalFileCount);
        }
        final Set<PsiFile> fileDeps=new HashSet<PsiFile>();
        getDependencies().put(file,fileDeps);
        analyzeFileDependencies(file,new DependencyProcessor(){
          public void process(          PsiElement place,          PsiElement dependency){
            PsiFile dependencyFile=dependency.getContainingFile();
            if (dependencyFile != null && dependencyFile.isPhysical()) {
              fileDeps.add(dependencyFile);
            }
          }
        }
);
        psiManager.dropResolveCaches();
      }
    }
);
  }
  finally {
    psiManager.finishBatchFilesProcessingMode();
  }
}
