{
  final FileViewProvider viewProvider=file.getViewProvider();
  if (viewProvider.getBaseLanguage() != file.getLanguage())   return;
  if (getScopeOfInterest() != null && !getScopeOfInterest().contains(file))   return;
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    if (indicator.isCanceled()) {
      throw new ProcessCanceledException();
    }
    indicator.setText(AnalysisScopeBundle.message("package.dependencies.progress.text"));
    final VirtualFile virtualFile=file.getVirtualFile();
    if (virtualFile != null) {
      indicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,getProject()));
    }
    if (fileDeps == null && myTotalFileCount > 0) {
      indicator.setFraction(((double)++myFileCount) / myTotalFileCount);
    }
  }
  final Set<PsiFile> collectedDeps=new HashSet<PsiFile>();
  analyzeFileDependencies(file,new DependencyProcessor(){
    public void process(    PsiElement place,    PsiElement dependency){
      PsiFile dependencyFile=dependency.getContainingFile();
      if (dependencyFile != null) {
        if (viewProvider == dependencyFile.getViewProvider())         return;
        if (dependencyFile.isPhysical()) {
          final VirtualFile virtualFile=dependencyFile.getVirtualFile();
          if (virtualFile != null && (fileIndex.isInContent(virtualFile) || fileIndex.isInLibraryClasses(virtualFile) || fileIndex.isInLibrarySource(virtualFile))) {
            collectedDeps.add(dependencyFile);
          }
        }
      }
    }
  }
);
  final Set<PsiFile> deps;
  if (fileDeps == null) {
    deps=new HashSet<PsiFile>(collectedDeps);
    getDependencies().put(file,deps);
  }
 else {
    deps=fileDeps;
    deps.addAll(collectedDeps);
  }
  getDirectDependencies().put(file,new HashSet<PsiFile>(collectedDeps));
  psiManager.dropResolveCaches();
  if (isTransitive()) {
    for (    final PsiFile psiFile : new HashSet<PsiFile>(deps)) {
      if (!processed.contains(psiFile) && !getScope().contains(psiFile)) {
        processed.add(psiFile);
        visit(psiFile,fileIndex,psiManager,deps,processed);
      }
    }
  }
}
