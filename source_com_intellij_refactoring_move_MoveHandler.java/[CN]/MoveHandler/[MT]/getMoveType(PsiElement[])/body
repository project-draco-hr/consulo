{
  if (elements == null) {
    throw new IllegalArgumentException("elements cannot be null");
  }
  if (MoveFilesOrDirectoriesUtil.canMoveFiles(elements)) {
    return FILES;
  }
  if (MoveFilesOrDirectoriesUtil.canMoveDirectories(elements)) {
    return DIRECTORIES;
  }
  if (MoveFilesOrDirectoriesUtil.canMoveOrRearrangePackages(elements)) {
    return MOVE_OR_REARRANGE_PACKAGE;
  }
  if (elements.length == 1) {
    PsiElement element=elements[0];
    if (element instanceof PsiPackage) {
      return PACKAGES;
    }
    if (element instanceof PsiDirectory) {
      PsiDirectory directory=(PsiDirectory)element;
      return directory.getPackage() != null ? PACKAGES : NOT_SUPPORTED;
    }
 else     if (element instanceof PsiField || element instanceof PsiMethod) {
      return MEMBERS;
    }
 else     if (element instanceof PsiClass) {
      PsiClass aClass=(PsiClass)element;
      if (aClass.getParent() instanceof PsiFile) {
        return CLASSES;
      }
 else       if (aClass.getParent() instanceof PsiClass) {
        if (!aClass.hasModifierProperty(PsiModifier.STATIC)) {
          return INNER_TO_UPPER;
        }
        return INNER_TO_UPPER_OR_MEMBERS;
      }
    }
    return NOT_SUPPORTED;
  }
  int type=PACKAGES;
  for (int idx=0; idx < elements.length; idx++) {
    PsiElement element=elements[idx];
    if (element instanceof PsiPackage) {
      continue;
    }
    if (!(element instanceof PsiDirectory)) {
      type=NOT_SUPPORTED;
      break;
    }
    PsiDirectory directory=(PsiDirectory)element;
    if (directory.getPackage() == null) {
      type=NOT_SUPPORTED;
      break;
    }
  }
  if (type != NOT_SUPPORTED)   return type;
  type=CLASSES;
  for (int idx=0; idx < elements.length; idx++) {
    PsiElement element=elements[idx];
    if (!(element instanceof PsiClass)) {
      type=NOT_SUPPORTED;
      break;
    }
    if (!(element.getParent() instanceof PsiFile)) {
      type=NOT_SUPPORTED;
      break;
    }
  }
  if (type != NOT_SUPPORTED)   return type;
  type=MEMBERS;
  for (int idx=0; idx < elements.length; idx++) {
    PsiElement element=elements[idx];
    if (element instanceof PsiClass) {
      if (!(element.getParent() instanceof PsiClass)) {
        type=NOT_SUPPORTED;
        break;
      }
    }
 else     if (!(element instanceof PsiField || element instanceof PsiMethod)) {
      type=NOT_SUPPORTED;
      break;
    }
  }
  return type;
}
