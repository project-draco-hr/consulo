{
  int offset=editor.getCaretModel().getOffset();
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  PsiElement element=file.findElementAt(offset);
  while (true) {
    if (element == null) {
      if (file instanceof PsiPlainTextFile) {
        PsiElement[] elements=new PsiElement[]{file};
        if (MoveFilesOrDirectoriesUtil.canMoveFiles(elements)) {
          doMove(project,elements,null,null);
        }
        return;
      }
      String message="Cannot perform the refactoring.\n" + "The caret should be positioned at the class, method or field to be refactored.";
      RefactoringMessageUtil.showErrorMessage("Move",message,null,project);
      return;
    }
    if (tryToMoveElement(element,project,dataContext)) {
      return;
    }
 else {
      final TextRange range=element.getTextRange();
      if (range != null) {
        int relative=offset - range.getStartOffset();
        final PsiReference reference=element.findReferenceAt(relative);
        if (reference != null && !(reference instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)reference).getParent() instanceof PsiAnonymousClass)) {
          final PsiElement refElement=reference.resolve();
          if (refElement != null && tryToMoveElement(refElement,project,dataContext))           return;
        }
      }
    }
    element=element.getParent();
  }
}
