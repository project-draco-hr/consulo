{
  model.addListener(new JUnitAdapter(){
    public void onRunnerStateChanged(    final StateEvent event){
      if (event.isRunning() || !shouldSelect())       return;
      final AbstractTestProxy firstDefect=Filter.DEFECTIVE_LEAF.detectIn(model.getRoot().getAllTests());
      if (firstDefect != null)       model.selectAndNotify(firstDefect);
    }
    private boolean shouldSelect(){
      return JUnitConsoleProperties.SELECT_FIRST_DEFECT.value(model.getProperties());
    }
  }
);
}
