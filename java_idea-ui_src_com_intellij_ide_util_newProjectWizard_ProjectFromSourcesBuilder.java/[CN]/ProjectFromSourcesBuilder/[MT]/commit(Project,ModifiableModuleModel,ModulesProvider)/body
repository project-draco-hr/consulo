{
  final LibraryTable projectLibraryTable=LibraryTablesRegistrar.getInstance().getLibraryTable(project);
  final Map<LibraryDescriptor,Library> projectLibs=new HashMap<LibraryDescriptor,Library>();
  final List<Module> result=new ArrayList<Module>();
  try {
    AccessToken token=WriteAction.start();
    try {
      for (      LibraryDescriptor lib : myChosenLibraries) {
        if (lib.getLevel() == LibraryDescriptor.Level.PROJECT) {
          final Collection<File> files=lib.getJars();
          final Library projectLib=projectLibraryTable.createLibrary(lib.getName());
          final Library.ModifiableModel libraryModel=projectLib.getModifiableModel();
          for (          File file : files) {
            libraryModel.addRoot(VfsUtil.getUrlForLibraryRoot(file),OrderRootType.CLASSES);
          }
          libraryModel.commit();
          projectLibs.put(lib,projectLib);
        }
      }
    }
  finally {
      token.finish();
    }
  }
 catch (  Exception e) {
    Messages.showErrorDialog(IdeBundle.message("error.adding.module.to.project",e.getMessage()),IdeBundle.message("title.add.module"));
  }
  final Map<String,String> sourceRootToPrefixMap=new HashMap<String,String>();
  for (  Pair<String,String> pair : getSourcePaths()) {
    sourceRootToPrefixMap.put(FileUtil.toSystemIndependentName(pair.getFirst()),pair.getSecond());
  }
  final Map<ModuleDescriptor,Module> descriptorToModuleMap=new HashMap<ModuleDescriptor,Module>();
  try {
    AccessToken token=WriteAction.start();
    try {
      final ModifiableModuleModel moduleModel=model != null ? model : ModuleManager.getInstance(project).getModifiableModel();
      for (      final ModuleDescriptor moduleDescriptor : myChosenModules) {
        final Module module;
        if (moduleDescriptor.isReuseExistingElement()) {
          final ExistingModuleLoader moduleLoader=ImportImlMode.setUpLoader(FileUtil.toSystemIndependentName(moduleDescriptor.computeModuleFilePath()));
          module=moduleLoader.createModule(moduleModel);
        }
 else {
          module=createModule(moduleDescriptor,sourceRootToPrefixMap,projectLibs,moduleModel);
        }
        result.add(module);
        descriptorToModuleMap.put(moduleDescriptor,module);
      }
      moduleModel.commit();
    }
  finally {
      token.finish();
    }
  }
 catch (  Exception e) {
    Messages.showErrorDialog(IdeBundle.message("error.adding.module.to.project",e.getMessage()),IdeBundle.message("title.add.module"));
  }
  try {
    AccessToken token=WriteAction.start();
    try {
      for (      final ModuleDescriptor descriptor : myChosenModules) {
        final Module module=descriptorToModuleMap.get(descriptor);
        if (module == null) {
          continue;
        }
        final Set<ModuleDescriptor> deps=descriptor.getDependencies();
        if (deps.size() == 0) {
          continue;
        }
        final ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
        for (        ModuleDescriptor dependentDescriptor : deps) {
          final Module dependentModule=descriptorToModuleMap.get(dependentDescriptor);
          if (dependentModule != null) {
            rootModel.addModuleOrderEntry(dependentModule);
          }
        }
        rootModel.commit();
      }
    }
  finally {
      token.finish();
    }
  }
 catch (  Exception e) {
    Messages.showErrorDialog(IdeBundle.message("error.adding.module.to.project",e.getMessage()),IdeBundle.message("title.add.module"));
  }
  AccessToken token=WriteAction.start();
  try {
    for (    ProjectConfigurationUpdater updater : myUpdaters) {
      updater.updateProject(project);
    }
  }
  finally {
    token.finish();
  }
  return result;
}
