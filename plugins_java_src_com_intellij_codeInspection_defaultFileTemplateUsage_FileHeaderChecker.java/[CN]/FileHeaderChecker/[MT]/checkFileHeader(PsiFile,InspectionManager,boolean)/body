{
  TIntObjectHashMap<String> offsetToProperty=new TIntObjectHashMap<String>();
  Pattern pattern=getTemplatePattern(FileTemplateManager.getInstance().getDefaultTemplate(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME),file.getProject(),offsetToProperty);
  Matcher matcher=pattern.matcher(file.getText());
  if (matcher.matches()) {
    final int startOffset=matcher.start(1);
    final int endOffset=matcher.end(1);
    final Ref<PsiDocComment> docComment=new Ref<PsiDocComment>();
    file.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitElement(      PsiElement element){
        if (docComment.get() != null)         return;
        TextRange range=element.getTextRange();
        if (!range.contains(startOffset) && !range.contains(endOffset))         return;
        super.visitElement(element);
      }
      @Override public void visitDocComment(      PsiDocComment comment){
        docComment.set(comment);
      }
    }
);
    PsiDocComment element=docComment.get();
    if (element == null)     return null;
    LocalQuickFix[] quickFix=createQuickFix(matcher,offsetToProperty);
    final String description=InspectionsBundle.message("default.file.template.description");
    return manager.createProblemDescriptor(element,description,onTheFly,quickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  }
  return null;
}
