{
  if (!matched && fileType == PlainTextFileType.INSTANCE) {
    return;
  }
  EditorColorsScheme scheme=myEditor.getColorsScheme();
  final TextAttributes attributes=matched ? scheme.getAttributes(CodeInsightColors.MATCHED_BRACE_ATTRIBUTES) : scheme.getAttributes(CodeInsightColors.UNMATCHED_BRACE_ATTRIBUTES);
  if (rBrace != null && !scopeHighlighting) {
    highlightBrace(rBrace,matched);
  }
  if (lBrace != null && !scopeHighlighting) {
    highlightBrace(lBrace,matched);
  }
  FileEditorManager fileEditorManager=FileEditorManager.getInstance(myProject);
  if (fileEditorManager == null || !myEditor.equals(fileEditorManager.getSelectedTextEditor())) {
    return;
  }
  if (lBrace != null && rBrace != null) {
    final int startLine=myEditor.offsetToLogicalPosition(lBrace.getStartOffset()).line;
    final int endLine=myEditor.offsetToLogicalPosition(rBrace.getEndOffset()).line;
    if (endLine - startLine > 0) {
      final Runnable runnable=new Runnable(){
        @Override public void run(){
          if (myProject.isDisposed() || myEditor.isDisposed())           return;
          Color color=attributes.getBackgroundColor();
          if (color == null)           return;
          color=ColorUtil.isDark(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()) ? ColorUtil.shift(color,1.5d) : color.darker();
          lineMarkFragment(startLine,endLine,color);
        }
      }
;
      if (!scopeHighlighting) {
        myAlarm.addRequest(runnable,300);
      }
 else {
        runnable.run();
      }
    }
 else {
      if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
        removeLineMarkers();
      }
    }
    if (!scopeHighlighting) {
      showScopeHint(lBrace.getStartOffset(),lBrace.getEndOffset());
    }
  }
 else {
    if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
      removeLineMarkers();
    }
  }
}
