{
  if (myPsiFile == null)   return;
  clearBraceHighlighters();
  if (!myCodeInsightSettings.HIGHLIGHT_BRACES)   return;
  if (myEditor.getSelectionModel().hasSelection())   return;
  if (myEditor.getSoftWrapModel().isInsideOrBeforeSoftWrap(myEditor.getCaretModel().getVisualPosition()))   return;
  int offset=myEditor.getCaretModel().getOffset();
  final CharSequence chars=myEditor.getDocument().getCharsSequence();
  final int originalOffset=offset;
  HighlighterIterator iterator=getEditorHighlighter().createIterator(offset);
  if (iterator.atEnd()) {
    offset--;
  }
 else   if (BraceMatchingUtil.isRBraceToken(iterator,chars,myFileType)) {
    offset--;
  }
 else   if (!BraceMatchingUtil.isLBraceToken(iterator,chars,myFileType)) {
    offset--;
    if (offset >= 0) {
      final HighlighterIterator i=getEditorHighlighter().createIterator(offset);
      if (!BraceMatchingUtil.isRBraceToken(i,chars,myFileType))       offset++;
    }
  }
  if (offset < 0) {
    removeLineMarkers();
    return;
  }
  iterator=getEditorHighlighter().createIterator(offset);
  myAlarm.cancelAllRequests();
  if (BraceMatchingUtil.isLBraceToken(iterator,chars,myFileType) || BraceMatchingUtil.isRBraceToken(iterator,chars,myFileType)) {
    doHighlight(offset,originalOffset);
  }
 else   if (offset > 0 && offset < chars.length()) {
    boolean searchForward=true;
    char c=chars.charAt(offset);
    if (offset >= originalOffset || c != '\n') {
      int backwardNonWsOffset=CharArrayUtil.shiftBackward(chars,offset - 1,"\t ");
      if (backwardNonWsOffset >= 0 && (backwardNonWsOffset < offset - 1 || c == ' ' || c == '\t' || c == '\n')) {
        iterator=getEditorHighlighter().createIterator(backwardNonWsOffset);
        if (BraceMatchingUtil.isLBraceToken(iterator,chars,myFileType) || BraceMatchingUtil.isRBraceToken(iterator,chars,myFileType)) {
          offset=backwardNonWsOffset;
          searchForward=false;
          doHighlight(backwardNonWsOffset,originalOffset);
        }
      }
    }
    if (searchForward) {
      int forwardOffset=CharArrayUtil.shiftForward(chars,c == '\n' ? offset + 1 : offset,"\t ");
      if (forwardOffset > offset || c == ' ' || c == '\t' || c == '\n') {
        iterator=getEditorHighlighter().createIterator(forwardOffset);
        if (BraceMatchingUtil.isLBraceToken(iterator,chars,myFileType) || BraceMatchingUtil.isRBraceToken(iterator,chars,myFileType)) {
          offset=forwardOffset;
          doHighlight(forwardOffset,originalOffset);
        }
      }
    }
  }
  if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
    removeLineMarkers();
    return;
  }
  final int _offset=offset;
  myAlarm.addRequest(new Runnable(){
    public void run(){
      if (!myProject.isDisposed() && !myEditor.isDisposed()) {
        highlightScope(_offset);
      }
    }
  }
,300);
}
