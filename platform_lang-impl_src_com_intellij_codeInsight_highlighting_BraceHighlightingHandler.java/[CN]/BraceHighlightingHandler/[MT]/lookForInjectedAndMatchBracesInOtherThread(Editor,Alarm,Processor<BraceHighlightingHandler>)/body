{
  ApplicationManagerEx.getApplicationEx().assertIsDispatchThread();
  if (!isValidEditor(editor))   return;
  if (!PROCESSED_EDITORS.add(editor)) {
    return;
  }
  final int offset=editor.getCaretModel().getOffset();
  final Project project=editor.getProject();
  final PsiFile psiFile=PsiUtilBase.getPsiFileInEditor(editor,project);
  if (!isValidFile(psiFile))   return;
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      if (!ApplicationManagerEx.getApplicationEx().tryRunReadAction(new Runnable(){
        @Override public void run(){
          final PsiFile injected;
          try {
            if (psiFile instanceof PsiCompiledFile) {
              injected=((PsiCompiledFile)psiFile).getDecompiledPsiFile();
            }
 else {
              injected=psiFile instanceof PsiCompiledElement || psiFile instanceof PsiBinaryFile || !isValidEditor(editor)|| !isValidFile(psiFile) ? null : getInjectedFileIfAny(editor,project,offset,psiFile,alarm);
            }
          }
 catch (          RuntimeException e) {
            ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
              @Override public void run(){
                PROCESSED_EDITORS.remove(editor);
              }
            }
);
            throw e;
          }
          ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
            @Override public void run(){
              try {
                if (isValidEditor(editor) && isValidFile(injected)) {
                  Editor newEditor=InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor,injected);
                  BraceHighlightingHandler handler=new BraceHighlightingHandler(project,newEditor,alarm,injected);
                  processor.process(handler);
                }
              }
  finally {
                PROCESSED_EDITORS.remove(editor);
              }
            }
          }
,ModalityState.stateForComponent(editor.getComponent()));
        }
      }
)) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            PROCESSED_EDITORS.remove(editor);
            lookForInjectedAndMatchBracesInOtherThread(editor,alarm,processor);
          }
        }
,ModalityState.stateForComponent(editor.getComponent()));
      }
    }
  }
);
}
