{
  if (!matched && fileType == FileTypes.PLAIN_TEXT) {
    return;
  }
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  final TextAttributes attributes=matched ? scheme.getAttributes(CodeInsightColors.MATCHED_BRACE_ATTRIBUTES) : scheme.getAttributes(CodeInsightColors.UNMATCHED_BRACE_ATTRIBUTES);
  if (rBraceOffset >= 0 && !scopeHighlighting) {
    highlightBrace(rBraceOffset,matched);
  }
  if (lBraceOffset >= 0 && !scopeHighlighting) {
    highlightBrace(lBraceOffset,matched);
  }
  if (!myEditor.equals(FileEditorManager.getInstance(myProject).getSelectedTextEditor())) {
    return;
  }
  if (lBraceOffset >= 0 && rBraceOffset >= 0) {
    final int startLine=myEditor.offsetToLogicalPosition(lBraceOffset).line;
    final int endLine=myEditor.offsetToLogicalPosition(rBraceOffset).line;
    if (endLine - startLine > 0) {
      final Runnable runnable=new Runnable(){
        public void run(){
          if (myProject.isDisposed() || myEditor.isDisposed())           return;
          Color color=attributes.getBackgroundColor();
          if (color == null)           return;
          color=color.darker();
          lineMarkFragment(startLine,endLine,color);
        }
      }
;
      if (!scopeHighlighting) {
        myAlarm.addRequest(runnable,300);
      }
 else {
        runnable.run();
      }
    }
 else {
      if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
        removeLineMarkers();
      }
    }
    if (!scopeHighlighting) {
      showScopeHint(lBraceOffset,lBraceOffset + 1);
    }
  }
 else {
    if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) {
      removeLineMarkers();
    }
  }
}
