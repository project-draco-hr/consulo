{
  super.visitReturnStatement(statement);
  final PsiExpression returnValue=statement.getReturnValue();
  if (!(returnValue instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiMethod method=PsiTreeUtil.getParentOfType(statement,PsiMethod.class,true,PsiClass.class);
  if (method == null || (ignorePrivateMethods && method.hasModifierProperty(PsiModifier.PRIVATE))) {
    return;
  }
  final PsiReferenceExpression fieldReference=(PsiReferenceExpression)returnValue;
  final PsiElement element=fieldReference.resolve();
  if (!(element instanceof PsiField)) {
    return;
  }
  final String type=TypeUtils.expressionHasTypeOrSubtype(returnValue,CommonClassNames.JAVA_UTIL_DATE,CommonClassNames.JAVA_UTIL_CALENDAR);
  if (type == null) {
    return;
  }
  registerError(returnValue,type);
}
