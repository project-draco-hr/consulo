{
  myModel=model;
  ComboBoxModel settingsTypeModel=new DefaultComboBoxModel(new String[]{GLOBAL_SETTINGS_ITEM,PROJECT_SETTINGS_ITEM});
  mySettingsType.setModel(settingsTypeModel);
  mySettingsType.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onSettingsTypeChange();
    }
  }
);
  final SchemesManager<CodeStyleScheme,CodeStyleSchemeImpl> schemesManager=CodeStyleSchemesModel.getSchemesManager();
  if (schemesManager.isExportAvailable()) {
    myExportButton.setVisible(true);
    myExportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        CodeStyleScheme selected=getSelectedScheme();
        ExportSchemeAction.doExport((CodeStyleSchemeImpl)selected,schemesManager);
      }
    }
);
    myExportButton.setMnemonic('S');
  }
 else {
    myExportButton.setVisible(false);
  }
  if (schemesManager.isImportAvailable()) {
    myImportButton.setVisible(true);
    myImportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        SchemesToImportPopup<CodeStyleScheme,CodeStyleSchemeImpl> popup=new SchemesToImportPopup<CodeStyleScheme,CodeStyleSchemeImpl>(myPanel){
          protected void onSchemeSelected(          final CodeStyleSchemeImpl scheme){
            if (scheme != null) {
              myModel.addScheme(scheme,true);
            }
          }
        }
;
        popup.show(schemesManager,getSchemes());
      }
    }
);
  }
 else {
    myImportButton.setVisible(false);
  }
  myCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!myIsReset) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            onCombo();
          }
        }
);
      }
    }
  }
);
  mySaveAsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onSaveAs();
    }
  }
);
  myDeleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onDelete();
    }
  }
);
  myCopyToProjectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCopyToProject();
    }
  }
);
  myExportAsGlobalButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      onExportProjectScheme();
    }
  }
);
  myJBScrollPane.setBorder(null);
}
