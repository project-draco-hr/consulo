{
  myModel=model;
  myDefaultComboFont=myCombo.getFont();
  myBoldComboFont=myDefaultComboFont.deriveFont(Font.BOLD);
  myCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!myIsReset) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            onCombo();
          }
        }
);
      }
    }
  }
);
  myCombo.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      Component component=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      Font font=myDefaultComboFont;
      if (value instanceof CodeStyleScheme) {
        CodeStyleScheme scheme=(CodeStyleScheme)value;
        if (scheme.isDefault() || myModel.isProjectScheme(scheme)) {
          font=myBoldComboFont;
        }
      }
      component.setFont(font);
      return component;
    }
  }
);
  myCopyFromButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showCopyFromMenu();
    }
  }
);
  myCopyFromButton.setEnabled(false);
  myManageButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showManageSchemesDialog();
    }
  }
);
  myJBScrollPane.setBorder(null);
}
