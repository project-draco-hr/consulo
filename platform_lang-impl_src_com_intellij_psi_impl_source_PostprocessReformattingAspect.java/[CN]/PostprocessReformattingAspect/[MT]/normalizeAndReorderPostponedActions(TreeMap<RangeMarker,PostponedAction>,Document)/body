{
  final List<Pair<RangeMarker,ReformatAction>> freeFormatingActions=new ArrayList<Pair<RangeMarker,ReformatAction>>();
  final List<Pair<RangeMarker,ReindentAction>> indentActions=new ArrayList<Pair<RangeMarker,ReindentAction>>();
  RangeMarker accumulatedRange=null;
  PostponedAction accumulatedRangeAction=null;
  Iterator<Map.Entry<RangeMarker,PostponedAction>> iterator=rangesToProcess.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<RangeMarker,PostponedAction> entry=iterator.next();
    final RangeMarker textRange=entry.getKey();
    final PostponedAction action=entry.getValue();
    if (accumulatedRange == null) {
      accumulatedRange=textRange;
      accumulatedRangeAction=action;
      iterator.remove();
    }
 else     if (accumulatedRange.getStartOffset() > textRange.getEndOffset() || (accumulatedRange.getStartOffset() == textRange.getEndOffset() && !canStickActionsTogether(accumulatedRangeAction,accumulatedRange,action,textRange))) {
      if (accumulatedRangeAction instanceof ReindentAction) {
        indentActions.add(new Pair<RangeMarker,ReindentAction>(accumulatedRange,(ReindentAction)accumulatedRangeAction));
      }
 else {
        freeFormatingActions.add(new Pair<RangeMarker,ReformatAction>(accumulatedRange,(ReformatAction)accumulatedRangeAction));
      }
      accumulatedRange=textRange;
      accumulatedRangeAction=action;
      iterator.remove();
    }
 else     if (accumulatedRangeAction instanceof ReformatAction && action instanceof ReindentAction) {
      if (accumulatedRange.getStartOffset() < textRange.getStartOffset()) {
        final RangeMarker endOfRange=document.createRangeMarker(accumulatedRange.getStartOffset(),textRange.getStartOffset());
        rangesToProcess.put(endOfRange,accumulatedRangeAction);
        iterator=rangesToProcess.entrySet().iterator();
        while (iterator.next().getKey() != textRange)         ;
      }
      final RangeMarker rangeToProcess=document.createRangeMarker(textRange.getEndOffset(),accumulatedRange.getEndOffset());
      freeFormatingActions.add(new Pair<RangeMarker,ReformatAction>(rangeToProcess,new ReformatWithHeadingWhitespaceAction()));
      accumulatedRange=textRange;
      accumulatedRangeAction=action;
      iterator.remove();
    }
 else {
      if (!(accumulatedRangeAction instanceof ReindentAction)) {
        iterator.remove();
        if (accumulatedRangeAction instanceof ReformatAction && action instanceof ReformatWithHeadingWhitespaceAction && accumulatedRange.getStartOffset() == textRange.getStartOffset() || accumulatedRangeAction instanceof ReformatWithHeadingWhitespaceAction && action instanceof ReformatAction && accumulatedRange.getStartOffset() < textRange.getStartOffset()) {
          accumulatedRangeAction=action;
        }
        accumulatedRange=document.createRangeMarker(Math.min(accumulatedRange.getStartOffset(),textRange.getStartOffset()),Math.max(accumulatedRange.getEndOffset(),textRange.getEndOffset()));
      }
 else       if (action instanceof ReindentAction) {
        iterator.remove();
      }
    }
  }
  if (accumulatedRange != null) {
    if (accumulatedRangeAction instanceof ReindentAction) {
      indentActions.add(new Pair<RangeMarker,ReindentAction>(accumulatedRange,(ReindentAction)accumulatedRangeAction));
    }
 else {
      freeFormatingActions.add(new Pair<RangeMarker,ReformatAction>(accumulatedRange,(ReformatAction)accumulatedRangeAction));
    }
  }
  final List<Pair<RangeMarker,? extends PostponedAction>> result=new ArrayList<Pair<RangeMarker,? extends PostponedAction>>(rangesToProcess.size());
  Collections.reverse(freeFormatingActions);
  Collections.reverse(indentActions);
  result.addAll(freeFormatingActions);
  result.addAll(indentActions);
  return result;
}
