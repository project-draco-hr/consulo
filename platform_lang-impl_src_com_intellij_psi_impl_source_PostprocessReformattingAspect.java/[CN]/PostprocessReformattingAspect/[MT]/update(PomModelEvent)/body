{
  atomic(new Runnable(){
    @Override public void run(){
      if (isDisabled() || myPostponedCounter == 0 && !ApplicationManager.getApplication().isUnitTestMode())       return;
      final TreeChangeEvent changeSet=(TreeChangeEvent)event.getChangeSet(myTreeAspect);
      if (changeSet == null)       return;
      final PsiElement psiElement=changeSet.getRootElement().getPsi();
      if (psiElement == null)       return;
      PsiFile containingFile=InjectedLanguageUtil.getTopLevelFile(psiElement);
      final FileViewProvider viewProvider=containingFile.getViewProvider();
      if (!viewProvider.isEventSystemEnabled())       return;
      myUpdatedProviders.add(viewProvider);
      for (      final ASTNode node : changeSet.getChangedElements()) {
        final TreeChange treeChange=changeSet.getChangesByElement(node);
        for (        final ASTNode affectedChild : treeChange.getAffectedChildren()) {
          final ChangeInfo childChange=treeChange.getChangeByChild(affectedChild);
switch (childChange.getChangeType()) {
case ChangeInfo.ADD:
case ChangeInfo.REPLACE:
            postponeFormatting(viewProvider,affectedChild);
          break;
case ChangeInfo.CONTENTS_CHANGED:
        if (!CodeEditUtil.isNodeGenerated(affectedChild)) {
          ((TreeElement)affectedChild).acceptTree(new RecursiveTreeElementWalkingVisitor(){
            @Override protected void visitNode(            TreeElement element){
              if (CodeEditUtil.isNodeGenerated(element) && CodeEditUtil.isSuspendedNodesReformattingAllowed()) {
                postponeFormatting(viewProvider,element);
                return;
              }
              super.visitNode(element);
            }
          }
);
        }
      break;
  }
}
}
}
}
);
}
