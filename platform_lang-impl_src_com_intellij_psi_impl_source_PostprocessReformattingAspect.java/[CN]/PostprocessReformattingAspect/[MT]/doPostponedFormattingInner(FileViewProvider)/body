{
  final List<ASTNode> astNodes=getContext().myReformatElements.remove(key);
  final Document document=key.getDocument();
  if (document == null)   return;
  final VirtualFile virtualFile=key.getVirtualFile();
  if (!virtualFile.isValid())   return;
  PsiManager manager=key.getManager();
  if (manager instanceof PsiManagerEx) {
    FileManager fileManager=((PsiManagerEx)manager).getFileManager();
    FileViewProvider viewProvider=fileManager.findCachedViewProvider(virtualFile);
    if (viewProvider != key) {
      if (viewProvider == null)       viewProvider=fileManager.findViewProvider(virtualFile);
      if (viewProvider != null) {
        key=viewProvider;
      }
    }
  }
  final TreeSet<PostprocessFormattingTask> postProcessTasks=new TreeSet<>();
  Collection<Disposable> toDispose=ContainerUtilRt.newArrayList();
  try {
    handleReformatMarkers(key,postProcessTasks);
    toDispose.addAll(postProcessTasks);
    if (astNodes != null)     createActionsMap(astNodes,key,postProcessTasks);
    if (Boolean.getBoolean("check.psi.is.valid") && ApplicationManager.getApplication().isUnitTestMode()) {
      checkPsiIsCorrect(key);
    }
    while (!postProcessTasks.isEmpty()) {
      final List<PostponedAction> normalizedActions=normalizeAndReorderPostponedActions(postProcessTasks,document);
      toDispose.addAll(normalizedActions);
      for (      final PostponedAction normalizedAction : normalizedActions) {
        CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(myPsiManager.getProject());
        boolean old=settings.ENABLE_JAVADOC_FORMATTING;
        settings.ENABLE_JAVADOC_FORMATTING=false;
        try {
          normalizedAction.execute(key);
        }
  finally {
          settings.ENABLE_JAVADOC_FORMATTING=old;
        }
      }
    }
  }
  finally {
    for (    Disposable disposable : toDispose) {
      disposable.dispose();
    }
  }
}
