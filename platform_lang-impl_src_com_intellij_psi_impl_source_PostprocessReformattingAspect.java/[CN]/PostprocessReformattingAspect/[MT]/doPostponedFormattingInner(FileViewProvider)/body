{
  final List<ASTNode> astNodes=myReformatElements.remove(key);
  final Document document=key.getDocument();
  if (document == null)   return;
  final VirtualFile virtualFile=key.getVirtualFile();
  if (!virtualFile.isValid())   return;
  final TreeSet<PostprocessFormattingTask> postprocessTasks=new TreeSet<PostprocessFormattingTask>();
  handleReformatMarkers(key,postprocessTasks);
  if (astNodes != null)   createActionsMap(astNodes,key,postprocessTasks);
  if ("true".equals(System.getProperty("check.psi.is.valid")) && ApplicationManager.getApplication().isUnitTestMode()) {
    checkPsiIsCorrect(key);
  }
  while (!postprocessTasks.isEmpty()) {
    final List<PostponedAction> normalizedActions=normalizeAndReorderPostponedActions(postprocessTasks,document);
    for (    final PostponedAction normalizedAction : normalizedActions) {
      CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(myPsiManager.getProject());
      boolean old=settings.ENABLE_JAVADOC_FORMATTING;
      settings.ENABLE_JAVADOC_FORMATTING=false;
      try {
        normalizedAction.execute(key);
      }
  finally {
        settings.ENABLE_JAVADOC_FORMATTING=old;
      }
    }
  }
}
