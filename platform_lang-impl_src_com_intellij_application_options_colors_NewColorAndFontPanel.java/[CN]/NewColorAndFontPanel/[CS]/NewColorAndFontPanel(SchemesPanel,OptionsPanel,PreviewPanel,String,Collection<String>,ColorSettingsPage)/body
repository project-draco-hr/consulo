{
  super(new BorderLayout(0,10));
  mySchemesPanel=schemesPanel;
  myOptionsPanel=optionsPanel;
  myPreviewPanel=previewPanel;
  myCategory=category;
  myOptionList=optionList;
  mySettingsPage=page;
  JPanel top=new JPanel(new BorderLayout());
  top.add(mySchemesPanel,BorderLayout.NORTH);
  top.add(myOptionsPanel.getPanel(),BorderLayout.CENTER);
  if (optionsPanel instanceof ConsoleFontOptions) {
    JPanel wrapper=new JPanel(new FlowLayout(FlowLayout.TRAILING));
    myCopyAction=new AbstractAction(ApplicationBundle.message("action.apply.editor.font.settings")){
      @Override public void actionPerformed(      ActionEvent e){
        EditorColorsScheme scheme=((ConsoleFontOptions)myOptionsPanel).getCurrentScheme();
        scheme.setConsoleFontName(scheme.getEditorFontName());
        scheme.setConsoleFontPreferences(scheme.getFontPreferences());
        scheme.setConsoleFontSize(scheme.getEditorFontSize());
        scheme.setConsoleLineSpacing(scheme.getLineSpacing());
        myOptionsPanel.updateOptionsList();
        myPreviewPanel.updateView();
      }
    }
;
    wrapper.add(new JButton(myCopyAction));
    top.add(wrapper,BorderLayout.SOUTH);
  }
 else {
    myCopyAction=null;
  }
  if (myPreviewPanel.getPanel() != null && (page == null || !StringUtil.isEmptyOrSpaces(page.getDemoText()))) {
    @SuppressWarnings("SuspiciousNameCombination") JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,top,myPreviewPanel.getPanel());
    splitPane.setBorder(BorderFactory.createEmptyBorder());
    splitPane.setContinuousLayout(true);
    add(splitPane);
    GuiUtils.replaceJSplitPaneWithIDEASplitter(splitPane);
  }
 else {
    add(top,BorderLayout.CENTER);
  }
  previewPanel.addListener(new ColorAndFontSettingsListener.Abstract(){
    @Override public void selectionInPreviewChanged(    final String typeToSelect){
      optionsPanel.selectOption(typeToSelect);
    }
  }
);
  optionsPanel.addListener(new ColorAndFontSettingsListener.Abstract(){
    @Override public void settingsChanged(){
      if (schemesPanel.updateDescription(true)) {
        optionsPanel.applyChangesToScheme();
        previewPanel.updateView();
      }
    }
    @Override public void selectedOptionChanged(    final Object selected){
      if (ApplicationManager.getApplication().isDispatchThread()) {
        myPreviewPanel.blinkSelectedHighlightType(selected);
      }
    }
  }
);
  mySchemesPanel.addListener(new ColorAndFontSettingsListener.Abstract(){
    @Override public void schemeChanged(    final Object source){
      myOptionsPanel.updateOptionsList();
      myPreviewPanel.updateView();
      if (optionsPanel instanceof ConsoleFontOptions) {
        ConsoleFontOptions options=(ConsoleFontOptions)optionsPanel;
        boolean readOnly=ColorAndFontOptions.isReadOnly(options.getCurrentScheme());
        myCopyAction.setEnabled(!readOnly);
      }
    }
  }
);
}
