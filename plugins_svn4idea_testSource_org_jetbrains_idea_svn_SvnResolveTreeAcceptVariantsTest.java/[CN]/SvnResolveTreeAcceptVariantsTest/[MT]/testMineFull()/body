{
  int cnt=0;
  myWorkingCopyDir=createDirInCommand(myWorkingCopyDir,"test--");
  myTheirs=createDirInCommand(myTheirs,"theirs--");
  for (  final TreeConflictData.Data data : TreeConflictData.ourAll) {
    if (myTraceClient) {
      System.out.println("========= TEST " + getTestName(data) + " =========");
    }
    ((ChangeListManagerImpl)myChangeListManager).stopEveryThingIfInTestMode();
    myWorkingCopyDir=createDirInCommand(myWorkingCopyDir.getParent(),"test" + cnt);
    myTheirs=createDirInCommand(myTheirs.getParent(),"theirs" + cnt);
    mySvnClientRunner.checkout(myRepoUrl,myTheirs);
    mySvnClientRunner.checkout(myRepoUrl,myWorkingCopyDir);
    sleep(200);
    ProjectLevelVcsManager.getInstance(myProject).setDirectoryMappings(Collections.singletonList(new VcsDirectoryMapping(myWorkingCopyDir.getPath(),myVcs.getName())));
    createSubTree(data);
    myTheirs.refresh(false,true);
    final ConflictCreator creator=new ConflictCreator(myProject,myTheirs,myWorkingCopyDir,data,mySvnClientRunner);
    creator.create();
    sleep(200);
    ((ChangeListManagerImpl)myChangeListManager).forceGoInTestMode();
    myDirtyScopeManager.markEverythingDirty();
    myChangeListManager.ensureUpToDate(false);
    myDirtyScopeManager.markEverythingDirty();
    myChangeListManager.ensureUpToDate(false);
    final String conflictFile=data.getConflictFile();
    final File conflictIoFile=new File(myWorkingCopyDir.getPath(),conflictFile);
    final FilePathImpl filePath=new FilePathImpl(conflictIoFile,conflictIoFile.isDirectory());
    final Change change=myChangeListManager.getChange(filePath);
    Assert.assertNotNull(change);
    Assert.assertTrue(change instanceof ConflictedSvnChange);
    final SvnRevisionNumber committedRevision=change.getBeforeRevision() != null ? (SvnRevisionNumber)change.getBeforeRevision().getRevisionNumber() : null;
    final SvnTreeConflictResolver resolver=new SvnTreeConflictResolver(myVcs,filePath,committedRevision,null);
    resolver.resolveSelectMineFull(((ConflictedSvnChange)change).getBeforeDescription());
    myTheirs.refresh(false,true);
    myWorkingCopyDir.refresh(false,true);
    checkStatusesAfterMineFullResolve(data,conflictIoFile);
    checkFileContents(data,conflictIoFile);
    ++cnt;
  }
}
