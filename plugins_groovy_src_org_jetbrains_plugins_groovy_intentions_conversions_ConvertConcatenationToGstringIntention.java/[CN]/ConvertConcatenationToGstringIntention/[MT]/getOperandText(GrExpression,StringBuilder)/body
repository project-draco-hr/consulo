{
  if (operand instanceof GrString) {
    final GrString grString=(GrString)operand;
    final String text=operand.getText();
    final boolean isPlain=grString.isPlainString();
    if (isPlain) {
      builder.append(text.substring(1,text.length() - 1));
    }
 else {
      builder.append(text.substring(3,text.length() - 3));
    }
    return !isPlain;
  }
 else   if (operand instanceof GrLiteral) {
    final String text=operand.getText();
    if (text.startsWith("\"\"\"") || text.startsWith("'''")) {
      escape(text.substring(3,text.length() - 3),builder);
      return text.contains("\n");
    }
    if (text.startsWith("\"") || text.startsWith("'") || text.startsWith("/")) {
      escape(text.substring(1,text.length() - 1),builder);
      return false;
    }
    builder.append(text);
    return false;
  }
 else   if (MyPredicate.satisfiedBy(operand,false)) {
    return performIntention((GrBinaryExpression)operand,builder);
  }
 else   if (isToStringMethod(operand,builder)) {
    return false;
  }
  builder.append(START_BRACE).append(operand.getText()).append(END_BRACE);
  return false;
}
