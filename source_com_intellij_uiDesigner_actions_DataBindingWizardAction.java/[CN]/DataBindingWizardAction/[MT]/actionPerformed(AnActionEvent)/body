{
  final Project project;
  final VirtualFile formFile;
  if (myEditor == null) {
    final DataContext context=e.getDataContext();
    project=(Project)context.getData(DataConstants.PROJECT);
    formFile=(VirtualFile)context.getData(DataConstants.VIRTUAL_FILE);
  }
 else {
    project=myEditor.getProject();
    formFile=myEditor.getFile();
  }
  try {
    final WizardData wizardData=new WizardData(project,formFile);
    final Module module=ModuleUtil.getModuleForFile(wizardData.myProject,formFile);
    LOG.assertTrue(module != null);
    final LwRootContainer[] rootContainer=new LwRootContainer[1];
    Generator.exposeForm(wizardData.myProject,formFile,rootContainer);
    final String classToBind=rootContainer[0].getClassToBind();
    if (classToBind == null) {
      Messages.showInfoMessage(project,"Nothing to do. Form should be bound to a class.","Data Binding Wizard");
      return;
    }
    final PsiClass boundClass=FormEditingUtil.findClassToBind(module,classToBind);
    if (boundClass == null) {
      Messages.showErrorDialog(project,"Form is bound to class " + classToBind + " that is not found.","Data Binding Wizard");
      return;
    }
    Generator.prepareWizardData(wizardData,boundClass);
    if (!hasBinding(rootContainer[0])) {
      Messages.showInfoMessage(project,"Nothing to do. Form should contain at least one bound component.","Data Binding Wizard");
      return;
    }
    if (!wizardData.myBindToNewBean) {
      final String[] variants=new String[]{"Alter Data Binding","Bind to Another Bean","Cancel"};
      final int result=Messages.showDialog(project,"Data binding to " + wizardData.myBeanClass.getQualifiedName() + " found.\n"+ "If you continue, generated methods will be re-generated.\n"+ "\n","Data Binding",variants,0,Messages.getQuestionIcon());
      if (result == 0) {
      }
 else       if (result == 1) {
        wizardData.myBindToNewBean=true;
      }
 else {
        return;
      }
    }
    final DataBindingWizard wizard=new DataBindingWizard(project,formFile,wizardData);
    wizard.show();
  }
 catch (  Generator.MyException exc) {
    Messages.showErrorDialog(project,exc.getMessage(),"Error");
  }
}
