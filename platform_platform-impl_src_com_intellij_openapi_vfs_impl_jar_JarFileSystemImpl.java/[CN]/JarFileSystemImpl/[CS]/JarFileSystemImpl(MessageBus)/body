{
  bus.connect().subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener(){
    public void before(    final List<? extends VFileEvent> events){
    }
    public void after(    final List<? extends VFileEvent> events){
      final List<VirtualFile> rootsToRefresh=new ArrayList<VirtualFile>();
      for (      VFileEvent event : events) {
        if (event.getFileSystem() instanceof LocalFileSystem) {
          final String path=event.getPath();
          List<String> jarPaths=new ArrayList<String>();
synchronized (LOCK) {
            jarPaths.addAll(myHandlers.keySet());
          }
          for (          String jarPath : jarPaths) {
            if (FileUtil.startsWith(jarPath.substring(0,jarPath.length() - JAR_SEPARATOR.length()),path,SystemInfo.isFileSystemCaseSensitive)) {
              VirtualFile jarRootToRefresh=markDirty(jarPath);
              if (jarRootToRefresh != null) {
                rootsToRefresh.add(jarRootToRefresh);
              }
            }
          }
        }
      }
      if (!rootsToRefresh.isEmpty()) {
        final Application app=ApplicationManager.getApplication();
        Runnable runnable=new Runnable(){
          public void run(){
            if (app.isDisposed())             return;
            for (            VirtualFile root : rootsToRefresh) {
              if (root.isValid()) {
                ((NewVirtualFile)root).markDirtyRecursively();
              }
            }
            VirtualFile[] roots=rootsToRefresh.toArray(new VirtualFile[rootsToRefresh.size()]);
            RefreshQueue.getInstance().refresh(false,true,null,roots);
          }
        }
;
        if (app.isUnitTestMode()) {
          runnable.run();
        }
 else {
          app.invokeLater(runnable,ModalityState.NON_MODAL);
        }
      }
    }
  }
);
}
