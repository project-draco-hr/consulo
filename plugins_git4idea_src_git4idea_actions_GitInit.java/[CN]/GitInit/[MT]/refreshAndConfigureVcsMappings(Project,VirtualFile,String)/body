{
  GitVcs.getInstance(project).runInBackground(new Task.Backgroundable(project,GitBundle.getString("common.refreshing")){
    public void run(    @NotNull ProgressIndicator indicator){
      root.refresh(false,false);
      ProjectLevelVcsManager vcs=ProjectLevelVcsManager.getInstance(project);
      final List<VcsDirectoryMapping> vcsDirectoryMappings=new ArrayList<VcsDirectoryMapping>(vcs.getDirectoryMappings());
      VcsDirectoryMapping mapping=new VcsDirectoryMapping(path,GitVcs.getInstance(project).getName());
      for (int i=0; i < vcsDirectoryMappings.size(); i++) {
        final VcsDirectoryMapping m=vcsDirectoryMappings.get(i);
        if (m.getDirectory().equals(path)) {
          if (m.getVcs().length() == 0) {
            vcsDirectoryMappings.set(i,mapping);
            mapping=null;
            break;
          }
 else           if (m.getVcs().equals(mapping.getVcs())) {
            mapping=null;
            break;
          }
        }
      }
      if (mapping != null) {
        vcsDirectoryMappings.add(mapping);
      }
      vcs.setDirectoryMappings(vcsDirectoryMappings);
      vcs.updateActiveVcss();
      GitUtil.refreshFiles(project,Collections.singleton(root));
    }
  }
);
}
