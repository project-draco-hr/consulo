{
  Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null) {
    project=ProjectManager.getInstance().getDefaultProject();
  }
  FileChooserDescriptor fcd=new FileChooserDescriptor(false,true,false,false,false,false);
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("init.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("init.destination.directory.description"));
  fcd.setHideIgnored(false);
  final VirtualFile baseDir=project.getBaseDir();
  final VirtualFile[] files=FileChooser.chooseFiles(project,fcd,baseDir);
  if (files.length == 0) {
    return;
  }
  final VirtualFile root=files[0];
  if (GitUtil.isUnderGit(root)) {
    final int v=Messages.showYesNoDialog(project,GitBundle.message("init.warning.already.under.git",StringUtil.escapeXml(root.getPresentableUrl())),GitBundle.getString("init.warning.title"),Messages.getWarningIcon());
    if (v != 0) {
      return;
    }
  }
  try {
    Git.init(project,root);
  }
 catch (  VcsException ex) {
    GitUIUtil.showOperationErrors(project,Collections.singleton(ex),"git init");
    return;
  }
  if (project.isDefault())   return;
  int rc=Messages.showYesNoDialog(project,GitBundle.getString("init.add.root.message"),GitBundle.getString("init.add.root.title"),Messages.getQuestionIcon());
  if (rc != 0) {
    return;
  }
  final String path=root.equals(baseDir) ? "" : root.getPath();
  final Project finalProject=project;
  GitVcs.getInstance(project).runInBackground(new Task.Backgroundable(finalProject,GitBundle.getString("common.refreshing")){
    public void run(    @NotNull ProgressIndicator indicator){
      refreshAndConfigureVcsMappings(finalProject,root,path);
    }
  }
);
}
