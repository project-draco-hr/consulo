{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  FileChooserDescriptor fcd=new FileChooserDescriptor(false,true,false,false,false,false);
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("init.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("init.destination.directory.description"));
  fcd.setHideIgnored(false);
  final VirtualFile baseDir=project.getBaseDir();
  final VirtualFile[] files=FileChooser.chooseFiles(project,fcd,baseDir);
  if (files.length == 0) {
    return;
  }
  final VirtualFile root=files[0];
  if (GitUtil.isUnderGit(root)) {
    Messages.showErrorDialog(project,GitBundle.message("init.error.already.under.git",root.getPresentableUrl()),GitBundle.getString("init.error.title"));
    return;
  }
  GitLineHandler h=new GitLineHandler(project,root,GitCommand.INIT);
  h.setNoSSH(true);
  GitHandlerUtil.doSynchronously(h,GitBundle.getString("initializing.title"),h.printableCommandLine());
  if (!h.errors().isEmpty()) {
    GitUIUtil.showOperationErrors(project,h.errors(),"git init");
    return;
  }
  int rc=Messages.showYesNoDialog(project,GitBundle.getString("init.add.root.message"),GitBundle.getString("init.add.root.title"),Messages.getQuestionIcon());
  if (rc != 0) {
    return;
  }
  GitVcs.getInstance(project).runInBackground(new Task.Backgroundable(project,GitBundle.getString("common.refreshing")){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      root.refresh(false,false);
      final String path=root.equals(baseDir) ? "" : root.getPath();
      ProjectLevelVcsManager vcs=ProjectLevelVcsManager.getInstance(project);
      final List<VcsDirectoryMapping> vcsDirectoryMappings=new ArrayList<VcsDirectoryMapping>(vcs.getDirectoryMappings());
      VcsDirectoryMapping mapping=new VcsDirectoryMapping(path,GitVcs.getInstance(project).getName());
      for (int i=0; i < vcsDirectoryMappings.size(); i++) {
        final VcsDirectoryMapping m=vcsDirectoryMappings.get(i);
        if (m.getDirectory().equals(path)) {
          if (m.getVcs().length() == 0) {
            vcsDirectoryMappings.set(i,mapping);
            mapping=null;
            break;
          }
 else           if (m.getVcs().equals(mapping.getVcs())) {
            mapping=null;
            break;
          }
        }
      }
      if (mapping != null) {
        vcsDirectoryMappings.add(mapping);
      }
      vcs.setDirectoryMappings(vcsDirectoryMappings);
      vcs.updateActiveVcss();
      GitUtil.refreshFiles(project,Collections.singleton(root));
    }
  }
);
}
