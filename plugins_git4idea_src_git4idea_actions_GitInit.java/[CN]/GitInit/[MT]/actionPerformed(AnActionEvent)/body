{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  FileChooserDescriptor fcd=new FileChooserDescriptor(false,true,false,false,false,false);
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("init.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("init.destination.directory.description"));
  fcd.setHideIgnored(false);
  final VirtualFile baseDir=project.getBaseDir();
  final VirtualFile[] files=FileChooser.chooseFiles(project,fcd,baseDir);
  if (files.length == 0) {
    return;
  }
  final VirtualFile root=files[0];
  if (GitUtil.isUnderGit(root)) {
    final int v=Messages.showYesNoDialog(project,GitBundle.message("init.warning.already.under.git",StringUtil.escapeXml(root.getPresentableUrl())),GitBundle.getString("init.warning.title"),Messages.getWarningIcon());
    if (v != 0) {
      return;
    }
  }
  GitLineHandler h=new GitLineHandler(project,root,GitCommand.INIT);
  h.setNoSSH(true);
  GitHandlerUtil.doSynchronously(h,GitBundle.getString("initializing.title"),h.printableCommandLine());
  if (!h.errors().isEmpty()) {
    GitUIUtil.showOperationErrors(project,h.errors(),"git init");
    return;
  }
  int rc=Messages.showYesNoDialog(project,GitBundle.getString("init.add.root.message"),GitBundle.getString("init.add.root.title"),Messages.getQuestionIcon());
  if (rc != 0) {
    return;
  }
  final String path=root.equals(baseDir) ? "" : root.getPath();
  refreshAndConfigureVcsMappings(project,root,path);
}
