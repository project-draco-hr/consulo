{
  LOG.assertTrue(expression.isValid());
  LOG.assertTrue(type.isValid());
  PsiExpression toplevel=expression;
  while (toplevel.getParent() instanceof PsiArrayAccessExpression && ((PsiArrayAccessExpression)toplevel.getParent()).getArrayExpression() == toplevel) {
    toplevel=(PsiExpression)toplevel.getParent();
  }
  if (toplevel instanceof PsiArrayAccessExpression && !PsiUtil.isAccessedForWriting(toplevel)) {
    return type;
  }
  final PsiType normalized=doNormalizeWildcardByPosition(type,expression,toplevel);
  LOG.assertTrue(normalized.isValid(),type);
  if (normalized instanceof PsiClassType && !PsiUtil.isAccessedForWriting(toplevel)) {
    return PsiUtil.captureToplevelWildcards(normalized,expression);
  }
  return normalized;
}
