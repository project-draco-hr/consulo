{
  return new PerformAction(){
    public void performAction(    VirtualFile rootDir,    VirtualFile rootAfter) throws Exception {
      PsiClass aClass=myPsiManager.findClass(className);
      assertNotNull("Class " + className + " not found",aClass);
      PsiClass baseClass=myPsiManager.findClass(baseClassName);
      assertNotNull("Base class " + baseClassName + " not found",baseClass);
      final PsiMethod[] delegatedMethods;
      final List<PsiMethod> methodsList=new ArrayList<PsiMethod>();
      for (int i=0; i < methodNames.length; i++) {
        String name=methodNames[i];
        final PsiMethod[] methodsByName=baseClass.findMethodsByName(name,false);
        for (int j=0; j < methodsByName.length; j++) {
          PsiMethod method=methodsByName[j];
          methodsList.add(method);
        }
      }
      delegatedMethods=methodsList.toArray(new PsiMethod[methodsList.size()]);
      final PsiClass[] delegatedInterfaces=new PsiClass[delegatedInterfaceNames.length];
      for (int i=0; i < delegatedInterfaceNames.length; i++) {
        String delegatedInterfaceName=delegatedInterfaceNames[i];
        PsiClass anInterface=myPsiManager.findClass(delegatedInterfaceName);
        assertNotNull(anInterface);
        delegatedInterfaces[i]=anInterface;
      }
      new InheritanceToDelegationProcessor(myProject,aClass,baseClass,fieldName,innerClassName,delegatedInterfaces,delegatedMethods,delegateOtherMembers,generateGetter).testRun();
      FileDocumentManager.getInstance().saveAllDocuments();
    }
  }
;
}
