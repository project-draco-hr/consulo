{
  String result="";
  String fileText=file.getText();
  int startOffset=fileText.indexOf(BEGIN_MARKER);
  if (startOffset < 0) {
    startOffset=fileText.indexOf(ALL_MARKER);
    replaceAllOccurences=true;
    fileText=removeAllMarker(fileText);
  }
 else {
    replaceAllOccurences=false;
    fileText=removeBeginMarker(fileText);
  }
  int endOffset=fileText.indexOf(END_MARKER);
  fileText=removeEndMarker(fileText);
  myFile=TestUtils.createPseudoPhysicalFile(myProject,fileText);
  fileEditorManager=FileEditorManager.getInstance(myProject);
  myEditor=fileEditorManager.openTextEditor(new OpenFileDescriptor(myProject,myFile.getVirtualFile(),0),false);
  try {
    myEditor.getSelectionModel().setSelection(startOffset,endOffset);
    GroovyIntroduceVariableBase introduceVariableBase=new GroovyIntroduceVariableHandler();
    Assert.assertTrue(myFile instanceof GroovyFile);
    GrExpression selectedExpr=GroovyRefactoringUtil.findElementInRange(((GroovyFile)myFile),startOffset,endOffset,GrExpression.class);
    Assert.assertNotNull("Selected expression reference points to null",selectedExpr);
    final PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
    Assert.assertTrue(tempContainer instanceof GroovyPsiElement);
    PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurences(GroovyRefactoringUtil.getUnparenthesizedExpr(selectedExpr),tempContainer);
    String varName="preved";
    final boolean isFinal=false;
    final PsiType varType=null;
    GroovyVariableValidator validator=new GroovyVariableValidator(introduceVariableBase,myProject,selectedExpr,occurences,(GroovyPsiElement)tempContainer);
    result=validator.isOKTest(varName,replaceAllOccurences);
  }
  finally {
    fileEditorManager.closeFile(myFile.getVirtualFile());
    myEditor=null;
  }
  return result;
}
