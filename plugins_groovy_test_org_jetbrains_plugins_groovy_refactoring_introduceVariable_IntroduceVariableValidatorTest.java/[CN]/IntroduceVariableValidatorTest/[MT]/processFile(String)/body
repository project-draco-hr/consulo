{
  String result="";
  int startOffset=fileText.indexOf(TestUtils.BEGIN_MARKER);
  if (startOffset < 0) {
    startOffset=fileText.indexOf(ALL_MARKER);
    replaceAllOccurences=true;
    fileText=IntroduceVariableTest.removeAllMarker(fileText);
  }
 else {
    replaceAllOccurences=false;
    fileText=TestUtils.removeBeginMarker(fileText);
  }
  int endOffset=fileText.indexOf(TestUtils.END_MARKER);
  fileText=TestUtils.removeEndMarker(fileText);
  myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  Editor myEditor=myFixture.getEditor();
  myEditor.getSelectionModel().setSelection(startOffset,endOffset);
  GrExpression selectedExpr=GroovyRefactoringUtil.findElementInRange(myFixture.getFile(),startOffset,endOffset,GrExpression.class);
  Assert.assertNotNull("Selected expression reference points to null",selectedExpr);
  final PsiElement tempContainer=GroovyRefactoringUtil.getEnclosingContainer(selectedExpr);
  Assert.assertTrue(tempContainer instanceof GroovyPsiElement);
  PsiElement[] occurences=GroovyRefactoringUtil.getExpressionOccurrences(PsiUtil.skipParentheses(selectedExpr,false),tempContainer);
  String varName="preved";
  GroovyVariableValidator validator=new GroovyVariableValidator(new GrIntroduceContextImpl(getProject(),myEditor,selectedExpr,null,occurences,tempContainer));
  result=validator.isOKTest(varName,replaceAllOccurences);
  return result;
}
