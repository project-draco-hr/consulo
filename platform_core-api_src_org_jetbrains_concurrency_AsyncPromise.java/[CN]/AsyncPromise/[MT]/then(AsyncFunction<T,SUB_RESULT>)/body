{
switch (state) {
case PENDING:
    break;
case FULFILLED:
  return fulfilled.fun((T)result);
case REJECTED:
return Promise.reject((Throwable)result);
}
final AsyncPromise<SUB_RESULT> promise=new AsyncPromise<SUB_RESULT>();
final Consumer<Throwable> rejectedHandler=new Consumer<Throwable>(){
@Override public void consume(Throwable error){
promise.setError(error);
}
}
;
addHandlers(new Consumer<T>(){
@Override public void consume(T result){
try {
  fulfilled.fun(result).done(new Consumer<SUB_RESULT>(){
    @Override public void consume(    SUB_RESULT result){
      try {
        promise.setResult(result);
      }
 catch (      Throwable e) {
        promise.setError(e);
      }
    }
  }
).rejected(rejectedHandler);
}
 catch (Throwable e) {
  promise.setError(e);
}
}
}
,rejectedHandler);
return promise;
}
