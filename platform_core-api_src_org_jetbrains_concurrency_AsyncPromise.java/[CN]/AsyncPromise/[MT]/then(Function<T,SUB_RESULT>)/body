{
switch (state) {
case PENDING:
    break;
case FULFILLED:
  return new DonePromise<SUB_RESULT>(fulfilled.fun((T)result));
case REJECTED:
return new RejectedPromise<SUB_RESULT>((Throwable)result);
}
final AsyncPromise<SUB_RESULT> promise=new AsyncPromise<SUB_RESULT>();
addHandlers(new Consumer<T>(){
@Override public void consume(T result){
try {
  if (fulfilled instanceof Obsolescent && ((Obsolescent)fulfilled).isObsolete()) {
    promise.setError(OBSOLETE_ERROR);
  }
 else {
    promise.setResult(fulfilled.fun(result));
  }
}
 catch (Throwable e) {
  promise.setError(e);
}
}
}
,new Consumer<Throwable>(){
@Override public void consume(Throwable error){
promise.setError(error);
}
}
);
return promise;
}
