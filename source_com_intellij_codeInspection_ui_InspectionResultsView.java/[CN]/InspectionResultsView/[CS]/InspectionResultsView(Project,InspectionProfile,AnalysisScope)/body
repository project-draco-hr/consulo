{
  setLayout(new BorderLayout());
  myProject=project;
  myInspectionProfile=inspectionProfile;
  myScope=scope;
  myTree=new InspectionTree(project);
  myOccurenceNavigator=new OccurenceNavigatorSupport(myTree){
    protected Navigatable createDescriptorForNode(    DefaultMutableTreeNode node){
      if (node instanceof RefElementNode) {
        final RefElementNode refNode=(RefElementNode)node;
        if (refNode.hasDescriptorsUnder())         return null;
        final RefElement element=refNode.getElement();
        if (element == null || !element.isValid())         return null;
        final ProblemDescriptor problem=refNode.getProblem();
        if (problem != null) {
          final PsiElement psiElement=problem.getPsiElement();
          if (psiElement == null || !psiElement.isValid())           return null;
          return getOpenFileDescriptor(psiElement);
        }
        return getOpenFileDescriptor(element);
      }
 else       if (node instanceof ProblemDescriptionNode) {
        if (!((ProblemDescriptionNode)node).getElement().isValid())         return null;
        final PsiElement psiElement=((ProblemDescriptionNode)node).getDescriptor().getPsiElement();
        if (psiElement == null || !psiElement.isValid())         return null;
        return getOpenFileDescriptor(psiElement);
      }
      return null;
    }
    public String getNextOccurenceActionName(){
      return "Go Next Problem";
    }
    public String getPreviousOccurenceActionName(){
      return "Go Prev Problem";
    }
  }
;
  myBrowser=new Browser(this);
  final InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(project);
  mySplitter=new Splitter(false,manager.getUIOptions().SPLITTER_PROPORTION);
  mySplitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree));
  mySplitter.setSecondComponent(myBrowser);
  mySplitter.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (Splitter.PROP_PROPORTION.equals(evt.getPropertyName())) {
        final InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(project);
        manager.setSplitterProportion(((Float)evt.getNewValue()).floatValue());
      }
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      syncBrowser();
      syncSource();
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (!e.isPopupTrigger() && e.getClickCount() == 2) {
        Navigatable navigatable=(Navigatable)getData(DataConstants.NAVIGATABLE);
        if (navigatable != null && navigatable.canNavigate()) {
          navigatable.navigate(true);
        }
      }
    }
  }
);
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        Navigatable navigatable=(Navigatable)getData(DataConstants.NAVIGATABLE);
        if (navigatable != null && navigatable.canNavigate()) {
          navigatable.navigate(false);
        }
      }
    }
  }
);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      popupInvoked(comp,x,y);
    }
  }
);
  SmartExpander.installOn(myTree);
  myBrowser.addClickListener(new Browser.ClickListener(){
    public void referenceClicked(    final Browser.ClickEvent e){
      if (e.getEventType() == Browser.ClickEvent.REF_ELEMENT) {
        showSource(e.getClickedElement());
      }
 else       if (e.getEventType() == Browser.ClickEvent.FILE_OFFSET) {
        final VirtualFile file=e.getFile();
        OpenFileDescriptor descriptor=new OpenFileDescriptor(project,file,e.getStartOffset());
        Editor editor=FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
        TextAttributes selectionAttributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
        HighlightManager.getInstance(project).addRangeHighlight(editor,e.getStartOffset(),e.getEndOffset(),selectionAttributes,true,new ArrayList());
      }
    }
  }
);
  add(mySplitter,BorderLayout.CENTER);
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new CloseAction());
  group.add(new RerunAction(this));
  group.add(manager.createToggleAutoscrollAction());
  group.add(new PreviousOccurenceToolbarAction(getOccurenceNavigator()));
  group.add(new NextOccurenceToolbarAction(getOccurenceNavigator()));
  group.add(new ExportHTMLAction());
  group.add(new EditSettingsAction());
  group.add(new HelpAction());
  group.add(new InvokeQuickFixAction());
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.CODE_INSPECTION,group,false);
  add(actionToolbar.getComponent(),BorderLayout.WEST);
}
