{
  if (!isSingleToolInSelection())   return;
  final TreePath path;
  if (myTree.hasFocus()) {
    path=myTree.getLeadSelectionPath();
  }
 else {
    path=null;
  }
  if (path == null)   return;
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE));
  actions.add(ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_USAGES));
  final InspectionTool tool=getSelectedTool();
  if (tool == null)   return;
  final QuickFixAction[] quickFixes=tool.getQuickFixes();
  if (quickFixes != null) {
    for (    QuickFixAction quickFixe : quickFixes) {
      actions.add(quickFixe);
    }
  }
  actions.add(new AnAction("Edit Tool Settings"){
    public void actionPerformed(    AnActionEvent e){
      new SwitchOffToolAction(HighlightDisplayKey.find(tool.getShortName())).editToolSettings(myProject,myInspectionProfile);
      InspectionResultsView.this.update();
    }
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(!myInspectionProfile.getName().equals("Default"));
    }
  }
);
  actions.add(ActionManager.getInstance().getAction(IdeActions.GROUP_VERSION_CONTROLS));
  ActionPopupMenu menu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.CODE_INSPECTION,actions);
  menu.getComponent().show(component,x,y);
}
