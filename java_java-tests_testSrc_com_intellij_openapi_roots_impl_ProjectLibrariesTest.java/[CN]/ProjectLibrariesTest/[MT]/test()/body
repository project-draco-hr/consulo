{
  final LibraryTable libraryTable=ProjectLibraryTable.getInstance(myProject);
  Library lib=ApplicationManager.getApplication().runWriteAction(new Computable<Library>(){
    @Override public Library compute(){
      return libraryTable.createLibrary("LIB");
    }
  }
);
  final ModifiableRootModel rootModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
  rootModel.addLibraryEntry(lib);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      rootModel.commit();
    }
  }
);
  final JavaPsiFacade manager=getJavaFacade();
  assertNull(manager.findClass("pack.MyClass",GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(myModule)));
  final File file=new File(PathManagerEx.getTestDataPath() + "/psi/repositoryUse/cls");
  final VirtualFile root=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
    @Override public VirtualFile compute(){
      return LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file);
    }
  }
);
  assertNotNull(root);
  final Library.ModifiableModel modifyableModel=lib.getModifiableModel();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      modifyableModel.addRoot(root,OrderRootType.CLASSES);
      modifyableModel.commit();
    }
  }
);
  final PsiClass aClass=manager.findClass("pack.MyClass",GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(myModule));
  assertNotNull(aClass);
}
