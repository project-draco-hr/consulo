{
  if (project == null)   return null;
  final Ref<Library> libRef=new Ref<Library>();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      if (path.length() > 0) {
        String version=getGroovyVersion(path);
        String libName=name != null ? name : generateNewGroovyLibName(version);
        StructureConfigrableContext context=ModuleStructureConfigurable.getInstance(project).getContext();
        LibraryTableModifiableModelProvider provider=context.createModifiableModelProvider(LibraryTablesRegistrar.APPLICATION_LEVEL,true);
        LibraryTable.ModifiableModel modifiableModel=provider.getModifiableModel();
        Library library=modifiableModel.createLibrary(libName);
        libRef.set(library);
        final Library.ModifiableModel model=((LibrariesModifiableModel)modifiableModel).getLibraryEditor(library).getModel();
        File srcRoot=new File(path + "/src/main");
        if (srcRoot.exists()) {
          model.addRoot(VfsUtil.getUrlForLibraryRoot(srcRoot),OrderRootType.SOURCES);
        }
        File[] jars;
        File embeddableDir=new File(path + "/embeddable");
        if (embeddableDir.exists()) {
          jars=embeddableDir.listFiles();
        }
 else {
          jars=new File(path + "/lib").listFiles();
        }
        if (jars != null)         for (        File file : jars)         if (file.getName().endsWith(".jar"))         model.addRoot(VfsUtil.getUrlForLibraryRoot(file),OrderRootType.CLASSES);
        saveGroovyVersion(version);
      }
    }
  }
);
  return libRef.get();
}
