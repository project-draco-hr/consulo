{
  String version=getGroovyVersion(path);
  String libName=name != null ? name : generateNewGroovyLibName(version,project);
  if (path.length() > 0) {
    LibraryTable.ModifiableModel modifiableModel=null;
    Library library;
    if (inModuleSettings) {
      StructureConfigurableContext context=ModuleStructureConfigurable.getInstance(project).getContext();
      LibraryTableModifiableModelProvider provider=context.createModifiableModelProvider(inProject ? LibraryTablesRegistrar.PROJECT_LEVEL : LibraryTablesRegistrar.APPLICATION_LEVEL,true);
      modifiableModel=provider.getModifiableModel();
      library=modifiableModel.createLibrary(libName);
    }
 else {
      LibraryTable libTable=inProject ? ProjectLibraryTable.getInstance(project) : LibraryTablesRegistrar.getInstance().getLibraryTable();
      library=libTable.getLibraryByName(libName);
      if (library == null) {
        library=LibraryUtil.createLibrary(libTable,libName);
      }
    }
    final Library.ModifiableModel model;
    if (inModuleSettings) {
      model=((LibrariesModifiableModel)modifiableModel).getLibraryEditor(library).getModel();
    }
 else {
      model=library.getModifiableModel();
    }
    File srcRoot=new File(path + "/src/main");
    if (srcRoot.exists()) {
      model.addRoot(VfsUtil.getUrlForLibraryRoot(srcRoot),OrderRootType.SOURCES);
    }
    File[] jars;
    File embeddableDir=new File(path + "/embeddable");
    if (embeddableDir.exists()) {
      jars=embeddableDir.listFiles();
    }
 else {
      jars=new File(path + "/lib").listFiles();
    }
    if (jars != null) {
      for (      File file : jars) {
        if (file.getName().endsWith(".jar")) {
          model.addRoot(VfsUtil.getUrlForLibraryRoot(file),OrderRootType.CLASSES);
        }
      }
    }
    if (!inModuleSettings) {
      model.commit();
    }
    return library;
  }
  return null;
}
