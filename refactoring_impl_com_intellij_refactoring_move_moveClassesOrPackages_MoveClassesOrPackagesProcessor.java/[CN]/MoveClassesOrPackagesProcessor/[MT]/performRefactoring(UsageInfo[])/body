{
  try {
    Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    for (int idx=0; idx < myElementsToMove.length; idx++) {
      PsiElement element=myElementsToMove[idx];
      final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
      if (element instanceof PsiPackage) {
        final PsiPackage newElement=MoveClassesOrPackagesUtil.doMovePackage((PsiPackage)element,myMoveDestination);
        oldToNewElementsMapping.put(element,newElement);
        element=newElement;
      }
 else       if (element instanceof PsiClass) {
        ChangeContextUtil.encodeContextInfo(element,true);
        final PsiClass newElement=MoveClassesOrPackagesUtil.doMoveClass((PsiClass)element,myMoveDestination);
        oldToNewElementsMapping.put(element,newElement);
        element=newElement;
      }
 else {
        LOG.error("Unexpected element to move: " + element);
      }
      elementListener.elementMoved(element);
      myElementsToMove[idx]=element;
    }
    for (    PsiElement element : myElementsToMove) {
      if (element instanceof PsiClass) {
        ChangeContextUtil.decodeContextInfo(element,null,null);
      }
    }
    List<NonCodeUsageInfo> nonCodeUsages=new ArrayList<NonCodeUsageInfo>();
    for (    UsageInfo usage : usages) {
      if (usage instanceof NonCodeUsageInfo) {
        nonCodeUsages.add((NonCodeUsageInfo)usage);
      }
 else       if (usage instanceof MoveRenameUsageInfo) {
        final MoveRenameUsageInfo moveRenameUsage=(MoveRenameUsageInfo)usage;
        final PsiElement oldElement=moveRenameUsage.getReferencedElement();
        final PsiElement newElement=oldToNewElementsMapping.get(oldElement);
        LOG.assertTrue(newElement != null);
        final PsiReference reference=moveRenameUsage.getReference();
        if (reference != null)         reference.bindToElement(newElement);
      }
    }
    myNonCodeUsages=nonCodeUsages.toArray(new NonCodeUsageInfo[nonCodeUsages.size()]);
  }
 catch (  IncorrectOperationException e) {
    myNonCodeUsages=new NonCodeUsageInfo[0];
    RefactoringUtil.processIncorrectOperation(myProject,e);
  }
}
