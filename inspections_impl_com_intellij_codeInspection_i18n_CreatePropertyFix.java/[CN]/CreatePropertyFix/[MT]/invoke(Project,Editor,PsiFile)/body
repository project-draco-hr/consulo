{
  PsiLiteralExpression literalExpression=myElement instanceof PsiLiteralExpression ? (PsiLiteralExpression)myElement : null;
  final I18nizeQuickFixDialog dialog=new I18nizeQuickFixDialog(project,file,literalExpression,"",false,false){
    protected void init(){
      super.init();
      setTitle(NAME);
    }
    public JComponent getPreferredFocusedComponent(){
      return getValueComponent();
    }
    protected List<String> suggestPropertiesFiles(){
      List<PropertiesFile> propertiesFiles=I18nUtil.propertiesFilesByBundleName(myElement,myBundleName);
      if (propertiesFiles.size() == 0) {
        return super.suggestPropertiesFiles();
      }
      ArrayList<String> list=new ArrayList<String>();
      for (      PropertiesFile propertiesFile : propertiesFiles) {
        list.add(propertiesFile.getVirtualFile().getPath());
      }
      return list;
    }
    @NotNull protected List<String> getExistingValueKeys(    String value){
      return Collections.emptyList();
    }
    protected String suggestPropertyKey(    String value){
      return myKey;
    }
  }
;
  dialog.show();
  if (!dialog.isOK())   return;
  final String key=dialog.getKey();
  final String value=dialog.getValue();
  final Collection<PropertiesFile> selectedPropertiesFiles=dialog.getAllPropertiesFiles();
  invokeAction(project,selectedPropertiesFiles,key,value);
}
