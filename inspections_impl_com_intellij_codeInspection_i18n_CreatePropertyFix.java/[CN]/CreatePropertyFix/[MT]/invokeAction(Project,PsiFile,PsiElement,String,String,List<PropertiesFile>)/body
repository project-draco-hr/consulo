{
  final PsiLiteralExpression literalExpression=psiElement instanceof PsiLiteralExpression ? (PsiLiteralExpression)psiElement : null;
  final String propertyValue=suggestedValue == null ? "" : suggestedValue;
  final I18nizeQuickFixDialog dialog=new I18nizeQuickFixDialog(project,file,literalExpression,propertyValue,false,false){
    protected void init(){
      super.init();
      setTitle(NAME);
    }
    public JComponent getPreferredFocusedComponent(){
      return getValueComponent();
    }
    protected List<String> suggestPropertiesFiles(){
      if (propertiesFiles == null || propertiesFiles.isEmpty()) {
        return super.suggestPropertiesFiles();
      }
      ArrayList<String> list=new ArrayList<String>();
      for (      PropertiesFile propertiesFile : propertiesFiles) {
        final VirtualFile virtualFile=propertiesFile.getVirtualFile();
        if (virtualFile != null) {
          list.add(virtualFile.getPath());
        }
      }
      return list;
    }
    @NotNull protected List<String> getExistingValueKeys(    String value){
      return Collections.emptyList();
    }
    @NotNull protected String suggestPropertyKey(    String value){
      return suggestedKey == null ? "" : suggestedKey;
    }
  }
;
  dialog.show();
  if (!dialog.isOK())   return null;
  final String key=dialog.getKey();
  final String value=dialog.getValue();
  final Collection<PropertiesFile> selectedPropertiesFiles=dialog.getAllPropertiesFiles();
  createProperty(project,psiElement,selectedPropertiesFiles,key,value);
  return new Pair<String,String>(key,value);
}
