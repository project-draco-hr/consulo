{
  if (myProject == null) {
    return;
  }
  useColorForPath(PathColor.NORMAL,myGradleHomePathField);
  useColorForPath(PathColor.NORMAL,myServiceDirectoryPathField);
  GradleSettings settings=myHelper.getSettings(myProject);
  String linkedProjectPath=myLinkedExternalProjectPathField.getText();
  if (StringUtil.isEmpty(linkedProjectPath)) {
    linkedProjectPath=settings.getLinkedProjectPath();
  }
  myLinkedExternalProjectLabel.setVisible(myAlwaysShowLinkedProjectControls || !myProject.isDefault());
  myLinkedExternalProjectPathField.setVisible(myAlwaysShowLinkedProjectControls || !myProject.isDefault());
  if (linkedProjectPath != null) {
    myLinkedExternalProjectPathField.setText(linkedProjectPath);
  }
  myUseWrapperButton.setVisible(myAlwaysShowLinkedProjectControls || (!myProject.isDefault() && linkedProjectPath != null));
  myUseLocalDistributionButton.setVisible(myAlwaysShowLinkedProjectControls || (!myProject.isDefault() && linkedProjectPath != null));
  if (myAlwaysShowLinkedProjectControls && linkedProjectPath == null) {
    myUseWrapperButton.setEnabled(false);
    myUseLocalDistributionButton.setSelected(true);
  }
 else   if (linkedProjectPath != null) {
    if (myHelper.isGradleWrapperDefined(linkedProjectPath)) {
      myUseWrapperButton.setEnabled(true);
      myUseWrapperButton.setText(GradleBundle.message("gradle.config.text.use.wrapper"));
      if (myProject.isDefault() || !settings.isPreferLocalInstallationToWrapper()) {
        myUseWrapperButton.setSelected(true);
        myGradleHomePathField.setEnabled(false);
      }
 else {
        myUseLocalDistributionButton.setSelected(true);
        myGradleHomePathField.setEnabled(true);
      }
    }
 else {
      myUseWrapperButton.setText(GradleBundle.message("gradle.config.text.use.wrapper.disabled"));
      myUseWrapperButton.setEnabled(false);
      myUseLocalDistributionButton.setSelected(true);
    }
  }
  String localDistributionPath=settings.getGradleHome();
  if (StringUtil.isEmpty(localDistributionPath)) {
    myGradleHomeSettingType=GradleHomeSettingType.UNKNOWN;
    deduceGradleHomeIfPossible();
  }
 else {
    myGradleHomeSettingType=myHelper.isGradleSdkHome(new File(localDistributionPath)) ? GradleHomeSettingType.EXPLICIT_CORRECT : GradleHomeSettingType.EXPLICIT_INCORRECT;
    myAlarm.cancelAllRequests();
    if (myGradleHomeSettingType == GradleHomeSettingType.EXPLICIT_INCORRECT && settings.isPreferLocalInstallationToWrapper()) {
      myHelper.showBalloon(MessageType.ERROR,myGradleHomeSettingType,0);
    }
    myGradleHomePathField.setText(localDistributionPath);
  }
  String serviceDirectoryPath=settings.getServiceDirectoryPath();
  if (StringUtil.isEmpty(serviceDirectoryPath)) {
    deduceServiceDirectoryIfPossible();
  }
 else {
    myServiceDirectoryPathField.setText(serviceDirectoryPath);
    useColorForPath(PathColor.NORMAL,myServiceDirectoryPathField);
  }
  myUseAutoImportBox.setSelected(settings.isUseAutoImport());
}
