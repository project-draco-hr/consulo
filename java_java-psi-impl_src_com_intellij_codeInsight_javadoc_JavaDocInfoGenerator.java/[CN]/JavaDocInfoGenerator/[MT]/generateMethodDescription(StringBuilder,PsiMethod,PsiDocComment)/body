{
  final DocTagLocator<PsiElement[]> descriptionLocator=new DocTagLocator<PsiElement[]>(){
    @Override public PsiElement[] find(    PsiDocComment comment){
      if (comment == null) {
        return null;
      }
      if (isEmptyDescription(comment)) {
        return null;
      }
      return comment.getDescriptionElements();
    }
  }
;
  if (comment != null) {
    if (!isEmptyDescription(comment)) {
      generateValue(buffer,comment.getDescriptionElements(),new InheritDocProvider<PsiElement[]>(){
        @Override public Pair<PsiElement[],InheritDocProvider<PsiElement[]>> getInheritDoc(){
          return findInheritDocTag(method,descriptionLocator);
        }
        @Override public PsiClass getElement(){
          return method.getContainingClass();
        }
      }
);
      return;
    }
  }
  Pair<PsiElement[],InheritDocProvider<PsiElement[]>> pair=findInheritDocTag(method,descriptionLocator);
  if (pair != null) {
    PsiElement[] elements=pair.first;
    PsiClass extendee=pair.second.getElement();
    if (elements != null) {
      buffer.append("<DD><DL>");
      buffer.append("<DT><b>");
      buffer.append(extendee.isInterface() ? CodeInsightBundle.message("javadoc.description.copied.from.interface") : CodeInsightBundle.message("javadoc.description.copied.from.class"));
      buffer.append("</b>&nbsp;");
      generateLink(buffer,extendee,JavaDocUtil.getShortestClassName(extendee,method));
      buffer.append(BR_TAG);
      generateValue(buffer,elements,pair.second);
      buffer.append("</DD></DL></DD>");
    }
  }
}
