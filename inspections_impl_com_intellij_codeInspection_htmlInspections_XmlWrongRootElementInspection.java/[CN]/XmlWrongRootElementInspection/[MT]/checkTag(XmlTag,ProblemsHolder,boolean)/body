{
  if (!(tag.getParent() instanceof XmlTag)) {
    final PsiFile psiFile=tag.getContainingFile();
    if (!(psiFile instanceof XmlFile)) {
      return;
    }
    XmlFile xmlFile=(XmlFile)psiFile;
    final XmlDocument document=xmlFile.getDocument();
    if (document == null) {
      return;
    }
    XmlProlog prolog=document.getProlog();
    if (prolog == null || prolog.getUserData(DO_NOT_VALIDATE_KEY) != null) {
      return;
    }
    final XmlDoctype doctype=prolog.getDoctype();
    if (doctype == null) {
      return;
    }
    XmlElement nameElement=doctype.getNameElement();
    if (nameElement == null) {
      return;
    }
    String name=tag.getName();
    String text=nameElement.getText();
    if (tag instanceof HtmlTag) {
      name=name.toLowerCase();
      text=text.toLowerCase();
    }
    if (!name.equals(text)) {
      name=XmlUtil.findLocalNameByQualifiedName(name);
      if (!name.equals(text)) {
        final LocalQuickFix localQuickFix=new LocalQuickFix(){
          public String getName(){
            return XmlBundle.message("change.root.element.to",doctype.getNameElement().getText());
          }
          public String getFamilyName(){
            return getName();
          }
          public void applyFix(          @NotNull final Project project,          @NotNull final ProblemDescriptor descriptor){
            if (!CodeInsightUtil.prepareFileForWrite(tag.getContainingFile())) {
              return;
            }
            new WriteCommandAction(project){
              protected void run(              final Result result) throws Throwable {
                tag.setName(doctype.getNameElement().getText());
              }
            }
.execute();
          }
        }
;
        holder.registerProblem(XmlChildRole.START_TAG_NAME_FINDER.findChild(tag.getNode()).getPsi(),XmlErrorMessages.message("wrong.root.element"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,localQuickFix);
        final ASTNode astNode=XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(tag.getNode());
        if (astNode != null) {
          holder.registerProblem(astNode.getPsi(),XmlErrorMessages.message("wrong.root.element"),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,localQuickFix);
        }
      }
    }
  }
}
