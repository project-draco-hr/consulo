{
  final GitVcs vcs=GitVcs.getInstance(myProject);
  final VirtualFile[] roots=myVcsManager.getRootsUnderVcs(vcs);
  final Map<VirtualFile,Content> currentState=myComponentsMap.get();
  final Set<VirtualFile> currentKeys=new HashSet<VirtualFile>(currentState.keySet());
  currentKeys.removeAll(Arrays.asList(roots));
  final Map<VirtualFile,Content> newKeys=new HashMap<VirtualFile,Content>(currentState);
  final ChangesViewContentManager cvcm=ChangesViewContentManager.getInstance(myProject);
  final VirtualFile baseDir=myProject.getBaseDir();
  final ContentFactory contentFactory=ContentFactory.SERVICE.getInstance();
  for (  VirtualFile root : roots) {
    if (!currentState.containsKey(root)) {
      final GitLogTree tree=new GitLogTree(myProject,root);
      tree.setParentDisposable(myProject);
      tree.initView();
      final Content content=contentFactory.createContent(tree.getComponent(),getCaption(baseDir,root),false);
      content.setCloseable(false);
      cvcm.addContent(content);
      newKeys.put(root,content);
    }
  }
  for (  VirtualFile currentKey : currentKeys) {
    final Content content=newKeys.remove(currentKey);
    cvcm.removeContent(content);
  }
  myComponentsMap.set(newKeys);
}
