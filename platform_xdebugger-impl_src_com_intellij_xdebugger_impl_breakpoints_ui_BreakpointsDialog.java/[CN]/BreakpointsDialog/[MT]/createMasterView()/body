{
  myTreeController=new BreakpointItemsTreeController(myRulesEnabled){
    @Override public void nodeStateWillChangeImpl(    CheckedTreeNode node){
      if (node instanceof BreakpointItemNode) {
        ((BreakpointItemNode)node).getBreakpointItem().saveState();
      }
      super.nodeStateWillChangeImpl(node);
    }
    @Override public void nodeStateDidChangeImpl(    CheckedTreeNode node){
      super.nodeStateDidChangeImpl(node);
      if (node instanceof BreakpointItemNode) {
        myDetailController.doUpdateDetailView(true);
      }
    }
    @Override protected void selectionChangedImpl(){
      super.selectionChangedImpl();
      saveCurrentItem();
      myDetailController.updateDetailView();
    }
  }
;
  final JTree tree=new BreakpointsCheckboxTree(myProject,myTreeController){
    @Override protected void onDoubleClick(    CheckedTreeNode node){
      navigate(false);
    }
  }
;
  PopupHandler.installPopupHandler(tree,new ActionGroup(){
    @NotNull @Override public AnAction[] getChildren(    @Nullable AnActionEvent e){
      ActionGroup group=new ActionGroup("Move to group",true){
        @NotNull @Override public AnAction[] getChildren(        @Nullable AnActionEvent e){
          Set<String> groups=getBreakpointManager().getAllGroups();
          AnAction[] res=new AnAction[groups.size() + 3];
          int i=0;
          res[i++]=new MoveToGroupAction(null);
          for (          String group : groups) {
            res[i++]=new MoveToGroupAction(group);
          }
          res[i++]=new AnSeparator();
          res[i]=new MoveToGroupAction();
          return res;
        }
      }
;
      return new AnAction[]{group};
    }
  }
,ActionPlaces.UNKNOWN,ActionManager.getInstance());
  new AnAction("BreakpointDialog.GoToSource"){
    @Override public void actionPerformed(    AnActionEvent e){
      navigate(true);
      close(OK_EXIT_CODE);
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0)),tree);
  new AnAction("BreakpointDialog.ShowSource"){
    @Override public void actionPerformed(    AnActionEvent e){
      navigate(true);
      close(OK_EXIT_CODE);
    }
  }
.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),tree);
  final DefaultActionGroup breakpointTypes=new DefaultActionGroup();
  for (  XBreakpointType<?,?> type : XBreakpointUtil.getBreakpointTypes()) {
    if (type.isAddBreakpointButtonVisible()) {
      breakpointTypes.addAll(new AddXBreakpointAction(type));
    }
  }
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(tree).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      JBPopupFactory.getInstance().createActionGroupPopup(null,breakpointTypes,DataManager.getInstance().getDataContext(button.getContextComponent()),JBPopupFactory.ActionSelectionAid.NUMBERING,false).show(button.getPreferredPopupPoint());
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myTreeController.removeSelectedBreakpoints(myProject);
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      boolean enabled=false;
      final ItemWrapper[] items=myMasterController.getSelectedItems();
      for (      ItemWrapper item : items) {
        if (item.allowedToRemove()) {
          enabled=true;
        }
      }
      return enabled;
    }
  }
).setToolbarPosition(ActionToolbarPosition.TOP).setToolbarBorder(IdeBorderFactory.createEmptyBorder());
  tree.setBorder(IdeBorderFactory.createBorder());
  for (  ToggleActionButton action : myToggleRuleActions) {
    decorator.addExtraAction(action);
  }
  JPanel decoratedTree=decorator.createPanel();
  decoratedTree.setBorder(IdeBorderFactory.createEmptyBorder());
  myTreeController.setTreeView(tree);
  myTreeController.buildTree(myBreakpointItems);
  initSelection(myBreakpointItems);
  final BreakpointPanelProvider.BreakpointsListener listener=new BreakpointPanelProvider.BreakpointsListener(){
    @Override public void breakpointsChanged(){
      collectItems();
      myTreeController.rebuildTree(myBreakpointItems);
      myDetailController.doUpdateDetailView(true);
    }
  }
;
  for (  BreakpointPanelProvider provider : myBreakpointsPanelProviders) {
    provider.addListener(listener,myProject,myListenerDisposable);
  }
  return decoratedTree;
}
