{
  final TodoItemData[] todoItems=getTodoItems();
  final StepIntersection<TodoItemData,TextRange> stepIntersection=new StepIntersection<TodoItemData,TextRange>(new Convertor<TodoItemData,TextRange>(){
    @Override public TextRange convert(    TodoItemData o){
      return o.getTextRange();
    }
  }
,Convertor.SELF,myRanges,new Getter<String>(){
    @Override public String get(){
      return "";
    }
  }
);
  final List<TodoItemData> filtered=stepIntersection.process(Arrays.asList(todoItems));
  final List<Pair<TextRange,TextAttributes>> result=new ArrayList<Pair<TextRange,TextAttributes>>(filtered.size());
  int offset=0;
  for (  TextRange range : myRanges) {
    Iterator<TodoItemData> iterator=filtered.iterator();
    while (iterator.hasNext()) {
      TodoItemData item=iterator.next();
      if (range.contains(item.getTextRange())) {
        TextRange todoRange=new TextRange(offset - range.getStartOffset() + item.getTextRange().getStartOffset(),offset - range.getStartOffset() + item.getTextRange().getEndOffset());
        result.add(new Pair<TextRange,TextAttributes>(todoRange,item.getPattern().getAttributes().getTextAttributes()));
        iterator.remove();
      }
 else {
        break;
      }
    }
    offset+=range.getLength() + 1 + myAdditionalOffset;
  }
  return result;
}
