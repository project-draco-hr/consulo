{
  final Consumer<String> selectConfigurable=new Consumer<String>(){
    public void consume(    final String configurableId){
      if (myOptionContainers != null) {
        for (int groupIdx=0; groupIdx < myGroups.length; groupIdx++) {
          final ConfigurableGroup group=myGroups[groupIdx];
          final Configurable[] configurables=group.getConfigurables();
          int idx=0;
          for (          Configurable configurable : configurables) {
            if (myOptionContainers.contains(configurable)) {
              if (Comparing.strEqual(configurable.getDisplayName(),configurableId)) {
                rememberLastUsedPage();
                mySelectedGroup=myGroups[groupIdx];
                ourLastGroup=mySelectedGroup.getShortName();
                final DefaultMutableTreeNode groupNode=(DefaultMutableTreeNode)myRoot.getChildAt(groupIdx);
                myTree.expandPath(new TreePath(groupNode.getPath()));
                TreeUtil.selectNode(myTree,groupNode.getChildAt(idx));
                selectConfigurable(configurable,idx);
                requestFocusForMainPanel();
                return;
              }
              idx++;
            }
          }
        }
      }
    }
  }
;
  final SearchableOptionsRegistrar optionsRegistrar=SearchableOptionsRegistrar.getInstance();
  final JPanel panel=new JPanel(new GridBagLayout());
  mySearchField=new SearchUtil.ConfigurableSearchTextField();
  final DocumentAdapter documentAdapter=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      mySearchUpdater.cancelAllRequests();
      mySearchUpdater.addRequest(new Runnable(){
        public void run(){
          final @NonNls String searchPattern=mySearchField.getText();
          if (searchPattern != null && searchPattern.length() > 0) {
            myOptionContainers=optionsRegistrar.getConfigurables(myGroups,e.getType(),myOptionContainers,searchPattern,myProject);
          }
 else {
            myOptionContainers=null;
          }
          SearchUtil.showHintPopup(mySearchField,myPopup,mySearchUpdater,selectConfigurable,myProject);
          initToolbar();
          TreeUtil.expandAll(myTree);
          if (mySelectedConfigurable instanceof SearchableConfigurable) {
            selectOption(new DefaultSearchableConfigurable((SearchableConfigurable)mySelectedConfigurable));
          }
          myComponentPanel.revalidate();
          myComponentPanel.repaint();
        }
      }
,300,ModalityState.defaultModalityState());
    }
  }
;
  mySearchField.addDocumentListener(documentAdapter);
  Disposer.register(myDisposable,new Disposable(){
    public void dispose(){
      if (mySearchField != null) {
        panel.remove(mySearchField);
        mySearchField.removeDocumentListener(documentAdapter);
        mySearchField=null;
      }
    }
  }
);
  SearchUtil.registerKeyboardNavigation(mySearchField,myPopup,mySearchUpdater,selectConfigurable,myProject);
  final GridBagConstraints gc=new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  panel.add(Box.createHorizontalBox(),gc);
  gc.gridx++;
  gc.weightx=0;
  gc.fill=GridBagConstraints.NONE;
  final JLabel label=new JLabel(IdeBundle.message("search.textfield.title"));
  panel.add(label,gc);
  label.setLabelFor(mySearchField);
  gc.gridx++;
  final int height=mySearchField.getPreferredSize().height;
  mySearchField.setPreferredSize(new Dimension(100,height));
  panel.add(mySearchField,gc);
  return panel;
}
