{
  final PsiParameter[] psiParameters=psiMethod.getParameterList().getParameters();
  final PsiExpressionList argumentList=myMethodCall.getArgumentList();
  int idx=0;
  for (  PsiExpression expression : argumentList.getExpressions()) {
    if (element != null && PsiTreeUtil.isAncestor(expression,element,false)) {
      if (psiParameters.length > idx) {
        final PsiType paramType=psiParameters[idx].getType();
        if (paramType instanceof PsiArrayType) {
          final PsiType expressionType=expression.getType();
          if (expressionType != null) {
            final PsiType componentType=((PsiArrayType)paramType).getComponentType();
            if (expressionType.isAssignableFrom(componentType)) {
              return expression;
            }
            final PsiClass psiClass=PsiUtil.resolveClassInType(componentType);
            if (ArrayUtilRt.find(psiMethod.getTypeParameters(),psiClass) != -1) {
              for (              PsiClassType superType : psiClass.getSuperTypes()) {
                if (TypeConversionUtil.isAssignable(superType,expressionType))                 return expression;
              }
            }
          }
        }
      }
    }
    idx++;
  }
  return null;
}
