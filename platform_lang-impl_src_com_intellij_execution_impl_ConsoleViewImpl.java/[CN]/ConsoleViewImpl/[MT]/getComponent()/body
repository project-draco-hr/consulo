{
  myJLayeredPane=new MyLayeredPane();
  myJLayeredPane.setLayout(new BorderLayout());
  if (myEditor == null) {
    myEditor=createEditor();
    myHyperlinks=new EditorHyperlinkSupport(myEditor,myProject);
    requestFlushImmediately();
    myMainPanel=new JPanel(new BorderLayout());
    myMainPanel.add(createCenterComponent(),BorderLayout.CENTER);
    myJLayeredPane.add(myMainPanel,BorderLayout.CENTER,JLayeredPane.DEFAULT_LAYER);
    myAsyncProcessIcon=new AsyncProcessIcon(toString()).setUseMask(false);
    myAsyncProcessIcon.setOpaque(false);
    myAsyncProcessIcon.setPaintPassiveIcon(false);
    myAsyncProcessIcon.suspend();
    myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
      public void documentChanged(      DocumentEvent e){
        if (e.getNewLength() == 0) {
synchronized (LOCK) {
            ConsoleUtil.updateTokensOnTextRemoval(myTokens,e.getOffset(),e.getOffset() + e.getOldLength());
            int toRemoveLen=e.getOldLength();
            myContentSize-=Math.min(myContentSize,toRemoveLen);
          }
        }
      }
    }
);
    myEditor.getScrollingModel().addVisibleAreaListener(new VisibleAreaListener(){
      @Override public void visibleAreaChanged(      VisibleAreaEvent e){
        final Rectangle oldRectangle=e.getOldRectangle();
        final Rectangle newRectangle=e.getNewRectangle();
        if (oldRectangle == null || newRectangle == null) {
          return;
        }
        if (oldRectangle.height <= 0 && newRectangle.height > 0 && myEditor.getSoftWrapModel().isSoftWrappingEnabled() && myEditor.getCaretModel().getOffset() == myEditor.getDocument().getTextLength()) {
          EditorUtil.scrollToTheEnd(myEditor);
        }
      }
    }
);
  }
  return myMainPanel;
}
