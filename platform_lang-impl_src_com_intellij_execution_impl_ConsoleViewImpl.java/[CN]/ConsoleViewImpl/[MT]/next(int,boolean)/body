{
  List<RangeHighlighter> ranges=new ArrayList<RangeHighlighter>(myHyperlinks.getRanges().keySet());
  Collections.sort(ranges,new Comparator<RangeHighlighter>(){
    public int compare(    final RangeHighlighter o1,    final RangeHighlighter o2){
      return o1.getStartOffset() - o2.getStartOffset();
    }
  }
);
  int i;
  for (i=0; i < ranges.size(); i++) {
    RangeHighlighter range=ranges.get(i);
    if (range.getUserData(OLD_HYPERLINK_TEXT_ATTRIBUTES) != null) {
      break;
    }
  }
  int newIndex=ranges.isEmpty() ? -1 : i == ranges.size() ? 0 : (i + delta + ranges.size()) % ranges.size();
  RangeHighlighter next=newIndex < ranges.size() && newIndex >= 0 ? ranges.get(newIndex) : null;
  if (next == null)   return null;
  if (doMove) {
    scrollTo(next.getStartOffset());
  }
  final HyperlinkInfo hyperlinkInfo=myHyperlinks.getRanges().get(next);
  return new OccurenceInfo(new Navigatable(){
    public void navigate(    final boolean requestFocus){
      hyperlinkInfo.navigate(myProject);
      linkFollowed(hyperlinkInfo);
    }
    public boolean canNavigate(){
      return true;
    }
    public boolean canNavigateToSource(){
      return true;
    }
  }
,i,ranges.size());
}
