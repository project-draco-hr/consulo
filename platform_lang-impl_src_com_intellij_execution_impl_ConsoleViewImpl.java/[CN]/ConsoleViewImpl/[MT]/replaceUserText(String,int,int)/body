{
  if (start == end) {
    insertUserText(s,start);
    return;
  }
  final ConsoleViewImpl consoleView=this;
  final Editor editor=consoleView.myEditor;
  final Document document=editor.getDocument();
  final int startOffset;
  final int endOffset;
synchronized (consoleView.LOCK) {
    if (consoleView.myTokens.isEmpty())     return;
    final TokenInfo info=consoleView.myTokens.get(consoleView.myTokens.size() - 1);
    if (info.contentType != ConsoleViewContentType.USER_INPUT) {
      consoleView.print(s,ConsoleViewContentType.USER_INPUT);
      consoleView.flushDeferredText();
      editor.getCaretModel().moveToOffset(document.getTextLength());
      editor.getSelectionModel().removeSelection();
      return;
    }
    if (consoleView.myDeferredUserInput.length() == 0)     return;
    int charCountToReplace;
    final int deferredOffset=myContentSize - consoleView.myDeferredUserInput.length();
    startOffset=getStartOffset(start,info,deferredOffset);
    endOffset=getEndOffset(end,info);
    if (startOffset == -1 || endOffset == -1 || endOffset <= startOffset) {
      editor.getSelectionModel().removeSelection();
      editor.getCaretModel().moveToOffset(start);
      return;
    }
    charCountToReplace=s.length() - endOffset + startOffset;
    consoleView.myDeferredUserInput.replace(startOffset - deferredOffset,endOffset - deferredOffset,s);
    info.endOffset+=charCountToReplace;
    if (info.startOffset == info.endOffset) {
      consoleView.myTokens.remove(consoleView.myTokens.size() - 1);
    }
    consoleView.myContentSize+=charCountToReplace;
  }
  document.replaceString(startOffset,endOffset,s);
  editor.getCaretModel().moveToOffset(startOffset + s.length());
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  editor.getSelectionModel().removeSelection();
}
