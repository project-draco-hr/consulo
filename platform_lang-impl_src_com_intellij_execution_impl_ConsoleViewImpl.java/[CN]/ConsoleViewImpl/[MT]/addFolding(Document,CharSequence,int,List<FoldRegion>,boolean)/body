{
  ConsoleFolding current=null;
  if (!flushOnly) {
    String commandLinePlaceholder=myCommandLineFolding.getPlaceholder(line);
    if (commandLinePlaceholder != null) {
      FoldRegion region=myEditor.getFoldingModel().createFoldRegion(document.getLineStartOffset(line),document.getLineEndOffset(line),commandLinePlaceholder,null,false);
      ContainerUtil.addIfNotNull(toAdd,region);
      return;
    }
    String lineText=EditorHyperlinkSupport.getLineText(document,line,false);
    current=foldingForLine(lineText);
    if (current != null) {
      myFolding.put(line,current);
    }
  }
  final ConsoleFolding prevFolding=myFolding.get(line - 1);
  if (prevFolding != null && !prevFolding.equals(current)) {
    final int lEnd=line - 1;
    int lStart=lEnd;
    while (prevFolding.equals(myFolding.get(lStart - 1)))     lStart--;
    for (int i=lStart; i <= lEnd; i++) {
      myFolding.remove(i);
    }
    List<String> toFold=new ArrayList<>(lEnd - lStart + 1);
    for (int i=lStart; i <= lEnd; i++) {
      toFold.add(EditorHyperlinkSupport.getLineText(document,i,false));
    }
    int oStart=document.getLineStartOffset(lStart);
    if (oStart > 0)     oStart--;
    int oEnd=CharArrayUtil.shiftBackward(chars,document.getLineEndOffset(lEnd) - 1," \t") + 1;
    String placeholder=prevFolding.getPlaceholderText(toFold);
    FoldRegion region=placeholder == null ? null : myEditor.getFoldingModel().createFoldRegion(oStart,oEnd,placeholder,null,false);
    ContainerUtil.addIfNotNull(toAdd,region);
  }
}
