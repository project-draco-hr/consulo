{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (myProject.isDisposed()) {
    return;
  }
  EditorEx editor=myEditor;
  if (editor == null) {
    return;
  }
  if (clear) {
    final DocumentEx document=editor.getDocument();
synchronized (LOCK) {
      myTokens.clear();
      clearHyperlinkAndFoldings();
    }
    final int documentTextLength=document.getTextLength();
    if (documentTextLength > 0) {
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        @Override public void run(){
          document.setInBulkUpdate(true);
          try {
            myInDocumentUpdate=true;
            myDocumentClearing=true;
            document.deleteString(0,documentTextLength);
          }
  finally {
            document.setInBulkUpdate(false);
            myDocumentClearing=false;
            myInDocumentUpdate=false;
          }
        }
      }
,null,DocCommandGroupId.noneGroupId(document));
    }
  }
  final String addedText;
  final Collection<ConsoleViewContentType> contentTypes;
  int deferredTokensSize;
synchronized (LOCK) {
    if (myOutputPaused)     return;
    if (myBuffer.isEmpty())     return;
    addedText=myBuffer.getText();
    contentTypes=Collections.unmodifiableCollection(new HashSet<ConsoleViewContentType>(myBuffer.getDeferredTokenTypes()));
    List<TokenInfo> deferredTokens=myBuffer.getDeferredTokens();
    for (    TokenInfo deferredToken : deferredTokens) {
      addToken(deferredToken.getLength(),deferredToken.getHyperlinkInfo(),deferredToken.contentType);
    }
    deferredTokensSize=deferredTokens.size();
    myBuffer.clear(false);
    cancelHeavyAlarm();
  }
  final Document document=myEditor.getDocument();
  final RangeMarker lastProcessedOutput=document.createRangeMarker(document.getTextLength(),document.getTextLength());
  final int caretOffset=myEditor.getCaretModel().getOffset();
  final boolean isAtLastLine=isCaretAtLastLine();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    @Override public void run(){
      boolean preserveCurrentVisualArea=caretOffset < document.getTextLength();
      if (preserveCurrentVisualArea) {
        myEditor.getScrollingModel().accumulateViewportChanges();
      }
      try {
        myInDocumentUpdate=true;
        String[] strings=addedText.split("\\r");
        for (int i=0; i < strings.length - 1; i++) {
          document.insertString(document.getTextLength(),strings[i]);
          int lastLine=document.getLineCount() - 1;
          if (lastLine >= 0) {
            ConsoleUtil.updateTokensOnTextRemoval(myTokens,document.getTextLength(),document.getTextLength() + 1);
            document.deleteString(document.getLineStartOffset(lastLine),document.getTextLength());
          }
        }
        if (strings.length > 0) {
          document.insertString(document.getTextLength(),strings[strings.length - 1]);
          myContentSize-=strings.length - 1;
        }
      }
  finally {
        myInDocumentUpdate=false;
        if (preserveCurrentVisualArea) {
          myEditor.getScrollingModel().flushViewportChanges();
        }
      }
      if (!contentTypes.isEmpty()) {
        for (        ChangeListener each : myListeners) {
          each.contentAdded(contentTypes);
        }
      }
    }
  }
,null,DocCommandGroupId.noneGroupId(document));
synchronized (LOCK) {
    for (int i=myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) {
      TokenInfo token=myTokens.get(i);
      final HyperlinkInfo info=token.getHyperlinkInfo();
      if (info != null) {
        myHyperlinks.createHyperlink(token.startOffset,token.endOffset,null,info);
      }
    }
  }
  myPsiDisposedCheck.performCheck();
  myLastAddedTextLength=addedText.length();
  if (!myTooMuchOfOutput) {
    if (isTheAmountOfTextTooBig(myLastAddedTextLength)) {
      myTooMuchOfOutput=true;
      final EditorNotificationPanel comp=new EditorNotificationPanel().text("Too much output to process").icon(AllIcons.General.ExclMark);
      final Alarm tooMuchOutputAlarm=new Alarm();
      tooMuchOutputAlarm.addRequest(new Runnable(){
        @Override public void run(){
          add(comp,BorderLayout.NORTH);
        }
      }
,300);
      performWhenNoDeferredOutput(new Runnable(){
        @Override public void run(){
          if (!isTheAmountOfTextTooBig(myLastAddedTextLength)) {
            try {
              highlightHyperlinksAndFoldings(lastProcessedOutput);
            }
  finally {
              myTooMuchOfOutput=false;
              remove(comp);
              tooMuchOutputAlarm.cancelAllRequests();
            }
          }
 else {
            myLastAddedTextLength=0;
            performLaterWhenNoDeferredOutput(this);
          }
        }
      }
);
    }
 else {
      highlightHyperlinksAndFoldings(lastProcessedOutput);
    }
  }
  if (isAtLastLine) {
    EditorUtil.scrollToTheEnd(myEditor);
  }
}
