{
synchronized (LOCK) {
    int numberOfSymbolsToProceed=s.length();
    if (contentType != ConsoleViewContentType.USER_INPUT) {
      numberOfSymbolsToProceed=trimDeferredOutputIfNecessary(s.length());
    }
    if (numberOfSymbolsToProceed <= 0) {
      return;
    }
    if (numberOfSymbolsToProceed < s.length()) {
      s=s.substring(s.length() - numberOfSymbolsToProceed);
    }
    myDeferredTypes.add(contentType);
    s=StringUtil.convertLineSeparators(s,!SystemInfo.isMac);
    myContentSize+=s.length();
    myDeferredOutputLength+=s.length();
    StringBuilder bufferToUse;
    if (myDeferredOutput.isEmpty()) {
      myDeferredOutput.add(bufferToUse=new StringBuilder(s.length()));
    }
 else {
      StringBuilder lastBuffer=myDeferredOutput.getLast();
      bufferToUse=lastBuffer;
      if (USE_CYCLIC_BUFFER) {
        if (lastBuffer.length() + s.length() > CYCLIC_BUFFER_UNIT_SIZE) {
          myDeferredOutput.addLast(bufferToUse=new StringBuilder(CYCLIC_BUFFER_UNIT_SIZE));
        }
      }
    }
    bufferToUse.append(s);
    if (contentType == ConsoleViewContentType.USER_INPUT) {
      myDeferredUserInput.append(s);
    }
    addToken(s.length(),info,contentType,myDeferredTokens);
    if (s.indexOf('\n') >= 0 || s.indexOf('\r') >= 0) {
      if (contentType == ConsoleViewContentType.USER_INPUT) {
        flushDeferredUserInput();
      }
    }
    if (myFlushAlarm.getActiveRequestCount() == 0 && myEditor != null && !myFlushAlarm.isDisposed()) {
      final boolean shouldFlushNow=USE_CYCLIC_BUFFER && myDeferredOutputLength > CYCLIC_BUFFER_SIZE;
      myFlushAlarm.addRequest(myFlushDeferredRunnable,shouldFlushNow ? 0 : FLUSH_DELAY,getStateForUpdate());
    }
  }
}
