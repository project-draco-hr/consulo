{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (myProject.isDisposed()) {
    return;
  }
  final String text;
synchronized (LOCK) {
    if (myOutputPaused)     return;
    if (myDeferredOutput.length() == 0)     return;
    if (myEditor == null)     return;
    text=myDeferredOutput.substring(0,myDeferredOutput.length());
    if (USE_CYCLIC_BUFFER) {
      myDeferredOutput=new StringBuffer(Math.min(myDeferredOutput.length(),CYCLIC_BUFFER_SIZE));
    }
 else {
      myDeferredOutput.setLength(0);
    }
  }
  final Document document=myEditor.getDocument();
  final int oldLineCount=document.getLineCount();
  final boolean isAtEndOfDocument=myEditor.getCaretModel().getOffset() == document.getTextLength();
  boolean cycleUsed=USE_CYCLIC_BUFFER && document.getTextLength() + text.length() > CYCLIC_BUFFER_SIZE;
  ApplicationManager.getApplication().runWriteAction(new DocumentRunnable(document,myProject){
    public void run(){
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        public void run(){
          document.insertString(document.getTextLength(),text);
synchronized (LOCK) {
            fireChange();
          }
        }
      }
,null,DocCommandGroupId.noneGroupId(document));
    }
  }
);
  myPsiDisposedCheck.performCheck();
  final int newLineCount=document.getLineCount();
  if (cycleUsed) {
    final int lineCount=LineTokenizer.calcLineCount(text,true);
    for (Iterator<RangeHighlighter> it=myHyperlinks.getRanges().keySet().iterator(); it.hasNext(); ) {
      if (!it.next().isValid()) {
        it.remove();
      }
    }
    highlightHyperlinks(newLineCount >= lineCount + 1 ? newLineCount - lineCount - 1 : 0,newLineCount - 1);
  }
 else   if (oldLineCount < newLineCount) {
    highlightHyperlinks(oldLineCount - 1,newLineCount - 2);
  }
  if (isAtEndOfDocument) {
    myEditor.getCaretModel().moveToOffset(myEditor.getDocument().getTextLength());
    myEditor.getSelectionModel().removeSelection();
    myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
}
