{
  final EditorFactoryImpl document=(EditorFactoryImpl)EditorFactory.getInstance();
  final Document editorDocument=document.createDocument(true);
  editorDocument.addDocumentListener(new DocumentListener(){
    public void beforeDocumentChange(    DocumentEvent event){
    }
    public void documentChanged(    DocumentEvent event){
      if (myFileType != null) {
        highlightUserTokens();
      }
    }
  }
);
  final EditorEx editor=(EditorEx)document.createViewer(editorDocument,myProject);
  final EditorHighlighter highlighter=new MyHighlighter();
  editor.setHighlighter(highlighter);
  final EditorSettings editorSettings=editor.getSettings();
  editorSettings.setLineMarkerAreaShown(false);
  editorSettings.setLineNumbersShown(false);
  editorSettings.setFoldingOutlineShown(false);
  editorSettings.setAdditionalPageAtBottom(false);
  editorSettings.setAdditionalColumnsCount(0);
  editorSettings.setAdditionalLinesCount(0);
  final EditorColorsScheme scheme=editor.getColorsScheme();
  editor.setBackgroundColor(scheme.getColor(ConsoleViewContentType.CONSOLE_BACKGROUND_KEY));
  scheme.setColor(EditorColors.CARET_ROW_COLOR,null);
  scheme.setColor(EditorColors.RIGHT_MARGIN_COLOR,null);
  editor.addEditorMouseListener(new EditorMouseAdapter(){
    public void mouseReleased(    final EditorMouseEvent e){
      final MouseEvent mouseEvent=e.getMouseEvent();
      if (!mouseEvent.isPopupTrigger()) {
        navigate(e);
      }
    }
  }
);
  final ConsoleViewImpl consoleView=this;
  editor.getContentComponent().addKeyListener(new KeyListener(){
    private int historyPosition=myHistory.size();
    public void keyTyped(    KeyEvent e){
    }
    public void keyPressed(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent e){
      if (e.isAltDown() && !e.isControlDown() && !e.isMetaDown()&& !e.isShiftDown()) {
        if (e.getKeyCode() == KeyEvent.VK_UP) {
          historyPosition--;
          if (historyPosition < 0)           historyPosition=0;
          replaceString();
          e.consume();
        }
 else         if (e.getKeyCode() == KeyEvent.VK_DOWN) {
          historyPosition++;
          if (historyPosition > myHistory.size())           historyPosition=myHistory.size();
          replaceString();
          e.consume();
        }
      }
 else {
        historyPosition=myHistory.size();
      }
    }
    private void replaceString(){
      final String str;
      if (myHistory.size() == historyPosition)       str="";
 else       str=myHistory.get(historyPosition);
synchronized (LOCK) {
        if (myTokens.isEmpty())         return;
        final TokenInfo info=myTokens.get(myTokens.size() - 1);
        if (info.contentType != ConsoleViewContentType.USER_INPUT) {
          consoleView.insertUserText(str,0);
        }
 else {
          consoleView.replaceUserText(str,info.startOffset,info.endOffset);
        }
      }
    }
  }
);
  setEditorUpActions(editor);
  return editor;
}
