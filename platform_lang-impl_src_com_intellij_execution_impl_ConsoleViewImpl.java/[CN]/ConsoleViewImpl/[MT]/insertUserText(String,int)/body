{
  final ConsoleViewImpl consoleView=this;
  final Editor editor=consoleView.myEditor;
  final Document document=editor.getDocument();
  final int startOffset;
synchronized (consoleView.LOCK) {
    if (consoleView.myTokens.isEmpty())     return;
    final TokenInfo info=consoleView.myTokens.get(consoleView.myTokens.size() - 1);
    if (info.contentType != ConsoleViewContentType.USER_INPUT && !s.contains("\n")) {
      consoleView.print(s,ConsoleViewContentType.USER_INPUT);
      consoleView.flushDeferredText(false);
      editor.getCaretModel().moveToOffset(document.getTextLength());
      editor.getSelectionModel().removeSelection();
      return;
    }
 else     if (info.contentType != ConsoleViewContentType.USER_INPUT) {
      insertUserText("temp",offset);
      final TokenInfo newInfo=consoleView.myTokens.get(consoleView.myTokens.size() - 1);
      replaceUserText(s,newInfo.startOffset,newInfo.endOffset);
      return;
    }
    final int deferredOffset=myContentSize - consoleView.myDeferredUserInput.length();
    if (offset > info.endOffset) {
      startOffset=info.endOffset;
    }
 else {
      startOffset=Math.max(deferredOffset,Math.max(info.startOffset,offset));
    }
    consoleView.myDeferredUserInput.insert(startOffset - deferredOffset,s);
    int charCountToAdd=s.length();
    info.endOffset+=charCountToAdd;
    consoleView.myContentSize+=charCountToAdd;
  }
  document.insertString(startOffset,s);
  editor.getCaretModel().moveToOffset(Math.min(startOffset + s.length(),document.getTextLength()));
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
