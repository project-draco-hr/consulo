{
  super(new BorderLayout());
  myIsViewer=viewer;
  myState=initialState;
  myPsiDisposedCheck=new DisposedPsiManagerCheck(project);
  myProject=project;
  myFilters=new CompositeFilter(project);
  if (usePredefinedMessageFilter) {
    for (    ConsoleFilterProvider eachProvider : Extensions.getExtensions(ConsoleFilterProvider.FILTER_PROVIDERS)) {
      Filter[] filters;
      if (eachProvider instanceof ConsoleDependentFilterProvider) {
        filters=((ConsoleDependentFilterProvider)eachProvider).getDefaultFilters(this,project,searchScope);
      }
 else       if (eachProvider instanceof ConsoleFilterProviderEx) {
        filters=((ConsoleFilterProviderEx)eachProvider).getDefaultFilters(project,searchScope);
      }
 else {
        filters=eachProvider.getDefaultFilters(project);
      }
      for (      Filter filter : filters) {
        myFilters.addFilter(filter);
      }
    }
  }
  myFilters.setForceUseAllFilters(true);
  myHeavyUpdateTicket=0;
  myHeavyAlarm=myFilters.isAnyHeavy() ? new Alarm(Alarm.ThreadToUse.SHARED_THREAD,this) : null;
  ConsoleInputFilterProvider[] inputFilters=Extensions.getExtensions(ConsoleInputFilterProvider.INPUT_FILTER_PROVIDERS);
  if (inputFilters.length > 0) {
    CompositeInputFilter compositeInputFilter=new CompositeInputFilter(project);
    myInputMessageFilter=compositeInputFilter;
    for (    ConsoleInputFilterProvider eachProvider : inputFilters) {
      InputFilter[] filters=eachProvider.getDefaultFilters(project);
      for (      InputFilter filter : filters) {
        compositeInputFilter.addFilter(filter);
      }
    }
  }
 else {
    myInputMessageFilter=null;
  }
  myFinishProgress=new Runnable(){
    @Override public void run(){
      myJLayeredPane.finishUpdating();
    }
  }
;
  consoleTooMuchTextBufferRatio=Registry.intValue("console.too.much.text.buffer.ratio");
}
