{
  myTemplatesList=new FileTemplateTabAsList(TEMPLATES_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myPatternsList=new FileTemplateTabAsList(INCLUDES_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myCodeTemplatesList=new FileTemplateTabAsList(CODE_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myCurrentTab=myTemplatesList;
  myJ2eeTemplatesList=new FileTemplateTabAsTree(J2EE_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
    protected FileTemplateTabAsTree.TreeNode initModel(){
      ArrayList<TreeNode> categories=new ArrayList<TreeNode>();
      categories.add(new TreeNode(IdeBundle.message("template.node.ejb"),ModuleType.EJB.getNodeIcon(true),new TreeNode[]{new TreeNode(IdeBundle.message("template.node.java.code.templates"),StdFileTypes.JAVA.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.ENTITY_CLASS_BMP_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.ENTITY_CLASS_CMP_1x_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.ENTITY_CLASS_CMP_2x_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.ENTITY_HOME_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.ENTITY_LOCAL_HOME_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.LOCAL_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.REMOTE_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.SESSION_CLASS_STATEFUL_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.SESSION_CLASS_STATELESS_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.SESSION_HOME_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.SESSION_LOCAL_HOME_INTERFACE_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.MESSAGE_CLASS_TEMPLATE)}),new TreeNode(IdeBundle.message("template.node.deployment.descriptors"),StdFileTypes.XML.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.EJB_JAR_XML_1_1),new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.EJB_JAR_XML_2_0)})}));
      categories.add(new TreeNode(IdeBundle.message("template.node.application"),ModuleType.J2EE_APPLICATION.getNodeIcon(true),new TreeNode[]{new TreeNode(IdeBundle.message("template.node.deployment.descriptors"),StdFileTypes.XML.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.APPLICATION_XML_1_2),new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.APPLICATION_XML_1_3),new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.APPLICATION_XML_1_4)})}));
      categories.add(new TreeNode(IdeBundle.message("template.node.web"),ModuleType.WEB.getNodeIcon(true),new TreeNode[]{new TreeNode(IdeBundle.message("template.node.java.code.templates"),StdFileTypes.JAVA.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.SERVLET_CLASS_TEMPLATE),new TreeNode(StdFileTypes.JAVA.getIcon(),J2EEFileTemplateNames.FILTER_CLASS_TEMPLATE)}),new TreeNode(IdeBundle.message("template.node.deployment.descriptors"),StdFileTypes.XML.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.WEB_XML_22),new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.WEB_XML_23),new TreeNode(StdFileTypes.XML.getIcon(),J2EEFileTemplateNames.WEB_XML_24)}),new TreeNode(IdeBundle.message("template.node.jsp.files"),StdFileTypes.JSP.getIcon(),new TreeNode[]{new TreeNode(StdFileTypes.JSP.getIcon(),J2EEFileTemplateNames.JSP_FILE),new TreeNode(StdFileTypes.JSPX.getIcon(),J2EEFileTemplateNames.JSPX_FILE)})}));
      FileTemplateGroupDescriptorFactory[] templateGroupFactories=ApplicationManager.getApplication().getComponents(FileTemplateGroupDescriptorFactory.class);
      for (      FileTemplateGroupDescriptorFactory templateGroupFactory : templateGroupFactories) {
        FileTemplateGroupDescriptor fileTemplatesDescriptor=templateGroupFactory.getFileTemplatesDescriptor();
        if (fileTemplatesDescriptor != null) {
          categories.add(createNode(fileTemplatesDescriptor));
        }
      }
      return new TreeNode("ROOT",null,categories.toArray(new TreeNode[categories.size()]));
    }
  }
;
  myTabs=new FileTemplateTab[]{myTemplatesList,myPatternsList,myCodeTemplatesList,myJ2eeTemplatesList};
  myTabbedPane=new TabbedPaneWrapper();
  myTabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  for (  FileTemplateTab tab : myTabs) {
    myTabbedPane.addTab(tab.getTitle(),new JScrollPane(tab.getComponent()));
  }
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      onTabChanged();
    }
  }
);
  DefaultActionGroup group=new DefaultActionGroup();
  AnAction removeAction=new AnAction(IdeBundle.message("action.remove.template"),null,IconLoader.getIcon("/general/remove.png")){
    public void actionPerformed(    AnActionEvent e){
      onRemove();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      e.getPresentation().setEnabled(selectedItem != null && !isInternalTemplate(selectedItem.getName(),myCurrentTab.getTitle()));
    }
  }
;
  AnAction addAction=new AnAction(IdeBundle.message("action.create.template"),null,IconLoader.getIcon("/general/add.png")){
    public void actionPerformed(    AnActionEvent e){
      onAdd();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(!(myCurrentTab == myCodeTemplatesList || myCurrentTab == myJ2eeTemplatesList));
    }
  }
;
  AnAction cloneAction=new AnAction(IdeBundle.message("action.copy.template"),null,IconLoader.getIcon("/actions/copy.png")){
    public void actionPerformed(    AnActionEvent e){
      onClone();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(myCurrentTab != myCodeTemplatesList && myCurrentTab != myJ2eeTemplatesList && myCurrentTab.getSelectedTemplate() != null);
    }
  }
;
  AnAction resetAction=new AnAction(IdeBundle.message("action.reset.to.default"),null,IconLoader.getIcon("/actions/reset.png")){
    public void actionPerformed(    AnActionEvent e){
      onReset();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      FileTemplateManager manager=FileTemplateManager.getInstance();
      e.getPresentation().setEnabled(selectedItem != null && !selectedItem.isDefault() && manager.getDefaultTemplate(selectedItem.getName(),selectedItem.getExtension()) != null);
    }
  }
;
  group.add(addAction);
  group.add(removeAction);
  group.add(cloneAction);
  group.add(resetAction);
  addAction.registerCustomShortcutSet(CommonShortcuts.INSERT,myCurrentTab.getComponent());
  removeAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myCurrentTab.getComponent());
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  myEditor=new FileTemplateConfigurable();
  myEditor.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      onEditorChanged();
    }
  }
);
  myMainPanel=new JPanel(new GridBagLayout()){
    public void doLayout(){
      doMainPanelLayout();
    }
  }
;
  myMainPanel.add(myToolBar,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2),0,0));
  myMainPanel.add(myTabbedPane.getComponent(),new GridBagConstraints(0,1,1,1,0.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(2,2,2,2),0,0));
  myEditorComponent=myEditor.createComponent();
  myMainPanel.add(myEditorComponent,new GridBagConstraints(1,0,1,2,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(2,2,2,2),0,0));
  myMainPanel.setMinimumSize(new Dimension(400,300));
  myMainPanel.setPreferredSize(new Dimension(700,500));
  return myMainPanel;
}
