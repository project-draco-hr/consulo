{
  HttpConfigurable.getInstance().setAuthenticator();
  final List<Pair<LibraryInfo,File>> downloadedFiles=new ArrayList<Pair<LibraryInfo,File>>();
  final Exception[] exception=new Exception[]{null};
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      try {
        for (        LibraryInfo info : myLibraryInfos) {
          indicator.checkCanceled();
          final File file=download(info);
          downloadedFiles.add(Pair.create(info,file));
        }
      }
 catch (      ProcessCanceledException e) {
        exception[0]=e;
      }
catch (      IOException e) {
        exception[0]=e;
      }
    }
  }
,J2EEBundle.message("progress.download.libraries.title"),true,myProject);
  if (exception[0] == null) {
    final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.getDirectoryChooserDescriptor(J2EEBundle.message("dialog.directory.for.libraries.title"));
    final VirtualFile[] files;
    if (myProject != null) {
      files=FileChooser.chooseFiles(myProject,descriptor);
    }
 else {
      files=FileChooser.chooseFiles(myParent,descriptor);
    }
    if (files.length > 0) {
      try {
        return moveToDir(downloadedFiles,files[0]);
      }
 catch (      IOException e) {
        final String title=J2EEBundle.message("progress.download.libraries.title");
        if (myProject != null) {
          Messages.showErrorDialog(myProject,title,e.getMessage());
        }
 else {
          Messages.showErrorDialog(myParent,title,e.getMessage());
        }
        return VirtualFile.EMPTY_ARRAY;
      }
    }
  }
  deleteFiles(downloadedFiles);
  if (exception[0] instanceof IOException) {
    final boolean tryAgain=IOExceptionDialog.showErrorDialog((IOException)exception[0],J2EEBundle.message("progress.download.libraries.title"),J2EEBundle.message("error.library.download.failed"));
    if (tryAgain) {
      return download();
    }
  }
  return VirtualFile.EMPTY_ARRAY;
}
