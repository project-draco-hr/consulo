{
  Element keymapElement=new Element(KEY_MAP);
  keymapElement.setAttribute(VERSION_ATTRIBUTE,Integer.toString(1));
  keymapElement.setAttribute(NAME_ATTRIBUTE,myName);
  keymapElement.setAttribute(DISABLE_MNEMONICS_ATTRIBUTE,myDisableMnemonics ? TRUE_WORD : FALSE_WORD);
  if (myParent != null) {
    keymapElement.setAttribute(PARENT_ATTRIBUTE,myParent.getName());
  }
  String[] ownActionIds=getOwnActionIds();
  Arrays.sort(ownActionIds);
  for (int i=0; i < ownActionIds.length; i++) {
    String actionId=ownActionIds[i];
    Element actionElement=new Element(ACTION);
    actionElement.setAttribute(ID_ATTRIBUTE,actionId);
    Shortcut[] shortcuts=getShortcuts(actionId);
    for (int j=0; j < shortcuts.length; j++) {
      Shortcut shortcut=shortcuts[j];
      if (shortcut instanceof KeyboardShortcut) {
        KeyboardShortcut keyboardShortcut=(KeyboardShortcut)shortcut;
        Element element=new Element(KEYBOARD_SHORTCUT);
        element.setAttribute(FIRST_KEYSTROKE_ATTRIBUTE,getKeyShortcutString(keyboardShortcut.getFirstKeyStroke()));
        if (keyboardShortcut.getSecondKeyStroke() != null) {
          element.setAttribute(SECOND_KEYSTROKE_ATTRIBUTE,getKeyShortcutString(keyboardShortcut.getSecondKeyStroke()));
        }
        actionElement.addContent(element);
      }
 else       if (shortcut instanceof MouseShortcut) {
        MouseShortcut mouseShortcut=(MouseShortcut)shortcut;
        Element element=new Element(MOUSE_SHORTCUT);
        element.setAttribute(KEYSTROKE_ATTRIBUTE,getMouseShortcutString(mouseShortcut));
        actionElement.addContent(element);
      }
 else {
        throw new IllegalStateException("unknown shortcut class: " + shortcut);
      }
    }
    keymapElement.addContent(actionElement);
  }
  return keymapElement;
}
