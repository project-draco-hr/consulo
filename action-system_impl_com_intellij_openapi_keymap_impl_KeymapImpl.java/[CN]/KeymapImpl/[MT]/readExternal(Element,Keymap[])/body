{
  if (!KEY_MAP.equals(keymapElement.getName())) {
    throw new InvalidDataException("unknown element: " + keymapElement);
  }
  if (keymapElement.getAttributeValue(VERSION_ATTRIBUTE) == null) {
    Converter01.convert(keymapElement);
  }
  String parentName=keymapElement.getAttributeValue(PARENT_ATTRIBUTE);
  if (parentName != null) {
    for (int i=0; i < existingKeymaps.length; i++) {
      Keymap existingKeymap=existingKeymaps[i];
      if (parentName.equals(existingKeymap.getName())) {
        myParent=(KeymapImpl)existingKeymap;
        myCanModify=true;
        break;
      }
    }
  }
  myName=keymapElement.getAttributeValue(NAME_ATTRIBUTE);
  myDisableMnemonics=TRUE_WORD.equals(keymapElement.getAttributeValue(DISABLE_MNEMONICS_ATTRIBUTE));
  HashMap id2shortcuts=new HashMap();
  for (Iterator i=keymapElement.getChildren().iterator(); i.hasNext(); ) {
    Element actionElement=(Element)i.next();
    if (ACTION.equals(actionElement.getName())) {
      String id=actionElement.getAttributeValue(ID_ATTRIBUTE);
      if (id == null) {
        throw new InvalidDataException("Attribute 'id' cannot be null; Keymap's name=" + myName);
      }
      id2shortcuts.put(id,new ArrayList(1));
      for (Iterator j=actionElement.getChildren().iterator(); j.hasNext(); ) {
        Element shortcutElement=(Element)j.next();
        if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) {
          KeyStroke firstKeyStroke;
          String firstKeyStrokeStr=shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE);
          if (firstKeyStrokeStr != null) {
            firstKeyStroke=ActionManagerEx.getKeyStroke(firstKeyStrokeStr);
            if (firstKeyStroke == null) {
              throw new InvalidDataException("Cannot parse first-keystroke: '" + firstKeyStrokeStr + "'; "+ "Action's id="+ id+ "; Keymap's name="+ myName);
            }
          }
 else {
            throw new InvalidDataException("Attribute 'first-keystroke' cannot be null; Action's id=" + id + "; Keymap's name="+ myName);
          }
          KeyStroke secondKeyStroke=null;
          String secondKeyStrokeStr=shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE);
          if (secondKeyStrokeStr != null) {
            secondKeyStroke=ActionManagerEx.getKeyStroke(secondKeyStrokeStr);
            if (secondKeyStroke == null) {
              throw new InvalidDataException("Wrong second-keystroke: '" + secondKeyStrokeStr + "'; Action's id="+ id+ "; Keymap's name="+ myName);
            }
          }
          Shortcut shortcut=new KeyboardShortcut(firstKeyStroke,secondKeyStroke);
          ArrayList shortcuts=(ArrayList)id2shortcuts.get(id);
          shortcuts.add(shortcut);
        }
 else         if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) {
          String keystrokeString=shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE);
          if (keystrokeString == null) {
            throw new InvalidDataException("Attribute 'keystroke' cannot be null; Action's id=" + id + "; Keymap's name="+ myName);
          }
          try {
            MouseShortcut shortcut=KeymapUtil.parseMouseShortcut(keystrokeString);
            ArrayList shortcuts=(ArrayList)id2shortcuts.get(id);
            shortcuts.add(shortcut);
          }
 catch (          InvalidDataException exc) {
            throw new InvalidDataException("Wrong mouse-shortcut: '" + keystrokeString + "'; Action's id="+ id+ "; Keymap's name="+ myName);
          }
        }
 else {
          throw new InvalidDataException("unknown element: " + shortcutElement + "; Keymap's name="+ myName);
        }
      }
    }
 else {
      throw new InvalidDataException("unknown element: " + actionElement + "; Keymap's name="+ myName);
    }
  }
  for (Iterator i=id2shortcuts.keySet().iterator(); i.hasNext(); ) {
    String id=(String)i.next();
    myActionId2ListOfShortcuts.put(id,new ArrayList(2));
    ArrayList shortcuts=(ArrayList)id2shortcuts.get(id);
    for (Iterator j=shortcuts.iterator(); j.hasNext(); ) {
      Shortcut shortcut=(Shortcut)j.next();
      addShortcutSilently(id,shortcut);
    }
  }
}
