{
  if (selectedObject instanceof Library) {
    final Library library=(Library)selectedObject;
    if (myLibraryDependencyCache.containsKey(library)) {
      return myLibraryDependencyCache.get(library);
    }
  }
 else   if (selectedObject instanceof ProjectJdk) {
    final ProjectJdk projectJdk=(ProjectJdk)selectedObject;
    if (myJdkDependencyCache.containsKey(projectJdk)) {
      return myJdkDependencyCache.get(projectJdk);
    }
  }
 else   if (selectedObject instanceof Module) {
    final Module module=(Module)selectedObject;
    if (myModulesDependencyCache.containsKey(module)) {
      return myModulesDependencyCache.get(module);
    }
  }
  if (force) {
    LOG.assertTrue(ApplicationManager.getApplication().isDispatchThread());
    final Set<String> dep=getDependencies(selectedObject,selectedNode);
    updateCache(selectedObject,dep);
    return dep;
  }
 else {
    myUpdateDependenciesAlarm.addRequest(new Runnable(){
      public void run(){
        final Set<String> dep=getDependencies(selectedObject,selectedNode);
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            if (!myDisposed) {
              updateCache(selectedObject,dep);
              fireOnCacheChanged();
            }
          }
        }
);
      }
    }
,100);
    return null;
  }
}
