{
  final Request request=JUnit4TestRunnerUtil.buildRequest(args);
  final Runner testRunner=request.getRunner();
  try {
    Description description=testRunner.getDescription();
    if (request instanceof ClassRequest) {
      description=getSuiteMethodDescription(request,description);
    }
 else     if (request instanceof FilterRequest) {
      description=getFilteredDescription(request,description);
    }
    if (sendTree)     TreeSender.sendTree(this,description);
  }
 catch (  Exception e) {
    System.err.println("Internal Error occured.");
    e.printStackTrace(System.err);
  }
  try {
    final JUnitCore runner=new JUnitCore();
    runner.addListener(myTestsListener);
    for (Iterator iterator=listeners.iterator(); iterator.hasNext(); ) {
      final IDEAJUnitListener junitListener=(IDEAJUnitListener)Class.forName((String)iterator.next()).newInstance();
      runner.addListener(new RunListener(){
        public void testStarted(        Description description) throws Exception {
          junitListener.testStarted(JUnit4ReflectionUtil.getClassName(description),JUnit4ReflectionUtil.getMethodName(description));
        }
        public void testFinished(        Description description) throws Exception {
          junitListener.testFinished(JUnit4ReflectionUtil.getClassName(description),JUnit4ReflectionUtil.getMethodName(description));
        }
      }
);
    }
    long startTime=System.currentTimeMillis();
    Result result=runner.run(testRunner);
    long endTime=System.currentTimeMillis();
    long runTime=endTime - startTime;
    if (sendTree)     new TimeSender(myRegistry).printHeader(runTime);
    if (!result.wasSuccessful()) {
      return -1;
    }
    return 0;
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    return -2;
  }
}
