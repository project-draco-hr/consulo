{
  myTableView=new TableView(createListModel());
  myTableView.getTableViewModel().setSortable(false);
  myPanel=ToolbarDecorator.createDecorator(myTableView).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myTableView.stopEditing();
      setModified();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          myElements.add(createElement());
          myTableView.getTableViewModel().setItems(myElements);
          myTableView.getComponent().editCellAt(myElements.size() - 1,0);
        }
      }
);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myTableView.stopEditing();
      setModified();
      Object selected=getSelection();
      if (selected != null) {
        int selectedIndex=myElements.indexOf(selected);
        myElements.remove(selected);
        myTableView.getTableViewModel().setItems(myElements);
        int prev=selectedIndex - 1;
        if (prev >= 0) {
          myTableView.getComponent().getSelectionModel().setSelectionInterval(prev,prev);
        }
 else         if (selectedIndex < myElements.size()) {
          myTableView.getComponent().getSelectionModel().setSelectionInterval(selectedIndex,selectedIndex);
        }
      }
    }
  }
).disableUpDownActions().createPanel();
  ToolbarDecorator.findRemoveButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      T selection=getSelection();
      return selection != null && myIsEnabled && canDeleteElement(selection);
    }
  }
);
  ToolbarDecorator.findAddButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return myIsEnabled;
    }
  }
);
  myTableView.getComponent().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
}
