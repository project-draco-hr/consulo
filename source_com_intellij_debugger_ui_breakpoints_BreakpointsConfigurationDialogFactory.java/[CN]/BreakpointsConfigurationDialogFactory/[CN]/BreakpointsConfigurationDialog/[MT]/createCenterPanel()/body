{
  myTabbedPane=new TabbedPaneWrapper();
  myPanel=new JPanel(new BorderLayout());
  myLineBreakpointsPanel=new BreakpointPanel(new LineBreakpointPropertiesPanel(myProject),new BreakpointPanelAction[]{new SwitchViewAction(),new GotoSourceAction(myProject){
    public void actionPerformed(    ActionEvent e){
      super.actionPerformed(e);
      close(OK_EXIT_CODE);
    }
  }
,new ViewSourceAction(myProject),new RemoveAction(myProject),new ToggleGroupByMethodsAction(),new ToggleGroupByClassesAction(),new ToggleFlattenPackagesAction()});
  setupPanelUI(myLineBreakpointsPanel,LineBreakpoint.CATEGORY);
  myExceptionBreakpointsPanel=new BreakpointPanel(new ExceptionBreakpointPropertiesPanel(myProject),new BreakpointPanelAction[]{new SwitchViewAction(),new AddExceptionBreakpointAction(),new RemoveAction(myProject){
    public void update(){
      super.update();
      if (getButton().isEnabled()) {
        Breakpoint[] selectedBreakpoints=getPanel().getSelectedBreakpoints();
        for (int i=0; i < selectedBreakpoints.length; i++) {
          Breakpoint bp=selectedBreakpoints[i];
          if (bp instanceof AnyExceptionBreakpoint) {
            getButton().setEnabled(false);
          }
        }
      }
    }
  }
,new ToggleGroupByClassesAction(),new ToggleFlattenPackagesAction()});
  setupPanelUI(myExceptionBreakpointsPanel,ExceptionBreakpoint.CATEGORY);
  myExceptionBreakpointsPanel.getTree().setGroupByMethods(false);
  myFieldBreakpointsPanel=new BreakpointPanel(new FieldBreakpointPropertiesPanel(myProject),new BreakpointPanelAction[]{new SwitchViewAction(),new AddFieldBreakpointAction(),new GotoSourceAction(myProject){
    public void actionPerformed(    ActionEvent e){
      super.actionPerformed(e);
      close(OK_EXIT_CODE);
    }
  }
,new ViewSourceAction(myProject),new RemoveAction(myProject),new ToggleGroupByClassesAction(),new ToggleFlattenPackagesAction()});
  setupPanelUI(myFieldBreakpointsPanel,FieldBreakpoint.CATEGORY);
  myFieldBreakpointsPanel.getTree().setGroupByMethods(false);
  myMethodBreakpointsPanel=new BreakpointPanel(new MethodBreakpointPropertiesPanel(myProject),new BreakpointPanelAction[]{new SwitchViewAction(),new GotoSourceAction(myProject){
    public void actionPerformed(    ActionEvent e){
      super.actionPerformed(e);
      close(OK_EXIT_CODE);
    }
  }
,new ViewSourceAction(myProject),new RemoveAction(myProject),new ToggleGroupByClassesAction(),new ToggleFlattenPackagesAction()});
  setupPanelUI(myMethodBreakpointsPanel,MethodBreakpoint.CATEGORY);
  myMethodBreakpointsPanel.getTree().setGroupByMethods(false);
  addPanel(myLineBreakpointsPanel,LINE_BREAKPOINTS_NAME);
  addPanel(myExceptionBreakpointsPanel,EXCEPTION_BREAKPOINTS_NAME);
  addPanel(myFieldBreakpointsPanel,FIELD_WATCHPOINTS_NAME);
  addPanel(myMethodBreakpointsPanel,METHOD_BREAKPOINTS_NAME);
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      BreakpointPanel panel=getSelectedPanel();
      panel.ensureSelectionExists();
    }
  }
);
  myPanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  myTabbedPane.installKeyboardNavigation();
  ActionListener closeAction=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      close(CANCEL_EXIT_CODE);
    }
  }
;
  myPanel.registerKeyboardAction(closeAction,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myPanel.setPreferredSize(new Dimension(600,500));
  return myPanel;
}
