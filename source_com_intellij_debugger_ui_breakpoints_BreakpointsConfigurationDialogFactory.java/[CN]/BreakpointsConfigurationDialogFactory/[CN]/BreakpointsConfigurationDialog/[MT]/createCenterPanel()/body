{
  myTabbedPane=new TabbedPaneWrapper();
  myPanel=new JPanel(new BorderLayout());
  myLineBreakpointsPanel=new BreakpointPanel(new BreakpointTableModel(),new LineBreakpointPropertiesPanel(myProject));
  myLineBreakpointsPanel.getAddBreakpointButton().setVisible(false);
  initPanel(myLineBreakpointsPanel);
  myExceptionBreakpointsPanel=new BreakpointPanel(new BreakpointTableModel(),new ExceptionBreakpointPropertiesPanel(myProject)){
    public void updateButtons(){
      super.updateButtons();
      if (getRemoveBreakpointButton().isEnabled()) {
        Breakpoint[] selectedBreakpoints=getSelectedBreakpoints();
        for (int i=0; i < selectedBreakpoints.length; i++) {
          Breakpoint bp=selectedBreakpoints[i];
          if (bp instanceof AnyExceptionBreakpoint) {
            getRemoveBreakpointButton().setEnabled(false);
          }
        }
      }
    }
  }
;
  AddExceptionBreakpointAction addExceptionBreakpointAction=new AddExceptionBreakpointAction();
  myExceptionBreakpointsPanel.getAddBreakpointButton().addActionListener(addExceptionBreakpointAction);
  myExceptionBreakpointsPanel.getTable().registerKeyboardAction(addExceptionBreakpointAction,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myExceptionBreakpointsPanel.getViewSourceButton().setVisible(false);
  myExceptionBreakpointsPanel.getGotoSourceButton().setVisible(false);
  RemoveBreakpointAction removeExceptionBreakpointAction=new RemoveBreakpointAction(myExceptionBreakpointsPanel);
  final JButton removeExceptionBreakpointButton=myExceptionBreakpointsPanel.getRemoveBreakpointButton();
  removeExceptionBreakpointButton.addActionListener(removeExceptionBreakpointAction);
  myExceptionBreakpointsPanel.getTable().registerKeyboardAction(removeExceptionBreakpointAction,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myExceptionBreakpointsPanel.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      JTable table=myExceptionBreakpointsPanel.getTable();
      boolean shouldEnable=(table.getModel().getRowCount() > 0) && (table.getSelectedRow() >= 0);
      if (shouldEnable) {
        BreakpointTableModel model=(BreakpointTableModel)table.getModel();
        int[] rows=table.getSelectedRows();
        for (int idx=0; idx < rows.length; idx++) {
          Breakpoint breakpoint=model.getBreakpoint(rows[idx]);
          if (breakpoint instanceof AnyExceptionBreakpoint) {
            shouldEnable=false;
            break;
          }
        }
      }
      removeExceptionBreakpointButton.setEnabled(shouldEnable);
    }
  }
);
  removeExceptionBreakpointButton.setEnabled(false);
  myFieldBreakpointsPanel=new BreakpointPanel(new BreakpointTableModel(),new FieldBreakpointPropertiesPanel(myProject));
  AddFieldBreakpointAction addFieldBreakpointAction=new AddFieldBreakpointAction();
  myFieldBreakpointsPanel.getAddBreakpointButton().addActionListener(addFieldBreakpointAction);
  myFieldBreakpointsPanel.getTable().registerKeyboardAction(addFieldBreakpointAction,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  initPanel(myFieldBreakpointsPanel);
  myMethodBreakpointsPanel=new BreakpointPanel(new BreakpointTableModel(),new MethodBreakpointPropertiesPanel(myProject));
  myMethodBreakpointsPanel.getAddBreakpointButton().setVisible(false);
  initPanel(myMethodBreakpointsPanel);
  addPanel(myLineBreakpointsPanel,LINE_BREAKPOINTS_NAME);
  addPanel(myExceptionBreakpointsPanel,EXCEPTION_BREAKPOINTS_NAME);
  addPanel(myFieldBreakpointsPanel,FIELD_WATCHPOINTS_NAME);
  addPanel(myMethodBreakpointsPanel,METHOD_BREAKPOINTS_NAME);
  ShortcutSet shortcutSet=ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet();
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      gotoSource();
    }
  }
.registerCustomShortcutSet(shortcutSet,myLineBreakpointsPanel.getPanel());
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      gotoSource();
    }
  }
.registerCustomShortcutSet(shortcutSet,myMethodBreakpointsPanel.getPanel());
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      BreakpointPanel panel=getSelectedPanel();
      JTable table=panel.getTable();
      if (table.getRowCount() > 0 && table.getSelectedRow() < 0) {
        ListSelectionModel model=table.getSelectionModel();
        model.clearSelection();
        model.addSelectionInterval(0,0);
        table.requestFocus();
      }
    }
  }
);
  myPanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  myTabbedPane.installKeyboardNavigation();
  ActionListener closeAction=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      close(CANCEL_EXIT_CODE);
    }
  }
;
  myPanel.registerKeyboardAction(closeAction,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myPanel.setPreferredSize(new Dimension(600,500));
  return myPanel;
}
