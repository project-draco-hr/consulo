{
  try {
    final RefreshableOnComponent filterUI=provider.createFilterUI();
    final boolean ok;
    if (filterUI != null) {
      final FilterDialog dlg=new FilterDialog(project,filterUI);
      dlg.show();
      ok=dlg.getExitCode() == DialogWrapper.OK_EXIT_CODE;
    }
 else {
      ok=true;
    }
    if (ok) {
      final AbstractVcsHelper helper=AbstractVcsHelper.getInstance(project);
      final List<RepositoryVersion> versions=new ArrayList<RepositoryVersion>();
      final List<VcsException> exceptions=new ArrayList<VcsException>();
      final boolean done=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
        public void run(){
          try {
            versions.addAll(provider.getFilteredVersions());
          }
 catch (          VcsException e) {
            exceptions.add(e);
          }
        }
      }
,"Searching for changes",true,project);
      if (!done)       return;
      if (!exceptions.isEmpty()) {
        Messages.showErrorDialog(project,"Problem accessing VCS" + exceptions.get(0).getMessage(),"Can't Show Changes");
        return;
      }
      if (versions.isEmpty()) {
        Messages.showInfoMessage(project,"No changes matching critera found","No Changes Found");
        return;
      }
      final List<CommittedChangeList> lists=new ArrayList<CommittedChangeList>();
      for (      RepositoryVersion version : versions) {
        lists.add(createFromRepositoryVersion(version));
      }
      helper.showChangesBrowser(lists,title);
    }
  }
 catch (  VcsException e) {
    Messages.showErrorDialog(project,"Cannot show changes: " + e.getMessage(),"Error Accessing Perforce");
  }
}
