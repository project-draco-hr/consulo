{
  LOG.assertTrue(tabDisplayName != null,"tabDisplayName should not be null");
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      if (abstractVcsExceptions.isEmpty()) {
        removeContents(null,tabDisplayName);
        return;
      }
      final NewErrorTreeViewPanel errorTreeView=new NewErrorTreeViewPanel(myProject,null){
        protected boolean canHideWarnings(){
          return false;
        }
      }
;
      CommandProcessor commandProcessor=CommandProcessor.getInstance();
      commandProcessor.executeCommand(myProject,new Runnable(){
        public void run(){
          final MessageView messageView=myProject.getComponent(MessageView.class);
          final Content content=PeerFactory.getInstance().getContentFactory().createContent(errorTreeView.getComponent(),tabDisplayName,true);
          content.putUserData(KEY,errorTreeView);
          messageView.addContent(content);
          messageView.setSelectedContent(content);
          removeContents(content,tabDisplayName);
          messageView.addContentManagerListener(new MyContentDisposer(content,messageView));
        }
      }
,VcsBundle.message("command.name.open.error.message.view"),null);
      for (Iterator i=abstractVcsExceptions.iterator(); i.hasNext(); ) {
        VcsException exception=(VcsException)i.next();
        String[] messages=exception.getMessages();
        if (messages.length == 0)         messages=new String[]{VcsBundle.message("exception.text.unknown.error")};
        errorTreeView.addMessage(getErrorCategory(exception),messages,exception.getVirtualFile(),-1,-1,null);
      }
      ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW).activate(null);
    }
  }
);
}
