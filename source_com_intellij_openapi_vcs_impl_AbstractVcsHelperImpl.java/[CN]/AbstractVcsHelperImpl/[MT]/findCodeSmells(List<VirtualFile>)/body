{
  final List<CodeSmellInfo> result=new ArrayList<CodeSmellInfo>();
  final PsiManager manager=PsiManager.getInstance(myProject);
  final FileDocumentManager fileManager=FileDocumentManager.getInstance();
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  boolean completed=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      for (int i=0; i < filesToCheck.size(); i++) {
        if (progress.isCanceled())         throw new ProcessCanceledException();
        VirtualFile file=filesToCheck.get(i);
        progress.setText(VcsBundle.message("searching.for.code.smells.processing.file.progress.text",file.getPresentableUrl()));
        progress.setFraction((double)i / (double)filesToCheck.size());
        final PsiFile psiFile=manager.findFile(file);
        if (psiFile != null) {
          final Document document=fileManager.getDocument(file);
          if (document != null) {
            final List<CodeSmellInfo> codeSmells=findCodeSmells(psiFile,progress,document);
            result.addAll(codeSmells);
          }
        }
      }
    }
  }
,VcsBundle.message("checking.code.smells.progress.title"),true,myProject);
  if (!completed)   throw new ProcessCanceledException();
  return result;
}
