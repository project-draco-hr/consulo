{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      if (smellList.isEmpty()) {
        return;
      }
      final NewErrorTreeViewPanel errorTreeView=new NewErrorTreeViewPanel(myProject,null){
        protected boolean canHideWarnings(){
          return false;
        }
      }
;
      CommandProcessor commandProcessor=CommandProcessor.getInstance();
      commandProcessor.executeCommand(myProject,new Runnable(){
        public void run(){
          final MessageView messageView=myProject.getComponent(MessageView.class);
          final String tabDisplayName=VcsBundle.message("code.smells.error.messages.tab.name");
          final Content content=PeerFactory.getInstance().getContentFactory().createContent(errorTreeView.getComponent(),tabDisplayName,true);
          content.putUserData(KEY,errorTreeView);
          messageView.addContent(content);
          messageView.setSelectedContent(content);
          removeContents(content,tabDisplayName);
          messageView.addContentManagerListener(new MyContentDisposer(content,messageView));
        }
      }
,VcsBundle.message("command.name.open.error.message.view"),null);
      FileDocumentManager fileManager=FileDocumentManager.getInstance();
      for (      CodeSmellInfo smellInfo : smellList) {
        VirtualFile file=fileManager.getFile(smellInfo.getDocument());
        if (smellInfo.getSeverity() == HighlightSeverity.ERROR) {
          errorTreeView.addMessage(MessageCategory.ERROR,new String[]{smellInfo.getDescription()},file,smellInfo.getStartLine(),smellInfo.getStartColumn(),null);
        }
 else {
          errorTreeView.addMessage(MessageCategory.WARNING,new String[]{smellInfo.getDescription()},file,smellInfo.getStartLine(),smellInfo.getStartColumn(),null);
        }
      }
      ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW).activate(null);
    }
  }
);
}
