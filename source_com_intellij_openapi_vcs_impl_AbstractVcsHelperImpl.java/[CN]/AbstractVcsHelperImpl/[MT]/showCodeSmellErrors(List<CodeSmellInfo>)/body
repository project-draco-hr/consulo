{
  Collections.sort(smellList,new Comparator<CodeSmellInfo>(){
    public int compare(    final CodeSmellInfo o1,    final CodeSmellInfo o2){
      return o1.getTextRange().getStartOffset() - o2.getTextRange().getStartOffset();
    }
  }
);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      if (smellList.isEmpty()) {
        return;
      }
      final VcsErrorViewPanel errorTreeView=new VcsErrorViewPanel(myProject);
      openMessagesView(errorTreeView,VcsBundle.message("code.smells.error.messages.tab.name"));
      FileDocumentManager fileManager=FileDocumentManager.getInstance();
      for (      CodeSmellInfo smellInfo : smellList) {
        VirtualFile file=fileManager.getFile(smellInfo.getDocument());
        if (smellInfo.getSeverity() == HighlightSeverity.ERROR) {
          errorTreeView.addMessage(MessageCategory.ERROR,new String[]{smellInfo.getDescription()},file,smellInfo.getStartLine(),smellInfo.getStartColumn(),null);
        }
 else {
          errorTreeView.addMessage(MessageCategory.WARNING,new String[]{smellInfo.getDescription()},file,smellInfo.getStartLine(),smellInfo.getStartColumn(),null);
        }
      }
      ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW).activate(null);
    }
  }
);
}
