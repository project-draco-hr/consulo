{
  if (doSanityCheck)   myAssert(!isFull());
  short recordCount=getChildrenCount();
  if (doSanityCheck)   myAssert(recordCount < getMaxChildrenCount());
  final boolean indexLeaf=isIndexLeaf();
  if (indexLeaf) {
    if (recordCount == 0 && btree.indexNodeIsHashTable) {
      setHashedLeaf(true);
      ++btree.hashedPagesCount;
    }
    if (isHashedLeaf()) {
      int index=hashInsertionIndex(valueHC);
      if (index < 0) {
        index=-index - 1;
      }
      setKeyAt(index,valueHC);
      hashSetState(index,HASH_FULL);
      setAddressAt(index,newValueId);
      setChildrenCount((short)(recordCount + 1));
      return;
    }
  }
  int medianKeyInParent=search(valueHC);
  if (doSanityCheck)   myAssert(medianKeyInParent < 0);
  int index=-medianKeyInParent - 1;
  setChildrenCount((short)(recordCount + 1));
  final int itemsToMove=recordCount - index;
  btree.movedMembersCount+=itemsToMove;
  if (indexLeaf) {
    if (btree.isLarge && itemsToMove > LARGE_MOVE_THRESHOLD) {
      ByteBuffer buffer=getBytes(indexToOffset(index),itemsToMove * INTERIOR_SIZE);
      putBytes(indexToOffset(index + 1),buffer);
    }
 else {
      for (int i=recordCount - 1; i >= index; --i) {
        setKeyAt(i + 1,keyAt(i));
        setAddressAt(i + 1,addressAt(i));
      }
    }
    setKeyAt(index,valueHC);
    setAddressAt(index,newValueId);
  }
 else {
    setAddressAt(recordCount + 1,addressAt(recordCount));
    if (btree.isLarge && itemsToMove > LARGE_MOVE_THRESHOLD) {
      int elementsAfterIndex=recordCount - index - 1;
      if (elementsAfterIndex > 0) {
        ByteBuffer buffer=getBytes(indexToOffset(index + 1),elementsAfterIndex * INTERIOR_SIZE);
        putBytes(indexToOffset(index + 2),buffer);
      }
    }
 else {
      for (int i=recordCount - 1; i > index; --i) {
        setKeyAt(i + 1,keyAt(i));
        setAddressAt(i + 1,addressAt(i));
      }
    }
    if (index < recordCount)     setKeyAt(index + 1,keyAt(index));
    setKeyAt(index,valueHC);
    setAddressAt(index + 1,newValueId);
  }
  if (doSanityCheck) {
    if (index > 0)     myAssert(keyAt(index - 1) < keyAt(index));
    if (index < recordCount)     myAssert(keyAt(index) < keyAt(index + 1));
  }
}
