{
  int hash, probe, index;
  final int length=btree.hashPageCapacity;
  hash=hash(value) & 0x7fffffff;
  index=hash % length;
  int state=hashGetState(index);
  int total=0;
  btree.hashSearchRequests++;
  if (state != HASH_FREE && (state == HASH_REMOVED || keyAt(index) != value)) {
    probe=1 + (hash % (length - 2));
    do {
      index-=probe;
      if (index < 0) {
        index+=length;
      }
      state=hashGetState(index);
      ++total;
      if (total > length) {
        throw new IllegalStateException("Index corrupted");
      }
    }
 while (state != HASH_FREE && (state == HASH_REMOVED || keyAt(index) != value));
  }
  btree.maxStepsSearchedInHash=Math.max(btree.maxStepsSearchedInHash,total);
  btree.totalHashStepsSearched+=total;
  return state == HASH_FREE ? -1 : index;
}
