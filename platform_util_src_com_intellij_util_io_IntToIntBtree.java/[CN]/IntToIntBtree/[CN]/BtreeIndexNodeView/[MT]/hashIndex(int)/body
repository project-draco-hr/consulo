{
  int hash, index;
  final int length=btree.hashPageCapacity;
  hash=value & 0x7fffffff;
  index=hash % length;
  int keyAtIndex=keyAt(index);
  int total=0;
  btree.hashSearchRequests++;
  if (useDoubleHash) {
    if (keyAtIndex != value && keyAtIndex != HASH_FREE) {
      final int probe=1 + (hash % (length - 2));
      do {
        index-=probe;
        if (index < 0)         index+=length;
        keyAtIndex=keyAt(index);
        ++total;
        if (total > length) {
          throw new IllegalStateException("Index corrupted");
        }
      }
 while (keyAtIndex != value && keyAtIndex != HASH_FREE);
    }
  }
 else {
    while (keyAtIndex != value && keyAtIndex != HASH_FREE) {
      if (index == 0)       index=length;
      --index;
      keyAtIndex=keyAt(index);
      ++total;
      if (total > length)       throw new IllegalStateException("Index corrupted");
    }
  }
  btree.maxStepsSearchedInHash=Math.max(btree.maxStepsSearchedInHash,total);
  btree.totalHashStepsSearched+=total;
  return keyAtIndex == HASH_FREE ? -index - 1 : index;
}
