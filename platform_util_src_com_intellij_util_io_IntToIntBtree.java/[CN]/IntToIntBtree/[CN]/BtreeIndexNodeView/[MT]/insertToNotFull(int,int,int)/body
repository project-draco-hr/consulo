{
  short recordCount=getChildrenCount();
  if (doSanityCheck)   myAssert(recordCount < getMaxChildrenCount());
  setChildrenCount((short)(recordCount + 1));
  if (isIndexLeaf()) {
    if (btree.isLarge) {
      final int bytesToMove=(recordCount - index) * INTERIOR_SIZE;
      getBytes(indexToOffset(index),btree.buffer,0,bytesToMove);
      putBytes(indexToOffset(index + 1),btree.buffer,0,bytesToMove);
    }
 else {
      for (int i=recordCount - 1; i >= index; --i) {
        setKeyAt(i + 1,keyAt(i));
        setAddressAt(i + 1,addressAt(i));
      }
    }
    setKeyAt(index,valueHC);
    setAddressAt(index,newValueId);
  }
 else {
    setAddressAt(recordCount + 1,addressAt(recordCount));
    if (btree.isLarge) {
      int elementsAfterIndex=recordCount - index - 1;
      if (elementsAfterIndex > 0) {
        int bytesToMove=elementsAfterIndex * INTERIOR_SIZE;
        getBytes(indexToOffset(index + 1),btree.buffer,0,bytesToMove);
        putBytes(indexToOffset(index + 2),btree.buffer,0,bytesToMove);
      }
    }
 else {
      for (int i=recordCount - 1; i > index; --i) {
        setKeyAt(i + 1,keyAt(i));
        setAddressAt(i + 1,addressAt(i));
      }
    }
    if (index < recordCount)     setKeyAt(index + 1,keyAt(index));
    setKeyAt(index,valueHC);
    setAddressAt(index + 1,newValueId);
  }
  if (doSanityCheck) {
    if (index > 0)     myAssert(keyAt(index - 1) < keyAt(index));
    if (index < recordCount)     myAssert(keyAt(index) < keyAt(index + 1));
  }
  sync();
}
