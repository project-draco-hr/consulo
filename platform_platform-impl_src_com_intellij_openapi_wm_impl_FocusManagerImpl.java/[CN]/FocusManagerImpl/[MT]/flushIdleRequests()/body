{
  int currentModalityCount=getCurrentModalityCount();
  try {
    incFlushingRequests(1,currentModalityCount);
    final KeyEvent[] events=myToDispatchOnDone.toArray(new KeyEvent[myToDispatchOnDone.size()]);
    if (events.length > 0) {
      IdeEventQueue.getInstance().getKeyEventDispatcher().resetState();
    }
    boolean keyWasPressed=false;
    for (    KeyEvent each : events) {
      if (!isFocusTransferReady())       break;
      if (!keyWasPressed) {
        if (each.getID() == KeyEvent.KEY_PRESSED) {
          keyWasPressed=true;
        }
 else {
          myToDispatchOnDone.remove(each);
          continue;
        }
      }
      Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
      if (owner == null) {
        owner=JOptionPane.getRootFrame();
      }
      KeyEvent keyEvent=new KeyEvent(owner,each.getID(),each.getWhen(),each.getModifiersEx(),each.getKeyCode(),each.getKeyChar(),each.getKeyLocation());
      myToDispatchOnDone.remove(each);
      if (owner != null && SwingUtilities.getWindowAncestor(owner) != null) {
        IdeEventQueue.getInstance().dispatchEvent(keyEvent);
      }
 else {
        myQueue._dispatchEvent(keyEvent,true);
      }
    }
    if (isPendingKeyEventsRedispatched()) {
      boolean focusOk=getFocusOwner() != null;
      if (!focusOk && myRestoreFocusOnFlushCmd != null) {
        FocusCommand cmd=myRestoreFocusOnFlushCmd;
        ActionCallback cb=myRestoreFocusOnFlushCallback;
        myRestoreFocusOnFlushCmd=null;
        myRestoreFocusOnFlushCallback=null;
        requestFocus(cmd,true).notify(cb);
      }
 else {
        boolean noNeedToFixFocus=focusOk || myFlushWasDelayedToFixFocusByDefaultRequest;
        if (!noNeedToFixFocus) {
          IdeEventQueue.getInstance().fixStickyFocusedComponents(null);
          myFlushWasDelayedToFixFocusByDefaultRequest=true;
        }
        if (canFlushIdleRequests() && getFlushingIdleRequests() <= 1 && (noNeedToFixFocus || !myFlushWasDelayedToFixFocusByDefaultRequest)) {
          myFlushWasDelayedToFixFocusByDefaultRequest=false;
          flushNow();
        }
      }
    }
  }
  finally {
    incFlushingRequests(-1,currentModalityCount);
    if (!isIdleQueueEmpty()) {
      restartIdleAlarm();
    }
  }
}
