{
  try {
    myFlushingIdleRequestsEntryCount++;
    final KeyEvent[] events=myToDispatchOnDone.toArray(new KeyEvent[myToDispatchOnDone.size()]);
    if (events.length > 0) {
      IdeEventQueue.getInstance().getKeyEventDispatcher().resetState();
    }
    boolean keyWasPressed=false;
    for (    KeyEvent each : events) {
      if (!isFocusTransferReady())       break;
      if (!keyWasPressed) {
        if (each.getID() == KeyEvent.KEY_PRESSED) {
          keyWasPressed=true;
        }
 else {
          myToDispatchOnDone.remove(each);
          continue;
        }
      }
      Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
      if (owner == null) {
        owner=JOptionPane.getRootFrame();
      }
      KeyEvent keyEvent=new KeyEvent(owner,each.getID(),each.getWhen(),each.getModifiersEx(),each.getKeyCode(),each.getKeyChar(),each.getKeyLocation());
      myToDispatchOnDone.remove(each);
      if (owner != null && SwingUtilities.getWindowAncestor(owner) != null) {
        IdeEventQueue.getInstance().dispatchEvent(keyEvent);
      }
 else {
        myQueue._dispatchEvent(keyEvent,true);
      }
    }
    if (isPendingKeyEventsRedispatched()) {
      final Runnable[] all=myIdleRequests.toArray(new Runnable[myIdleRequests.size()]);
      myIdleRequests.clear();
      for (      Runnable each : all) {
        each.run();
      }
    }
  }
  finally {
    myFlushingIdleRequestsEntryCount--;
    if (!isIdleQueueEmpty()) {
      restartIdleAlarm();
    }
  }
}
