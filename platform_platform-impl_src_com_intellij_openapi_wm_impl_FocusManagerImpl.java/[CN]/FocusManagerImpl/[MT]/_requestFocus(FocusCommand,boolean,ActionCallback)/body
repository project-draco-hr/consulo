{
  result.doWhenProcessed(new Runnable(){
    @Override public void run(){
      FocusManagerImpl.this.maybeRemoveFocusActivity();
    }
  }
);
  if (checkForRejectOrByPass(command,forced,result))   return;
  setCommand(command);
  command.setCallback(result);
  if (forced) {
    myForcedFocusRequestsAlarm.cancelAllRequests();
    setLastEffectiveForcedRequest(command);
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (FocusManagerImpl.this.checkForRejectOrByPass(command,forced,result))       return;
      if (myRequestFocusCmd == command) {
        final TimedOutCallback focusTimeout=new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"),"Focus command timed out, cmd=" + command,command.getAllocation(),true){
          @Override protected void onTimeout(){
            forceFinishFocusSettleDown(command,result);
          }
        }
;
        if (command.invalidatesRequestors()) {
          myCmdTimestamp++;
        }
        FocusManagerImpl.this.revalidateFurtherRequestors();
        if (forced) {
          if (command.invalidatesRequestors()) {
            myForcedCmdTimestamp++;
          }
          FocusManagerImpl.this.revalidateFurtherRequestors();
        }
        command.setForced(forced);
        command.run().doWhenDone(new Runnable(){
          @Override public void run(){
            UIUtil.invokeLaterIfNeeded(new Runnable(){
              @Override public void run(){
                FocusManagerImpl.this.resetCommand(command,false);
                result.setDone();
              }
            }
);
          }
        }
).doWhenRejected(new Runnable(){
          @Override public void run(){
            result.setRejected();
            FocusManagerImpl.this.resetCommand(command,true);
          }
        }
).doWhenProcessed(new Runnable(){
          @Override public void run(){
            if (forced) {
              myForcedFocusRequestsAlarm.addRequest(new SetLastEffectiveRunnable(),250);
            }
          }
        }
).notify(focusTimeout);
      }
 else {
        FocusManagerImpl.this.rejectCommand(command,result);
      }
    }
  }
);
}
