{
  if (checkForRejectOrByPass(command,forced,result))   return;
  setCommand(command);
  command.setCallback(result);
  if (forced) {
    myForcedFocusRequestsAlarm.cancelAllRequests();
    setLastEffectiveForcedRequest(command);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (checkForRejectOrByPass(command,forced,result))       return;
      if (myRequestFocusCmd == command) {
        final ActionCallback.TimedOut focusTimeout=new ActionCallback.TimedOut(Registry.intValue("actionSystem.commandProcessingTimeout"),"Focus command timed out, cmd=" + command,command.getAllocation(),true){
          @Override protected void onTimeout(){
            forceFinishFocusSettledown(command,result);
          }
        }
;
        if (command.invalidatesRequestors()) {
          myCmdTimestamp++;
        }
        revalidateFurtherRequestors();
        if (forced) {
          if (command.invalidatesRequestors()) {
            myForcedCmdTimestamp++;
          }
          revalidateFurtherRequestors();
        }
        command.run().doWhenDone(new Runnable(){
          public void run(){
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                resetCommand(command,false);
                result.setDone();
              }
            }
);
          }
        }
).doWhenRejected(new Runnable(){
          public void run(){
            result.setRejected();
            resetCommand(command,true);
          }
        }
).doWhenProcessed(new Runnable(){
          public void run(){
            if (forced) {
              myForcedFocusRequestsAlarm.addRequest(new EdtRunnable(){
                public void runEdt(){
                  setLastEffectiveForcedRequest(null);
                }
              }
,250);
            }
          }
        }
).notify(focusTimeout);
      }
 else {
        rejectCommand(command,result);
      }
    }
  }
);
}
