{
  JavaResolveResult result;
  try {
    result=ref.advancedResolve(true);
  }
 catch (  IndexNotReadyException e) {
    return null;
  }
  PsiElement resolved=result.getElement();
  PsiElement parent=ref.getParent();
  if (parent instanceof PsiJavaCodeReferenceElement || ref.isQualified()) {
    if (myRefCountHolder != null) {
      myRefCountHolder.registerReference(ref,result);
    }
    myHolder.add(HighlightUtil.checkReference(ref,result));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkAbstractInstantiation(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkExtendsDuplicate(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkClassExtendsForeignInnerClass(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkSelectStaticClassFromParameterizedType(resolved,ref));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,ref,result.getSubstitutor()));
  if (resolved != null && parent instanceof PsiReferenceList) {
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightUtil.checkElementInReferenceList(ref,(PsiReferenceList)parent,result));
  }
  if (parent instanceof PsiAnonymousClass && ref.equals(((PsiAnonymousClass)parent).getBaseClassReference())) {
    myHolder.add(GenericsHighlightUtil.checkOverrideEquivalentMethods((PsiClass)parent));
  }
  if (resolved instanceof PsiVariable) {
    PsiVariable variable=(PsiVariable)resolved;
    final PsiClass containingClass=PsiTreeUtil.getParentOfType(ref,PsiClass.class);
    if (containingClass instanceof PsiAnonymousClass && !PsiTreeUtil.isAncestor(containingClass,variable,false) && !(variable instanceof PsiField)) {
      if (!PsiTreeUtil.isAncestor(((PsiAnonymousClass)containingClass).getArgumentList(),ref,false)) {
        myHolder.add(HighlightInfo.createHighlightInfo(HighlightInfoType.IMPLICIT_ANONYMOUS_CLASS_PARAMETER,ref,null));
      }
    }
    if (variable instanceof PsiParameter && ref instanceof PsiExpression && PsiUtil.isAccessedForWriting((PsiExpression)ref)) {
      myReassignedParameters.put((PsiParameter)variable,2);
    }
    final EditorColorsScheme colorsScheme=myHolder.getColorsScheme();
    if (!variable.hasModifierProperty(PsiModifier.FINAL) && isReassigned(variable)) {
      myHolder.add(HighlightNamesUtil.highlightReassignedVariable(variable,ref));
    }
 else {
      myHolder.add(HighlightNamesUtil.highlightVariableName(variable,ref.getReferenceNameElement(),colorsScheme));
    }
    myHolder.add(HighlightNamesUtil.highlightClassNameInQualifier(ref,colorsScheme));
  }
 else {
    highlightReferencedMethodOrClassName(ref,resolved);
  }
  if (!myHolder.hasErrorResults() && resolved instanceof PsiClass) {
    final PsiClass aClass=((PsiClass)resolved).getContainingClass();
    if (aClass != null) {
      final PsiElement qualifier=ref.getQualifier();
      final PsiElement place;
      if (qualifier instanceof PsiJavaCodeReferenceElement) {
        place=((PsiJavaCodeReferenceElement)qualifier).resolve();
      }
 else {
        if (parent instanceof PsiNewExpression) {
          final PsiExpression newQualifier=((PsiNewExpression)parent).getQualifier();
          if (newQualifier != null) {
            place=PsiUtil.resolveClassInType(newQualifier.getType());
          }
 else {
            place=ref;
          }
        }
 else {
          place=ref;
        }
      }
      if (PsiTreeUtil.isAncestor(aClass,place,false) && aClass.hasTypeParameters()) {
        myHolder.add(HighlightClassUtil.checkCreateInnerClassFromStaticContext(ref,place,(PsiClass)resolved));
      }
    }
  }
  return result;
}
