{
  super.visitModifierList(list);
  PsiElement parent=list.getParent();
  if (!myHolder.hasErrorResults() && parent instanceof PsiMethod) {
    myHolder.add(HighlightMethodUtil.checkMethodCanHaveBody((PsiMethod)parent));
  }
  if (parent instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)parent;
    MethodSignatureBackedByPsiMethod methodSignature=MethodSignatureBackedByPsiMethod.create(method,PsiSubstitutor.EMPTY);
    if (!method.isConstructor()) {
      try {
        List<HierarchicalMethodSignature> superMethodSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
        if (!superMethodSignatures.isEmpty()) {
          if (!myHolder.hasErrorResults())           myHolder.add(HighlightMethodUtil.checkMethodIncompatibleReturnType(methodSignature,superMethodSignatures,true));
          if (!myHolder.hasErrorResults())           myHolder.add(HighlightMethodUtil.checkMethodIncompatibleThrows(methodSignature,superMethodSignatures,true,method.getContainingClass()));
          if (!method.hasModifierProperty(PsiModifier.STATIC)) {
            if (!myHolder.hasErrorResults())             myHolder.add(HighlightMethodUtil.checkMethodWeakerPrivileges(methodSignature,superMethodSignatures,true));
            if (!myHolder.hasErrorResults())             myHolder.add(HighlightMethodUtil.checkMethodOverridesFinal(methodSignature,superMethodSignatures));
          }
        }
      }
 catch (      IndexNotReadyException ignored) {
      }
    }
    PsiClass aClass=method.getContainingClass();
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkMethodMustHaveBody(method,aClass));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkDuplicateMethod(aClass,method));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkConstructorCallsBaseClassConstructor(method,myRefCountHolder,myResolveHelper));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkStaticMethodOverride(method));
  }
 else   if (parent instanceof PsiClass) {
    PsiClass aClass=(PsiClass)parent;
    try {
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightClassUtil.checkDuplicateNestedClass(aClass));
      if (!myHolder.hasErrorResults()) {
        TextRange textRange=HighlightNamesUtil.getClassDeclarationTextRange(aClass);
        myHolder.add(HighlightClassUtil.checkClassMustBeAbstract(aClass,textRange));
      }
      if (!myHolder.hasErrorResults()) {
        myHolder.add(HighlightClassUtil.checkClassDoesNotCallSuperConstructorOrHandleExceptions(aClass,myRefCountHolder,myResolveHelper));
      }
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkOverrideEquivalentInheritedMethods(aClass));
      if (!myHolder.hasErrorResults())       myHolder.add(GenericsHighlightUtil.checkOverrideEquivalentMethods(aClass));
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightClassUtil.checkCyclicInheritance(aClass));
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
 else   if (parent instanceof PsiEnumConstant) {
    if (!myHolder.hasErrorResults())     myHolder.addAll(GenericsHighlightUtil.checkEnumConstantModifierList(list));
  }
}
