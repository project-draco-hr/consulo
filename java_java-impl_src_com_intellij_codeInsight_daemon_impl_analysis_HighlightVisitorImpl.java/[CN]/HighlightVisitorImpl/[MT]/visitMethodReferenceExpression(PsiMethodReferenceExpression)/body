{
  myHolder.add(HighlightUtil.checkMethodReferencesFeature(expression));
  JavaResolveResult result;
  try {
    result=expression.advancedResolve(true);
  }
 catch (  IndexNotReadyException e) {
    return;
  }
  if (myRefCountHolder != null) {
    myRefCountHolder.registerReference(expression,result);
  }
  if (result.getElement() != null && !result.isAccessible()) {
    final String accessProblem=HighlightUtil.buildProblemWithAccessDescription(expression,result);
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(accessProblem).create();
    myHolder.add(info);
  }
  if (!myHolder.hasErrorResults()) {
    final PsiType functionalInterfaceType=expression.getFunctionalInterfaceType();
    if (functionalInterfaceType != null && LambdaUtil.dependsOnTypeParams(functionalInterfaceType,functionalInterfaceType,expression)) {
      HighlightInfo result1=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip("Cyclic inference").create();
      myHolder.add(result1);
    }
 else {
      final PsiElement referenceNameElement=expression.getReferenceNameElement();
      if (referenceNameElement instanceof PsiKeyword) {
        if (!PsiMethodReferenceUtil.isValidQualifier(expression)) {
          final PsiElement qualifier=expression.getQualifier();
          String description="Cannot find class " + qualifier.getText();
          HighlightInfo result1=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(description).create();
          myHolder.add(result1);
        }
      }
    }
    if (!myHolder.hasErrorResults()) {
      final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
      final PsiClass psiClass=resolveResult.getElement();
      if (psiClass != null && !PsiUtil.isAccessible(psiClass,expression,null)) {
        myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(HighlightUtil.buildProblemWithAccessDescription(expression,resolveResult)).create());
      }
    }
  }
  if (!myHolder.hasErrorResults()) {
    myHolder.add(HighlightUtil.checkUnhandledExceptions(expression,expression.getTextRange()));
  }
}
