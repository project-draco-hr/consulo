{
  PsiElement parent=element.getParent();
  if (parent instanceof PsiReferenceExpression || parent instanceof PsiJavaCodeReferenceElement) {
    return;
  }
  final EditorColorsScheme colorsScheme=myHolder.getColorsScheme();
  if (parent instanceof PsiMethodCallExpression) {
    PsiMethod method=((PsiMethodCallExpression)parent).resolveMethod();
    PsiElement methodNameElement=element.getReferenceNameElement();
    if (method != null && methodNameElement != null && !(methodNameElement instanceof PsiKeyword)) {
      myHolder.add(HighlightNamesUtil.highlightMethodName(method,methodNameElement,false,colorsScheme));
      myHolder.add(HighlightNamesUtil.highlightClassNameInQualifier(element,colorsScheme));
    }
  }
 else   if (parent instanceof PsiConstructorCall) {
    try {
      PsiMethod method=((PsiConstructorCall)parent).resolveConstructor();
      if (method == null) {
        if (resolved instanceof PsiClass) {
          myHolder.add(HighlightNamesUtil.highlightClassName((PsiClass)resolved,element,colorsScheme));
        }
      }
 else {
        final PsiElement referenceNameElement=element.getReferenceNameElement();
        if (referenceNameElement != null) {
          myHolder.add(HighlightNamesUtil.highlightMethodName(method,referenceNameElement,false,colorsScheme));
        }
      }
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
 else   if (parent instanceof PsiImportStatement && ((PsiImportStatement)parent).isOnDemand()) {
    myHolder.add(HighlightNamesUtil.highlightClassName(null,element,colorsScheme));
  }
 else   if (resolved instanceof PsiClass) {
    myHolder.add(HighlightNamesUtil.highlightClassName((PsiClass)resolved,element,colorsScheme));
  }
}
