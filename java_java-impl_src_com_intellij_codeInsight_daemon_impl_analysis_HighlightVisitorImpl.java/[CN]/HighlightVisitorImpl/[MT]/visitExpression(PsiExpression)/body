{
  ProgressManager.checkCanceled();
  super.visitExpression(expression);
  PsiType type=expression.getType();
  if (myHolder.add(HighlightUtil.checkMustBeBoolean(expression,type)))   return;
  PsiExpression indexExpression;
  if (expression instanceof PsiArrayAccessExpression && (indexExpression=((PsiArrayAccessExpression)expression).getIndexExpression()) != null) {
    PsiExpression arrayExpression=((PsiArrayAccessExpression)expression).getArrayExpression();
    myHolder.add(HighlightUtil.checkValidArrayAccessExpression(arrayExpression,indexExpression,indexExpression.getType()));
  }
  if (expression.getParent() instanceof PsiNewExpression && ((PsiNewExpression)expression.getParent()).getQualifier() != expression && ((PsiNewExpression)expression.getParent()).getArrayInitializer() != expression) {
    myHolder.add(HighlightUtil.checkValidArrayAccessExpression(null,expression,type));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightControlFlowUtil.checkCannotWriteToFinal(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkVariableExpected(expression));
  if (!myHolder.hasErrorResults())   myHolder.addAll(HighlightUtil.checkArrayInitializer(expression,type));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkTernaryOperatorConditionIsBoolean(expression,type));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkAssertOperatorTypes(expression,type));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkSynchronizedExpressionType(expression,type));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkConditionalExpressionBranchTypesMatch(expression,type));
  if (!myHolder.hasErrorResults() && expression.getParent() instanceof PsiThrowStatement && ((PsiThrowStatement)expression.getParent()).getException() == expression) {
    myHolder.add(HighlightUtil.checkMustBeThrowable(type,expression,true));
  }
  if (!myHolder.hasErrorResults()) {
    myHolder.add(AnnotationsHighlightUtil.checkConstantExpression(expression));
  }
}
