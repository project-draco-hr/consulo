{
  final ClassLoader loader=ClassloaderUtil.class.getClassLoader();
  if (loader instanceof URLClassLoader) {
    URLClassLoader urlClassLoader=(URLClassLoader)loader;
    ContainerUtil.addAll(aClasspathElements,urlClassLoader.getURLs());
  }
 else {
    try {
      Class antClassLoaderClass=Class.forName("org.apache.tools.ant.AntClassLoader");
      if (antClassLoaderClass.isInstance(loader) || loader.getClass().getName().equals("org.apache.tools.ant.AntClassLoader") || loader.getClass().getName().equals("org.apache.tools.ant.loader.AntClassLoader2")) {
        final String classpath=(String)antClassLoaderClass.getDeclaredMethod("getClasspath",ArrayUtil.EMPTY_CLASS_ARRAY).invoke(loader,ArrayUtil.EMPTY_OBJECT_ARRAY);
        final StringTokenizer tokenizer=new StringTokenizer(classpath,File.separator,false);
        while (tokenizer.hasMoreTokens()) {
          final String token=tokenizer.nextToken();
          aClasspathElements.add(new File(token).toURI().toURL());
        }
      }
 else {
        getLogger().warn("Unknown classloader: " + loader.getClass().getName());
      }
    }
 catch (    ClassCastException e) {
      getLogger().warn("Unknown classloader [CCE]: " + e.getMessage());
    }
catch (    ClassNotFoundException e) {
      getLogger().warn("Unknown classloader [CNFE]: " + loader.getClass().getName());
    }
catch (    NoSuchMethodException e) {
      getLogger().warn("Unknown classloader [NSME]: " + e.getMessage());
    }
catch (    IllegalAccessException e) {
      getLogger().warn("Unknown classloader [IAE]: " + e.getMessage());
    }
catch (    InvocationTargetException e) {
      getLogger().warn("Unknown classloader [ITE]: " + e.getMessage());
    }
  }
}
