{
  PathManager.loadProperties();
  try {
    addParentClasspath(classpathElements);
    addIDEALibraries(classpathElements);
    addAdditionalClassPath(classpathElements);
    if (SystemInfo.isMac) {
      addDeployJar(classpathElements);
    }
  }
 catch (  IllegalArgumentException e) {
    if (Main.isHeadless()) {
      getLogger().error(e);
    }
 else {
      JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),e.getMessage(),ERROR,JOptionPane.INFORMATION_MESSAGE);
    }
    System.exit(1);
  }
catch (  MalformedURLException e) {
    if (Main.isHeadless()) {
      getLogger().error(e.getMessage());
    }
 else {
      JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),e.getMessage(),ERROR,JOptionPane.INFORMATION_MESSAGE);
    }
    System.exit(1);
  }
  filterClassPath(classpathElements);
  UrlClassLoader newClassLoader=null;
  try {
    newClassLoader=new UrlClassLoader(classpathElements,null,true,true);
    if (!isLoadingOfExternalPluginsDisabled()) {
      try {
        StartupActionScriptManager.executeActionScript();
      }
 catch (      IOException e) {
        final String errorMessage="Error executing plugin installation script: " + e.getMessage();
        if (Main.isHeadless()) {
          System.out.println(errorMessage);
        }
 else {
          JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),errorMessage,ERROR,JOptionPane.INFORMATION_MESSAGE);
        }
      }
    }
    Thread.currentThread().setContextClassLoader(newClassLoader);
  }
 catch (  Exception e) {
    Logger logger=getLogger();
    if (logger == null) {
      e.printStackTrace(System.err);
    }
 else {
      logger.error(e);
    }
  }
  return newClassLoader;
}
