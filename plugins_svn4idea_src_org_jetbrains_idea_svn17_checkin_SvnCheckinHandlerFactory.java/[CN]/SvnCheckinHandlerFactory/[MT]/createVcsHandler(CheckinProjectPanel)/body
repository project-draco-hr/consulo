{
  final Project project=panel.getProject();
  final Collection<VirtualFile> commitRoots=panel.getRoots();
  return new CheckinHandler(){
    @Override public RefreshableOnComponent getBeforeCheckinConfigurationPanel(){
      return null;
    }
    @Override public void checkinSuccessful(){
      if (SvnConfiguration17.getInstance(project).isAutoUpdateAfterCommit()) {
        final VirtualFile[] roots=ProjectLevelVcsManager.getInstance(project).getRootsUnderVcs(SvnVcs17.getInstance(project));
        final List<FilePath> paths=new ArrayList<FilePath>();
        for (int i=0; i < roots.length; i++) {
          VirtualFile root=roots[i];
          boolean take=false;
          for (          VirtualFile commitRoot : commitRoots) {
            if (VfsUtil.isAncestor(root,commitRoot,false)) {
              take=true;
              break;
            }
          }
          if (!take)           continue;
          paths.add(new FilePathImpl(root));
        }
        if (paths.isEmpty())         return;
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            final JComponent frame=WindowManager.getInstance().getIdeFrame(project).getComponent();
            final AutoSvnUpdater updater=new AutoSvnUpdater(project,paths.toArray(new FilePath[paths.size()]));
            updater.getTemplatePresentation().setText(ActionInfo.UPDATE.getActionName());
            updater.actionPerformed(new AnActionEvent(null,DataManager.getInstance().getDataContext(frame),ActionPlaces.UNKNOWN,updater.getTemplatePresentation(),ActionManager.getInstance(),0));
          }
        }
,ModalityState.NON_MODAL);
      }
    }
  }
;
}
