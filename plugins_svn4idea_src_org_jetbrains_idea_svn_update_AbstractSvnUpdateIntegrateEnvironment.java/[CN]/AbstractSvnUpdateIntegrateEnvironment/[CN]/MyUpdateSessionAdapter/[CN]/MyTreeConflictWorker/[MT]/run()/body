{
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final FileGroup conflictedGroup=myUpdatedFiles.getGroupById(FileGroup.MERGED_WITH_TREE_CONFLICT);
  final Collection<String> conflictedFiles=conflictedGroup.getFiles();
  final Collection<VirtualFile> parents=new ArrayList<VirtualFile>();
  if ((conflictedFiles != null) && (!conflictedFiles.isEmpty())) {
    for (    final String conflictedFile : conflictedFiles) {
      final File file=new File(conflictedFile);
      final VirtualFile vfFile=lfs.refreshAndFindFileByIoFile(file);
      if (vfFile != null) {
        parents.add(vfFile);
        continue;
      }
      final File parent=file.getParentFile();
      VirtualFile vf=lfs.findFileByIoFile(parent);
      if (vf == null) {
        vf=lfs.refreshAndFindFileByIoFile(parent);
      }
      if (vf != null) {
        parents.add(vf);
      }
    }
  }
  if (!parents.isEmpty()) {
    RefreshQueue.getInstance().refresh(true,true,new Runnable(){
      public void run(){
        myDirtyScopeManager.filesDirty(null,parents);
      }
    }
,parents);
  }
}
