{
  final ArrayList<VcsException> exceptions=new ArrayList<VcsException>();
  ISVNEventHandler eventHandler=new UpdateEventHandler(myVcs,progressIndicator,updatedFiles);
  boolean totalUpdate=true;
  AbstractUpdateIntegrateCrawler crawler=createCrawler(eventHandler,totalUpdate,exceptions,updatedFiles);
  Collection<File> updatedRoots=new HashSet<File>();
  for (  FilePath contentRoot : contentRoots) {
    if (progressIndicator != null && progressIndicator.isCanceled()) {
      throw new ProcessCanceledException();
    }
    Collection<File> roots=SvnUtil.crawlWCRoots(contentRoot.getIOFile(),crawler,progressIndicator);
    updatedRoots.addAll(roots);
  }
  if (updatedRoots.isEmpty()) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myVcs.getProject(),SvnBundle.message("message.text.update.no.directories.found"),SvnBundle.message("messate.text.update.error"));
      }
    }
);
    return new UpdateSessionAdapter(Collections.<VcsException>emptyList(),true);
  }
  final FileGroup conflictedGroup=updatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID);
  final Collection<String> conflictedFiles=conflictedGroup.getFiles();
  return new UpdateSessionAdapter(exceptions,false){
    public void onRefreshFilesCompleted(){
      for (      FilePath contentRoot : contentRoots) {
        VcsDirtyScopeManager.getInstance(myVcs.getProject()).fileDirty(contentRoot);
      }
      if (conflictedFiles != null && !conflictedFiles.isEmpty() && !isDryRun()) {
        List<VirtualFile> vfFiles=new ArrayList<VirtualFile>();
        for (        final String conflictedFile : conflictedFiles) {
          @NonNls final String path="file://" + conflictedFile.replace(File.separatorChar,'/');
          VirtualFile vf=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
            @Nullable public VirtualFile compute(){
              return VirtualFileManager.getInstance().findFileByUrl(path);
            }
          }
);
          if (vf != null) {
            vf.getParent().refresh(true,false);
            VcsDirtyScopeManager.getInstance(myVcs.getProject()).fileDirty(vf);
            if (myVcs.equals(ProjectLevelVcsManager.getInstance(myVcs.getProject()).getVcsFor(vf))) {
              vfFiles.add(vf);
            }
          }
        }
        if (!vfFiles.isEmpty()) {
          final AbstractVcsHelper vcsHelper=AbstractVcsHelper.getInstance(myVcs.getProject());
          List<VirtualFile> mergedFiles=vcsHelper.showMergeDialog(vfFiles,new SvnMergeProvider(myVcs.getProject()));
          FileGroup mergedGroup=updatedFiles.getGroupById(FileGroup.MERGED_ID);
          for (          VirtualFile mergedFile : mergedFiles) {
            String path=FileUtil.toSystemDependentName(mergedFile.getPresentableUrl());
            VcsRevisionNumber revision=conflictedGroup.getRevision(myVcs.getProject(),path);
            conflictedGroup.remove(path);
            mergedGroup.add(path,myVcs,revision);
          }
        }
      }
    }
  }
;
}
