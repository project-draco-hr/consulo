{
  if (context.isNull()) {
    context.set(new SvnUpdateContext());
  }
  final ArrayList<VcsException> exceptions=new ArrayList<VcsException>();
  UpdateEventHandler eventHandler=new UpdateEventHandler(myVcs,progressIndicator,(SvnUpdateContext)context.get());
  eventHandler.setUpdatedFiles(updatedFiles);
  boolean totalUpdate=true;
  AbstractUpdateIntegrateCrawler crawler=createCrawler(eventHandler,totalUpdate,exceptions,updatedFiles);
  Collection<File> updatedRoots=new HashSet<File>();
  Arrays.sort(contentRoots,new Comparator<FilePath>(){
    public int compare(    FilePath o1,    FilePath o2){
      return SystemInfo.isFileSystemCaseSensitive ? o1.getPath().replace("/","\\").compareTo(o2.getPath().replace("/","\\")) : o1.getPath().replace("/","\\").compareToIgnoreCase(o2.getPath().replace("/","\\"));
    }
  }
);
  for (  FilePath contentRoot : contentRoots) {
    if (progressIndicator != null && progressIndicator.isCanceled()) {
      throw new ProcessCanceledException();
    }
    final File ioRoot=contentRoot.getIOFile();
    if (!((SvnUpdateContext)context.get()).shouldRunFor(ioRoot))     continue;
    Collection<File> roots=SvnUtil.crawlWCRoots(ioRoot,crawler,progressIndicator);
    updatedRoots.addAll(roots);
  }
  if (updatedRoots.isEmpty()) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myVcs.getProject(),SvnBundle.message("message.text.update.no.directories.found"),SvnBundle.message("messate.text.update.error"));
      }
    }
);
    return new UpdateSessionAdapter(Collections.<VcsException>emptyList(),true);
  }
  return new MyUpdateSessionAdapter(contentRoots,updatedFiles,exceptions);
}
