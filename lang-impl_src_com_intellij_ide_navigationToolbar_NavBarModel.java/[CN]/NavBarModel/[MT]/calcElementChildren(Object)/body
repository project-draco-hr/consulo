{
  final List<Object> result=new ArrayList<Object>();
  final Object rootElement=size() > 1 ? getElement(1) : null;
  if (!(object instanceof Project) && rootElement instanceof Module && ((Module)rootElement).isDisposed())   return result;
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if (object instanceof Project) {
    result.addAll(Arrays.asList(ApplicationManager.getApplication().runReadAction(new Computable<Module[]>(){
      public Module[] compute(){
        return ModuleManager.getInstance((Project)object).getModules();
      }
    }
)));
  }
 else   if (object instanceof Module) {
    Module module=(Module)object;
    if (!module.isDisposed()) {
      ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
      VirtualFile[] roots=moduleRootManager.getContentRoots();
      for (      final VirtualFile root : roots) {
        final PsiDirectory psiDirectory=ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory>(){
          public PsiDirectory compute(){
            return psiManager.findDirectory(root);
          }
        }
);
        if (psiDirectory != null) {
          result.add(psiDirectory);
        }
      }
    }
  }
 else   if (object instanceof PsiDirectoryContainer) {
    final PsiDirectoryContainer psiPackage=(PsiDirectoryContainer)object;
    final PsiDirectory[] psiDirectories=ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory[]>(){
      public PsiDirectory[] compute(){
        return rootElement instanceof Module ? psiPackage.getDirectories(GlobalSearchScope.moduleScope((Module)rootElement)) : psiPackage.getDirectories();
      }
    }
);
    for (    PsiDirectory psiDirectory : psiDirectories) {
      getDirectoryChildren(psiDirectory,rootElement,result);
    }
  }
 else   if (object instanceof PsiDirectory) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        getDirectoryChildren((PsiDirectory)object,rootElement,result);
      }
    }
);
  }
  Collections.sort(result,new SiblingsComparator());
  return result;
}
