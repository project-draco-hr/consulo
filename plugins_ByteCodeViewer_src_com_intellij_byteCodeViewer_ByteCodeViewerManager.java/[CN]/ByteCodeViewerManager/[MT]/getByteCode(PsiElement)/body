{
  PsiClass containingClass=getContainingClass(psiElement);
  if (containingClass == null)   return null;
  final String classVMName=getClassVMName(containingClass);
  if (classVMName == null)   return null;
  Module module=ModuleUtilCore.findModuleForPsiElement(psiElement);
  if (module == null) {
    final Project project=containingClass.getProject();
    final PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(classVMName,psiElement.getResolveScope());
    if (aClass != null) {
      final VirtualFile virtualFile=PsiUtilCore.getVirtualFile(aClass);
      if (virtualFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInLibraryClasses(virtualFile)) {
        try {
          return processClassFile(virtualFile.contentsToByteArray());
        }
 catch (        IOException e) {
          LOG.error(e);
        }
        return null;
      }
    }
    return null;
  }
  try {
    final PsiFile containingFile=containingClass.getContainingFile();
    final VirtualFile virtualFile=containingFile.getVirtualFile();
    if (virtualFile == null)     return null;
    final CompilerModuleExtension moduleExtension=CompilerModuleExtension.getInstance(module);
    if (moduleExtension == null)     return null;
    String classPath;
    if (ProjectRootManager.getInstance(module.getProject()).getFileIndex().isInTestSourceContent(virtualFile)) {
      final VirtualFile pathForTests=moduleExtension.getCompilerOutputPathForTests();
      if (pathForTests == null)       return null;
      classPath=pathForTests.getPath();
    }
 else {
      final VirtualFile compilerOutputPath=moduleExtension.getCompilerOutputPath();
      if (compilerOutputPath == null)       return null;
      classPath=compilerOutputPath.getPath();
    }
    classPath+="/" + classVMName.replace('.','/') + ".class";
    final File classFile=new File(classPath);
    if (!classFile.exists()) {
      LOG.info("search in: " + classPath);
      return null;
    }
    return processClassFile(FileUtil.loadFileBytes(classFile));
  }
 catch (  Exception e1) {
    LOG.error(e1);
  }
  return null;
}
