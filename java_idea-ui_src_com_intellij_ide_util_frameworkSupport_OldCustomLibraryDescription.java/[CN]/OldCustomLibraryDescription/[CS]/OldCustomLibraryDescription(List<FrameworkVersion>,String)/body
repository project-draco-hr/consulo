{
  super(defaultLibraryName);
  final List<FrameworkLibraryVersion> libraryVersions=new ArrayList<FrameworkLibraryVersion>();
  for (  FrameworkVersion version : versions) {
    List<DownloadableFileDescription> downloads=new ArrayList<DownloadableFileDescription>();
    for (    LibraryInfo info : version.getLibraries()) {
      final LibraryDownloadInfo downloadingInfo=info.getDownloadingInfo();
      if (downloadingInfo != null) {
        final DownloadableFileDescription element=new DownloadableFileDescriptionImpl(downloadingInfo.getDownloadUrl(),downloadingInfo.getFileNamePrefix(),downloadingInfo.getFileNameSuffix());
        downloads.add(element);
      }
    }
    libraryVersions.add(new FrameworkLibraryVersionImpl(version.getVersionName(),downloads,version.getLibraryName(),version));
  }
  myDownloadableDescription=!libraryVersions.isEmpty() ? new DownloadableLibraryDescriptionImpl(libraryVersions) : null;
  mySuitableLibraryCondition=new LibraryFilter(){
    @Override public boolean isSuitableLibrary(    @NotNull List<VirtualFile> classesRoots,    @Nullable LibraryType<?> type){
      for (      FrameworkVersion version : versions) {
        RequiredLibrariesInfo info=new RequiredLibrariesInfo(version.getLibraries());
        if (info.checkLibraries(classesRoots) == null) {
          return true;
        }
      }
      return false;
    }
  }
;
}
