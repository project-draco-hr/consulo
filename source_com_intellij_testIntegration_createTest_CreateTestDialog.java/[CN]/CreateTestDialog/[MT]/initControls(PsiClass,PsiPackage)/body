{
  ButtonGroup group=new ButtonGroup();
  String defaultLibrary=getDefaultLibraryName();
  for (  final TestFrameworkDescriptor descriptor : Extensions.getExtensions(TestFrameworkDescriptor.EXTENSION_NAME)) {
    final JRadioButton b=new JRadioButton(descriptor.getName());
    myLibraryButtons.add(b);
    group.add(b);
    if (descriptor.getName().equals(defaultLibrary)) {
      myDefaultLibraryButton=b;
    }
    b.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (b.isSelected())         onLibrarySelected(descriptor);
      }
    }
);
  }
  myFixLibraryButton=new JButton(CodeInsightBundle.message("intention.create.test.dialog.fix.library"));
  myFixLibraryButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          OrderEntryFix.addJarToRoots(mySelectedTestDescriptor.getLibraryPath(),myTargetModule);
        }
      }
);
      myFixLibraryPanel.setVisible(false);
    }
  }
);
  myTargetClassNameField=new JTextField(targetClass.getName() + "Test");
  setPreferredSize(myTargetClassNameField);
  myTargetClassNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      getOKAction().setEnabled(JavaPsiFacade.getInstance(myProject).getNameHelper().isIdentifier(getClassName()));
    }
  }
);
  mySuperClassField=JavaReferenceEditorUtil.createReferenceEditorWithBrowseButton(new MyChooseSuperClassAction(),"",PsiManager.getInstance(myProject),true);
  mySuperClassField.setMinimumSize(mySuperClassField.getPreferredSize());
  String targetPackageName=targetPackage != null ? targetPackage.getQualifiedName() : "";
  myTargetPackageField=new ReferenceEditorComboWithBrowseButton(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      doSelectPackage();
    }
  }
,targetPackageName,PsiManager.getInstance(myProject),false,RECENTS_KEY);
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      myTargetPackageField.getButton().doClick();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.SHIFT_DOWN_MASK)),myTargetPackageField.getChildComponent());
  myGenerateBeforeBox=new JCheckBox("setUp/@Before");
  myGenerateAfterBox=new JCheckBox("tearDown/@After");
  myShowInheritedMethodsBox=new JCheckBox(CodeInsightBundle.message("intention.create.test.dialog.show.inherited"));
  myShowInheritedMethodsBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateMethodsTable();
    }
  }
);
  restoreShowInheritedMembersStatus();
  myMethodsTable=new MemberSelectionTable(new MemberInfo[0],null);
  updateMethodsTable();
}
