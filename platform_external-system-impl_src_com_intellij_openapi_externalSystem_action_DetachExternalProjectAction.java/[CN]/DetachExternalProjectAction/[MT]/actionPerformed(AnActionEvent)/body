{
  ExternalActionUtil.MyInfo info=ExternalActionUtil.getProcessingInfo(e.getDataContext());
  if (info.settings == null || info.localSettings == null || info.externalProject == null || info.ideProject == null || info.externalSystemId == null) {
    return;
  }
  e.getPresentation().setText(ExternalSystemBundle.message("action.detach.external.project.text",info.externalSystemId.getReadableName()));
  ExternalSystemTasksTreeModel allTasksModel=ExternalSystemDataKeys.ALL_TASKS_MODEL.getData(e.getDataContext());
  if (allTasksModel != null) {
    allTasksModel.pruneNodes(info.externalProject);
  }
  ExternalSystemRecentTasksList recentTasksList=ExternalSystemDataKeys.RECENT_TASKS_LIST.getData(e.getDataContext());
  if (recentTasksList != null) {
    recentTasksList.getModel().forgetTasksFrom(info.externalProject.getPath());
  }
  info.localSettings.forgetExternalProjects(Collections.singleton(info.externalProject.getPath()));
  info.settings.unlinkExternalProject(info.externalProject.getPath());
  String externalSystemIdAsString=info.externalSystemId.toString();
  List<Module> orphanModules=ContainerUtilRt.newArrayList();
  for (  Module module : ModuleManager.getInstance(info.ideProject).getModules()) {
    String systemId=module.getOptionValue(ExternalSystemConstants.EXTERNAL_SYSTEM_ID_KEY);
    if (!externalSystemIdAsString.equals(systemId)) {
      continue;
    }
    String path=module.getOptionValue(ExternalSystemConstants.LINKED_PROJECT_PATH_KEY);
    if (info.externalProject.getPath().equals(path)) {
      orphanModules.add(module);
    }
  }
  if (!orphanModules.isEmpty()) {
    ExternalSystemUtil.ruleOrphanModules(orphanModules,info.ideProject,info.externalSystemId);
  }
}
