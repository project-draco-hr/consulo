{
  if (refMethod.isConstructor())   return null;
  if (refMethod.isLibraryOverride())   return null;
  if (!refMethod.getSuperMethods().isEmpty())   return null;
  String returnValue=refMethod.getReturnValueIfSame();
  if (returnValue != null) {
    final String message;
    if (refMethod.getDerivedMethods().isEmpty()) {
      message=InspectionsBundle.message("inspection.same.return.value.problem.descriptor","<code>" + returnValue + "</code>");
    }
 else     if (refMethod.hasBody()) {
      message=InspectionsBundle.message("inspection.same.return.value.problem.descriptor1","<code>" + returnValue + "</code>");
    }
 else {
      message=InspectionsBundle.message("inspection.same.return.value.problem.descriptor2","<code>" + returnValue + "</code>");
    }
    return new ProblemDescriptor[]{getManager().createProblemDescriptor(refMethod.getElement(),message,(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
  }
  return null;
}
