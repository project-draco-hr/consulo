{
  final PsiInstanceOfExpression conflictingInstanceof=(PsiInstanceOfExpression)infos[2];
  return new InspectionGadgetsFix[]{new ReplaceFix(conflictingInstanceof,(PsiType)infos[0]){
    protected void replace(    PsiTypeElement castTypeElement,    PsiTypeElement instanceofTypeElement,    Project project){
      castTypeElement.replace(JavaPsiFacade.getElementFactory(project).createTypeElement(instanceofTypeElement.getType()));
    }
    @NotNull public String getName(){
      return "Replace cast to \'" + myCastType.getPresentableText() + "\' with \'"+ myConflictingInstanceof.getCheckType().getType().getPresentableText()+ "\'";
    }
  }
,new ReplaceFix(conflictingInstanceof,(PsiType)infos[0]){
    protected void replace(    PsiTypeElement castTypeElement,    PsiTypeElement instanceofTypeElement,    Project project){
      instanceofTypeElement.replace(JavaPsiFacade.getElementFactory(project).createTypeElement(castTypeElement.getType()));
    }
    @NotNull public String getName(){
      return "Replace instanceof \'" + myConflictingInstanceof.getCheckType().getType().getPresentableText() + "\' with \'"+ myCastType.getPresentableText()+ "\'";
    }
  }
};
}
