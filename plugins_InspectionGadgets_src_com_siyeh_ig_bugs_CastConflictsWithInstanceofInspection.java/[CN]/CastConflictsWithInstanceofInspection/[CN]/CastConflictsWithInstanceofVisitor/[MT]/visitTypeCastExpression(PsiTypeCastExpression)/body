{
  super.visitTypeCastExpression(expression);
  final PsiTypeElement castTypeElement=expression.getCastType();
  if (castTypeElement == null) {
    return;
  }
  final PsiType castType=castTypeElement.getType();
  final PsiExpression operand=expression.getOperand();
  if (!(operand instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)operand;
  final InstanceofChecker checker=new InstanceofChecker(referenceExpression,castType);
  PsiElement parent=PsiTreeUtil.getParentOfType(expression,PsiBinaryExpression.class,PsiIfStatement.class,PsiConditionalExpression.class);
  while (parent != null) {
    parent.accept(checker);
    if (checker.hasAgreeingInstanceof()) {
      return;
    }
    parent=PsiTreeUtil.getParentOfType(parent,PsiBinaryExpression.class,PsiIfStatement.class,PsiConditionalExpression.class);
  }
  if (!checker.hasConflictingInstanceof()) {
    return;
  }
  registerError(expression,castType,operand);
}
