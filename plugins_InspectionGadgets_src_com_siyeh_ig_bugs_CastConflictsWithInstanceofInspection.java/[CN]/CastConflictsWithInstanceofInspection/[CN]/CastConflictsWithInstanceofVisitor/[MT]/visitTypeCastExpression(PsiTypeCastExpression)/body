{
  super.visitTypeCastExpression(expression);
  final PsiTypeElement castTypeElement=expression.getCastType();
  if (castTypeElement == null) {
    return;
  }
  final PsiType castType=expression.getType();
  if (castType == null) {
    return;
  }
  final PsiExpression operand=expression.getOperand();
  if (operand == null) {
    return;
  }
  if (!(operand instanceof PsiReferenceExpression)) {
    return;
  }
  boolean hasConflictingInstanceof=false;
  boolean hasConfirmingInstanceof=false;
  PsiIfStatement currentStatement=PsiTreeUtil.getParentOfType(expression,PsiIfStatement.class);
  while (currentStatement != null) {
    final PsiExpression condition=currentStatement.getCondition();
    if (condition instanceof PsiInstanceOfExpression) {
      final PsiInstanceOfExpression instanceOfCondition=(PsiInstanceOfExpression)condition;
      if (isConflicting(instanceOfCondition,operand,castType)) {
        hasConflictingInstanceof=true;
      }
 else       if (isConfirming(instanceOfCondition,operand,castType)) {
        hasConfirmingInstanceof=true;
      }
    }
    currentStatement=PsiTreeUtil.getParentOfType(currentStatement,PsiIfStatement.class);
  }
  if (hasConflictingInstanceof && !hasConfirmingInstanceof) {
    registerError(castTypeElement);
  }
}
