{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"cast".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (!"java.lang.Class".equals(qualifiedName)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!(qualifier instanceof PsiClassObjectAccessExpression)) {
    return;
  }
  final PsiClassObjectAccessExpression classObjectAccessExpression=(PsiClassObjectAccessExpression)qualifier;
  final PsiTypeElement operand=classObjectAccessExpression.getOperand();
  final PsiType castType=operand.getType();
  if (!(castType instanceof PsiClassType)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (!(argument instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;
  final PsiInstanceOfExpression conflictingInstanceof=InstanceOfUtils.getConflictingInstanceof(castType,referenceExpression,expression);
  if (conflictingInstanceof == null) {
    return;
  }
  final PsiTypeElement instanceofTypeElement=conflictingInstanceof.getCheckType();
  registerError(expression,referenceExpression,operand,instanceofTypeElement);
}
