{
  final PsiElement element=descriptor.getPsiElement();
  final PsiTypeElement castTypeElement;
  final PsiTypeElement instanceofTypeElement;
  if (element instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression typeCastExpression=(PsiTypeCastExpression)element;
    final PsiExpression operand=typeCastExpression.getOperand();
    if (!(operand instanceof PsiReferenceExpression)) {
      return;
    }
    castTypeElement=typeCastExpression.getCastType();
    if (castTypeElement == null) {
      return;
    }
    final PsiInstanceOfExpression conflictingInstanceof=InstanceOfUtils.getConflictingInstanceof(castTypeElement.getType(),(PsiReferenceExpression)operand,element);
    instanceofTypeElement=conflictingInstanceof.getCheckType();
    if (instanceofTypeElement == null) {
      return;
    }
    castTypeElement.replace(instanceofTypeElement);
  }
 else   if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    if (!(qualifier instanceof PsiClassObjectAccessExpression)) {
      return;
    }
    final PsiClassObjectAccessExpression classObjectAccessExpression=(PsiClassObjectAccessExpression)qualifier;
    castTypeElement=classObjectAccessExpression.getOperand();
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiExpression[] arguments=argumentList.getExpressions();
    if (arguments.length != 1) {
      return;
    }
    final PsiExpression argument=arguments[0];
    if (!(argument instanceof PsiReferenceExpression)) {
      return;
    }
    final PsiInstanceOfExpression conflictingInstanceof=InstanceOfUtils.getConflictingInstanceof(castTypeElement.getType(),(PsiReferenceExpression)argument,element);
    instanceofTypeElement=conflictingInstanceof.getCheckType();
    if (instanceofTypeElement == null) {
      return;
    }
  }
 else {
    return;
  }
  final PsiElement newElement=replace(castTypeElement,instanceofTypeElement);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  codeStyleManager.shortenClassReferences(newElement);
}
