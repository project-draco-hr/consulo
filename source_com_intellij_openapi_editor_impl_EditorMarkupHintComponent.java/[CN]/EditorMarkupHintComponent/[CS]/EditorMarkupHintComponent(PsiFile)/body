{
  super(new GridBagLayout());
  setBorder(BorderFactory.createEtchedBorder());
  myFile=file;
  mySliders=new JSlider[file instanceof JspFile ? file.getPsiRoots().length - 1 : 1];
  for (int i=0; i < mySliders.length; i++) {
    final Hashtable<Integer,JLabel> sliderLabels=new Hashtable<Integer,JLabel>();
    sliderLabels.put(new Integer(1),new JLabel("None"));
    sliderLabels.put(new Integer(2),new JLabel("Syntax"));
    sliderLabels.put(new Integer(3),new JLabel("Inspections"));
    final JSlider slider=new JSlider(JSlider.VERTICAL,1,3,3);
    slider.setLabelTable(sliderLabels);
    slider.putClientProperty("JSlider.isFilled",Boolean.TRUE);
    slider.setPaintLabels(true);
    slider.setSnapToTicks(true);
    slider.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        int value=slider.getValue();
        for (Enumeration<Integer> enumeration=sliderLabels.keys(); enumeration.hasMoreElements(); ) {
          Integer key=enumeration.nextElement();
          sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : new Color(100,100,100));
        }
      }
    }
);
    final PsiFile psiRoot=myFile.getPsiRoots()[i];
    slider.setValue(getValue(HighlightUtil.isRootHighlighted(psiRoot),HighlightUtil.isRootInspected(psiRoot)));
    mySliders[i]=slider;
  }
  final DaemonCodeAnalyzer analyzer=DaemonCodeAnalyzer.getInstance(myFile.getProject());
  myImportPopupOn=analyzer.isImportHintsEnabled(myFile);
  myImportPopupCheckBox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myImportPopupOn=myImportPopupCheckBox.isSelected();
    }
  }
);
  myImportPopupCheckBox.setSelected(myImportPopupOn);
  myImportPopupCheckBox.setEnabled(analyzer.isAutohintsAvailable(myFile));
  myImportPopupCheckBox.setMnemonic('I');
  ButtonGroup group=new ButtonGroup();
  group.add(myGoByErrorsRadioButton);
  group.add(myGoByBothRadioButton);
  myGoByErrors=DaemonCodeAnalyzerSettings.getInstance().NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST;
  final ChangeListener changeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myGoByErrors=myGoByErrorsRadioButton.isSelected();
    }
  }
;
  myGoByErrorsRadioButton.addChangeListener(changeListener);
  myGoByErrorsRadioButton.setMnemonic('F');
  myGoByBothRadioButton.addChangeListener(changeListener);
  myGoByErrorsRadioButton.setSelected(myGoByErrors);
  myGoByBothRadioButton.setSelected(!myGoByErrors);
  myGoByBothRadioButton.setMnemonic('N');
  GridBagConstraints gc=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  add(myImportPopupCheckBox,gc);
  myClearSettingsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=myFile.getProject();
      HighlightingSettingsPerFile.getInstance(project).resetAllFilesToUseGlobalProfile();
      DaemonCodeAnalyzer.getInstance(project).restart();
      myProfilesCombo.setSelectedItem(DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().getName());
      myProfilesCombo.setEnabled(false);
      myUsePerFileProfile.setSelected(false);
      for (int i=0; i < mySliders.length; i++) {
        final PsiFile psiRoot=myFile.getPsiRoots()[i];
        mySliders[i].setValue(getValue(HighlightUtil.isRootHighlighted(psiRoot),HighlightUtil.isRootInspected(psiRoot)));
      }
    }
  }
);
  myClearSettingsButton.setToolTipText("Make all project files to use global highlighting settings");
  myClearSettingsButton.setPreferredSize(new Dimension(GC_ICON.getIconWidth() + 4,GC_ICON.getIconHeight() + 4));
  add(myClearSettingsButton,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,2,0,2),0,0));
  JPanel navPanel=new JPanel(new BorderLayout());
  navPanel.add(myGoByErrorsRadioButton,BorderLayout.WEST);
  navPanel.add(myGoByBothRadioButton,BorderLayout.EAST);
  navPanel.setBorder(IdeBorderFactory.createTitledBorder("Errors Navigation"));
  gc.gridwidth=2;
  add(navPanel,gc);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorder("Highlighting Level"));
  panel.add(createInspectionProfilePanel(),new GridBagConstraints(0,0,mySliders.length,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  final boolean addLabel=mySliders.length > 1;
  if (addLabel) {
    layoutVertical(panel);
  }
 else {
    layoutHorizontal(panel);
  }
  gc.gridx=0;
  gc.gridy=2;
  gc.gridwidth=2;
  gc.weightx=1.0;
  gc.weighty=1.0;
  gc.fill=GridBagConstraints.BOTH;
  add(panel,gc);
}
