{
  JPanel profilePanel=new JPanel(new GridBagLayout());
  myUsePerFileProfile.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final boolean selected=myUsePerFileProfile.isSelected();
      myProfilesCombo.setEnabled(selected);
      myUseProfile=selected;
    }
  }
);
  myUsePerFileProfile.setMnemonic('C');
  final boolean usePerFileProfile=HighlightingSettingsPerFile.getInstance(myFile.getProject()).getInspectionProfile(myFile) != null;
  myUsePerFileProfile.setSelected(usePerFileProfile);
  profilePanel.add(myUsePerFileProfile,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  InspectionProfileManager inspectionManager=InspectionProfileManager.getInstance();
  final String[] avaliableProfileNames=inspectionManager.getAvaliableProfileNames();
  for (  String profile : avaliableProfileNames) {
    myProfilesCombo.addItem(profile);
  }
  myProfilesCombo.setSelectedItem(DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile(myFile).getName());
  myProfilesCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myProfile=(String)myProfilesCombo.getSelectedItem();
    }
  }
);
  myProfilesCombo.setEnabled(usePerFileProfile);
  profilePanel.add(myProfilesCombo,new GridBagConstraints(0,1,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,2),0,0));
  return profilePanel;
}
