{
  super(new BorderLayout());
  myProject=project;
  myStateBean=stateBean;
  final JLabel titleLabel=new JLabel();
  final CoverageSuitesBundle suitesBundle=dataManager.getCurrentSuitesBundle();
  myModel=new CoverageTableModel(suitesBundle,stateBean,project);
  myTable=new JBTable(myModel);
  final StatusText emptyText=myTable.getEmptyText();
  emptyText.setText("No coverage results.");
  final RunConfigurationBase configuration=suitesBundle.getRunConfiguration();
  if (configuration != null) {
    emptyText.appendText(" Click ");
    emptyText.appendText("Edit",SimpleTextAttributes.LINK_ATTRIBUTES,new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final String configurationName=configuration.getName();
        final RunnerAndConfigurationSettings configurationSettings=RunManagerEx.getInstanceEx(project).findConfigurationByName(configurationName);
        if (configurationSettings != null) {
          RunDialog.editConfiguration(project,configurationSettings,"Edit Run Configuration");
        }
 else {
          Messages.showErrorDialog(project,"Configuration \'" + configurationName + "\' was not found",CommonBundle.getErrorTitle());
        }
      }
    }
);
    emptyText.appendText(" to fix configuration settings.");
  }
  myTable.getColumnModel().getColumn(0).setCellRenderer(new NodeDescriptorTableCellRenderer());
  myTable.getTableHeader().setReorderingAllowed(false);
  JPanel centerPanel=new JPanel(new BorderLayout());
  centerPanel.add(ScrollPaneFactory.createScrollPane(myTable),BorderLayout.CENTER);
  centerPanel.add(titleLabel,BorderLayout.NORTH);
  add(centerPanel,BorderLayout.CENTER);
  final CoverageViewTreeStructure structure=new CoverageViewTreeStructure(project,suitesBundle,stateBean);
  myBuilder=new CoverageViewBuilder(project,new JBList(),myModel,structure,myTable);
  myBuilder.setParentTitle(titleLabel);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      drillDown(structure);
      return true;
    }
  }
.installOn(myTable);
  final TableSpeedSearch speedSearch=new TableSpeedSearch(myTable);
  speedSearch.setClearSearchOnNavigateNoMatch(true);
  PopupHandler.installUnknownPopupHandler(myTable,createPopupGroup(),ActionManager.getInstance());
  TableScrollingUtil.installActions(myTable);
  myTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (myBuilder == null)       return;
      myBuilder.buildRoot();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SLASH,SystemInfo.isMac ? InputEvent.META_MASK : InputEvent.CTRL_MASK),JComponent.WHEN_FOCUSED);
  myTable.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),ACTION_DRILL_DOWN);
  myTable.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,SystemInfo.isMac ? InputEvent.META_MASK : InputEvent.CTRL_MASK),ACTION_DRILL_DOWN);
  myTable.getActionMap().put(ACTION_DRILL_DOWN,new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      drillDown(structure);
    }
  }
);
  myTable.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,SystemInfo.isMac ? InputEvent.META_MASK : InputEvent.CTRL_MASK),ACTION_GO_UP);
  myTable.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0),ACTION_GO_UP);
  myTable.getActionMap().put(ACTION_GO_UP,new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      goUp();
    }
  }
);
  final JComponent component=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,createToolbarActions(structure),false).getComponent();
  add(component,BorderLayout.WEST);
}
