{
  Pair<MostlySingularMultiMap<String,AnnotationData>,Long> cached=annotationFileToDataAndModStamp.get(file);
  if (cached != null && cached.getSecond() == file.getModificationStamp()) {
    return cached.getFirst();
  }
  MostlySingularMultiMap<String,AnnotationData> data=new MostlySingularMultiMap<String,AnnotationData>();
  try {
    Document document=JDOMUtil.loadDocument(escapeAttributes(file.getText()));
    Element rootElement=document.getRootElement();
    if (rootElement != null) {
      boolean sorted=true;
      boolean modified=false;
      String prevItemName=null;
      for (      Element element : (List<Element>)rootElement.getChildren("item")) {
        String externalName=element.getAttributeValue("name");
        if (externalName == null) {
          element.detach();
          modified=true;
          continue;
        }
        if (prevItemName != null && prevItemName.compareTo(externalName) > 0) {
          sorted=false;
        }
        prevItemName=externalName;
        for (        Element annotationElement : (List<Element>)element.getChildren("annotation")) {
          String annotationFQN=annotationElement.getAttributeValue("name");
          if (StringUtil.isEmpty(annotationFQN))           continue;
          annotationFQN=intern(annotationFQN);
          List<Element> children=(List<Element>)annotationElement.getChildren();
          StringBuilder buf=new StringBuilder(children.size() * "name=value,".length());
          for (          Element annotationParameter : children) {
            if (buf.length() != 0) {
              buf.append(",");
            }
            String nameValue=annotationParameter.getAttributeValue("name");
            if (nameValue != null) {
              buf.append(nameValue);
              buf.append("=");
            }
            buf.append(annotationParameter.getAttributeValue("val"));
          }
          String annotationParameters=buf.length() == 0 ? "" : intern(buf.toString());
          for (          AnnotationData existingData : data.get(externalName)) {
            if (existingData.annotationClassFqName.equals(annotationFQN)) {
              LOG.error("Duplicate annotation '" + annotationFQN + "' for signature: '"+ externalName+ "' in the file "+ file.getVirtualFile().getPresentableUrl());
            }
          }
          AnnotationData annData=internAnnotationData(new AnnotationData(annotationFQN,annotationParameters,file.getVirtualFile()));
          data.add(externalName,annData);
        }
      }
      if (!sorted) {
        modified=true;
        List<Element> items=new ArrayList<Element>(rootElement.getChildren("item"));
        rootElement.removeChildren("item");
        Collections.sort(items,new Comparator<Element>(){
          @Override public int compare(          Element item1,          Element item2){
            String externalName1=item1.getAttributeValue("name");
            String externalName2=item2.getAttributeValue("name");
            return externalName1.compareTo(externalName2);
          }
        }
);
        for (        Element item : items) {
          rootElement.addContent(item);
        }
      }
      VirtualFile virtualFile=file.getVirtualFile();
      if (modified && virtualFile.isInLocalFileSystem() && virtualFile.isWritable()) {
        String lineSeparator=FileDocumentManager.getInstance().getLineSeparator(virtualFile,file.getProject());
        JDOMUtil.writeDocument(document,virtualFile.getPath(),lineSeparator);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
catch (  JDOMException e) {
    LOG.error(e);
  }
  if (data.isEmpty()) {
    data=MostlySingularMultiMap.emptyMap();
  }
  data.compact();
  Pair<MostlySingularMultiMap<String,AnnotationData>,Long> pair=Pair.create(data,file.getModificationStamp());
  annotationFileToDataAndModStamp.put(file,pair);
  return data;
}
