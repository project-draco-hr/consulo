{
  final PsiElement resolve=resolveElement();
  if (resolve instanceof PsiClass) {
    final Map<PsiTypeParameter,PsiType> substitutionMap=new HashMap<PsiTypeParameter,PsiType>();
    int index=0;
    for (    PsiTypeParameter parameter : PsiUtil.typeParametersIterable((PsiClass)resolve)) {
      if (index >= myTypeParameters.length) {
        final PsiTypeParameterListOwner parameterOwner=parameter.getOwner();
        if (parameterOwner == resolve) {
          substitutionMap.put(parameter,null);
        }
 else         if (parameterOwner instanceof PsiClass) {
          PsiElement containingClass=myParent;
          while ((containingClass=PsiTreeUtil.getParentOfType(containingClass,PsiClass.class,true)) != null) {
            final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getClassSubstitutor((PsiClass)parameterOwner,(PsiClass)containingClass,PsiSubstitutor.EMPTY);
            if (superClassSubstitutor != null) {
              substitutionMap.put(parameter,superClassSubstitutor.substitute(parameter));
              break;
            }
          }
        }
      }
 else {
        substitutionMap.put(parameter,myTypeParameters[index].getType());
      }
      index++;
    }
    return new CandidateInfo(resolve,PsiSubstitutorImpl.createSubstitutor(substitutionMap));
  }
 else {
    return new CandidateInfo(resolve,PsiSubstitutor.EMPTY);
  }
}
