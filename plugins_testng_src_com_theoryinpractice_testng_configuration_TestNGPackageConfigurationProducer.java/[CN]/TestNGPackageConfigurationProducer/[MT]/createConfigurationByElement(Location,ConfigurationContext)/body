{
  final Project project=location.getProject();
  final PsiElement element=location.getPsiElement();
  myPackage=checkPackage(element);
  if (myPackage == null)   return null;
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  boolean testngJarFound=false;
  for (  PsiDirectory directory : myPackage.getDirectories()) {
    final Module module=ModuleUtil.findModuleForFile(directory.getVirtualFile(),project);
    if (module != null) {
      if (facade.findClass(TestNGUtil.TEST_ANNOTATION_FQN,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module,true)) != null) {
        testngJarFound=true;
        break;
      }
    }
  }
  if (!testngJarFound)   return null;
  RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(project,context);
  final TestNGConfiguration configuration=(TestNGConfiguration)settings.getConfiguration();
  final TestData data=configuration.data;
  data.PACKAGE_NAME=myPackage.getQualifiedName();
  data.TEST_OBJECT=TestType.PACKAGE.getType();
  data.setScope(setupPackageConfiguration(context,project,configuration,data.getScope()));
  configuration.setGeneratedName();
  RunConfigurationExtension.patchCreatedConfiguration(configuration);
  return settings;
}
