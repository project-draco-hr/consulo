{
  int[] badness={0,0,0,0,0};
  int curr, left, up, upleft, diff;
  int pa, pb, pc;
  for (int i=bytesPerPixel; i < bytesPerRow + bytesPerPixel; i++) {
    curr=currRow[i] & 0xff;
    left=currRow[i - bytesPerPixel] & 0xff;
    up=prevRow[i] & 0xff;
    upleft=prevRow[i - bytesPerPixel] & 0xff;
    badness[0]+=curr;
    diff=curr - left;
    scratchRows[1][i]=(byte)diff;
    badness[1]+=(diff > 0) ? diff : -diff;
    diff=curr - up;
    scratchRows[2][i]=(byte)diff;
    badness[2]+=(diff >= 0) ? diff : -diff;
    diff=curr - ((left + up) >> 1);
    scratchRows[3][i]=(byte)diff;
    badness[3]+=(diff >= 0) ? diff : -diff;
    pa=up - upleft;
    pb=left - upleft;
    if (pa < 0) {
      if (pb < 0) {
        if (pa >= pb) {
          diff=curr - left;
        }
 else {
          diff=curr - up;
        }
      }
 else {
        pc=pa + pb;
        pa=-pa;
        if (pa <= pb) {
          if (pa <= pc) {
            diff=curr - left;
          }
 else {
            diff=curr - upleft;
          }
        }
 else         if (pb <= -pc) {
          diff=curr - up;
        }
 else {
          diff=curr - upleft;
        }
      }
    }
 else {
      if (pb < 0) {
        pb=-pb;
        if (pa <= pb) {
          pc=pb - pa;
          if (pa <= pc) {
            diff=curr - left;
          }
 else           if (pb == pc) {
            diff=curr - up;
          }
 else {
            diff=curr - upleft;
          }
        }
 else {
          pc=pa - pb;
          if (pb <= pc) {
            diff=curr - up;
          }
 else {
            diff=curr - upleft;
          }
        }
      }
 else {
        if (pa <= pb) {
          diff=curr - left;
        }
 else {
          diff=curr - up;
        }
      }
    }
    scratchRows[4][i]=(byte)diff;
    badness[4]+=(diff >= 0) ? diff : -diff;
  }
  int filterType=0;
  int minBadness=badness[0];
  for (int i=1; i < 5; i++) {
    if (badness[i] < minBadness) {
      minBadness=badness[i];
      filterType=i;
    }
  }
  if (filterType == 0) {
    System.arraycopy(currRow,bytesPerPixel,scratchRows[0],bytesPerPixel,bytesPerRow);
  }
  return filterType;
}
