{
  super(context);
  mySequence=sequence;
  myPanel=new JPanel(new BorderLayout());
  final DefaultListModel model=new DefaultListModel();
  myList=new JBList(model);
  for (  ProjectImportProvider provider : sorted(providers)) {
    model.addElement(provider);
  }
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      setText(((ProjectImportProvider)value).getName());
      setIcon(((ProjectImportProvider)value).getIcon());
      return rendererComponent;
    }
  }
);
  JLabel label=new JLabel("Please select importing \u001btarget:");
  label.setLabelFor(myList);
  label.setBorder(IdeBorderFactory.createEmptyBorder(0,0,5,0));
  myPanel.add(label,BorderLayout.NORTH);
  myPanel.add(ScrollPaneFactory.createScrollPane(myList),BorderLayout.CENTER);
  myList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      final ProjectImportProvider provider=(ProjectImportProvider)myList.getSelectedValue();
      if (provider != null) {
        mySequence.setType(provider.getId());
      }
    }
  }
);
  final String id=PropertiesComponent.getInstance().getValue(PREFFERED);
  if (id == null) {
    myList.setSelectedIndex(0);
  }
 else {
    for (    ProjectImportProvider provider : providers) {
      if (Comparing.strEqual(provider.getId(),id)) {
        myList.setSelectedValue(provider,true);
        break;
      }
    }
  }
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      context.requestNextStep();
      return true;
    }
  }
.installOn(myList);
}
