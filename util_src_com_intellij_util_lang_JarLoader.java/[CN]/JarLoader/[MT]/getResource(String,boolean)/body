{
  final long started=myDebugTime ? System.nanoTime() : 0;
  try {
    initPackageCache();
    if (myUseCache) {
      String packageName=getPackageName(name);
      final Boolean hasClassFiles=myDirectories.get(packageName);
      if (hasClassFiles == null)       return null;
      if (name.endsWith(UrlClassLoader.CLASS_EXTENSION) && !hasClassFiles.booleanValue()) {
        return null;
      }
    }
    final ZipFile file=getZipFile();
    if (file == null)     return null;
    try {
      ZipEntry entry=file.getEntry(name);
      if (entry != null)       return new MyResource(entry,new URL(getBaseURL(),name));
    }
  finally {
      releaseZipFile(file);
    }
  }
 catch (  Exception e) {
    return null;
  }
 finally {
    final long doneFor=myDebugTime ? (System.nanoTime() - started) : 0;
    if (doneFor > NS_THRESHOLD) {
      System.out.println((doneFor / 1000000) + " ms for jar loader get resource:" + name);
    }
  }
  return null;
}
