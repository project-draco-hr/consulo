{
  myDelegate=delegate;
  myBreakpointItems=breakpointItems;
  BreakpointItem breakpointItem=findItem(baseBreakpoint,myBreakpointItems);
  final Ref<Object> hackedSelection=Ref.create();
  myDetailController=new DetailController(new MasterController(){
    JLabel fake=new JLabel();
    @Override public ItemWrapper[] getSelectedItems(){
      if (hackedSelection.get() == null) {
        return new ItemWrapper[0];
      }
      return new ItemWrapper[]{((BreakpointItem)hackedSelection.get())};
    }
    @Override public JLabel getPathLabel(){
      return fake;
    }
  }
);
  ComboBoxModel model=new CollectionComboBoxModel(myBreakpointItems,breakpointItem);
  myComboBox=new ComboBox(model);
  myComboBox.addPopupMenuListener(new PopupMenuListener(){
    @Override public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
    }
    @Override public void popupMenuWillBecomeInvisible(    PopupMenuEvent e){
      if (myDetailView != null) {
        myDetailView.clearEditor();
      }
    }
    @Override public void popupMenuCanceled(    PopupMenuEvent e){
      if (myDetailView != null) {
        myDetailView.clearEditor();
      }
    }
  }
);
  myComboBox.setRenderer(new ItemWrapperListRenderer(project,null){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      super.customizeCellRenderer(list,value,index,selected,hasFocus);
      if (selected) {
        if (hackedSelection.get() != value) {
          hackedSelection.set(value);
          myDetailController.updateDetailView();
        }
      }
    }
  }
);
  myComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent event){
      myDelegate.breakpointChosen(project,((BreakpointItem)myComboBox.getSelectedItem()));
    }
  }
);
}
