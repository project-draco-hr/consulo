{
  if (psiClass.isInterface()) {
    final List<MethodSignature> methods=new ArrayList<MethodSignature>();
    final PsiMethod[] psiClassMethods=psiClass.getAllMethods();
    for (    PsiMethod psiMethod : psiClassMethods) {
      if (!psiMethod.hasModifierProperty(PsiModifier.ABSTRACT))       continue;
      final PsiClass methodContainingClass=psiMethod.getContainingClass();
      if (!overridesPublicObjectMethod(psiMethod)) {
        methods.add(getMethodSignature(psiMethod,psiClass,methodContainingClass));
      }
    }
    return hasSubsignature(methods);
  }
  return null;
}
