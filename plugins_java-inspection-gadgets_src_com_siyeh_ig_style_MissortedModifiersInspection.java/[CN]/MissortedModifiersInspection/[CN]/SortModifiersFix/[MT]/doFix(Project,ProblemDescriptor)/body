{
  final PsiModifierList modifierList=(PsiModifierList)descriptor.getPsiElement();
  final List<String> modifiers=new ArrayList<String>();
  final PsiElement[] children=modifierList.getChildren();
  for (  final PsiElement child : children) {
    if (child instanceof PsiComment) {
      final PsiComment comment=(PsiComment)child;
      final IElementType tokenType=comment.getTokenType();
      if (JavaTokenType.END_OF_LINE_COMMENT.equals(tokenType)) {
        @NonNls final String text=child.getText() + '\n';
        modifiers.add(text);
      }
 else {
        modifiers.add(child.getText());
      }
    }
 else     if (child instanceof PsiJavaToken) {
      modifiers.add(child.getText());
    }
 else     if (child instanceof PsiAnnotation) {
      modifiers.add(0,child.getText());
    }
  }
  Collections.sort(modifiers,new ModifierComparator());
  @NonNls final StringBuilder buffer=new StringBuilder();
  for (  String modifier : modifiers) {
    buffer.append(modifier);
    buffer.append(' ');
  }
  final PsiManager manager=modifierList.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  buffer.append("void x() {}");
  final String text=buffer.toString();
  final PsiMethod method=factory.createMethodFromText(text,modifierList);
  final PsiModifierList newModifierList=method.getModifierList();
  modifierList.replace(newModifierList);
}
