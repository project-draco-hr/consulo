{
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
  Icon icon=Messages.getWarningIcon();
  if (icon != null) {
    JLabel iconLabel=new JLabel(Messages.getQuestionIcon());
    panel.add(iconLabel,BorderLayout.WEST);
  }
  JPanel labelsPanel=new JPanel(new GridLayout(3,1,0,0));
  labelsPanel.setBorder(BorderFactory.createEmptyBorder(0,20,0,10));
  String classType=(myIsParentInterface ? IdeBundle.message("element.of.interface") : IdeBundle.message("element.of.class"));
  String methodOrPointcut=myIsPointcut ? IdeBundle.message("element.pointcut") : IdeBundle.message("element.method");
  labelsPanel.add(new JLabel(myIsPointcut ? IdeBundle.message("label.pointcut",myName) : IdeBundle.message("label.method",myName)));
  if (myIsContainedInInterface || !myIsSuperAbstract) {
    labelsPanel.add(new JLabel(IdeBundle.message("label.overrides.method_or_pointcut.of_class_or_interface.name",methodOrPointcut,classType,myClassName)));
  }
 else {
    labelsPanel.add(new JLabel(IdeBundle.message("label.implements.method_or_pointcut.of_class_or_interface.name",methodOrPointcut,classType,myClassName)));
  }
  String fromClassType=(myIsParentInterface ? IdeBundle.message("element.from.interface") : IdeBundle.message("element.from.base.class"));
  String s=IdeBundle.message("prompt.do.you.want.to.action_verb.the.method_or_pointcut.from_class",myActionString,methodOrPointcut,fromClassType);
  labelsPanel.add(new JLabel(s));
  panel.add(labelsPanel,BorderLayout.CENTER);
  return panel;
}
