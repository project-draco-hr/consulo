{
  super(new BorderLayout());
  myProject=project;
  myTableModel=tableModel;
  myTableModel.sortByChangesColumn(ChangeListColumn.DATE,SortableColumnModel.SORT_DESCENDING);
  myChangeListsView=new TableView<CommittedChangeList>(myTableModel);
  myChangeListsView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myChangesView=new RepositoryChangesBrowser(project,tableModel.getItems());
  myChangesView.getListPanel().setBorder(null);
  myChangeListsView.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateBySelectionChange();
    }
  }
);
  myCommitMessageArea=new JEditorPane(UIUtil.HTML_MIME,"");
  myCommitMessageArea.setBackground(UIUtil.getComboBoxDisabledBackground());
  myCommitMessageArea.addHyperlinkListener(new BrowserHyperlinkListener());
  myCommitMessageArea.setPreferredSize(new Dimension(150,100));
  myCommitMessageArea.setEditable(false);
  JPanel commitPanel=new JPanel(new BorderLayout());
  commitPanel.add(new JScrollPane(myCommitMessageArea),BorderLayout.CENTER);
  final JComponent separator=SeparatorFactory.createSeparator(VcsBundle.message("label.commit.comment"),myCommitMessageArea);
  commitPanel.add(separator,BorderLayout.NORTH);
  myLeftPanel=new JPanel(new GridBagLayout());
  myLeftPanel.add(new JScrollPane(myChangeListsView),new GridBagConstraints(0,0,2,1,1,1,GridBagConstraints.NORTH,GridBagConstraints.BOTH,new Insets(2,2,2,2),0,0));
  if (tableModel instanceof CommittedChangesNavigation) {
    final CommittedChangesNavigation navigation=(CommittedChangesNavigation)tableModel;
    final JButton backButton=new JButton("< Older");
    final JButton forwardButton=new JButton("Newer >");
    backButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        try {
          navigation.goBack();
          backButton.setEnabled(navigation.canGoBack());
        }
 catch (        VcsException e1) {
          Messages.showErrorDialog(e1.getMessage(),"");
          backButton.setEnabled(false);
        }
        forwardButton.setEnabled(navigation.canGoForward());
        selectFirstIfAny();
      }
    }
);
    forwardButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        navigation.goForward();
        backButton.setEnabled(navigation.canGoBack());
        forwardButton.setEnabled(navigation.canGoForward());
        selectFirstIfAny();
      }
    }
);
    backButton.setEnabled(navigation.canGoBack());
    forwardButton.setEnabled(navigation.canGoForward());
    myLeftPanel.add(backButton,new GridBagConstraints(0,1,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,2,2,2),0,0));
    myLeftPanel.add(forwardButton,new GridBagConstraints(1,1,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,2,2,2),0,0));
  }
  JSplitPane leftSplitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  leftSplitter.setTopComponent(myLeftPanel);
  leftSplitter.setBottomComponent(commitPanel);
  leftSplitter.setDividerLocation(0.6);
  leftSplitter.setResizeWeight(0.5);
  JSplitPane splitter=new JSplitPane();
  splitter.setLeftComponent(leftSplitter);
  splitter.setRightComponent(myChangesView);
  add(splitter,BorderLayout.CENTER);
  selectFirstIfAny();
}
