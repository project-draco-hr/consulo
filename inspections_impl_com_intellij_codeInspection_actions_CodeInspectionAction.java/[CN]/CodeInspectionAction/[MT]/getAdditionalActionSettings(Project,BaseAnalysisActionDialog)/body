{
  final InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(project);
  LabeledComponent component=new LabeledComponent();
  component.setText(InspectionsBundle.message("inspection.action.profile.label"));
  component.setLabelLocation(BorderLayout.WEST);
  final ComboboxWithBrowseButton comboboxWithBrowseButton=new ComboboxWithBrowseButton();
  component.setComponent(comboboxWithBrowseButton);
  final JComboBox profiles=comboboxWithBrowseButton.getComboBox();
  profiles.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final Profile profile=(Profile)value;
      setText(profile.getName());
      setIcon(profile.isLocal() ? Profile.LOCAL_PROFILE : Profile.PROJECT_PROFILE);
      return rendererComponent;
    }
  }
);
  final InspectionProfileManager profileManager=InspectionProfileManager.getInstance();
  final InspectionProjectProfileManager projectProfileManager=InspectionProjectProfileManager.getInstance(project);
  reloadProfiles(profiles,profileManager,projectProfileManager,manager);
  comboboxWithBrowseButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Profile selectedProfile=(Profile)comboboxWithBrowseButton.getComboBox().getSelectedItem();
      InspectCodePanel inspectCodeDialog=new InspectCodePanel(manager,null,((Profile)profiles.getSelectedItem()).getName(),selectedProfile.isLocal(),selectedProfile.isLocal() ? profileManager : projectProfileManager){
        protected void init(){
          super.init();
          setOKButtonText(CommonBundle.getOkButtonText());
        }
      }
;
      inspectCodeDialog.show();
      if (inspectCodeDialog.isOK()) {
        reloadProfiles(profiles,profileManager,projectProfileManager,manager);
      }
 else {
        final InspectionProfileImpl profile=(InspectionProfileImpl)profiles.getSelectedItem();
        final boolean canExecute=profile != null && profile.isExecutable();
        dialog.setOKActionEnabled(canExecute);
      }
    }
  }
);
  profiles.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final InspectionProfileImpl profile=(InspectionProfileImpl)profiles.getSelectedItem();
      final boolean canExecute=profile != null && profile.isExecutable();
      dialog.setOKActionEnabled(canExecute);
      if (canExecute) {
        manager.setProfile(profile);
      }
    }
  }
);
  final InspectionProfileImpl profile=(InspectionProfileImpl)profiles.getSelectedItem();
  dialog.setOKActionEnabled(profile != null && profile.isExecutable());
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(component,BorderLayout.NORTH);
  return panel;
}
