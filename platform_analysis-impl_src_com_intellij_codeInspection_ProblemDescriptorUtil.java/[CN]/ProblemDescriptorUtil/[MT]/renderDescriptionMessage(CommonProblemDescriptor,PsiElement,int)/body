{
  String message=descriptor.getDescriptionTemplate();
  if (message == null)   return "";
  if ((flags & APPEND_LINE_NUMBER) != 0 && descriptor instanceof ProblemDescriptor && !message.contains("#ref") && message.contains("#loc")) {
    final int lineNumber=((ProblemDescriptor)descriptor).getLineNumber();
    if (lineNumber >= 0) {
      message=StringUtil.replace(message,"#loc","(" + InspectionsBundle.message("inspection.export.results.at.line") + " "+ lineNumber+ ")");
    }
  }
  message=StringUtil.replace(message,"<code>","'");
  message=StringUtil.replace(message,"</code>","'");
  message=StringUtil.replace(message,"#loc ","");
  message=StringUtil.replace(message," #loc","");
  message=StringUtil.replace(message,"#loc","");
  if (message.contains("#ref")) {
    String ref=extractHighlightedText(descriptor,element);
    message=StringUtil.replace(message,"#ref",ref);
  }
  final int endIndex=(flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1;
  if (endIndex > 0) {
    message=message.substring(0,endIndex);
  }
  message=StringUtil.replace(message,"#end","");
  message=StringUtil.replace(message,"#treeend","");
  if (message.contains(XML_CODE_MARKER.first)) {
    message=unescapeXmlCode(message);
  }
 else {
    message=StringUtil.unescapeXml(message).trim();
  }
  return message;
}
