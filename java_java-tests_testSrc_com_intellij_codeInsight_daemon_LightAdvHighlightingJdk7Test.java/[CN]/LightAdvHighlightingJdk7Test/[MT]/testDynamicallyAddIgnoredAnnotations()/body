{
  ExtensionPoint<EntryPoint> point=Extensions.getRootArea().getExtensionPoint(ExtensionPoints.DEAD_CODE_TOOL);
  EntryPoint extension=new EntryPoint(){
    @NotNull @Override public String getDisplayName(){
      return "duh";
    }
    @Override public boolean isEntryPoint(    RefElement refElement,    PsiElement psiElement){
      return false;
    }
    @Override public boolean isEntryPoint(    PsiElement psiElement){
      return false;
    }
    @Override public boolean isSelected(){
      return false;
    }
    @Override public void setSelected(    boolean selected){
    }
    @Override public void readExternal(    Element element){
    }
    @Override public void writeExternal(    Element element){
    }
    @Override public String[] getIgnoreAnnotations(){
      return new String[]{"MyAnno"};
    }
  }
;
  UnusedDeclarationInspection deadCodeInspection=new UnusedDeclarationInspection();
  enableInspectionTool(deadCodeInspection);
  doTest(true,false);
  List<HighlightInfo> infos=doHighlighting(HighlightSeverity.WARNING);
  assertEquals(2,infos.size());
  try {
    point.registerExtension(extension);
    infos=doHighlighting(HighlightSeverity.WARNING);
    HighlightInfo info=assertOneElement(infos);
    assertEquals("Class 'WithMain' is never used",info.description);
  }
  finally {
    point.unregisterExtension(extension);
  }
}
