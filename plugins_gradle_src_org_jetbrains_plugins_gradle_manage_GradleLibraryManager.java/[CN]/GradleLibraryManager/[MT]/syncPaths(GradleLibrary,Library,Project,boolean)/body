{
  Set<String> toRemove=ContainerUtilRt.newHashSet();
  Set<String> toAdd=ContainerUtilRt.newHashSet(gradleLibrary.getPaths(LibraryPathType.BINARY));
  for (  VirtualFile ideFile : ideLibrary.getFiles(OrderRootType.CLASSES)) {
    String idePath=GradleUtil.getLocalFileSystemPath(ideFile);
    if (!toAdd.remove(idePath)) {
      toRemove.add(idePath);
    }
  }
  if (toRemove.isEmpty() && toAdd.isEmpty()) {
    return;
  }
  Function<String,GradleJar> jarMapper=new Function<String,GradleJar>(){
    @Override public GradleJar fun(    String path){
      return new GradleJar(path,LibraryPathType.BINARY,ideLibrary,null);
    }
  }
;
  if (!toRemove.isEmpty()) {
    List<GradleJar> jarsToRemove=ContainerUtil.map(toRemove,jarMapper);
    myJarManager.removeJars(jarsToRemove,project,synchronous);
  }
  if (!toAdd.isEmpty()) {
    List<GradleJar> jarsToAdd=ContainerUtil.map(toAdd,jarMapper);
    myJarManager.importJars(jarsToAdd,project,synchronous);
  }
}
