{
  profile.setName(element.getAttributeValue(NAME,""));
  profile.setEnabled(Boolean.valueOf(element.getAttributeValue(ENABLED,"false")));
  final Element srcOutput=element.getChild("sourceOutputDir");
  profile.setGeneratedSourcesDirectoryName(srcOutput != null ? srcOutput.getAttributeValue(NAME) : null,false);
  final Element srcTestOutput=element.getChild("sourceTestOutputDir");
  profile.setGeneratedSourcesDirectoryName(srcTestOutput != null ? srcTestOutput.getAttributeValue(NAME) : null,true);
  profile.clearProcessorOptions();
  for (  Object optionElement : element.getChildren(OPTION)) {
    final Element elem=(Element)optionElement;
    final String key=elem.getAttributeValue(NAME);
    final String value=elem.getAttributeValue(VALUE);
    if (!StringUtil.isEmptyOrSpaces(key) && value != null) {
      profile.setOption(key,value);
    }
  }
  profile.clearProcessors();
  for (  Object procElement : element.getChildren("processor")) {
    final String name=((Element)procElement).getAttributeValue(NAME);
    if (StringUtil.isEmptyOrSpaces(name)) {
      profile.addProcessor(name);
    }
  }
  final Element pathElement=element.getChild("processorPath");
  if (pathElement != null) {
    profile.setObtainProcessorsFromClasspath(Boolean.parseBoolean(pathElement.getAttributeValue("useClasspath","true")));
    final StringBuilder pathBuilder=new StringBuilder();
    for (    Object entry : pathElement.getChildren(ENTRY)) {
      final String path=((Element)entry).getAttributeValue(NAME);
      if (!StringUtil.isEmptyOrSpaces(path)) {
        if (pathBuilder.length() > 0) {
          pathBuilder.append(File.pathSeparator);
        }
        pathBuilder.append(FileUtil.toSystemDependentName(path));
      }
    }
    profile.setProcessorPath(pathBuilder.toString());
  }
  profile.clearModuleNames();
  for (  Object moduleElement : element.getChildren(MODULE)) {
    final String name=((Element)moduleElement).getAttributeValue(NAME);
    if (!StringUtil.isEmptyOrSpaces(name)) {
      profile.addModuleName(name);
    }
  }
}
