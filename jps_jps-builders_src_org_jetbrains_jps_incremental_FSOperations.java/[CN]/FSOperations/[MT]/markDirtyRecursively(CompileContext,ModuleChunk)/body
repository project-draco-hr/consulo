{
  Set<JpsModule> modules=chunk.getModules();
  Set<ModuleBuildTarget> targets=chunk.getTargets();
  final Set<ModuleBuildTarget> dirtyTargets=new HashSet<ModuleBuildTarget>(targets);
  final JpsJavaClasspathKind classpathKind=JpsJavaClasspathKind.compile(chunk.containsTests());
  boolean found=false;
  for (  BuildTargetChunk targetChunk : context.getProjectDescriptor().getBuildTargetIndex().getSortedTargetChunks()) {
    if (!found) {
      if (targetChunk.getTargets().equals(chunk.getTargets())) {
        found=true;
      }
    }
 else {
      for (      final BuildTarget<?> target : targetChunk.getTargets()) {
        if (target instanceof ModuleBuildTarget) {
          final Set<JpsModule> deps=getDependentModulesRecursively(((ModuleBuildTarget)target).getModule(),classpathKind);
          if (Utils.intersects(deps,modules)) {
            for (            BuildTarget<?> buildTarget : targetChunk.getTargets()) {
              if (buildTarget instanceof ModuleBuildTarget) {
                dirtyTargets.add((ModuleBuildTarget)buildTarget);
              }
            }
            break;
          }
        }
      }
    }
  }
  final Timestamps timestamps=context.getProjectDescriptor().timestamps.getStorage();
  for (  ModuleBuildTarget target : dirtyTargets) {
    markDirtyFiles(context,target,timestamps,true,null,null);
  }
  if (context.isMake()) {
    for (    ModuleBuildTarget target : targets) {
      context.markNonIncremental(target);
    }
  }
}
