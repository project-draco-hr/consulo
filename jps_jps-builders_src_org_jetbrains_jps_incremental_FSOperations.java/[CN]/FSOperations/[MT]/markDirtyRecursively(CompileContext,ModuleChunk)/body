{
  final Set<JpsModule> modules=chunk.getModules();
  final Set<JpsModule> dirtyModules=new HashSet<JpsModule>(modules);
  final JpsJavaClasspathKind classpathKind=JpsJavaClasspathKind.compile(context.isCompilingTests());
  final ProjectChunks chunks=context.isCompilingTests() ? context.getTestChunks() : context.getProductionChunks();
  boolean found=false;
  for (  ModuleChunk moduleChunk : chunks.getChunkList()) {
    if (!found) {
      if (moduleChunk.equals(chunk)) {
        found=true;
      }
    }
 else {
      for (      final JpsModule module : moduleChunk.getModules()) {
        final Set<JpsModule> deps=getDependentModulesRecursively(module,classpathKind);
        if (Utils.intersects(deps,modules)) {
          dirtyModules.addAll(moduleChunk.getModules());
          break;
        }
      }
    }
  }
  final Timestamps timestamps=context.getProjectDescriptor().timestamps.getStorage();
  for (  JpsModule module : dirtyModules) {
    markDirtyFiles(context,module,timestamps,true,context.isCompilingTests() ? DirtyMarkScope.TESTS : DirtyMarkScope.BOTH,null);
  }
  if (context.isMake()) {
    for (    JpsModule module : modules) {
      context.markNonIncremental(module);
    }
  }
}
