{
  JPanel panel=new JPanel(new BorderLayout());
  DefaultActionGroup group=new DefaultActionGroup();
  fillToolbarActions(group);
  group.addSeparator();
  ExpandAllAction expandAllAction=new ExpandAllAction();
  expandAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_EXPAND_ALL)),myTree);
  group.add(expandAllAction);
  CollapseAllAction collapseAllAction=new CollapseAllAction();
  collapseAllAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_COLLAPSE_ALL)),myTree);
  group.add(collapseAllAction);
  panel.add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent(),BorderLayout.NORTH);
  myTree.setCellRenderer(getTreeCellRenderer());
  UIUtil.setLineStyleAngled(myTree);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.addKeyListener(new TreeKeyListener());
  myTree.addTreeSelectionListener(new MyTreeSelectionListener());
  if (!myAllowMultiSelection) {
    myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  }
  if (getRootNode().getChildCount() > 0) {
    myTree.expandRow(0);
    myTree.setSelectionRow(1);
  }
  defaultExpandTree();
  installSpeedSearch();
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      if (myTree.getPathForLocation(e.getX(),e.getY()) != null) {
        doOKAction();
        return true;
      }
      return false;
    }
  }
.installOn(myTree);
  TreeUtil.installActions(myTree);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  scrollPane.setPreferredSize(new Dimension(350,450));
  panel.add(scrollPane,BorderLayout.CENTER);
  return panel;
}
