{
  if (file instanceof PsiPlainTextFile) {
    FileType fType=file.getFileType();
    if (fType instanceof AbstractFileType) {
      Lexer lexer=SyntaxHighlighter.PROVIDER.create(fType,file.getProject(),file.getVirtualFile()).getHighlightingLexer();
      findComments(lexer,chars,range,COMMENT_TOKENS,commentStarts,commentEnds,null);
    }
 else {
      commentStarts.add(0);
      commentEnds.add(file.getTextLength());
    }
  }
 else {
    final FileViewProvider viewProvider=file.getViewProvider();
    final Set<Language> relevantLanguages=viewProvider.getLanguages();
    for (    Language lang : relevantLanguages) {
      final TIntArrayList commentStartsList=new TIntArrayList();
      final TIntArrayList commentEndsList=new TIntArrayList();
      final SyntaxHighlighter syntaxHighlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(lang,file.getProject(),file.getVirtualFile());
      Lexer lexer=syntaxHighlighter.getHighlightingLexer();
      TokenSet commentTokens=null;
      IndexPatternBuilder builderForFile=null;
      for (      IndexPatternBuilder builder : Extensions.getExtensions(IndexPatternBuilder.EP_NAME)) {
        Lexer lexerFromBuilder=builder.getIndexingLexer(file);
        if (lexerFromBuilder != null) {
          lexer=lexerFromBuilder;
          commentTokens=builder.getCommentTokenSet(file);
          builderForFile=builder;
        }
      }
      if (builderForFile == null) {
        final ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(lang);
        if (parserDefinition != null) {
          commentTokens=parserDefinition.getCommentTokens();
        }
      }
      if (commentTokens != null) {
        findComments(lexer,chars,range,commentTokens,commentStartsList,commentEndsList,builderForFile);
        mergeCommentLists(commentStarts,commentEnds,commentStartsList,commentEndsList);
      }
    }
  }
}
