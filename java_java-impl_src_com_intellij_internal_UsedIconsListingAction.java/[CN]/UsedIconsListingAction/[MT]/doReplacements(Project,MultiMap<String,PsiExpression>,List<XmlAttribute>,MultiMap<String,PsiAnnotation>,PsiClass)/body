{
  final HashMap<String,String> mappings=new HashMap<String,String>();
  int size=mappings.size();
  collectFields(iconClass,"",mappings);
  System.out.println("Found " + (mappings.size() - size) + " icons in "+ iconClass.getQualifiedName());
  GlobalSearchScope useScope=(GlobalSearchScope)iconClass.getUseScope();
  for (  final XmlAttribute att : xmlAttributes) {
    if (!att.isValid())     continue;
    String value=att.getValue();
    final String replacement=mappings.get(value);
    if (replacement != null) {
      final PsiFile file=att.getContainingFile();
      if (useScope.contains(file.getVirtualFile())) {
        new WriteCommandAction<Void>(project,file){
          @Override protected void run(          Result<Void> result) throws Throwable {
            att.setValue(replacement);
          }
        }
.execute();
      }
    }
  }
  final JVMElementFactory factory=JVMElementFactories.getFactory(JavaLanguage.INSTANCE,project);
  for (  Map.Entry<String,Collection<PsiExpression>> entry : calls.entrySet()) {
    String path=entry.getKey();
    final String replacement=mappings.get(path);
    if (replacement != null) {
      for (      final PsiExpression call : entry.getValue()) {
        if (!call.isValid())         continue;
        final PsiFile file=call.getContainingFile();
        if (useScope.contains(file.getVirtualFile())) {
          new WriteCommandAction(project,file){
            @Override protected void run(            Result result) throws Throwable {
              if (call instanceof PsiLiteralExpression) {
                call.replace(factory.createExpressionFromText("\"" + replacement + "\"",call));
              }
 else {
                JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
                String packageName=replacement.startsWith("AllIcons.") ? "com.intellij.icons." : "icons.";
                PsiElement expr=factory.createExpressionFromText(packageName + replacement,call);
                styleManager.shortenClassReferences(call.replace(expr));
              }
            }
          }
.execute();
        }
      }
    }
  }
  for (  Map.Entry<String,Collection<PsiAnnotation>> entry : annotations.entrySet()) {
    String path=entry.getKey();
    final String replacement=mappings.get(path);
    if (replacement != null) {
      for (      final PsiAnnotation annotation : entry.getValue()) {
        if (annotation instanceof PsiCompiledElement)         continue;
        if (!annotation.isValid())         continue;
        PsiFile file=annotation.getContainingFile();
        if (useScope.contains(file.getVirtualFile())) {
          new WriteCommandAction(project,file){
            @Override protected void run(            Result result) throws Throwable {
              annotation.getNode();
              annotation.setDeclaredAttributeValue("icon",JavaPsiFacade.getInstance(annotation.getProject()).getElementFactory().createAnnotationFromText("@A(\"" + replacement + "\")",null).findDeclaredAttributeValue(null));
            }
          }
.execute();
        }
      }
    }
  }
}
