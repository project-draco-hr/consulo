{
  final Project project=LangDataKeys.PROJECT.getData(e.getDataContext());
  final Set<String> answer=new HashSet<String>();
  final MultiMap<String,PsiCallExpression> calls=new MultiMap<String,PsiCallExpression>();
  Processor<PsiReference> consumer=new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      PsiCallExpression call=PsiTreeUtil.getParentOfType(reference.getElement(),PsiCallExpression.class,false);
      if (call == null)       return true;
      if (call.getArgumentList() == null)       return true;
      if (call.getArgumentList().getExpressions() == null)       return true;
      PsiFile file=reference.getElement().getContainingFile();
      if ("AllIcons.java".equals(file.getName()))       return true;
      for (      PsiExpression arg : call.getArgumentList().getExpressions()) {
        if (arg instanceof PsiLiteralExpression) {
          Object value=((PsiLiteralExpression)arg).getValue();
          processValue(value,call,file);
        }
 else {
          Object value=JavaPsiFacade.getInstance(project).getConstantEvaluationHelper().computeConstantExpression(arg,false);
          processValue(value,call,file);
        }
      }
      return true;
    }
    private void processValue(    Object value,    PsiCallExpression call,    PsiFile file){
      if (value instanceof String) {
        String str=(String)value;
        if (str.startsWith("\"")) {
          str=str.substring(0);
          if (str.endsWith("\"")) {
            str=str.substring(0,str.length() - 1);
          }
        }
        if (!str.startsWith("/")) {
          if (file instanceof PsiClassOwner) {
            str="/" + ((PsiClassOwner)file).getPackageName().replace('.','/') + "/"+ str;
          }
        }
        calls.putValue(str,call);
        answer.add(str);
      }
    }
  }
;
  PsiClass iconLoader=JavaPsiFacade.getInstance(project).findClass("com.intellij.openapi.util.IconLoader",GlobalSearchScope.allScope(project));
  PsiMethod getIconMethod=iconLoader.findMethodsByName("getIcon",false)[0];
  PsiMethod findIconMethod=iconLoader.findMethodsByName("findIcon",false)[0];
  MethodReferencesSearch.search(getIconMethod,false).forEach(consumer);
  MethodReferencesSearch.search(findIconMethod,false).forEach(consumer);
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  PsiSearchHelper.SERVICE.getInstance(project).processAllFilesWithWordInText("action",new DelegatingGlobalSearchScope(GlobalSearchScope.projectScope(project)){
    @Override public boolean contains(    VirtualFile file){
      return super.contains(file) && file.getFileType() == XmlFileType.INSTANCE && index.isInSource(file);
    }
  }
,new Processor<PsiFile>(){
    @Override public boolean process(    PsiFile file){
      if (file instanceof XmlFile) {
        processTag(((XmlFile)file).getRootTag());
      }
      return true;
    }
    private void processTag(    XmlTag tag){
      if ("action".equals(tag.getLocalName())) {
        String icon=tag.getAttributeValue("icon");
        if (icon != null) {
          answer.add(icon);
        }
      }
 else {
        for (        XmlTag sub : tag.getSubTags()) {
          processTag(sub);
        }
      }
    }
  }
,true);
  ArrayList<String> sorted=new ArrayList<String>(answer);
  Collections.sort(sorted);
  for (  String icon : sorted) {
    System.out.println(icon);
  }
  PsiClass allIcons=JavaPsiFacade.getInstance(project).findClass("com.intellij.icons.AllIcons",GlobalSearchScope.allScope(project));
  HashMap<String,String> mappings=new HashMap<String,String>();
  collectFields(allIcons,"",mappings);
  final JVMElementFactory factory=JVMElementFactories.getFactory(JavaLanguage.INSTANCE,project);
  for (  Map.Entry<String,Collection<PsiCallExpression>> entry : calls.entrySet()) {
    String path=entry.getKey();
    final String replacement=mappings.get(path);
    if (replacement != null) {
      for (      final PsiCallExpression call : entry.getValue()) {
        new WriteCommandAction(project,call.getContainingFile()){
          @Override protected void run(          Result result) throws Throwable {
            JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
            PsiElement expr=factory.createExpressionFromText("com.intellij.icons." + replacement,call);
            styleManager.shortenClassReferences(call.replace(expr));
          }
        }
.execute();
      }
    }
  }
}
