{
  if (filter == null || filter.length() == 0) {
    return textToMarkup;
  }
  final Pattern insideHtmlTagPattern=Pattern.compile("[<[^<>]*>]*<[^<>]*");
  final SearchableOptionsRegistrar registrar=SearchableOptionsRegistrar.getInstance();
  final Set<String> options=registrar.getProcessedWords(filter);
  final Set<String> words=registrar.getProcessedWords(textToMarkup);
  for (  String option : options) {
    if (words.contains(option)) {
      final String[] splittedText=textToMarkup.split(option);
      if (splittedText != null && splittedText.length > 0) {
        boolean endsWith=textToMarkup.endsWith(option);
        textToMarkup="";
        for (int i=0; i < splittedText.length; i++) {
          String aPart=splittedText[i];
          if (aPart == null || aPart.length() == 0) {
            continue;
          }
          if (!endsWith && i == splittedText.length - 1) {
            textToMarkup+=aPart;
          }
 else           if (insideHtmlTagPattern.matcher(aPart).matches()) {
            textToMarkup+=aPart + option;
          }
 else {
            textToMarkup+=aPart + "<font color='#ffffff' bgColor='#1d5da7'>" + option+ "</font>";
          }
        }
      }
    }
  }
  return textToMarkup;
}
