{
  if (activePopup[0] != null) {
    activePopup[0].cancel();
  }
  final String filter=searchField.getText();
  if (filter == null || filter.length() == 0)   return;
  final Map<String,Set<String>> hints=optionsRegistrar.findPossibleExtension(filter,project);
  final DefaultListModel model=new DefaultListModel();
  final JList list=new JList(model);
  for (  String groupName : hints.keySet()) {
    model.addElement(groupName);
    final Set<String> descriptions=hints.get(groupName);
    if (descriptions != null) {
      for (      String hit : descriptions) {
        if (hit == null)         continue;
        model.addElement(new OptionDescription(hit));
      }
    }
  }
  list.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof String) {
        setText("------ " + value + " ------");
      }
 else       if (value instanceof OptionDescription) {
        setText(((OptionDescription)value).getHit());
      }
      return rendererComponent;
    }
  }
);
  if (hints.size() > 0) {
    final Runnable onChosen=new Runnable(){
      public void run(){
        final Object selectedValue=list.getSelectedValue();
        if (selectedValue instanceof OptionDescription) {
          searchField.setText(((OptionDescription)selectedValue).getHit());
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              showHintAlarm.cancelAllRequests();
            }
          }
);
        }
      }
    }
;
    final JBPopup popup=JBPopupFactory.getInstance().createListPopupBuilder(list).setItemChoosenCallback(onChosen).setRequestFocus(false).createPopup();
    popup.showUnderneathOf(searchField);
    activePopup[0]=popup;
    searchField.registerKeyboardAction(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        showPopupWithFocus(popup,list,onChosen,searchField,activePopup,true);
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
    searchField.registerKeyboardAction(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        showPopupWithFocus(popup,list,onChosen,searchField,activePopup,false);
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),JComponent.WHEN_IN_FOCUSED_WINDOW);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        searchField.requestFocusInWindow();
      }
    }
);
  }
}
