{
  ASTNode node=parentBlock.getNode();
  final PsiElement psiParent=node.getPsi();
  PsiElement psiChild=child.getPsi();
  IElementType childType=child.getElementType();
  IElementType parentType=node.getElementType();
  if (psiParent instanceof GroovyFileBase) {
    return Indent.getNoneIndent();
  }
  if (psiParent instanceof GrMethod && childType == PARAMETERS_LIST) {
    return Indent.getContinuationIndent();
  }
  if (GSTRING_TOKENS_INNER.contains(childType) && mGSTRING_BEGIN != childType) {
    return Indent.getAbsoluteNoneIndent();
  }
  if (parentType == ASSERT_STATEMENT && childType != GroovyTokenTypes.kASSERT) {
    return Indent.getContinuationIndent();
  }
  if (parentType == LIST_OR_MAP) {
    boolean isBracket=childType == mLBRACK || childType == mRBRACK;
    return isBracket ? Indent.getNoneIndent() : Indent.getContinuationWithoutFirstIndent();
  }
  if (parentBlock instanceof ClosureBodyBlock && childType == GroovyElementTypes.PARAMETERS_LIST) {
    return Indent.getNoneIndent();
  }
  if (BLOCK_SET.contains(parentType) && !BLOCK_STATEMENT.equals(parentType) || parentBlock instanceof ClosureBodyBlock) {
    boolean isBrace=child.getElementType() == mLCURLY || child.getElementType() == mRCURLY;
    return isBrace ? Indent.getNoneIndent() : Indent.getNormalIndent();
  }
  if (CASE_SECTION.equals(parentType)) {
    return child.getElementType() == CASE_LABEL ? Indent.getNoneIndent() : Indent.getNormalIndent();
  }
  if (SWITCH_STATEMENT.equals(parentType)) {
    return child.getElementType() == CASE_SECTION ? getSwitchCaseIndent(psiParent) : Indent.getNoneIndent();
  }
  if (parentType == LABELED_STATEMENT && childType == LABEL) {
    CommonCodeStyleSettings.IndentOptions indentOptions=parentBlock.getSettings().getIndentOptions();
    boolean isLabelIndentAbsolute=indentOptions != null && indentOptions.LABEL_INDENT_ABSOLUTE;
    return isLabelIndentAbsolute ? Indent.getAbsoluteLabelIndent() : Indent.getLabelIndent();
  }
  if (parentType == ANNOTATION) {
    if (childType == ANNOTATION_ARGUMENTS)     return Indent.getContinuationIndent();
    return Indent.getNoneIndent();
  }
  if (parentType == ANNOTATION_ARGUMENTS) {
    if (childType == mLPAREN || childType == mRPAREN)     return Indent.getNoneIndent();
    return Indent.getContinuationIndent();
  }
  if (psiParent instanceof GrControlStatement) {
    return getControlIndent(psiParent,child);
  }
  if (psiParent instanceof GrExpression) {
    return getExpressionIndent(psiParent,child);
  }
  if (psiParent instanceof GrVariable && psiChild == ((GrVariable)psiParent).getInitializerGroovy()) {
    return Indent.getNormalIndent();
  }
  if (psiParent instanceof GrParameterList || psiParent instanceof GrExtendsClause || psiParent instanceof GrImplementsClause|| psiParent instanceof GrThrowsClause) {
    Indent parentIndent=parentBlock.getIndent();
    return parentIndent != null ? Indent.getContinuationWithoutFirstIndent() : Indent.getNoneIndent();
  }
  if (psiParent instanceof GrArgumentList && childType != mLPAREN && childType != mRPAREN) {
    return Indent.getContinuationWithoutFirstIndent();
  }
  if (psiParent instanceof GrDocComment && childType != mGDOC_COMMENT_START || psiParent instanceof GrDocTag && childType != mGDOC_TAG_NAME) {
    return Indent.getSpaceIndent(GDOC_COMMENT_INDENT);
  }
  if (psiParent instanceof GrNamedArgument && child.getPsi() == ((GrNamedArgument)psiParent).getExpression()) {
    return Indent.getContinuationIndent();
  }
  if (psiChild instanceof GrVariable && psiParent instanceof GrVariableDeclaration) {
    return Indent.getContinuationWithoutFirstIndent();
  }
  return Indent.getNoneIndent();
}
