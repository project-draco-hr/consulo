{
  List<Future> futures=new ArrayList<Future>();
  final AtomicInteger downloaded=new AtomicInteger();
  int total=0;
  for (  DownloadData each : toDownload.values()) {
    total+=each.classifiersWithExtensions.size();
  }
  try {
    for (    final Map.Entry<MavenId,DownloadData> eachEntry : toDownload.entrySet()) {
      myProgress.checkCanceled();
      final DownloadData data=eachEntry.getValue();
      final MavenId id=eachEntry.getKey();
      for (      final Pair<String,String> eachTypeWithClassifier : data.classifiersWithExtensions) {
        final int finalTotal=total;
        futures.add(EXECUTOR.submit(new Runnable(){
          public void run(){
            try {
              myProgress.checkCanceled();
              myProgress.setFraction(((double)downloaded.getAndIncrement()) / finalTotal);
              Artifact a=myEmbedder.resolve(id,eachTypeWithClassifier.second,eachTypeWithClassifier.first,new ArrayList<MavenRemoteRepository>(data.repositories));
              File file=a.getFile();
              if (file != null && file.exists())               downloadedFiles.add(file);
            }
 catch (            MavenProcessCanceledException ignore) {
            }
          }
        }
));
      }
    }
  }
  finally {
    for (    Future each : futures) {
      try {
        each.get();
      }
 catch (      Exception e) {
        MavenLog.LOG.error(e);
      }
    }
  }
}
