{
  final Map<MavenId,Set<ArtifactRepository>> repositoryArtifacts=new TreeMap<MavenId,Set<ArtifactRepository>>();
  for (  MavenProject mavenProject : mavenProjects) {
    VirtualFile file=projectsState.getFile(mavenProject);
    if (file != null) {
      Collection<Artifact> artifacts=projectsState.getArtifacts(file);
      if (artifacts != null) {
        final List remoteRepositories=mavenProject.getRemoteArtifactRepositories();
        for (        Artifact artifact : artifacts) {
          if (artifact.getType().equalsIgnoreCase(MavenToIdeaConverter.JAR_TYPE) && !artifact.getScope().equalsIgnoreCase(Artifact.SCOPE_SYSTEM)) {
            MavenId id=new MavenId(artifact);
            if (!mappedToModules.contains(id)) {
              Set<ArtifactRepository> repos=repositoryArtifacts.get(id);
              if (repos == null) {
                repos=new HashSet<ArtifactRepository>();
                repositoryArtifacts.put(id,repos);
              }
              repos.addAll(remoteRepositories);
            }
          }
        }
      }
    }
  }
  return repositoryArtifacts;
}
