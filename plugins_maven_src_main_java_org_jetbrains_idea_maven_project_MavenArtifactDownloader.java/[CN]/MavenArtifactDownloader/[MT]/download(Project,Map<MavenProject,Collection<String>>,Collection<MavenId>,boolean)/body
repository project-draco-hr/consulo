{
  final Map<MavenId,Set<ArtifactRepository>> libraryArtifacts=collectLibraryArtifacts(mavenProjects.keySet(),mappedToModules);
  if (myProgressIndicator.isCanceled())   return;
  if (isEnabled(myPreferences.getDownloadSources(),demand)) {
    download(libraryArtifacts,MavenToIdeaConverter.SOURCES_CLASSIFIER);
  }
  if (myProgressIndicator.isCanceled())   return;
  if (isEnabled(myPreferences.getDownloadJavadoc(),demand)) {
    download(libraryArtifacts,MavenToIdeaConverter.JAVADOC_CLASSIFIER);
  }
  if (myProgressIndicator.isCanceled())   return;
  if (isEnabled(myPreferences.getDownloadPlugins(),demand)) {
    downloadPlugins(ProjectUtil.collectPlugins(mavenProjects));
  }
  if (myProgressIndicator.isCanceled())   return;
  if (isEnabled(myPreferences.getGenerateSources(),demand)) {
    generateSources(project,createGenerateCommand(mavenProjects));
  }
}
