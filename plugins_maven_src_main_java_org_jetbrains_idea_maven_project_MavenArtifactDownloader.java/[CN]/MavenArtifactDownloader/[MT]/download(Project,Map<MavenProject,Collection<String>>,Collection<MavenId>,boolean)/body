{
  final MavenProjectsState projectsState=project.getComponent(MavenProjectsState.class);
  final Map<MavenId,Set<ArtifactRepository>> libraryArtifacts=collectLibraryArtifacts(projectsState,mavenProjects.keySet(),mappedToModules);
  myProgress.check();
  if (isEnabled(myPreferences.getDownloadSources(),demand)) {
    download(libraryArtifacts,MavenToIdeaConverter.SOURCES_CLASSIFIER);
  }
  myProgress.check();
  if (isEnabled(myPreferences.getDownloadJavadoc(),demand)) {
    download(libraryArtifacts,MavenToIdeaConverter.JAVADOC_CLASSIFIER);
  }
  myProgress.check();
  if (isEnabled(myPreferences.getDownloadPlugins(),demand)) {
    final Map<Plugin,MavenProject> plugins=ProjectUtil.collectPlugins(mavenProjects);
    collectAttachedPlugins(projectsState,plugins);
    downloadPlugins(plugins);
    projectsState.updateAllFiles();
  }
  myProgress.check();
  if (isEnabled(myPreferences.getGenerateSources(),demand)) {
    generateSources(project,createGenerateCommand(mavenProjects));
  }
}
