{
  Map<MavenId,Set<ArtifactRepository>> libraryArtifacts=collectLibraryArtifacts(projectsWithProfiles.keySet(),projectIds);
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadSources(),demand)) {
    download(libraryArtifacts,Constants.SOURCES_CLASSIFIER);
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadJavadoc(),demand)) {
    download(libraryArtifacts,Constants.JAVADOC_CLASSIFIER);
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadPlugins(),demand)) {
    MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(project);
    Map<Plugin,MavenProject> plugins=ProjectUtil.collectPlugins(projectsWithProfiles);
    collectAttachedPlugins(projectsManager,projectToFile,plugins);
    downloadPlugins(plugins);
    projectsManager.updateAllFiles();
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getGenerateSources(),demand)) {
    generateSources(project,createGenerateCommand(projectsWithProfiles));
  }
}
