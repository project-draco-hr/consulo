{
  Map<MavenId,Set<ArtifactRepository>> libraryArtifacts=collectLibraryArtifacts(mavenProjects);
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadSources(),demand)) {
    download(libraryArtifacts,MavenConstants.SOURCES_CLASSIFIER);
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadJavadoc(),demand)) {
    download(libraryArtifacts,MavenConstants.JAVADOC_CLASSIFIER);
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getDownloadPlugins(),demand)) {
    MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(project);
    downloadPlugins(mavenProjects);
    projectsManager.updateAllFiles();
  }
  myProgress.checkCanceled();
  if (isEnabled(mySettings.getGenerateSources(),demand)) {
    generateSources(project,createGenerateCommand(mavenProjects));
  }
}
