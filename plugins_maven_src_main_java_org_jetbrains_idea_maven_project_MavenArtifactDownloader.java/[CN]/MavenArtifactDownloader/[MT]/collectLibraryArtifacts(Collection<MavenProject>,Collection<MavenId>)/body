{
  final Map<MavenId,Set<ArtifactRepository>> repositoryArtifacts=new TreeMap<MavenId,Set<ArtifactRepository>>(new Comparator<MavenId>(){
    public int compare(    MavenId o1,    MavenId o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  for (  MavenProject mavenProject : mavenProjects) {
    final List remoteRepositories=mavenProject.getRemoteArtifactRepositories();
    for (    Object o : mavenProject.getArtifacts()) {
      Artifact artifact=(Artifact)o;
      if (artifact.getType().equalsIgnoreCase(MavenToIdeaConverter.JAR_TYPE) && !artifact.getScope().equalsIgnoreCase(Artifact.SCOPE_SYSTEM)) {
        MavenId id=new MavenId(artifact);
        if (!mappedToModules.contains(id)) {
          Set<ArtifactRepository> repos=repositoryArtifacts.get(id);
          if (repos == null) {
            repos=new HashSet<ArtifactRepository>();
            repositoryArtifacts.put(id,repos);
          }
          repos.addAll(remoteRepositories);
        }
      }
    }
  }
  return repositoryArtifacts;
}
