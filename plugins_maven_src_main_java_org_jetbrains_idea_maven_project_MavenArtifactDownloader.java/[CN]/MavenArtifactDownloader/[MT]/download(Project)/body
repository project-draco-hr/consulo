{
  final MavenProjectsState projectsState=MavenProjectsState.getInstance(project);
  final MavenImporter importer=MavenImporter.getInstance(project);
  final Map<MavenProject,Collection<String>> mavenProjects=new HashMap<MavenProject,Collection<String>>();
  for (  VirtualFile file : projectsState.getFiles()) {
    if (!projectsState.isIgnored(file)) {
      MavenProject mavenProject=projectsState.getMavenProject(file);
      if (mavenProject != null) {
        mavenProjects.put(mavenProject,projectsState.getProfiles(file));
      }
    }
  }
  final Map<MavenProject,Module> projectsToModules=new HashMap<MavenProject,Module>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    VirtualFile pomFile=importer.findPomForModule(module);
    if (pomFile != null && !projectsState.isIgnored(pomFile)) {
      MavenProject mavenProject=projectsState.getMavenProject(pomFile);
      if (mavenProject != null) {
        projectsToModules.put(mavenProject,module);
      }
    }
  }
  try {
    final MavenEmbedder mavenEmbedder=MavenFactory.createEmbedderForRead(project.getComponent(MavenCore.class).getState());
    try {
      Progress.run(project,ProjectBundle.message("maven.title.downloading"),new Progress.Process(){
        public void run(        Progress p) throws MavenException, CanceledException {
          Collection<MavenId> moduleIds=new ArrayList<MavenId>();
          for (          MavenProject mavenProject : projectsToModules.keySet()) {
            moduleIds.add(new MavenId(mavenProject.getArtifact()));
          }
          new MavenArtifactDownloader(importer.getArtifactSettings(),mavenEmbedder,p).download(project,mavenProjects,moduleIds,true);
        }
      }
);
    }
  finally {
      MavenFactory.releaseEmbedder(mavenEmbedder);
    }
  }
 catch (  MavenException e) {
    LOG.info("Maven Embedder initialization failed: " + e.getMessage());
  }
  VirtualFileManager.getInstance().refresh(false);
}
