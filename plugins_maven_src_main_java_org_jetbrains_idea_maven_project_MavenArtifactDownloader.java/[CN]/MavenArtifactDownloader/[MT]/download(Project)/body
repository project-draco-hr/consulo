{
  final MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(project);
  final MavenImporter importer=MavenImporter.getInstance(project);
  final Map<MavenProject,Collection<String>> mavenProjects=new HashMap<MavenProject,Collection<String>>();
  final Map<VirtualFile,MavenProject> fileToProject=new HashMap<VirtualFile,MavenProject>();
  final MavenEmbedder e=MavenFactory.createEmbedderForRead(MavenCore.getInstance(project).getState());
  try {
    for (    VirtualFile file : projectsManager.getFiles()) {
      if (!projectsManager.isIgnored(file)) {
        MavenProject p=projectsManager.getResolvedProject(file);
        if (p == null)         continue;
        mavenProjects.put(p,projectsManager.getActiveProfiles(file));
        fileToProject.put(file,p);
      }
    }
    final Map<MavenProject,Module> projectsToModules=new HashMap<MavenProject,Module>();
    for (    Module module : ModuleManager.getInstance(project).getModules()) {
      VirtualFile pomFile=importer.findPomForModule(module);
      if (pomFile != null && !projectsManager.isIgnored(pomFile)) {
        MavenProject mavenProject=fileToProject.get(pomFile);
        if (mavenProject != null) {
          projectsToModules.put(mavenProject,module);
        }
      }
    }
    Progress.run(project,ProjectBundle.message("maven.downloading"),new Progress.Process(){
      public void run(      Progress p) throws MavenException, CanceledException {
        Collection<ProjectId> projectIds=new ArrayList<ProjectId>();
        for (        MavenProject mavenProject : projectsToModules.keySet()) {
          projectIds.add(new ProjectId(mavenProject.getArtifact()));
        }
        new MavenArtifactDownloader(importer.getArtifactSettings(),e,p).download(project,mavenProjects,fileToProject,projectIds,true);
      }
    }
);
  }
  finally {
    MavenFactory.releaseEmbedder(e);
  }
  VirtualFileManager.getInstance().refresh(false);
}
