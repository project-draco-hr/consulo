{
  super.paint(g);
  final Dimension size=getSize();
  final Insets insets=getInsets();
  final int x=insets.left;
  final int y=insets.top;
  final Runtime runtime=Runtime.getRuntime();
  final long freeMemory=runtime.freeMemory();
  final long totalMemory=runtime.totalMemory();
  final int totalBarLength=size.width - (insets.left + insets.right);
  final int usedBarLength=totalBarLength - (int)(totalBarLength * freeMemory / totalMemory);
  final int barHeight=size.height - (insets.bottom + insets.top);
  final Graphics2D g2=(Graphics2D)g;
  g2.setPaint(new GradientPaint(x,y,ourColorUsed,x,barHeight / 2,ourColorUsed2,true));
  g.fillRect(x,y,usedBarLength,barHeight);
  g.setColor(ourColorFree);
  g.fillRect(x + usedBarLength,y,totalBarLength - usedBarLength,barHeight);
  g.setFont(getStatusFont());
  g.setColor(Color.black);
  final String info=Long.toString((totalMemory - freeMemory) / MEGABYTE) + "M of " + Long.toString(totalMemory / MEGABYTE)+ 'M';
  final FontMetrics fontMetrics=g.getFontMetrics();
  final int infoWidth=fontMetrics.charsWidth(info.toCharArray(),0,info.length());
  final int infoHeight=fontMetrics.getHeight() - fontMetrics.getDescent();
  g.drawString(info,x + (totalBarLength - infoWidth) / 2,y + (barHeight + infoHeight) / 2);
}
