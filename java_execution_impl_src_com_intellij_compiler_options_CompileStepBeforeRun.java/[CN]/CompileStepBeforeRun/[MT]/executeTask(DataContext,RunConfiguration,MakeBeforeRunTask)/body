{
  if (!(configuration instanceof RunProfileWithCompileBeforeLaunchOption)) {
    return true;
  }
  final RunProfileWithCompileBeforeLaunchOption runConfiguration=(RunProfileWithCompileBeforeLaunchOption)configuration;
  final Semaphore done=new Semaphore();
  final boolean[] result=new boolean[1];
  try {
    final CompileStatusNotification callback=new CompileStatusNotification(){
      public void finished(      final boolean aborted,      final int errors,      final int warnings,      CompileContext compileContext){
        if (errors == 0 && !aborted) {
          result[0]=true;
        }
        done.up();
      }
    }
;
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      public void run(){
        CompileScope scope;
        final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
        if (Boolean.valueOf(System.getProperty(MAKE_PROJECT_ON_RUN_KEY,Boolean.FALSE.toString())).booleanValue()) {
          scope=compilerManager.createProjectCompileScope(myProject);
        }
 else {
          final Module[] modules=runConfiguration.getModules();
          if (modules.length > 0) {
            for (            Module module : modules) {
              if (module == null) {
                LOG.error("RunConfiguration should not return null modules. Configuration=" + runConfiguration.getName() + "; class="+ runConfiguration.getClass().getName());
              }
            }
            scope=compilerManager.createModulesCompileScope(modules,true);
          }
 else {
            scope=compilerManager.createProjectCompileScope(myProject);
          }
        }
        if (!myProject.isDisposed()) {
          done.down();
          scope.putUserData(RUN_CONFIGURATION,configuration);
          compilerManager.make(scope,callback);
        }
      }
    }
,ModalityState.NON_MODAL);
  }
 catch (  Exception e) {
    return false;
  }
  done.waitFor();
  return result[0];
}
