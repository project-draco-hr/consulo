{
  final TextRange[] cachedFiles=getCachedRanges(attribute);
  if (cachedFiles != null) {
    return cachedFiles;
  }
  final String value=attribute.getDisplayValue();
  if (value == null)   return EMPTY_ARRAY;
  final TextRange[] ranges;
  if (XsltSupport.mayBeAVT(attribute)) {
    final List<TextRange> avtRanges=new SmartList<TextRange>();
    int i;
    int j=0;
    final Lexer lexer=myParserDefinition.getValue().createLexer(attribute.getProject());
    while ((i=XsltSupport.getAVTOffset(value,j)) != -1) {
      lexer.start(value,i,value.length());
      j=-1;
      while (lexer.getTokenType() != null) {
        if (lexer.getTokenType() == XPathTokenTypes.RBRACE) {
          j=lexer.getTokenStart();
          break;
        }
        lexer.advance();
      }
      if (j != -1) {
        avtRanges.add(AVTRange.create(attribute,i,j + 1,true));
      }
 else {
        avtRanges.add(AVTRange.create(attribute,i,value.length(),false));
        break;
      }
    }
    if (avtRanges.size() > 0) {
      ranges=avtRanges.toArray(new TextRange[avtRanges.size()]);
    }
 else {
      ranges=EMPTY_ARRAY;
    }
  }
 else {
    ranges=new TextRange[]{attribute.getValueTextRange()};
  }
  attribute.putUserData(CACHED_FILES,Pair.create(attribute.getValue(),ranges));
  return ranges;
}
