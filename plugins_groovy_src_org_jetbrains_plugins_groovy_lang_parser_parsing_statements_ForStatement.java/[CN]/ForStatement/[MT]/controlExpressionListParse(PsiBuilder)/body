{
  GroovyElementType result=StrictContextExpression.parse(builder);
  if (result.equals(WRONGWAY)) {
    return WRONGWAY;
  }
  while (mCOMMA.equals(builder.getTokenType()) || !result.equals(WRONGWAY)) {
    if (ParserUtils.lookAhead(builder,mCOMMA,mNLS,mRPAREN) || ParserUtils.lookAhead(builder,mCOMMA,mRPAREN)) {
      ParserUtils.getToken(builder,mCOMMA);
      builder.error(GroovyBundle.message("expression.expected"));
    }
 else {
      ParserUtils.getToken(builder,mCOMMA);
    }
    ParserUtils.getToken(builder,mNLS);
    result=StrictContextExpression.parse(builder);
    if (result.equals(WRONGWAY)) {
      ParserUtils.getToken(builder,mNLS);
      if (!mRPAREN.equals(builder.getTokenType()) && !mSEMI.equals(builder.getTokenType())) {
        builder.error(GroovyBundle.message("expression.expected"));
      }
      if (!mRPAREN.equals(builder.getTokenType()) && !mSEMI.equals(builder.getTokenType()) && !mCOMMA.equals(builder.getTokenType())&& !mNLS.equals(builder.getTokenType())) {
        builder.advanceLexer();
      }
    }
  }
  return FOR_TRADITIONAL_CLAUSE;
}
