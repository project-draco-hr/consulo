{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,kFOR);
  if (!ParserUtils.getToken(builder,mLPAREN,GroovyBundle.message("lparen.expected"))) {
    marker.done(FOR_STATEMENT);
    return true;
  }
  if (!forClauseParse(builder)) {
    builder.error(GroovyBundle.message("for.clause.expected"));
    marker.done(FOR_STATEMENT);
    return true;
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {
      builder.advanceLexer();
    }
    marker.done(FOR_STATEMENT);
    return true;
  }
  PsiBuilder.Marker warn=builder.mark();
  if (builder.getTokenType() == mNLS) {
    ParserUtils.getToken(builder,mNLS);
  }
  if (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {
    warn.rollbackTo();
    marker.done(FOR_STATEMENT);
    return true;
  }
  if (!Statement.parse(builder,true)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("expression.expected"));
    marker.done(FOR_STATEMENT);
    return true;
  }
 else {
    warn.drop();
    marker.done(FOR_STATEMENT);
    return true;
  }
}
