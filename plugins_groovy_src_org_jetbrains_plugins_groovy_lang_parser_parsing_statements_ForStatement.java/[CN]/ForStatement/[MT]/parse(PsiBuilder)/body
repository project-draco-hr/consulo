{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,kFOR);
  if (!ParserUtils.getToken(builder,mLPAREN,GroovyBundle.message("lparen.expected"))) {
    marker.done(FOR_STATEMENT);
    return FOR_STATEMENT;
  }
  if (WRONGWAY.equals(forClauseParse(builder))) {
    builder.error(GroovyBundle.message("for.clause.expected"));
    marker.done(FOR_STATEMENT);
    return FOR_STATEMENT;
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    marker.done(FOR_STATEMENT);
    return FOR_STATEMENT;
  }
  PsiBuilder.Marker warn=builder.mark();
  if (ParserUtils.lookAhead(builder,mNLS)) {
    ParserUtils.getToken(builder,mNLS);
  }
  GroovyElementType result;
  if (mLCURLY.equals(builder.getTokenType())) {
    result=OpenOrClosableBlock.parseOpenBlock(builder);
  }
 else {
    result=Statement.parse(builder);
  }
  if (result.equals(WRONGWAY) || result.equals(IMPORT_STATEMENT)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("expression.expected"));
    marker.done(FOR_STATEMENT);
    return FOR_STATEMENT;
  }
 else {
    warn.drop();
    marker.done(FOR_STATEMENT);
    return FOR_STATEMENT;
  }
}
