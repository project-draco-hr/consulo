{
  PsiBuilder.Marker marker=builder.mark();
  PsiBuilder.Marker parameterMarker=builder.mark();
  Modifiers.parse(builder,parser);
  if (ParserUtils.lookAhead(builder,mIDENT,kIN) || ParserUtils.lookAhead(builder,mIDENT,mCOLON)) {
    ParserUtils.getToken(builder,mIDENT);
  }
 else {
    TypeSpec.parseStrict(builder);
    ParserUtils.getToken(builder,mIDENT,GroovyBundle.message("identifier.expected"));
  }
  parameterMarker.done(PARAMETER);
  if (!ParserUtils.getToken(builder,kIN) && !ParserUtils.getToken(builder,mCOLON)) {
    builder.error(GroovyBundle.message("in.expected"));
    marker.drop();
    return false;
  }
  if (!ShiftExpression.parse(builder,parser)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  marker.done(FOR_IN_CLAUSE);
  return true;
}
