{
  PsiBuilder.Marker marker=builder.mark();
  PsiBuilder.Marker declMarker=builder.mark();
  if (ParserUtils.lookAhead(builder,mIDENT,kIN)) {
    ParserUtils.eatElement(builder,PARAMETER);
    declMarker.drop();
    ParserUtils.getToken(builder,kIN);
    if (!ShiftExpression.parse(builder)) {
      builder.error(GroovyBundle.message("expression.expected"));
    }
    marker.done(FOR_IN_CLAUSE);
    return FOR_IN_CLAUSE;
  }
  if (DeclarationStart.parse(builder)) {
    if (Modifiers.parse(builder)) {
      TypeSpec.parse(builder);
      return singleDeclNoInitParse(builder,marker,declMarker);
    }
  }
  if (!WRONGWAY.equals(TypeSpec.parse(builder))) {
    return singleDeclNoInitParse(builder,marker,declMarker);
  }
  declMarker.drop();
  marker.drop();
  return WRONGWAY;
}
