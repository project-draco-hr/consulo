{
  final Long stamp=myEditor.getUserData(LAST_TIME_INDENTS_BUILT);
  if (stamp != null && stamp.longValue() == nowStamp())   return;
  List<RangeHighlighter> oldHighlighters=myEditor.getUserData(INDENT_HIGHLIGHTERS_IN_EDITOR_KEY);
  List<RangeHighlighter> newHighlighters=new ArrayList<RangeHighlighter>();
  MarkupModel mm=myEditor.getMarkupModel();
  int curRange=0;
  if (oldHighlighters != null) {
    int curHighlight=0;
    while (curRange < myRanges.size() && curHighlight < oldHighlighters.size()) {
      TextRange range=myRanges.get(curRange);
      RangeHighlighter highlighter=oldHighlighters.get(curHighlight);
      int cmp=compare(range,highlighter);
      if (cmp < 0) {
        newHighlighters.add(createHighlighter(mm,range));
        curRange++;
      }
 else       if (cmp > 0) {
        highlighter.dispose();
        curHighlight++;
      }
 else {
        newHighlighters.add(highlighter);
        curHighlight++;
        curRange++;
      }
    }
    for (; curHighlight < oldHighlighters.size(); curHighlight++) {
      RangeHighlighter highlighter=oldHighlighters.get(curHighlight);
      highlighter.dispose();
    }
  }
  for (; curRange < myRanges.size(); curRange++) {
    newHighlighters.add(createHighlighter(mm,myRanges.get(curRange)));
  }
  myEditor.putUserData(INDENT_HIGHLIGHTERS_IN_EDITOR_KEY,newHighlighters);
  myEditor.putUserData(LAST_TIME_INDENTS_BUILT,nowStamp());
  myEditor.getIndentsModel().assumeIndents(myDescriptors);
}
