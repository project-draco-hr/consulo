{
  final Long stamp=myEditor.getUserData(LAST_TIME_INDENTS_BUILT);
  if (stamp != null && stamp.longValue() == nowStamp())   return;
  List<IndentGuideDescriptor> descriptors=buildDescriptors();
  List<TextRange> ranges=new ArrayList<TextRange>();
  for (  IndentGuideDescriptor descriptor : descriptors) {
    int endOffset=descriptor.endLine < myDocument.getLineCount() ? myDocument.getLineStartOffset(descriptor.endLine) : myDocument.getTextLength();
    ranges.add(new TextRange(myDocument.getLineStartOffset(descriptor.startLine),endOffset));
  }
  Collections.sort(ranges,RANGE_COMPARATOR);
  List<RangeHighlighter> oldHighlighters=myEditor.getUserData(INDENT_HIGHLIGHTERS_IN_EDITOR_KEY);
  List<RangeHighlighter> newHighlighters=new ArrayList<RangeHighlighter>();
  MarkupModel mm=myEditor.getMarkupModel();
  int curRange=0;
  if (oldHighlighters != null) {
    int curHighlight=0;
    while (curRange < ranges.size() && curHighlight < oldHighlighters.size()) {
      TextRange range=ranges.get(curRange);
      RangeHighlighter highlighter=oldHighlighters.get(curHighlight);
      int cmp=compare(range,highlighter);
      if (cmp < 0) {
        newHighlighters.add(createHighlighter(mm,range));
        curRange++;
      }
 else       if (cmp > 0) {
        mm.removeHighlighter(highlighter);
        curHighlight++;
      }
 else {
        newHighlighters.add(highlighter);
        curHighlight++;
        curRange++;
      }
    }
    for (; curHighlight < oldHighlighters.size(); curHighlight++) {
      mm.removeHighlighter(oldHighlighters.get(curHighlight));
    }
  }
  for (; curRange < ranges.size(); curRange++) {
    newHighlighters.add(createHighlighter(mm,ranges.get(curRange)));
  }
  myEditor.putUserData(INDENT_HIGHLIGHTERS_IN_EDITOR_KEY,newHighlighters);
  myEditor.putUserData(LAST_TIME_INDENTS_BUILT,nowStamp());
  myEditor.getIndentsModel().assumeIndents(descriptors);
}
