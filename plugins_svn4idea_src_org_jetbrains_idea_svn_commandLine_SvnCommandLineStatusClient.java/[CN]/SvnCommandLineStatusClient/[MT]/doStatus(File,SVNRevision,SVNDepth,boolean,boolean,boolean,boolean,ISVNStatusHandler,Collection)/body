{
  final File base=path.isDirectory() ? path : path.getParentFile();
  final SVNInfo infoBase=myInfoClient.doInfo(base,revision);
  final SvnSimpleCommand command=new SvnSimpleCommand(myProject,base,SvnCommandName.st);
  putParameters(depth,remote,reportAll,includeIgnored,changeLists,command);
  final SvnStatusHandler[] svnHandl=new SvnStatusHandler[1];
  svnHandl[0]=createStatusHandler(revision,handler,base,infoBase,svnHandl);
  try {
    final String result=command.run();
    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(new ByteArrayInputStream(result.getBytes(CharsetToolkit.UTF8_CHARSET)),svnHandl[0]);
    if (!svnHandl[0].isAnythingReported()) {
      if (!SvnUtil.isSvnVersioned(myProject,path)) {
        throw new SVNException(SVNErrorMessage.create(SVNErrorCode.WC_NOT_DIRECTORY));
      }
    }
  }
 catch (  SvnExceptionWrapper e) {
    throw (SVNException)e.getCause();
  }
catch (  IOException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  ParserConfigurationException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  SAXException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  VcsException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
  return 0;
}
