'hooks for controlling repository access\n\nThis hook makes it possible to allow or deny write access to portions\nof a repository when receiving incoming changesets.\n\nThe authorization is matched based on the local user name on the\nsystem where the hook runs, and not the committer of the original\nchangeset (since the latter is merely informative).\n\nThe acl hook is best used along with a restricted shell like hgsh,\npreventing authenticating users from doing anything other than\npushing or pulling. The hook is not safe to use if users have\ninteractive shell access, as they can then disable the hook.\nNor is it safe if remote users share an account, because then there\nis no way to distinguish them.\n\nTo use this hook, configure the acl extension in your hgrc like this::\n\n  [extensions]\n  acl =\n\n  [hooks]\n  pretxnchangegroup.acl = python:hgext.acl.hook\n\n  [acl]\n  # Check whether the source of incoming changes is in this list\n  # ("serve" == ssh or http, "push", "pull", "bundle")\n  sources = serve\n\nThe allow and deny sections take a subtree pattern as key (with a glob\nsyntax by default), and a comma separated list of users as the\ncorresponding value. The deny list is checked before the allow list\nis. ::\n\n  [acl.allow]\n  # If acl.allow is not present, all users are allowed by default.\n  # An empty acl.allow section means no users allowed.\n  docs/** = doc_writer\n  .hgtags = release_engineer\n\n  [acl.deny]\n  # If acl.deny is not present, no users are refused by default.\n  # An empty acl.deny section means all users allowed.\n  glob pattern = user4, user5\n   ** = user6\n'
from mercurial.i18n import _
from mercurial import util, match
import getpass, urllib
