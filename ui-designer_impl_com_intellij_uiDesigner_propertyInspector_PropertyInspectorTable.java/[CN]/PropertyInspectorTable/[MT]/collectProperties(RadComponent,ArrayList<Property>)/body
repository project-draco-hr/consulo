{
  if (component instanceof RadRootContainer) {
    result.add(myClassToBindProperty);
    result.add(myLayoutManagerProperty);
  }
 else {
    final boolean isVSpacer=component instanceof RadVSpacer;
    final boolean isHSpacer=component instanceof RadHSpacer;
    final boolean isSpacer=isVSpacer || isHSpacer;
    if (!isSpacer) {
      result.add(myBindingProperty);
    }
    final RadContainer parent=component.getParent();
    final boolean inGrid=parent != null && parent.isGrid();
    if (component instanceof RadContainer) {
      result.add(myBorderProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).isGrid()) {
      result.add(myMarginProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).getLayout() instanceof AbstractLayout) {
      result.add(myHGapProperty);
      result.add(myVGapProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).isGrid()) {
      result.add(mySameSizeHorizontallyProperty);
      result.add(mySameSizeVerticallyProperty);
    }
    if (inGrid) {
      if (!isVSpacer) {
        result.add(myHSizePolicyProperty);
      }
      if (!isHSpacer) {
        result.add(myVSizePolicyProperty);
      }
      if (!isSpacer) {
        result.add(myFillProperty);
        result.add(myAnchorProperty);
      }
      if (myRowSpanProperty.appliesTo(component)) {
        result.add(myRowSpanProperty);
      }
      if (myColumnSpanProperty.appliesTo(component)) {
        result.add(myColumnSpanProperty);
      }
      result.add(myMinimumSizeProperty);
      result.add(myPreferredSizeProperty);
      result.add(myMaximumSizeProperty);
    }
    if (!isSpacer && !(component instanceof RadErrorComponent)) {
      final Class componentClass=component.getComponentClass();
      final Property[] introspectedProperties=Palette.getInstance(myEditor.getProject()).getIntrospectedProperties(componentClass);
      final Properties properties=Properties.getInstance();
      for (      final Property property : introspectedProperties) {
        if (!myShowExpertProperties && properties.isExpertProperty(componentClass,property.getName())) {
          continue;
        }
        result.add(property);
      }
    }
  }
}
