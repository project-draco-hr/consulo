{
  if (component instanceof RadRootContainer) {
    addProperty(result,myClassToBindProperty);
  }
 else {
    final boolean isVSpacer=component instanceof RadVSpacer;
    final boolean isHSpacer=component instanceof RadHSpacer;
    final boolean isSpacer=isVSpacer || isHSpacer;
    if (!isSpacer) {
      addProperty(result,myBindingProperty);
    }
    final RadContainer parent=component.getParent();
    final boolean inGrid=parent != null && parent.isGrid();
    if (component instanceof RadContainer) {
      addProperty(result,myLayoutManagerProperty);
      addProperty(result,myBorderProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).isGrid()) {
      addProperty(result,myMarginProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).getLayout() instanceof AbstractLayout) {
      addProperty(result,myHGapProperty);
      addProperty(result,myVGapProperty);
    }
    if (component instanceof RadContainer && ((RadContainer)component).isGrid()) {
      addProperty(result,mySameSizeHorizontallyProperty);
      addProperty(result,mySameSizeVerticallyProperty);
    }
    if (inGrid) {
      if (!isVSpacer) {
        addProperty(result,myHSizePolicyProperty);
      }
      if (!isHSpacer) {
        addProperty(result,myVSizePolicyProperty);
      }
      if (!isSpacer) {
        addProperty(result,myFillProperty);
        addProperty(result,myAnchorProperty);
      }
      if (myRowSpanProperty.appliesTo(component)) {
        addProperty(result,myRowSpanProperty);
      }
      if (myColumnSpanProperty.appliesTo(component)) {
        addProperty(result,myColumnSpanProperty);
      }
      if (myIndentProperty.appliesTo(component)) {
        addProperty(result,myIndentProperty);
      }
      if (myUseParentLayoutProperty.appliesTo(component)) {
        addProperty(result,myUseParentLayoutProperty);
      }
      addProperty(result,myMinimumSizeProperty);
      addProperty(result,myPreferredSizeProperty);
      addProperty(result,myMaximumSizeProperty);
    }
    if (component.getDelegee() instanceof AbstractButton && !(component.getDelegee() instanceof JButton)) {
      addProperty(result,myButtonGroupProperty);
    }
    if (component.hasIntrospectedProperties()) {
      final Class componentClass=component.getComponentClass();
      final Property[] introspectedProperties=Palette.getInstance(myEditor.getProject()).getIntrospectedProperties(componentClass);
      final Properties properties=Properties.getInstance();
      for (      final Property property : introspectedProperties) {
        if (!myShowExpertProperties && properties.isExpertProperty(componentClass,property.getName())) {
          continue;
        }
        addProperty(result,property);
      }
    }
  }
}
