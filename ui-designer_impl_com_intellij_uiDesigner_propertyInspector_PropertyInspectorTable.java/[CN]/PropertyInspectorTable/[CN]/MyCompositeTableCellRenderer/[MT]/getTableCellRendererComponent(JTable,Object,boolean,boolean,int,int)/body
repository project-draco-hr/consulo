{
  myPropertyNameRenderer.getTableCellRendererComponent(table,value,selected,hasFocus,row,column);
  column=table.convertColumnIndexToModel(column);
  final Property property=(Property)value;
  final Color background;
  final Property parent=property.getParent();
  if (property instanceof IntrospectedProperty) {
    background=table.getBackground();
  }
 else {
    background=parent == null ? SYNTETIC_PROPERTY_BACKGROUND : SYNTETIC_SUBPROPERTY_BACKGROUND;
  }
  if (!selected) {
    myPropertyNameRenderer.setBackground(background);
  }
  if (column == 0) {
    SimpleTextAttributes attrs=getTextAttributes(row,property);
    myPropertyNameRenderer.append(property.getName(),attrs);
    if (getPropChildren(property).length > 0) {
      if (parent != null) {
        if (isPropertyExpanded(property,parent)) {
          myPropertyNameRenderer.setIcon(myIndentedCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myIndentedExpandIcon);
        }
      }
 else {
        if (isPropertyExpanded(property,parent)) {
          myPropertyNameRenderer.setIcon(myCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myExpandIcon);
        }
      }
    }
 else {
      myPropertyNameRenderer.setIcon(myIndentIcons[getPropertyIndent(property)]);
    }
  }
 else   if (column == 1) {
    try {
      final PropertyRenderer renderer=property.getRenderer();
      final JComponent component=renderer.getComponent(myEditor.getRootContainer(),getSelectionValue(property),selected,hasFocus);
      if (!selected) {
        component.setBackground(background);
      }
      if (isModifiedForSelection(property)) {
        component.setFont(table.getFont().deriveFont(Font.BOLD));
      }
 else {
        component.setFont(table.getFont());
      }
      return component;
    }
 catch (    Exception ex) {
      LOG.debug(ex);
      myErrorRenderer.clear();
      myErrorRenderer.append(UIDesignerBundle.message("error.getting.value",ex.getMessage()),SimpleTextAttributes.ERROR_ATTRIBUTES);
      return myErrorRenderer;
    }
  }
 else {
    throw new IllegalArgumentException("wrong column: " + column);
  }
  if (!selected) {
    myPropertyNameRenderer.setForeground(PropertyInspectorTable.this.getForeground());
    if (property instanceof IntrospectedProperty) {
      final RadComponent component=mySelection.get(0);
      final Class componentClass=component.getComponentClass();
      if (Properties.getInstance().isExpertProperty(component.getModule(),componentClass,property.getName())) {
        myPropertyNameRenderer.setForeground(Color.LIGHT_GRAY);
      }
    }
  }
  return myPropertyNameRenderer;
}
