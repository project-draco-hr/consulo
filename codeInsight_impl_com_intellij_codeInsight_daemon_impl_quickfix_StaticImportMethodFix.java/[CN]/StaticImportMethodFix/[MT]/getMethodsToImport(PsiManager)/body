{
  PsiShortNamesCache cache=manager.getShortNamesCache();
  PsiReferenceExpression reference=myMethodCall.getMethodExpression();
  PsiExpressionList argumentList=myMethodCall.getArgumentList();
  String name=reference.getReferenceName();
  GlobalSearchScope scope=myMethodCall.getResolveScope();
  PsiMethod[] methods=cache.getMethodsByName(name,scope);
  ArrayList<PsiMethod> list=new ArrayList<PsiMethod>();
  ArrayList<PsiMethod> applicableList=new ArrayList<PsiMethod>();
  for (  PsiMethod method : methods) {
    PsiClass aClass=method.getContainingClass();
    if (aClass != null && CompletionUtil.isInExcludedPackage(aClass))     continue;
    if (!method.hasModifierProperty(PsiModifier.STATIC))     continue;
    PsiFile file=method.getContainingFile();
    if (file instanceof PsiJavaFile) {
      if (((PsiJavaFile)file).getPackageName().length() != 0) {
        if (PsiUtil.isAccessible(method,myMethodCall,aClass)) {
          list.add(method);
          if (PsiUtil.isApplicable(method,PsiSubstitutor.EMPTY,argumentList)) {
            applicableList.add(method);
          }
        }
      }
    }
  }
  return applicableList.isEmpty() ? list : applicableList;
}
