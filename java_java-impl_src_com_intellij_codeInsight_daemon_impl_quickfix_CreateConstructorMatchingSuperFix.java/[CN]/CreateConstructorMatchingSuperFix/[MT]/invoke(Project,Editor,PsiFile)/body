{
  if (!FileModificationService.getInstance().prepareFileForWrite(myClass.getContainingFile()))   return;
  PsiClass baseClass=myClass.getSuperClass();
  LOG.assertTrue(baseClass != null);
  PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,myClass,PsiSubstitutor.EMPTY);
  List<PsiMethodMember> baseConstructors=new ArrayList<PsiMethodMember>();
  PsiMethod[] baseConstrs=baseClass.getConstructors();
  for (  PsiMethod baseConstr : baseConstrs) {
    if (PsiUtil.isAccessible(baseConstr,myClass,myClass))     baseConstructors.add(new PsiMethodMember(baseConstr,substitutor));
  }
  chooseConstructor2Delegate(project,editor,substitutor,baseConstructors,baseConstrs,myClass);
}
