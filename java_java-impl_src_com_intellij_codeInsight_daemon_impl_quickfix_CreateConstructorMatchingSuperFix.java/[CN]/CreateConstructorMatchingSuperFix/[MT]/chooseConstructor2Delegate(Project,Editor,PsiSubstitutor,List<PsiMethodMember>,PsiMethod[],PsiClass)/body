{
  PsiMethodMember[] constructors=baseConstructors.toArray(new PsiMethodMember[baseConstructors.size()]);
  if (constructors.length == 0) {
    constructors=new PsiMethodMember[baseConstrs.length];
    for (int i=0; i < baseConstrs.length; i++) {
      constructors[i]=new PsiMethodMember(baseConstrs[i],substitutor);
    }
  }
  LOG.assertTrue(constructors.length >= 1);
  boolean isCopyJavadoc=true;
  if (constructors.length > 1) {
    MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(constructors,false,true,project);
    chooser.setTitle(QuickFixBundle.message("super.class.constructors.chooser.title"));
    chooser.show();
    if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)     return;
    constructors=chooser.getSelectedElements(new PsiMethodMember[0]);
    isCopyJavadoc=chooser.isCopyJavadoc();
  }
  final PsiMethodMember[] constructors1=constructors;
  final boolean isCopyJavadoc1=isCopyJavadoc;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        if (targetClass.getLBrace() == null) {
          PsiClass psiClass=JavaPsiFacade.getInstance(targetClass.getProject()).getElementFactory().createClass("X");
          targetClass.addRangeAfter(psiClass.getLBrace(),psiClass.getRBrace(),targetClass.getLastChild());
        }
        JVMElementFactory factory=JVMElementFactories.getFactory(targetClass.getLanguage(),project);
        CodeStyleManager formatter=CodeStyleManager.getInstance(project);
        PsiMethod derived=null;
        for (        PsiMethodMember candidate : constructors1) {
          PsiMethod base=candidate.getElement();
          derived=GenerateMembersUtil.substituteGenericMethod(base,candidate.getSubstitutor(),targetClass);
          if (!isCopyJavadoc1) {
            final PsiDocComment docComment=derived.getDocComment();
            if (docComment != null) {
              docComment.delete();
            }
          }
          final String targetClassName=targetClass.getName();
          LOG.assertTrue(targetClassName != null,targetClass);
          derived.setName(targetClassName);
          ConstructorBodyGenerator generator=ConstructorBodyGenerator.INSTANCE.forLanguage(derived.getLanguage());
          if (generator != null) {
            StringBuilder buffer=new StringBuilder();
            generator.start(buffer,derived.getName(),PsiParameter.EMPTY_ARRAY);
            generator.generateSuperCallIfNeeded(buffer,derived.getParameterList().getParameters());
            generator.finish(buffer);
            PsiMethod stub=factory.createMethodFromText(buffer.toString(),targetClass);
            derived.getBody().replace(stub.getBody());
          }
          derived=(PsiMethod)formatter.reformat(derived);
          derived=(PsiMethod)JavaCodeStyleManager.getInstance(project).shortenClassReferences(derived);
          PsiGenerationInfo<PsiMethod> info=OverrideImplementUtil.createGenerationInfo(derived);
          info.insert(targetClass,null,true);
          derived=info.getPsiMember();
        }
        if (derived != null) {
          editor.getCaretModel().moveToOffset(derived.getTextRange().getStartOffset());
          editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      UndoUtil.markPsiFileForUndo(targetClass.getContainingFile());
    }
  }
);
}
