{
  PsiMethodMember[] constructors=baseConstructors.toArray(new PsiMethodMember[baseConstructors.size()]);
  if (constructors.length == 0) {
    constructors=new PsiMethodMember[baseConstrs.length];
    for (int i=0; i < baseConstrs.length; i++) {
      constructors[i]=new PsiMethodMember(baseConstrs[i],substitutor);
    }
  }
  LOG.assertTrue(constructors.length >= 1);
  boolean isCopyJavadoc=true;
  if (constructors.length > 1) {
    MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(constructors,false,true,project);
    chooser.setTitle(QuickFixBundle.message("super.class.constructors.chooser.title"));
    chooser.show();
    if (chooser.getExitCode() != MemberChooser.OK_EXIT_CODE)     return;
    constructors=chooser.getSelectedElements(new PsiMethodMember[0]);
    isCopyJavadoc=chooser.isCopyJavadoc();
  }
  final PsiMethodMember[] constructors1=constructors;
  final boolean isCopyJavadoc1=isCopyJavadoc;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
        CodeStyleManager reformatter=CodeStyleManager.getInstance(project);
        PsiMethod derived=null;
        for (        PsiMethodMember candidate : constructors1) {
          PsiMethod base=candidate.getElement();
          derived=GenerateMembersUtil.substituteGenericMethod(base,candidate.getSubstitutor());
          if (!isCopyJavadoc1) {
            final PsiDocComment docComment=derived.getDocComment();
            if (docComment != null) {
              docComment.delete();
            }
          }
          derived.getNameIdentifier().replace(targetClass.getNameIdentifier());
          @NonNls StringBuffer buffer=new StringBuffer();
          buffer.append("void foo () {\nsuper(");
          PsiParameter[] params=derived.getParameterList().getParameters();
          for (int j=0; j < params.length; j++) {
            PsiParameter param=params[j];
            buffer.append(param.getName());
            if (j < params.length - 1)             buffer.append(",");
          }
          buffer.append(");\n}");
          PsiMethod stub=factory.createMethodFromText(buffer.toString(),targetClass);
          derived.getBody().replace(stub.getBody());
          derived=(PsiMethod)reformatter.reformat(derived);
          derived=(PsiMethod)targetClass.add(derived);
        }
        if (derived != null) {
          editor.getCaretModel().moveToOffset(derived.getTextRange().getStartOffset());
          editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      UndoUtil.markPsiFileForUndo(targetClass.getContainingFile());
    }
  }
);
}
