{
  PsiClass aClass=queryParameters.getPsiClass();
  final PsiMethod method=queryParameters.getMethod();
  MethodSignature signature=method.getSignature(queryParameters.getSubstitutor());
  final boolean checkBases=queryParameters.isCheckBases();
  final Map<PsiClass,PsiSubstitutor> substitutors=new HashMap<PsiClass,PsiSubstitutor>();
  for (  final PsiMethod baseMethod : aClass.findMethodsByName(method.getName(),checkBases)) {
    if (baseMethod.getParameterList().getParameters().length == method.getParameterList().getParameters().length) {
      PsiSubstitutor substitutor=substitutors.get(baseMethod.getContainingClass());
      if (substitutor == null) {
        substitutor=TypeConversionUtil.getClassSubstitutor(baseMethod.getContainingClass(),aClass,PsiSubstitutor.EMPTY);
        if (substitutor == null)         continue;
        substitutors.put(baseMethod.getContainingClass(),substitutor);
      }
      if (MethodSignatureUtil.isSubsignature(signature,baseMethod.getSignature(substitutor))) {
        if (!consumer.process(baseMethod))         return false;
      }
    }
  }
  return true;
}
