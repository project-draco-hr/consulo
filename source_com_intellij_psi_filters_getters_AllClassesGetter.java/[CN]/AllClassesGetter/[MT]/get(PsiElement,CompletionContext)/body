{
  if (context == null || !context.isValid())   return ArrayUtil.EMPTY_OBJECT_ARRAY;
  String prefix=context.getText().substring(0,completionContext.startOffset - context.getTextRange().getStartOffset());
  final int i=prefix.lastIndexOf('.');
  String packagePrefix="";
  if (i > 0) {
    packagePrefix=prefix.substring(0,i);
  }
  final PsiManager manager=context.getManager();
  final Set<PsiClass> classesSet=new THashSet<PsiClass>(new TObjectHashingStrategy<PsiClass>(){
    public int computeHashCode(    final PsiClass object){
      final String name=object.getQualifiedName();
      return name != null ? name.hashCode() : 0;
    }
    public boolean equals(    final PsiClass o1,    final PsiClass o2){
      return manager.areElementsEquivalent(o1,o2);
    }
  }
);
  final PsiShortNamesCache cache=manager.getShortNamesCache();
  final GlobalSearchScope scope=context.getContainingFile().getResolveScope();
  final String[] names=cache.getAllClassNames(true);
  boolean lookingForAnnotations=false;
  final PsiElement prevSibling=context.getParent().getPrevSibling();
  if (prevSibling instanceof PsiJavaToken && ((PsiJavaToken)prevSibling).getTokenType() == JavaTokenType.AT) {
    lookingForAnnotations=true;
  }
  for (  final String name : names) {
    if (!completionContext.prefixMatches(name))     continue;
    for (    PsiClass psiClass : cache.getClassesByName(name,scope)) {
      if (lookingForAnnotations && !psiClass.isAnnotationType())       continue;
      if (CompletionUtil.isInExcludedPackage(psiClass))       continue;
      final String qualifiedName=psiClass.getQualifiedName();
      if (qualifiedName == null || !qualifiedName.startsWith(packagePrefix))       continue;
      if (!myFilter.isAcceptable(psiClass,context))       continue;
      classesSet.add(psiClass);
    }
  }
  List<PsiClass> classesList=new ArrayList<PsiClass>(classesSet);
  Collections.sort(classesList,new Comparator<PsiClass>(){
    public int compare(    PsiClass psiClass,    PsiClass psiClass1){
      if (manager.areElementsEquivalent(psiClass,psiClass1))       return 0;
      return getClassIndex(psiClass) - getClassIndex(psiClass1);
    }
    private int getClassIndex(    PsiClass psiClass){
      if (psiClass.getManager().isInProject(psiClass))       return 2;
      final String qualifiedName=psiClass.getQualifiedName();
      if (qualifiedName.startsWith(JAVA_PACKAGE_PREFIX) || qualifiedName.startsWith(JAVAX_PACKAGE_PREFIX))       return 1;
      return 0;
    }
    public boolean equals(    Object o){
      return o == this;
    }
  }
);
  return ContainerUtil.map2Array(classesList,SimpleLookupItem.class,new NotNullFunction<PsiClass,SimpleLookupItem>(){
    @NotNull public SimpleLookupItem fun(    final PsiClass psiClass){
      return createLookupItem(psiClass);
    }
  }
);
}
