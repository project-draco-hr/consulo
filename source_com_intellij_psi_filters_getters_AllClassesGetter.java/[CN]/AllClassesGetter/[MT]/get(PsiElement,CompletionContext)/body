{
  if (context == null || !context.isValid())   return ArrayUtil.EMPTY_OBJECT_ARRAY;
  final List<PsiClass> classesList=new ArrayList<PsiClass>();
  final PsiManager manager=context.getManager();
  final PsiShortNamesCache cache=manager.getShortNamesCache();
  final String prefix=context.getUserData(CompletionUtil.COMPLETION_PREFIX);
  if (myPrefixStr != prefix) {
    myMatcher=new Perl5Matcher();
    myPattern=CompletionUtil.createCampelHumpsMatcher(prefix);
  }
  final GlobalSearchScope scope=context.getContainingFile().getResolveScope();
  final String[] names=cache.getAllClassNames(true);
  for (int i=0; i < names.length; i++) {
    final String name=names[i];
    if (prefix != null && !(CompletionUtil.checkName(name,prefix) || myMatcher.matches(name,myPattern)))     continue;
    classesList.addAll(Arrays.asList(cache.getClassesByName(name,scope)));
  }
  Collections.sort(classesList,new Comparator<PsiClass>(){
    public int compare(    PsiClass psiClass,    PsiClass psiClass1){
      if (manager.areElementsEquivalent(psiClass,psiClass1))       return 0;
      return getClassIndex(psiClass) - getClassIndex(psiClass1);
    }
    private int getClassIndex(    PsiClass psiClass){
      if (psiClass.getManager().isInProject(psiClass))       return 2;
      final String qualifiedName=psiClass.getQualifiedName();
      if (qualifiedName.startsWith("java.") || qualifiedName.startsWith("javax."))       return 1;
      return 0;
    }
    public boolean equals(    Object o){
      return o == this;
    }
  }
);
  return classesList.toArray(PsiClass.EMPTY_ARRAY);
}
