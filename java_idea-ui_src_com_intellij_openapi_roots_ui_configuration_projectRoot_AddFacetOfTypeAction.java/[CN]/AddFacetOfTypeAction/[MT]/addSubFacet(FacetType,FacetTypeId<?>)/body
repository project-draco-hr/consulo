{
  final StructureConfigurableContext context=myFacetStructureConfigurable.myContext;
  final ProjectFacetsConfigurator facetsConfigurator=context.getModulesConfigurator().getFacetsConfigurator();
  List<Facet> suitableParents=new ArrayList<Facet>();
  for (  Module module : context.getModules()) {
    if (type.isSuitableModuleType(module.getModuleType())) {
      suitableParents.addAll(facetsConfigurator.getFacetsByType(module,underlyingType));
    }
  }
  final Iterator<Facet> iterator=suitableParents.iterator();
  while (iterator.hasNext()) {
    Facet parent=iterator.next();
    if (type.isOnlyOneFacetAllowed() && facetsConfigurator.hasFacetOfType(parent.getModule(),parent,type.getId())) {
      iterator.remove();
    }
  }
  final Project project=context.getProject();
  if (suitableParents.isEmpty()) {
    final String parentType=FacetTypeRegistry.getInstance().findFacetType(underlyingType).getPresentableName();
    Messages.showErrorDialog(project,"No suitable parent " + parentType + " facets found","Cannot Create " + type.getPresentableName() + " Facet");
    return;
  }
  ChooseParentFacetDialog dialog=new ChooseParentFacetDialog(project,suitableParents,"Select Parent Facet",null);
  dialog.show();
  final List<Facet> chosen=dialog.getChosenElements();
  if (!dialog.isOK() || chosen.size() != 1)   return;
  final Facet parent=chosen.get(0);
  final Facet facet=ModuleStructureConfigurable.getInstance(project).getFacetEditorFacade().createAndAddFacet(type,parent.getModule(),parent);
  ProjectStructureConfigurable.getInstance(project).select(facet,true);
}
