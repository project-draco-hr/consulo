{
  final HashMap<String,String> result=new HashMap<String,String>();
  GitConfigUtil.getValues(project,root,null,result);
  String remote=result.get(trackedRemoteKey());
  if (remote == null) {
    return null;
  }
  String branch=result.get(trackedBranchKey());
  if (branch == null) {
    return null;
  }
  if (branch.startsWith(REFS_HEADS_PREFIX)) {
    branch=branch.substring(REFS_HEADS_PREFIX.length());
  }
 else   if (branch.startsWith(REFS_REMOTES_PREFIX)) {
    branch=branch.substring(REFS_REMOTES_PREFIX.length());
  }
  boolean remoteFlag;
  if (!".".equals(remote)) {
    branch=remote + "/" + branch;
    remoteFlag=true;
  }
 else {
    remoteFlag=false;
  }
  return new GitBranch(branch,false,remoteFlag);
}
