{
  final Module module=getModule();
  if (module == null) {
    throw new ExecutionException("Module is not specified");
  }
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
  final Sdk sdk=rootManager.getSdk();
  if (sdk == null || !(sdk.getSdkType() instanceof JavaSdkType)) {
    throw CantRunException.noJdkForModule(module);
  }
  final String groovyHomePath=LibrariesUtil.getGroovyHomePath(module);
  if (groovyHomePath == null) {
    Messages.showErrorDialog(module.getProject(),ExecutionBundle.message("error.running.configuration.with.error.error.message",getName(),"Groovy is not configured"),ExecutionBundle.message("run.error.message.title"));
    ModulesConfigurator.showDialog(module.getProject(),module.getName(),ClasspathEditor.NAME,false);
    return null;
  }
  final VirtualFile script=getScriptFile();
  if (script == null) {
    throw new CantRunException("Cannot find script " + scriptPath);
  }
  final GroovyConfiguration configuration=findConfiguration();
  if (configuration == null) {
    throw new CantRunException("Unknown script type " + scriptPath);
  }
  if (!configuration.ensureRunnerConfigured(module,groovyHomePath)) {
    return null;
  }
  final boolean tests=ProjectRootManager.getInstance(getProject()).getFileIndex().isInTestSourceContent(script);
  final JavaCommandLineState state=new JavaCommandLineState(environment){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      JavaParameters params=new JavaParameters();
      params.setCharset(null);
      params.setJdk(ModuleRootManager.getInstance(module).getSdk());
      params.setWorkingDirectory(getAbsoluteWorkDir());
      final String confPath=configuration.getConfPath(module);
      final String groovyHome=FileUtil.toSystemDependentName(groovyHomePath);
      configuration.configureCommandLine(params,module,tests,script,confPath,groovyHome,AbstractGroovyScriptRunConfiguration.this);
      if (isDebugEnabled) {
        params.getProgramParametersList().add("--debug");
      }
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuilderFactory.getInstance().createBuilder(getProject()));
  return state;
}
