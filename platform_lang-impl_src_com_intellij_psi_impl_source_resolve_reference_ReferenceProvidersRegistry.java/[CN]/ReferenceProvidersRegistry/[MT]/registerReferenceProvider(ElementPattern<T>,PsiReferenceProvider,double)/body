{
  myKnownSupers.clear();
  final Class scope=pattern.getCondition().getInitialCondition().getAcceptedClass();
  final PsiNamePatternCondition<?> nameCondition=ContainerUtil.findInstance(pattern.getCondition().getConditions(),PsiNamePatternCondition.class);
  if (nameCondition != null) {
    final ValuePatternCondition<String> valueCondition=ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(),ValuePatternCondition.class);
    if (valueCondition != null) {
      final Collection<String> strings=valueCondition.getValues();
      registerNamedReferenceProvider(ArrayUtil.toStringArray(strings),new NamedObjectProviderBinding(){
        protected String getName(        final PsiElement position){
          return nameCondition.getPropertyValue(position);
        }
      }
,scope,true,provider,priority,pattern);
      return;
    }
    final CaseInsensitiveValuePatternCondition ciCondition=ContainerUtil.findInstance(nameCondition.getNamePattern().getCondition().getConditions(),CaseInsensitiveValuePatternCondition.class);
    if (ciCondition != null) {
      registerNamedReferenceProvider(ciCondition.getValues(),new NamedObjectProviderBinding(){
        @Nullable protected String getName(        final PsiElement position){
          return nameCondition.getPropertyValue(position);
        }
      }
,scope,false,provider,priority,pattern);
      return;
    }
  }
  while (true) {
    final SimpleProviderBinding providerBinding=myBindingsMap.get(scope);
    if (providerBinding != null) {
      providerBinding.registerProvider(provider,pattern,priority);
      return;
    }
    final SimpleProviderBinding binding=new SimpleProviderBinding();
    binding.registerProvider(provider,pattern,priority);
    if (myBindingsMap.putIfAbsent(scope,binding) == null)     break;
  }
}
