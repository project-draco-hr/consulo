{
  myKnownSupers.clear();
  final Class scope=pattern.getCondition().getInitialCondition().getAcceptedClass();
  final PsiNamePatternCondition<?> nameCondition=ContainerUtil.findInstance(pattern.getCondition().getConditions(),PsiNamePatternCondition.class);
  if (nameCondition != null) {
    for (    PatternCondition<? super String> condition : nameCondition.getNamePattern().getCondition().getConditions()) {
      if (condition instanceof ValuePatternCondition) {
        final Collection<String> strings=((ValuePatternCondition)condition).getValues();
        registerNamedReferenceProvider(ArrayUtil.toStringArray(strings),nameCondition,scope,true,provider,priority,pattern);
        return;
      }
      if (condition instanceof CaseInsensitiveValuePatternCondition) {
        final String[] strings=((CaseInsensitiveValuePatternCondition)condition).getValues();
        registerNamedReferenceProvider(strings,nameCondition,scope,false,provider,priority,pattern);
        return;
      }
    }
  }
  while (true) {
    final SimpleProviderBinding providerBinding=myBindingsMap.get(scope);
    if (providerBinding != null) {
      providerBinding.registerProvider(provider,pattern,priority);
      return;
    }
    final SimpleProviderBinding binding=new SimpleProviderBinding();
    binding.registerProvider(provider,pattern,priority);
    if (myBindingsMap.putIfAbsent(scope,binding) == null)     break;
  }
}
