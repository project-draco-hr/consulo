{
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Compiler>(){
    public Collection<Compiler> getNodes(){
      return Arrays.asList(compilers);
    }
    public Iterator<Compiler> getIn(    Compiler compiler){
      final Set<FileType> compilerInput=myCompilerToInputTypes.get(compiler);
      if (compilerInput == null || compilerInput.isEmpty()) {
        return Collections.<Compiler>emptySet().iterator();
      }
      final Set<Compiler> inCompilers=new HashSet<Compiler>();
      for (      Map.Entry<Compiler,Set<FileType>> entry : myCompilerToOutputTypes.entrySet()) {
        final Set<FileType> outputs=entry.getValue();
        Compiler comp=entry.getKey();
        if (outputs != null && ModuleCompilerUtil.intersects(compilerInput,outputs)) {
          inCompilers.add(comp);
        }
      }
      return inCompilers.iterator();
    }
  }
));
}
