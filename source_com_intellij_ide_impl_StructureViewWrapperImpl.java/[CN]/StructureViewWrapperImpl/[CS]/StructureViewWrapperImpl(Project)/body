{
  myProject=project;
  myPanel=new JPanel(new BorderLayout());
  myPanel.setBackground(UIUtil.getTreeTextBackground());
  myAlarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
  getComponent().addHierarchyListener(new HierarchyListener(){
    public void hierarchyChanged(    HierarchyEvent e){
      if ((e.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) {
        rebuild();
      }
    }
  }
);
  myEditorManagerListener=new FileEditorManagerAdapter(){
    private FileEditorManagerEvent myLastEvent;
    public void selectionChanged(    final FileEditorManagerEvent event){
      myLastEvent=event;
      final PsiManager psiManager=PsiManager.getInstance(myProject);
      myAlarm.cancelAllRequests();
      myAlarm.addRequest(new Runnable(){
        public void run(){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (myLastEvent == null) {
                return;
              }
              try {
                if (psiManager.isDisposed()) {
                  return;
                }
                PsiDocumentManager.getInstance(myProject).commitAllDocuments();
                setFileEditor(myLastEvent.getNewEditor());
              }
  finally {
                myLastEvent=null;
              }
            }
          }
,ModalityState.NON_MMODAL);
        }
      }
,400);
    }
  }
;
  FileEditorManager.getInstance(project).addFileEditorManagerListener(myEditorManagerListener);
  myFileTypeListener=new FileTypeListener(){
    public void beforeFileTypesChanged(    FileTypeEvent event){
    }
    public void fileTypesChanged(    FileTypeEvent event){
    }
  }
;
  FileTypeManager.getInstance().addFileTypeListener(myFileTypeListener);
}
