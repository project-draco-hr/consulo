{
  if (items.length == 0) {
    LookupManager.getInstance(indicator.getProject()).hideActiveLookup();
    indicator.handleEmptyLookup(true);
    checkNotSync(indicator,items);
    return;
  }
  LOG.assertTrue(!indicator.isRunning(),"running");
  LOG.assertTrue(!indicator.isCanceled(),"canceled");
  indicator.getLookup().refreshUi(true);
  final AutoCompletionDecision decision=shouldAutoComplete(indicator,items);
  if (decision == AutoCompletionDecision.SHOW_LOOKUP) {
    CompletionServiceImpl.setCompletionPhase(new CompletionPhase.ItemsCalculated(indicator));
    indicator.getLookup().setCalculating(false);
    if (indicator.showLookup() && isAutocompleteCommonPrefixOnInvocation() && items.length > 1) {
      indicator.fillInCommonPrefix(false);
    }
  }
 else   if (decision instanceof AutoCompletionDecision.InsertItem) {
    final Runnable restorePrefix=rememberDocumentState(indicator.getEditor());
    final LookupElement item=((AutoCompletionDecision.InsertItem)decision).getElement();
    CommandProcessor.getInstance().executeCommand(indicator.getProject(),new Runnable(){
      @Override public void run(){
        indicator.setMergeCommand();
        indicator.getLookup().finishLookup(Lookup.AUTO_INSERT_SELECT_CHAR,item);
      }
    }
,"Autocompletion",null);
    if (CompletionService.getCompletionService().getCurrentCompletion() == null && !ApplicationManager.getApplication().isUnitTestMode()) {
      CompletionServiceImpl.setCompletionPhase(hasModifiers ? new CompletionPhase.InsertedSingleItem(indicator,restorePrefix) : CompletionPhase.NoCompletion);
    }
    checkNotSync(indicator,items);
  }
 else   if (decision == AutoCompletionDecision.CLOSE_LOOKUP) {
    LookupManager.getInstance(indicator.getProject()).hideActiveLookup();
    checkNotSync(indicator,items);
  }
}
