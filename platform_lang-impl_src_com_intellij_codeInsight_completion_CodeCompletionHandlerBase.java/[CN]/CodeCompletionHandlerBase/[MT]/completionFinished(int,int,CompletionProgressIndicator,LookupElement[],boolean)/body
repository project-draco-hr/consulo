{
  if (items.length == 0) {
    LookupManager.getInstance(indicator.getProject()).hideActiveLookup();
    indicator.handleEmptyLookup(true);
    checkNotSync(indicator,items);
    return;
  }
  LOG.assertTrue(!indicator.isRunning(),"running");
  LOG.assertTrue(!indicator.isCanceled(),"canceled");
  indicator.getLookup().refreshUi(true,false);
  final AutoCompletionDecision decision=shouldAutoComplete(indicator,items);
  if (decision == AutoCompletionDecision.SHOW_LOOKUP) {
    CompletionServiceImpl.setCompletionPhase(new CompletionPhase.ItemsCalculated(indicator));
    indicator.getLookup().setCalculating(false);
    indicator.showLookup();
  }
 else   if (decision instanceof AutoCompletionDecision.InsertItem) {
    final Runnable restorePrefix=rememberDocumentState(indicator.getEditor());
    final LookupElement item=((AutoCompletionDecision.InsertItem)decision).getElement();
    try {
      CommandProcessor.getInstance().executeCommand(indicator.getProject(),new Runnable(){
        @Override public void run(){
          indicator.setMergeCommand();
          indicator.getLookup().finishLookup(Lookup.AUTO_INSERT_SELECT_CHAR,item);
        }
      }
,"Autocompletion",null);
    }
 catch (    Throwable e) {
      CompletionServiceImpl.setCompletionPhase(CompletionPhase.NoCompletion);
      LOG.error(e);
      return;
    }
    if (CompletionService.getCompletionService().getCurrentCompletion() == null && !CompletionServiceImpl.isPhase(CompletionPhase.CommittingDocuments.class)) {
      CompletionServiceImpl.setCompletionPhase(hasModifiers ? new CompletionPhase.InsertedSingleItem(indicator,restorePrefix) : CompletionPhase.NoCompletion);
    }
    checkNotSync(indicator,items);
  }
 else   if (decision == AutoCompletionDecision.CLOSE_LOOKUP) {
    LookupManager.getInstance(indicator.getProject()).hideActiveLookup();
    checkNotSync(indicator,items);
  }
}
