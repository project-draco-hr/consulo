{
  final int offset=newContext.getStartOffset();
  final PsiFile fileCopy=newContext.file;
  final PsiElement insertedElement=newContext.file.findElementAt(newContext.getStartOffset());
  if (insertedElement == null) {
    throw new AssertionError("offset " + newContext.getStartOffset() + " at:\n text=\""+ fileCopy.getText()+ "\"\n instance="+ fileCopy);
  }
  insertedElement.putUserData(CompletionContext.COMPLETION_CONTEXT_KEY,newContext);
  LOG.assertTrue(fileCopy.findElementAt(offset) == insertedElement,"wrong offset");
  final TextRange range=insertedElement.getTextRange();
  if (!range.substring(fileCopy.getText()).equals(insertedElement.getText())) {
    Attachment _fileCopy=new Attachment(initContext.getFile().getOriginalFile().getViewProvider().getVirtualFile().getPath(),fileCopy.getText());
    Attachment copyTree=new Attachment(initContext.getFile().getOriginalFile().getViewProvider().getVirtualFile().getPath() + " syntactic tree",DebugUtil.psiToString(fileCopy,false));
    Attachment elementText=new Attachment("Element at caret",insertedElement.getText());
    LOG.error(LogMessageEx.createEvent("Inconsistent completion tree","range=" + range,"Inconsistent completion tree",null,Arrays.asList(_fileCopy,copyTree,elementText)));
  }
  return new CompletionParameters(insertedElement,fileCopy.getOriginalFile(),myCompletionType,offset,invocationCount,obtainLookup(initContext.getEditor()),false);
}
