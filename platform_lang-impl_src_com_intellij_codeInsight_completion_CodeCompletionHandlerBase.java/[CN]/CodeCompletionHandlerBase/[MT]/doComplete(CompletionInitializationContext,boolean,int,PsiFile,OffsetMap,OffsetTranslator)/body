{
  final Editor editor=initContext.getEditor();
  CompletionAssertions.checkEditorValid(editor);
  CompletionContext context=createCompletionContext(hostCopy,hostMap.getOffset(CompletionInitializationContext.START_OFFSET),hostMap,initContext.getFile());
  LookupImpl lookup=obtainLookup(editor,initContext.getProject());
  CompletionParameters parameters=createCompletionParameters(invocationCount,context,editor);
  CompletionPhase phase=CompletionServiceImpl.getCompletionPhase();
  if (phase instanceof CompletionPhase.CommittingDocuments) {
    if (phase.indicator != null) {
      phase.indicator.closeAndFinish(false);
    }
    ((CompletionPhase.CommittingDocuments)phase).replaced=true;
  }
 else {
    CompletionServiceImpl.assertPhase(CompletionPhase.NoCompletion.getClass());
  }
  final Semaphore freezeSemaphore=new Semaphore();
  freezeSemaphore.down();
  final CompletionProgressIndicator indicator=new CompletionProgressIndicator(editor,initContext.getCaret(),parameters,this,freezeSemaphore,initContext.getOffsetMap(),hasModifiers,lookup);
  Disposer.register(indicator,hostMap);
  Disposer.register(indicator,context.getOffsetMap());
  Disposer.register(indicator,translator);
  CompletionServiceImpl.setCompletionPhase(synchronous ? new CompletionPhase.Synchronous(indicator) : new CompletionPhase.BgCalculation(indicator));
  indicator.startCompletion(initContext);
  if (!synchronous) {
    return;
  }
  if (freezeSemaphore.waitFor(2000)) {
    if (!indicator.isRunning() && !indicator.isCanceled()) {
      try {
        indicator.getLookup().refreshUi(true,false);
      }
 catch (      Exception e) {
        CompletionServiceImpl.setCompletionPhase(CompletionPhase.NoCompletion);
        LOG.error(e);
        return;
      }
      completionFinished(indicator,hasModifiers);
      return;
    }
  }
  CompletionServiceImpl.setCompletionPhase(new CompletionPhase.BgCalculation(indicator));
  indicator.showLookup();
}
