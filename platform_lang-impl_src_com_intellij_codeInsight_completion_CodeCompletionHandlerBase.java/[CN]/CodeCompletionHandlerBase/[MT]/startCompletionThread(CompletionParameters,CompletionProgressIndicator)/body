{
  final ApplicationAdapter listener=new ApplicationAdapter(){
    @Override public void beforeWriteActionStart(    Object action){
      indicator.cancelByWriteAction();
    }
  }
;
  ApplicationManager.getApplication().addApplicationListener(listener);
  final AtomicReference<LookupElement[]> data=new AtomicReference<LookupElement[]>(null);
  final Semaphore startSemaphore=new Semaphore();
  startSemaphore.down();
  final Runnable computeRunnable=new Runnable(){
    public void run(){
      ProgressManager.getInstance().runProcess(new Runnable(){
        public void run(){
          try {
            startSemaphore.up();
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              public void run(){
                ProgressManager.checkCanceled();
                data.set(CompletionService.getCompletionService().performCompletion(parameters,new Consumer<LookupElement>(){
                  public void consume(                  final LookupElement lookupElement){
                    indicator.addItem(lookupElement);
                  }
                }
));
              }
            }
);
          }
 catch (          ProcessCanceledException ignored) {
          }
 finally {
            ApplicationManager.getApplication().removeApplicationListener(listener);
          }
        }
      }
,indicator);
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    computeRunnable.run();
  }
 else {
    ApplicationManager.getApplication().executeOnPooledThread(computeRunnable);
  }
  startSemaphore.waitFor();
  return data;
}
