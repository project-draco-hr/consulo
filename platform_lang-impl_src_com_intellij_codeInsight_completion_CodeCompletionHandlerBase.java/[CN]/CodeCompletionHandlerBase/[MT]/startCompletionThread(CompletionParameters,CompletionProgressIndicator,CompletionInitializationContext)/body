{
  final Semaphore startSemaphore=new Semaphore();
  startSemaphore.down();
  final AtomicReference<LookupElement[]> data=new AtomicReference<LookupElement[]>(null);
  final Runnable computeRunnable=new Runnable(){
    @Override public void run(){
      ProgressManager.getInstance().runProcess(new Runnable(){
        @Override public void run(){
          try {
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              @Override public void run(){
                startSemaphore.up();
                ProgressManager.checkCanceled();
                indicator.duringCompletion(initContext);
                ProgressManager.checkCanceled();
                data.set(CompletionService.getCompletionService().performCompletion(parameters,new Consumer<CompletionResult>(){
                  @Override public void consume(                  final CompletionResult result){
                    indicator.addItem(result);
                  }
                }
));
              }
            }
);
          }
 catch (          ProcessCanceledException ignored) {
          }
        }
      }
,indicator);
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode() && !CompletionAutoPopupHandler.ourTestingAutopopup) {
    computeRunnable.run();
  }
 else {
    ApplicationManager.getApplication().executeOnPooledThread(computeRunnable);
  }
  startSemaphore.waitFor();
  return data;
}
