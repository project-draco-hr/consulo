{
  final Semaphore startSemaphore=new Semaphore();
  startSemaphore.down();
  final AtomicReference<LookupElement[]> data=new AtomicReference<LookupElement[]>(null);
  final Runnable computeRunnable=new Runnable(){
    public void run(){
      ProgressManager.getInstance().runProcess(new Runnable(){
        @Override public void run(){
          try {
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              public void run(){
                startSemaphore.up();
                ProgressManager.checkCanceled();
                indicator.duringCompletion(initContext);
                ProgressManager.checkCanceled();
                Consumer<LookupElement> consumer=new Consumer<LookupElement>(){
                  public void consume(                  final LookupElement lookupElement){
                    indicator.addItem(lookupElement);
                  }
                }
;
                LookupElement[] result=CompletionService.getCompletionService().performCompletion(parameters,consumer);
                if (NameUtil.isUseMinusculeHumpMatcher() && parameters.getInvocationCount() == 0) {
                  if (result.length == 0) {
                    result=CompletionService.getCompletionService().performCompletion(parameters.withRelaxedMatching(),consumer);
                  }
 else {
                    indicator.restartOnEmpty=true;
                  }
                }
                data.set(result);
              }
            }
);
          }
 catch (          ProcessCanceledException ignored) {
          }
        }
      }
,indicator);
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode() && !CompletionAutoPopupHandler.ourTestingAutopopup) {
    computeRunnable.run();
  }
 else {
    ApplicationManager.getApplication().executeOnPooledThread(computeRunnable);
  }
  startSemaphore.waitFor();
  return data;
}
