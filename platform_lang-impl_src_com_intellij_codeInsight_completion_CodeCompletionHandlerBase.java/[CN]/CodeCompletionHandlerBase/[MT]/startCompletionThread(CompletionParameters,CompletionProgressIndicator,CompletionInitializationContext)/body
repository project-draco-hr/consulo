{
  final ApplicationAdapter listener=new ApplicationAdapter(){
    @Override public void beforeWriteActionStart(    Object action){
      indicator.cancelByWriteAction();
    }
  }
;
  ApplicationManager.getApplication().addApplicationListener(listener);
  final Semaphore startSemaphore=new Semaphore();
  startSemaphore.down();
  startSemaphore.down();
  spawnProcess(ProgressWrapper.wrap(indicator),new Runnable(){
    public void run(){
      try {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            startSemaphore.up();
            indicator.setFocusLookupWhenDone(autopopup && shouldFocusLookup(parameters));
            indicator.duringCompletion(initContext);
          }
        }
);
      }
  finally {
        indicator.duringCompletionPassed();
      }
    }
  }
);
  final AtomicReference<LookupElement[]> data=new AtomicReference<LookupElement[]>(null);
  spawnProcess(indicator,new Runnable(){
    public void run(){
      try {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            try {
              startSemaphore.up();
              ProgressManager.checkCanceled();
              final LookupElement[] result=CompletionService.getCompletionService().performCompletion(parameters,new Consumer<LookupElement>(){
                public void consume(                final LookupElement lookupElement){
                  indicator.addItem(lookupElement);
                }
              }
);
              indicator.ensureDuringCompletionPassed();
              data.set(result);
            }
  finally {
              ApplicationManager.getApplication().removeApplicationListener(listener);
            }
          }
        }
);
      }
 catch (      ProcessCanceledException ignored) {
      }
    }
  }
);
  startSemaphore.waitFor();
  return data;
}
