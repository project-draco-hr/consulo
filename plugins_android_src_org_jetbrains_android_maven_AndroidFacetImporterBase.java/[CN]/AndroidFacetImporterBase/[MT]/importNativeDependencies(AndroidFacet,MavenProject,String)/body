{
  final List<AndroidNativeLibData> additionalNativeLibs=new ArrayList<AndroidNativeLibData>();
  final String localRepository=MavenProjectsManager.getInstance(facet.getModule().getProject()).getLocalRepository().getPath();
  String defaultArchitecture=getPathFromConfig(facet.getModule(),mavenProject,moduleDirPath,"nativeLibrariesDependenciesHardwareArchitectureDefault",false,true);
  if (defaultArchitecture == null) {
    defaultArchitecture=DEFAULT_NATIVE_ARCHITECTURE;
  }
  final String forcedArchitecture=getPathFromConfig(facet.getModule(),mavenProject,moduleDirPath,"nativeLibrariesDependenciesHardwareArchitectureOverride",false,true);
  for (  MavenArtifact depArtifact : mavenProject.getDependencies()) {
    if (AndroidMavenUtil.SO_PACKAGING_AND_DEPENDENCY_TYPE.equals(depArtifact.getType())) {
      final String architecture;
      if (forcedArchitecture != null) {
        architecture=forcedArchitecture;
      }
 else {
        final String classifier=depArtifact.getClassifier();
        architecture=classifier != null ? classifier : defaultArchitecture;
      }
      final String path=FileUtil.toSystemIndependentName(localRepository + '/' + depArtifact.getRelativePath());
      final String artifactId=depArtifact.getArtifactId();
      final String targetFileName=artifactId.startsWith("lib") ? artifactId + ".so" : "lib" + artifactId + ".so";
      additionalNativeLibs.add(new AndroidNativeLibData(architecture,path,targetFileName));
    }
  }
  facet.getConfiguration().setAdditionalNativeLibraries(additionalNativeLibs);
}
