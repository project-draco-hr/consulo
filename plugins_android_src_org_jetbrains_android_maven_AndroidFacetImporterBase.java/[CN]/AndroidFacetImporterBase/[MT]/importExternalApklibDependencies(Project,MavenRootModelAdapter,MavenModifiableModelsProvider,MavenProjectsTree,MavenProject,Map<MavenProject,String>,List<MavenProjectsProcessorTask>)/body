{
  final ModifiableRootModel rootModel=rootModelAdapter.getRootModel();
  removeExtApklibDependencies(rootModel);
  for (  MavenArtifact depArtifact : mavenProject.getDependencies()) {
    if (AndroidMavenUtil.APKLIB_DEPENDENCY_AND_PACKAGING_TYPE.equals(depArtifact.getType()) && mavenTree.findProject(depArtifact) == null) {
      final ModifiableModuleModel moduleModel=modelsProvider.getModuleModel();
      final String apklibModuleName=AndroidMavenUtil.getModuleNameForExtApklibArtifact(depArtifact.getMavenId());
      Module apklibModule=moduleModel.findModuleByName(apklibModuleName);
      if (apklibModule == null || apklibModule.getUserData(MODULE_IMPORTED) == null) {
        apklibModule=importExternalApklibArtifact(project,rootModelAdapter,apklibModule,modelsProvider,mavenProject,mavenTree,depArtifact,moduleModel,mavenProject2ModuleName);
        if (apklibModule != null) {
          apklibModule.putUserData(MODULE_IMPORTED,Boolean.TRUE);
        }
      }
      if (apklibModule != null) {
        final Module finalGenModule=apklibModule;
        tasks.add(new MavenProjectsProcessorTask(){
          @Override public void perform(          Project project,          MavenEmbeddersManager embeddersManager,          MavenConsole console,          MavenProgressIndicator indicator) throws MavenProcessCanceledException {
            finalGenModule.putUserData(MODULE_IMPORTED,null);
          }
        }
);
      }
      if (ArrayUtil.find(rootModel.getDependencyModuleNames(),apklibModuleName) < 0) {
        addCompileModuleDependency(modelsProvider,rootModel,apklibModuleName);
      }
    }
  }
}
