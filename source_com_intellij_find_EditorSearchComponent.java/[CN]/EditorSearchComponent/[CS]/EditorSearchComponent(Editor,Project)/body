{
  super(new BorderLayout(0,0));
  GRADIENT_C1=getBackground();
  GRADIENT_C2=new Color(GRADIENT_C1.getRed() - 0x18,GRADIENT_C1.getGreen() - 0x18,GRADIENT_C1.getBlue() - 0x18);
  myProject=project;
  myEditor=editor;
  JPanel leadPanel=new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT,5,0));
  add(leadPanel,BorderLayout.WEST);
  mySearchField=new JTextField();
  mySearchField.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  leadPanel.add(mySearchField);
  myDefaultBackground=mySearchField.getBackground();
  mySearchField.setColumns(25);
  setSmallerFont(mySearchField);
  DefaultActionGroup group=new DefaultActionGroup("search bar",false);
  group.add(new PrevOccurenceAction());
  group.add(new NextOccurenceAction());
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",group,true);
  tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  final JComponent prevnextToolbar=tb.getComponent();
  prevnextToolbar.setBorder(null);
  prevnextToolbar.setOpaque(false);
  leadPanel.add(prevnextToolbar);
  final JCheckBox cbMatchCase=new NonFocusableCheckBox("Case sensitive");
  final JCheckBox cbWholeWords=new NonFocusableCheckBox("Match whole words only");
  leadPanel.add(cbMatchCase);
  leadPanel.add(cbWholeWords);
  cbMatchCase.setSelected(isCaseSensitive());
  cbWholeWords.setSelected(isWholeWords());
  cbMatchCase.setMnemonic('C');
  cbWholeWords.setMnemonic('M');
  setSmallerFontAndOpaque(cbWholeWords);
  setSmallerFontAndOpaque(cbMatchCase);
  cbMatchCase.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=cbMatchCase.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setCaseSensitive(b);
      FindSettings.getInstance().setLocalCaseSensitive(b);
      updateResults();
    }
  }
);
  cbWholeWords.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=cbWholeWords.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setWholeWordsOnly(b);
      FindSettings.getInstance().setLocalWholeWordsOnly(b);
      updateResults();
    }
  }
);
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  add(tailPanel,BorderLayout.EAST);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  JLabel closeLabel=new JLabel(" ",IconLoader.getIcon("/actions/cross.png"),JLabel.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  tailPanel.add(closeLabel,BorderLayout.EAST);
  tailPanel.add(myMatchInfoLabel,BorderLayout.WEST);
  mySearchField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      updateResults();
    }
  }
);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      close();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_FOCUSED);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if ("".equals(mySearchField.getText())) {
        close();
      }
 else {
        myEditor.getContentComponent().requestFocus();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      searchForward();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),JComponent.WHEN_FOCUSED);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      searchBackward();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),JComponent.WHEN_FOCUSED);
  final String initialText=myEditor.getSelectionModel().getSelectedText();
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      mySearchField.setText(initialText != null && initialText.indexOf('\n') < 0 ? initialText : "");
    }
  }
);
}
