{
  myProject=project;
  myEditor=editor;
  myFile=file;
  myDocument=editor.getDocument();
  if (!myFile.isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(getDocument(),project)) {
      return;
    }
  }
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.comment.block");
  final SelectionModel selectionModel=myEditor.getSelectionModel();
  BlockCommenter commenter=getCommenter(myFile);
  if (commenter == null)   return;
  final BlockCommenter blockCommenter=(BlockCommenter)commenter.clone();
  if (selectionModel.hasSelection()) {
    int startOffset=selectionModel.getSelectionStart();
    int endOffset=selectionModel.getSelectionEnd();
    blockCommenter.commentRange(startOffset,endOffset,this);
  }
 else {
    int offset=editor.getCaretModel().getOffset();
    PsiDocumentManager.getInstance(project).commitDocument(myDocument);
    PsiElement element=file.findElementAt(offset);
    if (element == null && offset > 0) {
      element=file.findElementAt(offset - 1);
    }
    if (element == null)     return;
    int commentStart=(element instanceof PsiWhiteSpace) ? offset : element.getTextRange().getStartOffset();
    blockCommenter.uncommentRange(element,commentStart,this);
  }
}
