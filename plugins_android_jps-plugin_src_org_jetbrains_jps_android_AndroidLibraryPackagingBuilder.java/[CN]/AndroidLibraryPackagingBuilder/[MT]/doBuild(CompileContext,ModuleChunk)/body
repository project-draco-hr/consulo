{
  boolean success=true;
  final AndroidFileSetStorage storage=new AndroidFileSetStorage(context.getDataManager().getDataStorageRoot(),"libs_packaging");
  try {
    for (    Module module : chunk.getModules()) {
      final AndroidFacet facet=AndroidJpsUtil.getFacet(module);
      if (facet == null || !facet.isLibrary()) {
        continue;
      }
      final ProjectPaths projectPaths=context.getProjectPaths();
      final File outputDirectoryForPackagedFiles=AndroidJpsUtil.getOutputDirectoryForPackagedFiles(projectPaths,module);
      if (outputDirectoryForPackagedFiles == null) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,AndroidJpsBundle.message("android.jps.errors.output.dir.not.specified",module.getName())));
        success=false;
        continue;
      }
      final File classesDir=projectPaths.getModuleOutputDir(module,false);
      if (classesDir == null || !classesDir.isDirectory()) {
        continue;
      }
      final Set<String> subdirs=new HashSet<String>();
      AndroidJpsUtil.addSubdirectories(classesDir,subdirs);
      final AndroidFileSetState newState=new AndroidFileSetState(subdirs,AndroidJpsUtil.CLASSES_AND_JARS_FILTER);
      final AndroidFileSetState oldState=storage.getState(module.getName());
      if (oldState != null && oldState.equalsTo(newState)) {
        continue;
      }
      if (subdirs.size() > 0) {
        context.processMessage(new ProgressMessage(AndroidJpsBundle.message("android.jps.progress.library.packaging",module.getName())));
        final File outputJarFile=new File(outputDirectoryForPackagedFiles,AndroidCommonUtils.CLASSES_JAR_FILE_NAME);
        try {
          AndroidCommonUtils.packClassFilesIntoJar(ArrayUtil.EMPTY_STRING_ARRAY,ArrayUtil.toStringArray(subdirs),outputJarFile);
          storage.update(module.getName(),newState);
        }
 catch (        IOException e) {
          AndroidJpsUtil.reportExceptionError(context,null,e,BUILDER_NAME);
          storage.update(module.getName(),null);
          success=false;
        }
      }
    }
    return success ? ModuleLevelBuilder.ExitCode.OK : ModuleLevelBuilder.ExitCode.ABORT;
  }
  finally {
    storage.close();
  }
}
