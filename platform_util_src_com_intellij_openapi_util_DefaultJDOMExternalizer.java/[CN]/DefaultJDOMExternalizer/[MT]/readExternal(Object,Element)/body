{
  if (parentNode == null)   return;
  for (  final Object o : parentNode.getChildren("option")) {
    Element e=(Element)o;
    String fieldName=e.getAttributeValue("name");
    if (fieldName == null) {
      throw new InvalidDataException();
    }
    try {
      Field field=data.getClass().getField(fieldName);
      Class type=field.getType();
      int modifiers=field.getModifiers();
      if ((modifiers & Modifier.PUBLIC) == 0 || (modifiers & Modifier.STATIC) != 0)       continue;
      field.setAccessible(true);
      if ((modifiers & Modifier.FINAL) != 0) {
        Object value=field.get(data);
        if (JDOMExternalizable.class.isInstance(value)) {
          final List children=e.getChildren("value");
          for (          Object child : children) {
            Element valueTag=(Element)child;
            ((JDOMExternalizable)value).readExternal(valueTag);
          }
        }
        continue;
      }
      String value=e.getAttributeValue("value");
      if (type.isPrimitive()) {
        if (value != null) {
          if (type.equals(byte.class)) {
            try {
              field.setByte(data,Byte.parseByte(value));
            }
 catch (            NumberFormatException ex) {
              throw new InvalidDataException();
            }
          }
 else           if (type.equals(short.class)) {
            try {
              field.setShort(data,Short.parseShort(value));
            }
 catch (            NumberFormatException ex) {
              throw new InvalidDataException();
            }
          }
 else           if (type.equals(int.class)) {
            int i=toInt(value);
            field.setInt(data,i);
          }
 else           if (type.equals(long.class)) {
            try {
              field.setLong(data,Long.parseLong(value));
            }
 catch (            NumberFormatException ex) {
              throw new InvalidDataException();
            }
          }
 else           if (type.equals(float.class)) {
            try {
              field.setFloat(data,Float.parseFloat(value));
            }
 catch (            NumberFormatException ex) {
              throw new InvalidDataException();
            }
          }
 else           if (type.equals(double.class)) {
            try {
              field.setDouble(data,Double.parseDouble(value));
            }
 catch (            NumberFormatException ex) {
              throw new InvalidDataException();
            }
          }
 else           if (type.equals(char.class)) {
            if (value.length() != 1) {
              throw new InvalidDataException();
            }
            field.setChar(data,value.charAt(0));
          }
 else           if (type.equals(boolean.class)) {
            if (value.equals("true")) {
              field.setBoolean(data,true);
            }
 else             if (value.equals("false")) {
              field.setBoolean(data,false);
            }
 else {
              throw new InvalidDataException();
            }
          }
 else {
            throw new InvalidDataException();
          }
        }
      }
 else       if (type.equals(String.class)) {
        field.set(data,value);
      }
 else       if (type.equals(Color.class)) {
        Color color=toColor(value);
        field.set(data,color);
      }
 else       if (ReflectionUtil.isAssignable(JDOMExternalizable.class,type)) {
        final List children=e.getChildren("value");
        if (!children.isEmpty()) {
          JDOMExternalizable object=null;
          for (          final Object o1 : children) {
            Element el=(Element)o1;
            object=(JDOMExternalizable)type.newInstance();
            object.readExternal(el);
          }
          field.set(data,object);
        }
      }
 else {
        throw new InvalidDataException("wrong type: " + type);
      }
    }
 catch (    NoSuchFieldException ex) {
      LOG.debug(ex);
    }
catch (    SecurityException ex) {
      throw new InvalidDataException();
    }
catch (    IllegalAccessException ex) {
      throw new InvalidDataException(ex);
    }
catch (    InstantiationException ex) {
      throw new InvalidDataException();
    }
  }
}
