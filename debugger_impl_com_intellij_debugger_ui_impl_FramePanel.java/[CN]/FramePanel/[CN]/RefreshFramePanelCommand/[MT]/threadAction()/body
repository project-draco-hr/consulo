{
  final DebuggerContextImpl context=getDebuggerContext();
  final ThreadReferenceProxyImpl threadToSelect=context.getThreadProxy();
  if (threadToSelect == null) {
    return;
  }
  final java.util.List<ThreadDescriptorImpl> threadItems=getThreadList();
  SuspendContextImpl threadContext=SuspendManagerUtil.getSuspendContextForThread(context.getSuspendContext(),threadToSelect);
  context.getDebugProcess().getManagerThread().invokeLater(new RefreshFramesListCommand(context,threadContext));
  DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
    public void run(){
      try {
        myThreadsListener.setEnabled(false);
        myThreadsCombo.removeAllItems();
        for (Iterator<ThreadDescriptorImpl> iterator=threadItems.iterator(); iterator.hasNext(); ) {
          myThreadsCombo.addItem(iterator.next());
        }
        selectThread(threadToSelect);
      }
  finally {
        myThreadsListener.setEnabled(true);
      }
    }
  }
);
}
