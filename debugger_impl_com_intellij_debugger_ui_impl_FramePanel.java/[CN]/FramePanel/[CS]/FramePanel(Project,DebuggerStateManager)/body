{
  super(project,stateManager);
  setBorder(null);
  myThreadsCombo=new JComboBox();
  myThreadsCombo.setRenderer(new DebuggerComboBoxRenderer());
  myThreadsListener=new ThreadsListener();
  myThreadsCombo.addItemListener(myThreadsListener);
  myFramesList=new JList(new DefaultListModel());
  myFramesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myFramesList.setCellRenderer(new DebuggerComboBoxRenderer());
  myFramesListener=new FramesListener();
  myFramesList.addListSelectionListener(myFramesListener);
  registerThreadsPopupMenu(myFramesList);
  final JPanel threadsPanel=new JPanel(new BorderLayout());
  threadsPanel.setBorder(null);
  threadsPanel.add(new ComboPager(myThreadsCombo,this),BorderLayout.NORTH);
  threadsPanel.add(new JScrollPane(myFramesList),BorderLayout.CENTER);
  final FrameDebuggerTree frameTree=getFrameTree();
  mySplitter=new ThreeComponentsSplitter();
  mySplitter.setFirstComponent(threadsPanel);
  final JPanel treePanel=new JPanel(new BorderLayout());
  treePanel.add(new JScrollPane(frameTree),BorderLayout.CENTER);
  final JLabel title=new JLabel(DebuggerBundle.message("debugger.session.tab.variables.title"));
  title.setIcon(VARIABLES_ICON);
  treePanel.add(title,BorderLayout.NORTH);
  mySplitter.setInnerComponent(treePanel);
  mySplitter.setLastComponent(null);
  add(mySplitter,BorderLayout.CENTER);
  registerDisposable(DebuggerAction.installEditAction(frameTree,DebuggerActions.EDIT_NODE_SOURCE));
  final AnAction setValueAction=ActionManager.getInstance().getAction(DebuggerActions.SET_VALUE);
  setValueAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0)),frameTree);
  registerDisposable(new Disposable(){
    public void dispose(){
      setValueAction.unregisterCustomShortcutSet(frameTree);
    }
  }
);
}
