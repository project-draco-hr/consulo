{
  final String[] names={CompilerBundle.message("exclude.from.compile.table.path.column.name"),CompilerBundle.message("exclude.from.compile.table.recursively.column.name")};
  TableModel dataModel=new AbstractTableModel(){
    public int getColumnCount(){
      return names.length;
    }
    public int getRowCount(){
      return myExcludeEntryDescriptions.size();
    }
    public Object getValueAt(    int row,    int col){
      ExcludeEntryDescription description=myExcludeEntryDescriptions.get(row);
      if (col == 0) {
        return description.getPresentableUrl();
      }
      if (col == 1) {
        if (!description.isFile()) {
          return description.isIncludeSubdirectories() ? Boolean.TRUE : Boolean.FALSE;
        }
 else {
          return null;
        }
      }
      return null;
    }
    public String getColumnName(    int column){
      return names[column];
    }
    public Class getColumnClass(    int c){
      if (c == 0) {
        return String.class;
      }
      if (c == 1) {
        return Boolean.class;
      }
      return null;
    }
    public boolean isCellEditable(    int row,    int col){
      if (col == 1) {
        ExcludeEntryDescription description=myExcludeEntryDescriptions.get(row);
        return !description.isFile();
      }
      return true;
    }
    public void setValueAt(    Object aValue,    int row,    int col){
      ExcludeEntryDescription description=myExcludeEntryDescriptions.get(row);
      if (col == 1) {
        description.setIncludeSubdirectories(aValue.equals(Boolean.TRUE));
      }
 else {
        final String path=(String)aValue;
        description.setPresentableUrl(path);
      }
    }
  }
;
  myExcludedTable=new Table(dataModel);
  myExcludedTable.setPreferredScrollableViewportSize(new Dimension(300,myExcludedTable.getRowHeight() * 6));
  myExcludedTable.setDefaultRenderer(Boolean.class,new BooleanRenderer());
  myExcludedTable.setDefaultRenderer(Object.class,new MyObjectRenderer());
  myExcludedTable.getColumn(names[0]).setPreferredWidth(350);
  final int cbWidth=15 + myExcludedTable.getFontMetrics(myExcludedTable.getFont()).stringWidth(names[1]);
  final TableColumn cbColumn=myExcludedTable.getColumn(names[1]);
  cbColumn.setPreferredWidth(cbWidth);
  cbColumn.setMaxWidth(cbWidth);
  myExcludedTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myExcludedTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(myExcludedTable.getSelectedRow() >= 0);
    }
  }
);
  TableCellEditor editor=myExcludedTable.getDefaultEditor(String.class);
  if (editor instanceof DefaultCellEditor) {
    ((DefaultCellEditor)editor).setClickCountToStart(1);
  }
  return ScrollPaneFactory.createScrollPane(myExcludedTable);
}
