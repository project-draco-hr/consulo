{
  if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) {
    String pathInRepository=message.substring(MERGED_FILE_MESSAGE_PREFIX.length(),message.length() - MERGED_FILE_MESSAGE_POSTFIX.length());
    String relativeRepositoryPath=myCvsFileSystem.getRelativeRepositoryPath(pathInRepository);
    final File file=myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath));
    ensureFileIsInMap(file);
    myCurrentMergedFile=myMergedFiles.get(file);
  }
 else   if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX) && message.endsWith(CREATED_BY_SECOND_PARTY_POSTFIX)) {
    String pathInRepository=message.substring(CREATED_BY_SECOND_PARTY_PREFIX.length(),message.length() - CREATED_BY_SECOND_PARTY_POSTFIX.length());
    File ioFile=myCvsFileSystem.getLocalFileSystem().getFile(pathInRepository);
    String relativeRepositoryPath=myCvsFileSystem.getRelativeRepositoryPath(ioFile.getPath());
    File file=myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath));
    myCreatedBySecondParty.add(file);
  }
 else   if (MERGE_PATTERN.matcher(message).matches()) {
    Matcher matcher=MERGE_PATTERN.matcher(message);
    if (matcher.matches()) {
      String relativeFileName=matcher.group(4);
      File file=myCvsFileSystem.getLocalFileSystem().getFile(relativeFileName);
      ensureFileIsInMap(file);
    }
  }
 else   if (MERGING_DIFFERENCES_PATTERN.matcher(message).matches()) {
    Matcher matcher=MERGING_DIFFERENCES_PATTERN.matcher(message);
    if (matcher.matches()) {
      String firstRevision=matcher.group(2);
      String secondRevision=matcher.group(4);
      myCurrentMergedFile.addRevisions(firstRevision,secondRevision);
    }
  }
}
