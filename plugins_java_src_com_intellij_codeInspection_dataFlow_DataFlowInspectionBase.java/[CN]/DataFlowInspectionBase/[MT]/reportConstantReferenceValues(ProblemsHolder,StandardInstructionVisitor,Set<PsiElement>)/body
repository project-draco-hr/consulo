{
  for (  Pair<PsiReferenceExpression,DfaConstValue> pair : visitor.getConstantReferenceValues()) {
    PsiReferenceExpression ref=pair.first;
    if (!reportedAnchors.add(ref)) {
      continue;
    }
    final Object value=pair.second.getValue();
    PsiVariable constant=pair.second.getConstant();
    final String presentableName=constant != null ? constant.getName() : String.valueOf(value);
    final String exprText=getConstantValueText(value,constant);
    if (presentableName == null || exprText == null) {
      continue;
    }
    holder.registerProblem(ref,"Value <code>#ref</code> #loc is always '" + presentableName + "'",new LocalQuickFix(){
      @NotNull @Override public String getName(){
        return "Replace with '" + presentableName + "'";
      }
      @NotNull @Override public String getFamilyName(){
        return "Replace with constant value";
      }
      @Override public void applyFix(      @NotNull Project project,      @NotNull ProblemDescriptor descriptor){
        if (!FileModificationService.getInstance().preparePsiElementsForWrite(descriptor.getPsiElement())) {
          return;
        }
        JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
        PsiElement newElement=descriptor.getPsiElement().replace(facade.getElementFactory().createExpressionFromText(exprText,null));
        newElement=JavaCodeStyleManager.getInstance(project).shortenClassReferences(newElement);
        if (newElement instanceof PsiJavaCodeReferenceElement) {
          PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)newElement;
          PsiElement target=ref.resolve();
          String shortName=ref.getReferenceName();
          if (target != null && shortName != null && ref.isQualified() && facade.getResolveHelper().resolveReferencedVariable(shortName,newElement) == target) {
            newElement.replace(facade.getElementFactory().createExpressionFromText(shortName,null));
          }
        }
      }
    }
);
  }
}
