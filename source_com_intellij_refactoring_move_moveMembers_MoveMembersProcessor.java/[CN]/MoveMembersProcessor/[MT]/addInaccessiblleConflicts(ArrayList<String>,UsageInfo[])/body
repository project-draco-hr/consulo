{
  Map<PsiMember,PsiModifierList> modifierListCopies=new HashMap<PsiMember,PsiModifierList>();
  for (  PsiMember member : myMembersToMove) {
    final PsiModifierList copy=(PsiModifierList)member.getModifierList().copy();
    if (myNewVisibility != null) {
      RefactoringUtil.setVisibility(copy,myNewVisibility);
    }
    modifierListCopies.put(member,copy);
  }
  for (  UsageInfo usage : usages) {
    if (usage instanceof MyUsageInfo) {
      final MyUsageInfo usageInfo=(MyUsageInfo)usage;
      PsiElement element=usage.getElement();
      if (element != null) {
        final PsiMember member=usageInfo.member;
        PsiClass accessObjectClass=null;
        if (element instanceof PsiReferenceExpression) {
          PsiExpression qualifier=((PsiReferenceExpression)element).getQualifierExpression();
          if (qualifier != null) {
            accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
          }
          if (!ResolveUtil.isAccessible(member,myTargetClass,modifierListCopies.get(member),element,accessObjectClass)) {
            final String newVisibility=myNewVisibility == null ? getVisiblityString(member) : myNewVisibility;
            String message=ConflictsUtil.getDescription(member,true) + " with " + newVisibility+ " visibility is not accesible from "+ ConflictsUtil.getDescription(ConflictsUtil.getContainer(element),true);
            conflicts.add(message);
          }
        }
      }
    }
  }
}
