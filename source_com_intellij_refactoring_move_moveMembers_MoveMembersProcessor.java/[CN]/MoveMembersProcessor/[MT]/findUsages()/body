{
  final PsiManager manager=PsiManager.getInstance(myProject);
  final PsiSearchHelper helper=manager.getSearchHelper();
  final List<UsageInfo> usagesList=new ArrayList<UsageInfo>();
  for (  PsiMember member : myMembersToMove) {
    PsiReference[] refs=helper.findReferences(member,GlobalSearchScope.projectScope(myProject),false);
    for (    PsiReference psiReference : refs) {
      PsiElement ref=psiReference.getElement();
      if (ref instanceof PsiReferenceExpression) {
        PsiReferenceExpression refExpr=(PsiReferenceExpression)ref;
        PsiExpression qualifier=refExpr.getQualifierExpression();
        if (RefactoringHierarchyUtil.willBeInTargetClass(refExpr,myMembersToMove,myTargetClass,true)) {
          if (!isInMovedElement(refExpr)) {
            if (qualifier != null) {
              usagesList.add(new MyUsageInfo(member,refExpr,null,qualifier));
            }
          }
 else {
            if (qualifier instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifier).isReferenceTo(member.getContainingClass())) {
              usagesList.add(new MyUsageInfo(member,refExpr,null,qualifier));
            }
          }
        }
 else {
          if (qualifier == null) {
            usagesList.add(new MyUsageInfo(member,refExpr,myTargetClass,refExpr));
          }
 else {
            usagesList.add(new MyUsageInfo(member,refExpr,myTargetClass,qualifier));
          }
        }
      }
 else {
        if (!isInMovedElement(ref)) {
          usagesList.add(new MyUsageInfo(member,ref,null,ref));
        }
      }
    }
  }
  UsageInfo[] usageInfos=usagesList.toArray(new UsageInfo[usagesList.size()]);
  usageInfos=UsageViewUtil.removeDuplicatedUsages(usageInfos);
  return usageInfos;
}
