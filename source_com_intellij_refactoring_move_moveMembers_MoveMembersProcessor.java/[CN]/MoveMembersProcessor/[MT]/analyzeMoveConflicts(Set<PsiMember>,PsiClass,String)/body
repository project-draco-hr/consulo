{
  final LinkedHashSet<String> conflicts=new LinkedHashSet<String>();
  for (Iterator<PsiMember> iterator=membersToMove.iterator(); iterator.hasNext(); ) {
    final PsiMember element=iterator.next();
    if (element instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)element;
      if (hasMethod(targetClass,method)) {
        String message=ConflictsUtil.getDescription(method,false) + " already exists in the target class.";
        message=ConflictsUtil.capitalize(message);
        conflicts.add(message);
      }
    }
 else     if (element instanceof PsiField) {
      PsiField field=(PsiField)element;
      if (hasField(targetClass,field)) {
        String message=ConflictsUtil.getDescription(field,false) + " already exists in the target class.";
        message=ConflictsUtil.capitalize(message);
        conflicts.add(message);
      }
    }
  }
  return analyzeAccessibilityConflicts(membersToMove,targetClass,conflicts,newVisibility);
}
