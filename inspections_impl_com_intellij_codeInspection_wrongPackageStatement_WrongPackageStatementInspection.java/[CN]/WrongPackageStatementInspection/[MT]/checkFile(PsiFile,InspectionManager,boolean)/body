{
  if (ApplicationManager.getApplication().isUnitTestMode())   return null;
  if (file instanceof PsiJavaFile) {
    if (file instanceof JspFile)     return null;
    PsiJavaFile javaFile=(PsiJavaFile)file;
    PsiClass[] classes=javaFile.getClasses();
    if (classes.length == 0)     return null;
    PsiDirectory directory=javaFile.getContainingDirectory();
    if (directory == null)     return null;
    PsiPackage dirPackage=directory.getPackage();
    if (dirPackage == null)     return null;
    PsiPackageStatement packageStatement=javaFile.getPackageStatement();
    String packageName=dirPackage.getQualifiedName();
    if (!Comparing.strEqual(packageName,"",true) && packageStatement == null) {
      String description=JavaErrorMessages.message("missing.package.statement",packageName);
      return new ProblemDescriptor[]{manager.createProblemDescriptor(classes[0].getNameIdentifier(),description,new AdjustPackageNameFix(javaFile,null,dirPackage),ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
    }
    if (packageStatement != null) {
      final PsiJavaCodeReferenceElement packageReference=packageStatement.getPackageReference();
      PsiPackage classPackage=(PsiPackage)packageReference.resolve();
      List<LocalQuickFix> availableFixes=new ArrayList<LocalQuickFix>();
      if (classPackage == null) {
        availableFixes.add(new AdjustPackageNameFix(javaFile,packageStatement,dirPackage));
      }
 else       if (!Comparing.equal(dirPackage.getQualifiedName(),packageReference.getText(),true)) {
        availableFixes.add(new AdjustPackageNameFix(javaFile,packageStatement,dirPackage));
        availableFixes.add(new MoveToPackageFix(file,classPackage));
      }
      if (!availableFixes.isEmpty()) {
        String description=JavaErrorMessages.message("package.name.file.path.mismatch",packageReference.getText(),dirPackage.getQualifiedName());
        return new ProblemDescriptor[]{manager.createProblemDescriptor(packageStatement,description,availableFixes.toArray(new LocalQuickFix[availableFixes.size()]),ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
      }
    }
  }
  return null;
}
