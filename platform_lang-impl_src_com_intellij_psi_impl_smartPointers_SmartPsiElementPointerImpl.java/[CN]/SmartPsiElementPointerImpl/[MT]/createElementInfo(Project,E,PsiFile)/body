{
  if (element instanceof PsiCompiledElement || containingFile == null || !containingFile.isPhysical() || !element.isPhysical()) {
    if (element instanceof StubBasedPsiElement && element instanceof PsiCompiledElement) {
      if (element instanceof PsiFile) {
        return new FileElementInfo((PsiFile)element);
      }
      PsiAnchor.StubIndexReference stubReference=PsiAnchor.createStubReference(element,containingFile);
      if (stubReference != null) {
        return new ClsElementInfo(stubReference);
      }
    }
    return new HardElementInfo(project,element);
  }
  if (element instanceof PsiDirectory) {
    return new DirElementInfo((PsiDirectory)element);
  }
  for (  SmartPointerElementInfoFactory factory : Extensions.getExtensions(SmartPointerElementInfoFactory.EP_NAME)) {
    final SmartPointerElementInfo result=factory.createElementInfo(element);
    if (result != null)     return result;
  }
  FileViewProvider viewProvider=containingFile.getViewProvider();
  if (viewProvider instanceof InjectedFileViewProvider) {
    PsiElement context=containingFile.getContext();
    if (context != null)     return new InjectedSelfElementInfo(project,element,context);
  }
  if (element instanceof PsiFile) {
    return new FileElementInfo((PsiFile)element);
  }
  TextRange elementRange=element.getTextRange();
  if (elementRange == null) {
    return new HardElementInfo(project,element);
  }
  LOG.assertTrue(element.isPhysical());
  LOG.assertTrue(element.isValid());
  boolean isMultiRoot=viewProvider.getAllFiles().size() > 1;
  VirtualFile virtualFile=containingFile.getVirtualFile();
  boolean isElementInMainRoot=virtualFile == null || containingFile.getManager().findFile(virtualFile) == containingFile;
  if (isMultiRoot && !isElementInMainRoot) {
    return new MultiRootSelfElementInfo(project,elementRange,element.getClass(),containingFile,containingFile.getLanguage());
  }
  return new SelfElementInfo(project,elementRange,element.getClass(),containingFile,containingFile.getLanguage());
}
