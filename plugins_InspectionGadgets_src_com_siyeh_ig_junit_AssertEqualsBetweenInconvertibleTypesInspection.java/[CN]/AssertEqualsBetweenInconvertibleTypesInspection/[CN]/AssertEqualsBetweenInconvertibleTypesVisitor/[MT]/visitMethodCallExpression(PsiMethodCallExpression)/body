{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 2 && arguments.length != 3) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"assertEquals".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!ClassUtils.isSubclass(containingClass,"junit.framework.Assert") && !ClassUtils.isSubclass(containingClass,"org.junit.Assert")) {
    return;
  }
  final PsiExpression expression1=arguments[arguments.length - 1];
  final PsiExpression expression2=arguments[arguments.length - 2];
  final PsiType type1=expression1.getType();
  if (type1 == null) {
    return;
  }
  final PsiType type2=expression2.getType();
  if (type2 == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType1=parameters[parameters.length - 1].getType();
  final PsiType parameterType2=parameters[parameters.length - 2].getType();
  if (!parameterType1.equals(parameterType2)) {
    return;
  }
  if (TypeConversionUtil.areTypesConvertible(type1,type2)) {
    return;
  }
  registerMethodCallError(expression,type1,type2);
}
