{
  handler.setNoSSH(!remote);
  final List<String> errorOutput=new ArrayList<String>();
  final List<String> output=new ArrayList<String>();
  final AtomicInteger exitCode=new AtomicInteger();
  final AtomicBoolean startFailed=new AtomicBoolean();
  handler.addLineListener(new GitLineHandlerListener(){
    @Override public void onLineAvailable(    String line,    Key outputType){
      if (isError(line)) {
        errorOutput.add(line);
      }
 else {
        output.add(line);
      }
    }
    @Override public void processTerminated(    int code){
      exitCode.set(code);
    }
    @Override public void startFailed(    Throwable exception){
      startFailed.set(true);
      errorOutput.add("Failed to start Git process");
      errorOutput.add(ExceptionUtil.getThrowableText(exception));
    }
  }
);
  handler.runInCurrentThread(null);
  final boolean success=!startFailed.get() && errorOutput.isEmpty() && (handler.isIgnoredErrorCode(exitCode.get()) || exitCode.get() == 0);
  return new GitCommandResult(success,exitCode.get(),errorOutput,output);
}
