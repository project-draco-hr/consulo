{
  myTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(true){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      CheckedTreeNode node=(CheckedTreeNode)value;
      SimpleTextAttributes attributes=node.getUserObject() instanceof IntentionActionMetaData ? SimpleTextAttributes.REGULAR_ATTRIBUTES : SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
      final String text=getNodeText(node);
      if (text != null) {
        SearchUtil.appendFragments(myFilter != null ? myFilter.getFilter() : null,text,attributes.getStyle(),attributes.getFgColor(),selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground(),getTextRenderer());
      }
    }
  }
,new CheckedTreeNode(null));
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      TreePath path=e.getPath();
      Object userObject=((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject();
      selectionChanged(userObject);
    }
  }
);
  myFilter=new MyFilterComponent();
  myComponent=new JPanel(new BorderLayout());
  JScrollPane scrollPane=new JScrollPane(myTree);
  JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(createTreeToolbarPanel().getComponent(),BorderLayout.WEST);
  toolbarPanel.add(myFilter,BorderLayout.EAST);
  myComponent.add(toolbarPanel,BorderLayout.NORTH);
  myComponent.add(scrollPane,BorderLayout.CENTER);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      myTree.setSelectionRow(0);
    }
  }
);
  myFilter.reset();
}
