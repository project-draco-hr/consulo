{
  final int length=forStatement.getText().length();
  final StringBuffer out=new StringBuffer(length);
  final PsiBinaryExpression condition=(PsiBinaryExpression)forStatement.getCondition();
  final PsiExpression lhs=condition.getLOperand();
  final String indexName=lhs.getText();
  final PsiReferenceExpression arrayLengthExpression=(PsiReferenceExpression)condition.getROperand();
  final PsiReferenceExpression arrayReference=(PsiReferenceExpression)arrayLengthExpression.getQualifierExpression();
  final PsiArrayType arrayType=(PsiArrayType)arrayReference.getType();
  final PsiType componentType=arrayType.getComponentType();
  final String type=componentType.getPresentableText();
  final String arrayName=arrayReference.getText();
  final PsiStatement body=forStatement.getBody();
  final PsiStatement firstStatement=getFirstStatement(body);
  final String contentVariableName;
  final String finalString;
  final PsiStatement statementToSkip;
  final boolean isDeclaration=isArrayElementDeclaration(firstStatement,arrayName,indexName);
  if (isDeclaration) {
    final PsiDeclarationStatement decl=(PsiDeclarationStatement)firstStatement;
    final PsiElement[] declaredElements=decl.getDeclaredElements();
    final PsiLocalVariable localVar=(PsiLocalVariable)declaredElements[0];
    contentVariableName=localVar.getName();
    statementToSkip=decl;
    if (localVar.hasModifierProperty(PsiModifier.FINAL)) {
      finalString="final ";
    }
 else {
      finalString="";
    }
  }
 else {
    final String collectionName=arrayReference.getReferenceName();
    contentVariableName=createNewVarName(project,forStatement,componentType,collectionName);
    finalString="";
    statementToSkip=null;
  }
  out.append("for(" + finalString + type+ ' '+ contentVariableName+ ": "+ arrayName+ ')');
  replaceArrayAccess(body,contentVariableName,arrayName,indexName,statementToSkip,out);
  return out.toString();
}
