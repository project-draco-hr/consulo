{
  final CommittedChangesCache cache=CommittedChangesCache.getInstance(myProject);
  cache.hasCachesForAnyRoot(new Consumer<Boolean>(){
    public void consume(    final Boolean notEmpty){
      if (!notEmpty) {
        if (cacheOnly) {
          myBrowser.getEmptyText().setText(VcsBundle.message("committed.changes.not.loaded.message"));
          return;
        }
        if (!CacheSettingsDialog.showSettingsDialog(myProject))         return;
      }
      cache.getProjectChangesAsync(mySettings,myMaxCount,cacheOnly,new Consumer<List<CommittedChangeList>>(){
        public void consume(        final List<CommittedChangeList> committedChangeLists){
          updateFilteredModel(committedChangeLists,false);
        }
      }
,new Consumer<List<VcsException>>(){
        public void consume(        final List<VcsException> vcsExceptions){
          AbstractVcsHelper.getInstance(myProject).showErrors(vcsExceptions,"Error refreshing VCS history");
        }
      }
);
    }
  }
);
}
