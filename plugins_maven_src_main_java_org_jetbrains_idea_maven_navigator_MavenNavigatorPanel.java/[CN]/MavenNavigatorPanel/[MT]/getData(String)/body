{
  if (dataId.equals(DataKeys.PROJECT.getName())) {
    return myNavigator.project;
  }
  if (dataId.equals(DataKeys.NAVIGATABLE_ARRAY.getName())) {
    final List<Navigatable> navigatables=new ArrayList<Navigatable>();
    for (    PomTreeStructure.PomNode pomNode : getSelectedPomNodes()) {
      navigatables.add(pomNode.getNavigatable());
    }
    return navigatables.isEmpty() ? null : navigatables.toArray(new Navigatable[navigatables.size()]);
  }
  if (dataId.equals(DataKeys.VIRTUAL_FILE.getName())) {
    final PomTreeStructure.PomNode pomNode=getContextPomNode();
    return pomNode != null ? pomNode.getFile() : null;
  }
  if (dataId.equals(DataKeys.VIRTUAL_FILE_ARRAY.getName())) {
    final List<VirtualFile> files=new ArrayList<VirtualFile>();
    for (    PomTreeStructure.PomNode pomNode : getSelectedPomNodes()) {
      files.add(pomNode.getFile());
    }
    return files.isEmpty() ? null : files.toArray(new VirtualFile[files.size()]);
  }
  if (dataId.equals(MavenDataKeys.MAVEN_GOALS_KEY.getName())) {
    final PomTreeStructure.PomNode pomNode=getSelectedPomNode();
    if (pomNode != null) {
      final MavenProject mavenProject=myNavigator.myProjectsState.getMavenProject(pomNode.getFile());
      if (mavenProject != null) {
        final String goal=mavenProject.getBuild().getDefaultGoal();
        if (!StringUtil.isEmptyOrSpaces(goal)) {
          return Collections.singletonList(goal);
        }
      }
    }
 else {
      final List<PomTreeStructure.GoalNode> nodes=myNavigator.getSelectedNodes(PomTreeStructure.GoalNode.class,false);
      if (MavenProjectNavigator.getCommonParent(nodes) == null) {
        return null;
      }
      final List<String> goals=new ArrayList<String>();
      for (      PomTreeStructure.GoalNode node : nodes) {
        goals.add(node.getGoal());
      }
      Collections.sort(goals,myGoalOrderComparator);
      return goals;
    }
  }
  if (dataId.equals(MavenDataKeys.MAVEN_PROFILES_KEY.getName())) {
    final List<PomTreeStructure.ProfileNode> nodes=myNavigator.getSelectedNodes(PomTreeStructure.ProfileNode.class,false);
    if (MavenProjectNavigator.getCommonParent(nodes) == null) {
      return null;
    }
    final List<String> profiles=new ArrayList<String>();
    for (    PomTreeStructure.ProfileNode node : nodes) {
      profiles.add(node.getProfile());
    }
    return profiles;
  }
  return null;
}
