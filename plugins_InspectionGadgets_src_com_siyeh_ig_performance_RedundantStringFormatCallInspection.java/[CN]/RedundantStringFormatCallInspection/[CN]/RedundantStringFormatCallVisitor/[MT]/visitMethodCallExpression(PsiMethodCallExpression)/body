{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"format".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length > 2 || arguments.length == 0) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  if (!(qualifier instanceof PsiReference)) {
    return;
  }
  final PsiReference referenceExpression=(PsiReference)qualifier;
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  final String className=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(className)) {
    return;
  }
  final PsiExpression firstArgument=arguments[0];
  final PsiType firstType=firstArgument.getType();
  if (firstType == null) {
    return;
  }
  if (containsPercentN(firstArgument)) {
    return;
  }
  if (firstType.equalsToText(CommonClassNames.JAVA_LANG_STRING) && arguments.length == 1) {
    registerMethodCallError(expression);
  }
 else   if (firstType.equalsToText("java.util.Locale")) {
    if (arguments.length != 2) {
      return;
    }
    final PsiExpression secondArgument=arguments[1];
    final PsiType secondType=secondArgument.getType();
    if (secondType == null) {
      return;
    }
    if (secondType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
      registerMethodCallError(expression);
    }
  }
}
