{
  final PsiModifierList modifierList=field.getModifierList();
  if (modifierList == null)   return;
  final String fieldName=field.getName();
  final PsiConstantEvaluationHelper evalHelper=JavaPsiFacade.getInstance(field.getProject()).getConstantEvaluationHelper();
  final PsiAnnotation attrAnno=modifierList.findAnnotation(Attribute.class.getName());
  if (attrAnno != null) {
    final PsiAnnotationMemberValue attributeName=attrAnno.findAttributeValue("value");
    if (attributeName != null && attributeName instanceof PsiExpression) {
      final Class<String> type=String.class;
      PsiExpression expression=(PsiExpression)attributeName;
      final Object evaluatedExpression=evalHelper.computeConstantExpression(expression,false);
      if (evaluatedExpression != null) {
        final DomExtension extension=registrar.registerGenericAttributeValueChildExtension(new XmlName(evaluatedExpression.toString()),type);
        if (fieldName.length() > 5 && fieldName.endsWith("Class")) {
          extension.setConverter(new PluginPsiClassConverter());
        }
      }
    }
    return;
  }
  final PsiAnnotation tagAnno=modifierList.findAnnotation(Tag.class.getName());
  final PsiAnnotation propAnno=modifierList.findAnnotation(Property.class.getName());
  final PsiAnnotation absColAnno=modifierList.findAnnotation(AbstractCollection.class.getName());
  final String tagName=tagAnno != null ? getStringAttribute(tagAnno,"value",evalHelper) : propAnno != null && getBooleanAttribute(propAnno,"surroundWithTag",evalHelper) ? Constants.OPTION : null;
  if (tagName != null) {
    if (absColAnno == null) {
      registrar.registerFixedNumberChildExtension(new XmlName(tagName),SimpleTagValue.class);
    }
 else {
      registrar.registerFixedNumberChildExtension(new XmlName(tagName),DomElement.class).addExtender(new DomExtender(){
        @Override public void registerExtensions(        @NotNull DomElement domElement,        @NotNull DomExtensionsRegistrar registrar){
          registerCollectionBinding(field.getType(),registrar,absColAnno,evalHelper);
        }
      }
);
    }
  }
 else   if (absColAnno != null) {
    registerCollectionBinding(field.getType(),registrar,absColAnno,evalHelper);
  }
}
