{
  final boolean surroundWithTag=getBooleanAttribute(anno,"surroundWithTag",evalHelper);
  if (surroundWithTag)   return;
  final String tagName=getStringAttribute(anno,"elementTag",evalHelper);
  final String attrName=getStringAttribute(anno,"elementValueAttribute",evalHelper);
  final PsiClass psiClass=getElementType(type);
  if (tagName != null && attrName == null) {
    registrar.registerCollectionChildrenExtension(new XmlName(tagName),SimpleTagValue.class);
  }
 else   if (tagName != null) {
    registrar.registerCollectionChildrenExtension(new XmlName(tagName),DomElement.class).addExtender(new DomExtender(){
      @Override public void registerExtensions(      @NotNull DomElement domElement,      @NotNull DomExtensionsRegistrar registrar){
        registrar.registerGenericAttributeValueChildExtension(new XmlName(attrName),String.class);
      }
    }
);
  }
 else   if (psiClass != null) {
    final PsiModifierList modifierList=psiClass.getModifierList();
    final PsiAnnotation tagAnno=modifierList == null ? null : modifierList.findAnnotation(Tag.class.getName());
    final String classTagName=tagAnno == null ? psiClass.getName() : getStringAttribute(tagAnno,"value",evalHelper);
    if (classTagName != null) {
      registrar.registerCollectionChildrenExtension(new XmlName(classTagName),DomElement.class).addExtender(new DomExtender(){
        @Override public void registerExtensions(        @NotNull DomElement domElement,        @NotNull DomExtensionsRegistrar registrar){
          registerXmlb(registrar,psiClass);
        }
      }
);
    }
  }
}
