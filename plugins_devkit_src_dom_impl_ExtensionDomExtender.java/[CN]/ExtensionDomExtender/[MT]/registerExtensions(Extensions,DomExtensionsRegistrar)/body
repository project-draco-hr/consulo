{
  final XmlElement xmlElement=extensions.getXmlElement();
  if (xmlElement == null)   return new Object[0];
  final XmlFile xmlFile=(XmlFile)xmlElement.getContainingFile();
  final PsiManager psiManager=xmlFile.getManager();
  IdeaPlugin ideaPlugin=extensions.getParentOfType(IdeaPlugin.class,true);
  if (ideaPlugin == null)   return new Object[0];
  final Collection<String> dependencies=getDependencies(ideaPlugin);
  final Collection<IdeaPlugin> allVisiblePlugins=IdeaPluginConverter.collectAllVisiblePlugins(xmlFile);
  List<IdeaPlugin> depPlugins=new ArrayList<IdeaPlugin>();
  for (  IdeaPlugin plugin : allVisiblePlugins) {
    final GenericDomValue<String> value=plugin.getId();
    final String id=value.getStringValue();
    if (id != null && dependencies.contains(id)) {
      depPlugins.add(plugin);
    }
  }
  registerExtensions(extensions,ideaPlugin,registrar,psiManager);
  for (  IdeaPlugin plugin : depPlugins) {
    registerExtensions(extensions,plugin,registrar,psiManager);
  }
  List<Object> deps=new ArrayList<Object>();
  deps.addAll(ContainerUtil.map(allVisiblePlugins,new Function<IdeaPlugin,Object>(){
    public Object fun(    final IdeaPlugin ideaPlugin){
      return ideaPlugin.getRoot();
    }
  }
));
  deps.add(ProjectRootManager.getInstance(xmlFile.getProject()));
  deps.add(ideaPlugin.getRoot());
  return deps.toArray(new Object[deps.size()]);
}
