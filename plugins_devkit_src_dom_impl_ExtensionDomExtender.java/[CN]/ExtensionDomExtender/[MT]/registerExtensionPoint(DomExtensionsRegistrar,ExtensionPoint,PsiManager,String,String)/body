{
  String epName=extensionPoint.getName().getStringValue();
  if (epName != null && StringUtil.isNotEmpty(pluginId))   epName=pluginId + "." + epName;
  if (epName == null)   epName=extensionPoint.getQualifiedName().getStringValue();
  if (epName == null)   return;
  if (!epName.startsWith(prefix))   return;
  final DomExtension domExtension=registrar.registerCollectionChildrenExtension(new XmlName(epName.substring(prefix.length())),Extension.class);
  domExtension.setDeclaringElement(extensionPoint);
  domExtension.addExtender(new DomExtender(){
    public void registerExtensions(    @NotNull final DomElement domElement,    @NotNull final DomExtensionsRegistrar registrar){
      final String interfaceName=extensionPoint.getInterface().getStringValue();
      if (interfaceName != null) {
        registrar.registerGenericAttributeValueChildExtension(new XmlName("implementation"),PsiClass.class).setConverter(CLASS_CONVERTER);
        final PsiClass implClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(interfaceName,GlobalSearchScope.allScope(manager.getProject()));
        if (implClass != null) {
          registerXmlb(registrar,implClass);
        }
      }
 else {
        final String beanClassName=extensionPoint.getBeanClass().getStringValue();
        if (beanClassName != null) {
          final PsiClass beanClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(beanClassName,GlobalSearchScope.allScope(manager.getProject()));
          if (beanClass != null) {
            registerXmlb(registrar,beanClass);
          }
        }
      }
    }
  }
);
}
