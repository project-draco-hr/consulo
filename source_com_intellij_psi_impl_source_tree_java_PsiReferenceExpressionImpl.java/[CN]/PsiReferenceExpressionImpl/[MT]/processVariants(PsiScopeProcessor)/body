{
  OrFilter filter=new OrFilter();
  filter.addFilter(new ClassFilter(PsiClass.class));
  filter.addFilter(new ClassFilter(PsiPackage.class));
  filter.addFilter(new AndFilter(new ClassFilter(PsiMethod.class),new NotFilter(new ConstructorFilter())));
  filter.addFilter(new ClassFilter(PsiVariable.class));
  FilterScopeProcessor proc=new FilterScopeProcessor(filter,processor){
    private final Set<String> myVarNames=new THashSet<String>();
    @Override public boolean execute(    final PsiElement element,    final ResolveState state){
      if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
        myVarNames.add(((PsiVariable)element).getName());
      }
 else       if (element instanceof PsiField && myVarNames.contains(((PsiVariable)element).getName())) {
        return true;
      }
      return super.execute(element,state);
    }
  }
;
  PsiScopesUtil.resolveAndWalk(proc,this,null,true);
}
