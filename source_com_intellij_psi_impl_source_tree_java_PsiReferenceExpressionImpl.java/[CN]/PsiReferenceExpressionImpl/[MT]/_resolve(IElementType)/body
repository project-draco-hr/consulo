{
  if (parentType == null) {
    parentType=getTreeParent() != null ? getTreeParent().getElementType() : null;
  }
  if (parentType == REFERENCE_EXPRESSION) {
{
{
        final VariableResolverProcessor processor=new VariableResolverProcessor(this);
        PsiScopesUtil.resolveAndWalk(processor,this,null);
        ResolveResult[] result=processor.getResult();
        if (result.length > 0) {
          return processor.getResult();
        }
      }
{
        final PsiElement classNameElement;
        classNameElement=getReferenceNameElement();
        if (!(classNameElement instanceof PsiIdentifier))         return ResolveResult.EMPTY_ARRAY;
        final String className=classNameElement.getText();
        final ClassResolverProcessor processor=new ClassResolverProcessor(className,this);
        PsiScopesUtil.resolveAndWalk(processor,this,null);
        ResolveResult[] result=processor.getResult();
        if (result.length > 0) {
          return processor.getResult();
        }
      }
{
        final String packageName=getCachedTextSkipWhiteSpaceAndComments();
        final PsiManager manager=getManager();
        final PsiPackage aPackage=manager.findPackage(packageName);
        if (aPackage == null) {
          if (!manager.isPartOfPackagePrefix(packageName)) {
            return ResolveResult.EMPTY_ARRAY;
          }
 else {
            return CandidateInfo.RESOLVE_RESULT_FOR_PACKAGE_PREFIX_PACKAGE;
          }
        }
        return new ResolveResult[]{new CandidateInfo(aPackage,PsiSubstitutor.EMPTY)};
      }
    }
  }
 else   if (parentType == METHOD_CALL_EXPRESSION) {
{
      final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)getParent();
      final MethodResolverProcessor processor=new MethodResolverProcessor(methodCall);
      try {
        PsiScopesUtil.setupAndRunProcessor(processor,methodCall,false);
      }
 catch (      MethodProcessorSetupFailedException e) {
        return ResolveResult.EMPTY_ARRAY;
      }
      return processor.getResult();
    }
  }
 else   if (parentType == SWITCH_LABEL_STATEMENT) {
    if (!isQualified()) {
      PsiSwitchStatement switchStatement=((PsiSwitchLabelStatement)SourceTreeToPsiMap.treeElementToPsi(getTreeParent())).getEnclosingSwitchStatement();
      if (switchStatement != null) {
        PsiExpression expression=switchStatement.getExpression();
        if (expression != null && expression.getType() instanceof PsiClassType) {
          PsiClass aClass=((PsiClassType)expression.getType()).resolve();
          if (aClass != null && aClass.isEnum()) {
            VariablesProcessor processor=new VariablesProcessor(true){
              protected boolean check(              PsiVariable var,              PsiSubstitutor substitutor){
                return var instanceof PsiEnumConstant && var.getName().equals(getReferenceName());
              }
            }
;
            PsiScopesUtil.treeWalkUp(processor,aClass,aClass);
            if (processor.size() == 1) {
              return new ResolveResult[]{new CandidateInfo(processor.getResult(0),PsiSubstitutor.EMPTY)};
            }
            return ResolveResult.EMPTY_ARRAY;
          }
        }
      }
    }
{
      final VariableResolverProcessor processor=new VariableResolverProcessor(this);
      PsiScopesUtil.resolveAndWalk(processor,this,null);
      return processor.getResult();
    }
  }
 else {
{
      final VariableResolverProcessor processor=new VariableResolverProcessor(this);
      PsiScopesUtil.resolveAndWalk(processor,this,null);
      return processor.getResult();
    }
  }
}
