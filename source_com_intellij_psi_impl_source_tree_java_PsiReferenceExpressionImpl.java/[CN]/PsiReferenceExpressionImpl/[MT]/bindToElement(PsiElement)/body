{
  CheckUtil.checkWritable(this);
  if (isReferenceTo(element))   return this;
  if (getParent() instanceof PsiMethodCallExpression) {
    throw new IncorrectOperationException();
  }
  PsiManager manager=getManager();
  if (element instanceof PsiClass) {
    String qName=((PsiClass)element).getQualifiedName();
    if (qName == null) {
      qName=((PsiClass)element).getName();
      final PsiClass psiClass=getManager().getResolveHelper().resolveReferencedClass(qName,this);
      if (!getManager().areElementsEquivalent(psiClass,element)) {
        throw new IncorrectOperationException();
      }
    }
 else {
      if (getManager().findClass(qName,getResolveScope()) == null) {
        return this;
      }
    }
    boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && isFullyQualified(this);
    final CharTable table=SharedImplUtil.findCharTableByTree(getTreeParent());
    TreeElement ref=ExpressionParsing.parseExpressionText(manager,qName,0,qName.length(),table);
    getTreeParent().replaceChildInternal(this,ref);
    CodeStyleManagerEx codeStyleManager=(CodeStyleManagerEx)manager.getCodeStyleManager();
    if (!preserveQualification) {
      ref=(TreeElement)SourceTreeToPsiMap.psiElementToTree(codeStyleManager.shortenClassReferences(SourceTreeToPsiMap.treeElementToPsi(ref),CodeStyleManagerEx.UNCOMPLETE_CODE));
    }
    return SourceTreeToPsiMap.treeElementToPsi(ref);
  }
 else   if (element instanceof PsiPackage) {
    String qName=((PsiPackage)element).getQualifiedName();
    if (qName.length() == 0) {
      throw new IncorrectOperationException();
    }
    final CharTable table=SharedImplUtil.findCharTableByTree(getTreeParent());
    TreeElement ref=ExpressionParsing.parseExpressionText(manager,qName,0,qName.length(),table);
    getTreeParent().replaceChildInternal(this,ref);
    return SourceTreeToPsiMap.treeElementToPsi(ref);
  }
 else {
    throw new IncorrectOperationException();
  }
}
