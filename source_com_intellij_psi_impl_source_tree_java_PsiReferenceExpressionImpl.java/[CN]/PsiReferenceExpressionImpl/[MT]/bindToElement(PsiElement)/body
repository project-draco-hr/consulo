{
  CheckUtil.checkWritable(this);
  if (isReferenceTo(element))   return this;
  PsiManager manager=getManager();
  if (element instanceof PsiClass) {
    String qName=((PsiClass)element).getQualifiedName();
    if (qName == null)     throw new IncorrectOperationException("Cannot bind to unqualified class: " + element);
    if (JavaPsiFacade.getInstance(manager.getProject()).findClass(qName,getResolveScope()) == null) {
      return this;
    }
    boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && isFullyQualified(this);
    final CharTable table=SharedImplUtil.findCharTableByTree(getTreeParent());
    TreeElement ref=ExpressionParsing.parseExpressionText(manager,qName,0,qName.length(),table);
    getTreeParent().replaceChildInternal(this,ref);
    JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(manager.getProject());
    if (!preserveQualification) {
      ref=(TreeElement)SourceTreeToPsiMap.psiElementToTree(codeStyleManager.shortenClassReferences(SourceTreeToPsiMap.treeElementToPsi(ref),JavaCodeStyleManager.UNCOMPLETE_CODE));
    }
    return SourceTreeToPsiMap.treeElementToPsi(ref);
  }
 else   if (element instanceof PsiPackage) {
    String qName=((PsiPackage)element).getQualifiedName();
    if (qName.length() == 0) {
      throw new IncorrectOperationException();
    }
    final CharTable table=SharedImplUtil.findCharTableByTree(getTreeParent());
    TreeElement ref=ExpressionParsing.parseExpressionText(manager,qName,0,qName.length(),table);
    getTreeParent().replaceChildInternal(this,ref);
    return SourceTreeToPsiMap.treeElementToPsi(ref);
  }
 else   if ((element instanceof PsiField || element instanceof PsiMethod) && ((PsiMember)element).hasModifierProperty(PsiModifier.STATIC)) {
    if (!isPhysical()) {
      return this;
    }
    PsiMember member=(PsiMember)element;
    final PsiClass psiClass=member.getContainingClass();
    if (psiClass == null)     throw new IncorrectOperationException();
    String qName=psiClass.getQualifiedName() + "." + member.getName();
    final CharTable table=SharedImplUtil.findCharTableByTree(getTreeParent());
    TreeElement ref=ExpressionParsing.parseExpressionText(manager,qName,0,qName.length(),table);
    getTreeParent().replaceChildInternal(this,ref);
    return SourceTreeToPsiMap.treeElementToPsi(ref);
  }
 else {
    throw new IncorrectOperationException(element.toString());
  }
}
