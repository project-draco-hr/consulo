{
  final PsiClass test=(PsiClass)new JavaTestGenerator().generateTest(project,d);
  if (test == null)   return null;
  return ApplicationManager.getApplication().runWriteAction(new Computable<PsiElement>(){
    @Override public PsiElement compute(){
      final PsiFile file=test.getContainingFile();
      final String name=file.getName();
      final String newName=FileUtil.getNameWithoutExtension(name) + "." + GroovyFileType.DEFAULT_EXTENSION;
      final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
      try {
        final PsiElement element=file.setName(newName);
        final GroovyFile newFile=(GroovyFile)codeStyleManager.reformat(element);
        GroovyUnusedImportPass.optimizeImports(project,newFile);
        return newFile.getClasses()[0];
      }
 catch (      IncorrectOperationException e) {
        file.delete();
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            Messages.showErrorDialog(project,CodeInsightBundle.message("intention.error.cannot.create.class.message",d.getClassName()),CodeInsightBundle.message("intention.error.cannot.create.class.title"));
          }
        }
);
        return null;
      }
    }
  }
);
}
