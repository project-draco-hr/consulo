{
  AccessToken accessToken=WriteAction.start();
  try {
    final PsiClass test=(PsiClass)PostprocessReformattingAspect.getInstance(project).postponeFormattingInside(new Computable<PsiElement>(){
      public PsiElement compute(){
        try {
          IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
          GrTypeDefinition targetClass=CreateClassActionBase.createClassByType(d.getTargetDirectory(),d.getClassName(),PsiManager.getInstance(project),null,NewGroovyClassAction.GROOVY_CLASS);
          if (targetClass == null)           return null;
          addSuperClass(targetClass,project,d.getSuperClassName());
          Editor editor=CodeInsightUtil.positionCursor(project,targetClass.getContainingFile(),targetClass.getLBrace());
          addTestMethods(editor,targetClass,d.getSelectedTestFrameworkDescriptor(),d.getSelectedMethods(),d.shouldGeneratedBefore(),d.shouldGeneratedAfter());
          return targetClass;
        }
 catch (        IncorrectOperationException e1) {
          showErrorLater(project,d.getClassName());
          return null;
        }
      }
    }
);
    if (test == null)     return null;
    GrReferenceAdjuster.shortenReferences(test);
    CodeStyleManager.getInstance(project).reformat(test);
    return test;
  }
  finally {
    accessToken.finish();
  }
}
