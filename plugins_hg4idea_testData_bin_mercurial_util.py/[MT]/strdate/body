def strdate(string, format, defaults=[]):
    'parse a localized time string and return a (unixtime, offset) tuple.\n    if the string cannot be parsed, ValueError is raised.'

    def timezone(string):
        tz = string.split()[(-1)]
        if ((tz[0] in '+-') and (len(tz) == 5) and tz[1:].isdigit()):
            sign = (((tz[0] == '+') and 1) or (-1))
            hours = int(tz[1:3])
            minutes = int(tz[3:5])
            return (((- sign) * ((hours * 60) + minutes)) * 60)
        if ((tz == 'GMT') or (tz == 'UTC')):
            return 0
        return None
    (offset, date) = (timezone(string), string)
    if (offset != None):
        date = ' '.join(string.split()[:(-1)])
    for part in defaults:
        found = [True for p in part if (('%' + p) in format)]
        if (not found):
            date += ('@' + defaults[part])
            format += ('@%' + part[0])
    timetuple = time.strptime(date, format)
    localunixtime = int(calendar.timegm(timetuple))
    if (offset is None):
        unixtime = int(time.mktime(timetuple))
        offset = (unixtime - localunixtime)
    else:
        unixtime = (localunixtime + offset)
    return (unixtime, offset)
