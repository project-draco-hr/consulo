def rundetached(args, condfn):
    'Execute the argument list in a detached process.\n\n    condfn is a callable which is called repeatedly and should return\n    True once the child process is known to have started successfully.\n    At this point, the child process PID is returned. If the child\n    process fails to start or finishes before condfn() evaluates to\n    True, return -1.\n    '
    terminated = set()

    def handler(signum, frame):
        terminated.add(os.wait())
    prevhandler = None
    if hasattr(signal, 'SIGCHLD'):
        prevhandler = signal.signal(signal.SIGCHLD, handler)
    try:
        pid = spawndetached(args)
        while (not condfn()):
            if (((pid in terminated) or (not testpid(pid))) and (not condfn())):
                return (-1)
            time.sleep(0.1)
        return pid
    finally:
        if (prevhandler is not None):
            signal.signal(signal.SIGCHLD, prevhandler)
