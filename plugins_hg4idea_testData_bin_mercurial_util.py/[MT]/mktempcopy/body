def mktempcopy(name, emptyok=False, createmode=None):
    'Create a temporary file with the same contents from name\n\n    The permission bits are copied from the original file.\n\n    If the temporary file is going to be truncated immediately, you\n    can use emptyok=True as an optimization.\n\n    Returns the name of the temporary file.\n    '
    (d, fn) = os.path.split(name)
    (fd, temp) = tempfile.mkstemp(prefix=('.%s-' % fn), dir=d)
    os.close(fd)
    try:
        st_mode = (os.lstat(name).st_mode & 511)
    except OSError as inst:
        if (inst.errno != errno.ENOENT):
            raise
        st_mode = createmode
        if (st_mode is None):
            st_mode = (~ umask)
        st_mode &= 438
    os.chmod(temp, st_mode)
    if emptyok:
        return temp
    try:
        try:
            ifp = posixfile(name, 'rb')
        except IOError as inst:
            if (inst.errno == errno.ENOENT):
                return temp
            if (not getattr(inst, 'filename', None)):
                inst.filename = name
            raise
        ofp = posixfile(temp, 'wb')
        for chunk in filechunkiter(ifp):
            ofp.write(chunk)
        ifp.close()
        ofp.close()
    except:
        try:
            os.unlink(temp)
        except:
            pass
        raise
    return temp
