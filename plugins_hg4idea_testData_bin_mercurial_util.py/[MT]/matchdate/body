def matchdate(date):
    "Return a function that matches a given date match specifier\n\n    Formats include:\n\n    '{date}' match a given date to the accuracy provided\n\n    '<{date}' on or before a given date\n\n    '>{date}' on or after a given date\n\n    "

    def lower(date):
        d = dict(mb='1', d='1')
        return parsedate(date, extendeddateformats, d)[0]

    def upper(date):
        d = dict(mb='12', HI='23', M='59', S='59')
        for days in '31 30 29'.split():
            try:
                d['d'] = days
                return parsedate(date, extendeddateformats, d)[0]
            except:
                pass
        d['d'] = '28'
        return parsedate(date, extendeddateformats, d)[0]
    date = date.strip()
    if (date[0] == '<'):
        when = upper(date[1:])
        return (lambda x: (x <= when))
    elif (date[0] == '>'):
        when = lower(date[1:])
        return (lambda x: (x >= when))
    elif (date[0] == '-'):
        try:
            days = int(date[1:])
        except ValueError:
            raise Abort((_('invalid day spec: %s') % date[1:]))
        when = (makedate()[0] - ((days * 3600) * 24))
        return (lambda x: (x >= when))
    elif (' to ' in date):
        (a, b) = date.split(' to ')
        (start, stop) = (lower(a), upper(b))
        return (lambda x: ((x >= start) and (x <= stop)))
    else:
        (start, stop) = (lower(date), upper(date))
        return (lambda x: ((x >= start) and (x <= stop)))
