{
  if (component == null) {
    throw new IllegalArgumentException("component cannot be null");
  }
  if (!(component instanceof RadContainer)) {
    return;
  }
  final RadContainer container=(RadContainer)component;
  if (!container.isGrid()) {
    return;
  }
  final Point point=SwingUtilities.convertPoint(component.getDelegee(),0,0,editor.getRootContainer().getDelegee());
  g.translate(point.x,point.y);
  try {
    final GridLayoutManager gridLayout=(GridLayoutManager)container.getLayout();
    if (component.isSelected()) {
      g.setColor(SELECTED_GRID_COLOR);
    }
 else {
      g.setColor(NON_SELECTED_GRID_COLOR);
    }
    final int width=component.getWidth();
    final int[] horzGridLines=gridLayout.getHorizontalGridLines();
    final int height=component.getHeight();
    final int[] vertGridLines=gridLayout.getVerticalGridLines();
    boolean[][] horzSkippedLineSegments=null;
    boolean[][] vertSkippedLineSegments=null;
    for (    RadComponent childComponent : container.getComponents()) {
      final GridConstraints constraints=childComponent.getConstraints();
      if (constraints.getColSpan() > 1) {
        if (vertSkippedLineSegments == null) {
          vertSkippedLineSegments=new boolean[vertGridLines.length][height + 4];
        }
        for (int col=constraints.getColumn() + 1; col < constraints.getColumn() + constraints.getColSpan(); col++) {
          for (int y=horzGridLines[constraints.getRow()] + 4; y < horzGridLines[constraints.getRow() + constraints.getRowSpan()] - 4; y++) {
            vertSkippedLineSegments[col][y]=true;
          }
        }
      }
      if (constraints.getRowSpan() > 1) {
        if (horzSkippedLineSegments == null) {
          horzSkippedLineSegments=new boolean[horzGridLines.length][width + 4];
        }
        for (int row=constraints.getRow() + 1; row < constraints.getRow() + constraints.getRowSpan(); row++) {
          for (int x=vertGridLines[constraints.getColumn()] + 4; x < vertGridLines[constraints.getColumn() + constraints.getColSpan()] - 4; x++) {
            horzSkippedLineSegments[row][x]=true;
          }
        }
      }
    }
    for (int i=1; i < horzGridLines.length - 1; i++) {
      final int y=horzGridLines[i];
      for (int x=0; x < width; x+=4) {
        if (horzSkippedLineSegments == null || (!horzSkippedLineSegments[i][x] && !horzSkippedLineSegments[i][x + 1] && !horzSkippedLineSegments[i][x + 2])) {
          UIUtil.drawLine(g,x,y,Math.min(x + 2,width - 1),y);
        }
      }
    }
    for (int i=1; i < vertGridLines.length - 1; i++) {
      final int x=vertGridLines[i];
      for (int y=0; y < height; y+=4) {
        if (vertSkippedLineSegments == null || (!vertSkippedLineSegments[i][y] && !vertSkippedLineSegments[i][y + 1] && !vertSkippedLineSegments[i][y + 2])) {
          UIUtil.drawLine(g,x,y,x,Math.min(y + 2,height - 1));
        }
      }
    }
  }
  finally {
    g.translate(-point.x,-point.y);
  }
}
