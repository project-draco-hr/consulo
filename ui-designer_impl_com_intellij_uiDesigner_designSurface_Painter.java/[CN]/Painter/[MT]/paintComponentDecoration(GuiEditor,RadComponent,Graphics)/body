{
  final ArrayList<RadComponent> selection=new ArrayList<RadComponent>();
  final Rectangle layeredPaneRect=editor.getLayeredPane().getVisibleRect();
  IComponentUtil.iterate(component,new IComponentUtil.ComponentVisitor<RadComponent>(){
    public boolean visit(    final RadComponent component){
      if (!component.getDelegee().isShowing()) {
        return true;
      }
      final Shape oldClip=g.getClip();
      final RadContainer parent=component.getParent();
      if (parent != null) {
        final Point p=SwingUtilities.convertPoint(component.getDelegee(),0,0,editor.getLayeredPane());
        final Rectangle visibleRect=layeredPaneRect.intersection(new Rectangle(p.x,p.y,parent.getWidth(),parent.getHeight()));
        g.setClip(visibleRect);
      }
      if (component.isSelected()) {
        selection.add(component);
      }
 else {
        paintComponentBoundsImpl(editor,component,g);
      }
      paintGridOutline(editor,component,g);
      if (parent != null) {
        g.setClip(oldClip);
      }
      return true;
    }
  }
);
  for (int i=selection.size() - 1; i >= 0; i--) {
    final Shape oldClip=g.getClip();
    final RadComponent c=selection.get(i);
    final RadContainer parent=c.getParent();
    if (parent != null) {
      final Point p=SwingUtilities.convertPoint(c.getDelegee(),0,0,editor.getLayeredPane());
      final Rectangle visibleRect=layeredPaneRect.intersection(new Rectangle(p.x,p.y,parent.getWidth(),parent.getHeight()));
      g.setClip(visibleRect);
    }
    paintComponentBoundsImpl(editor,c,g);
    if (parent != null) {
      g.setClip(oldClip);
    }
  }
}
