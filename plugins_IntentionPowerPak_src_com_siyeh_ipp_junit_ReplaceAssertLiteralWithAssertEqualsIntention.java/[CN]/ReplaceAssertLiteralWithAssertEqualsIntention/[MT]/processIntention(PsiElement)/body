{
  final PsiMethodCallExpression call=(PsiMethodCallExpression)element;
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return;
  }
  final StringBuilder newExpression=new StringBuilder();
  final PsiElement qualifier=methodExpression.getQualifier();
  if (qualifier != null) {
    newExpression.append(qualifier.getText());
    newExpression.append('.');
  }
 else {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(call,PsiMethod.class);
    if (containingMethod != null && AnnotationUtil.isAnnotated(containingMethod,"org.junit.Test",true)) {
      ImportUtils.addStaticImport(element,"org.junit.Assert","assertEquals");
    }
  }
  newExpression.append("assertEquals(");
  final String postfix=methodName.substring("assert".length());
  final String literal=postfix.toLowerCase();
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length > 1) {
    newExpression.append(arguments[0].getText());
    newExpression.append(", ");
  }
  final PsiExpression lastArgument=arguments[arguments.length - 1];
  if (lastArgument instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)lastArgument;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (("assertTrue".equals(methodName) && JavaTokenType.EQEQ.equals(tokenType)) || ("assertFalse".equals(methodName) && JavaTokenType.NE.equals(tokenType))) {
      final PsiExpression lhs=binaryExpression.getLOperand();
      newExpression.append(lhs.getText());
      newExpression.append(", ");
      final PsiExpression rhs=binaryExpression.getROperand();
      if (rhs != null) {
        newExpression.append(rhs.getText());
      }
    }
 else {
      newExpression.append(literal);
      newExpression.append(", ");
      newExpression.append(lastArgument.getText());
    }
  }
 else {
    newExpression.append(literal);
    newExpression.append(", ");
    newExpression.append(lastArgument.getText());
  }
  newExpression.append(')');
  replaceExpression(newExpression.toString(),call);
}
