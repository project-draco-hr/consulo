{
  final PsiMethodCallExpression call=(PsiMethodCallExpression)findMatchingElement(file,editor);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final PsiExpression qualifierExp=methodExpression.getQualifierExpression();
  final String methodName=methodExpression.getReferenceName();
  final String literal=methodName.substring("assert".length()).toLowerCase();
  final String qualifier;
  if (qualifierExp == null) {
    qualifier="";
  }
 else {
    qualifier=qualifierExp.getText() + '.';
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final String callString;
  if (args.length == 1) {
    callString=qualifier + "assertEquals(" + literal+ ", "+ args[0].getText()+ ')';
  }
 else {
    callString=qualifier + "assertEquals(" + args[0].getText()+ ", "+ literal+ ", "+ args[1].getText()+ ')';
  }
  replaceExpression(project,callString,call);
}
