{
  if (myRootElement == element) {
    if (myRootPsiElement == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    if (!(myRootPsiElement instanceof PsiFile)) {
      return new Object[]{myRootPsiElement};
    }
    List<PsiFile> files=((PsiFile)myRootPsiElement).getViewProvider().getAllFiles();
    return PsiUtilCore.toPsiFileArray(files);
  }
  final Object[][] children=new Object[1][];
  children[0]=ArrayUtil.EMPTY_OBJECT_ARRAY;
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      final Object[] result;
      if (myShowTreeNodes) {
        final ArrayList<Object> list=new ArrayList<Object>();
        ASTNode root=element instanceof PsiElement ? SourceTreeToPsiMap.psiElementToTree((PsiElement)element) : element instanceof ASTNode ? (ASTNode)element : null;
        if (element instanceof Inject) {
          root=SourceTreeToPsiMap.psiElementToTree(((Inject)element).getPsi());
        }
        if (root != null) {
          ASTNode child=root.getFirstChildNode();
          while (child != null) {
            if (myShowWhiteSpaces || child.getElementType() != TokenType.WHITE_SPACE) {
              final PsiElement childElement=child.getPsi();
              list.add(childElement == null ? child : childElement);
            }
            child=child.getTreeNext();
          }
          final PsiElement psi=root.getPsi();
          if (psi instanceof PsiLanguageInjectionHost) {
            InjectedLanguageUtil.enumerate(psi,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
              @Override public void visit(              @NotNull PsiFile injectedPsi,              @NotNull List<PsiLanguageInjectionHost.Shred> places){
                list.add(new Inject(psi,injectedPsi));
              }
            }
);
          }
        }
        result=ArrayUtil.toObjectArray(list);
      }
 else {
        final PsiElement[] elementChildren=((PsiElement)element).getChildren();
        if (!myShowWhiteSpaces) {
          final List<PsiElement> childrenList=new ArrayList<PsiElement>(elementChildren.length);
          for (          PsiElement psiElement : elementChildren) {
            if (!myShowWhiteSpaces && psiElement instanceof PsiWhiteSpace) {
              continue;
            }
            childrenList.add(psiElement);
          }
          result=PsiUtilCore.toPsiElementArray(childrenList);
        }
 else {
          result=elementChildren;
        }
      }
      children[0]=result;
    }
  }
);
  return children[0];
}
