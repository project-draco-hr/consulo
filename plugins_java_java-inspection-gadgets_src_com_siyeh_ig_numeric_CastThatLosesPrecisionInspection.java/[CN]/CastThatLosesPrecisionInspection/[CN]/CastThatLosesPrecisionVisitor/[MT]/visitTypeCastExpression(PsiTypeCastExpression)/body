{
  final PsiType castType=expression.getType();
  if (!ClassUtils.isPrimitiveNumericType(castType)) {
    return;
  }
  final PsiExpression operand=expression.getOperand();
  if (operand == null) {
    return;
  }
  final PsiType operandType=operand.getType();
  if (!ClassUtils.isPrimitiveNumericType(operandType)) {
    return;
  }
  if (hasLowerPrecision(operandType,castType)) {
    return;
  }
  if (ignoreIntegerCharCasts) {
    if (PsiType.INT.equals(operandType) && PsiType.CHAR.equals(castType)) {
      return;
    }
  }
  if (PsiType.LONG.equals(operandType) && PsiType.INT.equals(castType)) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,true,PsiClass.class);
    if (MethodUtils.isHashCode(method)) {
      return;
    }
  }
  Object result=ExpressionUtils.computeConstantExpression(operand);
  if (result instanceof Character) {
    result=Integer.valueOf(((Character)result).charValue());
  }
  if (result instanceof Number) {
    final Number number=(Number)result;
    if (valueIsContainableInType(number,castType)) {
      return;
    }
  }
  final PsiTypeElement castTypeElement=expression.getCastType();
  if (castTypeElement == null) {
    return;
  }
  registerError(castTypeElement,operandType);
}
