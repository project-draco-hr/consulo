{
  sortChildren(parentNode,toInsert,false,true);
  final ArrayList<TreeNode> all=new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount());
  all.addAll(toInsert);
  all.addAll(TreeUtil.childrenToArray(parentNode));
  if (toInsert.size() > 0) {
    sortChildren(parentNode,all,true,true);
    int[] newNodeIndices=new int[toInsert.size()];
    int eachNewNodeIndex=0;
    TreeMap<Integer,TreeNode> insertSet=new TreeMap<Integer,TreeNode>();
    for (int i=0; i < toInsert.size(); i++) {
      TreeNode eachNewNode=toInsert.get(i);
      while (all.get(eachNewNodeIndex) != eachNewNode) {
        eachNewNodeIndex++;
      }
      newNodeIndices[i]=eachNewNodeIndex;
      insertSet.put(eachNewNodeIndex,eachNewNode);
    }
    Iterator<Integer> indices=insertSet.keySet().iterator();
    while (indices.hasNext()) {
      Integer eachIndex=indices.next();
      TreeNode eachNode=insertSet.get(eachIndex);
      parentNode.insert((MutableTreeNode)eachNode,eachIndex);
    }
    myTreeModel.nodesWereInserted(parentNode,newNodeIndices);
  }
 else {
    ArrayList<TreeNode> before=new ArrayList<TreeNode>();
    before.addAll(all);
    sortChildren(parentNode,all,true,false);
    if (!before.equals(all)) {
      doWithUpdaterState(new Runnable(){
        public void run(){
          parentNode.removeAllChildren();
          for (          TreeNode each : all) {
            parentNode.add((MutableTreeNode)each);
          }
          myTreeModel.nodeStructureChanged(parentNode);
        }
      }
);
    }
  }
}
