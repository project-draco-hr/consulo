{
  registerWorkerTask(bgReadActionRunnable);
  final Runnable pooledThreadWithProgressRunnable=new Runnable(){
    public void run(){
      if (isReleased()) {
        return;
      }
      final AbstractTreeBuilder builder=getBuilder();
      builder.runBackgroundLoading(new Runnable(){
        public void run(){
          assertNotDispatchThread();
          if (isReleased()) {
            return;
          }
          try {
            bgReadActionRunnable.run();
            if (edtPostRunnable != null && !isReleased()) {
              builder.updateAfterLoadedInBackground(new Runnable(){
                public void run(){
                  try {
                    assertIsDispatchThread();
                    if (isReleased()) {
                      return;
                    }
                    edtPostRunnable.run();
                  }
  finally {
                    unregisterWorkerTask(bgReadActionRunnable,finalizeEdtRunnable);
                  }
                }
              }
);
            }
 else {
              unregisterWorkerTask(bgReadActionRunnable,finalizeEdtRunnable);
            }
          }
 catch (          ProcessCanceledException e) {
            unregisterWorkerTask(bgReadActionRunnable,finalizeEdtRunnable);
          }
catch (          Throwable t) {
            unregisterWorkerTask(bgReadActionRunnable,finalizeEdtRunnable);
            throw new RuntimeException(t);
          }
        }
      }
);
    }
  }
;
  Runnable pooledThreadRunnable=new Runnable(){
    public void run(){
      if (isReleased())       return;
      try {
        if (myProgress != null) {
          ProgressManager.getInstance().runProcess(pooledThreadWithProgressRunnable,myProgress);
        }
 else {
          pooledThreadWithProgressRunnable.run();
        }
      }
 catch (      ProcessCanceledException e) {
      }
    }
  }
;
  if (myWorker == null || myWorker.isDisposed()) {
    myWorker=new WorkerThread("AbstractTreeBuilder.Worker",1);
    myWorker.start();
    if (first) {
      myWorker.addTaskFirst(pooledThreadRunnable);
    }
 else {
      myWorker.addTask(pooledThreadRunnable);
    }
    myWorker.dispose(false);
  }
 else {
    if (first) {
      myWorker.addTaskFirst(pooledThreadRunnable);
    }
 else {
      myWorker.addTask(pooledThreadRunnable);
    }
  }
}
