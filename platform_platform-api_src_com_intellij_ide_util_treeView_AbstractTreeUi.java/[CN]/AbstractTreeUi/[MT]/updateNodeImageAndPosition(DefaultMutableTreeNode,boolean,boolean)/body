{
  if (!(node.getUserObject() instanceof NodeDescriptor))   return;
  NodeDescriptor descriptor=getDescriptorFrom(node);
  if (getElementFromDescriptor(descriptor) == null)   return;
  if (updatePosition) {
    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();
    if (parentNode == null) {
      nodeChanged(node);
    }
 else {
      ApplicationManager.getApplication().assertIsDispatchThread();
      int oldIndex=parentNode.getIndex(node);
      int newIndex=oldIndex;
      if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) {
        List<TreeNode> children=new ArrayList<>(parentNode.getChildCount());
        for (int i=0; i < parentNode.getChildCount(); i++) {
          TreeNode child=parentNode.getChildAt(i);
          LOG.assertTrue(child != null);
          children.add(child);
        }
        sortChildren(node,children,true,false);
        newIndex=children.indexOf(node);
      }
      if (oldIndex != newIndex) {
        List<Object> pathsToExpand=new ArrayList<>();
        List<Object> selectionPaths=new ArrayList<>();
        TreeBuilderUtil.storePaths(getBuilder(),node,pathsToExpand,selectionPaths,false);
        removeNodeFromParent(node,false);
        myTreeModel.insertNodeInto(node,parentNode,newIndex);
        TreeBuilderUtil.restorePaths(getBuilder(),pathsToExpand,selectionPaths,false);
      }
 else {
        nodeChanged(node);
      }
    }
  }
 else   if (nodeChanged) {
    nodeChanged(node);
  }
}
