{
  assertIsDispatchThread();
  EmptyProgressIndicator indicator=new EmptyProgressIndicator();
  final ActionCallback callback=new ActionCallback();
  myBatchIndicators.put(progressive,indicator);
  myBatchCallbacks.put(progressive,callback);
  try {
    progressive.run(indicator);
  }
 catch (  ProcessCanceledException e) {
    resetToReadyNow().doWhenDone(new Runnable(){
      public void run(){
        callback.setRejected();
      }
    }
);
    return callback;
  }
 finally {
    if (isReleased())     return new ActionCallback.Rejected();
    getReady(this).doWhenDone(new Runnable(){
      public void run(){
        if (myBatchIndicators.containsKey(progressive)) {
          ProgressIndicator indicator=myBatchIndicators.remove(progressive);
          myBatchCallbacks.remove(progressive);
          if (indicator.isCanceled()) {
            callback.setRejected();
          }
 else {
            callback.setDone();
          }
        }
 else {
          callback.setRejected();
        }
      }
    }
);
    maybeReady();
  }
  return callback;
}
