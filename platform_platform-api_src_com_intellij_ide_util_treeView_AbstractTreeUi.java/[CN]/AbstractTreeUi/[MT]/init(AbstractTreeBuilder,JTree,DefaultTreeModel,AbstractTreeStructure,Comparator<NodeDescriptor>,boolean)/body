{
  myBuilder=builder;
  myTree=tree;
  myTreeModel=treeModel;
  myActivityMonitor=UiActivityMonitor.getInstance();
  myActivityId=new UiActivity.AsyncBgOperation("TreeUi" + this);
  addModelListenerToDianoseAccessOutsideEdt();
  TREE_NODE_WRAPPER=getBuilder().createSearchingTreeNodeWrapper();
  myTree.setModel(myTreeModel);
  setRootNode((DefaultMutableTreeNode)treeModel.getRoot());
  setTreeStructure(treeStructure);
  myNodeDescriptorComparator=comparator;
  myUpdateIfInactive=updateIfInactive;
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    public void run(){
      if (!wasRootNodeInitialized()) {
        if (myRootNode.getChildCount() == 0) {
          insertLoadingNode(myRootNode,true);
        }
      }
    }
  }
);
  myExpansionListener=new MyExpansionListener();
  myTree.addTreeExpansionListener(myExpansionListener);
  mySelectionListener=new MySelectionListener();
  myTree.addTreeSelectionListener(mySelectionListener);
  setUpdater(getBuilder().createUpdater());
  myProgress=getBuilder().createProgressIndicator();
  Disposer.register(getBuilder(),getUpdater());
  final UiNotifyConnector uiNotify=new UiNotifyConnector(tree,new Activatable(){
    public void showNotify(){
      myShowing=true;
      myWasEverShown=true;
      if (canInitiateNewActivity()) {
        activate(true);
      }
    }
    public void hideNotify(){
      myShowing=false;
      if (canInitiateNewActivity()) {
        deactivate();
      }
    }
  }
);
  Disposer.register(getBuilder(),uiNotify);
  myTree.addFocusListener(myFocusListener);
}
