{
  if (checkIfInStructure && !isInStructure(element)) {
    runDone(onDone);
    return;
  }
  if (wasRootNodeInitialized()) {
    List<Object> kidsToExpand=new ArrayList<Object>();
    Object eachElement=element;
    DefaultMutableTreeNode firstVisible=null;
    while (true) {
      if (!isValid(eachElement))       break;
      final int preselected=getRowIfUnderSelection(eachElement);
      if (preselected >= 0) {
        firstVisible=(DefaultMutableTreeNode)getTree().getPathForRow(preselected).getLastPathComponent();
      }
 else {
        firstVisible=getNodeForElement(eachElement,true);
      }
      if (eachElement != element || !parentsOnly) {
        kidsToExpand.add(eachElement);
      }
      if (firstVisible != null)       break;
      eachElement=eachElement != null ? getTreeStructure().getParentElement(eachElement) : null;
      if (eachElement == null) {
        firstVisible=null;
        break;
      }
      if (kidsToExpand.contains(eachElement)) {
        try {
          LOG.error("Tree path contains equal elements at different levels: element=" + eachElement + " class="+ eachElement.getClass()+ " path="+ kidsToExpand+ " tree structure="+ myTreeStructure);
        }
 catch (        AssertionError e) {
        }
        runDone(onDone);
        throw new ProcessCanceledException();
      }
    }
    if (firstVisible == null) {
      runDone(onDone);
    }
 else     if (kidsToExpand.isEmpty()) {
      final DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)firstVisible.getParent();
      if (parentNode != null) {
        final TreePath parentPath=new TreePath(parentNode.getPath());
        if (!myTree.isExpanded(parentPath)) {
          expand(parentPath,canSmartExpand);
        }
      }
      runDone(onDone);
    }
 else {
      processExpand(firstVisible,kidsToExpand,kidsToExpand.size() - 1,onDone,canSmartExpand);
    }
  }
 else {
    deferExpansion(element,onDone,parentsOnly,canSmartExpand);
  }
}
