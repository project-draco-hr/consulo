{
  getTreeStructure().commit();
  final boolean wasExpanded=myTree.isExpanded(new TreePath(node.getPath())) || isAutoExpand(node);
  final boolean wasLeaf=node.getChildCount() == 0;
  try {
    final NodeDescriptor descriptor=getDescriptorFrom(node);
    if (descriptor == null) {
      removeLoading(node,true);
      return;
    }
    boolean bgBuild=isToBuildInBackground(descriptor);
    boolean notRequiredToUpdateChildren=!forcedNow && !wasExpanded && !forceUpdate;
    Object[] preloaded=preloadedChildren;
    if (notRequiredToUpdateChildren) {
      if (myUnbuiltNodes.contains(node) && node.getChildCount() == 0) {
        insertLoadingNode(node,true);
      }
      return;
    }
    if (!forcedNow) {
      if (!bgBuild) {
        if (myUnbuiltNodes.contains(node)) {
          Pair<Boolean,Object[]> unbuilt=processUnbuilt(node,descriptor,pass,wasExpanded,null);
          if (unbuilt.getFirst())           return;
          preloaded=unbuilt.getSecond();
        }
      }
    }
    boolean childForceUpdate=isChildNodeForceUpdate(node,forceUpdate,wasExpanded);
    if (!forcedNow && isToBuildInBackground(descriptor)) {
      queueBackgroundUpdate(node,descriptor,pass,canSmartExpand(node,toSmartExpand),wasExpanded,childForceUpdate);
      return;
    }
 else {
      updateNodeChildrenNow(node,pass,preloaded,toSmartExpand,wasExpanded,wasLeaf,childForceUpdate);
    }
  }
  finally {
    processNodeActionsIfReady(node);
  }
}
