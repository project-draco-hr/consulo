{
  final Ref<Pair<Boolean,LoadedChildren>> result=new Ref<Pair<Boolean,LoadedChildren>>();
  execute(new Runnable(){
    public void run(){
      if (!isExpanded && getBuilder().isAlwaysShowPlus(descriptor)) {
        result.set(new Pair<Boolean,LoadedChildren>(true,null));
        return;
      }
      final Object element=getElementFor(node);
      addToUpdating(node);
      try {
        final LoadedChildren children=loadedChildren != null ? loadedChildren : new LoadedChildren(getChildrenFor(element));
        boolean processed;
        if (children.getElements().size() == 0) {
          removeLoading(node,true);
          processed=true;
        }
 else {
          if (isAutoExpand(node)) {
            addNodeAction(getElementFor(node),new NodeAction(){
              public void onReady(              final DefaultMutableTreeNode node){
                final TreePath path=new TreePath(node.getPath());
                if (getTree().isExpanded(path) || children.getElements().size() == 0) {
                  removeLoading(node,false);
                }
 else {
                  maybeYeild(new ActiveRunnable(){
                    public ActionCallback run(){
                      expand(element,null);
                      return new ActionCallback.Done();
                    }
                  }
,pass,node);
                }
              }
            }
,false);
          }
          processed=false;
        }
        removeFromUpdating(node);
        processNodeActionsIfReady(node);
        result.set(new Pair<Boolean,LoadedChildren>(processed,children));
      }
  finally {
        removeFromUpdating(node);
      }
    }
  }
);
  return result.get();
}
