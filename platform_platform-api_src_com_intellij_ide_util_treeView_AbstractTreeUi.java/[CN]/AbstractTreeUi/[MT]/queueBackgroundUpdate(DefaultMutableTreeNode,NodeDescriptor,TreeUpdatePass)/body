{
  assertIsDispatchThread();
  final Object oldElementFromDescriptor=getElementFromDescriptor(descriptor);
  if (isLoadedInBackground(oldElementFromDescriptor))   return false;
  addToLoadedInBackground(oldElementFromDescriptor);
  if (!isNodeBeingBuilt(node)) {
    LoadingNode loadingNode=new LoadingNode(getLoadingNodeText());
    myTreeModel.insertNodeInto(loadingNode,node,node.getChildCount());
  }
  final Ref<Object[]> children=new Ref<Object[]>();
  final Ref<Object> elementFromDescriptor=new Ref<Object>();
  Runnable buildRunnable=new Runnable(){
    public void run(){
      if (isReleased()) {
        return;
      }
      update(descriptor,true);
      Object element=getElementFromDescriptor(descriptor);
      if (element == null) {
        removeFromLoadedInBackground(oldElementFromDescriptor);
        return;
      }
      elementFromDescriptor.set(element);
      children.set(getChildrenFor(getBuilder().getTreeStructureElement(descriptor)));
    }
  }
;
  final DefaultMutableTreeNode[] nodeToProcessActions=new DefaultMutableTreeNode[1];
  Runnable updateRunnable=new Runnable(){
    public void run(){
      if (isReleased())       return;
      if (children.get() == null)       return;
      if (isRerunNeeded(pass)) {
        removeFromLoadedInBackground(elementFromDescriptor.get());
        getUpdater().addSubtreeToUpdate(pass);
        return;
      }
      updateNodeChildren(node,pass,children.get(),true);
      removeFromLoadedInBackground(elementFromDescriptor.get());
      if (isRerunNeeded(pass)) {
        getUpdater().addSubtreeToUpdate(pass);
        return;
      }
      Object element=elementFromDescriptor.get();
      if (element != null) {
        myUnbuiltNodes.remove(node);
        for (int i=0; i < node.getChildCount(); i++) {
          TreeNode child=node.getChildAt(i);
          if (isLoadingNode(child)) {
            removeIfLoading(child);
            i--;
          }
        }
        nodeToProcessActions[0]=node;
      }
    }
  }
;
  addTaskToWorker(buildRunnable,true,updateRunnable,new Runnable(){
    public void run(){
      if (nodeToProcessActions[0] != null) {
        processNodeActionsIfReady(nodeToProcessActions[0]);
      }
    }
  }
);
  return true;
}
