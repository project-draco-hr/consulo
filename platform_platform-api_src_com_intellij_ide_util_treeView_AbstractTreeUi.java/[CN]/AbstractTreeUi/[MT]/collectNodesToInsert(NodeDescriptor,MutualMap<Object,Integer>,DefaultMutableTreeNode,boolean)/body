{
  ArrayList<TreeNode> nodesToInsert=new ArrayList<TreeNode>();
  final Collection<Object> allElements=elementToIndexMap.getKeys();
  for (  Object child : allElements) {
    Integer index=elementToIndexMap.getValue(child);
    final NodeDescriptor childDescr=getTreeStructure().createDescriptor(child,descriptor);
    if (childDescr == null) {
      LOG.error("childDescr == null, treeStructure = " + getTreeStructure() + ", child = "+ child);
      continue;
    }
    childDescr.setIndex(index.intValue());
    update(childDescr,false);
    Object element=getElementFromDescriptor(childDescr);
    if (element == null) {
      LOG.error("childDescr.getElement() == null, child = " + child + ", builder = "+ this);
      continue;
    }
    DefaultMutableTreeNode node=getNodeForElement(element,false);
    if (node == null || node.getParent() != parent) {
      final DefaultMutableTreeNode childNode=createChildNode(childDescr);
      if (addLoadingNode || getBuilder().isAlwaysShowPlus(childDescr)) {
        insertLoadingNode(childNode,true);
      }
 else {
        addToUnbuilt(childNode);
      }
      nodesToInsert.add(childNode);
      createMapping(element,childNode);
    }
  }
  return nodesToInsert;
}
