{
  final ArrayList<TreeNode> childNodes=TreeUtil.childrenToArray(node);
  return maybeYeild(new ActiveRunnable(){
    public ActionCallback run(){
      if (pass.isExpired())       return new ActionCallback.Rejected();
      if (childNodes.size() == 0)       return new ActionCallback.Done();
      final ActionCallback result=new ActionCallback(childNodes.size());
      for (      TreeNode each : childNodes) {
        final DefaultMutableTreeNode eachChild=(DefaultMutableTreeNode)each;
        if (isLoadingNode(eachChild)) {
          result.setDone();
          continue;
        }
        final boolean childForceUpdate=isChildNodeForceUpdate(eachChild,forceUpdate,wasExpaned);
        maybeYeild(new ActiveRunnable(){
          @Override public ActionCallback run(){
            return processExistingNode(eachChild,getDescriptorFrom(eachChild),node,elementToIndexMap,pass,canSmartExpand,childForceUpdate);
          }
        }
,pass,node).notify(result);
        if (result.isRejected()) {
          break;
        }
      }
      return result;
    }
  }
,pass,node);
}
