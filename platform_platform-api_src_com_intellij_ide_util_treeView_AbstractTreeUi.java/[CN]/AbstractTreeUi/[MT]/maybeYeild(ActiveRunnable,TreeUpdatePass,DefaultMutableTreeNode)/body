{
  final ActionCallback result=new ActionCallback();
  if (isRerunNeeded(pass)) {
    getUpdater().requeue(pass);
    result.setRejected();
  }
 else {
    if (isToYieldUpdateFor(node)) {
      pass.setCurrentNode(node);
      boolean wasRun=yieldAndRun(new Runnable(){
        @Override public void run(){
          if (pass.isExpired()) {
            result.setRejected();
            return;
          }
          if (isRerunNeeded(pass)) {
            runDone(new Runnable(){
              @Override public void run(){
                if (!pass.isExpired()) {
                  getUpdater().requeue(pass);
                }
              }
            }
);
            result.setRejected();
          }
 else {
            try {
              execute(processRunnable).notify(result);
            }
 catch (            ProcessCanceledException e) {
              pass.expire();
              result.setRejected();
              cancelUpdate();
            }
          }
        }
      }
,pass);
      if (!wasRun) {
        result.setRejected();
      }
    }
 else {
      try {
        execute(processRunnable).notify(result);
      }
 catch (      ProcessCanceledException e) {
        pass.expire();
        result.setRejected();
        cancelUpdate();
      }
    }
  }
  return result;
}
