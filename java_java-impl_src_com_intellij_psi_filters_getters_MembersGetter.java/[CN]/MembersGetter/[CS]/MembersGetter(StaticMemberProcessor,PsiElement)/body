{
  myPlace=place;
  processor.processMembersOfRegisteredClasses(PrefixMatcher.ALWAYS_TRUE,new PairConsumer<PsiMember,PsiClass>(){
    @Override public void consume(    PsiMember member,    PsiClass psiClass){
      myImportedStatically.add(member);
    }
  }
);
  PsiClass current=PsiTreeUtil.getContextOfType(place,PsiClass.class);
  while (current != null) {
    current=CompletionUtil.getOriginalOrSelf(current);
    myPlaceClasses.add(current);
    current=PsiTreeUtil.getContextOfType(current,PsiClass.class);
  }
  PsiMethod eachMethod=PsiTreeUtil.getContextOfType(place,PsiMethod.class);
  while (eachMethod != null) {
    eachMethod=CompletionUtil.getOriginalOrSelf(eachMethod);
    myPlaceMethods.add(eachMethod);
    eachMethod=PsiTreeUtil.getContextOfType(eachMethod,PsiMethod.class);
  }
}
