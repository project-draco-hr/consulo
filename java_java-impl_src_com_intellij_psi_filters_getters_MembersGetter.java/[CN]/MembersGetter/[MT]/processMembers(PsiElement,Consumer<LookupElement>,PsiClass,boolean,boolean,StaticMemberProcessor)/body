{
  if (where == null)   return;
  final List<PsiClass> placeClasses=new ArrayList<PsiClass>();
  PsiClass current=PsiTreeUtil.getContextOfType(context,PsiClass.class);
  while (current != null) {
    current=CompletionUtil.getOriginalOrSelf(current);
    placeClasses.add(current);
    current=PsiTreeUtil.getContextOfType(current,PsiClass.class);
  }
  final Set<PsiMember> importedStatically=new HashSet<PsiMember>();
  processor.processMembersOfRegisteredClasses(null,new PairConsumer<PsiMember,PsiClass>(){
    @Override public void consume(    PsiMember member,    PsiClass psiClass){
      importedStatically.add(member);
    }
  }
);
  final Condition<PsiClass> mayProcessMembers=new Condition<PsiClass>(){
    @Override public boolean value(    PsiClass psiClass){
      if (psiClass == null) {
        return false;
      }
      psiClass=CompletionUtil.getOriginalOrSelf(psiClass);
      for (      PsiClass placeClass : placeClasses) {
        if (InheritanceUtil.isInheritorOrSelf(placeClass,psiClass,true)) {
          return false;
        }
      }
      return true;
    }
  }
;
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
  final PsiClassType baseType=JavaPsiFacade.getElementFactory(where.getProject()).createType(where);
  Consumer<PsiType> consumer=new Consumer<PsiType>(){
    @Override public void consume(    PsiType psiType){
      PsiClass psiClass=PsiUtil.resolveClassInType(psiType);
      if (mayProcessMembers.value(psiClass)) {
        psiClass=CompletionUtil.getOriginalOrSelf(psiClass);
        for (        PsiClass placeClass : placeClasses) {
          if (InheritanceUtil.isInheritorOrSelf(placeClass,psiClass,true)) {
            return;
          }
        }
        processClassDeclaredMembers(psiClass,context,acceptMethods,results,resolveHelper,importedStatically,psiType != baseType);
      }
    }
  }
;
  consumer.consume(baseType);
  if (searchInheritors && !CommonClassNames.JAVA_LANG_OBJECT.equals(where.getQualifiedName())) {
    CodeInsightUtil.processSubTypes(baseType,context,true,Condition.TRUE,consumer);
  }
}
