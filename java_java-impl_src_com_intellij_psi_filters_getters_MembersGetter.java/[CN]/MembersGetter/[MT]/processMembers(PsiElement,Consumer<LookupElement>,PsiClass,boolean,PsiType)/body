{
  if (where == null)   return;
  PsiClass current=PsiTreeUtil.getContextOfType(context,PsiClass.class);
  while (current != null) {
    current=JavaCompletionUtil.getOriginalElement(current);
    if (InheritanceUtil.isInheritorOrSelf(current,where,true)) {
      return;
    }
    current=PsiTreeUtil.getContextOfType(current,PsiClass.class);
  }
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(TrueFilter.INSTANCE);
  where.processDeclarations(processor,ResolveState.initial(),null,context);
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
  for (  final PsiElement result : processor.getResults()) {
    if (result instanceof PsiMember && !(result instanceof PsiClass)) {
      final PsiMember member=(PsiMember)result;
      if (member.hasModifierProperty(PsiModifier.STATIC) && resolveHelper.isAccessible(member,context,null)) {
        if (result instanceof PsiField && !member.hasModifierProperty(PsiModifier.FINAL))         continue;
        if (result instanceof PsiMethod && acceptMethods)         continue;
        final LookupItem item=result instanceof PsiMethod ? new JavaMethodCallElement((PsiMethod)result) : new VariableLookupItem((PsiVariable)result);
        item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
        JavaCompletionUtil.qualify(item);
        if (member instanceof PsiMethod) {
          final PsiMethod method=(PsiMethod)member;
          final PsiSubstitutor substitutor=SmartCompletionDecorator.calculateMethodReturnTypeSubstitutor(method,expectedType);
          ((JavaMethodCallElement)item).setInferenceSubstitutor(substitutor);
        }
        final PsiType itemType=((TypedLookupItem)item).getType();
        if (itemType != null && expectedType.isAssignableFrom(itemType)) {
          results.consume(item);
        }
      }
    }
  }
}
