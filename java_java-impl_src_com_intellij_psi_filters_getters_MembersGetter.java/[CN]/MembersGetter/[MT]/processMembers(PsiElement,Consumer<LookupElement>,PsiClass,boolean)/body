{
  if (where == null)   return;
  PsiClass current=PsiTreeUtil.getContextOfType(context,PsiClass.class);
  while (current != null) {
    current=JavaCompletionUtil.getOriginalElement(current);
    if (InheritanceUtil.isInheritorOrSelf(current,where,true)) {
      return;
    }
    current=PsiTreeUtil.getContextOfType(current,PsiClass.class);
  }
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(TrueFilter.INSTANCE);
  where.processDeclarations(processor,ResolveState.initial(),null,context);
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
  for (  final PsiElement result : processor.getResults()) {
    if (result instanceof PsiMember && !(result instanceof PsiClass)) {
      final PsiMember member=(PsiMember)result;
      if (member.hasModifierProperty(PsiModifier.STATIC) && resolveHelper.isAccessible(member,context,null)) {
        if (result instanceof PsiField && !member.hasModifierProperty(PsiModifier.FINAL))         continue;
        if (result instanceof PsiMethod && acceptMethods)         continue;
        final LookupElement item=result instanceof PsiMethod ? createMethodElement((PsiMethod)result) : createFieldElement((PsiField)result);
        if (item != null) {
          results.consume(AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(item));
        }
      }
    }
  }
}
