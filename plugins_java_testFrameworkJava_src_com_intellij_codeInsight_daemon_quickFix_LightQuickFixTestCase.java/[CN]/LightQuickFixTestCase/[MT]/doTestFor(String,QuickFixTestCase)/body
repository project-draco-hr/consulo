{
  final String relativePath=notNull(quickFixTestCase.getBasePath(),"") + "/" + BEFORE_PREFIX+ testName;
  final String testFullPath=quickFixTestCase.getTestDataPath().replace(File.separatorChar,'/') + relativePath;
  final File testFile=new File(testFullPath);
  CommandProcessor.getInstance().executeCommand(quickFixTestCase.getProject(),new Runnable(){
    @SuppressWarnings({"AssignmentToStaticFieldFromInstanceMethod","CallToPrintStackTrace"}) @Override public void run(){
      try {
        String contents=StringUtil.convertLineSeparators(FileUtil.loadFile(testFile,CharsetToolkit.UTF8));
        quickFixTestCase.configureFromFileText(testFile.getName(),contents);
        quickFixTestCase.bringRealEditorBack();
        final Pair<String,Boolean> pair=quickFixTestCase.parseActionHintImpl(quickFixTestCase.getFile(),contents);
        final String text=pair.getFirst();
        final boolean actionShouldBeAvailable=pair.getSecond().booleanValue();
        quickFixTestCase.beforeActionStarted(testName,contents);
        try {
          myWrapper=quickFixTestCase;
          quickFixTestCase.doAction(text,actionShouldBeAvailable,testFullPath,testName);
        }
  finally {
          myWrapper=null;
          quickFixTestCase.afterActionCompleted(testName,contents);
        }
      }
 catch (      FileComparisonFailure e) {
        throw e;
      }
catch (      Throwable e) {
        e.printStackTrace();
        fail(testName);
      }
    }
  }
,"","");
}
