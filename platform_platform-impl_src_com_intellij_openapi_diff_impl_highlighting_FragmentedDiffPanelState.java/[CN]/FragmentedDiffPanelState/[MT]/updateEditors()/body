{
  resetMarkup();
  mySeparatorsPositionConsumer.clear();
  if (myAppender1.getEditor() == null || myAppender2.getEditor() == null) {
    return null;
  }
  int previousBefore=-1;
  int previousAfter=-1;
  final List<BeforeAfter<TextRange>> ranges=new ArrayList<BeforeAfter<TextRange>>();
  for (int i=0; i < myRanges.size(); i++) {
    final BeforeAfter<Integer> start=lineStarts(i);
    final BeforeAfter<Integer> end=i == myRanges.size() - 1 ? new BeforeAfter<Integer>(myAppender1.getDocument().getTextLength(),myAppender2.getDocument().getTextLength()) : lineStarts(i + 1);
    ranges.add(new BeforeAfter<TextRange>(new TextRange(start.getBefore(),end.getBefore()),new TextRange(start.getAfter(),end.getAfter())));
    if (previousBefore > 0 && previousAfter > 0) {
      final int finalPreviousBefore=previousBefore;
      mySeparatorsPositionConsumer.prepare(previousBefore,previousAfter);
      myAppender1.setSeparatorMarker(previousBefore,new Consumer<Integer>(){
        @Override public void consume(        Integer integer){
          mySeparatorsPositionConsumer.addLeft(finalPreviousBefore,integer);
        }
      }
);
      final int finalPreviousAfter=previousAfter;
      myAppender2.setSeparatorMarker(previousAfter,new Consumer<Integer>(){
        @Override public void consume(        Integer integer){
          mySeparatorsPositionConsumer.addRight(finalPreviousAfter,integer);
        }
      }
);
    }
    previousBefore=myRanges.get(i).getBefore();
    previousAfter=myRanges.get(i).getAfter();
  }
  final PresetBlocksDiffPolicy diffPolicy=new PresetBlocksDiffPolicy(DiffPolicy.LINES_WO_FORMATTING);
  diffPolicy.setRanges(ranges);
  return addMarkup(new TextCompareProcessor(myComparisonPolicy,diffPolicy,myHighlightMode).process(myAppender1.getText(),myAppender2.getText()));
}
