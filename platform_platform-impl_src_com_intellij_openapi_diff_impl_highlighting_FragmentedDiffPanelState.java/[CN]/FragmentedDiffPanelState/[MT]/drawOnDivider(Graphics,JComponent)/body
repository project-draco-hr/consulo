{
  if (myAppender1.getEditor() == null || myAppender2.getEditor() == null)   return;
  final int startLeft=getStartVisibleLine(myAppender1.getEditor());
  final int startRight=getStartVisibleLine(myAppender2.getEditor());
  final int width=component.getWidth();
  final int lineHeight=myAppender1.getEditor().getLineHeight();
  final TreeMap<Integer,FragmentSeparatorsPositionConsumer.TornSeparator> left=mySeparatorsPositionConsumer.getLeft();
  final int leftScrollOffset=myAppender1.getEditor().getScrollingModel().getVerticalScrollOffset();
  final int rightScrollOffset=myAppender2.getEditor().getScrollingModel().getVerticalScrollOffset();
  final Graphics g=gr.create();
  try {
    ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    for (    Map.Entry<Integer,FragmentSeparatorsPositionConsumer.TornSeparator> entry : left.entrySet()) {
      final FragmentSeparatorsPositionConsumer.TornSeparator tornSeparator=entry.getValue();
      if (tornSeparator.getLeftLine() >= startLeft || tornSeparator.getRightLine() >= startRight) {
        final int leftOffset=tornSeparator.getLeftOffset();
        int leftBaseY=myAppender1.getEditor().logicalPositionToXY(new LogicalPosition(tornSeparator.getLeftLine(),0)).y - lineHeight / 2 - leftScrollOffset + myDiffDividerPolygonsOffset;
        final int rightOffset=tornSeparator.getRightOffset();
        int rightBaseY=myAppender2.getEditor().logicalPositionToXY(new LogicalPosition(tornSeparator.getRightLine(),0)).y - lineHeight / 2 - rightScrollOffset + myDiffDividerPolygonsOffset;
        int x1=0;
        int x2=width;
        int y1=leftBaseY + leftOffset;
        int y2=rightBaseY + rightOffset;
        if (Math.abs(x2 - x1) < Math.abs(y2 - y1)) {
          int dx=TornLineParams.ourDark;
          int dy=TornLineParams.ourLight;
          if (y2 < y1) {
            g.setColor(FragmentBoundRenderer.darkerBorder());
            g.drawLine(x1 + dx,y1 - dy + TornLineParams.ourDark,x2,y2 + TornLineParams.ourDark);
            g.drawLine(x1,y1 - TornLineParams.ourDark,x2 - dx,y2 + dy - TornLineParams.ourDark);
            g.drawLine(x1,y1 + TornLineParams.ourDark,x1 + dx,y1 - dy + TornLineParams.ourDark);
            g.drawLine(x2,y2 - TornLineParams.ourDark,x2 - dx,y2 + dy - TornLineParams.ourDark);
            g.setColor(FragmentBoundRenderer.darkerBorder().darker());
            g.drawLine(x1 + dx,y1 - dy + TornLineParams.ourLight,x2,y2 + TornLineParams.ourLight);
            g.drawLine(x1,y1 - TornLineParams.ourLight,x2 - dx,y2 + dy - TornLineParams.ourLight);
            g.drawLine(x1,y1 + TornLineParams.ourLight,x1 + dx,y1 - dy + TornLineParams.ourLight);
            g.drawLine(x2,y2 - TornLineParams.ourLight,x2 - dx,y2 + dy - TornLineParams.ourLight);
          }
 else {
            g.setColor(FragmentBoundRenderer.darkerBorder());
            g.drawLine(x1,y1 + TornLineParams.ourDark,x2 - dx,y2 - dy + TornLineParams.ourDark);
            g.drawLine(x1 + dx,y1 + dy - TornLineParams.ourDark,x2,y2 - TornLineParams.ourDark);
            g.drawLine(x2,y2 + TornLineParams.ourDark,x2 - dx,y2 - dy + TornLineParams.ourDark);
            g.drawLine(x1,y1 - TornLineParams.ourDark,x1 + dx,y1 + dy - TornLineParams.ourDark);
            g.setColor(FragmentBoundRenderer.darkerBorder().darker());
            g.drawLine(x1,y1 + TornLineParams.ourLight,x2 - dx,y2 - dy + TornLineParams.ourLight);
            g.drawLine(x1 + dx,y1 + dy - TornLineParams.ourLight,x2,y2 - TornLineParams.ourLight);
            g.drawLine(x2,y2 + TornLineParams.ourLight,x2 - dx,y2 - dy + TornLineParams.ourLight);
            g.drawLine(x1,y1 - TornLineParams.ourLight,x1 + dx,y1 + dy - TornLineParams.ourLight);
          }
        }
 else {
          g.setColor(FragmentBoundRenderer.darkerBorder());
          g.drawLine(x1,y1 + TornLineParams.ourDark,x2,y2 + TornLineParams.ourDark);
          g.drawLine(x1,y1 - TornLineParams.ourDark,x2,y2 - TornLineParams.ourDark);
          g.setColor(FragmentBoundRenderer.darkerBorder().darker());
          g.drawLine(x1,y1 + TornLineParams.ourLight,x2,y2 + TornLineParams.ourLight);
          g.drawLine(x1,y1 - TornLineParams.ourLight,x2,y2 - TornLineParams.ourLight);
        }
      }
    }
  }
  finally {
    g.dispose();
  }
}
