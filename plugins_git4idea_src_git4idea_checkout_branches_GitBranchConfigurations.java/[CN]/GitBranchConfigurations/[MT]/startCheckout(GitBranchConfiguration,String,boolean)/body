{
  if (remote != null && configuration != null) {
    throw new IllegalArgumentException("Either remote or configuration to checkout must be null");
  }
synchronized (myStateLock) {
    final SpecialStatus status=calculateSpecialStatus();
    if (status != SpecialStatus.NORMAL) {
      throw new IllegalStateException("Checkout cannot be started due to special status (it must have been checked in UI): " + status);
    }
    myCheckoutIsInProgress=true;
    updateSpecialStatus();
  }
  final String name=configuration != null ? configuration.getName() : remote == null ? "new configuration" : remote;
  final String title="Checking out " + name;
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,title,false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        final GitCheckoutProcess process=new GitCheckoutProcess(GitBranchConfigurations.this,myProject,myShelveManager,myDirtyScopeManager,myChangeManager,myProjectManager,indicator,configuration,remote,quick);
        process.run();
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            final List<VcsException> exceptions=process.getExceptions();
            String op=(process.isModify() ? "Modification" : "Checkout") + " of " + name;
            String message;
            MessageType type;
            if (!exceptions.isEmpty()) {
              GitUIUtil.showTabErrors(myProject,title,exceptions);
              message=op + " failed";
              type=MessageType.ERROR;
            }
 else             if (process.isCancelled()) {
              message=op + " was cancelled by user";
              type=MessageType.WARNING;
            }
 else {
              message=op + " complete";
              type=MessageType.INFO;
            }
            GitVcs.NOTIFICATION_GROUP_ID.createNotification(message,type).notify(myProject);
          }
        }
);
      }
 catch (      Throwable t) {
        LOG.error("Unexpected exception from checkout: ",t);
      }
 finally {
synchronized (myStateLock) {
          myCheckoutIsInProgress=false;
          updateSpecialStatus();
        }
      }
    }
  }
);
}
