{
  url=element.getAttributeValue(ATTRIBUTE_URL);
  myName=element.getChildText(ELEMENT_NAME);
  String idString=element.getChildText(ELEMENT_ID);
  if (idString == null || idString.length() == 0) {
    idString=myName;
  }
  myId=PluginId.getId(idString);
  String internalVersionString=element.getAttributeValue(ATTRIBUTE_VERSION);
  if (internalVersionString != null) {
    try {
      myFormatVersion=Integer.parseInt(internalVersionString);
    }
 catch (    NumberFormatException e) {
      LOG.error("Invalid value in plugin.xml format version: " + internalVersionString);
    }
  }
  myResourceBundleBaseName=element.getChildText(ELEMENT_RESOURCE_BUNDLE);
  myDescriptionChildText=element.getChildText(ELEMENT_DESCRIPTION);
  myChangeNotes=element.getChildText(ELEMENT_CHANGE_NOTES);
  myVersion=element.getChildText(ATTRIBUTE_VERSION);
  myVendor=element.getChildText(ELEMENT_VENDOR);
  myCategory=element.getChildText(ELEMENT_CATEGORY);
  List children=element.getChildren(ELEMENT_DEPENDS);
  Set<PluginId> dependentPlugins=new HashSet<PluginId>(children.size());
  for (  final Object aChildren : children) {
    final Element dependentPlugin=(Element)aChildren;
    String text=dependentPlugin.getText();
    if (text != null && text.length() > 0) {
      dependentPlugins.add(PluginId.getId(text));
    }
  }
  myDependencies=dependentPlugins.toArray(new PluginId[dependentPlugins.size()]);
  children=element.getChildren(ELEMENT_HELPSET);
  List<HSPath> hsPathes=new ArrayList<HSPath>(children.size());
  for (  final Object aChildren1 : children) {
    final Element helpset=(Element)aChildren1;
    HSPath hsPath=new HSPath(helpset.getAttributeValue(ATTRIBUTE_FILE),helpset.getAttributeValue(ATTRIBUTE_PATH));
    hsPathes.add(hsPath);
  }
  myHelpSets=hsPathes.toArray(new HSPath[hsPathes.size()]);
  Element vendor=element.getChild(ELEMENT_VENDOR);
  if (vendor != null) {
    myVendorEmail=element.getChild(ELEMENT_VENDOR).getAttributeValue(ATTRIBUTE_EMAIL);
    myVendorUrl=element.getChild(ELEMENT_VENDOR).getAttributeValue(ATTRIBUTE_URL);
    myVendorLogoPath=element.getChild(ELEMENT_VENDOR).getAttributeValue(ATTRIBUTE_LOGO);
  }
  myAppComponents=element.getChild(ELEMENT_APPLICATION_COMPONENTS);
  myProjectComponents=element.getChild(ELEMENT_PROJECT_COMPONENTS);
  myModuleComponents=element.getChild(ELEMENT_MODULE_COMPONENTS);
  final List<Element> extensionsRoots=JDOMUtil.getChildrenFromAllNamespaces(element,ELEMENT_EXTENSIONS);
  if (!extensionsRoots.isEmpty()) {
    myExtensions=new ArrayList<Element>();
    for (    Element extensionsRoot : extensionsRoots) {
      for (      final Object o : extensionsRoot.getChildren()) {
        myExtensions.add((Element)o);
      }
    }
  }
  final List<Element> extensionPointRoots=JDOMUtil.getChildrenFromAllNamespaces(element,ELEMENT_EXTENSION_POINTS);
  if (!extensionPointRoots.isEmpty()) {
    myExtensionsPoints=new ArrayList<Element>();
    for (    Element root : extensionPointRoots) {
      for (      Object o : root.getChildren()) {
        myExtensionsPoints.add((Element)o);
      }
    }
  }
  myActionsElement=element.getChild(ELEMENT_ACTIONS);
}
