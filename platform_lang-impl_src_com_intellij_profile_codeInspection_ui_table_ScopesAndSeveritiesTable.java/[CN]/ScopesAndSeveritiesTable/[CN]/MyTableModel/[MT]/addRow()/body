{
  final List<Descriptor> descriptors=ContainerUtil.map(myTableSettings.getNodes(),new Function<InspectionConfigTreeNode,Descriptor>(){
    @Override public Descriptor fun(    InspectionConfigTreeNode inspectionConfigTreeNode){
      return inspectionConfigTreeNode.getDefaultDescriptor();
    }
  }
);
  final ScopesChooser scopesChooser=new ScopesChooser(descriptors,myInspectionProfile,myProject,myScopeNames){
    @Override protected void onScopeAdded(){
      myTableSettings.onScopeAdded();
      refreshAggregatedScopes();
    }
    @Override protected void onScopesOrderChanged(){
      myTableSettings.onScopesOrderChanged();
    }
  }
;
  DataContext dataContext=DataManager.getInstance().getDataContext(myTable);
  final ListPopup popup=JBPopupFactory.getInstance().createActionGroupPopup(ScopesChooser.TITLE,scopesChooser.createPopupActionGroup(myTable),dataContext,JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,false);
  final RelativePoint point=new RelativePoint(myTable,new Point(myTable.getWidth() - popup.getContent().getPreferredSize().width,0));
  popup.show(point);
}
