{
  checkMethodsExist(theInterface,implementation);
  final Class<?> implementationClass=implementation.getClass();
  return (T)Proxy.newProxyInstance(theInterface.getClassLoader(),new Class[]{theInterface},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      final Method implementationClassMethod=implementationClass.getMethod(method.getName(),method.getParameterTypes());
      implementationClassMethod.setAccessible(true);
      return implementationClassMethod.invoke(implementation,args);
    }
  }
);
}
