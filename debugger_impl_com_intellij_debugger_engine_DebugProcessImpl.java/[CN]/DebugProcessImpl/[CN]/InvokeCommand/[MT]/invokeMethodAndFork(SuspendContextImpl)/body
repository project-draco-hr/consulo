{
  final int invokePolicy=getInvokePolicy(context);
  final Exception[] exception=new Exception[1];
  final Value[] result=new Value[1];
  DebugProcessImpl.this.getManagerThread().startLongProcessAndFork(new Runnable(){
    public void run(){
      ThreadReferenceProxyImpl thread=context.getThread();
      try {
        try {
          final VirtualMachineProxyImpl virtualMachineProxy=getVirtualMachineProxy();
          if (LOG.isDebugEnabled()) {
            virtualMachineProxy.logThreads();
            LOG.debug("Invoke in " + thread.name());
            LOG.assertTrue(thread.isSuspended(),thread.toString());
            LOG.assertTrue(context.isEvaluating());
          }
          result[0]=invokeMethod(invokePolicy,myArgs);
        }
  finally {
          LOG.assertTrue(thread.isSuspended(),thread.toString());
          LOG.assertTrue(context.isEvaluating());
        }
      }
 catch (      Exception e) {
        exception[0]=e;
      }
    }
  }
);
  if (exception[0] != null) {
    if (exception[0] instanceof InvocationException) {
      throw (InvocationException)exception[0];
    }
 else     if (exception[0] instanceof ClassNotLoadedException) {
      throw (ClassNotLoadedException)exception[0];
    }
 else     if (exception[0] instanceof IncompatibleThreadStateException) {
      throw (IncompatibleThreadStateException)exception[0];
    }
 else     if (exception[0] instanceof InvalidTypeException) {
      throw (InvalidTypeException)exception[0];
    }
 else     if (exception[0] instanceof RuntimeException) {
      throw (RuntimeException)exception[0];
    }
 else {
      LOG.assertTrue(false);
    }
  }
  return (E)result[0];
}
