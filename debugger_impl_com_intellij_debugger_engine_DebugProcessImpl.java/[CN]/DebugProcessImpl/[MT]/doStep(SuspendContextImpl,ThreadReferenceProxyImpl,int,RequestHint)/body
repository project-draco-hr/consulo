{
  if (stepThread == null) {
    return;
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("DO_STEP: creating step request for " + stepThread.getThreadReference());
    }
    deleteStepRequests();
    EventRequestManager requestManager=getVirtualMachineProxy().eventRequestManager();
    StepRequest stepRequest=requestManager.createStepRequest(stepThread.getThreadReference(),StepRequest.STEP_LINE,depth);
    DebuggerSettings settings=DebuggerSettings.getInstance();
    if (!(hint != null && hint.isIgnoreFilters())) {
      final String currentClassName=getCurrentClassName(stepThread);
      final List<ClassFilter> activeFilters=new ArrayList<ClassFilter>();
      if (settings.TRACING_FILTERS_ENABLED) {
        for (        ClassFilter filter : settings.getSteppingFilters()) {
          if (filter.isEnabled()) {
            activeFilters.add(filter);
          }
        }
      }
      for (      DebuggerClassFilterProvider provider : Extensions.getExtensions(DebuggerClassFilterProvider.EP_NAME)) {
        for (        ClassFilter filter : provider.getFilters()) {
          if (filter.isEnabled()) {
            activeFilters.add(filter);
          }
        }
      }
      if (currentClassName == null || !DebuggerUtilsEx.isFiltered(currentClassName,activeFilters)) {
        for (        ClassFilter filter : activeFilters) {
          stepRequest.addClassExclusionFilter(filter.getPattern());
        }
      }
    }
    stepRequest.setSuspendPolicy(suspendContext.getSuspendPolicy() == EventRequest.SUSPEND_EVENT_THREAD ? EventRequest.SUSPEND_EVENT_THREAD : EventRequest.SUSPEND_ALL);
    if (hint != null) {
      stepRequest.putProperty("hint",hint);
    }
    stepRequest.enable();
  }
 catch (  ObjectCollectedException ignored) {
  }
}
