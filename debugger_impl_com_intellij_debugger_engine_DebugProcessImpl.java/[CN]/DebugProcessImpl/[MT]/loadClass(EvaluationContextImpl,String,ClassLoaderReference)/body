{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  qName=reformatArrayName(qName);
  ReferenceType refType=null;
  VirtualMachineProxyImpl virtualMachine=getVirtualMachineProxy();
  final List classClasses=virtualMachine.classesByName("java.lang.Class");
  if (classClasses.size() > 0) {
    ClassType classClassType=(ClassType)classClasses.get(0);
    final Method forNameMethod;
    if (classLoader != null) {
      forNameMethod=classClassType.concreteMethodByName("forName","(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
    }
 else {
      forNameMethod=classClassType.concreteMethodByName("forName","(Ljava/lang/String;)Ljava/lang/Class;");
    }
    final List args=new ArrayList();
    final StringReference qNameMirror=virtualMachine.mirrorOf(qName);
    args.add(qNameMirror);
    if (classLoader != null) {
      args.add(virtualMachine.mirrorOf(true));
      args.add(classLoader);
    }
    final Value value=invokeMethod(evaluationContext,classClassType,forNameMethod,args);
    if (value instanceof ClassObjectReference) {
      refType=((ClassObjectReference)value).reflectedType();
    }
  }
  return refType;
}
