{
  final IProjectStore stateStore=getStateStore();
  final TrackingPathMacroSubstitutor[] substitutors=stateStore.getSubstitutors();
  final Set<String> unknownMacros=new HashSet<String>();
  for (  final TrackingPathMacroSubstitutor substitutor : substitutors) {
    unknownMacros.addAll(substitutor.getUnknownMacros(null));
  }
  if (!unknownMacros.isEmpty()) {
    if (!showDialog || ProjectMacrosUtil.checkMacros(this,new HashSet<String>(unknownMacros))) {
      final PathMacros pathMacros=PathMacros.getInstance();
      final Set<String> macros2invalidate=new HashSet<String>(unknownMacros);
      for (Iterator it=macros2invalidate.iterator(); it.hasNext(); ) {
        final String macro=(String)it.next();
        final String value=pathMacros.getValue(macro);
        if ((value == null || value.trim().isEmpty()) && !pathMacros.isIgnoredMacroName(macro)) {
          it.remove();
        }
      }
      if (!macros2invalidate.isEmpty()) {
        final Set<String> components=new HashSet<String>();
        for (        TrackingPathMacroSubstitutor substitutor : substitutors) {
          components.addAll(substitutor.getComponents(macros2invalidate));
        }
        if (stateStore.isReloadPossible(components)) {
          for (          final TrackingPathMacroSubstitutor substitutor : substitutors) {
            substitutor.invalidateUnknownMacros(macros2invalidate);
          }
          final UnknownMacroNotification[] notifications=NotificationsManager.getNotificationsManager().getNotificationsOfType(UnknownMacroNotification.class,this);
          for (          final UnknownMacroNotification notification : notifications) {
            if (macros2invalidate.containsAll(notification.getMacros()))             notification.expire();
          }
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              stateStore.reinitComponents(components,true);
            }
          }
);
        }
 else {
          if (Messages.showYesNoDialog(this,"Component could not be reloaded. Reload project?","Configuration Changed",Messages.getQuestionIcon()) == 0) {
            ProjectManagerEx.getInstanceEx().reloadProject(this);
          }
        }
      }
    }
  }
}
