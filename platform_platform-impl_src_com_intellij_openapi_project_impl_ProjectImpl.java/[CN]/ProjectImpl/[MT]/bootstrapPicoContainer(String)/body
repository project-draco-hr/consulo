{
  Extensions.instantiateArea(ExtensionAreas.IDEA_PROJECT,this,null);
  super.bootstrapPicoContainer(name);
  final MutablePicoContainer picoContainer=getPicoContainer();
  final ProjectStoreClassProvider projectStoreClassProvider=(ProjectStoreClassProvider)picoContainer.getComponentInstanceOfType(ProjectStoreClassProvider.class);
  picoContainer.registerComponentImplementation(ProjectPathMacroManager.class);
  picoContainer.registerComponent(new ComponentAdapter(){
    ComponentAdapter myDelegate;
    public ComponentAdapter getDelegate(){
      if (myDelegate == null) {
        final Class storeClass=projectStoreClassProvider.getProjectStoreClass(isDefault());
        myDelegate=new CachingComponentAdapter(new ConstructorInjectionComponentAdapter(storeClass,storeClass,null,true));
      }
      return myDelegate;
    }
    @Override public Object getComponentKey(){
      return IComponentStore.class;
    }
    @Override public Class getComponentImplementation(){
      return getDelegate().getComponentImplementation();
    }
    @Override public Object getComponentInstance(    final PicoContainer container) throws PicoInitializationException, PicoIntrospectionException {
      return getDelegate().getComponentInstance(container);
    }
    @Override public void verify(    final PicoContainer container) throws PicoIntrospectionException {
      getDelegate().verify(container);
    }
    @Override public void accept(    final PicoVisitor visitor){
      visitor.visitComponentAdapter(this);
      getDelegate().accept(visitor);
    }
  }
);
}
