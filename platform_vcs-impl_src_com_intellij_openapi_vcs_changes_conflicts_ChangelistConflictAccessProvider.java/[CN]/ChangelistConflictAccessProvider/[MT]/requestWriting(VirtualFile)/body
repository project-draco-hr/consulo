{
  ChangelistConflictTracker.Options options=myManager.getConflictTracker().getOptions();
  if (!options.TRACKING_ENABLED || !options.SHOW_DIALOG) {
    return Collections.emptyList();
  }
  ArrayList<VirtualFile> denied=new ArrayList<VirtualFile>();
  for (  VirtualFile file : files) {
    if (file != null && !myManager.getConflictTracker().isWritingAllowed(file)) {
      denied.add(file);
    }
  }
  if (!denied.isEmpty()) {
    HashSet<ChangeList> changeLists=new HashSet<ChangeList>();
    ArrayList<Change> changes=new ArrayList<Change>();
    for (    VirtualFile file : denied) {
      changeLists.add(myManager.getChangeList(file));
      changes.add(myManager.getChange(file));
    }
    ChangelistConflictDialog dialog=new ChangelistConflictDialog(myProject,new ArrayList<ChangeList>(changeLists),changes);
    dialog.show();
    if (dialog.isOK()) {
      ChangelistConflictResolution resolution=dialog.getResolution();
      options.LAST_RESOLUTION=resolution;
      resolution.resolveConflict(myProject,resolution == ChangelistConflictResolution.SWITCH ? changes : dialog.getSelectedChanges());
    }
  }
  return denied;
}
