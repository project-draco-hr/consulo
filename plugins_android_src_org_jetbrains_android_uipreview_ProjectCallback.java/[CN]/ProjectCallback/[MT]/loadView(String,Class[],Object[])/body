{
  Class<?> aClass=myLoadedClasses.get(className);
  if (aClass != null) {
    return createNewInstance(aClass,constructorSignature,constructorArgs);
  }
  try {
    aClass=loadClass(className);
    if (aClass != null) {
      final Object viewObject=createNewInstance(aClass,constructorSignature,constructorArgs);
      myLoadedClasses.put(className,aClass);
      return viewObject;
    }
  }
 catch (  ClassNotFoundException e) {
    LOG.info(e);
    myBrokenClasses.put(className,e.getCause());
  }
catch (  InvocationTargetException e) {
    LOG.info(e);
    final Throwable cause=e.getCause();
    if (cause instanceof IncompatibleClassFileFormatException) {
      myClassesWithIncorrectFormat.add(((IncompatibleClassFileFormatException)cause).getClassName());
    }
 else {
      myBrokenClasses.put(className,cause);
    }
  }
catch (  IllegalAccessException e) {
    LOG.info(e);
    myBrokenClasses.put(className,e.getCause());
  }
catch (  InstantiationException e) {
    LOG.info(e);
    myBrokenClasses.put(className,e.getCause());
  }
catch (  NoSuchMethodException e) {
    LOG.info(e);
    myBrokenClasses.put(className,e.getCause());
  }
catch (  IncompatibleClassFileFormatException e) {
    myClassesWithIncorrectFormat.add(e.getClassName());
  }
  try {
    return createMockView(className,constructorSignature,constructorArgs);
  }
 catch (  ClassNotFoundException e) {
    throw new ClassNotFoundException(className,e);
  }
catch (  InvocationTargetException e) {
    throw new ClassNotFoundException(className,e);
  }
catch (  NoSuchMethodException e) {
    throw new ClassNotFoundException(className,e);
  }
catch (  IllegalAccessException e) {
    throw new ClassNotFoundException(className,e);
  }
catch (  InstantiationException e) {
    throw new ClassNotFoundException(className,e);
  }
catch (  NoSuchFieldException e) {
    throw new ClassNotFoundException(className,e);
  }
}
