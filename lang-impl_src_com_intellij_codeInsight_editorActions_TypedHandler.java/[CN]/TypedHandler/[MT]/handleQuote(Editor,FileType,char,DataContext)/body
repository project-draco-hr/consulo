{
  if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_QUOTE)   return false;
  final QuoteHandler quoteHandler=getQuoteHandlerForType(fileType);
  if (quoteHandler == null)   return false;
  int offset=editor.getCaretModel().getOffset();
  CharSequence chars=editor.getDocument().getCharsSequence();
  int length=editor.getDocument().getTextLength();
  if (isTypingEscapeQuote(editor,quoteHandler,offset))   return false;
  if (offset < length && chars.charAt(offset) == quote) {
    if (isClosingQuote(editor,quoteHandler,offset)) {
      editor.getCaretModel().moveToOffset(offset + 1);
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      return true;
    }
  }
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  if (!iterator.atEnd()) {
    IElementType tokenType=iterator.getTokenType();
    if (quoteHandler instanceof JavaLikeQuoteHandler) {
      try {
        if (!((JavaLikeQuoteHandler)quoteHandler).isAppropriateElementTypeForLiteral(tokenType))         return false;
      }
 catch (      AbstractMethodError incompatiblePluginErrorThatDoesNotInterestUs) {
      }
    }
  }
  myOriginalHandler.execute(editor,quote,dataContext);
  offset=editor.getCaretModel().getOffset();
  if (isOpeningQuote(editor,quoteHandler,offset - 1) && hasNonClosedLiterals(editor,quoteHandler,offset - 1)) {
    editor.getDocument().insertString(offset,String.valueOf(quote));
  }
  return true;
}
