{
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null || editor.isColumnMode()) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (file == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  if (editor.isViewer())   return;
  if (!editor.getDocument().isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(editor.getDocument(),project)) {
      return;
    }
  }
  Editor injectedEditor=injectedEditorIfCharTypedIsSignificant(charTyped,editor,file);
  if (injectedEditor != editor) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(injectedEditor.getDocument());
    editor=injectedEditor;
  }
  final TypedHandlerDelegate[] delegates=Extensions.getExtensions(TypedHandlerDelegate.EP_NAME);
  AutoPopupController autoPopupController=AutoPopupController.getInstance(project);
  boolean handled=false;
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.checkAutoPopup(charTyped,project,editor,file);
    handled=result == TypedHandlerDelegate.Result.STOP;
    if (result != TypedHandlerDelegate.Result.CONTINUE)     break;
  }
  if (!handled) {
    if (charTyped == '.') {
      autoPopupController.autoPopupMemberLookup(editor,null);
    }
    if (charTyped == '(') {
      autoPopupController.autoPopupParameterInfo(editor,null);
    }
  }
  if (!editor.isInsertMode()) {
    myOriginalHandler.execute(editor,charTyped,dataContext);
    return;
  }
  if (editor.getSelectionModel().hasSelection()) {
    EditorModificationUtil.deleteSelectedText(editor);
  }
  final VirtualFile virtualFile=file.getVirtualFile();
  FileType fileType;
  if (virtualFile != null) {
    fileType=virtualFile.getFileType();
  }
 else {
    fileType=file.getFileType();
  }
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.beforeCharTyped(charTyped,project,editor,file,fileType);
    if (result == TypedHandlerDelegate.Result.STOP)     return;
    if (result == TypedHandlerDelegate.Result.DEFAULT)     break;
  }
  if (')' == charTyped) {
    if (handleRParen(editor,fileType,')','('))     return;
  }
 else   if (']' == charTyped) {
    if (handleRParen(editor,fileType,']','['))     return;
  }
 else   if ('"' == charTyped || '\'' == charTyped) {
    if (handleQuote(editor,fileType,charTyped,dataContext))     return;
  }
  myOriginalHandler.execute(editor,charTyped,dataContext);
  if ('(' == charTyped && CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET) {
    handleAfterLParen(editor,fileType,'(');
  }
 else   if ('[' == charTyped && CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET) {
    handleAfterLParen(editor,fileType,'[');
  }
 else   if ('}' == charTyped) {
    indentClosingBrace(project,editor);
  }
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.charTyped(charTyped,project,editor,file);
    if (result == TypedHandlerDelegate.Result.STOP)     return;
    if (result == TypedHandlerDelegate.Result.DEFAULT)     break;
  }
  if ('{' == charTyped) {
    indentOpenedBrace(project,editor);
  }
}
