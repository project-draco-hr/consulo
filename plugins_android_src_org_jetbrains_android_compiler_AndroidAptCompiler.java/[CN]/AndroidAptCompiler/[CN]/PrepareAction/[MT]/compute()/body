{
  if (myContext.getProject().isDisposed()) {
    return EMPTY_GENERATION_ITEM_ARRAY;
  }
  CompileScope compileScope=myContext.getCompileScope();
  Module[] modules=compileScope.getAffectedModules();
  List<GenerationItem> items=new ArrayList<GenerationItem>();
  for (  Module module : modules) {
    AndroidFacet facet=AndroidFacet.getInstance(module);
    if (facet != null) {
      AndroidFacetConfiguration configuration=facet.getConfiguration();
      if (!isToCompileModule(module,configuration)) {
        continue;
      }
      Manifest manifest=facet.getManifest();
      String[] resPaths=AndroidCompileUtil.collectResourceDirs(facet);
      VirtualFile assetsDir=!configuration.LIBRARY_PROJECT ? AndroidRootUtil.getAssetsDir(module) : null;
      if (manifest != null && resPaths.length > 0) {
        String packageName=manifest.getPackage().getValue();
        if (packageName != null) {
          packageName=packageName.trim();
          if (packageName.length() > 0) {
            String sourceRootPath=facet.getAptGenSourceRootPath();
            if (sourceRootPath != null) {
              IAndroidTarget target=configuration.getAndroidTarget();
              if (target != null) {
                AndroidCompileUtil.createSourceRootIfNotExist(sourceRootPath,module);
                String assetsDirPath=assetsDir != null ? assetsDir.getPath() : null;
                VirtualFile manifestFile=AndroidRootUtil.getManifestFileForCompiler(facet);
                if (manifestFile != null) {
                  String manifestPath=manifestFile.getPath();
                  items.add(new AptGenerationItem(module,manifestPath,resPaths,assetsDirPath,sourceRootPath,target,packageName,false));
                  for (                  String libPackage : AndroidUtils.getDepLibsPackages(module)) {
                    items.add(new AptGenerationItem(module,manifestPath,resPaths,assetsDirPath,sourceRootPath,target,libPackage,true));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return items.toArray(new GenerationItem[items.size()]);
}
