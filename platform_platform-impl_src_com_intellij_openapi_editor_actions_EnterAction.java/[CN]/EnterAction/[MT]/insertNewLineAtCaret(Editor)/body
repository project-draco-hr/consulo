{
  if (!editor.isInsertMode()) {
    if (editor.getCaretModel().getLogicalPosition().line < editor.getDocument().getLineCount() - 1) {
      LogicalPosition pos=new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + 1,0);
      editor.getCaretModel().moveToLogicalPosition(pos);
      editor.getSelectionModel().removeSelection();
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
    return;
  }
  EditorModificationUtil.deleteSelectedText(editor);
  Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  int indentLineNum=editor.getCaretModel().getLogicalPosition().line;
  int lineLength=0;
  if (document.getLineCount() > 0) {
    for (; indentLineNum >= 0; indentLineNum--) {
      lineLength=document.getLineEndOffset(indentLineNum) - document.getLineStartOffset(indentLineNum);
      if (lineLength > 0)       break;
    }
  }
 else {
    indentLineNum=-1;
  }
  int colNumber=editor.getCaretModel().getLogicalPosition().column;
  StringBuilder buf=new StringBuilder();
  if (indentLineNum >= 0) {
    int lineStartOffset=document.getLineStartOffset(indentLineNum);
    for (int i=0; i < lineLength; i++) {
      char c=text.charAt(lineStartOffset + i);
      if (c != ' ' && c != '\t') {
        break;
      }
      if (i >= colNumber) {
        break;
      }
      buf.append(c);
    }
  }
  int caretOffset=editor.getCaretModel().getOffset();
  String s="\n" + buf;
  document.insertString(caretOffset,s);
  editor.getCaretModel().moveToOffset(caretOffset + s.length());
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  editor.getSelectionModel().removeSelection();
}
