{
  if (myDisposed || ApplicationManager.getApplication().isUnitTestMode()) {
    return;
  }
  Document document=getDocument();
  if (document == null) {
    return;
  }
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  TextAttributes attributes=scheme.getAttributes(DebuggerColors.BREAKPOINT_ATTRIBUTES);
  RangeHighlighter highlighter=myHighlighter;
  if (highlighter != null && (!highlighter.isValid() || highlighter.getStartOffset() >= document.getTextLength() || document.getLineNumber(highlighter.getStartOffset()) != getLine())) {
    highlighter.dispose();
    myHighlighter=null;
    highlighter=null;
  }
  MarkupModelEx markupModel;
  if (highlighter == null) {
    markupModel=(MarkupModelEx)DocumentMarkupModel.forDocument(document,getProject(),true);
    TextRange range=myType.getHighlightRange(this);
    if (range != null && !range.isEmpty()) {
      range=range.intersection(DocumentUtil.getLineTextRange(document,getLine()));
      if (range != null && !range.isEmpty()) {
        highlighter=markupModel.addRangeHighlighter(range.getStartOffset(),range.getEndOffset(),DebuggerColors.BREAKPOINT_HIGHLIGHTER_LAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
      }
    }
    if (highlighter == null) {
      highlighter=markupModel.addPersistentLineHighlighter(getLine(),DebuggerColors.BREAKPOINT_HIGHLIGHTER_LAYER,attributes);
    }
    if (highlighter == null) {
      return;
    }
    highlighter.setGutterIconRenderer(createGutterIconRenderer());
    highlighter.putUserData(DebuggerColors.BREAKPOINT_HIGHLIGHTER_KEY,Boolean.TRUE);
    highlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
    myHighlighter=highlighter;
  }
 else {
    markupModel=null;
  }
  updateIcon();
  if (markupModel == null) {
    markupModel=(MarkupModelEx)DocumentMarkupModel.forDocument(document,getProject(),false);
    if (markupModel != null) {
      markupModel.fireAttributesChanged((RangeHighlighterEx)highlighter,false);
    }
  }
}
