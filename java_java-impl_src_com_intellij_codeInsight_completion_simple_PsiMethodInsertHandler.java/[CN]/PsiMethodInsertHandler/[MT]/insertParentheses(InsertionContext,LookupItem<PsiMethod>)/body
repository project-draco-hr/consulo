{
  final Editor editor=context.getEditor();
  final TailType tailType=getTailType(item,context);
  final PsiFile file=context.getFile();
  context.setAddCompletionChar(false);
  final LookupElement[] allItems=context.getElements();
  final boolean overloadsMatter=allItems.length == 1 && item.getUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) == null;
  final boolean hasParams=MethodParenthesesHandler.hasParams(item,allItems,overloadsMatter,item.getObject());
  final boolean needLeftParenth=isToInsertParenth(file.findElementAt(context.getStartOffset()));
  final boolean needRightParenth=shouldInsertRParenth(context.getCompletionChar(),tailType,hasParams);
  if (needLeftParenth) {
    final CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(context.getProject());
    ParenthesesInsertHandler.getInstance(hasParams,styleSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES,styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES && hasParams,needRightParenth,styleSettings.METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE).handleInsert(context,item);
  }
  if (needLeftParenth && hasParams) {
    AutoPopupController.getInstance(file.getProject()).autoPopupParameterInfo(editor,overloadsMatter ? null : item.getObject());
  }
  if (tailType == TailType.SMART_COMPLETION || needLeftParenth && needRightParenth) {
    tailType.processTail(editor,context.getTailOffset());
  }
}
