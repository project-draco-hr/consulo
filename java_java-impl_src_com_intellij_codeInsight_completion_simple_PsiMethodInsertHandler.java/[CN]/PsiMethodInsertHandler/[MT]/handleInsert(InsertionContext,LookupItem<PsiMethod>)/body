{
  final Editor editor=context.getEditor();
  final Document document=editor.getDocument();
  final PsiFile file=context.getFile();
  final int offset=editor.getCaretModel().getOffset();
  final PsiMethod method=item.getObject();
  final LookupElement[] allItems=context.getElements();
  final boolean overloadsMatter=allItems.length == 1 && item.getUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) == null;
  final boolean hasParams=MethodParenthesesHandler.hasParams(item,allItems,overloadsMatter,method);
  insertParentheses(context,item,overloadsMatter,hasParams);
  insertExplicitTypeParams(item,document,offset,file);
  final PsiType type=method.getReturnType();
  if (context.getCompletionChar() == '!' && type != null && PsiType.BOOLEAN.isAssignableFrom(type)) {
    PsiDocumentManager.getInstance(method.getProject()).commitDocument(document);
    final PsiMethodCallExpression methodCall=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethodCallExpression.class,false);
    if (methodCall != null) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
      document.insertString(methodCall.getTextRange().getStartOffset(),"!");
    }
  }
}
