{
  final Editor editor=context.getEditor();
  final char completionChar=context.getCompletionChar();
  final TailType tailType=getTailType(item,context);
  final Document document=editor.getDocument();
  final PsiFile file=context.getFile();
  final int offset=editor.getCaretModel().getOffset();
  context.setAddCompletionChar(false);
  final LookupElement[] allItems=context.getElements();
  final boolean overloadsMatter=allItems.length == 1 && item.getUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) == null;
  final boolean hasParams=MethodParenthesesHandler.hasParams(item,allItems,overloadsMatter,myMethod);
  final boolean needLeftParenth=isToInsertParenth(file.findElementAt(context.getStartOffset()));
  final boolean needRightParenth=shouldInsertRParenth(completionChar,tailType,hasParams);
  if (needLeftParenth) {
    final CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(context.getProject());
    new MethodParenthesesHandler(myMethod,overloadsMatter,styleSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES,styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES && hasParams,needRightParenth).handleInsert(context,item);
  }
  insertExplicitTypeParams(item,document,offset,file);
  final PsiType type=myMethod.getReturnType();
  if (completionChar == '!' && type != null && PsiType.BOOLEAN.isAssignableFrom(type)) {
    PsiDocumentManager.getInstance(myMethod.getProject()).commitDocument(document);
    final PsiMethodCallExpression methodCall=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethodCallExpression.class,false);
    if (methodCall != null) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
      document.insertString(methodCall.getTextRange().getStartOffset(),"!");
    }
  }
  if (needLeftParenth && hasParams) {
    AutoPopupController.getInstance(myMethod.getProject()).autoPopupParameterInfo(editor,overloadsMatter ? null : myMethod);
  }
  if (tailType == TailType.SMART_COMPLETION || needLeftParenth && needRightParenth) {
    tailType.processTail(editor,context.getTailOffset());
  }
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
