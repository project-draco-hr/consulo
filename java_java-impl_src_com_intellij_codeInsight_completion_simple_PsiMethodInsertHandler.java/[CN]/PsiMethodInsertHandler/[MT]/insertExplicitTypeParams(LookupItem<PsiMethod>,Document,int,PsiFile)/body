{
  final PsiMethod method=item.getObject();
  if (!SmartCompletionDecorator.hasUnboundTypeParams(method)) {
    return;
  }
  PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();
  PsiExpression expression=PsiTreeUtil.findElementOfClassAtOffset(file,offset - 1,PsiExpression.class,false);
  if (expression == null)   return;
  final Project project=file.getProject();
  final ExpectedTypeInfo[] expectedTypes=ExpectedTypesProvider.getExpectedTypes(expression,true,false);
  if (expectedTypes == null)   return;
  for (  final ExpectedTypeInfo type : expectedTypes) {
    if (type.isInsertExplicitTypeParams()) {
      final OffsetMap map=new OffsetMap(document);
      final OffsetKey refOffsetKey=OffsetKey.create("refOffset");
      map.addOffset(refOffsetKey,offset - 1);
      final String typeParams=getTypeParamsText(method,type.getType());
      if (typeParams == null) {
        return;
      }
      final String qualifierText=getQualifierText(file,method,offset - 1);
      document.insertString(offset - method.getName().length(),qualifierText + typeParams);
      PsiDocumentManager.getInstance(project).commitDocument(document);
      final PsiReference reference=file.findReferenceAt(map.getOffset(refOffsetKey));
      if (reference instanceof PsiJavaCodeReferenceElement) {
        try {
          CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(JavaCodeStyleManager.getInstance(project).shortenClassReferences((PsiElement)reference));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
      return;
    }
  }
}
