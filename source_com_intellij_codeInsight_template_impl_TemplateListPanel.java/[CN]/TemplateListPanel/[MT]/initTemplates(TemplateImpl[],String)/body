{
  myTreeRoot.removeAllChildren();
  SortedMap<String,List<TemplateImpl>> groups=new TreeMap<String,List<TemplateImpl>>();
  for (  TemplateImpl template1 : templates) {
    TemplateImpl template=template1.copy();
    myTemplates.put(new TemplateKey(template),template);
    String group=template.getGroupName();
    List<TemplateImpl> ts=groups.get(group);
    if (ts == null) {
      ts=new ArrayList<TemplateImpl>();
      groups.put(group,ts);
    }
    ts.add(template);
  }
  DefaultMutableTreeNode nodeToSelect=null;
  for (  Map.Entry<String,List<TemplateImpl>> entry : groups.entrySet()) {
    String group=(String)entry.getKey();
    List groupTemplates=(List)entry.getValue();
    DefaultMutableTreeNode groupNode=new DefaultMutableTreeNode(group);
    for (    final Object groupTemplate : groupTemplates) {
      TemplateImpl template=(TemplateImpl)groupTemplate;
      DefaultMutableTreeNode node=new DefaultMutableTreeNode(template);
      groupNode.add(node);
      if (lastSelectedKey != null && lastSelectedKey.equals(template.getKey())) {
        nodeToSelect=node;
      }
    }
    myTreeRoot.add(groupNode);
  }
  myTreeTableModel.nodeStructureChanged(myTreeRoot);
  if (nodeToSelect != null) {
    JTree tree=myTreeTable.getTree();
    TreePath path=new TreePath(nodeToSelect.getPath());
    tree.expandPath(path.getParentPath());
    int rowToSelect=tree.getRowForPath(path);
    myTreeTable.getSelectionModel().setSelectionInterval(rowToSelect,rowToSelect);
    final Rectangle rect=myTreeTable.getCellRect(rowToSelect,0,true);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        myTreeTable.scrollRectToVisible(rect);
      }
    }
);
  }
}
