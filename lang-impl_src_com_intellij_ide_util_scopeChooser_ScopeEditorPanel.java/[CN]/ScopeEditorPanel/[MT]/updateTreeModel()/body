{
  PanelProgressIndicator progress=new PanelProgressIndicator(new Consumer<JComponent>(){
    public void consume(    final JComponent component){
      setToComponent(component);
    }
  }
){
    public void start(){
      super.start();
      myTextChanged=false;
    }
    public boolean isCanceled(){
      return super.isCanceled() || myTextChanged || !myPanel.isShowing();
    }
    public void stop(){
      super.stop();
      setToComponent(myMatchingCountLabel);
    }
    public String getText(){
      return null;
    }
    public String getText2(){
      return null;
    }
  }
;
  progress.setBordersVisible(false);
  myCurrentProgress=progress;
  Runnable updateModel=new Runnable(){
    public void run(){
      final ProcessCanceledException[] ex=new ProcessCanceledException[1];
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          try {
            myTreeExpansionMonitor.freeze();
            final TreeModel model=PatternDialectProvider.getInstance(DependencyUISettings.getInstance().SCOPE_TYPE).createTreeModel(myProject,myTreeMarker);
            if (myErrorMessage == null) {
              myMatchingCountLabel.setText(IdeBundle.message("label.scope.contains.files",model.getMarkedFileCount(),model.getTotalFileCount()));
              myMatchingCountLabel.setForeground(new JLabel().getForeground());
            }
 else {
              showErrorMessage();
            }
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                myPackageTree.setModel(model);
                myTreeExpansionMonitor.restore();
              }
            }
);
          }
 catch (          ProcessCanceledException e) {
            ex[0]=e;
          }
 finally {
            myCurrentProgress=null;
            setToComponent(myMatchingCountLabel);
          }
        }
      }
);
      if (ex[0] != null) {
        throw ex[0];
      }
    }
  }
;
  ProgressManager.getInstance().runProcess(updateModel,progress);
}
