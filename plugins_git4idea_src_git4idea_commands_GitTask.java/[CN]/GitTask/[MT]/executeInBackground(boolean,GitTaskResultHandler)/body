{
  final Object LOCK=new Object();
  BackgroundableTask task=new BackgroundableTask(myProject,myHandler,myTitle){
    public void execute(    ProgressIndicator indicator){
      addListeners(this,indicator);
      GitHandlerUtil.runInCurrentThread(myHandler,indicator,false,myTitle);
    }
    @Override public void onSuccess(){
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          if (!myHandler.errors().isEmpty()) {
            myResult.set(GitTaskResult.GIT_ERROR);
          }
 else {
            myResult.set(GitTaskResult.OK);
          }
          resultHandler.run(myResult.get());
synchronized (LOCK) {
            LOCK.notifyAll();
          }
        }
      }
);
    }
    @Override public void onCancel(){
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          myResult.set(GitTaskResult.CANCELLED);
          resultHandler.run(GitTaskResult.CANCELLED);
synchronized (LOCK) {
            LOCK.notifyAll();
          }
        }
      }
);
    }
  }
;
  GitVcs.runInBackground(task);
  if (sync) {
    try {
synchronized (LOCK) {
        LOCK.wait();
      }
    }
 catch (    InterruptedException e) {
      LOG.error(e);
    }
  }
}
