{
  if (indicator != null) {
    indicator.setIndeterminate(myProgressAnalyzer == null);
  }
  final GitLineHandlerListener listener=new GitLineHandlerListener(){
    @Override public void processTerminated(    int exitCode){
      if (exitCode != 0 && !myHandler.isIgnoredErrorCode(exitCode)) {
        if (myHandler.errors().isEmpty()) {
          myHandler.addError(new VcsException(GitBundle.message("git.error.exit",exitCode)));
        }
      }
    }
    @Override public void startFailed(    Throwable exception){
      myHandler.addError(new VcsException("Git start failed: " + exception.getMessage(),exception));
    }
    @Override public void onLineAvailable(    String line,    Key outputType){
      if (GitHandlerUtil.isErrorLine(line.trim())) {
        myHandler.addError(new VcsException(line));
      }
      if (indicator != null) {
        indicator.setText2(line);
      }
      if (myProgressAnalyzer != null && indicator != null) {
        final double fraction=myProgressAnalyzer.analyzeProgress(line);
        if (fraction >= 0) {
          indicator.setFraction(fraction);
        }
      }
    }
  }
;
  if (myHandler instanceof GitLineHandler) {
    ((GitLineHandler)myHandler).addLineListener(listener);
  }
 else {
    myHandler.addListener(listener);
  }
  myHandler.addListener(new GitHandlerListener(){
    @Override public void processTerminated(    int exitCode){
      task.dispose();
    }
    @Override public void startFailed(    Throwable exception){
      task.dispose();
    }
  }
);
}
