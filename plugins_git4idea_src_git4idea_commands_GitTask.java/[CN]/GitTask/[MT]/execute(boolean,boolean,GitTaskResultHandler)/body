{
  final Object LOCK=new Object();
  if (modal) {
    ModalTask task=new ModalTask(myProject,myHandler,myTitle){
      @Override public void onSuccess(){
        commonOnSuccess(LOCK,resultHandler);
      }
      @Override public void onCancel(){
        commonOnCancel(LOCK,resultHandler);
      }
    }
;
    ProgressManager.getInstance().run(task);
  }
 else {
    BackgroundableTask task=new BackgroundableTask(myProject,myHandler,myTitle){
      @Override public void onSuccess(){
        commonOnSuccess(LOCK,resultHandler);
      }
      @Override public void onCancel(){
        commonOnCancel(LOCK,resultHandler);
      }
    }
;
    GitVcs.runInBackground(task);
  }
  if (sync) {
    try {
synchronized (LOCK) {
        LOCK.wait();
      }
    }
 catch (    InterruptedException e) {
      LOG.info(e);
    }
  }
}
