{
  final Object LOCK=new Object();
  final AtomicBoolean completed=new AtomicBoolean();
  if (modal) {
    ModalTask task=new ModalTask(myProject,myHandler,myTitle){
      @Override public void onSuccess(){
        commonOnSuccess(LOCK,resultHandler);
        completed.set(true);
      }
      @Override public void onCancel(){
        commonOnCancel(LOCK,resultHandler);
        completed.set(true);
      }
    }
;
    ProgressManager.getInstance().run(task);
  }
 else {
    final BackgroundableTask task=new BackgroundableTask(myProject,myHandler,myTitle){
      @Override public void onSuccess(){
        commonOnSuccess(LOCK,resultHandler);
        completed.set(true);
      }
      @Override public void onCancel(){
        commonOnCancel(LOCK,resultHandler);
        completed.set(true);
      }
    }
;
    if (myProgressIndicator == null) {
      GitVcs.runInBackground(task);
    }
 else {
      task.runAlone();
    }
  }
  if (sync) {
    while (!completed.get()) {
      try {
synchronized (LOCK) {
          LOCK.wait(50);
        }
      }
 catch (      InterruptedException e) {
        LOG.info(e);
      }
    }
  }
}
