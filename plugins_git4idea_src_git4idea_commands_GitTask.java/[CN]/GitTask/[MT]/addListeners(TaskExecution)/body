{
  final GitLineHandlerListener errorListener=new GitLineHandlerListener(){
    @Override public void processTerminated(    int exitCode){
      if (exitCode != 0 && !myHandler.isIgnoredErrorCode(exitCode)) {
        if (myHandler.errors().isEmpty()) {
          myHandler.addError(new VcsException(GitBundle.message("git.error.exit",exitCode)));
        }
      }
    }
    @Override public void startFailed(    Throwable exception){
      myHandler.addError(new VcsException("Git start failed: " + exception.getMessage(),exception));
    }
    @Override public void onLineAvailable(    String line,    Key outputType){
      if (GitHandlerUtil.isErrorLine(line.trim())) {
        myHandler.addError(new VcsException(line));
      }
    }
  }
;
  myHandler.addListener(errorListener);
  if (myHandler instanceof GitLineHandler) {
    ((GitLineHandler)myHandler).addLineListener(errorListener);
  }
  myHandler.addListener(new GitHandlerListener(){
    @Override public void processTerminated(    int exitCode){
      task.dispose();
    }
    @Override public void startFailed(    Throwable exception){
      task.dispose();
    }
  }
);
}
