{
  final PsiExpression qualifier=expression.getQualifierExpression();
  final String expressionText=expression.getText();
  final String text=expressionText;
  if (text.indexOf((int)'.') < 0) {
    return;
  }
  final PsiElement psiElement=expression.resolve();
  if (!(psiElement instanceof PsiClass)) {
    if (qualifier != null) {
      qualifier.accept(this);
    }
    return;
  }
  final PsiReferenceParameterList typeParameters=expression.getParameterList();
  if (typeParameters != null) {
    typeParameters.accept(this);
  }
  final PsiClass aClass=(PsiClass)psiElement;
  final PsiClass outerClass=ClassUtils.getOutermostContainingClass(aClass);
  final String fqName=outerClass.getQualifiedName();
  if (!expressionText.startsWith(fqName)) {
    return;
  }
  final PsiJavaFile file=(PsiJavaFile)expression.getContainingFile();
  if (!ImportUtils.nameCanBeImported(text,file)) {
    return;
  }
  registerError(expression);
}
