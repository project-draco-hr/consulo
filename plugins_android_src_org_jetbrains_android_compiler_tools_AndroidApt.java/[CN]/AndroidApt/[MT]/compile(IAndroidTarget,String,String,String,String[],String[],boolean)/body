{
  final String packageFolderOsPath=FileUtil.toSystemDependentName(outDirOsPath + '/' + aPackage.replace('.','/'));
  final File manifestJavaFile=new File(packageFolderOsPath + File.separatorChar + AndroidUtils.MANIFEST_JAVA_FILE_NAME);
  if (manifestJavaFile.exists()) {
    if (!manifestJavaFile.delete()) {
      LOG.error("Unable to delete " + manifestJavaFile.getPath());
    }
  }
  final File rJavaFile=new File(packageFolderOsPath + File.separatorChar + AndroidUtils.R_JAVA_FILENAME);
  if (rJavaFile.exists()) {
    if (!rJavaFile.delete()) {
      LOG.error("Unable to delete " + rJavaFile.getPath());
    }
  }
  for (  String libPackage : libPackages) {
    final String libPackageFolderOsPath=FileUtil.toSystemDependentName(outDirOsPath + '/' + libPackage.replace('.','/'));
    final File libRJavaFile=new File(libPackageFolderOsPath + File.separatorChar + AndroidUtils.R_JAVA_FILENAME);
    if (libRJavaFile.exists()) {
      if (!libRJavaFile.delete()) {
        LOG.error("Unable to delete " + libRJavaFile.getPath());
      }
    }
  }
  final List<String> args=new ArrayList<String>();
  args.add(target.getPath(IAndroidTarget.AAPT));
  args.add("package");
  args.add("-m");
  if (isLibrary) {
    args.add("--non-constant-id");
  }
  if (resourceDirsOsPaths.length > 1) {
    args.add("--auto-add-overlay");
  }
  if (libPackages.length > 0) {
    args.add("--extra-packages");
    args.add(toPackagesString(libPackages));
  }
  args.add("-J");
  args.add(outDirOsPath);
  args.add("-M");
  args.add(manifestFileOsPath);
  for (  String libResFolderOsPath : resourceDirsOsPaths) {
    args.add("-S");
    args.add(libResFolderOsPath);
  }
  args.add("-I");
  args.add(target.getPath(IAndroidTarget.ANDROID_JAR));
  LOG.info(AndroidUtils.command2string(args));
  return ExecutionUtil.execute(ArrayUtil.toStringArray(args));
}
