{
  myReferences.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      myRemoveButton.setEnabled(myReferences.getSelectedRowCount() != 0);
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myReferencesModel.removeSelectedMapping();
    }
  }
);
  myAddAllTagsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myReferencesModel.addMapping(false,REFS_TAGS_PREFIX + "*",REFS_TAGS_PREFIX + "*");
    }
  }
);
  myAddAllBranchesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myReferencesModel.addMapping(false,REFS_HEADS_PREFIX + "*","refs/remotes/" + getRemoteName() + "/*");
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (myGitRoot == null) {
        throw new IllegalStateException("Git root must be already set at this point.");
      }
      GitRefspecAddRefsDialog d=new GitRefspecAddRefsDialog(myProject,myGitRoot,myRemote,myRemoteTags,myRemoteHeads);
      d.show();
      if (!d.isOK()) {
        return;
      }
      for (      String tag : d.getSelected(true)) {
        myReferencesModel.addMapping(false,tag,tag);
      }
      for (      String head : d.getSelected(false)) {
        myReferencesModel.addMapping(true,head,REFS_REMOTES_PREFIX + getRemoteName() + "/"+ head.substring(REFS_HEADS_PREFIX.length()));
      }
    }
  }
);
}
