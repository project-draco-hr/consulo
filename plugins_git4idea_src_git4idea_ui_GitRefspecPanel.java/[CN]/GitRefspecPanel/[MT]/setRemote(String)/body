{
  if (name != null && name.length() == 0) {
    name=null;
  }
  if (myRemote == null && name == null || myRemote != null && myRemote.equals(name)) {
    return;
  }
  myRemote=name;
  myAddButton.setEnabled(myRemote != null && myRemote.length() != 0);
  final GitRemote remote=myRemotes.get(name);
  if (remote != null) {
    myRemoteNameTextField.setText(name);
    myRemoteNameTextField.setEditable(false);
  }
 else {
    myRemoteNameTextField.setText("");
    myRemoteNameTextField.setEditable(true);
  }
  myRemoteHeads.clear();
  myRemoteTags.clear();
  if (remote != null && myReferenceSource == ReferenceSource.FETCH) {
    myReferencesModel.clear();
    try {
      for (      String ref : GitRemote.getFetchSpecs(myProject,myGitRoot,remote.name())) {
        StringScanner s=new StringScanner(ref);
        boolean force=s.tryConsume('+');
        String remotePart=s.boundedToken(':');
        String localPart=s.line();
        myReferencesModel.addMapping(force,remotePart,localPart);
      }
    }
 catch (    VcsException e) {
      log.error("Failed to get fetch references ",e);
    }
  }
}
