{
  myEqualsFields=null;
  myHashCodeFields=null;
  myNonNullFields=PsiField.EMPTY_ARRAY;
  GlobalSearchScope scope=aClass.getResolveScope();
  final PsiMethod equalsMethod=GenerateEqualsHelper.findMethod(aClass,GenerateEqualsHelper.getEqualsSignature(project,scope));
  final PsiMethod hashCodeMethod=GenerateEqualsHelper.findMethod(aClass,GenerateEqualsHelper.getHashCodeSignature());
  boolean needEquals=equalsMethod == null;
  boolean needHashCode=hashCodeMethod == null;
  if (!needEquals && !needHashCode) {
    String text=aClass instanceof PsiAnonymousClass ? CodeInsightBundle.message("generate.equals.and.hashcode.already.defined.warning.anonymous") : CodeInsightBundle.message("generate.equals.and.hashcode.already.defined.warning",aClass.getQualifiedName());
    if (Messages.showYesNoDialog(project,text,CodeInsightBundle.message("generate.equals.and.hashcode.already.defined.title"),Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE) {
      if (!ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
        public Boolean compute(){
          try {
            equalsMethod.delete();
            hashCodeMethod.delete();
            return Boolean.TRUE;
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
            return Boolean.FALSE;
          }
        }
      }
).booleanValue()) {
        return null;
      }
 else {
        needEquals=needHashCode=true;
      }
    }
 else {
      return null;
    }
  }
  boolean hasNonStaticFields=false;
  for (  PsiField field : aClass.getFields()) {
    if (!field.hasModifierProperty(PsiModifier.STATIC)) {
      hasNonStaticFields=true;
      break;
    }
  }
  if (!hasNonStaticFields) {
    HintManager.getInstance().showErrorHint(editor,"No fields to include in equals/hashCode have been found");
    return null;
  }
  GenerateEqualsWizard wizard=new GenerateEqualsWizard(project,aClass,needEquals,needHashCode);
  wizard.show();
  if (!wizard.isOK())   return null;
  myEqualsFields=wizard.getEqualsFields();
  myHashCodeFields=wizard.getHashCodeFields();
  myNonNullFields=wizard.getNonNullFields();
  return DUMMY_RESULT;
}
