{
  if (!(target instanceof PsiMethod)) {
    return;
  }
  final PsiMethod method=(PsiMethod)target;
  final String propertyName=GroovyPropertyUtils.getPropertyName(method);
  if (propertyName == null)   return;
  SearchScope searchScope=PsiUtil.restrictScopeToGroovyFiles(options.searchScope);
  final TextOccurenceProcessor processor=new TextOccurenceProcessor(){
    public boolean execute(    PsiElement element,    int offsetInElement){
      final PsiReference[] refs=element.getReferences();
      for (      PsiReference ref : refs) {
        if (ReferenceRange.containsOffsetInElement(ref,offsetInElement)) {
          if (ref.isReferenceTo(method)) {
            return consumer.process(ref);
          }
        }
      }
      return true;
    }
  }
;
  collector.addRequest(PsiSearchRequest.elementsWithWord(searchScope,propertyName,UsageSearchContext.IN_CODE,true,processor));
}
