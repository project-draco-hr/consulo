{
  final PsiMethod method=searchParameters.getMethod();
  final String propertyName=getPropertyName(method);
  if (propertyName == null)   return true;
  SearchScope searchScope=PsiUtil.restrictScopeToGroovyFiles(new Computable<SearchScope>(){
    public SearchScope compute(){
      return searchParameters.getScope();
    }
  }
);
  final PsiSearchHelper helper=PsiManager.getInstance(method.getProject()).getSearchHelper();
  final TextOccurenceProcessor processor=new TextOccurenceProcessor(){
    public boolean execute(    PsiElement element,    int offsetInElement){
      final PsiReference[] refs=element.getReferences();
      for (      PsiReference ref : refs) {
        if (ref.getRangeInElement().contains(offsetInElement)) {
          if (ref.isReferenceTo(method)) {
            return consumer.process(ref);
          }
        }
      }
      return true;
    }
  }
;
  return helper.processElementsWithWord(processor,searchScope,propertyName,UsageSearchContext.IN_CODE,false);
}
