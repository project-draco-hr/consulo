{
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      try {
        List<VirtualFile> affectedFiles=GitChangeUtils.unmergedFiles(myProject,root);
        while (affectedFiles.size() != 0) {
          AbstractVcsHelper.getInstance(myProject).showMergeDialog(affectedFiles,reverse ? myVcs.getReverseMergeProvider() : myVcs.getMergeProvider());
          affectedFiles=GitChangeUtils.unmergedFiles(myProject,root);
          if (affectedFiles.size() != 0) {
            int result=Messages.showYesNoDialog(myProject,GitBundle.message("update.rebase.unmerged",affectedFiles.size(),root.getPresentableUrl()),GitBundle.getString("update.rebase.unmerged.title"),Messages.getErrorIcon());
            if (result != 0) {
              cancelled.set(true);
              return;
            }
          }
        }
      }
 catch (      Throwable t) {
        ex.set(t);
      }
    }
  }
);
}
