{
  Pair<List<GitRepository>,List<Change>> conflictingRepositoriesAndAffectedChanges=getConflictingRepositoriesAndAffectedChanges(repository,localChangesOverwrittenByMerge,myCurrentBranchOrRev,myBranchToMerge);
  List<GitRepository> allConflictingRepositories=conflictingRepositoriesAndAffectedChanges.getFirst();
  List<Change> affectedChanges=conflictingRepositoriesAndAffectedChanges.getSecond();
  int smartCheckoutDecision=myUiHandler.showSmartOperationDialog(myProject,affectedChanges,"merge",false);
  if (smartCheckoutDecision == GitSmartOperationDialog.SMART_EXIT_CODE) {
    return doSmartMerge(allConflictingRepositories);
  }
 else {
    fatalLocalChangesError(myBranchToMerge);
    return false;
  }
}
