{
  LOG.info("starting rollback...");
  Collection<GitRepository> repositoriesForSmartRollback=new ArrayList<GitRepository>();
  Collection<GitRepository> repositoriesForSimpleRollback=new ArrayList<GitRepository>();
  Collection<GitRepository> repositoriesForMergeRollback=new ArrayList<GitRepository>();
  for (  GitRepository repository : getSuccessfulRepositories()) {
    if (myConflictedRepositories.containsKey(repository)) {
      repositoriesForMergeRollback.add(repository);
    }
 else     if (thereAreLocalChangesIn(repository)) {
      repositoriesForSmartRollback.add(repository);
    }
 else {
      repositoriesForSimpleRollback.add(repository);
    }
  }
  LOG.info("for smart rollback: " + DvcsUtil.getShortNames(repositoriesForSmartRollback) + "; for simple rollback: "+ DvcsUtil.getShortNames(repositoriesForSimpleRollback)+ "; for merge rollback: "+ DvcsUtil.getShortNames(repositoriesForMergeRollback));
  GitCompoundResult result=smartRollback(repositoriesForSmartRollback);
  for (  GitRepository repository : repositoriesForSimpleRollback) {
    result.append(repository,rollback(repository));
  }
  for (  GitRepository repository : repositoriesForMergeRollback) {
    result.append(repository,rollbackMerge(repository));
  }
  myConflictedRepositories.clear();
  if (!result.totalSuccess()) {
    Notificator.getInstance(myProject).notifyError("Error during rollback",result.getErrorOutputWithReposIndication());
  }
  LOG.info("rollback finished.");
}
