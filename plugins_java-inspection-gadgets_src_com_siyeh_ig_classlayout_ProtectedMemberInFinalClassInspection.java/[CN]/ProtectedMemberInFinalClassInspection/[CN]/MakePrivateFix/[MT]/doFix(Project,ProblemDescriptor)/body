{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMember)) {
    return;
  }
  final PsiMember member=(PsiMember)grandParent;
  final PsiModifierList modifierList=member.getModifierList();
  if (modifierList == null) {
    return;
  }
  final MultiMap<PsiElement,String> conflicts=new MultiMap();
  if (member instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)member;
    SuperMethodsSearch.search(method,method.getContainingClass(),true,false).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
      @Override public boolean process(      MethodSignatureBackedByPsiMethod methodSignature){
        final PsiMethod superMethod=methodSignature.getMethod();
        conflicts.putValue(superMethod,InspectionGadgetsBundle.message("0.will.have.incompatible.access.privileges.with.super.1",RefactoringUIUtil.getDescription(method,false),RefactoringUIUtil.getDescription(superMethod,true)));
        return true;
      }
    }
);
    OverridingMethodsSearch.search(method).forEach(new Processor<PsiMethod>(){
      @Override public boolean process(      PsiMethod overridingMethod){
        conflicts.putValue(overridingMethod,InspectionGadgetsBundle.message("0.will.no.longer.be.visible.from.overriding.1",RefactoringUIUtil.getDescription(method,false),RefactoringUIUtil.getDescription(overridingMethod,true)));
        return false;
      }
    }
);
  }
  final PsiModifierList modifierListCopy=(PsiModifierList)modifierList.copy();
  modifierListCopy.setModifierProperty(PsiModifier.PRIVATE,true);
  final Query<PsiReference> search=ReferencesSearch.search(member,member.getResolveScope());
  search.forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      final PsiElement element=reference.getElement();
      if (!JavaResolveUtil.isAccessible(member,member.getContainingClass(),modifierListCopy,element,null,null)) {
        final PsiElement context=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiField.class,PsiClass.class,PsiFile.class);
        conflicts.putValue(element,RefactoringBundle.message("0.with.1.visibility.is.not.accessible.from.2",RefactoringUIUtil.getDescription(member,false),PsiBundle.visibilityPresentation(PsiModifier.PRIVATE),RefactoringUIUtil.getDescription(context,true)));
      }
      return true;
    }
  }
);
  final boolean conflictsDialogOK;
  if (conflicts.isEmpty()) {
    conflictsDialogOK=true;
  }
 else {
    if (!isOnTheFly()) {
      return;
    }
    final ConflictsDialog conflictsDialog=new ConflictsDialog(member.getProject(),conflicts,new Runnable(){
      @Override public void run(){
        final AccessToken token=WriteAction.start();
        try {
          modifierList.setModifierProperty(PsiModifier.PRIVATE,true);
        }
  finally {
          token.finish();
        }
      }
    }
);
    conflictsDialog.show();
    conflictsDialogOK=conflictsDialog.isOK();
  }
  if (conflictsDialogOK) {
    modifierList.setModifierProperty(PsiModifier.PRIVATE,true);
  }
}
