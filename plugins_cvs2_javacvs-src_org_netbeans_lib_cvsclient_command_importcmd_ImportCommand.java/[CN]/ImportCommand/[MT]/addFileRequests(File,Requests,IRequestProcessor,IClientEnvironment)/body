{
  final DirectoryObject directoryObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(directory);
  final String relativePath=directoryObject.toUnixPath();
  String repository=getRepositoryRoot(clientEnvironment);
  if (!relativePath.equals(".")) {
    repository+='/' + relativePath;
  }
  requests.addRequest(new DirectoryRequest(relativePath,repository));
  final File[] files=directory.listFiles();
  if (files == null) {
    return;
  }
  final List subdirectories=new ArrayList();
  for (int i=0; i < files.length; i++) {
    final File file=files[i];
    if (file.isDirectory()) {
      final DirectoryObject subDirObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(file);
      if (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(subDirObject,clientEnvironment.getCvsFileSystem())) {
        continue;
      }
      subdirectories.add(file);
    }
 else {
      final FileObject fileObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getFileObject(file);
      if (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(fileObject,clientEnvironment.getCvsFileSystem())) {
        continue;
      }
      final KeywordSubstitution keywordSubstMode=getKeywordSubstMode(file.getName());
      final boolean writable=clientEnvironment.getLocalFileReader().isWritable(fileObject,clientEnvironment.getCvsFileSystem());
      if (keywordSubstMode != getKeywordSubstitutionOption()) {
        requests.addKoptRequest(keywordSubstMode);
      }
      requests.addModifiedRequest(fileObject,keywordSubstMode == KeywordSubstitution.BINARY,writable);
    }
  }
  for (Iterator it=subdirectories.iterator(); it.hasNext(); ) {
    final File subdirectory=(File)it.next();
    addFileRequests(subdirectory,requests,requestProcessor,clientEnvironment);
  }
}
