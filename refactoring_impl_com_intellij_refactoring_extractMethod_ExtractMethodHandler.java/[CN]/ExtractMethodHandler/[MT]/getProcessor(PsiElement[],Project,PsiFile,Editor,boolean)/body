{
  if (elements == null || elements.length == 0) {
    if (showErrorMessages) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.a.set.of.statements.or.an.expression"));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_METHOD,project);
    }
    return null;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return null;
  for (  PsiElement element : elements) {
    if (element instanceof PsiStatement && RefactoringUtil.isSuperOrThisCall((PsiStatement)element,true,true)) {
      if (showErrorMessages) {
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.contains.invocation.of.another.class.constructor"));
        CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_METHOD,project);
      }
      return null;
    }
  }
  final ExtractMethodProcessor processor=new ExtractMethodProcessor(project,editor,elements,null,REFACTORING_NAME,"",HelpID.EXTRACT_METHOD);
  try {
    if (!processor.prepare())     return null;
  }
 catch (  PrepareFailedException e) {
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,e.getMessage(),HelpID.EXTRACT_METHOD,project);
    highlightPrepareError(e,file,editor,project);
    return null;
  }
  return processor;
}
