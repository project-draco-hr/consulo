{
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  if (!editor.getSelectionModel().hasSelection()) {
    final int offset=editor.getCaretModel().getOffset();
    final PsiElement[] statementsInRange=IntroduceVariableBase.findStatementsAtOffset(editor,file,offset);
    final List<PsiExpression> expressions=IntroduceVariableBase.collectExpressions(file,editor,offset,statementsInRange);
    if (expressions.size() < 2) {
      editor.getSelectionModel().selectLineAtCaret();
    }
 else {
      IntroduceVariableBase.showChooser(editor,expressions,new Pass<PsiExpression>(){
        @Override public void pass(        PsiExpression psiExpression){
          callback.pass(new PsiExpression[]{psiExpression});
        }
      }
);
      return;
    }
  }
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement[] elements;
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
    if (elements.length == 0) {
      final PsiExpression expression=IntroduceVariableBase.getSelectedExpression(project,file,startOffset,endOffset);
      if (expression != null) {
        elements=new PsiElement[]{expression};
      }
    }
  }
  callback.pass(elements);
}
