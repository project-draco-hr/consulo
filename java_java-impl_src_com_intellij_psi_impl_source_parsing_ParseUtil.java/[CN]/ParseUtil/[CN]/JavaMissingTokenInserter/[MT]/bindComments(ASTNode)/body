{
  if (TreeUtil.isLeafOrCollapsedChameleon(root))   return;
  final List<ASTNode> comments=new SmartList<ASTNode>();
  ((TreeElement)root).acceptTree(new RecursiveTreeElementWalkingVisitor(false){
    @Override protected void visitNode(    TreeElement child){
      if (ElementType.JAVA_COMMENT_BIT_SET.contains(child.getElementType())) {
        comments.add(child);
      }
      if (TreeUtil.isLeafOrCollapsedChameleon(child))       return;
      super.visitNode(child);
    }
  }
);
  ListIterator<ASTNode> iterator;
  iterator=comments.listIterator();
  while (iterator.hasNext()) {
    ASTNode child=iterator.next();
    IElementType type=child.getElementType();
    if (type == JavaDocElementType.DOC_COMMENT) {
      if (bindDocComment((TreeElement)child))       iterator.remove();
    }
 else     if (type == JavaTokenType.END_OF_LINE_COMMENT || type == JavaTokenType.C_STYLE_COMMENT) {
      if (bindTrailingComment((TreeElement)child))       iterator.remove();
    }
  }
  iterator=comments.listIterator(comments.size());
  while (iterator.hasPrevious()) {
    ASTNode child=iterator.previous();
    TreeElement next=(TreeElement)TreeUtil.skipElements(child.getTreeNext(),ElementType.JAVA_WHITESPACE_BIT_SET);
    bindPrecedingComment((TreeElement)child,next);
  }
}
