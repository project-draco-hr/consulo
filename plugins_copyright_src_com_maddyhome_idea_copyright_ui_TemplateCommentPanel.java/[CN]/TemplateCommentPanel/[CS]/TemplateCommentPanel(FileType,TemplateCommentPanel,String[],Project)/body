{
  this.parentPanel=parentPanel;
  myManager=CopyrightManager.getInstance(project);
  if (fileType == null) {
    myUseDefaultSettingsRadioButton.setVisible(false);
    myUseCustomFormattingOptionsRadioButton.setVisible(false);
    myNoCopyright.setVisible(false);
  }
  this.fileType=fileType != null ? fileType : StdFileTypes.JAVA;
  allowBlock=FileTypeUtil.hasBlockComment(this.fileType);
  if (parentPanel != null) {
    parentPanel.addOptionChangeListener(new TemplateOptionsPanelListener(){
      public void optionChanged(){
        updateOverride();
      }
    }
);
  }
  ButtonGroup group=new ButtonGroup();
  group.add(rbBefore);
  group.add(rbAfter);
  if (locations == null) {
    fileLocationPanel.setBorder(BorderFactory.createEmptyBorder());
  }
 else {
    fileLocations=new JRadioButton[locations.length];
    group=new ButtonGroup();
    for (int i=0; i < fileLocations.length; i++) {
      fileLocations[i]=new JRadioButton(locations[i]);
      group.add(fileLocations[i]);
      fileLocationPanel.add(fileLocations[i],new GridConstraints(i,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null));
    }
  }
  addOptionChangeListener(new TemplateOptionsPanelListener(){
    public void optionChanged(){
      showPreview(getOptions());
    }
  }
);
  preview.setFont(EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN));
  preview.setColumns(CodeStyleSettingsManager.getInstance(project).getCurrentSettings().RIGHT_MARGIN);
  myUseDefaultSettingsRadioButton.setSelected(true);
  final ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateOverride();
    }
  }
;
  myUseDefaultSettingsRadioButton.addActionListener(listener);
  myUseCustomFormattingOptionsRadioButton.addActionListener(listener);
  myNoCopyright.addActionListener(listener);
  txtLengthBefore.setText("80");
  txtLengthAfter.setText("80");
  rbBlockComment.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      cbPrefixLines.setEnabled(rbBlockComment.isSelected());
      fireChangeEvent();
    }
  }
);
  rbLineComment.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      cbPrefixLines.setEnabled(rbBlockComment.isSelected());
      fireChangeEvent();
    }
  }
);
  cbPrefixLines.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      fireChangeEvent();
    }
  }
);
  cbSeparatorBefore.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      lblLengthBefore.setEnabled(cbSeparatorBefore.isSelected());
      txtLengthBefore.setEnabled(cbSeparatorBefore.isSelected());
      fireChangeEvent();
      updateBox();
    }
  }
);
  cbSeparatorAfter.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      lblLengthAfter.setEnabled(cbSeparatorAfter.isSelected());
      txtLengthAfter.setEnabled(cbSeparatorAfter.isSelected());
      fireChangeEvent();
      updateBox();
    }
  }
);
  final DocumentAdapter documentAdapter=new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      fireChangeEvent();
      updateBox();
    }
  }
;
  txtLengthBefore.getDocument().addDocumentListener(documentAdapter);
  txtLengthAfter.getDocument().addDocumentListener(documentAdapter);
  txtFiller.getDocument().addDocumentListener(documentAdapter);
  cbBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      fireChangeEvent();
    }
  }
);
}
