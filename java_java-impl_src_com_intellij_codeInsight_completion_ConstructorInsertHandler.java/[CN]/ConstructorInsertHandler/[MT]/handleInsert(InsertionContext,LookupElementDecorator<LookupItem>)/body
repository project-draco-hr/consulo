{
  @SuppressWarnings({"unchecked"}) final LookupItem<PsiClass> delegate=item.getDelegate();
  final PsiElement position=SmartCompletionDecorator.getPosition(context,delegate);
  final PsiExpression enclosing=PsiTreeUtil.getContextOfType(position,PsiExpression.class,true);
  final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(position,PsiAnonymousClass.class);
  final boolean inAnonymous=anonymousClass != null && anonymousClass.getParent() == enclosing;
  boolean withTail=item.getUserData(LookupItem.BRACKETS_COUNT_ATTR) == null && !inAnonymous;
  boolean isAbstract=((PsiClass)item.getObject()).hasModifierProperty(PsiModifier.ABSTRACT);
  if (Lookup.REPLACE_SELECT_CHAR == context.getCompletionChar()) {
    final int plStart=context.getOffset(PARAM_LIST_START);
    final int plEnd=context.getOffset(PARAM_LIST_END);
    if (plStart >= 0 && plEnd >= 0) {
      context.getDocument().deleteString(plStart,plEnd);
      PsiDocumentManager.getInstance(context.getProject()).commitAllDocuments();
    }
  }
  OffsetKey insideRef=context.trackOffset(context.getTailOffset(),false);
  insertParentheses(context,delegate,delegate.getObject(),withTail && isAbstract);
  DefaultInsertHandler.addImportForItem(context,delegate);
  if (!withTail) {
    return;
  }
  if (isAbstract) {
    if (mySmart) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW_ANONYMOUS);
    }
    PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
    final Editor editor=context.getEditor();
    final int offset=context.getTailOffset();
    editor.getDocument().insertString(offset," {}");
    editor.getCaretModel().moveToOffset(offset + 2);
    if (delegate instanceof PsiTypeLookupItem) {
      PsiType type=JavaCompletionUtil.getLookupElementType(delegate);
      if (type instanceof PsiClassType) {
        PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
        PsiClass psiClass=result.getElement();
        if (psiClass != null) {
          for (          PsiTypeParameter parameter : psiClass.getTypeParameters()) {
            PsiType substitution=result.getSubstitutor().substitute(parameter);
            if (substitution instanceof PsiClassType && parameter.equals(((PsiClassType)substitution).resolve())) {
              PsiReferenceParameterList paramList=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getOffset(insideRef) - 1,PsiReferenceParameterList.class,false);
              if (paramList != null && paramList.getTextLength() > 0) {
                TextRange range=paramList.getTextRange();
                context.getDocument().replaceString(range.getStartOffset(),range.getEndOffset(),"<>");
                editor.getCaretModel().moveToOffset(range.getStartOffset() + 1);
              }
              return;
            }
          }
        }
      }
    }
    context.setLaterRunnable(generateAnonymousBody(editor,context.getFile()));
  }
 else {
    final PsiNewExpression newExpression=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiNewExpression.class,false);
    if (newExpression != null) {
      final PsiJavaCodeReferenceElement classReference=newExpression.getClassOrAnonymousClassReference();
      if (classReference != null) {
        CodeStyleManager.getInstance(context.getProject()).reformat(classReference);
      }
    }
    if (mySmart) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
    }
  }
}
