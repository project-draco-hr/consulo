{
  @SuppressWarnings({"unchecked"}) final LookupItem<PsiClass> delegate=item.getDelegate();
  final PsiElement position=SmartCompletionDecorator.getPosition(context,delegate);
  final PsiExpression enclosing=PsiTreeUtil.getContextOfType(position,PsiExpression.class,true);
  final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(position,PsiAnonymousClass.class);
  final boolean inAnonymous=anonymousClass != null && anonymousClass.getParent() == enclosing;
  PsiClass psiClass=(PsiClass)item.getObject();
  boolean isAbstract=psiClass.hasModifierProperty(PsiModifier.ABSTRACT);
  if (Lookup.REPLACE_SELECT_CHAR == context.getCompletionChar()) {
    final int plStart=context.getOffset(PARAM_LIST_START);
    final int plEnd=context.getOffset(PARAM_LIST_END);
    if (plStart >= 0 && plEnd >= 0) {
      context.getDocument().deleteString(plStart,plEnd);
      PsiDocumentManager.getInstance(context.getProject()).commitAllDocuments();
    }
  }
  OffsetKey insideRef=context.trackOffset(context.getTailOffset(),false);
  boolean fillTypeArgs=false;
  if (delegate instanceof PsiTypeLookupItem) {
    fillTypeArgs=psiClass.getTypeParameters().length > 0 && ((PsiTypeLookupItem)delegate).calcGenerics().isEmpty();
    delegate.handleInsert(context);
    PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
  }
  insertParentheses(context,delegate,psiClass,!inAnonymous && isAbstract);
  if (item.getDelegate() instanceof JavaPsiClassReferenceElement) {
    DefaultInsertHandler.addImportForItem(context,delegate);
  }
  if (inAnonymous) {
    return;
  }
  if (isAbstract) {
    if (mySmart) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW_ANONYMOUS);
    }
    PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
    final Editor editor=context.getEditor();
    final int offset=context.getTailOffset();
    editor.getDocument().insertString(offset," {}");
    editor.getCaretModel().moveToOffset(offset + 2);
    if (fillTypeArgs) {
      int refEnd=context.getOffset(insideRef);
      context.getDocument().insertString(refEnd,"<>");
      editor.getCaretModel().moveToOffset(refEnd + 1);
      return;
    }
    context.setLaterRunnable(generateAnonymousBody(editor,context.getFile()));
  }
 else {
    PsiDocumentManager.getInstance(context.getProject()).commitAllDocuments();
    final PsiNewExpression newExpression=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiNewExpression.class,false);
    if (newExpression != null) {
      final PsiJavaCodeReferenceElement classReference=newExpression.getClassOrAnonymousClassReference();
      if (classReference != null) {
        CodeStyleManager.getInstance(context.getProject()).reformat(classReference);
      }
    }
    if (mySmart) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
    }
  }
}
