{
  @SuppressWarnings({"unchecked"}) final LookupItem<PsiClass> delegate=item.getDelegate();
  final PsiElement position=SmartCompletionDecorator.getPosition(context,delegate);
  final PsiExpression enclosing=PsiTreeUtil.getContextOfType(position,PsiExpression.class,true);
  final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(position,PsiAnonymousClass.class);
  final boolean inAnonymous=anonymousClass != null && anonymousClass.getParent() == enclosing;
  insertParentheses(context,delegate,delegate.getObject());
  DefaultInsertHandler.addImportForItem(context.getFile(),context.getStartOffset(),delegate);
  if (item.getUserData(LookupItem.BRACKETS_COUNT_ATTR) == null && !inAnonymous) {
    if (((PsiClass)item.getObject()).hasModifierProperty(PsiModifier.ABSTRACT)) {
      if (mySmart) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW_ANONYMOUS);
      }
      PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
      final Editor editor=context.getEditor();
      final int offset=context.getTailOffset();
      editor.getDocument().insertString(offset," {}");
      editor.getCaretModel().moveToOffset(offset + 2);
      context.setLaterRunnable(generateAnonymousBody(editor,context.getFile()));
    }
 else {
      final PsiNewExpression newExpression=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiNewExpression.class,false);
      if (newExpression != null) {
        final PsiJavaCodeReferenceElement classReference=newExpression.getClassOrAnonymousClassReference();
        if (classReference != null) {
          CodeStyleManager.getInstance(context.getProject()).reformat(classReference);
        }
      }
      if (mySmart) {
        FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
      }
    }
  }
}
