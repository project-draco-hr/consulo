{
  final GrImportStatement[] imports=file.getImportStatements();
  final Set<GrImportStatement> unused=new HashSet<GrImportStatement>(imports.length);
  Collections.addAll(unused,imports);
  file.accept(new GroovyRecursiveElementVisitor(){
    public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      visitRefElement(refElement);
      super.visitCodeReferenceElement(refElement);
    }
    public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      visitRefElement(referenceExpression);
      super.visitReferenceExpression(referenceExpression);
    }
    private void visitRefElement(    GrReferenceElement refElement){
      final GroovyResolveResult[] resolveResults=refElement.multiResolve(false);
      for (      GroovyResolveResult resolveResult : resolveResults) {
        final GroovyPsiElement context=resolveResult.getCurrentFileResolveContext();
        final PsiElement element=resolveResult.getElement();
        if (element == null)         return;
        if (context instanceof GrImportStatement) {
          final GrImportStatement importStatement=(GrImportStatement)context;
          unused.remove(importStatement);
        }
      }
    }
  }
);
  for (  GrImportStatement importStatement : unused) {
    file.removeImport(importStatement);
  }
}
