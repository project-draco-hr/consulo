{
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Map<GroovyFile,Pair<List<GrImportStatement>,Set<GrImportStatement>>> redundants=new HashMap<GroovyFile,Pair<List<GrImportStatement>,Set<GrImportStatement>>>();
  final Runnable findUnusedImports=new Runnable(){
    public void run(){
      final ProgressIndicator progressIndicator=progressManager.getProgressIndicator();
      final int total=files.size();
      int i=0;
      for (      final GroovyFile file : files) {
        if (!file.isValid())         continue;
        final VirtualFile virtualFile=file.getVirtualFile();
        if (!ProjectRootManager.getInstance(project).getFileIndex().isInSource(virtualFile)) {
          continue;
        }
        if (progressIndicator != null) {
          progressIndicator.setText2(virtualFile.getPresentableUrl());
          progressIndicator.setFraction((double)i++ / total);
        }
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            final Set<GrImportStatement> usedImports=GroovyImportOptimizer.findUsedImports(file);
            final List<GrImportStatement> validImports=PsiUtil.getValidImportStatements(file);
            redundants.put(file,Pair.create(validImports,usedImports));
          }
        }
);
      }
    }
  }
;
  if (!progressManager.runProcessWithProgressSynchronously(findUnusedImports,"Optimizing imports (Groovy) ... ",false,project)) {
    return;
  }
  AccessToken accessToken=WriteAction.start();
  try {
    for (    GroovyFile groovyFile : redundants.keySet()) {
      if (!groovyFile.isValid())       continue;
      final Pair<List<GrImportStatement>,Set<GrImportStatement>> pair=redundants.get(groovyFile);
      final List<GrImportStatement> validImports=pair.getFirst();
      final Set<GrImportStatement> usedImports=pair.getSecond();
      for (      GrImportStatement importStatement : validImports) {
        if (!usedImports.contains(importStatement)) {
          groovyFile.removeImport(importStatement);
        }
      }
    }
  }
  finally {
    accessToken.finish();
  }
}
