{
  final GroovyImportOptimizer optimizer=new GroovyImportOptimizer();
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Map<GroovyFile,Pair<List<GrImportStatement>,Set<GrImportStatement>>> redundants=new HashMap<GroovyFile,Pair<List<GrImportStatement>,Set<GrImportStatement>>>();
  final Runnable findUnusedImports=new Runnable(){
    public void run(){
      final ProgressIndicator progressIndicator=progressManager.getProgressIndicator();
      for (      final GroovyFile file : files) {
        final VirtualFile virtualFile=file.getVirtualFile();
        if (!ProjectRootManager.getInstance(project).getFileIndex().isInSource(virtualFile)) {
          continue;
        }
        if (progressIndicator != null) {
          progressIndicator.setText2(virtualFile.getPresentableUrl());
        }
        final Set<GrImportStatement> usedImports=new HashSet<GrImportStatement>();
        final List<GrImportStatement> perFile=optimizer.findUnusedImports(file,usedImports);
        if (perFile != null) {
          redundants.put(file,Pair.create(perFile,usedImports));
        }
      }
    }
  }
;
  if (!progressManager.runProcessWithProgressSynchronously(findUnusedImports,"Optimizing imports (Groovy) ... ",false,project)) {
    return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      for (      GroovyFile groovyFile : redundants.keySet()) {
        final Pair<List<GrImportStatement>,Set<GrImportStatement>> pair=redundants.get(groovyFile);
        final List<GrImportStatement> redundantPerFile=pair.getFirst();
        final Set<GrImportStatement> usedInFile=pair.getSecond();
        for (        GrImportStatement importStatement : redundantPerFile) {
          if (!usedInFile.contains(importStatement)) {
            groovyFile.removeImport(importStatement);
          }
        }
      }
    }
  }
);
}
