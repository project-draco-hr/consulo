def tidyprefix(dest, prefix, suffixes):
    'choose prefix to use for names in archive.  make sure prefix is\n    safe for consumers.'
    if prefix:
        prefix = util.normpath(prefix)
    else:
        if (not isinstance(dest, str)):
            raise ValueError('dest must be string if no prefix')
        prefix = os.path.basename(dest)
        lower = prefix.lower()
        for sfx in suffixes:
            if lower.endswith(sfx):
                prefix = prefix[:(- len(sfx))]
                break
    lpfx = os.path.normpath(util.localpath(prefix))
    prefix = util.pconvert(lpfx)
    if (not prefix.endswith('/')):
        prefix += '/'
    if (prefix.startswith('../') or os.path.isabs(lpfx) or ('/../' in prefix)):
        raise util.Abort(_('archive prefix contains illegal components'))
    return prefix
