{
  File dir=new File(path);
  ZipInputStream zipInputStream=null;
  final String basePackage=getBasePackage();
  try {
    zipInputStream=myTemplate.getStream();
    NullableFunction<String,String> pathConvertor=new NullableFunction<String,String>(){
      @Nullable @Override public String fun(      String s){
        if (moduleMode && s.contains(".idea"))         return null;
        if (basePackage != null && s.startsWith(SRC)) {
          return SRC + basePackage.replace('.','/') + s.substring(SRC.length() - 1);
        }
        return s;
      }
    }
;
    ZipUtil.unzip(ProgressManager.getInstance().getProgressIndicator(),dir,zipInputStream,pathConvertor,new ZipUtil.ContentProcessor(){
      @Override public byte[] processContent(      byte[] content,      String fileName) throws IOException {
        FileType fileType=FileTypeManager.getInstance().getFileTypeByExtension(FileUtilRt.getExtension(fileName));
        return fileType.isBinary() ? content : processTemplates(new String(content));
      }
    }
);
    String iml=ContainerUtil.find(dir.list(),new Condition<String>(){
      @Override public boolean value(      String s){
        return s.endsWith(".iml");
      }
    }
);
    if (moduleMode) {
      File from=new File(path,iml);
      File to=new File(getModuleFilePath());
      if (!from.renameTo(to)) {
        throw new IOException("Can't rename " + from + " to "+ to);
      }
    }
    VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(dir);
    if (virtualFile == null) {
      throw new IOException("Can't find " + dir);
    }
    RefreshQueue.getInstance().refresh(false,true,null,virtualFile);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    StreamUtil.closeStream(zipInputStream);
  }
}
