{
  final HashMap<String,Set<InspectionTool>> usedTools=new HashMap<String,Set<InspectionTool>>();
  final Map<String,Set<InspectionTool>> localTools=new HashMap<String,Set<InspectionTool>>();
  initializeTools(scope,usedTools,localTools,runWithEditorSettings);
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  try {
    scope.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
      }
      @Override public void visitFile(      PsiFile file){
        final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(myProject);
        InspectionProfile profile;
        if (runWithEditorSettings) {
          profile=profileManager.getProfile((PsiElement)file);
        }
 else {
          profile=(InspectionProfileImpl)profileManager.getProfile(myCurrentProfileName);
          if (profile == null) {
            profile=(InspectionProfileImpl)InspectionProfileManager.getInstance().getProfile(myCurrentProfileName);
          }
        }
        incrementJobDoneAmount(LOCAL_ANALYSIS,file.getVirtualFile().getPresentableUrl());
        final Set<InspectionTool> tools=localTools.get(profile.getName());
        for (        InspectionTool tool : tools) {
          ((LocalInspectionToolWrapper)tool).processFile(file);
          psiManager.dropResolveCaches();
        }
      }
    }
);
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
  }
  for (  Set<InspectionTool> tools : usedTools.values()) {
    for (    InspectionTool tool : tools) {
      if (tool.isGraphNeeded()) {
        ((RefManagerImpl)tool.getRefManager()).findAllDeclarations();
      }
      tool.runInspection(scope);
      if (tool.queryExternalUsagesRequests()) {
        needRepeatSearchRequest.add(tool);
      }
    }
  }
}
