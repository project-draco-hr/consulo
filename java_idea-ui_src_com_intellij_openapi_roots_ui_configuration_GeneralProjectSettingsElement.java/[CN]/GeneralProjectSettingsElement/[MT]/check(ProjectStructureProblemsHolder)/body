{
  final Graph<Chunk<ModifiableRootModel>> graph=ModuleCompilerUtil.toChunkGraph(myContext.getModulesConfigurator().createGraphGenerator());
  final Collection<Chunk<ModifiableRootModel>> chunks=graph.getNodes();
  String cycles="";
  int count=0;
  for (  Chunk<ModifiableRootModel> chunk : chunks) {
    final Set<ModifiableRootModel> modules=chunk.getNodes();
    String cycle="";
    for (    ModifiableRootModel model : modules) {
      cycle+=", " + model.getModule().getName();
    }
    if (modules.size() > 1) {
      @NonNls final String br="<br>&nbsp;&nbsp;&nbsp;&nbsp;";
      cycles+=br + (++count) + ". "+ cycle.substring(2);
    }
  }
  if (count > 0) {
    @NonNls final String leftBrace="<html>";
    @NonNls final String rightBrace="</html>";
    final String warningMessage=leftBrace + ProjectBundle.message("module.circular.dependency.warning",cycles,count) + rightBrace;
    final Project project=myContext.getProject();
    final PlaceInProjectStructureBase place=new PlaceInProjectStructureBase(project,ProjectStructureConfigurable.getInstance(project).createModulesPlace());
    problemsHolder.registerWarning("Circular dependencies",warningMessage,place,null);
  }
}
