{
  myArchetypesTree=new Tree();
  myArchetypesTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myArchetypesScrollPane=new JBScrollPane(myArchetypesTree);
  myLoadingIcon.setVisible(false);
  myArchetypesPanel.setLayout(new MyLayout());
  myArchetypesPanel.add(myArchetypesScrollPane);
  myArchetypesPanel.add(myLoadingIcon);
  mySelectAggregator.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myAggregator=doSelectProject(myAggregator);
      updateComponents();
    }
  }
);
  mySelectParent.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myParent=doSelectProject(myParent);
      updateComponents();
    }
  }
);
  ActionListener updatingListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateComponents();
    }
  }
;
  myInheritGroupIdCheckBox.addActionListener(updatingListener);
  myInheritVersionCheckBox.addActionListener(updatingListener);
  myUseArchetypeCheckBox.addActionListener(updatingListener);
  myArchetypesTree.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myAddArchetypeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      doAddArchetype();
    }
  }
);
  myArchetypesTree.setRootVisible(false);
  myArchetypesTree.setShowsRootHandles(true);
  myArchetypesTree.setCellRenderer(new MyRenderer());
  myArchetypesTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myArchetypesTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updateArchetypeDescription();
    }
  }
);
  new TreeSpeedSearch(myArchetypesTree,new Convertor<TreePath,String>(){
    public String convert(    TreePath path){
      MavenArchetype info=getArchetypeInfoFromPathComponent(path.getLastPathComponent());
      return info.groupId + ":" + info.artifactId+ ":"+ info.version;
    }
  }
).setComparator(new SpeedSearchBase.SpeedSearchComparator(false){
    @Override public void translateCharacter(    StringBuilder buf,    char ch){
      if (ch == '*') {
        buf.append("(.)*");
      }
 else {
        super.translateCharacter(buf,ch);
      }
    }
  }
);
  myArchetypeDescriptionField.setEditable(false);
  myArchetypeDescriptionField.setBackground(UIUtil.getPanelBackground());
}
