{
  if (isMavenizedProject()) {
    MavenProjectModel parent=myBuilder.findPotentialParentProject(myProjectOrNull);
    myAggregator=parent;
    myParent=parent;
  }
  myArtifactIdField.setText(myBuilder.getName());
  myGroupIdField.setText(myParent == null ? myBuilder.getName() : myParent.getMavenId().groupId);
  myVersionField.setText(myParent == null ? "1.0" : myParent.getMavenId().version);
  ArchetypeInfo selectedArch=getSelectedArchetype();
  if (selectedArch == null && myUseArchetypeCheckBox.isSelected()) {
    selectedArch=myBuilder.getArchetype();
  }
  DefaultListModel model=new DefaultListModel();
  List<ArchetypeInfo> archetypes=new ArrayList<ArchetypeInfo>(MavenIndicesManager.getInstance().getArchetypes());
  Collections.sort(archetypes,new Comparator<ArchetypeInfo>(){
    public int compare(    ArchetypeInfo o1,    ArchetypeInfo o2){
      String key1=o1.groupId + ":" + o1.artifactId;
      String key2=o2.groupId + ":" + o2.artifactId;
      int result=key1.compareToIgnoreCase(key2);
      if (result != 0)       return result;
      return o2.version.compareToIgnoreCase(o1.version);
    }
  }
);
  for (  ArchetypeInfo each : archetypes) {
    model.addElement(each);
  }
  myArchetypesList.setModel(model);
  myArchetypesList.setSelectedValue(selectedArch,true);
  updateComponents();
}
