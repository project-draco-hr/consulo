{
  super(settings);
  myPreviewPanel.setLayout(new BorderLayout());
  myPreviewPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  fillWrappingCombo(myWrapAttributes);
  fillWrappingCombo(myTextWrapping);
  ActionListener actionListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updatePreview();
    }
  }
;
  myKeepBlankLines.addActionListener(actionListener);
  myWrapAttributes.addActionListener(actionListener);
  myTextWrapping.addActionListener(actionListener);
  myKeepWhiteSpaces.addActionListener(actionListener);
  myAlignAttributes.addActionListener(actionListener);
  mySpacesAroundEquality.addActionListener(actionListener);
  mySpacesAroundTagName.addActionListener(actionListener);
  myAlignText.addActionListener(actionListener);
  final DocumentListener documentListener=new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      updatePreview();
    }
    public void insertUpdate(    DocumentEvent e){
      updatePreview();
    }
    public void removeUpdate(    DocumentEvent e){
      updatePreview();
    }
  }
;
  myKeepBlankLines.getDocument().addDocumentListener(documentListener);
  myInsertNewLineTagNames.getDocument().addDocumentListener(documentListener);
  myRemoveNewLineTagNames.getDocument().addDocumentListener(documentListener);
  myDoNotAlignChildrenTagNames.getDocument().addDocumentListener(documentListener);
  myDoNotAlignChildrenMinSize.getDocument().addDocumentListener(documentListener);
  myTextElementsTagNames.getDocument().addDocumentListener(documentListener);
  myKeepWhiteSpacesTagNames.getDocument().addDocumentListener(documentListener);
  myShouldKeepBlankLines.addActionListener(actionListener);
  myShouldKeepBlankLines.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myKeepBlankLines.setEnabled(myShouldKeepBlankLines.isSelected());
    }
  }
);
}
