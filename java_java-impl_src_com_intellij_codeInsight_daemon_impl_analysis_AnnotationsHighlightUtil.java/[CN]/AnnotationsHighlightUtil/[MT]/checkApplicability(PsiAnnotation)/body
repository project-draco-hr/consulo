{
  PsiAnnotationOwner owner=annotation.getOwner();
  if (owner instanceof PsiModifierList || owner instanceof PsiTypeElement || owner instanceof PsiMethodReceiver|| owner instanceof PsiTypeParameter) {
    PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
    if (nameRef == null) {
      return null;
    }
    PsiElement member=owner instanceof PsiModifierList ? ((PsiElement)owner).getParent() : (PsiElement)owner;
    String[] elementTypeFields=PsiAnnotationImpl.getApplicableElementTypeFields(member);
    if (elementTypeFields == null || PsiAnnotationImpl.isAnnotationApplicableTo(annotation,false,elementTypeFields)) {
      return null;
    }
    String target=JavaErrorMessages.message("annotation.target." + elementTypeFields[0]);
    String description=JavaErrorMessages.message("annotation.not.applicable",nameRef.getText(),target);
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,nameRef,description);
    QuickFixAction.registerQuickFixAction(highlightInfo,new DeleteNotApplicableAnnotationAction(annotation));
    return highlightInfo;
  }
  if (!ANNOTATION_ALLOWED.accepts(annotation)) {
    String message=JavaErrorMessages.message("annotation.not.allowed.here");
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,annotation,message);
    QuickFixAction.registerQuickFixAction(highlightInfo,new DeleteNotApplicableAnnotationAction(annotation));
    return highlightInfo;
  }
  return null;
}
