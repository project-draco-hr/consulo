{
  PsiAnnotationOwner owner=annotationToCheck.getOwner();
  if (owner == null)   return null;
  PsiJavaCodeReferenceElement element=annotationToCheck.getNameReferenceElement();
  if (element == null)   return null;
  PsiElement resolved=element.resolve();
  if (!(resolved instanceof PsiClass))   return null;
  for (  PsiAnnotation annotation : owner.getAnnotations()) {
    if (annotation == annotationToCheck)     continue;
    PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
    if (nameRef == null)     continue;
    PsiElement aClass=nameRef.resolve();
    if (!resolved.equals(aClass))     continue;
    if (!PsiUtil.isLanguageLevel8OrHigher(annotationToCheck)) {
      String description=JavaErrorMessages.message("annotation.duplicate.annotation");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    PsiClass annotationType=(PsiClass)resolved;
    PsiAnnotation metaAnno=PsiImplUtil.findAnnotation(annotationType.getModifierList(),CommonClassNames.JAVA_LANG_ANNOTATION_REPEATABLE);
    if (metaAnno == null) {
      String explanation=JavaErrorMessages.message("annotation.non.repeatable",annotationType.getQualifiedName());
      String description=JavaErrorMessages.message("annotation.duplicate.explained",explanation);
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    String explanation=doCheckRepeatableAnnotation(metaAnno);
    if (explanation != null) {
      String description=JavaErrorMessages.message("annotation.duplicate.explained",explanation);
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    PsiClass collector=getRepeatableCollector(metaAnno);
    if (collector != null) {
      String collectorName=collector.getQualifiedName();
      if (collectorName != null) {
        PsiAnnotation collectorAnno=owner.findAnnotation(collectorName);
        if (collectorAnno != null) {
          String description=JavaErrorMessages.message("annotation.collector.wrong.place",collectorName);
          return annotationError(collectorAnno,description);
        }
      }
    }
  }
  return null;
}
