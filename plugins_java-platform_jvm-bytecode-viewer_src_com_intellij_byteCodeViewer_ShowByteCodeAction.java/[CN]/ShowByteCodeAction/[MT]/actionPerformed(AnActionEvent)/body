{
  final DataContext dataContext=e.getDataContext();
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  final PsiElement psiElement=getPsiElement(dataContext,project,editor);
  if (psiElement == null)   return;
  final String psiElementTitle=ByteCodeViewerManager.getInstance(project).getTitle(psiElement);
  final VirtualFile virtualFile=PsiUtilCore.getVirtualFile(psiElement);
  if (virtualFile == null)   return;
  final SmartPsiElementPointer element=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(psiElement);
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Searching byte code..."){
    private String myByteCode;
    private String myErrorMessage;
    private String myErrorTitle;
    @Override public void run(    @NotNull ProgressIndicator indicator){
      if (ProjectRootManager.getInstance(project).getFileIndex().isInContent(virtualFile) && TranslatingCompilerFilesMonitor.getInstance().isMarkedForCompilation(project,virtualFile)) {
        myErrorMessage="Unable to show byte code for '" + psiElementTitle + "'. Class file does not exist or is out-of-date.";
        myErrorTitle="Class File Out-Of-Date";
      }
 else {
        myByteCode=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
          @Override public String compute(){
            return ByteCodeViewerManager.getByteCode(psiElement);
          }
        }
);
      }
    }
    @Override public void onSuccess(){
      if (project.isDisposed())       return;
      if (myErrorMessage != null && myTitle != null) {
        Messages.showWarningDialog(project,myErrorMessage,myErrorTitle);
        return;
      }
      final PsiElement targetElement=element.getElement();
      if (targetElement == null)       return;
      final ByteCodeViewerManager codeViewerManager=ByteCodeViewerManager.getInstance(project);
      if (codeViewerManager.hasActiveDockedDocWindow()) {
        codeViewerManager.doUpdateComponent(targetElement,myByteCode);
      }
 else {
        if (myByteCode == null) {
          Messages.showErrorDialog(project,"Unable to parse class file for '" + psiElementTitle + "'.","Byte Code not Found");
          return;
        }
        final ByteCodeViewerComponent component=new ByteCodeViewerComponent(project,null);
        component.setText(myByteCode,targetElement);
        Processor<JBPopup> pinCallback=new Processor<JBPopup>(){
          @Override public boolean process(          JBPopup popup){
            codeViewerManager.recreateToolWindow(targetElement,targetElement);
            popup.cancel();
            return false;
          }
        }
;
        final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,null).setRequestFocusCondition(project,NotLookupOrSearchCondition.INSTANCE).setProject(project).setDimensionServiceKey(project,DocumentationManager.JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setRequestFocus(LookupManager.getActiveLookup(editor) == null).setTitle(psiElementTitle + " Bytecode").setCouldPin(pinCallback).createPopup();
        Disposer.register(popup,component);
        PopupPositionManager.positionPopupInBestPosition(popup,editor,dataContext);
      }
    }
  }
);
}
