{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  @NonNls final String signal="signal";
  if (!signal.equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList.getExpressions().length != 0) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (!ClassUtils.isSubclass(containingClass,"java.util.concurrent.locks.Condition")) {
    return;
  }
  registerMethodCallError(expression);
}
