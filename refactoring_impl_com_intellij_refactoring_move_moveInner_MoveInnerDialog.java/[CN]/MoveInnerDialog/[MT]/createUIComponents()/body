{
  if (!myInnerClass.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiManager manager=myInnerClass.getManager();
    PsiType outerType=manager.getElementFactory().createType(myInnerClass.getContainingClass());
    mySuggestedNameInfo=CodeStyleManager.getInstance(myProject).suggestVariableName(VariableKind.PARAMETER,null,null,outerType);
    String[] variants=mySuggestedNameInfo.names;
    myParameterField=new NameSuggestionsField(variants,myProject);
  }
 else {
    myParameterField=new NameSuggestionsField(new String[]{""},myProject);
    myParameterField.getComponent().setEnabled(false);
  }
  myPackageNameField=new PackageNameReferenceEditorCombo("",myProject,RECENTS_KEY,RefactoringBundle.message("choose.destination.package"));
  PsiPackage psiPackage=getTargetPackage();
  if (psiPackage != null) {
    myPackageNameField.prependItem(psiPackage.getName());
  }
}
