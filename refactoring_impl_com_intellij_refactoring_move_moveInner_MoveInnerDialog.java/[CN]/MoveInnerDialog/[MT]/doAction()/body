{
  String message=null;
  final String className=getClassName();
  final String parameterName=getParameterName();
  PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(className)) {
    message=RefactoringBundle.message("no.class.name.specified");
  }
 else {
    if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(className)) {
      message=RefactoringMessageUtil.getIncorrectIdentifierMessage(className);
    }
 else {
      if (myCbPassOuterClass.isSelected()) {
        if ("".equals(parameterName)) {
          message=RefactoringBundle.message("no.parameter.name.specified");
        }
 else {
          if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(parameterName)) {
            message=RefactoringMessageUtil.getIncorrectIdentifierMessage(parameterName);
          }
        }
      }
      if (message == null) {
        if (myTargetContainer instanceof PsiClass) {
          PsiClass targetClass=(PsiClass)myTargetContainer;
          PsiClass[] classes=targetClass.getInnerClasses();
          for (          PsiClass aClass : classes) {
            if (className.equals(aClass.getName())) {
              message=RefactoringBundle.message("inner.class.exists",className,targetClass.getName());
              break;
            }
          }
        }
 else         if (myTargetContainer instanceof PsiDirectory) {
          message=RefactoringMessageUtil.checkCanCreateClass((PsiDirectory)myTargetContainer,className);
        }
      }
    }
  }
  if (message != null) {
    CommonRefactoringUtil.showErrorMessage(MoveInnerImpl.REFACTORING_NAME,message,HelpID.MOVE_INNER_UPPER,myProject);
    return;
  }
  JavaRefactoringSettings.getInstance().MOVE_INNER_PREVIEW_USAGES=isPreviewUsages();
  if (myCbPassOuterClass.isSelected() && mySuggestedNameInfo != null) {
    mySuggestedNameInfo.nameChoosen(getParameterName());
  }
  final PsiElement target=getTargetContainer();
  if (target == null)   return;
  myProcessor.setup(getInnerClass(),className,isPassOuterClass(),parameterName,isSearchInComments(),isSearchInNonJavaFiles(),target);
  invokeRefactoring(myProcessor);
}
