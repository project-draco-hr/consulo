{
  int prefixLength=0;
  if (myText.startsWith("pom.")) {
    prefixLength="pom.".length();
  }
 else   if (myText.startsWith("project.")) {
    prefixLength="project.".length();
  }
  MavenProject mavenProject=myMavenProject;
  while (myText.startsWith("parent.",prefixLength)) {
    MavenId parentId=mavenProject.getParentId();
    if (parentId == null)     return;
    mavenProject=myProjectsManager.findProject(parentId);
    if (mavenProject == null)     return;
    prefixLength+="parent.".length();
  }
  final String prefix=prefixLength == 0 ? null : myText.substring(0,prefixLength);
  PsiDirectory baseDir=getBaseDir(mavenProject);
  addVariant(result,"basedir",baseDir,prefix,MavenIcons.MAVEN_ICON);
  if (prefix == null) {
    result.add(createLookupElement(baseDir,"project.baseUri",MavenIcons.MAVEN_ICON));
    result.add(createLookupElement(baseDir,"pom.baseUri",MavenIcons.MAVEN_ICON));
    result.add(createLookupElement(myElement,TIMESTAMP_PROP,MavenIcons.MAVEN_ICON));
  }
  processSchema(MavenSchemaProvider.MAVEN_PROJECT_SCHEMA_URL,new SchemaProcessor<Object>(){
    @Override public Object process(    @NotNull String property,    XmlElementDescriptor descriptor){
      if (property.startsWith("project.")) {
        addVariant(result,property.substring("project.".length()),descriptor,prefix,MavenIcons.MAVEN_ICON);
      }
      return null;
    }
  }
);
  processSchema(MavenSchemaProvider.MAVEN_SETTINGS_SCHEMA_URL,new SchemaProcessor<Object>(){
    @Override public Object process(    @NotNull String property,    XmlElementDescriptor descriptor){
      result.add(createLookupElement(descriptor,property,MavenIcons.MAVEN_ICON));
      return null;
    }
  }
);
  collectPropertiesVariants(result);
  collectSystemEnvProperties(MavenPropertiesVirtualFileSystem.SYSTEM_PROPERTIES_FILE,null,result);
  collectSystemEnvProperties(MavenPropertiesVirtualFileSystem.ENV_PROPERTIES_FILE,"env.",result);
}
