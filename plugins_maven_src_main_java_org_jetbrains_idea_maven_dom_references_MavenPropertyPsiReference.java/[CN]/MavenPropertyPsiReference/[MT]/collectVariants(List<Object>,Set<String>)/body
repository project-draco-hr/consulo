{
  int prefixLength=0;
  if (myText.startsWith("pom.")) {
    prefixLength="pom.".length();
  }
 else   if (myText.startsWith("project.")) {
    prefixLength="project.".length();
  }
  MavenProject mavenProject=myMavenProject;
  while (myText.startsWith("parent.",prefixLength)) {
    MavenId parentId=mavenProject.getParentId();
    if (parentId == null)     return;
    mavenProject=myProjectsManager.findProject(parentId);
    if (mavenProject == null)     return;
    prefixLength+="parent.".length();
  }
  final String prefix=prefixLength == 0 ? null : myText.substring(0,prefixLength);
  PsiDirectory baseDir=getBaseDir(mavenProject);
  addVariant(result,"basedir",baseDir,prefix,icons.MavenIcons.MavenLogo);
  if (prefix == null) {
    result.add(createLookupElement(baseDir,"project.baseUri",icons.MavenIcons.MavenLogo));
    result.add(createLookupElement(baseDir,"pom.baseUri",icons.MavenIcons.MavenLogo));
    result.add(LookupElementBuilder.create(TIMESTAMP_PROP).withIcon(icons.MavenIcons.MavenLogo));
  }
  processSchema(MavenSchemaProvider.MAVEN_PROJECT_SCHEMA_URL,new SchemaProcessor<Object>(){
    @Override public Object process(    @NotNull String property,    XmlElementDescriptor descriptor){
      if (property.startsWith("project.")) {
        addVariant(result,property.substring("project.".length()),descriptor,prefix,icons.MavenIcons.MavenLogo);
      }
      return null;
    }
  }
);
  processSchema(MavenSchemaProvider.MAVEN_SETTINGS_SCHEMA_URL,new SchemaProcessor<Object>(){
    @Override public Object process(    @NotNull String property,    XmlElementDescriptor descriptor){
      result.add(createLookupElement(descriptor,property,icons.MavenIcons.MavenLogo));
      return null;
    }
  }
);
  collectPropertiesVariants(result,variants);
  collectSystemEnvProperties(MavenPropertiesVirtualFileSystem.SYSTEM_PROPERTIES_FILE,null,result,variants);
  collectSystemEnvProperties(MavenPropertiesVirtualFileSystem.ENV_PROPERTIES_FILE,"env.",result,variants);
  MavenRunnerSettings runnerSettings=MavenRunner.getInstance(myProject).getSettings();
  for (  String prop : runnerSettings.getMavenProperties().keySet()) {
    if (variants.add(prefix)) {
      result.add(LookupElementBuilder.create(prop).withIcon(PlatformIcons.PROPERTY_ICON));
    }
  }
  for (  String prop : MavenUtil.getPropertiesFromMavenOpts().keySet()) {
    if (variants.add(prop)) {
      result.add(LookupElementBuilder.create(prop).withIcon(PlatformIcons.PROPERTY_ICON));
    }
  }
  for (  Object key : myMavenProject.getProperties().keySet()) {
    if (key instanceof String) {
      String property=(String)key;
      if (variants.add(property)) {
        result.add(LookupElementBuilder.create(property).withIcon(PlatformIcons.PROPERTY_ICON));
      }
    }
  }
}
