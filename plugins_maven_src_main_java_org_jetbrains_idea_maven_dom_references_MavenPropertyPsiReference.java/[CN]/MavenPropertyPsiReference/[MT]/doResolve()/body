{
  if (myText.startsWith("env.")) {
    return resolveEnvPropety();
  }
  if (BASEDIR_PROPS.contains(myText)) {
    return resolveBasedir();
  }
  if (myText.equals(TIMESTAMP_PROP)) {
    return myElement;
  }
  PsiElement result=resolveSystemPropety();
  if (result != null)   return result;
  MavenDomProfile profile=DomUtil.findDomElement(myElement,MavenDomProfile.class);
  if (profile != null) {
    result=MavenDomProjectProcessorUtils.searchPropertyInProfile(myText,profile);
    if (result != null)     return result;
  }
  result=MavenDomProjectProcessorUtils.searchProperty(myText,myProjectDom,myProject);
  if (result != null)   return result;
  if (myText.startsWith("settings.")) {
    return resolveSettingsModelProperty();
  }
  String modelProperty=myText;
  if (!modelProperty.startsWith("project.")) {
    modelProperty=modelProperty.startsWith("pom.") ? "project." + modelProperty.substring("pom.".length()) : "project." + modelProperty;
  }
  return resolveModelProperty(myProjectDom,modelProperty,new THashSet<DomElement>());
}
