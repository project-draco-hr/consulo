{
  if (myType == PROJECT) {
    return new AnalysisScope[]{new AnalysisScope(defaultProject,SOURCE_JAVA_FILES)};
  }
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(defaultProject).getFileIndex();
  final HashSet<Module> modules=new HashSet<Module>();
  if (myType == FILE) {
    if (myElement instanceof PsiJavaFile) {
      PsiJavaFile psiJavaFile=(PsiJavaFile)myElement;
      final PsiClass[] classes=psiJavaFile.getClasses();
      boolean onlyPackLocalClasses=true;
      for (int i=0; i < classes.length; i++) {
        final PsiClass aClass=classes[i];
        if (aClass.hasModifierProperty(PsiModifier.PUBLIC)) {
          onlyPackLocalClasses=false;
        }
      }
      if (onlyPackLocalClasses) {
        return new AnalysisScope[]{new AnalysisScope(psiJavaFile.getContainingDirectory().getPackage(),SOURCE_JAVA_FILES)};
      }
    }
    final VirtualFile vFile=((PsiFile)myElement).getVirtualFile();
    modules.addAll(getAllInterstingModules(fileIndex,vFile));
  }
 else   if (myType == DIRECTORY) {
    final VirtualFile vFile=((PsiDirectory)myElement).getVirtualFile();
    modules.addAll(getAllInterstingModules(fileIndex,vFile));
  }
 else   if (myType == PACKAGE) {
    final PsiDirectory[] directories=((PsiPackage)myElement).getDirectories();
    for (int idx=0; idx < directories.length; idx++) {
      modules.addAll(getAllInterstingModules(fileIndex,directories[idx].getVirtualFile()));
    }
  }
 else   if (myType == MODULE) {
    modules.add(myModule);
  }
 else   if (myType == MODULES) {
    modules.addAll(myModules);
  }
  if (modules.isEmpty()) {
    return new AnalysisScope[]{new AnalysisScope(defaultProject,SOURCE_JAVA_FILES)};
  }
  HashSet<AnalysisScope> result=new HashSet<AnalysisScope>();
  final Module[] allModules=ModuleManager.getInstance(defaultProject).getModules();
  for (int i=0; i < allModules.length; i++) {
    for (Iterator<Module> iterator=modules.iterator(); iterator.hasNext(); ) {
      final Module module=iterator.next();
      if (allModules[i].equals(module)) {
        result.add(new AnalysisScope(allModules[i],SOURCE_JAVA_FILES));
        continue;
      }
      if (ModuleManager.getInstance(defaultProject).isModuleDependent(allModules[i],module)) {
        result.add(new AnalysisScope(allModules[i],SOURCE_JAVA_FILES));
      }
    }
  }
  return result.toArray(new AnalysisScope[result.size()]);
}
