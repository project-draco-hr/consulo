{
  String id=context.newId();
  RadComponent result;
  Class componentClass=component.getClass();
  if (componentClass.isAnonymousClass()) {
    componentClass=componentClass.getSuperclass();
  }
  if (component instanceof JPanel && !isCompositeComponent(component)) {
    RadContainer container=new RadContainer(componentClass,id,context.getPalette());
    final RadLayoutManager manager=LayoutManagerRegistry.createFromLayout(component.getLayout());
    if (manager == null) {
      return null;
    }
    container.setLayoutManager(manager);
    result=container;
  }
 else   if (component instanceof Box.Filler) {
    Box.Filler filler=(Box.Filler)component;
    if (filler.getMaximumSize().height == Short.MAX_VALUE) {
      result=new RadVSpacer(null,id);
      result.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW);
    }
 else {
      result=new RadHSpacer(null,id);
      result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW);
    }
  }
 else {
    final RadComponentFactory factory=InsertComponentProcessor.getRadComponentFactory(componentClass);
    if (factory == null) {
      result=new RadAtomicComponent(componentClass,id,context.getPalette());
    }
 else {
      result=factory.newInstance(componentClass,id,context.getPalette());
    }
  }
  context.registerComponent(component,result);
  result.importSnapshotComponent(context,component);
  final IntrospectedProperty[] properties=context.getPalette().getIntrospectedProperties(component.getClass(),result.getDelegee().getClass());
  for (  IntrospectedProperty prop : properties) {
    if (component instanceof AbstractButton) {
      AbstractButton btn=(AbstractButton)component;
      if (prop.getName().equals(SwingProperties.LABEL) && btn.getLabel().equals(btn.getText())) {
        continue;
      }
      if (prop.getName().equals(SwingProperties.ACTION_COMMAND) && btn.getActionCommand().equals(btn.getText())) {
        continue;
      }
    }
    prop.importSnapshotValue(context,component,result);
  }
  if (component instanceof AbstractButton) {
    AbstractButton btn=(AbstractButton)component;
    if (btn.getModel() instanceof DefaultButtonModel) {
      DefaultButtonModel model=(DefaultButtonModel)btn.getModel();
      if (model.getGroup() != null) {
        context.registerButtonGroup(model.getGroup());
      }
    }
  }
  return result;
}
