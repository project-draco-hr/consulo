{
  if (superClass == null || !superClass.hasTypeParameters())   return true;
  final PsiClass superReturnTypeClass=PsiUtil.resolveClassInType(superReturnType);
  if (superReturnTypeClass == null || !(superReturnTypeClass instanceof PsiTypeParameter || superReturnTypeClass.hasTypeParameters()))   return true;
  final PsiClass derivedClass=myMethod.getContainingClass();
  if (derivedClass == null)   return true;
  final PsiReferenceParameterList referenceParameterList=findTypeArgumentsList(superClass,derivedClass);
  if (referenceParameterList == null)   return true;
  final PsiElement resolve=((PsiJavaCodeReferenceElement)referenceParameterList.getParent()).resolve();
  if (!(resolve instanceof PsiClass))   return true;
  final PsiClass baseClass=(PsiClass)resolve;
  if (returnType instanceof PsiPrimitiveType) {
    returnType=((PsiPrimitiveType)returnType).getBoxedType(derivedClass);
  }
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,baseClass,PsiSubstitutor.EMPTY);
  final PsiType superReturnTypeInBaseClassType=superClassSubstitutor.substitute(superReturnType);
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(project).getResolveHelper();
  final PsiSubstitutor psiSubstitutor=resolveHelper.inferTypeArguments(baseClass.getTypeParameters(),new PsiType[]{superReturnTypeInBaseClassType},new PsiType[]{returnType},PsiUtil.getLanguageLevel(superClass));
  final TypeMigrationRules rules=new TypeMigrationRules(TypeMigrationLabeler.getElementType(derivedClass));
  final PsiSubstitutor compoundSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,derivedClass,PsiSubstitutor.EMPTY).putAll(psiSubstitutor);
  rules.setMigrationRootType(JavaPsiFacade.getElementFactory(project).createType(baseClass,compoundSubstitutor));
  rules.setBoundScope(new LocalSearchScope(derivedClass));
  TypeMigrationProcessor.runHighlightingTypeMigration(project,editor,rules,referenceParameterList);
  return false;
}
