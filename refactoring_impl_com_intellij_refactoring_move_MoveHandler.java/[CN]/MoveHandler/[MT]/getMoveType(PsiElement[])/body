{
  for (  PsiElement element : elements) {
    if (element instanceof JspClass || element instanceof JspHolderMethod)     return MoveType.NOT_SUPPORTED;
  }
  if (MoveFilesOrDirectoriesUtil.canMoveFiles(elements)) {
    return MoveType.FILES;
  }
  if (MoveFilesOrDirectoriesUtil.canMoveDirectories(elements)) {
    return MoveType.DIRECTORIES;
  }
  if (elements.length == 1) {
    PsiElement element=elements[0];
    if (element instanceof PsiPackage) {
      return MoveType.PACKAGES;
    }
    if (element instanceof PsiDirectory) {
      PsiDirectory directory=(PsiDirectory)element;
      return JavaDirectoryService.getInstance().getPackage(directory) != null ? MoveType.PACKAGES : MoveType.NOT_SUPPORTED;
    }
 else     if (element instanceof PsiField) {
      return MoveType.MEMBERS;
    }
 else     if (element instanceof PsiMethod) {
      return ((PsiMethod)element).hasModifierProperty(PsiModifier.STATIC) ? MoveType.MEMBERS : MoveType.INSTANCE_METHOD;
    }
 else     if (element instanceof PsiClass) {
      PsiClass aClass=(PsiClass)element;
      if (aClass.getParent() instanceof PsiFile) {
        return MoveType.CLASSES;
      }
 else       if (aClass.getParent() instanceof PsiClass) {
        if (!aClass.hasModifierProperty(PsiModifier.STATIC)) {
          return MoveType.INNER_TO_UPPER;
        }
        return MoveType.INNER_TO_UPPER_OR_MEMBERS;
      }
    }
    return MoveType.NOT_SUPPORTED;
  }
  MoveType type=MoveType.PACKAGES;
  for (  PsiElement element : elements) {
    if (element instanceof PsiPackage) {
      continue;
    }
    if (!(element instanceof PsiDirectory)) {
      type=MoveType.NOT_SUPPORTED;
      break;
    }
    PsiDirectory directory=(PsiDirectory)element;
    if (JavaDirectoryService.getInstance().getPackage(directory) == null) {
      type=MoveType.NOT_SUPPORTED;
      break;
    }
  }
  if (type != MoveType.NOT_SUPPORTED)   return type;
  type=MoveType.CLASSES;
  for (  PsiElement element : elements) {
    if (!(element instanceof PsiClass)) {
      type=MoveType.NOT_SUPPORTED;
      break;
    }
    if (!(element.getParent() instanceof PsiFile)) {
      type=MoveType.NOT_SUPPORTED;
      break;
    }
  }
  if (type != MoveType.NOT_SUPPORTED)   return type;
  type=MoveType.MEMBERS;
  for (  PsiElement element : elements) {
    if (element instanceof PsiClass) {
      if (!(element.getParent() instanceof PsiClass)) {
        type=MoveType.NOT_SUPPORTED;
        break;
      }
    }
 else     if (!(element instanceof PsiField || element instanceof PsiMethod)) {
      type=MoveType.NOT_SUPPORTED;
      break;
    }
  }
  return type;
}
