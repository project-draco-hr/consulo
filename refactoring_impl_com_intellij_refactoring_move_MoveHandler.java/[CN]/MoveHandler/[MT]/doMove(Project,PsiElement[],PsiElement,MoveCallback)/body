{
  if (elements == null) {
    throw new IllegalArgumentException("elements cannot be null");
  }
  if (elements.length == 0)   return;
  int moveType=getMoveType(elements);
  if (moveType == CLASSES || moveType == PACKAGES) {
    MoveClassesOrPackagesImpl.doMove(project,elements,targetContainer,callback);
  }
 else   if (moveType == FILES || moveType == DIRECTORIES) {
    if (!LOG.assertTrue(targetContainer == null || targetContainer instanceof PsiDirectory)) {
      return;
    }
    MoveFilesOrDirectoriesUtil.doMove(project,elements,(PsiDirectory)targetContainer,callback);
  }
 else   if (moveType == MEMBERS) {
    MoveMembersImpl.doMove(project,elements,targetContainer,callback);
  }
 else   if (moveType == INNER_TO_UPPER) {
    MoveInnerImpl.doMove(project,elements,callback);
  }
 else   if (moveType == INSTANCE_METHOD) {
    new MoveInstanceMethodHandler().invoke(project,elements,null);
  }
 else   if (moveType == INNER_TO_UPPER_OR_MEMBERS) {
    SelectInnerOrMembersRefactoringDialog dialog=new SelectInnerOrMembersRefactoringDialog((PsiClass)elements[0],project);
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
    moveType=dialog.getRefactoringType();
    if (moveType == INNER_TO_UPPER) {
      MoveInnerImpl.doMove(project,elements,callback);
    }
 else     if (moveType == MEMBERS) {
      MoveMembersImpl.doMove(project,elements,targetContainer,callback);
    }
  }
 else   if (moveType == MOVE_OR_REARRANGE_PACKAGE) {
    PsiDirectory[] directories=convertToDirectories(moveType,elements);
    SelectMoveOrRearrangePackageDialog dialog=new SelectMoveOrRearrangePackageDialog(project,directories);
    dialog.show();
    if (!dialog.isOK())     return;
    moveType=dialog.getRefactoringType();
    if (moveType == PACKAGES) {
      MoveClassesOrPackagesImpl.doMove(project,elements,targetContainer,callback);
    }
 else {
      MoveClassesOrPackagesImpl.doRearrangePackage(project,directories);
    }
  }
}
