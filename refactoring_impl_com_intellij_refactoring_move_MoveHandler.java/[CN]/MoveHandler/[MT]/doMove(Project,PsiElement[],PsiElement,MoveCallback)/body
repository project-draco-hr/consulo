{
  if (elements.length == 0)   return;
  MoveType moveType=getMoveType(elements);
  if (moveType == MoveType.CLASSES || moveType == MoveType.PACKAGES) {
    if (tryDirectoryMove(project,elements,targetContainer,callback)) {
      return;
    }
    if (tryPackageRearrange(project,elements,targetContainer,moveType)) {
      return;
    }
    MoveClassesOrPackagesImpl.doMove(project,elements,targetContainer,callback);
  }
 else   if (moveType == MoveType.FILES || moveType == MoveType.DIRECTORIES) {
    if (!LOG.assertTrue(targetContainer == null || targetContainer instanceof PsiDirectory || targetContainer instanceof PsiPackage)) {
      return;
    }
    MoveFilesOrDirectoriesUtil.doMove(project,elements,targetContainer,callback);
  }
 else   if (moveType == MoveType.MEMBERS) {
    MoveMembersImpl.doMove(project,elements,targetContainer,callback);
  }
 else   if (moveType == MoveType.INNER_TO_UPPER) {
    MoveInnerImpl.doMove(project,elements,callback);
  }
 else   if (moveType == MoveType.INSTANCE_METHOD) {
    new MoveInstanceMethodHandler().invoke(project,elements,null);
  }
 else   if (moveType == MoveType.INNER_TO_UPPER_OR_MEMBERS) {
    SelectInnerOrMembersRefactoringDialog dialog=new SelectInnerOrMembersRefactoringDialog((PsiClass)elements[0],project);
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
    moveType=dialog.getRefactoringType();
    if (moveType == MoveType.INNER_TO_UPPER) {
      MoveInnerImpl.doMove(project,elements,callback);
    }
 else     if (moveType == MoveType.MEMBERS) {
      MoveMembersImpl.doMove(project,elements,targetContainer,callback);
    }
  }
}
