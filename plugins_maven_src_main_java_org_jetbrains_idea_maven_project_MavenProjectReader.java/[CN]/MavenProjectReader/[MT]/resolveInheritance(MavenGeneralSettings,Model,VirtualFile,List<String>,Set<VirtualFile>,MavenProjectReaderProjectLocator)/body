{
  if (recursionGuard.contains(file))   return;
  recursionGuard.add(file);
  Parent parent=model.getParent();
  final MavenParentDesc[] parentDesc=new MavenParentDesc[1];
  if (parent != null) {
    parentDesc[0]=new MavenParentDesc(new MavenId(parent.getGroupId(),parent.getArtifactId(),parent.getVersion()),parent.getRelativePath());
  }
  Model parentModel=new MavenParentProjectFileProcessor<Model>(){
    @Nullable protected VirtualFile findManagedFile(    @NotNull MavenId id){
      return locator.findProjectFile(id);
    }
    @Override @Nullable protected Model processRelativeParent(    VirtualFile parentFile){
      Model result=super.processRelativeParent(parentFile);
      if (result == null)       return null;
      MavenId parentId=parentDesc[0].getParentId();
      if (!(parentId.equals(result.getGroupId(),result.getArtifactId(),result.getVersion()))) {
        return null;
      }
      return result;
    }
    @Override protected Model processSuperParent(    VirtualFile parentFile){
      return null;
    }
    @Override protected Model doProcessParent(    VirtualFile parentFile){
      return doReadProjectModel(generalSettings,parentFile,activeProfiles,recursionGuard,locator).first;
    }
  }
.process(generalSettings,file,parentDesc[0]);
  if (parentModel != null) {
    new DefaultModelInheritanceAssembler().assembleModelInheritance(model,parentModel);
  }
}
