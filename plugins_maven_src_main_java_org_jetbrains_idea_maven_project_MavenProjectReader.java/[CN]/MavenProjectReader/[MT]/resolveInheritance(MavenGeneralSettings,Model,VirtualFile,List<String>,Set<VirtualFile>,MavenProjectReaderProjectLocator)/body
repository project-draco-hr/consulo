{
  if (recursionGuard.contains(file))   return false;
  recursionGuard.add(file);
  try {
    Parent parent=model.getParent();
    final MavenParentDesc[] parentDesc=new MavenParentDesc[1];
    if (parent != null) {
      parentDesc[0]=new MavenParentDesc(new MavenId(parent.getGroupId(),parent.getArtifactId(),parent.getVersion()),parent.getRelativePath());
    }
    ModelWithValidity parentModelWithValidity=new MavenParentProjectFileProcessor<ModelWithValidity>(){
      @Nullable protected VirtualFile findManagedFile(      @NotNull MavenId id){
        return locator.findProjectFile(id);
      }
      @Override @Nullable protected ModelWithValidity processRelativeParent(      VirtualFile parentFile){
        ModelWithValidity result=super.processRelativeParent(parentFile);
        if (result == null)         return null;
        MavenId parentId=parentDesc[0].getParentId();
        Model model=result.model;
        if (!(parentId.equals(model.getGroupId(),model.getArtifactId(),model.getVersion()))) {
          return null;
        }
        return result;
      }
      @Override protected ModelWithValidity processSuperParent(      VirtualFile parentFile){
        return null;
      }
      @Override protected ModelWithValidity doProcessParent(      VirtualFile parentFile){
        return doReadProjectModel(generalSettings,parentFile,activeProfiles,recursionGuard,locator).first;
      }
    }
.process(generalSettings,file,parentDesc[0]);
    if (parentModelWithValidity == null)     return true;
    new DefaultModelInheritanceAssembler().assembleModelInheritance(model,parentModelWithValidity.model);
    return parentModelWithValidity.validity;
  }
  finally {
    recursionGuard.remove(file);
  }
}
