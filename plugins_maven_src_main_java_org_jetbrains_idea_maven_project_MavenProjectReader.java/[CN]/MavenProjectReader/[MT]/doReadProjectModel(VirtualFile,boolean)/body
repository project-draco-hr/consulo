{
  Model result=new Model();
  LinkedHashSet<MavenProjectProblem> problems=createProblemsList();
  Set<String> alwaysOnProfiles=new THashSet<String>();
  Element xmlProject=readXml(file,problems,MavenProjectProblem.ProblemType.SYNTAX).getChild("project");
  if (xmlProject == null) {
    return new RawModelReadResult(result,problems,alwaysOnProfiles);
  }
  result.setModelVersion(findChildValueByPath(xmlProject,"modelVersion"));
  result.setGroupId(findChildValueByPath(xmlProject,"groupId"));
  result.setArtifactId(findChildValueByPath(xmlProject,"artifactId"));
  result.setVersion(findChildValueByPath(xmlProject,"version"));
  if (headerOnly)   return new RawModelReadResult(result,problems,alwaysOnProfiles);
  result.setPackaging(findChildValueByPath(xmlProject,"packaging"));
  result.setName(findChildValueByPath(xmlProject,"name"));
  if (hasChildByPath(xmlProject,"parent")) {
    Parent parent=new Parent();
    String groupId=findChildValueByPath(xmlProject,"parent.groupId");
    String artifactId=findChildValueByPath(xmlProject,"parent.artifactId");
    String version=findChildValueByPath(xmlProject,"parent.version");
    parent.setGroupId(groupId);
    parent.setArtifactId(artifactId);
    parent.setVersion(version);
    parent.setRelativePath(findChildValueByPath(xmlProject,"parent.relativePath"));
    result.setParent(parent);
  }
  result.setBuild(new Build());
  readModelAndBuild(result,result.getBuild(),xmlProject);
  result.setProfiles(collectProfiles(file,xmlProject,problems,alwaysOnProfiles));
  return new RawModelReadResult(result,problems,alwaysOnProfiles);
}
