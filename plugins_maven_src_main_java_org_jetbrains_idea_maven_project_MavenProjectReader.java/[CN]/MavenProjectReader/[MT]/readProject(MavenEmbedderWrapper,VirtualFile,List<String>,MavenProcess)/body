{
  MavenProject project=null;
  boolean isValid=true;
  List<MavenProjectProblem> problems=new ArrayList<MavenProjectProblem>();
  Set<MavenId> unresolvedArtifactsIds=new HashSet<MavenId>();
  String path=f.getPath();
  try {
    Pair<MavenProject,Set<MavenId>> result=doReadProject(embedder,path,activeProfiles,problems,process);
    project=result.first;
    unresolvedArtifactsIds=result.second;
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e instanceof RuntimeException && e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message != null) {
      problems.add(new MavenProjectProblem(message,true));
    }
    MavenLog.LOG.info(e);
  }
  if (project == null) {
    isValid=false;
    if (problems.isEmpty()) {
      problems.add(new MavenProjectProblem(ProjectBundle.message("maven.project.problem.syntaxError"),true));
    }
    Model model;
    try {
      model=embedder.readModel(path,process);
    }
 catch (    Throwable e) {
      MavenLog.LOG.info(e);
      model=new Model();
    }
    project=createMavenProject(f,model);
  }
  return Pair.create(project,new MavenProjectReaderResult(isValid,activeProfiles,problems,unresolvedArtifactsIds,new File(embedder.getLocalRepository()),project));
}
