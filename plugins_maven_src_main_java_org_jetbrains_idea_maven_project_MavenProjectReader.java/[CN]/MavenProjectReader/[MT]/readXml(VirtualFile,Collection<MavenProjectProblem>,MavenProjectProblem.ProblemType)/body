{
  final LinkedList<Element> stack=new LinkedList<Element>();
  final Element root=new Element("root");
  String text;
  try {
    text=VfsUtil.loadText(file);
  }
 catch (  IOException e) {
    MavenLog.LOG.warn("Cannot read the pom file: " + e);
    problems.add(createProblem(file,e.getMessage(),type));
    return root;
  }
  XmlBuilderDriver driver=new XmlBuilderDriver(text);
  XmlBuilder builder=new XmlBuilder(){
    public void doctype(    @Nullable CharSequence publicId,    @Nullable CharSequence systemId,    int startOffset,    int endOffset){
    }
    public ProcessingOrder startTag(    CharSequence localName,    String namespace,    int startoffset,    int endoffset,    int headerEndOffset){
      String name=localName.toString();
      if (StringUtil.isEmptyOrSpaces(name))       return ProcessingOrder.TAGS;
      Element newElement=new Element(name);
      Element parent=stack.isEmpty() ? root : stack.getLast();
      parent.addContent(newElement);
      stack.addLast(newElement);
      return ProcessingOrder.TAGS_AND_TEXTS;
    }
    public void endTag(    CharSequence localName,    String namespace,    int startoffset,    int endoffset){
      String name=localName.toString();
      if (isEmptyOrSpaces(name))       return;
      int index=-1;
      for (int i=stack.size() - 1; i >= 0; i--) {
        if (stack.get(i).getName().equals(name)) {
          index=i;
          break;
        }
      }
      if (index == -1)       return;
      while (stack.size() > index) {
        stack.removeLast();
      }
    }
    public void textElement(    CharSequence text,    CharSequence physical,    int startoffset,    int endoffset){
      stack.getLast().addContent(text.toString());
    }
    public void attribute(    CharSequence name,    CharSequence value,    int startoffset,    int endoffset){
    }
    public void entityRef(    CharSequence ref,    int startOffset,    int endOffset){
    }
    public void error(    String message,    int startOffset,    int endOffset){
      problems.add(createSyntaxProblem(file,type));
    }
  }
;
  driver.build(builder);
  return root;
}
