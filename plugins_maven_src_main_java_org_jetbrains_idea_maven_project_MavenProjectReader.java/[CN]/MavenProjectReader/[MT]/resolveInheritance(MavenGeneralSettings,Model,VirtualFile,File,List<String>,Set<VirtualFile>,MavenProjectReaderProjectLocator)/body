{
  if (recursionGuard.contains(file))   return;
  recursionGuard.add(file);
  Parent parent=model.getParent();
  if (parent == null)   return;
  final String parentGroupId=parent.getGroupId();
  final String parentArtifactId=parent.getArtifactId();
  final String parentVersion=parent.getVersion();
  Model parentModel=new MavenParentProjectFileProcessor<Model>(){
    protected VirtualFile findManagedFile(    MavenId id){
      return locator.findProjectFile(id);
    }
    @Override protected Model processRelativeParent(    VirtualFile parentFile){
      Model result=super.processRelativeParent(parentFile);
      if (!(parentGroupId.equals(result.getGroupId()) && parentArtifactId.equals(result.getArtifactId()) && parentVersion.equals(result.getVersion()))) {
        return null;
      }
      return result;
    }
    @Override protected Model doProcessParent(    VirtualFile parentFile){
      return doReadProjectModel(generalSettings,parentFile,localRepository,activeProfiles,recursionGuard,locator).first;
    }
  }
.process(file,new MavenId(parentGroupId,parentArtifactId,parentVersion),parent.getRelativePath(),localRepository);
  if (parentModel != null) {
    new DefaultModelInheritanceAssembler().assembleModelInheritance(model,parentModel);
  }
}
