{
  if (recursionGuard.contains(file))   return;
  recursionGuard.add(file);
  Parent parent=model.getParent();
  if (parent == null)   return;
  Model parentModel=null;
  String parentGroupId=parent.getGroupId();
  String parentArtifactId=parent.getArtifactId();
  String parentVersion=parent.getVersion();
  VirtualFile parentFile=locator.findProjectFile(new MavenId(parentGroupId,parentArtifactId,parentVersion));
  if (parentFile != null) {
    parentModel=doReadProjectModel(generalSettings,parentFile,localRepository,activeProfiles,recursionGuard,locator).first;
  }
  if (parentModel == null) {
    parentFile=file.getParent().findFileByRelativePath(parent.getRelativePath());
    if (parentFile != null && parentFile.isDirectory()) {
      parentFile=parentFile.findFileByRelativePath(MavenConstants.POM_XML);
    }
    if (parentFile != null) {
      parentModel=doReadProjectModel(generalSettings,parentFile,localRepository,activeProfiles,recursionGuard,locator).first;
      if (!(parentGroupId.equals(parentModel.getGroupId()) && parentArtifactId.equals(parentModel.getArtifactId()) && parentVersion.equals(parentModel.getVersion()))) {
        parentModel=null;
      }
    }
  }
  if (parentModel == null) {
    File parentIoFile=MavenArtifactUtil.getArtifactFile(localRepository,parent.getGroupId(),parent.getArtifactId(),parent.getVersion(),"pom");
    parentFile=LocalFileSystem.getInstance().findFileByIoFile(parentIoFile);
    if (parentFile != null) {
      parentModel=doReadProjectModel(generalSettings,parentFile,localRepository,activeProfiles,recursionGuard,locator).first;
    }
  }
  if (parentModel != null) {
    new DefaultModelInheritanceAssembler().assembleModelInheritance(model,parentModel);
  }
}
