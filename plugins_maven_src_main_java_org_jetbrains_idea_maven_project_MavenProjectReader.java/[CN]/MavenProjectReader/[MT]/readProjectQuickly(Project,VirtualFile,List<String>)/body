{
  Model mavenModel=new Model();
  DomFileElement<MavenDomProjectModel> domFile=getDomFile(project,file,MavenDomProjectModel.class);
  MavenProjectsManager mavenManager=MavenProjectsManager.getInstance(project);
  if (domFile != null) {
    MavenDomProjectModel domProject=domFile.getRootElement();
    mavenModel.setModelVersion(domProject.getModelVersion().getStringValue());
    mavenModel.setGroupId(domProject.getGroupId().getStringValue());
    mavenModel.setArtifactId(domProject.getArtifactId().getStringValue());
    mavenModel.setVersion(domProject.getVersion().getStringValue());
    mavenModel.setPackaging(domProject.getPackaging().getStringValue());
    mavenModel.setName(domProject.getName().getStringValue());
    mavenModel.setModules(readModules(domProject.getModules()));
    collectProperties(domProject.getProperties(),mavenModel);
    Build mavenBuild=new Build();
    mavenModel.setBuild(mavenBuild);
    MavenDomBuild domBuild=domProject.getBuild();
    if (domBuild.getXmlElement() != null) {
      mavenBuild.setFinalName(domBuild.getFinalName().getStringValue());
      mavenBuild.setDirectory(domBuild.getDirectory().getStringValue());
      mavenBuild.setSourceDirectory(domBuild.getSourceDirectory().getStringValue());
      mavenBuild.setTestSourceDirectory(domBuild.getTestSourceDirectory().getStringValue());
      mavenBuild.setOutputDirectory(domBuild.getOutputDirectory().getStringValue());
      mavenBuild.setTestOutputDirectory(domBuild.getTestOutputDirectory().getStringValue());
    }
    collectProfiles(mavenModel,domProject.getProfiles(),activeProfiles);
    VirtualFile profilesFile=file.getParent().findChild(MavenConstants.PROFILES_XML);
    if (profilesFile != null) {
      DomFileElement<MavenDomProfiles> domProfilesFile=getDomFile(project,profilesFile,MavenDomProfiles.class);
      if (domProfilesFile != null) {
        collectProfiles(mavenModel,domProfilesFile.getRootElement(),activeProfiles);
      }
    }
    MavenDomParent domParent=domProject.getMavenParent();
    if (domParent.getXmlElement() != null) {
      Parent parent=new Parent();
      String groupId=domParent.getGroupId().getStringValue();
      String artifactId=domParent.getArtifactId().getStringValue();
      String version=domParent.getVersion().getStringValue();
      parent.setGroupId(groupId);
      parent.setArtifactId(artifactId);
      parent.setVersion(version);
      parent.setRelativePath(domParent.getRelativePath().getStringValue());
      mavenModel.setParent(parent);
      if (groupId != null && artifactId != null && version != null) {
        MavenId parentId=new MavenId(groupId,artifactId,version);
        org.jetbrains.idea.maven.project.MavenProject mavenProject=mavenManager.findProject(parentId);
        if (mavenProject != null) {
          Properties parentProperties=mavenProject.getProperties();
          Properties props=mavenModel.getProperties();
          for (          Map.Entry<Object,Object> each : parentProperties.entrySet()) {
            if (!props.containsKey(each.getKey())) {
              props.setProperty((String)each.getKey(),(String)each.getValue());
            }
          }
        }
      }
    }
    MavenGeneralSettings settings=mavenManager.getGeneralSettings();
    File userSettings=MavenEmbedderFactory.resolveUserSettingsFile(settings.getMavenSettingsFile());
    collectProfilesFromSettingsFile(project,userSettings,activeProfiles,mavenModel);
    File globalSettings=MavenEmbedderFactory.resolveGlobalSettingsFile(settings.getMavenHome());
    collectProfilesFromSettingsFile(project,globalSettings,activeProfiles,mavenModel);
  }
  MavenProject mavenProject=createMavenProject(file,mavenModel);
  return new MavenProjectReaderResult(true,activeProfiles,Collections.EMPTY_LIST,Collections.EMPTY_SET,mavenManager.getLocalRepository(),mavenProject);
}
