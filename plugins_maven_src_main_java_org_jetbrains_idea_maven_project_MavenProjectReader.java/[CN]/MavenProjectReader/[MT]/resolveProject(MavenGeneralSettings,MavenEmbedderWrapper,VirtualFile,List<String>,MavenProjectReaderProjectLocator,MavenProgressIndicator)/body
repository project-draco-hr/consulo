{
  MavenProject mavenProject=null;
  boolean isValid=true;
  List<MavenProjectProblem> problems=new ArrayList<MavenProjectProblem>();
  Set<MavenId> unresolvedArtifactsIds=new THashSet<MavenId>();
  String path=f.getPath();
  try {
    Pair<MavenProject,Set<MavenId>> result=doResolveProject(embedder,path,activeProfiles,problems,process);
    mavenProject=result.first;
    unresolvedArtifactsIds=result.second;
  }
 catch (  MavenProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    String message=e.getMessage();
    if (e instanceof RuntimeException && e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message != null) {
      problems.add(new MavenProjectProblem(message,true));
    }
    MavenLog.LOG.info(e);
    MavenLog.printInTests(e);
  }
  if (mavenProject == null) {
    isValid=false;
    if (problems.isEmpty()) {
      problems.add(new MavenProjectProblem(ProjectBundle.message("maven.project.problem.syntaxError"),true));
    }
    mavenProject=readProject(generalSettings,f,activeProfiles,locator).nativeMavenProject;
  }
  return new MavenProjectReaderResult(isValid,activeProfiles,problems,unresolvedArtifactsIds,new File(embedder.getLocalRepository()),mavenProject);
}
