{
  Model mavenModel=new Model();
  final Model mavenModel1=mavenModel;
  new ReadAction(){
    protected void run(    Result result) throws Throwable {
      Element xmlProject=readXml(file).getChild("project");
      if (xmlProject == null)       return;
      mavenModel1.setModelVersion(findChildValueByPath(xmlProject,"modelVersion"));
      mavenModel1.setGroupId(findChildValueByPath(xmlProject,"groupId"));
      mavenModel1.setArtifactId(findChildValueByPath(xmlProject,"artifactId"));
      mavenModel1.setVersion(findChildValueByPath(xmlProject,"version"));
      mavenModel1.setPackaging(findChildValueByPath(xmlProject,"packaging"));
      mavenModel1.setName(findChildValueByPath(xmlProject,"name"));
      if (hasChildByPath(xmlProject,"parent")) {
        Parent parent=new Parent();
        String groupId=findChildValueByPath(xmlProject,"parent.groupId");
        String artifactId=findChildValueByPath(xmlProject,"parent.artifactId");
        String version=findChildValueByPath(xmlProject,"parent.version");
        parent.setGroupId(groupId);
        parent.setArtifactId(artifactId);
        parent.setVersion(version);
        parent.setRelativePath(findChildValueByPath(xmlProject,"parent.relativePath"));
        mavenModel1.setParent(parent);
      }
      mavenModel1.setBuild(new Build());
      readModelAndBuild(mavenModel1,mavenModel1.getBuild(),xmlProject);
      mavenModel1.setProfiles(collectProfiles(generalSettings,file,xmlProject));
    }
  }
.execute();
  List<Profile> activatedProfiles=applyProfiles(mavenModel,getBaseDir(file),activeProfiles);
  repairModelHeader(mavenModel);
  resolveInheritance(generalSettings,mavenModel,file,localRepository,activeProfiles,recursionGuard,locator);
  repairModelBody(mavenModel);
  Pair<Model,List<Profile>> result=Pair.create(mavenModel,activatedProfiles);
  return result;
}
