{
  Model mavenModel=new Model();
  DomFileElement<MavenDomProjectModel> domFile=getDomFile(project,file,MavenDomProjectModel.class);
  if (domFile != null) {
    MavenDomProjectModel domProject=domFile.getRootElement();
    mavenModel.setModelVersion(domProject.getModelVersion().getStringValue());
    mavenModel.setGroupId(domProject.getGroupId().getStringValue());
    mavenModel.setArtifactId(domProject.getArtifactId().getStringValue());
    mavenModel.setVersion(domProject.getVersion().getStringValue());
    mavenModel.setPackaging(domProject.getPackaging().getStringValue());
    mavenModel.setName(domProject.getName().getStringValue());
    MavenDomParent domParent=domProject.getMavenParent();
    if (domElementExists(domParent)) {
      Parent parent=new Parent();
      String groupId=domParent.getGroupId().getStringValue();
      String artifactId=domParent.getArtifactId().getStringValue();
      String version=domParent.getVersion().getStringValue();
      parent.setGroupId(groupId);
      parent.setArtifactId(artifactId);
      parent.setVersion(version);
      parent.setRelativePath(domParent.getRelativePath().getStringValue());
      mavenModel.setParent(parent);
    }
    mavenModel.setBuild(new Build());
    readModelAndBuild(mavenModel,mavenModel.getBuild(),domProject);
    mavenModel.setProfiles(collectProfiles(project,file,domProject));
  }
  List<Profile> activatedProfiles=applyProfiles(mavenModel,activeProfiles);
  repairModelHeader(mavenModel);
  resolveInheritance(project,mavenModel,file,localRepository,activeProfiles,recursionGuard,locator);
  repairModelBody(mavenModel);
  return Pair.create(mavenModel,activatedProfiles);
}
