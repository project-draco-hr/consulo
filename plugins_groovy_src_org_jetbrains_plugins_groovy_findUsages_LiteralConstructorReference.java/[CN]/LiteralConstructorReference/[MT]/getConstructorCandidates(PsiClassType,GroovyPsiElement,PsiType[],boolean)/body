{
  PsiClass psiClass=classType.resolve();
  if (psiClass == null)   return Collections.emptyList();
  final PsiMethod[] constructors=psiClass.getConstructors();
  if (constructors.length == 0) {
    return Arrays.<ResolveResult>asList(new PsiElementResolveResult(psiClass));
  }
  List<ResolveResult> applicable=CollectionFactory.arrayList();
  final List<ResolveResult> byName=CollectionFactory.arrayList();
  for (  PsiMethod constructor : constructors) {
    final ResolveResult resolveResult=new PsiElementResolveResult(constructor);
    byName.add(resolveResult);
    if (argTypes != null && isConstructorCall(classType,argTypes,constructor,context)) {
      applicable.add(resolveResult);
    }
  }
  if (!exactMatchesOnly && applicable.isEmpty()) {
    applicable.addAll(byName);
  }
  return applicable;
}
