{
  final PsiElement parent=PsiUtil.skipParentheses(expression.getParent(),true);
  PsiType type=null;
  if (parent instanceof GrSafeCastExpression) {
    type=((GrSafeCastExpression)parent).getType();
  }
 else   if (parent instanceof GrTypeCastExpression) {
    type=((GrTypeCastExpression)parent).getType();
  }
 else   if (parent instanceof GrAssignmentExpression && PsiTreeUtil.isAncestor(((GrAssignmentExpression)parent).getRValue(),expression,false)) {
    final PsiElement lValue=PsiUtil.skipParentheses(((GrAssignmentExpression)parent).getLValue(),false);
    if (lValue instanceof GrReferenceExpression) {
      type=((GrReferenceExpression)lValue).getNominalType();
    }
  }
 else   if (parent instanceof GrVariable) {
    type=((GrVariable)parent).getDeclaredType();
  }
 else {
    final GrControlFlowOwner controlFlowOwner=ControlFlowUtils.findControlFlowOwner(expression);
    if (controlFlowOwner instanceof GrOpenBlock && controlFlowOwner.getParent() instanceof GrMethod) {
      boolean result=ControlFlowUtils.visitAllExitPoints(controlFlowOwner,new ControlFlowUtils.ExitPointVisitor(){
        @Override public boolean visitExitPoint(        Instruction instruction,        @Nullable GrExpression returnValue){
          return returnValue != expression;
        }
      }
);
      if (!result) {
        type=((GrMethod)controlFlowOwner.getParent()).getReturnType();
      }
    }
  }
  if (type instanceof PsiClassType && !type.equalsToText(CommonClassNames.JAVA_LANG_OBJECT) && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
    return (PsiClassType)type;
  }
  return null;
}
