{
  final ArtifactResolver resolver=(ArtifactResolver)ourContainer.lookup(ArtifactResolver.ROLE);
  final ArtifactFactory artifactFactory=(ArtifactFactory)ourContainer.lookup(ArtifactFactory.ROLE);
  final ArtifactMetadataSource metadataSource=(ArtifactMetadataSource)ourContainer.lookup(ArtifactMetadataSource.ROLE);
  final ArtifactRepository localRepo=getRepository(mySettings.getLocalRepository());
  final List<ArtifactRepository> remoteRepos=new ArrayList<ArtifactRepository>();
  for (  Repository repository : mySettings.getRemoteRepositories()) {
    remoteRepos.add(getRepository(repository));
  }
  final Artifact project=artifactFactory.createBuildArtifact("local","project","1.0","pom");
  final Set<Artifact> toResolve=new HashSet<Artifact>();
  for (  ArtifactType template : artifactsToResolve) {
    toResolve.add(createArtifact(artifactFactory,template));
  }
  final Map<String,List<ArtifactType>> resultMap=new HashMap<String,List<ArtifactType>>();
  for (  Artifact artifact : toResolve) {
    try {
      final ArtifactResolutionResult result=resolver.resolveTransitively(Collections.singleton(artifact),project,Collections.EMPTY_MAP,localRepo,remoteRepos,metadataSource,new ScopeArtifactFilter(DefaultArtifact.SCOPE_RUNTIME));
      resultMap.put(getCoordinate(artifact),toArtifactTypeList(result.getArtifacts()));
    }
 catch (    MultipleArtifactsNotFoundException e) {
      resultMap.put(getCoordinate(artifact),toArtifactTypeList(e.getResolvedArtifacts()));
    }
catch (    ArtifactResolutionException e) {
    }
catch (    ArtifactNotFoundException e) {
    }
  }
  return resultMap;
}
