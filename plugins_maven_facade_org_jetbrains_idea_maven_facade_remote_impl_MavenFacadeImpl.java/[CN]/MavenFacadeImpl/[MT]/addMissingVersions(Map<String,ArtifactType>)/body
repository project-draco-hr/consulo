{
  try {
    final ArtifactMetadataSource metadataSource=(ArtifactMetadataSource)ourContainer.lookup(ArtifactMetadataSource.ROLE);
    final ArtifactFactory artifactFactory=(ArtifactFactory)ourContainer.lookup(ArtifactFactory.ROLE);
    final ArtifactRepository localRepo=getRepository(mySettings.getLocalRepository());
    final List<ArtifactRepository> remoteRepos=new ArrayList<ArtifactRepository>();
    for (    Repository repository : mySettings.getRemoteRepositories()) {
      remoteRepos.add(getRepository(repository));
    }
    final HashSet<String> visitedIds=new HashSet<String>();
    for (    ArtifactType artifactType : result.values()) {
      if (!visitedIds.add(artifactType.getGroupId() + ":" + artifactType.getArtifactId()))       continue;
      if (artifactType.getPackaging() == null)       continue;
      final Artifact artifact=createArtifact(artifactFactory,artifactType);
      try {
        final List<ArtifactVersion> list=metadataSource.retrieveAvailableVersions(artifact,localRepo,remoteRepos);
        for (        ArtifactVersion version : list) {
          final String coord=artifact.getGroupId() + ":" + artifact.getArtifactId()+ ":"+ version;
          if (!result.containsKey(coord)) {
            final ArtifactType type=new ArtifactType(artifactType.getGroupId(),artifactType.getArtifactId(),version.toString());
            type.setPackaging(artifact.getType());
            result.put(coord,type);
          }
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
 catch (  Exception e) {
    handleException(e);
    throw new AssertionError();
  }
}
