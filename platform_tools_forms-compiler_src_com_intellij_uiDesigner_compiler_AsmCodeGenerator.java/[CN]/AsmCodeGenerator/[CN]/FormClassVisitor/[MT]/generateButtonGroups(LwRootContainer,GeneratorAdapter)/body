{
  IButtonGroup[] groups=rootContainer.getButtonGroups();
  if (groups.length > 0) {
    try {
      InstrumentationClassFinder.PseudoClass buttonGroupClass=null;
      int groupLocal=generator.newLocal(ourButtonGroupType);
      for (int groupIndex=0; groupIndex < groups.length; groupIndex++) {
        String[] ids=groups[groupIndex].getComponentIds();
        if (ids.length > 0) {
          generator.newInstance(ourButtonGroupType);
          generator.dup();
          generator.invokeConstructor(ourButtonGroupType,Method.getMethod("void <init>()"));
          generator.storeLocal(groupLocal);
          if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) {
            if (buttonGroupClass == null) {
              buttonGroupClass=myFinder.loadClass(ButtonGroup.class.getName());
            }
            validateFieldClass(groups[groupIndex].getName(),buttonGroupClass,null);
            generator.loadThis();
            generator.loadLocal(groupLocal);
            generator.putField(getMainClassType(),groups[groupIndex].getName(),ourButtonGroupType);
          }
          for (int i=0; i < ids.length; i++) {
            Integer localInt=(Integer)myIdToLocalMap.get(ids[i]);
            if (localInt != null) {
              generator.loadLocal(groupLocal);
              generator.loadLocal(localInt.intValue());
              generator.invokeVirtual(ourButtonGroupType,Method.getMethod("void add(javax.swing.AbstractButton)"));
            }
          }
        }
      }
    }
 catch (    IOException e) {
      throw new CodeGenerationException(rootContainer.getId(),e.getMessage(),e);
    }
catch (    ClassNotFoundException e) {
      throw new CodeGenerationException(rootContainer.getId(),e.getMessage(),e);
    }
  }
}
