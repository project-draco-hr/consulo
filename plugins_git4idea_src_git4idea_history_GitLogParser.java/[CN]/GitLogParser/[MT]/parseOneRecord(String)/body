{
  if (line.isEmpty()) {
    return null;
  }
  if (line.charAt(0) == RECORD_START.charAt(0)) {
    line=line.substring(1);
  }
  char nameStatus=0;
  final Collection<String> paths=new HashSet<String>(1);
  if (myNameStatusOutputted != NameStatus.NONE) {
    final String[] infoAndPath=line.split(RECORD_END);
    line=infoAndPath[0];
    if (infoAndPath.length > 1) {
      final String[] nameAndPathSplit=infoAndPath[infoAndPath.length - 1].split("[\\s]");
      int pathIndex=0;
      if (myNameStatusOutputted == NameStatus.STATUS) {
        nameStatus=nameAndPathSplit[0].charAt(0);
        pathIndex=1;
      }
      for (; pathIndex < nameAndPathSplit.length; pathIndex++) {
        String path=nameAndPathSplit[pathIndex].trim();
        if (!path.isEmpty()) {
          paths.add(path);
        }
      }
    }
  }
 else {
    line=line.substring(0,line.length() - 2);
  }
  final String[] values=line.split(ITEMS_SEPARATOR);
  final Map<GitLogOption,String> res=new HashMap<GitLogOption,String>(values.length);
  int i=0;
  for (; i < values.length && i < myOptions.length; i++) {
    res.put(myOptions[i],values[i]);
  }
  for (; i < myOptions.length; i++) {
    res.put(myOptions[i],"");
  }
  return new GitLogRecord(res,paths,nameStatus);
}
