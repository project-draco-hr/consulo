{
  PsiMethod superMethod=superSignatureHierarchical.getMethod();
  PsiClass superClass=superMethod.getContainingClass();
  PsiClass containingClass=hierarchicalMethodSignature.getMethod().getContainingClass();
  if (!superMethod.isConstructor()) {
    if (!aClass.equals(superClass)) {
      if (PsiUtil.isAccessible(superMethod,aClass,aClass)) {
        if (MethodSignatureUtil.isSubsignature(superSignatureHierarchical,hierarchicalMethodSignature)) {
          if (superClass != null) {
            if (superClass.isInterface() || CommonClassNames.JAVA_LANG_OBJECT.equals(superClass.getQualifiedName())) {
              return true;
            }
            if (containingClass != null) {
              if (!containingClass.isInterface()) {
                return true;
              }
              if (!aClass.isInterface() && !InheritanceUtil.isInheritorOrSelf(superClass,containingClass,true)) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}
