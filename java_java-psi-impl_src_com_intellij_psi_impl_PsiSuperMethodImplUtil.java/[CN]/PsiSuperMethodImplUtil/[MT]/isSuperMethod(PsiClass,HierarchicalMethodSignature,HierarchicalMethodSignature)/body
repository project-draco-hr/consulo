{
  PsiMethod superMethod=superSignatureHierarchical.getMethod();
  PsiClass superClass=superMethod.getContainingClass();
  PsiClass containingClass=hierarchicalMethodSignature.getMethod().getContainingClass();
  return !superMethod.isConstructor() && !aClass.equals(superClass) && PsiUtil.isAccessible(superMethod,aClass,aClass)&& MethodSignatureUtil.isSubsignature(superSignatureHierarchical,hierarchicalMethodSignature)&& superClass != null && (containingClass != null && containingClass.isInterface() == superClass.isInterface() || superClass.isInterface() || "java.lang.Object".equals(superClass.getQualifiedName()));
}
