{
  if (!(element instanceof PsiClass) && element instanceof PsiModifierListOwner) {
    PsiModifierListOwner modifierListOwner=(PsiModifierListOwner)element;
    if (myStatic) {
      if (!modifierListOwner.hasModifierProperty(PsiModifier.STATIC)) {
        return true;
      }
    }
 else {
      if (!mySettings.SHOW_STATIC_AFTER_INSTANCE && modifierListOwner.hasModifierProperty(PsiModifier.STATIC) && !myMembersFlag) {
        return true;
      }
    }
  }
  final PsiElement elementParent=myElement.getParent();
  if (element instanceof PsiPackage) {
    if (!mySettings.LIST_PACKAGES_IN_CODE && myScope instanceof PsiClass) {
      if (!(elementParent instanceof PsiQualifiedReference && ((PsiQualifiedReference)elementParent).getQualifier() != null)) {
        return true;
      }
    }
  }
  PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(myElement.getProject()).getResolveHelper();
  if (!(element instanceof PsiMember) || resolveHelper.isAccessible((PsiMember)element,myElement,myQualifierClass)) {
    final String name=PsiUtil.getName(element);
    if (name != null && myContext.prefixMatches(name) && myFilter.isClassAcceptable(element.getClass()) && myFilter.isAcceptable(new CandidateInfo(element,state.get(PsiSubstitutor.KEY)),myElement))     add(new CompletionElement(myQualifierType,element,state.get(PsiSubstitutor.KEY)));
  }
  return true;
}
