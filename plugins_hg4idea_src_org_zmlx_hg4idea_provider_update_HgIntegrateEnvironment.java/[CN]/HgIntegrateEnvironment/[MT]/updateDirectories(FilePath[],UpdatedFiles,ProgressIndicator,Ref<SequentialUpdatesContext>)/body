{
  List<VcsException> exceptions=new LinkedList<VcsException>();
  final VirtualFile repo=mergeDialog.getRepository();
  progressIndicator.setText(HgVcsMessages.message("hg4idea.progress.integrating",repo.getPath()));
  HgMergeCommand hgMergeCommand=new HgMergeCommand(project,repo);
  HgRevisionNumber incomingRevision=null;
  HgTagBranch branch=mergeDialog.getBranch();
  if (branch != null) {
    hgMergeCommand.setBranch(branch.getName());
    incomingRevision=branch.getHead();
  }
  HgTagBranch tag=mergeDialog.getTag();
  if (tag != null) {
    hgMergeCommand.setRevision(tag.getName());
    incomingRevision=tag.getHead();
  }
  String revision=mergeDialog.getRevision();
  if (revision != null) {
    hgMergeCommand.setRevision(revision);
    incomingRevision=HgRevisionNumber.getLocalInstance(revision);
  }
  if (incomingRevision != null) {
    try {
      new HgHeadMerger(project,hgMergeCommand).merge(repo,updatedFiles,progressIndicator,incomingRevision);
      final HgRevisionNumber localRevision=new HgWorkingCopyRevisionsCommand(project).parent(repo);
      final HgRevisionNumber incomingRevisionFinal=incomingRevision;
      ApplicationManager.getApplication().invokeAndWait(new Runnable(){
        public void run(){
          new HgConflictResolver(project,incomingRevisionFinal,localRevision,updatedFiles).resolve(repo);
        }
      }
,ModalityState.defaultModalityState());
    }
 catch (    VcsException e) {
      exceptions.add(e);
    }
  }
 else {
    exceptions.add(new VcsException(HgVcsMessages.message("hg4idea.error.invalidTarget")));
  }
  return new UpdateSessionAdapter(exceptions,false);
}
