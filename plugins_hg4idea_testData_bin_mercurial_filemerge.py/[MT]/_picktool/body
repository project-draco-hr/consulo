def _picktool(repo, ui, path, binary, symlink):

    def check(tool, pat, symlink, binary):
        tmsg = tool
        if pat:
            tmsg += (' specified for ' + pat)
        if (not _findtool(ui, tool)):
            if pat:
                ui.warn((_("couldn't find merge tool %s\n") % tmsg))
            else:
                ui.note((_("couldn't find merge tool %s\n") % tmsg))
        elif (symlink and (not _toolbool(ui, tool, 'symlink'))):
            ui.warn((_("tool %s can't handle symlinks\n") % tmsg))
        elif (binary and (not _toolbool(ui, tool, 'binary'))):
            ui.warn((_("tool %s can't handle binary\n") % tmsg))
        elif ((not util.gui()) and _toolbool(ui, tool, 'gui')):
            ui.warn((_('tool %s requires a GUI\n') % tmsg))
        else:
            return True
        return False
    hgmerge = os.environ.get('HGMERGE')
    if hgmerge:
        return (hgmerge, hgmerge)
    for (pat, tool) in ui.configitems('merge-patterns'):
        mf = match.match(repo.root, '', [pat])
        if (mf(path) and check(tool, pat, symlink, False)):
            toolpath = _findtool(ui, tool)
            return (tool, (('"' + toolpath) + '"'))
    tools = {}
    for (k, v) in ui.configitems('merge-tools'):
        t = k.split('.')[0]
        if (t not in tools):
            tools[t] = int(_toolstr(ui, t, 'priority', '0'))
    names = tools.keys()
    tools = sorted([((- p), t) for (t, p) in tools.items()])
    uimerge = ui.config('ui', 'merge')
    if uimerge:
        if (uimerge not in names):
            return (uimerge, uimerge)
        tools.insert(0, (None, uimerge))
    tools.append((None, 'hgmerge'))
    for (p, t) in tools:
        if check(t, None, symlink, binary):
            toolpath = _findtool(ui, t)
            return (t, (('"' + toolpath) + '"'))
    return ((((not (symlink or binary)) and 'internal:merge') or None), None)
