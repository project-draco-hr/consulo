{
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setTabText(RefactoringBundle.message("usageView.tabText"));
  presentation.setTargetsNodeText(descriptor.getProcessedElementsHeader());
  presentation.setShowReadOnlyStatusAsRed(true);
  presentation.setShowCancelButton(true);
  presentation.setUsagesString(RefactoringBundle.message("usageView.usagesText"));
  int codeUsageCount=0;
  int nonCodeUsageCount=0;
  Set<PsiFile> codeFiles=new HashSet<PsiFile>();
  Set<PsiFile> nonCodeFiles=new HashSet<PsiFile>();
  for (  Usage usage : usages) {
    if (usage instanceof PsiElementUsage) {
      final PsiElementUsage elementUsage=(PsiElementUsage)usage;
      if (elementUsage.isNonCodeUsage()) {
        nonCodeUsageCount++;
        nonCodeFiles.add(elementUsage.getElement().getContainingFile());
      }
 else {
        codeUsageCount++;
        codeFiles.add(elementUsage.getElement().getContainingFile());
      }
    }
  }
  codeFiles.remove(null);
  nonCodeFiles.remove(null);
  presentation.setCodeUsagesString(descriptor.getCodeReferencesText(codeUsageCount,codeFiles.size()));
  presentation.setNonCodeUsagesString(descriptor.getCommentReferencesText(nonCodeUsageCount,nonCodeFiles.size()));
  return presentation;
}
