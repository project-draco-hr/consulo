{
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    execute(usages);
    return;
  }
  final UsageViewDescriptor viewDescriptor=createUsageViewDescriptor(usages);
  final PsiElement[] elements=viewDescriptor.getElements();
  final PsiElement2UsageTargetAdapter[] targets=PsiElement2UsageTargetAdapter.convert(elements);
  Factory<UsageSearcher> factory=new Factory<UsageSearcher>(){
    @Override public UsageSearcher create(){
      return new UsageInfoSearcherAdapter(){
        @Override public void generate(        @NotNull final Processor<Usage> processor){
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              for (int i=0; i < elements.length; i++) {
                elements[i]=targets[i].getElement();
              }
              refreshElements(elements);
            }
          }
);
          processUsages(processor,myProject);
        }
        @Override protected UsageInfo[] findUsages(){
          return BaseRefactoringProcessor.this.findUsages();
        }
      }
;
    }
  }
;
  showUsageView(viewDescriptor,factory,usages);
}
