{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  prepareTestRun();
  Ref<UsageInfo[]> refUsages=new Ref<UsageInfo[]>(findUsages());
  preprocessUsages(refUsages);
  final UsageInfo[] usages=refUsages.get();
  UsageViewDescriptor descriptor=createUsageViewDescriptor(usages);
  if (!ensureElementsWritable(usages,descriptor))   return;
  RefactoringListenerManagerImpl listenerManager=(RefactoringListenerManagerImpl)RefactoringListenerManager.getInstance(myProject);
  myTransaction=listenerManager.startTransaction();
  Map<RefactoringHelper,Object> preparedData=new HashMap<RefactoringHelper,Object>();
  for (  RefactoringHelper helper : Extensions.getExtensions(RefactoringHelper.EP_NAME)) {
    preparedData.put(helper,helper.prepareOperation(usages));
  }
  performRefactoring(usages);
  for (  Map.Entry<RefactoringHelper,Object> e : preparedData.entrySet()) {
    e.getKey().performOperation(myProject,e.getValue());
  }
  myTransaction.commit();
  performPsiSpoilingRefactoring();
}
