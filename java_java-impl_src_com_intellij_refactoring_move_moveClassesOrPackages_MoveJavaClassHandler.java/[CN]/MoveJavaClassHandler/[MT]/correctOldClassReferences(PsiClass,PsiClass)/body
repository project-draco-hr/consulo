{
  final Set<PsiImportStatementBase> importsToDelete=new HashSet<PsiImportStatementBase>();
  newClass.getContainingFile().accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      if (reference.isReferenceTo(oldClass)) {
        final PsiImportStatementBase importStatement=PsiTreeUtil.getParentOfType(reference,PsiImportStatementBase.class);
        if (importStatement != null) {
          importsToDelete.add(importStatement);
          return;
        }
        try {
          reference.bindToElement(newClass);
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
      super.visitReferenceElement(reference);
    }
  }
);
  for (  PsiImportStatementBase importStatement : importsToDelete) {
    importStatement.delete();
  }
}
