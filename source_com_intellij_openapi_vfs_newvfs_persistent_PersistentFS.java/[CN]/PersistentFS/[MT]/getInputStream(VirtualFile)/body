{
synchronized (INPUT_LOCK) {
    InputStream contentStream=FILE_CONTENT.readAttribute(file);
    if (contentStream == null || mustReloadContent(file)) {
      if (contentStream != null)       contentStream.close();
      final NewVirtualFileSystem delegate=getDelegate(file);
      final long len=delegate.getLength(file);
      final InputStream nativeStream=delegate.getInputStream(file);
      if (len > FILE_LENGTH_TO_CACHE_THRESHOULD)       return nativeStream;
      final ByteArrayOutputStream cache=new ByteArrayOutputStream((int)len);
      return new ReplicatorInputStream(nativeStream,cache){
        public void close() throws IOException {
          super.close();
synchronized (INPUT_LOCK) {
            if (getBytesRead() == len) {
              DataOutputStream sink=FILE_CONTENT.writeAttribute(file);
              try {
                FileUtil.copy(new ByteArrayInputStream(cache.toByteArray()),sink);
              }
  finally {
                sink.close();
              }
              myRecords.setLength(getFileId(file),len);
              setFlag(file,MUST_RELOAD_CONTENT,false);
            }
 else {
              setFlag(file,MUST_RELOAD_CONTENT,true);
            }
          }
        }
      }
;
    }
 else {
      return contentStream;
    }
  }
}
