{
  PsiType returnType=((PsiMethod)resolve).getReturnType();
  PsiClass aClass=PsiTypesUtil.getPsiClass(returnType);
  if (aClass == null)   return;
  Map<String,Pair<PsiType,PsiElement>> typeMap=null;
  if (!forCompletion) {
    typeMap=new HashMap<String,Pair<PsiType,PsiElement>>();
  }
  PsiManager manager=aClass.getManager();
  for (  PsiMethod method : aClass.getAllMethods()) {
    String propertyName=GroovyPropertyUtils.getPropertyNameBySetterName(method.getName());
    if (propertyName == null)     continue;
    if (argumentName != null && !argumentName.equals(propertyName))     continue;
    PsiType methodReturnType=method.getReturnType();
    if (methodReturnType != null && !PsiType.VOID.equals(methodReturnType))     continue;
    PsiParameter[] parameters=method.getParameterList().getParameters();
    if (parameters.length != 1)     continue;
    if (forCompletion) {
      result.put(propertyName,NamedArgumentDescriptor.SIMPLE_ON_TOP);
    }
 else {
      PsiType newType=parameters[0].getType();
      Pair<PsiType,PsiElement> oldPair=typeMap.get(propertyName);
      if (oldPair == null) {
        typeMap.put(propertyName,new Pair<PsiType,PsiElement>(newType,method));
      }
 else {
        PsiType type=TypesUtil.getLeastUpperBound(oldPair.first,newType,manager);
        if (type == null) {
          type=PsiType.getJavaLangObject(manager,aClass.getResolveScope());
        }
        typeMap.put(propertyName,new Pair<PsiType,PsiElement>(newType,null));
      }
    }
  }
  if (!forCompletion) {
    for (    Map.Entry<String,Pair<PsiType,PsiElement>> entry : typeMap.entrySet()) {
      result.put(entry.getKey(),new NamedArgumentDescriptor.TypeCondition(entry.getValue().first,entry.getValue().second));
    }
  }
}
