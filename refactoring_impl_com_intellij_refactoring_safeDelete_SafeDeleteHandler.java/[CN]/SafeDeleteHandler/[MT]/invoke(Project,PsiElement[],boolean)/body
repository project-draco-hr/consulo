{
  for (  PsiElement element : elements) {
    if (!SafeDeleteProcessor.validElement(element)) {
      return;
    }
  }
  final PsiElement[] temptoDelete=DeleteUtil.filterElements(elements);
  Set<PsiElement> elementsSet=new HashSet<PsiElement>(Arrays.asList(temptoDelete));
  Set<PsiElement> fullElementsSet=new HashSet<PsiElement>();
  if (checkSuperMethods) {
    for (    PsiElement element : temptoDelete) {
      if (element instanceof PsiMethod) {
        final PsiMethod[] methods=SuperMethodWarningUtil.checkSuperMethods((PsiMethod)element,RefactoringBundle.message("to.delete.with.usage.search"),elementsSet);
        if (methods.length == 0)         return;
        fullElementsSet.addAll(Arrays.asList(methods));
      }
 else       if (element instanceof PsiParameter && ((PsiParameter)element).getDeclarationScope() instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)((PsiParameter)element).getDeclarationScope();
        final Set<PsiParameter> parametersToDelete=new HashSet<PsiParameter>();
        parametersToDelete.add((PsiParameter)element);
        final int parameterIndex=method.getParameterList().getParameterIndex((PsiParameter)element);
        SuperMethodsSearch.search(method,null,true,false).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
          public boolean process(          MethodSignatureBackedByPsiMethod signature){
            parametersToDelete.add(signature.getMethod().getParameterList().getParameters()[parameterIndex]);
            return true;
          }
        }
);
        OverridingMethodsSearch.search(method).forEach(new Processor<PsiMethod>(){
          public boolean process(          PsiMethod overrider){
            parametersToDelete.add(overrider.getParameterList().getParameters()[parameterIndex]);
            return true;
          }
        }
);
        if (parametersToDelete.size() > 1) {
          String message=RefactoringBundle.message("0.is.a.part.of.method.hierarchy.do.you.want.to.delete.multiple.parameters",UsageViewUtil.getLongName(method));
          if (Messages.showYesNoDialog(project,message,REFACTORING_NAME,Messages.getQuestionIcon()) != DialogWrapper.OK_EXIT_CODE)           return;
        }
        fullElementsSet.addAll(parametersToDelete);
      }
 else {
        fullElementsSet.add(element);
      }
    }
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatusRecursively(project,fullElementsSet))   return;
  final PsiElement[] elementsToDelete=fullElementsSet.toArray(new PsiElement[fullElementsSet.size()]);
  SafeDeleteDialog dialog=new SafeDeleteDialog(project,elementsToDelete,new SafeDeleteDialog.Callback(){
    public void run(    final SafeDeleteDialog dialog){
      SafeDeleteProcessor.createInstance(project,new Runnable(){
        public void run(){
          dialog.close(SafeDeleteDialog.CANCEL_EXIT_CODE);
        }
      }
,elementsToDelete,dialog.isSearchInComments(),dialog.isSearchForTextOccurences(),true).run();
    }
  }
);
  dialog.show();
}
