{
  final boolean headless=forcedHeadlessMode != null ? forcedHeadlessMode : ApplicationManager.getApplication().isHeadlessEnvironment();
  final QueueProcessor.ThreadToUse threadToUse=headless ? QueueProcessor.ThreadToUse.POOLED : QueueProcessor.ThreadToUse.AWT;
  final PairConsumer<Pair<Task.Backgroundable,Getter<ProgressIndicator>>,Runnable> consumer=headless ? new BackgroundableHeadlessRunner() : new BackgroundableUnderProgressRunner(title,project);
  myProcessor=new QueueProcessor<Pair<Task.Backgroundable,Getter<ProgressIndicator>>>(consumer,true,threadToUse,new Condition<Object>(){
    @Override public boolean value(    Object o){
      if (project == null)       return ApplicationManager.getApplication().isDisposed();
      if (project.isDefault()) {
        return project.isDisposed();
      }
 else {
        return !ApplicationManager.getApplication().isUnitTestMode() && !project.isOpen() || project.isDisposed();
      }
    }
  }
);
}
