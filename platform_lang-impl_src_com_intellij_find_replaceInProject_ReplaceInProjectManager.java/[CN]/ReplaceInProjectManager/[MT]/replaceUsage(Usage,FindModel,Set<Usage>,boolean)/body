{
  final Ref<FindManager.MalformedReplacementStringException> exceptionResult=Ref.create();
  final boolean result=ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      if (excludedSet.contains(usage)) {
        return false;
      }
      final Document document=((UsageInfo2UsageAdapter)usage).getDocument();
      if (!document.isWritable())       return false;
      boolean result=((UsageInfo2UsageAdapter)usage).processRangeMarkers(new Processor<Segment>(){
        @Override public boolean process(        Segment segment){
          final int textOffset=segment.getStartOffset();
          final int textEndOffset=segment.getEndOffset();
          final Ref<String> stringToReplace=Ref.create();
          try {
            if (!getStringToReplace(textOffset,textEndOffset,document,findModel,stringToReplace))             return true;
            if (!stringToReplace.isNull() && !justCheck) {
              document.replaceString(textOffset,textEndOffset,stringToReplace.get());
            }
          }
 catch (          FindManager.MalformedReplacementStringException e) {
            exceptionResult.set(e);
            return false;
          }
          return true;
        }
      }
);
      return result;
    }
  }
);
  if (!exceptionResult.isNull()) {
    throw exceptionResult.get();
  }
  return result;
}
