{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      if (excludedSet.contains(usage)) {
        return;
      }
      final Document document=((UsageInfo2UsageAdapter)usage).getDocument();
      ((UsageInfo2UsageAdapter)usage).processRangeMarkers(new Processor<Segment>(){
        @Override public boolean process(        Segment segment){
          if (!document.isWritable())           return false;
          final int textOffset=segment.getStartOffset();
          if (textOffset < 0 || textOffset >= document.getTextLength()) {
            return true;
          }
          final int textEndOffset=segment.getEndOffset();
          if (textEndOffset < 0 || textOffset > document.getTextLength()) {
            return true;
          }
          FindManager findManager=FindManager.getInstance(myProject);
          final CharSequence foundString=document.getCharsSequence().subSequence(textOffset,textEndOffset);
          FindResult findResult=findManager.findString(document.getCharsSequence(),textOffset,findModel);
          if (!findResult.isStringFound()) {
            return true;
          }
          String stringToReplace=null;
          try {
            stringToReplace=findManager.getStringToReplace(foundString.toString(),findModel,textOffset,document.getText());
          }
 catch (          FindManager.MalformedReplacementStringException e) {
            Messages.showErrorDialog(myProject,e.getMessage(),FindBundle.message("find.replace.invalid.replacement.string.title"));
          }
          if (stringToReplace != null) {
            document.replaceString(textOffset,textEndOffset,stringToReplace);
          }
          return true;
        }
      }
);
    }
  }
);
}
