{
  final List<Usage> _usages=replaceContext.getUsageView().getSortedUsages();
  if (hasReadOnlyUsages(_usages)) {
    WindowManager.getInstance().getStatusBar(myProject).setInfo(FindBundle.message("find.replace.occurrences.found.in.read.only.files.status"));
    return;
  }
  final Usage[] usages=_usages.toArray(new Usage[_usages.size()]);
  for (int i=0; i < usages.length; ++i) {
    final Usage usage=usages[i];
    final UsageInfo usageInfo=((UsageInfo2UsageAdapter)usage).getUsageInfo();
    final PsiElement elt=usageInfo.getElement();
    if (elt == null)     continue;
    final PsiFile psiFile=elt.getContainingFile();
    if (!psiFile.isWritable())     continue;
    Runnable selectOnEditorRunnable=new Runnable(){
      @Override public void run(){
        final VirtualFile virtualFile=psiFile.getVirtualFile();
        if (virtualFile != null && ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
          @Override public Boolean compute(){
            return virtualFile.isValid() ? Boolean.TRUE : Boolean.FALSE;
          }
        }
).booleanValue()) {
          if (usage.isValid()) {
            usage.highlightInEditor();
            replaceContext.getUsageView().selectUsages(new Usage[]{usage});
          }
        }
      }
    }
;
    CommandProcessor.getInstance().executeCommand(myProject,selectOnEditorRunnable,FindBundle.message("find.replace.select.on.editor.command"),null);
    String title=FindBundle.message("find.replace.found.usage.title",i + 1,usages.length);
    int result;
    try {
      doReplace(usage,replaceContext.getFindModel(),replaceContext.getExcludedSetCached(),true);
      result=FindManager.getInstance(myProject).showPromptDialog(replaceContext.getFindModel(),title);
    }
 catch (    FindManager.MalformedReplacementStringException e) {
      markAsMalformedReplacement(replaceContext,usage);
      result=FindManager.getInstance(myProject).showMalformedReplacementPrompt(replaceContext.getFindModel(),title,e);
    }
    if (result == FindManager.PromptResult.CANCEL) {
      return;
    }
    if (result == FindManager.PromptResult.SKIP) {
      continue;
    }
    final int currentNumber=i;
    if (result == FindManager.PromptResult.OK) {
      final Ref<Boolean> success=Ref.create();
      Runnable runnable=new Runnable(){
        @Override public void run(){
          success.set(doReplace(usage,replaceContext));
        }
      }
;
      CommandProcessor.getInstance().executeCommand(myProject,runnable,FindBundle.message("find.replace.command"),null);
      if (closeUsageViewIfEmpty(replaceContext.getUsageView(),success.get())) {
        return;
      }
    }
    if (result == FindManager.PromptResult.ALL_IN_THIS_FILE) {
      final int[] nextNumber=new int[1];
      Runnable runnable=new Runnable(){
        @Override public void run(){
          int j=currentNumber;
          boolean success=true;
          for (; j < usages.length; j++) {
            final Usage usage=usages[j];
            final UsageInfo usageInfo=((UsageInfo2UsageAdapter)usage).getUsageInfo();
            final PsiElement elt=usageInfo.getElement();
            if (elt == null)             continue;
            PsiFile otherPsiFile=elt.getContainingFile();
            if (!otherPsiFile.equals(psiFile)) {
              break;
            }
            if (!doReplace(usage,replaceContext)) {
              success=false;
            }
          }
          closeUsageViewIfEmpty(replaceContext.getUsageView(),success);
          nextNumber[0]=j;
        }
      }
;
      CommandProcessor.getInstance().executeCommand(myProject,runnable,FindBundle.message("find.replace.command"),null);
      i=nextNumber[0] - 1;
    }
    if (result == FindManager.PromptResult.ALL_FILES) {
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        @Override public void run(){
          final boolean success=doReplace(replaceContext,_usages);
          closeUsageViewIfEmpty(replaceContext.getUsageView(),success);
        }
      }
,FindBundle.message("find.replace.command"),null);
      break;
    }
  }
}
