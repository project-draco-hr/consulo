{
  presentation.setMergeDupLinesAvailable(false);
  final ReplaceContext[] context=new ReplaceContext[1];
  manager.searchAndShowUsages(new UsageTarget[]{new FindInProjectUtil.StringUsageTarget(myProject,findModelCopy.getStringToFind())},usageSearcherFactory,processPresentation,presentation,new UsageViewManager.UsageViewStateListener(){
    @Override public void usageViewCreated(    @NotNull UsageView usageView){
      context[0]=new ReplaceContext(usageView,findModelCopy);
      addReplaceActions(context[0]);
    }
    @Override public void findingUsagesFinished(    final UsageView usageView){
      if (context[0] != null && findManager.getFindInProjectModel().isPromptOnReplace()) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            replaceWithPrompt(context[0]);
            context[0].invalidateExcludedSetCache();
          }
        }
);
      }
    }
  }
);
}
