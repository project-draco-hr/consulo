{
  final boolean isOpenInNewTabEnabled;
  final boolean toOpenInNewTab;
  final Content selectedContent=com.intellij.usageView.UsageViewManager.getInstance(myProject).getSelectedContent(true);
  if (selectedContent != null && selectedContent.isPinned()) {
    toOpenInNewTab=true;
    isOpenInNewTabEnabled=false;
  }
 else {
    toOpenInNewTab=FindSettings.getInstance().isShowResultsInSeparateView();
    isOpenInNewTabEnabled=com.intellij.usageView.UsageViewManager.getInstance(myProject).getReusableContentsCount() > 0;
  }
  final FindManager findManager=FindManager.getInstance(myProject);
  final FindModel findModel=findManager.getFindInProjectModel().clone();
  findModel.setReplaceState(true);
  findModel.setOpenInNewTabVisible(true);
  findModel.setOpenInNewTabEnabled(isOpenInNewTabEnabled);
  findModel.setOpenInNewTab(toOpenInNewTab);
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  FindUtil.initStringToFindWithSelection(findModel,editor);
  findManager.showFindDialog(findModel,new Runnable(){
    @Override public void run(){
      if (!findModel.isProjectScope() && FindInProjectUtil.getDirectory(findModel) == null && findModel.getModuleName() == null && findModel.getCustomScope() == null) {
        return;
      }
      UsageViewManager manager=UsageViewManager.getInstance(myProject);
      if (manager == null)       return;
      findManager.getFindInProjectModel().copyFrom(findModel);
      final FindModel findModelCopy=findModel.clone();
      final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(findModel.isOpenInNewTab(),findModelCopy);
      final FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,true,presentation);
      UsageSearcherFactory factory=new UsageSearcherFactory(findModelCopy,processPresentation);
      searchAndShowUsages(manager,factory,findModelCopy,presentation,processPresentation,findManager);
    }
  }
);
}
