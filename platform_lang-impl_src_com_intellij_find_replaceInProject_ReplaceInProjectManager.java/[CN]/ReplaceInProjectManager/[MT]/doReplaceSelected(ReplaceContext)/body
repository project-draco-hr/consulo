{
  final Set<Usage> selectedUsages=replaceContext.getUsageView().getSelectedUsages();
  if (selectedUsages == null) {
    return;
  }
  Set<VirtualFile> readOnlyFiles=null;
  for (  final Usage usage : selectedUsages) {
    final VirtualFile file=((UsageInFile)usage).getFile();
    if (file != null && !file.isWritable()) {
      if (readOnlyFiles == null)       readOnlyFiles=new HashSet<VirtualFile>();
      readOnlyFiles.add(file);
    }
  }
  if (readOnlyFiles != null) {
    ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(VfsUtilCore.toVirtualFileArray(readOnlyFiles));
  }
  if (hasReadOnlyUsages(selectedUsages)) {
    int result=Messages.showOkCancelDialog(replaceContext.getUsageView().getComponent(),FindBundle.message("find.replace.occurrences.in.read.only.files.prompt"),FindBundle.message("find.replace.occurrences.in.read.only.files.title"),Messages.getWarningIcon());
    if (result != 0) {
      return;
    }
  }
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    @Override public void run(){
      final boolean success=doReplace(replaceContext,selectedUsages);
      final UsageView usageView=replaceContext.getUsageView();
      if (closeUsageViewIfEmpty(usageView,success))       return;
      usageView.getComponent().requestFocus();
    }
  }
,FindBundle.message("find.replace.command"),null);
}
