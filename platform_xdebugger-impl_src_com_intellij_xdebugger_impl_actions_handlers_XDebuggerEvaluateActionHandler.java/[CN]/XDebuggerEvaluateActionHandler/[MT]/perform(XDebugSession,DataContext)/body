{
  final XDebuggerEditorsProvider editorsProvider=session.getDebugProcess().getEditorsProvider();
  final XStackFrame stackFrame=session.getCurrentStackFrame();
  final XDebuggerEvaluator evaluator=session.getDebugProcess().getEvaluator();
  if (evaluator == null) {
    return;
  }
  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  EvaluationMode mode=EvaluationMode.EXPRESSION;
  String selectedText=editor != null ? editor.getSelectionModel().getSelectedText() : null;
  if (selectedText != null) {
    selectedText=evaluator.formatTextForEvaluation(selectedText);
    mode=evaluator.getEvaluationMode(selectedText,editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd(),CommonDataKeys.PSI_FILE.getData(dataContext));
  }
  String text=selectedText;
  if (text == null && editor != null) {
    text=getExpressionText(evaluator,CommonDataKeys.PROJECT.getData(dataContext),editor);
  }
  final VirtualFile file=CommonDataKeys.VIRTUAL_FILE.getData(dataContext);
  if (text == null) {
    XValue value=XDebuggerTreeActionBase.getSelectedValue(dataContext);
    if (value != null) {
      value.calculateEvaluationExpression().done(new Consumer<XExpression>(){
        @Override public void consume(        final XExpression expression){
          if (expression != null) {
            AppUIUtil.invokeOnEdt(new Runnable(){
              @Override public void run(){
                showDialog(session,file,editorsProvider,stackFrame,evaluator,expression);
              }
            }
);
          }
        }
      }
);
      return;
    }
  }
  XExpression expression=XExpressionImpl.fromText(StringUtil.notNullize(text),mode);
  showDialog(session,file,editorsProvider,stackFrame,evaluator,expression);
}
