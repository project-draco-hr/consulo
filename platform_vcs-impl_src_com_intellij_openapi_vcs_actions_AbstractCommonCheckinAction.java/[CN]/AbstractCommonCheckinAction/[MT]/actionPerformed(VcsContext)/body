{
  LOG.debug("actionPerformed. ");
  final Project project=context.getProject();
  if (project == null) {
    LOG.debug("project is null. returning.");
    return;
  }
  if (ChangeListManager.getInstance(project).isFreezedWithNotification("Can not " + getMnemonicsFreeActionName(context) + " now")) {
    LOG.debug("ChangeListManager is freezed. returning.");
    return;
  }
  if (ProjectLevelVcsManager.getInstance(project).isBackgroundVcsOperationRunning()) {
    LOG.debug("Background operation is running. returning.");
    return;
  }
  final FilePath[] roots=filterDescindingFiles(getRoots(context),project);
  if (ApplicationManager.getApplication().isDispatchThread()) {
    ApplicationManager.getApplication().saveAll();
  }
  final ChangeListManager changeListManager=ChangeListManager.getInstance(project);
  changeListManager.invokeAfterUpdate(new Runnable(){
    public void run(){
      LOG.debug("invoking commit dialog after update");
      final LocalChangeList initialSelection=getInitiallySelectedChangeList(context,project);
      Change[] changes=context.getSelectedChanges();
      if (changes != null && changes.length > 0) {
        Collection<Change> changeCollection=new ArrayList<Change>();
        Collections.addAll(changeCollection,changes);
        CommitChangeListDialog.commitChanges(project,changeCollection,initialSelection,getExecutor(project),null);
      }
 else {
        CommitChangeListDialog.commitPaths(project,Arrays.asList(roots),initialSelection,getExecutor(project),null);
      }
    }
  }
,InvokeAfterUpdateMode.SYNCHRONOUS_CANCELLABLE,VcsBundle.message("waiting.changelists.update.for.show.commit.dialog.message"),ModalityState.current());
}
