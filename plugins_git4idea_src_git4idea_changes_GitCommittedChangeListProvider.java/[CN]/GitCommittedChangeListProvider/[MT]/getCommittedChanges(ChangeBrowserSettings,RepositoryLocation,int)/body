{
  ArrayList<CommittedChangeList> rc=new ArrayList<CommittedChangeList>();
  GitRepositoryLocation l=(GitRepositoryLocation)location;
  Long beforeRev=settings.getChangeBeforeFilter();
  Long afterRev=settings.getChangeBeforeFilter();
  Date beforeDate=settings.getDateBeforeFilter();
  Date afterDate=settings.getDateBeforeFilter();
  String author=settings.getUserFilter();
  VirtualFile root=LocalFileSystem.getInstance().findFileByIoFile(l.getRoot());
  if (root == null) {
    throw new VcsException("The repository does not exists anymore: " + l.getRoot());
  }
  GitSimpleHandler h=new GitSimpleHandler(myProject,root,GitHandler.LOG);
  h.addParameters("--pretty=format:%x0C%n" + GitChangeUtils.COMMITTED_CHANGELIST_FORMAT);
  if (!StringUtil.isEmpty(author)) {
    h.addParameters("--author=" + author);
  }
  if (beforeDate != null) {
    h.addParameters("--before=" + GitUtil.gitTime(beforeDate));
  }
  if (afterDate != null) {
    h.addParameters("--after=" + GitUtil.gitTime(afterDate));
  }
  if (maxCount != getUnlimitedCountValue()) {
    h.addParameters("-n" + maxCount);
  }
  if (beforeRev != null && afterRev != null) {
    h.addParameters(GitUtil.formatLongRev(afterRev) + ".." + GitUtil.formatLongRev(beforeRev));
  }
 else   if (beforeRev != null) {
    h.addParameters(GitUtil.formatLongRev(beforeRev));
  }
 else   if (afterRev != null) {
    h.addParameters(GitUtil.formatLongRev(afterRev) + "..");
  }
  String output=h.run();
  StringScanner s=new StringScanner(output);
  while (s.hasMoreData() && s.startsWith('\u000C')) {
    s.nextLine();
    rc.add(GitChangeUtils.parseChangeList(myProject,root,s));
  }
  if (s.hasMoreData()) {
    throw new IllegalStateException("More input is avaialble: " + s.line());
  }
  return rc;
}
