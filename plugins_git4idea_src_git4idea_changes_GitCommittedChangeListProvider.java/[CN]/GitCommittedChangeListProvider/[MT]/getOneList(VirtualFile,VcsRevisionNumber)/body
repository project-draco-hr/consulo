{
  final FilePathImpl filePath=new FilePathImpl(file);
  final GitRepositoryLocation l=(GitRepositoryLocation)getLocationFor(filePath);
  VirtualFile root=LocalFileSystem.getInstance().findFileByIoFile(l.getRoot());
  if (root == null) {
    throw new VcsException("The repository does not exists anymore: " + l.getRoot());
  }
  final CommittedChangeList[] result=new CommittedChangeList[1];
  GitUtil.getLocalCommittedChanges(myProject,root,new Consumer<GitSimpleHandler>(){
    public void consume(    GitSimpleHandler h){
      h.addParameters("-n1");
      h.addParameters("-M");
      h.addParameters(number.asString());
    }
  }
,new Consumer<CommittedChangeList>(){
    @Override public void consume(    CommittedChangeList committedChangeList){
      result[0]=committedChangeList;
    }
  }
,false);
  final Collection<Change> changes=result[0].getChanges();
  if (changes.size() == 1) {
    return new Pair<CommittedChangeList,FilePath>(result[0],changes.iterator().next().getAfterRevision().getFile());
  }
  for (  Change change : changes) {
    if (change.getAfterRevision() != null && filePath.getIOFile().equals(change.getAfterRevision().getFile().getIOFile())) {
      return new Pair<CommittedChangeList,FilePath>(result[0],filePath);
    }
  }
  final ChangesRenameContext renameContext=new ChangesRenameContext(filePath.getIOFile());
  GitUtil.getLocalCommittedChanges(myProject,root,new Consumer<GitSimpleHandler>(){
    public void consume(    GitSimpleHandler h){
      h.addParameters("-M");
      h.addParameters(number.asString() + "..");
    }
  }
,new Consumer<CommittedChangeList>(){
    @Override public void consume(    CommittedChangeList committedChangeList){
      final Collection<Change> list=committedChangeList.getChanges();
      renameContext.checkForRename(list);
    }
  }
,false);
  renameContext.checkForRename(result[0].getChanges());
  return new Pair<CommittedChangeList,FilePath>(result[0],new FilePathImpl(renameContext.getCurrentPath(),false));
}
