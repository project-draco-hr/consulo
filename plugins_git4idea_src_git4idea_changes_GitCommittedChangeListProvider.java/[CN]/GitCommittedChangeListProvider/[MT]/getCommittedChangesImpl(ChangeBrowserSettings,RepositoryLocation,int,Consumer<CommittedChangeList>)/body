{
  GitRepositoryLocation l=(GitRepositoryLocation)location;
  final Long beforeRev=settings.getChangeBeforeFilter();
  final Long afterRev=settings.getChangeBeforeFilter();
  final Date beforeDate=settings.getDateBeforeFilter();
  final Date afterDate=settings.getDateBeforeFilter();
  final String author=settings.getUserFilter();
  VirtualFile root=LocalFileSystem.getInstance().findFileByIoFile(l.getRoot());
  if (root == null) {
    throw new VcsException("The repository does not exists anymore: " + l.getRoot());
  }
  GitUtil.getLocalCommittedChanges(myProject,root,new Consumer<GitSimpleHandler>(){
    public void consume(    GitSimpleHandler h){
      if (!StringUtil.isEmpty(author)) {
        h.addParameters("--author=" + author);
      }
      if (beforeDate != null) {
        h.addParameters("--before=" + GitUtil.gitTime(beforeDate));
      }
      if (afterDate != null) {
        h.addParameters("--after=" + GitUtil.gitTime(afterDate));
      }
      if (maxCount != getUnlimitedCountValue()) {
        h.addParameters("-n" + maxCount);
      }
      if (beforeRev != null && afterRev != null) {
        h.addParameters(GitUtil.formatLongRev(afterRev) + ".." + GitUtil.formatLongRev(beforeRev));
      }
 else       if (beforeRev != null) {
        h.addParameters(GitUtil.formatLongRev(beforeRev));
      }
 else       if (afterRev != null) {
        h.addParameters(GitUtil.formatLongRev(afterRev) + "..");
      }
    }
  }
,consumer);
}
