{
  final boolean unitTestMode=ApplicationManager.getApplication().isUnitTestMode();
  if (myWritableDirectoryList.size() > 1 && !unitTestMode) {
    PsiDirectory preferredDirectory=myDirectory;
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
    final Module moduleForFile=fileIndex.getModuleForFile(file.getVirtualFile());
    if (moduleForFile != null) {
      for (      PsiDirectory d : myWritableDirectoryList) {
        if (fileIndex.getModuleForFile(d.getVirtualFile()) == moduleForFile) {
          preferredDirectory=d;
          break;
        }
      }
    }
    myDirectory=DirectoryChooserUtil.chooseDirectory(myWritableDirectoryList.toArray(new PsiDirectory[myWritableDirectoryList.size()]),preferredDirectory,project,new HashMap<PsiDirectory,String>());
  }
  if (myDirectory == null)   return;
  if (StringUtil.isEmpty(myCanonicalText))   return;
  final PsiManager manager=myDirectory.getManager();
  PsiDirectory directory=myDirectory;
  String lastName;
  for (StringTokenizer st=new StringTokenizer(myCanonicalText,"."); ; ) {
    lastName=st.nextToken();
    if (st.hasMoreTokens()) {
      try {
        directory=directory.findSubdirectory(lastName) != null ? directory.findSubdirectory(lastName) : directory.createSubdirectory(lastName);
      }
 catch (      IncorrectOperationException e) {
        CreateFromUsageUtils.scheduleFileOrPackageCreationFailedMessageBox(e,lastName,directory,true);
        return;
      }
    }
 else {
      break;
    }
  }
  if (myCreateClass) {
    if (unitTestMode) {
      try {
        JavaDirectoryService.getInstance().createClass(directory,lastName);
      }
 catch (      IncorrectOperationException e) {
        CreateFromUsageUtils.scheduleFileOrPackageCreationFailedMessageBox(e,lastName,directory,false);
      }
    }
 else {
      CreateFromUsageUtils.createClass(myCreateInterface ? CreateClassKind.INTERFACE : CreateClassKind.CLASS,directory,lastName,manager,myContext,null,mySuperClass);
    }
  }
 else {
    try {
      directory.createSubdirectory(lastName);
    }
 catch (    IncorrectOperationException e) {
      CreateFromUsageUtils.scheduleFileOrPackageCreationFailedMessageBox(e,lastName,directory,true);
    }
  }
}
