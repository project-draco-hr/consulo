{
  final List<FilePath> result=new LinkedList<FilePath>();
  ProjectLevelVcsManager manager=ProjectLevelVcsManager.getInstance(project);
  Arrays.sort(roots,FilePathComparator.getInstance());
  final Map<VcsKey,List<FilePath>> chains=new HashMap<VcsKey,List<FilePath>>();
  for (  FilePath root : roots) {
    final AbstractVcs vcs=manager.getVcsFor(root);
    if (vcs == null)     continue;
    if (vcs.allowsNestedRoots()) {
      result.add(root);
      continue;
    }
    if (pathsFilter != null && (!pathsFilter.convert(new Pair<FilePath,AbstractVcs>(root,vcs))))     continue;
    final List<FilePath> chain=chains.get(vcs.getKeyInstanceMethod());
    if (chain == null) {
      final LinkedList<FilePath> newList=new LinkedList<FilePath>();
      newList.add(root);
      chains.put(vcs.getKeyInstanceMethod(),newList);
    }
 else {
      boolean failed=false;
      for (      FilePath chainedPath : chain) {
        if (VfsUtil.isAncestor(chainedPath.getIOFile(),root.getIOFile(),false)) {
          failed=true;
          break;
        }
      }
      if (!failed) {
        chain.add(root);
      }
    }
  }
  for (  List<FilePath> filePaths : chains.values()) {
    result.addAll(filePaths);
  }
  return result.toArray(new FilePath[result.size()]);
}
