{
  final PsiManager psiManager=method.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final Iterable<PsiReference> calls=ReferencesSearch.search(method,scope);
  final String fullyQualifiedName=StringUtil.getQualifiedName(newPackageName,newClassName);
  for (  PsiReference reference : calls) {
    final PsiElement referenceElement=reference.getElement();
    final PsiElement parent=referenceElement.getParent();
    if (parent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression call=(PsiMethodCallExpression)parent;
      if (!isInMovedElement(call)) {
        usages.add(new RetargetStaticMethodCall(call,fullyQualifiedName));
      }
    }
 else     if (parent instanceof PsiImportStaticStatement) {
      final PsiJavaCodeReferenceElement importReference=((PsiImportStaticStatement)parent).getImportReference();
      if (importReference != null) {
        final PsiElement qualifier=importReference.getQualifier();
        if (qualifier instanceof PsiJavaCodeReferenceElement) {
          usages.add(new ReplaceClassReference((PsiJavaCodeReferenceElement)qualifier,fullyQualifiedName));
        }
      }
    }
  }
  usages.add(new RemoveMethod(method));
}
