{
  final PsiClass psiClass=buildClass();
  if (psiClass == null)   return;
  if (delegationRequired) {
    buildDelegate();
  }
  super.performRefactoring(usageInfos);
  if (myNewVisibility == null)   return;
  for (  PsiMethod method : methods) {
    final PsiMethod member=psiClass.findMethodBySignature(method,false);
    if (member != null) {
      VisibilityUtil.fixVisibility(usageInfos,member,myNewVisibility);
    }
  }
  for (  PsiField field : fields) {
    final PsiField member=psiClass.findFieldByName(field.getName(),false);
    if (member != null) {
      VisibilityUtil.fixVisibility(usageInfos,member,myNewVisibility);
    }
  }
}
