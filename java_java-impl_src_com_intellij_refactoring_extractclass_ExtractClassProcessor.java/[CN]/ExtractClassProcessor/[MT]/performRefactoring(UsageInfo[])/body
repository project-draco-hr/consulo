{
  final PsiClass psiClass=buildClass();
  if (psiClass == null)   return;
  if (delegationRequired) {
    buildDelegate();
  }
  final Set<PsiMember> members=new HashSet<PsiMember>();
  for (  PsiMethod method : methods) {
    final PsiMethod member=psiClass.findMethodBySignature(method,false);
    if (member != null) {
      members.add(member);
    }
  }
  for (  PsiField field : fields) {
    final PsiField member=psiClass.findFieldByName(field.getName(),false);
    if (member != null) {
      members.add(member);
      final PsiExpression initializer=member.getInitializer();
      if (initializer != null) {
        final boolean[] moveInitializerToConstructor=new boolean[1];
        initializer.accept(new JavaRecursiveElementWalkingVisitor(){
          @Override public void visitReferenceExpression(          PsiReferenceExpression expression){
            super.visitReferenceExpression(expression);
            final PsiElement resolved=expression.resolve();
            if (resolved instanceof PsiField && !members.contains(resolved)) {
              moveInitializerToConstructor[0]=true;
            }
          }
        }
);
        if (moveInitializerToConstructor[0]) {
          final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
          PsiMethod constructor;
          final PsiMethod[] constructors=psiClass.getConstructors();
          if (constructors.length == 0) {
            constructor=elementFactory.createConstructor();
            constructor.setName(psiClass.getName());
            constructor=(PsiMethod)psiClass.add(constructor);
          }
 else {
            constructor=constructors[0];
          }
          MoveInstanceMembersUtil.moveInitializerToConstructor(elementFactory,constructor,member);
        }
      }
    }
  }
  if (myGenerateAccessors) {
    final NecessaryAccessorsVisitor visitor=checkNecessaryGettersSetters4SourceClass();
    for (    PsiField field : visitor.getFieldsNeedingGetter()) {
      sourceClass.add(PropertyUtil.generateGetterPrototype(field));
    }
    for (    PsiField field : visitor.getFieldsNeedingSetter()) {
      sourceClass.add(PropertyUtil.generateSetterPrototype(field));
    }
  }
  super.performRefactoring(usageInfos);
  if (myNewVisibility == null)   return;
  for (  PsiMember member : members) {
    VisibilityUtil.fixVisibility(usageInfos,member,myNewVisibility);
  }
}
