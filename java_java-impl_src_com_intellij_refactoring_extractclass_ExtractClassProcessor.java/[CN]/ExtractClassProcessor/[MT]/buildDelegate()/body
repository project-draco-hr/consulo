{
  final PsiManager manager=sourceClass.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(manager.getProject());
  @NonNls final StringBuilder fieldBuffer=new StringBuilder();
  final String delegateVisibility=calculateDelegateVisibility();
  if (delegateVisibility.length() > 0)   fieldBuffer.append(delegateVisibility).append(' ');
  fieldBuffer.append("final ");
  final String fullyQualifiedName=StringUtil.getQualifiedName(newPackageName,newClassName);
  fieldBuffer.append(fullyQualifiedName);
  if (!typeParams.isEmpty()) {
    fieldBuffer.append('<');
    for (    PsiTypeParameter typeParameter : typeParams) {
      fieldBuffer.append(typeParameter.getName());
    }
    fieldBuffer.append('>');
  }
  fieldBuffer.append(' ');
  fieldBuffer.append(delegateFieldName);
  fieldBuffer.append(" = new ").append(fullyQualifiedName);
  if (!typeParams.isEmpty()) {
    fieldBuffer.append('<');
    for (    PsiTypeParameter typeParameter : typeParams) {
      fieldBuffer.append(typeParameter.getName());
    }
    fieldBuffer.append('>');
  }
  fieldBuffer.append('(');
  if (requiresBackpointer) {
    fieldBuffer.append("this");
  }
  fieldBuffer.append(");");
  try {
    final String fieldString=fieldBuffer.toString();
    final PsiField field=factory.createFieldFromText(fieldString,sourceClass);
    final PsiElement newField=sourceClass.add(field);
    codeStyleManager.reformat(JavaCodeStyleManager.getInstance(myProject).shortenClassReferences(newField));
  }
 catch (  IncorrectOperationException e) {
    logger.error(e);
  }
}
