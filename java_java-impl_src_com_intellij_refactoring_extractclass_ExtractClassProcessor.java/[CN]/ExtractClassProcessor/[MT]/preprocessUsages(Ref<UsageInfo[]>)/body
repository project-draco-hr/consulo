{
  final MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  myExtractEnumProcessor.findEnumConstantConflicts(refUsages);
  if (!DestinationFolderComboBox.isAccessible(myProject,sourceClass.getContainingFile().getVirtualFile(),myClass.getContainingFile().getContainingDirectory().getVirtualFile())) {
    conflicts.putValue(sourceClass,"Extracted class won't be accessible in " + RefactoringUIUtil.getDescription(sourceClass,true));
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      myClass.delete();
    }
  }
);
  final Project project=sourceClass.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass existingClass=JavaPsiFacade.getInstance(project).findClass(StringUtil.getQualifiedName(newPackageName,newClassName),scope);
  if (existingClass != null) {
    conflicts.putValue(existingClass,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("there.already.exists.a.class.with.the.chosen.name"));
  }
  if (!myGenerateAccessors) {
    calculateInitializersConflicts(conflicts);
    final NecessaryAccessorsVisitor visitor=checkNecessaryGettersSetters4ExtractedClass();
    final NecessaryAccessorsVisitor srcVisitor=checkNecessaryGettersSetters4SourceClass();
    final Set<PsiField> fieldsNeedingGetter=new LinkedHashSet<PsiField>();
    fieldsNeedingGetter.addAll(visitor.getFieldsNeedingGetter());
    fieldsNeedingGetter.addAll(srcVisitor.getFieldsNeedingGetter());
    for (    PsiField field : fieldsNeedingGetter) {
      conflicts.putValue(field,"Field \'" + field.getName() + "\' needs getter");
    }
    final Set<PsiField> fieldsNeedingSetter=new LinkedHashSet<PsiField>();
    fieldsNeedingSetter.addAll(visitor.getFieldsNeedingSetter());
    fieldsNeedingSetter.addAll(srcVisitor.getFieldsNeedingSetter());
    for (    PsiField field : fieldsNeedingSetter) {
      conflicts.putValue(field,"Field \'" + field.getName() + "\' needs setter");
    }
  }
  checkConflicts(refUsages,conflicts);
  return showConflicts(conflicts,refUsages.get());
}
