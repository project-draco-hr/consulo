{
  myNameSuggestions=nameSuggestions;
  if (InjectedLanguageFacadeImpl.isInInjectedLanguagePrefixSuffix(myElementToRename)) {
    return false;
  }
  final FileViewProvider fileViewProvider=myElementToRename.getContainingFile().getViewProvider();
  VirtualFile file=getTopLevelVirtualFile(fileViewProvider);
  SearchScope referencesSearchScope=getReferencesSearchScope(file);
  final Collection<PsiReference> refs=collectRefs(referencesSearchScope);
  addReferenceAtCaret(refs);
  for (  PsiReference ref : refs) {
    final PsiFile containingFile=ref.getElement().getContainingFile();
    if (notSameFile(file,containingFile)) {
      return false;
    }
  }
  final PsiElement scope=checkLocalScope();
  if (scope == null) {
    return false;
  }
  final PsiFile containingFile=scope.getContainingFile();
  if (containingFile == null) {
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,containingFile))   return true;
  myEditor.putUserData(INPLACE_RENAMER,this);
  ourRenamersStack.push(this);
  final List<Pair<PsiElement,TextRange>> stringUsages=new ArrayList<Pair<PsiElement,TextRange>>();
  collectAdditionalElementsToRename(stringUsages);
  return buildTemplateAndStart(refs,stringUsages,scope,containingFile);
}
