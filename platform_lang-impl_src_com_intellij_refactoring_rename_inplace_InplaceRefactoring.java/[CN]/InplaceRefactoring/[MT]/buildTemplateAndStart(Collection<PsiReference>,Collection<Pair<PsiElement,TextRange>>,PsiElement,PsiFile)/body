{
  final PsiElement context=InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile);
  myScope=context != null ? context.getContainingFile() : scope;
  final TemplateBuilderImpl builder=new TemplateBuilderImpl(myScope);
  PsiElement nameIdentifier=getNameIdentifier();
  int offset=myEditor.getCaretModel().getOffset();
  PsiElement selectedElement=getSelectedInEditorElement(nameIdentifier,refs,stringUsages,offset);
  if (nameIdentifier != null)   addVariable(nameIdentifier,selectedElement,builder);
  for (  PsiReference ref : refs) {
    addVariable(ref,selectedElement,builder,offset);
  }
  for (  Pair<PsiElement,TextRange> usage : stringUsages) {
    addVariable(usage.first,usage.second,selectedElement,builder);
  }
  addAdditionalVariables(builder);
  try {
    myMarkAction=startRename();
  }
 catch (  final StartMarkAction.AlreadyStartedException e) {
    final Document oldDocument=e.getDocument();
    if (oldDocument != myEditor.getDocument()) {
      final int exitCode=Messages.showOkCancelDialog(myProject,e.getMessage(),getCommandName(),"Navigate to continue","Cancel started",Messages.getErrorIcon());
      if (exitCode == -1)       return true;
      navigateToAlreadyStarted(oldDocument,exitCode);
      return true;
    }
 else {
      revertState();
      final TemplateState templateState=TemplateManagerImpl.getTemplateState(InjectedLanguageUtil.getTopLevelEditor(myEditor));
      if (templateState != null) {
        templateState.gotoEnd(true);
      }
    }
    return false;
  }
  beforeTemplateStart();
  new WriteCommandAction(myProject,getCommandName()){
    @Override protected void run(    com.intellij.openapi.application.Result result) throws Throwable {
      startTemplate(builder);
    }
  }
.execute();
  return true;
}
