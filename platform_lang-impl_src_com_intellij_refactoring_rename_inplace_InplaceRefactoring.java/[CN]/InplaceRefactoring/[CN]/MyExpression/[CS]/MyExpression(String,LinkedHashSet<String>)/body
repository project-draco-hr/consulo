{
  myName=name;
  if (names == null) {
    names=new LinkedHashSet<String>();
    for (    NameSuggestionProvider provider : Extensions.getExtensions(NameSuggestionProvider.EP_NAME)) {
      final SuggestedNameInfo suggestedNameInfo=provider.getSuggestedNames(myElementToRename,myElementToRename,names);
      if (suggestedNameInfo != null && provider instanceof PreferrableNameSuggestionProvider && !((PreferrableNameSuggestionProvider)provider).shouldCheckOthers())       break;
    }
  }
  myLookupItems=new LookupElement[names.size()];
  final Iterator<String> iterator=names.iterator();
  for (int i=0; i < myLookupItems.length; i++) {
    final String suggestion=iterator.next();
    myLookupItems[i]=LookupElementBuilder.create(suggestion).setInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        if (shouldSelectAll())         return;
        final Editor topLevelEditor=InjectedLanguageUtil.getTopLevelEditor(myEditor);
        final TemplateState templateState=TemplateManagerImpl.getTemplateState(topLevelEditor);
        if (templateState != null) {
          final TextRange range=templateState.getCurrentVariableRange();
          if (range != null) {
            topLevelEditor.getDocument().replaceString(range.getStartOffset(),range.getEndOffset(),suggestion);
          }
        }
      }
    }
);
  }
}
