{
  saveAll();
  final ChangeListManager changeManager=ChangeListManager.getInstance(project);
  final List<Change> changes=new ArrayList<Change>();
  final HashSet<VirtualFile> roots=new HashSet<VirtualFile>();
  for (  VirtualFile f : affectedFiles) {
    Change ch=changeManager.getChange(f);
    if (ch != null) {
      roots.add(GitUtil.getGitRoot(f));
      changes.add(ch);
    }
  }
  GitRollbackEnvironment re=GitRollbackEnvironment.getInstance(project);
  re.rollbackChanges(changes,exceptions,RollbackProgressListener.EMPTY);
  final RefreshSession session=RefreshQueue.getInstance().createSession(true,true,new Runnable(){
    public void run(){
      final VcsDirtyScopeManager mgr=VcsDirtyScopeManager.getInstance(project);
      mgr.filesDirty(null,roots);
    }
  }
);
  session.addAllFiles(roots);
  session.launch();
}
