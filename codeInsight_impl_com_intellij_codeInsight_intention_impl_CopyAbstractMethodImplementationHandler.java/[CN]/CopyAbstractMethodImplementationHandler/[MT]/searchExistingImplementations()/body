{
  mySourceClass=myMethod.getContainingClass();
  if (!mySourceClass.isValid())   return;
  for (  PsiClass inheritor : ClassInheritorsSearch.search(mySourceClass,mySourceClass.getUseScope(),true)) {
    if (!inheritor.isInterface()) {
      PsiMethod method=ImplementAbstractMethodAction.findExistingImplementation(inheritor,myMethod);
      if (method != null && !method.hasModifierProperty(PsiModifier.ABSTRACT)) {
        mySourceMethods.add(method);
      }
 else       if (method == null) {
        myTargetClasses.add(inheritor);
      }
    }
  }
  for (Iterator<PsiClass> targetClassIterator=myTargetClasses.iterator(); targetClassIterator.hasNext(); ) {
    PsiClass targetClass=targetClassIterator.next();
    if (containsAnySuperClass(targetClass)) {
      targetClassIterator.remove();
    }
  }
}
