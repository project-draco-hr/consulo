{
  ActionListener l=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      try {
        List<String> branchesAndTags=new ArrayList<String>();
        GitSimpleHandler branches=new GitSimpleHandler(myProject,gitRoot(),GitHandler.BRANCH);
        branches.setNoSSH(true);
        branches.setSilent(true);
        branches.addParameters("-a");
        for (        String line : branches.run().split("\n")) {
          if (line.length() == 0 || line.endsWith(GitBranch.NO_BRANCH_NAME)) {
            continue;
          }
          branchesAndTags.add(line.substring(2));
        }
        existingBranches.clear();
        existingBranches.addAll(branchesAndTags);
        Collections.sort(branchesAndTags);
        if (myIncludeTagsCheckBox.isSelected()) {
          int mark=branchesAndTags.size();
          GitSimpleHandler tags=new GitSimpleHandler(myProject,gitRoot(),GitHandler.TAG);
          tags.setNoSSH(true);
          tags.setSilent(true);
          tags.addParameters("-l");
          for (          String line : tags.run().split("\n")) {
            if (line.length() == 0) {
              continue;
            }
            branchesAndTags.add(line);
          }
          Collections.sort(branchesAndTags.subList(mark,branchesAndTags.size()));
        }
        myBranchToCkeckout.removeAllItems();
        for (        String item : branchesAndTags) {
          myBranchToCkeckout.addItem(item);
        }
        myBranchToCkeckout.setSelectedItem("");
      }
 catch (      VcsException ex) {
        GitVcs.getInstance(myProject).showErrors(Collections.singletonList(ex),GitBundle.getString("checkout.retriving.branches.and.tags"));
      }
    }
  }
;
  myGitRoot.addActionListener(l);
  l.actionPerformed(null);
  myIncludeTagsCheckBox.addActionListener(l);
}
