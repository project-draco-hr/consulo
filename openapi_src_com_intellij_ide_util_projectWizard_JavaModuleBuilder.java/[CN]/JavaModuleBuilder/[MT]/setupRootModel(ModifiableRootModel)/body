{
  rootModel.setExcludeOutput(true);
  if (myJdk != null) {
    rootModel.setJdk(myJdk);
  }
 else {
    rootModel.inheritJdk();
  }
  final String moduleRootPath=getContentEntryPath();
  if (moduleRootPath != null) {
    final LocalFileSystem lfs=LocalFileSystem.getInstance();
    VirtualFile moduleContentRoot=lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(moduleRootPath));
    if (moduleContentRoot != null) {
      final ContentEntry contentEntry=rootModel.addContentEntry(moduleContentRoot);
      final List<Pair<String,String>> sourcePaths=getSourcePaths();
      if (sourcePaths != null) {
        for (int idx=0; idx < sourcePaths.size(); idx++) {
          final Pair<String,String> sourcePath=sourcePaths.get(idx);
          final VirtualFile sourceRoot=lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(sourcePath.first));
          if (sourceRoot != null) {
            contentEntry.addSourceFolder(sourceRoot,false,sourcePath.second);
          }
        }
      }
    }
  }
  if (myCompilerOutputPath != null) {
    String canonicalPath;
    try {
      canonicalPath=new File(myCompilerOutputPath).getCanonicalPath();
    }
 catch (    IOException e) {
      canonicalPath=myCompilerOutputPath;
    }
    rootModel.setCompilerOutputPath(VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL,canonicalPath.replace(File.separatorChar,'/')));
  }
 else {
    rootModel.setCompilerOutputPath((VirtualFile)null);
  }
  LibraryTable libraryTable=rootModel.getModuleLibraryTable();
  for (int i=0; i < myModuleLibraries.size(); i++) {
    Pair<String,String> libInfo=myModuleLibraries.get(i);
    final String moduleLibraryPath=libInfo.first;
    final String sourceLibraryPath=libInfo.second;
    Library library=libraryTable.createLibrary();
    Library.ModifiableModel modifiableModel=library.getModifiableModel();
    modifiableModel.addRoot(VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(moduleLibraryPath)),OrderRootType.CLASSES);
    if (sourceLibraryPath != null) {
      modifiableModel.addRoot(VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(sourceLibraryPath)),OrderRootType.SOURCES);
    }
    modifiableModel.commit();
  }
}
