{
  if (refEntity == null)   return;
  final Set<QuickFix> localQuickFixes=getQuickFixActions().get(refEntity);
  final QuickFix[] fixes=problem.getFixes();
  if (isIgnoreProblem(fixes,localQuickFixes,idx)) {
    getProblemToElements().remove(problem);
    Map<RefEntity,CommonProblemDescriptor[]> problemElements=getProblemElements();
synchronized (lock) {
      CommonProblemDescriptor[] descriptors=problemElements.get(refEntity);
      if (descriptors != null) {
        ArrayList<CommonProblemDescriptor> newDescriptors=new ArrayList<CommonProblemDescriptor>(Arrays.asList(descriptors));
        newDescriptors.remove(problem);
        getQuickFixActions().put(refEntity,null);
        if (!newDescriptors.isEmpty()) {
          problemElements.put(refEntity,newDescriptors.toArray(new CommonProblemDescriptor[newDescriptors.size()]));
          for (          CommonProblemDescriptor descriptor : newDescriptors) {
            collectQuickFixes(descriptor.getFixes(),refEntity);
          }
        }
 else {
          ignoreProblemElement(refEntity);
        }
      }
    }
  }
}
