{
  myProject=project;
  myDependentBreakpointManager=dependentBreakpointManager;
  myStartupManager=(StartupManagerEx)startupManager;
  if (!myProject.isDefault()) {
    DocumentAdapter documentListener=new MyDocumentListener();
    EditorMouseAdapter editorMouseListener=new MyEditorMouseListener();
    EditorEventMulticaster editorEventMulticaster=EditorFactory.getInstance().getEventMulticaster();
    editorEventMulticaster.addDocumentListener(documentListener,project);
    editorEventMulticaster.addEditorMouseListener(editorMouseListener,project);
    final MyDependentBreakpointListener myDependentBreakpointListener=new MyDependentBreakpointListener();
    myDependentBreakpointManager.addListener(myDependentBreakpointListener);
    Disposer.register(project,new Disposable(){
      public void dispose(){
        myDependentBreakpointManager.removeListener(myDependentBreakpointListener);
      }
    }
);
    VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileUrlChangeAdapter(){
      @Override protected void fileUrlChanged(      String oldUrl,      String newUrl){
        for (        XLineBreakpointImpl breakpoint : myBreakpoints.keySet()) {
          final String url=breakpoint.getFileUrl();
          if (FileUtil.startsWith(url,oldUrl)) {
            breakpoint.setFileUrl(newUrl + url.substring(oldUrl.length()));
          }
        }
      }
    }
,project);
  }
  myBreakpointsUpdateQueue=new MergingUpdateQueue("XLine breakpoints",300,true,null,project);
  final EditorColorsManager colorsManager=EditorColorsManager.getInstance();
  if (colorsManager != null) {
    final MyEditorColorsListener myColorsSchemeListener=new MyEditorColorsListener();
    Disposer.register(project,new Disposable(){
      @Override public void dispose(){
        colorsManager.removeEditorColorsListener(myColorsSchemeListener);
      }
    }
);
    colorsManager.addEditorColorsListener(myColorsSchemeListener);
  }
}
