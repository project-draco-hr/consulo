{
  myProject=project;
  myDependentBreakpointManager=dependentBreakpointManager;
  myStartupManager=(StartupManagerEx)startupManager;
  if (!myProject.isDefault()) {
    DocumentAdapter documentListener=new MyDocumentListener();
    EditorMouseAdapter editorMouseListener=new MyEditorMouseListener();
    EditorEventMulticaster editorEventMulticaster=EditorFactory.getInstance().getEventMulticaster();
    editorEventMulticaster.addDocumentListener(documentListener,project);
    editorEventMulticaster.addEditorMouseListener(editorMouseListener,project);
    final MyDependentBreakpointListener myDependentBreakpointListener=new MyDependentBreakpointListener();
    myDependentBreakpointManager.addListener(myDependentBreakpointListener);
    Disposer.register(project,new Disposable(){
      public void dispose(){
        myDependentBreakpointManager.removeListener(myDependentBreakpointListener);
      }
    }
);
  }
  myBreakpointsUpdateQueue=new MergingUpdateQueue("XLine breakpoints",300,true,null,project);
  final EditorColorsManager colorsManager=EditorColorsManager.getInstance();
  if (colorsManager != null) {
    final MyEditorColorsListener myColorsSchemeListener=new MyEditorColorsListener();
    Disposer.register(project,new Disposable(){
      @Override public void dispose(){
        colorsManager.removeEditorColorsListener(myColorsSchemeListener);
      }
    }
);
    colorsManager.addEditorColorsListener(myColorsSchemeListener);
  }
}
