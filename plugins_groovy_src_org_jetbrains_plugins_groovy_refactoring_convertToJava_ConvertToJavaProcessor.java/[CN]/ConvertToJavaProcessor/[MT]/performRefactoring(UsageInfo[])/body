{
  final GeneratorClassNameProvider classNameProvider=new GeneratorClassNameProvider();
  final ClassGenerator classGenerator=new ClassGenerator(myProject,classNameProvider,new ClassItemGeneratorImpl(myProject));
  for (  GroovyFile file : myFiles) {
    final PsiClass[] classes=file.getClasses();
    StringBuilder builder=new StringBuilder();
    for (    PsiClass aClass : classes) {
      classGenerator.writeTypeDefinition(builder,aClass,true);
      builder.append('\n');
    }
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(file);
    LOG.assertTrue(document != null);
    document.setText(builder);
    PsiDocumentManager.getInstance(myProject).commitDocument(document);
    String fileName=getNewFileName(file);
    PsiElement newFile=file.setName(fileName);
    if (ApplicationManager.getApplication().isUnitTestMode())     return;
    if (!(newFile instanceof PsiJavaFile)) {
      LOG.info(".java is not assigned to java file type");
      return;
    }
    newFile=JavaCodeStyleManager.getInstance(myProject).shortenClassReferences(newFile);
    newFile=CodeStyleManager.getInstance(myProject).reformat(newFile);
    PsiClass[] inner=((PsiJavaFile)newFile).getClasses();
    for (    PsiClass psiClass : inner) {
      MoveClassToSeparateFileFix fix=new MoveClassToSeparateFileFix(psiClass);
      if (fix.isAvailable(myProject,null,(PsiFile)newFile)) {
        fix.invoke(myProject,null,(PsiFile)newFile);
      }
    }
  }
}
