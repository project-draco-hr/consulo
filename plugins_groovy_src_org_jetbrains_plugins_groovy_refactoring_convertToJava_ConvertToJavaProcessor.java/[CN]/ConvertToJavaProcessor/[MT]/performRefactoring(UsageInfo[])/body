{
  final GeneratorClassNameProvider classNameProvider=new GeneratorClassNameProvider();
  ExpressionContext context=new ExpressionContext(myProject,myFiles);
  final ClassGenerator classGenerator=new ClassGenerator(classNameProvider,new ClassItemGeneratorImpl(context));
  for (  GroovyFile file : myFiles) {
    final PsiClass[] classes=file.getClasses();
    StringBuilder builder=new StringBuilder();
    boolean first=true;
    for (    PsiClass aClass : classes) {
      classGenerator.writeTypeDefinition(builder,aClass,true,first);
      first=false;
      builder.append('\n');
    }
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(file);
    LOG.assertTrue(document != null);
    document.setText(builder.toString());
    PsiDocumentManager.getInstance(myProject).commitDocument(document);
    String fileName=getNewFileName(file);
    PsiElement newFile;
    try {
      newFile=file.setName(fileName);
    }
 catch (    final IncorrectOperationException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          Messages.showMessageDialog(myProject,e.getMessage(),RefactoringBundle.message("error.title"),Messages.getErrorIcon());
        }
      }
);
      return;
    }
    doPostProcessing(newFile);
  }
}
