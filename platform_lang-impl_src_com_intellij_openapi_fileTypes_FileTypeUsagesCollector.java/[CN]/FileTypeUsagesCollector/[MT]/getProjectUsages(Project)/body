{
  final Set<FileType> usedFileTypes=new HashSet<FileType>();
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  if (fileTypeManager == null) {
    throw new CollectUsagesException("Cannot get instance of FileTypeManager");
  }
  final FileType[] registeredFileTypes=fileTypeManager.getRegisteredFileTypes();
  for (  final FileType fileType : registeredFileTypes) {
    if (project.isDisposed()) {
      throw new CollectUsagesException("Project is disposed");
    }
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        FileBasedIndex.getInstance().processValues(FileTypeIndex.NAME,fileType,null,new FileBasedIndex.ValueProcessor<Void>(){
          @Override public boolean process(          VirtualFile file,          Void value){
            usedFileTypes.add(fileType);
            return false;
          }
        }
,GlobalSearchScope.projectScope(project));
      }
    }
);
  }
  usedFileTypes.add(UnknownFileType.INSTANCE);
  return ContainerUtil.map2Set(usedFileTypes,new NotNullFunction<FileType,UsageDescriptor>(){
    @NotNull @Override public UsageDescriptor fun(    FileType fileType){
      return new UsageDescriptor(fileType.getName(),1);
    }
  }
);
}
