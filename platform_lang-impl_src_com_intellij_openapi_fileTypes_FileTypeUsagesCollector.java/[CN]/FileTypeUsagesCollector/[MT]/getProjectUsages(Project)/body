{
  final Set<FileType> usedFileTypes=new HashSet<FileType>();
  final FileType[] registeredFileTypes=FileTypeManager.getInstance().getRegisteredFileTypes();
  for (  final FileType fileType : registeredFileTypes) {
    FileBasedIndex.getInstance().processValues(FileTypeIndex.NAME,fileType,null,new FileBasedIndex.ValueProcessor<Void>(){
      @Override public boolean process(      VirtualFile file,      Void value){
        usedFileTypes.add(fileType);
        return false;
      }
    }
,GlobalSearchScope.projectScope(project));
  }
  usedFileTypes.add(UnknownFileType.INSTANCE);
  return ContainerUtil.map2Set(usedFileTypes,new NotNullFunction<FileType,UsageDescriptor>(){
    @NotNull @Override public UsageDescriptor fun(    FileType fileType){
      return new UsageDescriptor(fileType.getName(),1);
    }
  }
);
}
