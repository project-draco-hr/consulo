{
  File ioFile=VfsUtil.virtualToIoFile(file);
  StringBuilder pathBuffer=new StringBuilder();
  final LogicalRoot logicalRoot=LogicalRootsManager.getLogicalRootsManager(project).findLogicalRoot(file);
  if (logicalRoot != null) {
    File base=VfsUtil.virtualToIoFile(logicalRoot.getVirtualFile());
    if (base.equals(ioFile)) {
      pathBuffer.append(file.getPath());
    }
 else {
      pathBuffer.append("/");
      pathBuffer.append(FileUtil.getRelativePath(base,ioFile));
    }
  }
  ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);
  ProjectFileIndex fileIndex=projectRootManager.getFileIndex();
  VirtualFile sourceRoot=fileIndex.getSourceRootForFile(file);
  if (sourceRoot != null) {
    File base=VfsUtil.virtualToIoFile(sourceRoot);
    if (base.equals(ioFile)) {
      pathBuffer.append(file.getPath());
    }
 else {
      pathBuffer.append("/");
      pathBuffer.append(FileUtil.getRelativePath(base,ioFile));
    }
  }
  VirtualFile root=fileIndex.getContentRootForFile(file);
  if (root != null) {
    File base=VfsUtil.virtualToIoFile(root);
    if (base.equals(ioFile)) {
      pathBuffer.append(file.getPath());
    }
 else {
      pathBuffer.append("/");
      pathBuffer.append(FileUtil.getRelativePath(base,ioFile));
    }
  }
 else {
    pathBuffer.append(file.getPath());
  }
  return FileUtil.toSystemIndependentName(pathBuffer.toString());
}
