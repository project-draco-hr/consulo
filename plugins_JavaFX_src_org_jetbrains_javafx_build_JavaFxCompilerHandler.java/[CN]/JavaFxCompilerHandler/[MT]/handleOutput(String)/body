{
  LOG.debug("Compiler output: " + output);
  final Pattern errorPattern=Pattern.compile("((?:[A-Z]:\\\\)?[\\.\\w\\\\/]*):(\\d*): (.*)");
  final String[] outputLines=output.split("[\\n\\r]");
  for (  String outputLine : outputLines) {
    if (StringUtil.isEmptyOrSpaces(outputLine)) {
      continue;
    }
    final Matcher matcher=errorPattern.matcher(outputLine);
    if (matcher.matches()) {
      final String file=matcher.group(1);
      final String line=matcher.group(2);
      String message=matcher.group(3);
      final String column="0";
      CompilerMessageCategory messageCategory=CompilerMessageCategory.ERROR;
      if (StringUtil.startsWith(message,"warning:")) {
        messageCategory=CompilerMessageCategory.WARNING;
        message=message.substring(9);
      }
      final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
      final VirtualFile virtualFile=LocalFileSystem.getInstance().findFileByPath(file);
      final VirtualFile relativeFile=VfsUtil.findRelativeFile(file,projectFileIndex.getSourceRootForFile(virtualFile));
      myContext.addMessage(messageCategory,message,relativeFile != null ? relativeFile.getUrl() : null,line != null ? Integer.parseInt(line) : 0,column != null ? Integer.parseInt(column) : 0);
      LOG.debug("Message: " + message);
    }
 else {
    }
  }
}
