{
  myProject=project;
  myFile=file;
  myEditor=editor;
  myDocument=myEditor.getDocument();
  if (!myFile.isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(myDocument,project)) {
      return;
    }
  }
  PsiDocumentManager.getInstance(project).commitDocument(myDocument);
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.comment.line");
  myCodeStyleManager=CodeStyleManager.getInstance(myProject);
  final SelectionModel selectionModel=myEditor.getSelectionModel();
  boolean hasSelection=selectionModel.hasSelection();
  myStartOffset=selectionModel.getSelectionStart();
  myEndOffset=selectionModel.getSelectionEnd();
  if (myDocument.getTextLength() == 0)   return;
  int lastLineEnd=myDocument.getLineEndOffset(myDocument.getLineNumber(myEndOffset));
  FoldRegion collapsedAt=((FoldingModelImpl)myEditor.getFoldingModel()).getCollapsedRegionAtOffset(lastLineEnd);
  if (collapsedAt != null) {
    myEndOffset=Math.max(myEndOffset,collapsedAt.getEndOffset());
  }
  boolean wholeLinesSelected=!hasSelection || (myStartOffset == myDocument.getLineStartOffset(myDocument.getLineNumber(myStartOffset)) && myEndOffset == myDocument.getLineEndOffset(myDocument.getLineNumber(myEndOffset - 1)) + 1);
  boolean startingNewLineComment=!hasSelection && isLineEmpty(myDocument.getLineNumber(myStartOffset)) && !Comparing.equal(IdeActions.ACTION_COMMENT_LINE,ActionManagerEx.getInstanceEx().getPrevPreformedActionId());
  doComment();
  if (startingNewLineComment) {
    final Commenter commenter=myCommenters[0];
    if (commenter != null) {
      String prefix=commenter.getLineCommentPrefix();
      if (prefix == null)       prefix=commenter.getBlockCommentPrefix();
      int lineStart=myDocument.getLineStartOffset(myLine1);
      lineStart=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),lineStart," \t");
      lineStart+=prefix.length();
      if (lineStart < myDocument.getTextLength() && myDocument.getCharsSequence().charAt(lineStart) == ' ')       lineStart++;
      editor.getCaretModel().moveToOffset(lineStart);
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
 else {
    if (!hasSelection) {
      editor.getCaretModel().moveCaretRelatively(0,1,false,false,true);
    }
 else {
      if (wholeLinesSelected) {
        selectionModel.setSelection(myStartOffset,selectionModel.getSelectionEnd());
      }
    }
  }
}
