{
  myLine1=myDocument.getLineNumber(myStartOffset);
  myLine2=myDocument.getLineNumber(myEndOffset);
  if (myLine2 > myLine1 && myDocument.getLineStartOffset(myLine2) == myEndOffset) {
    myLine2--;
  }
  myStartOffsets=new int[myLine2 - myLine1 + 1];
  myEndOffsets=new int[myLine2 - myLine1 + 1];
  myAllLineComments=true;
  CharSequence chars=myDocument.getCharsSequence();
  LineCommenter lineCommenter=customCommenters.get(myFile.getFileType());
  if (lineCommenter == null)   return;
  LineCommenter customCommenter=(LineCommenter)lineCommenter.clone();
  for (int line=myLine1; line <= myLine2; line++) {
    int offset1=getCommentStart(line,customCommenter);
    myStartOffsets[line - myLine1]=offset1;
    if (offset1 == -1) {
      myAllLineComments=false;
      break;
    }
    int offset=myDocument.getLineEndOffset(line) + ((DocumentEx)myDocument).getLineSeparatorLength(line);
    offset=CharArrayUtil.shiftBackward(chars,offset - 1,"\n\r") + 1;
    int offset2=customCommenter.getCommentEnd(offset,this);
    myEndOffsets[line - myLine1]=offset2;
    if (offset2 == -1) {
      myAllLineComments=false;
      break;
    }
  }
  if (!myAllLineComments) {
    new CommentPerformer(customCommenter).perform();
  }
 else {
    for (int line=myLine2; line >= myLine1; line--) {
      int offset1=myStartOffsets[line - myLine1];
      int offset2=myEndOffsets[line - myLine1];
      customCommenter.doUncomment(offset1,offset2,this);
    }
  }
}
