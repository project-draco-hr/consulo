{
  myLine1=myDocument.getLineNumber(myStartOffset);
  myLine2=myDocument.getLineNumber(myEndOffset);
  if (myLine2 > myLine1 && myDocument.getLineStartOffset(myLine2) == myEndOffset) {
    myLine2--;
  }
  myStartOffsets=new int[myLine2 - myLine1 + 1];
  myEndOffsets=new int[myLine2 - myLine1 + 1];
  myCommenters=new Commenter[myLine2 - myLine1 + 1];
  myAllLineComments=true;
  CharSequence chars=myDocument.getCharsSequence();
  for (int line=myLine1; line <= myLine2; line++) {
    final Commenter commenter=findCommenter(line);
    if (commenter == null)     return;
    if (commenter.getLineCommentPrefix() == null && (commenter.getBlockCommentPrefix() == null || commenter.getBlockCommentSuffix() == null))     return;
    myCommenters[line - myLine1]=commenter;
    if (!isLineCommented(line,chars,commenter)) {
      myAllLineComments=false;
      break;
    }
  }
  if (!myAllLineComments) {
    new CommentPerformer().perform();
  }
 else {
    for (int line=myLine2; line >= myLine1; line--) {
      int offset1=myStartOffsets[line - myLine1];
      int offset2=myEndOffsets[line - myLine1];
      Commenter commenter=myCommenters[line - myLine1];
      if (offset2 >= 0) {
        myDocument.deleteString(offset2 - commenter.getBlockCommentSuffix().length(),offset2);
      }
      if (offset1 >= 0) {
        myDocument.deleteString(offset1,offset1 + commenter.getBlockCommentPrefix().length());
      }
    }
  }
}
