{
  @NonNls ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  cw.visit(Opcodes.V1_1,Opcodes.ACC_PUBLIC,generatedClassName,null,"java/lang/Object",ArrayUtil.EMPTY_STRING_ARRAY);
  cw.visitField(Opcodes.ACC_PUBLIC,PreviewFormAction.PREVIEW_BINDING_FIELD,"Ljavax/swing/JComponent;",null,null);
  @NonNls MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"<init>","()V",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/Object","<init>","()V");
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  cw.visitEnd();
  ByteArrayInputStream bais=new ByteArrayInputStream(cw.toByteArray());
  AsmCodeGenerator acg=new AsmCodeGenerator(rootContainer,myLoader,this,true,new PsiClassWriter(myModule.getProject(),ClassWriter.COMPUTE_FRAMES));
  byte[] data=acg.patchClass(bais);
  FormErrorInfo[] errors=acg.getErrors();
  if (errors.length > 0) {
    throw new CodeGenerationException(errors[0].getComponentId(),errors[0].getErrorMessage());
  }
  FileOutputStream fos=new FileOutputStream(new File(myTempPath,generatedClassName + ".class"));
  try {
    fos.write(data);
  }
  finally {
    fos.close();
  }
}
