{
  if (isGapCell(container,isRow,index)) {
    g2d.setColor(Color.LIGHT_GRAY);
    g2d.fillRect(rc.x,rc.y,rc.width,rc.height);
  }
  FormLayout layout=(FormLayout)container.getLayout();
  FormSpec spec=isRow ? layout.getRowSpec(index + 1) : layout.getColumnSpec(index + 1);
  if (spec.getResizeWeight() > 0.01d) {
    drawGrowMarker(isRow,g2d,rc);
  }
  int[][] groups=isRow ? layout.getRowGroups() : layout.getColumnGroups();
  boolean haveTopLeft=false, haveTopRight=false, haveTopLine=false;
  boolean haveBottomLeft=false, haveBottomRight=false, haveBottomLine=false;
  for (int i=0; i < groups.length; i++) {
    int minMember=Integer.MAX_VALUE;
    int maxMember=-1;
    for (    int member : groups[i]) {
      minMember=Math.min(member - 1,minMember);
      maxMember=Math.max(member - 1,maxMember);
    }
    if (minMember <= index && index <= maxMember) {
      if (i % 2 == 0) {
        haveTopLeft=haveTopLeft || index > minMember;
        haveTopRight=haveTopRight || index < maxMember;
        haveTopLine=haveTopLine || index == minMember || index == maxMember;
      }
 else {
        haveBottomLeft=haveBottomLeft || index > minMember;
        haveBottomRight=haveBottomRight || index < maxMember;
        haveBottomLine=haveBottomLine || index == minMember || index == maxMember;
      }
    }
  }
  g2d.setColor(Color.BLUE);
  drawGroupLine(rc,isRow,g2d,true,haveTopLeft,haveTopRight,haveTopLine);
  drawGroupLine(rc,isRow,g2d,false,haveBottomLeft,haveBottomRight,haveBottomLine);
}
