{
  final GradleEntityId id=GradleEntityIdMapper.mapEntityToId(dependency);
  final Ref<GradleDependencyScopeChange> scopeChangeRef=new Ref<GradleDependencyScopeChange>();
  final Ref<GradleDependencyExportedChange> exportedChangeRef=new Ref<GradleDependencyExportedChange>();
  GradleProjectStructureChangeVisitor visitor=new GradleProjectStructureChangeVisitorAdapter(){
    @Override public void visit(    @NotNull GradleDependencyScopeChange change){
      if (id.equals(change.getEntityId())) {
        scopeChangeRef.set(change);
      }
    }
    @Override public void visit(    @NotNull GradleDependencyExportedChange change){
      if (id.equals(change.getEntityId())) {
        exportedChangeRef.set(change);
      }
    }
  }
;
  for (  GradleProjectStructureChange change : changes) {
    if (scopeChangeRef.get() != null && exportedChangeRef.get() != null) {
      break;
    }
    change.invite(visitor);
  }
  final GradleDependencyScopeChange scopeChange=scopeChangeRef.get();
  final GradleDependencyExportedChange exportedChange=exportedChangeRef.get();
  if (scopeChange == null && exportedChange == null) {
    return null;
  }
  MatrixControlBuilder builder=GradleUtil.getConflictChangeBuilder();
  if (scopeChange != null) {
    builder.addRow(GradleBundle.message("gradle.sync.change.dependency.scope.text"),scopeChange.getGradleValue(),scopeChange.getIdeValue());
  }
  if (exportedChange != null) {
    builder.addRow(GradleBundle.message("gradle.sync.change.dependency.exported.text"),exportedChange.getGradleValue(),exportedChange.getIdeValue());
  }
  return builder.build();
}
