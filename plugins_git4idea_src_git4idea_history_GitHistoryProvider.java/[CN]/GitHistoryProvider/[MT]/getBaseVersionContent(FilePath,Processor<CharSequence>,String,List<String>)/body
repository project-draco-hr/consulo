{
  if (StringUtil.isEmptyOrSpaces(beforeVersionId) || filePath.getVirtualFile() == null)   return false;
  final VirtualFile root=GitUtil.getGitRoot(filePath);
  if (root == null)   return false;
  final SHAHash shaHash=GitChangeUtils.commitExists(myProject,root,beforeVersionId,null,"HEAD");
  if (shaHash == null) {
    throw new VcsException("Can not apply patch to " + filePath.getPath() + ".\nCan not find revision '"+ beforeVersionId+ "'.");
  }
  final ContentRevision content=GitVcs.getInstance(myProject).getDiffProvider().createFileContent(new GitRevisionNumber(shaHash.getValue()),filePath.getVirtualFile());
  if (content == null) {
    throw new VcsException("Can not load content of '" + filePath.getPath() + "' for revision '"+ shaHash.getValue()+ "'");
  }
  return !processor.process(content.getContent());
}
