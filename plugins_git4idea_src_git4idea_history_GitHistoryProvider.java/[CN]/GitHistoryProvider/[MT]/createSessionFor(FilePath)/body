{
  if (filePath.isDirectory()) {
    return null;
  }
  List<VcsFileRevision> revisions=GitHistoryUtils.history(project,filePath);
  return new VcsAbstractHistorySession(revisions){
    @Nullable protected VcsRevisionNumber calcCurrentRevisionNumber(){
      try {
        return GitHistoryUtils.getCurrentRevision(project,GitHistoryUtils.getLastCommitName(project,filePath));
      }
 catch (      VcsException e) {
        if (log.isDebugEnabled()) {
          log.debug("Unable to retrieve the current revision number",e);
        }
        return null;
      }
    }
    public HistoryAsTreeProvider getHistoryAsTreeProvider(){
      return null;
    }
  }
;
}
