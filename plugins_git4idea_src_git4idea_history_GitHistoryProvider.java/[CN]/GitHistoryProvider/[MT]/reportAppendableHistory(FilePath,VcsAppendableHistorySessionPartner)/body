{
  final VcsAbstractHistorySession emptySession=new VcsAbstractHistorySession(Collections.<VcsFileRevision>emptyList()){
    @Nullable protected VcsRevisionNumber calcCurrentRevisionNumber(){
      try {
        return GitHistoryUtils.getCurrentRevision(project,GitHistoryUtils.getLastCommitName(project,path));
      }
 catch (      VcsException e) {
        if (log.isDebugEnabled()) {
          log.debug("Unable to retrieve the current revision number",e);
        }
        return null;
      }
    }
    public HistoryAsTreeProvider getHistoryAsTreeProvider(){
      return null;
    }
  }
;
  partner.reportCreatedEmptySession(emptySession);
  GitHistoryUtils.history(project,path,new Consumer<GitFileRevision>(){
    public void consume(    GitFileRevision gitFileRevision){
      partner.acceptRevision(gitFileRevision);
    }
  }
,new Consumer<VcsException>(){
    public void consume(    VcsException e){
      partner.reportException(e);
    }
  }
);
}
