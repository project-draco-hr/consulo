{
  myFile=file;
  myHolder=holder;
  boolean success=true;
  try {
    myLanguageLevel=PsiUtil.getLanguageLevel(file);
    myJavaSdkVersion=ObjectUtils.notNull(JavaVersionService.getInstance().getJavaSdkVersion(file),JavaSdkVersion.fromLanguageLevel(myLanguageLevel));
    if (updateWholeFile) {
      Project project=file.getProject();
      DaemonCodeAnalyzerEx daemonCodeAnalyzer=DaemonCodeAnalyzerEx.getInstanceEx(project);
      FileStatusMap fileStatusMap=daemonCodeAnalyzer.getFileStatusMap();
      ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      if (indicator == null)       throw new IllegalStateException("Must be run under progress");
      RefCountHolder refCountHolder=RefCountHolder.startUsing(file,indicator);
      myRefCountHolder=refCountHolder;
      Document document=PsiDocumentManager.getInstance(project).getDocument(file);
      TextRange dirtyScope=document == null ? file.getTextRange() : fileStatusMap.getFileDirtyScope(document,Pass.UPDATE_ALL);
      success=refCountHolder.analyze(file,dirtyScope,action,indicator);
    }
 else {
      myRefCountHolder=null;
      action.run();
    }
  }
  finally {
    myUninitializedVarProblems.clear();
    myFinalVarProblems.clear();
    mySingleImportedClasses.clear();
    mySingleImportedFields.clear();
    myReassignedParameters.clear();
    myRefCountHolder=null;
    myFile=null;
    myHolder=null;
    myDuplicateMethods.clear();
  }
  return success;
}
