{
  TextAttributesScheme colorsScheme=myHolder.getColorsScheme();
  PsiElement parent=identifier.getParent();
  if (parent instanceof PsiVariable) {
    PsiVariable variable=(PsiVariable)parent;
    myHolder.add(HighlightUtil.checkVariableAlreadyDefined(variable));
    if (variable.getInitializer() == null) {
      final PsiElement child=variable.getLastChild();
      if (child instanceof PsiErrorElement && child.getPrevSibling() == identifier)       return;
    }
    boolean isMethodParameter=variable instanceof PsiParameter && ((PsiParameter)variable).getDeclarationScope() instanceof PsiMethod;
    if (!isMethodParameter) {
      if (HighlightControlFlowUtil.isReassigned(variable,myFinalVarProblems)) {
        myHolder.add(HighlightNamesUtil.highlightReassignedVariable(variable,identifier));
      }
 else {
        myHolder.add(HighlightNamesUtil.highlightVariableName(variable,identifier,colorsScheme));
      }
    }
 else {
      myReassignedParameters.put((PsiParameter)variable,1);
    }
    myHolder.add(HighlightUtil.checkUnderscore(identifier,variable));
  }
 else   if (parent instanceof PsiClass) {
    PsiClass aClass=(PsiClass)parent;
    if (aClass.isAnnotationType()) {
      myHolder.add(HighlightUtil.checkAnnotationFeature(identifier,myLanguageLevel,myFile));
    }
    myHolder.add(HighlightClassUtil.checkClassAlreadyImported(aClass,identifier));
    if (!(parent instanceof PsiAnonymousClass) && aClass.getNameIdentifier() == identifier) {
      myHolder.add(HighlightNamesUtil.highlightClassName(aClass,identifier,colorsScheme));
    }
  }
 else   if (parent instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)parent;
    if (method.isConstructor()) {
      myHolder.add(HighlightMethodUtil.checkConstructorName(method));
    }
    myHolder.add(HighlightNamesUtil.highlightMethodName(method,identifier,true,colorsScheme));
  }
 else {
    visitParentReference(parent);
  }
  super.visitIdentifier(identifier);
}
