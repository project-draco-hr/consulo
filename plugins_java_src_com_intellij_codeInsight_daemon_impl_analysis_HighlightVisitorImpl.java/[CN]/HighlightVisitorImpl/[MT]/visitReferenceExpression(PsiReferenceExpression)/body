{
  JavaResolveResult resultForIncompleteCode=doVisitReferenceElement(expression);
  if (!myHolder.hasErrorResults()) {
    visitExpression(expression);
    if (myHolder.hasErrorResults())     return;
  }
  JavaResolveResult result;
  JavaResolveResult[] results;
  try {
    if (expression instanceof PsiReferenceExpressionImpl) {
      PsiReferenceExpressionImpl referenceExpression=(PsiReferenceExpressionImpl)expression;
      results=JavaResolveUtil.resolveWithContainingFile(referenceExpression,PsiReferenceExpressionImpl.OurGenericsResolver.INSTANCE,true,true,myFile);
    }
 else {
      results=expression.multiResolve(true);
    }
    result=results.length == 1 ? results[0] : JavaResolveResult.EMPTY;
  }
 catch (  IndexNotReadyException e) {
    return;
  }
  PsiElement resolved=result.getElement();
  if (resolved instanceof PsiVariable && resolved.getContainingFile() == expression.getContainingFile()) {
    if (!myHolder.hasErrorResults()) {
      try {
        myHolder.add(HighlightControlFlowUtil.checkVariableInitializedBeforeUsage(expression,(PsiVariable)resolved,myUninitializedVarProblems,myFile));
      }
 catch (      IndexNotReadyException ignored) {
      }
    }
    PsiVariable variable=(PsiVariable)resolved;
    boolean isFinal=variable.hasModifierProperty(PsiModifier.FINAL);
    if (isFinal && !variable.hasInitializer()) {
      if (!myHolder.hasErrorResults()) {
        myHolder.add(HighlightControlFlowUtil.checkFinalVariableMightAlreadyHaveBeenAssignedTo(variable,expression,myFinalVarProblems));
      }
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightControlFlowUtil.checkFinalVariableInitializedInLoop(expression,resolved));
    }
  }
  PsiElement parent=expression.getParent();
  if (parent instanceof PsiMethodCallExpression && ((PsiMethodCallExpression)parent).getMethodExpression() == expression && (!result.isAccessible() || !result.isStaticsScopeCorrect())) {
    PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)parent;
    PsiExpressionList list=methodCallExpression.getArgumentList();
    if (!HighlightMethodUtil.isDummyConstructorCall(methodCallExpression,myResolveHelper,list,expression)) {
      try {
        HighlightInfo info=HighlightMethodUtil.checkAmbiguousMethodCall(expression,results,list,resolved,result,methodCallExpression,myResolveHelper);
        myHolder.add(info);
      }
 catch (      IndexNotReadyException ignored) {
      }
    }
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkExpressionRequired(expression,resultForIncompleteCode));
  if (!myHolder.hasErrorResults() && resolved instanceof PsiField) {
    try {
      myHolder.add(HighlightUtil.checkIllegalForwardReferenceToField(expression,(PsiField)resolved));
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightMethodUtil.checkConstructorCallMustBeFirstStatement(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkAccessStaticFieldFromEnumConstructor(expression,result));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkClassReferenceAfterQualifier(expression,resolved));
}
