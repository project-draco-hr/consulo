{
  return new GroovyMethodCallPattern().with(new PatternCondition<GrCallExpression>("methodCall"){
    public boolean accepts(    @NotNull GrCallExpression callExpression,    ProcessingContext context){
      if (!(callExpression instanceof GrMethodCall))       return false;
      GrExpression expression=((GrMethodCall)callExpression).getInvokedExpression();
      if (!(expression instanceof GrReferenceExpression))       return false;
      GrReferenceExpression refExpression=(GrReferenceExpression)expression;
      if (!names.accepts(refExpression.getName(),context))       return false;
      for (      GroovyResolveResult result : refExpression.multiResolve(false)) {
        PsiElement element=result.getElement();
        if (element instanceof PsiMethod) {
          PsiClass containingClass=((PsiMethod)element).getContainingClass();
          if (containingClass != null) {
            if (InheritanceUtil.isInheritor(containingClass,className)) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }
);
}
