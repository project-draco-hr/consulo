{
  return new GroovyMethodCallPattern().with(new PatternCondition<GrCallExpression>("methodCall"){
    public boolean accepts(    @NotNull GrCallExpression callExpression,    ProcessingContext context){
      if (!(callExpression instanceof GrMethodCall))       return false;
      GrExpression expression=((GrMethodCall)callExpression).getInvokedExpression();
      if (!(expression instanceof GrReferenceExpression))       return false;
      GrReferenceExpression refExpression=(GrReferenceExpression)expression;
      if (!names.accepts(refExpression.getName(),context))       return false;
      PsiElement element=refExpression.resolve();
      if (!(element instanceof PsiMethod))       return false;
      PsiClass containingClass=((PsiMethod)element).getContainingClass();
      if (containingClass == null)       return false;
      return InheritanceUtil.isInheritor(containingClass,className);
    }
  }
);
}
