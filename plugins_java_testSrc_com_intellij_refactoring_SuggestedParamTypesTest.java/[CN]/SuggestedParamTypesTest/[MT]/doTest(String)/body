{
  configureByFile(BASE_PATH + getTestName(false) + ".java");
  final Editor editor=getEditor();
  final PsiFile file=getFile();
  final Project project=getProject();
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiElement[] elements;
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
  }
  assertTrue(elements.length > 0);
  final ExtractMethodProcessor processor=new ExtractMethodProcessor(project,editor,elements,null,"Extract Method","newMethod",null);
  processor.prepare();
  for (  final VariableData data : processor.getInputVariables().getInputVariables()) {
    final PsiExpression[] occurrences=ParameterTablePanel.findVariableOccurrences(elements,data.variable);
    final TypeSelectorManager manager=new TypeSelectorManagerImpl(project,data.type,occurrences,true){
      @Override protected boolean isUsedAfter(){
        return processor.isOutputVariable(data.variable);
      }
    }
;
    final JComponent component=manager.getTypeSelector().getComponent();
    if (types.length > 1) {
      assertTrue("One type suggested",component instanceof JComboBox);
      final DefaultComboBoxModel model=(DefaultComboBoxModel)((JComboBox)component).getModel();
      assertEquals(types.length,model.getSize());
      for (int i=0, typesLength=types.length; i < typesLength; i++) {
        String type=types[i];
        assertEquals(type,model.getElementAt(i).toString());
      }
    }
 else     if (types.length == 1) {
      assertTrue("Multiple types suggested",component instanceof JLabel);
      assertEquals(types[0],((JLabel)component).getText());
    }
  }
}
