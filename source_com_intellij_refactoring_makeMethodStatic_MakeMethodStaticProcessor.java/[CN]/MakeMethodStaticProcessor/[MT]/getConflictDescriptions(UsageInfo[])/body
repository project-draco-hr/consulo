{
  ArrayList<String> conflicts=new ArrayList<String>();
  HashSet<PsiElement> processed=new HashSet<PsiElement>();
  for (int i=0; i < usages.length; i++) {
    UsageInfo usageInfo=usages[i];
    if (usageInfo instanceof InternalUsageInfo && !(usageInfo instanceof SelfUsageInfo)) {
      PsiElement referencedElement=((InternalUsageInfo)usageInfo).getReferencedElement();
      if (!mySettings.isMakeClassParameter()) {
        if (referencedElement instanceof PsiModifierListOwner) {
          if (((PsiModifierListOwner)referencedElement).hasModifierProperty(PsiModifier.STATIC)) {
            continue;
          }
        }
        if (processed.contains(referencedElement))         continue;
        processed.add(referencedElement);
        if (referencedElement instanceof PsiField) {
          PsiField field=(PsiField)referencedElement;
          if (mySettings.getNameForField(field) == null) {
            String message="Method uses non-static " + ConflictsUtil.getDescription(field,true) + ", which is not passed as a parameter";
            conflicts.add(message);
          }
        }
 else {
          String message="Method uses " + ConflictsUtil.getDescription(referencedElement,true) + ", which needs class instance.";
          conflicts.add(message);
        }
      }
    }
    if (usageInfo instanceof OverridingMethodUsageInfo) {
      final PsiMethod overridingMethod=((PsiMethod)usageInfo.getElement());
      String message="Method " + ConflictsUtil.getDescription(myMethod,false) + " is overriden by "+ ConflictsUtil.getDescription(overridingMethod,true)+ ".";
      conflicts.add(message);
    }
 else {
      PsiElement element=usageInfo.getElement();
      PsiElement container=ConflictsUtil.getContainer(element);
      if (processed.contains(container))       continue;
      processed.add(container);
      List fieldParameters=mySettings.getParameterOrderList();
      ArrayList<PsiField> inaccessible=new ArrayList<PsiField>();
      for (Iterator iterator=fieldParameters.iterator(); iterator.hasNext(); ) {
        Settings.FieldParameter fieldParameter=(Settings.FieldParameter)iterator.next();
        if (!PsiUtil.isAccessible(fieldParameter.field,element,null)) {
          inaccessible.add(fieldParameter.field);
        }
      }
      if (inaccessible.isEmpty())       continue;
      conflicts.add(createInaccessibleFieldsConflictDescription(inaccessible,container));
    }
  }
  return conflicts.toArray(new String[0]);
}
