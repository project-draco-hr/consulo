{
  ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiManager manager=myMethod.getManager();
  PsiSearchHelper helper=manager.getSearchHelper();
  if (mySettings.isReplaceUsages()) {
    PsiReference[] refs=helper.findReferences(myMethod,GlobalSearchScope.projectScope(myProject),true);
    for (int i=0; i < refs.length; i++) {
      PsiElement ref=refs[i].getElement();
      PsiElement qualifier=null;
      if (ref instanceof PsiReferenceExpression) {
        qualifier=((PsiReferenceExpression)ref).getQualifierExpression();
        if (qualifier instanceof PsiThisExpression)         qualifier=null;
      }
      if (!PsiTreeUtil.isAncestor(myMethod,ref,true) || qualifier != null) {
        result.add(new UsageInfo(ref));
      }
    }
  }
  final PsiMethod[] overridingMethods=helper.findOverridingMethods(myMethod,GlobalSearchScope.allScope(myProject),false);
  for (int i=0; i < overridingMethods.length; i++) {
    PsiMethod overridingMethod=overridingMethods[i];
    if (overridingMethod != myMethod) {
      result.add(new OverridingMethodUsageInfo(overridingMethod));
    }
  }
  UsageInfo[] externalUsages=result.toArray(new UsageInfo[0]);
  UsageInfo[] internalUsages;
  internalUsages=MakeMethodStaticUtil.findClassRefsInMethod(myMethod,true);
  UsageInfo[] resultArray=ArrayUtil.mergeArrays(internalUsages,externalUsages,UsageInfo.class);
  return resultArray;
}
