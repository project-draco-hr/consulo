{
  final String url=myFile.getUrl();
  for (  LocalFileFinder finder : LocalFileFinder.EP_NAME.getExtensions()) {
    final VirtualFile file=finder.findLocalFile(url,myProject);
    if (file != null) {
      navigateToFile(myProject,file);
    }
  }
  final Collection<VirtualFile> files=FilenameIndex.getVirtualFilesByName(myProject,myFile.getName(),GlobalSearchScope.allScope(myProject));
  if (files.isEmpty()) {
    Messages.showErrorDialog(myProject,"Cannot find local file for '" + url + "'",CommonBundle.getErrorTitle());
    return;
  }
  if (files.size() == 1) {
    navigateToFile(myProject,ContainerUtil.getFirstItem(files,null));
  }
 else {
    final JList list=new JList(files.toArray(new VirtualFile[files.size()]));
    list.setCellRenderer(new ColoredListCellRenderer(){
      @Override protected void customizeCellRenderer(      JList list,      Object value,      int index,      boolean selected,      boolean hasFocus){
        CellAppearanceUtils.forVirtualFile((VirtualFile)value).customize(this);
      }
    }
);
    new PopupChooserBuilder(list).setTitle("Select Target File").setMovable(true).setItemChoosenCallback(new Runnable(){
      public void run(){
        for (        Object value : list.getSelectedValues()) {
          navigateToFile(myProject,(VirtualFile)value);
        }
      }
    }
).createPopup().showUnderneathOf(e.getInputEvent().getComponent());
  }
}
