{
  final Map<DebuggerSession,Map<String,HotSwapFile>> result=new java.util.HashMap<DebuggerSession,Map<String,HotSwapFile>>();
  List<Pair<DebuggerSession,Long>> sessionWithStamps=new ArrayList<Pair<DebuggerSession,Long>>();
  for (  DebuggerSession session : sessions) {
    sessionWithStamps.add(new Pair<DebuggerSession,Long>(session,getInstance(session.getProject()).getTimeStamp(session)));
  }
  for (  Map.Entry<String,List<String>> entry : generatedPaths.entrySet()) {
    final File root=new File(entry.getKey());
    for (    String relativePath : entry.getValue()) {
      if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.endsWith(relativePath,CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(relativePath,CLASS_EXTENSION)) {
        final String qualifiedName=relativePath.substring(0,relativePath.length() - CLASS_EXTENSION.length()).replace('/','.');
        final HotSwapFile hotswapFile=new HotSwapFile(new File(root,relativePath));
        final long fileStamp=hotswapFile.file.lastModified();
        for (        Pair<DebuggerSession,Long> pair : sessionWithStamps) {
          final DebuggerSession session=pair.first;
          if (fileStamp > pair.second) {
            Map<String,HotSwapFile> container=result.get(session);
            if (container == null) {
              container=new java.util.HashMap<String,HotSwapFile>();
              result.put(session,container);
            }
            container.put(qualifiedName,hotswapFile);
          }
        }
      }
    }
  }
  return result;
}
