{
  final PsiElement position=parameters.getPosition();
  final PsiMethod positionMethod=PsiTreeUtil.getParentOfType(position,PsiMethod.class,false);
  final ElementFilter filter=JavaCompletionUtil.recursionFilter(position);
  final PsiMethodCallExpression expression=PsiTreeUtil.getParentOfType(position,PsiMethodCallExpression.class,true,PsiClass.class);
  final PsiReferenceExpression reference=expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position,PsiReferenceExpression.class);
  return sorter.weighAfter("local",new LookupElementWeigher("recursion"){
    @NotNull @Override public Comparable weigh(    @NotNull LookupElement element){
      final Object object=element.getObject();
      if (!(object instanceof PsiMethod || object instanceof PsiVariable || object instanceof PsiExpression))       return Result.normal;
      if (filter != null && !filter.isAcceptable(object,position)) {
        return Result.recursive;
      }
      if (reference == null)       return Result.normal;
      final PsiExpression qualifier=reference.getQualifierExpression();
      boolean isDelegate=qualifier != null && !(qualifier instanceof PsiThisExpression);
      if (isPassingObjectToItself(object,qualifier,isDelegate)) {
        return Result.passingObjectToItself;
      }
      if (expression != null && positionMethod != null) {
        if (expectedInfos != null) {
          final PsiType itemType=JavaCompletionUtil.getLookupElementType(element);
          if (itemType != null) {
            for (            final ExpectedTypeInfo expectedInfo : expectedInfos) {
              if (positionMethod.equals(expectedInfo.getCalledMethod()) && expectedInfo.getType().isAssignableFrom(itemType)) {
                return isDelegate ? Result.delegation : Result.recursive;
              }
            }
          }
        }
        return Result.normal;
      }
      if (object instanceof PsiMethod && positionMethod != null) {
        final PsiMethod method=(PsiMethod)object;
        if (PsiTreeUtil.isAncestor(reference,position,false) && Comparing.equal(method.getName(),positionMethod.getName())) {
          if (!isDelegate && findDeepestSuper(method).equals(findDeepestSuper(positionMethod))) {
            return Result.recursive;
          }
          return Result.delegation;
        }
      }
      return Result.normal;
    }
    private boolean isPassingObjectToItself(    Object object,    PsiExpression qualifier,    boolean delegate){
      if (object instanceof PsiThisExpression) {
        return !delegate || qualifier instanceof PsiSuperExpression;
      }
      return qualifier instanceof PsiReferenceExpression && object.equals(((PsiReferenceExpression)qualifier).advancedResolve(true).getElement());
    }
    @NotNull private PsiMethod findDeepestSuper(    @NotNull final PsiMethod method){
      final PsiMethod first=DeepestSuperMethodsSearch.search(method).findFirst();
      return first == null ? method : first;
    }
  }
);
}
