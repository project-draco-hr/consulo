{
  if (isQuickFixOnReadOnlyFile(descriptor))   return;
  try {
    final PsiElement fieldName=descriptor.getPsiElement();
    final PsiField field=(PsiField)fieldName.getParent();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final PsiElementFactory factory=psiManager.getElementFactory();
    final PsiModifierList modifiers=field.getModifierList();
    final PsiType type=field.getType();
    final String name=field.getName();
    final PsiClass containingClass=field.getContainingClass();
    final String newFieldText=modifiers.getText() + ' ' + type.getPresentableText()+ ' '+ name+ '='+ getDefaultValue(type)+ ';';
    final PsiField newField=factory.createFieldFromText(newFieldText,containingClass);
    final CodeStyleManager styleManager=psiManager.getCodeStyleManager();
    final PsiElement replacedField=field.replace(newField);
    styleManager.reformat(replacedField);
  }
 catch (  IncorrectOperationException e) {
    final Class aClass=getClass();
    final String className=aClass.getName();
    final Logger logger=Logger.getInstance(className);
    logger.error(e);
  }
}
