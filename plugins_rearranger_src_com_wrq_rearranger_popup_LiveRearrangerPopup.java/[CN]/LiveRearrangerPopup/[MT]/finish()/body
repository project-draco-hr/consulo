{
  LOG.debug("entered finish() on thread " + Thread.currentThread().getName());
  outerPanel.removeWindowFocusListener(windowFocusListener);
  if (outerPanelFocusOwner != null) {
    outerPanelFocusOwner.removeMouseListener(ma2);
  }
  outerPanel.removeWindowListener(windowAdapter);
  outerPanel.removeMouseListener(mouseAdapter);
  outerPanel.removeFocusListener(focusAdapter);
  popup.hide();
  KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyEventDispatcher);
  if (!rearrangementOccurred) {
    LOG.debug("no rearrangement occurred, not rearranging document");
    LiveRearrangerActionHandler.setInProgress(false);
    return;
  }
  LOG.debug("rearranging document");
  final Runnable task=new Runnable(){
    public void run(){
      if (document != null) {
        final Emitter e=new Emitter(psiFile,resultRuleInstances,document);
        e.emitRearrangedDocument();
      }
    }
  }
;
  final Application application=ApplicationManager.getApplication();
  application.runWriteAction(new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(project,task,"Rearrange",null);
    }
  }
);
  LiveRearrangerActionHandler.setInProgress(false);
  LOG.debug("exit finish() on thread " + Thread.currentThread().getName());
}
