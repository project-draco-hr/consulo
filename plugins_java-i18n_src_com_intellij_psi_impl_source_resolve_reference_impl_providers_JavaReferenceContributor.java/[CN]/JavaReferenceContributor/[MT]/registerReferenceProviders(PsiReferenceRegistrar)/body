{
  final Project project=registrar.getProject();
  if (project == null)   return;
  final JavaClassListReferenceProvider classListProvider=new JavaClassListReferenceProvider(project);
  registrar.registerReferenceProvider(xmlAttributeValue(),classListProvider,PsiReferenceRegistrar.LOWER_PRIORITY);
  registrar.registerReferenceProvider(xmlTag(),classListProvider,PsiReferenceRegistrar.LOWER_PRIORITY);
  final PsiReferenceProvider filePathReferenceProvider=new FilePathReferenceProvider();
  registrar.registerReferenceProvider(PlatformPatterns.psiElement(PsiLiteralExpression.class).and(new FilterPattern(new ElementFilter(){
    public boolean isAcceptable(    Object element,    PsiElement context){
      PsiLiteralExpression literalExpression=(PsiLiteralExpression)context;
      final Map<String,Object> annotationParams=new HashMap<String,Object>();
      annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER,null);
      return !JavaI18nUtil.mustBePropertyKey(literalExpression,annotationParams);
    }
    public boolean isClassAcceptable(    Class hintClass){
      return true;
    }
  }
)),filePathReferenceProvider);
}
