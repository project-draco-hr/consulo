{
  if (e == null)   return EMPTY_ARRAY;
  final Project project=e.getProject();
  if (project == null)   return EMPTY_ARRAY;
  final Collection<String> filePaths=TestHistoryConfiguration.getInstance(project).getFiles();
  final File testHistoryRoot=TestStateStorage.getTestHistoryRoot(project);
  final List<File> fileNames=ContainerUtil.map(filePaths,new Function<String,File>(){
    @Override public File fun(    String fileName){
      return new File(testHistoryRoot,fileName);
    }
  }
);
  Collections.sort(fileNames,new Comparator<File>(){
    @Override public int compare(    File f1,    File f2){
      return f1.lastModified() > f2.lastModified() ? -1 : 1;
    }
  }
);
  final int historySize=fileNames.size();
  final AnAction[] actions=new AnAction[historySize + 2];
  for (int i=0; i < historySize; i++) {
    actions[i]=new ImportTestsFromHistoryAction(myProperties,project,fileNames.get(i).getName());
  }
  actions[historySize]=AnSeparator.getInstance();
  actions[historySize + 1]=new ImportTestsFromFileAction(myProperties);
  return actions;
}
