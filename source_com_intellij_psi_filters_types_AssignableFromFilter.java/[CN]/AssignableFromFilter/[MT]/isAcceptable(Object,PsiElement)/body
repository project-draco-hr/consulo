{
  PsiType type=myType;
  if (type == null) {
    final PsiClass aClass=context.getManager().findClass(myClassName,context.getResolveScope());
    type=aClass != null ? new PsiImmediateClassType(aClass,PsiSubstitutor.EMPTY) : null;
  }
  if (type == null)   return false;
  if (element == null)   return false;
  if (element instanceof PsiType)   return type.isAssignableFrom((PsiType)element);
  PsiSubstitutor substitutor=null;
  if (element instanceof CandidateInfo) {
    final CandidateInfo info=(CandidateInfo)element;
    substitutor=info.getSubstitutor();
    element=info.getElement();
  }
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiTypeParameter[] parameters=method.getTypeParameters();
    for (    final PsiTypeParameter parameter : parameters) {
      PsiType returnType=method.getReturnType();
      if (substitutor != null)       returnType=substitutor.substitute(returnType);
      final PsiType substitutionForParameter=method.getManager().getResolveHelper().getSubstitutionForTypeParameter(parameter,returnType,type,false,PsiUtil.getLanguageLevel(context));
      if (substitutionForParameter != PsiType.NULL) {
        return true;
      }
    }
  }
  final PsiType typeByElement=FilterUtil.getTypeByElement((PsiElement)element,context);
  if (substitutor != null)   return type.isAssignableFrom(substitutor.substitute(typeByElement));
  if (typeByElement == null) {
    return false;
  }
  return type.isAssignableFrom(typeByElement);
}
