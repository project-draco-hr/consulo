{
  super(sourceClass.getProject(),true);
  setModal(true);
  setTitle(RefactorJBundle.message("extract.class.title"));
  this.sourceClass=sourceClass;
  final DocumentListener docListener=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      validateButtons();
    }
  }
;
  classNameField=new JTextField();
  packageTextField=new JTextField();
  classNameField.getDocument().addDocumentListener(docListener);
  packageTextField.getDocument().addDocumentListener(docListener);
  packageChooserButton=new FixedSizeButton(packageTextField);
  sourceClassTextField=new JTextField();
  final MemberInfo.Filter filter=new MemberInfo.Filter(){
    public boolean includeMember(    PsiMember element){
      if (element instanceof PsiMethod) {
        return !((PsiMethod)element).isConstructor();
      }
 else       if (element instanceof PsiField) {
        final PsiField field=(PsiField)element;
        if (!field.hasModifierProperty(PsiModifier.STATIC)) {
          return true;
        }
        if (!field.hasInitializer()) {
          return true;
        }
        final PsiExpression initializer=field.getInitializer();
        return PsiUtil.isConstantExpression(initializer);
      }
 else       if (element instanceof PsiClass) {
        return PsiTreeUtil.isAncestor(ExtractClassDialog.this.sourceClass,element,true);
      }
      return false;
    }
  }
;
  memberInfo=MemberInfo.extractClassMembers(this.sourceClass,filter,false);
  for (  MemberInfo info : memberInfo) {
    if (info.getMember().equals(selectedMember)) {
      info.setChecked(true);
    }
  }
  super.init();
  final PsiFile file=sourceClass.getContainingFile();
  if (file instanceof PsiJavaFile) {
    packageTextField.setText(((PsiJavaFile)file).getPackageName());
  }
  sourceClassTextField.setText(sourceClass.getQualifiedName());
  validateButtons();
}
