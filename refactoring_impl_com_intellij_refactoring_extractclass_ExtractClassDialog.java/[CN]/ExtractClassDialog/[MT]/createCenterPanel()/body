{
  final JPanel panel=new JPanel(new BorderLayout());
  final MemberSelectionPanel memberSelectionPanel=new MemberSelectionPanel(RefactorJBundle.message("members.to.extract.label"),memberInfo,null);
  final MemberSelectionTable table=memberSelectionPanel.getTable();
  table.setMemberInfoModel(new DelegatingMemberInfoModel(table.getMemberInfoModel()){
    public Boolean isFixedAbstract(    MemberInfo member){
      return Boolean.TRUE;
    }
    @Override public int checkForProblems(    @NotNull final MemberInfo member){
      final PsiMember cause=getCause(member);
      if (member.isChecked() && cause != null)       return ERROR;
      if (!member.isChecked() && cause != null)       return WARNING;
      return OK;
    }
    @Override public String getTooltipText(    final MemberInfo member){
      final PsiMember cause=getCause(member);
      if (cause != null) {
        final String presentation=SymbolPresentationUtil.getSymbolPresentableText(cause);
        if (member.isChecked()) {
          return "Depends on " + presentation + " from "+ sourceClass.getName();
        }
 else {
          final String className=getClassName();
          return "Depends on " + presentation + " from new class"+ (className.length() > 0 ? ": " + className : "");
        }
      }
      return null;
    }
    private PsiMember getCause(    final MemberInfo member){
      PsiMember cause=myMember2CauseMap.get(member);
      if (cause != null)       return cause;
      final BackpointerUsageVisitor visitor;
      if (member.isChecked()) {
        visitor=new BackpointerUsageVisitor(getFieldsToExtract(),getClassesToExtract(),getMethodsToExtract(),sourceClass);
      }
 else {
        visitor=new BackpointerUsageVisitor(getFieldsToExtract(false),getClassesToExtract(false),getMethodsToExtract(false),sourceClass,false);
      }
      member.getMember().accept(visitor);
      cause=visitor.getCause();
      myMember2CauseMap.put(member,cause);
      return cause;
    }
  }
);
  panel.add(memberSelectionPanel,BorderLayout.CENTER);
  table.addMemberInfoChangeListener(this);
  return panel;
}
