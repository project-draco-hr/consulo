{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final List<CodeSmellInfo> result=new ArrayList<>();
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  if (ApplicationManager.getApplication().isWriteAccessAllowed())   throw new RuntimeException("Must not run under write action");
  final Ref<Exception> exception=Ref.create();
  ProgressManager.getInstance().run(new Task.Modal(myProject,VcsBundle.message("checking.code.smells.progress.title"),true){
    @Override public void run(    @NotNull ProgressIndicator progress){
      try {
        for (int i=0; i < filesToCheck.size(); i++) {
          if (progress.isCanceled())           throw new ProcessCanceledException();
          final VirtualFile file=filesToCheck.get(i);
          progress.setText(VcsBundle.message("searching.for.code.smells.processing.file.progress.text",file.getPresentableUrl()));
          progress.setFraction((double)i / (double)filesToCheck.size());
          result.addAll(findCodeSmells(file,progress));
        }
      }
 catch (      ProcessCanceledException e) {
        exception.set(e);
      }
catch (      Exception e) {
        LOG.error(e);
        exception.set(e);
      }
    }
  }
);
  if (!exception.isNull()) {
    ExceptionUtil.rethrowAllAsUnchecked(exception.get());
  }
  return result;
}
