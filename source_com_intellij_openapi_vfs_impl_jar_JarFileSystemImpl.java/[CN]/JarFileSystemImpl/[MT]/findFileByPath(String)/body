{
  if (LOG.isDebugEnabled()) {
    LOG.debug("In jar file system:" + path);
  }
  int index=path.lastIndexOf(JAR_SEPARATOR);
  if (index < 0)   return null;
  String jarPath=path.substring(0,index);
  String relPath=path.substring(index + JAR_SEPARATOR.length());
  if (LOG.isDebugEnabled()) {
    LOG.debug("In jar file system, relpath:" + relPath);
  }
synchronized (LOCK) {
    JarFileInfo info=myPathToFileInfoMap.get(jarPath);
    if (info == null) {
      if (myContentChangingJars.contains(jarPath))       return null;
      File file=new File(jarPath);
      try {
        jarPath=file.getCanonicalPath();
      }
 catch (      IOException e) {
        LOG.info("Could not fetch canonical path for " + jarPath);
        return null;
      }
      if (jarPath == null) {
        LOG.info("Canonical path is null for " + file.getPath());
        return null;
      }
      file=new File(jarPath);
      info=myPathToFileInfoMap.get(jarPath);
      if (info != null) {
        return info.findFile(relPath);
      }
      if (myContentChangingJars.contains(jarPath))       return null;
      if (!file.exists()) {
        LOG.info("Jar file " + file.getPath() + " not found");
        return null;
      }
      File mirrorFile=getMirrorFile(file);
      info=new JarFileInfo(this,file,mirrorFile);
      myPathToFileInfoMap.put(jarPath,info);
    }
    return info.findFile(relPath);
  }
}
