{
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode();
  String currentGroupName="";
  DefaultMutableTreeNode currentGroupNode=null;
  for (  OptionKey each : myKeys) {
    if (!myAllowedOptions.contains(each.field.getName()))     continue;
    String group=each.groupName;
    MyTreeNode newNode=new MyTreeNode(each,getRenamedTitle(each.field.getName(),each.title),settings);
    if (currentGroupNode == null || !Comparing.equal(group,currentGroupName)) {
      if (group == null) {
        currentGroupName=each.title;
        currentGroupNode=newNode;
      }
 else {
        currentGroupName=group;
        currentGroupNode=new DefaultMutableTreeNode(getRenamedTitle(group,group));
        currentGroupNode.add(newNode);
      }
      rootNode.add(currentGroupNode);
    }
 else {
      currentGroupNode.add(newNode);
    }
  }
  ListTreeTableModel model=new ListTreeTableModel(rootNode,COLUMNS);
  TreeTable treeTable=new TreeTable(model){
    public TreeTableCellRenderer createTableRenderer(    TreeTableModel treeTableModel){
      TreeTableCellRenderer tableRenderer=super.createTableRenderer(treeTableModel);
      UIUtil.setLineStyleAngled(tableRenderer);
      tableRenderer.setRootVisible(false);
      tableRenderer.setShowsRootHandles(true);
      return tableRenderer;
    }
    public TableCellRenderer getCellRenderer(    int row,    int column){
      TreePath treePath=getTree().getPathForRow(row);
      if (treePath == null)       return super.getCellRenderer(row,column);
      Object node=treePath.getLastPathComponent();
      TableCellRenderer renderer=COLUMNS[column].getRenderer(node);
      return renderer == null ? super.getCellRenderer(row,column) : renderer;
    }
    public TableCellEditor getCellEditor(    int row,    int column){
      TreePath treePath=getTree().getPathForRow(row);
      if (treePath == null)       return super.getCellEditor(row,column);
      Object node=treePath.getLastPathComponent();
      TableCellEditor editor=COLUMNS[column].getEditor(node);
      return editor == null ? super.getCellEditor(row,column) : editor;
    }
  }
;
  treeTable.setRootVisible(false);
  final JTree tree=treeTable.getTree();
  tree.setCellRenderer(myTitleRenderer);
  tree.setShowsRootHandles(true);
  treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  treeTable.setTableHeader(null);
  expandTree(tree);
  int maxWidth=tree.getPreferredScrollableViewportSize().width + 10;
  final TableColumn titleColumn=treeTable.getColumnModel().getColumn(0);
  titleColumn.setPreferredWidth(maxWidth);
  titleColumn.setMinWidth(maxWidth);
  titleColumn.setMaxWidth(maxWidth);
  titleColumn.setResizable(false);
  final TableColumn levelColumn=treeTable.getColumnModel().getColumn(1);
  JLabel value=new JLabel(ApplicationBundle.message("option.table.sizing.text"));
  final Dimension valueSize=value.getPreferredSize();
  levelColumn.setPreferredWidth(valueSize.width);
  levelColumn.setMaxWidth(valueSize.width);
  levelColumn.setMinWidth(valueSize.width);
  levelColumn.setResizable(false);
  treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10,20));
  return treeTable;
}
