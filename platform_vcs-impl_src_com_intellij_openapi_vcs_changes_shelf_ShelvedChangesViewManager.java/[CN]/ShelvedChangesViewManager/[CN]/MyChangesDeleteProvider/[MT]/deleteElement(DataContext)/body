{
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final ShelvedChangeList[] shelved=SHELVED_CHANGELIST_KEY.getData(dataContext);
  if (shelved == null || (shelved.length != 1))   return;
  final List<ShelvedChange> changes=SHELVED_CHANGE_KEY.getData(dataContext);
  final List<ShelvedBinaryFile> binaryFiles=SHELVED_BINARY_FILE_KEY.getData(dataContext);
  final ShelvedChangeList list=shelved[0];
  final String message=VcsBundle.message("shelve.changes.delete.files.from.list",(changes == null ? 0 : changes.size()) + (binaryFiles == null ? 0 : binaryFiles.size()));
  int rc=Messages.showOkCancelDialog(myProject,message,VcsBundle.message("shelve.changes.delete.files.from.list.title"),Messages.getWarningIcon());
  if (rc != 0)   return;
  final ArrayList<ShelvedBinaryFile> oldBinaries=new ArrayList<ShelvedBinaryFile>(list.getBinaryFiles());
  final ArrayList<ShelvedChange> oldChanges=new ArrayList<ShelvedChange>(list.getChanges(project));
  oldBinaries.removeAll(binaryFiles);
  oldChanges.removeAll(changes);
  final CommitContext commitContext=new CommitContext();
  final List<FilePatch> patches=new ArrayList<FilePatch>();
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  for (  ShelvedChange change : oldChanges) {
    try {
      patches.add(change.loadFilePatch(myProject,commitContext));
    }
 catch (    IOException e) {
      exceptions.add(new VcsException(e));
    }
catch (    PatchSyntaxException e) {
      exceptions.add(new VcsException(e));
    }
  }
  myShelveChangesManager.saveRemainingPatches(list,patches,oldBinaries,commitContext);
  if (!exceptions.isEmpty()) {
    String title=list.DESCRIPTION == null ? "" : list.DESCRIPTION;
    title=title.substring(0,Math.min(10,list.DESCRIPTION.length()));
    AbstractVcsHelper.getInstance(myProject).showErrors(exceptions,"Deleting files from '" + title + "'");
  }
}
