{
  if (key == SHELVED_CHANGELIST_KEY) {
    final Set<ShelvedChangeList> changeLists=getSelectedLists(false);
    if (changeLists.size() > 0) {
      sink.put(SHELVED_CHANGELIST_KEY,changeLists.toArray(new ShelvedChangeList[changeLists.size()]));
    }
  }
 else   if (key == SHELVED_RECYCLED_CHANGELIST_KEY) {
    final Set<ShelvedChangeList> changeLists=getSelectedLists(true);
    if (changeLists.size() > 0) {
      sink.put(SHELVED_RECYCLED_CHANGELIST_KEY,changeLists.toArray(new ShelvedChangeList[changeLists.size()]));
    }
  }
 else   if (key == SHELVED_CHANGE_KEY) {
    sink.put(SHELVED_CHANGE_KEY,TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class));
  }
 else   if (key == SHELVED_BINARY_FILE_KEY) {
    sink.put(SHELVED_BINARY_FILE_KEY,TreeUtil.collectSelectedObjectsOfType(this,ShelvedBinaryFile.class));
  }
 else   if (key == VcsDataKeys.HAVE_SELECTED_CHANGES) {
    sink.put(VcsDataKeys.HAVE_SELECTED_CHANGES,getSelectionCount() > 0);
  }
 else   if (key == VcsDataKeys.CHANGES) {
    List<ShelvedChange> shelvedChanges=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class);
    if (shelvedChanges.size() > 0) {
      Change[] changes=new Change[shelvedChanges.size()];
      for (int i=0; i < shelvedChanges.size(); i++) {
        changes[i]=shelvedChanges.get(i).getChange(myProject);
      }
      sink.put(VcsDataKeys.CHANGES,changes);
    }
 else {
      final List<ShelvedChangeList> changeLists=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChangeList.class);
      if (changeLists.size() > 0) {
        List<Change> changes=new ArrayList<Change>();
        for (        ShelvedChangeList changeList : changeLists) {
          shelvedChanges=changeList.getChanges(myProject);
          for (          ShelvedChange shelvedChange : shelvedChanges) {
            changes.add(shelvedChange.getChange(myProject));
          }
        }
        sink.put(VcsDataKeys.CHANGES,changes.toArray(new Change[changes.size()]));
      }
    }
  }
 else   if (key == PlatformDataKeys.DELETE_ELEMENT_PROVIDER) {
    sink.put(PlatformDataKeys.DELETE_ELEMENT_PROVIDER,myDeleteProvider);
  }
 else   if (PlatformDataKeys.NAVIGATABLE_ARRAY.equals(key)) {
    List<ShelvedChange> shelvedChanges=new ArrayList<ShelvedChange>(TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class));
    final ArrayDeque<Navigatable> navigatables=new ArrayDeque<Navigatable>();
    final List<ShelvedChangeList> changeLists=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChangeList.class);
    for (    ShelvedChangeList changeList : changeLists) {
      shelvedChanges.addAll(changeList.getChanges(myProject));
    }
    for (    final ShelvedChange shelvedChange : shelvedChanges) {
      if (shelvedChange.getBeforePath() != null && !FileStatus.ADDED.equals(shelvedChange.getFileStatus())) {
        final NavigatableAdapter navigatable=new NavigatableAdapter(){
          @Override public void navigate(          boolean requestFocus){
            final VirtualFile vf=shelvedChange.getBeforeVFUnderProject(myProject);
            if (vf != null) {
              navigate(myProject,vf,true);
            }
          }
        }
;
        navigatables.add(navigatable);
      }
    }
    sink.put(PlatformDataKeys.NAVIGATABLE_ARRAY,navigatables.toArray(new Navigatable[navigatables.size()]));
  }
}
