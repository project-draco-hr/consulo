{
  myRoot=new DefaultMutableTreeNode(ROOT_NODE_VALUE);
  DefaultTreeModel model=new DefaultTreeModel(myRoot);
  final List<ShelvedChangeList> changeLists=new ArrayList<ShelvedChangeList>(myShelveChangesManager.getShelvedChangeLists());
  Collections.sort(changeLists,ChangelistComparator.getInstance());
  if (myShelveChangesManager.isShowRecycled()) {
    ArrayList<ShelvedChangeList> recycled=new ArrayList<ShelvedChangeList>(myShelveChangesManager.getRecycledShelvedChangeLists());
    Collections.sort(recycled,ChangelistComparator.getInstance());
    changeLists.addAll(recycled);
  }
  myMoveRenameInfo.clear();
  for (  ShelvedChangeList changeList : changeLists) {
    DefaultMutableTreeNode node=new DefaultMutableTreeNode(changeList);
    model.insertNodeInto(node,myRoot,myRoot.getChildCount());
    final List<Object> shelvedFilesNodes=new ArrayList<Object>();
    List<ShelvedChange> changes=changeList.getChanges(myProject);
    for (    ShelvedChange change : changes) {
      putMovedMessage(change.getBeforePath(),change.getAfterPath());
      shelvedFilesNodes.add(change);
    }
    List<ShelvedBinaryFile> binaryFiles=changeList.getBinaryFiles();
    for (    ShelvedBinaryFile file : binaryFiles) {
      putMovedMessage(file.BEFORE_PATH,file.AFTER_PATH);
      shelvedFilesNodes.add(file);
    }
    Collections.sort(shelvedFilesNodes,ShelvedFilePatchComparator.getInstance());
    for (int i=0; i < shelvedFilesNodes.size(); i++) {
      final Object filesNode=shelvedFilesNodes.get(i);
      final DefaultMutableTreeNode pathNode=new DefaultMutableTreeNode(filesNode);
      model.insertNodeInto(pathNode,node,i);
    }
  }
  return model;
}
