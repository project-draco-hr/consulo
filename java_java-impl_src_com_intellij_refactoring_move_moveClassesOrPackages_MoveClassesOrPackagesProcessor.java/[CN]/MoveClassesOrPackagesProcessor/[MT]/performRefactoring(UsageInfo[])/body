{
  try {
    Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    for (int idx=0; idx < myElementsToMove.length; idx++) {
      PsiElement element=myElementsToMove[idx];
      final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
      if (element instanceof PsiPackage) {
        final PsiPackage newElement=MoveClassesOrPackagesUtil.doMovePackage((PsiPackage)element,myMoveDestination);
        oldToNewElementsMapping.put(element,newElement);
        element=newElement;
      }
 else       if (element instanceof PsiClass) {
        ChangeContextUtil.encodeContextInfo(element,true);
        final PsiClass newElement=MoveClassesOrPackagesUtil.doMoveClass((PsiClass)element,myMoveDestination.getTargetDirectory(element.getContainingFile()));
        oldToNewElementsMapping.put(element,newElement);
        element=newElement;
      }
 else {
        LOG.error("Unexpected element to move: " + element);
      }
      elementListener.elementMoved(element);
      myElementsToMove[idx]=element;
    }
    for (    PsiElement element : myElementsToMove) {
      if (element instanceof PsiClass) {
        ChangeContextUtil.decodeContextInfo(element,null,null);
      }
    }
    myNonCodeUsages=retargetUsages(usages,oldToNewElementsMapping);
  }
 catch (  IncorrectOperationException e) {
    myNonCodeUsages=new NonCodeUsageInfo[0];
    RefactoringUIUtil.processIncorrectOperation(myProject,e);
  }
}
