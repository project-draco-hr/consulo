{
  List<UsageInfo> allUsages=new ArrayList<UsageInfo>();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  for (  PsiElement element : myElementsToMove) {
    String newName=getNewQName(element);
    final UsageInfo[] usages=MoveClassesOrPackagesUtil.findUsages(element,mySearchInComments,mySearchInNonJavaFiles,newName);
    allUsages.addAll(new ArrayList<UsageInfo>(Arrays.asList(usages)));
  }
  myMoveDestination.analyzeModuleConflicts(Arrays.asList(myElementsToMove),conflicts,allUsages.toArray(new UsageInfo[allUsages.size()]));
  final UsageInfo[] usageInfos=allUsages.toArray(new UsageInfo[allUsages.size()]);
  detectPackageLocalsMoved(usageInfos,conflicts);
  detectPackageLocalsUsed(conflicts);
  if (!conflicts.isEmpty()) {
    for (    PsiElement element : conflicts.keySet()) {
      allUsages.add(new ConflictsUsageInfo(element,conflicts.get(element)));
    }
  }
  return UsageViewUtil.removeDuplicatedUsages(allUsages.toArray(new UsageInfo[allUsages.size()]));
}
