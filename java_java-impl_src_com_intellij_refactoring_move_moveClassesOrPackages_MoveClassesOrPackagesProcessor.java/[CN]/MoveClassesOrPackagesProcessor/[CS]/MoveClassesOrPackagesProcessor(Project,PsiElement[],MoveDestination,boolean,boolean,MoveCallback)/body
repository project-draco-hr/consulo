{
  super(project);
  final Set<PsiElement> toMove=new LinkedHashSet<PsiElement>();
  for (  PsiElement element : elements) {
    if (element instanceof PsiClassOwner) {
      Collections.addAll(toMove,((PsiClassOwner)element).getClasses());
    }
 else {
      toMove.add(element);
    }
  }
  myElementsToMove=PsiUtilCore.toPsiElementArray(toMove);
  Arrays.sort(myElementsToMove,new Comparator<PsiElement>(){
    @Override public int compare(    PsiElement o1,    PsiElement o2){
      if (o1 instanceof PsiClass && o2 instanceof PsiClass) {
        final PsiFile containingFile=o1.getContainingFile();
        if (Comparing.equal(containingFile,o2.getContainingFile())) {
          final VirtualFile virtualFile=containingFile.getVirtualFile();
          if (virtualFile != null) {
            final String fileName=virtualFile.getNameWithoutExtension();
            if (Comparing.strEqual(fileName,((PsiClass)o1).getName()))             return -1;
            if (Comparing.strEqual(fileName,((PsiClass)o2).getName()))             return 1;
          }
        }
      }
      return 0;
    }
  }
);
  myMoveDestination=moveDestination;
  myTargetPackage=myMoveDestination.getTargetPackage();
  mySearchInComments=searchInComments;
  mySearchInNonJavaFiles=searchInNonJavaFiles;
  myMoveCallback=moveCallback;
}
