{
  final CodeStyleScheme[] savedSchemes=CodeStyleSchemes.getInstance().getSchemes();
  final Set<CodeStyleScheme> savedSchemesSet=new HashSet<CodeStyleScheme>(Arrays.asList(savedSchemes));
  List<CodeStyleScheme> configuredSchemes=getCurrentSchemes();
  for (  CodeStyleScheme savedScheme : savedSchemes) {
    if (!configuredSchemes.contains(savedScheme)) {
      CodeStyleSchemes.getInstance().deleteScheme(savedScheme);
    }
  }
  nextScheme:   for (  CodeStyleScheme scheme : configuredSchemes) {
    for (    CodeStyleScheme saved : savedSchemes) {
      if (Comparing.strEqual(saved.getName(),scheme.getName()))       continue nextScheme;
    }
    CodeStyleSchemes.getInstance().addScheme(scheme);
  }
  CodeStyleScheme currentScheme=getSelectedScheme();
  final boolean isDefaultModified=currentScheme.isDefault() && mySettingsStack.isSchemeModified(currentScheme);
  mySettingsStack.apply();
  if (isDefaultModified) {
    final CodeStyleScheme defaultScheme=currentScheme;
    currentScheme=CodeStyleSchemes.getInstance().createNewScheme(null,defaultScheme);
    ((CodeStyleSchemeImpl)currentScheme).setCodeStyleSettings(mySettingsStack.getSettings(defaultScheme));
    CodeStyleSchemes.getInstance().addScheme(currentScheme);
  }
  CodeStyleSchemes.getInstance().setCurrentScheme(currentScheme);
  if (isDefaultModified) {
    initCombobox();
  }
  EditorFactory.getInstance().refreshAllEditors();
}
