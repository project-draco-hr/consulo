{
  final CodeStyleScheme[] savedSchemes=CodeStyleSchemes.getInstance().getSchemes();
  final Set savedSchemesSet=new HashSet(Arrays.asList(savedSchemes));
  List<CodeStyleScheme> configuredSchemes=getCurrentSchemes();
  for (int i=0; i < savedSchemes.length; i++) {
    CodeStyleScheme savedScheme=savedSchemes[i];
    if (!configuredSchemes.contains(savedScheme)) {
      CodeStyleSchemes.getInstance().deleteScheme(savedScheme);
    }
  }
  for (int i=0; i < configuredSchemes.size(); i++) {
    CodeStyleScheme scheme=configuredSchemes.get(i);
    if (!savedSchemesSet.contains(scheme)) {
      CodeStyleSchemes.getInstance().addScheme(scheme);
    }
  }
  CodeStyleScheme currentScheme=getSelectedScheme();
  final boolean isDefaultModified=currentScheme.isDefault() && mySettingsStack.isSchemeModified(currentScheme);
  mySettingsStack.apply();
  if (isDefaultModified) {
    final CodeStyleScheme defaultScheme=currentScheme;
    currentScheme=CodeStyleSchemes.getInstance().createNewScheme(null,defaultScheme);
    ((CodeStyleSchemeImpl)currentScheme).setCodeStyleSettings(mySettingsStack.getSettings(defaultScheme));
    CodeStyleSchemes.getInstance().addScheme(currentScheme);
  }
  CodeStyleSchemes.getInstance().setCurrentScheme(currentScheme);
  if (isDefaultModified) {
    initCombobox();
  }
  EditorFactory.getInstance().refreshAllEditors();
}
