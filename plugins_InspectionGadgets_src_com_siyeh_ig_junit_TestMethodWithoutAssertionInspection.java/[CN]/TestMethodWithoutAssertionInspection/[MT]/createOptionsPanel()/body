{
  final JPanel panel=new JPanel(new GridBagLayout());
  final IGTable table=new IGTable(new ListWrappingTableModel(Arrays.asList(classNames,methodNamePatterns),"Class name","method name pattern"));
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(table);
  final AnAction addAction=new AnAction(InspectionGadgetsBundle.message("button.add"),"",Icons.ADD_ICON){
    @Override public void actionPerformed(    AnActionEvent anActionEvent){
      final ListWrappingTableModel tableModel=table.getModel();
      tableModel.addRow();
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          final int lastRowIndex=tableModel.getRowCount() - 1;
          final Rectangle rectangle=table.getCellRect(lastRowIndex,0,true);
          table.scrollRectToVisible(rectangle);
          table.editCellAt(lastRowIndex,0);
          final ListSelectionModel selectionModel=table.getSelectionModel();
          selectionModel.setSelectionInterval(lastRowIndex,lastRowIndex);
          final TableCellEditor editor=table.getCellEditor();
          final Component component=editor.getTableCellEditorComponent(table,null,true,lastRowIndex,0);
          component.requestFocus();
        }
      }
);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(table.isEnabled());
    }
  }
;
  final AnAction removeAction=new AnAction(InspectionGadgetsBundle.message("button.remove"),"",Icons.DELETE_ICON){
    @Override public void actionPerformed(    AnActionEvent anActionEvent){
      final ListSelectionModel selectionModel=table.getSelectionModel();
      final int minIndex=selectionModel.getMinSelectionIndex();
      final int maxIndex=selectionModel.getMaxSelectionIndex();
      if (minIndex == -1 || maxIndex == -1) {
        return;
      }
      final ListWrappingTableModel tableModel=table.getModel();
      for (int i=minIndex; i <= maxIndex; i++) {
        if (selectionModel.isSelectedIndex(i)) {
          tableModel.removeRow(i);
        }
      }
      final int count=tableModel.getRowCount();
      if (count <= minIndex) {
        selectionModel.setSelectionInterval(count - 1,count - 1);
      }
 else       if (minIndex <= 0) {
        if (count > 0) {
          selectionModel.setSelectionInterval(0,0);
        }
      }
 else {
        selectionModel.setSelectionInterval(minIndex - 1,minIndex - 1);
      }
    }
    @Override public void update(    AnActionEvent e){
      final ListSelectionModel selectionModel=table.getSelectionModel();
      final int minIndex=selectionModel.getMinSelectionIndex();
      final int maxIndex=selectionModel.getMaxSelectionIndex();
      if (minIndex == -1 || maxIndex == -1 || !table.isEnabled()) {
        e.getPresentation().setEnabled(false);
      }
 else {
        e.getPresentation().setEnabled(true);
      }
    }
  }
;
  final ActionGroup group=new DefaultActionGroup(addAction,removeAction);
  final ActionManager actionManager=ActionManager.getInstance();
  final ActionToolbar toolbar=actionManager.createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  panel.add(toolbar.getComponent(),constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=1.0;
  constraints.weighty=1.0;
  constraints.fill=GridBagConstraints.BOTH;
  panel.add(scrollPane,constraints);
  return panel;
}
