{
  if (containsAssertion) {
    return;
  }
  super.visitMethodCallExpression(call);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return;
  }
  for (int i=0, methodNamesSize=methodNamePatterns.size(); i < methodNamesSize; i++) {
    final String pattern=methodNamePatterns.get(i);
    if (!methodNamesMatch(methodName,pattern)) {
      continue;
    }
    final PsiMethod method=call.resolveMethod();
    if (method == null || method.isConstructor()) {
      continue;
    }
    final PsiClass aClass=method.getContainingClass();
    if (!ClassUtils.isSubclass(aClass,classNames.get(i))) {
      continue;
    }
    containsAssertion=true;
    break;
  }
}
