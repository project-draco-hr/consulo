{
  super.visitMethod(method);
  final String methodName=method.getName();
  if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (!methodName.startsWith("test")) {
    return;
  }
  final PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList == null) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters == null) {
    return;
  }
  if (parameters.length != 0 || !returnType.equals(PsiType.VOID) || !method.hasModifierProperty(PsiModifier.PUBLIC)) {
    return;
  }
  final PsiClass targetClass=method.getContainingClass();
  if (!ClassUtils.isSubclass(targetClass,"junit.framework.TestCase")) {
    return;
  }
  final ContainsAssertionVisitor visitor=new ContainsAssertionVisitor();
  method.accept(visitor);
  if (visitor.containsAssertion()) {
    return;
  }
  registerMethodError(method);
}
