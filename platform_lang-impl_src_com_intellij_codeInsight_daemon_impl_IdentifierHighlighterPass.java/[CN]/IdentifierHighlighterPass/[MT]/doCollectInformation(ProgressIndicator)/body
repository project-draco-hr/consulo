{
  @SuppressWarnings("unchecked") HighlightUsagesHandlerBase<PsiElement> handler=HighlightUsagesHandler.createCustomHandler(myEditor,myFile);
  if (handler != null) {
    List<PsiElement> targets=handler.getTargets();
    handler.computeUsages(targets);
    final List<TextRange> readUsages=handler.getReadUsages();
    for (    TextRange readUsage : readUsages) {
      LOG.assertTrue(readUsage != null,"null text range from " + handler);
    }
    myReadAccessRanges.addAll(readUsages);
    final List<TextRange> writeUsages=handler.getWriteUsages();
    for (    TextRange writeUsage : writeUsages) {
      LOG.assertTrue(writeUsage != null,"null text range from " + handler);
    }
    myWriteAccessRanges.addAll(writeUsages);
    return;
  }
  Set<String> flags=ContainerUtil.newHashSet(TargetElementUtilEx.ELEMENT_NAME_ACCEPTED,TargetElementUtilEx.REFERENCED_ELEMENT_ACCEPTED);
  PsiElement myTarget=TargetElementUtil.findTargetElement(myEditor,flags,myCaretOffset);
  if (myTarget == null) {
    if (!PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
      Editor injectedEditor=InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(myEditor,myFile,myCaretOffset);
      if (injectedEditor != null) {
        myTarget=TargetElementUtil.findTargetElement(injectedEditor,flags,injectedEditor.getCaretModel().getOffset());
      }
    }
  }
  if (myTarget != null) {
    highlightTargetUsages(myTarget);
  }
 else {
    PsiReference ref=TargetElementUtil.findReference(myEditor);
    if (ref instanceof PsiPolyVariantReference) {
      ResolveResult[] results=((PsiPolyVariantReference)ref).multiResolve(false);
      if (results.length > 0) {
        for (        ResolveResult result : results) {
          PsiElement target=result.getElement();
          if (target != null) {
            highlightTargetUsages(target);
          }
        }
      }
    }
  }
}
