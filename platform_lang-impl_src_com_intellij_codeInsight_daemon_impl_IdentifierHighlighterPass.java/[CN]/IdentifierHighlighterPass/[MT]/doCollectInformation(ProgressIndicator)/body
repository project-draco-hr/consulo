{
  if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {
    return;
  }
  final HighlightUsagesHandlerBase<PsiElement> handler=HighlightUsagesHandler.createCustomHandler(myEditor,myFile);
  if (handler != null) {
    List<PsiElement> targets=handler.getTargets();
    handler.computeUsages(targets);
    final List<TextRange> readUsages=handler.getReadUsages();
    for (    TextRange readUsage : readUsages) {
      LOG.assertTrue(readUsage != null,"null text range from " + handler);
    }
    myReadAccessRanges.addAll(readUsages);
    final List<TextRange> writeUsages=handler.getWriteUsages();
    for (    TextRange writeUsage : writeUsages) {
      LOG.assertTrue(writeUsage != null,"null text range from " + handler);
    }
    myWriteAccessRanges.addAll(writeUsages);
    return;
  }
  int flags=TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED;
  PsiElement myTarget=TargetElementUtilBase.getInstance().findTargetElement(myEditor,flags,myCaretOffset);
  if (myTarget == null) {
    if (!PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
      Editor injectedEditor=InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(myEditor,myFile,myCaretOffset);
      if (injectedEditor != null) {
        myTarget=TargetElementUtilBase.getInstance().findTargetElement(injectedEditor,flags,injectedEditor.getCaretModel().getOffset());
      }
    }
  }
  if (myTarget != null) {
    final ReadWriteAccessDetector detector=ReadWriteAccessDetector.findDetector(myTarget);
    final FindUsagesManager findUsagesManager=((FindManagerImpl)FindManager.getInstance(myTarget.getProject())).getFindUsagesManager();
    final FindUsagesHandler findUsagesHandler=findUsagesManager.getFindUsagesHandler(myTarget,true);
    final LocalSearchScope scope=new LocalSearchScope(myFile);
    Collection<PsiReference> refs=findUsagesHandler != null ? findUsagesHandler.findReferencesToHighlight(myTarget,scope) : ReferencesSearch.search(myTarget,scope).findAll();
    for (    PsiReference psiReference : refs) {
      final List<TextRange> textRanges=HighlightUsagesHandler.getRangesToHighlight(psiReference);
      if (detector == null || detector.getReferenceAccess(myTarget,psiReference) == ReadWriteAccessDetector.Access.Read) {
        myReadAccessRanges.addAll(textRanges);
      }
 else {
        myWriteAccessRanges.addAll(textRanges);
      }
    }
    final TextRange declRange=HighlightUsagesHandler.getNameIdentifierRange(myFile,myTarget);
    if (declRange != null) {
      if (detector != null && detector.isDeclarationWriteAccess(myTarget)) {
        myWriteAccessRanges.add(declRange);
      }
 else {
        myReadAccessRanges.add(declRange);
      }
    }
  }
}
