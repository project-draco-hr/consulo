{
  if (myHighlightUsagesHandler != null) {
    List<PsiElement> targets=myHighlightUsagesHandler.getTargets();
    myHighlightUsagesHandler.computeUsages(targets);
    final List<TextRange> readUsages=myHighlightUsagesHandler.getReadUsages();
    for (    TextRange readUsage : readUsages) {
      LOG.assertTrue(readUsage != null,"null text range from " + myHighlightUsagesHandler);
    }
    myReadAccessRanges.addAll(readUsages);
    final List<TextRange> writeUsages=myHighlightUsagesHandler.getWriteUsages();
    for (    TextRange writeUsage : writeUsages) {
      LOG.assertTrue(writeUsage != null,"null text range from " + myHighlightUsagesHandler);
    }
    myWriteAccessRanges.addAll(writeUsages);
    if (!myHighlightUsagesHandler.highlightReferences())     return;
  }
  Set<String> flags=ContainerUtil.newHashSet(TargetElementUtilEx.ELEMENT_NAME_ACCEPTED,TargetElementUtilEx.REFERENCED_ELEMENT_ACCEPTED);
  PsiElement myTarget=TargetElementUtil.findTargetElement(myEditor,flags,myCaretOffset);
  if (myTarget == null) {
    if (!PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
      Editor injectedEditor=InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(myEditor,myFile,myCaretOffset);
      myTarget=TargetElementUtil.findTargetElement(injectedEditor,flags,injectedEditor.getCaretModel().getOffset());
    }
  }
  if (myTarget != null) {
    highlightTargetUsages(myTarget);
  }
 else {
    PsiReference ref=TargetElementUtil.findReference(myEditor);
    if (ref instanceof PsiPolyVariantReference) {
      if (!ref.getElement().isValid()) {
        throw new PsiInvalidElementAccessException(ref.getElement(),"Invalid element in " + ref + " of "+ ref.getClass()+ "; editor="+ myEditor);
      }
      ResolveResult[] results=((PsiPolyVariantReference)ref).multiResolve(false);
      if (results.length > 0) {
        for (        ResolveResult result : results) {
          PsiElement target=result.getElement();
          if (target != null) {
            if (!target.isValid()) {
              throw new PsiInvalidElementAccessException(target,"Invalid element returned from " + ref + " of "+ ref.getClass()+ "; editor="+ myEditor);
            }
            highlightTargetUsages(target);
          }
        }
      }
    }
  }
}
