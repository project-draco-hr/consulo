{
  if (myReadAccessRanges.isEmpty() && myWriteAccessRanges.isEmpty()) {
    return Collections.emptyList();
  }
  Set<Pair<Object,TextRange>> existingMarkupTooltips=new HashSet<>();
  for (  RangeHighlighter highlighter : myEditor.getMarkupModel().getAllHighlighters()) {
    existingMarkupTooltips.add(Pair.create(highlighter.getErrorStripeTooltip(),new TextRange(highlighter.getStartOffset(),highlighter.getEndOffset())));
  }
  List<HighlightInfo> result=new ArrayList<>(myReadAccessRanges.size() + myWriteAccessRanges.size());
  for (  TextRange range : myReadAccessRanges) {
    ContainerUtil.addIfNotNull(result,createHighlightInfo(range,HighlightInfoType.ELEMENT_UNDER_CARET_READ,existingMarkupTooltips));
  }
  for (  TextRange range : myWriteAccessRanges) {
    ContainerUtil.addIfNotNull(result,createHighlightInfo(range,HighlightInfoType.ELEMENT_UNDER_CARET_WRITE,existingMarkupTooltips));
  }
  return result;
}
