{
  Collection<TextRange> readRanges=new ArrayList<TextRange>();
  Collection<TextRange> writeRanges=new ArrayList<TextRange>();
  final ReadWriteAccessDetector detector=ReadWriteAccessDetector.findDetector(target);
  final FindUsagesManager findUsagesManager=((FindManagerImpl)FindManager.getInstance(target.getProject())).getFindUsagesManager();
  final FindUsagesHandler findUsagesHandler=findUsagesManager.getFindUsagesHandler(target,true);
  final LocalSearchScope scope=new LocalSearchScope(psiElement);
  Collection<PsiReference> refs=findUsagesHandler != null ? findUsagesHandler.findReferencesToHighlight(target,scope) : ReferencesSearch.search(target,scope).findAll();
  for (  PsiReference psiReference : refs) {
    if (psiReference == null) {
      LOG.error("Null reference returned, findUsagesHandler=" + findUsagesHandler + "; target="+ target+ " of "+ target.getClass());
      continue;
    }
    final List<TextRange> textRanges=HighlightUsagesHandler.getRangesToHighlight(psiReference);
    if (detector == null || detector.getReferenceAccess(target,psiReference) == ReadWriteAccessDetector.Access.Read) {
      readRanges.addAll(textRanges);
    }
 else {
      writeRanges.addAll(textRanges);
    }
  }
  if (withDeclarations) {
    final TextRange declRange=HighlightUsagesHandler.getNameIdentifierRange(psiElement.getContainingFile(),target);
    if (declRange != null) {
      if (detector != null && detector.isDeclarationWriteAccess(target)) {
        writeRanges.add(declRange);
      }
 else {
        readRanges.add(declRange);
      }
    }
  }
  return Couple.of(readRanges,writeRanges);
}
