{
  final Language xmlLang=StdFileTypes.XML.getLanguage();
  RenameInputValidatorRegistry.getInstance().registerInputValidator(psiElement().withLanguage(XsltLanguage.INSTANCE),new RenameInputValidator(){
    public boolean isInputValid(    String newName,    PsiElement element,    ProcessingContext context){
      return LanguageNamesValidation.INSTANCE.forLanguage(XPathFileType.XPATH.getLanguage()).isIdentifier(newName,element.getProject());
    }
  }
);
  final XsltFormattingModelBuilder builder=new XsltFormattingModelBuilder(LanguageFormatting.INSTANCE.forLanguage(xmlLang));
  LanguageFormatting.INSTANCE.addExplicitExtension(xmlLang,builder);
  final ExternalResourceManagerEx erm=ExternalResourceManagerEx.getInstanceEx();
  erm.addIgnoredResource(XsltSupport.PLUGIN_EXTENSIONS_NS);
  if (REGISTER_SCHEMA) {
    final String resourceLocation=erm.getResourceLocation(XsltSupport.XSLT_NS);
    final Class<?> clazz=XsltConfig.class;
    final URL resource=clazz.getResource(XSLT_SCHEMA_LOCATION);
    LOG.info("Adding resource for '" + XsltSupport.XSLT_NS + "': "+ resource);
    if (resourceLocation != XsltSupport.XSLT_NS && !resourceLocation.equals(resource.toExternalForm())) {
      LOG.info("Warning: Resource for '" + XsltSupport.XSLT_NS + "' is already registered to: "+ resourceLocation);
    }
 else {
      erm.addStdResource(XsltSupport.XSLT_NS,XSLT_SCHEMA_LOCATION,clazz);
    }
  }
}
