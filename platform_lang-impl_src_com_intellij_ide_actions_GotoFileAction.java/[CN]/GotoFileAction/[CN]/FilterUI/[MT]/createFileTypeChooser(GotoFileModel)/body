{
  List<FileType> elements=new ArrayList<FileType>();
  ContainerUtil.addAll(elements,FileTypeManager.getInstance().getRegisteredFileTypes());
  Collections.sort(elements,FileTypeComparator.INSTANCE);
  final ElementsChooser<FileType> chooser=new ElementsChooser<FileType>(elements,true){
    @Override protected String getItemText(    @NotNull final FileType value){
      return value.getName();
    }
    @Override protected Icon getItemIcon(    final FileType value){
      return value.getIcon();
    }
  }
;
  chooser.setFocusable(false);
  final GotoFileConfiguration config=GotoFileConfiguration.getInstance(myProject);
  final int count=chooser.getElementCount();
  for (int i=0; i < count; i++) {
    FileType type=chooser.getElementAt(i);
    if (!DumbService.getInstance(myProject).isDumb() && !config.isFileTypeVisible(type)) {
      chooser.setElementMarked(type,false);
    }
  }
  updateModel(gotoFileModel,chooser);
  chooser.addElementsMarkListener(new ElementsChooser.ElementsMarkListener<FileType>(){
    public void elementMarkChanged(    final FileType element,    final boolean isMarked){
      config.setFileTypeVisible(element,isMarked);
      updateModel(gotoFileModel,chooser);
    }
  }
);
  return chooser;
}
