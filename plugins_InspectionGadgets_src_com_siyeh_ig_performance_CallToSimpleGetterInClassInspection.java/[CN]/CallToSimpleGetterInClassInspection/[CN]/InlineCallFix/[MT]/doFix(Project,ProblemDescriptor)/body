{
  final PsiElement methodIdentifier=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)methodIdentifier.getParent();
  if (methodExpression == null) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)methodExpression.getParent();
  if (call == null) {
    return;
  }
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  final PsiReturnStatement returnStatement=(PsiReturnStatement)statements[0];
  final PsiReferenceExpression returnValue=(PsiReferenceExpression)returnStatement.getReturnValue();
  if (returnValue == null) {
    return;
  }
  final PsiField field=(PsiField)returnValue.resolve();
  if (field == null) {
    return;
  }
  final String fieldName=field.getName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(call.getProject());
    final PsiResolveHelper resolveHelper=facade.getResolveHelper();
    final PsiVariable variable=resolveHelper.resolveReferencedVariable(fieldName,call);
    if (variable == null) {
      return;
    }
    if (variable.equals(field)) {
      replaceExpression(call,fieldName);
    }
 else {
      replaceExpression(call,"this." + fieldName);
    }
  }
 else {
    replaceExpression(call,qualifier.getText() + '.' + fieldName);
  }
}
