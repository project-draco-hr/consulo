{
  super.visitMethodCallExpression(call);
  final PsiClass containingClass=ClassUtils.getContainingClass(call);
  if (containingClass == null) {
    return;
  }
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  if (!containingClass.equals(method.getContainingClass())) {
    return;
  }
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null && !(qualifier instanceof PsiThisExpression)) {
    if (ignoreGetterCallsOnOtherObjects) {
      return;
    }
    final PsiType type=qualifier.getType();
    if (!(type instanceof PsiClassType)) {
      return;
    }
    final PsiClassType classType=(PsiClassType)type;
    final PsiClass qualifierClass=classType.resolve();
    if (!containingClass.equals(qualifierClass)) {
      return;
    }
  }
  if (!MethodUtils.isSimpleGetter(method)) {
    return;
  }
  final Query<PsiMethod> query=OverridingMethodsSearch.search(method,method.getUseScope(),true);
  final PsiMethod overridingMethod=query.findFirst();
  if (overridingMethod != null) {
    return;
  }
  registerMethodCallError(call);
}
