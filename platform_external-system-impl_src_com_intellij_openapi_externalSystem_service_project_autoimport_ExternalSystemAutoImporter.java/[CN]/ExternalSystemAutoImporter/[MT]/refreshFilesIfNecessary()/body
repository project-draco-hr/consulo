{
  if (myFilesToRefresh.isEmpty() || myProject.isDisposed()) {
    return;
  }
  Map<ProjectSystemId,Set<String>> copy=ContainerUtilRt.newHashMap();
  Lock fileLock=myVfsLock.writeLock();
  fileLock.lock();
  try {
    copy.putAll(myFilesToRefresh);
    myFilesToRefresh.clear();
  }
  finally {
    fileLock.unlock();
  }
  FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
  LocalFileSystem fileSystem=LocalFileSystem.getInstance();
  Lock documentLock=myDocumentLock.writeLock();
  documentLock.lock();
  try {
    for (    Set<String> paths : copy.values()) {
      for (      String path : paths) {
        VirtualFile file=fileSystem.findFileByPath(path);
        if (file != null) {
          Document document=fileDocumentManager.getCachedDocument(file);
          if (document != null) {
            myDocumentsToSave.remove(document);
          }
        }
      }
    }
  }
  finally {
    documentLock.unlock();
  }
  boolean scheduleRefresh=false;
  ExternalSystemProcessingManager processingManager=ServiceManager.getService(ExternalSystemProcessingManager.class);
  for (  Map.Entry<ProjectSystemId,Set<String>> entry : copy.entrySet()) {
    for (    String path : entry.getValue()) {
      final ExternalSystemTask resolveTask=processingManager.findTask(ExternalSystemTaskType.RESOLVE_PROJECT,entry.getKey(),path);
      final ExternalSystemTaskState taskState=resolveTask == null ? null : resolveTask.getState();
      if (taskState == null || taskState.isStopped() || (taskState == ExternalSystemTaskState.IN_PROGRESS && resolveTask.cancel())) {
        ExternalSystemUtil.refreshProject(myProject,entry.getKey(),path,myRefreshCallback,false,ProgressExecutionMode.IN_BACKGROUND_ASYNC,false);
      }
 else       if (taskState != ExternalSystemTaskState.NOT_STARTED) {
        scheduleRefresh=true;
        addPath(entry.getKey(),path);
      }
    }
  }
  if (scheduleRefresh) {
    myVfsAlarm.cancelAllRequests();
    myVfsAlarm.addRequest(myFilesRequest,ExternalSystemConstants.AUTO_IMPORT_DELAY_MILLIS);
  }
}
