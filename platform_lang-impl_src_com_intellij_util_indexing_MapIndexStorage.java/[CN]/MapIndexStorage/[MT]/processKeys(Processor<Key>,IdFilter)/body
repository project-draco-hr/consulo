{
  l.lock();
  try {
    myCache.clear();
    if (myBuildKeyHashToVirtualFileMapping && idFilter != null) {
      final TIntHashSet hashMaskSet=new TIntHashSet(1000);
      long l=System.currentTimeMillis();
      myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>(){
        @Override public boolean process(        int[] key){
          if (!idFilter.contains(key[1]))           return true;
          hashMaskSet.add(key[0]);
          ProgressManager.checkCanceled();
          return true;
        }
      }
);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Scanned keyHashToVirtualFileMapping of " + myStorageFile + " for "+ (System.currentTimeMillis() - l));
      }
      return myMap.processKeys(new Processor<Key>(){
        @Override public boolean process(        Key key){
          if (!hashMaskSet.contains(myKeyDescriptor.getHashCode(key)))           return true;
          return processor.process(key);
        }
      }
);
    }
    return myMap.processKeys(processor);
  }
 catch (  IOException e) {
    throw new StorageException(e);
  }
catch (  RuntimeException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof IOException) {
      throw new StorageException(cause);
    }
    if (cause instanceof StorageException) {
      throw (StorageException)cause;
    }
    throw e;
  }
 finally {
    l.unlock();
  }
}
