{
  final ValueContainerMap<Key,Value> map=new ValueContainerMap<Key,Value>(myStorageFile,myKeyDescriptor,myDataExternalizer);
  myCache=new SLRUCache<Key,ChangeTrackingValueContainer<Value>>(myCacheSize,(int)(Math.ceil(myCacheSize * 0.25))){
    @Override @NotNull public ChangeTrackingValueContainer<Value> createValue(    final Key key){
      return new ChangeTrackingValueContainer<Value>(new ChangeTrackingValueContainer.Initializer<Value>(){
        @NotNull @Override public Object getLock(){
          return map.getDataAccessLock();
        }
        @Nullable @Override public ValueContainer<Value> compute(){
          ValueContainer<Value> value;
          try {
            value=map.get(key);
            if (value == null) {
              value=new ValueContainerImpl<Value>();
            }
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          return value;
        }
      }
);
    }
    @Override protected void onDropFromCache(    final Key key,    @NotNull final ChangeTrackingValueContainer<Value> valueContainer){
      if (valueContainer.isDirty()) {
        try {
          map.put(key,valueContainer);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
;
  myMap=map;
  myKeyHashToVirtualFileMapping=myBuildKeyHashToVirtualFileMapping ? new KeyHash2VirtualFileEnumerator(getProjectFile()) : null;
}
