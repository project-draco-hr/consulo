{
  if (descriptors.isEmpty())   return;
  Map<RefElement,List<ProblemDescriptor>> problems=new HashMap<RefElement,List<ProblemDescriptor>>();
  final RefManagerImpl refManager=(RefManagerImpl)context.getRefManager();
  for (  ProblemDescriptor descriptor : descriptors) {
    final PsiElement element=descriptor.getPsiElement();
    if (element == null)     continue;
    if (filterSuppressed) {
      String alternativeId;
      String id;
      if (refManager.isDeclarationsFound() && (context.isSuppressed(element,id=tool.getID()) || (alternativeId=tool.getAlternativeID()) != null && !alternativeId.equals(id) && context.isSuppressed(element,alternativeId))) {
        continue;
      }
      if (SuppressionUtil.inspectionResultSuppressed(element,tool))       continue;
    }
    RefElement refElement=getProblemElementFunction.fun(tool,element,context);
    List<ProblemDescriptor> elementProblems=problems.get(refElement);
    if (elementProblems == null) {
      elementProblems=new ArrayList<ProblemDescriptor>();
      problems.put(refElement,elementProblems);
    }
    elementProblems.add(descriptor);
  }
  for (  Map.Entry<RefElement,List<ProblemDescriptor>> entry : problems.entrySet()) {
    final List<ProblemDescriptor> problemDescriptors=entry.getValue();
    RefElement refElement=entry.getKey();
    CommonProblemDescriptor[] descriptions=problemDescriptors.toArray(new CommonProblemDescriptor[problemDescriptors.size()]);
    dpi.addProblemElement(refElement,filterSuppressed,descriptions);
  }
}
