{
  final Comparator<AnAction> comparator=new Comparator<AnAction>(){
    public int compare(    final AnAction o1,    final AnAction o2){
      final String text1=o1.getTemplatePresentation().getText();
      final String text2=o2.getTemplatePresentation().getText();
      if (text1 != null && text2 != null) {
        if (Comparing.strEqual(name.toLowerCase(),text1.toLowerCase()))         return -1;
        if (Comparing.strEqual(name.toLowerCase(),text2.toLowerCase()))         return 1;
        return text1.compareToIgnoreCase(text2);
      }
      return 0;
    }
  }
;
  final TreeMap<AnAction,String> map=new TreeMap<AnAction,String>(comparator);
  final ActionManager actionManager=ActionManager.getInstance();
  final ActionGroup mainMenu=(ActionGroup)actionManager.getActionOrStub(IdeActions.GROUP_MAIN_MENU);
  collectActions(name,map,mainMenu,mainMenu.getTemplatePresentation().getText());
  final Map.Entry[] entries=map.entrySet().toArray(new Map.Entry[map.size()]);
  final TreeMap<AnAction,ActionGroup> additionalActions=new TreeMap<AnAction,ActionGroup>(comparator);
  if (checkBoxState) {
    final Set<String> ids=((ActionManagerImpl)actionManager).getActionIds();
    for (    AnAction action : map.keySet()) {
      ids.remove(actionManager.getId(action));
    }
    for (    String id : ids) {
      final AnAction anAction=actionManager.getAction(id);
      if (!(anAction instanceof ActionGroup) && ActionsTreeUtil.isActionFiltered(name,true).value(anAction)) {
        additionalActions.put(anAction,null);
      }
    }
    return ArrayUtil.mergeArrays(entries,additionalActions.entrySet().toArray(new Map.Entry[additionalActions.size()]),Map.Entry.class);
  }
  return entries;
}
