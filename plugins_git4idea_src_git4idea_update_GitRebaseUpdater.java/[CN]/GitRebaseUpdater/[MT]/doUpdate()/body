{
  LOG.info("doUpdate ");
  String remoteBranch=getRemoteBranchToMerge();
  final GitLineHandler rebaseHandler=new GitLineHandler(myProject,myRoot,GitCommand.REBASE);
  rebaseHandler.addParameters(remoteBranch);
  final GitRebaseProblemDetector rebaseConflictDetector=new GitRebaseProblemDetector();
  rebaseHandler.addLineListener(rebaseConflictDetector);
  GitMessageWithFilesDetector untrackedWouldBeOverwrittenDetector=new GitMessageWithFilesDetector(GitMessageWithFilesDetector.Event.UNTRACKED_FILES_OVERWRITTEN_BY,myRoot);
  rebaseHandler.addLineListener(untrackedWouldBeOverwrittenDetector);
  GitTask rebaseTask=new GitTask(myProject,rebaseHandler,"Rebasing");
  rebaseTask.setProgressIndicator(myProgressIndicator);
  rebaseTask.setProgressAnalyzer(new GitStandardProgressAnalyzer());
  final AtomicReference<GitUpdateResult> updateResult=new AtomicReference<GitUpdateResult>();
  final AtomicBoolean failure=new AtomicBoolean();
  rebaseTask.executeInBackground(true,new GitTaskResultHandlerAdapter(){
    @Override protected void onSuccess(){
      updateResult.set(GitUpdateResult.SUCCESS);
    }
    @Override protected void onCancel(){
      cancel();
      updateResult.set(GitUpdateResult.CANCEL);
    }
    @Override protected void onFailure(){
      failure.set(true);
    }
  }
);
  if (failure.get()) {
    updateResult.set(handleRebaseFailure(rebaseHandler,rebaseConflictDetector,untrackedWouldBeOverwrittenDetector));
  }
  return updateResult.get();
}
