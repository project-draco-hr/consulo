{
  final GitLineHandler pullHandler=makePullHandler(myRoot);
  final GitRebaseProblemDetector rebaseConflictDetector=new GitRebaseProblemDetector();
  pullHandler.addLineListener(rebaseConflictDetector);
  GitTask pullTask=new GitTask(myProject,pullHandler,"git pull");
  pullTask.setProgressAnalyzer(new GitStandardProgressAnalyzer());
  final AtomicReference<GitUpdateResult> updateResult=new AtomicReference<GitUpdateResult>();
  pullTask.executeInBackground(true,new GitTaskResultHandlerAdapter(){
    @Override protected void onSuccess(){
      updateResult.set(GitUpdateResult.SUCCESS);
    }
    @Override protected void onCancel(){
      cancel();
      updateResult.set(GitUpdateResult.CANCEL);
    }
    @Override protected void onFailure(){
      if (rebaseConflictDetector.isMergeConflict()) {
        try {
          Collection<VirtualFile> unmergedFiles=GitMergeUtil.getUnmergedFiles(myProject,myRoot);
          if (unmergedFiles.isEmpty()) {
            myRebaser.continueRebase(myRoot);
          }
 else {
            final Collection<VirtualFile> finalUnmergedFiles=unmergedFiles;
            UIUtil.invokeAndWaitIfNeeded(new Runnable(){
              @Override public void run(){
                myVcsHelper.showMergeDialog(new ArrayList<VirtualFile>(finalUnmergedFiles),myVcs.getReverseMergeProvider());
              }
            }
);
            unmergedFiles=GitMergeUtil.getUnmergedFiles(myProject,myRoot);
            if (unmergedFiles.isEmpty()) {
              myRebaser.continueRebase(myRoot);
            }
 else {
              updateResult.set(GitUpdateResult.INCOMPLETE);
              Notifications.Bus.notify(new Notification(GitVcs.IMPORTANT_ERROR_NOTIFICATION,"Can't continue rebase","You must resolve all conflicts first. <br/>" + "Then you may continue or abort rebase.",NotificationType.WARNING),myProject);
            }
          }
        }
 catch (        VcsException e) {
          updateResult.set(GitUpdateResult.INCOMPLETE);
          Notifications.Bus.notify(new Notification(GitVcs.IMPORTANT_ERROR_NOTIFICATION,"Can't continue rebase","Be sure to resolve all conflicts first. <br/>" + "Then you may continue or abort rebase.<br/>" + e.getLocalizedMessage(),NotificationType.WARNING),myProject);
        }
      }
 else {
        GitUIUtil.notifyImportantError(myProject,"Error rebasing",GitUIUtil.stringifyErrors(pullHandler.errors()));
        updateResult.set(GitUpdateResult.ERROR);
      }
    }
  }
);
  return updateResult.get();
}
