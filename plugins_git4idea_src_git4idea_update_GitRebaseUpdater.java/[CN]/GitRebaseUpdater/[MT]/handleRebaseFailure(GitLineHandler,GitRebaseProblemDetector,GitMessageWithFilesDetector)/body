{
  if (rebaseConflictDetector.isMergeConflict()) {
    LOG.info("handleRebaseFailure merge conflict");
    final boolean allMerged=new MyConflictResolver(myProject,myGit,myRoot,myRebaser).merge();
    return allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE;
  }
 else   if (untrackedWouldBeOverwrittenDetector.wasMessageDetected()) {
    LOG.info("handleRebaseFailure: untracked files would be overwritten by checkout");
    UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,untrackedWouldBeOverwrittenDetector.getFiles(),"rebase");
    return GitUpdateResult.ERROR;
  }
 else {
    LOG.info("handleRebaseFailure error " + pullHandler.errors());
    GitUIUtil.notifyImportantError(myProject,"Rebase error",GitUIUtil.stringifyErrors(pullHandler.errors()));
    return GitUpdateResult.ERROR;
  }
}
