{
  if (rebaseConflictDetector.isMergeConflict()) {
    final boolean allMerged=new GitMergeConflictResolver(myProject,true,"Merge conflicts detected. Resolve them before continuing rebase.","Can't continue rebase","Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing."){
      @Override protected boolean proceedIfNothingToMerge() throws VcsException {
        return myRebaser.continueRebase(myRoot);
      }
      @Override protected boolean proceedAfterAllMerged() throws VcsException {
        return myRebaser.continueRebase(myRoot);
      }
    }
.mergeFiles(Collections.singleton(myRoot));
    return allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE;
  }
 else {
    GitUIUtil.notifyImportantError(myProject,"Error rebasing",GitUIUtil.stringifyErrors(pullHandler.errors()));
    return GitUpdateResult.ERROR;
  }
}
