{
  w.lock();
  try {
    DbConnection.markDirty();
    final int root=getNames().enumerate(rootUrl);
    final DataInputStream input=readAttribute(1,ourChildrenAttr);
    int[] names=ArrayUtil.EMPTY_INT_ARRAY;
    int[] ids=ArrayUtil.EMPTY_INT_ARRAY;
    if (input != null) {
      try {
        final int count=DataInputOutputUtil.readINT(input);
        names=ArrayUtil.newIntArray(count);
        ids=ArrayUtil.newIntArray(count);
        int prevId=0;
        int prevNameId=0;
        for (int i=0; i < count; i++) {
          final int name=DataInputOutputUtil.readINT(input) + prevNameId;
          final int id=DataInputOutputUtil.readINT(input) + prevId;
          if (name == root) {
            return id;
          }
          prevNameId=names[i]=name;
          prevId=ids[i]=id;
        }
      }
  finally {
        input.close();
      }
    }
    final DataOutputStream output=writeAttribute(1,ourChildrenAttr);
    int id;
    try {
      id=createRecord();
      int index=Arrays.binarySearch(ids,id);
      ids=ArrayUtil.insert(ids,-index - 1,id);
      names=ArrayUtil.insert(names,-index - 1,root);
      saveNameIdSequenceWithDeltas(names,ids,output);
    }
  finally {
      output.close();
    }
    return id;
  }
 catch (  Throwable e) {
    throw DbConnection.handleError(e);
  }
 finally {
    w.unlock();
  }
}
