{
  checkFileIsValid(fileId);
  int recordId=getAttributeRecordId(fileId);
  int encodedAttrId=DbConnection.getAttributeId(attr.getId());
  boolean directoryRecord=false;
  Storage storage=getAttributesStorage();
  if (recordId == 0) {
    if (!toWrite)     return 0;
    recordId=storage.createNewRecord();
    setAttributeRecordId(fileId,recordId);
    directoryRecord=true;
  }
 else {
    DataInputStream attrRefs=storage.readStream(recordId);
    try {
      if (bulkAttrReadSupport)       skipRecordHeader(attrRefs,DbConnection.RESERVED_ATTR_ID,fileId);
      while (attrRefs.available() > 0) {
        final int attIdOnPage=DataInputOutputUtil.readINT(attrRefs);
        final int attrAddressOrSize=DataInputOutputUtil.readINT(attrRefs);
        if (attIdOnPage == encodedAttrId) {
          if (inlineAttributes) {
            return attrAddressOrSize < MAX_SMALL_ATTR_SIZE ? -recordId : attrAddressOrSize - MAX_SMALL_ATTR_SIZE;
          }
 else {
            return attrAddressOrSize;
          }
        }
 else {
          if (inlineAttributes && attrAddressOrSize < MAX_SMALL_ATTR_SIZE) {
            attrRefs.skipBytes(attrAddressOrSize);
          }
        }
      }
    }
  finally {
      attrRefs.close();
    }
  }
  if (toWrite) {
    Storage.AppenderStream appender=storage.appendStream(recordId);
    if (bulkAttrReadSupport) {
      if (directoryRecord) {
        DataInputOutputUtil.writeINT(appender,DbConnection.RESERVED_ATTR_ID);
        DataInputOutputUtil.writeINT(appender,fileId);
      }
    }
    DataInputOutputUtil.writeINT(appender,encodedAttrId);
    int attrAddress=storage.createNewRecord();
    DataInputOutputUtil.writeINT(appender,inlineAttributes ? attrAddress + MAX_SMALL_ATTR_SIZE : attrAddress);
    DbConnection.REASONABLY_SMALL.myAttrPageRequested=true;
    try {
      appender.close();
    }
  finally {
      DbConnection.REASONABLY_SMALL.myAttrPageRequested=false;
    }
    return attrAddress;
  }
  return 0;
}
