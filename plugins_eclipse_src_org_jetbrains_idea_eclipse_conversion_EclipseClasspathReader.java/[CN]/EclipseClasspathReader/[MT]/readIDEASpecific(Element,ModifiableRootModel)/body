{
  PathMacroManager.getInstance(model.getModule()).expandPaths(root);
  model.getModuleExtension(LanguageLevelModuleExtension.class).readExternal(root);
  final CompilerModuleExtension compilerModuleExtension=model.getModuleExtension(CompilerModuleExtension.class);
  final Element testOutputElement=root.getChild(IdeaXml.OUTPUT_TEST_TAG);
  if (testOutputElement != null) {
    compilerModuleExtension.setCompilerOutputPathForTests(testOutputElement.getAttributeValue(IdeaXml.URL_ATTR));
  }
  final String inheritedOutput=root.getAttributeValue(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR);
  if (inheritedOutput != null && Boolean.valueOf(inheritedOutput).booleanValue()) {
    compilerModuleExtension.inheritCompilerOutputPath(true);
  }
  compilerModuleExtension.setExcludeOutput(root.getChild(IdeaXml.EXCLUDE_OUTPUT_TAG) != null);
  final ContentEntry[] entries=model.getContentEntries();
  if (entries.length > 0) {
    for (    Object o : root.getChildren(IdeaXml.TEST_FOLDER_TAG)) {
      final String url=((Element)o).getAttributeValue(IdeaXml.URL_ATTR);
      SourceFolder folderToBeTest=null;
      for (      SourceFolder folder : entries[0].getSourceFolders()) {
        if (Comparing.strEqual(folder.getUrl(),url)) {
          folderToBeTest=folder;
          break;
        }
      }
      if (folderToBeTest != null) {
        entries[0].removeSourceFolder(folderToBeTest);
      }
      entries[0].addSourceFolder(url,true);
    }
    for (    Object o : root.getChildren(IdeaXml.EXCLUDE_FOLDER_TAG)) {
      entries[0].addExcludeFolder(((Element)o).getAttributeValue(IdeaXml.URL_ATTR));
    }
  }
  for (  Object o : root.getChildren("lib")) {
    Element libElement=(Element)o;
    final String libName=libElement.getAttributeValue("name");
    final Library libraryByName=model.getModuleLibraryTable().getLibraryByName(libName);
    if (libraryByName != null) {
      final Library.ModifiableModel modifiableModel=libraryByName.getModifiableModel();
      for (      Object r : libElement.getChildren("srcroot")) {
        modifiableModel.addRoot(((Element)r).getAttributeValue("url"),OrderRootType.SOURCES);
      }
      modifiableModel.commit();
    }
  }
}
