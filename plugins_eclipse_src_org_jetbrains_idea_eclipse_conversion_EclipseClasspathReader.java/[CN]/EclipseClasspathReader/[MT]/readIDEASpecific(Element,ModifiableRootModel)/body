{
  PathMacroManager.getInstance(model.getModule()).expandPaths(root);
  model.getModuleExtension(LanguageLevelModuleExtension.class).readExternal(root);
  final CompilerModuleExtension compilerModuleExtension=model.getModuleExtension(CompilerModuleExtension.class);
  final Element testOutputElement=root.getChild(IdeaXml.OUTPUT_TEST_TAG);
  if (testOutputElement != null) {
    compilerModuleExtension.setCompilerOutputPathForTests(testOutputElement.getAttributeValue(IdeaXml.URL_ATTR));
  }
  final String inheritedOutput=root.getAttributeValue(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR);
  if (inheritedOutput != null && Boolean.valueOf(inheritedOutput).booleanValue()) {
    compilerModuleExtension.inheritCompilerOutputPath(true);
  }
  compilerModuleExtension.setExcludeOutput(root.getChild(IdeaXml.EXCLUDE_OUTPUT_TAG) != null);
  final List entriesElements=root.getChildren(IdeaXml.CONTENT_ENTRY_TAG);
  if (!entriesElements.isEmpty()) {
    for (    Object o : entriesElements) {
      final Element contentEntryElement=(Element)o;
      final ContentEntry contentEntry=model.addContentEntry(contentEntryElement.getAttributeValue(IdeaXml.URL_ATTR));
      readContentFolders(contentEntryElement,contentEntry);
    }
  }
 else {
    final ContentEntry[] entries=model.getContentEntries();
    if (entries.length > 0) {
      readContentFolders(root,entries[0]);
    }
  }
  for (  Object o : root.getChildren("lib")) {
    Element libElement=(Element)o;
    final String libName=libElement.getAttributeValue("name");
    final Library libraryByName=model.getModuleLibraryTable().getLibraryByName(libName);
    if (libraryByName != null) {
      final Library.ModifiableModel modifiableModel=libraryByName.getModifiableModel();
      for (      Object r : libElement.getChildren("srcroot")) {
        modifiableModel.addRoot(((Element)r).getAttributeValue("url"),OrderRootType.SOURCES);
      }
      modifiableModel.commit();
    }
  }
}
