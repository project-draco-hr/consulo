{
  Element attributes=element.getChild("attributes");
  if (attributes == null) {
    return null;
  }
  List<String> result=new ArrayList<String>();
  for (  Object o : attributes.getChildren("attribute")) {
    if (Comparing.strEqual(((Element)o).getAttributeValue("name"),"javadoc_location")) {
      Element attribute=(Element)o;
      final String javadocPath=attribute.getAttributeValue("value");
      if (javadocPath.startsWith(EclipseXml.FILE_PROTOCOL) && new File(javadocPath.substring(EclipseXml.FILE_PROTOCOL.length())).exists()) {
        result.add(VfsUtil.pathToUrl(javadocPath.substring(EclipseXml.FILE_PROTOCOL.length())));
      }
 else {
        final String protocol=VirtualFileManager.extractProtocol(javadocPath);
        if (Comparing.strEqual(protocol,HttpFileSystem.getInstance().getProtocol())) {
          result.add(javadocPath);
        }
 else         if (javadocPath.startsWith(EclipseXml.JAR_PREFIX)) {
          final String jarJavadocPath=javadocPath.substring(EclipseXml.JAR_PREFIX.length());
          if (jarJavadocPath.startsWith(EclipseXml.PLATFORM_PROTOCOL)) {
            String relativeToPlatform=jarJavadocPath.substring(EclipseXml.PLATFORM_PROTOCOL.length() + "resources".length());
            result.add(VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL,new File(myRootPath).getParent() + "/" + relativeToPlatform));
          }
 else           if (jarJavadocPath.startsWith(EclipseXml.FILE_PROTOCOL)) {
            result.add(VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL,jarJavadocPath.substring(EclipseXml.FILE_PROTOCOL.length())));
          }
 else {
            result.add(javadocPath);
          }
        }
      }
    }
  }
  return result;
}
