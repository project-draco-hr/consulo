{
  if (myModuleNames == null) {
    return;
  }
  final File manifestFile=new File(myRootPath,"META-INF/MANIFEST.MF");
  if (!manifestFile.exists()) {
    return;
  }
  InputStream in=null;
  try {
    in=new BufferedInputStream(new FileInputStream(manifestFile));
    final Manifest manifest=new Manifest(in);
    final String attributes=manifest.getMainAttributes().getValue("Require-Bundle");
    if (!StringUtil.isEmpty(attributes)) {
      final StringTokenizer tokenizer=new StringTokenizer(attributes,",");
      while (tokenizer.hasMoreTokens()) {
        String bundle=tokenizer.nextToken().trim();
        if (!bundle.isEmpty()) {
          final int constraintIndex=bundle.indexOf(';');
          if (constraintIndex != -1) {
            bundle=bundle.substring(0,constraintIndex).trim();
          }
          if (myModuleNames.contains(bundle)) {
            refsToModules.add(bundle);
            rootModel.addInvalidModuleEntry(bundle);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ConversionException(e.getMessage());
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}
