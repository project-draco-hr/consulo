{
  boolean scroll=document.getTextLength() == logEditor.getCaretModel().getOffset();
  append(document,DateFormat.getTimeInstance(DateFormat.MEDIUM).format(notification.getCreationTime()) + " ");
  Pair<String,Boolean> pair=NotificationsManagerImpl.formatForLog(notification);
  final NotificationType type=notification.getType();
  ConsoleViewContentType contentType=type == NotificationType.ERROR ? ConsoleViewContentType.ERROR_OUTPUT : type == NotificationType.INFORMATION ? ConsoleViewContentType.NORMAL_OUTPUT : ConsoleViewContentType.WARNING_OUTPUT;
  int msgStart=document.getTextLength();
  append(document,pair.first);
  logEditor.getMarkupModel().addRangeHighlighter(msgStart,document.getTextLength(),HighlighterLayer.CARET_ROW + 1,contentType.getAttributes(),HighlighterTargetArea.EXACT_RANGE);
  if (pair.second) {
    String s=" ";
    append(document,s);
    int linkStart=document.getTextLength();
    append(document,"more");
    myHyperlinkSupport.addHyperlink(linkStart,document.getTextLength(),null,new HyperlinkInfo(){
      @Override public void navigate(      Project project){
        Balloon balloon=notification.getBalloon();
        if (balloon != null) {
          balloon.hide();
        }
        NotificationsManagerImpl.notifyByBalloon(notification,NotificationDisplayType.STICKY_BALLOON,project);
      }
    }
);
    append(document," ");
  }
  append(document,"\n");
  if (scroll) {
    logEditor.getCaretModel().moveToOffset(document.getTextLength());
    logEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  }
}
