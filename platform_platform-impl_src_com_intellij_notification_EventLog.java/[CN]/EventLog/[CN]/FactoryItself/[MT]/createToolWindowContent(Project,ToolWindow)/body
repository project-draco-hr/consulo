{
  final Editor editor=getProjectComponent(project).myConsole.getConsoleEditor();
  SimpleToolWindowPanel panel=new SimpleToolWindowPanel(false,true){
    @Override public Object getData(    @NonNls String dataId){
      return PlatformDataKeys.HELP_ID.is(dataId) ? HELP_ID : super.getData(dataId);
    }
  }
;
  panel.setContent(editor.getComponent());
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new DumbAwareAction("Settings","Edit notification settings",AllIcons.Actions.ShowSettings){
    @Override public void actionPerformed(    AnActionEvent e){
      ShowSettingsUtil.getInstance().editConfigurable(project,new NotificationsConfigurable());
    }
  }
);
  group.add(new DisplayBalloons());
  group.add(new ToggleUseSoftWrapsToolbarAction(SoftWrapAppliancePlaces.CONSOLE){
    @Override protected Editor getEditor(    AnActionEvent e){
      return editor;
    }
  }
);
  group.add(new ScrollToTheEndToolbarAction(editor));
  group.add(new DumbAwareAction("Mark all as read","Mark all unread notifications as read",AllIcons.General.Reset){
    @Override public void update(    AnActionEvent e){
      if (project.isDisposed())       return;
      e.getPresentation().setEnabled(!getProjectComponent(project).myProjectModel.getNotifications().isEmpty());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      LogModel model=getProjectComponent(project).myProjectModel;
      for (      Notification notification : model.getNotifications()) {
        model.removeNotification(notification);
        notification.expire();
      }
    }
  }
);
  group.add(new ContextHelpAction(HELP_ID));
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,false);
  toolbar.setTargetComponent(panel);
  panel.setToolbar(toolbar.getComponent());
  final Content content=ContentFactory.SERVICE.getInstance().createContent(panel,"",false);
  toolWindow.getContentManager().addContent(content);
}
