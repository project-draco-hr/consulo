{
  DocumentImpl logDoc=new DocumentImpl(true);
  AtomicBoolean showMore=new AtomicBoolean(false);
  Map<RangeMarker,HyperlinkInfo> links=new LinkedHashMap<RangeMarker,HyperlinkInfo>();
  List<RangeMarker> lineSeparators=new ArrayList<RangeMarker>();
  String title=notification.getTitle();
  String content=notification.getContent();
  RangeMarker afterTitle=null;
  boolean hasHtml=parseHtmlContent(title,notification,logDoc,showMore,links,lineSeparators);
  if (StringUtil.isNotEmpty(title)) {
    if (StringUtil.isNotEmpty(content)) {
      appendText(logDoc,": ");
      afterTitle=logDoc.createRangeMarker(logDoc.getTextLength() - 2,logDoc.getTextLength());
    }
  }
  hasHtml|=parseHtmlContent(content,notification,logDoc,showMore,links,lineSeparators);
  String status=getStatusText(logDoc,showMore,lineSeparators,hasHtml);
  indentNewLines(logDoc,lineSeparators,afterTitle,hasHtml);
  ArrayList<Pair<TextRange,HyperlinkInfo>> list=new ArrayList<Pair<TextRange,HyperlinkInfo>>();
  for (  RangeMarker marker : links.keySet()) {
    if (!marker.isValid()) {
      showMore.set(true);
      continue;
    }
    list.add(Pair.create(new TextRange(marker.getStartOffset(),marker.getEndOffset()),links.get(marker)));
  }
  if (showMore.get()) {
    String sb="show balloon";
    if (!logDoc.getText().endsWith(" ")) {
      appendText(logDoc," ");
    }
    appendText(logDoc,"(" + sb + ")");
    list.add(new Pair<TextRange,HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(),sb.length()),new ShowBalloon(notification)));
  }
  return new LogEntry(logDoc.getText(),status,list);
}
