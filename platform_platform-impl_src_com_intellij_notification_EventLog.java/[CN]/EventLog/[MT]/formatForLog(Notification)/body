{
  boolean showLink=notification.getListener() != null;
  String content=notification.getContent();
  String mainText=notification.getTitle();
  if (StringUtil.isNotEmpty(content) && !content.startsWith("<")) {
    if (StringUtil.isNotEmpty(mainText)) {
      mainText+=": ";
    }
    mainText+=content;
  }
  int nlIndex=eolIndex(mainText);
  if (nlIndex >= 0) {
    mainText=mainText.substring(0,nlIndex);
    showLink=true;
  }
  mainText=mainText.replaceAll("<[^>]*>","");
  String status=mainText;
  List<Pair<TextRange,HyperlinkInfo>> links=new ArrayList<Pair<TextRange,HyperlinkInfo>>();
  if (showLink) {
    mainText+=" more ";
    links.add(new Pair<TextRange,HyperlinkInfo>(TextRange.from(mainText.length() - 5,4),new HyperlinkInfo(){
      @Override public void navigate(      Project project){
        Balloon balloon=notification.getBalloon();
        if (balloon != null) {
          balloon.hide();
        }
        RelativePoint target=EventLog.getProjectComponent(project).myConsole.getHyperlinkLocation(this);
        if (target != null) {
          balloon=NotificationsManagerImpl.createBalloon(notification,true,true,false);
          balloon.show(target,Balloon.Position.above);
        }
      }
    }
));
  }
  return new LogEntry(mainText,status,links);
}
