{
  String content=notification.getContent();
  String mainText=notification.getTitle();
  boolean showMore=false;
  if (StringUtil.isNotEmpty(content)) {
    if (content.startsWith("<p>")) {
      content=content.substring("<p>".length());
    }
    if (content.startsWith("<") && !content.startsWith("<a ")) {
      showMore=true;
    }
 else {
      if (StringUtil.isNotEmpty(mainText)) {
        mainText+=": ";
      }
      mainText+=content;
    }
  }
  int nlIndex=eolIndex(mainText);
  if (nlIndex >= 0) {
    mainText=mainText.substring(0,nlIndex);
    showMore=true;
  }
  List<Pair<TextRange,HyperlinkInfo>> links=new ArrayList<Pair<TextRange,HyperlinkInfo>>();
  String message="";
  while (true) {
    Matcher tagMatcher=TAG_PATTERN.matcher(mainText);
    if (!tagMatcher.find()) {
      message+=mainText;
      break;
    }
    message+=mainText.substring(0,tagMatcher.start());
    Matcher aMatcher=A_PATTERN.matcher(tagMatcher.group());
    if (aMatcher.matches()) {
      final String href=aMatcher.group(2);
      int linkEnd=mainText.indexOf(A_CLOSING,tagMatcher.end());
      if (linkEnd > 0) {
        String linkText=mainText.substring(tagMatcher.end(),linkEnd).replaceAll(TAG_PATTERN.pattern(),"");
        links.add(new Pair<TextRange,HyperlinkInfo>(TextRange.from(message.length(),linkText.length()),new NotificationHyperlinkInfo(notification,href)));
        message+=linkText;
        mainText=mainText.substring(linkEnd + A_CLOSING.length());
        continue;
      }
    }
    mainText=mainText.substring(tagMatcher.end());
  }
  message=StringUtil.unescapeXml(StringUtil.convertLineSeparators(message));
  String status=message;
  if (showMore) {
    message+=" more ";
    links.add(new Pair<TextRange,HyperlinkInfo>(TextRange.from(message.length() - 5,4),new ShowBalloon(notification)));
  }
  return new LogEntry(message,status,links);
}
