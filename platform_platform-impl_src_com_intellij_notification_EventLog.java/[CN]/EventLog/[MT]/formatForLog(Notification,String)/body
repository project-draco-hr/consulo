{
  DocumentImpl logDoc=new DocumentImpl("",true);
  AtomicBoolean showMore=new AtomicBoolean(false);
  Map<RangeMarker,HyperlinkInfo> links=new LinkedHashMap<RangeMarker,HyperlinkInfo>();
  List<RangeMarker> lineSeparators=new ArrayList<RangeMarker>();
  String title=notification.getTitle();
  String subtitle=notification.getSubtitle();
  if (StringUtil.isNotEmpty(title) && StringUtil.isNotEmpty(subtitle)) {
    title+=" (" + subtitle + ")";
  }
  title=truncateLongString(showMore,title);
  String content=truncateLongString(showMore,notification.getContent());
  RangeMarker afterTitle=null;
  boolean hasHtml=parseHtmlContent(addIndents(title,indent),notification,logDoc,showMore,links,lineSeparators);
  if (StringUtil.isNotEmpty(title)) {
    if (StringUtil.isNotEmpty(content)) {
      appendText(logDoc,": ");
      afterTitle=logDoc.createRangeMarker(logDoc.getTextLength() - 2,logDoc.getTextLength());
    }
  }
  int titleLength=logDoc.getTextLength();
  hasHtml|=parseHtmlContent(addIndents(content,indent),notification,logDoc,showMore,links,lineSeparators);
  List<AnAction> actions=notification.getActions();
  if (NotificationsManagerImpl.newEnabled() && !actions.isEmpty()) {
    String text="<p>" + StringUtil.join(actions,new Function<AnAction,String>(){
      private int index;
      @Override public String fun(      AnAction action){
        return "<a href=\"" + index++ + "\">"+ action.getTemplatePresentation().getText()+ "</a>";
      }
    }
,isLongLine(actions) ? "<br>" : "&nbsp;") + "</p>";
    Notification n=new Notification("","",".",NotificationType.INFORMATION,new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification n,      @NotNull HyperlinkEvent event){
        Notification.fire(notification,notification.getActions().get(Integer.parseInt(event.getDescription())));
      }
    }
);
    if (title.length() > 0 || content.length() > 0) {
      lineSeparators.add(logDoc.createRangeMarker(TextRange.from(logDoc.getTextLength(),0)));
    }
    hasHtml|=parseHtmlContent(text,n,logDoc,showMore,links,lineSeparators);
  }
  String status=getStatusText(logDoc,showMore,lineSeparators,indent,hasHtml);
  indentNewLines(logDoc,lineSeparators,afterTitle,hasHtml,indent);
  ArrayList<Pair<TextRange,HyperlinkInfo>> list=new ArrayList<Pair<TextRange,HyperlinkInfo>>();
  for (  RangeMarker marker : links.keySet()) {
    if (!marker.isValid()) {
      showMore.set(true);
      continue;
    }
    list.add(Pair.create(new TextRange(marker.getStartOffset(),marker.getEndOffset()),links.get(marker)));
  }
  if (showMore.get()) {
    String sb="show balloon";
    if (!logDoc.getText().endsWith(" ")) {
      appendText(logDoc," ");
    }
    appendText(logDoc,"(" + sb + ")");
    list.add(new Pair<TextRange,HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(),sb.length()),new ShowBalloon(notification)));
  }
  return new LogEntry(logDoc.getText(),status,list,titleLength);
}
