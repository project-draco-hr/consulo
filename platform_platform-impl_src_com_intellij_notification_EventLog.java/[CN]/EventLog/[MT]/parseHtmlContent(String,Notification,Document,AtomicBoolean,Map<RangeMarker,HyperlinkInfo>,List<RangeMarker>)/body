{
  String content=StringUtil.convertLineSeparators(text);
  int initialLen=document.getTextLength();
  boolean hasHtml=false;
  while (true) {
    Matcher tagMatcher=TAG_PATTERN.matcher(content);
    if (!tagMatcher.find()) {
      appendText(document,content);
      break;
    }
    String tagStart=tagMatcher.group();
    appendText(document,content.substring(0,tagMatcher.start()));
    Matcher aMatcher=A_PATTERN.matcher(tagStart);
    if (aMatcher.matches()) {
      final String href=aMatcher.group(2);
      int linkEnd=content.indexOf(A_CLOSING,tagMatcher.end());
      if (linkEnd > 0) {
        String linkText=content.substring(tagMatcher.end(),linkEnd).replaceAll(TAG_PATTERN.pattern(),"");
        int linkStart=document.getTextLength();
        appendText(document,linkText);
        links.put(document.createRangeMarker(new TextRange(linkStart,document.getTextLength())),new NotificationHyperlinkInfo(notification,href));
        content=content.substring(linkEnd + A_CLOSING.length());
        continue;
      }
    }
    hasHtml=true;
    if (NEW_LINES.contains(tagStart)) {
      if (initialLen != document.getTextLength()) {
        lineSeparators.add(document.createRangeMarker(TextRange.from(document.getTextLength(),0)));
      }
    }
 else     if (!"<html>".equals(tagStart) && !"</html>".equals(tagStart) && !"<body>".equals(tagStart)&& !"</body>".equals(tagStart)) {
      showMore.set(true);
    }
    content=content.substring(tagMatcher.end());
  }
  for (Iterator<RangeMarker> iterator=lineSeparators.iterator(); iterator.hasNext(); ) {
    RangeMarker next=iterator.next();
    if (next.getEndOffset() == document.getTextLength()) {
      iterator.remove();
    }
  }
  return hasHtml;
}
