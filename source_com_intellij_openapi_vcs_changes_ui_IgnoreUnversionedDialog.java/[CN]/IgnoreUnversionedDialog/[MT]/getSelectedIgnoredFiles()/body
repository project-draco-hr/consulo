{
  VirtualFile projectDir=myProject.getBaseDir();
  if (myIgnoreSpecifiedFileRadioButton.isSelected()) {
    if (myFilesToIgnore == null) {
      IgnoredFileBean bean=new IgnoredFileBean();
      bean.setPath(myIgnoreFileTextField.getText().replace(File.separatorChar,'/'));
      return new IgnoredFileBean[]{bean};
    }
    IgnoredFileBean[] result=new IgnoredFileBean[myFilesToIgnore.size()];
    for (int i=0; i < myFilesToIgnore.size(); i++) {
      result[i]=new IgnoredFileBean();
      String path=FileUtil.getRelativePath(new File(projectDir.getPresentableUrl()),new File(myFilesToIgnore.get(i).getPresentableUrl()));
      result[i].setPath(path);
    }
    return result;
  }
  if (myIgnoreAllFilesUnderRadioButton.isSelected()) {
    IgnoredFileBean result=new IgnoredFileBean();
    String path=myIgnoreDirectoryTextField.getText();
    if (new File(path).isAbsolute()) {
      final String relPath=FileUtil.getRelativePath(new File(projectDir.getPresentableUrl()),new File(path));
      if (relPath != null) {
        path=relPath;
      }
    }
    if (!path.endsWith(File.separator)) {
      path+=File.separator;
    }
    result.setPath(FileUtil.toSystemIndependentName(path));
    return new IgnoredFileBean[]{result};
  }
  if (myIgnoreAllFilesMatchingRadioButton.isSelected()) {
    IgnoredFileBean result=new IgnoredFileBean();
    result.setMask(myIgnoreMaskTextField.getText());
    return new IgnoredFileBean[]{result};
  }
  return new IgnoredFileBean[0];
}
