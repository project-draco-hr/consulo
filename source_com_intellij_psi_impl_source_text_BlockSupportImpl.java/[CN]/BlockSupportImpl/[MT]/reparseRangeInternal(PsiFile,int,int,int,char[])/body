{
  final PsiFileImpl fileImpl=(PsiFileImpl)file;
  final int textLength=file.getTextLength() + lengthShift;
  if (fileImpl.getFileType() == StdFileTypes.JSP || fileImpl.getFileType() == StdFileTypes.JSPX) {
    makeFullParse(fileImpl.getTreeElement(),newFileText,textLength,fileImpl,fileImpl.getFileType());
    return;
  }
  final FileElement treeFileElement=fileImpl.getTreeElement();
  final ASTNode leafAtStart=treeFileElement.findLeafElementAt(startOffset);
  final ASTNode leafAtEnd=treeFileElement.findLeafElementAt(endOffset);
  ASTNode parent=leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart,leafAtEnd) : treeFileElement;
  int minErrorLevel=Integer.MAX_VALUE;
  ASTNode bestReparseable=null;
  ASTNode prevReparseable=null;
  boolean theOnlyReparseable=false;
  while (parent != null && !(parent instanceof FileElement)) {
    if (parent.getElementType() instanceof IChameleonElementType) {
      final TextRange textRange=parent.getTextRange();
      final IChameleonElementType reparseable=(IChameleonElementType)parent.getElementType();
      boolean languageChanged=false;
      if (prevReparseable != null) {
        languageChanged=prevReparseable.getElementType().getLanguage() != reparseable.getLanguage();
      }
      final String newTextStr=StringFactory.createStringFromConstantArray(newFileText,textRange.getStartOffset(),textRange.getLength() + lengthShift);
      if (reparseable.isParsable(newTextStr)) {
        final ChameleonElement chameleon=(ChameleonElement)Factory.createSingleLeafElement(reparseable,newFileText,textRange.getStartOffset(),textRange.getEndOffset() + lengthShift,null,null);
        ChangeUtil.replaceAllChildren((CompositeElement)parent,reparseable.parseContents(chameleon).getTreeParent());
        return;
      }
 else       if (reparseable instanceof IErrorCounterChameleonElementType) {
        int currentErrorLevel=((IErrorCounterChameleonElementType)reparseable).getErrorsCount(newTextStr);
        if (currentErrorLevel == IErrorCounterChameleonElementType.FATAL_ERROR) {
          prevReparseable=parent;
        }
 else         if (Math.abs(currentErrorLevel) < Math.abs(minErrorLevel)) {
          theOnlyReparseable=bestReparseable == null;
          bestReparseable=parent;
          minErrorLevel=currentErrorLevel;
          if (languageChanged)           break;
        }
      }
    }
    parent=parent.getTreeParent();
  }
  if (bestReparseable != null && !theOnlyReparseable) {
    final ASTNode treeElement=bestReparseable;
    final TextRange textRange=treeElement.getTextRange();
    final ChameleonElement chameleon=(ChameleonElement)Factory.createLeafElement(bestReparseable.getElementType(),newFileText,textRange.getStartOffset(),textRange.getEndOffset() + lengthShift,-1,treeFileElement.getCharTable());
    chameleon.putUserData(CharTable.CHAR_TABLE_KEY,treeFileElement.getCharTable());
    chameleon.setTreeParent((CompositeElement)parent);
    treeElement.replaceAllChildrenToChildrenOf(chameleon.transform(treeFileElement.getCharTable(),fileImpl.createLexer()).getTreeParent());
  }
 else {
    FileType fileType=file.getFileType();
    if (file instanceof PsiPlainTextFile) {
      fileType=StdFileTypes.PLAIN_TEXT;
    }
    final Grammar grammarByFileType=GrammarUtil.getGrammarByFileType(fileType);
    if (grammarByFileType != null) {
      ParsingUtil.reparse(grammarByFileType,treeFileElement.getCharTable(),treeFileElement,newFileText,startOffset,endOffset,lengthShift);
    }
 else {
      makeFullParse(parent,newFileText,textLength,fileImpl,fileType);
    }
  }
}
