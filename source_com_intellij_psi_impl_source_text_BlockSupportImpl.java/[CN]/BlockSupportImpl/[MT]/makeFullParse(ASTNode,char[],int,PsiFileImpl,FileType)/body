{
  if (parent instanceof CodeFragmentElement) {
    final FileElement holderElement=new DummyHolder(fileImpl.getManager(),null).getTreeElement();
    TreeUtil.addChildren(holderElement,fileImpl.createContentLeafElement(newFileText,0,textLength,holderElement.getCharTable()));
    parent.replaceAllChildrenToChildrenOf(holderElement);
  }
 else {
    final PsiManagerImpl manager=(PsiManagerImpl)fileImpl.getManager();
    final PsiElementFactoryImpl factory=(PsiElementFactoryImpl)manager.getElementFactory();
    final CharArrayCharSequence seq=new CharArrayCharSequence(newFileText,0,textLength);
    final PsiFileImpl newFile=(PsiFileImpl)factory.createFileFromText(fileImpl.getName(),fileType,seq,fileImpl.getModificationStamp(),true,false);
    newFile.setOriginalFile(fileImpl);
    final ASTNode newFileElement=newFile.getNode();
    final RepositoryManager repositoryManager=manager.getRepositoryManager();
    final FileElement fileElement=(FileElement)fileImpl.getNode();
    final int oldLength=fileElement.getTextLength();
    sendPsiBeforeEvent(fileImpl);
    if (repositoryManager != null)     repositoryManager.beforeChildAddedOrRemoved(fileImpl,fileElement);
    if (fileElement.getFirstChildNode() != null)     TreeUtil.removeRange(fileElement.getFirstChildNode(),null);
    final ASTNode firstChildNode=newFileElement.getFirstChildNode();
    if (firstChildNode != null)     TreeUtil.addChildren(fileElement,(TreeElement)firstChildNode);
    fileImpl.getTreeElement().setCharTable(newFile.getTreeElement().getCharTable());
    if (repositoryManager != null)     repositoryManager.beforeChildAddedOrRemoved(fileImpl,fileElement);
    manager.invalidateFile(fileImpl);
    fileElement.subtreeChanged();
    sendPsiAfterEvent(fileImpl,oldLength);
  }
}
