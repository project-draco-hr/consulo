{
  final int caretOffset=myEditor.getCaretModel().getOffset();
  final int fileOffset=caretOffset > 0 && caretOffset == myFile.getTextLength() ? caretOffset - 1 : caretOffset;
  PsiElement element;
  final PsiElement hostElement;
  if (myFile instanceof PsiCompiledElement) {
    hostElement=element=myFile;
  }
 else   if (PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
    FileViewProvider viewProvider=myFile.getViewProvider();
    hostElement=element=viewProvider.findElementAt(fileOffset,viewProvider.getBaseLanguage());
  }
 else {
    hostElement=myFile.getViewProvider().findElementAt(fileOffset,myFile.getLanguage());
    element=InjectedLanguageUtil.findElementAtNoCommit(myFile,fileOffset);
  }
  PsiFile injectedFile;
  Editor injectedEditor;
  if (element == null || element == hostElement) {
    injectedFile=myFile;
    injectedEditor=myEditor;
  }
 else {
    injectedFile=element.getContainingFile();
    injectedEditor=InjectedLanguageUtil.getInjectedEditorForInjectedFile(myEditor,injectedFile);
  }
  boolean result=true;
  Iterator<IntentionActionWithTextCaching> iterator=cachedActions.iterator();
  while (iterator.hasNext()) {
    IntentionActionWithTextCaching cachedAction=iterator.next();
    IntentionAction action=cachedAction.getAction();
    if (!ShowIntentionActionsHandler.availableFor(myFile,myEditor,action) && (hostElement == element || element != null && !ShowIntentionActionsHandler.availableFor(injectedFile,injectedEditor,action))) {
      iterator.remove();
      result=false;
    }
  }
  for (  HighlightInfo.IntentionActionDescriptor descriptor : descriptors) {
    final IntentionAction action=descriptor.getAction();
    if (element != null && element != hostElement && ShowIntentionActionsHandler.availableFor(injectedFile,injectedEditor,action)) {
      IntentionActionWithTextCaching cachedAction=wrapAction(descriptor,element,injectedFile,injectedEditor);
      result&=!cachedActions.add(cachedAction);
    }
 else     if (hostElement != null && ShowIntentionActionsHandler.availableFor(myFile,myEditor,action)) {
      IntentionActionWithTextCaching cachedAction=wrapAction(descriptor,hostElement,myFile,myEditor);
      result&=!cachedActions.add(cachedAction);
    }
  }
  return result;
}
