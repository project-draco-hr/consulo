{
  boolean result=true;
  final int caretOffset=myEditor.getCaretModel().getOffset();
  final int fileOffset=caretOffset > 0 && caretOffset == myFile.getTextLength() ? caretOffset - 1 : caretOffset;
  PsiElement element;
  if (myFile instanceof PsiCompiledElement) {
    element=myFile;
  }
 else   if (PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
    FileViewProvider viewProvider=myFile.getViewProvider();
    element=viewProvider.findElementAt(fileOffset,viewProvider.getBaseLanguage());
  }
 else {
    element=InjectedLanguageUtil.findElementAtNoCommit(myFile,fileOffset);
  }
  if (!descriptors.isEmpty()) {
    for (    HighlightInfo.IntentionActionDescriptor descriptor : descriptors) {
      IntentionAction action=descriptor.getAction();
      IntentionActionWithTextCaching cachedAction=new IntentionActionWithTextCaching(action,descriptor.getDisplayName(),descriptor.getIcon());
      result&=!cachedActions.add(cachedAction);
      final List<IntentionAction> options;
      if (element != null && (options=descriptor.getOptions(element)) != null) {
        for (        IntentionAction option : options) {
          boolean isErrorFix=myCachedErrorFixes.contains(new IntentionActionWithTextCaching(option,option.getText()));
          if (isErrorFix) {
            cachedAction.addErrorFix(option);
          }
          boolean isInspectionFix=myCachedInspectionFixes.contains(new IntentionActionWithTextCaching(option,option.getText()));
          if (isInspectionFix) {
            cachedAction.addInspectionFix(option);
          }
 else {
            cachedAction.addIntention(option);
          }
        }
      }
    }
  }
  result&=removeInvalidActions(cachedActions,element);
  return result;
}
