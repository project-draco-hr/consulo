{
  final int caretOffset=myEditor.getCaretModel().getOffset();
  final int fileOffset=caretOffset > 0 && caretOffset == myFile.getTextLength() ? caretOffset - 1 : caretOffset;
  PsiElement element;
  if (myFile instanceof PsiCompiledElement) {
    element=myFile;
  }
 else   if (PsiDocumentManager.getInstance(myProject).isUncommited(myEditor.getDocument())) {
    FileViewProvider viewProvider=myFile.getViewProvider();
    element=viewProvider.findElementAt(fileOffset,viewProvider.getBaseLanguage());
  }
 else {
    element=InjectedLanguageUtil.findElementAtNoCommit(myFile,fileOffset);
  }
  boolean result=removeInvalidActions(cachedActions,element);
  for (  HighlightInfo.IntentionActionDescriptor descriptor : descriptors) {
    IntentionAction action=descriptor.getAction();
    if (!isAvailable(action,element))     continue;
    IntentionActionWithTextCaching cachedAction=new IntentionActionWithTextCaching(action,descriptor.getDisplayName(),descriptor.getIcon());
    result&=!cachedActions.add(cachedAction);
    if (element == null)     continue;
    final List<IntentionAction> options=descriptor.getOptions(element);
    if (options != null) {
      for (      IntentionAction option : options) {
        if (!option.isAvailable(myProject,myEditor,element.getContainingFile()))         continue;
        IntentionActionWithTextCaching textCaching=new IntentionActionWithTextCaching(option,option.getText());
        boolean isErrorFix=myCachedErrorFixes.contains(textCaching);
        if (isErrorFix) {
          cachedAction.addErrorFix(option);
        }
        boolean isInspectionFix=myCachedInspectionFixes.contains(textCaching);
        if (isInspectionFix) {
          cachedAction.addInspectionFix(option);
        }
 else {
          cachedAction.addIntention(option);
        }
      }
    }
  }
  return result;
}
