{
  return new MapReduceIndex<Integer,SerializedStubTree,FileBasedIndex.FileContent>(getIndexer(),storage){
    public void update(    final int inputId,    @Nullable final FileBasedIndex.FileContent content,    @Nullable final FileBasedIndex.FileContent oldContent) throws StorageException {
      super.update(inputId,content,oldContent);
    }
    protected Map<Integer,SerializedStubTree> mapOld(    final FileBasedIndex.FileContent oldContent){
      final Map<Integer,SerializedStubTree> result=super.mapOld(oldContent);
      if (!result.isEmpty()) {
        final SerializedStubTree stub=result.values().iterator().next();
        final Map<StubIndexKey,Map<Object,Integer>> unmap=new StubTree((PsiFileStub)stub.getStub()).indexStubTree();
      }
      return result;
    }
    protected Map<Integer,SerializedStubTree> mapNew(    final FileBasedIndex.FileContent content){
      final Map<Integer,SerializedStubTree> result=super.mapOld(content);
      if (!result.isEmpty()) {
        final SerializedStubTree stub=result.values().iterator().next();
        final Map<StubIndexKey,Map<Object,Integer>> map=new StubTree((PsiFileStub)stub.getStub()).indexStubTree();
      }
      return super.mapNew(content);
    }
  }
;
}
