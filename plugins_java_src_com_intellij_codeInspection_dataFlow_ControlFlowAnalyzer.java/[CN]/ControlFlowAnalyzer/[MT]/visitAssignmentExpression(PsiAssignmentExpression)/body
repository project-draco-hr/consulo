{
  PsiExpression lExpr=expression.getLExpression();
  PsiExpression rExpr=expression.getRExpression();
  startElement(expression);
  if (rExpr == null) {
    pushUnknown();
    finishElement(expression);
    return;
  }
  lExpr.accept(this);
  IElementType op=expression.getOperationTokenType();
  PsiType type=expression.getType();
  boolean isBoolean=PsiType.BOOLEAN.equals(type);
  if (op == JavaTokenType.EQ) {
    rExpr.accept(this);
    generateBoxingUnboxingInstructionFor(rExpr,type);
  }
 else   if (op == JavaTokenType.ANDEQ) {
    if (isBoolean) {
      generateNonLazyExpression(true,lExpr,rExpr,type);
    }
 else {
      generateDefaultBinOp(lExpr,rExpr,type);
    }
  }
 else   if (op == JavaTokenType.OREQ) {
    if (isBoolean) {
      generateNonLazyExpression(false,lExpr,rExpr,type);
    }
 else {
      generateDefaultBinOp(lExpr,rExpr,type);
    }
  }
 else   if (op == JavaTokenType.XOREQ) {
    if (isBoolean) {
      generateXorExpression(expression,new PsiExpression[]{lExpr,rExpr},type);
    }
 else {
      generateDefaultBinOp(lExpr,rExpr,type);
    }
  }
 else   if (op == JavaTokenType.PLUSEQ && type != null && type.equalsToText(JAVA_LANG_STRING)) {
    lExpr.accept(this);
    rExpr.accept(this);
    addInstruction(new BinopInstruction(JavaTokenType.PLUS,null,lExpr.getProject()));
  }
 else {
    generateDefaultBinOp(lExpr,rExpr,type);
  }
  addInstruction(new AssignInstruction(rExpr));
  finishElement(expression);
}
