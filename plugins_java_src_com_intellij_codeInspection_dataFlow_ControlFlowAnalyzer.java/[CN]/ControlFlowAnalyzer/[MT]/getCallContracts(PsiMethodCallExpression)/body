{
  PsiMethod resolved=expression.resolveMethod();
  if (resolved != null) {
    final PsiAnnotation contractAnno=findContractAnnotation(resolved);
    if (contractAnno != null) {
      return CachedValuesManager.getCachedValue(contractAnno,new CachedValueProvider<List<MethodContract>>(){
        @Nullable @Override public Result<List<MethodContract>> compute(){
          String text=AnnotationUtil.getStringAttributeValue(contractAnno,null);
          if (text != null) {
            try {
              return Result.create(parseContract(text),contractAnno);
            }
 catch (            Exception ignored) {
            }
          }
          return Result.create(Collections.<MethodContract>emptyList(),contractAnno);
        }
      }
);
    }
    @NonNls String methodName=resolved.getName();
    PsiExpression[] params=expression.getArgumentList().getExpressions();
    PsiClass owner=resolved.getContainingClass();
    if (owner != null) {
      final String className=owner.getQualifiedName();
      if ("java.lang.System".equals(className)) {
        if ("exit".equals(methodName)) {
          return Collections.singletonList(new MethodContract(getAnyArgConstraints(params),ValueConstraint.SYSTEM_EXIT));
        }
      }
 else       if ("junit.framework.Assert".equals(className) || "org.junit.Assert".equals(className) || "junit.framework.TestCase".equals(className)|| "org.testng.Assert".equals(className)) {
        boolean testng="org.testng.Assert".equals(className);
        if ("fail".equals(methodName)) {
          return Collections.singletonList(new MethodContract(getAnyArgConstraints(params),ValueConstraint.THROW_EXCEPTION));
        }
        int checkedParam=testng ? 0 : params.length - 1;
        ValueConstraint[] constraints=getAnyArgConstraints(params);
        if ("assertTrue".equals(methodName)) {
          constraints[checkedParam]=ValueConstraint.FALSE_VALUE;
          return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
        }
        if ("assertFalse".equals(methodName)) {
          constraints[checkedParam]=ValueConstraint.TRUE_VALUE;
          return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
        }
        if ("assertNull".equals(methodName)) {
          constraints[checkedParam]=ValueConstraint.NOT_NULL_VALUE;
          return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
        }
        if ("assertNotNull".equals(methodName)) {
          constraints[checkedParam]=ValueConstraint.NULL_VALUE;
          return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
        }
        return Collections.emptyList();
      }
    }
    ConditionChecker checker=ConditionCheckManager.findConditionChecker(resolved);
    if (checker != null) {
      ValueConstraint[] constraints=getAnyArgConstraints(params);
      int checkedParam=checker.getCheckedParameterIndex();
      if (checkedParam >= constraints.length) {
        return Collections.emptyList();
      }
      ConditionChecker.Type type=checker.getConditionCheckType();
      if (type == ASSERT_IS_NULL_METHOD || type == ASSERT_IS_NOT_NULL_METHOD) {
        constraints[checkedParam]=type == ASSERT_IS_NOT_NULL_METHOD ? ValueConstraint.NULL_VALUE : ValueConstraint.NOT_NULL_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
 else       if (type == IS_NOT_NULL_METHOD || type == IS_NULL_METHOD) {
        constraints[checkedParam]=ValueConstraint.NULL_VALUE;
        return Collections.singletonList(new MethodContract(constraints,type == IS_NULL_METHOD ? ValueConstraint.TRUE_VALUE : ValueConstraint.FALSE_VALUE));
      }
 else {
        constraints[checkedParam]=type == ASSERT_FALSE_METHOD ? ValueConstraint.TRUE_VALUE : ValueConstraint.FALSE_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
    }
  }
  return Collections.emptyList();
}
