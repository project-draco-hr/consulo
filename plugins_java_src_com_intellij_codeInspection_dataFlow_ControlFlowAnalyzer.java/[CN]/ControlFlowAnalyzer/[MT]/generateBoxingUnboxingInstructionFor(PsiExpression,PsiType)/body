{
  PsiType exprType=expression.getType();
  if (TypeConversionUtil.isPrimitiveAndNotNull(expectedType) && TypeConversionUtil.isPrimitiveWrapper(exprType)) {
    addInstruction(new MethodCallInstruction(expression,MethodCallInstruction.MethodType.UNBOXING,expectedType));
  }
 else   if (TypeConversionUtil.isAssignableFromPrimitiveWrapper(expectedType) && TypeConversionUtil.isPrimitiveAndNotNull(exprType)) {
    addConditionalRuntimeThrow();
    addInstruction(new MethodCallInstruction(expression,MethodCallInstruction.MethodType.BOXING,expectedType));
  }
 else   if (exprType != expectedType && TypeConversionUtil.isPrimitiveAndNotNull(exprType) && TypeConversionUtil.isPrimitiveAndNotNull(expectedType) && TypeConversionUtil.isNumericType(exprType) && TypeConversionUtil.isNumericType(expectedType)) {
    addInstruction(new MethodCallInstruction(expression,MethodCallInstruction.MethodType.CAST,expectedType){
      @Override public DfaInstructionState[] accept(      DataFlowRunner runner,      DfaMemoryState stateBefore,      InstructionVisitor visitor){
        return visitor.visitCast(this,runner,stateBefore);
      }
    }
);
  }
}
