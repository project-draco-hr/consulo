{
  PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  if (psiFile == null)   return;
  PackageDependenciesNode node=myViewPanel.findNode(psiFile);
  if (node != null) {
    TreePath path=new TreePath(node.getPath());
    if (node instanceof FileNode && psiFile instanceof PsiJavaFile) {
      PsiClass[] classes=((PsiJavaFile)psiFile).getClasses();
      if (classes.length != 0) {
        ClassNode classNode=new ClassNode(classes[0]);
        path=path.getParentPath().pathByAddingChild(classNode);
      }
    }
    TreeUtil.selectPath(myTree,path);
    return;
  }
  NamedScope[] allScopes=myDependencyValidationManager.getScopes();
  for (  NamedScope scope : allScopes) {
    String name=scope.getName();
    if (name.equals(getSubId()))     continue;
    PackageSet packageSet=scope.getValue();
    if (packageSet.contains(psiFile,myDependencyValidationManager)) {
      myProjectView.changeView(getId(),name);
      myProjectView.getCurrentProjectViewPane().select(element,file,requestFocus);
      break;
    }
  }
}
