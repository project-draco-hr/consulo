{
  PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  if (psiFile == null)   return;
  List<NamedScope> allScopes=new ArrayList<NamedScope>();
  allScopes.addAll(Arrays.asList(myDependencyValidationManager.getScopes()));
  for (int i=0; i < allScopes.size(); i++) {
    final NamedScope scope=allScopes.get(i);
    String name=scope.getName();
    if (name.equals(getSubId())) {
      allScopes.set(i,allScopes.get(0));
      allScopes.set(0,scope);
      break;
    }
  }
  for (  NamedScope scope : allScopes) {
    String name=scope.getName();
    PackageSet packageSet=scope.getValue();
    if (packageSet.contains(psiFile,myDependencyValidationManager)) {
      if (!name.equals(getSubId())) {
        myProjectView.changeView(getId(),name);
      }
      PackageDependenciesNode node=myViewPanel.findNode(psiFile);
      if (node != null) {
        TreePath path=new TreePath(node.getPath());
        if (node instanceof FileNode && psiFile instanceof PsiJavaFile) {
          PsiClass[] classes=((PsiJavaFile)psiFile).getClasses();
          if (classes.length != 0) {
            ClassNode classNode=new ClassNode(classes[0]);
            path=path.getParentPath().pathByAddingChild(classNode);
          }
        }
        TreeUtil.selectPath(myTree,path);
      }
      break;
    }
  }
}
