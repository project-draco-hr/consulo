{
  final List<LineMarkerInfo> injectedMarkers=new ArrayList<LineMarkerInfo>();
  for (  PsiElement element : elements) {
    InjectedLanguageUtil.enumerate(element,file,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
      public void visit(      @NotNull final PsiFile injectedPsi,      @NotNull List<PsiLanguageInjectionHost.Shred> places){
        List<PsiElement> injElements=CollectHighlightsUtil.getElementsInRange(injectedPsi,0,injectedPsi.getTextLength());
        final List<LineMarkerProvider> providers=LineMarkerProviders.INSTANCE.allForLanguage(injectedPsi.getLanguage());
        processor.addLineMarkers(injElements,providers,injectedMarkers);
        Document document=PsiDocumentManager.getInstance(injectedPsi.getProject()).getCachedDocument(injectedPsi);
        if (!(document instanceof DocumentWindow))         return;
        DocumentWindow injectedDocument=(DocumentWindow)document;
        for (        final LineMarkerInfo injectedMarker : injectedMarkers) {
          GutterIconRenderer gutterRenderer=injectedMarker.createGutterRenderer();
          TextRange injectedRange=new TextRange(injectedMarker.startOffset,injectedMarker.endOffset);
          TextRange editable=injectedDocument.intersectWithEditable(injectedRange);
          if (editable == null)           continue;
          TextRange hostRange=manager.injectedToHost(injectedPsi,editable);
          Icon icon=gutterRenderer == null ? null : gutterRenderer.getIcon();
          LineMarkerInfo converted=new LineMarkerInfo(injectedMarker.getElement(),hostRange.getStartOffset(),icon,injectedMarker.updatePass,new Function<PsiElement,String>(){
            public String fun(            PsiElement element){
              return injectedMarker.getLineMarkerTooltip();
            }
          }
,injectedMarker.getNavigationHandler());
          converted.endOffset=hostRange.getEndOffset();
          result.add(converted);
        }
        injectedMarkers.clear();
      }
    }
,false);
  }
}
