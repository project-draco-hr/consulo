{
  if (member instanceof PsiCompiledElement)   return;
  final PsiMember patternMember;
  if (member instanceof PsiMethod) {
    PsiMethod patternMethod=(PsiMethod)member.copy();
    try {
      patternMethod.setName(newName);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
      return;
    }
    patternMember=patternMethod;
  }
 else {
    patternMember=member;
  }
  final PsiClass fieldClass=member.getContainingClass();
  for (PsiClass aClass=fieldClass.getContainingClass(); aClass != null; aClass=aClass.getContainingClass()) {
    final PsiMember conflict;
    if (member instanceof PsiMethod) {
      conflict=aClass.findMethodBySignature((PsiMethod)patternMember,true);
    }
 else {
      conflict=aClass.findFieldByName(newName,false);
    }
    if (conflict == null)     continue;
    ReferencesSearch.search(conflict).forEach(new Processor<PsiReference>(){
      public boolean process(      final PsiReference reference){
        PsiElement refElement=reference.getElement();
        if (refElement instanceof PsiReferenceExpression && ((PsiReferenceExpression)refElement).isQualified())         return true;
        if (PsiTreeUtil.isAncestor(fieldClass,refElement,false)) {
          MemberHidesOuterMemberUsageInfo info=new MemberHidesOuterMemberUsageInfo(refElement,member);
          result.add(info);
        }
        return true;
      }
    }
);
  }
}
