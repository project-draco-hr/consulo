{
  myProject=project;
  myGroups=Arrays.asList(groups);
  myContext=context;
  myRoot=new Root();
  final SimpleTreeStructure structure=new SimpleTreeStructure(){
    public Object getRootElement(){
      return myRoot;
    }
  }
;
  myTree=new SimpleTree(){
    @Override protected void configureUiHelper(    final TreeUIHelper helper){
      helper.installToolTipHandler(this);
    }
    @Override public boolean getScrollableTracksViewportWidth(){
      return true;
    }
  }
;
  myTree.setRowHeight(-1);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(new Renderer());
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myBuilder=new FilteringTreeBuilder(myProject,myTree,myContext.getFilter(),structure,new WeightBasedComparator(false)){
    @Override protected boolean isSelectable(    final Object nodeObject){
      return nodeObject instanceof EditorNode;
    }
  }
;
  myBuilder.setFilteringMerge(300);
  Disposer.register(this,myBuilder);
  myBuilder.updateFromRoot();
  setLayout(new BorderLayout());
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    final ComponentEvent e){
      revalidateTree();
    }
    @Override public void componentMoved(    final ComponentEvent e){
      revalidateTree();
    }
    @Override public void componentShown(    final ComponentEvent e){
      revalidateTree();
    }
  }
);
  final JScrollPane scrolls=new JScrollPane(myTree);
  final JScrollBar sb=new JScrollBar(JScrollBar.HORIZONTAL){
    @Override public void setVisible(    final boolean aFlag){
      super.setVisible(aFlag);
    }
  }
;
  scrolls.setHorizontalScrollBar(sb);
  myTree.setBorder(new EmptyBorder(2,2,2,2));
  add(scrolls,BorderLayout.CENTER);
  mySelection=new MergingUpdateQueue("OptionsTree",150,false,this,this,this).setRestartTimerOnAdd(true);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      final TreePath path=e.getNewLeadSelectionPath();
      if (path == null) {
        queueSelection(null);
      }
 else {
        final Base base=extractNode(path.getLastPathComponent());
        queueSelection(base != null ? base.getConfigurable() : null);
      }
    }
  }
);
  myTree.addKeyListener(new KeyListener(){
    public void keyTyped(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
    public void keyPressed(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
    public void keyReleased(    final KeyEvent e){
      _onTreeKeyEvent(e);
    }
  }
);
}
