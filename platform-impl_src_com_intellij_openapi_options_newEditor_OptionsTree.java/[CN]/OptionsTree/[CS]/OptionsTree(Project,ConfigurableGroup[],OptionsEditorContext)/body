{
  myProject=project;
  myGroups=Arrays.asList(groups);
  myContext=context;
  myRoot=new Root();
  final SimpleTreeStructure structure=new SimpleTreeStructure(){
    public Object getRootElement(){
      return myRoot;
    }
  }
;
  myTree=new SimpleTree();
  myTree.setRowHeight(-1);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(new Renderer());
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myBuilder=new FilteringTreeBuilder(myProject,myTree,myContext.getFilter(),structure,new WeightBasedComparator(false));
  Disposer.register(this,myBuilder);
  myBuilder.updateFromRoot();
  setLayout(new BorderLayout());
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    final ComponentEvent e){
      revalidateTree();
    }
    @Override public void componentMoved(    final ComponentEvent e){
      revalidateTree();
    }
    @Override public void componentShown(    final ComponentEvent e){
      revalidateTree();
    }
  }
);
  final JScrollPane scrolls=new JScrollPane(myTree);
  add(scrolls,BorderLayout.CENTER);
  mySelection=new MergingUpdateQueue("OptionsTree",250,false,this,this,this).setRestartTimerOnAdd(true);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      final TreePath path=e.getNewLeadSelectionPath();
      if (path == null) {
        queueSelection(null);
      }
 else {
        final Base base=extractNode(path.getLastPathComponent());
        queueSelection(base != null ? base.getConfigurable() : null);
      }
    }
  }
);
}
