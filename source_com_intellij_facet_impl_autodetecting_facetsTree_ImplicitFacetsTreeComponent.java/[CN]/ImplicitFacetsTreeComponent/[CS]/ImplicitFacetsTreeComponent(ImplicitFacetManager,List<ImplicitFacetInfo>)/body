{
  myImplicitFacetManager=implicitFacetManager;
  Map<Facet,ImplicitFacetInfo> facet2info=new HashMap<Facet,ImplicitFacetInfo>();
  for (  ImplicitFacetInfo implicitFacet : implicitFacets) {
    facet2info.put(implicitFacet.getFacet(),implicitFacet);
  }
  Map<FacetType,DetectedFacetsTree.FacetTypeNode> facetTypeNodes=new HashMap<FacetType,DetectedFacetsTree.FacetTypeNode>();
  Map<Module,ModuleNodeImpl> moduleNodes=new HashMap<Module,ModuleNodeImpl>();
  Collection<ImplicitFacetInfo> sortedFacets=new LinkedHashSet<ImplicitFacetInfo>();
  for (  ImplicitFacetInfo facet : implicitFacets) {
    addUnderlying(facet,sortedFacets,facet2info);
  }
  Map<Facet,DetectedFacetsTree.FacetNode> facetNodes=new HashMap<Facet,DetectedFacetsTree.FacetNode>();
  for (  ImplicitFacetInfo implicitFacet : sortedFacets) {
    FacetType facetType=getRootFacetType(implicitFacet,facet2info);
    DetectedFacetsTree.FacetTypeNode facetTypeNode=facetTypeNodes.get(facetType);
    if (facetTypeNode == null) {
      facetTypeNode=new DetectedFacetsTree.FacetTypeNode(facetType);
      facetTypeNodes.put(facetType,facetTypeNode);
    }
    Facet facet=implicitFacet.getFacet();
    Module module=facet.getModule();
    ModuleNodeImpl moduleNode=findOrCreateModuleNode(facetTypeNode,module);
    DetectedFacetsTree.FacetNode parentNode=null;
    Facet underlyingFacet=facet.getUnderlyingFacet();
    if (underlyingFacet != null) {
      parentNode=facetNodes.get(underlyingFacet);
    }
    DetectedFacetsTree.FacetNode facetNode=new FacetNodeImpl(implicitFacet,implicitFacet.getRelativeFileUrl(),parentNode);
    facetNodes.put(facet,facetNode);
    if (parentNode == null) {
      moduleNode.addRootFacet(facetNode);
    }
  }
  myFacetTypeNodes=facetTypeNodes.values();
  myTree=new DetectedFacetsTree(myFacetTypeNodes){
    protected void onDoubleClick(    final CheckedTreeNode node){
      if (node instanceof FacetNodeImpl) {
        ModulesConfigurator.showFacetSettingsDialog(((FacetNodeImpl)node).getImplicitFacetInfo().getFacet(),null);
      }
    }
  }
;
}
