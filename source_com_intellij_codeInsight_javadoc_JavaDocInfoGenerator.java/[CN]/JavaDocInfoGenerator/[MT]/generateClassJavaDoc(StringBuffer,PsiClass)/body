{
  if (aClass instanceof PsiAnonymousClass)   return;
  PsiManager manager=aClass.getManager();
  generatePrologue(buffer);
  PsiFile file=aClass.getContainingFile();
  if (file instanceof PsiJavaFile) {
    String packageName=((PsiJavaFile)file).getPackageName();
    if (packageName.length() > 0) {
      buffer.append("<font size=\"-1\"><b>");
      buffer.append(packageName);
      buffer.append("</b></font>");
    }
  }
  buffer.append("<PRE>");
  String modifiers=PsiFormatUtil.formatModifiers(aClass,PsiFormatUtil.JAVADOC_MODIFIERS_ONLY);
  if (modifiers.length() > 0) {
    buffer.append(modifiers);
    buffer.append(" ");
  }
  buffer.append(aClass.isInterface() ? "interface" : "class");
  buffer.append(" ");
  String refText=JavaDocUtil.getReferenceText(myProject,aClass);
  if (refText == null) {
    buffer.setLength(0);
    return;
  }
  String labelText=JavaDocUtil.getLabelText(myProject,manager,refText,aClass);
  buffer.append("<b>");
  buffer.append(labelText);
  buffer.append("</b>");
  buffer.append(generateTypeParameters(aClass));
  buffer.append("\n");
  PsiClassType[] refs=JavaDocUtil.getExtendsList(aClass);
  String qName=aClass.getQualifiedName();
  if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals("java.lang.Object"))) {
    buffer.append("extends ");
    if (refs.length == 0) {
      generateLink(buffer,"java.lang.Object",null,aClass,false);
    }
 else {
      for (int i=0; i < refs.length; i++) {
        generateType(buffer,refs[i],aClass);
        if (i < refs.length - 1) {
          buffer.append(",&nbsp;");
        }
      }
    }
    buffer.append("\n");
  }
  refs=JavaDocUtil.getImplementsList(aClass);
  if (refs.length > 0) {
    buffer.append("implements ");
    for (int i=0; i < refs.length; i++) {
      generateType(buffer,refs[i],aClass);
      if (i < refs.length - 1) {
        buffer.append(",&nbsp;");
      }
    }
    buffer.append("\n");
  }
  if (buffer.charAt(buffer.length() - 1) == '\n') {
    buffer.setLength(buffer.length() - 1);
  }
  buffer.append("</PRE>");
  PsiDocComment comment=aClass.getDocComment();
  if (comment != null) {
    generateDescription(buffer,comment);
    generateDeprecatedSection(buffer,comment);
    generateSinceSection(buffer,comment);
    generateSeeAlsoSection(buffer,comment);
  }
  generateEpilogue(buffer);
}
