{
  generatePrologue(buffer);
  PsiClass parentClass=method.getContainingClass();
  if (parentClass != null) {
    String qName=parentClass.getQualifiedName();
    if (qName != null) {
      buffer.append("<font size=\"-1\"><b>");
      generateLink(buffer,qName,qName,method,false);
      buffer.append("</b></font>");
    }
  }
  buffer.append("<PRE>");
  int indent=0;
  String modifiers=PsiFormatUtil.formatModifiers(method,PsiFormatUtil.JAVADOC_MODIFIERS_ONLY);
  if (modifiers.length() > 0) {
    buffer.append(modifiers);
    buffer.append("&nbsp;");
    indent+=modifiers.length() + 1;
  }
  PsiTypeParameter[] params=method.getTypeParameterList().getTypeParameters();
  if (params.length > 0) {
    buffer.append("&lt;");
    for (int i=0; i < params.length; i++) {
      PsiTypeParameter param=params[i];
      buffer.append(param.getName());
      PsiClassType[] extendees=JavaDocUtil.getExtendsList(param);
      if (extendees.length > 0) {
        buffer.append(" extends ");
        for (int j=0; j < extendees.length; j++) {
          generateType(buffer,extendees[j],method);
          if (j < extendees.length - 1) {
            buffer.append(" & ");
          }
        }
      }
      if (i < params.length - 1) {
        buffer.append(", ");
      }
    }
    buffer.append("&gt; ");
  }
  if (method.getReturnType() != null) {
    indent+=generateType(buffer,method.getReturnType(),method);
    buffer.append("&nbsp;");
    indent++;
  }
  buffer.append("<b>");
  String name=method.getName();
  buffer.append(name);
  buffer.append("</b>");
  indent+=name.length();
  buffer.append("(");
  indent++;
  indent--;
  PsiParameter[] parms=method.getParameterList().getParameters();
  for (int i=0; i < parms.length; i++) {
    PsiParameter parm=parms[i];
    generateType(buffer,parm.getType(),method);
    buffer.append("&nbsp;");
    if (parm.getName() != null) {
      buffer.append(parm.getName());
    }
    if (i < parms.length - 1) {
      buffer.append(",\n");
      for (int j=0; j < indent; j++) {
        buffer.append(" ");
      }
    }
  }
  buffer.append(")");
  PsiClassType[] refs=method.getThrowsList().getReferencedTypes();
  if (refs.length > 0) {
    buffer.append("\n");
    indent-="throws".length() + 1;
    for (int i=0; i < indent; i++) {
      buffer.append(" ");
    }
    indent+="throws".length() + 1;
    buffer.append("throws&nbsp;");
    for (int i=0; i < refs.length; i++) {
      generateLink(buffer,refs[i].getCanonicalText(),null,method,false);
      if (i < refs.length - 1) {
        buffer.append(",\n");
        for (int j=0; j < indent; j++) {
          buffer.append(" ");
        }
      }
    }
  }
  buffer.append("</PRE>");
  PsiDocComment comment=method.getDocComment();
  generateMethodDescription(buffer,method);
  generateSuperMethodsSection(buffer,method,false);
  generateSuperMethodsSection(buffer,method,true);
  if (comment != null) {
    generateDeprecatedSection(buffer,comment);
  }
  generateParametersSection(buffer,method);
  generateReturnsSection(buffer,method);
  generateThrowsSection(buffer,method);
  if (comment != null) {
    generateSinceSection(buffer,comment);
    generateSeeAlsoSection(buffer,comment);
  }
  generateEpilogue(buffer);
}
