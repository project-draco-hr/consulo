{
  PsiClass parentClass=method.getContainingClass();
  if (parentClass == null)   return;
  if (parentClass.isInterface() && !overrides)   return;
  PsiMethod[] supers=PsiSuperMethodUtil.findSuperMethods(method);
  if (supers.length == 0)   return;
  boolean headerGenerated=false;
  for (  PsiMethod superMethod : supers) {
    boolean isAbstract=superMethod.hasModifierProperty(PsiModifier.ABSTRACT);
    if (overrides) {
      if (parentClass.isInterface() ? !isAbstract : isAbstract)       continue;
    }
 else {
      if (!isAbstract)       continue;
    }
    PsiClass superClass=superMethod.getContainingClass();
    if (!headerGenerated) {
      buffer.append("<DD><DL>");
      buffer.append("<DT><b>");
      buffer.append(overrides ? "Overrides:" : "Specified by:");
      buffer.append("</b>");
      headerGenerated=true;
    }
    buffer.append("<DD>");
    generateLink(buffer,superMethod,superMethod.getName());
    buffer.append(" in ");
    buffer.append(superClass.isInterface() ? "interface " : "class ");
    generateLink(buffer,superClass,superClass.getName());
  }
  if (headerGenerated) {
    buffer.append("</DD></DL></DD>");
  }
}
