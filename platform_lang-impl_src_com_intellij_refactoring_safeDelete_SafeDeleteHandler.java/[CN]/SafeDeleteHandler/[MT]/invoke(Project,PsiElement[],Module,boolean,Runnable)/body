{
  for (  PsiElement element : elements) {
    if (!SafeDeleteProcessor.validElement(element)) {
      return;
    }
  }
  final PsiElement[] temptoDelete=PsiTreeUtil.filterAncestors(elements);
  Set<PsiElement> elementsSet=new HashSet<PsiElement>(Arrays.asList(temptoDelete));
  Set<PsiElement> fullElementsSet=new LinkedHashSet<PsiElement>();
  if (checkDelegates) {
    for (    PsiElement element : temptoDelete) {
      boolean found=false;
      for (      SafeDeleteProcessorDelegate delegate : Extensions.getExtensions(SafeDeleteProcessorDelegate.EP_NAME)) {
        if (delegate.handlesElement(element)) {
          found=true;
          Collection<? extends PsiElement> addElements=delegate instanceof SafeDeleteProcessorDelegateBase ? ((SafeDeleteProcessorDelegateBase)delegate).getElementsToSearch(element,module,elementsSet) : delegate.getElementsToSearch(element,elementsSet);
          if (addElements == null)           return;
          fullElementsSet.addAll(addElements);
          break;
        }
      }
      if (!found) {
        fullElementsSet.add(element);
      }
    }
  }
 else {
    ContainerUtil.addAll(fullElementsSet,temptoDelete);
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatusRecursively(project,fullElementsSet,true))   return;
  final PsiElement[] elementsToDelete=PsiUtilCore.toPsiElementArray(fullElementsSet);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    RefactoringSettings settings=RefactoringSettings.getInstance();
    SafeDeleteProcessor.createInstance(project,null,elementsToDelete,settings.SAFE_DELETE_SEARCH_IN_COMMENTS,settings.SAFE_DELETE_SEARCH_IN_NON_JAVA,true).run();
    if (successRunnable != null)     successRunnable.run();
  }
 else {
    final SafeDeleteDialog.Callback callback=new SafeDeleteDialog.Callback(){
      @Override public void run(      final SafeDeleteDialog dialog){
        SafeDeleteProcessor.createInstance(project,new Runnable(){
          @Override public void run(){
            if (successRunnable != null) {
              successRunnable.run();
            }
            dialog.close(DialogWrapper.CANCEL_EXIT_CODE);
          }
        }
,elementsToDelete,dialog.isSearchInComments(),dialog.isSearchForTextOccurences(),true).run();
      }
    }
;
    SafeDeleteDialog dialog=new SafeDeleteDialog(project,elementsToDelete,callback);
    dialog.show();
  }
}
