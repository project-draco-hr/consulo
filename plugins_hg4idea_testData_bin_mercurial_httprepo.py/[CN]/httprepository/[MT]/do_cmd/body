def do_cmd(self, cmd, **args):
    data = args.pop('data', None)
    headers = args.pop('headers', {})
    self.ui.debug(('sending %s command\n' % cmd))
    q = {'cmd': cmd, }
    q.update(args)
    qs = ('?%s' % urllib.urlencode(q))
    cu = ('%s%s' % (self._url, qs))
    req = urllib2.Request(cu, data, headers)
    if (data is not None):
        size = data.__len__()
        self.ui.debug(('sending %s bytes\n' % size))
        req.add_unredirected_header('Content-Length', ('%d' % size))
    try:
        resp = self.urlopener.open(req)
    except urllib2.HTTPError as inst:
        if (inst.code == 401):
            raise util.Abort(_('authorization failed'))
        raise
    except httplib.HTTPException as inst:
        self.ui.debug(('http error while sending %s command\n' % cmd))
        self.ui.traceback()
        raise IOError(None, inst)
    except IndexError:
        raise util.Abort(_('http error, possibly caused by proxy setting'))
    resp_url = resp.geturl()
    if resp_url.endswith(qs):
        resp_url = resp_url[:(- len(qs))]
    if (self._url.rstrip('/') != resp_url.rstrip('/')):
        self.ui.status((_('real URL is %s\n') % resp_url))
    self._url = resp_url
    try:
        proto = resp.getheader('content-type')
    except AttributeError:
        proto = resp.headers['content-type']
    safeurl = url.hidepassword(self._url)
    if (not (proto.startswith('application/mercurial-') or proto.startswith('text/plain') or proto.startswith('application/hg-changegroup'))):
        self.ui.debug(("requested URL: '%s'\n" % url.hidepassword(cu)))
        raise error.RepoError((_("'%s' does not appear to be an hg repository:\n---%%<--- (%s)\n%s\n---%%<---\n") % (safeurl, proto, resp.read())))
    if proto.startswith('application/mercurial-'):
        try:
            version = proto.split('-', 1)[1]
            version_info = tuple([int(n) for n in version.split('.')])
        except ValueError:
            raise error.RepoError((_("'%s' sent a broken Content-Type header (%s)") % (safeurl, proto)))
        if (version_info > (0, 1)):
            raise error.RepoError((_("'%s' uses newer protocol %s") % (safeurl, version)))
    return resp
