{
  final ProjectFileIndex index=ProjectRootManager.getInstance(myProject).getFileIndex();
  final Processor<VirtualFile> virtualFileProcessor=new Processor<VirtualFile>(){
    public boolean process(    final VirtualFile virtualFile){
      LOG.assertTrue(virtualFile.isValid());
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          if (virtualFile.isValid() && scope.contains(virtualFile) && (index.isInContent(virtualFile) || index.isInLibrarySource(virtualFile))) {
            if (virtualFile.getFileType().isBinary())             return Boolean.TRUE;
            final PsiFile psiFile=myPsiManager.findFile(virtualFile);
            return psiFile == null || psiFileProcessor.process(psiFile);
          }
          return Boolean.TRUE;
        }
      }
).booleanValue();
    }
  }
;
  final Set<VirtualFile> vFiles=new THashSet<VirtualFile>();
  return FileBasedIndex.getInstance().processValues(IdIndex.NAME,new IdIndexEntry(word,caseSensitively),null,new FileBasedIndex.ValueProcessor<Integer>(){
    public boolean process(    final VirtualFile file,    final Integer value){
      final int mask=value.intValue();
      return (mask & occurrenceMask) == 0 || !vFiles.add(file) || virtualFileProcessor.process(file);
    }
  }
,GlobalSearchScope.allScope(myProject));
}
