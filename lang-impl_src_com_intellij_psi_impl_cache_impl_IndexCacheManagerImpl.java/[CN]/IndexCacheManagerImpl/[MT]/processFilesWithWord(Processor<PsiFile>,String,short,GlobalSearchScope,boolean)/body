{
  final ProjectFileIndex index=ProjectRootManager.getInstance(myProject).getFileIndex();
  Processor<VirtualFile> virtualFileProcessor=new Processor<VirtualFile>(){
    public boolean process(    final VirtualFile virtualFile){
      LOG.assertTrue(virtualFile.isValid());
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          if (virtualFile.isValid() || scope.contains(virtualFile) && (index.isInContent(virtualFile) || index.isInLibrarySource(virtualFile))) {
            if (virtualFile.getFileType().isBinary())             return Boolean.TRUE;
            final PsiFile psiFile=myPsiManager.findFile(virtualFile);
            return psiFile == null || psiFileProcessor.process(psiFile);
          }
          return Boolean.TRUE;
        }
      }
).booleanValue();
    }
  }
;
  final Set<VirtualFile> vFiles=new HashSet<VirtualFile>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      FileBasedIndex.getInstance().processValues(IdIndex.NAME,new IdIndexEntry(word,caseSensitively),null,new FileBasedIndex.ValueProcessor<Integer>(){
        public void process(        final VirtualFile file,        final Integer value){
          final int mask=value.intValue();
          if ((mask & occurrenceMask) != 0) {
            vFiles.add(file);
          }
        }
      }
,VirtualFileFilter.ALL);
    }
  }
);
  for (  VirtualFile vFile : vFiles) {
    if (!virtualFileProcessor.process(vFile)) {
      return false;
    }
  }
  return true;
}
