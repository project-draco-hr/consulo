{
  final Method[] methods=DomReflectionUtil.getGetterMethods(accessor.value(),myClass);
  final int lastElement=methods.length - 1;
  return new Invocation(){
    public final Object invoke(    final DomInvocationHandler handler,    final Object[] args) throws Throwable {
      return invoke(0,handler.getProxy());
    }
    private Object invoke(    final int i,    final Object object) throws IllegalAccessException, InvocationTargetException {
      final Object o=methods[i].invoke(object);
      if (i == lastElement)       return o;
      if (o instanceof List) {
        List result=new ArrayList();
        for (        Object o1 : (List)o) {
          result.add(invoke(i + 1,o1));
        }
        return result;
      }
      return invoke(i + 1,o);
    }
  }
;
}
