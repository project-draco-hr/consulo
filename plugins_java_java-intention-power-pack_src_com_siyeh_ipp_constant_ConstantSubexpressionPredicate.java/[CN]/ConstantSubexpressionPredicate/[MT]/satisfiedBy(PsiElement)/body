{
  final PsiJavaToken token;
  if (element instanceof PsiJavaToken) {
    token=(PsiJavaToken)element;
  }
 else {
    final PsiElement prevSibling=element.getPrevSibling();
    if (prevSibling instanceof PsiJavaToken) {
      token=(PsiJavaToken)prevSibling;
    }
 else {
      return false;
    }
  }
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiPolyadicExpression)) {
    return false;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiType type=polyadicExpression.getType();
  if (type == null || type.equalsToText("java.lang.String")) {
    return false;
  }
  final PsiPolyadicExpression subexpression=getSubexpression(polyadicExpression,token);
  if (subexpression == null) {
    return false;
  }
  if (!isPartOfLargerExpression(polyadicExpression)) {
    return false;
  }
  if (!PsiUtil.isConstantExpression(subexpression)) {
    return false;
  }
  final Object value=ExpressionUtils.computeConstantExpression(subexpression);
  return value != null;
}
