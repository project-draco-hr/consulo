{
  final PsiClass psiClass=((TypeHierarchyNodeDescriptor)descriptor).getPsiClass();
  if ("java.lang.Object".equals(psiClass.getQualifiedName())) {
    return new Object[]{IdeBundle.message("node.hierarchy.java.lang.object")};
  }
  if (psiClass instanceof PsiAnonymousClass)   return ArrayUtil.EMPTY_OBJECT_ARRAY;
  if (psiClass.hasModifierProperty(PsiModifier.FINAL))   return ArrayUtil.EMPTY_OBJECT_ARRAY;
  final PsiSearchHelper helper=PsiManager.getInstance(myProject).getSearchHelper();
  final PsiClass[] classes=helper.findInheritors(psiClass,psiClass.getUseScope(),false);
  final HierarchyNodeDescriptor[] descriptors=new HierarchyNodeDescriptor[classes.length];
  for (int i=0; i < classes.length; i++) {
    descriptors[i]=new TypeHierarchyNodeDescriptor(myProject,descriptor,classes[i],false);
  }
  return descriptors;
}
