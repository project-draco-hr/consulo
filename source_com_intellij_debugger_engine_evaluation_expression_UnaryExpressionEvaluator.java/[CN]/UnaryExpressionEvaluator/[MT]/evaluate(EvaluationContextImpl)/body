{
  Value operand=(Value)myOperandEvaluator.evaluate(context);
  VirtualMachineProxyImpl vm=context.getDebugProcess().getVirtualMachineProxy();
  if (myOperationType == JavaTokenType.PLUS) {
    if (DebuggerUtilsEx.isNumeric(operand)) {
      return operand;
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.numeric.expected"));
  }
 else   if (myOperationType == JavaTokenType.MINUS) {
    if (DebuggerUtilsEx.isNumeric(operand)) {
      double v=((PrimitiveValue)operand).doubleValue();
      return DebuggerUtilsEx.createValue(vm,myExpectedType,-v);
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.numeric.expected"));
  }
 else   if (myOperationType == JavaTokenType.TILDE) {
    if (DebuggerUtilsEx.isInteger(operand)) {
      long v=((PrimitiveValue)operand).longValue();
      return DebuggerUtilsEx.createValue(vm,myExpectedType,~v);
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.integer.expected"));
  }
 else   if (myOperationType == JavaTokenType.EXCL) {
    if (operand instanceof BooleanValue) {
      boolean v=((BooleanValue)operand).booleanValue();
      return DebuggerUtilsEx.createValue(vm,myExpectedType,!v);
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.boolean.expected"));
  }
  throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.operation.not.supported",myOperationText));
}
