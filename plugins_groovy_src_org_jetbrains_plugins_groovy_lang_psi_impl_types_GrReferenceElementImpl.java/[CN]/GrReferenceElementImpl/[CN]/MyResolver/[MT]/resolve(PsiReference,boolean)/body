{
  GrReferenceElementImpl groovyRef=(GrReferenceElementImpl)ref;
  String refName=groovyRef.getReferenceName();
  if (refName == null)   return null;
  PsiManager manager=groovyRef.getManager();
  ReferenceKind kind=groovyRef.getKind();
switch (kind) {
case CLASS_OR_PACKAGE_FQ:
{
      PsiClass aClass=manager.findClass(PsiUtil.getQualifiedReferenceText(groovyRef),groovyRef.getResolveScope());
      if (aClass != null) {
        return aClass;
      }
    }
case PACKAGE_FQ:
  return manager.findPackage(PsiUtil.getQualifiedReferenceText(groovyRef));
case CLASS:
case CLASS_OR_PACKAGE:
GrReferenceElement qualifier=groovyRef.getQualifier();
if (qualifier != null) {
PsiElement qualifierResolved=qualifier.resolve();
if (qualifierResolved instanceof PsiPackage) {
  PsiClass[] classes=((PsiPackage)qualifierResolved).getClasses();
  for (  final PsiClass aClass : classes) {
    if (refName.equals(aClass.getName()))     return aClass;
  }
  if (kind == CLASS_OR_PACKAGE) {
    for (    final PsiPackage subpackage : ((PsiPackage)qualifierResolved).getSubPackages()) {
      if (refName.equals(subpackage.getName()))       return subpackage;
    }
  }
}
}
 else {
ClassResolver processor=new ClassResolver(refName);
ResolveUtil.treeWalkUp(groovyRef,processor);
List<PsiNamedElement> candidates=processor.getCandidates();
if (candidates.size() == 1) return candidates.get(0);
if (kind == CLASS_OR_PACKAGE) {
  PsiPackage defaultPackage=groovyRef.getManager().findPackage("");
  if (defaultPackage != null) {
    for (    final PsiPackage subpackage : defaultPackage.getSubPackages()) {
      if (refName.equals(subpackage.getName()))       return subpackage;
    }
  }
}
}
}
return null;
}
