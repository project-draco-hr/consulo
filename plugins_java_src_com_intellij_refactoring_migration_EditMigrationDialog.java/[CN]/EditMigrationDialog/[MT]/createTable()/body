{
  final String[] names={RefactoringBundle.message("migration.type.column.header"),RefactoringBundle.message("migration.old.name.column.header"),RefactoringBundle.message("migration.new.name.column.header")};
  TableModel dataModel=new AbstractTableModel(){
    public int getColumnCount(){
      return 3;
    }
    public int getRowCount(){
      return myMigrationMap.getEntryCount();
    }
    public Object getValueAt(    int row,    int col){
      MigrationMapEntry entry=myMigrationMap.getEntryAt(row);
      if (col == 0) {
        if (entry.getType() == MigrationMapEntry.PACKAGE && entry.isRecursive()) {
          return RefactoringBundle.message("migration.package.with.subpackages");
        }
 else         if (entry.getType() == MigrationMapEntry.PACKAGE && !entry.isRecursive()) {
          return RefactoringBundle.message("migration.package");
        }
 else {
          return RefactoringBundle.message("migration.class");
        }
      }
      String suffix=(entry.getType() == MigrationMapEntry.PACKAGE ? ".*" : "");
      if (col == 1) {
        return entry.getOldName() + suffix;
      }
 else {
        return entry.getNewName() + suffix;
      }
    }
    public String getColumnName(    int column){
      return names[column];
    }
    public Class getColumnClass(    int c){
      return String.class;
    }
    public boolean isCellEditable(    int row,    int col){
      return false;
    }
    public void setValueAt(    Object aValue,    int row,    int column){
    }
  }
;
  myTable=new JBTable(dataModel);
  myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTable.setPreferredScrollableViewportSize(new Dimension(300,myTable.getRowHeight() * 10));
  return myTable;
}
