{
  myDocument.insertString(myOffset,buffer);
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
  CodeStyleManager.getInstance(getProject()).adjustLineIndent(myFile,myOffset + buffer.length() - 2);
  PsiComment comment=PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset),PsiComment.class);
  comment=createJavaDocStub(settings,comment,getProject());
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(getProject());
  CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(getProject());
  boolean old=codeStyleSettings.ENABLE_JAVADOC_FORMATTING;
  codeStyleSettings.ENABLE_JAVADOC_FORMATTING=false;
  try {
    comment=(PsiComment)codeStyleManager.reformat(comment);
  }
  finally {
    codeStyleSettings.ENABLE_JAVADOC_FORMATTING=old;
  }
  PsiElement next=comment.getNextSibling();
  if (next == null && comment.getParent().getClass() == comment.getClass()) {
    next=comment.getParent().getNextSibling();
  }
  if (!(next instanceof PsiWhiteSpace) || !next.getText().contains(LINE_SEPARATOR)) {
    int lineBreakOffset=comment.getTextRange().getEndOffset();
    myDocument.insertString(lineBreakOffset,LINE_SEPARATOR);
    PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
    codeStyleManager.adjustLineIndent(myFile,lineBreakOffset + 1);
    comment=PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset),PsiComment.class);
  }
  return comment;
}
