{
  CaretModel caretModel=myEditor.getCaretModel();
  try {
    final CharSequence chars=myDocument.getCharsSequence();
    int i=CharArrayUtil.shiftBackwardUntil(chars,myOffset - 1,LINE_SEPARATOR) - 1;
    i=CharArrayUtil.shiftBackwardUntil(chars,i,LINE_SEPARATOR) + 1;
    if (i < 0)     i=0;
    int lineStart=CharArrayUtil.shiftForward(chars,i," \t");
    CodeDocumentationUtil.CommentContext commentContext=CodeDocumentationUtil.tryParseCommentContext(myFile,chars,myOffset,lineStart);
    if (commentContext.docStart) {
      PsiElement element=myFile.findElementAt(commentContext.lineStart);
      final String text=element.getText();
      final PsiElement parent=element.getParent();
      if (text.equals(commentContext.commenter.getDocumentationCommentPrefix()) && isDocComment(parent,commentContext.commenter) || text.startsWith(commentContext.commenter.getDocumentationCommentPrefix()) && element instanceof PsiComment) {
        PsiComment comment=isDocComment(parent,commentContext.commenter) ? (PsiComment)parent : (PsiComment)element;
        int commentEnd=comment.getTextRange().getEndOffset();
        if (myOffset >= commentEnd) {
          commentContext.docStart=false;
        }
 else {
          if (isCommentComplete(comment,commentContext.commenter)) {
            if (myOffset >= commentEnd) {
              commentContext.docAsterisk=false;
              commentContext.docStart=false;
            }
 else {
              commentContext.docAsterisk=true;
              commentContext.docStart=false;
            }
          }
 else {
            generateJavadoc(commentContext.commenter);
          }
        }
      }
 else {
        commentContext.docStart=false;
      }
    }
 else     if (commentContext.cStyleStart) {
      PsiElement element=myFile.findElementAt(commentContext.lineStart);
      if (element instanceof PsiComment && commentContext.commenter.getBlockCommentTokenType() == ((PsiComment)element).getTokenType()) {
        final PsiComment comment=(PsiComment)element;
        int commentEnd=comment.getTextRange().getEndOffset();
        if (myOffset >= commentEnd) {
          commentContext.docStart=false;
        }
 else {
          if (isCommentComplete(comment,commentContext.commenter)) {
            if (myOffset >= commentEnd) {
              commentContext.docAsterisk=false;
              commentContext.docStart=false;
            }
 else {
              commentContext.docAsterisk=true;
              commentContext.docStart=false;
            }
          }
 else {
            final int currentEndOfLine=CharArrayUtil.shiftForwardUntil(chars,myOffset,"\n");
            myDocument.insertString(currentEndOfLine," " + commentContext.commenter.getBlockCommentSuffix());
            int lstart=CharArrayUtil.shiftBackwardUntil(chars,myOffset,"\n");
            myDocument.insertString(currentEndOfLine,chars.subSequence(lstart,myOffset));
          }
        }
      }
 else {
        commentContext.docStart=false;
      }
    }
    String indentInsideJavadoc=null;
    int line=myDocument.getLineNumber(myOffset);
    if (line > 0 && (commentContext.docAsterisk || commentContext.docStart)) {
      indentInsideJavadoc=CodeDocumentationUtil.getIndentInsideJavadoc(myDocument,myDocument.getLineStartOffset(line - 1));
    }
    if (commentContext.docAsterisk) {
      commentContext.docAsterisk=insertDocAsterisk(commentContext.lineStart,commentContext.docAsterisk,!StringUtil.isEmpty(indentInsideJavadoc),commentContext.commenter);
    }
    boolean docIndentApplied=false;
    CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
    if (codeInsightSettings.SMART_INDENT_ON_ENTER || myForceIndent || commentContext.docStart|| commentContext.docAsterisk|| commentContext.slashSlash) {
      final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(getProject());
      myOffset=codeStyleManager.adjustLineIndent(myFile,myOffset);
      PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      if (!StringUtil.isEmpty(indentInsideJavadoc) && myOffset < myDocument.getTextLength()) {
        myDocument.insertString(myOffset + 1,indentInsideJavadoc);
        myOffset+=indentInsideJavadoc.length();
        docIndentApplied=true;
      }
      if (myForceIndent && indentInsideJavadoc != null) {
        int indentSize=CodeStyleSettingsManager.getSettings(myProject).getIndentSize(myFile.getFileType());
        myDocument.insertString(myOffset + 1,StringUtil.repeatSymbol(' ',indentSize));
        myCaretAdvance+=indentSize;
      }
    }
    if ((commentContext.docAsterisk || commentContext.docStart || commentContext.slashSlash) && !docIndentApplied) {
      if (myInsertSpace) {
        if (myOffset == myDocument.getTextLength()) {
          myDocument.insertString(myOffset," ");
        }
        myDocument.insertString(myOffset + 1," ");
      }
      final char c=myDocument.getCharsSequence().charAt(myOffset);
      if (c != '\n') {
        myOffset+=1;
      }
    }
    if ((commentContext.docAsterisk || commentContext.slashSlash) && !commentContext.docStart) {
      myCaretAdvance+=commentContext.slashSlash ? commentContext.commenter.getLineCommentPrefix().length() : 1;
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  caretModel.moveToOffset(myOffset);
  myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  myEditor.getSelectionModel().removeSelection();
  if (myCaretAdvance != 0) {
    LogicalPosition caretPosition=caretModel.getLogicalPosition();
    LogicalPosition pos=new LogicalPosition(caretPosition.line,caretPosition.column + myCaretAdvance);
    caretModel.moveToLogicalPosition(pos);
  }
}
