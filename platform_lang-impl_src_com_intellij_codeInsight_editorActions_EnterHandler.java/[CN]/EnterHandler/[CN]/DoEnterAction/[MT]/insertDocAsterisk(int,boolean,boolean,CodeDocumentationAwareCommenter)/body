{
  PsiElement atLineStart=myFile.findElementAt(lineStart);
  if (atLineStart == null)   return false;
  final String documentationCommentLinePrefix=commenter.getDocumentationCommentLinePrefix();
  final String docommentPrefix=commenter.getDocumentationCommentPrefix();
  final String text=atLineStart.getText();
  final TextRange textRange=atLineStart.getTextRange();
  if (text.equals(documentationCommentLinePrefix) || text.equals(docommentPrefix) || text.regionMatches(lineStart - textRange.getStartOffset(),docommentPrefix,0,docommentPrefix.length())|| text.regionMatches(lineStart - textRange.getStartOffset(),documentationCommentLinePrefix,0,documentationCommentLinePrefix.length())) {
    PsiElement element=myFile.findElementAt(myOffset);
    if (element == null)     return false;
    PsiComment comment=element instanceof PsiComment ? (PsiComment)element : PsiTreeUtil.getParentOfType(element,PsiComment.class,false);
    if (comment != null) {
      int commentEnd=comment.getTextRange().getEndOffset();
      if (myOffset >= commentEnd) {
        docAsterisk=false;
      }
 else {
        removeTrailingSpaces(myDocument,myOffset);
        String toInsert=previousLineIndentUsed ? "*" : CodeDocumentationUtil.createDocCommentLine("",getProject(),commenter);
        myDocument.insertString(myOffset,toInsert);
        PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      }
    }
 else {
      docAsterisk=false;
    }
  }
 else   if (atLineStart instanceof PsiComment && ((PsiComment)atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) {
    boolean usesAstersk=false;
    int commentLine=myDocument.getLineNumber(textRange.getStartOffset());
    if (commentLine < myDocument.getLineCount() - 1 && textRange.getEndOffset() >= myOffset) {
      int nextLineOffset=myDocument.getLineStartOffset(commentLine + 1);
      if (nextLineOffset < textRange.getEndOffset()) {
        final CharSequence chars=myDocument.getCharsSequence();
        nextLineOffset=CharArrayUtil.shiftForward(chars,nextLineOffset," \t");
        usesAstersk=CharArrayUtil.regionMatches(chars,nextLineOffset,documentationCommentLinePrefix);
      }
    }
    if (usesAstersk) {
      removeTrailingSpaces(myDocument,myOffset);
      myDocument.insertString(myOffset,documentationCommentLinePrefix + " ");
      PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
    }
    docAsterisk=usesAstersk;
  }
 else {
    docAsterisk=false;
  }
  return docAsterisk;
}
