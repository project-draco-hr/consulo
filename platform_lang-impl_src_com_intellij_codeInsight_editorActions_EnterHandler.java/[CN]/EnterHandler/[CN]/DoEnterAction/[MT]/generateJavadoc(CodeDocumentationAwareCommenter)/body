{
  CodeInsightSettings settings=CodeInsightSettings.getInstance();
  StringBuilder buffer=new StringBuilder();
  final String docCommentLinePrefix=commenter.getDocumentationCommentLinePrefix();
  if (docCommentLinePrefix == null) {
    return;
  }
  buffer.append(docCommentLinePrefix);
  if (DataManager.getInstance().loadFromDataContext(myDataContext,AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) {
    myDocument.insertString(myOffset,buffer);
    buffer=new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix());
    int line=myDocument.getLineNumber(myOffset);
    myOffset=myDocument.getLineEndOffset(line);
  }
 else {
    buffer.append(LINE_SEPARATOR);
    buffer.append(commenter.getDocumentationCommentSuffix());
  }
  PsiComment comment=createComment(buffer,settings);
  if (comment == null) {
    return;
  }
  myOffset=comment.getTextRange().getStartOffset();
  CharSequence text=myDocument.getCharsSequence();
  myOffset=CharArrayUtil.shiftForwardUntil(text,myOffset,LINE_SEPARATOR);
  myOffset=CharArrayUtil.shiftForward(text,myOffset,LINE_SEPARATOR);
  myOffset=CharArrayUtil.shiftForwardUntil(text,myOffset,docCommentLinePrefix) + 1;
  removeTrailingSpaces(myDocument,myOffset);
  if (!CodeStyleSettingsManager.getSettings(getProject()).JD_LEADING_ASTERISKS_ARE_ENABLED) {
    LOG.assertTrue(CharArrayUtil.regionMatches(myDocument.getCharsSequence(),myOffset - docCommentLinePrefix.length(),docCommentLinePrefix));
    myDocument.deleteString(myOffset - docCommentLinePrefix.length(),myOffset);
    myOffset--;
  }
 else {
    myDocument.insertString(myOffset," ");
    myOffset++;
  }
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
}
