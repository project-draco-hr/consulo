{
  Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getContentComponent()));
  if (project == null)   return false;
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (file == null)   return false;
  if (editor.getSelectionModel().hasSelection())   return false;
  int offset=editor.getCaretModel().getOffset() - 1;
  if (offset < 0)   return false;
  CharSequence chars=editor.getDocument().getCharsSequence();
  char c=chars.charAt(offset);
  if (TypedHandler.charTypedWeWantToShowSmartnessInInjectedLanguageWithoutPerformanceLoss(c)) {
    final Editor injectedEditor=InjectedLanguageUtil.getEditorForInjectedLanguage(editor,file);
    if (injectedEditor != editor) {
      file=PsiDocumentManager.getInstance(project).getPsiFile(injectedEditor.getDocument());
      editor=injectedEditor;
      offset=editor.getCaretModel().getOffset() - 1;
      chars=editor.getDocument().getCharsSequence();
    }
  }
  FileType fileType=file.getFileType();
  final QuoteHandler quoteHandler=TypedHandler.getQuoteHandler(file);
  if (quoteHandler == null)   return false;
  boolean toDeleteGt=c == '<' && file instanceof PsiJavaFile && ((PsiJavaFile)file).getLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0 && BraceMatchingUtil.isAfterClassLikeIdentifierOrDot(offset,editor);
  HighlighterIterator hiterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  boolean wasClosingQuote=quoteHandler.isClosingQuote(hiterator,offset);
  myOriginalHandler.execute(editor,dataContext);
  if (offset >= editor.getDocument().getTextLength())   return true;
  chars=editor.getDocument().getCharsSequence();
  if (c == '(' || c == '[' || c == '{' || toDeleteGt) {
    char c1=chars.charAt(offset);
    if (c == '(' && c1 != ')')     return true;
    if (c == '[' && c1 != ']')     return true;
    if (c == '{' && c1 != '}')     return true;
    if (c == '<') {
      if (c1 != '>')       return true;
      handleLTDeletion(editor,offset);
      return true;
    }
    HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
    BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType);
    if (!braceMatcher.isLBraceToken(iterator,chars,fileType) && !braceMatcher.isRBraceToken(iterator,chars,fileType)) {
      return true;
    }
    final char closingBrace=c == '(' ? ')' : ']';
    int rparenOffset=BraceMatchingUtil.findRightmostRParen(iterator,braceMatcher.getTokenType(closingBrace,iterator),chars,fileType);
    if (rparenOffset >= 0) {
      iterator=((EditorEx)editor).getHighlighter().createIterator(rparenOffset);
      boolean matched=BraceMatchingUtil.matchBrace(chars,fileType,iterator,false);
      if (matched)       return true;
    }
    editor.getDocument().deleteString(offset,offset + 1);
  }
 else   if (c == '"' || c == '\'') {
    char c1=chars.charAt(offset);
    if (c1 != c)     return true;
    if (wasClosingQuote)     return true;
    HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
    if (!quoteHandler.isOpeningQuote(iterator,offset))     return true;
    editor.getDocument().deleteString(offset,offset + 1);
  }
  return true;
}
