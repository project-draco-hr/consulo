{
  GroovyEditorActionsManager.registerGroovyEditorActions();
  ChangeUtil.registerCopyHandler(new GroovyChangeUtilSupport());
  setupCompletion();
  ProjectManager.getInstance().addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    final Project project){
      final TextEditorHighlightingPassRegistrar registrar=TextEditorHighlightingPassRegistrar.getInstance(project);
      GroovyUnusedImportsPassFactory unusedImportsPassFactory=project.getComponent(GroovyUnusedImportsPassFactory.class);
      registrar.registerTextEditorHighlightingPass(unusedImportsPassFactory,new int[]{Pass.UPDATE_ALL},null,true,-1);
      GroovyAddImportsPassFactory addImportsPassFactory=project.getComponent(GroovyAddImportsPassFactory.class);
      registrar.registerTextEditorHighlightingPass(addImportsPassFactory,new int[]{Pass.POPUP_HINTS},null,true,-1);
      DebuggerManager.getInstance(project).registerPositionManagerFactory(new Function<DebugProcess,PositionManager>(){
        public PositionManager fun(        DebugProcess debugProcess){
          return new GroovyPositionManager(debugProcess);
        }
      }
);
    }
  }
);
  registerNameValidators();
}
