{
  GroovyEditorActionsManager.registerGroovyEditorActions();
  setupCompletion();
  ProjectManager.getInstance().addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    final Project project){
      StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){
        public void run(){
          final TextEditorHighlightingPassRegistrar registrar=TextEditorHighlightingPassRegistrar.getInstance(project);
          GroovyUnusedImportsPassFactory unusedImportsPassFactory=project.getComponent(GroovyUnusedImportsPassFactory.class);
          registrar.registerTextEditorHighlightingPass(unusedImportsPassFactory,new int[]{Pass.UPDATE_ALL},null,true,-1);
          GroovyAddImportsPassFactory addImportsPassFactory=project.getComponent(GroovyAddImportsPassFactory.class);
          registrar.registerTextEditorHighlightingPass(addImportsPassFactory,new int[]{Pass.POPUP_HINTS},null,true,-1);
        }
      }
);
      WolfTheProblemSolver.getInstance(project).registerFileHighlightFilter(new Condition<VirtualFile>(){
        public boolean value(        VirtualFile virtualFile){
          return FileTypeManager.getInstance().getFileTypeByFile(virtualFile) == GroovyFileType.GROOVY_FILE_TYPE;
        }
      }
,project);
      CompilerManager compilerManager=CompilerManager.getInstance(project);
      GroovyToJavaGenerator generator=new GroovyToJavaGenerator(project);
      compilerManager.addCompiler(generator);
      compilerManager.addCompilationStatusListener(generator);
      compilerManager.addCompilableFileType(GroovyFileType.GROOVY_FILE_TYPE);
      DebuggerManager.getInstance(project).registerPositionManagerFactory(new Function<DebugProcess,PositionManager>(){
        public PositionManager fun(        DebugProcess debugProcess){
          return new GroovyPositionManager(debugProcess);
        }
      }
);
      ReferenceProvidersRegistry registry=ReferenceProvidersRegistry.getInstance(project);
      registry.registerReferenceProvider(GroovyDocPsiElement.class,new GroovyDocReferenceProvider());
      registry.registerReferenceProvider(GrLiteral.class,new PropertiesReferenceProvider());
    }
  }
);
  registerNameValidators();
}
