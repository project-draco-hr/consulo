{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      FileTypeManager.getInstance().registerFileType(GroovyFileType.GROOVY_FILE_TYPE,GROOVY_EXTENTIONS.toArray(new String[GROOVY_EXTENTIONS.size()]));
    }
  }
);
  CompletionUtil.registerCompletionData(GroovyFileType.GROOVY_FILE_TYPE,new GroovyCompletionData());
  ShowParameterInfoHandler.register(GroovyFileType.GROOVY_FILE_TYPE.getLanguage(),GroovyParameterInfoProvider.INSTANCE);
  MethodReferencesSearch.INSTANCE.registerExecutor(new AccessorReferencesSearcher());
  MethodReferencesSearch.INSTANCE.registerExecutor(new MethodLateBoundReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new ConstructorReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new PropertyReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new TypeAliasReferenceSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new LateBoundReferencesSearcher());
  TypedHandler.registerQuoteHandler(GroovyFileType.GROOVY_FILE_TYPE,new GroovyQuoteHandler());
  ProjectManager.getInstance().addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    Project project){
      TextEditorHighlightingPassRegistrar registrar=TextEditorHighlightingPassRegistrar.getInstance(project);
      GroovyUnusedImportsPassFactory unusedImportsPassFactory=project.getComponent(GroovyUnusedImportsPassFactory.class);
      registrar.registerTextEditorHighlightingPass(unusedImportsPassFactory,new int[]{Pass.UPDATE_ALL},null,true,-1);
      CompilerManager compilerManager=CompilerManager.getInstance(project);
      GroovyToJavaGenerator generator=new GroovyToJavaGenerator(project);
      compilerManager.addCompiler(generator);
      compilerManager.addCompilationStatusListener(generator);
      compilerManager.addCompiler(new GroovyCompiler(project));
      compilerManager.addCompilableFileType(GroovyFileType.GROOVY_FILE_TYPE);
      DebuggerManager.getInstance(project).registerPositionManagerFactory(new Function<DebugProcess,PositionManager>(){
        public PositionManager fun(        DebugProcess debugProcess){
          return new GroovyPositionManager(debugProcess);
        }
      }
);
      RefactoringListenerManager.getInstance(project).addListenerProvider(new GroovyClassMoveCallback());
    }
  }
);
}
