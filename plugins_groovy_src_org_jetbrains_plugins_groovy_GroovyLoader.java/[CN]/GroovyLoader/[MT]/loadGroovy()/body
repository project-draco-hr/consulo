{
  Factory.addElementFactory(new GspElementFactory());
  GroovyEditorActionsManager.registerGroovyEditorActions();
  setupCompletion();
  registerSelectioners();
  MethodReferencesSearch.INSTANCE.registerExecutor(new AccessorReferencesSearcher());
  MethodReferencesSearch.INSTANCE.registerExecutor(new MethodLateBoundReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new ConstructorReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new PropertyReferencesSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new TypeAliasReferenceSearcher());
  ReferencesSearch.INSTANCE.registerExecutor(new LateBoundReferencesSearcher());
  AnnotatedMembersSearch.INSTANCE.registerExecutor(new AnnotatedMembersSearcher());
  TypedHandler.registerQuoteHandler(GroovyFileType.GROOVY_FILE_TYPE,new GroovyQuoteHandler());
  ProjectManager.getInstance().addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    final Project project){
      TextEditorHighlightingPassRegistrar registrar=TextEditorHighlightingPassRegistrar.getInstance(project);
      GroovyUnusedImportsPassFactory unusedImportsPassFactory=project.getComponent(GroovyUnusedImportsPassFactory.class);
      registrar.registerTextEditorHighlightingPass(unusedImportsPassFactory,new int[]{Pass.UPDATE_ALL},null,true,-1);
      WolfTheProblemSolver.getInstance(project).registerFileHighlightFilter(new Condition<VirtualFile>(){
        public boolean value(        VirtualFile virtualFile){
          return FileTypeManager.getInstance().getFileTypeByFile(virtualFile) == GroovyFileType.GROOVY_FILE_TYPE;
        }
      }
,project);
      CompilerManager compilerManager=CompilerManager.getInstance(project);
      GroovyToJavaGenerator generator=new GroovyToJavaGenerator(project);
      compilerManager.addCompiler(generator);
      compilerManager.addCompilationStatusListener(generator);
      compilerManager.addCompiler(new GroovyCompiler(project));
      compilerManager.addCompilableFileType(GroovyFileType.GROOVY_FILE_TYPE);
      DebuggerManager.getInstance(project).registerPositionManagerFactory(new Function<DebugProcess,PositionManager>(){
        public PositionManager fun(        DebugProcess debugProcess){
          return new GroovyPositionManager(debugProcess);
        }
      }
);
      ReferenceProvidersRegistry registry=ReferenceProvidersRegistry.getInstance(project);
      registry.registerReferenceProvider(GroovyDocPsiElement.class,new GroovyDocReferenceProvider());
      registry.registerReferenceProvider(GrLiteral.class,new PropertiesReferenceProvider());
    }
  }
);
}
