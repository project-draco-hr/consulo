{
  if (checkValidity) {
    checkTargetJPDAInstalled(parameters);
  }
  final boolean useSockets=transport == DebuggerSettings.SOCKET_TRANSPORT;
  String address="";
  if (debugPort == null || "".equals(debugPort)) {
    try {
      address=DebuggerUtils.getInstance().findAvailableDebugAddress(useSockets);
    }
 catch (    ExecutionException e) {
      if (checkValidity) {
        throw e;
      }
    }
  }
 else {
    address=debugPort;
  }
  final TransportServiceWrapper transportService=TransportServiceWrapper.getTransportService(useSockets);
  final String debugAddress=debuggerInServerMode && useSockets ? "127.0.0.1:" + address : address;
  String debuggeeRunProperties="transport=" + transportService.transportId() + ",address="+ debugAddress;
  if (debuggerInServerMode) {
    debuggeeRunProperties+=",suspend=y,server=n";
  }
 else {
    debuggeeRunProperties+=",suspend=n,server=y";
  }
  if (hasWhitespace(debuggeeRunProperties)) {
    debuggeeRunProperties="\"" + debuggeeRunProperties + "\"";
  }
  parameters.getVMParametersList().replaceOrPrepend("-Xrunjdwp:","-Xrunjdwp:" + debuggeeRunProperties);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @SuppressWarnings({"HardCodedStringLiteral"}) public void run(){
      JavaSdkUtil.addRtJar(parameters.getClassPath());
      if (shouldForceNoJIT(parameters.getJdk())) {
        parameters.getVMParametersList().replaceOrPrepend("-Djava.compiler=","-Djava.compiler=NONE");
        parameters.getVMParametersList().replaceOrPrepend("-Xnoagent","-Xnoagent");
      }
      final String debugKey=System.getProperty(DEBUG_KEY_NAME,"-Xdebug");
      if (shouldAddXdebugKey(parameters.getJdk()) || !"-Xdebug".equals(debugKey)) {
        parameters.getVMParametersList().replaceOrPrepend(debugKey,debugKey);
      }
 else {
        parameters.getVMParametersList().replaceOrPrepend("-Xdebug","");
      }
      boolean classicVM=shouldForceClassicVM(parameters.getJdk());
      parameters.getVMParametersList().replaceOrPrepend("-classic",classicVM ? "-classic" : "");
    }
  }
);
  return new RemoteConnection(useSockets,"127.0.0.1",address,debuggerInServerMode);
}
