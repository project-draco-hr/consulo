{
  if (!(file instanceof PropertiesFile))   return;
  final PropertiesFile propertiesFile=(PropertiesFile)file;
  ResourceBundle resourceBundle=propertiesFile.getResourceBundle();
  if (!visitedBundles.add(resourceBundle))   return;
  List<PropertiesFile> files=resourceBundle.getPropertiesFiles(manager.getProject());
  if (files.size() < 2)   return;
  BidirectionalMap<PropertiesFile,PropertiesFile> parents=new BidirectionalMap<PropertiesFile,PropertiesFile>();
  for (  PropertiesFile f : files) {
    PropertiesFile parent=PropertiesUtil.getParent(f,files);
    if (parent != null) {
      parents.put(f,parent);
    }
  }
  Map<PropertiesFile,Set<String>> keysUpToParent=new THashMap<PropertiesFile,Set<String>>();
  for (  PropertiesFile f : files) {
    Set<String> keys=new THashSet<String>(f.getNamesMap().keySet());
    PropertiesFile parent=parents.get(f);
    while (parent != null) {
      keys.addAll(parent.getNamesMap().keySet());
      parent=parents.get(parent);
    }
    keysUpToParent.put(f,keys);
  }
  if (REPORT_MISSING_TRANSLATIONS) {
    checkMissingTranslations(parents,files,keysUpToParent,manager);
  }
  if (REPORT_INCONSISTENT_PROPERTIES) {
    checkConsistency(parents,files,keysUpToParent,manager);
  }
}
