{
  final PsiElement element=descriptor.getPsiElement();
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (containingClass == null) {
    return;
  }
  final PsiModifierList modifierList=containingClass.getModifierList();
  if (modifierList == null) {
    return;
  }
  if (!isOnTheFly()) {
    if (ClassInheritorsSearch.search(containingClass).findFirst() != null) {
      return;
    }
    modifierList.setModifierProperty(PsiModifier.FINAL,true);
    return;
  }
  final MultiMap<PsiElement,String> conflicts=new MultiMap();
  final Query<PsiClass> search=ClassInheritorsSearch.search(containingClass);
  search.forEach(new Processor<PsiClass>(){
    @Override public boolean process(    PsiClass aClass){
      conflicts.putValue(containingClass,InspectionGadgetsBundle.message("0.will.no.longer.be.overridable.by.1",RefactoringUIUtil.getDescription(containingClass,false),RefactoringUIUtil.getDescription(aClass,false)));
      return true;
    }
  }
);
  final boolean conflictsDialogOK;
  if (!conflicts.isEmpty()) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(element.getProject(),conflicts,new Runnable(){
      @Override public void run(){
        final AccessToken token=WriteAction.start();
        try {
          modifierList.setModifierProperty(PsiModifier.FINAL,true);
        }
  finally {
          token.finish();
        }
      }
    }
);
    conflictsDialog.show();
    conflictsDialogOK=conflictsDialog.isOK();
  }
 else {
    conflictsDialogOK=true;
  }
  if (conflictsDialogOK) {
    modifierList.setModifierProperty(PsiModifier.FINAL,true);
  }
}
