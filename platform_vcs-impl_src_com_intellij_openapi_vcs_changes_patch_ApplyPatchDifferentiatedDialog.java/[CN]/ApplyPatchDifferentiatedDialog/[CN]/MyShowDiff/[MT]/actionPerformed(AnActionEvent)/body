{
  if (myPatches.isEmpty() || (!myContainBasedChanges))   return;
  final List<FilePatchInProgress.PatchChange> changes=getAllChanges();
  Collections.sort(changes,MyChangeComparator.getInstance());
  final List<FilePatchInProgress.PatchChange> selectedChanges=myChangesTreeList.getSelectedChanges();
  int selectedIdx=0;
  int idx=0;
  final ArrayList<DiffRequestPresentable> diffRequestPresentables=new ArrayList<DiffRequestPresentable>(changes.size());
  if (!selectedChanges.isEmpty()) {
    final FilePatchInProgress.PatchChange c=selectedChanges.get(0);
    for (    FilePatchInProgress.PatchChange change : changes) {
      final FilePatchInProgress patchInProgress=change.getPatchInProgress();
      if (!patchInProgress.baseExistsOrAdded())       continue;
      final DiffRequestPresentable diffRequestPresentable=change.createDiffRequestPresentable(myProject);
      if (diffRequestPresentable != null) {
        diffRequestPresentables.add(diffRequestPresentable);
      }
      if (change.equals(c)) {
        selectedIdx=idx;
      }
      ++idx;
    }
  }
  if (diffRequestPresentables.isEmpty())   return;
  selectedIdx=(selectedIdx >= diffRequestPresentables.size()) ? 0 : selectedIdx;
  ShowDiffAction.showDiffImpl(myProject,diffRequestPresentables,selectedIdx,ShowDiffAction.DiffExtendUIFactory.NONE,false);
}
