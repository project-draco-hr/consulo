{
  final NamedLegendStatuses totalNameStatuses=new NamedLegendStatuses();
  final NamedLegendStatuses includedNameStatuses=new NamedLegendStatuses();
  final Collection<AbstractFilePatchInProgress.PatchChange> included=new LinkedList<>();
  if (doInitCheck) {
    for (    AbstractFilePatchInProgress.PatchChange change : changes) {
      acceptChange(totalNameStatuses,change);
      final AbstractFilePatchInProgress abstractFilePatchInProgress=change.getPatchInProgress();
      if (abstractFilePatchInProgress.baseExistsOrAdded() && (myPreselectedChanges == null || myPreselectedChanges.contains(change))) {
        acceptChange(includedNameStatuses,change);
        included.add(change);
      }
    }
  }
 else {
    final Collection<AbstractFilePatchInProgress.PatchChange> includedNow=myChangesTreeList.getIncludedChanges();
    final Set<AbstractFilePatchInProgress> toBeIncluded=new HashSet<>();
    for (    AbstractFilePatchInProgress.PatchChange change : includedNow) {
      final AbstractFilePatchInProgress patch=change.getPatchInProgress();
      toBeIncluded.add(patch);
    }
    for (    AbstractFilePatchInProgress.PatchChange change : changes) {
      final AbstractFilePatchInProgress patch=change.getPatchInProgress();
      acceptChange(totalNameStatuses,change);
      if (toBeIncluded.contains(patch) && patch.baseExistsOrAdded()) {
        acceptChange(includedNameStatuses,change);
        included.add(change);
      }
    }
  }
  myInfoCalculator.setTotal(totalNameStatuses);
  myInfoCalculator.setIncluded(includedNameStatuses);
  myCommitLegendPanel.update();
  return included;
}
