{
  final VirtualFile baseDir=myProject.getBaseDir();
  final List<FilePatchInProgress> result=new ArrayList<FilePatchInProgress>(list.size());
  final GlobalSearchScope scope=ProjectScope.getProjectScope(myProject);
  final List<TextFilePatch> creations=new LinkedList<TextFilePatch>();
  final MultiMap<String,VirtualFile> foldersDecisions=new MultiMap<String,VirtualFile>(){
    @Override protected Collection<VirtualFile> createCollection(){
      return new HashSet<VirtualFile>();
    }
    @Override protected Collection<VirtualFile> createEmptyCollection(){
      return Collections.emptySet();
    }
  }
;
  for (  TextFilePatch patch : list) {
    if (patch.isNewFile() || (patch.getBeforeName() == null)) {
      creations.add(patch);
      continue;
    }
    final String fileName=patch.getBeforeFileName();
    final Collection<VirtualFile> variants=filterVariants(patch,FilenameIndex.getVirtualFilesByName(myProject,fileName,scope));
    final FilePatchInProgress filePatchInProgress=new FilePatchInProgress(patch,variants,baseDir);
    result.add(filePatchInProgress);
    final String path=extractPathWithoutName(patch.getBeforeName());
    if (path != null) {
      foldersDecisions.putValue(path,filePatchInProgress.getBase());
    }
  }
  for (  TextFilePatch creation : creations) {
    final String newFileParentPath=extractPathWithoutName(creation.getAfterName());
    if (newFileParentPath == null) {
      result.add(new FilePatchInProgress(creation,null,baseDir));
    }
 else {
      final Collection<VirtualFile> variants=filterVariants(creation,foldersDecisions.get(newFileParentPath));
      result.add(new FilePatchInProgress(creation,variants,baseDir));
    }
  }
  return result;
}
