{
  final List<FilePatchInProgress> patchesToSelect=changes2patches(myChangesTreeList.getSelectedChanges());
  final List<FilePatchInProgress.PatchChange> changes=getAllChanges();
  final Collection<FilePatchInProgress.PatchChange> included=getIncluded(doInitCheck,changes);
  myChangesTreeList.setChangesToDisplay(changes);
  myChangesTreeList.setIncludedChanges(included);
  myChangesTreeList.repaint();
  if ((!doInitCheck) && patchesToSelect != null) {
    final List<FilePatchInProgress.PatchChange> toSelect=new ArrayList<FilePatchInProgress.PatchChange>(patchesToSelect.size());
    for (    FilePatchInProgress.PatchChange change : changes) {
      if (patchesToSelect.contains(change.getPatchInProgress())) {
        toSelect.add(change);
      }
    }
    myChangesTreeList.select(toSelect);
  }
  myContainBasedChanges=false;
  for (  FilePatchInProgress patch : myPatches) {
    if (patch.baseExistsOrAdded()) {
      myContainBasedChanges=true;
      break;
    }
  }
}
