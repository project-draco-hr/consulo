{
  final NamedTrinity totalTrinity=new NamedTrinity();
  final NamedTrinity includedTrinity=new NamedTrinity();
  final Collection<FilePatchInProgress.PatchChange> included=new LinkedList<FilePatchInProgress.PatchChange>();
  if (doInitCheck) {
    for (    FilePatchInProgress.PatchChange change : changes) {
      acceptChange(totalTrinity,change);
      final FilePatchInProgress filePatchInProgress=change.getPatchInProgress();
      if (filePatchInProgress.baseExistsOrAdded()) {
        acceptChange(includedTrinity,change);
        included.add(change);
      }
    }
  }
 else {
    final Collection<FilePatchInProgress.PatchChange> includedNow=myChangesTreeList.getIncludedChanges();
    final Set<Pair<String,String>> toBeIncluded=new HashSet<Pair<String,String>>();
    for (    FilePatchInProgress.PatchChange change : includedNow) {
      final FilePatchInProgress patch=change.getPatchInProgress();
      toBeIncluded.add(new Pair<String,String>(patch.getPatch().getBeforeName(),patch.getPatch().getAfterName()));
    }
    for (    FilePatchInProgress.PatchChange change : changes) {
      final FilePatchInProgress patch=change.getPatchInProgress();
      final Pair<String,String> pair=new Pair<String,String>(patch.getPatch().getBeforeName(),patch.getPatch().getAfterName());
      acceptChange(totalTrinity,change);
      if (toBeIncluded.contains(pair) && patch.baseExistsOrAdded()) {
        acceptChange(includedTrinity,change);
        included.add(change);
      }
    }
  }
  myInfoCalculator.setTotal(totalTrinity);
  myInfoCalculator.setIncluded(includedTrinity);
  myCommitLegendPanel.update();
  return included;
}
