{
  int lengthDiff=getLength(context.currentChange) - getLength(context.beforeChange);
  int originTextDiff=context.beforeChange.getText().length() - context.currentChange.getText().length();
  int oldSize=storage.size();
  if (lengthDiff > 0) {
    int diffLength=(context.currentChange.getEnd() + originTextDiff) - (context.beforeChange.getEnd() + context.beforeShiftToCurrent);
    int commonPrefixLength=StringUtil.commonPrefixLength(context.beforeText.subSequence(context.beforeChange.getStart(),context.beforeChange.getEnd()),context.currentText.subSequence(context.currentChange.getStart(),context.currentChange.getStart() + getLength(context.beforeChange)));
    int offsetToUse=context.beforeChange.getEnd() + context.beforeShiftToCurrent;
    offsetToUse=Math.min(offsetToUse,context.currentChange.getStart() + commonPrefixLength);
    storage.add(new TextRange(offsetToUse,offsetToUse + diffLength));
  }
 else   if (lengthDiff < 0) {
    int offsetToUse=context.currentChange.getEnd();
    for (int beforeOffset=context.beforeChange.getStart(), currentOffset=context.currentChange.getStart(); currentOffset < context.currentChange.getEnd(); beforeOffset++, currentOffset++) {
      if (context.beforeText.charAt(beforeOffset) != context.currentText.charAt(currentOffset)) {
        offsetToUse=currentOffset;
        break;
      }
    }
    storage.add(new TextRange(offsetToUse,offsetToUse));
  }
 else   if (context.beforeChange.getText().length() != context.currentChange.getText().length()) {
    if (StringUtil.equals(context.textForChangeRange(Context.ChangeType.BEFORE),context.textForChangeRange(Context.ChangeType.CURRENT))) {
      if (originTextDiff < 0) {
        storage.add(new TextRange(context.currentChange.getEnd(),context.currentChange.getEnd()));
      }
 else {
        storage.add(new TextRange(context.currentChange.getEnd(),context.currentChange.getEnd() + originTextDiff));
      }
    }
  }
  if (storage.size() != oldSize) {
    context.beforeShiftToCurrent+=getDiff(context.beforeChange) - getDiff(context.currentChange);
  }
  context.proceedToNextChange(Context.ChangeType.BEFORE);
  context.proceedToNextChange(Context.ChangeType.CURRENT);
}
