{
  if (!(usage.getElement() instanceof GrMethod) || !isGroovyUsage(usage))   return true;
  GrMethod constructor=(GrMethod)usage.getElement();
  if (!constructor.isConstructor())   return true;
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(data.getProject());
  GrConstructorInvocation superCall=factory.createConstructorInvocation("super();");
  GrOpenBlock body=constructor.getBlock();
  final GrStatement[] statements=body.getStatements();
  if (statements.length > 0) {
    superCall=(GrConstructorInvocation)body.addStatementBefore(superCall,statements[0]);
  }
 else {
    superCall=(GrConstructorInvocation)body.addStatementBefore(superCall,null);
  }
  processChangeMethodUsage(data,new UsageInfo(superCall),usages);
  return false;
}
