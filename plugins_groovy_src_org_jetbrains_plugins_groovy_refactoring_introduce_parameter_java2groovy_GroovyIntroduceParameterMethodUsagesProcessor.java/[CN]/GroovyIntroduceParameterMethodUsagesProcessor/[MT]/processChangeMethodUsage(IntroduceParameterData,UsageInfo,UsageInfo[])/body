{
  if (!isMethodUsage(usage))   return true;
  GrCall callExpression=GroovyRefactoringUtil.getCallExpressionByMethodReference(usage.getElement());
  GrArgumentList argList=callExpression.getArgumentList();
  GrExpression[] oldArgs=argList.getExpressionArguments();
  final GrExpression anchor;
  if (!data.getMethodToSearchFor().isVarArgs()) {
    anchor=getLast(oldArgs);
  }
 else {
    final PsiParameter[] parameters=data.getMethodToSearchFor().getParameterList().getParameters();
    if (parameters.length > oldArgs.length) {
      anchor=getLast(oldArgs);
    }
 else {
      final int lastNonVararg=parameters.length - 2;
      anchor=lastNonVararg >= 0 ? oldArgs[lastNonVararg] : null;
    }
  }
  PsiMethod method=PsiTreeUtil.getParentOfType(argList,PsiMethod.class);
  if (method != null && isMethodInUsages(method,usages,data)) {
    argList.addAfter(GroovyPsiElementFactory.getInstance(data.getProject()).createExpressionFromText(data.getParameterName()),anchor);
  }
 else {
    ChangeContextUtil.encodeContextInfo(data.getParameterInitializer(),true);
    final GrExpression grInitializer=GroovyRefactoringUtil.convertJavaExpr2GroovyExpr(data.getParameterInitializer());
    GrExpression newArg=(GrExpression)argList.addAfter(grInitializer,anchor);
    new OldReferencesResolver(callExpression,newArg,data.getMethodToReplaceIn(),data.getReplaceFieldsWithGetters(),data.getParameterInitializer()).resolve();
    ChangeContextUtil.clearContextInfo(data.getParameterInitializer());
  }
  removeParametersFromCall(callExpression.getArgumentList(),data.getParametersToRemove());
  return false;
}
