{
  GrCall callExpression=GroovyRefactoringUtil.getCallExpressionByMethodReference(usage.getElement());
  if (callExpression == null)   return true;
  GrArgumentList argList=callExpression.getArgumentList();
  GrExpression[] oldArgs=argList.getExpressionArguments();
  final GrExpression anchor;
  if (!data.getMethodToSearchFor().isVarArgs()) {
    anchor=getLast(oldArgs);
  }
 else {
    final PsiParameter[] parameters=data.getMethodToSearchFor().getParameterList().getParameters();
    if (parameters.length > oldArgs.length) {
      anchor=getLast(oldArgs);
    }
 else {
      final int lastNonVararg=parameters.length - 2;
      anchor=lastNonVararg >= 0 ? oldArgs[lastNonVararg] : null;
    }
  }
  PsiMethod method=PsiTreeUtil.getParentOfType(argList,PsiMethod.class);
  GrClosureSignature signature=GrClosureSignatureUtil.createSignature(callExpression);
  if (signature == null)   signature=GrClosureSignatureUtil.createSignature(data.getMethodToSearchFor(),PsiSubstitutor.EMPTY);
  final GrClosureSignatureUtil.ArgInfo<PsiElement>[] actualArgs=GrClosureSignatureUtil.mapParametersToArguments(signature,callExpression.getNamedArguments(),callExpression.getExpressionArguments(),callExpression.getClosureArguments(),callExpression,true,true);
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(data.getProject());
  if (method != null && IntroduceParameterUtil.isMethodInUsages(data,method,usages)) {
    argList.addAfter(factory.createExpressionFromText(data.getParameterName()),anchor);
  }
 else {
    final PsiElement _expr=data.getParameterInitializer().getExpression();
    PsiElement initializer=ExpressionConverter.getExpression(_expr,GroovyFileType.GROOVY_LANGUAGE,data.getProject());
    LOG.assertTrue(initializer instanceof GrExpression);
    GrExpression newArg=GroovyIntroduceParameterUtil.addClosureToCall(initializer,argList);
    if (newArg == null) {
      final PsiElement dummy=argList.addAfter(factory.createExpressionFromText("1"),anchor);
      newArg=((GrExpression)dummy).replaceWithExpression((GrExpression)initializer,true);
    }
    final PsiMethod methodToReplaceIn=data.getMethodToReplaceIn();
    new OldReferencesResolver(callExpression,newArg,methodToReplaceIn,data.getReplaceFieldsWithGetters(),initializer,signature,actualArgs,methodToReplaceIn.getParameterList().getParameters()).resolve();
    ChangeContextUtil.clearContextInfo(initializer);
    if (newArg.isValid()) {
      GrReferenceAdjuster.shortenReferences(newArg);
      CodeStyleManager.getInstance(data.getProject()).reformat(newArg);
    }
  }
  if (actualArgs == null) {
    removeParamsFromUnresolvedCall(callExpression,data);
  }
 else {
    removeParametersFromCall(actualArgs,data.getParametersToRemove());
  }
  if (argList.getAllArguments().length == 0 && hasClosureArgs(argList)) {
    final GrArgumentList emptyArgList=((GrMethodCallExpression)factory.createExpressionFromText("foo{}")).getArgumentList();
    LOG.assertTrue(emptyArgList != null);
    argList.replace(emptyArgList);
  }
  return false;
}
