{
  PsiType type=myCalculatedTypes.get(expr);
  if (type == null) {
    type=f.fun(expr);
    if (type == null) {
      type=TypeConversionUtil.NULL_TYPE;
    }
    type=ConcurrencyUtil.cacheOrGet(myCalculatedTypes,expr,type);
    DebugUtil.trackInvalidation(expr,new Processor<PsiElement>(){
      @Override public boolean process(      PsiElement element){
        PsiType cached=myCalculatedTypes.get(element);
        if (cached != null) {
          LOG.error(element + " is invalid and yet it is still cached: " + cached);
        }
        return true;
      }
    }
);
  }
  if (!type.isValid()) {
    if (expr.isValid()) {
      LOG.error("Type is invalid: " + type + "; expr: '"+ expr+ "' is valid");
    }
 else {
      LOG.error("Expression: '" + expr + "' is invalid, must not be used for getType()");
    }
  }
  return type == TypeConversionUtil.NULL_TYPE ? null : type;
}
