{
  final Trinity<AntDomTarget,String,Map<String,AntDomTarget>> trinity=value.getValue();
  if (trinity == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final DomTarget domTarget=DomTarget.getTarget(trinity.getFirst());
  if (domTarget == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final PsiElement psiElement=PomService.convertToPsi(domTarget);
  return new PsiReference[]{new PsiReferenceBase<PsiElement>(psiElement){
    public PsiElement resolve(){
      return psiElement;
    }
    @NotNull public Object[] getVariants(){
      final Set<String> set=trinity.getThird().keySet();
      return set.toArray(new Object[set.size()]);
    }
  }
};
}
