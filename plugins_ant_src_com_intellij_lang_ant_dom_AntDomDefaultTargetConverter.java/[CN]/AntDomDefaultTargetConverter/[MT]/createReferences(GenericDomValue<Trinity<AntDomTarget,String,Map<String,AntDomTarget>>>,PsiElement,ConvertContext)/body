{
  return new PsiReference[]{new AntDomReferenceBase(element,true){
    public PsiElement resolve(){
      final Trinity<AntDomTarget,String,Map<String,AntDomTarget>> trinity=value.getValue();
      if (trinity == null) {
        return null;
      }
      final DomTarget domTarget=trinity.getFirst() != null ? DomTarget.getTarget(trinity.getFirst()) : null;
      return domTarget != null ? PomService.convertToPsi(domTarget) : null;
    }
    @NotNull public Object[] getVariants(){
      final Trinity<AntDomTarget,String,Map<String,AntDomTarget>> trinity=value.getValue();
      if (trinity == null) {
        return ArrayUtil.EMPTY_OBJECT_ARRAY;
      }
      final Set<String> set=trinity.getThird().keySet();
      return set.toArray(new Object[set.size()]);
    }
    public String getUnresolvedMessagePattern(){
      return AntBundle.message("cannot.resolve.target",getCanonicalText());
    }
  }
};
}
