{
  final Instruction[] flow=owner.getControlFlow();
  final ReachingDefinitionsDfaInstance dfaInstance=new ReachingDefinitionsDfaInstance(flow);
  final ReachingDefinitionsSemilattice lattice=new ReachingDefinitionsSemilattice();
  final DFAEngine<DefinitionMap> engine=new DFAEngine<DefinitionMap>(flow,dfaInstance,lattice);
  final List<DefinitionMap> dfaResult=engine.performDFAWithTimeout();
  if (dfaResult == null) {
    return;
  }
  final TIntHashSet unusedDefs=new TIntHashSet();
  for (  Instruction instruction : flow) {
    if (instruction instanceof ReadWriteVariableInstruction && ((ReadWriteVariableInstruction)instruction).isWrite()) {
      unusedDefs.add(instruction.num());
    }
  }
  for (int i=0; i < dfaResult.size(); i++) {
    final Instruction instruction=flow[i];
    if (instruction instanceof ReadWriteVariableInstruction) {
      final ReadWriteVariableInstruction varInst=(ReadWriteVariableInstruction)instruction;
      if (!varInst.isWrite()) {
        final String varName=varInst.getVariableName();
        DefinitionMap e=dfaResult.get(i);
        e.forEachValue(new TObjectProcedure<TIntHashSet>(){
          public boolean execute(          TIntHashSet reaching){
            reaching.forEach(new TIntProcedure(){
              public boolean execute(              int defNum){
                final String defName=((ReadWriteVariableInstruction)flow[defNum]).getVariableName();
                if (varName.equals(defName)) {
                  unusedDefs.remove(defNum);
                }
                return true;
              }
            }
);
            return true;
          }
        }
);
      }
    }
  }
  final Set<PsiElement> checked=ContainerUtil.newHashSet();
  unusedDefs.forEach(new TIntProcedure(){
    public boolean execute(    int num){
      final ReadWriteVariableInstruction instruction=(ReadWriteVariableInstruction)flow[num];
      final PsiElement element=instruction.getElement();
      process(element,checked,problemsHolder,GroovyInspectionBundle.message("unused.assignment.tooltip"));
      return true;
    }
  }
);
  owner.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitVariable(    GrVariable variable){
      if (checked.contains(variable) || variable.getInitializerGroovy() != null)       return;
      if (ReferencesSearch.search(variable).findFirst() == null) {
        process(variable,checked,problemsHolder,GroovyInspectionBundle.message("unused.variable"));
      }
    }
  }
);
}
