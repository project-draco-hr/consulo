{
  return new BaseInspectionVisitor(){
    @Override public void visitVariable(    GrVariable variable){
      super.visitVariable(variable);
      if (variable instanceof GrParameter) {
        PsiElement scope=((GrParameter)variable).getDeclarationScope();
        if (scope instanceof GrMethod) {
          if (((GrMethod)scope).getBlock() == null)           return;
          if (((GrMethod)scope).getHierarchicalMethodSignature().getSuperSignatures().size() > 0) {
            return;
          }
        }
      }
      if (!(variable instanceof GrField)) {
        checkVar(variable);
      }
    }
    private void checkVar(    GrVariable var){
      AccessToken lock=ApplicationManager.getApplication().acquireReadActionLock();
      try {
        boolean isNotAccessedForRead=ReferencesSearch.search(var).forEach(new Processor<PsiReference>(){
          @Override public boolean process(          PsiReference reference){
            PsiElement element=reference.getElement();
            return !(element instanceof GrExpression && PsiUtil.isAccessedForReading((GrExpression)element));
          }
        }
);
        if (isNotAccessedForRead) {
          registerError(var.getNameIdentifierGroovy(),GroovyInspectionBundle.message("unused.symbol"),getFixes(var),ProblemHighlightType.LIKE_UNUSED_SYMBOL);
        }
      }
  finally {
        lock.finish();
      }
    }
  }
;
}
