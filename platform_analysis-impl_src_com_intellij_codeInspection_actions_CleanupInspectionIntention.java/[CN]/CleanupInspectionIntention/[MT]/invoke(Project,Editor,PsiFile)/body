{
  if (!FileModificationService.getInstance().preparePsiElementForWrite(file))   return;
  final List<ProblemDescriptor> descriptions=ProgressManager.getInstance().runProcess(new Computable<List<ProblemDescriptor>>(){
    @Override public List<ProblemDescriptor> compute(){
      InspectionManager inspectionManager=InspectionManager.getInstance(project);
      return InspectionEngine.runInspectionOnFile(file,myToolWrapper,inspectionManager.createNewGlobalContext(false));
    }
  }
,new EmptyProgressIndicator());
  Collections.sort(descriptions,new Comparator<CommonProblemDescriptor>(){
    @Override public int compare(    final CommonProblemDescriptor o1,    final CommonProblemDescriptor o2){
      final ProblemDescriptorBase d1=(ProblemDescriptorBase)o1;
      final ProblemDescriptorBase d2=(ProblemDescriptorBase)o2;
      return d2.getTextRange().getStartOffset() - d1.getTextRange().getStartOffset();
    }
  }
);
  for (  final ProblemDescriptor descriptor : descriptions) {
    final QuickFix[] fixes=descriptor.getFixes();
    if (fixes != null && fixes.length > 0) {
      for (      final QuickFix<CommonProblemDescriptor> fix : fixes) {
        if (fix != null && fix.getClass().isAssignableFrom(myQuickfixClass)) {
          final PsiElement element=descriptor.getPsiElement();
          if (element != null && element.isValid()) {
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              @Override public void run(){
                fix.applyFix(project,descriptor);
              }
            }
);
            PsiDocumentManager.getInstance(project).commitAllDocuments();
          }
          break;
        }
      }
    }
  }
}
