{
  final ReadProcessRequest stdoutThread=new ReadProcessRequest(createProcessOutReader()){
    protected void textAvailable(    String s){
      notifyTextAvailable(s,ProcessOutputTypes.STDOUT);
    }
  }
;
  final ReadProcessRequest stderrThread=new ReadProcessRequest(createProcessErrReader()){
    protected void textAvailable(    String s){
      notifyTextAvailable(s,ProcessOutputTypes.STDERR);
    }
  }
;
  notifyTextAvailable(myCommandLine + '\n',ProcessOutputTypes.SYSTEM);
  addProcessListener(new ProcessAdapter(){
    public void startNotified(    final ProcessEvent event){
      try {
        final Semaphore outSemaphore=stdoutThread.schedule();
        final Semaphore errSemaphore=stderrThread.schedule();
        myWaitFor.setTerminationCallback(new Consumer<Integer>(){
          @Override public void consume(          Integer exitCode){
            try {
              stderrThread.setProcessTerminated(true);
              stdoutThread.setProcessTerminated(true);
              outSemaphore.waitFor();
              errSemaphore.waitFor();
            }
  finally {
              onOSProcessTerminated(exitCode);
            }
          }
        }
);
      }
  finally {
        removeProcessListener(this);
      }
    }
  }
);
  super.startNotify();
}
