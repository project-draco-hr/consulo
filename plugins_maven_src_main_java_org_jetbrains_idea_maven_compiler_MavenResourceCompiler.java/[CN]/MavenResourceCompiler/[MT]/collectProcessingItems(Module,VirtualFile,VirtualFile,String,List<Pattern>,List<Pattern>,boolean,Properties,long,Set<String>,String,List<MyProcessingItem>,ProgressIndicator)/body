{
  VfsUtilCore.visitChildrenRecursively(currentDir,new VirtualFileVisitor(){
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      indicator.checkCanceled();
      if (!file.isDirectory()) {
        String relPath=VfsUtilCore.getRelativePath(file,sourceRoot,'/');
        if (relPath == null) {
          MavenLog.LOG.error("Cannot calculate relate path for file: " + file + " in root: "+ sourceRoot);
          return true;
        }
        ProjectFileIndex fileIndex=ProjectRootManager.getInstance(module.getProject()).getFileIndex();
        if (fileIndex.isIgnored(file))         return true;
        if (!MavenUtil.isIncluded(relPath,includes,excludes))         return true;
        String outputPath=outputDir + "/" + relPath;
        long outputFileTimestamp=-1;
        File outputFile=new File(outputPath);
        if (outputFile.exists()) {
          outputFileTimestamp=outputFile.lastModified();
        }
        boolean isFiltered=isSourceRootFiltered && !nonFilteredExtensions.contains(file.getExtension());
        result.add(new MyProcessingItem(module,file,outputPath,outputFileTimestamp,isFiltered,properties,propertiesHashCode,escapeString));
      }
      return true;
    }
  }
);
}
