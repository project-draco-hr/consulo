{
  final MavenProjectsManager mavenProjectManager=MavenProjectsManager.getInstance(myProject);
  if (!mavenProjectManager.isMavenizedProject())   return ProcessingItem.EMPTY_ARRAY;
  return new ReadAction<ProcessingItem[]>(){
    protected void run(    Result<ProcessingItem[]> resultObject) throws Throwable {
      List<ProcessingItem> itemsToProcess=new ArrayList<ProcessingItem>();
      List<String> filesToDelete=new ArrayList<String>();
      for (      Module eachModule : context.getCompileScope().getAffectedModules()) {
        MavenProject mavenProject=mavenProjectManager.findProject(eachModule);
        if (mavenProject == null)         continue;
        Properties properties=loadFilters(context,mavenProject);
        List<String> nonFilteredExtensions=collectNonFilteredExtensions(mavenProject);
        String escapeString=mavenProject.findPluginConfigurationValue("org.apache.maven.plugins","maven-resources-plugin","escapeString");
        if (escapeString == null)         escapeString="\\";
        long propertiesHashCode=calculateHashCode(properties);
        collectProcessingItems(eachModule,mavenProject,context,properties,propertiesHashCode,nonFilteredExtensions,escapeString,false,itemsToProcess);
        collectProcessingItems(eachModule,mavenProject,context,properties,propertiesHashCode,nonFilteredExtensions,escapeString,true,itemsToProcess);
        collectItemsToDelete(eachModule,itemsToProcess,filesToDelete);
      }
      if (!filesToDelete.isEmpty()) {
        itemsToProcess.add(new FakeProcessingItem());
      }
      context.putUserData(FILES_TO_DELETE_KEY,filesToDelete);
      resultObject.setResult(itemsToProcess.toArray(new ProcessingItem[itemsToProcess.size()]));
      removeObsoleteModulesFromCache();
      saveCache();
    }
  }
.execute().getResultObject();
}
