{
  final Project project=context.getProject();
  final MavenProjectsManager mavenProjectManager=MavenProjectsManager.getInstance(project);
  if (!mavenProjectManager.isMavenizedProject())   return ProcessingItem.EMPTY_ARRAY;
  List<ProcessingItem> allItemsToProcess=new ArrayList<ProcessingItem>();
  List<String> filesToDelete=new ArrayList<String>();
  AccessToken accessToken=ReadAction.start();
  try {
    for (    Module eachModule : context.getCompileScope().getAffectedModules()) {
      MavenProject mavenProject=mavenProjectManager.findProject(eachModule);
      if (mavenProject == null)       continue;
      Properties properties=loadPropertiesAndFilters(context,mavenProject);
      Set<String> nonFilteredExtensions=collectNonFilteredExtensions(mavenProject);
      String escapeString=MavenJDOMUtil.findChildValueByPath(mavenProject.getPluginConfiguration("org.apache.maven.plugins","maven-resources-plugin"),"escapeString","\\");
      long propertiesHashCode=calculateHashCode(mavenProject,properties);
      List<MyProcessingItem> moduleItemsToProcess=new ArrayList<MyProcessingItem>();
      collectProcessingItems(eachModule,mavenProject,context,properties,propertiesHashCode,nonFilteredExtensions,escapeString,false,moduleItemsToProcess);
      collectProcessingItems(eachModule,mavenProject,context,properties,propertiesHashCode,nonFilteredExtensions,escapeString,true,moduleItemsToProcess);
      collectItemsToDelete(eachModule,moduleItemsToProcess,filesToDelete);
      allItemsToProcess.addAll(moduleItemsToProcess);
    }
    if (!filesToDelete.isEmpty()) {
      allItemsToProcess.add(new FakeProcessingItem());
    }
    context.putUserData(FILES_TO_DELETE_KEY,filesToDelete);
    removeObsoleteModulesFromCache(project);
    saveCache(project);
  }
  finally {
    accessToken.finish();
  }
  return allItemsToProcess.toArray(new ProcessingItem[allItemsToProcess.size()]);
}
