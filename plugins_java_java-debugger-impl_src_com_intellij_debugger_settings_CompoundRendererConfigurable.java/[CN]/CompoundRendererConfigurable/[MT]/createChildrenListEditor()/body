{
  final MyTableModel tableModel=new MyTableModel();
  myTable=new JBTable(tableModel);
  myListChildrenEditor=new DebuggerExpressionTextField(myProject,null,"NamedChildrenConfigurable");
  final TableColumn exprColumn=myTable.getColumnModel().getColumn(EXPRESSION_TABLE_COLUMN);
  exprColumn.setCellEditor(new AbstractTableCellEditor(){
    public Object getCellEditorValue(){
      return myListChildrenEditor.getText();
    }
    public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      myListChildrenEditor.setText((TextWithImports)value);
      return myListChildrenEditor;
    }
  }
);
  exprColumn.setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      final TextWithImports textWithImports=(TextWithImports)value;
      final String text=(textWithImports != null) ? textWithImports.getText() : "";
      return super.getTableCellRendererComponent(table,text,isSelected,hasFocus,row,column);
    }
  }
);
  return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      tableModel.addRow("",DebuggerUtils.getInstance().createExpressionWithImports(""));
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      int selectedRow=myTable.getSelectedRow();
      if (selectedRow >= 0 && selectedRow < myTable.getRowCount()) {
        getTableModel().removeRow(selectedRow);
      }
    }
  }
).setMoveUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      TableUtil.moveSelectedItemsUp(myTable);
    }
  }
).setMoveDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      TableUtil.moveSelectedItemsDown(myTable);
    }
  }
).createPanel();
}
