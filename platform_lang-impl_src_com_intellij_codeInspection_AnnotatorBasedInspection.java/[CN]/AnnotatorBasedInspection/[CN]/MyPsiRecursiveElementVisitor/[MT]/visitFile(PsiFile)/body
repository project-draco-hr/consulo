{
  myFile=file;
  final VirtualFile virtualFile=myFile.getVirtualFile();
  if (virtualFile != null) {
    myGlobalContext.incrementJobDoneAmount(ANNOTATOR,ProjectUtil.calcRelativeToProjectPath(virtualFile,myFile.getProject()));
  }
  myHolder=new AnnotationHolderImpl(new AnnotationSession(file)){
    @Override public Annotation createErrorAnnotation(    @NotNull PsiElement elt,    String message){
      return createProblem(elt,message,ProblemHighlightType.ERROR,HighlightSeverity.ERROR,null);
    }
    @Override public Annotation createWarningAnnotation(    @NotNull PsiElement elt,    String message){
      return createProblem(elt,message,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,HighlightSeverity.WARNING,null);
    }
    @Override public Annotation createInfoAnnotation(    @NotNull PsiElement elt,    String message){
      return super.createInfoAnnotation(elt,message);
    }
    @Override public Annotation createInformationAnnotation(    @NotNull PsiElement elt,    String message){
      return createProblem(elt,message,ProblemHighlightType.INFORMATION,HighlightSeverity.INFORMATION,null);
    }
    private Annotation createProblem(    PsiElement elt,    String message,    ProblemHighlightType problemHighlightType,    HighlightSeverity severity,    TextRange range){
      GlobalInspectionUtil.createProblem(elt,message,problemHighlightType,range,myManager,myProblemDescriptionsProcessor,myGlobalContext);
      return super.createAnnotation(elt.getTextRange(),severity,message);
    }
    @Override public Annotation createErrorAnnotation(    @NotNull ASTNode node,    String message){
      return createErrorAnnotation(node.getPsi(),message);
    }
    @Override public Annotation createWarningAnnotation(    @NotNull ASTNode node,    String message){
      return createWarningAnnotation(node.getPsi(),message);
    }
    @Override public Annotation createInformationAnnotation(    @NotNull ASTNode node,    String message){
      return createInformationAnnotation(node.getPsi(),message);
    }
    @Override public Annotation createInfoAnnotation(    @NotNull ASTNode node,    String message){
      return createInfoAnnotation(node.getPsi(),message);
    }
    @Override protected Annotation createAnnotation(    TextRange range,    HighlightSeverity severity,    String message){
      if (severity != HighlightSeverity.INFORMATION) {
        GlobalInspectionUtil.createProblem(myFile,message,HighlightInfo.convertSeverityToProblemHighlight(severity),range,myManager,myProblemDescriptionsProcessor,myGlobalContext);
      }
      return super.createAnnotation(range,severity,message);
    }
  }
;
  super.visitFile(file);
}
