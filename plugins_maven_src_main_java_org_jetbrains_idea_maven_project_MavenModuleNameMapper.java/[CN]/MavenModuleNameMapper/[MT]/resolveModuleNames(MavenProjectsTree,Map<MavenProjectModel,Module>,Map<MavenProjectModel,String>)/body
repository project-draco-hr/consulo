{
  for (  MavenProjectModel each : mavenTree.getProjects()) {
    String name;
    Module module=mavenProjectToModule.get(each);
    if (module != null) {
      name=module.getName();
    }
 else     if (each.isValid()) {
      name=each.getMavenId().artifactId;
    }
 else {
      name=each.getDirectoryFile().getName();
    }
    mavenProjectToModuleName.put(each,name);
  }
  Map<String,Integer> counts=collectNamesCounts(mavenTree,mavenProjectToModuleName);
  for (  MavenProjectModel each : mavenTree.getProjects()) {
    if (!each.isValid())     continue;
    String name=mavenProjectToModuleName.get(each);
    if (counts.get(name) > 1) {
      mavenProjectToModuleName.put(each,name + " (" + each.getMavenId().groupId+ ")");
    }
  }
  for (  MavenProjectModel each : mavenTree.getProjects()) {
    String name=mavenProjectToModuleName.get(each);
    List<MavenProjectModel> withSameName=getProjectsWithName(mavenTree,name,mavenProjectToModuleName);
    if (withSameName.size() > 1) {
      int i=1;
      for (      MavenProjectModel eachWithSameName : withSameName) {
        mavenProjectToModuleName.put(eachWithSameName,name + " (" + i+ ")");
        i++;
      }
    }
  }
}
