{
  final Throwable[] throwables=new Throwable[1];
  Runnable runnable=new Runnable(){
    @Override public void run(){
      ourTestThread=Thread.currentThread();
      ourTestTime=getTimeRequired();
      try {
        try {
          setUp();
        }
 catch (        Throwable e) {
          disposeProject();
          throw e;
        }
        try {
          myAssertionsInTestDetected=true;
          runTest();
          myAssertionsInTestDetected=false;
        }
  finally {
          try {
            tearDown();
          }
 catch (          Throwable th) {
            th.printStackTrace();
          }
        }
      }
 catch (      Throwable throwable) {
        throwables[0]=throwable;
      }
 finally {
        ourTestThread=null;
      }
    }
  }
;
  runBareRunnable(runnable);
  if (IdeaLogger.ourErrorsOccurred != null) {
    throw IdeaLogger.ourErrorsOccurred;
  }
  if (throwables[0] != null) {
    throw throwables[0];
  }
  waitForAllLaters();
  if (IdeaLogger.ourErrorsOccurred != null) {
    throw IdeaLogger.ourErrorsOccurred;
  }
  if (++LEAK_WALKS % 1000 == 0) {
    LeakHunter.checkLeak(ApplicationManager.getApplication(),ProjectImpl.class,new Processor<ProjectImpl>(){
      @Override public boolean process(      ProjectImpl project){
        return !project.isDefault() && !LightPlatformTestCase.isLight(project);
      }
    }
);
  }
}
