{
  CompositeException result=new CompositeException();
  if (myProject != null) {
    try {
      LightPlatformTestCase.doTearDown(getProject(),ourApplication,false);
    }
 catch (    Throwable e) {
      result.add(e);
    }
  }
  try {
    checkForSettingsDamage();
  }
 catch (  Throwable e) {
    result.add(e);
  }
  try {
    Project project=getProject();
    disposeProject(result);
    if (project != null) {
      try {
        InjectedLanguageManagerImpl.checkInjectorsAreDisposed(project);
      }
 catch (      AssertionError e) {
        result.add(e);
      }
    }
    try {
      for (      final File fileToDelete : myFilesToDelete) {
        delete(fileToDelete);
      }
      LocalFileSystem.getInstance().refreshIoFiles(myFilesToDelete);
    }
 catch (    Throwable e) {
      result.add(e);
    }
    if (!myAssertionsInTestDetected) {
      if (IdeaLogger.ourErrorsOccurred != null) {
        result.add(IdeaLogger.ourErrorsOccurred);
      }
    }
    try {
      super.tearDown();
    }
 catch (    Throwable e) {
      result.add(e);
    }
    try {
      myEditorListenerTracker.checkListenersLeak();
    }
 catch (    AssertionError error) {
      result.add(error);
    }
    try {
      myThreadTracker.checkLeak();
    }
 catch (    AssertionError error) {
      result.add(error);
    }
    try {
      LightPlatformTestCase.checkEditorsReleased();
    }
 catch (    Throwable error) {
      result.add(error);
    }
  }
  finally {
    myProjectManager=null;
    myProject=null;
    myModule=null;
    myFilesToDelete.clear();
    myEditorListenerTracker=null;
    myThreadTracker=null;
    ourTestCase=null;
  }
  if (!result.isEmpty())   throw result;
}
