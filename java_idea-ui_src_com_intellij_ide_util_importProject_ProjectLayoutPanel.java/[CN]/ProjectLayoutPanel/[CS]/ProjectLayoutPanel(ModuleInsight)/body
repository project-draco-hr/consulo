{
  super(new BorderLayout());
  myInsight=insight;
  myEntriesChooser=new ElementsChooser<T>(true){
    public String getItemText(    @NotNull T element){
      return getElementText(element);
    }
  }
;
  myDependenciesList=createList();
  final Splitter splitter=new Splitter(false);
  final JBScrollPane entriesPane=new JBScrollPane(myEntriesChooser);
  entriesPane.setBorder(BorderFactory.createTitledBorder(getEntriesChooserTitle()));
  splitter.setFirstComponent(entriesPane);
  final JBScrollPane depsPane=new JBScrollPane(myDependenciesList);
  depsPane.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(getDependenciesTitle()),depsPane.getBorder()));
  splitter.setSecondComponent(depsPane);
  JPanel groupPanel=new JPanel(new BorderLayout());
  groupPanel.add(createEntriesActionToolbar().getComponent(),BorderLayout.NORTH);
  groupPanel.add(splitter,BorderLayout.CENTER);
  groupPanel.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
  final MultiLineLabel description=new MultiLineLabel(getStepDescriptionText());
  description.setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  add(description,BorderLayout.NORTH);
  add(groupPanel,BorderLayout.CENTER);
  myEntriesChooser.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final List<T> entries=getSelectedEntries();
      final Collection deps=getDependencies(entries);
      final DefaultListModel depsModel=(DefaultListModel)myDependenciesList.getModel();
      depsModel.clear();
      for (      Object dep : alphaSortList(new ArrayList(deps))) {
        depsModel.addElement(dep);
      }
    }
  }
);
}
