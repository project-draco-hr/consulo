{
  super(new BorderLayout());
  setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  myInsight=insight;
  myEntriesChooser=new ElementsChooser<T>(true){
    public String getItemText(    @NotNull T element){
      return getElementText(element);
    }
  }
;
  myDependenciesList=createList();
  final Splitter splitter=new Splitter(false);
  final JScrollPane entriesPane=ScrollPaneFactory.createScrollPane(myEntriesChooser);
  final JPanel entriesPanel=new JPanel(new BorderLayout());
  entriesPanel.add(entriesPane,BorderLayout.CENTER);
  entriesPanel.setBorder(IdeBorderFactory.createTitledBorder(getEntriesChooserTitle(),false,false,true));
  splitter.setFirstComponent(entriesPanel);
  final JScrollPane depsPane=ScrollPaneFactory.createScrollPane(myDependenciesList);
  final JPanel depsPanel=new JPanel(new BorderLayout());
  depsPanel.add(depsPane,BorderLayout.CENTER);
  depsPanel.setBorder(IdeBorderFactory.createTitledBorder(getDependenciesTitle(),false,false,true));
  splitter.setSecondComponent(depsPanel);
  JPanel groupPanel=new JPanel(new BorderLayout());
  groupPanel.add(createEntriesActionToolbar().getComponent(),BorderLayout.NORTH);
  groupPanel.add(splitter,BorderLayout.CENTER);
  groupPanel.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
  final MultiLineLabel description=new MultiLineLabel(getStepDescriptionText());
  add(description,BorderLayout.NORTH);
  add(groupPanel,BorderLayout.CENTER);
  myEntriesChooser.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final List<T> entries=getSelectedEntries();
      final Collection deps=getDependencies(entries);
      final DefaultListModel depsModel=(DefaultListModel)myDependenciesList.getModel();
      depsModel.clear();
      for (      Object dep : alphaSortList(new ArrayList(deps))) {
        depsModel.addElement(dep);
      }
    }
  }
);
}
