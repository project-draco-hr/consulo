{
  myNavigateAction=new DumbAwareAction("Edit Source","Edit Source",AllIcons.Actions.EditSource){
    @Nullable private OpenFileDescriptor createDescriptor(){
      if (myFragmentedContent == null || myFragmentedContent.getFile() == null)       return null;
      final DiffPanel panel=myCurrentHorizontal ? myHorizontal : myVertical;
      final DiffSideView side=((DiffPanelImpl)panel).getCurrentSide();
      if (side == null || side.getEditor() == null)       return null;
      final boolean isAfter=FragmentSide.SIDE2.equals(side.getSide());
      if (isAfter) {
        final LogicalPosition position=side.getEditor().getCaretModel().getLogicalPosition();
        final int line=position.line;
        final int converted=myFragmentedContent.getNewConvertor().execute(line);
        return new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),converted,position.column);
      }
      if (((DiffPanelImpl)panel).getEditor1().getDocument().getTextLength() == 0) {
        return new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),0);
      }
      final CaretModel model=side.getEditor().getCaretModel();
      final FragmentList fragments=((DiffPanelImpl)panel).getFragments();
      final int line=model.getLogicalPosition().line;
      final int offset=model.getOffset();
      BeforeAfter<Integer> current=null;
      final List<BeforeAfter<Integer>> ranges=myFragmentedContent.getLineRanges();
      for (      BeforeAfter<Integer> range : ranges) {
        if (range.getBefore() > line)         break;
        current=range;
      }
      if (current == null)       return null;
      final Fragment at=fragments.getFragmentAt(offset,FragmentSide.SIDE1,Conditions.<Fragment>alwaysTrue());
      if (at == null)       return null;
      final TextRange opposite=at.getRange(FragmentSide.SIDE2);
      final int lineInNew=((DiffPanelImpl)panel).getEditor2().getDocument().getLineNumber(opposite.getStartOffset());
      int correctLine;
      int column;
      if (at.getType() == null || TextDiffTypeEnum.NONE.equals(at.getType())) {
        column=model.getLogicalPosition().column;
        final int startIn1=((DiffPanelImpl)panel).getEditor1().getDocument().getLineNumber(at.getRange(FragmentSide.SIDE1).getStartOffset());
        correctLine=lineInNew + line - startIn1;
      }
 else {
        column=0;
        correctLine=Math.max(lineInNew,current.getAfter());
      }
      int converted=myFragmentedContent.getNewConvertor().execute(correctLine);
      return new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),converted,column);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      if (!getEnabled())       return;
      final OpenFileDescriptor descriptor=createDescriptor();
      if (descriptor == null)       return;
      final Runnable runnable=new Runnable(){
        @Override public void run(){
          FileEditorManager.getInstance(myProject).openTextEditor(descriptor,true);
        }
      }
;
      if (ModalityState.NON_MODAL.equals(ModalityState.current())) {
        runnable.run();
      }
 else {
        final Window window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
        if (window instanceof DialogWrapperDialog) {
          final DialogWrapper wrapper=((DialogWrapperDialog)window).getDialogWrapper();
          if (wrapper != null) {
            wrapper.doCancelAction();
            ApplicationManager.getApplication().invokeLater(runnable,ModalityState.NON_MODAL,myProject.getDisposed());
          }
        }
      }
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      final boolean enabled=getEnabled();
      e.getPresentation().setEnabled(enabled);
    }
    private boolean getEnabled(){
      final DiffPanel panel=myCurrentHorizontal ? myHorizontal : myVertical;
      if (panel == null)       return false;
      final DiffSideView side=((DiffPanelImpl)panel).getCurrentSide();
      return side != null && side.getEditor() != null;
    }
  }
;
}
