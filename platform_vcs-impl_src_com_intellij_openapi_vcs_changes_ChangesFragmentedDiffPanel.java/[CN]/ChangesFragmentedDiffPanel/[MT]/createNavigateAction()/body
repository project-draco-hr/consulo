{
  myNavigateAction=new DumbAwareAction("Edit Source","Edit Source",IconLoader.getIcon("/actions/editSource.png")){
    @Override public void actionPerformed(    AnActionEvent e){
      final boolean enabled=getEnabled();
      if (enabled) {
        OpenFileDescriptor descriptor=null;
        if (myFragmentedContent != null && myFragmentedContent.getFile() != null) {
          final DiffPanel panel=myCurrentHorizontal ? myHorizontal : myVertical;
          final DiffSideView side=((DiffPanelImpl)panel).getCurrentSide();
          if (side == null || side.getEditor() == null)           return;
          final boolean isAfter=FragmentSide.SIDE2.equals(side.getSide());
          if (isAfter) {
            final int line=side.getEditor().getCaretModel().getLogicalPosition().line;
            final Integer converted=myFragmentedContent.getNewConvertor().convert(line);
            descriptor=new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),converted,0);
          }
 else {
            if (((DiffPanelImpl)panel).getEditor1().getDocument().getTextLength() == 0) {
              FileEditorManager.getInstance(myProject).openTextEditor(new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),0),true);
              return;
            }
            final CaretModel model=side.getEditor().getCaretModel();
            final FragmentList fragments=((DiffPanelImpl)panel).getFragments();
            final int line=model.getLogicalPosition().line;
            final int offset=side.getEditor().getDocument().getLineStartOffset(line);
            BeforeAfter<Integer> current=null;
            final List<BeforeAfter<Integer>> ranges=myFragmentedContent.getLineRanges();
            for (            BeforeAfter<Integer> range : ranges) {
              if (range.getBefore() > line)               break;
              current=range;
            }
            if (current == null)             return;
            final Fragment at=fragments.getFragmentAt(offset,FragmentSide.SIDE1,Condition.TRUE);
            if (at == null)             return;
            final TextRange opposite=at.getRange(FragmentSide.SIDE2);
            final int lineInNew=((DiffPanelImpl)panel).getEditor2().getDocument().getLineNumber(opposite.getStartOffset());
            int correctLine=Math.max(lineInNew,current.getAfter());
            final Integer converted=myFragmentedContent.getNewConvertor().convert(correctLine);
            descriptor=new OpenFileDescriptor(myProject,myFragmentedContent.getFile(),converted,0);
          }
        }
        if (descriptor == null)         return;
        FileEditorManager.getInstance(myProject).openTextEditor(descriptor,true);
      }
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      final boolean enabled=getEnabled();
      e.getPresentation().setEnabled(enabled);
    }
    private boolean getEnabled(){
      final DiffPanel panel=myCurrentHorizontal ? myHorizontal : myVertical;
      if (panel == null)       return false;
      final DiffSideView side=((DiffPanelImpl)panel).getCurrentSide();
      if (side == null || side.getEditor() == null)       return false;
      if (side.getEditor() != null) {
        return true;
      }
      return false;
    }
  }
;
}
