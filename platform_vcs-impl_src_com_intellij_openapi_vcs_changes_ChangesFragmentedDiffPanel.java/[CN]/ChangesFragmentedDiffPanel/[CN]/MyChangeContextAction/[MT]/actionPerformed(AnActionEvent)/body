{
  JPanel result=new JPanel(new BorderLayout());
  JLabel label=new JLabel("Lines around:");
  label.setBorder(BorderFactory.createEmptyBorder(4,4,0,0));
  JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.add(label,BorderLayout.NORTH);
  result.add(wrapper,BorderLayout.WEST);
  final JSlider slider=new JSlider(JSlider.HORIZONTAL,1,5,1);
  slider.setMinorTickSpacing(1);
  slider.setPaintTicks(true);
  slider.setPaintTrack(true);
  slider.setSnapToTicks(true);
  UIUtil.setSliderIsFilled(slider,true);
  slider.setPaintLabels(true);
  slider.setLabelTable(LABELS);
  result.add(slider,BorderLayout.CENTER);
  final VcsConfiguration configuration=VcsConfiguration.getInstance(myProject);
  for (int i=0; i < ourMarks.length; i++) {
    int mark=ourMarks[i];
    if (mark == configuration.SHORT_DIFF_EXTRA_LINES) {
      slider.setValue(i + 1);
    }
  }
  JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(result,slider).createPopup();
  popup.setFinalRunnable(new Runnable(){
    @Override public void run(){
      int value=slider.getModel().getValue();
      if (configuration.SHORT_DIFF_EXTRA_LINES != ourMarks[value - 1]) {
        configuration.SHORT_DIFF_EXTRA_LINES=ourMarks[value - 1];
        myFragmentedContent.recalculate();
        refreshData(myFragmentedContent);
      }
    }
  }
);
  InputEvent inputEvent=e.getInputEvent();
  if (inputEvent instanceof MouseEvent) {
    int width=result.getPreferredSize().width;
    MouseEvent inputEvent1=(MouseEvent)inputEvent;
    Point point1=new Point(inputEvent1.getX() - width / 2,inputEvent1.getY());
    RelativePoint point=new RelativePoint(inputEvent1.getComponent(),point1);
    popup.show(point);
  }
 else {
    popup.showInBestPositionFor(e.getDataContext());
  }
}
