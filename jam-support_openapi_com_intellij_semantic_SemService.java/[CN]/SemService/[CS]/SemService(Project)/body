{
  project.getMessageBus().connect().subscribe(ProjectTopics.MODIFICATION_TRACKER,new PsiModificationTracker.Listener(){
    public void modificationCountChanged(){
      ApplicationManager.getApplication().assertWriteAccessAllowed();
      myCache.clear();
    }
  }
);
  final SemRegistrar registrar=new SemRegistrar(){
    public <T extends SemElement,V extends PsiElement>void registerSemElementProvider(    SemKey<T> key,    final ElementPattern<? extends V> place,    final NullableFunction<V,T> provider){
      myProducers.putValue(key,new NullableFunction<PsiElement,SemElement>(){
        public SemElement fun(        PsiElement element){
          if (place.accepts(element)) {
            return provider.fun((V)element);
          }
          return null;
        }
      }
);
    }
  }
;
  for (  SemContributor contributor : project.getExtensions(SemContributor.EP_NAME)) {
    contributor.registerSemProviders(registrar);
  }
}
