def revtree(ui, args, repo, full='tree', maxnr=0, parents=False):

    def chlogwalk():
        count = len(repo)
        i = count
        l = ([0] * 100)
        chunk = 100
        while True:
            if (chunk > i):
                chunk = i
                i = 0
            else:
                i -= chunk
            for x in xrange(chunk):
                if ((i + x) >= count):
                    l[(chunk - x):] = ([0] * (chunk - x))
                    break
                if (full != None):
                    l[x] = repo[(i + x)]
                    l[x].changeset()
                else:
                    l[x] = 1
            for x in xrange((chunk - 1), (-1), (-1)):
                if (l[x] != 0):
                    yield ((i + x), (((full != None) and l[x]) or None))
            if (i == 0):
                break

    def is_reachable(ar, reachable, sha):
        if (len(ar) == 0):
            return 1
        mask = 0
        for i in xrange(len(ar)):
            if (sha in reachable[i]):
                mask |= (1 << i)
        return mask
    reachable = []
    stop_sha1 = []
    want_sha1 = []
    count = 0
    for (i, arg) in enumerate(args):
        if arg.startswith('^'):
            s = repo.lookup(arg[1:])
            stop_sha1.append(s)
            want_sha1.append(s)
        elif (arg != 'HEAD'):
            want_sha1.append(repo.lookup(arg))
    for (i, n) in enumerate(want_sha1):
        reachable.append(set())
        visit = [n]
        reachable[i].add(n)
        while visit:
            n = visit.pop(0)
            if (n in stop_sha1):
                continue
            for p in repo.changelog.parents(n):
                if (p not in reachable[i]):
                    reachable[i].add(p)
                    visit.append(p)
                if (p in stop_sha1):
                    continue
    for (i, ctx) in chlogwalk():
        n = repo.changelog.node(i)
        mask = is_reachable(want_sha1, reachable, n)
        if mask:
            parentstr = ''
            if parents:
                pp = repo.changelog.parents(n)
                if (pp[0] != nullid):
                    parentstr += (' ' + short(pp[0]))
                if (pp[1] != nullid):
                    parentstr += (' ' + short(pp[1]))
            if (not full):
                ui.write(('%s%s\n' % (short(n), parentstr)))
            elif (full == 'commit'):
                ui.write(('%s%s\n' % (short(n), parentstr)))
                catcommit(ui, repo, n, '    ', ctx)
            else:
                (p1, p2) = repo.changelog.parents(n)
                (h, h1, h2) = map(short, (n, p1, p2))
                (i1, i2) = map(repo.changelog.rev, (p1, p2))
                date = ctx.date()[0]
                ui.write(('%s %s:%s' % (date, h, mask)))
                mask = is_reachable(want_sha1, reachable, p1)
                if ((i1 != nullrev) and (mask > 0)):
                    (ui.write(('%s:%s ' % (h1, mask))),)
                mask = is_reachable(want_sha1, reachable, p2)
                if ((i2 != nullrev) and (mask > 0)):
                    ui.write(('%s:%s ' % (h2, mask)))
                ui.write('\n')
            if (maxnr and (count >= maxnr)):
                break
            count += 1
