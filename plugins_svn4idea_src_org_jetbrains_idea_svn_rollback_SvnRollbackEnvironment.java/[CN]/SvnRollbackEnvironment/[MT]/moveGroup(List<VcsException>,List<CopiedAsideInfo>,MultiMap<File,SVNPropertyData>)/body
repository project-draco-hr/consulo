{
  Collections.sort(fromTo,new Comparator<CopiedAsideInfo>(){
    @Override public int compare(    CopiedAsideInfo o1,    CopiedAsideInfo o2){
      return FileUtil.compareFiles(o1.getTo(),o2.getTo());
    }
  }
);
  for (  CopiedAsideInfo info : fromTo) {
    if (info.getParentImmediateReverted().exists()) {
      try {
        final File from=info.getFrom();
        final File target=info.getTo();
        if (from != null && !FileUtil.filesEqual(from,target) && !target.exists()) {
          SvnFileSystemListener.moveFileWithSvn(mySvnVcs,from,target);
        }
        final File root=info.getTmpPlace();
        if (root == null)         continue;
        if (!root.isDirectory()) {
          if (target.exists()) {
            FileUtil.copy(root,target);
          }
 else {
            FileUtil.rename(root,target);
          }
        }
 else {
          FileUtil.processFilesRecursively(root,new Processor<File>(){
            @Override public boolean process(            File file){
              if (file.isDirectory())               return true;
              String relativePath=FileUtil.getRelativePath(root.getPath(),file.getPath(),File.separatorChar);
              File newFile=new File(target,relativePath);
              newFile.getParentFile().mkdirs();
              try {
                if (target.exists()) {
                  FileUtil.copy(file,newFile);
                }
 else {
                  FileUtil.rename(file,newFile);
                }
              }
 catch (              IOException e) {
                exceptions.add(new VcsException(e));
              }
              return true;
            }
          }
);
        }
      }
 catch (      IOException e) {
        exceptions.add(new VcsException(e));
      }
catch (      SVNException e) {
        exceptions.add(new VcsException(e));
      }
    }
  }
  applyProperties(properties,exceptions);
}
