{
  myTree=new Tree();
  myTree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode()));
  myTree.setScrollsOnExpand(true);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      if (!myTreeBuilder.getSelectedElements(ResourceItem.class).isEmpty()) {
        close(OK_EXIT_CODE);
        return true;
      }
      return false;
    }
  }
.installOn(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeUtil.installActions(myTree);
  ResourceManager manager=facet.getResourceManager(system ? AndroidUtils.SYSTEM_RESOURCE_PACKAGE : null);
  ResourceGroup[] groups=new ResourceGroup[types.length];
  for (int i=0; i < types.length; i++) {
    groups[i]=new ResourceGroup(types[i],manager);
  }
  myTreeBuilder=new AbstractTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),new TreeContentProvider(groups),null);
  myTreeBuilder.initRootNode();
  TreeSelectionModel selectionModel=myTree.getSelectionModel();
  selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  selectionModel.addTreeSelectionListener(ResourceDialog.this);
  myTree.setCellRenderer(new NodeRenderer(){
    @Override protected void doAppend(    @NotNull @Nls String fragment,    @NotNull SimpleTextAttributes attributes,    boolean isMainText,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    @NotNull String fragment,    @NotNull SimpleTextAttributes attributes,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    String fragment,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,SimpleTextAttributes.REGULAR_ATTRIBUTES,selected,this);
    }
  }
);
  new TreeSpeedSearch(myTree,TreeSpeedSearch.NODE_DESCRIPTOR_TOSTRING,true);
  myComponent=ScrollPaneFactory.createScrollPane(myTree);
}
