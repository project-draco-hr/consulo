{
  final PsiManager manager=expression.getManager();
  final LanguageLevel languageLevel=manager.getEffectiveLanguageLevel();
  if (languageLevel.equals(LanguageLevel.JDK_1_3) || languageLevel.equals(LanguageLevel.JDK_1_4)) {
    return;
  }
  super.visitNewExpression(expression);
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  final String canonicalText=type.getCanonicalText();
  if (!cachedNumberTypes.contains(canonicalText)) {
    return;
  }
  final PsiClass aClass=ClassUtils.getContainingClass(expression);
  if (aClass != null && cachedNumberTypes.contains(aClass.getQualifiedName())) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType argumentType=argument.getType();
  if (argumentType == null || argumentType.equalsToText("java.lang.String")) {
    return;
  }
  registerError(expression);
}
