{
  final PsiTypeParameter[] typeParameters=method.getTypeParameters();
  if (typeParameters.length == 0)   return false;
  final Set<PsiTypeParameter> set=new THashSet<PsiTypeParameter>(Arrays.asList(typeParameters));
  final PsiTypeVisitor<Boolean> typeParamSearcher=new PsiTypeVisitor<Boolean>(){
    public Boolean visitType(    final PsiType type){
      return true;
    }
    public Boolean visitArrayType(    final PsiArrayType arrayType){
      return arrayType.getComponentType().accept(this);
    }
    public Boolean visitClassType(    final PsiClassType classType){
      final PsiClass aClass=classType.resolve();
      if (aClass instanceof PsiTypeParameter && set.contains(aClass))       return false;
      final PsiType[] types=classType.getParameters();
      for (      final PsiType psiType : types) {
        if (!psiType.accept(this))         return false;
      }
      return true;
    }
    public Boolean visitWildcardType(    final PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      return bound == null || bound.accept(this);
    }
  }
;
  for (  final PsiParameter parameter : method.getParameterList().getParameters()) {
    if (!parameter.getType().accept(typeParamSearcher))     return false;
  }
  return true;
}
