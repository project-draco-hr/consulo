{
  if (reference instanceof PsiJavaReference) {
    final THashSet<LookupElement> set=new THashSet<LookupElement>();
    final PsiJavaReference javaReference=(PsiJavaReference)reference;
    final JavaCompletionProcessor processor=new JavaCompletionProcessor(element,new ElementFilter(){
      public boolean isAcceptable(      Object element,      PsiElement context){
        return filter.isAcceptable(element,context);
      }
      public boolean isClassAcceptable(      Class hintClass){
        if (acceptClasses) {
          return ReflectionCache.isAssignable(PsiClass.class,hintClass);
        }
        return ReflectionCache.isAssignable(PsiVariable.class,hintClass) || ReflectionCache.isAssignable(PsiMethod.class,hintClass) || ReflectionCache.isAssignable(PsiExpression.class,hintClass)|| ReflectionCache.isAssignable(Template.class,hintClass)|| ReflectionCache.isAssignable(CandidateInfo.class,hintClass)|| ReflectionCache.isAssignable(PsiKeyword.class,hintClass);
      }
    }
,true);
    javaReference.processVariants(processor);
    for (    CompletionElement completionElement : processor.getResults()) {
      addLookupItem(set,tailType,completionElement.getElement(),completionElement.getSubstitutor(),completionElement.getQualifier());
    }
    return set;
  }
  return Collections.emptySet();
}
