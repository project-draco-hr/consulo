{
  registrar.extend(CompletionType.SMART,psiElement()).withId(JavaCompletionContributor.JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      final Set<LookupItem> set=new LinkedHashSet<LookupItem>();
      final PsiElement identifierCopy=parameters.getPosition();
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      context.setPrefix(identifierCopy,context.getStartOffset(),SMART_DATA);
      PsiFile file=parameters.getOriginalFile();
      final PsiReference ref=identifierCopy.getContainingFile().findReferenceAt(identifierCopy.getTextRange().getStartOffset());
      if (ref != null) {
        SMART_DATA.completeReference(ref,set,identifierCopy,result.getPrefixMatcher(),file,context.getStartOffset());
      }
      SMART_DATA.addKeywordVariants(keywordVariants,identifierCopy,file);
      SMART_DATA.completeKeywordsBySet(set,keywordVariants,identifierCopy,result.getPrefixMatcher(),file);
      JavaCompletionUtil.highlightMembersOfContainer(set);
      final PsiExpression expr=PsiTreeUtil.getContextOfType(parameters.getPosition(),PsiExpression.class,true);
      final ExpectedTypeInfo[] expectedInfos=expr != null ? ExpectedTypesProvider.getInstance(context.project).getExpectedTypes(expr,true) : null;
      final DefaultInsertHandler defaultHandler=new DefaultInsertHandler();
      for (      final LookupItem item : set) {
        final Object o=item.getObject();
        InsertHandler oldHandler=item.getInsertHandler();
        if (oldHandler == null) {
          oldHandler=defaultHandler;
        }
        item.setInsertHandler(new AnalyzingInsertHandler(o,expectedInfos,oldHandler));
      }
      result.addAllElements(set);
    }
  }
);
}
