{
  final PsiFile file=position.getContainingFile();
  if (completion instanceof PsiMethod && expectedTypes != null) {
    final PsiMethod method=(PsiMethod)completion;
    for (    final ExpectedTypeInfo type : expectedTypes) {
      if (shouldInsertExplicitTypeParams(method)) {
        if (type.isInsertExplicitTypeParams()) {
          item.setAttribute(LookupItem.INSERT_TYPE_PARAMS,"");
        }
        PsiResolveHelper helper=JavaPsiFacade.getInstance(method.getProject()).getResolveHelper();
        final PsiTypeParameter[] typeParameters=method.getTypeParameters();
        PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
        for (        PsiTypeParameter typeParameter : typeParameters) {
          PsiType substitution=helper.getSubstitutionForTypeParameter(typeParameter,method.getReturnType(),type.getType(),false,PsiUtil.getLanguageLevel(file));
          if (substitution == PsiType.NULL) {
            substitution=TypeConversionUtil.typeParameterErasure(typeParameter);
          }
          substitutor=substitutor.put(typeParameter,substitution);
        }
        item.setAttribute(LookupItem.SUBSTITUTOR,substitutor);
        break;
      }
    }
  }
  if (position instanceof PsiJavaToken && ">".equals(position.getText())) {
    position=position.getParent().getParent();
  }
  final int startOffset=position.getTextRange().getStartOffset();
  PsiReference ref=position.getContainingFile().findReferenceAt(startOffset);
  final Object selectedObject=item.getObject();
  setTailType(position,item,expectedTypes);
  if (ref != null && selectedObject instanceof PsiNamedElement) {
    if (selectedObject instanceof PsiMethod || selectedObject instanceof PsiField) {
      final PsiMember member=(PsiMember)selectedObject;
      if (item.getAttribute(LookupItem.FORCE_QUALIFY) != null && member.hasModifierProperty(PsiModifier.STATIC) && PsiUtil.isAccessible(member,position,null)) {
        final PsiClass containingClass=member.getContainingClass();
        if (containingClass != null) {
          final String refText=ref.getElement().getText();
          final Document document=context.editor.getDocument();
          document.insertString(context.editor.getCaretModel().getOffset()," ");
          final PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(context.project);
          psiDocumentManager.commitDocument(document);
          LOG.assertTrue(!psiDocumentManager.isUncommited(psiDocumentManager.getDocument(file)));
          final PsiReference finalRef=file.findReferenceAt(startOffset);
          if (finalRef == null) {
            final String text=document.getText();
            LOG.error("startOffset=" + startOffset + "\n"+ "caretOffset="+ context.editor.getCaretModel().getOffset()+ "\n"+ "ref.getText()="+ refText+ "\n"+ "file="+ file+ "\n"+ "documentPart="+ text.substring(Math.max(startOffset - 100,0),Math.min(startOffset + 100,text.length())));
          }
          final String name=member.getName();
          final PsiElement psiElement=file.getManager().performActionWithFormatterDisabled(new Computable<PsiElement>(){
            public PsiElement compute(){
              try {
                return finalRef.bindToElement(containingClass);
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
              return null;
            }
          }
);
          final PsiElement element=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(psiElement);
          int whereToInsert=element.getTextRange().getEndOffset();
          final String insertString="." + name;
          document.insertString(whereToInsert,insertString);
          final int endOffset=whereToInsert + insertString.length();
          context.editor.getCaretModel().moveToOffset(endOffset);
          context.getOffsetMap().addOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET,endOffset);
          context.setStartOffset(endOffset);
          context.setSelectionEndOffset(endOffset);
          context.setPrefix(name);
          item.setLookupString(name);
          document.deleteString(endOffset,endOffset + 1);
        }
      }
    }
 else     if (completion instanceof PsiClass || completion instanceof PsiClassType) {
      final PsiClass psiClass;
      if (completion instanceof PsiClass) {
        psiClass=(PsiClass)completion;
      }
 else {
        psiClass=((PsiClassType)completion).resolve();
      }
      PsiElement prevElement=FilterUtil.searchNonSpaceNonCommentBack(position);
      boolean overwriteTypeCast=position instanceof PsiParenthesizedExpression || prevElement != null && prevElement.getText().equals("(") && prevElement.getParent() instanceof PsiTypeCastExpression;
      if (overwriteTypeCast) {
        item.setAttribute(LookupItem.OVERWRITE_ON_AUTOCOMPLETE_ATTR,"");
      }
 else       if (prevElement != null && prevElement.getParent() instanceof PsiNewExpression) {
        boolean flag=true;
        for (        ExpectedTypeInfo myType : expectedTypes) {
          PsiType type=myType.getType();
          if (type instanceof PsiArrayType) {
            flag=false;
            type=((PsiArrayType)type).getComponentType();
          }
          if (!(type instanceof PsiClassType))           continue;
          final PsiClass typeClass=((PsiClassType)type).resolve();
          if (InheritanceUtil.isInheritorOrSelf(psiClass,typeClass,true)) {
            StatisticsManager.getInstance().incUseCount(JavaStatisticsManager.createInfo(type,psiClass));
          }
        }
        if (flag) {
          item.setAttribute(LookupItem.NEW_OBJECT_ATTR,"");
        }
      }
    }
  }
}
