{
  extend(CompletionType.SMART,psiElement().afterLeaf(psiElement().withText("(").withParent(PsiTypeCastExpression.class)),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      for (      final ExpectedTypeInfo type : getExpectedTypes(parameters.getPosition())) {
        result.addElement(LookupItemUtil.objectToLookupItem(type.getType()).setTailType(TailTypes.CAST_RPARENTH).setAutoCompletionPolicy(AutoCompletionPolicy.ALWAYS_AUTOCOMPLETE));
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().afterLeaf(PsiKeyword.INSTANCEOF),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      for (      final PsiType type : new InheritorsGetter(new InstanceOfLeftPartTypeGetter(),true,false).getInheritors(parameters.getPosition(),null)) {
        result.addElement(LookupItemUtil.objectToLookupItem(type));
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement(),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final PsiReference reference=element.getContainingFile().findReferenceAt(parameters.getOffset());
      if (reference != null) {
        final Pair<ElementFilter,TailType> pair=getReferenceFilter(element);
        if (pair != null) {
          for (          final LookupItem item : completeReference(element,reference,parameters.getOriginalFile(),pair.second,pair.first,result)) {
            if (AFTER_THROW_NEW.accepts(element)) {
              item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS,"");
              if (item.getObject() instanceof PsiClass) {
                JavaAwareCompletionData.setShowFQN(item);
              }
            }
            result.addElement(item);
          }
        }
      }
    }
  }
);
  extend(CompletionType.SMART,PlatformPatterns.or(psiElement().withParent(PsiExpression.class),psiElement().inside(PsiClassObjectAccessExpression.class),psiElement().inside(PsiThisExpression.class),psiElement().inside(PsiSuperExpression.class)),new CompletionProvider<CompletionParameters>(true,false){
    public void addCompletions(    @NotNull final CompletionParameters params,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet result){
      final PsiElement position=params.getPosition();
      if (position.getParent() instanceof PsiLiteralExpression)       return;
      final THashSet<ExpectedTypeInfo> infos=new THashSet<ExpectedTypeInfo>(EXPECTED_TYPE_INFO_STRATEGY);
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          infos.addAll(Arrays.asList(getExpectedTypes(position)));
        }
      }
);
      for (      final ExpectedTypeInfo type : infos) {
        final JavaSmartCompletionParameters parameters=new JavaSmartCompletionParameters(params,type);
        final ElementFilter filter=new ReturnTypeFilter(new AssignableFromFilter(type.getType()));
        CompletionService.getCompletionService().getVariantsFromContributors(ExpressionSmartCompletionContributor.CONTRIBUTORS,parameters,null,new Consumer<LookupElement>(){
          public void consume(          final LookupElement lookupElement){
            final Object object=((LookupItem)lookupElement).getObject();
            if (!filter.isClassAcceptable(object.getClass()))             return;
            final PsiSubstitutor substitutor;
            if (lookupElement instanceof LookupItem) {
              substitutor=(PsiSubstitutor)((LookupItem)lookupElement).getAttribute(LookupItem.SUBSTITUTOR);
            }
 else {
              substitutor=null;
            }
            if (filter.isAcceptable(object,position)) {
              result.addElement(lookupElement);
            }
 else             if (substitutor != null && object instanceof PsiElement && filter.isAcceptable(new CandidateInfo((PsiElement)object,substitutor),position)) {
              result.addElement(lookupElement);
            }
          }
        }
);
      }
    }
  }
);
  extend(CompletionType.SMART,or(PsiJavaPatterns.psiElement().withParent(PsiNameValuePair.class),PsiJavaPatterns.psiElement().withSuperParent(2,PsiNameValuePair.class)),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final ElementPattern<? extends PsiElement> leftNeighbor=PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText("."));
      final boolean needQualify=leftNeighbor.accepts(element);
      for (      final PsiType type : ExpectedTypesGetter.getExpectedTypes(element,false)) {
        final PsiClass psiClass=PsiUtil.resolveClassInType(type);
        if (psiClass != null && psiClass.isAnnotationType()) {
          final LookupItem item=LookupItemUtil.objectToLookupItem(type).setTailType(TailType.NONE);
          if (needQualify)           JavaAwareCompletionData.qualify(item);
          result.addElement(item);
        }
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().inside(psiElement(PsiDocTag.class).withName(string().oneOf(PsiKeyword.THROWS,EXCEPTION_TAG))),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final Set<PsiClass> throwsSet=new HashSet<PsiClass>();
      final PsiMethod method=PsiTreeUtil.getContextOfType(element,PsiMethod.class,true);
      if (method != null) {
        for (        PsiClassType ref : method.getThrowsList().getReferencedTypes()) {
          final PsiClass exception=ref.resolve();
          if (exception != null && throwsSet.add(exception)) {
            result.addElement(LookupItemUtil.objectToLookupItem(exception).setTailType(TailType.SPACE));
          }
        }
      }
    }
  }
);
  final Key<PsiTryStatement> tryKey=Key.create("try");
  extend(CompletionType.SMART,psiElement().afterLeaf(psiElement().withText("(")).withSuperParent(3,psiElement(PsiCatchSection.class).withParent(psiElement(PsiTryStatement.class).save(tryKey))),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiCodeBlock tryBlock=context.get(tryKey).getTryBlock();
      if (tryBlock == null)       return;
      for (      final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {
        result.addElement(LookupItemUtil.objectToLookupItem(type).setTailType(TailType.SPACE));
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().inside(psiElement(PsiReferenceParameterList.class)),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext processingContext,    @NotNull final CompletionResultSet resultSet){
      final PsiElement context=parameters.getPosition();
      final Pair<PsiClass,Integer> pair=getTypeParameterInfo(context);
      if (pair == null)       return;
      final PsiClass referencedClass=pair.first;
      final int parameterIndex=pair.second.intValue();
      final PsiTypeParameter[] typeParameters=referencedClass.getTypeParameters();
      final PsiTypeParameter targetParameter=typeParameters[parameterIndex];
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
          for (          PsiType type : ExpectedTypesGetter.getExpectedTypes(context,false)) {
            if (!(type instanceof PsiClassType))             continue;
            final PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
            final PsiClass typeClass=result.getElement();
            final PsiSubstitutor substitutor=result.getSubstitutor();
            if (!InheritanceUtil.isInheritorOrSelf(referencedClass,typeClass,true))             continue;
            final PsiSubstitutor currentSubstitutor=TypeConversionUtil.getClassSubstitutor(typeClass,referencedClass,PsiSubstitutor.EMPTY);
            final Iterator baseParamIter=PsiUtil.typeParametersIterator(typeClass);
            while (baseParamIter.hasNext()) {
              final PsiTypeParameter parameter=(PsiTypeParameter)baseParamIter.next();
              final PsiType argSubstitution=substitutor.substitute(parameter);
              final PsiType paramSubstitution=currentSubstitutor.substitute(parameter);
              final PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(targetParameter,paramSubstitution,argSubstitution,false,PsiUtil.getLanguageLevel(context));
              if (substitution != null && substitution != PsiType.NULL) {
                resultSet.addElement(LookupItemUtil.objectToLookupItem(substitution));
              }
            }
          }
        }
      }
);
      if (PsiTreeUtil.getParentOfType(context,PsiExpression.class) == null) {
        boolean isLast=parameterIndex == typeParameters.length - 1;
        final TailType tail=isLast ? new CharTailType('>') : TailType.COMMA;
        final PsiClassType[] types=targetParameter.getExtendsListTypes();
        if (types.length > 0) {
          processInheritors(parameters,context,parameters.getOriginalFile(),Collections.singletonList(types[0]),new Consumer<PsiType>(){
            public void consume(            final PsiType type){
              final PsiClass psiClass=PsiUtil.resolveClassInType(type);
              if (psiClass == null)               return;
              resultSet.addElement(new JavaPsiClassReferenceElement(psiClass).setTailType(tail));
            }
          }
);
        }
      }
    }
  }
);
  extend(CompletionType.SMART,AFTER_NEW,new CompletionProvider<CompletionParameters>(true,false){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet result){
      final PsiElement identifierCopy=parameters.getPosition();
      final PsiFile file=parameters.getOriginalFile();
      final List<PsiClassType> expectedClassTypes=new SmartList<PsiClassType>();
      final List<PsiArrayType> expectedArrayTypes=new SmartList<PsiArrayType>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          for (          PsiType type : ExpectedTypesGetter.getExpectedTypes(identifierCopy,true)) {
            type=JavaCompletionUtil.eliminateWildcards(type);
            if (type instanceof PsiClassType) {
              final PsiClassType classType=(PsiClassType)type;
              if (classType.resolve() != null) {
                expectedClassTypes.add(classType);
              }
            }
 else             if (type instanceof PsiArrayType) {
              expectedArrayTypes.add((PsiArrayType)type);
            }
          }
        }
      }
);
      for (      final PsiArrayType type : expectedArrayTypes) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            final LookupItem item=LookupItemUtil.objectToLookupItem(JavaCompletionUtil.eliminateWildcards(type));
            item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS,"");
            if (item.getObject() instanceof PsiClass) {
              JavaAwareCompletionData.setShowFQN(item);
            }
            result.addElement(item);
          }
        }
);
      }
      processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){
        public void consume(        final PsiType type){
          addExpectedType(result,type,parameters);
        }
      }
);
    }
  }
);
}
