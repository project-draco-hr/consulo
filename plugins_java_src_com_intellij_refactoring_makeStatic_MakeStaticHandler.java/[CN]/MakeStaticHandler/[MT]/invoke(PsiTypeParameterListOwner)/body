{
  final Project project=member.getProject();
  final InternalUsageInfo[] classRefsInMember=MakeStaticUtil.findClassRefsInMember(member,false);
  AbstractMakeStaticDialog dialog;
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    final boolean[] hasMethodReferenceOnInstance=new boolean[]{false};
    if (member instanceof PsiMethod) {
      if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
        @Override public void run(){
          hasMethodReferenceOnInstance[0]=!MethodReferencesSearch.search((PsiMethod)member).forEach(new Processor<PsiReference>(){
            @Override public boolean process(            PsiReference reference){
              final PsiElement element=reference.getElement();
              if (element instanceof PsiMethodReferenceExpression) {
                return false;
              }
              return true;
            }
          }
);
        }
      }
,"Search for method references",true,project))       return;
    }
    if (classRefsInMember.length > 0 || hasMethodReferenceOnInstance[0]) {
      final PsiType type=JavaPsiFacade.getInstance(project).getElementFactory().createType(member.getContainingClass());
      String[] nameSuggestions=JavaCodeStyleManager.getInstance(project).suggestVariableName(VariableKind.PARAMETER,null,null,type).names;
      dialog=new MakeParameterizedStaticDialog(project,member,nameSuggestions,classRefsInMember);
    }
 else {
      dialog=new SimpleMakeStaticDialog(project,member);
    }
    dialog.show();
  }
}
