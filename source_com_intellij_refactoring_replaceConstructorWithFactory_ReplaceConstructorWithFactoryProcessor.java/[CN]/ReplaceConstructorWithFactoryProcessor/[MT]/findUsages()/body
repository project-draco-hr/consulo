{
  final PsiSearchHelper searchHelper=myManager.getSearchHelper();
  final PsiReference[] references;
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myProject);
  if (myConstructor != null) {
    references=searchHelper.findReferences(myConstructor,projectScope,false);
  }
 else {
    references=searchHelper.findReferences(myOriginalClass,projectScope,false);
  }
  ArrayList<UsageInfo> usages=new ArrayList<UsageInfo>();
  myNonNewConstructorUsages=new ArrayList<PsiElement>();
  for (int i=0; i < references.length; i++) {
    PsiElement element=references[i].getElement();
    if (element.getParent() instanceof PsiNewExpression) {
      usages.add(new UsageInfo(element.getParent()));
    }
 else {
      if ("super".equals(element.getText()) || "this".equals(element.getText())) {
        myNonNewConstructorUsages.add(element);
      }
    }
  }
  if (myConstructor != null && myConstructor.getParameterList().getParameters().length == 0) {
    RefactoringUtil.visitImplicitConstructorUsages(getConstructorContainingClass(),new RefactoringUtil.ImplicitConstructorUsageVisitor(){
      public void visitConstructor(      PsiMethod constructor){
        myNonNewConstructorUsages.add(constructor);
      }
      public void visitClassWithoutConstructors(      PsiClass aClass){
        myNonNewConstructorUsages.add(aClass);
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
