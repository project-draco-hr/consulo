{
  try {
    if (!myDisposed) {
synchronized (LOCK) {
        if (myTask == null)         return;
      }
      final Runnable scheduledTask=new Runnable(){
        public void run(){
          final Runnable task;
synchronized (LOCK) {
            task=myTask;
            if (task == null)             return;
            myTask=null;
            myRequests.remove(Request.this);
          }
          if (myThreadToUse == ThreadToUse.SWING_THREAD && !isEdt()) {
            try {
              SwingUtilities.invokeAndWait(task);
            }
 catch (            Exception e) {
              LOG.error(e);
            }
          }
 else {
            try {
              task.run();
            }
 catch (            Exception e) {
              LOG.error(e);
            }
          }
        }
      }
;
      if (myModalityState != null) {
        final Application app=ApplicationManager.getApplication();
        if (app != null) {
          app.invokeLater(scheduledTask,myModalityState);
        }
 else {
          SwingUtilities.invokeLater(scheduledTask);
        }
      }
 else {
        myFuture=(myThreadToUse == ThreadToUse.SHARED_THREAD) ? ourSharedExecutorService.submit(scheduledTask) : ApplicationManager.getApplication().executeOnPooledThread(scheduledTask);
      }
    }
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
}
