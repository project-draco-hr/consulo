{
  CandidateInfo[] candidates=getMethods(list);
  if (candidates.length == 0) {
    DaemonCodeAnalyzer.getInstance(project).updateVisibleHighlighters(editor);
    return;
  }
  String listText=list.getText();
  final boolean isMultiline=listText.indexOf('\n') >= 0 || listText.indexOf('\r') >= 0;
  final int listOffset=list.getTextRange().getStartOffset();
  if (ParameterInfoController.isAlreadyShown(editor,listOffset))   return;
  int startOffset=listOffset + 1;
  final LogicalPosition pos=editor.offsetToLogicalPosition(startOffset);
  final ParameterInfoComponent component=new ParameterInfoComponent(candidates,editor);
  if (candidates.length > 1) {
    component.setHighlightedMethod(highlightedMethod);
  }
  component.update();
  final LightweightHint hint=new LightweightHint(component);
  final HintManager hintManager=HintManager.getInstance();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      Point p;
      if (!isMultiline) {
        p=chooseBestHintPosition(project,editor,pos.line,pos.column,hint);
      }
 else {
        p=hintManager.getHintPosition(hint,editor,pos,HintManager.ABOVE);
        Dimension hintSize=hint.getComponent().getPreferredSize();
        JComponent editorComponent=editor.getComponent();
        JLayeredPane layeredPane=editorComponent.getRootPane().getLayeredPane();
        p.x=Math.min(p.x,layeredPane.getWidth() - hintSize.width);
        p.x=Math.max(p.x,0);
      }
      hintManager.showEditorHint(hint,editor,p,HintManager.HIDE_BY_ESCAPE | HintManager.UPDATE_BY_SCROLLING,0,false);
      new ParameterInfoController(project,editor,listOffset,hint,0);
    }
  }
);
}
