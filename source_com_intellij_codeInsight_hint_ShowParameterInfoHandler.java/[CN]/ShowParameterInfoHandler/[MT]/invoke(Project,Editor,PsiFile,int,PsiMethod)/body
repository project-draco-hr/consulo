{
  ApplicationManager.getApplication().assertIsDispatchThread();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  Lookup lookup=LookupManager.getInstance(project).getActiveLookup();
  if (lookup != null) {
    LookupItem item=lookup.getCurrentItem();
    if (item != null) {
      if (item.getObject() instanceof PsiMethod) {
        showLookupMethodInfo(project,item,editor);
      }
 else       if (item.getObject() instanceof XmlElementDescriptor) {
        showEditorHint(new Object[]{item.getObject()},editor,project);
      }
    }
    return;
  }
  int offset=editor.getCaretModel().getOffset();
  PsiExpressionList list=ParameterInfoController.findArgumentList(file,offset,lbraceOffset);
  if (list != null) {
    showMethodInfo(project,editor,list,highlightedMethod);
  }
  if (file.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    PsiReferenceParameterList refParamList=ParameterInfoController.findParentOfType(file,offset,PsiReferenceParameterList.class);
    if (refParamList != null) {
      showTypeParameterInfo(project,editor,refParamList);
    }
  }
  PsiAnnotation annotation=ParameterInfoController.findParentOfType(file,offset,PsiAnnotation.class);
  if (annotation != null) {
    final PsiElement resolved=annotation.getNameReferenceElement().resolve();
    if (resolved instanceof PsiClass && ((PsiClass)resolved).isAnnotationType()) {
      final PsiAnnotationMethod method=ParameterInfoController.findAnnotationMethod(file,offset);
      showAnnotationMethodsInfo(project,editor,annotation,method);
    }
  }
  final XmlTag tag=ParameterInfoController.findXmlTag(file,offset);
  if (tag != null) {
    showTagInfo(project,editor,tag);
  }
}
