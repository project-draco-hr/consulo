{
  if (DumbService.getInstance().isDumb()) {
    try {
      final FileContent fc=new FileContent(vFile,vFile.contentsToByteArray());
      fc.putUserData(FileBasedIndex.PROJECT,project);
      final StubElement element=StubUpdatingIndex.buildStubTree(fc);
      if (element instanceof PsiFileStub) {
        return new StubTree((PsiFileStub)element);
      }
    }
 catch (    IOException e) {
      LOG.error(e);
    }
    return null;
  }
  final int id=Math.abs(FileBasedIndex.getFileId(vFile));
  if (id > 0) {
    final List<SerializedStubTree> datas=FileBasedIndex.getInstance().getValues(StubUpdatingIndex.INDEX_ID,id,VirtualFileFilter.ALL);
    final int size=datas.size();
    if (size == 1) {
      StubElement stub=datas.get(0).getStub();
      return new StubTree((PsiFileStub)stub);
    }
 else     if (size != 0) {
      LOG.error("Twin stubs: " + vFile.getPresentableUrl() + " has "+ size+ " stub versions. Should only have one. id="+ id);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final Document doc=FileDocumentManager.getInstance().getCachedDocument(vFile);
          if (doc != null) {
            FileDocumentManager.getInstance().saveDocument(doc);
          }
        }
      }
,ModalityState.NON_MODAL);
      FileBasedIndex.getInstance().requestReindex(vFile);
    }
  }
  return null;
}
