{
  final Project project=myView.getProject();
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManagerEx.getInstance(project);
  return new AnAction(InspectionsBundle.message("inspection.quickfix.suppress",tool.getDisplayName())){
    public void actionPerformed(    AnActionEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          CommandProcessor.getInstance().executeCommand(project,new Runnable(){
            public void run(){
              final CustomSuppressableInspectionTool suppresableTool=extractSuppressableTool(tool);
              for (              TreePath treePath : selectionPaths) {
                final InspectionTreeNode node=(InspectionTreeNode)treePath.getLastPathComponent();
                if (suppresableTool != null) {
                  for (                  final ProblemDescriptor descriptor : myView.getTree().getSelectedDescriptors()) {
                    final IntentionAction[] actions=suppresableTool.getSuppressActions(descriptor);
                    if (actions.length > 0) {
                      if (!suppress(descriptor.getPsiElement(),actions[0],tool,project))                       break;
                    }
                  }
                }
 else {
                  final List<RefElement> elementsToSuppress=InspectionTree.getElementsToSuppressInSubTree(node);
                  for (                  final RefElement refElement : elementsToSuppress) {
                    final PsiElement element=refElement.getElement();
                    final IntentionAction action=getCorrectIntentionAction(tool,id,null,element);
                    if (!suppress(element,action,tool,project))                     break;
                  }
                }
                refreshViews(managerEx);
              }
            }
          }
,InspectionsBundle.message("inspection.quickfix.suppress"),null);
        }
      }
);
    }
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(true);
      final Project project=myView.getProject();
      final CustomSuppressableInspectionTool suppresableTool=extractSuppressableTool(tool);
      if (suppresableTool != null) {
        for (        ProblemDescriptor descriptor : myView.getTree().getSelectedDescriptors()) {
          for (          IntentionAction action : suppresableTool.getSuppressActions(descriptor)) {
            if (action.isAvailable(project,null,descriptor.getPsiElement().getContainingFile())) {
              e.getPresentation().setEnabled(true);
              return;
            }
          }
        }
      }
      for (      TreePath treePath : selectionPaths) {
        final InspectionTreeNode node=(InspectionTreeNode)treePath.getLastPathComponent();
        final List<RefElement> elementsToSuppress=InspectionTree.getElementsToSuppressInSubTree(node);
        for (        RefElement refElement : elementsToSuppress) {
          if (refElement == null)           continue;
          final PsiElement element=refElement.getElement();
          if (element instanceof PsiFile)           continue;
          if (element == null || !element.isValid())           continue;
          final PsiFile file=element.getContainingFile();
          final IntentionAction action=getCorrectIntentionAction(tool,id,null,element);
          if (action.isAvailable(project,null,file)) {
            e.getPresentation().setEnabled(true);
            return;
          }
        }
      }
      e.getPresentation().setEnabled(false);
    }
  }
;
}
