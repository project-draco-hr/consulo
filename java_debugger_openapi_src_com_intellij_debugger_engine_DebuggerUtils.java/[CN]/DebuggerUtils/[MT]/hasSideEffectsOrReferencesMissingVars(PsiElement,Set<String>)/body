{
  final Ref<Boolean> rv=new Ref<Boolean>(Boolean.FALSE);
  element.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitPostfixExpression(    final PsiPostfixExpression expression){
      rv.set(Boolean.TRUE);
    }
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      final PsiElement psiElement=expression.resolve();
      if (psiElement instanceof PsiLocalVariable) {
        if (visibleLocalVariables != null) {
          if (!visibleLocalVariables.contains(((PsiLocalVariable)psiElement).getName())) {
            rv.set(Boolean.TRUE);
          }
        }
      }
 else       if (psiElement instanceof PsiMethod) {
        rv.set(Boolean.TRUE);
      }
      if (!rv.get().booleanValue()) {
        super.visitReferenceExpression(expression);
      }
    }
    @Override public void visitPrefixExpression(    final PsiPrefixExpression expression){
      final IElementType op=expression.getOperationTokenType();
      if (JavaTokenType.PLUSPLUS.equals(op) || JavaTokenType.MINUSMINUS.equals(op)) {
        rv.set(Boolean.TRUE);
      }
 else {
        super.visitPrefixExpression(expression);
      }
    }
    @Override public void visitAssignmentExpression(    final PsiAssignmentExpression expression){
      rv.set(Boolean.TRUE);
    }
    @Override public void visitCallExpression(    final PsiCallExpression callExpression){
      rv.set(Boolean.TRUE);
    }
  }
);
  return rv.get().booleanValue();
}
