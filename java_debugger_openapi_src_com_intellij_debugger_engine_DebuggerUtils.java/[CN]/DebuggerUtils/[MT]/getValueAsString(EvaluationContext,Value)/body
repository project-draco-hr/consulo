{
  try {
    if (value == null) {
      return "null";
    }
    if (value instanceof StringReference) {
      return ((StringReference)value).value();
    }
    if (isInteger(value)) {
      long v=((PrimitiveValue)value).longValue();
      return String.valueOf(v);
    }
    if (isNumeric(value)) {
      double v=((PrimitiveValue)value).doubleValue();
      return String.valueOf(v);
    }
    if (value instanceof BooleanValue) {
      boolean v=((PrimitiveValue)value).booleanValue();
      return String.valueOf(v);
    }
    if (value instanceof CharValue) {
      char v=((PrimitiveValue)value).charValue();
      return String.valueOf(v);
    }
    if (value instanceof ObjectReference) {
      if (value instanceof ArrayReference) {
        final StringBuilder builder=new StringBuilder();
        builder.append("[");
        for (Iterator<Value> iterator=((ArrayReference)value).getValues().iterator(); iterator.hasNext(); ) {
          final Value element=iterator.next();
          builder.append(getValueAsString(evaluationContext,element));
          if (iterator.hasNext()) {
            builder.append(",");
          }
        }
        builder.append("]");
        return builder.toString();
      }
      final ObjectReference objRef=(ObjectReference)value;
      final DebugProcess debugProcess=evaluationContext.getDebugProcess();
      Method toStringMethod=debugProcess.getUserData(TO_STRING_METHOD_KEY);
      if (toStringMethod == null) {
        try {
          ReferenceType refType=objRef.virtualMachine().classesByName("java.lang.Object").get(0);
          toStringMethod=findMethod(refType,"toString","()Ljava/lang/String;");
          debugProcess.putUserData(TO_STRING_METHOD_KEY,toStringMethod);
        }
 catch (        Exception e) {
          throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.tostring",objRef.referenceType().name()));
        }
      }
      if (toStringMethod == null) {
        throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.tostring",objRef.referenceType().name()));
      }
      final StringReference stringReference=(StringReference)debugProcess.invokeInstanceMethod(evaluationContext,objRef,toStringMethod,Collections.emptyList(),0);
      return stringReference == null ? "null" : stringReference.value();
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.unsupported.expression.type"));
  }
 catch (  ObjectCollectedException e) {
    throw EvaluateExceptionUtil.OBJECT_WAS_COLLECTED;
  }
}
