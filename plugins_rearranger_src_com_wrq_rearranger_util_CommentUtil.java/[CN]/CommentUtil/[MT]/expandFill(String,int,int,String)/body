{
  StringBuilder result=new StringBuilder(comment.length() * 2);
  int EOLindex=0;
  StringBuilder fillChars=new StringBuilder();
  if (fillString.length() == 0) {
    fillString=" ";
  }
  do {
    int index=comment.indexOf('\n',EOLindex);
    if (index < 0) {
      index=comment.length();
    }
 else {
      index++;
    }
    String str=comment.substring(EOLindex,index);
    if (str.length() > 0) {
      int nFS=0;
      int offset=0;
      while ((offset=str.indexOf("%FS%",offset)) >= 0) {
        nFS++;
        offset+=4;
      }
      int fixedLength=logicalLength(str,tabSize) - nFS * 4;
      if (str.charAt(str.length() - 1) == '\n') {
        fixedLength--;
      }
      int fillLength=width - fixedLength;
      int[] fillWidths=new int[nFS];
      int maxFillWidth=0;
      if (fillLength > 0 && nFS > 0) {
        int eachFill=fillLength / nFS;
        int remainder=fillLength % nFS;
        for (int i=0; i < nFS; i++) {
          fillWidths[i]=eachFill + (i < remainder ? 1 : 0);
          maxFillWidth=Math.max(maxFillWidth,fillWidths[i]);
        }
      }
      fillChars.ensureCapacity(maxFillWidth);
      while (fillChars.length() < maxFillWidth) {
        fillChars.append(fillString);
      }
      offset=0;
      int previousOffset=0;
      int fillWidthIndex=0;
      while ((offset=str.indexOf("%FS%",offset)) >= 0) {
        result.append(str.substring(previousOffset,offset));
        offset+=4;
        previousOffset=offset;
        result.append(fillChars.toString().substring(0,fillWidths[fillWidthIndex++]));
      }
      result.append(str.substring(previousOffset));
    }
    EOLindex=index;
  }
 while (EOLindex < comment.length());
  return result.toString();
}
