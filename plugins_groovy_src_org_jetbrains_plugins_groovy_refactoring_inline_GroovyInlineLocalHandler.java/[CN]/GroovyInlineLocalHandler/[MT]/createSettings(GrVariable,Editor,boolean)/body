{
  final String localName=variable.getName();
  final Project project=variable.getProject();
  GrExpression initializer=null;
  Instruction writeInstr=null;
  Instruction[] flow=null;
  if (invokedOnReference) {
    LOG.assertTrue(editor != null,"null editor but invokedOnReference==true");
    final PsiReference ref=TargetElementUtilBase.findReference(editor);
    LOG.assertTrue(ref != null);
    PsiElement cur=ref.getElement();
    if (cur instanceof GrReferenceExpression) {
      GrControlFlowOwner controlFlowOwner;
      do {
        controlFlowOwner=ControlFlowUtils.findControlFlowOwner(cur);
        if (controlFlowOwner == null)         break;
        flow=controlFlowOwner.getControlFlow();
        final ArrayList<BitSet> writes=ControlFlowUtils.inferWriteAccessMap(flow,variable);
        final PsiElement finalCur=cur;
        Instruction instruction=ControlFlowUtils.findInstruction(finalCur,flow);
        LOG.assertTrue(instruction != null);
        final BitSet prev=writes.get(instruction.num());
        if (prev.cardinality() == 1) {
          writeInstr=flow[prev.nextSetBit(0)];
          final PsiElement element=writeInstr.getElement();
          if (element instanceof GrVariable) {
            initializer=((GrVariable)element).getInitializerGroovy();
          }
 else           if (element instanceof GrReferenceExpression) {
            initializer=PsiUtil.getInitializerFor((GrReferenceExpression)element);
          }
        }
        if (controlFlowOwner instanceof GrClosableBlock) {
          cur=controlFlowOwner;
        }
 else {
          PsiElement parent=controlFlowOwner.getParent();
          if (parent instanceof GrMember)           cur=((GrMember)parent).getContainingClass();
        }
      }
 while (initializer == null);
    }
  }
 else {
    flow=ControlFlowUtils.findControlFlowOwner(variable).getControlFlow();
    initializer=variable.getInitializerGroovy();
    writeInstr=ContainerUtil.find(flow,new Condition<Instruction>(){
      @Override public boolean value(      Instruction instruction){
        return instruction.getElement() == variable;
      }
    }
);
  }
  if (initializer == null || writeInstr == null) {
    String message=GroovyRefactoringBundle.message("cannot.find.a.single.definition.to.inline.local.var");
    CommonRefactoringUtil.showErrorHint(variable.getProject(),editor,message,INLINE_VARIABLE,HelpID.INLINE_VARIABLE);
    return null;
  }
  int writeInstructionNumber=writeInstr.num();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return new InlineLocalVarSettings(initializer,writeInstructionNumber,flow);
  }
  final String question=GroovyRefactoringBundle.message("inline.local.variable.prompt.0.1",localName);
  RefactoringMessageDialog dialog=new RefactoringMessageDialog(INLINE_VARIABLE,question,HelpID.INLINE_VARIABLE,"OptionPane.questionIcon",true,project);
  dialog.show();
  if (dialog.isOK()) {
    return new InlineLocalVarSettings(initializer,writeInstructionNumber,flow);
  }
  return null;
}
