{
  final PsiReference invocationReference=editor != null ? TargetElementUtilBase.findReference(editor) : null;
  final InlineLocalVarSettings localVarSettings=createSettings(local,editor,invocationReference != null);
  if (localVarSettings == null)   return;
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,local))   return;
  final Collection<? extends PsiReference> allReferences=localVarSettings.isOnlyOneReferenceToInline() ? Collections.singleton(invocationReference) : localVarSettings.getRefs();
  if (checkConflicts(project,allReferences))   return;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          final UsageInfo[] usages=new UsageInfo[allReferences.size()];
          int i=0;
          for (          PsiReference ref : allReferences) {
            usages[i++]=new UsageInfo(ref);
          }
          RefactoringUtil.sortDepthFirstRightLeftOrder(usages);
          for (          UsageInfo usage : usages) {
            GrVariableInliner.inlineReference(usage,local,localVarSettings.getInitializer());
          }
          if (!localVarSettings.isOnlyOneReferenceToInline()) {
            removeDefinition(local,localVarSettings);
          }
        }
      }
,RefactoringBundle.message("inline.command",local.getName()),null);
    }
  }
);
}
