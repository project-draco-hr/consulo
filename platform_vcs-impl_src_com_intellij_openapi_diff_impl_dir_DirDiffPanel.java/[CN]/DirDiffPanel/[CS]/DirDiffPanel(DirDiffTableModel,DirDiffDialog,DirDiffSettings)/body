{
  myModel=model;
  myDialog=dirDiffDialog;
  mySourceDirField.setText(model.getSourceDir().getPath());
  myTargetDirField.setText(model.getTargetDir().getPath());
  mySourceDirLabel.setIcon(model.getSourceDir().getIcon());
  myTargetDirLabel.setIcon(model.getTargetDir().getIcon());
  myModel.setTable(myTable);
  myModel.setPanel(this);
  myModel.setDisposableParent(dirDiffDialog.getDisposable());
  myTable.setModel(myModel);
  final DirDiffTableCellRenderer renderer=new DirDiffTableCellRenderer(myTable);
  myTable.setDefaultRenderer(Object.class,renderer);
  myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  final Project project=myModel.getProject();
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      final DirDiffElement last=myModel.getElementAt(e.getLastIndex());
      final DirDiffElement first=myModel.getElementAt(e.getFirstIndex());
      if (last == null || first == null)       return;
      if (last.isSeparator()) {
        myTable.getSelectionModel().setLeadSelectionIndex(e.getFirstIndex());
      }
 else       if (first.isSeparator()) {
        myTable.getSelectionModel().setLeadSelectionIndex(e.getLastIndex());
      }
 else {
        final DirDiffElement element=myModel.getElementAt(myTable.getSelectedRow());
        if (element == null || (myCurrentElement != null && (myCurrentElement == element.getSource() || myCurrentElement == element.getTarget()))) {
          return;
        }
        clearDiffPanel();
        if (element.getType() == DType.CHANGED) {
          myDiffPanelComponent=element.getSource().getDiffComponent(element.getTarget(),project,myDialog.getWindow());
          if (myDiffPanelComponent != null) {
            myDiffPanel.add(myDiffPanelComponent,BorderLayout.CENTER);
            myCurrentElement=element.getSource();
          }
 else {
            myDiffPanel.add(getErrorLabel(),BorderLayout.CENTER);
            myDiffPanel.revalidate();
            myDiffPanel.repaint();
          }
        }
 else {
          final DiffElement object=element.isSource() ? element.getSource() : element.getTarget();
          myViewComponent=object.getViewComponent(project,null);
          if (myViewComponent != null) {
            myCurrentElement=object;
            myDiffPanel.add(myViewComponent,BorderLayout.CENTER);
            DataManager.registerDataProvider(myDiffPanel,myCurrentElement.getDataProvider(project));
            myViewComponent.revalidate();
          }
 else {
            myDiffPanel.add(getErrorLabel(),BorderLayout.CENTER);
            myDiffPanel.revalidate();
            myDiffPanel.repaint();
          }
        }
      }
      myDialog.setTitle(myModel.getTitle());
    }
  }
);
  myTable.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final int keyCode=e.getKeyCode();
      final int rows=myTable.getRowCount();
      int row=myTable.getSelectedRow();
      if (keyCode == KeyEvent.VK_DOWN && row != rows - 1) {
        row++;
        final DirDiffElement element=myModel.getElementAt(row);
        if (element == null)         return;
        if (element.isSeparator()) {
          row++;
        }
      }
 else       if (keyCode == KeyEvent.VK_UP && row != 0) {
        row--;
        final DirDiffElement element=myModel.getElementAt(row);
        if (element == null)         return;
        if (element.isSeparator()) {
          row--;
        }
      }
 else {
        return;
      }
      final DirDiffElement element=myModel.getElementAt(row);
      if (element == null)       return;
      if (!element.isSeparator()) {
        e.consume();
        myTable.changeSelection(row,(myModel.getColumnCount() - 1) / 2,false,false);
      }
    }
  }
);
  final TableColumnModel columnModel=myTable.getColumnModel();
  final TableColumn operationColumn=columnModel.getColumn((columnModel.getColumnCount() - 1) / 2);
  operationColumn.setMaxWidth(25);
  operationColumn.setMinWidth(25);
  for (int i=0; i < columnModel.getColumnCount(); i++) {
    final String name=myModel.getColumnName(i);
    final TableColumn column=columnModel.getColumn(i);
    if (DirDiffTableModel.COLUMN_DATE.equals(name)) {
      column.setMaxWidth(90);
      column.setMinWidth(90);
    }
 else     if (DirDiffTableModel.COLUMN_SIZE.equals(name)) {
      column.setMaxWidth(120);
      column.setMinWidth(120);
    }
  }
  final ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar("DirDiff",new DirDiffToolbarActions(myModel),true);
  myToolBarPanel.add(toolbar.getComponent(),BorderLayout.CENTER);
  final LoadingDecorator decorator=new LoadingDecorator(myComponent,dirDiffDialog.getDisposable(),-1){
    @Override protected NonOpaquePanel customizeLoadingLayer(    JPanel parent,    JLabel text,    AsyncProcessIcon icon){
      final NonOpaquePanel panel=super.customizeLoadingLayer(parent,text,icon);
      final Font font=text.getFont();
      text.setFont(font.deriveFont(font.getStyle(),font.getSize() + 6));
      text.setForeground(new Color(0,0,0,150));
      return panel;
    }
  }
;
  myTable.putClientProperty(myModel.DECORATOR,decorator);
  myTable.addComponentListener(new ComponentAdapter(){
    @Override public void componentShown(    ComponentEvent e){
      myTable.removeComponentListener(this);
      myModel.reloadModel();
    }
  }
);
  myRootPanel.removeAll();
  myRootPanel.add(decorator.getComponent(),BorderLayout.CENTER);
  myModel.addModelListener(new DirDiffModelListener(){
    @Override public void updateStarted(){
      myFilter.setEnabled(false);
    }
    @Override public void updateFinished(){
      myFilter.setEnabled(true);
    }
  }
);
  myFilter.setText(settings.getFilter());
  oldFilter=myFilter.getText();
  myFilter.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        e.consume();
        fireFilterUpdated();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        e.consume();
        IdeFocusManager.getInstance(project).requestFocus(myTable,true);
      }
    }
  }
);
  final Callable<DiffElement> srcChooser=myModel.getSourceDir().getElementChooser(project);
  final Callable<DiffElement> trgChooser=myModel.getTargetDir().getElementChooser(project);
  if (srcChooser != null) {
    mySourceDirField.setButtonEnabled(true);
    mySourceDirField.addActionListener(new AbstractAction(){
      @Override public void actionPerformed(      ActionEvent e){
        try {
          final Callable<DiffElement> chooser=myModel.getSourceDir().getElementChooser(project);
          if (chooser == null)           return;
          final DiffElement newElement=chooser.call();
          if (newElement != null) {
            myModel.setSourceDir(newElement);
            mySourceDirField.setText(newElement.getPath());
          }
        }
 catch (        Exception e1) {
        }
      }
    }
);
  }
 else {
    mySourceDirField.setButtonEnabled(false);
    mySourceDirField.getButton().setVisible(false);
    mySourceDirField.setEditable(false);
  }
  if (trgChooser != null) {
    myTargetDirField.setButtonEnabled(true);
    myTargetDirField.addActionListener(new AbstractAction(){
      @Override public void actionPerformed(      ActionEvent e){
        try {
          final Callable<DiffElement> chooser=myModel.getTargetDir().getElementChooser(project);
          if (chooser == null)           return;
          final DiffElement newElement=chooser.call();
          if (newElement != null) {
            myModel.setTargetDir(newElement);
            myTargetDirField.setText(newElement.getPath());
          }
        }
 catch (        Exception e1) {
        }
      }
    }
);
  }
 else {
    myTargetDirField.setButtonEnabled(false);
    myTargetDirField.getButton().setVisible(false);
    myTargetDirField.setEditable(false);
  }
}
