{
  mySplitPanel.setDividerLocation(0.5);
  myModel=model;
  myDialog=dirDiffDialog;
  mySourceDirField.setText(model.getSourceDir().getPath());
  myTargetDirField.setText(model.getTargetDir().getPath());
  mySourceDirLabel.setIcon(model.getSourceDir().getIcon());
  myTargetDirLabel.setIcon(model.getTargetDir().getIcon());
  myTable.setModel(myModel);
  final DirDiffTableCellRenderer renderer=new DirDiffTableCellRenderer(myTable);
  myTable.setDefaultRenderer(Object.class,renderer);
  myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      final DirDiffElement last=myModel.getElementAt(e.getLastIndex());
      final DirDiffElement first=myModel.getElementAt(e.getFirstIndex());
      if (last == null || first == null)       return;
      if (last.isSeparator()) {
        myTable.getSelectionModel().setLeadSelectionIndex(e.getFirstIndex());
      }
 else       if (first.isSeparator()) {
        myTable.getSelectionModel().setLeadSelectionIndex(e.getLastIndex());
      }
 else {
        final DirDiffElement element=myModel.getElementAt(myTable.getSelectedRow());
        final Project project=myModel.getProject();
        clearDiffPanel();
        if (element.getType() == DType.CHANGED) {
          myDiffPanelComponent=element.getSource().getDiffComponent(element.getTarget(),project,myDialog.getWindow());
          if (myDiffPanelComponent != null) {
            myDiffPanel.add(myDiffPanelComponent,BorderLayout.CENTER);
            myCurrentElement=element.getSource();
          }
        }
 else {
          final DiffElement object=element.isSource() ? element.getSource() : element.getTarget();
          myViewComponent=object.getViewComponent(project);
          if (myViewComponent != null) {
            myCurrentElement=object;
            myDiffPanel.add(myViewComponent,BorderLayout.CENTER);
            myViewComponent.revalidate();
          }
 else {
            myDiffPanel.add(getErrorLabel(),BorderLayout.CENTER);
            myDiffPanel.revalidate();
            myDiffPanel.repaint();
          }
        }
      }
      myDialog.setTitle(myModel.getTitle());
    }
  }
);
  myTable.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final int keyCode=e.getKeyCode();
      final int rows=myTable.getRowCount();
      int row=myTable.getSelectedRow();
      if (keyCode == KeyEvent.VK_DOWN && row != rows - 1) {
        row++;
        if (myModel.getElementAt(row).isSeparator()) {
          row++;
        }
      }
 else       if (keyCode == KeyEvent.VK_UP && row != 0) {
        row--;
        if (myModel.getElementAt(row).isSeparator()) {
          row--;
        }
      }
 else {
        return;
      }
      if (0 <= row && row < rows && !myModel.getElementAt(row).isSeparator()) {
        e.consume();
        myTable.changeSelection(row,(myModel.getColumnCount() - 1) / 2,false,false);
      }
    }
  }
);
  final TableColumnModel columnModel=myTable.getColumnModel();
  final TableColumn operationColumn=columnModel.getColumn((columnModel.getColumnCount() - 1) / 2);
  operationColumn.setMaxWidth(25);
  operationColumn.setMinWidth(25);
  final ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar("DirDiff",new DirDiffToolbarActions(myModel),true);
  myToolBarPanel.add(toolbar.getComponent(),BorderLayout.CENTER);
}
