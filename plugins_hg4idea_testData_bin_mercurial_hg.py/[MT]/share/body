def share(ui, source, dest=None, update=True):
    'create a shared repository'
    if (not islocal(source)):
        raise util.Abort(_('can only share local repositories'))
    if (not dest):
        dest = defaultdest(source)
    else:
        dest = ui.expandpath(dest)
    if isinstance(source, str):
        origsource = ui.expandpath(source)
        (source, branches) = parseurl(origsource)
        srcrepo = repository(ui, source)
        (rev, checkout) = addbranchrevs(srcrepo, srcrepo, branches, None)
    else:
        srcrepo = source
        origsource = source = srcrepo.url()
        checkout = None
    sharedpath = srcrepo.sharedpath
    root = os.path.realpath(dest)
    roothg = os.path.join(root, '.hg')
    if os.path.exists(roothg):
        raise util.Abort(_('destination already exists'))
    if (not os.path.isdir(root)):
        os.mkdir(root)
    os.mkdir(roothg)
    requirements = ''
    try:
        requirements = srcrepo.opener('requires').read()
    except IOError as inst:
        if (inst.errno != errno.ENOENT):
            raise
    requirements += 'shared\n'
    file(os.path.join(roothg, 'requires'), 'w').write(requirements)
    file(os.path.join(roothg, 'sharedpath'), 'w').write(sharedpath)
    default = srcrepo.ui.config('paths', 'default')
    if default:
        f = file(os.path.join(roothg, 'hgrc'), 'w')
        f.write(('[paths]\ndefault = %s\n' % default))
        f.close()
    r = repository(ui, root)
    if update:
        r.ui.status(_('updating working directory\n'))
        if (update is not True):
            checkout = update
        for test in (checkout, 'default', 'tip'):
            if (test is None):
                continue
            try:
                uprev = r.lookup(test)
                break
            except error.RepoLookupError:
                continue
        _update(r, uprev)
