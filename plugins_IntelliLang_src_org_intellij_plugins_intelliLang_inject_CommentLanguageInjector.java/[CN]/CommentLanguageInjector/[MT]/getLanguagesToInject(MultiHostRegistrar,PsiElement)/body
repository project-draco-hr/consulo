{
  PsiLanguageInjectionHost host=(PsiLanguageInjectionHost)context;
  final ElementManipulator<PsiLanguageInjectionHost> manipulator=ElementManipulators.getManipulator(host);
  if (manipulator == null)   return;
  PsiComment comment=InjectorUtils.findNearestComment(context);
  if (comment == null)   return;
  String text=ElementManipulators.getValueText(comment).trim();
  BaseInjection injection=InjectorUtils.detectInjectionFromText("comment",text);
  if (injection == null)   return;
  InjectedLanguage injectedLanguage=InjectedLanguage.create(injection.getInjectedLanguageId(),injection.getPrefix(),injection.getSuffix(),false);
  Language language=injectedLanguage != null ? injectedLanguage.getLanguage() : null;
  if (language != null) {
    Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> info=Trinity.create(host,injectedLanguage,manipulator.getRangeInElement(host));
    InjectorUtils.registerInjection(language,Collections.singletonList(info),context.getContainingFile(),registrar);
  }
}
