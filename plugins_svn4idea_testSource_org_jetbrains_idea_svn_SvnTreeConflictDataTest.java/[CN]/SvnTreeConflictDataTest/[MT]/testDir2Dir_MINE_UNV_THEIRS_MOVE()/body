{
  final String conflictFile=createConflict(TreeConflictData.DirToDir.MINE_UNV_THEIRS_MOVE);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  changeListManager.ensureUpToDate(false);
  VirtualFile vf=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(myWorkingCopyDir.getPath(),conflictFile));
  Assert.assertNotNull(vf);
  final Change change=changeListManager.getChange(vf);
  Assert.assertTrue(change instanceof ConflictedSvnChange);
  SVNTreeConflictDescription beforeDescription=((ConflictedSvnChange)change).getBeforeDescription();
  Assert.assertNotNull(beforeDescription);
  final SVNTreeConflictDescription afterDescription=((ConflictedSvnChange)change).getAfterDescription();
  Assert.assertNull(afterDescription);
  Assert.assertEquals(SVNOperation.UPDATE,beforeDescription.getOperation());
  Assert.assertEquals(SVNConflictAction.ADD,beforeDescription.getConflictAction());
  Assert.assertTrue(beforeDescription.isTreeConflict());
  SVNConflictVersion leftVersion=beforeDescription.getSourceLeftVersion();
  Assert.assertNull(leftVersion);
  final SVNConflictVersion version=beforeDescription.getSourceRightVersion();
  Assert.assertNotNull(version);
  Assert.assertEquals(SVNNodeKind.DIR,version.getKind());
}
