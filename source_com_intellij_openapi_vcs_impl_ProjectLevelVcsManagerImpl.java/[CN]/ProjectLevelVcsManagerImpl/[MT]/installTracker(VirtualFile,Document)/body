{
  ApplicationManager.getApplication().assertIsDispatchThread();
  AbstractVcs activeVcs=getVcsFor(virtualFile);
  if (activeVcs == null)   return;
  if (virtualFile == null)   return;
  if (!(virtualFile.getFileSystem() instanceof LocalFileSystem))   return;
  final UpToDateRevisionProvider upToDateRevisionProvider=activeVcs.getUpToDateRevisionProvider();
  if (upToDateRevisionProvider == null)   return;
  if (System.getProperty("idea.ignore.changemarkers") != null)   return;
  final Alarm alarm;
  if (myLineStatusUpdateAlarms.containsKey(document)) {
    alarm=myLineStatusUpdateAlarms.get(document);
    alarm.cancelAllRequests();
  }
 else {
    alarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
    myLineStatusUpdateAlarms.put(document,alarm);
  }
  createTrackerForDocument(document);
  alarm.addRequest(new Runnable(){
    public void run(){
      try {
        try {
          alarm.cancelAllRequests();
          if (!virtualFile.isValid())           return;
          final String lastUpToDateContent=upToDateRevisionProvider.getLastUpToDateContentFor(virtualFile,true);
          if (lastUpToDateContent == null)           return;
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (!myProject.isDisposed()) {
synchronized (this) {
                  final LineStatusTracker tracker=myLineStatusTrackers.get(document);
                  if (tracker != null) {
                    ApplicationManager.getApplication().runWriteAction(new Runnable(){
                      public void run(){
                        tracker.initialize(lastUpToDateContent);
                      }
                    }
);
                  }
                }
              }
            }
          }
);
        }
  finally {
          myLineStatusUpdateAlarms.remove(document);
        }
      }
 catch (      VcsException e) {
      }
    }
  }
,10);
}
