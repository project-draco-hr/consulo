{
  myRegistrar=registrar;
  registerProvidedSeverities();
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new BaseSchemeProcessor<InspectionProfileImpl>(){
    @NotNull @Override public InspectionProfileImpl readScheme(    @NotNull Element element){
      final InspectionProfileImpl profile=new InspectionProfileImpl(InspectionProfileLoadUtil.getProfileName(element),myRegistrar,InspectionProfileManagerImpl.this);
      try {
        profile.readExternal(element);
      }
 catch (      Exception ignored) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showErrorDialog(InspectionsBundle.message("inspection.error.loading.message",0,profile.getName()),InspectionsBundle.message("inspection.errors.occurred.dialog.title"));
          }
        }
,ModalityState.NON_MODAL);
      }
      return profile;
    }
    @Override public boolean shouldBeSaved(    @NotNull InspectionProfileImpl scheme){
      return !scheme.isProjectLevel() && scheme.wasInitialized();
    }
    @Override public Element writeScheme(    @NotNull InspectionProfileImpl scheme){
      Element root=new Element("inspections");
      root.setAttribute("profile_name",scheme.getName());
      scheme.serializeInto(root,false);
      return root;
    }
    @Override public void onSchemeAdded(    @NotNull final InspectionProfileImpl scheme){
      updateProfileImpl(scheme);
      fireProfileChanged(scheme);
      onProfilesChanged();
    }
    @Override public void onSchemeDeleted(    @NotNull final InspectionProfileImpl scheme){
      onProfilesChanged();
    }
    @Override public void onCurrentSchemeChanged(    final InspectionProfileImpl oldCurrentScheme){
      Profile current=mySchemesManager.getCurrentScheme();
      if (current != null) {
        fireProfileChanged((Profile)oldCurrentScheme,current,null);
      }
      onProfilesChanged();
    }
  }
,RoamingType.PER_USER);
  mySeverityRegistrar=new SeverityRegistrar(messageBus);
}
