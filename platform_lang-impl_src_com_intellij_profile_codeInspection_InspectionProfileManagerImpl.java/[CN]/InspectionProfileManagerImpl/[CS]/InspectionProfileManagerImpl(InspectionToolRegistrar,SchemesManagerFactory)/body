{
  myRegistrar=registrar;
  mySeverityRegistrar=new SeverityRegistrar();
  registerProvidedSeverities();
  SchemeProcessor<InspectionProfileImpl> processor=new BaseSchemeProcessor<InspectionProfileImpl>(){
    @Override public InspectionProfileImpl readScheme(    @NotNull final Document document){
      InspectionProfileImpl profile=new InspectionProfileImpl(InspectionProfileLoadUtil.getProfileName(document),myRegistrar,InspectionProfileManagerImpl.this);
      read(profile,document.getRootElement());
      return profile;
    }
    @Override public boolean shouldBeSaved(    @NotNull final InspectionProfileImpl scheme){
      return scheme.wasInitialized();
    }
    @Override public Parent writeScheme(    @NotNull final InspectionProfileImpl scheme) throws WriteExternalException {
      return scheme.saveToDocument();
    }
    @Override public void onSchemeAdded(    @NotNull final InspectionProfileImpl scheme){
      updateProfileImpl(scheme);
      fireProfileChanged(scheme);
      onProfilesChanged();
    }
    @Override public void onSchemeDeleted(    @NotNull final InspectionProfileImpl scheme){
      onProfilesChanged();
    }
    @Override public void onCurrentSchemeChanged(    final InspectionProfileImpl oldCurrentScheme){
      Profile current=mySchemesManager.getCurrentScheme();
      if (current != null) {
        fireProfileChanged((Profile)oldCurrentScheme,current,null);
      }
      onProfilesChanged();
    }
  }
;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,processor,RoamingType.PER_USER);
}
