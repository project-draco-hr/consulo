{
  List<VcsException> exceptions=new ArrayList<VcsException>();
  for (  VirtualFile root : GitUtil.gitRoots(myProject,Arrays.asList(filePaths))) {
    try {
      final GitBranch branch=GitBranch.current(myProject,root);
      if (branch == null) {
        continue;
      }
      final String value=GitConfigUtil.getValue(myProject,root,"branch." + branch.getName() + ".remote");
      if (value == null || value.length() == 0) {
        continue;
      }
      GitRevisionNumber before=GitRevisionNumber.resolve(myProject,root,"HEAD");
      GitLineHandler h=new GitLineHandler(myProject,root,GitHandler.PULL);
      h.ignoreErrorCode(1);
      h.addParameters("--no-stat");
      h.addParameters("-v");
      try {
        GitHandlerUtil.doSynchronouslyWithExceptions(h,progressIndicator);
      }
  finally {
        exceptions.addAll(h.errors());
        MergeChangeCollector collector=new MergeChangeCollector(myProject,root,before,updatedFiles);
        collector.collect(exceptions);
      }
    }
 catch (    VcsException ex) {
      exceptions.add(ex);
    }
  }
  return new GitUpdateSession(exceptions);
}
