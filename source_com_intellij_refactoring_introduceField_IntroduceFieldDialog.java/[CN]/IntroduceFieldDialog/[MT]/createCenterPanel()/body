{
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.fill=GridBagConstraints.HORIZONTAL;
  gbConstraints.weightx=1;
  gbConstraints.weighty=0;
  gbConstraints.gridwidth=1;
  gbConstraints.gridx=0;
  gbConstraints.gridy=0;
  final Insets standardInsets=new Insets(0,0,0,0);
  gbConstraints.insets=standardInsets;
  panel.add(createInitializerPlacePanel(),gbConstraints);
  ItemListener itemListener=new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (myCbReplaceAll != null && myAllowInitInMethod) {
        myRbInCurrentMethod.setEnabled(myAllowInitInMethodIfAll || !myCbReplaceAll.isSelected());
        if (!myRbInCurrentMethod.isEnabled() && myRbInCurrentMethod.isSelected()) {
          myRbInCurrentMethod.setSelected(false);
          myRbInFieldDeclaration.setSelected(true);
        }
      }
      updateTypeSelector();
      myNameField.requestFocusInWindow();
    }
  }
;
  ItemListener finalUpdater=new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateCbFinal();
    }
  }
;
  myRbInConstructor.addItemListener(itemListener);
  myRbInCurrentMethod.addItemListener(itemListener);
  myRbInFieldDeclaration.addItemListener(itemListener);
  myRbInConstructor.addItemListener(finalUpdater);
  myRbInCurrentMethod.addItemListener(finalUpdater);
  myRbInFieldDeclaration.addItemListener(finalUpdater);
  if (myOccurrencesCount > 1) {
    myCbReplaceAll=new NonFocusableCheckBox("Replace all occurrences of expression (" + myOccurrencesCount + " occurrences)");
    myCbReplaceAll.setMnemonic('A');
    gbConstraints.gridy++;
    panel.add(myCbReplaceAll,gbConstraints);
    myCbReplaceAll.addItemListener(itemListener);
    if (myIsInvokedOnDeclaration) {
      myCbReplaceAll.setEnabled(false);
      myCbReplaceAll.setSelected(true);
    }
  }
  if (myLocalVariable != null) {
    gbConstraints.gridy++;
    if (myCbReplaceAll != null) {
      gbConstraints.insets=new Insets(0,8,0,0);
    }
    myCbDeleteVariable=new StateRestoringCheckBox("Delete variable declaration");
    panel.add(myCbDeleteVariable,gbConstraints);
    myCbDeleteVariable.setMnemonic(KeyEvent.VK_D);
    if (myIsInvokedOnDeclaration) {
      myCbDeleteVariable.setEnabled(false);
      myCbDeleteVariable.setSelected(true);
    }
 else     if (myCbReplaceAll != null) {
      updateCbDeleteVariable();
      myCbReplaceAll.addItemListener(new ItemListener(){
        public void itemStateChanged(        ItemEvent e){
          updateCbDeleteVariable();
        }
      }
);
    }
    gbConstraints.insets=standardInsets;
  }
  myCbFinal.addItemListener(itemListener);
  updateTypeSelector();
  return panel;
}
