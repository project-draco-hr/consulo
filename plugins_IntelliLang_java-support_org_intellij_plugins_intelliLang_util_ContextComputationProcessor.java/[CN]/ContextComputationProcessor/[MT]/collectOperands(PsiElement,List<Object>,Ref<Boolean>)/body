{
  if (expression instanceof PsiParenthesizedExpression) {
    collectOperands(((PsiParenthesizedExpression)expression).getExpression(),result,unparsable);
  }
 else   if (expression instanceof PsiTypeCastExpression) {
    collectOperands(((PsiTypeCastExpression)expression).getOperand(),result,unparsable);
  }
 else   if (expression instanceof PsiConditionalExpression) {
    unparsable.set(Boolean.TRUE);
    collectOperands(((PsiConditionalExpression)expression).getThenExpression(),result,unparsable);
    collectOperands(((PsiConditionalExpression)expression).getElseExpression(),result,unparsable);
  }
 else   if (expression instanceof PsiBinaryExpression && ((PsiBinaryExpression)expression).getOperationTokenType() == JavaTokenType.PLUS) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    collectOperands(binaryExpression.getLOperand(),result,unparsable);
    collectOperands(binaryExpression.getROperand(),result,unparsable);
  }
 else   if (expression instanceof PsiPolyadicExpression && ((PsiPolyadicExpression)expression).getOperationTokenType() == JavaTokenType.PLUS) {
    final PsiPolyadicExpression binaryExpression=(PsiPolyadicExpression)expression;
    for (    PsiExpression operand : binaryExpression.getOperands()) {
      collectOperands(operand,result,unparsable);
    }
  }
 else   if (expression instanceof PsiAssignmentExpression && ((PsiAssignmentExpression)expression).getOperationTokenType() == JavaTokenType.PLUSEQ) {
    unparsable.set(Boolean.TRUE);
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    collectOperands(assignmentExpression.getLExpression(),result,unparsable);
    collectOperands(assignmentExpression.getRExpression(),result,unparsable);
  }
 else   if (PsiUtilEx.isStringOrCharacterLiteral(expression)) {
    result.add(expression);
  }
 else   if (expression instanceof PsiExpression) {
    final SmartList<PsiExpression> uncomputables=new SmartList<PsiExpression>();
    final Object o=myEvaluationHelper.computeExpression((PsiExpression)expression,uncomputables);
    addStringFragment(o == null ? "missingValue" : String.valueOf(o),result);
    if (uncomputables.size() > 0) {
      unparsable.set(Boolean.TRUE);
    }
  }
 else {
    unparsable.set(Boolean.TRUE);
    result.add(expression);
  }
}
