{
  final String[] errorString=new String[]{null};
  final String extractedSuperName=getExtractedSuperName();
  final String packageName=getTargetPackageName();
  final PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(extractedSuperName)) {
    errorString[0]=getExtractedSuperNameNotSpecifiedKey();
    myExtractedSuperNameField.requestFocusInWindow();
  }
 else {
    if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(extractedSuperName)) {
      errorString[0]=RefactoringMessageUtil.getIncorrectIdentifierMessage(extractedSuperName);
      myExtractedSuperNameField.requestFocusInWindow();
    }
 else {
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        public void run(){
          try {
            final PsiPackage aPackage=JavaPsiFacade.getInstance(manager.getProject()).findPackage(packageName);
            if (aPackage != null) {
              final PsiDirectory[] directories=aPackage.getDirectories(mySourceClass.getResolveScope());
              if (directories.length >= 1) {
                myTargetDirectory=getDirUnderSameSourceRoot(directories);
              }
            }
            myTargetDirectory=PackageUtil.findOrCreateDirectoryForPackage(myProject,packageName,myTargetDirectory,true);
            if (myTargetDirectory == null) {
              errorString[0]="";
              return;
            }
            errorString[0]=RefactoringMessageUtil.checkCanCreateClass(myTargetDirectory,extractedSuperName);
          }
 catch (          IncorrectOperationException e) {
            errorString[0]=e.getMessage();
            myPackageNameField.requestFocusInWindow();
          }
        }
      }
,RefactoringBundle.message("create.directory"),null);
    }
  }
  if (errorString[0] != null) {
    if (errorString[0].length() > 0) {
      CommonRefactoringUtil.showErrorMessage(myRefactoringName,errorString[0],getHelpId(),myProject);
    }
    return;
  }
  if (!checkConflicts())   return;
  if (!isExtractSuperclass()) {
    invokeRefactoring(createProcessor());
  }
  setJavaDocPolicySetting(getJavaDocPolicy());
  closeOKAction();
}
