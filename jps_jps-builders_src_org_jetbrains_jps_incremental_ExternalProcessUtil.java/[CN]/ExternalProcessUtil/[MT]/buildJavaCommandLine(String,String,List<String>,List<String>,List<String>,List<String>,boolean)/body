{
  final List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(javaExecutable);
  for (  String param : vmParams) {
    cmdLine.add(param);
  }
  if (!bootClasspath.isEmpty()) {
    cmdLine.add("-bootclasspath");
    cmdLine.add(StringUtil.join(bootClasspath,File.pathSeparator));
  }
  if (!classpath.isEmpty()) {
    List<String> commandLineWrapperArgs=null;
    if (useCommandLineWrapper) {
      final Class wrapperClass=getCommandLineWrapperClass();
      if (wrapperClass != null) {
        try {
          File classpathFile=FileUtil.createTempFile("classpath",null);
          final PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(classpathFile)));
          try {
            for (            String path : classpath) {
              writer.println(path);
            }
          }
  finally {
            writer.close();
          }
          commandLineWrapperArgs=Arrays.asList("-classpath",ClasspathBootstrap.getResourcePath(wrapperClass),wrapperClass.getName(),classpathFile.getAbsolutePath());
        }
 catch (        IOException ex) {
          LOG.info("Error starting " + mainClass + "; Classpath wrapper will not be used: ",ex);
        }
      }
 else {
        LOG.info("CommandLineWrapper class not found, classpath wrapper will not be used");
      }
    }
    if (commandLineWrapperArgs != null) {
      cmdLine.addAll(commandLineWrapperArgs);
    }
 else {
      cmdLine.add("-classpath");
      cmdLine.add(StringUtil.join(classpath,File.pathSeparator));
    }
  }
  cmdLine.add(mainClass);
  for (  String param : programParams) {
    cmdLine.add(param);
  }
  return cmdLine;
}
