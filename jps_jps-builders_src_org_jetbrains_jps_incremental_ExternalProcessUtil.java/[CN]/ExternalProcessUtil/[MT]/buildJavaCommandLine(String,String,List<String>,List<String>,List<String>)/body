{
  final List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(javaExecutable);
  if (!bootClasspath.isEmpty()) {
    cmdLine.add("-bootclasspath");
    cmdLine.add(StringUtil.join(bootClasspath,File.pathSeparator));
  }
  if (!classpath.isEmpty()) {
    File classpathFile=null;
    final Class wrapperClass=getCommandLineWrapperClass();
    if (wrapperClass != null) {
      try {
        classpathFile=FileUtil.createTempFile("classpath",null);
        final PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(classpathFile)));
        try {
          for (          String path : classpath) {
            writer.println(path);
          }
        }
  finally {
          writer.close();
        }
      }
 catch (      IOException ex) {
        LOG.info("Error starting " + mainClass + "; Classpath wrapper will not be used: ",ex);
      }
    }
    if (classpathFile != null) {
      cmdLine.add("-classpath");
      final File wrapperClasspath=ClasspathBootstrap.getResourcePath(wrapperClass);
      cmdLine.add(wrapperClasspath.getPath());
      cmdLine.add(wrapperClass.getName());
      cmdLine.add(classpathFile.getAbsolutePath());
    }
 else {
      cmdLine.add("-classpath");
      cmdLine.add(StringUtil.join(classpath,File.pathSeparator));
    }
  }
  cmdLine.add(mainClass);
  for (  String param : programParams) {
    cmdLine.add(param);
  }
  return cmdLine;
}
