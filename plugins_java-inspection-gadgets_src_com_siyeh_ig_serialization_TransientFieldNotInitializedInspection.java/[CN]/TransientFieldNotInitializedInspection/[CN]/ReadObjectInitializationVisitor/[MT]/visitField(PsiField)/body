{
  super.visitField(field);
  if (!field.hasModifierProperty(PsiModifier.TRANSIENT)) {
    return;
  }
  final PsiClass containingClass=field.getContainingClass();
  if (!SerializationUtils.isSerializable(containingClass)) {
    return;
  }
  final PsiExpression initializer=field.getInitializer();
  if (initializer == null && !isInitializedInInitializer(field,containingClass) && !isInitializedInConstructors(field,containingClass)) {
    return;
  }
  if (SerializationUtils.hasReadObject(containingClass)) {
    return;
  }
  registerFieldError(field);
}
