{
  return CachedValuesManager.getCachedValue(psiClass,new CachedValueProvider<MultiMap<PsiField,PsiExpression>>(){
    @Nullable @Override public Result<MultiMap<PsiField,PsiExpression>> compute(){
      final Set<String> fieldNames=ContainerUtil.newHashSet();
      for (      PsiField field : psiClass.getFields()) {
        ContainerUtil.addIfNotNull(fieldNames,field.getName());
      }
      final MultiMap<PsiField,PsiExpression> result=new MultiMap<PsiField,PsiExpression>();
      JavaRecursiveElementWalkingVisitor visitor=new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitAssignmentExpression(        PsiAssignmentExpression assignment){
          super.visitAssignmentExpression(assignment);
          PsiExpression lExpression=assignment.getLExpression();
          PsiExpression rExpression=assignment.getRExpression();
          if (rExpression != null && lExpression instanceof PsiReferenceExpression && fieldNames.contains(((PsiReferenceExpression)lExpression).getReferenceName())) {
            PsiElement target=((PsiReferenceExpression)lExpression).resolve();
            if (target instanceof PsiField && ((PsiField)target).getContainingClass() == psiClass) {
              result.putValue((PsiField)target,rExpression);
            }
          }
        }
      }
;
      for (      PsiMethod constructor : psiClass.getConstructors()) {
        constructor.accept(visitor);
      }
      return Result.create(result,psiClass);
    }
  }
);
}
