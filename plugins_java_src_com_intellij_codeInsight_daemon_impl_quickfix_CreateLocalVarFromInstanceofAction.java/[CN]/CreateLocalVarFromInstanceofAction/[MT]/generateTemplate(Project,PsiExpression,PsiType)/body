{
  final TemplateManager templateManager=TemplateManager.getInstance(project);
  final Template template=templateManager.createTemplate("","");
  template.setToReformat(true);
  SuggestedNameInfo suggestedNameInfo=JavaCodeStyleManager.getInstance(project).suggestVariableName(VariableKind.LOCAL_VARIABLE,null,initializer,type);
  List<String> uniqueNames=new ArrayList<String>();
  for (  String name : suggestedNameInfo.names) {
    if (PsiUtil.isVariableNameUnique(name,initializer)) {
      uniqueNames.add(name);
    }
  }
  if (uniqueNames.isEmpty() && suggestedNameInfo.names.length != 0) {
    String baseName=suggestedNameInfo.names[0];
    String name=JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName(baseName,initializer,true);
    uniqueNames.add(name);
  }
  Set<LookupElement> itemSet=new LinkedHashSet<LookupElement>();
  for (  String name : uniqueNames) {
    itemSet.add(LookupElementBuilder.create(name));
  }
  final LookupElement[] lookupItems=itemSet.toArray(new LookupElement[itemSet.size()]);
  final Result result=uniqueNames.isEmpty() ? null : new TextResult(uniqueNames.get(0));
  Expression expr=new Expression(){
    @Override public LookupElement[] calculateLookupItems(    ExpressionContext context){
      return lookupItems.length > 1 ? lookupItems : null;
    }
    @Override public Result calculateResult(    ExpressionContext context){
      return result;
    }
    @Override public Result calculateQuickResult(    ExpressionContext context){
      return result;
    }
  }
;
  template.addVariable("",expr,expr,true);
  return template;
}
