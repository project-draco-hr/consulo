{
  if (!CodeInsightUtilBase.prepareFileForWrite(myVariable.getContainingFile()))   return;
  try {
    final PsiElementFactory factory=JavaPsiFacade.getInstance(file.getProject()).getElementFactory();
    if (!myTargetType.equals(myVariable.getType())) {
      myVariable.normalizeDeclaration();
      myVariable.getTypeElement().replace(factory.createTypeElement(myTargetType));
      JavaCodeStyleManager.getInstance(project).shortenClassReferences(myVariable);
      if (!myVariable.getContainingFile().equals(file)) {
        UndoUtil.markPsiFileForUndo(myVariable.getContainingFile());
      }
    }
    if (myNewExpression != null) {
      if (!CodeInsightUtilBase.prepareFileForWrite(file))       return;
      @NonNls String text="new " + myTargetType.getCanonicalText() + "{}";
      final PsiNewExpression newExpression=(PsiNewExpression)factory.createExpressionFromText(text,myNewExpression.getParent());
      final PsiElement[] children=newExpression.getChildren();
      children[children.length - 1].replace(myInitializer);
      myNewExpression.replace(newExpression);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
