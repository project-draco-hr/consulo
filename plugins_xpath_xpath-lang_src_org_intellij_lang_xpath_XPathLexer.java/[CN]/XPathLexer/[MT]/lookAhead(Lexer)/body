{
  final IElementType type=baseLexer.getTokenType();
  if (type == XPath2TokenTypes.IF) {
    if (replaceTokenNotFollowedBy(baseLexer,XPathTokenTypes.NCNAME,XPathTokenTypes.LPAREN)) {
      return;
    }
  }
 else   if (type == XPathTokenTypes.NCNAME) {
    if (handleNCName(baseLexer,type))     return;
  }
 else   if (type == XPathTokenTypes.RPAREN) {
    if (getState() == _XPathLexer.TYPE) {
      if (!lookingAt(baseLexer,XPath2TokenTypes.OCCURRENCE_OPS)) {
        setState(baseLexer,_XPathLexer.YYINITIAL);
      }
    }
  }
 else   if (type == XPathTokenTypes.AXIS_NAME) {
    if (replaceTokenNotFollowedBy(baseLexer,XPathTokenTypes.NCNAME,XPathTokenTypes.COLCOL)) {
      setState(baseLexer,_XPathLexer.YYINITIAL);
      return;
    }
  }
 else   if (type == XPathTokenTypes.NODE_TYPE) {
    final String text=baseLexer.getTokenText();
    if ("attribute".equals(text) || "element".equals(text) || "schema-element".equals(text)|| "schema-attribute".equals(text)|| "document-node".equals(text)) {
      if ("attribute".equals(text)) {
        if (replaceTokenFollowedBy(baseLexer,XPathTokenTypes.AXIS_NAME,XPathTokenTypes.COLCOL)) {
          setState(baseLexer,_XPathLexer.S1);
          return;
        }
      }
      if (myXPath2Syntax) {
        if (!replaceTokenNotFollowedBy(baseLexer,XPathTokenTypes.NCNAME,XPathTokenTypes.LPAREN)) {
          advanceAs(baseLexer,type);
        }
      }
 else {
        handleNCName(baseLexer,XPathTokenTypes.NCNAME);
      }
      return;
    }
 else     if (replaceTokenNotFollowedBy(baseLexer,XPathTokenTypes.NCNAME,XPathTokenTypes.LPAREN)) {
      setState(baseLexer,_XPathLexer.YYINITIAL);
      return;
    }
  }
 else   if (XPath2TokenTypes.QUANTIFIERS.contains(type) || type == XPath2TokenTypes.FOR) {
    if (replaceTokenNotFollowedBy(baseLexer,XPathTokenTypes.NCNAME,XPathTokenTypes.DOLLAR)) {
      return;
    }
  }
  advanceAs(baseLexer,type);
}
