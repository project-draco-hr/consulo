{
  if (element instanceof XmlTag) {
    final ASTNode tagNode=element.getNode();
    XmlToken tagNameElement=XmlTagUtil.getStartTagNameElement((XmlTag)element);
    if (tagNameElement == null)     return null;
    int nameEnd=tagNameElement.getTextRange().getEndOffset();
    int end=tagNode.getLastChildNode().getTextRange().getStartOffset();
    ASTNode[] attributes=tagNode.getChildren(XML_ATTRIBUTE_SET);
    if (attributes.length > 0) {
      ASTNode lastAttribute=attributes[attributes.length - 1];
      ASTNode lastAttributeBeforeCR=null;
      for (ASTNode child=tagNode.getFirstChildNode(); child != lastAttribute.getTreeNext(); child=child.getTreeNext()) {
        if (child.getElementType() == XmlElementType.XML_ATTRIBUTE) {
          lastAttributeBeforeCR=child;
        }
 else         if (child.getPsi() instanceof PsiWhiteSpace) {
          if (child.textContains('\n'))           break;
        }
      }
      if (lastAttributeBeforeCR != null) {
        int attributeEnd=lastAttributeBeforeCR.getTextRange().getEndOffset();
        return new TextRange(attributeEnd,end);
      }
    }
    return new TextRange(nameEnd,end);
  }
 else   if (element instanceof XmlComment) {
    final XmlComment xmlComment=(XmlComment)element;
    final TextRange textRange=element.getTextRange();
    int commentStartOffset=getCommentStartOffset(xmlComment);
    int commentEndOffset=getCommentStartEnd(xmlComment);
    if (textRange.getEndOffset() - textRange.getStartOffset() > commentStartOffset + commentEndOffset) {
      return new TextRange(textRange.getStartOffset() + commentStartOffset,textRange.getEndOffset() - commentEndOffset);
    }
 else {
      return null;
    }
  }
 else   if (element instanceof XmlConditionalSection) {
    final XmlConditionalSection conditionalSection=(XmlConditionalSection)element;
    final TextRange textRange=element.getTextRange();
    final PsiElement bodyStart=conditionalSection.getBodyStart();
    int startOffset=bodyStart != null ? bodyStart.getStartOffsetInParent() : 3;
    int endOffset=3;
    if (textRange.getEndOffset() - textRange.getStartOffset() > startOffset + endOffset) {
      return new TextRange(textRange.getStartOffset() + startOffset,textRange.getEndOffset() - endOffset);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}
