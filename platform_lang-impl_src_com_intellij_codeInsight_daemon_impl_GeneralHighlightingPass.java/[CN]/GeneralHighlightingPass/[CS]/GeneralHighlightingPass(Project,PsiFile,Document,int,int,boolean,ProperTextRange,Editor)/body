{
  super(project,document,PRESENTABLE_NAME,file,true);
  myStartOffset=startOffset;
  myEndOffset=endOffset;
  myUpdateAll=updateAll;
  myPriorityRange=priorityRange;
  myEditor=editor;
  LOG.assertTrue(file.isValid());
  setId(Pass.UPDATE_ALL);
  myHasErrorElement=!isWholeFileHighlighting() && Boolean.TRUE.equals(myFile.getUserData(HAS_ERROR_ELEMENT));
  FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject)).getFileStatusMap();
  myErrorFound=!isWholeFileHighlighting() && fileStatusMap.wasErrorFound(myDocument);
  myApplyCommand=new Runnable(){
    public void run(){
      ProperTextRange range=new ProperTextRange(myStartOffset,myEndOffset);
      MarkupModel model=myDocument.getMarkupModel(myProject);
      UpdateHighlightersUtil.cleanFileLevelHighlights(myProject,Pass.UPDATE_ALL,myFile);
      UpdateHighlightersUtil.setHighlightersInRange(range,myHighlights,(MarkupModelEx)model,Pass.UPDATE_ALL,myDocument,myProject);
    }
  }
;
  setProgressLimit(document.getTextLength() / 2);
}
