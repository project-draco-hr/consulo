{
  final List<HighlightInfo> outsideResult=new ArrayList<HighlightInfo>(100);
  final List<HighlightInfo> insideResult=new ArrayList<HighlightInfo>(100);
  final DaemonCodeAnalyzerEx daemonCodeAnalyzer=DaemonCodeAnalyzerEx.getInstanceEx(myProject);
  final HighlightVisitor[] filteredVisitors=getHighlightVisitors(myFile);
  final List<PsiElement> insideElements=new ArrayList<PsiElement>();
  final List<PsiElement> outsideElements=new ArrayList<PsiElement>();
  try {
    List<ProperTextRange> insideRanges=new ArrayList<ProperTextRange>();
    List<ProperTextRange> outsideRanges=new ArrayList<ProperTextRange>();
    Divider.divideInsideAndOutside(myFile,myStartOffset,myEndOffset,myPriorityRange,insideElements,insideRanges,outsideElements,outsideRanges,false,FILE_FILTER);
    setProgressLimit((long)(insideElements.size() + outsideElements.size()));
    final boolean forceHighlightParents=forceHighlightParents();
    if (!isDumbMode()) {
      highlightTodos(myFile,myDocument.getCharsSequence(),myStartOffset,myEndOffset,progress,myPriorityRange,insideResult,outsideResult);
    }
    Runnable after1=new Runnable(){
      @Override public void run(){
        final TextRange priorityIntersection=myPriorityRange.intersection(myRestrictRange);
        if ((!insideElements.isEmpty() || !insideResult.isEmpty()) && priorityIntersection != null) {
          myHighlightInfoProcessor.highlightsInsideVisiblePartAreProduced(myHighlightingSession,insideResult,myPriorityRange,myRestrictRange);
        }
      }
    }
;
    collectHighlights(insideElements,insideRanges,after1,outsideElements,outsideRanges,progress,filteredVisitors,insideResult,outsideResult,forceHighlightParents);
    myHighlightInfoProcessor.highlightsOutsideVisiblePartAreProduced(myHighlightingSession,outsideResult,myPriorityRange,myRestrictRange);
    if (myUpdateAll) {
      daemonCodeAnalyzer.getFileStatusMap().setErrorFoundFlag(myDocument,myErrorFound);
    }
  }
  finally {
    incVisitorUsageCount(-1);
  }
  myHighlights.addAll(insideResult);
  myHighlights.addAll(outsideResult);
}
