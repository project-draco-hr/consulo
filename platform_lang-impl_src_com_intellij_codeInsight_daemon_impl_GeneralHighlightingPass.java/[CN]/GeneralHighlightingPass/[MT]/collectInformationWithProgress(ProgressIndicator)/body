{
  final Collection<HighlightInfo> result=new THashSet<HighlightInfo>(100);
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  HighlightVisitor[] highlightVisitors=createHighlightVisitors();
  HighlightVisitor[] filteredVisitors=filterVisitors(highlightVisitors,myFile);
  List<PsiElement> inside=new ArrayList<PsiElement>();
  List<PsiElement> outside=new ArrayList<PsiElement>();
  try {
    Divider.getInsideAndOutside(myFile,myStartOffset,myEndOffset,myPriorityRange,inside,outside,HighlightLevelUtil.AnalysisLevel.HIGHLIGHT);
    List<PsiElement> elements=inside;
    elements.addAll(outside);
    result.addAll(collectHighlights(elements,progress,filteredVisitors));
    if (!addInjectedPsiHighlights(elements,progress))     throw new ProcessCanceledException();
    if (!isDumbMode()) {
      result.addAll(highlightTodos(myFile,myDocument.getCharsSequence(),0,myFile.getTextLength(),progress));
    }
    if (myUpdateAll) {
      fileStatusMap.setErrorFoundFlag(myDocument,myErrorFound);
    }
  }
  finally {
    incVisitorUsageCount(-1);
  }
  myHighlights=result;
}
