{
  myProgress=(UserDataHolder)progress;
  final Collection<HighlightInfo> result=new THashSet<HighlightInfo>(100);
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  HighlightVisitor[] highlightVisitors=createHighlightVisitors();
  HighlightVisitor[] filtered=filterVisitors(highlightVisitors,myFile);
  try {
    final FileViewProvider viewProvider=myFile.getViewProvider();
    final Set<Language> relevantLanguages=viewProvider.getLanguages();
    List<PsiElement> elements=null;
    for (    Language language : relevantLanguages) {
      PsiElement psiRoot=viewProvider.getPsi(language);
      if (!HighlightLevelUtil.shouldHighlight(psiRoot))       continue;
      List<PsiElement> underRoot=CollectHighlightsUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
      if (elements == null) {
        elements=underRoot;
      }
 else {
        elements.addAll(underRoot);
      }
      if (underRoot.isEmpty()) {
        elements.add(psiRoot);
      }
    }
    if (elements != null) {
      result.addAll(collectHighlights(elements,progress,filtered));
      addInjectedPsiHighlights(elements);
    }
    if (!isDumbMode()) {
      result.addAll(highlightTodos(myFile,myDocument.getCharsSequence(),myStartOffset,myEndOffset));
    }
    if (myUpdateAll) {
      fileStatusMap.setErrorFoundFlag(myDocument,myErrorFound);
    }
  }
  finally {
    incVisitorUsageCount(-1);
  }
  myHighlights=result;
}
