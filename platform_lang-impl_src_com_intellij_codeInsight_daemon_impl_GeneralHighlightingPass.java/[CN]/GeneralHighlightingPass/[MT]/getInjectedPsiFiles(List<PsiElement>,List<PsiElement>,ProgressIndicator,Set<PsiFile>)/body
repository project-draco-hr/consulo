{
  List<DocumentWindow> injected=InjectedLanguageUtil.getCachedInjectedDocuments(myFile);
  Collection<PsiElement> hosts=new THashSet<PsiElement>(elements1.size() + elements2.size() + injected.size());
  for (  DocumentWindow documentRange : injected) {
    progress.checkCanceled();
    if (!documentRange.isValid())     continue;
    PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(documentRange);
    if (file == null)     continue;
    PsiElement context=file.getContext();
    if (context != null && context.isValid() && !file.getProject().isDisposed() && (myUpdateAll || new ProperTextRange(myStartOffset,myEndOffset).intersects(context.getTextRange()))) {
      hosts.add(context);
    }
  }
  hosts.addAll(elements1);
  hosts.addAll(elements2);
  PsiLanguageInjectionHost.InjectedPsiVisitor visitor=new PsiLanguageInjectionHost.InjectedPsiVisitor(){
    public void visit(    @NotNull PsiFile injectedPsi,    @NotNull List<PsiLanguageInjectionHost.Shred> places){
      outInjected.add(injectedPsi);
    }
  }
;
  for (  PsiElement element : hosts) {
    progress.checkCanceled();
    InjectedLanguageUtil.enumerate(element,myFile,visitor,false);
  }
}
