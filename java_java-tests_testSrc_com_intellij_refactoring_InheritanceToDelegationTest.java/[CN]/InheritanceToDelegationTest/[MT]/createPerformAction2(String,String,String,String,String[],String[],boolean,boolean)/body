{
  return new PerformAction(){
    public void performAction(    VirtualFile rootDir,    VirtualFile rootAfter) throws Exception {
      PsiClass aClass=myJavaFacade.findClass(className,GlobalSearchScope.allScope(getProject()));
      assertNotNull("Class " + className + " not found",aClass);
      PsiClass baseClass=myJavaFacade.findClass(baseClassName,GlobalSearchScope.allScope(getProject()));
      assertNotNull("Base class " + baseClassName + " not found",baseClass);
      final PsiMethod[] delegatedMethods;
      final List<PsiMethod> methodsList=new ArrayList<PsiMethod>();
      for (      String name : methodNames) {
        final PsiMethod[] methodsByName=baseClass.findMethodsByName(name,false);
        methodsList.addAll(Arrays.asList(methodsByName));
      }
      delegatedMethods=methodsList.toArray(new PsiMethod[methodsList.size()]);
      final PsiClass[] delegatedInterfaces=new PsiClass[delegatedInterfaceNames.length];
      for (int i=0; i < delegatedInterfaceNames.length; i++) {
        String delegatedInterfaceName=delegatedInterfaceNames[i];
        PsiClass anInterface=myJavaFacade.findClass(delegatedInterfaceName,GlobalSearchScope.allScope(getProject()));
        assertNotNull(anInterface);
        delegatedInterfaces[i]=anInterface;
      }
      new InheritanceToDelegationProcessor(myProject,aClass,baseClass,fieldName,innerClassName,delegatedInterfaces,delegatedMethods,delegateOtherMembers,generateGetter).run();
    }
  }
;
}
