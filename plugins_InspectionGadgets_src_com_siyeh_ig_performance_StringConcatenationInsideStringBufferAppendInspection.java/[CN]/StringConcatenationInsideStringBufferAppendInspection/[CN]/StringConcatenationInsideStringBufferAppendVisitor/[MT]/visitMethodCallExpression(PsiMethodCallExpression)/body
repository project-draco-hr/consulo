{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"append".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (!isConcatenation(argument)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String className=containingClass.getQualifiedName();
  if ("java.lang.StringBuffer".equals(className) || "java.lang.StringBuilder".equals(className)) {
    registerMethodCallError(expression,containingClass);
    return;
  }
  final PsiManager manager=containingClass.getManager();
  final Project project=containingClass.getProject();
  final PsiClass appendableClass=manager.findClass("java.lang.Appendable",GlobalSearchScope.allScope(project));
  if (appendableClass == null) {
    return;
  }
  if (!containingClass.isInheritor(appendableClass,true)) {
    return;
  }
  registerMethodCallError(expression,containingClass);
}
