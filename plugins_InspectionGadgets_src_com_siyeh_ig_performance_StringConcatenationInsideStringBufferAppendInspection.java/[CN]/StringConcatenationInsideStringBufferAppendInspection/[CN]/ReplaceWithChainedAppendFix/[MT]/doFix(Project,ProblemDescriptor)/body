{
  final PsiElement methodNameElement=descriptor.getPsiElement();
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)methodNameElement.getParent();
  if (methodExpression == null) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)methodExpression.getParent();
  if (methodCallExpression == null) {
    return;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression argument=arguments[0];
  final boolean useStringValueOf;
  useStringValueOf=!qualifiedName.equals(CommonClassNames.JAVA_LANG_STRING_BUFFER) && !qualifiedName.equals(CommonClassNames.JAVA_LANG_STRING_BUILDER);
  @NonNls final StringBuilder newExpressionBuffer=buildAppendExpression(argument,useStringValueOf,new StringBuilder(qualifier.getText()));
  if (newExpressionBuffer == null) {
    return;
  }
  replaceExpression(methodCallExpression,newExpressionBuffer.toString());
}
