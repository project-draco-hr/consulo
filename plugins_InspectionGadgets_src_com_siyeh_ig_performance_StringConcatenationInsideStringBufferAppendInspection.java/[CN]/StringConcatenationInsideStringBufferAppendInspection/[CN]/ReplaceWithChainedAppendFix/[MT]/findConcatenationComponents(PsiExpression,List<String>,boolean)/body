{
  final PsiType type=concatenation.getType();
  if (concatenation instanceof PsiPolyadicExpression) {
    if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
      PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)concatenation;
      final PsiExpression[] operands=polyadicExpression.getOperands();
      boolean isConstant=true;
      boolean isString=false;
      final StringBuilder builder=new StringBuilder();
      for (      PsiExpression operand : operands) {
        if (isConstant && PsiUtil.isConstantExpression(operand)) {
          if (builder.length() != 0) {
            builder.append('+');
          }
          final PsiType operandType=operand.getType();
          if (operandType != null && operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
            isString=true;
          }
          builder.append(operand.getText());
        }
 else {
          isConstant=false;
          if (builder.length() != 0) {
            if (useStringValueOf && !isString) {
              out.add("String.valueOf(" + builder.toString() + ')');
            }
 else {
              out.add(builder.toString());
            }
            builder.setLength(0);
          }
          findConcatenationComponents(operand,out,useStringValueOf);
        }
      }
      if (builder.length() != 0) {
        out.add(builder.toString());
      }
      return;
    }
  }
 else   if (concatenation instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)concatenation;
    final PsiExpression expression=parenthesizedExpression.getExpression();
    if (expression != null) {
      findConcatenationComponents(expression,out,useStringValueOf);
    }
    return;
  }
  if (useStringValueOf && type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
    out.add("String.valueOf(" + concatenation.getText() + ')');
  }
 else {
    out.add(concatenation.getText());
  }
}
