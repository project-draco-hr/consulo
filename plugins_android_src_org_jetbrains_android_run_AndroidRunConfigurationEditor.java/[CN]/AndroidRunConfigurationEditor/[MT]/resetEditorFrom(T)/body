{
  myModuleSelector.reset(configuration);
  final String avd=configuration.PREFERRED_AVD;
  if (avd != null) {
    JComboBox combo=myAvdCombo.getComboBox();
    if (containsItem(combo,avd)) {
      combo.setSelectedItem(avd);
    }
 else {
      combo.setRenderer(new ListCellRendererWrapper(){
        @Override public void customize(        JList list,        Object value,        int index,        boolean selected,        boolean hasFocus){
          if (value == null) {
            setText("<html><font color='red'>" + avd + "</font></html>");
          }
        }
      }
);
      combo.setSelectedItem(null);
      incorrectPreferredAvd=avd;
    }
  }
  final TargetSelectionMode targetSelectionMode=configuration.getTargetSelectionMode();
  myShowChooserRadioButton.setSelected(targetSelectionMode == TargetSelectionMode.SHOW_DIALOG);
  myEmulatorRadioButton.setSelected(targetSelectionMode == TargetSelectionMode.EMULATOR);
  myUsbDeviceRadioButton.setSelected(targetSelectionMode == TargetSelectionMode.USB_DEVICE);
  myAvdComboComponent.setEnabled(targetSelectionMode == TargetSelectionMode.EMULATOR);
  resetAvdCompatibilityWarningLabel(targetSelectionMode == TargetSelectionMode.EMULATOR ? getAvdCompatibilityWarning() : null);
  myCommandLineField.setText(configuration.COMMAND_LINE);
  myConfigurationSpecificEditor.resetFrom(configuration);
  myWipeUserDataCheckBox.setSelected(configuration.WIPE_USER_DATA);
  myDisableBootAnimationCombo.setSelected(configuration.DISABLE_BOOT_ANIMATION);
  selectItemCaseInsensitively(myNetworkSpeedCombo,configuration.NETWORK_SPEED);
  selectItemCaseInsensitively(myNetworkLatencyCombo,configuration.NETWORK_LATENCY);
  myClearLogCheckBox.setSelected(configuration.CLEAR_LOGCAT);
}
