{
  final TreeTableView treeTable=new TreeTableView(new ListTreeTableModelOnColumns(new TreeNodeAdapter(null,null,roots),new ColumnInfo[]{BRANCH_COLUMN,REVISION_COLUMN,DATE_COLUMN,AUTHOR_COLUMN}));
  Runnable runnable=new Runnable(){
    public void run(){
      int index=treeTable.getSelectionModel().getMinSelectionIndex();
      if (index == -1) {
        return;
      }
      VcsFileRevision revision=getRevisionAt(treeTable,index);
      AbstractShowDiffAction.showDiff(diffProvider,revision.getRevisionNumber(),file,project);
    }
  }
;
  Window window=null;
  Component focusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(project);
  if (focusedComponent != null) {
    if (focusedComponent instanceof Window) {
      window=(Window)focusedComponent;
    }
 else {
      window=SwingUtilities.getWindowAncestor(focusedComponent);
    }
  }
  if (window == null) {
    window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();
  }
  Rectangle r;
  if (window != null) {
    r=window.getBounds();
  }
 else {
    r=WindowManagerEx.getInstanceEx().getScreenBounds();
  }
  TreeUtil.expandAll(treeTable.getTree());
  TreeTablePopup popup=new TreeTablePopup(VcsBundle.message("lookup.title.vcs.file.revisions"),createMainPanel(treeTable),treeTable,runnable,project);
  popup.getWindow().pack();
  Dimension popupSize=popup.getSize();
  int x=r.x + r.width / 2 - popupSize.width / 2;
  int y=r.y + r.height / 2 - popupSize.height / 2;
  popup.show(x,y);
}
