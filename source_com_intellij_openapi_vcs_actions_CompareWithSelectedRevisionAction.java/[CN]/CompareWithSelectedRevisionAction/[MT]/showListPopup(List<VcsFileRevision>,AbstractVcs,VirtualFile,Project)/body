{
  ColumnInfo[] columns=new ColumnInfo[]{REVISION_TABLE_COLUMN,DATE_TABLE_COLUMN,AUTHOR_TABLE_COLUMN};
  for (  VcsFileRevision revision : revisions) {
    if (revision.getBranchName() != null) {
      columns=new ColumnInfo[]{REVISION_TABLE_COLUMN,BRANCH_TABLE_COLUMN,DATE_TABLE_COLUMN,AUTHOR_TABLE_COLUMN};
      break;
    }
  }
  final TableView<VcsFileRevision> table=new TableView<VcsFileRevision>(new ListTableModel<VcsFileRevision>(columns,revisions,0));
  table.setShowHorizontalLines(false);
  table.setTableHeader(null);
  Runnable runnable=new Runnable(){
    public void run(){
      VcsFileRevision revision=table.getSelectedObject();
      if (revision != null) {
        AbstractShowDiffAction.showDiff(vcs.getDiffProvider(),revision.getRevisionNumber(),file,project);
      }
    }
  }
;
  if (table.getModel().getRowCount() == 0) {
    table.clearSelection();
  }
  new SpeedSearchBase<TableView>(table){
    protected int getSelectedIndex(){
      return table.getSelectedRow();
    }
    protected Object[] getAllElements(){
      return revisions.toArray();
    }
    protected String getElementText(    Object element){
      VcsFileRevision revision=(VcsFileRevision)element;
      return revision.getRevisionNumber().asString() + " " + revision.getBranchName()+ " "+ revision.getAuthor();
    }
    protected void selectElement(    Object element,    String selectedText){
      VcsFileRevision revision=(VcsFileRevision)element;
      TableUtil.selectRows(myComponent,new int[]{revisions.indexOf(revision)});
      TableUtil.scrollSelectionToVisible(myComponent);
    }
  }
;
  new PopupChooserBuilder(table).setSouthComponent(createCommentsPanel(table)).setTitle(VcsBundle.message("lookup.title.vcs.file.revisions")).setItemChoosenCallback(runnable).setResizable(true).setDimensionServiceKey("Vcs.CompareWithSelectedRevision.Popup").createPopup().showCenteredInCurrentWindow(project);
}
