{
  final DefaultListModel model=new DefaultListModel();
  for (Iterator<VcsFileRevision> iterator=revisions.iterator(); iterator.hasNext(); ) {
    model.addElement(iterator.next());
  }
  final JList list=new JList(model);
  list.setCellRenderer(new VcsRevisionListCellRenderer());
  Runnable runnable=new Runnable(){
    public void run(){
      int index=list.getSelectedIndex();
      if (index == -1 || index >= list.getModel().getSize()) {
        return;
      }
      VcsFileRevision revision=(VcsFileRevision)list.getSelectedValue();
      AbstractShowDiffAction.showDiff(vcs.getDiffProvider(),revision.getRevisionNumber(),file,project);
    }
  }
;
  if (list.getModel().getSize() == 0) {
    list.clearSelection();
  }
  new ListSpeedSearch(list);
  Window window=null;
  Component focusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(project);
  if (focusedComponent != null) {
    if (focusedComponent instanceof Window) {
      window=(Window)focusedComponent;
    }
 else {
      window=SwingUtilities.getWindowAncestor(focusedComponent);
    }
  }
  if (window == null) {
    window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();
  }
  Rectangle r;
  if (window != null) {
    r=window.getBounds();
  }
 else {
    r=WindowManagerEx.getInstanceEx().getScreenBounds();
  }
  ListPopup popup=new ListPopup("File Revisions",createListMainPanel(list),list,runnable,project);
  if (model.getSize() > 0) {
    Dimension listPreferredSize=list.getPreferredSize();
    list.setVisibleRowCount(0);
    Dimension viewPreferredSize=new Dimension(listPreferredSize.width,Math.min(listPreferredSize.height,r.height - 20));
    (list.getParent()).setPreferredSize(viewPreferredSize);
  }
  popup.getWindow().pack();
  Dimension popupSize=popup.getSize();
  int x=r.x + r.width / 2 - popupSize.width / 2;
  int y=r.y + r.height / 2 - popupSize.height / 2;
  popup.show(x,y);
}
