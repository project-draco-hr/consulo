{
  setLayout(new BorderLayout());
  setBackground(UIUtil.getListBackground());
  myScrollablePanel.setBackground(UIUtil.getListBackground());
  myScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  myScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
  add(myScrollPane,BorderLayout.CENTER);
  add(myLeftButton,BorderLayout.WEST);
  add(myRightButton,BorderLayout.EAST);
  myModel.addAll(Arrays.asList(objects));
  myLeftButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (mySelectedIndex == -1 && !myModel.isEmpty()) {
        mySelectedIndex=myModel.size() - 1;
        paintBorder();
        myList.get(mySelectedIndex).requestFocusInWindow();
      }
      scrollToVisible(1);
      shiftFocusToVisible(1);
    }
  }
);
  myLeftButton.setBorder(null);
  myRightButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (mySelectedIndex == -1 && !myModel.isEmpty()) {
        mySelectedIndex=myModel.size() - 1;
        paintBorder();
        myList.get(mySelectedIndex).requestFocusInWindow();
      }
      scrollToVisible(-1);
      shiftFocusToVisible(-1);
    }
  }
);
  myRightButton.setBorder(null);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      shiftFocus(-1);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),JComponent.WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      shiftFocus(1);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),JComponent.WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      shiftFocus(-mySelectedIndex);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_HOME,0),JComponent.WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      shiftFocus(getModelSize() - 1 - mySelectedIndex);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_END,0),JComponent.WHEN_FOCUSED);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Runnable clickHandler=getCtrlClickHandler(mySelectedIndex);
      if (mySelectedIndex != -1 && clickHandler != null) {
        clickHandler.run();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),JComponent.WHEN_FOCUSED);
  final ActionListener dblClickAction=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (mySelectedIndex != -1) {
        final Runnable doubleClickHandler=getDoubleClickHandler(mySelectedIndex);
        if (doubleClickHandler != null) {
          doubleClickHandler.run();
        }
      }
    }
  }
;
  registerKeyboardAction(dblClickAction,KeyStroke.getKeyStroke(KeyEvent.VK_F4,0),JComponent.WHEN_FOCUSED);
  registerKeyboardAction(new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      clearBorder();
      mySelectedIndex=-1;
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_FOCUSED);
  updateList();
}
