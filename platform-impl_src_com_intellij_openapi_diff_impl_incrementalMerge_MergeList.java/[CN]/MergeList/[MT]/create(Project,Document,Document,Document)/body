{
  MergeList mergeList=new MergeList(project,left,base,right);
  String leftText=left.getText();
  String baseText=base.getText();
  String rightText=right.getText();
  @NonNls final Object[] data=new Object[]{"Left\n" + leftText,"\nBase\n" + baseText,"\nRight\n" + rightText};
  ContextLogger logger=new ContextLogger(LOG,new ContextLogger.SimpleContext(data));
  List<MergeBuilder.MergeFragment> fragmentList=processText(leftText,baseText,rightText,logger);
  ArrayList<Change> leftChanges=new ArrayList<Change>();
  ArrayList<Change> rightChanges=new ArrayList<Change>();
  for (  MergeBuilder.MergeFragment mergeFragment : fragmentList) {
    final TextRange[] ranges=mergeFragment.getRanges();
    logger.assertTrue(ranges[1] != null);
    if (ranges[0] == null) {
      if (ranges[2] == null) {
        LOG.assertTrue(false,"Left Text: " + leftText + "\n"+ "Right Text: "+ rightText+ "\nBase Text: "+ baseText);
      }
      rightChanges.add(SimpleChange.fromRanges(ranges[1],ranges[2],mergeList.myChanges[1]));
    }
 else     if (ranges[2] == null) {
      if (ranges[0] == null) {
        LOG.assertTrue(false,"Left Text: " + leftText + "\n"+ "Right Text: "+ rightText+ "\nBase Text: "+ baseText);
      }
      leftChanges.add(SimpleChange.fromRanges(ranges[1],ranges[0],mergeList.myChanges[0]));
    }
 else {
      Change[] changes=MergeConflict.createChanges(ranges[0],ranges[1],ranges[2],mergeList);
      leftChanges.add(changes[0]);
      rightChanges.add(changes[1]);
    }
  }
  mergeList.myChanges[0].setChanges(leftChanges);
  mergeList.myChanges[1].setChanges(rightChanges);
  return mergeList;
}
