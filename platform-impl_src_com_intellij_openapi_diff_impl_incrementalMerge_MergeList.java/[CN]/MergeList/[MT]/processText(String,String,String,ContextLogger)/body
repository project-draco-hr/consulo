{
  DiffFragment[] leftFragments=DiffPolicy.DEFAULT_LINES.buildFragments(baseText,leftText);
  DiffFragment[] rightFragments=DiffPolicy.DEFAULT_LINES.buildFragments(baseText,rightText);
  int[] leftOffsets=new int[]{0,0};
  int[] rightOffsets=new int[]{0,0};
  int leftIndex=0;
  int rightIndex=0;
  MergeBuilder builder=new MergeBuilder(logger);
  while (leftIndex < leftFragments.length || rightIndex < rightFragments.length) {
    FragmentSide side;
    TextRange[] equalRanges=new TextRange[2];
    if (leftOffsets[0] < rightOffsets[0] && leftIndex < leftFragments.length) {
      side=FragmentSide.SIDE1;
      getEqualRanges(leftFragments[leftIndex],leftOffsets,equalRanges);
      leftIndex++;
    }
 else     if (rightIndex < rightFragments.length) {
      side=FragmentSide.SIDE2;
      getEqualRanges(rightFragments[rightIndex],rightOffsets,equalRanges);
      rightIndex++;
    }
 else     break;
    if (equalRanges[0] != null && equalRanges[1] != null)     builder.add(equalRanges[0],equalRanges[1],side);
 else     logger.assertTrue(equalRanges[0] == null && equalRanges[1] == null);
  }
  List<MergeBuilder.MergeFragment> fragmentList=builder.finish(leftText.length(),baseText.length(),rightText.length());
  return fragmentList;
}
