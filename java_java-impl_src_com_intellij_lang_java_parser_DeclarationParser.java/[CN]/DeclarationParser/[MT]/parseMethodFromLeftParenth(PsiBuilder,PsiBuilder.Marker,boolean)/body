{
  parseParameterList(builder);
  eatBrackets(builder);
  if (areTypeAnnotationsSupported(builder)) {
    final PsiBuilder.Marker receiver=builder.mark();
    final PsiBuilder.Marker annotations=parseAnnotations(builder);
    if (annotations != null) {
      receiver.done(JavaElementType.METHOD_RECEIVER);
    }
 else {
      receiver.drop();
    }
  }
  ReferenceParser.parseReferenceList(builder,JavaTokenType.THROWS_KEYWORD,JavaElementType.THROWS_LIST,JavaTokenType.COMMA);
  if (anno && expect(builder,JavaTokenType.DEFAULT_KEYWORD)) {
    parseAnnotationValue(builder);
  }
  final IElementType tokenType=builder.getTokenType();
  if (tokenType == JavaTokenType.SEMICOLON) {
    builder.advanceLexer();
  }
 else   if (tokenType == JavaTokenType.LBRACE) {
    StatementParser.parseCodeBlock(builder);
  }
 else {
    error(builder,JavaErrorMessages.message("expected.lbrace.or.semicolon"));
  }
  declaration.done(anno ? JavaElementType.ANNOTATION_METHOD : JavaElementType.METHOD);
  return declaration;
}
