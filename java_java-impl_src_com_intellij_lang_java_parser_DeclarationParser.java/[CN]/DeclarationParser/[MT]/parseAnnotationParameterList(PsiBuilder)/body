{
  PsiBuilder.Marker list=builder.mark();
  if (!expect(builder,JavaTokenType.LPARENTH)) {
    list.done(JavaElementType.ANNOTATION_PARAMETER_LIST);
    return list;
  }
  if (expect(builder,JavaTokenType.RPARENTH)) {
    list.done(JavaElementType.ANNOTATION_PARAMETER_LIST);
    return list;
  }
  final boolean isFirstParamNamed=parseAnnotationParameter(builder,true);
  boolean isFirstParamWarned=false;
  boolean afterBad=false;
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == null) {
      error(builder,JavaErrorMessages.message("expected.parameter"));
      break;
    }
 else     if (expect(builder,JavaTokenType.RPARENTH)) {
      break;
    }
 else     if (tokenType == JavaTokenType.COMMA) {
      final PsiBuilder.Marker errorStart=builder.mark();
      final PsiBuilder.Marker errorEnd=builder.mark();
      builder.advanceLexer();
      final boolean hasParamName=parseAnnotationParameter(builder,false);
      if (!isFirstParamNamed && hasParamName && !isFirstParamWarned) {
        errorStart.errorBefore(JavaErrorMessages.message("annotation.name.is.missing"),errorEnd);
        isFirstParamWarned=true;
      }
 else {
        errorStart.drop();
      }
      errorEnd.drop();
    }
 else     if (!afterBad) {
      error(builder,JavaErrorMessages.message("expected.comma.or.rparen"));
      builder.advanceLexer();
      afterBad=true;
    }
 else {
      afterBad=false;
      parseAnnotationParameter(builder,false);
    }
  }
  list.done(JavaElementType.ANNOTATION_PARAMETER_LIST);
  return list;
}
