{
  parseParameterList(builder);
  eatBrackets(builder,constructor,JavaErrorMessages.message("expected.semicolon"));
  if (areTypeAnnotationsSupported(builder)) {
    final PsiBuilder.Marker receiver=builder.mark();
    final PsiBuilder.Marker annotations=parseAnnotations(builder);
    if (annotations != null) {
      done(receiver,JavaElementType.METHOD_RECEIVER);
    }
 else {
      receiver.drop();
    }
  }
  ReferenceParser.parseReferenceList(builder,JavaTokenType.THROWS_KEYWORD,JavaElementType.THROWS_LIST,JavaTokenType.COMMA);
  if (anno && expect(builder,JavaTokenType.DEFAULT_KEYWORD)) {
    parseAnnotationValue(builder);
  }
  final IElementType tokenType=builder.getTokenType();
  if (tokenType != JavaTokenType.SEMICOLON && tokenType != JavaTokenType.LBRACE) {
    final PsiBuilder.Marker error=builder.mark();
    final CharSequence text=builder.getOriginalText();
    Loop:     while (true) {
      for (int i=builder.getCurrentOffset() - 1; i >= 0; i--) {
        final char ch=text.charAt(i);
        if (ch == '\n')         break Loop;
 else         if (ch != ' ' && ch != '\t')         break;
      }
      if (!expect(builder,APPEND_TO_METHOD_SET))       break;
    }
    error.error(JavaErrorMessages.message("expected.lbrace.or.semicolon"));
  }
  if (!expect(builder,JavaTokenType.SEMICOLON)) {
    if (builder.getTokenType() == JavaTokenType.LBRACE) {
      StatementParser.parseCodeBlock(builder);
    }
  }
  done(declaration,anno ? JavaElementType.ANNOTATION_METHOD : JavaElementType.METHOD);
  return declaration;
}
