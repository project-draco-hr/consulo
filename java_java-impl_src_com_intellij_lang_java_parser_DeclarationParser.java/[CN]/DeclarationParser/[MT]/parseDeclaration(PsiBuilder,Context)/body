{
  final IElementType tokenType=builder.getTokenType();
  if (tokenType == null)   return null;
  if (tokenType == JavaTokenType.LBRACE) {
    if (context == Context.FILE || context == Context.CODE_BLOCK)     return null;
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER || ElementType.PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
    if (context == Context.FILE)     return null;
  }
 else   if (tokenType instanceof ILazyParseableElementType) {
    final PsiBuilder.Marker declaration=builder.mark();
    declaration.drop();
    builder.advanceLexer();
    return declaration;
  }
 else   if (!ElementType.MODIFIER_BIT_SET.contains(tokenType) && !ElementType.CLASS_KEYWORD_BIT_SET.contains(tokenType) && tokenType != JavaTokenType.AT && (context == Context.CODE_BLOCK || tokenType != JavaTokenType.LT)) {
    return null;
  }
  final PsiBuilder.Marker declaration=builder.mark();
  final PsiBuilder.Marker modList=parseModifierList(builder);
  if (expect(builder,JavaTokenType.AT)) {
    if (builder.getTokenType() == JavaTokenType.INTERFACE_KEYWORD) {
      return parseClassFromKeyword(builder,declaration,true);
    }
 else {
      declaration.rollbackTo();
      return null;
    }
  }
 else   if (ElementType.CLASS_KEYWORD_BIT_SET.contains(builder.getTokenType())) {
    final PsiBuilder.Marker root=parseClassFromKeyword(builder,declaration,false);
    if (context == Context.FILE) {
      boolean declarationsAfterEnd=false;
      while (builder.getTokenType() != null && builder.getTokenType() != JavaTokenType.RBRACE) {
        final PsiBuilder.Marker position=builder.mark();
        final PsiBuilder.Marker element=parseDeclaration(builder,Context.CLASS);
        if (element != null && AFTER_END_DECLARATION_SET.contains(((LighterASTNode)element).getTokenType())) {
          if (!declarationsAfterEnd) {
            element.precede().error(JavaErrorMessages.message("expected.class.or.interface"));
          }
          declarationsAfterEnd=true;
          position.drop();
        }
 else {
          position.rollbackTo();
          break;
        }
      }
      if (declarationsAfterEnd) {
        expectOrError(builder,JavaTokenType.RBRACE,JavaErrorMessages.message("expected.rbrace"));
      }
    }
    return root;
  }
  PsiBuilder.Marker typeParams=null;
  if (builder.getTokenType() == JavaTokenType.LT) {
    typeParams=ReferenceParser.parseTypeParameters(builder);
  }
  if (context == Context.FILE) {
    error(builder,JavaErrorMessages.message("expected.class.or.interface"),typeParams);
    declaration.drop();
    return modList;
  }
  PsiBuilder.Marker type;
  if (ElementType.PRIMITIVE_TYPE_BIT_SET.contains(builder.getTokenType())) {
    type=parseTypeNotNull(builder);
  }
 else   if (builder.getTokenType() == JavaTokenType.IDENTIFIER) {
    final PsiBuilder.Marker idPos=builder.mark();
    type=parseTypeNotNull(builder);
    if (builder.getTokenType() == JavaTokenType.LPARENTH) {
      if (context == Context.CODE_BLOCK) {
        declaration.rollbackTo();
        return null;
      }
      idPos.rollbackTo();
      if (typeParams == null) {
        emptyElement(type,JavaElementType.TYPE_PARAMETER_LIST);
      }
      builder.advanceLexer();
      if (builder.getTokenType() != JavaTokenType.LPARENTH) {
        declaration.drop();
        return null;
      }
      parseMethodFromLeftParenth(builder,declaration,false);
      return declaration;
    }
    idPos.drop();
  }
 else   if (builder.getTokenType() == JavaTokenType.LBRACE) {
    if (context == Context.CODE_BLOCK) {
      error(builder,JavaErrorMessages.message("expected.identifier.or.type"),typeParams);
      declaration.drop();
      return modList;
    }
    final PsiBuilder.Marker codeBlock=StatementParser.parseCodeBlock(builder);
    LOG.assertTrue(codeBlock != null);
    if (typeParams != null) {
      final PsiBuilder.Marker error=typeParams.precede();
      error.errorBefore(JavaErrorMessages.message("unexpected.token"),codeBlock);
    }
    declaration.done(JavaElementType.CLASS_INITIALIZER);
    return declaration;
  }
 else {
    final PsiBuilder.Marker error;
    if (typeParams != null) {
      error=typeParams.precede();
    }
 else {
      error=builder.mark();
    }
    error.error(JavaErrorMessages.message("expected.identifier.or.type"));
    return modList;
  }
  if (!expect(builder,JavaTokenType.IDENTIFIER)) {
    if (context == Context.CODE_BLOCK) {
      declaration.rollbackTo();
      return null;
    }
 else {
      if (typeParams != null) {
        typeParams.precede().errorBefore(JavaErrorMessages.message("unexpected.token"),type);
      }
      builder.error(JavaErrorMessages.message("expected.identifier"));
      declaration.drop();
      return modList;
    }
  }
  if (builder.getTokenType() == JavaTokenType.LPARENTH) {
    if (context == Context.CLASS || context == Context.ANNOTATION_INTERFACE) {
      if (typeParams == null) {
        emptyElement(type,JavaElementType.TYPE_PARAMETER_LIST);
      }
      parseMethodFromLeftParenth(builder,declaration,(context == Context.ANNOTATION_INTERFACE));
      return declaration;
    }
  }
  if (typeParams != null) {
    typeParams.precede().errorBefore(JavaErrorMessages.message("unexpected.token"),type);
  }
  return parseFieldOrLocalVariable(builder,declaration,context);
}
