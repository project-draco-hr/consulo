{
  final PsiBuilder.Marker param=builder.mark();
  final Pair<PsiBuilder.Marker,Boolean> modListInfo=parseModifierList(builder);
  int flags=ReferenceParser.EAT_LAST_DOT | ReferenceParser.WILDCARD;
  if (ellipsis)   flags|=ReferenceParser.ELLIPSIS;
  if (disjunction)   flags|=ReferenceParser.DISJUNCTIONS;
  final ReferenceParser.TypeInfo typeInfo=ReferenceParser.parseTypeInfo(builder,flags);
  if (typeInfo == null) {
    if (modListInfo.second) {
      param.rollbackTo();
      return null;
    }
 else {
      error(builder,JavaErrorMessages.message("expected.type"));
      emptyElement(builder,JavaElementType.TYPE);
    }
  }
  if (expect(builder,JavaTokenType.IDENTIFIER)) {
    eatBrackets(builder,typeInfo != null && typeInfo.isVarArg || value,JavaErrorMessages.message("expected.rparen"));
    if (value) {
      if (expectOrError(builder,JavaTokenType.EQ,JavaErrorMessages.message("expected.eq"))) {
        if (ExpressionParser.parse(builder) == null) {
          error(builder,JavaErrorMessages.message("expected.expression"));
        }
      }
    }
  }
 else {
    error(builder,JavaErrorMessages.message("expected.identifier"));
    param.drop();
    return modListInfo.first;
  }
  done(param,JavaElementType.PARAMETER);
  return param;
}
