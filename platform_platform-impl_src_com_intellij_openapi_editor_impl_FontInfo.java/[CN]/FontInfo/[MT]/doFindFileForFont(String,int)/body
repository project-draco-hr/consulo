{
  final String normalizedFamilyName=familyName.toLowerCase(Locale.getDefault()).replace(" ","");
  FilenameFilter filter=new FilenameFilter(){
    @Override public boolean accept(    File file,    String name){
      String normalizedName=name.toLowerCase(Locale.getDefault());
      return normalizedName.startsWith(normalizedFamilyName) && (normalizedName.endsWith(".otf") || normalizedName.endsWith(".ttf")) && (style == -1 || style == getFontStyle(normalizedName));
    }
  }
;
  List<File> files=new ArrayList<File>();
  File[] userFiles=new File(System.getProperty("user.home"),"Library/Fonts").listFiles(filter);
  if (userFiles != null)   files.addAll(Arrays.asList(userFiles));
  File[] localFiles=new File("/Library/Fonts").listFiles(filter);
  if (localFiles != null)   files.addAll(Arrays.asList(localFiles));
  if (files.isEmpty())   return null;
  if (style == Font.PLAIN) {
    List<File> regulars=ContainerUtil.filter(files,new Condition<File>(){
      @Override public boolean value(      File file){
        return file.getName().toLowerCase(Locale.getDefault()).contains("regular");
      }
    }
);
    if (!regulars.isEmpty())     return Collections.min(regulars,BY_NAME);
  }
  return Collections.min(files,BY_NAME);
}
