{
  final Editor editor=myConsole.getCurrentEditor();
  final Document document=editor.getDocument();
  new WriteCommandAction.Simple(myConsole.getProject()){
    @Override public void run(){
      if (storeUserText) {
        myHelper.setContent(document.getText());
      }
      String text=StringUtil.notNullize(command);
      int offset;
      if (regularMode) {
        if (myMultiline) {
          if (text.isEmpty())           return;
          int selectionStart=editor.getSelectionModel().getSelectionStart();
          int selectionEnd=editor.getSelectionModel().getSelectionEnd();
          int caretOffset=editor.getCaretModel().getOffset();
          int line=document.getLineNumber(caretOffset);
          int lineStartOffset=document.getLineStartOffset(line);
          if (selectionStart == lineStartOffset)           document.deleteString(selectionStart,selectionEnd);
          String trimmedLine=document.getText(new TextRange(lineStartOffset,document.getLineEndOffset(line))).trim();
          if (StringUtil.findFirst(trimmedLine,new CharFilter(){
            @Override public boolean accept(            char ch){
              return ch == '\'' || ch == '\"' || ch == '_' || Character.isLetterOrDigit(ch);
            }
          }
) > -1) {
            text+="\n";
          }
          document.insertString(lineStartOffset,text);
          offset=lineStartOffset;
          editor.getSelectionModel().setSelection(lineStartOffset,lineStartOffset + text.length());
        }
 else {
          document.setText(text);
          offset=document.getTextLength();
        }
      }
 else {
        offset=0;
        try {
          document.putUserData(UndoConstants.DONT_RECORD_UNDO,Boolean.TRUE);
          document.setText(text);
        }
  finally {
          document.putUserData(UndoConstants.DONT_RECORD_UNDO,null);
        }
      }
      editor.getCaretModel().moveToOffset(offset);
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
.execute();
}
