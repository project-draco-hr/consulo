{
  final Sdk javaSdk=myJavaSdkPointer == null ? null : myJavaSdkPointer.get();
  if (javaSdk == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.java.sdk"));
  }
  final Sdk consuloSdk=myConsuloSdkPointer == null ? null : myConsuloSdkPointer.get();
  if (consuloSdk == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.consulo.sdk"));
  }
  final Artifact artifact=myArtifactPointer == null ? null : myArtifactPointer.get();
  if (artifact == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.plugin.artifact"));
  }
  String sandboxHome=((Sandbox)consuloSdk.getSdkAdditionalData()).getSandboxHome();
  if (sandboxHome == null) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  try {
    sandboxHome=new File(sandboxHome).getCanonicalPath();
  }
 catch (  IOException e) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  final String canonicalSandbox=sandboxHome;
  final JavaCommandLineState state=new JavaCommandLineState(env){
    @Override protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      fillParameterList(vm,VM_PARAMETERS);
      fillParameterList(params.getProgramParametersList(),PROGRAM_PARAMETERS);
      @NonNls String libPath=consuloSdk.getHomePath() + File.separator + "lib";
      vm.add("-Xbootclasspath/a:" + libPath + File.separator+ "boot.jar");
      vm.defineProperty(PathManager.PROPERTY_CONFIG_PATH,canonicalSandbox + File.separator + "config");
      vm.defineProperty(PathManager.PROPERTY_SYSTEM_PATH,canonicalSandbox + File.separator + "system");
      vm.defineProperty(PathManager.PROPERTY_PLUGINS_PATH,artifact.getOutputPath());
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      if (SystemInfo.isXWindow) {
        if (VM_PARAMETERS == null || !VM_PARAMETERS.contains("-Dsun.awt.disablegrab")) {
          vm.defineProperty("sun.awt.disablegrab","true");
        }
      }
      params.setWorkingDirectory(consuloSdk.getHomePath() + File.separator + "bin"+ File.separator);
      params.setJdk(javaSdk);
      params.getClassPath().addFirst(libPath + File.separator + "log4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "jdom.jar");
      params.getClassPath().addFirst(libPath + File.separator + "trove4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "util.jar");
      params.getClassPath().addFirst(libPath + File.separator + "extensions.jar");
      params.getClassPath().addFirst(libPath + File.separator + "bootstrap.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea.jar");
      params.getClassPath().addFirst(((JavaSdkType)javaSdk.getSdkType()).getToolsPath(javaSdk));
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuilderFactory.getInstance().createBuilder(getProject()));
  return state;
}
