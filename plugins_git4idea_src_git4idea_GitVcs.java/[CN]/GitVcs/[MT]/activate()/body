{
  isActivated=true;
  myExecutableValidator=new GitExecutableValidator(myProject);
  myExecutableValidator.checkExecutableAndShowDialogIfNeeded();
  checkVersion();
  if (!myProject.isDefault() && myRootTracker == null) {
    myRootTracker=new GitRootTracker(this,myProject,myRootListeners.getMulticaster());
  }
  if (myVFSListener == null) {
    myVFSListener=new GitVFSListener(myProject,this);
  }
  if (myConfigTracker == null) {
    myConfigTracker=new GitConfigTracker(myProject,this,myConfigListeners.getMulticaster());
  }
  if (myGitIgnoreTracker == null) {
    myGitIgnoreTracker=new GitIgnoreTracker(myProject,this);
  }
  myReferenceTracker.activate();
  NewGitUsersComponent.getInstance(myProject).activate();
  GitProjectLogManager.getInstance(myProject).activate();
  if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {
    StatusBar statusBar=WindowManager.getInstance().getStatusBar(myProject);
    if (statusBar != null) {
      myBranchWidget=new GitBranchWidget(myProject);
      statusBar.addWidget(myBranchWidget,"after " + (SystemInfo.isMac ? "Encoding" : "InsertOverwrite"),myProject);
    }
  }
  ((GitCommitsSequentialIndex)ServiceManager.getService(GitCommitsSequentially.class)).activate();
}
