{
  final String executable=myAppSettings.getPathToGit();
  try {
    myVersion=GitVersion.identifyVersion(executable);
    if (!myVersion.isSupported()) {
      log.info("Unsupported Git version: " + myVersion);
      final String SETTINGS_LINK="settings";
      final String UPDATE_LINK="update";
      String message=String.format("The <a href='" + SETTINGS_LINK + "'>configured</a> version of Git is not supported: %s.<br/> "+ "The minimal supported version is %s. Please <a href='"+ UPDATE_LINK+ "'>update</a>.",myVersion,GitVersion.MIN);
      IMPORTANT_ERROR_NOTIFICATION.createNotification("Unsupported Git version",message,NotificationType.ERROR,new NotificationListener.Adapter(){
        @Override protected void hyperlinkActivated(        @NotNull Notification notification,        @NotNull HyperlinkEvent e){
          if (SETTINGS_LINK.equals(e.getDescription())) {
            ShowSettingsUtil.getInstance().showSettingsDialog(myProject,getConfigurable().getDisplayName());
          }
 else           if (UPDATE_LINK.equals(e.getDescription())) {
            BrowserUtil.browse("http://git-scm.com");
          }
        }
      }
).notify(myProject);
    }
  }
 catch (  Exception e) {
    if (getExecutableValidator().checkExecutableAndNotifyIfNeeded()) {
      final String reason=(e.getCause() != null ? e.getCause() : e).getMessage();
      String message=GitBundle.message("vcs.unable.to.run.git",executable,reason);
      if (!myProject.isDefault()) {
        showMessage(message,ConsoleViewContentType.SYSTEM_OUTPUT.getAttributes());
      }
      VcsBalloonProblemNotifier.showOverVersionControlView(myProject,message,MessageType.ERROR);
    }
  }
}
