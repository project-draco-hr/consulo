{
  if (!myCheckingVersion.compareAndSet(false,true)) {
    return;
  }
  try {
    if (myProject.isDefault()) {
      return;
    }
    final String executable=mySettings.GIT_EXECUTABLE;
    if (myVersionChecked && myVersionCheckExcecutable.equals(executable)) {
      return;
    }
    myVersionChecked=true;
    myVersionCheckExcecutable=executable;
    final String version;
    try {
      version=version(myProject).trim();
    }
 catch (    VcsException e) {
      String reason=(e.getCause() != null ? e.getCause() : e).getMessage();
      showMessage(GitBundle.message("vcs.unable.to.run.git",executable,reason),CodeInsightColors.ERRORS_ATTRIBUTES);
      return;
    }
    if (!GitVersion.parse(version).isSupported()) {
      showMessage(GitBundle.message("vcs.unsupported.version",version,GitVersion.MIN),CodeInsightColors.WARNINGS_ATTRIBUTES);
    }
  }
  finally {
    myCheckingVersion.set(false);
  }
}
