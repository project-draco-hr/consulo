def do_relink(src, dst, files, ui):

    def relinkfile(src, dst):
        bak = (dst + '.bak')
        os.rename(dst, bak)
        try:
            util.os_link(src, dst)
        except OSError:
            os.rename(bak, dst)
            raise
        os.remove(bak)
    CHUNKLEN = 65536
    relinked = 0
    savedbytes = 0
    pos = 0
    total = len(files)
    for (f, sz) in files:
        pos += 1
        source = os.path.join(src, f)
        tgt = os.path.join(dst, f)
        sfp = file(source, 'rb')
        dfp = file(tgt, 'rb')
        sin = sfp.read(CHUNKLEN)
        while sin:
            din = dfp.read(CHUNKLEN)
            if (sin != din):
                break
            sin = sfp.read(CHUNKLEN)
        sfp.close()
        dfp.close()
        if sin:
            ui.debug((_('not linkable: %s\n') % f))
            continue
        try:
            relinkfile(source, tgt)
            ui.progress(_('relinking'), pos, f, _(' files'), total)
            relinked += 1
            savedbytes += sz
        except OSError as inst:
            ui.warn(('%s: %s\n' % (tgt, str(inst))))
    ui.progress(_('relinking'), None, unit=_(' files'), total=total)
    ui.status((_('relinked %d files (%d bytes reclaimed)\n') % (relinked, savedbytes)))
