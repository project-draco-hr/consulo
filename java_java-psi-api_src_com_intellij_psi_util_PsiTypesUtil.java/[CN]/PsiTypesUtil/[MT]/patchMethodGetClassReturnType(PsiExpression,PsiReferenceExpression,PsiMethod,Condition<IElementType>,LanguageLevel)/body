{
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_5) && GET_CLASS_METHOD.equals(method.getName()) && CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) {
    PsiExpression qualifier=methodExpression.getQualifierExpression();
    PsiType qualifierType=null;
    final Project project=call.getProject();
    if (qualifier != null) {
      qualifierType=TypeConversionUtil.erasure(qualifier.getType());
    }
 else     if (condition != null) {
      ASTNode parent=call.getNode().getTreeParent();
      while (parent != null && condition.value(parent.getElementType())) {
        parent=parent.getTreeParent();
      }
      if (parent != null) {
        qualifierType=JavaPsiFacade.getInstance(project).getElementFactory().createType((PsiClass)parent.getPsi());
      }
    }
    if (qualifierType != null) {
      PsiClass javaLangClass=JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_CLASS,call.getResolveScope());
      if (javaLangClass != null && javaLangClass.getTypeParameters().length == 1) {
        Map<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
        map.put(javaLangClass.getTypeParameters()[0],PsiWildcardType.createExtends(call.getManager(),qualifierType));
        PsiSubstitutor substitutor=JavaPsiFacade.getInstance(project).getElementFactory().createSubstitutor(map);
        final PsiClassType classType=JavaPsiFacade.getInstance(project).getElementFactory().createType(javaLangClass,substitutor,languageLevel);
        final PsiElement parent=call.getParent();
        return parent instanceof PsiReferenceExpression && parent.getParent() instanceof PsiMethodCallExpression || parent instanceof PsiExpressionList ? PsiUtil.captureToplevelWildcards(classType,methodExpression) : classType;
      }
    }
  }
  return null;
}
