{
  final String uniqueID=settings.getUniqueID();
  RunnerAndConfigurationSettings selectedConfiguration=getSelectedConfiguration();
  String selectedId=selectedConfiguration != null ? selectedConfiguration.getUniqueID() : "";
  if (selectedId.equals(uniqueID)) {
    Long lastCheckTime=myIconCheckTimes.get(uniqueID);
    Long calcTime=myIconCalcTime.get(uniqueID);
    if (calcTime == null || calcTime < 150)     calcTime=150L;
    if (lastCheckTime == null || System.currentTimeMillis() - lastCheckTime > calcTime * 10) {
      myIdToIcon.remove(uniqueID);
    }
  }
  Icon icon=myIdToIcon.get(uniqueID);
  if (icon == null) {
    icon=IconDeferrer.getInstance().deferAutoUpdatable(settings.getConfiguration().getIcon(),myProject.hashCode() ^ settings.hashCode(),new Function<Integer,Icon>(){
      @Override public Icon fun(      Integer param){
        if (myProject.isDisposed())         return null;
        myIconCalcTime.remove(uniqueID);
        long startTime=System.currentTimeMillis();
        Icon icon;
        try {
          settings.checkSettings();
          icon=ProgramRunnerUtil.getConfigurationIcon(settings,false);
        }
 catch (        RuntimeConfigurationException ignored) {
          icon=ProgramRunnerUtil.getConfigurationIcon(settings,true);
        }
        myIconCalcTime.put(uniqueID,System.currentTimeMillis() - startTime);
        return icon;
      }
    }
);
    myIdToIcon.put(uniqueID,icon);
    myIconCheckTimes.put(uniqueID,System.currentTimeMillis());
  }
  return icon;
}
