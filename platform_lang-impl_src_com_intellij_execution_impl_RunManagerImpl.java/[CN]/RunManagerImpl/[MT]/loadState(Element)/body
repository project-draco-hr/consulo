{
  clear(false);
  List<Element> children=parentNode.getChildren(CONFIGURATION);
  Element[] sortedElements=children.toArray(new Element[children.size()]);
  Arrays.sort(sortedElements,new Comparator<Element>(){
    @Override public int compare(    @NotNull Element a,    @NotNull Element b){
      final boolean aDefault=Boolean.valueOf(a.getAttributeValue("default","false"));
      final boolean bDefault=Boolean.valueOf(b.getAttributeValue("default","false"));
      return aDefault == bDefault ? 0 : aDefault ? -1 : 1;
    }
  }
);
  for (int i=0, length=sortedElements.length; i < length; i++) {
    Element element=sortedElements[i];
    RunnerAndConfigurationSettings configurationSettings;
    try {
      configurationSettings=loadConfiguration(element,false);
    }
 catch (    Throwable e) {
      LOG.error(e);
      continue;
    }
    if (configurationSettings == null) {
      if (myUnknownElements == null) {
        myUnknownElements=new SmartList<Element>();
      }
      myUnknownElements.add((Element)element.detach());
    }
  }
  try {
    myOrder.readExternal(parentNode);
  }
 catch (  InvalidDataException e) {
    throw new RuntimeException(e);
  }
  readList(myOrder);
  myRecentlyUsedTemporaries.clear();
  Element recentNode=parentNode.getChild(RECENT);
  if (recentNode != null) {
    JDOMExternalizableStringList list=new JDOMExternalizableStringList();
    try {
      list.readExternal(recentNode);
    }
 catch (    InvalidDataException e) {
      throw new RuntimeException(e);
    }
    readList(list);
    for (    String name : list) {
      RunnerAndConfigurationSettings settings=myConfigurations.get(name);
      if (settings != null) {
        myRecentlyUsedTemporaries.add(settings.getConfiguration());
      }
    }
  }
  myOrdered=false;
  myLoadedSelectedConfigurationUniqueName=parentNode.getAttributeValue(SELECTED_ATTR);
  setSelectedConfigurationId(myLoadedSelectedConfigurationUniqueName);
  fireBeforeRunTasksUpdated();
  fireRunConfigurationSelected();
}
