{
  Document document=e.getDocument();
  if (myLexer instanceof JspHighlightLexer && myEditor != null && myEditor.getProject() != null) {
    final PsiDocumentManager instance=PsiDocumentManager.getInstance(myEditor.getProject());
    final PsiFile psiFile=instance.getPsiFile(document);
    if (psiFile instanceof JspFile)     ((JspHighlightLexer)myLexer).setBaseFile((JspFile)psiFile);
  }
  if (mySegments.getSegmentCount() == 0) {
    setText(document.getCharsSequence());
    return;
  }
  CharSequence text=document.getCharsSequence();
  int oldStartOffset=e.getOffset();
  final int oldStartIndex=Math.max(0,mySegments.findSegmentIndex(oldStartOffset) - 2);
  int startIndex=oldStartIndex;
  int data;
  do {
    data=mySegments.getSegmentData(startIndex);
    if (isInitialState(data) || startIndex == 0)     break;
    startIndex--;
  }
 while (true);
  int startOffset=mySegments.getSegmentStart(startIndex);
  int newEndOffset=e.getOffset() + e.getNewLength();
  myLexer.start(CharArrayUtil.fromSequence(text),startOffset,text.length(),myInitialState);
  SegmentArrayWithData insertSegments=new SegmentArrayWithData();
  int oldEndIndex=-1;
  int insertSegmentCount=0;
  int repaintEnd=-1;
  int lastTokenStart=-1;
  while (myLexer.getTokenType() != null) {
    if (startIndex >= oldStartIndex)     break;
    int tokenStart=myLexer.getTokenStart();
    if (tokenStart == lastTokenStart) {
      throw new IllegalStateException("Error while updating lexer: " + e + " document text: "+ e.getDocument().getText());
    }
    int tokenEnd=myLexer.getTokenEnd();
    int lexerState=myLexer.getState();
    data=packData(myLexer.getTokenType(),lexerState);
    if (mySegments.getSegmentStart(startIndex) != tokenStart || mySegments.getSegmentEnd(startIndex) != tokenEnd || mySegments.getSegmentData(startIndex) != data) {
      break;
    }
    startIndex++;
    myLexer.advance();
    lastTokenStart=tokenStart;
  }
  startOffset=mySegments.getSegmentStart(startIndex);
  while (myLexer.getTokenType() != null) {
    int tokenStart=myLexer.getTokenStart();
    if (tokenStart == lastTokenStart) {
      throw new IllegalStateException("Error while updating lexer: " + e + " document text: "+ e.getDocument().getText());
    }
    lastTokenStart=tokenStart;
    int tokenEnd=myLexer.getTokenEnd();
    int lexerState=myLexer.getState();
    data=packData(myLexer.getTokenType(),lexerState);
    if (tokenStart >= newEndOffset && lexerState == myInitialState) {
      int shiftedTokenStart=tokenStart - e.getNewLength() + e.getOldLength();
      int index=mySegments.findSegmentIndex(shiftedTokenStart);
      if (mySegments.getSegmentStart(index) == shiftedTokenStart && mySegments.getSegmentData(index) == data) {
        repaintEnd=tokenStart;
        oldEndIndex=index;
        break;
      }
    }
    insertSegments.setElementAt(insertSegmentCount,tokenStart,tokenEnd,data);
    insertSegmentCount++;
    myLexer.advance();
  }
  if (repaintEnd == -1) {
    repaintEnd=text.length();
  }
  if (oldEndIndex < 0) {
    oldEndIndex=mySegments.getSegmentCount();
  }
  mySegments.shiftSegments(oldEndIndex,e.getNewLength() - e.getOldLength());
  mySegments.remove(startIndex,oldEndIndex);
  mySegments.insert(insertSegments,startIndex);
  int lastDocOffset=e.getDocument().getTextLength();
  checkUpdateCorrect(lastDocOffset);
  if (insertSegmentCount == 0 || oldEndIndex == startIndex + 1 && insertSegmentCount == 1 && data == mySegments.getSegmentData(startIndex)) {
    return;
  }
  ((EditorEx)myEditor).repaint(startOffset,repaintEnd);
}
