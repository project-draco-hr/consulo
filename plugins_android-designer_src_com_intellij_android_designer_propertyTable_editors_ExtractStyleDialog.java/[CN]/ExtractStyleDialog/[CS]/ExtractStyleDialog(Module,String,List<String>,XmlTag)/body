{
  super(module.getProject());
  myModule=module;
  myFileName=fileName;
  myDirNames=dirNames;
  myPanel=new JPanel(new GridLayoutManager(3,2));
  JLabel nameLabel=new JLabel("Style name:");
  nameLabel.setDisplayedMnemonic('n');
  myPanel.add(nameLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,0,0,null,null,null));
  myNameText=new JTextField();
  myPanel.add(myNameText,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,0,null,null,null));
  nameLabel.setLabelFor(myNameText);
  myNameText.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      checkFinish();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkFinish();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      checkFinish();
    }
  }
);
  JLabel attributesLabel=new JLabel("Attributes:");
  attributesLabel.setDisplayedMnemonic('A');
  myPanel.add(attributesLabel,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,0,0,null,null,null));
  myRootNode=new CheckedTreeNode(null);
  for (  XmlAttribute attribute : tag.getAttributes()) {
    String name=attribute.getName();
    if (!"style".equalsIgnoreCase(name)) {
      CheckedTreeNode treeNode=new CheckedTreeNode(attribute);
      treeNode.setChecked(!"android:layout_width".equalsIgnoreCase(name) && !"android:layout_height".equalsIgnoreCase(name));
      myRootNode.add(treeNode);
    }
  }
  CheckboxTree.CheckboxTreeCellRenderer renderer=new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof CheckedTreeNode) {
        XmlAttribute attribute=(XmlAttribute)((CheckedTreeNode)value).getUserObject();
        if (attribute != null) {
          getTextRenderer().append(attribute.getLocalName());
          getTextRenderer().append(" [" + attribute.getValue() + "]",SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES);
        }
      }
    }
  }
;
  myTree=new CheckboxTree(renderer,myRootNode){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      checkFinish();
    }
    protected void installSpeedSearch(){
      new TreeSpeedSearch(this,new Convertor<TreePath,String>(){
        public String convert(        TreePath path){
          Object object=path.getLastPathComponent();
          if (object instanceof CheckedTreeNode) {
            XmlAttribute attribute=(XmlAttribute)((CheckedTreeNode)object).getUserObject();
            if (attribute != null) {
              return attribute.getLocalName();
            }
          }
          return "";
        }
      }
);
    }
  }
;
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  TreeUtil.expandAll(myTree);
  attributesLabel.setLabelFor(myTree);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTree);
  decorator.setToolbarPosition(ActionToolbarPosition.RIGHT);
  decorator.setEditAction(null);
  decorator.disableUpDownActions();
  AnActionButton selectAll=new AnActionButton("Select All",null,PlatformIcons.SELECT_ALL_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      setChecked(true);
    }
  }
;
  decorator.addExtraAction(selectAll);
  AnActionButton unselectAll=new AnActionButton("Unselect All",null,PlatformIcons.UNSELECT_ALL_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      setChecked(false);
    }
  }
;
  decorator.addExtraAction(unselectAll);
  myPanel.add(decorator.createPanel(),new GridConstraints(2,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_GROW,0,null,null,null));
  myPanel.setPreferredSize(new Dimension(400,-1));
  setTitle("Extract Style");
  checkFinish();
  init();
}
