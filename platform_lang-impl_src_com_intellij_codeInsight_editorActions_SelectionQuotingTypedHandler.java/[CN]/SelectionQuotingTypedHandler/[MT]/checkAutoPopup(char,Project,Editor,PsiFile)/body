{
  SelectionModel selectionModel=editor.getSelectionModel();
  if (CodeInsightSettings.getInstance().SURROUND_SELECTION_ON_QUOTE_TYPED && selectionModel.hasSelection() && isDelimiter(c)) {
    String selectedText=selectionModel.getSelectedText();
    if (selectedText.length() < 1) {
      return super.checkAutoPopup(c,project,editor,psiFile);
    }
    final int selectionStart=selectionModel.getSelectionStart();
    final int selectionEnd=selectionModel.getSelectionEnd();
    if (selectedText.length() > 1) {
      final char firstChar=selectedText.charAt(0);
      final char lastChar=selectedText.charAt(selectedText.length() - 1);
      if (isSimilarDelimiters(firstChar,c) && lastChar == getMatchingDelimiter(firstChar) && (isQuote(firstChar) || firstChar != c) && !shouldSkipReplacementOfQuotesOrBraces(psiFile,editor,selectedText,c) && selectedText.indexOf(lastChar,1) == selectedText.length() - 1) {
        selectedText=selectedText.substring(1,selectedText.length() - 1);
      }
    }
    final int caretOffset=selectionModel.getSelectionStart();
    final char c2=getMatchingDelimiter(c);
    final String newText=String.valueOf(c) + selectedText + c2;
    myLtrSelection=selectionModel.getLeadSelectionOffset() != selectionModel.getSelectionEnd();
    if (editor instanceof EditorEx) {
      myRestoreStickySelection=((EditorEx)editor).isStickySelection();
    }
 else {
      myRestoreStickySelection=false;
    }
    selectionModel.removeSelection();
    editor.getDocument().replaceString(selectionStart,selectionEnd,newText);
    if (Registry.is("editor.smarterSelectionQuoting")) {
      myReplacedTextRange=new TextRange(caretOffset + 1,caretOffset + newText.length() - 1);
    }
 else {
      myReplacedTextRange=new TextRange(caretOffset,caretOffset + newText.length());
    }
    return Result.STOP;
  }
  return super.checkAutoPopup(c,project,editor,psiFile);
}
