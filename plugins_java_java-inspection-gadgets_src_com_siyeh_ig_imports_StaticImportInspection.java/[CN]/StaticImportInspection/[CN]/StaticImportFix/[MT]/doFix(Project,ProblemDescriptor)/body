{
  final PsiImportStaticStatement importStatement=(PsiImportStaticStatement)descriptor.getPsiElement();
  final PsiJavaCodeReferenceElement importReference=importStatement.getImportReference();
  if (importReference == null) {
    return;
  }
  final JavaResolveResult[] importTargets=importReference.multiResolve(false);
  if (importTargets.length == 0) {
    return;
  }
  final boolean onDemand=importStatement.isOnDemand();
  final StaticImportReferenceCollector referenceCollector=new StaticImportReferenceCollector(importTargets,onDemand);
  final PsiJavaFile file=(PsiJavaFile)importStatement.getContainingFile();
  file.accept(referenceCollector);
  final List<PsiJavaCodeReferenceElement> references=referenceCollector.getReferences();
  final Map<PsiJavaCodeReferenceElement,PsiMember> referenceTargetMap=new HashMap();
  for (  PsiJavaCodeReferenceElement reference : references) {
    final PsiElement target=reference.resolve();
    if (target instanceof PsiMember) {
      final PsiMember member=(PsiMember)target;
      referenceTargetMap.put(reference,member);
    }
  }
  importStatement.delete();
  for (  Map.Entry<PsiJavaCodeReferenceElement,PsiMember> entry : referenceTargetMap.entrySet()) {
    removeReference(entry.getKey(),entry.getValue());
  }
}
