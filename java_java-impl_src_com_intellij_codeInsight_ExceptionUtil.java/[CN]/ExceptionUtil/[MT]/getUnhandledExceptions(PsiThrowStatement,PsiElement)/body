{
  final PsiExpression exception=throwStatement.getException();
  final List<PsiType> types=getPreciseThrowTypes(exception);
  return ContainerUtil.mapNotNull(types,new NullableFunction<PsiType,PsiClassType>(){
    @Override public PsiClassType fun(    PsiType type){
      if (type instanceof PsiClassType) {
        final PsiClassType classType=(PsiClassType)type;
        if (!isUncheckedException(classType) && !isHandled(throwStatement,classType,topElement)) {
          return classType;
        }
      }
      return null;
    }
  }
);
}
