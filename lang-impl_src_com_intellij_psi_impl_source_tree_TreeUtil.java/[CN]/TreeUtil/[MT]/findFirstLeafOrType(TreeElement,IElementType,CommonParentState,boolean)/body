{
  final TreeElement[] result={null};
  element.acceptTree(new RecursiveTreeElementWalkingVisitor(false){
    @Override protected boolean visitNode(    TreeElement node){
      if (result[0] != null)       return false;
      if (commonParent != null) {
        initStrongWhitespaceHolder(commonParent,node,false);
      }
      if (!expandChameleons && isLeafOrCollapsedChameleon(node)) {
        result[0]=node;
        return false;
      }
      if (node instanceof LeafElement || node.getElementType() == searchedType) {
        result[0]=node;
        return false;
      }
      return super.visitNode(node);
    }
  }
);
  return result[0];
}
