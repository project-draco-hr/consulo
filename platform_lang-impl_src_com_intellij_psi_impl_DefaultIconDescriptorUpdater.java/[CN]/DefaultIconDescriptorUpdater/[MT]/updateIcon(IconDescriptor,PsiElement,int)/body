{
  if (element instanceof PsiDirectory) {
    val psiDirectory=(PsiDirectory)element;
    val vFile=psiDirectory.getVirtualFile();
    val project=psiDirectory.getProject();
    val isArhiveSystem=vFile.getParent() == null && vFile.getFileSystem() instanceof ArchiveFileSystem;
    val isContentRoot=ProjectRootsUtil.isModuleContentRoot(vFile,project);
    val contentFolder=ProjectRootsUtil.getContentFolderIfIs(vFile,project);
    Icon symbolIcon;
    if (isArhiveSystem) {
      symbolIcon=AllIcons.Nodes.PpJar;
    }
 else     if (isContentRoot) {
      symbolIcon=AllIcons.Nodes.Module;
    }
 else     if (contentFolder != null) {
      symbolIcon=contentFolder.getType().getIcon();
    }
 else {
      if (vFile.getFileSystem() instanceof ArchiveFileSystem) {
        val psiPackage=PsiPackageManager.getInstance(project).findAnyPackage(psiDirectory);
        symbolIcon=psiPackage != null ? AllIcons.Nodes.Package : AllIcons.Nodes.TreeClosed;
      }
 else {
        val contentFolderTypeForFile=ProjectFileIndex.SERVICE.getInstance(project).getContentFolderTypeForFile(vFile);
        symbolIcon=contentFolderTypeForFile != null ? contentFolderTypeForFile.getChildDirectoryIcon(psiDirectory) : AllIcons.Nodes.TreeClosed;
      }
    }
    iconDescriptor.setMainIcon(symbolIcon);
  }
 else   if (element instanceof PsiFile) {
    if (iconDescriptor.getMainIcon() != null) {
      return;
    }
    val virtualFile=((PsiFile)element).getVirtualFile();
    if (virtualFile != null) {
      iconDescriptor.setMainIcon(NativeFileIconUtil.INSTANCE.getIcon(virtualFile));
    }
    if (iconDescriptor.getMainIcon() == null) {
      val fileType=((PsiFile)element).getFileType();
      iconDescriptor.setMainIcon(fileType.getIcon());
    }
  }
 else {
    val languageElementIcon=LanguageElementIcons.INSTANCE.forLanguage(element.getLanguage());
    if (languageElementIcon == null) {
      return;
    }
    iconDescriptor.addLayerIcon(languageElementIcon);
  }
}
