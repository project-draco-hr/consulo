{
  if ((obj1 instanceof PsiFileNode) && (obj2 instanceof PsiFileNode)) {
    return compareFiles(((PsiFileNode)obj1).getValue(),((PsiFileNode)obj2).getValue());
  }
 else   if ((obj1 instanceof PsiFileNode) && (obj2 instanceof PsiDirectoryNode || obj2 instanceof PackageElementNode)) {
    return 1;
  }
 else   if ((obj1 instanceof PsiDirectoryNode || obj1 instanceof PackageElementNode) && (obj2 instanceof PsiFileNode)) {
    return -1;
  }
 else   if (obj1 instanceof PsiDirectoryNode && obj2 instanceof PackageElementNode) {
    return -1;
  }
 else   if (obj1 instanceof PackageElementNode && obj2 instanceof PsiDirectoryNode) {
    return 1;
  }
 else   if ((obj1 instanceof PsiDirectoryNode) && (obj2 instanceof PsiDirectoryNode)) {
    PsiDirectory psiDirectory1=((PsiDirectoryNode)obj1).getValue();
    PsiPackage psiPackage1=JavaDirectoryService.getInstance().getPackage(psiDirectory1);
    PsiDirectory psiDirectory2=((PsiDirectoryNode)obj2).getValue();
    PsiPackage psiPackage2=JavaDirectoryService.getInstance().getPackage(psiDirectory2);
    if (psiPackage1 != null && psiPackage2 == null) {
      return -1;
    }
 else     if (psiPackage1 == null && psiPackage2 != null) {
      return 1;
    }
 else     if (psiPackage1 != null) {
      return psiPackage1.getQualifiedName().compareToIgnoreCase(psiPackage2.getQualifiedName());
    }
 else {
      return compareDirs(psiDirectory1,psiDirectory2);
    }
  }
 else   if ((obj1 instanceof PackageElementNode) && (obj2 instanceof PackageElementNode)) {
    return ((PackageElementNode)obj1).getValue().getPackage().getQualifiedName().compareToIgnoreCase(((PackageElementNode)obj2).getValue().getPackage().getQualifiedName());
  }
 else   if (obj1 instanceof ModuleToDoNode && obj2 instanceof ModuleToDoNode) {
    return ((ModuleToDoNode)obj1).getValue().getName().compareToIgnoreCase(((ModuleToDoNode)obj2).getValue().getName());
  }
 else   if (obj1 instanceof ModuleToDoNode) {
    return -1;
  }
 else   if (obj2 instanceof ModuleToDoNode) {
    return 1;
  }
 else {
    throw new IllegalArgumentException(obj1.getClass().getName() + "," + obj2.getClass().getName());
  }
}
