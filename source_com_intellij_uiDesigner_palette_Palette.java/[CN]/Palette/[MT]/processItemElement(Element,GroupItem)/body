{
  LOG.assertTrue(itemElement != null);
  LOG.assertTrue(group != null);
  final String className=LwXmlReader.getRequiredString(itemElement,"class");
  final String iconPath=LwXmlReader.getString(itemElement,"icon");
  final String toolTipText=LwXmlReader.getString(itemElement,"tooltip-text");
  final GridConstraints constraints;
  final Element defaultConstraints=itemElement.getChild("default-constraints");
  if (defaultConstraints != null) {
    constraints=processDefaultConstraintsElement(defaultConstraints);
  }
 else {
    constraints=new GridConstraints();
  }
  final HashMap<String,StringDescriptor> propertyName2intitialValue=new HashMap<String,StringDescriptor>();
{
    final Element initialValues=itemElement.getChild("initial-values");
    if (initialValues != null) {
      final Iterator iterator=initialValues.getChildren("property").iterator();
      while (iterator.hasNext()) {
        final Element e=(Element)iterator.next();
        final String name=LwXmlReader.getRequiredString(e,"name");
        final StringDescriptor value=StringDescriptor.create(LwXmlReader.getRequiredString(e,"value"));
        propertyName2intitialValue.put(name,value);
      }
    }
  }
  final boolean removable=LwXmlReader.getOptionalBoolean(itemElement,"removable",true);
  final ComponentItem item=new ComponentItem(className,iconPath,toolTipText,constraints,propertyName2intitialValue,removable);
  addItem(group,item);
}
