{
  if (t instanceof PsiWildcardType) {
    final PsiWildcardType wcType=(PsiWildcardType)t;
    final PsiType bound=wcType.getBound();
    if (bound == null) {
      return t;
    }
    final PsiManager manager=PsiManager.getInstance(myProject);
    final PsiType subst=substitute(bound);
    if (subst == null)     return null;
    return subst instanceof PsiWildcardType ? subst : wcType.isExtends() ? PsiWildcardType.createExtends(manager,subst) : PsiWildcardType.createSuper(manager,subst);
  }
 else   if (t instanceof PsiTypeVariable) {
    final PsiType b=apply(t);
    if (b instanceof Bottom || b instanceof PsiTypeVariable) {
      return null;
    }
    return substitute(b);
  }
 else   if (t instanceof Bottom) {
    return null;
  }
 else   if (t instanceof PsiArrayType) {
    return substitute(((PsiArrayType)t).getComponentType()).createArrayType();
  }
 else   if (t instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult result=((PsiClassType)t).resolveGenerics();
    final PsiClass aClass=result.getElement();
    final PsiSubstitutor aSubst=result.getSubstitutor();
    if (aClass != null) {
      PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
      for (      final PsiTypeParameter parm : aSubst.getSubstitutionMap().keySet()) {
        final PsiType type=aSubst.substitute(parm);
        theSubst=theSubst.put(parm,substitute(type));
      }
      return JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory().createType(aClass,theSubst);
    }
  }
  return t;
}
