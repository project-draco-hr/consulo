{
  Project project=e.getData(PlatformDataKeys.PROJECT);
  Editor editor=e.getData(PlatformDataKeys.EDITOR);
  PsiFile psiFile=e.getData(LangDataKeys.PSI_FILE);
  if (project != null && editor != null && psiFile != null) {
    int caretOffset=editor.getCaretModel().getOffset();
    int documentOffset=caretOffset - 1;
    if (documentOffset > 0) {
      StringBuilder prefixBuilder=new StringBuilder();
      CharSequence charSequence=editor.getDocument().getCharsSequence();
      for (char c; documentOffset >= 0 && Character.isJavaIdentifierPart(c=charSequence.charAt(documentOffset)); documentOffset--) {
        prefixBuilder.append(c);
      }
      documentOffset=caretOffset;
      StringBuilder suffixBuilder=new StringBuilder();
      for (char c; documentOffset < charSequence.length() && Character.isJavaIdentifierPart(c=charSequence.charAt(documentOffset)); documentOffset++) {
        suffixBuilder.append(c);
      }
      if (prefixBuilder.length() > 0) {
        String[] prefixes=NameUtil.nameToWords(prefixBuilder.reverse().toString());
        String prefix=prefixes.length > 0 ? prefixes[prefixes.length - 1] : "";
        if (prefix.length() > 0) {
          String[] suffixes=NameUtil.nameToWords(suffixBuilder.toString());
          String suffix=suffixes.length > 0 ? suffixes[0] : "";
          if (suffix.length() > 0 && Character.isLowerCase(suffix.charAt(0))) {
            editor.getSelectionModel().setSelection(caretOffset,caretOffset + suffix.length());
          }
          List<String> variants=SpellCheckerManager.getInstance(project).getVariants(prefix);
          List<LookupElement> lookupItems=new ArrayList<LookupElement>();
          for (          String variant : variants) {
            lookupItems.add(LookupElementBuilder.create(variant));
          }
          LookupElement[] items=lookupItems.toArray(new LookupElement[lookupItems.size()]);
          LookupManager.getInstance(project).showLookup(editor,items,prefix);
        }
      }
    }
  }
}
