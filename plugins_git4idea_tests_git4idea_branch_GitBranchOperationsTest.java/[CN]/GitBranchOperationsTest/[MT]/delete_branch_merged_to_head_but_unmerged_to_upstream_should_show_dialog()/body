{
  final File parentDir=new File(myTempDirFixture.getTempDirPath(),"parent.git");
  GitExec.clone(myProject,myCommunity.getRoot().getPath(),parentDir.getPath(),true);
  checkout(myCommunity,"-b","feature");
  remoteAdd(myCommunity,"origin",parentDir.getPath());
  push(myCommunity,"-u","origin","feature");
  createAddCommit(myCommunity,"file");
  checkout(myCommunity,"master");
  merge(myCommunity,"feature");
  refresh(myCommunity);
  final AtomicBoolean dialogShown=new AtomicBoolean();
  myDialogManager.registerDialogHandler(GitBranchIsNotFullyMergedDialog.class,new TestDialogHandler<GitBranchIsNotFullyMergedDialog>(){
    @Override public int handleDialog(    GitBranchIsNotFullyMergedDialog dialog){
      dialogShown.set(true);
      return DialogWrapper.CANCEL_EXIT_CODE;
    }
  }
);
  GitBrancher processor=ServiceManager.getService(myProject,GitBrancher.class);
  Method method=GitBrancherImpl.class.getDeclaredMethod("doDelete",String.class,ProgressIndicator.class);
  method.setAccessible(true);
  method.invoke(processor,"feature",singletonList(myCommunity),new EmptyProgressIndicator());
  assertTrue(dialogShown.get());
}
