{
  prepareLocalChangesAndBranchWithSameModifiedFilesWithoutConflicts(myCommunity);
  branch(myUltimate,"feature");
  branch(myContrib,"feature");
  myDialogManager.registerDialogHandler(GitSmartOperationDialog.class,new TestDialogHandler<GitSmartOperationDialog>(){
    @Override public int handleDialog(    GitSmartOperationDialog dialog){
      return DialogWrapper.CANCEL_EXIT_CODE;
    }
  }
);
  doCheckoutOrMerge(checkout,"feature");
  String operationName=checkout ? "checkout" : "merge";
  String rollbackProposal=checkout ? String.format(GitCheckoutOperation.ROLLBACK_PROPOSAL_FORMAT,"master") : GitMergeOperation.ROLLBACK_PROPOSAL;
  assertMessage("Couldn't " + operationName + " feature","However " + operationName + " has succeeded for the following repository:<br/>"+ myUltimate.getPresentableUrl()+ "<br/>"+ rollbackProposal,"Rollback","Don't rollback");
}
