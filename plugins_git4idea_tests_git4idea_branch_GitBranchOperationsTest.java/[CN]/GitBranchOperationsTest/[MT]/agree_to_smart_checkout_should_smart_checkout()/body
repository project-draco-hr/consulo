{
  prepareLocalChangesAndBranchWithSameModifiedFilesWithoutConflicts(myUltimate);
  prepareLocalChangesAndBranchWithSameModifiedFilesWithoutConflicts(myCommunity);
  prepareLocalChangesAndBranchWithSameModifiedFilesWithoutConflicts(myContrib);
  myDialogManager.registerDialogHandler(GitSmartOperationDialog.class,new TestDialogHandler<GitSmartOperationDialog>(){
    @Override public int handleDialog(    GitSmartOperationDialog dialog){
      return DialogWrapper.OK_EXIT_CODE;
    }
  }
);
  doCheckout("feature",null);
  assertBranch("feature");
  for (  GitRepository repository : myRepositories) {
    refresh(repository);
    assertBranch(repository,"feature");
    assertEquals(read(repository,"local.txt"),"master\ninitial content\nfeature content\n");
  }
}
