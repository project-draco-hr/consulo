{
  if (myReturnValueTemplate == null)   return;
  if (getSuperMethods().size() > 0) {
    for (Iterator<RefMethod> iterator=getSuperMethods().iterator(); iterator.hasNext(); ) {
      RefMethod refSuper=iterator.next();
      refSuper.updateReturnValueTemplate(expression);
    }
  }
 else {
    String newTemplate=null;
    if (expression instanceof PsiLiteralExpression) {
      PsiLiteralExpression psiLiteralExpression=(PsiLiteralExpression)expression;
      newTemplate=psiLiteralExpression.getText();
    }
 else     if (expression instanceof PsiReferenceExpression) {
      PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
      PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof PsiField) {
        PsiField psiField=(PsiField)resolved;
        if (psiField.hasModifierProperty(PsiModifier.STATIC) && psiField.hasModifierProperty(PsiModifier.FINAL) && RefUtil.compareAccess(RefUtil.getAccessModifier(psiField),getAccessModifier()) >= 0) {
          newTemplate=PsiFormatUtil.formatVariable(psiField,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_CONTAINING_CLASS | PsiFormatUtil.SHOW_FQ_NAME,PsiSubstitutor.EMPTY);
        }
      }
    }
 else     if (RefUtil.isCallToSuperMethod(expression,(PsiMethod)getElement()))     return;
    if (myReturnValueTemplate == RETURN_VALUE_UNDEFINED) {
      myReturnValueTemplate=newTemplate;
    }
 else     if (!Comparing.equal(myReturnValueTemplate,newTemplate)) {
      myReturnValueTemplate=null;
    }
  }
}
