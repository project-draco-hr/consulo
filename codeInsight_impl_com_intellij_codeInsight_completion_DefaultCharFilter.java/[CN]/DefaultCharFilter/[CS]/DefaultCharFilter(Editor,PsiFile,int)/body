{
  myFile=file;
  PsiElement psiElement=file.findElementAt(offset + 1);
  if (psiElement == null && offset > 0)   psiElement=file.findElementAt(offset - 1);
  if (psiElement != null)   myDelegate=ourCharFilterRegistry.get(psiElement.getLanguage());
  if (myFile instanceof XmlFile && myDelegate == null) {
    boolean inJavaContext=false;
    if (psiElement != null) {
      PsiElement elementToTest=psiElement;
      if (elementToTest instanceof PsiWhiteSpace) {
        elementToTest=elementToTest.getParent();
      }
      final Language language=elementToTest.getLanguage();
      if (StdLanguages.JAVA.equals(language) || language.getID().equals("JavaScript")) {
        inJavaContext=true;
      }
    }
    if (!inJavaContext) {
      final PsiElement parentElement=psiElement.getParent() != null ? psiElement.getParent() : null;
      String s;
      final boolean withinTag=parentElement != null && (parentElement instanceof XmlTag || (parentElement instanceof PsiErrorElement && parentElement.getParent() instanceof XmlDocument) || ((parentElement instanceof XmlDocument || parentElement instanceof XmlText) && ((s=psiElement.getText()).equals("<") || s.equals("\""))));
      myDelegate=PsiUtil.isInJspFile(myFile) ? new JspCharFilter(withinTag,editor) : new XmlCharFilter(withinTag,editor);
    }
  }
 else {
    if (psiElement != null && psiElement.getParent() instanceof PsiLiteralExpression) {
      myWithinLiteral=true;
    }
  }
}
