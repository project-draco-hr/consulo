{
  IElementType tokenType=lexer.getTokenType();
  if (tokenType == null) {
    return null;
  }
  CompositeElement type=ASTFactory.composite(JavaElementType.TYPE);
  tokenType=lexer.getTokenType();
  TreeElement refElement;
  if (ElementType.PRIMITIVE_TYPE_BIT_SET.contains(tokenType)) {
    refElement=ParseUtilBase.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER) {
    refElement=parseJavaCodeReference(lexer,eatLastDot,true,allowDiamonds);
  }
 else   if (allowWildcard && lexer.getTokenType() == JavaTokenType.QUEST) {
    return parseWildcardType(lexer);
  }
 else   if (allowDiamonds && lexer.getTokenType() == JavaTokenType.GT) {
    final CompositeElement typeElement=ASTFactory.composite(JavaElementType.TYPE);
    typeElement.rawAddChildren(ASTFactory.composite(JavaElementType.DIAMOND_TYPE));
    return typeElement;
  }
 else {
    return null;
  }
  type.rawAddChildren(refElement);
  CompositeElement arrayTypeElement=ASTFactory.composite(JavaElementType.TYPE);
  while (true) {
    if (lexer.getTokenType() != JavaTokenType.LBRACKET) {
      if (arrayTypeElement.getFirstChildNode() != null) {
        type.rawAddChildren(arrayTypeElement.getFirstChildNode());
        type.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.lbracket")));
        return type;
      }
      break;
    }
    final LexerPosition lbracketPos=lexer.getCurrentPosition();
    TreeElement lbracket=ParseUtilBase.createTokenElement(lexer,myContext.getCharTable());
    lexer.advance();
    if (lexer.getTokenType() != JavaTokenType.RBRACKET) {
      lexer.restore(lbracketPos);
      break;
    }
    if (arrayTypeElement.getFirstChildNode() == null) {
      arrayTypeElement.rawAddChildren(type);
    }
 else {
      arrayTypeElement.getFirstChildNode().rawInsertBeforeMe(type);
    }
    arrayTypeElement.rawAddChildren(lbracket);
    TreeElement rBracket=ParseUtilBase.createTokenElement(lexer,myContext.getCharTable());
    arrayTypeElement.rawAddChildren(rBracket);
    lexer.advance();
    type=arrayTypeElement;
    arrayTypeElement=ASTFactory.composite(JavaElementType.TYPE);
  }
  return type;
}
