{
  String port=myPort.getText().trim();
  if (port.length() > 0) {
    try {
      int intPort=Integer.parseInt(port);
      if (intPort <= 0)       throw new InputException(com.intellij.CvsBundle.message("error.message.invalid.port.value",port),myPort);
    }
 catch (    NumberFormatException ex) {
      throw new InputException(com.intellij.CvsBundle.message("error.message.invalid.port.value",port),myPort);
    }
  }
  CvsMethod cvsMethod=(CvsMethod)myMethods.getSelectedItem();
  String user=checkedField(myUser,com.intellij.CvsBundle.message("configure.root.field.name.user"),cvsMethod.hasUserValue());
  String host=checkedField(myHost,com.intellij.CvsBundle.message("configure.root.field.name.host"),cvsMethod.hasHostValue());
  String repository=checkedField(myRepository,com.intellij.CvsBundle.message("configure.root.field.name.repository"),true);
  return CvsRootConfiguration.createStringRepresentationOn(cvsMethod,user,host,port,repository);
}
