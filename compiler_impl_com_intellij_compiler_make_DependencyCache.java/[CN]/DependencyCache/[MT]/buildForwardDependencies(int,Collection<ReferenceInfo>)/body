{
  final Cache cache=getCache();
  final int genericSignature=cache.getGenericSignature(classQName);
  if (genericSignature != -1) {
    final String genericClassSignature=resolve(genericSignature);
    final int[] bounds=findBounds(genericClassSignature);
    for (    int boundClassQName : bounds) {
      cache.addClassReferencer(boundClassQName,classQName);
      cache.addReferencedClass(classQName,boundClassQName);
    }
  }
  buildAnnotationDependencies(classQName,cache.getRuntimeVisibleAnnotations(classQName));
  buildAnnotationDependencies(classQName,cache.getRuntimeInvisibleAnnotations(classQName));
  for (  final ReferenceInfo refInfo : references) {
    final int declaringClassName=getActualDeclaringClassForReference(refInfo);
    if (declaringClassName == Cache.UNKNOWN) {
      continue;
    }
    if (refInfo instanceof MemberReferenceInfo) {
      final MemberInfo memberInfo=((MemberReferenceInfo)refInfo).getMemberInfo();
      if (memberInfo instanceof FieldInfo) {
        cache.addFieldReferencer(declaringClassName,memberInfo.getName(),classQName);
      }
 else       if (memberInfo instanceof MethodInfo) {
        cache.addMethodReferencer(declaringClassName,memberInfo.getName(),memberInfo.getDescriptor(),classQName);
      }
 else {
        LOG.error("Unknown member info class: " + memberInfo.getClass().getName());
      }
    }
 else {
      cache.addClassReferencer(declaringClassName,classQName);
    }
    cache.addReferencedClass(classQName,declaringClassName);
  }
  final SymbolTable symbolTable=getSymbolTable();
  for (  final FieldInfo fieldInfo : cache.getFields(classQName)) {
    buildAnnotationDependencies(classQName,fieldInfo.getRuntimeVisibleAnnotations());
    buildAnnotationDependencies(classQName,fieldInfo.getRuntimeInvisibleAnnotations());
    String className=MakeUtil.parseObjectType(symbolTable.getSymbol(fieldInfo.getDescriptor()),0);
    if (className == null) {
      continue;
    }
    final int cls=symbolTable.getId(className);
    cache.addClassReferencer(cls,classQName);
    cache.addReferencedClass(classQName,cls);
  }
  for (  final MethodInfo methodInfo : cache.getMethods(classQName)) {
    buildAnnotationDependencies(classQName,methodInfo.getRuntimeVisibleAnnotations());
    buildAnnotationDependencies(classQName,methodInfo.getRuntimeInvisibleAnnotations());
    buildAnnotationDependencies(classQName,methodInfo.getRuntimeVisibleParameterAnnotations());
    buildAnnotationDependencies(classQName,methodInfo.getRuntimeInvisibleParameterAnnotations());
    if (methodInfo.isConstructor()) {
      continue;
    }
    final String returnTypeClassName=MakeUtil.parseObjectType(methodInfo.getReturnTypeDescriptor(symbolTable),0);
    if (returnTypeClassName != null) {
      final int returnTypeClassQName=symbolTable.getId(returnTypeClassName);
      cache.addClassReferencer(returnTypeClassQName,classQName);
      cache.addReferencedClass(classQName,returnTypeClassQName);
    }
    String[] parameterSignatures=CacheUtils.getParameterSignatures(methodInfo,symbolTable);
    for (    String parameterSignature : parameterSignatures) {
      String paramClassName=MakeUtil.parseObjectType(parameterSignature,0);
      if (paramClassName != null) {
        final int paramClassId=symbolTable.getId(paramClassName);
        cache.addClassReferencer(paramClassId,classQName);
        cache.addReferencedClass(classQName,paramClassId);
      }
    }
  }
}
