{
  if (myClassesWithOverrideAnnotatedMethods == null) {
    final CacheCorruptedException[] ex=new CacheCorruptedException[]{null};
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        myClassesWithOverrideAnnotatedMethods=new TIntHashSet();
        myClassesForAnonymousWithOverrideAnnotatedMethods=new TIntHashSet();
        final PsiClass overrideClass=PsiManager.getInstance(project).findClass(Override.class.getName(),GlobalSearchScope.allScope(project));
        if (overrideClass != null) {
          final Query<PsiMember> query=AnnotatedMembersSearch.search(overrideClass);
          query.forEach(new Processor<PsiMember>(){
            public boolean process(            final PsiMember psiMember){
              try {
                final PsiClass aClass=psiMember.getContainingClass();
                if (aClass == null) {
                  return true;
                }
                final PsiClass topLevelClass=getTopLevelClass(aClass);
                final String qualifiedName=topLevelClass.getQualifiedName();
                if (qualifiedName != null) {
                  if (aClass.equals(topLevelClass)) {
                    myClassesWithOverrideAnnotatedMethods.add(mySymbolTable.getId(qualifiedName));
                  }
 else {
                    myClassesForAnonymousWithOverrideAnnotatedMethods.add(mySymbolTable.getId(qualifiedName));
                  }
                }
                return true;
              }
 catch (              CacheCorruptedException e) {
                ex[0]=e;
                return false;
              }
            }
          }
);
        }
      }
    }
);
    if (ex[0] != null) {
      throw ex[0];
    }
  }
  if (myClassesWithOverrideAnnotatedMethods.contains(qName)) {
    return true;
  }
  String qualifiedName=resolve(qName);
  int dollarIndex=qualifiedName.lastIndexOf('$');
  while (dollarIndex > 0) {
    qualifiedName=qualifiedName.substring(0,dollarIndex);
    final int qNameId=mySymbolTable.getId(qualifiedName);
    if (myClassesForAnonymousWithOverrideAnnotatedMethods.contains(qNameId)) {
      return true;
    }
    dollarIndex=qualifiedName.lastIndexOf('$');
  }
  return false;
}
