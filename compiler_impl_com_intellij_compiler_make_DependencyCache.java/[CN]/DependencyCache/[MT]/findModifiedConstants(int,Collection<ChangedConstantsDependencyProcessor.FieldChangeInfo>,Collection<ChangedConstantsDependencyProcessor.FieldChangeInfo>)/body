{
  int[] fields=getCache().getFieldIds(getCache().getClassDeclarationId(qName));
  for (  final int field : fields) {
    final int oldFlags=getCache().getFieldFlags(field);
    if (ClsUtil.isStatic(oldFlags) && ClsUtil.isFinal(oldFlags)) {
      int newField=CacheUtils.findFieldByName(getNewClassesCache(),getNewClassesCache().getClassDeclarationId(qName),getCache().getFieldName(field));
      if (newField == Cache.UNKNOWN) {
        if (!ConstantValue.EMPTY_CONSTANT_VALUE.equals(getCache().getFieldConstantValue(field))) {
          removedConstants.add(new ChangedConstantsDependencyProcessor.FieldChangeInfo(getCache().createFieldInfo(field)));
        }
      }
 else {
        final boolean visibilityRestricted=MakeUtil.isMoreAccessible(oldFlags,getNewClassesCache().getFieldFlags(newField));
        if (!getCache().getFieldConstantValue(field).equals(getNewClassesCache().getFieldConstantValue(newField)) || visibilityRestricted) {
          changedConstants.add(new ChangedConstantsDependencyProcessor.FieldChangeInfo(getCache().createFieldInfo(field),visibilityRestricted));
        }
      }
    }
  }
}
