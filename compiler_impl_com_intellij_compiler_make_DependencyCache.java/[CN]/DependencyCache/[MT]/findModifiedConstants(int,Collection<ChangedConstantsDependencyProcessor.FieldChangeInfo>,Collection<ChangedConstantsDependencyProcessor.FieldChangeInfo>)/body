{
  final Cache cache=getCache();
  int[] fields=cache.getFieldIds(cache.getClassDeclarationId(qName));
  for (  final int field : fields) {
    final int oldFlags=cache.getFieldFlags(field);
    if (ClsUtil.isStatic(oldFlags) && ClsUtil.isFinal(oldFlags)) {
      final Cache newClassesCache=getNewClassesCache();
      int newField=newClassesCache.findFieldByName(newClassesCache.getClassDeclarationId(qName),cache.getFieldName(field));
      if (newField == Cache.UNKNOWN) {
        if (!ConstantValue.EMPTY_CONSTANT_VALUE.equals(cache.getFieldConstantValue(field))) {
          removedConstants.add(new ChangedConstantsDependencyProcessor.FieldChangeInfo(cache.createFieldInfo(field)));
        }
      }
 else {
        final boolean visibilityRestricted=MakeUtil.isMoreAccessible(oldFlags,newClassesCache.getFieldFlags(newField));
        if (!cache.getFieldConstantValue(field).equals(newClassesCache.getFieldConstantValue(newField)) || visibilityRestricted) {
          changedConstants.add(new ChangedConstantsDependencyProcessor.FieldChangeInfo(cache.createFieldInfo(field),visibilityRestricted));
        }
      }
    }
  }
}
