{
  if (annotations == null || annotations.length == 0) {
    return;
  }
  final Cache cache=getCache();
  final int classId=cache.getClassId(classQName);
  for (  AnnotationConstantValue annotation : annotations) {
    final int annotationQName=annotation.getAnnotationQName();
    final int annotationDeclarationId=cache.getClassDeclarationId(annotationQName);
    cache.addClassReferencer(annotationDeclarationId,classQName);
    cache.addReferencedClass(classId,annotationQName);
    final AnnotationNameValuePair[] memberValues=annotation.getMemberValues();
    for (    final AnnotationNameValuePair nameValuePair : memberValues) {
      final int[] annotationMembers=cache.findMethodsByName(annotationDeclarationId,nameValuePair.getName());
      for (      int annotationMember : annotationMembers) {
        cache.addMethodReferencer(annotationMember,classQName);
      }
    }
  }
}
