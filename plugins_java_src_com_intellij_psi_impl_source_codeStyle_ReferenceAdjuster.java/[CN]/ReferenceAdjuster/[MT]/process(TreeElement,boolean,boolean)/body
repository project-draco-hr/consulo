{
  IElementType elementType=element.getElementType();
  if ((elementType == JavaElementType.JAVA_CODE_REFERENCE || elementType == JavaElementType.REFERENCE_EXPRESSION) && !isAnnotated(element)) {
    IElementType parentType=element.getTreeParent().getElementType();
    if (elementType == JavaElementType.JAVA_CODE_REFERENCE || incompleteCode || parentType == JavaElementType.REFERENCE_EXPRESSION || parentType == JavaElementType.METHOD_REF_EXPRESSION) {
      PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)element.getPsi();
      PsiReferenceParameterList parameterList=ref.getParameterList();
      if (parameterList != null) {
        PsiTypeElement[] typeParameters=parameterList.getTypeParameterElements();
        for (        PsiTypeElement typeParameter : typeParameters) {
          process((TreeElement)typeParameter.getNode(),addImports,incompleteCode);
        }
      }
      boolean rightKind=true;
      if (elementType == JavaElementType.JAVA_CODE_REFERENCE) {
        int kind=((PsiJavaCodeReferenceElementImpl)element).getKind();
        rightKind=kind == PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND || kind == PsiJavaCodeReferenceElementImpl.CLASS_OR_PACKAGE_NAME_KIND;
      }
      if (rightKind) {
        boolean isInsideDocComment=TreeUtil.findParent(element,JavaDocElementType.DOC_COMMENT) != null;
        boolean isShort=!ref.isQualified();
        if (!makeFQ(isInsideDocComment)) {
          if (isShort)           return element;
        }
        PsiElement refElement;
        if (!incompleteCode) {
          refElement=ref.resolve();
        }
 else {
          PsiResolveHelper helper=JavaPsiFacade.getInstance(element.getManager().getProject()).getResolveHelper();
          refElement=helper.resolveReferencedClass(((SourceJavaCodeReference)element).getClassNameText(),ref);
        }
        if (refElement instanceof PsiClass) {
          PsiClass psiClass=(PsiClass)refElement;
          if (makeFQ(isInsideDocComment)) {
            String qName=psiClass.getQualifiedName();
            if (qName == null)             return element;
            PsiFile file=ref.getContainingFile();
            if (file instanceof PsiJavaFile) {
              if (ImportHelper.isImplicitlyImported(qName,(PsiJavaFile)file)) {
                if (isShort)                 return element;
                return (TreeElement)makeShortReference((CompositeElement)element,psiClass,addImports);
              }
              String thisPackageName=((PsiJavaFile)file).getPackageName();
              if (ImportHelper.hasPackage(qName,thisPackageName)) {
                if (!isShort) {
                  return (TreeElement)makeShortReference((CompositeElement)element,psiClass,addImports);
                }
              }
            }
            return (TreeElement)replaceReferenceWithFQ(element,psiClass);
          }
 else {
            int oldLength=element.getTextLength();
            TreeElement treeElement=(TreeElement)makeShortReference((CompositeElement)element,psiClass,addImports);
            if (treeElement.getTextLength() == oldLength && psiClass.getContainingClass() != null) {
              PsiElement qualifier=ref.getQualifier();
              if (qualifier instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)qualifier).resolve() instanceof PsiClass) {
                process((TreeElement)qualifier.getNode(),addImports,incompleteCode);
              }
            }
            return treeElement;
          }
        }
      }
    }
  }
  for (TreeElement child=element.getFirstChildNode(); child != null; child=child.getTreeNext()) {
    child=process(child,addImports,incompleteCode);
  }
  return element;
}
