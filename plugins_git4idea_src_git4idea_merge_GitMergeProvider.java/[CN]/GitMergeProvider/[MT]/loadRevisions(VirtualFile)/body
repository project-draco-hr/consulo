{
  final MergeData mergeData=new MergeData();
  if (file == null)   return mergeData;
  final VirtualFile root=GitUtil.getGitRoot(file);
  final FilePath path=VcsUtil.getFilePath(file.getPath());
  VcsRunnable runnable=new VcsRunnable(){
    @SuppressWarnings({"ConstantConditions"}) public void run() throws VcsException {
      GitFileRevision original=new GitFileRevision(myProject,path,new GitRevisionNumber(":" + ORIGINAL_REVISION_NUM));
      GitFileRevision current=new GitFileRevision(myProject,path,new GitRevisionNumber(":" + yoursRevision(root)));
      GitFileRevision last=new GitFileRevision(myProject,path,new GitRevisionNumber(":" + theirsRevision(root)));
      try {
        try {
          mergeData.ORIGINAL=original.getContent();
        }
 catch (        Exception ex) {
          mergeData.ORIGINAL=file.contentsToByteArray();
        }
        mergeData.CURRENT=loadRevisionCatchingErrors(current);
        mergeData.LAST=loadRevisionCatchingErrors(last);
        mergeData.LAST_REVISION_NUMBER=findLastRevisionNumber(root);
      }
 catch (      IOException e) {
        throw new IllegalStateException("Failed to load file content",e);
      }
    }
  }
;
  VcsUtil.runVcsProcessWithProgress(runnable,GitBundle.message("merge.load.files"),false,myProject);
  return mergeData;
}
