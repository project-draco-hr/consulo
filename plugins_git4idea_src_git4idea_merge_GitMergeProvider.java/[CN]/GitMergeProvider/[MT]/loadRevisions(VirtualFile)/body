{
  final MergeData mergeData=new MergeData();
  if (file == null)   return mergeData;
  final FilePath path=VcsUtil.getFilePath(file.getPath());
  VcsRunnable runnable=new VcsRunnable(){
    @SuppressWarnings({"ConstantConditions"}) public void run() throws VcsException {
      GitContentRevision original=new GitContentRevision(path,new GitRevisionNumber(":" + ORIGINAL_REVNUM),myProject,file.getCharset());
      GitContentRevision current=new GitContentRevision(path,new GitRevisionNumber(":" + YOURS_REVNUM),myProject,file.getCharset());
      GitContentRevision last=new GitContentRevision(path,new GitRevisionNumber(":" + THEIRS_REVNUM),myProject,file.getCharset());
      final String encoding=file.getCharset().name();
      try {
        mergeData.ORIGINAL=original.getContent().getBytes(encoding);
        mergeData.CURRENT=current.getContent().getBytes(encoding);
        mergeData.LAST=last.getContent().getBytes(encoding);
        mergeData.LAST_REVISION_NUMBER=new GitRevisionNumber(THEIRS_REVISION);
      }
 catch (      UnsupportedEncodingException ex) {
        throw new IllegalStateException("Unexpected encoding failure file ecoding does not exists: " + encoding,ex);
      }
    }
  }
;
  VcsUtil.runVcsProcessWithProgress(runnable,GitBundle.message("merge.load.files"),false,myProject);
  return mergeData;
}
