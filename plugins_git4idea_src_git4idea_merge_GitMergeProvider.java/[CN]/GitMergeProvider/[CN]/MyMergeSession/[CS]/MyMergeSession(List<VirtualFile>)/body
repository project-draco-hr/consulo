{
  try {
    for (    Map.Entry<VirtualFile,List<VirtualFile>> e : GitUtil.sortFilesByGitRoot(filesToMerge).entrySet()) {
      Map<String,Conflict> cs=new HashMap<String,Conflict>();
      VirtualFile root=e.getKey();
      List<VirtualFile> files=e.getValue();
      GitSimpleHandler h=new GitSimpleHandler(myProject,root,GitCommand.LS_FILES);
      h.setStdoutSuppressed(true);
      h.setSilent(true);
      h.addParameters("--exclude-standard","--unmerged","-t","-z");
      h.endOptions();
      String output=h.run();
      StringScanner s=new StringScanner(output);
      while (s.hasMoreData()) {
        if (!"M".equals(s.spaceToken())) {
          s.boundedToken('\u0000');
          continue;
        }
        s.spaceToken();
        s.spaceToken();
        int source=Integer.parseInt(s.tabToken());
        String file=s.boundedToken('\u0000');
        Conflict c=cs.get(file);
        if (c == null) {
          c=new Conflict();
          c.myRoot=root;
          cs.put(file,c);
        }
        if (source == theirsRevision()) {
          c.myStatusTheirs=Conflict.Status.MODIFIED;
        }
 else         if (source == yoursRevision()) {
          c.myStatusYours=Conflict.Status.MODIFIED;
        }
 else         if (source != ORIGINAL_REVISION_NUM) {
          throw new IllegalStateException("Unknown revision " + source + " for the file: "+ file);
        }
      }
      for (      VirtualFile f : files) {
        String path=VcsFileUtil.relativePath(root,f);
        Conflict c=cs.get(path);
        log.assertTrue(c != null,String.format("The conflict not found for the file: %s(%s)%nFull ls-files output: %n%s",f.getPath(),path,output));
        c.myFile=f;
        if (c.myStatusTheirs == null) {
          c.myStatusTheirs=Conflict.Status.DELETED;
        }
        if (c.myStatusYours == null) {
          c.myStatusYours=Conflict.Status.DELETED;
        }
        myConflicts.put(f,c);
      }
    }
  }
 catch (  VcsException ex) {
    throw new IllegalStateException("The git operation should not fail in this context",ex);
  }
}
