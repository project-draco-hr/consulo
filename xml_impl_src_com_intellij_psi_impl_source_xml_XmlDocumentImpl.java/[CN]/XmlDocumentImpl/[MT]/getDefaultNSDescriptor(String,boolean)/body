{
  final ConcurrentHashMap<String,CachedValue<XmlNSDescriptor>> defaultDescriptorsCache;
  if (strict) {
    defaultDescriptorsCache=myDefaultDescriptorsCacheStrict;
  }
 else {
    defaultDescriptorsCache=myDefaultDescriptorsCacheNotStrict;
  }
  if (defaultDescriptorsCache.containsKey(namespace)) {
    final CachedValue<XmlNSDescriptor> cachedValue=defaultDescriptorsCache.get(namespace);
    if (cachedValue != NULL) {
      return cachedValue.getValue();
    }
 else {
      return null;
    }
  }
  final XmlNSDescriptor defaultNSDescriptor;
  try {
    final CachedValueImpl<XmlNSDescriptor> value=new CachedValueImpl<XmlNSDescriptor>(getManager(),new CachedValueProvider<XmlNSDescriptor>(){
      public Result<XmlNSDescriptor> compute(){
        final XmlNSDescriptor defaultNSDescriptorInner=getDefaultNSDescriptorInner(namespace,strict);
        if (isGeneratedFromDtd(defaultNSDescriptorInner)) {
          return new Result<XmlNSDescriptor>(defaultNSDescriptorInner,XmlDocumentImpl.this,ExternalResourceManager.getInstance());
        }
        return new Result<XmlNSDescriptor>(defaultNSDescriptorInner,defaultNSDescriptorInner != null ? defaultNSDescriptorInner.getDependences() : ExternalResourceManager.getInstance());
      }
    }
,false);
    defaultNSDescriptor=value.getValue();
    defaultDescriptorsCache.put(namespace,value == null ? NULL : value);
  }
 catch (  ProcessCanceledException ex) {
    defaultDescriptorsCache.remove(namespace);
    throw ex;
  }
  return defaultNSDescriptor;
}
