{
  LOG.assertTrue(searchScope != null);
  if (baseClass instanceof PsiAnonymousClass)   return true;
  if (baseClass.hasModifierProperty(PsiModifier.FINAL))   return true;
  if ("java.lang.Object".equals(baseClass.getQualifiedName())) {
  }
  final PsiManager psiManager=PsiManager.getInstance(baseClass.getProject());
  DirectClassInheritorsSearch.search(baseClass).forEach(new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      if (checkInheritance || (checkDeep && !(candidate instanceof PsiAnonymousClass))) {
        if (!candidate.isInheritor(baseClass,false))         return true;
        if (!processed.add(candidate))         return true;
      }
      if (candidate instanceof PsiAnonymousClass) {
        if (!consumer.process(candidate))         return false;
      }
 else {
        if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
          if (searchScope instanceof GlobalSearchScope) {
            String qName=candidate.getQualifiedName();
            if (qName != null) {
              PsiClass candidate1=psiManager.findClass(qName,(GlobalSearchScope)searchScope);
              if (candidate != candidate1)               return true;
            }
          }
          if (!consumer.process(candidate))           return false;
        }
        if (checkDeep) {
          if (!processInheritors(consumer,candidate,searchScope,checkDeep,processed,checkInheritance))           return false;
        }
      }
      return true;
    }
  }
);
  return true;
}
