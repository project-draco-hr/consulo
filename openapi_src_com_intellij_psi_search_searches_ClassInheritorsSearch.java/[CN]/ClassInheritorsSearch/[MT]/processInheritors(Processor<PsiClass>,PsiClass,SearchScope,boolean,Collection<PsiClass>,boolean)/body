{
  LOG.assertTrue(searchScope != null);
  if (baseClass instanceof PsiAnonymousClass)   return true;
  if (baseClass.hasModifierProperty(PsiModifier.FINAL))   return true;
  if ("java.lang.Object".equals(baseClass.getQualifiedName())) {
  }
  final PsiManager psiManager=PsiManager.getInstance(baseClass.getProject());
  DirectClassInheritorsSearch.search(baseClass).forEach(new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      final Ref<Boolean> result=new Ref<Boolean>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (checkInheritance || (checkDeep && !(candidate instanceof PsiAnonymousClass))) {
            if (!candidate.isInheritor(baseClass,false) || !processed.add(candidate)) {
              result.set(true);
              return;
            }
          }
          if (candidate instanceof PsiAnonymousClass) {
            result.set(consumer.process(candidate));
          }
 else           if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
            if (searchScope instanceof GlobalSearchScope) {
              String qName=candidate.getQualifiedName();
              if (qName != null) {
                PsiClass[] candidateClasses=psiManager.findClasses(qName,(GlobalSearchScope)searchScope);
                if (ArrayUtil.find(candidateClasses,candidate) == -1)                 result.set(true);
              }
            }
            if (!consumer.process(candidate))             result.set(false);
          }
        }
      }
);
      if (!result.isNull())       return result.get();
      if (checkDeep) {
        if (!processInheritors(consumer,candidate,searchScope,checkDeep,processed,checkInheritance))         return false;
      }
      return true;
    }
  }
);
  return true;
}
