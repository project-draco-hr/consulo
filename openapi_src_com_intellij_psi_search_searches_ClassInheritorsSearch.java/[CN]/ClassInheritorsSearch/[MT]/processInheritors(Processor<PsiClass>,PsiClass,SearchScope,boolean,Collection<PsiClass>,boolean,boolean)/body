{
  LOG.assertTrue(searchScope != null);
  if (baseClass instanceof PsiAnonymousClass)   return true;
  boolean isFinal=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    public Boolean compute(){
      return Boolean.valueOf(baseClass.hasModifierProperty(PsiModifier.FINAL));
    }
  }
).booleanValue();
  if (isFinal)   return true;
  final PsiManager psiManager=PsiManager.getInstance(baseClass.getProject());
  DirectClassInheritorsSearch.search(baseClass,GlobalSearchScope.allScope(baseClass.getProject()),includeAnonymous).forEach(new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      final Ref<Boolean> result=new Ref<Boolean>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (checkInheritance || (checkDeep && !(candidate instanceof PsiAnonymousClass))) {
            if (!candidate.isInheritor(baseClass,false) || !processed.add(candidate)) {
              result.set(true);
              return;
            }
          }
          if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
            if (candidate instanceof PsiAnonymousClass) {
              result.set(consumer.process(candidate));
            }
 else {
              if (searchScope instanceof GlobalSearchScope) {
                String qName=candidate.getQualifiedName();
                if (qName != null) {
                  PsiClass[] candidateClasses=psiManager.findClasses(qName,(GlobalSearchScope)searchScope);
                  if (ArrayUtil.find(candidateClasses,candidate) == -1)                   result.set(true);
                }
              }
              if (!consumer.process(candidate))               result.set(false);
            }
          }
        }
      }
);
      if (!result.isNull())       return result.get();
      if (checkDeep) {
        if (!processInheritors(consumer,candidate,searchScope,checkDeep,processed,checkInheritance,includeAnonymous))         return false;
      }
      return true;
    }
  }
);
  return true;
}
