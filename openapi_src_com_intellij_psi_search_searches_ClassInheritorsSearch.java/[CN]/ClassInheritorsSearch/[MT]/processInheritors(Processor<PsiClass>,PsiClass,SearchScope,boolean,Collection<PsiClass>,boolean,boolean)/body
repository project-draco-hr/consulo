{
  LOG.assertTrue(searchScope != null);
  if (baseClass instanceof PsiAnonymousClass)   return true;
  if (isFinal(baseClass))   return true;
  final PsiManager psiManager=PsiManager.getInstance(baseClass.getProject());
  final Ref<PsiClass> currentBase=Ref.create(null);
  final Stack<PsiClass> stack=new Stack<PsiClass>();
  final Processor<PsiClass> processor=new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      final Ref<Boolean> result=new Ref<Boolean>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (!processed.add(candidate) || checkInheritance && !candidate.isInheritor(currentBase.get(),false)) {
            result.set(true);
            return;
          }
          if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
            if (candidate instanceof PsiAnonymousClass) {
              result.set(consumer.process(candidate));
            }
 else {
              if (!consumer.process(candidate))               result.set(false);
            }
          }
        }
      }
);
      if (!result.isNull())       return result.get();
      if (checkDeep && !(candidate instanceof PsiAnonymousClass) && !isFinal(candidate)) {
        stack.push(candidate);
      }
      return true;
    }
  }
;
  stack.push(baseClass);
  final GlobalSearchScope scope=GlobalSearchScope.allScope(baseClass.getProject());
  while (!stack.isEmpty()) {
    final PsiClass psiClass=stack.pop();
    currentBase.set(psiClass);
    if (!DirectClassInheritorsSearch.search(psiClass,scope,includeAnonymous).forEach(processor))     return false;
  }
  return true;
}
