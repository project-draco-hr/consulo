{
  DnDSupport.createBuilder(myTree).setBeanProvider(new Function<DnDActionInfo,DnDDragStartBean>(){
    @Override public DnDDragStartBean fun(    DnDActionInfo dnDActionInfo){
      return new DnDDragStartBean(4);
    }
  }
).setTargetChecker(new DnDTargetChecker(){
    @Override public boolean update(    DnDEvent event){
      final Point p=event.getPoint();
      final TreePath path=myTree.getPathForLocation(p.x,p.y);
      if (path != null && path.getPathCount() > 1) {
        final Object o=path.getPath()[1];
        if (o instanceof DefaultMutableTreeNode) {
          final Object obj=((DefaultMutableTreeNode)o).getUserObject();
          if (obj instanceof FavoritesTreeNodeDescriptor) {
            final AbstractTreeNode node=((FavoritesTreeNodeDescriptor)obj).getElement();
            if (node instanceof FavoritesListNode) {
            }
          }
        }
      }
      event.setDropPossible(false,null);
      return false;
    }
  }
).setDropHandler(new DnDDropHandler(){
    @Override public void drop(    DnDEvent event){
    }
  }
).setDisposableParent(myProject).install();
}
