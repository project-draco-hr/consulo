{
  DnDSupport.createBuilder(myTree).setBeanProvider(new Function<DnDActionInfo,DnDDragStartBean>(){
    @Override public DnDDragStartBean fun(    DnDActionInfo info){
      final TreePath path=myTree.getPathForLocation(info.getPoint().x,info.getPoint().y);
      if (path != null) {
        return new DnDDragStartBean(path);
      }
      return new DnDDragStartBean("");
    }
  }
).setTargetChecker(new DnDTargetChecker(){
    @Override public boolean update(    DnDEvent event){
      final Object obj=event.getAttachedObject();
      if (obj instanceof TreePath) {
        event.setDropPossible(((TreePath)obj).getPathCount() > 2);
        return true;
      }
      if ("".equals(obj)) {
        event.setDropPossible(false);
        return false;
      }
      final Point p=event.getPoint();
      FavoritesListNode node=findFavoritesListNode(p);
      if (node != null) {
        TreePath pathToList=myTree.getPath(node);
        while (pathToList != null) {
          final Object pathObj=pathToList.getLastPathComponent();
          if (pathObj instanceof DefaultMutableTreeNode) {
            final Object userObject=((DefaultMutableTreeNode)pathObj).getUserObject();
            if (userObject instanceof FavoritesTreeNodeDescriptor) {
              if (((FavoritesTreeNodeDescriptor)userObject).getElement() == node) {
                break;
              }
            }
          }
          pathToList=pathToList.getParentPath();
        }
        if (pathToList != null) {
          Rectangle bounds=myTree.getPathBounds(pathToList);
          if (bounds != null) {
            event.setHighlighting(new RelativeRectangle(myTree,bounds),DnDEvent.DropTargetHighlightingType.RECTANGLE);
          }
        }
        event.setDropPossible(true);
        return true;
      }
      event.setDropPossible(false);
      return false;
    }
  }
).setDropHandler(new DnDDropHandler(){
    @Override public void drop(    DnDEvent event){
      final FavoritesListNode node=findFavoritesListNode(event.getPoint());
      final FavoritesManager mgr=FavoritesManager.getInstance(myProject);
      if (node == null)       return;
      final String listTo=node.getValue();
      final Object obj=event.getAttachedObject();
      if (obj instanceof TreePath) {
        final TreePath path=(TreePath)obj;
        final String listFrom=getListNodeFromPath(path).getValue();
        if (listTo.equals(listFrom))         return;
        if (path.getPathCount() == 3) {
          final AbstractTreeNode abstractTreeNode=((FavoritesTreeNodeDescriptor)((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject()).getElement();
          final Object element=abstractTreeNode.getValue();
          mgr.removeRoot(listFrom,Collections.singletonList(abstractTreeNode));
          mgr.addRoots(listTo,null,element);
        }
      }
 else       if (obj instanceof TransferableWrapper) {
        final PsiElement[] elements=((TransferableWrapper)obj).getPsiElements();
        if (elements != null && elements.length > 0) {
          ArrayList<AbstractTreeNode> nodes=new ArrayList<AbstractTreeNode>();
          for (          PsiElement element : elements) {
            final Collection<AbstractTreeNode> tmp=AddToFavoritesAction.createNodes(myProject,null,element,true,FavoritesManager.getInstance(myProject).getViewSettings());
            nodes.addAll(tmp);
            mgr.addRoots(listTo,nodes);
          }
          myTreeBuilder.select(nodes.toArray(),null);
        }
      }
    }
  }
).setDisposableParent(myProject).install();
}
