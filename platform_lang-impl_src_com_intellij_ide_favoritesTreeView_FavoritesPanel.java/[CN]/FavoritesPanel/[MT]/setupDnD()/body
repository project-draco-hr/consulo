{
  DnDSupport.createBuilder(myTree).setBeanProvider(new Function<DnDActionInfo,DnDDragStartBean>(){
    @Override public DnDDragStartBean fun(    DnDActionInfo info){
      final TreePath path=myTree.getPathForLocation(info.getPoint().x,info.getPoint().y);
      if (path != null) {
        return new DnDDragStartBean(path);
      }
      return new DnDDragStartBean("");
    }
  }
).setTargetChecker(new DnDTargetChecker(){
    @Override public boolean update(    DnDEvent event){
      final Object obj=event.getAttachedObject();
      if ("".equals(obj)) {
        event.setDropPossible(false);
        return false;
      }
      if (obj instanceof TreePath && ((TreePath)obj).getPathCount() <= 2) {
        event.setDropPossible(false);
        return true;
      }
      FavoritesListNode node=findFavoritesListNode(event.getPoint());
      highlight(node,event);
      if (node != null) {
        event.setDropPossible(true);
        return true;
      }
      event.setDropPossible(false);
      return false;
    }
  }
).setDropHandler(new DnDDropHandler(){
    @Override public void drop(    DnDEvent event){
      final FavoritesListNode node=findFavoritesListNode(event.getPoint());
      final FavoritesManager mgr=FavoritesManager.getInstance(myProject);
      if (node == null)       return;
      final String listTo=node.getValue();
      final Object obj=event.getAttachedObject();
      if (obj instanceof TreePath) {
        final TreePath path=(TreePath)obj;
        final String listFrom=getListNodeFromPath(path).getValue();
        if (listTo.equals(listFrom))         return;
        if (path.getPathCount() == 3) {
          final AbstractTreeNode abstractTreeNode=((FavoritesTreeNodeDescriptor)((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject()).getElement();
          Object element=abstractTreeNode.getValue();
          mgr.removeRoot(listFrom,Collections.singletonList(abstractTreeNode));
          if (element instanceof SmartPsiElementPointer) {
            element=((SmartPsiElementPointer)element).getElement();
          }
          mgr.addRoots(listTo,null,element);
        }
      }
 else       if (obj instanceof TransferableWrapper) {
        dropPsiElements(mgr,listTo,((TransferableWrapper)obj).getPsiElements());
      }
 else       if (obj instanceof DnDNativeTarget.EventInfo) {
        dropPsiElements(mgr,listTo,getPsiFiles(FileCopyPasteUtil.getFileList(((DnDNativeTarget.EventInfo)obj).getTransferable())));
      }
    }
  }
).enableAsNativeTarget().setDisposableParent(myProject).install();
}
