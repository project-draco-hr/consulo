{
  myMap=new PersistentHashMap<Integer,DependenciesSet>(file,new EnumeratorIntegerDescriptor(),new MyDataExternalizer());
  myCache=new SLRUCache<Integer,ReferencerSetHolder>(cacheSize * 2,cacheSize){
    @NotNull public ReferencerSetHolder createValue(    Integer key){
      return new ReferencerSetHolder(key);
    }
    protected void onDropFromCache(    Integer key,    final ReferencerSetHolder holder){
      if (key.equals(myKeyToRemove) || !holder.isDirty()) {
        return;
      }
      try {
        if (holder.isDataLoaded() || !myMap.containsMapping(key)) {
          myMap.put(key,new DependenciesSet(holder.getData()));
        }
 else {
          myMap.appendData(key,new PersistentHashMap.ValueDataAppender(){
            public void append(            final DataOutput out) throws IOException {
              final Ref<IOException> exception=new Ref<IOException>(null);
              holder.myRemoveRequested.forEach(new TIntProcedure(){
                public boolean execute(                int qName){
                  try {
                    out.writeInt(-qName);
                    return true;
                  }
 catch (                  IOException e) {
                    exception.set(e);
                  }
                  return false;
                }
              }
);
              final IOException _ex=exception.get();
              if (_ex != null) {
                throw _ex;
              }
              for (              ReferencerItem item : holder.myAdded) {
                item.save(out);
              }
            }
          }
);
        }
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
;
}
