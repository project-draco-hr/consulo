{
  final TIntHashSet classes=new TIntHashSet();
  final Map<Dependency.FieldRef,TIntHashSet> fieldsMap=new HashMap<Dependency.FieldRef,TIntHashSet>();
  final Map<Dependency.MethodRef,TIntHashSet> methodsMap=new HashMap<Dependency.MethodRef,TIntHashSet>();
  for (  ReferencerItem item : ds.set) {
    if (item instanceof FieldReferencerItem) {
      final Dependency.FieldRef ref=new Dependency.FieldRef(((FieldReferencerItem)item).name);
      TIntHashSet referencers=fieldsMap.get(ref);
      if (referencers == null) {
        referencers=new TIntHashSet();
        fieldsMap.put(ref,referencers);
      }
      referencers.add(item.qName);
    }
 else     if (item instanceof MethodReferencerItem) {
      final MethodReferencerItem _item=(MethodReferencerItem)item;
      final Dependency.MethodRef ref=new Dependency.MethodRef(_item.name,_item.descriptor);
      TIntHashSet referencers=methodsMap.get(ref);
      if (referencers == null) {
        referencers=new TIntHashSet();
        methodsMap.put(ref,referencers);
      }
      referencers.add(item.qName);
    }
 else {
      classes.add(item.qName);
    }
  }
  out.writeInt(classes.size());
  for (TIntIterator it=classes.iterator(); it.hasNext(); ) {
    out.writeInt(it.next());
  }
  out.writeInt(fieldsMap.size());
  for (  Map.Entry<Dependency.FieldRef,TIntHashSet> entry : fieldsMap.entrySet()) {
    out.writeInt(entry.getKey().name);
    final TIntHashSet referencers=entry.getValue();
    out.writeInt(referencers.size());
    for (TIntIterator rit=referencers.iterator(); rit.hasNext(); ) {
      out.writeInt(rit.next());
    }
  }
  out.writeInt(methodsMap.size());
  for (  Map.Entry<Dependency.MethodRef,TIntHashSet> entry : methodsMap.entrySet()) {
    final Dependency.MethodRef ref=entry.getKey();
    out.writeInt(ref.name);
    out.writeInt(ref.descriptor);
    final TIntHashSet referencers=entry.getValue();
    out.writeInt(referencers.size());
    for (TIntIterator rit=referencers.iterator(); rit.hasNext(); ) {
      out.writeInt(rit.next());
    }
  }
}
