{
  final PsiStatement initialization=forStatement.getInitialization();
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  if (declaredElements.length != 1) {
    return false;
  }
  final PsiElement declaredElement=declaredElements[0];
  if (!(declaredElement instanceof PsiLocalVariable)) {
    return false;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)declaredElement;
  if (variable == null) {
    return false;
  }
  final PsiType variableType=variable.getType();
  if (!(variableType instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)variableType;
  final PsiClass declaredClass=classType.resolve();
  if (declaredClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(declaredClass,"java.util.Iterator")) {
    return false;
  }
  final PsiExpression initialValue=variable.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  final String initialCallName=initialMethodExpression.getReferenceName();
  if (!HardcodedMethodConstants.ITERATOR.equals(initialCallName)) {
    return false;
  }
  final String iteratorName=variable.getName();
  final PsiExpression condition=forStatement.getCondition();
  return isHasNext(condition,iteratorName);
}
