{
  final PsiStatement initialization=forStatement.getInitialization();
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  for (  PsiElement declaredElement : declaredElements) {
    if (!(declaredElement instanceof PsiVariable)) {
      continue;
    }
    final PsiVariable variable=(PsiVariable)declaredElement;
    final PsiType variableType=variable.getType();
    if (!(variableType instanceof PsiClassType)) {
      continue;
    }
    final PsiClassType classType=(PsiClassType)variableType;
    final PsiClass declaredClass=classType.resolve();
    if (declaredClass == null) {
      continue;
    }
    if (!ClassUtils.isSubclass(declaredClass,CommonClassNames.JAVA_UTIL_ITERATOR)) {
      continue;
    }
    final PsiExpression initialValue=variable.getInitializer();
    if (initialValue == null) {
      continue;
    }
    if (!(initialValue instanceof PsiMethodCallExpression)) {
      continue;
    }
    final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
    final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
    final String initialCallName=initialMethodExpression.getReferenceName();
    if (!HardcodedMethodConstants.ITERATOR.equals(initialCallName)) {
      continue;
    }
    final PsiExpression condition=forStatement.getCondition();
    if (isHasNext(condition,variable)) {
      return true;
    }
  }
  return false;
}
