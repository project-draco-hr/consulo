{
  final XDebuggerTree watchTree=myTreePanel.getTree();
  final Alarm quitePeriod=new Alarm();
  final Alarm editAlarm=new Alarm();
  final ClickListener mouseListener=new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      if (!SwingUtilities.isLeftMouseButton(event) || ((event.getModifiers() & (InputEvent.SHIFT_MASK | InputEvent.ALT_MASK | InputEvent.CTRL_MASK| InputEvent.META_MASK)) != 0)) {
        return false;
      }
      boolean sameRow=isAboveSelectedItem(event,watchTree);
      final AnAction editWatchAction=ActionManager.getInstance().getAction(XDebuggerActions.XEDIT_WATCH);
      Presentation presentation=editWatchAction.getTemplatePresentation().clone();
      DataContext context=DataManager.getInstance().getDataContext(watchTree);
      final AnActionEvent actionEvent=new AnActionEvent(null,context,"WATCH_TREE",presentation,ActionManager.getInstance(),0);
      Runnable runnable=new Runnable(){
        @Override public void run(){
          editWatchAction.actionPerformed(actionEvent);
        }
      }
;
      if (sameRow && editAlarm.isEmpty() && quitePeriod.isEmpty()) {
        editAlarm.addRequest(runnable,UIUtil.getMultiClickInterval());
      }
 else {
        editAlarm.cancelAllRequests();
      }
      return false;
    }
  }
;
  final ClickListener mouseEmptySpaceListener=new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      if (!isAboveSelectedItem(event,watchTree)) {
        myRootNode.addNewWatch();
        return true;
      }
      return false;
    }
  }
;
  ListenerUtil.addClickListener(watchTree,mouseListener);
  ListenerUtil.addClickListener(watchTree,mouseEmptySpaceListener);
  final FocusListener focusListener=new FocusListener(){
    @Override public void focusGained(    @NotNull FocusEvent e){
      quitePeriod.addRequest(EmptyRunnable.getInstance(),UIUtil.getMultiClickInterval());
    }
    @Override public void focusLost(    @NotNull FocusEvent e){
      editAlarm.cancelAllRequests();
    }
  }
;
  ListenerUtil.addFocusListener(watchTree,focusListener);
  final TreeSelectionListener selectionListener=new TreeSelectionListener(){
    @Override public void valueChanged(    @NotNull TreeSelectionEvent e){
      quitePeriod.addRequest(EmptyRunnable.getInstance(),UIUtil.getMultiClickInterval());
    }
  }
;
  watchTree.addTreeSelectionListener(selectionListener);
  myDisposables.add(new Disposable(){
    @Override public void dispose(){
      ListenerUtil.removeClickListener(watchTree,mouseListener);
      ListenerUtil.removeClickListener(watchTree,mouseEmptySpaceListener);
      ListenerUtil.removeFocusListener(watchTree,focusListener);
      watchTree.removeTreeSelectionListener(selectionListener);
    }
  }
);
}
