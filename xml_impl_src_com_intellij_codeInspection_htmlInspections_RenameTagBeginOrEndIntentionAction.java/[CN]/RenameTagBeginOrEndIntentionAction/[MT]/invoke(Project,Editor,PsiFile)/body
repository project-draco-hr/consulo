{
  final int offset=editor.getCaretModel().getOffset();
  PsiElement psiElement=file.findElementAt(offset);
  if (psiElement == null || !psiElement.isValid())   return;
  if (!CodeInsightUtilBase.prepareFileForWrite(psiElement.getContainingFile()))   return;
  if (psiElement instanceof XmlToken) {
    final IElementType tokenType=((XmlToken)psiElement).getTokenType();
    if (tokenType != XmlTokenType.XML_NAME) {
      if (tokenType == XmlTokenType.XML_TAG_END) {
        psiElement=psiElement.getPrevSibling();
        if (psiElement == null)         return;
      }
    }
    PsiElement target=null;
    final String text=psiElement.getText();
    if (!myTargetName.equals(text)) {
      target=psiElement;
    }
 else {
      PsiElement parent=psiElement.getParent();
      if (parent instanceof PsiErrorElement) {
        parent=parent.getParent();
      }
      if (parent instanceof XmlTag) {
        if (myStart) {
          target=XmlTagUtil.getStartTagNameElement((XmlTag)parent);
        }
 else {
          target=XmlTagUtil.getEndTagNameElement((XmlTag)parent);
          if (target == null) {
            final PsiErrorElement errorElement=PsiTreeUtil.getChildOfType(parent,PsiErrorElement.class);
            target=XmlWrongClosingTagNameInspection.findEndTagName(errorElement);
          }
        }
      }
    }
    if (target != null) {
      final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
      if (document != null) {
        final TextRange textRange=target.getTextRange();
        document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),myTargetName);
      }
    }
  }
}
