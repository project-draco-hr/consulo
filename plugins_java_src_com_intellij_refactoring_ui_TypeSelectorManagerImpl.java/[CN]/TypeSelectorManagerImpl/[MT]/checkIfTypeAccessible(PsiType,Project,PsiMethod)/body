{
  PsiClass parentClass=containingMethod.getContainingClass();
  final PsiClass typeClass=PsiUtil.resolveClassInType(type);
  if (typeClass != null) {
    if (typeClass instanceof PsiTypeParameter) {
      if (ArrayUtil.find(parentClass.getTypeParameters(),typeClass) == -1) {
        return PsiType.getJavaLangObject(PsiManager.getInstance(project),GlobalSearchScope.allScope(project));
      }
    }
 else     if (PsiTreeUtil.isAncestor(containingMethod,typeClass,true)) {
      final int nextTypeIdx=ArrayUtil.find(myTypesForAll,type) + 1;
      if (nextTypeIdx < myTypesForAll.length) {
        return checkIfTypeAccessible(myTypesForAll[nextTypeIdx],project,containingMethod);
      }
    }
  }
  return type;
}
