{
  if (myHighlightMode == HighlightMode.NO_HIGHLIGHTING) {
    return Collections.emptyList();
  }
  text1=StringUtil.notNullize(text1);
  text2=StringUtil.notNullize(text2);
  if (text1.isEmpty() || text2.isEmpty()) {
    return new DummyDiffFragmentsProcessor().process(text1,text2);
  }
  DiffString diffText1=DiffString.create(text1);
  DiffString diffText2=DiffString.create(text2);
  DiffFragment[] woFormattingBlocks=myDiffPolicy.buildFragments(diffText1,diffText2);
  DiffFragment[] step1lineFragments=new DiffCorrection.TrueLineBlocks(myComparisonPolicy).correctAndNormalize(woFormattingBlocks);
  ArrayList<LineFragment> lineBlocks=new DiffFragmentsProcessor().process(step1lineFragments);
  int badLinesCount=0;
  if (myHighlightMode == HighlightMode.BY_WORD) {
    for (    LineFragment lineBlock : lineBlocks) {
      if (lineBlock.isOneSide() || lineBlock.isEqual())       continue;
      try {
        DiffString subText1=lineBlock.getText(diffText1,FragmentSide.SIDE1);
        DiffString subText2=lineBlock.getText(diffText2,FragmentSide.SIDE2);
        ArrayList<LineFragment> subFragments=findSubFragments(subText1,subText2);
        lineBlock.setChildren(new ArrayList<Fragment>(subFragments));
        lineBlock.adjustTypeFromChildrenTypes();
      }
 catch (      FilesTooBigForDiffException ignore) {
        badLinesCount++;
        if (badLinesCount > FilesTooBigForDiffException.MAX_BAD_LINES)         break;
      }
    }
  }
  return lineBlocks;
}
