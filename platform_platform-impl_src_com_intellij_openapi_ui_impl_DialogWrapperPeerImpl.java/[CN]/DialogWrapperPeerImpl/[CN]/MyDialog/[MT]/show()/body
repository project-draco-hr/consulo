{
  myFocusTrackback=new FocusTrackback(getDialogWrapper(),getParent(),true);
  final DialogWrapper dialogWrapper=getDialogWrapper();
  pack();
  Dimension packedSize=getSize();
  Dimension minSize=getMinimumSize();
  setSize(Math.max(packedSize.width,minSize.width),Math.max(packedSize.height,minSize.height));
  setSize((int)(getWidth() * dialogWrapper.getHorizontalStretch()),(int)(getHeight() * dialogWrapper.getVerticalStretch()));
  myDimensionServiceKey=dialogWrapper.getDimensionKey();
  Point location=null;
  if (myDimensionServiceKey != null) {
    final Project projectGuess=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(this));
    location=DimensionService.getInstance().getLocation(myDimensionServiceKey,projectGuess);
    Dimension size=DimensionService.getInstance().getSize(myDimensionServiceKey,projectGuess);
    if (size != null) {
      myInitialSize=new Dimension(size);
      _setSizeForLocation(myInitialSize.width,myInitialSize.height,location);
    }
  }
  if (myInitialSize == null) {
    myInitialSize=getSize();
  }
  if (location == null) {
    location=dialogWrapper.getInitialLocation();
  }
  if (location != null) {
    setLocation(location);
  }
 else {
    setLocationRelativeTo(getOwner());
  }
  final Rectangle bounds=getBounds();
  ScreenUtil.fitToScreen(bounds);
  setBounds(bounds);
  addWindowListener(new WindowAdapter(){
    @Override public void windowActivated(    WindowEvent e){
      final DialogWrapper wrapper=getDialogWrapper();
      if (wrapper != null && myFocusTrackback != null) {
        myFocusTrackback.cleanParentWindow();
        myFocusTrackback.registerFocusComponent(new FocusTrackback.ComponentQuery(){
          public Component getComponent(){
            return wrapper.getPreferredFocusedComponent();
          }
        }
);
      }
    }
    @Override public void windowDeactivated(    WindowEvent e){
      if (!isModal()) {
        final Ref<IdeFocusManager> focusManager=new Ref<IdeFocusManager>(null);
        Project project=getProject();
        if (project != null && !project.isDisposed()) {
          focusManager.set(getFocusManager());
          focusManager.get().doWhenFocusSettlesDown(new Runnable(){
            public void run(){
              disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get());
            }
          }
);
        }
 else {
          disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get());
        }
      }
    }
    @Override public void windowOpened(    WindowEvent e){
      if (!SystemInfo.isMacOSLion)       return;
      Window window=e.getWindow();
      if (window instanceof Dialog) {
        ID _native=MacUtil.findWindowForTitle(((Dialog)window).getTitle());
        if (_native != null && _native.intValue() > 0) {
          Foundation.invoke(_native,"setCollectionBehavior:",1 << 8);
        }
      }
    }
  }
);
  if (Registry.is("actionSystem.fixLostTyping")) {
    final IdeEventQueue queue=IdeEventQueue.getInstance();
    if (queue != null) {
      queue.getKeyEventDispatcher().resetState();
    }
    if (myProject != null) {
      Project project=myProject.get();
      if (project != null && !project.isDisposed() && project.isInitialized()) {
        IdeFocusManager.findInstanceByComponent(this).requestFocus(new MyFocusCommand(dialogWrapper),true);
      }
    }
  }
  if (SystemInfo.isMac && myProject != null && Registry.is("ide.mac.fix.dialog.showing") && !dialogWrapper.isModalProgress()) {
    final IdeFrame frame=WindowManager.getInstance().getIdeFrame(myProject.get());
    AppIcon.getInstance().requestFocus(frame);
  }
  setBackground(UIUtil.getPanelBackground());
  super.show();
}
