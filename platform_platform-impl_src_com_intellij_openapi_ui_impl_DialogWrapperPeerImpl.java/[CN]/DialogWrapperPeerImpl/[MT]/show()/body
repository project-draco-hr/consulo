{
  final ActionCallback result=new ActionCallback();
  LOG.assertTrue(EventQueue.isDispatchThread(),"Access is allowed from event dispatch thread only");
  final AnCancelAction anCancelAction=new AnCancelAction();
  final JRootPane rootPane=getRootPane();
  anCancelAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0)),rootPane);
  myDisposeActions.add(new Runnable(){
    public void run(){
      anCancelAction.unregisterCustomShortcutSet(rootPane);
    }
  }
);
  if (!myCanBeParent && myWindowManager != null) {
    myWindowManager.doNotSuggestAsParent(myDialog.getWindow());
  }
  final CommandProcessorEx commandProcessor=ApplicationManager.getApplication() != null ? (CommandProcessorEx)CommandProcessor.getInstance() : null;
  final boolean appStarted=commandProcessor != null;
  if (myDialog.isModal() && !isProgressDialog()) {
    if (appStarted) {
      commandProcessor.enterModal();
      LaterInvocator.enterModal(myDialog);
    }
  }
  if (appStarted) {
    hidePopupsIfNeeded();
  }
  try {
    myDialog.show();
  }
  finally {
    if (myDialog.isModal() && !isProgressDialog()) {
      if (appStarted) {
        commandProcessor.leaveModal();
        LaterInvocator.leaveModal(myDialog);
      }
    }
    myDialog.getFocusManager().doWhenFocusSettlesDown(new Runnable(){
      public void run(){
        result.setDone();
      }
    }
);
  }
  return result;
}
