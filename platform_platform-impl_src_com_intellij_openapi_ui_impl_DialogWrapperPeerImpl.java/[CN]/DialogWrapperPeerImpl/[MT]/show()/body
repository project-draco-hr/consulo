{
  LOG.assertTrue(EventQueue.isDispatchThread(),"Access is allowed from event dispatch thread only");
  if (myTypeAheadCallback != null) {
    IdeFocusManager.getInstance(myProject).typeAheadUntil(myTypeAheadCallback);
  }
  LOG.assertTrue(EventQueue.isDispatchThread(),"Access is allowed from event dispatch thread only");
  final ActionCallback result=new ActionCallback();
  final AnCancelAction anCancelAction=new AnCancelAction();
  final JRootPane rootPane=getRootPane();
  anCancelAction.registerCustomShortcutSet(CommonShortcuts.ESCAPE,rootPane);
  myDisposeActions.add(new Runnable(){
    @Override public void run(){
      anCancelAction.unregisterCustomShortcutSet(rootPane);
    }
  }
);
  if (!myCanBeParent && myWindowManager != null) {
    myWindowManager.doNotSuggestAsParent(myDialog.getWindow());
  }
  final CommandProcessorEx commandProcessor=ApplicationManager.getApplication() != null ? (CommandProcessorEx)CommandProcessor.getInstance() : null;
  final boolean appStarted=commandProcessor != null;
  boolean changeModalityState=appStarted && myDialog.isModal() && !isProgressDialog();
  if (changeModalityState) {
    commandProcessor.enterModal();
    LaterInvocator.enterModal(myDialog);
  }
  if (appStarted) {
    hidePopupsIfNeeded();
  }
  try {
    myDialog.show();
  }
  finally {
    if (changeModalityState) {
      commandProcessor.leaveModal();
      LaterInvocator.leaveModal(myDialog);
    }
    myDialog.getFocusManager().doWhenFocusSettlesDown(result.createSetDoneRunnable());
  }
  return result;
}
