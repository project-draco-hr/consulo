{
  LinkedHashSet<PsiType> set=new LinkedHashSet<PsiType>();
  for (  ExpectedTypeInfo info : infos) {
    ExpectedTypeInfoImpl infoImpl=(ExpectedTypeInfoImpl)info;
    if (infoImpl.getDefaultType() instanceof PsiClassType) {
      JavaResolveResult result=((PsiClassType)infoImpl.getDefaultType()).resolveGenerics();
      PsiClass aClass=(PsiClass)result.getElement();
      if (aClass instanceof PsiAnonymousClass) {
        processType(((PsiAnonymousClass)aClass).getBaseClassType(),visitor,set);
        ((PsiAnonymousClass)aClass).getBaseClassType().accept(visitor);
      }
 else {
        processType(infoImpl.getDefaultType(),visitor,set);
      }
    }
 else {
      processType(infoImpl.getDefaultType(),visitor,set);
    }
    if (infoImpl.getKind() == ExpectedTypeInfo.TYPE_OR_SUPERTYPE) {
      processAllSuperTypes(infoImpl.getType(),visitor,project,set);
    }
 else     if (infoImpl.getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE) {
      if (infoImpl.getType() instanceof PsiPrimitiveType) {
        processPrimitiveTypeAndSubtypes((PsiPrimitiveType)infoImpl.getType(),visitor,set);
      }
    }
  }
  return set.toArray(new PsiType[set.size()]);
}
