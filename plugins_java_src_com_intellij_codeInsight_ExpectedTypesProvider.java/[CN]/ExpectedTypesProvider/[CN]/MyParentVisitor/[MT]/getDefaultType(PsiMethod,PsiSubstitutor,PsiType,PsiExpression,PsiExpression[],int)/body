{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return parameterType;
  @NonNls final String name=method.getName();
  if ("contains".equals(name) || "remove".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_UTIL_COLLECTION,new NullableFunction<PsiClass,PsiType>(){
      @Override public PsiType fun(      @NotNull final PsiClass psiClass){
        return getTypeParameterValue(psiClass,containingClass,substitutor,0);
      }
    }
);
    if (type != null)     return type;
  }
  if ("containsKey".equals(name) || "remove".equals(name) || "get".equals(name)|| "containsValue".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_UTIL_MAP,new NullableFunction<PsiClass,PsiType>(){
      @Override public PsiType fun(      @NotNull final PsiClass psiClass){
        return getTypeParameterValue(psiClass,containingClass,substitutor,name.equals("containsValue") ? 1 : 0);
      }
    }
);
    if (type != null)     return type;
  }
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(containingClass.getProject());
  if ("equals".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_LANG_OBJECT,new NullableFunction<PsiClass,PsiType>(){
      @Override public PsiType fun(      final PsiClass psiClass){
        final PsiElement parent=argument.getParent().getParent();
        if (parent instanceof PsiMethodCallExpression) {
          final PsiMethodCallExpression expression=(PsiMethodCallExpression)parent;
          final PsiExpression qualifierExpression=expression.getMethodExpression().getQualifierExpression();
          if (qualifierExpression != null) {
            return qualifierExpression.getType();
          }
          final PsiClass aClass=PsiTreeUtil.getContextOfType(parent,PsiClass.class,true);
          if (aClass != null) {
            return factory.createType(aClass);
          }
        }
        return null;
      }
    }
);
    if (type != null)     return type;
  }
  int argCount=Math.max(index + 1,args.length);
  if ("assertEquals".equals(name) || "assertSame".equals(name) && method.getParameterList().getParametersCount() == argCount) {
    if (argCount == 2 || argCount == 3 && method.getParameterList().getParameters()[0].getType().equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
      int other=index == argCount - 1 ? index - 1 : index + 1;
      if (args.length > other) {
        ExpectedTypeInfo info=getEqualsType(args[other]);
        if (info != null && parameterType.isAssignableFrom(info.getDefaultType())) {
          return info.getDefaultType();
        }
      }
    }
  }
  if ("Logger".equals(containingClass.getName()) || "Log".equals(containingClass.getName())) {
    if (parameterType instanceof PsiClassType) {
      PsiType typeArg=PsiUtil.substituteTypeParameter(parameterType,CommonClassNames.JAVA_LANG_CLASS,0,true);
      if (typeArg != null && TypeConversionUtil.erasure(typeArg).equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) {
        PsiClass placeClass=PsiTreeUtil.getContextOfType(argument,PsiClass.class);
        PsiClass classClass=((PsiClassType)parameterType).resolve();
        if (placeClass != null && classClass != null) {
          return factory.createType(classClass,factory.createType(placeClass));
        }
      }
    }
  }
  return parameterType;
}
