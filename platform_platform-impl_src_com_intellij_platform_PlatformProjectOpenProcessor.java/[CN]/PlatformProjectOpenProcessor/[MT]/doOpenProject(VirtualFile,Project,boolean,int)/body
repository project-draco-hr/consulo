{
  VirtualFile baseDir=virtualFile;
  if (!baseDir.isDirectory()) {
    baseDir=virtualFile.getParent();
    while (baseDir != null) {
      if (new File(baseDir.getPath(),".idea").exists()) {
        break;
      }
      baseDir=baseDir.getParent();
    }
    if (baseDir == null) {
      baseDir=virtualFile.getParent();
    }
  }
  final File projectDir=new File(baseDir.getPath(),".idea");
  Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  if (!forceOpenInNewFrame && openProjects.length > 0) {
    int exitCode=ProjectUtil.confirmOpenNewProject(false);
    if (exitCode == 0) {
      if (!ProjectUtil.closeAndDispose(projectToClose != null ? projectToClose : openProjects[openProjects.length - 1]))       return null;
    }
 else     if (exitCode != 1) {
      return null;
    }
  }
  final ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  Project project=null;
  if (projectDir.exists()) {
    try {
      for (      ProjectOpenProcessor processor : ProjectOpenProcessor.EXTENSION_POINT_NAME.getExtensions()) {
        processor.refreshProjectFiles(projectDir);
      }
      project=((ProjectManagerImpl)projectManager).convertAndLoadProject(baseDir.getPath());
    }
 catch (    Exception e) {
    }
  }
 else {
    projectDir.mkdirs();
  }
  if (project == null)   return null;
  ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir);
  for (  DirectoryProjectConfigurator configurator : Extensions.getExtensions(DirectoryProjectConfigurator.EP_NAME)) {
    try {
      configurator.configureProject(project,baseDir);
    }
 catch (    Exception e) {
      LOG.error(e);
    }
  }
  openFileFromCommandLine(project,virtualFile,line);
  projectManager.openProject(project);
  return project;
}
