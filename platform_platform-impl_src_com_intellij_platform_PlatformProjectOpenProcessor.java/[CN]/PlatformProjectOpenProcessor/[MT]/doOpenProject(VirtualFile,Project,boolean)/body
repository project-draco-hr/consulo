{
  VirtualFile baseDir=virtualFile.isDirectory() ? virtualFile : virtualFile.getParent();
  final File projectDir=new File(baseDir.getPath(),".idea");
  Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  if (!forceOpenInNewFrame && openProjects.length > 0) {
    final GeneralSettings settings=GeneralSettings.getInstance();
    int exitCode;
    if (settings.getConfirmOpenNewProject() < 0) {
      exitCode=Messages.showDialog(IdeBundle.message("prompt.open.project.in.new.frame"),IdeBundle.message("title.open.project"),new String[]{IdeBundle.message("button.newframe"),IdeBundle.message("button.existingframe"),CommonBundle.getCancelButtonText()},1,0,Messages.getQuestionIcon(),new ProjectNewWindowDoNotAskOption());
    }
 else {
      exitCode=settings.getConfirmOpenNewProject();
    }
    if (exitCode == 1) {
      if (!ProjectUtil.closeProject(projectToClose != null ? projectToClose : openProjects[openProjects.length - 1]))       return null;
    }
 else     if (exitCode != 0) {
      return null;
    }
  }
  final ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  Project project=null;
  Ref<Boolean> cancelled=new Ref<Boolean>();
  if (projectDir.exists()) {
    try {
      project=((ProjectManagerImpl)projectManager).loadProjectWithProgress(baseDir.getPath(),cancelled);
    }
 catch (    Exception e) {
    }
  }
 else {
    projectDir.mkdirs();
  }
  if (project == null && cancelled.isNull()) {
    project=projectManager.newProject(projectDir.getParentFile().getName(),projectDir.getParent(),true,false);
  }
  if (project == null)   return null;
  ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir);
  for (  DirectoryProjectConfigurator configurator : Extensions.getExtensions(DirectoryProjectConfigurator.EP_NAME)) {
    try {
      configurator.configureProject(project,baseDir);
    }
 catch (    Exception e) {
      LOG.error(e);
    }
  }
  openFileFromCommandLine(project,virtualFile);
  projectManager.openProject(project);
  return project;
}
