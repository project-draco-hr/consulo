{
  StringBuffer resultingWords=new StringBuffer();
  int currentWord=0;
  final Pair<int[],int[]> wordIndicies=calculateWordPositions(propertyName,propertyWords);
  for (Iterator<Map.Entry<Pair<Integer,Integer>,String>> iterator=replacements.entrySet().iterator(); iterator.hasNext(); ) {
    final Map.Entry<Pair<Integer,Integer>,String> entry=iterator.next();
    final int first=entry.getKey().getFirst().intValue();
    final int last=entry.getKey().getSecond().intValue();
    for (int i=currentWord; i < first; i++) {
      resultingWords.append(calculateBetween(wordIndicies,i,propertyName));
      final String propertyWord=propertyWords[i];
      appendWord(resultingWords,propertyWord);
    }
    resultingWords.append(calculateBetween(wordIndicies,first,propertyName));
    appendWord(resultingWords,entry.getValue());
    currentWord=last + 1;
  }
  for (; currentWord < propertyWords.length; currentWord++) {
    resultingWords.append(calculateBetween(wordIndicies,currentWord,propertyName));
    appendWord(resultingWords,propertyWords[currentWord]);
  }
  resultingWords.append(calculateBetween(wordIndicies,propertyWords.length,propertyName));
  if (resultingWords.length() == 0)   return propertyName;
  return decapitalizeProbably(resultingWords.toString(),propertyName);
}
