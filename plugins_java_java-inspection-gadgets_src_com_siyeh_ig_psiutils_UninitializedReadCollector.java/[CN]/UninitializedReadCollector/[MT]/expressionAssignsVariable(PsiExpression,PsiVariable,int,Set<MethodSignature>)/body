{
  if (counter != stamp) {
    return true;
  }
  if (expression == null) {
    return false;
  }
  if (expression instanceof PsiThisExpression || expression instanceof PsiLiteralExpression || expression instanceof PsiSuperExpression|| expression instanceof PsiClassObjectAccessExpression) {
    return false;
  }
 else   if (expression instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
    return referenceExpressionAssignsVariable(referenceExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)expression;
    return methodCallAssignsVariable(callExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)expression;
    return newExpressionAssignsVariable(newExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiArrayInitializerExpression) {
    final PsiArrayInitializerExpression array=(PsiArrayInitializerExpression)expression;
    final PsiExpression[] initializers=array.getInitializers();
    for (    final PsiExpression initializer : initializers) {
      if (expressionAssignsVariable(initializer,variable,stamp,checkedMethods)) {
        return true;
      }
    }
    return false;
  }
 else   if (expression instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression typeCast=(PsiTypeCastExpression)expression;
    final PsiExpression operand=typeCast.getOperand();
    return expressionAssignsVariable(operand,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiArrayAccessExpression) {
    final PsiArrayAccessExpression accessExpression=(PsiArrayAccessExpression)expression;
    final PsiExpression arrayExpression=accessExpression.getArrayExpression();
    final PsiExpression indexExpression=accessExpression.getIndexExpression();
    return expressionAssignsVariable(arrayExpression,variable,stamp,checkedMethods) || expressionAssignsVariable(indexExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    final PsiExpression operand=prefixExpression.getOperand();
    return expressionAssignsVariable(operand,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiPostfixExpression) {
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)expression;
    final PsiExpression operand=postfixExpression.getOperand();
    return expressionAssignsVariable(operand,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final PsiExpression[] operands=polyadicExpression.getOperands();
    for (    PsiExpression operand : operands) {
      if (expressionAssignsVariable(operand,variable,stamp,checkedMethods)) {
        return true;
      }
    }
    return false;
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditional=(PsiConditionalExpression)expression;
    final PsiExpression condition=conditional.getCondition();
    if (expressionAssignsVariable(condition,variable,stamp,checkedMethods)) {
      return true;
    }
    final PsiExpression thenExpression=conditional.getThenExpression();
    final PsiExpression elseExpression=conditional.getElseExpression();
    return expressionAssignsVariable(thenExpression,variable,stamp,checkedMethods) && expressionAssignsVariable(elseExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignment=(PsiAssignmentExpression)expression;
    return assignmentExpressionAssignsVariable(assignment,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression innerExpression=parenthesizedExpression.getExpression();
    return expressionAssignsVariable(innerExpression,variable,stamp,checkedMethods);
  }
 else   if (expression instanceof PsiInstanceOfExpression) {
    final PsiInstanceOfExpression instanceOfExpression=(PsiInstanceOfExpression)expression;
    final PsiExpression operand=instanceOfExpression.getOperand();
    return expressionAssignsVariable(operand,variable,stamp,checkedMethods);
  }
 else {
    return false;
  }
}
