{
  mySettingsStack=new SettingsStack(CodeStyleSchemes.getInstance(),EditorSettingsExternalizable.getInstance());
  myPanel=new JPanel(new GridBagLayout());
  Insets stdInsets=new Insets(2,2,2,2);
  myCombo=new JComboBox();
  mySaveAsButton=new JButton(ApplicationBundle.message("button.save.as"));
  myDeleteButton=new JButton(ApplicationBundle.message("button.delete"));
  int row=0;
  myPanel.add(new JLabel(ApplicationBundle.message("editbox.scheme.name")),new GridBagConstraints(0,row,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,stdInsets,0,0));
  myPanel.add(myCombo,new GridBagConstraints(1,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,70,0));
  myPanel.add(mySaveAsButton,new GridBagConstraints(2,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,0,0));
  myPanel.add(myDeleteButton,new GridBagConstraints(3,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,0,0));
  final SchemesManager<CodeStyleScheme,CodeStyleSchemeImpl> schemesManager=getSchemesManager();
  if (schemesManager.isImportExportAvailable()) {
    myExportButton=new JButton("Share...");
    myExportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        CodeStyleScheme selected=getSelectedScheme();
        ExportSchemeAction.doExport((CodeStyleSchemeImpl)selected,schemesManager);
      }
    }
);
    myExportButton.setMnemonic('S');
    myPanel.add(myExportButton,new GridBagConstraints(4,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,0,0));
    JButton importButton=new JButton("Import Shared...");
    importButton.setMnemonic('I');
    importButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        SchemesToImportPopup<CodeStyleScheme,CodeStyleSchemeImpl> popup=new SchemesToImportPopup<CodeStyleScheme,CodeStyleSchemeImpl>(myPanel){
          protected void onSchemeSelected(          final CodeStyleSchemeImpl scheme){
            if (scheme != null) {
              mySettingsStack.addScheme(scheme);
              ((DefaultComboBoxModel)myCombo.getModel()).addElement(scheme);
              myCombo.setSelectedItem(scheme);
            }
          }
        }
;
        popup.show(schemesManager,getSchemes());
      }
    }
);
    myPanel.add(importButton,new GridBagConstraints(5,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,0,0));
  }
  myPanel.add(new JPanel(),new GridBagConstraints(6,row,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,stdInsets,0,0));
  row++;
  myPanel.add(mySettingsStack,new GridBagConstraints(0,row,7,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,stdInsets,0,0));
  myCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          onCombo();
        }
      }
);
    }
  }
);
  mySaveAsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onSaveAs();
    }
  }
);
  myDeleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onDelete();
    }
  }
);
  reset();
  myPanel.setPreferredSize(new Dimension(800,650));
  myGlassPanel=new GlassPanel(myPanel);
  final Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext());
  if (project == null || !CodeStyleSettingsManager.getInstance(project).USE_PER_PROJECT_SETTINGS)   return myPanel;
  final CardLayout cards=new CardLayout();
  myRootPanel=new JPanel(cards);
  myRootPanel.add(ApplicationBundle.message("title.settings"),myPanel);
  final JPanel warningPanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.CENTER));
  final JLabel label=new JLabel(ApplicationBundle.message("html.project.uses.own.code.style"));
  label.setIcon(IconLoader.getIcon("/general/tip.png"));
  label.setHorizontalAlignment(SwingConstants.CENTER);
  warningPanel.add(label);
  JButton editGlobal=new JButton(ApplicationBundle.message("title.edit.global.settings"));
  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.CENTER));
  buttonPanel.add(editGlobal);
  warningPanel.add(buttonPanel);
  editGlobal.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      cards.show(myRootPanel,ApplicationBundle.message("title.settings"));
    }
  }
);
  myRootPanel.add(ApplicationBundle.message("title.warning"),warningPanel);
  cards.show(myRootPanel,ApplicationBundle.message("title.warning"));
  return myRootPanel;
}
