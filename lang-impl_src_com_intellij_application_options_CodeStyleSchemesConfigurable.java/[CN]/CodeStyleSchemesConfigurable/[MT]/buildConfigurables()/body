{
  myPanels=new ArrayList<CodeStyleMainPanel>();
  myPanels.add(new CodeStyleMainPanel(ensureModel(),new CodeStyleSettingsPanelFactory(){
    public NewCodeStyleSettingsPanel createPanel(    final CodeStyleScheme scheme){
      return new NewCodeStyleSettingsPanel(new CodeStyleAbstractConfigurable(scheme.getCodeStyleSettings(),ensureModel().getCloneSettings(scheme),ApplicationBundle.message("title.general")){
        protected CodeStyleAbstractPanel createPanel(        final CodeStyleSettings settings){
          return new GeneralCodeStylePanel(settings);
        }
        public Icon getIcon(){
          return FileTypes.PLAIN_TEXT.getIcon();
        }
        public String getHelpTopic(){
          return "reference.settingsdialog.IDE.globalcodestyle.general";
        }
      }
);
    }
  }
));
  for (  final CodeStyleSettingsProvider provider : Extensions.getExtensions(CodeStyleSettingsProvider.EXTENSION_POINT_NAME)) {
    myPanels.add(new CodeStyleMainPanel(ensureModel(),new CodeStyleSettingsPanelFactory(){
      public NewCodeStyleSettingsPanel createPanel(      final CodeStyleScheme scheme){
        return new NewCodeStyleSettingsPanel(provider.createSettingsPage(scheme.getCodeStyleSettings(),ensureModel().getCloneSettings(scheme)));
      }
    }
));
  }
  Configurable[] result=new Configurable[myPanels.size()];
  for (int i=0; i < result.length; i++) {
    final CodeStyleMainPanel panel=myPanels.get(i);
    result[i]=new SearchableConfigurable(){
      private boolean myInitialResetInvoked=false;
      @Nls public String getDisplayName(){
        return panel.getDisplayName();
      }
      public Icon getIcon(){
        return null;
      }
      public String getHelpTopic(){
        return panel.getHelpTopic();
      }
      public JComponent createComponent(){
        return panel;
      }
      public boolean isModified(){
        boolean someSchemeModified=panel.isModified();
        if (someSchemeModified) {
          myApplyCompleted=false;
          myRevertCompleted=false;
        }
        return someSchemeModified;
      }
      public void apply() throws ConfigurationException {
        CodeStyleSchemesConfigurable.this.apply();
      }
      public void reset(){
        if (!myInitialResetInvoked) {
          try {
            CodeStyleSchemesConfigurable.this.reset();
          }
  finally {
            myInitialResetInvoked=true;
          }
        }
 else {
          revert();
        }
      }
      public String getId(){
        return "preferences.sourceCode." + getDisplayName();
      }
      public Runnable enableSearch(      final String option){
        return null;
      }
      public void disposeUIResources(){
        CodeStyleSchemesConfigurable.this.disposeUIResources();
      }
    }
;
  }
  return result;
}
