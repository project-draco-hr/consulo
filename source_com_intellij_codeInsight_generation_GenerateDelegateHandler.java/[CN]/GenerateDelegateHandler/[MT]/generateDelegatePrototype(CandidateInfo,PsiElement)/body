{
  PsiMethod method=GenerateMembersUtil.substituteGenericMethod((PsiMethod)methodCandidate.getElement(),methodCandidate.getSubstitutor());
  clearMethod(method);
  clearModifiers(method);
  StringBuffer call=new StringBuffer();
  PsiModifierList modifierList=null;
  if (method.getReturnType() != PsiType.VOID) {
    call.append("return ");
  }
  if (target instanceof PsiField) {
    PsiField field=(PsiField)target;
    modifierList=field.getModifierList();
    final String name=field.getName();
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    for (    PsiParameter parameter : parameters) {
      if (name.equals(parameter.getName())) {
        call.append("this.");
        break;
      }
    }
    call.append(name);
    call.append(".");
  }
 else   if (target instanceof PsiMethod) {
    PsiMethod m=(PsiMethod)target;
    modifierList=m.getModifierList();
    call.append(m.getName());
    call.append("().");
  }
  call.append(method.getName());
  call.append("(");
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (int j=0; j < parameters.length; j++) {
    PsiParameter parameter=parameters[j];
    if (j > 0)     call.append(",");
    call.append(parameter.getName());
  }
  call.append(");");
  PsiManager psiManager=method.getManager();
  PsiStatement stmt=psiManager.getElementFactory().createStatementFromText(call.toString(),method);
  stmt=(PsiStatement)CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt);
  method.getBody().add(stmt);
  if (modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) {
    method.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
  }
  method.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
  return method;
}
