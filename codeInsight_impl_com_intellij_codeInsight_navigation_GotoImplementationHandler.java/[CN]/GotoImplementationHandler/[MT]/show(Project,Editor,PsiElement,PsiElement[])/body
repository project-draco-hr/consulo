{
  if (elements == null || elements.length == 0) {
    return;
  }
  if (elements.length == 1) {
    Navigatable descriptor=EditSourceUtil.getDescriptor(elements[0]);
    if (descriptor != null && descriptor.canNavigate()) {
      descriptor.navigate(true);
    }
  }
 else {
    PsiElementListCellRenderer renderer=sourceElement instanceof PsiMethod ? new MethodCellRenderer(!PsiUtil.allMethodsHaveSameSignature(Arrays.asList(elements).toArray(PsiMethod.EMPTY_ARRAY))) : (PsiElementListCellRenderer)new PsiClassListCellRenderer();
    Arrays.sort(elements,renderer.getComparator());
    final JList list=new JList(elements);
    list.setCellRenderer(renderer);
    renderer.installSpeedSearch(list);
    final Runnable runnable=new Runnable(){
      public void run(){
        int[] ids=list.getSelectedIndices();
        if (ids == null || ids.length == 0)         return;
        Object[] selectedElements=list.getSelectedValues();
        for (        Object element : selectedElements) {
          Navigatable descriptor=EditSourceUtil.getDescriptor((PsiElement)element);
          if (descriptor != null && descriptor.canNavigate()) {
            descriptor.navigate(true);
          }
        }
      }
    }
;
    JBPopupFactory.getInstance().createListPopupBuilder().setList(list).setTitle(CodeInsightBundle.message("goto.implementation.chooser.title",((PsiNamedElement)sourceElement).getName(),elements.length)).setItemChoosenCallback(runnable).createPopup().showInBestPositionFor(editor);
  }
}
