{
  if (myTabs.getPresentation().getTabsPosition() != JBTabsPosition.top && myTabs.getPresentation().getTabsPosition() != JBTabsPosition.bottom) {
    super.layoutLabelsAndGhosts(data);
    return;
  }
  int maxGridSize=0;
  int spentLength=0;
  int lengthEstimation=0;
  int[] lengths=new int[data.toLayout.size()];
  List<TabInfo> layout=data.toLayout;
  for (int i=0; i < layout.size(); i++) {
    final TabLabel label=myTabs.myInfo2Label.get(layout.get(i));
    if (maxGridSize == 0) {
      maxGridSize=GraphicsUtil.stringWidth("m",label.getLabelComponent().getFont()) * myTabs.tabMSize();
    }
    int lengthIncrement=label.getPreferredSize().width;
    lengths[i]=lengthIncrement;
    lengthEstimation+=lengthIncrement;
  }
  final int extraWidth=data.toFitLength - lengthEstimation;
  Arrays.sort(lengths);
  double acc=0;
  int actualGridSize=0;
  for (int i=0; i < lengths.length; i++) {
    int length=lengths[i];
    acc+=length;
    actualGridSize=(int)Math.min(maxGridSize,(acc + extraWidth) / (i + 1));
    if (i < lengths.length - 1 && actualGridSize < lengths[i + 1])     break;
  }
  for (Iterator<TabInfo> iterator=data.toLayout.iterator(); iterator.hasNext(); ) {
    final TabLabel label=myTabs.myInfo2Label.get(iterator.next());
    label.setActionPanelVisible(true);
    int length;
    int lengthIncrement=label.getPreferredSize().width;
    if (!iterator.hasNext()) {
      length=Math.min(data.toFitLength - spentLength,Math.max(actualGridSize,lengthIncrement));
    }
 else     if (extraWidth <= 0) {
      length=(int)(lengthIncrement * (float)data.toFitLength / lengthEstimation);
    }
 else {
      length=Math.max(lengthIncrement,actualGridSize);
    }
    spentLength+=length + myTabs.getInterTabSpaceLength();
    applyTabLayout(data,label,length,0);
    data.position=(int)label.getBounds().getMaxX() + myTabs.getInterTabSpaceLength();
  }
  for (  TabInfo eachInfo : data.toDrop) {
    JBTabsImpl.resetLayout(myTabs.myInfo2Label.get(eachInfo));
  }
}
