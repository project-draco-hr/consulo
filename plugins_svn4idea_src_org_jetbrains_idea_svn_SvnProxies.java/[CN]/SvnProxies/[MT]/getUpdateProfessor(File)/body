{
  if (myUpdate.get() == null) {
    final MyLearningProxy<SvnUpdateClientI> proxy=new MyLearningProxy<SvnUpdateClientI>(myLocks,file);
    final SvnUpdateClientI learn=proxy.learn(SvnUpdateClientI.class);
    try {
      learn.doUpdate(null,null,false);
      learn.doUpdate(null,null,false,false);
      learn.doUpdate((File[])null,null,null,false,false);
      learn.doUpdate((File[])null,null,null,false,false,false);
      learn.doUpdate((File)null,null,null,false,false);
      learn.doSwitch(null,null,null,false);
      learn.doSwitch(null,null,null,null,false);
      learn.doSwitch(null,null,null,null,false,false);
      learn.doSwitch(null,null,null,null,null,false,false);
      learn.doSwitch(null,null,null,null,null,false,false,false);
      learn.doCheckout(null,null,null,null,false);
    }
 catch (    SVNException e) {
      throw new RuntimeException(e);
    }
    myUpdate.set(proxy);
  }
  return myUpdate.get();
}
