{
  super(new BorderLayout());
  myProject=project;
  myFavoritesTreeStructure=new FavoritesTreeStructure(project);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  root.setUserObject(myFavoritesTreeStructure.getRootElement());
  final DefaultTreeModel treeModel=new DefaultTreeModel(root);
  myTree=new DnDAwareTree(treeModel);
  myBuilder=new FavoritesViewTreeBuilder(myProject,myTree,treeModel,myFavoritesTreeStructure);
  TreeUtil.installActions(myTree);
  UIUtil.setLineStyleAngled(myTree);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setLargeModel(true);
  new TreeSpeedSearch(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myTree.setCellRenderer(new NodeRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        final Object userObject=node.getUserObject();
        if (userObject instanceof FavoritesTreeNodeDescriptor) {
          final FavoritesTreeNodeDescriptor favoritesTreeNodeDescriptor=(FavoritesTreeNodeDescriptor)userObject;
          AbstractTreeNode treeNode=favoritesTreeNodeDescriptor.getElement();
          final ItemPresentation presentation=treeNode.getPresentation();
          String locationString=presentation.getLocationString();
          if (locationString != null && locationString.length() > 0) {
            append(" (" + locationString + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
          }
 else           if (node.getParent() != null && node.getParent().getParent() != null && node.getParent().getParent().getParent() == null) {
            final String location=favoritesTreeNodeDescriptor.getLocation();
            if (location != null && location.length() > 0) {
              append(" (" + location + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
            }
          }
        }
      }
    }
  }
);
  myTreePopupHandler=CustomizationUtil.installPopupHandler(myTree,IdeActions.GROUP_FAVORITES_VIEW_POPUP,ActionPlaces.FAVORITES_VIEW_POPUP);
  EditSourceOnDoubleClickHandler.install(myTree);
  EditSourceOnEnterKeyHandler.install(myTree);
  myCopyPasteDelegator=new CopyPasteDelegator(myProject,this){
    @NotNull protected PsiElement[] getSelectedElements(){
      return getSelectedPsiElements();
    }
  }
;
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTree).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      AddNewFavoritesListAction.doAddNewFavoritesList(myProject);
    }
  }
).setLineBorder(0,0,1,0).setAddActionName("New Favorites List").disableRemoveAction().disableDownAction().disableUpAction().addExtraAction(new DeleteFromFavoritesAction(){
{
      getTemplatePresentation().setIcon(IconUtil.getRemoveRowIcon());
    }
    @Override public ShortcutSet getShortcut(){
      return CustomShortcutSet.fromString("DELETE");
    }
  }
);
  AnAction action=ActionManager.getInstance().getAction(IdeActions.ACTION_NEW_ELEMENT);
  action.registerCustomShortcutSet(action.getShortcutSet(),myTree);
  final JPanel panel=decorator.createPanel();
  panel.setBorder(IdeBorderFactory.createEmptyBorder(0));
  add(panel,BorderLayout.CENTER);
  setBorder(IdeBorderFactory.createEmptyBorder(0));
  myAutoScrollToSourceHandler.install(myTree);
}
