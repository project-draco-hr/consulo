{
  if (PlatformDataKeys.PROJECT.is(dataId)) {
    return myProject;
  }
  if (PlatformDataKeys.NAVIGATABLE.is(dataId)) {
    final FavoritesTreeNodeDescriptor[] selectedNodeDescriptors=getSelectedNodeDescriptors();
    return selectedNodeDescriptors.length == 1 ? selectedNodeDescriptors[0].getElement() : null;
  }
  if (PlatformDataKeys.NAVIGATABLE_ARRAY.is(dataId)) {
    final List<Navigatable> selectedElements=getSelectedElements(Navigatable.class);
    return selectedElements.toArray(new Navigatable[selectedElements.size()]);
  }
  if (PlatformDataKeys.CUT_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (PlatformDataKeys.COPY_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (PlatformDataKeys.PASTE_PROVIDER.is(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (PlatformDataKeys.HELP_ID.is(dataId)) {
    return myHelpId;
  }
  if (LangDataKeys.PSI_ELEMENT.is(dataId)) {
    PsiElement[] elements=getSelectedPsiElements();
    if (elements.length != 1) {
      return null;
    }
    return elements[0] != null && elements[0].isValid() ? elements[0] : null;
  }
  if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
    final PsiElement[] elements=getSelectedPsiElements();
    ArrayList<PsiElement> result=new ArrayList<PsiElement>();
    for (    PsiElement element : elements) {
      if (element.isValid()) {
        result.add(element);
      }
    }
    return result.isEmpty() ? null : result.toArray(new PsiElement[result.size()]);
  }
  if (LangDataKeys.IDE_VIEW.is(dataId)) {
    return myIdeView;
  }
  if (LangDataKeys.TARGET_PSI_ELEMENT.is(dataId)) {
    return null;
  }
  if (LangDataKeys.MODULE_CONTEXT.is(dataId)) {
    Module[] selected=getSelectedModules();
    return selected != null && selected.length == 1 ? selected[0] : null;
  }
  if (LangDataKeys.MODULE_CONTEXT_ARRAY.is(dataId)) {
    return getSelectedModules();
  }
  if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    final Object[] elements=getSelectedNodeElements();
    return elements != null && elements.length >= 1 && elements[0] instanceof Module ? myDeleteModuleProvider : myDeletePSIElementProvider;
  }
  if (ModuleGroup.ARRAY_DATA_KEY.is(dataId)) {
    final List<ModuleGroup> selectedElements=getSelectedElements(ModuleGroup.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new ModuleGroup[selectedElements.size()]);
  }
  if (LibraryGroupElement.ARRAY_DATA_KEY.is(dataId)) {
    final List<LibraryGroupElement> selectedElements=getSelectedElements(LibraryGroupElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new LibraryGroupElement[selectedElements.size()]);
  }
  if (NamedLibraryElement.ARRAY_DATA_KEY.is(dataId)) {
    final List<NamedLibraryElement> selectedElements=getSelectedElements(NamedLibraryElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new NamedLibraryElement[selectedElements.size()]);
  }
  if (CONTEXT_FAVORITES_ROOTS_DATA_KEY.is(dataId)) {
    List<FavoritesTreeNodeDescriptor> result=new ArrayList<FavoritesTreeNodeDescriptor>();
    FavoritesTreeNodeDescriptor[] selectedNodeDescriptors=getSelectedNodeDescriptors();
    for (    FavoritesTreeNodeDescriptor selectedNodeDescriptor : selectedNodeDescriptors) {
      FavoritesTreeNodeDescriptor root=selectedNodeDescriptor.getFavoritesRoot();
      if (root != null && !(root.getElement().getValue() instanceof String)) {
        result.add(root);
      }
    }
    return result.toArray(new FavoritesTreeNodeDescriptor[result.size()]);
  }
  if (FAVORITES_LIST_NAME_DATA_KEY.is(dataId)) {
    return myListName;
  }
  FavoritesTreeNodeDescriptor[] descriptors=getSelectedNodeDescriptors();
  if (descriptors.length > 0) {
    List<AbstractTreeNode> nodes=new ArrayList<AbstractTreeNode>();
    for (    FavoritesTreeNodeDescriptor descriptor : descriptors) {
      nodes.add(descriptor.getElement());
    }
    return myFavoritesTreeStructure.getDataFromProviders(nodes,dataId);
  }
  return null;
}
