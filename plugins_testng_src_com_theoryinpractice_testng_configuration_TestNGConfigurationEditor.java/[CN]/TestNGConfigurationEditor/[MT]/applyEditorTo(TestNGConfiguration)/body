{
  model.apply(getModuleSelector().getModule(),config);
  getModuleSelector().applyTo(config);
  TestData data=config.getPersistantData();
  if (packageTest.isSelected()) {
    if (packagesInProject.isSelected()) {
      data.setScope(TestSearchScope.WHOLE_PROJECT);
    }
 else     if (packagesInModule.isSelected()) {
      data.setScope(TestSearchScope.SINGLE_MODULE);
    }
 else     if (packagesAcrossModules.isSelected())     data.setScope(TestSearchScope.MODULE_WITH_DEPENDENCIES);
  }
 else {
    data.setScope(TestSearchScope.MODULE_WITH_DEPENDENCIES);
  }
  commonJavaParameters.applyTo(config);
  config.ALTERNATIVE_JRE_PATH=alternateJDK.getPath();
  config.ALTERNATIVE_JRE_PATH_ENABLED=alternateJDK.isPathEnabled();
  data.ANNOTATION_TYPE=(String)annotationType.getComponent().getSelectedItem();
  data.TEST_PROPERTIES.clear();
  for (  Map.Entry<String,String> entry : propertiesList) {
    data.TEST_PROPERTIES.put(entry.getKey(),entry.getValue());
  }
  data.TEST_LISTENERS.clear();
  data.TEST_LISTENERS.addAll(listenerModel.getListenerList());
  data.ENV_VARIABLES=envVariablesComponent.getEnvs().trim().length() > 0 ? FileUtil.toSystemIndependentName(envVariablesComponent.getEnvs()) : null;
}
