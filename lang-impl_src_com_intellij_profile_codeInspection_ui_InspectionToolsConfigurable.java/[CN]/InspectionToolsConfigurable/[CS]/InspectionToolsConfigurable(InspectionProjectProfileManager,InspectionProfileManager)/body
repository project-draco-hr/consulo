{
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ModifiableModel model=SingleInspectionProfilePanel.createNewProfile(-1,getSelectedObject(),myWholePanel,"");
      if (model != null) {
        addProjectProfile((InspectionProfileImpl)model);
        myDeletedProfiles.remove(model.getName());
        myDeleteButton.setEnabled(true);
      }
    }
  }
);
  myDeleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final InspectionProfileImpl selectedProfile=(InspectionProfileImpl)myProfiles.getSelectedItem();
      ((DefaultComboBoxModel)myProfiles.getModel()).removeElement(selectedProfile);
      myDeletedProfiles.add(selectedProfile.getName());
      myDeleteButton.setEnabled(myProfiles.getModel().getSize() > 1);
    }
  }
);
  myImportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,false,false,false,false,false){
        @Override public boolean isFileSelectable(        VirtualFile file){
          return file.getFileType().equals(StdFileTypes.XML);
        }
      }
;
      descriptor.setDescription("Choose profile file");
      final VirtualFile[] files=FileChooser.chooseFiles(myWholePanel,descriptor);
      if (files.length == 0)       return;
      final InspectionProfileImpl profile=new InspectionProfileImpl(InspectionProfileImpl.getDefaultProfile());
      try {
        profile.readExternal(JDOMUtil.loadDocument(VfsUtil.virtualToIoFile(files[0])).getRootElement());
        if (myProjectProfileManager.getProfile(profile.getName(),false) != null) {
          if (Messages.showOkCancelDialog(myWholePanel,"Profile with name \'" + profile.getName() + "\' already exists. Do you want to overwrite it?","Warning",Messages.getInformationIcon()) != DialogWrapper.OK_EXIT_CODE)           return;
        }
        if (Messages.showYesNoDialog(myWholePanel,"Do you want the profile to be saved to current project?","Choose Profile Purpose",Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE) {
          addProjectProfile(profile);
          profile.setProfileManager(myProjectProfileManager);
        }
 else {
          myProfileManager.addProfile(profile);
        }
        myDeleteButton.setEnabled(true);
      }
 catch (      InvalidDataException e1) {
        LOG.error(e1);
      }
catch (      JDOMException e1) {
        LOG.error(e1);
      }
catch (      IOException e1) {
        LOG.error(e1);
      }
    }
  }
);
  myExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
      descriptor.setDescription("Choose directory to store profile file");
      final VirtualFile[] files=FileChooser.chooseFiles(myWholePanel,descriptor);
      if (files.length == 0)       return;
      final Element element=new Element("inspections");
      try {
        final InspectionProfileImpl profile=(InspectionProfileImpl)myProfiles.getSelectedItem();
        profile.writeExternal(element);
        final String filePath=files[0].getPath() + File.separator + FileUtil.sanitizeFileName(profile.getName())+ ".xml";
        if (new File(filePath).isFile()) {
          if (Messages.showOkCancelDialog(myWholePanel,"File \'" + filePath + "\' already exist. Do you want to override it?","Warning",Messages.getQuestionIcon()) != DialogWrapper.OK_EXIT_CODE)           return;
        }
        JDOMUtil.writeDocument(new Document(element),filePath,SystemProperties.getLineSeparator());
      }
 catch (      WriteExternalException e1) {
        LOG.error(e1);
      }
catch (      IOException e1) {
        LOG.error(e1);
      }
    }
  }
);
  myProjectProfileManager=projectProfileManager;
  myProfileManager=profileManager;
}
