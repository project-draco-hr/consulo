{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"exec".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (!"java.lang.Runtime".equals(className)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType type=argument.getType();
  if (type == null || !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
    return;
  }
  if (PsiUtil.isConstantExpression(argument)) {
    return;
  }
  registerMethodCallError(expression);
}
