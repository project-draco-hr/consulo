{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  if (methodExpression == null) {
    return;
  }
  final String methodName=methodExpression.getReferenceName();
  if (!"exec".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  final String className=aClass.getQualifiedName();
  if (!"java.lang.Runtime".equals(className)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] args=argumentList.getExpressions();
  if (args == null || args.length == 0) {
    return;
  }
  final PsiExpression arg=args[0];
  final PsiType type=arg.getType();
  if (type == null) {
    return;
  }
  final String typeText=type.getCanonicalText();
  if (!"java.lang.String".equals(typeText)) {
    return;
  }
  final String stringValue=(String)ConstantExpressionUtil.computeCastTo(arg,type);
  if (stringValue != null) {
    return;
  }
  registerMethodCallError(expression);
}
