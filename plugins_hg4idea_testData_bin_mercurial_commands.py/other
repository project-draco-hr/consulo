from node import hex, nullid, nullrev, short
from lock import release
from i18n import _, gettext
import os, re, sys, difflib, time, tempfile
import hg, util, revlog, bundlerepo, extensions, copies, error
import patch, help, mdiff, url, encoding, templatekw
import archival, changegroup, cmdutil, sshserver, hbisect
from hgweb import server
import merge as merge_
import minirst
globalopts = [('R', 'repository', '', _('repository root directory or name of overlay bundle file')), ('', 'cwd', '', _('change working directory')), ('y', 'noninteractive', None, _("do not prompt, assume 'yes' for any required answers")), ('q', 'quiet', None, _('suppress output')), ('v', 'verbose', None, _('enable additional output')), ('', 'config', [], _("set/override config option (use 'section.name=value')")), ('', 'debug', None, _('enable debugging output')), ('', 'debugger', None, _('start debugger')), ('', 'encoding', encoding.encoding, _('set the charset encoding')), ('', 'encodingmode', encoding.encodingmode, _('set the charset encoding mode')), ('', 'traceback', None, _('always print a traceback on exception')), ('', 'time', None, _('time how long the command takes')), ('', 'profile', None, _('print command execution profile')), ('', 'version', None, _('output version information and exit')), ('h', 'help', None, _('display help and exit'))]
dryrunopts = [('n', 'dry-run', None, _('do not perform actions, just print output'))]
remoteopts = [('e', 'ssh', '', _('specify ssh command to use')), ('', 'remotecmd', '', _('specify hg command to run on the remote side'))]
walkopts = [('I', 'include', [], _('include names matching the given patterns')), ('X', 'exclude', [], _('exclude names matching the given patterns'))]
commitopts = [('m', 'message', '', _('use <text> as commit message')), ('l', 'logfile', '', _('read commit message from <file>'))]
commitopts2 = [('d', 'date', '', _('record datecode as commit date')), ('u', 'user', '', _('record the specified user as committer'))]
templateopts = [('', 'style', '', _('display using template map file')), ('', 'template', '', _('display with template'))]
logopts = ([('p', 'patch', None, _('show patch')), ('g', 'git', None, _('use git extended diff format')), ('l', 'limit', '', _('limit number of changes displayed')), ('M', 'no-merges', None, _('do not show merges'))] + templateopts)
diffopts = [('a', 'text', None, _('treat all files as text')), ('g', 'git', None, _('use git extended diff format')), ('', 'nodates', None, _('omit dates from diff headers'))]
diffopts2 = [('p', 'show-function', None, _('show which function each change is in')), ('', 'reverse', None, _('produce a diff that undoes the changes')), ('w', 'ignore-all-space', None, _('ignore white space when comparing lines')), ('b', 'ignore-space-change', None, _('ignore changes in the amount of white space')), ('B', 'ignore-blank-lines', None, _('ignore changes whose lines are all blank')), ('U', 'unified', '', _('number of lines of context to show')), ('', 'stat', None, _('output diffstat-style summary of changes'))]
similarityopts = [('s', 'similarity', '', _('guess renamed files by similarity (0<=s<=100)'))]
table = {'^add': (add, (walkopts + dryrunopts), _('[OPTION]... [FILE]...')), 'addremove': (addremove, ((similarityopts + walkopts) + dryrunopts), _('[OPTION]... [FILE]...')), '^annotate|blame': (annotate, ([('r', 'rev', '', _('annotate the specified revision')), ('', 'follow', None, _('follow copies/renames and list the filename (DEPRECATED)')), ('', 'no-follow', None, _("don't follow copies and renames")), ('a', 'text', None, _('treat all files as text')), ('u', 'user', None, _('list the author (long with -v)')), ('f', 'file', None, _('list the filename')), ('d', 'date', None, _('list the date (short with -q)')), ('n', 'number', None, _('list the revision number (default)')), ('c', 'changeset', None, _('list the changeset')), ('l', 'line-number', None, _('show line number at the first appearance'))] + walkopts), _('[-r REV] [-f] [-a] [-u] [-d] [-n] [-c] [-l] FILE...')), 'archive': (archive, ([('', 'no-decode', None, _('do not pass files through decoders')), ('p', 'prefix', '', _('directory prefix for files in archive')), ('r', 'rev', '', _('revision to distribute')), ('t', 'type', '', _('type of distribution to create'))] + walkopts), _('[OPTION]... DEST')), 'backout': (backout, ((([('', 'merge', None, _('merge with old dirstate parent after backout')), ('', 'parent', '', _('parent to choose when backing out merge')), ('r', 'rev', '', _('revision to backout'))] + walkopts) + commitopts) + commitopts2), _('[OPTION]... [-r] REV')), 'bisect': (bisect, [('r', 'reset', False, _('reset bisect state')), ('g', 'good', False, _('mark changeset good')), ('b', 'bad', False, _('mark changeset bad')), ('s', 'skip', False, _('skip testing changeset')), ('c', 'command', '', _('use command to check changeset state')), ('U', 'noupdate', False, _('do not update to target'))], _('[-gbsr] [-U] [-c CMD] [REV]')), 'branch': (branch, [('f', 'force', None, _('set branch name even if it shadows an existing branch')), ('C', 'clean', None, _('reset branch name to parent branch name'))], _('[-fC] [NAME]')), 'branches': (branches, [('a', 'active', False, _('show only branches that have unmerged heads')), ('c', 'closed', False, _('show normal and closed branches'))], _('[-ac]')), 'bundle': (bundle, ([('f', 'force', None, _('run even when the destination is unrelated')), ('r', 'rev', [], _('a changeset intended to be added to the destination')), ('b', 'branch', [], _('a specific branch you would like to bundle')), ('', 'base', [], _('a base changeset assumed to be available at the destination')), ('a', 'all', None, _('bundle all changesets in the repository')), ('t', 'type', 'bzip2', _('bundle compression type to use'))] + remoteopts), _('[-f] [-t TYPE] [-a] [-r REV]... [--base REV]... FILE [DEST]')), 'cat': (cat, ([('o', 'output', '', _('print output to file with formatted name')), ('r', 'rev', '', _('print the given revision')), ('', 'decode', None, _('apply any matching decode filter'))] + walkopts), _('[OPTION]... FILE...')), '^clone': (clone, ([('U', 'noupdate', None, _('the clone will include an empty working copy (only a repository)')), ('u', 'updaterev', '', _('revision, tag or branch to check out')), ('r', 'rev', [], _('include the specified changeset')), ('b', 'branch', [], _('clone only the specified branch')), ('', 'pull', None, _('use pull protocol to copy metadata')), ('', 'uncompressed', None, _('use uncompressed transfer (fast over LAN)'))] + remoteopts), _('[OPTION]... SOURCE [DEST]')), '^commit|ci': (commit, ((([('A', 'addremove', None, _('mark new/missing files as added/removed before committing')), ('', 'close-branch', None, _('mark a branch as closed, hiding it from the branch list'))] + walkopts) + commitopts) + commitopts2), _('[OPTION]... [FILE]...')), 'copy|cp': (copy, (([('A', 'after', None, _('record a copy that has already occurred')), ('f', 'force', None, _('forcibly copy over an existing managed file'))] + walkopts) + dryrunopts), _('[OPTION]... [SOURCE]... DEST')), 'debugancestor': (debugancestor, [], _('[INDEX] REV1 REV2')), 'debugcheckstate': (debugcheckstate, [], ''), 'debugcommands': (debugcommands, [], _('[COMMAND]')), 'debugcomplete': (debugcomplete, [('o', 'options', None, _('show the command options'))], _('[-o] CMD')), 'debugdate': (debugdate, [('e', 'extended', None, _('try extended date formats'))], _('[-e] DATE [RANGE]')), 'debugdata': (debugdata, [], _('FILE REV')), 'debugfsinfo': (debugfsinfo, [], _('[PATH]')), 'debugindex': (debugindex, [], _('FILE')), 'debugindexdot': (debugindexdot, [], _('FILE')), 'debuginstall': (debuginstall, [], ''), 'debugrebuildstate': (debugrebuildstate, [('r', 'rev', '', _('revision to rebuild to'))], _('[-r REV] [REV]')), 'debugrename': (debugrename, [('r', 'rev', '', _('revision to debug'))], _('[-r REV] FILE')), 'debugsetparents': (debugsetparents, [], _('REV1 [REV2]')), 'debugstate': (debugstate, [('', 'nodates', None, _('do not display the saved mtime'))], _('[OPTION]...')), 'debugsub': (debugsub, [('r', 'rev', '', _('revision to check'))], _('[-r REV] [REV]')), 'debugwalk': (debugwalk, walkopts, _('[OPTION]... [FILE]...')), '^diff': (diff, ((([('r', 'rev', [], _('revision')), ('c', 'change', '', _('change made by revision'))] + diffopts) + diffopts2) + walkopts), _('[OPTION]... ([-c REV] | [-r REV1 [-r REV2]]) [FILE]...')), '^export': (export, ([('o', 'output', '', _('print output to file with formatted name')), ('', 'switch-parent', None, _('diff against the second parent')), ('r', 'rev', [], _('revisions to export'))] + diffopts), _('[OPTION]... [-o OUTFILESPEC] REV...')), '^forget': (forget, ([] + walkopts), _('[OPTION]... FILE...')), 'grep': (grep, ([('0', 'print0', None, _('end fields with NUL')), ('', 'all', None, _('print all revisions that match')), ('f', 'follow', None, _('follow changeset history, or file history across copies and renames')), ('i', 'ignore-case', None, _('ignore case when matching')), ('l', 'files-with-matches', None, _('print only filenames and revisions that match')), ('n', 'line-number', None, _('print matching line numbers')), ('r', 'rev', [], _('only search files changed within revision range')), ('u', 'user', None, _('list the author (long with -v)')), ('d', 'date', None, _('list the date (short with -q)'))] + walkopts), _('[OPTION]... PATTERN [FILE]...')), 'heads': (heads, ([('r', 'rev', '', _('show only heads which are descendants of REV')), ('t', 'topo', False, _('show topological heads only')), ('a', 'active', False, _('show active branchheads only [DEPRECATED]')), ('c', 'closed', False, _('show normal and closed branch heads'))] + templateopts), _('[-ac] [-r STARTREV] [REV]...')), 'help': (help_, [], _('[TOPIC]')), 'identify|id': (identify, [('r', 'rev', '', _('identify the specified revision')), ('n', 'num', None, _('show local revision number')), ('i', 'id', None, _('show global revision id')), ('b', 'branch', None, _('show branch')), ('t', 'tags', None, _('show tags'))], _('[-nibt] [-r REV] [SOURCE]')), 'import|patch': (import_, ((([('p', 'strip', 1, _('directory strip option for patch. This has the same meaning as the corresponding patch option')), ('b', 'base', '', _('base path')), ('f', 'force', None, _('skip check for outstanding uncommitted changes')), ('', 'no-commit', None, _("don't commit, just update the working directory")), ('', 'exact', None, _('apply patch to the nodes from which it was generated')), ('', 'import-branch', None, _('use any branch information in patch (implied by --exact)'))] + commitopts) + commitopts2) + similarityopts), _('[OPTION]... PATCH...')), 'incoming|in': (incoming, (([('f', 'force', None, _('run even if remote repository is unrelated')), ('n', 'newest-first', None, _('show newest record first')), ('', 'bundle', '', _('file to store the bundles into')), ('r', 'rev', [], _('a remote changeset intended to be added')), ('b', 'branch', [], _('a specific branch you would like to pull'))] + logopts) + remoteopts), _('[-p] [-n] [-M] [-f] [-r REV]... [--bundle FILENAME] [SOURCE]')), '^init': (init, remoteopts, _('[-e CMD] [--remotecmd CMD] [DEST]')), 'locate': (locate, ([('r', 'rev', '', _('search the repository as it is in REV')), ('0', 'print0', None, _('end filenames with NUL, for use with xargs')), ('f', 'fullpath', None, _('print complete paths from the filesystem root'))] + walkopts), _('[OPTION]... [PATTERN]...')), '^log|history': (log, (([('f', 'follow', None, _('follow changeset history, or file history across copies and renames')), ('', 'follow-first', None, _('only follow the first parent of merge changesets')), ('d', 'date', '', _('show revisions matching date spec')), ('C', 'copies', None, _('show copied files')), ('k', 'keyword', [], _('do case-insensitive search for a keyword')), ('r', 'rev', [], _('show the specified revision or range')), ('', 'removed', None, _('include revisions where files were removed')), ('m', 'only-merges', None, _('show only merges')), ('u', 'user', [], _('revisions committed by user')), ('b', 'only-branch', [], _('show only changesets within the given named branch')), ('P', 'prune', [], _('do not display revision or any of its ancestors'))] + logopts) + walkopts), _('[OPTION]... [FILE]')), 'manifest': (manifest, [('r', 'rev', '', _('revision to display'))], _('[-r REV]')), '^merge': (merge, [('f', 'force', None, _('force a merge with outstanding changes')), ('r', 'rev', '', _('revision to merge')), ('P', 'preview', None, _('review revisions to merge (no merge is performed)'))], _('[-P] [-f] [[-r] REV]')), 'outgoing|out': (outgoing, (([('f', 'force', None, _('run even when the destination is unrelated')), ('r', 'rev', [], _('a changeset intended to be included in the destination')), ('n', 'newest-first', None, _('show newest record first')), ('b', 'branch', [], _('a specific branch you would like to push'))] + logopts) + remoteopts), _('[-M] [-p] [-n] [-f] [-r REV]... [DEST]')), 'parents': (parents, ([('r', 'rev', '', _('show parents of the specified revision'))] + templateopts), _('[-r REV] [FILE]')), 'paths': (paths, [], _('[NAME]')), '^pull': (pull, ([('u', 'update', None, _('update to new branch head if changesets were pulled')), ('f', 'force', None, _('run even when remote repository is unrelated')), ('r', 'rev', [], _('a remote changeset intended to be added')), ('b', 'branch', [], _('a specific branch you would like to pull'))] + remoteopts), _('[-u] [-f] [-r REV]... [-e CMD] [--remotecmd CMD] [SOURCE]')), '^push': (push, ([('f', 'force', None, _('force push')), ('r', 'rev', [], _('a changeset intended to be included in the destination')), ('b', 'branch', [], _('a specific branch you would like to push'))] + remoteopts), _('[-f] [-r REV]... [-e CMD] [--remotecmd CMD] [DEST]')), 'recover': (recover, []), '^remove|rm': (remove, ([('A', 'after', None, _('record delete for missing files')), ('f', 'force', None, _('remove (and delete) file even if added or modified'))] + walkopts), _('[OPTION]... FILE...')), 'rename|mv': (rename, (([('A', 'after', None, _('record a rename that has already occurred')), ('f', 'force', None, _('forcibly copy over an existing managed file'))] + walkopts) + dryrunopts), _('[OPTION]... SOURCE... DEST')), 'resolve': (resolve, ([('a', 'all', None, _('select all unresolved files')), ('l', 'list', None, _('list state of files needing merge')), ('m', 'mark', None, _('mark files as resolved')), ('u', 'unmark', None, _('unmark files as resolved')), ('n', 'no-status', None, _('hide status prefix'))] + walkopts), _('[OPTION]... [FILE]...')), 'revert': (revert, (([('a', 'all', None, _('revert all changes when no arguments given')), ('d', 'date', '', _('tipmost revision matching date')), ('r', 'rev', '', _('revert to the specified revision')), ('', 'no-backup', None, _('do not save backup copies of files'))] + walkopts) + dryrunopts), _('[OPTION]... [-r REV] [NAME]...')), 'rollback': (rollback, []), 'root': (root, []), '^serve': (serve, [('A', 'accesslog', '', _('name of access log file to write to')), ('d', 'daemon', None, _('run server in background')), ('', 'daemon-pipefds', '', _('used internally by daemon mode')), ('E', 'errorlog', '', _('name of error log file to write to')), ('p', 'port', 0, _('port to listen on (default: 8000)')), ('a', 'address', '', _('address to listen on (default: all interfaces)')), ('', 'prefix', '', _('prefix path to serve from (default: server root)')), ('n', 'name', '', _('name to show in web pages (default: working directory)')), ('', 'webdir-conf', '', _('name of the webdir config file (serve more than one repository)')), ('', 'pid-file', '', _('name of file to write process ID to')), ('', 'stdio', None, _('for remote clients')), ('t', 'templates', '', _('web templates to use')), ('', 'style', '', _('template style to use')), ('6', 'ipv6', None, _('use IPv6 in addition to IPv4')), ('', 'certificate', '', _('SSL certificate file'))], _('[OPTION]...')), 'showconfig|debugconfig': (showconfig, [('u', 'untrusted', None, _('show untrusted configuration options'))], _('[-u] [NAME]...')), '^summary|sum': (summary, [('', 'remote', None, _('check for push and pull'))], '[--remote]'), '^status|st': (status, ([('A', 'all', None, _('show status of all files')), ('m', 'modified', None, _('show only modified files')), ('a', 'added', None, _('show only added files')), ('r', 'removed', None, _('show only removed files')), ('d', 'deleted', None, _('show only deleted (but tracked) files')), ('c', 'clean', None, _('show only files without changes')), ('u', 'unknown', None, _('show only unknown (not tracked) files')), ('i', 'ignored', None, _('show only ignored files')), ('n', 'no-status', None, _('hide status prefix')), ('C', 'copies', None, _('show source of copied files')), ('0', 'print0', None, _('end filenames with NUL, for use with xargs')), ('', 'rev', [], _('show difference from revision')), ('', 'change', '', _('list the changed files of a revision'))] + walkopts), _('[OPTION]... [FILE]...')), 'tag': (tag, ([('f', 'force', None, _('replace existing tag')), ('l', 'local', None, _('make the tag local')), ('r', 'rev', '', _('revision to tag')), ('', 'remove', None, _('remove a tag')), ('m', 'message', '', _('use <text> as commit message'))] + commitopts2), _('[-f] [-l] [-m TEXT] [-d DATE] [-u USER] [-r REV] NAME...')), 'tags': (tags, [], ''), 'tip': (tip, ([('p', 'patch', None, _('show patch')), ('g', 'git', None, _('use git extended diff format'))] + templateopts), _('[-p] [-g]')), 'unbundle': (unbundle, [('u', 'update', None, _('update to new branch head if changesets were unbundled'))], _('[-u] FILE...')), '^update|up|checkout|co': (update, [('C', 'clean', None, _('discard uncommitted changes (no backup)')), ('c', 'check', None, _('check for uncommitted changes')), ('d', 'date', '', _('tipmost revision matching date')), ('r', 'rev', '', _('revision'))], _('[-c] [-C] [-d DATE] [[-r] REV]')), 'verify': (verify, []), 'version': (version_, []), }
norepo = 'clone init version help debugcommands debugcomplete debugdata debugindex debugindexdot debugdate debuginstall debugfsinfo'
optionalrepo = 'identify paths serve showconfig debugancestor'
