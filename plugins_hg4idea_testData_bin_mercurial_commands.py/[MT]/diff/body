def diff(ui, repo, *pats, **opts):
    "diff repository (or selected files)\n\n    Show differences between revisions for the specified files.\n\n    Differences between files are shown using the unified diff format.\n\n    NOTE: diff may generate unexpected results for merges, as it will\n    default to comparing against the working directory's first parent\n    changeset if no revisions are specified.\n\n    When two revision arguments are given, then changes are shown\n    between those revisions. If only one revision is specified then\n    that revision is compared to the working directory, and, when no\n    revisions are specified, the working directory files are compared\n    to its parent.\n\n    Alternatively you can specify -c/--change with a revision to see\n    the changes in that changeset relative to its first parent.\n\n    Without the -a/--text option, diff will avoid generating diffs of\n    files it detects as binary. With -a, diff will generate a diff\n    anyway, probably with undesirable results.\n\n    Use the -g/--git option to generate diffs in the git extended diff\n    format. For more information, read 'hg help diffs'.\n    "
    revs = opts.get('rev')
    change = opts.get('change')
    stat = opts.get('stat')
    reverse = opts.get('reverse')
    if (revs and change):
        msg = _('cannot specify --rev and --change at the same time')
        raise util.Abort(msg)
    elif change:
        node2 = repo.lookup(change)
        node1 = repo[node2].parents()[0].node()
    else:
        (node1, node2) = cmdutil.revpair(repo, revs)
    if reverse:
        (node1, node2) = (node2, node1)
    if stat:
        opts['unified'] = '0'
    diffopts = patch.diffopts(ui, opts)
    m = cmdutil.match(repo, pats, opts)
    it = patch.diff(repo, node1, node2, match=m, opts=diffopts)
    if stat:
        width = 80
        if (not ui.plain()):
            width = util.termwidth()
        ui.write(patch.diffstat(util.iterlines(it), width=width, git=diffopts.git))
    else:
        for chunk in it:
            ui.write(chunk)
