def commit(ui, repo, *pats, **opts):
    'commit the specified files or all outstanding changes\n\n    Commit changes to the given files into the repository. Unlike a\n    centralized RCS, this operation is a local operation. See hg push\n    for a way to actively distribute your changes.\n\n    If a list of files is omitted, all changes reported by "hg status"\n    will be committed.\n\n    If you are committing the result of a merge, do not provide any\n    filenames or -I/-X filters.\n\n    If no commit message is specified, the configured editor is\n    started to prompt you for a message.\n\n    See \'hg help dates\' for a list of formats valid for -d/--date.\n    '
    extra = {}
    if opts.get('close_branch'):
        extra['close'] = 1
    e = cmdutil.commiteditor
    if opts.get('force_editor'):
        e = cmdutil.commitforceeditor

    def commitfunc(ui, repo, message, match, opts):
        return repo.commit(message, opts.get('user'), opts.get('date'), match, editor=e, extra=extra)
    node = cmdutil.commit(ui, repo, commitfunc, pats, opts)
    if (not node):
        ui.status(_('nothing changed\n'))
        return
    cl = repo.changelog
    rev = cl.rev(node)
    parents = cl.parentrevs(rev)
    if ((rev - 1) in parents):
        pass
    elif ((parents == (nullrev, nullrev)) or ((len(cl.heads(cl.node(parents[0]))) > 1) and ((parents[1] == nullrev) or (len(cl.heads(cl.node(parents[1]))) > 1)))):
        ui.status(_('created new head\n'))
    if ui.debugflag:
        ui.write((_('committed changeset %d:%s\n') % (rev, hex(node))))
    elif ui.verbose:
        ui.write((_('committed changeset %d:%s\n') % (rev, short(node))))
