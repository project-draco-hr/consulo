def merge(ui, repo, node=None, **opts):
    "merge working directory with another revision\n\n    The current working directory is updated with all changes made in\n    the requested revision since the last common predecessor revision.\n\n    Files that changed between either parent are marked as changed for\n    the next commit and a commit must be performed before any further\n    updates to the repository are allowed. The next commit will have\n    two parents.\n\n    If no revision is specified, the working directory's parent is a\n    head revision, and the current branch contains exactly one other\n    head, the other head is merged with by default. Otherwise, an\n    explicit revision with which to merge with must be provided.\n    "
    if (opts.get('rev') and node):
        raise util.Abort(_('please specify just one revision'))
    if (not node):
        node = opts.get('rev')
    if (not node):
        branch = repo.changectx(None).branch()
        bheads = repo.branchheads(branch)
        if (len(bheads) > 2):
            ui.warn((_("abort: branch '%s' has %d heads - please merge with an explicit rev\n") % (branch, len(bheads))))
            ui.status(_("(run 'hg heads .' to see heads)\n"))
            return False
        parent = repo.dirstate.parents()[0]
        if (len(bheads) == 1):
            if (len(repo.heads()) > 1):
                ui.warn(_(("abort: branch '%s' has one head - please merge with an explicit rev\n" % branch)))
                ui.status(_("(run 'hg heads' to see all heads)\n"))
                return False
            msg = _('there is nothing to merge')
            if (parent != repo.lookup(repo[None].branch())):
                msg = (_('%s - use "hg update" instead') % msg)
            raise util.Abort(msg)
        if (parent not in bheads):
            raise util.Abort(_('working dir not at a head rev - use "hg update" or merge with an explicit rev'))
        node = (((parent == bheads[0]) and bheads[(-1)]) or bheads[0])
    if opts.get('preview'):
        p1 = repo.lookup('.')
        p2 = repo.lookup(node)
        nodes = repo.changelog.findmissing(common=[p1], heads=[p2])
        displayer = cmdutil.show_changeset(ui, repo, opts)
        for node in nodes:
            displayer.show(repo[node])
        displayer.close()
        return 0
    return hg.merge(repo, node, force=opts.get('force'))
