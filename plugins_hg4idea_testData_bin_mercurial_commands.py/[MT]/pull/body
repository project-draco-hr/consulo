def pull(ui, repo, source='default', **opts):
    "pull changes from the specified source\n\n    Pull changes from a remote repository to a local one.\n\n    This finds all changes from the repository at the specified path\n    or URL and adds them to a local repository (the current one unless\n    -R is specified). By default, this does not update the copy of the\n    project in the working directory.\n\n    Use hg incoming if you want to see what would have been added by a\n    pull at the time you issued this command. If you then decide to\n    added those changes to the repository, you should use pull -r X\n    where X is the last changeset listed by hg incoming.\n\n    If SOURCE is omitted, the 'default' path will be used.\n    See 'hg help urls' for more information.\n    "
    (source, branches) = hg.parseurl(ui.expandpath(source), opts.get('branch'))
    other = hg.repository(cmdutil.remoteui(repo, opts), source)
    ui.status((_('pulling from %s\n') % url.hidepassword(source)))
    (revs, checkout) = hg.addbranchrevs(repo, other, branches, opts.get('rev'))
    if revs:
        try:
            revs = [other.lookup(rev) for rev in revs]
        except error.CapabilityError:
            err = _("Other repository doesn't support revision lookup, so a rev cannot be specified.")
            raise util.Abort(err)
    modheads = repo.pull(other, heads=revs, force=opts.get('force'))
    if checkout:
        checkout = str(repo.changelog.rev(other.lookup(checkout)))
    return postincoming(ui, repo, modheads, opts.get('update'), checkout)
