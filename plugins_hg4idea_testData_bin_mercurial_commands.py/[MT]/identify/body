def identify(ui, repo, source=None, rev=None, num=None, id=None, branch=None, tags=None):
    'identify the working copy or specified revision\n\n    With no revision, print a summary of the current state of the\n    repository.\n\n    Specifying a path to a repository root or Mercurial bundle will\n    cause lookup to operate on that repository/bundle.\n\n    This summary identifies the repository state using one or two\n    parent hash identifiers, followed by a "+" if there are\n    uncommitted changes in the working directory, a list of tags for\n    this revision and a branch name for non-default branches.\n    '
    if ((not repo) and (not source)):
        raise util.Abort(_('There is no Mercurial repository here (.hg not found)'))
    hexfunc = ((ui.debugflag and hex) or short)
    default = (not (num or id or branch or tags))
    output = []
    revs = []
    if source:
        (source, branches) = hg.parseurl(ui.expandpath(source))
        repo = hg.repository(ui, source)
        (revs, checkout) = hg.addbranchrevs(repo, repo, branches, None)
    if (not repo.local()):
        if ((not rev) and revs):
            rev = revs[0]
        if (not rev):
            rev = 'tip'
        if (num or branch or tags):
            raise util.Abort("can't query remote revision number, branch, or tags")
        output = [hexfunc(repo.lookup(rev))]
    elif (not rev):
        ctx = repo[None]
        parents = ctx.parents()
        changed = False
        if (default or id or num):
            changed = util.any(repo.status())
        if (default or id):
            output = [('%s%s' % ('+'.join([hexfunc(p.node()) for p in parents]), ((changed and '+') or '')))]
        if num:
            output.append(('%s%s' % ('+'.join([str(p.rev()) for p in parents]), ((changed and '+') or ''))))
    else:
        ctx = repo[rev]
        if (default or id):
            output = [hexfunc(ctx.node())]
        if num:
            output.append(str(ctx.rev()))
    if (repo.local() and default and (not ui.quiet)):
        b = encoding.tolocal(ctx.branch())
        if (b != 'default'):
            output.append(('(%s)' % b))
        t = '/'.join(ctx.tags())
        if t:
            output.append(t)
    if branch:
        output.append(encoding.tolocal(ctx.branch()))
    if tags:
        output.extend(ctx.tags())
    ui.write(('%s\n' % ' '.join(output)))
