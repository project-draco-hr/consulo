def debuginstall(ui):
    'test Mercurial installation'

    def writetemp(contents):
        (fd, name) = tempfile.mkstemp(prefix='hg-debuginstall-')
        f = os.fdopen(fd, 'wb')
        f.write(contents)
        f.close()
        return name
    problems = 0
    ui.status((_('Checking encoding (%s)...\n') % encoding.encoding))
    try:
        encoding.fromlocal('test')
    except util.Abort as inst:
        ui.write((' %s\n' % inst))
        ui.write(_(' (check that your locale is properly set)\n'))
        problems += 1
    ui.status(_('Checking extensions...\n'))
    try:
        import bdiff, mpatch, base85
    except Exception as inst:
        ui.write((' %s\n' % inst))
        ui.write(_(' One or more extensions could not be found'))
        ui.write(_(' (check that you compiled the extensions)\n'))
        problems += 1
    ui.status(_('Checking templates...\n'))
    try:
        import templater
        templater.templater(templater.templatepath('map-cmdline.default'))
    except Exception as inst:
        ui.write((' %s\n' % inst))
        ui.write(_(' (templates seem to have been installed incorrectly)\n'))
        problems += 1
    ui.status(_('Checking patch...\n'))
    patchproblems = 0
    a = '1\n2\n3\n4\n'
    b = '1\n2\n3\ninsert\n4\n'
    fa = writetemp(a)
    d = mdiff.unidiff(a, None, b, None, os.path.basename(fa), os.path.basename(fa))
    fd = writetemp(d)
    files = {}
    try:
        patch.patch(fd, ui, cwd=os.path.dirname(fa), files=files)
    except util.Abort as e:
        ui.write(_(' patch call failed:\n'))
        ui.write(((' ' + str(e)) + '\n'))
        patchproblems += 1
    else:
        if (list(files) != [os.path.basename(fa)]):
            ui.write(_(' unexpected patch output!\n'))
            patchproblems += 1
        a = open(fa).read()
        if (a != b):
            ui.write(_(' patch test failed!\n'))
            patchproblems += 1
    if patchproblems:
        if ui.config('ui', 'patch'):
            ui.write(_(' (Current patch tool may be incompatible with patch, or misconfigured. Please check your .hgrc file)\n'))
        else:
            ui.write(_(' Internal patcher failure, please report this error to http://mercurial.selenic.com/bts/\n'))
    problems += patchproblems
    os.unlink(fa)
    os.unlink(fd)
    ui.status(_('Checking commit editor...\n'))
    editor = ui.geteditor()
    cmdpath = (util.find_exe(editor) or util.find_exe(editor.split()[0]))
    if (not cmdpath):
        if (editor == 'vi'):
            ui.write(_(" No commit editor set and can't find vi in PATH\n"))
            ui.write(_(' (specify a commit editor in your .hgrc file)\n'))
        else:
            ui.write((_(" Can't find editor '%s' in PATH\n") % editor))
            ui.write(_(' (specify a commit editor in your .hgrc file)\n'))
            problems += 1
    ui.status(_('Checking username...\n'))
    try:
        user = ui.username()
    except util.Abort as e:
        ui.write((' %s\n' % e))
        ui.write(_(' (specify a username in your .hgrc file)\n'))
        problems += 1
    if (not problems):
        ui.status(_('No problems detected\n'))
    else:
        ui.write((_('%s problems detected, please check your install!\n') % problems))
    return problems
