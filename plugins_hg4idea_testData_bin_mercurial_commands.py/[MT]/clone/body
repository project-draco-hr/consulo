def clone(ui, source, dest=None, **opts):
    "make a copy of an existing repository\n\n    Create a copy of an existing repository in a new directory.\n\n    If no destination directory name is specified, it defaults to the\n    basename of the source.\n\n    The location of the source is added to the new repository's\n    .hg/hgrc file, as the default to be used for future pulls.\n\n    See 'hg help urls' for valid source format details.\n\n    It is possible to specify an ``ssh://`` URL as the destination, but no\n    .hg/hgrc and working directory will be created on the remote side.\n    Please see 'hg help urls' for important details about ``ssh://`` URLs.\n\n    A set of changesets (tags, or branch names) to pull may be specified\n    by listing each changeset (tag, or branch name) with -r/--rev.\n    If -r/--rev is used, the cloned repository will contain only a subset\n    of the changesets of the source repository. Only the set of changesets\n    defined by all -r/--rev options (including all their ancestors)\n    will be pulled into the destination repository.\n    No subsequent changesets (including subsequent tags) will be present\n    in the destination.\n\n    Using -r/--rev (or 'clone src#rev dest') implies --pull, even for\n    local source repositories.\n\n    For efficiency, hardlinks are used for cloning whenever the source\n    and destination are on the same filesystem (note this applies only\n    to the repository data, not to the working directory). Some\n    filesystems, such as AFS, implement hardlinking incorrectly, but\n    do not report errors. In these cases, use the --pull option to\n    avoid hardlinking.\n\n    In some cases, you can clone repositories and the working directory\n    using full hardlinks with ::\n\n      $ cp -al REPO REPOCLONE\n\n    This is the fastest way to clone, but it is not always safe. The\n    operation is not atomic (making sure REPO is not modified during\n    the operation is up to you) and you have to make sure your editor\n    breaks hardlinks (Emacs and most Linux Kernel tools do so). Also,\n    this is not compatible with certain extensions that place their\n    metadata under the .hg directory, such as mq.\n\n    Mercurial will update the working directory to the first applicable\n    revision from this list:\n\n    a) null if -U or the source repository has no changesets\n    b) if -u . and the source repository is local, the first parent of\n       the source repository's working directory\n    c) the changeset specified with -u (if a branch name, this means the\n       latest head of that branch)\n    d) the changeset specified with -r\n    e) the tipmost head specified with -b\n    f) the tipmost head specified with the url#branch source syntax\n    g) the tipmost head of the default branch\n    h) tip\n    "
    if (opts.get('noupdate') and opts.get('updaterev')):
        raise util.Abort(_('cannot specify both --noupdate and --updaterev'))
    hg.clone(cmdutil.remoteui(ui, opts), source, dest, pull=opts.get('pull'), stream=opts.get('uncompressed'), rev=opts.get('rev'), update=(opts.get('updaterev') or (not opts.get('noupdate'))), branch=opts.get('branch'))
