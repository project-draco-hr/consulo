def tag(ui, repo, name1, *names, **opts):
    'add one or more tags for the current or given revision\n\n    Name a particular revision using <name>.\n\n    Tags are used to name particular revisions of the repository and are\n    very useful to compare different revisions, to go back to significant\n    earlier versions or to mark branch points as releases, etc.\n\n    If no revision is given, the parent of the working directory is\n    used, or tip if no revision is checked out.\n\n    To facilitate version control, distribution, and merging of tags,\n    they are stored as a file named ".hgtags" which is managed\n    similarly to other project files and can be hand-edited if\n    necessary. The file \'.hg/localtags\' is used for local tags (not\n    shared among repositories).\n\n    See \'hg help dates\' for a list of formats valid for -d/--date.\n    '
    rev_ = '.'
    names = ((name1,) + names)
    if (len(names) != len(set(names))):
        raise util.Abort(_('tag names must be unique'))
    for n in names:
        if (n in ['tip', '.', 'null']):
            raise util.Abort((_("the name '%s' is reserved") % n))
    if (opts.get('rev') and opts.get('remove')):
        raise util.Abort(_('--rev and --remove are incompatible'))
    if opts.get('rev'):
        rev_ = opts['rev']
    message = opts.get('message')
    if opts.get('remove'):
        expectedtype = ((opts.get('local') and 'local') or 'global')
        for n in names:
            if (not repo.tagtype(n)):
                raise util.Abort((_("tag '%s' does not exist") % n))
            if (repo.tagtype(n) != expectedtype):
                if (expectedtype == 'global'):
                    raise util.Abort((_("tag '%s' is not a global tag") % n))
                else:
                    raise util.Abort((_("tag '%s' is not a local tag") % n))
        rev_ = nullid
        if (not message):
            message = ('Removed tag %s' % ', '.join(names))
    elif (not opts.get('force')):
        for n in names:
            if (n in repo.tags()):
                raise util.Abort((_("tag '%s' already exists (use -f to force)") % n))
    if ((not rev_) and (repo.dirstate.parents()[1] != nullid)):
        raise util.Abort(_('uncommitted merge - please provide a specific revision'))
    r = repo[rev_].node()
    if (not message):
        message = ('Added tag %s for changeset %s' % (', '.join(names), short(r)))
    date = opts.get('date')
    if date:
        date = util.parsedate(date)
    repo.tag(names, r, message, opts.get('local'), opts.get('user'), date)
