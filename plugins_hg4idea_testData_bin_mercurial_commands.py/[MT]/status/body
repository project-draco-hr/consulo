def status(ui, repo, *pats, **opts):
    'show changed files in the working directory\n\n    Show status of files in the repository. If names are given, only\n    files that match are shown. Files that are clean or ignored or\n    the source of a copy/move operation, are not listed unless\n    -c/--clean, -i/--ignored, -C/--copies or -A/--all are given.\n    Unless options described with "show only ..." are given, the\n    options -mardu are used.\n\n    Option -q/--quiet hides untracked (unknown and ignored) files\n    unless explicitly requested with -u/--unknown or -i/--ignored.\n\n    NOTE: status may appear to disagree with diff if permissions have\n    changed or a merge has occurred. The standard diff format does not\n    report permission changes and diff only reports changes relative\n    to one merge parent.\n\n    If one revision is given, it is used as the base revision.\n    If two revisions are given, the differences between them are\n    shown. The --change option can also be used as a shortcut to list\n    the changed files of a revision from its first parent.\n\n    The codes used to show the status of files are::\n\n      M = modified\n      A = added\n      R = removed\n      C = clean\n      ! = missing (deleted by non-hg command, but still tracked)\n      ? = not tracked\n      I = ignored\n        = origin of the previous file listed as A (added)\n    '
    revs = opts.get('rev')
    change = opts.get('change')
    if (revs and change):
        msg = _('cannot specify --rev and --change at the same time')
        raise util.Abort(msg)
    elif change:
        node2 = repo.lookup(change)
        node1 = repo[node2].parents()[0].node()
    else:
        (node1, node2) = cmdutil.revpair(repo, revs)
    cwd = ((pats and repo.getcwd()) or '')
    end = ((opts.get('print0') and '\x00') or '\n')
    copy = {}
    states = 'modified added removed deleted unknown ignored clean'.split()
    show = [k for k in states if opts.get(k)]
    if opts.get('all'):
        show += ((ui.quiet and (states[:4] + ['clean'])) or states)
    if (not show):
        show = ((ui.quiet and states[:4]) or states[:5])
    stat = repo.status(node1, node2, cmdutil.match(repo, pats, opts), ('ignored' in show), ('clean' in show), ('unknown' in show))
    changestates = zip(states, 'MAR!?IC', stat)
    if ((opts.get('all') or opts.get('copies')) and (not opts.get('no_status'))):
        ctxn = repo[nullid]
        ctx1 = repo[node1]
        ctx2 = repo[node2]
        added = stat[1]
        if (node2 is None):
            added = (stat[0] + stat[1])
        for (k, v) in copies.copies(repo, ctx1, ctx2, ctxn)[0].iteritems():
            if (k in added):
                copy[k] = v
            elif (v in added):
                copy[v] = k
    for (state, char, files) in changestates:
        if (state in show):
            format = ('%s %%s%s' % (char, end))
            if opts.get('no_status'):
                format = ('%%s%s' % end)
            for f in files:
                ui.write((format % repo.pathto(f, cwd)))
                if (f in copy):
                    ui.write(('  %s%s' % (repo.pathto(copy[f], cwd), end)))
