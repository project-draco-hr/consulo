def bundle(ui, repo, fname, dest=None, **opts):
    'create a changegroup file\n\n    Generate a compressed changegroup file collecting changesets not\n    known to be in another repository.\n\n    If you omit the destination repository, then hg assumes the\n    destination will have all the nodes you specify with --base\n    parameters. To create a bundle containing all changesets, use\n    -a/--all (or --base null).\n\n    You can change compression method with the -t/--type option.\n    The available compression methods are: none, bzip2, and\n    gzip (by default, bundles are compressed using bzip2).\n\n    The bundle file can then be transferred using conventional means\n    and applied to another repository with the unbundle or pull\n    command. This is useful when direct push and pull are not\n    available or when exporting an entire repository is undesirable.\n\n    Applying bundles preserves all changeset contents including\n    permissions, copy/rename information, and revision history.\n    '
    revs = (opts.get('rev') or None)
    if revs:
        revs = [repo.lookup(rev) for rev in revs]
    if opts.get('all'):
        base = ['null']
    else:
        base = opts.get('base')
    if base:
        if dest:
            raise util.Abort(_('--base is incompatible with specifying a destination'))
        base = [repo.lookup(rev) for rev in base]
        o = []
        has = set((nullid,))
        for n in base:
            has.update(repo.changelog.reachable(n))
        if revs:
            visit = list(revs)
            has.difference_update(revs)
        else:
            visit = repo.changelog.heads()
        seen = {}
        while visit:
            n = visit.pop(0)
            parents = [p for p in repo.changelog.parents(n) if (p not in has)]
            if (len(parents) == 0):
                if (n not in has):
                    o.append(n)
            else:
                for p in parents:
                    if (p not in seen):
                        seen[p] = 1
                        visit.append(p)
    else:
        dest = ui.expandpath((dest or 'default-push'), (dest or 'default'))
        (dest, branches) = hg.parseurl(dest, opts.get('branch'))
        other = hg.repository(cmdutil.remoteui(repo, opts), dest)
        (revs, checkout) = hg.addbranchrevs(repo, other, branches, revs)
        o = repo.findoutgoing(other, force=opts.get('force'))
    if (not o):
        ui.status(_('no changes found\n'))
        return
    if revs:
        cg = repo.changegroupsubset(o, revs, 'bundle')
    else:
        cg = repo.changegroup(o, 'bundle')
    bundletype = opts.get('type', 'bzip2').lower()
    btypes = {'none': 'HG10UN', 'bzip2': 'HG10BZ', 'gzip': 'HG10GZ', }
    bundletype = btypes.get(bundletype)
    if (bundletype not in changegroup.bundletypes):
        raise util.Abort(_('unknown bundle type specified with --type'))
    changegroup.writebundle(cg, fname, bundletype)
