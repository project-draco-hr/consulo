def branches(ui, repo, active=False, closed=False):
    "list repository named branches\n\n    List the repository's named branches, indicating which ones are\n    inactive. If -c/--closed is specified, also list branches which have\n    been marked closed (see hg commit --close-branch).\n\n    If -a/--active is specified, only show active branches. A branch\n    is considered active if it contains repository heads.\n\n    Use the command 'hg update' to switch to an existing branch.\n    "
    hexfunc = ((ui.debugflag and hex) or short)
    activebranches = [repo[n].branch() for n in repo.heads()]

    def testactive(tag, node):
        realhead = (tag in activebranches)
        open = (node in repo.branchheads(tag, closed=False))
        return (realhead and open)
    branches = sorted([(testactive(tag, node), repo.changelog.rev(node), tag) for (tag, node) in repo.branchtags().items()], reverse=True)
    for (isactive, node, tag) in branches:
        if ((not active) or isactive):
            encodedtag = encoding.tolocal(tag)
            if ui.quiet:
                ui.write(('%s\n' % encodedtag))
            else:
                hn = repo.lookup(node)
                if isactive:
                    notice = ''
                elif (hn not in repo.branchheads(tag, closed=False)):
                    if (not closed):
                        continue
                    notice = _(' (closed)')
                else:
                    notice = _(' (inactive)')
                rev = str(node).rjust((31 - encoding.colwidth(encodedtag)))
                data = (encodedtag, rev, hexfunc(hn), notice)
                ui.write(('%s %s:%s%s\n' % data))
