def serve(ui, repo, **opts):
    'export the repository via HTTP\n\n    Start a local HTTP repository browser and pull server. You can use\n    this for ad-hoc sharing and browing of repositories. It is\n    recommended to use a real web server to serve a repository for\n    longer periods of time.\n\n    Please note that the server does not implement access control.\n    This means that, by default, anybody can read from the server and\n    nobody can write to it by default. Set the ``web.allow_push``\n    option to ``*`` to allow everybody to push to the server. You\n    should use a real web server if you need to authenticate users.\n\n    By default, the server logs accesses to stdout and errors to\n    stderr. Use the -A/--accesslog and -E/--errorlog options to log to\n    files.\n    '
    if opts['stdio']:
        if (repo is None):
            raise error.RepoError(_('There is no Mercurial repository here (.hg not found)'))
        s = sshserver.sshserver(ui, repo)
        s.serve_forever()
    baseui = ((repo and repo.baseui) or ui)
    optlist = 'name templates style address port prefix ipv6 accesslog errorlog webdir_conf certificate encoding'
    for o in optlist.split():
        if opts.get(o, None):
            baseui.setconfig('web', o, str(opts[o]))
            if ((repo is not None) and (repo.ui != baseui)):
                repo.ui.setconfig('web', o, str(opts[o]))
    if ((repo is None) and (not ui.config('web', 'webdir_conf'))):
        raise error.RepoError(_('There is no Mercurial repository here (.hg not found)'))


    class service(object):

        def init(self):
            util.set_signal_handler()
            self.httpd = server.create_server(baseui, repo)
            if (not ui.verbose):
                return
            if self.httpd.prefix:
                prefix = (self.httpd.prefix.strip('/') + '/')
            else:
                prefix = ''
            port = (':%d' % self.httpd.port)
            if (port == ':80'):
                port = ''
            bindaddr = self.httpd.addr
            if (bindaddr == '0.0.0.0'):
                bindaddr = '*'
            elif (':' in bindaddr):
                bindaddr = ('[%s]' % bindaddr)
            fqaddr = self.httpd.fqaddr
            if (':' in fqaddr):
                fqaddr = ('[%s]' % fqaddr)
            ui.status((_('listening at http://%s%s/%s (bound to %s:%d)\n') % (fqaddr, port, prefix, bindaddr, self.httpd.port)))

        def run(self):
            self.httpd.serve_forever()
    service = service()
    cmdutil.service(opts, initfn=service.init, runfn=service.run)
