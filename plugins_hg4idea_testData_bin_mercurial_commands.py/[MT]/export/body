def export(ui, repo, *changesets, **opts):
    'dump the header and diffs for one or more changesets\n\n    Print the changeset header and diffs for one or more revisions.\n\n    The information shown in the changeset header is: author, date,\n    branch name (if non-default), changeset hash, parent(s) and commit\n    comment.\n\n    NOTE: export may generate unexpected diff output for merge\n    changesets, as it will compare the merge changeset against its\n    first parent only.\n\n    Output may be to a file, in which case the name of the file is\n    given using a format string. The formatting rules are as follows:\n\n    :``%%``: literal "%" character\n    :``%H``: changeset hash (40 bytes of hexadecimal)\n    :``%N``: number of patches being generated\n    :``%R``: changeset revision number\n    :``%b``: basename of the exporting repository\n    :``%h``: short-form changeset hash (12 bytes of hexadecimal)\n    :``%n``: zero-padded sequence number, starting at 1\n    :``%r``: zero-padded changeset revision number\n\n    Without the -a/--text option, export will avoid generating diffs\n    of files it detects as binary. With -a, export will generate a\n    diff anyway, probably with undesirable results.\n\n    Use the -g/--git option to generate diffs in the git extended diff\n    format. See \'hg help diffs\' for more information.\n\n    With the --switch-parent option, the diff will be against the\n    second parent. It can be useful to review a merge.\n    '
    changesets += tuple(opts.get('rev', []))
    if (not changesets):
        raise util.Abort(_('export requires at least one changeset'))
    revs = cmdutil.revrange(repo, changesets)
    if (len(revs) > 1):
        ui.note(_('exporting patches:\n'))
    else:
        ui.note(_('exporting patch:\n'))
    patch.export(repo, revs, template=opts.get('output'), switch_parent=opts.get('switch_parent'), opts=patch.diffopts(ui, opts))
