def heads(ui, repo, *branchrevs, **opts):
    'show current repository heads or show branch heads\n\n    With no arguments, show all repository branch heads.\n\n    Repository "heads" are changesets with no child changesets. They are\n    where development generally takes place and are the usual targets\n    for update and merge operations. Branch heads are changesets that have\n    no child changeset on the same branch.\n\n    If one or more REVs are given, only branch heads on the branches\n    associated with the specified changesets are shown.\n\n    If -c/--closed is specified, also show branch heads marked closed\n    (see hg commit --close-branch).\n\n    If STARTREV is specified, only those heads that are descendants of\n    STARTREV will be displayed.\n\n    If -t/--topo is specified, named branch mechanics will be ignored and only\n    changesets without children will be shown.\n    '
    if opts.get('rev'):
        start = repo.lookup(opts['rev'])
    else:
        start = None
    if opts.get('topo'):
        heads = [repo[h] for h in repo.heads(start)]
    else:
        heads = []
        for (b, ls) in repo.branchmap().iteritems():
            if (start is None):
                heads += [repo[h] for h in ls]
                continue
            startrev = repo.changelog.rev(start)
            descendants = set(repo.changelog.descendants(startrev))
            descendants.add(startrev)
            rev = repo.changelog.rev
            heads += [repo[h] for h in ls if (rev(h) in descendants)]
    if branchrevs:
        (decode, encode) = (encoding.fromlocal, encoding.tolocal)
        branches = set((repo[decode(br)].branch() for br in branchrevs))
        heads = [h for h in heads if (h.branch() in branches)]
    if (not opts.get('closed')):
        heads = [h for h in heads if (not h.extra().get('close'))]
    if (opts.get('active') and branchrevs):
        dagheads = repo.heads(start)
        heads = [h for h in heads if (h.node() in dagheads)]
    if branchrevs:
        haveheads = set((h.branch() for h in heads))
        if (branches - haveheads):
            headless = ', '.join((encode(b) for b in (branches - haveheads)))
            msg = _('no open branch heads found on branches %s')
            if opts.get('rev'):
                msg += _((' (started at %s)' % opts['rev']))
            ui.warn(((msg + '\n') % headless))
    if (not heads):
        return 1
    heads = sorted(heads, key=(lambda x: (- x.rev())))
    displayer = cmdutil.show_changeset(ui, repo, opts)
    for ctx in heads:
        displayer.show(ctx)
    displayer.close()
