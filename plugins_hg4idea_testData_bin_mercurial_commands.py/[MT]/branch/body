def branch(ui, repo, label=None, **opts):
    "set or show the current branch name\n\n    With no argument, show the current branch name. With one argument,\n    set the working directory branch name (the branch will not exist\n    in the repository until the next commit). Standard practice\n    recommends that primary development take place on the 'default'\n    branch.\n\n    Unless -f/--force is specified, branch will not let you set a\n    branch name that already exists, even if it's inactive.\n\n    Use -C/--clean to reset the working directory branch to that of\n    the parent of the working directory, negating a previous branch\n    change.\n\n    Use the command 'hg update' to switch to an existing branch. Use\n    'hg commit --close-branch' to mark this branch as closed.\n    "
    if opts.get('clean'):
        label = repo[None].parents()[0].branch()
        repo.dirstate.setbranch(label)
        ui.status((_('reset working directory to branch %s\n') % label))
    elif label:
        utflabel = encoding.fromlocal(label)
        if ((not opts.get('force')) and (utflabel in repo.branchtags())):
            if (label not in [p.branch() for p in repo.parents()]):
                raise util.Abort(_("a branch of the same name already exists (use 'hg update' to switch to it)"))
        repo.dirstate.setbranch(utflabel)
        ui.status((_('marked working directory as branch %s\n') % label))
    else:
        ui.write(('%s\n' % encoding.tolocal(repo.dirstate.branch())))
