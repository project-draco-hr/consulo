def backout(ui, repo, node=None, rev=None, **opts):
    "reverse effect of earlier changeset\n\n    Commit the backed out changes as a new changeset. The new\n    changeset is a child of the backed out changeset.\n\n    If you backout a changeset other than the tip, a new head is\n    created. This head will be the new tip and you should merge this\n    backout changeset with another head.\n\n    The --merge option remembers the parent of the working directory\n    before starting the backout, then merges the new head with that\n    changeset afterwards. This saves you from doing the merge by hand.\n    The result of this merge is not committed, as with a normal merge.\n\n    See 'hg help dates' for a list of formats valid for -d/--date.\n    "
    if (rev and node):
        raise util.Abort(_('please specify just one revision'))
    if (not rev):
        rev = node
    if (not rev):
        raise util.Abort(_('please specify a revision to backout'))
    date = opts.get('date')
    if date:
        opts['date'] = util.parsedate(date)
    cmdutil.bail_if_changed(repo)
    node = repo.lookup(rev)
    (op1, op2) = repo.dirstate.parents()
    a = repo.changelog.ancestor(op1, node)
    if (a != node):
        raise util.Abort(_('cannot backout change on a different branch'))
    (p1, p2) = repo.changelog.parents(node)
    if (p1 == nullid):
        raise util.Abort(_('cannot backout a change with no parents'))
    if (p2 != nullid):
        if (not opts.get('parent')):
            raise util.Abort(_('cannot backout a merge changeset without --parent'))
        p = repo.lookup(opts['parent'])
        if (p not in (p1, p2)):
            raise util.Abort((_('%s is not a parent of %s') % (short(p), short(node))))
        parent = p
    else:
        if opts.get('parent'):
            raise util.Abort(_('cannot use --parent on non-merge changeset'))
        parent = p1
    branch = repo.dirstate.branch()
    hg.clean(repo, node, show_stats=False)
    repo.dirstate.setbranch(branch)
    revert_opts = opts.copy()
    revert_opts['date'] = None
    revert_opts['all'] = True
    revert_opts['rev'] = hex(parent)
    revert_opts['no_backup'] = None
    revert(ui, repo, **revert_opts)
    commit_opts = opts.copy()
    commit_opts['addremove'] = False
    if ((not commit_opts['message']) and (not commit_opts['logfile'])):
        commit_opts['message'] = ('Backed out changeset %s' % short(node))
        commit_opts['force_editor'] = True
    commit(ui, repo, **commit_opts)

    def nice(node):
        return ('%d:%s' % (repo.changelog.rev(node), short(node)))
    ui.status((_('changeset %s backs out changeset %s\n') % (nice(repo.changelog.tip()), nice(node))))
    if (op1 != node):
        hg.clean(repo, op1, show_stats=False)
        if opts.get('merge'):
            ui.status((_('merging with changeset %s\n') % nice(repo.changelog.tip())))
            hg.merge(repo, hex(repo.changelog.tip()))
        else:
            ui.status(_('the backout changeset is a new head - do not forget to merge\n'))
            ui.status(_('(use "backout --merge" if you want to auto-merge)\n'))
