def log(ui, repo, *pats, **opts):
    "show revision history of entire repository or files\n\n    Print the revision history of the specified files or the entire\n    project.\n\n    File history is shown without following rename or copy history of\n    files. Use -f/--follow with a filename to follow history across\n    renames and copies. --follow without a filename will only show\n    ancestors or descendants of the starting revision. --follow-first\n    only follows the first parent of merge revisions.\n\n    If no revision range is specified, the default is tip:0 unless\n    --follow is set, in which case the working directory parent is\n    used as the starting revision.\n\n    See 'hg help dates' for a list of formats valid for -d/--date.\n\n    By default this command prints revision number and changeset id,\n    tags, non-trivial parents, user, date and time, and a summary for\n    each commit. When the -v/--verbose switch is used, the list of\n    changed files and full commit message are shown.\n\n    NOTE: log -p/--patch may generate unexpected diff output for merge\n    changesets, as it will only compare the merge changeset against\n    its first parent. Also, only files different from BOTH parents\n    will appear in files:.\n    "
    matchfn = cmdutil.match(repo, pats, opts)
    limit = cmdutil.loglimit(opts)
    count = 0
    endrev = None
    if (opts.get('copies') and opts.get('rev')):
        endrev = (max(cmdutil.revrange(repo, opts.get('rev'))) + 1)
    df = False
    if opts['date']:
        df = util.matchdate(opts['date'])
    displayer = cmdutil.show_changeset(ui, repo, opts, True, matchfn)

    def prep(ctx, fns):
        rev = ctx.rev()
        parents = [p for p in repo.changelog.parentrevs(rev) if (p != nullrev)]
        if (opts.get('no_merges') and (len(parents) == 2)):
            return
        if (opts.get('only_merges') and (len(parents) != 2)):
            return
        if (opts.get('only_branch') and (ctx.branch() not in opts['only_branch'])):
            return
        if (df and (not df(ctx.date()[0]))):
            return
        if (opts['user'] and (not [k for k in opts['user'] if (k in ctx.user())])):
            return
        if opts.get('keyword'):
            for k in [kw.lower() for kw in opts['keyword']]:
                if ((k in ctx.user().lower()) or (k in ctx.description().lower()) or (k in ' '.join(ctx.files()).lower())):
                    break
            else:
                return
        copies = None
        if (opts.get('copies') and rev):
            copies = []
            getrenamed = templatekw.getrenamedfn(repo, endrev=endrev)
            for fn in ctx.files():
                rename = getrenamed(fn, rev)
                if rename:
                    copies.append((fn, rename[0]))
        displayer.show(ctx, copies=copies)
    for ctx in cmdutil.walkchangerevs(repo, matchfn, opts, prep):
        if (count == limit):
            break
        if displayer.flush(ctx.rev()):
            count += 1
    displayer.close()
