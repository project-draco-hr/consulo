{
  final List<String> list=Collections.nCopies(100,"");
  final List<Integer> ilist=Collections.nCopies(100,0);
  for (int i=0; i < 1; i++) {
    COUNT.set(0);
    long start=System.currentTimeMillis();
    boolean success=false;
    try {
      success=JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list,null,false,new Processor<String>(){
        @Override public boolean process(        String name){
          boolean nestedSuccess=JobLauncher.getInstance().invokeConcurrentlyUnderProgress(ilist,null,false,new Processor<Integer>(){
            @Override public boolean process(            Integer integer){
              if (busySleep(1) == 1000) {
                System.out.println("PCE");
                throw new RuntimeException("xxx");
              }
              return true;
            }
          }
);
          System.out.println("nestedSuccess = " + nestedSuccess);
          return true;
        }
      }
);
    }
 catch (    ProcessCanceledException e) {
    }
catch (    RuntimeException e) {
      assertEquals("xxx",e.getMessage());
    }
    long finish=System.currentTimeMillis();
    System.out.println("Elapsed: " + (finish - start) + "ms");
    assertFalse(success);
  }
}
