{
  COUNT.set(0);
  int N=100000;
  List<String> list=Collections.nCopies(N,null);
  final AtomicReference<Exception> exception=new AtomicReference<Exception>();
  final AtomicBoolean finished=new AtomicBoolean();
  JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list,null,false,new Processor<String>(){
    @Override public boolean process(    String name){
      try {
        if (finished.get()) {
          throw new RuntimeException();
        }
        for (int i=0; i < 1000; i++) {
          new BigDecimal(i).multiply(new BigDecimal(1));
        }
        busySleep(1);
        if (finished.get()) {
          throw new RuntimeException();
        }
      }
 catch (      Exception e) {
        exception.set(e);
      }
      return true;
    }
  }
);
  finished.set(true);
  Thread.sleep(1000);
  if (exception.get() != null)   throw exception.get();
  assertEquals(N,COUNT.get());
}
