{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    indicator.pushState();
    indicator.setText(IdeBundle.message("progress.parsing.files"));
  }
  final int updaterCount=myUpdaters.size();
  int totalFiles=myFilesToUpdate.size();
  final FileContentQueue contentQueue=new FileContentQueue(){
    @Override protected void addLast(    VirtualFile file) throws InterruptedException {
      if (!myIndexingSets.contains(file)) {
        return;
      }
      super.addLast(file);
    }
  }
;
  contentQueue.queue(myFilesToUpdate,indicator);
  int count=0;
  while (true) {
    final FileContent content=contentQueue.take();
    if (content == null)     break;
    final VirtualFile file=content.getVirtualFile();
    if (file == null)     break;
    if (indicator != null) {
      indicator.checkCanceled();
      indicator.setFraction((double)++count / totalFiles);
      indicator.setText2(file.getPresentableUrl());
    }
    for (int i=0; i < updaterCount; i++) {
      CacheUpdater updater=myUpdaters.get(i);
      if (updater != null && myIndexingSets.remove(i,file)) {
        try {
          updater.processFile(content);
        }
 catch (        ProcessCanceledException e) {
          throw e;
        }
catch (        Throwable e) {
          LOG.error(e);
        }
        if (myIndexingSets.isDoneForegroundly(i)) {
          try {
            updater.updatingDone();
          }
 catch (          ProcessCanceledException e) {
            throw e;
          }
catch (          Throwable e) {
            LOG.error(e);
          }
          myUpdaters.set(i,null);
        }
      }
    }
  }
  updatingDone();
  if (indicator != null) {
    indicator.popState();
  }
}
