{
  final Collection<PsiFile> containingFiles=new HashSet<PsiFile>();
  containingFiles.add(myMethod.getContainingFile());
  containingFiles.add(myMethodCall.getContainingFile());
  final Project project=myMethod.getProject();
  new WriteCommandAction(project,RefactoringBundle.message("inline.parameter.command.name",myParameter.getName()),containingFiles.toArray(new PsiFile[containingFiles.size()])){
    protected void run(    final Result result) throws Throwable {
      final PsiElementFactory factory=JavaPsiFacade.getInstance(myMethod.getProject()).getElementFactory();
      if (!createLocal) {
        for (        PsiReference ref : parameterRefs) {
          InlineUtil.inlineVariable(myParameter,initializerInMethod,(PsiJavaCodeReferenceElement)ref.getElement());
        }
      }
      PsiDeclarationStatement localDeclaration=factory.createVariableDeclarationStatement(myParameter.getName(),myParameter.getType(),initializerInMethod);
      boolean parameterIsFinal=myParameter.hasModifierProperty(PsiModifier.FINAL);
      SameParameterValueInspection.InlineParameterValueFix.removeParameter(myMethod,myParameter);
      if (createLocal) {
        final PsiLocalVariable declaredVar=(PsiLocalVariable)localDeclaration.getDeclaredElements()[0];
        PsiUtil.setModifierProperty(declaredVar,PsiModifier.FINAL,parameterIsFinal);
        final PsiCodeBlock body=myMethod.getBody();
        if (body != null) {
          body.addAfter(localDeclaration,body.getLBrace());
        }
      }
      for (      PsiVariable var : myLocalReplacements.keySet()) {
        if (ReferencesSearch.search(var).findFirst() == null) {
          var.delete();
        }
      }
    }
    protected UndoConfirmationPolicy getUndoConfirmationPolicy(){
      return UndoConfirmationPolicy.DEFAULT;
    }
  }
.execute();
}
