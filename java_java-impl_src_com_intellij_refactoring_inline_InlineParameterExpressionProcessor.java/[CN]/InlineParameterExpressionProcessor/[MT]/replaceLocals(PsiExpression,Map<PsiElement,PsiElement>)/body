{
  final Ref<Boolean> refCannotEvaluate=new Ref<Boolean>();
  expression.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (!canEvaluate(expression,element,elementsToReplace)) {
        refCannotEvaluate.set(Boolean.TRUE);
      }
    }
    @Override public void visitThisExpression(    PsiThisExpression thisExpression){
      super.visitThisExpression(thisExpression);
      final PsiJavaCodeReferenceElement qualifier=thisExpression.getQualifier();
      PsiElement containingClass;
      if (qualifier != null) {
        containingClass=qualifier.resolve();
      }
 else {
        containingClass=PsiTreeUtil.getParentOfType(myMethodCall,PsiClass.class);
      }
      final PsiClass methodContainingClass=myMethod.getContainingClass();
      LOG.assertTrue(methodContainingClass != null);
      if (!PsiTreeUtil.isAncestor(containingClass,methodContainingClass,false)) {
        refCannotEvaluate.set(Boolean.TRUE);
      }
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      super.visitNewExpression(expression);
      final PsiJavaCodeReferenceElement reference=expression.getClassOrAnonymousClassReference();
      if (reference != null) {
        final PsiElement resolved=reference.resolve();
        if (resolved instanceof PsiClass) {
          final PsiClass refClass=(PsiClass)resolved;
          if (!PsiUtil.isAccessible(refClass,myMethod,null)) {
            refCannotEvaluate.set(Boolean.TRUE);
          }
 else {
            final PsiClass methodContainingClass=myMethod.getContainingClass();
            LOG.assertTrue(methodContainingClass != null);
            if (!(refClass.getParent() instanceof PsiFile) && !PsiTreeUtil.isAncestor(methodContainingClass,refClass,false)) {
              refCannotEvaluate.set(Boolean.TRUE);
            }
          }
        }
      }
    }
  }
);
  return refCannotEvaluate.isNull();
}
