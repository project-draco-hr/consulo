{
  super.visitReferenceExpression(expression);
  final PsiElement element=expression.resolve();
  if (element instanceof PsiMember && !((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC)) {
    if (myMethod.hasModifierProperty(PsiModifier.STATIC)) {
      myConflicts.putValue(expression,"Parameter initializer depends on " + RefactoringUIUtil.getDescription(element,false) + " which is not available inside the static method");
    }
  }
  if (element instanceof PsiMethod || element instanceof PsiField) {
    if (!mySameClass && !((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC)) {
      myConflicts.putValue(expression,"Parameter initializer depend on non static member from some other class");
    }
 else     if (!PsiUtil.isAccessible((PsiMember)element,myMethod,null)) {
      myConflicts.putValue(expression,"Parameter initializer depends on value which is not available inside method");
    }
  }
 else   if (element instanceof PsiParameter) {
    myConflicts.putValue(expression,"Parameter initializer depends on callers parameter");
  }
}
