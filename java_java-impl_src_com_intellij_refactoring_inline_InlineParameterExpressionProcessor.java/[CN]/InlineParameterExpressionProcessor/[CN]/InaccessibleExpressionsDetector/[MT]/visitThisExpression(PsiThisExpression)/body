{
  super.visitThisExpression(thisExpression);
  final PsiJavaCodeReferenceElement qualifier=thisExpression.getQualifier();
  PsiElement containingClass;
  if (qualifier != null) {
    containingClass=qualifier.resolve();
  }
 else {
    containingClass=PsiTreeUtil.getParentOfType(myMethodCall,PsiClass.class);
  }
  final PsiClass methodContainingClass=myMethod.getContainingClass();
  LOG.assertTrue(methodContainingClass != null);
  if (!PsiTreeUtil.isAncestor(containingClass,methodContainingClass,false)) {
    myConflicts.putValue(thisExpression,"Parameter initializer depends on this which is not available inside the method and cannot be inlined");
  }
 else   if (myMethod.hasModifierProperty(PsiModifier.STATIC)) {
    myConflicts.putValue(thisExpression,"Parameter initializer depends on this which is not available inside the static method");
  }
}
