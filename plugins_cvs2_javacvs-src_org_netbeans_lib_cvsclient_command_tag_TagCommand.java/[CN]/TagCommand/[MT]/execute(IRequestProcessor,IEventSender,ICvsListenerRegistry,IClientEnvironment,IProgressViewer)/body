{
  final ICvsFiles cvsFiles;
  try {
    cvsFiles=scanFileSystem(getFileObjects(),clientEnvironment);
  }
 catch (  IOException ex) {
    throw new IOCommandException(ex);
  }
  final Requests requests=new Requests(CommandRequest.TAG,clientEnvironment);
  addFileRequests(cvsFiles,requests,clientEnvironment);
  requests.addArgumentRequest(isDeleteTag(),"-d");
  requests.addArgumentRequest(isMakeBranchTag(),"-b");
  requests.addArgumentRequest(isCheckThatUnmodified(),"-c");
  requests.addArgumentRequest(isOverrideExistingTag(),"-F");
  requests.addArgumentRequest(isAllowMoveDeleteBranchTag(),"-B");
  requests.addArgumentRequest(true,getTag());
  requests.addLocalPathDirectoryRequest();
  addArgumentRequests(requests);
  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);
  final ICvsListener responseProgressHandler=new FileInfoAndMessageResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles,isDeleteTag() ? EXAM_DIR_UNTAG : EXAM_DIR_TAG);
  final ICvsListener tagParser=new TagParser(eventManager,clientEnvironment.getCvsFileSystem());
  final ICvsListener listener=new DualListener(tagParser,responseProgressHandler);
  listener.registerListeners(listenerRegistry);
  try {
    return requestProcessor.processRequests(requests,requestsProgressHandler);
  }
  finally {
    listener.unregisterListeners(listenerRegistry);
  }
}
