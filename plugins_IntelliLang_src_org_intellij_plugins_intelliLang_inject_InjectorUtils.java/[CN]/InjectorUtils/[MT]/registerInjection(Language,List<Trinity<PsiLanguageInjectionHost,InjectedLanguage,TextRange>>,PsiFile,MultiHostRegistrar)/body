{
  if (language == null) {
    return;
  }
  boolean injectionStarted=false;
  for (  Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : list) {
    final PsiLanguageInjectionHost host=trinity.first;
    if (host.getContainingFile() != containingFile)     continue;
    final TextRange textRange=trinity.third;
    final InjectedLanguage injectedLanguage=trinity.second;
    if (!injectionStarted) {
      registrar.startInjecting(language);
      injectionStarted=true;
    }
    if (injectedLanguage.isDynamic()) {
      final StringBuilder prefix=new StringBuilder(injectedLanguage.getPrefix());
      final StringBuilder suffix=new StringBuilder(injectedLanguage.getSuffix());
      adjustPrefixAndSuffix(getUnescapedText(host,textRange.substring(host.getText())),prefix,suffix);
      addPlaceSafe(registrar,prefix.toString(),suffix.toString(),host,textRange);
    }
 else {
      addPlaceSafe(registrar,injectedLanguage.getPrefix(),injectedLanguage.getSuffix(),host,textRange);
    }
  }
  if (injectionStarted) {
    registrar.doneInjecting();
  }
}
