{
  boolean hasPrefix=false;
  String unprefixed=propName;
  if (propName.startsWith("pom.")) {
    unprefixed=propName.substring("pom.".length());
    hasPrefix=true;
  }
 else   if (propName.startsWith("project.")) {
    unprefixed=propName.substring("project.".length());
    hasPrefix=true;
  }
  MavenProject selectedProject=mavenProject;
  while (unprefixed.startsWith("parent.")) {
    MavenId parentId=selectedProject.getParentId();
    if (parentId == null)     return null;
    unprefixed=unprefixed.substring("parent.".length());
    if (unprefixed.equals("groupId")) {
      return parentId.getGroupId();
    }
    if (unprefixed.equals("artifactId")) {
      return parentId.getArtifactId();
    }
    selectedProject=projectsManager.findProject(parentId);
    if (selectedProject == null)     return null;
  }
  if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) {
    return selectedProject.getDirectory();
  }
  String result;
  result=MavenUtil.getPropertiesFromMavenOpts().get(propName);
  if (result != null)   return result;
  result=MavenServerUtil.collectSystemProperties().getProperty(propName);
  if (result != null)   return result;
  result=selectedProject.getModelMap().get(unprefixed);
  if (result != null)   return result;
  result=additionalProperties.getProperty(propName);
  if (result != null)   return result;
  result=mavenProject.getProperties().getProperty(propName);
  if (result != null)   return result;
  return null;
}
