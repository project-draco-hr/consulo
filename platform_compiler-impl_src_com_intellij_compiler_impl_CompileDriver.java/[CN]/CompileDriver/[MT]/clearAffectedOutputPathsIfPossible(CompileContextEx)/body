{
  final List<File> scopeOutputs=new ReadAction<List<File>>(){
    @Override protected void run(    final Result<List<File>> result){
      final MultiMap<File,Module> outputToModulesMap=new MultiMap<File,Module>();
      for (      Module module : ModuleManager.getInstance(myProject).getModules()) {
        ModuleCompilerPathsManager moduleCompilerPathsManager=ModuleCompilerPathsManager.getInstance(module);
        for (        ContentFolderTypeProvider contentFolderTypeProvider : ContentFolderTypeProvider.filter(ContentFolderScopes.productionAndTest())) {
          final String outputPathUrl=moduleCompilerPathsManager.getCompilerOutputUrl(contentFolderTypeProvider);
          if (outputPathUrl != null) {
            final String path=VirtualFileManager.extractPath(outputPathUrl);
            outputToModulesMap.putValue(new File(path),module);
          }
        }
      }
      final Set<Module> affectedModules=new HashSet<Module>(Arrays.asList(context.getCompileScope().getAffectedModules()));
      List<File> scopeOutputs=new ArrayList<File>(affectedModules.size() * 2);
      for (      File output : outputToModulesMap.keySet()) {
        if (affectedModules.containsAll(outputToModulesMap.get(output))) {
          scopeOutputs.add(output);
        }
      }
      final Set<Artifact> artifactsToBuild=ArtifactCompileScope.getArtifactsToBuild(myProject,context.getCompileScope(),true);
      for (      Artifact artifact : artifactsToBuild) {
        final String outputFilePath=((ArtifactImpl)artifact).getOutputDirectoryPathToCleanOnRebuild();
        if (outputFilePath != null) {
          scopeOutputs.add(new File(FileUtil.toSystemDependentName(outputFilePath)));
        }
      }
      result.setResult(scopeOutputs);
    }
  }
.execute().getResultObject();
  if (scopeOutputs.size() > 0) {
    CompilerUtil.runInContext(context,CompilerBundle.message("progress.clearing.output"),new ThrowableRunnable<RuntimeException>(){
      @Override public void run(){
        CompilerUtil.clearOutputDirectories(scopeOutputs);
      }
    }
);
  }
}
