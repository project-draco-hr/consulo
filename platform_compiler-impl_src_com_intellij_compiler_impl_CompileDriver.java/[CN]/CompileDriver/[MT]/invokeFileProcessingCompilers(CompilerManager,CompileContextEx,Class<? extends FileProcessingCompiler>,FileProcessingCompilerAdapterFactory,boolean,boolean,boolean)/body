{
  boolean didSomething=false;
  final FileProcessingCompiler[] compilers=compilerManager.getCompilers(fileProcessingCompilerClass,myCompilerFilter);
  if (compilers.length > 0) {
    try {
      CacheDeferredUpdater cacheUpdater=new CacheDeferredUpdater();
      try {
        for (        final FileProcessingCompiler compiler : compilers) {
          if (context.getProgressIndicator().isCanceled()) {
            throw new ExitException(ExitStatus.CANCELLED);
          }
          CompileContextEx _context=context;
          if (compiler instanceof IntermediateOutputCompiler) {
            final IntermediateOutputCompiler _compiler=(IntermediateOutputCompiler)compiler;
            _context=new CompileContextExProxy(context){
              @Override public VirtualFile getModuleOutputDirectory(              final Module module){
                return getGenerationOutputDir(_compiler,module,false);
              }
              @Override public VirtualFile getModuleOutputDirectoryForTests(              final Module module){
                return getGenerationOutputDir(_compiler,module,true);
              }
            }
;
          }
          final boolean processedSomething=processFiles(factory.create(_context,compiler),forceCompile,checkScope,onlyCheckStatus,cacheUpdater);
          if (context.getMessageCount(CompilerMessageCategory.ERROR) > 0) {
            throw new ExitException(ExitStatus.ERRORS);
          }
          didSomething|=processedSomething;
        }
      }
  finally {
        cacheUpdater.doUpdate();
      }
    }
 catch (    IOException e) {
      LOG.info(e);
      context.requestRebuildNextTime(e.getMessage());
      throw new ExitException(ExitStatus.ERRORS);
    }
catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    ExitException e) {
      throw e;
    }
catch (    Exception e) {
      context.addMessage(CompilerMessageCategory.ERROR,CompilerBundle.message("compiler.error.exception",e.getMessage()),null,-1,-1);
      LOG.error(e);
    }
  }
  return didSomething;
}
