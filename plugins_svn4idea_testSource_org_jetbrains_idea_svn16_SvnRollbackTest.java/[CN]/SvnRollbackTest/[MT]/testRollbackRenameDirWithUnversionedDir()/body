{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final String editedText="s1 edited";
  editFileInCommand(myProject,tree.myS1File,editedText);
  disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final VirtualFile unverionedDir=createDirInCommand(tree.mySourceDir,"unverionedDir");
  final String unvText="unv content";
  final VirtualFile unvFile=createFileInCommand(unverionedDir,"childFile",unvText);
  final File wasUnvDir=new File(unverionedDir.getPath());
  final File wasUnvFile=new File(unvFile.getPath());
  renameFileInCommand(myProject,tree.mySourceDir,"renamed");
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change dirChange=assertRenamedChange(tree.mySourceDir);
  final Change s1Change=assertMovedChange(tree.myS1File);
  FileStatus status=myChangeListManager.getStatus(unverionedDir);
  Assert.assertNotNull(FileStatus.UNKNOWN.equals(status));
  Assert.assertTrue(!wasUnvDir.exists());
  FileStatus fileStatus=myChangeListManager.getStatus(unvFile);
  Assert.assertNotNull(FileStatus.UNKNOWN.equals(fileStatus));
  Assert.assertTrue(!wasUnvFile.exists());
  rollbackIMpl(Collections.singletonList(dirChange),Collections.singletonList(new Change(s1Change.getBeforeRevision(),s1Change.getBeforeRevision(),FileStatus.MODIFIED)));
  Assert.assertTrue(wasUnvDir.exists());
  Assert.assertTrue(wasUnvFile.exists());
}
