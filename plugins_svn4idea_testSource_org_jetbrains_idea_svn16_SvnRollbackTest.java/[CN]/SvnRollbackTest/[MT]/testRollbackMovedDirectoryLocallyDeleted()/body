{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final File wasInitially=new File(tree.mySourceDir.getPath());
  Assert.assertTrue(wasInitially.exists());
  moveFileInCommand(myProject,tree.mySourceDir,tree.myTargetDir);
  Assert.assertTrue(!wasInitially.exists());
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change movedChange=assertMovedChange(tree.mySourceDir);
  final File was=new File(tree.mySourceDir.getPath());
  Assert.assertNotSame(wasInitially,was);
  disableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE);
  deleteFileInCommand(myProject,tree.mySourceDir);
  verify(runSvn("status"),"D root" + File.separator + "source","D root" + File.separator + "source"+ File.separator+ "s1.txt","D root" + File.separator + "source"+ File.separator+ "s2.txt","! root" + File.separator + "target"+ File.separator+ "source","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s1.txt","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s2.txt");
  rollbackLocallyDeleted(Collections.<FilePath>singletonList(new FilePathImpl(was,true)),Collections.<FilePath>emptyList());
  verify(runSvn("status"),"D root" + File.separator + "source","D root" + File.separator + "source"+ File.separator+ "s1.txt","D root" + File.separator + "source"+ File.separator+ "s2.txt");
}
