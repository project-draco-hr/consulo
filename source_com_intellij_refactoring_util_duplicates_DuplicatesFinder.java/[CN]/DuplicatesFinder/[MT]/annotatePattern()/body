{
  for (int i=0; i < myPattern.length; i++) {
    final PsiElement patternComponent=myPattern[i];
    patternComponent.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitReferenceElement(expression);
      }
      public void visitReferenceElement(      PsiJavaCodeReferenceElement reference){
        final PsiElement element=reference.resolve();
        if (myParameters.contains(element)) {
          reference.putUserData(PARAMETER,(PsiVariable)element);
        }
        if (myOutputParameters.contains(element)) {
          reference.putUserData(PARAMETER,(PsiVariable)element);
        }
        PsiElement qualifier=reference.getQualifier();
        if (qualifier != null) {
          qualifier.accept(this);
        }
      }
    }
);
  }
}
