{
  if ((pattern == null || candidate == null))   return pattern == candidate;
  if (pattern.getUserData(PARAMETER) != null) {
    final PsiVariable parameter=pattern.getUserData(PARAMETER);
    return match.putParameter(parameter,candidate);
  }
  if (!canBeEquivalent(pattern,candidate))   return false;
  PsiReference ref1=pattern.getReference();
  if (ref1 != null) {
    PsiReference ref2=candidate.getReference();
    if (ref2 == null)     return false;
    final PsiElement resolveResult1=ref1.resolve();
    final PsiElement resolveResult2=ref2.resolve();
    if (isUnder(resolveResult1,myPatternAsList) && isUnder(resolveResult2,candidates)) {
      return match.putDeclarationCorrespondence(resolveResult1,resolveResult2);
    }
    if (!equivalentResolve(resolveResult1,resolveResult2)) {
      return false;
    }
  }
  if (pattern instanceof PsiReturnStatement) {
    final PsiReturnStatement patternReturnStatement=((PsiReturnStatement)pattern);
    return matchReturnStatement(patternReturnStatement,candidate,candidates,match);
  }
  if (pattern instanceof PsiReferenceExpression && candidate instanceof PsiReferenceExpression) {
    final PsiReferenceExpression patternRefExpr=((PsiReferenceExpression)pattern);
    final PsiReferenceExpression candidateRefExpr=((PsiReferenceExpression)candidate);
    if (patternRefExpr.getQualifierExpression() == null) {
      return match.registerInstanceExpression(candidateRefExpr.getQualifierExpression());
    }
  }
  PsiElement[] children1=getFilteredChildren(pattern);
  PsiElement[] children2=getFilteredChildren(candidate);
  if (children1.length != children2.length)   return false;
  for (int i=0; i < children1.length; i++) {
    PsiElement child1=children1[i];
    PsiElement child2=children2[i];
    if (!matchPattern(child1,child2,candidates,match))     return false;
  }
  if (children1.length == 0) {
    if (pattern.getParent() instanceof PsiVariable && ((PsiVariable)pattern.getParent()).getNameIdentifier() == pattern) {
      return match.putDeclarationCorrespondence(pattern.getParent(),candidate.getParent());
    }
    if (!pattern.textMatches(candidate))     return false;
  }
  return true;
}
