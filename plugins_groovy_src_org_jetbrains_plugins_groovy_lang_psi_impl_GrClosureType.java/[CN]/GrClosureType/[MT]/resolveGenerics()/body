{
  final PsiClass closure=resolve();
  final PsiSubstitutor substitutor;
  if (closure != null && closure.getTypeParameters().length == 1) {
    final PsiTypeParameter parameter=closure.getTypeParameters()[0];
    final Map<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
    map.put(parameter,mySignature.getReturnType());
    substitutor=PsiSubstitutorImpl.createSubstitutor(map);
  }
 else {
    substitutor=PsiSubstitutor.EMPTY;
  }
  return new ClassResolveResult(){
    public PsiClass getElement(){
      return closure;
    }
    public PsiSubstitutor getSubstitutor(){
      return substitutor;
    }
    public boolean isPackagePrefixPackageReference(){
      return false;
    }
    public boolean isAccessible(){
      return true;
    }
    public boolean isStaticsScopeCorrect(){
      return true;
    }
    @Nullable public PsiElement getCurrentFileResolveScope(){
      return null;
    }
    public boolean isValidResult(){
      return isStaticsScopeCorrect() && isAccessible();
    }
  }
;
}
