{
  if (!DO_SLOW_TEST)   return;
  File file=FileUtil.createTempFile("persistent","map");
  EnumeratorStringDescriptor stringDescriptor=new EnumeratorStringDescriptor();
  EnumeratorIntegerDescriptor integerDescriptor=new EnumeratorIntegerDescriptor();
  PersistentHashMap<String,Integer> map=new PersistentHashMap<String,Integer>(file,stringDescriptor,integerDescriptor);
  try {
    final int stringsCount=10000002;
    for (int t=0; t < 4; ++t) {
      for (int i=0; i < stringsCount; ++i) {
        final int finalI=i;
        final int finalT=t;
        PersistentHashMap.ValueDataAppender appender=new PersistentHashMap.ValueDataAppender(){
          @Override public void append(          DataOutput out) throws IOException {
            out.write((finalI + finalT) & 0xFF);
          }
        }
;
        map.appendData(String.valueOf(i),appender);
      }
    }
    map.close();
    map=new PersistentHashMap<String,Integer>(file,stringDescriptor,integerDescriptor);
    for (int i=0; i < stringsCount; ++i) {
      if (i < 2 * stringsCount / 3) {
        map.remove(String.valueOf(i));
      }
    }
    map.close();
    final boolean isSmall=stringsCount < 1000000;
    assertTrue(isSmall || map.makesSenseToCompact());
    long started=System.currentTimeMillis();
    map=new PersistentHashMap<String,Integer>(file,stringDescriptor,integerDescriptor);
    if (isSmall)     map.compact();
    assertTrue(!map.makesSenseToCompact());
    System.out.println(System.currentTimeMillis() - started);
    for (int i=0; i < stringsCount; ++i) {
      if (i >= 2 * stringsCount / 3) {
        Integer s=map.get(String.valueOf(i));
        assertEquals((s & 0xFF),((i + 3) & 0xFF));
        assertEquals(((s >>> 8) & 0xFF),((i + 2) & 0xFF));
        assertEquals((s >>> 16) & 0xFF,((i + 1) & 0xFF));
        assertEquals((s >>> 24) & 0xFF,(i & 0xFF));
      }
    }
  }
  finally {
    clearMap(file,map);
  }
}
