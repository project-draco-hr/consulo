{
  final IntObjectCache<String> stringCache=new IntObjectCache<String>(2000);
  final IntObjectCache.DeletedPairsListener listener=new IntObjectCache.DeletedPairsListener(){
    @Override public void objectRemoved(    final int key,    final Object mapKey){
      try {
        final String _mapKey=(String)mapKey;
        assertEquals(myMap.enumerate(_mapKey),key);
        final String expectedMapValue=_mapKey == null ? null : _mapKey + "_value";
        final String actual=myMap.get(_mapKey);
        assertEquals(expectedMapValue,actual);
        myMap.remove(_mapKey);
        assertNull(myMap.get(_mapKey));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  PlatformTestUtil.startPerformanceTest("Perforamnce",9000,new ThrowableRunnable(){
    @Override public void run() throws Exception {
      try {
        stringCache.addDeletedPairsListener(listener);
        for (int i=0; i < 100000; ++i) {
          final String string=createRandomString();
          final int id=myMap.enumerate(string);
          stringCache.put(id,string);
          myMap.put(string,string + "_value");
        }
        stringCache.removeDeletedPairsListener(listener);
        for (        String key : stringCache) {
          myMap.remove(key);
        }
        stringCache.removeAll();
        myMap.compact();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
).ioBound().assertTiming();
  myMap.close();
  System.out.printf("File size = %d bytes\n",myFile.length());
  System.out.printf("Data file size = %d bytes\n",new File(myDataFile.getParentFile(),myDataFile.getName() + Storage.DATA_EXTENSION).length());
}
