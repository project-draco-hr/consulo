{
  if (lexer == null) {
    lexer=new JavaLexer(LanguageLevelProjectExtension.getInstance(manager.getProject()).getLanguageLevel());
  }
  FilterLexer filterLexer=new FilterLexer(lexer,new FilterLexer.SetFilter(StdTokenSets.WHITE_SPACE_OR_COMMENT_BIT_SET));
  if (state < 0)   filterLexer.start(buffer,startOffset,endOffset);
 else   filterLexer.start(buffer,startOffset,endOffset,state);
  final JavaParsingContext context=new JavaParsingContext(table,LanguageLevelProjectExtension.getInstance(manager.getProject()).getLanguageLevel());
  final FileElement dummyRoot=DummyHolderFactory.createHolder(manager,null,context.getCharTable()).getTreeElement();
  final CompositeElement root=context.getStatementParsing().parseType(filterLexer);
  if (root != null) {
    dummyRoot.rawAddChildren(root);
  }
  if (filterLexer.getTokenType() == JavaTokenType.ELLIPSIS) {
    dummyRoot.rawAddChildren(ParseUtil.createTokenElement(filterLexer,context.getCharTable()));
    filterLexer.advance();
  }
  if (filterLexer.getTokenType() != null) {
    final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("unexpected.tokens"));
    while (filterLexer.getTokenType() != null) {
      final TreeElement token=ParseUtil.createTokenElement(lexer,context.getCharTable());
      errorElement.rawAddChildren(token);
      filterLexer.advance();
    }
    dummyRoot.rawAddChildren(errorElement);
  }
  ParseUtil.insertMissingTokens(dummyRoot,lexer,startOffset,endOffset,state,WhiteSpaceAndCommentsProcessor.INSTANCE,context);
  return dummyRoot.getFirstChildNode();
}
