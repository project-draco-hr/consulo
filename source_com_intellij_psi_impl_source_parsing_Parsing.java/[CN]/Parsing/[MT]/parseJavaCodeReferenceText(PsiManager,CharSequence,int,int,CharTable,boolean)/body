{
  Lexer originalLexer=new JavaLexer(LanguageLevelProjectExtension.getInstance(manager.getProject()).getLanguageLevel());
  FilterLexer lexer=new FilterLexer(originalLexer,new FilterLexer.SetFilter(StdTokenSets.WHITE_SPACE_OR_COMMENT_BIT_SET));
  lexer.start(buffer,startOffset,endOffset,0);
  JavaParsingContext context=new JavaParsingContext(table,LanguageLevelProjectExtension.getInstance(manager.getProject()).getLanguageLevel());
  CompositeElement ref=context.getStatementParsing().parseJavaCodeReference(lexer,false,true);
  final FileElement dummyRoot=DummyHolderFactory.createHolder(manager,null,table).getTreeElement();
  if (ref == null) {
    if (!eatAll)     return null;
  }
 else {
    dummyRoot.rawAddChildren(ref);
  }
  if (lexer.getTokenType() != null) {
    if (!eatAll)     return null;
    final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("unexpected.tokens"));
    while (lexer.getTokenType() != null) {
      final TreeElement token=ParseUtil.createTokenElement(lexer,context.getCharTable());
      errorElement.rawAddChildren(token);
      lexer.advance();
    }
    dummyRoot.rawAddChildren(errorElement);
  }
  ParseUtil.insertMissingTokens(dummyRoot,originalLexer,startOffset,endOffset,-1,WhiteSpaceAndCommentsProcessor.INSTANCE,context);
  return dummyRoot.getFirstChildNode();
}
