{
  final PsiDocTag tag=(PsiDocTag)descriptor.getPsiElement();
  if (!TestNGUtil.checkTestNGInClasspath(tag))   return;
  final PsiMethod method=PsiTreeUtil.getParentOfType(tag,PsiMethod.class);
  LOG.assertTrue(method != null);
  @NonNls String annotationName=StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()));
  int dash=annotationName.indexOf('-');
  if (dash > -1) {
    annotationName=annotationName.substring(0,dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2);
  }
  annotationName="org.testng.annotations." + annotationName;
  final StringBuffer annotationText=new StringBuffer("@");
  annotationText.append(annotationName);
  final PsiClass annotationClass=JavaPsiFacade.getInstance(method.getProject()).findClass(annotationName,method.getResolveScope());
  PsiElement[] dataElements=tag.getDataElements();
  if (dataElements.length > 1) {
    annotationText.append('(');
  }
  if (annotationClass != null) {
    for (    PsiMethod attribute : annotationClass.getMethods()) {
      boolean stripQuotes=false;
      PsiType returnType=attribute.getReturnType();
      if (returnType instanceof PsiPrimitiveType) {
        stripQuotes=true;
      }
      for (int i=0; i < dataElements.length; i++) {
        String text=dataElements[i].getText();
        int equals=text.indexOf('=');
        String value;
        final String key=equals == -1 ? text : text.substring(0,equals).trim();
        if (!key.equals(attribute.getName()))         continue;
        annotationText.append(key).append(" = ");
        if (equals == -1) {
          String next=dataElements[++i].getText().trim();
          if (next.length() == 1) {
            value=dataElements[++i].getText().trim();
          }
 else {
            value=next.substring(1,next.length()).trim();
          }
        }
 else {
          if (equals < text.length() - 1) {
            value=text.substring(equals + 1,text.length()).trim();
          }
 else {
            value=dataElements[++i].getText().trim();
          }
        }
        if (stripQuotes && value.charAt(0) == '\"') {
          value=value.substring(1,value.length() - 1);
        }
        annotationText.append(value);
      }
    }
  }
  if (dataElements.length > 1) {
    annotationText.append(')');
  }
  try {
    final PsiElement inserted=method.getModifierList().addBefore(tag.getManager().getElementFactory().createAnnotationFromText(annotationText.toString(),method),method.getModifierList().getFirstChild());
    JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted);
    final PsiDocComment docComment=PsiTreeUtil.getParentOfType(tag,PsiDocComment.class);
    LOG.assertTrue(docComment != null);
    tag.delete();
    for (    PsiElement element : docComment.getChildren()) {
      if (element instanceof PsiWhiteSpace)       continue;
      if (!(element instanceof PsiDocToken))       return;
      PsiDocToken docToken=(PsiDocToken)element;
      if (docToken.getTokenType() == PsiDocToken.DOC_COMMENT_DATA && docToken.getText().trim().length() > 0) {
        return;
      }
    }
    docComment.delete();
  }
 catch (  IncorrectOperationException e) {
    Messages.showErrorDialog(project,e.getMessage(),CommonBundle.getErrorTitle());
  }
}
