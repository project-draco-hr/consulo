{
  if (candidateClass instanceof PsiAnonymousClass) {
    final PsiClass baseCandidateClass=((PsiAnonymousClass)candidateClass).getBaseClassType().resolve();
    return baseCandidateClass != null && InheritanceUtil.isInheritorOrSelf(baseCandidateClass,baseClass,checkDeep);
  }
  PsiManager manager=candidateClass.getManager();
  if (checkDeep && LOG.isDebugEnabled()) {
    LOG.debug("Using uncached version for " + candidateClass.getQualifiedName() + " and "+ baseClass);
  }
  @NonNls final String baseName=baseClass.getName();
  if ("Object".equals(baseName)) {
    PsiClass objectClass=JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT,candidateClass.getResolveScope());
    if (manager.areElementsEquivalent(baseClass,objectClass)) {
      if (manager.areElementsEquivalent(candidateClass,objectClass))       return false;
      if (checkDeep || candidateClass.isInterface())       return true;
      return manager.areElementsEquivalent(candidateClass.getSuperClass(),objectClass);
    }
  }
  if (!checkDeep) {
    final boolean cInt=candidateClass.isInterface();
    final boolean bInt=baseClass.isInterface();
    if (candidateClass instanceof PsiCompiledElement) {
      String baseQName=baseClass.getQualifiedName();
      if (baseQName == null)       return false;
      GlobalSearchScope scope=candidateClass.getResolveScope();
      if (cInt == bInt && checkReferenceListWithQualifiedNames(baseQName,candidateClass.getExtendsList(),manager,scope))       return true;
      return bInt && !cInt && checkReferenceListWithQualifiedNames(baseQName,candidateClass.getImplementsList(),manager,scope);
    }
    if (cInt == bInt) {
      for (      PsiClassType type : candidateClass.getExtendsListTypes()) {
        if (Comparing.equal(type.getClassName(),baseName)) {
          if (manager.areElementsEquivalent(baseClass,type.resolve())) {
            return true;
          }
        }
      }
    }
 else     if (!cInt) {
      for (      PsiClassType type : candidateClass.getImplementsListTypes()) {
        if (Comparing.equal(type.getClassName(),baseName)) {
          if (manager.areElementsEquivalent(baseClass,type.resolve())) {
            return true;
          }
        }
      }
    }
    return false;
  }
  return isInheritorWithoutCaching(candidateClass,baseClass,checkDeep,checkedClasses);
}
