{
  List<PsiClass> classesToImport=getClassesToImport();
  if (classesToImport.isEmpty())   return Result.POPUP_NOT_SHOWN;
  try {
    String name=getQualifiedName(myElement);
    if (name != null) {
      Pattern pattern=Pattern.compile(DaemonCodeAnalyzerSettings.getInstance().NO_AUTO_IMPORT_PATTERN);
      Matcher matcher=pattern.matcher(name);
      if (matcher.matches()) {
        return Result.POPUP_NOT_SHOWN;
      }
    }
  }
 catch (  PatternSyntaxException e) {
  }
  final PsiFile psiFile=myElement.getContainingFile();
  if (classesToImport.size() > 1) {
    reduceSuggestedClassesBasedOnDependencyRuleViolation(psiFile,classesToImport);
  }
  PsiClass[] classes=classesToImport.toArray(new PsiClass[classesToImport.size()]);
  final Project project=myElement.getProject();
  CodeInsightUtil.sortIdenticalShortNameClasses(classes,myRef);
  final QuestionAction action=createAddImportAction(classes,project,editor);
  DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(project);
  boolean canImportHere=true;
  if (classes.length == 1 && (canImportHere=canImportHere(allowCaretNearRef,editor,psiFile,classes[0].getName())) && (JspPsiUtil.isInJspFile(psiFile) ? CodeInsightSettings.getInstance().JSP_ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY : CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY) && (ApplicationManager.getApplication().isUnitTestMode() || codeAnalyzer.canChangeFileSilently(psiFile)) && !autoImportWillInsertUnexpectedCharacters(classes[0]) && !LaterInvocator.isInModalContext()) {
    CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
      @Override public void run(){
        action.execute();
      }
    }
);
    return Result.CLASS_AUTO_IMPORTED;
  }
  if (allowPopup && canImportHere) {
    String hintText=ShowAutoImportPass.getMessage(classes.length > 1,classes[0].getQualifiedName());
    if (!ApplicationManager.getApplication().isUnitTestMode() && !HintManager.getInstance().hasShownHintsThatWillHideByOtherHint(true)) {
      HintManager.getInstance().showQuestionHint(editor,hintText,getStartOffset(myElement,myRef),getEndOffset(myElement,myRef),action);
    }
    return Result.POPUP_SHOWN;
  }
  return Result.POPUP_NOT_SHOWN;
}
