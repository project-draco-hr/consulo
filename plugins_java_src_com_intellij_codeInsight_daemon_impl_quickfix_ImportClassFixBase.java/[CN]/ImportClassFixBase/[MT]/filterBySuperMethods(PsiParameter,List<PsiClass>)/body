{
  PsiElement parent=parameter.getParent();
  if (parent instanceof PsiParameterList) {
    PsiElement granny=parent.getParent();
    if (granny instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)granny;
      if (method.getModifierList().findAnnotation(CommonClassNames.JAVA_LANG_OVERRIDE) != null) {
        PsiClass aClass=method.getContainingClass();
        final Set<PsiClass> probableTypes=new HashSet<PsiClass>();
        InheritanceUtil.processSupers(aClass,false,new Processor<PsiClass>(){
          @Override public boolean process(          PsiClass psiClass){
            for (            PsiMethod psiMethod : psiClass.findMethodsByName(method.getName(),false)) {
              for (              PsiParameter psiParameter : psiMethod.getParameterList().getParameters()) {
                ContainerUtil.addIfNotNull(probableTypes,PsiUtil.resolveClassInClassTypeOnly(psiParameter.getType()));
              }
            }
            return true;
          }
        }
);
        List<PsiClass> filtered=ContainerUtil.filter(candidates,new Condition<PsiClass>(){
          @Override public boolean value(          PsiClass psiClass){
            return probableTypes.contains(psiClass);
          }
        }
);
        if (!filtered.isEmpty()) {
          return filtered;
        }
      }
    }
  }
  return candidates;
}
