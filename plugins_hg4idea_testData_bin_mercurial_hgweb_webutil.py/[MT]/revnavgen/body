def revnavgen(pos, pagelen, limit, nodefunc):

    def seq(factor, limit=None):
        if limit:
            yield limit
            if ((limit >= 20) and (limit <= 40)):
                yield 50
        else:
            yield (1 * factor)
            yield (3 * factor)
        for f in seq((factor * 10)):
            yield f
    navbefore = []
    navafter = []
    last = 0
    for f in seq(1, pagelen):
        if ((f < pagelen) or (f <= last)):
            continue
        if (f > limit):
            break
        last = f
        if ((pos + f) < limit):
            navafter.append((('+%d' % f), hex(nodefunc((pos + f)).node())))
        if ((pos - f) >= 0):
            navbefore.insert(0, (('-%d' % f), hex(nodefunc((pos - f)).node())))
    navafter.append(('tip', 'tip'))
    try:
        navbefore.insert(0, ('(0)', hex(nodefunc('0').node())))
    except error.RepoError:
        pass

    def gen(l):

        def f(**map):
            for (label, node) in l:
                yield {'label': label, 'node': node, }
        return f
    return (dict(before=gen(navbefore), after=gen(navafter)),)
