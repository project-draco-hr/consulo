{
  if (original == null)   return null;
  boolean captured=false;
  PsiType copy=substituted;
  if (copy instanceof PsiCapturedWildcardType) {
    captured=true;
    copy=((PsiCapturedWildcardType)substituted).getWildcard();
  }
  if (copy instanceof PsiWildcardType && !((PsiWildcardType)copy).isSuper()) {
    PsiWildcardType wildcardType=(PsiWildcardType)copy;
    if (original instanceof PsiClassType) {
      PsiClass aClass=((PsiClassType)original).resolve();
      if (aClass instanceof PsiTypeParameter) {
        final PsiType boundType=visitor.substituteInternal(aClass.getSuperTypes()[0]);
        if (boundType != null && !boundType.equalsToText("java.lang.Object")) {
          final PsiManager manager=aClass.getManager();
          if (wildcardType.isExtends()) {
            final PsiType glb=GenericsUtil.getGreatestLowerBound(wildcardType.getBound(),boundType);
            if (glb != null) {
              PsiWildcardType corrected=PsiWildcardType.createExtends(manager,glb);
              return captured ? PsiCapturedWildcardType.create(corrected) : ((PsiType)corrected);
            }
          }
 else {
            PsiWildcardType corrected=PsiWildcardType.createExtends(manager,boundType);
            return captured ? PsiCapturedWildcardType.create(corrected) : ((PsiType)corrected);
          }
        }
      }
    }
  }
  if (substituted == null) {
    return original.accept(new PsiTypeVisitor<PsiType>(){
      public PsiType visitArrayType(      PsiArrayType arrayType){
        return new PsiArrayType(arrayType.getComponentType().accept(this));
      }
      public PsiType visitEllipsisType(      PsiEllipsisType ellipsisType){
        return new PsiEllipsisType(ellipsisType.getComponentType().accept(this));
      }
      public PsiType visitClassType(      PsiClassType classType){
        PsiClass aClass=classType.resolve();
        return rawTypeForTypeParameter((PsiTypeParameter)aClass);
      }
      public PsiType visitType(      PsiType type){
        LOG.assertTrue(false);
        return null;
      }
    }
);
  }
  return substituted;
}
