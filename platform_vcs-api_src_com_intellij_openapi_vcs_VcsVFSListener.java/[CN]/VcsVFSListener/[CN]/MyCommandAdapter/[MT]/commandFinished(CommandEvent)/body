{
  if (myProject != event.getProject())   return;
  myCommandLevel--;
  if (myCommandLevel == 0) {
    if (!myAddedFiles.isEmpty() || !myDeletedFiles.isEmpty() || !myDeletedWithoutConfirmFiles.isEmpty()|| !myMovedFiles.isEmpty()|| !myDirtyFiles.isEmpty()) {
      myCommandLevel++;
      try {
        FileDocumentManager.getInstance().saveAllDocuments();
      }
  finally {
        myCommandLevel--;
      }
      checkMovedAddedSourceBack();
      if (!myAddedFiles.isEmpty()) {
        executeAdd();
      }
      if (!myDeletedFiles.isEmpty() || !myDeletedWithoutConfirmFiles.isEmpty()) {
        executeDelete();
      }
      if (!myMovedFiles.isEmpty()) {
        executeMoveRename();
      }
      if (!myDirtyFiles.isEmpty()) {
        final List<VirtualFile> files=new ArrayList<VirtualFile>();
        final List<VirtualFile> dirs=new ArrayList<VirtualFile>();
        for (        VirtualFile dirtyFile : myDirtyFiles) {
          if (dirtyFile != null) {
            if (dirtyFile.isDirectory()) {
              dirs.add(dirtyFile);
            }
 else {
              files.add(dirtyFile);
            }
          }
        }
        myDirtyScopeManager.filesDirty(files,dirs);
        myDirtyFiles.clear();
      }
      if (!myExceptions.isEmpty()) {
        AbstractVcsHelper.getInstance(myProject).showErrors(myExceptions,myVcs.getDisplayName() + " operations errors");
      }
    }
  }
}
