def makepatch(ui, repo, patch, opts, _charsets, idx, total, patchname=None):
    desc = []
    node = None
    body = ''
    for line in patch:
        if line.startswith('#'):
            if line.startswith('# Node ID'):
                node = line.split()[(-1)]
            continue
        if (line.startswith('diff -r') or line.startswith('diff --git')):
            break
        desc.append(line)
    if ((not patchname) and (not node)):
        raise ValueError
    if opts.get('attach'):
        body = ('\n'.join(desc[1:]).strip() or 'Patch subject is complete summary.')
        body += '\n\n\n'
    if opts.get('plain'):
        while (patch and patch[0].startswith('# ')):
            patch.pop(0)
        if patch:
            patch.pop(0)
        while (patch and (not patch[0].strip())):
            patch.pop(0)
    if opts.get('diffstat'):
        body += (cdiffstat(ui, '\n'.join(desc), patch) + '\n\n')
    if (opts.get('attach') or opts.get('inline')):
        msg = email.MIMEMultipart.MIMEMultipart()
        if body:
            msg.attach(mail.mimeencode(ui, body, _charsets, opts.get('test')))
        p = mail.mimetextpatch('\n'.join(patch), 'x-patch', opts.get('test'))
        binnode = bin(node)
        if (not patchname):
            patchtags = [t for t in repo.nodetags(binnode) if (t.endswith('.patch') or t.endswith('.diff'))]
            if patchtags:
                patchname = patchtags[0]
            elif (total > 1):
                patchname = cmdutil.make_filename(repo, '%b-%n.patch', binnode, seqno=idx, total=total)
            else:
                patchname = cmdutil.make_filename(repo, '%b.patch', binnode)
        disposition = 'inline'
        if opts.get('attach'):
            disposition = 'attachment'
        p['Content-Disposition'] = ((disposition + '; filename=') + patchname)
        msg.attach(p)
    else:
        body += '\n'.join(patch)
        msg = mail.mimetextpatch(body, display=opts.get('test'))
    flag = ' '.join(opts.get('flag'))
    if flag:
        flag = (' ' + flag)
    subj = desc[0].strip().rstrip('. ')
    if ((total == 1) and (not opts.get('intro'))):
        subj = ('[PATCH%s] %s' % (flag, (opts.get('subject') or subj)))
    else:
        tlen = len(str(total))
        subj = ('[PATCH %0*d of %d%s] %s' % (tlen, idx, total, flag, subj))
    msg['Subject'] = mail.headencode(ui, subj, _charsets, opts.get('test'))
    msg['X-Mercurial-Node'] = node
    return (msg, subj)
