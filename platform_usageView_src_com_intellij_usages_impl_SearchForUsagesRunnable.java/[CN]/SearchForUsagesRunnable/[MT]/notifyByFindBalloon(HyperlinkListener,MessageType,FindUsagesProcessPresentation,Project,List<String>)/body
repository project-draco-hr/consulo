{
  com.intellij.usageView.UsageViewManager.getInstance(project);
  final Collection<PsiFile> largeFiles=processPresentation.getLargeFiles();
  List<String> resultLines=new ArrayList<String>(lines);
  HyperlinkListener resultListener=listener;
  if (!largeFiles.isEmpty()) {
    String shortMessage="(<a href='" + LARGE_FILES_HREF_TARGET + "'>"+ UsageViewBundle.message("large.files.were.ignored",largeFiles.size())+ "</a>)";
    resultLines.add(shortMessage);
    resultListener=addHrefHandling(resultListener,LARGE_FILES_HREF_TARGET,new Runnable(){
      @Override public void run(){
        String detailedMessage=detailedLargeFilesMessage(largeFiles);
        List<String> strings=new ArrayList<String>(lines);
        strings.add(detailedMessage);
        ToolWindowManager.getInstance(project).notifyByBalloon(ToolWindowId.FIND,info,wrapInHtml(strings),AllIcons.Actions.Find,listener);
      }
    }
);
  }
  Runnable searchIncludingProjectFileUsages=processPresentation.searchIncludingProjectFileUsages();
  if (searchIncludingProjectFileUsages != null) {
    resultLines.add("Occurrences in " + ApplicationNamesInfo.getInstance().getProductName() + " project files are skipped. "+ "<a href='"+ SHOW_PROJECT_FILE_OCCURRENCES_HREF_TARGET+ "'>Include them</a>");
    resultListener=addHrefHandling(resultListener,SHOW_PROJECT_FILE_OCCURRENCES_HREF_TARGET,searchIncludingProjectFileUsages);
  }
  ToolWindowManager.getInstance(project).notifyByBalloon(ToolWindowId.FIND,info,wrapInHtml(resultLines),AllIcons.Actions.Find,resultListener);
}
