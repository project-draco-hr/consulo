def purge(ui, repo, *dirs, **opts):
    'removes files not tracked by Mercurial\n\n    Delete files not known to Mercurial. This is useful to test local\n    and uncommitted changes in an otherwise-clean source tree.\n\n    This means that purge will delete:\n\n    - Unknown files: files marked with "?" by "hg status"\n    - Empty directories: in fact Mercurial ignores directories unless\n      they contain files under source control management\n\n    But it will leave untouched:\n\n    - Modified and unmodified tracked files\n    - Ignored files (unless --all is specified)\n    - New files added to the repository (with "hg add")\n\n    If directories are given on the command line, only files in these\n    directories are considered.\n\n    Be careful with purge, as you could irreversibly delete some files\n    you forgot to add to the repository. If you only want to print the\n    list of files that this program would delete, use the --print\n    option.\n    '
    act = (not opts['print'])
    eol = '\n'
    if opts['print0']:
        eol = '\x00'
        act = False

    def remove(remove_func, name):
        if act:
            try:
                remove_func(repo.wjoin(name))
            except OSError:
                m = (_('%s cannot be removed') % name)
                if opts['abort_on_err']:
                    raise util.Abort(m)
                ui.warn((_('warning: %s\n') % m))
        else:
            ui.write(('%s%s' % (name, eol)))

    def removefile(path):
        try:
            os.remove(path)
        except OSError:
            s = os.stat(path)
            if ((s.st_mode & stat.S_IWRITE) != 0):
                raise
            os.chmod(path, (stat.S_IMODE(s.st_mode) | stat.S_IWRITE))
            os.remove(path)
    directories = []
    match = cmdutil.match(repo, dirs, opts)
    match.dir = directories.append
    status = repo.status(match=match, ignored=opts['all'], unknown=True)
    for f in sorted((status[4] + status[5])):
        ui.note((_('Removing file %s\n') % f))
        remove(removefile, f)
    for f in sorted(directories, reverse=True):
        if (match(f) and (not os.listdir(repo.wjoin(f)))):
            ui.note((_('Removing directory %s\n') % f))
            remove(os.rmdir, f)
