{
  super(project,true);
  myProject=project;
  init();
  setTitle(UIDesignerBundle.message("client.properties.title"));
  myManager=ClientPropertiesManager.getInstance(project).clone();
  myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath leadSelectionPath=e.getNewLeadSelectionPath();
      if (leadSelectionPath == null)       return;
      final DefaultMutableTreeNode node=(DefaultMutableTreeNode)leadSelectionPath.getLastPathComponent();
      mySelectedClass=(Class)node.getUserObject();
      updateSelectedProperties();
    }
  }
);
  myClassTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
      if (node.getUserObject() instanceof Class) {
        Class cls=(Class)node.getUserObject();
        if (cls != null) {
          append(cls.getName(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
        }
      }
    }
  }
);
  createToolBar(new AddClassAction(),new RemoveClassAction(),myClassToolBarPanel,myClassTree);
  createToolBar(new AddPropertyAction(),new RemovePropertyAction(),myPropertyToolBarPanel,myPropertiesTable);
  myPropertiesTable.setModel(myTableModel);
  final int location=DimensionService.getInstance().getExtendedState(getDimensionKey());
  if (location > 0) {
    mySplitPane.setDividerLocation(location);
  }
  fillClassTree();
}
