{
  final PsiMethod[] methodsByName=aClass.findMethodsByName(patternMethod.getName(),checkBases);
  final ArrayList<PsiMethod> methods=new ArrayList<PsiMethod>();
  final MethodSignature patternSignature=patternMethod.getSignature(PsiSubstitutor.EMPTY);
  for (int i=0; i < methodsByName.length; i++) {
    final PsiMethod method=methodsByName[i];
    final PsiClass superClass=method.getContainingClass();
    final PsiSubstitutor substitutor;
    if (checkBases && !aClass.equals(superClass)) {
      substitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,aClass,PsiSubstitutor.EMPTY);
      LOG.assertTrue(substitutor != null);
    }
 else {
      substitutor=PsiSubstitutor.EMPTY;
    }
    final MethodSignature signature=method.getSignature(substitutor);
    if (signature.equals(patternSignature)) {
      methods.add(method);
      if (stopOnFirst)       break;
    }
  }
  return methods.toArray(new PsiMethod[methods.size()]);
}
