{
  final Object data;
synchronized (PsiLock.LOCK) {
    data=psiClass.getUserData(ALL_MAPS_BUILT_FLAG);
  }
  if (data != null)   return;
  if (map.containsKey(NULL))   return;
  final List<Pair<T,PsiSubstitutor>> list=new ArrayList<Pair<T,PsiSubstitutor>>();
  processDeclarationsInClassNotCached(psiClass,new FilterScopeProcessor(new ClassFilter(type),null,list){
    protected void add(    PsiElement element,    PsiSubstitutor substitutor){
      list.add(new Pair<T,PsiSubstitutor>((T)element,substitutor));
    }
  }
,PsiSubstitutor.EMPTY,new HashSet(),null,psiClass);
synchronized (map) {
    map.put(ALL,list);
    final Iterator<Pair<T,PsiSubstitutor>> iterator=list.iterator();
    while (iterator.hasNext()) {
      final Pair<T,PsiSubstitutor> info=iterator.next();
      final T element=info.getFirst();
      final String currentName=element.getName();
      List<Pair<T,PsiSubstitutor>> elementsList=map.get(currentName);
      if (elementsList == null) {
        elementsList=new ArrayList<Pair<T,PsiSubstitutor>>(1);
        map.put(currentName,elementsList);
      }
      elementsList.add(info);
    }
    map.put(NULL,null);
  }
}
