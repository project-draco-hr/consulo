{
  if (psiClass instanceof PsiAnonymousClass) {
    PsiClassType baseClassType=((PsiAnonymousClass)psiClass).getBaseClassType();
    PsiClass baseClass=baseClassType.resolve();
    if (baseClass == null || !baseClass.isInterface()) {
      return new PsiClassType[]{baseClassType};
    }
 else {
      PsiClass objectClass=psiClass.getManager().findClass("java.lang.Object",psiClass.getResolveScope());
      if (objectClass != null) {
        return new PsiClassType[]{new PsiImmediateClassType(objectClass,PsiSubstitutor.EMPTY),baseClassType};
      }
 else {
        return new PsiClassType[]{baseClassType};
      }
    }
  }
  List<PsiClassType> result=new ArrayList<PsiClassType>();
  PsiClassType[] extendsTypes=psiClass.getExtendsListTypes();
  result.addAll(Arrays.asList(extendsTypes));
  boolean noExtends=extendsTypes.length == 0;
  result.addAll(Arrays.asList(psiClass.getImplementsListTypes()));
  final PsiReferenceList[] extendsListOut=new PsiReferenceList[1];
  final PsiReferenceList[] implementsListOut=new PsiReferenceList[1];
  psiClass.getManager().getAspectManager().getIntroducedParents(psiClass,extendsListOut,implementsListOut);
  noExtends=noExtends && extendsListOut[0] == null;
  addReferenceTypes(extendsListOut[0],result);
  addReferenceTypes(implementsListOut[0],result);
  if (noExtends) {
    PsiManager manager=psiClass.getManager();
    PsiClass objectClass=manager.findClass("java.lang.Object",psiClass.getResolveScope());
    if (objectClass != null && !manager.areElementsEquivalent(psiClass,objectClass)) {
      result.add(0,manager.getElementFactory().createType(objectClass));
    }
  }
  return result.toArray(new PsiClassType[result.size()]);
}
