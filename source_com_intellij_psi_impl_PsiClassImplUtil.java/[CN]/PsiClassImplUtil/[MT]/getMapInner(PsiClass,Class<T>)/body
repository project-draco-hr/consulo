{
  if (!psiClass.isPhysical()) {
    final Map<String,List<Pair<T,PsiSubstitutor>>> hashMap=new HashMap<String,List<Pair<T,PsiSubstitutor>>>();
    buildMap(psiClass,hashMap,type);
    return hashMap;
  }
  final Map<String,List<Pair<T,PsiSubstitutor>>> map;
synchronized (PsiLock.LOCK) {
    Map<String,Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable>> mapInClass=(Map<String,Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable>>)psiClass.getUserData(MAP_IN_CLASS_KEY);
    if (mapInClass == null) {
      mapInClass=new HashMap<String,Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable>>();
      psiClass.putUserData(MAP_IN_CLASS_KEY,mapInClass);
    }
    final String typeName=type.getName();
    final Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable> value=mapInClass.get(typeName);
    if (value == null) {
      map=Collections.synchronizedMap(new HashMap<String,List<Pair<T,PsiSubstitutor>>>());
      final Map<String,Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable>> mapInClass1=mapInClass;
      final Runnable cleaner=new Runnable(){
        public void run(){
synchronized (PsiLock.LOCK) {
            psiClass.putUserData(ALL_MAPS_BUILT_FLAG,null);
            mapInClass1.remove(typeName);
          }
        }
      }
;
      mapInClass.put(typeName,new Pair<Map<String,List<Pair<T,PsiSubstitutor>>>,Runnable>(map,cleaner));
      PsiManagerImpl manager=(PsiManagerImpl)psiClass.getManager();
      manager.registerWeakRunnableToRunOnChange(cleaner);
    }
 else {
      map=value.first;
    }
    ;
  }
  return map;
}
