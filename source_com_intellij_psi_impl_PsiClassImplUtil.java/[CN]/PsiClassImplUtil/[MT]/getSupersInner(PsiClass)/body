{
  PsiClassType[] extendsListTypes=psiClass.getExtendsListTypes();
  PsiClassType[] implementsListTypes=psiClass.getImplementsListTypes();
  if (psiClass.isInterface()) {
    return resolveClassReferenceList(extendsListTypes,psiClass.getManager(),psiClass.getResolveScope(),true);
  }
  if (psiClass instanceof PsiAnonymousClass) {
    PsiAnonymousClass psiAnonymousClass=(PsiAnonymousClass)psiClass;
    PsiClassType baseClassReference=psiAnonymousClass.getBaseClassType();
    PsiClass baseClass=baseClassReference.resolve();
    if (baseClass != null) {
      if (baseClass.isInterface()) {
        PsiClass objectClass=psiClass.getManager().findClass("java.lang.Object",psiClass.getResolveScope());
        return objectClass != null ? new PsiClass[]{objectClass,baseClass} : new PsiClass[]{baseClass};
      }
      return new PsiClass[]{baseClass};
    }
    PsiClass objectClass=psiClass.getManager().findClass("java.lang.Object",psiClass.getResolveScope());
    return objectClass != null ? new PsiClass[]{objectClass} : PsiClass.EMPTY_ARRAY;
  }
 else   if (psiClass instanceof PsiTypeParameter) {
    if (extendsListTypes.length == 0) {
      final PsiClass objectClass=psiClass.getManager().findClass("java.lang.Object",psiClass.getResolveScope());
      return objectClass != null ? new PsiClass[]{objectClass} : PsiClass.EMPTY_ARRAY;
    }
    return resolveClassReferenceList(extendsListTypes,psiClass.getManager(),psiClass.getResolveScope(),false);
  }
  PsiClass[] interfaces=resolveClassReferenceList(implementsListTypes,psiClass.getManager(),psiClass.getResolveScope(),false);
  PsiClass superClass=getSuperClass(psiClass);
  if (superClass == null)   return interfaces;
  PsiClass[] types=new PsiClass[interfaces.length + 1];
  types[0]=superClass;
  System.arraycopy(interfaces,0,types,1,interfaces.length);
  return types;
}
