{
  PsiReferenceList[] introducedExtendsList=new PsiReferenceList[1];
  PsiReferenceList[] introducedImplementsList=new PsiReferenceList[1];
  psiClass.getManager().getAspectManager().getIntroducedParents(psiClass,introducedExtendsList,introducedImplementsList);
  final PsiClassType[] extendsListTypes;
  if (introducedExtendsList[0] == null) {
    extendsListTypes=psiClass.getExtendsListTypes();
  }
 else {
    extendsListTypes=introducedExtendsList[0].getReferencedTypes();
  }
  final PsiClassType[] implementsListTypes;
  if (introducedImplementsList[0] == null) {
    implementsListTypes=psiClass.getImplementsListTypes();
  }
 else {
    implementsListTypes=introducedImplementsList[0].getReferencedTypes();
  }
  if (psiClass.isInterface()) {
    return resolveClassReferenceList(extendsListTypes,psiClass.getManager(),psiClass.getResolveScope(),false);
  }
  if (psiClass instanceof PsiAnonymousClass) {
    PsiClassType baseClassReference=((PsiAnonymousClass)psiClass).getBaseClassType();
    PsiClass baseClass=baseClassReference.resolve();
    if (baseClass != null && baseClass.isInterface())     return new PsiClass[]{baseClass};
    return PsiClass.EMPTY_ARRAY;
  }
  return resolveClassReferenceList(implementsListTypes,psiClass.getManager(),psiClass.getResolveScope(),false);
}
