{
  final List<Pair<PsiMember,PsiSubstitutor>> classes=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  final List<Pair<PsiMember,PsiSubstitutor>> fields=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  final List<Pair<PsiMember,PsiSubstitutor>> methods=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  FilterScopeProcessor<MethodCandidateInfo> processor=new FilterScopeProcessor<MethodCandidateInfo>(new OrFilter(new ClassFilter(PsiMethod.class),new ClassFilter(PsiField.class),new ClassFilter(PsiClass.class))){
    protected void add(    PsiElement element,    PsiSubstitutor substitutor){
      if (element instanceof PsiMethod) {
        methods.add(new Pair<PsiMember,PsiSubstitutor>((PsiMethod)element,substitutor));
      }
 else       if (element instanceof PsiField) {
        fields.add(new Pair<PsiMember,PsiSubstitutor>((PsiField)element,substitutor));
      }
 else       if (element instanceof PsiClass) {
        classes.add(new Pair<PsiMember,PsiSubstitutor>((PsiClass)element,substitutor));
      }
    }
  }
;
  PsiElementFactory factory=JavaPsiFacade.getInstance(psiClass.getProject()).getElementFactory();
  processDeclarationsInClassNotCached(psiClass,processor,ResolveState.initial(),new THashSet<PsiClass>(),null,psiClass,false,factory);
  Map<Class<? extends PsiMember>,Map<String,List<Pair<PsiMember,PsiSubstitutor>>>> result=new HashMap<Class<? extends PsiMember>,Map<String,List<Pair<PsiMember,PsiSubstitutor>>>>(3);
  result.put(PsiClass.class,generateMapByList(classes));
  result.put(PsiMethod.class,generateMapByList(methods));
  result.put(PsiField.class,generateMapByList(fields));
  psiClass.putUserData(NAME_MAPS_BUILT_FLAG,Boolean.TRUE);
  return result;
}
