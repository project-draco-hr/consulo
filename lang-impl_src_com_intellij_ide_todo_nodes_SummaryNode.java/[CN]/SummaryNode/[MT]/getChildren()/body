{
  ArrayList<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
  if (myToDoSettings.isModulesShown()) {
    for (Iterator i=myBuilder.getAllFiles(); i.hasNext(); ) {
      final PsiFile psiFile=(PsiFile)i.next();
      if (psiFile == null) {
        continue;
      }
      final VirtualFile virtualFile=psiFile.getVirtualFile();
      Module module=projectFileIndex.getModuleForFile(virtualFile);
      if (module != null) {
        ModuleToDoNode moduleToDoNode=new ModuleToDoNode(getProject(),module,myBuilder);
        if (!children.contains(moduleToDoNode)) {
          children.add(moduleToDoNode);
        }
      }
    }
  }
 else {
    if (myToDoSettings.getIsPackagesShown()) {
      if (myBuilder instanceof CurrentFileTodosTreeBuilder) {
        final Iterator allFiles=myBuilder.getAllFiles();
        if (allFiles.hasNext()) {
          children.add(new TodoFileNode(myProject,(PsiFile)allFiles.next(),myBuilder,false));
        }
      }
 else {
        TodoTreeHelper.getInstance(getProject()).addPackagesToChildren(children,null,myBuilder);
      }
    }
 else {
      for (Iterator i=myBuilder.getAllFiles(); i.hasNext(); ) {
        final PsiFile psiFile=(PsiFile)i.next();
        if (psiFile == null) {
          continue;
        }
        TodoFileNode fileNode=new TodoFileNode(getProject(),psiFile,myBuilder,false);
        if (getTreeStructure().accept(psiFile) && !children.contains(fileNode)) {
          children.add(fileNode);
        }
      }
    }
  }
  Collections.sort(children,TodoFileDirAndModuleComparator.INSTANCE);
  return children;
}
