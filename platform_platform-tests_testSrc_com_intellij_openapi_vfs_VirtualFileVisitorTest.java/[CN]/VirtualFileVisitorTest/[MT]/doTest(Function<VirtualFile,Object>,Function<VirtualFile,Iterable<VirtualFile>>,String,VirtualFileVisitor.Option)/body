{
  final StringBuilder sb=new StringBuilder();
  try {
    VfsUtilCore.visitChildrenRecursively(myRoot,new VirtualFileVisitor<Integer>(options){
{
        setValueForChildren(0);
      }
      private int level=0;
      @NotNull @Override public Result visitFileEx(      @NotNull VirtualFile file){
        sb.append(StringUtil.repeat("  ",level++)).append("-> ").append(file.getName()).append(" [").append(getCurrentValue()).append("]\n");
        setValueForChildren(getCurrentValue() + 1);
        if (condition != null) {
          Object result=condition.fun(file);
          if (result instanceof Result)           return (Result)result;
          if (result instanceof VirtualFile)           return skipTo((VirtualFile)result);
        }
        return CONTINUE;
      }
      @Override public void afterChildrenVisited(      @NotNull VirtualFile file){
        sb.append(StringUtil.repeat("  ",--level)).append("<- ").append(file.getName()).append(" [").append(getCurrentValue()).append("]\n");
      }
      @Nullable @Override public Iterable<VirtualFile> getChildrenIterable(      @NotNull VirtualFile file){
        return iterable != null ? iterable.fun(file) : super.getChildrenIterable(file);
      }
    }
);
  }
 catch (  AbortException ignore) {
  }
  assertEquals(expected,sb.toString());
}
