{
  final TreeSet<TextRange> ranges=new TreeSet<TextRange>(RANGE_COMPARATOR);
  final PsiFile containingFile=host.getContainingFile();
  getInjectedLanguage(host,new PairProcessor<Language,List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>>(){
    public boolean process(    final Language language,    List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list){
      for (      Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : list) {
        if (ranges.contains(trinity.third.shiftRight(trinity.first.getTextRange().getStartOffset())))         return true;
      }
      for (      Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : list) {
        final PsiLanguageInjectionHost host=trinity.first;
        if (host.getContainingFile() != containingFile)         continue;
        final TextRange textRange=trinity.third;
        ranges.add(textRange.shiftRight(host.getTextRange().getStartOffset()));
      }
      registerInjection(language,list,containingFile,registrar);
      return true;
    }
  }
);
}
