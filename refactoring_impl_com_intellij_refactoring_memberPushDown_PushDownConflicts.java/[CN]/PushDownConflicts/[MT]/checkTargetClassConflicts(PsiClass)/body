{
  for (  final PsiMember movedMember : myMovedMembers) {
    if (movedMember instanceof PsiField) {
      String name=movedMember.getName();
      if (targetClass.findFieldByName(name,false) != null) {
        String message=RefactoringBundle.message("0.already.contains.field.1",ConflictsUtil.getDescription(targetClass,false),CommonRefactoringUtil.htmlEmphasize(name));
        myConflicts.add(ConflictsUtil.capitalize(message));
      }
    }
 else     if (movedMember instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)movedMember;
      if (targetClass.findMethodBySignature(method,false) != null) {
        String message=RefactoringBundle.message("0.is.already.overridden.in.1",ConflictsUtil.getDescription(method,true),ConflictsUtil.getDescription(targetClass,false));
        myConflicts.add(ConflictsUtil.capitalize(message));
      }
    }
 else     if (movedMember instanceof PsiClass) {
      PsiClass aClass=(PsiClass)movedMember;
      final String name=aClass.getName();
      final PsiClass[] allInnerClasses=targetClass.getAllInnerClasses();
      for (      PsiClass innerClass : allInnerClasses) {
        if (innerClass.equals(movedMember))         continue;
        if (name.equals(innerClass.getName())) {
          String message=RefactoringBundle.message("0.already.contains.inner.class.named.1",ConflictsUtil.getDescription(targetClass,false),CommonRefactoringUtil.htmlEmphasize(name));
          myConflicts.add(message);
        }
      }
    }
    Members:     for (    PsiMember member : myMovedMembers) {
      final PsiReference[] refs=ReferencesSearch.search(member,member.getResolveScope(),false).toArray(new PsiReference[0]);
      for (      PsiReference ref : refs) {
        final PsiElement element=ref.getElement();
        if (element instanceof PsiReferenceExpression) {
          final PsiReferenceExpression referenceExpression=((PsiReferenceExpression)element);
          final PsiExpression qualifier=referenceExpression.getQualifierExpression();
          if (qualifier != null) {
            final PsiType qualifierType=qualifier.getType();
            if (qualifierType instanceof PsiClassType) {
              final PsiClass aClass=((PsiClassType)qualifierType).resolve();
              if (!InheritanceUtil.isInheritorOrSelf(aClass,targetClass,true)) {
                myConflicts.add(RefactoringBundle.message("pushed.members.will.not.be.visible.from.certain.call.sites"));
                break Members;
              }
            }
          }
        }
      }
    }
  }
}
