{
  final String name=myElement.getName();
  final JavaFxResolveProcessor resolveProcessor=new JavaFxResolveProcessor(name);
  PsiType type=myQualifier.getType();
  if (type instanceof JavaFxFunctionType && myQualifier instanceof JavaFxCallExpression) {
    type=((JavaFxFunctionType)type).getReturnType();
  }
  if (type instanceof JavaFxSequenceType && myQualifier instanceof JavaFxIndexExpression) {
    type=((JavaFxSequenceType)type).getElementType();
  }
  if (type instanceof JavaFxClassType) {
    final PsiElement classElement=((JavaFxClassType)type).getClassElement(myElement.getProject());
    if (processClass(resolveProcessor,classElement)) {
      return JavaFxResolveUtil.createResolveResult(resolveProcessor.getResult());
    }
  }
  if (type instanceof PsiClassReferenceType) {
    if (processClass(resolveProcessor,((PsiClassReferenceType)type).resolve())) {
      return JavaFxResolveUtil.createResolveResult(resolveProcessor.getResult());
    }
  }
  if (type instanceof JavaFxFileType) {
    if (!((JavaFxFileType)type).getFile().processDeclarations(resolveProcessor,ResolveState.initial(),null,myElement)) {
      return JavaFxResolveUtil.createResolveResult(resolveProcessor.getResult());
    }
  }
  final PsiElement element=JavaFxPsiManagerImpl.getInstance(myElement.getProject()).getElementByQualifiedName(myQualifier.getText());
  if (element != null && !element.processDeclarations(resolveProcessor,ResolveState.initial(),null,myElement)) {
    return JavaFxResolveUtil.createResolveResult(resolveProcessor.getResult());
  }
  return ResolveResult.EMPTY_ARRAY;
}
