{
  myConnectionLifeCycle=new ConnectionLifeCycle(CHECK_GRANULARITY,factory);
  myRepository=repository;
  mySessions=new LinkedList<IConnection>();
  myCloseListener=new Consumer<SshSessionConnection>(){
    public void consume(    final SshSessionConnection sshSessionConnection){
synchronized (myLock) {
        final boolean removed=mySessions.remove(sshSessionConnection);
        SshLogger.debug("shared connection: session closed notification, removed: " + removed);
        myTs=System.currentTimeMillis();
      }
    }
  }
;
  mySessionProvider=new ThrowableComputable<Session,AuthenticationException>(){
    public Session compute() throws AuthenticationException {
      final Connection connection;
synchronized (myLock) {
        connection=myConnectionLifeCycle.getConnection();
      }
      SshLogger.debug("shared connection: opening session");
      try {
        final Session session=connection.openSession();
        session.execCommand("cvs server");
        return session;
      }
 catch (      IOException e) {
        throw new AuthenticationException(e.getMessage(),e);
      }
    }
  }
;
}
