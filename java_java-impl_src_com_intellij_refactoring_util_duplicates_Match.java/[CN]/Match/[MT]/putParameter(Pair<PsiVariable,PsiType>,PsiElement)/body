{
  final PsiVariable psiVariable=parameter.first;
  if (myDeclarationCorrespondence.get(psiVariable) == null) {
    final boolean[] valueDependsOnReplacedScope=new boolean[1];
    value.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReferenceExpression(      final PsiReferenceExpression expression){
        super.visitReferenceExpression(expression);
        final PsiElement resolved=expression.resolve();
        if (resolved != null && Comparing.equal(resolved.getContainingFile(),getMatchEnd().getContainingFile())) {
          final TextRange range=resolved.getTextRange();
          if (getMatchStart().getTextOffset() <= range.getStartOffset() && range.getEndOffset() <= getMatchEnd().getTextRange().getEndOffset()) {
            valueDependsOnReplacedScope[0]=true;
          }
        }
      }
    }
);
    if (valueDependsOnReplacedScope[0])     return false;
  }
  final List<PsiElement> currentValue=myParameterValues.get(psiVariable);
  final boolean isVararg=psiVariable instanceof PsiParameter && ((PsiParameter)psiVariable).isVarArgs();
  if (!(value instanceof PsiExpression))   return false;
  final PsiType type=((PsiExpression)value).getType();
  final PsiType parameterType=parameter.second;
  if (type == null)   return false;
  if (currentValue == null) {
    if (parameterType instanceof PsiClassType && ((PsiClassType)parameterType).resolve() instanceof PsiTypeParameter) {
      final PsiTypeParameter typeParameter=(PsiTypeParameter)((PsiClassType)parameterType).resolve();
      LOG.assertTrue(typeParameter != null);
      for (      PsiClassType classType : typeParameter.getExtendsListTypes()) {
        if (!classType.isAssignableFrom(type))         return false;
      }
    }
 else {
      if (isVararg) {
        if (!((PsiEllipsisType)psiVariable.getType()).getComponentType().isAssignableFrom(type) && !((PsiEllipsisType)psiVariable.getType()).toArrayType().equals(type)) {
          myChangedParams.put(psiVariable,new PsiEllipsisType(parameterType));
        }
      }
 else {
        if (!myIgnoreParameterTypes && !parameterType.isAssignableFrom(type))         return false;
      }
    }
    final List<PsiElement> values=new ArrayList<PsiElement>();
    values.add(value);
    myParameterValues.put(psiVariable,values);
    final ArrayList<PsiElement> elements=new ArrayList<PsiElement>();
    myParameterOccurrences.put(psiVariable,elements);
    return true;
  }
 else {
    for (    PsiElement val : currentValue) {
      if (!isVararg && !PsiEquivalenceUtil.areElementsEquivalent(val,value)) {
        return false;
      }
    }
    if (isVararg) {
      if (!parameterType.isAssignableFrom(type))       return false;
      if (!((PsiEllipsisType)psiVariable.getType()).toArrayType().equals(type)) {
        currentValue.add(value);
      }
    }
    myParameterOccurrences.get(psiVariable).add(value);
    return true;
  }
}
