{
  final PsiElement codeFragment=ControlFlowUtil.findCodeFragment(getMatchStart());
  try {
    final Project project=getMatchStart().getProject();
    final ControlFlow controlFlow=ControlFlowFactory.getInstance(project).getControlFlow(codeFragment,new LocalsControlFlowPolicy(codeFragment));
    final int endOffset=controlFlow.getEndOffset(getMatchEnd());
    final int startOffset=controlFlow.getStartOffset(getMatchStart());
    final List<PsiVariable> usedVariables=ControlFlowUtil.getUsedVariables(controlFlow,endOffset,controlFlow.getSize());
    Collection<ControlFlowUtil.VariableInfo> reassigned=ControlFlowUtil.getInitializedTwice(controlFlow,endOffset,controlFlow.getSize());
    final Collection<PsiVariable> outVariables=ControlFlowUtil.getWrittenVariables(controlFlow,startOffset,endOffset,false);
    for (    PsiVariable variable : usedVariables) {
      if (!outVariables.contains(variable)) {
        final PsiIdentifier identifier=variable.getNameIdentifier();
        if (identifier != null) {
          if (identifier.getTextRange().getStartOffset() >= getMatchStart().getTextRange().getStartOffset() && identifier.getTextRange().getEndOffset() <= getMatchEnd().getTextRange().getEndOffset()) {
            final String name=variable.getName();
            LOG.assertTrue(name != null);
            PsiDeclarationStatement statement=JavaPsiFacade.getInstance(project).getElementFactory().createVariableDeclarationStatement(name,variable.getType(),null);
            if (reassigned.contains(new ControlFlowUtil.VariableInfo(variable,null))) {
              final PsiElement[] psiElements=statement.getDeclaredElements();
              final PsiModifierList modifierList=((PsiVariable)psiElements[0]).getModifierList();
              LOG.assertTrue(modifierList != null);
              modifierList.setModifierProperty(PsiModifier.FINAL,false);
            }
            getMatchStart().getParent().addBefore(statement,getMatchStart());
          }
        }
      }
    }
  }
 catch (  AnalysisCanceledException e) {
  }
}
