{
  final JPanel addRemovePanel=new JPanel(new GridBagLayout());
  final Constraints constraints=new Constraints(GridBagConstraints.NORTH);
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.insets=new Insets(0,0,10,0);
  final JButton addButton=new JButton("Add");
  final JButton editButton=new JButton("Edit");
  final JButton removeButton=new JButton("Remove");
  final JButton duplicateButton=new JButton("Duplicate");
  final JButton moveUpButton=new JButton("Move up");
  final JButton moveDownButton=new JButton("Move down");
  addRemovePanel.add(addButton,constraints.firstCol());
  constraints.newRow();
  addRemovePanel.add(editButton,constraints.firstCol());
  constraints.newRow();
  addRemovePanel.add(duplicateButton,constraints.firstCol());
  constraints.newRow();
  addRemovePanel.add(removeButton,constraints.firstCol());
  constraints.newRow();
  addRemovePanel.add(moveUpButton,constraints.firstCol());
  constraints.weightedNewRow();
  constraints.insets=new Insets(0,0,0,0);
  addRemovePanel.add(moveDownButton,constraints.firstCol());
  if (jTable.getSelectedRow() < 0) {
    editButton.setEnabled(false);
    duplicateButton.setEnabled(false);
    removeButton.setEnabled(false);
    moveUpButton.setEnabled(false);
    moveDownButton.setEnabled(false);
  }
  if (jTable.getSelectedRow() == 0) {
    moveUpButton.setEnabled(false);
  }
  if (jTable.getSelectedRowCount() > 0 && jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1] == jTable.getModel().getRowCount() - 1) {
    moveDownButton.setEnabled(false);
  }
  jTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting() || (e.getFirstIndex() < 0)) {
        return;
      }
      final int index=jTable.getSelectedRow();
      final boolean selectionExists=index >= 0;
      editButton.setEnabled(selectionExists);
      duplicateButton.setEnabled(selectionExists);
      removeButton.setEnabled(selectionExists);
      moveUpButton.setEnabled(selectionExists && index > 0);
      int lastSelectedRow=0;
      if (selectionExists) {
        lastSelectedRow=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1];
      }
      moveDownButton.setEnabled(selectionExists && lastSelectedRow < jTable.getModel().getRowCount() - 1);
    }
  }
);
  jTable.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        int index=jTable.getSelectedRow();
        editRow(addRemovePanel);
        jTable.getSelectionModel().setLeadSelectionIndex(index);
      }
    }
  }
);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int currentIndex;
      if (jTable.getSelectedRowCount() <= 0) {
        currentIndex=0;
      }
 else {
        currentIndex=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1] + 1;
      }
      final ChoicePanel choicePanel=getOptionsPaneMsg(null);
      final JOptionPane op=new JOptionPane(choicePanel,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,null,null,null);
      final JDialog jd=op.createDialog(addRemovePanel,choicePanel.getChoicePanelName());
      jd.setVisible(true);
      final Object result=op.getValue();
      if (result != null && ((Integer)result) == JOptionPane.OK_OPTION) {
        final ChoicePanel value=(ChoicePanel)op.getMessage();
        value.acceptEdited();
        modelData.add(currentIndex,value);
        list.add(currentIndex,((com.wrq.rearranger.settings.attributeGroups.AttributeGroup)value.getChoice().getChoiceObject()));
        model.fireTableRowsInserted(currentIndex,currentIndex);
        jTable.getSelectionModel().setSelectionInterval(currentIndex,currentIndex);
      }
      setTableColumnWidths();
    }
  }
);
  editButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      editRow(addRemovePanel);
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      editRow(addRemovePanel);
      return true;
    }
  }
.installOn(jTable);
  duplicateButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      AttributeGroup[] newRules=new AttributeGroup[jTable.getSelectedRowCount()];
      for (int row=0; row < jTable.getSelectedRowCount(); row++) {
        final int currentIndex=jTable.getSelectedRows()[row];
        final ChoicePanel choicePanel=(modelData.get(currentIndex));
        AttributeGroup rule=choicePanel.getChoice().getChoiceObject();
        AttributeGroup newRule=rule.deepCopy();
        newRules[row]=newRule;
      }
      final int offset=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1] + 1;
      for (int row=0; row < newRules.length; row++) {
        final AttributeGroup newRule=newRules[row];
        modelData.add(row + offset,createOptionsPaneMsg(newRule));
        list.add(row + offset,newRule);
        model.fireTableRowsInserted(row + offset,row + offset);
      }
    }
  }
);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int currentIndex=jTable.getSelectedRow();
      if (currentIndex >= 0) {
        final int first=jTable.getSelectedRows()[0];
        final int last=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1];
        for (int i=first; i <= last; i++) {
          list.remove(currentIndex);
          modelData.remove(currentIndex);
        }
        model.fireTableRowsDeleted(currentIndex,currentIndex);
        int newSelIndex=(currentIndex >= model.getRowCount()) ? model.getRowCount() - 1 : currentIndex;
        jTable.getSelectionModel().setSelectionInterval(newSelIndex,newSelIndex);
        setTableColumnWidths();
      }
    }
  }
);
  moveUpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int first=jTable.getSelectedRows()[0];
      if (first <= 0)       return;
      final int last=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1];
      for (int i=first; i <= last; i++) {
        list.add(i - 1,list.remove(i));
        modelData.add(i - 1,modelData.remove(i));
        model.fireTableRowsUpdated(i - 1,i);
      }
      jTable.getSelectionModel().setSelectionInterval(first - 1,last - 1);
    }
  }
);
  moveDownButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int first=jTable.getSelectedRows()[0];
      final int last=jTable.getSelectedRows()[jTable.getSelectedRowCount() - 1];
      if (last + 1 >= jTable.getModel().getRowCount())       return;
      for (int i=last; i >= first; i--) {
        list.add(i + 1,(list.remove(i)));
        modelData.add(i + 1,(modelData.remove(i)));
        model.fireTableRowsUpdated(i,i + 1);
      }
      jTable.getSelectionModel().setSelectionInterval(first + 1,last + 1);
    }
  }
);
  return addRemovePanel;
}
