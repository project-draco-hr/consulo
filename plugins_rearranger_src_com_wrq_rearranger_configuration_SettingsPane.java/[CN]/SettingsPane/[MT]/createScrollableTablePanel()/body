{
  final JPanel cmlPanel=new JPanel(new GridBagLayout());
  final Constraints constraints=new Constraints(GridBagConstraints.NORTHWEST);
  constraints.weightedLastRow();
  constraints.fill=GridBagConstraints.BOTH;
  final JTextField priorityField=new JTextField();
  priorityField.setHorizontalAlignment(JTextField.RIGHT);
  TableCellEditor priorityEditor=new DefaultCellEditor(priorityField);
  model=new AbstractTableModel(){
    public int getColumnCount(){
      return NUM_COLUMNS;
    }
    public int getRowCount(){
      return list.size();
    }
    public Object getValueAt(    int rowIndex,    int columnIndex){
switch (columnIndex) {
case SEQUENCE_COLUMN:
        return rowIndex + 1;
case PRIORITY_COLUMN:
      ChoicePanel cp=(modelData.get(rowIndex));
    IRule rule=cp.getChoice().getChoiceObject();
  return new Priority(rule.getPriority());
case DESCRIPTION_COLUMN:
return list.get(rowIndex).toString();
}
return null;
}
public String getColumnName(int column){
switch (column) {
case SEQUENCE_COLUMN:
return "Seq";
case PRIORITY_COLUMN:
return "Pri";
case DESCRIPTION_COLUMN:
return "Rule";
}
return null;
}
public Class getColumnClass(int columnIndex){
switch (columnIndex) {
case SEQUENCE_COLUMN:
return Integer.class;
case PRIORITY_COLUMN:
return Priority.class;
case DESCRIPTION_COLUMN:
return String.class;
}
return Object.class;
}
public boolean isCellEditable(int rowIndex,int columnIndex){
if (columnIndex == PRIORITY_COLUMN && rowIndex >= 0) {
ChoicePanel cp=(modelData.get(rowIndex));
IRule rule=cp.getChoice().getChoiceObject();
if (rule instanceof IPrioritizableRule) {
return true;
}
}
return false;
}
public void setValueAt(Object aValue,int rowIndex,int columnIndex){
if (columnIndex == PRIORITY_COLUMN) {
ChoicePanel cp=(modelData.get(rowIndex));
IRule rule=cp.getChoice().getChoiceObject();
if (rule instanceof IPrioritizableRule) {
int priority;
try {
priority=(new Integer((String)aValue));
}
 catch (NumberFormatException nfe) {
return;
}
if (priority > 0 && priority < 100) {
rule.setPriority(priority);
fireTableCellUpdated(rowIndex,columnIndex);
}
}
}
}
}
;
TableCellRenderer priorityRenderer=new DefaultTableCellRenderer(){
protected void setValue(Object value){
Priority p=(Priority)value;
if (p.priority <= 0) {
setText("n/a");
setHorizontalAlignment(JLabel.CENTER);
}
 else {
setText("" + p.priority + " ");
setHorizontalAlignment(JLabel.RIGHT);
}
}
}
;
TableSorter sorter=new TableSorter(model){
public void sortByColumn(int column,boolean ascending){
if (column == SEQUENCE_COLUMN || column == PRIORITY_COLUMN) {
super.sortByColumn(column,ascending);
}
}
public boolean defaultSortOrderAscending(int column){
switch (column) {
case SEQUENCE_COLUMN:
return true;
case PRIORITY_COLUMN:
return false;
}
return true;
}
}
;
jTable=new JTable(sorter);
sorter.addMouseListenerToHeaderInTable(jTable);
jTable.setShowHorizontalLines(false);
jTable.setShowVerticalLines(true);
jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
jTable.setDragEnabled(false);
jTable.setRowSelectionAllowed(true);
jTable.setColumnSelectionAllowed(false);
jTable.setPreferredScrollableViewportSize(jTable.getPreferredSize());
jTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
TableColumnModel tcm=jTable.getColumnModel();
tcm.getColumn(0).setPreferredWidth(new JLabel("SEQ").getWidth() * 3);
tcm.getColumn(1).setPreferredWidth(new JLabel("MMM").getWidth() * 3);
tcm.getColumn(1).setCellRenderer(priorityRenderer);
tcm.getColumn(1).setCellEditor(priorityEditor);
final JScrollPane scrollPane=new JScrollPane(jTable);
for (AttributeGroup ca : list) {
modelData.add(createOptionsPaneMsg(ca));
}
if (list.size() > 0) {
jTable.getSelectionModel().setSelectionInterval(0,0);
}
cmlPanel.add(scrollPane,constraints.weightedLastCol());
setTableColumnWidths();
return cmlPanel;
}
