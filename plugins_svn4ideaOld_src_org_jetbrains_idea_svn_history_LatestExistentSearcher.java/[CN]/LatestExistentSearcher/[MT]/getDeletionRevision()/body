{
  if (!detectStartRevision())   return -1;
  final Ref<Long> latest=new Ref<Long>(myStartNumber);
  SVNRepository repository=null;
  try {
    repository=myVcs.createRepository(myUrl.toString());
    final SVNURL repRoot=repository.getRepositoryRoot(true);
    if (repRoot != null) {
      if (myEndNumber == -1) {
        myEndNumber=repository.getLatestRevision();
      }
      final SVNURL existingParent=getExistingParent(myUrl,repository,repRoot.toString().length());
      if (existingParent == null) {
        return myStartNumber;
      }
      final String urlRelativeString=myUrl.toString().substring(repRoot.toString().length());
      final SVNRevision startRevision=SVNRevision.create(myStartNumber);
      myVcs.createLogClient().doLog(existingParent,new String[]{""},startRevision,startRevision,SVNRevision.HEAD,false,true,0,new ISVNLogEntryHandler(){
        public void handleLogEntry(        final SVNLogEntry logEntry) throws SVNException {
          final Map changedPaths=logEntry.getChangedPaths();
          for (          Object o : changedPaths.values()) {
            final SVNLogEntryPath path=(SVNLogEntryPath)o;
            if ((path.getType() == 'D') && (urlRelativeString.equals(path.getPath()))) {
              latest.set(logEntry.getRevision());
              throw new SVNException(SVNErrorMessage.UNKNOWN_ERROR_MESSAGE);
            }
          }
        }
      }
);
    }
  }
 catch (  SVNException e) {
  }
 finally {
    if (repository != null) {
      repository.closeSession();
    }
  }
  return latest.get().longValue();
}
