{
  LinkedHashMap<String,Element> scopes=null;
  List<Element> content=null;
  boolean enabled=false;
  String level=null;
  for (  String sourceToolName : getSourceToolNames()) {
    Element sourceElement=inspectionElements.get(sourceToolName);
    if (sourceElement == null) {
      if (includeDefaults) {
        try {
          sourceElement=writeOldSettings(sourceToolName);
        }
 catch (        WriteExternalException ignored) {
        }
      }
 else {
        enabled|=isEnabledByDefault(sourceToolName);
        if (level == null) {
          level=getDefaultSeverityLevel(sourceToolName);
        }
      }
    }
    if (sourceElement != null) {
      if (content == null) {
        content=new ArrayList<Element>();
        scopes=new LinkedHashMap<String,Element>();
      }
      collectContent(sourceElement,content,scopes);
      enabled|=Boolean.parseBoolean(sourceElement.getAttributeValue(ToolsImpl.ENABLED_ATTRIBUTE));
      if (level == null) {
        level=getLevel(sourceElement);
      }
    }
  }
  if (content != null && !content.isEmpty()) {
    final Element toolElement=new Element(InspectionProfileImpl.INSPECTION_TOOL_TAG);
    toolElement.setAttribute(InspectionProfileImpl.CLASS_TAG,getMergedToolName());
    toolElement.setAttribute(ToolsImpl.ENABLED_ATTRIBUTE,String.valueOf(enabled));
    if (level != null) {
      toolElement.setAttribute(ToolsImpl.LEVEL_ATTRIBUTE,level);
    }
    toolElement.setAttribute(ToolsImpl.ENABLED_BY_DEFAULT_ATTRIBUTE,String.valueOf(enabled));
    for (    Element scopeEl : scopes.values()) {
      toolElement.addContent(scopeEl);
    }
    for (    Element element : content) {
      toolElement.addContent(element);
    }
    return toolElement;
  }
  return null;
}
