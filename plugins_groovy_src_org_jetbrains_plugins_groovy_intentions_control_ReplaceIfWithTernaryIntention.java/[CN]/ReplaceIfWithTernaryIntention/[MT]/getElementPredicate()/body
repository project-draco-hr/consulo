{
  return new PsiElementPredicate(){
    @Override public boolean satisfiedBy(    PsiElement e){
      if (!e.getNode().getElementType().equals(GroovyTokenTypes.kIF))       return false;
      final GrIfStatement ifStatement=(GrIfStatement)e.getParent();
      final PsiElement thenBranch=skipBlock(ifStatement.getThenBranch());
      final PsiElement elseBranch=skipBlock(ifStatement.getElseBranch());
      if (thenBranch instanceof GrAssignmentExpression && elseBranch instanceof GrAssignmentExpression && ((GrAssignmentExpression)thenBranch).getRValue() != null && ((GrAssignmentExpression)elseBranch).getRValue() != null) {
        final GrExpression lvalue1=((GrAssignmentExpression)thenBranch).getLValue();
        final GrExpression lvalue2=((GrAssignmentExpression)elseBranch).getLValue();
        return EquivalenceChecker.expressionsAreEquivalent(lvalue1,lvalue2);
      }
      if (thenBranch instanceof GrReturnStatement && elseBranch instanceof GrReturnStatement && ((GrReturnStatement)thenBranch).getReturnValue() != null && ((GrReturnStatement)elseBranch).getReturnValue() != null) {
        return true;
      }
      return false;
    }
  }
;
}
