{
  Collection<TreeElement> result=new ArrayList<TreeElement>();
  List<String> prefixWords=StringUtil.split(myPrefix,mySeparator);
  for (  TreeElement treeElement : myProperties) {
    String key;
    if (treeElement instanceof PropertiesStructureViewElement) {
      PropertiesStructureViewElement propertiesElement=(PropertiesStructureViewElement)treeElement;
      Property property=propertiesElement.getValue();
      key=property.getUnescapedKey();
    }
 else     if (treeElement instanceof ResourceBundlePropertyStructureViewElement) {
      key=((ResourceBundlePropertyStructureViewElement)treeElement).getValue();
    }
 else {
      continue;
    }
    if (key == null || key.equals(myPrefix)) {
      continue;
    }
    List<String> keyWords=StringUtil.split(key,mySeparator);
    boolean startsWith=prefixWords.size() < keyWords.size();
    if (startsWith) {
      for (int i=0; i < prefixWords.size(); i++) {
        String prefixWord=prefixWords.get(i);
        String keyWord=keyWords.get(i);
        if (!Comparing.strEqual(keyWord,prefixWord)) {
          startsWith=false;
          break;
        }
      }
    }
    if (startsWith) {
      result.add(treeElement);
      String presentableName=key.substring(myPrefix.length());
      presentableName=StringUtil.trimStart(presentableName,mySeparator);
      if (treeElement instanceof PropertiesStructureViewElement) {
        ((PropertiesStructureViewElement)treeElement).setPresentableName(presentableName);
      }
      if (treeElement instanceof ResourceBundlePropertyStructureViewElement) {
        ((ResourceBundlePropertyStructureViewElement)treeElement).setPresentableName(presentableName);
      }
    }
  }
  return result;
}
