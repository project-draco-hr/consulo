{
  if (aClass instanceof PsiAnonymousClass) {
    ClassResolveResult baseResolveResult=((PsiAnonymousClass)aClass).getBaseClassType().resolveGenerics();
    PsiClass baseClass=baseResolveResult.getElement();
    PsiSubstitutor baseSub=baseResolveResult.getSubstitutor();
    if (baseClass != null) {
      buildText(baseClass,baseSub,buffer,canonical,internal);
    }
    return;
  }
  PsiClass enclosingClass=null;
  if (!aClass.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiElement parent=aClass.getParent();
    if (parent instanceof PsiClass && !(parent instanceof PsiAnonymousClass)) {
      enclosingClass=(PsiClass)parent;
    }
  }
  buffer.append(getAnnotationsTextPrefix());
  if (enclosingClass != null) {
    buildText(enclosingClass,substitutor,buffer,canonical,false);
    buffer.append('.');
    buffer.append(aClass.getName());
  }
 else {
    final String name;
    if (!canonical) {
      name=aClass.getName();
    }
 else {
      final String qualifiedName=aClass.getQualifiedName();
      if (qualifiedName == null) {
        name=aClass.getName();
      }
 else {
        name=qualifiedName;
      }
    }
    buffer.append(name);
  }
  final PsiTypeParameter[] typeParameters=aClass.getTypeParameters();
  if (typeParameters.length > 0) {
    StringBuilder pineBuffer=new StringBuilder();
    pineBuffer.append('<');
    for (int i=0; i < typeParameters.length; i++) {
      PsiTypeParameter typeParameter=typeParameters[i];
      if (i > 0)       pineBuffer.append(',');
      final PsiType substitutionResult=substitutor.substitute(typeParameter);
      if (substitutionResult == null) {
        pineBuffer=null;
        break;
      }
      if (canonical) {
        if (internal) {
          pineBuffer.append(substitutionResult.getInternalCanonicalText());
        }
 else {
          pineBuffer.append(substitutionResult.getCanonicalText());
        }
      }
 else {
        pineBuffer.append(substitutionResult.getPresentableText());
      }
    }
    if (pineBuffer != null) {
      buffer.append(pineBuffer);
      buffer.append('>');
    }
  }
}
