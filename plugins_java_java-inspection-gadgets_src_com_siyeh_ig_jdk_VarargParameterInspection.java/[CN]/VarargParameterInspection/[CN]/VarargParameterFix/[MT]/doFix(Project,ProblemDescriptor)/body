{
  final PsiElement element=descriptor.getPsiElement();
  final PsiMethod method=(PsiMethod)element.getParent();
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiParameter lastParameter=parameters[parameters.length - 1];
  if (!lastParameter.isVarArgs()) {
    return;
  }
  final PsiEllipsisType type=(PsiEllipsisType)lastParameter.getType();
  final Query<PsiReference> query=ReferencesSearch.search(method);
  final PsiType componentType=type.getComponentType();
  final String typeText;
  if (componentType instanceof PsiClassType) {
    final PsiClassType classType=(PsiClassType)componentType;
    typeText=classType.rawType().getCanonicalText();
  }
 else {
    typeText=componentType.getCanonicalText();
  }
  final Collection<PsiReference> references=query.findAll();
  for (  PsiReference reference : references) {
    modifyCalls(reference,typeText,parameters.length - 1);
  }
  final PsiType arrayType=type.toArrayType();
  final PsiManager psiManager=lastParameter.getManager();
  final PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
  final PsiTypeElement newTypeElement=factory.createTypeElement(arrayType);
  final PsiTypeElement typeElement=lastParameter.getTypeElement();
  if (typeElement == null) {
    return;
  }
  final PsiAnnotation annotation=AnnotationUtil.findAnnotation(method,"java.lang.SafeVarargs");
  if (annotation != null) {
    annotation.delete();
  }
  typeElement.replace(newTypeElement);
}
