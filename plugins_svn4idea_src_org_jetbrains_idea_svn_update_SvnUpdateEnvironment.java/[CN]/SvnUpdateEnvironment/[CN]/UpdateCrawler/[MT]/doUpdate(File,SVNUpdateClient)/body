{
  final long rev;
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myVcs.getProject());
  final UpdateRootInfo rootInfo=configuration.getUpdateRootInfo(root,myVcs);
  final SVNURL sourceUrl=getSourceUrl(myVcs,root);
  final boolean isSwitch=rootInfo != null && rootInfo.getUrl() != null && !rootInfo.getUrl().equals(sourceUrl);
  final SVNRevision updateTo=rootInfo != null && rootInfo.isUpdateToRevision() ? rootInfo.getRevision() : SVNRevision.HEAD;
  if (isSwitch) {
    final SvnUpdateClientI updateClient=createUpdateClient(configuration,root,true,sourceUrl);
    rev=updateClient.doSwitch(root,rootInfo.getUrl(),SVNRevision.UNDEFINED,rootInfo.getRevision(),configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
  }
 else {
    final SvnUpdateClientI updateClient=createUpdateClient(configuration,root,false,sourceUrl);
    rev=updateClient.doUpdate(root,updateTo,configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
  }
  myPostUpdateFiles.setRevisions(root.getAbsolutePath(),myVcs,new SvnRevisionNumber(SVNRevision.create(rev)));
  return rev;
}
