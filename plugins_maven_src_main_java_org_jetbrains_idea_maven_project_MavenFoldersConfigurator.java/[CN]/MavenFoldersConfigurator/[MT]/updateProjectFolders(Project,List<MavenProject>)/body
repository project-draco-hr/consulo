{
  final MavenProjectsManager manager=MavenProjectsManager.getInstance(project);
  final MavenImportSettings settings=manager.getImportSettings();
  final Map<VirtualFile,MavenProject> fileToProjectMapping=new HashMap<VirtualFile,MavenProject>();
  for (  MavenProject each : updatedProjects) {
    VirtualFile f=LocalFileSystem.getInstance().findFileByIoFile(each.getFile());
    if (f != null)     fileToProjectMapping.put(f,each);
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      List<ModifiableRootModel> rootModels=new ArrayList<ModifiableRootModel>();
      for (      Module each : ModuleManager.getInstance(project).getModules()) {
        MavenProjectModel project=manager.findProject(each);
        if (project == null)         continue;
        MavenProject mavenProject=fileToProjectMapping.get(project.getFile());
        if (mavenProject != null) {
          project.updateFolders(mavenProject);
        }
        RootModelAdapter a=new RootModelAdapter(each,null);
        new MavenFoldersConfigurator(project,settings,a).config(false);
        ModifiableRootModel model=a.getRootModel();
        if (model.isChanged()) {
          rootModels.add(model);
        }
 else {
          model.dispose();
        }
      }
      if (!rootModels.isEmpty()) {
        ModifiableRootModel[] modelsArray=rootModels.toArray(new ModifiableRootModel[rootModels.size()]);
        ProjectRootManager.getInstance(project).multiCommit(modelsArray);
      }
    }
  }
);
}
