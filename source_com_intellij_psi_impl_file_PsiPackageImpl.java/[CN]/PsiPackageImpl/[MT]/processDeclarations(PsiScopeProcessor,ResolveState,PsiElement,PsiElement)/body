{
  GlobalSearchScope scope=place.getResolveScope();
  processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,this);
  ElementClassHint classHint=processor.getHint(ElementClassHint.class);
  if (classHint == null || classHint.shouldProcess(PsiClass.class)) {
    NameHint nameHint=processor.getHint(NameHint.class);
    if (nameHint != null) {
      final PsiClass[] classes=findClassesByName(nameHint.getName(state),scope);
      if (!processClasses(processor,state,place,classes))       return false;
    }
 else {
      PsiClass[] classes=getClasses(scope);
      if (!processClasses(processor,state,place,classes))       return false;
      final PsiMigrationImpl migration=getFacade().getCurrentMigration();
      if (migration != null) {
        for (        PsiClass psiClass : migration.getMigrationClasses(getQualifiedName())) {
          if (!processor.execute(psiClass,state)) {
            return false;
          }
        }
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(PsiPackage.class)) {
    NameHint nameHint=processor.getHint(NameHint.class);
    if (nameHint != null) {
      PsiPackage aPackage=findSubPackageByName(nameHint.getName(state),scope);
      if (aPackage != null) {
        if (!processor.execute(aPackage,state))         return false;
      }
    }
 else {
      PsiPackage[] packs=getSubPackages(scope);
      for (      PsiPackage pack : packs) {
        final String packageName=pack.getName();
        if (packageName == null)         continue;
        if (!JavaPsiFacade.getInstance(getProject()).getNameHelper().isIdentifier(packageName,PsiUtil.getLanguageLevel(this))) {
          continue;
        }
        if (!processor.execute(pack,state)) {
          return false;
        }
      }
      final PsiMigrationImpl migration=getFacade().getCurrentMigration();
      if (migration != null) {
        for (        PsiPackage aPackage : migration.getMigrationPackages(getQualifiedName())) {
          if (!processor.execute(aPackage,state)) {
            return false;
          }
        }
      }
    }
  }
  return true;
}
