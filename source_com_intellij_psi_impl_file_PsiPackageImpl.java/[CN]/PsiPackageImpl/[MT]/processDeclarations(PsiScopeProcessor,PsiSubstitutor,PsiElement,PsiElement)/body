{
  GlobalSearchScope scope=place.getResolveScope();
  processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,this);
  ElementClassHint classHint=processor.getHint(ElementClassHint.class);
  if (classHint == null || classHint.shouldProcess(PsiClass.class)) {
    NameHint nameHint=processor.getHint(NameHint.class);
    if (nameHint != null) {
      final PsiClass aClass=findClassByName(nameHint.getName(),scope);
      if (aClass != null) {
        if (!processor.execute(aClass,substitutor))         return false;
      }
    }
 else {
      PsiClass[] classes=getClasses(scope);
      for (int i=0; i < classes.length; i++) {
        if (!processor.execute(classes[i],substitutor)) {
          return false;
        }
      }
      if (myManager.getCurrentMigration() != null) {
        final Iterator<PsiClass> migrationClasses=myManager.getCurrentMigration().getMigrationClasses(getQualifiedName());
        while (migrationClasses.hasNext()) {
          PsiClass psiClass=migrationClasses.next();
          if (!processor.execute(psiClass,substitutor)) {
            return false;
          }
        }
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(PsiPackage.class)) {
    NameHint nameHint=processor.getHint(NameHint.class);
    if (nameHint != null) {
      PsiPackage aPackage=findSubPackageByName(nameHint.getName(),scope);
      if (aPackage != null) {
        if (!processor.execute(aPackage,substitutor))         return false;
      }
    }
 else {
      PsiPackage[] packs=getSubPackages(scope);
      for (int i=0; i < packs.length; i++) {
        if (!processor.execute(packs[i],substitutor)) {
          return false;
        }
      }
      if (myManager.getCurrentMigration() != null) {
        final Iterator<PsiPackage> migrationClasses=myManager.getCurrentMigration().getMigrationPackages(getQualifiedName());
        while (migrationClasses.hasNext()) {
          PsiPackage psiPackage=migrationClasses.next();
          if (!processor.execute(psiPackage,substitutor)) {
            return false;
          }
        }
      }
    }
  }
  return true;
}
