{
  if (ArrayUtil.find(file.getPsiRoots(),file) != 0)   return null;
  VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile == null)   return null;
  String text=file.getText();
  Charset charset=LoadTextUtil.extractCharsetFromFileContent(file.getProject(),virtualFile,text);
  int errorCount=0;
  int start=-1;
  List<ProblemDescriptor> descriptors=new SmartList<ProblemDescriptor>();
  for (int i=0; i < text.length(); i++) {
    char c=text.charAt(i);
    if (isRepresentable(c,charset)) {
      if (start != -1) {
        ProblemDescriptor descriptor=manager.createProblemDescriptor(file,new TextRange(start,i),InspectionsBundle.message("unsupported.character.for.the.charset",charset),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        descriptors.add(descriptor);
        start=-1;
        if (errorCount++ > 200)         break;
      }
    }
 else {
      if (start == -1) {
        start=i;
      }
    }
  }
  if (start != -1) {
    ProblemDescriptor descriptor=manager.createProblemDescriptor(file,new TextRange(start,text.length()),InspectionsBundle.message("unsupported.character.for.the.charset",charset),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    descriptors.add(descriptor);
  }
  return descriptors.toArray(new ProblemDescriptor[descriptors.size()]);
}
