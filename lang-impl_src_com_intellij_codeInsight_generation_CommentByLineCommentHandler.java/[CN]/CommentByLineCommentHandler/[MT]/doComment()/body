{
  myLine1=myDocument.getLineNumber(myStartOffset);
  myLine2=myDocument.getLineNumber(myEndOffset);
  if (myLine2 > myLine1 && myDocument.getLineStartOffset(myLine2) == myEndOffset) {
    myLine2--;
  }
  myStartOffsets=new int[myLine2 - myLine1 + 1];
  myEndOffsets=new int[myLine2 - myLine1 + 1];
  myCommenters=new Commenter[myLine2 - myLine1 + 1];
  boolean allLineCommented=true;
  CharSequence chars=myDocument.getCharsSequence();
  boolean singleline=myLine1 == myLine2;
  int offset=myDocument.getLineStartOffset(myLine1);
  offset=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),offset," \t");
  Language languageAtStart=PsiUtilBase.getLanguageAtOffset(myFile,offset);
  final Language languageSuitableForCompleteFragment=CommentByBlockCommentHandler.evaluateLanguageInRange(offset,CharArrayUtil.shiftBackward(myDocument.getCharsSequence(),myDocument.getLineEndOffset(myLine2)," \t\n"),myFile,languageAtStart);
  Commenter blockSuitableCommenter=languageSuitableForCompleteFragment != languageAtStart ? LanguageCommenters.INSTANCE.forLanguage(languageSuitableForCompleteFragment) : null;
  if (blockSuitableCommenter == null && LanguageCommenters.INSTANCE.forLanguage(languageAtStart) == null) {
    Language language=myFile.getLanguageDialect();
    if (language == null)     language=myFile.getLanguage();
    blockSuitableCommenter=LanguageCommenters.INSTANCE.forLanguage(language);
  }
  if (blockSuitableCommenter == null && myFile.getFileType() instanceof CustomFileType) {
    blockSuitableCommenter=new Commenter(){
      final SyntaxTable mySyntaxTable=((CustomFileType)myFile.getFileType()).getSyntaxTable();
      @Nullable public String getLineCommentPrefix(){
        return mySyntaxTable.getLineComment();
      }
      @Nullable public String getBlockCommentPrefix(){
        return mySyntaxTable.getStartComment();
      }
      @Nullable public String getBlockCommentSuffix(){
        return mySyntaxTable.getEndComment();
      }
    }
;
  }
  for (int line=myLine1; line <= myLine2; line++) {
    final Commenter commenter=blockSuitableCommenter != null ? blockSuitableCommenter : findCommenter(line);
    if (commenter == null)     return;
    if (commenter.getLineCommentPrefix() == null && (commenter.getBlockCommentPrefix() == null || commenter.getBlockCommentSuffix() == null)) {
      return;
    }
    myCommenters[line - myLine1]=commenter;
    if (!isLineCommented(line,chars,commenter) && (singleline || !isLineEmpty(line))) {
      allLineCommented=false;
      break;
    }
  }
  if (!allLineCommented) {
    if (CodeStyleSettingsManager.getSettings(myProject).LINE_COMMENT_AT_FIRST_COLUMN) {
      doDefaultCommenting(blockSuitableCommenter);
    }
 else {
      doIndentCommenting(blockSuitableCommenter);
    }
  }
 else {
    for (int line=myLine2; line >= myLine1; line--) {
      int offset1=myStartOffsets[line - myLine1];
      int offset2=myEndOffsets[line - myLine1];
      if (offset1 == offset2)       continue;
      Commenter commenter=myCommenters[line - myLine1];
      String prefix=commenter.getBlockCommentPrefix();
      if (prefix == null || !myDocument.getText().substring(offset1,myDocument.getTextLength()).startsWith(prefix)) {
        prefix=commenter.getLineCommentPrefix();
      }
      String suffix=commenter.getBlockCommentSuffix();
      if (suffix == null && prefix != null)       suffix="";
      if (prefix != null && suffix != null) {
        final int suffixLen=suffix.length();
        final int prefixLen=prefix.length();
        if (offset2 >= 0) {
          if (!CharArrayUtil.regionMatches(chars,offset1 + prefixLen,prefix)) {
            myDocument.deleteString(offset2 - suffixLen,offset2);
          }
        }
        if (offset1 >= 0) {
          for (int i=offset2 - suffixLen - 1; i > offset1 + prefixLen; --i) {
            if (CharArrayUtil.regionMatches(chars,i,suffix)) {
              myDocument.deleteString(i,i + suffixLen);
            }
 else             if (CharArrayUtil.regionMatches(chars,i,prefix)) {
              myDocument.deleteString(i,i + prefixLen);
            }
          }
          myDocument.deleteString(offset1,offset1 + prefixLen);
        }
      }
    }
  }
}
