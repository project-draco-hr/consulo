{
  int KB=1024;
  int MB=1024 * KB;
  java.io.File f=new java.io.File(hash.this.getBinding().getProperty("args")[0]);
  if (!org.codehaus.groovy.runtime.DefaultGroovyMethods.asBoolean(f.exists()) || !org.codehaus.groovy.runtime.DefaultGroovyMethods.asBoolean(f.isFile())) {
    println("Invalid file " + java.lang.String.valueOf(f) + " provided");
    println("Usage: groovy sha1.groovy <file_to_hash>");
  }
  final MessageDigest messageDigest=MessageDigest.getInstance("SHA1");
  long start=java.lang.System.currentTimeMillis();
  org.codehaus.groovy.runtime.DefaultGroovyMethods.eachByte(f,MB,new groovy.lang.Closure<java.lang.Void>(this,this){
    public void doCall(    java.lang.Byte[] buf,    int bytesRead){
      messageDigest.update(buf,0,bytesRead);
    }
  }
);
  java.lang.String sha1Hex=org.codehaus.groovy.runtime.DefaultGroovyMethods.padLeft(new BigInteger(1,messageDigest.digest()).toString(16),40,"0");
  long delta=java.lang.System.currentTimeMillis() - start;
  println(sha1Hex + " took " + java.lang.String.valueOf(delta)+ " ms to calculate");
  return null;
}
