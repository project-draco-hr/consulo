{
  final Collection<VirtualFile> affected=dirtyScope.getAffectedContentRootsWithCheck();
  if (dirtyScope.getAffectedContentRoots().size() != affected.size()) {
    final Set<VirtualFile> set=new HashSet<VirtualFile>(affected);
    set.removeAll(dirtyScope.getAffectedContentRoots());
    for (    VirtualFile file : set) {
      ((VcsModifiableDirtyScope)dirtyScope).addDirtyDirRecursively(new FilePathImpl(file));
    }
  }
  Collection<VirtualFile> roots=GitUtil.gitRootsForPaths(affected);
  final MyNonChangedHolder holder=new MyNonChangedHolder(myProject,dirtyScope.getDirtyFilesNoExpand(),addGate);
  for (  VirtualFile root : roots) {
    ChangeCollector c=new ChangeCollector(myProject,dirtyScope,root);
    final Collection<Change> changes=c.changes();
    holder.changed(changes);
    for (    Change file : changes) {
      builder.processChange(file,GitVcs.getKey());
    }
    for (    VirtualFile f : c.unversioned()) {
      builder.processUnversionedFile(f);
      holder.unversioned(f);
    }
    holder.feedBuilder(builder);
  }
}
