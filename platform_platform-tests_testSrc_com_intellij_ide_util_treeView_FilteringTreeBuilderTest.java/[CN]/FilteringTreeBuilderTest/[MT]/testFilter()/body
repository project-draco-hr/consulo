{
  myTree.setRootVisible(false);
  final Node f1=myRoot.addChild("folder1");
  f1.addChild("file11");
  f1.addChild("file12");
  Node f11=f1.addChild("folder11");
  f11.addChild("element111");
  myRoot.addChild("folder2").addChild("file21");
  initBuilder();
  assertTree("-/\n" + " -folder1\n" + "  file11\n"+ "  file12\n"+ "  -folder11\n"+ "   element111\n"+ " -folder2\n"+ "  file21\n");
  update("",findNode("file11"));
  assertTree("-/\n" + " -folder1\n" + "  [file11]\n"+ "  file12\n"+ "  -folder11\n"+ "   element111\n"+ " -folder2\n"+ "  file21\n");
  update("f",null);
  assertTree("-/\n" + " -folder1\n" + "  [file11]\n"+ "  file12\n"+ "  folder11\n"+ " -folder2\n"+ "  file21\n");
  update("fo",null);
  assertTree("-/\n" + " -folder1\n" + "  [folder11]\n"+ " folder2\n");
  update("fo_",null);
  assertTree("+/\n");
  update("",null);
  assertTree("-/\n" + " -[folder1]\n" + "  file11\n"+ "  file12\n"+ "  -folder11\n"+ "   element111\n"+ " -folder2\n"+ "  file21\n");
  select("element111");
  assertTree("-/\n" + " -folder1\n" + "  file11\n"+ "  file12\n"+ "  -folder11\n"+ "   [element111]\n"+ " -folder2\n"+ "  file21\n");
  update("folder2",null);
  assertTree("-/\n" + " [folder2]\n");
  update("",null);
  assertTree("-/\n" + " -folder1\n" + "  file11\n"+ "  file12\n"+ "  -folder11\n"+ "   element111\n"+ " -[folder2]\n"+ "  file21\n");
  update("file1",null);
  assertTree("-/\n" + " -[folder1]\n" + "  file11\n"+ "  file12\n");
  select("file12");
  assertTree("-/\n" + " -folder1\n" + "  file11\n"+ "  [file12]\n");
  update("",null);
  assertTree("-/\n" + " -folder1\n" + "  file11\n"+ "  [file12]\n"+ "  -folder11\n"+ "   element111\n"+ " -folder2\n"+ "  file21\n");
}
