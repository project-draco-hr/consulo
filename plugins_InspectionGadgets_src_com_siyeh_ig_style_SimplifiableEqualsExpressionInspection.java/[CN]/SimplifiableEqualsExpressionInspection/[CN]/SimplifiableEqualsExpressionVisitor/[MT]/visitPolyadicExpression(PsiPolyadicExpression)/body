{
  super.visitPolyadicExpression(expression);
  final IElementType tokenType=expression.getOperationTokenType();
  if (JavaTokenType.ANDAND.equals(tokenType)) {
    final PsiExpression[] operands=expression.getOperands();
    if (operands.length != 2) {
      return;
    }
    final PsiExpression lhs=operands[0];
    final PsiVariable variable=getVariableFromNullComparison(lhs,false);
    if (variable == null) {
      return;
    }
    if (!isEqualsConstant(operands[1],variable)) {
      return;
    }
    registerError(lhs);
  }
 else   if (JavaTokenType.OROR.equals(tokenType)) {
    final PsiExpression[] operands=expression.getOperands();
    if (operands.length != 2) {
      return;
    }
    final PsiExpression lhs=operands[0];
    final PsiVariable variable=getVariableFromNullComparison(lhs,true);
    if (variable == null) {
      return;
    }
    if (!isEqualsConstant(operands[1],variable)) {
      return;
    }
    registerError(lhs);
  }
}
