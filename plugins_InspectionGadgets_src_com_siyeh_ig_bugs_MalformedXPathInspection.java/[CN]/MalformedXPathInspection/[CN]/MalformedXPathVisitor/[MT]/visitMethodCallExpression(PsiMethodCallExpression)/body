{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argList=expression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  if (args.length == 0) {
    return;
  }
  final PsiExpression xpathArg=args[0];
  if (!TypeUtils.expressionHasType("java.lang.String",xpathArg)) {
    return;
  }
  if (!PsiUtil.isConstantExpression(xpathArg)) {
    return;
  }
  final PsiType regexType=xpathArg.getType();
  final String value=(String)ConstantExpressionUtil.computeCastTo(xpathArg,regexType);
  if (value == null) {
    return;
  }
  if (!callTakesRegex(expression)) {
    return;
  }
  final XPathFactory xpathFactory=XPathFactory.newInstance();
  final XPath xpath=xpathFactory.newXPath();
  try {
    xpath.compile(value);
  }
 catch (  XPathExpressionException ignore) {
    registerError(xpathArg);
  }
}
