{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression xpathArgument=arguments[0];
  if (!TypeUtils.expressionHasType(xpathArgument,CommonClassNames.JAVA_LANG_STRING)) {
    return;
  }
  if (!PsiUtil.isConstantExpression(xpathArgument)) {
    return;
  }
  final PsiType type=xpathArgument.getType();
  final String value=(String)ConstantExpressionUtil.computeCastTo(xpathArgument,type);
  if (value == null) {
    return;
  }
  if (!callTakesXPathExpression(expression)) {
    return;
  }
  final XPathFactory xpathFactory=XPathFactory.newInstance();
  final XPath xpath=xpathFactory.newXPath();
  try {
    xpath.compile(value);
  }
 catch (  XPathExpressionException ignore) {
    registerError(xpathArgument);
  }
}
