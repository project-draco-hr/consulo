{
  if (!file.isWritable())   return;
  if (!editor.getSelectionModel().hasSelection()) {
    editor.getSelectionModel().selectLineAtCaret();
    if (!editor.getSelectionModel().hasSelection())     return;
  }
  PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
  int offset=editor.getCaretModel().getOffset();
  int contextType=TemplateManager.getInstance(project).getContextType(file,offset);
  TemplateImpl[] templates=TemplateSettings.getInstance().getTemplates();
  ArrayList<TemplateImpl> array=new ArrayList<TemplateImpl>();
  for (  TemplateImpl template : templates) {
    if (template.isDeactivated())     continue;
    if (template.getTemplateContext().isInContext(contextType) && template.isSelectionTemplate()) {
      array.add(template);
    }
  }
  if (array.isEmpty()) {
    HintManager.getInstance().showErrorHint(editor,"No templates defined in this context");
    return;
  }
  Collections.sort(array,new Comparator<TemplateImpl>(){
    public int compare(    TemplateImpl o1,    TemplateImpl o2){
      return o1.getKey().compareTo(o2.getKey());
    }
  }
);
  final TemplateImpl[] listData=array.toArray(new TemplateImpl[array.size()]);
  final JList list=new JList(listData);
  list.setCellRenderer(new MyListCellRenderer(listData));
  ListPopup listPopup=new ListPopup(" Select Template ",list,new Runnable(){
    public void run(){
      String selectionString=editor.getSelectionModel().getSelectedText();
      TemplateImpl template=(TemplateImpl)list.getSelectedValue();
      if (template == null)       return;
      if (selectionString != null) {
        if (template.isToReformat())         selectionString=selectionString.trim();
      }
      TemplateManager.getInstance(project).startTemplate(editor,selectionString,template);
    }
  }
,project);
  new MySpeedSearchBase(listPopup,list,listData);
  LogicalPosition pos=editor.getCaretModel().getLogicalPosition();
  Point caretLocation=editor.logicalPositionToXY(new LogicalPosition(pos.line + 1,pos.column));
  int y=caretLocation.y;
  int x=caretLocation.x;
  Point location=editor.getContentComponent().getLocationOnScreen();
  x+=location.x;
  y+=location.y;
  listPopup.show(x,y);
}
