{
  final ProfileManager profileManager=ProfileManager.getProfileManager(myProfileType);
  LOG.assertTrue(profileManager != null);
  final Map<ProfileScope,String> usedProfiles=getProfilesUsedInProject();
  final Set<String> differentUsedProfiles=new HashSet<String>();
  differentUsedProfiles.addAll(usedProfiles.values());
  if (!usedProfiles.isEmpty()) {
    final Element assignedScopes=new Element(SCOPES);
    for (    ProfileScope scope : usedProfiles.keySet()) {
      final Element scopeElement=new Element(SCOPE);
      scope.write(scopeElement);
      scopeElement.setAttribute(PROFILE,usedProfiles.get(scope));
      assignedScopes.addContent(scopeElement);
    }
    element.addContent(assignedScopes);
    final Element profiles=new Element(PROFILES);
    for (    String profile : differentUsedProfiles) {
      final Profile projectProfile=profileManager.getProfile(profile);
      if (projectProfile != null) {
        final Element profileElement=new Element(PROFILE);
        projectProfile.writeExternal(profileElement);
        profiles.addContent(profileElement);
      }
    }
    element.addContent(profiles);
  }
  final ProfileScope profileScope=ProfileScopeFactory.getInstance(myProject).getProfileScope();
  if (!isProperProfile(profileScope)) {
    final Element currentProjectProfile=new Element(CURRENT_PROFILE);
    final Profile rootProfile=profileManager.getRootProfile();
    final String name=rootProfile.getName();
    currentProjectProfile.setAttribute(PROFILE,name);
    if (!differentUsedProfiles.contains(name)) {
      rootProfile.writeExternal(currentProjectProfile);
    }
    element.addContent(currentProjectProfile);
  }
}
