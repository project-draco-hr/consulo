{
  if (!myToReInitWholePanel)   return;
  myWholePanel=new JPanel(new BorderLayout()){
    @Override public void addNotify(){
      super.addNotify();
      MasterDetailsComponent.this.addNotify();
      TreeModel m=myTree.getModel();
      if (m instanceof DefaultTreeModel) {
        DefaultTreeModel model=(DefaultTreeModel)m;
        for (int eachRow=0; eachRow < myTree.getRowCount(); eachRow++) {
          TreePath eachPath=myTree.getPathForRow(eachRow);
          Object component=eachPath.getLastPathComponent();
          if (component instanceof TreeNode) {
            model.nodeChanged((TreeNode)component);
          }
        }
      }
    }
  }
;
  mySplitter.setHonorComponentsMinimumSize(true);
  myWholePanel.add(mySplitter,BorderLayout.CENTER);
  JPanel left=new JPanel(new BorderLayout()){
    @Override public Dimension getMinimumSize(){
      final Dimension original=super.getMinimumSize();
      return new Dimension(Math.max(original.width,100),original.height);
    }
  }
;
  left.add(myNorthPanel,BorderLayout.NORTH);
  myMaster=ScrollPaneFactory.createScrollPane(myTree,SideBorder.TOP);
  left.add(myMaster,BorderLayout.CENTER);
  mySplitter.setFirstComponent(left);
  final JPanel right=new JPanel(new BorderLayout());
  right.add(myDetails.getComponent(),BorderLayout.CENTER);
  mySplitter.setSecondComponent(right);
  GuiUtils.replaceJSplitPaneWithIDEASplitter(myWholePanel);
  myToReInitWholePanel=false;
}
