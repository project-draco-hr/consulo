def sign(ui, repo, *revs, **opts):
    "add a signature for the current or given revision\n\n    If no revision is given, the parent of the working directory is used,\n    or tip if no revision is checked out.\n\n    See 'hg help dates' for a list of formats valid for -d/--date.\n    "
    mygpg = newgpg(ui, **opts)
    sigver = '0'
    sigmessage = ''
    date = opts.get('date')
    if date:
        opts['date'] = util.parsedate(date)
    if revs:
        nodes = [repo.lookup(n) for n in revs]
    else:
        nodes = [node for node in repo.dirstate.parents() if (node != hgnode.nullid)]
        if (len(nodes) > 1):
            raise util.Abort(_('uncommitted merge - please provide a specific revision'))
        if (not nodes):
            nodes = [repo.changelog.tip()]
    for n in nodes:
        hexnode = hgnode.hex(n)
        ui.write((_('Signing %d:%s\n') % (repo.changelog.rev(n), hgnode.short(n))))
        data = node2txt(repo, n, sigver)
        sig = mygpg.sign(data)
        if (not sig):
            raise util.Abort(_('Error while signing'))
        sig = binascii.b2a_base64(sig)
        sig = sig.replace('\n', '')
        sigmessage += ('%s %s %s\n' % (hexnode, sigver, sig))
    if opts['local']:
        repo.opener('localsigs', 'ab').write(sigmessage)
        return
    msigs = match.exact(repo.root, '', ['.hgsigs'])
    s = repo.status(match=msigs, unknown=True, ignored=True)[:6]
    if (util.any(s) and (not opts['force'])):
        raise util.Abort(_('working copy of .hgsigs is changed (please commit .hgsigs manually or use --force)'))
    repo.wfile('.hgsigs', 'ab').write(sigmessage)
    if ('.hgsigs' not in repo.dirstate):
        repo.add(['.hgsigs'])
    if opts['no_commit']:
        return
    message = opts['message']
    if (not message):
        message = '\n'.join([('Added signature for changeset %s' % hgnode.short(n)) for n in nodes])
    try:
        repo.commit(message, opts['user'], opts['date'], match=msigs)
    except ValueError as inst:
        raise util.Abort(str(inst))
