{
  super(tree,treeModel,treeStructure,null);
  myProject=project;
  myStructureModel=structureModel;
  myPsiTreeChangeListener=new MyPsiTreeChangeListener();
  myModelListener=new ModelListener(){
    public void onModelChanged(){
      addRootToUpdate();
    }
  }
;
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  myCopyPasteListener=new CopyPasteUtil.DefaultCopyPasteListener(myUpdater);
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  initRootNode();
  myStructureModel.addModelListener(myModelListener);
  final DocumentAdapter documentsListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      if (myProject.isDisposed())       return;
      if (PsiDocumentManager.getInstance(myProject).isUncommited(e.getDocument())) {
        final boolean hasActiveRequests=myUpdateAlarm.getActiveRequestCount() > 0;
        myUpdateAlarm.cancelAllRequests();
        myUpdateEditorAlarm.cancelAllRequests();
        myUpdateEditorAlarm.addRequest(new Runnable(){
          public void run(){
            if (myProject.isDisposed())             return;
            PsiDocumentManager.getInstance(myProject).commitAllDocuments();
            if (hasActiveRequests) {
              setupUpdateAlarm();
            }
          }
        }
,500,ModalityState.stateForComponent(myTree));
      }
    }
  }
;
  EditorFactory.getInstance().getEventMulticaster().addDocumentListener(documentsListener,this);
}
