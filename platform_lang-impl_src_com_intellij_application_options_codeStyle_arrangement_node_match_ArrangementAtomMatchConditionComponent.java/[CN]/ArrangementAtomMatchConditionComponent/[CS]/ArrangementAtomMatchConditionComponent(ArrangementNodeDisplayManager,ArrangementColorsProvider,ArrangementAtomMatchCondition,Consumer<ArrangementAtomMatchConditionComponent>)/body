{
  myColorsProvider=colorsProvider;
  myCondition=condition;
  myCloseCallback=closeCallback;
  myText=manager.getDisplayValue(condition);
  myTextControl.setTextAlign(SwingConstants.CENTER);
  myTextControl.append(myText,SimpleTextAttributes.fromTextAttributes(colorsProvider.getTextAttributes(condition.getType(),false)));
  myTextControlSize=new Dimension(manager.getMaxWidth(condition.getType()),myTextControl.getPreferredSize().height);
  final ArrangementRemoveConditionAction action=new ArrangementRemoveConditionAction();
  Icon buttonIcon=action.getTemplatePresentation().getIcon();
  Dimension buttonSize=new Dimension(buttonIcon.getIconWidth(),buttonIcon.getIconHeight());
  if (closeCallback == null) {
    myCloseButton=null;
    myCloseButtonBounds=null;
  }
 else {
    myCloseButton=new ActionButton(action,action.getTemplatePresentation().clone(),ArrangementConstants.RULE_TREE_PLACE,buttonSize){
      @Override protected Icon getIcon(){
        return myCloseButtonHovered ? action.getTemplatePresentation().getHoveredIcon() : action.getTemplatePresentation().getIcon();
      }
    }
;
    myCloseButtonBounds=new Rectangle(0,0,buttonIcon.getIconWidth(),buttonIcon.getIconHeight());
  }
  GridBagConstraints constraints=new GridBag().anchor(GridBagConstraints.WEST).weightx(1).insets(0,0,0,0);
  JPanel insetsPanel=new JPanel(new GridBagLayout()){
    @Override public String toString(){
      return "insets panel for " + myText;
    }
  }
;
  insetsPanel.add(myTextControl,constraints);
  insetsPanel.setBorder(IdeBorderFactory.createEmptyBorder(0,ArrangementConstants.HORIZONTAL_PADDING,0,0));
  insetsPanel.setOpaque(false);
  final int arcSize=myTextControl.getFont().getSize();
  JPanel roundBorderPanel=new JPanel(new GridBagLayout()){
    @Override public void paint(    Graphics g){
      Rectangle buttonBounds=getCloseButtonScreenBounds();
      if (buttonBounds != null) {
        Point mouseScreenLocation=MouseInfo.getPointerInfo().getLocation();
        myCloseButtonHovered=buttonBounds.contains(mouseScreenLocation);
      }
      Rectangle bounds=getBounds();
      g.setColor(myBackgroundColor);
      g.fillRoundRect(0,0,bounds.width,bounds.height,arcSize,arcSize);
      super.paint(g);
    }
    @Override public String toString(){
      return "round border panel for " + myText;
    }
  }
;
  roundBorderPanel.add(insetsPanel,new GridBag().anchor(GridBagConstraints.WEST));
  if (myCloseButton != null) {
    roundBorderPanel.add(new InsetsPanel(myCloseButton),new GridBag().anchor(GridBagConstraints.EAST));
  }
  myBorder=IdeBorderFactory.createRoundedBorder(arcSize);
  roundBorderPanel.setBorder(myBorder);
  roundBorderPanel.setOpaque(false);
  myAnimationPanel=new ArrangementAnimationPanel(roundBorderPanel){
    @Override public void paint(    Graphics g){
      Point point=ArrangementConfigUtil.getLocationOnScreen(this);
      if (point != null) {
        Rectangle bounds=myAnimationPanel.getBounds();
        myScreenBounds=new Rectangle(point.x,point.y,bounds.width,bounds.height);
      }
      if (!myEnabled && g instanceof Graphics2D) {
        ((Graphics2D)g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f));
      }
      super.paint(g);
    }
  }
;
  myAnimationPanel.setOpaque(false);
  setSelected(false);
  if (myCloseButton != null) {
    myCloseButton.setVisible(false);
  }
}
