{
  if (myTabs != null)   return;
  myTabs=(JBRunnerTabs)new JBRunnerTabs(myProject,myActionManager,myFocusManager,this).setDataProvider(new DataProvider(){
    @Override public Object getData(    @NonNls final String dataId){
      if (ViewContext.CONTENT_KEY.is(dataId)) {
        TabInfo info=myTabs.getTargetInfo();
        if (info != null) {
          return getGridFor(info).getData(dataId);
        }
      }
 else       if (ViewContext.CONTEXT_KEY.is(dataId)) {
        return RunnerContentUi.this;
      }
      return null;
    }
  }
).setTabLabelActionsAutoHide(false).setProvideSwitchTargets(false).setInnerInsets(new Insets(0,0,0,0)).setToDrawBorderIfTabsHidden(false).setTabDraggingEnabled(isMoveToGridActionEnabled()).setUiDecorator(null).getJBTabs();
  rebuildTabPopup();
  myTabs.getPresentation().setPaintBorder(0,0,0,0).setPaintFocus(false).setRequestFocusOnLastFocusedComponent(true);
  myTabs.getComponent().setBackground(myToolbar.getBackground());
  myTabs.getComponent().setBorder(new EmptyBorder(0,2,0,0));
  final NonOpaquePanel wrappper=new NonOpaquePanel(new BorderLayout(0,0));
  wrappper.add(myToolbar,BorderLayout.WEST);
  wrappper.add(myTabs.getComponent(),BorderLayout.CENTER);
  myComponent.setContent(wrappper);
  myTabs.addListener(new TabsListener.Adapter(){
    @Override public void beforeSelectionChanged(    TabInfo oldSelection,    TabInfo newSelection){
      if (oldSelection != null && !isStateBeingRestored()) {
        final GridImpl grid=getGridFor(oldSelection);
        if (grid != null && getTabFor(grid) != null) {
          grid.saveUiState();
        }
      }
    }
    @Override public void tabsMoved(){
      saveUiState();
    }
    @Override public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      if (!myTabs.getComponent().isShowing())       return;
      if (newSelection != null) {
        newSelection.stopAlerting();
        getGridFor(newSelection).processAddToUi(false);
      }
      if (oldSelection != null) {
        getGridFor(oldSelection).processRemoveFromUi();
      }
    }
  }
);
  myTabs.addTabMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (UIUtil.isCloseClick(e)) {
        final TabInfo tabInfo=myTabs.findInfo(e);
        final GridImpl grid=tabInfo == null ? null : getGridFor(tabInfo);
        final Content[] contents=grid != null ? CONTENT_KEY.getData(grid) : null;
        if (contents == null)         return;
        if (CloseViewAction.isEnabled(contents)) {
          CloseViewAction.perform(RunnerContentUi.this,contents[0]);
        }
 else         if (MinimizeViewAction.isEnabled(RunnerContentUi.this,contents,ViewContext.TAB_TOOLBAR_PLACE)) {
          grid.getCellFor(contents[0]).minimize(contents[0]);
        }
      }
    }
  }
);
  if (myOriginal != null) {
    final ContentManager manager=ContentFactory.SERVICE.getInstance().createContentManager(this,false,myProject);
    Disposer.register((Disposable)myRunnerUi,manager);
    manager.getComponent();
  }
 else {
    final DockManager dockManager=DockManager.getInstance(myProject);
    if (dockManager != null) {
      dockManager.register(this);
    }
  }
}
