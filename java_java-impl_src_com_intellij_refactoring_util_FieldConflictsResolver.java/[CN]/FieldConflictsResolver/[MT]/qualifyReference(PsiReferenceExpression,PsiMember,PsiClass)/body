{
  PsiManager manager=referenceExpression.getManager();
  PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(referenceExpression,PsiMethodCallExpression.class,true);
  while ((methodCallExpression) != null) {
    if (HighlightUtil.isSuperOrThisMethodCall(methodCallExpression)) {
      return referenceExpression;
    }
    methodCallExpression=PsiTreeUtil.getParentOfType(methodCallExpression,PsiMethodCallExpression.class,true);
  }
  PsiReferenceExpression expressionFromText;
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  if (qualifyingClass == null) {
    PsiClass parentClass=PsiTreeUtil.getParentOfType(referenceExpression,PsiClass.class);
    final PsiClass containingClass=member.getContainingClass();
    if (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass,containingClass,true)) {
      while (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass,containingClass,true)) {
        parentClass=PsiTreeUtil.getParentOfType(parentClass,PsiClass.class,true);
      }
      LOG.assertTrue(parentClass != null);
      expressionFromText=(PsiReferenceExpression)factory.createExpressionFromText("A.this." + member.getName(),null);
      ((PsiThisExpression)expressionFromText.getQualifierExpression()).getQualifier().replace(factory.createClassReferenceElement(parentClass));
    }
 else {
      expressionFromText=(PsiReferenceExpression)factory.createExpressionFromText("this." + member.getName(),null);
    }
  }
 else {
    expressionFromText=(PsiReferenceExpression)factory.createExpressionFromText("A." + member.getName(),null);
    expressionFromText.setQualifierExpression(factory.createReferenceExpression(qualifyingClass));
  }
  CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
  expressionFromText=(PsiReferenceExpression)codeStyleManager.reformat(expressionFromText);
  return (PsiReferenceExpression)referenceExpression.replace(expressionFromText);
}
