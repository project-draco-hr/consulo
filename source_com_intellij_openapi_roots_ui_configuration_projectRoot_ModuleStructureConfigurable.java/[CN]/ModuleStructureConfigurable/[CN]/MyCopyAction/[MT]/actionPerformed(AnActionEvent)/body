{
  final NamedConfigurable namedConfigurable=getSelectedConfugurable();
  if (namedConfigurable instanceof ModuleConfigurable) {
    try {
      final String modulePresentation=IdeBundle.message("project.new.wizard.module.identification");
      final NamePathComponent component=new NamePathComponent(IdeBundle.message("label.project.name"),IdeBundle.message("label.component.file.location",StringUtil.capitalize(modulePresentation)),'a','l',IdeBundle.message("title.select.project.file.directory",modulePresentation),IdeBundle.message("description.select.project.file.directory",StringUtil.capitalize(modulePresentation)));
      final DialogWrapper copyModuleDialog=new DialogWrapper(myTree,false){
{
          setTitle(ProjectBundle.message("copy.module.dialog.title"));
          init();
        }
        public JComponent getPreferredFocusedComponent(){
          return component.getNameComponent();
        }
        @Nullable protected JComponent createCenterPanel(){
          return component;
        }
        protected void doOKAction(){
          if (component.getNameValue().length() == 0) {
            Messages.showErrorDialog(ProjectBundle.message("enter.module.copy.name.error.message"),CommonBundle.message("title.error"));
            return;
          }
          if (component.getPath().length() == 0) {
            Messages.showErrorDialog(IdeBundle.message("prompt.enter.project.file.location",modulePresentation),CommonBundle.message("title.error"));
            return;
          }
          if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.project.file.directory",modulePresentation),component.getPath(),true)) {
            Messages.showErrorDialog(ProjectBundle.message("path.0.is.invalid.error.message",component.getPath()),CommonBundle.message("title.error"));
            return;
          }
          super.doOKAction();
        }
      }
;
      copyModuleDialog.show();
      if (!copyModuleDialog.isOK())       return;
      final ModifiableRootModel rootModel=((ModuleConfigurable)namedConfigurable).getModuleEditor().getModifiableRootModel();
      final String path=component.getPath();
      final ModuleBuilder builder=new ModuleBuilder(){
        public void setupRootModel(        final ModifiableRootModel modifiableRootModel) throws ConfigurationException {
          if (rootModel.isSdkInherited()) {
            modifiableRootModel.inheritSdk();
          }
 else {
            modifiableRootModel.setSdk(rootModel.getSdk());
          }
          modifiableRootModel.getModuleExtension(CompilerModuleExtension.class).inheritCompilerOutputPath(true);
          modifiableRootModel.getModuleExtension(LanguageLevelModuleExtension.class).setLanguageLevel(LanguageLevelModuleExtension.getInstance(rootModel.getModule()).getLanguageLevel());
          for (          OrderEntry entry : rootModel.getOrderEntries()) {
            if (entry instanceof JdkOrderEntry)             continue;
            if (entry instanceof ModuleSourceOrderEntry)             continue;
            if (entry instanceof ClonableOrderEntry) {
              modifiableRootModel.addOrderEntry(((ClonableOrderEntry)entry).cloneEntry((RootModelImpl)modifiableRootModel,(ProjectRootManagerImpl)ProjectRootManager.getInstance(myProject),VirtualFilePointerManager.getInstance()));
            }
          }
          VirtualFile content=LocalFileSystem.getInstance().findFileByPath(component.getPath());
          if (content == null) {
            content=LocalFileSystem.getInstance().refreshAndFindFileByPath(component.getPath());
          }
          modifiableRootModel.addContentEntry(content);
        }
        public ModuleType getModuleType(){
          return rootModel.getModule().getModuleType();
        }
      }
;
      builder.setName(component.getNameValue());
      builder.setModuleFilePath(path + "/" + builder.getName()+ ModuleFileType.DOT_DEFAULT_EXTENSION);
      final Module module=myContext.myModulesConfigurator.addModule(builder);
      if (module != null) {
        addModuleNode(module);
      }
    }
 catch (    Exception e1) {
      LOG.error(e1);
    }
  }
}
