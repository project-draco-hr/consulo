def __init__(self, opener, indexfile, bundlefile, linkmapper=None):
    revlog.revlog.__init__(self, opener, indexfile)
    self.bundlefile = bundlefile
    self.basemap = {}

    def chunkpositer():
        for chunk in changegroup.chunkiter(bundlefile):
            pos = bundlefile.tell()
            yield (chunk, (pos - len(chunk)))
    n = len(self)
    prev = None
    for (chunk, start) in chunkpositer():
        size = len(chunk)
        if (size < 80):
            raise util.Abort(_('invalid changegroup'))
        start += 80
        size -= 80
        (node, p1, p2, cs) = struct.unpack('20s20s20s20s', chunk[:80])
        if (node in self.nodemap):
            prev = node
            continue
        for p in (p1, p2):
            if (not (p in self.nodemap)):
                raise error.LookupError(p, self.indexfile, _('unknown parent'))
        if (linkmapper is None):
            link = n
        else:
            link = linkmapper(cs)
        if (not prev):
            prev = p1
        e = (revlog.offset_type(start, 0), size, (-1), (-1), link, self.rev(p1), self.rev(p2), node)
        self.basemap[n] = prev
        self.index.insert((-1), e)
        self.nodemap[node] = n
        prev = node
        n += 1
