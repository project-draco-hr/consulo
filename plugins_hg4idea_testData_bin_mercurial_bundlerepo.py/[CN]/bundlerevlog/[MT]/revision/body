def revision(self, node):
    'return an uncompressed revision of a given'
    if (node == nullid):
        return ''
    text = None
    chain = []
    iter_node = node
    rev = self.rev(iter_node)
    while self.bundle(rev):
        if (self._cache and (self._cache[0] == iter_node)):
            text = self._cache[2]
            break
        chain.append(rev)
        iter_node = self.bundlebase(rev)
        rev = self.rev(iter_node)
    if (text is None):
        text = revlog.revlog.revision(self, iter_node)
    while chain:
        delta = self._chunk(chain.pop())
        text = mdiff.patches(text, [delta])
    (p1, p2) = self.parents(node)
    if (node != revlog.hash(text, p1, p2)):
        raise error.RevlogError((_('integrity check failed on %s:%d') % (self.datafile, self.rev(node))))
    self._cache = (node, self.rev(node), text)
    return text
