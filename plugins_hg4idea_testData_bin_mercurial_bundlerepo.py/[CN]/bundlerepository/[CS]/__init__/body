def __init__(self, ui, path, bundlename):
    self._tempparent = None
    try:
        localrepo.localrepository.__init__(self, ui, path)
    except error.RepoError:
        self._tempparent = tempfile.mkdtemp()
        localrepo.instance(ui, self._tempparent, 1)
        localrepo.localrepository.__init__(self, ui, self._tempparent)
    if path:
        self._url = ((('bundle:' + util.expandpath(path)) + '+') + bundlename)
    else:
        self._url = ('bundle:' + bundlename)
    self.tempfile = None
    self.bundlefile = open(bundlename, 'rb')
    header = self.bundlefile.read(6)
    if (not header.startswith('HG')):
        raise util.Abort((_('%s: not a Mercurial bundle file') % bundlename))
    elif (not header.startswith('HG10')):
        raise util.Abort((_('%s: unknown bundle version') % bundlename))
    elif ((header == 'HG10BZ') or (header == 'HG10GZ')):
        (fdtemp, temp) = tempfile.mkstemp(prefix='hg-bundle-', suffix='.hg10un', dir=self.path)
        self.tempfile = temp
        fptemp = os.fdopen(fdtemp, 'wb')

        def generator(f):
            if (header == 'HG10BZ'):
                zd = bz2.BZ2Decompressor()
                zd.decompress('BZ')
            elif (header == 'HG10GZ'):
                zd = zlib.decompressobj()
            for chunk in f:
                yield zd.decompress(chunk)
        gen = generator(util.filechunkiter(self.bundlefile, 4096))
        try:
            fptemp.write('HG10UN')
            for chunk in gen:
                fptemp.write(chunk)
        finally:
            fptemp.close()
            self.bundlefile.close()
        self.bundlefile = open(self.tempfile, 'rb')
        self.bundlefile.seek(6)
    elif (header == 'HG10UN'):
        pass
    else:
        raise util.Abort((_('%s: unknown bundle compression type') % bundlename))
    self.bundlefilespos = {}
