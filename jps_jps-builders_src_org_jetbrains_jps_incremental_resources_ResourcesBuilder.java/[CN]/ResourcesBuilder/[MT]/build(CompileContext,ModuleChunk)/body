{
  ResourcePatterns patterns=ResourcePatterns.KEY.get(context);
  if (patterns == null) {
    ResourcePatterns.KEY.set(context,patterns=new ResourcePatterns(context.getProject()));
  }
  try {
    final ResourcePatterns finalPatterns=patterns;
    final Ref<Boolean> doneSomething=new Ref<Boolean>(false);
    context.processFilesToRecompile(chunk,new FileProcessor(){
      public boolean apply(      final Module module,      final File file,      final String sourceRoot) throws IOException {
        if (finalPatterns.isResourceFile(file,sourceRoot)) {
          try {
            context.processMessage(new ProgressMessage("Copying " + file.getPath()));
            doneSomething.set(true);
            copyResource(context,module,file,sourceRoot,context.getDataManager().getSourceToOutputMap(module.getName(),context.isCompilingTests()));
          }
 catch (          IOException e) {
            LOG.info(e);
            context.processMessage(new CompilerMessage("Resource Compiler",BuildMessage.Kind.ERROR,e.getMessage(),FileUtil.toSystemIndependentName(file.getPath())));
            return false;
          }
        }
        return true;
      }
    }
);
    return doneSomething.get() ? ExitCode.OK : ExitCode.NOTHING_DONE;
  }
 catch (  Exception e) {
    throw new ProjectBuildException(e.getMessage(),e);
  }
}
