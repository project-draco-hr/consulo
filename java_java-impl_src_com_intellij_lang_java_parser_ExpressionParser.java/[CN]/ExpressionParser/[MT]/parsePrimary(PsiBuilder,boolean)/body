{
  PsiBuilder.Marker startMarker=builder.mark();
  final Pair<PsiBuilder.Marker,IElementType> exprTypePair=parsePrimaryExpressionStart(builder);
  if (exprTypePair == null) {
    startMarker.drop();
    return null;
  }
  PsiBuilder.Marker expr=exprTypePair.first;
  IElementType exprType=exprTypePair.second;
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == JavaTokenType.DOT) {
      final PsiBuilder.Marker dotPos=builder.mark();
      builder.advanceLexer();
      final IElementType dotTokenType=builder.getTokenType();
      if (dotTokenType == JavaTokenType.CLASS_KEYWORD && exprType == JavaElementType.REFERENCE_EXPRESSION) {
        if (planB) {
          error(builder,JavaErrorMessages.message("expected.identifier"));
          PsiBuilderUtil.drop(startMarker,dotPos);
          return expr;
        }
        final PsiBuilder.Marker copy=startMarker.precede();
        startMarker.rollbackTo();
        final PsiBuilder.Marker classObjAccess=parseClassObjectAccess(builder);
        if (classObjAccess == null) {
          copy.rollbackTo();
          return parsePrimary(builder,true);
        }
        startMarker=copy;
        expr=classObjAccess;
        exprType=JavaElementType.CLASS_OBJECT_ACCESS_EXPRESSION;
      }
 else       if (dotTokenType == JavaTokenType.NEW_KEYWORD) {
        dotPos.drop();
        expr=parseNew(builder,expr);
        exprType=JavaElementType.NEW_EXPRESSION;
      }
 else       if ((dotTokenType == JavaTokenType.THIS_KEYWORD || dotTokenType == JavaTokenType.SUPER_KEYWORD) && exprType == JavaElementType.REFERENCE_EXPRESSION) {
        if (planB) {
          dotPos.rollbackTo();
          startMarker.drop();
          return expr;
        }
        final PsiBuilder.Marker copy=startMarker.precede();
        startMarker.rollbackTo();
        final PsiBuilder.Marker ref=ReferenceParser.parseJavaCodeReference(builder,false,true,false);
        if (ref == null || builder.getTokenType() != JavaTokenType.DOT) {
          copy.rollbackTo();
          return parsePrimary(builder,true);
        }
        builder.advanceLexer();
        if (builder.getTokenType() != dotTokenType) {
          copy.rollbackTo();
          return parsePrimary(builder,true);
        }
        builder.advanceLexer();
        startMarker=copy;
        exprType=dotTokenType == JavaTokenType.THIS_KEYWORD ? JavaElementType.THIS_EXPRESSION : JavaElementType.SUPER_EXPRESSION;
        expr=ref.precede();
        expr.done(exprType);
      }
 else       if (dotTokenType == JavaTokenType.SUPER_KEYWORD) {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        builder.advanceLexer();
        refExpr.done(exprType=JavaElementType.REFERENCE_EXPRESSION);
        expr=refExpr;
      }
 else {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        ReferenceParser.parseReferenceParameterList(builder,false);
        if (!JavaParserUtil.expectOrError(builder,JavaTokenType.IDENTIFIER,JavaErrorMessages.message("expected.identifier"))) {
          refExpr.done(JavaElementType.REFERENCE_EXPRESSION);
          startMarker.drop();
          return refExpr;
        }
        refExpr.done(exprType=JavaElementType.REFERENCE_EXPRESSION);
        expr=refExpr;
      }
    }
 else     if (tokenType == JavaTokenType.LPARENTH) {
      if (exprType != JavaElementType.REFERENCE_EXPRESSION) {
        if (exprType == JavaElementType.SUPER_EXPRESSION) {
          if (planB) {
            startMarker.drop();
            return expr;
          }
          final PsiBuilder.Marker copy=startMarker.precede();
          startMarker.rollbackTo();
          final Pair<PsiBuilder.Marker,IElementType> qualifier=parsePrimaryExpressionStart(builder);
          if (qualifier != null) {
            final PsiBuilder.Marker refExpr=qualifier.first.precede();
            if (builder.getTokenType() == JavaTokenType.DOT) {
              builder.advanceLexer();
              if (builder.getTokenType() == JavaTokenType.SUPER_KEYWORD) {
                builder.advanceLexer();
                refExpr.done(exprType=JavaElementType.REFERENCE_EXPRESSION);
                expr=refExpr;
                startMarker=copy;
                continue;
              }
            }
          }
          copy.rollbackTo();
          return parsePrimary(builder,true);
        }
 else {
          startMarker.drop();
          return expr;
        }
      }
      final PsiBuilder.Marker callExpr=expr.precede();
      parseArgumentList(builder);
      callExpr.done(exprType=JavaElementType.METHOD_CALL_EXPRESSION);
      expr=callExpr;
    }
 else     if (tokenType == JavaTokenType.LBRACKET) {
      if (planB) {
        startMarker.drop();
        return expr;
      }
      builder.advanceLexer();
      if (builder.getTokenType() == JavaTokenType.RBRACKET && exprType == JavaElementType.REFERENCE_EXPRESSION) {
        final PsiBuilder.Marker copy=startMarker.precede();
        startMarker.rollbackTo();
        final PsiBuilder.Marker classObjAccess=parseClassObjectAccess(builder);
        if (classObjAccess == null) {
          copy.rollbackTo();
          return parsePrimary(builder,true);
        }
        startMarker=copy;
        expr=classObjAccess;
        exprType=JavaElementType.CLASS_OBJECT_ACCESS_EXPRESSION;
      }
 else {
        final PsiBuilder.Marker arrayAccess=expr.precede();
        final PsiBuilder.Marker index=parse(builder);
        if (index == null) {
          error(builder,JavaErrorMessages.message("expected.expression"));
          arrayAccess.done(JavaElementType.ARRAY_ACCESS_EXPRESSION);
          startMarker.drop();
          return arrayAccess;
        }
        if (builder.getTokenType() != JavaTokenType.RBRACKET) {
          error(builder,JavaErrorMessages.message("expected.rbracket"));
          arrayAccess.done(JavaElementType.ARRAY_ACCESS_EXPRESSION);
          startMarker.drop();
          return arrayAccess;
        }
        builder.advanceLexer();
        arrayAccess.done(exprType=JavaElementType.ARRAY_ACCESS_EXPRESSION);
        expr=arrayAccess;
      }
    }
 else {
      startMarker.drop();
      return expr;
    }
  }
}
