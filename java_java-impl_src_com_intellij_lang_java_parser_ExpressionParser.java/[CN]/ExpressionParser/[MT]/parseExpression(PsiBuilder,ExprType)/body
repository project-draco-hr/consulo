{
switch (type) {
case CONDITIONAL_OR:
    return parseBinary(builder,ExprType.CONDITIONAL_AND,CONDITIONAL_OR_OPS);
case CONDITIONAL_AND:
  return parseBinary(builder,ExprType.OR,CONDITIONAL_AND_OPS);
case OR:
return parseBinary(builder,ExprType.XOR,OR_OPS);
case XOR:
return parseBinary(builder,ExprType.AND,XOR_OPS);
case AND:
return parseBinary(builder,ExprType.EQUALITY,AND_OPS);
case EQUALITY:
return parseBinary(builder,ExprType.RELATIONAL,EQUALITY_OPS);
case RELATIONAL:
return parseRelational(builder);
case SHIFT:
return parseBinary(builder,ExprType.ADDITIVE,SHIFT_OPS);
case ADDITIVE:
return parseBinary(builder,ExprType.MULTIPLICATIVE,ADDITIVE_OPS);
case MULTIPLICATIVE:
return parseBinary(builder,ExprType.UNARY,MULTIPLICATIVE_OPS);
case UNARY:
return parseUnary(builder);
case TYPE:
final ReferenceParser.TypeInfo typeInfo=ReferenceParser.parseType(builder);
return typeInfo != null ? typeInfo.marker : null;
default :
LOG.error("Unexpected type: " + type);
return null;
}
}
