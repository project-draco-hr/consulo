{
  ElementManipulator<PsiElement> manipulator=ElementManipulators.getManipulator(element);
  TextRange range=manipulator.getRangeInElement(element);
  String text=range.substring(element.getText());
  FileReferenceSet set=new FileReferenceSet(text,element,range.getStartOffset(),null,SystemInfo.isFileSystemCaseSensitive,false){
    private MavenDomProjectModel model;
    @Override protected Condition<PsiFileSystemItem> getReferenceCompletionFilter(){
      return myCondition;
    }
    @Override protected boolean isSoft(){
      return true;
    }
    @Override public FileReference createFileReference(    TextRange range,    int index,    String text){
      return new FileReference(this,range,index,text){
        @Override protected void innerResolveInContext(        @NotNull String text,        @NotNull PsiFileSystemItem context,        Collection<ResolveResult> result,        boolean caseSensitive){
          if (model == null) {
            DomElement rootElement=DomUtil.getFileElement(genericDomValue).getRootElement();
            if (rootElement instanceof MavenDomProjectModel) {
              model=(MavenDomProjectModel)rootElement;
            }
          }
          String resolvedText=model == null ? text : MavenPropertyResolver.resolve(text,model);
          if (resolvedText.equals(text)) {
            super.innerResolveInContext(resolvedText,context,result,caseSensitive);
          }
 else {
            VirtualFile contextFile=context.getVirtualFile();
            if (contextFile == null)             return;
            VirtualFile file=null;
            if (getIndex() == 0) {
              file=LocalFileSystem.getInstance().findFileByPath(resolvedText);
            }
            if (file == null) {
              file=LocalFileSystem.getInstance().findFileByPath(contextFile.getPath() + '/' + resolvedText);
            }
            if (file != null) {
              PsiFileSystemItem res=file.isDirectory() ? context.getManager().findDirectory(file) : context.getManager().findFile(file);
              if (res != null) {
                result.add(new PsiElementResolveResult(res));
              }
            }
          }
        }
      }
;
    }
  }
;
  return set.getAllReferences();
}
