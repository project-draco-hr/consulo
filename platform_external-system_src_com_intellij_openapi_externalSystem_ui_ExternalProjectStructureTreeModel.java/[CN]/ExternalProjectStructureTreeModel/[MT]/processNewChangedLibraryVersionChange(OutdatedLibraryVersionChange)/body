{
  for (  Module module : myPlatformFacade.getModules(myProject)) {
    String moduleName=module.getName();
    LibraryOrderEntry dependency=myProjectStructureHelper.findIdeLibraryDependency(moduleName,change.getIdeLibraryId().getLibraryName(),myProject);
    if (dependency == null) {
      continue;
    }
    ProjectStructureNode<GradleSyntheticId> dependenciesNode=getDependenciesNode(new ModuleId(ProjectSystemId.IDE,moduleName));
    Collection<ProjectStructureNode<LibraryDependencyId>> dependencyNodes=dependenciesNode.getChildren(LibraryDependencyId.class);
    for (    ProjectStructureNode<LibraryDependencyId> dependencyNode : dependencyNodes) {
      LibraryDependencyId id=dependencyNode.getDescriptor().getElement();
      if (id.getLibraryId().equals(change.getLibraryId()) || id.getLibraryId().equals(change.getIdeLibraryId())) {
        dependenciesNode.remove(dependencyNode);
      }
    }
    CompositeLibraryDependencyId libraryDependencyId=new CompositeLibraryDependencyId(new LibraryDependencyId(myExternalSystemId,moduleName,change.getLibraryId().getLibraryName()),new LibraryDependencyId(ProjectSystemId.IDE,moduleName,change.getIdeLibraryId().getLibraryName()));
    String libraryDependencyNodeName=ExternalSystemUtil.getOutdatedEntityName(change.getBaseLibraryName(),change.getExternalLibraryVersion(),change.getIdeLibraryVersion());
    ProjectStructureNode<CompositeLibraryDependencyId> libraryDependencyNode=buildNode(libraryDependencyId,libraryDependencyNodeName);
    libraryDependencyNode.setAttributes(ExternalSystemTextAttributes.OUTDATED_ENTITY);
    if (passFilters(libraryDependencyNode)) {
      dependenciesNode.add(libraryDependencyNode);
    }
  }
}
