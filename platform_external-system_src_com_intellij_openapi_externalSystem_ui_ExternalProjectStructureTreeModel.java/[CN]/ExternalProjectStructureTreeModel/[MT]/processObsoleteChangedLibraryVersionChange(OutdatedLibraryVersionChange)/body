{
  Library library=myProjectStructureHelper.findIdeLibraryByBaseName(change.getBaseLibraryName(),myProject);
  if (library == null) {
    return;
  }
  for (  Map.Entry<String,ProjectStructureNode<GradleSyntheticId>> entry : myModuleDependencies.entrySet()) {
    String moduleName=entry.getKey();
    CompositeLibraryDependencyId outdatedEntityId=new CompositeLibraryDependencyId(new LibraryDependencyId(myExternalSystemId,moduleName,change.getLibraryId().getLibraryName()),new LibraryDependencyId(ProjectSystemId.IDE,moduleName,change.getIdeLibraryId().getLibraryName()));
    ProjectStructureNode<GradleSyntheticId> dependenciesNode=entry.getValue();
    Collection<ProjectStructureNode<CompositeLibraryDependencyId>> dependencyNodes=dependenciesNode.getChildren(CompositeLibraryDependencyId.class);
    for (    ProjectStructureNode<CompositeLibraryDependencyId> oldDependencyNode : dependencyNodes) {
      if (!outdatedEntityId.equals(oldDependencyNode.getDescriptor().getElement())) {
        continue;
      }
      dependenciesNode.remove(oldDependencyNode);
      LibraryOrderEntry libraryDependency=myProjectStructureHelper.findIdeLibraryDependency(moduleName,ExternalSystemUtil.getLibraryName(library),myProject);
      if (libraryDependency != null) {
        LibraryDependencyId newDependencyId=EntityIdMapper.mapEntityToId(libraryDependency);
        ProjectStructureNode<LibraryDependencyId> newDependencyNode=buildNode(newDependencyId,newDependencyId.getDependencyName());
        populateLibraryDependencyNode(newDependencyNode,libraryDependency.getLibrary());
        dependenciesNode.add(newDependencyNode);
      }
    }
  }
}
