{
  myModuleDependencies.clear();
  myModules.clear();
  ProjectId projectId=EntityIdMapper.mapEntityToId(getProject());
  ProjectStructureNode<ProjectId> root=buildNode(projectId,getProject().getName());
  setRoot(root);
  final Collection<Module> modules=myPlatformFacade.getModules(getProject());
  final List<ProjectStructureNode<?>> dependencies=ContainerUtilRt.newArrayList();
  final List<Pair<ProjectStructureNode<LibraryDependencyId>,Library>> libraryDependencies=ContainerUtilRt.newArrayList();
  RootPolicy<Object> visitor=new RootPolicy<Object>(){
    @Override public Object visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    Object value){
      ModuleDependencyId id=EntityIdMapper.mapEntityToId(moduleOrderEntry);
      dependencies.add(buildNode(id,moduleOrderEntry.getModuleName()));
      return value;
    }
    @Override public Object visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    Object value){
      if (libraryOrderEntry.getLibraryName() == null) {
        return value;
      }
      LibraryDependencyId id=EntityIdMapper.mapEntityToId(libraryOrderEntry);
      ProjectStructureNode<LibraryDependencyId> dependencyNode=buildNode(id,id.getDependencyName());
      Library library=libraryOrderEntry.getLibrary();
      if (library != null) {
        libraryDependencies.add(Pair.create(dependencyNode,library));
        dependencies.add(dependencyNode);
      }
      return value;
    }
  }
;
  for (  Module module : modules) {
    dependencies.clear();
    libraryDependencies.clear();
    final ModuleId moduleId=EntityIdMapper.mapEntityToId(module);
    final ProjectStructureNode<ModuleId> moduleNode=buildNode(moduleId,moduleId.getModuleName());
    myModules.put(module.getName(),moduleNode);
    root.add(moduleNode);
    final Collection<ModuleAwareContentRoot> contentRoots=myPlatformFacade.getContentRoots(module);
    for (    ContentEntry entry : contentRoots) {
      ContentRootId contentRootId=EntityIdMapper.mapEntityToId(entry);
      moduleNode.add(buildContentRootNode(contentRootId,contentRoots.size() <= 1));
    }
    for (    OrderEntry orderEntry : myPlatformFacade.getOrderEntries(module)) {
      orderEntry.accept(visitor,null);
    }
    if (dependencies.isEmpty()) {
      continue;
    }
    ProjectStructureNode<GradleSyntheticId> dependenciesNode=getDependenciesNode(moduleId);
    for (    ProjectStructureNode<?> dependency : dependencies) {
      dependenciesNode.add(dependency);
    }
    if (!libraryDependencies.isEmpty()) {
      for (      Pair<ProjectStructureNode<LibraryDependencyId>,Library> p : libraryDependencies) {
        populateLibraryDependencyNode(p.first,p.second);
      }
    }
  }
  ExternalProject externalProject=myChangesModel.getExternalProject(myExternalSystemId,myProject);
  if (externalProject != null) {
    ExternalProjectChangesCalculationContext context=myChangesModel.getCurrentChangesContext(externalProject,myProject,onIdeProjectStructureChange);
    processChanges(Collections.<ExternalProjectStructureChange>emptyList(),ContainerUtil.union(context.getKnownChanges(),context.getCurrentChanges()));
    filterNodes(root);
  }
}
