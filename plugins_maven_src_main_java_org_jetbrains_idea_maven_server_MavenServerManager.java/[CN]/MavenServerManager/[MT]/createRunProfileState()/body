{
  return new CommandLineState(null){
    private SimpleJavaParameters createJavaParameters() throws ExecutionException {
      final SimpleJavaParameters params=new SimpleJavaParameters();
      params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
      params.setWorkingDirectory(PathManager.getBinPath());
      final ArrayList<String> classPath=new ArrayList<String>();
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(NotNull.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(StringUtil.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(THashSet.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Element.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Query.class),classPath);
      params.getClassPath().add(PathManager.getResourceRoot(getClass(),"/messages/CommonBundle.properties"));
      params.getClassPath().addAll(classPath);
      params.getClassPath().addAllFiles(collectClassPathAndLibsFolder().first);
      params.setMainClass(MAIN_CLASS);
      Map<String,String> defs=new THashMap<String,String>();
      defs.putAll(MavenUtil.getPropertiesFromMavenOpts());
      for (      Map.Entry<Object,Object> each : System.getProperties().entrySet()) {
        Object key=each.getKey();
        Object value=each.getValue();
        if (key instanceof String && value instanceof String && ((String)key).startsWith("javax.net.ssl")) {
          defs.put((String)key,(String)value);
        }
      }
      if (SystemInfo.isMac) {
        String arch=System.getProperty("sun.arch.data.model");
        if (arch != null) {
          params.getVMParametersList().addParametersString("-d" + arch);
        }
      }
      defs.put("java.awt.headless","true");
      for (      Map.Entry<String,String> each : defs.entrySet()) {
        params.getVMParametersList().defineProperty(each.getKey(),each.getValue());
      }
      params.getVMParametersList().addParametersString("-Xmx512m");
      return params;
    }
    @Override public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      ProcessHandler processHandler=startProcess();
      return new DefaultExecutionResult(null,processHandler,AnAction.EMPTY_ARRAY);
    }
    @NotNull protected OSProcessHandler startProcess() throws ExecutionException {
      SimpleJavaParameters params=createJavaParameters();
      Sdk sdk=params.getJdk();
      final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
      final OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString()){
        @Override public Charset getCharset(){
          return commandLine.getCharset();
        }
      }
;
      return processHandler;
    }
  }
;
}
