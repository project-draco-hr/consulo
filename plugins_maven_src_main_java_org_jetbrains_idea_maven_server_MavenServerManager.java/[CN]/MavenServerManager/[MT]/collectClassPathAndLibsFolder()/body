{
  File pluginFileOrDir=new File(PathUtil.getJarPathForClass(MavenServerManager.class));
  File libDir;
  List<File> classpath=new SmartList<File>();
  if (pluginFileOrDir.isDirectory()) {
    classpath.add(new File(pluginFileOrDir.getParent(),"maven-server-api"));
    if (getInstance().isUseMaven2()) {
      classpath.add(new File(pluginFileOrDir.getParent(),"maven2-server-impl"));
      File luceneLib=new File(PathUtil.getJarPathForClass(Query.class));
      libDir=new File(luceneLib.getParentFile().getParentFile().getParentFile(),"maven2-server-impl/lib");
    }
 else {
      classpath.add(new File(pluginFileOrDir.getParent(),"maven3-server-impl"));
      File luceneLib=new File(PathUtil.getJarPathForClass(Query.class));
      File maven3Module_Lib=new File(luceneLib.getParentFile().getParentFile().getParentFile(),"maven3-server-impl/lib");
      File maven3Home=new File(maven3Module_Lib,"maven3");
      libDir=new File(maven3Home,"lib");
      classpath.add(new File(maven3Home,"boot/plexus-classworlds-2.4.jar"));
      for (      File jar : maven3Module_Lib.listFiles()) {
        if (jar.isFile() && jar.getName().endsWith(".jar")) {
          classpath.add(jar);
        }
      }
    }
  }
 else {
    libDir=pluginFileOrDir.getParentFile();
  }
  MavenLog.LOG.assertTrue(libDir.exists() && libDir.isDirectory(),"Maven server libraries dir not found: " + libDir);
  File[] files=libDir.listFiles();
  for (  File jar : files) {
    if (jar.isFile() && jar.getName().endsWith(".jar") && !jar.equals(pluginFileOrDir)) {
      classpath.add(jar);
    }
  }
  return Pair.create(classpath,libDir);
}
