{
  ModelBuilder<? extends IdeaProject> modelBuilder=myHelper.getModelBuilder(id,settings,connection,downloadLibraries);
  IdeaProject project=modelBuilder.get();
  DataNode<ProjectData> result=populateProject(project,projectPath);
  Map<String,Pair<DataNode<ModuleData>,IdeaModule>> modules=createModules(project,result);
  populateModules(modules.values(),result);
  Collection<DataNode<LibraryData>> libraries=ExternalSystemUtil.getChildren(result,ProjectKeys.LIBRARY);
  myLibraryNamesMixer.mixNames(libraries);
  if (settings != null) {
    List<String> extensionClassNames=settings.getResolverExtensions();
    if (myCachedExtensions == null || !myCachedExtensions.first.equals(extensionClassNames)) {
      List<String> classNames=ContainerUtilRt.newArrayList(extensionClassNames);
      List<GradleProjectResolverExtension> extensions=ContainerUtilRt.newArrayList();
      for (      String className : classNames) {
        try {
          extensions.add((GradleProjectResolverExtension)Class.forName(className).newInstance());
        }
 catch (        Exception e) {
          throw new IllegalArgumentException(String.format("Can't instantiate project resolve extension for class '%s'",className),e);
        }
      }
      myCachedExtensions=Pair.create(classNames,extensions);
    }
    for (    GradleProjectResolverExtension extension : myCachedExtensions.second) {
      extension.enhanceProject(result,connection,!downloadLibraries);
    }
  }
  return result;
}
