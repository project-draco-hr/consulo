{
  ProjectData projectData=rootProjectNode.getData();
  final String rootProjectPath=projectData.getLinkedExternalProjectPath();
  Map<String,Collection<TaskData>> tasksByModule=ContainerUtilRt.newHashMap();
  TObjectIntHashMap<Pair<String,String>> rootProjectTaskCandidates=new TObjectIntHashMap<Pair<String,String>>();
  final Collection<TaskData> rootProjectTasks=ContainerUtilRt.newArrayList();
  final DomainObjectSet<? extends IdeaModule> modules=project.getModules();
  for (  IdeaModule module : modules) {
    String moduleConfigPath=GradleUtil.getConfigPath(module.getGradleProject(),rootProjectPath);
    for (    GradleTask task : module.getGradleProject().getTasks()) {
      String name=task.getName();
      if (name == null || name.trim().isEmpty()) {
        continue;
      }
      String s=name.toLowerCase();
      if (s.contains("idea")) {
        continue;
      }
      TaskData taskData=new TaskData(GradleConstants.SYSTEM_ID,name,moduleConfigPath,task.getDescription());
      if (rootProjectPath.equals(moduleConfigPath)) {
        rootProjectTasks.add(taskData);
      }
 else {
        Collection<TaskData> tasks=tasksByModule.get(module.getName());
        if (tasks == null) {
          tasksByModule.put(module.getName(),tasks=ContainerUtilRt.newArrayList());
        }
        tasks.add(taskData);
        Pair<String,String> key=Pair.create(name,task.getDescription());
        rootProjectTaskCandidates.put(key,rootProjectTaskCandidates.get(key) + 1);
      }
    }
  }
  rootProjectTaskCandidates.forEachEntry(new TObjectIntProcedure<Pair<String,String>>(){
    @Override public boolean execute(    Pair<String,String> p,    int occurrenceNumber){
      if (modules.size() == 1 || occurrenceNumber >= modules.size() - 1) {
        rootProjectTasks.add(new TaskData(GradleConstants.SYSTEM_ID,p.first,rootProjectPath,p.second));
      }
      return true;
    }
  }
);
  for (  TaskData task : rootProjectTasks) {
    rootProjectNode.createChild(ProjectKeys.TASK,task);
  }
  Collection<DataNode<ModuleData>> moduleNodes=ExternalSystemApiUtil.findAll(rootProjectNode,ProjectKeys.MODULE);
  for (  DataNode<ModuleData> moduleNode : moduleNodes) {
    ModuleData moduleData=moduleNode.getData();
    if (rootProjectPath.equals(moduleData.getLinkedExternalProjectPath()) && !projectData.getName().equals(moduleData.getName())) {
      moduleData.setName(projectData.getName());
    }
    Collection<TaskData> tasks=tasksByModule.get(moduleData.getName());
    if (tasks != null && !tasks.isEmpty()) {
      for (      TaskData task : tasks) {
        moduleNode.createChild(ProjectKeys.TASK,task);
      }
    }
  }
}
