{
  File binaryPath=dependency.getFile();
  if (binaryPath == null) {
    throw new IllegalStateException(String.format("Can't parse external library dependency '%s'. Reason: it doesn't specify path to the binaries",dependency));
  }
  LibraryData library=new LibraryData(GradleConstants.SYSTEM_ID,FileUtil.getNameWithoutExtension(binaryPath));
  library.addPath(LibraryPathType.BINARY,binaryPath.getAbsolutePath());
  File sourcePath=dependency.getSource();
  if (sourcePath != null) {
    library.addPath(LibraryPathType.SOURCE,sourcePath.getAbsolutePath());
  }
  File javadocPath=dependency.getJavadoc();
  if (javadocPath != null) {
    library.addPath(LibraryPathType.DOC,javadocPath.getAbsolutePath());
  }
  Collection<DataHolder<LibraryData>> libraryHolders=ideProject.getCompositeNestedData(ExternalSystemProjectKeys.LIBRARY);
  if (libraryHolders != null) {
    for (    DataHolder<LibraryData> holder : libraryHolders) {
      if (library.equals(holder.getData())) {
        return new LibraryDependencyData(ownerModule.getData(),holder.getData());
      }
    }
  }
  ideProject.createChildAtSet(ExternalSystemProjectKeys.LIBRARY,library);
  return new LibraryDependencyData(ownerModule.getData(),library);
}
