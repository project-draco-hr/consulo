{
  DomainObjectSet<? extends IdeaModule> gradleModules=gradleProject.getModules();
  if (gradleModules == null || gradleModules.isEmpty()) {
    throw new IllegalStateException("No modules found for the target project: " + gradleProject);
  }
  Map<String,Pair<DataHolder<ModuleData>,IdeaModule>> result=ContainerUtilRt.newHashMap();
  for (  IdeaModule gradleModule : gradleModules) {
    if (gradleModule == null) {
      continue;
    }
    String moduleName=gradleModule.getName();
    if (moduleName == null) {
      throw new IllegalStateException("Module with undefined name detected: " + gradleModule);
    }
    ProjectData projectData=ideProject.getData();
    ModuleData ideModule=new ModuleData(GradleConstants.SYSTEM_ID,moduleName,projectData.getProjectFileDirectoryPath());
    Pair<DataHolder<ModuleData>,IdeaModule> previouslyParsedModule=result.get(moduleName);
    if (previouslyParsedModule != null) {
      throw new IllegalStateException(String.format("Modules with duplicate name (%s) detected: '%s' and '%s'",moduleName,ideModule,previouslyParsedModule));
    }
    DataHolder<ModuleData> moduleDataHolder=ideProject.createChildAtSet(ExternalSystemProjectKeys.MODULE,ideModule);
    result.put(moduleName,new Pair<DataHolder<ModuleData>,IdeaModule>(moduleDataHolder,gradleModule));
  }
  return result;
}
