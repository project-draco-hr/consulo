{
  File binaryPath=dependency.getFile();
  if (binaryPath == null) {
    throw new IllegalStateException(String.format("Can't parse external library dependency '%s'. Reason: it doesn't specify path to the binaries",dependency));
  }
  String libraryName=FileUtil.getNameWithoutExtension(binaryPath);
  boolean unresolved=libraryName.startsWith(UNRESOLVED_DEPENDENCY_PREFIX);
  if (unresolved) {
    libraryName=binaryPath.getName().substring(UNRESOLVED_DEPENDENCY_PREFIX.length());
    int i=libraryName.indexOf(' ');
    if (i >= 0) {
      i=CharArrayUtil.shiftForward(libraryName,i + 1," ");
    }
    if (i >= 0 && i < libraryName.length()) {
      int dependencyNameIndex=i;
      i=libraryName.indexOf(' ',dependencyNameIndex);
      if (i > 0) {
        libraryName=String.format("%s-%s",libraryName.substring(dependencyNameIndex,i),libraryName.substring(i + 1));
      }
    }
  }
  final LibraryData library=new LibraryData(GradleConstants.SYSTEM_ID,libraryName,unresolved);
  if (!unresolved) {
    library.addPath(LibraryPathType.BINARY,binaryPath.getAbsolutePath());
  }
  File sourcePath=dependency.getSource();
  if (!unresolved && sourcePath != null) {
    library.addPath(LibraryPathType.SOURCE,sourcePath.getAbsolutePath());
  }
  File javadocPath=dependency.getJavadoc();
  if (!unresolved && javadocPath != null) {
    library.addPath(LibraryPathType.DOC,javadocPath.getAbsolutePath());
  }
  DataNode<LibraryData> libraryData=ExternalSystemApiUtil.find(ideProject,ProjectKeys.LIBRARY,new BooleanFunction<DataNode<LibraryData>>(){
    @Override public boolean fun(    DataNode<LibraryData> node){
      return library.equals(node.getData());
    }
  }
);
  if (libraryData == null) {
    libraryData=ideProject.createChild(ProjectKeys.LIBRARY,library);
  }
  return new LibraryDependencyData(ownerModule.getData(),libraryData.getData(),LibraryLevel.PROJECT);
}
