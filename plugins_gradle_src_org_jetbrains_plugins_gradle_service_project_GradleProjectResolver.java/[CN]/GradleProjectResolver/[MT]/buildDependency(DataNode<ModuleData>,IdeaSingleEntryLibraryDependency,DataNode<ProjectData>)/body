{
  File binaryPath=dependency.getFile();
  if (binaryPath == null) {
    throw new IllegalStateException(String.format("Can't parse external library dependency '%s'. Reason: it doesn't specify path to the binaries",dependency));
  }
  final LibraryData library=new LibraryData(GradleConstants.SYSTEM_ID,FileUtil.getNameWithoutExtension(binaryPath));
  library.addPath(LibraryPathType.BINARY,binaryPath.getAbsolutePath());
  File sourcePath=dependency.getSource();
  if (sourcePath != null) {
    library.addPath(LibraryPathType.SOURCE,sourcePath.getAbsolutePath());
  }
  File javadocPath=dependency.getJavadoc();
  if (javadocPath != null) {
    library.addPath(LibraryPathType.DOC,javadocPath.getAbsolutePath());
  }
  DataNode<LibraryData> libraryData=ExternalSystemApiUtil.find(ideProject,ProjectKeys.LIBRARY,new BooleanFunction<DataNode<LibraryData>>(){
    @Override public boolean fun(    DataNode<LibraryData> node){
      return library.equals(node.getData());
    }
  }
);
  if (libraryData == null) {
    libraryData=ideProject.createChild(ProjectKeys.LIBRARY,library);
  }
  return new LibraryDependencyData(ownerModule.getData(),libraryData.getData());
}
