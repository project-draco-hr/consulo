{
  PsiElement element=info.elementRef.get();
  if (element == null || !element.isValid())   return;
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (info.type == LineMarkerInfo.OVERRIDING_METHOD) {
      PsiMethod[] superMethods=method.findSuperMethods(false);
      if (superMethods.length == 0)       return;
      boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(superMethods);
      openTargets(e,superMethods,DaemonBundle.message("navigation.title.super.method",method.getName()),new MethodCellRenderer(showMethodNames));
    }
 else     if (info.type == LineMarkerInfo.OVERRIDEN_METHOD) {
      PsiManager manager=method.getManager();
      PsiSearchHelper helper=manager.getSearchHelper();
      Project project=manager.getProject();
      GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      PsiMethod[] overridings=helper.findOverridingMethods(method,scope,true);
      if (overridings.length == 0)       return;
      String title=method.hasModifierProperty(PsiModifier.ABSTRACT) ? DaemonBundle.message("navigation.title.implementation.method",method.getName(),overridings.length) : DaemonBundle.message("navigation.title.overrider.method",method.getName(),overridings.length);
      boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(overridings);
      MethodCellRenderer renderer=new MethodCellRenderer(showMethodNames);
      Arrays.sort(overridings,renderer.getComparator());
      openTargets(e,overridings,title,renderer);
    }
 else {
      LOG.assertTrue(false);
    }
  }
 else   if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    PsiManager manager=aClass.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    if (info.type == LineMarkerInfo.SUBCLASSED_CLASS) {
      GlobalSearchScope scope=GlobalSearchScope.allScope(manager.getProject());
      PsiClass[] inheritors=helper.findInheritors(aClass,scope,true);
      if (inheritors.length == 0)       return;
      String title=aClass.isInterface() ? CodeInsightBundle.message("goto.implementation.chooser.title",aClass.getName(),inheritors.length) : DaemonBundle.message("navigation.title.subclass",aClass.getName(),inheritors.length);
      PsiClassListCellRenderer renderer=new PsiClassListCellRenderer();
      Arrays.sort(inheritors,renderer.getComparator());
      openTargets(e,inheritors,title,renderer);
    }
  }
}
