{
  checkConsistency();
  final Container parent=myPanel.getParent();
  if (parent instanceof Splitter) {
    EditorWithProviderComposite editorToSelect=getSelectedEditor();
    final EditorWindow[] siblings=findSiblings();
    final JPanel parent2=(JPanel)parent.getParent();
    final Set<EditorWithProviderComposite> siblingSelectedEditors=new HashSet<EditorWithProviderComposite>(siblings.length);
    for (    EditorWindow sibling : siblings) {
      final EditorWithProviderComposite selected=sibling.getSelectedEditor();
      if (editorToSelect == null) {
        editorToSelect=selected;
      }
      if (selected != null) {
        siblingSelectedEditors.add(selected);
        processSiblingEditor(selected);
      }
    }
    for (    final EditorWindow sibling : siblings) {
      final EditorWithProviderComposite[] siblingEditors=sibling.getEditors();
      for (      final EditorWithProviderComposite siblingEditor : siblingEditors) {
        if (!siblingSelectedEditors.contains(siblingEditor)) {
          if (editorToSelect == null) {
            editorToSelect=siblingEditor;
          }
          processSiblingEditor(siblingEditor);
        }
      }
      LOG.assertTrue(sibling != this);
      sibling.dispose();
    }
    parent2.remove(parent);
    if (myTabbedPane != null) {
      parent2.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
    }
 else {
      parent2.add(myPanel.getComponent(0),BorderLayout.CENTER);
    }
    parent2.revalidate();
    myPanel=parent2;
    if (editorToSelect != null) {
      setSelectedEditor(editorToSelect,true);
    }
    myOwner.setCurrentWindow(this,false);
  }
}
