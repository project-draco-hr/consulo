{
  if (myTabbedPane == null) {
    return;
  }
  final boolean closeNonModifiedFilesFirst=UISettings.getInstance().CLOSE_NON_MODIFIED_FILES_FIRST;
  final EditorComposite selectedComposite=getSelectedEditor();
  try {
    myInsideTabChange++;
    while_label:     while (myTabbedPane.getTabCount() > limit && myTabbedPane.getTabCount() > 0) {
      boolean allTabsArePinned=true;
      for (int i=myTabbedPane.getTabCount() - 1; i >= 0; i--) {
        final VirtualFile file=getFileAt(i);
        if (fileCanBeClosed(file,fileToIgnore)) {
          allTabsArePinned=false;
          break;
        }
      }
      if (allTabsArePinned) {
        return;
      }
      if (closeNonModifiedFilesFirst) {
        final VirtualFile[] allFiles=getFiles();
        final VirtualFile[] histFiles=EditorHistoryManager.getInstance(getManager().myProject).getFiles();
        for (int i=0; i != allFiles.length; ++i) {
          final VirtualFile file=allFiles[i];
          if (fileCanBeClosed(file,fileToIgnore)) {
            boolean found=false;
            for (int j=0; j != histFiles.length; j++) {
              if (histFiles[j] == file) {
                found=true;
                break;
              }
            }
            if (!found) {
              closeFile(file);
              continue while_label;
            }
          }
        }
        for (int i=0; i < histFiles.length; i++) {
          final VirtualFile file=histFiles[i];
          if (!fileCanBeClosed(file,fileToIgnore)) {
            continue;
          }
          final EditorComposite composite=findFileComposite(file);
          if (composite != null && composite.getInitialFileTimeStamp() == file.getTimeStamp()) {
            closeFile(file);
            continue while_label;
          }
        }
        final VirtualFile selectedFile=getSelectedFile();
        for (int i=0; i < myTabbedPane.getTabCount(); i++) {
          final VirtualFile file=getFileAt(i);
          final EditorComposite composite=getEditorAt(i);
          if (!fileCanBeClosed(file,fileToIgnore)) {
            continue;
          }
          if (!selectedFile.equals(file)) {
            if (composite.getInitialFileTimeStamp() == file.getTimeStamp()) {
              closeFile(file);
              continue while_label;
            }
          }
        }
      }
{
        final VirtualFile[] allFiles=getFiles();
        final VirtualFile[] histFiles=EditorHistoryManager.getInstance(getManager().myProject).getFiles();
        for (int i=0; i != allFiles.length; ++i) {
          final VirtualFile file=allFiles[i];
          if (fileCanBeClosed(file,fileToIgnore)) {
            boolean found=false;
            for (int j=0; j != histFiles.length; j++) {
              if (histFiles[j] == file) {
                found=true;
                break;
              }
            }
            if (!found) {
              closeFile(file);
              continue while_label;
            }
          }
        }
        for (int i=0; i < histFiles.length; i++) {
          final VirtualFile file=histFiles[i];
          if (fileCanBeClosed(file,fileToIgnore)) {
            closeFile(file);
            continue while_label;
          }
        }
      }
{
        final VirtualFile selectedFile=getSelectedFile();
        for (int i=0; i < myTabbedPane.getTabCount(); i++) {
          final VirtualFile file=getFileAt(i);
          if (!fileCanBeClosed(file,fileToIgnore)) {
            continue;
          }
          if (!selectedFile.equals(file)) {
            closeFile(file);
            continue while_label;
          }
 else           if (i == myTabbedPane.getTabCount() - 1) {
            closeFile(file);
            continue while_label;
          }
        }
      }
    }
  }
  finally {
    setSelectedEditor(selectedComposite);
    --myInsideTabChange;
  }
}
