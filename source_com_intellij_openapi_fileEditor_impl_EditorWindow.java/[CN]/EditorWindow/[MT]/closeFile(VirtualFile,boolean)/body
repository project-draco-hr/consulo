{
  final FileEditorManagerImpl editorManager=getManager();
  editorManager.mySplitters.myInsideChange++;
  try {
    final List<EditorWithProviderComposite> editors=editorManager.getEditorComposites(file);
    LOG.assertTrue(!editors.isEmpty());
    final EditorWithProviderComposite editor=findFileComposite(file);
    editorManager.disposeComposite(editor);
    if (myTabbedPane != null) {
      final int componentIndex=findComponentIndex(editor.getComponent());
      if (componentIndex >= 0) {
        int indexToSelect=calcIndexToSelect(file,componentIndex);
        if (indexToSelect >= 0) {
          myTabbedPane.setSelectedIndex(indexToSelect);
        }
        myTabbedPane.removeTabAt(componentIndex);
        final VirtualFile selectedFile=getSelectedFile();
        if (selectedFile != null) {
          editorManager.openFileImpl3(this,selectedFile,false,null);
        }
      }
    }
 else {
      myPanel.removeAll();
    }
    if (unsplit && getTabCount() == 0) {
      unsplit();
    }
    myPanel.revalidate();
    if (myTabbedPane == null) {
      myPanel.repaint();
    }
  }
  finally {
    editorManager.mySplitters.myInsideChange--;
    final FileEditorManagerListener publisher=editorManager.getProject().getMessageBus().syncPublisher(ProjectTopics.FILE_EDITOR_MANAGER);
    publisher.fileClosed(editorManager,file);
  }
}
