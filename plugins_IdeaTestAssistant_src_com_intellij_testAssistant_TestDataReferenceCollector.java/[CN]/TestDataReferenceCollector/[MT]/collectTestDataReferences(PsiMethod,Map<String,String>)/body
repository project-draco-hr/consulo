{
  final List<String> result=new ArrayList<String>();
  method.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      String callText=expression.getMethodExpression().getReferenceName();
      if (callText == null)       return;
      final PsiMethod callee=expression.resolveMethod();
      if (callee != null) {
        boolean haveAnnotatedParameters=false;
        final PsiParameter[] psiParameters=callee.getParameterList().getParameters();
        for (int i=0, psiParametersLength=psiParameters.length; i < psiParametersLength; i++) {
          PsiParameter psiParameter=psiParameters[i];
          final PsiModifierList modifierList=psiParameter.getModifierList();
          if (modifierList != null && modifierList.findAnnotation("com.intellij.testFramework.TestDataFile") != null) {
            myFoundTestDataParameters=true;
            processCallArgument(expression,argumentMap,result,i);
            haveAnnotatedParameters=true;
          }
        }
        if (expression.getMethodExpression().getQualifierExpression() == null && !haveAnnotatedParameters) {
          result.addAll(collectTestDataReferences(callee,buildArgumentMap(expression,callee)));
        }
      }
    }
  }
);
  return result;
}
