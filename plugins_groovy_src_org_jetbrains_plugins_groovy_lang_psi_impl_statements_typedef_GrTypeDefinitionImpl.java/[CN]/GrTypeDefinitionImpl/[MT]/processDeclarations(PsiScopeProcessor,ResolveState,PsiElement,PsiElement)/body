{
  for (  final GrTypeParameter typeParameter : getTypeParameters()) {
    if (!ResolveUtil.processElement(processor,typeParameter))     return false;
  }
  NameHint nameHint=processor.getHint(NameHint.KEY);
  String name=nameHint == null ? null : nameHint.getName(state);
  ClassHint classHint=processor.getHint(ClassHint.KEY);
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.PROPERTY)) {
    Map<String,CandidateInfo> fieldsMap=CollectClassMembersUtil.getAllFields(this);
    if (name != null) {
      CandidateInfo fieldInfo=fieldsMap.get(name);
      if (fieldInfo != null) {
        final PsiElement element=fieldInfo.getElement();
        if (!isSameDeclaration(place,element)) {
          if (!processor.execute(element,ResolveState.initial().put(PsiSubstitutor.KEY,state.get(PsiSubstitutor.KEY))))           return false;
        }
      }
    }
 else {
      for (      CandidateInfo info : fieldsMap.values()) {
        final PsiElement element=info.getElement();
        if (!isSameDeclaration(place,element)) {
          if (!processor.execute(element,ResolveState.initial().put(PsiSubstitutor.KEY,state.get(PsiSubstitutor.KEY))))           return false;
        }
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.METHOD)) {
    Map<String,List<CandidateInfo>> methodsMap=CollectClassMembersUtil.getAllMethods(this,true);
    boolean isPlaceGroovy=place.getLanguage() == GroovyFileType.GROOVY_FILE_TYPE.getLanguage();
    if (name == null) {
      for (      List<CandidateInfo> list : methodsMap.values()) {
        for (        CandidateInfo info : list) {
          PsiMethod method=(PsiMethod)info.getElement();
          if (!isSameDeclaration(place,method) && isMethodVisible(isPlaceGroovy,method) && !processor.execute(method,ResolveState.initial().put(PsiSubstitutor.KEY,state.get(PsiSubstitutor.KEY)))) {
            return false;
          }
        }
      }
    }
 else {
      List<CandidateInfo> byName=methodsMap.get(name);
      if (byName != null) {
        for (        CandidateInfo info : byName) {
          PsiMethod method=(PsiMethod)info.getElement();
          if (!isSameDeclaration(place,method) && isMethodVisible(isPlaceGroovy,method) && !processor.execute(method,ResolveState.initial().put(PsiSubstitutor.KEY,state.get(PsiSubstitutor.KEY)))) {
            return false;
          }
        }
      }
      final boolean isGetter=PsiUtil.isGetterName(name);
      final boolean isSetter=PsiUtil.isSetterName(name);
      if (isGetter || isSetter) {
        final String propName=StringUtil.decapitalize(name.substring(3));
        if (propName.length() > 0) {
          Map<String,CandidateInfo> fieldsMap=CollectClassMembersUtil.getAllFields(this);
          final CandidateInfo info=fieldsMap.get(propName);
          if (info != null) {
            final PsiElement field=info.getElement();
            if (field instanceof GrField && ((GrField)field).isProperty() && isPropertyReference(place,(PsiField)field,isGetter)) {
              if (!processor.execute(field,ResolveState.initial().put(PsiSubstitutor.KEY,state.get(PsiSubstitutor.KEY))))               return false;
            }
          }
        }
      }
    }
  }
  final GrTypeDefinitionBody body=getBody();
  if (lastParent == body && body != null) {
    if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.CLASS)) {
      for (      PsiClass innerClass : getAllInnerClasses()) {
        final String innerClassName=innerClass.getName();
        if (innerClassName == null) {
          continue;
        }
        if (nameHint != null && !innerClassName.equals(nameHint.getName(state))) {
          continue;
        }
        if (!processor.execute(innerClass,state)) {
          return false;
        }
      }
    }
  }
  return true;
}
