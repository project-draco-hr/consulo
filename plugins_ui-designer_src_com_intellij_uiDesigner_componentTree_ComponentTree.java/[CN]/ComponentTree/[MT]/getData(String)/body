{
  if (GuiEditor.DATA_KEY.is(dataId)) {
    return myEditor;
  }
  if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    return myDeleteProvider;
  }
  if (PlatformDataKeys.COPY_PROVIDER.is(dataId) || PlatformDataKeys.CUT_PROVIDER.is(dataId) || PlatformDataKeys.PASTE_PROVIDER.is(dataId)) {
    return myEditor == null ? null : myEditor.getData(dataId);
  }
  if (LW_INSPECTION_SUPPRESSION_ARRAY_DATA_KEY.is(dataId)) {
    Collection<LwInspectionSuppression> elements=getSelectedElements(LwInspectionSuppression.class);
    return elements.size() == 0 ? null : elements.toArray(new LwInspectionSuppression[elements.size()]);
  }
  if (PlatformDataKeys.HELP_ID.is(dataId)) {
    return ourHelpID;
  }
  if (PlatformDataKeys.FILE_EDITOR.is(dataId)) {
    return myFormEditor;
  }
  if (!PlatformDataKeys.NAVIGATABLE.is(dataId)) {
    return null;
  }
  final RadComponent selectedComponent=getSelectedComponent();
  if (selectedComponent == null) {
    return null;
  }
  final String classToBind=myEditor.getRootContainer().getClassToBind();
  if (classToBind == null) {
    return null;
  }
  final PsiClass aClass=FormEditingUtil.findClassToBind(myEditor.getModule(),classToBind);
  if (aClass == null) {
    return null;
  }
  if (selectedComponent instanceof RadRootContainer) {
    return EditSourceUtil.getDescriptor(aClass);
  }
  final String binding=selectedComponent.getBinding();
  if (binding == null) {
    return null;
  }
  final PsiField[] fields=aClass.getFields();
  for (  final PsiField field : fields) {
    if (binding.equals(field.getName())) {
      return EditSourceUtil.getDescriptor(field);
    }
  }
  return null;
}
