{
  if (targetContainer instanceof PsiDirectory) {
    final JavaRefactoringSettings refactoringSettings=JavaRefactoringSettings.getInstance();
    final MoveDirectoryWithClassesProcessor processor=new MoveDirectoryWithClassesProcessor(project,directories,(PsiDirectory)targetContainer,refactoringSettings.RENAME_SEARCH_IN_COMMENTS_FOR_PACKAGE,refactoringSettings.RENAME_SEARCH_IN_COMMENTS_FOR_PACKAGE,true,callback);
    processor.setPrepareSuccessfulSwingThreadCallback(new Runnable(){
      @Override public void run(){
      }
    }
);
    processor.run();
  }
 else {
    final boolean containsJava=hasJavaFiles(directories[0]);
    if (!containsJava) {
      MoveFilesOrDirectoriesUtil.doMove(project,new PsiElement[]{directories[0]},new PsiElement[]{targetContainer},callback);
      return;
    }
    final MoveClassesOrPackagesToNewDirectoryDialog dlg=new MoveClassesOrPackagesToNewDirectoryDialog(directories[0],new PsiElement[0],false,callback){
      @Override protected void performRefactoring(      Project project,      final PsiDirectory targetDirectory,      PsiPackage aPackage,      boolean searchInComments,      boolean searchForTextOccurences){
        final MoveDirectoryWithClassesProcessor processor=new MoveDirectoryWithClassesProcessor(project,directories,targetDirectory,searchInComments,searchForTextOccurences,true,callback);
        processor.setPrepareSuccessfulSwingThreadCallback(new Runnable(){
          @Override public void run(){
          }
        }
);
        processor.run();
      }
    }
;
    dlg.show();
  }
}
