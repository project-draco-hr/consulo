{
  if (canMoveOrRearrangePackages(elements)) {
    final PsiDirectory[] directories=new PsiDirectory[elements.length];
    System.arraycopy(elements,0,directories,0,directories.length);
    SelectMoveOrRearrangePackageDialog dialog=new SelectMoveOrRearrangePackageDialog(project,directories,targetContainer == null);
    dialog.show();
    if (!dialog.isOK())     return;
    if (dialog.isPackageRearrageSelected()) {
      MoveClassesOrPackagesImpl.doRearrangePackage(project,directories);
      return;
    }
    if (dialog.isMoveDirectory()) {
      if (targetContainer instanceof PsiDirectory) {
        final JavaRefactoringSettings refactoringSettings=JavaRefactoringSettings.getInstance();
        final MoveDirectoryWithClassesProcessor processor=new MoveDirectoryWithClassesProcessor(project,directories,(PsiDirectory)targetContainer,refactoringSettings.RENAME_SEARCH_IN_COMMENTS_FOR_PACKAGE,refactoringSettings.RENAME_SEARCH_IN_COMMENTS_FOR_PACKAGE,true,callback);
        processor.run();
      }
 else {
        final MoveClassesOrPackagesToNewDirectoryDialog dlg=new MoveClassesOrPackagesToNewDirectoryDialog(directories[0],new PsiElement[2],false,callback){
          @Override protected void performRefactoring(          Project project,          final PsiDirectory targetDirectory,          PsiPackage aPackage,          boolean searchInComments,          boolean searchForTextOccurences){
            final MoveDirectoryWithClassesProcessor processor=new MoveDirectoryWithClassesProcessor(project,directories,targetDirectory,searchInComments,searchForTextOccurences,true,callback);
            processor.run();
          }
        }
;
        dlg.show();
      }
      return;
    }
  }
  if (tryDirectoryMove(project,elements,targetContainer,callback)) {
    return;
  }
  MoveClassesOrPackagesImpl.doMove(project,elements,targetContainer,callback);
}
