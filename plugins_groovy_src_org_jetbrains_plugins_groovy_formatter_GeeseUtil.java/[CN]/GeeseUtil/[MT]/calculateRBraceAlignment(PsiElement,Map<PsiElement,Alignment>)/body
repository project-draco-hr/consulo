{
  int leadingBraceCount=0;
  PsiElement next;
  if (!isClosureContainLF(rBrace))   return null;
  for (next=getPreviousNonWhitespaceToken(rBrace); isClosureRBrace(next) && isClosureContainLF(next); next=getPreviousNonWhitespaceToken(next)) {
    leadingBraceCount++;
  }
  PsiElement cur=rBrace;
  for (next=getNextNonWhitespaceToken(cur); isClosureRBrace(next); next=getNextNonWhitespaceToken(cur)) {
    cur=next;
  }
  for (; leadingBraceCount > 0; leadingBraceCount--) {
    cur=getPreviousNonWhitespaceToken(cur);
  }
  PsiElement parent=cur.getParent();
  LOG.assertTrue(parent instanceof GrClosableBlock);
  cur=parent;
  if (cur.getParent() instanceof GrMethodCall) {
    GrMethodCall call=(GrMethodCall)cur.getParent();
    GrExpression invoked=call.getInvokedExpression();
    if (invoked instanceof GrReferenceExpression && ((GrReferenceExpression)invoked).getReferenceNameElement() != null) {
      cur=((GrReferenceExpression)invoked).getReferenceNameElement();
    }
 else {
      cur=call;
    }
  }
  cur=PsiTreeUtil.getDeepestFirst(cur);
  while (!PsiUtil.isNewLine(next=PsiTreeUtil.prevLeaf(cur,true))) {
    if (next == null)     break;
    if (next.getNode().getElementType() == TokenType.WHITE_SPACE && PsiTreeUtil.prevLeaf(next) == null) {
      break;
    }
    cur=next;
  }
  int startOffset=cur.getTextRange().getStartOffset();
  int endOffset=rBrace.getTextRange().getStartOffset();
  if (rBrace.getContainingFile().getText().substring(startOffset,endOffset).indexOf('\n') < 0) {
    return null;
  }
  while (true) {
    final PsiElement p=cur.getParent();
    if (p != null && p.getTextOffset() == cur.getTextOffset()) {
      cur=p;
    }
 else {
      break;
    }
  }
  Alignment alignment=alignments.get(cur);
  if (alignment == null) {
    alignment=Alignment.createAlignment(true);
    alignments.put(cur,alignment);
  }
  return alignment;
}
