{
  final MultiMap<PsiElement,String> conflictsMap=new MultiMap<PsiElement,String>();
  doTest(new PerformAction(){
    @Override public void performAction(    final VirtualFile rootDir,    final VirtualFile rootAfter) throws Exception {
      final PsiClass srcClass=myJavaFacade.findClass("a.A",GlobalSearchScope.allScope(myProject));
      assertTrue("Source class not found",srcClass != null);
      final PsiClass targetClass=myJavaFacade.findClass("b.B",GlobalSearchScope.allScope(myProject));
      assertTrue("Target class not found",targetClass != null);
      final PsiMethod[] methods=srcClass.getMethods();
      assertTrue("No methods found",methods.length > 0);
      final MemberInfo[] membersToMove=new MemberInfo[1];
      final MemberInfo memberInfo=new MemberInfo(methods[0]);
      memberInfo.setChecked(true);
      membersToMove[0]=memberInfo;
      final PsiDirectory targetDirectory=targetClass.getContainingFile().getContainingDirectory();
      final PsiJavaPackage targetPackage=targetDirectory != null ? JavaDirectoryService.getInstance().getPackage(targetDirectory) : null;
      conflictsMap.putAllValues(PullUpConflictsUtil.checkConflicts(membersToMove,srcClass,targetClass,targetPackage,targetDirectory,new InterfaceContainmentVerifier(){
        @Override public boolean checkedInterfacesContain(        PsiMethod psiMethod){
          return PullUpHelper.checkedInterfacesContain(Arrays.asList(membersToMove),psiMethod);
        }
      }
));
      new PullUpHelper(srcClass,targetClass,membersToMove,new DocCommentPolicy(DocCommentPolicy.ASIS)).run();
    }
  }
);
  if (conflicts.length != 0 && conflictsMap.isEmpty()) {
    fail("Conflict was not detected");
  }
  final HashSet<String> values=new HashSet<String>(conflictsMap.values());
  final HashSet<String> expected=new HashSet<String>(Arrays.asList(conflicts));
  assertEquals(expected.size(),values.size());
  for (  String value : values) {
    if (!expected.contains(value)) {
      fail("Conflict: " + value + " is unexpectedly reported");
    }
  }
}
