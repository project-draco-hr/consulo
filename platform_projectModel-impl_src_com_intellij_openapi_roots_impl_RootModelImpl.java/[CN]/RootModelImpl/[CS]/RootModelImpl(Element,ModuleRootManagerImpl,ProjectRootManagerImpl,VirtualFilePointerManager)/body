{
  myProjectRootManager=projectRootManager;
  myFilePointerManager=filePointerManager;
  myModuleRootManager=moduleRootManager;
  myModuleLibraryTable=new ModuleLibraryTable(this,myProjectRootManager);
  final List contentChildren=element.getChildren(ContentEntryImpl.ELEMENT_NAME);
  for (  Object aContentChildren : contentChildren) {
    Element child=(Element)aContentChildren;
    ContentEntryImpl contentEntry=new ContentEntryImpl(child,this);
    myContent.add(contentEntry);
  }
  final List orderElements=element.getChildren(OrderEntryFactory.ORDER_ENTRY_ELEMENT_NAME);
  boolean moduleSourceAdded=false;
  for (  Object orderElement : orderElements) {
    Element child=(Element)orderElement;
    final OrderEntry orderEntry=OrderEntryFactory.createOrderEntryByElement(child,this,myProjectRootManager);
    if (orderEntry instanceof ModuleSourceOrderEntry) {
      if (moduleSourceAdded)       continue;
      moduleSourceAdded=true;
    }
    myOrderEntries.add(orderEntry);
  }
  if (!moduleSourceAdded) {
    myOrderEntries.add(new ModuleSourceOrderEntryImpl(this));
  }
  myWritable=true;
  for (  ModuleExtensionProviderEP providerEP : ModuleExtensionProviderEP.EP_NAME.getExtensions()) {
    final ModuleExtensionProvider provider=providerEP.getInstance();
    final ModuleExtension<?> originalExtension=provider.createImmutable(providerEP.getKey(),moduleRootManager.getModule());
    originalExtension.loadState(element);
    myExtensions.add(provider.createMutable(providerEP.getKey(),moduleRootManager.getModule(),originalExtension));
  }
  myConfigurationAccessor=new RootConfigurationAccessor();
}
