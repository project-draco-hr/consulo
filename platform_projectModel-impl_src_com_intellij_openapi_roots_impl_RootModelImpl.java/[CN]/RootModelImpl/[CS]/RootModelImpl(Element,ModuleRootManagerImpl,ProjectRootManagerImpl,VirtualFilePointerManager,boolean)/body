{
  myProjectRootManager=projectRootManager;
  myFilePointerManager=filePointerManager;
  myModuleRootManager=moduleRootManager;
  myModuleLibraryTable=new ModuleLibraryTable(this,myProjectRootManager);
  RootModelImpl originalRootModel=moduleRootManager.getRootModel();
  createMutableExtensions(originalRootModel);
  List<Element> moduleExtensionChild=element.getChildren("extension");
  for (  Element child : moduleExtensionChild) {
    final String id=child.getAttributeValue("id");
    ModuleExtensionProviderEP providerEP=ModuleExtensionProviderEP.findProviderEP(id);
    if (providerEP != null) {
      ModuleExtension rootModuleExtension=originalRootModel.getExtensionWithoutCheck(id);
      rootModuleExtension.loadState(child);
      ModuleExtension moduleExtension=getExtensionWithoutCheck(id);
      moduleExtension.commit(rootModuleExtension);
    }
 else {
      myUnknownModuleExtensions.add(child.clone());
    }
  }
  final List<Element> contentChildren=element.getChildren(ContentEntryImpl.ELEMENT_NAME);
  for (  Element child : contentChildren) {
    ContentEntryImpl contentEntry=new ContentEntryImpl(child,this);
    myContent.add(contentEntry);
  }
  final List<Element> orderElements=element.getChildren(OrderEntryFactory.ORDER_ENTRY_ELEMENT_NAME);
  boolean moduleSourceAdded=false;
  for (  Element child : orderElements) {
    final OrderEntry orderEntry=OrderEntryFactory.createOrderEntryByElement(child,this,myProjectRootManager);
    if (orderEntry == null) {
      continue;
    }
    if (orderEntry instanceof ModuleSourceOrderEntry) {
      if (moduleSourceAdded) {
        continue;
      }
      moduleSourceAdded=true;
    }
    myOrderEntries.add(orderEntry);
  }
  if (!moduleSourceAdded) {
    myOrderEntries.add(new ModuleSourceOrderEntryImpl(this));
  }
  myWritable=writable;
  myConfigurationAccessor=new RootConfigurationAccessor();
}
