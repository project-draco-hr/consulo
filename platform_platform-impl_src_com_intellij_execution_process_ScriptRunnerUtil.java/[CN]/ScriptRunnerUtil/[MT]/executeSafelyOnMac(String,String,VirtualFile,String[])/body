{
  if (!SystemInfo.isMac) {
    return execute(exePath,workingDirectory,scriptFile,parameters);
  }
  ExecutionException firstException;
  try {
    return execute(exePath,workingDirectory,scriptFile,parameters);
  }
 catch (  ExecutionException e) {
    firstException=e;
  }
  File shell=getShell();
  if (shell == null) {
    throw firstException;
  }
  try {
    GeneralCommandLine appCommandLine=new GeneralCommandLine();
    appCommandLine.setExePath(exePath);
    if (scriptFile != null) {
      appCommandLine.addParameter(scriptFile.getPresentableUrl());
    }
    appCommandLine.addParameters(parameters);
    GeneralCommandLine commandLine=new GeneralCommandLine();
    commandLine.setPassParentEnvs(true);
    commandLine.setExePath(shell.getAbsolutePath());
    commandLine.addParameter("-c");
    commandLine.addParameter(appCommandLine.getCommandLineString());
    if (workingDirectory != null) {
      commandLine.setWorkDirectory(workingDirectory);
    }
    LOG.info("Standby command line: " + commandLine.getCommandLineString());
    final OSProcessHandler processHandler=new ColoredProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString(),EncodingManager.getInstance().getDefaultCharset());
    if (LOG.isDebugEnabled()) {
      processHandler.addProcessListener(new ProcessAdapter(){
        @Override public void onTextAvailable(        ProcessEvent event,        Key outputType){
          LOG.debug(outputType + ": " + event.getText());
        }
      }
);
    }
    return processHandler;
  }
 catch (  ExecutionException e) {
    LOG.info("Standby command failed",e);
    throw firstException;
  }
}
