{
  if (!file.isWritable())   return false;
  final PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  myVariable=null;
  myNewVariableType=null;
  if (element instanceof PsiIdentifier) {
    if (element.getParent() instanceof PsiVariable) {
      myVariable=(PsiVariable)element.getParent();
    }
  }
 else   if (element instanceof PsiJavaToken) {
    final PsiJavaToken token=(PsiJavaToken)element;
    if (token.getTokenType() != JavaTokenType.EQ)     return false;
    if (token.getParent() instanceof PsiVariable) {
      myVariable=(PsiVariable)token.getParent();
    }
  }
  if (myVariable == null)   return false;
  final PsiExpression initializer=myVariable.getInitializer();
  if (initializer == null)   return false;
  final PsiType variableType=myVariable.getType();
  final PsiType initializerType=initializer.getType();
  if (!(variableType instanceof PsiClassType))   return false;
  final PsiClassType variableClassType=(PsiClassType)variableType;
  if (!variableClassType.isRaw())   return false;
  if (!(initializerType instanceof PsiClassType))   return false;
  final PsiClassType initializerClassType=(PsiClassType)initializerType;
  if (initializerClassType.isRaw())   return false;
  final PsiClassType.ClassResolveResult variableResolveResult=variableClassType.resolveGenerics();
  final PsiClassType.ClassResolveResult initializerResolveResult=initializerClassType.resolveGenerics();
  if (initializerResolveResult.getElement() == null)   return false;
  final PsiSubstitutor targetSubstitutor=TypeConversionUtil.getClassSubstitutor(variableResolveResult.getElement(),initializerResolveResult.getElement(),initializerResolveResult.getSubstitutor());
  if (targetSubstitutor == null)   return false;
  myNewVariableType=myVariable.getManager().getElementFactory().createType(variableResolveResult.getElement(),targetSubstitutor);
  return true;
}
