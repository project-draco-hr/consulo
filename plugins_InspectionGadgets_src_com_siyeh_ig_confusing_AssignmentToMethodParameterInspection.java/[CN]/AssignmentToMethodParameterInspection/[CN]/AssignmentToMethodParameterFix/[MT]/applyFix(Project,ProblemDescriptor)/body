{
  try {
    final PsiExpression variable=(PsiExpression)problemDescriptor.getPsiElement();
    final PsiMethod method=(PsiMethod)PsiTreeUtil.getParentOfType(variable,PsiMethod.class);
    final PsiCodeBlock body=method.getBody();
    final String replacementText;
    final PsiType type=variable.getType();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final CodeStyleManager codeStyleManager=psiManager.getCodeStyleManager();
    final String originalVariableName=variable.getText();
    final SuggestedNameInfo suggestions=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,originalVariableName + '1',variable,type);
    final String[] names=suggestions.names;
    final String baseName;
    if (names != null && names.length > 0) {
      baseName=names[0];
    }
 else {
      baseName="value";
    }
    final String variableName=codeStyleManager.suggestUniqueVariableName(baseName,method,false);
    final String className=type.getPresentableText();
    final PsiElement[] children=body.getChildren();
    final StringBuffer buffer=new StringBuffer();
    for (int i=1; i < children.length; i++) {
      replaceVariableName(children[i],variableName,originalVariableName,buffer);
    }
    replacementText='{' + className + ' '+ variableName+ " = "+ originalVariableName+ ';'+ buffer.toString();
    final PsiElementFactory elementFactory=psiManager.getElementFactory();
    final PsiCodeBlock block=elementFactory.createCodeBlockFromText(replacementText,null);
    body.replace(block);
    codeStyleManager.reformat(method);
  }
 catch (  IncorrectOperationException e) {
  }
}
