{
  int sLen=sArr.length;
  if (sLen == 0)   return new byte[0];
  int sIx=0, eIx=sLen - 1;
  while (sIx < eIx && IA[sArr[sIx] & 0xff] < 0)   sIx++;
  while (eIx > 0 && IA[sArr[eIx] & 0xff] < 0)   eIx--;
  int pad=sArr[eIx] == '=' ? (sArr[eIx - 1] == '=' ? 2 : 1) : 0;
  int cCnt=eIx - sIx + 1;
  int sepCnt=sLen > 76 ? (sArr[76] == '\r' ? cCnt / 78 : 0) << 1 : 0;
  int len=((cCnt - sepCnt) * 6 >> 3) - pad;
  byte[] dArr=new byte[len];
  int d=0;
  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {
    int i=IA[sArr[sIx++]] << 18 | IA[sArr[sIx++]] << 12 | IA[sArr[sIx++]] << 6 | IA[sArr[sIx++]];
    dArr[d++]=(byte)(i >> 16);
    dArr[d++]=(byte)(i >> 8);
    dArr[d++]=(byte)i;
    if (sepCnt > 0 && ++cc == 19) {
      sIx+=2;
      cc=0;
    }
  }
  if (d < len) {
    int i=0;
    for (int j=0; sIx <= eIx - pad; j++) {
      i|=IA[sArr[sIx++]] << (18 - j * 6);
    }
    for (int r=16; d < len; r-=8) {
      dArr[d++]=(byte)(i >> r);
    }
  }
  return dArr;
}
