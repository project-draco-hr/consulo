{
  int sLen=sArr != null ? sArr.length : 0;
  if (sLen == 0)   return new char[0];
  int eLen=(sLen / 3) * 3;
  int cCnt=((sLen - 1) / 3 + 1) << 2;
  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);
  char[] dArr=new char[dLen];
  for (int s=0, d=0, cc=0; s < eLen; ) {
    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);
    dArr[d++]=CA[(i >>> 18) & 0x3f];
    dArr[d++]=CA[(i >>> 12) & 0x3f];
    dArr[d++]=CA[(i >>> 6) & 0x3f];
    dArr[d++]=CA[i & 0x3f];
    if (lineSep && ++cc == 19 && d < dLen - 2) {
      dArr[d++]='\r';
      dArr[d++]='\n';
      cc=0;
    }
  }
  int left=sLen - eLen;
  if (left > 0) {
    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);
    dArr[dLen - 4]=CA[i >> 12];
    dArr[dLen - 3]=CA[(i >>> 6) & 0x3f];
    dArr[dLen - 2]=left == 2 ? CA[i & 0x3f] : '=';
    dArr[dLen - 1]='=';
  }
  return dArr;
}
