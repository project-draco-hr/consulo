{
  PsiParameter[] parameters=targetMethod.getParameterList().getParameters();
  List<ParameterInfoImpl> result=new ArrayList<ParameterInfoImpl>();
  if (expressions.length < parameters.length) {
    int ei=0;
    int pi=0;
    while (ei < expressions.length && pi < parameters.length) {
      PsiExpression expression=expressions[ei];
      PsiParameter parameter=parameters[pi];
      PsiType paramType=substitutor.substitute(parameter.getType());
      if (buf.length() > 0)       buf.append(", ");
      final PsiType parameterType=PsiUtil.convertAnonymousToBaseType(paramType);
      final String presentableText=parameterType.getPresentableText();
      final ParameterInfoImpl parameterInfo=new ParameterInfoImpl(pi,parameter.getName(),parameterType);
      if (TypeConversionUtil.areTypesAssignmentCompatible(paramType,expression)) {
        buf.append(presentableText);
        result.add(parameterInfo);
        pi++;
        ei++;
      }
 else {
        buf.append("<s>").append(presentableText).append("</s>");
        removedParams.add(parameterInfo);
        pi++;
      }
    }
    if (result.size() != expressions.length)     return null;
    for (int i=pi; i < parameters.length; i++) {
      if (buf.length() > 0)       buf.append(", ");
      buf.append("<s>").append(parameters[i].getType().getPresentableText()).append("</s>");
      final ParameterInfoImpl parameterInfo=new ParameterInfoImpl(pi,parameters[i].getName(),parameters[i].getType());
      removedParams.add(parameterInfo);
    }
  }
 else   if (expressions.length > parameters.length) {
    if (!findNewParamsPlace(expressions,targetMethod,substitutor,buf,newParams,parameters,result))     return null;
  }
 else {
    for (int i=0; i < parameters.length; i++) {
      if (buf.length() > 0)       buf.append(", ");
      PsiParameter parameter=parameters[i];
      PsiExpression expression=expressions[i];
      PsiType paramType=substitutor.substitute(parameter.getType());
      final String presentableText=paramType.getPresentableText();
      if (TypeConversionUtil.areTypesAssignmentCompatible(paramType,expression)) {
        result.add(new ParameterInfoImpl(i,parameter.getName(),paramType));
        buf.append(presentableText);
      }
 else {
        PsiType exprType=RefactoringUtil.getTypeByExpression(expression);
        if (exprType == null)         return null;
        final ParameterInfoImpl changedParameterInfo=new ParameterInfoImpl(i,parameter.getName(),exprType);
        result.add(changedParameterInfo);
        changedParams.add(changedParameterInfo);
        buf.append("<s>").append(presentableText).append("</s> <b>").append(exprType.getPresentableText()).append("</b>");
      }
    }
    boolean isSilly=true;
    for (int i=0; i < result.size(); i++) {
      PsiParameter parameter=parameters[i];
      PsiType paramType=substitutor.substitute(parameter.getType());
      ParameterInfoImpl parameterInfo=result.get(i);
      String typeText=parameterInfo.getTypeText();
      if (!paramType.equalsToText(typeText)) {
        isSilly=false;
        break;
      }
    }
    if (isSilly)     return null;
  }
  return result.toArray(new ParameterInfoImpl[result.size()]);
}
