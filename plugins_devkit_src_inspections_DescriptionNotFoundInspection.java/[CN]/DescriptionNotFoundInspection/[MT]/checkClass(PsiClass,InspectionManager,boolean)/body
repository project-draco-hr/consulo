{
  final Project project=aClass.getProject();
  final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
  final Module module=ModuleUtil.findModuleForPsiElement(aClass);
  if (nameIdentifier == null || module == null || !PsiUtil.isInstanciatable(aClass))   return null;
  final PsiClass base=JavaPsiFacade.getInstance(project).findClass(INSPECTION_PROFILE_ENTRY,GlobalSearchScope.allScope(project));
  if (base == null || !aClass.isInheritor(base,true) || isPathMethodsAreOverriden(aClass))   return null;
  final PsiMethod method=findNearestMethod("getShortName",aClass);
  if (method == null)   return null;
  final String filename=PsiUtil.getReturnedLiteral(method,aClass);
  if (filename == null)   return null;
  final VirtualFile[] roots=ModuleRootManager.getInstance(module).getSourceRoots();
  for (  VirtualFile root : roots) {
    for (    VirtualFile top : root.getChildren()) {
      if (top.isDirectory() && top.getName().equals("inspectionDescriptions")) {
        for (        VirtualFile description : top.getChildren()) {
          if (!description.isDirectory() && description.getNameWithoutExtension().equals(filename)) {
            return null;
          }
        }
      }
    }
  }
  final PsiElement problem=getProblemElement(aClass,method);
  final ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(problem == null ? nameIdentifier : problem,"Inspection does not have a description",new LocalQuickFix[]{new CreateHtmlDescriptionFix(filename,module)},ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  return new ProblemDescriptor[]{problemDescriptor};
}
