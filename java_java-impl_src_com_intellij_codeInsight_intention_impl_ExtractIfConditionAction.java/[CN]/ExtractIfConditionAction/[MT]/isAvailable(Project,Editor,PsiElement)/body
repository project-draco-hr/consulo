{
  final PsiIfStatement ifStatement=PsiTreeUtil.getParentOfType(element,PsiIfStatement.class);
  if (ifStatement == null || ifStatement.getCondition() == null || !(ifStatement.getCondition() instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiExpression condition=ifStatement.getCondition();
  if (condition == null || !(condition instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryCondition=(PsiBinaryExpression)condition;
  final PsiType expressionType=binaryCondition.getType();
  if (expressionType == null || !PsiType.BOOLEAN.isAssignableFrom(expressionType)) {
    return false;
  }
  final IElementType operation=binaryCondition.getOperationTokenType();
  if (operation != JavaTokenType.OROR && operation != JavaTokenType.ANDAND) {
    return false;
  }
  final PsiExpression lOperand=binaryCondition.getLOperand();
  final PsiExpression rOperand=binaryCondition.getROperand();
  if (rOperand == null) {
    return false;
  }
  final TextRange lOperandTextRange=lOperand.getTextRange();
  final TextRange rOperandTextRange=rOperand.getTextRange();
  final TextRange elementTextRange=element.getTextRange();
  if (lOperandTextRange == null || rOperandTextRange == null || elementTextRange == null) {
    return false;
  }
  if (lOperandTextRange.contains(elementTextRange)) {
    setText(CodeInsightBundle.message("intention.extract.if.condition.text",lOperand.getText()));
    return true;
  }
  if (rOperandTextRange.contains(elementTextRange)) {
    setText(CodeInsightBundle.message("intention.extract.if.condition.text",rOperand.getText()));
    return true;
  }
  return false;
}
