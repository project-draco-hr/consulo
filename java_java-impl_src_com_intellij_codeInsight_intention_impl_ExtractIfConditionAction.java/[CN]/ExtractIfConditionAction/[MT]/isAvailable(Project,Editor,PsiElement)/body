{
  final PsiIfStatement ifStatement=PsiTreeUtil.getParentOfType(element,PsiIfStatement.class);
  if (ifStatement == null || ifStatement.getCondition() == null) {
    return false;
  }
  final PsiExpression condition=ifStatement.getCondition();
  if (condition == null || !(condition instanceof PsiPolyadicExpression)) {
    return false;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)condition;
  final PsiType expressionType=polyadicExpression.getType();
  if (expressionType == null || !PsiType.BOOLEAN.isAssignableFrom(expressionType)) {
    return false;
  }
  final IElementType operation=polyadicExpression.getOperationTokenType();
  if (operation != JavaTokenType.OROR && operation != JavaTokenType.ANDAND) {
    return false;
  }
  final PsiExpression operand=findOperand(element,polyadicExpression);
  if (operand == null) {
    return false;
  }
  setText(CodeInsightBundle.message("intention.extract.if.condition.text",operand.getText()));
  return true;
}
