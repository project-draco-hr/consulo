{
synchronized (LOCK) {
    final String rootUrl=fs.getProtocol() + "://" + basePath;
    VirtualFileSystemEntry root=myRoots.get(rootUrl);
    if (root == null && basePath.isEmpty()) {
      root=myFakeRoot;
    }
    if (root == null) {
      try {
        final int rootId=FSRecords.findRootRecord(rootUrl);
        if (!basePath.isEmpty()) {
          root=new VirtualDirectoryImpl(basePath,null,fs,rootId){
            @NotNull @Override public String getName(){
              final String name=super.getName();
              if (fs instanceof JarFileSystem) {
                String jarName=name.substring(0,name.length() - JarFileSystem.JAR_SEPARATOR.length());
                return jarName.substring(jarName.lastIndexOf('/') + 1);
              }
              return name;
            }
          }
;
        }
 else {
          root=new VirtualDirectoryImpl("",null,fs,rootId){
            @Override @NotNull public VirtualFile[] getChildren(){
              return getRoots(fs);
            }
            @Override public VirtualFileSystemEntry findChild(            @NotNull String name){
              if (name.isEmpty())               return null;
              return findRoot(name,fs);
            }
          }
;
        }
        if (!fs.exists(root))         return null;
        int attributes=NewVirtualFileSystem.BA_DIRECTORY | NewVirtualFileSystem.BA_EXISTS;
        boolean newRoot=copyRecordFromDelegateFS(rootId,0,root,fs,attributes);
        if (!newRoot) {
          if (fs.getTimeStamp(root) != FSRecords.getTimestamp(rootId)) {
            root.markDirtyRecursively();
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (!basePath.isEmpty()) {
        myRoots.put(rootUrl,root);
        myRootsById.put(root.getId(),root);
      }
 else {
        myFakeRoot=root;
      }
    }
    return root;
  }
}
