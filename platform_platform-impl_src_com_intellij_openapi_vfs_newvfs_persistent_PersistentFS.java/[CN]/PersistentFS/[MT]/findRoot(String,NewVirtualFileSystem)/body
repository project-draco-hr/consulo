{
synchronized (LOCK) {
    String rootUrl=fs.getProtocol() + "://" + basePath;
    VirtualFileSystemEntry root=myRoots.get(rootUrl);
    if (root == null && basePath.isEmpty()) {
      root=myFakeRoot;
    }
    if (root == null) {
      try {
        final int rootId=FSRecords.findRootRecord(rootUrl);
        if (basePath.isEmpty()) {
          root=new VirtualDirectoryImpl("",null,fs,rootId){
            @Override @NotNull public VirtualFile[] getChildren(){
              return getRoots(getFileSystem());
            }
            @Override public VirtualFileSystemEntry findChild(            @NotNull String name){
              if (name.isEmpty())               return null;
              return findRoot(name,getFileSystem());
            }
          }
;
        }
 else {
          if (fs instanceof JarFileSystem) {
            String parentPath=basePath.substring(0,basePath.indexOf(JarFileSystem.JAR_SEPARATOR));
            final VirtualFile parentLocalFile=LocalFileSystem.getInstance().findFileByPath(parentPath);
            if (parentLocalFile == null)             return null;
            root=new JarRoot(fs,rootId,parentLocalFile);
          }
 else {
            root=new VirtualDirectoryImpl(basePath,null,fs,rootId);
          }
        }
        if (!fs.exists(root)) {
          return null;
        }
        int attributes=FileUtil.BA_DIRECTORY | FileUtil.BA_EXISTS;
        boolean newRoot=copyRecordFromDelegateFS(rootId,0,root,fs,attributes);
        if (!newRoot) {
          if (fs.getTimeStamp(root) != FSRecords.getTimestamp(rootId)) {
            root.markDirtyRecursively();
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (basePath.isEmpty()) {
        myFakeRoot=root;
      }
 else {
        myRoots.put(rootUrl,root);
        myRootsById.put(root.getId(),root);
      }
    }
    return root;
  }
}
