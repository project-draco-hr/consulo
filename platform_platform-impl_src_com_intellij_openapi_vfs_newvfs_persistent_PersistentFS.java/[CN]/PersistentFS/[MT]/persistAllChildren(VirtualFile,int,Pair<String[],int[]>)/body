{
  String[] currentNames=current.first;
  int[] currentIds=current.second;
  final NewVirtualFileSystem delegate=getDelegate(file);
  String[] delegateNames=VfsUtil.filterNames(delegate.list(file));
  if (delegateNames.length == 0 && currentNames.length > 0) {
    return current;
  }
  final String[] names;
  if (currentNames.length == 0) {
    names=delegateNames;
  }
 else {
    Set<String> allNamesSet=new LinkedHashSet<String>((currentNames.length + delegateNames.length) * 2);
    ContainerUtil.addAll(allNamesSet,currentNames);
    ContainerUtil.addAll(allNamesSet,delegateNames);
    names=ArrayUtil.toStringArray(allNamesSet);
  }
  final int[] childrenIds=ArrayUtil.newIntArray(names.length);
  for (int i=0; i < names.length; i++) {
    final String name=names[i];
    int idx=ArrayUtil.indexOf(currentNames,name);
    if (idx >= 0) {
      childrenIds[i]=currentIds[idx];
    }
 else {
      int childId=FSRecords.createRecord();
      copyRecordFromDelegateFS(childId,id,new FakeVirtualFile(file,name),delegate);
      childrenIds[i]=childId;
    }
  }
  FSRecords.updateList(id,childrenIds);
  int flags=FSRecords.getFlags(id);
  FSRecords.setFlags(id,flags | CHILDREN_CACHED_FLAG,true);
  return Pair.create(names,childrenIds);
}
