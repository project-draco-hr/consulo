{
  return new XmlElementVisitor(){
    private Boolean isXml;
    private boolean isXmlFile(    XmlElement element){
      if (isXml == null) {
        final PsiFile file=element.getContainingFile();
        isXml=file instanceof XmlFile && !InjectedLanguageManager.getInstance(element.getProject()).isInjectedFragment(file);
      }
      return isXml.booleanValue();
    }
    @Override public void visitXmlToken(    final XmlToken token){
      if (isXmlFile(token) && token.getTokenType() == XmlTokenType.XML_NAME) {
        PsiElement element=token.getPrevSibling();
        while (element instanceof PsiWhiteSpace)         element=element.getPrevSibling();
        if (element instanceof XmlToken && ((XmlToken)element).getTokenType() == XmlTokenType.XML_START_TAG_START) {
          PsiElement parent=element.getParent();
          if (parent instanceof XmlTag && !(token.getNextSibling() instanceof OuterLanguageElement)) {
            XmlTag tag=(XmlTag)parent;
            checkUnboundNamespacePrefix(tag,tag,tag.getNamespacePrefix(),token,holder,isOnTheFly);
          }
        }
      }
    }
    @Override public void visitXmlAttribute(    final XmlAttribute attribute){
      if (!isXmlFile(attribute)) {
        return;
      }
      final String namespace=attribute.getNamespace();
      if (attribute.isNamespaceDeclaration() || XmlUtil.XML_SCHEMA_INSTANCE_URI.equals(namespace)) {
        return;
      }
      XmlTag tag=attribute.getParent();
      XmlElementDescriptor elementDescriptor=tag.getDescriptor();
      if (elementDescriptor == null || elementDescriptor instanceof AnyXmlElementDescriptor) {
        return;
      }
      final String name=attribute.getName();
      checkUnboundNamespacePrefix(attribute,tag,XmlUtil.findPrefixByQualifiedName(name),null,holder,isOnTheFly);
    }
  }
;
}
