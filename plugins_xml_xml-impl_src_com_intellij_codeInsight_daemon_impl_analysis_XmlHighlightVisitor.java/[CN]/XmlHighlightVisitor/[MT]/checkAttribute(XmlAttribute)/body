{
  XmlTag tag=attribute.getParent();
  if (tag == null)   return;
  final String name=attribute.getName();
  if (XmlExtension.getExtension(attribute.getContainingFile()).needWhitespaceBeforeAttribute()) {
    PsiElement prevLeaf=PsiTreeUtil.prevLeaf(attribute);
    if (!(prevLeaf instanceof PsiWhiteSpace)) {
      TextRange textRange=attribute.getTextRange();
      HighlightInfoType type=tag instanceof HtmlTag ? HighlightInfoType.WARNING : HighlightInfoType.ERROR;
      String description=XmlErrorMessages.message("attribute.should.be.preceded.with.space");
      HighlightInfo info=HighlightInfo.newHighlightInfo(type).range(textRange.getStartOffset(),textRange.getStartOffset()).descriptionAndTooltip(description).create();
      addToResults(info);
    }
  }
  if (attribute.isNamespaceDeclaration() || XmlUtil.XML_SCHEMA_INSTANCE_URI.equals(attribute.getNamespace())) {
    return;
  }
  XmlElementDescriptor elementDescriptor=tag.getDescriptor();
  if (elementDescriptor == null || elementDescriptor instanceof AnyXmlElementDescriptor || ourDoJaxpTesting) {
    return;
  }
  XmlAttributeDescriptor attributeDescriptor=elementDescriptor.getAttributeDescriptor(attribute);
  if (attributeDescriptor == null) {
    if (!XmlUtil.attributeFromTemplateFramework(name,tag)) {
      final String localizedMessage=XmlErrorMessages.message("attribute.is.not.allowed.here",name);
      final HighlightInfo highlightInfo=reportAttributeProblem(tag,name,attribute,localizedMessage);
      if (highlightInfo != null) {
        PsiFile file=tag.getContainingFile();
        if (file != null) {
          for (          XmlUndefinedElementFixProvider fixProvider : Extensions.getExtensions(XmlUndefinedElementFixProvider.EP_NAME)) {
            IntentionAction[] fixes=fixProvider.createFixes(attribute);
            if (fixes != null) {
              for (              IntentionAction action : fixes) {
                QuickFixAction.registerQuickFixAction(highlightInfo,action);
              }
              break;
            }
          }
        }
      }
    }
  }
 else {
    checkDuplicateAttribute(tag,attribute);
    if (tag instanceof HtmlTag && attribute.getValueElement() == null && !HtmlUtil.isSingleHtmlAttribute(name)) {
      final String localizedMessage=XmlErrorMessages.message("empty.attribute.is.not.allowed",name);
      reportAttributeProblem(tag,name,attribute,localizedMessage);
    }
    PsiReference[] attrRefs=attribute.getReferences();
    doCheckRefs(attribute,attrRefs,!attribute.getNamespacePrefix().isEmpty() ? 2 : 1);
  }
}
