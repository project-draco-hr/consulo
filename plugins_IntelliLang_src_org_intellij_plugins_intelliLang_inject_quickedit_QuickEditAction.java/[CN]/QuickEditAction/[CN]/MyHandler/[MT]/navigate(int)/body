{
  if (isShowInBalloon()) {
    Ref<Balloon> ref=Ref.create(null);
    final JComponent component=createBalloonComponent(myNewFile,ref);
    if (component != null) {
      final Balloon balloon=JBPopupFactory.getInstance().createBalloonBuilder(component).setShadow(true).setAnimationCycle(0).setHideOnClickOutside(true).setHideOnKeyOutside(true).setHideOnAction(false).setFillColor(UIUtil.getControlColor()).createBalloon();
      ref.set(balloon);
      Disposer.register(myNewFile.getProject(),balloon);
      balloon.show(new PositionTracker<Balloon>(myEditor.getContentComponent()){
        @Override public RelativePoint recalculateLocation(        Balloon object){
          final RelativePoint target=JBPopupFactory.getInstance().guessBestPopupLocation(myEditor);
          final Point screenPoint=target.getScreenPoint();
          int y=screenPoint.y;
          if (target.getPoint().getY() > myEditor.getLineHeight() + balloon.getPreferredSize().getHeight()) {
            y-=myEditor.getLineHeight();
          }
          return new RelativePoint(new Point(screenPoint.x,y));
        }
      }
,Balloon.Position.above);
    }
  }
 else {
    final FileEditorManagerEx fileEditorManager=FileEditorManagerEx.getInstanceEx(myProject);
    final FileEditor[] editors=fileEditorManager.getEditors(myNewVirtualFile);
    if (editors.length == 0) {
      final EditorWindow curWindow=fileEditorManager.getCurrentWindow();
      mySplittedWindow=curWindow.split(SwingConstants.HORIZONTAL,false,myNewVirtualFile,true);
    }
    fileEditorManager.openTextEditor(new OpenFileDescriptor(myProject,myNewVirtualFile,injectedOffset),true);
  }
}
