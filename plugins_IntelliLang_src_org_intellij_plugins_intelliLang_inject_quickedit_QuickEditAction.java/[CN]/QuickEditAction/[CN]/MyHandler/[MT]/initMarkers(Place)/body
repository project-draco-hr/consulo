{
  final SmartPointerManager smartPointerManager=SmartPointerManager.getInstance(myProject);
  for (  PsiLanguageInjectionHost.Shred shred : shreds) {
    final RangeMarker rangeMarker=myNewDocument.createRangeMarker(shred.range.getStartOffset() + shred.prefix.length(),shred.range.getEndOffset() - shred.suffix.length());
    final TextRange rangeInsideHost=shred.getRangeInsideHost();
    final RangeMarker origMarker=myOrigDocument.createRangeMarker(rangeInsideHost.shiftRight(shred.host.getTextRange().getStartOffset()));
    myMarkers.put(smartPointerManager.createSmartPsiElementPointer(shred.host),Pair.create(origMarker,rangeMarker));
  }
  for (  Pair<RangeMarker,RangeMarker> markers : myMarkers.values()) {
    markers.first.setGreedyToLeft(true);
    markers.second.setGreedyToLeft(true);
    markers.first.setGreedyToRight(true);
    markers.second.setGreedyToRight(true);
  }
  int curOffset=0;
  for (  Pair<RangeMarker,RangeMarker> markerPair : myMarkers.values()) {
    final RangeMarker marker=markerPair.second;
    final int start=marker.getStartOffset();
    final int end=marker.getEndOffset();
    if (curOffset < start) {
      final RangeMarker rangeMarker=myNewDocument.createGuardedBlock(curOffset,start);
      if (curOffset == 0)       rangeMarker.setGreedyToLeft(true);
    }
    curOffset=end;
  }
  if (curOffset < myNewDocument.getTextLength()) {
    final RangeMarker rangeMarker=myNewDocument.createGuardedBlock(curOffset,myNewDocument.getTextLength());
    rangeMarker.setGreedyToRight(true);
  }
}
