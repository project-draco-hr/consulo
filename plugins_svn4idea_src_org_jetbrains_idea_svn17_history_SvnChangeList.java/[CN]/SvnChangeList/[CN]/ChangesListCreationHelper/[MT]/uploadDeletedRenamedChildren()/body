{
  final List<Change> detailsOnly=new ArrayList<Change>();
  final Set<Pair<Boolean,String>> duplicateControl=new HashSet<Pair<Boolean,String>>();
  for (  Change change : myDetailedList) {
    if (change.getBeforeRevision() != null) {
      duplicateControl.add(new Pair<Boolean,String>(Boolean.TRUE,((SvnRepositoryContentRevision)change.getBeforeRevision()).getPath()));
    }
    if (change.getAfterRevision() != null) {
      duplicateControl.add(new Pair<Boolean,String>(Boolean.FALSE,((SvnRepositoryContentRevision)change.getAfterRevision()).getPath()));
    }
  }
  for (  Change change : myDetailedList) {
    if ((change.getAfterRevision() == null) && (change.getBeforeRevision().getFile().isDirectory())) {
      final SvnRepositoryContentRevision revision=(SvnRepositoryContentRevision)change.getBeforeRevision();
      detailsOnly.addAll(getChildrenAsChanges(revision.getPath(),true,duplicateControl));
    }
 else     if ((change.getBeforeRevision() == null) && (change.getAfterRevision().getFile().isDirectory())) {
      final SvnRepositoryContentRevision revision=(SvnRepositoryContentRevision)change.getAfterRevision();
      if (myCopiedAddedPaths.containsKey(revision.getPath())) {
        detailsOnly.addAll(getChildrenAsChanges(revision.getPath(),false,duplicateControl));
      }
    }
  }
  myDetailedList.addAll(detailsOnly);
}
