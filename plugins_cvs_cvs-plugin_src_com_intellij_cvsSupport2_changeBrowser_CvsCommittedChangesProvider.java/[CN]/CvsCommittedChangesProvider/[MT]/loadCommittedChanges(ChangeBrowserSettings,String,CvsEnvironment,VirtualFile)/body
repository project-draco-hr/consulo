{
  if (connectionSettings.isOffline()) {
    return Collections.emptyList();
  }
  final CvsChangeListsBuilder builder=new CvsChangeListsBuilder(module,connectionSettings,myProject,rootFile);
  final Date dateTo=settings.getDateBeforeFilter();
  Date dateFrom=settings.getDateAfterFilter();
  if (dateFrom == null) {
    final Calendar calendar=Calendar.getInstance();
    calendar.set(1970,Calendar.MARCH,2);
    dateFrom=calendar.getTime();
  }
  final List<LogInformationWrapper> log=new ArrayList<LogInformationWrapper>();
  final LoadHistoryOperation operation=new LoadHistoryOperation(connectionSettings,module,dateFrom,dateTo,new Consumer<LogInformationWrapper>(){
    @Override public void consume(    LogInformationWrapper logInformationWrapper){
      log.add(logInformationWrapper);
    }
  }
);
  final CvsResult executionResult=operation.run(myProject);
  if (executionResult.isCanceled()) {
    throw new ProcessCanceledException();
  }
 else   if (executionResult.hasErrors()) {
    throw executionResult.composeError();
  }
 else {
    builder.addLogs(log);
    final List<CvsChangeList> versions=builder.getVersions();
    settings.filterChanges(versions);
    return versions;
  }
}
