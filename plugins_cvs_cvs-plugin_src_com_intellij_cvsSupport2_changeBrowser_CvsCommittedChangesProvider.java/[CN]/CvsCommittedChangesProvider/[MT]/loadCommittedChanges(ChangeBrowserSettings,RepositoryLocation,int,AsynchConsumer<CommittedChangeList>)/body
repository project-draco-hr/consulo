{
  try {
    final CvsRepositoryLocation cvsLocation=(CvsRepositoryLocation)location;
    final String module=cvsLocation.getModuleName();
    final CvsEnvironment connectionSettings=cvsLocation.getEnvironment();
    if (connectionSettings.isOffline()) {
      return;
    }
    final CvsChangeListsBuilder builder=new CvsChangeListsBuilder(module,connectionSettings,myProject,cvsLocation.getRootFile());
    final Date dateTo=settings.getDateBeforeFilter();
    Date dateFrom=settings.getDateAfterFilter();
    if (dateFrom == null) {
      final Calendar calendar=Calendar.getInstance();
      calendar.set(1970,2,2);
      dateFrom=calendar.getTime();
    }
    final ChangeBrowserSettings.Filter filter=settings.createFilter();
    final Set<CvsChangeList> controlSet=new HashSet<CvsChangeList>();
    final LoadHistoryOperation operation=new LoadHistoryOperation(connectionSettings,module,dateFrom,dateTo,new Consumer<LogInformationWrapper>(){
      public void consume(      LogInformationWrapper wrapper){
        final List<RevisionWrapper> wrappers=builder.revisionWrappersFromLog(wrapper);
        if (wrappers != null) {
          for (          RevisionWrapper revisionWrapper : wrappers) {
            final CvsChangeList changeList=builder.addRevision(revisionWrapper);
            if (controlSet.contains(changeList))             continue;
            controlSet.add(changeList);
            if (filter.accepts(changeList)) {
              consumer.consume(changeList);
            }
          }
        }
      }
    }
);
    final CvsResult executionResult=operation.run(myProject);
    if (executionResult.isCanceled()) {
      throw new ProcessCanceledException();
    }
 else     if (executionResult.hasErrors()) {
      throw executionResult.composeError();
    }
  }
  finally {
    consumer.finished();
  }
}
