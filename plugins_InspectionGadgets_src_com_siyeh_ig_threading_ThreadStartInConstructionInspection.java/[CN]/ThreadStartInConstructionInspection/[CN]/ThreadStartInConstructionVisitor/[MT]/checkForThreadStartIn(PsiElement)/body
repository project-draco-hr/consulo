{
  context.accept(new PsiRecursiveElementVisitor(){
    public void visitClass(    PsiClass aClass){
    }
    public void visitMethodCallExpression(    @NotNull PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      final PsiReferenceExpression methodExpression=expression.getMethodExpression();
      if (methodExpression == null) {
        return;
      }
      @NonNls final String methodName=methodExpression.getReferenceName();
      if (!"start".equals(methodName)) {
        return;
      }
      final PsiMethod method=expression.resolveMethod();
      if (method == null) {
        return;
      }
      final PsiParameterList paramList=method.getParameterList();
      final PsiParameter[] parameters=paramList.getParameters();
      if (parameters.length != 0) {
        return;
      }
      final PsiClass methodClass=method.getContainingClass();
      if (methodClass == null || !ClassUtils.isSubclass(methodClass,"java.lang.Thread")) {
        return;
      }
      final PsiClass containingClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
      if (containingClass == null || containingClass.hasModifierProperty(PsiModifier.FINAL)) {
        return;
      }
      registerMethodCallError(expression);
    }
  }
);
}
