{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return null;
  CachedValue<PsiClassType> cached=containingClass.getUserData(CACHED_CATEGORY_TYPE);
  if (cached == null) {
    cached=CachedValuesManager.getManager(containingClass.getProject()).createCachedValue(new CachedValueProvider<PsiClassType>(){
      public Result<PsiClassType> compute(){
        return Result.create(inferCategoryType(containingClass),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);
      }
      @Nullable private PsiClassType inferCategoryType(      PsiClass aClass){
        final PsiModifierList modifierList=aClass.getModifierList();
        if (modifierList == null)         return null;
        final PsiAnnotation annotation=modifierList.findAnnotation(GroovyCommonClassNames.GROOVY_LANG_CATEGORY);
        if (annotation == null)         return null;
        PsiAnnotationMemberValue value=annotation.findAttributeValue("value");
        if (!(value instanceof GrReferenceExpression))         return null;
        if ("class".equals(((GrReferenceExpression)value).getReferenceName()))         value=((GrReferenceExpression)value).getQualifier();
        if (!(value instanceof GrReferenceExpression))         return null;
        final PsiElement resolved=((GrReferenceExpression)value).resolve();
        if (!(resolved instanceof PsiClass))         return null;
        String className=((PsiClass)resolved).getQualifiedName();
        if (className == null)         className=((PsiClass)resolved).getName();
        if (className == null)         return null;
        return JavaPsiFacade.getElementFactory(aClass.getProject()).createTypeByFQClassName(className,resolved.getResolveScope());
      }
    }
,false);
  }
  return cached.getValue();
}
