{
  try {
    final ProjectConversionHelper conversionHelper;
    final String fp=canonicalize(filePath);
    final File f=new File(fp);
    if (convert && f.exists() && f.isFile()) {
      final ProjectConversionUtil.ProjectConversionResult result=ProjectConversionUtil.convertProject(fp);
      if (result.isOpeningCancelled()) {
        return null;
      }
      conversionHelper=result.getConversionHelper();
    }
 else {
      conversionHelper=null;
    }
    final Project[] project=new Project[1];
    final IOException[] io=new IOException[]{null};
    final JDOMException[] jdom=new JDOMException[]{null};
    final InvalidDataException[] invalidData=new InvalidDataException[]{null};
    final StateStorage.StateStorageException[] stateStorage=new StateStorage.StateStorageException[]{null};
    boolean ok=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        try {
          if (indicator != null) {
            indicator.setText("Loading components for '" + filePath + "'");
            indicator.setIndeterminate(true);
          }
          project[0]=loadProject(filePath,conversionHelper);
        }
 catch (        IOException e) {
          io[0]=e;
          return;
        }
catch (        JDOMException e) {
          jdom[0]=e;
          return;
        }
catch (        InvalidDataException e) {
          invalidData[0]=e;
          return;
        }
catch (        StateStorage.StateStorageException e) {
          stateStorage[0]=e;
          return;
        }
        if (indicator != null) {
          indicator.setText("Initializing components");
        }
      }
    }
,"Loading Project",true,null);
    if (!ok) {
      if (project[0] != null) {
        Disposer.dispose(project[0]);
        project[0]=null;
      }
      updateLastProjectToReopen();
    }
    if (project[0] == null || !ok) {
      return null;
    }
 else     if (!openProject(project[0])) {
      Disposer.dispose(project[0]);
      return null;
    }
    if (io[0] != null)     throw io[0];
    if (jdom[0] != null)     throw jdom[0];
    if (invalidData[0] != null)     throw invalidData[0];
    if (stateStorage[0] != null)     throw stateStorage[0];
    return project[0];
  }
 catch (  StateStorage.StateStorageException e) {
    throw new IOException(e.getMessage());
  }
}
