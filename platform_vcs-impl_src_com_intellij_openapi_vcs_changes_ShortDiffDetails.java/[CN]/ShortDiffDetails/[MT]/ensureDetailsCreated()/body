{
  if (myDetailsConsumer != null)   return;
  myDetailsPanel=new DetailsPanel();
  final PairConsumer<Change,RefreshablePanel> cacheConsumer=new PairConsumer<Change,RefreshablePanel>(){
    @Override public void consume(    Change change,    RefreshablePanel pair){
      final FilePath filePath=ChangesUtil.getFilePath(change);
      final RefreshablePanel old=myDetailsCache.get(filePath);
      if (old == null) {
        myDetailsCache.put(filePath,pair);
      }
 else       if (old != pair) {
        if (pair != null) {
          myDetailsCache.put(filePath,pair);
          Disposer.dispose(old);
        }
      }
    }
  }
;
  myDetailsConsumer=new PairConsumer<Change,RefreshablePanel>(){
    @Override public void consume(    Change change,    RefreshablePanel pair){
      cacheConsumer.consume(change,pair);
      pair.refresh();
      myCurrentPanel=pair;
      myDetailsPanel.data(myCurrentPanel.getPanel());
      myDetailsPanel.layout();
    }
  }
;
  myDetailsLoader=new GenericDetailsLoader<Change,RefreshablePanel>(new Consumer<Change>(){
    @Override public void consume(    Change change){
      if (myCurrentPanel != null) {
        myCurrentPanel.away();
      }
      final FilePath filePath=ChangesUtil.getFilePath(change);
      RefreshablePanel details=myDetailsCache.get(filePath);
      if (details != null && !details.isStillValid(change)) {
        Disposer.dispose(details);
        details=null;
        myDetailsLoader.resetValueConsumer();
      }
      if (details != null) {
        myDetailsConsumer.consume(change,details);
      }
 else {
        final RefreshablePanel detailsPanel=myVcsChangeDetailsManager.getPanel(change,myParent);
        if (detailsPanel != null) {
          try {
            myDetailsLoader.take(change,detailsPanel);
          }
 catch (          Details.AlreadyDisposedException e) {
            Disposer.dispose(detailsPanel);
          }
        }
      }
    }
  }
,myDetailsConsumer);
  myDetailsLoader.setCacheConsumer(cacheConsumer);
}
