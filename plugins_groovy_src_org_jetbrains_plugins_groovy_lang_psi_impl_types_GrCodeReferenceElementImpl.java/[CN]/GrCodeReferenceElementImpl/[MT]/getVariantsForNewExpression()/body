{
  final Object[] classVariants=getVariantsImpl(ReferenceKind.CLASS_OR_PACKAGE);
  List<Object> result=new ArrayList<Object>();
  for (  Object variant : classVariants) {
    if (variant instanceof PsiClass) {
      final PsiClass clazz=(PsiClass)variant;
      final MutableLookupElement<PsiClass> lookupElement=LookupElementFactory.getInstance().createLookupElement(clazz);
      GroovyCompletionUtil.setTailTypeForConstructor(clazz,lookupElement);
      result.add(lookupElement);
    }
 else     if (variant instanceof MutableLookupElement) {
      final MutableLookupElement lookupElement=(MutableLookupElement)variant;
      final Object obj=lookupElement.getObject();
      if (obj instanceof PsiClass) {
        GroovyCompletionUtil.setTailTypeForConstructor((PsiClass)obj,lookupElement);
      }
      result.add(lookupElement);
    }
 else {
      result.add(variant);
    }
  }
  return result.toArray(new Object[result.size()]);
}
