{
  PsiManager manager=getManager();
switch (kind) {
case STATIC_MEMBER_FQ:
{
      final GrCodeReferenceElement qualifier=getQualifier();
      if (qualifier != null) {
        final PsiElement resolve=qualifier.resolve();
        if (resolve instanceof PsiClass) {
          final PsiClass clazz=(PsiClass)resolve;
          List<PsiElement> result=new ArrayList<PsiElement>();
          for (          PsiField field : clazz.getFields()) {
            if (field.hasModifierProperty(PsiModifier.STATIC)) {
              result.add(field);
            }
          }
          for (          PsiMethod method : clazz.getMethods()) {
            if (method.hasModifierProperty(PsiModifier.STATIC)) {
              result.add(method);
            }
          }
          return result.toArray(new PsiElement[result.size()]);
        }
      }
    }
case PACKAGE_FQ:
case CLASS_OR_PACKAGE_FQ:
{
    final String refText=PsiUtil.getQualifiedReferenceText(this);
    final int lastDot=refText.lastIndexOf(".");
    String parentPackageFQName=lastDot > 0 ? refText.substring(0,lastDot) : "";
    final PsiPackage parentPackage=manager.findPackage(parentPackageFQName);
    if (parentPackage != null) {
      final GlobalSearchScope scope=getResolveScope();
      if (kind == PACKAGE_FQ) {
        return parentPackage.getSubPackages(scope);
      }
 else {
        final PsiPackage[] subpackages=parentPackage.getSubPackages(scope);
        final PsiClass[] classes=parentPackage.getClasses(scope);
        PsiElement[] result=new PsiElement[subpackages.length + classes.length];
        System.arraycopy(subpackages,0,result,0,subpackages.length);
        System.arraycopy(classes,0,result,subpackages.length,classes.length);
        return result;
      }
    }
  }
case CLASS_OR_PACKAGE:
case CLASS:
{
  GrCodeReferenceElement qualifier=getQualifier();
  if (qualifier != null) {
    PsiElement qualifierResolved=qualifier.resolve();
    if (qualifierResolved instanceof PsiPackage) {
      PsiPackage aPackage=(PsiPackage)qualifierResolved;
      PsiClass[] classes=aPackage.getClasses();
      if (kind == CLASS)       return classes;
      PsiPackage[] subpackages=aPackage.getSubPackages();
      return ArrayUtil.mergeArrays(classes,subpackages,Object.class);
    }
 else     if (qualifierResolved instanceof PsiClass) {
      return ((PsiClass)qualifierResolved).getInnerClasses();
    }
  }
 else {
    ResolverProcessor processor=new ClassResolverProcessor(null,this,true);
    ResolveUtil.treeWalkUp(this,processor);
    return GroovyCompletionUtil.getCompletionVariants(processor.getCandidates());
  }
}
}
return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
