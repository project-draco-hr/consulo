{
  PsiManager manager=getManager();
switch (kind) {
case STATIC_MEMBER_FQ:
{
      final GrCodeReferenceElement qualifier=getQualifier();
      final String refName=getReferenceName();
      if (qualifier != null) {
        final PsiElement resolve=qualifier.resolve();
        if (resolve instanceof PsiClass) {
          final PsiClass clazz=(PsiClass)resolve;
          List<PsiElement> result=new ArrayList<PsiElement>();
          for (          PsiField field : clazz.getFields()) {
            if (field.hasModifierProperty(PsiModifier.STATIC)) {
              result.add(field);
            }
          }
          for (          PsiMethod method : clazz.getMethods()) {
            if (method.hasModifierProperty(PsiModifier.STATIC)) {
              result.add(method);
            }
          }
          return result.toArray(new PsiElement[result.size()]);
        }
      }
    }
case PACKAGE_FQ:
case CLASS_OR_PACKAGE_FQ:
{
    final String refText=PsiUtil.getQualifiedReferenceText(this);
    final int lastDot=refText.lastIndexOf(".");
    String parentPackageFQName=lastDot > 0 ? refText.substring(0,lastDot) : "";
    final PsiPackage parentPackage=manager.findPackage(parentPackageFQName);
    if (parentPackage != null) {
      final GlobalSearchScope scope=getResolveScope();
      if (kind == PACKAGE_FQ) {
        return parentPackage.getSubPackages(scope);
      }
 else {
        final PsiPackage[] subpackages=parentPackage.getSubPackages(scope);
        final PsiClass[] classes=parentPackage.getClasses(scope);
        PsiElement[] result=new PsiElement[subpackages.length + classes.length];
        System.arraycopy(subpackages,0,result,0,subpackages.length);
        System.arraycopy(classes,0,result,subpackages.length,classes.length);
        return result;
      }
    }
  }
case CONSTRUCTOR:
{
  final Object[] classVariants=getVariantsImpl(CLASS);
  List<Object> result=new ArrayList<Object>();
  for (  Object variant : classVariants) {
    if (variant instanceof PsiClass) {
      final PsiClass clazz=(PsiClass)variant;
      final LookupElement<PsiClass> lookupElement=LookupElementFactory.getInstance().createLookupElement(clazz);
      GroovyCompletionUtil.setTailTypeForConstructor(clazz,lookupElement);
      result.add(lookupElement);
    }
 else     if (variant instanceof LookupElement) {
      final LookupElement lookupElement=(LookupElement)variant;
      final Object obj=lookupElement.getObject();
      if (obj instanceof PsiClass) {
        GroovyCompletionUtil.setTailTypeForConstructor((PsiClass)obj,lookupElement);
      }
      result.add(lookupElement);
    }
 else {
      result.add(variant);
    }
  }
  return result.toArray(new Object[result.size()]);
}
case CLASS:
{
GrCodeReferenceElement qualifier=getQualifier();
if (qualifier != null) {
  PsiElement qualifierResolved=qualifier.resolve();
  if (qualifierResolved instanceof PsiPackage) {
    return ((PsiPackage)qualifierResolved).getClasses();
  }
 else   if (qualifierResolved instanceof PsiClass) {
    return ((PsiClass)qualifierResolved).getInnerClasses();
  }
}
 else {
  ResolverProcessor processor=new ResolverProcessor(null,EnumSet.of(ClassHint.ResolveKind.CLASS_OR_PACKAGE),this,true);
  ResolveUtil.treeWalkUp(this,processor);
  return GroovyCompletionUtil.getCompletionVariants(processor.getCandidates());
}
}
}
return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
