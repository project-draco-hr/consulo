{
switch (kind) {
case STATIC_MEMBER_FQ:
{
      final GrCodeReferenceElement qualifier=getQualifier();
      if (qualifier != null) {
        final PsiElement resolve=qualifier.resolve();
        if (resolve instanceof PsiClass) {
          final PsiClass clazz=(PsiClass)resolve;
          for (          PsiField field : clazz.getFields()) {
            if (field.hasModifierProperty(PsiModifier.STATIC)) {
              consumer.consume(field);
            }
          }
          for (          PsiMethod method : clazz.getMethods()) {
            if (method.hasModifierProperty(PsiModifier.STATIC)) {
              consumer.consume(method);
            }
          }
          for (          PsiClass inner : clazz.getInnerClasses()) {
            if (inner.hasModifierProperty(PsiModifier.STATIC)) {
              consumer.consume(inner);
            }
          }
          return;
        }
      }
    }
case PACKAGE_FQ:
case CLASS_FQ:
case CLASS_OR_PACKAGE_FQ:
{
    final String refText=PsiUtil.getQualifiedReferenceText(this);
    final int lastDot=refText.lastIndexOf(".");
    String parentPackageFQName=lastDot > 0 ? refText.substring(0,lastDot) : "";
    final PsiPackage parentPackage=JavaPsiFacade.getInstance(getProject()).findPackage(parentPackageFQName);
    if (parentPackage != null) {
      final GlobalSearchScope scope=getResolveScope();
      if (kind == PACKAGE_FQ) {
        for (        PsiPackage aPackage : parentPackage.getSubPackages(scope)) {
          consumer.consume(aPackage);
        }
        return;
      }
 else {
        if (kind == CLASS_FQ) {
          for (          PsiClass aClass : parentPackage.getClasses(scope)) {
            consumer.consume(aClass);
          }
          return;
        }
 else {
          final PsiPackage[] subpackages=parentPackage.getSubPackages(scope);
          final PsiClass[] classes=parentPackage.getClasses(scope);
          for (          PsiPackage aPackage : subpackages) {
            consumer.consume(aPackage);
          }
          for (          PsiClass aClass : classes) {
            consumer.consume(aClass);
          }
          return;
        }
      }
    }
  }
case CLASS_OR_PACKAGE:
case CLASS_IN_QUALIFIED_NEW:
case CLASS:
{
  GrCodeReferenceElement qualifier=getQualifier();
  if (qualifier != null) {
    PsiElement qualifierResolved=qualifier.resolve();
    if (qualifierResolved instanceof PsiPackage) {
      PsiPackage aPackage=(PsiPackage)qualifierResolved;
      PsiClass[] classes=aPackage.getClasses(getResolveScope());
      for (      PsiClass aClass : classes) {
        consumer.consume(aClass);
      }
      if (kind == CLASS)       return;
      PsiPackage[] subpackages=aPackage.getSubPackages(getResolveScope());
      for (      PsiPackage subpackage : subpackages) {
        consumer.consume(subpackage);
      }
    }
 else     if (qualifierResolved instanceof PsiClass) {
      for (      PsiClass aClass : ((PsiClass)qualifierResolved).getInnerClasses()) {
        consumer.consume(aClass);
      }
    }
  }
 else {
    ResolverProcessor classProcessor=CompletionProcessor.createClassCompletionProcessor(this);
    ResolveUtil.treeWalkUp(this,classProcessor,false);
    for (    Object o : GroovyCompletionUtil.getCompletionVariants(classProcessor.getCandidates())) {
      consumer.consume(o);
    }
  }
}
}
}
