{
  final String refName=ref.getReferenceName();
switch (kind) {
case CLASS_OR_PACKAGE_FQ:
{
      PsiClass aClass=manager.findClass(PsiUtil.getQualifiedReferenceText(ref),ref.getResolveScope());
      if (aClass != null) {
        boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,ref,null);
        return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
      }
    }
case PACKAGE_FQ:
  PsiPackage aPackage=manager.findPackage(PsiUtil.getQualifiedReferenceText(ref));
if (aPackage != null) {
  return new GroovyResolveResult[]{new GroovyResolveResultImpl(aPackage,true)};
}
case CLASS:
case CLASS_OR_PACKAGE:
{
GrCodeReferenceElement qualifier=ref.getQualifier();
if (qualifier != null) {
  PsiElement qualifierResolved=qualifier.resolve();
  if (qualifierResolved instanceof PsiPackage) {
    PsiClass[] classes=((PsiPackage)qualifierResolved).getClasses();
    for (    final PsiClass aClass : classes) {
      if (refName.equals(aClass.getName())) {
        boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,ref,null);
        return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
      }
    }
    if (kind == CLASS_OR_PACKAGE) {
      for (      final PsiPackage subpackage : ((PsiPackage)qualifierResolved).getSubPackages()) {
        if (refName.equals(subpackage.getName()))         return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
      }
    }
  }
 else   if (kind == CLASS && qualifierResolved instanceof PsiClass) {
    PsiClass[] classes=((PsiClass)qualifierResolved).getInnerClasses();
    for (    final PsiClass aClass : classes) {
      if (refName.equals(aClass.getName())) {
        boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,ref,null);
        return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
      }
    }
  }
}
 else {
  ResolverProcessor processor=new ResolverProcessor(refName,EnumSet.of(ClassHint.ResolveKind.CLASS_OR_PACKAGE),ref,false,ref.getTypeArguments());
  ResolveUtil.treeWalkUp(ref,processor);
  GroovyResolveResult[] candidates=processor.getCandidates();
  if (candidates.length > 0)   return candidates;
  if (kind == CLASS_OR_PACKAGE) {
    PsiPackage defaultPackage=ref.getManager().findPackage("");
    if (defaultPackage != null) {
      for (      final PsiPackage subpackage : defaultPackage.getSubPackages()) {
        if (refName.equals(subpackage.getName()))         return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
      }
    }
  }
}
break;
}
case STATIC_MEMBER_FQ:
{
final GrCodeReferenceElement qualifier=ref.getQualifier();
if (qualifier != null) {
final PsiElement resolve=qualifier.resolve();
if (resolve instanceof PsiClass) {
  final PsiClass clazz=(PsiClass)resolve;
  PsiResolveHelper helper=clazz.getManager().getResolveHelper();
  List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
  final PsiField field=clazz.findFieldByName(refName,false);
  if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
    result.add(new GroovyResolveResultImpl(field,helper.isAccessible(field,ref,null)));
  }
  final PsiMethod[] methods=clazz.findMethodsByName(refName,false);
  for (  PsiMethod method : methods) {
    result.add(new GroovyResolveResultImpl(method,helper.isAccessible(method,ref,null)));
  }
  return result.toArray(new GroovyResolveResult[result.size()]);
}
}
}
}
return GroovyResolveResult.EMPTY_ARRAY;
}
