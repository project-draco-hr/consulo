{
  final String refName=ref.getReferenceName();
switch (kind) {
case CLASS_OR_PACKAGE_FQ:
case CLASS_FQ:
case PACKAGE_FQ:
    String qName=PsiUtil.getQualifiedReferenceText(ref);
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
if (kind == CLASS_OR_PACKAGE_FQ || kind == CLASS_FQ) {
  if (qName.indexOf('.') > 0 || ((GroovyFileBase)ref.getContainingFile()).getPackageName().length() == 0) {
    PsiClass aClass=facade.findClass(qName,ref.getResolveScope());
    if (aClass != null) {
      boolean isAccessible=PsiUtil.isAccessible(ref,aClass);
      return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
    }
  }
}
if (kind == CLASS_OR_PACKAGE_FQ || kind == PACKAGE_FQ) {
PsiPackage aPackage=facade.findPackage(qName);
if (aPackage != null) {
  return new GroovyResolveResult[]{new GroovyResolveResultImpl(aPackage,true)};
}
}
break;
case CLASS:
case CLASS_OR_PACKAGE:
{
GrCodeReferenceElement qualifier=ref.getQualifier();
if (qualifier != null) {
PsiElement qualifierResolved=qualifier.resolve();
if (qualifierResolved instanceof PsiPackage) {
PsiClass[] classes=((PsiPackage)qualifierResolved).getClasses();
for (final PsiClass aClass : classes) {
  if (refName.equals(aClass.getName())) {
    boolean isAccessible=PsiUtil.isAccessible(ref,aClass);
    return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
  }
}
if (kind == CLASS_OR_PACKAGE) {
  for (  final PsiPackage subpackage : ((PsiPackage)qualifierResolved).getSubPackages()) {
    if (refName.equals(subpackage.getName()))     return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
  }
}
}
 else if ((kind == CLASS || kind == CLASS_OR_PACKAGE) && qualifierResolved instanceof PsiClass) {
PsiClass[] classes=((PsiClass)qualifierResolved).getInnerClasses();
for (final PsiClass aClass : classes) {
  if (refName.equals(aClass.getName())) {
    boolean isAccessible=PsiUtil.isAccessible(ref,aClass);
    return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
  }
}
}
}
 else {
EnumSet<ClassHint.ResolveKind> kinds=kind == CLASS ? EnumSet.of(ClassHint.ResolveKind.CLASS) : EnumSet.of(ClassHint.ResolveKind.PACKAGE,ClassHint.ResolveKind.CLASS);
ResolverProcessor processor=new ClassResolverProcessor(refName,ref,kinds);
ResolveUtil.treeWalkUp(ref,processor);
GroovyResolveResult[] candidates=processor.getCandidates();
if (candidates.length > 0) return candidates;
if (kind == CLASS_OR_PACKAGE) {
PsiPackage defaultPackage=JavaPsiFacade.getInstance(ref.getProject()).findPackage("");
if (defaultPackage != null) {
  for (  final PsiPackage subpackage : defaultPackage.getSubPackages()) {
    if (refName.equals(subpackage.getName()))     return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
  }
}
}
}
break;
}
case STATIC_MEMBER_FQ:
{
final GrCodeReferenceElement qualifier=ref.getQualifier();
if (qualifier != null) {
final PsiElement resolve=qualifier.resolve();
if (resolve instanceof PsiClass) {
final PsiClass clazz=(PsiClass)resolve;
PsiResolveHelper helper=JavaPsiFacade.getInstance(clazz.getProject()).getResolveHelper();
List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
final PsiField field=clazz.findFieldByName(refName,false);
if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
result.add(new GroovyResolveResultImpl(field,helper.isAccessible(field,ref,null)));
}
final PsiMethod[] methods=clazz.findMethodsByName(refName,false);
for (PsiMethod method : methods) {
result.add(new GroovyResolveResultImpl(method,helper.isAccessible(method,ref,null)));
}
return result.toArray(new GroovyResolveResult[result.size()]);
}
}
}
}
return GroovyResolveResult.EMPTY_ARRAY;
}
