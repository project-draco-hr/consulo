{
  if (reference.getReferenceName() == null)   return GroovyResolveResult.EMPTY_ARRAY;
  final GroovyResolveResult[] results=_resolve(reference,reference.getManager(),reference.getKind(false));
  if (results == null)   return results;
  List<GroovyResolveResult> imported=new ArrayList<GroovyResolveResult>();
  final PsiType[] args=reference.getTypeArguments();
  for (int i=0; i < results.length; i++) {
    GroovyResolveResult result=results[i];
    final PsiElement element=result.getElement();
    if (element instanceof PsiClass) {
      final PsiSubstitutor substitutor=result.getSubstitutor();
      final PsiSubstitutor newSubstitutor=substitutor.putAll((PsiClass)element,args);
      GroovyPsiElement context=result.getCurrentFileResolveContext();
      GroovyResolveResultImpl newResult=new GroovyResolveResultImpl(element,context,newSubstitutor,result.isAccessible(),result.isStaticsOK());
      results[i]=newResult;
      if (context instanceof GrImportStatement) {
        imported.add(newResult);
      }
    }
  }
  if (!imported.isEmpty()) {
    return imported.toArray(new GroovyResolveResult[imported.size()]);
  }
  return results;
}
