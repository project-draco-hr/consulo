{
  super.visitIfStatement(ifStatement);
  PsiStatement elseBranch=ifStatement.getElseBranch();
  final PsiStatement thenBranch=ifStatement.getThenBranch();
  if (thenBranch == null) {
    return;
  }
  final Project project=ifStatement.getProject();
  final InputVariables inputVariables=new InputVariables(Collections.<PsiVariable>emptyList(),project,new LocalSearchScope(thenBranch),false);
  final DuplicatesFinder finder=new DuplicatesFinder(new PsiElement[]{thenBranch},inputVariables,null,Collections.<PsiVariable>emptyList());
  int depth=0;
  while (elseBranch instanceof PsiIfStatement) {
    if (depth++ > LIMIT_DEPTH) {
      break;
    }
    final PsiIfStatement statement=(PsiIfStatement)elseBranch;
    final PsiStatement branch=statement.getThenBranch();
    if (branch == null) {
      return;
    }
    final Match match=finder.isDuplicate(branch,true);
    if (match != null) {
      registerStatementError(ifStatement,statement);
      return;
    }
    elseBranch=statement.getElseBranch();
  }
  if (elseBranch == null) {
    checkIfStatementWithoutElseBranch(ifStatement);
  }
 else {
    final Match match=finder.isDuplicate(elseBranch,true);
    if (match != null) {
      registerStatementError(ifStatement);
    }
  }
}
