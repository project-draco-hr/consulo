{
  @SuppressWarnings({"RedundantCast"}) DetectedFacetPresentation presentation=FacetDetectorRegistryEx.getDetectedFacetPresentation((FacetType<?,? extends FacetConfiguration>)detectedFacetInfo.getFacetType());
  String text=presentation.getAutodetectionPopupText(detectedFacetInfo.getModule(),detectedFacetInfo.getFacetType(),detectedFacetInfo.getFacetName(),files);
  if (text == null) {
    text=DefaultDetectedFacetPresentation.INSTANCE.getAutodetectionPopupText(detectedFacetInfo.getModule(),detectedFacetInfo.getFacetType(),detectedFacetInfo.getFacetName(),files);
  }
  final String description=ProjectBundle.message("facet.autodetected.info.text",detectedFacetInfo.getFacetType().getPresentableName(),text,detectedFacetInfo.getFacetName());
  final String title=ProjectBundle.message("notification.name.0.facet.detected",detectedFacetInfo.getFacetType().getPresentableName());
  return new FacetDetectedNotification(title,description,new NotificationListener(){
    public void hyperlinkUpdate(    @NotNull Notification notification,    @NotNull HyperlinkEvent event){
      if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        notification.expire();
        if (isDisposed()) {
          return;
        }
        String link=event.getDescription();
        if ("create".equals(link)) {
          FacetInfo2<Module> underlyingInfo=detectedFacetInfo.getUnderlyingFacetInfo();
          final Facet underlyingFacet=underlyingInfo != null ? ((FacetInfoBackedByFacet)underlyingInfo).getFacet() : null;
          new WriteAction(){
            protected void run(            final Result result){
              createFacet(detectedFacetInfo,underlyingFacet);
            }
          }
.execute();
        }
 else         if ("disable".equals(link)) {
          disableDetectionInModule(detectedFacetInfo);
        }
 else {
          LOG.error(link);
        }
      }
    }
  }
,Collections.singletonList(detectedFacetInfo));
}
