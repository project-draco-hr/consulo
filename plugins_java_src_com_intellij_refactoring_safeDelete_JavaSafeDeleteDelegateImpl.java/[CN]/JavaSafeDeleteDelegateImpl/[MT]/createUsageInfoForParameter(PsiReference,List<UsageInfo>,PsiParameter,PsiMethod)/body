{
  int index=method.getParameterList().getParameterIndex(parameter);
  final PsiElement element=reference.getElement();
  PsiCall call=null;
  if (element instanceof PsiCall) {
    call=(PsiCall)element;
  }
 else   if (element.getParent() instanceof PsiCall) {
    call=(PsiCall)element.getParent();
  }
  if (call != null) {
    final PsiExpressionList argList=call.getArgumentList();
    if (argList != null) {
      final PsiExpression[] args=argList.getExpressions();
      if (index < args.length) {
        if (!parameter.isVarArgs()) {
          usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(args[index],parameter,true));
        }
 else {
          for (int i=index; i < args.length; i++) {
            usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(args[i],parameter,true));
          }
        }
      }
    }
  }
 else   if (element instanceof PsiDocMethodOrFieldRef) {
    if (((PsiDocMethodOrFieldRef)element).getSignature() != null) {
      @NonNls final StringBuffer newText=new StringBuffer();
      newText.append("/** @see #").append(method.getName()).append('(');
      final List<PsiParameter> parameters=new ArrayList<PsiParameter>(Arrays.asList(method.getParameterList().getParameters()));
      parameters.remove(parameter);
      newText.append(StringUtil.join(parameters,new Function<PsiParameter,String>(){
        @Override public String fun(        PsiParameter psiParameter){
          return parameter.getType().getCanonicalText();
        }
      }
,","));
      newText.append(")*/");
      usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(element,parameter,true){
        public void deleteElement() throws IncorrectOperationException {
          final PsiDocMethodOrFieldRef.MyReference javadocMethodReference=(PsiDocMethodOrFieldRef.MyReference)element.getReference();
          if (javadocMethodReference != null) {
            javadocMethodReference.bindToText(method.getContainingClass(),newText);
          }
        }
      }
);
    }
  }
}
