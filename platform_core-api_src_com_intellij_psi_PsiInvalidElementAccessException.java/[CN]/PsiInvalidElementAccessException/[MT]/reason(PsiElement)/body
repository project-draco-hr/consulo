{
  if (root == PsiUtilCore.NULL_PSI_ELEMENT)   return "NULL_PSI_ELEMENT";
  PsiElement element=root instanceof PsiFile ? root : root.getParent();
  if (element == null) {
    String m="parent is null";
    if (root instanceof StubBasedPsiElement) {
      StubElement stub=((StubBasedPsiElement)root).getStub();
      while (stub != null) {
        m+="\n  each stub=" + stub;
        if (stub instanceof PsiFileStubImpl) {
          m+="; fileStub.psi=" + stub.getPsi() + "; reason="+ ((PsiFileStubImpl)stub).getInvalidationReason();
        }
        stub=stub.getParentStub();
      }
    }
    return m;
  }
  while (element != null && !(element instanceof PsiFile))   element=element.getParent();
  PsiFile file=(PsiFile)element;
  if (file == null)   return "containing file is null";
  FileViewProvider provider=file.getViewProvider();
  VirtualFile vFile=provider.getVirtualFile();
  if (!vFile.isValid())   return vFile + " is invalid";
  if (!provider.isPhysical()) {
    PsiElement context=file.getContext();
    if (context != null && !context.isValid()) {
      return "invalid context: " + reason(context);
    }
  }
  PsiManager manager=file.getManager();
  if (manager.getProject().isDisposed())   return "project is disposed";
  Language language=file.getLanguage();
  if (language != provider.getBaseLanguage())   return "File language:" + language + " != Provider base language:"+ provider.getBaseLanguage();
  FileViewProvider p=manager.findViewProvider(vFile);
  if (provider != p)   return "different providers: " + provider + "("+ id(provider)+ "); "+ p+ "("+ id(p)+ ")";
  if (!provider.isPhysical())   return "non-physical provider: " + provider;
  return "psi is outdated";
}
