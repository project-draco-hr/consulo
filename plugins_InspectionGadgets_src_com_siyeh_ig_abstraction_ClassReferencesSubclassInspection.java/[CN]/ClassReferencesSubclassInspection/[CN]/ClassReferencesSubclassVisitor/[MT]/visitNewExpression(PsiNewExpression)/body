{
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  final PsiType componentType=type.getDeepComponentType();
  if (!(componentType instanceof PsiClassType)) {
    return;
  }
  final PsiClass parentClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
  if (anonymousClass != null) {
    final PsiClassType classType=anonymousClass.getBaseClassType();
    if (!isSubclass(classType,parentClass)) {
      return;
    }
    registerClassError(anonymousClass,parentClass,Boolean.FALSE);
  }
 else {
    final PsiClassType classType=(PsiClassType)componentType;
    if (!isSubclass(classType,parentClass)) {
      return;
    }
    final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
    registerError(classReference,parentClass,Boolean.FALSE);
  }
}
