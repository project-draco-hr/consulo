{
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  final PsiType componentType=type.getDeepComponentType();
  if (!(componentType instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)componentType;
  final PsiClass parentClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  if (!isSubclass(classType,parentClass)) {
    return;
  }
  final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
  if (classReference != null) {
    registerError(classReference,parentClass,Boolean.FALSE);
  }
 else {
    final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
    registerClassError(anonymousClass,parentClass,Boolean.TRUE);
  }
}
