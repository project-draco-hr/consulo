{
  if (element.getChild(ANY_NODES_ELEMENT_NAME) != null) {
    return;
  }
  final Object[] children=treeStructure.getChildElements(descriptor);
  final List<Element> expectedChildren=new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME));
  final StringBuilder messageBuilder=new StringBuilder("Actual children of [" + descriptor.getHighlightedText().getText() + "]:\n");
  for (  Object child : children) {
    final HierarchyNodeDescriptor nodeDescriptor=(HierarchyNodeDescriptor)child;
    nodeDescriptor.update();
    messageBuilder.append("    [").append(nodeDescriptor.getHighlightedText().getText()).append("]\n");
  }
  assertEquals(messageBuilder.toString(),expectedChildren.size(),children.length);
  Arrays.sort(children,new Comparator<Object>(){
    public int compare(    final Object first,    final Object second){
      return ((HierarchyNodeDescriptor)first).getHighlightedText().getText().compareTo(((HierarchyNodeDescriptor)second).getHighlightedText().getText());
    }
  }
);
  Collections.sort(expectedChildren,new Comparator<Element>(){
    public int compare(    final Element first,    final Element second){
      return first.getAttributeValue(TEXT_ATTR_NAME).compareTo(second.getAttributeValue(TEXT_ATTR_NAME));
    }
  }
);
  final Iterator<Element> iterator=expectedChildren.iterator();
  for (  Object child : children) {
    checkNodeDescriptorRecursively(treeStructure,((HierarchyNodeDescriptor)child),iterator.next());
  }
}
