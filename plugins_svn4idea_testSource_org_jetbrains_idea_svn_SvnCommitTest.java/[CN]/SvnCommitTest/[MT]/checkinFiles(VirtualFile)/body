{
  final List<Change> changes=new ArrayList<Change>();
  for (  VirtualFile file : files) {
    final Change change=myChangeListManager.getChange(file);
    Assert.assertNotNull(change);
    changes.add(change);
  }
  final HashSet<String> feedback=new HashSet<String>();
  final List<VcsException> exceptions=myVcs.getCheckinEnvironment().commit(changes,"test comment list",new NullableFunction<Object,Object>(){
    @Nullable @Override public Object fun(    Object o){
      return null;
    }
  }
,feedback);
  if (exceptions != null && !exceptions.isEmpty()) {
    exceptions.get(0).printStackTrace();
  }
  Assert.assertTrue(exceptions == null || exceptions.isEmpty());
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  for (  VirtualFile file : files) {
    final Change changeA=myChangeListManager.getChange(file);
    Assert.assertNull(changeA);
  }
  return feedback;
}
