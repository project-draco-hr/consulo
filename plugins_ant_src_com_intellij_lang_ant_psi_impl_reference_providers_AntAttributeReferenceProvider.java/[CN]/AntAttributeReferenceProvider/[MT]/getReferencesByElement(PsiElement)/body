{
  if (!(element instanceof AntStructuredElement)) {
    return PsiReference.EMPTY_ARRAY;
  }
  final AntStructuredElement se=(AntStructuredElement)element;
  final int elementStartOffset=se.getTextRange().getStartOffset();
  final List<PsiReference> list=PsiReferenceListSpinAllocator.alloc();
  try {
    for (    PsiElement child : se.getSourceElement().getChildren()) {
      if (child instanceof XmlToken) {
        XmlToken token=(XmlToken)child;
        if (token.getTokenType().toString().equals("XML_TAG_END")) {
          break;
        }
      }
 else       if (child instanceof PsiWhiteSpace) {
        final int off=child.getTextRange().getStartOffset() - elementStartOffset + 1;
        list.add(new AntAttributeReference(this,se," ",new TextRange(off,off),null));
      }
 else       if (child instanceof XmlAttribute) {
        final PsiElement nameElement=child.getFirstChild();
        if (nameElement != null) {
          final int off=nameElement.getTextRange().getStartOffset() - elementStartOffset;
          final String text=nameElement.getText();
          list.add(new AntAttributeReference(this,se,text,new TextRange(off,off + text.length()),null));
        }
      }
    }
    final int count=list.size();
    return (count == 0) ? PsiReference.EMPTY_ARRAY : list.toArray(new PsiReference[count]);
  }
  finally {
    PsiReferenceListSpinAllocator.dispose(list);
  }
}
