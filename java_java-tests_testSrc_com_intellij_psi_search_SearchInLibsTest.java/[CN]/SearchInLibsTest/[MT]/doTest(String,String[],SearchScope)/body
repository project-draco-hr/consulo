{
  String root=JavaTestUtil.getJavaTestDataPath() + "/psi/search/searchInLibs";
  VirtualFile rootFile=PsiTestUtil.createTestProjectStructure(myProject,myModule,root,myFilesToDelete,false);
  final VirtualFile projectRoot=rootFile.findChild("project");
  assertNotNull(projectRoot);
  final VirtualFile innerSourceRoot=projectRoot.findChild("src2");
  assertNotNull(innerSourceRoot);
  VirtualFile libRoot=rootFile.findChild("lib");
  final VirtualFile libClassesRoot=libRoot.findChild("classes");
  final VirtualFile libSrcRoot=libRoot.findChild("src");
  assertNotNull(libRoot);
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      final ModifiableRootModel rootModel=rootManager.getModifiableModel();
      rootModel.clear();
      rootModel.setSdk(null);
      final ContentEntry contentEntry=rootModel.addContentEntry(projectRoot);
      contentEntry.addSourceFolder(projectRoot,false);
      contentEntry.addSourceFolder(innerSourceRoot,false);
      final Library.ModifiableModel libraryModel=rootModel.getModuleLibraryTable().createLibrary().getModifiableModel();
      libraryModel.addRoot(libSrcRoot,OrderRootType.SOURCES);
      libraryModel.addRoot(libClassesRoot,OrderRootType.CLASSES);
      libraryModel.commit();
      rootModel.commit();
    }
  }
);
  final PsiClass aClass=myJavaFacade.findClass(classNameToSearch);
  assertNotNull(aClass);
  PsiReference[] refs=ReferencesSearch.search(aClass,scope,false).toArray(new PsiReference[0]);
  ArrayList<PsiFile> files=new ArrayList<PsiFile>();
  for (int i=0; i < refs.length; i++) {
    PsiReference ref=refs[i];
    PsiFile file=ref.getElement().getContainingFile();
    if (!files.contains(file)) {
      files.add(file);
    }
  }
  assertEquals("files count",expectedFileNames.length,files.size());
  Collections.sort(files,new Comparator(){
    @Override public int compare(    Object o1,    Object o2){
      PsiFile file1=(PsiFile)o1;
      PsiFile file2=(PsiFile)o2;
      return file1.getName().compareTo(file2.getName());
    }
  }
);
  Arrays.sort(expectedFileNames);
  for (int i=0; i < expectedFileNames.length; i++) {
    String name=expectedFileNames[i];
    PsiFile file=(PsiFile)files.get(i);
    assertEquals(name,file.getName());
  }
}
