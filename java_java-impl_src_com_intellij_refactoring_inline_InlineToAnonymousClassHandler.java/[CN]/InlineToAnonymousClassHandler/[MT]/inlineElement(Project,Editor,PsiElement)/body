{
  final PsiClass psiClass=psiElement instanceof PsiMethod ? ((PsiMethod)psiElement).getContainingClass() : (PsiClass)psiElement;
  PsiCall callToInline=findCallToInline(editor);
  final PsiClassType superType=InlineToAnonymousClassProcessor.getSuperType(psiClass);
  if (superType == null) {
    CommonRefactoringUtil.showErrorHint(project,editor,"java.lang.Object is not found",RefactoringBundle.message("inline.to.anonymous.refactoring"),null);
    return;
  }
  String errorMessage=getCannotInlineMessage(psiClass);
  if (errorMessage != null) {
    CommonRefactoringUtil.showErrorHint(project,editor,errorMessage,RefactoringBundle.message("inline.to.anonymous.refactoring"),null);
    return;
  }
  new InlineToAnonymousClassDialog(project,psiClass,callToInline,canBeInvokedOnReference(callToInline,superType)).show();
}
