{
  final PsiClass psiClass=psiElement instanceof PsiMethod ? ((PsiMethod)psiElement).getContainingClass() : (PsiClass)psiElement;
  PsiCall callToInline=findCallToInline(editor);
  final PsiClassType superType=InlineToAnonymousClassProcessor.getSuperType(psiClass);
  if (superType == null) {
    CommonRefactoringUtil.showErrorHint(project,editor,"java.lang.Object is not found",RefactoringBundle.message("inline.to.anonymous.refactoring"),null);
    return;
  }
  final Ref<String> errorMessage=new Ref<String>();
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      errorMessage.set(getCannotInlineMessage(psiClass));
    }
  }
,"Check if inline is possible...",true,project))   return;
  if (errorMessage.get() != null) {
    CommonRefactoringUtil.showErrorHint(project,editor,errorMessage.get(),RefactoringBundle.message("inline.to.anonymous.refactoring"),null);
    return;
  }
  new InlineToAnonymousClassDialog(project,psiClass,callToInline,canBeInvokedOnReference(callToInline,superType)).show();
}
