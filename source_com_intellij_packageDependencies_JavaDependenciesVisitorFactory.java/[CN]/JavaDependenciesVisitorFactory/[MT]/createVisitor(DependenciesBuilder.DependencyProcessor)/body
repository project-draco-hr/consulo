{
  return new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitReferenceElement(expression);
    }
    @Override public void visitElement(    PsiElement element){
      super.visitElement(element);
      PsiReference[] refs=element.getReferences();
      for (      PsiReference ref : refs) {
        PsiElement resolved=ref.resolve();
        if (resolved != null) {
          processor.process(ref.getElement(),resolved);
        }
      }
    }
    @Override public void visitLiteralExpression(    PsiLiteralExpression expression){
    }
    @Override public void visitDocComment(    PsiDocComment comment){
    }
    @Override public void visitImportStatement(    PsiImportStatement statement){
      if (!DependencyValidationManager.getInstance(statement.getProject()).skipImportStatements()) {
        visitElement(statement);
      }
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      PsiMethod psiMethod=expression.resolveMethod();
      if (psiMethod != null) {
        PsiType returnType=psiMethod.getReturnType();
        if (returnType != null) {
          PsiClass psiClass=PsiUtil.resolveClassInType(returnType);
          if (psiClass != null) {
            processor.process(expression,psiClass);
          }
        }
      }
    }
  }
;
}
