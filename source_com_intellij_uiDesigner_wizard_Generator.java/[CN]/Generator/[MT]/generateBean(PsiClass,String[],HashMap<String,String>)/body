{
  final StringBuffer membersBuffer=new StringBuffer();
  final StringBuffer methodsBuffer=new StringBuffer();
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(aClass.getProject());
  for (int i=0; i < properties.length; i++) {
    final String property=properties[i];
    LOG.assertTrue(property != null);
    final String type=property2fqClassName.get(property);
    LOG.assertTrue(type != null);
    generateProperty(codeStyleManager,property,type,membersBuffer,methodsBuffer);
  }
  final PsiClass fakeClass;
  try {
    fakeClass=aClass.getManager().getElementFactory().createClassFromText(membersBuffer.toString() + methodsBuffer.toString(),null);
    final PsiField[] fields=fakeClass.getFields();
    for (int i=0; i < fields.length; i++) {
      final PsiField field=fields[i];
      aClass.add(field);
    }
    final PsiMethod[] methods=fakeClass.getMethods();
    for (int i=0; i < methods.length; i++) {
      final PsiMethod method=methods[i];
      aClass.add(method);
    }
    codeStyleManager.shortenClassReferences(aClass);
    codeStyleManager.reformat(aClass);
  }
 catch (  IncorrectOperationException e) {
    throw new MyException(e.getMessage());
  }
}
