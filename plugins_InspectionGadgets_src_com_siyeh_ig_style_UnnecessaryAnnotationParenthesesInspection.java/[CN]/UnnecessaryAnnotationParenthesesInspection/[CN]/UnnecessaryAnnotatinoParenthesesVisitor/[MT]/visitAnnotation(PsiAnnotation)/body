{
  super.visitAnnotation(annotation);
  final PsiJavaCodeReferenceElement reference=annotation.getNameReferenceElement();
  if (reference == null) {
    return;
  }
  final PsiAnnotationParameterList parameterList=annotation.getParameterList();
  final PsiElement[] children=parameterList.getChildren();
  if (children.length == 0) {
    return;
  }
  final PsiNameValuePair[] nameValuePairs=parameterList.getAttributes();
  if (nameValuePairs.length > 0) {
    return;
  }
  final PsiElement target=reference.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass annotationClass=(PsiClass)target;
  final PsiMethod[] methods=annotationClass.getMethods();
  for (  PsiMethod method : methods) {
    if (!(method instanceof PsiAnnotationMethod)) {
      continue;
    }
    final PsiAnnotationMethod annotationMethod=(PsiAnnotationMethod)method;
    final PsiAnnotationMemberValue defaultValue=annotationMethod.getDefaultValue();
    if (defaultValue == null) {
      return;
    }
  }
  registerError(parameterList);
}
