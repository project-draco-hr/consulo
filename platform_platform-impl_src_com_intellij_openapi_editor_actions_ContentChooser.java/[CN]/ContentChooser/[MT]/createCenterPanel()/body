{
  final int selectionMode=myAllowMultipleSelections ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_SELECTION;
  myList.setSelectionMode(selectionMode);
  if (myUseIdeaEditor) {
    EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
    myList.setFont(scheme.getFont(EditorFontType.PLAIN));
    Color fg=ObjectUtils.chooseNotNull(scheme.getDefaultForeground(),UIUtil.getListForeground());
    Color bg=ObjectUtils.chooseNotNull(scheme.getDefaultBackground(),UIUtil.getListBackground());
    myList.setForeground(fg);
    myList.setBackground(bg);
  }
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      close(OK_EXIT_CODE);
      return true;
    }
  }
.installOn(myList);
  myList.setCellRenderer(new MyListCellRenderer());
  myList.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        int newSelectionIndex=-1;
        for (        Object o : myList.getSelectedValues()) {
          int i=((Item)o).index;
          removeContentAt(myAllContents.get(i));
          if (newSelectionIndex < 0) {
            newSelectionIndex=i;
          }
        }
        rebuildListContent();
        if (myAllContents.isEmpty()) {
          close(CANCEL_EXIT_CODE);
          return;
        }
        newSelectionIndex=Math.min(newSelectionIndex,myAllContents.size() - 1);
        myList.setSelectedIndex(newSelectionIndex);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        doOKAction();
      }
 else {
        final char aChar=e.getKeyChar();
        if (aChar >= '0' && aChar <= '9') {
          int idx=aChar == '0' ? 9 : aChar - '1';
          if (idx < myAllContents.size()) {
            myList.setSelectedIndex(idx);
          }
        }
      }
    }
  }
);
  mySplitter.setFirstComponent(ListWithFilter.wrap(myList,ScrollPaneFactory.createScrollPane(myList),new Function<Object,String>(){
    @Override public String fun(    Object o){
      return ((Item)o).longText;
    }
  }
));
  mySplitter.setSecondComponent(new JPanel());
  rebuildListContent();
  ListScrollingUtil.installActions(myList);
  ListScrollingUtil.ensureSelectionExists(myList);
  updateViewerForSelection();
  myList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      myUpdateAlarm.cancelAllRequests();
      myUpdateAlarm.addRequest(new Runnable(){
        @Override public void run(){
          updateViewerForSelection();
        }
      }
,100);
    }
  }
);
  mySplitter.setPreferredSize(new Dimension(500,500));
  SplitterProportionsData d=new SplitterProportionsDataImpl();
  d.externalizeToDimensionService(getClass().getName());
  d.restoreSplitterProportions(mySplitter);
  return mySplitter;
}
