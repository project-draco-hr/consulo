{
  final GradleApiFacade facade=mySupport.acquire(this,project.getName());
  if (facade == null) {
    throw new IllegalStateException("Can't obtain facade to working with gradle api at the remote process. Project: " + project);
  }
  Disposer.register(project,new Disposable(){
    @Override public void dispose(){
      mySupport.stopAll(true);
      myFacadeWrappers.clear();
      myRemoteFacades.clear();
    }
  }
);
  final GradleApiFacade result=new GradleApiFacadeWrapper(facade,myProgressManager);
  Pair<GradleApiFacade,RemoteGradleProcessSettings> newPair=new Pair<GradleApiFacade,RemoteGradleProcessSettings>(result,getRemoteSettings(project));
  myRemoteFacades.put(project.getName(),newPair);
  if (!StringUtil.isEmpty(newPair.second.getJavaHome())) {
    GradleLog.LOG.info("Instructing gradle to use java from " + newPair.second.getJavaHome());
  }
  result.applySettings(newPair.second);
  RemoteGradleProgressNotificationManager exported=myExportedProgressManager.get();
  if (exported == null) {
    try {
      exported=(RemoteGradleProgressNotificationManager)UnicastRemoteObject.exportObject(myProgressManager,0);
      myExportedProgressManager.set(exported);
    }
 catch (    RemoteException e) {
      exported=myExportedProgressManager.get();
    }
  }
  if (exported == null) {
    GradleLog.LOG.warn("Can't export progress manager");
  }
 else {
    result.applyProgressManager(exported);
  }
  return result;
}
