{
  final GrExpression initializer=getInitializerGroovy();
  GrTypeElement typeElement=getTypeElementGroovy();
  PsiType declaredType=null;
  if (typeElement != null) {
    declaredType=typeElement.getType();
    if (!(declaredType instanceof PsiClassType)) {
      return declaredType;
    }
  }
  if (initializer != null) {
    PsiType initializerType=ourGuard.doPreventingRecursion(this,true,new NullableComputable<PsiType>(){
      @Override public PsiType compute(){
        return initializer.getType();
      }
    }
);
    if (declaredType == null)     return initializerType;
    if (initializerType instanceof PsiClassType && TypesUtil.isAssignable(declaredType,initializerType,this)) {
      final PsiClassType.ClassResolveResult initializerResult=((PsiClassType)initializerType).resolveGenerics();
      final PsiClass initializerClass=initializerResult.getElement();
      if (initializerClass != null && !com.intellij.psi.util.PsiUtil.isRawSubstitutor(initializerClass,initializerResult.getSubstitutor())) {
        return initializerType;
      }
    }
  }
  return declaredType;
}
