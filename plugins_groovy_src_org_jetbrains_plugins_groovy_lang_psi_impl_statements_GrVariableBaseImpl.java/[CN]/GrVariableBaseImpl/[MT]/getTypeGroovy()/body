{
  final GrExpression initializer=getInitializerGroovy();
  final PsiElement parent=getParent();
  if (parent instanceof GrTupleDeclaration && initializer != null) {
    return initializer.getType();
  }
  GrTypeElement typeElement=getTypeElementGroovy();
  PsiType declaredType=null;
  if (typeElement != null) {
    declaredType=typeElement.getType();
    if (!(declaredType instanceof PsiClassType)) {
      return declaredType;
    }
  }
  if (initializer != null) {
    PsiType initializerType=myGuard.doPreventingRecursion(this,true,new NullableComputable<PsiType>(){
      @Override public PsiType compute(){
        return initializer.getType();
      }
    }
);
    if (initializerType != null) {
      if (declaredType != null && initializerType instanceof PsiClassType) {
        final PsiClass declaredClass=((PsiClassType)declaredType).resolve();
        if (declaredClass != null) {
          final PsiClassType.ClassResolveResult initializerResult=((PsiClassType)initializerType).resolveGenerics();
          final PsiClass initializerClass=initializerResult.getElement();
          if (initializerClass != null && !com.intellij.psi.util.PsiUtil.isRawSubstitutor(initializerClass,initializerResult.getSubstitutor())) {
            if (declaredClass == initializerClass)             return initializerType;
            final PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(declaredClass,initializerClass,initializerResult.getSubstitutor());
            if (superSubstitutor != null) {
              return JavaPsiFacade.getInstance(getProject()).getElementFactory().createType(declaredClass,superSubstitutor);
            }
          }
        }
      }
    }
    if (declaredType == null)     declaredType=initializerType;
  }
  return declaredType;
}
