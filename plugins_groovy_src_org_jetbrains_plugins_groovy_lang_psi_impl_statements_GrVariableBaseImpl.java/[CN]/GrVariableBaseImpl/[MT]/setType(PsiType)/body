{
  final GrVariableDeclaration variableDeclaration=getDeclaration();
  if (variableDeclaration == null)   return;
  final GrTypeElement typeElement=variableDeclaration.getTypeElementGroovyForVariable(this);
  type=TypesUtil.unboxPrimitiveTypeWrapper(type);
  GrTypeElement newTypeElement;
  try {
    newTypeElement=GroovyPsiElementFactory.getInstance(getProject()).createTypeElement(type);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return;
  }
  if (typeElement == null) {
    newTypeElement=(GrTypeElement)getParent().addBefore(newTypeElement,this);
  }
 else {
    newTypeElement=(GrTypeElement)typeElement.replace(newTypeElement);
  }
  PsiUtil.shortenReferences(newTypeElement);
}
