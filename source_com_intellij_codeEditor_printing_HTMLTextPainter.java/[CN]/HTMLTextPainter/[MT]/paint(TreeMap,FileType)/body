{
  HighlighterIterator hIterator=myHighlighter.createIterator(myOffset);
  if (hIterator.atEnd())   return;
  FileWriter writer;
  try {
    writer=new FileWriter(myHTMLFileName);
  }
 catch (  IOException e) {
    LOG.error(e.getMessage(),e);
    return;
  }
  lineCount=myFirstLineNumber;
  TextAttributes prevAttributes=null;
  Iterator refKeys=null;
  int refOffset=-1;
  PsiReference ref=null;
  if (refMap != null) {
    refKeys=refMap.keySet().iterator();
    if (refKeys.hasNext()) {
      Integer key=(Integer)refKeys.next();
      ref=(PsiReference)refMap.get(key);
      refOffset=key.intValue();
    }
  }
  int referenceEnd=-1;
  try {
    writeHeader(writer,myFileName);
    if (myFirstLineNumber == 0) {
      writeLineNumber(writer);
    }
    String closeTag=null;
    while (myCurrentMethodSeparator < myMethodSeparators.length) {
      LineMarkerInfo marker=myMethodSeparators[myCurrentMethodSeparator];
      if (marker != null && marker.startOffset >= hIterator.getStart())       break;
      myCurrentMethodSeparator++;
    }
    while (!hIterator.atEnd()) {
      TextAttributes textAttributes=hIterator.getTextAttributes();
      int hStart=hIterator.getStart();
      int hEnd=hIterator.getEnd();
      if (hEnd > mySegmentEnd)       break;
      if (refOffset > 0 && hStart <= refOffset && hEnd > refOffset) {
        referenceEnd=writeReferenceTag(writer,ref);
      }
      if (!equals(prevAttributes,textAttributes)) {
        if (closeTag != null) {
          writer.write(closeTag);
        }
        closeTag=writeFontTag(writer,textAttributes);
        prevAttributes=textAttributes;
      }
      if (myCurrentMethodSeparator < myMethodSeparators.length) {
        LineMarkerInfo marker=myMethodSeparators[myCurrentMethodSeparator];
        if (marker != null && marker.startOffset <= hEnd) {
          writer.write("<hr>");
          myCurrentMethodSeparator++;
        }
      }
      writeString(writer,myText,hStart,hEnd - hStart,fileType);
      if (referenceEnd > 0 && hEnd >= referenceEnd) {
        writer.write("</A>");
        referenceEnd=-1;
        if (refKeys.hasNext()) {
          Integer key=(Integer)refKeys.next();
          ref=(PsiReference)refMap.get(key);
          refOffset=key.intValue();
        }
      }
      hIterator.advance();
    }
    if (closeTag != null) {
      writer.write(closeTag);
    }
    writeFooter(writer);
  }
 catch (  IOException e) {
    LOG.error(e.getMessage(),e);
  }
 finally {
    try {
      writer.close();
    }
 catch (    IOException e) {
      LOG.error(e.getMessage(),e);
    }
  }
}
