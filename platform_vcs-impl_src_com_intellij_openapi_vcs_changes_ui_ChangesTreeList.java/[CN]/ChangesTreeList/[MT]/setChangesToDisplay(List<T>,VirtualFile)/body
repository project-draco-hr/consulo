{
  final DefaultTreeModel model=buildTreeModel(changes,myChangeDecorator);
  TreeState state=null;
  if (!myAlwaysExpandList) {
    state=TreeState.createOn(this,getRoot());
  }
  setModel(model);
  myIsModelFlat=isCurrentModelFlat();
  setChildIndent(myShowFlatten && myIsModelFlat);
  if (!myAlwaysExpandList) {
    state.applyTo(this,getRoot());
    return;
  }
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed())       return;
      TreeUtil.expandAll(ChangesTreeList.this);
      int selectedTreeRow=-1;
      if (myShowCheckboxes) {
        if (myIncludedChanges.size() > 0) {
          ChangesBrowserNode root=(ChangesBrowserNode)model.getRoot();
          Enumeration enumeration=root.depthFirstEnumeration();
          while (enumeration.hasMoreElements()) {
            ChangesBrowserNode node=(ChangesBrowserNode)enumeration.nextElement();
            @SuppressWarnings("unchecked") final CheckboxTree.NodeState state=getNodeStatus(node);
            if (node != root && state == CheckboxTree.NodeState.CLEAR) {
              collapsePath(new TreePath(node.getPath()));
            }
          }
          enumeration=root.depthFirstEnumeration();
          while (enumeration.hasMoreElements()) {
            ChangesBrowserNode node=(ChangesBrowserNode)enumeration.nextElement();
            @SuppressWarnings("unchecked") final CheckboxTree.NodeState state=getNodeStatus(node);
            if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) {
              selectedTreeRow=getRowForPath(new TreePath(node.getPath()));
              break;
            }
          }
        }
      }
      if (toSelect != null) {
        int rowInTree=findRowContainingFile((TreeNode)model.getRoot(),toSelect);
        if (rowInTree > -1) {
          selectedTreeRow=rowInTree;
        }
      }
      if (selectedTreeRow >= 0) {
        setSelectionRow(selectedTreeRow);
      }
      TreeUtil.showRowCentered(ChangesTreeList.this,selectedTreeRow,false);
    }
  }
;
  if (ApplicationManager.getApplication().isDispatchThread()) {
    runnable.run();
  }
 else {
    SwingUtilities.invokeLater(runnable);
  }
}
