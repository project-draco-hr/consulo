{
  myProject=project;
  myShowCheckboxes=showCheckboxes;
  myHighlightProblems=highlightProblems;
  myInclusionListener=inclusionListener;
  myChangeDecorator=decorator;
  myIncludedChanges=new HashSet<T>(initiallyIncluded);
  myAlwaysExpandList=true;
  myCards=new CardLayout();
  setLayout(myCards);
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myTree=new MyTree(project,checkboxWidth);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setOpaque(false);
  myTree.setCellRenderer(new MyTreeCellRenderer());
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    TreePath o){
      ChangesBrowserNode node=(ChangesBrowserNode)o.getLastPathComponent();
      return node.getTextPresentation();
    }
  }
);
  myList=new JBList(new DefaultListModel());
  myList.setVisibleRowCount(10);
  add(myListScrollPane=ScrollPaneFactory.createScrollPane(myList),LIST_CARD);
  add(myTreeScrollPane=ScrollPaneFactory.createScrollPane(myTree),TREE_CARD);
  new ListSpeedSearch(myList){
    protected String getElementText(    Object element){
      if (element instanceof Change) {
        return ChangesUtil.getFilePath((Change)element).getName();
      }
      return super.getElementText(element);
    }
  }
;
  myList.setCellRenderer(new MyListCellRenderer());
  new MyToggleSelectionAction().registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),this);
  if (myShowCheckboxes) {
    registerKeyboardAction(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        includeSelection();
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    registerKeyboardAction(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        excludeSelection();
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent e,    int clickCount){
      final int idx=myList.locationToIndex(e.getPoint());
      if (idx >= 0) {
        final Rectangle baseRect=myList.getCellBounds(idx,idx);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (baseRect.contains(e.getPoint())) {
          toggleSelection();
          return true;
        }
 else         if (clickCount == 2) {
          myDoubleClickHandler.run();
          return true;
        }
      }
      return false;
    }
  }
.installOn(myList);
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent e,    int clickCount){
      final int row=myTree.getRowForLocation(e.getPoint().x,e.getPoint().y);
      if (row >= 0) {
        final Rectangle baseRect=myTree.getRowBounds(row);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (!baseRect.contains(e.getPoint()) && clickCount == 2) {
          myDoubleClickHandler.run();
          return true;
        }
      }
      return false;
    }
  }
.installOn(myTree);
  setShowFlatten(PropertiesComponent.getInstance(myProject).isTrueValue(FLATTEN_OPTION_KEY));
  String emptyText=StringUtil.capitalize(DiffBundle.message("diff.count.differences.status.text",0));
  setEmptyText(emptyText);
}
