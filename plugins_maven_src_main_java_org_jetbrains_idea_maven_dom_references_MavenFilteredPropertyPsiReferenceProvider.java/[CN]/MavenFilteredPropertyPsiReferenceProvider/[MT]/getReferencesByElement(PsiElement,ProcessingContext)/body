{
  if (!MavenDomUtil.isFilteredResourceFile(element))   return PsiReference.EMPTY_ARRAY;
  String text=element.getText();
  if (StringUtil.isEmptyOrSpaces(text))   return PsiReference.EMPTY_ARRAY;
  MavenProject mavenProject=MavenDomUtil.findContainingProject(element);
  if (mavenProject == null)   return PsiReference.EMPTY_ARRAY;
  List<PsiReference> result=new ArrayList<PsiReference>();
  Matcher matcher=MavenPropertyResolver.PATTERN.matcher(text);
  while (matcher.find()) {
    String propertyName=matcher.group(1);
    int from;
    if (propertyName == null) {
      propertyName=matcher.group(2);
      from=matcher.start(2);
    }
 else {
      from=matcher.start(1);
    }
    TextRange range=TextRange.from(from,propertyName.length());
    result.add(new MavenFilteredPropertyPsiReference(mavenProject,element,propertyName,range,MavenPropertyPsiReferenceProvider.SOFT_DEFAULT));
  }
  return result.toArray(new PsiReference[result.size()]);
}
