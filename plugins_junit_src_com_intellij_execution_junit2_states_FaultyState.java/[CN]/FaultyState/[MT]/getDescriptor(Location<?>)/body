{
  if (location == null)   return super.getDescriptor(location);
  final String[] stackTrace=new LineTokenizer(myStackTrace).execute();
  final PsiLocation<?> psiLocation=location.toPsiLocation();
  final PsiClass containingClass=psiLocation.getParentElement(PsiClass.class);
  if (containingClass == null)   return super.getDescriptor(location);
  String containingMethod=null;
  for (Iterator<Location<PsiMethod>> iterator=psiLocation.getAncestors(PsiMethod.class,false); iterator.hasNext(); ) {
    final PsiMethod psiMethod=iterator.next().getPsiElement();
    if (containingClass.equals(psiMethod.getContainingClass()))     containingMethod=psiMethod.getName();
  }
  if (containingMethod == null)   return super.getDescriptor(location);
  final String qualifiedName=containingClass.getQualifiedName();
  StackTraceLine lastLine=null;
  for (  String aStackTrace : stackTrace) {
    final StackTraceLine line=new StackTraceLine(containingClass.getProject(),aStackTrace);
    if (containingMethod.equals(line.getMethodName()) && qualifiedName.equals(line.getClassName())) {
      lastLine=line;
      break;
    }
  }
  return lastLine != null ? lastLine.getOpenFileDescriptor(containingClass.getContainingFile().getVirtualFile()) : super.getDescriptor(location);
}
