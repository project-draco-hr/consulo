{
  workingDirComponent.getComponent().addBrowseFolderListener(RunnerBundle.message("maven.select.maven.project.file"),"",null,new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      if (!super.isFileSelectable(file))       return false;
      return file.findChild(MavenConstants.POM_XML) != null;
    }
  }
);
  if (!project.isDefault()) {
    MyCompletionProvider profilesCompletionProvider=new MyCompletionProvider(project){
      @NotNull @Override protected String getPrefix(      @NotNull String currentTextPrefix){
        String prefix=super.getPrefix(currentTextPrefix);
        if (prefix.startsWith("-") || prefix.startsWith("!")) {
          prefix=prefix.substring(1);
        }
        return prefix;
      }
      @Override protected void addVariants(      @NotNull CompletionResultSet result,      MavenProjectsManager manager){
        for (        String profile : manager.getAvailableProfiles()) {
          result.addElement(LookupElementBuilder.create(profile));
        }
      }
    }
;
    profilesComponent.setComponent(profilesCompletionProvider.createEditor(project));
    MyCompletionProvider goalsCompletionProvider=new MyCompletionProvider(project){
      private volatile List<LookupElement> myCachedElements;
      @Override protected void addVariants(      @NotNull CompletionResultSet result,      MavenProjectsManager manager){
        List<LookupElement> cachedElements=myCachedElements;
        if (cachedElements == null) {
          Set<String> goals=new HashSet<String>();
          goals.addAll(MavenConstants.PHASES);
          for (          MavenProject mavenProject : manager.getProjects()) {
            for (            MavenPlugin plugin : mavenProject.getPlugins()) {
              MavenPluginInfo pluginInfo=MavenArtifactUtil.readPluginInfo(manager.getLocalRepository(),plugin.getMavenId());
              if (pluginInfo != null) {
                for (                MavenPluginInfo.Mojo mojo : pluginInfo.getMojos()) {
                  goals.add(mojo.getDisplayName());
                }
              }
            }
          }
          cachedElements=new ArrayList<LookupElement>(goals.size());
          for (          String goal : goals) {
            cachedElements.add(LookupElementBuilder.create(goal).withIcon(icons.MavenIcons.Phase));
          }
          myCachedElements=cachedElements;
        }
        result.addAllElements(cachedElements);
      }
    }
;
    goalsComponent.setComponent(goalsCompletionProvider.createEditor(project));
  }
  setAnchor(profilesComponent.getLabel());
}
