{
  workingDirComponent.getComponent().addBrowseFolderListener(RunnerBundle.message("maven.select.maven.project.file"),"",project,new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      if (!super.isFileSelectable(file))       return false;
      return file.findChild(MavenConstants.POM_XML) != null;
    }
  }
);
  if (!project.isDefault()) {
    TextFieldCompletionProvider profilesCompletionProvider=new TextFieldCompletionProvider(true){
      @Override protected final void addCompletionVariants(      @NotNull String text,      int offset,      @NotNull String prefix,      @NotNull CompletionResultSet result){
        MavenProjectsManager manager=MavenProjectsManager.getInstance(project);
        for (        String profile : manager.getAvailableProfiles()) {
          result.addElement(LookupElementBuilder.create(profile));
        }
      }
      @NotNull @Override protected String getPrefix(      @NotNull String currentTextPrefix){
        String prefix=super.getPrefix(currentTextPrefix);
        if (prefix.startsWith("-") || prefix.startsWith("!")) {
          prefix=prefix.substring(1);
        }
        return prefix;
      }
    }
;
    profilesComponent.setComponent(profilesCompletionProvider.createEditor(project));
    goalsComponent.setComponent(new MavenArgumentsCompletionProvider(project).createEditor(project));
  }
  setAnchor(profilesComponent.getLabel());
}
