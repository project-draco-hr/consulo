{
  final FixedSizeButton showProjectTreeButton=new FixedSizeButton();
  showProjectTreeButton.setIcon(AllIcons.Actions.Module);
  showProjectTreeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(project);
      List<MavenProject> projectList=projectsManager.getProjects();
      if (projectList.isEmpty())       return;
      MavenProject[] projects=projectList.toArray(new MavenProject[projectList.size()]);
      Arrays.sort(projects,new MavenProjectNamer.MavenProjectComparator());
      Map<MavenProject,DefaultMutableTreeNode> projectsToNode=new HashMap<MavenProject,DefaultMutableTreeNode>();
      for (      MavenProject mavenProject : projects) {
        projectsToNode.put(mavenProject,new DefaultMutableTreeNode(mavenProject));
      }
      DefaultMutableTreeNode root=new DefaultMutableTreeNode();
      for (      MavenProject mavenProject : projects) {
        DefaultMutableTreeNode parent;
        MavenProject aggregator=projectsManager.findAggregator(mavenProject);
        if (aggregator != null) {
          parent=projectsToNode.get(aggregator);
        }
 else {
          parent=root;
        }
        parent.add(projectsToNode.get(mavenProject));
      }
      final Map<MavenProject,String> projectsNameMap=MavenProjectNamer.generateNameMap(projectList);
      final JTree projectTree=new Tree(root);
      projectTree.setRootVisible(false);
      projectTree.setCellRenderer(new NodeRenderer(){
        @Override public void customizeCellRenderer(        JTree tree,        Object value,        boolean selected,        boolean expanded,        boolean leaf,        int row,        boolean hasFocus){
          if (value instanceof DefaultMutableTreeNode) {
            MavenProject mavenProject=(MavenProject)((DefaultMutableTreeNode)value).getUserObject();
            value=projectsNameMap.get(mavenProject);
          }
          super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
        }
      }
);
      final Ref<JBPopup> popupRef=new Ref<JBPopup>();
      Runnable clickCallBack=new Runnable(){
        @Override public void run(){
          TreePath path=projectTree.getSelectionPath();
          if (path == null)           return;
          Object lastPathComponent=path.getLastPathComponent();
          if (!(lastPathComponent instanceof DefaultMutableTreeNode))           return;
          Object object=((DefaultMutableTreeNode)lastPathComponent).getUserObject();
          if (object == null)           return;
          workingDirComponent.getComponent().setText(((MavenProject)object).getDirectory());
          popupRef.get().closeOk(null);
        }
      }
;
      JBPopup popup=new PopupChooserBuilder(projectTree).setTitle("Select maven project").setItemChoosenCallback(clickCallBack).setAutoselectOnMouseMove(true).setCloseOnEnter(false).createPopup();
      popupRef.set(popup);
      popup.showUnderneathOf(showProjectTreeButton);
    }
  }
);
  myWorkingDirectoryPanel.add(showProjectTreeButton,BorderLayout.EAST);
}
