{
  PsiMethod prevBaseMethod=PsiTreeUtil.getPrevSiblingOfType(baseMethod,PsiMethod.class);
  while (prevBaseMethod != null) {
    String name=prevBaseMethod.isConstructor() ? aClass.getName() : prevBaseMethod.getName();
    if (name != null) {
      MethodSignature signature=MethodSignatureUtil.createMethodSignature(name,prevBaseMethod.getParameterList(),prevBaseMethod.getTypeParameterList(),substitutor);
      PsiMethod prevMethod=MethodSignatureUtil.findMethodBySignature(aClass,signature,false);
      if (prevMethod != null) {
        return prevMethod.getNextSibling();
      }
    }
    prevBaseMethod=PsiTreeUtil.getPrevSiblingOfType(prevBaseMethod,PsiMethod.class);
  }
  PsiMethod nextBaseMethod=(PsiMethod)PsiTreeUtil.getNextSiblingOfType(baseMethod,PsiMethod.class);
  while (nextBaseMethod != null) {
    String name=nextBaseMethod.isConstructor() ? aClass.getName() : nextBaseMethod.getName();
    if (name != null) {
      MethodSignature signature=MethodSignatureUtil.createMethodSignature(name,nextBaseMethod.getParameterList(),nextBaseMethod.getTypeParameterList(),substitutor);
      PsiMethod nextMethod=MethodSignatureUtil.findMethodBySignature(aClass,signature,false);
      if (nextMethod != null) {
        return nextMethod;
      }
    }
    nextBaseMethod=(PsiMethod)PsiTreeUtil.getNextSiblingOfType(nextBaseMethod,PsiMethod.class);
  }
  return null;
}
