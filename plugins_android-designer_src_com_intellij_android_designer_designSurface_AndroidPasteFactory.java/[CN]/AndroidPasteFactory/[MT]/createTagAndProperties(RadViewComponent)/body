{
  final Element properties=myProperties.get(component);
  if (properties != null) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        XmlTag xmlTag=component.getTag();
        if (xmlTag == null) {
          Language language=StdFileTypes.XML.getLanguage();
          xmlTag=XmlElementFactory.getInstance(myProject).createTagFromText("\n" + component.getMetaModel().getCreation(),language);
          RadViewComponent parent=(RadViewComponent)component.getParent();
          XmlTag parentTag=parent.getTag();
          XmlTag nextTag=null;
          List<RadComponent> children=parent.getChildren();
          int index=children.indexOf(component) + 1;
          if (index < children.size()) {
            nextTag=((RadViewComponent)children.get(index)).getTag();
          }
          if (nextTag == null) {
            xmlTag=parentTag.addSubTag(xmlTag,false);
          }
 else {
            xmlTag=(XmlTag)parentTag.addBefore(xmlTag,nextTag);
          }
        }
        for (        XmlAttribute attribute : xmlTag.getAttributes()) {
          attribute.delete();
        }
        for (        Object object : properties.getAttributes()) {
          Attribute attribute=(Attribute)object;
          xmlTag.setAttribute(attribute.getName(),attribute.getValue());
        }
        for (        Object object : properties.getChildren()) {
          Element element=(Element)object;
          String namespace=element.getName();
          for (          Object child : element.getAttributes()) {
            Attribute attribute=(Attribute)child;
            xmlTag.setAttribute(namespace + ":" + attribute.getName(),attribute.getValue());
          }
        }
      }
    }
);
  }
  if (component.getProperties() == null) {
    PropertyParser propertyParser=component.getRoot().getClientProperty(PropertyParser.KEY);
    propertyParser.load(component);
  }
  for (  RadComponent child : component.getChildren()) {
    createTagAndProperties((RadViewComponent)child);
  }
}
