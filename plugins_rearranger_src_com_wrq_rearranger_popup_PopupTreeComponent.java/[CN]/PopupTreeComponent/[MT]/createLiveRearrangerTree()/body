{
  DefaultMutableTreeNode top=createAllNodes();
  final PopupTree tree=new PopupTree(top,this);
  tree.putClientProperty("JTree.lineStyle","Angled");
  tree.setRootVisible(true);
  tree.setShowsRootHandles(true);
  tree.setRowHeight(0);
  tree.setCellRenderer(new JavaObjectRenderer());
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  tree.setEditable(false);
  tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      LOG.debug("selection changed as follows (" + e.getPaths().length + " path(s)):");
      TreePath lastPathAdded=null;
      int i=0;
      for (      TreePath path : e.getPaths()) {
        if (e.isAddedPath(path)) {
          lastPathAdded=path;
        }
        LOG.debug("path " + i + (e.isAddedPath(path) ? " added:" : " removed:")+ path);
        i++;
      }
      if (lastPathAdded == null) {
        return;
      }
      DefaultMutableTreeNode lastNodeAdded=null;
      lastNodeAdded=(DefaultMutableTreeNode)lastPathAdded.getLastPathComponent();
      boolean haveSameParent=true;
      for (      TreePath path : tree.getSelectionPaths()) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
        if (lastNodeAdded == null) {
          lastNodeAdded=node;
        }
        if (node != lastNodeAdded) {
          if (tree.haveCommonAncestors(lastNodeAdded,node) < 0) {
            haveSameParent=false;
            break;
          }
        }
      }
      if (!haveSameParent) {
        tree.getSelectionModel().removeTreeSelectionListener(this);
        tree.clearSelection();
        tree.addSelectionPath(lastPathAdded);
        tree.getSelectionModel().addTreeSelectionListener(this);
      }
    }
  }
);
  AbstractAction moveUpAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      LOG.debug("moveUpAction, " + tree.getSelectionPaths().length + " paths in selection");
      if (tree.getSelectionPaths().length == 0) {
        return;
      }
      int selectionRow=Integer.MAX_VALUE;
      for (      TreePath path : tree.getSelectionPaths()) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
        int nodeIndex=node.getParent().getIndex(node);
        if (selectionRow > nodeIndex) {
          selectionRow=nodeIndex;
        }
      }
      if (selectionRow > 0) {
        selectionRow--;
      }
      tree.moveSelection(selectionRow,true);
    }
  }
;
  AbstractAction moveDownAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      LOG.debug("moveDownAction, " + tree.getSelectionPaths().length + " paths in selection");
      if (tree.getSelectionPaths().length == 0) {
        return;
      }
      int selectionRow=-1;
      for (      TreePath path : tree.getSelectionPaths()) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
        final DefaultMutableTreeNode parent=((DefaultMutableTreeNode)node.getParent());
        int nodeIndex=parent.getIndex(node);
        if (selectionRow < nodeIndex) {
          selectionRow=nodeIndex;
        }
      }
      selectionRow++;
      tree.moveSelection(selectionRow,false);
    }
  }
;
  AbstractAction enterKeyAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      LOG.debug("exit with enter key");
      tree.setExitedWithEnterKey(true);
      for (Container p=tree.getParent(); p != null; p=p.getParent()) {
        if (p instanceof JDialog) {
          p.setVisible(false);
        }
      }
    }
  }
;
  tree.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"enterKeyAction");
  tree.getActionMap().put("enterKeyAction",enterKeyAction);
  tree.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.SHIFT_DOWN_MASK | InputEvent.CTRL_DOWN_MASK),"moveUpAction");
  tree.getActionMap().put("moveUpAction",moveUpAction);
  tree.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,InputEvent.SHIFT_DOWN_MASK | InputEvent.CTRL_DOWN_MASK),"moveDownAction");
  tree.getActionMap().put("moveDownAction",moveDownAction);
  tree.setSelectionPath(tree.getPathForRow(0));
  return tree;
}
