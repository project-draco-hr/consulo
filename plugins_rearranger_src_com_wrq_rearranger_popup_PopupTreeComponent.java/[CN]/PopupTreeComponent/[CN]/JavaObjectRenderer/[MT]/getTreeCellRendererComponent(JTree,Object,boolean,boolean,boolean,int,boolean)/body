{
  Object userObject=null;
  if (value instanceof DefaultMutableTreeNode) {
    userObject=((DefaultMutableTreeNode)value).getUserObject();
  }
  if (userObject instanceof FilePopupEntry) {
    FilePopupEntry entry=(FilePopupEntry)userObject;
    final String iconTypeName=entry.getTypeIconName();
    final String[] iconNames=entry.getAdditionalIconNames();
    final JLabel textLabel=entry.getPopupEntryText(settings);
    JPanel panel=new JPanel(new GridBagLayout()){
      public void paint(      Graphics g){
        if (sel && !hasFocus) {
          Color bgColor=getBackground();
          setBackground(Color.WHITE);
          super.paint(g);
          setBackground(bgColor);
          Color bsColor=getBorderSelectionColor();
          if (bsColor != null) {
            g.setColor(bsColor);
            if (getComponentOrientation().isLeftToRight()) {
              g.drawRect(0,0,getWidth() - 1,getHeight() - 1);
            }
 else {
              g.drawRect(0,0,getWidth() - 1,getHeight() - 1);
            }
          }
        }
 else {
          super.paint(g);
        }
      }
    }
;
    Constraints constraints=new Constraints(GridBagConstraints.NORTHWEST);
    constraints.weightedLastRow();
    Icon typeIcon=findIcon(iconTypeName == null ? "fileTypes/unknown" : iconTypeName);
    panel.setBackground(Color.WHITE);
    if (sel) {
      panel.setBackground(new Color(181,190,214));
    }
 else {
      textLabel.setBackground(Color.WHITE);
    }
    if (typeIcon != null) {
      JLabel typeLabel=new JLabel(typeIcon);
      panel.add(typeLabel,constraints.nextCol());
    }
    if (iconNames != null) {
      for (      String iconName : iconNames) {
        Icon addlIcon=findIcon(iconName);
        JLabel plLabel=new JLabel(addlIcon);
        panel.add(plLabel,constraints.nextCol());
      }
    }
    constraints.insets=new Insets(0,3,0,0);
    panel.add(textLabel,constraints.lastCol());
    panel.repaint();
    return panel;
  }
  LOG.debug("getTreeCellRendererComponent: userObject not IFilePopupEntry;" + userObject);
  return super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
}
