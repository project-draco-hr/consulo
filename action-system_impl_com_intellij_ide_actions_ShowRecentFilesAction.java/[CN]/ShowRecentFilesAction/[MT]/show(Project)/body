{
  final DefaultListModel model=new DefaultListModel();
  VirtualFile[] selectedFiles=FileEditorManager.getInstance(project).getSelectedFiles();
  VirtualFile[] files=EditorHistoryManager.getInstance(project).getFiles();
  FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
  for (int i=files.length - 1; i >= 0; i--) {
    VirtualFile file=files[i];
    if (ArrayUtil.find(selectedFiles,file) != 0 && editorProviderManager.getProviders(project,file).length > 0) {
      model.addElement(file);
    }
  }
  final JList list=new JList(model);
  list.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        int index=list.getSelectedIndex();
        if (index == -1 || index >= list.getModel().getSize()) {
          return;
        }
        Object[] values=list.getSelectedValues();
        for (int i=0; i < values.length; i++) {
          VirtualFile file=(VirtualFile)values[i];
          model.removeElement(file);
          if (model.getSize() > 0) {
            if (model.getSize() == index) {
              list.setSelectedIndex(model.getSize() - 1);
            }
 else             if (model.getSize() > index) {
              list.setSelectedIndex(index);
            }
          }
 else {
            list.clearSelection();
          }
          EditorHistoryManager.getInstance(project).removeFile(file);
        }
      }
    }
  }
);
  Runnable runnable=new Runnable(){
    public void run(){
      Object[] values=list.getSelectedValues();
      for (int i=0; i < values.length; i++) {
        VirtualFile file=(VirtualFile)values[i];
        FileEditorManager.getInstance(project).openFile(file,true);
      }
    }
  }
;
  if (list.getModel().getSize() == 0) {
    list.clearSelection();
  }
  new MyListSpeedSearch(list);
  list.setCellRenderer(new RecentFilesRenderer(project));
  JBPopupFactory.getInstance().createListPopupBuilder().setList(list).setTitle(IdeBundle.message("title.popup.recent.files")).setItemChoosenCallback(runnable).addAdditionalChooseKeystroke(getAdditionalSelectKeystroke()).createPopup().showCenteredInCurrentWindow(project);
}
