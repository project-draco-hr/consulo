{
  final ChannelFactory channelFactory=new NioServerSocketChannelFactory(myPooledThreadExecutor,myPooledThreadExecutor,1);
  final SimpleChannelUpstreamHandler channelRegistrar=new SimpleChannelUpstreamHandler(){
    public void channelOpen(    ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      myAllOpenChannels.add(e.getChannel());
      super.channelOpen(ctx,e);
    }
    @Override public void channelClosed(    ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      myAllOpenChannels.remove(e.getChannel());
      super.channelClosed(ctx,e);
    }
  }
;
  ChannelPipelineFactory pipelineFactory=new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(channelRegistrar,new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),myMessageDispatcher);
    }
  }
;
  final ServerBootstrap bootstrap=new ServerBootstrap(channelFactory);
  bootstrap.setPipelineFactory(pipelineFactory);
  bootstrap.setOption("child.tcpNoDelay",true);
  bootstrap.setOption("child.keepAlive",true);
  final int listenPort=NetUtils.findAvailableSocketPort();
  final Channel serverChannel=bootstrap.bind(new InetSocketAddress(listenPort));
  myAllOpenChannels.add(serverChannel);
  return listenPort;
}
