{
  Sdk projectJdk=null;
  JavaSdkVersion sdkVersion=null;
  int sdkMinorVersion=0;
  final Set<Sdk> candidates=new HashSet<Sdk>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    final Sdk sdk=ModuleRootManager.getInstance(module).getSdk();
    if (sdk != null && sdk.getSdkType() instanceof JavaSdk) {
      candidates.add(sdk);
    }
  }
  for (  Sdk candidate : candidates) {
    final String vs=candidate.getVersionString();
    if (vs != null) {
      final JavaSdkVersion candidateVersion=((JavaSdk)candidate.getSdkType()).getVersion(vs);
      if (candidateVersion != null) {
        final int candidateMinorVersion=getMinorVersion(vs);
        if (projectJdk == null) {
          sdkVersion=candidateVersion;
          sdkMinorVersion=candidateMinorVersion;
          projectJdk=candidate;
        }
 else {
          final int result=candidateVersion.compareTo(sdkVersion);
          if (result > 0 || (result == 0 && candidateMinorVersion > sdkMinorVersion)) {
            sdkVersion=candidateVersion;
            sdkMinorVersion=candidateMinorVersion;
            projectJdk=candidate;
          }
        }
      }
    }
  }
  final Sdk internalJdk=JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk();
  if (projectJdk == null || sdkVersion == null || !sdkVersion.isAtLeast(JavaSdkVersion.JDK_1_6)) {
    projectJdk=internalJdk;
  }
  final String compilerPath;
  if (projectJdk.equals(internalJdk)) {
    final JavaCompiler systemCompiler=ToolProvider.getSystemJavaCompiler();
    if (systemCompiler == null) {
      throw new ExecutionException("No system java compiler is provided by the JRE. Make sure tools.jar is present in IntelliJ IDEA classpath.");
    }
    compilerPath=ClasspathBootstrap.getResourcePath(systemCompiler.getClass());
  }
 else {
    compilerPath=((JavaSdk)projectJdk.getSdkType()).getToolsPath(projectJdk);
    if (compilerPath == null) {
      throw new ExecutionException("Cannot determine path to 'tools.jar' library for " + projectJdk.getName() + " ("+ projectJdk.getHomePath()+ ")");
    }
  }
  final CompilerWorkspaceConfiguration config=CompilerWorkspaceConfiguration.getInstance(project);
  final GeneralCommandLine cmdLine=new GeneralCommandLine();
  final String vmExecutablePath=((JavaSdkType)projectJdk.getSdkType()).getVMExecutablePath(projectJdk);
  cmdLine.setExePath(vmExecutablePath);
  int heapSize=config.COMPILER_PROCESS_HEAP_SIZE;
  if (heapSize == CompilerWorkspaceConfiguration.DEFAULT_COMPILE_PROCESS_HEAP_SIZE) {
    heapSize=Math.max(heapSize,JavacConfiguration.getOptions(project,JavacConfiguration.class).MAXIMUM_HEAP_SIZE);
  }
  final int xms=heapSize / 2;
  if (xms > 32) {
    cmdLine.addParameter("-Xms" + xms + "m");
  }
  cmdLine.addParameter("-Xmx" + heapSize + "m");
  if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) {
    cmdLine.addParameter("-d32");
  }
  cmdLine.addParameter("-Djava.awt.headless=true");
  if (IS_UNIT_TEST_MODE) {
    cmdLine.addParameter("-Dtest.mode=true");
  }
  cmdLine.addParameter("-Djdt.compiler.useSingleThread=true");
  final String shouldGenerateIndex=System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION);
  if (shouldGenerateIndex != null) {
    cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "="+ shouldGenerateIndex);
  }
  cmdLine.addParameter("-D" + GlobalOptions.COMPILE_PARALLEL_OPTION + "="+ Boolean.toString(config.PARALLEL_COMPILATION));
  final String additionalOptions=config.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS;
  if (!StringUtil.isEmpty(additionalOptions)) {
    final StringTokenizer tokenizer=new StringTokenizer(additionalOptions," ",false);
    while (tokenizer.hasMoreTokens()) {
      cmdLine.addParameter(tokenizer.nextToken());
    }
  }
  final int debugPort=Registry.intValue("compiler.process.debug.port");
  if (debugPort > 0) {
    cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError");
    cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort);
  }
  if (Registry.is("compiler.process.use.memory.temp.cache")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION);
  }
  if (Registry.is("compiler.process.use.external.javac")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_EXTERNAL_JAVAC_OPTION);
  }
  final String host=NetUtils.getLocalHostString();
  cmdLine.addParameter("-D" + GlobalOptions.HOSTNAME_OPTION + "="+ host);
  String[] propertyNames={"user.language","user.country","user.region"};
  for (  String name : propertyNames) {
    final String value=System.getProperty(name);
    if (value != null) {
      cmdLine.addParameter("-D" + name + "="+ value);
    }
  }
  final List<String> cp=ClasspathBootstrap.getBuildProcessApplicationClasspath();
  cp.add(compilerPath);
  cp.addAll(myClasspathManager.getCompileServerPluginsClasspath(project));
  cmdLine.addParameter("-classpath");
  cmdLine.addParameter(classpathToString(cp));
  cmdLine.addParameter(BuildMain.class.getName());
  cmdLine.addParameter(host);
  cmdLine.addParameter(Integer.toString(port));
  cmdLine.addParameter(sessionId.toString());
  final File workDirectory=getBuildSystemDirectory();
  workDirectory.mkdirs();
  ensureLogConfigExists(workDirectory);
  cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()));
  cmdLine.setWorkDirectory(workDirectory);
  return cmdLine.createProcess();
}
