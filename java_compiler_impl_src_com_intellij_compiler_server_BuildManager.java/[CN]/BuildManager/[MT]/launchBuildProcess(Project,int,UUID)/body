{
  final Sdk internalJdk=JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk();
  Sdk projectJdk=internalJdk;
  final String versionString=projectJdk.getVersionString();
  JavaSdkVersion sdkVersion=versionString != null ? ((JavaSdk)projectJdk.getSdkType()).getVersion(versionString) : null;
  int sdkMinorVersion=getMinorVersion(versionString);
  if (sdkVersion != null) {
    final Set<Sdk> candidates=new HashSet<Sdk>();
    for (    Module module : ModuleManager.getInstance(project).getModules()) {
      final Sdk sdk=ModuleRootManager.getInstance(module).getSdk();
      if (sdk != null && sdk.getSdkType() instanceof JavaSdk) {
        candidates.add(sdk);
      }
    }
    for (    Sdk candidate : candidates) {
      final String vs=candidate.getVersionString();
      if (vs != null) {
        final JavaSdkVersion candidateVersion=((JavaSdk)candidate.getSdkType()).getVersion(vs);
        if (candidateVersion != null) {
          final int candidateMinorVersion=getMinorVersion(vs);
          final int result=candidateVersion.compareTo(sdkVersion);
          if (result > 0 || (result == 0 && candidateMinorVersion > sdkMinorVersion)) {
            sdkVersion=candidateVersion;
            sdkMinorVersion=candidateMinorVersion;
            projectJdk=candidate;
          }
        }
      }
    }
  }
  final File compilerPath;
  if (projectJdk.equals(internalJdk)) {
    final JavaCompiler systemCompiler=ToolProvider.getSystemJavaCompiler();
    if (systemCompiler == null) {
      throw new ExecutionException("No system java compiler is provided by the JRE. Make sure tools.jar is present in IntelliJ IDEA classpath.");
    }
    compilerPath=ClasspathBootstrap.getResourcePath(systemCompiler.getClass());
  }
 else {
    final String path=((JavaSdk)projectJdk.getSdkType()).getToolsPath(projectJdk);
    if (path == null) {
      throw new ExecutionException("Cannot determine path to 'tools.jar' library for " + projectJdk.getName() + " ("+ projectJdk.getHomePath()+ ")");
    }
    compilerPath=new File(path);
  }
  final GeneralCommandLine cmdLine=new GeneralCommandLine();
  final String vmExecutablePath=((JavaSdkType)projectJdk.getSdkType()).getVMExecutablePath(projectJdk);
  cmdLine.setExePath(vmExecutablePath);
  cmdLine.addParameter("-XX:MaxPermSize=150m");
  cmdLine.addParameter("-XX:ReservedCodeCacheSize=64m");
  final int heapSize=Registry.intValue("compiler.process.heap.size");
  final int xms=heapSize / 2;
  if (xms > 32) {
    cmdLine.addParameter("-Xms" + xms + "m");
  }
  cmdLine.addParameter("-Xmx" + heapSize + "m");
  if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) {
    cmdLine.addParameter("-d32");
  }
  cmdLine.addParameter("-Djava.awt.headless=true");
  if (IS_UNIT_TEST_MODE) {
    cmdLine.addParameter("-Dtest.mode=true");
  }
  final String shouldGenerateIndex=System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION);
  if (shouldGenerateIndex != null) {
    cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "="+ shouldGenerateIndex);
  }
  final String additionalOptions=Registry.stringValue("compiler.process.vm.options");
  if (!StringUtil.isEmpty(additionalOptions)) {
    final StringTokenizer tokenizer=new StringTokenizer(additionalOptions," ",false);
    while (tokenizer.hasMoreTokens()) {
      cmdLine.addParameter(tokenizer.nextToken());
    }
  }
  final int debugPort=Registry.intValue("compiler.process.debug.port");
  if (debugPort > 0) {
    cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError");
    cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort);
  }
  if (Registry.is("compiler.process.use.memory.temp.cache")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION);
  }
  if (Registry.is("compiler.process.use.external.javac")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_EXTERNAL_JAVAC_OPTION);
  }
  final String host=NetUtils.getLocalHostString();
  cmdLine.addParameter("-D" + GlobalOptions.HOSTNAME_OPTION + "="+ host);
  final String lang=System.getProperty("user.language");
  if (lang != null) {
    cmdLine.addParameter("-Duser.language=" + lang);
  }
  final String country=System.getProperty("user.country");
  if (country != null) {
    cmdLine.addParameter("-Duser.country=" + country);
  }
  final String region=System.getProperty("user.region");
  if (region != null) {
    cmdLine.addParameter("-Duser.region=" + region);
  }
  cmdLine.addParameter("-classpath");
  final List<File> cp=ClasspathBootstrap.getBuildProcessApplicationClasspath();
  cp.add(compilerPath);
  cp.addAll(myClasspathManager.getCompileServerPluginsClasspath());
  cmdLine.addParameter(classpathToString(cp));
  cmdLine.addParameter(BuildMain.class.getName());
  cmdLine.addParameter(host);
  cmdLine.addParameter(Integer.toString(port));
  cmdLine.addParameter(sessionId.toString());
  final File workDirectory=getBuildSystemDirectory();
  workDirectory.mkdirs();
  ensureLogConfigExists(workDirectory);
  cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()));
  cmdLine.setWorkDirectory(workDirectory);
  return cmdLine.createProcess();
}
