{
  final Map<String,String> data=new HashMap<String,String>();
  for (  Map.Entry<String,String> entry : PathMacrosImpl.getGlobalSystemMacros().entrySet()) {
    data.put(entry.getKey(),FileUtil.toSystemIndependentName(entry.getValue()));
  }
  final PathMacros pathVars=PathMacros.getInstance();
  for (  String name : pathVars.getAllMacroNames()) {
    final String path=pathVars.getValue(name);
    if (path != null) {
      data.put(name,FileUtil.toSystemIndependentName(path));
    }
  }
  final List<GlobalLibrary> globals=new ArrayList<GlobalLibrary>();
  fillSdks(globals);
  fillGlobalLibraries(globals);
  final CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.Builder cmdBuilder=CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.newBuilder();
  cmdBuilder.setGlobalOptionsPath(PathManager.getOptionsPath());
  if (!data.isEmpty()) {
    for (    Map.Entry<String,String> entry : data.entrySet()) {
      final String var=entry.getKey();
      final String value=entry.getValue();
      if (var != null && value != null) {
        cmdBuilder.addPathVariable(CmdlineProtoUtil.createPair(var,value));
      }
    }
  }
  if (!globals.isEmpty()) {
    for (    GlobalLibrary lib : globals) {
      final CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.GlobalLibrary.Builder libBuilder=CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.GlobalLibrary.newBuilder();
      libBuilder.setName(lib.getName()).addAllPath(lib.getPaths());
      if (lib instanceof SdkLibrary) {
        final SdkLibrary sdk=(SdkLibrary)lib;
        libBuilder.setHomePath(sdk.getHomePath());
        libBuilder.setTypeName(sdk.getTypeName());
        final String additional=sdk.getAdditionalDataXml();
        if (additional != null) {
          libBuilder.setAdditionalDataXml(additional);
        }
        final String version=sdk.getVersion();
        if (version != null) {
          libBuilder.setVersion(version);
        }
      }
      cmdBuilder.addGlobalLibrary(libBuilder.build());
    }
  }
  final String defaultCharset=EncodingManager.getInstance().getDefaultCharsetName();
  if (!StringUtil.isEmpty(defaultCharset)) {
    cmdBuilder.setGlobalEncoding(defaultCharset);
  }
  final String ignoredFilesList=FileTypeManager.getInstance().getIgnoredFilesList();
  cmdBuilder.setIgnoredFilesPatterns(ignoredFilesList);
  return cmdBuilder.build();
}
