{
  editFileInCommand(myProject,myFiles.get("a.txt"),"123");
  VirtualFile in1=myChildFiles.get("in1.txt");
  editFileInCommand(myProject,in1,"321");
  VirtualFile in2=myChildFiles.get("in2.txt");
  editFileInCommand(myProject,in2,"321*");
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final LocalChangeList localChangeList=myChangeListManager.addChangeList("new","new");
  Change change1=myChangeListManager.getChange(in1);
  Change change2=myChangeListManager.getChange(in2);
  myChangeListManager.moveChangesTo(localChangeList,change1,change2);
  myDirtyScopeManager.filesDirty(Collections.singletonList(in1),Collections.singletonList(myRepo.getVFRootDir()));
  myChangeListManager.ensureUpToDate(false);
  LocalChangeList list=myChangeListManager.getChangeList(in1);
  Assert.assertNotNull(list);
  Assert.assertEquals("new",list.getName());
  LocalChangeList list2=myChangeListManager.getChangeList(in2);
  Assert.assertNotNull(list2);
  Assert.assertEquals("new",list2.getName());
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  list=myChangeListManager.getChangeList(in1);
  Assert.assertNotNull(list);
  Assert.assertEquals("new",list.getName());
  list2=myChangeListManager.getChangeList(in2);
  Assert.assertNotNull(list2);
  Assert.assertEquals("new",list2.getName());
}
