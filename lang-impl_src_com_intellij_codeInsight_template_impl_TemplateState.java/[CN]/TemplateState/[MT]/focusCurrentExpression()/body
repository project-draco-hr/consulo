{
  if (isFinished()) {
    return;
  }
  PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
  final int currentSegmentNumber=getCurrentSegmentNumber();
  lockSegmentAtTheSameOffsetIfAny();
  if (currentSegmentNumber < 0)   return;
  final int start=mySegments.getSegmentStart(currentSegmentNumber);
  final int end=mySegments.getSegmentEnd(currentSegmentNumber);
  myEditor.getCaretModel().moveToOffset(end);
  myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  myEditor.getSelectionModel().removeSelection();
  myEditor.getSelectionModel().setSelection(start,end);
  Expression expressionNode=myTemplate.getExpressionAt(myCurrentVariableNumber);
  final ExpressionContext context=createExpressionContext(start);
  final LookupItem[] lookupItems=expressionNode.calculateLookupItems(context);
  final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  if (lookupItems != null && lookupItems.length > 0) {
    if (((TemplateManagerImpl)TemplateManager.getInstance(myProject)).shouldSkipInTests()) {
      final String s=lookupItems[0].getLookupString();
      EditorModificationUtil.insertStringAtCaret(myEditor,s);
      itemSelected(lookupItems[0],psiFile,currentSegmentNumber,' ');
    }
 else {
      lookupItems[0].setPriority(Integer.MAX_VALUE);
      runLookup(currentSegmentNumber,lookupItems,psiFile);
    }
  }
 else {
    Result result=expressionNode.calculateResult(context);
    if (result != null) {
      result.handleFocused(psiFile,myDocument,mySegments.getSegmentStart(currentSegmentNumber),mySegments.getSegmentEnd(currentSegmentNumber));
    }
  }
  focusCurrentHighlighter(true);
}
