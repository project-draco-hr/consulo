{
  if (closure != null && closure.getParent() instanceof GrMethodCallExpression) {
    GrMethodCallExpression methodCall=(GrMethodCallExpression)closure.getParent();
    String methodName=findMethodName(methodCall);
    PsiType type=findQualifierType(methodCall);
    GrParameter[] params=closure.getParameters();
    if (type == null) {
      return null;
    }
    if ("each".equals(methodName) || "every".equals(methodName) || "collect".equals(methodName)|| "find".equals(methodName)|| "findAll".equals(methodName)|| "findIndexOf".equals(methodName)) {
      PsiType res=findTypeForCollection(type,factory,context);
      if (closure.getParameters().length <= 1 && res != null) {
        return res;
      }
      if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
        if (closure.getParameters().length <= 1) {
          return getEntryForMap(type,factory,context);
        }
        if (closure.getParameters().length == 2) {
          if (argumentName.equals(params[0].getName())) {
            return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
          }
          return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
        }
      }
    }
 else     if ("with".equals(methodName) && closure.getParameters().length <= 1) {
      return type;
    }
 else     if ("eachWithIndex".equals(methodName)) {
      PsiType res=findTypeForCollection(type,factory,context);
      if (closure.getParameters().length == 2 && res != null) {
        if (argumentName.equals(params[0].getName())) {
          return res;
        }
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
      }
      if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
        if (params.length == 2) {
          if (argumentName.equals(params[0].getName())) {
            return getEntryForMap(type,factory,context);
          }
          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
        }
        if (params.length == 3) {
          if (argumentName.equals(params[0].getName())) {
            return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,0,true);
          }
          if (argumentName.equals(params[1].getName())) {
            return PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_UTIL_MAP,1,true);
          }
          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER,context);
        }
      }
    }
 else     if ("inject".equals(methodName) && params.length == 2) {
      if (argumentName.equals(params[0].getName())) {
        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT,context);
      }
      PsiType res=findTypeForCollection(type,factory,context);
      if (res != null) {
        return res;
      }
      if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
        return getEntryForMap(type,factory,context);
      }
    }
  }
  return null;
}
