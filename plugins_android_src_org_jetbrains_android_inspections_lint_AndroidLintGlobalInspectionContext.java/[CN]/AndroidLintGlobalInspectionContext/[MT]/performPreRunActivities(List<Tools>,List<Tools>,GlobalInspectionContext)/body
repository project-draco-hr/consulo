{
  final Project project=context.getProject();
  if (!ProjectFacetManager.getInstance(project).hasFacets(AndroidFacet.ID)) {
    return;
  }
  final List<Issue> issues=AndroidLintExternalAnnotator.getIssuesFromInspections(project,null);
  if (issues.size() == 0) {
    return;
  }
  final Map<Issue,Map<File,List<ProblemData>>> problemMap=new HashMap<Issue,Map<File,List<ProblemData>>>();
  final Set<VirtualFile> allContentRoots=new HashSet<VirtualFile>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (AndroidFacet.getInstance(module) != null) {
      final VirtualFile[] contentRoots=ModuleRootManager.getInstance(module).getContentRoots();
      Collections.addAll(allContentRoots,contentRoots);
    }
  }
  final File[] ioContentRoots=toIoFiles(allContentRoots);
  final AnalysisScope scope=context.getRefManager().getScope();
  final LintClient client=new MyLintClient(project,problemMap,scope,issues);
  final LintDriver lint=new LintDriver(new BuiltinIssueRegistry(),client);
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    ProgressWrapper.unwrap(indicator).setText("Running Android Lint");
  }
  lint.analyze(Arrays.asList(ioContentRoots),EnumSet.of(Scope.JAVA_FILE,Scope.MANIFEST,Scope.PROGUARD_FILE,Scope.ALL_JAVA_FILES,Scope.ALL_RESOURCE_FILES,Scope.RESOURCE_FILE));
  myResults=problemMap;
}
