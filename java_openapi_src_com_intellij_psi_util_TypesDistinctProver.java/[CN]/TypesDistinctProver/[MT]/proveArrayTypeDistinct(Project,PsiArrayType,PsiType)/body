{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final GlobalSearchScope searchScope=GlobalSearchScope.allScope(project);
  final Set<PsiClass> possibleClasses=new HashSet<PsiClass>();
  possibleClasses.add(facade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE,searchScope));
  possibleClasses.add(facade.findClass(CommonClassNames.JAVA_LANG_CLONEABLE,searchScope));
  possibleClasses.add(facade.findClass(CommonClassNames.JAVA_LANG_OBJECT,searchScope));
  if (type.getArrayDimensions() == bound.getArrayDimensions()) {
    final PsiType componentType=type.getComponentType();
    final PsiType boundComponentType=((PsiArrayType)bound).getComponentType();
    if (boundComponentType instanceof PsiClassType && componentType instanceof PsiClassType) {
      return proveExtendsBoundsDistinct(boundComponentType,componentType,((PsiClassType)boundComponentType).resolve(),((PsiClassType)componentType).resolve());
    }
 else {
      return !bound.equals(type);
    }
  }
 else   if (bound.getArrayDimensions() + 1 == type.getArrayDimensions() && bound.getDeepComponentType() instanceof PsiClassType) {
    return !possibleClasses.contains(((PsiClassType)bound.getDeepComponentType()).resolve());
  }
 else   if (bound.getArrayDimensions() == type.getArrayDimensions() + 1 && type.getDeepComponentType() instanceof PsiClassType) {
    return !possibleClasses.contains(((PsiClassType)type.getDeepComponentType()).resolve());
  }
 else   if (bound instanceof PsiClassType) {
    return !possibleClasses.contains(((PsiClassType)bound).resolve());
  }
  return true;
}
