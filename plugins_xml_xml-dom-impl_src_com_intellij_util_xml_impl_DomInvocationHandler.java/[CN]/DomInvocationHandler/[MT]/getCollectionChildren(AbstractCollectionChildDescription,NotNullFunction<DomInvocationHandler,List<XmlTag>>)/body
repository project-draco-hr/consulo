{
  if (myStub != null && description.isStubbed()) {
    if (description instanceof DomChildDescriptionImpl) {
      XmlName xmlName=((DomChildDescriptionImpl)description).getXmlName();
      List<DomStub> stubs=myStub.getChildrenByName(xmlName.getLocalName(),xmlName.getNamespaceKey());
      return ContainerUtil.map(stubs,new Function<DomStub,DomElement>(){
        @Override public DomElement fun(        DomStub stub){
          return stub.getOrCreateHandler((DomChildDescriptionImpl)description,myManager).getProxy();
        }
      }
);
    }
 else     if (description instanceof CustomDomChildrenDescriptionImpl) {
      List<DomStub> stubs=myStub.getChildrenStubs();
      return ContainerUtil.mapNotNull(stubs,new NullableFunction<DomStub,DomElement>(){
        @Nullable @Override public DomElement fun(        DomStub stub){
          if (stub instanceof ElementStub && ((ElementStub)stub).isCustom()) {
            EvaluatedXmlName name=new DummyEvaluatedXmlName(stub.getName(),"");
            return new CollectionElementInvocationHandler(name,(CustomDomChildrenDescriptionImpl)description,myManager,(ElementStub)stub).getProxy();
          }
          return null;
        }
      }
);
    }
  }
  XmlTag tag=getXmlTag();
  if (tag == null)   return Collections.emptyList();
  final List<XmlTag> subTags=tagsGetter.fun(this);
  if (subTags.isEmpty())   return Collections.emptyList();
  List<DomElement> elements=new ArrayList<DomElement>(subTags.size());
  for (  XmlTag subTag : subTags) {
    final SemKey<? extends DomInvocationHandler> key=description instanceof CustomDomChildrenDescription ? DomManagerImpl.DOM_CUSTOM_HANDLER_KEY : DomManagerImpl.DOM_COLLECTION_HANDLER_KEY;
    final DomInvocationHandler semElement=myManager.getSemService().getSemElement(key,subTag);
    if (semElement == null) {
      myManager.getSemService().getSemElement(key,subTag);
      throw new AssertionError("No child for subTag '" + subTag.getName() + "' in tag '"+ tag.getName()+ "' using key "+ key);
    }
 else {
      elements.add(semElement.getProxy());
    }
  }
  return Collections.unmodifiableList(elements);
}
