{
  final CharTable charTable=SharedImplUtil.findCharTableByTree(leafElement);
  ASTNode treePrev=findPreviousWhiteSpace(leafElement,whiteSpaceToken);
  if (treePrev == null) {
    treePrev=getWsCandidate(leafElement);
  }
  if (treePrev != null && treePrev.getText().trim().isEmpty() && treePrev.getElementType() != whiteSpaceToken && treePrev.getTextLength() > 0 && !whiteSpace.isEmpty()) {
    LeafElement whiteSpaceElement=Factory.createSingleLeafElement(treePrev.getElementType(),whiteSpace,charTable,SharedImplUtil.getManagerByTree(leafElement));
    ASTNode treeParent=treePrev.getTreeParent();
    treeParent.replaceChild(treePrev,whiteSpaceElement);
  }
 else {
    LeafElement whiteSpaceElement=Factory.createSingleLeafElement(whiteSpaceToken,whiteSpace,charTable,SharedImplUtil.getManagerByTree(leafElement));
    if (treePrev == null) {
      if (!whiteSpace.isEmpty()) {
        addWhiteSpace(leafElement,whiteSpaceElement);
      }
    }
 else {
      if (!(treePrev.getElementType() == whiteSpaceToken)) {
        if (!whiteSpace.isEmpty()) {
          addWhiteSpace(treePrev,whiteSpaceElement);
        }
      }
 else {
        if (treePrev.getElementType() == whiteSpaceToken) {
          final CompositeElement treeParent=(CompositeElement)treePrev.getTreeParent();
          if (!whiteSpace.isEmpty()) {
            treeParent.replaceChild(treePrev,whiteSpaceElement);
          }
 else {
            treeParent.removeChild(treePrev);
          }
          ASTNode removeCandidate=findPreviousWhiteSpace(whiteSpaceElement,whiteSpaceToken);
          while (textRange != null && removeCandidate != null && removeCandidate.getStartOffset() >= textRange.getStartOffset()) {
            treePrev=findPreviousWhiteSpace(removeCandidate,whiteSpaceToken);
            removeCandidate.getTreeParent().removeChild(removeCandidate);
            removeCandidate=treePrev;
          }
        }
      }
    }
  }
}
