{
  final PsiMethod method=(PsiMethod)result.getElement();
  if (method == null)   return null;
  PsiManager manager=call.getManager();
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(call);
  boolean is15OrHigher=languageLevel.compareTo(LanguageLevel.JDK_1_5) >= 0;
  if (is15OrHigher && GET_CLASS_METHOD.equals(method.getName()) && CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) {
    PsiExpression qualifier=methodExpression.getQualifierExpression();
    PsiType qualifierType=null;
    if (qualifier != null) {
      qualifierType=TypeConversionUtil.erasure(qualifier.getType());
    }
 else {
      ASTNode parent=call.getNode().getTreeParent();
      while (parent != null && parent.getElementType() != JavaElementType.CLASS)       parent=parent.getTreeParent();
      if (parent != null) {
        qualifierType=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType((PsiClass)parent.getPsi());
      }
    }
    if (qualifierType != null) {
      PsiClass javaLangClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.lang.Class",call.getResolveScope());
      if (javaLangClass != null && javaLangClass.getTypeParameters().length == 1) {
        Map<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
        map.put(javaLangClass.getTypeParameters()[0],PsiWildcardType.createExtends(manager,qualifierType));
        PsiSubstitutor substitutor=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createSubstitutor(map);
        final PsiClassType classType=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType(javaLangClass,substitutor,languageLevel);
        final PsiElement parent=call.getParent();
        return parent instanceof PsiReferenceExpression && parent.getParent() instanceof PsiMethodCallExpression ? PsiUtil.captureToplevelWildcards(classType,methodExpression) : classType;
      }
    }
  }
  PsiType ret=method.getReturnType();
  if (ret == null)   return null;
  if (ret instanceof PsiClassType) {
    ret=((PsiClassType)ret).setLanguageLevel(languageLevel);
  }
  if (is15OrHigher) {
    final PsiSubstitutor substitutor=result.getSubstitutor();
    PsiType substitutedReturnType=substitutor.substitute(ret);
    if (substitutedReturnType == null)     return TypeConversionUtil.erasure(ret);
    PsiType lowerBound=PsiType.NULL;
    if (substitutedReturnType instanceof PsiCapturedWildcardType) {
      lowerBound=((PsiCapturedWildcardType)substitutedReturnType).getLowerBound();
    }
 else     if (substitutedReturnType instanceof PsiWildcardType) {
      lowerBound=((PsiWildcardType)substitutedReturnType).getSuperBound();
    }
    if (lowerBound != PsiType.NULL) {
      final PsiClass containingClass=method.getContainingClass();
      final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
      final PsiClass childClass=qualifierExpression != null ? PsiUtil.resolveClassInClassTypeOnly(qualifierExpression.getType()) : null;
      if (containingClass != null && childClass != null) {
        final PsiType typeInChildClassTypeParams=TypeConversionUtil.getSuperClassSubstitutor(containingClass,childClass,PsiSubstitutor.EMPTY).substitute(ret);
        final PsiClass substituted=PsiUtil.resolveClassInClassTypeOnly(typeInChildClassTypeParams);
        if (substituted instanceof PsiTypeParameter) {
          final PsiClassType[] extendsListTypes=substituted.getExtendsListTypes();
          if (extendsListTypes.length == 1) {
            return extendsListTypes[0];
          }
        }
      }
    }
    return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,call);
  }
  return TypeConversionUtil.erasure(ret);
}
