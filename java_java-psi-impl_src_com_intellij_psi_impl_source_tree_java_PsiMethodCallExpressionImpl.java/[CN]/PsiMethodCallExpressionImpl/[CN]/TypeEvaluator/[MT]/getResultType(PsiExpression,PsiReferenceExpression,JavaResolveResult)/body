{
  final PsiMethod method=(PsiMethod)result.getElement();
  if (method == null)   return null;
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(call);
  boolean is15OrHigher=languageLevel.compareTo(LanguageLevel.JDK_1_5) >= 0;
  final PsiType getClassReturnType=PsiTypesUtil.patchMethodGetClassReturnType(call,methodExpression,method,new Condition<IElementType>(){
    @Override public boolean value(    IElementType type){
      return type != JavaElementType.CLASS;
    }
  }
,languageLevel);
  if (getClassReturnType != null) {
    return getClassReturnType;
  }
  PsiType ret=method.getReturnType();
  if (ret == null)   return null;
  if (ret instanceof PsiClassType) {
    ret=((PsiClassType)ret).setLanguageLevel(languageLevel);
  }
  if (is15OrHigher) {
    final PsiSubstitutor substitutor=result.getSubstitutor();
    PsiType substitutedReturnType=substitutor.substitute(ret);
    if (PsiUtil.isRawSubstitutor(method,substitutor) && ret.equals(substitutedReturnType))     return TypeConversionUtil.erasure(ret);
    PsiType lowerBound=PsiType.NULL;
    if (substitutedReturnType instanceof PsiCapturedWildcardType) {
      lowerBound=((PsiCapturedWildcardType)substitutedReturnType).getLowerBound();
    }
 else     if (substitutedReturnType instanceof PsiWildcardType) {
      lowerBound=((PsiWildcardType)substitutedReturnType).getSuperBound();
    }
    if (lowerBound != PsiType.NULL) {
      final PsiClass containingClass=method.getContainingClass();
      final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
      final PsiClass childClass=qualifierExpression != null ? PsiUtil.resolveClassInClassTypeOnly(qualifierExpression.getType()) : null;
      if (containingClass != null && childClass != null) {
        final PsiType typeInChildClassTypeParams=TypeConversionUtil.getSuperClassSubstitutor(containingClass,childClass,PsiSubstitutor.EMPTY).substitute(ret);
        final PsiClass substituted=PsiUtil.resolveClassInClassTypeOnly(typeInChildClassTypeParams);
        if (substituted instanceof PsiTypeParameter) {
          final PsiClassType[] extendsListTypes=substituted.getExtendsListTypes();
          if (extendsListTypes.length == 1) {
            return extendsListTypes[0];
          }
        }
      }
    }
    return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,call);
  }
  return TypeConversionUtil.erasure(ret);
}
