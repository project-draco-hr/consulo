{
  super(project,null,dialog);
  myId=id;
  myContainer=container;
  setProject(project);
  if (!(container instanceof DockContainer.Dialog)) {
    setStatusBar(WindowManager.getInstance().getStatusBar(project).createChild());
  }
  myUiContainer=new NonOpaquePanel(new BorderLayout());
  NonOpaquePanel center=new NonOpaquePanel(new BorderLayout(0,2));
  if (UIUtil.isUnderAquaLookAndFeel()) {
    center.setOpaque(true);
    center.setBackground(JBTabsImpl.MAC_AQUA_BG_COLOR);
  }
  center.add(myNorthPanel,BorderLayout.NORTH);
  myDockContentUiContainer=new NonOpaquePanel(new BorderLayout());
  myDockContentUiContainer.add(myContainer.getContainerComponent(),BorderLayout.CENTER);
  center.add(myDockContentUiContainer,BorderLayout.CENTER);
  myUiContainer.add(center,BorderLayout.CENTER);
  if (!(container instanceof DockContainer.Dialog)) {
    myUiContainer.add(myStatusBar.getComponent(),BorderLayout.SOUTH);
  }
  setComponent(myUiContainer);
  addDisposable(container);
  IdeEventQueue.getInstance().addPostprocessor(this,this);
  myContainer.addListener(new DockContainer.Listener.Adapter(){
    @Override public void contentRemoved(    Object key){
      getReady().doWhenDone(new Runnable(){
        @Override public void run(){
          if (myContainer.isEmpty()) {
            close();
          }
        }
      }
);
    }
  }
,this);
  UISettings.getInstance().addUISettingsListener(new UISettingsListener(){
    @Override public void uiSettingsChanged(    UISettings source){
      updateNorthPanel();
    }
  }
,this);
  updateNorthPanel();
}
