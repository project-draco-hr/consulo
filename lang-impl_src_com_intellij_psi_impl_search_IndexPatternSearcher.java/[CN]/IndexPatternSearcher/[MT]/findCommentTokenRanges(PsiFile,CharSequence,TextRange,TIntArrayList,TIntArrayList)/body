{
  if (file instanceof PsiPlainTextFile) {
    FileType fType=file.getFileType();
synchronized (PsiLock.LOCK) {
      if (fType instanceof CustomFileType) {
        TokenSet commentTokens=TokenSet.create(CustomHighlighterTokenType.LINE_COMMENT,CustomHighlighterTokenType.MULTI_LINE_COMMENT);
        Lexer lexer=SyntaxHighlighter.PROVIDER.create(fType,file.getProject(),file.getVirtualFile()).getHighlightingLexer();
        findComments(lexer,chars,range,commentTokens,commentStarts,commentEnds,null);
      }
 else {
        commentStarts.add(0);
        commentEnds.add(file.getTextLength());
      }
    }
  }
 else {
synchronized (PsiLock.LOCK) {
      final Language lang=file.getLanguage();
      final SyntaxHighlighter syntaxHighlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(lang,file.getProject(),file.getVirtualFile());
      Lexer lexer=syntaxHighlighter.getHighlightingLexer();
      TokenSet commentTokens=null;
      IndexPatternBuilder builderForFile=null;
      for (      IndexPatternBuilder builder : Extensions.getExtensions(IndexPatternBuilder.EP_NAME)) {
        Lexer lexerFromBuilder=builder.getIndexingLexer(file);
        if (lexerFromBuilder != null) {
          lexer=lexerFromBuilder;
          commentTokens=builder.getCommentTokenSet(file);
          builderForFile=builder;
        }
      }
      if (builderForFile == null) {
        final ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(lang);
        if (parserDefinition != null) {
          commentTokens=parserDefinition.getCommentTokens();
        }
      }
      if (commentTokens != null) {
        findComments(lexer,chars,range,commentTokens,commentStarts,commentEnds,builderForFile);
      }
    }
  }
}
