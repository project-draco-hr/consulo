{
  JavaCodeStyleManager codeStyleManager=myJavaCodeStyleManager;
  final PsiType objectType=PsiType.getJavaLangObject(myClass.getManager(),myClass.getResolveScope());
  String[] nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,null,objectType).names;
  final String objectBaseName=nameSuggestions.length > 0 ? nameSuggestions[0] : BASE_OBJECT_PARAMETER_NAME;
  myParameterName=getUniqueLocalVarName(objectBaseName,myEqualsFields);
  final PsiType classType=myFactory.createType(myClass);
  nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,classType).names;
  String instanceBaseName=nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : BASE_OBJECT_LOCAL_NAME;
  myClassInstanceName=getUniqueLocalVarName(instanceBaseName,myEqualsFields);
  @NonNls StringBuffer buffer=new StringBuffer();
  CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(myProject);
  if (GenerateMembersUtil.shouldAddOverrideAnnotation(myClass,false)) {
    buffer.append("@Override\n");
  }
  buffer.append("public boolean equals(Object ").append(myParameterName).append(") {\n");
  addEqualsPrologue(buffer);
  if (myEqualsFields.length > 0) {
    addClassInstance(buffer);
    ArrayList<PsiField> equalsFields=new ArrayList<PsiField>();
    equalsFields.addAll(Arrays.asList(myEqualsFields));
    Collections.sort(equalsFields,EqualsFieldsComparator.INSTANCE);
    for (    PsiField field : equalsFields) {
      if (!field.hasModifierProperty(PsiModifier.STATIC)) {
        final PsiType type=field.getType();
        if (type instanceof PsiArrayType) {
          addArrayEquals(buffer,field);
        }
 else         if (type instanceof PsiPrimitiveType) {
          if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) {
            addDoubleFieldComparison(buffer,field);
          }
 else {
            addPrimitiveFieldComparison(buffer,field);
          }
        }
 else {
          if (type instanceof PsiClassType) {
            final PsiClass aClass=((PsiClassType)type).resolve();
            if (aClass != null && aClass.isEnum()) {
              addPrimitiveFieldComparison(buffer,field);
              continue;
            }
          }
          addFieldComparison(buffer,field);
        }
      }
    }
  }
  buffer.append("\nreturn true;\n}");
  PsiMethod result=myFactory.createMethodFromText(buffer.toString(),null);
  final PsiParameter parameter=result.getParameterList().getParameters()[0];
  PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,styleSettings.GENERATE_FINAL_PARAMETERS);
  PsiMethod method=(PsiMethod)myCodeStyleManager.reformat(result);
  method=(PsiMethod)myJavaCodeStyleManager.shortenClassReferences(method);
  return method;
}
