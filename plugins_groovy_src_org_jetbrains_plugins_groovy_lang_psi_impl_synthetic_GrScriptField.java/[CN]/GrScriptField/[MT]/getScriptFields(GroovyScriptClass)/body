{
  return CachedValuesManager.getManager(script.getProject()).getCachedValue(script,new CachedValueProvider<GrScriptField[]>(){
    @Override public Result<GrScriptField[]> compute(){
      List<GrScriptField> result=RecursionManager.doPreventingRecursion(script,true,new Computable<List<GrScriptField>>(){
        @Override public List<GrScriptField> compute(){
          final List<GrScriptField> result=new ArrayList<GrScriptField>();
          script.getContainingFile().accept(new GroovyRecursiveElementVisitor(){
            @Override public void visitVariableDeclaration(            GrVariableDeclaration element){
              if (element.getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_FIELD) != null) {
                for (                GrVariable variable : element.getVariables()) {
                  result.add(new GrScriptField(variable,script));
                }
              }
              super.visitVariableDeclaration(element);
            }
            @Override public void visitMethod(            GrMethod method){
            }
            @Override public void visitTypeDefinition(            GrTypeDefinition typeDefinition){
            }
          }
);
          return result;
        }
      }
);
      if (result == null) {
        return Result.create(EMPTY_ARRAY,script.getContainingFile());
      }
 else {
        return Result.create(result.toArray(new GrScriptField[result.size()]),script.getContainingFile());
      }
    }
  }
);
}
