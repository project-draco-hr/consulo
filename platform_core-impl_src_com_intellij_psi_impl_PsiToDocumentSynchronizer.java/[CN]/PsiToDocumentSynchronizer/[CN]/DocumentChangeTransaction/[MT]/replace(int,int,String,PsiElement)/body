{
  int start=0;
  int end=start + length;
  final int replaceLength=replace.length();
  final CharSequence chars=myPsiText.subSequence(psiStart,psiStart + length);
  if (StringUtil.equals(chars,replace))   return;
  int newStartInReplace=0;
  int newEndInReplace=replaceLength;
  while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) {
    start++;
    newStartInReplace++;
  }
  while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) {
    newEndInReplace--;
    end--;
  }
  if (replacement != null && (newStartInReplace > 0 || newEndInReplace < replaceLength)) {
    PsiElement startLeaf=replacement.findElementAt(newStartInReplace);
    PsiElement endLeaf=replacement.findElementAt(newEndInReplace - 1);
    if (startLeaf != null && endLeaf != null) {
      int leafStart=startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset();
      int leafEnd=endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset();
      start+=leafStart - newStartInReplace;
      end+=leafEnd - newEndInReplace;
      newStartInReplace=leafStart;
      newEndInReplace=leafEnd;
    }
  }
  if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars,'\n',start,end) != -1) {
    while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') {
      start--;
      end--;
      newStartInReplace--;
      newEndInReplace--;
    }
  }
  start+=psiStart;
  end+=psiStart;
  final CharSequence charsSequence=myPsiText;
  while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start,end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') {
    start--;
    newStartInReplace--;
    end--;
    newEndInReplace--;
  }
  updateFragments(start,end,replace.substring(newStartInReplace,newEndInReplace));
}
