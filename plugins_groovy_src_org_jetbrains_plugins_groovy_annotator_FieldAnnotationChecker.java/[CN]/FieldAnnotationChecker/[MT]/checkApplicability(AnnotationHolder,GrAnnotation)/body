{
  final String qname=annotation.getQualifiedName();
  if (!GroovyCommonClassNames.GROOVY_TRANSFORM_FIELD.equals(qname))   return false;
  checkScriptField(holder,annotation);
  PsiElement parent=annotation.getParent();
  PsiElement owner=parent.getParent();
  final PsiElement ownerToUse=parent instanceof PsiModifierList ? owner : parent;
  if (!(ownerToUse instanceof GrVariableDeclaration) || !GroovyRefactoringUtil.isLocalVariable(((GrVariableDeclaration)ownerToUse).getVariables()[0])) {
    return false;
  }
  String[] elementTypeFields={"LOCAL_VARIABLE"};
  final GrCodeReferenceElement ref=annotation.getClassReference();
  if (!GrAnnotationImpl.isAnnotationApplicableTo(annotation,false,elementTypeFields)) {
    String description=JavaErrorMessages.message("annotation.not.applicable",ref.getText(),JavaErrorMessages.message("annotation.target." + elementTypeFields[0]));
    holder.createErrorAnnotation(ref,description);
  }
  return true;
}
