{
  StringBuilder buf=new StringBuilder();
  final boolean istag=descriptor instanceof HtmlTagDescriptor;
  if (istag) {
    DocumentationUtil.formatEntityName(XmlBundle.message("xml.javadoc.tag.name.message"),descriptor.getName(),buf);
  }
 else {
    DocumentationUtil.formatEntityName(XmlBundle.message("xml.javadoc.attribute.name.message"),descriptor.getName(),buf);
  }
  buf.append(XmlBundle.message("xml.javadoc.description.message")).append(NBSP).append(descriptor.getDescription()).append(BR);
  if (istag) {
    final HtmlTagDescriptor tagDescriptor=(HtmlTagDescriptor)descriptor;
    if (!ommitHtmlSpecifics) {
      boolean hasStartTag=tagDescriptor.isHasStartTag();
      if (!hasStartTag) {
        buf.append(XmlBundle.message("xml.javadoc.start.tag.could.be.omitted.message")).append(BR);
      }
      if (!tagDescriptor.isEmpty() && !tagDescriptor.isHasEndTag()) {
        buf.append(XmlBundle.message("xml.javadoc.end.tag.could.be.omitted.message")).append(BR);
      }
    }
    if (tagDescriptor.isEmpty()) {
      buf.append(XmlBundle.message("xml.javadoc.is.empty.message")).append(BR);
    }
  }
 else {
    final HtmlAttributeDescriptor attributeDescriptor=(HtmlAttributeDescriptor)descriptor;
    buf.append(XmlBundle.message("xml.javadoc.attr.type.message",attributeDescriptor.getType())).append(BR);
    if (!attributeDescriptor.isHasDefaultValue())     buf.append(XmlBundle.message("xml.javadoc.attr.default.required.message")).append(BR);
  }
  char dtdId=descriptor.getDtd();
  boolean deprecated=dtdId == HtmlTagDescriptor.LOOSE_DTD;
  if (deprecated) {
    buf.append(XmlBundle.message("xml.javadoc.deprecated.message",deprecated)).append(BR);
  }
  if (dtdId == HtmlTagDescriptor.LOOSE_DTD) {
    buf.append(XmlBundle.message("xml.javadoc.defined.in.loose.dtd.message"));
  }
 else   if (dtdId == HtmlTagDescriptor.FRAME_DTD) {
    buf.append(XmlBundle.message("xml.javadoc.defined.in.frameset.dtd.message"));
  }
 else {
    buf.append(XmlBundle.message("xml.javadoc.defined.in.any.dtd.message"));
  }
  if (!istag) {
    ColorSampleLookupValue.addColorPreviewAndCodeToLookup(element,buf);
  }
  if (element != null) {
    buf.append(XmlDocumentationProvider.generateHtmlAdditionalDocTemplate(element));
  }
  return buf.toString();
}
