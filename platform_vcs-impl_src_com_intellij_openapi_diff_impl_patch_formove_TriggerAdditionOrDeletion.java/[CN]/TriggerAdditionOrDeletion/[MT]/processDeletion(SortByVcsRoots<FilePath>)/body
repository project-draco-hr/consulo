{
  final MultiMap<VcsRoot,FilePath> map=sortByVcsRoots.sort(myDeleted);
  for (  VcsRoot vcsRoot : map.keySet()) {
    if (vcsRoot != null && vcsRoot.vcs != null) {
      final CheckinEnvironment localChangesProvider=vcsRoot.vcs.getCheckinEnvironment();
      if (localChangesProvider == null)       continue;
      final boolean takeDirs=vcsRoot.vcs.areDirectoriesVersionedItems();
      final Collection<FilePath> files=map.get(vcsRoot);
      final List<FilePath> toBeDeleted=new LinkedList<FilePath>();
      for (      FilePath file : files) {
        final FilePath parent=file.getParentPath();
        if ((takeDirs || (!file.isDirectory())) && parent != null && parent.getIOFile().exists()) {
          toBeDeleted.add(file);
        }
      }
      if (toBeDeleted.isEmpty())       return;
      askUserIfNeededDeletion(vcsRoot.vcs,toBeDeleted);
      myAffected.addAll(toBeDeleted);
      localChangesProvider.scheduleMissingFileForDeletion(toBeDeleted);
    }
  }
}
