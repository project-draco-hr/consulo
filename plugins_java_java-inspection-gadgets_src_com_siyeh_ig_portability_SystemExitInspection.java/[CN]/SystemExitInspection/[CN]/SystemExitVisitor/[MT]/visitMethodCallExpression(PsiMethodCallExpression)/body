{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  @NonNls final String exit="exit";
  @NonNls final String halt="halt";
  if (!exit.equals(methodName) && !halt.equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() != 1) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType=parameters[0].getType();
  if (!parameterType.equals(PsiType.INT)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (className == null) {
    return;
  }
  if ("java.lang.System".equals(className)) {
    registerMethodCallError(expression,"System");
  }
 else   if ("java.lang.Runtime".equals(className)) {
    registerMethodCallError(expression,"Runtime");
  }
}
