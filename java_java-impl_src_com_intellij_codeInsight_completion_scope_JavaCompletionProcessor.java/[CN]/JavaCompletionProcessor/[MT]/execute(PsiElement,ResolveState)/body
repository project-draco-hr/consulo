{
  if (!(element instanceof PsiClass) && element instanceof PsiModifierListOwner) {
    PsiModifierListOwner modifierListOwner=(PsiModifierListOwner)element;
    if (myStatic) {
      if (!modifierListOwner.hasModifierProperty(PsiModifier.STATIC)) {
        return true;
      }
    }
 else {
      if (!mySettings.SHOW_STATIC_AFTER_INSTANCE && modifierListOwner.hasModifierProperty(PsiModifier.STATIC) && !myMembersFlag) {
        return true;
      }
    }
  }
  final PsiElement elementParent=myElement.getParent();
  if (element instanceof PsiPackage && myScope instanceof PsiClass) {
    if (!(elementParent instanceof PsiQualifiedReference && ((PsiQualifiedReference)elementParent).getQualifier() != null)) {
      return true;
    }
  }
  if (myFilter.isClassAcceptable(element.getClass()) && myFilter.isAcceptable(new CandidateInfo(element,state.get(PsiSubstitutor.KEY)),myElement)) {
    final String name=PsiUtil.getName(element);
    if (StringUtil.isNotEmpty(name) && (myMatcher == null || myMatcher.value(name))) {
      if (isAccessible(element)) {
        add(new CompletionElement(myQualifierType,element,state.get(PsiSubstitutor.KEY),myQualifierClass));
      }
    }
  }
  return true;
}
