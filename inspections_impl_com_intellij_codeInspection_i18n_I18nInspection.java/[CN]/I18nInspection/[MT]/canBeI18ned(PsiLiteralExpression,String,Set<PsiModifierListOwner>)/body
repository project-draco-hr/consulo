{
  if (ignoreForNonAlpha && !StringUtil.containsAlphaCharacters(value)) {
    return false;
  }
  PsiField parentField=PsiTreeUtil.getParentOfType(expression,PsiField.class);
  if (parentField != null) {
    nonNlsTargets.add(parentField);
  }
  if (I18nUtil.isPassedToAnnotatedParam(expression,AnnotationUtil.NON_NLS,new HashMap<String,Object>(),nonNlsTargets)) {
    return false;
  }
  if (isInNonNlsCall(expression,nonNlsTargets)) {
    return false;
  }
  if (isInNonNlsEquals(expression,nonNlsTargets)) {
    return false;
  }
  if (isPassedToNonNlsVariable(expression,nonNlsTargets)) {
    return false;
  }
  if (I18nUtil.mustBePropertyKey(expression,new HashMap<String,Object>())) {
    return false;
  }
  if (isReturnedFromNonNlsMethod(expression,nonNlsTargets)) {
    return false;
  }
  if (ignoreForAssertStatements && isArgOfAssertStatement(expression)) {
    return false;
  }
  if (ignoreForExceptionConstructors && isArgOfExceptionConstructor(expression)) {
    return false;
  }
  if (!ignoreForExceptionConstructors && isArgOfSpecifiedExceptionConstructor(expression,ignoreForSpecifiedExceptionConstructors.split(","))) {
    return false;
  }
  if (ignoreForJUnitAsserts && isArgOfJUnitAssertion(expression)) {
    return false;
  }
  if (ignoreForClassReferences && isClassRef(expression,value)) {
    return false;
  }
  if (ignoreForPropertyKeyReferences && I18nUtil.isPropertyRef(expression,value,null,null)) {
    return false;
  }
  if (ignoreToString && isToString(expression)) {
    return false;
  }
  Pattern pattern=myCachedNonNlsPattern;
  if (pattern != null) {
    Project project=expression.getProject();
    Document document=PsiDocumentManager.getInstance(project).getDocument(expression.getContainingFile());
    int line=document.getLineNumber(expression.getTextRange().getStartOffset());
    String lineText=document.getText().substring(document.getLineStartOffset(line),document.getLineEndOffset(line));
    if (pattern.matcher(lineText).matches()) {
      return false;
    }
  }
  return true;
}
