{
  final PsiElement parent=PsiTreeUtil.getParentOfType(expression,PsiExpressionList.class,PsiClass.class);
  if (!(parent instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement grandparent=parent.getParent();
  if (!(grandparent instanceof PsiNewExpression)) {
    return false;
  }
  final PsiJavaCodeReferenceElement reference=((PsiNewExpression)grandparent).getClassReference();
  if (reference == null) {
    return false;
  }
  final PsiElement referent=reference.resolve();
  if (!(referent instanceof PsiClass)) {
    return false;
  }
  final PsiClass aClass=(PsiClass)referent;
  final Project project=expression.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass throwable=JavaPsiFacade.getInstance(project).findClass("java.lang.Throwable",scope);
  return throwable != null && aClass.isInheritor(throwable,true);
}
