{
  Object value=expression.getValue();
  if (!(value instanceof String))   return;
  String stringValue=(String)value;
  if (stringValue.trim().length() == 0) {
    return;
  }
  Set<PsiModifierListOwner> nonNlsTargets=new HashSet<PsiModifierListOwner>();
  if (canBeI18ned(expression,stringValue,nonNlsTargets)) {
    final String description=CodeInsightBundle.message("inspection.i18n.message.general.with.value",JDOMUtil.escapeText(stringValue));
    List<LocalQuickFix> fixes=new ArrayList<LocalQuickFix>();
    if (ConcatenationToMessageFormatAction.getEnclosingLiteralConcatenation(expression) != null) {
      fixes.add(I18N_CONCATENATION_QUICK_FIX);
    }
    fixes.add(I18N_QUICK_FIX);
    if (!isNotConstantFieldInitializer(expression)) {
      fixes.add(createIntroduceConstantFix(expression));
    }
    final PsiManager manager=expression.getManager();
    if (PsiUtil.getLanguageLevel(expression).hasEnumKeywordAndAutoboxing() && manager.findClass(AnnotationUtil.NON_NLS,expression.getResolveScope()) != null) {
      for (      PsiModifierListOwner element : nonNlsTargets) {
        if (manager.isInProject(element)) {
          fixes.add(new AnnotateQuickFix(element,AnnotationUtil.NON_NLS,AnnotationUtil.NON_NLS_SIMPLE_NAME));
        }
      }
    }
    final ProblemDescriptor problem=myManager.createProblemDescriptor(expression,description,fixes.toArray(new LocalQuickFix[fixes.size()]),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    myProblems.add(problem);
  }
}
