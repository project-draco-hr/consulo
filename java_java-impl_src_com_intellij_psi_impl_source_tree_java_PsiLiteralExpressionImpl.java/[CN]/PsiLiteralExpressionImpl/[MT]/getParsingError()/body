{
  final Object value=getValue();
  final TreeElement literal=getFirstChildNode();
  final IElementType type=literal.getElementType();
  String text=NUMERIC_LITERALS.contains(type) ? literal.getText().toLowerCase() : literal.getText();
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(this);
  if (REAL_LITERALS.contains(type)) {
    if (text.startsWith(HEX_PREFIX) && !languageLevel.isAtLeast(LanguageLevel.JDK_1_5)) {
      return JavaErrorMessages.message("hex.FP.literals.not.supported");
    }
  }
  if (INTEGER_LITERALS.contains(type)) {
    if (text.startsWith(BIN_PREFIX) && !languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
      return JavaErrorMessages.message("binary.literals.not.supported");
    }
  }
  if (NUMERIC_LITERALS.contains(type)) {
    if (text.contains("_") && !languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
      return JavaErrorMessages.message("underscores.in.literals.not.supported");
    }
  }
  if (type == JavaTokenType.INTEGER_LITERAL) {
    if (!(text.equals(_2_IN_31) && getParent() instanceof PsiPrefixExpression && ((PsiPrefixExpression)getParent()).getOperationTokenType() == JavaTokenType.MINUS)) {
      if (text.equals(HEX_PREFIX)) {
        return JavaErrorMessages.message("hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit");
      }
      if (text.equals(BIN_PREFIX)) {
        return JavaErrorMessages.message("binary.numbers.must.contain.at.least.one.hexadecimal.digit");
      }
      if (value == null || text.equals(_2_IN_31)) {
        return JavaErrorMessages.message("integer.number.too.large");
      }
    }
  }
 else   if (type == JavaTokenType.LONG_LITERAL) {
    if (!(text.equals(_2_IN_63_L) && getParent() instanceof PsiPrefixExpression && ((PsiPrefixExpression)getParent()).getOperationTokenType() == JavaTokenType.MINUS)) {
      if (text.equals(LONG_HEX_EMPTY)) {
        return JavaErrorMessages.message("hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit");
      }
      if (text.equals(LONG_BIN_EMPTY)) {
        return JavaErrorMessages.message("binary.numbers.must.contain.at.least.one.hexadecimal.digit");
      }
      if (value == null || text.equals(_2_IN_63_L)) {
        return JavaErrorMessages.message("long.number.too.large");
      }
    }
  }
 else   if (type == JavaTokenType.FLOAT_LITERAL || type == JavaTokenType.DOUBLE_LITERAL) {
    if (value == null) {
      return JavaErrorMessages.message("malformed.floating.point.literal");
    }
  }
 else   if (type == JavaTokenType.TRUE_KEYWORD || type == JavaTokenType.FALSE_KEYWORD || type == JavaTokenType.NULL_KEYWORD) {
    return null;
  }
 else   if (type == JavaTokenType.CHARACTER_LITERAL) {
    if (value == null) {
      if (!StringUtil.startsWithChar(text,'\''))       return null;
      if (StringUtil.endsWithChar(text,'\'')) {
        if (text.length() == 1)         return JavaErrorMessages.message("illegal.line.end.in.character.literal");
        text=text.substring(1,text.length() - 1);
      }
 else {
        return JavaErrorMessages.message("illegal.line.end.in.character.literal");
      }
      StringBuilder chars=new StringBuilder();
      boolean success=parseStringCharacters(text,chars,null);
      if (!success)       return JavaErrorMessages.message("illegal.escape.character.in.character.literal");
      if (chars.length() > 1) {
        return JavaErrorMessages.message("too.many.characters.in.character.literal");
      }
 else       if (chars.length() == 0)       return JavaErrorMessages.message("empty.character.literal");
    }
  }
 else   if (type == JavaTokenType.STRING_LITERAL) {
    if (value == null) {
      for (      final PsiElement element : getChildren()) {
        if (element instanceof OuterLanguageElement) {
          return null;
        }
      }
      if (!StringUtil.startsWithChar(text,'\"'))       return null;
      if (StringUtil.endsWithChar(text,'\"')) {
        if (text.length() == 1)         return JavaErrorMessages.message("illegal.line.end.in.string.literal");
        text=text.substring(1,text.length() - 1);
      }
 else {
        return JavaErrorMessages.message("illegal.line.end.in.string.literal");
      }
      StringBuilder chars=new StringBuilder();
      boolean success=parseStringCharacters(text,chars,null);
      if (!success)       return JavaErrorMessages.message("illegal.escape.character.in.string.literal");
    }
  }
  if (value instanceof Float) {
    final Float number=(Float)value;
    if (number.isInfinite())     return JavaErrorMessages.message("floating.point.number.too.large");
    if (number.floatValue() == 0 && !isFPZero())     return JavaErrorMessages.message("floating.point.number.too.small");
  }
 else   if (value instanceof Double) {
    final Double number=(Double)value;
    if (number.isInfinite())     return JavaErrorMessages.message("floating.point.number.too.large");
    if (number.doubleValue() == 0 && !isFPZero())     return JavaErrorMessages.message("floating.point.number.too.small");
  }
  return null;
}
