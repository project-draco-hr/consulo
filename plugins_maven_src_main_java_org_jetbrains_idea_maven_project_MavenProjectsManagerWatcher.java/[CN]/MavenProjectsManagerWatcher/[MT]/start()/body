{
  final MessageBusConnection myBusConnection=myProject.getMessageBus().connect(myChangedDocumentsQueue);
  myBusConnection.subscribe(VirtualFileManager.VFS_CHANGES,new MyFileChangeListener());
  myBusConnection.subscribe(ProjectTopics.PROJECT_ROOTS,new MyRootChangesListener());
  myChangedDocumentsQueue.makeUserAware(myProject);
  myChangedDocumentsQueue.activate();
  DocumentAdapter myDocumentListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent event){
      Document doc=event.getDocument();
      VirtualFile file=FileDocumentManager.getInstance().getFile(doc);
      if (file == null)       return;
      boolean isMavenFile=file.getName().equals(MavenConstants.POM_XML) || file.getName().equals(MavenConstants.PROFILES_XML) || isSettingsFile(file);
      if (!isMavenFile)       return;
synchronized (myChangedDocuments) {
        myChangedDocuments.add(doc);
      }
      myChangedDocumentsQueue.queue(new Update(MavenProjectsManagerWatcher.this){
        public void run(){
          final Set<Document> copy;
synchronized (myChangedDocuments) {
            copy=new THashSet<Document>(myChangedDocuments);
            myChangedDocuments.clear();
          }
          MavenUtil.invokeLater(myProject,new Runnable(){
            public void run(){
              new WriteAction(){
                protected void run(                Result result) throws Throwable {
                  for (                  Document each : copy) {
                    PsiDocumentManager.getInstance(myProject).commitDocument(each);
                    FileDocumentManager.getInstance().saveDocument(each);
                  }
                }
              }
.execute();
            }
          }
);
        }
      }
);
    }
  }
;
  getDocumentEventMulticaster().addDocumentListener(myDocumentListener,myBusConnection);
  final MavenGeneralSettings.Listener mySettingsPathsChangesListener=new MavenGeneralSettings.Listener(){
    public void pathsChanged(){
      updateSettingsFilePointers();
      onSettingsChange();
    }
  }
;
  myGeneralSettings.addListener(mySettingsPathsChangesListener);
  Disposer.register(myChangedDocumentsQueue,new Disposable(){
    public void dispose(){
      myGeneralSettings.removeListener(mySettingsPathsChangesListener);
    }
  }
);
  updateSettingsFilePointers();
}
