{
  final VariableAccessVisitor visitor=new VariableAccessVisitor();
  aClass.accept(visitor);
  final Set fields=visitor.getInappropriatelyAccessedFields();
  for (Iterator iterator=fields.iterator(); iterator.hasNext(); ) {
    final PsiField field=(PsiField)iterator.next();
    if (!field.hasModifierProperty(PsiModifier.FINAL)) {
      final PsiClass containingClass=field.getContainingClass();
      if (aClass.equals(containingClass)) {
        registerFieldError(field);
      }
    }
  }
}
