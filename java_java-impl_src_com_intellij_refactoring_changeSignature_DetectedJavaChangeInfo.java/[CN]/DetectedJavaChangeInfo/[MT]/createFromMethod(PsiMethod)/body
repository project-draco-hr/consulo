{
  final String newVisibility=VisibilityUtil.getVisibilityModifier(method.getModifierList());
  final PsiType returnType=method.getReturnType();
  final CanonicalTypes.Type newReturnType;
  final ParameterInfoImpl[] parameterInfos;
  try {
    newReturnType=returnType != null ? CanonicalTypes.createTypeWrapper(returnType) : null;
    parameterInfos=ParameterInfoImpl.fromMethod(method);
    for (    ParameterInfoImpl parameterInfo : parameterInfos) {
      if (!parameterInfo.getTypeWrapper().isValid()) {
        return null;
      }
    }
  }
 catch (  IncorrectOperationException e) {
    return null;
  }
  final DetectedJavaChangeInfo fromMethod=new DetectedJavaChangeInfo(newVisibility,method,newReturnType,parameterInfos,null,method.getName(),method.getName());
  final PsiMethod deepestSuperMethod=method.findDeepestSuperMethod();
  if (deepestSuperMethod != null) {
    if (!deepestSuperMethod.getManager().isInProject(deepestSuperMethod))     return null;
  }
  fromMethod.setSuperMethod(deepestSuperMethod);
  return fromMethod;
}
