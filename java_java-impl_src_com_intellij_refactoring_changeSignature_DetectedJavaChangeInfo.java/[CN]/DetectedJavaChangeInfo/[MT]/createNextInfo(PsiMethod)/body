{
  final DetectedJavaChangeInfo fromMethod=createFromMethod(method);
  if (fromMethod == null)   return null;
  if (!this.equals(fromMethod)) {
    if (!createParametersInfo(fromMethod.newParms))     return null;
    if (fromMethod.isReturnTypeChanged() || (fromMethod.newReturnType != null && getNewReturnType() == null) || (fromMethod.newReturnType != null && getNewReturnType() != null && !Comparing.strEqual(getNewReturnType().getTypeText(),fromMethod.newReturnType.getTypeText()))) {
      final String visibility=fromMethod.getNewVisibility();
      if (Comparing.strEqual(visibility,PsiModifier.PRIVATE) && !fromMethod.isArrayToVarargs() && !fromMethod.isExceptionSetOrOrderChanged()&& !fromMethod.isExceptionSetChanged()&& !fromMethod.isNameChanged()&& !fromMethod.isParameterSetOrOrderChanged()&& !fromMethod.isParameterNamesChanged()&& !fromMethod.isParameterTypesChanged()) {
        return null;
      }
    }
    try {
      final DetectedJavaChangeInfo javaChangeInfo=new DetectedJavaChangeInfo(newVisibility,method,newReturnType,fromMethod.newParms,getNewExceptions(),method.getName(),getOldName()){
        @Override protected void fillOldParams(        PsiMethod method){
          oldParameterNames=DetectedJavaChangeInfo.this.getOldParameterNames();
          oldParameterTypes=DetectedJavaChangeInfo.this.getOldParameterTypes();
          if (!method.isConstructor()) {
            try {
              isReturnTypeChanged=isReturnTypeChanged || (DetectedJavaChangeInfo.this.getNewReturnType() != null ? !Comparing.strEqual(DetectedJavaChangeInfo.this.getNewReturnType().getTypeText(),newReturnType.getTypeText()) : newReturnType != null);
            }
 catch (            IncorrectOperationException e) {
              isReturnTypeChanged=true;
            }
          }
        }
      }
;
      javaChangeInfo.setSuperMethod(getSuperMethod());
      return javaChangeInfo;
    }
 catch (    IncorrectOperationException e) {
      return null;
    }
  }
  return this;
}
