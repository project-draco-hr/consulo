{
  if (isQuickFixOnReadOnlyFile(project,descriptor))   return;
  try {
    final PsiElement nameElement=descriptor.getPsiElement();
    final PsiMethod method=(PsiMethod)nameElement.getParent().getParent();
    method.getModifierList().setModifierProperty(PsiModifier.SYNCHRONIZED,false);
    final PsiCodeBlock body=method.getBody();
    final String text=body.getText();
    final String replacementText;
    if (method.hasModifierProperty(PsiModifier.STATIC)) {
      final PsiClass containingClass=method.getContainingClass();
      final String className=containingClass.getName();
      replacementText="{ synchronized(" + className + ".class){"+ text.substring(1)+ '}';
    }
 else {
      replacementText="{ synchronized(this){" + text.substring(1) + '}';
    }
    final PsiManager psiManager=PsiManager.getInstance(project);
    final PsiElementFactory elementFactory=psiManager.getElementFactory();
    final PsiCodeBlock block=elementFactory.createCodeBlockFromText(replacementText,null);
    body.replace(block);
    psiManager.getCodeStyleManager().reformat(method);
  }
 catch (  IncorrectOperationException e) {
  }
}
