{
  if (!method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
    return;
  }
  if (!m_includeNativeMethods && method.hasModifierProperty(PsiModifier.NATIVE)) {
    return;
  }
  if (ignoreSynchronizedSuperMethods) {
    final PsiMethod[] superMethods=method.findSuperMethods();
    for (    final PsiMethod superMethod : superMethods) {
      if (superMethod.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
        return;
      }
    }
  }
  registerModifierError(PsiModifier.SYNCHRONIZED,method,method);
}
