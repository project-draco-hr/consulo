{
  if (statement instanceof PsiExpressionStatement) {
    final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)statement;
    final PsiExpression expression=expressionStatement.getExpression();
    if (!(expression instanceof PsiMethodCallExpression)) {
      return false;
    }
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final String methodName=methodExpression.getReferenceName();
    if (!HardcodedMethodConstants.CLOSE.equals(methodName)) {
      return false;
    }
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    if (!(qualifier instanceof PsiReferenceExpression)) {
      return false;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifier;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiLocalVariable)) {
      return false;
    }
    final PsiLocalVariable variable=(PsiLocalVariable)target;
    return variables.contains(variable);
  }
 else   if (statement instanceof PsiIfStatement) {
    final PsiIfStatement ifStatement=(PsiIfStatement)statement;
    if (ifStatement.getElseBranch() != null) {
      return false;
    }
    final PsiExpression condition=ifStatement.getCondition();
    if (!(condition instanceof PsiBinaryExpression)) {
      return false;
    }
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)condition;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (!JavaTokenType.NE.equals(tokenType)) {
      return false;
    }
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      return false;
    }
    final PsiElement variable;
    if (PsiType.NULL.equals(rhs.getType())) {
      if (!(lhs instanceof PsiReferenceExpression)) {
        return false;
      }
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
      variable=referenceExpression.resolve();
      if (!(variable instanceof PsiLocalVariable)) {
        return false;
      }
    }
 else     if (PsiType.NULL.equals(lhs.getType())) {
      if (!(rhs instanceof PsiReferenceExpression)) {
        return false;
      }
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)rhs;
      variable=referenceExpression.resolve();
      if (!(variable instanceof PsiLocalVariable)) {
        return false;
      }
    }
 else {
      return false;
    }
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    if (thenBranch instanceof PsiExpressionStatement) {
      return isCloseStatement(thenBranch,variables);
    }
 else     if (thenBranch instanceof PsiBlockStatement) {
      final PsiBlockStatement blockStatement=(PsiBlockStatement)thenBranch;
      final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
      final PsiStatement[] statements=codeBlock.getStatements();
      return statements.length == 1 && isCloseStatement(statements[0],variables);
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}
