{
  List<VirtualFile> workQueue=myWorkQueue;
  myWorkQueue=new ArrayList<VirtualFile>();
  boolean haveEventsToFire=myFinishRunnable != null || !myEvents.isEmpty();
  if (!workQueue.isEmpty()) {
    LocalFileSystem fs=LocalFileSystem.getInstance();
    if (fs instanceof LocalFileSystemImpl) {
      ((LocalFileSystemImpl)fs).markSuspiciousFilesDirty(workQueue);
    }
    long t=0;
    if (LOG.isTraceEnabled()) {
      LOG.trace("scanning " + workQueue);
      t=System.currentTimeMillis();
    }
    int count=0;
    refresh:     do {
      if (LOG.isTraceEnabled())       LOG.trace("try=" + count);
      for (      VirtualFile file : workQueue) {
        if (myCancelled)         break refresh;
        NewVirtualFile nvf=(NewVirtualFile)file;
        if (!myIsRecursive && !myIsAsync) {
          nvf.markDirty();
        }
        RefreshWorker worker=new RefreshWorker(nvf,myIsRecursive);
        myWorker=worker;
        worker.scan();
        haveEventsToFire|=myEvents.addAll(worker.getEvents());
      }
      count++;
      if (LOG.isTraceEnabled())       LOG.trace("events=" + myEvents.size());
    }
 while (myIsRecursive && count < 3 && isAnyDirty(workQueue));
    if (t != 0) {
      t=System.currentTimeMillis() - t;
      LOG.trace((myCancelled ? "cancelled, " : "done, ") + t + " ms, events "+ myEvents);
    }
  }
  myWorker=null;
  iHaveEventsToFire=haveEventsToFire;
}
