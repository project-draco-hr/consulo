{
  List<VirtualFile> workQueue=myWorkQueue;
  myWorkQueue=new ArrayList<VirtualFile>();
  boolean haveEventsToFire=myFinishRunnable != null || !myEvents.isEmpty();
  if (!workQueue.isEmpty()) {
    LocalFileSystemImpl fs=(LocalFileSystemImpl)LocalFileSystem.getInstance();
    fs.markSuspiciousFilesDirty(workQueue);
    FileWatcher watcher=fs.getFileWatcher();
    long t=0;
    if (LOG.isDebugEnabled()) {
      LOG.debug("scanning " + workQueue);
      t=System.currentTimeMillis();
    }
    for (    VirtualFile file : workQueue) {
      if (myCancelled)       break;
      NewVirtualFile nvf=(NewVirtualFile)file;
      if (!myIsRecursive && (!myIsAsync || !watcher.isWatched(nvf))) {
        nvf.markDirty();
      }
      RefreshWorker worker=myWorker=new RefreshWorker(file,myIsRecursive);
      worker.scan();
      List<VFileEvent> events=worker.getEvents();
      if (myEvents.addAll(events)) {
        haveEventsToFire=true;
      }
    }
    if (t != 0) {
      t=System.currentTimeMillis() - t;
      LOG.debug((myCancelled ? "cancelled, " : "done, ") + t + " ms, events "+ myEvents);
    }
  }
  myWorker=null;
  iHaveEventsToFire=haveEventsToFire;
}
