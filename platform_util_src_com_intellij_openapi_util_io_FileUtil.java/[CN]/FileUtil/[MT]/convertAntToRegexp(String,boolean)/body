{
  final StringBuilder builder=new StringBuilder();
  int asteriskCount=0;
  boolean recursive=true;
  final int start=ignoreStartingSlash && (StringUtil.startsWithChar(antPattern,'/') || StringUtil.startsWithChar(antPattern,'\\')) ? 1 : 0;
  for (int idx=start; idx < antPattern.length(); idx++) {
    final char ch=antPattern.charAt(idx);
    if (ch == '*') {
      asteriskCount++;
      continue;
    }
    final boolean foundRecursivePattern=recursive && asteriskCount == 2 && (ch == '/' || ch == '\\');
    final boolean asterisksFound=asteriskCount > 0;
    asteriskCount=0;
    recursive=ch == '/' || ch == '\\';
    if (foundRecursivePattern) {
      builder.append("(?:[^/]+/)*?");
      continue;
    }
    if (asterisksFound) {
      builder.append("[^/]*?");
    }
    if (ch == '(' || ch == ')' || ch == '[' || ch == ']' || ch == '^' || ch == '$' || ch == '.' || ch == '{' || ch == '}' || ch == '+' || ch == '|') {
      builder.append('\\').append(ch);
      continue;
    }
    if (ch == '?') {
      builder.append("[^/]{1}");
      continue;
    }
    if (ch == '\\') {
      builder.append('/');
      continue;
    }
    builder.append(ch);
  }
  final boolean isTrailingSlash=builder.length() > 0 && builder.charAt(builder.length() - 1) == '/';
  if (asteriskCount == 0 && isTrailingSlash || recursive && asteriskCount == 2) {
    if (isTrailingSlash) {
      builder.setLength(builder.length() - 1);
    }
    if (builder.length() == 0) {
      builder.append(".*");
    }
 else {
      builder.append("(?:$|/.+)");
    }
  }
 else   if (asteriskCount > 0) {
    builder.append("[^/]*?");
  }
  return builder.toString();
}
