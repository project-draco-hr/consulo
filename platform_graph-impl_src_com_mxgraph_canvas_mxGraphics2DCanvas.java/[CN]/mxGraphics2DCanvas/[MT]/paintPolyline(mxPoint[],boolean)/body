{
  if (points != null && points.length > 1) {
    mxPoint pt=points[0];
    mxPoint pe=points[points.length - 1];
    double arcSize=mxConstants.LINE_ARCSIZE * scale;
    GeneralPath path=new GeneralPath();
    path.moveTo((float)pt.getX(),(float)pt.getY());
    for (int i=1; i < points.length - 1; i++) {
      mxPoint tmp=points[i];
      double dx=pt.getX() - tmp.getX();
      double dy=pt.getY() - tmp.getY();
      if ((rounded && i < points.length - 1) && (dx != 0 || dy != 0)) {
        double dist=Math.sqrt(dx * dx + dy * dy);
        double nx1=dx * Math.min(arcSize,dist / 2) / dist;
        double ny1=dy * Math.min(arcSize,dist / 2) / dist;
        double x1=tmp.getX() + nx1;
        double y1=tmp.getY() + ny1;
        path.lineTo((float)x1,(float)y1);
        mxPoint next=points[i + 1];
        while (i < points.length - 2 && Math.round(next.getX() - tmp.getX()) == 0 && Math.round(next.getY() - tmp.getY()) == 0) {
          next=points[i + 2];
          i++;
        }
        dx=next.getX() - tmp.getX();
        dy=next.getY() - tmp.getY();
        dist=Math.max(1,Math.sqrt(dx * dx + dy * dy));
        double nx2=dx * Math.min(arcSize,dist / 2) / dist;
        double ny2=dy * Math.min(arcSize,dist / 2) / dist;
        double x2=tmp.getX() + nx2;
        double y2=tmp.getY() + ny2;
        path.quadTo((float)tmp.getX(),(float)tmp.getY(),(float)x2,(float)y2);
        tmp=new mxPoint(x2,y2);
      }
 else {
        path.lineTo((float)tmp.getX(),(float)tmp.getY());
      }
      pt=tmp;
    }
    path.lineTo((float)pe.getX(),(float)pe.getY());
    g.draw(path);
  }
}
