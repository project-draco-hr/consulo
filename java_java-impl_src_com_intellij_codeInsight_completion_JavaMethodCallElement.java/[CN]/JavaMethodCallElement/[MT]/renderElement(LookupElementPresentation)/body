{
  final String className=myContainingClass.getName();
  presentation.setIcon(DefaultLookupItemRenderer.getRawIcon(this,presentation.isReal()));
  final String methodName=myMethod.getName();
  final boolean qualify=myCanImportStatic && !myShouldImportStatic || getAttribute(FORCE_QUALIFY) != null;
  if (qualify && StringUtil.isNotEmpty(className)) {
    presentation.setItemText(className + "." + methodName);
  }
 else {
    presentation.setItemText(methodName);
  }
  final String qname=myContainingClass.getQualifiedName();
  String location=!myCanImportStatic || StringUtil.isEmpty(qname) ? "" : " (" + StringUtil.getPackageName(qname) + ")";
  presentation.setStrikeout(JavaElementLookupRenderer.isToStrikeout(this));
  presentation.setItemTextBold(getAttribute(HIGHLIGHTED_ATTR) != null);
  final String params=myMergedOverloads ? "(...)" : PsiFormatUtil.formatMethod(myMethod,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_TYPE);
  if (myShouldImportStatic && StringUtil.isNotEmpty(className)) {
    presentation.setTailText(params + " in " + className+ location);
  }
 else {
    presentation.setTailText(params + location);
  }
  final PsiType type=myMethod.getReturnType();
  if (type != null) {
    presentation.setTypeText(getSubstitutor().substitute(type).getPresentableText());
  }
}
