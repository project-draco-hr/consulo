{
  final Document document=context.getDocument();
  final PsiFile file=context.getFile();
  final PsiMethod method=getObject();
  final LookupElement[] allItems=context.getElements();
  final boolean overloadsMatter=allItems.length == 1 && getUserData(FORCE_SHOW_SIGNATURE_ATTR) == null;
  final boolean hasParams=MethodParenthesesHandler.hasParams(this,allItems,overloadsMatter,method);
  JavaCompletionUtil.insertParentheses(context,this,overloadsMatter,hasParams);
  final int startOffset=context.getStartOffset();
  final OffsetKey refStart=context.trackOffset(startOffset,true);
  if (shouldInsertTypeParameters() && mayNeedTypeParameters(context.getFile().findElementAt(context.getStartOffset()))) {
    qualifyMethodCall(file,startOffset,document);
    insertExplicitTypeParameters(context,refStart);
  }
 else   if (myHelper != null || getAttribute(FORCE_QUALIFY) != null) {
    context.commitDocument();
    if (myHelper != null && willBeImported()) {
      final PsiReferenceExpression ref=PsiTreeUtil.findElementOfClassAtOffset(file,startOffset,PsiReferenceExpression.class,false);
      if (ref != null && myContainingClass != null && !ref.isReferenceTo(method)) {
        ref.bindToElementViaStaticImport(myContainingClass);
      }
      return;
    }
    qualifyMethodCall(file,startOffset,document);
  }
  final PsiType type=method.getReturnType();
  if (context.getCompletionChar() == '!' && type != null && PsiType.BOOLEAN.isAssignableFrom(type)) {
    context.setAddCompletionChar(false);
    context.commitDocument();
    final int offset=context.getOffset(refStart);
    final PsiMethodCallExpression methodCall=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethodCallExpression.class,false);
    if (methodCall != null) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(CodeCompletionFeatures.EXCLAMATION_FINISH);
      document.insertString(methodCall.getTextRange().getStartOffset(),"!");
    }
  }
}
