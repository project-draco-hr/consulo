{
  final PsiExpression expression=(PsiExpression)element;
  final boolean negated=ExpressionUtils.isNegated(expression);
  final Number value=(Number)ExpressionUtils.computeConstantExpression(expression);
  if (value == null) {
    return;
  }
  final PsiType type=expression.getType();
  final String decimalString;
  if (PsiType.INT.equals(type)) {
    if (negated) {
      decimalString=String.valueOf(-value.intValue());
    }
 else {
      decimalString=String.valueOf(value.intValue());
    }
  }
 else   if (PsiType.LONG.equals(type)) {
    if (negated) {
      decimalString=String.valueOf(-value.longValue()) + 'L';
    }
 else {
      decimalString=String.valueOf(value.longValue()) + 'L';
    }
  }
 else   if (PsiType.FLOAT.equals(type)) {
    if (negated) {
      decimalString=String.valueOf(-value.floatValue()) + 'f';
    }
 else {
      decimalString=String.valueOf(value.floatValue()) + 'f';
    }
  }
 else   if (PsiType.DOUBLE.equals(type)) {
    if (negated) {
      decimalString=String.valueOf(-value.doubleValue());
    }
 else {
      decimalString=String.valueOf(value.doubleValue());
    }
  }
 else {
    return;
  }
  if (negated) {
    replaceExpression(decimalString,(PsiExpression)expression.getParent());
  }
 else {
    replaceExpression(decimalString,expression);
  }
}
