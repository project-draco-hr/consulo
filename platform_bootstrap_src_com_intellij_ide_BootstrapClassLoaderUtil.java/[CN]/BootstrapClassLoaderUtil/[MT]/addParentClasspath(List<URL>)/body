{
  ClassLoader loader=BootstrapClassLoaderUtil.class.getClassLoader();
  if (loader instanceof URLClassLoader) {
    URLClassLoader urlClassLoader=(URLClassLoader)loader;
    ContainerUtil.addAll(aClasspathElements,urlClassLoader.getURLs());
  }
 else {
    String loaderName=loader.getClass().getName();
    try {
      Class<?> antClassLoaderClass=Class.forName("org.apache.tools.ant.AntClassLoader");
      if (antClassLoaderClass.isInstance(loader) || "org.apache.tools.ant.AntClassLoader".equals(loaderName) || "org.apache.tools.ant.loader.AntClassLoader2".equals(loaderName)) {
        String classpath=(String)antClassLoaderClass.getDeclaredMethod("getClasspath",ArrayUtil.EMPTY_CLASS_ARRAY).invoke(loader,ArrayUtil.EMPTY_OBJECT_ARRAY);
        StringTokenizer tokenizer=new StringTokenizer(classpath,File.separator,false);
        while (tokenizer.hasMoreTokens()) {
          String token=tokenizer.nextToken();
          aClasspathElements.add(new File(token).toURI().toURL());
        }
      }
 else {
        getLogger().warn("Unknown class loader: " + loaderName);
      }
    }
 catch (    ClassCastException e) {
      logException(loaderName,e);
    }
catch (    ClassNotFoundException e) {
      logException(loaderName,e);
    }
catch (    NoSuchMethodException e) {
      logException(loaderName,e);
    }
catch (    IllegalAccessException e) {
      logException(loaderName,e);
    }
catch (    InvocationTargetException e) {
      logException(loaderName,e);
    }
  }
}
