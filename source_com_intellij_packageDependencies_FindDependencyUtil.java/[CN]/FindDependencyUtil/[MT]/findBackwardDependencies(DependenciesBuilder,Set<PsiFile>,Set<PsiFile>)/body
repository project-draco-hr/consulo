{
  final List<UsageInfo> usages=new ArrayList<UsageInfo>();
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final Set<PsiFile> deps=new HashSet<PsiFile>();
  for (Iterator<PsiFile> iterator=searchFor.iterator(); iterator.hasNext(); ) {
    PsiFile psiFile=iterator.next();
    deps.addAll(builder.getDependencies().get(psiFile));
  }
  deps.retainAll(searchIn);
  if (deps.isEmpty())   return new UsageInfo[0];
  int totalCount=deps.size();
  int count=0;
  for (Iterator<PsiFile> inIterator=deps.iterator(); inIterator.hasNext(); ) {
    final PsiFile psiFile=inIterator.next();
    if (indicator != null) {
      if (indicator.isCanceled())       throw new ProcessCanceledException();
      indicator.setFraction(((double)++count) / totalCount);
      indicator.setText("Searching for usages in: " + psiFile.getVirtualFile().getPresentableUrl());
    }
    builder.analyzeFileDependencies(psiFile,new DependenciesBuilder.DependencyProcessor(){
      public void process(      PsiElement place,      PsiElement dependency){
        PsiFile dependencyFile=dependency.getContainingFile();
        if (searchFor.contains(dependencyFile)) {
          usages.add(new UsageInfo(place));
        }
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
