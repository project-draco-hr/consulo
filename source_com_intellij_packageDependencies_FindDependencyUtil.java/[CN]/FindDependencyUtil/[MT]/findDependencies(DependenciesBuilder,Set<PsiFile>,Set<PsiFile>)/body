{
  final List<UsageInfo> usages=new ArrayList<UsageInfo>();
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  int totalCount=searchIn.size();
  int count=0;
  nextFile:   for (  final PsiFile psiFile : searchIn) {
    count=updateIndicator(indicator,totalCount,count,psiFile);
    if (!psiFile.isValid())     continue;
    final Set<PsiFile> precomputedDeps;
    if (builder != null) {
      final Set<PsiFile> depsByFile=builder.getDependencies().get(psiFile);
      precomputedDeps=depsByFile != null ? new HashSet<PsiFile>(depsByFile) : new HashSet<PsiFile>();
      precomputedDeps.retainAll(searchFor);
      if (precomputedDeps.isEmpty())       continue nextFile;
    }
 else {
      precomputedDeps=Collections.unmodifiableSet(searchFor);
    }
    DependenciesBuilder.analyzeFileDependencies(psiFile,new DependenciesBuilder.DependencyProcessor(){
      public void process(      PsiElement place,      PsiElement dependency){
        PsiFile dependencyFile=dependency.getContainingFile();
        if (precomputedDeps.contains(dependencyFile)) {
          usages.add(new UsageInfo(place));
        }
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
