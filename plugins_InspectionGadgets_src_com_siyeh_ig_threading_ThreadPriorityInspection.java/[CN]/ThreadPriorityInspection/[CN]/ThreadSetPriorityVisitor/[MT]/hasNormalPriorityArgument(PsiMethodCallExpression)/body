{
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=argumentList.getExpressions();
  if (expressions.length != 1) {
    return false;
  }
  final PsiExpression expression=expressions[0];
  if (!(expression instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
  final String referenceName=referenceExpression.getReferenceName();
  @NonNls final String normPriority="NORM_PRIORITY";
  if (!normPriority.equals(referenceName)) {
    return false;
  }
  final PsiExpression qualifierExpression=referenceExpression.getQualifierExpression();
  if (!(qualifierExpression instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression classReferenceExpression=(PsiReferenceExpression)qualifierExpression;
  final PsiElement element=classReferenceExpression.resolve();
  if (!(element instanceof PsiClass)) {
    return false;
  }
  final PsiClass aClass=(PsiClass)element;
  final String className=aClass.getQualifiedName();
  return "java.lang.Thread".equals(className);
}
