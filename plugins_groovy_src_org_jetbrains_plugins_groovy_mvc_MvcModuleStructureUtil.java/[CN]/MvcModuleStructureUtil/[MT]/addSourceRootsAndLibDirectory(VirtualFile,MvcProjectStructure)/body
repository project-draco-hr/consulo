{
  ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(structure.myModule);
  Map<VirtualFile,Boolean> sourceRoots=new HashMap<VirtualFile,Boolean>();
  for (  ContentEntry entry : moduleRootManager.getContentEntries()) {
    for (    ContentFolder folder : entry.getFolders(ContentFolderType.PRODUCTION,ContentFolderType.TEST)) {
      sourceRoots.put(folder.getFile(),folder.getType() == ContentFolderType.TEST);
    }
  }
  root.refresh(false,true);
  final List<Consumer<ContentEntry>> actions=ContainerUtil.newArrayList();
  for (  final String src : structure.getSourceFolders()) {
    addSourceFolder(root,src,false,actions,sourceRoots);
  }
  for (  final String src : structure.getTestFolders()) {
    addSourceFolder(root,src,true,actions,sourceRoots);
  }
  for (  final String src : structure.getInvalidSourceFolders()) {
    removeSrcFolderFromRoots(root.findFileByRelativePath(src),actions,sourceRoots);
  }
  for (  final String excluded : structure.getExcludedFolders()) {
    final VirtualFile src=root.findFileByRelativePath(excluded);
    if (src != null && moduleRootManager.getFileIndex().isInContent(src)) {
      actions.add(new Consumer<ContentEntry>(){
        public void consume(        ContentEntry contentEntry){
          contentEntry.addFolder(src,ContentFolderType.EXCLUDED);
        }
      }
);
    }
  }
  final Consumer<ModifiableRootModel> modifyLib=addJarDirectory(root,structure.myModule,structure.getUserLibraryName());
  if (actions.isEmpty() && modifyLib == null && findContentEntry(moduleRootManager,root) != null) {
    return null;
  }
  return new Consumer<ModifiableRootModel>(){
    public void consume(    ModifiableRootModel model){
      ContentEntry contentEntry=findContentEntry(model,root);
      if (contentEntry == null) {
        contentEntry=model.addContentEntry(root);
      }
      for (      final Consumer<ContentEntry> action : actions) {
        action.consume(contentEntry);
      }
      if (modifyLib != null) {
        modifyLib.consume(model);
      }
    }
  }
;
}
