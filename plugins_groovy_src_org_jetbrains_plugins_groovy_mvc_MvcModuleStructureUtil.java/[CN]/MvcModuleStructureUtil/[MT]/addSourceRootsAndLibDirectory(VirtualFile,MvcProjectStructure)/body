{
  Set<VirtualFile> sourceRoots=CollectionFactory.newTroveSet(ModuleRootManager.getInstance(structure.myModule).getSourceRoots());
  root.refresh(false,true);
  final List<Consumer<ContentEntry>> actions=CollectionFactory.arrayList();
  for (  final String src : structure.getSourceFolders()) {
    addSourceFolder(root,src,false,actions,sourceRoots);
  }
  for (  final String src : structure.getTestFolders()) {
    addSourceFolder(root,src,true,actions,sourceRoots);
  }
  for (  final String src : structure.getInvalidSourceFolders()) {
    removeSrcFolderFromRoots(root.findFileByRelativePath(src),actions,sourceRoots);
  }
  final Set<VirtualFile> excludeRoots=CollectionFactory.newTroveSet(ModuleRootManager.getInstance(structure.myModule).getExcludeRoots());
  for (  final String excluded : structure.getExcludedFolders()) {
    excludeDirectory(root,excluded,actions,excludeRoots);
  }
  final Consumer<ModifiableRootModel> modifyLib=addJarDirectory(root,structure.myModule,structure.getUserLibraryName());
  if (actions.isEmpty() && modifyLib == null && findContentEntry(ModuleRootManager.getInstance(structure.myModule),root) != null) {
    return null;
  }
  return new Consumer<ModifiableRootModel>(){
    public void consume(    ModifiableRootModel model){
      ContentEntry contentEntry=findContentEntry(model,root);
      if (contentEntry == null) {
        contentEntry=model.addContentEntry(root);
      }
      for (      final Consumer<ContentEntry> action : actions) {
        action.consume(contentEntry);
      }
      if (modifyLib != null) {
        modifyLib.consume(model);
      }
    }
  }
;
}
