{
  if (token.getTemplate() != null) {
    if (attr2value.size() > 0 || XmlZenCodingTemplate.isTrueXml(callback)) {
      TemplateImpl modifiedTemplate=token.getTemplate().copy();
      XmlTag tag=XmlZenCodingTemplate.parseXmlTagInTemplate(token.getTemplate().getString(),callback,true);
      if (tag != null) {
        for (Iterator<Pair<String,String>> iterator=attr2value.iterator(); iterator.hasNext(); ) {
          Pair<String,String> pair=iterator.next();
          if (tag.getAttribute(pair.first) != null) {
            tag.setAttribute(pair.first,getValue(pair,numberInIteration));
            iterator.remove();
          }
        }
        if (XmlZenCodingTemplate.isTrueXml(callback)) {
          closeUnclosingTags(tag);
        }
        String text=null;
        if (!containsAttrsVar(modifiedTemplate) && attr2value.size() > 0) {
          String textWithAttrs=addAttrsVar(modifiedTemplate,tag);
          if (textWithAttrs != null) {
            text=textWithAttrs;
          }
 else {
            for (Iterator<Pair<String,String>> iterator=attr2value.iterator(); iterator.hasNext(); ) {
              Pair<String,String> pair=iterator.next();
              tag.setAttribute(pair.first,getValue(pair,numberInIteration));
              iterator.remove();
            }
          }
        }
        if (text == null) {
          text=tag.getContainingFile().getText();
        }
        modifiedTemplate.setString(text);
        removeVariablesWhichHasNoSegment(modifiedTemplate);
        Map<String,String> predefinedValues=buildPredefinedValues(attr2value,numberInIteration);
        callback.expandTemplate(modifiedTemplate,predefinedValues);
        return;
      }
    }
    callback.expandTemplate(token.getTemplate(),null);
  }
 else {
    Map<String,String> predefinedValues=buildPredefinedValues(attr2value,numberInIteration);
    callback.expandTemplate(token.getKey(),predefinedValues);
  }
}
