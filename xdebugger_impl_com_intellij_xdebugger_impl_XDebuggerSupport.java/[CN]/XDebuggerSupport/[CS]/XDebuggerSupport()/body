{
  myBreakpointPanelProvider=new XBreakpointPanelProvider();
  myToggleLineBreakpointActionHandler=new XToggleLineBreakpointActionHandler();
  myStepOverHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.stepOver(false);
    }
  }
;
  myStepIntoHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.stepInto();
    }
  }
;
  myStepOutHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.stepOut();
    }
  }
;
  myForceStepOverHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.stepOver(true);
    }
  }
;
  myForceStepIntoHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.forceStepInto();
    }
  }
;
  mySmartStepIntoHandler=new XDebuggerSmartStepIntoHandler();
  myRunToCursorHandler=new XDebuggerRunToCursorActionHandler(false);
  myForceRunToCursor=new XDebuggerRunToCursorActionHandler(true);
  myResumeHandler=new DebuggerActionHandler(){
    @Override public void perform(    @NotNull Project project,    AnActionEvent event){
      XDebugSession session=XDebuggerManager.getInstance(project).getCurrentSession();
      if (session != null) {
        session.resume();
      }
 else {
        new ChooseDebugConfigurationAction().actionPerformed(event);
      }
    }
    @Override public boolean isEnabled(    @NotNull Project project,    AnActionEvent event){
      XDebugSession session=XDebuggerManager.getInstance(project).getCurrentSession();
      return session == null || session.isPaused();
    }
  }
;
  myPauseHandler=new XDebuggerPauseActionHandler();
  myShowExecutionPointHandler=new XDebuggerSuspendedActionHandler(){
    protected void perform(    @NotNull final XDebugSession session,    final DataContext dataContext){
      session.showExecutionPoint();
    }
  }
;
  myMuteBreakpointsHandler=new XDebuggerMuteBreakpointsHandler();
  myEvaluateHandler=new XDebuggerEvaluateActionHandler();
  myQuickEvaluateHandler=new XQuickEvaluateHandler();
  mySettingsPanelProvider=new XDebuggerSettingsPanelProviderImpl();
}
