{
  final GrParameter[] parameters=method.getParameterList().getParameters();
  StringBuilder builder=new StringBuilder();
  if (method.isConstructor()) {
    builder.append("this");
  }
 else {
    if (method.getReturnType() != PsiType.VOID) {
      builder.append("return ");
    }
    builder.append(method.getName());
  }
  builder.append("(");
  for (  GrParameter parameter : parameters) {
    if (actualParams.contains(parameter)) {
      builder.append(parameter.getName());
    }
 else {
      LOG.assertTrue(parameter.isOptional());
      final GrExpression initializer=parameter.getDefaultInitializer();
      LOG.assertTrue(initializer != null);
      builder.append(initializer.getText());
    }
    builder.append(", ");
  }
  builder.delete(builder.length() - 2,builder.length());
  builder.append(")");
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(myProject);
  final GrStatement delegateCall;
  PsiElement context=method.getContainingClass() == null ? method : method.getContainingClass();
  if (method.isConstructor()) {
    delegateCall=factory.createConstructorInvocation(builder.toString(),context);
  }
 else {
    delegateCall=factory.createStatementFromText(builder.toString(),context);
  }
  final StringBuilder result=new StringBuilder();
  delegateCall.accept(new CodeBlockGenerator(result,myProject));
  return result;
}
