{
  if (psiClass.getContainingClass() != null)   return;
  if (psiClass instanceof PsiAnonymousClass)   return;
  Map<PsiMethod,String> setters=context.getSetters();
  Set<Map.Entry<PsiMethod,String>> entries=setters.entrySet();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    entries=ImmutableSortedSet.copyOf(new Comparator<Map.Entry<PsiMethod,String>>(){
      @Override public int compare(      Map.Entry<PsiMethod,String> o1,      Map.Entry<PsiMethod,String> o2){
        return o1.getValue().compareTo(o2.getValue());
      }
    }
,entries);
  }
  for (  Map.Entry<PsiMethod,String> entry : entries) {
    PsiMethod setter=entry.getKey();
    if (setter instanceof PsiCompiledElement)     setter=(PsiMethod)((PsiCompiledElement)setter).getMirror();
    String name=entry.getValue();
    PsiParameter[] parameters=setter.getParameterList().getParameters();
    PsiParameter parameter=parameters[parameters.length - 1];
    final PsiType parameterType=context.typeProvider.getParameterType(parameter);
    builder.append("private static ");
    if (setter.hasTypeParameters()) {
      writeTypeParameters(builder,setter,classNameProvider);
    }
    if (parameterType instanceof PsiPrimitiveType) {
      builder.append(parameterType.getCanonicalText()).append(' ');
    }
 else {
      if (setter.hasTypeParameters()) {
        builder.delete(builder.length() - 1,builder.length());
        builder.append(", ");
      }
 else {
        builder.append('<');
      }
      builder.append("Value");
      if (!parameterType.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) {
        builder.append(" extends ");
        writeType(builder,parameterType,psiClass,classNameProvider);
      }
      builder.append('>');
      builder.append("Value ");
    }
    builder.append(name);
    final boolean isStatic=setter.hasModifierProperty(PsiModifier.STATIC);
    final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(context.project);
    if (!(parameterType instanceof PsiPrimitiveType)) {
      parameter=factory.createParameter(parameter.getName(),"Value",null);
    }
    parameters[parameters.length - 1]=parameter;
    PsiParameter[] actual;
    if (isStatic) {
      actual=parameters;
    }
 else {
      final String typeText;
      final PsiClass containingClass=setter.getContainingClass();
      if (containingClass == null) {
        if (setter instanceof GrGdkMethod) {
          typeText=((GrGdkMethod)setter).getStaticMethod().getParameterList().getParameters()[0].getType().getCanonicalText();
        }
 else {
          typeText=CommonClassNames.JAVA_LANG_OBJECT;
        }
      }
 else {
        typeText=containingClass.getQualifiedName();
      }
      final GrParameter propOwner=factory.createParameter("propOwner",typeText,null);
      actual=new PsiParameter[parameters.length + 1];
      actual[0]=propOwner;
      System.arraycopy(parameters,0,actual,1,parameters.length);
    }
    GenerationUtil.writeParameterList(builder,actual,classNameProvider,context);
    builder.append("{\n");
    context.myUsedVarNames.add("propOwner");
    final GrExpression[] args=new GrExpression[parameters.length];
    for (int i=0; i < parameters.length; i++) {
      args[i]=factory.createExpressionFromText(parameters[i].getName());
      context.myUsedVarNames.add(parameters[i].getName());
    }
    GroovyPsiElement place;
    if (psiClass instanceof GroovyPsiElement) {
      place=(GroovyPsiElement)psiClass;
    }
 else     if (psiClass instanceof GroovyScriptClass) {
      place=((GroovyScriptClass)psiClass).getContainingFile();
    }
 else {
      LOG.error("wrong class!!!");
      place=null;
    }
    new ExpressionGenerator(builder,context).invokeMethodOn(setter,isStatic ? null : factory.createExpressionFromText("propOwner"),args,GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,PsiSubstitutor.EMPTY,place);
    builder.append(";\n");
    builder.append("return ").append(parameter.getName()).append(";\n");
    builder.append("}\n");
  }
  final String name=context.getRefSetterName();
  if (name != null) {
    builder.append("private static <T> T ").append(name).append("(groovy.lang.Reference<T> ref, T newValue) {\nref.set(newValue);\nreturn newValue;\n}");
  }
}
