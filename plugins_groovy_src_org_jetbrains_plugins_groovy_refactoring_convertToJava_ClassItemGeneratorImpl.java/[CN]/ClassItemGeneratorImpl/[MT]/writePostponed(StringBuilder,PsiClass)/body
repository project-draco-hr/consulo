{
  if (psiClass.getContainingClass() != null)   return;
  if (psiClass instanceof PsiAnonymousClass)   return;
  Map<PsiMethod,String> setters=context.getSetters();
  for (  Map.Entry<PsiMethod,String> entry : setters.entrySet()) {
    PsiMethod setter=entry.getKey();
    String name=entry.getValue();
    PsiParameter[] parameters=setter.getParameterList().getParameters();
    LOG.assertTrue(parameters.length == 1 || parameters.length == 2);
    PsiParameter[] actual;
    PsiParameter parameter=parameters[parameters.length - 1];
    final PsiType parameterType=context.typeProvider.getParameterType(parameter);
    builder.append("private static ");
    if (setter.hasTypeParameters()) {
      writeTypeParameters(builder,setter,classNameProvider);
    }
    if (parameterType instanceof PsiPrimitiveType) {
      builder.append(parameterType.getCanonicalText()).append(' ');
    }
 else {
      if (setter.hasTypeParameters()) {
        builder.delete(builder.length() - 1,builder.length());
      }
 else {
        builder.append('<');
      }
      builder.append(" Value");
      if (!parameterType.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) {
        builder.append(" extends ");
        writeType(builder,parameterType,psiClass,classNameProvider);
      }
      builder.append('>');
      builder.append("Value ");
    }
    builder.append(name);
    final boolean isStatic=setter.hasModifierProperty(PsiModifier.STATIC);
    final PsiClass containingClass=setter.getContainingClass();
    LOG.assertTrue(containingClass != null);
    final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(context.project);
    if (!(parameterType instanceof PsiPrimitiveType)) {
      parameter=factory.createParameter(parameter.getName(),"Value",null);
    }
    if (isStatic) {
      actual=new PsiParameter[]{parameter};
    }
 else {
      final GrParameter propOwner=factory.createParameter("propOwner",containingClass.getQualifiedName(),null);
      actual=new PsiParameter[]{propOwner,parameter};
    }
    GenerationUtil.writeParameterList(builder,actual,classNameProvider,context);
    if (isStatic) {
      builder.append("{\n").append(containingClass.getQualifiedName());
    }
 else {
      builder.append("{\npropOwner");
    }
    builder.append(".").append(setter.getName()).append('(').append(parameter.getName()).append(");\nreturn ").append(parameter.getName()).append(";\n}\n");
  }
  final String name=context.getRefSetterName();
  if (name != null) {
    builder.append("private static <T> T ").append(name).append("(groovy.lang.Reference<T> ref, T newValue) {\nref.set(newValue);\nreturn newValue;\n}");
  }
}
