{
  if (psiClass.getContainingClass() != null)   return;
  if (psiClass instanceof PsiAnonymousClass)   return;
  Map<PsiMethod,String> setters=context.getSetters();
  Set<Map.Entry<PsiMethod,String>> entries=setters.entrySet();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    entries=ImmutableSortedSet.copyOf(new Comparator<Map.Entry<PsiMethod,String>>(){
      @Override public int compare(      Map.Entry<PsiMethod,String> o1,      Map.Entry<PsiMethod,String> o2){
        return o1.getValue().compareTo(o2.getValue());
      }
    }
,entries);
  }
  for (  Map.Entry<PsiMethod,String> entry : entries) {
    new SetterWriter(builder,psiClass,entry.getKey(),entry.getValue(),classNameProvider,context).write();
  }
  final String name=context.getRefSetterName();
  if (name != null) {
    builder.append("private static <T> T ").append(name).append("(groovy.lang.Reference<T> ref, T newValue) {\nref.set(newValue);\nreturn newValue;\n}");
  }
}
