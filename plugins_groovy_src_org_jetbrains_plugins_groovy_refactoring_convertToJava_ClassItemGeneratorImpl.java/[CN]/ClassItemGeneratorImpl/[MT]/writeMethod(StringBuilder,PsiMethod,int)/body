{
  if (method == null)   return;
  String name=method.getName();
  boolean isAbstract=GenerationUtil.isAbstractInJava(method);
  PsiModifierList modifierList=method.getModifierList();
  final PsiClass containingClass=method.getContainingClass();
  if (method.isConstructor() && containingClass != null && containingClass.isEnum()) {
    writeModifiers(builder,modifierList,ENUM_CONSTRUCTOR_MODIFIERS);
  }
 else {
    writeModifiers(builder,modifierList);
  }
  if (method.hasTypeParameters()) {
    writeTypeParameters(builder,method,classNameProvider);
    builder.append(" ");
  }
  if (!method.isConstructor()) {
    PsiType retType=PsiUtil.getSmartReturnType(method);
    writeType(builder,retType,method,classNameProvider);
    builder.append(" ");
  }
  builder.append(name);
  final ArrayList<GrParameter> actualParams;
  if (method instanceof GrMethod) {
    actualParams=getActualParams((GrMethod)method,skipOptional);
    GenerationUtil.writeParameterList(builder,actualParams.toArray(new GrParameter[actualParams.size()]),classNameProvider);
  }
 else {
    LOG.assertTrue(skipOptional == 0);
    GenerationUtil.writeParameterList(builder,method.getParameterList().getParameters(),classNameProvider);
    actualParams=null;
  }
  GenerationUtil.writeThrowsList(builder,method.getThrowsList(),getMethodExceptions(method),classNameProvider);
  if (!isAbstract) {
    if (method instanceof GrMethod) {
      if (skipOptional == 0) {
        ((GrMethod)method).accept(new CodeBlockGenerator(builder,myProject));
      }
 else {
        builder.append("{\n").append(generateDelegateCall((GrMethod)method,actualParams)).append("\n}\n");
      }
    }
 else     if (method instanceof GrAccessorMethod) {
      writeAccessorBody(builder,method);
    }
 else     if (method instanceof LightMethodBuilder && containingClass instanceof GroovyScriptClass) {
      if ("main".equals(method.getName())) {
        writeMainScriptMethodBody(builder,method);
      }
 else       if ("run".equals(method.getName())) {
        writeRunScriptMethodBody(builder,method);
      }
    }
 else {
      builder.append("{//todo\n}");
    }
  }
 else {
    builder.append(";");
  }
}
