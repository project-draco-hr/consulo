{
  if (method == null)   return;
  String name=method.getName();
  boolean isAbstract=GenerationUtil.isAbstractInJava(method);
  PsiModifierList modifierList=method.getModifierList();
  final PsiClass containingClass=method.getContainingClass();
  if (method.isConstructor() && containingClass != null && containingClass.isEnum()) {
    ModifierListGenerator.writeModifiers(builder,modifierList,ModifierListGenerator.ENUM_CONSTRUCTOR_MODIFIERS);
  }
 else {
    ModifierListGenerator.writeModifiers(builder,modifierList);
  }
  if (method.hasTypeParameters()) {
    writeTypeParameters(builder,method,classNameProvider);
    builder.append(' ');
  }
  if (!method.isConstructor()) {
    PsiType retType=context.typeProvider.getReturnType(method);
    writeType(builder,retType,method,classNameProvider);
    builder.append(' ');
  }
  builder.append(name);
  if (method instanceof GroovyPsiElement) {
    context.searchForLocalVarsToWrap((GroovyPsiElement)method);
  }
  GenerationUtil.writeParameterList(builder,method.getParameterList().getParameters(),classNameProvider,context);
  if (method instanceof GrAnnotationMethod) {
    GrDefaultAnnotationValue defaultAnnotationValue=((GrAnnotationMethod)method).getDefaultValue();
    if (defaultAnnotationValue != null) {
      builder.append("default ");
      GrAnnotationMemberValue defaultValue=defaultAnnotationValue.getDefaultValue();
      if (defaultValue != null) {
        defaultValue.accept(new AnnotationGenerator(builder,context));
      }
    }
  }
  GenerationUtil.writeThrowsList(builder,method.getThrowsList(),getMethodExceptions(method),classNameProvider);
  if (!isAbstract) {
    if (method instanceof GrMethod) {
      if (method instanceof GrReflectedMethod && ((GrReflectedMethod)method).getSkippedParameters().length > 0) {
        builder.append("{\n").append(generateDelegateCall((GrReflectedMethod)method)).append("\n}\n");
      }
 else {
        new CodeBlockGenerator(builder,context.extend()).generateMethodBody((GrMethod)method);
      }
    }
 else     if (method instanceof GrAccessorMethod) {
      writeAccessorBody(builder,method);
    }
 else     if (method instanceof LightMethodBuilder && containingClass instanceof GroovyScriptClass) {
      if ("main".equals(method.getName())) {
        writeMainScriptMethodBody(builder,method);
      }
 else       if ("run".equals(method.getName())) {
        writeRunScriptMethodBody(builder,method);
      }
    }
 else {
      builder.append("{//todo\n}");
    }
  }
 else {
    builder.append(';');
  }
}
