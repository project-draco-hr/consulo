{
  long id=env.getExecutionId();
  if (id == 0) {
    id=env.assignNewExecutionId();
  }
  RunProfile profile=env.getRunProfile();
  if (profile instanceof RunConfiguration) {
    final RunConfiguration runConfiguration=(RunConfiguration)profile;
    final RunManagerImpl runManager=RunManagerImpl.getInstanceImpl(myProject);
    final List<BeforeRunTask> activeTasks=new ArrayList<BeforeRunTask>();
    activeTasks.addAll(runManager.getBeforeRunTasks(runConfiguration));
    final DataContext projectContext=SimpleDataContext.getProjectContext(myProject);
    if (!activeTasks.isEmpty()) {
      final long finalId=id;
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        /** 
 * @noinspection SSBasedInspection
 */
        @Override public void run(){
          for (          BeforeRunTask task : activeTasks) {
            if (myProject.isDisposed())             return;
            BeforeRunTaskProvider<BeforeRunTask> provider=BeforeRunTaskProvider.getProvider(myProject,task.getProviderId());
            if (provider == null) {
              LOG.warn("Cannot find BeforeRunTaskProvider for id='" + task.getProviderId() + "'");
              continue;
            }
            ExecutionEnvironment taskEnvironment=new ExecutionEnvironmentBuilder(env).setContentToReuse(null).build();
            taskEnvironment.setExecutionId(finalId);
            if (!provider.executeTask(projectContext,runConfiguration,taskEnvironment,task)) {
              if (onCancelRunnable != null) {
                SwingUtilities.invokeLater(onCancelRunnable);
              }
              return;
            }
          }
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              if (!myProject.isDisposed()) {
                DumbService.getInstance(myProject).runWhenSmart(startRunnable);
              }
            }
          }
);
        }
      }
);
    }
 else {
      startRunnable.run();
    }
  }
 else {
    startRunnable.run();
  }
}
