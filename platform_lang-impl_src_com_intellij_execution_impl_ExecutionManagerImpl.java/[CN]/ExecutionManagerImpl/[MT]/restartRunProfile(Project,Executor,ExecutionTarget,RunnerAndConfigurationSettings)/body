{
  RunManagerImpl runManager=RunManagerImpl.getInstanceImpl(project);
  final RunManagerConfig config=runManager.getConfig();
  final List<Pair<RunContentDescriptor,Executor>> pairs=getRunningDescriptors(configuration);
  for (  Pair<RunContentDescriptor,Executor> pair : pairs) {
    ProcessHandler processHandler=pair.getFirst().getProcessHandler();
    if (processHandler == null)     continue;
    if (!processHandler.isProcessTerminated()) {
      if (config.isRestartRequiresConfirmation()) {
        DialogWrapper.DoNotAskOption option=new DialogWrapper.DoNotAskOption(){
          @Override public boolean isToBeShown(){
            return config.isRestartRequiresConfirmation();
          }
          @Override public void setToBeShown(          boolean value,          int exitCode){
            config.setRestartRequiresConfirmation(value);
          }
          @Override public boolean canBeHidden(){
            return true;
          }
          @Override public boolean shouldSaveOptionsOnCancel(){
            return false;
          }
          @Override public String getDoNotShowMessage(){
            return CommonBundle.message("dialog.options.do.not.show");
          }
        }
;
        if (Messages.OK != Messages.showOkCancelDialog(ExecutionBundle.message("rerun.confirmation.message",configuration.getName()),ExecutionBundle.message("rerun.confirmation.title") + " (" + pair.getSecond().getId()+ ")",CommonBundle.message("button.ok"),CommonBundle.message("button.cancel"),Messages.getQuestionIcon(),option)) {
          return;
        }
      }
      stop(processHandler);
      for (Iterator<Trinity<RunContentDescriptor,RunnerAndConfigurationSettings,Executor>> iterator=myRunningConfigurations.iterator(); iterator.hasNext(); ) {
        Trinity<RunContentDescriptor,RunnerAndConfigurationSettings,Executor> trinity=iterator.next();
        if (trinity.getFirst() == pair.getFirst()) {
          iterator.remove();
          break;
        }
      }
    }
  }
  if (pairs.isEmpty()) {
    ProgramRunnerUtil.executeConfiguration(project,configuration,executor,target);
    return;
  }
  Runnable runnable=new Runnable(){
    @Override public void run(){
      for (      Pair<RunContentDescriptor,Executor> pair : pairs) {
        ProcessHandler processHandler=pair.getFirst().getProcessHandler();
        if (processHandler == null)         continue;
        if (!processHandler.isProcessTerminated()) {
          awaitingTerminationAlarm.addRequest(this,100);
          return;
        }
      }
      ProgramRunnerUtil.executeConfiguration(project,configuration,executor,target);
    }
  }
;
  awaitingTerminationAlarm.addRequest(runnable,100);
}
