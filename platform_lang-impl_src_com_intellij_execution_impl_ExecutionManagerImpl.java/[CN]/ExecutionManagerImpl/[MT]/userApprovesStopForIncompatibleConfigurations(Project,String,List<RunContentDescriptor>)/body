{
  RunManagerImpl runManager=RunManagerImpl.getInstanceImpl(project);
  final RunManagerConfig config=runManager.getConfig();
  if (!config.isStopIncompatibleRequiresConfirmation())   return true;
  DialogWrapper.DoNotAskOption option=new DialogWrapper.DoNotAskOption(){
    @Override public boolean isToBeShown(){
      return config.isStopIncompatibleRequiresConfirmation();
    }
    @Override public void setToBeShown(    boolean value,    int exitCode){
      config.setStopIncompatibleRequiresConfirmation(value);
    }
    @Override public boolean canBeHidden(){
      return true;
    }
    @Override public boolean shouldSaveOptionsOnCancel(){
      return false;
    }
    @NotNull @Override public String getDoNotShowMessage(){
      return CommonBundle.message("dialog.options.do.not.show");
    }
  }
;
  final StringBuilder names=new StringBuilder();
  for (  final RunContentDescriptor descriptor : runningIncompatibleDescriptors) {
    String name=descriptor.getDisplayName();
    if (names.length() > 0) {
      names.append(", ");
    }
    names.append(StringUtil.isEmpty(name) ? ExecutionBundle.message("run.configuration.no.name") : String.format("'%s'",name));
  }
  return Messages.showOkCancelDialog(project,ExecutionBundle.message("stop.incompatible.confirmation.message",configName,names.toString(),runningIncompatibleDescriptors.size()),ExecutionBundle.message("incompatible.configuration.is.running.dialog.title",runningIncompatibleDescriptors.size()),ExecutionBundle.message("stop.incompatible.confirmation.button.text"),CommonBundle.message("button.cancel"),Messages.getQuestionIcon(),option) == Messages.OK;
}
