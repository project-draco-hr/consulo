{
  final RunContentDescriptor reuseContent=ExecutionManager.getInstance(project).getContentManager().getReuseContent(executor,env.getContentToReuse());
  final RunProfile profile=env.getRunProfile();
  project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processStartScheduled(executor.getId(),env);
  Runnable startRunnable=new Runnable(){
    @Override public void run(){
      if (project.isDisposed())       return;
      boolean started=false;
      try {
        project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processStarting(executor.getId(),env);
        final RunContentDescriptor descriptor=starter.execute(project,executor,state,reuseContent,env);
        if (descriptor != null) {
          final Trinity<RunContentDescriptor,RunnerAndConfigurationSettings,Executor> trinity=Trinity.create(descriptor,env.getRunnerAndConfigurationSettings(),executor);
          myRunningConfigurations.add(trinity);
          Disposer.register(descriptor,new Disposable(){
            @Override public void dispose(){
              myRunningConfigurations.remove(trinity);
            }
          }
);
          ExecutionManager.getInstance(project).getContentManager().showRunContent(executor,descriptor,reuseContent);
          final ProcessHandler processHandler=descriptor.getProcessHandler();
          if (processHandler != null) {
            processHandler.startNotify();
            project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processStarted(executor.getId(),env,processHandler);
            started=true;
            processHandler.addProcessListener(new ProcessExecutionListener(project,profile,processHandler));
          }
        }
      }
 catch (      ExecutionException e) {
        ExecutionUtil.handleExecutionError(project,executor.getToolWindowId(),profile,e);
        LOG.info(e);
      }
 finally {
        if (!started) {
          project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processNotStarted(executor.getId(),env);
        }
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    startRunnable.run();
  }
 else {
    compileAndRun(startRunnable,env,state,new Runnable(){
      @Override public void run(){
        if (!project.isDisposed()) {
          project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processNotStarted(executor.getId(),env);
        }
      }
    }
);
  }
}
