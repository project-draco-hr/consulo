{
  final RunContentDescriptor reuseContent=ExecutionManager.getInstance(project).getContentManager().getReuseContent(executor,env.getContentToReuse());
  final RunProfile profile=env.getRunProfile();
  Runnable startRunnable=new Runnable(){
    public void run(){
      boolean started=false;
      try {
        if (project.isDisposed())         return;
        project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processStarting(profile);
        final RunContentDescriptor descriptor=starter.execute(project,executor,state,reuseContent,env);
        if (descriptor != null) {
          ExecutionManager.getInstance(project).getContentManager().showRunContent(executor,descriptor);
          final ProcessHandler processHandler=descriptor.getProcessHandler();
          if (processHandler != null) {
            processHandler.startNotify();
            project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processStarted(profile,processHandler);
            started=true;
            processHandler.addProcessListener(new ProcessExecutionListener(project,profile,processHandler));
          }
        }
      }
 catch (      ExecutionException e) {
        ExecutionUtil.handleExecutionError(project,executor.getToolWindowId(),profile,e);
      }
      if (!started) {
        project.getMessageBus().syncPublisher(EXECUTION_TOPIC).processNotStarted(profile);
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    startRunnable.run();
  }
 else {
    compileAndRun(startRunnable,profile,state);
  }
}
