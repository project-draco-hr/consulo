{
  final PsiElement comparisonToken=descriptor.getPsiElement();
  final PsiBinaryExpression expression=(PsiBinaryExpression)comparisonToken.getParent();
  boolean negated=false;
  final PsiJavaToken sign=expression.getOperationSign();
  if (sign == null) {
    return;
  }
  if (sign.getTokenType().equals(JavaTokenType.NE)) {
    negated=true;
  }
  final PsiExpression lhs=expression.getLOperand();
  if (lhs == null) {
    return;
  }
  final PsiExpression strippedLhs=ParenthesesUtils.stripParentheses(lhs);
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiExpression strippedRhs=ParenthesesUtils.stripParentheses(rhs);
  final String expString;
  if (ParenthesesUtils.getPrecendence(strippedLhs) > ParenthesesUtils.METHOD_CALL_PRECEDENCE) {
    expString='(' + strippedLhs.getText() + ").equals("+ strippedRhs.getText()+ ')';
  }
 else {
    expString=strippedLhs.getText() + ".equals(" + strippedRhs.getText()+ ')';
  }
  final String newExpression;
  if (negated) {
    newExpression='!' + expString;
  }
 else {
    newExpression=expString;
  }
  replaceExpression(project,expression,newExpression);
}
