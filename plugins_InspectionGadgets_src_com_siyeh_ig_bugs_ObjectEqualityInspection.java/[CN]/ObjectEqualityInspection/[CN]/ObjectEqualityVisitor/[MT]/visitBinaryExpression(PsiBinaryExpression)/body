{
  super.visitBinaryExpression(expression);
  if (!ComparisonUtils.isEqualityComparison(expression)) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  if (!isObjectType(rhs)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  if (!isObjectType(lhs)) {
    return;
  }
  if (m_ignoreEnums && (isEnumType(rhs) || isEnumType(lhs))) {
    return;
  }
  if (m_ignoreClassObjects && (isJavaLangClass(rhs) || isJavaLangClass(lhs))) {
    return;
  }
  final PsiMethod method=(PsiMethod)PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  if (method != null) {
    final String methodName=method.getName();
    if ("equals".equals(methodName)) {
      return;
    }
  }
  final PsiJavaToken sign=expression.getOperationSign();
  if (sign == null) {
    return;
  }
  registerError(sign);
}
