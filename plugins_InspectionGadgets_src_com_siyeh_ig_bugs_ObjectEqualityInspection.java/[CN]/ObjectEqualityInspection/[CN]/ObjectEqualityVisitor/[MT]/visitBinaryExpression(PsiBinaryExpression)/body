{
  super.visitBinaryExpression(expression);
  if (!(expression.getROperand() != null)) {
    return;
  }
  if (!ComparisonUtils.isEqualityComparison(expression)) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  if (!isObjectType(rhs)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  if (!isObjectType(lhs)) {
    return;
  }
  if (m_ignoreEnums && (isEnumType(rhs) || isEnumType(lhs))) {
    return;
  }
  if (m_ignoreClassObjects && (isClass(rhs) || isClass(lhs))) {
    return;
  }
  if (m_ignorePrivateConstructors && (typeHasPrivateConstructor(lhs) || typeHasPrivateConstructor(rhs))) {
    return;
  }
  final PsiMethod method=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  if (method != null) {
    final String methodName=method.getName();
    if (HardcodedMethodConstants.EQUALS.equals(methodName)) {
      return;
    }
  }
  final PsiJavaToken sign=expression.getOperationSign();
  registerError(sign);
}
