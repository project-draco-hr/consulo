{
  final GlobalSearchScope scope=GlobalSearchScope.allScope(aClass.getProject());
  final PsiElementProcessor.CollectElementsWithLimit<PsiClass> processor=new PsiElementProcessor.CollectElementsWithLimit(6);
  final ProgressManager progressManager=ProgressManager.getInstance();
  progressManager.runProcess(new Runnable(){
    public void run(){
      ClassInheritorsSearch.search(aClass,scope,true,true).forEach(new PsiElementProcessorAdapter<PsiClass>(processor));
    }
  }
,null);
  if (processor.isOverflow()) {
    return false;
  }
  final Collection<PsiClass> implementors=processor.getCollection();
  for (  PsiClass implementor : implementors) {
    if (!implementor.isInterface() && !implementor.hasModifierProperty(PsiModifier.ABSTRACT)) {
      if (!hasOnlyPrivateConstructors(implementor)) {
        return false;
      }
    }
  }
  return true;
}
