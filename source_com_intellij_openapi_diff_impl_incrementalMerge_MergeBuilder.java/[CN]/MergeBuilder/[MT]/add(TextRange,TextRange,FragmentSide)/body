{
  LOG.assertTrue(base.getLength() == version.getLength());
  myPairs[side.getIndex()]=new EqualPair(base.getStartOffset(),version.getStartOffset(),base.getLength(),side,LOG);
  if (myPairs[side.otherSide().getIndex()] == null)   return;
  if (myPairs[0].baseStartFrom(myProcessed) && myPairs[1].baseStartFrom(myProcessed)) {
    processInsertOrConflict();
    return;
  }
  if (processNoIntersection())   return;
  for (int i=0; i < myPairs.length; i++) {
    EqualPair pair=myPairs[i];
    if (pair.startsFrom(myProcessed)) {
      processDeleteOrChange(FragmentSide.fromIndex(i).otherSide());
      return;
    }
  }
  if (!removeSingleSideBase())   return;
  LOG.assertTrue(myPairs[0].getBase() == myPairs[1].getBase());
  LOG.assertTrue(myPairs[0].getBase() > myProcessed[1]);
  addMergeFragment(myPairs[0].processVersion(myProcessed),proccesBaseChange(myPairs[0]),myPairs[1].processVersion(myProcessed));
  skipProcessed();
}
