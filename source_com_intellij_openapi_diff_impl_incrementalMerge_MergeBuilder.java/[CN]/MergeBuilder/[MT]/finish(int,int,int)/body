{
  int[] lengths=new int[]{leftLength,baseLength,rightLength};
  if (isProcessedUpto(lengths))   return myResult;
  int[] afterEnds=new int[3];
  for (int i=0; i < lengths.length; i++)   afterEnds[i]=lengths[i] + 1;
  FragmentSide notProcessedSide=getNotProcessedSide();
  if (notProcessedSide == null) {
    addTailChange(lengths);
    return myResult;
  }
  myPairs[notProcessedSide.getIndex()].grow(1);
  FragmentSide processedSide=notProcessedSide.otherSide();
  add(createRange(lengths,afterEnds,1),createRange(lengths,afterEnds,processedSide.getMergeIndex()),processedSide);
  if (!isProcessedUpto(afterEnds))   add(createRange(lengths,afterEnds,1),createRange(lengths,afterEnds,notProcessedSide.getMergeIndex()),notProcessedSide);
  LOG.assertTrue(isProcessedUpto(afterEnds));
  return myResult;
}
