{
  Instruction[] flow=owner.getControlFlow();
  ReadWriteVariableInstruction[] reads=ControlFlowBuilderUtil.getReadsWithoutPriorWrites(flow);
  for (  ReadWriteVariableInstruction read : reads) {
    PsiElement element=read.getElement();
    if (element instanceof GroovyPsiElement) {
      String name=read.getVariableName();
      GroovyPsiElement property=ResolveUtil.resolveProperty((GroovyPsiElement)element,name);
      if (property != null && !(property instanceof PsiParameter) && !(property instanceof PsiField) && PsiTreeUtil.isAncestor(owner,property,false)) {
        problemsHolder.registerProblem(element,GroovyInspectionBundle.message("unassigned.access.tooltip",name,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
    }
  }
}
