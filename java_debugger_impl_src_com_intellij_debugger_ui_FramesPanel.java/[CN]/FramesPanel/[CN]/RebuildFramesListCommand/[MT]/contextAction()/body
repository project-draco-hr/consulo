{
  final ThreadReferenceProxyImpl thread=myDebuggerContext.getThreadProxy();
  try {
    if (!getSuspendContext().getDebugProcess().getSuspendManager().isSuspended(thread)) {
      DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){
        public void run(){
          try {
            myFramesListener.setEnabled(false);
synchronized (myFramesList) {
              final DefaultListModel model=myFramesList.getModel();
              model.clear();
              model.addElement(new Object(){
                public String toString(){
                  return DebuggerBundle.message("frame.panel.frames.not.available");
                }
              }
);
              myFramesList.setSelectedIndex(0);
            }
          }
  finally {
            myFramesListener.setEnabled(true);
          }
        }
      }
);
      return;
    }
  }
 catch (  ObjectCollectedException e) {
    return;
  }
  List<StackFrameProxyImpl> frames;
  try {
    frames=thread.frames();
  }
 catch (  EvaluateException e) {
    frames=Collections.emptyList();
  }
  final StackFrameProxyImpl contextFrame=myDebuggerContext.getFrameProxy();
  final EvaluationContextImpl evaluationContext=myDebuggerContext.createEvaluationContext();
  final DebuggerManagerThreadImpl managerThread=myDebuggerContext.getDebugProcess().getManagerThread();
  final MethodsTracker tracker=new MethodsTracker();
  final int totalFramesCount=frames.size();
  int index=0;
  final IndexCounter indexCounter=new IndexCounter(totalFramesCount);
  final long timestamp=Math.abs(System.nanoTime());
  for (  StackFrameProxyImpl stackFrameProxy : frames) {
    managerThread.schedule(new AppendFrameCommand(getSuspendContext(),stackFrameProxy,evaluationContext,tracker,index++,stackFrameProxy.equals(contextFrame),timestamp,indexCounter));
  }
}
