{
  if (Registry.is("git.pause.when.collecting.outgoing.commits")) {
    try {
      TimeUnit.SECONDS.sleep(5);
    }
 catch (    InterruptedException e) {
      LOG.error(e);
    }
  }
  Map<GitRepository,List<GitBranchPair>> reposAndBranchesToPush=prepareReposAndBranchesToPush(pushSpecs.getAllSpecs());
  Set<GitRepository> repositories=reposAndBranchesToPush.keySet();
  Map<GitRepository,GitCommitsByBranch> commitsByRepoAndBranch=new HashMap<GitRepository,GitCommitsByBranch>();
  for (  GitRepository repository : repositories) {
    List<GitBranchPair> branchPairs=reposAndBranchesToPush.get(repository);
    if (branchPairs == null) {
      continue;
    }
    GitCommitsByBranch commitsByBranch=collectsCommitsToPush(repository,branchPairs);
    commitsByRepoAndBranch.put(repository,commitsByBranch);
  }
  return new GitCommitsByRepoAndBranch(commitsByRepoAndBranch);
}
