{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null || !ourAssertMethods.contains(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final boolean messageFirst;
  if (InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit")) {
    messageFirst=true;
  }
 else   if (InheritanceUtil.isInheritor(containingClass,"org.testng.Assert")) {
    messageFirst=false;
  }
 else {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final int parameterCount=parameterList.getParametersCount();
  if (parameterCount < 2 && methodName.startsWith("assert")) {
    registerMethodCallError(expression);
    return;
  }
  if (parameterCount < 1) {
    registerMethodCallError(expression);
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiParameter[] parameters=parameterList.getParameters();
  if (messageFirst) {
    final PsiType parameterType1=parameters[0].getType();
    if (!stringType.equals(parameterType1)) {
      registerMethodCallError(expression);
      return;
    }
    if (parameters.length == 2) {
      final PsiType parameterType2=parameters[1].getType();
      if (stringType.equals(parameterType2)) {
        registerMethodCallError(expression);
      }
    }
  }
 else {
    final PsiType lastParameterType=parameters[parameters.length - 1].getType();
    if (!stringType.equals(lastParameterType)) {
      registerMethodCallError(expression);
      return;
    }
    if (parameters.length == 2) {
      final PsiType firstParameterType=parameters[0].getType();
      if (stringType.equals(firstParameterType)) {
        registerMethodCallError(expression);
      }
    }
  }
}
