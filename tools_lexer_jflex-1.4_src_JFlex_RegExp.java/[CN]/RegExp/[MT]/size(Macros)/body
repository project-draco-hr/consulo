{
  RegExp1 unary;
  RegExp2 binary;
  RegExp content;
switch (type) {
case sym.BAR:
    binary=(RegExp2)this;
  return binary.r1.size(macros) + binary.r2.size(macros) + 2;
case sym.CONCAT:
binary=(RegExp2)this;
return binary.r1.size(macros) + binary.r2.size(macros);
case sym.STAR:
unary=(RegExp1)this;
content=(RegExp)unary.content;
return content.size(macros) + 2;
case sym.PLUS:
unary=(RegExp1)this;
content=(RegExp)unary.content;
return content.size(macros) + 2;
case sym.QUESTION:
unary=(RegExp1)this;
content=(RegExp)unary.content;
return content.size(macros);
case sym.BANG:
unary=(RegExp1)this;
content=(RegExp)unary.content;
return content.size(macros) * content.size(macros);
case sym.TILDE:
unary=(RegExp1)this;
content=(RegExp)unary.content;
return content.size(macros) * content.size(macros) * 3;
case sym.STRING:
case sym.STRING_I:
unary=(RegExp1)this;
return ((String)unary.content).length() + 1;
case sym.CHAR:
case sym.CHAR_I:
return 2;
case sym.CCLASS:
case sym.CCLASSNOT:
return 2;
case sym.MACROUSE:
unary=(RegExp1)this;
return macros.getDefinition((String)unary.content).size(macros);
}
throw new Error("unknown regexp type " + type);
}
