{
  RegExp1 unary;
  RegExp2 binary;
switch (type) {
case sym.CHAR:
case sym.CHAR_I:
case sym.CCLASS:
case sym.CCLASSNOT:
    return true;
case sym.BAR:
  binary=(RegExp2)this;
return binary.r1.isCharClass(macros) && binary.r2.isCharClass(macros);
case sym.MACROUSE:
unary=(RegExp1)this;
return macros.getDefinition((String)unary.content).isCharClass(macros);
default :
return false;
}
}
