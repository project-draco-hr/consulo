{
  Set<PsiField> constants=new THashSet<PsiField>();
  for (Iterator<PsiExpression> iterator=foundExpr.iterator(); iterator.hasNext(); ) {
    PsiExpression expression1=iterator.next();
    PsiElement parent=expression1.getParent();
    if (parent instanceof PsiField) {
      final PsiField field=(PsiField)parent;
      if (field.getInitializer() == expression1 && field.hasModifierProperty(PsiModifier.FINAL) && field.hasModifierProperty(PsiModifier.STATIC)) {
        constants.add(field);
        iterator.remove();
      }
    }
  }
  for (  final PsiField constant : constants) {
    final PsiClass containingClass=constant.getContainingClass();
    if (containingClass == null)     continue;
    boolean isAccessible=JavaPsiFacade.getInstance(constant.getProject()).getResolveHelper().isAccessible(constant,originalExpression,containingClass);
    if (!isAccessible && containingClass.getQualifiedName() == null) {
      continue;
    }
    final LocalQuickFix replaceQuickFix=new ReplaceFix(constant,originalExpression);
    fixes.add(replaceQuickFix);
  }
}
