{
  final GlobalInspectionContextImpl context=tool.getContext();
  Set<String> packages=packageContents.keySet();
  for (  String packageName : packages) {
    final InspectionPackageNode pNode=new InspectionPackageNode(packageName);
    final Set<RefElement> elements=packageContents.get(packageName);
    for (    RefElement refElement : elements) {
      final RefElementDescriptor descriptor=new RefElementDescriptor(refElement);
      if (context.getUIOptions().SHOW_ONLY_DIFF && tool.getElementStatus(refElement) == FileStatus.NOT_CHANGED)       continue;
      if (tool instanceof DescriptorProviderInspection) {
        final DescriptorProviderInspection descriptorProviderInspection=(DescriptorProviderInspection)tool;
        final CommonProblemDescriptor[] problems=problemElements.get(refElement);
        if (problems != null) {
          final RefElementNode elemNode=addNodeToParent(descriptor,tool,pNode);
          for (          CommonProblemDescriptor problem : problems) {
            if (context.getUIOptions().SHOW_ONLY_DIFF && descriptorProviderInspection.getProblemStatus(problem) == FileStatus.NOT_CHANGED) {
              continue;
            }
            elemNode.add(new ProblemDescriptionNode(refElement,problem,!(tool instanceof DuplicatePropertyInspection),descriptorProviderInspection));
          }
          if (problems.length == 1) {
            elemNode.setProblem(problems[0]);
          }
        }
      }
 else {
        if (packageContents != tool.getPackageContent()) {
          final Set<RefElement> currentElements=tool.getPackageContent().get(packageName);
          if (currentElements != null) {
            final Set<RefEntity> currentEntities=new HashSet<RefEntity>(currentElements);
            if (InspectionTool.contains(refElement,currentEntities))             continue;
          }
        }
        addNodeToParent(descriptor,tool,pNode);
      }
    }
    if (pNode.getChildCount() > 0)     content.add(pNode);
  }
}
