{
  scope.accept(new XmlRecursiveElementVisitor(){
    final XmlHighlightVisitor highlightVisitor=new XmlHighlightVisitor();
    HighlightInfoHolder myHolder;
    @Override public void visitFile(    final PsiFile file){
      myHolder=new HighlightInfoHolder(file,HighlightInfoFilter.EMPTY_ARRAY){
        @Override public boolean add(        @Nullable HighlightInfo info){
          if (info != null) {
            ProblemHighlightType problemHighlightType=HighlightInfo.convertType(info.type);
            GlobalInspectionUtil.createProblem(file,info.description,problemHighlightType,new TextRange(info.startOffset,info.endOffset),manager,problemDescriptionsProcessor,globalContext);
          }
          return super.add(info);
        }
      }
;
      myHolder.setWritable(true);
      super.visitFile(file);
    }
    @Override public void visitElement(    PsiElement element){
      highlightVisitor.visit(element,myHolder);
      super.visitElement(element);
    }
  }
);
}
