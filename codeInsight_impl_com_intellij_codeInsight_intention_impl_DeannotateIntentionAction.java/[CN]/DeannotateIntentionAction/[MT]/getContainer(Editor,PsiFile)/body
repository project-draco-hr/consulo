{
  final PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  PsiModifierListOwner listOwner=PsiTreeUtil.getParentOfType(element,PsiParameter.class,false);
  if (listOwner == null) {
    final PsiIdentifier psiIdentifier=PsiTreeUtil.getParentOfType(element,PsiIdentifier.class,false);
    if (psiIdentifier != null && psiIdentifier.getParent() instanceof PsiModifierListOwner) {
      listOwner=(PsiModifierListOwner)psiIdentifier.getParent();
    }
 else {
      PsiExpression expression=PsiTreeUtil.getParentOfType(element,PsiExpression.class);
      if (expression != null) {
        while (expression.getParent() instanceof PsiExpression) {
          expression=(PsiExpression)expression.getParent();
          if (expression instanceof PsiAssignmentExpression)           break;
        }
        final PsiElement parent=expression.getParent();
        if (parent instanceof PsiExpressionList) {
          int idx=-1;
          final PsiExpression[] args=((PsiExpressionList)parent).getExpressions();
          for (int i=0; i < args.length; i++) {
            PsiExpression arg=args[i];
            if (PsiTreeUtil.isAncestor(arg,expression,false)) {
              idx=i;
              break;
            }
          }
          if (idx > -1) {
            PsiElement grParent=parent.getParent();
            if (grParent instanceof PsiCall) {
              PsiMethod method=((PsiCall)grParent).resolveMethod();
              if (method != null) {
                final PsiParameter[] parameters=method.getParameterList().getParameters();
                if (parameters.length > idx) {
                  return parameters[idx];
                }
              }
            }
          }
        }
      }
    }
  }
  return listOwner;
}
