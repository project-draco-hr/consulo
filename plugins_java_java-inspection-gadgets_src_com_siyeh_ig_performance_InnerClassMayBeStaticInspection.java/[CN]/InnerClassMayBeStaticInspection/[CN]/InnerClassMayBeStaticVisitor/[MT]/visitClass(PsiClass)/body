{
  if (aClass.getContainingClass() != null && !aClass.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (aClass instanceof PsiAnonymousClass) {
    return;
  }
  final PsiClass[] innerClasses=aClass.getInnerClasses();
  for (  final PsiClass innerClass : innerClasses) {
    if (innerClass.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    final InnerClassReferenceVisitor visitor=new InnerClassReferenceVisitor(innerClass);
    innerClass.accept(visitor);
    if (!visitor.canInnerClassBeStatic()) {
      continue;
    }
    registerClassError(innerClass);
  }
}
