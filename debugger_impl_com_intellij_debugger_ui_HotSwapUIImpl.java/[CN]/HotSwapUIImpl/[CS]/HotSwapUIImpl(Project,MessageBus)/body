{
  myProject=project;
  bus.connect().subscribe(CompilerTopics.COMPILATION_STATUS,new CompilationStatusListener(){
    public void compilationFinished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      if (myProject.isDisposed()) {
        return;
      }
      if (errors == 0 && !aborted && myPerformHotswapAfterThisCompilation) {
        for (        HotSwapVetoableListener listener : myListeners) {
          if (!listener.shouldHotSwap(compileContext)) {
            return;
          }
        }
        final List<DebuggerSession> sessions=new ArrayList<DebuggerSession>();
        Collection<DebuggerSession> debuggerSessions=(DebuggerManagerEx.getInstanceEx(myProject)).getSessions();
        for (        final DebuggerSession debuggerSession : debuggerSessions) {
          if (debuggerSession.isAttached() && debuggerSession.getProcess().canRedefineClasses()) {
            sessions.add(debuggerSession);
          }
        }
        if (sessions.size() > 0) {
          hotSwapSessions(sessions);
        }
      }
      myPerformHotswapAfterThisCompilation=true;
    }
  }
);
}
