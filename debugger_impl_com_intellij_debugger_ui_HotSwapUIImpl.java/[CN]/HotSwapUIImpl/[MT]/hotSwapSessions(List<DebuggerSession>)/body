{
  final boolean shouldAskBeforeHotswap=myAskBeforeHotswap;
  myAskBeforeHotswap=true;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final String runHotswap=DebuggerSettings.getInstance().RUN_HOTSWAP_AFTER_COMPILE;
  if (shouldAskBeforeHotswap && DebuggerSettings.RUN_HOTSWAP_NEVER.equals(runHotswap)) {
    return;
  }
  final HotSwapProgressImpl findClassesProgress=new HotSwapProgressImpl(myProject);
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      final Map<DebuggerSession,Map<String,HotSwapFile>> modifiedClasses=getModifiedClasses(findClassesProgress,sessions);
      final Application application=ApplicationManager.getApplication();
      if (modifiedClasses.isEmpty()) {
        application.invokeLater(new Runnable(){
          public void run(){
            final String message=DebuggerBundle.message("status.hotswap.uptodate");
            ToolWindowManager.getInstance(myProject).notifyByBalloon(ToolWindowId.DEBUG,MessageType.INFO,message,Messages.getInformationIcon(),null);
            WindowManager.getInstance().getStatusBar(myProject).setInfo(message);
          }
        }
,ModalityState.NON_MODAL);
        return;
      }
      application.invokeLater(new Runnable(){
        public void run(){
          if (shouldAskBeforeHotswap && !DebuggerSettings.RUN_HOTSWAP_ALWAYS.equals(runHotswap)) {
            final RunHotswapDialog dialog=new RunHotswapDialog(myProject,sessions);
            dialog.show();
            if (!dialog.isOK()) {
              return;
            }
            modifiedClasses.keySet().retainAll(dialog.getSessionsToReload());
          }
          if (modifiedClasses.size() > 0) {
            final HotSwapProgressImpl progress=new HotSwapProgressImpl(myProject);
            application.executeOnPooledThread(new Runnable(){
              public void run(){
                reloadModifiedClasses(modifiedClasses,progress);
              }
            }
);
          }
        }
      }
,ModalityState.NON_MODAL);
    }
  }
);
}
