{
  DefaultActionGroup group=new DefaultActionGroup();
  final ReorderableListController<SeverityRegistrar.SeverityBasedTextAttributes> controller=ReorderableListController.create(myOptionsList,group);
  controller.addAddAction(IdeBundle.message("action.add"),new Factory<SeverityRegistrar.SeverityBasedTextAttributes>(){
    @Nullable public SeverityRegistrar.SeverityBasedTextAttributes create(){
      final String name=Messages.showInputDialog(myPanel,InspectionsBundle.message("highlight.severity.create.dialog.name.label"),InspectionsBundle.message("highlight.severity.create.dialog.title"),Messages.getQuestionIcon(),"",new InputValidator(){
        public boolean checkInput(        final String inputString){
          final ListModel listModel=myOptionsList.getModel();
          for (int i=0; i < listModel.getSize(); i++) {
            final String severityName=((SeverityRegistrar.SeverityBasedTextAttributes)listModel.getElementAt(i)).getSeverity().myName;
            if (Comparing.strEqual(severityName,inputString))             return false;
          }
          return true;
        }
        public boolean canClose(        final String inputString){
          return checkInput(inputString);
        }
      }
);
      if (name == null)       return null;
      final TextAttributes textAttributes=CodeInsightColors.WARNINGS_ATTRIBUTES.getDefaultAttributes();
      HighlightInfoType.HighlightInfoTypeImpl info=new HighlightInfoType.HighlightInfoTypeImpl(new HighlightSeverity(name,50),TextAttributesKey.createTextAttributesKey(name));
      return new SeverityRegistrar.SeverityBasedTextAttributes(textAttributes.clone(),info);
    }
  }
,true);
  final ReorderableListController<SeverityRegistrar.SeverityBasedTextAttributes>.RemoveActionDescription removeAction=controller.addRemoveAction(IdeBundle.message("action.remove"));
  removeAction.setEnableCondition(new Condition<SeverityRegistrar.SeverityBasedTextAttributes>(){
    public boolean value(    final SeverityRegistrar.SeverityBasedTextAttributes pair){
      final HighlightInfoType info=pair.getType();
      return info != null && !isDefaultSetting(info);
    }
  }
);
  controller.addAction(new MyMoveUpAction());
  controller.addAction(new MyMoveDownAction());
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  return toolbar.getComponent();
}
