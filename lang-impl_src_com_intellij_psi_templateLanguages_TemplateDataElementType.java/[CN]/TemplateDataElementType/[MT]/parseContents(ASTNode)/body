{
  final CharTable table=SharedImplUtil.findCharTableByTree(chameleon);
  final FileElement treeElement=new DummyHolder(((TreeElement)chameleon).getManager(),null,table).getTreeElement();
  final PsiFile file=(PsiFile)TreeUtil.getFileElement((TreeElement)chameleon).getPsi();
  PsiFile originalFile=file.getOriginalFile();
  final TemplateLanguageFileViewProvider viewProvider=(TemplateLanguageFileViewProvider)originalFile.getViewProvider();
  final Language language=viewProvider.getTemplateDataLanguage();
  final CharSequence chars=chameleon.getChars();
  final Lexer baseLexer=createBaseLexer(viewProvider);
  final CharSequence templateText=createTemplateText(chars,baseLexer);
  final PsiFile templateFile=createFromText(language,templateText,file.getManager());
  final TreeElement parsed=((PsiFileImpl)templateFile).calcTreeElement();
  Lexer langLexer=LanguageParserDefinitions.INSTANCE.forLanguage(language).createLexer(file.getProject());
  final Lexer lexer=new MergingLexerAdapter(new TemplateBlackAndWhiteLexer(createBaseLexer(viewProvider),langLexer,myTemplateElementType,myOuterElementType),TokenSet.create(myTemplateElementType,myOuterElementType));
  lexer.start(chars,0,chars.length(),0);
  insertOuters(parsed,lexer,table);
  if (parsed != null) {
    final TreeElement element=parsed.getFirstChildNode();
    if (element != null) {
      treeElement.rawAddChildren(element);
    }
  }
  treeElement.clearCaches();
  treeElement.subtreeChanged();
  return treeElement.getFirstChildNode();
}
