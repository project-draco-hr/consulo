{
  myArgumentTypes=argumentTypes;
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(argumentList);
  final PsiConflictResolver resolver=argumentTypes == null ? DuplicateConflictResolver.INSTANCE : new JavaMethodsConflictResolver(argumentList,argumentTypes);
  myProcessor=new MethodResolverProcessor(argumentList,new PsiConflictResolver[]{resolver}){
    @Override protected MethodCandidateInfo createCandidateInfo(    final PsiMethod method,    final PsiSubstitutor substitutor,    final boolean staticProblem,    final boolean accessible){
      return JavaMethodResolveHelper.this.createCandidateInfo(method,substitutor,staticProblem,myCurrentFileContext,!accessible,argumentList,argumentTypes,languageLevel);
    }
    @Override protected boolean isAccepted(    final PsiMethod candidate){
      return !candidate.isConstructor();
    }
  }
;
}
