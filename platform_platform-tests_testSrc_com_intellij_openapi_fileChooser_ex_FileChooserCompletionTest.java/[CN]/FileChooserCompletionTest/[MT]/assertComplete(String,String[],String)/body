{
  myFinder=new LocalFsFinder(){
    @Override public LookupFile find(    @NotNull final String path){
      final File ioFile=new File(path);
      return ioFile.isAbsolute() ? new IoFile(ioFile) : null;
    }
  }
;
  String typedText=typed.replace("/",myFinder.getSeparator());
  final FileTextFieldImpl.CompletionResult result=new FileTextFieldImpl.CompletionResult();
  result.myCompletionBase=myParent != null ? (myParent.getAbsolutePath() + typedText) : typedText;
  new FileTextFieldImpl(new JTextField(),myFinder,new FileLookup.LookupFilter(){
    @Override public boolean isAccepted(    final FileLookup.LookupFile file){
      return true;
    }
  }
,myMacros,getRootDisposable()){
    @Override @Nullable public VirtualFile getSelectedFile(){
      return null;
    }
  }
.processCompletion(result);
  for (int i=0; i < expected.length; i++) {
    expected[i]=expected[i].replace("/",myFinder.getSeparator());
  }
  final List<String> expectedList=Arrays.asList(expected);
  Collections.sort(result.myToComplete,new Comparator<FileLookup.LookupFile>(){
    @Override public int compare(    final FileLookup.LookupFile o1,    final FileLookup.LookupFile o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  Collections.sort(expectedList);
  assertEquals(asString(expectedList,result),asString(result.myToComplete,result));
  final String preselectedText=preselected != null ? preselected.replace("/",myFinder.getSeparator()) : null;
  assertEquals(preselectedText,toFileText(result.myPreselected,result));
  if (preselected != null) {
    assertTrue(result.myToComplete.contains(result.myPreselected));
  }
}
