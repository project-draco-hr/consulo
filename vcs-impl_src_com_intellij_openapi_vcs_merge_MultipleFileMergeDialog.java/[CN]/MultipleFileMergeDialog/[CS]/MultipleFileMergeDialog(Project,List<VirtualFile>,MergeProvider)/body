{
  super(project,false);
  myProject=project;
  myProjectManager=ProjectManagerEx.getInstanceEx();
  myProjectManager.blockReloadingProjectOnExternalChanges();
  myFiles=new ArrayList<VirtualFile>(files);
  myProvider=provider;
  List<ColumnInfo> columns=new ArrayList<ColumnInfo>();
  Collections.addAll(columns,NAME_COLUMN,TYPE_COLUMN);
  if (myProvider instanceof MergeProvider2) {
    myMergeSession=((MergeProvider2)myProvider).createMergeSession(files);
    Collections.addAll(columns,myMergeSession.getMergeInfoColumns());
  }
 else {
    myMergeSession=null;
  }
  myModel=new ListTableModel<VirtualFile>(columns.toArray(new ColumnInfo[columns.size()]));
  myModel.setItems(files);
  myTable.setModel(myModel);
  myVirtualFileRenderer.setFont(UIUtil.getListFont());
  myTable.setRowHeight(myVirtualFileRenderer.getPreferredSize().height);
  setTitle(VcsBundle.message("multiple.file.merge.title"));
  init();
  myAcceptYoursButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      acceptRevision(true);
    }
  }
);
  myAcceptTheirsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      acceptRevision(false);
    }
  }
);
  myMergeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showMergeDialog();
    }
  }
);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      updateButtonState();
    }
  }
);
  for (  VirtualFile file : files) {
    if (file.getFileType().isBinary() || provider.isBinary(file)) {
      myBinaryFiles.add(file);
    }
  }
  myTable.getSelectionModel().setSelectionInterval(0,0);
}
