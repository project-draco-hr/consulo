{
  super(new MyModel<T>(project,valueClass,valueTitle,filter));
  myProject=project;
  myModel=(MyModel)getTableModel();
  myModel.setTreeTable(this);
  new TreeTableSpeedSearch(this,new Convertor<TreePath,String>(){
    @Override public String convert(    final TreePath o){
      final DefaultMutableTreeNode node=(DefaultMutableTreeNode)o.getLastPathComponent();
      final Object userObject=node.getUserObject();
      if (userObject == null) {
        return getProjectNodeText();
      }
      if (userObject instanceof VirtualFile) {
        return ((VirtualFile)userObject).getName();
      }
      return node.toString();
    }
  }
);
  final DefaultTreeExpander treeExpander=new DefaultTreeExpander(getTree());
  CommonActionsManager.getInstance().createExpandAllAction(treeExpander,this);
  CommonActionsManager.getInstance().createCollapseAllAction(treeExpander,this);
  getTree().setShowsRootHandles(true);
  getTree().setLineStyleAngled();
  getTree().setRootVisible(showProjectNode);
  getTree().setCellRenderer(new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    final JTree tree,    final Object value,    final boolean sel,    final boolean expanded,    final boolean leaf,    final int row,    final boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      if (value instanceof ProjectRootNode) {
        setText(getProjectNodeText());
        setIcon(AllIcons.Nodes.ProjectTab);
        return this;
      }
      FileNode fileNode=(FileNode)value;
      VirtualFile file=fileNode.getObject();
      if (fileNode.getParent() instanceof FileNode) {
        setText(file.getName());
      }
 else {
        setText(file.getPresentableUrl());
      }
      Icon icon=file.isDirectory() ? AllIcons.Nodes.TreeClosed : IconUtil.getIcon(file,0,null);
      setIcon(icon);
      return this;
    }
  }
);
  getTableHeader().setReorderingAllowed(false);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setPreferredScrollableViewportSize(new Dimension(300,getRowHeight() * 10));
  getColumnModel().getColumn(0).setPreferredWidth(280);
  getColumnModel().getColumn(1).setPreferredWidth(60);
}
