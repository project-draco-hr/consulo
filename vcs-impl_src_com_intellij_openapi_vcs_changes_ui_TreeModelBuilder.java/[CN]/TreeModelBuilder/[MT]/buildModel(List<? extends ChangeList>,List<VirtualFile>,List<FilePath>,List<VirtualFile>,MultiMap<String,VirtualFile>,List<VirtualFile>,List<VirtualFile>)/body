{
  for (  ChangeList list : changeLists) {
    ChangesBrowserNode listNode=ChangesBrowserNode.create(myProject,list);
    model.insertNodeInto(listNode,root,0);
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final ChangesGroupingPolicy policy=createGroupingPolicy();
    for (    Change change : list.getChanges()) {
      insertChangeNode(change,foldersCache,policy,listNode);
    }
  }
  if (!modifiedWithoutEditing.isEmpty()) {
    buildVirtualFiles(modifiedWithoutEditing,ChangesBrowserNode.MODIFIED_WITHOUT_EDITING_TAG);
  }
  if (!unversionedFiles.isEmpty()) {
    buildVirtualFiles(unversionedFiles,ChangesBrowserNode.UNVERSIONED_FILES_TAG);
  }
  if (!switchedFiles.isEmpty()) {
    buildSwitchedFiles(switchedFiles);
  }
  if (ignoredFiles != null && !ignoredFiles.isEmpty()) {
    buildVirtualFiles(ignoredFiles,ChangesBrowserNode.IGNORED_FILES_TAG);
  }
  if (lockedFolders != null && !lockedFolders.isEmpty()) {
    buildVirtualFiles(lockedFolders,ChangesBrowserNode.LOCKED_FOLDERS_TAG);
  }
  if (!locallyDeletedFiles.isEmpty()) {
    ChangesBrowserNode locallyDeletedNode=ChangesBrowserNode.create(myProject,VcsBundle.message("changes.nodetitle.locally.deleted.files"));
    model.insertNodeInto(locallyDeletedNode,root,root.getChildCount());
    buildFilePaths(locallyDeletedFiles,locallyDeletedNode);
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
