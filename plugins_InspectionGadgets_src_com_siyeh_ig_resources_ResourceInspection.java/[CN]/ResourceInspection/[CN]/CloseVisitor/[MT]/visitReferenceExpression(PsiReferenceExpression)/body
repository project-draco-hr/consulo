{
  super.visitReferenceExpression(referenceExpression);
  if (containsClose) {
    return;
  }
  final String text=referenceExpression.getText();
  if (text == null || !text.equals(resourceName)) {
    return;
  }
  final PsiElement parent=referenceExpression.getParent();
  if (!(parent instanceof PsiExpressionList)) {
    return;
  }
  final PsiExpressionList argumentList=(PsiExpressionList)parent;
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiElement target=referenceExpression.resolve();
  if (target == null || !target.equals(resource)) {
    return;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiCodeBlock codeBlock=method.getBody();
  if (codeBlock == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length != 1) {
    return;
  }
  final PsiParameter parameter=parameters[0];
  final PsiStatement[] statements=codeBlock.getStatements();
  for (  PsiStatement statement : statements) {
    if (!(statement instanceof PsiTryStatement)) {
      continue;
    }
    final PsiTryStatement tryStatement=(PsiTryStatement)statement;
    final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    if (tryBlock == null) {
      return;
    }
    final PsiStatement[] innerStatements=tryBlock.getStatements();
    for (    PsiStatement innerStatement : innerStatements) {
      if (!(innerStatement instanceof PsiExpressionStatement)) {
        continue;
      }
      final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)innerStatement;
      final PsiExpression expression=expressionStatement.getExpression();
      if (!(expression instanceof PsiMethodCallExpression)) {
        continue;
      }
      final PsiMethodCallExpression potentialCloseExpression=(PsiMethodCallExpression)expression;
      if (isResourceClose(potentialCloseExpression,parameter)) {
        containsClose=true;
        return;
      }
    }
  }
}
