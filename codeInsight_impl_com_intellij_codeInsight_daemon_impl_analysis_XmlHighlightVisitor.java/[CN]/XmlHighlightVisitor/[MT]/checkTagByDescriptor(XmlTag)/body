{
  String name=tag.getName();
  if (tag instanceof JspDirective) {
    checkDirective(name,tag);
  }
  XmlElementDescriptor elementDescriptor=null;
  final PsiElement parent=tag.getParent();
  if (parent instanceof XmlTag) {
    XmlTag parentTag=(XmlTag)parent;
    final XmlElementDescriptor parentDescriptor=parentTag.getDescriptor();
    if (parentDescriptor != null) {
      elementDescriptor=tag instanceof JspDirective ? tag.getDescriptor() : parentDescriptor.getElementDescriptor(tag);
    }
    if (parentDescriptor != null && elementDescriptor == null && parentTag.getUserData(DO_NOT_VALIDATE_KEY) == null) {
      addElementsForTag(tag,XmlErrorMessages.message("element.is.not.allowed.here",name),getTagProblemInfoType(tag),null);
      return;
    }
    if (elementDescriptor instanceof AnyXmlElementDescriptor || parentDescriptor == null) {
      elementDescriptor=tag.getDescriptor();
    }
    if (elementDescriptor == null)     return;
  }
 else {
    elementDescriptor=tag.getDescriptor();
    if (elementDescriptor == null) {
      addElementsForTag(tag,XmlErrorMessages.message("element.must.be.declared",name),HighlightInfoType.WRONG_REF,null);
      return;
    }
  }
  XmlAttributeDescriptor[] attributeDescriptors=elementDescriptor.getAttributesDescriptors();
  Set<String> requiredAttributes=null;
  for (  XmlAttributeDescriptor attribute : attributeDescriptors) {
    if (attribute != null && attribute.isRequired()) {
      if (requiredAttributes == null) {
        requiredAttributes=new HashSet<String>();
      }
      requiredAttributes.add(attribute.getName(tag));
    }
  }
  final HighlightDisplayKey key=HighlightDisplayKey.find(RequiredAttributesInspection.SHORT_NAME);
  if (requiredAttributes != null && mySettings.getInspectionProfile(tag).isToolEnabled(key)) {
    for (    final String attrName : requiredAttributes) {
      if (tag.getAttribute(attrName,tag.getNamespace()) == null) {
        if (!(elementDescriptor instanceof JspElementDescriptor) || !((JspElementDescriptor)elementDescriptor).isRequiredAttributeImplicitlyPresent(tag,attrName)) {
          final InsertRequiredAttributeIntention insertRequiredAttributeIntention=new InsertRequiredAttributeIntention(tag,attrName,null);
          final String localizedMessage=XmlErrorMessages.message("element.doesnt.have.required.attribute",name,attrName);
          addElementsForTag(tag,localizedMessage,mySettings.getInspectionProfile(tag).getErrorLevel(key) == HighlightDisplayLevel.WARNING ? HighlightInfoType.WARNING : HighlightInfoType.ERROR,insertRequiredAttributeIntention);
        }
      }
    }
  }
  if (elementDescriptor instanceof Validator) {
    ((Validator)elementDescriptor).validate(tag,this);
  }
}
