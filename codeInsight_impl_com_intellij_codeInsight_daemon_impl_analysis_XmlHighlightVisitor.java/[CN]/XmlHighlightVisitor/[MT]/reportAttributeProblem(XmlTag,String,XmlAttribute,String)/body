{
  final HighlightInfoType tagProblemInfoType;
  IntentionAction[] quickFixes;
  if (tag instanceof HtmlTag) {
    final InspectionProfileImpl inspectionProfile=InspectionProjectProfileManager.getInstance(tag.getProject()).getProfile(tag);
    LocalInspectionToolWrapper toolWrapper=(LocalInspectionToolWrapper)inspectionProfile.getInspectionTool(HtmlStyleLocalInspection.SHORT_NAME);
    HtmlStyleLocalInspection inspection=(HtmlStyleLocalInspection)toolWrapper.getTool();
    if (isAdditionallyDeclared(inspection.getAdditionalEntries(XmlEntitiesInspection.UNKNOWN_ATTRIBUTE),localName))     return;
    final HighlightDisplayKey key=HighlightDisplayKey.find(HtmlStyleLocalInspection.SHORT_NAME);
    if (!inspectionProfile.isToolEnabled(key))     return;
    quickFixes=new IntentionAction[]{inspection.getIntentionAction(tag,localName,XmlEntitiesInspection.UNKNOWN_ATTRIBUTE),new EditInspectionToolsSettingsAction(key)};
    tagProblemInfoType=inspectionProfile.getErrorLevel(key) == HighlightDisplayLevel.ERROR ? HighlightInfoType.ERROR : HighlightInfoType.WARNING;
  }
 else {
    tagProblemInfoType=HighlightInfoType.WRONG_REF;
    quickFixes=null;
  }
  final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(tagProblemInfoType,XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),localizedMessage);
  addToResults(highlightInfo);
  if (quickFixes != null) {
    for (    IntentionAction quickFix : quickFixes) {
      QuickFixAction.registerQuickFixAction(highlightInfo,quickFix);
    }
  }
}
