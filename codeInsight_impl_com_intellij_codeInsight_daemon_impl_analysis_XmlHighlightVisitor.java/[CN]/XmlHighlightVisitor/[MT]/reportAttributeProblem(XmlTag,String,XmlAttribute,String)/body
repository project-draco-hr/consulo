{
  final HighlightInfoType tagProblemInfoType;
  IntentionAction[] quickFixes;
  final RemoveAttributeIntentionAction removeAttributeIntention=new RemoveAttributeIntentionAction(localName,attribute);
  if (tag instanceof HtmlTag) {
    final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);
    LocalInspectionToolWrapper toolWrapper=(LocalInspectionToolWrapper)inspectionProfile.getInspectionTool(HtmlStyleLocalInspection.SHORT_NAME);
    HtmlStyleLocalInspection inspection=(HtmlStyleLocalInspection)toolWrapper.getTool();
    if (isAdditionallyDeclared(inspection.getAdditionalEntries(XmlEntitiesInspection.UNKNOWN_ATTRIBUTE),localName))     return null;
    final HighlightDisplayKey key=HighlightDisplayKey.find(HtmlStyleLocalInspection.SHORT_NAME);
    if (!inspectionProfile.isToolEnabled(key))     return null;
    quickFixes=new IntentionAction[]{inspection.getIntentionAction(tag,localName,XmlEntitiesInspection.UNKNOWN_ATTRIBUTE),removeAttributeIntention,new EditInspectionToolsSettingsAction(key)};
    tagProblemInfoType=SeverityRegistrar.getHighlightInfoTypeBySeverity(inspectionProfile.getErrorLevel(key).getSeverity());
  }
 else {
    tagProblemInfoType=HighlightInfoType.WRONG_REF;
    quickFixes=new IntentionAction[]{removeAttributeIntention};
  }
  final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(tagProblemInfoType,XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),localizedMessage);
  addToResults(highlightInfo);
  for (  IntentionAction quickFix : quickFixes) {
    QuickFixAction.registerQuickFixAction(highlightInfo,quickFix);
  }
  return highlightInfo;
}
