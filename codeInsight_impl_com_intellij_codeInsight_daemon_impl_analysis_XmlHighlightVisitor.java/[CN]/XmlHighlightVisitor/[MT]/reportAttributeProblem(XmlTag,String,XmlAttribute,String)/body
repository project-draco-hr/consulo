{
  final HighlightInfoType tagProblemInfoType;
  IntentionAction[] quickFixes;
  HighlightDisplayKey key=null;
  final RemoveAttributeIntentionFix removeAttributeIntention=new RemoveAttributeIntentionFix(localName,attribute);
  if (tag instanceof HtmlTag) {
  }
 else {
    tagProblemInfoType=HighlightInfoType.WRONG_REF;
    quickFixes=new IntentionAction[]{removeAttributeIntention};
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(tagProblemInfoType,XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(attribute)),localizedMessage);
    addToResults(highlightInfo);
    for (    IntentionAction quickFix : quickFixes) {
      if (key != null) {
        List<IntentionAction> options=new ArrayList<IntentionAction>();
        options.add(new EditInspectionToolsSettingsAction(key));
        QuickFixAction.registerQuickFixAction(highlightInfo,quickFix,options,HighlightDisplayKey.getDisplayNameByKey(key));
      }
 else {
        QuickFixAction.registerQuickFixAction(highlightInfo,quickFix);
      }
    }
    return highlightInfo;
  }
  return null;
}
