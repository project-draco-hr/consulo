{
  if (namespacePrefix.length() > 0 || (element instanceof XmlTag && element.getParent() instanceof XmlDocument)) {
    final String namespaceByPrefix=context.getNamespaceByPrefix(namespacePrefix);
    if (namespaceByPrefix.length() == 0) {
      final XmlFile containingFile=(XmlFile)context.getContainingFile();
      if (!HighlightLevelUtil.shouldInspect(containingFile))       return;
      if (!XML.equals(namespacePrefix)) {
        final XmlExtension extension=XmlExtension.getExtension(containingFile);
        if (extension.isPrefixDeclared(context,namespacePrefix)) {
          return;
        }
        final String localizedMessage=XmlErrorMessages.message("unbound.namespace",namespacePrefix);
        if (namespacePrefix.length() == 0) {
          final XmlTag tag=(XmlTag)element;
          if (!XmlUtil.JSP_URI.equals(tag.getNamespace())) {
            addElementsForTag(tag,localizedMessage,HighlightInfoType.INFORMATION,new CreateNSDeclarationIntentionFix(context,namespacePrefix));
          }
          return;
        }
        final HighlightInfoType infoType=extension.getHighlightInfoType(containingFile);
        final int messageLength=namespacePrefix.length();
        if (element instanceof XmlTag) {
          bindMessageToTag((XmlTag)element,infoType,messageLength,localizedMessage,null,new CreateNSDeclarationIntentionFix(context,namespacePrefix));
        }
 else {
          bindMessageToAstNode(element,infoType,0,messageLength,localizedMessage);
        }
      }
    }
  }
}
