{
  XmlTag tag=attribute.getParent();
  if (attribute.isNamespaceDeclaration()) {
    checkNamespaceAttribute(attribute);
    return;
  }
 else {
    final String namespace=attribute.getNamespace();
    if (XmlUtil.XML_SCHEMA_INSTANCE_URI.equals(namespace)) {
      if (attribute.getName().endsWith(LOCATION_ATT_SUFFIX)) {
        checkSchemaLocationAttribute(attribute);
      }
 else {
        if (attribute.getValueElement() != null) {
          checkReferences(attribute.getValueElement(),QuickFixProvider.NULL);
        }
      }
      return;
    }
  }
  XmlElementDescriptor elementDescriptor=tag.getDescriptor();
  if (elementDescriptor == null || ourDoJaxpTesting)   return;
  XmlAttributeDescriptor attributeDescriptor=elementDescriptor.getAttributeDescriptor(attribute);
  final String name=attribute.getName();
  checkUnboundNamespacePrefix(attribute,tag,XmlUtil.findPrefixByQualifiedName(name));
  if (attributeDescriptor == null) {
    final String localizedMessage=XmlErrorMessages.message("attribute.is.not.allowed.here",name);
    final HighlightInfo highlightInfo=reportAttributeProblem(tag,name,attribute,localizedMessage);
    TagFileQuickFixProvider.registerTagFileAttributeReferenceQuickFix(highlightInfo,attribute.getReference());
  }
 else {
    checkDuplicateAttribute(tag,attribute);
    if (tag instanceof HtmlTag && attribute.getValueElement() == null && !HtmlUtil.isSingleHtmlAttribute(attribute.getName())) {
      final String localizedMessage=XmlErrorMessages.message("empty.attribute.is.not.allowed",name);
      reportAttributeProblem(tag,name,attribute,localizedMessage);
    }
  }
}
