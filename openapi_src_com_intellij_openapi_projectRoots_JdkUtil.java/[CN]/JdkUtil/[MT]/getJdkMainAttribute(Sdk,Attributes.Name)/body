{
  final VirtualFile homeDirectory=jdk.getHomeDirectory();
  if (homeDirectory == null) {
    return null;
  }
  VirtualFile rtJar=homeDirectory.findFileByRelativePath("jre/lib/rt.jar");
  if (rtJar == null) {
    rtJar=homeDirectory.findFileByRelativePath("lib/rt.jar");
  }
  if (rtJar == null) {
    rtJar=homeDirectory.findFileByRelativePath("jre/lib/vm.jar");
  }
  if (rtJar == null) {
    return null;
  }
  VirtualFile rtJarFileContent=JarFileSystem.getInstance().findFileByPath(rtJar.getPath() + JarFileSystem.JAR_SEPARATOR);
  if (rtJarFileContent == null) {
    return null;
  }
  ZipFile manifestJarFile;
  try {
    manifestJarFile=JarFileSystem.getInstance().getJarFile(rtJarFileContent);
  }
 catch (  IOException e) {
    return null;
  }
  if (manifestJarFile == null) {
    return null;
  }
  try {
    ZipEntry entry=manifestJarFile.getEntry(JarFile.MANIFEST_NAME);
    if (entry == null) {
      return null;
    }
    InputStream is=manifestJarFile.getInputStream(entry);
    Manifest manifest=new Manifest(is);
    is.close();
    Attributes attributes=manifest.getMainAttributes();
    return attributes.getValue(attributeName);
  }
 catch (  IOException e) {
  }
  return null;
}
