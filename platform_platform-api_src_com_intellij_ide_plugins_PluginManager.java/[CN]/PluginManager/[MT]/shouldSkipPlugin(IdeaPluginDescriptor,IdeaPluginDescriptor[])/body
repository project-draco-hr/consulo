{
  final String idString=descriptor.getPluginId().getIdString();
  if (idString.equals(CORE_PLUGIN_ID)) {
    return false;
  }
  final String pluginId=System.getProperty("idea.load.plugins.id");
  if (pluginId == null) {
    if (descriptor instanceof IdeaPluginDescriptorImpl && !((IdeaPluginDescriptorImpl)descriptor).isEnabled())     return true;
    if (!shouldLoadPlugins())     return true;
  }
  final boolean checkModuleDependencies=!ourAvailableModules.isEmpty() && !ourAvailableModules.contains("com.intellij.modules.all");
  if (checkModuleDependencies && !hasModuleDependencies(descriptor)) {
    return true;
  }
  boolean shouldLoad;
  final String loadPluginCategory=System.getProperty("idea.load.plugins.category");
  if (loadPluginCategory != null) {
    shouldLoad=loadPluginCategory.equals(descriptor.getCategory());
  }
 else {
    if (pluginId != null) {
      shouldLoad=pluginId.equals(idString);
      if (!shouldLoad) {
        Map<PluginId,IdeaPluginDescriptor> map=new HashMap<PluginId,IdeaPluginDescriptor>();
        for (        final IdeaPluginDescriptor pluginDescriptor : loaded) {
          map.put(pluginDescriptor.getPluginId(),pluginDescriptor);
        }
        addModulesAsDependents(map);
        final IdeaPluginDescriptor descriptorFromProperty=map.get(PluginId.getId(pluginId));
        shouldLoad=descriptorFromProperty != null && isDependent(descriptorFromProperty,descriptor.getPluginId(),map,checkModuleDependencies);
      }
    }
 else {
      shouldLoad=!getDisabledPlugins().contains(idString);
    }
    if (shouldLoad && descriptor instanceof IdeaPluginDescriptorImpl) {
      if (isIncompatible(descriptor))       return true;
    }
  }
  return !shouldLoad;
}
