{
  IdeaPluginDescriptorImpl descriptor=null;
  if (file.isDirectory()) {
    descriptor=loadDescriptorFromDir(file,fileName);
    if (descriptor == null) {
      File libDir=new File(file,"lib");
      if (!libDir.isDirectory()) {
        return null;
      }
      final File[] files=libDir.listFiles();
      if (files == null || files.length == 0) {
        return null;
      }
      Arrays.sort(files,new Comparator<File>(){
        @Override public int compare(        File o1,        File o2){
          if (o2.getName().startsWith((file.getName())))           return Integer.MAX_VALUE;
          if (o1.getName().startsWith((file.getName())))           return -Integer.MAX_VALUE;
          if (o2.getName().startsWith("resources"))           return -Integer.MAX_VALUE;
          if (o1.getName().startsWith("resources"))           return Integer.MAX_VALUE;
          return 0;
        }
      }
);
      for (      final File f : files) {
        if (ClassloaderUtil.isJarOrZip(f)) {
          descriptor=loadDescriptorFromJar(f,fileName);
          if (descriptor != null) {
            descriptor.setPath(file);
            return descriptor;
          }
          getLogger().warn("Cannot load descriptor from " + f.getName() + "");
        }
 else         if (f.isDirectory()) {
          IdeaPluginDescriptorImpl descriptor1=loadDescriptorFromDir(f,fileName);
          if (descriptor1 != null) {
            if (descriptor != null) {
              getLogger().info("Cannot load " + file + " because two or more plugin.xml's detected");
              return null;
            }
            descriptor=descriptor1;
            descriptor.setPath(file);
          }
        }
      }
    }
  }
 else   if (StringUtil.endsWithIgnoreCase(file.getName(),".jar") && file.exists()) {
    descriptor=loadDescriptorFromJar(file,fileName);
  }
  if (descriptor != null && !descriptor.getOptionalConfigs().isEmpty()) {
    final Map<PluginId,IdeaPluginDescriptorImpl> descriptors=new HashMap<PluginId,IdeaPluginDescriptorImpl>(descriptor.getOptionalConfigs().size());
    for (    Map.Entry<PluginId,String> entry : descriptor.getOptionalConfigs().entrySet()) {
      final IdeaPluginDescriptorImpl optionalDescriptor=loadDescriptor(file,entry.getValue());
      if (optionalDescriptor != null) {
        descriptors.put(entry.getKey(),optionalDescriptor);
      }
    }
    descriptor.setOptionalDescriptors(descriptors);
  }
  return descriptor;
}
