{
  if (ClassloaderUtil.isLoadingOfExternalPluginsDisabled()) {
    return IdeaPluginDescriptorImpl.EMPTY_ARRAY;
  }
  final List<IdeaPluginDescriptorImpl> result=new ArrayList<IdeaPluginDescriptorImpl>();
  int pluginsCount=countPlugins(PathManager.getPluginsPath()) + countPlugins(PathManager.getPreinstalledPluginsPath());
  loadDescriptors(PathManager.getPluginsPath(),result,progress,pluginsCount);
  Application application=ApplicationManager.getApplication();
  boolean fromSources=false;
  if (application == null || !application.isUnitTestMode()) {
    int size=result.size();
    loadDescriptors(PathManager.getPreinstalledPluginsPath(),result,progress,pluginsCount);
    fromSources=size == result.size();
  }
  loadDescriptorsFromProperty(result);
  if (!fromSources && progress != null) {
    progress.showProgress("Loading core...",0.5f);
  }
  loadDescriptorsFromClassPath(result,fromSources ? progress : null);
  IdeaPluginDescriptorImpl[] pluginDescriptors=result.toArray(new IdeaPluginDescriptorImpl[result.size()]);
  try {
    Arrays.sort(pluginDescriptors,new PluginDescriptorComparator(pluginDescriptors));
  }
 catch (  Exception e) {
    prepareLoadingPluginsErrorMessage(IdeBundle.message("error.plugins.were.not.loaded",e.getMessage()));
    getLogger().info(e);
    pluginDescriptors=IdeaPluginDescriptorImpl.EMPTY_ARRAY;
  }
  return pluginDescriptors;
}
