{
  final Map<PluginId,IdeaPluginDescriptorImpl> idToDescriptorMap=new HashMap<PluginId,IdeaPluginDescriptorImpl>();
  final StringBuffer message=new StringBuffer();
  boolean pluginsWithoutIdFound=false;
  for (Iterator<IdeaPluginDescriptorImpl> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptorImpl descriptor=it.next();
    final PluginId id=descriptor.getPluginId();
    if (id == null) {
      pluginsWithoutIdFound=true;
    }
    if (idToDescriptorMap.containsKey(id)) {
      if (message.length() > 0) {
        message.append("\n");
      }
      message.append(IdeBundle.message("message.duplicate.plugin.id"));
      message.append(id);
      it.remove();
    }
 else     if (descriptor.isEnabled()) {
      idToDescriptorMap.put(id,descriptor);
    }
  }
  addModulesAsDependents(idToDescriptorMap);
  final List<String> disabledPluginIds=new ArrayList<String>();
  for (final Iterator<IdeaPluginDescriptorImpl> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptorImpl pluginDescriptor=it.next();
    checkDependants(pluginDescriptor,new Function<PluginId,IdeaPluginDescriptor>(){
      public IdeaPluginDescriptor fun(      final PluginId pluginId){
        return idToDescriptorMap.get(pluginId);
      }
    }
,new Condition<PluginId>(){
      public boolean value(      final PluginId pluginId){
        if (!idToDescriptorMap.containsKey(pluginId)) {
          if (message.length() > 0) {
            message.append("\n");
          }
          pluginDescriptor.setEnabled(false);
          disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString());
          final String name=pluginDescriptor.getName();
          final IdeaPluginDescriptorImpl descriptor=idToDescriptorMap.get(pluginId);
          String pluginName=descriptor == null ? pluginId.getIdString() : descriptor.getName();
          message.append(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled",name,pluginName) : IdeBundle.message("error.required.plugin.not.installed",name,pluginName));
          it.remove();
          return false;
        }
        return true;
      }
    }
);
  }
  if (!disabledPluginIds.isEmpty()) {
    try {
      saveDisabledPlugins(disabledPluginIds,true);
    }
 catch (    IOException e) {
      getLogger().error(e);
    }
  }
  if (pluginsWithoutIdFound) {
    if (message.length() > 0) {
      message.append("\n");
    }
    message.append(IdeBundle.message("error.plugins.without.id.found"));
  }
  if (message.length() > 0) {
    message.insert(0,IdeBundle.message("error.problems.found.loading.plugins"));
    return message.toString();
  }
  return null;
}
