{
  final TestNode nA=new TestNode("A");
  final TestNode nB=new TestNode("B");
  final TestNode nC=new TestNode("C");
  final TestNode nD=new TestNode("D");
  final TestNode[] allNodes=new TestNode[]{nA,nB,nC,nD};
  final Map<TestNode,TestNode[]> map=new HashMap<TestNode,TestNode[]>();
  map.put(nA,new TestNode[]{nC});
  map.put(nB,new TestNode[]{nA});
  map.put(nC,new TestNode[]{nB});
  map.put(nD,new TestNode[]{nB});
  GraphGenerator<TestNode> graph=graphByNodes(allNodes,map);
  final DFSTBuilder<TestNode> dfstBuilder=new DFSTBuilder<TestNode>(graph);
  assertTrue(!dfstBuilder.isAcyclic());
  Comparator<TestNode> comparator=dfstBuilder.comparator();
  assertTrue(comparator.compare(nA,nD) < 0);
  assertTrue(comparator.compare(nB,nD) < 0);
  assertTrue(comparator.compare(nC,nD) < 0);
}
