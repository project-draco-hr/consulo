{
  checkCanPaint();
  int xOffset=0;
  if (myIcon != null) {
    final Container parent=getParent();
    final Color iconBackgroundColor;
    if (parent != null && !myFocusBorderAroundIcon) {
      iconBackgroundColor=parent.getBackground();
    }
 else {
      iconBackgroundColor=getBackground();
    }
    g.setColor(iconBackgroundColor);
    g.fillRect(0,0,myIcon.getIconWidth() + myIpad.left + myIconTextGap,getHeight());
    myIcon.paintIcon(this,g,myIpad.left,(getHeight() - myIcon.getIconHeight()) / 2);
    xOffset+=myIpad.left + myIcon.getIconWidth() + myIconTextGap;
  }
  if (isOpaque()) {
    g.setColor(getBackground());
    g.fillRect(xOffset,0,getWidth() - xOffset,getHeight());
  }
  if (xOffset == 0) {
    xOffset=myIpad.left;
  }
  if (myPaintFocusBorder) {
    if (myFocusBorderAroundIcon || myIcon == null) {
      myBorder.paintBorder(this,g,0,0,getWidth(),getHeight());
    }
 else {
      myBorder.paintBorder(this,g,xOffset,0,getWidth() - xOffset,getHeight());
    }
  }
  xOffset+=myBorder.getBorderInsets(this).left;
  for (int i=0; i < myFragments.size(); i++) {
    final SimpleTextAttributes attributes=getAttributes().get(i);
    Color color=attributes.getFgColor();
    if (color == null) {
      color=getForeground();
    }
    g.setColor(color);
    Font font=getFont();
    if (font.getStyle() != attributes.getStyle()) {
      font=font.deriveFont(attributes.getStyle());
    }
    g.setFont(font);
    final FontMetrics metrics=getFontMetrics(font);
    final String fragment=myFragments.get(i);
    final int textBaseline=(getHeight() - metrics.getHeight()) / 2 + metrics.getAscent();
    g.drawString(fragment,xOffset,textBaseline);
    final int fragmentWidth=metrics.stringWidth(fragment);
    if (attributes.isStrikeout()) {
      final int strikeOutAt=textBaseline + (metrics.getDescent() - metrics.getAscent()) / 2;
      g.drawLine(xOffset,strikeOutAt,xOffset + fragmentWidth,strikeOutAt);
    }
    if (attributes.isWaved()) {
      if (attributes.getWaveColor() != null) {
        g.setColor(attributes.getWaveColor());
      }
      final int wavedAt=textBaseline + 1;
      for (int x=xOffset; x <= xOffset + fragmentWidth; x+=4) {
        g.drawLine(x,wavedAt,x + 2,wavedAt + 2);
        g.drawLine(x + 3,wavedAt + 1,x + 4,wavedAt);
      }
    }
    xOffset+=fragmentWidth;
  }
}
