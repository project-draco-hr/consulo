{
  final Ref<Boolean> result=Ref.create(false);
  final Semaphore finished=new Semaphore();
  final List<Artifact> artifacts=new ArrayList<Artifact>();
  new ReadAction(){
    protected void run(    final Result result){
      for (      ArtifactPointer pointer : task.getArtifactPointers()) {
        ContainerUtil.addIfNotNull(pointer.getArtifact(),artifacts);
      }
    }
  }
.execute();
  final CompileStatusNotification callback=new CompileStatusNotification(){
    public void finished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      result.set(!aborted && errors == 0);
      finished.up();
    }
  }
;
  final CompilerFilter compilerFilter=new CompilerFilter(){
    public boolean acceptCompiler(    Compiler compiler){
      return compiler instanceof ArtifactsCompiler || compiler instanceof ArtifactAwareCompiler && ((ArtifactAwareCompiler)compiler).shouldRun(artifacts);
    }
  }
;
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      final CompilerManager manager=CompilerManager.getInstance(myProject);
      finished.down();
      manager.make(ArtifactCompileScope.createArtifactsScope(myProject,artifacts),compilerFilter,callback);
    }
  }
,ModalityState.NON_MODAL);
  finished.waitFor();
  return result.get();
}
