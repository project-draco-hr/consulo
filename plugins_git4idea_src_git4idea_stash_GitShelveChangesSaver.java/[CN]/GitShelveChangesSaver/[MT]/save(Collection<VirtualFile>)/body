{
  LOG.info("save " + rootsToSave);
  final Map<String,Map<VirtualFile,Collection<Change>>> lists=new LocalChangesUnderRoots(myProject).getChangesByLists(rootsToSave);
  String oldProgressTitle=myProgressIndicator.getText();
  myProgressIndicator.setText(GitBundle.getString("update.shelving.changes"));
  List<VcsException> exceptions=new ArrayList<VcsException>(1);
  myShelvedLists=new HashMap<String,ShelvedChangeList>();
  for (  Map.Entry<String,Map<VirtualFile,Collection<Change>>> entry : lists.entrySet()) {
    final Map<VirtualFile,Collection<Change>> map=entry.getValue();
    final Set<Change> changes=new HashSet<Change>();
    for (    Collection<Change> changeCollection : map.values()) {
      changes.addAll(changeCollection);
    }
    if (!changes.isEmpty()) {
      final ShelvedChangeList list=GitShelveUtils.shelveChanges(myProject,myShelveManager,changes,myStashMessage + " [" + entry.getKey()+ "]",exceptions,false);
      myShelvedLists.put(entry.getKey(),list);
    }
  }
  if (!exceptions.isEmpty()) {
    LOG.info("save " + exceptions,exceptions.get(0));
    myShelvedLists=null;
    throw exceptions.get(0);
  }
 else {
    for (    VirtualFile root : rootsToSave) {
      GitRollbackEnvironment.resetHardLocal(myProject,root);
    }
  }
  myProgressIndicator.setText(oldProgressTitle);
}
