{
  TreeUtil.sort(model,new Comparator(){
    public int compare(    final Object n1,    final Object n2){
      Object o1=((ChangesBrowserNode)n1).getUserObject();
      Object o2=((ChangesBrowserNode)n2).getUserObject();
      final int classdiff=getNodeClassWeight(o1) - getNodeClassWeight(o2);
      if (classdiff != 0)       return classdiff;
      if (o1 instanceof Change && o2 instanceof Change) {
        return ChangesUtil.getFilePath((Change)o1).getName().compareToIgnoreCase(ChangesUtil.getFilePath((Change)o2).getName());
      }
      if (o1 instanceof ChangeList && o2 instanceof ChangeList) {
        return ((ChangeList)o1).getName().compareToIgnoreCase(((ChangeList)o2).getName());
      }
      if (o1 instanceof VirtualFile && o2 instanceof VirtualFile) {
        return ((VirtualFile)o1).getName().compareToIgnoreCase(((VirtualFile)o2).getName());
      }
      if (o1 instanceof FilePath && o2 instanceof FilePath) {
        return ((FilePath)o1).getPath().compareToIgnoreCase(((FilePath)o2).getPath());
      }
      return 0;
    }
    private int getNodeClassWeight(    Object userObject){
      if (userObject instanceof ChangeList) {
        if (userObject instanceof LocalChangeList && ((LocalChangeList)userObject).isDefault())         return 1;
        return 2;
      }
      if (userObject instanceof Module)       return 3;
      if (userObject instanceof FilePath) {
        if (((FilePath)userObject).isDirectory())         return 4;
        return 5;
      }
      if (userObject instanceof Change)       return 6;
      if (userObject instanceof VirtualFile)       return 7;
      return 8;
    }
  }
);
  model.nodeStructureChanged((TreeNode)model.getRoot());
}
