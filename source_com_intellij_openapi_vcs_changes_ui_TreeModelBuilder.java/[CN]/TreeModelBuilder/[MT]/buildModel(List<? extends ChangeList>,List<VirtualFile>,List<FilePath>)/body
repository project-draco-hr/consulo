{
  for (  ChangeList list : changeLists) {
    ChangesBrowserNode listNode=new ChangesBrowserNode(myProject,list);
    model.insertNodeInto(listNode,root,0);
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    Change change : list.getChanges()) {
      insertChangeNode(change,foldersCache,moduleCache,listNode);
    }
  }
  if (!unversionedFiles.isEmpty()) {
    ChangesBrowserNode unversionedNode=new ChangesBrowserNode(myProject,VcsBundle.message("changes.nodetitle.unversioned.files"));
    model.insertNodeInto(unversionedNode,root,root.getChildCount());
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    VirtualFile file : unversionedFiles) {
      insertChangeNode(file,foldersCache,moduleCache,unversionedNode);
    }
  }
  if (!locallyDeletedFiles.isEmpty()) {
    ChangesBrowserNode locallyDeletedNode=new ChangesBrowserNode(myProject,VcsBundle.message("changes.nodetitle.locally.deleted.files"));
    model.insertNodeInto(locallyDeletedNode,root,root.getChildCount());
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    FilePath file : locallyDeletedFiles) {
      final ChangesBrowserNode node=new ChangesBrowserNode(myProject,file);
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,locallyDeletedNode),0);
    }
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
