{
  for (  ChangeList list : changeLists) {
    ChangesBrowserNode listNode=new ChangesBrowserNode(list);
    model.insertNodeInto(listNode,root,0);
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    Change change : list.getChanges()) {
      final ChangesBrowserNode node=new ChangesBrowserNode(change);
      ChangesUtil.getFilePath(change).refresh();
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,listNode),0);
    }
  }
  if (!unversionedFiles.isEmpty()) {
    ChangesBrowserNode unversionedNode=new ChangesBrowserNode(VcsBundle.message("changes.nodetitle.unversioned.files"));
    model.insertNodeInto(unversionedNode,root,root.getChildCount());
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    VirtualFile file : unversionedFiles) {
      final ChangesBrowserNode node=new ChangesBrowserNode(file);
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,unversionedNode),0);
    }
  }
  if (!locallyDeletedFiles.isEmpty()) {
    ChangesBrowserNode locallyDeletedNode=new ChangesBrowserNode("Locally Deleted");
    model.insertNodeInto(locallyDeletedNode,root,root.getChildCount());
    final VcsContextFactory factory=PeerFactory.getInstance().getVcsContextFactory();
    final HashMap<FilePath,ChangesBrowserNode> foldersCache=new HashMap<FilePath,ChangesBrowserNode>();
    final HashMap<Module,ChangesBrowserNode> moduleCache=new HashMap<Module,ChangesBrowserNode>();
    for (    File file : locallyDeletedFiles) {
      final ChangesBrowserNode node=new ChangesBrowserNode(factory.createFilePathOn(file));
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,locallyDeletedNode),0);
    }
  }
  collapseDirectories(model,root);
  sortNodes();
  return model;
}
