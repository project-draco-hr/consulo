{
  List<T> nulls=null;
  TreeMap<Comparable,List<T>> map=new TreeMap<Comparable,List<T>>();
  for (  T t : source) {
    final Comparable weight=getWeight(t,context);
    if (weight == null) {
      if (nulls == null)       nulls=new SmartList<T>();
      nulls.add(t);
    }
 else {
      List<T> list=map.get(weight);
      if (list == null) {
        map.put(weight,list=new SmartList<T>());
      }
      list.add(t);
    }
  }
  final List<List<T>> values=new ArrayList<List<T>>();
  values.addAll(myNegated ? map.descendingMap().values() : map.values());
  ContainerUtil.addIfNotNull(values,nulls);
  return new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new FlatteningIterator<List<T>,T>(values.iterator()){
        @Override protected Iterator<T> createValueIterator(        List<T> group){
          return myNext.classify(group,context).iterator();
        }
      }
;
    }
  }
;
}
