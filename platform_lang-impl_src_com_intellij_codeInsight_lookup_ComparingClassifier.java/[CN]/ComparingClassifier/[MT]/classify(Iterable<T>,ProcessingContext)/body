{
  List<T> nulls=null;
  TreeMap<Comparable,List<T>> map=new TreeMap<Comparable,List<T>>();
  for (  T t : myNext.classify(source,context)) {
    final Comparable weight=getWeight(t);
    if (weight == null) {
      if (nulls == null)       nulls=new SmartList<T>();
      nulls.add(t);
    }
 else {
      List<T> list=map.get(weight);
      if (list == null) {
        map.put(weight,list=new SmartList<T>());
      }
      list.add(t);
    }
  }
  final Collection<List<T>> values=myNegated ? map.descendingMap().values() : map.values();
  Iterable<T> iterable=new Iterable<T>(){
    @Override public Iterator<T> iterator(){
      return new FlatteningIterator<List<T>,T>(values.iterator()){
        @Override protected Iterator<T> createValueIterator(        List<T> group){
          return group.iterator();
        }
      }
;
    }
  }
;
  return nulls == null ? iterable : ContainerUtil.concat(iterable,nulls);
}
