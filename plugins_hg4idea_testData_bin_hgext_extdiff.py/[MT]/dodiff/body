def dodiff(ui, repo, diffcmd, diffopts, pats, opts):
    'Do the actuall diff:\n\n    - copy to a temp structure if diffing 2 internal revisions\n    - copy to a temp structure if diffing working revision with\n      another one and more than 1 file is changed\n    - just invoke the diff for a single file in the working dir\n    '
    revs = opts.get('rev')
    change = opts.get('change')
    args = ' '.join(diffopts)
    do3way = ('$parent2' in args)
    if (revs and change):
        msg = _('cannot specify --rev and --change at the same time')
        raise util.Abort(msg)
    elif change:
        node2 = repo.lookup(change)
        (node1a, node1b) = repo.changelog.parents(node2)
    else:
        (node1a, node2) = cmdutil.revpair(repo, revs)
        if (not revs):
            node1b = repo.dirstate.parents()[1]
        else:
            node1b = nullid
    if do3way:
        if (node1b == nullid):
            do3way = False
    matcher = cmdutil.match(repo, pats, opts)
    (mod_a, add_a, rem_a) = map(set, repo.status(node1a, node2, matcher)[:3])
    if do3way:
        (mod_b, add_b, rem_b) = map(set, repo.status(node1b, node2, matcher)[:3])
    else:
        (mod_b, add_b, rem_b) = (set(), set(), set())
    modadd = (((mod_a | add_a) | mod_b) | add_b)
    common = ((modadd | rem_a) | rem_b)
    if (not common):
        return 0
    tmproot = tempfile.mkdtemp(prefix='extdiff.')
    try:
        dir1a_files = ((mod_a | rem_a) | ((mod_b | add_b) - add_a))
        dir1a = snapshot(ui, repo, dir1a_files, node1a, tmproot)[0]
        if do3way:
            dir1b_files = ((mod_b | rem_b) | ((mod_a | add_a) - add_b))
            dir1b = snapshot(ui, repo, dir1b_files, node1b, tmproot)[0]
        else:
            dir1b = None
        fns_and_mtime = []
        dir2root = ''
        if node2:
            dir2 = snapshot(ui, repo, modadd, node2, tmproot)[0]
        elif (len(common) > 1):
            (dir2, fns_and_mtime) = snapshot(ui, repo, modadd, None, tmproot)
        else:
            dir2 = ''
            dir2root = repo.root
        if (len(common) == 1):
            common_file = util.localpath(common.pop())
            dir1a = os.path.join(dir1a, common_file)
            if (not os.path.isfile(os.path.join(tmproot, dir1a))):
                dir1a = os.devnull
            if do3way:
                dir1b = os.path.join(dir1b, common_file)
                if (not os.path.isfile(os.path.join(tmproot, dir1b))):
                    dir1b = os.devnull
            dir2 = os.path.join(dir2root, dir2, common_file)
        replace = dict(parent=dir1a, parent1=dir1a, parent2=dir1b, child=dir2)

        def quote(match):
            key = match.group()[1:]
            if ((not do3way) and (key == 'parent2')):
                return ''
            return util.shellquote(replace[key])
        regex = '\\$(parent2|parent1?|child)'
        if ((not do3way) and (not re.search(regex, args))):
            args += ' $parent1 $child'
        args = re.sub(regex, quote, args)
        cmdline = ((util.shellquote(diffcmd) + ' ') + args)
        ui.debug(('running %r in %s\n' % (cmdline, tmproot)))
        util.system(cmdline, cwd=tmproot)
        for (copy_fn, working_fn, mtime) in fns_and_mtime:
            if (os.path.getmtime(copy_fn) != mtime):
                ui.debug(('file changed while diffing. Overwriting: %s (src: %s)\n' % (working_fn, copy_fn)))
                util.copyfile(copy_fn, working_fn)
        return 1
    finally:
        ui.note(_('cleaning up temp directory\n'))
        shutil.rmtree(tmproot)
