{
  List<UsageInfo> result=new ArrayList<UsageInfo>();
  final PsiMethod toSearchFor=(PsiMethod)myHelper.getToSearchFor();
  for (  PsiReference ref1 : MethodReferencesSearch.search(toSearchFor,GlobalSearchScope.projectScope(myProject),true)) {
    PsiElement ref=ref1.getElement();
    if (ref.getLanguage() != GroovyFileType.GROOVY_LANGUAGE) {
      result.add(new OtherLanguageUsageInfo(ref1));
      continue;
    }
    if (ref instanceof PsiMethod && ((PsiMethod)ref).isConstructor()) {
      DefaultConstructorImplicitUsageInfo implicitUsageInfo=new DefaultConstructorImplicitUsageInfo((PsiMethod)ref,((PsiMethod)ref).getContainingClass(),toSearchFor);
      result.add(implicitUsageInfo);
    }
 else     if (ref instanceof PsiClass) {
      result.add(new NoConstructorClassUsageInfo((PsiClass)ref));
    }
 else     if (!PsiTreeUtil.isAncestor(myMethod,ref,false)) {
      result.add(new ExternalUsageInfo(ref));
    }
 else {
      result.add(new ChangedMethodCallInfo(ref));
    }
  }
  Collection<PsiMethod> overridingMethods=OverridingMethodsSearch.search(toSearchFor,true).findAll();
  for (  PsiMethod overridingMethod : overridingMethods) {
    result.add(new UsageInfo(overridingMethod));
  }
  final UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
