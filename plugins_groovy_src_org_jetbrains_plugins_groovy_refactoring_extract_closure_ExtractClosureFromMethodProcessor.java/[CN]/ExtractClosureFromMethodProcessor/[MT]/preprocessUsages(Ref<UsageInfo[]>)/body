{
  UsageInfo[] usagesIn=refUsages.get();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  final GrStatement[] statements=myHelper.getStatements();
  for (  GrStatement statement : statements) {
    detectAccessibilityConflicts(statement,usagesIn,conflicts,false,myProject);
  }
  for (  UsageInfo info : usagesIn) {
    if (info instanceof OtherLanguageUsageInfo) {
      final String lang=CommonRefactoringUtil.htmlEmphasize(info.getElement().getLanguage().getDisplayName());
      conflicts.putValue(info.getElement(),GroovyRefactoringBundle.message("cannot.process.usage.in.language.{0}",lang));
    }
  }
  if (!myMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
    final AnySupers anySupers=new AnySupers();
    for (    GrStatement statement : statements) {
      statement.accept(anySupers);
    }
    if (anySupers.containsSupers()) {
      for (      UsageInfo usageInfo : usagesIn) {
        if (!(usageInfo.getElement() instanceof PsiMethod) && !(usageInfo instanceof InternalUsageInfo)) {
          if (!PsiTreeUtil.isAncestor(myMethod.getContainingClass(),usageInfo.getElement(),false)) {
            conflicts.putValue(statements[0],RefactoringBundle.message("parameter.initializer.contains.0.but.not.all.calls.to.method.are.in.its.class",CommonRefactoringUtil.htmlEmphasize(PsiKeyword.SUPER)));
            break;
          }
        }
      }
    }
  }
  if (!conflicts.isEmpty() && ApplicationManager.getApplication().isUnitTestMode()) {
    throw new ConflictsInTestsException(conflicts.values());
  }
  if (!conflicts.isEmpty()) {
    final ConflictsDialog conflictsDialog=prepareConflictsDialog(conflicts,usagesIn);
    conflictsDialog.show();
    if (!conflictsDialog.isOK()) {
      if (conflictsDialog.isShowConflicts())       prepareSuccessful();
      return false;
    }
  }
  prepareSuccessful();
  return true;
}
