{
  final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(element,PsiMethodCallExpression.class);
  if (methodCallExpression == null) {
    return;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final int parametersCount=parameterList.getParametersCount();
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodExpressionText=methodExpression.getText();
  final StringBuilder newExpression=new StringBuilder(methodExpressionText);
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  newExpression.append('(');
  if (parametersCount > 1) {
    newExpression.append(arguments[0].getText());
    final int varargParameterIndex=parametersCount - 1;
    for (int i=1; i < varargParameterIndex; i++) {
      newExpression.append(", ");
      newExpression.append(arguments[i].getText());
    }
    final PsiParameter[] parameters=parameterList.getParameters();
    final PsiParameter varargParameter=parameters[varargParameterIndex];
    final PsiType type=varargParameter.getType();
    newExpression.append("new ");
    newExpression.append(type.getCanonicalText());
    newExpression.append("[]{");
    if (arguments.length > varargParameterIndex) {
      newExpression.append(arguments[varargParameterIndex].getText());
      for (int i=parametersCount; i < arguments.length; i++) {
        newExpression.append(", ");
        newExpression.append(arguments[i].getText());
      }
    }
    newExpression.append('}');
  }
  newExpression.append(')');
  replaceExpression(newExpression.toString(),methodCallExpression);
}
