{
  for (  final PsiElement patternComponent : myPattern) {
    patternComponent.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceElement(      PsiJavaCodeReferenceElement reference){
        final PsiElement element=reference.resolve();
        if (element instanceof PsiVariable && myParameters.contains(element)) {
          final PsiVariable variable=(PsiVariable)element;
          PsiType type=variable.getType();
          final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(reference,PsiMethodCallExpression.class);
          if (methodCallExpression != null) {
            final int idx=ArrayUtil.find(methodCallExpression.getArgumentList().getExpressions(),reference);
            if (idx > -1) {
              final PsiMethod psiMethod=methodCallExpression.resolveMethod();
              if (psiMethod != null) {
                type=psiMethod.getParameterList().getParameters()[idx].getType();
              }
            }
          }
          reference.putUserData(PARAMETER,Pair.create(variable,type));
        }
        if (element instanceof PsiVariable && myOutputParameters.contains(element)) {
          final PsiVariable psiVariable=(PsiVariable)element;
          reference.putUserData(PARAMETER,Pair.create(psiVariable,psiVariable.getType()));
        }
        PsiElement qualifier=reference.getQualifier();
        if (qualifier != null) {
          qualifier.accept(this);
        }
      }
    }
);
  }
}
