{
  if (!settings.getInspectionProfile().isToolEnabled(HighlightDisplayKey.DEPRECATED_SYMBOL))   return null;
  if (!(refElement instanceof PsiDocCommentOwner))   return null;
  if (!((PsiDocCommentOwner)refElement).isDeprecated())   return null;
  InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(elementToHighlight.getProject());
  if (manager.inspectionResultSuppressed(elementToHighlight,HighlightDisplayKey.DEPRECATED_SYMBOL.toString()))   return null;
  String description=MessageFormat.format("''{0}'' is deprecated",new Object[]{HighlightMessageUtil.getSymbolName(refElement,PsiSubstitutor.EMPTY)});
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES);
  HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.DEPRECATED,elementToHighlight.getTextRange(),description,attributes);
  QuickFixAction.registerQuickFixAction(highlightInfo,new AddNoInspectionDocTagAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  QuickFixAction.registerQuickFixAction(highlightInfo,new AddNoInspectionCommentAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  QuickFixAction.registerQuickFixAction(highlightInfo,new SwitchOffToolAction(HighlightDisplayKey.DEPRECATED_SYMBOL));
  return highlightInfo;
}
