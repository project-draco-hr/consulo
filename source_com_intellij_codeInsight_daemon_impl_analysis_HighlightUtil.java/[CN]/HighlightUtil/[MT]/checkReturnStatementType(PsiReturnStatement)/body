{
  PsiMethod method=null;
  PsiElement parent=statement.getParent();
  while (true) {
    if (parent instanceof PsiFile)     break;
    if (parent instanceof PsiClassInitializer)     break;
    if (parent instanceof PsiMethod) {
      method=(PsiMethod)parent;
      break;
    }
    parent=parent.getParent();
  }
  final String description;
  int navigationShift=0;
  HighlightInfo errorResult=null;
  if (method == null && !(parent instanceof JspFile)) {
    description=RETURN_OUTSIDE_METHOD;
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,statement,description);
  }
 else {
    PsiType returnType=method != null ? method.getReturnType() : null;
    boolean isMethodVoid=returnType == null || PsiType.VOID == returnType;
    PsiExpression returnValue=statement.getReturnValue();
    if (returnValue != null) {
      if (isMethodVoid) {
        description=CANNOT_RETURN_WHEN_VOID;
        errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,statement,description);
        QuickFixAction.registerQuickFixAction(errorResult,new MethodReturnFix(method,returnValue.getType(),false));
      }
 else {
        PsiType valueType=returnValue.getType();
        errorResult=checkAssignability(returnType,valueType,returnValue,statement);
        if (errorResult != null) {
          QuickFixAction.registerQuickFixAction(errorResult,new MethodReturnFix(method,returnValue.getType(),false));
        }
      }
      navigationShift=returnValue.getStartOffsetInParent();
    }
 else {
      if (!isMethodVoid) {
        description=MISSING_RETURN_VALUE;
        errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,statement,description);
        QuickFixAction.registerQuickFixAction(errorResult,new MethodReturnFix(method,PsiType.VOID,false));
        navigationShift=PsiKeyword.RETURN.length();
      }
    }
  }
  if (errorResult != null) {
    errorResult.navigationShift=navigationShift;
  }
  return errorResult;
}
