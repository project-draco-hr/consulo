{
  if (!(resolved instanceof PsiClass))   return null;
  PsiClass catchClass=(PsiClass)resolved;
  if (!(element.getParent() instanceof PsiTypeElement))   return null;
  PsiElement catchParameter=element.getParent().getParent();
  if (!(catchParameter instanceof PsiParameter) || !(((PsiParameter)catchParameter).getDeclarationScope() instanceof PsiCatchSection)) {
    return null;
  }
  PsiCatchSection catchSection=(PsiCatchSection)((PsiParameter)catchParameter).getDeclarationScope();
  PsiTryStatement statement=catchSection.getTryStatement();
  PsiCatchSection[] catchSections=statement.getCatchSections();
  int i=ArrayUtil.find(catchSections,catchSection);
  for (i--; i >= 0; i--) {
    PsiCatchSection section=catchSections[i];
    PsiType type=section.getCatchType();
    PsiClass upCatchClass=PsiUtil.resolveClassInType(type);
    if (upCatchClass == null)     continue;
    if (InheritanceUtil.isInheritorOrSelf(catchClass,upCatchClass,true)) {
      String description=JavaErrorMessages.message("exception.already.caught",PsiFormatUtil.formatClass(catchClass,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_FQ_NAME));
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,element,description);
      QuickFixAction.registerQuickFixAction(highlightInfo,new MoveCatchUpFix(catchSection,section),null);
      QuickFixAction.registerQuickFixAction(highlightInfo,new DeleteCatchFix((PsiParameter)catchParameter),null);
      return highlightInfo;
    }
  }
  return null;
}
