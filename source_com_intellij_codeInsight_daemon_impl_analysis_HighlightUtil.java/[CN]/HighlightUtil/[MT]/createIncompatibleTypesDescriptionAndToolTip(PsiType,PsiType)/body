{
  String toolTip="<html><body>Incompatible types.";
  toolTip+="<table><tr>";
  PsiTypeParameter[] lTypeParams=PsiTypeParameter.EMPTY_ARRAY;
  PsiSubstitutor lTypeSubstitutor=PsiSubstitutor.EMPTY;
  if (lType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult resolveResult=((PsiClassType)lType).resolveGenerics();
    lTypeSubstitutor=resolveResult.getSubstitutor();
    PsiClass psiClass=resolveResult.getElement();
    if (psiClass instanceof PsiAnonymousClass) {
      lType=((PsiAnonymousClass)psiClass).getBaseClassType();
      resolveResult=((PsiClassType)lType).resolveGenerics();
      lTypeSubstitutor=resolveResult.getSubstitutor();
      psiClass=resolveResult.getElement();
    }
    lTypeParams=psiClass == null ? PsiTypeParameter.EMPTY_ARRAY : psiClass.getTypeParameters();
  }
  PsiTypeParameter[] rTypeParams=PsiTypeParameter.EMPTY_ARRAY;
  PsiSubstitutor rTypeSubstitutor=PsiSubstitutor.EMPTY;
  if (rType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult resolveResult=((PsiClassType)rType).resolveGenerics();
    rTypeSubstitutor=resolveResult.getSubstitutor();
    PsiClass psiClass=resolveResult.getElement();
    if (psiClass instanceof PsiAnonymousClass) {
      rType=((PsiAnonymousClass)psiClass).getBaseClassType();
      resolveResult=((PsiClassType)rType).resolveGenerics();
      rTypeSubstitutor=resolveResult.getSubstitutor();
      psiClass=resolveResult.getElement();
    }
    rTypeParams=psiClass == null ? PsiTypeParameter.EMPTY_ARRAY : psiClass.getTypeParameters();
  }
  String description=MessageFormat.format(INCOMPATIBLE_TYPES,new Object[]{formatType(lType),formatType(rType)});
  int typeParamColumns=Math.max(lTypeParams.length,rTypeParams.length);
  String requredRow="";
  String foundRow="";
  for (int i=0; i < typeParamColumns; i++) {
    PsiTypeParameter lTypeParameter=i >= lTypeParams.length ? null : lTypeParams[i];
    PsiTypeParameter rTypeParameter=i >= rTypeParams.length ? null : rTypeParams[i];
    PsiType lSubstedType=lTypeParameter == null ? null : lTypeSubstitutor.substitute(lTypeParameter);
    PsiType rSubstedType=rTypeParameter == null ? null : rTypeSubstitutor.substitute(rTypeParameter);
    boolean matches=Comparing.equal(lSubstedType,rSubstedType);
    String openBrace=i == 0 ? "&lt;" : "";
    String closeBrace=i == typeParamColumns - 1 ? "&gt;" : ",";
    requredRow+="<td>" + (lTypeParams.length == 0 ? "" : openBrace) + redIfNotMatch(lSubstedType,matches)+ (i < lTypeParams.length ? closeBrace : "")+ "</td>";
    foundRow+="<td>" + (rTypeParams.length == 0 ? "" : openBrace) + redIfNotMatch(rSubstedType,matches)+ (i < rTypeParams.length ? closeBrace : "")+ "</td>";
  }
  PsiType lRawType=lType instanceof PsiClassType ? ((PsiClassType)lType).rawType() : lType;
  PsiType rRawType=rType instanceof PsiClassType ? ((PsiClassType)rType).rawType() : rType;
  boolean assignable=lRawType == null || rRawType == null ? true : TypeConversionUtil.isAssignable(lRawType,rRawType);
  toolTip+="<td>Required:</td>" + "<td>" + redIfNotMatch(TypeConversionUtil.erasure(lType),assignable) + "</td>"+ requredRow;
  toolTip+="</tr><tr>";
  toolTip+="<td>Found:</td>" + "<td>" + redIfNotMatch(TypeConversionUtil.erasure(rType),assignable) + "</td>"+ foundRow;
  toolTip+="</tr></table></body></html>";
  return Pair.create(description,toolTip);
}
