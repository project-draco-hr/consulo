{
  PsiModifierListOwner refElement=(PsiModifierListOwner)result.getElement();
  String symbolName=HighlightMessageUtil.getSymbolName(refElement,result.getSubstitutor());
  if (refElement.hasModifierProperty(PsiModifier.PRIVATE)) {
    String containerName=HighlightMessageUtil.getSymbolName(refElement.getParent(),result.getSubstitutor());
    return JavaErrorMessages.message("private.symbol",symbolName,containerName);
  }
 else {
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      String containerName=HighlightMessageUtil.getSymbolName(refElement.getParent(),result.getSubstitutor());
      return JavaErrorMessages.message("protected.symbol",symbolName,containerName);
    }
 else {
      PsiClass packageLocalClass=getPackageLocalClassInTheMiddle(reference);
      if (packageLocalClass != null) {
        refElement=packageLocalClass;
        symbolName=HighlightMessageUtil.getSymbolName(refElement,result.getSubstitutor());
      }
      if (refElement.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) || packageLocalClass != null) {
        String containerName=HighlightMessageUtil.getSymbolName(refElement.getParent(),result.getSubstitutor());
        return JavaErrorMessages.message("package.local.symbol",symbolName,containerName);
      }
 else {
        String containerName=HighlightMessageUtil.getSymbolName(refElement instanceof PsiTypeParameter ? refElement.getParent().getParent() : refElement.getParent(),result.getSubstitutor());
        return JavaErrorMessages.message("visibility.access.problem",symbolName,containerName);
      }
    }
  }
}
