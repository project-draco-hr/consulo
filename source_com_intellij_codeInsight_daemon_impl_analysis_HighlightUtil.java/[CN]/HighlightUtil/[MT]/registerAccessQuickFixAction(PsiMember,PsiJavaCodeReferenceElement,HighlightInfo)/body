{
  if (refElement instanceof PsiCompiledElement)   return;
  final PsiModifierList modifierList=refElement.getModifierList();
  if (modifierList == null)   return;
  PsiClass accessObjectClass=null;
  PsiElement scope=place;
  while (scope != null) {
    if (scope instanceof PsiClass) {
      accessObjectClass=(PsiClass)scope;
      break;
    }
    scope=scope.getParent();
  }
  final PsiClass packageLocalClassInTheMiddle=getPackageLocalClassInTheMiddle(place);
  if (packageLocalClassInTheMiddle != null) {
    QuickFixAction.registerQuickFixAction(errorResult,new ModifierFix(packageLocalClassInTheMiddle,PsiModifier.PUBLIC,true,true));
    return;
  }
  try {
    PsiModifierList modifierListCopy=refElement.getManager().getElementFactory().createFieldFromText("int a;",null).getModifierList();
    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));
    String[] modifiers=new String[]{PsiModifier.PACKAGE_LOCAL,PsiModifier.PROTECTED,PsiModifier.PUBLIC};
    int i=0;
    if (refElement.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
      i=1;
    }
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      i=2;
    }
    for (; i < modifiers.length; i++) {
      String modifier=modifiers[i];
      modifierListCopy.setModifierProperty(modifier,true);
      if (refElement.getManager().getResolveHelper().isAccessible(refElement,modifierListCopy,place,accessObjectClass)) {
        QuickFixAction.registerQuickFixAction(errorResult,new ModifierFix(refElement,modifier,true,true));
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
