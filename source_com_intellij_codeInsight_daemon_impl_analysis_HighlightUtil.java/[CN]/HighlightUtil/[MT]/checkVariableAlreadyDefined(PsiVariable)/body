{
  boolean isIncorrect=false;
  PsiIdentifier identifier=variable.getNameIdentifier();
  String name=identifier.getText();
  if (variable instanceof PsiLocalVariable || variable instanceof PsiParameter && ((PsiParameter)variable).getDeclarationScope() instanceof PsiTryStatement || variable instanceof PsiParameter && variable.getParent() instanceof PsiForeachStatement) {
    PsiElement scope=PsiTreeUtil.getParentOfType(variable,new Class[]{PsiFile.class,PsiMethod.class,PsiClassInitializer.class},true);
    VariablesNotProcessor proc=new VariablesNotProcessor(variable,false);
    PsiScopesUtil.treeWalkUp(proc,identifier,scope);
    if (proc.size() > 0) {
      isIncorrect=true;
    }
  }
 else {
    PsiElement scope=variable.getParent();
    PsiElement[] children=scope.getChildren();
    for (int i=0; i < children.length; i++) {
      PsiElement child=children[i];
      if (child instanceof PsiVariable) {
        if (child.equals(variable))         continue;
        if (name.equals(((PsiVariable)child).getName())) {
          isIncorrect=true;
          break;
        }
      }
    }
  }
  if (isIncorrect) {
    String description=MessageFormat.format(VARIABLE_ALREADY_DEFINED,new Object[]{name});
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,identifier,description);
    QuickFixAction.registerQuickFixAction(highlightInfo,new ReuseVariableDeclarationFix(variable,identifier));
    return highlightInfo;
  }
  return null;
}
