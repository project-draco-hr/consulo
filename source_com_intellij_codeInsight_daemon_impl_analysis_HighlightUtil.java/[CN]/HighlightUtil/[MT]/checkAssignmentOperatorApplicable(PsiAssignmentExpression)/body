{
  final PsiJavaToken operationSign=assignment.getOperationSign();
  IElementType operator=null;
  IElementType i=operationSign.getTokenType();
  if (i == JavaTokenType.ANDEQ) {
    operator=JavaTokenType.AND;
  }
 else   if (i == JavaTokenType.ASTERISKEQ) {
    operator=JavaTokenType.ASTERISK;
  }
 else   if (i == JavaTokenType.DIVEQ) {
    operator=JavaTokenType.DIV;
  }
 else   if (i == JavaTokenType.GTGTEQ) {
    operator=JavaTokenType.GTGT;
  }
 else   if (i == JavaTokenType.GTGTGTEQ) {
    operator=JavaTokenType.GTGTGT;
  }
 else   if (i == JavaTokenType.LTLTEQ) {
    operator=JavaTokenType.LTLT;
  }
 else   if (i == JavaTokenType.MINUSEQ) {
    operator=JavaTokenType.MINUS;
  }
 else   if (i == JavaTokenType.OREQ) {
    operator=JavaTokenType.OR;
  }
 else   if (i == JavaTokenType.PERCEQ) {
    operator=JavaTokenType.PERC;
  }
 else   if (i == JavaTokenType.PLUSEQ) {
    operator=JavaTokenType.PLUS;
  }
 else   if (i == JavaTokenType.XOREQ) {
    operator=JavaTokenType.XOR;
  }
  if (operator == null)   return null;
  HighlightInfo errorResult=null;
  if (!TypeConversionUtil.isBinaryOperatorApplicable(operator,assignment.getLExpression(),assignment.getRExpression(),true)) {
    String operatorText=operationSign.getText().substring(0,operationSign.getText().length() - 1);
    String message=MessageFormat.format(BINARY_OPERATOR_NOT_APPLICABLE,new Object[]{operatorText,formatType(assignment.getLExpression().getType()),formatType(assignment.getRExpression().getType())});
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,assignment,message);
  }
  return errorResult;
}
