{
  final String resolvedName;
  final PsiClass referencedClass;
  if (expression.getParent() instanceof PsiJavaCodeReferenceElement)   return null;
  if (expression instanceof PsiJavaCodeReferenceElement) {
    final PsiElement resolved=((PsiJavaCodeReferenceElement)expression).advancedResolve(true).getElement();
    if (resolved instanceof PsiField) {
      final PsiField referencedField=(PsiField)resolved;
      if (referencedField.hasModifierProperty(PsiModifier.STATIC))       return null;
      referencedClass=referencedField.getContainingClass();
      resolvedName=PsiFormatUtil.formatVariable(referencedField,PsiFormatUtil.SHOW_CONTAINING_CLASS | PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
    }
 else     if (resolved instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)resolved;
      if (method.hasModifierProperty(PsiModifier.STATIC))       return null;
      if (PsiKeyword.SUPER.equals(expression.getText()) || PsiKeyword.THIS.equals(expression.getText()))       return null;
      referencedClass=method.getContainingClass();
      resolvedName=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_CONTAINING_CLASS | PsiFormatUtil.SHOW_NAME,0);
    }
 else     if (resolved instanceof PsiClass) {
      final PsiClass aClass=(PsiClass)resolved;
      if (aClass.hasModifierProperty(PsiModifier.STATIC))       return null;
      referencedClass=aClass.getContainingClass();
      if (referencedClass == null)       return null;
      resolvedName=PsiFormatUtil.formatClass(aClass,PsiFormatUtil.SHOW_NAME);
    }
 else {
      return null;
    }
  }
 else   if (expression instanceof PsiThisExpression) {
    final PsiType type=((PsiThisExpression)expression).getType();
    referencedClass=PsiUtil.resolveClassInType(type);
    resolvedName=referencedClass == null ? null : PsiFormatUtil.formatClass(referencedClass,PsiFormatUtil.SHOW_CONTAINING_CLASS | PsiFormatUtil.SHOW_NAME);
  }
 else {
    return null;
  }
  PsiElement element=expression.getParent();
  while (element instanceof PsiExpression || element instanceof PsiExpressionList || element instanceof PsiAnonymousClass) {
    if (isSuperOrThisMethodCall(element)) {
      PsiElement parentClass=new PsiMatcherImpl(element).parent(PsiMatcherImpl.hasClass(PsiExpressionStatement.class)).parent(PsiMatcherImpl.hasClass(PsiCodeBlock.class)).parent(PsiMatcherImpl.hasClass(PsiMethod.class)).dot(PsiMatcherImpl.isConstructor(true)).parent(PsiMatcherImpl.hasClass(PsiClass.class)).getElement();
      if (parentClass == null) {
        return null;
      }
      final PsiClass aClass=(PsiClass)parentClass;
      if (!InheritanceUtil.isInheritorOrSelf(aClass,referencedClass,true))       return null;
      if (expression instanceof PsiReferenceExpression && !thisOrSuperReference(((PsiReferenceExpression)expression).getQualifierExpression(),aClass)) {
        return null;
      }
      String description=MessageFormat.format("Cannot reference ''{0}'' before supertype constructor has been called",new Object[]{resolvedName});
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,description);
    }
    element=element.getParent();
  }
  return null;
}
