{
  myEditorComponent=new EditorComponentImpl(this);
  myScrollPane=new JScrollPane2(){
    protected void processMouseWheelEvent(    MouseWheelEvent e){
      if (mySettings.isWheelFontChangeEnabled()) {
        boolean changeFontSize=SystemInfo.isMac ? !e.isControlDown() && e.isMetaDown() && !e.isAltDown()&& !e.isShiftDown() : e.isControlDown() && !e.isMetaDown() && !e.isAltDown()&& !e.isShiftDown();
        if (changeFontSize) {
          setFontSize(myScheme.getEditorFontSize() + e.getWheelRotation());
          return;
        }
      }
      super.processMouseWheelEvent(e);
    }
  }
;
  myPanel=new JPanel(){
    public void addNotify(){
      super.addNotify();
      if (((JComponent)getParent()).getBorder() != null)       myScrollPane.setBorder(null);
    }
  }
;
  myPanel.setLayout(new BorderLayout());
  myHeaderPanel=new JPanel(new BorderLayout()){
    private int myOldHeight=0;
    public void revalidate(){
      myOldHeight=getHeight();
      super.revalidate();
    }
    protected void validateTree(){
      int height=myOldHeight;
      super.validateTree();
      height-=getHeight();
      if (height != 0) {
        myVerticalScrollBar.setValue(myVerticalScrollBar.getValue() - height);
      }
      myOldHeight=getHeight();
    }
  }
;
  myPanel.add(myHeaderPanel,BorderLayout.NORTH);
  myVerticalScrollBar=new MyScrollBar(JScrollBar.VERTICAL);
  myGutterComponent=new EditorGutterComponentImpl(this);
  myGutterComponent.setOpaque(true);
  myScrollPane.setVerticalScrollBar(myVerticalScrollBar);
  final MyScrollBar horizontalScrollBar=new MyScrollBar(JScrollBar.HORIZONTAL);
  myScrollPane.setHorizontalScrollBar(horizontalScrollBar);
  myScrollPane.setViewportView(myEditorComponent);
  myScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
  myScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  myScrollPane.setRowHeaderView(myGutterComponent);
  stopOptimizedScrolling();
  myEditorComponent.setTransferHandler(new MyTransferHandler());
  myEditorComponent.setAutoscrolls(true);
  myPanel.add(myScrollPane);
  myEditorComponent.addKeyListener(new KeyAdapter(){
    public void keyTyped(    KeyEvent event){
      if (Patches.APPLE_BUG_ID_3337563)       return;
      if (event.isConsumed()) {
        return;
      }
      if (processKeyTyped(event)) {
        event.consume();
      }
    }
  }
);
  MyMouseAdapter mouseAdapter=new MyMouseAdapter();
  myEditorComponent.addMouseListener(mouseAdapter);
  myGutterComponent.addMouseListener(mouseAdapter);
  MyMouseMotionListener mouseMotionListener=new MyMouseMotionListener();
  myEditorComponent.addMouseMotionListener(mouseMotionListener);
  myGutterComponent.addMouseMotionListener(mouseMotionListener);
  myEditorComponent.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      myCaretCursor.activate();
      int caretLine=getCaretModel().getLogicalPosition().line;
      repaintLines(caretLine,caretLine);
      fireFocusGained();
    }
    public void focusLost(    FocusEvent e){
      clearCaretThread();
      int caretLine=getCaretModel().getLogicalPosition().line;
      repaintLines(caretLine,caretLine);
      fireFocusLost();
    }
  }
);
  try {
    final DropTarget dropTarget=myEditorComponent.getDropTarget();
    if (dropTarget != null) {
      dropTarget.addDropTargetListener(new DropTargetAdapter(){
        public void drop(        DropTargetDropEvent dtde){
        }
        public void dragOver(        DropTargetDragEvent dtde){
          Point location=dtde.getLocation();
          moveCaretToScreenPos(location.x,location.y);
          getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        }
      }
);
    }
  }
 catch (  TooManyListenersException e) {
    LOG.error(e);
  }
  myPanel.addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      myMarkupModel.repaint();
    }
  }
);
}
