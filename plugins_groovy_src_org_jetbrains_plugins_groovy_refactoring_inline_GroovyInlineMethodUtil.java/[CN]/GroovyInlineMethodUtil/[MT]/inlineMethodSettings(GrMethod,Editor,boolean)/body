{
  final Project project=method.getProject();
  PsiReference reference=editor != null ? TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset()) : null;
  if (!invokedOnReference || reference == null) {
    String message=GroovyRefactoringBundle.message("multiple.method.inline.is.not.suppored",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  final Collection<PsiReference> refs=ReferencesSearch.search(method,GlobalSearchScope.projectScope(method.getProject()),false).findAll();
  ArrayList<PsiElement> exprs=new ArrayList<PsiElement>();
  PsiElement element=reference.getElement();
  if (element != null && element.getContainingFile() instanceof GroovyFile) {
    if (isStaticMethod(method) || areInSameClass(element,method)) {
      exprs.add(element);
    }
  }
  if (element instanceof GrExpression && PsiTreeUtil.getParentOfType(element,GrParameter.class) != null) {
    String message=GroovyRefactoringBundle.message("refactoring.is.not.supported.in.parameter.initializers",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  GroovyRefactoringUtil.highlightOccurrences(project,editor,exprs.toArray(PsiElement.EMPTY_ARRAY));
  if (method.getBlock() == null) {
    String message;
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.to.abstract.methods",REFACTORING_NAME);
    }
 else {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.no.sources.attached",REFACTORING_NAME);
    }
    showErrorMessage(message,project);
    return null;
  }
  if (hasBadReturns(method)) {
    String message=GroovyRefactoringBundle.message("refactoring.is.not.supported.when.return.statement.interrupts.the.execution.flow",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  if (method.isConstructor()) {
    String message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.to.constructors",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  return inlineMethodDialogResult(GroovyRefactoringUtil.getMethodSignature(method),project);
}
