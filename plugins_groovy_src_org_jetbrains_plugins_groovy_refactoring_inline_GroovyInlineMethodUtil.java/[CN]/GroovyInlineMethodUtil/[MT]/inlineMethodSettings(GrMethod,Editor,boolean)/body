{
  final String methodName=method.getNameIdentifierGroovy().getText();
  final Project project=method.getProject();
  final Collection<PsiReference> refs=ReferencesSearch.search(method,GlobalSearchScope.projectScope(method.getProject()),false).findAll();
  ArrayList<PsiElement> exprs=new ArrayList<PsiElement>();
  for (  PsiReference ref : refs) {
    PsiElement element=ref.getElement();
    if (element != null && element.getContainingFile() instanceof GroovyFile) {
      if (isStaticMethod(method) || areInSameClass(element,method)) {
        exprs.add(element);
      }
    }
  }
  PsiReference reference=editor != null ? TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset()) : null;
  GroovyRefactoringUtil.highlightOccurrences(project,editor,exprs.toArray(PsiElement.EMPTY_ARRAY));
  if (method.getBlock() == null) {
    String message;
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.to.abstract.methods",REFACTORING_NAME);
    }
 else {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.no.sources.attached",REFACTORING_NAME);
    }
    showErrorMessage(message,project);
    return null;
  }
  if (hasBadReturns(method)) {
    String message=GroovyRefactoringBundle.message("refactoring.is.not.supported.when.return.statement.interrupts.the.execution.flow",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  if (reference == null && checkRecursive(method)) {
    String message=GroovyRefactoringBundle.message("refactoring.is.not.supported.for.recursive.methods",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  if (method.isConstructor()) {
    String message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.to.constructors",REFACTORING_NAME);
    showErrorMessage(message,project);
    return null;
  }
  return new InlineHandler.Settings(){
    public boolean isOnlyOneReferenceToInline(){
      return false;
    }
  }
;
}
