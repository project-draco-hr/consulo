{
  final String methodName=method.getNameIdentifierGroovy().getText();
  final Project project=method.getProject();
  final Collection<PsiReference> refs=ReferencesSearch.search(method,GlobalSearchScope.projectScope(method.getProject()),false).findAll();
  ArrayList<PsiElement> exprs=new ArrayList<PsiElement>();
  for (  PsiReference ref : refs) {
    exprs.add(ref.getElement());
  }
  GroovyRefactoringUtil.highlightOccurrences(project,editor,exprs.toArray(PsiElement.EMPTY_ARRAY));
  if (method.getBody() == null) {
    String message;
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.to.abstract.methods",REFACTORING_NAME);
    }
 else {
      message=GroovyRefactoringBundle.message("refactoring.cannot.be.applied.no.sources.attached",REFACTORING_NAME);
    }
    showErrorMessage(message,project);
    return null;
  }
  return null;
}
