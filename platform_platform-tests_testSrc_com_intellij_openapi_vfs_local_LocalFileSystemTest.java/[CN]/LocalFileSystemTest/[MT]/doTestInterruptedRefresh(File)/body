{
  File sub=IoTestUtil.createTestDir(top,"sub");
  File subSub=IoTestUtil.createTestDir(sub,"sub_sub");
  File file1=IoTestUtil.createTestFile(sub,"sub_file_to_stop_at");
  File file2=IoTestUtil.createTestFile(subSub,"sub_sub_file");
  LocalFileSystem lfs=LocalFileSystem.getInstance();
  NewVirtualFile topDir=(NewVirtualFile)lfs.refreshAndFindFileByIoFile(top);
  assertNotNull(topDir);
  NewVirtualFile subFile1=(NewVirtualFile)lfs.refreshAndFindFileByIoFile(file1);
  assertNotNull(subFile1);
  NewVirtualFile subFile2=(NewVirtualFile)lfs.refreshAndFindFileByIoFile(file2);
  assertNotNull(subFile2);
  topDir.refresh(false,true);
  assertFalse(topDir.isDirty());
  assertFalse(subFile1.isDirty());
  assertFalse(subFile2.isDirty());
  try {
    subFile1.markDirty();
    subFile2.markDirty();
    RefreshWorker.setCancellingCondition(new Function<VirtualFile,Boolean>(){
      @Override public Boolean fun(      VirtualFile file){
        return "sub_file_to_stop_at".equals(file.getName());
      }
    }
);
    topDir.refresh(false,true);
    assertTrue(subFile1.isDirty());
    assertTrue(subFile2.isDirty());
    RefreshWorker.setCancellingCondition(null);
    topDir.refresh(false,true);
    assertFalse(topDir.isDirty());
    assertFalse(subFile1.isDirty());
    assertFalse(subFile2.isDirty());
  }
  finally {
    RefreshWorker.setCancellingCondition(null);
  }
}
