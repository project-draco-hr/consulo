{
  VirtualFile root=myFS.findFileByPath("wrong_path");
  assertNull(root);
  VirtualFile root2;
  if (SystemInfo.isWindows) {
    root=myFS.findFileByPath("\\\\unit-133");
    assertNotNull(root);
    root2=myFS.findFileByPath("//UNIT-133");
    assertNotNull(root2);
    assertEquals(String.valueOf(root2),root,root2);
    RefreshQueue.getInstance().processSingleEvent(new VFileDeleteEvent(this,root,false));
    root=myFS.findFileByIoFile(new File("\\\\unit-133"));
    assertNotNull(root);
    RefreshQueue.getInstance().processSingleEvent(new VFileDeleteEvent(this,root,false));
    if (new File("c:").exists()) {
      root=myFS.findFileByPath("c:");
      assertNotNull(root);
      assertEquals("C:/",root.getPath());
      root2=myFS.findFileByPath("C:\\");
      assertSame(String.valueOf(root),root,root2);
      VirtualFileManager fm=VirtualFileManager.getInstance();
      root=fm.findFileByUrl("file://C:/");
      assertNotNull(root);
      root2=fm.findFileByUrl("file:///c:/");
      assertSame(String.valueOf(root),root,root2);
    }
  }
 else   if (SystemInfo.isUnix) {
    root=myFS.findFileByPath("/");
    assertNotNull(root);
    assertEquals(root.getPath(),"/");
  }
  root=myFS.findFileByPath("");
  assertNotNull(root);
  File jarFile=IoTestUtil.createTestJar();
  root=VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/");
  assertNotNull(root);
  root2=VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator,"//") + "!/");
  assertEquals(String.valueOf(root2),root,root2);
  if (!SystemInfo.isFileSystemCaseSensitive) {
    root2=VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/");
    assertEquals(String.valueOf(root2),root,root2);
  }
}
