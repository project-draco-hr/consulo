{
  ProgressIndicatorProvider.checkCanceled();
  ApplicationManager.getApplication().assertReadAccessAllowed();
  int clearCountOnStart=myClearCount.intValue();
  boolean physical=ref.getElement().isPhysical();
  Map<TRef,Getter<TResult>> map=getMap(physical,incompleteCode,isPoly);
  Getter<TResult> reference=map.get(ref);
  TResult result=reference == null ? null : reference.get();
  if (result != null) {
    return result;
  }
  Computable<TResult> computable=new Computable<TResult>(){
    @Override public TResult compute(){
      return resolver.resolve(ref,incompleteCode);
    }
  }
;
  RecursionGuard.StackStamp stamp=myGuard.markStack();
  result=needToPreventRecursion ? myGuard.doPreventingRecursion(Trinity.create(ref,incompleteCode,isPoly),true,computable) : computable.compute();
  PsiElement element=result instanceof ResolveResult ? ((ResolveResult)result).getElement() : null;
  LOG.assertTrue(element == null || element.isValid(),result);
  if (stamp.mayCacheNow() && clearCountOnStart == myClearCount.intValue()) {
    cache(ref,map,result,isPoly);
  }
  return result;
}
