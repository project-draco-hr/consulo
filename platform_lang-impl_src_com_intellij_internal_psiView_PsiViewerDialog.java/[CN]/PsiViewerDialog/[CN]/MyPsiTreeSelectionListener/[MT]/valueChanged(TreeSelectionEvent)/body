{
  if (!myEditor.getDocument().getText().equals(myLastParsedText) || myBlockTree.hasFocus())   return;
  TreePath path=myPsiTree.getSelectionPath();
  clearSelection();
  if (path != null) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
    if (!(node.getUserObject() instanceof ViewerNodeDescriptor))     return;
    ViewerNodeDescriptor descriptor=(ViewerNodeDescriptor)node.getUserObject();
    Object elementObject=descriptor.getElement();
    final PsiElement element=elementObject instanceof PsiElement ? (PsiElement)elementObject : elementObject instanceof ASTNode ? ((ASTNode)elementObject).getPsi() : null;
    if (element != null) {
      TextRange rangeInHostFile=InjectedLanguageManager.getInstance(myProject).injectedToHost(element,element.getTextRange());
      int start=rangeInHostFile.getStartOffset();
      int end=rangeInHostFile.getEndOffset();
      final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
      PsiElement rootPsiElement=treeStructure.getRootPsiElement();
      if (rootPsiElement != null) {
        int baseOffset=rootPsiElement.getTextRange().getStartOffset();
        start-=baseOffset;
        end-=baseOffset;
      }
      final int textLength=myEditor.getDocument().getTextLength();
      if (end <= textLength) {
        myHighlighter=myEditor.getMarkupModel().addRangeHighlighter(start,end,HighlighterLayer.LAST,myAttributes,HighlighterTargetArea.EXACT_RANGE);
        updateIntersectHighlighter(start,end);
        if (myPsiTree.hasFocus()) {
          myEditor.getCaretModel().moveToOffset(start);
          myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        }
      }
      if (myBlockTreeBuilder != null && myPsiTree.hasFocus()) {
        BlockTreeNode currentBlockNode=findBlockNode(element);
        if (currentBlockNode != null) {
          selectBlockNode(currentBlockNode);
        }
      }
      updateReferences(element);
    }
  }
}
