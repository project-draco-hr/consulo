{
  if (!available() || !myEditor.getSelectionModel().hasSelection())   return;
  final PsiElement rootElement=((ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure()).getRootPsiElement();
  final SelectionModel selection=myEditor.getSelectionModel();
  final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
  PsiElement rootPsiElement=treeStructure.getRootPsiElement();
  int baseOffset=rootPsiElement.getTextRange().getStartOffset();
  final int start=selection.getSelectionStart() + baseOffset;
  final int end=selection.getSelectionEnd() + baseOffset - 1;
  final PsiElement element=findCommonParent(InjectedLanguageUtil.findElementAtNoCommit(rootElement.getContainingFile(),start),InjectedLanguageUtil.findElementAtNoCommit(rootElement.getContainingFile(),end));
  if (element != null && myBlockTreeBuilder != null) {
    if (myEditor.getContentComponent().hasFocus()) {
      TextRange rangeInHostFile=InjectedLanguageManager.getInstance(myProject).injectedToHost(element,element.getTextRange());
      selectBlockNodeByRange(rangeInHostFile,true);
      updateIntersectHighlighter(myHighlighter.getStartOffset(),myHighlighter.getEndOffset());
    }
  }
  myPsiTreeBuilder.select(element);
}
