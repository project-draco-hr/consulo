{
  if (!available() || !myEditor.getSelectionModel().hasSelection())   return;
  ViewerTreeStructure treeStructure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
  if (treeStructure == null)   return;
  final PsiElement rootElement=treeStructure.getRootPsiElement();
  final SelectionModel selection=myEditor.getSelectionModel();
  PsiElement rootPsiElement=treeStructure.getRootPsiElement();
  final TextRange textRange=rootPsiElement.getTextRange();
  int baseOffset=textRange != null ? textRange.getStartOffset() : 0;
  final int start=selection.getSelectionStart() + baseOffset;
  final int end=selection.getSelectionEnd() + baseOffset - 1;
  final PsiElement element=findCommonParent(InjectedLanguageFacadeImpl.findElementAtNoCommit(rootElement.getContainingFile(),start),InjectedLanguageFacadeImpl.findElementAtNoCommit(rootElement.getContainingFile(),end));
  if (element != null && myBlockTreeBuilder != null) {
    if (myEditor.getContentComponent().hasFocus()) {
      TextRange rangeInHostFile=InjectedLanguageManager.getInstance(myProject).injectedToHost(element,element.getTextRange());
      selectBlockNode(findBlockNode(rangeInHostFile,true));
      updateIntersectHighlighter(myHighlighter.getStartOffset(),myHighlighter.getEndOffset());
    }
  }
  myPsiTreeBuilder.select(element);
}
