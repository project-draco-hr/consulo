{
  if (myIgnoreBlockTreeSelectionMarker > 0 || myBlockTreeBuilder == null) {
    return;
  }
  Set<?> blockElementsSet=myBlockTreeBuilder.getSelectedElements();
  if (blockElementsSet.isEmpty())   return;
  BlockTreeNode descriptor=(BlockTreeNode)blockElementsSet.iterator().next();
  PsiElement rootPsi=((ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure()).getRootPsiElement();
  int blockStart=descriptor.getBlock().getTextRange().getStartOffset();
  PsiElement currentPsiEl=InjectedLanguageUtil.findElementAtNoCommit(rootPsi.getContainingFile(),blockStart);
  int blockLength=descriptor.getBlock().getTextRange().getLength();
  while (currentPsiEl != null && currentPsiEl.getTextRange().getStartOffset() == blockStart && currentPsiEl.getTextLength() != blockLength) {
    currentPsiEl=currentPsiEl.getParent();
  }
  final BlockTreeStructure treeStructure=(BlockTreeStructure)myBlockTreeBuilder.getTreeStructure();
  BlockTreeNode rootBlockNode=treeStructure.getRootElement();
  int baseOffset=0;
  if (rootBlockNode != null) {
    baseOffset=rootBlockNode.getBlock().getTextRange().getStartOffset();
  }
  if (currentPsiEl != null) {
    TextRange range=descriptor.getBlock().getTextRange();
    range=range.shiftRight(-baseOffset);
    int start=range.getStartOffset();
    int end=range.getEndOffset();
    final int textLength=myEditor.getDocument().getTextLength();
    if (myBlockTree.hasFocus()) {
      clearSelection();
      if (end <= textLength) {
        myHighlighter=myEditor.getMarkupModel().addRangeHighlighter(start,end,HighlighterLayer.LAST,myAttributes,HighlighterTargetArea.EXACT_RANGE);
        updateIntersectHighlighter(start,end);
        myEditor.getCaretModel().moveToOffset(start);
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
      }
    }
    updateReferences(currentPsiEl);
    if (!myPsiTree.hasFocus()) {
      myPsiTreeBuilder.select(currentPsiEl);
    }
  }
}
