{
  if (!myEditor.getDocument().getText().equals(myLastParsedText))   return;
  TreePath path=myTree.getSelectionPath();
  if (path == null) {
    clearSelection();
  }
 else {
    clearSelection();
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
    if (!(node.getUserObject() instanceof ViewerNodeDescriptor))     return;
    ViewerNodeDescriptor descriptor=(ViewerNodeDescriptor)node.getUserObject();
    Object elementObject=descriptor.getElement();
    final PsiElement element=elementObject instanceof PsiElement ? (PsiElement)elementObject : elementObject instanceof ASTNode ? ((ASTNode)elementObject).getPsi() : null;
    if (element != null) {
      TextRange range=element.getTextRange();
      int start=range.getStartOffset();
      int end=range.getEndOffset();
      final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
      PsiElement rootPsiElement=treeStructure.getRootPsiElement();
      if (rootPsiElement != null) {
        int baseOffset=rootPsiElement.getTextRange().getStartOffset();
        start-=baseOffset;
        end-=baseOffset;
      }
      final int textLength=myEditor.getDocument().getTextLength();
      if (end <= textLength) {
        myEditor.getMarkupModel().addRangeHighlighter(start,end,HighlighterLayer.FIRST + 1,myAttributes,HighlighterTargetArea.EXACT_RANGE);
        if (myTree.hasFocus()) {
          myEditor.getCaretModel().moveToOffset(start);
          myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        }
 else {
          myEditor.getScrollingModel().scrollTo(myEditor.offsetToLogicalPosition(start),ScrollType.MAKE_VISIBLE);
        }
      }
      updateReferences(element);
    }
  }
}
