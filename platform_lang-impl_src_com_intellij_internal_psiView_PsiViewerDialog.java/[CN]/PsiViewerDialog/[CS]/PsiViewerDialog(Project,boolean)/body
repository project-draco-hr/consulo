{
  super(project,true);
  setTitle("PSI Viewer");
  myProject=project;
  myTree=new Tree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  UIUtil.setLineStyleAngled(myTree);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.updateUI();
  final TreeCellRenderer renderer=myTree.getCellRenderer();
  myTree.setCellRenderer(new TreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Component c=renderer.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        final Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        if (userObject instanceof ViewerNodeDescriptor) {
          final Object element=((ViewerNodeDescriptor)userObject).getElement();
          if ((element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement)element).getContainingFile()) != null) || element instanceof ViewerTreeStructure.Inject) {
            final TextAttributes attr=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT);
            c.setBackground(attr.getBackgroundColor());
          }
        }
      }
      return c;
    }
  }
);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeUtil.installActions(myTree);
  new TreeSpeedSearch(myTree);
  myTreeBuilder=new ViewerTreeBuilder(project,myTree);
  myTree.addTreeSelectionListener(new MyTreeSelectionListener());
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(scrollPane,BorderLayout.CENTER);
  myStructureTreePanel.setLayout(new BorderLayout());
  myStructureTreePanel.add(panel,BorderLayout.CENTER);
  myRefs=new JBList(new DefaultListModel());
  JScrollPane refScrollPane=ScrollPaneFactory.createScrollPane(myRefs);
  JPanel refPanel=new JPanel(new BorderLayout());
  refPanel.add(refScrollPane,BorderLayout.CENTER);
  myReferencesPanel.setLayout(new BorderLayout());
  myReferencesPanel.add(refPanel,BorderLayout.CENTER);
  final GoToListener listener=new GoToListener();
  myRefs.addKeyListener(listener);
  myRefs.addMouseListener(listener);
  myRefs.getSelectionModel().addListSelectionListener(listener);
  myRefs.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component comp=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (resolve(index) == null) {
        comp.setForeground(Color.red);
      }
      return comp;
    }
  }
);
  setModal(modal);
  setOKButtonText("&Build PSI Tree");
  init();
}
