{
  final String text=myEditor.getDocument().getText();
  myEditor.getSelectionModel().removeSelection();
  myLastParsedText=text;
  myLastParsedTextHashCode=text.hashCode();
  myNewDocumentHashCode=myLastParsedTextHashCode;
  PsiElement rootElement=null;
  final Object handler=getHandler();
  try {
    if (handler instanceof PsiViewerExtension) {
      final PsiViewerExtension ext=(PsiViewerExtension)handler;
      rootElement=ext.createElement(myProject,text);
    }
 else     if (handler instanceof FileType) {
      final FileType type=(FileType)handler;
      String ext=type.getDefaultExtension();
      if (myExtensionComboBox.isVisible()) {
        ext=myExtensionComboBox.getSelectedItem().toString().toLowerCase();
      }
      if (type instanceof LanguageFileType) {
        final Language language=((LanguageFileType)type).getLanguage();
        final Language dialect=(Language)myDialectsComboBox.getSelectedItem();
        rootElement=PsiFileFactory.getInstance(myProject).createFileFromText("Dummy." + ext,dialect == null ? language : dialect,text);
      }
 else {
        rootElement=PsiFileFactory.getInstance(myProject).createFileFromText("Dummy." + ext,text);
      }
    }
    focusTree();
  }
 catch (  IncorrectOperationException e1) {
    rootElement=null;
    Messages.showMessageDialog(myProject,e1.getMessage(),"Error",Messages.getErrorIcon());
  }
  ViewerTreeStructure structure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
  structure.setRootPsiElement(rootElement);
  myTreeBuilder.queueUpdate();
  myTree.setRootVisible(true);
  myTree.expandRow(0);
  myTree.setRootVisible(false);
}
