{
  if (myBlockTreeBuilder != null) {
    Disposer.dispose(myBlockTreeBuilder);
  }
  final String text=myEditor.getDocument().getText();
  myEditor.getSelectionModel().removeSelection();
  myLastParsedText=text;
  myLastParsedTextHashCode=text.hashCode();
  myNewDocumentHashCode=myLastParsedTextHashCode;
  PsiElement rootElement=parseText(text);
  focusTree();
  ViewerTreeStructure structure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
  structure.setRootPsiElement(rootElement);
  myPsiTreeBuilder.queueUpdate();
  myPsiTree.setRootVisible(true);
  myPsiTree.expandRow(0);
  myPsiTree.setRootVisible(false);
  if (!myShowBlocksCheckBox.isSelected()) {
    return;
  }
  Block rootBlock=rootElement == null ? null : buildBlocks(rootElement);
  if (rootBlock == null) {
    myBlockTreeBuilder=null;
    myBlockTree.setRootVisible(false);
    myBlockTree.setVisible(false);
    return;
  }
  myBlockTree.setVisible(true);
  BlockTreeStructure blockTreeStructure=new BlockTreeStructure();
  BlockTreeNode rootNode=new BlockTreeNode(rootBlock,null);
  blockTreeStructure.setRoot(rootNode);
  myBlockTreeBuilder=new BlockTreeBuilder(myBlockTree,blockTreeStructure);
  myPsiToBlockMap=new HashMap<PsiElement,BlockTreeNode>();
  final PsiElement psiFile=((ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure()).getRootPsiElement();
  initMap(rootNode,psiFile);
  PsiElement rootPsi=(rootNode.getBlock() instanceof ASTBlock) ? ((ASTBlock)rootNode.getBlock()).getNode().getPsi() : rootElement;
  BlockTreeNode blockNode=myPsiToBlockMap.get(rootPsi);
  if (blockNode == null) {
    LOG.error(LogMessageEx.createEvent("PsiViewer: rootNode not found","Current language: " + rootElement.getContainingFile().getLanguage(),new Attachment(rootElement.getContainingFile().getOriginalFile().getVirtualFile())));
    blockNode=findBlockNode(rootPsi);
  }
  blockTreeStructure.setRoot(blockNode);
  myBlockTree.addTreeSelectionListener(new MyBlockTreeSelectionListener());
  myBlockTree.setRootVisible(true);
  myBlockTree.expandRow(0);
  myBlockTreeBuilder.queueUpdate();
}
