{
  if (myBlockTreeBuilder != null) {
    Disposer.dispose(myBlockTreeBuilder);
  }
  final String text=myEditor.getDocument().getText();
  myEditor.getSelectionModel().removeSelection();
  myLastParsedText=text;
  myLastParsedTextHashCode=text.hashCode();
  myNewDocumentHashCode=myLastParsedTextHashCode;
  PsiElement rootElement=null;
  final Object source=getSource();
  try {
    if (source instanceof PsiViewerExtension) {
      final PsiViewerExtension ext=(PsiViewerExtension)source;
      rootElement=ext.createElement(myProject,text);
    }
 else     if (source instanceof FileType) {
      final FileType type=(FileType)source;
      String ext=type.getDefaultExtension();
      if (myExtensionComboBox.isVisible()) {
        ext=myExtensionComboBox.getSelectedItem().toString().toLowerCase();
      }
      if (type instanceof LanguageFileType) {
        final Language language=((LanguageFileType)type).getLanguage();
        final Language dialect=(Language)myDialectComboBox.getSelectedItem();
        rootElement=PsiFileFactory.getInstance(myProject).createFileFromText("Dummy." + ext,dialect == null ? language : dialect,text);
      }
 else {
        rootElement=PsiFileFactory.getInstance(myProject).createFileFromText("Dummy." + ext,text);
      }
    }
    focusTree();
  }
 catch (  IncorrectOperationException e) {
    rootElement=null;
    Messages.showMessageDialog(myProject,e.getMessage(),"Error",Messages.getErrorIcon());
  }
  ViewerTreeStructure structure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
  structure.setRootPsiElement(rootElement);
  myPsiTreeBuilder.queueUpdate();
  myPsiTree.setRootVisible(true);
  myPsiTree.expandRow(0);
  myPsiTree.setRootVisible(false);
  Block rootBlock=rootElement == null ? null : buildBlocks(rootElement);
  if (rootBlock == null) {
    myBlockTreeBuilder=null;
    myBlockTree.setRootVisible(false);
    myBlockTree.setVisible(false);
    return;
  }
  myBlockTree.setVisible(true);
  BlockTreeStructure blockTreeStructure=new BlockTreeStructure();
  BlockTreeNode rootNode=new BlockTreeNode(rootBlock,null);
  blockTreeStructure.setRoot(rootNode);
  myBlockTreeBuilder=new BlockTreeBuilder(myBlockTree,blockTreeStructure);
  myPsiToBlockMap=new HashMap<PsiElement,BlockTreeNode>();
  final PsiElement psiFile=((ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure()).getRootPsiElement();
  initMap(rootNode,psiFile);
  blockTreeStructure.setRoot(myPsiToBlockMap.get(rootElement));
  myBlockTree.addTreeSelectionListener(new MyBlockTreeSelectionListener());
  myBlockTree.setRootVisible(true);
  myBlockTree.expandRow(0);
  myBlockTreeBuilder.queueUpdate();
}
