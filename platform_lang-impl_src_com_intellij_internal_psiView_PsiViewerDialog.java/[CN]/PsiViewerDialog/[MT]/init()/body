{
  initBorders();
  final List<Presentation> items=new ArrayList<Presentation>();
  final EditorFactory editorFactory=EditorFactory.getInstance();
  final Document document=editorFactory.createDocument("");
  myEditor=editorFactory.createEditor(document,myProject);
  myEditor.getSettings().setFoldingOutlineShown(false);
  for (  PsiViewerExtension extension : Extensions.getExtensions(PsiViewerExtension.EP_NAME)) {
    final Presentation p=new Presentation(extension.getName());
    p.setIcon(extension.getIcon());
    handlers.put(p.getText(),extension);
    items.add(p);
  }
  for (  FileType fileType : FileTypeManager.getInstance().getRegisteredFileTypes()) {
    if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) {
      final Presentation p=new Presentation(fileType.getName() + " file");
      p.setIcon(fileType.getIcon());
      handlers.put(p.getText(),fileType);
      items.add(p);
    }
  }
  final Presentation[] popupItems=items.toArray(new Presentation[items.size()]);
  Arrays.sort(popupItems,new Comparator<Presentation>(){
    public int compare(    Presentation p1,    Presentation p2){
      return p1.getText().toUpperCase().compareTo(p2.getText().toUpperCase());
    }
  }
);
  myDialectsComboBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component result=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value == null)       setText("<no dialect>");
      return result;
    }
  }
);
  final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
  myShowWhiteSpacesBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected());
      myTreeBuilder.queueUpdate();
    }
  }
);
  myShowTreeNodesCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected());
      myTreeBuilder.queueUpdate();
    }
  }
);
  myTextPanel.setLayout(new BorderLayout());
  myTextPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  myGroup=new DefaultActionGroup();
  for (  final Presentation popupItem : popupItems) {
    myGroup.add(new AnAction(popupItem.getText(),popupItem.getText(),popupItem.getIcon()){
      public void actionPerformed(      AnActionEvent e){
        updatePresentation(e.getPresentation());
      }
    }
);
  }
  final PsiViewerSettings settings=PsiViewerSettings.getSettings();
  final String type=settings.type;
  for (  Presentation popupItem : popupItems) {
    if (popupItem.getText().equals(type)) {
      updatePresentation(popupItem);
      break;
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      myEditor.getDocument().setText(settings.text);
    }
  }
);
  myShowWhiteSpacesBox.setSelected(settings.showWhiteSpaces);
  myShowTreeNodesCheckBox.setSelected(settings.showTreeNodes);
  final ChoosePsiTypeButton typeButton=new ChoosePsiTypeButton();
  myButtonPanel.add(typeButton.createCustomComponent(myPresentation),BorderLayout.CENTER);
  updateDialectsCombo();
  final Component component=myButtonPanel.getComponents()[0];
  if (component instanceof JComponent) {
    final Component button=((JComponent)component).getComponents()[0];
    if (button instanceof JButton) {
      final JButton jButton=(JButton)button;
      final int mask=SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.ALT_DOWN_MASK;
      getRootPane().registerKeyboardAction(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          jButton.doClick();
        }
      }
,KeyStroke.getKeyStroke(KeyEvent.VK_P,mask),JComponent.WHEN_IN_FOCUSED_WINDOW);
      getRootPane().registerKeyboardAction(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          IdeFocusManager.getInstance(myProject).requestFocus(myEditor.getContentComponent(),true);
        }
      }
,KeyStroke.getKeyStroke(KeyEvent.VK_T,mask),JComponent.WHEN_IN_FOCUSED_WINDOW);
      getRootPane().registerKeyboardAction(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          IdeFocusManager.getInstance(myProject).requestFocus(myTree,true);
        }
      }
,KeyStroke.getKeyStroke(KeyEvent.VK_S,mask),JComponent.WHEN_IN_FOCUSED_WINDOW);
      getRootPane().registerKeyboardAction(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          IdeFocusManager.getInstance(myProject).requestFocus(myRefs,true);
          if (myRefs.getModel().getSize() > 0) {
            if (myRefs.getSelectedIndex() == -1) {
              myRefs.setSelectedIndex(0);
            }
          }
        }
      }
,KeyStroke.getKeyStroke(KeyEvent.VK_R,mask),JComponent.WHEN_IN_FOCUSED_WINDOW);
    }
  }
  super.init();
}
