{
  EditorFactory editorFactory=EditorFactory.getInstance();
  Document document=editorFactory.createDocument("");
  myEditor=editorFactory.createEditor(document,myProject);
  myEditor.getSettings().setFoldingOutlineShown(false);
  for (  PsiViewerExtension extension : Extensions.getExtensions(PsiViewerExtension.EP_NAME)) {
    JRadioButton button=new JRadioButton(extension.getName());
    button.putClientProperty(EXTENSION_KEY,extension);
    myExtensionButtons.add(button);
  }
  FileType[] fileTypes=FileTypeManager.getInstance().getRegisteredFileTypes();
  Arrays.sort(fileTypes,new Comparator<FileType>(){
    public int compare(    final FileType o1,    final FileType o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  List<FileType> customFileTypes=new ArrayList<FileType>();
  for (  FileType fileType : fileTypes) {
    if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) {
      customFileTypes.add(fileType);
    }
  }
  myFileTypes=customFileTypes.toArray(new FileType[customFileTypes.size()]);
  myFileTypeButtons=new JRadioButton[myFileTypes.length];
  ButtonGroup bg=new ButtonGroup();
  for (  JRadioButton button : myExtensionButtons) {
    bg.add(button);
  }
  final int rows=1 + myFileTypes.length / 7;
  JPanel choicesBox=new JPanel(new GridLayout(rows,7));
  for (  JRadioButton extensionButton : myExtensionButtons) {
    choicesBox.add(extensionButton);
  }
  for (int i=0; i < myFileTypes.length; i++) {
    FileType fileType=myFileTypes[i];
    JRadioButton button=new JRadioButton(fileType.getName() + " file");
    bg.add(button);
    choicesBox.add(button);
    myFileTypeButtons[i]=button;
  }
  final ActionListener updateDialectsListener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateDialectsCombo();
    }
  }
;
  final Enumeration<AbstractButton> buttonEnum=bg.getElements();
  while (buttonEnum.hasMoreElements()) {
    buttonEnum.nextElement().addActionListener(updateDialectsListener);
  }
  updateDialectsCombo();
  myDialectsComboBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component result=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value == null)       setText("<no dialect>");
      return result;
    }
  }
);
  if (myExtensionButtons.size() > 0) {
    myExtensionButtons.get(0).setSelected(true);
  }
 else {
    myFileTypeButtons[0].setSelected(true);
  }
  myChoicesPanel.setLayout(new BorderLayout());
  myChoicesPanel.add(choicesBox,BorderLayout.CENTER);
  final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
  myShowWhiteSpacesBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected());
      myTreeBuilder.updateFromRoot();
    }
  }
);
  myShowTreeNodesCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected());
      myTreeBuilder.updateFromRoot();
    }
  }
);
  myTextPanel.setLayout(new BorderLayout());
  myTextPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  super.init();
}
