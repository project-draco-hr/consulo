{
  initMnemonics();
  initTree(myPsiTree);
  final TreeCellRenderer renderer=myPsiTree.getCellRenderer();
  myPsiTree.setCellRenderer(new TreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Component c=renderer.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        final Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        if (userObject instanceof ViewerNodeDescriptor) {
          final Object element=((ViewerNodeDescriptor)userObject).getElement();
          if (c instanceof NodeRenderer) {
            ((NodeRenderer)c).setToolTipText(element == null ? null : element.getClass().getName());
          }
          if ((element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement)element).getContainingFile()) != null) || element instanceof ViewerTreeStructure.Inject) {
            final TextAttributes attr=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT);
            c.setBackground(attr.getBackgroundColor());
          }
        }
      }
      return c;
    }
  }
);
  myPsiTreeBuilder=new ViewerTreeBuilder(myProject,myPsiTree);
  Disposer.register(getDisposable(),myPsiTreeBuilder);
  myPsiTree.addTreeSelectionListener(new MyPsiTreeSelectionListener());
  final GoToListener listener=new GoToListener();
  myRefs.addKeyListener(listener);
  myRefs.addMouseListener(listener);
  myRefs.getSelectionModel().addListSelectionListener(listener);
  myRefs.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component comp=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (resolve(index) == null) {
        comp.setForeground(JBColor.RED);
      }
      return comp;
    }
  }
);
  initTree(myBlockTree);
  myEditor.getSettings().setFoldingOutlineShown(false);
  myEditor.getDocument().addDocumentListener(myEditorListener);
  myEditor.getSelectionModel().addSelectionListener(myEditorListener);
  myEditor.getCaretModel().addCaretListener(myEditorListener);
  getPeer().getWindow().setFocusTraversalPolicy(new LayoutFocusTraversalPolicy(){
    @Override public Component getInitialComponent(    Window window){
      return myEditor.getComponent();
    }
  }
);
  final PsiViewerSettings settings=PsiViewerSettings.getSettings();
  final String type=myFileType != null ? myFileType : settings.type;
  SourceWrapper lastUsed=null;
  for (  PsiViewerExtension extension : Extensions.getExtensions(PsiViewerExtension.EP_NAME)) {
    final SourceWrapper wrapper=new SourceWrapper(extension);
    mySourceWrappers.add(wrapper);
  }
  final Set<FileType> allFileTypes=ContainerUtil.newHashSet();
  Collections.addAll(allFileTypes,FileTypeManager.getInstance().getRegisteredFileTypes());
  for (  Language language : Language.getRegisteredLanguages()) {
    final FileType fileType=language.getAssociatedFileType();
    if (fileType != null) {
      allFileTypes.add(fileType);
    }
  }
  Language curLanguage=myCurrentFile != null ? myCurrentFile.getLanguage() : null;
  for (  FileType fileType : allFileTypes) {
    if (fileType != StdFileTypes.GUI_DESIGNER_FORM && !(fileType instanceof ArchiveFileType) & fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) {
      final SourceWrapper wrapper=new SourceWrapper(fileType);
      mySourceWrappers.add(wrapper);
      if (lastUsed == null && wrapper.getText().equals(type))       lastUsed=wrapper;
      if (myCurrentFile != null && wrapper.myFileType instanceof LanguageFileType && ((LanguageFileType)wrapper.myFileType).equals(curLanguage.getAssociatedFileType())) {
        lastUsed=wrapper;
      }
    }
  }
  myFileTypeComboBox.setModel(new CollectionComboBoxModel(ContainerUtil.newArrayList(mySourceWrappers),lastUsed));
  myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>(){
    @Override public void customize(    JList list,    SourceWrapper value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(value.getText());
        setIcon(value.getIcon());
      }
    }
  }
);
  new ComboboxSpeedSearch(myFileTypeComboBox){
    @Override protected String getElementText(    Object element){
      return element instanceof SourceWrapper ? ((SourceWrapper)element).getText() : null;
    }
  }
;
  myFileTypeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateDialectsCombo(null);
      updateExtensionsCombo();
      updateEditor();
    }
  }
);
  myDialectComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateEditor();
    }
  }
);
  myFileTypeComboBox.addFocusListener(new AutoExpandFocusListener(myFileTypeComboBox));
  if (myCurrentFile == null && lastUsed == null && mySourceWrappers.size() > 0) {
    myFileTypeComboBox.setSelectedIndex(0);
  }
  myDialectComboBox.setRenderer(new ListCellRendererWrapper<LanguageVersion>(){
    @Override public void customize(    final JList list,    final LanguageVersion value,    final int index,    final boolean selected,    final boolean hasFocus){
      setText(value != null ? value.getName() : "<default>");
    }
  }
);
  myDialectComboBox.addFocusListener(new AutoExpandFocusListener(myDialectComboBox));
  myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>(){
    @Override public void customize(    JList list,    String value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null)       setText("." + value);
    }
  }
);
  myExtensionComboBox.addFocusListener(new AutoExpandFocusListener(myExtensionComboBox));
  final ViewerTreeStructure psiTreeStructure=(ViewerTreeStructure)myPsiTreeBuilder.getTreeStructure();
  myShowWhiteSpacesBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      psiTreeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected());
      myPsiTreeBuilder.queueUpdate();
    }
  }
);
  myShowTreeNodesCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      psiTreeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected());
      myPsiTreeBuilder.queueUpdate();
    }
  }
);
  myShowWhiteSpacesBox.setSelected(settings.showWhiteSpaces);
  psiTreeStructure.setShowWhiteSpaces(settings.showWhiteSpaces);
  myShowTreeNodesCheckBox.setSelected(settings.showTreeNodes);
  psiTreeStructure.setShowTreeNodes(settings.showTreeNodes);
  myShowBlocksCheckBox.setSelected(settings.showBlocks);
  myBlockStructurePanel.setVisible(settings.showBlocks);
  myShowBlocksCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!myShowBlocksCheckBox.isSelected()) {
        settings.blockRefDividerLocation=myBlockRefSplitPane.getDividerLocation();
      }
 else {
        myBlockRefSplitPane.setDividerLocation(settings.blockRefDividerLocation);
      }
      myBlockStructurePanel.setVisible(myShowBlocksCheckBox.isSelected());
      myBlockStructurePanel.repaint();
    }
  }
);
  myTextPanel.setLayout(new BorderLayout());
  myTextPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  final String text=myCurrentFile == null ? settings.text : myInitText;
  final AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(getClass());
  try {
    myEditor.getDocument().setText(text);
    myEditor.getSelectionModel().setSelection(0,text.length());
  }
  finally {
    token.finish();
  }
  updateDialectsCombo(settings.dialect);
  updateExtensionsCombo();
  registerCustomKeyboardActions();
  final Dimension size=DimensionService.getInstance().getSize(getDimensionServiceKey(),myProject);
  if (size == null) {
    DimensionService.getInstance().setSize(getDimensionServiceKey(),new Dimension(800,600));
  }
  myTextSplit.setDividerLocation(settings.textDividerLocation);
  myTreeSplit.setDividerLocation(settings.treeDividerLocation);
  myBlockRefSplitPane.setDividerLocation(settings.blockRefDividerLocation);
  updateEditor();
  super.init();
}
