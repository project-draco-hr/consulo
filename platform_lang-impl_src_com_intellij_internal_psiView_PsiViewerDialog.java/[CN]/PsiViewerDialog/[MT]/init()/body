{
  initBorders();
  final List<Presentation> items=new ArrayList<Presentation>();
  final EditorFactory editorFactory=EditorFactory.getInstance();
  final Document document=editorFactory.createDocument("");
  myEditor=(EditorEx)editorFactory.createEditor(document,myProject);
  myEditor.getSettings().setFoldingOutlineShown(false);
  document.addDocumentListener(myEditorListener);
  myEditor.getSelectionModel().addSelectionListener(myEditorListener);
  myEditor.getCaretModel().addCaretListener(myEditorListener);
  for (  PsiViewerExtension extension : Extensions.getExtensions(PsiViewerExtension.EP_NAME)) {
    final Presentation p=new Presentation(extension.getName());
    p.setIcon(extension.getIcon());
    handlers.put(p.getText(),extension);
    items.add(p);
  }
  Set<FileType> allFileTypes=new HashSet<FileType>();
  Collections.addAll(allFileTypes,FileTypeManager.getInstance().getRegisteredFileTypes());
  for (  Language language : Language.getRegisteredLanguages()) {
    FileType fileType=language.getAssociatedFileType();
    if (fileType != null) {
      allFileTypes.add(fileType);
    }
  }
  for (  FileType fileType : allFileTypes) {
    if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) {
      final Presentation p=new Presentation(fileType.getName() + " file");
      p.setIcon(fileType.getIcon());
      handlers.put(p.getText(),fileType);
      items.add(p);
    }
  }
  final Presentation[] popupItems=items.toArray(new Presentation[items.size()]);
  Arrays.sort(popupItems,new Comparator<Presentation>(){
    public int compare(    Presentation p1,    Presentation p2){
      return p1.getText().toUpperCase().compareTo(p2.getText().toUpperCase());
    }
  }
);
  final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
  myShowWhiteSpacesBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected());
      myTreeBuilder.queueUpdate();
    }
  }
);
  myShowTreeNodesCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected());
      myTreeBuilder.queueUpdate();
    }
  }
);
  myTextPanel.setLayout(new BorderLayout());
  myTextPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  myGroup=new DefaultActionGroup();
  for (  final Presentation popupItem : popupItems) {
    myGroup.add(new PopupItemAction(popupItem));
  }
  final PsiViewerSettings settings=PsiViewerSettings.getSettings();
  final String type=settings.type;
  for (  Presentation popupItem : popupItems) {
    if (popupItem.getText().equals(type)) {
      updatePresentation(popupItem);
      break;
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      myEditor.getDocument().setText(settings.text);
      myEditor.getSelectionModel().setSelection(0,settings.text.length());
    }
  }
);
  myShowWhiteSpacesBox.setSelected(settings.showWhiteSpaces);
  treeStructure.setShowWhiteSpaces(settings.showWhiteSpaces);
  myShowTreeNodesCheckBox.setSelected(settings.showTreeNodes);
  treeStructure.setShowTreeNodes(settings.showTreeNodes);
  final ChoosePsiTypeButton typeButton=new ChoosePsiTypeButton();
  myButtonPanel.add(typeButton.createCustomComponent(myPresentation),BorderLayout.CENTER);
  updateDialectsCombo();
  updateExtentionsCombo();
  myDialectsComboBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component result=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value == null)       setText("<no dialect>");
      return result;
    }
  }
);
  if (myDialectsComboBox.isVisible()) {
    for (int i=0; i < myLanguageDialects.length; i++) {
      if (settings.dialect.equals(myLanguageDialects[i].toString())) {
        myDialectsComboBox.setSelectedIndex(i + 1);
        break;
      }
    }
  }
  registerCustomKeyboardActions();
  final Dimension size=DimensionService.getInstance().getSize(getDimensionServiceKey(),myProject);
  if (size == null) {
    DimensionService.getInstance().setSize(getDimensionServiceKey(),new Dimension(600,600));
  }
  myTextSplit.setDividerLocation(settings.textDividerLocation);
  myTreeSplit.setDividerLocation(settings.treeDividerLocation);
  updateEditor();
  super.init();
}
