{
  final Ref<CacheCorruptedException> _ex=new Ref<CacheCorruptedException>();
  final Ref<ExitException> exitException=new Ref<ExitException>(null);
  DumbService.getInstance(myProject).waitForSmartMode();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        final String qName=myDependencyCache.resolve(myQName);
        PsiClass[] classes=JavaPsiFacade.getInstance(myProject).findClasses(qName.replace('$','.'),GlobalSearchScope.allScope(myProject));
        for (        PsiClass aClass : classes) {
          PsiField[] psiFields=aClass.getFields();
          for (          PsiField psiField : psiFields) {
            final FieldChangeInfo changeInfo=findChangeInfo(psiField);
            if (changeInfo != null) {
              processFieldChanged(psiField,aClass,changeInfo.isAccessibilityChange);
            }
          }
          for (          FieldChangeInfo removedField : myRemovedFields) {
            processFieldRemoved(removedField.fieldInfo,aClass);
          }
        }
      }
 catch (      CacheCorruptedException e) {
        _ex.set(e);
      }
catch (      ExitException e) {
        exitException.set(e);
      }
catch (      ProcessCanceledException e) {
      }
    }
  }
);
  if (_ex.get() != null) {
    throw _ex.get();
  }
  if (exitException.get() != null) {
    throw exitException.get();
  }
}
