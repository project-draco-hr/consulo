{
  final PsiVariable var=(PsiVariable)declaration.getDeclaredElements()[0];
  final PsiExpression initializer=var.getInitializer();
  new WriteCommandAction(declaration.getProject()){
    @Override protected void run(    Result result) throws Throwable {
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(variable.getProject());
      final String chosenVariableName=variable.getName();
      PsiElement newDeclaration=elementFactory.createStatementFromText(chosenVariableName + " = " + initializer.getText()+ ";",declaration);
      newDeclaration=declaration.replace(newDeclaration);
      final PsiFile containingFile=newDeclaration.getContainingFile();
      final RangeMarker[] occurrenceMarkers=editor.getUserData(OCCURRENCES_KEY);
      if (occurrenceMarkers != null) {
        for (        RangeMarker marker : occurrenceMarkers) {
          final PsiElement refVariableElement=containingFile.findElementAt(marker.getStartOffset());
          final PsiExpression expression=PsiTreeUtil.getParentOfType(refVariableElement,PsiReferenceExpression.class);
          if (expression != null) {
            expression.replace(elementFactory.createExpressionFromText(chosenVariableName,newDeclaration));
          }
        }
      }
    }
  }
.execute();
  finishTemplate(editor);
}
