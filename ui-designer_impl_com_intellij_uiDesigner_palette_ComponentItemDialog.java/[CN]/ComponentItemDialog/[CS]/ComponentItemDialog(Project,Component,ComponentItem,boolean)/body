{
  super(parent,false);
  myProject=project;
  myItemToBeEdited=itemToBeEdited;
  myOneOff=oneOff;
  myEditorTextField=new EditorTextField("",project,StdFileTypes.JAVA);
  myEditorTextField.setFontInheritedFromLAF(true);
  myTfClassName=new ComponentWithBrowseButton<EditorTextField>(myEditorTextField,new MyChooseClassActionListener(project));
  PsiFile boundForm=itemToBeEdited.getBoundForm();
  if (boundForm != null) {
    myNestedFormRadioButton.setSelected(true);
    myTfNestedForm.setText(FormEditingUtil.buildResourceName(boundForm));
  }
 else {
    myClassRadioButton.setSelected(true);
    setEditorText(myItemToBeEdited.getClassName().replace('$','.'));
  }
  updateEnabledTextField();
  myTfClassName.getChildComponent().addDocumentListener(new com.intellij.openapi.editor.event.DocumentAdapter(){
    public void documentChanged(    com.intellij.openapi.editor.event.DocumentEvent e){
      updateOKAction();
    }
  }
);
  myTfClassName.getButton().setEnabled(!project.isDefault());
  myClassNamePlaceholder.setLayout(new BorderLayout());
  myClassNamePlaceholder.add(myTfClassName,BorderLayout.CENTER);
  myTfIconPath.setText(myItemToBeEdited.getIconPath());
  myTfIconPath.addActionListener(new MyChooseFileActionListener(project,new ImageFileFilter(null),myTfIconPath));
  myTfNestedForm.addActionListener(new MyChooseFileActionListener(project,new TreeFileChooser.PsiFileFilter(){
    public boolean accept(    PsiFile file){
      return file.getFileType().equals(StdFileTypes.GUI_DESIGNER_FORM);
    }
  }
,myTfNestedForm));
  myTfNestedForm.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      updateOKAction();
    }
  }
);
  final GridConstraints defaultConstraints=myItemToBeEdited.getDefaultConstraints();
{
    final int hSizePolicy=defaultConstraints.getHSizePolicy();
    myChkHorCanShrink.setSelected((hSizePolicy & GridConstraints.SIZEPOLICY_CAN_SHRINK) != 0);
    myChkHorCanGrow.setSelected((hSizePolicy & GridConstraints.SIZEPOLICY_CAN_GROW) != 0);
    myChkHorWantGrow.setSelected((hSizePolicy & GridConstraints.SIZEPOLICY_WANT_GROW) != 0);
  }
{
    final int vSizePolicy=defaultConstraints.getVSizePolicy();
    myChkVerCanShrink.setSelected((vSizePolicy & GridConstraints.SIZEPOLICY_CAN_SHRINK) != 0);
    myChkVerCanGrow.setSelected((vSizePolicy & GridConstraints.SIZEPOLICY_CAN_GROW) != 0);
    myChkVerWantGrow.setSelected((vSizePolicy & GridConstraints.SIZEPOLICY_WANT_GROW) != 0);
  }
  myAutoCreateBindingCheckbox.setSelected(itemToBeEdited.isAutoCreateBinding());
  myCanAttachLabelCheckbox.setSelected(itemToBeEdited.isCanAttachLabel());
  myLblIcon.setLabelFor(myTfIconPath);
  myClassRadioButton.addChangeListener(new MyRadioChangeListener());
  myNestedFormRadioButton.addChangeListener(new MyRadioChangeListener());
  if (oneOff) {
    myLblIcon.setVisible(false);
    myTfIconPath.setVisible(false);
    myCanAttachLabelCheckbox.setVisible(false);
    myHSizePolicyPanel.setVisible(false);
    myVSizePolicyPanel.setVisible(false);
  }
  updateOKAction();
  init();
}
