{
  final List<AndroidInlineUtil.MyStyleUsageData> inlineInfos=new ArrayList<AndroidInlineUtil.MyStyleUsageData>();
  final List<PsiElement> nonXmlUsages=new ArrayList<PsiElement>();
  final List<PsiElement> unsupportedUsages=new ArrayList<PsiElement>();
  final List<PsiElement> unambiguousUsages=new ArrayList<PsiElement>();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element == null)     continue;
    if (element.getLanguage() != XMLLanguage.INSTANCE) {
      nonXmlUsages.add(element);
      continue;
    }
    final XmlTag tag=PsiTreeUtil.getParentOfType(element,XmlTag.class);
    final Pair<AndroidResourceReference,GenericAttributeValue<ResourceValue>> pair=tag != null ? AndroidInlineUtil.findStyleReference(tag) : null;
    if (pair == null) {
      unsupportedUsages.add(element);
      continue;
    }
    if (pair.getFirst().computeTargetElements().length > 1) {
      unambiguousUsages.add(element);
      continue;
    }
    inlineInfos.add(new AndroidInlineUtil.MyStyleUsageData(tag,pair.getSecond()));
  }
  if (nonXmlUsages.size() > 0 || unambiguousUsages.size() > 0 || unsupportedUsages.size() > 0) {
    final String errorMessage=buildErrorMessage(myProject,nonXmlUsages,unambiguousUsages,unsupportedUsages);
    AndroidUtils.reportError(myProject,errorMessage,AndroidBundle.message("android.inline.style.title"));
    return;
  }
  for (  AndroidInlineUtil.MyStyleUsageData info : inlineInfos) {
    AndroidInlineUtil.inlineStyleUsage(info,myAttributeValues,myParentStyleRef);
  }
  myStyleTag.delete();
}
