{
  if (elementsToDelete == null || elementsToDelete.length == 0)   return;
  final PsiElement[] elements=DeleteUtil.filterElements(elementsToDelete);
  boolean safeDeleteApplicable=true;
  for (int i=0; i < elements.length && safeDeleteApplicable; i++) {
    PsiElement element=elements[i];
    safeDeleteApplicable=element.isWritable() && SafeDeleteProcessor.validElement(element);
  }
  if (safeDeleteApplicable) {
    DeleteDialog dialog=new DeleteDialog(project,elements,new DeleteDialog.Callback(){
      public void run(      final DeleteDialog dialog){
        if (!RefactoringMessageUtil.checkReadOnlyStatusRecursively(project,Arrays.asList(elements)))         return;
        SafeDeleteProcessor.createInstance(project,new Runnable(){
          public void run(){
            dialog.close(DeleteDialog.CANCEL_EXIT_CODE);
          }
        }
,elements,dialog.isSearchInComments(),dialog.isSearchInNonJava(),true).run();
      }
    }
);
    dialog.show();
    if (!dialog.isOK())     return;
  }
 else {
    String warningMessage=DeleteUtil.generateWarningMessage("Delete",elements);
    int defaultOption;
    boolean anyDirectories=false;
    String directoryName=null;
    for (    PsiElement psiElement : elementsToDelete) {
      if (psiElement instanceof PsiDirectory) {
        anyDirectories=true;
        directoryName=((PsiDirectory)psiElement).getName();
        break;
      }
    }
    if (anyDirectories) {
      if (elements.length == 1) {
        warningMessage+="\nAll files and subdirectories in \"" + directoryName + "\" will be deleted.\nYou will not be able to undo this operation!";
      }
 else {
        warningMessage+="\nAll files and subdirectories in the selected directory(s) will be deleted.\nYou will not be able to undo this operation!";
      }
      defaultOption=-1;
    }
 else {
      defaultOption=0;
    }
    int result=Messages.showDialog(project,warningMessage,"Delete",new String[]{"OK","Cancel"},defaultOption,Messages.getQuestionIcon());
    if (result != 0)     return;
  }
  final FileTypeManager ftManager=FileTypeManager.getInstance();
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      for (int i=0; i < elements.length; i++) {
        final PsiElement elementToDelete=elements[i];
        if (elementToDelete instanceof PsiDirectory) {
          VirtualFile virtualFile=((PsiDirectory)elementToDelete).getVirtualFile();
          if (virtualFile.getFileSystem() instanceof LocalFileSystem) {
            ArrayList<VirtualFile> readOnlyFiles=new ArrayList<VirtualFile>();
            getReadOnlyVirtualFiles(virtualFile,readOnlyFiles,ftManager);
            if (readOnlyFiles.size() > 0) {
              int _result=Messages.showOkCancelDialog(project,"Directory " + virtualFile.getPresentableUrl() + " contains read-only file(s). Delete it anyway?","Delete",Messages.getQuestionIcon());
              if (_result != 0)               continue;
              boolean success=true;
              for (int j=0; j < readOnlyFiles.size(); j++) {
                VirtualFile file=readOnlyFiles.get(j);
                success=clearReadOnlyFlag(file,project);
                if (!success)                 break;
              }
              if (!success)               continue;
            }
          }
        }
 else         if (!elementToDelete.isWritable()) {
          final PsiFile file=elementToDelete.getContainingFile();
          if (file != null) {
            final VirtualFile virtualFile=file.getVirtualFile();
            if (virtualFile.getFileSystem() instanceof LocalFileSystem) {
              int _result=MessagesEx.fileIsReadOnly(project,virtualFile).setTitle("Delete").appendMessage(" Delete it anyway?").askOkCancel();
              if (_result != 0)               continue;
              boolean success=clearReadOnlyFlag(virtualFile,project);
              if (!success)               continue;
            }
          }
        }
        try {
          elementToDelete.checkDelete();
        }
 catch (        IncorrectOperationException ex) {
          Messages.showMessageDialog(project,ex.getMessage(),"Error",Messages.getErrorIcon());
          continue;
        }
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            try {
              elementToDelete.delete();
            }
 catch (            final IncorrectOperationException ex) {
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  Messages.showMessageDialog(project,ex.getMessage(),"Error",Messages.getErrorIcon());
                }
              }
);
            }
          }
        }
);
      }
    }
  }
,"Delete",null);
}
