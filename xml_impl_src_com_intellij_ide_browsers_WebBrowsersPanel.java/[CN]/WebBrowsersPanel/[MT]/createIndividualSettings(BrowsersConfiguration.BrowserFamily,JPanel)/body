{
  final JPanel result=new JPanel();
  result.setBorder(BorderFactory.createTitledBorder(family.getName()));
  result.setLayout(new BoxLayout(result,BoxLayout.Y_AXIS));
  final TextFieldWithBrowseButton field=new TextFieldWithBrowseButton();
  field.setEditable(false);
  FileChooserDescriptor descriptor=SystemInfo.isMac ? FileChooserDescriptorFactory.createSingleFolderDescriptor() : FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
  field.addBrowseFolderListener(IdeBundle.message("title.select.path.to.browser"),null,null,descriptor);
  result.add(field);
  final JPanel buttonsPanel=new JPanel(new BorderLayout());
  final JPanel activePanel=new JPanel();
  activePanel.setLayout(new BoxLayout(activePanel,BoxLayout.X_AXIS));
  final JCheckBox checkBox=new JCheckBox();
  activePanel.add(checkBox);
  final JLabel label=new JLabel(XmlBundle.message("browser.active"));
  label.setLabelFor(checkBox);
  activePanel.add(label);
  buttonsPanel.add(activePanel,BorderLayout.WEST);
  final JButton resetButton=new JButton(XmlBundle.message("browser.default.settings"));
  resetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      field.getTextField().setText(family.getExecutionPath());
    }
  }
);
  buttonsPanel.add(resetButton,BorderLayout.EAST);
  result.add(buttonsPanel);
  container.add(result);
  final Pair<String,Boolean> settings=myConfiguration.suggestBrowserPath(family);
  field.getTextField().setText(settings.first);
  checkBox.setSelected(settings.second.booleanValue());
  myBrowserSettingsMap.put(family,Pair.create(checkBox,field));
}
