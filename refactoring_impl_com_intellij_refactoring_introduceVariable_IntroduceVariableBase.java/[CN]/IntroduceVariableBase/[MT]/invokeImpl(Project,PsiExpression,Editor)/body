{
  if (expr != null && expr.getParent() instanceof PsiExpressionStatement) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.introduceVariable.incompleteStatement");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + expr);
  }
  if (expr == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(message,project);
    return false;
  }
  final PsiFile file=expr.getContainingFile();
  LOG.assertTrue(file != null,"expr.getContainingFile() == null");
  final PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
  PsiType originalType=RefactoringUtil.getTypeByExpressionWithExpectedType(expr);
  if (originalType == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("unknown.expression.type"));
    showErrorMessage(message,project);
    return false;
  }
  if (originalType == PsiType.VOID) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    showErrorMessage(message,project);
    return false;
  }
  PsiElement anchorStatement=RefactoringUtil.getParentStatement(expr,false);
  if (anchorStatement == null) {
    return parentStatementNotFound(project,expr,editor,file);
  }
  if (anchorStatement instanceof PsiExpressionStatement) {
    PsiExpression enclosingExpr=((PsiExpressionStatement)anchorStatement).getExpression();
    if (enclosingExpr instanceof PsiMethodCallExpression) {
      PsiMethod method=((PsiMethodCallExpression)enclosingExpr).resolveMethod();
      if (method != null && method.isConstructor()) {
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("invalid.expression.context"));
        showErrorMessage(message,project);
        return false;
      }
    }
  }
  PsiElement tempContainer=anchorStatement.getParent();
  if (invalidContainer(tempContainer)) {
    String message=RefactoringBundle.message("refactoring.is.not.supported.in.the.current.context",IntroduceVariableBase.REFACTORING_NAME);
    showErrorMessage(message,project);
    return false;
  }
  if (!NotInSuperCallOccurenceFilter.INSTANCE.isOK(expr)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("cannot.introduce.variable.in.super.constructor.call"));
    showErrorMessage(message,project);
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return false;
  PsiElement containerParent=tempContainer;
  PsiElement lastScope=tempContainer;
  while (true) {
    if (containerParent instanceof PsiFile)     break;
    if (containerParent instanceof PsiMethod)     break;
    containerParent=containerParent.getParent();
    if (containerParent instanceof PsiCodeBlock) {
      lastScope=containerParent;
    }
  }
  ExpressionOccurenceManager occurenceManager=new ExpressionOccurenceManager(expr,lastScope,NotInSuperCallOccurenceFilter.INSTANCE);
  final PsiExpression[] occurrences=occurenceManager.getOccurences();
  final PsiElement anchorStatementIfAll=occurenceManager.getAnchorStatementForAll();
  boolean declareFinalIfAll=occurenceManager.isInFinalContext();
  boolean anyAssignmentLHS=false;
  for (  PsiExpression occurrence : occurrences) {
    if (RefactoringUtil.isAssignmentLHS(occurrence)) {
      anyAssignmentLHS=true;
      break;
    }
  }
  IntroduceVariableSettings settings=getSettings(project,editor,expr,occurrences,anyAssignmentLHS,declareFinalIfAll,originalType,new TypeSelectorManagerImpl(project,originalType,expr,occurrences),new InputValidator(this,project,anchorStatementIfAll,anchorStatement,occurenceManager));
  if (!settings.isOK()) {
    return false;
  }
  final String variableName=settings.getEnteredName();
  final PsiType type=settings.getSelectedType();
  final boolean replaceAll=settings.isReplaceAllOccurrences();
  final boolean replaceWrite=settings.isReplaceLValues();
  final boolean declareFinal=replaceAll && declareFinalIfAll || settings.isDeclareFinal();
  if (replaceAll) {
    anchorStatement=anchorStatementIfAll;
    tempContainer=anchorStatement.getParent();
  }
  final PsiElement container=tempContainer;
  PsiElement child=anchorStatement;
  if (!IntroduceVariableBase.isLoopOrIf(container)) {
    child=locateAnchor(child);
  }
  final PsiElement anchor=child == null ? anchorStatement : child;
  boolean tempDeleteSelf=false;
  final boolean replaceSelf=replaceWrite || !RefactoringUtil.isAssignmentLHS(expr);
  if (!IntroduceVariableBase.isLoopOrIf(container)) {
    if (expr.getParent() instanceof PsiExpressionStatement && anchor.equals(anchorStatement)) {
      PsiStatement statement=(PsiStatement)expr.getParent();
      PsiElement parent=statement.getParent();
      if (parent instanceof PsiCodeBlock || parent instanceof PsiCodeFragment) {
        tempDeleteSelf=true;
      }
    }
    tempDeleteSelf=tempDeleteSelf && replaceSelf;
  }
  final boolean deleteSelf=tempDeleteSelf;
  final int col=editor != null ? editor.getCaretModel().getLogicalPosition().column : 0;
  final int line=editor != null ? editor.getCaretModel().getLogicalPosition().line : 0;
  if (deleteSelf) {
    if (editor != null) {
      LogicalPosition pos=new LogicalPosition(0,0);
      editor.getCaretModel().moveToLogicalPosition(pos);
    }
  }
  final PsiCodeBlock newDeclarationScope=PsiTreeUtil.getParentOfType(container,PsiCodeBlock.class,false);
  final FieldConflictsResolver fieldConflictsResolver=new FieldConflictsResolver(variableName,newDeclarationScope);
  final PsiElement finalAnchorStatement=anchorStatement;
  final Runnable runnable=new Runnable(){
    public void run(){
      try {
        PsiStatement statement=null;
        final boolean isInsideLoop=isLoopOrIf(container);
        if (!isInsideLoop && deleteSelf) {
          statement=(PsiStatement)expr.getParent();
        }
        final PsiExpression expr1=fieldConflictsResolver.fixInitializer(expr);
        PsiDeclarationStatement declaration=factory.createVariableDeclarationStatement(variableName,type,expr1);
        if (!isInsideLoop) {
          declaration=(PsiDeclarationStatement)container.addBefore(declaration,anchor);
          LOG.assertTrue(expr1.isValid());
          if (deleteSelf) {
            final PsiElement lastChild=statement.getLastChild();
            if (lastChild instanceof PsiComment) {
              declaration.addBefore(lastChild,null);
            }
            statement.delete();
            if (editor != null) {
              LogicalPosition pos=new LogicalPosition(line,col);
              editor.getCaretModel().moveToLogicalPosition(pos);
              editor.getCaretModel().moveToOffset(declaration.getTextRange().getEndOffset());
              editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
              editor.getSelectionModel().removeSelection();
            }
          }
        }
        PsiExpression ref=factory.createExpressionFromText(variableName,null);
        if (replaceAll) {
          ArrayList<PsiElement> array=new ArrayList<PsiElement>();
          for (          PsiExpression occurrence : occurrences) {
            if (deleteSelf && occurrence.equals(expr))             continue;
            if (occurrence.equals(expr)) {
              occurrence=expr1;
            }
            if (occurrence != null) {
              occurrence=RefactoringUtil.outermostParenthesizedExpression(occurrence);
            }
            if (replaceWrite || !RefactoringUtil.isAssignmentLHS(occurrence)) {
              array.add(occurrence.replace(ref));
            }
          }
          if (editor != null) {
            final PsiElement[] replacedOccurences=array.toArray(new PsiElement[array.size()]);
            highlightReplacedOccurences(project,editor,replacedOccurences);
          }
        }
 else {
          if (!deleteSelf && replaceSelf) {
            final PsiExpression expr2=RefactoringUtil.outermostParenthesizedExpression(expr1);
            expr2.replace(ref);
          }
        }
        if (IntroduceVariableBase.isLoopOrIf(container)) {
          PsiStatement loopBody=getLoopBody(container,finalAnchorStatement);
          PsiStatement loopBodyCopy=(PsiStatement)loopBody.copy();
          PsiBlockStatement blockStatement=(PsiBlockStatement)factory.createStatementFromText("{}",null);
          blockStatement=(PsiBlockStatement)CodeStyleManager.getInstance(project).reformat(blockStatement);
          final PsiElement prevSibling=loopBody.getPrevSibling();
          if (prevSibling instanceof PsiWhiteSpace) {
            final PsiElement pprev=prevSibling.getPrevSibling();
            if (!(pprev instanceof PsiComment) || !((PsiComment)pprev).getTokenType().equals(JavaTokenType.END_OF_LINE_COMMENT)) {
              prevSibling.delete();
            }
          }
          blockStatement=(PsiBlockStatement)loopBody.replace(blockStatement);
          final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
          declaration=(PsiDeclarationStatement)codeBlock.add(declaration);
          declaration.getManager().getCodeStyleManager().shortenClassReferences(declaration);
          codeBlock.add(loopBodyCopy);
        }
        PsiVariable var=(PsiVariable)declaration.getDeclaredElements()[0];
        var.getModifierList().setModifierProperty(PsiModifier.FINAL,declareFinal);
        fieldConflictsResolver.fix();
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,REFACTORING_NAME,null);
  return true;
}
