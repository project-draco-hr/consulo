{
  final PsiExpression expr2=RefactoringUtil.outermostParenthesizedExpression(expr1);
  if (expr2.isPhysical()) {
    return expr2.replace(ref);
  }
 else {
    int selectionStart=editor.getSelectionModel().getSelectionStart();
    final int selectionEnd=editor.getSelectionModel().getSelectionEnd();
    PsiElement last=null;
    final Set<PsiElement> toReplace=new HashSet<PsiElement>();
    while (selectionStart < selectionEnd) {
      final PsiElement at=file.findElementAt(selectionStart++);
      if (at != null) {
        last=at;
        toReplace.add(last);
      }
    }
    PsiElement replacement=null;
    if (last != null) {
      replacement=last.getParent().addAfter(ref,last);
    }
    for (    PsiElement element : toReplace) {
      if (element.isValid())       element.delete();
    }
    return replacement;
  }
}
