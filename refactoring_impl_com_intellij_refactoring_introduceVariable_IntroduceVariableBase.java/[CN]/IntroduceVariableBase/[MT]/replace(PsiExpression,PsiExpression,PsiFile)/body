{
  final PsiExpression expr2=RefactoringUtil.outermostParenthesizedExpression(expr1);
  if (expr2.isPhysical()) {
    return expr2.replace(ref);
  }
 else {
    final String prefix=expr1.getUserData(ElementToWorkOn.PREFIX);
    final String suffix=expr1.getUserData(ElementToWorkOn.SUFFIX);
    final PsiElement parent=expr1.getUserData(ElementToWorkOn.PARENT);
    final RangeMarker rangeMarker=expr1.getUserData(ElementToWorkOn.TEXT_RANGE);
    final String allText=parent.getContainingFile().getText();
    final TextRange parentRange=parent.getTextRange();
    String beg=allText.substring(parentRange.getStartOffset(),rangeMarker.getStartOffset());
    if (StringUtil.stripQuotesAroundValue(beg).length() == 0)     beg="";
    String end=allText.substring(rangeMarker.getEndOffset(),parentRange.getEndOffset());
    if (StringUtil.stripQuotesAroundValue(end).length() == 0)     end="";
    final String text=beg + (prefix != null ? prefix : "") + ref.getText()+ (suffix != null ? suffix : "")+ end;
    final PsiExpression el=JavaPsiFacade.getInstance(file.getProject()).getElementFactory().createExpressionFromText(text,file);
    return parent.replace(el);
  }
}
