{
  PsiExpression tempExpr;
  final PsiElement elementAt=PsiTreeUtil.findCommonParent(file.findElementAt(startOffset),file.findElementAt(endOffset - 1));
  final PsiLiteralExpression literalExpression=PsiTreeUtil.getParentOfType(elementAt,PsiLiteralExpression.class);
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  try {
    String text=file.getText().subSequence(startOffset,endOffset).toString();
    String prefix=null;
    String suffix=null;
    if (literalExpression != null) {
      final int expressionOffset=literalExpression.getTextOffset();
      final int literalLength=literalExpression.getTextLength();
      String stripped=startOffset == expressionOffset && (StringUtil.startsWithChar(text,'\"') || StringUtil.startsWithChar(text,'\'')) ? text.substring(1) : text;
      stripped=endOffset == expressionOffset + literalLength && (StringUtil.endsWithChar(stripped,'\"') || StringUtil.endsWithChar(stripped,'\'')) ? stripped.substring(0,stripped.length() - 1) : stripped;
      boolean primitive=false;
      if (stripped.equals("true") || stripped.equals("false")) {
        primitive=true;
      }
 else {
        try {
          Integer.parseInt(stripped);
          primitive=true;
        }
 catch (        NumberFormatException e1) {
        }
      }
      text=primitive ? stripped : ("\"" + stripped + "\"");
      if (expressionOffset + 1 < startOffset) {
        prefix="\" + ";
      }
      if (expressionOffset + literalLength - 1 > endOffset) {
        suffix=" + \"";
      }
    }
 else {
      text=text.trim();
    }
    tempExpr=elementFactory.createExpressionFromText(text,file);
    final boolean[] hasErrors=new boolean[1];
    final JavaRecursiveElementVisitor errorsVisitor=new JavaRecursiveElementVisitor(){
      @Override public void visitElement(      final PsiElement element){
        if (hasErrors[0]) {
          return;
        }
        super.visitElement(element);
      }
      @Override public void visitErrorElement(      final PsiErrorElement element){
        hasErrors[0]=true;
      }
    }
;
    tempExpr.accept(errorsVisitor);
    if (hasErrors[0])     return null;
    tempExpr.putUserData(ElementToWorkOn.PREFIX,prefix);
    tempExpr.putUserData(ElementToWorkOn.SUFFIX,suffix);
    final RangeMarker rangeMarker=FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset,endOffset);
    tempExpr.putUserData(ElementToWorkOn.TEXT_RANGE,rangeMarker);
    final PsiElement parent=literalExpression != null ? literalExpression : elementAt;
    tempExpr.putUserData(ElementToWorkOn.PARENT,parent);
    createReplacement("intellijidearulezzz",file,prefix,suffix,parent,rangeMarker).accept(errorsVisitor);
    if (hasErrors[0])     return null;
  }
 catch (  IncorrectOperationException e) {
    tempExpr=null;
  }
  return tempExpr;
}
