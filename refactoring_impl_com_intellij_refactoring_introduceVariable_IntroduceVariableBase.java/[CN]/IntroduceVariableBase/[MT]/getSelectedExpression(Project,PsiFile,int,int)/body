{
  PsiExpression tempExpr;
  final PsiElement elementAt=PsiTreeUtil.findCommonParent(file.findElementAt(startOffset),file.findElementAt(endOffset - 1));
  final PsiLiteralExpression literalExpression=PsiTreeUtil.getParentOfType(elementAt,PsiLiteralExpression.class);
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  try {
    String text=file.getText().subSequence(startOffset,endOffset).toString();
    String prefix=null;
    String suffix=null;
    if (literalExpression != null) {
      final String stripped=StringUtil.stripQuotesAroundValue(text);
      boolean primitive=false;
      if (stripped.equals("true") || stripped.equals("false")) {
        primitive=true;
      }
 else {
        try {
          Integer.parseInt(stripped);
          primitive=true;
        }
 catch (        NumberFormatException e1) {
        }
      }
      text=primitive ? stripped : ("\"" + stripped + "\"");
      final int offset=literalExpression.getTextOffset();
      if (offset + 1 < startOffset) {
        prefix="\" + ";
      }
      if (offset + literalExpression.getTextLength() - 1 > endOffset) {
        suffix=" + \"";
      }
    }
 else {
      text=text.trim();
    }
    tempExpr=elementFactory.createExpressionFromText(text,file);
    tempExpr.putUserData(ElementToWorkOn.PREFIX,prefix);
    tempExpr.putUserData(ElementToWorkOn.SUFFIX,suffix);
    tempExpr.putUserData(ElementToWorkOn.TEXT_RANGE,FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset,endOffset));
    tempExpr.putUserData(ElementToWorkOn.PARENT,literalExpression != null ? literalExpression : elementAt);
  }
 catch (  IncorrectOperationException e) {
    tempExpr=null;
  }
  return tempExpr;
}
