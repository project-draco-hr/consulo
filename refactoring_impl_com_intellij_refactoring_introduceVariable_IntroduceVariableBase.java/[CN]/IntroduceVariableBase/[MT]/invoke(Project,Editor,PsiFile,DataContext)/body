{
  if (!editor.getSelectionModel().hasSelection()) {
    final PsiElement elementAtCaret=file.findElementAt(editor.getCaretModel().getOffset());
    final List<PsiExpression> expressions=new ArrayList<PsiExpression>();
    PsiExpression expression=PsiTreeUtil.getParentOfType(elementAtCaret,PsiExpression.class);
    while (expression != null) {
      if (!(expression instanceof PsiReferenceExpression)) {
        expressions.add(expression);
      }
      expression=PsiTreeUtil.getParentOfType(expression,PsiExpression.class);
    }
    if (expressions.isEmpty()) {
      editor.getSelectionModel().selectLineAtCaret();
    }
 else     if (expressions.size() == 1) {
      final TextRange textRange=expressions.get(0).getTextRange();
      editor.getSelectionModel().setSelection(textRange.getStartOffset(),textRange.getEndOffset());
    }
 else {
      JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<PsiExpression>("Expressions",expressions){
        @Override public PopupStep onChosen(        final PsiExpression selectedValue,        final boolean finalChoice){
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              invoke(project,editor,file,selectedValue.getTextRange().getStartOffset(),selectedValue.getTextRange().getEndOffset());
            }
          }
);
          return FINAL_CHOICE;
        }
        @NotNull @Override public String getTextFor(        final PsiExpression value){
          return value.getText();
        }
      }
).showInBestPositionFor(editor);
      return;
    }
  }
  if (invoke(project,editor,file,editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd())) {
    editor.getSelectionModel().removeSelection();
  }
}
