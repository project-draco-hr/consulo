{
  final ScopeHighlighter highlighter=new ScopeHighlighter(editor);
  final DefaultListModel model=new DefaultListModel();
  for (  PsiExpression expr : expressions) {
    model.addElement(expr);
  }
  final JList list=new JList(model);
  list.setCellRenderer(new DefaultListCellRenderer(){
    void appendText(    PsiExpression expr,    StringBuffer buf){
      if (expr instanceof PsiNewExpression) {
        final PsiAnonymousClass anonymousClass=((PsiNewExpression)expr).getAnonymousClass();
        final PsiExpressionList argumentList=((PsiNewExpression)expr).getArgumentList();
        if (argumentList == null) {
          buf.append(expr.getText());
        }
 else {
          final String args=argumentList.getExpressions().length > 0 ? "(...)" : "()";
          if (anonymousClass != null) {
            buf.append("new ").append(anonymousClass.getBaseClassType().getPresentableText()).append(args).append(" {...}");
          }
 else {
            final PsiJavaCodeReferenceElement reference=((PsiNewExpression)expr).getClassReference();
            if (reference != null) {
              buf.append("new ").append(reference.getText()).append(args);
            }
 else {
              buf.append(expr.getText());
            }
          }
        }
      }
 else       if (expr instanceof PsiReferenceExpression) {
        final PsiExpression qualifierExpression=((PsiReferenceExpression)expr).getQualifierExpression();
        if (qualifierExpression != null) {
          appendText(qualifierExpression,buf);
          buf.append(".");
        }
        buf.append(((PsiReferenceExpression)expr).getReferenceName());
      }
 else       if (expr instanceof PsiMethodCallExpression) {
        appendText(((PsiMethodCallExpression)expr).getMethodExpression(),buf);
        final PsiExpression[] args=((PsiMethodCallExpression)expr).getArgumentList().getExpressions();
        if (args.length > 0) {
          buf.append("(...)");
        }
 else {
          buf.append("()");
        }
      }
 else       if (expr instanceof PsiAssignmentExpression) {
        final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expr;
        appendText(assignmentExpression.getLExpression(),buf);
        buf.append(assignmentExpression.getOperationSign().getText());
        appendText(assignmentExpression.getRExpression(),buf);
      }
 else       if (expr instanceof PsiConditionalExpression) {
        final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)expr;
        appendText(conditionalExpression.getCondition(),buf);
        buf.append(" ? ");
        appendText(conditionalExpression.getThenExpression(),buf);
        buf.append(" : ");
        appendText(conditionalExpression.getElseExpression(),buf);
      }
 else       if (expr instanceof PsiBinaryExpression) {
        final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expr;
        appendText(binaryExpression.getLOperand(),buf);
        buf.append(binaryExpression.getOperationSign().getText());
        appendText(binaryExpression.getROperand(),buf);
      }
 else       if (expr instanceof PsiPostfixExpression) {
        appendText(((PsiPostfixExpression)expr).getOperand(),buf);
        buf.append(((PsiPostfixExpression)expr).getOperationSign().getText());
      }
 else       if (expr instanceof PsiPrefixExpression) {
        buf.append(((PsiPrefixExpression)expr).getOperationSign().getText());
        appendText(((PsiPrefixExpression)expr).getOperand(),buf);
      }
 else {
        buf.append(expr.getText());
      }
    }
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final StringBuffer buf=new StringBuffer();
      appendText((PsiExpression)value,buf);
      setText(buf.toString());
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      highlighter.dropHighlight();
      final int index=list.getSelectedIndex();
      if (index < 0)       return;
      final PsiExpression expr=(PsiExpression)model.get(index);
      final ArrayList<PsiElement> toExtract=new ArrayList<PsiElement>();
      toExtract.add(expr);
      highlighter.highlight(expr,toExtract);
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Expressions").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      callback.pass((PsiExpression)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    JBPopup popup){
      highlighter.dropHighlight();
    }
  }
).createPopup().showInBestPositionFor(editor);
}
