{
  final ScopeHighlighter highlighter=new ScopeHighlighter(editor);
  final DefaultListModel model=new DefaultListModel();
  for (  PsiExpression expr : expressions) {
    model.addElement(expr);
  }
  final JList list=new JList(model);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final StringBuffer buf=new StringBuffer();
      ((PsiExpression)value).accept(new PsiExpressionTrimRenderer(buf));
      setText(buf.toString());
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      highlighter.dropHighlight();
      final int index=list.getSelectedIndex();
      if (index < 0)       return;
      final PsiExpression expr=(PsiExpression)model.get(index);
      final ArrayList<PsiElement> toExtract=new ArrayList<PsiElement>();
      toExtract.add(expr);
      highlighter.highlight(expr,toExtract);
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Expressions").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      callback.pass((PsiExpression)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    JBPopup popup){
      highlighter.dropHighlight();
    }
  }
).createPopup().showInBestPositionFor(editor);
}
