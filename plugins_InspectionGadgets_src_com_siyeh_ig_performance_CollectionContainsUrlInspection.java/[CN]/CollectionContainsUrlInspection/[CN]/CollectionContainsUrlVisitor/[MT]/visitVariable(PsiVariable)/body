{
  super.visitVariable(variable);
  final PsiTypeElement typeElement=variable.getTypeElement();
  if (typeElement == null) {
    return;
  }
  final PsiType type=typeElement.getType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  final PsiJavaCodeReferenceElement referenceElement=typeElement.getInnermostComponentReferenceElement();
  if (referenceElement == null) {
    return;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass aClass=classType.resolve();
  final ClassType collectionType=getClassType(aClass);
  if (collectionType == ClassType.OTHER) {
    return;
  }
  final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
  if (parameterList == null) {
    final PsiMember member=PsiTreeUtil.getParentOfType(variable,PsiMember.class);
    if (member == null) {
      return;
    }
    final UrlAddedVisitor visitor=new UrlAddedVisitor(variable,collectionType);
    member.accept(visitor);
    if (visitor.isUrlAdded()) {
      registerVariableError(variable,collectionType);
    }
    return;
  }
  final PsiType[] typeArguments=parameterList.getTypeArguments();
  boolean containsUrl=false;
  for (  PsiType typeArgument : typeArguments) {
    if (typeArgument.equalsToText("java.net.URL")) {
      containsUrl=true;
      break;
    }
  }
  if (!containsUrl) {
    return;
  }
  registerVariableError(variable,collectionType);
}
