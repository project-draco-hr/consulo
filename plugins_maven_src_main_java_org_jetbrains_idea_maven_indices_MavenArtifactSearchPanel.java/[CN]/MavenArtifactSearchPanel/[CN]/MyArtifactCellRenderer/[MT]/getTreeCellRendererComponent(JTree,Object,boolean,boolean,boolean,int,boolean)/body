{
  myLeftComponent.clear();
  myRightComponent.clear();
  if (UIUtil.isUnderQuaquaLookAndFeel()) {
    setBackground(selected ? UIUtil.getTreeSelectionBackground() : null);
  }
 else {
    if (selected) {
      setBackground(UIUtil.getTreeSelectionBackground());
      setForeground(UIUtil.getTreeSelectionForeground());
    }
 else {
      setBackground(null);
      setForeground(tree.getForeground());
    }
  }
  if (getFont() == null)   setFont(tree.getFont());
  if (value == tree.getModel().getRoot()) {
    myLeftComponent.append("Results",SimpleTextAttributes.REGULAR_ATTRIBUTES);
  }
 else   if (value instanceof MavenArtifactSearchResult) {
    formatSearchResult(tree,(MavenArtifactSearchResult)value);
  }
 else   if (value instanceof ArtifactInfo) {
    ArtifactInfo info=(ArtifactInfo)value;
    myLeftComponent.append(info.groupId + ":" + info.artifactId+ ":"+ info.version,SimpleTextAttributes.GRAY_ATTRIBUTES);
  }
  removeAll();
  add(myLeftComponent,BorderLayout.WEST);
  JPanel spacer=new JPanel();
  spacer.setBorder(BorderFactory.createEmptyBorder(0,2,0,2));
  spacer.setBackground(selected ? UIUtil.getTreeSelectionBackground() : tree.getBackground());
  add(spacer,BorderLayout.CENTER);
  add(myRightComponent,BorderLayout.EAST);
  return this;
}
