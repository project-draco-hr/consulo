{
  super.visitMethod(method);
  @NonNls final String methodName=method.getName();
  if (!"toString".equals(methodName)) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() != 0) {
    return;
  }
  final PsiType returnType=method.getReturnType();
  final PsiClassType javaLangString=PsiType.getJavaLangString(method.getManager(),method.getResolveScope());
  if (!javaLangString.equals(returnType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final PsiField[] fields=GenerateToStringUtils.filterAvailableFields(aClass,GenerateToStringContext.getConfig().getFilterPattern());
  final PsiMethod[] methods;
  if (GenerateToStringContext.getConfig().isEnableMethods()) {
    methods=GenerateToStringUtils.filterAvailableMethods(aClass,GenerateToStringContext.getConfig().getFilterPattern());
  }
 else {
    methods=PsiMethod.EMPTY_ARRAY;
  }
  final FieldUsedVisitor visitor=new FieldUsedVisitor(fields,methods);
  method.accept(visitor);
  for (  PsiField field : visitor.getUnusedFields()) {
    final String fieldName=field.getName();
    myHolder.registerProblem(field.getNameIdentifier(),"Field '" + fieldName + "' is not used in 'toString()' method",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,GenerateToStringQuickFix.getInstance());
  }
  for (  PsiMethod unusedMethod : visitor.getUnusedMethods()) {
    final PsiIdentifier identifier=unusedMethod.getNameIdentifier();
    final PsiElement target=identifier == null ? unusedMethod : identifier;
    myHolder.registerProblem(target,"Method '" + unusedMethod.getName() + "' is not used in 'toString()' method",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,GenerateToStringQuickFix.getInstance());
  }
}
