{
  VfsUtilCore.visitChildrenRecursively(myRoot,new VirtualFileVisitor(VirtualFileVisitor.NO_FOLLOW_SYMLINKS){
    @Override public void afterChildrenVisited(    @NotNull VirtualFile file){
      if (myDirectoryFilter != null) {
        myDirectoryFilter.afterChildrenVisited(file);
      }
    }
    @NotNull @Override public Result visitFileEx(    @NotNull VirtualFile file){
      if (isExcluded(myExcludedFileIndex,file))       return SKIP_CHILDREN;
      if (myRootPresentFilter != null && !myRootPresentFilter.accept(file))       return SKIP_CHILDREN;
      if (myProject.isDisposed() || !process(file))       return skipTo(myRoot);
      if (myDirectoryFilter != null && file.isDirectory() && !myDirectoryFilter.shouldGoIntoDirectory(file))       return SKIP_CHILDREN;
      return CONTINUE;
    }
  }
);
}
