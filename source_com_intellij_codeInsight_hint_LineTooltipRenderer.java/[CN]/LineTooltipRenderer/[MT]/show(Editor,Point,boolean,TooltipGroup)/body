{
  final HintManager hintManager=HintManager.getInstance();
  LightweightHint hint;
  final JComponent editorComponent=editor.getComponent();
  JLabel label=new JLabel();
  final JComponent contentComponent=editor.getContentComponent();
  label.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      MouseEvent newMouseEvent=SwingUtilities.convertMouseEvent(e.getComponent(),e,contentComponent);
      hintManager.hideAllHints();
      contentComponent.dispatchEvent(newMouseEvent);
    }
  }
);
  label.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.black),BorderFactory.createEmptyBorder(0,5,0,5)));
  label.setForeground(Color.black);
  label.setBackground(HintUtil.INFORMATION_COLOR);
  label.setOpaque(true);
  String text=myText;
  if (text == null)   return null;
  label.setText(text);
  int width=label.getPreferredSize().width;
  JLayeredPane layeredPane=editorComponent.getRootPane().getLayeredPane();
  int widthLimit=layeredPane.getWidth() - 10;
  int heightLimit=layeredPane.getHeight() - 5;
  if (text.indexOf("<html>") < 0 && width > widthLimit / 3) {
    label.setUI(new MultiLineLabelUI());
    text=splitText(label,text,widthLimit);
    label.setText(text);
  }
  if (alignToRight) {
    p.x-=label.getPreferredSize().width;
  }
  p.x+=3;
  p.y+=3;
  width=label.getPreferredSize().width;
  if (p.x + width >= widthLimit) {
    p.x=widthLimit - width;
  }
  if (p.x < 3) {
    p.x=3;
  }
  int height=label.getPreferredSize().height;
  if (p.y + height > heightLimit) {
    p.y=heightLimit - height;
  }
  hint=new LightweightHint(label);
  hintManager.showEditorHint(hint,editor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_OTHER_HINT| HintManager.HIDE_BY_SCROLLING,0,false);
  return hint;
}
