{
  final Palette palette=Palette.getInstance(editor.getProject());
  IntrospectedProperty[] props=palette.getIntrospectedProperties(component.getComponentClass());
  final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(component.getModule());
  final PsiManager psiManager=PsiManager.getInstance(component.getModule().getProject());
  final PsiClass aClass=psiManager.findClass(component.getComponentClassName(),scope);
  if (aClass == null) {
    return null;
  }
  List<ErrorInfo> result=null;
  for (  IntrospectedProperty prop : props) {
    if (component.isMarkedAsModified(prop)) {
      final PsiMethod getter=PropertyUtil.findPropertyGetter(aClass,prop.getName(),false,true);
      if (Java15APIUsageInspection.isJava15APIUsage(getter)) {
        if (result == null) {
          result=new ArrayList<ErrorInfo>();
        }
        result.add(new ErrorInfo(prop.getName(),InspectionsBundle.message("inspection.1.5.problem.descriptor","@since 1.5"),new QuickFix[]{new RemovePropertyFix(editor,component,prop)}));
      }
    }
  }
  return result == null ? null : result.toArray(new ErrorInfo[result.size()]);
}
