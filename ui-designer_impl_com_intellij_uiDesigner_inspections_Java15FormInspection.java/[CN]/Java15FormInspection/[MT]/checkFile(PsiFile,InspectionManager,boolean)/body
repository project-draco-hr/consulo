{
  if (file.getFileType().equals(StdFileTypes.GUI_DESIGNER_FORM)) {
    final Module module=ModuleUtil.getModuleForFile(file.getProject(),file.getVirtualFile());
    if (module == null) {
      return null;
    }
    final LwRootContainer rootContainer;
    try {
      rootContainer=Utils.getRootContainer(file.getText(),new PsiPropertiesProvider(module));
    }
 catch (    Exception e) {
      return null;
    }
    final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module);
    final PsiManager psiManager=PsiManager.getInstance(module.getProject());
    final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
    FormEditingUtil.iterate(rootContainer,new FormEditingUtil.ComponentVisitor(){
      public boolean visit(      final IComponent component){
        final PsiClass aClass=psiManager.findClass(component.getComponentClassName(),scope);
        if (aClass == null) {
          return true;
        }
        LwComponent lwComponent=(LwComponent)component;
        LwIntrospectedProperty[] props=lwComponent.getAssignedIntrospectedProperties();
        for (        LwIntrospectedProperty prop : props) {
          final PsiMethod getter=PropertyUtil.findPropertyGetter(aClass,prop.getName(),false,true);
          if (Java15APIUsageInspection.isJava15APIUsage(getter)) {
            problems.add(manager.createProblemDescriptor(file,InspectionsBundle.message("inspection.1.5.problem.descriptor","@since 1.5"),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
        }
        return true;
      }
    }
);
    return problems.toArray(new ProblemDescriptor[problems.size()]);
  }
  return null;
}
