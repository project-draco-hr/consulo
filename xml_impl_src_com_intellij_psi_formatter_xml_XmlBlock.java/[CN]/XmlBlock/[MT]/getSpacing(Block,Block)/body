{
  if (!(child1 instanceof AbstractBlock) || !(child2 instanceof AbstractBlock)) {
    return null;
  }
  final IElementType elementType=myNode.getElementType();
  final ASTNode node1=((AbstractBlock)child1).getNode();
  final IElementType type1=node1.getElementType();
  final ASTNode node2=((AbstractBlock)child2).getNode();
  final IElementType type2=node2.getElementType();
  if ((isXmlTag(node2) || type2 == XmlElementType.XML_END_TAG_START || type2 == XmlElementType.XML_TEXT) && myXmlFormattingPolicy.getShouldKeepWhiteSpaces()) {
    return Spacing.getReadOnlySpacing();
  }
  if (type1 == JspElementType.JSP_DECLARATION_START || type1 == JspElementType.JSP_SCRIPTLET_START) {
    return Spacing.createDependentLFSpacing(0,1,node2.getTextRange(),myXmlFormattingPolicy.getShouldKeepLineBreaks(),myXmlFormattingPolicy.getKeepBlankLines());
  }
  if (type2 == JspElementType.JSP_DECLARATION_END || type2 == JspElementType.JSP_SCRIPTLET_END) {
    return Spacing.createDependentLFSpacing(0,1,node1.getTextRange(),myXmlFormattingPolicy.getShouldKeepLineBreaks(),myXmlFormattingPolicy.getKeepBlankLines());
  }
  if (elementType == XmlElementType.XML_TEXT) {
    return getSpacesInsideText(type1,type2);
  }
 else   if (elementType == XmlElementType.XML_ATTRIBUTE) {
    return getSpacesInsideAttribute(type1,type2);
  }
  if (type1 == XmlElementType.XML_PROLOG) {
    return createDefaultSpace(true,false);
  }
  if (elementType == XmlElementType.XML_DOCTYPE) {
    return createDefaultSpace(true,false);
  }
  return createDefaultSpace(false,false);
}
