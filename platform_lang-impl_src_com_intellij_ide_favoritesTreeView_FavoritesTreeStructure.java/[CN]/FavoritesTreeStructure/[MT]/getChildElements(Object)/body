{
  if (!(element instanceof AbstractTreeNode)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final AbstractTreeNode favTreeElement=(AbstractTreeNode)element;
  try {
    if (!(element instanceof FavoritesListNode)) {
      return super.getChildElements(favTreeElement);
    }
    final Set<AbstractTreeNode> result=new HashSet<AbstractTreeNode>();
    for (    AbstractTreeNode<?> abstractTreeNode : FavoritesListNode.getFavoritesRoots(myProject,((FavoritesListNode)element).getName())) {
      final Object value=abstractTreeNode.getValue();
      if (value == null)       continue;
      if (value instanceof PsiElement && !((PsiElement)value).isValid())       continue;
      if (value instanceof SmartPsiElementPointer && ((SmartPsiElementPointer)value).getElement() == null)       continue;
      boolean invalid=false;
      for (      FavoriteNodeProvider nodeProvider : Extensions.getExtensions(FavoriteNodeProvider.EP_NAME,myProject)) {
        if (nodeProvider.isInvalidElement(value)) {
          invalid=true;
          break;
        }
      }
      if (invalid)       continue;
      result.add(abstractTreeNode);
    }
    return ArrayUtil.toObjectArray(result);
  }
 catch (  Exception e) {
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
