{
  if (!(element instanceof AbstractTreeNode)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final AbstractTreeNode favoritesTreeElement=(AbstractTreeNode)element;
  try {
    if (element != getRootElement()) {
      return super.getChildElements(favoritesTreeElement);
    }
    Set<AbstractTreeNode> result=new HashSet<AbstractTreeNode>();
    for (    AbstractTreeNode<?> abstractTreeNode : getFavoritesRoots()) {
      final Object val=abstractTreeNode.getValue();
      if (val == null) {
        continue;
      }
      if (val instanceof PsiElement && !((PsiElement)val).isValid()) {
        continue;
      }
      if (val instanceof SmartPsiElementPointer && ((SmartPsiElementPointer)val).getElement() == null) {
        continue;
      }
      boolean isInvalid=false;
      for (      FavoriteNodeProvider nodeProvider : Extensions.getExtensions(FavoriteNodeProvider.EP_NAME,myProject)) {
        if (nodeProvider.isInvalidElement(val)) {
          isInvalid=true;
          break;
        }
      }
      if (isInvalid)       continue;
      result.add(abstractTreeNode);
    }
    if (result.isEmpty()) {
      result.add(getEmptyScreen());
    }
    return ArrayUtil.toObjectArray(result);
  }
 catch (  Exception e) {
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
