{
  final DefaultMutableTreeNode root=(DefaultMutableTreeNode)myRightTreeModel.getRoot();
  root.removeAllChildren();
  final List<Chunk<Module>> chunks=CyclicDependenciesUtil.buildChunks(myModulesGraph);
  for (Iterator<Chunk<Module>> iterator=chunks.iterator(); iterator.hasNext(); ) {
    Chunk<Module> chunk=iterator.next();
    if (!chunk.containsNode(module)) {
      continue;
    }
    final Set<List<Module>> cycles=CyclicGraphUtil.getNodeCycles(myModulesGraph,module);
    int index=1;
    for (Iterator<List<Module>> cyclesIterator=cycles.iterator(); cyclesIterator.hasNext(); ) {
      List<Module> modules=cyclesIterator.next();
      final DefaultMutableTreeNode cycle=new DefaultMutableTreeNode("Cycle" + Integer.toString(index++).toUpperCase());
      root.add(cycle);
      cycle.add(new DefaultMutableTreeNode(new MyUserObject(false,module)));
      for (Iterator<Module> inCycleIterator=modules.iterator(); inCycleIterator.hasNext(); ) {
        Module module1=inCycleIterator.next();
        cycle.add(new DefaultMutableTreeNode(new MyUserObject(false,module1)));
      }
    }
  }
  ((DefaultTreeModel)myRightTree.getModel()).reload();
  TreeUtil.expandAll(myRightTree);
}
