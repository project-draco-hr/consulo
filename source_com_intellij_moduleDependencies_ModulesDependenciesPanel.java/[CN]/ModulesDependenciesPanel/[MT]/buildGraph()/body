{
  final Graph<Module> graph=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Module>(){
    public Collection<Module> getNodes(){
      return Arrays.asList(ModuleManager.getInstance(myProject).getModules());
    }
    public Iterator<Module> getIn(    Module module){
      return Arrays.asList(ModuleRootManager.getInstance(module).getDependencies()).iterator();
    }
  }
));
  if (DependenciesAnalyzeManager.getInstance(myProject).isForwardDirection()) {
    return graph;
  }
 else {
    return new Graph<Module>(){
      public Collection<Module> getNodes(){
        return graph.getNodes();
      }
      public Iterator<Module> getIn(      final Module n){
        return graph.getOut(n);
      }
      public Iterator<Module> getOut(      final Module n){
        return graph.getIn(n);
      }
    }
;
  }
}
