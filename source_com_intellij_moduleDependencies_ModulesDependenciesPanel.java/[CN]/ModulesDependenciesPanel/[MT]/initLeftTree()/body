{
  final DefaultMutableTreeNode root=new DefaultMutableTreeNode("Root");
  myLeftTreeModel=new DefaultTreeModel(root);
  initLeftTreeModel();
  myLeftTree=new Tree(myLeftTreeModel);
  initTree(myLeftTree,false);
  myLeftTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
    }
    public void treeExpanded(    TreeExpansionEvent event){
      final DefaultMutableTreeNode expandedNode=(DefaultMutableTreeNode)event.getPath().getLastPathComponent();
      for (int i=0; i < expandedNode.getChildCount(); i++) {
        DefaultMutableTreeNode child=(DefaultMutableTreeNode)expandedNode.getChildAt(i);
        if (child.getChildCount() == 0) {
          Module module=((MyUserObject)child.getUserObject()).getModule();
          final Iterator<Module> out=myModulesGraph.getOut(module);
          for (; out.hasNext(); ) {
            final Module nextModule=out.next();
            child.add(new DefaultMutableTreeNode(new MyUserObject(false,nextModule)));
          }
          sortSubTree(child);
        }
      }
    }
  }
);
  myLeftTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      if (myLeftTree.getSelectionPath() != null && myLeftTree.getSelectionPath().getLastPathComponent() != null) {
        TreeUtil.traverseDepth((TreeNode)myLeftTree.getModel().getRoot(),new TreeUtil.Traverse(){
          public boolean accept(          Object node){
            DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
            if (treeNode.getUserObject() instanceof MyUserObject) {
              ((MyUserObject)treeNode.getUserObject()).setInCycle(false);
            }
            return true;
          }
        }
);
        final DefaultMutableTreeNode selection=(DefaultMutableTreeNode)myLeftTree.getSelectionPath().getLastPathComponent();
        selectCycleUpward(selection);
        buildRightTree(((MyUserObject)selection.getUserObject()).getModule());
      }
    }
  }
);
  TreeUtil.selectFirstNode(myLeftTree);
}
