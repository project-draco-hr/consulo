{
  if (success) {
    boolean isDeleteLocalVariable=false;
    PsiExpression parameterInitializer=myExpr;
    if (myLocalVar != null) {
      if (isUseInitializer()) {
        parameterInitializer=myLocalVar.getInitializer();
      }
      isDeleteLocalVariable=isDeleteLocalVariable();
    }
    if (!myMethod.isValid() || myParameterName == null || myLocalVar == null && myExpr == null) {
      super.moveOffsetAfter(false);
      return;
    }
    final TIntArrayList parametersToRemove=getParametersToRemove();
    final IntroduceParameterProcessor processor=new IntroduceParameterProcessor(myProject,myMethod,myMethodToSearchFor,parameterInitializer,myExpr,myLocalVar,isDeleteLocalVariable,myParameterName,isReplaceAllOccurences(),getReplaceFieldsWithGetters(),myMustBeFinal || myFinal,isGenerateDelegate(),myParameterTypePointer.getType(),parametersToRemove);
    final Runnable runnable=new Runnable(){
      public void run(){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            final boolean[] conflictsFound=new boolean[]{true};
            processor.setPrepareSuccessfulSwingThreadCallback(new Runnable(){
              @Override public void run(){
                conflictsFound[0]=processor.hasConflicts();
              }
            }
);
            processor.run();
            normalizeParameterIdxAccordingToRemovedParams(parametersToRemove);
            ParameterInplaceIntroducer.super.moveOffsetAfter(!conflictsFound[0]);
          }
        }
);
      }
    }
;
    CommandProcessor.getInstance().executeCommand(myProject,runnable,IntroduceParameterHandler.REFACTORING_NAME,null);
  }
  super.moveOffsetAfter(false);
}
