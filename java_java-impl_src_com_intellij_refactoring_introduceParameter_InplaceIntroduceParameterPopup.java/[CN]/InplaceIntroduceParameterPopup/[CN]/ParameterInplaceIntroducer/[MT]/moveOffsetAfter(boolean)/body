{
  if (success) {
    final PsiParameter psiParameter=(PsiParameter)getVariable();
    if (psiParameter == null) {
      super.moveOffsetAfter(false);
      return;
    }
    myFinal=psiParameter.hasModifierProperty(PsiModifier.FINAL);
    myParameterTypePointer=SmartTypePointerManager.getInstance(myProject).createSmartTypePointer(psiParameter.getType());
    PsiDocumentManager.getInstance(myProject).commitAllDocuments();
    myParameterName=psiParameter.getName();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        final PsiFile containingFile=myMethod.getContainingFile();
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
        if (myExprMarker != null) {
          myExpr=restoreExpression(containingFile,psiParameter,elementFactory,myExprMarker,myExprText);
          if (myExpr != null) {
            myExprMarker=myEditor.getDocument().createRangeMarker(myExpr.getTextRange());
          }
        }
        final List<RangeMarker> occurrenceMarkers=getOccurrenceMarkers();
        for (int i=0, occurrenceMarkersSize=occurrenceMarkers.size(); i < occurrenceMarkersSize; i++) {
          RangeMarker marker=occurrenceMarkers.get(i);
          if (myExprMarker != null && marker.getStartOffset() == myExprMarker.getStartOffset()) {
            myOccurrences[i]=myExpr;
            continue;
          }
          final PsiExpression psiExpression=restoreExpression(containingFile,psiParameter,elementFactory,marker,myExprText);
          if (psiExpression != null) {
            myOccurrences[i]=psiExpression;
          }
        }
        myOccurrenceMarkers=null;
        if (psiParameter.isValid()) {
          psiParameter.delete();
        }
      }
    }
);
    boolean isDeleteLocalVariable=false;
    PsiExpression parameterInitializer=myExpr;
    if (myLocalVar != null) {
      if (isUseInitializer()) {
        parameterInitializer=myLocalVar.getInitializer();
      }
      isDeleteLocalVariable=isDeleteLocalVariable();
    }
    if (myLocalVar == null && myExpr == null) {
      super.moveOffsetAfter(false);
      return;
    }
    final TIntArrayList parametersToRemove=getParametersToRemove();
    final IntroduceParameterProcessor processor=new IntroduceParameterProcessor(myProject,myMethod,myMethodToSearchFor,parameterInitializer,myExpr,myLocalVar,isDeleteLocalVariable,myParameterName,isReplaceAllOccurences(),getReplaceFieldsWithGetters(),myMustBeFinal || myFinal,isGenerateDelegate(),myParameterTypePointer.getType(),parametersToRemove);
    final Runnable runnable=new Runnable(){
      public void run(){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            final boolean[] conflictsFound=new boolean[]{true};
            processor.setPrepareSuccessfulSwingThreadCallback(new Runnable(){
              @Override public void run(){
                conflictsFound[0]=processor.hasConflicts();
              }
            }
);
            processor.run();
            normalizeParameterIdxAccordingToRemovedParams(parametersToRemove);
            ParameterInplaceIntroducer.super.moveOffsetAfter(!conflictsFound[0]);
          }
        }
);
      }
    }
;
    CommandProcessor.getInstance().executeCommand(myProject,runnable,IntroduceParameterHandler.REFACTORING_NAME,null);
  }
  super.moveOffsetAfter(false);
}
