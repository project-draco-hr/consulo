{
  super.finish();
  final PsiParameter psiParameter=(PsiParameter)getVariable();
  LOG.assertTrue(psiParameter != null);
  myFinal=psiParameter.hasModifierProperty(PsiModifier.FINAL);
  myParameterTypePointer=SmartTypePointerManager.getInstance(myProject).createSmartTypePointer(psiParameter.getType());
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  myParameterName=psiParameter.getName();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      final PsiFile containingFile=myMethod.getContainingFile();
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
      if (myExprMarker != null) {
        myExpr=restoreExpression(containingFile,psiParameter,elementFactory,myExprMarker,myExprText);
        if (myExpr != null) {
          myExprMarker=myEditor.getDocument().createRangeMarker(myExpr.getTextRange());
        }
      }
      final List<RangeMarker> occurrenceMarkers=getOccurrenceMarkers();
      for (int i=0, occurrenceMarkersSize=occurrenceMarkers.size(); i < occurrenceMarkersSize; i++) {
        RangeMarker marker=occurrenceMarkers.get(i);
        if (myExprMarker != null && marker.getStartOffset() == myExprMarker.getStartOffset()) {
          myOccurrences[i]=myExpr;
          continue;
        }
        final PsiExpression psiExpression=restoreExpression(containingFile,psiParameter,elementFactory,marker,myExprText);
        if (psiExpression != null) {
          myOccurrences[i]=psiExpression;
        }
      }
      myOccurrenceMarkers=null;
      if (psiParameter.isValid()) {
        psiParameter.delete();
      }
    }
  }
);
}
