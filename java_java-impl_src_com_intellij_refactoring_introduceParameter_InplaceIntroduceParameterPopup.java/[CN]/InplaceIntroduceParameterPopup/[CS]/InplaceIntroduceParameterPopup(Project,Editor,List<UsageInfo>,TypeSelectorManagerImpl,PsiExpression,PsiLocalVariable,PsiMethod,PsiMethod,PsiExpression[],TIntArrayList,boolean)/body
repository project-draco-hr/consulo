{
  super(project,localVar,expr,method,parametersToRemove);
  myProject=project;
  myEditor=editor;
  myTypeSelectorManager=typeSelectorManager;
  myExpr=expr;
  myLocalVar=localVar;
  myMethod=method;
  myMethodToSearchFor=methodToSearchFor;
  myOccurrences=occurrences;
  myMustBeFinal=mustBeFinal;
  myExprMarker=expr != null && expr.isPhysical() ? myEditor.getDocument().createRangeMarker(expr.getTextRange()) : null;
  myExprText=myExpr != null ? myExpr.getText() : null;
  myWholePanel=new JPanel(new GridBagLayout());
  myWholePanel.setBorder(null);
  final GridBagConstraints gc=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  gc.insets=new Insets(0,5,0,0);
  gc.gridwidth=1;
  gc.fill=GridBagConstraints.NONE;
  if (myOccurrences.length > 1 && !myIsInvokedOnDeclaration) {
    gc.gridy++;
    createOccurrencesCb(gc,myWholePanel,myOccurrences.length);
  }
  gc.gridy++;
  gc.insets.left=5;
  createDelegateCb(gc,myWholePanel);
  final JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  final JPanel rightPanel=new JPanel(new GridBagLayout());
  final GridBagConstraints rgc=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,5),0,0);
  createLocalVariablePanel(rgc,rightPanel,settings);
  createRemoveParamsPanel(rgc,rightPanel);
  if (Util.anyFieldsWithGettersPresent(classMemberRefs)) {
    rgc.gridy++;
    rightPanel.add(createReplaceFieldsWithGettersPanel(),rgc);
  }
  gc.gridx=1;
  gc.gridheight=myCbReplaceAllOccurences != null ? 3 : 2;
  gc.gridy=1;
  myWholePanel.add(rightPanel,gc);
  for (  PsiExpression occurrence : occurrences) {
    if (PsiUtil.isAccessedForWriting(occurrence)) {
      myHasWriteAccess=true;
      break;
    }
  }
}
