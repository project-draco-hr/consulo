{
  super(project,localVar,expr,method,parametersToRemove);
  myProject=project;
  myEditor=editor;
  myTypeSelectorManager=typeSelectorManager;
  myExpr=expr;
  myLocalVar=localVar;
  myMethod=method;
  myMethodToSearchFor=methodToSearchFor;
  myOccurrences=occurrences;
  myMustBeFinal=mustBeFinal;
  myExprMarker=expr != null ? myEditor.getDocument().createRangeMarker(expr.getTextRange()) : null;
  myExprText=myExpr != null ? myExpr.getText() : null;
  myWholePanel=new JPanel(new GridBagLayout());
  myWholePanel.setBorder(null);
  final GridBagConstraints gc=new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  final TitlePanel titlePanel=new TitlePanel();
  titlePanel.setBorder(null);
  titlePanel.setText(IntroduceParameterHandler.REFACTORING_NAME);
  myWholePanel.add(titlePanel,gc);
  gc.insets=new Insets(5,5,5,0);
  if (myOccurrences.length > 1 && !myIsInvokedOnDeclaration) {
    gc.gridy++;
    createOccurrencesCb(gc,myWholePanel,myOccurrences.length);
  }
  final JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  createLocalVariablePanel(gc,myWholePanel,settings);
  createRemoveParamsPanel(gc,myWholePanel);
  if (Util.anyFieldsWithGettersPresent(classMemberRefs)) {
    gc.gridy++;
    myWholePanel.add(createReplaceFieldsWithGettersPanel(),gc);
  }
  gc.gridy++;
  createDelegateCb(gc,myWholePanel);
}
