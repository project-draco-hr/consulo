{
  super(project,localVar,expr,method,parametersToRemove);
  myProject=project;
  myEditor=editor;
  myTypeSelectorManager=typeSelectorManager;
  myNameSuggestionsGenerator=nameSuggestionsGenerator;
  myExpr=expr;
  myLocalVar=localVar;
  myMethod=method;
  myMethodToSearchFor=methodToSearchFor;
  myOccurrences=occurrences;
  myMustBeFinal=mustBeFinal;
  myExprMarker=expr != null ? myEditor.getDocument().createRangeMarker(myExpr.getTextRange()) : null;
  myOccurrenceMarkers=new ArrayList<RangeMarker>();
  myWholePanel=new JPanel(new GridBagLayout());
  myWholePanel.setBorder(BorderFactory.createTitledBorder(IntroduceParameterHandler.REFACTORING_NAME));
  myDelegateCb=new NonFocusableCheckBox(RefactoringBundle.message("delegation.panel.delegate.via.overloading.method"));
  final GridBagConstraints gc=new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,0),0,0);
  myWholePanel.add(myDelegateCb,gc);
  final JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  createLocalVariablePanel(gc,myWholePanel,settings);
  createRemoveParamsPanel(gc,myWholePanel);
  if (Util.anyFieldsWithGettersPresent(classMemberRefs)) {
    gc.gridy++;
    myWholePanel.add(createReplaceFieldsWithGettersPanel(),gc);
  }
}
