{
  final Ref<Boolean> result=new Ref<Boolean>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      myTypeSelectorManager.setAllOccurences(replaceAllOccurrences);
      final PsiType defaultType=myTypeSelectorManager.getTypeSelector().getSelectedType();
      final String propName=myLocalVar != null ? JavaCodeStyleManager.getInstance(myProject).variableNameToPropertyName(myLocalVar.getName(),VariableKind.LOCAL_VARIABLE) : null;
      final String[] names=IntroduceParameterHandler.createNameSuggestionGenerator(myExpr,propName,myProject).getSuggestedNameInfo(defaultType).names;
      final PsiParameter parameter=createParameterToStartTemplateOn(names,defaultType,hasFinalModifier);
      boolean started=false;
      if (parameter != null) {
        myParameterIndex=myMethod.getParameterList().getParameterIndex(parameter);
        myEditor.getCaretModel().moveToOffset(parameter.getTextOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        final LinkedHashSet<String> nameSuggestions=new LinkedHashSet<String>();
        nameSuggestions.add(parameter.getName());
        nameSuggestions.addAll(Arrays.asList(names));
        final VariableInplaceRenamer renamer=new ParameterInplaceIntroducer(parameter);
        LOG.assertTrue(parameter.isPhysical());
        started=renamer.performInplaceRename(false,nameSuggestions);
      }
      result.set(started);
      if (!started && parameter != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            parameter.delete();
          }
        }
);
      }
    }
  }
,IntroduceParameterHandler.REFACTORING_NAME,IntroduceParameterHandler.REFACTORING_NAME);
  return result.get();
}
