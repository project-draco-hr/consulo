{
  final PsiElement declarationScope=variable != null ? ((PsiParameter)variable).getDeclarationScope() : null;
  if (declarationScope instanceof PsiMethod) {
    final PsiMethod psiMethod=(PsiMethod)declarationScope;
    final StringBuilder buf=new StringBuilder();
    buf.append(psiMethod.getName()).append(" (");
    boolean frst=true;
    final List<TextRange> ranges2Remove=new ArrayList<TextRange>();
    TextRange addedRange=null;
    for (    PsiParameter parameter : psiMethod.getParameterList().getParameters()) {
      if (frst) {
        frst=false;
      }
 else {
        buf.append(", ");
      }
      int startOffset=buf.length();
      buf.append(parameter.getType().getPresentableText()).append(" ").append(variable == parameter ? value : parameter.getName());
      int endOffset=buf.length();
      if (variable == parameter) {
        addedRange=new TextRange(startOffset,endOffset);
      }
 else       if (myPanel.isParamToRemove(parameter)) {
        ranges2Remove.add(new TextRange(startOffset,endOffset));
      }
    }
    buf.append(")");
    setPreviewText(buf.toString());
    final MarkupModel markupModel=getPreviewEditor().getDocument().getMarkupModel(myProject);
    for (    TextRange textRange : ranges2Remove) {
      markupModel.addRangeHighlighter(textRange.getStartOffset(),textRange.getEndOffset(),0,getTestAttributesForRemoval(),HighlighterTargetArea.EXACT_RANGE);
    }
    markupModel.addRangeHighlighter(addedRange.getStartOffset(),addedRange.getEndOffset(),0,getTextAttributesForAdd(),HighlighterTargetArea.EXACT_RANGE);
    revalidate();
  }
}
