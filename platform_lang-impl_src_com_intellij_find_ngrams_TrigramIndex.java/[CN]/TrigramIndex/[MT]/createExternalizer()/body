{
  return new DataExternalizer<Collection<Integer>>(){
    @Override public void save(    @NotNull DataOutput out,    @NotNull Collection<Integer> value) throws IOException {
      final int numberOfValues=value.size();
      int[] buffer=spareBufferLocal.getBuffer(numberOfValues);
      int ptr=0;
      for (      Integer i : value) {
        buffer[ptr++]=i;
      }
      Arrays.sort(buffer,0,numberOfValues);
      DataInputOutputUtil.writeINT(out,numberOfValues);
      int prev=0;
      for (ptr=0; ptr < numberOfValues; ++ptr) {
        DataInputOutputUtil.writeLONG(out,(long)buffer[ptr] - prev);
        prev=buffer[ptr];
      }
    }
    @NotNull @Override public Collection<Integer> read(    @NotNull DataInput in) throws IOException {
      int size=DataInputOutputUtil.readINT(in);
      ArrayList<Integer> result=new ArrayList<Integer>(size);
      int prev=0;
      while (size-- > 0) {
        int l=(int)(DataInputOutputUtil.readLONG(in) + prev);
        result.add(l);
        prev=l;
      }
      return result;
    }
  }
;
}
