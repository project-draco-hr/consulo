{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"toArray".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType type=argument.getType();
  if (!(type instanceof PsiArrayType)) {
    return;
  }
  if (!ExpressionUtils.isZeroLengthArrayConstruction(argument)) {
    return;
  }
 else   if (argument instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;
    final PsiElement element=referenceExpression.resolve();
    if (!(element instanceof PsiField)) {
      return;
    }
    final PsiField field=(PsiField)element;
    if (!CollectionUtils.isConstantEmptyArray(field)) {
      return;
    }
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!ClassUtils.isSubclass(containingClass,"java.util.Collection")) {
    return;
  }
  registerMethodCallError(expression,argument);
}
