{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (qualifier == null) {
    return;
  }
  final String collectionText=qualifier.getText();
  final PsiType type=argument.getType();
  if (type == null) {
    return;
  }
  final PsiType componentType=type.getDeepComponentType();
  final String typeText=componentType.getCanonicalText();
  if (!(qualifier instanceof PsiMethodCallExpression)) {
    @NonNls final String replacementText="new " + typeText + '['+ collectionText+ ".size()]";
    final String newExpressionText=getElementText(methodCallExpression,argument,replacementText);
    if (newExpressionText == null) {
      return;
    }
    replaceExpression(methodCallExpression,newExpressionText);
    return;
  }
  PsiStatement statement=PsiTreeUtil.getParentOfType(methodCallExpression,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final PsiType qualifierType=qualifier.getType();
  if (qualifierType == null) {
    return;
  }
  PsiDeclarationStatement declarationStatement=factory.createVariableDeclarationStatement("var",qualifierType,qualifier);
  PsiElement statementParent=statement.getParent();
  while (statementParent instanceof PsiLoopStatement || statementParent instanceof PsiIfStatement) {
    statement=(PsiStatement)statementParent;
    statementParent=statement.getParent();
  }
  final String toArrayText="var.toArray(new " + typeText + "[var.size()])";
  PsiMethodCallExpression newMethodCallExpression=(PsiMethodCallExpression)factory.createExpressionFromText(toArrayText,methodCallExpression);
  declarationStatement=(PsiDeclarationStatement)statementParent.addBefore(declarationStatement,statement);
  newMethodCallExpression=(PsiMethodCallExpression)methodCallExpression.replace(newMethodCallExpression);
  showRenameTemplate(declarationStatement,newMethodCallExpression,statementParent);
}
