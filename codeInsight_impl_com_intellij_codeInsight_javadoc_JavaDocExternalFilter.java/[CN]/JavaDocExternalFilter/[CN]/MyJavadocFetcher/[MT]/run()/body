{
  try {
    if (surl == null) {
      return;
    }
    Reader stream=null;
    try {
      stream=getReaderByUrl(surl,new ProgressIndicatorBase());
    }
 catch (    ProcessCanceledException e) {
      return;
    }
catch (    IOException e) {
      myExceptions[0]=e;
    }
    if (stream == null) {
      return;
    }
    Matcher anchorMatcher=ourAnchorsuffix.matcher(surl);
    @NonNls String startSection="<!-- ======== START OF CLASS DATA ======== -->";
    @NonNls String endSection="SUMMARY ======== -->";
    boolean isClassDoc=true;
    if (anchorMatcher.find()) {
      isClassDoc=false;
      startSection="<A NAME=\"" + anchorMatcher.group(1).toUpperCase() + "\"";
      endSection="<A NAME=";
    }
    final BufferedReader buf=new BufferedReader(stream);
    data.append(HTML);
    try {
      String read;
      do {
        read=buf.readLine();
      }
 while (read != null && read.toUpperCase().indexOf(startSection) == -1);
      if (read == null) {
        data.delete(0,data.length());
        return;
      }
      appendLine(data,read);
      if (isClassDoc) {
        boolean skip=false;
        while (((read=buf.readLine()) != null) && !read.toUpperCase().equals(DL)) {
          if (read.toUpperCase().indexOf(H2) != -1) {
            data.append(H2);
            skip=true;
          }
 else           if (!skip) {
            appendLine(data,read);
          }
        }
        data.append(DL);
        StringBuffer classDetails=new StringBuffer();
        while (((read=buf.readLine()) != null) && !read.toUpperCase().equals(HR)) {
          appendLine(classDetails,read);
        }
        while (((read=buf.readLine()) != null) && !read.toUpperCase().equals(P)) {
          appendLine(data,read.replaceAll(DT,DT + BR));
        }
        data.append(classDetails);
        data.append(P);
      }
      while (((read=buf.readLine()) != null) && read.indexOf(endSection) == -1) {
        if (read.toUpperCase().indexOf(HR) == -1) {
          appendLine(data,read);
        }
      }
      data.append(HTML_CLOSE);
    }
 catch (    final IOException e) {
      myExceptions[0]=e;
    }
 finally {
      if (buf != null) {
        try {
          buf.close();
        }
 catch (        IOException e) {
          myExceptions[0]=e;
        }
      }
    }
  }
  finally {
    ourFree=true;
  }
}
