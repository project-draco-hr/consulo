{
  super.visitReferenceExpression(expression);
  final PsiReferenceParameterList parameterList=expression.getParameterList();
  if (parameterList == null) {
    return;
  }
  if (parameterList.getTypeArguments().length > 0) {
    return;
  }
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (!(qualifierExpression instanceof PsiThisExpression)) {
    return;
  }
  final PsiThisExpression thisExpression=(PsiThisExpression)qualifierExpression;
  final PsiJavaCodeReferenceElement qualifier=thisExpression.getQualifier();
  final String referenceName=expression.getReferenceName();
  if (referenceName == null) {
    return;
  }
  if (ignoreAssignments && PsiUtil.isAccessedForWriting(expression)) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (qualifier == null) {
    if (parent instanceof PsiCallExpression) {
      registerError(qualifierExpression,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
      return;
    }
    final PsiElement target=expression.resolve();
    if (!(target instanceof PsiVariable)) {
      return;
    }
    final PsiVariable variable=(PsiVariable)target;
    if (!VariableSearchUtils.variableNameResolvesToTarget(referenceName,variable,expression)) {
      return;
    }
    registerError(thisExpression,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
  }
 else {
    final String qualifierName=qualifier.getReferenceName();
    if (qualifierName == null) {
      return;
    }
    if (parent instanceof PsiCallExpression) {
      final PsiCallExpression callExpression=(PsiCallExpression)parent;
      final PsiMethod calledMethod=callExpression.resolveMethod();
      if (calledMethod == null) {
        return;
      }
      final String methodName=calledMethod.getName();
      PsiClass parentClass=ClassUtils.getContainingClass(expression);
      final Project project=expression.getProject();
      final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
      final PsiResolveHelper resolveHelper=psiFacade.getResolveHelper();
      while (parentClass != null) {
        if (qualifierName.equals(parentClass.getName())) {
          registerError(thisExpression,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
        }
        final PsiMethod[] methods=parentClass.findMethodsByName(methodName,true);
        for (        PsiMethod method : methods) {
          final PsiClass containingClass=method.getContainingClass();
          if (resolveHelper.isAccessible(method,expression,containingClass)) {
            if (method.hasModifierProperty(PsiModifier.PRIVATE) && !PsiTreeUtil.isAncestor(containingClass,expression,true)) {
              continue;
            }
            return;
          }
        }
        parentClass=ClassUtils.getContainingClass(parentClass);
      }
    }
 else {
      final PsiElement target=expression.resolve();
      if (!(target instanceof PsiVariable)) {
        return;
      }
      final PsiVariable variable=(PsiVariable)target;
      if (!VariableSearchUtils.variableNameResolvesToTarget(referenceName,variable,expression)) {
        return;
      }
      PsiClass parentClass=ClassUtils.getContainingClass(expression);
      while (parentClass != null) {
        if (qualifierName.equals(parentClass.getName())) {
          registerError(thisExpression,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
        }
        final PsiField field=parentClass.findFieldByName(referenceName,true);
        if (field != null) {
          return;
        }
        parentClass=ClassUtils.getContainingClass(parentClass);
      }
    }
  }
}
