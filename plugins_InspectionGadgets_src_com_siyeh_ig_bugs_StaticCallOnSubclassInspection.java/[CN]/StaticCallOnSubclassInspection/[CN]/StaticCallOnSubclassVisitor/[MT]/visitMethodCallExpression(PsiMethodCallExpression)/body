{
  super.visitMethodCallExpression(call);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  if (methodExpression == null) {
    return;
  }
  final PsiElement qualifier=methodExpression.getQualifier();
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  final PsiElement referent=((PsiReference)qualifier).resolve();
  if (!(referent instanceof PsiClass)) {
    return;
  }
  final PsiClass referencedClass=(PsiClass)referent;
  final PsiClass declaringClass=method.getContainingClass();
  if (declaringClass.equals(referencedClass)) {
    return;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(call);
  if (!ClassUtils.isClassVisibleFromClass(containingClass,declaringClass)) {
    return;
  }
  registerMethodCallError(call);
}
