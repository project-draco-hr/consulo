{
  return new JBIterable<T>(){
    @Override public Iterator<T> iterator(){
      Ref<T[]> ref=Ref.create();
      int count=flyweightStructure.getChildren(flyweightStructure.prepareForGetChildren(node),ref);
      if (count == 0)       return ContainerUtil.emptyIterator();
      T[] array=ref.get();
      LinkedList<T> list=ContainerUtil.newLinkedList();
      for (int i=0; i < count; i++) {
        T child=array[i];
        IElementType childType=typeOf(child);
        if (childType.getLanguage() == Language.ANY) {
          if (childType == TokenType.ERROR_ELEMENT) {
          }
          continue;
        }
        array[i]=null;
        list.addLast(child);
      }
      flyweightStructure.disposeChildren(array,count);
      return list.iterator();
    }
  }
;
}
