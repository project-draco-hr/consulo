{
  return new JBIterable<T>(){
    @Override public Iterator<T> iterator(){
      FlyweightCapableTreeStructure<T> structure=getStructure();
      Ref<T[]> ref=Ref.create();
      int count=structure.getChildren(structure.prepareForGetChildren(node),ref);
      if (count == 0)       return ContainerUtil.emptyIterator();
      T[] array=ref.get();
      LinkedList<T> list=ContainerUtil.newLinkedList();
      for (int i=0; i < count; i++) {
        T child=array[i];
        IElementType childType=typeOf(child);
        if (childType == TokenType.ERROR_ELEMENT) {
          continue;
        }
 else         if (childType == TokenType.WHITE_SPACE || childType == TokenType.BAD_CHARACTER) {
          continue;
        }
        array[i]=null;
        list.addLast(child);
      }
      structure.disposeChildren(array,count);
      return list.iterator();
    }
  }
;
}
