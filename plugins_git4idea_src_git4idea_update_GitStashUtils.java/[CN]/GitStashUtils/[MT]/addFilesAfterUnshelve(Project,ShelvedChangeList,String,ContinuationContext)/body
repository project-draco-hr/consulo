{
  Collection<FilePath> paths=new ArrayList<FilePath>();
  for (  ShelvedChange c : shelvedChangeList.getChanges()) {
    if (c.getBeforePath() == null || !c.getBeforePath().equals(c.getAfterPath()) || c.getFileStatus() == FileStatus.ADDED) {
      paths.add(VcsUtil.getFilePath(projectPath + c.getAfterPath()));
    }
  }
  for (  ShelvedBinaryFile f : shelvedChangeList.getBinaryFiles()) {
    if (f.BEFORE_PATH == null || !f.BEFORE_PATH.equals(f.AFTER_PATH) || f.getFileStatus() == FileStatus.ADDED) {
      paths.add(VcsUtil.getFilePath(projectPath + f.AFTER_PATH));
    }
  }
  final VcsDirtyScopeManager dsm=VcsDirtyScopeManager.getInstance(project);
  Map<VirtualFile,List<FilePath>> map=GitUtil.sortGitFilePathsByGitRoot(paths);
  for (  Map.Entry<VirtualFile,List<FilePath>> e : map.entrySet()) {
    try {
      GitFileUtils.addPaths(project,e.getKey(),e.getValue());
      dsm.filePathsDirty(e.getValue(),null);
    }
 catch (    VcsException e1) {
      if (!context.handleException(e1)) {
        AbstractVcsHelper.getInstance(project).showError(e1,"Can not add file to Git");
        LOG.error("Vcs Exception not handled");
      }
    }
  }
}
