{
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=argumentList.getExpressions();
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiElement element=methodExpression.resolve();
  if (!(element instanceof PsiMethod)) {
    return false;
  }
  final PsiMethod originalMethod=(PsiMethod)element;
  final String name=originalMethod.getName();
  final PsiClass containingClass=originalMethod.getContainingClass();
  final PsiType[] types=new PsiType[expressions.length];
  for (int i=0; i < expressions.length; i++) {
    final PsiExpression expression=expressions[i];
    final PsiType type=expression.getType();
    if (boxingExpression.equals(expression)) {
      final PsiPrimitiveType unboxedType=PsiPrimitiveType.getUnboxedType(type);
      if (unboxedType == null) {
        return false;
      }
      types[i]=unboxedType;
    }
 else {
      types[i]=type;
    }
  }
  final PsiMethod[] methods=containingClass.findMethodsByName(name,true);
  for (  PsiMethod method : methods) {
    if (!originalMethod.equals(method)) {
      if (MethodCallUtils.isApplicable(method,PsiSubstitutor.EMPTY,types)) {
        return false;
      }
    }
  }
  return true;
}
