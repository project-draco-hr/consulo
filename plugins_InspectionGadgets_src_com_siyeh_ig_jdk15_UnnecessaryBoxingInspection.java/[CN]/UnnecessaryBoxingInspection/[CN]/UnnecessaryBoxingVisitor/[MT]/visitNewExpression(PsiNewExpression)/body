{
  super.visitNewExpression(expression);
  final PsiManager manager=expression.getManager();
  final LanguageLevel languageLevel=manager.getEffectiveLanguageLevel();
  if (languageLevel.equals(LanguageLevel.JDK_1_3) || languageLevel.equals(LanguageLevel.JDK_1_4)) {
    return;
  }
  final PsiType constructorType=expression.getType();
  if (constructorType == null) {
    return;
  }
  final String constructorTypeText=constructorType.getCanonicalText();
  if (!s_boxingArgs.containsKey(constructorTypeText)) {
    return;
  }
  final PsiMethod constructor=expression.resolveConstructor();
  if (constructor == null) {
    return;
  }
  final PsiParameterList parameterList=constructor.getParameterList();
  final PsiParameter[] args=parameterList.getParameters();
  if (args == null) {
    return;
  }
  if (args.length != 1) {
    return;
  }
  final PsiParameter arg=args[0];
  final PsiType argumentType=arg.getType();
  final String argumentTypeText=argumentType.getCanonicalText();
  final String boxableConstructorType=s_boxingArgs.get(constructorTypeText);
  if (!boxableConstructorType.equals(argumentTypeText)) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiExpressionStatement || parent instanceof PsiReferenceExpression) {
    return;
  }
  final PsiMethodCallExpression containingMethodCallExpression=getParentMethodCallExpression(expression);
  if (containingMethodCallExpression != null && !isSameMethodCalledWithoutBoxing(containingMethodCallExpression,expression)) {
    return;
  }
  registerError(expression);
}
