{
  myIgnoredPatterns=ignoredPatterns;
  MessageBusConnection connect=ApplicationManager.getApplication().getMessageBus().connect();
  connect.subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener(){
    @Override public void before(    @NotNull List<? extends VFileEvent> events){
      myEnableCache=false;
      clearCacheForChangedFiles(events,true);
    }
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      clearCacheForChangedFiles(events,false);
      myEnableCache=true;
    }
    private void clearCacheForChangedFiles(    List<? extends VFileEvent> events,    boolean before){
      final IntArrayList ids=collectChangedIds(events,before);
synchronized (myCheckedIds) {
        for (        int i : ids.toArray()) {
          myCheckedIds.clear(i);
        }
      }
    }
    private IntArrayList collectChangedIds(    List<? extends VFileEvent> events,    boolean before){
      final IntArrayList ids=new IntArrayList();
      for (      VFileEvent event : events) {
        VirtualFile file=event.getFile();
        if (!(file instanceof NewVirtualFile)) {
          continue;
        }
        if (event instanceof VFilePropertyChangeEvent) {
          ids.add(((NewVirtualFile)file).getId());
        }
 else         if (event instanceof VFileDeleteEvent && before || event instanceof VFileCreateEvent && !before) {
          VfsUtilCore.visitChildrenRecursively(file,new VirtualFileVisitor(){
            @Override public boolean visitFile(            @NotNull VirtualFile file){
              ids.add(((NewVirtualFile)file).getId());
              return true;
            }
            @Override public Iterable<VirtualFile> getChildrenIterable(            @NotNull VirtualFile file){
              return file instanceof NewVirtualFile ? ((NewVirtualFile)file).iterInDbChildren() : null;
            }
          }
);
        }
      }
      return ids;
    }
  }
);
}
