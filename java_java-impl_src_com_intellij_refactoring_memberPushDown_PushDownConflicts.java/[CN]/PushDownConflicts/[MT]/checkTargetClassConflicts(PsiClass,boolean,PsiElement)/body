{
  if (targetClass != null) {
    for (    final PsiMember movedMember : myMovedMembers) {
      checkMemberPlacementInTargetClassConflict(targetClass,movedMember);
      movedMember.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitMethodCallExpression(        PsiMethodCallExpression expression){
          super.visitMethodCallExpression(expression);
          if (expression.getMethodExpression().getQualifierExpression() instanceof PsiSuperExpression) {
            final PsiMethod resolvedMethod=expression.resolveMethod();
            if (resolvedMethod != null) {
              final PsiClass resolvedClass=resolvedMethod.getContainingClass();
              if (resolvedClass != null) {
                if (myClass.isInheritor(resolvedClass,true)) {
                  final PsiMethod methodBySignature=myClass.findMethodBySignature(resolvedMethod,false);
                  if (methodBySignature != null && !myMovedMembers.contains(methodBySignature)) {
                    myConflicts.putValue(expression,"Super method call will resolve to another method");
                  }
                }
              }
            }
          }
        }
      }
);
    }
  }
  Members:   for (  PsiMember member : myMovedMembers) {
    for (    PsiReference ref : ReferencesSearch.search(member,member.getResolveScope(),false)) {
      final PsiElement element=ref.getElement();
      if (element instanceof PsiReferenceExpression) {
        final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)element;
        final PsiExpression qualifier=referenceExpression.getQualifierExpression();
        if (qualifier != null) {
          final PsiType qualifierType=qualifier.getType();
          PsiClass aClass=null;
          if (qualifierType instanceof PsiClassType) {
            aClass=((PsiClassType)qualifierType).resolve();
          }
 else {
            if (!checkStatic)             continue;
            if (qualifier instanceof PsiReferenceExpression) {
              final PsiElement resolved=((PsiReferenceExpression)qualifier).resolve();
              if (resolved instanceof PsiClass) {
                aClass=(PsiClass)resolved;
              }
            }
          }
          if (!InheritanceUtil.isInheritorOrSelf(aClass,targetClass,true)) {
            myConflicts.putValue(referenceExpression,RefactoringBundle.message("pushed.members.will.not.be.visible.from.certain.call.sites"));
            break Members;
          }
        }
      }
    }
  }
  RefactoringConflictsUtil.analyzeAccessibilityConflicts(myMovedMembers,targetClass,myConflicts,null,context,myAbstractMembers);
}
