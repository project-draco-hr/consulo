{
synchronized (TRACKERS_LOCK) {
    ApplicationManager.getApplication().assertIsDispatchThread();
    if (virtualFile == null)     return;
    if (myLineStatusTrackers.containsKey(document))     return;
    final FileStatus status=FileStatusManager.getInstance(myProject).getStatus(virtualFile);
    if (status == FileStatus.NOT_CHANGED || status == FileStatus.ADDED || status == FileStatus.UNKNOWN) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("installTracker() for file " + virtualFile.getPath() + " failed: status="+ status);
      }
      return;
    }
    AbstractVcs activeVcs=myVcsManager.getVcsFor(virtualFile);
    if (activeVcs == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("installTracker() for file " + virtualFile.getPath() + " failed: no active VCS");
      }
      return;
    }
    if (!virtualFile.isInLocalFileSystem())     return;
    if (System.getProperty(IGNORE_CHANGEMARKERS_KEY) != null)     return;
    final Alarm alarm;
    if (myLineStatusUpdateAlarms.containsKey(document)) {
      alarm=myLineStatusUpdateAlarms.get(document);
      alarm.cancelAllRequests();
    }
 else {
      alarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
      myLineStatusUpdateAlarms.put(document,alarm);
    }
    final LineStatusTracker tracker=createTrackerForDocument(document);
    alarm.addRequest(new Runnable(){
      public void run(){
        try {
          alarm.cancelAllRequests();
          if (!virtualFile.isValid()) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("installTracker() for file " + virtualFile.getPath() + " failed: virtual file not valid");
            }
            return;
          }
          final String lastUpToDateContent=myVcsManager.getBaseVersionContent(virtualFile);
          if (lastUpToDateContent == null) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("installTracker() for file " + virtualFile.getPath() + " failed: no up to date content");
            }
            return;
          }
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (!myProject.isDisposed()) {
synchronized (TRACKERS_LOCK) {
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    public void run(){
                      if (LOG.isDebugEnabled()) {
                        LOG.debug("initializing tracker for file " + virtualFile.getPath());
                      }
                      tracker.initialize(lastUpToDateContent);
                    }
                  }
);
                }
              }
            }
          }
);
        }
  finally {
          myLineStatusUpdateAlarms.remove(document);
        }
      }
    }
,10);
  }
}
