{
  if (type instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
    final PsiClass aClass=result.getElement();
    if (result.getElement() == null) {
      return null;
    }
    if (aClass instanceof PsiAnonymousClass) {
      return aClass.getSuperTypes()[0];
    }
    final PsiSubstitutor aSubst=result.getSubstitutor();
    PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
    for (Iterator<PsiTypeParameter> i=aSubst.getSubstitutionMap().keySet().iterator(); i.hasNext(); ) {
      final PsiTypeParameter p=i.next();
      PsiType t=aSubst.substitute(p);
      if (t != null) {
        t=avoidAnonymous(t);
      }
      theSubst=theSubst.put(p,t);
    }
    return aClass.getManager().getElementFactory().createType(aClass,theSubst);
  }
 else   if (type instanceof PsiArrayType) {
    PsiType avoided=avoidAnonymous(((PsiArrayType)type).getComponentType());
    return avoided == null ? null : avoided.createArrayType();
  }
  return type;
}
