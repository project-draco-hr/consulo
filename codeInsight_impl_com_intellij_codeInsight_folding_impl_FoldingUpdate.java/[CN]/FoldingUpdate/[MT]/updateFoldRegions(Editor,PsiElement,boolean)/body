{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Project project=file.getProject();
  Document document=editor.getDocument();
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).isUncommited(document));
  final long timeStamp=document.getModificationStamp();
  Object lastTimeStamp=editor.getUserData(LAST_UPDATE_STAMP_KEY);
  if (lastTimeStamp instanceof Long && ((Long)lastTimeStamp).longValue() == timeStamp)   return null;
  if (file instanceof PsiCompiledElement) {
    file=((PsiCompiledElement)file).getMirror();
  }
  TreeMap<PsiElement,TextRange> elementsToFoldMap=null;
  final PsiElement[] psiRoots=((PsiFile)file).getPsiRoots();
  for (  PsiElement psiRoot : psiRoots) {
    TreeMap<PsiElement,TextRange> fileElementsToFoldMap=FoldingPolicy.getElementsToFold(psiRoot,document);
    if (elementsToFoldMap == null) {
      elementsToFoldMap=fileElementsToFoldMap;
    }
 else {
      elementsToFoldMap.putAll(fileElementsToFoldMap);
    }
  }
  final Runnable operation=new UpdateFoldRegionsOperation(editor,elementsToFoldMap,applyDefaultState);
  return new Runnable(){
    public void run(){
      editor.getFoldingModel().runBatchFoldingOperation(operation);
      editor.putUserData(LAST_UPDATE_STAMP_KEY,timeStamp);
    }
  }
;
}
