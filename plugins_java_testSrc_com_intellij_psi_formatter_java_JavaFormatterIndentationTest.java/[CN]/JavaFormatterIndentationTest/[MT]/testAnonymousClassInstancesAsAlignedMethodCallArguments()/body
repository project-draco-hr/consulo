{
  getSettings().ALIGN_MULTILINE_PARAMETERS_IN_CALLS=true;
  doMethodTest("foo(new Runnable() {\n" + "@Override\n" + "public void run() {\n"+ "}\n"+ "},\n"+ "new Runnable() {\n"+ "@Override\n"+ "public void run() {\n"+ "}\n"+ "});","foo(new Runnable() {\n" + "        @Override\n" + "        public void run() {\n"+ "        }\n"+ "    },\n"+ "    new Runnable() {\n"+ "        @Override\n"+ "        public void run() {\n"+ "        }\n"+ "    }\n"+ ");");
  doMethodTest("foo(123456789, new Runnable() {\n" + "@Override\n" + "public void run() {\n"+ "}\n"+ "},\n"+ "new Runnable() {\n"+ "@Override\n"+ "public void run() {\n"+ "}\n"+ "});","foo(123456789, new Runnable() {\n" + "        @Override\n" + "        public void run() {\n"+ "        }\n"+ "    },\n"+ "    new Runnable() {\n"+ "        @Override\n"+ "        public void run() {\n"+ "        }\n"+ "    }\n"+ ");");
  doMethodTest("foo(new Runnable() {\n" + "@Override\n" + "public void run() {\n"+ "}"+ "}, 1, 2);","foo(new Runnable() {\n" + "    @Override\n" + "    public void run() {\n"+ "    }\n"+ "}, 1, 2);");
}
