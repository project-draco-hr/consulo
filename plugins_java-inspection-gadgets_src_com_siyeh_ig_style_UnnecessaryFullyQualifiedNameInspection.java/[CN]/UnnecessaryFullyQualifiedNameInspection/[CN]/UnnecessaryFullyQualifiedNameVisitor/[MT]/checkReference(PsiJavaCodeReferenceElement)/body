{
  final PsiElement qualifier=reference.getQualifier();
  if (!(qualifier instanceof PsiJavaCodeReferenceElement)) {
    return;
  }
  final PsiElement parent=reference.getParent();
  if (parent instanceof PsiMethodCallExpression || parent instanceof PsiAssignmentExpression || parent instanceof PsiVariable) {
    return;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(reference,PsiImportStatementBase.class,PsiPackageStatement.class,JavaCodeFragment.class);
  if (element != null) {
    return;
  }
  if (m_ignoreJavadoc) {
    final PsiElement containingComment=PsiTreeUtil.getParentOfType(reference,PsiDocComment.class);
    if (containingComment != null) {
      return;
    }
  }
  final PsiFile containingFile=reference.getContainingFile();
  if (!(containingFile instanceof PsiJavaFile)) {
    return;
  }
  final PsiElement target=reference.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiJavaCodeReferenceElement qualifierReference=(PsiJavaCodeReferenceElement)qualifier;
  final PsiElement qualifierTarget=qualifierReference.resolve();
  if (!(qualifierTarget instanceof PsiJavaPackage)) {
    return;
  }
  final List<PsiJavaCodeReferenceElement> references=new ArrayList(2);
  references.add(reference);
  final CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(reference.getProject());
  if (styleSettings.INSERT_INNER_CLASS_IMPORTS) {
    collectInnerClassNames(reference,references);
  }
  Collections.reverse(references);
  for (int i=0, size=references.size(); i < size; i++) {
    final PsiJavaCodeReferenceElement aReference=references.get(i);
    final PsiElement referenceTarget=aReference.resolve();
    if (!(referenceTarget instanceof PsiClass)) {
      continue;
    }
    final PsiClass aClass=(PsiClass)referenceTarget;
    final String qualifiedName=aClass.getQualifiedName();
    if (qualifiedName == null) {
      continue;
    }
    if (!ImportUtils.nameCanBeImported(qualifiedName,reference)) {
      continue;
    }
    final boolean inSameFile=aClass.getContainingFile() == containingFile;
    registerError(aReference,Boolean.valueOf(inSameFile));
    break;
  }
}
