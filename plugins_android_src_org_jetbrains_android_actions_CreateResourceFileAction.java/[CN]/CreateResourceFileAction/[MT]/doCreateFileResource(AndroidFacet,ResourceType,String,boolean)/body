{
  final CreateResourceFileAction action=getInstance();
  final String subdirName;
  final Module selectedModule;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    subdirName=resType.getName();
    selectedModule=facet.getModule();
  }
 else {
    final MyDialog dialog=new MyDialog(facet,action.mySubactions.values(),resType,resName,chooseResName,action,facet.getModule(),true);
    dialog.show();
    if (!dialog.isOK()) {
      return PsiElement.EMPTY_ARRAY;
    }
    if (chooseResName) {
      resName=dialog.getFileName();
    }
    subdirName=dialog.getSubdirName();
    selectedModule=dialog.getSelectedModule();
  }
  final AndroidFacet selectedFacet=AndroidFacet.getInstance(selectedModule);
  LOG.assertTrue(selectedFacet != null);
  final VirtualFile resourceDir=selectedFacet.getLocalResourceManager().getResourceDir();
  final Project project=facet.getModule().getProject();
  final PsiDirectory psiResDir=resourceDir != null ? PsiManager.getInstance(project).findDirectory(resourceDir) : null;
  if (psiResDir == null) {
    Messages.showErrorDialog(project,"Cannot find resource directory for module " + selectedFacet.getModule().getName(),CommonBundle.getErrorTitle());
    return PsiElement.EMPTY_ARRAY;
  }
  final String finalResName=resName;
  final PsiElement[] elements=ApplicationManager.getApplication().runWriteAction(new Computable<PsiElement[]>(){
    @Nullable @Override public PsiElement[] compute(){
      MyInputValidator validator=action.createValidator(project,psiResDir,subdirName);
      return validator.checkInput(finalResName) && validator.canClose(finalResName) ? validator.getCreatedElements() : null;
    }
  }
);
  return elements != null ? elements : PsiElement.EMPTY_ARRAY;
}
