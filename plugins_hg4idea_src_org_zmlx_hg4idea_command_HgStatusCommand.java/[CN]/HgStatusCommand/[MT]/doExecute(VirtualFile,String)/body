{
  if (repo == null) {
    return Collections.emptySet();
  }
  HgCommandService service=HgCommandService.getInstance(project);
  List<String> arguments=new LinkedList<String>();
  if (includeAdded) {
    arguments.add("--added");
  }
  if (includeModified) {
    arguments.add("--modified");
  }
  if (includeRemoved) {
    arguments.add("--removed");
  }
  if (includeDeleted) {
    arguments.add("--deleted");
  }
  if (includeUnknown) {
    arguments.add("--unknown");
  }
  if (includeIgnored) {
    arguments.add("--ignored");
  }
  if (includeCopySource) {
    arguments.add("--copies");
  }
  if (baseRevision != null) {
    arguments.add("--rev");
    arguments.add(baseRevision.getChangeset());
    if (targetRevision != null) {
      arguments.add("--rev");
      arguments.add(targetRevision.getChangeset());
    }
  }
  if (file != null) {
    arguments.add(file);
  }
  HgCommandResult result=service.execute(repo,HgCommandService.DEFAULT_OPTIONS,"status",arguments,Charset.defaultCharset(),true);
  Set<HgChange> changes=new HashSet<HgChange>();
  HgChange previous=null;
  if (result == null) {
    return changes;
  }
  for (  String line : result.getOutputLines()) {
    if (StringUtils.isBlank(line) || line.length() < ITEM_COUNT) {
      LOG.warn("Unexpected line in status '" + line + '\'');
      continue;
    }
    HgFileStatusEnum status=HgFileStatusEnum.valueOf(line.charAt(STATUS_INDEX));
    File ioFile=new File(repo.getPath(),line.substring(2));
    if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) {
      previous.setStatus(HgFileStatusEnum.COPY);
      previous.setBeforeFile(new HgFile(repo,ioFile));
      previous=null;
    }
 else {
      previous=new HgChange(new HgFile(repo,ioFile),status);
      changes.add(previous);
    }
  }
  return changes;
}
