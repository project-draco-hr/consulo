{
  PsiModifierList list=method.getModifierList();
  final PsiAnnotation overrideAnnotation=list.findAnnotation("java.lang.Override");
  if (overrideAnnotation == null) {
    return null;
  }
  try {
    MethodSignatureBackedByPsiMethod superMethod=SuperMethodsSearch.search(method,null,true,false).findFirst();
    if (superMethod == null) {
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,overrideAnnotation,JavaErrorMessages.message("method.does.not.override.super"));
      PullAsAbstractUpFix.registerQuickFix(highlightInfo,method);
      return highlightInfo;
    }
    LanguageLevel languageLevel=PsiUtil.getLanguageLevel(method);
    PsiClass superClass=superMethod.getMethod().getContainingClass();
    if (languageLevel.equals(LanguageLevel.JDK_1_5) && superClass != null && superClass.isInterface()) {
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,overrideAnnotation,JavaErrorMessages.message("override.not.allowed.in.interfaces"));
      QuickFixAction.registerQuickFixAction(info,new IncreaseLanguageLevelFix(LanguageLevel.JDK_1_6));
      return info;
    }
    return null;
  }
 catch (  IndexNotReadyException e) {
    return null;
  }
}
