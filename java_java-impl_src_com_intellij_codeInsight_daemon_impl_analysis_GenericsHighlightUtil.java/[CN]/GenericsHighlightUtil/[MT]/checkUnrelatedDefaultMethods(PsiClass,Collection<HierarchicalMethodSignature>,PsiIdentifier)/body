{
  for (  HierarchicalMethodSignature methodSignature : signaturesWithSupers) {
    final PsiMethod method=methodSignature.getMethod();
    if (method.hasModifierProperty(PsiModifier.DEFAULT)) {
      final PsiClass containingClass=method.getContainingClass();
      List<HierarchicalMethodSignature> superSignatures=methodSignature.getSuperSignatures();
      if (!superSignatures.isEmpty()) {
        for (        HierarchicalMethodSignature signature : superSignatures) {
          final PsiMethod superMethod=signature.getMethod();
          final PsiClass superContainingClass=superMethod.getContainingClass();
          if (containingClass != null && superContainingClass != null && !InheritanceUtil.isInheritorOrSelf(containingClass,superContainingClass,true)) {
            if (superMethod.hasModifierProperty(PsiModifier.DEFAULT)) {
              final String inheritUnrelatedDefaultsMessage=HighlightUtil.formatClass(aClass) + " inherits unrelated defaults for " + HighlightUtil.formatMethod(method)+ " from types "+ HighlightUtil.formatClass(containingClass)+ " and "+ HighlightUtil.formatClass(superContainingClass);
              return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,classIdentifier,inheritUnrelatedDefaultsMessage);
            }
            if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
              final String message=JavaErrorMessages.message(aClass instanceof PsiEnumConstantInitializer ? "enum.constant.should.implement.method" : "class.must.be.abstract",HighlightUtil.formatClass(superContainingClass),HighlightUtil.formatMethod(superMethod),HighlightUtil.formatClass(superContainingClass,false));
              return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,classIdentifier,message);
            }
          }
        }
      }
    }
  }
  return null;
}
