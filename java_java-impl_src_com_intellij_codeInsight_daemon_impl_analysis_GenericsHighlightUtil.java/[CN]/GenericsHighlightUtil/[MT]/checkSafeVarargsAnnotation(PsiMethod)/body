{
  PsiModifierList list=method.getModifierList();
  final PsiAnnotation safeVarargsAnnotation=list.findAnnotation("java.lang.SafeVarargs");
  if (safeVarargsAnnotation == null) {
    return null;
  }
  try {
    if (!method.isVarArgs()) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,safeVarargsAnnotation,"@SafeVarargs is not allowed on methods with fixed arity");
    }
    if (!method.hasModifierProperty(PsiModifier.STATIC) && !method.hasModifierProperty(PsiModifier.FINAL)) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,safeVarargsAnnotation,"@SafeVarargs is not allowed on non-final instance methods");
    }
    final PsiParameter varParameter=method.getParameterList().getParameters()[method.getParameterList().getParametersCount() - 1];
    for (    PsiReference reference : ReferencesSearch.search(varParameter)) {
      final PsiElement element=reference.getElement();
      if (element instanceof PsiExpression && !PsiUtil.isAccessedForReading((PsiExpression)element)) {
        return HighlightInfo.createHighlightInfo(HighlightInfoType.WARNING,element,"@SafeVarargs do not suppress potentially unsafe operations");
      }
    }
    LOG.assertTrue(varParameter.isVarArgs());
    final PsiEllipsisType ellipsisType=(PsiEllipsisType)varParameter.getType();
    final PsiType componentType=ellipsisType.getComponentType();
    if (isReifiableType(componentType)) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.WARNING,varParameter.getTypeElement(),"@SafeVarargs is not applicable for reifiable types");
    }
    return null;
  }
 catch (  IndexNotReadyException e) {
    return null;
  }
}
