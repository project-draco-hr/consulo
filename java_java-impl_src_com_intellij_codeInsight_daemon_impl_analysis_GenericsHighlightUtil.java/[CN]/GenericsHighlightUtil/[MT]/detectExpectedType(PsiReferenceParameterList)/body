{
  final PsiNewExpression newExpression=PsiTreeUtil.getParentOfType(referenceParameterList,PsiNewExpression.class);
  LOG.assertTrue(newExpression != null);
  final PsiElement parent=newExpression.getParent();
  PsiType expectedType=null;
  if (parent instanceof PsiVariable && newExpression.equals(((PsiVariable)parent).getInitializer())) {
    expectedType=((PsiVariable)parent).getType();
  }
 else   if (parent instanceof PsiAssignmentExpression && newExpression.equals(((PsiAssignmentExpression)parent).getRExpression())) {
    expectedType=((PsiAssignmentExpression)parent).getLExpression().getType();
  }
 else   if (parent instanceof PsiReturnStatement) {
    PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    if (method != null) {
      expectedType=method.getReturnType();
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiElement pParent=parent.getParent();
    if (pParent instanceof PsiCallExpression && parent.equals(((PsiCallExpression)pParent).getArgumentList())) {
      final PsiMethod method=((PsiCallExpression)pParent).resolveMethod();
      if (method != null) {
        final PsiExpression[] expressions=((PsiCallExpression)pParent).getArgumentList().getExpressions();
        final int idx=ArrayUtil.find(expressions,newExpression);
        if (idx > -1) {
          final PsiParameterList parameterList=method.getParameterList();
          if (idx < parameterList.getParametersCount()) {
            expectedType=parameterList.getParameters()[idx].getType();
          }
        }
      }
    }
  }
  return expectedType;
}
