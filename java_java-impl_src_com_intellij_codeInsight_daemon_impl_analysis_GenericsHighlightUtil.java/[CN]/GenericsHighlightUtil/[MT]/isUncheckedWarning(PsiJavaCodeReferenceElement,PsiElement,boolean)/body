{
  if (resolve instanceof PsiMethod) {
    final PsiMethod psiMethod=(PsiMethod)resolve;
    final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(expression);
    if (!ignoreSuppressed) {
      if (SuppressManager.getInstance().isSuppressedFor(expression,"unchecked"))       return false;
    }
    if (psiMethod.isVarArgs()) {
      if (!languageLevel.isAtLeast(LanguageLevel.JDK_1_7) || !AnnotationUtil.isAnnotated(psiMethod,"java.lang.SafeVarargs",false)) {
        final int parametersCount=psiMethod.getParameterList().getParametersCount();
        final PsiParameter varargParameter=psiMethod.getParameterList().getParameters()[parametersCount - 1];
        final PsiType componentType=((PsiEllipsisType)varargParameter.getType()).getComponentType();
        if (!isReifiableType(componentType)) {
          final PsiElement parent=expression.getParent();
          if (parent instanceof PsiCall) {
            final PsiExpressionList argumentList=((PsiCall)parent).getArgumentList();
            if (argumentList != null) {
              final PsiExpression[] args=argumentList.getExpressions();
              if (args.length == parametersCount) {
                final PsiExpression lastArg=args[args.length - 1];
                if (lastArg instanceof PsiReferenceExpression) {
                  final PsiElement lastArgsResolve=((PsiReferenceExpression)lastArg).resolve();
                  if (lastArgsResolve instanceof PsiParameter) {
                    if (((PsiParameter)lastArgsResolve).getType() instanceof PsiArrayType) {
                      return false;
                    }
                  }
                }
 else                 if (lastArg instanceof PsiMethodCallExpression) {
                  if (lastArg.getType() instanceof PsiArrayType) {
                    return false;
                  }
                }
              }
              for (int i=parametersCount - 1; i < args.length; i++) {
                if (!isReifiableType(args[i].getType())) {
                  return true;
                }
              }
              return args.length < parametersCount;
            }
          }
        }
      }
    }
  }
  return false;
}
