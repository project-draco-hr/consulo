{
  final PsiClassType[] superTypes=aClass.getSuperTypes();
  for (  PsiClassType superType : superTypes) {
    final PsiClassType.ClassResolveResult result=superType.resolveGenerics();
    final PsiClass superClass=result.getElement();
    if (superClass == null || visited.contains(superClass))     continue;
    PsiSubstitutor superTypeSubstitutor=result.getSubstitutor();
    superTypeSubstitutor=MethodSignatureUtil.combineSubstitutors(superTypeSubstitutor,derivedSubstitutor);
    final PsiSubstitutor inheritedSubstitutor=inheritedClasses.get(superClass);
    if (inheritedSubstitutor != null) {
      final PsiTypeParameter[] typeParameters=superClass.getTypeParameters();
      for (      PsiTypeParameter typeParameter : typeParameters) {
        PsiType type1=inheritedSubstitutor.substitute(typeParameter);
        PsiType type2=superTypeSubstitutor.substitute(typeParameter);
        if (!Comparing.equal(type1,type2)) {
          String description=JavaErrorMessages.message("generics.cannot.be.inherited.with.different.type.arguments",HighlightUtil.formatClass(superClass),HighlightUtil.formatType(type1),HighlightUtil.formatType(type2));
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(description).create();
        }
      }
    }
    inheritedClasses.put(superClass,superTypeSubstitutor);
    visited.add(superClass);
    final HighlightInfo highlightInfo=checkInterfaceMultipleInheritance(superClass,superTypeSubstitutor,inheritedClasses,visited,textRange);
    visited.remove(superClass);
    if (highlightInfo != null)     return highlightInfo;
  }
  return null;
}
