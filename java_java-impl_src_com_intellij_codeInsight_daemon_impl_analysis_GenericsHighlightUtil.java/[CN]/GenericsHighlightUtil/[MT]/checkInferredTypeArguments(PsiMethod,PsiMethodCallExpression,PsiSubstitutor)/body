{
  PsiTypeParameter[] typeParameters=genericMethod.getTypeParameters();
  for (  PsiTypeParameter typeParameter : typeParameters) {
    PsiType substituted=substitutor.substitute(typeParameter);
    if (substituted == null)     return null;
    substituted=PsiUtil.captureToplevelWildcards(substituted,call);
    PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
    for (    PsiClassType type : extendsTypes) {
      PsiType extendsType=substitutor.substitute(type);
      if (substituted instanceof PsiWildcardType) {
        if (!((PsiWildcardType)substituted).isExtends()) {
          continue;
        }
        final PsiType extendsBound=((PsiWildcardType)substituted).getExtendsBound();
        if (TypeConversionUtil.erasure(extendsType).equals(TypeConversionUtil.erasure(extendsBound))) {
          if (extendsBound instanceof PsiClassType) {
            PsiType[] parameters=((PsiClassType)extendsBound).getParameters();
            if (parameters.length == 1) {
              PsiType argType=parameters[0];
              if (argType instanceof PsiCapturedWildcardType) {
                argType=((PsiCapturedWildcardType)argType).getWildcard();
              }
              if (argType instanceof PsiWildcardType && !((PsiWildcardType)argType).isBounded())               continue;
            }
          }
        }
      }
      if (!TypeConversionUtil.isAssignable(extendsType,substituted,false)) {
        PsiClass boundClass=extendsType instanceof PsiClassType ? ((PsiClassType)extendsType).resolve() : null;
        @NonNls String messageKey=boundClass == null || typeParameter.isInterface() == boundClass.isInterface() ? "generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend" : "generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement";
        String description=JavaErrorMessages.message(messageKey,HighlightUtil.formatClass(typeParameter),HighlightUtil.formatType(extendsType),HighlightUtil.formatType(substituted));
        return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(call).descriptionAndTooltip(description).create();
      }
    }
  }
  return null;
}
