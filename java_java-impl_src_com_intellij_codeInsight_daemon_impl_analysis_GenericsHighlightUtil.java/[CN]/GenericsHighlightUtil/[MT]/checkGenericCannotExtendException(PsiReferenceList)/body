{
  PsiElement parent=list.getParent();
  if (!(parent instanceof PsiClass))   return null;
  PsiClass aClass=(PsiClass)parent;
  if (!aClass.hasTypeParameters() || aClass.getExtendsList() != list)   return null;
  PsiJavaCodeReferenceElement[] referenceElements=list.getReferenceElements();
  PsiClass throwableClass=null;
  for (  PsiJavaCodeReferenceElement referenceElement : referenceElements) {
    PsiElement resolved=referenceElement.resolve();
    if (!(resolved instanceof PsiClass))     continue;
    if (throwableClass == null) {
      throwableClass=JavaPsiFacade.getInstance(aClass.getProject()).findClass("java.lang.Throwable",aClass.getResolveScope());
    }
    if (InheritanceUtil.isInheritorOrSelf((PsiClass)resolved,throwableClass,true)) {
      String message=JavaErrorMessages.message("generic.extend.exception");
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceElement,message);
      PsiClassType classType=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory().createType((PsiClass)resolved);
      QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createExtendsListFix(aClass,classType,false));
      return highlightInfo;
    }
  }
  return null;
}
