{
  final PsiMethod checkMethod=signatureToCheck.getMethod();
  if (superMethod.equals(checkMethod))   return null;
  PsiClass checkContainingClass=checkMethod.getContainingClass();
  LOG.assertTrue(checkContainingClass != null);
  PsiClass superContainingClass=superMethod.getContainingClass();
  boolean checkEqualsSuper=checkContainingClass.equals(superContainingClass);
  if (checkMethod.isConstructor()) {
    if (!superMethod.isConstructor() || !checkEqualsSuper)     return null;
  }
 else   if (superMethod.isConstructor())   return null;
  if (checkMethod.hasModifierProperty(PsiModifier.STATIC) && !checkEqualsSuper) {
    return null;
  }
  final PsiType retErasure1=TypeConversionUtil.erasure(checkMethod.getReturnType());
  final PsiType retErasure2=TypeConversionUtil.erasure(superMethod.getReturnType());
  if (!Comparing.equal(retErasure1,retErasure2) && !TypeConversionUtil.isVoidType(retErasure1) && !TypeConversionUtil.isVoidType(retErasure2)&& !(checkEqualsSuper && Arrays.equals(superSignature.getParameterTypes(),signatureToCheck.getParameterTypes()))) {
    return null;
  }
  if (!checkEqualsSuper && MethodSignatureUtil.isSubsignature(superSignature,signatureToCheck)) {
    return null;
  }
  if (aClass.equals(checkContainingClass)) {
    boolean sameClass=aClass.equals(superContainingClass);
    return getSameErasureMessage(sameClass,checkMethod,superMethod,HighlightNamesUtil.getMethodDeclarationTextRange(checkMethod));
  }
 else {
    return getSameErasureMessage(false,checkMethod,superMethod,HighlightNamesUtil.getClassDeclarationTextRange(aClass));
  }
}
