{
  if (referenceParameterList != null && !PsiUtil.isLanguageLevel5OrHigher(referenceParameterList)) {
    if (referenceParameterList.getTypeParameterElements().length > 0) {
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceParameterList,GENERICS_ARE_NOT_SUPPORTED);
      QuickFixAction.registerQuickFixAction(info,new ShowModulePropertiesFix(referenceParameterList));
      QuickFixAction.registerQuickFixAction(info,new IncreaseLanguageLevelFix(LanguageLevel.JDK_1_5));
      return info;
    }
  }
  PsiDiamondType.DiamondInferenceResult inferenceResult=null;
  PsiTypeElement[] referenceElements=null;
  if (referenceParameterList != null) {
    referenceElements=referenceParameterList.getTypeParameterElements();
    if (referenceElements.length == 1 && referenceElements[0].getType() instanceof PsiDiamondType) {
      if (!typeParameterListOwner.hasTypeParameters()) {
        return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceElements[0],"Diamond operator is not applicable for non-parameterized types");
      }
      inferenceResult=((PsiDiamondType)referenceElements[0].getType()).resolveInferredTypes();
      final PsiType expectedType=detectExpectedType(referenceParameterList);
      if (!(expectedType instanceof PsiClassType && ((PsiClassType)expectedType).isRaw())) {
        final String errorMessage=inferenceResult.getErrorMessage();
        if (errorMessage != null) {
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceElements[0],errorMessage);
        }
      }
    }
  }
  final PsiTypeParameter[] typeParameters=typeParameterListOwner.getTypeParameters();
  final int targetParametersNum=typeParameters.length;
  final int refParametersNum=referenceParameterList == null ? 0 : referenceParameterList.getTypeArguments().length;
  if (targetParametersNum != refParametersNum && refParametersNum != 0) {
    final String description;
    if (targetParametersNum == 0) {
      if (PsiTreeUtil.getParentOfType(referenceParameterList,PsiCall.class) != null && PsiUtil.isLanguageLevel7OrHigher(referenceParameterList)) {
        description=null;
      }
 else {
        description=JavaErrorMessages.message("generics.type.or.method.does.not.have.type.parameters",typeParameterListOwnerCategoryDescription(typeParameterListOwner),typeParameterListOwnerDescription(typeParameterListOwner));
      }
    }
 else {
      description=JavaErrorMessages.message("generics.wrong.number.of.type.arguments",refParametersNum,targetParametersNum);
    }
    if (description != null) {
      final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceParameterList,description);
      if (registerIntentions) {
        PsiElement pparent=referenceParameterList.getParent().getParent();
        if (pparent instanceof PsiTypeElement) {
          PsiElement variable=pparent.getParent();
          if (variable instanceof PsiVariable) {
            VariableParameterizedTypeFix.registerIntentions(highlightInfo,(PsiVariable)variable,referenceParameterList);
          }
        }
      }
      return highlightInfo;
    }
  }
  if (targetParametersNum > 0 && refParametersNum != 0) {
    if (inferenceResult != null) {
      final PsiType[] types=inferenceResult.getTypes();
      for (int i=0; i < typeParameters.length; i++) {
        final PsiType type=types[i];
        final HighlightInfo highlightInfo=checkTypeParameterWithinItsBound(typeParameters[i],substitutor,type,referenceElements[0]);
        if (highlightInfo != null)         return highlightInfo;
      }
    }
 else {
      for (int i=0; i < typeParameters.length; i++) {
        final PsiTypeElement typeElement=referenceElements[i];
        final HighlightInfo highlightInfo=checkTypeParameterWithinItsBound(typeParameters[i],substitutor,typeElement.getType(),typeElement);
        if (highlightInfo != null)         return highlightInfo;
      }
    }
  }
  return null;
}
