{
  myDocument=(DocumentImpl)editor.getDocument();
  myStartOffset=start;
  myEnd=editor.getDocument().getTextLength();
  myEditor=editor;
  LOG.assertTrue(myStartOffset <= myEnd);
  myHighlighterIterator=editor.getHighlighter().createIterator(start);
  HighlighterList editorList=((MarkupModelEx)editor.getMarkupModel()).getHighlighterList();
  int longestViewHighlighterLength=editorList == null ? 0 : editorList.getLongestHighlighterLength();
  myViewHighlighters=editorList == null ? null : editorList.getSortedHighlighters();
  final MarkupModelEx docMarkup=(MarkupModelEx)editor.getDocument().getMarkupModel(editor.getProject());
  final HighlighterList docList=docMarkup.getHighlighterList();
  myDocumentHighlighters=docList != null ? docList.getSortedHighlighters() : new ArrayList<RangeHighlighterImpl>();
  int longestDocHighlighterLength=docList != null ? docList.getLongestHighlighterLength() : 0;
  hasSelection=useCaretAndSelection && editor.getSelectionModel().hasSelection();
  mySelectionStart=hasSelection ? editor.getSelectionModel().getSelectionStart() : -1;
  mySelectionEnd=hasSelection ? editor.getSelectionModel().getSelectionEnd() : -1;
  myFoldingModel=(FoldingModelImpl)editor.getFoldingModel();
  myFoldTextAttributes=myFoldingModel.getPlaceholderAttributes();
  mySelectionAttributes=((SelectionModelImpl)editor.getSelectionModel()).getTextAttributes();
  myReadOnlyColor=myEditor.getColorsScheme().getColor(EditorColors.READONLY_FRAGMENT_BACKGROUND_COLOR);
  CaretModelImpl caretModel=(CaretModelImpl)editor.getCaretModel();
  myCaretRowAttributes=editor.isRendererMode() ? null : caretModel.getTextAttributes();
  myDefaultBackground=editor.getColorsScheme().getDefaultBackground();
  myDefaultForeground=editor.getColorsScheme().getDefaultForeground();
  myCurrentHighlighters=new ArrayList<RangeHighlighterImpl>();
  myCurrentViewHighlighterIdx=initHighlighterIterator(start,myViewHighlighters,longestViewHighlighterLength);
  while (myCurrentViewHighlighterIdx < myViewHighlighters.size()) {
    myNextViewHighlighter=myViewHighlighters.get(myCurrentViewHighlighterIdx++);
    if (!skipHighlighter(myNextViewHighlighter))     break;
  }
  if (myCurrentViewHighlighterIdx == myViewHighlighters.size())   myNextViewHighlighter=null;
  myCurrentDocHighlighterIdx=initHighlighterIterator(start,myDocumentHighlighters,longestDocHighlighterLength);
  myNextDocumentHighlighter=null;
  while (myCurrentDocHighlighterIdx < myDocumentHighlighters.size()) {
    myNextDocumentHighlighter=myDocumentHighlighters.get(myCurrentDocHighlighterIdx++);
    if (!skipHighlighter(myNextDocumentHighlighter))     break;
  }
  if (myCurrentDocHighlighterIdx == myDocumentHighlighters.size())   myNextDocumentHighlighter=null;
  advanceSegmentHighlighters();
  myCaretRowStart=caretModel.getVisualLineStart();
  myCaretRowEnd=caretModel.getVisualLineEnd();
  myEndOffset=Math.min(getHighlighterEnd(myStartOffset),getSelectionEnd(myStartOffset));
  myEndOffset=Math.min(myEndOffset,getSegmentHighlightersEnd());
  myEndOffset=Math.min(myEndOffset,getFoldRangesEnd(myStartOffset));
  myEndOffset=Math.min(myEndOffset,getCaretEnd(myStartOffset));
  myEndOffset=Math.min(myEndOffset,getGuardedBlockEnd(myStartOffset));
  myCurrentFold=myFoldingModel.getCollapsedRegionAtOffset(myStartOffset);
  if (myCurrentFold != null) {
    myEndOffset=myCurrentFold.getEndOffset();
  }
  myCachedAttributesList=new ArrayList<TextAttributes>(5);
  reinit();
}
