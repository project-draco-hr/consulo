{
  super.visitMethodCallExpression(expression);
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  if (parent instanceof PsiReturnStatement || parent instanceof PsiThrowStatement) {
    return;
  }
  final PsiType type=expression.getType();
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,"java.lang.Throwable")) {
    return;
  }
  final PsiLocalVariable variable;
  if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression rhs=assignmentExpression.getRExpression();
    if (!PsiTreeUtil.isAncestor(rhs,expression,false)) {
      return;
    }
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!(lhs instanceof PsiReferenceExpression)) {
      return;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiLocalVariable)) {
      return;
    }
    variable=(PsiLocalVariable)target;
  }
 else   if (parent instanceof PsiVariable) {
    if (!(parent instanceof PsiLocalVariable)) {
      return;
    }
    variable=(PsiLocalVariable)parent;
  }
 else {
    variable=null;
  }
  if (variable != null) {
    final Query<PsiReference> query=ReferencesSearch.search(variable,variable.getUseScope());
    for (    PsiReference reference : query) {
      final PsiElement usage=reference.getElement();
      PsiElement usageParent=usage.getParent();
      while (usageParent instanceof PsiParenthesizedExpression) {
        usageParent=usageParent.getParent();
      }
      if (usageParent instanceof PsiThrowStatement) {
        return;
      }
 else       if (usageParent instanceof PsiReturnStatement) {
        return;
      }
    }
  }
  registerMethodCallError(expression);
}
