{
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=BaseCodeInsightAction.getInjectedEditor(project,CommonDataKeys.EDITOR.getData(dataContext));
  final VirtualFile[] files=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  PsiFile file=null;
  PsiDirectory dir;
  if (editor != null) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return;
    dir=file.getContainingDirectory();
  }
 else   if (files != null && ReformatCodeAction.containsAtLeastOneFile(files)) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (!operationStatus.hasReadonlyFiles()) {
      new OptimizeImportsProcessor(project,ReformatCodeAction.convertToPsiFiles(files,project),null).run();
    }
    return;
  }
 else {
    Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
    Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
    if (projectContext != null || moduleContext != null) {
      final String text;
      final boolean hasChanges;
      if (moduleContext != null) {
        text=CodeInsightBundle.message("process.scope.module",moduleContext.getName());
        hasChanges=FormatChangedTextUtil.hasChanges(moduleContext);
      }
 else {
        text=CodeInsightBundle.message("process.scope.project",projectContext.getPresentableUrl());
        hasChanges=FormatChangedTextUtil.hasChanges(projectContext);
      }
      Boolean isProcessVcsChangedText=isProcessVcsChangedText(project,text,hasChanges);
      if (isProcessVcsChangedText == null) {
        return;
      }
      if (moduleContext != null) {
        OptimizeImportsProcessor processor=new OptimizeImportsProcessor(project,moduleContext);
        processor.setProcessChangedTextOnly(isProcessVcsChangedText);
        processor.run();
      }
 else {
        new OptimizeImportsProcessor(projectContext).run();
      }
      return;
    }
    PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(dataContext);
    if (element == null)     return;
    if (element instanceof PsiDirectoryContainer) {
      dir=((PsiDirectoryContainer)element).getDirectories()[0];
    }
 else     if (element instanceof PsiDirectory) {
      dir=(PsiDirectory)element;
    }
 else {
      file=element.getContainingFile();
      if (file == null)       return;
      dir=file.getContainingDirectory();
    }
  }
  boolean processDirectory=false;
  boolean processOnlyVcsChangedFiles=false;
  if (!ApplicationManager.getApplication().isUnitTestMode() && file == null && dir != null) {
    String message=CodeInsightBundle.message("process.scope.directory",dir.getName());
    OptimizeImportsDialog dialog=new OptimizeImportsDialog(project,message,FormatChangedTextUtil.hasChanges(dir));
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
    processDirectory=true;
    processOnlyVcsChangedFiles=dialog.isProcessOnlyVcsChangedFiles();
  }
  if (processDirectory) {
    new OptimizeImportsProcessor(project,dir,true,processOnlyVcsChangedFiles).run();
  }
 else {
    final OptimizeImportsProcessor optimizer=new OptimizeImportsProcessor(project,file);
    if (editor != null && EditorSettingsExternalizable.getInstance().getOptions().SHOW_NOTIFICATION_AFTER_OPTIMIZE_IMPORTS_ACTION) {
      optimizer.setCollectInfo(true);
      optimizer.setPostRunnable(new Runnable(){
        @Override public void run(){
          LayoutCodeInfoCollector collector=optimizer.getInfoCollector();
          if (collector != null) {
            String info=collector.getOptimizeImportsNotification();
            if (!editor.isDisposed() && editor.getComponent().isShowing()) {
              String message=info != null ? info : NO_IMPORTS_OPTIMIZED;
              FileInEditorProcessor.showHint(editor,StringUtil.capitalize(message),null);
            }
          }
        }
      }
);
    }
    optimizer.run();
  }
}
