{
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=BaseCodeInsightAction.getInjectedEditor(project,PlatformDataKeys.EDITOR.getData(dataContext));
  final VirtualFile[] files=PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  PsiFile file=null;
  PsiDirectory dir;
  if (editor != null) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return;
    dir=file.getContainingDirectory();
  }
 else   if (files != null && ReformatCodeAction.areFiles(files)) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (!operationStatus.hasReadonlyFiles()) {
      new OptimizeImportsProcessor(project,ReformatCodeAction.convertToPsiFiles(files,project),null).run();
    }
    return;
  }
 else {
    Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
    Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
    if (projectContext != null || moduleContext != null) {
      final String text;
      if (moduleContext != null) {
        text=CodeInsightBundle.message("process.scope.module",moduleContext.getName());
      }
 else {
        text=CodeInsightBundle.message("process.scope.project",projectContext.getPresentableUrl());
      }
      LayoutProjectCodeDialog dialog=new LayoutProjectCodeDialog(project,null,CodeInsightBundle.message("process.optimize.imports"),text,false);
      dialog.show();
      if (!dialog.isOK())       return;
      if (moduleContext != null) {
        new OptimizeImportsProcessor(project,moduleContext).run();
      }
 else {
        new OptimizeImportsProcessor(projectContext).run();
      }
      return;
    }
    PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (element == null)     return;
    if (element instanceof PsiDirectoryContainer) {
      dir=((PsiDirectoryContainer)element).getDirectories()[0];
    }
 else     if (element instanceof PsiDirectory) {
      dir=(PsiDirectory)element;
    }
 else {
      file=element.getContainingFile();
      if (file == null)       return;
      dir=file.getContainingDirectory();
    }
  }
  boolean processDirectory;
  boolean includeSubdirectories;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    includeSubdirectories=processDirectory=false;
  }
 else   if (!EditorSettingsExternalizable.getInstance().getOptions().SHOW_OPIMIZE_IMPORTS_DIALOG && file != null) {
    includeSubdirectories=processDirectory=false;
  }
 else {
    final LayoutCodeDialog dialog=new LayoutCodeDialog(project,CodeInsightBundle.message("process.optimize.imports"),file,dir,null,HELP_ID);
    dialog.show();
    if (!dialog.isOK())     return;
    EditorSettingsExternalizable.getInstance().getOptions().SHOW_OPIMIZE_IMPORTS_DIALOG=!dialog.isDoNotAskMe();
    ReformatCodeAction.updateShowDialogSetting(dialog,"\"Optimize Imports\" dialog disabled");
    processDirectory=dialog.isProcessDirectory();
    includeSubdirectories=dialog.isIncludeSubdirectories();
  }
  if (processDirectory) {
    new OptimizeImportsProcessor(project,dir,includeSubdirectories).run();
  }
 else {
    new OptimizeImportsProcessor(project,file).run();
  }
}
