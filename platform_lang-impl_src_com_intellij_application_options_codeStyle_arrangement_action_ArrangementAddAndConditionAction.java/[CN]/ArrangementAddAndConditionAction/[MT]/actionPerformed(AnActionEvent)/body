{
  Map<ArrangementSettingType,List<?>> availableSettings=ArrangementSettingsUtil.buildAvailableOptions(e.getDataContext());
  if (availableSettings.isEmpty()) {
    return;
  }
  ArrangementNodeDisplayManager displayManager=ArrangementSettingsUtil.DISPLAY_MANAGER.getData(e.getDataContext());
  if (displayManager == null) {
    return;
  }
  Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    return;
  }
  JComponent tree=ArrangementSettingsUtil.TREE.getData(e.getDataContext());
  if (tree == null) {
    return;
  }
  final Ref<Balloon> balloonRef=new Ref<Balloon>();
  ArrangementSettingsNode node=ArrangementSettingsUtil.getSettingsNode(e.getDataContext());
  Consumer<ArrangementSettingsAtomNode> consumer=new Consumer<ArrangementSettingsAtomNode>(){
    @Override public void consume(    ArrangementSettingsAtomNode node){
      Balloon balloon=balloonRef.get();
      if (balloon != null) {
        balloon.hide();
      }
    }
  }
;
  if (node == null) {
  }
 else {
    ArrangementNodeEditor editor=new ArrangementNodeEditor(displayManager,availableSettings,consumer);
    editor.applyColorsFrom(tree);
    Balloon balloon=JBPopupFactory.getInstance().createBalloonBuilder(editor).setDisposable(project).setHideOnClickOutside(true).setFillColor(tree.getBackground()).createBalloon();
    balloonRef.set(balloon);
    Point point=MouseInfo.getPointerInfo().getLocation();
    SwingUtilities.convertPointFromScreen(point,tree);
    balloon.show(new RelativePoint(tree,point),Balloon.Position.below);
  }
}
