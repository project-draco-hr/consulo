{
  final IElementType tokenType=expression.getOperationTokenType();
  final PsiExpression[] operands=expression.getOperands();
  if (tokenType.equals(JavaTokenType.AND)) {
    for (    PsiExpression operand : operands) {
      if (isZero(operand)) {
        return operand.getText();
      }
 else       if (isAllOnes(operand)) {
        return getText(expression,operand);
      }
    }
  }
 else   if (tokenType.equals(JavaTokenType.OR)) {
    for (    PsiExpression operand : operands) {
      if (isZero(operand)) {
        return getText(expression,operand);
      }
 else       if (isAllOnes(operand)) {
        return operand.getText();
      }
    }
  }
 else   if (tokenType.equals(JavaTokenType.XOR)) {
    for (    PsiExpression operand : operands) {
      if (isAllOnes(operand)) {
        return '~' + getText(expression,operand);
      }
 else       if (isZero(operand)) {
        return getText(expression,operand);
      }
    }
  }
 else   if (tokenType.equals(JavaTokenType.LTLT) || tokenType.equals(JavaTokenType.GTGT) || tokenType.equals(JavaTokenType.GTGTGT)) {
    for (    PsiExpression operand : operands) {
      if (isZero(operand)) {
        return getText(expression,operand);
      }
    }
  }
  return "";
}
