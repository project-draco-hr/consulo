{
  ourMap.clear();
  ourRendererColors.clear();
  final List children=element.getChildren(INFO);
  if (children != null) {
    for (    Object child : children) {
      final Element infoElement=(Element)child;
      final SeverityBasedTextAttributes highlightInfo=new SeverityBasedTextAttributes();
      highlightInfo.readExternal(infoElement);
      Color color=null;
      final String colorStr=infoElement.getAttributeValue(COLOR);
      if (colorStr != null) {
        color=new Color(Integer.parseInt(colorStr,16));
      }
      registerSeverity(highlightInfo,color);
    }
  }
  myOrder.clear();
  myOrder.readExternal(element);
  myReadOrder=new JDOMExternalizableStringList();
  myReadOrder.addAll(myOrder);
  final Set<String> knownSeverities=new HashSet<String>(ourMap.keySet());
  knownSeverities.addAll(STANDART_SEVERITIES.keySet());
  myOrder.retainAll(knownSeverities);
  if (myOrder.isEmpty()) {
    initOrder();
  }
 else {
    List<HighlightSeverity> order=new ArrayList<HighlightSeverity>();
    for (    HighlightInfoType type : STANDART_SEVERITIES.values()) {
      order.add(type.getSeverity(null));
    }
    Collections.sort(order);
    for (int i=0; i < order.size(); i++) {
      HighlightSeverity stdSeverity=order.get(i);
      if (!myOrder.contains(stdSeverity.toString())) {
        for (int oIdx=0; oIdx < myOrder.size(); oIdx++) {
          final HighlightInfoType type=STANDART_SEVERITIES.get(myOrder.get(oIdx));
          if (type != null && order.indexOf(type.getSeverity(null)) > i) {
            myOrder.add(oIdx,stdSeverity.toString());
            myReadOrder=null;
            break;
          }
        }
      }
    }
  }
}
