{
  boolean failed=false;
  myProgress.setText("Checking out...");
  HashSet<File> filesToRefresh=new HashSet<File>();
  for (  VirtualFile root : checkoutRoots) {
    myProgress.setText2(root.getPath());
    startedRoots.add(root);
    GitRevisionNumber prev=GitRevisionNumber.resolve(myProject,root,"HEAD");
    GitLineHandler h=new GitLineHandler(myProject,root,GitCommand.CHECKOUT);
    h.addParameters("-f");
    Pair<String,Boolean> branchedRef=myNewBranchMapping.get(root);
    String ref=myNewConfiguration.getReference(root.getPath());
    h.addParameters("-l");
    if (branchedRef != null) {
      if (branchedRef.second) {
        h.addParameters("-t");
      }
      h.addParameters("-b",ref,branchedRef.first);
    }
 else {
      h.addParameters(ref);
    }
    Collection<VcsException> exceptions=GitHandlerUtil.doSynchronouslyWithExceptions(h,myProgress,h.printableCommandLine());
    if (!exceptions.isEmpty()) {
      myExceptions.addAll(exceptions);
      failed=true;
      break;
    }
    GitSimpleHandler d=new GitSimpleHandler(myProject,root,GitCommand.DIFF);
    d.addParameters("--name-only",prev.asString() + "..HEAD");
    d.setNoSSH(true);
    d.setSilent(true);
    d.endOptions();
    try {
      File base=new File(root.getPath());
      for (StringScanner s=new StringScanner(d.run()); s.hasMoreData(); ) {
        String l=s.line();
        if (l.length() > 0) {
          filesToRefresh.add(new File(base,GitUtil.unescapePath(l)));
        }
      }
    }
 catch (    VcsException e) {
      LOG.error("Unexpected diff failure",e);
      myExceptions.add(e);
      failed=true;
      break;
    }
  }
  if (!failed) {
    LocalFileSystem.getInstance().refreshIoFiles(filesToRefresh);
  }
  return !failed;
}
