{
  if (changes == null) {
    return;
  }
  ShelvedChangeList shelve=null;
  for (  ShelvedChangeList changeList : myShelveManager.getShelvedChangeLists()) {
    if (changeList.PATH.equals(changes.SHELVE_PATH)) {
      shelve=changeList;
    }
  }
  if (shelve == null) {
    myExceptions.add(new VcsException("Failed to find shelve with path" + changes.SHELVE_PATH));
    return;
  }
  progress.setText("Refreshing files before restoring shelve: " + shelve.DESCRIPTION);
  final ShelvedChangeList finalShelve=shelve;
  final Continuation continuation=Continuation.createForCurrentProgress(myProject,true,"Git: restore changes");
  final Consumer<VcsException> exceptionConsumer=new Consumer<VcsException>(){
    @Override public void consume(    VcsException e){
      GitUIUtil.showTabErrors(myProject,"Failed to restore shelved lists",Collections.singletonList(e));
      final String message="Failed to process restore shelved change list: " + finalShelve.DESCRIPTION + ". Please restore it manually.";
      ToolWindowManager.getInstance(myProject).notifyByBalloon(ChangesViewContentManager.TOOLWINDOW_ID,MessageType.ERROR,message);
      GitVcs.NOTIFICATION_GROUP_ID.createNotification(message,NotificationType.ERROR).notify(myProject);
    }
  }
;
  continuation.addExceptionHandler(VcsException.class,exceptionConsumer);
  final GatheringContinuationContext initContext=new GatheringContinuationContext();
  GitShelveUtils.doSystemUnshelve(myProject,shelve,myShelveManager,initContext);
  continuation.run(initContext.getList());
}
