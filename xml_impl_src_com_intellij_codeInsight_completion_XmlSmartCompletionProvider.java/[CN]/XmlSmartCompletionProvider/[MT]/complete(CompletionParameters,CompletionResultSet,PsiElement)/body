{
  if (!XmlCompletionContributor.isXmlNameCompletion(parameters)) {
    return;
  }
  result.stopHere();
  if (!(element.getParent() instanceof XmlTag)) {
    return;
  }
  final XmlTag tag=(XmlTag)element.getParent();
  final XmlTag parentTag=tag.getParentTag();
  final PsiFile file=tag.getContainingFile().getOriginalFile();
  if (!(file instanceof XmlFile))   return;
  XSModel xsModel=ApplicationManager.getApplication().runReadAction(new Computable<XSModel>(){
    @Override public XSModel compute(){
      return getXSModel((XmlFile)file);
    }
  }
);
  XSElementDeclaration decl=getElementDeclaration(parentTag,xsModel);
  if (decl != null) {
    XSComplexTypeDecl definition=(XSComplexTypeDecl)decl.getTypeDefinition();
    XSCMValidator model=definition.getContentModel(new CMBuilder(new CMNodeFactory()));
    SubstitutionGroupHandler handler=new SubstitutionGroupHandler(new XSGrammarBucket());
    int[] state=model.startContentModel();
    for (    XmlTag xmlTag : parentTag.getSubTags()) {
      if (xmlTag == tag) {
        break;
      }
      model.oneTransition(createQName(xmlTag),state,handler);
    }
    List vector=model.whatCanGoHere(state);
    for (    Object o : vector) {
      if (o instanceof XSElementDecl) {
        final XSElementDecl elementDecl=(XSElementDecl)o;
        result.addElement(LookupElementBuilder.create(elementDecl.getName()).setTypeText(elementDecl.getNamespace()).setInsertHandler(new InsertHandler<LookupElement>(){
          @Override public void handleInsert(          InsertionContext context,          LookupElement item){
            context.commitDocument();
            XmlElementDescriptor[] descriptors=parentTag.getDescriptor().getElementsDescriptors(parentTag);
            for (            XmlElementDescriptor descriptor : descriptors) {
              if (descriptor.getName().equals(elementDecl.getName())) {
                Project project=context.getProject();
                Editor editor=context.getEditor();
                final int offset=editor.getCaretModel().getOffset();
                editor.getDocument().insertString(offset," ");
                PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
                PsiElement current=context.getFile().findElementAt(context.getStartOffset());
                XmlTag newTag=PsiTreeUtil.getParentOfType(current,XmlTag.class);
                GenerateXmlTagAction.generateTag(newTag);
                return;
              }
            }
          }
        }
));
      }
    }
  }
}
