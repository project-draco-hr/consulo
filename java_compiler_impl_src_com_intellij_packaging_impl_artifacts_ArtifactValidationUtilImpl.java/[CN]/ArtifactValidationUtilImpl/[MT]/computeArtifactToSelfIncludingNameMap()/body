{
  final Map<Artifact,String> result=new HashMap<Artifact,String>();
  final ArtifactManager artifactManager=ArtifactManager.getInstance(myProject);
  final GraphGenerator<Artifact> graph=GraphGenerator.create(CachingSemiGraph.create(new ArtifactsGraph(artifactManager)));
  for (  Artifact artifact : graph.getNodes()) {
    final Iterator<Artifact> in=graph.getIn(artifact);
    while (in.hasNext()) {
      Artifact next=in.next();
      if (next.equals(artifact)) {
        result.put(artifact,artifact.getName());
        break;
      }
    }
  }
  final DFSTBuilder<Artifact> builder=new DFSTBuilder<Artifact>(graph);
  builder.buildDFST();
  if (builder.isAcyclic() && result.isEmpty())   return Collections.emptyMap();
  final TIntArrayList sccs=builder.getSCCs();
  sccs.forEach(new TIntProcedure(){
    int myTNumber=0;
    public boolean execute(    int size){
      if (size > 1) {
        for (int j=0; j < size; j++) {
          final Artifact artifact=builder.getNodeByTNumber(myTNumber + j);
          result.put(artifact,artifact.getName());
        }
      }
      myTNumber+=size;
      return true;
    }
  }
);
  for (int i=0; i < graph.getNodes().size(); i++) {
    final Artifact artifact=builder.getNodeByTNumber(i);
    if (!result.containsKey(artifact)) {
      final Iterator<Artifact> in=graph.getIn(artifact);
      while (in.hasNext()) {
        final String name=result.get(in.next());
        if (name != null) {
          result.put(artifact,name);
        }
      }
    }
  }
  return result;
}
