{
  final Map<String,String> result=new HashMap<String,String>();
  final ArtifactManager artifactManager=ArtifactManager.getInstance(myProject);
  final GraphGenerator<String> graph=GraphGenerator.create(CachingSemiGraph.create(new ArtifactsGraph(artifactManager)));
  for (  String artifactName : graph.getNodes()) {
    final Iterator<String> in=graph.getIn(artifactName);
    while (in.hasNext()) {
      String next=in.next();
      if (next.equals(artifactName)) {
        result.put(artifactName,artifactName);
        break;
      }
    }
  }
  final DFSTBuilder<String> builder=new DFSTBuilder<String>(graph);
  builder.buildDFST();
  if (builder.isAcyclic() && result.isEmpty())   return Collections.emptyMap();
  final TIntArrayList sccs=builder.getSCCs();
  sccs.forEach(new TIntProcedure(){
    int myTNumber=0;
    public boolean execute(    int size){
      if (size > 1) {
        for (int j=0; j < size; j++) {
          final String artifactName=builder.getNodeByTNumber(myTNumber + j);
          result.put(artifactName,artifactName);
        }
      }
      myTNumber+=size;
      return true;
    }
  }
);
  for (int i=0; i < graph.getNodes().size(); i++) {
    final String artifactName=builder.getNodeByTNumber(i);
    if (!result.containsKey(artifactName)) {
      final Iterator<String> in=graph.getIn(artifactName);
      while (in.hasNext()) {
        final String name=result.get(in.next());
        if (name != null) {
          result.put(artifactName,name);
        }
      }
    }
  }
  return result;
}
