{
  if (targetMethod == null)   return PsiClassType.EMPTY_ARRAY;
  Set<PsiClassType> result=new HashSet<PsiClassType>();
  if (!targetMethod.getManager().isInProject(targetMethod)) {
    final PsiClassType[] referencedTypes=targetMethod.getThrowsList().getReferencedTypes();
    for (int i=0; i < referencedTypes.length; i++) {
      PsiClassType referencedType=referencedTypes[i];
      PsiClass psiClass=referencedType.resolve();
      if (psiClass == null)       continue;
      for (int j=0; j < unhandledExceptions.length; j++) {
        PsiClassType exception=unhandledExceptions[j];
        if (referencedType.isAssignableFrom(exception))         result.add(exception);
      }
    }
  }
 else {
    final PsiMethod[] superMethods=PsiSuperMethodUtil.findSuperMethods(targetMethod);
    for (int i=0; i < superMethods.length; i++) {
      PsiMethod superMethod=superMethods[i];
      PsiClassType[] classTypes=filterInProjectExceptions(unhandledExceptions,superMethod);
      result.addAll(Arrays.asList(classTypes));
    }
    if (superMethods.length == 0) {
      result.addAll(Arrays.asList(unhandledExceptions));
    }
  }
  return result.toArray(new PsiClassType[result.size()]);
}
