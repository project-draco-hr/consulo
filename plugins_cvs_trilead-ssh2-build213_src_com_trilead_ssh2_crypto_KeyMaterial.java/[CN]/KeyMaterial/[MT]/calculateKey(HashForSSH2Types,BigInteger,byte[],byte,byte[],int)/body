{
  byte[] res=new byte[keyLength];
  int dglen=sh.getDigestLength();
  int numRounds=(keyLength + dglen - 1) / dglen;
  byte[][] tmp=new byte[numRounds][];
  sh.reset();
  sh.updateBigInt(K);
  sh.updateBytes(H);
  sh.updateByte(type);
  sh.updateBytes(SessionID);
  tmp[0]=sh.getDigest();
  int off=0;
  int produced=Math.min(dglen,keyLength);
  System.arraycopy(tmp[0],0,res,off,produced);
  keyLength-=produced;
  off+=produced;
  for (int i=1; i < numRounds; i++) {
    sh.updateBigInt(K);
    sh.updateBytes(H);
    for (int j=0; j < i; j++)     sh.updateBytes(tmp[j]);
    tmp[i]=sh.getDigest();
    produced=Math.min(dglen,keyLength);
    System.arraycopy(tmp[i],0,res,off,produced);
    keyLength-=produced;
    off+=produced;
  }
  return res;
}
