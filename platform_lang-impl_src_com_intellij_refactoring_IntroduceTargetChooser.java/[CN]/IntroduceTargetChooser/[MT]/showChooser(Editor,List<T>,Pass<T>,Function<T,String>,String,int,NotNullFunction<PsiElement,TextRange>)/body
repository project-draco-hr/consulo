{
  final ScopeHighlighter highlighter=new ScopeHighlighter(editor,ranger);
  final DefaultListModel model=new DefaultListModel();
  for (  T expr : expressions) {
    model.addElement(expr);
  }
  final JList list=new JBList(model);
  if (selection > -1)   list.setSelectedIndex(selection);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final T expr=(T)value;
      if (expr.isValid()) {
        String text=renderer.fun(expr);
        int firstNewLinePos=text.indexOf('\n');
        String trimmedText=text.substring(0,firstNewLinePos != -1 ? firstNewLinePos : Math.min(100,text.length()));
        if (trimmedText.length() != text.length())         trimmedText+=" ...";
        setText(trimmedText);
      }
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      highlighter.dropHighlight();
      final int index=list.getSelectedIndex();
      if (index < 0)       return;
      final T expr=(T)model.get(index);
      final ArrayList<PsiElement> toExtract=new ArrayList<PsiElement>();
      toExtract.add(expr);
      highlighter.highlight(expr,toExtract);
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    @Override public void run(){
      callback.pass((T)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      highlighter.dropHighlight();
    }
  }
).createPopup().showInBestPositionFor(editor);
}
