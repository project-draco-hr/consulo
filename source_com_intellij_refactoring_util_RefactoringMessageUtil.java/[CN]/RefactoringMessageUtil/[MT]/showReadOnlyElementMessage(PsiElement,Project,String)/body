{
  if (element instanceof PsiDirectory) {
    PsiDirectory dir=(PsiDirectory)element;
    final VirtualFile vFile=dir.getVirtualFile();
    if (vFile.getFileSystem() instanceof JarFileSystem) {
      String message1=messagePrefix + ".\n Directory " + vFile.getPresentableUrl()+ " is located in a jar file.";
      showErrorMessage("Cannot Modify Jar",message1,null,project);
    }
 else {
      String message1=messagePrefix + ".\n Directory " + vFile.getPresentableUrl()+ " is read-only.";
      showErrorMessage("Read-only Directory",message1,null,project);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          VirtualFileManager.getInstance().fireReadOnlyModificationAttempt(new VirtualFile[]{vFile});
        }
      }
);
    }
  }
 else   if (element instanceof PsiPackage) {
    final PsiDirectory[] directories=((PsiPackage)element).getDirectories();
    StringBuffer message=new StringBuffer(messagePrefix);
    message.append('\n');
    final List<VirtualFile> readOnlyDirs=new ArrayList<VirtualFile>();
    for (int i=0; i < directories.length; i++) {
      PsiDirectory directory=directories[i];
      if (!directory.isWritable()) {
        final VirtualFile virtualFile=directory.getVirtualFile();
        final String presentableUrl=virtualFile.getPresentableUrl();
        if (virtualFile.getFileSystem() instanceof JarFileSystem) {
          message.append("Directory " + presentableUrl + " is located in a jar file.\n");
        }
 else {
          message.append("Directory " + presentableUrl + " is read-only.\n");
          readOnlyDirs.add(virtualFile);
        }
      }
    }
    showErrorMessage("Read-only package",message.toString(),null,project);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        VirtualFileManager.getInstance().fireReadOnlyModificationAttempt((VirtualFile[])readOnlyDirs.toArray(new VirtualFile[readOnlyDirs.size()]));
      }
    }
);
  }
 else   if (element instanceof PsiCompiledElement) {
    PsiFile file=element.getContainingFile();
    String qName=((PsiJavaFile)file).getClasses()[0].getQualifiedName();
    showErrorMessage("Compiled Class",messagePrefix + " on compiled class " + qName+ ".",null,project);
  }
 else {
    PsiFile file=element.getContainingFile();
    if (file == null) {
      if (element instanceof PsiVariable) {
        String message1="Variable " + element.getText() + " cannot be renamed.";
        showErrorMessage("Read-only entity",message1,null,project);
      }
 else {
        String message1="Cannot rename " + element.getText() + ".";
        showErrorMessage("Read-only entity",message1,null,project);
      }
      return;
    }
    VirtualFile vFile=file.getVirtualFile();
    if (vFile.getFileSystem() instanceof JarFileSystem) {
      String message1=messagePrefix + ".\n File " + vFile.getPresentableUrl()+ " is located in a jar file.";
      showErrorMessage("Cannot Modify Jar",message1,null,project);
    }
 else {
      String message1=messagePrefix + ".\n File " + vFile.getPresentableUrl()+ " is read-only.";
      showErrorMessage("Read-only File",message1,null,project);
      final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
      if (document != null) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            document.fireReadOnlyModificationAttempt();
          }
        }
);
      }
    }
  }
}
