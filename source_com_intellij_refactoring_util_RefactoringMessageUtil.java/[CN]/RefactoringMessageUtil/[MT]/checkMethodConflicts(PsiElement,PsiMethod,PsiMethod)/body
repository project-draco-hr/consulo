{
  if (prototype == null)   return true;
  PsiMethod method=null;
  if (scope instanceof PsiClass) {
    method=((PsiClass)scope).findMethodBySignature(prototype,true);
  }
 else   if (scope instanceof JspFileImpl) {
    method=((JspFileImpl)scope).findMethodBySignature(prototype,true);
  }
 else {
    LOG.assertTrue(false);
  }
  if (method != null && method != refactoredMethod) {
    String methodInfo=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
    if (scope instanceof PsiClass) {
      PsiClass aClass=(PsiClass)scope;
      if (method.getContainingClass().equals(aClass)) {
        String className=!(aClass instanceof PsiAnonymousClass) ? "class " + aClass.getName() : "current class";
        int ret=Messages.showYesNoDialog("Method " + methodInfo + " is already defined in the "+ className+ ".\nContinue anyway?","Warning",Messages.getWarningIcon());
        if (ret != 0) {
          return false;
        }
      }
 else {
        if (!method.hasModifierProperty(PsiModifier.PRIVATE)) {
          String protoMethodInfo=PsiFormatUtil.formatMethod(prototype,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
          String className=method.getContainingClass().getName();
          if (!prototype.hasModifierProperty(PsiModifier.PRIVATE)) {
            boolean isMethodAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
            boolean isMyMethodAbstract=refactoredMethod != null ? refactoredMethod.hasModifierProperty(PsiModifier.ABSTRACT) : false;
            int ret=Messages.showYesNoDialog("Method " + protoMethodInfo + " will "+ ((isMethodAbstract && !isMyMethodAbstract) ? "implement" : "override")+ "\nmethod of the base class "+ className+ ".\n"+ "Continue anyway?","Warning",Messages.getWarningIcon());
            if (ret != 0) {
              return false;
            }
          }
 else {
            int ret=Messages.showYesNoDialog("Method " + protoMethodInfo + " will hide\nmethod of the base class "+ className+ ".\n"+ "Continue anyway?","Warning",Messages.getWarningIcon());
            if (ret != 0) {
              return false;
            }
          }
        }
      }
    }
 else {
      PsiFile file=method.getContainingFile();
      int toContinue=Messages.showYesNoDialog("Method " + methodInfo + " is already defined in the file\n"+ file.getVirtualFile().getPresentableUrl()+ ".\nContinue anyway?","Warning",Messages.getWarningIcon());
      if (toContinue != 0) {
        return false;
      }
    }
  }
  return true;
}
