def defineparents(repo, rev, target, state, targetancestors):
    'Return the new parent relationship of the revision that will be rebased'
    parents = repo[rev].parents()
    p1 = p2 = nullrev
    P1n = parents[0].rev()
    if (P1n in targetancestors):
        p1 = target
    elif (P1n in state):
        if (state[P1n] == nullmerge):
            p1 = target
        else:
            p1 = state[P1n]
    else:
        p1 = target
        p2 = P1n
    if ((len(parents) == 2) and (parents[1].rev() not in targetancestors)):
        P2n = parents[1].rev()
        if (P2n in state):
            if (p1 == target):
                p1 = state[P2n]
            else:
                p2 = state[P2n]
        else:
            if (p2 != nullrev):
                raise util.Abort((_('cannot use revision %d as base, result would have 3 parents') % rev))
            p2 = P2n
    repo.ui.debug((' future parents are %d and %d\n' % (repo[p1].rev(), repo[p2].rev())))
    return (p1, p2)
