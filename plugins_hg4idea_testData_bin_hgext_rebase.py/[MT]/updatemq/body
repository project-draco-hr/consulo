def updatemq(repo, state, skipped, **opts):
    'Update rebased mq patches - finalize and then import them'
    mqrebase = {}
    for p in repo.mq.applied:
        if (repo[p.rev].rev() in state):
            repo.ui.debug(('revision %d is an mq patch (%s), finalize it.\n' % (repo[p.rev].rev(), p.name)))
            mqrebase[repo[p.rev].rev()] = (p.name, isagitpatch(repo, p.name))
    if mqrebase:
        repo.mq.finish(repo, mqrebase.keys())
        for rev in sorted(mqrebase, reverse=True):
            if (rev not in skipped):
                repo.ui.debug(('import mq patch %d (%s)\n' % (state[rev], mqrebase[rev][0])))
                repo.mq.qimport(repo, (), patchname=mqrebase[rev][0], git=mqrebase[rev][1], rev=[str(state[rev])])
        repo.mq.save_dirty()
