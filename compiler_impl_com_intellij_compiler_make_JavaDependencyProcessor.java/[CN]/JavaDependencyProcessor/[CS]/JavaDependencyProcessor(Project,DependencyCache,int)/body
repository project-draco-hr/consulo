{
  myProject=project;
  myDependencyCache=dependencyCache;
  myQName=qName;
  final Cache cache=dependencyCache.getCache();
  final Cache newClassesCache=dependencyCache.getNewClassesCache();
  myBackDependencies=cache.getBackDependencies(qName);
  final TIntObjectHashMap<FieldInfo> oldFields=getFieldInfos(cache,qName);
  final Map<String,MethodInfoContainer> oldMethods=getMethodInfos(cache,qName);
  final TIntObjectHashMap<FieldInfo> newFields=getFieldInfos(newClassesCache,qName);
  final Map<String,MethodInfoContainer> newMethods=getMethodInfos(newClassesCache,qName);
  addAddedMembers(oldFields,oldMethods,newFields,newMethods,myAddedMembers);
  addRemovedMembers(oldFields,oldMethods,newFields,newMethods,myRemovedMembers);
  addChangedMembers(oldFields,oldMethods,newFields,newMethods,myChangedMembers);
  myMembersChanged=!myAddedMembers.isEmpty() || !myRemovedMembers.isEmpty() || !myChangedMembers.isEmpty();
  myIsRemoteInterface=MakeUtil.isInterface(cache.getFlags(myQName)) && cache.isRemote(qName);
  myIsAnnotation=ClsUtil.isAnnotation(cache.getFlags(qName));
  myWereAnnotationTargetsRemoved=myIsAnnotation && wereAnnotationTargesRemoved(cache,newClassesCache);
  myRetentionPolicyChanged=myIsAnnotation && hasRetentionPolicyChanged(cache,newClassesCache);
  myAnnotationSemanticsChanged=myIsAnnotation && hasAnnotationSemanticsChanged(cache,newClassesCache);
  int[] oldInterfaces=cache.getSuperInterfaces(qName);
  int[] newInterfaces=newClassesCache.getSuperInterfaces(qName);
  mySuperInterfaceRemoved=wereInterfacesRemoved(oldInterfaces,newInterfaces);
  mySuperInterfaceAdded=wereInterfacesRemoved(newInterfaces,oldInterfaces);
  mySuperlistGenericSignatureChanged=isSuperlistGenericSignatureChanged(cache.getGenericSignature(qName),newClassesCache.getGenericSignature(qName));
  boolean superclassesDiffer=cache.getSuperQualifiedName(qName) != newClassesCache.getSuperQualifiedName(qName);
  boolean wasDerivedFromObject="java.lang.Object".equals(dependencyCache.resolve(cache.getSuperQualifiedName(qName)));
  mySuperClassChanged=!wasDerivedFromObject && superclassesDiffer;
  mySuperClassAdded=wasDerivedFromObject && superclassesDiffer;
}
