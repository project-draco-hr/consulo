{
  for (final TIntObjectIterator<FieldInfo> it=oldFields.iterator(); it.hasNext(); ) {
    it.advance();
    final int fieldName=it.key();
    final FieldInfo oldInfo=it.value();
    final FieldInfo newInfo=newFields.get(fieldName);
    if (newInfo != null) {
      final FieldChangeDescription changeDescription=new FieldChangeDescription(oldInfo,newInfo);
      if (changeDescription.isChanged()) {
        members.add(oldInfo);
        myChangeDescriptions.put(oldInfo,changeDescription);
      }
    }
  }
  if (!oldMethods.isEmpty()) {
    final SymbolTable symbolTable=myDependencyCache.getSymbolTable();
    final Set<MethodInfo> processed=new HashSet<MethodInfo>();
    for (    final String signature : oldMethods.keySet()) {
      final MethodInfoContainer oldMethodsContainer=oldMethods.get(signature);
      final MethodInfoContainer newMethodsContainer=newMethods.get(signature);
      if (newMethodsContainer != null) {
        processed.clear();
        if (oldMethodsContainer.size() == newMethodsContainer.size()) {
          for (          MethodInfo oldInfo : oldMethodsContainer.getMethods()) {
            MethodInfo _newInfo=null;
            for (            MethodInfo newInfo : newMethodsContainer.getMethods()) {
              if (oldInfo.equals(newInfo)) {
                _newInfo=newInfo;
                break;
              }
            }
            if (_newInfo != null) {
              processed.add(oldInfo);
              processed.add(_newInfo);
              final MethodChangeDescription changeDescription=new MethodChangeDescription(oldInfo,_newInfo,symbolTable);
              if (changeDescription.isChanged()) {
                members.add(oldInfo);
                myChangeDescriptions.put(oldInfo,changeDescription);
              }
            }
          }
        }
        for (        MethodInfo oldInfo : oldMethodsContainer.getMethods()) {
          if (processed.contains(oldInfo)) {
            continue;
          }
          for (          MethodInfo newInfo : newMethodsContainer.getMethods()) {
            if (processed.contains(newInfo)) {
              continue;
            }
            final MethodChangeDescription changeDescription=new MethodChangeDescription(oldInfo,newInfo,symbolTable);
            if (changeDescription.isChanged()) {
              members.add(oldInfo);
              myChangeDescriptions.put(oldInfo,changeDescription);
            }
          }
        }
      }
    }
  }
}
