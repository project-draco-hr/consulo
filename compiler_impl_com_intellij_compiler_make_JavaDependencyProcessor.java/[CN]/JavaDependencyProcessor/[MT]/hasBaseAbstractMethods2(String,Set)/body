{
  final boolean[] found=new boolean[]{false};
  final CacheCorruptedException ex=ApplicationManager.getApplication().runReadAction(new Computable<CacheCorruptedException>(){
    public CacheCorruptedException compute(){
      try {
        final PsiManager psiManager=PsiManager.getInstance(myProject);
        final PsiClass aClass=JavaPsiFacade.getInstance(psiManager.getProject()).findClass(qName,GlobalSearchScope.allScope(myProject));
        if (aClass == null) {
          return null;
        }
        final PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
        final PsiNameHelper nameHelper=JavaPsiFacade.getInstance(myProject).getNameHelper();
        for (Iterator it=methodsToCheck.iterator(); it.hasNext(); ) {
          final MethodInfo methodInfo=(MethodInfo)it.next();
          if (!nameHelper.isIdentifier(myDependencyCache.resolve(methodInfo.getName()),LanguageLevel.JDK_1_3)) {
            continue;
          }
          final PsiMethod methodPattern=factory.createMethodFromText(getMethodText(methodInfo),null,LanguageLevel.JDK_1_3);
          final PsiMethod superMethod=aClass.findMethodBySignature(methodPattern,true);
          if (superMethod != null) {
            if (superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
              found[0]=true;
              return null;
            }
            it.remove();
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
catch (      CacheCorruptedException e) {
        return e;
      }
      return null;
    }
  }
);
  if (ex != null) {
    throw ex;
  }
  return found[0];
}
