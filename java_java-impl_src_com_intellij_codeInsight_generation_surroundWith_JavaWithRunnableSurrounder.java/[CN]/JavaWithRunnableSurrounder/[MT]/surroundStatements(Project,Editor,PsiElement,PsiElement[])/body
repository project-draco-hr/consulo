{
  PsiManager manager=container.getManager();
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  final String baseName="runnable";
  final String uniqueName=JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName(baseName,container,false);
  @NonNls String text="Runnable runnable = new Runnable(){\npublic void run(){\n}};";
  PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)factory.createStatementFromText(text,null);
  declarationStatement=(PsiDeclarationStatement)codeStyleManager.reformat(declarationStatement);
  declarationStatement=(PsiDeclarationStatement)container.addAfter(declarationStatement,statements[statements.length - 1]);
  final PsiVariable variable=(PsiVariable)declarationStatement.getDeclaredElements()[0];
  if (!Comparing.strEqual(uniqueName,baseName)) {
    variable.setName(uniqueName);
  }
  PsiNewExpression newExpression=(PsiNewExpression)variable.getInitializer();
  PsiElement[] children=newExpression.getChildren();
  PsiAnonymousClass anonymousClass=(PsiAnonymousClass)children[children.length - 1];
  PsiMethod method=anonymousClass.getMethods()[0];
  PsiCodeBlock body=method.getBody();
  body.addRange(statements[0],statements[statements.length - 1]);
  container.deleteChildRange(statements[0],statements[statements.length - 1]);
  makeVariablesFinal(body,body);
  final int textOffset=variable.getNameIdentifier().getTextOffset();
  PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
  editor.getCaretModel().moveToOffset(textOffset);
  new VariableInplaceRenamer(variable,editor){
    @Override protected void moveOffsetAfter(    boolean success){
      super.moveOffsetAfter(success);
      if (success) {
        final PsiNamedElement renamedVariable=getVariable();
        if (renamedVariable != null) {
          editor.getCaretModel().moveToOffset(renamedVariable.getTextRange().getEndOffset());
        }
      }
    }
  }
.performInplaceRename();
  return null;
}
