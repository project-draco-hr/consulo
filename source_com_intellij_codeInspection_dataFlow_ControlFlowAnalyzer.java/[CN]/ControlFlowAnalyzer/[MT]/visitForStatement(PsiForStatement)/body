{
  final ArrayList<PsiElement> declaredVariables=new ArrayList<PsiElement>();
  startElement(statement);
  PsiStatement initialization=statement.getInitialization();
  if (initialization != null) {
    initialization.accept(this);
    initialization.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      public void visitDeclarationStatement(      PsiDeclarationStatement statement){
        PsiElement[] declaredElements=statement.getDeclaredElements();
        for (int i=0; i < declaredElements.length; i++) {
          PsiElement element=declaredElements[i];
          if (element instanceof PsiVariable) {
            declaredVariables.add(element);
          }
        }
      }
    }
);
  }
  PsiExpression condition=statement.getCondition();
  if (condition != null) {
    condition.accept(this);
  }
 else {
    addInstruction(new PushInstruction(myFactory.getConstFactory().getTrue()));
  }
  addInstruction(new ConditionalGotoInstruction(getEndOffset(statement),true,condition));
  PsiStatement body=statement.getBody();
  if (body != null) {
    body.accept(this);
  }
  PsiStatement update=statement.getUpdate();
  if (update != null) {
    update.accept(this);
  }
  int offset=initialization != null ? getEndOffset(initialization) : getStartOffset(statement);
  addInstruction(new GotoInstruction(offset));
  finishElement(statement);
  for (int i=0; i < declaredVariables.size(); i++) {
    PsiVariable psiVariable=(PsiVariable)declaredVariables.get(i);
    myCurrentFlow.removeVariable(psiVariable);
  }
}
