{
  doAddPromptToHistory();
  final Document history=myHistoryViewer.getDocument();
  final MarkupModel markupModel=DocumentMarkupModel.forDocument(history,myProject,true);
  final int localStartOffset=textRange.getStartOffset();
  String text;
  EditorHighlighter highlighter;
  if (inputEditor instanceof EditorWindow) {
    PsiFile file=((EditorWindow)inputEditor).getInjectedFile();
    highlighter=HighlighterFactory.createHighlighter(file.getVirtualFile(),EditorColorsManager.getInstance().getGlobalScheme(),getProject());
    String fullText=InjectedLanguageUtil.getUnescapedText(file,null,null);
    highlighter.setText(fullText);
    text=textRange.substring(fullText);
  }
 else {
    text=inputEditor.getDocument().getText(textRange);
    highlighter=inputEditor.getHighlighter();
  }
  int offset=appendToHistoryDocument(history,text);
  final HighlighterIterator iterator=highlighter.createIterator(localStartOffset);
  final int localEndOffset=textRange.getEndOffset();
  while (!iterator.atEnd()) {
    final int itStart=iterator.getStart();
    if (itStart > localEndOffset) {
      break;
    }
    final int itEnd=iterator.getEnd();
    if (itEnd >= localStartOffset) {
      final int start=Math.max(itStart,localStartOffset) - localStartOffset + offset;
      final int end=Math.min(itEnd,localEndOffset) - localStartOffset + offset;
      markupModel.addRangeHighlighter(start,end,HighlighterLayer.SYNTAX,iterator.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    }
    iterator.advance();
  }
  if (preserveMarkup) {
    duplicateHighlighters(markupModel,DocumentMarkupModel.forDocument(inputEditor.getDocument(),myProject,true),offset,textRange);
  }
  if (!text.endsWith("\n")) {
    appendToHistoryDocument(history,"\n");
  }
  return text;
}
