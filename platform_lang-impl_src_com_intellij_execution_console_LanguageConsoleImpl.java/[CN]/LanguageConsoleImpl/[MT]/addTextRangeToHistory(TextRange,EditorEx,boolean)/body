{
  final Document history=myHistoryViewer.getDocument();
  final MarkupModel markupModel=DocumentMarkupModel.forDocument(history,myProject,true);
  if (myPrompt != null) {
    appendToHistoryDocument(history,myPrompt);
  }
  markupModel.addRangeHighlighter(history.getTextLength() - StringUtil.length(myPrompt),history.getTextLength(),HighlighterLayer.SYNTAX,ConsoleViewContentType.USER_INPUT.getAttributes(),HighlighterTargetArea.EXACT_RANGE);
  final int localStartOffset=textRange.getStartOffset();
  String text;
  EditorHighlighter highlighter;
  if (consoleEditor instanceof com.intellij.injected.editor.EditorWindow) {
    com.intellij.injected.editor.EditorWindow editorWindow=(com.intellij.injected.editor.EditorWindow)consoleEditor;
    EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
    PsiFile file=editorWindow.getInjectedFile();
    highlighter=HighlighterFactory.createHighlighter(file.getVirtualFile(),scheme,getProject());
    String fullText=InjectedLanguageUtil.getUnescapedText(file,null,null);
    highlighter.setText(fullText);
    text=textRange.substring(fullText);
  }
 else {
    text=consoleEditor.getDocument().getText(textRange);
    highlighter=consoleEditor.getHighlighter();
  }
  appendToHistoryDocument(history,text);
  int offset=history.getTextLength() - text.length();
  final HighlighterIterator iterator=highlighter.createIterator(localStartOffset);
  final int localEndOffset=textRange.getEndOffset();
  while (!iterator.atEnd()) {
    final int itStart=iterator.getStart();
    if (itStart > localEndOffset)     break;
    final int itEnd=iterator.getEnd();
    if (itEnd >= localStartOffset) {
      final int start=Math.max(itStart,localStartOffset) - localStartOffset + offset;
      final int end=Math.min(itEnd,localEndOffset) - localStartOffset + offset;
      markupModel.addRangeHighlighter(start,end,HighlighterLayer.SYNTAX,iterator.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    }
    iterator.advance();
  }
  if (preserveMarkup) {
    duplicateHighlighters(markupModel,DocumentMarkupModel.forDocument(consoleEditor.getDocument(),myProject,true),offset,textRange);
    duplicateHighlighters(markupModel,consoleEditor.getMarkupModel(),offset,textRange);
  }
  if (!text.endsWith("\n")) {
    appendToHistoryDocument(history,"\n");
  }
  return text;
}
