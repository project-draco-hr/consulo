{
  final DocumentImpl history=(DocumentImpl)myHistoryViewer.getDocument();
  final MarkupModel markupModel=history.getMarkupModel(myProject);
  final int promptOffset=history.getTextLength();
  history.insertString(history.getTextLength(),myPrompt);
  markupModel.addRangeHighlighter(promptOffset,history.getTextLength(),HighlighterLayer.SYNTAX,ConsoleViewContentType.USER_INPUT.getAttributes(),HighlighterTargetArea.EXACT_RANGE);
  final int offset=history.getTextLength();
  final String text=textRange.substring(myConsoleEditor.getDocument().getText());
  history.insertString(offset,text);
  final HighlighterIterator iterator=myConsoleEditor.getHighlighter().createIterator(0);
  while (!iterator.atEnd()) {
    final int localOffset=textRange.getStartOffset();
    final int start=Math.max(iterator.getStart(),localOffset) - localOffset;
    final int end=Math.min(iterator.getEnd(),textRange.getEndOffset()) - localOffset;
    if (start <= end) {
      markupModel.addRangeHighlighter(start + offset,end + offset,HighlighterLayer.SYNTAX,iterator.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    }
    iterator.advance();
  }
  duplicateHighlighters(markupModel,myConsoleEditor.getDocument().getMarkupModel(myProject),offset,textRange);
  duplicateHighlighters(markupModel,myConsoleEditor.getMarkupModel(),offset,textRange);
  if (!text.endsWith("\n"))   history.insertString(history.getTextLength(),"\n");
  return text;
}
