{
  FileEditorManagerAdapter fileEditorListener=new FileEditorManagerAdapter(){
    @Override public void fileOpened(    @NotNull FileEditorManager source,    @NotNull VirtualFile file){
      if (myConsoleEditor == null || !Comparing.equal(file,myVirtualFile)) {
        return;
      }
      Editor selectedTextEditor=source.getSelectedTextEditor();
      for (      FileEditor fileEditor : source.getAllEditors(file)) {
        if (!(fileEditor instanceof TextEditor)) {
          continue;
        }
        final EditorEx editor=(EditorEx)((TextEditor)fileEditor).getEditor();
        editor.addFocusListener(myFocusListener);
        if (selectedTextEditor == editor) {
          myCurrentEditor=editor;
        }
        EmptyAction.registerActionShortcuts(editor.getComponent(),myConsoleEditor.getComponent());
        editor.getCaretModel().addCaretListener(new CaretAdapter(){
          @Override public void caretPositionChanged(          CaretEvent e){
            queueUiUpdate(false);
          }
        }
);
      }
      queueUiUpdate(false);
    }
    @Override public void fileClosed(    @NotNull FileEditorManager source,    @NotNull VirtualFile file){
      if (!Comparing.equal(file,myVirtualFile)) {
        return;
      }
      if (myUiUpdateRunnable != null && !Boolean.TRUE.equals(file.getUserData(FileEditorManagerImpl.CLOSING_TO_REOPEN))) {
        if (myCurrentEditor != null && myCurrentEditor.isDisposed()) {
          myCurrentEditor=null;
        }
        ApplicationManager.getApplication().runReadAction(myUiUpdateRunnable);
      }
    }
  }
;
  myProject.getMessageBus().connect(this).subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,fileEditorListener);
  FileEditorManager editorManager=FileEditorManager.getInstance(getProject());
  if (editorManager.isFileOpen(myVirtualFile)) {
    fileEditorListener.fileOpened(editorManager,myVirtualFile);
  }
}
