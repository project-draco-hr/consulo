{
  final FileEditorManagerAdapter fileEditorListener=new FileEditorManagerAdapter(){
    @Override public void fileOpened(    FileEditorManager source,    VirtualFile file){
      if (!Comparing.equal(file,myVirtualFile) || myConsoleEditor == null)       return;
      Editor selectedTextEditor=source.getSelectedTextEditor();
      for (      FileEditor fileEditor : source.getAllEditors(file)) {
        if (!(fileEditor instanceof TextEditor))         continue;
        final Editor editor=((TextEditor)fileEditor).getEditor();
        setConsoleFilePinned((FileEditorManagerEx)source,editor);
        ((EditorEx)editor).addFocusListener(myFocusListener);
        if (selectedTextEditor == editor) {
          myCurrentEditor=editor;
        }
        EmptyAction.registerActionShortcuts(editor.getComponent(),myConsoleEditor.getComponent());
        editor.getCaretModel().addCaretListener(new CaretListener(){
          public void caretPositionChanged(          CaretEvent e){
            queueUiUpdate(false);
          }
        }
);
      }
      queueUiUpdate(false);
    }
    @Override public void fileClosed(    FileEditorManager source,    VirtualFile file){
      if (!Comparing.equal(file,myVirtualFile))       return;
      if (myUiUpdateRunnable != null && !Boolean.TRUE.equals(file.getUserData(FileEditorManagerImpl.CLOSING_TO_REOPEN))) {
        if (myCurrentEditor != null && myCurrentEditor.isDisposed())         myCurrentEditor=null;
        ApplicationManager.getApplication().runReadAction(myUiUpdateRunnable);
      }
    }
  }
;
  myProject.getMessageBus().connect(this).subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,fileEditorListener);
  if (FileEditorManager.getInstance(getProject()).isFileOpen(myVirtualFile)) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        fileEditorListener.fileOpened(FileEditorManager.getInstance(getProject()),myVirtualFile);
      }
    }
);
  }
}
