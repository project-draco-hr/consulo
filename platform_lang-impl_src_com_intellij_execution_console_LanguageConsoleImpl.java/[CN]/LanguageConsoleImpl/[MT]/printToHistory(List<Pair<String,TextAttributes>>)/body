{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (LOG.isDebugEnabled()) {
    LOG.debug("printToHistory(): " + attributedText.size());
  }
  final boolean scrollToEnd=shouldScrollHistoryToEnd();
  final int[] offsets=new int[attributedText.size() + 1];
  int i=0;
  final Document history=myHistoryViewer.getDocument();
  offsets[i]=history.getTextLength();
  for (  final Pair<String,TextAttributes> pair : attributedText) {
    final String str=StringUtil.convertLineSeparators(pair.getFirst());
    appendToHistoryDocument(history,str);
    offsets[++i]=history.getTextLength();
  }
  LOG.debug("printToHistory(): text processed");
  final MarkupModel markupModel=DocumentMarkupModel.forDocument(history,myProject,true);
  i=0;
  for (  final Pair<String,TextAttributes> pair : attributedText) {
    markupModel.addRangeHighlighter(offsets[i],offsets[i + 1],HighlighterLayer.SYNTAX,pair.getSecond(),HighlighterTargetArea.EXACT_RANGE);
    ++i;
  }
  LOG.debug("printToHistory(): markup added");
  if (scrollToEnd) {
    scrollHistoryToEnd();
  }
  queueUiUpdate(scrollToEnd);
  LOG.debug("printToHistory(): completed");
}
