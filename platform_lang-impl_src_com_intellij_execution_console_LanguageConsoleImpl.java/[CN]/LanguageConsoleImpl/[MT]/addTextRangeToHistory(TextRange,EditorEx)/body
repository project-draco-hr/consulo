{
  final DocumentImpl history=(DocumentImpl)myHistoryViewer.getDocument();
  final MarkupModel markupModel=history.getMarkupModel(myProject);
  appendToHistoryDocument(history,myPrompt);
  markupModel.addRangeHighlighter(history.getTextLength() - myPrompt.length(),history.getTextLength(),HighlighterLayer.SYNTAX,ConsoleViewContentType.USER_INPUT.getAttributes(),HighlighterTargetArea.EXACT_RANGE);
  final String text=consoleEditor.getDocument().getText(textRange);
  appendToHistoryDocument(history,text);
  int offset=history.getTextLength() - text.length();
  final int localOffset=textRange.getStartOffset();
  final HighlighterIterator iterator=consoleEditor.getHighlighter().createIterator(localOffset);
  final int localEndOffset=textRange.getEndOffset();
  while (!iterator.atEnd()) {
    final int itStart=iterator.getStart();
    if (itStart > localEndOffset)     break;
    final int itEnd=iterator.getEnd();
    if (itEnd < localOffset)     continue;
    final int start=Math.max(itStart,localOffset) - localOffset + offset;
    final int end=Math.min(itEnd,localEndOffset) - localOffset + offset;
    markupModel.addRangeHighlighter(start,end,HighlighterLayer.SYNTAX,iterator.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    iterator.advance();
  }
  if (myDoSaveErrorsToHistory) {
    duplicateHighlighters(markupModel,consoleEditor.getDocument().getMarkupModel(myProject),offset,textRange);
    duplicateHighlighters(markupModel,consoleEditor.getMarkupModel(),offset,textRange);
  }
  if (!text.endsWith("\n")) {
    appendToHistoryDocument(history,"\n");
  }
  return text;
}
