{
  final DocumentImpl history=(DocumentImpl)myHistoryViewer.getDocument();
  final MarkupModel markupModel=history.getMarkupModel(myProject);
  appendToHistoryDocument(history,myPrompt);
  markupModel.addRangeHighlighter(history.getTextLength() - myPrompt.length(),history.getTextLength(),HighlighterLayer.SYNTAX,ConsoleViewContentType.USER_INPUT.getAttributes(),HighlighterTargetArea.EXACT_RANGE);
  final String text=consoleEditor.getDocument().getText(textRange);
  appendToHistoryDocument(history,text);
  int offset=history.getTextLength() - text.length();
  final HighlighterIterator iterator=consoleEditor.getHighlighter().createIterator(0);
  while (!iterator.atEnd()) {
    final int localOffset=textRange.getStartOffset();
    final int start=Math.max(iterator.getStart(),localOffset) - localOffset;
    final int end=Math.min(iterator.getEnd(),textRange.getEndOffset()) - localOffset;
    markupModel.addRangeHighlighter(start + offset,end + offset,HighlighterLayer.SYNTAX,iterator.getTextAttributes(),HighlighterTargetArea.EXACT_RANGE);
    iterator.advance();
  }
  if (myDoSaveErrorsToHistory) {
    duplicateHighlighters(markupModel,consoleEditor.getDocument().getMarkupModel(myProject),offset,textRange);
    duplicateHighlighters(markupModel,consoleEditor.getMarkupModel(),offset,textRange);
  }
  if (!text.endsWith("\n")) {
    appendToHistoryDocument(history,"\n");
  }
  return text;
}
