{
  myProject=project;
  myTitle=title;
  installEditorFactoryListener();
  final EditorFactory editorFactory=EditorFactory.getInstance();
  myHistoryFile=new LightVirtualFile(getTitle() + ".history.txt",StdFileTypes.PLAIN_TEXT,"");
  myEditorDocument=editorFactory.createDocument("");
  setLanguage(language);
  myConsoleEditor=(EditorEx)editorFactory.createEditor(myEditorDocument,myProject);
  myCurrentEditor=myConsoleEditor;
  myHistoryViewer=(EditorEx)editorFactory.createViewer(((EditorFactoryImpl)editorFactory).createDocument(true),myProject);
  final EditorColorsScheme colorsScheme=myConsoleEditor.getColorsScheme();
  final DelegateColorScheme scheme=new DelegateColorScheme(colorsScheme){
    @Override public Color getDefaultBackground(){
      final Color color=getColor(ConsoleViewContentType.CONSOLE_BACKGROUND_KEY);
      return color == null ? super.getDefaultBackground() : color;
    }
  }
;
  myConsoleEditor.setColorsScheme(scheme);
  myHistoryViewer.setColorsScheme(scheme);
  myPanel.add(myHistoryViewer.getComponent(),BorderLayout.NORTH);
  myPanel.add(myConsoleEditor.getComponent(),BorderLayout.CENTER);
  setupComponents();
  myPanel.putClientProperty(DataManager.CLIENT_PROPERTY_DATA_PROVIDER,new TypeSafeDataProviderAdapter(this));
  myUpdateQueue=new MergingUpdateQueue("ConsoleUpdateQueue",300,true,null);
  Disposer.register(this,myUpdateQueue);
  myPanel.addComponentListener(new ComponentAdapter(){
    public void componentResized(    ComponentEvent e){
      try {
        myHistoryViewer.getScrollingModel().disableAnimation();
        updateSizes(true);
      }
  finally {
        myHistoryViewer.getScrollingModel().enableAnimation();
      }
    }
    public void componentShown(    ComponentEvent e){
      componentResized(e);
    }
  }
);
}
