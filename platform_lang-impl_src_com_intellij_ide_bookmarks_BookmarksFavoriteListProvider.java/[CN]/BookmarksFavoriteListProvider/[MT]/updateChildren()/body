{
  myChildren.clear();
  List<Bookmark> bookmarks=BookmarkManager.getInstance(myProject).getValidBookmarks();
  for (  final Bookmark bookmark : bookmarks) {
    AbstractTreeNode<Bookmark> child=new AbstractTreeNode<Bookmark>(myProject,bookmark){
      @NotNull @Override public Collection<? extends AbstractTreeNode> getChildren(){
        return Collections.emptyList();
      }
      @Override public boolean canNavigate(){
        return true;
      }
      @Override public boolean canNavigateToSource(){
        return true;
      }
      @Override public void navigate(      boolean requestFocus){
        bookmark.navigate();
      }
      @Override protected void update(      PresentationData presentation){
        presentation.setPresentableText(bookmark.toString());
        presentation.setIcon(bookmark.getIcon());
      }
    }
;
    child.setParent(myNode);
    myChildren.add(child);
  }
  FavoritesManager.getInstance(myProject).fireListeners(getListName(myProject));
}
