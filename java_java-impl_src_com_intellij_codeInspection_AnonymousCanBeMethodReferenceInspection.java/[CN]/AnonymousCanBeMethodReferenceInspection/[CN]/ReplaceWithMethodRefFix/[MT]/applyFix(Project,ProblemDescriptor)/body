{
  final PsiElement element=descriptor.getPsiElement();
  final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(element,PsiAnonymousClass.class);
  if (anonymousClass == null)   return;
  final PsiMethod[] methods=anonymousClass.getMethods();
  if (methods.length != 1)   return;
  final PsiParameter[] parameters=methods[0].getParameterList().getParameters();
  final PsiCallExpression callExpression=LambdaCanBeMethReferenceInspection.canBeMethodReferenceProblem(methods[0].getBody(),parameters,anonymousClass.getBaseClassType());
  if (callExpression == null)   return;
  final String methodRefText=LambdaCanBeMethReferenceInspection.createMethodReferenceText(callExpression,parameters,anonymousClass.getBaseClassType());
  if (methodRefText != null) {
    final String canonicalText=anonymousClass.getBaseClassType().getCanonicalText();
    final PsiExpression psiExpression=JavaPsiFacade.getElementFactory(project).createExpressionFromText("(" + canonicalText + ")"+ methodRefText,anonymousClass);
    PsiElement castExpr=anonymousClass.getParent().replace(psiExpression);
    if (RedundantCastUtil.isCastRedundant((PsiTypeCastExpression)castExpr)) {
      final PsiExpression operand=((PsiTypeCastExpression)castExpr).getOperand();
      LOG.assertTrue(operand != null);
      castExpr=castExpr.replace(operand);
    }
    JavaCodeStyleManager.getInstance(project).shortenClassReferences(castExpr);
  }
}
