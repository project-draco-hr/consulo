{
  if (myProject.isDefault()) {
    return;
  }
  Module[] modules=ModuleManager.getInstance(myProject).getModules();
  Set<String> rootPaths=new HashSet<String>();
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final String[] contentRootUrls=moduleRootManager.getContentRootUrls();
    for (    String url : contentRootUrls) {
      rootPaths.add(extractLocalPath(url));
    }
    final String compilerOutputPath=extractLocalPath(moduleRootManager.getCompilerOutputPathUrl());
    if (compilerOutputPath.length() > 0) {
      rootPaths.add(compilerOutputPath);
    }
    final String compilerOutputPathForTests=extractLocalPath(moduleRootManager.getCompilerOutputPathForTestsUrl());
    if (compilerOutputPathForTests.length() > 0) {
      rootPaths.add(compilerOutputPathForTests);
    }
    rootPaths.add(module.getModuleFilePath());
  }
  if (myCompilerOutput != null) {
    final String url=myCompilerOutput.getUrl();
    rootPaths.add(extractLocalPath(url));
  }
  final String projectFile=((ProjectEx)myProject).getStateStore().getProjectFilePath();
  if (projectFile != null) {
    rootPaths.add(projectFile);
  }
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    for (    OrderEntry entry : orderEntries) {
      if (entry instanceof LibraryOrderEntry) {
        final Library library=((LibraryOrderEntry)entry).getLibrary();
        rootPaths.addAll(getRootsToTrack(library,OrderRootType.CLASSES));
        rootPaths.addAll(getRootsToTrack(library,OrderRootType.SOURCES));
        rootPaths.addAll(getRootsToTrack(library,OrderRootType.JAVADOC));
      }
    }
  }
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final String explodedDirectory=moduleRootManager.getExplodedDirectoryUrl();
    if (explodedDirectory != null) {
      rootPaths.add(extractLocalPath(explodedDirectory));
    }
  }
  final Set<LocalFileSystem.WatchRequest> newRootsToWatch=LocalFileSystem.getInstance().addRootsToWatch(rootPaths,true);
  LocalFileSystem.getInstance().removeWatchedRoots(myRootsToWatch);
  myRootsToWatch=newRootsToWatch;
}
