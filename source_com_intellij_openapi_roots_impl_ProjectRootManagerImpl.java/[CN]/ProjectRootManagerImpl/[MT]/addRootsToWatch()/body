{
  if (myProject.isDefault()) {
    return;
  }
  Module[] modules=ModuleManager.getInstance(myProject).getModules();
  Set<String> rootPaths=new HashSet<String>();
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final String[] contentRootUrls=moduleRootManager.getContentRootUrls();
    for (    String url : contentRootUrls) {
      rootPaths.add(extractLocalPath(url));
    }
    final String compilerOutputPath=extractLocalPath(moduleRootManager.getCompilerOutputPathUrl());
    if (compilerOutputPath.length() > 0) {
      rootPaths.add(compilerOutputPath);
    }
    final String compilerOutputPathForTests=extractLocalPath(moduleRootManager.getCompilerOutputPathForTestsUrl());
    if (compilerOutputPathForTests.length() > 0) {
      rootPaths.add(compilerOutputPathForTests);
    }
    rootPaths.add(module.getModuleFilePath());
  }
  if (myCompilerOutput != null) {
    final String url=myCompilerOutput.getUrl();
    rootPaths.add(extractLocalPath(url));
  }
  final String projectFile=myProject.getStateStore().getProjectFilePath();
  rootPaths.add(projectFile);
  final VirtualFile baseDir=myProject.getBaseDir();
  if (baseDir != null) {
    rootPaths.add(baseDir.getPath());
  }
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    for (    OrderEntry entry : orderEntries) {
      if (entry instanceof LibraryOrderEntry) {
        final Library library=((LibraryOrderEntry)entry).getLibrary();
        for (        OrderRootType orderRootType : OrderRootType.getAllTypes()) {
          rootPaths.addAll(getRootsToTrack(library,orderRootType));
        }
      }
 else       if (entry instanceof JdkOrderEntry) {
        for (        OrderRootType orderRootType : OrderRootType.getAllTypes()) {
          rootPaths.addAll(getRootsToTrack(entry,orderRootType));
        }
      }
    }
  }
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final String explodedDirectory=moduleRootManager.getExplodedDirectoryUrl();
    if (explodedDirectory != null) {
      rootPaths.add(extractLocalPath(explodedDirectory));
    }
  }
  final Set<LocalFileSystem.WatchRequest> newRootsToWatch=LocalFileSystem.getInstance().addRootsToWatch(rootPaths,true);
  LocalFileSystem.getInstance().removeWatchedRoots(myRootsToWatch);
  myRootsToWatch=newRootsToWatch;
}
