{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  myRootsChangeCounter--;
  if (myRootsChangeCounter > 0)   return;
  Module[] modules=ModuleManager.getInstance(myProject).getModules();
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    ((ModuleRootManagerImpl)ModuleRootManager.getInstance(module)).dropCaches();
  }
  myModuleRootEventDispatcher.getMulticaster().rootsChanged(new ModuleRootEventImpl(myProject,filetypes));
  final FileSystemSynchronizer synchronizer=new FileSystemSynchronizer();
  for (int i=0; i < myChangeUpdaters.size(); i++) {
    CacheUpdater updater=myChangeUpdaters.get(i);
    synchronizer.registerCacheUpdater(updater);
  }
  if (!ApplicationManager.getApplication().isUnitTestMode() && myProjectOpened) {
    Runnable process=new Runnable(){
      public void run(){
        synchronizer.execute();
      }
    }
;
    ApplicationManager.getApplication().runProcessWithProgressSynchronously(process,"Loading Files...",false,myProject);
  }
 else {
    synchronizer.execute();
  }
  myModificationCount++;
}
