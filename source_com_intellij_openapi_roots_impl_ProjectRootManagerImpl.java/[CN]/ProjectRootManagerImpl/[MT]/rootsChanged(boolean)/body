{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  myRootsChangeCounter--;
  if (myRootsChangeCounter > 0)   return;
  Module[] modules=ModuleManager.getInstance(myProject).getModules();
  for (  Module module : modules) {
    ((ModuleRootManagerImpl)ModuleRootManager.getInstance(module)).dropCaches();
  }
  myModuleRootEventDispatcher.getMulticaster().rootsChanged(new ModuleRootEventImpl(myProject,filetypes));
  final FileSystemSynchronizer synchronizer=new FileSystemSynchronizer();
  for (  CacheUpdater updater : myChangeUpdaters) {
    synchronizer.registerCacheUpdater(updater);
  }
  if (!ApplicationManager.getApplication().isUnitTestMode() && myProjectOpened) {
    Runnable process=new Runnable(){
      public void run(){
        synchronizer.execute();
      }
    }
;
    ProgressManager.getInstance().runProcessWithProgressSynchronously(process,ProjectBundle.message("project.root.change.loading.progress"),false,myProject);
  }
 else {
    synchronizer.execute();
  }
  addRootsToWatch();
  myModificationCount++;
}
