{
  if (!nsdMap.containsKey(def.getNamespace())) {
    Util.log("Namespace desc not found for: " + def);
  }
  String typeName=toJavaTypeName(def,nsdMap);
  TypeDesc td=jtMap.get(model.toJavaQualifiedTypeName(def,nsdMap,false));
  if (td != null) {
    if (td.fdMap.size() == 0) {
    }
 else {
      Util.logerr("merging: type names collision: " + typeName);
    }
  }
 else {
    td=new TypeDesc(def.getName(),def.getNamespace(),typeName,TypeDesc.TypeEnum.CLASS);
  }
  XSObjectList anns=def.getAnnotations();
  td.documentation=parseAnnotationString("Type " + def.getNamespace() + ":"+ def.getName()+ " documentation",anns != null && anns.getLength() > 0 ? ((XSAnnotation)anns.item(0)).getAnnotationString() : null);
  TypeDesc tdBase=null;
  if (checkComplexType(def.getBaseType())) {
    XSComplexTypeDefinition base=(XSComplexTypeDefinition)def.getBaseType();
    String typeNameBase=toJavaTypeName(base,nsdMap);
    if ((tdBase=jtMap.get(model.toJavaQualifiedTypeName(base,nsdMap,false))) == null) {
      tdBase=new TypeDesc(base.getName(),base.getNamespace(),typeNameBase,TypeDesc.TypeEnum.CLASS);
      jtMap.put(model.toJavaQualifiedTypeName(base,nsdMap,false),tdBase);
    }
  }
  if (def.getSimpleType() != null || def.getContentType() == XSComplexTypeDefinition.CONTENTTYPE_MIXED) {
    FieldDesc fd=new FieldDesc(FieldDesc.SIMPLE,"value","String",null,"null",true);
    fd.realIndex=td.fdMap.size();
    td.fdMap.put(fd.name,fd);
  }
  XSObjectList attrs=def.getAttributeUses();
  for (int i=0; i < attrs.getLength(); i++) {
    XSAttributeUse au=(XSAttributeUse)attrs.item(i);
    XSAttributeDeclaration ad=au.getAttrDeclaration();
    XSSimpleTypeDefinition atd=ad.getTypeDefinition();
    XSAnnotation ann=ad.getAnnotation();
    String documentation=parseAnnotationString("Attribute " + ad.getNamespace() + ":"+ ad.getName()+ " documentation",ann != null ? ann.getAnnotationString() : null);
    if ("ID".equals(atd.getName()))     continue;
    if (ad.getConstraintType() == XSConstants.VC_FIXED)     continue;
    FieldDesc fd1=new FieldDesc(FieldDesc.ATTR,Util.toJavaFieldName(ad.getName()),"String",null,"null",au.getRequired());
    fd1.tagName=ad.getName();
    fd1.documentation=documentation;
    fd1.realIndex=td.fdMap.size();
    td.duplicates=Util.addToNameMap(td.fdMap,fd1,false) || td.duplicates;
    if (checkEnumType(ad.getTypeDefinition())) {
      XSTypeDefinition etRoot=ad.getTypeDefinition();
      if (etRoot.getAnonymous()) {
        etRoot=makeTypeFromAnonymous(ad);
        if (toAdd != null)         toAdd.add((XSComplexTypeDefinition)etRoot);
      }
      fd1.type=toJavaTypeName(etRoot,nsdMap);
      fd1.contentQualifiedName=model.toJavaQualifiedTypeName(etRoot,nsdMap,true);
      if (jtMap.get(fd1.contentQualifiedName) == null) {
        TypeDesc ftd=new TypeDesc(etRoot.getName(),etRoot.getNamespace(),fd1.type,TypeDesc.TypeEnum.ENUM);
        jtMap.put(fd1.contentQualifiedName,ftd);
      }
    }
 else {
      fd1.simpleTypesString=getSimpleTypesString(ad.getTypeDefinition());
    }
  }
  LinkedList<PEntry> plist=new LinkedList<PEntry>();
  if (def.getParticle() != null) {
    plist.add(new PEntry(def.getParticle(),false));
  }
  processParticles(def,plist,nsdMap,jtMap,td,models,toAdd,tdBase);
  jtMap.put(model.toJavaQualifiedTypeName(def,nsdMap,false),td);
  if (td.fdMap.size() == 1 && def.getSimpleType() != null) {
    FieldDesc fd=td.fdMap.get("value");
    fd.simpleTypesString=getSimpleTypesString(def);
  }
}
