{
  if (removedOrChangedKeys != null)   return;
  try {
    Map<Key,Value> currentValue=getCurrentValue();
    Map<Key,Value> newValue=getNewValue();
    if (!currentValue.isEmpty()) {
      if (newValue.isEmpty()) {
        addedKeys=newValue;
        removedOrChangedKeys=currentValue;
        return;
      }
      for (      Map.Entry<Key,Value> e : currentValue.entrySet()) {
        Value newValueForKey=newValue.get(e.getKey());
        if (!Comparing.equal(newValueForKey,e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) {
          if (removedOrChangedKeys == null)           removedOrChangedKeys=new THashMap<Key,Value>();
          removedOrChangedKeys.put(e.getKey(),e.getValue());
          if (newValue.containsKey(e.getKey())) {
            if (addedKeys == null)             addedKeys=new THashMap<Key,Value>();
            addedKeys.put(e.getKey(),newValueForKey);
          }
        }
      }
    }
 else {
      if (newValue.isEmpty()) {
        addedKeys=newValue;
        removedOrChangedKeys=currentValue;
        return;
      }
    }
    if (!newValue.isEmpty()) {
      if (currentValue.isEmpty()) {
        addedKeys=newValue;
        removedOrChangedKeys=currentValue;
        return;
      }
      for (      Map.Entry<Key,Value> e : newValue.entrySet()) {
        if (!currentValue.containsKey(e.getKey())) {
          if (addedKeys == null)           addedKeys=new THashMap<Key,Value>();
          addedKeys.put(e.getKey(),e.getValue());
        }
      }
    }
    if (removedOrChangedKeys == null)     removedOrChangedKeys=Collections.emptyMap();
    if (addedKeys == null)     addedKeys=Collections.emptyMap();
    int totalRequests=requests.incrementAndGet();
    totalRemovals.addAndGet(currentValue.size());
    totalAdditions.addAndGet(newValue.size());
    incrementalAdditions.addAndGet(addedKeys.size());
    incrementalRemovals.addAndGet(removedOrChangedKeys.size());
    if ((totalRequests & 0xFFF) == 0 && DO_INFO_DUMP) {
      Logger.getInstance(getClass()).info("Incremental index diff update:" + requests + ", removals:"+ totalRemovals+ "->"+ incrementalRemovals+ ", additions:"+ totalAdditions+ "->"+ incrementalAdditions);
    }
  }
 catch (  IOException e) {
    throw new StorageException(e);
  }
}
