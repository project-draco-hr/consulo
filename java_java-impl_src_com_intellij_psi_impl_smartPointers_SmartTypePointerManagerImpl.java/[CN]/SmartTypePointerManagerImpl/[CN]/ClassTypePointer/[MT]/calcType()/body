{
  final PsiElement classElement=myClass.getElement();
  if (!(classElement instanceof PsiClass))   return null;
  Map<PsiTypeParameter,PsiType> resurrected=new HashMap<PsiTypeParameter,PsiType>();
  final Set<Map.Entry<SmartPsiElementPointer,SmartTypePointer>> set=myMap.entrySet();
  for (  Map.Entry<SmartPsiElementPointer,SmartTypePointer> entry : set) {
    PsiElement element=entry.getKey().getElement();
    if (element instanceof PsiTypeParameter) {
      resurrected.put((PsiTypeParameter)element,entry.getValue().getType());
    }
  }
  for (  PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable((PsiClass)classElement)) {
    if (!resurrected.containsKey(typeParameter)) {
      resurrected.put(typeParameter,null);
    }
  }
  final PsiSubstitutor resurrectedSubstitutor=PsiSubstitutorImpl.createSubstitutor(resurrected);
  return new PsiImmediateClassType((PsiClass)classElement,resurrectedSubstitutor);
}
