{
  PsiType returnType=method.getReturnType();
  PsiClass aClass=method.getContainingClass();
  List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  FileTemplate template;
  try {
    PsiMethod templateMethod=JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createMethod("x",returnType);
    template=setupMethodBody(superSignatures,templateMethod,aClass,false);
  }
 catch (  IncorrectOperationException e) {
    return null;
  }
  final ReplaceWithFileTemplateFix replaceWithFileTemplateFix=new ReplaceWithFileTemplateFix(){
    @Override public void applyFix(    @NotNull final Project project,    @NotNull ProblemDescriptor descriptor){
      PsiMethod method=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiMethod.class);
      if (method == null)       return;
      PsiType returnType=method.getReturnType();
      if (method.isConstructor() || returnType == null)       return;
      PsiCodeBlock body=method.getBody();
      if (body == null)       return;
      if (!CodeInsightUtil.preparePsiElementsForWrite(body))       return;
      PsiClass aClass=method.getContainingClass();
      if (aClass == null)       return;
      List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
      try {
        PsiMethod templateMethod=JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createMethod("x",returnType);
        setupMethodBody(superSignatures,templateMethod,aClass,false);
        final PsiCodeBlock templateBody=templateMethod.getBody();
        if (templateBody == null)         return;
        PsiElement newBody=body.replace(templateBody);
        CodeStyleManager.getInstance(aClass.getManager()).reformat(newBody);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
  LocalQuickFix editFileTemplateFix=DefaultFileTemplateUsageInspection.createEditFileTemplateFix(template,replaceWithFileTemplateFix);
  if (template != null && template.isDefault()) {
    return new LocalQuickFix[]{editFileTemplateFix};
  }
  return new LocalQuickFix[]{replaceWithFileTemplateFix,editFileTemplateFix};
}
