{
  PsiDirectory psiDirectory=null;
  if (chooseFlag == ThreeState.UNSURE && !"".equals(packageName)) {
    String rootPackage=findLongestExistingPackage(project,packageName,scope);
    if (rootPackage != null) {
      int beginIndex=rootPackage.length() + 1;
      packageName=beginIndex < packageName.length() ? packageName.substring(beginIndex) : "";
      String postfixToShow=packageName.replace('.',File.separatorChar);
      if (packageName.length() > 0) {
        postfixToShow=File.separatorChar + postfixToShow;
      }
      psiDirectory=DirectoryChooserUtil.selectDirectory(project,getPackageDirectories(project,rootPackage,scope),baseDir,postfixToShow);
      if (psiDirectory == null)       return null;
    }
  }
  if (psiDirectory == null) {
    if (chooseFlag == ThreeState.NO && baseDir != null) {
      VirtualFile sourceRoot=ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(baseDir.getVirtualFile());
      psiDirectory=PsiManager.getInstance(project).findDirectory(sourceRoot);
    }
 else {
      if (module != null && !checkSourceRootsConfigured(module))       return null;
      final GlobalSearchScope scope_=scope;
      List<PsiDirectory> dirs=ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(),new Function<VirtualFile,PsiDirectory>(){
        @Override public PsiDirectory fun(        VirtualFile virtualFile){
          return scope_.contains(virtualFile) ? PsiManager.getInstance(project).findDirectory(virtualFile) : null;
        }
      }
);
      psiDirectory=DirectoryChooserUtil.selectDirectory(project,dirs.toArray(new PsiDirectory[dirs.size()]),baseDir,File.separatorChar + packageName.replace('.',File.separatorChar));
      if (psiDirectory == null)       return null;
    }
  }
  String restOfName=packageName;
  boolean askedToCreate=false;
  while (restOfName.length() > 0) {
    final String name=getLeftPart(restOfName);
    PsiDirectory foundExistingDirectory=psiDirectory.findSubdirectory(name);
    if (foundExistingDirectory == null) {
      if (!askedToCreate && askUserToCreate) {
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          int toCreate=Messages.showYesNoDialog(project,IdeBundle.message("prompt.create.non.existing.package",packageName),IdeBundle.message("title.package.not.found"),Messages.getQuestionIcon());
          if (toCreate != 0) {
            return null;
          }
        }
        askedToCreate=true;
      }
      final PsiDirectory psiDirectory_=psiDirectory;
      try {
        psiDirectory=ActionRunner.runInsideWriteAction(new ActionRunner.InterruptibleRunnableWithResult<PsiDirectory>(){
          public PsiDirectory run() throws Exception {
            return psiDirectory_.createSubdirectory(name);
          }
        }
);
      }
 catch (      IncorrectOperationException e) {
        throw e;
      }
catch (      IOException e) {
        throw new IncorrectOperationException(e.toString(),e);
      }
catch (      Exception e) {
        LOG.error(e);
      }
    }
 else {
      psiDirectory=foundExistingDirectory;
    }
    restOfName=cutLeftPart(restOfName);
  }
  return psiDirectory;
}
