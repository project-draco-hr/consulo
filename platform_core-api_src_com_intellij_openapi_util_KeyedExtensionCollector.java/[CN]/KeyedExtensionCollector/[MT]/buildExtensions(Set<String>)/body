{
synchronized (lock) {
    List<T> result=null;
    for (    Map.Entry<String,List<T>> entry : myExplicitExtensions.entrySet()) {
      String key=entry.getKey();
      if (keys.contains(key)) {
        List<T> list=entry.getValue();
        if (result == null) {
          result=new ArrayList<T>(list);
        }
 else {
          result.addAll(list);
        }
      }
    }
    final ExtensionPoint<KeyedLazyInstance<T>> point=getPoint();
    if (point != null) {
      final KeyedLazyInstance<T>[] beans=point.getExtensions();
      for (      KeyedLazyInstance<T> bean : beans) {
        if (keys.contains(bean.getKey())) {
          final T instance;
          try {
            instance=bean.getInstance();
          }
 catch (          ProcessCanceledException e) {
            throw e;
          }
catch (          Exception e) {
            LOG.error(e);
            continue;
          }
catch (          LinkageError e) {
            LOG.error(e);
            continue;
          }
          if (result == null)           result=new SmartList<T>();
          result.add(instance);
        }
      }
    }
    return result == null ? Collections.<T>emptyList() : result;
  }
}
