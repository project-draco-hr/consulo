{
  Runnable loader=new Runnable(){
    public void run(){
      final Collection<SVNDirEntry> entries=new TreeSet<SVNDirEntry>();
      try {
        myRepository.getDir(myPath,-1,null,new ISVNDirEntryHandler(){
          public void handleDirEntry(          final SVNDirEntry dirEntry) throws SVNException {
            entries.add(dirEntry);
          }
        }
);
      }
 catch (      SVNException e) {
        final SVNErrorMessage err=e.getErrorMessage();
        invokeLaterTreeFilling(Collections.singletonList((TreeNode)new DefaultMutableTreeNode(err)));
        return;
      }
      final List<TreeNode> nodes=new ArrayList<TreeNode>();
      for (      final SVNDirEntry entry : entries) {
        if (!myModel.isShowFiles() && entry.getKind() != SVNNodeKind.DIR) {
          continue;
        }
        nodes.add(new RepositoryTreeNode(myModel,RepositoryTreeNode.this,myRepository,entry.getURL(),entry));
      }
      invokeLaterTreeFilling(nodes);
    }
    private void invokeLaterTreeFilling(    @NotNull final List<TreeNode> nodesToFillWith){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (myChildrenInvalidated) {
            if (myChildren != null) {
              myChildren.clear();
              myChildren.addAll(nodesToFillWith);
            }
            myModel.reload(RepositoryTreeNode.this);
            if (myAfterChildrenLoad != null) {
              myAfterChildrenLoad.onAfterReload(RepositoryTreeNode.this);
              myAfterChildrenLoad=null;
            }
            myChildrenInvalidated=false;
          }
        }
      }
);
    }
  }
;
  ApplicationManager.getApplication().executeOnPooledThread(loader);
}
