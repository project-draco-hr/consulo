{
  final MoveDestination destination=selectDestination();
  if (destination == null)   return;
  RefactoringSettings.getInstance().MOVE_PREVIEW_USAGES=isPreviewUsages();
  final RefactoringSettings refactoringSettings=RefactoringSettings.getInstance();
  final boolean searchInComments=isSearchInComments();
  final boolean searchInNonJavaFiles=isSearchInNonJavaFiles();
  refactoringSettings.MOVE_SEARCH_IN_COMMENTS=searchInComments;
  refactoringSettings.MOVE_SEARCH_IN_NONJAVA_FILES=searchInNonJavaFiles;
  PsiManager manager=PsiManager.getInstance(getProject());
  for (  final PsiElement element : myElementsToMove) {
    String message=verifyDestinationForElement(element,destination);
    if (message != null) {
      String helpId=HelpID.getMoveHelpID(myElementsToMove[0]);
      RefactoringMessageUtil.showErrorMessage("Error",message,helpId,getProject());
      return;
    }
  }
  try {
    for (    PsiElement element : myElementsToMove) {
      if (element instanceof PsiClass) {
        final PsiClass aClass=((PsiClass)element);
        PsiElement toAdd;
        if (aClass.getContainingFile() instanceof PsiJavaFile && ((PsiJavaFile)aClass.getContainingFile()).getClasses().length > 1) {
          toAdd=aClass;
        }
 else {
          toAdd=aClass.getContainingFile();
        }
        final PsiDirectory targetDirectory=destination.getTargetIfExists(element.getContainingFile());
        if (targetDirectory != null) {
          manager.checkMove(toAdd,targetDirectory);
        }
      }
    }
    invokeRefactoring(new MoveClassesOrPackagesProcessor(getProject(),myElementsToMove,destination,searchInComments,searchInNonJavaFiles,myMoveCallback));
  }
 catch (  IncorrectOperationException e) {
    String helpId=HelpID.getMoveHelpID(myElementsToMove[0]);
    RefactoringMessageUtil.showErrorMessage("Error",e.getMessage(),helpId,getProject());
    return;
  }
}
