{
  final String packageName=myWithBrowseButtonReference.getText();
  PackageWrapper targetPackage=new PackageWrapper(myManager,packageName);
  if (!targetPackage.exists()) {
    final int ret=Messages.showYesNoDialog(myProject,"Package " + packageName + " does not exist.\n"+ "Do you want to create it?","Move",Messages.getQuestionIcon());
    if (ret != 0)     return null;
  }
  if (myCbPreserveSourceFolders.isSelected()) {
    return new MultipleRootsMoveDestination(targetPackage);
  }
  final VirtualFile[] contentSourceRoots=getSourceRoots();
  if (contentSourceRoots.length == 1) {
    return new AutocreatingSingleSourceRootMoveDestination(targetPackage,contentSourceRoots[0]);
  }
  List<PsiDirectory> targetDirectories=new ArrayList<PsiDirectory>();
  Map<PsiDirectory,String> relativePathsToCreate=new HashMap<PsiDirectory,String>();
  buildDirectoryList(targetPackage,contentSourceRoots,targetDirectories,relativePathsToCreate);
  final DirectoryChooser chooser=new DirectoryChooser(myProject,new DirectoryChooserModuleTreeView(myProject));
  chooser.setTitle("Choose Destination Directory");
  chooser.fillList(targetDirectories.toArray(new PsiDirectory[targetDirectories.size()]),myInitialTargetDirectory,myProject,relativePathsToCreate);
  chooser.show();
  if (!chooser.isOK())   return null;
  final PsiDirectory selectedDirectory=chooser.getSelectedDirectory();
  final VirtualFile virt=selectedDirectory.getVirtualFile();
  final VirtualFile sourceRootForFile=ProjectRootManager.getInstance(myProject).getFileIndex().getSourceRootForFile(virt);
  LOG.assertTrue(sourceRootForFile != null);
  return new AutocreatingSingleSourceRootMoveDestination(targetPackage,sourceRootForFile);
}
