{
  setLayout(new BorderLayout());
  myToolWindow=toolWindow;
  myInfo=info;
  JPanel westPanel=new JPanel(){
    @Override public void doLayout(){
      if (getComponentCount() > 0) {
        Rectangle r=getBounds();
        Insets insets=getInsets();
        Component c=getComponent(0);
        Dimension size=c.getPreferredSize();
        if (size.width < (r.width - insets.left - insets.right)) {
          c.setBounds(insets.left,insets.top,size.width,r.height - insets.top - insets.bottom);
        }
 else {
          c.setBounds(insets.left,insets.top,r.width - insets.left - insets.right,r.height - insets.top - insets.bottom);
        }
      }
    }
  }
;
  westPanel.setOpaque(false);
  add(westPanel,BorderLayout.CENTER);
  westPanel.add(toolWindow.getContentUI().getTabComponent());
  toolWindow.getContentUI().initMouseListeners(westPanel,toolWindow.getContentUI());
  JPanel eastPanel=new JPanel();
  eastPanel.setOpaque(false);
  eastPanel.setLayout(new BoxLayout(eastPanel,BoxLayout.X_AXIS));
  eastPanel.setBorder(JBUI.Borders.empty(0,3));
  add(eastPanel,BorderLayout.EAST);
  myGearButton=new ActionButton(new AnAction(){
    @Override public void actionPerformed(    @NotNull AnActionEvent e){
      final InputEvent inputEvent=e.getInputEvent();
      final ActionPopupMenu popupMenu=((ActionManagerImpl)ActionManager.getInstance()).createActionPopupMenu(ToolWindowContentUi.POPUP_PLACE,gearProducer.produce(),new MenuItemPresentationFactory(true));
      int x=0;
      int y=0;
      if (inputEvent instanceof MouseEvent) {
        x=((MouseEvent)inputEvent).getX();
        y=((MouseEvent)inputEvent).getY();
      }
      popupMenu.getComponent().show(inputEvent.getComponent(),x,y);
    }
  }
,AllIcons.General.Gear){
    @Override protected Icon getActiveHoveredIcon(){
      return AllIcons.General.GearHover;
    }
  }
;
  myHideButton=new ActionButton(new HideAction(){
    @Override public void actionPerformed(    @NotNull AnActionEvent e){
      hideToolWindow();
    }
  }
,new HideSideAction(){
    @Override public void actionPerformed(    @NotNull AnActionEvent e){
      sideHidden();
    }
  }
,AllIcons.General.HideLeft,null,null){
    @Override protected Icon getActiveIcon(){
      return getHideToolWindowIcon(myToolWindow);
    }
    @Override protected Icon getAlternativeIcon(){
      return getHideIcon(myToolWindow);
    }
    @Override protected Icon getActiveHoveredIcon(){
      return getHideToolWindowHoveredIcon(myToolWindow);
    }
    @Override protected Icon getAlternativeHoveredIcon(){
      return getHideHoveredIcon(myToolWindow);
    }
  }
;
  addDefaultActions(eastPanel);
  myButtonPanel=eastPanel;
  westPanel.addMouseListener(new PopupHandler(){
    @Override public void invokePopup(    final Component comp,    final int x,    final int y){
      toolWindow.getContentUI().showContextMenu(comp,x,y,toolWindow.getPopupGroup(),toolWindow.getContentManager().getSelectedContent());
    }
  }
);
  westPanel.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      toolWindow.fireActivated();
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    final MouseEvent e){
      if (!e.isPopupTrigger()) {
        if (UIUtil.isCloseClick(e,MouseEvent.MOUSE_RELEASED)) {
          if (e.isAltDown()) {
            toolWindow.fireHidden();
          }
 else {
            toolWindow.fireHiddenSide();
          }
        }
 else {
          toolWindow.fireActivated();
        }
      }
    }
  }
);
  setOpaque(true);
  setBorder(JBUI.Borders.empty(TabsUtil.TABS_BORDER,1,TabsUtil.TABS_BORDER,1));
  UISettings.getInstance().addUISettingsListener(this,toolWindow.getContentUI());
  myUpdater=new ToolbarUpdater(this){
    @Override protected void updateActionsImpl(    boolean transparentOnly,    boolean forced){
      ToolWindowHeader.this.updateActionsImpl(transparentOnly,forced);
    }
    @Override protected void updateActionTooltips(){
      for (      ActionButton actionButton : JBSwingUtilities.uiTraverser().preOrderDfsTraversal(myButtonPanel).filter(ActionButton.class)) {
        actionButton.updateTooltip();
      }
    }
  }
;
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      ToolWindowManagerImpl mgr=toolWindow.getToolWindowManager();
      mgr.setMaximized(myToolWindow,!mgr.isMaximized(myToolWindow));
      return true;
    }
  }
.installOn(westPanel);
  westPanel.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    final MouseEvent e){
      Runnable runnable=new Runnable(){
        @Override public void run(){
          ToolWindowHeader.this.dispatchEvent(SwingUtilities.convertMouseEvent(e.getComponent(),e,ToolWindowHeader.this));
        }
      }
;
      SwingUtilities.invokeLater(runnable);
    }
  }
);
}
