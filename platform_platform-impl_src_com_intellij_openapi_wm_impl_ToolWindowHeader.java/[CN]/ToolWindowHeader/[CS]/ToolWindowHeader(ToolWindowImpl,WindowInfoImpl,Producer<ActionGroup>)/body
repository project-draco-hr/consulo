{
  setLayout(new BorderLayout());
  myToolWindow=toolWindow;
  myInfo=info;
  JPanel westPanel=new JPanel(){
    @Override public void doLayout(){
      if (getComponentCount() > 0) {
        Rectangle r=getBounds();
        Insets insets=getInsets();
        Component c=getComponent(0);
        Dimension size=c.getPreferredSize();
        if (size.width < (r.width - insets.left - insets.right)) {
          c.setBounds(insets.left,insets.top,r.width,r.height - insets.top - insets.bottom);
        }
 else {
          c.setBounds(insets.left,insets.top,r.width - insets.left - insets.right,r.height - insets.top - insets.bottom);
        }
      }
    }
  }
;
  westPanel.setOpaque(false);
  add(westPanel,BorderLayout.CENTER);
  westPanel.add(toolWindow.getContentUI().getTabComponent());
  JPanel eastPanel=new JPanel();
  eastPanel.setOpaque(false);
  eastPanel.setLayout(new BoxLayout(eastPanel,BoxLayout.X_AXIS));
  eastPanel.setBorder(BorderFactory.createEmptyBorder(0,3,0,3));
  add(eastPanel,BorderLayout.EAST);
  myGearButton=new ActionButton(new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      final InputEvent inputEvent=e.getInputEvent();
      final ActionPopupMenu popupMenu=((ActionManagerImpl)ActionManager.getInstance()).createActionPopupMenu(ToolWindowContentUi.POPUP_PLACE,gearProducer.produce(),new MenuItemPresentationFactory(true));
      int x=0;
      int y=0;
      if (inputEvent instanceof MouseEvent) {
        x=((MouseEvent)inputEvent).getX();
        y=((MouseEvent)inputEvent).getY();
      }
      popupMenu.getComponent().show(inputEvent.getComponent(),x,y);
    }
  }
,ourSettingsIcon);
  myHideButton=new ActionButton(new HideAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      hideToolWindow();
    }
  }
,new HideSideAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      sideHidden();
    }
  }
,ourHideLeftSideIcon,null,null){
    @Override protected Icon getActiveIcon(){
      return getHideToolWindowIcon(myToolWindow);
    }
    @Override protected Icon getAlternativeIcon(){
      return getHideIcon(myToolWindow);
    }
  }
;
  addDefaultActions(eastPanel);
  myButtonPanel=eastPanel;
  addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      toolWindow.getContentUI().showContextMenu(comp,x,y,toolWindow.getPopupGroup(),toolWindow.getContentManager().getSelectedContent());
    }
  }
);
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      if (!e.isPopupTrigger()) {
        if (UIUtil.isCloseClick(e)) {
          if (e.isAltDown()) {
            toolWindow.fireHidden();
          }
 else {
            toolWindow.fireHiddenSide();
          }
        }
 else {
          toolWindow.fireActivated();
        }
      }
    }
  }
);
  setOpaque(true);
  setBorder(BorderFactory.createEmptyBorder(TabsUtil.TABS_BORDER,1,TabsUtil.TABS_BORDER,1));
}
