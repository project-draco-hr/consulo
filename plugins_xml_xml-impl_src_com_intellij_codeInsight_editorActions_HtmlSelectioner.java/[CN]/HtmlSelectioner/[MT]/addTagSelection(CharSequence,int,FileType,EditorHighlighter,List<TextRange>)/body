{
  int start=cursorOffset;
  while (true) {
    if (start < 0)     return;
    HighlighterIterator i=highlighter.createIterator(start);
    if (i.atEnd())     return;
    while (true) {
      if (i.getTokenType() == XmlTokenType.XML_START_TAG_START)       break;
      i.retreat();
      if (i.atEnd())       return;
    }
    start=i.getStart();
    final boolean matched=BraceMatchingUtil.matchBrace(editorText,fileType,i,true);
    if (matched) {
      final int tagEnd=i.getEnd();
      result.add(new TextRange(start,tagEnd));
      HighlighterIterator j=highlighter.createIterator(start);
      while (!j.atEnd() && j.getTokenType() != XmlTokenType.XML_TAG_END)       j.advance();
      while (!i.atEnd() && i.getTokenType() != XmlTokenType.XML_END_TAG_START)       i.retreat();
      if (!i.atEnd() && !j.atEnd()) {
        result.add(new UnfairTextRange(j.getEnd(),i.getStart()));
      }
      if (!j.atEnd()) {
        result.add(new TextRange(start,j.getEnd()));
      }
      if (!i.atEnd()) {
        result.add(new TextRange(i.getStart(),tagEnd));
      }
    }
    start--;
  }
}
