{
  super.visitAssignmentExpression(expression);
  final IElementType tokenType=expression.getOperationTokenType();
  if (!JavaTokenType.EQ.equals(tokenType)) {
    return;
  }
  final PsiExpression lhs=expression.getLExpression();
  if (!(lhs instanceof PsiReferenceExpression)) {
    return;
  }
  final String type=TypeUtils.expressionHasTypeOrSubtype(lhs,CommonClassNames.JAVA_UTIL_DATE,CommonClassNames.JAVA_UTIL_CALENDAR);
  if (type == null) {
    return;
  }
  final PsiExpression rhs=expression.getRExpression();
  if (!(rhs instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiElement lhsReferent=((PsiReference)lhs).resolve();
  if (!(lhsReferent instanceof PsiField)) {
    return;
  }
  final PsiElement rhsReferent=((PsiReference)rhs).resolve();
  if (!(rhsReferent instanceof PsiParameter)) {
    return;
  }
  if (!(rhsReferent.getParent() instanceof PsiParameterList)) {
    return;
  }
  if (ignorePrivateMethods) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
    if (containingMethod == null || containingMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
  }
  registerError(lhs,type,rhs);
}
