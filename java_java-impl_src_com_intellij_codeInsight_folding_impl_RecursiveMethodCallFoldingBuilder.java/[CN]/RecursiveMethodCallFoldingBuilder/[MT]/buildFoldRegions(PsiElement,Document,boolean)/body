{
  if (!(root instanceof PsiJavaFile) || quick || !JavaCodeFoldingSettings.getInstance().isCollapseRecursiveMethodCalls()) {
    return FoldingDescriptor.EMPTY;
  }
  final List<FoldingDescriptor> result=new ArrayList<FoldingDescriptor>();
  root.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      if (isRecursiveMethodCall(expression)) {
        result.add(new FoldingDescriptor(expression,expression.getTextRange()));
      }
 else {
        super.visitMethodCallExpression(expression);
      }
    }
  }
);
  Collections.sort(result,new Comparator<FoldingDescriptor>(){
    @Override public int compare(    FoldingDescriptor o1,    FoldingDescriptor o2){
      return o2.getRange().getStartOffset() - o1.getRange().getStartOffset();
    }
  }
);
  return result.toArray(new FoldingDescriptor[result.size()]);
}
