{
  DebuggerTreeNodeImpl rootNode;
  final DebuggerContextImpl debuggerContext=getDebuggerContext();
  final ThreadReferenceProxyImpl currentThread=debuggerContext.getThreadProxy();
  if (currentThread == null) {
    return;
  }
  try {
    StackFrameProxyImpl frame=debuggerContext.getFrameProxy();
    if (frame != null) {
      NodeManagerImpl nodeManager=getNodeFactory();
      rootNode=nodeManager.createNode(nodeManager.getStackFrameDescriptor(null,frame),debuggerContext.createEvaluationContext());
    }
 else {
      rootNode=getNodeFactory().getDefaultNode();
      SuspendManager suspendManager=getSuspendContext().getDebugProcess().getSuspendManager();
      try {
        if (suspendManager.isSuspended(currentThread)) {
          try {
            if (currentThread.frameCount() == 0) {
              rootNode.add(MessageDescriptor.THREAD_IS_EMPTY);
            }
 else {
              rootNode.add(MessageDescriptor.DEBUG_INFO_UNAVAILABLE);
            }
          }
 catch (          EvaluateException e) {
            rootNode.add(new MessageDescriptor(e.getMessage()));
          }
        }
 else {
          rootNode.add(MessageDescriptor.THREAD_IS_RUNNING);
        }
      }
 catch (      ObjectCollectedException e) {
        rootNode.add(new MessageDescriptor(DebuggerBundle.message("label.thread.node.thread.collected",currentThread.name())));
      }
    }
  }
 catch (  Exception ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(ex);
    }
    rootNode=getNodeFactory().getDefaultNode();
    rootNode.add(MessageDescriptor.DEBUG_INFO_UNAVAILABLE);
  }
  final DebuggerTreeNodeImpl rootNode1=rootNode;
  DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){
    public void run(){
      getMutableModel().setRoot(rootNode1);
      treeChanged();
      final TreeModel model=getModel();
      model.addTreeModelListener(new TreeModelAdapter(){
        public void treeStructureChanged(        TreeModelEvent e){
          final Object[] path=e.getPath();
          if (path.length > 0 && path[path.length - 1] == rootNode1) {
            model.removeTreeModelListener(this);
            if (ViewsGeneralSettings.getInstance().AUTOSCROLL_TO_NEW_LOCALS) {
              autoscrollToNewLocals(rootNode1);
            }
 else {
              for (Enumeration children=rootNode1.rawChildren(); children.hasMoreElements(); ) {
                final DebuggerTreeNodeImpl child=(DebuggerTreeNodeImpl)children.nextElement();
                final NodeDescriptorImpl descriptor=child.getDescriptor();
                if (descriptor instanceof LocalVariableDescriptorImpl) {
                  ((LocalVariableDescriptorImpl)descriptor).setNewLocal(false);
                }
              }
            }
          }
        }
      }
);
    }
    private void autoscrollToNewLocals(    DebuggerTreeNodeImpl frameNode){
      final DebuggerSession debuggerSession=debuggerContext.getDebuggerSession();
      final boolean isSteppingThrough=debuggerSession != null && debuggerSession.isSteppingThrough(debuggerContext.getThreadProxy());
      final List<DebuggerTreeNodeImpl> toClear=new ArrayList<DebuggerTreeNodeImpl>();
      final List<DebuggerTreeNodeImpl> newLocalsToSelect=new ArrayList<DebuggerTreeNodeImpl>();
      for (Enumeration e=frameNode.rawChildren(); e.hasMoreElements(); ) {
        final DebuggerTreeNodeImpl child=(DebuggerTreeNodeImpl)e.nextElement();
        final NodeDescriptorImpl descriptor=child.getDescriptor();
        if (!(descriptor instanceof LocalVariableDescriptorImpl)) {
          continue;
        }
        final LocalVariableDescriptorImpl localVariableDescriptor=(LocalVariableDescriptorImpl)descriptor;
        if (isSteppingThrough && localVariableDescriptor.isNewLocal()) {
          myAnyNewLocals=true;
          newLocalsToSelect.add(child);
        }
 else {
          toClear.add(child);
        }
        localVariableDescriptor.setNewLocal(false);
      }
      if (!newLocalsToSelect.isEmpty()) {
        for (        DebuggerTreeNodeImpl child : toClear) {
          removeSelectionPath(new TreePath(child.getPath()));
          child.getDescriptor().myIsSelected=false;
        }
        for (        DebuggerTreeNodeImpl child : newLocalsToSelect) {
          addSelectionPath(new TreePath(child.getPath()));
          child.getDescriptor().myIsSelected=true;
        }
      }
    }
  }
);
}
