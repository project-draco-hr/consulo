{
  final DebuggerContextImpl debuggerContext=getDebuggerContext();
  final SourcePosition sourcePosition=debuggerContext.getSourcePosition();
  if (sourcePosition == null) {
    return;
  }
  try {
    if (!ViewsGeneralSettings.getInstance().ENABLE_AUTO_EXPRESSIONS && !myAutoWatchMode) {
      super.buildVariables(stackDescriptor,evaluationContext);
    }
 else {
      final Map<String,LocalVariableProxyImpl> visibleVariables=getVisibleVariables(stackDescriptor);
      final EvaluationContextImpl evalContext=debuggerContext.createEvaluationContext();
      final Pair<Set<String>,Set<TextWithImports>> usedVars=ApplicationManager.getApplication().runReadAction(new Computable<Pair<Set<String>,Set<TextWithImports>>>(){
        public Pair<Set<String>,Set<TextWithImports>> compute(){
          return findReferencedVars(visibleVariables.keySet(),sourcePosition,evalContext);
        }
      }
);
      if (myAutoWatchMode) {
        for (        String var : usedVars.first) {
          final LocalVariableDescriptorImpl descriptor=myNodeManager.getLocalVariableDescriptor(stackDescriptor,visibleVariables.get(var));
          myChildren.add(myNodeManager.createNode(descriptor,evaluationContext));
        }
      }
 else {
        super.buildVariables(stackDescriptor,evaluationContext);
      }
      final EvaluationContextImpl evalContextCopy=evaluationContext.createEvaluationContext(evaluationContext.getThisObject());
      evalContextCopy.setAutoLoadClasses(false);
      for (      TextWithImports text : usedVars.second) {
        myChildren.add(myNodeManager.createNode(myNodeManager.getWatchItemDescriptor(stackDescriptor,text,null),evalContextCopy));
      }
    }
  }
 catch (  EvaluateException e) {
    if (e.getCause() instanceof AbsentInformationException) {
      final StackFrameProxyImpl frame=stackDescriptor.getFrameProxy();
      if (frame == null) {
        throw e;
      }
      final Collection<Value> argValues=frame.getArgumentValues();
      int index=0;
      for (      Value argValue : argValues) {
        final ArgumentValueDescriptorImpl descriptor=myNodeManager.getArgumentValueDescriptor(stackDescriptor,index++,argValue);
        final DebuggerTreeNodeImpl variableNode=myNodeManager.createNode(descriptor,evaluationContext);
        myChildren.add(variableNode);
      }
      myChildren.add(myNodeManager.createMessageNode(MessageDescriptor.LOCAL_VARIABLES_INFO_UNAVAILABLE));
    }
 else {
      throw e;
    }
  }
}
