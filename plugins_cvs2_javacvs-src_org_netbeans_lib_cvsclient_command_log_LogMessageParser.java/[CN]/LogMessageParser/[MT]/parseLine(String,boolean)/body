{
  if (isErrorMessage)   return;
  if (processingRevision) {
    if (line.startsWith(RCS_FILE)) {
      processRcsFile(line.substring(RCS_FILE.length()));
      return;
    }
    if (line.startsWith(REVISION)) {
      processRevisionStart(line);
      return;
    }
    if (line.startsWith(DATE)) {
      processRevisionDate(line);
      return;
    }
    if (line.startsWith(BRANCHES)) {
      processBranches(line.substring(BRANCHES.length()));
    }
 else {
      if (lastLogMessageString != null) {
        appendLastLogMessageStringToTempBuffer();
      }
      lastLogMessageString=line;
    }
    return;
  }
  if (addingSymNames) {
    if (line.startsWith("\t")) {
      processSymbolicNames(line.substring(1));
      return;
    }
  }
  if (line.startsWith(REVISION)) {
    processRevisionStart(line);
    return;
  }
  if (line.startsWith(KEYWORD_SUBST)) {
    final String keywordSubstitution=line.substring(KEYWORD_SUBST.length()).trim();
    logInfo.setKeywordSubstitution(KeywordSubstitution.getValue(keywordSubstitution));
    addingSymNames=false;
    return;
  }
  if (line.startsWith(RCS_FILE)) {
    processRcsFile(line.substring(RCS_FILE.length()));
    return;
  }
  if (line.startsWith(WORKING_FILE)) {
    processWorkingFile(line.substring(WORKING_FILE.length()));
    return;
  }
  if (line.startsWith(HEAD)) {
    logInfo.setHeadRevision(line.substring(HEAD.length()).trim());
    return;
  }
  if (line.startsWith(BRANCH)) {
    logInfo.setBranch(line.substring(BRANCH.length()).trim());
    return;
  }
  if (line.startsWith(LOCKS)) {
    logInfo.setLocks(line.substring(LOCKS.length()).trim());
    return;
  }
  if (line.startsWith(ACCESS_LIST)) {
    logInfo.setAccessList(line.substring(ACCESS_LIST.length()).trim());
    return;
  }
  if (line.startsWith(SYMBOLIC_NAMES)) {
    addingSymNames=true;
    return;
  }
  if (line.startsWith(TOTAL_REVISIONS)) {
    final String separator=SELECTED_REVISIONS;
    final int semicolonIndex=line.indexOf(separator);
    if (semicolonIndex < 0) {
      logInfo.setTotalRevisions(line.substring(TOTAL_REVISIONS.length()).trim());
      logInfo.setSelectedRevisions("0");
    }
 else {
      final String totalRevisions=line.substring(0,semicolonIndex);
      final String selectedRevisions=line.substring(semicolonIndex);
      logInfo.setTotalRevisions(totalRevisions.substring(TOTAL_REVISIONS.length()).trim());
      logInfo.setSelectedRevisions(selectedRevisions.substring(SELECTED_REVISIONS.length()).trim());
    }
    return;
  }
  if (addingDescription) {
    if (!processingRevision && line.startsWith(SPLITTER)) {
      return;
    }
    if (lastLogMessageString != null) {
      appendLastLogMessageStringToTempBuffer();
    }
    lastLogMessageString=line;
    return;
  }
  if (line.startsWith(DESCRIPTION)) {
    tempBuffer=new StringBuffer(line.substring(DESCRIPTION.length()));
    addingDescription=true;
  }
}
