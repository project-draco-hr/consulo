{
  final Project project=PlatformDataKeys.PROJECT.getData(context);
  if (project == null || myCommandLine == null) {
    return null;
  }
  final CommandLineState commandLineState=new CommandLineState(runnerSettings,configurationSettings){
    protected GeneralCommandLine createCommandLine(){
      return myCommandLine;
    }
    protected OSProcessHandler startProcess() throws ExecutionException {
      return JavaCommandLineStateUtil.startProcess(createCommandLine());
    }
    public ExecutionResult execute(    @NotNull ProgramRunner runner) throws ExecutionException {
      final ExecutionResult result=super.execute(runner);
      final ProcessHandler processHandler=result.getProcessHandler();
      if (processHandler != null) {
        processHandler.addProcessListener(new ToolProcessAdapter(project,myTool.synchronizeAfterExecution(),getName()));
      }
      return result;
    }
  }
;
  TextConsoleBuilder builder=TextConsoleBuilderFactory.getInstance().createBuilder(project);
  final FilterInfo[] outputFilters=myTool.getOutputFilters();
  for (int i=0; i < outputFilters.length; i++) {
    builder.addFilter(new RegexpFilter(project,outputFilters[i].getRegExp()));
  }
  commandLineState.setConsoleBuilder(builder);
  return commandLineState;
}
