{
  hideBalloon();
  if (myDelegate != null && myCursor != null) {
    String replacementPreviewText=myDelegate.getReplacementPreviewText(myEditor,myCursor);
    if (replacementPreviewText != null) {
      ReplacementView replacementView=new ReplacementView(replacementPreviewText,myCursor);
      replacementView.setDelegate(this);
      BalloonBuilder balloonBuilder=JBPopupFactory.getInstance().createBalloonBuilder(replacementView);
      balloonBuilder.setFadeoutTime(0);
      balloonBuilder.setFillColor(IdeTooltipManager.GRAPHITE_COLOR);
      balloonBuilder.setAnimationCycle(0);
      balloonBuilder.setHideOnClickOutside(false);
      balloonBuilder.setHideOnKeyOutside(false);
      balloonBuilder.setHideOnAction(false);
      myReplacementBalloon=balloonBuilder.createBalloon();
      final int startOffset=myCursor.getPrimaryRange().getStartOffset();
      final int endOffset=myCursor.getPrimaryRange().getEndOffset();
      myReplacementBalloon.show(new PositionTracker<Balloon>(myEditor.getContentComponent()){
        @Override public RelativePoint recalculateLocation(        final Balloon object){
          Point startPoint=myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(startOffset));
          Point endPoint=myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(endOffset));
          Point point=new Point((startPoint.x + endPoint.x) / 2,startPoint.y);
          if (!insideVisibleArea(myEditor,myCursor.getPrimaryRange())) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                object.hide();
              }
            }
);
            VisibleAreaListener visibleAreaListener=new VisibleAreaListener(){
              @Override public void visibleAreaChanged(              VisibleAreaEvent e){
                if (insideVisibleArea(myEditor,myCursor.getPrimaryRange())) {
                  showReplacementPreview();
                  final VisibleAreaListener visibleAreaListener=this;
                  myEditor.getScrollingModel().removeVisibleAreaListener(visibleAreaListener);
                  myVisibleAreaListenersToRemove.remove(visibleAreaListener);
                }
              }
            }
;
            myEditor.getScrollingModel().addVisibleAreaListener(visibleAreaListener);
            myVisibleAreaListenersToRemove.add(visibleAreaListener);
          }
          return new RelativePoint(myEditor.getContentComponent(),point);
        }
      }
,Balloon.Position.above);
    }
  }
}
