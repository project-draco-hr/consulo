{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final Consumer<ApplyPatchDifferentiatedDialog> callback=new Consumer<ApplyPatchDifferentiatedDialog>(){
    public void consume(    ApplyPatchDifferentiatedDialog newDia){
      if (newDia.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
        return;
      }
      final Collection<FilePatchInProgress> included=newDia.getIncluded();
      final MultiMap<VirtualFile,FilePatchInProgress> patchGroups=new MultiMap<VirtualFile,FilePatchInProgress>();
      for (      FilePatchInProgress patchInProgress : included) {
        patchGroups.putValue(patchInProgress.getBase(),patchInProgress);
      }
      final Collection<PatchApplier> appliers=new LinkedList<PatchApplier>();
      for (      VirtualFile base : patchGroups.keySet()) {
        final PatchApplier patchApplier=new PatchApplier(project,base,ObjectsConvertor.convert(patchGroups.get(base),new Convertor<FilePatchInProgress,FilePatch>(){
          public FilePatch convert(          FilePatchInProgress o){
            return o.getPatch();
          }
        }
),newDia.getSelectedChangeList(),null);
        appliers.add(patchApplier);
      }
      PatchApplier.executePatchGroup(appliers);
    }
  }
;
  final ApplyPatchDifferentiatedDialog dialog=new ApplyPatchDifferentiatedDialog(project,callback);
  dialog.show();
}
