{
  FileDocumentManager.getInstance().saveAllDocuments();
  if (file != null) {
    final ApplyPatchDifferentiatedDialog dialog=new ApplyPatchDifferentiatedDialog(project,new ApplyPatchDefaultExecutor(project),Collections.<ApplyPatchExecutor>singletonList(new ImportToShelfExecutor(project)),ApplyPatchMode.APPLY,file);
    dialog.show();
  }
 else {
    final FileChooserDescriptor descriptor=ApplyPatchDifferentiatedDialog.createSelectPatchDescriptor();
    final VcsApplicationSettings settings=VcsApplicationSettings.getInstance();
    final VirtualFile toSelect=settings.PATCH_STORAGE_LOCATION == null ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(settings.PATCH_STORAGE_LOCATION));
    FileChooser.chooseFiles(descriptor,project,toSelect,new Consumer<List<VirtualFile>>(){
      @Override public void consume(      List<VirtualFile> files){
        if (files.size() != 1)         return;
        final VirtualFile parent=files.get(0).getParent();
        if (parent != null) {
          settings.PATCH_STORAGE_LOCATION=FileUtil.toSystemDependentName(parent.getPath());
        }
        new ApplyPatchDifferentiatedDialog(project,new ApplyPatchDefaultExecutor(project),Collections.<ApplyPatchExecutor>singletonList(new ImportToShelfExecutor(project)),ApplyPatchMode.APPLY,files.get(0)).show();
      }
    }
);
  }
}
