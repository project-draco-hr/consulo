{
  @NonNls Object obj=item.getObject();
  if (obj instanceof GroovyResolveResult) {
    obj=((GroovyResolveResult)obj).getElement();
  }
  if (obj instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)obj;
    PsiParameter[] parameters=method.getParameterList().getParameters();
    Editor editor=context.getEditor();
    Document document=editor.getDocument();
    if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) {
      handleOverwrite(editor.getCaretModel().getOffset(),document);
    }
    CaretModel caretModel=editor.getCaretModel();
    int offset=context.getStartOffset() + method.getName().length();
    PsiFile file=PsiDocumentManager.getInstance(method.getProject()).getPsiFile(document);
    PsiElement elementAt=file.findElementAt(context.getStartOffset());
    PsiElement parent=elementAt != null ? elementAt.getParent() : null;
    if (parent instanceof GrReferenceExpression && ((GrReferenceExpression)parent).getDotTokenType() == GroovyElementTypes.mMEMBER_POINTER) {
      return;
    }
    if (parent instanceof GrAnnotationNameValuePair || parent.getParent() instanceof GrAnnotationNameValuePair) {
      document.insertString(offset," = ");
      caretModel.moveToOffset(offset + 3);
      return;
    }
    if (PsiTreeUtil.getParentOfType(elementAt,GrImportStatement.class) != null)     return;
    if (parameters.length == 1) {
      final PsiType type=parameters[0].getType();
      if (type instanceof PsiClassType) {
        final PsiClass psiClass=((PsiClassType)type).resolve();
        if (psiClass != null && CLOSURE_CLASS.equals(psiClass.getQualifiedName())) {
          document.insertString(offset," {}");
          caretModel.moveToOffset(offset + 2);
          return;
        }
      }
    }
    PsiDocumentManager docManager=PsiDocumentManager.getInstance(method.getProject());
    docManager.commitDocument(document);
    PsiFile psiFile=docManager.getPsiFile(document);
    if (method.getParameterList().getParametersCount() > 0 && isExpressionStatement(psiFile,context.getStartOffset())) {
      return;
    }
    new MethodParenthesesHandler(method,true).handleInsert(context,item);
    return;
  }
  if (obj instanceof String && !"assert".equals(obj)) {
    Editor editor=context.getEditor();
    Document document=editor.getDocument();
    if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) {
      handleOverwrite(editor.getCaretModel().getOffset(),document);
    }
  }
 else   if (obj instanceof PsiClass) {
    final PsiClass clazz=(PsiClass)obj;
    Editor editor=context.getEditor();
    Document document=editor.getDocument();
    PsiFile file=PsiDocumentManager.getInstance(clazz.getProject()).getPsiFile(document);
    PsiElement elementAt=file.findElementAt(context.getStartOffset());
    CaretModel caretModel=editor.getCaretModel();
    int offset=context.getStartOffset() + elementAt.getTextLength();
    final String text=document.getText();
    final PsiElement parent=elementAt.getParent();
    if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) {
      document.insertString(offset,"()");
      final PsiMethod[] methods=ResolveUtil.getAllClassConstructors(clazz,(GroovyPsiElement)parent,PsiSubstitutor.EMPTY);
      for (      PsiMethod method : methods) {
        if (method.getParameterList().getParameters().length > 0) {
          caretModel.moveToOffset(offset + 1);
          return;
        }
      }
      caretModel.moveToOffset(offset + 2);
      return;
    }
  }
  if (context.getCompletionChar() == '=') {
    context.setAddCompletionChar(false);
    TailType.EQ.processTail(context.getEditor(),context.getTailOffset());
    return;
  }
  addTailType(item).processTail(context.getEditor(),context.getTailOffset());
}
