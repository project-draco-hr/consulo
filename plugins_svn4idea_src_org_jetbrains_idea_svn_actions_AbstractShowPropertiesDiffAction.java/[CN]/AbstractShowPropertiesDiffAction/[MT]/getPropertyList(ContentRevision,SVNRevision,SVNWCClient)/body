{
  if (contentRevision == null) {
    return "";
  }
  final StringBuilder sb=new StringBuilder();
  final List<SVNPropertyData> lines=new ArrayList<SVNPropertyData>();
  final File ioFile=contentRevision.getFile().getIOFile();
  final ISVNPropertyHandler propertyHandler=new ISVNPropertyHandler(){
    public void handleProperty(    final File path,    final SVNPropertyData property) throws SVNException {
      lines.add(property);
    }
    public void handleProperty(    final SVNURL url,    final SVNPropertyData property) throws SVNException {
      lines.add(property);
    }
    public void handleProperty(    final long revision,    final SVNPropertyData property) throws SVNException {
    }
  }
;
  if (contentRevision instanceof SvnRepositoryContentRevision) {
    final SvnRepositoryContentRevision svnRevision=(SvnRepositoryContentRevision)contentRevision;
    client.doGetProperty(SVNURL.parseURIEncoded(svnRevision.getFullPath()),null,revision,revision,SVNDepth.EMPTY,propertyHandler);
  }
 else {
    client.doGetPropertyList(ioFile,null,revision,revision,SVNDepth.EMPTY,propertyHandler,null);
  }
  Collections.sort(lines,new Comparator<SVNPropertyData>(){
    public int compare(    final SVNPropertyData o1,    final SVNPropertyData o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  for (  SVNPropertyData line : lines) {
    addPropertyPresentation(line,sb);
  }
  return sb.toString();
}
