{
  Object cachedInitializerValue=myCachedInitializerValue;
  if (cachedInitializerValue != null && !(cachedInitializerValue instanceof PsiExpression)) {
    return cachedInitializerValue;
  }
  PsiType type=getType();
  if (!(type instanceof PsiPrimitiveType) && !type.equalsToText("java.lang.String"))   return null;
  PsiExpression initializer;
  if (cachedInitializerValue != null) {
    initializer=(PsiExpression)cachedInitializerValue;
  }
 else {
    final PsiFieldStub stub=getStub();
    if (stub == null) {
      initializer=getInitializer();
      if (initializer == null)       return null;
    }
 else {
      String initializerText=getInitializerText();
      if (initializerText == null)       return null;
      if (PsiFieldStub.INITIALIZER_NOT_STORED.equals(initializerText))       return null;
      if (PsiFieldStub.INITIALIZER_TOO_LONG.equals(initializerText)) {
        getNode();
        return computeConstantValue(visitedVars);
      }
      PsiManager manager=getManager();
      final FileElement holderElement=DummyHolderFactory.createHolder(manager,this).getTreeElement();
      CompositeElement expressionElement=ExpressionParsing.parseExpressionText(manager,initializerText,0,initializerText.length(),holderElement.getCharTable());
      holderElement.rawAddChildren(expressionElement);
      initializer=(PsiExpression)SourceTreeToPsiMap.treeElementToPsi(expressionElement);
    }
  }
  Object result=PsiConstantEvaluationHelperImpl.computeCastTo(initializer,type,visitedVars);
  if (initializer instanceof PsiLiteralExpression) {
    myCachedInitializerValue=result;
  }
 else {
    myCachedInitializerValue=initializer;
  }
  return result;
}
