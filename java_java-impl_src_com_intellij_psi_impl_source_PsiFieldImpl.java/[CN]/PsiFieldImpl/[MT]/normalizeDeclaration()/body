{
  CheckUtil.checkWritable(this);
  final PsiTypeElement type=getTypeElement();
  PsiElement modifierList=getModifierList();
  ASTNode field=SourceTreeToPsiMap.psiElementToTree(type.getParent());
  while (true) {
    ASTNode comma=PsiImplUtil.skipWhitespaceAndComments(field.getTreeNext());
    if (comma == null || comma.getElementType() != JavaTokenType.COMMA)     break;
    ASTNode nextField=PsiImplUtil.skipWhitespaceAndComments(comma.getTreeNext());
    if (nextField == null || nextField.getElementType() != JavaElementType.FIELD)     break;
    TreeElement semicolon=Factory.createSingleLeafElement(JavaTokenType.SEMICOLON,";",0,1,null,getManager());
    CodeEditUtil.addChild(field,semicolon,null);
    CodeEditUtil.removeChild(comma.getTreeParent(),comma);
    PsiElement typeClone=type.copy();
    CodeEditUtil.addChild(nextField,SourceTreeToPsiMap.psiElementToTree(typeClone),nextField.getFirstChildNode());
    PsiElement modifierListClone=modifierList.copy();
    CodeEditUtil.addChild(nextField,SourceTreeToPsiMap.psiElementToTree(modifierListClone),nextField.getFirstChildNode());
    field=nextField;
  }
  JavaSharedImplUtil.normalizeBrackets(this);
}
