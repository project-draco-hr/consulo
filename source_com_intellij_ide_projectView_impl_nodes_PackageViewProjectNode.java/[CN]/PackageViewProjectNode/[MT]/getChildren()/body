{
  if (getSettings().isShowModules()) {
    final Module[] modules=ModuleManager.getInstance(getProject()).getModules();
    return modulesAndGroups(modules);
  }
 else {
    final List<VirtualFile> sourceRoots=new ArrayList<VirtualFile>();
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(myProject);
    sourceRoots.addAll(Arrays.asList(projectRootManager.getContentSourceRoots()));
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    final List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
    final Set<PsiPackage> topLevelPackages=new HashSet<PsiPackage>();
    final ProjectFileIndex projectFileIndex=projectRootManager.getFileIndex();
    for (Iterator<VirtualFile> it=sourceRoots.iterator(); it.hasNext(); ) {
      final VirtualFile root=it.next();
      final PsiDirectory directory=psiManager.findDirectory(root);
      if (directory == null) {
        continue;
      }
      final PsiPackage directoryPackage=directory.getPackage();
      if (directoryPackage == null || PackageUtil.isPackageDefault(directoryPackage)) {
        final PsiDirectory[] subdirectories=directory.getSubdirectories();
        for (int i=0; i < subdirectories.length; i++) {
          final PsiPackage aPackage=subdirectories[i].getPackage();
          if (aPackage != null && !PackageUtil.isPackageDefault(aPackage)) {
            topLevelPackages.add(aPackage);
          }
        }
        children.addAll(PackageUtil.getDirectoryChildren(directory,getSettings(),false));
      }
 else {
        topLevelPackages.add(directoryPackage);
      }
    }
    for (Iterator<PsiPackage> it=topLevelPackages.iterator(); it.hasNext(); ) {
      PackageUtil.addPackageAsChild(children,it.next(),null,getSettings(),false);
    }
    if (getSettings().isShowLibraryContents()) {
      children.add(new PackageViewLibrariesNode(getProject(),null,getSettings()));
    }
    return children;
  }
}
