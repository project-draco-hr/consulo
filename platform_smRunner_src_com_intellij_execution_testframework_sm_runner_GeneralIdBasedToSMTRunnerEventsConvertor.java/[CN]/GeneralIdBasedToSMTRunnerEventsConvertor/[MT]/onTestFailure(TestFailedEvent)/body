{
  addToInvokeLater(new Runnable(){
    @Override public void run(){
      Node node=findNodeToTerminate(testFailedEvent);
      if (node == null) {
        return;
      }
      SMTestProxy testProxy=node.getProxy();
      String comparisonFailureActualText=testFailedEvent.getComparisonFailureActualText();
      String comparisonFailureExpectedText=testFailedEvent.getComparisonFailureExpectedText();
      String failureMessage=testFailedEvent.getLocalizedFailureMessage();
      String stackTrace=testFailedEvent.getStacktrace();
      if (comparisonFailureActualText != null && comparisonFailureExpectedText != null) {
        testProxy.setTestComparisonFailed(failureMessage,stackTrace,comparisonFailureActualText,comparisonFailureExpectedText,testFailedEvent.getFilePath());
      }
 else       if (comparisonFailureActualText == null && comparisonFailureExpectedText == null) {
        testProxy.setTestFailed(failureMessage,stackTrace,testFailedEvent.isTestError());
      }
 else {
        logProblem("Comparison failure actual and expected texts should be both null or not null.\n" + "Expected:\n" + comparisonFailureExpectedText + "\n"+ "Actual:\n"+ comparisonFailureActualText);
      }
      long duration=testFailedEvent.getDurationMillis();
      if (duration >= 0) {
        testProxy.setDuration(duration);
      }
      fireOnTestFailed(testProxy);
      terminateNode(node,State.FAILED);
    }
  }
);
}
