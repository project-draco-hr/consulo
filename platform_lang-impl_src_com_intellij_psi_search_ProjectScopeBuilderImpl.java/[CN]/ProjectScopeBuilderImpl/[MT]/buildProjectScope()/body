{
  final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(myProject);
  if (projectRootManager == null) {
    return new EverythingGlobalScope(myProject){
      public boolean isSearchInLibraries(){
        return false;
      }
    }
;
  }
 else {
    return new GlobalSearchScope(myProject){
      private final ProjectFileIndex myFileIndex=projectRootManager.getFileIndex();
      public boolean contains(      VirtualFile file){
        if (file instanceof VirtualFileWindow)         return true;
        if (myFileIndex.isInLibraryClasses(file) && !myFileIndex.isInSourceContent(file))         return false;
        return myFileIndex.isInContent(file);
      }
      public int compare(      VirtualFile file1,      VirtualFile file2){
        return 0;
      }
      public boolean isSearchInModuleContent(      @NotNull Module aModule){
        return true;
      }
      public boolean isSearchInLibraries(){
        return false;
      }
      public String getDisplayName(){
        return PsiBundle.message("psi.search.scope.project");
      }
      public String toString(){
        return getDisplayName();
      }
      @Override public GlobalSearchScope uniteWith(      @NotNull GlobalSearchScope scope){
        if (scope == this || !scope.isSearchInLibraries() || !scope.isSearchOutsideRootModel())         return this;
        return super.uniteWith(scope);
      }
      @NotNull @Override public GlobalSearchScope intersectWith(      @NotNull GlobalSearchScope scope){
        if (scope == this)         return this;
        if (!scope.isSearchInLibraries())         return scope;
        return super.intersectWith(scope);
      }
    }
;
  }
}
