{
  PsiElement element=file.findElementAt(offset);
  if (element == null)   return null;
  PsiElement e=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiClass.class);
  if (e instanceof PsiClass) {
    PsiClass aClass=(PsiClass)e;
    List<PsiClass> allSupers=new ArrayList<PsiClass>(Arrays.asList(aClass.getSupers()));
    for (Iterator<PsiClass> iterator=allSupers.iterator(); iterator.hasNext(); ) {
      PsiClass superClass=iterator.next();
      if ("java.lang.Object".equals(superClass.getQualifiedName()))       iterator.remove();
    }
    return allSupers.toArray(new PsiClass[allSupers.size()]);
  }
 else   if (e instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)e;
    if (method.isConstructor()) {
      PsiMethod constructorInSuper=PsiSuperMethodUtil.findConstructorInSuper(method);
      if (constructorInSuper != null) {
        return new PsiElement[]{constructorInSuper};
      }
    }
 else {
      return PsiSuperMethodUtil.findSuperMethods(method,false);
    }
  }
  return null;
}
