{
  myProject=project;
  myFileEditorManager=fileEditorManager;
  myToolWindowUpdateQueue=new MergingUpdateQueue("android.layout.preview",300,true,null,project);
  myRenderingQueue=new MergingUpdateQueue("android.layout.rendering",300,true,null,project,null,false);
  final MessageBusConnection connection=project.getMessageBus().connect(project);
  connection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new MyFileEditorManagerListener());
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new MyAndroidPlatformListener());
  LocalFileSystem.getInstance().addVirtualFileListener(myListener);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      LocalFileSystem.getInstance().removeVirtualFileListener(myListener);
    }
  }
);
  PsiManager.getInstance(project).addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    public void childrenChanged(    PsiTreeChangeEvent event){
      update(event);
    }
    public void childRemoved(    PsiTreeChangeEvent event){
      update(event);
    }
    public void childAdded(    PsiTreeChangeEvent event){
      update(event);
    }
    public void childReplaced(    PsiTreeChangeEvent event){
      update(event);
    }
  }
,project);
  CompilerManager.getInstance(project).addAfterTask(new CompileTask(){
    @Override public boolean execute(    CompileContext context){
      if (myToolWindowForm != null && myToolWindowReady && !myToolWindowDisposed) {
        render();
      }
      return true;
    }
  }
);
}
