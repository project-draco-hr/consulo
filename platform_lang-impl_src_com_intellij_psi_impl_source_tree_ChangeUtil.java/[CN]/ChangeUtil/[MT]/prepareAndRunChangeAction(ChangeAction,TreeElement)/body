{
  final FileElement changedFile=TreeUtil.getFileElement(changedElement);
  final PsiManager manager=changedFile.getManager();
  final PomModel model=PomManager.getModel(manager.getProject());
  try {
    final TreeAspect treeAspect=model.getModelAspect(TreeAspect.class);
    model.runTransaction(new PomTransactionBase(changedElement.getPsi(),treeAspect){
      public PomModelEvent runInner(){
        final PomModelEvent event=new PomModelEvent(model);
        final TreeChangeEvent destinationTreeChange=new TreeChangeEventImpl(treeAspect,changedFile);
        event.registerChangeSet(treeAspect,destinationTreeChange);
        final PsiManagerEx psiManager=(PsiManagerEx)manager;
        final PsiFile file=(PsiFile)changedFile.getPsi();
        action.makeChange(destinationTreeChange);
        psiManager.invalidateFile(file);
        TreeUtil.clearCaches(changedElement);
        if (changedElement instanceof CompositeElement) {
          ((CompositeElement)changedElement).subtreeChanged();
        }
        return event;
      }
    }
);
  }
 catch (  IncorrectOperationException ioe) {
    LOG.error(ioe);
  }
}
