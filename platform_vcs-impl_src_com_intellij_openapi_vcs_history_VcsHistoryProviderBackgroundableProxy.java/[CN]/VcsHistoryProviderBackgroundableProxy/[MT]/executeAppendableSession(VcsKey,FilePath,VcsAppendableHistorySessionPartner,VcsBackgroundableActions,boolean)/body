{
  if (myCachesHistory && canUseCache) {
    final VcsAbstractHistorySession session=myVcsHistoryCache.getFull(filePath,vcsKey,(VcsCacheableHistorySessionFactory<Serializable,VcsAbstractHistorySession>)myDelegate);
    if (session != null) {
      partner.reportCreatedEmptySession(session);
      partner.finished();
      partner.forceRefresh();
      return;
    }
  }
  final ProjectLevelVcsManagerImpl vcsManager=(ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(myProject);
  final VcsBackgroundableActions resultingActionKey=actionKey == null ? VcsBackgroundableActions.CREATE_HISTORY_SESSION : actionKey;
  final BackgroundableActionEnabledHandler handler;
  handler=vcsManager.getBackgroundableActionHandler(resultingActionKey);
  if (handler.isInProgress(resultingActionKey))   return;
  handler.register(resultingActionKey);
  final VcsAppendableHistorySessionPartner cachedPartner;
  if (myCachesHistory) {
    cachedPartner=new HistoryPartnerProxy(partner,new Consumer<VcsAbstractHistorySession>(){
      @Override public void consume(      VcsAbstractHistorySession session){
        if (session == null)         return;
        final FilePath correctedPath=((VcsCacheableHistorySessionFactory<Serializable,VcsAbstractHistorySession>)myDelegate).getUsedFilePath(session);
        myVcsHistoryCache.put(filePath,correctedPath,vcsKey,(VcsAbstractHistorySession)session.copy(),(VcsCacheableHistorySessionFactory<Serializable,VcsAbstractHistorySession>)myDelegate,true);
      }
    }
);
  }
 else {
    cachedPartner=partner;
  }
  reportHistory(filePath,vcsKey,resultingActionKey,handler,cachedPartner);
}
