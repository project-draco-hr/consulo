{
  VcsFileRevision firstSelectedRevision=getFirstSelectedRevision();
  if (PlatformDataKeys.NAVIGATABLE.is(dataId)) {
    List selectedItems=getSelection();
    if (selectedItems.size() != 1)     return null;
    if (!myHistorySession.isContentAvailable(firstSelectedRevision)) {
      return null;
    }
    VirtualFile virtualFileForRevision=createVirtualFileForRevision(firstSelectedRevision);
    if (virtualFileForRevision != null) {
      return new OpenFileDescriptor(myVcs.getProject(),virtualFileForRevision);
    }
 else {
      return null;
    }
  }
 else   if (PlatformDataKeys.PROJECT.is(dataId)) {
    return myVcs.getProject();
  }
 else   if (VcsDataKeys.VCS_FILE_REVISION.is(dataId)) {
    return firstSelectedRevision;
  }
 else   if (VcsDataKeys.VCS.is(dataId)) {
    return myVcs.getKeyInstanceMethod();
  }
 else   if (VcsDataKeys.VCS_FILE_REVISIONS.is(dataId)) {
    return getSelectedRevisions();
  }
 else   if (VcsDataKeys.CHANGES.is(dataId)) {
    return getChanges();
  }
 else   if (VcsDataKeys.VCS_VIRTUAL_FILE.is(dataId)) {
    if (firstSelectedRevision == null)     return null;
    return createVirtualFileForRevision(firstSelectedRevision);
  }
 else   if (VcsDataKeys.FILE_PATH.is(dataId)) {
    return myFilePath;
  }
 else   if (VcsDataKeys.IO_FILE.is(dataId)) {
    return myFilePath.getIOFile();
  }
 else   if (PlatformDataKeys.VIRTUAL_FILE.is(dataId)) {
    if (getVirtualFile() == null)     return null;
    if (getVirtualFile().isValid()) {
      return getVirtualFile();
    }
 else {
      return null;
    }
  }
 else   if (VcsDataKeys.FILE_HISTORY_PANEL.is(dataId)) {
    return this;
  }
 else {
    return super.getData(dataId);
  }
}
