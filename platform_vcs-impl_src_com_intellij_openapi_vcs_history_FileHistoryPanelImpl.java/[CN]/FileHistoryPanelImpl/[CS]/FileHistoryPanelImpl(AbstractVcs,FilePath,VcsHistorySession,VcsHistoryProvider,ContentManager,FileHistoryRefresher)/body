{
  super(contentManager,provider.getHelpId() != null ? provider.getHelpId() : "reference.versionControl.toolwindow.history");
  myVcs=vcs;
  myProvider=provider;
  myAnnotationProvider=myVcs.getCachingAnnotationProvider();
  myRefresher=refresher;
  myHistorySession=session;
  myFilePath=filePath;
  final DualViewColumnInfo[] columns=createColumnList(myVcs.getProject(),provider,session);
  myComments=new JEditorPane(UIUtil.HTML_MIME,"");
  myComments.setPreferredSize(new Dimension(150,100));
  myComments.setEditable(false);
  myComments.setBackground(UIUtil.getComboBoxDisabledBackground());
  myComments.addHyperlinkListener(new BrowserHyperlinkListener());
  replaceTransferable();
  myUpdateAlarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
  final HistoryAsTreeProvider treeHistoryProvider=myHistorySession.getHistoryAsTreeProvider();
  @NonNls String storageKey="FileHistory." + provider.getClass().getName();
  if (treeHistoryProvider != null) {
    myDualView=new DualView(new TreeNodeOnVcsRevision(null,treeHistoryProvider.createTreeOn(myHistorySession.getRevisionList())),columns,storageKey,myVcs.getProject());
  }
 else {
    myDualView=new DualView(new TreeNodeOnVcsRevision(null,wrapWithTreeElements(myHistorySession.getRevisionList())),columns,storageKey,myVcs.getProject());
    myDualView.switchToTheFlatMode();
  }
  final TableLinkMouseListener listener=new TableLinkMouseListener();
  listener.install(myDualView.getFlatView());
  listener.install(myDualView.getTreeView());
  createDualView();
  myPopupActions=createPopupActions();
  myHistoryPanelRefresh=new AsynchConsumer<VcsHistorySession>(){
    public void finished(){
      myInRefresh=false;
      myTargetSelection=null;
      mySplitter.revalidate();
      mySplitter.repaint();
    }
    public void consume(    VcsHistorySession vcsHistorySession){
      FileHistoryPanelImpl.this.refresh(vcsHistorySession);
    }
  }
;
  myUpdateAlarm.addRequest(new Runnable(){
    public void run(){
      if (myVcs.getProject().isDisposed()) {
        return;
      }
      final boolean refresh=(!myInRefresh) && myHistorySession.shouldBeRefreshed();
      myUpdateAlarm.cancelAllRequests();
      if (myUpdateAlarm.isDisposed())       return;
      myUpdateAlarm.addRequest(this,20000);
      if (refresh) {
        refreshImpl();
      }
    }
  }
,20000);
  init();
  chooseView();
}
