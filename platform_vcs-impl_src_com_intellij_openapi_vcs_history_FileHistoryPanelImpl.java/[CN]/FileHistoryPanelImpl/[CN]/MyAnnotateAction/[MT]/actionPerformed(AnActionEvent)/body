{
  final VcsFileRevision revision=e.getData(VcsDataKeys.VCS_FILE_REVISION);
  final VirtualFile revisionVirtualFile=e.getData(VcsDataKeys.VCS_VIRTUAL_FILE);
  final Boolean nonLocal=e.getData(VcsDataKeys.VCS_NON_LOCAL_HISTORY_SESSION);
  if ((revision == null) || (revisionVirtualFile == null) || Boolean.TRUE.equals(nonLocal))   return;
  final BackgroundableActionEnabledHandler handler=((ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(myVcs.getProject())).getBackgroundableActionHandler(VcsBackgroundableActions.ANNOTATE);
  handler.register(key(revisionVirtualFile));
  final Ref<FileAnnotation> fileAnnotationRef=new Ref<FileAnnotation>();
  final Ref<VcsException> exceptionRef=new Ref<VcsException>();
  ProgressManager.getInstance().run(new Task.Backgroundable(myVcs.getProject(),VcsBundle.message("retrieving.annotations"),true,BackgroundFromStartOption.getInstance()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        fileAnnotationRef.set(myAnnotationProvider.annotate(revisionVirtualFile,revision));
      }
 catch (      VcsException e) {
        exceptionRef.set(e);
      }
    }
    @RequiredDispatchThread @Override public void onCancel(){
      onSuccess();
    }
    @RequiredDispatchThread @Override public void onSuccess(){
      handler.completed(key(revisionVirtualFile));
      if (!exceptionRef.isNull()) {
        AbstractVcsHelper.getInstance(myProject).showError(exceptionRef.get(),VcsBundle.message("operation.name.annotate"));
      }
      if (fileAnnotationRef.isNull())       return;
      AbstractVcsHelper.getInstance(myProject).showAnnotation(fileAnnotationRef.get(),revisionVirtualFile,myVcs);
    }
  }
);
}
