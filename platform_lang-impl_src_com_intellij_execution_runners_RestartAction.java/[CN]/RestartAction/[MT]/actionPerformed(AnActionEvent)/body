{
  final DataContext dataContext=e.getDataContext();
  final RunManagerConfig config=RunManagerImpl.getInstanceImpl(myEnvironment.getProject()).getConfig();
  if (myProcessHandler != null && !myProcessHandler.isProcessTerminated() && config.isRestartRequiresConfirmation()) {
    DialogWrapper.DoNotAskOption option=new DialogWrapper.DoNotAskOption(){
      @Override public boolean isToBeShown(){
        return config.isRestartRequiresConfirmation();
      }
      @Override public void setToBeShown(      boolean value,      int exitCode){
        config.setRestartRequiresConfirmation(value);
      }
      @Override public boolean canBeHidden(){
        return true;
      }
      @Override public boolean shouldSaveOptionsOnCancel(){
        return false;
      }
      @Override public String getDoNotShowMessage(){
        return CommonBundle.message("dialog.options.do.not.show");
      }
    }
;
    if (Messages.OK != Messages.showOkCancelDialog(ExecutionBundle.message("rerun.confirmation.message",myEnvironment.getRunProfile().getName()),ExecutionBundle.message("rerun.confirmation.title"),CommonBundle.message("button.ok"),CommonBundle.message("button.cancel"),Messages.getQuestionIcon(),option)) {
      return;
    }
  }
  ActionManager.getInstance().getAction(IdeActions.ACTION_STOP_PROGRAM).actionPerformed(e);
  update(e);
  if (myProcessHandler != null) {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        if (myProcessHandler == null || myProcessHandler.isProcessTerminated()) {
          doRestart(dataContext);
        }
 else {
          awaitingTerminationAlarm.addRequest(this,100);
        }
      }
    }
;
    awaitingTerminationAlarm.addRequest(runnable,100);
  }
 else {
    doRestart(dataContext);
  }
}
