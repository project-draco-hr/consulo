{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (DaemonListeners.isUnderIgnoredAction(null) || myProject.isDisposed())   return;
  List<Pair<PsiElement,Boolean>> toUpdate=changedElements.get(document);
  if (toUpdate == null) {
    if (UpdateHighlightersUtil.isWhitespaceOptimizationAllowed(document))     return;
    PsiElement file=PsiDocumentManager.getInstance(myProject).getCachedPsiFile(document);
    if (file == null)     return;
    toUpdate=Collections.singletonList(Pair.create(file,true));
  }
  Application application=ApplicationManager.getApplication();
  final Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
  if (editor != null && !application.isUnitTestMode()) {
    application.invokeLater(new Runnable(){
      @Override public void run(){
        if (!editor.isDisposed()) {
          EditorMarkupModel markupModel=(EditorMarkupModel)editor.getMarkupModel();
          PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
          TrafficLightRenderer.setOrRefreshErrorStripeRenderer(markupModel,myProject,editor.getDocument(),file);
        }
      }
    }
,ModalityState.stateForComponent(editor.getComponent()),myProject.getDisposed());
  }
  for (  Pair<PsiElement,Boolean> changedElement : toUpdate) {
    PsiElement element=changedElement.getFirst();
    Boolean whiteSpaceOptimizationAllowed=changedElement.getSecond();
    updateByChange(element,document,whiteSpaceOptimizationAllowed);
  }
  changedElements.remove(document);
}
