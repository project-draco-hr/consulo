{
  final Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
  Application application=ApplicationManager.getApplication();
  if (editor != null && !application.isUnitTestMode()) {
    application.invokeLater(new Runnable(){
      public void run(){
        if (myProject.isDisposed())         return;
        EditorMarkupModel markupModel=(EditorMarkupModel)editor.getMarkupModel();
        markupModel.setErrorStripeRenderer(markupModel.getErrorStripeRenderer());
      }
    }
,ModalityState.stateForComponent(editor.getComponent()));
  }
  PsiFile file;
  try {
    file=child.getContainingFile();
  }
 catch (  PsiInvalidElementAccessException e) {
    myFileStatusMap.markAllFilesDirty();
    return;
  }
  if (file == null || file instanceof PsiCompiledElement) {
    myFileStatusMap.markAllFilesDirty();
    return;
  }
  int fileLength=file.getTextLength();
  if (!file.getViewProvider().isPhysical()) {
    myFileStatusMap.markFileScopeDirty(document,new TextRange(0,fileLength),fileLength);
    return;
  }
  if (whitespaceOptimizationAllowed && UpdateHighlightersUtil.isWhitespaceOptimizationAllowed(document)) {
    if (child instanceof PsiWhiteSpace || child instanceof PsiComment && !child.getText().contains(SuppressionUtil.SUPPRESS_INSPECTIONS_TAG_NAME)) {
      myFileStatusMap.markFileScopeDirty(document,child.getTextRange(),fileLength);
      return;
    }
  }
  PsiElement element=child;
  while (true) {
    if (element instanceof PsiFile || element instanceof PsiDirectory) {
      myFileStatusMap.markAllFilesDirty();
      return;
    }
    final PsiElement scope=getChangeHighlightingScope(element);
    if (scope != null) {
      myFileStatusMap.markFileScopeDirty(document,scope.getTextRange(),fileLength);
      return;
    }
    element=element.getParent();
  }
}
