{
  myProject=project;
  myFileStatusMap=fileStatusMap;
  editorFactory.getEventMulticaster().addDocumentListener(new DocumentAdapter(){
    @Override public void beforeDocumentChange(    DocumentEvent e){
      final Document document=e.getDocument();
      if (documentManager.getSynchronizer().isInSynchronization(document))       return;
      if (documentManager.getCachedPsiFile(document) == null)       return;
      if (document.getUserData(UPDATE_ON_COMMIT_ENGAGED) == null) {
        document.putUserData(UPDATE_ON_COMMIT_ENGAGED,Boolean.TRUE);
        PsiDocumentManagerBase.addRunOnCommit(document,new Runnable(){
          @Override public void run(){
            if (document.getUserData(UPDATE_ON_COMMIT_ENGAGED) != null) {
              updateChangesForDocument(document);
              document.putUserData(UPDATE_ON_COMMIT_ENGAGED,null);
            }
          }
        }
);
      }
    }
  }
,this);
  connection.subscribe(PsiDocumentTransactionListener.TOPIC,new PsiDocumentTransactionListener(){
    @Override public void transactionStarted(    @NotNull final Document doc,    @NotNull final PsiFile file){
    }
    @Override public void transactionCompleted(    @NotNull final Document document,    @NotNull final PsiFile file){
      updateChangesForDocument(document);
      document.putUserData(UPDATE_ON_COMMIT_ENGAGED,null);
    }
  }
);
}
