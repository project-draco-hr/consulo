{
  super.visitAssignmentExpression(assignment);
  final PsiElement assignmentParent=assignment.getParent();
  if (!(assignmentParent instanceof PsiExpressionStatement)) {
    return;
  }
  final PsiExpression lhs=assignment.getLExpression();
  if (!(lhs instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)lhs;
  final PsiElement referent=reference.resolve();
  if (!(referent instanceof PsiLocalVariable)) {
    return;
  }
  final PsiVariable variable=(PsiVariable)referent;
  if (variable.getInitializer() == null) {
    return;
  }
  final PsiJavaToken sign=assignment.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!JavaTokenType.EQ.equals(tokenType)) {
    return;
  }
  final PsiExpression rhs=assignment.getRExpression();
  if (rhs != null && VariableAccessUtils.variableIsUsed(variable,rhs)) {
    return;
  }
  final PsiCodeBlock variableBlock=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  if (variableBlock == null) {
    return;
  }
  if (loopExistsBetween(assignment,variableBlock)) {
    return;
  }
  if (tryExistsBetween(assignment,variableBlock)) {
    return;
  }
  final PsiElement assignmentBlock=assignmentParent.getParent();
  if (assignmentBlock == null) {
    return;
  }
  if (variableBlock.equals(assignmentBlock)) {
    registerError(lhs);
  }
  final PsiStatement[] statements=variableBlock.getStatements();
  final PsiElement containingStatement=getChildWhichContainsElement(variableBlock,assignment);
  int statementPosition=-1;
  for (int i=0; i < statements.length; i++) {
    if (statements[i].equals(containingStatement)) {
      statementPosition=i;
      break;
    }
  }
  if (statementPosition == -1) {
    return;
  }
  for (int i=statementPosition + 1; i < statements.length; i++) {
    if (VariableAccessUtils.variableIsUsed(variable,statements[i])) {
      return;
    }
  }
  registerError(lhs);
}
