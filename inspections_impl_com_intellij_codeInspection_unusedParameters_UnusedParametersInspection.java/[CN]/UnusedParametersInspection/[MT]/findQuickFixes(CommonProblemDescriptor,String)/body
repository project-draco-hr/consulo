{
  return new IntentionAction(){
    @NotNull public String getText(){
      return QUICK_FIX_NAME;
    }
    @NotNull public String getFamilyName(){
      return getText();
    }
    public boolean isAvailable(    Project project,    Editor editor,    PsiFile file){
      return true;
    }
    public void invoke(    Project project,    Editor editor,    PsiFile file) throws IncorrectOperationException {
      if (hint == null)       return;
      if (descriptor instanceof ProblemDescriptor) {
        int idx;
        try {
          idx=Integer.parseInt(hint);
        }
 catch (        NumberFormatException e) {
          return;
        }
        final PsiMethod psiMethod=PsiTreeUtil.getParentOfType(((ProblemDescriptor)descriptor).getPsiElement(),PsiMethod.class);
        if (psiMethod != null) {
          final PsiParameter parameter=psiMethod.getParameterList().getParameters()[idx];
          if (descriptor.getDescriptionTemplate().indexOf(parameter.getName()) == -1)           return;
          final ArrayList<PsiElement> parametersToDelete=new ArrayList<PsiElement>();
          parametersToDelete.add(parameter);
          removeUnusedParameterViaChangeSignature(psiMethod,parametersToDelete);
        }
      }
    }
    public boolean startInWriteAction(){
      return true;
    }
  }
;
}
