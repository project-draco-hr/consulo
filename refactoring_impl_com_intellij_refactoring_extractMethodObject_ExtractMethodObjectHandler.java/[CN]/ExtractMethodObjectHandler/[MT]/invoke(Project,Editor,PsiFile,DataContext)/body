{
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  if (!editor.getSelectionModel().hasSelection()) {
    editor.getSelectionModel().selectLineAtCaret();
  }
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement[] elements;
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
  }
  final ExtractMethodObjectProcessor processor=new ExtractMethodObjectProcessor(project,editor,elements,"");
  final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor=processor.getExtractProcessor();
  try {
    if (!extractProcessor.prepare())     return;
  }
 catch (  PrepareFailedException e) {
    CommonRefactoringUtil.showErrorMessage(ExtractMethodObjectProcessor.REFACTORING_NAME,e.getMessage(),HelpID.EXTRACT_METHOD_OBJECT,project);
    ExtractMethodHandler.highlightPrepareError(e,file,editor,project);
    return;
  }
  if (extractProcessor.showDialog()) {
    new WriteCommandAction(project,ExtractMethodObjectProcessor.REFACTORING_NAME,ExtractMethodObjectProcessor.REFACTORING_NAME){
      protected void run(      final Result result) throws Throwable {
        extractProcessor.doRefactoring();
        processor.run();
      }
    }
.execute();
    if (processor.isCreateInnerClass()) {
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          DuplicatesImpl.processDuplicates(extractProcessor,project,editor);
        }
      }
,ExtractMethodObjectProcessor.REFACTORING_NAME,ExtractMethodObjectProcessor.REFACTORING_NAME);
    }
    new WriteCommandAction(project,ExtractMethodObjectProcessor.REFACTORING_NAME,ExtractMethodObjectProcessor.REFACTORING_NAME){
      protected void run(      final Result result) throws Throwable {
        processor.getMethod().delete();
      }
    }
.execute();
  }
}
