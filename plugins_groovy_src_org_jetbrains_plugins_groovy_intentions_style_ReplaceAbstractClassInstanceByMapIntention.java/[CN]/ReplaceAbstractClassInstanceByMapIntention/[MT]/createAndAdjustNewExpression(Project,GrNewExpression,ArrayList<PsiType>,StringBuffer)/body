{
  final PsiFile file=newExpression.getContainingFile();
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
  final GrExpression expr=factory.createExpressionFromText(buffer.toString());
  final GrExpression safeTypeExpr=newExpression.replaceWithExpression(expr,false);
  if (file instanceof GroovyFileBase) {
    final GroovyFileBase fileBase=(GroovyFileBase)file;
    final List<GrCodeReferenceElement> unresolved=new ArrayList<GrCodeReferenceElement>();
    safeTypeExpr.accept(new GroovyElementVisitor(){
      public void visitElement(      final GroovyPsiElement element){
        for (        PsiElement psiElement : element.getChildren()) {
          if (psiElement instanceof GroovyPsiElement) {
            ((GroovyPsiElement)psiElement).accept(this);
          }
        }
      }
      @Override public void visitCodeReferenceElement(      final GrCodeReferenceElement refElement){
        final String name=refElement.getReferenceName();
        if (refElement.getQualifier() == null && refElement.resolve() == null && name != null) {
          unresolved.add(refElement);
        }
      }
    }
);
    for (    PsiType type : typesToImport) {
      if (type instanceof PsiClassType) {
        final PsiClass clazz=((PsiClassType)type).resolve();
        for (        GrCodeReferenceElement element : unresolved) {
          if (clazz != null && clazz.getName() != null && clazz.getName().equals(element.getReferenceName())) {
            fileBase.addImportForClass(clazz);
          }
        }
      }
    }
  }
}
