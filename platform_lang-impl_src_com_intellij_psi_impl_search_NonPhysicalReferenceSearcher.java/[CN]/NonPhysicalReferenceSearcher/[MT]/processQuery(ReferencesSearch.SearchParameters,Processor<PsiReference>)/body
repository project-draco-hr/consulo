{
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  final SearchScope scope=queryParameters.getScope();
  final PsiElement element=queryParameters.getElementToSearch();
  final PsiFile containingFile=element.getContainingFile();
  final boolean isPhysical=containingFile == null || containingFile.getViewProvider().isPhysical();
  if (isPhysical && !(scope instanceof GlobalSearchScope))   return;
  final LocalSearchScope currentScope;
  if (scope instanceof LocalSearchScope) {
    if (queryParameters.isIgnoreAccessScope())     return;
    currentScope=(LocalSearchScope)scope;
  }
 else {
    currentScope=null;
  }
  Project project=element.getProject();
  if (!project.isInitialized())   return;
  PsiManager psiManager=PsiManager.getInstance(project);
  for (  VirtualFile virtualFile : FileEditorManager.getInstance(project).getOpenFiles()) {
    if (virtualFile.getFileType().isBinary())     continue;
    PsiFile file=psiManager.findFile(virtualFile);
    if (file != null && !file.getViewProvider().isPhysical() && !(file instanceof PsiCodeFragment)) {
      final LocalSearchScope newScope=new LocalSearchScope(file);
      final LocalSearchScope searchScope=currentScope == null ? newScope : newScope.intersectWith(currentScope);
      ReferencesSearch.searchOptimized(element,searchScope,true,queryParameters.getOptimizer(),consumer);
    }
  }
}
