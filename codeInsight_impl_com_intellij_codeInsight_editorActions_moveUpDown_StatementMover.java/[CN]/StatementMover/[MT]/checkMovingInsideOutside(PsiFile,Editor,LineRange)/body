{
  final int offset=editor.getCaretModel().getOffset();
  PsiElement elementAtOffset=file.getViewProvider().findElementAt(offset,StdLanguages.JAVA);
  if (elementAtOffset == null)   return false;
  PsiElement guard=elementAtOffset;
  do {
    guard=PsiTreeUtil.getParentOfType(guard,PsiMethod.class,PsiClassInitializer.class,PsiClass.class,PsiComment.class);
  }
 while (guard instanceof PsiAnonymousClass);
  PsiElement brace=itIsTheClosingCurlyBraceWeAreMoving(file,editor);
  if (brace != null) {
    int line=editor.getDocument().getLineNumber(offset);
    toMove=new LineRange(line,line + 1);
    toMove.firstElement=toMove.lastElement=brace;
  }
  if (!calcInsertOffset(file,editor,toMove))   return false;
  int insertOffset=isDown ? getLineStartSafeOffset(editor.getDocument(),toMove2.endLine) : editor.getDocument().getLineStartOffset(toMove2.startLine);
  PsiElement elementAtInsertOffset=file.getViewProvider().findElementAt(insertOffset,StdLanguages.JAVA);
  PsiElement newGuard=elementAtInsertOffset;
  do {
    newGuard=PsiTreeUtil.getParentOfType(newGuard,PsiMethod.class,PsiClassInitializer.class,PsiClass.class,PsiComment.class);
  }
 while (newGuard instanceof PsiAnonymousClass);
  if (brace != null && PsiTreeUtil.getParentOfType(brace,PsiCodeBlock.class,false,true) != PsiTreeUtil.getParentOfType(elementAtInsertOffset,PsiCodeBlock.class,false,true)) {
    indentSource=true;
  }
  if (newGuard == guard && isInside(insertOffset,newGuard) == isInside(offset,guard))   return true;
  if (guard instanceof PsiClass && guard.getParent() instanceof PsiClass)   return true;
  if (newGuard instanceof PsiClass && newGuard.getParent() instanceof PsiClass)   return true;
  return false;
}
