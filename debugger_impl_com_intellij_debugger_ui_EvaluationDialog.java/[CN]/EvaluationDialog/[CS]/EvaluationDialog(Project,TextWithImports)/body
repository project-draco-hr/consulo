{
  super(project,true);
  myProject=project;
  setModal(false);
  setCancelButtonText(DebuggerBundle.message("button.close.no.mnemonic"));
  setOKButtonText(DebuggerBundle.message("button.evaluate"));
  myEvaluationPanel=new MyEvaluationPanel(myProject);
  myCbFactories=new ComboBox(new MyComboBoxModel(),150);
  myCbFactories.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final JLabel component=(JLabel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      component.setText(((CodeFragmentFactory)value).getFileType().getLanguage().getID());
      return component;
    }
  }
);
  myCbFactories.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      myEditor.setFactory((CodeFragmentFactory)myCbFactories.getSelectedItem());
      myEditor.revalidate();
    }
  }
);
  CodeFragmentFactory factory=(CodeFragmentFactory)myCbFactories.getSelectedItem();
  if (factory == null)   factory=DefaultCodeFragmentFactory.getInstance();
  myEditor=createEditor(factory);
  setDebuggerContext(getDebuggerContext());
  initDialogData(text);
  myContextListener=new DebuggerContextListener(){
    public void changeEvent(    DebuggerContextImpl newContext,    int event){
      boolean close=true;
      for (      DebuggerSession session : DebuggerManagerEx.getInstanceEx(myProject).getSessions()) {
        if (!session.isStopped()) {
          close=false;
          break;
        }
      }
      if (close) {
        close(CANCEL_EXIT_CODE);
      }
 else {
        setDebuggerContext(newContext);
      }
    }
  }
;
  DebuggerManagerEx.getInstanceEx(myProject).getContextManager().addListener(myContextListener);
  setHorizontalStretch(1f);
  setVerticalStretch(1f);
}
