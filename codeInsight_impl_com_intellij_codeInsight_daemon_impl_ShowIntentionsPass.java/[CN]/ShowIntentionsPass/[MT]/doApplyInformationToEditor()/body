{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (!myEditor.getContentComponent().hasFocus())   return;
  HighlightInfo[] visibleHighlights=getVisibleHighlights(myStartOffset,myEndOffset);
  if (visibleHighlights == null)   return;
  PsiElement[] elements=new PsiElement[visibleHighlights.length];
  for (int i=0; i < visibleHighlights.length; i++) {
    ProgressManager.getInstance().checkCanceled();
    HighlightInfo highlight=visibleHighlights[i];
    final PsiElement elementAt=myFile.findElementAt(highlight.startOffset);
    if (elementAt == null || !elementAt.isValid()) {
      LOG.assertTrue(false,"Invalid element: " + elementAt);
    }
    elements[i]=elementAt;
  }
  int caretOffset=myEditor.getCaretModel().getOffset();
  for (int i=visibleHighlights.length - 1; i >= 0; i--) {
    HighlightInfo info=visibleHighlights[i];
    if (elements[i] == null)     continue;
    if (info.startOffset <= caretOffset) {
      if (showAddImportHint(info,elements[i]))       return;
    }
  }
  for (int i=0; i < visibleHighlights.length; i++) {
    HighlightInfo info=visibleHighlights[i];
    if (elements[i] == null)     continue;
    if (info.startOffset > caretOffset) {
      if (showAddImportHint(info,elements[i]))       return;
    }
  }
  if (!(myFile instanceof PsiCodeFragment)) {
    TemplateState state=TemplateManagerImpl.getTemplateState(myEditor);
    if (state == null || state.isFinished()) {
      showIntentionActions();
    }
  }
}
