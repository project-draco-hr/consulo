{
  DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject);
  if (myIsSecondPass)   codeAnalyzer.setShowPostIntentions(true);
  if (LookupManager.getInstance(myProject).getActiveLookup() != null)   return;
  LogicalPosition caretPos=myEditor.getCaretModel().getLogicalPosition();
  Rectangle visibleArea=myEditor.getScrollingModel().getVisibleArea();
  Point xy=myEditor.logicalPositionToXY(caretPos);
  if (!visibleArea.contains(xy))   return;
  ArrayList<HighlightInfo.IntentionActionDescriptor> intentionsToShow=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  ArrayList<HighlightInfo.IntentionActionDescriptor> fixesToShow=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  for (  IntentionAction action : myIntentionActions) {
    if (action instanceof IntentionActionComposite) {
      if (action instanceof QuickFixAction || action instanceof PostIntentionsQuickFixAction && codeAnalyzer.showPostIntentions()) {
        List<HighlightInfo.IntentionActionDescriptor> availableActions=((IntentionActionComposite)action).getAvailableActions(myEditor,myFile);
        int offset=myEditor.getCaretModel().getOffset();
        HighlightInfo info=codeAnalyzer.findHighlightByOffset(myEditor.getDocument(),offset,true);
        if (info == null || info.getSeverity() == HighlightSeverity.ERROR) {
          fixesToShow.addAll(availableActions);
        }
 else {
          intentionsToShow.addAll(availableActions);
        }
      }
    }
 else     if (action.isAvailable(myProject,myEditor,myFile)) {
      List<IntentionAction> enableDisableIntentionAction=new ArrayList<IntentionAction>();
      enableDisableIntentionAction.add(new IntentionHintComponent.EnableDisableIntentionAction(action));
      intentionsToShow.add(new HighlightInfo.IntentionActionDescriptor(action,enableDisableIntentionAction,null));
    }
  }
  if (!intentionsToShow.isEmpty() || !fixesToShow.isEmpty()) {
    boolean showBulb=false;
    for (    HighlightInfo.IntentionActionDescriptor action : fixesToShow) {
      if (IntentionManagerSettings.getInstance().isShowLightBulb(action.getAction())) {
        showBulb=true;
        break;
      }
    }
    if (!showBulb) {
      for (      HighlightInfo.IntentionActionDescriptor action : intentionsToShow) {
        if (IntentionManagerSettings.getInstance().isShowLightBulb(action.getAction())) {
          showBulb=true;
          break;
        }
      }
    }
    if (showBulb) {
      if (myIsSecondPass) {
        IntentionHintComponent hintComponent=codeAnalyzer.getLastIntentionHint();
        if (hintComponent != null) {
          hintComponent.updateIfNotShowingPopup(fixesToShow,intentionsToShow);
        }
      }
      if (!HintManager.getInstance().hasShownHintsThatWillHideByOtherHint()) {
        IntentionHintComponent hintComponent=IntentionHintComponent.showIntentionHint(myProject,myEditor,intentionsToShow,fixesToShow,false);
        if (!myIsSecondPass) {
          codeAnalyzer.setLastIntentionHint(hintComponent);
        }
      }
    }
  }
}
