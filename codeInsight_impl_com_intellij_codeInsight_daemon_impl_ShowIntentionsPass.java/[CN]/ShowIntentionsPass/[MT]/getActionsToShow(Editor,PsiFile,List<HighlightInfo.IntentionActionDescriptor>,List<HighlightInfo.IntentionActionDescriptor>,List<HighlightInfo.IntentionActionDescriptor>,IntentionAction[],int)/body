{
  final PsiElement psiElement=psiFile.findElementAt(editor.getCaretModel().getOffset());
  LOG.assertTrue(psiElement == null || psiElement.isValid(),psiElement);
  int offset=editor.getCaretModel().getOffset();
  Project project=psiFile.getProject();
  final DaemonCodeAnalyzer codeAnalyzer=DaemonCodeAnalyzer.getInstance(project);
  HighlightInfo infoAtCursor=((DaemonCodeAnalyzerImpl)codeAnalyzer).findHighlightByOffset(editor.getDocument(),offset,true);
  for (  final IntentionAction action : allIntentionActions) {
    if (action instanceof PsiElementBaseIntentionAction) {
      final PsiElementBaseIntentionAction psiElementBaseIntention=(PsiElementBaseIntentionAction)action;
      if (psiElementBaseIntention.isAvailable(project,editor,psiElement) || psiElementBaseIntention.isAvailable(project,editor,psiFile)) {
        List<IntentionAction> enableDisableIntentionAction=new ArrayList<IntentionAction>();
        enableDisableIntentionAction.add(new IntentionHintComponent.EnableDisableIntentionAction(action));
        intentionsToShow.add(new HighlightInfo.IntentionActionDescriptor(action,enableDisableIntentionAction,null));
      }
    }
  }
  QuickFixAction quickFixAction=new QuickFixAction();
  List<HighlightInfo.IntentionActionDescriptor> actions=quickFixAction.getAvailableActions(editor,psiFile,passIdToShowIntentionsFor);
  if (infoAtCursor == null || infoAtCursor.getSeverity() == HighlightSeverity.ERROR) {
    errorFixesToShow.addAll(actions);
  }
 else {
    inspectionFixesToShow.addAll(actions);
  }
}
