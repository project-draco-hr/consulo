{
  if (method == null || isArrayClone(method,element)) {
    return PsiClassType.EMPTY_ARRAY;
  }
  final PsiReferenceList throwsList=method.getThrowsList();
  if (throwsList == null) {
    return PsiClassType.EMPTY_ARRAY;
  }
  final PsiClassType[] referencedTypes=throwsList.getReferencedTypes();
  if (referencedTypes != null && referencedTypes.length != 0) {
    List<PsiClassType> result=new ArrayList<PsiClassType>();
    for (int i=0; i < referencedTypes.length; i++) {
      PsiClassType referencedType=referencedTypes[i];
      final PsiType type=substitutor.substitute(referencedType);
      if (!(type instanceof PsiClassType))       continue;
      PsiClassType classType=(PsiClassType)type;
      PsiClass exceptionClass=((PsiClassType)type).resolve();
      if (exceptionClass == null)       continue;
      if (isUncheckedException(classType))       continue;
      if (isHandled(element,classType,topElement))       continue;
      result.add((PsiClassType)type);
    }
    return result.toArray(new PsiClassType[result.size()]);
  }
  return PsiClassType.EMPTY_ARRAY;
}
