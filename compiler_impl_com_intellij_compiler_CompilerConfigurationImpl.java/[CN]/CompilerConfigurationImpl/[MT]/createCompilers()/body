{
  JAVAC_EXTERNAL_BACKEND=new JavacCompiler(myProject);
  myRegisteredCompilers.add(JAVAC_EXTERNAL_BACKEND);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    final BackendCompiler JIKES_BACKEND=new JikesCompiler(myProject);
    myRegisteredCompilers.add(JIKES_BACKEND);
    if (EclipseCompiler.isInitialized()) {
      final EclipseCompiler eclipse=new EclipseCompiler(myProject);
      myRegisteredCompilers.add(eclipse);
    }
    if (ApplicationManagerEx.getApplicationEx().isInternal()) {
      try {
        final EclipseEmbeddedCompiler eclipseEmbedded=new EclipseEmbeddedCompiler(myProject);
        myRegisteredCompilers.add(eclipseEmbedded);
      }
 catch (      NoClassDefFoundError e) {
      }
    }
    if (ApplicationManagerEx.getApplicationEx().isInternal()) {
      try {
        myInprocessJavaCompiler=new CompilerAPICompiler(myProject);
        myRegisteredCompilers.add(myInprocessJavaCompiler);
      }
 catch (      NoClassDefFoundError e) {
      }
    }
  }
  myDefaultJavaCompiler=JAVAC_EXTERNAL_BACKEND;
  for (  BackendCompiler compiler : myRegisteredCompilers) {
    if (compiler.getId().equals(DEFAULT_COMPILER)) {
      myDefaultJavaCompiler=compiler;
      break;
    }
  }
  DEFAULT_COMPILER=myDefaultJavaCompiler.getId();
}
