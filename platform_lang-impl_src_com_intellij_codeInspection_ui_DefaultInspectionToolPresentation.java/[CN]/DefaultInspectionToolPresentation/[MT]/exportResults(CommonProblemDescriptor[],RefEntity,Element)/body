{
  for (  CommonProblemDescriptor descriptor : descriptors) {
    @NonNls final String template=descriptor.getDescriptionTemplate();
    int line=descriptor instanceof ProblemDescriptor ? ((ProblemDescriptor)descriptor).getLineNumber() : -1;
    final PsiElement psiElement=descriptor instanceof ProblemDescriptor ? ((ProblemDescriptor)descriptor).getPsiElement() : null;
    @NonNls String problemText=StringUtil.replace(StringUtil.replace(template,"#ref",psiElement != null ? ProblemDescriptorUtil.extractHighlightedText(descriptor,psiElement) : "")," #loc "," ");
    Element element=refEntity.getRefManager().export(refEntity,parentNode,line);
    if (element == null)     return;
    @NonNls Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
    problemClassElement.addContent(myToolWrapper.getDisplayName());
    if (refEntity instanceof RefElement) {
      final RefElement refElement=(RefElement)refEntity;
      final HighlightSeverity severity=getSeverity(refElement,getContext(),getToolWrapper());
      ProblemHighlightType problemHighlightType=descriptor instanceof ProblemDescriptor ? ((ProblemDescriptor)descriptor).getHighlightType() : ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
      final String attributeKey=getTextAttributeKey(refElement.getRefManager().getProject(),severity,problemHighlightType);
      problemClassElement.setAttribute("severity",severity.myName);
      problemClassElement.setAttribute("attribute_key",attributeKey);
    }
    element.addContent(problemClassElement);
    if (myToolWrapper instanceof GlobalInspectionToolWrapper) {
      final GlobalInspectionTool globalInspectionTool=((GlobalInspectionToolWrapper)myToolWrapper).getTool();
      final QuickFix[] fixes=descriptor.getFixes();
      if (fixes != null) {
        @NonNls Element hintsElement=new Element("hints");
        for (        QuickFix fix : fixes) {
          final String hint=globalInspectionTool.getHint(fix);
          if (hint != null) {
            @NonNls Element hintElement=new Element("hint");
            hintElement.setAttribute("value",hint);
            hintsElement.addContent(hintElement);
          }
        }
        element.addContent(hintsElement);
      }
    }
    try {
      Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
      descriptionElement.addContent(problemText);
      element.addContent(descriptionElement);
    }
 catch (    IllegalDataException e) {
      System.out.println("Cannot save results for " + refEntity.getName() + ", inspection which caused problem: "+ myToolWrapper.getShortName());
    }
  }
}
