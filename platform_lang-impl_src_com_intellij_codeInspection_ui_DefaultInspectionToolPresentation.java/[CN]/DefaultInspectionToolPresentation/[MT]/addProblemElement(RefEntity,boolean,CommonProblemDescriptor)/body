{
  if (refElement == null)   return;
  if (descriptors.length == 0)   return;
  if (filterSuppressed) {
    if (ourOutputPath == null || !(myToolWrapper instanceof LocalInspectionToolWrapper)) {
synchronized (lock) {
        Map<RefEntity,CommonProblemDescriptor[]> problemElements=getProblemElements();
        CommonProblemDescriptor[] problems=problemElements.get(refElement);
        problems=problems == null ? descriptors : ArrayUtil.mergeArrays(problems,descriptors,CommonProblemDescriptor.ARRAY_FACTORY);
        problemElements.put(refElement,problems);
      }
      for (      CommonProblemDescriptor description : descriptors) {
        getProblemToElements().put(description,refElement);
        collectQuickFixes(description.getFixes(),refElement);
      }
    }
 else {
      writeOutput(descriptors,refElement);
    }
  }
 else {
    for (    CommonProblemDescriptor descriptor : descriptors) {
      getProblemToElements().put(descriptor,refElement);
    }
  }
  final GlobalInspectionContextImpl context=getContext();
  if (myToolWrapper instanceof LocalInspectionToolWrapper) {
    final InspectionResultsView view=context.getView();
    if (view == null || !(refElement instanceof RefElement)) {
      return;
    }
    InspectionNode toolNode=myToolNode;
    if (toolNode == null) {
      final HighlightSeverity currentSeverity=getSeverity((RefElement)refElement);
      view.addTool(myToolWrapper,HighlightDisplayLevel.find(currentSeverity),context.getUIOptions().GROUP_BY_SEVERITY);
    }
 else     if (toolNode.isTooBigForOnlineRefresh()) {
      return;
    }
    final Map<RefEntity,CommonProblemDescriptor[]> problems=new HashMap<RefEntity,CommonProblemDescriptor[]>();
    problems.put(refElement,descriptors);
    final Map<String,Set<RefEntity>> contents=new HashMap<String,Set<RefEntity>>();
    final String groupName=refElement.getRefManager().getGroupName((RefElement)refElement);
    Set<RefEntity> content=contents.get(groupName);
    if (content == null) {
      content=new HashSet<RefEntity>();
      contents.put(groupName,content);
    }
    content.add(refElement);
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        if (!isDisposed()) {
          view.getProvider().appendToolNodeContent(context,myToolNode,(InspectionTreeNode)myToolNode.getParent(),context.getUIOptions().SHOW_STRUCTURE,contents,problems,(DefaultTreeModel)view.getTree().getModel());
          context.addView(view);
        }
      }
    }
);
  }
}
