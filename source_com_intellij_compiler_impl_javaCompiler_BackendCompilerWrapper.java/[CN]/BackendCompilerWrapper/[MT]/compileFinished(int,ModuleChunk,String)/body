{
  if (exitValue != 0 && !myCompileContext.getProgressIndicator().isCanceled() && myCompileContext.getMessageCount(CompilerMessageCategory.ERROR) == 0) {
    myCompileContext.addMessage(CompilerMessageCategory.ERROR,"Compiler internal error. Process terminated with exit code " + exitValue,null,-1,-1);
  }
  myCompiler.processTerminated();
  final VirtualFile[] sourceRoots=chunk.getSourceRoots();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final Set<VirtualFile> compiledWithErrors=getFilesCompiledWithErrors();
      final FileTypeManager typeManager=FileTypeManager.getInstance();
      final String outputDirPath=outputDir.replace(File.separatorChar,'/');
      if (LOG.isDebugEnabled()) {
        LOG.debug("myFileNameToSourceMap contains entries: " + myFileNameToSourceMap.size());
      }
      for (int idx=0; idx < sourceRoots.length; idx++) {
        final VirtualFile root=sourceRoots[idx];
        final String packagePrefix=myProjectFileIndex.getPackageNameByDirectory(root);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Building output items for " + root.getPresentableUrl() + "; output dir = "+ outputDirPath+ "; packagePrefix = \""+ packagePrefix+ "\"");
        }
        buildOutputItemsList(outputDirPath,root,typeManager,compiledWithErrors,root,packagePrefix);
      }
    }
  }
);
  CompilerUtil.refreshIOFiles(myFilesToRefresh.toArray(new File[myFilesToRefresh.size()]));
  myFileNameToSourceMap.clear();
  myFilesToRefresh.clear();
}
