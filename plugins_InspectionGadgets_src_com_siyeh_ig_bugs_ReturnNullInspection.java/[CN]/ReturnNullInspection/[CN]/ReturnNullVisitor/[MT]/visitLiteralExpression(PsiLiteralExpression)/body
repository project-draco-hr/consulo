{
  super.visitLiteralExpression(value);
  final String text=value.getText();
  if (!PsiKeyword.NULL.equals(text)) {
    return;
  }
  PsiElement parent=value.getParent();
  while (parent != null && (parent instanceof PsiParenthesizedExpression || parent instanceof PsiConditionalExpression || parent instanceof PsiTypeCastExpression)) {
    parent=parent.getParent();
  }
  if (parent == null || !(parent instanceof PsiReturnStatement)) {
    return;
  }
  final PsiMethod method=PsiTreeUtil.getParentOfType(value,PsiMethod.class);
  if (method == null) {
    return;
  }
  final PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return;
  }
  final boolean isArray=returnType.getArrayDimensions() > 0;
  if (AnnotationUtil.isAnnotated(method,AnnotationUtil.NULLABLE,false)) {
    return;
  }
  if (m_reportArrayMethods && isArray) {
    registerError(value);
  }
  if (m_reportObjectMethods && !isArray) {
    registerError(value);
  }
}
