{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argList=expression.getArgumentList();
  if (argList == null) {
    return;
  }
  final PsiExpression[] args=argList.getExpressions();
  if (args.length == 0) {
    return;
  }
  final PsiExpression firstArg=args[0];
  final PsiType type=firstArg.getType();
  if (type == null) {
    return;
  }
  final int formatArgPosition;
  if ("java.util.Locale".equals(type.getCanonicalText()) && args.length > 1) {
    formatArgPosition=1;
  }
 else {
    formatArgPosition=0;
  }
  final PsiExpression formatArg=args[formatArgPosition];
  if (!TypeUtils.expressionHasType("java.lang.String",formatArg)) {
    return;
  }
  if (!PsiUtil.isConstantExpression(formatArg)) {
    return;
  }
  final PsiType formatType=formatArg.getType();
  final String value=(String)ConstantExpressionUtil.computeCastTo(formatArg,formatType);
  if (value == null) {
    return;
  }
  if (!callTakesFormatString(expression)) {
    return;
  }
  final Validator[] validators;
  try {
    validators=FormatDecode.decode(value);
  }
 catch (  Exception ignore) {
    registerError(formatArg);
    return;
  }
  if (validators.length != args.length - (formatArgPosition + 1)) {
    registerError(formatArg);
    return;
  }
  for (int i=0; i < validators.length; i++) {
    final Validator validator=validators[i];
    final PsiType argType=args[i + formatArgPosition + 1].getType();
    if (!validator.valid(argType)) {
      registerError(formatArg);
      return;
    }
  }
}
