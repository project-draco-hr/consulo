{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression firstArgument=arguments[0];
  final PsiType type=firstArgument.getType();
  if (type == null) {
    return;
  }
  final int formatArgPosition;
  if ("java.util.Locale".equals(type.getCanonicalText()) && arguments.length > 1) {
    formatArgPosition=1;
  }
 else {
    formatArgPosition=0;
  }
  final PsiExpression formatArgument=arguments[formatArgPosition];
  if (!TypeUtils.expressionHasType(formatArgument,CommonClassNames.JAVA_LANG_STRING)) {
    return;
  }
  if (!PsiUtil.isConstantExpression(formatArgument)) {
    return;
  }
  final PsiType formatType=formatArgument.getType();
  final String value=(String)ConstantExpressionUtil.computeCastTo(formatArgument,formatType);
  if (value == null) {
    return;
  }
  if (!callTakesFormatString(expression)) {
    return;
  }
  final int argumentCount=arguments.length - (formatArgPosition + 1);
  final Validator[] validators;
  try {
    validators=FormatDecode.decode(value,argumentCount);
  }
 catch (  Exception e) {
    registerError(formatArgument,e);
    return;
  }
  if (validators.length != argumentCount) {
    if (argumentCount == 1) {
      final PsiExpression argument=arguments[formatArgPosition + 1];
      final PsiType argumentType=argument.getType();
      if (argumentType instanceof PsiArrayType) {
        return;
      }
    }
    registerError(formatArgument,validators,Integer.valueOf(argumentCount));
    return;
  }
  for (int i=0; i < validators.length; i++) {
    final Validator validator=validators[i];
    final PsiType argType=arguments[i + formatArgPosition + 1].getType();
    if (!validator.valid(argType)) {
      registerError(formatArgument,validators,Integer.valueOf(argumentCount));
      return;
    }
  }
}
