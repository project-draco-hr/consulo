{
  Project project=element.getProject();
  PsiFile file=element.getContainingFile();
  if (file == null) {
    LOG.assertTrue(false,"Invalid element: " + element);
  }
  if (!file.isPhysical())   file=file.getOriginalFile();
  if (file == null)   return Collections.emptyList();
  if (myOptions != null) {
    final Function<PsiFile,PsiFileSystemItem> value=DEFAULT_PATH_EVALUATOR_OPTION.getValue(myOptions);
    if (value != null) {
      final PsiFileSystemItem result=value.fun(file);
      return result == null ? Collections.<PsiFileSystemItem>emptyList() : Collections.singleton(result);
    }
  }
  PsiFileSystemItem result=null;
  if (isAbsolutePathReference()) {
    return ContainerUtil.createMaybeSingletonList(getAbsoluteTopLevelDirLocation(file));
  }
  if (myUseIncludingJspFileAsContext) {
    JspFile jspFile=PsiUtil.getJspFile(file);
    if (jspFile != null) {
      final JspContextManager manager=JspContextManager.getInstance(project);
      JspFile contextFile=manager.getContextFile(jspFile);
      Set<JspFile> visited=new HashSet<JspFile>();
      while (contextFile != null && !visited.contains(jspFile)) {
        visited.add(jspFile);
        jspFile=contextFile;
        contextFile=manager.getContextFile(jspFile);
      }
      file=jspFile;
    }
  }
  final List<FileReferenceHelper> helpers=FileReferenceHelperRegistrar.getHelpers();
  for (  final FileReferenceHelper helper : helpers) {
    final PsiFileSystemItem item=helper.getContainingDirectory(file);
    if (item != null) {
      result=item;
      break;
    }
  }
  return result == null ? Collections.<PsiFileSystemItem>emptyList() : Collections.singleton(result);
}
