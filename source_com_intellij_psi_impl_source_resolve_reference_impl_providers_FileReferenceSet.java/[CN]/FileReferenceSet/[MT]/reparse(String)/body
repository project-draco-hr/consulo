{
  final List<FileReference> referencesList=new ArrayList<FileReference>();
  int currentSlash=-1;
  while (currentSlash + 1 < str.length() && Character.isWhitespace(str.charAt(currentSlash + 1)))   currentSlash++;
  if (currentSlash + 1 < str.length() && str.charAt(currentSlash + 1) == SEPARATOR)   currentSlash++;
  int index=0;
  if (str.equals(SEPARATOR_STRING)) {
    final FileReference fileReference=createFileReference(new TextRange(myStartInElement,myStartInElement + 1),index++,SEPARATOR_STRING);
    referencesList.add(fileReference);
  }
  while (true) {
    final int nextSlash=str.indexOf(SEPARATOR,currentSlash + 1);
    final String subreferenceText=nextSlash > 0 ? str.substring(currentSlash + 1,nextSlash) : str.substring(currentSlash + 1);
    if (subreferenceText.length() > 0 || index == 0 || myAllowEmptyFileReferenceAtEnd) {
      final FileReference currentContextRef=createFileReference(new TextRange(myStartInElement + currentSlash + 1,myStartInElement + (nextSlash > 0 ? nextSlash : str.length())),index++,subreferenceText);
      referencesList.add(currentContextRef);
    }
    if ((currentSlash=nextSlash) < 0) {
      break;
    }
  }
  setReferences(referencesList.toArray(new FileReference[referencesList.size()]));
}
