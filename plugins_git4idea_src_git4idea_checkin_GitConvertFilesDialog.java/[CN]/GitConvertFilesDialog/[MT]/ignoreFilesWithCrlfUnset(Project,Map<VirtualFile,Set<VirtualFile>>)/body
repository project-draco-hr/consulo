{
  for (  final Map.Entry<VirtualFile,Set<VirtualFile>> e : files.entrySet()) {
    final VirtualFile r=e.getKey();
    GitSimpleHandler h=new GitSimpleHandler(project,r,GitHandler.CHECK_ATTR);
    h.addParameters("--stdin","-z","crlf");
    h.setSilent(true);
    h.setNoSSH(true);
    final HashMap<String,VirtualFile> filesToCheck=new HashMap<String,VirtualFile>();
    Set<VirtualFile> fileSet=e.getValue();
    for (    VirtualFile file : fileSet) {
      filesToCheck.put(GitUtil.relativePath(r,file),file);
    }
    h.setInputProcessor(new Processor<OutputStream>(){
      public boolean process(      OutputStream outputStream){
        try {
          OutputStreamWriter out=new OutputStreamWriter(outputStream,GitUtil.UTF8_CHARSET);
          try {
            for (            String file : filesToCheck.keySet()) {
              out.write(file);
              out.write("\u0000");
            }
          }
  finally {
            out.close();
          }
        }
 catch (        IOException ex) {
          try {
            outputStream.close();
          }
 catch (          IOException ioe) {
          }
        }
        return true;
      }
    }
);
    StringScanner output=new StringScanner(h.run());
    String unsetIndicator=": crlf unset";
    while (output.hasMoreData()) {
      String l=output.line();
      if (l.endsWith(unsetIndicator)) {
        fileSet.remove(filesToCheck.get(GitUtil.unescapePath(l.substring(0,l.length() - unsetIndicator.length()))));
      }
    }
  }
}
