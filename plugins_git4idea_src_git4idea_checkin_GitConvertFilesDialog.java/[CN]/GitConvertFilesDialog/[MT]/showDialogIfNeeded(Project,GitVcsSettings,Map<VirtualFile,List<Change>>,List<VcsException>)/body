{
  try {
    if (settings.LINE_SEPARATORS_CONVERSION_ASK || settings.LINE_SEPARATORS_CONVERSION == GitVcsSettings.ConversionPolicy.PROJECT_LINE_SEPARATORS) {
      LocalFileSystem lfs=LocalFileSystem.getInstance();
      final String nl=CodeStyleFacade.getInstance(project).getLineSeparator();
      final Map<VirtualFile,Set<VirtualFile>> files=new HashMap<VirtualFile,Set<VirtualFile>>();
      for (      Map.Entry<VirtualFile,List<Change>> entry : sortedChanges.entrySet()) {
        final VirtualFile root=entry.getKey();
        final Set<VirtualFile> added=new HashSet<VirtualFile>();
        for (        Change change : entry.getValue()) {
switch (change.getType()) {
case NEW:
case MODIFICATION:
case MOVED:
            VirtualFile f=lfs.findFileByPath(change.getAfterRevision().getFile().getPath());
          if (f != null && !f.getFileType().isBinary() && !nl.equals(LoadTextUtil.detectLineSeparator(f,false))) {
            added.add(f);
          }
        break;
case DELETED:
    }
  }
  if (!added.isEmpty()) {
    files.put(root,added);
  }
}
ignoreFilesWithCrlfUnset(project,files);
for (Iterator<Map.Entry<VirtualFile,Set<VirtualFile>>> i=files.entrySet().iterator(); i.hasNext(); ) {
  Map.Entry<VirtualFile,Set<VirtualFile>> e=i.next();
  Set<VirtualFile> fs=e.getValue();
  for (Iterator<VirtualFile> j=fs.iterator(); j.hasNext(); ) {
    VirtualFile f=j.next();
    if (nl.equals(LoadTextUtil.detectLineSeparator(f,true))) {
      j.remove();
    }
  }
  if (fs.isEmpty()) {
    i.remove();
  }
}
if (files.isEmpty()) {
  return true;
}
final Ref<VirtualFile[]> selectedFiles=new Ref<VirtualFile[]>();
UIUtil.invokeAndWaitIfNeeded(new Runnable(){
  public void run(){
    GitConvertFilesDialog d=new GitConvertFilesDialog(project,files);
    d.show();
    if (d.isOK()) {
      settings.LINE_SEPARATORS_CONVERSION_ASK=d.myDoNotShowCheckBox.isSelected();
      settings.LINE_SEPARATORS_CONVERSION=GitVcsSettings.ConversionPolicy.PROJECT_LINE_SEPARATORS;
      selectedFiles.set(d.myFilesToConvert.getCheckedNodes(VirtualFile.class,null));
    }
 else     if (d.getExitCode() == DO_NOT_CONVERT) {
      settings.LINE_SEPARATORS_CONVERSION_ASK=d.myDoNotShowCheckBox.isSelected();
      settings.LINE_SEPARATORS_CONVERSION=GitVcsSettings.ConversionPolicy.NONE;
    }
 else {
      exceptions.add(new VcsException("Commit was cancelled in file conversion dialog"));
    }
  }
}
);
if (selectedFiles.get() != null) {
  for (  VirtualFile f : selectedFiles.get()) {
    try {
      LoadTextUtil.changeLineSeparator(project,GitConvertFilesDialog.class.getName(),f,nl);
    }
 catch (    IOException e) {
      exceptions.add(new VcsException("Failed to change line separators for the file: " + f.getPresentableUrl(),e));
    }
  }
}
}
}
 catch (VcsException e) {
exceptions.add(e);
}
return exceptions.isEmpty();
}
