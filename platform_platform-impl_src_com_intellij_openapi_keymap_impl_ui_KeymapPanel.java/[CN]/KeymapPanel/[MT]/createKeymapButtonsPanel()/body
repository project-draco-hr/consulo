{
  final JPanel panel=new JPanel();
  panel.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
  panel.setLayout(new GridBagLayout());
  myCopyButton=new JButton(KeyMapBundle.message("copy.keymap.button"));
  Insets insets=new Insets(2,2,2,2);
  myCopyButton.setMargin(insets);
  final GridBagConstraints gc=new GridBagConstraints(GridBagConstraints.RELATIVE,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0);
  panel.add(myCopyButton,gc);
  myResetToDefault=new JButton(CommonBundle.message("button.reset"));
  myResetToDefault.setMargin(insets);
  panel.add(myResetToDefault,gc);
  myDeleteButton=new JButton(KeyMapBundle.message("delete.keymap.button"));
  myDeleteButton.setMargin(insets);
  gc.weightx=1;
  panel.add(myDeleteButton,gc);
  final SchemesManager<Keymap,KeymapImpl> schemesManager=getSchemesManager();
  if (schemesManager.isExportAvailable()) {
    myExportButton=new JButton("Share...");
    myExportButton.setMnemonic('S');
    myExportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        KeymapImpl selected=getSelectedKeymap();
        ExportSchemeAction.doExport(selected,schemesManager);
      }
    }
);
    myExportButton.setMargin(insets);
    panel.add(myExportButton,gc);
  }
  if (schemesManager.isImportAvailable()) {
    JButton importButton=new JButton("Import Shared...");
    importButton.setMnemonic('I');
    importButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        SchemesToImportPopup<Keymap,KeymapImpl> popup=new SchemesToImportPopup<Keymap,KeymapImpl>(panel){
          protected void onSchemeSelected(          final KeymapImpl scheme){
            if (scheme != null) {
              scheme.setCanModify(true);
              myKeymapListModel.addElement(scheme);
              myKeymapList.setSelectedItem(scheme);
              processCurrentKeymapChanged(getCurrentQuickListIds());
            }
          }
        }
;
        popup.show(schemesManager,collectKeymaps(myKeymapListModel));
      }
    }
);
    importButton.setMargin(insets);
    panel.add(importButton,gc);
  }
  myCopyButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      copyKeymap();
    }
  }
);
  myResetToDefault.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      resetKeymap();
    }
  }
);
  myDeleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteKeymap();
    }
  }
);
  return panel;
}
