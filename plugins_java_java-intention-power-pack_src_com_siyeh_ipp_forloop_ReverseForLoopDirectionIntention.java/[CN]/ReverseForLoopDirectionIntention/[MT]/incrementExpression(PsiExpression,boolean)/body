{
  if (expression instanceof PsiLiteralExpression) {
    final PsiLiteralExpression literalExpression=(PsiLiteralExpression)expression;
    final Number value=(Number)literalExpression.getValue();
    if (value == null) {
      return null;
    }
    if (positive) {
      return String.valueOf(value.longValue() + 1L);
    }
 else {
      return String.valueOf(value.longValue() - 1L);
    }
  }
 else {
    if (expression instanceof PsiBinaryExpression) {
      final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
      final PsiExpression rhs=binaryExpression.getROperand();
      if (ExpressionUtils.isOne(rhs)) {
        final IElementType tokenType=binaryExpression.getOperationTokenType();
        if (tokenType == JavaTokenType.MINUS && positive) {
          return binaryExpression.getLOperand().getText();
        }
 else         if (tokenType == JavaTokenType.PLUS && !positive) {
          return binaryExpression.getLOperand().getText();
        }
      }
    }
    final String expressionText;
    if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.ADDITIVE_PRECEDENCE) {
      expressionText='(' + expression.getText() + ')';
    }
 else {
      expressionText=expression.getText();
    }
    if (positive) {
      return expressionText + "+1";
    }
 else {
      return expressionText + "-1";
    }
  }
}
