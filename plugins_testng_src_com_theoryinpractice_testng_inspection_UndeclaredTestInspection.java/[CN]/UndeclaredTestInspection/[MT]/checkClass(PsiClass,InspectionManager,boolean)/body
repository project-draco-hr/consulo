{
  if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass,true)) {
    final Project project=aClass.getProject();
    final String qName=aClass.getQualifiedName();
    if (qName == null)     return null;
    final String packageName=((PsiJavaFile)aClass.getContainingFile()).getPackageName();
    final String[] names=new String[]{qName,packageName};
    for (    final String name : names) {
      final boolean[] found=new boolean[]{false};
      PsiManager.getInstance(project).getSearchHelper().processUsagesInNonJavaFiles(name,new PsiNonJavaFileReferenceProcessor(){
        public boolean process(        final PsiFile file,        final int startOffset,        final int endOffset){
          if (file.findReferenceAt(startOffset) != null) {
            if (name.equals(packageName)) {
              final XmlTag tag=PsiTreeUtil.getParentOfType(file.findElementAt(startOffset),XmlTag.class);
              if (tag == null || !tag.getName().equals("package")) {
                return true;
              }
            }
            found[0]=true;
            return false;
          }
          return true;
        }
      }
,new TestNGSearchScope());
      if (found[0])       return null;
    }
    final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
    LOG.assertTrue(nameIdentifier != null);
    return new ProblemDescriptor[]{manager.createProblemDescriptor(nameIdentifier,"Undeclared test \'" + aClass.getName() + "\'",new LocalQuickFix[]{new RegisterClassFix(aClass),new CreateTestngFix()},ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly)};
  }
  return null;
}
