{
  if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass,true)) {
    final Project project=aClass.getProject();
    final String qName=aClass.getQualifiedName();
    if (qName == null)     return null;
    final List<String> names=new ArrayList<String>();
    for (int i=0; i < qName.length(); i++) {
      if (qName.charAt(i) == '.') {
        names.add(qName.substring(0,i));
      }
    }
    names.add(qName);
    Collections.reverse(names);
    for (    final String name : names) {
      final boolean isFullName=qName.equals(name);
      final boolean[] found=new boolean[]{false};
      PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name,new PsiNonJavaFileReferenceProcessor(){
        public boolean process(        final PsiFile file,        final int startOffset,        final int endOffset){
          if (file.findReferenceAt(startOffset) != null) {
            if (!isFullName) {
              final XmlTag tag=PsiTreeUtil.getParentOfType(file.findElementAt(startOffset),XmlTag.class);
              if (tag == null || !tag.getName().equals("package")) {
                return true;
              }
              final XmlAttribute attribute=tag.getAttribute("name");
              if (attribute == null)               return true;
              final String value=attribute.getValue();
              if (value == null)               return true;
              if (!value.endsWith(".*"))               return true;
            }
            found[0]=true;
            return false;
          }
          return true;
        }
      }
,new TestNGSearchScope(project));
      if (found[0])       return null;
    }
    final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
    LOG.assertTrue(nameIdentifier != null);
    return new ProblemDescriptor[]{manager.createProblemDescriptor(nameIdentifier,"Undeclared test \'" + aClass.getName() + "\'",isOnTheFly,new LocalQuickFix[]{new RegisterClassFix(aClass),new CreateTestngFix()},ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
  }
  return null;
}
