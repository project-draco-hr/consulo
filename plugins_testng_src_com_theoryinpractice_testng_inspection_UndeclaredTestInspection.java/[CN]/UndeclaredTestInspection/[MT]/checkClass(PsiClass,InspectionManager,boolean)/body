{
  if (TestNGUtil.hasTest(aClass)) {
    final boolean[] found=new boolean[]{false};
    final Project project=aClass.getProject();
    final String qName=aClass.getQualifiedName();
    if (qName == null)     return null;
    final String[] names=new String[]{qName,((PsiJavaFile)aClass.getContainingFile()).getPackageName()};
    for (    String name : names) {
      PsiManager.getInstance(project).getSearchHelper().processUsagesInNonJavaFiles(name,new PsiNonJavaFileReferenceProcessor(){
        public boolean process(        final PsiFile file,        final int startOffset,        final int endOffset){
          if (file.findReferenceAt(startOffset) != null) {
            found[0]=true;
            return false;
          }
          return true;
        }
      }
,new GlobalSearchScope(){
        public boolean contains(        VirtualFile file){
          return TestNGUtil.isTestngXML(file);
        }
        public int compare(        VirtualFile file1,        VirtualFile file2){
          return 0;
        }
        public boolean isSearchInModuleContent(        Module aModule){
          return true;
        }
        public boolean isSearchInLibraries(){
          return false;
        }
      }
);
      if (found[0])       return null;
    }
    final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
    LOG.assertTrue(nameIdentifier != null);
    return new ProblemDescriptor[]{manager.createProblemDescriptor(nameIdentifier,"Undeclared test \'" + aClass.getName() + "\'",new LocalQuickFix[]{new RegisterClassFix(aClass),new CreateTestngFix()},ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
  }
  return null;
}
