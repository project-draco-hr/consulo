{
  System.out.println("JBTabs.main");
  IconLoader.activate();
  final JFrame frame=new JFrame();
  frame.getContentPane().setLayout(new BorderLayout());
  final int[] count=new int[1];
  final JBTabs tabs=new JBTabs(null,null,new Disposable(){
    public void dispose(){
    }
  }
){
    protected JComponent createToolbarComponent(    final TabInfo tabInfo){
      final JLabel jLabel=new JLabel("X" + (++count[0])){
        protected void paintComponent(        final Graphics g){
          super.paintComponent(g);
          System.out.println(tabInfo.getText());
        }
      }
;
      jLabel.setBorder(new LineBorder(Color.red));
      return jLabel;
    }
  }
;
  frame.getContentPane().add(tabs,BorderLayout.CENTER);
  JPanel south=new JPanel(new FlowLayout());
  final JCheckBox f=new JCheckBox("Focused");
  f.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setFocused(f.isSelected());
    }
  }
);
  south.add(f);
  final JCheckBox v=new JCheckBox("Vertical");
  v.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setSideComponentVertical(v.isSelected());
    }
  }
);
  south.add(v);
  final JCheckBox row=new JCheckBox("Single row",true);
  row.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setSingleRow(row.isSelected());
    }
  }
);
  south.add(row);
  final JCheckBox stealth=new JCheckBox("Stealth tab",tabs.isStealthTabMode());
  stealth.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setStealthTabMode(stealth.isSelected());
    }
  }
);
  south.add(stealth);
  final JCheckBox hide=new JCheckBox("Hide tabs",tabs.isHideTabs());
  hide.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      tabs.setHideTabs(hide.isSelected());
    }
  }
);
  south.add(hide);
  frame.getContentPane().add(south,BorderLayout.SOUTH);
  tabs.addListener(new TabsListener(){
    public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      System.out.println("TabsWithActions.selectionChanged old=" + oldSelection + " new="+ newSelection);
    }
  }
);
  tabs.addTab(new TabInfo(new JTree(){
    public void addNotify(){
      super.addNotify();
      System.out.println("JBTabs.addNotify");
    }
    public void removeNotify(){
      System.out.println("JBTabs.removeNotify");
      super.removeNotify();
    }
  }
)).setText("Tree1").setActions(new DefaultActionGroup(),null).setIcon(IconLoader.getIcon("/debugger/frame.png"));
  final TabInfo toAnimate1=new TabInfo(new JTree());
  toAnimate1.setIcon(IconLoader.getIcon("/debugger/console.png"));
  final JCheckBox attract1=new JCheckBox("Attract 1");
  attract1.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (attract1.isSelected()) {
        toAnimate1.fireAlert();
      }
 else {
        toAnimate1.stopAlerting();
      }
    }
  }
);
  south.add(attract1);
  final JButton refire=new JButton("Re-fire attraction");
  refire.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      toAnimate1.fireAlert();
    }
  }
);
  south.add(refire);
  tabs.addTab(toAnimate1).setText("Tree2");
  tabs.setBorder(new EmptyBorder(6,6,20,6));
  tabs.setUiDecorator(new UiDecorator(){
    public UiDecoration getDecoration(){
      return new UiDecoration(null,new Insets(1,-1,1,-1));
    }
  }
);
  frame.setBounds(200,200,600,200);
  frame.show();
}
