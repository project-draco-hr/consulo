{
  if (referenceElement.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0) {
    final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
    if (parameterList != null && parameterList.getTypeParameterElements().length > 0) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,parameterList,GENERICS_ARE_NOT_SUPPORTED);
    }
  }
  final PsiTypeParameter[] typeParameters=typeParameterListOwner.getTypeParameters();
  final int targetParametersNum=typeParameters.length;
  final PsiReferenceParameterList referenceParameterList=referenceElement.getParameterList();
  final int refParametersNum=referenceParameterList == null ? 0 : referenceParameterList.getTypeParameterElements().length;
  if (targetParametersNum != refParametersNum && refParametersNum != 0) {
    final String description;
    if (targetParametersNum == 0) {
      description=JavaErrorMessages.message("generics.type.or.method.does.not.have.type.parameters",typeParameterListOwnerCategoryDescription(typeParameterListOwner),typeParameterListOwnerDescription(typeParameterListOwner));
    }
 else {
      description=JavaErrorMessages.message("generics.wrong.number.of.type.arguments",new Integer(refParametersNum),new Integer(targetParametersNum));
    }
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,referenceParameterList,description);
    if (registerIntentions) {
      PsiElement parent=referenceElement.getParent();
      if (parent instanceof PsiTypeElement) {
        PsiElement variable=parent.getParent();
        if (variable instanceof PsiVariable) {
          VariableParameterizedTypeFix.registerIntentions(highlightInfo,(PsiVariable)variable,referenceElement);
        }
      }
    }
    return highlightInfo;
  }
  if (targetParametersNum > 0 && refParametersNum != 0) {
    final PsiTypeElement[] referenceElements=referenceParameterList.getTypeParameterElements();
    for (int i=0; i < typeParameters.length; i++) {
      PsiTypeParameter classParameter=typeParameters[i];
      final PsiTypeElement typeElement=referenceElements[i];
      final PsiType type=typeElement.getType();
      if (!(type instanceof PsiClassType))       continue;
      final PsiClass referenceClass=((PsiClassType)type).resolve();
      if (referenceClass == null)       continue;
      final PsiClassType[] bounds=classParameter.getSuperTypes();
      for (      PsiClassType type1 : bounds) {
        PsiType bound=substitutor.substitute(type1);
        if (!bound.equalsToText("java.lang.Object") && !TypeConversionUtil.isAssignable(bound,type)) {
          PsiClass boundClass=bound instanceof PsiClassType ? ((PsiClassType)bound).resolve() : null;
          @NonNls final String messageKey=(boundClass == null || referenceClass.isInterface() == boundClass.isInterface() ? "generics.type.parameter.is.not.within.its.bound.extend" : "generics.type.parameter.is.not.within.its.bound.implement");
          String description=JavaErrorMessages.message(messageKey,HighlightUtil.formatClass(referenceClass),HighlightUtil.formatType(bound));
          final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,typeElement,description);
          if (bound instanceof PsiClassType) {
            QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createExtendsListFix(referenceClass,(PsiClassType)bound,true),null);
          }
          return highlightInfo;
        }
      }
    }
  }
  return null;
}
