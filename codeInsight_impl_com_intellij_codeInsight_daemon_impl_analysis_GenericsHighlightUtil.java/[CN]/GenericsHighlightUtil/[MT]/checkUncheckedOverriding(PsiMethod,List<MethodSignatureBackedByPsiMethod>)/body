{
  if (PsiUtil.getLanguageLevel(overrider).compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  final HighlightDisplayKey key=HighlightDisplayKey.find(UncheckedWarningLocalInspection.SHORT_NAME);
  if (!InspectionProjectProfileManager.getInstance(overrider.getProject()).getInspectionProfile(overrider).isToolEnabled(key))   return null;
  if (InspectionManagerEx.inspectionResultSuppressed(overrider,UncheckedWarningLocalInspection.ID))   return null;
  final MethodSignature signature=overrider.getSignature(PsiSubstitutor.EMPTY);
  for (  MethodSignatureBackedByPsiMethod superSignature : superMethodSignatures) {
    PsiMethod baseMethod=superSignature.getMethod();
    PsiSubstitutor substitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(signature,superSignature);
    if (substitutor == null)     substitutor=superSignature.getSubstitutor();
    if (PsiUtil.isRawSubstitutor(baseMethod,superSignature.getSubstitutor()))     continue;
    final PsiType baseReturnType=substitutor.substitute(baseMethod.getReturnType());
    final PsiType overriderReturnType=overrider.getReturnType();
    if (baseReturnType == null || overriderReturnType == null)     return null;
    if (isRawToGeneric(baseReturnType,overriderReturnType)) {
      final String message=JavaErrorMessages.message("unchecked.overriding.incompatibe.return.type",HighlightUtil.formatType(overriderReturnType),HighlightUtil.formatType(baseReturnType));
      final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,overrider.getReturnTypeElement(),message);
      List<IntentionAction> options=IntentionManager.getInstance(overrider.getProject()).getStandardIntentionOptions(key,overrider.getReturnTypeElement());
      String displayName=UncheckedWarningLocalInspection.DISPLAY_NAME;
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(JavaErrorMessages.message("unchecked.overriding"),options),options,displayName);
      return highlightInfo;
    }
  }
  return null;
}
