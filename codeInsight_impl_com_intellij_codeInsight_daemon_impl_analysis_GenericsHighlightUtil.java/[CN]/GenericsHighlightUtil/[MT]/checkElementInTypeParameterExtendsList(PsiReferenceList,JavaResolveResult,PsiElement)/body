{
  PsiClass aClass=(PsiClass)referenceList.getParent();
  final PsiJavaCodeReferenceElement[] referenceElements=referenceList.getReferenceElements();
  PsiClass extendFrom=(PsiClass)resolveResult.getElement();
  if (extendFrom == null)   return null;
  HighlightInfo errorResult=null;
  if (!extendFrom.isInterface() && referenceElements.length != 0 && element != referenceElements[0]) {
    final String description=HighlightClassUtil.INTERFACE_EXPECTED;
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,element,description);
    PsiClassType type=aClass.getManager().getElementFactory().createType(extendFrom,resolveResult.getSubstitutor());
    QuickFixAction.registerQuickFixAction(errorResult,new MoveBoundClassToFrontFix(aClass,type),(HighlightDisplayKey)null,null);
  }
 else   if (referenceElements.length != 0 && element != referenceElements[0] && referenceElements[0].resolve() instanceof PsiTypeParameter) {
    final String description=JavaErrorMessages.message("type.parameter.cannot.be.followed.by.other.bounds");
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,element,description);
    PsiClassType type=aClass.getManager().getElementFactory().createType(extendFrom,resolveResult.getSubstitutor());
    IntentionAction fix=QUICK_FIX_FACTORY.createExtendsListFix(aClass,type,false);
    QuickFixAction.registerQuickFixAction(errorResult,fix,(HighlightDisplayKey)null,null);
  }
  return errorResult;
}
