{
  if (typeCast.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  final HighlightDisplayKey key=HighlightDisplayKey.find(UncheckedWarningLocalInspection.SHORT_NAME);
  if (!InspectionProjectProfileManager.getInstance(typeCast.getProject()).getInspectionProfile(typeCast).isToolEnabled(key))   return null;
  final PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return null;
  final PsiType castType=typeElement.getType();
  final PsiExpression expression=typeCast.getOperand();
  if (expression == null)   return null;
  final PsiType exprType=expression.getType();
  if (exprType == null)   return null;
  if (isUncheckedTypeCast(castType,exprType)) {
    String description=JavaErrorMessages.message("generics.unchecked.cast",HighlightUtil.formatType(exprType),HighlightUtil.formatType(castType));
    if (InspectionManagerEx.inspectionResultSuppressed(expression,UncheckedWarningLocalInspection.ID))     return null;
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,typeCast,description);
    List<IntentionAction> options=IntentionManager.getInstance(expression.getProject()).getStandardIntentionOptions(key,expression);
    String displayName=UncheckedWarningLocalInspection.DISPLAY_NAME;
    QuickFixAction.registerQuickFixAction(highlightInfo,new GenerifyFileFix(expression.getContainingFile()),options,displayName);
    return highlightInfo;
  }
  return null;
}
