{
  final PsiMethod checkMethod=signatureToCheck.getMethod();
  PsiClass checkContainingClass=checkMethod.getContainingClass();
  PsiClass superContainingClass=superMethod.getContainingClass();
  if (checkMethod.isConstructor()) {
    if (!superMethod.isConstructor() || !checkContainingClass.equals(superContainingClass))     return null;
  }
 else   if (superMethod.isConstructor())   return null;
  if (checkMethod.hasModifierProperty(PsiModifier.STATIC) && !checkContainingClass.equals(superContainingClass)) {
    return null;
  }
  final PsiType returnType1=TypeConversionUtil.erasure(checkMethod.getReturnType());
  final PsiType returnType2=TypeConversionUtil.erasure(superMethod.getReturnType());
  if (!Comparing.equal(returnType1,returnType2) && !TypeConversionUtil.isVoidType(returnType1) && !TypeConversionUtil.isVoidType(returnType2))   return null;
  if (!checkContainingClass.equals(superContainingClass) && MethodSignatureUtil.isSubsignature(superSignature,signatureToCheck)) {
    return null;
  }
  PsiMethod method1=signatureToCheck.getMethod();
  if (superMethod.equals(method1))   return null;
  if (aClass.equals(method1.getContainingClass())) {
    boolean sameClass=aClass.equals(superContainingClass);
    return getSameErasureMessage(sameClass,method1,superMethod,HighlightNamesUtil.getMethodDeclarationTextRange(method1));
  }
 else {
    return getSameErasureMessage(false,method1,superMethod,HighlightNamesUtil.getClassDeclarationTextRange(aClass));
  }
}
