{
  if (PsiUtil.getLanguageLevel(call).compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  final HighlightDisplayKey key=HighlightDisplayKey.find(UncheckedWarningLocalInspection.SHORT_NAME);
  if (!InspectionProjectProfileManager.getInstance(call.getProject()).getInspectionProfile(call).isToolEnabled(key))   return null;
  final PsiMethod method=(PsiMethod)resolveResult.getElement();
  if (method == null)   return null;
  final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (  final PsiParameter parameter : parameters) {
    final PsiType parameterType=parameter.getType();
    if (parameterType.accept(new PsiTypeVisitor<Boolean>(){
      public Boolean visitPrimitiveType(      PsiPrimitiveType primitiveType){
        return Boolean.FALSE;
      }
      public Boolean visitArrayType(      PsiArrayType arrayType){
        return arrayType.getComponentType().accept(this);
      }
      public Boolean visitClassType(      PsiClassType classType){
        PsiClass psiClass=classType.resolve();
        if (psiClass instanceof PsiTypeParameter) {
          return substitutor.substitute((PsiTypeParameter)psiClass) == null ? Boolean.TRUE : Boolean.FALSE;
        }
        PsiType[] parameters=classType.getParameters();
        for (        PsiType parameter : parameters) {
          if (parameter.accept(this).booleanValue())           return Boolean.TRUE;
        }
        return Boolean.FALSE;
      }
      public Boolean visitWildcardType(      PsiWildcardType wildcardType){
        PsiType bound=wildcardType.getBound();
        if (bound != null)         return bound.accept(this);
        return Boolean.FALSE;
      }
      public Boolean visitEllipsisType(      PsiEllipsisType ellipsisType){
        return ellipsisType.getComponentType().accept(this);
      }
    }
).booleanValue()) {
      final PsiElementFactory elementFactory=method.getManager().getElementFactory();
      PsiType type=elementFactory.createType(method.getContainingClass(),substitutor);
      String description=JavaErrorMessages.message("generics.unchecked.call.to.member.of.raw.type",HighlightUtil.formatMethod(method),HighlightUtil.formatType(type));
      PsiElement element=call instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression)call).getMethodExpression() : call;
      if (InspectionManagerEx.inspectionResultSuppressed(call,UncheckedWarningLocalInspection.ID))       return null;
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,element,description);
      List<IntentionAction> options=IntentionManager.getInstance().getStandardIntentionOptions(key,call);
      String displayName=UncheckedWarningLocalInspection.DISPLAY_NAME;
      QuickFixAction.registerQuickFixAction(highlightInfo,new GenerifyFileFix(element.getContainingFile()),options,displayName);
      return highlightInfo;
    }
  }
  return null;
}
