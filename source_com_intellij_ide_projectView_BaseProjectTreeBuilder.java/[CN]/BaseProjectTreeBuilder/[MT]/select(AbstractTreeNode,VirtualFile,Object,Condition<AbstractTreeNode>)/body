{
  if (current.canRepresent(element))   return current;
  if (current instanceof ProjectViewNode && file != null && !(((ProjectViewNode)current).contains(file)))   return null;
  DefaultMutableTreeNode currentNode=getNodeForElement(current);
  boolean expanded=currentNode == null ? false : getTree().isExpanded(new TreePath(currentNode.getPath()));
  List<AbstractTreeNode> kids=getOrBuildChildren(current);
  for (  AbstractTreeNode node : kids) {
    if (nonStopCondition.value(node)) {
      AbstractTreeNode result=select(node,file,element,nonStopCondition);
      if (result != null) {
        currentNode=getNodeForElement(current);
        if (currentNode != null) {
          final TreePath path=new TreePath(currentNode.getPath());
          if (!getTree().isExpanded(path)) {
            getTree().expandPath(path);
          }
        }
        return result;
      }
 else {
        if (!expanded) {
          hideChildrenFor(currentNode);
        }
      }
    }
  }
  return null;
}
