{
  try {
    return ApplicationManager.getApplication().runReadAction(new Computable<GeneralCommandLine>(){
      public GeneralCommandLine compute(){
        try {
          final GeneralCommandLine commandLine=new GeneralCommandLine();
          final Sdk jdk=javaParameters.getJdk();
          if (jdk == null) {
            throw new CantRunException(ExecutionBundle.message("run.configuration.error.no.jdk.specified"));
          }
          final SdkType sdkType=jdk.getSdkType();
          if (!(sdkType instanceof JavaSdkType)) {
            throw new CantRunException(ExecutionBundle.message("run.configuration.error.no.jdk.specified"));
          }
          final String exePath=((JavaSdkType)sdkType).getVMExecutablePath(jdk);
          if (exePath == null) {
            throw new CantRunException(ExecutionBundle.message("run.configuration.cannot.find.vm.executable"));
          }
          commandLine.setExePath(exePath);
          ParametersList parametersList=javaParameters.getVMParametersList();
          commandLine.addParameters(parametersList.getList());
          if (!parametersList.hasProperty("file.encoding")) {
            Charset charset=javaParameters.getCharset();
            if (charset == null)             charset=EncodingManager.getInstance().getDefaultCharset();
            if (charset == null)             charset=CharsetToolkit.getDefaultSystemCharset();
            commandLine.setCharset(charset);
          }
          if (dynamicClasspath) {
            final String hasDynamicProperty=System.getProperty("idea.dynamic.classpath","false");
            if (Boolean.valueOf(project != null ? PropertiesComponent.getInstance(project).getOrInit("dynamic.classpath",hasDynamicProperty) : hasDynamicProperty).booleanValue()) {
              File classpathFile=null;
              if (!parametersList.hasParameter("-classpath") && !parametersList.hasParameter("-cp")) {
                try {
                  classpathFile=FileUtil.createTempFile("classpath",null);
                  final PrintWriter writer=new PrintWriter(classpathFile);
                  try {
                    for (                    String path : javaParameters.getClassPath().getPathList()) {
                      writer.println(path);
                    }
                  }
  finally {
                    writer.close();
                  }
                  commandLine.addParameter("-classpath");
                  commandLine.addParameter(PathUtil.getJarPathForClass(CommandLineWrapper.class) + File.pathSeparator + PathUtil.getJarPathForClass(UrlClassLoader.class));
                }
 catch (                IOException e) {
                  LOG.error(e);
                }
              }
              if (classpathFile != null) {
                commandLine.addParameter(CommandLineWrapper.class.getName());
                commandLine.addParameter(classpathFile.getAbsolutePath());
              }
            }
 else             if (!parametersList.hasParameter("-classpath") && !parametersList.hasParameter("-cp")) {
              commandLine.addParameter("-classpath");
              commandLine.addParameter(javaParameters.getClassPath().getPathsString());
            }
          }
 else           if (!parametersList.hasParameter("-classpath") && !parametersList.hasParameter("-cp")) {
            commandLine.addParameter("-classpath");
            commandLine.addParameter(javaParameters.getClassPath().getPathsString());
          }
          final String mainClass=javaParameters.getMainClass();
          if (mainClass == null)           throw new CantRunException(ExecutionBundle.message("main.class.is.not.specified.error.message"));
          commandLine.addParameter(mainClass);
          commandLine.addParameters(javaParameters.getProgramParametersList().getList());
          commandLine.setWorkDirectory(javaParameters.getWorkingDirectory());
          final Map<String,String> env=javaParameters.getEnv();
          if (env != null) {
            commandLine.setEnvParams(env);
            commandLine.setPassParentEnvs(javaParameters.isPassParentEnvs());
          }
          return commandLine;
        }
 catch (        CantRunException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
 catch (  RuntimeException e) {
    if (e.getCause() instanceof CantRunException)     throw (CantRunException)e.getCause();
 else     throw e;
  }
}
