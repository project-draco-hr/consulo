{
  final PsiElement forStatement=declarationStatement.getParent();
  final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
  final Project project=forStatement.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiElement greatGreatGrandParent=forStatement.getParent();
  final PsiBlockStatement blockStatement;
  final PsiCodeBlock codeBlock;
  if (!(greatGreatGrandParent instanceof PsiCodeBlock)) {
    blockStatement=(PsiBlockStatement)factory.createStatementFromText("{}",forStatement);
    codeBlock=blockStatement.getCodeBlock();
  }
 else {
    blockStatement=null;
    codeBlock=null;
  }
  for (int i=1; i < declaredElements.length; i++) {
    final PsiElement declaredElement=declaredElements[i];
    if (!(declaredElement instanceof PsiVariable)) {
      continue;
    }
    final PsiVariable variable=(PsiVariable)declaredElement;
    final PsiType type=variable.getType();
    final String typeText=type.getCanonicalText();
    final StringBuilder newStatementText=new StringBuilder(typeText);
    newStatementText.append(' ');
    newStatementText.append(variable.getName());
    final PsiExpression initializer=variable.getInitializer();
    if (initializer != null) {
      newStatementText.append('=');
      newStatementText.append(initializer.getText());
    }
    newStatementText.append(';');
    final PsiStatement newStatement=factory.createStatementFromText(newStatementText.toString(),forStatement);
    if (codeBlock == null) {
      greatGreatGrandParent.addBefore(newStatement,forStatement);
    }
 else {
      codeBlock.add(newStatement);
    }
  }
  for (int i=1; i < declaredElements.length; i++) {
    final PsiElement declaredElement=declaredElements[i];
    if (!(declaredElement instanceof PsiVariable)) {
      continue;
    }
    declaredElement.delete();
  }
  if (codeBlock != null) {
    codeBlock.add(forStatement);
    forStatement.replace(blockStatement);
  }
}
