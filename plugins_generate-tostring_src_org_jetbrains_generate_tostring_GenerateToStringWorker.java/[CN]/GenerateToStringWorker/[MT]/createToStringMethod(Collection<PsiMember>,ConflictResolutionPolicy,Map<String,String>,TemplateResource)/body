{
  String body=velocityGenerateCode(selectedMembers,params,template.getMethodBody());
  if (logger.isDebugEnabled())   logger.debug("Method body generated from Velocity:\n" + body);
  body=StringUtil.convertLineSeparators(body);
  PsiMethod newMethod=topLevelFactory.createMethodFromText(template.getMethodSignature() + " { " + body+ " }",null);
  codeStyleManager.reformat(newMethod);
  PsiMethod existingMethod=clazz.findMethodBySignature(newMethod,false);
  PsiMethod toStringMethod=policy.applyMethod(clazz,existingMethod,newMethod,editor);
  if (toStringMethod == null) {
    return null;
  }
  if (hasOverrideAnnotation) {
    annotate(toStringMethod,"java.lang.Override");
  }
  if (template.hasAnnotations()) {
    String[] annotations=template.getAnnotations();
    for (int i=annotations.length - 1; i > -1; i--) {
      String text=annotations[i];
      psi.addAnnotationToMethod(topLevelFactory,toStringMethod,text);
    }
  }
  String existingJavaDoc=params.get("existingJavaDoc");
  String newJavaDoc=template.getJavaDoc();
  if (existingJavaDoc != null || newJavaDoc != null) {
    newJavaDoc=velocityGenerateCode(selectedMembers,params,newJavaDoc);
    if (logger.isDebugEnabled())     logger.debug("JavaDoc body generated from Velocity:\n" + newJavaDoc);
    applyJavaDoc(toStringMethod,elementFactory,codeStyleManager,existingJavaDoc,newJavaDoc);
  }
  return toStringMethod;
}
