{
  myList=list;
  new ListSpeedSearch(myList){
    @Override protected String getElementText(    Object element){
      return super.getElementText(element);
    }
  }
.setComparator(new SpeedSearchComparator(false));
  List<TemplateItem> items=buildItems(map);
  final RemoteTemplatesFactory factory=new RemoteTemplatesFactory();
  final TemplatesGroup samplesGroup=new TemplatesGroup("Loading Templates...","",null,0);
  myLoadingItem=new TemplateItem(new LoadingProjectTemplate(),samplesGroup){
    @Override Icon getIcon(){
      return null;
    }
    @Override String getDescription(){
      return "";
    }
  }
;
  items.add(myLoadingItem);
  myModel=new CollectionListModel<TemplateItem>(items);
  ProgressManager.getInstance().run(new Task.Backgroundable(context.getProject(),"Loading Templates"){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        myList.setPaintBusy(true);
        String[] groups=factory.getGroups();
        final List<TemplateItem> items=new ArrayList<TemplateItem>();
        for (        String group : groups) {
          TemplatesGroup templatesGroup=new TemplatesGroup(group,"",factory.getGroupIcon(group),0);
          ProjectTemplate[] templates=factory.createTemplates(group,context);
          for (          ProjectTemplate template : templates) {
            items.add(new TemplateItem(template,templatesGroup));
          }
        }
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            int index=myList.getSelectedIndex();
            myModel.remove(myLoadingItem);
            myModel.add(items);
            myList.setSelectedIndex(index);
          }
        }
);
      }
  finally {
        myList.setPaintBusy(false);
      }
    }
  }
);
  myList.setCellRenderer(new GroupedItemsListRenderer(new ListItemDescriptor(){
    @Nullable @Override public String getTextFor(    Object value){
      return ((TemplateItem)value).getName();
    }
    @Nullable @Override public String getTooltipFor(    Object value){
      return null;
    }
    @Nullable @Override public Icon getIconFor(    Object value){
      return ((TemplateItem)value).getIcon();
    }
    @Override public boolean hasSeparatorAboveOf(    Object value){
      TemplateItem item=(TemplateItem)value;
      int index=myModel.getElementIndex(item);
      return index == 0 || !myModel.getElementAt(index - 1).getGroupName().equals(item.getGroupName());
    }
    @Nullable @Override public String getCaptionAboveOf(    Object value){
      return ((TemplateItem)value).getGroupName();
    }
  }
));
  myList.setModel(myModel);
}
