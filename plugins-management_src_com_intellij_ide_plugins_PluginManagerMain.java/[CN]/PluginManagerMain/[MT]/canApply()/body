{
  final StringBuilder buf=new StringBuilder();
  for (int i=0; i < installedPluginTable.getRowCount(); i++) {
    final IdeaPluginDescriptorImpl pluginDescriptor=(IdeaPluginDescriptorImpl)installedPluginsModel.getObjectAt(i);
    if (((Boolean)installedPluginsModel.getValueAt(i,InstalledPluginsTableModel.getCheckboxColumn())).booleanValue()) {
      final Set<PluginId> absent=new HashSet<PluginId>();
      PluginManager.checkDependants(pluginDescriptor,new Function<PluginId,IdeaPluginDescriptor>(){
        @Nullable public IdeaPluginDescriptor fun(        final PluginId pluginId){
          return PluginManager.getPlugin(pluginId);
        }
      }
,new Condition<PluginId>(){
        public boolean value(        final PluginId pluginId){
          if (!installedPluginsModel.isEnabled(pluginId)) {
            absent.add(pluginId);
            return false;
          }
          return true;
        }
      }
);
      if (!absent.isEmpty()) {
        buf.append(IdeBundle.message("disabled.plugins.warning.message",pluginDescriptor.getName(),StringUtil.join(absent,new Function<PluginId,String>(){
          public String fun(          final PluginId pluginId){
            final IdeaPluginDescriptor ideaPluginDescriptor=PluginManager.getPlugin(pluginId);
            return "\"" + (ideaPluginDescriptor != null ? ideaPluginDescriptor.getName() : pluginId.getIdString()) + "\"";
          }
        }
,", "),absent.size()));
      }
    }
  }
  if (buf.length() > 0) {
    @NonNls final String message="<html><body><ul>" + buf.toString() + "</ul>"+ "Changes won't be applied."+ "</body></html>";
    Messages.showErrorDialog(main,message);
    return false;
  }
  return true;
}
