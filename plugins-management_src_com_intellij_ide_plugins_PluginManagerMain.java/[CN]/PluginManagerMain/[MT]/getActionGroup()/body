{
  if (actionGroup == null) {
    actionGroup=new DefaultActionGroup();
    final String installTitle=IdeBundle.message("action.download.and.install.plugin");
    final String updateMessage=IdeBundle.message("action.update.plugin");
    installPluginAction=new AnAction(installTitle,installTitle,IconLoader.getIcon("/actions/install.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        Object pluginObject=installedPluginTable.getSelectedObject();
        if (pluginObject instanceof PluginNode) {
          int status=PluginManagerColumnInfo.getRealNodeState((PluginNode)pluginObject);
          enabled=(status != PluginNode.STATUS_DOWNLOADED);
          presentation.setText(installTitle);
        }
 else         if (pluginObject instanceof IdeaPluginDescriptorImpl) {
          presentation.setText(updateMessage);
          presentation.setDescription(updateMessage);
          enabled=PluginsTableModel.NewVersions2Plugins.containsKey(((IdeaPluginDescriptorImpl)pluginObject).getPluginId());
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        do {
          try {
            final Object selectedObject=installedPluginTable.getSelectedObject();
            final boolean isUpdate=(selectedObject instanceof IdeaPluginDescriptorImpl);
            PluginNode pluginNode=null;
            if (selectedObject instanceof PluginNode) {
              pluginNode=(PluginNode)selectedObject;
            }
 else             if (selectedObject instanceof IdeaPluginDescriptorImpl) {
              final IdeaPluginDescriptor pluginDescriptor=(IdeaPluginDescriptor)selectedObject;
              pluginNode=new PluginNode(pluginDescriptor.getPluginId());
              pluginNode.setName(pluginDescriptor.getName());
              pluginNode.setDepends(Arrays.asList(pluginDescriptor.getDependentPluginIds()));
              pluginNode.setSize("-1");
              boolean smthFoundToUpdate=false;
              ArrayList<PluginNode> toUpdate=new ArrayList<PluginNode>();
              try {
                checkForUpdate(toUpdate,root);
                for (                PluginNode node : toUpdate) {
                  if (node.getPluginId().equals(pluginDescriptor.getPluginId())) {
                    smthFoundToUpdate=true;
                  }
                }
                if (!smthFoundToUpdate) {
                  Messages.showMessageDialog(main,IdeBundle.message("message.nothing.to.update"),IdeBundle.message("title.plugin.manager"),Messages.getInformationIcon());
                  return;
                }
              }
 catch (              IOException e1) {
                LOG.error(e1);
              }
            }
            final String message=isUpdate ? updateMessage : installTitle;
            if (Messages.showYesNoDialog(main,(isUpdate ? IdeBundle.message("prompt.update.plugin",pluginNode.getName()) : IdeBundle.message("prompt.download.and.install.plugin",pluginNode.getName())),message,Messages.getQuestionIcon()) == 0) {
              if (downloadPlugin(pluginNode)) {
                requireShutdown=true;
                installedPluginTable.updateUI();
              }
            }
            break;
          }
 catch (          IOException e1) {
            if (!IOExceptionDialog.showErrorDialog(e1,installTitle,IdeBundle.message("error.plugin.download.failed"))) {
              break;
            }
 else {
              LOG.error(e1);
            }
          }
        }
 while (true);
      }
    }
;
    actionGroup.add(installPluginAction);
    uninstallPluginAction=new AnAction(IdeBundle.message("action.uninstall.plugin"),IdeBundle.message("action.uninstall.plugin"),IconLoader.getIcon("/actions/uninstall.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (installedPluginTable != null) {
          Object descr=installedPluginTable.getSelectedObject();
          enabled=(descr instanceof IdeaPluginDescriptorImpl) && !((IdeaPluginDescriptorImpl)descr).isDeleted();
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        PluginId pluginId=null;
        IdeaPluginDescriptorImpl pluginDescriptor=(IdeaPluginDescriptorImpl)installedPluginTable.getSelectedObject();
        if (Messages.showYesNoDialog(main,IdeBundle.message("prompt.uninstall.plugin",pluginDescriptor.getName()),IdeBundle.message("title.plugin.uninstall"),Messages.getQuestionIcon()) == 0) {
          pluginId=pluginDescriptor.getPluginId();
          pluginDescriptor.setDeleted(true);
        }
        if (pluginId != null) {
          try {
            PluginInstaller.prepareToUninstall(pluginId);
            requireShutdown=true;
            installedPluginTable.updateUI();
          }
 catch (          IOException e1) {
            LOG.equals(e1);
          }
        }
      }
    }
;
    actionGroup.add(uninstallPluginAction);
  }
  return actionGroup;
}
