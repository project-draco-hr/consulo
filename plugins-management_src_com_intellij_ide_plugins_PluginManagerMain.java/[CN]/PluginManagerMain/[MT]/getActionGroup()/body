{
  if (actionGroup == null) {
    actionGroup=new DefaultActionGroup();
    syncAction=new AnAction(IdeBundle.message("action.synchronize.with.plugin.repository"),IdeBundle.message("action.synchronize.with.plugin.repository"),IconLoader.getIcon("/actions/sync.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
          enabled=true;
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        root=null;
        pluginInfoUpdate(null);
        loadAvailablePlugins();
      }
    }
;
    syncAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts("Synchronize")),main);
    actionGroup.add(syncAction);
    updatePluginsAction=new AnAction(IdeBundle.message("action.update.installed.plugins"),IdeBundle.message("action.update.installed.plugins"),IconLoader.getIcon("/actions/refresh.png")){
      public void actionPerformed(      AnActionEvent e){
        if (availablePluginTable == null) {
          loadAvailablePlugins();
        }
        if (root != null)         do {
          try {
            List<PluginNode> updateList=new ArrayList<PluginNode>();
            checkForUpdate(updateList,root);
            if (updateList.size() == 0) {
              Messages.showMessageDialog(main,IdeBundle.message("message.nothing.to.update"),IdeBundle.message("title.plugin.manager"),Messages.getInformationIcon());
              break;
            }
 else {
              Set<PluginNode> pluginsToUpdate=new HashSet<PluginNode>();
              final IdeaPluginDescriptor[] installedPlugins=PluginManager.getPlugins();
              for (              PluginNode pluginNode : updateList) {
                for (                IdeaPluginDescriptor descriptor : installedPlugins) {
                  if (descriptor.getPluginId().equals(pluginNode.getId())) {
                    pluginsToUpdate.add(pluginNode);
                  }
                }
              }
              DialogWrapper dlg=new PluginsToUpdateChooser(pluginsToUpdate);
              dlg.show();
              if (dlg.isOK()) {
                if (downloadPlugins(new ArrayList<PluginNode>(pluginsToUpdate))) {
                  availablePluginTable.updateUI();
                  requireShutdown=true;
                }
              }
              break;
            }
          }
 catch (          IOException e1) {
            if (!IOExceptionDialog.showErrorDialog(e1,IdeBundle.message("title.update.installed.plugins"),IdeBundle.message("error.plugins.updating.failed"))) {
              break;
            }
 else {
              LOG.error(e1);
            }
          }
        }
 while (true);
      }
    }
;
    actionGroup.add(updatePluginsAction);
    final String downloadMessage=IdeBundle.message("action.download.and.install.plugin");
    final String updateMessage=IdeBundle.message("action.update.plugin");
    installPluginAction=new AnAction(downloadMessage,downloadMessage,IconLoader.getIcon("/actions/install.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        PluginTable table=tabs.getSelectedIndex() == AVAILABLE_TAB ? availablePluginTable : installedPluginTable;
        if ((tabs.getSelectedIndex() == AVAILABLE_TAB && availablePluginTable != null) || (tabs.getSelectedIndex() == INSTALLED_TAB && installedPluginTable != null)) {
          Object pluginObject=table.getSelectedObject();
          if (pluginObject instanceof PluginNode) {
            int status=PluginManagerColumnInfo.getRealNodeState((PluginNode)pluginObject);
            if (status == PluginNode.STATUS_MISSING || status == PluginNode.STATUS_NEWEST || status == PluginNode.STATUS_OUT_OF_DATE || status == PluginNode.STATUS_UNKNOWN) {
              enabled=true;
            }
            presentation.setText(downloadMessage);
          }
 else           if (pluginObject instanceof IdeaPluginDescriptor) {
            presentation.setText(updateMessage);
            presentation.setDescription(updateMessage);
            enabled=true;
          }
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        do {
          try {
            if (root == null) {
              loadAvailablePlugins();
            }
            if (root == null)             return;
            final boolean isUpdate=tabs.getSelectedIndex() == INSTALLED_TAB;
            PluginTable pluginTable=isUpdate ? installedPluginTable : availablePluginTable;
            if (pluginTable == null)             return;
            final Object selectedObject=pluginTable.getSelectedObject();
            PluginNode pluginNode;
            if (selectedObject instanceof PluginNode) {
              pluginNode=(PluginNode)selectedObject;
            }
 else             if (selectedObject instanceof IdeaPluginDescriptor) {
              final IdeaPluginDescriptor pluginDescriptor=(IdeaPluginDescriptor)selectedObject;
              pluginNode=new PluginNode(pluginDescriptor.getPluginId());
              pluginNode.setName(pluginDescriptor.getName());
              pluginNode.setDepends(Arrays.asList(pluginDescriptor.getDependentPluginIds()));
              pluginNode.setSize("-1");
              boolean smthFoundToUpdate=false;
              ArrayList<PluginNode> toUpdate=new ArrayList<PluginNode>();
              try {
                checkForUpdate(toUpdate,root);
                for (                PluginNode node : toUpdate) {
                  if (node.getId().equals(pluginDescriptor.getPluginId())) {
                    smthFoundToUpdate=true;
                  }
                }
                if (!smthFoundToUpdate) {
                  Messages.showMessageDialog(main,IdeBundle.message("message.nothing.to.update"),IdeBundle.message("title.plugin.manager"),Messages.getInformationIcon());
                  return;
                }
              }
 catch (              IOException e1) {
                LOG.error(e1);
              }
            }
 else {
              return;
            }
            final String message=isUpdate ? updateMessage : downloadMessage;
            if (Messages.showYesNoDialog(main,(isUpdate ? IdeBundle.message("prompt.download.and.install.plugin",pluginNode.getName()) : IdeBundle.message("prompt.update.plugin",pluginNode.getName())),message,Messages.getQuestionIcon()) == 0) {
              if (downloadPlugin(pluginNode)) {
                requireShutdown=true;
                if (availablePluginTable != null) {
                  availablePluginTable.updateUI();
                }
              }
            }
            break;
          }
 catch (          IOException e1) {
            if (!IOExceptionDialog.showErrorDialog(e1,downloadMessage,IdeBundle.message("error.plugin.download.failed"))) {
              break;
            }
 else {
              LOG.error(e1);
            }
          }
        }
 while (true);
      }
    }
;
    actionGroup.add(installPluginAction);
    uninstallPluginAction=new AnAction(IdeBundle.message("action.uninstall.plugin"),IdeBundle.message("action.uninstall.plugin"),IconLoader.getIcon("/actions/uninstall.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (installedPluginTable != null && tabs.getSelectedIndex() == INSTALLED_TAB) {
          IdeaPluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
          if (pluginDescriptor != null && !pluginDescriptor.isDeleted()) {
            enabled=true;
          }
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        PluginId pluginId=null;
        if (tabs.getSelectedIndex() == INSTALLED_TAB) {
          IdeaPluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
          if (pluginDescriptor != null) {
            if (Messages.showYesNoDialog(main,IdeBundle.message("prompt.uninstall.plugin",pluginDescriptor.getName()),IdeBundle.message("title.plugin.uninstall"),Messages.getQuestionIcon()) == 0) {
              pluginId=pluginDescriptor.getPluginId();
              pluginDescriptor.setDeleted(true);
            }
          }
        }
        if (pluginId != null) {
          try {
            PluginInstaller.prepareToUninstall(pluginId);
            requireShutdown=true;
            installedPluginTable.updateUI();
          }
 catch (          IOException e1) {
            LOG.equals(e1);
          }
        }
      }
    }
;
    actionGroup.add(uninstallPluginAction);
  }
  return actionGroup;
}
