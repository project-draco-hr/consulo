{
  myAvailableProvider=availableProvider;
  myInstalledProvider=installedProvider;
  myCartProvider=cartProvider;
  myToolbarPanel.setLayout(new BorderLayout());
  toolbar=ActionManagerEx.getInstance().createActionToolbar("PluginManaer",getActionGroup(),true);
  myToolbarPanel.add(toolbar.getComponent(),BorderLayout.WEST);
  myDescriptionTextArea.setContentType("text/html");
  myDescriptionTextArea.addHyperlinkListener(new MyHyperlinkListener());
  myChangeNotesTextArea.setContentType("text/html");
  myChangeNotesTextArea.addHyperlinkListener(new MyHyperlinkListener());
  installedPluginTable=new PluginTable<IdeaPluginDescriptor>(new InstalledPluginsTableModel(myInstalledProvider));
  installedScrollPane.getViewport().setBackground(installedPluginTable.getBackground());
  installedScrollPane.getViewport().setView(installedPluginTable);
  installedPluginTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      pluginInfoUpdate(installedPluginTable.getSelectedObject());
      toolbar.updateActionsImmediately();
    }
  }
);
  PopupHandler.installUnknownPopupHandler(installedPluginTable,getActionGroup(),ActionManager.getInstance());
  tabs.setTitleAt(INSTALLED_TAB,INSTALLED_TAB_NAME + " (" + installedPluginTable.getRowCount()+ ")");
  tabs.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (tabs.getSelectedIndex() == INSTALLED_TAB) {
        pluginInfoUpdate(installedPluginTable.getSelectedObject());
      }
 else       if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
        pluginInfoUpdate(null);
        loadAvailablePlugins();
        if (availablePluginTable != null) {
          pluginInfoUpdate(availablePluginTable.getSelectedObject());
        }
      }
      toolbar.updateActionsImmediately();
    }
  }
);
  myHttpProxySettingsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      HTTPProxySettingsDialog settingsDialog=new HTTPProxySettingsDialog();
      settingsDialog.pack();
      settingsDialog.show();
    }
  }
);
  myVendorEmailLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
  myVendorEmailLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      String email=null;
      if (tabs.getSelectedIndex() == INSTALLED_TAB) {
        IdeaPluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
        if (pluginDescriptor != null) {
          email=pluginDescriptor.getVendorEmail();
        }
      }
 else       if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
        PluginNode pluginNode=availablePluginTable.getSelectedObject();
        if (pluginNode != null) {
          email=pluginNode.getVendorEmail();
        }
      }
      if (email != null && email.trim().length() > 0) {
        try {
          BrowserUtil.launchBrowser("mailto:" + email.trim());
        }
 catch (        IllegalThreadStateException ex) {
        }
      }
    }
  }
);
  myVendorUrlLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
  myVendorUrlLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      String url=null;
      if (tabs.getSelectedIndex() == INSTALLED_TAB) {
        IdeaPluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
        if (pluginDescriptor != null) {
          url=pluginDescriptor.getVendorUrl();
        }
      }
 else       if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
        PluginNode pluginNode=availablePluginTable.getSelectedObject();
        if (pluginNode != null) {
          url=pluginNode.getVendorUrl();
        }
      }
      if (url != null && url.trim().length() > 0) {
        BrowserUtil.launchBrowser(url.trim());
      }
    }
  }
);
  myPluginUrlLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
  myPluginUrlLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      String url=null;
      if (tabs.getSelectedIndex() == INSTALLED_TAB) {
        IdeaPluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
        if (pluginDescriptor != null) {
          url=pluginDescriptor.getUrl();
        }
      }
 else       if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
        PluginNode pluginNode=availablePluginTable.getSelectedObject();
        if (pluginNode != null) {
          url=pluginNode.getUrl();
        }
      }
      if (url != null && url.trim().length() > 0) {
        BrowserUtil.launchBrowser(url.trim());
      }
    }
  }
);
  new SpeedSearchBase<PluginTable<IdeaPluginDescriptor>>(installedPluginTable){
    public int getSelectedIndex(){
      return installedPluginTable.getSelectedRow();
    }
    public Object[] getAllElements(){
      return installedPluginTable.getElements();
    }
    public String getElementText(    Object element){
      return ((IdeaPluginDescriptor)element).getName();
    }
    public void selectElement(    Object element,    String selectedText){
      for (int i=0; i < installedPluginTable.getRowCount(); i++) {
        if (installedPluginTable.getObjectAt(i).getName().equals(((IdeaPluginDescriptor)element).getName())) {
          installedPluginTable.setRowSelectionInterval(i,i);
          TableUtil.scrollSelectionToVisible(installedPluginTable);
          break;
        }
      }
    }
  }
;
}
