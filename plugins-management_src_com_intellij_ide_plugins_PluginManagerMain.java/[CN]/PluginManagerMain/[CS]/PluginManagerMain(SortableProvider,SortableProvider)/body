{
  myDescriptionTextArea.addHyperlinkListener(new MyHyperlinkListener());
  myChangeNotesTextArea.addHyperlinkListener(new MyHyperlinkListener());
  installedPluginsModel=new InstalledPluginsTableModel(installedProvider);
  installedPluginTable=new PluginTable(installedPluginsModel);
  JScrollPane installedScrollPane=ScrollPaneFactory.createScrollPane(installedPluginTable);
  availablePluginsModel=new AvailablePluginsTableModel(availableProvider);
  availablePluginsTable=new PluginTable(availablePluginsModel);
  JScrollPane availableScrollPane=ScrollPaneFactory.createScrollPane(availablePluginsTable);
  installTableActions(installedPluginTable);
  installTableActions(availablePluginsTable);
  myHttpProxySettingsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      HTTPProxySettingsDialog settingsDialog=new HTTPProxySettingsDialog();
      settingsDialog.pack();
      settingsDialog.show();
    }
  }
);
  myTabbedPane=new TabbedPaneWrapper();
  myTablePanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  myTablePanel.setMinimumSize(new Dimension(400,-1));
  myTabbedPane.addTab(IdeBundle.message("plugin.status.installed"),installedScrollPane);
  myTabbedPane.addTab(IdeBundle.message("plugin.status.available"),availableScrollPane);
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      final PluginTable pluginTable=getPluginTable();
      TableUtil.ensureSelectionExists(pluginTable);
      pluginInfoUpdate(pluginTable.getSelectedObject());
      myActionToolbar.updateActionsImmediately();
    }
  }
);
  GuiUtils.replaceJSplitPaneWithIDEASplitter(main);
  myToolbarPanel.setLayout(new BorderLayout());
  myActionToolbar=ActionManager.getInstance().createActionToolbar("PluginManaer",getActionGroup(),true);
  myToolbarPanel.add(myActionToolbar.getComponent(),BorderLayout.WEST);
  myActionToolbar.updateActionsImmediately();
}
