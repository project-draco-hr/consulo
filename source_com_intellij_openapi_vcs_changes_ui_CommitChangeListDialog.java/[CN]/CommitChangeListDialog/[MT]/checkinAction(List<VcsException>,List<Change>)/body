{
  if (mySession != null) {
    return new Runnable(){
      public void run(){
        mySession.execute(myBrowser.getCurrentIncludedChanges(),getCommitMessage());
      }
    }
;
  }
  return new Runnable(){
    public void run(){
      try {
        final List<FilePath> pathsToRefresh=new ArrayList<FilePath>();
        ChangesUtil.processChangesByVcs(myProject,myBrowser.getCurrentIncludedChanges(),new ChangesUtil.PerVcsProcessor<Change>(){
          public void process(          AbstractVcs vcs,          List<Change> changes){
            final ChangeProvider provider=vcs.getChangeProvider();
            if (provider != null) {
              List<FilePath> paths=ChangesUtil.getPaths(changes);
              pathsToRefresh.addAll(paths);
              final List<VcsException> exceptions=provider.commit(changes,getCommitMessage());
              if (exceptions.size() > 0) {
                vcsExceptions.addAll(exceptions);
                changesFailedToCommit.addAll(changes);
              }
            }
          }
        }
);
        final LvcsAction lvcsAction=LocalVcs.getInstance(myProject).startAction(myActionName,"",true);
        VirtualFileManager.getInstance().refresh(true,new Runnable(){
          public void run(){
            lvcsAction.finish();
            FileStatusManager.getInstance(myProject).fileStatusesChanged();
            for (            FilePath path : pathsToRefresh) {
              VcsDirtyScopeManager.getInstance(myProject).fileDirty(path);
            }
          }
        }
);
        AbstractVcsHelper.getInstance(myProject).showErrors(vcsExceptions,myActionName);
      }
  finally {
        commitCompleted(vcsExceptions,changesFailedToCommit,VcsConfiguration.getInstance(myProject),myHandlers,getCommitMessage());
      }
    }
  }
;
}
