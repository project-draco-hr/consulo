{
  super(project,true);
  myProject=project;
  myChanges=list.getChanges();
  myIncludedChanges=new ArrayList<Change>(changes);
  myActionName="Commit Changes";
  final DefaultListModel listModel=new DefaultListModel();
  myChangesList.setModel(listModel);
  for (  Change change : myChanges) {
    listModel.addElement(change);
  }
  myChangesList.setCellRenderer(new MyListCellRenderer());
  myAdditionalOptionsPanel.setLayout(new BorderLayout());
  Box optionsBox=Box.createVerticalBox();
  Box vcsCommitOptions=Box.createVerticalBox();
  boolean hasVcsOptions=false;
  final List<AbstractVcs> vcses=getAffectedVcses();
  for (  AbstractVcs vcs : vcses) {
    final CheckinEnvironment checkinEnvironment=vcs.getCheckinEnvironment();
    if (checkinEnvironment != null) {
      final RefreshableOnComponent options=checkinEnvironment.createAdditionalOptionsPanel(this,true);
      if (options != null) {
        vcsCommitOptions.add(options.getComponent());
        myAdditionalComponents.add(options);
        hasVcsOptions=true;
      }
    }
  }
  if (hasVcsOptions) {
    vcsCommitOptions.add(Box.createVerticalGlue());
    optionsBox.add(vcsCommitOptions);
  }
  boolean beforeVisible=false;
  boolean afterVisible=false;
  Box beforeBox=Box.createVerticalBox();
  Box afterBox=Box.createVerticalBox();
  final List<CheckinHandlerFactory> handlerFactories=ProjectLevelVcsManager.getInstance(project).getRegisteredCheckinHandlerFactories();
  for (  CheckinHandlerFactory factory : handlerFactories) {
    final CheckinHandler handler=factory.createHandler(this);
    myHandlers.add(handler);
    final RefreshableOnComponent beforePanel=handler.getBeforeCheckinConfigurationPanel();
    if (beforePanel != null) {
      beforeBox.add(beforePanel.getComponent());
      beforeVisible=true;
      myAdditionalComponents.add(beforePanel);
    }
    final RefreshableOnComponent afterPanel=handler.getAfterCheckinConfigurationPanel();
    if (afterPanel != null) {
      afterBox.add(afterPanel.getComponent());
      afterVisible=true;
      myAdditionalComponents.add(afterPanel);
    }
  }
  if (beforeVisible) {
    beforeBox.add(Box.createVerticalGlue());
    beforeBox.setBorder(IdeBorderFactory.createTitledBorder(VcsBundle.message("border.standard.checkin.options.group")));
    optionsBox.add(beforeBox);
  }
  if (afterVisible) {
    afterBox.add(Box.createVerticalGlue());
    afterBox.setBorder(IdeBorderFactory.createTitledBorder(VcsBundle.message("border.standard.after.checkin.options.group")));
    optionsBox.add(afterBox);
  }
  if (hasVcsOptions || beforeVisible || afterVisible) {
    optionsBox.add(Box.createVerticalGlue());
    myAdditionalOptionsPanel.add(optionsBox,BorderLayout.NORTH);
  }
  myChangesList.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      toggleSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  myChangesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 1) {
        toggleSelection();
      }
    }
  }
);
  setOKButtonText("Commit");
  setTitle(myActionName);
  init();
}
