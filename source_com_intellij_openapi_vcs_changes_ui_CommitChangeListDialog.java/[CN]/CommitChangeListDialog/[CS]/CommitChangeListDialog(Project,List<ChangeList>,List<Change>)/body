{
  super(project,true);
  myProject=project;
  myChangeLists=changeLists;
  myAllChanges=new ArrayList<Change>();
  ChangeList initalListSelection=null;
  for (  ChangeList list : changeLists) {
    myAllChanges.addAll(list.getChanges());
    if (list.isDefault()) {
      initalListSelection=list;
    }
  }
  if (initalListSelection == null) {
    initalListSelection=changeLists.get(0);
  }
  myIncludedChanges=new HashSet<Change>(changes);
  myActionName="Commit Changes";
  myAdditionalOptionsPanel=new JPanel();
  myCommitMessageArea=new CommitMessage();
  myChangesList=new JList(new DefaultListModel());
  new ListSpeedSearch(myChangesList){
    protected String getElementText(    Object element){
      if (element instanceof Change) {
        return getFilePath((Change)element).getName();
      }
      return super.getElementText(element);
    }
  }
;
  setSelectedList(initalListSelection);
  setCommitMessage(CheckinDialog.getInitialMessage(getPaths(),project));
  myChangesList.setCellRenderer(new MyListCellRenderer());
  myAdditionalOptionsPanel.setLayout(new BorderLayout());
  Box optionsBox=Box.createVerticalBox();
  Box vcsCommitOptions=Box.createVerticalBox();
  boolean hasVcsOptions=false;
  final List<AbstractVcs> vcses=getAffectedVcses();
  for (  AbstractVcs vcs : vcses) {
    final CheckinEnvironment checkinEnvironment=vcs.getCheckinEnvironment();
    if (checkinEnvironment != null) {
      final RefreshableOnComponent options=checkinEnvironment.createAdditionalOptionsPanelForCheckinProject(this);
      if (options != null) {
        JPanel vcsOptions=new JPanel(new BorderLayout());
        vcsOptions.add(options.getComponent());
        vcsOptions.setBorder(IdeBorderFactory.createTitledHeaderBorder(vcs.getDisplayName()));
        vcsCommitOptions.add(vcsOptions);
        myAdditionalComponents.add(options);
        hasVcsOptions=true;
      }
    }
  }
  if (hasVcsOptions) {
    vcsCommitOptions.add(Box.createVerticalGlue());
    optionsBox.add(vcsCommitOptions);
  }
  boolean beforeVisible=false;
  boolean afterVisible=false;
  Box beforeBox=Box.createVerticalBox();
  Box afterBox=Box.createVerticalBox();
  final List<CheckinHandlerFactory> handlerFactories=ProjectLevelVcsManager.getInstance(project).getRegisteredCheckinHandlerFactories();
  for (  CheckinHandlerFactory factory : handlerFactories) {
    final CheckinHandler handler=factory.createHandler(this);
    myHandlers.add(handler);
    final RefreshableOnComponent beforePanel=handler.getBeforeCheckinConfigurationPanel();
    if (beforePanel != null) {
      beforeBox.add(beforePanel.getComponent());
      beforeVisible=true;
      myAdditionalComponents.add(beforePanel);
    }
    final RefreshableOnComponent afterPanel=handler.getAfterCheckinConfigurationPanel();
    if (afterPanel != null) {
      afterBox.add(afterPanel.getComponent());
      afterVisible=true;
      myAdditionalComponents.add(afterPanel);
    }
  }
  if (beforeVisible) {
    beforeBox.add(Box.createVerticalGlue());
    beforeBox.setBorder(IdeBorderFactory.createTitledHeaderBorder(VcsBundle.message("border.standard.checkin.options.group")));
    optionsBox.add(beforeBox);
  }
  if (afterVisible) {
    afterBox.add(Box.createVerticalGlue());
    afterBox.setBorder(IdeBorderFactory.createTitledHeaderBorder(VcsBundle.message("border.standard.after.checkin.options.group")));
    optionsBox.add(afterBox);
  }
  if (hasVcsOptions || beforeVisible || afterVisible) {
    optionsBox.add(Box.createVerticalGlue());
    myAdditionalOptionsPanel.add(optionsBox,BorderLayout.NORTH);
  }
  myChangesList.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      toggleSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myChangesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final int idx=myChangesList.locationToIndex(e.getPoint());
      if (idx >= 0) {
        final Rectangle baseRect=myChangesList.getCellBounds(idx,idx);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (baseRect.contains(e.getPoint())) {
          final Change currentSelection=(Change)myChangesList.getModel().getElementAt(idx);
          toggleChange(currentSelection);
        }
 else         if (e.getClickCount() == 2) {
          showDiff();
        }
      }
    }
  }
);
  setOKButtonText("Commit");
  setTitle(myActionName);
  restoreState();
  init();
}
