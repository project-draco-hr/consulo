{
  IElementType tokenType=lexer.getTokenType();
  String token=getString(lexer,expression);
  if (tokenType == JavaTokenType.STRING_LITERAL) {
    advance(lexer);
    return new ConstantNode(token.substring(1,token.length() - 1).replaceAll("\\\\n","\n").replaceAll("\\\\r","\r").replaceAll("\\\\t","\t").replaceAll("\\\\f","\f").replaceAll("\\\\(.)","$1"));
  }
  if (tokenType != JavaTokenType.IDENTIFIER) {
    System.out.println("Bad macro syntax: Not identifier: " + token);
    advance(lexer);
    return new ConstantNode("");
  }
  Macro macro=MacroFactory.createMacro(token);
  if (macro == null) {
    return parseVariable(lexer,expression);
  }
  advance(lexer);
  MacroCallNode macroCallNode=new MacroCallNode(macro);
  if (lexer.getTokenType() == null) {
    return macroCallNode;
  }
  String token2=getString(lexer,expression);
  if (!token2.equals("(")) {
    return macroCallNode;
  }
  advance(lexer);
  parseParameters(macroCallNode,lexer,expression);
  String token3=getString(lexer,expression);
  if (!token3.equals(")")) {
    System.out.println("Bad macro syntax: ) expected: " + expression);
  }
  advance(lexer);
  return macroCallNode;
}
