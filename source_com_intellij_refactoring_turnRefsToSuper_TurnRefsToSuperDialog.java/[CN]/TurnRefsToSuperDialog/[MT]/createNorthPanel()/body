{
  JPanel panel=new JPanel();
  panel.setBorder(IdeBorderFactory.createBorder());
  panel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.insets=new Insets(4,8,4,8);
  gbConstraints.weighty=1;
  gbConstraints.weightx=1;
  gbConstraints.gridy=0;
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.anchor=GridBagConstraints.WEST;
  final JLabel classListLabel=new JLabel("Change usages of " + mySubClass.getQualifiedName() + " to:");
  panel.add(classListLabel,gbConstraints);
  mySuperClassesList=new JList(mySuperClasses.toArray());
  mySuperClassesList.setCellRenderer(new ClassCellRenderer());
  mySuperClassesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  classListLabel.setLabelFor(mySuperClassesList);
  classListLabel.setDisplayedMnemonic('C');
  PsiClass nearestBase=RefactoringHierarchyUtil.getNearestBaseClass(mySubClass,true);
  int indexToSelect=0;
  if (nearestBase != null) {
    indexToSelect=mySuperClasses.indexOf(nearestBase);
  }
  mySuperClassesList.setSelectedIndex(indexToSelect);
  gbConstraints.gridy++;
  panel.add(new JScrollPane(mySuperClassesList),gbConstraints);
  gbConstraints.gridy++;
  myCbReplaceInstanceOf.setMnemonic('U');
  myCbReplaceInstanceOf.setSelected(false);
  myCbReplaceInstanceOf.setFocusable(false);
  panel.add(myCbReplaceInstanceOf,gbConstraints);
  return panel;
}
