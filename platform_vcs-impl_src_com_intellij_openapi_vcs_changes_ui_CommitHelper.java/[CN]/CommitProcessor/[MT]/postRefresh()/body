{
  return new Runnable(){
    @Override public void run(){
      if (myAction != null) {
        myAction.finish();
      }
      if (!myProject.isDisposed()) {
        final ChangeListManager clManager=ChangeListManager.getInstance(myProject);
        clManager.invokeAfterUpdate(new Runnable(){
          @Override public void run(){
            if (myCommitSuccess) {
              if (ChangeListsModificationAfterCommit.DELETE_LIST.equals(myAfterVcsRefreshModification)) {
                if (!myKeepChangeListAfterCommit) {
                  clManager.removeChangeList(myChangeList.getName());
                }
              }
 else               if (ChangeListsModificationAfterCommit.MOVE_OTHERS.equals(myAfterVcsRefreshModification)) {
                ChangelistMoveOfferDialog dialog=new ChangelistMoveOfferDialog(myConfiguration);
                if (dialog.showAndGet()) {
                  final Collection<Change> changes=clManager.getDefaultChangeList().getChanges();
                  MoveChangesToAnotherListAction.askAndMove(myProject,changes,null);
                }
              }
            }
            final CommittedChangesCache cache=CommittedChangesCache.getInstance(myProject);
            cache.refreshAllCachesAsync(false,true);
            cache.refreshIncomingChangesAsync();
          }
        }
,InvokeAfterUpdateMode.SILENT,null,new Consumer<VcsDirtyScopeManager>(){
          @Override public void consume(          final VcsDirtyScopeManager vcsDirtyScopeManager){
            for (            FilePath path : myPathsToRefresh) {
              vcsDirtyScopeManager.fileDirty(path);
            }
          }
        }
,null);
        LocalHistory.getInstance().putSystemLabel(myProject,myActionName + ": " + myCommitMessage);
      }
    }
  }
;
}
