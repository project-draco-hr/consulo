{
  List<JavaArrangementOverriddenMethodsInfo> result=new ArrayList<JavaArrangementOverriddenMethodsInfo>();
  final TObjectIntHashMap<PsiMethod> weights=new TObjectIntHashMap<PsiMethod>();
  Comparator<Pair<PsiMethod,PsiMethod>> comparator=new Comparator<Pair<PsiMethod,PsiMethod>>(){
    @Override public int compare(    Pair<PsiMethod,PsiMethod> o1,    Pair<PsiMethod,PsiMethod> o2){
      return weights.get(o1.first) - weights.get(o2.first);
    }
  }
;
  for (  Map.Entry<PsiClass,List<Pair<PsiMethod,PsiMethod>>> entry : myOverriddenMethods.entrySet()) {
    JavaArrangementOverriddenMethodsInfo info=new JavaArrangementOverriddenMethodsInfo(entry.getKey().getName());
    weights.clear();
    int i=0;
    for (    PsiMethod method : entry.getKey().getMethods()) {
      weights.put(method,i++);
    }
    ContainerUtil.sort(entry.getValue(),comparator);
    for (    Pair<PsiMethod,PsiMethod> pair : entry.getValue()) {
      JavaElementArrangementEntry overridingMethodEntry=myMethodEntriesMap.get(pair.second);
      if (overridingMethodEntry != null) {
        info.addMethodEntry(overridingMethodEntry);
      }
    }
    if (!info.getMethodEntries().isEmpty()) {
      result.add(info);
    }
  }
  return result;
}
