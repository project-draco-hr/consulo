{
  final List<Pair<K,String>> keys=new ArrayList<Pair<K,String>>();
  forEachEntry(new TObjectObjectProcedure<K,Collection<V>>(){
    @Override public boolean execute(    final K a,    final Collection<V> b){
      final String keyStr=a instanceof File && !SystemInfo.isFileSystemCaseSensitive ? ((File)a).getPath().toLowerCase(Locale.US) : a.toString();
      keys.add(new Pair<K,String>(a,keyStr));
      return true;
    }
  }
);
  Collections.sort(keys,new Comparator<Pair<K,String>>(){
    @Override public int compare(    Pair<K,String> o1,    Pair<K,String> o2){
      return o1.second.compareTo(o2.second);
    }
  }
);
  for (  final Pair<K,String> a : keys) {
    final Collection<V> b=get(a.first);
    stream.print("  Key: ");
    stream.println(a.second);
    stream.println("  Values:");
    final List<String> list=new LinkedList<String>();
    for (    final V value : b) {
      final ByteArrayOutputStream baos=new ByteArrayOutputStream();
      final PrintStream s=new PrintStream(baos);
      value.toStream(context,s);
      list.add(baos.toString());
    }
    Collections.sort(list);
    for (    final String l : list) {
      stream.print(l);
    }
    stream.println("  End Of Values");
  }
}
