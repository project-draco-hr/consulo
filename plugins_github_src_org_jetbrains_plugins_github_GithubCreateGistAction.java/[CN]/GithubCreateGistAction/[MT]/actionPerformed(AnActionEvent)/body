{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDefault()) {
    return;
  }
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  if (editor == null) {
    return;
  }
  final VirtualFile file=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  if (file == null) {
    return;
  }
  final boolean useGitHubAccount;
  if (!GithubUtil.checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    useGitHubAccount=GithubUtil.checkCredentials(project);
  }
 else {
    useGitHubAccount=true;
  }
  final GitHubCreateGistDialog dialog=new GitHubCreateGistDialog(project,useGitHubAccount);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final GithubSettings settings=GithubSettings.getInstance();
  final String password=settings.getPassword();
  final Ref<String> url=new Ref<String>();
  final String description=dialog.getDescription();
  final boolean isPrivate=dialog.isPrivate();
  final boolean anonymous=dialog.isAnonimous();
  final boolean openInBrowser=dialog.isOpenInBrowser();
  final String text=editor.getSelectionModel().getSelectedText();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      final HttpClient client=anonymous ? GithubUtil.getHttpClient(null,null) : GithubUtil.getHttpClient(settings.getLogin(),password);
      final PostMethod method=new PostMethod("https://gist.github.com/gists");
      method.addParameters(new NameValuePair[]{new NameValuePair("description",description),new NameValuePair("file_ext[gistfile1]","." + file.getExtension()),new NameValuePair("file_name[gistfile1]",file.getNameWithoutExtension()),new NameValuePair("file_contents[gistfile1]",text)});
      if (isPrivate) {
        method.addParameter("action_button","private");
      }
      try {
        client.executeMethod(method);
        final String responce=method.getResponseBodyAsString();
        final Matcher matcher=Pattern.compile("\\d+").matcher(responce);
        matcher.find();
        url.set("https://gist.github.com/" + matcher.group());
      }
 catch (      IOException e1) {
        LOG.error("Failed to create gist: " + e1);
        return;
      }
 finally {
        method.releaseConnection();
      }
    }
  }
,"Communicating With GitHub",false,project);
  if (url.isNull()) {
    return;
  }
  if (openInBrowser) {
    BrowserUtil.launchBrowser(url.get());
  }
 else {
    Messages.showInfoMessage(project,"Your gist url: " + url.get(),"Gist Created Successfully");
  }
}
