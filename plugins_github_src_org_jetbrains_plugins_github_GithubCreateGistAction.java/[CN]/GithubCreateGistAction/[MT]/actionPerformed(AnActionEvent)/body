{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDefault()) {
    return;
  }
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  if (editor == null) {
    return;
  }
  final VirtualFile file=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  if (file == null) {
    return;
  }
  final boolean useGitHubAccount;
  if (!GithubUtil.checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    useGitHubAccount=GithubUtil.checkCredentials(project);
  }
 else {
    useGitHubAccount=true;
  }
  final GitHubCreateGistDialog dialog=new GitHubCreateGistDialog(project,useGitHubAccount);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final String description=dialog.getDescription();
  final boolean isPrivate=dialog.isPrivate();
  final boolean anonymous=dialog.isAnonimous();
  final boolean openInBrowser=dialog.isOpenInBrowser();
  final SelectionModel selectionModel=editor.getSelectionModel();
  final String text=selectionModel.hasSelection() ? selectionModel.getSelectedText() : editor.getDocument().getText();
  final GithubSettings settings=GithubSettings.getInstance();
  final HttpClient client=anonymous ? GithubUtil.getHttpClient(null,null) : GithubUtil.getHttpClient(settings.getLogin(),settings.getPassword());
  client.getParams().setContentCharset("UTF-8");
  final PostMethod method=new PostMethod("https://gist.github.com/gists");
  method.addParameters(new NameValuePair[]{new NameValuePair("description",description),new NameValuePair("file_ext[gistfile1]","." + file.getExtension()),new NameValuePair("file_name[gistfile1]",file.getNameWithoutExtension()),new NameValuePair("file_contents[gistfile1]",text)});
  if (isPrivate) {
    method.addParameter("action_button","private");
  }
  try {
    client.executeMethod(method);
    final String responce=method.getResponseBodyAsString();
    final Matcher matcher=Pattern.compile("\\d+").matcher(responce);
    matcher.find();
    final String url="https://gist.github.com/" + matcher.group();
    if (openInBrowser) {
      BrowserUtil.launchBrowser(url);
    }
 else {
      Messages.showInfoMessage(project,"Gist successfully created: " + url,"Gist Created");
    }
  }
 catch (  IOException e1) {
    LOG.error("Failed to create gist: " + e1);
    return;
  }
 finally {
    method.releaseConnection();
  }
}
