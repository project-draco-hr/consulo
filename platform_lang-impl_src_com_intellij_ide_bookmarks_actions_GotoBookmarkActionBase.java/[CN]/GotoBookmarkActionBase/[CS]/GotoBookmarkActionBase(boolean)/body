{
  super(new EditorActionHandler(){
    @Override public void execute(    Editor editor,    DataContext dataContext){
      navigateToBookmark(dataContext,editor);
    }
    @Override public boolean isEnabled(    Editor editor,    DataContext dataContext){
      return getBookmarkToGo(dataContext,editor) != null;
    }
    private void navigateToBookmark(    DataContext dataContext,    @NotNull final Editor editor){
      final Bookmark bookmark=getBookmarkToGo(dataContext,editor);
      if (bookmark == null)       return;
      int line=bookmark.getLine();
      if (line >= editor.getDocument().getLineCount())       return;
      if (line < 0)       line=0;
      LogicalPosition pos=new LogicalPosition(line,0);
      editor.getSelectionModel().removeSelection();
      editor.getCaretModel().removeSecondaryCarets();
      editor.getCaretModel().moveToLogicalPosition(pos);
      editor.getScrollingModel().scrollTo(new LogicalPosition(line,0),ScrollType.CENTER);
    }
    @Nullable private Bookmark getBookmarkToGo(    DataContext dataContext,    Editor editor){
      Project project=CommonDataKeys.PROJECT.getData(dataContext);
      if (project == null)       return null;
      BookmarkManager manager=BookmarkManager.getInstance(project);
      return next ? manager.getNextBookmark(editor,true) : manager.getPreviousBookmark(editor,true);
    }
  }
);
}
