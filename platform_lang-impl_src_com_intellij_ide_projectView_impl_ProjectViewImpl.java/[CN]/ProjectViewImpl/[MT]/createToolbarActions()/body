{
  myActionGroup.removeAll();
  if (ProjectViewDirectoryHelper.getInstance(myProject).supportsFlattenPackages()) {
    myActionGroup.addAction(new PaneOptionAction(myFlattenPackages,IdeBundle.message("action.flatten.packages"),IdeBundle.message("action.flatten.packages"),PlatformIcons.FLATTEN_PACKAGES_ICON,ourFlattenPackagesDefaults){
      public void setSelected(      AnActionEvent event,      boolean flag){
        final AbstractProjectViewPane viewPane=getCurrentProjectViewPane();
        final SelectionInfo selectionInfo=SelectionInfo.create(viewPane);
        super.setSelected(event,flag);
        selectionInfo.apply(viewPane);
      }
    }
).setAsSecondary(true);
  }
class FlattenPackagesDependableAction extends PaneOptionAction {
    FlattenPackagesDependableAction(    Map<String,Boolean> optionsMap,    final String text,    final String description,    final Icon icon,    boolean optionDefaultValue){
      super(optionsMap,text,description,icon,optionDefaultValue);
    }
    public void update(    AnActionEvent e){
      super.update(e);
      final Presentation presentation=e.getPresentation();
      presentation.setVisible(isFlattenPackages(myCurrentViewId));
    }
  }
  if (ProjectViewDirectoryHelper.getInstance(myProject).supportsHideEmptyMiddlePackages()) {
    myActionGroup.addAction(new HideEmptyMiddlePackagesAction()).setAsSecondary(true);
  }
  if (ProjectViewDirectoryHelper.getInstance(myProject).supportsFlattenPackages()) {
    myActionGroup.addAction(new FlattenPackagesDependableAction(myAbbreviatePackageNames,IdeBundle.message("action.abbreviate.qualified.package.names"),IdeBundle.message("action.abbreviate.qualified.package.names"),IconLoader.getIcon("/objectBrowser/abbreviatePackageNames.png"),ourAbbreviatePackagesDefaults){
      public boolean isSelected(      AnActionEvent event){
        return super.isSelected(event) && isAbbreviatePackageNames(myCurrentViewId);
      }
      public void update(      AnActionEvent e){
        super.update(e);
        if (ScopeViewPane.ID.equals(myCurrentViewId)) {
          e.getPresentation().setEnabled(false);
        }
      }
    }
).setAsSecondary(true);
  }
  if (!PlatformUtils.isCidr()) {
    myActionGroup.addAction(new PaneOptionAction(myShowMembers,IdeBundle.message("action.show.members"),IdeBundle.message("action.show.hide.members"),IconLoader.getIcon("/objectBrowser/showMembers.png"),ourShowMembersDefaults)).setAsSecondary(true);
  }
  myActionGroup.addAction(myAutoScrollToSourceHandler.createToggleAction()).setAsSecondary(true);
  myActionGroup.addAction(myAutoScrollFromSourceHandler.createToggleAction()).setAsSecondary(true);
  myActionGroup.addAction(new SortByTypeAction()).setAsSecondary(true);
  myActionGroup.addAction(new ScrollFromSourceAction());
  AnAction collapseAllAction=CommonActionsManager.getInstance().createCollapseAllAction(new TreeExpander(){
    public void expandAll(){
    }
    public boolean canExpand(){
      return false;
    }
    public void collapseAll(){
      AbstractProjectViewPane pane=getCurrentProjectViewPane();
      JTree tree=pane.myTree;
      if (tree != null) {
        TreeUtil.collapseAll(tree,-1);
      }
    }
    public boolean canCollapse(){
      return true;
    }
  }
,getComponent());
  getCurrentProjectViewPane().addToolbarActions(myActionGroup);
}
