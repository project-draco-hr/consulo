{
  final AbstractProjectViewPane currentProjectViewPane=getCurrentProjectViewPane();
  if (currentProjectViewPane != null) {
    final Object paneSpecificData=currentProjectViewPane.getData(dataId);
    if (paneSpecificData != null)     return paneSpecificData;
  }
  if (DataConstants.PSI_ELEMENT.equals(dataId)) {
    if (currentProjectViewPane == null)     return null;
    final PsiElement[] elements=currentProjectViewPane.getSelectedPSIElements();
    return elements.length == 1 ? elements[0] : null;
  }
  if (DataConstants.PSI_ELEMENT_ARRAY.equals(dataId)) {
    if (currentProjectViewPane == null) {
      return null;
    }
    PsiElement[] elements=currentProjectViewPane.getSelectedPSIElements();
    return elements.length == 0 ? null : elements;
  }
  if (DataConstants.VIRTUAL_FILE_ARRAY.equals(dataId)) {
    PsiElement[] psiElements=(PsiElement[])getData(DataConstants.PSI_ELEMENT_ARRAY);
    if (psiElements == null)     return null;
    Set<VirtualFile> files=new LinkedHashSet<VirtualFile>();
    for (    PsiElement element : psiElements) {
      if (element instanceof PsiFileSystemItem) {
        files.add(((PsiFileSystemItem)element).getVirtualFile());
      }
    }
    return files.size() > 0 ? files.toArray(new VirtualFile[files.size()]) : null;
  }
  if (DataConstantsEx.TARGET_PSI_ELEMENT.equals(dataId)) {
    return null;
  }
  if (DataConstants.CUT_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCutProvider();
  }
  if (DataConstants.COPY_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getCopyProvider();
  }
  if (DataConstants.PASTE_PROVIDER.equals(dataId)) {
    return myCopyPasteDelegator.getPasteProvider();
  }
  if (DataConstants.IDE_VIEW.equals(dataId)) {
    return myIdeView;
  }
  if (DataConstants.DELETE_ELEMENT_PROVIDER.equals(dataId)) {
    final List<Module> modules=getSelectedElements(Module.class);
    if (!modules.isEmpty()) {
      return myDeleteModuleProvider;
    }
    final LibraryOrderEntry orderEntry=getSelectedLibrary();
    if (orderEntry != null) {
      return new DeleteProvider(){
        public void deleteElement(        DataContext dataContext){
          detachLibrary(orderEntry,myProject);
        }
        public boolean canDeleteElement(        DataContext dataContext){
          return true;
        }
      }
;
    }
    return myDeletePSIElementProvider;
  }
  if (DataConstants.HELP_ID.equals(dataId)) {
    return HelpID.PROJECT_VIEWS;
  }
  if (PROJECT_VIEW_DATA_CONSTANT.equals(dataId)) {
    return ProjectViewImpl.this;
  }
  if (DataConstants.PROJECT_CONTEXT.equals(dataId)) {
    Object selected=getSelectedNodeElement();
    return selected instanceof Project ? selected : null;
  }
  if (DataConstants.MODULE_CONTEXT.equals(dataId)) {
    Object selected=getSelectedNodeElement();
    if (selected instanceof Module) {
      return !((Module)selected).isDisposed() ? selected : null;
    }
 else     if (selected instanceof PsiDirectory) {
      return moduleByContentRoot(((PsiDirectory)selected).getVirtualFile());
    }
 else     if (selected instanceof VirtualFile) {
      return moduleByContentRoot((VirtualFile)selected);
    }
 else {
      return null;
    }
  }
  if (DataConstants.MODULE_CONTEXT_ARRAY.equals(dataId)) {
    return getSelectedModules();
  }
  if (DataConstantsEx.MODULE_GROUP_ARRAY.equals(dataId)) {
    final List<ModuleGroup> selectedElements=getSelectedElements(ModuleGroup.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new ModuleGroup[selectedElements.size()]);
  }
  if (DataConstantsEx.LIBRARY_GROUP_ARRAY.equals(dataId)) {
    final List<LibraryGroupElement> selectedElements=getSelectedElements(LibraryGroupElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new LibraryGroupElement[selectedElements.size()]);
  }
  if (DataConstantsEx.NAMED_LIBRARY_ARRAY.equals(dataId)) {
    final List<NamedLibraryElement> selectedElements=getSelectedElements(NamedLibraryElement.class);
    return selectedElements.isEmpty() ? null : selectedElements.toArray(new NamedLibraryElement[selectedElements.size()]);
  }
  return null;
}
