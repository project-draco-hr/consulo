{
  final Sandbox additionalData=(Sandbox)sdk.getSdkAdditionalData();
  if (additionalData != null) {
    additionalData.cleanupWatchedRoots();
  }
  final SdkModificator sdkModificator=sdk.getSdkModificator();
  final List<String> javaSdks=new ArrayList<String>();
  final Sdk[] sdks=sdkModel.getSdks();
  for (  Sdk jdk : sdks) {
    if (isValidInternalJdk(sdk,jdk)) {
      javaSdks.add(jdk.getName());
    }
  }
  if (javaSdks.isEmpty()) {
    JDKVersion requiredVer=getRequiredJdkVersion(sdk);
    if (requiredVer != null) {
      Messages.showErrorDialog(DevKitBundle.message("no.java.sdk.for.idea.sdk.found",requiredVer),"No Java SDK found");
    }
 else {
      Messages.showErrorDialog(DevKitBundle.message("no.idea.sdk.version.found"),"No Java SDK found");
    }
    return false;
  }
  final int choice=Messages.showChooseDialog("Select Java SDK to be used as IDEA internal platform","Select internal Java platform",ArrayUtil.toStringArray(javaSdks),javaSdks.get(0),Messages.getQuestionIcon());
  if (choice != -1) {
    final String name=javaSdks.get(choice);
    final Sdk jdk=sdkModel.findSdk(name);
    LOG.assertTrue(jdk != null);
    setupSdkPaths(sdkModificator,sdk.getHomePath(),jdk);
    sdkModificator.setSdkAdditionalData(new Sandbox(getDefaultSandbox(),jdk,sdk));
    sdkModificator.setVersionString(jdk.getVersionString());
    sdkModificator.commitChanges();
    return true;
  }
  return false;
}
