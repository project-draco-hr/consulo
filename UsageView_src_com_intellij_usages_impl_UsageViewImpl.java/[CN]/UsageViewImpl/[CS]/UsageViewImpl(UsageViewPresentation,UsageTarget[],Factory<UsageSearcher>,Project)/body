{
  myPresentation=presentation;
  myTargets=targets;
  myUsageSearcherFactory=usageSearcherFactory;
  myProject=project;
  myTree=new Tree(){
{
      ToolTipManager.sharedInstance().registerComponent(this);
    }
    public String getToolTipText(    MouseEvent e){
      TreePath path=getPathForLocation(e.getX(),e.getY());
      if (path != null) {
        if (getCellRenderer() instanceof UsageViewTreeCellRenderer) {
          return UsageViewTreeCellRenderer.getTooltipText(path.getLastPathComponent());
        }
      }
      return null;
    }
    public boolean isPathEditable(    final TreePath path){
      return path.getLastPathComponent() instanceof UsageViewTreeModelBuilder.TargetsRootNode;
    }
  }
;
  myRootPanel=new MyPanel(myTree);
  myModelTracker=new UsageModelTracker(project);
  final UsageViewTreeModelBuilder model=new UsageViewTreeModelBuilder(myPresentation,targets);
  myBuilder=new UsageNodeTreeBuilder(getActiveGroupingRules(project),getActiveFilteringRules(project),(GroupNode)model.getRoot());
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      myTree.setModel(model);
      myRootPanel.setLayout(new BorderLayout());
      JPanel toolbarPanel=new JPanel(new BorderLayout());
      toolbarPanel.add(createActionsToolbar(),BorderLayout.WEST);
      toolbarPanel.add(createFiltersToolbar(),BorderLayout.CENTER);
      myRootPanel.add(toolbarPanel,BorderLayout.WEST);
      myCentralPanel=new JPanel();
      myCentralPanel.setLayout(new BorderLayout());
      myRootPanel.add(myCentralPanel,BorderLayout.CENTER);
      setupCentralPanel();
      initTree();
      myTree.setCellRenderer(new UsageViewTreeCellRenderer(UsageViewImpl.this));
      collapseAll();
      myModelTracker.addListener(UsageViewImpl.this);
      if (myPresentation.isShowCancelButton()) {
        addButtonToLowerPane(new Runnable(){
          public void run(){
            close();
          }
        }
,UsageViewBundle.message("usage.view.cancel.button"));
      }
    }
  }
);
}
