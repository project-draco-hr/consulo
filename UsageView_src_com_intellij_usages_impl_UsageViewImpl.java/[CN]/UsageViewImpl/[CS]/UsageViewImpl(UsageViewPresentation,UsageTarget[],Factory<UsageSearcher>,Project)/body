{
  myPresentation=presentation;
  myTargets=targets;
  myUsageSearcherFactory=usageSearcherFactory;
  myProject=project;
  myRootPanel=new MyPanel(myTree);
  UsageViewTreeModelBuilder model=new UsageViewTreeModelBuilder(myPresentation,targets);
  myBuilder=new UsageNodeTreeBuilder(getGroupingRuleProvider().getActiveRules(project),getFilteringRuleProvider().getActiveRules(project),(GroupNode)model.getRoot());
  myTree.setModel(model);
  myRootPanel.setLayout(new BorderLayout());
  JPanel centralPanel=new JPanel();
  centralPanel.setLayout(new BorderLayout());
  myRootPanel.add(centralPanel,BorderLayout.CENTER);
  JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(createToolbar(),BorderLayout.WEST);
  toolbarPanel.add(createFiltersToolbar(),BorderLayout.CENTER);
  myRootPanel.add(toolbarPanel,BorderLayout.WEST);
  centralPanel.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  centralPanel.add(myButtonPanel,BorderLayout.SOUTH);
  initTree();
  myTree.setCellRenderer(new UsageViewTreeCellRenderer(this));
  collapseAll();
  myModelTracker=new UsageModelTracker(project);
  myModelTracker.addListener(new UsageModelTracker.UsageModelTrackerListener(){
    public void modelChanged(){
      myChangesDetected=true;
      updateLater();
    }
  }
);
  if (myPresentation.isShowCancelButton()) {
    addButtonToLowerPane(new Runnable(){
      public void run(){
        close();
      }
    }
,"Cancel",'C');
  }
}
