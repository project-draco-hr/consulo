{
  myPresentation=presentation;
  myTargets=targets;
  myUsageSearcherFactory=usageSearcherFactory;
  myProject=project;
  myTree=new Tree(){
{
      ToolTipManager.sharedInstance().registerComponent(this);
    }
    public String getToolTipText(    MouseEvent e){
      TreePath path=getPathForLocation(e.getX(),e.getY());
      if (path != null) {
        if (getCellRenderer() instanceof UsageViewTreeCellRenderer) {
          return UsageViewTreeCellRenderer.getTooltipText(path.getLastPathComponent());
        }
      }
      return null;
    }
    public boolean isPathEditable(    final TreePath path){
      return path.getLastPathComponent() instanceof UsageViewTreeModelBuilder.TargetsRootNode;
    }
  }
;
  myRootPanel=new MyPanel(myTree);
  myModelTracker=new UsageModelTracker(project,this);
  final UsageViewTreeModelBuilder model=new UsageViewTreeModelBuilder(myPresentation,targets);
  myRoot=(GroupNode)model.getRoot();
  myBuilder=new UsageNodeTreeBuilder(getActiveGroupingRules(project),getActiveFilteringRules(project),myRoot);
  final MessageBusConnection messageBusConnection=myProject.getMessageBus().connect(this);
  messageBusConnection.subscribe(UsageFilteringRuleProvider.RULES_CHANGED,new Runnable(){
    public void run(){
      rulesChanged();
    }
  }
);
  if (!myPresentation.isDetachedMode()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        if (isDisposed)         return;
        myTree.setModel(model);
        myRootPanel.setLayout(new BorderLayout());
        JPanel toolbarPanel=new JPanel(new BorderLayout());
        toolbarPanel.add(createActionsToolbar(),BorderLayout.WEST);
        toolbarPanel.add(createFiltersToolbar(),BorderLayout.CENTER);
        myRootPanel.add(toolbarPanel,BorderLayout.WEST);
        myCentralPanel=new JPanel();
        myCentralPanel.setLayout(new BorderLayout());
        myRootPanel.add(myCentralPanel,BorderLayout.CENTER);
        setupCentralPanel();
        initTree();
        myTree.setCellRenderer(new UsageViewTreeCellRenderer(UsageViewImpl.this));
        collapseAll();
        myModelTracker.addListener(UsageViewImpl.this);
        if (myPresentation.isShowCancelButton()) {
          addButtonToLowerPane(new Runnable(){
            public void run(){
              close();
            }
          }
,UsageViewBundle.message("usage.view.cancel.button"));
        }
        myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
          public void valueChanged(          final TreeSelectionEvent e){
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                if (isDisposed)                 return;
                List<UsageInfo> infos=getSelectedUsageInfos();
                if (infos != null && myUsagePreviewPanel != null) {
                  myUsagePreviewPanel.updateLayout(infos);
                }
              }
            }
);
          }
        }
);
      }
    }
);
  }
}
