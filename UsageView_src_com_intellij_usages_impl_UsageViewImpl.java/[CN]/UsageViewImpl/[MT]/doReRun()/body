{
  final Runnable process=new Runnable(){
    public void run(){
      setSearchInProgress(true);
      final com.intellij.usages.UsageViewManager usageViewManager=com.intellij.usages.UsageViewManager.getInstance(myProject);
      usageViewManager.setCurrentSearchCancelled(false);
      myChangesDetected=false;
      UsageSearcher usageSearcher=myUsageSearcherFactory.create();
      usageSearcher.generate(new Processor<Usage>(){
        public boolean process(        final Usage usage){
          appendUsageLater(usage);
          if (usageViewManager.searchHasBeenCancelled())           return false;
          ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
          return indicator == null || !indicator.isCanceled();
        }
      }
);
      setSearchInProgress(false);
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(myProject,UsageViewManagerImpl.getProgressTitle(myPresentation),process,null,null);
}
