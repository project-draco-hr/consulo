{
  myFixture.copyDirectoryToProject("","");
  final Project project=getProject();
  final List<Set<SchemaTypeInfo>> childrenOfType=SchemaTypeInheritanceIndex.getDirectChildrenOfType(project,"http://a.b.c","baseSimpleType");
  Assert.assertNotNull(childrenOfType);
  final Set<SchemaTypeInfo> expected=new HashSet<SchemaTypeInfo>();
  expected.add(new SchemaTypeInfo("extSimple4",true,"http://a.b.c"));
  expected.add(new SchemaTypeInfo("extSimple1",true,"http://a.b.c"));
  expected.add(new SchemaTypeInfo("extComplex2",true,"http://a.b.c"));
  expected.add(new SchemaTypeInfo("extComplex2",true,"http://a.b.c.d"));
  for (  Set<SchemaTypeInfo> infos : childrenOfType) {
    for (    SchemaTypeInfo info : infos) {
      expected.remove(info);
    }
  }
  Assert.assertTrue(expected.isEmpty());
  final List<Set<SchemaTypeInfo>> childrenOfSimple4Type=SchemaTypeInheritanceIndex.getDirectChildrenOfType(project,"http://a.b.c","extSimple4");
  Assert.assertNotNull(childrenOfSimple4Type);
  final Set<SchemaTypeInfo> expectedSimple4=new HashSet<SchemaTypeInfo>();
  expectedSimple4.add(new SchemaTypeInfo("extSimple5",true,"http://a.b.c"));
  expectedSimple4.add(new SchemaTypeInfo("wiseElement",false,"http://a.b.c"));
  for (  Set<SchemaTypeInfo> infos : childrenOfSimple4Type) {
    for (    SchemaTypeInfo info : infos) {
      expectedSimple4.remove(info);
    }
  }
  Assert.assertTrue(expectedSimple4.isEmpty());
}
