{
  final String value=descriptor.getResolvedValue();
  if (value == null) {
    return;
  }
  final SpellCheckerManager manager=SpellCheckerManager.getInstance(module.getProject());
  PlainTextSplitter.getInstance().split(value,TextRange.allOf(value),new Consumer<TextRange>(){
    @Override public void consume(    TextRange textRange){
      String word=textRange.substring(value);
      if (manager.hasProblem(word)) {
        final List<String> suggestions=manager.getSuggestions(value);
        EditorQuickFixProvider quickFixProvider=null;
        if (suggestions.size() > 0 && prop instanceof IntroStringProperty) {
          quickFixProvider=new EditorQuickFixProvider(){
            @Override public QuickFix createQuickFix(            final GuiEditor editor,            final RadComponent component){
              return new PopupQuickFix<String>(editor,"Change to...",component){
                @Override public void run(){
                  ListPopup popup=JBPopupFactory.getInstance().createListPopup(getPopupStep());
                  popup.showUnderneathOf(component.getDelegee());
                }
                @Override public ListPopupStep<String> getPopupStep(){
                  return new BaseListPopupStep<String>("Select Replacement",suggestions){
                    @Override public PopupStep onChosen(                    String selectedValue,                    boolean finalChoice){
                      FormInspectionUtil.updateStringPropertyValue(editor,component,(IntroStringProperty)prop,descriptor,selectedValue);
                      return FINAL_CHOICE;
                    }
                  }
;
                }
              }
;
            }
          }
;
        }
        collector.addError(getID(),component,prop,"Typo in word '" + word + "'",quickFixProvider);
      }
    }
  }
);
}
