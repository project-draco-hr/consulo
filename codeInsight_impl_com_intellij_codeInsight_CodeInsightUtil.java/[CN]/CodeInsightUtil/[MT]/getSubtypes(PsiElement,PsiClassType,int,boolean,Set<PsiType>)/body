{
  final PsiClassType.ClassResolveResult baseResult=baseType.resolveGenerics();
  final PsiClass baseClass=baseResult.getElement();
  final PsiSubstitutor baseSubstitutor=baseResult.getSubstitutor();
  if (baseClass == null)   return;
  final FilterElementProcessor processor=new FilterElementProcessor(new AndFilter(new ClassFilter(PsiAnonymousClass.class,false),new ClassFilter(PsiTypeParameter.class,false),new ClassFilter(PsiClass.class)));
  final PsiManager manager=context.getManager();
  final PsiSearchHelper helper=manager.getSearchHelper();
  helper.processInheritors(processor,baseClass,context.getResolveScope(),true,false);
  final Iterator<PsiElement> iter=processor.getResults().iterator();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  inheritors:   while (iter.hasNext()) {
    PsiClass inheritor=(PsiClass)iter.next();
    if (!manager.getResolveHelper().isAccessible(inheritor,context,null))     continue;
    if (inheritor.getUserData(CompletionUtil.COPY_KEY) != null) {
      final PsiClass newClass=(PsiClass)inheritor.getUserData(CompletionUtil.COPY_KEY);
      if (newClass.isValid())       inheritor=newClass;
    }
    if (inheritor.getQualifiedName() == null && !manager.areElementsEquivalent(inheritor.getContainingFile(),context.getContainingFile())) {
      continue;
    }
    PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
    if (superSubstitutor == null)     continue;
    if (getRawSubtypes) {
      result.add(createType(inheritor,manager.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
      continue;
    }
    PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
    final Iterator<PsiTypeParameter> inheritorParamIter=PsiUtil.typeParametersIterator(inheritor);
    while (inheritorParamIter.hasNext()) {
      PsiTypeParameter inheritorParameter=inheritorParamIter.next();
      final Iterator<PsiTypeParameter> baseParamIter=PsiUtil.typeParametersIterator(baseClass);
      while (baseParamIter.hasNext()) {
        PsiTypeParameter baseParameter=baseParamIter.next();
        final PsiType substituted=superSubstitutor.substitute(baseParameter);
        PsiType arg=baseSubstitutor.substitute(baseParameter);
        if (arg instanceof PsiWildcardType)         arg=((PsiWildcardType)arg).getBound();
        PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(context));
        if (substitution == PsiType.NULL || substitution instanceof PsiWildcardType)         continue;
        if (substitution == null) {
          result.add(createType(inheritor,manager.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
          continue inheritors;
        }
        inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
        break;
      }
    }
    PsiType toAdd=createType(inheritor,inheritorSubstitutor,arrayDim);
    if (baseType.isAssignableFrom(toAdd)) {
      result.add(toAdd);
    }
  }
}
