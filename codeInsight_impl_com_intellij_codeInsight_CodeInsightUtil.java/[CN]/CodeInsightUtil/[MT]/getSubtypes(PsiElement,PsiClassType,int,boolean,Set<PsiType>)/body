{
  final PsiClassType.ClassResolveResult baseResult=baseType.resolveGenerics();
  final PsiClass baseClass=baseResult.getElement();
  final PsiSubstitutor baseSubstitutor=baseResult.getSubstitutor();
  if (baseClass == null)   return;
  final Query<PsiClass> query=new FilteredQuery<PsiClass>(ClassInheritorsSearch.search(baseClass,context.getResolveScope(),true,false,false),new Condition<PsiClass>(){
    public boolean value(    final PsiClass psiClass){
      return !(psiClass instanceof PsiTypeParameter);
    }
  }
);
  final PsiManager manager=context.getManager();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  query.forEach(new Processor<PsiClass>(){
    public boolean process(    PsiClass inheritor){
      if (!manager.getResolveHelper().isAccessible(inheritor,context,null))       return true;
      if (inheritor.getUserData(CompletionUtil.COPY_KEY) != null) {
        final PsiClass newClass=(PsiClass)inheritor.getUserData(CompletionUtil.COPY_KEY);
        if (newClass.isValid())         inheritor=newClass;
      }
      if (inheritor.getQualifiedName() == null && !manager.areElementsEquivalent(inheritor.getContainingFile(),context.getContainingFile())) {
        return true;
      }
      if (CompletionUtil.isInExcludedPackage(inheritor))       return true;
      PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
      if (superSubstitutor == null)       return true;
      if (getRawSubtypes) {
        result.add(createType(inheritor,manager.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
        return true;
      }
      PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
      final Iterator<PsiTypeParameter> inheritorParamIter=PsiUtil.typeParametersIterator(inheritor);
      while (inheritorParamIter.hasNext()) {
        PsiTypeParameter inheritorParameter=inheritorParamIter.next();
        final Iterator<PsiTypeParameter> baseParamIter=PsiUtil.typeParametersIterator(baseClass);
        while (baseParamIter.hasNext()) {
          PsiTypeParameter baseParameter=baseParamIter.next();
          final PsiType substituted=superSubstitutor.substitute(baseParameter);
          PsiType arg=baseSubstitutor.substitute(baseParameter);
          if (arg instanceof PsiWildcardType)           arg=((PsiWildcardType)arg).getBound();
          PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(context));
          if (substitution == PsiType.NULL || substitution instanceof PsiWildcardType)           continue;
          if (substitution == null) {
            result.add(createType(inheritor,manager.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
            return true;
          }
          inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
          break;
        }
      }
      PsiType toAdd=createType(inheritor,inheritorSubstitutor,arrayDim);
      if (baseType.isAssignableFrom(toAdd)) {
        result.add(toAdd);
      }
      return true;
    }
  }
);
}
