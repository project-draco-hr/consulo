{
  PsiElement commonParent=findCommonParent(root,startOffset,endOffset);
  if (commonParent == null)   return Collections.emptyList();
  final List<PsiElement> list=new ArrayList<PsiElement>();
  final int currentOffset=commonParent.getTextRange().getStartOffset();
  final PsiElementVisitor visitor=new PsiRecursiveElementVisitor(){
    int offset=currentOffset;
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitExpression(expression);
    }
    public void visitElement(    PsiElement element){
      if (element.getFirstChild() != null) {
        PsiElement child=element.getFirstChild();
        while (child != null) {
          if (offset > endOffset)           break;
          int start=offset;
          child.accept(this);
          if (startOffset <= start && offset <= endOffset)           list.add(child);
          child=child.getNextSibling();
        }
      }
 else {
        offset+=element.getTextLength();
      }
    }
  }
;
  commonParent.accept(visitor);
  list.add(commonParent);
  if (includeAllParents) {
    PsiElement parent=commonParent;
    while (parent != null && parent != root) {
      parent=parent.getParent();
      list.add(parent);
    }
  }
  return Collections.unmodifiableList(list);
}
