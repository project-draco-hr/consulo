{
  PsiElement commonParent=findCommonParent(root,startOffset,endOffset);
  if (commonParent == null)   return Collections.emptyList();
  final List<PsiElement> list=new ArrayList<PsiElement>();
  final int currentOffset=commonParent.getTextRange().getStartOffset();
  final PsiElementVisitor visitor=new JavaRecursiveElementVisitor(){
    int offset=currentOffset;
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitElement(    PsiElement element){
      PsiElement child=element.getFirstChild();
      if (child != null) {
        while (child != null) {
          if (offset > endOffset)           break;
          int start=offset;
          child.accept(this);
          if (startOffset <= start && offset <= endOffset)           list.add(child);
          child=child.getNextSibling();
        }
      }
 else {
        offset+=element.getTextLength();
      }
    }
    @Override public void visitMethod(    PsiMethod method){
      if (method instanceof JspHolderMethod && root != method) {
        list.addAll(getElementsInRange(method,startOffset,endOffset,false));
      }
 else {
        visitElement(method);
      }
    }
    @Override public void visitImportList(    PsiImportList list){
      if (!(list instanceof JspxImportList))       super.visitImportList(list);
    }
    @Override public void visitJspFile(    final JspFile file){
      visitFile(file);
    }
  }
;
  commonParent.accept(visitor);
  PsiElement parent=commonParent;
  while (parent != null && parent != root) {
    list.add(parent);
    parent=includeAllParents ? parent.getParent() : null;
  }
  list.add(root);
  return Collections.unmodifiableList(list);
}
