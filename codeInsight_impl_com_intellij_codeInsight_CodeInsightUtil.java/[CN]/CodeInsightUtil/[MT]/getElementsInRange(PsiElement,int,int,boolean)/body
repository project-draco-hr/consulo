{
  PsiElement commonParent=findCommonParent(root,startOffset,endOffset);
  if (commonParent == null)   return Collections.emptyList();
  final List<PsiElement> list=new ArrayList<PsiElement>();
  final int currentOffset=commonParent.getTextRange().getStartOffset();
  final TreeElementVisitor visitor=new TreeElementVisitor(){
    int offset=currentOffset;
    public void visitLeaf(    LeafElement leaf){
      offset+=leaf.getTextLength();
    }
    public void visitComposite(    CompositeElement composite){
      ChameleonTransforming.transformChildren(composite);
      for (TreeElement child=composite.getFirstChildNode(); child != null; child=child.getTreeNext()) {
        if (offset > endOffset)         break;
        int start=offset;
        child.acceptTree(this);
        if (startOffset <= start && offset <= endOffset) {
          list.add(child.getPsi());
        }
      }
    }
  }
;
  ((TreeElement)commonParent.getNode()).acceptTree(visitor);
  list.add(commonParent);
  if (includeAllParents) {
    PsiElement parent=commonParent;
    while (parent != root) {
      parent=parent.getParent();
      list.add(parent);
    }
  }
  return Collections.unmodifiableList(list);
}
