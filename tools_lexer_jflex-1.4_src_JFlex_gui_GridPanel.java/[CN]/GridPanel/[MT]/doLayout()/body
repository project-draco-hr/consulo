{
  Dimension size=getSize();
  size.height-=insets.top + insets.bottom;
  size.width-=insets.left + insets.right;
  float cellWidth=size.width / cols;
  float cellHeight=size.height / rows;
  for (int i=0; i < constraints.size(); i++) {
    GridPanelConstraint c=(GridPanelConstraint)constraints.elementAt(i);
    float x=cellWidth * c.x + insets.left + hgap / 2;
    float y=cellHeight * c.y + insets.right + vgap / 2;
    float width, height;
    if (c.handle == FILL) {
      width=(cellWidth - hgap) * c.width;
      height=(cellHeight - vgap) * c.height;
    }
 else {
      Dimension d=c.component.getPreferredSize();
      width=d.width;
      height=d.height;
    }
switch (c.handle) {
case TOP_CENTER:
      x+=(cellWidth + width) / 2;
    break;
case TOP_RIGHT:
  x+=cellWidth - width;
break;
case CENTER_LEFT:
y+=(cellHeight + height) / 2;
break;
case CENTER:
x+=(cellWidth + width) / 2;
y+=(cellHeight + height) / 2;
break;
case CENTER_RIGHT:
y+=(cellHeight + height) / 2;
x+=cellWidth - width;
break;
case BOTTOM:
y+=cellHeight - height;
break;
case BOTTOM_CENTER:
x+=(cellWidth + width) / 2;
y+=cellHeight - height;
break;
case BOTTOM_RIGHT:
y+=cellHeight - height;
x+=cellWidth - width;
break;
}
c.component.setBounds(new Rectangle((int)x,(int)y,(int)width,(int)height));
}
}
