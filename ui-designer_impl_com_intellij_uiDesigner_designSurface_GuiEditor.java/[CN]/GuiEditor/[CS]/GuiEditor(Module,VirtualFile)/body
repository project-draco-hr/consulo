{
  ApplicationManager.getApplication().assertIsDispatchThread();
  LOG.assertTrue(file.isValid());
  myModule=module;
  myFile=file;
  myCutCopyPasteSupport=new CutCopyPasteSupport(this);
  myCardLayout=new CardLayout();
  setLayout(myCardLayout);
  myValidCard=new JPanel(new BorderLayout());
  myInvalidCard=createInvalidCard();
  add(myValidCard,CARD_VALID);
  add(myInvalidCard,CARD_INVALID);
  myListenerList=new EventListenerList();
  myDecorationLayer=new PassiveDecorationLayer(this);
  myDragLayer=new DragLayer(this);
  myLayeredPane=new MyLayeredPane();
  myInplaceEditingLayer=new InplaceEditingLayer(this);
  myLayeredPane.add(myInplaceEditingLayer,LAYER_INPLACE_EDITING);
  myActiveDecorationLayer=new ActiveDecorationLayer(this);
  myLayeredPane.add(myActiveDecorationLayer,LAYER_ACTIVE_DECORATION);
  myGlassLayer=new GlassLayer(this);
  myLayeredPane.add(myGlassLayer,LAYER_GLASS);
  myLayeredPane.add(myDecorationLayer,LAYER_PASSIVE_DECORATION);
  myLayeredPane.add(myDragLayer,LAYER_DND);
  myGlassLayer.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      myDecorationLayer.repaint();
    }
    public void focusLost(    FocusEvent e){
      myDecorationLayer.repaint();
    }
  }
);
  mySelectionState=new SelectionState(this);
  myDeleteProvider=new MyDeleteProvider();
  final Alarm alarm=new Alarm();
  myDocumentListener=new DocumentAdapter(){
    public void documentChanged(    final DocumentEvent e){
      if (!myInsideChange) {
        UndoManager undoManager=UndoManager.getInstance(module.getProject());
        alarm.cancelAllRequests();
        alarm.addRequest(new MySynchronizeRequest(module,undoManager.isUndoInProgress() || undoManager.isRedoInProgress()),100,ModalityState.stateForComponent(GuiEditor.this));
      }
    }
  }
;
  myDocument=FileDocumentManager.getInstance().getDocument(file);
  myDocument.addDocumentListener(myDocumentListener);
  readFromFile(false);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBackground(Color.LIGHT_GRAY);
  myHorzCaptionPanel=new GridCaptionPanel(this,false);
  myVertCaptionPanel=new GridCaptionPanel(this,true);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridx=0;
  gbc.gridy=1;
  gbc.weightx=0.0;
  gbc.weighty=0.0;
  gbc.fill=GridBagConstraints.BOTH;
  panel.add(myVertCaptionPanel,gbc);
  gbc.gridx=1;
  gbc.gridy=0;
  panel.add(myHorzCaptionPanel,gbc);
  gbc.gridx=1;
  gbc.gridy=1;
  gbc.weightx=1.0;
  gbc.weighty=1.0;
  final JScrollPane scrollPane=new JScrollPane(myLayeredPane);
  panel.add(scrollPane,gbc);
  myHorzCaptionPanel.attachToScrollPane(scrollPane);
  myVertCaptionPanel.attachToScrollPane(scrollPane);
  myValidCard.add(panel,BorderLayout.CENTER);
  final CancelCurrentOperationAction cancelCurrentOperationAction=new CancelCurrentOperationAction();
  cancelCurrentOperationAction.registerCustomShortcutSet(CommonShortcuts.ESCAPE,this);
  myProcessor=new MainProcessor(this);
  myPsiTreeChangeListener=new MyPsiTreeChangeListener();
  PsiManager.getInstance(module.getProject()).addPsiTreeChangeListener(myPsiTreeChangeListener);
  myQuickFixManager=new QuickFixManagerImpl(this,myGlassLayer);
  myDropTargetListener=new DesignDropTargetListener(this);
  new DropTarget(getGlassLayer(),DnDConstants.ACTION_COPY_OR_MOVE,myDropTargetListener);
  myActiveDecorationLayer.installSelectionWatcher();
}
