{
  ApplicationManager.getApplication().assertIsDispatchThread();
  LOG.assertTrue(module != null);
  LOG.assertTrue(file != null);
  LOG.assertTrue(file.isValid());
  myModule=module;
  myFile=file;
  myCutCopyPasteSupport=new CutCopyPasteSupport(this);
  myCardLayout=new CardLayout();
  setLayout(myCardLayout);
  myValidCard=new JPanel(new BorderLayout());
  myInvalidCard=createInvalidCard();
  add(myValidCard,CARD_VALID);
  add(myInvalidCard,CARD_INVALID);
  myListenerList=new EventListenerList();
  myDecorationLayer=new PassiveDecorationLayer(this);
  myDragLayer=new DragLayer(this);
  myLayeredPane=new MyLayeredPane();
  myInplaceEditingLayer=new InplaceEditingLayer(this);
  myLayeredPane.add(myInplaceEditingLayer,LAYER_INPLACE_EDITING);
  myActiveDecorationLayer=new ActiveDecorationLayer(this);
  myLayeredPane.add(myActiveDecorationLayer,LAYER_ACTIVE_DECORATION);
  myGlassLayer=new GlassLayer(this);
  myLayeredPane.add(myGlassLayer,LAYER_GLASS);
  myLayeredPane.add(myDecorationLayer,LAYER_PASSIVE_DECORATION);
  myLayeredPane.add(myDragLayer,LAYER_DND);
  mySelectionState=new SelectionState(this);
  myDeleteProvider=new MyDeleteProvider();
  final Alarm alarm=new Alarm();
  final Runnable request=new Runnable(){
    public void run(){
      PsiDocumentManager.getInstance(module.getProject()).commitDocument(myDocument);
      readFromFile();
    }
  }
;
  myDocumentListener=new DocumentAdapter(){
    public void documentChanged(    final DocumentEvent e){
      if (!myInsideChange) {
        alarm.cancelAllRequests();
        alarm.addRequest(request,100,ModalityState.stateForComponent(GuiEditor.this));
      }
    }
  }
;
  myDocument=FileDocumentManager.getInstance().getDocument(file);
  myDocument.addDocumentListener(myDocumentListener);
  readFromFile();
  myComponentTree=new ComponentTree(this);
  new ComponentTreeBuilder(myComponentTree,this);
  final JScrollPane scrollPane=new JScrollPane(myComponentTree);
  scrollPane.setPreferredSize(new Dimension(250,-1));
  final Splitter splitter1=new Splitter(true,0.33f);
  splitter1.setFirstComponent(scrollPane);
  myPropertyInspector=new PropertyInspector(this,myComponentTree);
  splitter1.setSecondComponent(myPropertyInspector);
  final Splitter splitter2=new Splitter(false,0.33f);
  splitter2.setFirstComponent(splitter1);
  final JPanel mainPaneAndToolbar=new JPanel(new BorderLayout());
  mainPaneAndToolbar.add(new JScrollPane(myLayeredPane),BorderLayout.CENTER);
  splitter2.setSecondComponent(mainPaneAndToolbar);
  myValidCard.add(splitter2,BorderLayout.CENTER);
  final CancelCurrentOperationAction cancelCurrentOperationAction=new CancelCurrentOperationAction();
  cancelCurrentOperationAction.registerCustomShortcutSet(CommonShortcuts.ESCAPE,this);
  myPalettePanel=new PalettePanel(this);
  mainPaneAndToolbar.add(myPalettePanel,BorderLayout.NORTH);
  myProcessor=new MainProcessor(this);
  myPsiTreeChangeListener=new MyPsiTreeChangeListener();
  PsiManager.getInstance(module.getProject()).addPsiTreeChangeListener(myPsiTreeChangeListener);
}
