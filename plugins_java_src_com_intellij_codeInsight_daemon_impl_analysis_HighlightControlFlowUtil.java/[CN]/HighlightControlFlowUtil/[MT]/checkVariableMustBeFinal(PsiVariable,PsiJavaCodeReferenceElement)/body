{
  if (variable.hasModifierProperty(PsiModifier.FINAL))   return null;
  final PsiClass innerClass=getInnerClassVariableReferencedFrom(variable,context);
  if (innerClass != null) {
    if (variable instanceof PsiParameter) {
      final PsiElement parent=variable.getParent();
      if (parent instanceof PsiParameterList && parent.getParent() instanceof PsiLambdaExpression && notAccessedForWriting(variable,new LocalSearchScope(((PsiParameter)variable).getDeclarationScope()))) {
        return null;
      }
    }
    if (PsiUtil.getLanguageLevel(variable).isAtLeast(LanguageLevel.JDK_1_8) && isEffectivelyFinal(variable,innerClass,context)) {
      return null;
    }
    final String description=JavaErrorMessages.message("variable.must.be.final",context.getText());
    final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(context).descriptionAndTooltip(description).create();
    QuickFixAction.registerQuickFixAction(highlightInfo,new VariableAccessFromInnerClassFix(variable,innerClass));
    return highlightInfo;
  }
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(context,PsiLambdaExpression.class);
  if (lambdaExpression != null && !PsiTreeUtil.isAncestor(lambdaExpression,variable,true)) {
    final PsiElement parent=variable.getParent();
    if (parent instanceof PsiParameterList && parent.getParent() == lambdaExpression) {
      return null;
    }
    if (!isEffectivelyFinal(variable,lambdaExpression,context)) {
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(context).descriptionAndTooltip("Variable used in lambda expression should be effectively final").create();
    }
  }
  return null;
}
