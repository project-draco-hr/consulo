{
  if (!field.hasModifierProperty(PsiModifier.FINAL))   return null;
  if (isFinalFieldInitialized(field))   return null;
  String description=JavaErrorMessages.message("variable.not.initialized",field.getName());
  TextRange range=HighlightNamesUtil.getFieldDeclarationTextRange(field);
  HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range).descriptionAndTooltip(description).create();
  QuickFixAction.registerQuickFixAction(highlightInfo,HighlightMethodUtil.getFixRange(field),new CreateConstructorParameterFromFieldFix(field));
  QuickFixAction.registerQuickFixAction(highlightInfo,HighlightMethodUtil.getFixRange(field),new InitializeFinalFieldInConstructorFix(field));
  final PsiClass containingClass=field.getContainingClass();
  if (containingClass != null && !containingClass.isInterface()) {
    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(field,PsiModifier.FINAL,false,false);
    QuickFixAction.registerQuickFixAction(highlightInfo,fix);
  }
  QuickFixAction.registerQuickFixAction(highlightInfo,new AddVariableInitializerFix(field));
  return highlightInfo;
}
