{
  if (elements.length != 1)   return;
  myProject=project;
  myClass=(PsiClass)elements[0];
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,myClass))   return;
  final ExtractInterfaceDialog dialog=new ExtractInterfaceDialog(myProject,myClass);
  dialog.show();
  if (!dialog.isOK() || !dialog.isExtractSuperclass())   return;
  final MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  ExtractSuperClassUtil.checkSuperAccessible(dialog.getTargetDirectory(),conflicts,myClass);
  if (!ExtractSuperClassUtil.showConflicts(dialog,conflicts,myProject))   return;
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          myInterfaceName=dialog.getExtractedSuperName();
          mySelectedMembers=ArrayUtil.toObjectArray(dialog.getSelectedMemberInfos(),MemberInfo.class);
          myTargetDir=dialog.getTargetDirectory();
          myJavaDocPolicy=new DocCommentPolicy(dialog.getDocCommentPolicy());
          try {
            doRefactoring();
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
);
    }
  }
,REFACTORING_NAME,null);
}
