{
  try {
    getBuilder().setUpdate(false);
    final WizardContext wizardContext=new WizardContext(null);
    if (virtualFile.isDirectory()) {
      final String[] supported=getSupportedExtensions();
      for (      VirtualFile file : getFileChildren(virtualFile)) {
        if (canOpenFile(file,supported)) {
          virtualFile=file;
          break;
        }
      }
    }
    wizardContext.setProjectFileDirectory(virtualFile.getParent().getPath());
    if (!doQuickImport(virtualFile,wizardContext))     return null;
    if (wizardContext.getProjectName() == null) {
      if (wizardContext.getProjectStorageFormat() == StorageScheme.DEFAULT) {
        wizardContext.setProjectName(IdeBundle.message("project.import.default.name",getName()) + ProjectFileType.DOT_DEFAULT_EXTENSION);
      }
 else {
        wizardContext.setProjectName(IdeBundle.message("project.import.default.name.dotIdea",getName()));
      }
    }
    final String dotIdeaFilePath=wizardContext.getProjectFileDirectory() + File.separator + Project.DIRECTORY_STORE_FOLDER;
    final String projectFilePath=wizardContext.getProjectFileDirectory() + File.separator + wizardContext.getProjectName()+ ProjectFileType.DOT_DEFAULT_EXTENSION;
    File dotIdeaFile=new File(dotIdeaFilePath);
    File projectFile=new File(projectFilePath);
    String pathToOpen;
    if (wizardContext.getProjectStorageFormat() == StorageScheme.DEFAULT) {
      pathToOpen=projectFilePath;
    }
 else {
      pathToOpen=dotIdeaFile.getParent();
    }
    boolean shouldOpenExisting=false;
    if (!ApplicationManager.getApplication().isHeadlessEnvironment() && (projectFile.exists() || dotIdeaFile.exists())) {
      String existingName;
      if (dotIdeaFile.exists()) {
        existingName="an existing project";
        pathToOpen=dotIdeaFile.getParent();
      }
 else {
        existingName="'" + projectFile.getName() + "'";
        pathToOpen=projectFilePath;
      }
      int result=Messages.showYesNoCancelDialog(projectToClose,IdeBundle.message("project.import.open.existing",existingName,projectFile.getParent(),virtualFile.getName()),IdeBundle.message("title.open.project"),IdeBundle.message("project.import.open.existing.openExisting"),IdeBundle.message("project.import.open.existing.reimport"),CommonBundle.message("button.cancel"),Messages.getQuestionIcon());
      if (result == 2)       return null;
      shouldOpenExisting=result == 0;
    }
    final Project projectToOpen;
    if (shouldOpenExisting) {
      try {
        projectToOpen=ProjectManagerEx.getInstanceEx().loadProject(pathToOpen);
      }
 catch (      IOException e) {
        return null;
      }
catch (      JDOMException e) {
        return null;
      }
catch (      InvalidDataException e) {
        return null;
      }
    }
 else {
      projectToOpen=ProjectManagerEx.getInstanceEx().newProject(wizardContext.getProjectName(),pathToOpen,true,false);
      if (projectToOpen == null || !getBuilder().validate(projectToClose,projectToOpen)) {
        return null;
      }
      projectToOpen.save();
      getBuilder().commit(projectToOpen,null,ModulesProvider.EMPTY_MODULES_PROVIDER);
    }
    if (!forceOpenInNewFrame) {
      NewProjectUtilPlatform.closePreviousProject(projectToClose);
    }
    ProjectUtil.updateLastProjectLocation(pathToOpen);
    ProjectManagerEx.getInstanceEx().openProject(projectToOpen);
    return projectToOpen;
  }
  finally {
    getBuilder().cleanup();
  }
}
