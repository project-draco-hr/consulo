{
  MultiMap<PsiElement,String> conflictDescriptions=new MultiMap<PsiElement,String>();
  addMethodConflicts(conflictDescriptions);
  Set<UsageInfo> usagesSet=new HashSet<UsageInfo>(Arrays.asList(refUsages.get()));
  RenameUtil.removeConflictUsages(usagesSet);
  if (myChangeInfo.isVisibilityChanged()) {
    try {
      addInaccessibilityDescriptions(usagesSet,conflictDescriptions);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  for (  UsageInfo usageInfo : usagesSet) {
    if (usageInfo instanceof OverriderUsageInfo) {
      final PsiMethod method=(PsiMethod)usageInfo.getElement();
      final PsiMethod baseMethod=((OverriderUsageInfo)usageInfo).getBaseMethod();
      final int delta=baseMethod.getParameterList().getParametersCount() - method.getParameterList().getParametersCount();
      if (delta > 0) {
        final boolean[] toRemove=myChangeInfo.toRemoveParm();
        if (toRemove[toRemove.length - 1]) {
          conflictDescriptions.putValue(baseMethod,"Implicit last parameter should not be deleted");
        }
      }
    }
  }
  return conflictDescriptions;
}
