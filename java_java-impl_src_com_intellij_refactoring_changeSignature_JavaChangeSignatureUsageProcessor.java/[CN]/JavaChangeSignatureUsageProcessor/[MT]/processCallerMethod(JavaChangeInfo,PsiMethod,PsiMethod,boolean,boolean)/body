{
  LOG.assertTrue(toInsertParams || toInsertThrows);
  if (toInsertParams) {
    List<PsiParameter> newParameters=new ArrayList<PsiParameter>();
    newParameters.addAll(Arrays.asList(caller.getParameterList().getParameters()));
    final JavaParameterInfo[] primaryNewParms=changeInfo.getNewParameters();
    PsiSubstitutor substitutor=baseMethod == null ? PsiSubstitutor.EMPTY : calculateSubstitutor(caller,baseMethod);
    for (    JavaParameterInfo info : primaryNewParms) {
      if (info.getOldIndex() < 0)       newParameters.add(createNewParameter(changeInfo,info,substitutor));
    }
    PsiParameter[] arrayed=newParameters.toArray(new PsiParameter[newParameters.size()]);
    boolean[] toRemoveParm=new boolean[arrayed.length];
    Arrays.fill(toRemoveParm,false);
    resolveParameterVsFieldsConflicts(arrayed,caller,caller.getParameterList(),toRemoveParm);
  }
  if (toInsertThrows) {
    List<PsiJavaCodeReferenceElement> newThrowns=new ArrayList<PsiJavaCodeReferenceElement>();
    final PsiReferenceList throwsList=caller.getThrowsList();
    newThrowns.addAll(Arrays.asList(throwsList.getReferenceElements()));
    final ThrownExceptionInfo[] primaryNewExns=changeInfo.getNewExceptions();
    for (    ThrownExceptionInfo thrownExceptionInfo : primaryNewExns) {
      if (thrownExceptionInfo.oldIndex < 0) {
        final PsiClassType type=(PsiClassType)thrownExceptionInfo.createType(caller,caller.getManager());
        final PsiJavaCodeReferenceElement ref=JavaPsiFacade.getInstance(caller.getProject()).getElementFactory().createReferenceElementByType(type);
        newThrowns.add(ref);
      }
    }
    PsiJavaCodeReferenceElement[] arrayed=newThrowns.toArray(new PsiJavaCodeReferenceElement[newThrowns.size()]);
    boolean[] toRemoveParm=new boolean[arrayed.length];
    Arrays.fill(toRemoveParm,false);
    ChangeSignatureUtil.synchronizeList(throwsList,Arrays.asList(arrayed),ThrowsList.INSTANCE,toRemoveParm);
  }
}
