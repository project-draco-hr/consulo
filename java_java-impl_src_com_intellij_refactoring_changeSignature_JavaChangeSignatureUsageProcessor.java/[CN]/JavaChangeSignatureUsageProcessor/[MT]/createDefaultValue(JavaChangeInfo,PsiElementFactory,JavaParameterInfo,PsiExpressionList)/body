{
  if (info.isUseAnySingleVariable()) {
    final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(list.getProject()).getResolveHelper();
    final PsiType type=info.getTypeWrapper().getType(changeInfo.getMethod(),list.getManager());
    final VariablesProcessor processor=new VariablesProcessor(false){
      protected boolean check(      PsiVariable var,      ResolveState state){
        if (var instanceof PsiField && !resolveHelper.isAccessible((PsiField)var,list,null))         return false;
        if (var instanceof PsiLocalVariable && list.getTextRange().getStartOffset() <= var.getTextRange().getStartOffset())         return false;
        if (PsiTreeUtil.isAncestor(var,list,false))         return false;
        final PsiType varType=state.get(PsiSubstitutor.KEY).substitute(var.getType());
        return type.isAssignableFrom(varType);
      }
      public boolean execute(      @NotNull PsiElement pe,      ResolveState state){
        super.execute(pe,state);
        return size() < 2;
      }
    }
;
    PsiScopesUtil.treeWalkUp(processor,list,null);
    if (processor.size() == 1) {
      final PsiVariable result=processor.getResult(0);
      return factory.createExpressionFromText(result.getName(),list);
    }
    if (processor.size() == 0) {
      final PsiClass parentClass=PsiTreeUtil.getParentOfType(list,PsiClass.class);
      if (parentClass != null) {
        PsiClass containingClass=parentClass;
        final Set<PsiClass> containingClasses=new HashSet<PsiClass>();
        while (containingClass != null) {
          if (type.isAssignableFrom(factory.createType(containingClass,PsiSubstitutor.EMPTY))) {
            containingClasses.add(containingClass);
          }
          containingClass=PsiTreeUtil.getParentOfType(containingClass,PsiClass.class);
        }
        if (containingClasses.size() == 1) {
          return RefactoringChangeUtil.createThisExpression(parentClass.getManager(),containingClasses.contains(parentClass) ? null : containingClasses.iterator().next());
        }
      }
    }
  }
  final PsiCallExpression callExpression=PsiTreeUtil.getParentOfType(list,PsiCallExpression.class);
  final String defaultValue=info.getDefaultValue();
  return callExpression != null ? info.getValue(callExpression) : defaultValue.length() > 0 ? factory.createExpressionFromText(defaultValue,list) : null;
}
