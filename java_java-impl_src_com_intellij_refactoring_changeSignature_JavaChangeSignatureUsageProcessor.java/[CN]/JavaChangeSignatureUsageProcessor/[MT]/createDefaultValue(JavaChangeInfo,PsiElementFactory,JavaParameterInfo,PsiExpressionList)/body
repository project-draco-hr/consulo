{
  if (info.isUseAnySingleVariable()) {
    final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(list.getProject()).getResolveHelper();
    final PsiType type=info.getTypeWrapper().getType(changeInfo.getMethod(),list.getManager());
    final VariablesProcessor processor=new VariablesProcessor(false){
      protected boolean check(      PsiVariable var,      ResolveState state){
        if (var instanceof PsiField && !resolveHelper.isAccessible((PsiField)var,list,null))         return false;
        final PsiType varType=state.get(PsiSubstitutor.KEY).substitute(var.getType());
        return type.isAssignableFrom(varType);
      }
      public boolean execute(      PsiElement pe,      ResolveState state){
        super.execute(pe,state);
        return size() < 2;
      }
    }
;
    PsiScopesUtil.treeWalkUp(processor,list,null);
    if (processor.size() == 1) {
      final PsiVariable result=processor.getResult(0);
      return factory.createExpressionFromText(result.getName(),list);
    }
  }
  final PsiCallExpression callExpression=PsiTreeUtil.getParentOfType(list,PsiCallExpression.class);
  return callExpression != null ? info.getValue(callExpression) : factory.createExpressionFromText(info.getDefaultValue(),list);
}
