{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Project project=file.getProject();
  Document document=editor.getDocument();
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).isUncommited(document));
  final long timeStamp=document.getModificationStamp();
  Object lastTimeStamp=editor.getUserData(LAST_UPDATE_STAMP_KEY);
  if (lastTimeStamp instanceof Long && ((Long)lastTimeStamp).longValue() == timeStamp && !applyDefaultState)   return null;
  if (file instanceof PsiCompiledElement) {
    file=((PsiCompiledElement)file).getMirror();
  }
  final TreeMap<PsiElement,FoldingDescriptor> elementsToFoldMap=new TreeMap<PsiElement,FoldingDescriptor>(COMPARE_BY_OFFSET);
  final FileViewProvider viewProvider=((PsiFile)file).getViewProvider();
  for (  final Language language : viewProvider.getLanguages()) {
    final PsiFile psi=viewProvider.getPsi(language);
    final FoldingBuilder foldingBuilder=LanguageFolding.INSTANCE.forLanguage(language);
    if (psi != null && foldingBuilder != null) {
      final ASTNode node=psi.getNode();
      for (      FoldingDescriptor descriptor : foldingBuilder.buildFoldRegions(node,document)) {
        elementsToFoldMap.put(SourceTreeToPsiMap.treeElementToPsi(descriptor.getElement()),descriptor);
      }
    }
  }
  final Runnable operation=new UpdateFoldRegionsOperation(editor,elementsToFoldMap,applyDefaultState);
  return new Runnable(){
    public void run(){
      editor.getFoldingModel().runBatchFoldingOperationDoNotCollapseCaret(operation);
      editor.putUserData(LAST_UPDATE_STAMP_KEY,timeStamp);
    }
  }
;
}
