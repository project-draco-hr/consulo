{
  EditorFoldingInfo info=EditorFoldingInfo.get(myEditor);
  FoldingModelEx foldingModel=(FoldingModelEx)myEditor.getFoldingModel();
  FoldRegion[] foldRegions=foldingModel.getAllFoldRegions();
  HashMap<TextRange,Boolean> rangeToExpandStatusMap=new HashMap<TextRange,Boolean>();
  List<FoldRegion> toRemove=CollectionFactory.arrayList();
  for (  FoldRegion region : foldRegions) {
    PsiElement element=info.getPsiElement(region);
    if (element != null && myElementsToFoldMap.containsKey(element)) {
      final FoldingDescriptor descriptor=myElementsToFoldMap.get(element);
      if (!region.isValid() || descriptor.getGroup() != null || region.getGroup() != null || region.getStartOffset() != descriptor.getRange().getStartOffset() || region.getEndOffset() != descriptor.getRange().getEndOffset() || !region.getPlaceholderText().equals(descriptor.getPlaceholderText())) {
        rangeToExpandStatusMap.put(descriptor.getRange(),region.isExpanded());
        toRemove.add(region);
      }
 else {
        myElementsToFoldMap.remove(element);
      }
    }
 else {
      if (region.isValid() && info.isLightRegion(region)) {
        boolean isExpanded=region.isExpanded();
        rangeToExpandStatusMap.put(new TextRange(region.getStartOffset(),region.getEndOffset()),isExpanded ? Boolean.TRUE : Boolean.FALSE);
      }
 else {
        toRemove.add(region);
      }
    }
  }
  for (  final FoldRegion region : toRemove) {
    foldingModel.removeFoldRegion(region);
    info.removeRegion(region);
  }
  Map<FoldRegion,Boolean> shouldExpand=CollectionFactory.newTroveMap();
  for (  final Map.Entry<PsiElement,FoldingDescriptor> entry : myElementsToFoldMap.entrySet()) {
    ProgressManager.getInstance().checkCanceled();
    PsiElement element=entry.getKey();
    final FoldingDescriptor descriptor=entry.getValue();
    TextRange range=descriptor.getRange();
    FoldRegion region=new FoldRegionImpl(myEditor,range.getStartOffset(),range.getEndOffset(),descriptor.getPlaceholderText(),descriptor.getGroup());
    if (!foldingModel.addFoldRegion(region))     continue;
    info.addRegion(region,element);
    if (myApplyDefaultState) {
      shouldExpand.put(region,!FoldingPolicy.isCollapseByDefault(element) || FoldingUtil.caretInsideRange(myEditor,range));
    }
 else {
      shouldExpand.put(region,rangeToExpandStatusMap.get(range));
    }
  }
  for (  final FoldRegion region : shouldExpand.keySet()) {
    final Boolean expanded=shouldExpand.get(region);
    if (expanded != null) {
      region.setExpanded(expanded.booleanValue());
    }
  }
}
