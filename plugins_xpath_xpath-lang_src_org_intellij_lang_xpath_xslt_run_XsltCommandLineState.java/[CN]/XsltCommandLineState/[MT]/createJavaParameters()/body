{
  final Sdk jdk=myXsltRunConfiguration.getEffectiveJDK();
  if (jdk == null) {
    throw CantRunException.noJdkConfigured();
  }
  final JavaParameters parameters=new JavaParameters();
  parameters.setJdk(jdk);
  if (myXsltRunConfiguration.getJdkChoice() == XsltRunConfiguration.JdkChoice.FROM_MODULE) {
    final Module module=myXsltRunConfiguration.getEffectiveModule();
    if (module != null) {
      ProjectRootsTraversing.collectRoots(module,ProjectClasspathTraversing.FULL_CLASSPATH_WITHOUT_TESTS,parameters.getClassPath());
    }
  }
  final ParametersList vmParameters=parameters.getVMParametersList();
  vmParameters.addParametersString(myXsltRunConfiguration.myVmArguments);
  if (isEmpty(myXsltRunConfiguration.getXsltFile())) {
    throw new CantRunException("No XSLT file selected");
  }
  vmParameters.defineProperty("xslt.file",myXsltRunConfiguration.getXsltFile());
  if (isEmpty(myXsltRunConfiguration.getXmlInputFile())) {
    throw new CantRunException("No XML input file selected");
  }
  vmParameters.defineProperty("xslt.input",myXsltRunConfiguration.getXmlInputFile());
  final XsltRunConfiguration.OutputType outputType=myXsltRunConfiguration.getOutputType();
  if (outputType == XsltRunConfiguration.OutputType.CONSOLE) {
    try {
      myPort=NetUtils.findAvailableSocketPort();
    }
 catch (    IOException e) {
      myPort=myXsltRunConfiguration.myRunnerPort;
    }
    vmParameters.defineProperty("xslt.listen-port",String.valueOf(myPort));
  }
 else   if (outputType == XsltRunConfiguration.OutputType.FILE) {
    vmParameters.defineProperty("xslt.output",myXsltRunConfiguration.myOutputFile);
  }
  for (  Pair<String,String> pair : myXsltRunConfiguration.getParameters()) {
    final String name=pair.getFirst();
    final String value=pair.getSecond();
    if (isEmpty(name) || value == null)     continue;
    vmParameters.defineProperty("xslt.param." + name,value);
  }
  vmParameters.defineProperty("xslt.smart-error-handling",String.valueOf(myXsltRunConfiguration.mySmartErrorHandling));
  File rtClasspath=new File("C:/Demetra/plugins/xpath/lib/rt/xslt-rt.jar");
  if (!rtClasspath.exists()) {
    LOG.warn("Plugin's Runtime classes not found in " + rtClasspath.getAbsolutePath());
    parameters.getVMParametersList().prepend("-ea");
  }
  parameters.getClassPath().addTail(rtClasspath.getAbsolutePath());
  parameters.setMainClass("org.intellij.plugins.xslt.run.rt.XSLTRunner");
  parameters.setWorkingDirectory(isEmpty(myXsltRunConfiguration.myWorkingDirectory) ? new File(myXsltRunConfiguration.getXsltFile()).getParentFile().getAbsolutePath() : myXsltRunConfiguration.myWorkingDirectory);
  myExtensionData=new UserDataHolderBase();
  final List<XsltRunnerExtension> extensions=XsltRunnerExtension.getExtensions(myXsltRunConfiguration,myIsDebugger);
  for (  XsltRunnerExtension extension : extensions) {
    extension.patchParameters(parameters,myXsltRunConfiguration,myExtensionData);
  }
  return parameters;
}
