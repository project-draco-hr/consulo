{
  final Project project=listOwner.getProject();
  final PsiFile containingFile=listOwner.getContainingFile();
  if (containingFile instanceof PsiJavaFile) {
    final PsiJavaFile javaFile=(PsiJavaFile)containingFile;
    final String packageName=javaFile.getPackageName();
    final VirtualFile virtualFile=containingFile.getVirtualFile();
    final List<XmlFile> files=myExternalAnnotations.get(getFQN(packageName,virtualFile));
    if (files == NULL)     return null;
    if (files != null) {
      for (Iterator<XmlFile> it=files.iterator(); it.hasNext(); ) {
        if (!it.next().isValid())         it.remove();
      }
      return files;
    }
    if (virtualFile != null) {
      final List<OrderEntry> entries=ProjectRootManager.getInstance(project).getFileIndex().getOrderEntriesForFile(virtualFile);
      for (      OrderEntry entry : entries) {
        if (!(entry instanceof ModuleOrderEntry)) {
          List<XmlFile> possibleAnnotationsXmls=null;
          final String[] externalUrls=AnnotationOrderRootType.getUrls(entry);
          for (          String url : externalUrls) {
            final VirtualFile ext=LocalFileSystem.getInstance().findFileByPath(VfsUtil.urlToPath(url) + "/" + packageName.replace(".","/")+ "/"+ ANNOTATIONS_XML);
            if (ext != null) {
              final PsiFile psiFile=myPsiManager.findFile(ext);
              if (psiFile instanceof XmlFile) {
                if (possibleAnnotationsXmls == null) {
                  possibleAnnotationsXmls=new ArrayList<XmlFile>();
                }
                possibleAnnotationsXmls.add((XmlFile)psiFile);
              }
            }
          }
          if (possibleAnnotationsXmls != null) {
            myExternalAnnotations.put(getFQN(packageName,virtualFile),possibleAnnotationsXmls);
            return possibleAnnotationsXmls;
          }
          break;
        }
      }
      myExternalAnnotations.put(getFQN(packageName,virtualFile),NULL);
    }
  }
  return null;
}
