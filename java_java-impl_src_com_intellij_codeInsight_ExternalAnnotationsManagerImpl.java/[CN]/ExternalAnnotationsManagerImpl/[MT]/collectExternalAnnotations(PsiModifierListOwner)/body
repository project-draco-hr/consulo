{
  final Map<String,PsiAnnotation> result=new HashMap<String,PsiAnnotation>();
  if (!hasAnyAnnotationsRoots())   return result;
  final List<XmlFile> files=findExternalAnnotationsFile(listOwner);
  if (files != null) {
    for (    XmlFile file : files) {
      if (file.isValid()) {
        final XmlDocument document=file.getDocument();
        if (document != null) {
          final XmlTag rootTag=document.getRootTag();
          if (rootTag != null) {
            final String externalName=PsiFormatUtil.getExternalName(listOwner,false);
            final String oldExternalName=getNormalizedExternalName(listOwner);
            for (            final XmlTag tag : rootTag.getSubTags()) {
              final String className=tag.getAttributeValue("name");
              if (Comparing.strEqual(className,externalName) || Comparing.strEqual(className,oldExternalName)) {
                for (                XmlTag annotationTag : tag.getSubTags()) {
                  final String annotationFQN=annotationTag.getAttributeValue("name");
                  final StringBuilder buf=new StringBuilder();
                  for (                  XmlTag annotationaParameter : annotationTag.getSubTags()) {
                    buf.append(",");
                    final String nameValue=annotationaParameter.getAttributeValue("name");
                    if (nameValue != null) {
                      buf.append(nameValue).append("=");
                    }
                    buf.append(StringUtil.unescapeXml(annotationaParameter.getAttributeValue("val")));
                  }
                  final String annotationText="@" + annotationFQN + (buf.length() > 0 ? "(" + StringUtil.trimStart(buf.toString(),",") + ")" : "");
                  try {
                    result.put(annotationFQN,JavaPsiFacade.getInstance(listOwner.getProject()).getElementFactory().createAnnotationFromText(annotationText,null));
                  }
 catch (                  IncorrectOperationException e) {
                    LOG.error(e);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
