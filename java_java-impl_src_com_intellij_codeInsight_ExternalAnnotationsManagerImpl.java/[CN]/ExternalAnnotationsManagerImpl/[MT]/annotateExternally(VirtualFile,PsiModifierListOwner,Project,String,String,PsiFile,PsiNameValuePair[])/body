{
  List<XmlFile> xmlFiles=findExternalAnnotationsXmlFiles(listOwner);
  final XmlFile existingXml=findXmlFileInRoot(xmlFiles,root);
  if (existingXml != null && !CodeInsightUtilBase.preparePsiElementForWrite(existingXml)) {
    notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
    return;
  }
  final List<PsiFile> annotationFiles=xmlFiles == null ? new ArrayList<PsiFile>() : new ArrayList<PsiFile>(xmlFiles);
  new WriteCommandAction(project){
    @Override protected void run(    final Result result) throws Throwable {
      XmlFile annotationsXml=existingXml != null ? existingXml : createAnnotationsXml(root,packageName);
      if (annotationsXml != null) {
        annotationFiles.add(annotationsXml);
        myExternalAnnotations.put(getFQN(packageName,fromFile),annotationFiles);
        annotateExternally(listOwner,annotationFQName,annotationsXml,fromFile,value);
      }
 else {
        notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
      }
    }
  }
.execute();
  UndoManager.getInstance(project).undoableActionPerformed(new BasicUndoableAction(){
    @Override public void undo() throws UnexpectedUndoException {
      dropCache();
      notifyChangedDramatically();
    }
    @Override public void redo() throws UnexpectedUndoException {
      dropCache();
      notifyChangedDramatically();
    }
  }
);
}
