{
  final XmlFile[] annotationsXml=new XmlFile[1];
  List<XmlFile> xmlFiles=findExternalAnnotationsXmlFiles(listOwner);
  if (xmlFiles != null) {
    annotationsXml[0]=findXmlFileInRoot(xmlFiles,root);
    if (annotationsXml[0] != null && !CodeInsightUtilBase.preparePsiElementForWrite(annotationsXml[0])) {
      notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
      return;
    }
  }
 else {
    xmlFiles=new ArrayList<XmlFile>();
  }
  final List<PsiFile> annotationFiles=new ArrayList<PsiFile>(xmlFiles);
  new WriteCommandAction(project){
    @Override protected void run(    final Result result) throws Throwable {
      if (annotationsXml[0] == null) {
        annotationsXml[0]=createAnnotationsXml(root,packageName);
      }
      if (annotationsXml[0] != null) {
        annotationFiles.add(annotationsXml[0]);
        myExternalAnnotations.put(getFQN(packageName,fromFile),annotationFiles);
        annotateExternally(listOwner,annotationFQName,annotationsXml[0],fromFile,value);
      }
 else {
        notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
      }
    }
  }
.execute();
  UndoManager.getInstance(project).undoableActionPerformed(new BasicUndoableAction(){
    @Override public void undo() throws UnexpectedUndoException {
      dropCache();
      notifyChangedDramatically();
    }
    @Override public void redo() throws UnexpectedUndoException {
      dropCache();
      notifyChangedDramatically();
    }
  }
);
}
