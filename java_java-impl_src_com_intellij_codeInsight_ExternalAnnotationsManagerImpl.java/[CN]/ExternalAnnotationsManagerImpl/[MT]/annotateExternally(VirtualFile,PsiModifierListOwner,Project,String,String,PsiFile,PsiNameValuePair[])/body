{
  List<XmlFile> xmlFiles=findExternalAnnotationsXmlFiles(listOwner);
  final XmlFile existingXml=findXmlFileInRoot(xmlFiles,root);
  if (existingXml != null && !CodeInsightUtilBase.preparePsiElementForWrite(existingXml)) {
    notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
    return;
  }
  final List<PsiFile> annotationFiles=xmlFiles == null ? new ArrayList<PsiFile>() : new ArrayList<PsiFile>(xmlFiles);
  new WriteCommandAction(project){
    @Override protected void run(    final Result result) throws Throwable {
      if (existingXml != null) {
        annotateExternally(listOwner,annotationFQName,existingXml,fromFile,value);
      }
 else {
        XmlFile newXml=createAnnotationsXml(root,packageName);
        if (newXml == null) {
          notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
        }
 else {
          annotationFiles.add(newXml);
          myExternalAnnotations.put(getFQN(packageName,fromFile),annotationFiles);
          annotateExternally(listOwner,annotationFQName,existingXml,fromFile,value);
        }
      }
      UndoManager.getInstance(project).undoableActionPerformed(new BasicUndoableAction(){
        @Override public void undo(){
          dropCache();
          notifyChangedExternally();
        }
        @Override public void redo(){
          dropCache();
          notifyChangedExternally();
        }
      }
);
    }
  }
.execute();
}
