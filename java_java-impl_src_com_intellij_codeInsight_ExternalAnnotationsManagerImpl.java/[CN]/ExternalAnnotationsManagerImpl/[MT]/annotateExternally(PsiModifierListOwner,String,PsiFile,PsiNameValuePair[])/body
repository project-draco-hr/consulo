{
  final Project project=listOwner.getProject();
  final PsiFile containingFile=listOwner.getContainingFile();
  if (!(containingFile instanceof PsiJavaFile)) {
    return;
  }
  final String packageName=((PsiJavaFile)containingFile).getPackageName();
  final VirtualFile virtualFile=containingFile.getVirtualFile();
  LOG.assertTrue(virtualFile != null);
  final List<OrderEntry> entries=ProjectRootManager.getInstance(project).getFileIndex().getOrderEntriesForFile(virtualFile);
  if (entries.isEmpty()) {
    return;
  }
  for (  final OrderEntry entry : entries) {
    if (entry instanceof ModuleOrderEntry)     continue;
    final VirtualFile[] virtualFiles=AnnotationOrderRootType.getFiles(entry);
    if (virtualFiles.length > 0) {
      chooseRootAndAnnotateExternally(listOwner,annotationFQName,fromFile,project,packageName,virtualFile,virtualFiles,value);
    }
 else {
      if (ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment()) {
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          setupRootAndAnnotateExternally(entry,project,listOwner,annotationFQName,fromFile,packageName,virtualFile,value);
        }
      }
);
    }
    break;
  }
}
