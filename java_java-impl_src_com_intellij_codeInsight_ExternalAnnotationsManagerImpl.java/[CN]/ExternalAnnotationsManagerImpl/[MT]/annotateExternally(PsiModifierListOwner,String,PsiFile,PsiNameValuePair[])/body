{
  final Project project=myPsiManager.getProject();
  final PsiFile containingFile=listOwner.getContainingFile();
  if (!(containingFile instanceof PsiJavaFile)) {
    return;
  }
  final String packageName=((PsiJavaFile)containingFile).getPackageName();
  final VirtualFile containingVirtualFile=containingFile.getVirtualFile();
  LOG.assertTrue(containingVirtualFile != null);
  final List<OrderEntry> entries=ProjectRootManager.getInstance(project).getFileIndex().getOrderEntriesForFile(containingVirtualFile);
  if (entries.isEmpty()) {
    return;
  }
  for (  final OrderEntry entry : entries) {
    if (entry instanceof ModuleOrderEntry)     continue;
    VirtualFile[] roots=AnnotationOrderRootType.getFiles(entry);
    roots=filterByReadOnliness(roots);
    if (roots.length > 0) {
      chooseRootAndAnnotateExternally(listOwner,annotationFQName,fromFile,project,packageName,containingVirtualFile,roots,value);
    }
 else {
      if (ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().isHeadlessEnvironment()) {
        return;
      }
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          setupRootAndAnnotateExternally(entry,project,listOwner,annotationFQName,fromFile,packageName,containingVirtualFile,value);
        }
      }
);
    }
    break;
  }
}
