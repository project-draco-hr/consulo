{
  final PsiPolyadicExpression expression=(PsiPolyadicExpression)element.getParent();
  final PsiExpression[] operands=expression.getOperands();
  final PsiJavaToken sign=expression.getTokenBeforeOperand(operands[1]);
  final String operatorText=sign == null ? "" : sign.getText();
  final IElementType tokenType=expression.getOperationTokenType();
  final boolean commutative=ParenthesesUtils.isCommutativeOperator(tokenType);
  if (commutative && !ConcatenationUtils.isConcatenation(expression)) {
    return IntentionPowerPackBundle.message("flip.smth.intention.name",operatorText);
  }
 else {
    return IntentionPowerPackBundle.message("flip.smth.intention.name1",operatorText);
  }
}
