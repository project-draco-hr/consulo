{
  final PsiJavaToken token=(PsiJavaToken)element;
  final PsiElement parent=token.getParent();
  if (!(parent instanceof PsiPolyadicExpression)) {
    return;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiExpression[] operands=polyadicExpression.getOperands();
  final StringBuilder newExpression=new StringBuilder();
  String prevOperand=null;
  final String tokenText=token.getText() + ' ';
  for (  PsiExpression operand : operands) {
    final PsiJavaToken token1=polyadicExpression.getTokenBeforeOperand(operand);
    if (token == token1) {
      newExpression.append(operand.getText()).append(tokenText);
      continue;
    }
    if (prevOperand != null) {
      newExpression.append(prevOperand).append(tokenText);
    }
    prevOperand=operand.getText();
  }
  newExpression.append(prevOperand);
  replaceExpression(newExpression.toString(),polyadicExpression);
}
