{
  DataContext dataContext=event.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  final VirtualFile[] files=PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  if (files == null) {
    return;
  }
  PsiFile file=null;
  final PsiDirectory dir;
  boolean hasSelection=false;
  if (editor != null) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return;
    dir=file.getContainingDirectory();
    hasSelection=editor.getSelectionModel().hasSelection();
  }
 else   if (areFiles(files)) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (!operationStatus.hasReadonlyFiles()) {
      final ReformatFilesDialog reformatFilesDialog=new ReformatFilesDialog(project,files);
      reformatFilesDialog.show();
      if (!reformatFilesDialog.isOK())       return;
      if (reformatFilesDialog.optimizeImports() && !DumbService.getInstance(project).isDumb()) {
        new ReformatAndOptimizeImportsProcessor(project,convertToPsiFiles(files,project),reformatFilesDialog.isProcessOnlyChangedText()).run();
      }
 else {
        new ReformatCodeProcessor(project,convertToPsiFiles(files,project),null,reformatFilesDialog.isProcessOnlyChangedText()).run();
      }
    }
    return;
  }
 else {
    Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
    Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
    if (projectContext != null || moduleContext != null) {
      final String text;
      if (moduleContext != null) {
        text=CodeInsightBundle.message("process.scope.module",moduleContext.getModuleDirPath());
      }
 else {
        text=CodeInsightBundle.message("process.scope.project",project.getPresentableUrl());
      }
      LayoutProjectCodeDialog dialog=new LayoutProjectCodeDialog(project,moduleContext,CodeInsightBundle.message("process.reformat.code"),text,true);
      dialog.show();
      if (!dialog.isOK())       return;
      if (dialog.isOptimizeImports() && !DumbService.getInstance(project).isDumb()) {
        if (moduleContext != null) {
          new ReformatAndOptimizeImportsProcessor(project,moduleContext,dialog.isProcessOnlyChangedText()).run();
        }
 else {
          new ReformatAndOptimizeImportsProcessor(project,dialog.isProcessOnlyChangedText()).run();
        }
      }
 else {
        if (moduleContext != null) {
          new ReformatCodeProcessor(project,moduleContext,dialog.isProcessOnlyChangedText()).run();
        }
 else {
          new ReformatCodeProcessor(project,dialog.isProcessOnlyChangedText()).run();
        }
      }
      return;
    }
    PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (element == null)     return;
    if (element instanceof PsiDirectoryContainer) {
      dir=((PsiDirectoryContainer)element).getDirectories()[0];
    }
 else     if (element instanceof PsiDirectory) {
      dir=(PsiDirectory)element;
    }
 else {
      file=element.getContainingFile();
      if (file == null)       return;
      dir=file.getContainingDirectory();
    }
  }
  boolean optimizeImports=ReformatFilesDialog.isOptmizeImportsOptionOn();
  boolean processWholeFile=false;
  boolean processChangedTextOnly=PropertiesComponent.getInstance().getBoolean(LayoutCodeConstants.PROCESS_CHANGED_TEXT_KEY,false);
  boolean rearrangeEntries=PropertiesComponent.getInstance().getBoolean(LayoutCodeConstants.REARRANGE_ENTRIES_KEY,false);
  final boolean showDialog=EditorSettingsExternalizable.getInstance().getOptions().SHOW_REFORMAT_DIALOG;
  if (showDialog || (file == null && dir != null)) {
    final LayoutCodeDialog dialog=new LayoutCodeDialog(project,CodeInsightBundle.message("process.reformat.code"),file,dir,hasSelection ? Boolean.TRUE : Boolean.FALSE,HELP_ID);
    dialog.show();
    if (!dialog.isOK())     return;
    final boolean showDialogAtFuture=!dialog.isDoNotAskMe();
    EditorSettingsExternalizable.getInstance().getOptions().SHOW_REFORMAT_DIALOG=showDialogAtFuture;
    updateShowDialogSetting(dialog,"\"Reformat Code\" dialog disabled");
    optimizeImports=dialog.isOptimizeImports();
    rearrangeEntries=dialog.isRearrangeEntries();
    processWholeFile=dialog.isProcessWholeFile();
    processChangedTextOnly=dialog.isProcessOnlyChangedText();
    if (dialog.isProcessDirectory()) {
      if (optimizeImports) {
        new ReformatAndOptimizeImportsProcessor(project,dir,dialog.isIncludeSubdirectories(),processChangedTextOnly).run();
      }
 else {
        new ReformatCodeProcessor(project,dir,dialog.isIncludeSubdirectories(),processChangedTextOnly).run();
      }
      return;
    }
  }
  final TextRange range;
  if (!processWholeFile && editor != null && editor.getSelectionModel().hasSelection()) {
    range=TextRange.create(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  }
 else {
    range=null;
  }
  if (optimizeImports && range == null) {
    if (file != null || dir == null) {
      new ReformatAndOptimizeImportsProcessor(project,file,processChangedTextOnly).run();
    }
 else {
      new ReformatAndOptimizeImportsProcessor(project,dir,true,processChangedTextOnly).run();
    }
  }
 else {
    new ReformatCodeProcessor(project,file,range,processChangedTextOnly).run();
  }
  if (rearrangeEntries && file != null && editor != null) {
    final ArrangementEngine engine=ServiceManager.getService(project,ArrangementEngine.class);
    try {
      final PsiFile finalFile=file;
      SelectionModel selectionModel=editor.getSelectionModel();
      final TextRange rangeToUse=selectionModel.hasSelection() ? TextRange.create(selectionModel.getSelectionStart(),selectionModel.getSelectionEnd()) : TextRange.create(0,editor.getDocument().getTextLength());
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          engine.arrange(finalFile,Collections.singleton(rangeToUse));
        }
      }
,getTemplatePresentation().getText(),null);
    }
  finally {
      PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
    }
  }
}
