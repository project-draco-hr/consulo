{
  scope.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitClass(    PsiClass aClass){
      if (!addClosureFolding(aClass,document,foldElements)) {
        addToFold(foldElements,aClass,document,true);
        addElementsToFold(foldElements,aClass,document,false);
      }
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      PsiJavaCodeReferenceElement classReference=expression.getClassReference();
      if (classReference == null) {
        final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
        if (anonymousClass != null) {
          classReference=anonymousClass.getBaseClassReference();
        }
      }
      if (classReference != null) {
        final PsiReferenceParameterList list=classReference.getParameterList();
        if (list != null) {
          final String text=list.getText();
          if (text.startsWith("<") && text.endsWith(">") && text.length() > getPlaceholderText(list.getNode()).length()) {
            final TextRange range=list.getTextRange();
            addFoldRegion(foldElements,list,document,true,new TextRange(range.getStartOffset() + 1,range.getEndOffset() - 1));
          }
        }
      }
      super.visitNewExpression(expression);
    }
  }
);
}
