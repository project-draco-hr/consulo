{
  final PsiElement element=SourceTreeToPsiMap.treeElementToPsi(node);
  JavaCodeFoldingSettings settings=JavaCodeFoldingSettings.getInstance();
  if (element instanceof PsiNewExpression || element instanceof PsiJavaToken) {
    return settings.isCollapseLambdas();
  }
  if (element instanceof PsiReferenceParameterList) {
    return settings.isCollapseConstructorGenericParameters();
  }
  if (element instanceof PsiImportList) {
    return settings.isCollapseImports();
  }
 else   if (element instanceof PsiMethod || element instanceof PsiClassInitializer || element instanceof PsiCodeBlock) {
    if (!settings.isCollapseAccessors() && !settings.isCollapseMethods()) {
      return false;
    }
    if (element instanceof PsiMethod && isSimplePropertyAccessor((PsiMethod)element)) {
      return settings.isCollapseAccessors();
    }
    return settings.isCollapseMethods();
  }
 else   if (element instanceof PsiAnonymousClass) {
    return settings.isCollapseAnonymousClasses();
  }
 else   if (element instanceof PsiClass) {
    return !(element.getParent() instanceof PsiFile) && settings.isCollapseInnerClasses();
  }
 else   if (element instanceof PsiDocComment) {
    return settings.isCollapseJavadocs();
  }
 else   if (element instanceof PsiJavaFile) {
    return settings.isCollapseFileHeader();
  }
 else   if (element instanceof PsiAnnotation) {
    return settings.isCollapseAnnotations();
  }
 else {
    LOG.error("Unknown element:" + element);
    return false;
  }
}
