{
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiVariable)) {
    return;
  }
  final PsiType declType=((PsiVariable)parent).getType();
  if (!(declType instanceof PsiClassType)) {
    return;
  }
  final PsiType[] parameters=((PsiClassType)declType).getParameters();
  if (parameters.length == 0) {
    return;
  }
  PsiJavaCodeReferenceElement classReference=expression.getClassReference();
  if (classReference == null) {
    final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
    if (anonymousClass != null) {
      classReference=anonymousClass.getBaseClassReference();
      if (seemsLikeLambda(anonymousClass.getSuperClass())) {
        return;
      }
    }
  }
  if (classReference != null) {
    final PsiReferenceParameterList list=classReference.getParameterList();
    if (list != null) {
      if (!Arrays.equals(list.getTypeArguments(),parameters)) {
        return;
      }
      final String text=list.getText();
      if (text.startsWith("<") && text.endsWith(">") && text.length() > 5) {
        final TextRange range=list.getTextRange();
        addFoldRegion(foldElements,list,document,true,new TextRange(range.getStartOffset(),range.getEndOffset()));
      }
    }
  }
}
