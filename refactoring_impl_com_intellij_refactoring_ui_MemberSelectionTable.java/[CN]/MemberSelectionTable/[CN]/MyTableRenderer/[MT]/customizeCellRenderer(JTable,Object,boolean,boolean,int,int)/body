{
  final int modelColumn=convertColumnIndexToModel(column);
  final MemberInfo memberInfo=myMemberInfos[row];
  setToolTipText(myMemberInfoModel.getTooltipText(memberInfo));
  PsiElement member=memberInfo.getMember();
switch (modelColumn) {
case MemberSelectionTable.DISPLAY_NAME_COLUMN:
{
      Icon memberIcon=member.getIcon(0);
      Icon overrideIcon=MemberSelectionTable.EMPTY_OVERRIDE_ICON;
      if (member instanceof PsiMethod) {
        if (Boolean.TRUE.equals(memberInfo.getOverrides())) {
          overrideIcon=MemberSelectionTable.OVERRIDING_METHOD_ICON;
        }
 else         if (Boolean.FALSE.equals(memberInfo.getOverrides())) {
          overrideIcon=MemberSelectionTable.IMPLEMENTING_METHOD_ICON;
        }
 else {
          overrideIcon=MemberSelectionTable.EMPTY_OVERRIDE_ICON;
        }
      }
      RowIcon icon=new RowIcon(3);
      icon.setIcon(memberIcon,0);
      PsiModifierList modifiers=member instanceof PsiModifierListOwner ? ((PsiModifierListOwner)member).getModifierList() : null;
      if (modifiers != null) {
        IconUtil.setVisibilityIcon(modifiers,icon);
      }
 else {
        icon.setIcon(IconUtil.getEmptyIcon(true),1);
      }
      icon.setIcon(overrideIcon,2);
      setIcon(icon);
      break;
    }
default :
{
    setIcon(null);
  }
}
final boolean cellEditable=myMemberInfoModel.isMemberEnabled(memberInfo);
setEnabled(cellEditable);
if (value == null) return;
final int problem=myMemberInfoModel.checkForProblems(memberInfo);
Color c=null;
if (problem == MemberInfoModel.ERROR) {
c=Color.red;
}
 else if (problem == MemberInfoModel.WARNING && !isSelected) {
c=Color.blue;
}
append((String)value,new SimpleTextAttributes(Font.PLAIN,c));
}
