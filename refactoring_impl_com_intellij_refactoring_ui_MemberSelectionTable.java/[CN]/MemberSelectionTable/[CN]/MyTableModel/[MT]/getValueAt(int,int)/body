{
  final MemberInfo memberInfo=myMemberInfos[rowIndex];
switch (columnIndex) {
case MemberSelectionTable.CHECKED_COLUMN:
    if (myMemberInfoModel.isMemberEnabled(memberInfo)) {
      return memberInfo.isChecked() ? Boolean.TRUE : Boolean.FALSE;
    }
 else {
      return myMemberInfoModel.isCheckedWhenDisabled(memberInfo);
    }
case MemberSelectionTable.ABSTRACT_COLUMN:
{
    if (!(memberInfo.getMember() instanceof PsiMethod))     return null;
    if (memberInfo.isStatic())     return null;
    PsiMethod method=(PsiMethod)memberInfo.getMember();
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      final Boolean fixedAbstract=myMemberInfoModel.isFixedAbstract(memberInfo);
      if (fixedAbstract != null)       return fixedAbstract;
    }
    if (!myMemberInfoModel.isAbstractEnabled(memberInfo)) {
      return myMemberInfoModel.isAbstractWhenDisabled(memberInfo);
    }
 else {
      return memberInfo.isToAbstract() ? Boolean.TRUE : Boolean.FALSE;
    }
  }
case MemberSelectionTable.DISPLAY_NAME_COLUMN:
return memberInfo.getDisplayName();
default :
throw new RuntimeException("Incorrect column index");
}
}
