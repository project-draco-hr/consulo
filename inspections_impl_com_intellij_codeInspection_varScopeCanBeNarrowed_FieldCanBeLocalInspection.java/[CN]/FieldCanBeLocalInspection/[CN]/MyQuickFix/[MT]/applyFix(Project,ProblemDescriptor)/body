{
  if (!myField.isValid())   return;
  PsiManager manager=PsiManager.getInstance(project);
  final Collection<PsiReference> refs=ReferencesSearch.search(myField).findAll();
  LOG.assertTrue(refs.size() > 0);
  Set<PsiReference> refsSet=new HashSet<PsiReference>(refs);
  PsiCodeBlock anchorBlock=findAnchorBlock(refs);
  LOG.assertTrue(anchorBlock != null);
  final PsiElementFactory elementFactory=manager.getElementFactory();
  final CodeStyleManager styleManager=manager.getCodeStyleManager();
  final String propertyName=styleManager.variableNameToPropertyName(myField.getName(),VariableKind.FIELD);
  String localName=styleManager.propertyNameToVariableName(propertyName,VariableKind.LOCAL_VARIABLE);
  localName=RefactoringUtil.suggestUniqueVariableName(localName,anchorBlock,myField);
  PsiElement firstElement=getFirstElement(refs);
  boolean mayBeFinal=mayBeFinal(refsSet,firstElement);
  PsiElement newDeclaration=null;
  try {
    final PsiElement anchor=getAnchorElement(anchorBlock,firstElement);
    if (anchor instanceof PsiExpressionStatement && ((PsiExpressionStatement)anchor).getExpression() instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression expression=(PsiAssignmentExpression)((PsiExpressionStatement)anchor).getExpression();
      if (expression.getLExpression() instanceof PsiReferenceExpression && ((PsiReferenceExpression)expression.getLExpression()).isReferenceTo(myField)) {
        final PsiExpression initializer=expression.getRExpression();
        final PsiDeclarationStatement decl=elementFactory.createVariableDeclarationStatement(localName,myField.getType(),initializer);
        if (!mayBeFinal) {
          ((PsiVariable)decl.getDeclaredElements()[0]).getModifierList().setModifierProperty(PsiModifier.FINAL,false);
        }
        newDeclaration=anchor.replace(decl);
        refsSet.remove(expression.getLExpression());
        retargetReferences(elementFactory,localName,refsSet);
      }
 else {
        newDeclaration=addDeclarationWithoutInitializerAndRetargetReferences(elementFactory,localName,anchorBlock,anchor,refsSet);
      }
    }
 else {
      newDeclaration=addDeclarationWithoutInitializerAndRetargetReferences(elementFactory,localName,anchorBlock,anchor,refsSet);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  if (newDeclaration != null) {
    final PsiFile psiFile=myField.getContainingFile();
    final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (editor != null && IJSwingUtilities.hasFocus(editor.getComponent())) {
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
      if (file == psiFile) {
        editor.getCaretModel().moveToOffset(newDeclaration.getTextOffset());
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      }
    }
  }
  try {
    myField.normalizeDeclaration();
    myField.delete();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
