{
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  final List<VirtualFile> sourceRoots=new ArrayList<VirtualFile>();
  if (module == null) {
    final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(getProject());
    sourceRoots.addAll(Arrays.asList(projectRootManager.getContentSourceRoots()));
  }
 else {
    ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    sourceRoots.addAll(Arrays.asList(moduleRootManager.getSourceRoots()));
  }
  final Set<PsiPackage> topLevelPackages=new HashSet<PsiPackage>();
  for (  final VirtualFile root : sourceRoots) {
    final PsiDirectory directory=psiManager.findDirectory(root);
    if (directory == null) {
      continue;
    }
    final PsiPackage directoryPackage=JavaDirectoryService.getInstance().getPackage(directory);
    if (directoryPackage == null || PackageUtil.isPackageDefault(directoryPackage)) {
      final PsiDirectory[] subdirectories=directory.getSubdirectories();
      for (      PsiDirectory subdirectory : subdirectories) {
        final PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(subdirectory);
        if (aPackage != null && !PackageUtil.isPackageDefault(aPackage)) {
          topLevelPackages.add(aPackage);
        }
 else {
          final Iterator<PsiFile> files=builder.getFiles(subdirectory);
          if (!files.hasNext())           continue;
          TodoDirNode dirNode=new TodoDirNode(getProject(),subdirectory,builder);
          if (!children.contains(dirNode)) {
            children.add(dirNode);
          }
        }
      }
      final Iterator<PsiFile> filesUnderDirectory=builder.getFilesUnderDirectory(directory);
      for (; filesUnderDirectory.hasNext(); ) {
        final PsiFile file=filesUnderDirectory.next();
        TodoFileNode todoFileNode=new TodoFileNode(getProject(),file,builder,false);
        if (!children.contains(todoFileNode)) {
          children.add(todoFileNode);
        }
      }
    }
 else {
      topLevelPackages.add(directoryPackage);
    }
  }
  GlobalSearchScope scope=module != null ? GlobalSearchScope.moduleScope(module) : GlobalSearchScope.projectScope(getProject());
  ArrayList<PsiPackage> packages=new ArrayList<PsiPackage>();
  for (  PsiPackage psiPackage : topLevelPackages) {
    final PsiPackage aPackage=findNonEmptyPackage(psiPackage,module,getProject(),builder,scope);
    if (aPackage != null) {
      packages.add(aPackage);
    }
  }
  for (  PsiPackage psiPackage : packages) {
    if (!builder.getTodoTreeStructure().getIsFlattenPackages()) {
      PackageElement element=new PackageElement(module,psiPackage,false);
      TodoPackageNode packageNode=new TodoPackageNode(getProject(),element,builder,psiPackage.getQualifiedName());
      if (!children.contains(packageNode)) {
        children.add(packageNode);
      }
    }
 else {
      Set<PsiPackage> allPackages=new HashSet<PsiPackage>();
      traverseSubPackages(psiPackage,module,builder,getProject(),allPackages);
      for (      PsiPackage aPackage : allPackages) {
        TodoPackageNode packageNode=new TodoPackageNode(getProject(),new PackageElement(module,aPackage,false),builder);
        if (!children.contains(packageNode)) {
          children.add(packageNode);
        }
      }
    }
  }
  super.addPackagesToChildren(children,module,builder);
}
