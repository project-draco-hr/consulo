{
  final HgVcs vcs=HgVcs.getInstance(myProject);
  if (vcs == null) {
    return;
  }
  final HgGlobalSettings hgGlobalSettings=vcs.getGlobalSettings();
  @Nullable String rememberedLoginsForUrl=null;
  if (!StringUtils.isBlank(myURL)) {
    rememberedLoginsForUrl=hgGlobalSettings.getRememberedUserName(stripSchemaFromUrl(myURL));
  }
  String login=myProposedLogin;
  if (StringUtils.isBlank(login)) {
    login=rememberedLoginsForUrl;
  }
  String password=null;
  if (!StringUtils.isBlank(login) && myURL != null) {
    final String key=keyForUrlAndLogin(myURL,login);
    try {
      final PasswordSafeImpl passwordSafe=(PasswordSafeImpl)PasswordSafe.getInstance();
      password=passwordSafe.getMemoryProvider().getPassword(myProject,HgCommandAuthenticator.class,key);
      if (password == null) {
        final MasterKeyPasswordSafe masterKeyProvider=passwordSafe.getMasterKeyProvider();
        if (!masterKeyProvider.isEmpty()) {
          password=masterKeyProvider.getPassword(myProject,HgCommandAuthenticator.class,key);
        }
      }
    }
 catch (    PasswordSafeException e) {
      LOG.info("Couldn't get password for key [" + key + "]",e);
    }
  }
  if (!StringUtils.isBlank(password) && !StringUtils.isBlank(login)) {
    myUserName=login;
    myPassword=password;
    ok=true;
    return;
  }
  final AuthDialog dialog=new AuthDialog(myProject,HgVcsMessages.message("hg4idea.dialog.login.password.required"),HgVcsMessages.message("hg4idea.dialog.login.description",myURL),login,password);
  dialog.show();
  if (dialog.isOK()) {
    myUserName=dialog.getUsername();
    myPassword=dialog.getPassword();
    myRememberPassword=dialog.isRememberPassword();
    ok=true;
  }
}
