{
  final Application app=ApplicationManager.getApplication();
  if (myPostStartupActivitiesPassed)   return;
  runActivities(myDumbAwarePostStartupActivities);
  DumbService.getInstance(myProject).runWhenSmart(new Runnable(){
    public void run(){
synchronized (StartupManagerImpl.this) {
        app.assertIsDispatchThread();
        if (myProject.isDisposed())         return;
        runActivities(myDumbAwarePostStartupActivities);
        runActivities(myNotDumbAwarePostStartupActivities);
        myPostStartupActivitiesPassed=true;
      }
    }
  }
);
  if (!app.isUnitTestMode() && !myProject.isDisposed()) {
    if (!app.isHeadlessEnvironment()) {
      checkProjectRoots();
      final long sessionId=VirtualFileManager.getInstance().asyncRefresh(null);
      final MessageBusConnection connection=app.getMessageBus().connect();
      connection.subscribe(ProjectLifecycleListener.TOPIC,new ProjectLifecycleListener.Adapter(){
        @Override public void afterProjectClosed(        @NotNull Project project){
          RefreshQueue.getInstance().cancelSession(sessionId);
          connection.disconnect();
        }
      }
);
    }
 else {
      VirtualFileManager.getInstance().syncRefresh();
    }
  }
  Registry.get("ide.firstStartup").setValue(false);
}
