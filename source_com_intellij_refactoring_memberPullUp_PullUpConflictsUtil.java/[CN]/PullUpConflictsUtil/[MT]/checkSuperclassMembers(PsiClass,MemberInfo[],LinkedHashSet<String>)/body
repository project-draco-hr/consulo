{
  for (int i=0; i < infos.length; i++) {
    PsiElement member=infos[i].getMember();
    boolean isConflict=false;
    if (member instanceof PsiField) {
      String name=((PsiField)member).getName();
      isConflict=superClass.findFieldByName(name,false) != null;
    }
 else     if (member instanceof PsiMethod) {
      final PsiMethod superClassMethod=superClass.findMethodBySignature((PsiMethod)member,false);
      isConflict=superClassMethod != null && !superClassMethod.hasModifierProperty(PsiModifier.ABSTRACT);
    }
    if (isConflict) {
      String message=ConflictsUtil.getDescription(superClass,false) + " already contains a " + ConflictsUtil.getDescription(member,false);
      message=ConflictsUtil.capitalize(message);
      conflictsList.add(message);
    }
  }
}
