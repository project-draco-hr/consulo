{
  PsiMethod methodToImplement=getAnyMethodToImplement(aClass,allMethodsCollection);
  if (methodToImplement != null) {
    return methodToImplement;
  }
  PsiMethod[] methods=aClass.getMethods();
  for (  PsiMethod method : methods) {
    if (method.hasModifierProperty(PsiModifier.ABSTRACT))     return method;
  }
  PsiManager manager=aClass.getManager();
  for (  List<MethodSignatureBackedByPsiMethod> sameSignatureMethods : allMethodsCollection.values()) {
    for (int i=sameSignatureMethods.size() - 1; i >= 0; i--) {
      MethodSignatureBackedByPsiMethod methodSignature1=sameSignatureMethods.get(i);
      PsiMethod method1=methodSignature1.getMethod();
      PsiClass class1=method1.getContainingClass();
      if (class1 == null) {
        sameSignatureMethods.remove(i);
        continue;
      }
      if (!method1.hasModifierProperty(PsiModifier.ABSTRACT) || !method1.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) || manager.arePackagesTheSame(class1,aClass)) {
        continue;
      }
      for (int j=sameSignatureMethods.size() - 1; j >= 0; j--) {
        MethodSignatureBackedByPsiMethod methodSignature2=sameSignatureMethods.get(j);
        PsiMethod method2=methodSignature2.getMethod();
        PsiClass class2=method2.getContainingClass();
        if (i == j || class2 == null)         continue;
        if (class2.isInheritor(class1,true) && manager.arePackagesTheSame(class1,class2)) {
          sameSignatureMethods.remove(i);
          break;
        }
      }
    }
    for (int i=sameSignatureMethods.size() - 1; i >= 0; i--) {
      MethodSignatureBackedByPsiMethod methodSignature=sameSignatureMethods.get(i);
      PsiMethod method=methodSignature.getMethod();
      PsiClass class1=method.getContainingClass();
      if (class1 == null || !method.hasModifierProperty(PsiModifier.ABSTRACT) || !method.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) || manager.arePackagesTheSame(class1,aClass)) {
        continue;
      }
      return method;
    }
  }
  return null;
}
