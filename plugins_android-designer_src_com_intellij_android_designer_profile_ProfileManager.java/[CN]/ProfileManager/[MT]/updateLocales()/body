{
  List<LocaleData> locales=new ArrayList<LocaleData>();
  Map<String,Set<String>> language2Regions=new HashMap<String,Set<String>>();
  AndroidFacet facet=AndroidFacet.getInstance(getModule());
  if (facet != null) {
    VirtualFile[] resourceDirs=facet.getLocalResourceManager().getAllResourceDirs();
    for (    VirtualFile resourceDir : resourceDirs) {
      for (      VirtualFile resourceFile : resourceDir.getChildren()) {
        if (resourceFile.isDirectory()) {
          String[] segments=resourceFile.getName().split(AndroidConstants.RES_QUALIFIER_SEP);
          List<String> languageQualifiers=new ArrayList<String>();
          List<String> regionQualifiers=new ArrayList<String>();
          for (          String segment : segments) {
            LanguageQualifier languageQualifier=LanguageQualifier.getQualifier(segment);
            if (languageQualifier != null) {
              languageQualifiers.add(languageQualifier.getValue());
            }
            RegionQualifier regionQualifier=RegionQualifier.getQualifier(segment);
            if (regionQualifier != null) {
              regionQualifiers.add(regionQualifier.getValue());
            }
          }
          for (          String languageQualifier : languageQualifiers) {
            Set<String> regions=language2Regions.get(languageQualifier);
            if (regions == null) {
              regions=new HashSet<String>();
              language2Regions.put(languageQualifier,regions);
            }
            regions.addAll(regionQualifiers);
          }
        }
      }
    }
    for (    Map.Entry<String,Set<String>> e : language2Regions.entrySet()) {
      String language=e.getKey();
      Set<String> regions=e.getValue();
      for (      String region : regions) {
        String presentation=String.format("%1$s / %2$s",language,region);
        locales.add(new LocaleData(language,region,presentation));
      }
      String presentation=regions.isEmpty() ? String.format("%1$s / Any",language) : String.format("%1$s / Other",language);
      locales.add(new LocaleData(language,null,presentation));
    }
    Collections.sort(locales,new Comparator<LocaleData>(){
      @Override public int compare(      LocaleData l1,      LocaleData l2){
        return l1.toString().compareTo(l2.toString());
      }
    }
);
  }
  locales.add(new LocaleData(null,null,language2Regions.isEmpty() ? "Any locale" : "Other locale"));
  LocaleData newLocale=null;
  if (myProfile.getLocaleLanguage() != null || myProfile.getLocaleRegion() != null) {
    String localeLanguage=myProfile.getLocaleLanguage();
    String localeRegion=myProfile.getLocaleRegion();
    LocaleData newLocaleWithoutRegion=null;
    for (    LocaleData locale : locales) {
      if (Comparing.equal(locale.getLanguage(),localeLanguage)) {
        if (Comparing.equal(locale.getRegion(),localeRegion)) {
          newLocale=locale;
          break;
        }
        if (newLocaleWithoutRegion == null) {
          newLocaleWithoutRegion=locale;
        }
      }
    }
    if (newLocale == null) {
      newLocale=newLocaleWithoutRegion;
    }
  }
  if (newLocale == null) {
    Locale defaultLocale=Locale.getDefault();
    LocaleData defaultData=new LocaleData(defaultLocale.getLanguage(),defaultLocale.getCountry(),"");
    for (    LocaleData locale : locales) {
      if (locale.equals(defaultData)) {
        newLocale=locale;
        break;
      }
    }
  }
  if (newLocale == null && locales.size() > 0) {
    newLocale=locales.get(0);
  }
  myLocaleAction.setItems(locales,newLocale);
  updateLocale(newLocale);
}
