{
  myModuleProvider=moduleProvider;
  myRefreshAction=refreshAction;
  mySelectionRunnable=selectionRunnable;
  myLayoutDeviceManager=ProfileList.getInstance(moduleProvider.getProject()).getLayoutDeviceManager();
  myDeviceAction=new MyComboBoxAction<LayoutDevice>(){
    @Override protected boolean addSeparator(    DefaultActionGroup actionGroup,    LayoutDevice item){
      if (item == CUSTOM_DEVICE && myDevices.size() > 1) {
        actionGroup.addSeparator();
      }
      return false;
    }
    @Override protected boolean selectionChanged(    LayoutDevice item){
      if (item == CUSTOM_DEVICE) {
        LayoutDeviceConfiguration configuration=myDeviceConfigurationAction.getSelection();
        configuration=configuration != null && configuration.getDevice().getType() == LayoutDevice.Type.CUSTOM ? configuration : null;
        LayoutDeviceConfigurationsDialog dialog=new LayoutDeviceConfigurationsDialog(myModuleProvider.getProject(),configuration,myLayoutDeviceManager);
        dialog.show();
        if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
          myLayoutDeviceManager.saveUserDevices();
        }
        updatePlatform(getPlatform(null));
        String deviceName=dialog.getSelectedDeviceName();
        if (deviceName != null) {
          LayoutDevice newDevice=null;
          for (          LayoutDevice device : myDevices) {
            if (device.getName().equals(deviceName)) {
              newDevice=device;
              break;
            }
          }
          if (newDevice != null) {
            String configurationName=dialog.getSelectedDeviceConfigName();
            if (configurationName == null) {
              updateDevice(newDevice);
            }
 else {
              updateDevice(newDevice,configurationName);
            }
          }
        }
      }
 else {
        updateDevice(item);
        setSelection(item);
      }
      mySelectionRunnable.run();
      myRefreshAction.run();
      return item != CUSTOM_DEVICE;
    }
    @Override protected int getMaxRows(){
      return 20;
    }
  }
;
  myDeviceConfigurationAction=new MyComboBoxAction<LayoutDeviceConfiguration>(){
    @Override protected boolean selectionChanged(    LayoutDeviceConfiguration item){
      updateDeviceConfiguration(item);
      mySelectionRunnable.run();
      setSelection(item);
      myRefreshAction.run();
      return true;
    }
  }
;
  myTargetAction=new MyComboBoxAction<IAndroidTarget>(){
    @Override protected boolean selectionChanged(    IAndroidTarget item){
      updateTarget(item);
      mySelectionRunnable.run();
      setSelection(item);
      updateThemes();
      return true;
    }
  }
;
  myLocaleAction=new MyComboBoxAction<LocaleData>(){
    @Override protected boolean selectionChanged(    LocaleData item){
      updateLocale(item);
      mySelectionRunnable.run();
      setSelection(item);
      myRefreshAction.run();
      return true;
    }
  }
;
  myDockModeAction=new MyComboBoxAction<UiMode>(){
    @Override protected boolean selectionChanged(    UiMode item){
      myProfile.setDockMode(item.getResourceValue());
      mySelectionRunnable.run();
      setSelection(item);
      myRefreshAction.run();
      return true;
    }
  }
;
  myNightModeAction=new MyComboBoxAction<NightMode>(){
    @Override protected boolean selectionChanged(    NightMode item){
      myProfile.setNightMode(item.getResourceValue());
      mySelectionRunnable.run();
      setSelection(item);
      myRefreshAction.run();
      return true;
    }
  }
;
  myThemeAction=new AbstractComboBoxAction<ThemeData>(){
    @Override protected void update(    ThemeData theme,    Presentation presentation,    boolean popup){
      presentation.setEnabled(theme != null && theme != ThemeManager.FRAMEWORK && theme != ThemeManager.PROJECT);
      if (theme != null) {
        if (!popup && !theme.isProjectTheme() && myThemeManager.getAddedThemes().contains(new ThemeData(theme.getName(),true))) {
          presentation.setText(theme.getName() + " (framework)");
        }
 else         if (!popup || theme == ThemeManager.FRAMEWORK || theme == ThemeManager.PROJECT) {
          presentation.setText(theme.getName());
        }
 else {
          presentation.setText("      " + theme.getName());
        }
      }
 else {
        presentation.setText("[None]");
      }
    }
    @Override protected boolean selectionChanged(    ThemeData item){
      updateTheme(item);
      mySelectionRunnable.run();
      setSelection(item);
      myRefreshAction.run();
      return true;
    }
    @Override protected int getMaxRows(){
      return 20;
    }
  }
;
  myThemeAction.showDisabledActions(true);
}
