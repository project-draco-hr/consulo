{
  Proxy proxyToRelease=null;
  if (!interactive && configuration.isIsUseDefaultProxy()) {
    final HttpConfigurable instance=HttpConfigurable.getInstance();
    if (instance.USE_HTTP_PROXY && instance.PROXY_AUTHENTICATION && (StringUtil.isEmptyOrSpaces(instance.PROXY_LOGIN) || StringUtil.isEmptyOrSpaces(instance.getPlainProxyPassword()))) {
      return false;
    }
    if (instance.USE_PROXY_PAC) {
      final List<Proxy> select;
      try {
        select=CommonProxy.getInstance().select(new URI(url.toString()));
      }
 catch (      URISyntaxException e) {
        LOG.info("wrong URL: " + url.toString());
        return false;
      }
      if (select != null && !select.isEmpty()) {
        for (        Proxy proxy : select) {
          if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) {
            final InetSocketAddress address=(InetSocketAddress)proxy.address();
            final PasswordAuthentication password=HttpConfigurable.getInstance().getGenericPassword(address.getHostName(),address.getPort());
            if (password == null) {
              CommonProxy.getInstance().noAuthentication("http",address.getHostName(),address.getPort());
              proxyToRelease=proxy;
            }
          }
        }
      }
    }
  }
  SvnInteractiveAuthenticationProvider.clearCallState();
  try {
    new SVNWCClient(manager,configuration.getOptions(project)).doInfo(url,SVNRevision.UNDEFINED,SVNRevision.HEAD);
  }
 catch (  SVNAuthenticationException e) {
    log(e);
    return false;
  }
catch (  SVNCancelException e) {
    log(e);
    return false;
  }
catch (  final SVNException e) {
    if (e.getErrorMessage().getErrorCode().isAuthentication()) {
      log(e);
      return false;
    }
    LOG.info("some other exc",e);
    if (interactive) {
      showAuthenticationFailedWithHotFixes(project,configuration,e);
    }
    return false;
  }
 finally {
    if (!interactive && configuration.isIsUseDefaultProxy() && proxyToRelease != null) {
      final InetSocketAddress address=(InetSocketAddress)proxyToRelease.address();
      CommonProxy.getInstance().noAuthentication("http",address.getHostName(),address.getPort());
    }
  }
  if (!checkWrite) {
    return true;
  }
  if (SvnInteractiveAuthenticationProvider.wasCalled() && SvnInteractiveAuthenticationProvider.wasCancelled())   return false;
  if (SvnInteractiveAuthenticationProvider.wasCalled())   return true;
  final SvnVcs svnVcs=SvnVcs.getInstance(project);
  final SvnInteractiveAuthenticationProvider provider=new SvnInteractiveAuthenticationProvider(svnVcs,manager);
  final SVNAuthentication svnAuthentication=provider.requestClientAuthentication(kind,url,realm,null,null,true);
  if (svnAuthentication != null) {
    configuration.acknowledge(kind,realm,svnAuthentication);
    try {
      configuration.getAuthenticationManager(svnVcs).acknowledgeAuthentication(true,kind,realm,null,svnAuthentication);
    }
 catch (    SVNException e) {
      LOG.info(e);
    }
    return true;
  }
  return false;
}
