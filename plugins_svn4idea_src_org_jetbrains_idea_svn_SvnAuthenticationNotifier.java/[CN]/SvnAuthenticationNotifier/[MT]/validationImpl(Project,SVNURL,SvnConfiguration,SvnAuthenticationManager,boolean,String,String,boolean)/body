{
  SvnInteractiveAuthenticationProvider.clearCallState();
  try {
    new SVNWCClient(manager,configuration.getOptions(project)).doInfo(url,SVNRevision.UNDEFINED,SVNRevision.HEAD);
  }
 catch (  SVNAuthenticationException e) {
    log(e);
    return false;
  }
catch (  SVNCancelException e) {
    log(e);
    return false;
  }
catch (  final SVNException e) {
    if (e.getErrorMessage().getErrorCode().isAuthentication()) {
      log(e);
      return false;
    }
    LOG.info("some other exc",e);
    if (interactive) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          VcsBalloonProblemNotifier.showOverChangesView(project,"Authentication failed: " + e.getMessage(),MessageType.ERROR,new NamedRunnable(SvnBundle.message("confirmation.title.clear.authentication.cache")){
            @Override public void run(){
              SvnConfigurable.clearAuthenticationCache(project,null,configuration.getConfigurationDirectory());
            }
          }
,new NamedRunnable(SvnBundle.message("action.title.select.configuration.directory")){
            @Override public void run(){
              SvnConfigurable.selectConfigirationDirectory(configuration.getConfigurationDirectory(),new Consumer<String>(){
                @Override public void consume(                String s){
                  configuration.setConfigurationDirParameters(false,s);
                }
              }
,project,null);
            }
          }
);
        }
      }
,ModalityState.NON_MODAL,project.getDisposed());
    }
    return false;
  }
  if (!checkWrite) {
    return true;
  }
  if (SvnInteractiveAuthenticationProvider.wasCalled() && SvnInteractiveAuthenticationProvider.wasCancelled())   return false;
  if (SvnInteractiveAuthenticationProvider.wasCalled())   return true;
  final SvnVcs svnVcs=SvnVcs.getInstance(project);
  final SvnInteractiveAuthenticationProvider provider=new SvnInteractiveAuthenticationProvider(svnVcs,manager);
  final SVNAuthentication svnAuthentication=provider.requestClientAuthentication(kind,url,realm,null,null,true);
  if (svnAuthentication != null) {
    configuration.acknowledge(kind,realm,svnAuthentication);
    try {
      configuration.getAuthenticationManager(svnVcs).acknowledgeAuthentication(true,kind,realm,null,svnAuthentication);
    }
 catch (    SVNException e) {
      LOG.info(e);
    }
    return true;
  }
  return false;
}
