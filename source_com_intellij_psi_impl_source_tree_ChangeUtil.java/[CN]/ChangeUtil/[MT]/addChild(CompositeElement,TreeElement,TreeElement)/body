{
  LOG.assertTrue(anchorBefore == null || anchorBefore.getTreeParent() == parent);
  int offset=anchorBefore != null ? anchorBefore.getStartOffset() : parent.getStartOffset() + parent.getTextLength();
  PsiTreeChangeEventImpl event=null;
  PsiElement parentPsiElement=SourceTreeToPsiMap.treeElementToPsi(parent);
  PsiFile file=parentPsiElement.getContainingFile();
  checkConsistency(file);
  boolean physical=parentPsiElement.isPhysical();
  if (physical) {
    PsiManagerImpl manager=(PsiManagerImpl)parent.getManager();
    if (file != null) {
      manager.invalidateFile(file);
    }
    event=new PsiTreeChangeEventImpl(manager);
    event.setParent(parentPsiElement);
    event.setFile(file);
    event.setOffset(offset);
    event.setOldLength(0);
    manager.beforeChildAddition(event);
    RepositoryManager repositoryManager=manager.getRepositoryManager();
    if (repositoryManager != null) {
      repositoryManager.beforeChildAddedOrRemoved(file,parent,child);
    }
  }
  final CharTable newCharTab=SharedImplUtil.findCharTableByTree(parent);
  final CharTable oldCharTab=SharedImplUtil.findCharTableByTree(child);
  TreeUtil.remove(child);
  if (newCharTab != oldCharTab) {
    registerLeafsInCharTab(newCharTab,child,oldCharTab);
  }
  if (anchorBefore != null) {
    TreeUtil.insertBefore(anchorBefore,child);
  }
 else {
    TreeUtil.addChildren(parent,child);
  }
  PsiManagerImpl manager=(PsiManagerImpl)parent.getManager();
  parent.subtreeChanged();
  if (physical) {
    event.setChild(SourceTreeToPsiMap.treeElementToPsi(child));
    manager.childAdded(event);
  }
 else   if (manager != null) {
    manager.nonPhysicalChange();
  }
  checkConsistency(file);
}
