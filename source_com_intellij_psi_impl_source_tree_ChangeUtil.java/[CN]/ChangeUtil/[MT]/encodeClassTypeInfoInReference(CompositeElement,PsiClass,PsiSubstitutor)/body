{
  LOG.assertTrue(referencedClass != null);
  reference.putCopyableUserData(REFERENCED_CLASS_KEY,referencedClass);
  final PsiTypeParameterList typeParameterList=referencedClass.getTypeParameterList();
  if (typeParameterList == null)   return;
  final PsiTypeParameter[] typeParameters=typeParameterList.getTypeParameters();
  if (typeParameters.length == 0)   return;
  final CompositeElement referenceParameterList=(CompositeElement)reference.findChildByRole(ChildRole.REFERENCE_PARAMETER_LIST);
  int index=0;
  for (ASTNode child=referenceParameterList.firstChild; child != null; child=child.getTreeNext()) {
    if (child.getElementType() == TYPE) {
      final PsiType substitutedType=substitutor.substitute(typeParameters[index]);
      if (substitutedType != null) {
        encodeInfoInTypeElement((CompositeElement)child,substitutedType);
      }
      index++;
    }
  }
  final ASTNode qualifier=reference.findChildByRole(ChildRole.QUALIFIER);
  if (qualifier != null) {
    if (referencedClass.hasModifierProperty(PsiModifier.STATIC))     return;
    final PsiClass outerClass=referencedClass.getContainingClass();
    if (outerClass != null) {
      encodeClassTypeInfoInReference((CompositeElement)qualifier,outerClass,substitutor);
    }
  }
}
