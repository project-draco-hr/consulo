{
  if (oldChild.getTreeParent() != parent) {
    LOG.assertTrue(oldChild.getTreeParent() == parent);
  }
  int offset=oldChild.getStartOffset();
  int oldLength=oldChild.getTextLength();
  int newLength=newChild.getTextLength();
  final CharTable newCharTable=SharedImplUtil.findCharTableByTree(parent);
  final CharTable oldCharTable=SharedImplUtil.findCharTableByTree(newChild);
  PsiTreeChangeEventImpl event=null;
  PsiElement parentPsiElement=SourceTreeToPsiMap.treeElementToPsi(parent);
  PsiFile file=parentPsiElement.getContainingFile();
  boolean physical=parentPsiElement.isPhysical();
  if (physical) {
    PsiManagerImpl manager=(PsiManagerImpl)parent.getManager();
    if (file != null) {
      manager.invalidateFile(file);
    }
    event=new PsiTreeChangeEventImpl(manager);
    event.setParent(parentPsiElement);
    event.setOldChild(SourceTreeToPsiMap.treeElementToPsi(oldChild));
    event.setFile(file);
    event.setOffset(offset);
    event.setOldLength(oldLength);
    manager.beforeChildReplacement(event);
    RepositoryManager repositoryManager=manager.getRepositoryManager();
    if (repositoryManager != null) {
      repositoryManager.beforeChildAddedOrRemoved(file,parent,oldChild);
      repositoryManager.beforeChildAddedOrRemoved(file,parent,newChild);
    }
  }
  newChild.setTreeNext(null);
  if (oldCharTable != newCharTable) {
    registerLeafsInCharTab(newCharTable,newChild,oldCharTable);
  }
  oldChild.putUserData(CharTable.CHAR_TABLE_KEY,newCharTable);
  if (oldChild != newChild)   TreeUtil.replace(oldChild,newChild);
  parent.subtreeChanged();
  PsiManagerImpl manager=(PsiManagerImpl)parent.getManager();
  if (physical) {
    event.setNewChild(SourceTreeToPsiMap.treeElementToPsi(newChild));
    manager.childReplaced(event);
  }
 else   if (manager != null) {
    manager.nonPhysicalChange();
  }
  checkConsistency(file);
}
