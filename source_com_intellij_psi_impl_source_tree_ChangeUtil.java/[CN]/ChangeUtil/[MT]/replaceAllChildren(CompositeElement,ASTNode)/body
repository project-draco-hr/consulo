{
  transformAll((TreeElement)parent.getFirstChildNode());
  transformAll((TreeElement)newChildrenParent.getFirstChildNode());
  final CharTable newCharTab=SharedImplUtil.findCharTableByTree(parent);
  final CharTable oldCharTab=SharedImplUtil.findCharTableByTree(newChildrenParent);
  final ASTNode firstChild=newChildrenParent.getFirstChildNode();
  removeChildrenInner((TreeElement)newChildrenParent.getFirstChildNode(),null,oldCharTab);
  if (firstChild != null) {
    registerLeafsInCharTab(newCharTab,firstChild,oldCharTab);
    prepareAndRunChangeAction(new ChangeAction(){
      public void makeChange(      TreeChangeEvent destinationTreeChange){
        if (parent.getTreeParent() != null) {
          final ChangeInfoImpl changeInfo=ChangeInfoImpl.create(ChangeInfo.CONTENTS_CHANGED,parent);
          changeInfo.setOldLength(parent.getTextLength());
          destinationTreeChange.addElementaryChange(parent,changeInfo);
          TreeUtil.removeRange((TreeElement)parent.getFirstChildNode(),null);
          TreeUtil.addChildren(parent,(TreeElement)firstChild);
        }
 else {
          final TreeElement first=(TreeElement)parent.getFirstChildNode();
          remove(destinationTreeChange,newCharTab,first,null);
          add(destinationTreeChange,newCharTab,parent,(TreeElement)firstChild);
          repairRemovedElement(parent,newCharTab,first);
        }
      }
    }
,parent);
  }
 else {
    removeChildren(parent,(TreeElement)parent.getFirstChildNode(),null);
  }
}
