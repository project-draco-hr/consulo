{
  if (type instanceof PsiPrimitiveType)   return;
  LOG.assertTrue(typeElement.getElementType() == TYPE);
  if (type instanceof PsiArrayType) {
    final TreeElement firstChild=typeElement.firstChild;
    LOG.assertTrue(firstChild.getElementType() == TYPE);
    encodeInfoInTypeElement((CompositeElement)firstChild,((PsiArrayType)type).getComponentType());
    return;
  }
 else   if (type instanceof PsiWildcardType) {
    final PsiType bound=((PsiWildcardType)type).getBound();
    if (bound == null)     return;
    final TreeElement lastChild=typeElement.lastChild;
    if (lastChild.getElementType() != TYPE)     return;
    encodeInfoInTypeElement((CompositeElement)lastChild,bound);
  }
 else   if (type instanceof PsiCapturedWildcardType) {
    final PsiType bound=((PsiCapturedWildcardType)type).getWildcard().getBound();
    if (bound == null)     return;
    final TreeElement lastChild=typeElement.lastChild;
    if (lastChild.getElementType() != TYPE)     return;
    encodeInfoInTypeElement((CompositeElement)lastChild,bound);
  }
 else   if (type instanceof PsiIntersectionType) {
    encodeInfoInTypeElement(typeElement,((PsiIntersectionType)type).getRepresentative());
    return;
  }
 else {
    LOG.assertTrue(type instanceof PsiClassType);
    final PsiClassType classType=(PsiClassType)type;
    final PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
    final PsiClass referencedClass=resolveResult.getElement();
    if (referencedClass == null)     return;
    final TreeElement reference=typeElement.firstChild;
    LOG.assertTrue(reference.getElementType() == JAVA_CODE_REFERENCE);
    encodeClassTypeInfoInReference((CompositeElement)reference,resolveResult.getElement(),resolveResult.getSubstitutor());
  }
}
