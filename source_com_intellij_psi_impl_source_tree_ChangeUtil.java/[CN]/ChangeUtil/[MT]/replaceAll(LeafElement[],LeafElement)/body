{
  if (leafElements.length == 0)   return;
  final CompositeElement parent=leafElements[0].getTreeParent();
  if (LOG.isDebugEnabled()) {
    for (int i=0; i < leafElements.length; i++) {
      final LeafElement leafElement=leafElements[i];
      LOG.assertTrue(leafElement.getTreeParent() == parent);
    }
  }
  final PsiElement psiParent=SourceTreeToPsiMap.treeElementToPsi(parent);
  final PsiFile containingFile=psiParent.getContainingFile();
  final PsiManagerImpl manager=(PsiManagerImpl)containingFile.getManager();
  final PsiTreeChangeEventImpl event=new PsiTreeChangeEventImpl(manager);
  if (containingFile.isPhysical()) {
    event.setParent(psiParent);
    event.setFile(containingFile);
    event.setOffset(parent.getStartOffset());
    event.setOldLength(parent.getTextLength());
    manager.beforeChildrenChange(event);
  }
  TreeUtil.insertAfter(leafElements[0],merged);
  for (int i=0; i < leafElements.length; i++)   TreeUtil.remove(leafElements[i]);
  parent.subtreeChanged();
  if (containingFile.isPhysical())   manager.childrenChanged(event);
  checkConsistency(containingFile);
}
