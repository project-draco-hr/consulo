{
  if (element instanceof CompositeElement) {
    ChameleonTransforming.transformChildren(element);
    TreeElement child=element.getFirstChildNode();
    while (child != null) {
      child=decodeInformation(child,shallDecodeEscapedTexts);
      child=child.getTreeNext();
    }
    if (element.getElementType() == JavaElementType.JAVA_CODE_REFERENCE || element.getElementType() == JavaElementType.REFERENCE_EXPRESSION) {
      PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)SourceTreeToPsiMap.treeElementToPsi(element);
      final PsiClass refClass=element.getCopyableUserData(REFERENCED_CLASS_KEY);
      if (refClass != null) {
        element.putCopyableUserData(REFERENCED_CLASS_KEY,null);
        PsiManager manager=refClass.getManager();
        JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(refClass.getProject());
        PsiElement refElement1=ref.resolve();
        try {
          if (refClass != refElement1 && !manager.areElementsEquivalent(refClass,refElement1)) {
            if (((CompositeElement)element).findChildByRole(ChildRole.QUALIFIER) == null) {
              ref=(PsiJavaCodeReferenceElement)ref.bindToElement(refClass);
            }
          }
 else {
            ref=(PsiJavaCodeReferenceElement)codeStyleManager.shortenClassReferences(ref,JavaCodeStyleManager.DO_NOT_ADD_IMPORTS);
          }
          element=(TreeElement)SourceTreeToPsiMap.psiElementToTree(ref);
        }
 catch (        IncorrectOperationException e) {
          ((PsiImportHolder)ref.getContainingFile()).importClass(refClass);
        }
      }
 else {
        final PsiMember refMember=element.getCopyableUserData(REFERENCED_MEMBER_KEY);
        if (refMember != null) {
          element.putCopyableUserData(REFERENCED_MEMBER_KEY,null);
          PsiElement refElement1=ref.resolve();
          if (refMember != refElement1 && !refMember.getManager().areElementsEquivalent(refMember,refElement1)) {
            try {
              ref=(PsiJavaCodeReferenceElement)ref.bindToElement(refMember);
            }
 catch (            IncorrectOperationException e) {
            }
            element=(TreeElement)SourceTreeToPsiMap.psiElementToTree(ref);
          }
        }
      }
    }
 else     if (element.getElementType() == JavaElementType.MODIFIER_LIST) {
      if (element.getUserData(INTERFACE_MODIFIERS_FLAG_KEY) != null) {
        element.putUserData(INTERFACE_MODIFIERS_FLAG_KEY,null);
        try {
          PsiModifierList modifierList=(PsiModifierList)SourceTreeToPsiMap.treeElementToPsi(element);
          if (element.getTreeParent().getElementType() == JavaElementType.FIELD) {
            modifierList.setModifierProperty(PsiModifier.PUBLIC,true);
            modifierList.setModifierProperty(PsiModifier.STATIC,true);
            modifierList.setModifierProperty(PsiModifier.FINAL,true);
          }
 else           if (element.getTreeParent().getElementType() == JavaElementType.METHOD) {
            modifierList.setModifierProperty(PsiModifier.PUBLIC,true);
            modifierList.setModifierProperty(PsiModifier.ABSTRACT,true);
          }
 else           if (element.getTreeParent().getElementType() == JavaElementType.ANNOTATION_METHOD) {
            modifierList.setModifierProperty(PsiModifier.PUBLIC,true);
            modifierList.setModifierProperty(PsiModifier.ABSTRACT,true);
          }
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
  }
 else   if (shallDecodeEscapedTexts && element instanceof LeafElement && !(element instanceof OuterLanguageElement)) {
    if (!isInCData(element)) {
      final String original=element.getText();
      final String escaped=StringUtil.escapeXml(original);
      if (!Comparing.equal(original,escaped) && element.getCopyableUserData(ALREADY_ESCAPED) == null) {
        final LeafElement copy=(LeafElement)element.copyElement();
        copy.setText(escaped);
        element.getTreeParent().replaceChild(element,copy);
        copy.putCopyableUserData(ALREADY_ESCAPED,Boolean.TRUE);
        return copy;
      }
    }
  }
  return element;
}
