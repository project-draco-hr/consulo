{
  List<String> ret=new ArrayList<String>();
  final PsiDocComment comment=PsiTreeUtil.getParentOfType(position,PsiDocComment.class);
  final PsiElement parent=comment.getContext();
  final boolean isInline=position.getContext() instanceof PsiInlineDocTag;
  final JavadocManager manager=context.file.getManager().getJavadocManager();
  final JavadocTagInfo[] infos=manager.getTagInfos(parent);
  for (  JavadocTagInfo info : infos) {
    if (info.getName().equals(InspectionManagerEx.SUPPRESS_INSPECTIONS_TAG_NAME))     continue;
    if (isInline != (info.isInline()))     continue;
    ret.add(info.getName());
  }
  InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(position.getProject()).getInspectionProfile(position);
  final InspectionProfileEntry inspectionTool=inspectionProfile.getInspectionTool(JavaDocLocalInspection.SHORT_NAME);
  JavaDocLocalInspection inspection=(JavaDocLocalInspection)((LocalInspectionToolWrapper)inspectionTool).getTool();
  final StringTokenizer tokenizer=new StringTokenizer(inspection.myAdditionalJavadocTags,", ");
  while (tokenizer.hasMoreTokens()) {
    ret.add(tokenizer.nextToken());
  }
  return ret.toArray(new String[ret.size()]);
}
