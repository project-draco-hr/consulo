{
  PsiDocTag[] localTags=getThrowsTags(comment);
  LinkedList<Pair<PsiDocTag,InheritDocProvider<PsiDocTag>>> collectedTags=new LinkedList<Pair<PsiDocTag,InheritDocProvider<PsiDocTag>>>();
  LinkedList<PsiClassType> holder=new LinkedList<PsiClassType>(Arrays.asList(method.getThrowsList().getReferencedTypes()));
  for (int i=localTags.length - 1; i > -1; i--) {
    PsiDocTagValue valueElement=localTags[i].getValueElement();
    if (valueElement != null) {
      try {
        PsiClassType t=(PsiClassType)method.getManager().getElementFactory().createTypeFromText(valueElement.getText(),method);
        if (!holder.contains(t)) {
          holder.addFirst(t);
        }
      }
 catch (      IncorrectOperationException e) {
      }
    }
  }
  PsiClassType[] trousers=holder.toArray(new PsiClassType[holder.size()]);
  for (  PsiClassType trouser : trousers) {
    if (trouser != null) {
      String paramName=trouser.getCanonicalText();
      Pair<PsiDocTag,InheritDocProvider<PsiDocTag>> parmTag=null;
      for (      PsiDocTag localTag : localTags) {
        PsiDocTagValue value=localTag.getValueElement();
        if (value != null) {
          String tagName=value.getText();
          if (tagName != null && areWeakEqual(tagName,paramName)) {
            parmTag=new Pair<PsiDocTag,InheritDocProvider<PsiDocTag>>(localTag,ourEmptyProvider);
            break;
          }
        }
      }
      if (parmTag == null) {
        parmTag=findInheritDocTag(method,exceptionLocator(paramName));
      }
      if (parmTag != null) {
        collectedTags.addLast(parmTag);
      }
 else {
        try {
          final PsiDocTag tag=method.getManager().getElementFactory().createDocCommentFromText("/** @exception " + paramName + " */",method.getContainingFile()).getTags()[0];
          collectedTags.addLast(new Pair<PsiDocTag,InheritDocProvider<PsiDocTag>>(tag,ourEmptyProvider));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
  }
  if (collectedTags.size() > 0) {
    buffer.append("<DD><DL>");
    buffer.append("<DT><b>").append(CodeInsightBundle.message("javadoc.throws")).append("</b>");
    for (    Pair<PsiDocTag,InheritDocProvider<PsiDocTag>> tag : collectedTags) {
      PsiElement[] elements=tag.first.getDataElements();
      if (elements.length == 0)       continue;
      buffer.append("<DD>");
      String text=elements[0].getText();
      int index=JavaDocUtil.extractReference(text);
      String refText=text.substring(0,index).trim();
      generateLink(buffer,refText,null,method,false);
      String rest=text.substring(index);
      if (rest.length() > 0 || elements.length > 1)       buffer.append(" - ");
      buffer.append(rest);
      generateValue(buffer,elements,1,mapProvider(tag.second,true));
    }
    buffer.append("</DD></DL></DD>");
  }
}
