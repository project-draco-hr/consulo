{
  final JavaCommandLineState state=new JavaCommandLineState(runnerSettings,configurationSettings){
    private AppletHtmlFile myHtmlURL=null;
    protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      myHtmlURL=getHtmlURL();
      if (myHtmlURL != null) {
        final int classPathType=myHtmlURL.isHttp() ? JavaParameters.JDK_ONLY : JavaParameters.JDK_AND_CLASSES_AND_TESTS;
        final RunConfigurationModule runConfigurationModule=getConfigurationModule();
        if (runConfigurationModule.getModule() == null) {
          throw CantRunException.noModuleConfigured(runConfigurationModule.getModuleName());
        }
        params.configureByModule(runConfigurationModule.getModule(),classPathType);
        final String policyFileParameter=getPolicyFileParameter();
        if (policyFileParameter != null) {
          params.getVMParametersList().add(policyFileParameter);
        }
        params.getVMParametersList().addParametersString(VM_PARAMETERS);
        params.setMainClass("sun.applet.AppletViewer");
        if (params.getJdk().getVersionString().indexOf("1.1") > -1) {
          params.getClassPath().add(params.getJdkPath() + File.separator + "lib"+ File.separator+ "classes.zip");
        }
 else {
          params.getClassPath().add(params.getJdkPath() + File.separator + "lib"+ File.separator+ "tools.jar");
        }
        params.getProgramParametersList().add(myHtmlURL.getUrl());
      }
      return params;
    }
    protected OSProcessHandler startProcess() throws ExecutionException {
      final OSProcessHandler handler=super.startProcess();
      final AppletHtmlFile htmlUrl=myHtmlURL;
      if (htmlUrl != null) {
        handler.addProcessListener(new ProcessAdapter(){
          public void processTerminated(          ProcessEvent event){
            htmlUrl.deleteFile();
          }
        }
);
      }
      return handler;
    }
  }
;
  state.setConsoleBuilder(TextConsoleBuidlerFactory.getInstance().createBuilder(getProject()));
  state.setModulesToCompile(getModules());
  return state;
}
