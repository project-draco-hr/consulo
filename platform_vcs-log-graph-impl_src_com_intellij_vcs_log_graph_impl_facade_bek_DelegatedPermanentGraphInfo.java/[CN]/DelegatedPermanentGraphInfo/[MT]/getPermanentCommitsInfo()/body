{
  final PermanentCommitsInfo<CommitId> commitsInfo=myDelegateInfo.getPermanentCommitsInfo();
  return new PermanentCommitsInfo<CommitId>(){
    @NotNull @Override public CommitId getCommitId(    int permanentNodeIndex){
      return commitsInfo.getCommitId(myBekIntMap.getUsualIndex(permanentNodeIndex));
    }
    @Override public long getTimestamp(    int permanentNodeIndex){
      return commitsInfo.getTimestamp(myBekIntMap.getUsualIndex(permanentNodeIndex));
    }
    @Override public int getPermanentNodeIndex(    @NotNull CommitId commitId){
      int usualIndex=commitsInfo.getPermanentNodeIndex(commitId);
      return myBekIntMap.getBekIndex(usualIndex);
    }
    @NotNull @Override public Set<Integer> convertToCommitIndexes(    Collection<CommitId> heads){
      Set<Integer> usualIndexes=commitsInfo.convertToCommitIndexes(heads);
      return ContainerUtil.map2Set(usualIndexes,new Function<Integer,Integer>(){
        @Override public Integer fun(        Integer integer){
          return myBekIntMap.getBekIndex(integer);
        }
      }
);
    }
  }
;
}
