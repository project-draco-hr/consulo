{
  File basePath=new File(PathManager.getSystemPath() + "/caches/");
  basePath.mkdirs();
  final File namesFile=new File(basePath,"names.dat");
  final File attributesFile=new File(basePath,"attrib.dat");
  final File recordsFile=new File(basePath,"records.dat");
  try {
    myNames=new PersistentStringEnumerator(namesFile);
    myAttributes=Storage.create(attributesFile.getCanonicalPath());
    myRecords=new MappedFile(recordsFile,20 * 1024);
    if (myRecords.length() == 0) {
      cleanRecord(0);
      cleanRecord(1);
      setCurrentVersion();
    }
    if (getVersion() != VERSION) {
      throw new IOException("FS repository version mismatch");
    }
    if (myRecords.getInt(HEADER_CONNECTION_STATUS_OFFSET) != SAFELY_CLOSED_MAGIC) {
      throw new IOException("FS repostiory wasn't safely shut down");
    }
    myRecords.putInt(HEADER_CONNECTION_STATUS_OFFSET,CONNECTED_MAGIC);
  }
 catch (  IOException e) {
    LOG.info("Filesystem storage is corrupted or does not exist. [Re]Building. Reason: " + e.getMessage());
    try {
      closeFiles();
      boolean deleted=FileUtil.delete(namesFile) && Storage.deleteFiles(attributesFile.getCanonicalPath()) && FileUtil.delete(recordsFile);
      if (!deleted) {
        throw new IOException("Cannot delete filesystem storage files");
      }
    }
 catch (    IOException e1) {
      throw new RuntimeException("Can't rebuild filesystem storage ",e1);
    }
    init();
  }
}
