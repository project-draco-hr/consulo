{
  FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  descriptor.setTitle("Select Directory for MANIFEST.MF file");
  final VirtualFile[] files=FileChooser.chooseFiles(myContext.getProject(),descriptor,ManifestFileUtil.suggestManifestFileDirectory(myElement,myContext,myContext.getArtifactType()));
  if (files.length != 1)   return;
  final Ref<IOException> exc=Ref.create(null);
  final VirtualFile file=new WriteAction<VirtualFile>(){
    protected void run(    final Result<VirtualFile> result){
      VirtualFile dir=files[0];
      try {
        if (!dir.getName().equals(ManifestFileUtil.MANIFEST_DIR_NAME)) {
          VirtualFile newDir=dir.findChild(ManifestFileUtil.MANIFEST_DIR_NAME);
          if (newDir == null) {
            newDir=dir.createChildDirectory(this,ManifestFileUtil.MANIFEST_DIR_NAME);
          }
          dir=newDir;
        }
        result.setResult(dir.createChildData(this,ManifestFileUtil.MANIFEST_FILE_NAME));
      }
 catch (      IOException e) {
        exc.set(e);
      }
    }
  }
.execute().getResultObject();
  final IOException exception=exc.get();
  if (exception != null) {
    LOG.info(exception);
    Messages.showErrorDialog(myMainPanel,exception.getMessage(),CommonBundle.getErrorTitle());
    return;
  }
  PackagingElementFactory.getInstance().addFileCopy(myElement,ManifestFileUtil.MANIFEST_DIR_NAME,file.getPath());
  myContext.getThisArtifactEditor().updateLayoutTree();
  updateComponents(new ManifestFileConfiguration(null,null,file.getPath()));
  apply();
}
