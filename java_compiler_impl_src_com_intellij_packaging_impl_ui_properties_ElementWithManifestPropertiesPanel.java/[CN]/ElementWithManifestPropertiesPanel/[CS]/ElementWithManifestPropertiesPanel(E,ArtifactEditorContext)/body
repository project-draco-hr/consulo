{
  myElement=element;
  myManifestFileConfiguration=context.getManifestFile(element,context.getArtifactType());
  myContext=context;
  myMainClassField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=context.getProject();
      final TreeClassChooserFactory chooserFactory=TreeClassChooserFactory.getInstance(project);
      final GlobalSearchScope searchScope=GlobalSearchScope.allScope(project);
      final PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(myMainClassField.getText(),searchScope);
      final TreeClassChooser chooser=chooserFactory.createWithInnerClassesScopeChooser("Select Main Class",searchScope,new MainClassFilter(),aClass);
      chooser.showDialog();
      final PsiClass selected=chooser.getSelectedClass();
      if (selected != null) {
        myMainClassField.setText(selected.getQualifiedName());
      }
    }
  }
);
  myClasspathField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Messages.showTextAreaDialog(myClasspathField.getTextField(),"Edit Classpath","classpath-attribute-editor");
    }
  }
);
  myClasspathField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      myContext.queueValidation();
    }
  }
);
  myUseExistingManifestButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      chooseManifest();
    }
  }
);
  myCreateManifestButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      createManifest();
    }
  }
);
  myRemoveFromArtifactButton.setVisible(false);
  myRemoveFromArtifactButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      removeManifest();
    }
  }
);
}
