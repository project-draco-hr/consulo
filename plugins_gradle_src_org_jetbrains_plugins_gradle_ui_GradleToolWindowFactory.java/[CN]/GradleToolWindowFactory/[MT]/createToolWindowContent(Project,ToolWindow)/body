{
  final ProjectStructureServices context=ServiceManager.getService(project,ProjectStructureServices.class);
  final GradleProjectStructureChangesPanel projectStructurePanel=new GradleProjectStructureChangesPanel(project,context);
  final String projectStructureTitle=ExternalSystemBundle.message("gradle.sync.title.tab");
  ContentImpl projectStructureContent=new ContentImpl(projectStructurePanel,projectStructureTitle,true);
  ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addContent(projectStructureContent);
  String tasksTitle=ExternalSystemBundle.message("gradle.task.title.tab");
  ContentImpl tasksContent=new ContentImpl(new GradleTasksPanel(project),tasksTitle,true);
  contentManager.addContent(tasksContent);
  project.getMessageBus().connect(project).subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
    @Override public void rootsChanged(    ModuleRootEvent event){
      projectStructurePanel.getTreeModel().onModuleRootsChange();
    }
  }
);
  String toSelect=PropertiesComponent.getInstance(project).getValue(GradleConstants.ACTIVE_TOOL_WINDOW_TAB_KEY,projectStructureTitle);
  if (tasksTitle.equals(toSelect)) {
    contentManager.setSelectedContent(tasksContent);
  }
  contentManager.addContentManagerListener(new ContentManagerAdapter(){
    @Override public void selectionChanged(    ContentManagerEvent event){
      if (!project.isDisposed()) {
        PropertiesComponent.getInstance(project).setValue(GradleConstants.ACTIVE_TOOL_WINDOW_TAB_KEY,event.getContent().getDisplayName());
      }
    }
  }
);
}
