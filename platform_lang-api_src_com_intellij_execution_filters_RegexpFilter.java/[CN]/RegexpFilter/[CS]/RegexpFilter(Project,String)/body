{
  myProject=project;
  validate(expression);
  if (expression == null || expression.trim().isEmpty()) {
    throw new InvalidExpressionException("expression == null or empty");
  }
  int filePathIndex=expression.indexOf(FILE_PATH_MACROS);
  int lineIndex=expression.indexOf(LINE_MACROS);
  int columnIndex=expression.indexOf(COLUMN_MACROS);
  if (filePathIndex == -1) {
    throw new InvalidExpressionException("Expression must contain " + FILE_PATH_MACROS + " macros.");
  }
  final TreeMap<Integer,String> map=new TreeMap<Integer,String>();
  map.put(new Integer(filePathIndex),FILE_STR);
  expression=StringUtil.replace(expression,FILE_PATH_MACROS,FILE_PATH_REGEXP);
  if (lineIndex != -1) {
    expression=StringUtil.replace(expression,LINE_MACROS,NUMBER_REGEXP);
    map.put(new Integer(lineIndex),LINE_STR);
  }
  if (columnIndex != -1) {
    expression=StringUtil.replace(expression,COLUMN_MACROS,NUMBER_REGEXP);
    map.put(new Integer(columnIndex),COLUMN_STR);
  }
  int count=0;
  for (  final Integer integer : map.keySet()) {
    count++;
    final String s=map.get(integer);
    if (FILE_STR.equals(s)) {
      filePathIndex=count;
    }
 else     if (LINE_STR.equals(s)) {
      lineIndex=count;
    }
 else     if (COLUMN_STR.equals(s)) {
      columnIndex=count;
    }
  }
  myFileRegister=filePathIndex;
  myLineRegister=lineIndex;
  myColumnRegister=columnIndex;
  myPattern=Pattern.compile(expression,Pattern.MULTILINE);
}
