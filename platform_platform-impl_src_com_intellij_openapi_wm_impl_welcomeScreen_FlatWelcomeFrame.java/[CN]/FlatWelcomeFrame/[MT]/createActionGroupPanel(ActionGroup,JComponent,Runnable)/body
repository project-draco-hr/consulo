{
  JPanel actionsListPanel=new JPanel(new BorderLayout());
  actionsListPanel.setBackground(getProjectsBackground());
  final List<AnAction> groups=flattenActionGroups(action);
  final JBList list=new JBList(groups);
  list.setBackground(getProjectsBackground());
  list.setCellRenderer(new GroupedItemsListRenderer(new ListItemDescriptorAdapter(){
    @Nullable @Override public String getTextFor(    Object value){
      return getActionText((AnAction)value);
    }
    @Nullable @Override public String getCaptionAboveOf(    Object value){
      return getParentGroupName((AnAction)value);
    }
    @Override public boolean hasSeparatorAboveOf(    Object value){
      int index=groups.indexOf(value);
      final String parentGroupName=getParentGroupName((AnAction)value);
      if (index < 1)       return parentGroupName != null;
      AnAction upper=groups.get(index - 1);
      if (getParentGroupName(upper) == null && parentGroupName != null)       return true;
      return !Comparing.equal(getParentGroupName(upper),parentGroupName);
    }
  }
){
    @Override protected JComponent createItemComponent(){
      myTextLabel=new ErrorLabel();
      myTextLabel.setOpaque(true);
      myTextLabel.setBorder(JBUI.Borders.empty(3,7));
      return myTextLabel;
    }
    @Override protected void customizeComponent(    JList list,    Object value,    boolean isSelected){
      if (myTextLabel != null) {
        myTextLabel.setText(getActionText(((AnAction)value)));
        myTextLabel.setIcon(((AnAction)value).getTemplatePresentation().getIcon());
      }
    }
  }
);
  JScrollPane pane=ScrollPaneFactory.createScrollPane(list,true);
  pane.setBackground(getProjectsBackground());
  actionsListPanel.add(pane,BorderLayout.CENTER);
  if (backAction != null) {
    final JLabel back=new JLabel(AllIcons.Actions.Back);
    back.setBorder(JBUI.Borders.empty(3,7,10,7));
    back.setHorizontalAlignment(SwingConstants.LEFT);
    new ClickListener(){
      @Override public boolean onClick(      @NotNull MouseEvent event,      int clickCount){
        backAction.run();
        return true;
      }
    }
.installOn(back);
    actionsListPanel.add(back,BorderLayout.SOUTH);
  }
  final Ref<Component> selected=Ref.create();
  final JPanel main=new JPanel(new BorderLayout());
  main.add(actionsListPanel,BorderLayout.WEST);
  ListSelectionListener selectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      if (!selected.isNull()) {
        main.remove(selected.get());
      }
      Object value=list.getSelectedValue();
      if (value instanceof AbstractActionWithPanel) {
        JPanel panel=((AbstractActionWithPanel)value).createPanel();
        panel.setBorder(JBUI.Borders.empty(7,10));
        selected.set(panel);
        main.add(selected.get());
        for (        JButton button : UIUtil.findComponentsOfType(main,JButton.class)) {
          if (button.getClientProperty(DialogWrapper.DEFAULT_ACTION) == Boolean.TRUE) {
            parent.getRootPane().setDefaultButton(button);
            break;
          }
        }
        main.revalidate();
        main.repaint();
      }
    }
  }
;
  list.addListSelectionListener(selectionListener);
  if (backAction != null) {
    new AnAction(){
      @RequiredDispatchThread @Override public void actionPerformed(      @NotNull AnActionEvent e){
        backAction.run();
      }
    }
.registerCustomShortcutSet(KeyEvent.VK_ESCAPE,0,main);
  }
  return Pair.create(main,list);
}
