{
  PsiElement blockPsi=block.getNode().getPsi();
  Map<PsiElement,Alignment> alignments=block.myInnerAlignments;
  if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) {
    return generateForBinaryExpr(node,myWrap,mySettings,alignments);
  }
  if ((block.getNode().getElementType() == mSTRING_LITERAL || block.getNode().getElementType() == mGSTRING_LITERAL) && block.getTextRange().equals(block.getNode().getTextRange())) {
    String text=block.getNode().getText();
    if (text.length() > 6) {
      if (text.substring(0,3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0,3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) {
        return generateForMultiLineString(block.getNode(),myAlignment,myWrap,mySettings,alignments);
      }
    }
  }
  if (block.getNode().getElementType() == mGSTRING_BEGIN && block.getTextRange().equals(block.getNode().getTextRange())) {
    String text=block.getNode().getText();
    if (text.length() > 3) {
      if (text.substring(0,3).equals("\"\"\"")) {
        return generateForMultiLineGStringBegin(block.getNode(),myAlignment,myWrap,mySettings,alignments);
      }
    }
  }
  if (block.getNode().getElementType() == GSTRING) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    ASTNode[] children=getGroovyChildren(node);
    for (    ASTNode childNode : children) {
      if (childNode.getTextRange().getLength() > 0) {
        final Indent indent=GroovyIndentProcessor.getChildIndent(block,childNode);
        subBlocks.add(new GroovyBlock(childNode,myAlignment,indent,myWrap,mySettings,alignments));
      }
    }
    return subBlocks;
  }
  if (NESTED.contains(block.getNode().getElementType()) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) {
    final List<Block> subBlocks=new ArrayList<Block>();
    Alignment dotsAlignment=mySettings.ALIGN_MULTILINE_CHAINED_METHODS ? Alignment.createAlignment() : null;
    addNestedChildren(node.getPsi(),subBlocks,dotsAlignment,myWrap,mySettings,true,alignments);
    return subBlocks;
  }
  if (isListLikeClause(blockPsi)) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    List<ASTNode> astNodes=visibleChildren(node);
    final Alignment alignment=mustAlign(blockPsi,mySettings,astNodes) ? Alignment.createAlignment() : null;
    for (    ASTNode childNode : astNodes) {
      final Indent indent=GroovyIndentProcessor.getChildIndent(block,childNode);
      subBlocks.add(new GroovyBlock(childNode,isKeyword(childNode) ? null : alignment,indent,myWrap,mySettings,alignments));
    }
    return subBlocks;
  }
  boolean classLevel=blockPsi instanceof GrTypeDefinitionBody;
  if (blockPsi instanceof GrCodeBlock || blockPsi instanceof GroovyFile || classLevel) {
    List<ASTNode> children=visibleChildren(node);
    calculateAlignments(children,classLevel,mySettings,alignments);
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    for (    ASTNode childNode : children) {
      final Indent indent=GroovyIndentProcessor.getChildIndent(block,childNode);
      subBlocks.add(new GroovyBlock(childNode,classLevel ? myAlignment : alignments.get(childNode.getPsi()),indent,myWrap,mySettings,alignments));
    }
    return subBlocks;
  }
  final ArrayList<Block> subBlocks=new ArrayList<Block>();
  for (  ASTNode childNode : visibleChildren(node)) {
    final Indent indent=GroovyIndentProcessor.getChildIndent(block,childNode);
    subBlocks.add(new GroovyBlock(childNode,alignments.get(childNode.getPsi()),indent,myWrap,mySettings,alignments));
  }
  return subBlocks;
}
