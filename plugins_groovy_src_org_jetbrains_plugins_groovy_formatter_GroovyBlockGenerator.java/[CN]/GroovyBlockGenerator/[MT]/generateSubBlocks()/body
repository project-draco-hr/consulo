{
  PsiElement blockPsi=myNode.getPsi();
  IElementType elementType=myNode.getElementType();
  if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) {
    return generateForBinaryExpr();
  }
  if ((elementType == mSTRING_LITERAL || elementType == mGSTRING_LITERAL) && myBlock.getTextRange().equals(myNode.getTextRange())) {
    String text=myNode.getText();
    if (text.length() > 6) {
      if (text.substring(0,3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0,3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) {
        return generateForMultiLineString();
      }
    }
  }
  if (elementType == GSTRING || elementType == REGEX || elementType == mREGEX_LITERAL || elementType == mDOLLAR_SLASH_REGEX_LITERAL) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    ASTNode[] children=getGroovyChildren(myNode);
    for (    ASTNode childNode : children) {
      if (childNode.getTextRange().getLength() > 0) {
        final Indent indent=new GroovyIndentProcessor().getChildIndent(myBlock,childNode);
        subBlocks.add(new GroovyBlock(childNode,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider));
      }
    }
    return subBlocks;
  }
  if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) {
    final List<Block> subBlocks=new ArrayList<Block>();
    AlignmentProvider.Aligner dotsAligner=mySettings.ALIGN_MULTILINE_CHAINED_METHODS ? myAlignmentProvider.createAligner(true) : null;
    addNestedChildren(myNode.getPsi(),subBlocks,dotsAligner,true);
    return subBlocks;
  }
  if (blockPsi instanceof GrListOrMap && ((GrListOrMap)blockPsi).isMap() && myGroovySettings.ALIGN_NAMED_ARGS_IN_MAP) {
    AlignmentProvider.Aligner labels=myAlignmentProvider.createAligner(false);
    AlignmentProvider.Aligner exprs=myAlignmentProvider.createAligner(true);
    GrNamedArgument[] namedArgs=((GrListOrMap)blockPsi).getNamedArguments();
    for (    GrNamedArgument arg : namedArgs) {
      GrArgumentLabel label=arg.getLabel();
      if (label != null)       labels.append(label);
      PsiElement colon=arg.getColon();
      if (colon == null)       colon=arg.getExpression();
      if (colon != null)       exprs.append(colon);
    }
  }
  if (isListLikeClause(blockPsi)) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    List<ASTNode> astNodes=visibleChildren(myNode);
    if (mustAlign(blockPsi,astNodes)) {
      final AlignmentProvider.Aligner aligner=myAlignmentProvider.createAligner(false);
      for (      ASTNode node : astNodes) {
        if (!isKeyword(node))         aligner.append(node.getPsi());
      }
    }
    for (    ASTNode childNode : astNodes) {
      final Indent indent=new GroovyIndentProcessor().getChildIndent(myBlock,childNode);
      subBlocks.add(new GroovyBlock(childNode,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider));
    }
    return subBlocks;
  }
  boolean classLevel=blockPsi instanceof GrTypeDefinitionBody;
  if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock)blockPsi).getArrow() != null && ((GrClosableBlock)blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) {
    GrClosableBlock closableBlock=(GrClosableBlock)blockPsi;
    ArrayList<Block> blocks=new ArrayList<Block>();
    PsiElement lbrace=closableBlock.getLBrace();
    if (lbrace != null) {
      ASTNode node=lbrace.getNode();
      Indent indent=new GroovyIndentProcessor().getChildIndent(myBlock,node);
      blocks.add(new GroovyBlock(node,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider));
    }
{
      Indent indent=Indent.getNormalIndent();
      ASTNode parameterListNode=closableBlock.getParameterList().getNode();
      ClosureBodyBlock bodyBlock=new ClosureBodyBlock(parameterListNode,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider);
      blocks.add(bodyBlock);
    }
    PsiElement rbrace=closableBlock.getRBrace();
    if (rbrace != null) {
      ASTNode node=rbrace.getNode();
      Indent indent=new GroovyIndentProcessor().getChildIndent(myBlock,node);
      blocks.add(new GroovyBlock(node,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider));
    }
    return blocks;
  }
  if (blockPsi instanceof GrCodeBlock || blockPsi instanceof GroovyFile || classLevel) {
    return generateSubBlockForCodeBlocks(classLevel,visibleChildren(myNode));
  }
  final ArrayList<Block> subBlocks=new ArrayList<Block>();
  for (  ASTNode childNode : visibleChildren(myNode)) {
    final Indent indent=new GroovyIndentProcessor().getChildIndent(myBlock,childNode);
    subBlocks.add(new GroovyBlock(childNode,indent,myWrap,mySettings,myGroovySettings,myAlignmentProvider));
  }
  return subBlocks;
}
