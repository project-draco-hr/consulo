{
  myWrap=_myWrap;
  mySettings=_mySettings;
  myAlignment=_myAlignment;
  PsiElement blockPsi=block.getNode().getPsi();
  if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) {
    return generateForBinaryExpr(node);
  }
  if ((block.getNode().getElementType() == mSTRING_LITERAL || block.getNode().getElementType() == mGSTRING_LITERAL) && block.getTextRange().equals(block.getNode().getTextRange())) {
    String text=block.getNode().getText();
    if (text.length() > 6) {
      if (text.substring(0,3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0,3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) {
        return generateForMultiLineString(block.getNode());
      }
    }
  }
  if (block.getNode().getElementType() == mGSTRING_BEGIN && block.getTextRange().equals(block.getNode().getTextRange())) {
    String text=block.getNode().getText();
    if (text.length() > 3) {
      if (text.substring(0,3).equals("\"\"\"")) {
        return generateForMultiLineGStringBegin(block.getNode());
      }
    }
  }
  if (NESTED.contains(block.getNode().getElementType()) && blockPsi.getParent() != null && blockPsi.getParent().getNode() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) {
    return generateForNestedExpr(node);
  }
  if (isListLikeClause(blockPsi)) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    ASTNode children[]=node.getChildren(null);
    ASTNode prevChildNode=null;
    final Alignment alignment=mustAlign(blockPsi) ? Alignment.createAlignment() : null;
    for (    ASTNode childNode : children) {
      if (canBeCorrectBlock(childNode)) {
        final Indent indent=GroovyIndentProcessor.getChildIndent(block,prevChildNode,childNode);
        subBlocks.add(new GroovyBlock(childNode,isKeyword(childNode) ? null : alignment,indent,myWrap,mySettings));
        prevChildNode=childNode;
      }
    }
    return subBlocks;
  }
  final ArrayList<Block> subBlocks=new ArrayList<Block>();
  ASTNode children[]=getGroovyChildren(node);
  ASTNode prevChildNode=null;
  for (  ASTNode childNode : children) {
    if (canBeCorrectBlock(childNode)) {
      final Indent indent=GroovyIndentProcessor.getChildIndent(block,prevChildNode,childNode);
      subBlocks.add(new GroovyBlock(childNode,myAlignment,indent,myWrap,mySettings));
      prevChildNode=childNode;
    }
  }
  return subBlocks;
}
