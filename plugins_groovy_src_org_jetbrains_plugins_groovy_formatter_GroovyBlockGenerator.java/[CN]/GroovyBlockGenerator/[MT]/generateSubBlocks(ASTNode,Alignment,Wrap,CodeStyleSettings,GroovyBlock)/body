{
  myNode=_myNode;
  myWrap=_myWrap;
  mySettings=_mySettings;
  myAlignment=_myAlignment;
  myBlock=_block;
  if (myBlock.getNode().getPsi() instanceof GrBinaryExpression && !(myBlock.getNode().getPsi().getParent() instanceof GrBinaryExpression)) {
    return generateForBinaryExpr();
  }
  if ((myBlock.getNode().getElementType() == GroovyTokenTypes.mSTRING_LITERAL || myBlock.getNode().getElementType() == GroovyTokenTypes.mGSTRING_LITERAL) && myBlock.getTextRange().equals(myBlock.getNode().getTextRange())) {
    String text=myBlock.getNode().getText();
    if (text.length() >= 6) {
      if (text.substring(0,3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0,3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) {
        return generateForMultiLineString(myBlock.getNode());
      }
    }
  }
  if (NESTED.contains(myBlock.getNode().getElementType()) && myBlock.getNode().getPsi().getParent() != null && myBlock.getNode().getPsi().getParent().getNode() != null && !NESTED.contains(myBlock.getNode().getPsi().getParent().getNode().getElementType())) {
    return generateForNestedExpr();
  }
  if (myBlock.getNode().getPsi() instanceof GrParameterList) {
    final ArrayList<Block> subBlocks=new ArrayList<Block>();
    ASTNode children[]=myNode.getChildren(null);
    ASTNode prevChildNode=null;
    final Alignment alignment=Alignment.createAlignment();
    for (    ASTNode childNode : children) {
      if (canBeCorrectBlock(childNode)) {
        final Indent indent=GroovyIndentProcessor.getChildIndent(myBlock,prevChildNode,childNode);
        subBlocks.add(new GroovyBlock(childNode,alignment,indent,myWrap,mySettings));
        prevChildNode=childNode;
      }
    }
    return subBlocks;
  }
  final ArrayList<Block> subBlocks=new ArrayList<Block>();
  ASTNode children[]=getGroovyChildren();
  ASTNode prevChildNode=null;
  for (  ASTNode childNode : children) {
    if (canBeCorrectBlock(childNode)) {
      final Indent indent=GroovyIndentProcessor.getChildIndent(myBlock,prevChildNode,childNode);
      subBlocks.add(new GroovyBlock(childNode,myAlignment,indent,myWrap,mySettings));
      prevChildNode=childNode;
    }
  }
  return subBlocks;
}
