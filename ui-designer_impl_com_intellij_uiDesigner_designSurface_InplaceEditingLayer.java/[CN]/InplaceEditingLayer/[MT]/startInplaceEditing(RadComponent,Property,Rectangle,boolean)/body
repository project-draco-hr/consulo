{
  myInplaceProperty=property;
  if (myInplaceProperty == null) {
    return;
  }
  if (!myEditor.ensureEditable()) {
    myInplaceProperty=null;
    return;
  }
  myInplaceComponent=inplaceComponent;
  myInplaceEditor=myInplaceProperty.getEditor();
  LOG.assertTrue(myInplaceEditor != null);
  myInplaceEditorComponent=myInplaceEditor.getComponent(myInplaceComponent,keepInitialValue ? myInplaceProperty.getValue(myInplaceComponent) : null,true);
  LOG.assertTrue(myInplaceEditorComponent != null);
  myInplaceEditor.addPropertyEditorListener(myPropertyEditorListener);
  final Dimension prefSize=myInplaceEditorComponent.getPreferredSize();
  if (bounds != null) {
    final Point _p=SwingUtilities.convertPoint(myInplaceComponent.getDelegee(),bounds.x,bounds.y,this);
    myPreferredBounds=new Rectangle(_p.x,_p.y,bounds.width,bounds.height);
  }
 else {
    final Point _p=SwingUtilities.convertPoint(myInplaceComponent.getDelegee(),0,0,this);
    myPreferredBounds=new Rectangle(_p.x,_p.y,myInplaceComponent.getWidth(),myInplaceComponent.getHeight());
  }
  myInplaceEditorComponent.setBounds(myPreferredBounds.x,myPreferredBounds.y + (myPreferredBounds.height - prefSize.height) / 2,Math.min(Math.max(prefSize.width,myPreferredBounds.width),getWidth() - myPreferredBounds.x),prefSize.height);
  add(myInplaceEditorComponent);
  myInplaceEditorComponent.revalidate();
  myInplaceEditorComponent.requestFocusInWindow();
  JComponent componentToFocus=myInplaceEditor.getPreferredFocusedComponent(myInplaceEditorComponent);
  if (componentToFocus == null) {
    componentToFocus=IdeFocusTraversalPolicy.getPreferredFocusedComponent(myInplaceEditorComponent);
  }
  if (componentToFocus != null) {
    componentToFocus.requestFocusInWindow();
  }
 else {
    myInplaceEditorComponent.requestFocusInWindow();
  }
  myFocusWatcher.install(myInplaceEditorComponent);
  enableEvents(MouseEvent.MOUSE_EVENT_MASK);
  repaint();
}
