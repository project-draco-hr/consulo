{
  PsiClass aClass=constructor.getContainingClass();
  if (aClass == null) {
    return true;
  }
  if (aClass.isEnum()) {
    for (    PsiField field : aClass.getFields()) {
      if (field instanceof PsiEnumConstant) {
        PsiReference reference=field.getReference();
        if (reference != null && reference.isReferenceTo(constructor)) {
          if (!processor.process(reference)) {
            return false;
          }
        }
      }
    }
  }
  PairProcessor<PsiReference,SearchRequestCollector> processor1=new PairProcessor<PsiReference,SearchRequestCollector>(){
    @Override public boolean process(    PsiReference reference,    SearchRequestCollector collector){
      PsiElement parent=reference.getElement().getParent();
      if (parent instanceof PsiAnonymousClass) {
        parent=parent.getParent();
      }
      if (parent instanceof PsiNewExpression) {
        PsiMethod constructor1=((PsiNewExpression)parent).resolveConstructor();
        if (constructor1 != null) {
          if (isStrictSignatureSearch) {
            if (myManager.areElementsEquivalent(constructor,constructor1)) {
              return processor.process(reference);
            }
          }
 else {
            if (myManager.areElementsEquivalent(constructor.getContainingClass(),constructor1.getContainingClass())) {
              return processor.process(reference);
            }
          }
        }
      }
      return true;
    }
  }
;
  ReferencesSearch.searchOptimized(aClass,searchScope,ignoreAccessScope,collector,true,processor1);
  final boolean constructorCanBeCalledImplicitly=constructor.getParameterList().getParametersCount() == 0;
  if (!processSuperOrThis(processor,aClass,constructor,constructorCanBeCalledImplicitly,searchScope,isStrictSignatureSearch,PsiKeyword.THIS)) {
    return false;
  }
  Processor<PsiClass> processor2=new Processor<PsiClass>(){
    public boolean process(    PsiClass inheritor){
      return processSuperOrThis(processor,(PsiClass)inheritor.getNavigationElement(),constructor,constructorCanBeCalledImplicitly,searchScope,isStrictSignatureSearch,PsiKeyword.SUPER);
    }
  }
;
  return ClassInheritorsSearch.search(aClass,searchScope,false).forEach(processor2);
}
