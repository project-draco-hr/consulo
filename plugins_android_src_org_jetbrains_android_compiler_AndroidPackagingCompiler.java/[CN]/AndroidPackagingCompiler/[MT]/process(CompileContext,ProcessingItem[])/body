{
  if (!AndroidCompileUtil.isFullBuild(context)) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  context.getProgressIndicator().setText("Building Android package...");
  final List<ProcessingItem> result=new ArrayList<ProcessingItem>();
  for (  ProcessingItem processingItem : items) {
    AptPackagingItem item=(AptPackagingItem)processingItem;
    if (!AndroidCompileUtil.isModuleAffected(context,item.myModule)) {
      continue;
    }
    try {
      String[] externalLibPaths=getPaths(item.getExternalLibraries());
      final Map<CompilerMessageCategory,List<String>> apkuBuilderMessages=AndroidApkBuilder.execute(item.mySdkPath,item.getResPackagePath(),item.getClassesDexPath(),item.getSourceRoots(),externalLibPaths,item.getNativeLibsFolders(),item.getFinalPath(),item.isGenerateUnsignedApk());
      AndroidCompileUtil.addMessages(context,apkuBuilderMessages);
    }
 catch (    final IOException e) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (context.getProject().isDisposed())           return;
          context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
        }
      }
);
    }
    if (context.getMessages(CompilerMessageCategory.ERROR).length == 0) {
      result.add(item);
    }
  }
  return result.toArray(new ProcessingItem[result.size()]);
}
