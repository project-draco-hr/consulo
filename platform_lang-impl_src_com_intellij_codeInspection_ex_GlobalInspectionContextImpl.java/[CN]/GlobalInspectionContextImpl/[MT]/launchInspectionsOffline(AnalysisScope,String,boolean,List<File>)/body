{
  cleanupTools();
  setCurrentScope(scope);
  DefaultInspectionToolPresentation.setOutputPath(outputPath);
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        performInspectionsWithProgress(scope,runGlobalToolsOnly);
        @NonNls final String ext=".xml";
        final Map<Element,Tools> globalTools=new HashMap<Element,Tools>();
        for (        Map.Entry<String,Tools> stringSetEntry : myTools.entrySet()) {
          final Tools sameTools=stringSetEntry.getValue();
          boolean hasProblems=false;
          String toolName=stringSetEntry.getKey();
          if (sameTools != null) {
            for (            ScopeToolState toolDescr : sameTools.getTools()) {
              InspectionToolWrapper toolWrapper=toolDescr.getTool();
              if (toolWrapper instanceof LocalInspectionToolWrapper) {
                hasProblems=new File(outputPath,toolName + ext).exists();
              }
 else {
                InspectionToolPresentation presentation=getPresentation(toolWrapper);
                presentation.updateContent();
                if (presentation.hasReportedProblems()) {
                  final Element root=new Element(InspectionsBundle.message("inspection.problems"));
                  globalTools.put(root,sameTools);
                  LOG.assertTrue(!hasProblems,toolName);
                  break;
                }
              }
            }
          }
          if (!hasProblems)           continue;
          try {
            new File(outputPath).mkdirs();
            final File file=new File(outputPath,toolName + ext);
            inspectionsResults.add(file);
            FileUtil.writeToFile(file,("</" + InspectionsBundle.message("inspection.problems") + ">").getBytes("UTF-8"),true);
          }
 catch (          IOException e) {
            LOG.error(e);
          }
        }
        getRefManager().iterate(new RefVisitor(){
          @Override public void visitElement(          @NotNull final RefEntity refEntity){
            for (            Element element : globalTools.keySet()) {
              final Tools tools=globalTools.get(element);
              for (              ScopeToolState state : tools.getTools()) {
                try {
                  InspectionToolWrapper toolWrapper=state.getTool();
                  InspectionToolPresentation presentation=getPresentation(toolWrapper);
                  presentation.exportResults(element,refEntity);
                }
 catch (                Throwable e) {
                  LOG.error("Problem when exporting: " + refEntity.getExternalName(),e);
                }
              }
            }
          }
        }
);
        for (        Element element : globalTools.keySet()) {
          final String toolName=globalTools.get(element).getShortName();
          element.setAttribute(LOCAL_TOOL_ATTRIBUTE,Boolean.toString(false));
          final Document doc=new Document(element);
          PathMacroManager.getInstance(getProject()).collapsePaths(doc.getRootElement());
          try {
            new File(outputPath).mkdirs();
            final File file=new File(outputPath,toolName + ext);
            inspectionsResults.add(file);
            OutputStreamWriter writer=new OutputStreamWriter(new FileOutputStream(file),"UTF-8");
            try {
              JDOMUtil.writeDocument(doc,writer,"\n");
            }
  finally {
              writer.close();
            }
          }
 catch (          IOException e) {
            LOG.error(e);
          }
        }
      }
    }
);
  }
  finally {
    DefaultInspectionToolPresentation.setOutputPath(null);
  }
}
