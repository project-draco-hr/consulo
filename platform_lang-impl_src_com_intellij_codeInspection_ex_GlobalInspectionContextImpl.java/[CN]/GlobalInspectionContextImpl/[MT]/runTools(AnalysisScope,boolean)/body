{
  final InspectionManagerEx inspectionManager=(InspectionManagerEx)InspectionManager.getInstance(getProject());
  List<Tools> globalTools=new ArrayList<Tools>();
  final List<Tools> localTools=new ArrayList<Tools>();
  final List<Tools> globalSimpleTools=new ArrayList<Tools>();
  initializeTools(globalTools,localTools,globalSimpleTools);
  appendPairedInspectionsForUnfairTools(globalTools,globalSimpleTools,localTools);
  ((RefManagerImpl)getRefManager()).initializeAnnotators();
  runGlobalTools(scope,inspectionManager,globalTools);
  if (runGlobalToolsOnly)   return;
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  final Set<VirtualFile> localScopeFiles=scope.toSearchScope() instanceof LocalSearchScope ? new THashSet<VirtualFile>() : null;
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    tool.inspectionStarted(inspectionManager,this,getPresentation(toolWrapper));
  }
  final Map<String,InspectionToolWrapper> map=getInspectionWrappersMap(localTools);
  scope.accept(new PsiElementVisitor(){
    @Override public void visitFile(    final PsiFile file){
      final VirtualFile virtualFile=file.getVirtualFile();
      if (virtualFile == null)       return;
      if (LOG.isDebugEnabled()) {
        LOG.debug("Running local inspections on " + virtualFile.getPath());
      }
      String url=ProjectUtilCore.displayUrlRelativeToProject(virtualFile,virtualFile.getPresentableUrl(),getProject(),true,false);
      incrementJobDoneAmount(getStdJobDescriptors().LOCAL_ANALYSIS,url);
      if (SingleRootFileViewProvider.isTooLargeForIntelligence(virtualFile))       return;
      if (localScopeFiles != null && !localScopeFiles.add(virtualFile))       return;
      final FileViewProvider viewProvider=psiManager.findViewProvider(virtualFile);
      final com.intellij.openapi.editor.Document document=viewProvider == null ? null : viewProvider.getDocument();
      if (document == null || virtualFile.getFileType().isBinary())       return;
      final LocalInspectionsPass pass=new LocalInspectionsPass(file,document,0,file.getTextLength(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,true,HighlightInfoProcessor.getEmpty());
      try {
        final List<LocalInspectionToolWrapper> lTools=getWrappersFromTools(localTools,file);
        pass.doInspectInBatch(GlobalInspectionContextImpl.this,inspectionManager,lTools);
        JobLauncher.getInstance().invokeConcurrentlyUnderProgress(globalSimpleTools,myProgressIndicator,false,new Processor<Tools>(){
          @Override public boolean process(          Tools tools){
            GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
            GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
            ProblemsHolder problemsHolder=new ProblemsHolder(inspectionManager,file,false);
            ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,map);
            tool.checkFile(file,inspectionManager,problemsHolder,GlobalInspectionContextImpl.this,problemDescriptionProcessor);
            InspectionToolPresentation toolPresentation=getPresentation(toolWrapper);
            LocalDescriptorsUtil.addProblemDescriptors(problemsHolder.getResults(),false,GlobalInspectionContextImpl.this,null,CONVERT,toolPresentation);
            return true;
          }
        }
);
      }
 catch (      ProcessCanceledException e) {
        final Throwable cause=e.getCause();
        if (cause == null) {
          throw e;
        }
        LOG.error("In file: " + file,cause);
      }
catch (      IndexNotReadyException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.error("In file: " + file,e);
      }
 finally {
        InjectedLanguageManager.getInstance(getProject()).dropFileCaches(file);
      }
    }
  }
);
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,map);
    tool.inspectionFinished(inspectionManager,this,problemDescriptionProcessor);
  }
}
