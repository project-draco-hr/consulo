{
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      try {
        final FileIndex fileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
        scope.accept(new Processor<VirtualFile>(){
          @Override public boolean process(          final VirtualFile file){
            progressIndicator.checkCanceled();
            if (ProjectCoreUtil.isProjectOrWorkspaceFile(file) || !fileIndex.isInContent(file))             return true;
            final PsiFile[] psiFile=new PsiFile[1];
            Document document=ApplicationManager.getApplication().runReadAction(new Computable<Document>(){
              @Override public Document compute(){
                if (getProject().isDisposed())                 throw new ProcessCanceledException();
                PsiFile psi=PsiManager.getInstance(getProject()).findFile(file);
                Document document=psi == null ? null : shouldProcess(psi,headlessEnvironment,localScopeFiles);
                if (document != null) {
                  psiFile[0]=psi;
                }
                return document;
              }
            }
);
            if (document != null && psiFile[0] != null) {
              try {
                LOG.assertTrue(!ApplicationManager.getApplication().isReadAccessAllowed());
                outFilesToInspect.put(psiFile[0]);
              }
 catch (              InterruptedException e) {
                LOG.error(e);
              }
            }
            return true;
          }
        }
);
      }
 catch (      ProcessCanceledException e) {
      }
 finally {
        try {
          outFilesToInspect.put(TOMBSTONE);
        }
 catch (        InterruptedException e) {
          LOG.error(e);
        }
      }
    }
  }
);
}
