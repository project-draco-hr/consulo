{
  final Runnable antAwareRunnable=new Runnable(){
    public void run(){
      final AntConfiguration antConfiguration=AntConfiguration.getInstance(myProject);
      if (configuration instanceof RunConfiguration && antConfiguration != null && antConfiguration.hasTasksToExecuteBeforeRun((RunConfiguration)configuration)) {
        final Thread thread=new Thread(new Runnable(){
          public void run(){
            final DataContext dataContext=MapDataContext.singleData(DataConstants.PROJECT,myProject);
            if (antConfiguration.executeTaskBeforeRun(dataContext,(RunConfiguration)configuration)) {
              ApplicationManager.getApplication().invokeLater(startRunnable);
            }
          }
        }
);
        thread.start();
      }
 else {
        startRunnable.run();
      }
    }
  }
;
  Module[] modulesToCompile=state.getModulesToCompile();
  if (modulesToCompile == null)   modulesToCompile=Module.EMPTY_ARRAY;
  if (getConfig().isCompileBeforeRunning(configuration) && modulesToCompile.length > 0) {
    final CompileStatusNotification callback=new CompileStatusNotification(){
      public void finished(      final boolean aborted,      final int errors,      final int warnings,      CompileContext compileContext){
        if (errors == 0 && !aborted) {
          ApplicationManager.getApplication().invokeLater(antAwareRunnable);
        }
      }
    }
;
    CompileScope scope;
    if (Boolean.valueOf(System.getProperty(MAKE_PROJECT_ON_RUN_KEY,Boolean.FALSE.toString())).booleanValue()) {
      scope=new ProjectCompileScope(myProject);
    }
 else {
      scope=new ModuleCompileScope(myProject,modulesToCompile,true);
    }
    scope.putUserData(RUN_PROFILE_STATE_KEY,state);
    CompilerManager.getInstance(myProject).make(scope,callback);
  }
 else {
    antAwareRunnable.run();
  }
}
