{
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectScope(myProject)));
  if (mySuggestSearchInLibs) {
    model.addElement(new ScopeDescriptor(GlobalSearchScope.allScope(myProject)));
  }
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectProductionScope(myProject,true)));
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectTestScope(myProject,true)));
  FileEditorManager fileEditorManager=FileEditorManager.getInstance(getProject());
  if (fileEditorManager.getSelectedTextEditor() != null) {
    final PsiFile psiFile=PsiDocumentManager.getInstance(getProject()).getPsiFile(fileEditorManager.getSelectedTextEditor().getDocument());
    if (psiFile != null) {
      model.addElement(new ScopeDescriptor(new LocalSearchScope(psiFile,IdeBundle.message("scope.current.file"))));
      if (fileEditorManager.getSelectedTextEditor().getSelectionModel().hasSelection()) {
        PsiElement[] elements=CodeInsightUtil.findStatementsInRange(psiFile,fileEditorManager.getSelectedTextEditor().getSelectionModel().getSelectionStart(),fileEditorManager.getSelectedTextEditor().getSelectionModel().getSelectionEnd());
        if (elements.length != 0) {
          model.addElement(new ScopeDescriptor(new LocalSearchScope(elements,IdeBundle.message("scope.selection"))));
        }
      }
    }
  }
  UsageView selectedUsageView=UsageViewManager.getInstance(getProject()).getSelectedUsageView();
  if (selectedUsageView != null && !selectedUsageView.isSearchInProgress()) {
    final Set<Usage> usages=selectedUsageView.getUsages();
    if (usages != null) {
      final List<PsiElement> results=new ArrayList<PsiElement>(usages.size());
      if (myPrevSearchFiles) {
        final Set<VirtualFile> files=new HashSet<VirtualFile>();
        for (        Usage usage : usages) {
          if (usage instanceof PsiElementUsage) {
            PsiElement psiElement=((PsiElementUsage)usage).getElement();
            if (psiElement != null && psiElement.isValid()) {
              PsiFile psiFile=psiElement.getContainingFile();
              if (psiFile != null) {
                VirtualFile file=psiFile.getVirtualFile();
                if (file != null)                 files.add(file);
              }
            }
          }
        }
        if (files.size() > 0) {
          model.addElement(new ScopeDescriptor(new GlobalSearchScope(){
            public String getDisplayName(){
              return IdeBundle.message("scope.files.in.previous.search.result");
            }
            public boolean contains(            VirtualFile file){
              return files.contains(file);
            }
            public int compare(            VirtualFile file1,            VirtualFile file2){
              return 0;
            }
            public boolean isSearchInModuleContent(            Module aModule){
              return true;
            }
            public boolean isSearchInLibraries(){
              return true;
            }
          }
));
        }
      }
 else {
        for (        Usage usage : usages) {
          if (usage instanceof PsiElementUsage) {
            final PsiElement element=((PsiElementUsage)usage).getElement();
            if (element != null && element.isValid()) {
              results.add(element);
            }
          }
        }
        if (results.size() > 0) {
          model.addElement(new ScopeDescriptor(new LocalSearchScope(results.toArray(new PsiElement[results.size()]),IdeBundle.message("scope.previous.search.results"))));
        }
      }
    }
  }
  model.addElement(new ClassHierarchyScopeDescriptor());
}
