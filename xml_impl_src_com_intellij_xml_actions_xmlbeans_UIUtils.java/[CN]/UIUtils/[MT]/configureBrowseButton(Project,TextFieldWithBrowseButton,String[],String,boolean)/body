{
  wsdlUrl.getButton().setToolTipText(XmlBundle.message("browse.button.tooltip"));
  wsdlUrl.getButton().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      final FileChooserDescriptor fileChooserDescriptor=new FileChooserDescriptor(true,false,false,false,false,multipleFileSelection){
        private final List<String> extensions=Arrays.asList(_extensions);
        public boolean isFileSelectable(        VirtualFile virtualFile){
          return extensions.contains(virtualFile.getExtension());
        }
        @Override public boolean isFileVisible(        VirtualFile file,        boolean showHiddenFiles){
          return super.isFileVisible(file,showHiddenFiles) && (file.isDirectory() || isFileSelectable(file));
        }
      }
;
      fileChooserDescriptor.setTitle(selectFileDialogTitle);
      final FileChooserDialog fileChooser=FileChooserFactory.getInstance().createFileChooser(fileChooserDescriptor,myProject);
      VirtualFile initialFile=myProject.getBaseDir();
      String selectedItem=wsdlUrl.getTextField().getText();
      if (selectedItem != null && selectedItem.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) {
        VirtualFile fileByPath=VfsUtil.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(VfsUtil.fixURLforIDEA(selectedItem)),null);
        if (fileByPath != null)         initialFile=fileByPath;
      }
      final VirtualFile[] virtualFiles=fileChooser.choose(initialFile,myProject);
      if (virtualFiles.length == 1) {
        String url=fixIDEAUrl(virtualFiles[0].getUrl());
        wsdlUrl.setText(url);
      }
    }
  }
);
}
