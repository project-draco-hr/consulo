{
  if (!(element instanceof GrStringInjection))   return false;
  GrStringInjection injection=(GrStringInjection)element;
  final GrClosableBlock block=injection.getClosableBlock();
  if (block == null)   return false;
  final GrStatement[] statements=block.getStatements();
  if (statements.length != 1)   return false;
  if (!(statements[0] instanceof GrReferenceExpression))   return false;
  final PsiElement next=injection.getNextSibling();
  if (!(next instanceof LeafPsiElement))   return false;
  char nextChar=next.getText().charAt(0);
  if (nextChar == '"' || nextChar == '$') {
    return true;
  }
  final GroovyPsiElementFactory elementFactory=GroovyPsiElementFactory.getInstance(element.getProject());
  final GrExpression gString;
  try {
    gString=elementFactory.createExpressionFromText("\"$" + statements[0].getText() + nextChar+ '"');
  }
 catch (  Exception e) {
    return false;
  }
  if (!(gString instanceof GrString))   return false;
  final PsiElement child=gString.getChildren()[0];
  if (!(child instanceof GrStringInjection))   return false;
  final PsiElement refExprCopy=((GrStringInjection)child).getExpression();
  if (!(refExprCopy instanceof GrReferenceExpression))   return false;
  final GrReferenceExpression refExpr=(GrReferenceExpression)statements[0];
  return Comparing.equal(refExpr.getName(),((GrReferenceExpression)refExprCopy).getName());
}
