{
  if (injection.getParent() instanceof GrClosableBlock) {
    injection=injection.getParent();
  }
  injection=injection.getParent();
  GrString grString=(GrString)injection.getParent();
  int injectionNumber=-1;
  for (  PsiElement child : grString.getChildren()) {
    injectionNumber++;
    if (child == injection) {
      break;
    }
  }
  if (injectionNumber == -1)   return grString;
  GrString grStringWithBraces=addAllBracesInGString(grString);
  if (literal instanceof GrString) {
    literal=addAllBracesInGString((GrString)literal);
  }
  String literalText=escapeSymbolsForGString(removeQuotes(literal.getText()));
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(grString.getProject());
  final GrExpression expression=factory.createExpressionFromText("\"${}" + literalText + "\"");
  expression.getFirstChild().delete();
  expression.getFirstChild().delete();
  expression.getLastChild().delete();
  final ASTNode node=grString.getNode();
  if (expression.getFirstChild() != null) {
    if (expression.getFirstChild() == expression.getLastChild()) {
      node.replaceChild(injection.getNode(),expression.getFirstChild().getNode());
    }
 else {
      node.addChildren(expression.getFirstChild().getNode(),expression.getLastChild().getNode(),injection.getNode());
      injection.delete();
    }
  }
  return grString;
}
