{
  if (CreateFromUsageUtils.isValidReference(myReferenceExpression,true))   return;
  final Project project=myReferenceExpression.getProject();
  PsiType[] expectedTypes=CreateFromUsageUtils.guessType(myReferenceExpression,false);
  PsiType type=expectedTypes[0];
  String varName=myReferenceExpression.getReferenceName();
  PsiMethod method=PsiTreeUtil.getParentOfType(myReferenceExpression,PsiMethod.class);
  LOG.assertTrue(method != null);
  method=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
  if (method == null)   return;
  List<ParameterInfo> parameterInfos=new ArrayList<ParameterInfo>(Arrays.asList(ParameterInfo.fromMethod(method)));
  ParameterInfo parameterInfo=new ParameterInfo(-1,varName,type,PsiTypesUtil.getDefaultValueOfType(type),true);
  parameterInfos.add(parameterInfo);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    ParameterInfo[] array=parameterInfos.toArray(new ParameterInfo[parameterInfos.size()]);
    @Modifier String modifier=PsiUtil.getAccessModifier(PsiUtil.getAccessLevel(method.getModifierList()));
    ChangeSignatureProcessor processor=new ChangeSignatureProcessor(project,method,false,modifier,method.getName(),method.getReturnType(),array);
    processor.run();
  }
 else {
    ChangeSignatureDialog dialog=new ChangeSignatureDialog(project,method,false,myReferenceExpression);
    dialog.setParameterInfos(parameterInfos);
    dialog.show();
  }
}
