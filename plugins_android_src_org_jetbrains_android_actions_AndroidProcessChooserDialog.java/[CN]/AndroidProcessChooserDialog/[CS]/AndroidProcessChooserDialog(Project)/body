{
  super(project);
  setTitle("Choose process");
  myProject=project;
  myUpdatesQueue=new MergingUpdateQueue("AndroidProcessChooserDialogUpdatingQueue",500,true,MergingUpdateQueue.ANY_COMPONENT,myProject);
  final String showAllProcessesStr=PropertiesComponent.getInstance(project).getValue(SHOW_ALL_PROCESSES_PROPERTY);
  final boolean showAllProcesses=Boolean.parseBoolean(showAllProcessesStr);
  myShowAllProcessesCheckBox.setSelected(showAllProcesses);
  doUpdateTree(showAllProcesses);
  myClientChangeListener=new AndroidDebugBridge.IClientChangeListener(){
    @Override public void clientChanged(    Client client,    int changeMask){
      updateTree();
    }
  }
;
  AndroidDebugBridge.addClientChangeListener(myClientChangeListener);
  myDeviceChangeListener=new AndroidDebugBridge.IDeviceChangeListener(){
    @Override public void deviceConnected(    IDevice device){
      updateTree();
    }
    @Override public void deviceDisconnected(    IDevice device){
      updateTree();
    }
    @Override public void deviceChanged(    IDevice device,    int changeMask){
      updateTree();
    }
  }
;
  AndroidDebugBridge.addDeviceChangeListener(myDeviceChangeListener);
  myShowAllProcessesCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateTree();
    }
  }
);
  myProcessTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      getOKAction().setEnabled(getSelectedDevice() != null && getSelectedClient() != null);
    }
  }
);
  myProcessTree.setCellRenderer(new JBDefaultTreeCellRenderer(myProcessTree){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof DefaultMutableTreeNode) {
        final Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        if (userObject instanceof IDevice) {
          value=getPresentableName((IDevice)userObject);
        }
 else         if (userObject instanceof Client) {
          value=getClientDescription((Client)userObject);
        }
      }
      return super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
    }
    @Override public Icon getLeafIcon(){
      return null;
    }
    @Override public Icon getOpenIcon(){
      return null;
    }
    @Override public Icon getClosedIcon(){
      return null;
    }
  }
);
  myProcessTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1 && isOKActionEnabled()) {
        doOKAction();
      }
    }
  }
);
  myProcessTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && isOKActionEnabled()) {
        doOKAction();
      }
    }
  }
);
  init();
}
