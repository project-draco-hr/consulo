{
  createProjectSubFile("resources/file.properties").setBinaryContent("value=${project.version}".getBytes());
  importProject("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<build>"+ "  <resources>"+ "    <resource>"+ "      <directory>resources</directory>"+ "      <filtering>true</filtering>"+ "    </resource>"+ "  </resources>"+ "</build>");
  compileModules("project");
  VirtualFile result=LocalFileSystem.getInstance().findFileByPath(getProjectPath() + "/target/classes/file.properties");
  assertNotNull(result);
  assertEquals("value=1",VfsUtil.loadText(result));
  updateProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<build>"+ "  <resources>"+ "    <resource>"+ "      <directory>resources</directory>"+ "      <filtering>false</filtering>"+ "    </resource>"+ "  </resources>"+ "</build>");
  importProject();
  compileModules("project");
  result=LocalFileSystem.getInstance().findFileByPath(getProjectPath() + "/target/classes/file.properties");
  assertNotNull(result);
  assertEquals("value=${project.version}",VfsUtil.loadText(result));
}
