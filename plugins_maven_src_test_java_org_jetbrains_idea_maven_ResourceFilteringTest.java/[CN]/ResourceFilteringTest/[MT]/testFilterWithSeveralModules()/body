{
  createProjectSubFile("module1/resources/file1.properties").setBinaryContent("value=${project.version}".getBytes());
  createProjectSubFile("module2/resources/file2.properties").setBinaryContent("value=${project.version}".getBytes());
  VirtualFile m1=createModulePom("module1","<groupId>test</groupId>" + "<artifactId>module1</artifactId>" + "<version>1</version>"+ "<build>"+ "  <resources>"+ "    <resource>"+ "      <directory>resources</directory>"+ "      <filtering>true</filtering>"+ "    </resource>"+ "  </resources>"+ "</build>");
  VirtualFile m2=createModulePom("module2","<groupId>test</groupId>" + "<artifactId>module2</artifactId>" + "<version>2</version>"+ "<build>"+ "  <resources>"+ "    <resource>"+ "      <directory>resources</directory>"+ "      <filtering>true</filtering>"+ "    </resource>"+ "  </resources>"+ "</build>");
  importSeveralProjects(m1,m2);
  assertSources("module1","resources");
  assertSources("module2","resources");
  compileModules("module1","module2");
  VirtualFile file1=m1.getParent().findFileByRelativePath("target/classes/file1.properties");
  VirtualFile file2=m2.getParent().findFileByRelativePath("target/classes/file2.properties");
  assertNotNull(file1);
  assertNotNull(file2);
  assertEquals("value=1",VfsUtil.loadText(file1));
  assertEquals("value=2",VfsUtil.loadText(file2));
}
