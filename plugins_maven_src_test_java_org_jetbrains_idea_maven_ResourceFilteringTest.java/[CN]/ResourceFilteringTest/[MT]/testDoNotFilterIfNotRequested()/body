{
  createProjectSubFile("resources1/file1.properties").setBinaryContent("value=${project.version}".getBytes());
  createProjectSubFile("resources2/file2.properties").setBinaryContent("value=${project.version}".getBytes());
  importProject("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<build>"+ "  <resources>"+ "    <resource>"+ "      <directory>resources1</directory>"+ "      <filtering>true</filtering>"+ "    </resource>"+ "    <resource>"+ "      <directory>resources2</directory>"+ "      <filtering>false</filtering>"+ "    </resource>"+ "  </resources>"+ "</build>");
  assertSources("project","resources1","resources2");
  compileModules("project");
  VirtualFile file1=myProjectPom.getParent().findFileByRelativePath("target/classes/file1.properties");
  VirtualFile file2=myProjectPom.getParent().findFileByRelativePath("target/classes/file2.properties");
  assertNotNull(file1);
  assertNotNull(file2);
  assertEquals("value=1",VfsUtil.loadText(file1));
  assertEquals("value=${project.version}",VfsUtil.loadText(file2));
}
