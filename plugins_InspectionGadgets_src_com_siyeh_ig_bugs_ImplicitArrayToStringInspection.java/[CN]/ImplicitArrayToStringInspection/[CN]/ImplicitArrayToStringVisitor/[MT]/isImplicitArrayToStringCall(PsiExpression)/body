{
  final PsiType type=expression.getType();
  if (!(type instanceof PsiArrayType)) {
    return false;
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (!JavaTokenType.PLUS.equals(tokenType)) {
      return false;
    }
    final PsiExpression lhs=binaryExpression.getLOperand();
    if (lhs != expression) {
      final PsiType lhsType=lhs.getType();
      return !(lhsType == null || !lhsType.equalsToText("java.lang.String"));
    }
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs != null && rhs != expression) {
      final PsiType rhsType=rhs.getType();
      return !(rhsType == null || !rhsType.equalsToText("java.lang.String"));
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    final PsiElement grandParent=expressionList.getParent();
    if (!(grandParent instanceof PsiMethodCallExpression)) {
      return false;
    }
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    @NonNls final String methodName=methodExpression.getReferenceName();
    if (!"print".equals(methodName) && !"println".equals(methodName)) {
      return false;
    }
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    if (!TypeUtils.expressionHasTypeOrSubtype("java.io.PrintStream",qualifier)) {
      return false;
    }
    final PsiArrayType arrayType=(PsiArrayType)type;
    final PsiType componentType=arrayType.getComponentType();
    return componentType != PsiType.CHAR;
  }
  return false;
}
