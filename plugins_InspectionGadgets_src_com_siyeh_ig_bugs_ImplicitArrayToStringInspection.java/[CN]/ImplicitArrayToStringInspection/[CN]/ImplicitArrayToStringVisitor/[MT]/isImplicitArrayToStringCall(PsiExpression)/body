{
  final PsiType type=expression.getType();
  if (!(type instanceof PsiArrayType)) {
    return false;
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    if (!JavaTokenType.PLUS.equals(tokenType)) {
      return false;
    }
    final PsiExpression lhs=binaryExpression.getLOperand();
    if (!lhs.equals(expression)) {
      final PsiType lhsType=lhs.getType();
      return !(lhsType == null || !lhsType.equalsToText(CommonClassNames.JAVA_LANG_STRING));
    }
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs != null && !rhs.equals(expression)) {
      final PsiType rhsType=rhs.getType();
      return !(rhsType == null || !rhsType.equalsToText(CommonClassNames.JAVA_LANG_STRING));
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    final PsiArrayType arrayType=(PsiArrayType)type;
    final PsiType componentType=arrayType.getComponentType();
    if (componentType.equals(PsiType.CHAR)) {
      return false;
    }
    final PsiElement grandParent=expressionList.getParent();
    if (!(grandParent instanceof PsiMethodCallExpression)) {
      return false;
    }
    final PsiExpression[] arguments=expressionList.getExpressions();
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    @NonNls final String methodName=methodExpression.getReferenceName();
    final PsiMethod method=methodCallExpression.resolveMethod();
    if (method == null) {
      return false;
    }
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass == null) {
      return false;
    }
    if ("append".equals(methodName)) {
      if (arguments.length != 1) {
        return false;
      }
      return InheritanceUtil.isInheritor(containingClass,"java.lang.AbstractStringBuilder");
    }
 else     if ("valueOf".equals(methodName)) {
      if (arguments.length != 1) {
        return false;
      }
      final String qualifiedName=containingClass.getQualifiedName();
      return "java.lang.String".equals(qualifiedName);
    }
    if (!"print".equals(methodName) && !"println".equals(methodName)) {
      if (!"printf".equals(methodName) && !"format".equals(methodName)) {
        return false;
      }
 else {
        if (arguments.length < 1) {
          return false;
        }
        final PsiParameterList parameterList=method.getParameterList();
        final PsiParameter[] parameters=parameterList.getParameters();
        final PsiParameter parameter=parameters[0];
        final PsiType firstParameterType=parameter.getType();
        if (firstParameterType.equalsToText("java.util.Locale")) {
          if (arguments.length < 4) {
            return false;
          }
        }
 else {
          if (arguments.length < 3) {
            return false;
          }
        }
      }
    }
    final String qualifiedName=containingClass.getQualifiedName();
    if ("java.util.Formatter".equals(qualifiedName) || "java.lang.String".equals(qualifiedName)) {
      return true;
    }
    if (InheritanceUtil.isInheritor(containingClass,"java.io.PrintStream")) {
      return true;
    }
 else     if (InheritanceUtil.isInheritor(containingClass,"java.io.PrintWriter")) {
      return true;
    }
  }
  return false;
}
