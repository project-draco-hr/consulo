{
  final PsiElement element=descriptor.getPsiElement();
  final PsiExpression expression;
  if (element instanceof PsiExpression) {
    expression=(PsiExpression)element;
  }
 else {
    expression=(PsiExpression)element.getParent().getParent();
  }
  final String expressionText;
  if (removeToString) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    if (qualifier == null) {
      return;
    }
    expressionText=qualifier.getText();
  }
 else {
    expressionText=expression.getText();
  }
  @NonNls final String newExpressionText;
  if (deepString) {
    newExpressionText="java.util.Arrays.deepToString(" + expressionText + ')';
  }
 else {
    newExpressionText="java.util.Arrays.toString(" + expressionText + ')';
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiExpressionList) {
    final PsiElement grandParent=parent.getParent();
    if (grandParent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      if ("valueOf".equals(methodExpression.getReferenceName())) {
        replaceExpressionAndShorten(methodCallExpression,newExpressionText);
        return;
      }
    }
  }
  replaceExpressionAndShorten(expression,newExpressionText);
}
