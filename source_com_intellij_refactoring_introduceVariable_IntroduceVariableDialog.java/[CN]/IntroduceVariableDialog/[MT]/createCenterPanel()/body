{
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.fill=GridBagConstraints.HORIZONTAL;
  gbConstraints.weightx=1;
  gbConstraints.weighty=0;
  gbConstraints.gridwidth=1;
  gbConstraints.gridx=0;
  gbConstraints.gridy=0;
  gbConstraints.insets=new Insets(0,0,0,0);
  if (myOccurrencesCount > 1) {
    myCbReplaceAll=new NonFocusableCheckBox("Replace all occurrences of expression (" + myOccurrencesCount + " occurrences)");
    myCbReplaceAll.setMnemonic('A');
    panel.add(myCbReplaceAll,gbConstraints);
    myCbReplaceAll.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        updateControls();
      }
    }
);
    if (myAnyLValueOccurences) {
      myCbReplaceWrite=new StateRestoringCheckBox("Replace write access occurrences");
      myCbReplaceWrite.setMnemonic('l');
      gbConstraints.insets=new Insets(0,8,0,0);
      gbConstraints.gridy++;
      panel.add(myCbReplaceWrite,gbConstraints);
    }
  }
  myCbFinal=new NonFocusableCheckBox("Declare final");
  myCbFinal.setMnemonic('f');
  myCbFinalState=CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_LOCALS;
  gbConstraints.insets=new Insets(0,0,0,0);
  gbConstraints.gridy++;
  panel.add(myCbFinal,gbConstraints);
  myCbFinal.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (myCbFinal.isEnabled()) {
        myCbFinalState=myCbFinal.isSelected();
      }
    }
  }
);
  updateControls();
  return panel;
}
