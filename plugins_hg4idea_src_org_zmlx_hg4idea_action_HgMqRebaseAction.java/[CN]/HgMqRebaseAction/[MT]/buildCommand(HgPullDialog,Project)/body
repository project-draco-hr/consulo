{
  final VirtualFile repository=dialog.getRepository();
  return new HgGlobalCommand(){
    public VirtualFile getRepo(){
      return repository;
    }
    public void execute(){
      HgMQCommand mqCommand=new HgMQCommand(project);
      boolean notFoundAppliedPatches=mqCommand.qapplied(repository).isEmpty();
      if (notFoundAppliedPatches) {
        return;
      }
      HgPullCommand pullCommand=new HgPullCommand(project,repository);
      pullCommand.setSource(dialog.getSource());
      pullCommand.setRebase(true);
      pullCommand.setUpdate(false);
      pullCommand.execute(new HgCommandResultHandler(){
        @Override public void process(        @Nullable HgCommandResult result){
          new HgCommandResultNotifier(project).process(result);
          String currentBranch=new HgTagBranchCommand(project,repository).getCurrentBranch();
          if (StringUtils.isBlank(currentBranch)) {
            return;
          }
          new HgConflictResolver(project).resolve(repository);
          HgResolveCommand resolveCommand=new HgResolveCommand(project);
          Map<HgFile,HgResolveStatusEnum> status=resolveCommand.getListSynchronously(repository);
          if (status.containsValue(HgResolveStatusEnum.UNRESOLVED)) {
            return;
          }
          new HgRebaseCommand(project,repository).continueRebase();
        }
      }
);
    }
  }
;
}
