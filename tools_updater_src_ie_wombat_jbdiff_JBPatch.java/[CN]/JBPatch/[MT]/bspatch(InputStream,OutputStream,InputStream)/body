{
  int oldpos, newpos;
  byte[] diffData=Utils.readBytes(diffFileIn);
  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffData));
  long headerMagic=diffIn.readLong();
  long ctrlBlockLen=diffIn.readLong();
  long diffBlockLen=diffIn.readLong();
  int newsize=(int)diffIn.readLong();
  InputStream in;
  in=new ByteArrayInputStream(diffData);
  in.skip(ctrlBlockLen + 32);
  GZIPInputStream diffBlockIn=new GZIPInputStream(in);
  in=new ByteArrayInputStream(diffData);
  in.skip(diffBlockLen + ctrlBlockLen + 32);
  GZIPInputStream extraBlockIn=new GZIPInputStream(in);
  ByteArrayOutputStream oldFileByteOut=new ByteArrayOutputStream();
  try {
    Utils.copyStream(oldFileIn,oldFileByteOut);
  }
  finally {
    oldFileByteOut.close();
  }
  byte[] oldBuf=oldFileByteOut.toByteArray();
  int oldsize=oldBuf.length;
  byte[] newBuf=new byte[newsize + 1];
  oldpos=0;
  newpos=0;
  int[] ctrl=new int[3];
  int nbytes;
  while (newpos < newsize) {
    for (int i=0; i <= 2; i++) {
      ctrl[i]=diffIn.readInt();
    }
    if (newpos + ctrl[0] > newsize) {
      System.err.println("Corrupt patch\n");
      return;
    }
    if (!Util.readFromStream(diffBlockIn,newBuf,newpos,ctrl[0])) {
      System.err.println("error reading from extraIn");
      return;
    }
    for (int i=0; i < ctrl[0]; i++) {
      if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {
        newBuf[newpos + i]+=oldBuf[oldpos + i];
      }
    }
    newpos+=ctrl[0];
    oldpos+=ctrl[0];
    if (newpos + ctrl[1] > newsize) {
      System.err.println("Corrupt patch");
      return;
    }
    if (!Util.readFromStream(extraBlockIn,newBuf,newpos,ctrl[1])) {
      System.err.println("error reading from extraIn");
      return;
    }
    newpos+=ctrl[1];
    oldpos+=ctrl[2];
  }
  diffBlockIn.close();
  extraBlockIn.close();
  diffIn.close();
  newFileOut.write(newBuf,0,newBuf.length - 1);
}
