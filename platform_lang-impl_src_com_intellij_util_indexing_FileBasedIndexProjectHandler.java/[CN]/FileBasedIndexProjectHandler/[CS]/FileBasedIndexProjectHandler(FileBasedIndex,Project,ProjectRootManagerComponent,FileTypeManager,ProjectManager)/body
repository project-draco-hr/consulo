{
  super(project);
  myIndex=index;
  myRootManager=rootManager;
  myFileTypeManager=ftManager;
  if (ApplicationManager.getApplication().isInternal()) {
    project.getMessageBus().connect().subscribe(DumbService.DUMB_MODE,new DumbService.DumbModeListener(){
      @Override public void enteredDumbMode(){
      }
      @Override public void exitDumbMode(){
        LOG.info("Has changed files: " + (createChangedFilesIndexingTask(project) != null) + "; project="+ project);
      }
    }
);
  }
  final StartupManagerEx startupManager=(StartupManagerEx)StartupManager.getInstance(project);
  if (startupManager != null) {
    startupManager.registerPreStartupActivity(new Runnable(){
      @Override public void run(){
        PushedFilePropertiesUpdater.getInstance(project).initializeProperties();
        TransactionGuard.submitTransaction(project,new Runnable(){
          @Override public void run(){
            if (FileBasedIndex.getInstance() instanceof FileBasedIndexImpl) {
              DumbService.getInstance(project).queueTask(new UnindexedFilesUpdater(project,true));
            }
          }
        }
);
        myIndex.registerIndexableSet(FileBasedIndexProjectHandler.this,project);
        projectManager.addProjectManagerListener(project,new ProjectManagerAdapter(){
          private boolean removed;
          @Override public void projectClosing(          Project project1){
            if (!removed) {
              removed=true;
              myIndex.removeIndexableSet(FileBasedIndexProjectHandler.this);
            }
          }
        }
);
      }
    }
);
  }
}
