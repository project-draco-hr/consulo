{
  String name=null;
  PsiElement parent=variable == null ? modifierList == null ? null : modifierList.getParent() : variable;
  if (parent instanceof PsiClass) {
    name=((PsiClass)parent).getName();
  }
 else {
    int options=PsiFormatUtilBase.SHOW_NAME | (myShowContainingClass ? PsiFormatUtilBase.SHOW_CONTAINING_CLASS : 0);
    if (parent instanceof PsiMethod) {
      name=PsiFormatUtil.formatMethod((PsiMethod)parent,PsiSubstitutor.EMPTY,options,0);
    }
 else     if (parent instanceof PsiVariable) {
      name=PsiFormatUtil.formatVariable((PsiVariable)parent,options,PsiSubstitutor.EMPTY);
    }
 else     if (parent instanceof PsiClassInitializer) {
      PsiClass containingClass=((PsiClassInitializer)parent).getContainingClass();
      String className=containingClass instanceof PsiAnonymousClass ? QuickFixBundle.message("anonymous.class.presentation",((PsiAnonymousClass)containingClass).getBaseClassType().getPresentableText()) : containingClass != null ? containingClass.getName() : "unknown";
      name=QuickFixBundle.message("class.initializer.presentation",className);
    }
  }
  String modifierText=VisibilityUtil.toPresentableText(myModifier);
  return QuickFixBundle.message(myShouldHave ? "add.modifier.fix" : "remove.modifier.fix",name,modifierText);
}
