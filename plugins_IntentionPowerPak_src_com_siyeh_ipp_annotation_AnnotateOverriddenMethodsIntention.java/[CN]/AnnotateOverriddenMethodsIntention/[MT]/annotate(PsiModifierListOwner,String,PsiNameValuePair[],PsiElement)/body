{
  final Project project=context.getProject();
  final ExternalAnnotationsManager annotationsManager=ExternalAnnotationsManager.getInstance(project);
  final PsiModifierList modifierList=modifierListOwner.getModifierList();
  if (modifierList == null) {
    return;
  }
  if (modifierList.findAnnotation(annotationName) != null)   return;
  final ExternalAnnotationsManager.AnnotationPlace annotationAnnotationPlace=annotationsManager.chooseAnnotationsPlace(modifierListOwner);
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.NOWHERE) {
    return;
  }
  final PsiFile fromFile=context.getContainingFile();
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.EXTERNAL) {
    annotationsManager.annotateExternally(modifierListOwner,annotationName,fromFile,attributes);
  }
 else {
    final PsiFile containingFile=modifierListOwner.getContainingFile();
    if (!CodeInsightUtilBase.preparePsiElementForWrite(containingFile)) {
      return;
    }
    final PsiAnnotation inserted=modifierList.addAnnotation(annotationName);
    for (    PsiNameValuePair pair : attributes) {
      inserted.setDeclaredAttributeValue(pair.getName(),pair.getValue());
    }
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
    codeStyleManager.shortenClassReferences(inserted);
    if (containingFile != fromFile) {
      UndoUtil.markPsiFileForUndo(fromFile);
    }
  }
}
