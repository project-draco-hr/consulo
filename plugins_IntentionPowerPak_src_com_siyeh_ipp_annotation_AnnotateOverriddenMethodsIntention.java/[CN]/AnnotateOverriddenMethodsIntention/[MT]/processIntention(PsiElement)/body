{
  final PsiAnnotation annotation=(PsiAnnotation)element;
  final String annotationName=annotation.getQualifiedName();
  if (annotationName == null) {
    return;
  }
  final PsiElement parent=annotation.getParent();
  final PsiElement grandParent=parent.getParent();
  final PsiMethod method;
  final int parameterIndex;
  if (!(grandParent instanceof PsiMethod)) {
    if (!(grandParent instanceof PsiParameter)) {
      return;
    }
    final PsiParameter parameter=(PsiParameter)grandParent;
    final PsiElement greatGrandParent=grandParent.getParent();
    if (!(greatGrandParent instanceof PsiParameterList)) {
      return;
    }
    final PsiParameterList parameterList=(PsiParameterList)greatGrandParent;
    parameterIndex=parameterList.getParameterIndex(parameter);
    final PsiElement greatGreatGrandParent=greatGrandParent.getParent();
    if (!(greatGreatGrandParent instanceof PsiMethod)) {
      return;
    }
    method=(PsiMethod)greatGreatGrandParent;
  }
 else {
    parameterIndex=-1;
    method=(PsiMethod)grandParent;
  }
  final Project project=element.getProject();
  final Collection<PsiMethod> overridingMethods=OverridingMethodsSearch.search(method,GlobalSearchScope.allScope(project),true).findAll();
  final PsiNameValuePair[] attributes=annotation.getParameterList().getAttributes();
  for (  PsiMethod overridingMethod : overridingMethods) {
    if (parameterIndex == -1) {
      annotate(overridingMethod,annotationName,attributes,element);
    }
 else {
      final PsiParameterList parameterList=overridingMethod.getParameterList();
      final PsiParameter[] parameters=parameterList.getParameters();
      final PsiParameter parameter=parameters[parameterIndex];
      annotate(parameter,annotationName,attributes,element);
    }
  }
}
