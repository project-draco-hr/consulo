{
  return new CompilerConfigurationOld(){
    @Nullable @Override public String getBytecodeTargetLevel(    Module module){
      return null;
    }
    @NotNull @Override public AnnotationProcessingConfiguration getAnnotationProcessingConfiguration(    Module module){
      return new AnnotationProcessingConfiguration(){
        @Override public boolean isEnabled(){
          return false;
        }
        @NotNull @Override public String getProcessorPath(){
          return null;
        }
        @NotNull @Override public String getGeneratedSourcesDirectoryName(        boolean forTests){
          return null;
        }
        @Override public boolean isOutputRelativeToContentRoot(){
          return false;
        }
        @NotNull @Override public Set<String> getProcessors(){
          return null;
        }
        @NotNull @Override public Map<String,String> getProcessorOptions(){
          return null;
        }
        @Override public boolean isObtainProcessorsFromClasspath(){
          return false;
        }
      }
;
    }
    @Override public boolean isAnnotationProcessorsEnabled(){
      return false;
    }
    @Override public boolean isExcludedFromCompilation(    VirtualFile virtualFile){
      return false;
    }
    @Override public boolean isResourceFile(    VirtualFile virtualFile){
      return false;
    }
    @Override public boolean isResourceFile(    String path){
      return false;
    }
    @Override public void addResourceFilePattern(    String namePattern) throws MalformedPatternException {
    }
    @Override public String[] getResourceFilePatterns(){
      return new String[0];
    }
    @Override public void removeResourceFilePatterns(){
    }
    @Override public void convertPatterns(){
    }
    @Override public boolean isAddNotNullAssertions(){
      return false;
    }
    @Override public void setAddNotNullAssertions(    boolean enabled){
    }
    @Override public ExcludedEntriesConfiguration getExcludedEntriesConfiguration(){
      return null;
    }
  }
;
}
