{
  elementStack.add(this);
  int startProp=0;
  final AntFile antFile=getAntFile();
  while ((startProp=value.indexOf("${",startProp)) >= 0) {
    if (startProp > 0 && value.charAt(startProp - 1) == '$') {
      startProp+=2;
      continue;
    }
    final int endProp=value.indexOf('}',startProp + 2);
    if (endProp <= startProp + 2) {
      startProp+=2;
      continue;
    }
    final String prop=value.substring(startProp + 2,endProp);
    final AntProperty propElement=antFile.getProperty(prop);
    if (elementStack.contains(propElement)) {
      return value;
    }
    String resolvedValue=null;
    if (propElement != null) {
      resolvedValue=propElement.getValue(prop);
      if (resolvedValue != null) {
        resolvedValue=((AntStructuredElementImpl)propElement).computeAttributeValue(resolvedValue,elementStack);
      }
    }
    if (resolvedValue == null) {
      startProp+=2;
    }
 else {
      final StringBuilder builder=StringBuilderSpinAllocator.alloc();
      try {
        builder.append(value,0,startProp);
        builder.append(resolvedValue);
        if (endProp < value.length() - 1) {
          builder.append(value,endProp + 1,value.length());
        }
        value=builder.toString();
      }
  finally {
        StringBuilderSpinAllocator.dispose(builder);
      }
    }
  }
  if (value.indexOf("$$") >= 0) {
    return $$_PATTERN.matcher(value).replaceAll("\\$");
  }
  return value;
}
