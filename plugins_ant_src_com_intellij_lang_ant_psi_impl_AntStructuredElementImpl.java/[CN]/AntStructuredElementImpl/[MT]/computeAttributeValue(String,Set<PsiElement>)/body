{
  elementStack.add(this);
  int startProp=0;
  while ((startProp=value.indexOf("${",startProp)) >= 0) {
    final int endProp=value.indexOf('}',startProp + 2);
    if (endProp <= startProp + 2) {
      startProp+=2;
      continue;
    }
    final String prop=value.substring(startProp + 2,endProp);
    final PsiElement propElement=resolveProperty(this,prop);
    if (elementStack.contains(propElement)) {
      return value;
    }
    String resolvedValue=null;
    if (propElement instanceof AntPropertyImpl) {
      final AntPropertyImpl antProperty=(AntPropertyImpl)propElement;
      resolvedValue=antProperty.getValue();
      if (resolvedValue != null) {
        resolvedValue=antProperty.computeAttributeValue(resolvedValue,elementStack);
      }
    }
 else     if (propElement instanceof Property) {
      resolvedValue=((Property)propElement).getValue();
    }
    if (resolvedValue == null) {
      startProp+=2;
    }
 else {
      if (endProp < value.length() - 1) {
        value=value.substring(0,startProp) + resolvedValue + value.substring(endProp + 1);
      }
 else {
        value=value.substring(0,startProp) + resolvedValue;
      }
    }
  }
  return value;
}
