{
  final Pair<PsiElement,String> resolveStackEntry=new Pair<PsiElement,String>(this,value);
  elementStack.add(resolveStackEntry);
  try {
    int startProp=0;
    final AntFile self=getAntFile();
    final AntFile antFile=antConfig.getEffectiveContextFile(self);
    while ((startProp=value.indexOf("${",startProp)) >= 0) {
      if (startProp > 0 && value.charAt(startProp - 1) == '$') {
        startProp+=2;
        continue;
      }
      final int endProp=value.indexOf('}',startProp + 2);
      if (endProp <= startProp + 2) {
        startProp+=2;
        continue;
      }
      final String prop=value.substring(startProp + 2,endProp);
      final Ref<String> resolvedValueRef=new Ref<String>(null);
      final Ref<Boolean> shouldReturnOriginalValue=new Ref<Boolean>(Boolean.FALSE);
      antFile.processAllProperties(prop,new Processor<AntProperty>(){
        public boolean process(        AntProperty antProperty){
          final String resolvedValue=antProperty.getValue(prop);
          if (resolvedValue == null) {
            return true;
          }
          if (elementStack.contains(new Pair<PsiElement,String>(antProperty,resolvedValue))) {
            shouldReturnOriginalValue.set(Boolean.TRUE);
          }
 else {
            resolvedValueRef.set(((AntStructuredElementImpl)antProperty).computeAttributeValue(resolvedValue,elementStack,antConfig));
          }
          return false;
        }
      }
);
      if (shouldReturnOriginalValue.get()) {
        return value;
      }
      if (resolvedValueRef.get() == null) {
        startProp+=2;
      }
 else {
        if (resolvedValueRef.get().equals(value)) {
          return value;
        }
        final StringBuilder builder=StringBuilderSpinAllocator.alloc();
        try {
          builder.append(value,0,startProp);
          builder.append(resolvedValueRef.get());
          if (endProp < value.length() - 1) {
            builder.append(value,endProp + 1,value.length());
          }
          final String substituted=builder.toString();
          if (!substituted.equals(value)) {
            value=substituted;
          }
 else {
            startProp+=2;
          }
        }
  finally {
          StringBuilderSpinAllocator.dispose(builder);
        }
      }
    }
    if (value.indexOf("$$") >= 0) {
      return $$_PATTERN.matcher(value).replaceAll("\\$");
    }
    return value;
  }
  finally {
    elementStack.remove(resolveStackEntry);
  }
}
