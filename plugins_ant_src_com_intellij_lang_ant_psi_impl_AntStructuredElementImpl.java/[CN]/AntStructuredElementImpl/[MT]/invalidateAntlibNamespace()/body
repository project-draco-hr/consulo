{
  final AntFile file=getAntFile();
  if (file == null)   return;
  final ClassLoader loader=file.getClassLoader().getClassloader();
  if (loader == null)   return;
  final String ns=getNamespace();
  if (!ns.startsWith(ANTLIB_NS_PREFIX))   return;
  if (!(this instanceof AntProject)) {
    final AntElement parent=getAntParent();
    if (parent instanceof AntStructuredElementImpl && ns.equals(((AntStructuredElementImpl)parent).getNamespace()))     return;
  }
  final StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    builder.append(ns.substring(ANTLIB_NS_PREFIX.length()).replace('.','/'));
    builder.append('/');
    builder.append(ANTLIB_XML);
    InputStream antlibStream=null;
    try {
      try {
        antlibStream=loader.getResourceAsStream(builder.toString());
        if (antlibStream != null) {
          builder.setLength(0);
          int nextByte;
          while ((nextByte=antlibStream.read()) >= 0) {
            builder.append((char)nextByte);
          }
        }
      }
  finally {
        if (antlibStream != null) {
          antlibStream.close();
        }
      }
    }
 catch (    IOException e) {
      return;
    }
    if (antlibStream != null) {
      final XmlFile xmlFile=(XmlFile)getManager().getElementFactory().createFileFromText("dummy.xml",StdFileTypes.XML,builder,LocalTimeCounter.currentTime(),false,false);
      final XmlDocument document=xmlFile.getDocument();
      if (document == null)       return;
      final XmlTag rootTag=document.getRootTag();
      if (rootTag == null)       return;
      for (      final XmlTag tag : rootTag.getSubTags()) {
        final AntElement element=AntElementFactory.createAntElement(this,tag);
        if (element instanceof AntTypeDef) {
          final AntTypeDefinition def=((AntTypeDef)element).getDefinition();
          if (def != null) {
            registerCustomType(def);
          }
        }
      }
    }
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
