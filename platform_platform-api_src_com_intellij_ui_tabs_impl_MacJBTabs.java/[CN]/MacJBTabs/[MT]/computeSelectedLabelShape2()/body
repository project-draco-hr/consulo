{
  final ShapeInfo shape=new ShapeInfo();
  TabInfo selected=getSelectedInfo();
  shape.path=getEffectiveLayout().createShapeTransform(getSize());
  shape.insets=shape.path.transformInsets(getLayoutInsets());
  shape.labelPath=shape.path.createTransform(getSelectedLabel().getBounds());
  ShapeTransform shadowShape=shape.path.createTransform(getSelectedLabel().getBounds());
  shape.labelBottomY=shape.labelPath.getMaxY() + shape.labelPath.deltaY(1);
  shape.labelTopY=shape.labelPath.getY() + getSelectionTabVShift();
  shape.labelLeftX=shape.labelPath.getX() - getArcSize();
  shape.labelRightX=shape.labelPath.getMaxX();
  boolean first=getLastLayoutPass().getPreviousFor(selected) == null;
  boolean last=getLastLayoutPass().getNextFor(selected) == null;
  if (first && !isGhostsAlwaysVisible()) {
    shape.path.moveTo(shape.labelLeftX + getArcSize(),shape.labelBottomY);
  }
 else {
    shape.path.moveTo(shape.insets.left,shape.labelBottomY);
    shape.path.lineTo(shape.labelLeftX,shape.labelBottomY);
    shape.path.quadTo(shape.labelLeftX + shape.path.deltaX(getArcSize()),shape.labelBottomY,shape.labelLeftX + getArcSize(),shape.labelBottomY - shape.path.deltaY(getArcSize()));
  }
  shape.path.lineTo(shape.labelLeftX + getArcSize(),shape.labelTopY + 1 + shape.labelPath.deltaY(getArcSize()));
  shape.path.quadTo(shape.labelLeftX + shape.path.deltaX(getArcSize()),shape.labelTopY + 1,shape.labelLeftX + getArcSize() + shape.labelPath.deltaX(getArcSize()),shape.labelTopY + 1);
  shadowShape.moveTo(shape.labelLeftX + getArcSize() - 1,shape.labelBottomY - 2);
  shadowShape.lineTo(shape.labelLeftX + getArcSize() - 1,shape.labelTopY + shape.labelPath.deltaY(getArcSize()));
  shadowShape.quadTo(shape.labelLeftX - 1 + shape.path.deltaX(getArcSize()),shape.labelTopY,shape.labelLeftX + getArcSize() - 1 + shape.labelPath.deltaX(getArcSize()),shape.labelTopY);
  int lastX=shape.path.getWidth() - shape.path.deltaX(shape.insets.right);
  if (isStealthModeEffective()) {
    shape.path.lineTo(lastX - shape.path.deltaX(getArcSize()),shape.labelTopY);
    shape.path.quadTo(lastX,shape.labelTopY,lastX,shape.labelTopY + shape.path.deltaY(getArcSize()));
    shape.path.lineTo(lastX,shape.labelBottomY);
  }
 else {
    shape.path.lineTo(shape.labelRightX - shape.path.deltaX(getArcSize()),shape.labelTopY + 1);
    shape.path.quadTo(shape.labelRightX,shape.labelTopY + 1,shape.labelRightX,shape.labelTopY + 1 + shape.path.deltaY(getArcSize()));
    shadowShape.lineTo(shape.labelRightX - shape.path.deltaX(getArcSize()) + 1,shape.labelTopY);
    shadowShape.quadTo(shape.labelRightX + 1,shape.labelTopY,shape.labelRightX + 1,shape.labelTopY + shape.path.deltaY(getArcSize()));
    if (getLastLayoutPass().hasCurveSpaceFor(selected)) {
      shape.path.lineTo(shape.labelRightX,shape.labelBottomY - shape.path.deltaY(getArcSize()));
      shape.path.quadTo(shape.labelRightX,shape.labelBottomY,shape.labelRightX + shape.path.deltaX(getArcSize()),shape.labelBottomY);
      shadowShape.lineTo(shape.labelRightX + 1,shape.labelBottomY - shape.path.deltaY(getArcSize()) + 1);
    }
 else {
      shape.path.lineTo(shape.labelRightX,shape.labelBottomY);
    }
  }
  shape.path.lineTo(lastX,shape.labelBottomY);
  if (isStealthModeEffective()) {
    shape.path.closePath();
  }
  shape.fillPath=shape.path.copy();
  if (!isHideTabs()) {
    shape.fillPath.lineTo(lastX,shape.labelBottomY + shape.fillPath.deltaY(1));
    Insets insets=shape.fillPath.transformInsets(getTabsBorder().getEffectiveBorder());
    shape.fillPath.lineTo(lastX,shape.labelBottomY + insets.top - 1);
    shape.fillPath.lineTo(shape.insets.left,shape.labelBottomY + insets.top - 1);
    shape.fillPath.closePath();
  }
  return Pair.create(shape,shadowShape);
}
