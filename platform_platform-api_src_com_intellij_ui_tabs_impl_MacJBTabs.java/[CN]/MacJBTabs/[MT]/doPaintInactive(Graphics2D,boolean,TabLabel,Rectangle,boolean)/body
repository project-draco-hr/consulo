{
  if (!isNewTabsActive()) {
    super.doPaintInactive(g2d,leftGhostExists,label,effectiveBounds,rightGhostExists);
    return;
  }
  List<TabInfo> visibleInfos=getVisibleInfos();
  TabInfo tabInfo=label.getInfo();
  int tabIndex=visibleInfos.indexOf(tabInfo);
  final int arc=getArcSize();
  Color topBlickColor=new Color(255,255,255,100);
  Color rightBlockColor=getRightBlockColor();
  final Color tabColor=label.getInfo().getTabColor();
  if (tabColor != null) {
    topBlickColor=tabColor;
  }
  final TabInfo selected=getSelectedInfo();
  final int selectionTabVShift=getSelectionTabVShift();
  LayoutPassInfo lastLayoutPass=getLastLayoutPass();
  final TabInfo prev=lastLayoutPass.getPreviousFor(visibleInfos.get(tabIndex));
  final TabInfo next=lastLayoutPass.getNextFor(visibleInfos.get(tabIndex));
  boolean firstShowing=prev == null;
  if (!firstShowing && !leftGhostExists) {
    firstShowing=getInfoForLabel(prev).getBounds().width == 0;
  }
  boolean lastShowing=next == null;
  if (!lastShowing) {
    lastShowing=getInfoForLabel(next).getBounds().width == 0;
  }
  boolean leftFromSelection=selected != null && tabIndex == visibleInfos.indexOf(selected) - 1;
  final ShapeTransform shape=getEffectiveLayout().createShapeTransform(effectiveBounds);
  final ShapeTransform shadowShape=getEffectiveLayout().createShapeTransform(effectiveBounds);
  int leftX=shape.getX();
  int topY=shape.getY() + shape.deltaY(selectionTabVShift);
  int rigthX=shape.getMaxX() - 1;
  int bottomY=shape.getMaxY() + shape.deltaY(1);
  Insets border=getTabsBorder().getEffectiveBorder();
  if (border.left > 0 || leftGhostExists || !firstShowing) {
    shape.moveTo(leftX,bottomY);
    shape.lineTo(leftX,topY + shape.deltaY(arc));
    shape.quadTo(leftX,topY + 1,leftX + shape.deltaX(arc),topY + 1);
    shadowShape.moveTo(leftX - 1,bottomY);
    shadowShape.lineTo(leftX - 1,topY + shadowShape.deltaY(arc));
    shadowShape.quadTo(leftX - 1,topY,leftX - 1 + shadowShape.deltaX(arc),topY);
  }
 else {
    if (firstShowing) {
      shape.moveTo(leftX,topY + shape.deltaY(getEdgeArcSize()));
      shape.quadTo(leftX,topY + 1,leftX + shape.deltaX(getEdgeArcSize()),topY + 1);
      shadowShape.moveTo(leftX - 1,topY + shadowShape.deltaY(getEdgeArcSize()));
      shadowShape.quadTo(leftX - 1,topY,leftX + shadowShape.deltaX(getEdgeArcSize()),topY);
    }
  }
  boolean rightEdge=false;
  if (border.right > 0 || rightGhostExists || !lastShowing || !Boolean.TRUE.equals(label.getClientProperty(STRETCHED_BY_WIDTH))) {
    shape.lineTo(rigthX - shape.deltaX(arc),topY + 1);
    shape.quadTo(rigthX,topY + 1,rigthX,topY + shape.deltaY(arc));
    shape.lineTo(rigthX,bottomY);
    shadowShape.lineTo(rigthX - shadowShape.deltaX(arc),topY);
    shadowShape.quadTo(rigthX + 1,topY,rigthX + 1,topY + shadowShape.deltaY(arc));
    shadowShape.lineTo(rigthX + 1,bottomY);
  }
 else {
    if (lastShowing) {
      shape.lineTo(rigthX - shape.deltaX(arc),topY + 1);
      shape.quadTo(rigthX,topY,rigthX,topY + shape.deltaY(arc));
      shape.lineTo(rigthX,bottomY);
      rightEdge=true;
      shadowShape.lineTo(rigthX - shadowShape.deltaX(arc),topY);
      shadowShape.quadTo(rigthX + 1,topY,rigthX + 1,topY + shadowShape.deltaY(arc));
      shadowShape.lineTo(rigthX + 1,bottomY);
    }
  }
  if (!rightEdge) {
    shape.lineTo(leftX,bottomY);
    shadowShape.lineTo(leftX,bottomY);
  }
  final Line2D.Float gradientLine=shape.transformLine(0,topY,0,topY + shape.deltaY((int)(shape.getHeight() / 1.5)));
  final GradientPaint gp=new GradientPaint(gradientLine.x1,gradientLine.y1,shape.transformY1(new Color(0,0,0,15),new Color(0,0,0,30)),gradientLine.x2,gradientLine.y2,shape.transformY1(new Color(0,0,0,30),new Color(0,0,0,15)));
  final Paint old=g2d.getPaint();
  g2d.setPaint(gp);
  g2d.fill(shape.getShape());
  g2d.setPaint(old);
  g2d.setColor(tabColor == null ? new Color(255,255,255,30) : new Color(tabColor.getRed(),tabColor.getGreen(),tabColor.getBlue(),130));
  g2d.fill(shape.getShape());
  g2d.setColor(new Color(0,0,0,12));
  g2d.draw(shadowShape.getShape());
  g2d.setColor(topBlickColor);
  g2d.draw(shape.transformLine(leftX + shape.deltaX(arc),topY + 1 + shape.deltaY(1),rigthX - shape.deltaX(arc - 1) - 1,topY + 1 + shape.deltaY(1)));
  if (!rightEdge) {
    g2d.setColor(rightBlockColor);
  }
  g2d.setColor(new Color(130,130,130));
  g2d.draw(shape.getShape());
}
