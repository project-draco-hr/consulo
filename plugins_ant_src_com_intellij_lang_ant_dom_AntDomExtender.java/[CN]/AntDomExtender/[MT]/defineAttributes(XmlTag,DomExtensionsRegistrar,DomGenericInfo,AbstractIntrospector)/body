{
  final Map<String,Pair<Type,Class>> registeredAttribs=getStaticallyRegisteredAttributes(genericInfo);
  final Iterator<String> introspectedAttributes=parentIntrospector.getAttributesIterator();
  while (introspectedAttributes.hasNext()) {
    final String attribName=introspectedAttributes.next();
    if (genericInfo.getAttributeChildDescription(attribName) == null) {
      final String _attribName=attribName.toLowerCase(Locale.US);
      final Pair<Type,Class> types=registeredAttribs.get(_attribName);
      Type type=types != null ? types.getFirst() : null;
      Class converterClass=types != null ? types.getSecond() : null;
      if (type == null) {
        type=String.class;
        final Class attributeType=parentIntrospector.getAttributeType(attribName);
        if (attributeType != null) {
          if (File.class.isAssignableFrom(attributeType)) {
            type=PsiFileSystemItem.class;
            converterClass=AntPathConverter.class;
          }
 else           if (Boolean.class.isAssignableFrom(attributeType)) {
            type=Boolean.class;
            converterClass=AntBooleanConverter.class;
          }
 else           if (isAssignableFrom(Reference.class.getName(),attributeType)) {
            converterClass=AntDomRefIdConverter.class;
          }
        }
      }
      LOG.assertTrue(type != null);
      registerAttribute(registrar,attribName,type,converterClass);
      if (types == null) {
        registeredAttribs.put(_attribName,new Pair<Type,Class>(type,converterClass));
      }
    }
  }
  for (  XmlAttribute xmlAttribute : xmlTag.getAttributes()) {
    final String existingAttribName=xmlAttribute.getName();
    if (genericInfo.getAttributeChildDescription(existingAttribName) == null) {
      final Pair<Type,Class> pair=registeredAttribs.get(existingAttribName.toLowerCase(Locale.US));
      if (pair != null) {
        registerAttribute(registrar,existingAttribName,pair.getFirst(),pair.getSecond());
      }
    }
  }
}
