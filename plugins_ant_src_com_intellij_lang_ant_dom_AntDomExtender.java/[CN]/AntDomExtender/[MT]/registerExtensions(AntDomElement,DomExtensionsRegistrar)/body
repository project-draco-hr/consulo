{
  final XmlElement xmlElement=antDomElement.getXmlElement();
  if (xmlElement instanceof XmlTag) {
    final XmlTag xmlTag=(XmlTag)xmlElement;
    final String tagName=xmlTag.getName();
    final ReflectedProject reflected=ReflectedProject.getProject(antDomElement.getAntProject().getClassLoader());
    final DomGenericInfo genericInfo=antDomElement.getGenericInfo();
    AntIntrospector parentElementIntrospector=null;
    if ("project".equals(tagName)) {
      parentElementIntrospector=getIntrospector(reflected.getProject().getClass());
    }
 else     if ("target".equals(tagName)) {
      parentElementIntrospector=getIntrospector(reflected.getTargetClass());
    }
 else {
      final Map<String,Class> tasks=reflected.getTaskDefinitions();
      final Class taskClass=tasks.get(tagName);
      if (taskClass != null) {
        parentElementIntrospector=getIntrospector(taskClass);
      }
 else {
        final Map<String,Class> dataTypes=reflected.getDataTypeDefinitions();
        final Class dataClass=dataTypes.get(tagName);
        if (dataClass != null) {
          parentElementIntrospector=getIntrospector(dataClass);
        }
      }
    }
    if (parentElementIntrospector != null) {
      final Enumeration attributes=parentElementIntrospector.getAttributes();
      while (attributes.hasMoreElements()) {
        registerAttribute(registrar,genericInfo,(String)attributes.nextElement());
      }
      if ("project".equals(tagName) || parentElementIntrospector.isContainer()) {
        for (        Object nestedName : reflected.getTaskDefinitions().keySet()) {
          registerChild(registrar,genericInfo,(String)nestedName);
        }
        for (        Object nestedTypeDef : reflected.getDataTypeDefinitions().keySet()) {
          registerChild(registrar,genericInfo,(String)nestedTypeDef);
        }
      }
 else {
        final Enumeration<String> nested=parentElementIntrospector.getNestedElements();
        while (nested.hasMoreElements()) {
          registerChild(registrar,genericInfo,nested.nextElement());
        }
      }
    }
  }
}
