{
  final XmlElement xmlElement=antDomElement.getXmlElement();
  if (xmlElement instanceof XmlTag) {
    final XmlTag xmlTag=(XmlTag)xmlElement;
    final String tagName=xmlTag.getName();
    final AntDomProject antProject=antDomElement.getAntProject();
    final ReflectedProject reflected=ReflectedProject.getProject(antProject.getClassLoader());
    final DomGenericInfo genericInfo=antDomElement.getGenericInfo();
    AntIntrospector parentElementIntrospector=null;
    final Hashtable<String,Class> taskDefs=reflected.getTaskDefinitions();
    final Hashtable<String,Class> dataTypeDefs=reflected.getDataTypeDefinitions();
    if ("project".equals(tagName)) {
      parentElementIntrospector=getIntrospector(reflected.getProject().getClass());
    }
 else     if ("target".equals(tagName)) {
      parentElementIntrospector=getIntrospector(reflected.getTargetClass());
    }
 else {
      final Class taskClass=taskDefs.get(tagName);
      if (taskClass != null) {
        parentElementIntrospector=getIntrospector(taskClass);
      }
 else {
        final Class dataClass=dataTypeDefs.get(tagName);
        if (dataClass != null) {
          parentElementIntrospector=getIntrospector(dataClass);
        }
      }
    }
    if (parentElementIntrospector != null) {
      final Enumeration attributes=parentElementIntrospector.getAttributes();
      while (attributes.hasMoreElements()) {
        registerAttribute(registrar,genericInfo,(String)attributes.nextElement());
      }
      if ("project".equals(tagName) || parentElementIntrospector.isContainer()) {
        for (        String nestedName : taskDefs.keySet()) {
          final DomExtension extension=registerChild(registrar,genericInfo,nestedName);
          if (extension != null) {
            extension.putUserData(AntDomElement.ROLE,AntDomElement.Role.TASK);
          }
        }
        for (        String nestedTypeDef : dataTypeDefs.keySet()) {
          final DomExtension extension=registerChild(registrar,genericInfo,nestedTypeDef);
          if (extension != null) {
            extension.putUserData(AntDomElement.ROLE,AntDomElement.Role.DATA_TYPE);
          }
        }
        registrar.registerCustomChildrenExtension(AntDomCustomTask.class,new AntCustomTagNameDescriptor());
      }
 else {
        final Enumeration<String> nested=parentElementIntrospector.getNestedElements();
        while (nested.hasMoreElements()) {
          final String nestedElementName=nested.nextElement();
          final DomExtension extension=registerChild(registrar,genericInfo,nestedElementName);
          if (extension != null) {
            AntDomElement.Role role=null;
            if (taskDefs.containsKey(nestedElementName)) {
              role=AntDomElement.Role.TASK;
            }
 else             if (dataTypeDefs.containsKey(nestedElementName)) {
              role=AntDomElement.Role.DATA_TYPE;
            }
            if (role != null) {
              extension.putUserData(AntDomElement.ROLE,role);
            }
          }
        }
      }
    }
  }
}
