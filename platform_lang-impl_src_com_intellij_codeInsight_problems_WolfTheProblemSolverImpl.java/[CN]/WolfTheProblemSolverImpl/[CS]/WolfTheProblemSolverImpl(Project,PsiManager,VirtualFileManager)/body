{
  super(project);
  PsiTreeChangeListener changeListener=new PsiTreeChangeAdapter(){
    @Override public void childAdded(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    @Override public void childRemoved(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    @Override public void childReplaced(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    @Override public void childMoved(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    @Override public void propertyChanged(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    @Override public void childrenChanged(    @NotNull PsiTreeChangeEvent event){
      clearSyntaxErrorFlag(event);
    }
  }
;
  psiManager.addPsiTreeChangeListener(changeListener);
  VirtualFileListener virtualFileListener=new VirtualFileAdapter(){
    @Override public void fileDeleted(    @NotNull final VirtualFileEvent event){
      onDeleted(event.getFile());
    }
    @Override public void fileMoved(    @NotNull final VirtualFileMoveEvent event){
      onDeleted(event.getFile());
    }
    private void onDeleted(    @NotNull final VirtualFile file){
      if (file.isDirectory()) {
        clearInvalidFiles();
      }
 else {
        doRemove(file);
      }
    }
  }
;
  virtualFileManager.addVirtualFileListener(virtualFileListener,myProject);
  FileStatusManager fileStatusManager=FileStatusManager.getInstance(myProject);
  if (fileStatusManager != null) {
    fileStatusManager.addFileStatusListener(new FileStatusListener(){
      @Override public void fileStatusesChanged(){
        clearInvalidFiles();
      }
      @Override public void fileStatusChanged(      @NotNull VirtualFile virtualFile){
        fileStatusesChanged();
      }
    }
);
  }
}
