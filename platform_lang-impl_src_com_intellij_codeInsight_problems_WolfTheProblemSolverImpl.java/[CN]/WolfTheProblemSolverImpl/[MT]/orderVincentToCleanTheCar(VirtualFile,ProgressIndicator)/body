{
  if (!isToBeHighlighted(file)) {
    clearProblems(file);
    return true;
  }
  if (hasSyntaxErrors(file)) {
    return false;
  }
  if (myProject.isDisposed())   return false;
  if (willBeHighlightedAnyway(file))   return false;
  final PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  if (psiFile == null)   return false;
  final Document document=FileDocumentManager.getInstance().getDocument(file);
  if (document == null)   return false;
  try {
    GeneralHighlightingPass pass=new GeneralHighlightingPass(myProject,psiFile,document,0,document.getTextLength(),false){
      protected HighlightInfoHolder createInfoHolder(      final PsiFile file){
        return new HighlightInfoHolder(file,HighlightInfoFilter.EMPTY_ARRAY){
          public boolean add(          HighlightInfo info){
            if (info != null && info.getSeverity() == HighlightSeverity.ERROR) {
              throw new HaveGotErrorException(info,myHasErrorElement);
            }
            return super.add(info);
          }
        }
;
      }
    }
;
    pass.collectInformation(progressIndicator);
  }
 catch (  HaveGotErrorException e) {
    ProblemImpl problem=new ProblemImpl(file,e.myHighlightInfo,e.myHasErrorElement);
    reportProblems(file,Collections.<Problem>singleton(problem));
    return false;
  }
  clearProblems(file);
  return true;
}
