{
  if (!isToBeHighlighted(file)) {
    clearProblems(file);
    return true;
  }
  if (hasSyntaxErrors(file)) {
    return false;
  }
  if (myProject.isDisposed())   return false;
  if (willBeHighlightedAnyway(file))   return false;
  final PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  if (psiFile == null)   return false;
  final Document document=FileDocumentManager.getInstance().getDocument(file);
  if (document == null)   return false;
  final AtomicReference<HighlightInfo> error=new AtomicReference<HighlightInfo>();
  final AtomicBoolean hasErrorElement=new AtomicBoolean();
  try {
    GeneralHighlightingPass pass=new GeneralHighlightingPass(myProject,psiFile,document,0,document.getTextLength(),false,new ProperTextRange(0,document.getTextLength()),null,HighlightInfoProcessor.getEmpty()){
      @Override protected HighlightInfoHolder createInfoHolder(      @NotNull final PsiFile file){
        return new HighlightInfoHolder(file){
          @Override public boolean add(          @Nullable HighlightInfo info){
            if (info != null && info.getSeverity() == HighlightSeverity.ERROR) {
              error.set(info);
              hasErrorElement.set(myHasErrorElement);
              throw new ProcessCanceledException();
            }
            return super.add(info);
          }
        }
;
      }
    }
;
    pass.collectInformation(progressIndicator);
  }
 catch (  ProcessCanceledException e) {
    if (error.get() != null) {
      ProblemImpl problem=new ProblemImpl(file,error.get(),hasErrorElement.get());
      reportProblems(file,Collections.<Problem>singleton(problem));
    }
    return false;
  }
  clearProblems(file);
  return true;
}
