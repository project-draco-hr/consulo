{
  if (!myRebaseEditorShown) {
    myRebaseEditorShown=true;
    if (myHasMerges) {
      return 0;
    }
    try {
      TreeMap<String,String> pickLines=new TreeMap<String,String>();
      StringScanner s=new StringScanner(new String(FileUtil.loadFileText(new File(path),GitUtil.UTF8_ENCODING)));
      while (s.hasMoreData()) {
        if (!s.tryConsume("pick ")) {
          s.line();
          continue;
        }
        String commit=s.spaceToken();
        pickLines.put(commit,"pick " + commit + " "+ s.line());
      }
      PrintWriter w=new PrintWriter(new OutputStreamWriter(new FileOutputStream(path),GitUtil.UTF8_ENCODING));
      try {
        for (        String commit : myCommits) {
          String key=pickLines.headMap(commit + "\u0000").lastKey();
          if (key == null || !commit.startsWith(key)) {
            continue;
          }
          w.print(pickLines.get(key) + "\n");
        }
      }
  finally {
        w.close();
      }
      return 0;
    }
 catch (    Exception ex) {
      LOG.error("Editor failed: ",ex);
      return 1;
    }
  }
 else {
    return super.editCommits(path);
  }
}
