{
  final Application application=ApplicationManager.getApplication();
  if (!(application instanceof ApplicationImpl))   return null;
  String baseDirPath=((ApplicationImpl)application).getStateStore().getStateStorageManager().expandMacroses(fileSpec);
  if (baseDirPath != null) {
    SchemesManagerImpl<T,E> manager=new SchemesManagerImpl<T,E>(fileSpec,processor,roamingType,((ApplicationImpl)ApplicationManager.getApplication()).getStateStore().getStateStorageManager().getStreamProviders(roamingType),new File(baseDirPath));
    myRegisteredManagers.add(manager);
    return manager;
  }
 else {
    return new AbstractSchemesManager<T,E>(){
      @NotNull public Collection<E> loadSchemes(){
        return Collections.emptyList();
      }
      @NotNull public Collection<SharedScheme<E>> loadSharedSchemes(      final Collection<T> currentSchemeList){
        return Collections.emptyList();
      }
      public void exportScheme(      final E scheme,      final String name,      final String description){
      }
      public boolean isImportAvailable(){
        return false;
      }
      public boolean isShared(      final Scheme scheme){
        return false;
      }
      public void save(){
      }
      protected void onSchemeDeleted(      final Scheme toDelete){
      }
      protected void onSchemeAdded(      final T scheme){
      }
      public boolean isExportAvailable(){
        return false;
      }
      public File getRootDirectory(){
        return null;
      }
    }
;
  }
}
