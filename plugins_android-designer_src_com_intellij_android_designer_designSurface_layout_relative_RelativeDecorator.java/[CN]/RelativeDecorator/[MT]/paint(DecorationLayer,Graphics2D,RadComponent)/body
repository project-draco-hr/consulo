{
  if (!layer.showSelection() || container.getClientProperty(SnapPointFeedbackHost.KEY) != null) {
    return;
  }
  Stroke stroke=g.getStroke();
  g.setStroke(SnapPointFeedbackHost.STROKE);
  g.setColor(SnapPointFeedbackHost.COLOR);
  Rectangle bounds=container.getBounds(layer);
  Map<RadComponent,RelativeInfo> relativeInfos=container.getClientProperty(RelativeInfo.KEY);
  List<RadComponent> selection=layer.getArea().getSelection();
  for (  RadComponent component : selection) {
    RelativeInfo info=relativeInfos.get(component);
    if (info != null) {
      paintOutRelative(layer,g,component,info);
      paintContainerRelative(g,bounds,info);
    }
  }
  g.setStroke(stroke);
  g.setColor(JBColor.ORANGE);
  for (  RadComponent component : selection) {
    RelativeInfo info=relativeInfos.get(component);
    if (info != null) {
      paintContainerMarginRelative(layer,g,bounds,(RadViewComponent)component,info);
    }
  }
}
