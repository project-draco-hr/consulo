{
  VisiblePack visiblePack=null;
  List<Request> requests;
  while (!(requests=myTaskController.popRequests()).isEmpty()) {
    RefreshRequest refreshRequest=ContainerUtil.findLastInstance(requests,RefreshRequest.class);
    FilterRequest filterRequest=ContainerUtil.findLastInstance(requests,FilterRequest.class);
    SortTypeRequest sortTypeRequest=ContainerUtil.findLastInstance(requests,SortTypeRequest.class);
    List<MoreCommitsRequest> moreCommitsRequests=ContainerUtil.findAll(requests,MoreCommitsRequest.class);
    myRequestsToRun.addAll(moreCommitsRequests);
    if (refreshRequest != null) {
      myDataPack=refreshRequest.dataPack;
    }
    if (filterRequest != null) {
      myFilters=filterRequest.filters;
    }
    if (sortTypeRequest != null) {
      mySortType=sortTypeRequest.sortType;
    }
    if (myDataPack == null) {
      continue;
    }
    if (filterRequest != null) {
      myCommitCount=CommitCountStage.INITIAL;
    }
 else     if (!moreCommitsRequests.isEmpty()) {
      myCommitCount=myCommitCount.next();
    }
    Pair<VisiblePack,CommitCountStage> pair=myVisiblePackBuilder.build(myDataPack,mySortType,myFilters,myCommitCount);
    visiblePack=pair.first;
    myCommitCount=pair.second;
  }
  myTaskController.taskCompleted(visiblePack);
  if (visiblePack != null) {
    final List<MoreCommitsRequest> requestsToRun=myRequestsToRun;
    myRequestsToRun=ContainerUtil.newArrayList();
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        for (        MoreCommitsRequest request : requestsToRun) {
          request.onLoaded.run();
        }
      }
    }
);
  }
}
