{
  final PsiMethod method=getMethod(psiClass,false);
  if (method != null) {
    return false;
  }
  if (isSuperClassForBaseClass(psiClass)) {
    return false;
  }
  final boolean isAbstract=psiClass.hasModifierProperty(PsiModifier.ABSTRACT);
  final PsiMethod baseClassMethod=getMethod(psiClass,true);
  final boolean hasBaseImplementation;
  if (baseClassMethod == null) {
    hasBaseImplementation=false;
  }
 else {
    hasBaseImplementation=!baseClassMethod.hasModifierProperty(PsiModifier.ABSTRACT);
  }
  if (hasBaseImplementation || isAbstract) {
    final PsiClass[] subclasses=getSubclasses(psiClass);
    for (int i=0; i < subclasses.length; i++) {
      final PsiClass subclass=subclasses[i];
      if (!shouldHideClass(subclass)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}
