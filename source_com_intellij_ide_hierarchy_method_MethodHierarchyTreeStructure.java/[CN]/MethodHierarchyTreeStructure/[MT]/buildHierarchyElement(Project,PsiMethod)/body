{
  final PsiClass suitableBaseClass=findSuitableBaseClass(method);
  HierarchyNodeDescriptor descriptor=null;
  final ArrayList superClasses=createSuperClasses(suitableBaseClass);
  if (!suitableBaseClass.equals(method.getContainingClass())) {
    superClasses.add(0,suitableBaseClass);
  }
  for (int i=superClasses.size() - 1; i >= 0; i--) {
    final PsiClass psiClass=(PsiClass)superClasses.get(i);
    if (MethodHierarchyUtil.findBaseMethodInClass(method,psiClass,false) == null) {
      superClasses.remove(i);
    }
 else {
      break;
    }
  }
  for (int i=superClasses.size() - 1; i >= 0; i--) {
    final PsiClass superClass=(PsiClass)superClasses.get(i);
    final HierarchyNodeDescriptor newDescriptor=new MethodHierarchyNodeDescriptor(project,descriptor,superClass,false,MethodHierarchyTreeStructure.this);
    if (descriptor != null) {
      descriptor.setCachedChildren(new HierarchyNodeDescriptor[]{newDescriptor});
    }
    descriptor=newDescriptor;
  }
  final HierarchyNodeDescriptor newDescriptor=new MethodHierarchyNodeDescriptor(project,descriptor,method.getContainingClass(),true,MethodHierarchyTreeStructure.this);
  if (descriptor != null) {
    descriptor.setCachedChildren(new HierarchyNodeDescriptor[]{newDescriptor});
  }
  return newDescriptor;
}
