{
  PsiExpression[] operands=expression.getOperands();
  PsiType lType=operands[0].getType();
  IElementType operationSign=expression.getOperationTokenType();
  for (int i=1; i < operands.length; i++) {
    PsiExpression operand=operands[i];
    PsiType rType=operand.getType();
    if (!TypeConversionUtil.isBinaryOperatorApplicable(operationSign,lType,rType,false)) {
      PsiJavaToken token=expression.getTokenBeforeOperand(operand);
      String message=JavaErrorMessages.message("binary.operator.not.applicable",token.getText(),formatType(lType),formatType(rType));
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,message);
    }
    lType=TypeConversionUtil.calcTypeForBinaryExpression(lType,rType,operationSign,true);
  }
  return null;
}
