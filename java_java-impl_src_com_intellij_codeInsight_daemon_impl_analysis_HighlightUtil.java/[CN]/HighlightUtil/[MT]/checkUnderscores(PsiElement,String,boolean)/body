{
  String[] parts=ArrayUtil.EMPTY_STRING_ARRAY;
  if (isInt) {
    int start=0;
    int end=text.length();
    if (text.startsWith(PsiLiteralExpressionImpl.HEX_PREFIX) || text.startsWith(PsiLiteralExpressionImpl.BIN_PREFIX))     start+=2;
    if (StringUtil.endsWithChar(text,'l'))     --end;
    parts=new String[]{text.substring(start,end)};
  }
 else {
    Matcher matcher=FP_LITERAL_PARTS.matcher(text);
    if (matcher.matches()) {
      parts=new String[matcher.groupCount()];
      for (int i=0; i < matcher.groupCount(); i++) {
        parts[i]=matcher.group(i + 1);
      }
    }
  }
  for (  String part : parts) {
    if (part != null && (StringUtil.startsWithChar(part,'_') || StringUtil.endsWithChar(part,'_'))) {
      String message=JavaErrorMessages.message("illegal.underscore");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(message).create();
    }
  }
  return null;
}
