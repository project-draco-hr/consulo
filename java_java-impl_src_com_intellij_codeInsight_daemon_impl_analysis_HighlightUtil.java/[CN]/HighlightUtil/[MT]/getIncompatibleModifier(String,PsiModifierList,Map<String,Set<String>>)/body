{
  if (modifierList == null)   return null;
  PsiElement[] modifiers=modifierList.getChildren();
  int modifierCount=0;
  for (  PsiElement otherModifier : modifiers) {
    if (Comparing.equal(modifier,otherModifier.getText(),true))     modifierCount++;
  }
  if (modifierCount > 1) {
    return modifier;
  }
  Set<String> incompatibles=incompatibleModifiersHash.get(modifier);
  if (incompatibles == null)   return null;
  for (  @PsiModifier.ModifierConstant String incompatible : incompatibles) {
    if (modifierList.hasModifierProperty(incompatible)) {
      return incompatible;
    }
 else     if (PsiModifier.ABSTRACT.equals(incompatible)) {
      final PsiElement owner=modifierList.getParent();
      if (owner instanceof PsiMethod && PsiUtil.isExtensionMethod((PsiMethod)owner)) {
        return incompatible;
      }
    }
  }
  return null;
}
