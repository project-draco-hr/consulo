{
  final List<PsiTypeElement> typeElements=PsiUtil.getParameterTypeElements(parameter);
  final Collection<HighlightInfo> highlights=Lists.newArrayListWithCapacity(typeElements.size());
  for (int i=0, size=typeElements.size(); i < size; i++) {
    final PsiTypeElement typeElement=typeElements.get(i);
    final PsiType catchType=typeElement.getType();
    if (catchType instanceof PsiClassType && ExceptionUtil.isUncheckedExceptionOrSuperclass((PsiClassType)catchType))     continue;
    boolean used=false;
    for (    PsiClassType exceptionType : thrownTypes) {
      if (exceptionType.isAssignableFrom(catchType) || catchType.isAssignableFrom(exceptionType)) {
        used=true;
        break;
      }
    }
    if (!used) {
      final String description=JavaErrorMessages.message("exception.never.thrown.try",formatType(catchType));
      final HighlightInfo highlight=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,typeElement,description);
      QuickFixAction.registerQuickFixAction(highlight,new DeleteMultiCatchFix(typeElement));
      highlights.add(highlight);
    }
  }
  return highlights;
}
