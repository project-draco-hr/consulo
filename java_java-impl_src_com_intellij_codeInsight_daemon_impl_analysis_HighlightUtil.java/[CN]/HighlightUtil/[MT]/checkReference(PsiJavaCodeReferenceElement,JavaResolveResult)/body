{
  PsiElement refName=ref.getReferenceNameElement();
  if (!(refName instanceof PsiIdentifier) && !(refName instanceof PsiKeyword))   return null;
  PsiElement resolved=result.getElement();
  HighlightInfo highlightInfo=checkMemberReferencedBeforeConstructorCalled(ref,resolved);
  if (highlightInfo != null)   return highlightInfo;
  PsiElement refParent=ref.getParent();
  PsiElement granny;
  if (refParent instanceof PsiReferenceExpression && (granny=refParent.getParent()) instanceof PsiMethodCallExpression) {
    PsiReferenceExpression referenceToMethod=((PsiMethodCallExpression)granny).getMethodExpression();
    PsiExpression qualifierExpression=referenceToMethod.getQualifierExpression();
    if (qualifierExpression == ref) {
      PsiElement qualifier=resolved;
      if (qualifier != null && !(qualifier instanceof PsiClass) && !(qualifier instanceof PsiVariable)) {
        return HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,qualifierExpression,"Qualifier must be an expression");
      }
    }
  }
 else   if (refParent instanceof PsiMethodCallExpression) {
    return null;
  }
  if (resolved == null) {
    if (isInsidePackageStatement(refName))     return null;
    if (result.isPackagePrefixPackageReference())     return null;
    JavaResolveResult[] results=ref.multiResolve(true);
    String description;
    if (results.length > 1) {
      String t1=format(results[0].getElement());
      String t2=format(results[1].getElement());
      description=JavaErrorMessages.message("ambiguous.reference",refName.getText(),t1,t2);
    }
 else {
      description=JavaErrorMessages.message("cannot.resolve.symbol",refName.getText());
    }
    HighlightInfoType type=HighlightInfoType.WRONG_REF;
    if (PsiUtil.isInsideJavadocComment(ref))     return null;
    HighlightInfo info=HighlightInfo.createHighlightInfo(type,refName,description);
    UnresolvedReferenceQuickFixProvider.registerReferenceFixes(ref,new QuickFixActionRegistrarImpl(info));
    return info;
  }
  if (!result.isValidResult() && !PsiUtil.isInsideJavadocComment(ref)) {
    if (!result.isAccessible()) {
      String description=buildProblemWithAccessDescription(ref,result);
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
      if (result.isStaticsScopeCorrect()) {
        registerAccessQuickFixAction((PsiMember)resolved,ref,info,result.getCurrentFileResolveScope());
        if (ref instanceof PsiReferenceExpression) {
          QuickFixAction.registerQuickFixAction(info,new RenameWrongRefFix((PsiReferenceExpression)ref));
        }
      }
      return info;
    }
    if (!result.isStaticsScopeCorrect()) {
      String description=buildProblemWithStaticDescription(resolved);
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
      registerStaticProblemQuickFixAction(resolved,info,ref);
      if (ref instanceof PsiReferenceExpression) {
        QuickFixAction.registerQuickFixAction(info,new RenameWrongRefFix((PsiReferenceExpression)ref));
      }
      return info;
    }
  }
  if ((resolved instanceof PsiLocalVariable || resolved instanceof PsiParameter) && !(resolved instanceof ImplicitVariable)) {
    highlightInfo=HighlightControlFlowUtil.checkVariableMustBeFinal((PsiVariable)resolved,ref);
  }
 else   if (resolved instanceof PsiClass) {
    if (Comparing.strEqual(((PsiClass)resolved).getQualifiedName(),((PsiClass)resolved).getName())) {
      final PsiElement parent=ref.getParent();
      if (parent instanceof PsiImportStaticReferenceElement || parent instanceof PsiImportStatementBase) {
        return HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,refName,JavaErrorMessages.message("cannot.resolve.symbol",refName.getText()));
      }
    }
  }
  return highlightInfo;
}
