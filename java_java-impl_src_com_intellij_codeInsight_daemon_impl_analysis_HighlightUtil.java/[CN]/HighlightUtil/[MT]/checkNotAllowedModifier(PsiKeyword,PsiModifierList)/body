{
  PsiElement modifierOwner=modifierList.getParent();
  if (modifierOwner == null)   return null;
  if (PsiUtilBase.hasErrorElementChild(modifierOwner))   return null;
  @Modifier String modifier=keyword.getText();
  final Map<String,Set<String>> incompatibleModifierMap=getIncompatibleModifierMap(modifierList);
  if (incompatibleModifierMap == null)   return null;
  Set<String> incompatibles=incompatibleModifierMap.get(modifier);
  PsiElement modifierOwnerParent=modifierOwner instanceof PsiMember ? ((PsiMember)modifierOwner).getContainingClass() : modifierOwner.getParent();
  if (modifierOwnerParent == null)   modifierOwnerParent=modifierOwner.getParent();
  boolean isAllowed=true;
  if (modifierOwner instanceof PsiClass) {
    PsiClass aClass=(PsiClass)modifierOwner;
    if (aClass.isInterface()) {
      if (PsiModifier.STATIC.equals(modifier) || PsiModifier.PRIVATE.equals(modifier) || PsiModifier.PROTECTED.equals(modifier)|| PsiModifier.PACKAGE_LOCAL.equals(modifier)) {
        isAllowed=modifierOwnerParent instanceof PsiClass;
      }
    }
 else {
      if (PsiModifier.PUBLIC.equals(modifier)) {
        isAllowed=modifierOwnerParent instanceof PsiJavaFile || modifierOwnerParent instanceof PsiClass;
      }
 else       if (PsiModifier.STATIC.equals(modifier) || PsiModifier.PRIVATE.equals(modifier) || PsiModifier.PROTECTED.equals(modifier)|| PsiModifier.PACKAGE_LOCAL.equals(modifier)) {
        isAllowed=modifierOwnerParent instanceof PsiClass;
      }
      if (aClass.isEnum()) {
        isAllowed&=!(PsiModifier.FINAL.equals(modifier) || PsiModifier.ABSTRACT.equals(modifier));
      }
    }
  }
 else   if (modifierOwner instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)modifierOwner;
    isAllowed=!(method.isConstructor() && ourConstructorNotAllowedModifiers.contains(modifier));
    PsiClass containingClass=method.getContainingClass();
    if ((method.hasModifierProperty(PsiModifier.PUBLIC) || method.hasModifierProperty(PsiModifier.PROTECTED)) && method.isConstructor() && containingClass != null && containingClass.isEnum()) {
      isAllowed=false;
    }
    if (PsiModifier.PRIVATE.equals(modifier) || PsiModifier.PROTECTED.equals(modifier) || PsiModifier.TRANSIENT.equals(modifier)|| PsiModifier.STRICTFP.equals(modifier)|| PsiModifier.SYNCHRONIZED.equals(modifier)) {
      isAllowed&=modifierOwnerParent instanceof PsiClass && !((PsiClass)modifierOwnerParent).isInterface();
    }
  }
 else   if (modifierOwner instanceof PsiField) {
    if (PsiModifier.PRIVATE.equals(modifier) || PsiModifier.PROTECTED.equals(modifier) || PsiModifier.TRANSIENT.equals(modifier)|| PsiModifier.STRICTFP.equals(modifier)|| PsiModifier.SYNCHRONIZED.equals(modifier)) {
      isAllowed=modifierOwnerParent instanceof PsiClass && !((PsiClass)modifierOwnerParent).isInterface();
    }
  }
 else   if (modifierOwner instanceof PsiClassInitializer) {
    isAllowed=PsiModifier.STATIC.equals(modifier);
  }
 else   if (modifierOwner instanceof PsiLocalVariable || modifierOwner instanceof PsiParameter) {
    isAllowed=PsiModifier.FINAL.equals(modifier);
  }
  isAllowed&=incompatibles != null;
  if (!isAllowed) {
    String message=JavaErrorMessages.message("modifier.not.allowed",modifier);
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,keyword,message);
    QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createModifierListFix(modifierList,modifier,false,false));
    return highlightInfo;
  }
  return null;
}
