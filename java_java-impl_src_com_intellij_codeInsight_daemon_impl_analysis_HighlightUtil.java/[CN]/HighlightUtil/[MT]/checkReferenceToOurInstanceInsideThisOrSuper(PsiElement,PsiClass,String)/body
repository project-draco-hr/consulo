{
  if (PsiTreeUtil.getParentOfType(expression,PsiReferenceParameterList.class) != null)   return null;
  PsiElement element=expression.getParent();
  while (element != null) {
    if (isSuperOrThisMethodCall(element)) {
      PsiElement parentClass=new PsiMatcherImpl(element).parent(PsiMatchers.hasClass(PsiExpressionStatement.class)).parent(PsiMatchers.hasClass(PsiCodeBlock.class)).parent(PsiMatchers.hasClass(PsiMethod.class)).dot(PsiMatchers.isConstructor(true)).parent(PsiMatchers.hasClass(PsiClass.class)).getElement();
      if (parentClass == null) {
        return null;
      }
      PsiClass aClass=(PsiClass)parentClass;
      if (PsiUtil.isInnerClass(aClass) && referencedClass == aClass.getContainingClass())       return null;
      if (!InheritanceUtil.isInheritorOrSelf(aClass,referencedClass,true))       return null;
      if (expression instanceof PsiReferenceExpression && !thisOrSuperReference(((PsiReferenceExpression)expression).getQualifierExpression(),aClass)) {
        return null;
      }
      final HighlightInfo highlightInfo=createMemberReferencedError(resolvedName,expression.getTextRange());
      if (expression instanceof PsiReferenceExpression && PsiUtil.isInnerClass(aClass)) {
        final String referenceName=((PsiReferenceExpression)expression).getReferenceName();
        final PsiClass containingClass=aClass.getContainingClass();
        LOG.assertTrue(containingClass != null);
        final PsiField fieldInContainingClass=containingClass.findFieldByName(referenceName,true);
        if (fieldInContainingClass != null && ((PsiReferenceExpression)expression).getQualifierExpression() == null) {
          QuickFixAction.registerQuickFixAction(highlightInfo,new QualifyWithThisFix(containingClass,expression));
        }
      }
      return highlightInfo;
    }
    element=element.getParent();
    if (element instanceof PsiClass && InheritanceUtil.isInheritorOrSelf((PsiClass)element,referencedClass,true))     return null;
  }
  return null;
}
