{
  PsiElement refName=ref.getReferenceNameElement();
  if (!(refName instanceof PsiIdentifier) && !(refName instanceof PsiKeyword))   return null;
  HighlightInfo highlightInfo=checkMemberReferencedBeforeConstructorCalled(ref);
  if (highlightInfo != null)   return highlightInfo;
  PsiElement refParent=ref.getParent();
  if (!(refParent instanceof PsiMethodCallExpression)) {
    if (resolved == null) {
      if (isInsidePackageStatement(refName))       return null;
      if (result.isPackagePrefixPackageReference())       return null;
      JavaResolveResult[] results=ref.multiResolve(true);
      String description;
      if (results.length > 1) {
        String t1=format(results[0].getElement());
        String t2=format(results[1].getElement());
        description=JavaErrorMessages.message("ambiguous.reference",refName.getText(),t1,t2);
      }
 else {
        description=JavaErrorMessages.message("cannot.resolve.symbol",refName.getText());
      }
      HighlightInfoType type=HighlightInfoType.WRONG_REF;
      if (PsiUtil.isInsideJavadocComment(ref))       return null;
      HighlightInfo info=HighlightInfo.createHighlightInfo(type,refName,description);
      QuickFixActionRegistrar registrar=new QuickFixActionRegistrarImpl(info);
      final boolean dumb=DumbService.getInstance(ref.getProject()).isDumb();
      UnresolvedReferenceQuickFixProvider[] fixProviders=Extensions.getExtensions(UnresolvedReferenceQuickFixProvider.EXTENSION_NAME);
      for (      UnresolvedReferenceQuickFixProvider each : fixProviders) {
        if (dumb && !(each instanceof DumbAware)) {
          continue;
        }
        each.registerFixes(ref,registrar);
      }
      return info;
    }
    if (!result.isValidResult() && !PsiUtil.isInsideJavadocComment(ref)) {
      if (!result.isAccessible()) {
        String description=buildProblemWithAccessDescription(ref,result);
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
        if (result.isStaticsScopeCorrect()) {
          registerAccessQuickFixAction((PsiMember)resolved,ref,info,result.getCurrentFileResolveScope());
          if (ref instanceof PsiReferenceExpression) {
            QuickFixAction.registerQuickFixAction(info,new RenameWrongRefFix((PsiReferenceExpression)ref));
          }
        }
        return info;
      }
      if (!result.isStaticsScopeCorrect()) {
        String description=buildProblemWithStaticDescription(resolved);
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_REF,ref.getReferenceNameElement(),description);
        registerStaticProblemQuickFixAction(resolved,info,ref);
        if (ref instanceof PsiReferenceExpression) {
          QuickFixAction.registerQuickFixAction(info,new RenameWrongRefFix((PsiReferenceExpression)ref));
        }
        return info;
      }
    }
    if ((resolved instanceof PsiLocalVariable || resolved instanceof PsiParameter) && !(resolved instanceof ImplicitVariable)) {
      highlightInfo=HighlightControlFlowUtil.checkVariableMustBeFinal((PsiVariable)resolved,ref);
    }
  }
  return highlightInfo;
}
