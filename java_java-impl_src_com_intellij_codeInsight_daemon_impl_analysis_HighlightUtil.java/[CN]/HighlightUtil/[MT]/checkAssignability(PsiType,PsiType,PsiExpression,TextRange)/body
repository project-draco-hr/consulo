{
  if (lType == rType)   return null;
  if (expression == null) {
    if (rType == null || lType == null || TypeConversionUtil.isAssignable(lType,rType))     return null;
  }
 else   if (TypeConversionUtil.areTypesAssignmentCompatible(lType,expression)) {
    return null;
  }
  if (rType == null) {
    rType=expression.getType();
  }
  HighlightInfo highlightInfo=createIncompatibleTypeHighlightInfo(lType,rType,textRange);
  if (rType != null && expression != null && isCastIntentionApplicable(expression,lType)) {
    QuickFixAction.registerQuickFixAction(highlightInfo,new AddTypeCastFix(lType,expression));
  }
  if (expression != null && lType != null) {
    QuickFixAction.registerQuickFixAction(highlightInfo,new WrapExpressionFix(lType,expression));
    AddTypeArgumentsConditionalFix.register(highlightInfo,expression,lType);
  }
  ChangeNewOperatorTypeFix.register(highlightInfo,expression,lType);
  return highlightInfo;
}
