{
  PsiSwitchStatement switchStatement=statement.getEnclosingSwitchStatement();
  if (switchStatement == null) {
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,statement,JavaErrorMessages.message("case.statement.outside.switch"));
  }
  if (switchStatement.getBody() == null)   return null;
  PsiExpression switchExpression=switchStatement.getExpression();
  PsiType switchType=switchExpression == null ? PsiType.INT : switchExpression.getType();
  PsiExpression caseValue=statement.getCaseValue();
  if (caseValue != null && switchExpression != null) {
    HighlightInfo highlightInfo=checkAssignability(switchType,caseValue.getType(),caseValue,caseValue);
    if (highlightInfo != null)     return highlightInfo;
  }
  Object value=null;
  boolean isEnumSwitch=false;
  if (!statement.isDefaultCase() && caseValue != null) {
    if (caseValue instanceof PsiReferenceExpression) {
      PsiElement element=((PsiReferenceExpression)caseValue).resolve();
      if (element instanceof PsiEnumConstant) {
        isEnumSwitch=true;
        value=((PsiEnumConstant)element).getName();
        if (!(((PsiReferenceExpression)caseValue).getQualifier() == null)) {
          String message=JavaErrorMessages.message("qualified.enum.constant.in.switch");
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,caseValue,message);
        }
      }
    }
    if (!isEnumSwitch) {
      value=ConstantExpressionUtil.computeCastTo(caseValue,switchType);
    }
    if (value == null) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,caseValue,JavaErrorMessages.message("constant.expression.required"));
    }
  }
  PsiStatement[] statements=switchStatement.getBody().getStatements();
  for (  PsiStatement st : statements) {
    if (st == statement)     continue;
    if (!(st instanceof PsiSwitchLabelStatement))     continue;
    PsiSwitchLabelStatement labelStatement=(PsiSwitchLabelStatement)st;
    if (labelStatement.isDefaultCase() != statement.isDefaultCase())     continue;
    PsiExpression caseExpr=labelStatement.getCaseValue();
    if (isEnumSwitch && caseExpr instanceof PsiReferenceExpression) {
      PsiElement element=((PsiReferenceExpression)caseExpr).resolve();
      if (!(element instanceof PsiEnumConstant && Comparing.equal(((PsiEnumConstant)element).getName(),value)))       continue;
    }
 else {
      if (!TypeConversionUtil.areTypesAssignmentCompatible(switchType,caseExpr))       continue;
      if (!Comparing.equal(ConstantExpressionUtil.computeCastTo(caseExpr,switchType),value))       continue;
    }
    String description=statement.isDefaultCase() ? JavaErrorMessages.message("duplicate.default.switch.label") : JavaErrorMessages.message("duplicate.switch.label",value);
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,value == null ? statement : caseValue,description);
  }
  PsiElement lastChild=statement.getLastChild();
  while (lastChild instanceof PsiComment || lastChild instanceof PsiWhiteSpace) {
    lastChild=lastChild.getPrevSibling();
  }
  if (!(lastChild instanceof PsiJavaToken && ((PsiJavaToken)lastChild).getTokenType() == JavaTokenType.COLON)) {
    int start=statement.getTextRange().getEndOffset();
    int end=statement.getTextRange().getEndOffset() + 1;
    String description=JavaErrorMessages.message("switch.colon.expected.after.case.label");
    CharSequence chars=statement.getContainingFile().getViewProvider().getContents();
    boolean isAfterEndOfLine=end >= chars.length() || chars.charAt(start) == '\n' || chars.charAt(start) == '\r';
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,null,start,end,description,description,isAfterEndOfLine,null);
  }
  return null;
}
