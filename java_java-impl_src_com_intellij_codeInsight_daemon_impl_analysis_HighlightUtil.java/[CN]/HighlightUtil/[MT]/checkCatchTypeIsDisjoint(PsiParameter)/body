{
  if (!(parameter.getType() instanceof PsiDisjunctionType))   return null;
  final Collection<HighlightInfo> result=Lists.newArrayList();
  final List<PsiTypeElement> typeElements=PsiUtil.getParameterTypeElements(parameter);
  for (int i=0, size=typeElements.size(); i < size; i++) {
    final PsiClass class1=PsiUtil.resolveClassInClassTypeOnly(typeElements.get(i).getType());
    if (class1 == null)     continue;
    for (int j=i + 1; j < size; j++) {
      final PsiClass class2=PsiUtil.resolveClassInClassTypeOnly(typeElements.get(j).getType());
      if (class2 == null)       continue;
      final boolean sub=InheritanceUtil.isInheritorOrSelf(class1,class2,true);
      final boolean sup=InheritanceUtil.isInheritorOrSelf(class2,class1,true);
      if (sub || sup) {
        final String name1=PsiFormatUtil.formatClass(class1,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_FQ_NAME);
        final String name2=PsiFormatUtil.formatClass(class2,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_FQ_NAME);
        final String message=JavaErrorMessages.message("exception.must.be.disjoint",(sub ? name1 : name2),(sub ? name2 : name1));
        result.add(HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,typeElements.get(sub ? i : j),message));
        break;
      }
    }
  }
  return result;
}
