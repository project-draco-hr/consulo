{
  super.visitMethodCallExpression(call);
  final PsiMember member=PsiTreeUtil.getParentOfType(call,PsiMethod.class,PsiClassInitializer.class);
  if (member instanceof PsiClassInitializer) {
    final PsiClassInitializer classInitializer=(PsiClassInitializer)member;
    if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {
      return;
    }
  }
 else   if (member instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)member;
    if (!isObjectConstructionMethod(method)) {
      return;
    }
  }
 else {
    return;
  }
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    if (!(qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression)) {
      return;
    }
  }
  final PsiClass containingClass=member.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (containingClass.hasModifierProperty(PsiModifier.FINAL)) {
    return;
  }
  final PsiMethod calledMethod=(PsiMethod)methodExpression.resolve();
  if (calledMethod == null || !PsiUtil.canBeOverriden(calledMethod)) {
    return;
  }
  final PsiClass calledMethodClass=calledMethod.getContainingClass();
  if (calledMethodClass == null || !calledMethodClass.equals(containingClass)) {
    return;
  }
  registerMethodCallError(call,call);
}
