{
  if (myClass2Properties.containsKey(aClass)) {
    return myClass2Properties.get(aClass);
  }
  final ArrayList<IntrospectedProperty> result=new ArrayList<IntrospectedProperty>();
  try {
    final BeanInfo beanInfo=Introspector.getBeanInfo(aClass);
    final PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();
    for (int i=0; i < descriptors.length; i++) {
      final PropertyDescriptor descriptor=descriptors[i];
      final Method readMethod=descriptor.getReadMethod();
      final Method writeMethod=descriptor.getWriteMethod();
      if (writeMethod == null || readMethod == null) {
        continue;
      }
      final String name=descriptor.getName();
      if (name.equals("preferredSize") || name.equals("minimumSize") || name.equals("maximumSize")) {
        continue;
      }
      final IntrospectedProperty property;
      final Class propertyType=descriptor.getPropertyType();
      if (int.class.equals(propertyType)) {
        if (JSplitPane.class.isAssignableFrom(aClass) && "orientation".equals(name)) {
          final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JSplitPane.HORIZONTAL_SPLIT,UIDesignerBundle.message("property.horizontal")),new IntEnumEditor.Pair(JSplitPane.VERTICAL_SPLIT,UIDesignerBundle.message("property.vertical"))};
          property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
        }
 else         if (JScrollPane.class.isAssignableFrom(aClass)) {
          if ("horizontalScrollBarPolicy".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS,UIDesignerBundle.message("property.always")),new IntEnumEditor.Pair(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED,UIDesignerBundle.message("property.as.needed")),new IntEnumEditor.Pair(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER,UIDesignerBundle.message("property.never"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("verticalScrollBarPolicy".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,UIDesignerBundle.message("property.always")),new IntEnumEditor.Pair(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,UIDesignerBundle.message("property.as.needed")),new IntEnumEditor.Pair(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,UIDesignerBundle.message("property.never"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (JTabbedPane.class.isAssignableFrom(aClass)) {
          if ("tabLayoutPolicy".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JTabbedPane.WRAP_TAB_LAYOUT,UIDesignerBundle.message("property.wrap")),new IntEnumEditor.Pair(JTabbedPane.SCROLL_TAB_LAYOUT,UIDesignerBundle.message("property.scroll"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("tabPlacement".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JTabbedPane.TOP,UIDesignerBundle.message("property.top")),new IntEnumEditor.Pair(JTabbedPane.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(JTabbedPane.BOTTOM,UIDesignerBundle.message("property.bottom")),new IntEnumEditor.Pair(JTabbedPane.RIGHT,UIDesignerBundle.message("property.right"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (JLabel.class.isAssignableFrom(aClass)) {
          if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) {
            continue;
          }
 else           if ("horizontalAlignment".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JLabel.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(JLabel.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(JLabel.RIGHT,UIDesignerBundle.message("property.right")),new IntEnumEditor.Pair(JLabel.LEADING,UIDesignerBundle.message("property.leading")),new IntEnumEditor.Pair(JLabel.TRAILING,UIDesignerBundle.message("property.trailing"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("horizontalTextPosition".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JLabel.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(JLabel.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(JLabel.RIGHT,UIDesignerBundle.message("property.right")),new IntEnumEditor.Pair(JLabel.LEADING,UIDesignerBundle.message("property.leading")),new IntEnumEditor.Pair(JLabel.TRAILING,UIDesignerBundle.message("property.trailing"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("verticalAlignment".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JLabel.TOP,UIDesignerBundle.message("property.top")),new IntEnumEditor.Pair(JLabel.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(JLabel.BOTTOM,UIDesignerBundle.message("property.bottom"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("verticalTextPosition".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JLabel.TOP,UIDesignerBundle.message("property.top")),new IntEnumEditor.Pair(JLabel.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(JLabel.BOTTOM,UIDesignerBundle.message("property.bottom"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (AbstractButton.class.isAssignableFrom(aClass)) {
          if ("mnemonic".equals(name) || "displayedMnemonicIndex".equals(name)) {
            continue;
          }
 else           if ("horizontalAlignment".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(SwingConstants.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(SwingConstants.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(SwingConstants.RIGHT,UIDesignerBundle.message("property.right")),new IntEnumEditor.Pair(SwingConstants.LEADING,UIDesignerBundle.message("property.leading")),new IntEnumEditor.Pair(SwingConstants.TRAILING,UIDesignerBundle.message("property.trailing"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("horizontalTextPosition".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(SwingConstants.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(SwingConstants.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(SwingConstants.RIGHT,UIDesignerBundle.message("property.right")),new IntEnumEditor.Pair(SwingConstants.LEADING,UIDesignerBundle.message("property.leading")),new IntEnumEditor.Pair(SwingConstants.TRAILING,UIDesignerBundle.message("property.trailing"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("verticalAlignment".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(SwingConstants.TOP,UIDesignerBundle.message("property.top")),new IntEnumEditor.Pair(SwingConstants.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(SwingConstants.BOTTOM,UIDesignerBundle.message("property.bottom"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("verticalTextPosition".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(SwingConstants.TOP,UIDesignerBundle.message("property.top")),new IntEnumEditor.Pair(SwingConstants.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(SwingConstants.BOTTOM,UIDesignerBundle.message("property.bottom"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (JTextField.class.isAssignableFrom(aClass) && "horizontalAlignment".equals(name)) {
          final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(SwingConstants.LEFT,UIDesignerBundle.message("property.left")),new IntEnumEditor.Pair(SwingConstants.CENTER,UIDesignerBundle.message("property.center")),new IntEnumEditor.Pair(SwingConstants.RIGHT,UIDesignerBundle.message("property.right")),new IntEnumEditor.Pair(SwingConstants.LEADING,UIDesignerBundle.message("property.leading")),new IntEnumEditor.Pair(SwingConstants.TRAILING,UIDesignerBundle.message("property.trailing"))};
          property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
        }
 else         if (JList.class.isAssignableFrom(aClass)) {
          if ("layoutOrientation".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JList.VERTICAL,UIDesignerBundle.message("property.vertical")),new IntEnumEditor.Pair(JList.HORIZONTAL_WRAP,UIDesignerBundle.message("property.horizontal.wrap")),new IntEnumEditor.Pair(JList.VERTICAL_WRAP,UIDesignerBundle.message("property.vertical.wrap"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else           if ("selectionMode".equals(name)) {
            final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(ListSelectionModel.SINGLE_SELECTION,UIDesignerBundle.message("property.selection.single")),new IntEnumEditor.Pair(ListSelectionModel.SINGLE_INTERVAL_SELECTION,UIDesignerBundle.message("property.selection.single.interval")),new IntEnumEditor.Pair(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION,UIDesignerBundle.message("property.selection.multiple.interval"))};
            property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (JTable.class.isAssignableFrom(aClass) && "autoResizeMode".equals(name)) {
          final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JTable.AUTO_RESIZE_OFF,UIDesignerBundle.message("property.resize.off")),new IntEnumEditor.Pair(JTable.AUTO_RESIZE_NEXT_COLUMN,UIDesignerBundle.message("property.resize.next.column")),new IntEnumEditor.Pair(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS,UIDesignerBundle.message("property.resize.subsequent.columns")),new IntEnumEditor.Pair(JTable.AUTO_RESIZE_LAST_COLUMN,UIDesignerBundle.message("property.resize.last.column")),new IntEnumEditor.Pair(JTable.AUTO_RESIZE_ALL_COLUMNS,UIDesignerBundle.message("property.resize.all.columns"))};
          property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
        }
 else         if (JSlider.class.isAssignableFrom(aClass) && "orientation".equals(name)) {
          final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JSlider.HORIZONTAL,UIDesignerBundle.message("property.horizontal")),new IntEnumEditor.Pair(JSlider.VERTICAL,UIDesignerBundle.message("property.vertical"))};
          property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
        }
 else         if (JFormattedTextField.class.isAssignableFrom(aClass) && "focusLostBehavior".equals(name)) {
          final IntEnumEditor.Pair[] pairs=new IntEnumEditor.Pair[]{new IntEnumEditor.Pair(JFormattedTextField.COMMIT,UIDesignerBundle.message("property.focuslost.commit")),new IntEnumEditor.Pair(JFormattedTextField.COMMIT_OR_REVERT,UIDesignerBundle.message("property.focuslost.commit.or.revert")),new IntEnumEditor.Pair(JFormattedTextField.PERSIST,UIDesignerBundle.message("property.focuslost.persist")),new IntEnumEditor.Pair(JFormattedTextField.REVERT,UIDesignerBundle.message("property.focuslost.revert"))};
          property=createIntEnumProperty(name,readMethod,writeMethod,pairs);
        }
 else {
          property=new IntroIntProperty(name,readMethod,writeMethod);
        }
      }
 else       if (boolean.class.equals(propertyType)) {
        property=new IntroBooleanProperty(name,readMethod,writeMethod);
      }
 else       if (double.class.equals(propertyType)) {
        property=new IntroDoubleProperty(name,readMethod,writeMethod);
      }
 else       if (String.class.equals(propertyType)) {
        property=new IntroStringProperty(name,readMethod,writeMethod,myProject);
      }
 else       if (Insets.class.equals(propertyType)) {
        property=new IntroInsetsProperty(name,readMethod,writeMethod);
      }
 else       if (Dimension.class.equals(propertyType)) {
        property=new IntroDimensionProperty(name,readMethod,writeMethod);
      }
 else       if (Rectangle.class.equals(propertyType)) {
        property=new IntroRectangleProperty(name,readMethod,writeMethod);
      }
 else       if (propertyType.isAssignableFrom(Component.class)) {
        property=new IntroComponentProperty(name,readMethod,writeMethod);
      }
 else       if (Color.class.equals(propertyType)) {
        property=new IntroColorProperty(name,readMethod,writeMethod);
      }
 else       if (Font.class.equals(propertyType)) {
        property=new IntroFontProperty(name,readMethod,writeMethod);
      }
 else       if (Icon.class.equals(propertyType)) {
        property=new IntroIconProperty(name,readMethod,writeMethod);
      }
 else {
        continue;
      }
      result.add(property);
    }
  }
 catch (  IntrospectionException e) {
    throw new RuntimeException(e);
  }
  final IntrospectedProperty[] properties=result.toArray(new IntrospectedProperty[result.size()]);
  myClass2Properties.put(aClass,properties);
  return properties;
}
