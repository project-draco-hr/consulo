{
  if (myClass2Properties.containsKey(aClass)) {
    return myClass2Properties.get(aClass);
  }
  final ArrayList<IntrospectedProperty> result=new ArrayList<IntrospectedProperty>();
  try {
    final BeanInfo beanInfo=Introspector.getBeanInfo(aClass);
    final PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();
    for (int i=0; i < descriptors.length; i++) {
      final PropertyDescriptor descriptor=descriptors[i];
      final Method readMethod=descriptor.getReadMethod();
      final Method writeMethod=descriptor.getWriteMethod();
      if (writeMethod == null || readMethod == null) {
        continue;
      }
      final String name=descriptor.getName();
      if (name.equals("preferredSize") || name.equals("minimumSize") || name.equals("maximumSize")) {
        continue;
      }
      final IntrospectedProperty property;
      final Class propertyType=descriptor.getPropertyType();
      final Properties properties=Properties.getInstance();
      if (int.class.equals(propertyType)) {
        IntEnumEditor.Pair[] enumPairs=properties.getEnumPairs(aClass,name);
        if (enumPairs != null) {
          property=createIntEnumProperty(name,readMethod,writeMethod,enumPairs);
        }
 else         if (JLabel.class.isAssignableFrom(aClass)) {
          if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) {
            continue;
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else         if (AbstractButton.class.isAssignableFrom(aClass)) {
          if ("mnemonic".equals(name) || "displayedMnemonicIndex".equals(name)) {
            continue;
          }
 else {
            property=new IntroIntProperty(name,readMethod,writeMethod);
          }
        }
 else {
          property=new IntroIntProperty(name,readMethod,writeMethod);
        }
      }
 else       if (boolean.class.equals(propertyType)) {
        property=new IntroBooleanProperty(name,readMethod,writeMethod);
      }
 else       if (double.class.equals(propertyType)) {
        property=new IntroDoubleProperty(name,readMethod,writeMethod);
      }
 else       if (String.class.equals(propertyType)) {
        property=new IntroStringProperty(name,readMethod,writeMethod,myProject);
      }
 else       if (Insets.class.equals(propertyType)) {
        property=new IntroInsetsProperty(name,readMethod,writeMethod);
      }
 else       if (Dimension.class.equals(propertyType)) {
        property=new IntroDimensionProperty(name,readMethod,writeMethod);
      }
 else       if (Rectangle.class.equals(propertyType)) {
        property=new IntroRectangleProperty(name,readMethod,writeMethod);
      }
 else       if (propertyType.isAssignableFrom(Component.class)) {
        property=new IntroComponentProperty(name,readMethod,writeMethod);
      }
 else       if (Color.class.equals(propertyType)) {
        property=new IntroColorProperty(name,readMethod,writeMethod);
      }
 else       if (Font.class.equals(propertyType)) {
        property=new IntroFontProperty(name,readMethod,writeMethod);
      }
 else       if (Icon.class.equals(propertyType)) {
        property=new IntroIconProperty(name,readMethod,writeMethod);
      }
 else {
        continue;
      }
      result.add(property);
    }
  }
 catch (  IntrospectionException e) {
    throw new RuntimeException(e);
  }
  final IntrospectedProperty[] properties=result.toArray(new IntrospectedProperty[result.size()]);
  myClass2Properties.put(aClass,properties);
  return properties;
}
