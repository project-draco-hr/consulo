{
  PsiManager manager=PsiManager.getInstance(myProject);
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final PsiMethod element=getNewElement();
  String name=element.getName();
  if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(name)) {
    return RefactoringMessageUtil.getIncorrectIdentifierMessage(name);
  }
  ParameterInfoImpl[] parameterInfos=getParameters(element);
  final int newParametersNumber=parameterInfos.length;
  for (int i=0; i < newParametersNumber; i++) {
    ParameterInfoImpl item=parameterInfos[i];
    if (!JavaPsiFacade.getInstance(manager.getProject()).getNameHelper().isIdentifier(item.getName())) {
      return RefactoringMessageUtil.getIncorrectIdentifierMessage(item.getName());
    }
    final PsiType type=element.getParameterList().getParameters()[i].getType();
    item.setType(type);
    if (type instanceof PsiEllipsisType && i != newParametersNumber - 1) {
      return RefactoringBundle.message("changeSignature.vararg.not.last");
    }
    if (item.oldParameterIndex < 0) {
      item.defaultValue=PsiTypesUtil.getDefaultValueOfType(type);
      String def=item.defaultValue;
      def=def.trim();
      if (!(type instanceof PsiEllipsisType)) {
        if (def.length() == 0) {
          return RefactoringBundle.message("changeSignature.no.default.value",item.getName());
        }
        try {
          factory.createExpressionFromText(def,null);
        }
 catch (        IncorrectOperationException e) {
          return e.getMessage();
        }
      }
    }
  }
  ThrownExceptionInfo[] exceptionInfos=myExceptionsTableModel.getThrownExceptions();
  PsiTypeCodeFragment[] typeCodeFragments=myExceptionsTableModel.getTypeCodeFragments();
  for (int i=0; i < exceptionInfos.length; i++) {
    ThrownExceptionInfo exceptionInfo=exceptionInfos[i];
    PsiTypeCodeFragment typeCodeFragment=typeCodeFragments[i];
    try {
      PsiType type=typeCodeFragment.getType();
      if (!(type instanceof PsiClassType)) {
        return RefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText());
      }
      PsiClassType throwable=JavaPsiFacade.getInstance(myProject).getElementFactory().createTypeByFQClassName("java.lang.Throwable",type.getResolveScope());
      if (!throwable.isAssignableFrom(type)) {
        return RefactoringBundle.message("changeSignature.not.throwable.type",typeCodeFragment.getText());
      }
      exceptionInfo.setType((PsiClassType)type);
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      return RefactoringBundle.message("changeSignature.wrong.type.for.exception",typeCodeFragment.getText());
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      return RefactoringBundle.message("changeSignature.no.type.for.exception");
    }
  }
  return null;
}
