{
  final Map<VirtualFile,VcsLogProvider> logProviders=findLogProviders(roots);
  Consumer<VisiblePack> visiblePackConsumer=new Consumer<VisiblePack>(){
    @Override public void consume(    final VisiblePack pack){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!Disposer.isDisposed(myUi)) {
            myUi.setVisiblePack(pack);
          }
        }
      }
);
    }
  }
;
  final VcsLogDataHolder logDataHolder=new VcsLogDataHolder(myProject,this,logProviders,mySettings,myUiProperties,visiblePackConsumer);
  myUi=new VcsLogUiImpl(logDataHolder,myProject,mySettings,new VcsLogColorManagerImpl(logProviders.keySet()),myUiProperties,logDataHolder.getFilterer());
  myUi.addLogListener(logDataHolder.getContainingBranchesGetter());
  if (contentTabName != null) {
    myLogRefresher=new PostponeableLogRefresher(myProject,logDataHolder,contentTabName);
  }
 else {
    myLogRefresher=new VcsLogRefresher(){
      @Override public void refresh(      @NotNull VirtualFile root){
        logDataHolder.refresh(Collections.singletonList(root));
      }
    }
;
  }
  refreshLogOnVcsEvents(logProviders);
  logDataHolder.initialize();
  final VcsLogGraphTable graphTable=myUi.getTable();
  if (graphTable.getRowCount() > 0) {
    IdeFocusManager.getInstance(myProject).requestFocus(graphTable,true).doWhenProcessed(new Runnable(){
      @Override public void run(){
        graphTable.setRowSelectionInterval(0,0);
      }
    }
);
  }
  return myUi.getMainFrame().getMainComponent();
}
