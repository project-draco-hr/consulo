{
  final Module[] modules=ModuleManager.getInstance(myProject).getModules();
  Module candidateModule=null;
  int maxUrlLength=0;
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  for (int idx=0; idx < modules.length; idx++) {
    final Module module=modules[idx];
    final String[] contentRootUrls=ModuleRootManager.getInstance(module).getContentRootUrls();
    for (int i=0; i < contentRootUrls.length; i++) {
      final String contentRootUrl=contentRootUrls[i];
      if (contentRootUrl.length() < maxUrlLength) {
        continue;
      }
      if (!CompilerUtil.startsWith(url,contentRootUrl + "/")) {
        continue;
      }
      if (contentRootUrl.length() == maxUrlLength) {
        if (candidateModule == null) {
          candidateModule=module;
        }
 else {
          if (!candidateModule.equals(module)) {
            candidateModule=ApplicationManager.getApplication().runReadAction(new Computable<Module>(){
              public Module compute(){
                final VirtualFile contentRootFile=VirtualFileManager.getInstance().findFileByUrl(contentRootUrl);
                if (contentRootFile != null) {
                  return projectFileIndex.getModuleForFile(contentRootFile);
                }
                return null;
              }
            }
);
          }
        }
      }
 else {
        maxUrlLength=contentRootUrl.length();
        candidateModule=module;
      }
    }
  }
  if (candidateModule != null && myScopeModules.contains(candidateModule)) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(candidateModule);
    final String[] excludeRootUrls=moduleRootManager.getExcludeRootUrls();
    for (int i=0; i < excludeRootUrls.length; i++) {
      if (CompilerUtil.startsWith(url,excludeRootUrls[i] + "/")) {
        return false;
      }
    }
    final String[] sourceRootUrls=moduleRootManager.getSourceRootUrls();
    for (int i=0; i < sourceRootUrls.length; i++) {
      if (CompilerUtil.startsWith(url,sourceRootUrls[i] + "/")) {
        return true;
      }
    }
  }
  return false;
}
