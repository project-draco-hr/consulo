{
  final Consumer<BeforeAfter<List<String>>> stepConsumer=new Consumer<BeforeAfter<List<String>>>(){
    @Override public void consume(    BeforeAfter<List<String>> listBeforeAfter){
      if (myDistance == 0) {
        if (listBeforeAfter.getBefore().isEmpty()) {
          return;
        }
        final FragmentMatcher fragmentMatcher=new FragmentMatcher(myIdx,listBeforeAfter);
        final Pair<Integer,Boolean> pair=fragmentMatcher.find(true);
        myDistance=pair.getFirst();
        if (myDistance == 0) {
          myIdx+=pair.getSecond() ? listBeforeAfter.getBefore().size() : listBeforeAfter.getAfter().size();
        }
 else {
          myIdx+=(pair.getSecond() ? listBeforeAfter.getBefore().size() : listBeforeAfter.getAfter().size()) - pair.getFirst();
        }
        myUsesAlreadyApplied=!pair.getSecond();
      }
 else {
        myDistance+=listBeforeAfter.getBefore().size();
      }
    }
  }
;
  if (myForward) {
    for (    BeforeAfter<List<String>> step : steps) {
      stepConsumer.consume(step);
    }
  }
 else {
    for (int i=steps.size() - 1; i >= 0; i--) {
      BeforeAfter<List<String>> step=steps.get(i);
      stepConsumer.consume(step);
    }
  }
}
