{
  final SplitHunk copy=new SplitHunk(hunk.getStartLineBefore(),new ArrayList<BeforeAfter<List<String>>>(hunk.getPatchSteps()),new ArrayList<String>(),new ArrayList<String>());
  final List<BeforeAfter<List<String>>> steps=copy.getPatchSteps();
  final BeforeAfter<List<String>> first=steps.get(0);
  final BeforeAfter<List<String>> last=steps.get(steps.size() - 1);
  final BeforeAfter<List<String>> firstCopy=copyBeforeAfter(first);
  steps.set(0,firstCopy);
  firstCopy.getBefore().addAll(0,hunk.getContextBefore());
  firstCopy.getAfter().addAll(0,hunk.getContextBefore());
  if (first == last) {
    firstCopy.getBefore().addAll(hunk.getContextAfter());
    firstCopy.getAfter().addAll(hunk.getContextAfter());
  }
 else {
    final BeforeAfter<List<String>> lastCopy=copyBeforeAfter(last);
    lastCopy.getBefore().addAll(hunk.getContextAfter());
    lastCopy.getAfter().addAll(hunk.getContextAfter());
  }
  return copy;
}
