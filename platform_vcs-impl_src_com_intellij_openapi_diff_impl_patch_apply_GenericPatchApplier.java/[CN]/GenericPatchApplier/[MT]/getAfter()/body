{
  final StringBuilder sb=new StringBuilder();
  for (  SplitHunk hunk : myNotExact) {
    linesToSb(sb,hunk.getAfterAll());
  }
  iterateTransformations(new Consumer<TextRange>(){
    @Override public void consume(    TextRange range){
      linesToSb(sb,myLines.subList(range.getStartOffset(),range.getEndOffset() + 1));
    }
  }
,new Consumer<TextRange>(){
    @Override public void consume(    TextRange range){
      final MyAppliedData appliedData=myTransformations.get(range);
      if (appliedData.isInsertAfter()) {
        if (sb.length() > 0) {
          sb.append('\n');
        }
        sb.append(myLines.get(range.getStartOffset()));
      }
      linesToSb(sb,appliedData.getList());
    }
  }
);
  if (!mySuppressNewLineInEnd) {
    sb.append('\n');
  }
  return sb.toString();
}
