{
  PsiJavaCodeReferenceElementImpl referenceElement=(PsiJavaCodeReferenceElementImpl)ref;
  int kind=referenceElement.getKind();
  JavaResolveResult[] result=referenceElement.resolve(kind);
  if (incompleteCode && result.length == 0 && kind != CLASS_FQ_NAME_KIND && kind != CLASS_FQ_OR_PACKAGE_NAME_KIND) {
    VariableResolverProcessor processor=new VariableResolverProcessor(referenceElement);
    PsiScopesUtil.resolveAndWalk(processor,referenceElement,null,incompleteCode);
    result=processor.getResult();
    if (result.length == 0 && kind == CLASS_NAME_KIND) {
      result=referenceElement.resolve(PACKAGE_NAME_KIND);
    }
  }
  if (result.length > 0 && result[0].getElement() instanceof PsiClass) {
    PsiType[] parameters=((PsiJavaCodeReferenceElement)ref).getTypeParameters();
    for (int i=0; i < result.length; i++) {
      CandidateInfo resolveResult=(CandidateInfo)result[i];
      PsiElement resultElement=resolveResult.getElement();
      if (resultElement instanceof PsiClass && ((PsiClass)resultElement).hasTypeParameters()) {
        result[i]=new CandidateInfo(resolveResult,resolveResult.getSubstitutor().putAll((PsiClass)resultElement,parameters));
      }
    }
  }
  return result;
}
