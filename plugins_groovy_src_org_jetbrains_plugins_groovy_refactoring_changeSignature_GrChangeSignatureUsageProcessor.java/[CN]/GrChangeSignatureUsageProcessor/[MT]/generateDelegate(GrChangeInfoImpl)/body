{
  final GrMethod method=grInfo.getMethod();
  final PsiClass psiClass=method.getContainingClass();
  GrMethod newMethod=(GrMethod)method.copy();
  newMethod=(GrMethod)psiClass.addAfter(newMethod,method);
  StringBuilder buffer=new StringBuilder();
  buffer.append("\n");
  if (method.isConstructor()) {
    buffer.append("this");
  }
 else {
    if (!PsiType.VOID.equals(method.getReturnType())) {
      buffer.append("return ");
    }
    buffer.append(GrChangeSignatureUtil.getNameWithQuotesIfNeeded(grInfo.getNewName(),method.getProject()));
  }
  generateParametersForDelegateCall(grInfo,method,buffer);
  final GrCodeBlock codeBlock=GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString());
  newMethod.setBlock(codeBlock);
  newMethod.getModifierList().setModifierProperty(PsiModifier.ABSTRACT,false);
  CodeStyleManager.getInstance(method.getProject()).reformat(newMethod);
  return processPrimaryMethodInner(grInfo,method,null);
}
