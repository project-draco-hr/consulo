{
  final GrMethod method=grInfo.getMethod();
  final PsiClass psiClass=method.getContainingClass();
  GrMethod newMethod=(GrMethod)method.copy();
  newMethod=(GrMethod)psiClass.addAfter(newMethod,method);
  StringBuffer buffer=new StringBuffer();
  buffer.append("\n");
  if (!PsiType.VOID.equals(method.getReturnType())) {
    buffer.append("return ");
  }
  buffer.append(method.getName()).append("(");
  final GrParameter[] oldParameters=method.getParameterList().getParameters();
  final JavaParameterInfo[] parameters=grInfo.getNewParameters();
  String[] params=new String[parameters.length];
  for (int i=0; i < parameters.length; i++) {
    JavaParameterInfo parameter=parameters[i];
    final int oldIndex=parameter.getOldIndex();
    if (oldIndex >= 0) {
      params[i]=oldParameters[oldIndex].getName();
    }
 else {
      params[i]=parameter.getDefaultValue();
    }
  }
  buffer.append(StringUtil.join(params,","));
  buffer.append(");");
  final GrCodeBlock codeBlock=GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString());
  newMethod.setBlock(codeBlock);
  CodeStyleManager.getInstance(method.getProject()).reformat(newMethod);
  return processPrimaryMethodInner(grInfo,method,null);
}
