{
  final Module module=facet.getModule();
  final BuildconfigAutogenerationItem item=ApplicationManager.getApplication().runReadAction(new Computable<BuildconfigAutogenerationItem>(){
    @Nullable @Override public BuildconfigAutogenerationItem compute(){
      if (module.isDisposed() || module.getProject().isDisposed()) {
        return null;
      }
      final String sourceRootPath=AndroidRootUtil.getBuildconfigGenSourceRootPath(facet);
      if (sourceRootPath == null) {
        return null;
      }
      final VirtualFile manifestFile=AndroidRootUtil.getManifestFileForCompiler(facet);
      if (manifestFile == null) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.manifest.not.found",module.getName()),null,-1,-1);
        return null;
      }
      final Manifest manifest=AndroidUtils.loadDomElement(module,manifestFile,Manifest.class);
      if (manifest == null) {
        context.addMessage(CompilerMessageCategory.ERROR,"Cannot parse file",manifestFile.getUrl(),-1,-1);
        return null;
      }
      String packageName=manifest.getPackage().getValue();
      if (packageName != null) {
        packageName=packageName.trim();
      }
      if (packageName == null || packageName.length() <= 0) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("package.not.found.error"),manifestFile.getUrl(),-1,-1);
        return null;
      }
      if (!AndroidUtils.isValidPackageName(packageName)) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("not.valid.package.name.error",packageName),manifestFile.getUrl(),-1,-1);
        return null;
      }
      return new BuildconfigAutogenerationItem(packageName,FileUtil.toSystemDependentName(sourceRootPath));
    }
  }
);
  if (item == null) {
    return;
  }
  final boolean debug=true;
  final BuildConfigGenerator generator=new BuildConfigGenerator(item.mySourceRootOsPath,item.myPackage,debug);
  try {
    try {
      generator.generate();
    }
 catch (    RuntimeException e) {
      LOG.debug(e);
      return;
    }
    final VirtualFile genSourceRoot=LocalFileSystem.getInstance().findFileByPath(item.mySourceRootOsPath);
    if (genSourceRoot != null) {
      genSourceRoot.refresh(false,true);
    }
    facet.clearAutogeneratedFiles(AndroidAutogeneratorMode.BUILDCONFIG);
    final VirtualFile genFile=LocalFileSystem.getInstance().findFileByPath(item.mySourceRootOsPath + '/' + item.myPackage.replace('.','/')+ '/'+ BuildConfigGenerator.BUILD_CONFIG_NAME);
    if (genFile != null && genFile.exists()) {
      facet.markFileAutogenerated(AndroidAutogeneratorMode.BUILDCONFIG,genFile);
    }
  }
 catch (  final IOException e) {
    LOG.info(e);
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        if (module.getProject().isDisposed())         return;
        context.addMessage(CompilerMessageCategory.ERROR,"I/O error: " + e.getMessage(),null,-1,-1);
      }
    }
);
  }
}
