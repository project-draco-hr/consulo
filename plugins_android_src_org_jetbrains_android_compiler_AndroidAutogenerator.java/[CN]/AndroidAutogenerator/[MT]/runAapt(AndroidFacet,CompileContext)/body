{
  final Module module=facet.getModule();
  final AptAutogenerationItem item=ApplicationManager.getApplication().runReadAction(new Computable<AptAutogenerationItem>(){
    @Nullable @Override public AptAutogenerationItem compute(){
      if (module.isDisposed() || module.getProject().isDisposed()) {
        return null;
      }
      final AndroidPlatform platform=facet.getConfiguration().getAndroidPlatform();
      if (platform == null) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.specify.platform",module.getName()),null,-1,-1);
        return null;
      }
      final IAndroidTarget target=platform.getTarget();
      final int platformToolsRevision=platform.getSdk().getPlatformToolsRevision();
      final String[] resPaths=AndroidCompileUtil.collectResourceDirs(facet,false,context);
      if (resPaths.length == 0) {
        return null;
      }
      final VirtualFile manifestFile=AndroidRootUtil.getManifestFileForCompiler(facet);
      if (manifestFile == null) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.manifest.not.found"),null,-1,-1);
        return null;
      }
      final Manifest manifest=AndroidUtils.loadDomElement(module,manifestFile,Manifest.class);
      if (manifest == null) {
        context.addMessage(CompilerMessageCategory.ERROR,"Cannot parse file",manifestFile.getUrl(),-1,-1);
        return null;
      }
      String packageName=manifest.getPackage().getValue();
      if (packageName != null) {
        packageName=packageName.trim();
      }
      if (packageName == null || packageName.length() <= 0) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("package.not.found.error"),manifestFile.getUrl(),-1,-1);
        return null;
      }
      final String sourceRootPath=facet.getAptGenSourceRootPath();
      if (sourceRootPath == null) {
        context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.apt.gen.not.specified",module.getName()),null,-1,-1);
        return null;
      }
      final String[] libPackages=getLibPackages(module,packageName);
      final Map<String,String> genFilePath2Package=new HashMap<String,String>();
      final String packageDir=sourceRootPath + '/' + packageName.replace('.','/')+ '/';
      genFilePath2Package.put(packageDir + AndroidCommonUtils.MANIFEST_JAVA_FILE_NAME,packageName);
      genFilePath2Package.put(packageDir + AndroidCommonUtils.R_JAVA_FILENAME,packageName);
      for (      String libPackage : libPackages) {
        final String libPackageDir=sourceRootPath + '/' + libPackage.replace('.','/')+ '/';
        genFilePath2Package.put(libPackageDir + AndroidCommonUtils.MANIFEST_JAVA_FILE_NAME,packageName);
        genFilePath2Package.put(libPackageDir + AndroidCommonUtils.R_JAVA_FILENAME,packageName);
      }
      final String manifestFileOsPath=FileUtil.toSystemDependentName(manifestFile.getPath());
      return new AptAutogenerationItem(target,platformToolsRevision,manifestFileOsPath,packageName,sourceRootPath,resPaths,libPackages,facet.getConfiguration().LIBRARY_PROJECT,genFilePath2Package);
    }
  }
);
  if (item == null) {
    return;
  }
  final Set<VirtualFile> filesToCheck=new HashSet<VirtualFile>();
  for (  String genFilePath : item.myGenFile2package.keySet()) {
    if (new File(genFilePath).exists()) {
      final VirtualFile genFile=LocalFileSystem.getInstance().findFileByPath(genFilePath);
      if (genFile != null) {
        filesToCheck.add(genFile);
      }
    }
  }
  if (!ensureFilesWritable(module.getProject(),filesToCheck)) {
    return;
  }
  try {
    final Map<CompilerMessageCategory,List<String>> messages=AndroidCompileUtil.toCompilerMessageCategoryKeys(AndroidApt.compile(item.myTarget,item.myPlatformToolsRevision,item.myManifestFileOsPath,item.myPackage,item.myOutputDirOsPath,item.myResDirOsPaths,item.myLibPackages,item.myLibrary));
    AndroidCompileUtil.addMessages(context,messages);
    for (    Map.Entry<String,String> entry : item.myGenFile2package.entrySet()) {
      final String path=entry.getKey();
      final String aPackage=entry.getValue();
      removeDuplicateClasses(module,aPackage,new File(path),item.myOutputDirOsPath);
    }
    final VirtualFile genSourceRoot=LocalFileSystem.getInstance().findFileByPath(item.myOutputDirOsPath);
    if (genSourceRoot != null) {
      genSourceRoot.refresh(false,true);
    }
  }
 catch (  final IOException e) {
    LOG.info(e);
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        if (module.getProject().isDisposed())         return;
        context.addMessage(CompilerMessageCategory.ERROR,"I/O error: " + e.getMessage(),null,-1,-1);
      }
    }
);
  }
}
