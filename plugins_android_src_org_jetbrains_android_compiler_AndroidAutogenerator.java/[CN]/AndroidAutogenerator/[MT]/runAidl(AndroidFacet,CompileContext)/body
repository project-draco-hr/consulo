{
  final Module module=facet.getModule();
  final ModuleCompileScope moduleCompileScope=new ModuleCompileScope(module,false);
  final VirtualFile[] files=moduleCompileScope.getFiles(AndroidIdlFileType.ourFileType,true);
  final List<IdlAutogenerationItem> items=new ArrayList<IdlAutogenerationItem>();
  for (  final VirtualFile file : files) {
    final IdlAutogenerationItem item=ApplicationManager.getApplication().runReadAction(new Computable<IdlAutogenerationItem>(){
      @Nullable @Override public IdlAutogenerationItem compute(){
        if (module.isDisposed() || module.getProject().isDisposed()) {
          return null;
        }
        final IAndroidTarget target=facet.getConfiguration().getAndroidTarget();
        if (target == null) {
          context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.specify.platform",module.getName()),null,-1,-1);
          return null;
        }
        final String packageName=AndroidUtils.getPackageName(module,file);
        if (packageName == null) {
          context.addMessage(CompilerMessageCategory.ERROR,"Cannot compute package for file",file.getUrl(),-1,-1);
          return null;
        }
        final String sourceRootPath=facet.getAidlGenSourceRootPath();
        if (sourceRootPath == null) {
          context.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.apt.gen.not.specified",module.getName()),null,-1,-1);
          return null;
        }
        final VirtualFile[] sourceRoots=AndroidPackagingCompiler.getSourceRootsForModuleAndDependencies(module,false);
        final String[] sourceRootOsPaths=AndroidCompileUtil.toOsPaths(sourceRoots);
        final String outFileOsPath=FileUtil.toSystemDependentName(sourceRootPath + '/' + packageName.replace('.','/')+ '/'+ file.getNameWithoutExtension()+ ".java");
        return new IdlAutogenerationItem(file,target,outFileOsPath,sourceRootOsPaths,sourceRootPath,packageName);
      }
    }
);
    if (item != null) {
      items.add(item);
    }
  }
  final Set<VirtualFile> filesToCheck=new HashSet<VirtualFile>();
  for (  IdlAutogenerationItem item : items) {
    if (new File(FileUtil.toSystemDependentName(item.myFile.getPath())).exists()) {
      filesToCheck.add(item.myFile);
    }
  }
  if (!ensureFilesWritable(module.getProject(),filesToCheck)) {
    return;
  }
  facet.clearAutogeneratedFiles(AndroidAutogeneratorMode.AIDL);
  for (  IdlAutogenerationItem item : items) {
    final VirtualFile file=item.myFile;
    final String fileOsPath=FileUtil.toSystemDependentName(file.getPath());
    try {
      final Map<CompilerMessageCategory,List<String>> messages=AndroidCompileUtil.toCompilerMessageCategoryKeys(AndroidIdl.execute(item.myTarget,fileOsPath,item.myOutFileOsPath,item.mySourceRootOsPaths));
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (module.getProject().isDisposed())           return;
          for (          CompilerMessageCategory category : messages.keySet()) {
            List<String> messageList=messages.get(category);
            for (            String message : messageList) {
              context.addMessage(category,message,file.getUrl(),-1,-1);
            }
          }
        }
      }
);
      removeDuplicateClasses(module,item.myPackage,new File(item.myOutFileOsPath),item.myOutDirOsPath);
      final VirtualFile genDir=LocalFileSystem.getInstance().findFileByPath(item.myOutDirOsPath);
      if (genDir != null) {
        genDir.refresh(false,true);
      }
      final VirtualFile outFile=LocalFileSystem.getInstance().findFileByPath(item.myOutFileOsPath);
      if (outFile != null && outFile.exists()) {
        facet.markFileAutogenerated(AndroidAutogeneratorMode.AIDL,outFile);
      }
    }
 catch (    final IOException e) {
      LOG.info(e);
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (module.getProject().isDisposed())           return;
          context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),file.getUrl(),-1,-1);
        }
      }
);
    }
  }
}
