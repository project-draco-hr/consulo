{
  if (myMergeData != null)   return;
  final List<String> revisions=getRevisions(file);
  final String lastRevision=CvsUtil.getEntryFor(file).getRevision();
  if (revisions.size() == 1) {
    final String original=revisions.get(0);
    myMergeData=new MergeInfo(true,original,original,lastRevision,file,myProject);
    return;
  }
  Collection<String> candidates=new LinkedHashSet<String>();
  final String original=revisions.get(0);
  if (CvsUtil.storedVersionExists(original,file)) {
    candidates.add(original + "#");
  }
  candidates.add(original);
  candidates.addAll(revisions);
  candidates.add(lastRevision);
  LOG.assertTrue(candidates.size() >= 2);
  final ArrayList<String> candidatesList=new ArrayList<String>(candidates);
  if (candidatesList.size() == 2) {
    myMergeData=new MergeInfo(true,original,candidatesList.get(1),lastRevision,file,myProject);
    return;
  }
  final String originalCandidate=candidatesList.get(0);
  String resultRevision=originalCandidate;
  boolean useStored=false;
  if (originalCandidate.endsWith("#")) {
    useStored=true;
    resultRevision=resultRevision.substring(0,resultRevision.length() - 1);
  }
  if (candidates.size() == 3) {
    myMergeData=new MergeInfo(useStored,resultRevision,candidatesList.get(2),candidatesList.get(1),file,myProject);
  }
 else {
    if (useStored) {
      candidatesList.remove(0);
    }
    myMergeData=parseConflictsInFile(file);
  }
}
