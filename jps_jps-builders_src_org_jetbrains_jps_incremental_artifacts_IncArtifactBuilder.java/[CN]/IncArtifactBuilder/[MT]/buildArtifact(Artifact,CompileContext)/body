{
  final BuildDataManager dataManager=context.getDataManager();
  try {
    final ArtifactSourceFilesState state=dataManager.getArtifactsBuildData().getOrCreateState(artifact,context.getProject(),context.getRootsIndex());
    state.initState();
    final Set<String> deletedFiles=state.getDeletedFiles();
    final Set<String> changedFiles=state.getChangedFiles();
    if (deletedFiles.isEmpty() && changedFiles.isEmpty()) {
      return;
    }
    context.processMessage(new ProgressMessage("Building artifact '" + artifact.getName() + "'..."));
    final ArtifactSourceToOutputMapping mapping=state.getOrCreateMapping();
    final Set<String> deletedJars=deleteOutdatedFiles(deletedFiles,context,mapping);
    final ArtifactInstructionsBuilder instructions=state.getOrCreateInstructions();
    final Set<JarInfo> changedJars=new THashSet<JarInfo>();
    for (    String deletedJar : deletedJars) {
      ContainerUtil.addIfNotNull(instructions.getJarInfo(deletedJar),changedJars);
    }
    Map<String,String[]> updatedMappings=new HashMap<String,String[]>();
    for (    final String filePath : changedFiles) {
      final List<String> outputs=new SmartList<String>();
      instructions.processContainingRoots(filePath,new ArtifactRootProcessor(){
        @Override public void process(        ArtifactSourceRoot root,        Collection<DestinationInfo> destinations) throws IOException {
          for (          DestinationInfo destination : destinations) {
            if (destination instanceof ExplodedDestinationInfo) {
              context.getLoggingManager().getArtifactBuilderLogger().fileCopied(filePath);
              root.copyFromRoot(filePath,destination.getOutputPath(),outputs);
            }
 else {
              outputs.add(destination.getOutputFilePath() + JarPathUtil.JAR_SEPARATOR);
              changedJars.add(((JarDestinationInfo)destination).getJarInfo());
            }
          }
        }
      }
);
      updatedMappings.put(filePath,ArrayUtil.toStringArray(outputs));
    }
    JarsBuilder builder=new JarsBuilder(changedJars,null,context);
    final boolean processed=builder.buildJars(new THashSet<String>());
    if (!processed) {
      return;
    }
    state.updateTimestamps();
    for (    String filePath : deletedFiles) {
      mapping.remove(filePath);
    }
    for (    Map.Entry<String,String[]> entry : updatedMappings.entrySet()) {
      mapping.update(entry.getKey(),entry.getValue());
    }
    state.markUpToDate();
    context.processMessage(UptoDateFilesSavedEvent.INSTANCE);
  }
 catch (  IOException e) {
    throw new ProjectBuildException(e);
  }
}
