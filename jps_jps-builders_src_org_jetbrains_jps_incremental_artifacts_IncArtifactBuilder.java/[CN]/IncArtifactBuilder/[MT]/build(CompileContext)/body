{
  Set<Artifact> affected=new HashSet<Artifact>();
  for (  Artifact artifact : context.getProjectDescriptor().project.getArtifacts().values()) {
    if (context.getScope().isAffected(artifact)) {
      affected.add(artifact);
    }
  }
  final Set<Artifact> toBuild=ArtifactSorter.addIncludedArtifacts(affected,context.getProjectDescriptor().project);
  Map<String,Artifact> artifactsMap=new HashMap<String,Artifact>();
  for (  Artifact artifact : toBuild) {
    artifactsMap.put(artifact.getName(),artifact);
  }
  final ArtifactSorter sorter=new ArtifactSorter(context.getProjectDescriptor().project);
  final Map<String,String> selfIncludingNameMap=sorter.getArtifactToSelfIncludingNameMap();
  for (  String artifactName : sorter.getArtifactsSortedByInclusion()) {
    context.checkCanceled();
    final Artifact artifact=artifactsMap.get(artifactName);
    if (artifact != null) {
      final String selfIncluding=selfIncludingNameMap.get(artifactName);
      if (selfIncluding != null) {
        String name=selfIncluding.equals(artifact.getName()) ? "it" : "'" + selfIncluding + "' artifact";
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot build '" + artifactName + "' artifact: "+ name+ " includes itself in the output layout"));
        break;
      }
      if (StringUtil.isEmpty(artifact.getOutputPath())) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot build '" + artifactName + "' artifact: output path is not specified"));
        break;
      }
      buildArtifact(artifact,context);
    }
  }
}
