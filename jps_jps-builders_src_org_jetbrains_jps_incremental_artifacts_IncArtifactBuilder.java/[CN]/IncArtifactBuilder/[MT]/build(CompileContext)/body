{
  Set<JpsArtifact> affected=new HashSet<JpsArtifact>();
  JpsBuilderArtifactService artifactService=JpsBuilderArtifactService.getInstance();
  JpsModel model=context.getProjectDescriptor().jpsModel;
  for (  JpsArtifact artifact : artifactService.getArtifacts(model,false)) {
    if (context.getScope().isAffected(artifact)) {
      affected.add(artifact);
    }
  }
  affected.addAll(artifactService.getSyntheticArtifacts(model));
  final Set<JpsArtifact> toBuild=ArtifactSorter.addIncludedArtifacts(affected);
  final ArtifactSorter sorter=new ArtifactSorter(model);
  final Map<JpsArtifact,JpsArtifact> selfIncludingNameMap=sorter.getArtifactToSelfIncludingNameMap();
  for (  JpsArtifact artifact : sorter.getArtifactsSortedByInclusion()) {
    context.checkCanceled();
    if (toBuild.contains(artifact)) {
      final JpsArtifact selfIncluding=selfIncludingNameMap.get(artifact);
      if (selfIncluding != null) {
        String name=selfIncluding.equals(artifact) ? "it" : "'" + selfIncluding.getName() + "' artifact";
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot build '" + artifact.getName() + "' artifact: "+ name+ " includes itself in the output layout"));
        break;
      }
      if (StringUtil.isEmpty(artifact.getOutputPath())) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot build '" + artifact.getName() + "' artifact: output path is not specified"));
        break;
      }
      buildArtifact(new ArtifactBuildTarget(artifact),context);
    }
  }
}
