{
  DefaultJDOMExternalizer.readExternal(this,parentNode);
  try {
    removeRegexpPatterns();
    Element node=parentNode.getChild(JpsJavaCompilerConfigurationSerializer.RESOURCE_EXTENSIONS);
    if (node != null) {
      for (      final Object o : node.getChildren(JpsJavaCompilerConfigurationSerializer.ENTRY)) {
        Element element=(Element)o;
        String pattern=element.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME);
        if (!StringUtil.isEmpty(pattern)) {
          addRegexpPattern(pattern);
        }
      }
    }
    removeWildcardPatterns();
    node=parentNode.getChild(JpsJavaCompilerConfigurationSerializer.WILDCARD_RESOURCE_PATTERNS);
    if (node != null) {
      myWildcardPatternsInitialized=true;
      for (      final Object o : node.getChildren(JpsJavaCompilerConfigurationSerializer.ENTRY)) {
        final Element element=(Element)o;
        String pattern=element.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME);
        if (!StringUtil.isEmpty(pattern)) {
          addWildcardResourcePattern(pattern);
        }
      }
    }
  }
 catch (  MalformedPatternException e) {
    throw new InvalidDataException(e);
  }
}
