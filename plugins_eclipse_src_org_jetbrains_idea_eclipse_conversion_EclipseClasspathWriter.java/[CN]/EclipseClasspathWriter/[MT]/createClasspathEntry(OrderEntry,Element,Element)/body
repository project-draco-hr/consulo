{
  if (entry instanceof ModuleSourceOrderEntry) {
    final ContentEntry[] entries=((ModuleSourceOrderEntry)entry).getRootModel().getContentEntries();
    if (entries.length > 0) {
      final ContentEntry contentEntry=entries[0];
      for (      SourceFolder sourceFolder : contentEntry.getSourceFolders()) {
        addOrderEntry(EclipseXml.SRC_KIND,getRelativePath(sourceFolder.getUrl()),classpathRoot,oldRoot);
      }
    }
  }
 else   if (entry instanceof ModuleOrderEntry) {
    Element orderEntry=addOrderEntry(EclipseXml.SRC_KIND,"/" + ((ModuleOrderEntry)entry).getModuleName(),classpathRoot,oldRoot);
    setAttributeIfAbsent(orderEntry,EclipseXml.COMBINEACCESSRULES_ATTR,EclipseXml.FALSE_VALUE);
    setExported(orderEntry,((ExportableOrderEntry)entry));
  }
 else   if (entry instanceof LibraryOrderEntry) {
    final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
    final String libraryName=libraryOrderEntry.getLibraryName();
    if (libraryOrderEntry.isModuleLevel()) {
      if (libraryName != null && libraryName.contains(IdeaXml.JUNIT)) {
        final Element orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.JUNIT_CONTAINER + "/" + libraryName.substring(IdeaXml.JUNIT.length()),classpathRoot,oldRoot);
        setExported(orderEntry,libraryOrderEntry);
      }
 else {
        final String[] files=libraryOrderEntry.getUrls(OrderRootType.CLASSES);
        if (files.length > 0) {
          final Project project=myModel.getModule().getProject();
          final String[] kind=new String[]{EclipseXml.LIB_KIND};
          String relativeClassPath=getRelativePath(files[0],kind);
          final String[] srcFiles=libraryOrderEntry.getUrls(OrderRootType.SOURCES);
          final String relativePath;
          if (srcFiles.length == 0) {
            relativePath=null;
          }
 else {
            final String[] srcKind=new String[1];
            final boolean replaceVarsInSrc=Comparing.strEqual(kind[0],EclipseXml.VAR_KIND);
            relativePath=getRelativePath(srcFiles[srcFiles.length - 1],srcKind,replaceVarsInSrc,project,getContentRoot());
            if (replaceVarsInSrc && srcKind[0] == null) {
              kind[0]=EclipseXml.LIB_KIND;
              relativeClassPath=getRelativePath(files[0],kind,false,project,getContentRoot());
            }
          }
          final Element orderEntry=addOrderEntry(kind[0],relativeClassPath,classpathRoot,oldRoot);
          setOrRemoveAttribute(orderEntry,EclipseXml.SOURCEPATH_ATTR,relativePath);
          final List children=new ArrayList(orderEntry.getChildren(EclipseXml.ATTRIBUTES_TAG));
          for (          Object o : children) {
            ((Element)o).detach();
          }
          final String[] docUrls=libraryOrderEntry.getUrls(JavadocOrderRootType.getInstance());
          for (          final String docUrl : docUrls) {
            setJavadocPath(orderEntry,docUrl);
          }
          setExported(orderEntry,libraryOrderEntry);
        }
      }
    }
 else {
      final Element orderEntry;
      if (Comparing.strEqual(libraryName,IdeaXml.ECLIPSE_LIBRARY)) {
        orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.ECLIPSE_PLATFORM,classpathRoot,oldRoot);
      }
 else {
        orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.USER_LIBRARY + "/" + libraryName,classpathRoot,oldRoot);
      }
      setExported(orderEntry,libraryOrderEntry);
    }
  }
 else   if (entry instanceof JdkOrderEntry) {
    if (entry instanceof InheritedJdkOrderEntry) {
      addOrderEntry(EclipseXml.CON_KIND,EclipseXml.JRE_CONTAINER,classpathRoot,oldRoot);
    }
 else {
      final Sdk jdk=((JdkOrderEntry)entry).getJdk();
      String jdkLink;
      if (jdk == null) {
        jdkLink=EclipseXml.JRE_CONTAINER;
      }
 else {
        jdkLink=EclipseXml.JRE_CONTAINER;
        if (jdk.getSdkType() instanceof JavaSdkType) {
          jdkLink+=EclipseXml.JAVA_SDK_TYPE;
        }
        jdkLink+="/" + jdk.getName();
      }
      addOrderEntry(EclipseXml.CON_KIND,jdkLink,classpathRoot,oldRoot);
    }
  }
 else {
    throw new ConversionException("Unknown EclipseProjectModel.ClasspathEntry: " + entry.getClass());
  }
}
