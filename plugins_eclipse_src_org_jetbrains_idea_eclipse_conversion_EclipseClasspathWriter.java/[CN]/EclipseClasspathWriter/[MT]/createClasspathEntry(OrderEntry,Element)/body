{
  if (entry instanceof ModuleSourceOrderEntry) {
    final ContentEntry[] entries=((ModuleSourceOrderEntry)entry).getRootModel().getContentEntries();
    if (entries.length > 0) {
      final ContentEntry contentEntry=entries[0];
      for (      SourceFolder sourceFolder : contentEntry.getSourceFolders()) {
        addOrderEntry(EclipseXml.SRC_KIND,getRelativePath(sourceFolder.getUrl()),classpathRoot);
      }
    }
  }
 else   if (entry instanceof ModuleOrderEntry) {
    Element orderEntry=addOrderEntry(EclipseXml.SRC_KIND,"/" + ((ModuleOrderEntry)entry).getModuleName(),classpathRoot);
    setAttributeIfAbsent(orderEntry,EclipseXml.COMBINEACCESSRULES_ATTR,EclipseXml.FALSE_VALUE);
    setExported(orderEntry,((ExportableOrderEntry)entry));
  }
 else   if (entry instanceof LibraryOrderEntry) {
    final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
    final String libraryName=libraryOrderEntry.getLibraryName();
    if (libraryOrderEntry.isModuleLevel()) {
      final String[] files=libraryOrderEntry.getUrls(OrderRootType.CLASSES);
      if (files.length > 0) {
        if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0],EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) {
          final Element orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.JUNIT_CONTAINER + "/" + libraryName.substring(IdeaXml.JUNIT.length()),classpathRoot);
          setExported(orderEntry,libraryOrderEntry);
        }
 else {
          final String eclipseVariablePath=EclipseModuleManager.getInstance(libraryOrderEntry.getOwnerModule()).getEclipseVariablePath(files[0]);
          final Element orderEntry;
          if (eclipseVariablePath != null) {
            orderEntry=addOrderEntry(EclipseXml.VAR_KIND,eclipseVariablePath,classpathRoot);
          }
 else {
            orderEntry=addOrderEntry(EclipseXml.LIB_KIND,getRelativePath(files[0]),classpathRoot);
          }
          final String srcRelativePath;
          final String eclipseSrcVariablePath;
          final String[] srcFiles=libraryOrderEntry.getUrls(OrderRootType.SOURCES);
          if (srcFiles.length == 0) {
            srcRelativePath=null;
            eclipseSrcVariablePath=null;
          }
 else {
            final String lastSourceRoot=srcFiles[srcFiles.length - 1];
            srcRelativePath=getRelativePath(lastSourceRoot);
            eclipseSrcVariablePath=EclipseModuleManager.getInstance(libraryOrderEntry.getOwnerModule()).getEclipseSrcVariablePath(lastSourceRoot);
          }
          setOrRemoveAttribute(orderEntry,EclipseXml.SOURCEPATH_ATTR,eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath);
          setupLibraryAttributes(orderEntry,libraryOrderEntry);
          setExported(orderEntry,libraryOrderEntry);
        }
      }
    }
 else {
      final Element orderEntry;
      if (EclipseModuleManager.getInstance(libraryOrderEntry.getOwnerModule()).getUnknownCons().contains(libraryName)) {
        orderEntry=addOrderEntry(EclipseXml.CON_KIND,libraryName,classpathRoot);
      }
 else       if (Comparing.strEqual(libraryName,IdeaXml.ECLIPSE_LIBRARY)) {
        orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.ECLIPSE_PLATFORM,classpathRoot);
      }
 else {
        orderEntry=addOrderEntry(EclipseXml.CON_KIND,EclipseXml.USER_LIBRARY + "/" + libraryName,classpathRoot);
      }
      setExported(orderEntry,libraryOrderEntry);
    }
  }
 else   if (entry instanceof JdkOrderEntry) {
    if (entry instanceof InheritedJdkOrderEntry) {
      if (!EclipseModuleManager.getInstance(entry.getOwnerModule()).isForceConfigureJDK()) {
        addOrderEntry(EclipseXml.CON_KIND,EclipseXml.JRE_CONTAINER,classpathRoot);
      }
    }
 else {
      final Sdk jdk=((JdkOrderEntry)entry).getJdk();
      String jdkLink;
      if (jdk == null) {
        jdkLink=EclipseXml.JRE_CONTAINER;
      }
 else {
        jdkLink=EclipseXml.JRE_CONTAINER;
        if (jdk.getSdkType() instanceof JavaSdkType) {
          jdkLink+=EclipseXml.JAVA_SDK_TYPE;
        }
        jdkLink+="/" + jdk.getName();
      }
      addOrderEntry(EclipseXml.CON_KIND,jdkLink,classpathRoot);
    }
  }
 else {
    throw new ConversionException("Unknown EclipseProjectModel.ClasspathEntry: " + entry.getClass());
  }
}
