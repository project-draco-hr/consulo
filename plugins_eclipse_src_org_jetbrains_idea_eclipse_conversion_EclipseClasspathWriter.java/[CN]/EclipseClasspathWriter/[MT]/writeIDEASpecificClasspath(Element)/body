{
  boolean isModified=false;
  final CompilerModuleExtension compilerModuleExtension=myModel.getModuleExtension(CompilerModuleExtension.class);
  compilerModuleExtension.writeExternal(root);
  if (compilerModuleExtension.isCompilerOutputPathInherited() || compilerModuleExtension.getCompilerOutputUrlForTests() != null || compilerModuleExtension.isExcludeOutput()) {
    isModified=true;
  }
  final LanguageLevelModuleExtension languageLevelModuleExtension=myModel.getModuleExtension(LanguageLevelModuleExtension.class);
  final LanguageLevel languageLevel=languageLevelModuleExtension.getLanguageLevel();
  if (languageLevel != null) {
    languageLevelModuleExtension.writeExternal(root);
    isModified=true;
  }
  for (  ContentEntry entry : myModel.getContentEntries()) {
    for (    SourceFolder sourceFolder : entry.getSourceFolders()) {
      if (sourceFolder.isTestSource()) {
        Element element=new Element(IdeaXml.TEST_FOLDER_TAG);
        root.addContent(element);
        element.setAttribute(IdeaXml.URL_ATTR,sourceFolder.getUrl());
        isModified=true;
      }
    }
    for (    ExcludeFolder excludeFolder : entry.getExcludeFolders()) {
      Element element=new Element(IdeaXml.EXCLUDE_FOLDER_TAG);
      root.addContent(element);
      element.setAttribute(IdeaXml.URL_ATTR,excludeFolder.getUrl());
      isModified=true;
    }
  }
  for (  OrderEntry entry : myModel.getOrderEntries()) {
    if (entry instanceof LibraryOrderEntry && ((LibraryOrderEntry)entry).isModuleLevel()) {
      final String[] urls=entry.getUrls(OrderRootType.SOURCES);
      if (urls.length > 1) {
        final Element element=new Element("lib");
        element.setAttribute("name",entry.getPresentableName());
        for (int i=0; i < urls.length - 1; i++) {
          Element srcElement=new Element("srcroot");
          srcElement.setAttribute("url",urls[i]);
          element.addContent(srcElement);
        }
        root.addContent(element);
      }
    }
  }
  PathMacroManager.getInstance(myModel.getModule()).collapsePaths(root);
  return isModified;
}
