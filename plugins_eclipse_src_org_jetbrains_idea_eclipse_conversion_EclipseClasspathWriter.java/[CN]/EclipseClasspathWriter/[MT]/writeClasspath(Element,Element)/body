{
  if (oldRoot != null) {
    for (    Object o : oldRoot.getChildren(EclipseXml.CLASSPATHENTRY_TAG)) {
      final Element oldChild=(Element)o;
      final String oldKind=oldChild.getAttributeValue(EclipseXml.KIND_ATTR);
      final String oldPath=oldChild.getAttributeValue(EclipseXml.PATH_ATTR);
      myOldEntries.put(oldKind + getJREKey(oldPath),oldChild);
    }
  }
  for (  OrderEntry orderEntry : myModel.getOrderEntries()) {
    createClasspathEntry(orderEntry,classpathElement);
  }
  @NonNls String outputPath="bin";
  final String compilerOutputUrl=myModel.getModuleExtension(CompilerModuleExtension.class).getCompilerOutputUrl();
  final EclipseModuleManager eclipseModuleManager=EclipseModuleManagerImpl.getInstance(myModel.getModule());
  final String linkedPath=eclipseModuleManager.getEclipseLinkedVarPath(compilerOutputUrl);
  if (linkedPath != null) {
    outputPath=linkedPath;
  }
 else {
    final VirtualFile contentRoot=EPathUtil.getContentRoot(myModel);
    final VirtualFile output=myModel.getModuleExtension(CompilerModuleExtension.class).getCompilerOutputPath();
    if (contentRoot != null && output != null && VfsUtil.isAncestor(contentRoot,output,false)) {
      outputPath=EPathUtil.collapse2EclipsePath(output.getUrl(),myModel);
    }
 else     if (output == null && compilerOutputUrl != null) {
      outputPath=EPathUtil.collapse2EclipsePath(compilerOutputUrl,myModel);
    }
  }
  if (eclipseModuleManager.isGroovyDslSupport()) {
    final Integer place=eclipseModuleManager.getSrcPlace(EclipseXml.GROOVY_DSL_CONTAINER);
    addOrderEntry(EclipseXml.CON_KIND,EclipseXml.GROOVY_DSL_CONTAINER,classpathElement,place != null ? place.intValue() : -1);
  }
  final Element orderEntry=addOrderEntry(EclipseXml.OUTPUT_KIND,outputPath,classpathElement);
  setAttributeIfAbsent(orderEntry,EclipseXml.PATH_ATTR,EclipseXml.BIN_DIR);
}
