{
  if (oldRoot != null) {
    for (    Object o : oldRoot.getChildren(EclipseXml.CLASSPATHENTRY_TAG)) {
      final Element oldChild=(Element)o;
      final String oldKind=oldChild.getAttributeValue(EclipseXml.KIND_ATTR);
      final String oldPath=oldChild.getAttributeValue(EclipseXml.PATH_ATTR);
      myOldEntries.put(oldKind + oldPath,oldChild);
    }
  }
  for (  OrderEntry orderEntry : myModel.getOrderEntries()) {
    createClasspathEntry(orderEntry,classpathElement);
  }
  @NonNls String outputPath="bin";
  if (myModel.getContentEntries().length == 1) {
    final VirtualFile contentRoot=myModel.getContentEntries()[0].getFile();
    final VirtualFile output=myModel.getModuleExtension(CompilerModuleExtension.class).getCompilerOutputPath();
    if (contentRoot != null && output != null && VfsUtil.isAncestor(contentRoot,output,false)) {
      outputPath=getRelativePath(output.getUrl());
    }
 else     if (output == null) {
      final String url=myModel.getModuleExtension(CompilerModuleExtension.class).getCompilerOutputUrl();
      if (url != null) {
        outputPath=getRelativePath(url);
      }
    }
  }
  final Element orderEntry=addOrderEntry(EclipseXml.OUTPUT_KIND,outputPath,classpathElement);
  setAttributeIfAbsent(orderEntry,EclipseXml.PATH_ATTR,EclipseXml.BIN_DIR);
}
