{
  Object value=null;
  String bundleName=null;
  boolean propertyRefWithPrefix=false;
  boolean soft=myDefaultSoft;
  if (element instanceof PsiLiteralExpression) {
    PsiLiteralExpression literalExpression=(PsiLiteralExpression)element;
    value=literalExpression.getValue();
    final Map<String,Object> annotationParams=new HashMap<String,Object>();
    annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER,null);
    if (I18nUtil.mustBePropertyKey(literalExpression,annotationParams)) {
      soft=false;
      final Object resourceBundleName=annotationParams.get(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER);
      if (resourceBundleName instanceof PsiExpression) {
        PsiExpression expr=(PsiExpression)resourceBundleName;
        final Object bundleValue=JavaPsiFacade.getInstance(expr.getProject()).getConstantEvaluationHelper().computeConstantExpression(expr);
        bundleName=bundleValue == null ? null : bundleValue.toString();
      }
    }
  }
 else   if (element instanceof XmlAttributeValue && isNonDynamicAttribute(element)) {
    value=((XmlAttributeValue)element).getValue();
    final XmlAttribute attribute=(XmlAttribute)element.getParent();
    if ("key".equals(attribute.getName())) {
      final XmlTag parent=attribute.getParent();
      if ("message".equals(parent.getLocalName()) && Arrays.binarySearch(XmlUtil.JSTL_FORMAT_URIS,parent.getNamespace()) >= 0) {
        propertyRefWithPrefix=true;
      }
    }
  }
  if (value instanceof String) {
    String text=(String)value;
    PsiReference reference=propertyRefWithPrefix ? new PrefixBasedPropertyReference(text,element,bundleName) : new PropertyReference(text,element,bundleName,soft);
    return new PsiReference[]{reference};
  }
  return PsiReference.EMPTY_ARRAY;
}
