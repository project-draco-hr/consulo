{
  String component=components[index];
  MetaModel model=models[index];
  List<Property> properties=myCachedProperties.get(component);
  if (properties == null) {
    properties=new ArrayList<Property>();
    myCachedProperties.put(component,properties);
    StyleableDefinition definitions=myDefinitions.getStyleableByName(component);
    if (definitions != null) {
      boolean margin=false;
      for (      AttributeDefinition definition : definitions.getAttributes()) {
        String name=definition.getName();
        boolean important=true;
        Set<AttributeFormat> formats=definition.getFormats();
        Property property;
        if (name.startsWith(LAYOUT_MARGIN_PREFIX)) {
          name=name.substring(LAYOUT_PREFIX.length());
          important=false;
        }
 else         if (name.startsWith(LAYOUT_PREFIX)) {
          name="layout:" + name.substring(LAYOUT_PREFIX.length());
        }
        if ("margin".equals(name) && "ViewGroup_MarginLayout".equals(component)) {
          margin=true;
        }
        if ("layout:width".equals(name) || "layout:height".equals(name)) {
          property=new AttributePropertyWithDefault(name,definition,"wrap_content");
        }
 else         if (formats.contains(AttributeFormat.Flag)) {
          if ("layout:gravity".equals(name)) {
            property=new GravityProperty(name,definition);
          }
 else {
            property=new FlagProperty(name,definition);
          }
        }
 else {
          property=new AttributeProperty(name,definition);
        }
        if (model != null) {
          model.decorate(property,name);
        }
        property.setImportant(important);
        properties.add(property);
      }
      if (margin) {
        CompoundDimensionProperty marginProperty=new CompoundDimensionProperty("layout:margin");
        moveProperties(properties,marginProperty,"margin","all","marginLeft","left","marginTop","top","marginRight","right","marginBottom","bottom","marginStart","start","marginEnd","end");
        if (model != null) {
          marginProperty.decorate(model);
        }
        marginProperty.setImportant(true);
        properties.add(marginProperty);
      }
    }
    if (++index < components.length) {
      for (      Property property : loadLayoutProperties(components,index,models)) {
        if (PropertyTable.findProperty(properties,property) == -1) {
          if (model == null) {
            properties.add(property);
          }
 else {
            property=model.decorateWithOverride(property);
            properties.add(property);
          }
        }
      }
    }
    if (!properties.isEmpty()) {
      Collections.sort(properties,new Comparator<Property>(){
        @Override public int compare(        Property p1,        Property p2){
          return p1.getName().compareTo(p2.getName());
        }
      }
);
      PropertyTable.moveProperty(properties,"layout:margin",properties,0);
      PropertyTable.moveProperty(properties,"layout:gravity",properties,0);
      PropertyTable.moveProperty(properties,"layout:height",properties,0);
      PropertyTable.moveProperty(properties,"layout:width",properties,0);
    }
  }
  return properties;
}
