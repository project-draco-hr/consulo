{
  String component=components[index];
  List<Property> properties=myCachedProperties.get(component);
  if (properties == null) {
    properties=new ArrayList<Property>();
    myCachedProperties.put(component,properties);
    StyleableDefinition definitions=myDefinitions.getStyleableByName(component);
    if (definitions != null) {
      Property margin=null;
      for (      AttributeDefinition definition : definitions.getAttributes()) {
        String name=definition.getName();
        boolean important=true;
        Set<AttributeFormat> formats=definition.getFormats();
        Property property;
        if (name.startsWith(LAYOUT_MARGIN_PREFIX) && name.length() > LAYOUT_MARGIN_PREFIX.length()) {
          name=name.substring(LAYOUT_PREFIX.length());
          important=false;
        }
 else         if (name.startsWith(LAYOUT_PREFIX)) {
          name="layout:" + name.substring(LAYOUT_PREFIX.length());
        }
        if ("layout:margin".equals(name) && "ViewGroup_MarginLayout".equals(component)) {
          property=margin=new CompoundProperty(name,definition);
        }
 else         if (formats.contains(AttributeFormat.Flag)) {
          property=new FlagProperty(name,definition,model);
        }
 else {
          property=new AttributeProperty(name,definition);
        }
        property.setImportant(important);
        properties.add(property);
      }
      if (margin != null) {
        List children=margin.getChildren(null);
        children.add(PropertyTable.extractProperty(properties,"marginLeft"));
        children.add(PropertyTable.extractProperty(properties,"marginTop"));
        children.add(PropertyTable.extractProperty(properties,"marginRight"));
        children.add(PropertyTable.extractProperty(properties,"marginBottom"));
        children.add(PropertyTable.extractProperty(properties,"marginStart"));
        children.add(PropertyTable.extractProperty(properties,"marginEnd"));
      }
    }
    if (++index < components.length) {
      for (      Property property : loadLayoutProperties(components,index,model)) {
        if (PropertyTable.findProperty(properties,property) == -1) {
          properties.add(property);
        }
      }
    }
    if (!properties.isEmpty()) {
      Collections.sort(properties,new Comparator<Property>(){
        @Override public int compare(        Property p1,        Property p2){
          return p1.getName().compareTo(p2.getName());
        }
      }
);
      PropertyTable.top(properties,"layout:margin");
      PropertyTable.top(properties,"layout:gravity");
      PropertyTable.top(properties,"layout:height");
      PropertyTable.top(properties,"layout:width");
    }
  }
  return properties;
}
