{
  String component=componentClass.getSimpleName();
  List<Property> properties=myCachedProperties.get(component);
  if (properties == null) {
    properties=new ArrayList<Property>();
    System.out.println("--- " + componentClass + " -----------------");
    StyleableDefinition definitions=myDefinitions.getStyleableByName(component);
    if (definitions != null) {
      for (      AttributeDefinition definition : definitions.getAttributes()) {
        String name=definition.getName();
        Set<AttributeFormat> formats=definition.getFormats();
        Property property;
        if (formats.contains(AttributeFormat.Flag)) {
          property=new FlagProperty(name,definition);
        }
 else {
          property=new AttributeProperty(name,definition);
        }
        if (model != null) {
          property.setImportant(model.isImportantProperty(name));
          property.setExpert(model.isExpertProperty(name));
          property.setDeprecated(model.isDeprecatedProperty(name));
        }
        properties.add(property);
        System.out.println(definition + " = " + Arrays.toString(definition.getValues()));
      }
    }
    Class<?> superComponentClass=componentClass.getSuperclass();
    if (superComponentClass != null) {
      List<Property> superProperties=load(superComponentClass,myMetaManager.getModelByTarget(superComponentClass.getName()));
      for (      Property superProperty : superProperties) {
        if (PropertyTable.findProperty(properties,superProperty) == -1) {
          if (model == null) {
            properties.add(superProperty);
          }
 else {
            String name=superProperty.getName();
            boolean normal=model.isNormalProperty(name);
            boolean important=model.isImportantProperty(name);
            boolean expert=model.isExpertProperty(name);
            boolean deprecated=model.isDeprecatedProperty(name);
            if ((normal && (superProperty.isImportant() || superProperty.isExpert())) || (important && !superProperty.isImportant()) || (expert && !superProperty.isExpert())|| (deprecated && !superProperty.isDeprecated())) {
              Property property=superProperty.createForNewPresentation();
              property.setImportant(important);
              property.setExpert(expert);
              property.setDeprecated(deprecated);
              properties.add(property);
            }
 else {
              properties.add(superProperty);
            }
          }
        }
      }
    }
    if (!properties.isEmpty()) {
      Collections.sort(properties,new Comparator<Property>(){
        @Override public int compare(        Property p1,        Property p2){
          return p1.getName().compareTo(p2.getName());
        }
      }
);
    }
    myCachedProperties.put(component,properties);
  }
  return properties;
}
