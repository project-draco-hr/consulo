{
  String component=componentClass.getSimpleName();
  List<Property> properties=myCachedProperties.get(component);
  if (properties == null) {
    properties=new ArrayList<Property>();
    myCachedProperties.put(component,properties);
    StyleableDefinition definitions=myDefinitions.getStyleableByName(component);
    if (definitions != null) {
      boolean padding=false;
      for (      AttributeDefinition definition : definitions.getAttributes()) {
        String name=definition.getName();
        Set<AttributeFormat> formats=definition.getFormats();
        Property property;
        if ("padding".equals(name) && "View".equals(component)) {
          padding=true;
        }
        if (formats.contains(AttributeFormat.Flag)) {
          property=new FlagProperty(name,definition);
        }
 else {
          property=new AttributeProperty(name,definition);
        }
        if (model != null) {
          model.decorate(property,name);
        }
        properties.add(property);
      }
      if (padding) {
        CompoundDimensionProperty paddingProperty=new CompoundDimensionProperty("padding");
        moveProperties(properties,paddingProperty,"padding","all","paddingLeft","left","paddingTop","top","paddingRight","right","paddingBottom","bottom","paddingStart","start","paddingEnd","end");
        if (model != null) {
          paddingProperty.decorate(model);
        }
        properties.add(paddingProperty);
      }
    }
    Class<?> superComponentClass=componentClass.getSuperclass();
    if (superComponentClass != null) {
      superComponentClass=configureClass(superComponentClass);
      List<Property> superProperties=loadWidgetProperties(superComponentClass,myMetaManager.getModelByTarget(superComponentClass.getName()));
      for (      Property superProperty : superProperties) {
        if (PropertyTable.findProperty(properties,superProperty) == -1) {
          if (model == null) {
            properties.add(superProperty);
          }
 else {
            properties.add(model.decorateWithOverride(superProperty));
          }
        }
      }
    }
    if (!properties.isEmpty()) {
      Collections.sort(properties,new Comparator<Property>(){
        @Override public int compare(        Property p1,        Property p2){
          return p1.getName().compareTo(p2.getName());
        }
      }
);
      if (model != null) {
        for (        String topName : model.getTopProperties()) {
          PropertyTable.moveProperty(properties,topName,properties,0);
        }
      }
    }
  }
  return properties;
}
