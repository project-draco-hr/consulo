{
  final VirtualFile file=FileChooser.chooseFile(new FileChooserDescriptor(true,false,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      return getCoverageRunner(file) != null;
    }
  }
,myProject,null);
  if (file != null) {
    final CoverageRunner coverageRunner=getCoverageRunner(file);
    LOG.assertTrue(coverageRunner != null);
    final CoverageSuite coverageSuite=myCoverageManager.addExternalCoverageSuite(file.getName(),file.getTimeStamp(),coverageRunner,new DefaultCoverageFileProvider(file.getPath()));
    final String coverageRunnerTitle=getCoverageRunnerTitle(coverageRunner);
    DefaultMutableTreeNode node=TreeUtil.findNodeWithObject(myRootNode,coverageRunnerTitle);
    if (node == null) {
      node=new DefaultMutableTreeNode(coverageRunnerTitle);
      myRootNode.add(node);
    }
    if (node.getChildCount() > 0) {
      final TreeNode childNode=node.getChildAt(0);
      if (!(childNode instanceof CheckedTreeNode)) {
        if (LOCAL.equals(((DefaultMutableTreeNode)childNode).getUserObject())) {
          node=(DefaultMutableTreeNode)childNode;
        }
 else {
          final DefaultMutableTreeNode localNode=new DefaultMutableTreeNode(LOCAL);
          node.add(localNode);
          node=localNode;
        }
      }
    }
    final CheckedTreeNode suiteNode=new CheckedTreeNode(coverageSuite);
    suiteNode.setChecked(true);
    node.add(suiteNode);
    TreeUtil.sort(node,new Comparator(){
      @Override public int compare(      Object o1,      Object o2){
        if (o1 instanceof CheckedTreeNode && o2 instanceof CheckedTreeNode) {
          final Object userObject1=((CheckedTreeNode)o1).getUserObject();
          final Object userObject2=((CheckedTreeNode)o2).getUserObject();
          if (userObject1 instanceof CoverageSuite && userObject2 instanceof CoverageSuite) {
            final String presentableName1=((CoverageSuite)userObject1).getPresentableName();
            final String presentableName2=((CoverageSuite)userObject2).getPresentableName();
            return presentableName1.compareToIgnoreCase(presentableName2);
          }
        }
        return 0;
      }
    }
);
    updateTree();
    TreeUtil.selectNode(mySuitesTree,suiteNode);
  }
}
