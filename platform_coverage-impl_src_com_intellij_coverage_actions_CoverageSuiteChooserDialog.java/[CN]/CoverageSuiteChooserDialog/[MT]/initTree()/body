{
  myRootNode.removeAllChildren();
  final HashMap<CoverageRunner,Map<String,List<CoverageSuite>>> grouped=new HashMap<CoverageRunner,Map<String,List<CoverageSuite>>>();
  groupSuites(grouped,myCoverageManager.getSuites(),myEngine);
  final CoverageSuitesBundle currentSuite=myCoverageManager.getCurrentSuitesBundle();
  final List<CoverageRunner> runners=new ArrayList<CoverageRunner>(grouped.keySet());
  Collections.sort(runners,new Comparator<CoverageRunner>(){
    @Override public int compare(    CoverageRunner o1,    CoverageRunner o2){
      return o1.getPresentableName().compareToIgnoreCase(o2.getPresentableName());
    }
  }
);
  for (  CoverageRunner runner : runners) {
    final DefaultMutableTreeNode runnerNode=new DefaultMutableTreeNode(getCoverageRunnerTitle(runner));
    final Map<String,List<CoverageSuite>> providers=grouped.get(runner);
    final DefaultMutableTreeNode remoteNode=new DefaultMutableTreeNode("Remote");
    if (providers.size() == 1) {
      final String providersKey=providers.keySet().iterator().next();
      DefaultMutableTreeNode suitesNode=runnerNode;
      if (!Comparing.strEqual(providersKey,DefaultCoverageFileProvider.class.getName())) {
        suitesNode=remoteNode;
        runnerNode.add(remoteNode);
      }
      final List<CoverageSuite> suites=providers.get(providersKey);
      Collections.sort(suites,new Comparator<CoverageSuite>(){
        @Override public int compare(        CoverageSuite o1,        CoverageSuite o2){
          return o1.getPresentableName().compareToIgnoreCase(o2.getPresentableName());
        }
      }
);
      for (      CoverageSuite suite : suites) {
        final CheckedTreeNode treeNode=new CheckedTreeNode(suite);
        treeNode.setChecked(currentSuite != null && currentSuite.contains(suite) ? Boolean.TRUE : Boolean.FALSE);
        suitesNode.add(treeNode);
      }
    }
 else {
      final DefaultMutableTreeNode localNode=new DefaultMutableTreeNode(LOCAL);
      runnerNode.add(localNode);
      runnerNode.add(remoteNode);
      for (      String aClass : providers.keySet()) {
        DefaultMutableTreeNode node=Comparing.strEqual(aClass,DefaultCoverageFileProvider.class.getName()) ? localNode : remoteNode;
        for (        CoverageSuite suite : providers.get(aClass)) {
          final CheckedTreeNode treeNode=new CheckedTreeNode(suite);
          treeNode.setChecked(currentSuite != null && currentSuite.contains(suite) ? Boolean.TRUE : Boolean.FALSE);
          node.add(treeNode);
        }
      }
    }
    myRootNode.add(runnerNode);
  }
}
