{
  if (inputFiles.length == 0) {
    throw new IllegalArgumentException();
  }
  try {
    final InputFormat inFormat=getInputFormat(inputType);
    if (inputFiles.length > 1) {
      if (!(inFormat instanceof MultiInputFormat)) {
        throw new IllegalArgumentException();
      }
    }
    final VirtualFile inputFile=inputFiles[0];
    final SchemaType type=settings.getOutputType();
    final String outputType=type.toString().toLowerCase();
    final ArrayList<String> inputParams=new ArrayList<String>();
    if (inputType != SchemaType.DTD) {
      final Charset charset=inputFile.getCharset();
      if (charset != null) {
        inputParams.add("encoding=" + charset.name());
      }
    }
    final ArrayList<String> outputParams=new ArrayList<String>();
    settings.addAdvancedSettings(inputParams,outputParams);
    final SchemaCollection sc;
    final String input=inputFile.getPath();
    final String uri=UriOrFile.toUri(input);
    try {
      if (inFormat instanceof MultiInputFormat) {
        final MultiInputFormat format=(MultiInputFormat)inFormat;
        final String[] uris=new String[inputFiles.length];
        for (int i=0; i < inputFiles.length; i++) {
          uris[i]=UriOrFile.toUri(inputFiles[i].getPath());
        }
        sc=format.load(uris,ArrayUtil.toStringArray(inputParams),outputType,errorHandler);
      }
 else {
        sc=inFormat.load(uri,ArrayUtil.toStringArray(inputParams),outputType,errorHandler);
      }
    }
 catch (    IOException e) {
      errorHandler.fatalError(new SAXParseException(e.getMessage(),null,uri,-1,-1,e));
      return;
    }
    final File destination=new File(settings.getOutputDestination());
    final File outputFile;
    if (destination.isDirectory()) {
      final String name=new File(input).getName();
      final int ext=name.lastIndexOf('.');
      outputFile=new File(destination,(ext > 0 ? name.substring(0,ext) : name) + "." + outputType);
    }
 else {
      outputFile=destination;
    }
    try {
      final int indent=settings.getIndent();
      final int length=settings.getLineLength();
      final OutputDirectory od=new LocalOutputDirectory(sc.getMainUri(),outputFile,"." + outputType,settings.getOutputEncoding(),length > 0 ? length : DEFAULT_LINE_LENGTH,indent > 0 ? indent : DEFAULT_INDENT){
        public Stream open(        String sourceUri,        String encoding) throws IOException {
          final String s=super.reference(null,sourceUri);
          final File file=new File(outputFile.getParentFile(),s);
          if (file.exists()) {
            final String msg="The file '" + file.getAbsolutePath() + "' already exists. Overwrite it?";
            final int choice=Messages.showYesNoDialog(myProject,msg,"Output File Exists",Messages.getWarningIcon());
            if (choice == 0) {
              return super.open(sourceUri,encoding);
            }
 else             if (choice == 1) {
              throw new CanceledException();
            }
          }
          return super.open(sourceUri,encoding);
        }
      }
;
      final OutputFormat of=getOutputFormat(settings.getOutputType());
      of.output(sc,od,ArrayUtil.toStringArray(outputParams),inputType.toString().toLowerCase(),errorHandler);
    }
 catch (    IOException e) {
      errorHandler.fatalError(new SAXParseException(e.getMessage(),null,UriOrFile.fileToUri(outputFile),-1,-1,e));
    }
  }
 catch (  CanceledException e) {
  }
catch (  SAXParseException e) {
    errorHandler.error(e);
  }
catch (  MalformedURLException e) {
    Logger.getInstance(getClass().getName()).error(e);
  }
catch (  InputFailedException e) {
  }
catch (  InvalidParamsException e) {
  }
catch (  OutputFailedException e) {
  }
catch (  SAXException e) {
  }
}
