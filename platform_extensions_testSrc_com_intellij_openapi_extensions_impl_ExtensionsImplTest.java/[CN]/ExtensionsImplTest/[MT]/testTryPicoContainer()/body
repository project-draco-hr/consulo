{
  DefaultPicoContainer rootContainer=new DefaultPicoContainer();
  rootContainer.registerComponentInstance("plugin1",new DefaultPicoContainer(rootContainer));
  rootContainer.registerComponentInstance("plugin2",new DefaultPicoContainer(rootContainer));
  MutablePicoContainer container1=(MutablePicoContainer)rootContainer.getComponentInstance("plugin1");
  MutablePicoContainer container2=(MutablePicoContainer)rootContainer.getComponentInstance("plugin2");
  container1.registerComponentImplementation("component1",MyComponent1.class);
  container1.registerComponentImplementation("component1.1",MyComponent1.class);
  container2.registerComponentImplementation("component2",MyComponent2.class);
  MyInterface1 testInstance=new MyInterface1(){
    @Override public void run(){
    }
  }
;
  rootContainer.registerComponentInstance(testInstance);
  MyComponent1 component1=(MyComponent1)container1.getComponentInstance("component1");
  assertEquals(testInstance,component1.testObject);
  rootContainer.registerComponentInstance("component1",component1);
  MyComponent1 component11=(MyComponent1)container1.getComponentInstance("component1.1");
  rootContainer.registerComponentInstance("component11",component11);
  MyComponent2 component2=(MyComponent2)container2.getComponentInstance("component2");
  assertEquals(testInstance,component2.testObject);
  assertTrue(Arrays.asList(component2.comp1).contains(component1));
  assertTrue(Arrays.asList(component2.comp1).contains(component11));
  rootContainer.registerComponentInstance("component2",component2);
  rootContainer.registerComponentImplementation(MyTestComponent.class);
  MyTestComponent testComponent=(MyTestComponent)rootContainer.getComponentInstance(MyTestComponent.class);
  assertTrue(Arrays.asList(testComponent.comp1).contains(component1));
  assertTrue(Arrays.asList(testComponent.comp1).contains(component11));
  assertEquals(component2,testComponent.comp2);
}
