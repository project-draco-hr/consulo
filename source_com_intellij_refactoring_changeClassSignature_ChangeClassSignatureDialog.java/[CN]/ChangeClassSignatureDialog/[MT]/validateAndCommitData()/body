{
  for (int i=0; i < myTypeParameterInfos.size(); i++) {
    final TypeParameterInfo info=myTypeParameterInfos.get(i);
    if (!info.isForExistingParameter() && !myClass.getManager().getNameHelper().isIdentifier(info.getNewName())) {
      return "Wrong name: " + info.getNewName();
    }
  }
  LOG.assertTrue(myTypeCodeFragments.size() == myTypeParameterInfos.size());
  for (int i=0; i < myTypeCodeFragments.size(); i++) {
    final PsiTypeCodeFragment codeFragment=myTypeCodeFragments.get(i);
    TypeParameterInfo info=myTypeParameterInfos.get(i);
    if (info.getOldParameterIndex() >= 0)     continue;
    PsiType type;
    try {
      type=codeFragment.getType();
    }
 catch (    PsiTypeCodeFragment.TypeSyntaxException e) {
      return "Wrong default value: '" + codeFragment.getText() + "' for parameter "+ info.getNewName();
    }
catch (    PsiTypeCodeFragment.NoTypeException e) {
      return "Specify a type for parameter " + info.getNewName();
    }
    info.setDefaultValue(type);
  }
  return null;
}
