{
  setOpaque(false);
  setBorder(INACTIVE_BORDER);
  myActiveIcon=new RowIcon(2);
  myActiveIcon.setIcon(ICON,0);
  myActiveIcon.setIcon(ARROW_ICON,1);
  myInactiveIcon=new RowIcon(2);
  myInactiveIcon.setIcon(ICON,0);
  myInactiveIcon.setIcon(INACTIVE_ARROW_ICON,1);
  setIcon(myInactiveIcon);
  String acceleratorsText=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SHOW_INTENTION_ACTIONS));
  if (acceleratorsText.length() > 0) {
    setToolTipText(DesignerBundle.message("tooltip.press.accelerator",acceleratorsText));
  }
  addMouseListener(new MouseAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      setIcon(myActiveIcon);
      setBorder(ACTIVE_BORDER);
    }
    @Override public void mouseExited(    MouseEvent e){
      setIcon(myInactiveIcon);
      setBorder(INACTIVE_BORDER);
    }
  }
);
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent event,    int clickCount){
      showPopup();
      return true;
    }
  }
.installOn(this);
}
