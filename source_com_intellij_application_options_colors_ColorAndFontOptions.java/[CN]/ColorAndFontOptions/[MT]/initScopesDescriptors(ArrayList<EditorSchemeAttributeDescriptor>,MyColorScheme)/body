{
  Set<Pair<NamedScope,NamedScopesHolder>> namedScopes=new THashSet<Pair<NamedScope,NamedScopesHolder>>(new TObjectHashingStrategy<Pair<NamedScope,NamedScopesHolder>>(){
    public int computeHashCode(    final Pair<NamedScope,NamedScopesHolder> object){
      return object.getFirst().getName().hashCode();
    }
    public boolean equals(    final Pair<NamedScope,NamedScopesHolder> o1,    final Pair<NamedScope,NamedScopesHolder> o2){
      return o1.getFirst().getName().equals(o2.getFirst().getName());
    }
  }
);
  Project[] projects=ProjectManager.getInstance().getOpenProjects();
  for (  Project project : projects) {
    DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(project);
    List<Pair<NamedScope,NamedScopesHolder>> cachedScopes=codeAnalyzer.getScopeBasedHighlightingCachedScopes();
    namedScopes.addAll(cachedScopes);
  }
  List<Pair<NamedScope,NamedScopesHolder>> list=new ArrayList<Pair<NamedScope,NamedScopesHolder>>(namedScopes);
  Collections.sort(list,new Comparator<Pair<NamedScope,NamedScopesHolder>>(){
    public int compare(    final Pair<NamedScope,NamedScopesHolder> o1,    final Pair<NamedScope,NamedScopesHolder> o2){
      return o1.getFirst().getName().compareToIgnoreCase(o2.getFirst().getName());
    }
  }
);
  for (  Pair<NamedScope,NamedScopesHolder> pair : list) {
    NamedScope namedScope=pair.getFirst();
    String name=namedScope.getName();
    TextAttributesKey textAttributesKey=getScopeTextAttributeKey(name);
    if (scheme.getAttributes(textAttributesKey) == null) {
      scheme.setAttributes(textAttributesKey,new TextAttributes());
    }
    NamedScopesHolder holder=pair.getSecond();
    PackageSet value=namedScope.getValue();
    String toolTip=holder.getDisplayName() + (value == null ? "" : ": " + value.getText());
    addSchemedDescription(descriptions,name,SCOPES_GROUP,textAttributesKey,scheme,holder.getIcon(),toolTip);
  }
}
