{
  UsageInfo[] usagesIn=refUsages.get();
  final PushDownConflicts pushDownConflicts=new PushDownConflicts(myClass,myMemberInfos);
  pushDownConflicts.checkSourceClassConflicts();
  if (usagesIn.length == 0) {
    String noInheritors=myClass.isInterface() ? RefactoringBundle.message("interface.0.does.not.have.inheritors",myClass.getQualifiedName()) : RefactoringBundle.message("class.0.does.not.have.inheritors",myClass.getQualifiedName());
    final String message=noInheritors + "\n" + RefactoringBundle.message("push.down.will.delete.members");
    final int answer=Messages.showYesNoDialog(message,PushDownHandler.REFACTORING_NAME,Messages.getWarningIcon());
    if (answer != 0)     return false;
  }
  for (  UsageInfo usage : usagesIn) {
    final PsiElement element=usage.getElement();
    if (element instanceof PsiClass) {
      pushDownConflicts.checkTargetClassConflicts((PsiClass)element);
    }
  }
  if (pushDownConflicts.isAnyConflicts()) {
    final String[] conflicts=pushDownConflicts.getConflicts();
    ConflictsDialog dialog=new ConflictsDialog(myProject);
    dialog.show();
    if (!dialog.isOK())     return false;
  }
  prepareSuccessful();
  return true;
}
