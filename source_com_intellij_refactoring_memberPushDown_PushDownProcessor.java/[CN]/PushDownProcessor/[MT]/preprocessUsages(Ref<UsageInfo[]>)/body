{
  UsageInfo[] usagesIn=refUsages.get();
  final PushDownConflicts pushDownConflicts=new PushDownConflicts(myClass,myMemberInfos);
  pushDownConflicts.checkSourceClassConflicts();
  if (usagesIn.length == 0) {
    final String message=(myClass.isInterface() ? "Interface " : "Class ") + myClass.getQualifiedName() + " does not have inheritors.\n"+ "Pushing members down will result in them being deleted. Continue?";
    final int answer=Messages.showYesNoDialog(message,"Push Down",Messages.getWarningIcon());
    if (answer != 0)     return false;
  }
  for (  UsageInfo usage : usagesIn) {
    final PsiElement element=usage.getElement();
    if (element instanceof PsiClass) {
      pushDownConflicts.checkTargetClassConflicts((PsiClass)element);
    }
  }
  if (pushDownConflicts.isAnyConflicts()) {
    final String[] conflicts=pushDownConflicts.getConflicts();
    ConflictsDialog dialog=new ConflictsDialog(conflicts,myProject);
    dialog.show();
    if (!dialog.isOK())     return false;
  }
  prepareSuccessful();
  return true;
}
