{
  PsiElementFactory factory=myClass.getManager().getElementFactory();
  for (  MemberInfo memberInfo : myMemberInfos) {
    final PsiMember member=memberInfo.getMember();
    PsiMember newMember=null;
    if (member instanceof PsiField) {
      newMember=(PsiMember)targetClass.add(member);
    }
 else     if (member instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)member;
      if (targetClass.findMethodBySignature(method,false) == null) {
        newMember=(PsiMethod)targetClass.add(method);
        if (memberInfo.isToAbstract()) {
          if (newMember.hasModifierProperty(PsiModifier.PRIVATE)) {
            newMember.getModifierList().setModifierProperty(PsiModifier.PROTECTED,true);
          }
          myJavaDocPolicy.processNewJavaDoc(((PsiMethod)newMember).getDocComment());
        }
      }
    }
 else     if (member instanceof PsiClass) {
      if (Boolean.FALSE.equals(memberInfo.getOverrides())) {
        final PsiClass aClass=(PsiClass)member;
        if (!targetClass.isInheritor(aClass,false)) {
          PsiJavaCodeReferenceElement classRef=factory.createClassReferenceElement(aClass);
          targetClass.getImplementsList().add(classRef);
        }
      }
 else {
        newMember=(PsiMember)targetClass.add(member);
      }
    }
    if (newMember != null) {
      decodeRefs(newMember,targetClass);
    }
  }
}
