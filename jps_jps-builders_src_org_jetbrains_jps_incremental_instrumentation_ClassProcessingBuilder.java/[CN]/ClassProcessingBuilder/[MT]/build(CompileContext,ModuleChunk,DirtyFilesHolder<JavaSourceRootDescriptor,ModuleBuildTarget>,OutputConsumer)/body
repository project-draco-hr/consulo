{
  if (outputConsumer.getCompiledClasses().isEmpty() || !isEnabled(context,chunk)) {
    return ExitCode.NOTHING_DONE;
  }
  final String progress=getProgressMessage();
  final boolean shouldShowProgress=!StringUtil.isEmptyOrSpaces(progress);
  if (shouldShowProgress) {
    context.processMessage(new ProgressMessage(progress + " [" + chunk.getName()+ "]"));
  }
  ExitCode exitCode=ExitCode.NOTHING_DONE;
  try {
    InstrumentationClassFinder finder=CLASS_FINDER.get(context);
    if (finder == null) {
      final ProjectPaths paths=context.getProjectPaths();
      final Collection<File> platformCp=paths.getPlatformCompilationClasspath(chunk,false);
      final Collection<File> classpath=new ArrayList<File>();
      classpath.addAll(paths.getCompilationClasspath(chunk,false));
      classpath.addAll(ProjectPaths.getSourceRootsWithDependents(chunk).keySet());
      finder=createInstrumentationClassFinder(platformCp,classpath,outputConsumer);
      CLASS_FINDER.set(context,finder);
    }
    exitCode=performBuild(context,chunk,finder,outputConsumer);
  }
  finally {
    if (shouldShowProgress) {
      context.processMessage(new ProgressMessage(""));
    }
  }
  return exitCode;
}
