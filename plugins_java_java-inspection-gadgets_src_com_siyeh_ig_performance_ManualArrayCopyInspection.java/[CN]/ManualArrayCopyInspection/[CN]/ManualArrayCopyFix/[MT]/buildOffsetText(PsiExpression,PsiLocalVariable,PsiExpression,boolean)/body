{
  if (expression == null) {
    return null;
  }
  final String expressionText=expression.getText();
  final String variableName=variable.getName();
  if (expressionText.equals(variableName)) {
    final PsiExpression initialValue=ParenthesesUtils.stripParentheses(limitExpression);
    if (initialValue == null) {
      return null;
    }
    return buildExpressionText(initialValue,plusOne,false);
  }
 else   if (expression instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    final String rhsText=buildOffsetText(rhs,variable,limitExpression,plusOne);
    final PsiJavaToken sign=binaryExpression.getOperationSign();
    final IElementType tokenType=sign.getTokenType();
    if (ExpressionUtils.isZero(lhs)) {
      if (tokenType.equals(JavaTokenType.MINUS)) {
        return '-' + rhsText;
      }
      return rhsText;
    }
    if (plusOne && tokenType.equals(JavaTokenType.MINUS) && ExpressionUtils.isOne(rhs)) {
      return buildOffsetText(lhs,variable,limitExpression,false);
    }
    final String lhsText=buildOffsetText(lhs,variable,limitExpression,plusOne);
    if (ExpressionUtils.isZero(rhs)) {
      return lhsText;
    }
    return collapseConstant(lhsText + sign.getText() + rhsText,variable);
  }
  return collapseConstant(expression.getText(),variable);
}
