{
  logger.setLevel(Level.DEBUG);
  logger.debug("enter liveRearrangeDocument on thread " + Thread.currentThread().getName());
  RearrangerActionHandler.setCsm(CodeStyleManager.getInstance(project));
  new CommentUtil(settings);
  final Window window=WindowManager.getInstance().suggestParentWindow(project);
  LiveRearrangerPopup fsp=new LiveRearrangerPopup(settings,psiFile,document,project,window,cursorOffset);
  final Parser p=new Parser(project,settings,psiFile);
  final ArrayList<ClassEntry> outerClasses=p.parseOuterLevel();
  if (outerClasses.size() > 0) {
    final Mover m=new Mover(outerClasses,settings);
    final ArrayList resultRuleInstances=m.rearrangeOuterClasses();
    fsp.setResultRuleInstances(resultRuleInstances);
    fsp.liveRearranger();
  }
  logger.debug("exit liveRearrangeDocument on thread " + Thread.currentThread().getName());
}
