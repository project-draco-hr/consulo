{
  FilePath pathBeforeRename=context.getPathBeforeRename(file);
  final DefaultPatchBaseVersionProvider provider=new DefaultPatchBaseVersionProvider(project);
  if (provider.canProvideContent(file,patch.getBeforeVersionId())) {
    final StringBuilder newText=new StringBuilder();
    final Ref<CharSequence> contentRef=new Ref<CharSequence>();
    final Ref<ApplyPatchStatus> statusRef=new Ref<ApplyPatchStatus>();
    try {
      provider.getBaseVersionContent(file,pathBeforeRename,patch.getBeforeVersionId(),new Processor<CharSequence>(){
        public boolean process(        final CharSequence text){
          newText.setLength(0);
          try {
            statusRef.set(patch.applyModifications(text,newText));
          }
 catch (          ApplyPatchException ex) {
            return true;
          }
          contentRef.set(text);
          return false;
        }
      }
);
    }
 catch (    VcsException vcsEx) {
      Messages.showErrorDialog(project,VcsBundle.message("patch.load.base.revision.error",patch.getBeforeName(),vcsEx.getMessage()),VcsBundle.message("patch.apply.dialog.title"));
      return ApplyPatchStatus.FAILURE;
    }
    ApplyPatchStatus status=statusRef.get();
    if (status != null) {
      if (status != ApplyPatchStatus.ALREADY_APPLIED) {
        return showMergeDialog(project,file,contentRef.get(),newText.toString(),mergeRequestFactory);
      }
 else {
        return status;
      }
    }
  }
  return null;
}
