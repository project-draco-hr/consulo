{
  CheckUtil.checkWritable(file);
  final Pair<ASTNode,CharTable> pair=doFindWhiteSpaceNode(file,offset);
  ASTNode element=pair.first;
  if (pair.first == null) {
    return null;
  }
  ASTNode parent=element.getTreeParent();
  int elementStart=element.getTextRange().getStartOffset();
  if (element.getElementType() != TokenType.WHITE_SPACE) {
    return null;
  }
  if (offset == elementStart) {
    for (ASTNode prev=TreeUtil.prevLeaf(element); ; prev=TreeUtil.prevLeaf(prev)) {
      if (prev == null) {
        return null;
      }
      if (prev.getTextRange().isEmpty()) {
        continue;
      }
      if (prev.getElementType() != TokenType.WHITE_SPACE) {
        return null;
      }
    }
  }
  CharTable charTable=pair.second;
  ASTNode space1=splitSpaceElement((TreeElement)element,offset - elementStart,charTable);
  ASTNode marker=Factory.createSingleLeafElement(TokenType.NEW_LINE_INDENT,DUMMY_IDENTIFIER,charTable,file.getManager());
  setSequentialProcessingAllowed(false);
  parent.addChild(marker,space1.getTreeNext());
  PsiElement psiElement=SourceTreeToPsiMap.treeElementToPsi(marker);
  return psiElement == null ? null : psiElement.getTextRange();
}
