{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
  CheckUtil.checkWritable(file);
  if (!SourceTreeToPsiMap.hasTreeElement(file)) {
    return;
  }
  ASTNode treeElement=SourceTreeToPsiMap.psiElementToTree(file);
  transformAllChildren(treeElement);
  FileType fileType=file.getFileType();
  Helper helper=HelperFactory.createHelper(fileType,myProject);
  final CodeFormatterFacade codeFormatter=new CodeFormatterFacade(getSettings(),helper);
  LOG.assertTrue(file.isValid());
  final PsiElement start=findElementInTreeWithFormatterEnabled(file,startOffset);
  final PsiElement end=findElementInTreeWithFormatterEnabled(file,endOffset);
  if (start != null && !start.isValid()) {
    LOG.assertTrue(false,"start=" + start + "; file="+ file);
  }
  if (end != null && !end.isValid()) {
    LOG.assertTrue(false,"end=" + start + "; end="+ file);
  }
  boolean formatFromStart=startOffset == 0;
  boolean formatToEnd=endOffset == file.getTextLength();
  final SmartPointerManager smartPointerManager=SmartPointerManager.getInstance(getProject());
  final SmartPsiElementPointer startPointer=start == null ? null : smartPointerManager.createSmartPsiElementPointer(start);
  final SmartPsiElementPointer endPointer=end == null ? null : smartPointerManager.createSmartPsiElementPointer(end);
  codeFormatter.processTextWithPostponedFormatting(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true));
  final PsiElement startElement=startPointer == null ? null : startPointer.getElement();
  final PsiElement endElement=endPointer == null ? null : endPointer.getElement();
  if ((startElement != null || formatFromStart) && (endElement != null || formatToEnd)) {
    postProcessText(file,new TextRange(formatFromStart ? 0 : startElement.getTextRange().getStartOffset(),formatToEnd ? file.getTextLength() : endElement.getTextRange().getEndOffset()));
  }
}
