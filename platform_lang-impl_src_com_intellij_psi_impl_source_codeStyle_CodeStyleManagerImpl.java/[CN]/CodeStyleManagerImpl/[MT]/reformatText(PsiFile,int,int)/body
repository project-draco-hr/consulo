{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
  CheckUtil.checkWritable(file);
  if (!SourceTreeToPsiMap.hasTreeElement(file)) {
    return;
  }
  ASTNode treeElement=SourceTreeToPsiMap.psiElementToTree(file);
  transformAllChildren(treeElement);
  final CodeFormatterFacade codeFormatter=new CodeFormatterFacade(getSettings());
  LOG.assertTrue(file.isValid());
  final PsiElement start=findElementInTreeWithFormatterEnabled(file,startOffset);
  final PsiElement end=findElementInTreeWithFormatterEnabled(file,endOffset);
  if (start != null && !start.isValid()) {
    LOG.error("start=" + start + "; file="+ file);
  }
  if (end != null && !end.isValid()) {
    LOG.error("end=" + start + "; end="+ file);
  }
  Editor editor=PsiUtilBase.findEditor(file);
  int visualColumnToRestore=-1;
  if (editor != null) {
    Document document=editor.getDocument();
    int caretOffset=editor.getCaretModel().getOffset();
    caretOffset=Math.max(Math.min(caretOffset,document.getTextLength() - 1),0);
    CharSequence text=document.getCharsSequence();
    int caretLine=document.getLineNumber(caretOffset);
    int lineStartOffset=document.getLineStartOffset(caretLine);
    boolean fixCaretPosition=true;
    for (int i=Math.min(caretOffset,text.length() - 1); i >= lineStartOffset; i--) {
      char c=text.charAt(i);
      if (c != ' ' && c != '\t' && c != '\n') {
        fixCaretPosition=false;
        break;
      }
    }
    if (fixCaretPosition) {
      visualColumnToRestore=editor.getCaretModel().getVisualPosition().column;
    }
  }
  boolean formatFromStart=startOffset == 0;
  boolean formatToEnd=endOffset == file.getTextLength();
  final SmartPointerManager smartPointerManager=SmartPointerManager.getInstance(getProject());
  final SmartPsiElementPointer startPointer=start == null ? null : smartPointerManager.createSmartPsiElementPointer(start);
  final SmartPsiElementPointer endPointer=end == null ? null : smartPointerManager.createSmartPsiElementPointer(end);
  codeFormatter.processText(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true),true);
  final PsiElement startElement=startPointer == null ? null : startPointer.getElement();
  final PsiElement endElement=endPointer == null ? null : endPointer.getElement();
  if ((startElement != null || formatFromStart) && (endElement != null || formatToEnd)) {
    postProcessText(file,new TextRange(formatFromStart ? 0 : startElement.getTextRange().getStartOffset(),formatToEnd ? file.getTextLength() : endElement.getTextRange().getEndOffset()));
  }
  if (visualColumnToRestore < 0) {
    return;
  }
  CaretModel caretModel=editor.getCaretModel();
  VisualPosition position=caretModel.getVisualPosition();
  if (visualColumnToRestore != position.column) {
    caretModel.moveToVisualPosition(new VisualPosition(position.line,visualColumnToRestore));
  }
}
