{
  if (PsiUtil.isAccessedForWriting(expr))   return true;
  if (parent instanceof PsiBinaryExpression) {
    PsiExpression opposite=null;
    final PsiExpression lOperand=((PsiBinaryExpression)parent).getLOperand();
    final PsiExpression rOperand=((PsiBinaryExpression)parent).getROperand();
    if (lOperand == expr) {
      opposite=rOperand;
    }
 else     if (rOperand == expr) {
      opposite=lOperand;
    }
    if (opposite != null && opposite.getType() == PsiType.NULL) {
      if (parent.getParent() instanceof PsiAssertStatement) {
        if (((PsiBinaryExpression)parent).getOperationTokenType() == JavaTokenType.NE) {
          registerNotNullAnnotation(parameter);
          return true;
        }
      }
      registerNullableAnnotation(parameter);
      return true;
    }
  }
 else   if (parent instanceof PsiReferenceExpression) {
    if (((PsiReferenceExpression)parent).getQualifierExpression() == expr) {
      registerNotNullAnnotation(parameter);
      return true;
    }
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    if (((PsiAssignmentExpression)parent).getRExpression() == expr) {
      final PsiExpression expression=((PsiAssignmentExpression)parent).getLExpression();
      if (expression instanceof PsiReferenceExpression) {
        final PsiElement resolve=((PsiReferenceExpression)expression).resolve();
        if (resolve instanceof PsiVariable) {
          final PsiVariable localVar=(PsiVariable)resolve;
          if (isNotNull(localVar)) {
            registerNotNullAnnotation(parameter);
            return true;
          }
        }
      }
    }
  }
 else   if (parent instanceof PsiForeachStatement) {
    if (((PsiForeachStatement)parent).getIteratedValue() == expr) {
      registerNotNullAnnotation(parameter);
      return true;
    }
  }
 else   if (parent instanceof PsiSwitchStatement && ((PsiSwitchStatement)parent).getExpression() == expr) {
    registerNotNullAnnotation(parameter);
    return true;
  }
  final PsiCall call=PsiTreeUtil.getParentOfType(expr,PsiCall.class);
  if (call != null) {
    final PsiExpressionList argumentList=call.getArgumentList();
    if (argumentList != null) {
      final PsiExpression[] args=argumentList.getExpressions();
      int idx=ArrayUtil.find(args,expr);
      if (idx >= 0) {
        final PsiMethod resolvedMethod=call.resolveMethod();
        if (resolvedMethod != null) {
          final PsiParameter[] parameters=resolvedMethod.getParameterList().getParameters();
          if (idx < parameters.length) {
            final PsiParameter resolvedToParam=parameters[idx];
            if (isNotNull(resolvedToParam) && !resolvedToParam.isVarArgs()) {
              registerNotNullAnnotation(parameter);
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
