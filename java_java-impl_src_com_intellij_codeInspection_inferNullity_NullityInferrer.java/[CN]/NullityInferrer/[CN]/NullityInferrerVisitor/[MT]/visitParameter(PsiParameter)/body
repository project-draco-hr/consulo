{
  super.visitParameter(parameter);
  if (parameter.getType() instanceof PsiPrimitiveType || isNotNull(parameter) || isNullable(parameter)) {
    return;
  }
  final PsiElement grandParent=parameter.getDeclarationScope();
  if (grandParent instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)grandParent;
    if (method.getBody() != null) {
      for (      PsiReference reference : ReferencesSearch.search(parameter,new LocalSearchScope(method))) {
        final PsiElement place=reference.getElement();
        if (place instanceof PsiReferenceExpression) {
          final PsiReferenceExpression expr=(PsiReferenceExpression)place;
          final PsiElement parent=PsiTreeUtil.skipParentsOfType(expr,PsiParenthesizedExpression.class,PsiTypeCastExpression.class);
          if (processParameter(parameter,expr,parent))           return;
          if (isNotNull(method)) {
            PsiElement toReturn=parent;
            if (parent instanceof PsiConditionalExpression && ((PsiConditionalExpression)parent).getCondition() != expr) {
              toReturn=parent.getParent();
            }
            if (toReturn instanceof PsiReturnStatement) {
              registerNotNullAnnotation(parameter);
              return;
            }
          }
        }
      }
    }
  }
 else   if (grandParent instanceof PsiForeachStatement) {
    for (    PsiReference reference : ReferencesSearch.search(parameter,new LocalSearchScope(grandParent))) {
      final PsiElement place=reference.getElement();
      if (place instanceof PsiReferenceExpression) {
        final PsiReferenceExpression expr=(PsiReferenceExpression)place;
        final PsiElement parent=PsiTreeUtil.skipParentsOfType(expr,PsiParenthesizedExpression.class,PsiTypeCastExpression.class);
        if (processParameter(parameter,expr,parent))         return;
      }
    }
  }
 else {
    if (variableNeverAssignedNull(parameter)) {
      registerNotNullAnnotation(parameter);
    }
    if (variableSometimesAssignedNull(parameter)) {
      registerNullableAnnotation(parameter);
    }
  }
}
