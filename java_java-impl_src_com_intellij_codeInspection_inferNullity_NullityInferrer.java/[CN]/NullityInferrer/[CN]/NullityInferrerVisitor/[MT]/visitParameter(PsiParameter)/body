{
  super.visitParameter(parameter);
  if (parameter.getType() instanceof PsiPrimitiveType || isNotNull(parameter) || isNullable(parameter)) {
    return;
  }
  final PsiElement grandParent=parameter.getParent().getParent();
  if (grandParent instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)grandParent;
    if (method.getBody() != null) {
      for (      PsiReference reference : ReferencesSearch.search(parameter,new LocalSearchScope(method))) {
        final PsiElement place=reference.getElement();
        if (place instanceof PsiReferenceExpression) {
          final PsiReferenceExpression expr=(PsiReferenceExpression)place;
          if (PsiUtil.isAccessedForWriting(expr))           return;
          final PsiElement parent=PsiTreeUtil.skipParentsOfType(expr,PsiParenthesizedExpression.class,PsiTypeCastExpression.class);
          if (parent instanceof PsiBinaryExpression) {
            PsiExpression opposite=null;
            final PsiExpression lOperand=((PsiBinaryExpression)parent).getLOperand();
            final PsiExpression rOperand=((PsiBinaryExpression)parent).getROperand();
            if (lOperand == expr) {
              opposite=rOperand;
            }
 else             if (rOperand == expr) {
              opposite=lOperand;
            }
            if (opposite != null && opposite.getType() == PsiType.NULL) {
              registerNullableAnnotation(parameter);
              return;
            }
          }
 else           if (parent instanceof PsiReferenceExpression) {
            if (((PsiReferenceExpression)parent).getQualifierExpression() == expr) {
              registerNotNullAnnotation(parameter);
              return;
            }
          }
 else           if (parent instanceof PsiAssignmentExpression) {
            if (((PsiAssignmentExpression)parent).getRExpression() == expr) {
              final PsiExpression expression=((PsiAssignmentExpression)parent).getLExpression();
              if (expression instanceof PsiReferenceExpression) {
                final PsiElement resolve=((PsiReferenceExpression)expression).resolve();
                if (resolve instanceof PsiVariable) {
                  final PsiVariable localVar=(PsiVariable)resolve;
                  if (isNotNull(localVar)) {
                    registerNotNullAnnotation(parameter);
                    return;
                  }
                }
              }
            }
          }
 else           if (parent instanceof PsiForeachStatement) {
            if (((PsiForeachStatement)parent).getIteratedValue() == expr) {
              registerNotNullAnnotation(parameter);
              return;
            }
          }
          if (isNotNull(method)) {
            PsiElement toReturn=parent;
            if (parent instanceof PsiConditionalExpression && ((PsiConditionalExpression)parent).getCondition() != expr) {
              toReturn=parent.getParent();
            }
            if (toReturn instanceof PsiReturnStatement) {
              registerNotNullAnnotation(parameter);
              return;
            }
          }
          final PsiCall call=PsiTreeUtil.getParentOfType(expr,PsiCall.class);
          if (call != null) {
            final PsiExpressionList argumentList=call.getArgumentList();
            if (argumentList != null) {
              final PsiExpression[] args=argumentList.getExpressions();
              int idx=ArrayUtil.find(args,expr);
              if (idx >= 0) {
                final PsiMethod resolvedMethod=call.resolveMethod();
                if (resolvedMethod != null) {
                  final PsiParameter[] parameters=resolvedMethod.getParameterList().getParameters();
                  if (idx < parameters.length) {
                    final PsiParameter resolvedToParam=parameters[idx];
                    if (isNotNull(resolvedToParam) && !resolvedToParam.isVarArgs()) {
                      registerNotNullAnnotation(parameter);
                      return;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    if (variableNeverAssignedNull(parameter)) {
      registerNotNullAnnotation(parameter);
    }
    if (variableSometimesAssignedNull(parameter)) {
      registerNullableAnnotation(parameter);
    }
  }
}
