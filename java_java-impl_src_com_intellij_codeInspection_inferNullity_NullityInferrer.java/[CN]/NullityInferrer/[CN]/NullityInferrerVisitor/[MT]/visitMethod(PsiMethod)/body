{
  super.visitMethod(method);
  if (method.isConstructor() || method.getReturnType() instanceof PsiPrimitiveType) {
    return;
  }
  final Collection<PsiMethod> overridingMethods=OverridingMethodsSearch.search(method).findAll();
  for (  final PsiMethod overridingMethod : overridingMethods) {
    if (isNullable(overridingMethod)) {
      registerNullableAnnotation(method);
      return;
    }
  }
  if (!AnnotationUtil.isAnnotated(method,AnnotationUtil.NOT_NULL,false) && AnnotationUtil.isAnnotated(method,AnnotationUtil.NOT_NULL,true)) {
    registerNotNullAnnotation(method);
    return;
  }
  if (isNotNull(method) || isNullable(method)) {
    return;
  }
  final PsiCodeBlock body=method.getBody();
  if (body != null) {
    final boolean[] sometimesReturnsNull=new boolean[1];
    body.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitClass(      PsiClass aClass){
      }
      @Override public void visitElement(      PsiElement element){
        if (sometimesReturnsNull[0])         return;
        super.visitElement(element);
      }
      @Override public void visitReturnStatement(      PsiReturnStatement statement){
        super.visitReturnStatement(statement);
        final PsiExpression value=statement.getReturnValue();
        if (expressionIsSometimesNull(value)) {
          sometimesReturnsNull[0]=true;
        }
      }
    }
);
    if (sometimesReturnsNull[0]) {
      registerNullableAnnotation(method);
      return;
    }
  }
  if (methodNeverReturnsNull(method)) {
    for (    final PsiMethod overridingMethod : overridingMethods) {
      if (!isNotNull(overridingMethod)) {
        return;
      }
    }
    registerNotNullAnnotation(method);
  }
}
