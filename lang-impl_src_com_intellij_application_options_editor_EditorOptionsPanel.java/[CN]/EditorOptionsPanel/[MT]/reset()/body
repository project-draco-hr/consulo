{
  EditorSettingsExternalizable editorSettings=EditorSettingsExternalizable.getInstance();
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  UISettings uiSettings=UISettings.getInstance();
  myCbModifiedTabsMarkedWithAsterisk.setSelected(uiSettings.MARK_MODIFIED_TABS_WITH_ASTERISK);
  myCbBlinkCaret.setSelected(editorSettings.isBlinkCaret());
  myBlinkIntervalField.setText(Integer.toString(editorSettings.getBlinkPeriod()));
  myBlinkIntervalField.setEnabled(editorSettings.isBlinkCaret());
  myCbBlockCursor.setSelected(editorSettings.isBlockCursor());
  myCbRightMargin.setSelected(editorSettings.isRightMarginShown());
  myCbShowLineNumbers.setSelected(editorSettings.isLineNumbersShown());
  myCbShowWhitespaces.setSelected(editorSettings.isWhitespacesShown());
  myCbSmoothScrolling.setSelected(editorSettings.isSmoothScrolling());
  myCbHighlightBraces.setSelected(codeInsightSettings.HIGHLIGHT_BRACES);
  myCbHighlightScope.setSelected(codeInsightSettings.HIGHLIGHT_SCOPE);
  myCbVirtualSpace.setSelected(editorSettings.isVirtualSpace());
  myCbCaretInsideTabs.setSelected(editorSettings.isCaretInsideTabs());
  myCbVirtualPageAtBottom.setSelected(editorSettings.isAdditionalPageAtBottom());
  myClipboardContentLimitTextField.setText(Integer.toString(uiSettings.MAX_CLIPBOARD_CONTENTS));
switch (codeInsightSettings.REFORMAT_ON_PASTE) {
case CodeInsightSettings.NO_REFORMAT:
    myReformatOnPasteCombo.setSelectedItem(NO_REFORMAT);
  break;
case CodeInsightSettings.INDENT_BLOCK:
myReformatOnPasteCombo.setSelectedItem(INDENT_BLOCK);
break;
case CodeInsightSettings.INDENT_EACH_LINE:
myReformatOnPasteCombo.setSelectedItem(INDENT_EACH_LINE);
break;
case CodeInsightSettings.REFORMAT_BLOCK:
myReformatOnPasteCombo.setSelectedItem(REFORMAT_BLOCK);
break;
}
String stripTrailingSpaces=editorSettings.getStripTrailingSpaces();
if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_NONE);
}
 else if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_CHANGED.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_CHANGED);
}
 else if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE.equals(stripTrailingSpaces)) {
myStripTrailingSpacesCombo.setSelectedItem(STRIP_ALL);
}
myCbSmartHome.setSelected(editorSettings.isSmartHome());
myCbSmartEnd.setSelected(codeInsightSettings.SMART_END_ACTION);
myCbSmartIndentOnEnter.setSelected(codeInsightSettings.SMART_INDENT_ON_ENTER);
myCbInsertPairBracket.setSelected(codeInsightSettings.AUTOINSERT_PAIR_BRACKET);
myCbInsertPairQuote.setSelected(codeInsightSettings.AUTOINSERT_PAIR_QUOTE);
myCbCamelWords.setSelected(editorSettings.isCamelWords());
myCbFolding.setSelected(editorSettings.isFoldingOutlineShown());
myCbEnableDnD.setSelected(editorSettings.isDndEnabled());
myCbEnableWheelFontChange.setSelected(editorSettings.isWheelFontChangeEnabled());
myCbHonorCamelHumpsWhenSelectingByClicking.setSelected(editorSettings.isMouseClickSelectionHonorsCamelWords());
myRbPreferMovingCaret.setSelected(editorSettings.isRefrainFromScrolling());
myRbPreferScrolling.setSelected(!editorSettings.isRefrainFromScrolling());
myScrollTabLayoutInEditorCheckBox.setSelected(uiSettings.SCROLL_TAB_LAYOUT_IN_EDITOR);
myEditorTabPlacement.setSelectedItem(uiSettings.EDITOR_TAB_PLACEMENT);
myHideKnownExtensions.setSelected(uiSettings.HIDE_KNOWN_EXTENSION_IN_TABS);
if (uiSettings.CLOSE_NON_MODIFIED_FILES_FIRST) {
myCloseNonModifiedFilesFirstRadio.setSelected(true);
}
 else {
myCloseLRUFilesRadio.setSelected(true);
}
if (uiSettings.ACTIVATE_MRU_EDITOR_ON_CLOSE) {
myActivateMRUEditorOnCloseRadio.setSelected(true);
}
 else {
myActivateLeftEditorOnCloseRadio.setSelected(true);
}
myEditorTabLimitField.setText(Integer.toString(uiSettings.EDITOR_TAB_LIMIT));
myRecentFilesLimitField.setText(Integer.toString(uiSettings.RECENT_FILES_LIMIT));
myErrorHighlightingPanel.reset();
for (EditorOptionsProvider provider : Extensions.getExtensions(EditorOptionsProvider.EP_NAME)) {
provider.reset();
}
for (CodeFoldingOptionsProvider provider : Extensions.getExtensions(CodeFoldingOptionsProvider.EP_NAME)) {
provider.reset();
}
}
