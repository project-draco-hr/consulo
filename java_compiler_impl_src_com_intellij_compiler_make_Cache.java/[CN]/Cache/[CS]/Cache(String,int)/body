{
  myStorePath=storePath;
  new File(storePath).mkdirs();
  myQNameToClassInfoMap=new CachedPersistentHashMap<Integer,ClassInfo>(getOrCreateFile("classes"),EnumeratorIntegerDescriptor.INSTANCE,new DataExternalizer<ClassInfo>(){
    public void save(    DataOutput out,    ClassInfo value) throws IOException {
      value.save(out);
    }
    public ClassInfo read(    DataInput in) throws IOException {
      return new ClassInfo(in);
    }
  }
,cacheSize * 2){
    protected boolean isValueDirty(    ClassInfo classInfo){
      return classInfo.isDirty();
    }
  }
;
  myDependencies=new BackwardDependenciesStorage(getOrCreateFile("bdeps"),cacheSize);
  myQNameToReferencedClassesMap=new CompilerDependencyStorage<Integer>(getOrCreateFile("fdeps"),EnumeratorIntegerDescriptor.INSTANCE,cacheSize);
  myQNameToSubclassesMap=new CompilerDependencyStorage<Integer>(getOrCreateFile("subclasses"),EnumeratorIntegerDescriptor.INSTANCE,cacheSize);
  myRemoteQNames=new PersistentHashMap<Integer,Boolean>(getOrCreateFile("remote"),EnumeratorIntegerDescriptor.INSTANCE,new DataExternalizer<Boolean>(){
    public void save(    DataOutput out,    Boolean value) throws IOException {
      out.writeBoolean(value.booleanValue());
    }
    public Boolean read(    DataInput in) throws IOException {
      return in.readBoolean();
    }
  }
,cacheSize);
}
