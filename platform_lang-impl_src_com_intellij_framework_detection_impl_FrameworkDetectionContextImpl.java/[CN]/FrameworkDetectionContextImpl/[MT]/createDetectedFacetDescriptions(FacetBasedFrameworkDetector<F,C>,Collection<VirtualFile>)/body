{
  MultiMapBasedOnSet<Module,VirtualFile> filesByModule=new MultiMapBasedOnSet<Module,VirtualFile>();
  for (  VirtualFile file : files) {
    final Module module=ModuleUtil.findModuleForFile(file,myProject);
    if (module != null) {
      filesByModule.putValue(module,file);
    }
  }
  final List<DetectedFrameworkDescription> result=new ArrayList<DetectedFrameworkDescription>();
  final FacetType<F,C> facetType=detector.getFacetType();
  final FacetsProvider provider=DefaultFacetsProvider.INSTANCE;
  for (  Module module : filesByModule.keySet()) {
    final Collection<F> facets=provider.getFacetsByType(module,facetType.getId());
    if (!facetType.isSuitableModuleType(ModuleType.get(module)) || facetType.isOnlyOneFacetAllowed() && !facets.isEmpty()) {
      continue;
    }
    List<C> existentConfigurations=new ArrayList<C>();
    for (    F facet : facets) {
      existentConfigurations.add((C)facet.getConfiguration());
    }
    final Collection<VirtualFile> moduleFiles=filesByModule.get(module);
    final List<Pair<C,Collection<VirtualFile>>> pairs=detector.createConfigurations(moduleFiles,existentConfigurations);
    for (    Pair<C,Collection<VirtualFile>> pair : pairs) {
      result.add(new FacetBasedDetectedFrameworkDescriptionImpl<F,C>(module,detector,pair.getFirst(),new HashSet<VirtualFile>(pair.getSecond())));
    }
  }
  return result;
}
