{
  final Ref<Boolean> recursive=new Ref<Boolean>(false);
  final GradleEntityVisitor visitor=new GradleEntityVisitorAdapter(){
    @Override public void visit(    @NotNull GradleModule module){
      final Module intellijModule=myProjectStructureHelper.findIntellijModule(module);
      if (intellijModule != null) {
        return;
      }
      toImport.modules.add(module);
      if (!recursive.get()) {
        return;
      }
      for (      GradleDependency dependency : module.getDependencies()) {
        dependency.invite(this);
      }
    }
    @Override public void visit(    @NotNull GradleModuleDependency dependency){
      final ModuleOrderEntry intellijModuleDependency=myProjectStructureHelper.findIntellijModuleDependency(dependency);
      if (intellijModuleDependency != null) {
        return;
      }
      toImport.dependencies.add(dependency);
      final GradleModule gradleModule=dependency.getTarget();
      final Module intellijModule=myProjectStructureHelper.findIntellijModule(gradleModule);
      if (intellijModule != null) {
        return;
      }
      boolean r=recursive.get();
      recursive.set(true);
      try {
        gradleModule.invite(this);
      }
  finally {
        recursive.set(r);
      }
    }
    @Override public void visit(    @NotNull GradleLibraryDependency dependency){
      final LibraryOrderEntry intellijDependency=myProjectStructureHelper.findIntellijLibraryDependency(dependency.getOwnerModule().getName(),dependency.getName());
      if (intellijDependency != null) {
        return;
      }
      toImport.dependencies.add(dependency);
      final GradleLibrary gradleLibrary=dependency.getTarget();
      final Library intellijLibrary=myProjectStructureHelper.findIntellijLibrary(gradleLibrary);
      if (intellijLibrary == null) {
        toImport.libraries.add(gradleLibrary);
      }
    }
  }
;
  for (GradleProjectStructureNode<?> n=node.getParent(); n != null; n=n.getParent()) {
    final GradleProjectStructureNodeDescriptor<?> descriptor=n.getDescriptor();
    if (n.getType() == GradleEntityType.SYNTHETIC) {
      continue;
    }
    if (descriptor.getAttributes() != GradleTextAttributes.GRADLE_LOCAL_CHANGE) {
      break;
    }
    Object id=descriptor.getElement();
    if (id instanceof GradleEntityId) {
      final Object entity=myIdMapper.mapIdToEntity((GradleEntityId)id);
      if (entity instanceof GradleEntity) {
        ((GradleEntity)entity).invite(visitor);
      }
    }
  }
  final Stack<GradleEntity> toProcess=new Stack<GradleEntity>();
  final Object id=node.getDescriptor().getElement();
  if (id instanceof GradleEntityId) {
    final Object entity=myIdMapper.mapIdToEntity((GradleEntityId)id);
    if (entity instanceof GradleEntity) {
      toProcess.push((GradleEntity)entity);
    }
  }
  recursive.set(true);
  while (!toProcess.isEmpty()) {
    final GradleEntity entity=toProcess.pop();
    entity.invite(visitor);
  }
}
