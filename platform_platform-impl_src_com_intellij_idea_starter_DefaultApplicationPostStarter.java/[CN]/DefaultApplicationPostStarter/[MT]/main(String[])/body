{
  SystemDock.updateMenu();
  final ApplicationEx app=ApplicationManagerEx.getApplicationEx();
  WindowManagerImpl windowManager=(WindowManagerImpl)WindowManager.getInstance();
  IdeEventQueue.getInstance().setWindowManager(windowManager);
  Ref<Boolean> willOpenProject=new Ref<Boolean>(Boolean.FALSE);
  AppLifecycleListener lifecyclePublisher=app.getMessageBus().syncPublisher(AppLifecycleListener.TOPIC);
  lifecyclePublisher.appFrameCreated(args,willOpenProject);
  LOG.info("App initialization took " + (System.nanoTime() - PluginManager.startupStart) / 1000000 + " ms");
  PluginManagerCore.dumpPluginClassStatistics();
  app.invokeAndWait(new Runnable(){
    @Override public void run(){
      if (mySplash != null) {
        mySplash.dispose();
        mySplash=null;
      }
    }
  }
,ModalityState.NON_MODAL);
  if (Registry.is("ide.firstStartup") && !SandboxUtil.isInsideSandbox()) {
    CustomizeUtil.show(true);
  }
  if (!willOpenProject.get()) {
    WelcomeFrame.showNow();
    lifecyclePublisher.welcomeScreenDisplayed();
  }
 else {
    windowManager.showFrame();
  }
  app.invokeLater(new Runnable(){
    @Override public void run(){
      Project projectFromCommandLine=null;
      if (myApplicationStarter.isPerformProjectLoad()) {
        projectFromCommandLine=loadProjectFromExternalCommandLine();
      }
      final MessageBus bus=ApplicationManager.getApplication().getMessageBus();
      bus.syncPublisher(AppLifecycleListener.TOPIC).appStarting(projectFromCommandLine);
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          PluginManager.reportPluginError();
        }
      }
);
      UsageTrigger.trigger(app.getName() + "app.started");
    }
  }
,ModalityState.NON_MODAL);
}
