{
  myBreakpointManager=breakpointManager;
  myDispatcher=EventDispatcher.create(XDependentBreakpointListener.class);
  myBreakpointManager.addBreakpointListener(new XBreakpointAdapter<XBreakpoint<?>>(){
    public void breakpointRemoved(    @NotNull final XBreakpoint<?> breakpoint){
      XDependentBreakpointInfo info=mySlave2Info.remove(breakpoint);
      if (info != null) {
        myMaster2Info.remove(info.myMasterBreakpoint,info);
      }
      Collection<XDependentBreakpointInfo> infos=myMaster2Info.removeAll((XBreakpointBase)breakpoint);
      if (infos != null) {
        for (        XDependentBreakpointInfo breakpointInfo : infos) {
          XDependentBreakpointInfo removed=mySlave2Info.remove(breakpointInfo.mySlaveBreakpoint);
          if (removed != null) {
            myDispatcher.getMulticaster().dependencyCleared(breakpointInfo.mySlaveBreakpoint);
          }
        }
      }
    }
  }
);
}
