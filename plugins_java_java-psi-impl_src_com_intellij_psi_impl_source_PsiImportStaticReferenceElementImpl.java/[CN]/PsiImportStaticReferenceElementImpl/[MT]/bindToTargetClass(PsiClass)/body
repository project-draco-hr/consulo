{
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null)   throw new IncorrectOperationException();
  final PsiJavaParserFacade parserFacade=JavaPsiFacade.getInstance(getProject()).getParserFacade();
  final CompositeElement newRef=(CompositeElement)parserFacade.createReferenceFromText(qualifiedName,null).getNode();
  if (getQualifier() != null) {
    replaceChildInternal(findChildByRole(ChildRole.QUALIFIER),newRef);
    return (PsiImportStaticStatement)getParent();
  }
 else {
    final LeafElement dot=Factory.createSingleLeafElement(JavaTokenType.DOT,".",0,1,SharedImplUtil.findCharTableByTree(newRef),getManager());
    newRef.rawInsertAfterMe(dot);
    final CompositeElement errorElement=Factory.createErrorElement(JavaErrorMessages.message("import.statement.identifier.or.asterisk.expected."));
    dot.rawInsertAfterMe(errorElement);
    final CompositeElement parentComposite=(CompositeElement)SourceTreeToPsiMap.psiElementToTree(getParent());
    parentComposite.addInternal(newRef,errorElement,this,Boolean.TRUE);
    parentComposite.deleteChildInternal(this);
    return (PsiImportStaticStatement)SourceTreeToPsiMap.treeElementToPsi(parentComposite);
  }
}
