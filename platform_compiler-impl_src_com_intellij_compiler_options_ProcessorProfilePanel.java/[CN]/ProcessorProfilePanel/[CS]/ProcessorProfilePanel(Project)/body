{
  super(new GridBagLayout());
  myProject=project;
  myCbEnableProcessing=new JCheckBox("Enable annotation processing");
{
    myRbClasspath=new JRadioButton("Obtain processors from project classpath");
    myRbProcessorsPath=new JRadioButton("Processor path:");
    ButtonGroup group=new ButtonGroup();
    group.add(myRbClasspath);
    group.add(myRbProcessorsPath);
  }
{
    myRbRelativeToContentRoot=new JRadioButton("Module content root");
    myRbRelativeToOutputRoot=new JRadioButton("Module output directory");
    final ButtonGroup group=new ButtonGroup();
    group.add(myRbRelativeToContentRoot);
    group.add(myRbRelativeToOutputRoot);
  }
  myProcessorPathField=new TextFieldWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createAllButJarContentsDescriptor();
      final VirtualFile[] files=FileChooser.chooseFiles(descriptor,myProcessorPathField,myProject,null);
      if (files.length > 0) {
        final StringBuilder builder=new StringBuilder();
        for (        VirtualFile file : files) {
          if (builder.length() > 0) {
            builder.append(File.pathSeparator);
          }
          builder.append(FileUtil.toSystemDependentName(file.getPath()));
        }
        myProcessorPathField.setText(builder.toString());
      }
    }
  }
);
  myProcessorTablePanel=new JPanel(new BorderLayout());
  myProcessorsModel=new ProcessorTableModel();
  myProcessorTablePanel.setBorder(IdeBorderFactory.createTitledBorder("Annotation Processors",false));
  myProcessorTable=new JBTable(myProcessorsModel);
  myProcessorTable.getEmptyText().setText("Compiler will run all automatically discovered processors");
  myProcessorPanel=createTablePanel(myProcessorTable);
  myProcessorTablePanel.add(myProcessorPanel,BorderLayout.CENTER);
  myOptionsTablePanel=new JPanel(new BorderLayout());
  myOptionsModel=new OptionsTableModel();
  myOptionsTablePanel.setBorder(IdeBorderFactory.createTitledBorder("Annotation Processor options",false));
  myOptionsTable=new JBTable(myOptionsModel);
  myOptionsTable.getEmptyText().setText("No processor-specific options configured");
  myOptionsPanel=createTablePanel(myOptionsTable);
  myOptionsTablePanel.add(myOptionsPanel,BorderLayout.CENTER);
  myGeneratedProductionDirField=new JTextField();
  myGeneratedTestsDirField=new JTextField();
  myWarninglabel=new JLabel("<html>WARNING!<br>" + "If option 'Clear output directory on rebuild' is enabled, " + "the entire contents of directories where generated sources are stored WILL BE CLEARED on rebuild.</html>");
  myWarninglabel.setFont(myWarninglabel.getFont().deriveFont(Font.BOLD));
  add(myCbEnableProcessing,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  add(myRbClasspath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(10,0,0,0),0,0));
  add(myRbProcessorsPath,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  add(myProcessorPathField,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  myStoreGenSourcesLabel=new JLabel("Store generated sources relative to: ");
  add(myStoreGenSourcesLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(15,5,0,0),0,0));
  add(myRbRelativeToOutputRoot,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(15,5,0,0),0,0));
  add(myRbRelativeToContentRoot,new GridBagConstraints(2,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(15,5,0,0),0,0));
  myProductionLabel=new JLabel("Production sources directory:");
  add(myProductionLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(myGeneratedProductionDirField,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  myTestLabel=new JLabel("Test sources directory:");
  add(myTestLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(myGeneratedTestsDirField,new GridBagConstraints(1,GridBagConstraints.RELATIVE,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(myProcessorTablePanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  add(myOptionsTablePanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  add(myWarninglabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,3,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  myRbClasspath.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  myProcessorTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        updateEnabledState();
      }
    }
  }
);
  myCbEnableProcessing.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  updateEnabledState();
}
