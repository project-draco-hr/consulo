{
  final THashSet<LookupElement> set=new THashSet<LookupElement>();
  final Condition<String> nameCondition=matcher == null ? null : new Condition<String>(){
    public boolean value(    String s){
      return matcher.prefixMatches(s);
    }
  }
;
  final JavaCompletionProcessor processor=new JavaCompletionProcessor(element,elementFilter,checkAccess,nameCondition);
  javaReference.processVariants(processor);
  final Collection<CompletionElement> plainResults=processor.getResults();
  final PsiType qualifierType=processor.getQualifierType();
  PsiType castedQualifierType=addQualifierCastingVariants(javaReference,processor,set,parameters);
  boolean mayHighlight=qualifierType != null && (castedQualifierType == null || !qualifierType.isAssignableFrom(castedQualifierType));
  for (  CompletionElement completionElement : plainResults) {
    LookupElement item=createLookupElement(completionElement,qualifierType);
    if (item != null) {
      set.add(mayHighlight ? highlightIfNeeded(qualifierType,item) : item);
    }
  }
  if (javaReference instanceof PsiReferenceExpression && !((PsiReferenceExpression)javaReference).isQualified()) {
    final StaticMemberProcessor memberProcessor=JavaGlobalMemberNameCompletionContributor.completeStaticMembers(element);
    memberProcessor.processMembersOfRegisteredClasses(matcher,new PairConsumer<PsiMember,PsiClass>(){
      @Override public void consume(      PsiMember member,      PsiClass psiClass){
        set.add(memberProcessor.createLookupElement(member,psiClass,true));
      }
    }
);
  }
  return set;
}
