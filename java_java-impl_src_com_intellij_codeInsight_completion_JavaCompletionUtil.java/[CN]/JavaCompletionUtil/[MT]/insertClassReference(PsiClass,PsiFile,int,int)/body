{
  final Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final PsiManager manager=file.getManager();
  final Document document=FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());
  final PsiReference reference=file.findReferenceAt(startOffset);
  if (reference != null) {
    final PsiElement resolved=reference.resolve();
    if (resolved instanceof PsiClass) {
      if (((PsiClass)resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass,resolved)) {
        return startOffset;
      }
    }
  }
  String name=psiClass.getName();
  document.replaceString(startOffset,endOffset,name);
  final RangeMarker toDelete=insertSpace(startOffset + name.length(),document);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  int newStartOffset=startOffset;
  PsiElement element=file.findElementAt(startOffset);
  if (element instanceof PsiIdentifier) {
    PsiElement parent=element.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified() && !(parent.getParent() instanceof PsiPackageStatement)) {
      PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)parent;
      if (!psiClass.getManager().areElementsEquivalent(psiClass,resolveReference(ref))) {
        final boolean staticImport=ref instanceof PsiImportStaticReferenceElement;
        PsiElement newElement=staticImport ? ((PsiImportStaticReferenceElement)ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass);
        RangeMarker marker=document.createRangeMarker(newElement.getTextRange());
        newElement=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(newElement);
        newStartOffset=marker.getStartOffset();
        if (!staticImport && newElement instanceof PsiJavaCodeReferenceElement && !psiClass.getManager().areElementsEquivalent(psiClass,resolveReference((PsiReference)newElement))) {
          final String qName=psiClass.getQualifiedName();
          if (qName != null) {
            document.replaceString(newStartOffset,newElement.getTextRange().getEndOffset(),qName);
          }
        }
      }
    }
  }
  if (toDelete.isValid()) {
    document.deleteString(toDelete.getStartOffset(),toDelete.getEndOffset());
  }
  return newStartOffset;
}
