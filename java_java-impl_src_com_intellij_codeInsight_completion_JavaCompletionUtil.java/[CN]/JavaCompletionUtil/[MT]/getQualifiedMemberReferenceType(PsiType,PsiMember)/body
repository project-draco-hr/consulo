{
  final Ref<PsiSubstitutor> subst=Ref.create(PsiSubstitutor.EMPTY);
class MyProcessor extends BaseScopeProcessor implements NameHint, ElementClassHint {
    public boolean execute(    PsiElement element,    ResolveState state){
      if (element == member) {
        subst.set(state.get(PsiSubstitutor.KEY));
      }
      return true;
    }
    public String getName(    ResolveState state){
      return member.getName();
    }
    public boolean shouldProcess(    DeclarationKind kind){
      return member instanceof PsiEnumConstant ? kind == DeclarationKind.ENUM_CONST : member instanceof PsiField ? kind == DeclarationKind.FIELD : kind == DeclarationKind.METHOD;
    }
    @Override public <T>T getHint(    Key<T> hintKey){
      return hintKey == NameHint.KEY || hintKey == ElementClassHint.KEY ? (T)this : null;
    }
  }
  PsiScopesUtil.processTypeDeclarations(qualifierType,member,new MyProcessor());
  PsiType rawType=member instanceof PsiField ? ((PsiField)member).getType() : ((PsiMethod)member).getReturnType();
  return subst.get().substitute(rawType);
}
