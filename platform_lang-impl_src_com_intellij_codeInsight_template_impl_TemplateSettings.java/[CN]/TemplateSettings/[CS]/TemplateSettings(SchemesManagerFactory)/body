{
  SchemeProcessor<TemplateGroup> processor=new BaseSchemeProcessor<TemplateGroup>(){
    @Override @Nullable public TemplateGroup readScheme(    @NotNull final Document schemeContent) throws InvalidDataException, IOException, JDOMException {
      return readTemplateFile(schemeContent,schemeContent.getRootElement().getAttributeValue("group"),false,false,getClass().getClassLoader());
    }
    @Override public boolean shouldBeSaved(    @NotNull final TemplateGroup template){
      for (      TemplateImpl t : template.getElements()) {
        if (differsFromDefault(t)) {
          return true;
        }
      }
      return false;
    }
    @Override public Parent writeScheme(    @NotNull final TemplateGroup template) throws WriteExternalException {
      Element templateSetElement=new Element(TEMPLATE_SET);
      templateSetElement.setAttribute(GROUP,template.getName());
      for (      TemplateImpl t : template.getElements()) {
        if (differsFromDefault(t)) {
          saveTemplate(t,templateSetElement);
        }
      }
      return templateSetElement;
    }
    @Override public void initScheme(    @NotNull final TemplateGroup scheme){
      Collection<TemplateImpl> templates=scheme.getElements();
      for (      TemplateImpl template : templates) {
        addTemplateImpl(template);
      }
    }
    @Override public void onSchemeAdded(    @NotNull final TemplateGroup scheme){
      for (      TemplateImpl template : scheme.getElements()) {
        addTemplateImpl(template);
      }
    }
    @Override public void onSchemeDeleted(    @NotNull final TemplateGroup scheme){
      for (      TemplateImpl template : scheme.getElements()) {
        removeTemplate(template);
      }
    }
  }
;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,processor,RoamingType.PER_USER);
  loadTemplates();
}
