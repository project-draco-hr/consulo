{
  myCommanderPanel=new MyCommanderPanel(myProject);
  myTreeStructure=new MyStructureTreeStructure();
  List<FileStructureFilter> fileStructureFilters=new ArrayList<FileStructureFilter>();
  List<FileStructureNodeProvider> fileStructureNodeProviders=new ArrayList<FileStructureNodeProvider>();
  if (myTreeActionsOwner != null) {
    for (    Filter filter : myBaseTreeModel.getFilters()) {
      if (filter instanceof FileStructureFilter) {
        final FileStructureFilter fsFilter=(FileStructureFilter)filter;
        myTreeActionsOwner.setActionIncluded(fsFilter,true);
        fileStructureFilters.add(fsFilter);
      }
    }
    if (myBaseTreeModel instanceof ProvidingTreeModel) {
      for (      NodeProvider provider : ((ProvidingTreeModel)myBaseTreeModel).getNodeProviders()) {
        if (provider instanceof FileStructureNodeProvider) {
          fileStructureNodeProviders.add((FileStructureNodeProvider)provider);
        }
      }
    }
  }
  PsiFile psiFile=getPsiFile(myProject);
  boolean showRoot=isShowRoot(psiFile);
  ProjectListBuilder projectListBuilder=new ProjectListBuilder(myProject,myCommanderPanel,myTreeStructure,null,showRoot){
    @Override protected boolean shouldEnterSingleTopLevelElement(    Object rootChild){
      return myBaseTreeModel.shouldEnterElement(((StructureViewTreeElement)((AbstractTreeNode)rootChild).getValue()).getValue());
    }
    protected boolean nodeIsAcceptableForElement(    AbstractTreeNode node,    Object element){
      return Comparing.equal(((StructureViewTreeElement)node.getValue()).getValue(),element);
    }
    protected void refreshSelection(){
      myCommanderPanel.scrollSelectionInView();
      if (myShouldNarrowDown) {
        myCommanderPanel.updateSpeedSearch();
      }
    }
    protected List<AbstractTreeNode> getAllAcceptableNodes(    final Object[] childElements,    VirtualFile file){
      ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
      for (      Object childElement : childElements) {
        result.add((AbstractTreeNode)childElement);
      }
      return result;
    }
  }
;
  myCommanderPanel.setBuilder(projectListBuilder);
  myCommanderPanel.setTitlePanelVisible(false);
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      final boolean succeeded=myCommanderPanel.navigateSelectedElement();
      if (succeeded) {
        unregisterCustomShortcutSet(myCommanderPanel);
      }
    }
  }
.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),myCommanderPanel);
  myCommanderPanel.setPreferredSize(new Dimension(400,500));
  JPanel panel=new JPanel(new BorderLayout());
  JPanel comboPanel=new JPanel(new GridLayout(0,2,0,0));
  addNarrowDownCheckbox(comboPanel);
  for (  FileStructureFilter filter : fileStructureFilters) {
    addCheckbox(comboPanel,filter);
  }
  for (  FileStructureNodeProvider provider : fileStructureNodeProviders) {
    addCheckbox(comboPanel,provider);
  }
  myCommanderPanel.setBorder(IdeBorderFactory.createBorder(SideBorder.TOP));
  panel.add(comboPanel,BorderLayout.NORTH);
  panel.add(myCommanderPanel,BorderLayout.CENTER);
  return panel;
}
