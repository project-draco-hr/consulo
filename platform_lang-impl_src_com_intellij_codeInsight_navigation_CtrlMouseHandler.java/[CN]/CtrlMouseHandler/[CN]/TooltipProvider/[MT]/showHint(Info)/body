{
  if (myDisposed || myEditor.isDisposed())   return;
  Component internalComponent=myEditor.getContentComponent();
  if (myHighlighter != null) {
    if (!info.isSimilarTo(myHighlighter.getStoredInfo())) {
      disposeHighlighter();
    }
 else {
      internalComponent.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      return;
    }
  }
  if (!info.isValid(myEditor.getDocument())) {
    return;
  }
  myHighlighter=installHighlighterSet(info,myEditor);
  DocInfo docInfo=info.getInfo();
  if (docInfo.text == null)   return;
  HyperlinkListener listener=(docInfo.docProvider == null || docInfo.context == null) ? null : new QuickDocHyperlinkListener(myProject,docInfo.docProvider,docInfo.context);
  JComponent label=HintUtil.createInformationLabel(docInfo.text,listener);
  final LightweightHint hint=new LightweightHint(label);
  final HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();
  Point p=HintManagerImpl.getHintPosition(hint,myEditor,myPosition,HintManager.ABOVE);
  hintManager.showEditorHint(hint,myEditor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false,HintManagerImpl.createHintHint(myEditor,p,hint,HintManager.ABOVE).setContentActive(false));
}
