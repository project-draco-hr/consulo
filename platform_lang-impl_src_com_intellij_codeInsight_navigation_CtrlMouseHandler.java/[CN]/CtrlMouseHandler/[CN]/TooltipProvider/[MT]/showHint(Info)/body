{
  if (myDisposed)   return;
  Component internalComponent=myEditor.getContentComponent();
  if (myHighlighter != null) {
    if (!info.isSimilarTo(myHighlighter.getStoredInfo())) {
      disposeHighlighter();
    }
 else {
      internalComponent.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      return;
    }
  }
  if (info.isValid(myEditor.getDocument())) {
    myHighlighter=installHightlighterSet(info,myEditor);
    String text=info.getInfo();
    if (text == null)     return;
    JComponent label=HintUtil.createInformationLabel(text);
    final LightweightHint hint=new LightweightHint(label);
    final HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();
    label.addMouseMotionListener(new MouseMotionAdapter(){
      public void mouseMoved(      MouseEvent e){
        hintManager.hideAllHints();
      }
    }
);
    Point p=HintManagerImpl.getHintPosition(hint,myEditor,myPosition,HintManager.ABOVE);
    hintManager.showEditorHint(hint,myEditor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false);
  }
}
