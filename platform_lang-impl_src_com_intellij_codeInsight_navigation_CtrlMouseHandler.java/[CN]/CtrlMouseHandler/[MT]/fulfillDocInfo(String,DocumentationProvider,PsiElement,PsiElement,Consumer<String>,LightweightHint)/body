{
  myDocAlarm.cancelAllRequests();
  myDocAlarm.addRequest(new Runnable(){
    @Override public void run(){
      final Ref<String> fullTextRef=new Ref<String>();
      final Ref<String> qualifiedNameRef=new Ref<String>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          try {
            fullTextRef.set(provider.generateDoc(anchorElement,originalElement));
          }
 catch (          IndexNotReadyException e) {
            fullTextRef.set("Documentation is not available while indexing is in progress");
          }
          if (anchorElement instanceof PsiQualifiedNamedElement) {
            qualifiedNameRef.set(((PsiQualifiedNamedElement)anchorElement).getQualifiedName());
          }
        }
      }
);
      String fullText=fullTextRef.get();
      if (fullText == null) {
        return;
      }
      final String updatedText=DocPreviewUtil.buildPreview(header,qualifiedNameRef.get(),fullText);
      final String newHtml=HintUtil.prepareHintText(updatedText,HintUtil.getInformationHint());
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          JComponent component=hint.getComponent();
          Dimension oldSize=component.getPreferredSize();
          newTextConsumer.consume(newHtml);
          final int widthIncrease;
          if (component instanceof QuickDocInfoPane) {
            int buttonWidth=((QuickDocInfoPane)component).getButtonWidth();
            widthIncrease=calculateWidthIncrease(buttonWidth,updatedText);
          }
 else {
            widthIncrease=0;
          }
          if (oldSize == null) {
            return;
          }
          Dimension newSize=component.getPreferredSize();
          if (newSize.width + widthIncrease == oldSize.width) {
            return;
          }
          component.setPreferredSize(new Dimension(newSize.width + widthIncrease,newSize.height));
          if (hint.isRealPopup()) {
            TooltipProvider tooltipProvider=myTooltipProvider;
            if (tooltipProvider != null) {
              hint.hide();
              tooltipProvider.showHint(new LightweightHint(component));
            }
 else {
              component.setPreferredSize(new Dimension(newSize.width + widthIncrease,oldSize.height));
              hint.pack();
            }
            return;
          }
          Container topLevelLayeredPaneChild=null;
          boolean adjustBounds=false;
          for (Container current=component.getParent(); current != null; current=current.getParent()) {
            if (current instanceof JLayeredPane) {
              adjustBounds=true;
              break;
            }
 else {
              topLevelLayeredPaneChild=current;
            }
          }
          if (adjustBounds && topLevelLayeredPaneChild != null) {
            Rectangle bounds=topLevelLayeredPaneChild.getBounds();
            topLevelLayeredPaneChild.setBounds(bounds.x,bounds.y,bounds.width + newSize.width + widthIncrease - oldSize.width,bounds.height);
          }
        }
      }
);
    }
  }
,0);
}
