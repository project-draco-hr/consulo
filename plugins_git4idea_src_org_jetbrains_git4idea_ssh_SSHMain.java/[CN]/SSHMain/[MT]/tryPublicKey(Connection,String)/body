{
  try {
    final File file=new File(keyPath);
    if (file.exists()) {
      String passphrase=null;
      char[] text=FileUtil.loadFileText(file);
      if (isEncryptedKey(text)) {
        int i;
        for (i=myHost.getNumberOfPasswordPrompts(); i > 0; i--) {
          passphrase=myXmlRpcClient.askPassphrase(myHandlerNo,getUserHostString(),keyPath,myLastError);
          if (passphrase == null) {
            return false;
          }
 else {
            try {
              PEMDecoder.decode(text,passphrase);
              myLastError="";
            }
 catch (            IOException e) {
              myLastError=GitBundle.message("sshmain.invalidpassphrase",keyPath);
              continue;
            }
            break;
          }
        }
        if (i == 0) {
          myLastError=GitBundle.message("sshmain.too.mush.passphrase.guesses",keyPath,myHost.getNumberOfPasswordPrompts());
          return false;
        }
      }
      if (c.authenticateWithPublicKey(myHost.getUser(),text,passphrase)) {
        myLastError="";
        return true;
      }
 else {
        if (passphrase != null) {
          myLastError=GitBundle.message("sshmain.pk.authenitication.failed",keyPath);
        }
 else {
          myLastError="";
        }
      }
    }
    return false;
  }
 catch (  Exception e) {
    return false;
  }
}
