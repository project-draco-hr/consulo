{
  for (  String method : myHost.getPreferredMethods()) {
    if (c.isAuthenticationComplete()) {
      return;
    }
    if (PUBLICKEY_METHOD.equals(method)) {
      if (!myHost.supportsPubkeyAuthentication()) {
        continue;
      }
      if (!c.isAuthMethodAvailable(myHost.getUser(),PUBLICKEY_METHOD)) {
        continue;
      }
      File key=myHost.getIdentityFile();
      if (key == null) {
        for (        String a : myHost.getHostKeyAlgorithms()) {
          if (SSH_RSA_ALGORITHM.equals(a)) {
            if (tryPublicKey(c,idRSAPath)) {
              return;
            }
          }
 else           if (SSH_DSS_ALGORITHM.equals(a)) {
            if (tryPublicKey(c,idDSAPath)) {
              return;
            }
          }
        }
      }
 else {
        if (tryPublicKey(c,key.getPath())) {
          return;
        }
      }
    }
 else     if (KEYBOARD_INTERACTIVE_METHOD.equals(method)) {
      if (!c.isAuthMethodAvailable(myHost.getUser(),KEYBOARD_INTERACTIVE_METHOD)) {
        continue;
      }
      InteractiveSupport ic=new InteractiveSupport();
      for (int i=myHost.getNumberOfPasswordPrompts(); i > 0; i--) {
        if (c.isAuthenticationComplete()) {
          return;
        }
        if (c.authenticateWithKeyboardInteractive(myHost.getUser(),ic)) {
          myLastError="";
          return;
        }
 else {
          myLastError=GitBundle.getString("sshmain.keyboard.interactive.failed");
        }
        if (ic.myPromptCount == 0 || ic.myCancelled) {
          myLastError="";
          break;
        }
      }
    }
 else     if (PASSWORD_METHOD.equals(method)) {
      if (!myHost.supportsPasswordAuthentication()) {
        continue;
      }
      if (!c.isAuthMethodAvailable(myHost.getUser(),PASSWORD_METHOD)) {
        continue;
      }
      for (int i=myHost.getNumberOfPasswordPrompts(); i > 0; i--) {
        String password=myXmlRpcClient.askPassword(myHandlerNo,getUserHostString(),myLastError);
        if (password == null) {
          break;
        }
 else {
          if (c.authenticateWithPassword(myHost.getUser(),password)) {
            myLastError="";
            return;
          }
 else {
            myLastError=GitBundle.getString("sshmain.password.failed");
          }
        }
      }
    }
  }
  throw new IOException("Authentication failed");
}
