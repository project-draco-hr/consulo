{
  myEditingRow=row;
  final DefaultComboBoxModel model=(DefaultComboBoxModel)myCbx.getModel();
  model.removeAllElements();
  model.addElement(null);
  final String[] rProps=PropertyUtil.getReadableProperties(myData.myBeanClass,true);
  final String[] wProps=PropertyUtil.getWritableProperties(myData.myBeanClass,true);
  final ArrayList<BeanProperty> rwProps=new ArrayList<BeanProperty>();
  outer:   for (int i=rProps.length - 1; i >= 0; i--) {
    final String propName=rProps[i];
    if (ArrayUtil.find(wProps,propName) != -1) {
      LOG.assertTrue(!rwProps.contains(propName));
      final PsiMethod getter=PropertyUtil.findPropertyGetter(myData.myBeanClass,propName,false,true);
      LOG.assertTrue(getter != null);
      final PsiType returnType=getter.getReturnType();
      LOG.assertTrue(returnType != null);
      final String typeName=returnType.getCanonicalText();
      LOG.assertTrue(typeName != null);
      if (!"boolean".equals(typeName) && !"java.lang.String".equals(typeName)) {
        continue;
      }
      for (int j=myData.myBindings.length - 1; j >= 0; j--) {
        final BeanProperty _property=myData.myBindings[j].myBeanProperty;
        if (j != row && _property != null && propName.equals(_property.myName)) {
          continue outer;
        }
      }
      if (!canConvert(myData.myBindings[row].myFormProperty.getComponentPropertyClassName(),typeName)) {
        continue;
      }
      rwProps.add(new BeanProperty(propName,typeName));
    }
  }
  Collections.sort(rwProps);
  for (int i=0; i < rwProps.size(); i++) {
    model.addElement(rwProps.get(i));
  }
  if (myData.myBindings[row].myBeanProperty != null) {
    myCbx.setSelectedItem(myData.myBindings[row].myBeanProperty);
  }
 else {
    myCbx.setSelectedIndex(0);
  }
  return myCbx;
}
