{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String methodName=method.getName();
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList == null) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters == null) {
    return;
  }
  final int numParameters=parameters.length;
  PsiClass ancestorClass=aClass.getSuperClass();
  final Set<PsiClass> visitedClasses=new HashSet<PsiClass>();
  while (ancestorClass != null) {
    if (!visitedClasses.add(ancestorClass)) {
      return;
    }
    final PsiMethod overridingMethod=ancestorClass.findMethodBySignature(method,false);
    if (overridingMethod == null) {
      final PsiMethod[] methods=ancestorClass.findMethodsByName(methodName,false);
      for (      final PsiMethod testMethod : methods) {
        final PsiParameterList testParametersList=testMethod.getParameterList();
        if (testParametersList == null) {
          continue;
        }
        final int numTestParameters=testParametersList.getParameters().length;
        if (numParameters != numTestParameters) {
          continue;
        }
        if (testMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
          registerMethodError(method);
          return;
        }
      }
    }
    ancestorClass=ancestorClass.getSuperClass();
  }
}
