{
  final LwContainer parent=component.getParent();
  final String variable=getVariable(component,component2TempVariable,class2variableIndex);
  final String binding=component.getBinding();
  if (binding != null) {
    myBuffer.append(binding);
  }
 else {
    myBuffer.append("final ");
    myBuffer.append(component.getComponentClassName());
    myBuffer.append(" ");
    myBuffer.append(variable);
  }
  myBuffer.append('=');
  startConstructor(component.getComponentClassName());
  endConstructor();
  if (component instanceof LwScrollPane) {
  }
 else   if (component instanceof LwTabbedPane) {
  }
 else   if (component instanceof LwSplitPane) {
  }
 else   if (component instanceof LwContainer) {
    final LwContainer container=(LwContainer)component;
    if (container.isXY()) {
      if (container.getComponentCount() != 0) {
        throw new IllegalStateException("only empty xys are accepted");
      }
    }
 else {
      if (container.isGrid()) {
        final GridLayoutManager layout=(GridLayoutManager)container.getLayout();
        startMethodCall(variable,"setLayout");
        startConstructor(GridLayoutManager.class.getName());
        push(layout.getRowCount());
        push(layout.getColumnCount());
        newInsets(layout.getMargin());
        push(layout.getHGap());
        push(layout.getVGap());
        if (layout.isSameSizeHorizontally() || layout.isSameSizeVertically()) {
          push(layout.isSameSizeHorizontally());
          push(layout.isSameSizeVertically());
        }
        endConstructor();
        endMethod();
      }
 else       if (container.isXY()) {
        throw new IllegalArgumentException("XY is not supported");
      }
 else {
        throw new IllegalArgumentException("unknown layout: " + container.getLayout());
      }
    }
  }
  final LwIntrospectedProperty[] introspectedProperties=component.getAssignedIntrospectedProperties();
  Arrays.sort(introspectedProperties,new Comparator<LwIntrospectedProperty>(){
    public int compare(    LwIntrospectedProperty p1,    LwIntrospectedProperty p2){
      return p1.getName().compareTo(p2.getName());
    }
  }
);
  for (int i=0; i < introspectedProperties.length; i++) {
    final LwIntrospectedProperty property=introspectedProperties[i];
    Object value=component.getPropertyValue(property);
    final String componentClass=component.getComponentClassName();
    final boolean isTextWithMnemonicProperty="text".equals(property.getName()) && (isAssignableFrom(AbstractButton.class.getName(),componentClass,globalSearchScope) || isAssignableFrom(JLabel.class.getName(),componentClass,globalSearchScope));
    if (property instanceof LwRbIntroStringProperty) {
      final StringDescriptor descriptor=(StringDescriptor)value;
      if (descriptor.getValue() == null) {
        if (isTextWithMnemonicProperty) {
          startStaticMethodCall(SupportCode.class,"setTextFromBundle");
          pushVar(variable);
          push(descriptor.getBundleName());
          push(descriptor.getKey());
          endMethod();
        }
 else {
          startMethodCall(variable,property.getWriteMethodName());
          push(descriptor);
          endMethod();
        }
        continue;
      }
 else {
        value=descriptor.getValue();
      }
    }
    SupportCode.TextWithMnemonic textWithMnemonic=null;
    if (isTextWithMnemonicProperty) {
      textWithMnemonic=SupportCode.parseText((String)value);
      value=textWithMnemonic.myText;
    }
    startMethodCall(variable,property.getWriteMethodName());
    final String propertyClass=property.getPropertyClassName();
    if (propertyClass.equals(Dimension.class.getName())) {
      newDimension((Dimension)value);
    }
 else     if (propertyClass.equals(Integer.class.getName())) {
      push(((Integer)value).intValue());
    }
 else     if (propertyClass.equals(Double.class.getName())) {
      push(((Double)value).doubleValue());
    }
 else     if (propertyClass.equals(Boolean.class.getName())) {
      push(((Boolean)value).booleanValue());
    }
 else     if (propertyClass.equals(Rectangle.class.getName())) {
      newRectangle((Rectangle)value);
    }
 else     if (propertyClass.equals(Insets.class.getName())) {
      newInsets((Insets)value);
    }
 else     if (propertyClass.equals(String.class.getName())) {
      push((String)value);
    }
 else {
      throw new RuntimeException("unexpected property class: " + propertyClass);
    }
    endMethod();
    if (!isTextWithMnemonicProperty) {
      continue;
    }
    if (textWithMnemonic.myMnemonicIndex == -1) {
      continue;
    }
    if (isAssignableFrom(AbstractButton.class.getName(),componentClass,globalSearchScope)) {
      startMethodCall(variable,"setMnemonic");
      push(textWithMnemonic.getMnemonicChar());
      endMethod();
      startStaticMethodCall(SupportCode.class,"setDisplayedMnemonicIndex");
      pushVar(variable);
      push(textWithMnemonic.myMnemonicIndex);
      endMethod();
    }
 else     if (isAssignableFrom(JLabel.class.getName(),componentClass,globalSearchScope)) {
      startMethodCall(variable,"setDisplayedMnemonic");
      push(textWithMnemonic.getMnemonicChar());
      endMethod();
      startStaticMethodCall(SupportCode.class,"setDisplayedMnemonicIndex");
      pushVar(variable);
      push(textWithMnemonic.myMnemonicIndex);
      endMethod();
    }
  }
  if (!(component.getParent() instanceof LwRootContainer)) {
    if (parent instanceof LwScrollPane) {
      startMethodCall(getVariable(parent,component2TempVariable,class2variableIndex),"setViewportView");
      pushVar(variable);
      endMethod();
    }
 else     if (parent instanceof LwTabbedPane) {
      final LwTabbedPane.Constraints tabConstraints=(LwTabbedPane.Constraints)component.getCustomLayoutConstraints();
      if (tabConstraints == null) {
        throw new IllegalArgumentException("tab constraints cannot be null: " + component.getId());
      }
      startMethodCall(getVariable(parent,component2TempVariable,class2variableIndex),"addTab");
      push(tabConstraints.myTitle);
      pushVar(variable);
      endMethod();
    }
 else     if (parent instanceof LwSplitPane) {
      final String methodName=LwSplitPane.POSITION_LEFT.equals(component.getCustomLayoutConstraints()) ? "setLeftComponent" : "setRightComponent";
      startMethodCall(getVariable(parent,component2TempVariable,class2variableIndex),methodName);
      pushVar(variable);
      endMethod();
    }
 else {
      startMethodCall(getVariable(parent,component2TempVariable,class2variableIndex),"add");
      pushVar(variable);
      addNewGridConstraints(component);
      endMethod();
    }
  }
  if (component instanceof LwContainer) {
    final LwContainer container=(LwContainer)component;
    final BorderType borderType=container.getBorderType();
    final StringDescriptor borderTitle=container.getBorderTitle();
    final String borderFactoryMethodName=borderType.getBorderFactoryMethodName();
    final boolean borderNone=borderType.equals(BorderType.NONE);
    if (!borderNone || borderTitle != null) {
      startMethodCall(variable,"setBorder");
      startStaticMethodCall(BorderFactory.class,"createTitledBorder");
      if (!borderNone) {
        startStaticMethodCall(BorderFactory.class,borderFactoryMethodName);
        endMethod();
      }
      push(borderTitle);
      endMethod();
      endMethod();
    }
    for (int i=0; i < container.getComponentCount(); i++) {
      generateSetupCodeForComponent((LwComponent)container.getComponent(i),component2TempVariable,class2variableIndex,globalSearchScope);
    }
  }
}
