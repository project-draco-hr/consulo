{
  myBuffer=new StringBuffer();
  myIsFirstParameterStack=new Stack<Boolean>();
  final HashMap<LwComponent,String> component2variable=new HashMap<LwComponent,String>();
  final HashMap<String,Integer> class2variableIndex=new HashMap<String,Integer>();
  if (rootContainer.getComponentCount() != 1) {
    throw new CodeGenerationException("There should be only one component at the top level");
  }
  if (containsNotEmptyPanelsWithXYLayout((LwComponent)rootContainer.getComponent(0))) {
    throw new CodeGenerationException("There are non empty panels with XY layout. Please lay them out in a grid.");
  }
  final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module);
  generateSetupCodeForComponent((LwComponent)rootContainer.getComponent(0),component2variable,class2variableIndex,scope);
  final String methodText=myBuffer.toString();
  final PsiManager psiManager=PsiManager.getInstance(module.getProject());
  final PsiElementFactory elementFactory=psiManager.getElementFactory();
  final PsiClass aClass=FormEditingUtil.findClassToBind(module,rootContainer.getClassToBind());
  if (aClass == null) {
    throw new ClassToBindNotFoundException("Class to bind not found: " + rootContainer.getClassToBind());
  }
  cleanup(aClass);
  final PsiClass fakeClass=elementFactory.createClassFromText("{\n" + "// GUI initializer generated by IntelliJ IDEA GUI Designer \n" + "// >>> IMPORTANT!! <<<\n"+ "// DO NOT EDIT OR ADD ANY CODE HERE!\n"+ "" + METHOD_NAME + "();\n"+ "}\n"+ "\n"+ "/** Method generated by IntelliJ IDEA GUI Designer\n"+ " * >>> IMPORTANT!! <<<\n"+ " * DO NOT edit this method OR call it in your code!\t"+ " */\n"+ "private void "+ METHOD_NAME+ "()\n"+ "{\n"+ methodText+ "}\n",null);
  final PsiElement method=aClass.add(fakeClass.getMethods()[0]);
  final PsiElement initializer=aClass.addBefore(fakeClass.getInitializers()[0],method);
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(module.getProject());
  codeStyleManager.shortenClassReferences(method);
  codeStyleManager.reformat(method);
  codeStyleManager.shortenClassReferences(initializer);
  codeStyleManager.reformat(initializer);
}
