{
  final GrExpression initializerGroovy=getInitializerGroovy();
  List<Set<String>> namedParameters=new LinkedList<Set<String>>();
  if (initializerGroovy instanceof GrClosableBlock) {
    final GrClosableBlock closure=(GrClosableBlock)initializerGroovy;
    final PsiParameter[] parameters=closure.getAllParameters();
    final List<PsiParameter> parameterList=Arrays.asList(parameters);
    for (int i=0, parameterListSize=parameterList.size(); i < parameterListSize; i++) {
      PsiParameter parameter=parameterList.get(i);
      final String paramName=parameter.getName();
      final HashSet<String> set=new HashSet<String>();
      namedParameters.add(i,set);
      closure.accept(new GroovyRecursiveElementVisitor(){
        @Override public void visitReferenceExpression(        GrReferenceExpression referenceExpression){
          final GrExpression expression=referenceExpression.getQualifierExpression();
          if (!(expression instanceof GrReferenceExpression)) {
            super.visitReferenceExpression(referenceExpression);
            return;
          }
          final GrReferenceExpression qualifierExpr=(GrReferenceExpression)expression;
          if (paramName.equals(qualifierExpr.getName())) {
            set.add(referenceExpression.getName());
          }
          super.visitReferenceExpression(referenceExpression);
        }
      }
);
    }
  }
  return namedParameters.toArray(new HashSet[0]);
}
