{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (parent == null) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length > 1) {
    return;
  }
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final StringBuilder newExpression=new StringBuilder();
  final PsiElement greatGrandParent=grandParent.getParent();
  final boolean not;
  final PsiPrefixExpression prefixExpression;
  if (greatGrandParent instanceof PsiPrefixExpression) {
    prefixExpression=(PsiPrefixExpression)greatGrandParent;
    final IElementType tokenType=prefixExpression.getOperationTokenType();
    not=JavaTokenType.EXCL == tokenType;
  }
 else {
    prefixExpression=null;
    not=false;
  }
  newExpression.append(qualifier.getText());
  if (not) {
    newExpression.append("!=");
  }
 else {
    newExpression.append("==");
  }
  if (arguments.length == 1) {
    newExpression.append(arguments[0].getText());
  }
  if (not) {
    replaceExpression(prefixExpression,newExpression.toString());
  }
 else {
    replaceExpression(methodCallExpression,newExpression.toString());
  }
}
