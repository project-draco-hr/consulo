{
  CharSequence contentAsText=content.getContentAsText();
  if (CharArrayUtil.indexOf(contentAsText,XsltSupport.XSLT_NS,0) == -1)   return FileIncludeInfo.EMPTY;
  final ArrayList<FileIncludeInfo> infos=new ArrayList<FileIncludeInfo>();
  NanoXmlUtil.IXMLBuilderAdapter builder=new NanoXmlUtil.IXMLBuilderAdapter(){
    boolean isXslt;
    boolean isInclude;
    @Override public void startElement(    String name,    String nsPrefix,    String nsURI,    String systemID,    int lineNr) throws Exception {
      boolean isXsltTag=XsltSupport.XSLT_NS.equals(nsURI);
      if (!isXslt) {
        if (!isXsltTag) {
          throw new NanoXmlUtil.ParserStoppedException();
        }
 else {
          isXslt=true;
        }
      }
      isInclude=isXsltTag && ("include".equals(name) || "import".equals(name));
    }
    @Override public void addAttribute(    String key,    String nsPrefix,    String nsURI,    String value,    String type) throws Exception {
      if (isInclude && "href".equals(key)) {
        infos.add(new FileIncludeInfo(value));
      }
    }
    @Override public void endElement(    String name,    String nsPrefix,    String nsURI) throws Exception {
      isInclude=false;
    }
  }
;
  NanoXmlUtil.parse(new CharSequenceReader(contentAsText),builder);
  return infos.toArray(new FileIncludeInfo[infos.size()]);
}
