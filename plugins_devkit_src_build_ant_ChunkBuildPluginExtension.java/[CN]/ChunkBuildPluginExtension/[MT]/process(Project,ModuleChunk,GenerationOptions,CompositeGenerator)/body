{
  final Module[] modules=chunk.getModules();
  if (isPlugins(modules)) {
    final BuildTargetsFactory factory=BuildTargetsFactory.getInstance();
    final @NonNls String explodedPathProperty="plugin.dir.exploded";
    final @NonNls String jarPathProperty="plugin.path.jar";
    factory.init(chunk,genOptions,explodedPathProperty,new Function<String,String>(){
      @SuppressWarnings({"HardCodedStringLiteral"}) public String fun(      final String name){
        return "plugin.build.exploded." + BuildProperties.convertName(name);
      }
    }
,new Function<String,String>(){
      @SuppressWarnings({"HardCodedStringLiteral"}) public String fun(      final String name){
        return BuildProperties.convertName(name) + ".plugin.exploded.dir";
      }
    }
,jarPathProperty,new Function<String,String>(){
      @SuppressWarnings({"HardCodedStringLiteral"}) public String fun(      final String name){
        return "plugin.build.jar." + BuildProperties.convertName(name);
      }
    }
);
    final Set<Library> libs=new HashSet<Library>();
    PluginBuildUtil.getLibraries(modules[0],libs);
    @NonNls String jarPath=chunk.getBaseDir().getPath() + "/" + chunk.getName();
    if (libs.isEmpty()) {
      jarPath+=".jar";
    }
 else {
      jarPath+=".zip";
    }
    generator.add(factory.createCompositeBuildTarget("plugin.build." + BuildProperties.convertName(factory.getModuleName()),DevKitBundle.message("ant.build.description",chunk.getName()),new Function<Module,String>(){
      @Nullable public String fun(      final Module module){
        return BuildProperties.getCompileTargetName(module.getName());
      }
    }
,jarPath));
    generator.add(factory.createComment(DevKitBundle.message("ant.exploded.comment",chunk.getName(),explodedPathProperty)),1);
    generator.add(factory.createBuildExplodedTarget(DevKitBundle.message("ant.exploded.description") + chunk.getName() + "\'"));
    generator.add(factory.createComment(DevKitBundle.message("ant.build.jar.comment",chunk.getName(),jarPathProperty)),1);
    generator.add(new BuildJarTarget(chunk,genOptions,(PluginModuleBuildProperties)factory.getModuleBuildProperties()));
  }
}
