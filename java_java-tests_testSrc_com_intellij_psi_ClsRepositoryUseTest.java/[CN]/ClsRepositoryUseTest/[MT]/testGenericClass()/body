{
  disableJdk();
  PsiClass map=myJavaFacade.findClass("java.util.HashMap",RESOLVE_SCOPE);
  PsiMethod entrySet=map.findMethodsByName("entrySet",false)[0];
  PsiClassType ret=(PsiClassType)entrySet.getReturnType();
  final PsiClassType.ClassResolveResult setResolveResult=ret.resolveGenerics();
  assertEquals("java.util.Set",setResolveResult.getElement().getQualifiedName());
  final PsiTypeParameter typeParameter=setResolveResult.getElement().getTypeParameters()[0];
  final PsiType substResult=setResolveResult.getSubstitutor().substitute(typeParameter);
  assertTrue(substResult instanceof PsiWildcardType);
  assertTrue(((PsiWildcardType)substResult).isExtends());
  PsiClassType setType=(PsiClassType)((PsiWildcardType)substResult).getBound();
  final PsiClassType.ClassResolveResult setTypeResolveResult=setType.resolveGenerics();
  assertEquals("java.util.Map.Entry",setTypeResolveResult.getElement().getQualifiedName());
  final PsiTypeParameter[] typeParameters=setTypeResolveResult.getElement().getTypeParameters();
  assertEquals(2,typeParameters.length);
  PsiType[] mapParams=new PsiType[]{setTypeResolveResult.getSubstitutor().substitute(typeParameters[0]),setTypeResolveResult.getSubstitutor().substitute(typeParameters[1])};
  assertEquals(2,mapParams.length);
  assertEquals("K",mapParams[0].getCanonicalText());
  assertTrue(((PsiClassType)mapParams[0]).resolve() instanceof PsiTypeParameter);
  assertEquals("V",mapParams[1].getCanonicalText());
  assertTrue(((PsiClassType)mapParams[1]).resolve() instanceof PsiTypeParameter);
}
