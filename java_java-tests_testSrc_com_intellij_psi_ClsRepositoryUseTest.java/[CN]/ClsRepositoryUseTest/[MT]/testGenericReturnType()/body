{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      final ModifiableRootModel rootModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
      rootModel.setSdk(null);
      rootModel.commit();
    }
  }
);
  final PsiClass map=myJavaFacade.findClass("java.util.Map",RESOLVE_SCOPE);
  final PsiElementFactory factory=myJavaFacade.getElementFactory();
  final PsiClassType typeMapStringToInteger=(PsiClassType)factory.createTypeFromText("java.util.Map <java.lang.String,java.lang.Integer>",null);
  final PsiClassType.ClassResolveResult mapResolveResult=typeMapStringToInteger.resolveGenerics();
  assertTrue(mapResolveResult.getElement().equals(map));
  final PsiMethod entrySetMethod=map.findMethodsByName("entrySet",false)[0];
  final PsiType entrySetReturnType=entrySetMethod.getReturnType();
  assertEquals("java.util.Set<? extends java.util.Map.Entry<K,V>>",entrySetReturnType.getCanonicalText());
  final PsiSubstitutor substitutor=((PsiClassType)entrySetReturnType).resolveGenerics().getSubstitutor();
  assertEquals("E of java.util.Set -> ? extends java.util.Map.Entry<K,V>\n",substitutor.toString());
  final PsiType typeSetOfEntriesOfStringAndInteger=factory.createTypeFromText("java.util.Set<? extends java.util.Map.Entry<java.lang.String,java.lang.Integer>>",null);
  final PsiType substitutedEntrySetReturnType=mapResolveResult.getSubstitutor().substitute(entrySetReturnType);
  assertTrue(typeSetOfEntriesOfStringAndInteger.equals(substitutedEntrySetReturnType));
  assertTrue(typeSetOfEntriesOfStringAndInteger.isAssignableFrom(substitutedEntrySetReturnType));
}
