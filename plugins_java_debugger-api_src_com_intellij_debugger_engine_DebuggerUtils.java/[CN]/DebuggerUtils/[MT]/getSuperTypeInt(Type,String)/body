{
  Type result;
  if (subType == null) {
    return null;
  }
  if (subType.name().equals(superType)) {
    return subType;
  }
  if (subType instanceof ClassType) {
    result=getSuperType(((ClassType)subType).superclass(),superType);
    if (result != null) {
      return result;
    }
    List ifaces=((ClassType)subType).allInterfaces();
    for (Iterator iterator=ifaces.iterator(); iterator.hasNext(); ) {
      InterfaceType interfaceType=(InterfaceType)iterator.next();
      if (interfaceType.name().equals(superType)) {
        return interfaceType;
      }
    }
    return null;
  }
  if (subType instanceof InterfaceType) {
    List ifaces=((InterfaceType)subType).superinterfaces();
    for (Iterator iterator=ifaces.iterator(); iterator.hasNext(); ) {
      InterfaceType interfaceType=(InterfaceType)iterator.next();
      result=getSuperType(interfaceType,superType);
      if (result != null) {
        return result;
      }
    }
  }
 else   if (subType instanceof ArrayType) {
    if (superType.endsWith("[]")) {
      try {
        String superTypeItem=superType.substring(0,superType.length() - 2);
        Type subTypeItem=((ArrayType)subType).componentType();
        return instanceOf(subTypeItem,superTypeItem) ? subType : null;
      }
 catch (      ClassNotLoadedException e) {
        LOG.debug(e);
      }
    }
  }
 else   if (subType instanceof PrimitiveType) {
    if (superType.equals("java.lang.Primitive")) {
      return subType;
    }
  }
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(superType)) {
    List list=subType.virtualMachine().classesByName(CommonClassNames.JAVA_LANG_OBJECT);
    if (list.size() > 0) {
      return (ReferenceType)list.get(0);
    }
  }
  return null;
}
