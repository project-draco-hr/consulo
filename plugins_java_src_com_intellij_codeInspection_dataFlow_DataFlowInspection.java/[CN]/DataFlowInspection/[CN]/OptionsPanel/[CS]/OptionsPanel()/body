{
  super(new GridBagLayout());
  GridBagConstraints gc=new GridBagConstraints();
  gc.weighty=0;
  gc.weightx=1;
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.anchor=GridBagConstraints.NORTHWEST;
  mySuggestNullables=new JCheckBox(InspectionsBundle.message("inspection.data.flow.nullable.quickfix.option"));
  mySuggestNullables.setSelected(SUGGEST_NULLABLE_ANNOTATIONS);
  mySuggestNullables.getModel().addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      SUGGEST_NULLABLE_ANNOTATIONS=mySuggestNullables.isSelected();
    }
  }
);
  myDontReportTrueAsserts=new JCheckBox(InspectionsBundle.message("inspection.data.flow.true.asserts.option"));
  myDontReportTrueAsserts.setSelected(DONT_REPORT_TRUE_ASSERT_STATEMENTS);
  myDontReportTrueAsserts.getModel().addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      DONT_REPORT_TRUE_ASSERT_STATEMENTS=myDontReportTrueAsserts.isSelected();
    }
  }
);
  myIgnoreAssertions=new JCheckBox("Ignore assert statements");
  myIgnoreAssertions.setSelected(IGNORE_ASSERT_STATEMENTS);
  myIgnoreAssertions.getModel().addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      IGNORE_ASSERT_STATEMENTS=myIgnoreAssertions.isSelected();
    }
  }
);
  myReportConstantReferences=new JCheckBox("Warn when reading a value guaranteed to be constant");
  myReportConstantReferences.setSelected(REPORT_CONSTANT_REFERENCE_VALUES);
  myReportConstantReferences.getModel().addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      REPORT_CONSTANT_REFERENCE_VALUES=myReportConstantReferences.isSelected();
    }
  }
);
  gc.insets=new Insets(0,0,0,0);
  gc.gridy=0;
  add(mySuggestNullables,gc);
  final JButton configureAnnotations=new JButton(InspectionsBundle.message("configure.annotations.option"));
  configureAnnotations.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(OptionsPanel.this));
      if (project == null)       project=ProjectManager.getInstance().getDefaultProject();
      final NullableNotNullDialog dialog=new NullableNotNullDialog(project);
      dialog.show();
    }
  }
);
  gc.gridy++;
  gc.fill=GridBagConstraints.NONE;
  gc.insets.left=20;
  gc.insets.bottom=15;
  add(configureAnnotations,gc);
  if ("true".equals(System.getProperty("dfa.inspection.show.method.configuration","false"))) {
    final JButton configureCheckAnnotations=new JButton(InspectionsBundle.message("configure.checker.option.button"));
    configureCheckAnnotations.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(OptionsPanel.this));
        if (project == null)         project=ProjectManager.getInstance().getDefaultProject();
        final ConditionCheckDialog dialog=new ConditionCheckDialog(project,InspectionsBundle.message("configure.checker.option.main.dialog.title"));
        dialog.show();
      }
    }
);
    gc.gridy++;
    gc.fill=GridBagConstraints.NONE;
    gc.insets.left=20;
    gc.insets.bottom=15;
    add(configureCheckAnnotations,gc);
  }
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.weighty=1;
  gc.insets.left=0;
  gc.gridy++;
  add(myDontReportTrueAsserts,gc);
  gc.gridy++;
  add(myIgnoreAssertions,gc);
  gc.gridy++;
  add(myReportConstantReferences,gc);
}
