{
  Set<Integer> detectorsToProcess;
synchronized (myLock) {
    detectorsToProcess=myDetectedFrameworksData.updateNewFiles(myFilesToProcess);
    myFilesToProcess.clear();
  }
  final FileBasedIndex index=FileBasedIndex.getInstance();
  Map<Integer,List<? extends DetectedFrameworkDescription>> newDescriptions=new HashMap<Integer,List<? extends DetectedFrameworkDescription>>();
  for (  Integer key : detectorsToProcess) {
    Collection<VirtualFile> files=index.getContainingFiles(FrameworkDetectionIndex.NAME,key,GlobalSearchScope.allScope(myProject));
    final Collection<VirtualFile> newFiles=myDetectedFrameworksData.retainNewFiles(key,files);
    FrameworkDetector detector=FrameworkDetectorRegistry.getInstance().getDetectorById(key);
    if (detector != null) {
      final List<? extends DetectedFrameworkDescription> frameworks=detector.detect(newFiles,new FrameworkDetectionContextImpl(myProject));
      final List<? extends DetectedFrameworkDescription> updated=myDetectedFrameworksData.updateFrameworksList(key,frameworks);
      if (!updated.isEmpty()) {
        newDescriptions.put(key,updated);
      }
    }
  }
  for (  final Integer detectorId : newDescriptions.keySet()) {
    for (    final DetectedFrameworkDescription description : newDescriptions.get(detectorId)) {
      final String text=ProjectBundle.message("framework.detected.info.text",description.getDescription());
      FRAMEWORK_DETECTION_NOTIFICATION.createNotification("Frameworks detected",text,NotificationType.INFORMATION,new NotificationListener(){
        @Override public void hyperlinkUpdate(        @NotNull Notification notification,        @NotNull HyperlinkEvent event){
          if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            setupFramework(description,detectorId,notification);
          }
        }
      }
).notify(myProject);
    }
  }
}
