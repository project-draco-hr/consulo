{
  final MultiMap<Integer,DetectedFrameworkDescription> frameworksMap=myDetectedFrameworksData.getDetectedFrameworks();
  List<DetectedFrameworkDescription> descriptions=new ArrayList<DetectedFrameworkDescription>();
  final FileBasedIndex index=FileBasedIndex.getInstance();
  final DetectionExcludesConfiguration excludesConfiguration=DetectionExcludesConfiguration.getInstance(myProject);
  for (  Integer id : frameworksMap.keySet()) {
    final Collection<VirtualFile> acceptedFiles=index.getContainingFiles(FrameworkDetectionIndex.NAME,id,GlobalSearchScope.projectScope(myProject));
    boolean obsolete=false;
    for (    DetectedFrameworkDescription description : frameworksMap.get(id)) {
      if (!acceptedFiles.containsAll(description.getRelatedFiles())) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Some files from " + description.getRelatedFiles() + " aren't accepted by detector any more (accepted = "+ acceptedFiles+ ")");
        }
        obsolete=true;
        break;
      }
    }
    final Collection<? extends DetectedFrameworkDescription> frameworks;
    if (obsolete) {
      frameworks=runDetector(id,index,excludesConfiguration,false);
    }
 else {
      frameworks=frameworksMap.get(id);
    }
    for (    DetectedFrameworkDescription framework : frameworks) {
      descriptions.add(framework);
    }
  }
  return FrameworkDetectionUtil.removeDisabled(descriptions);
}
