{
  final MultiMap<Integer,DetectedFrameworkDescription> frameworks=myDetectedFrameworksData.getDetectedFrameworks();
  IdentityHashMap<DetectedFrameworkDescription,Integer> frameworksToId=new IdentityHashMap<DetectedFrameworkDescription,Integer>();
  List<DetectedFrameworkDescription> descriptions=new ArrayList<DetectedFrameworkDescription>();
  for (  Integer id : frameworks.keySet()) {
    for (    DetectedFrameworkDescription description : frameworks.get(id)) {
      descriptions.add(description);
      frameworksToId.put(description,id);
    }
  }
  final ConfigureDetectedFrameworksDialog dialog=new ConfigureDetectedFrameworksDialog(myProject,descriptions);
  dialog.show();
  if (dialog.isOK()) {
    notification.expire();
    List<DetectedFrameworkDescription> selected=dialog.getSelectedFrameworks();
    AccessToken token=WriteAction.start();
    try {
      final PlatformModifiableModelsProvider provider=new PlatformModifiableModelsProvider();
      for (      DetectedFrameworkDescription description : selected) {
        description.configureFramework(provider);
        myDetectedFrameworksData.putExistentFrameworkFiles(frameworksToId.get(description),description.getRelatedFiles());
      }
    }
  finally {
      token.finish();
    }
  }
}
