{
  final Map<String,String> attributesToAdd=new HashMap<String,String>();
  for (  XmlAttribute attribute : includeTag.getAttributes()) {
    final String namespace=attribute.getNamespace();
    if (SdkConstants.NS_RESOURCES.equals(namespace)) {
      attributesToAdd.put(attribute.getLocalName(),attribute.getValue());
    }
  }
  final XmlTag newTag=(XmlTag)includeTag.replace(layoutRootTag.copy());
  final List<XmlAttribute> toDelete=new ArrayList<XmlAttribute>();
  for (  XmlAttribute attribute : newTag.getAttributes()) {
    if (attribute.isNamespaceDeclaration()) {
      final String localName=attribute.getLocalName();
      final String prefix=localName.equals(attribute.getName()) ? "" : localName;
      final String namespace=attribute.getValue();
      if (includeParentTag != null && namespace.equals(includeParentTag.getNamespaceByPrefix(prefix))) {
        toDelete.add(attribute);
      }
    }
  }
  for (  XmlAttribute attribute : toDelete) {
    attribute.delete();
  }
  for (  Map.Entry<String,String> entry : attributesToAdd.entrySet()) {
    final String localName=entry.getKey();
    final String value=entry.getValue();
    newTag.setAttribute(localName,SdkConstants.NS_RESOURCES,value);
  }
  CodeStyleManager.getInstance(newTag.getManager()).reformat(newTag);
}
