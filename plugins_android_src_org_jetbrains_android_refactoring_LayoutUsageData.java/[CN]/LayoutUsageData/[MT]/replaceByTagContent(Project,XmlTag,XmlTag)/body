{
  final ASTNode node=tagToInline.getNode();
  if (node == null) {
    throw new AndroidRefactoringErrorException();
  }
  final ASTNode startTagEnd=XmlChildRole.START_TAG_END_FINDER.findChild(node);
  final ASTNode closingTagStart=XmlChildRole.CLOSING_TAG_START_FINDER.findChild(node);
  if (startTagEnd == null || closingTagStart == null) {
    throw new AndroidRefactoringErrorException();
  }
  final int contentStart=startTagEnd.getTextRange().getEndOffset();
  final int contentEnd=closingTagStart.getTextRange().getStartOffset();
  if (contentStart < 0 || contentEnd < 0 || contentStart >= contentEnd) {
    throw new AndroidRefactoringErrorException();
  }
  final PsiFile file=tagToInline.getContainingFile();
  if (file == null) {
    throw new AndroidRefactoringErrorException();
  }
  final String textToInline=file.getText().substring(contentStart,contentEnd).trim();
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  final Document document=documentManager.getDocument(tagToReplace.getContainingFile());
  if (document == null) {
    throw new AndroidRefactoringErrorException();
  }
  final TextRange range=tagToReplace.getTextRange();
  document.replaceString(range.getStartOffset(),range.getEndOffset(),textToInline);
  documentManager.commitDocument(document);
}
